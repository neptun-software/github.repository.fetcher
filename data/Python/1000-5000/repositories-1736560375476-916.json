{
  "metadata": {
    "timestamp": 1736560375476,
    "page": 916,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aziz/PlainTasks",
      "stars": 3292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "*.cache\n*.pyc\n.DS_Store\npackage-metadata.json"
        },
        {
          "name": ".no-sublime-package",
          "type": "blob",
          "size": 0.001953125,
          "content": " \n"
        },
        {
          "name": "APlainTasksCommon.py",
          "type": "blob",
          "size": 4.8310546875,
          "content": "# coding: utf-8\nimport sublime, sublime_plugin\nimport itertools\n\nST3 = int(sublime.version()) >= 3000\nif not ST3:\n    import locale\n\n\ndef get_all_projects_and_separators(view):\n    # because tmLanguage need \\n to make background full width of window\n    # multiline headers are possible, thus we have to split em to be sure that\n    # one header == one line\n    projects = itertools.chain(*[view.lines(r) for r in view.find_by_selector('keyword.control.header.todo')])\n    return sorted(list(projects) +\n                  view.find_by_selector('meta.punctuation.separator.todo'))\n\n\nclass PlainTasksBase(sublime_plugin.TextCommand):\n    def run(self, edit, **kwargs):\n        settings = self.view.settings()\n\n        self.taskpaper_compatible = settings.get('taskpaper_compatible', False)\n        if self.taskpaper_compatible:\n            self.open_tasks_bullet = self.done_tasks_bullet = self.canc_tasks_bullet = '-'\n            self.before_date_space = ''\n        else:\n            self.open_tasks_bullet = settings.get('open_tasks_bullet', u'☐')\n            self.done_tasks_bullet = settings.get('done_tasks_bullet', u'✔')\n            self.canc_tasks_bullet = settings.get('cancelled_tasks_bullet', u'✘')\n            self.before_date_space = settings.get('before_date_space', ' ')\n\n        translate_tabs_to_spaces = settings.get('translate_tabs_to_spaces', False)\n        self.before_tasks_bullet_spaces = ' ' * settings.get('before_tasks_bullet_margin', 1) if not self.taskpaper_compatible and translate_tabs_to_spaces else '\\t'\n        self.tasks_bullet_space = settings.get('tasks_bullet_space', ' ' if self.taskpaper_compatible or translate_tabs_to_spaces else '\\t')\n\n        self.date_format = settings.get('date_format', '(%y-%m-%d %H:%M)')\n        if settings.get('done_tag', True) or self.taskpaper_compatible:\n            self.done_tag = \"@done\"\n            self.canc_tag = \"@cancelled\"\n        else:\n            self.done_tag = \"\"\n            self.canc_tag = \"\"\n        self.done_date = settings.get('done_date', True)\n\n        self.project_postfix = settings.get('project_tag', True)\n        self.archive_name = settings.get('archive_name', 'Archive:')\n        # org-mode style archive stuff\n        self.archive_org_default_filemask = u'{dir}{sep}{base}_archive{ext}'\n        self.archive_org_filemask = settings.get('archive_org_filemask', self.archive_org_default_filemask)\n\n        if not ST3:\n            self.sys_enc = locale.getpreferredencoding()\n        self.runCommand(edit, **kwargs)\n\n    def format_line_end(self, tag, tznow):\n        try:\n            date = tznow.strftime(self.date_format).decode(self.sys_enc)\n        except:\n            date = tznow.strftime(self.date_format)\n        done_line_end = ' %s%s%s' % (tag, self.before_date_space, date if self.done_date else '')\n        return done_line_end.replace('  ', ' ').rstrip(), date\n\n\nclass PlainTasksEnabled(sublime_plugin.TextCommand):\n    def is_enabled(self):\n        return self.view.score_selector(0, \"text.todo\") > 0\n\n    is_visible = is_enabled\n\n\nclass PlainTasksFold(PlainTasksEnabled):\n    def exec_folding(self, visible_region):\n        self.view.unfold(sublime.Region(0, self.view.size()))\n        for i, d in enumerate(visible_region):\n            if not i:  # beginning of document\n                self.folding(0, d.a - 1)\n            else:  # all regions within\n                self.folding(visible_region[i-1].b + 1, d.a - 1)\n        if d:  # ending of document\n            self.folding(d.b + 1, self.view.size())\n\n    def folding(self, start, end):\n        if start < end:\n            self.view.fold(sublime.Region(start, end))\n\n    def add_projects_and_notes(self, task_regions):\n        '''Context is important, if task has note and belongs to projects, make em visible'''\n        def add_note(region):\n            # refactor: method in ArchiveCommand\n            next_line_begins = region.end() + 1\n            while self.view.scope_name(next_line_begins) == 'text.todo notes.todo ':\n                note = self.view.line(next_line_begins)\n                if note not in task_regions:\n                    task_regions.append(note)\n                next_line_begins = self.view.line(next_line_begins).end() + 1\n\n        projects = [r for r in get_all_projects_and_separators(self.view) if r.a < task_regions[~0].a]\n        for d in reversed(task_regions):\n            add_note(d)\n            for p in reversed(projects):\n                # refactor: different implementation in ArchiveCommand\n                project_block = self.view.indented_region(p.end() + 1)\n                due_block     = self.view.indented_region(d.begin())\n                if all((p not in task_regions, project_block.contains(due_block))):\n                    task_regions.append(p)\n                    add_note(p)\n                if self.view.indented_region(p.begin()).empty():\n                    break\n        task_regions.sort()\n        return task_regions\n"
        },
        {
          "name": "Context.sublime-menu",
          "type": "blob",
          "size": 0.5849609375,
          "content": "[\n    { \"caption\": \"Tasks: Filter by tags under cursors\", \"command\": \"plain_tasks_fold_to_tags\" },\n    { \"caption\": \"Tasks: Show date picker\", \"command\": \"plain_tasks_calendar\" },\n    { \"caption\": \"Tasks: Add due date tag\", \"command\": \"plain_tasks_inject_due_date\" },\n    { \"caption\": \"Tasks: Sort items in the list under cursor by due date and priority\", \"command\": \"plain_tasks_sort_by_due_date_and_priority\" },\n    { \"caption\": \"Tasks: Reverse sort items in the list under cursor by due date and priority\", \"command\": \"plain_tasks_sort_by_due_date_and_priority\", \"args\": {\"descending\": true} }\n]\n"
        },
        {
          "name": "Default (Linux).sublime-keymap",
          "type": "blob",
          "size": 2.9990234375,
          "content": "[\n  { \"keys\": [\"ctrl+d\"], \"command\": \"plain_tasks_complete\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"alt+c\"], \"command\": \"plain_tasks_cancel\", \"context\": [{\"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+enter\"], \"command\": \"plain_tasks_new\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+i\"], \"command\": \"plain_tasks_new\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+enter\"], \"command\": \"plain_tasks_new_with_date\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+a\"], \"command\": \"plain_tasks_archive\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+o\"], \"command\": \"plain_tasks_archive_org\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+u\"], \"command\": \"plain_tasks_open_url\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"alt+o\"], \"command\": \"plain_tasks_open_link\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+r\"], \"command\": \"plain_tasks_goto_tag\", \"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f4\"], \"command\": \"plain_tasks_inject_due_date\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f5\"], \"command\": \"plain_tasks_sort_by_due_date_and_priority\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f7\"], \"command\": \"plain_tasks_sort_by_due_date_and_priority\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }], \"args\": {\"descending\": true} },\n  { \"keys\": [\"tab\"], \"command\": \"plain_task_insert_date\", \"context\":\n    [\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"(@started|@toggle|@created)(?!\\\\([\\\\d\\\\w,\\\\.:\\\\-\\/ @]*\\\\))\", \"match_all\": true }\n    ]\n  },\n  { \"keys\": [\"tab\"], \"command\": \"plain_tasks_replace_short_date\", \"context\":\n    [\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"@due\\\\([^\\\\)]+(?!.*?\\\\))\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"[ \\t]*\\\\)\", \"match_all\": true }\n    ]\n  },\n  { \"keys\": [\"tab\"], \"command\": \"plain_tasks_re_calculate_time_for_tasks\", \"context\":\n    [\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo meta.tag.todo.completed, text.todo meta.tag.todo.cancelled\" }\n    ]\n  }\n]\n"
        },
        {
          "name": "Default (OSX).sublime-keymap",
          "type": "blob",
          "size": 3.0087890625,
          "content": "[\n  { \"keys\": [\"super+d\"], \"command\": \"plain_tasks_complete\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+c\"], \"command\": \"plain_tasks_cancel\", \"context\": [{\"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+enter\"], \"command\": \"plain_tasks_new\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+i\"], \"command\": \"plain_tasks_new\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+shift+enter\"], \"command\": \"plain_tasks_new_with_date\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+shift+a\"], \"command\": \"plain_tasks_archive\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+shift+o\"], \"command\": \"plain_tasks_archive_org\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+shift+u\"], \"command\": \"plain_tasks_open_url\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+o\"], \"command\": \"plain_tasks_open_link\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"super+shift+r\"], \"command\": \"plain_tasks_goto_tag\", \"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f4\"], \"command\": \"plain_tasks_inject_due_date\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f5\"], \"command\": \"plain_tasks_sort_by_due_date_and_priority\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f7\"], \"command\": \"plain_tasks_sort_by_due_date_and_priority\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }], \"args\": {\"descending\": true} },\n  { \"keys\": [\"tab\"], \"command\": \"plain_task_insert_date\", \"context\":\n    [\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"(@started|@toggle|@created)(?!\\\\([\\\\d\\\\w,\\\\.:\\\\-\\/ @]*\\\\))\", \"match_all\": true }\n    ]\n  },\n  { \"keys\": [\"tab\"], \"command\": \"plain_tasks_replace_short_date\", \"context\":\n    [\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"@due\\\\([^\\\\)]+(?!.*?\\\\))\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"[ \\t]*\\\\)\", \"match_all\": true }\n    ]\n  },\n  { \"keys\": [\"tab\"], \"command\": \"plain_tasks_re_calculate_time_for_tasks\", \"context\":\n    [\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo meta.tag.todo.completed, text.todo meta.tag.todo.cancelled\" }\n    ]\n  }\n]\n"
        },
        {
          "name": "Default (Windows).sublime-keymap",
          "type": "blob",
          "size": 2.9990234375,
          "content": "[\n  { \"keys\": [\"ctrl+d\"], \"command\": \"plain_tasks_complete\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"alt+c\"], \"command\": \"plain_tasks_cancel\", \"context\": [{\"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+enter\"], \"command\": \"plain_tasks_new\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+i\"], \"command\": \"plain_tasks_new\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+enter\"], \"command\": \"plain_tasks_new_with_date\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+a\"], \"command\": \"plain_tasks_archive\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+o\"], \"command\": \"plain_tasks_archive_org\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+u\"], \"command\": \"plain_tasks_open_url\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"alt+o\"], \"command\": \"plain_tasks_open_link\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"ctrl+shift+r\"], \"command\": \"plain_tasks_goto_tag\", \"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f4\"], \"command\": \"plain_tasks_inject_due_date\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f5\"], \"command\": \"plain_tasks_sort_by_due_date_and_priority\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }] },\n  { \"keys\": [\"f7\"], \"command\": \"plain_tasks_sort_by_due_date_and_priority\",\"context\": [{ \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" }], \"args\": {\"descending\": true} },\n  { \"keys\": [\"tab\"], \"command\": \"plain_task_insert_date\", \"context\":\n    [\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"(@started|@toggle|@created)(?!\\\\([\\\\d\\\\w,\\\\.:\\\\-\\/ @]*\\\\))\", \"match_all\": true }\n    ]\n  },\n  { \"keys\": [\"tab\"], \"command\": \"plain_tasks_replace_short_date\", \"context\":\n    [\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\" },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"@due\\\\([^\\\\)]+(?!.*?\\\\))\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"[ \\t]*\\\\)\", \"match_all\": true }\n    ]\n  },\n  { \"keys\": [\"tab\"], \"command\": \"plain_tasks_re_calculate_time_for_tasks\", \"context\":\n    [\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo meta.tag.todo.completed, text.todo meta.tag.todo.cancelled\" }\n    ]\n  }\n]\n"
        },
        {
          "name": "Default.sublime-commands",
          "type": "blob",
          "size": 1.5615234375,
          "content": "[\n    { \"caption\": \"Tasks: New document\", \"command\": \"plain_tasks_new_task_doc\" },\n    { \"caption\": \"Tasks: Complete\", \"command\": \"plain_tasks_complete\" },\n    { \"caption\": \"Tasks: Cancel\", \"command\": \"plain_tasks_cancel\" },\n    { \"caption\": \"Tasks: New\", \"command\": \"plain_tasks_new\" },\n    { \"caption\": \"Tasks: Archive\", \"command\": \"plain_tasks_archive\" },\n    { \"caption\": \"Tasks: Archive within selection(s)\", \"command\": \"plain_tasks_archive\", \"args\": {\"partial\": true} },\n    { \"caption\": \"Tasks: Archive (Org-Mode Style)\", \"command\": \"plain_tasks_org_archive\" },\n    { \"caption\": \"Tasks: Open URL\", \"command\": \"plain_tasks_open_url\" },\n    { \"caption\": \"Tasks: Open Link\", \"command\": \"plain_tasks_open_link\" },\n    { \"caption\": \"Tasks: View as HTML\", \"command\": \"plain_tasks_convert_to_html\" },\n    { \"caption\": \"Tasks: Save as HTML…\", \"command\": \"plain_tasks_convert_to_html\", \"args\": {\"ask\": true} },\n    { \"caption\": \"Tasks: Copy Statistics\", \"command\": \"plain_tasks_copy_stats\" },\n    { \"caption\": \"Tasks: Fold to due tasks\", \"command\": \"plain_tasks_fold_to_due_tags\" },\n    { \"caption\": \"Tasks: Filter by tags under cursors\", \"command\": \"plain_tasks_fold_to_tags\" },\n    { \"caption\": \"Tasks: Add due date tag\", \"command\": \"plain_tasks_inject_due_date\" },\n    { \"caption\": \"Tasks: Sort items in the list under cursor by due date and priority\", \"command\": \"plain_tasks_sort_by_due_date_and_priority\" },\n    { \"caption\": \"Tasks: Reverse sort items in the list under cursor by due date and priority\", \"command\": \"plain_tasks_sort_by_due_date_and_priority\", \"args\": {\"descending\": true} }\n]\n"
        },
        {
          "name": "Default.sublime-keymap",
          "type": "blob",
          "size": 4.697265625,
          "content": "[\n  // add italic&bold for empty selection\n  { \"keys\": [\"*\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"*${0:$SELECTION}*\"}, \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true},\n      { \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \" |\\t|\\\\*|^|$\", \"match_all\": true },\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\"}\n    ]\n  },\n  { \"keys\": [\"_\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"_${0:$SELECTION}_\"}, \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true},\n      { \"key\": \"preceding_text\", \"operator\": \"regex_match\", \"operand\": \" |\\t|_|^|$\", \"match_all\": true },\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\"}\n    ]\n  },\n  // add italic&bold for non-empty selection\n  { \"keys\": [\"*\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"*${0:$SELECTION}*\"}, \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true},\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\"}\n    ]\n  },\n  { \"keys\": [\"_\"], \"command\": \"insert_snippet\", \"args\": {\"contents\": \"_${0:$SELECTION}_\"}, \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true},\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": false, \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\"}\n    ]\n  },\n  // remove bold with same keys, toggle\n  { \"keys\": [\"*\"], \"command\": \"plain_tasks_remove_bold\",  \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true},\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo todo.bold\"}\n    ]\n  },\n  { \"keys\": [\"_\"], \"command\": \"plain_tasks_remove_bold\", \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true},\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo todo.bold\"}\n    ]\n  },\n  // same for single selection, we probably should fix it in syntax: **** defined as italic, but in fact it is [supposed to be] bold\n  { \"keys\": [\"*\"], \"command\": \"plain_tasks_remove_bold\",  \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\**$\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\**\", \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo todo.italic\"}\n    ]\n  },\n  { \"keys\": [\"_\"], \"command\": \"plain_tasks_remove_bold\",  \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"__$\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^__\", \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo todo.italic\"}\n    ]\n  },\n  // save keystroke on backspace\n  { \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"\\\\*$\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^\\\\*\", \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\"}\n    ]\n  },\n  { \"keys\": [\"backspace\"], \"command\": \"run_macro_file\", \"args\": {\"file\": \"Packages/Default/Delete Left Right.sublime-macro\"}, \"context\":\n    [\n      { \"key\": \"setting.auto_match_enabled\", \"operator\": \"equal\", \"operand\": true },\n      { \"key\": \"selection_empty\", \"operator\": \"equal\", \"operand\": true, \"match_all\": true },\n      { \"key\": \"preceding_text\", \"operator\": \"regex_contains\", \"operand\": \"_$\", \"match_all\": true },\n      { \"key\": \"following_text\", \"operator\": \"regex_contains\", \"operand\": \"^_\", \"match_all\": true },\n      { \"key\": \"selector\", \"operator\": \"equal\", \"operand\": \"text.todo\"}\n    ]\n  }\n]\n"
        },
        {
          "name": "Indentation.tmPreferences",
          "type": "blob",
          "size": 0.4580078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Indentation</string>\n\t<key>scope</key>\n\t<string>text.todo</string>\n\t<key>settings</key>\n\t<dict>\n\t\t<key>increaseIndentPattern</key>\n\t\t<string>^\\s*\\w+.+:\\s*$</string>\n\t</dict>\n\t<key>uuid</key>\n\t<string>6944f261-8115-412d-a83f-e91eac1e0561</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright 2012-2013 Allen Bargi.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Main.sublime-menu",
          "type": "blob",
          "size": 4.8779296875,
          "content": "[\n    {\n        \"caption\": \"Preferences\",\n        \"mnemonic\": \"n\",\n        \"id\": \"preferences\",\n        \"children\":\n        [\n            {\n                \"caption\": \"Package Settings\",\n                \"mnemonic\": \"P\",\n                \"id\": \"package-settings\",\n                \"children\":\n                [\n                    {\n                        \"caption\": \"PlainTasks\",\n                        \"children\":\n                        [\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\"file\": \"${packages}/PlainTasks/messages/Tutorial.todo\"},\n                                \"caption\": \"Tutorial\"\n                            },\n                            { \"caption\": \"-\" },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/PlainTasks/PlainTasks (OSX).sublime-settings\",\n                                    \"platform\": \"OSX\"\n                                },\n                                \"caption\": \"Settings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/PlainTasks/PlainTasks (Linux).sublime-settings\",\n                                    \"platform\": \"Linux\"\n                                },\n                                \"caption\": \"Settings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/PlainTasks/PlainTasks (Windows).sublime-settings\",\n                                    \"platform\": \"Windows\"\n                                },\n                                \"caption\": \"Settings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\"file\": \"${packages}/User/PlainTasks.sublime-settings\"},\n                                \"caption\": \"Settings – User\"\n                            },\n                            { \"caption\": \"-\" },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/PlainTasks/Default (OSX).sublime-keymap\",\n                                    \"platform\": \"OSX\"\n                                },\n                                \"caption\": \"Key Bindings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/PlainTasks/Default (Linux).sublime-keymap\",\n                                    \"platform\": \"Linux\"\n                                },\n                                \"caption\": \"Key Bindings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/PlainTasks/Default (Windows).sublime-keymap\",\n                                    \"platform\": \"Windows\"\n                                },\n                                \"caption\": \"Key Bindings – Default\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/User/Default (OSX).sublime-keymap\",\n                                    \"platform\": \"OSX\"\n                                },\n                                \"caption\": \"Key Bindings – User\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/User/Default (Linux).sublime-keymap\",\n                                    \"platform\": \"Linux\"\n                                },\n                                \"caption\": \"Key Bindings – User\"\n                            },\n                            {\n                                \"command\": \"open_file\",\n                                \"args\": {\n                                    \"file\": \"${packages}/User/Default (Windows).sublime-keymap\",\n                                    \"platform\": \"Windows\"\n                                },\n                                \"caption\": \"Key Bindings – User\"\n                            },\n                            { \"caption\": \"-\" }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n"
        },
        {
          "name": "PlainTasks (Linux).sublime-settings",
          "type": "blob",
          "size": 1.59375,
          "content": "{\n  \"open_tasks_bullet\": \"☐\", // options: - | ❍ | ❑ | ■ | □ | ☐ | ▪ | ▫ | – | — | ≡ | → | › | [ ]\n  \"done_tasks_bullet\": \"✔\", // options: + | ✓ | ✔ | √ | [x]\n  \"cancelled_tasks_bullet\": \"✘\", // options: x | ✘ | [-] | ❌\n  \"before_tasks_bullet_margin\": 1,\n  \"date_format\": \"(%y-%m-%d %H:%M)\",\n  \"done_tag\": true, // related to @cancelled as well\n  \"project_tag\": true, // if true - postfix archived task with project tag, if false - prefix\n  \"archive_name\": \"Archive:\", // make sure it is the unique project name within your todo files\n  \"new_on_top\": true, // how to sort archived tasks\n  \"show_remain_due\": true, // in Sublime 3, show remain or overdue time under due tags\n\n  \"color_scheme\": \"Packages/PlainTasks/tasks.hidden-tmTheme\",\n    // other bundled schemes:\n    //   Packages/PlainTasks/tasks-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-gray.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-monokai.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-solarized-light.hidden-tmTheme\n  // \"font_size\": 15,\n  // \"font_face\": \"Consolas\",\n  \"draw_indent_guides\": false,\n  \"line_numbers\": false,\n  \"gutter\": true,\n  \"margin\": 2,\n  \"tab_size\": 2,\n  \"translate_tabs_to_spaces\": true,\n  \"use_tab_stops\": false,\n  \"match_brackets\": false,\n  \"fold_buttons\": true,\n  \"fade_fold_buttons\": false,\n  \"extensions\":\n  [\n    \"TODO\",\n    \"todo\",\n    \"todolist\",\n    \"taskpaper\",\n    \"tasks\"\n  ]\n}\n"
        },
        {
          "name": "PlainTasks (OSX).sublime-settings",
          "type": "blob",
          "size": 1.59375,
          "content": "{\n  \"open_tasks_bullet\": \"☐\", // options: - | ❍ | ❑ | ■ | □ | ☐ | ▪ | ▫ | – | — | ≡ | → | › | [ ]\n  \"done_tasks_bullet\": \"✔\", // options: + | ✓ | ✔ | √ | [x]\n  \"cancelled_tasks_bullet\": \"✘\", // options: x | ✘ | [-] | ❌\n  \"before_tasks_bullet_margin\": 1,\n  \"date_format\": \"(%y-%m-%d %H:%M)\",\n  \"done_tag\": true, // related to @cancelled as well\n  \"project_tag\": true, // if true - postfix archived task with project tag, if false - prefix\n  \"archive_name\": \"Archive:\", // make sure it is the unique project name within your todo files\n  \"new_on_top\": true, // how to sort archived tasks\n  \"show_remain_due\": true, // in Sublime 3, show remain or overdue time under due tags\n\n  \"color_scheme\": \"Packages/PlainTasks/tasks.hidden-tmTheme\",\n    // other bundled schemes:\n    //   Packages/PlainTasks/tasks-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-gray.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-monokai.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-solarized-light.hidden-tmTheme\n  // \"font_size\": 15,\n  // \"font_face\": \"Consolas\",\n  \"draw_indent_guides\": false,\n  \"line_numbers\": false,\n  \"gutter\": true,\n  \"margin\": 2,\n  \"tab_size\": 2,\n  \"translate_tabs_to_spaces\": true,\n  \"use_tab_stops\": false,\n  \"match_brackets\": false,\n  \"fold_buttons\": true,\n  \"fade_fold_buttons\": false,\n  \"extensions\":\n  [\n    \"TODO\",\n    \"todo\",\n    \"todolist\",\n    \"taskpaper\",\n    \"tasks\"\n  ]\n}\n"
        },
        {
          "name": "PlainTasks (Windows).sublime-settings",
          "type": "blob",
          "size": 1.7099609375,
          "content": "{\n  \"open_tasks_bullet\": \"☐\", // options: - | ❍ | ❑ | ■ | □ | ☐ | ▪ | ▫ | – | — | ≡ | → | › | [ ]\n  \"done_tasks_bullet\": \"✔\", // options: + | ✓ | ✔ | √ | [x]\n  \"cancelled_tasks_bullet\": \"✘\", // options: x | ✘ | [-] | ❌\n  \"before_tasks_bullet_margin\": 1,\n  \"date_format\": \"(%y-%m-%d %H:%M)\",\n  \"done_tag\": true, // related to @cancelled as well\n  \"project_tag\": true, // if true - postfix archived task with project tag, if false - prefix\n  \"archive_name\": \"Archive:\", // make sure it is the unique project name within your todo files\n  \"new_on_top\": true, // how to sort archived tasks\n  \"show_remain_due\": false, // in Sublime 3, show remain or overdue time under due tags\n\n  \"bar_empty\": \"☐\", // empty cell for progress-bar in status-bar, for more details see Custom Statistics in README\n\n  \"color_scheme\": \"Packages/PlainTasks/tasks.hidden-tmTheme\",\n    // other bundled schemes:\n    //   Packages/PlainTasks/tasks-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-eighties-colored.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-eighties-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-gray.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-monokai.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-solarized-dark.hidden-tmTheme\n    //   Packages/PlainTasks/tasks-solarized-light.hidden-tmTheme\n  // \"font_size\": 11,\n  // \"font_face\": \"Consolas\",\n  \"draw_indent_guides\": false,\n  \"line_numbers\": false,\n  \"gutter\": true,\n  \"margin\": 2,\n  \"tab_size\": 2,\n  \"translate_tabs_to_spaces\": true,\n  \"use_tab_stops\": false,\n  \"match_brackets\": false,\n  \"fold_buttons\": true,\n  \"fade_fold_buttons\": false,\n  \"extensions\":\n  [\n    \"TODO\",\n    \"todo\",\n    \"todolist\",\n    \"taskpaper\",\n    \"tasks\"\n  ]\n}\n"
        },
        {
          "name": "PlainTasks.py",
          "type": "blob",
          "size": 53.119140625,
          "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport sublime, sublime_plugin\nimport os\nimport re\nimport webbrowser\nimport itertools\nimport threading\nfrom datetime import datetime, tzinfo, timedelta\nimport time\n\nplatform = sublime.platform()\nST3 = int(sublime.version()) >= 3000\n\nif ST3:\n    from .APlainTasksCommon import PlainTasksBase, PlainTasksFold, get_all_projects_and_separators\nelse:\n    from APlainTasksCommon import PlainTasksBase, PlainTasksFold, get_all_projects_and_separators\n    sublime_plugin.ViewEventListener = object\n\n# io is not operable in ST2 on Linux, but in all other cases io is better\n# https://github.com/SublimeTextIssues/Core/issues/254\nif not ST3 and platform == 'linux':\n    import codecs as io\nelse:\n    import io\n\nNT = platform == 'windows'\nif NT:\n    import subprocess\n\nif ST3:\n    from datetime import timezone\nelse:\n    class timezone(tzinfo):\n        __slots__ = (\"_offset\", \"_name\")\n\n        def __init__(self, offset, name=None):\n            if not isinstance(offset, timedelta):\n                raise TypeError(\"offset must be a timedelta\")\n            self._offset = offset\n            self._name = name\n\n        def utcoffset(self, dt):\n            return self._offset\n\n        def tzname(self, dt):\n            return self._name\n\n        def dst(self, dt):\n            return timedelta(0)\n\n\ndef tznow():\n    t = time.time()\n    d = datetime.fromtimestamp(t)\n    u = datetime.utcfromtimestamp(t)\n    return d.replace(tzinfo=timezone(d - u))\n\n\ndef check_parentheses(date_format, regex_group, is_date=False):\n    if is_date:\n        try:\n            parentheses = regex_group if datetime.strptime(regex_group.strip(), date_format) else ''\n        except ValueError:\n            parentheses = ''\n    else:\n        try:\n            parentheses = '' if datetime.strptime(regex_group.strip(), date_format) else regex_group\n        except ValueError:\n            parentheses = regex_group\n    return parentheses\n\n\nclass PlainTasksNewCommand(PlainTasksBase):\n    def runCommand(self, edit):\n        # list for ST3 support;\n        # reversed because with multiple selections regions would be messed up after first iteration\n        regions = itertools.chain(*(reversed(self.view.lines(region)) for region in reversed(list(self.view.sel()))))\n        header_to_task = self.view.settings().get('header_to_task', False)\n        # ST3 (3080) moves sel when call view.replace only by delta between original and\n        # new regions, so if sel is not in eol and we replace line with two lines,\n        # then cursor won’t be on next line as it should\n        sels = self.view.sel()\n        eol  = None\n        for i, line in enumerate(regions):\n            line_contents  = self.view.substr(line).rstrip()\n            not_empty_line = re.match('^(\\s*)(\\S.*)$', self.view.substr(line))\n            empty_line     = re.match('^(\\s+)$', self.view.substr(line))\n            current_scope  = self.view.scope_name(line.a)\n            eol = line.b  # need for ST3 when new content has line break\n            if 'item' in current_scope:\n                grps = not_empty_line.groups()\n                line_contents = self.view.substr(line) + '\\n' + grps[0] + self.open_tasks_bullet + self.tasks_bullet_space\n            elif 'header' in current_scope and line_contents and not header_to_task:\n                grps = not_empty_line.groups()\n                line_contents = self.view.substr(line) + '\\n' + grps[0] + self.before_tasks_bullet_spaces + self.open_tasks_bullet + self.tasks_bullet_space\n            elif 'separator' in current_scope:\n                grps = not_empty_line.groups()\n                line_contents = self.view.substr(line) + '\\n' + grps[0] + self.before_tasks_bullet_spaces + self.open_tasks_bullet + self.tasks_bullet_space\n            elif not ('header' and 'separator') in current_scope or header_to_task:\n                eol = None\n                if not_empty_line:\n                    grps = not_empty_line.groups()\n                    line_contents = (grps[0] if len(grps[0]) > 0 else self.before_tasks_bullet_spaces) + self.open_tasks_bullet + self.tasks_bullet_space + grps[1]\n                elif empty_line:  # only whitespaces\n                    grps = empty_line.groups()\n                    line_contents = grps[0] + self.open_tasks_bullet + self.tasks_bullet_space\n                else:  # completely empty, no whitespaces\n                    line_contents = self.before_tasks_bullet_spaces + self.open_tasks_bullet + self.tasks_bullet_space\n            else:\n                print('oops, need to improve PlainTasksNewCommand')\n            if eol:\n                # move cursor to eol of original line, workaround for ST3\n                sels.subtract(sels[~i])\n                sels.add(sublime.Region(eol, eol))\n            self.view.replace(edit, line, line_contents)\n\n        # convert each selection to single cursor, ready to type\n        new_selections = []\n        for sel in list(self.view.sel()):\n            eol = self.view.line(sel).b\n            new_selections.append(sublime.Region(eol, eol))\n        self.view.sel().clear()\n        for sel in new_selections:\n            self.view.sel().add(sel)\n\n        PlainTasksStatsStatus.set_stats(self.view)\n        self.view.run_command('plain_tasks_toggle_highlight_past_due')\n\n\nclass PlainTasksNewWithDateCommand(PlainTasksBase):\n    def runCommand(self, edit):\n        self.view.run_command('plain_tasks_new')\n        sels = list(self.view.sel())\n        suffix = ' @created%s' % tznow().strftime(self.date_format)\n        points = []\n        for s in reversed(sels):\n            if self.view.substr(sublime.Region(s.b - 2, s.b)) == '  ':\n                point = s.b - 2  # keep double whitespace at eol\n            else:\n                point = s.b\n            self.view.insert(edit, point, suffix)\n            points.append(point)\n        self.view.sel().clear()\n        offset = len(suffix)\n        for i, sel in enumerate(sels):\n            self.view.sel().add(sublime.Region(points[~i] + i*offset, points[~i] + i*offset))\n\n\nclass PlainTasksCompleteCommand(PlainTasksBase):\n    def runCommand(self, edit):\n        original = [r for r in self.view.sel()]\n        done_line_end, now = self.format_line_end(self.done_tag, tznow())\n        offset = len(done_line_end)\n        rom = r'^(\\s*)(\\[\\s\\]|.)(\\s*.*)$'\n        rdm = r'''\n            (?x)^(\\s*)(\\[x\\]|.)                           # 0,1 indent & bullet\n            (\\s*[^\\b]*?(?:[^\\@]|(?<!\\s)\\@|\\@(?=\\s))*?\\s*) #   2 very task\n            (?=\n              ((?:\\s@done|@project|@[wl]asted|$).*)   # 3 ending either w/ done or w/o it & no date\n              |                                       #   or\n              (?:[ \\t](\\([^()]*\\))\\s*([^@]*|(?:@project|@[wl]asted).*))?$ # 4 date & possible project tag after\n            )\n            '''  # rcm is the same, except bullet & ending\n        rcm = r'^(\\s*)(\\[\\-\\]|.)(\\s*[^\\b]*?(?:[^\\@]|(?<!\\s)\\@|\\@(?=\\s))*?\\s*)(?=((?:\\s@cancelled|@project|@[wl]asted|$).*)|(?:[ \\t](\\([^()]*\\))\\s*([^@]*|(?:@project|@[wl]asted).*))?$)'\n        started = r'^\\s*[^\\b]*?\\s*@started(\\([\\d\\w,\\.:\\-\\/ @]*\\)).*$'\n        toggle = r'@toggle(\\([\\d\\w,\\.:\\-\\/ @]*\\))'\n\n        regions = itertools.chain(*(reversed(self.view.lines(region)) for region in reversed(list(self.view.sel()))))\n        for line in regions:\n            line_contents = self.view.substr(line)\n            open_matches = re.match(rom, line_contents, re.U)\n            done_matches = re.match(rdm, line_contents, re.U)\n            canc_matches = re.match(rcm, line_contents, re.U)\n            started_matches = re.findall(started, line_contents, re.U)\n            toggle_matches = re.findall(toggle, line_contents, re.U)\n\n            done_line_end = done_line_end.rstrip()\n            if line_contents.endswith('  '):\n                done_line_end += '  '  # keep double whitespace at eol\n                dblspc = '  '\n            else:\n                dblspc = ''\n\n            current_scope = self.view.scope_name(line.a)\n            if 'pending' in current_scope:\n                grps = open_matches.groups()\n                len_dle = self.view.insert(edit, line.end(), done_line_end)\n                replacement = u'%s%s%s' % (grps[0], self.done_tasks_bullet, grps[2].rstrip())\n                self.view.replace(edit, line, replacement)\n                self.view.run_command(\n                    'plain_tasks_calculate_time_for_task', {\n                        'started_matches': started_matches,\n                        'toggle_matches': toggle_matches,\n                        'now': now,\n                        'eol': line.a + len(replacement) + len_dle}\n                )\n            elif 'header' in current_scope:\n                eol = self.view.insert(edit, line.end(), done_line_end)\n                self.view.run_command(\n                    'plain_tasks_calculate_time_for_task', {\n                        'started_matches': started_matches,\n                        'toggle_matches': toggle_matches,\n                        'now': now,\n                        'eol': line.end() + eol}\n                )\n                indent = re.match('^(\\s*)\\S', line_contents, re.U)\n                self.view.insert(edit, line.begin() + len(indent.group(1)), '%s ' % self.done_tasks_bullet)\n                self.view.run_command('plain_tasks_calculate_total_time_for_project', {'start': line.a})\n            elif 'completed' in current_scope:\n                grps = done_matches.groups()\n                parentheses = check_parentheses(self.date_format, grps[4] or '')\n                replacement = u'%s%s%s%s' % (grps[0], self.open_tasks_bullet, grps[2], parentheses)\n                self.view.replace(edit, line, replacement.rstrip() + dblspc)\n                offset = -offset\n            elif 'cancelled' in current_scope:\n                grps = canc_matches.groups()\n                len_dle = self.view.insert(edit, line.end(), done_line_end)\n                parentheses = check_parentheses(self.date_format, grps[4] or '')\n                replacement = u'%s%s%s%s' % (grps[0], self.done_tasks_bullet, grps[2], parentheses)\n                self.view.replace(edit, line, replacement.rstrip())\n                offset = -offset\n                self.view.run_command(\n                    'plain_tasks_calculate_time_for_task', {\n                        'started_matches': started_matches,\n                        'toggle_matches': toggle_matches,\n                        'now': now,\n                        'eol': line.a + len(replacement) + len_dle}\n                )\n        self.view.sel().clear()\n        for ind, pt in enumerate(original):\n            ofs = ind * offset\n            new_pt = sublime.Region(pt.a + ofs, pt.b + ofs)\n            self.view.sel().add(new_pt)\n\n        PlainTasksStatsStatus.set_stats(self.view)\n        self.view.run_command('plain_tasks_toggle_highlight_past_due')\n\n\nclass PlainTasksInjectDueDateCommand(PlainTasksBase):\n    def is_visible(self):\n        return self.view.score_selector(0, \"text.todo\") > 0\n\n    def runCommand(self, edit):\n        due_re = r'^\\s*[^\\b]*?\\s*@due\\([\\d\\w,\\.:\\-\\/ @]*\\).*$'\n        regions = itertools.chain(*(reversed(self.view.lines(region)) for region in reversed(list(self.view.sel()))))\n        point = -1\n        for line in regions:\n            line_contents = self.view.substr(line)\n            current_scope = self.view.scope_name(line.begin())\n            due_matches = re.match(due_re, line_contents, re.U)\n            if ('item' in current_scope or 'header' in current_scope) and not due_matches:\n                self.view.insert(edit, line.end(), ' @due()')\n                point = line.end() + 6\n        if point != -1:\n            self.view.sel().clear()\n            self.view.sel().add(point)\n\n\nclass PlainTasksSortByDueDateAndPriorityCommand(PlainTasksBase):\n    class Task:\n        pass\n\n    def is_visible(self):\n        return self.view.score_selector(0, \"text.todo\") > 0\n\n    def runCommand(self, edit, descending=False):\n        due_re = r'^\\s*[^\\b]*?\\s*@due\\(([\\d\\w,\\.:\\-\\/ @]*)\\).*$'\n        critical_re = r'^\\s*[^\\b]*?\\s*@critical\\b.*$'\n        high_re = r'^\\s*[^\\b]*?\\s*high\\b.*$'\n        low_re = r'^\\s*[^\\b]*?\\s*@low\\b.*$'\n        regions = itertools.chain(*(reversed(self.view.lines(region)) for region in reversed(list(self.view.sel()))))\n\n        for project in regions:\n            project_scope = self.view.scope_name(project.begin())\n            if not 'header' in project_scope:\n                continue\n            project_block = self.view.indented_region(project.end() + 1)\n            if project_block.empty():\n                continue\n            tasks = []\n            task = None\n            pos = project_block.begin()\n            first_task_pos = None\n            first_task_indentation = None\n\n            while pos < project_block.end():\n                line = self.view.line(pos)\n                line_contents = self.view.substr(line)\n                scope = self.view.scope_name(pos)\n                indentation = self.view.indentation_level(pos)\n\n                if scope == 'text.todo notes.todo ' and task is None:\n                    pass\n                elif ('item' in scope or 'header' in scope) and (task is None or first_task_indentation == indentation):\n                    task = self.Task()\n                    task.region = line\n                    if first_task_pos is None:\n                        first_task_pos = pos\n                        first_task_indentation = indentation\n\n                    task.due = '99-01-01 00:00'\n                    due_match = re.match(due_re, line_contents, re.U)\n                    if due_match is not None:\n                        task.due = due_match.groups()[0]\n\n                    task.priority = '3normal'\n                    critical_match = re.match(critical_re, line_contents, re.U)\n                    high_match = re.match(high_re, line_contents, re.U)\n                    low_match = re.match(low_re, line_contents, re.U)\n                    if critical_match is not None:\n                        task.priority = '1critical'\n                    elif high_match is not None:\n                        task.priority = '2high'\n                    elif low_match is not None:\n                        task.priority = '4low'\n\n                    tasks.append(task)\n                elif task is not None:\n                    task.region = sublime.Region(task.region.begin(), line.end())\n                pos = line.end() + 1\n            tasks.sort(key=lambda t: (t.due, t.priority), reverse=descending)\n            project_block = sublime.Region(first_task_pos, project_block.end())\n            new_content = '\\n'.join([self.view.substr(t.region).rstrip() for t in tasks]) + '\\n'\n            self.view.replace(edit, project_block, new_content)\n\n        PlainTasksStatsStatus.set_stats(self.view)\n        self.view.run_command('plain_tasks_toggle_highlight_past_due')\n\n\nclass PlainTasksCancelCommand(PlainTasksBase):\n    def runCommand(self, edit):\n        original = [r for r in self.view.sel()]\n        canc_line_end, now = self.format_line_end(self.canc_tag, tznow())\n        offset = len(canc_line_end)\n        rom = r'^(\\s*)(\\[\\s\\]|.)(\\s*.*)$'\n        rdm = r'^(\\s*)(\\[x\\]|.)(\\s*[^\\b]*?(?:[^\\@]|(?<!\\s)\\@|\\@(?=\\s))*?\\s*)(?=((?:\\s@done|@project|@[wl]asted|$).*)|(?:[ \\t](\\([^()]*\\))\\s*([^@]*|(?:@project|@[wl]asted).*))?$)'\n        rcm = r'^(\\s*)(\\[\\-\\]|.)(\\s*[^\\b]*?(?:[^\\@]|(?<!\\s)\\@|\\@(?=\\s))*?\\s*)(?=((?:\\s@cancelled|@project|@[wl]asted|$).*)|(?:[ \\t](\\([^()]*\\))\\s*([^@]*|(?:@project|@[wl]asted).*))?$)'\n        started = r'^\\s*[^\\b]*?\\s*@started(\\([\\d\\w,\\.:\\-\\/ @]*\\)).*$'\n        toggle = r'@toggle(\\([\\d\\w,\\.:\\-\\/ @]*\\))'\n        regions = itertools.chain(*(reversed(self.view.lines(region)) for region in reversed(list(self.view.sel()))))\n        for line in regions:\n            line_contents = self.view.substr(line)\n            open_matches = re.match(rom, line_contents, re.U)\n            done_matches = re.match(rdm, line_contents, re.U)\n            canc_matches = re.match(rcm, line_contents, re.U)\n            started_matches = re.findall(started, line_contents, re.U)\n            toggle_matches = re.findall(toggle, line_contents, re.U)\n\n            canc_line_end = canc_line_end.rstrip()\n            if line_contents.endswith('  '):\n                canc_line_end += '  '  # keep double whitespace at eol\n                dblspc = '  '\n            else:\n                dblspc = ''\n\n            current_scope = self.view.scope_name(line.a)\n            if 'pending' in current_scope:\n                grps = open_matches.groups()\n                len_cle = self.view.insert(edit, line.end(), canc_line_end)\n                replacement = u'%s%s%s' % (grps[0], self.canc_tasks_bullet, grps[2].rstrip())\n                self.view.replace(edit, line, replacement)\n                self.view.run_command(\n                    'plain_tasks_calculate_time_for_task', {\n                        'started_matches': started_matches,\n                        'toggle_matches': toggle_matches,\n                        'now': now,\n                        'eol': line.a + len(replacement) + len_cle,\n                        'tag': 'wasted'}\n                )\n            elif 'header' in current_scope:\n                eol = self.view.insert(edit, line.end(), canc_line_end)\n                self.view.run_command(\n                    'plain_tasks_calculate_time_for_task', {\n                        'started_matches': started_matches,\n                        'toggle_matches': toggle_matches,\n                        'now': now,\n                        'eol': line.end() + eol,\n                        'tag': 'wasted'}\n                )\n                indent = re.match('^(\\s*)\\S', line_contents, re.U)\n                self.view.insert(edit, line.begin() + len(indent.group(1)), '%s ' % self.canc_tasks_bullet)\n                self.view.run_command('plain_tasks_calculate_total_time_for_project', {'start': line.a})\n            elif 'completed' in current_scope:\n                sublime.status_message('You cannot cancel what have been done, can you?')\n                # grps = done_matches.groups()\n                # parentheses = check_parentheses(self.date_format, grps[4] or '')\n                # replacement = u'%s%s%s%s' % (grps[0], self.canc_tasks_bullet, grps[2], parentheses)\n                # self.view.replace(edit, line, replacement.rstrip())\n                # offset = -offset\n            elif 'cancelled' in current_scope:\n                grps = canc_matches.groups()\n                parentheses = check_parentheses(self.date_format, grps[4] or '')\n                replacement = u'%s%s%s%s' % (grps[0], self.open_tasks_bullet, grps[2], parentheses)\n                self.view.replace(edit, line, replacement.rstrip() + dblspc)\n                offset = -offset\n        self.view.sel().clear()\n        for ind, pt in enumerate(original):\n            ofs = ind * offset\n            new_pt = sublime.Region(pt.a + ofs, pt.b + ofs)\n            self.view.sel().add(new_pt)\n\n        PlainTasksStatsStatus.set_stats(self.view)\n        self.view.run_command('plain_tasks_toggle_highlight_past_due')\n\n\nclass PlainTasksArchiveCommand(PlainTasksBase):\n    def runCommand(self, edit, partial=False):\n        rds = 'meta.item.todo.completed'\n        rcs = 'meta.item.todo.cancelled'\n\n        # finding archive section\n        archive_pos = self.view.find(self.archive_name, 0, sublime.LITERAL)\n\n        if partial:\n            all_tasks = self.get_archivable_tasks_within_selections()\n        else:\n            all_tasks = self.get_all_archivable_tasks(archive_pos, rds, rcs)\n\n        if not all_tasks:\n            sublime.status_message('Nothing to archive')\n        else:\n            if archive_pos and archive_pos.a > 0:\n                line = self.view.full_line(archive_pos).end()\n            else:\n                create_archive = u'\\n\\n＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\\n%s\\n' % self.archive_name\n                self.view.insert(edit, self.view.size(), create_archive)\n                line = self.view.size()\n\n            projects = get_all_projects_and_separators(self.view)\n\n            # adding tasks to archive section\n            for task in all_tasks:\n                line_content = self.view.substr(task)\n                match_task = re.match(r'^\\s*(\\[[x-]\\]|.)(\\s+.*$)', line_content, re.U)\n                current_scope = self.view.scope_name(task.a)\n                if rds in current_scope or rcs in current_scope:\n                    pr = self.get_task_project(task, projects)\n                    if self.project_postfix:\n                        eol = u'{0}{1}{2}{3}\\n'.format(\n                            self.before_tasks_bullet_spaces,\n                            line_content.strip(),\n                            (u' @project(%s)' % pr) if pr else '',\n                            '  ' if line_content.endswith('  ') else '')\n                    else:\n                        eol = u'{0}{1}{2}{3}\\n'.format(\n                            self.before_tasks_bullet_spaces,\n                            match_task.group(1),  # bullet\n                            (u'%s%s:' % (self.tasks_bullet_space, pr)) if pr else '',\n                            match_task.group(2))  # very task\n                else:\n                    eol = u'{0}{1}\\n'.format(self.before_tasks_bullet_spaces * 2, line_content.lstrip())\n                line += self.view.insert(edit, line, eol)\n\n            # remove moved tasks (starting from the last one otherwise it screw up regions after the first delete)\n            for task in reversed(all_tasks):\n                self.view.erase(edit, self.view.full_line(task))\n            self.view.run_command('plain_tasks_sort_by_date')\n\n    def get_task_project(self, task, projects):\n        index = -1\n        for ind, pr in enumerate(projects):\n            if task < pr:\n                if ind > 0:\n                    index = ind-1\n                break\n        #if there is no projects for task - return empty string\n        if index == -1:\n            return ''\n\n        prog = re.compile(r'^\\n*(\\s*)(.+):(?=\\s|$)\\s*(\\@[^\\s]+(\\(.*?\\))?\\s*)*')\n        hierarhProject = ''\n\n        if index >= 0:\n            depth = re.match(r\"\\s*\", self.view.substr(self.view.line(task))).group()\n            while index >= 0:\n                strProject = self.view.substr(projects[index])\n                if prog.match(strProject):\n                    spaces = prog.match(strProject).group(1)\n                    if len(spaces) < len(depth):\n                        hierarhProject = prog.match(strProject).group(2) + ((\" / \" + hierarhProject) if hierarhProject else '')\n                        depth = spaces\n                        if len(depth) == 0:\n                            break\n                else:\n                    sep = re.compile(r'(^\\s*)---.{3,5}---+$')\n                    spaces = sep.match(strProject).group(1)\n                    if len(spaces) < len(depth):\n                        depth = spaces\n                        if len(depth) == 0:\n                            break\n                index -= 1\n        if not hierarhProject:\n            return ''\n        else:\n            return hierarhProject\n\n    def get_task_note(self, task, tasks):\n        note_line = task.end() + 1\n        while self.view.scope_name(note_line) == 'text.todo notes.todo ':\n            note = self.view.line(note_line)\n            if note not in tasks:\n                tasks.append(note)\n            note_line = self.view.line(note_line).end() + 1\n\n    def get_all_archivable_tasks(self, archive_pos, rds, rcs):\n        done_tasks = [i for i in self.view.find_by_selector(rds) if i.a < (archive_pos.a if archive_pos and archive_pos.a > 0 else self.view.size())]\n        for i in done_tasks:\n            self.get_task_note(i, done_tasks)\n\n        canc_tasks = [i for i in self.view.find_by_selector(rcs) if i.a < (archive_pos.a if archive_pos and archive_pos.a > 0 else self.view.size())]\n        for i in canc_tasks:\n            self.get_task_note(i, canc_tasks)\n\n        all_tasks = done_tasks + canc_tasks\n        all_tasks.sort()\n        return all_tasks\n\n    def get_archivable_tasks_within_selections(self):\n        all_tasks = []\n        for region in self.view.sel():\n            for l in self.view.lines(region):\n                line = self.view.line(l)\n                if ('completed' in self.view.scope_name(line.a)) or ('cancelled' in self.view.scope_name(line.a)):\n                    all_tasks.append(line)\n                    self.get_task_note(line, all_tasks)\n        return all_tasks\n\n\nclass PlainTasksNewTaskDocCommand(sublime_plugin.WindowCommand):\n    def run(self):\n        view = self.window.new_file()\n        view.settings().add_on_change('color_scheme', lambda: self.set_proper_scheme(view))\n        view.set_syntax_file('Packages/PlainTasks/PlainTasks.sublime-syntax' if ST3 else\n                             'Packages/PlainTasks/PlainTasks.tmLanguage')\n\n    def set_proper_scheme(self, view):\n        if view.id() != sublime.active_window().active_view().id():\n            return\n        pts = sublime.load_settings('PlainTasks.sublime-settings')\n        if view.settings().get('color_scheme') == pts.get('color_scheme'):\n            return\n        # Since we cannot create file with syntax, there is moment when view has no settings,\n        # but it is activated, so some plugins (e.g. Color Highlighter) set wrong color scheme\n        view.settings().set('color_scheme', pts.get('color_scheme'))\n\n\nclass PlainTasksOpenUrlCommand(sublime_plugin.TextCommand):\n    #It is horrible regex but it works perfectly\n    URL_REGEX = r\"\"\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))\n        +(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\".,<>?«»“”‘’]))\"\"\"\n\n    def run(self, edit):\n        s = self.view.sel()[0]\n        start, end = s.a, s.b\n        if 'url' in self.view.scope_name(start):\n            while self.view.substr(start) != '<': start -= 1\n            while self.view.substr(end)   != '>': end += 1\n            rgn = sublime.Region(start + 1, end)\n            # optional select URL\n            self.view.sel().add(rgn)\n            url = self.view.substr(rgn)\n            if NT and all([ST3, ':' in url]):\n                # webbrowser uses os.startfile() under the hood, and it is not reliable in py3;\n                # thus call start command for url with scheme (eg skype:nick) and full path (eg c:\\b)\n                subprocess.Popen(['start', url], shell=True)\n            else:\n                webbrowser.open_new_tab(url)\n        else:\n            self.search_bare_weblink_and_open(start, end)\n\n    def search_bare_weblink_and_open(self, start, end):\n        # expand selection to nearest stopSymbols\n        view_size = self.view.size()\n        stopSymbols = ['\\t', ' ', '\\\"', '\\'', '>', '<', ',']\n        # move the selection back to the start of the url\n        while (start > 0\n                and not self.view.substr(start - 1) in stopSymbols\n                and self.view.classify(start) & sublime.CLASS_LINE_START == 0):\n            start -= 1\n\n        # move end of selection forward to the end of the url\n        while (end < view_size\n                and not self.view.substr(end) in stopSymbols\n                and self.view.classify(end) & sublime.CLASS_LINE_END == 0):\n            end += 1\n\n        # grab the URL\n        url = self.view.substr(sublime.Region(start, end))\n        # optional select URL\n        self.view.sel().add(sublime.Region(start, end))\n\n        exp = re.search(self.URL_REGEX, url, re.X)\n        if exp and exp.group(0):\n            strUrl = exp.group(0)\n            if strUrl.find(\"://\") == -1:\n                strUrl = \"http://\" + strUrl\n            webbrowser.open_new_tab(strUrl)\n        else:\n            sublime.status_message(\"Looks like there is nothing to open\")\n\n\nclass PlainTasksOpenLinkCommand(sublime_plugin.TextCommand):\n    LINK_PATTERN = re.compile(  # simple ./path/\n        r'''(?ixu)(?:^|[ \\t])\\.[\\\\/]\n            (?P<fn>\n            (?:[a-z]\\:[\\\\/])?      # special case for Windows full path\n            (?:[^\\\\/:\">]+[\\\\/]?)+) # the very path (single filename/relative/full)\n            (?=[\\\\/:\">])           # stop matching path\n                                   # options:\n            (>(?P<sym>\\w+))?(\\:(?P<line>\\d+))?(\\:(?P<col>\\d+))?(\\\"(?P<text>[^\\n]*)\\\")?\n        ''')\n    MD_LINK = re.compile(  # markdown [](path)\n        r'''(?ixu)\\][ \\t]*\\(\\<?(?:file\\:///?)?\n            (?P<fn>.*?((\\\\\\))?.*?)*)\n              (?:\\>?[ \\t]*\n              \\\"((\\:(?P<line>\\d+))?(\\:(?P<col>\\d+))?|(\\>(?P<sym>\\w+))?|(?P<text>[^\\n]*))\n              \\\")?\n            \\)\n        ''')\n    WIKI_LINK = re.compile(  # ORGMODE, NV, and all similar formats [[link][opt-desc]]\n        r'''(?ixu)\\[\\[(?:file(?:\\+(?:sys|emacs))?\\:)?(?:\\.[\\\\/])?\n            (?P<fn>.*?((\\\\\\])?.*?)*)\n              (?# options for orgmode link [[path::option]])\n              (?:\\:\\:(((?P<line>\\d+))?(\\:(?P<col>\\d+))?|(\\*(?P<sym>\\w+))?|(?P<text>.*?((\\\\\\])?.*?)*)))?\n            \\](?:\\[(.*?)\\])?\n            \\]\n              (?# options for NV [[path]] \"option\" — NV not support it, but PT should support so it wont break NV)\n              (?:[ \\t]*\n              \\\"((\\:(?P<linen>\\d+))?(\\:(?P<coln>\\d+))?|(\\>(?P<symn>\\w+))?|(?P<textn>[^\\n]*))\n              \\\")?\n        ''')\n\n    def _format_res(self, res):\n        if res[3] == 'f':\n            return [res[0], \"line: %d column: %d\" % (int(res[1]), int(res[2]))]\n        elif res[3] == 'd':\n            return [res[0], 'Add folder to project' if ST3 else 'Folders are supported only in Sublime 3']\n        else:\n            return [res[0], res[1]]\n\n    def _on_panel_selection(self, selection, text=None, line=0):\n        if selection < 0:\n            self.panel_hidden = True\n            return\n\n        self.stop_thread = True\n        self.thread.join()\n        win = sublime.active_window()\n        win.run_command('hide_overlay')\n        res = self._current_res[selection]\n        if not res[3]:\n            return  # user chose to stop search\n        if not ST3 and res[3] == \"d\":\n            return sublime.status_message('Folders are supported only in Sublime 3')\n        elif res[3] == \"d\":\n            data = win.project_data()\n            if not data:\n                data = {}\n            if \"folders\" not in data:\n                data[\"folders\"] = []\n            data[\"folders\"].append({'follow_symlinks': True,\n                                    'path': res[0]})\n            win.set_project_data(data)\n        else:\n            self.opened_file = win.open_file('%s:%s:%s' % res[:3],\n                                             sublime.ENCODED_POSITION)\n            if text:\n                sublime.set_timeout(lambda: self.find_text(self.opened_file, text, line), 300)\n\n    def search_files(self, all_folders, fn, sym, line, col, text):\n        '''run in separate thread; worker'''\n        fn = fn.replace('/', os.sep)\n        if os.path.isfile(fn):  # check for full path\n            self._current_res.append((fn, line, col, \"f\"))\n        elif os.path.isdir(fn):\n            self._current_res.append((fn, 0, 0, \"d\"))\n\n        seen_folders = []\n        for folder in sorted(set(all_folders)):\n            for root, subdirs, _ in os.walk(folder):\n                if self.stop_thread:\n                    return\n\n                if root in seen_folders:\n                    continue\n                else:\n                    seen_folders.append(root)\n                subdirs = [f for f in subdirs if os.path.join(root, f) not in seen_folders]\n\n                tname = '%s at %s' % (fn, root)\n                self.thread.name = tname if ST3 else tname.encode('utf8')\n\n                name = os.path.normpath(os.path.abspath(os.path.join(root, fn)))\n                if os.path.isfile(name):\n                    item = (name, line, col, \"f\")\n                    if item not in self._current_res:\n                        self._current_res.append(item)\n                if os.path.isdir(name):\n                    item = (name, 0, 0, \"d\")\n                    if item not in self._current_res:\n                        self._current_res.append(item)\n\n        self._current_res = self._current_res[1:]  # remove 'Stop search' item\n        if not self._current_res:\n            return sublime.error_message('File was not found\\n\\n\\t%s' % fn)\n        if len(self._current_res) == 1:\n            sublime.set_timeout(lambda: self._on_panel_selection(0, text=text, line=line), 1)\n        else:\n            entries = [self._format_res(res) for res in self._current_res]\n            sublime.set_timeout(lambda: self.window.show_quick_panel(entries, lambda i: self._on_panel_selection(i, text=text, line=line)), 1)\n\n    def run(self, edit):\n        if hasattr(self, 'thread'):\n            if self.thread.is_alive:\n                self.stop_thread = True\n                self.thread.join()\n        point = self.view.sel()[0].begin()\n        line = self.view.substr(self.view.line(point))\n        fn, sym, line, col, text = self.parse_link(line)\n        if not fn:\n            sublime.status_message('Line does not contain a valid link to file')\n            return\n\n        self.window = win = sublime.active_window()\n        self._current_res = [('Stop search', '', '', '')]\n        # init values to update quick panel\n        self.items = 0\n        self.panel_hidden = True\n\n        if sym:\n            for name, _, pos in win.lookup_symbol_in_index(sym):\n                if name.endswith(fn):\n                    line, col = pos\n                    self._current_res.append((name, line, col, \"f\"))\n\n        all_folders = win.folders() + [os.path.dirname(v.file_name()) for v in win.views() if v.file_name()]\n        self.stop_thread = False\n        self.thread = threading.Thread(target=self.search_files, args=(all_folders, fn, sym, line, col, text))\n        self.thread.setName('is starting')\n        self.thread.start()\n        self.progress_bar()\n\n    def find_text(self, view, text, line):\n        result = view.find(text, view.sel()[0].a if line else 0, sublime.LITERAL)\n        view.sel().clear()\n        view.sel().add(result.a)\n        view.set_viewport_position(view.text_to_layout(view.size()), False)\n        view.show_at_center(result)\n\n    def progress_bar(self, i=0, dir=1):\n        if not self.thread.is_alive():\n            PlainTasksStatsStatus.set_stats(self.view)\n            return\n\n        if self._current_res and sublime.active_window().active_view().id() == self.view.id():\n            items = len(self._current_res)\n            if items != self.items:\n                self.window.run_command('hide_overlay')\n                self.items = items\n            if self.panel_hidden:\n                entries = [self._format_res(res) for res in self._current_res]\n                self.window.show_quick_panel(entries, self._on_panel_selection)\n                self.panel_hidden = False\n\n        # This animates a little activity indicator in the status area\n        before = i % 8\n        after = (7) - before\n        if not after:  dir = -1\n        if not before: dir = 1\n        i += dir\n        self.view.set_status('PlainTasks', u'Please wait%s…%ssearching %s' %\n                             (' ' * before, ' ' * after, self.thread.name if ST3 else self.thread.name.decode('utf8')))\n        sublime.set_timeout(lambda: self.progress_bar(i, dir), 100)\n        return\n\n    def parse_link(self, line):\n        match_link = self.LINK_PATTERN.search(line)\n        match_md   = self.MD_LINK.search(line)\n        match_wiki = self.WIKI_LINK.search(line)\n        if match_link:\n            fn, sym, line, col, text = match_link.group('fn', 'sym', 'line', 'col', 'text')\n        elif match_md:\n            fn, sym, line, col, text = match_md.group('fn', 'sym', 'line', 'col', 'text')\n            # unescape some chars\n            fn = (fn.replace('\\\\(', '(').replace('\\\\)', ')'))\n        elif match_wiki:\n            fn   = match_wiki.group('fn')\n            sym  = match_wiki.group('sym') or match_wiki.group('symn')\n            line = match_wiki.group('line') or match_wiki.group('linen')\n            col  = match_wiki.group('col') or match_wiki.group('coln')\n            text = match_wiki.group('text') or match_wiki.group('textn')\n            # unescape some chars\n            fn   = (fn.replace('\\\\[', '[').replace('\\\\]', ']'))\n            if text:\n                text = (text.replace('\\\\[', '[').replace('\\\\]', ']'))\n        return fn, sym, line or 0, col or 0, text\n\n\nclass PlainTasksSortByDate(PlainTasksBase):\n    def runCommand(self, edit):\n        if not re.search(r'(?su)%[Yy][-./ ]*%m[-./ ]*%d\\s*%H.*%M', self.date_format):\n            # TODO: sort with dateutil so we wont depend on specific date_format\n            return\n        archive_pos = self.view.find(self.archive_name, 0, sublime.LITERAL)\n        if archive_pos:\n            have_date = r'(^\\s*[^\\n]*?\\s\\@(?:done|cancelled)\\s*(\\([\\d\\w,\\.:\\-\\/ ]*\\))[^\\n]*$)'\n            all_tasks_prefixed_date = []\n            all_tasks = self.view.find_all(have_date, 0, u\"\\\\2\\\\1\", all_tasks_prefixed_date)\n\n            tasks_prefixed_date = []\n            tasks = []\n            for ind, task in enumerate(all_tasks):\n                if task.a > archive_pos.b:\n                    tasks.append(task)\n                    tasks_prefixed_date.append(all_tasks_prefixed_date[ind])\n\n            notes = []\n            for ind, task in enumerate(tasks):\n                note_line = task.end() + 1\n                while self.view.scope_name(note_line) == 'text.todo notes.todo ':\n                    note = self.view.line(note_line)\n                    notes.append(note)\n                    tasks_prefixed_date[ind] += u'\\n' + self.view.substr(note)\n                    note_line = note.end() + 1\n\n            to_remove = tasks+notes\n            to_remove.sort()\n            for i in reversed(to_remove):\n                self.view.erase(edit, self.view.full_line(i))\n\n            tasks_prefixed_date.sort(reverse=self.view.settings().get('new_on_top', True))\n            eol = archive_pos.end()\n            for a in tasks_prefixed_date:\n                eol += self.view.insert(edit, eol, u'\\n' + re.sub(r'^\\([\\d\\w,\\.:\\-\\/ ]*\\)([^\\b]*$)', u'\\\\1', a))\n        else:\n            sublime.status_message(\"Nothing to sort\")\n\n\nclass PlainTasksRemoveBold(sublime_plugin.TextCommand):\n    def run(self, edit):\n        for s in reversed(list(self.view.sel())):\n            a, b = s.begin(), s.end()\n            for r in sublime.Region(b + 2, b), sublime.Region(a - 2, a):\n                self.view.erase(edit, r)\n\n\nclass PlainTasksStatsStatus(sublime_plugin.EventListener):\n    def on_activated(self, view):\n        if not view.score_selector(0, \"text.todo\") > 0:\n            return\n        self.set_stats(view)\n\n    def on_post_save(self, view):\n        self.on_activated(view)\n\n    @staticmethod\n    def set_stats(view):\n        view.set_status('PlainTasks', PlainTasksStatsStatus.get_stats(view))\n\n    @staticmethod\n    def get_stats(view):\n        msgf = view.settings().get('stats_format', '$n/$a done ($percent%) $progress Last task @done $last')\n\n        special_interest = re.findall(r'{{.*?}}', msgf)\n        for i in special_interest:\n            matches = view.find_all(i.strip('{}'))\n            pend, done, canc = [], [], []\n            for t in matches:\n                # one task may contain same tag/word several times—we count amount of tasks, not tags\n                t = view.line(t).a\n                scope = view.scope_name(t)\n                if 'pending' in scope and t not in pend:\n                    pend.append(t)\n                elif 'completed' in scope and t not in done:\n                    done.append(t)\n                elif 'cancelled' in scope and t not in canc:\n                    canc.append(t)\n            msgf = msgf.replace(i, '%d/%d/%d'%(len(pend), len(done), len(canc)))\n\n        ignore_archive = view.settings().get('stats_ignore_archive', False)\n        if ignore_archive:\n            archive_pos = view.find(view.settings().get('archive_name', 'Archive:'), 0, sublime.LITERAL)\n            pend = len([i for i in view.find_by_selector('meta.item.todo.pending') if i.a < (archive_pos.a if archive_pos and archive_pos.a > 0 else view.size())])\n            done = len([i for i in view.find_by_selector('meta.item.todo.completed') if i.a < (archive_pos.a if archive_pos and archive_pos.a > 0 else view.size())])\n            canc = len([i for i in view.find_by_selector('meta.item.todo.cancelled') if i.a < (archive_pos.a if archive_pos and archive_pos.a > 0 else view.size())])\n        else:\n            pend = len(view.find_by_selector('meta.item.todo.pending'))\n            done = len(view.find_by_selector('meta.item.todo.completed'))\n            canc = len(view.find_by_selector('meta.item.todo.cancelled'))\n        allt = pend + done + canc\n        percent  = ((done+canc)/float(allt))*100 if allt else 0\n        factor   = int(round(percent/10)) if percent<90 else int(percent/10)\n\n        barfull  = view.settings().get('bar_full', u'■')\n        barempty = view.settings().get('bar_empty', u'□')\n        progress = '%s%s' % (barfull*factor, barempty*(10-factor)) if factor else ''\n\n        tasks_dates = []\n        view.find_all('(^\\s*[^\\n]*?\\s\\@(?:done)\\s*(\\([\\d\\w,\\.:\\-\\/ ]*\\))[^\\n]*$)', 0, \"\\\\2\", tasks_dates)\n        date_format = view.settings().get('date_format', '(%y-%m-%d %H:%M)')\n        tasks_dates = [check_parentheses(date_format, t, is_date=True) for t in tasks_dates]\n        tasks_dates.sort(reverse=True)\n        last = tasks_dates[0] if tasks_dates else '(UNKNOWN)'\n\n        msg = (msgf.replace('$o', str(pend))\n                   .replace('$d', str(done))\n                   .replace('$c', str(canc))\n                   .replace('$n', str(done+canc))\n                   .replace('$a', str(allt))\n                   .replace('$percent', str(int(percent)))\n                   .replace('$progress', progress)\n                   .replace('$last', last)\n                )\n        return msg\n\n\nclass PlainTasksCopyStats(sublime_plugin.TextCommand):\n    def is_enabled(self):\n        return self.view.score_selector(0, \"text.todo\") > 0\n\n    def run(self, edit):\n        msg = self.view.get_status('PlainTasks')\n        replacements = self.view.settings().get('replace_stats_chars', [])\n        if replacements:\n            for o, r in replacements:\n                msg = msg.replace(o, r)\n\n        sublime.set_clipboard(msg)\n\n\nclass PlainTasksArchiveOrgCommand(PlainTasksBase):\n    def runCommand(self, edit):\n        # Archive the curent subtree to our archive file, not just completed tasks.\n        # For now, it's mapped to ctrl-shift-o or super-shift-o\n\n        # TODO: Mark any tasks found as complete, or maybe warn.\n\n        # Get our archive filename\n        archive_filename = self.__createArchiveFilename()\n\n        # Figure out our subtree\n        region = self.__findCurrentSubtree()\n        if region.empty():\n            # How can we get here?\n            sublime.error_message(\"Error:\\n\\nCould not find a tree to archive.\")\n            return\n\n        # Write our region or our archive file\n        success = self.__writeArchive(archive_filename, region)\n\n        # only erase our region if the write was successful\n        if success:\n            self.view.erase(edit,region)\n\n        return\n\n    def __writeArchive(self, filename, region):\n        # Write out the given region\n\n        sublime.status_message(u'Archiving tree to {0}'.format(filename))\n        try:\n            # Have to use io.open because windows doesn't like writing\n            # utf8 to regular filehandles\n            with io.open(filename, 'a', encoding='utf8') as fh:\n                data = self.view.substr(region)\n                # Is there a way to read this in?\n                fh.write(u\"--- ✄ -----------------------\\n\")\n                fh.write(u\"Archived {0}:\\n\".format(tznow().strftime(\n                    self.date_format)))\n                # And, finally, write our data\n                fh.write(u\"{0}\\n\".format(data))\n            return True\n\n        except Exception as e:\n            sublime.error_message(u\"Error:\\n\\nUnable to append to {0}\\n{1}\".format(\n                filename, str(e)))\n            return False\n\n    def __createArchiveFilename(self):\n        # Create our archive filename, from the mask in our settings.\n\n        # Split filename int dir, base, and extension, then apply our mask\n        path_base, extension = os.path.splitext(self.view.file_name())\n        dir  = os.path.dirname(path_base)\n        base = os.path.basename(path_base)\n        sep  = os.sep\n\n        # Now build our new filename\n        try:\n            # This could fail, if someone messed up the mask in the\n            # settings.  So, if it did fail, use our default.\n            archive_filename = self.archive_org_filemask.format(\n                dir=dir, base=base, ext=extension, sep=sep)\n        except:\n            # Use our default mask\n            archive_filename = self.archive_org_default_filemask.format(\n                    dir=dir, base=base, ext=extension, sep=sep)\n\n            # Display error, letting the user know\n            sublime.error_message(u\"Error:\\n\\nInvalid filemask:{0}\\nUsing default: {1}\".format(\n                self.archive_org_filemask, self.archive_org_default_filemask))\n\n        return archive_filename\n\n    def __findCurrentSubtree(self):\n        # Return the region that starts at the cursor, or starts at\n        # the beginning of the selection\n\n        line = self.view.line(self.view.sel()[0].begin())\n        # Start finding the region at the beginning of the next line\n        region = self.view.indented_region(line.b + 2)\n\n        if region.contains(line.b):\n            # there is no subtree\n            return sublime.Region(-1, -1)\n\n        if not region.empty():\n            region = sublime.Region(line.a, region.b)\n\n        return region\n\n\nclass PlainTasksFoldToTags(PlainTasksFold):\n    TAG = r'(?u)@\\w+'\n\n    def run(self, edit):\n        tag_sels = [s for s in list(self.view.sel()) if 'tag.todo' in self.view.scope_name(s.a)]\n        if not tag_sels:\n            sublime.status_message('Cursor(s) must be placed on tag(s)')\n            return\n\n        tags = self.extract_tags(tag_sels)\n        tasks = [self.view.line(f) for f in self.view.find_all(r'[ \\t](%s)' % '|'.join(tags)) if 'pending' in self.view.scope_name(f.a)]\n        if not tasks:\n            sublime.status_message('Pending tasks with given tags are not found')\n            print(tags, tag_sels)\n            return\n        self.exec_folding(self.add_projects_and_notes(tasks))\n\n    def extract_tags(self, tag_sels):\n        tags = []\n        for s in tag_sels:\n            start = end = s.a\n            limit = self.view.size()\n            while all(self.view.substr(start) != c for c in '@ \\n'):\n                start -= 1\n                if start == 0:\n                    break\n            while all(self.view.substr(end) != c for c in '( @\\n'):\n                end += 1\n                if end == limit:\n                    break\n            match = re.match(self.TAG, self.view.substr(sublime.Region(start, end)))\n            tag =  match.group(0) if match else False\n            if tag and tag not in tags:\n                tags.append(tag)\n        return tags\n\n\nclass PlainTasksAddGutterIconsForTags(sublime_plugin.EventListener):\n    def on_activated(self, view):\n        if not view.score_selector(0, \"text.todo\") > 0:\n            return\n        view.erase_regions('critical')\n        view.erase_regions('high')\n        view.erase_regions('low')\n        view.erase_regions('today')\n        icon_critical = view.settings().get('icon_critical', '')\n        icon_high = view.settings().get('icon_high', '')\n        icon_low = view.settings().get('icon_low', '')\n        icon_today = view.settings().get('icon_today', '')\n        if not any((icon_critical, icon_high, icon_low, icon_today)):\n            return\n\n        critical = 'string.other.tag.todo.critical'\n        high = 'string.other.tag.todo.high'\n        low = 'string.other.tag.todo.low'\n        today = 'string.other.tag.todo.today'\n        r_critical = view.find_by_selector(critical)\n        r_high = view.find_by_selector(high)\n        r_low = view.find_by_selector(low)\n        r_today = view.find_by_selector(today)\n\n        if not any((r_critical, r_high, r_low, r_today)):\n            return\n        view.add_regions('critical', r_critical, critical, icon_critical, sublime.HIDDEN)\n        view.add_regions('high', r_high, high, icon_high, sublime.HIDDEN)\n        view.add_regions('low', r_low, low, icon_low, sublime.HIDDEN)\n        view.add_regions('today', r_today, today, icon_today, sublime.HIDDEN)\n\n    def on_post_save(self, view):\n        self.on_activated(view)\n\n    def on_load(self, view):\n        self.on_activated(view)\n\n\nclass PlainTasksHover(sublime_plugin.ViewEventListener):\n    '''Show popup with actions when hover over bullet'''\n\n    msg = ('<style>'  # four curly braces because it will be modified with format method twice\n            'html {{{{background-color: color(var(--background) blenda(white 75%))}}}}'\n            'body {{{{margin: .1em .3em}}}}'\n            'p {{{{margin: .5em 0}}}}'\n            'a {{{{text-decoration: none}}}}'\n            'span.icon {{{{font-weight: bold; font-size: 1.3em}}}}'\n            '#icon-done {{{{color: var(--greenish)}}}}'\n            '#icon-cancel {{{{color: var(--redish)}}}}'\n            '#icon-archive {{{{color: var(--bluish)}}}}'\n            '#icon-outside {{{{color: var(--purplish)}}}}'\n            '#done {{{{color: var(--greenish)}}}}'\n            '#cancel {{{{color: var(--redish)}}}}'\n            '#archive {{{{color: var(--bluish)}}}}'\n            '#outside {{{{color: var(--purplish)}}}}'\n           '</style><body>'\n           '{actions}'\n           )\n\n    complete = '<a href=\"complete\\v{point}\"><span class=\"icon\" id=\"icon-done\">✔</span> <span id=\"done\">Toggle complete</span></a>'\n    cancel = '<a href=\"cancel\\v{point}\"><span class=\"icon\" id=\"icon-cancel\">✘</span> <span id=\"cancel\">Toggle cancel</span></a>'\n    archive = '<a href=\"archive\\v{point}\"><span class=\"icon\" id=\"icon-archive\">📚</span> <span id=\"archive\">Archive</span></a>'\n    archivetofile = '<a href=\"tofile\\v{point}\"><span class=\"icon\" id=\"icon-outside\">📤</span> <span id=\"outside\">Archive to file</span></a>'\n\n    actions = {\n        'text.todo meta.item.todo.pending': '<p>{complete}</p><p>{cancel}</p>'.format(complete=complete, cancel=cancel),\n        'text.todo meta.item.todo.completed': '<p>{archive}</p><p>{archivetofile}</p><p>{complete}</p>'.format(archive=archive, archivetofile=archivetofile, complete=complete),\n        'text.todo meta.item.todo.cancelled': '<p>{archive}</p><p>{archivetofile}</p><p>{complete}</p><p>{cancel}</p>'.format(archive=archive, archivetofile=archivetofile, complete=complete, cancel=cancel)\n    }\n\n    @classmethod\n    def is_applicable(cls, settings):\n        return settings.get('syntax') == 'Packages/PlainTasks/PlainTasks.sublime-syntax'\n\n    def on_hover(self, point, hover_zone):\n        self.view.hide_popup()\n        if hover_zone != sublime.HOVER_TEXT:\n            return\n\n        line = self.view.line(point)\n        line_scope_name = self.view.scope_name(line.a).strip()\n        if 'meta.item.todo' not in line_scope_name:\n            return\n\n        bullet = any(('bullet' in self.view.scope_name(p) for p in (point, point - 1)))\n        if not bullet:\n            return\n\n        width, height = self.view.viewport_extent()\n        self.view.show_popup(self.msg.format(actions=self.actions.get(line_scope_name)).format(point=point), 0, point or self.view.sel()[0].begin() or 1, width, height / 2, self.exec_action)\n\n    def exec_action(self, msg):\n        action, at = msg.split('\\v')\n\n        case = {\n            'complete': lambda: self.view.run_command('plain_tasks_complete'),\n            'cancel': lambda: self.view.run_command('plain_tasks_cancel'),\n            'archive': lambda: self.view.run_command(\"plain_tasks_archive\", {\"partial\": True}),\n            'tofile': lambda: self.view.run_command('plain_tasks_org_archive'),\n        }\n        self.view.sel().clear()\n        self.view.sel().add(sublime.Region(int(at)))\n        case[action]()\n        self.view.hide_popup()\n\n\nclass PlainTasksGotoTag(sublime_plugin.TextCommand):\n    def run(self, edit):\n        self.initial_viewport = self.view.viewport_position()\n        self.initial_sels = list(self.view.sel())\n\n        self.tags = sorted(\n            [r for r in self.view.find_by_selector('meta.tag.todo')\n             if not any(s in self.view.scope_name(r.a) for s in ('completed', 'cancelled'))\n             ] +\n            self.view.find_by_selector('string.other.tag.todo.critical') +\n            self.view.find_by_selector('string.other.tag.todo.high') +\n            self.view.find_by_selector('string.other.tag.todo.low') +\n            self.view.find_by_selector('string.other.tag.todo.today')\n            )\n        window = self.view.window() or sublime.active_window()\n        items = [[self.view.substr(t), u'{0}: {1}'.format(self.view.rowcol(t.a)[0], self.view.substr(self.view.line(t)).strip())] for t in self.tags]\n\n        if ST3:\n            from bisect import bisect_left\n            # find the closest tag after current position of viewport, to avoid scrolling\n            closest_index = bisect_left([r.a for r in self.tags], self.view.layout_to_text(self.initial_viewport))\n            llen = len(self.tags)\n            selected_index = closest_index if closest_index < llen else llen - 1\n            window.show_quick_panel(items, self.on_done, 0, selected_index, self.on_highlighted)\n        else:\n            window.show_quick_panel(items, self.on_done)\n\n    def on_done(self, index):\n        if index < 0:\n            self.view.sel().clear()\n            self.view.sel().add_all(self.initial_sels)\n            self.view.set_viewport_position(self.initial_viewport)\n            return\n\n        self.view.sel().clear()\n        self.view.sel().add(sublime.Region(self.tags[index].a))\n        self.view.show_at_center(self.tags[index])\n\n    def on_highlighted(self, index):\n        self.view.sel().clear()\n        self.view.sel().add(self.tags[index])\n        self.view.show(self.tags[index], True)\n"
        },
        {
          "name": "PlainTasks.sublime-completions",
          "type": "blob",
          "size": 0.4599609375,
          "content": "{\n \"scope\": \"text.todo\",\n \"completions\": [\n  { \"trigger\": \"l\\t@low\", \"contents\": \"@low\"},\n  { \"trigger\": \"h\\t@high\", \"contents\": \"@high\"},\n  { \"trigger\": \"c\\t@critical\", \"contents\": \"@critical\"},\n  { \"trigger\": \"t\\t@today\", \"contents\": \"@today\" },\n  { \"trigger\": \"s\\t@started\", \"contents\": \"@started\" },\n  { \"trigger\": \"tg\\t@toggle\", \"contents\": \"@toggle\"},\n  { \"trigger\": \"d\\t@due()\", \"contents\": \"@due( $0)\"},\n  { \"trigger\": \"cr\\t@created\", \"contents\": \"@created\"}\n ]\n}"
        },
        {
          "name": "PlainTasks.sublime-syntax",
          "type": "blob",
          "size": 3.4384765625,
          "content": "%YAML 1.2\n---\nname: Tasks\nfile_extensions:\n  - todo\n  - tasks\n  - todolist.txt\nscope: text.todo\ncontexts:\n  main:\n    - match: '^\\s*(\\#?\\s?\\w+.*?:\\s*?(\\@[^\\s]+(\\(.*?\\))?\\s*?)*$\\n?)'\n      scope: keyword.control.header.todo\n    - match: '^\\s*(?:(\\+|✓|✔|☑|√|\\[x\\])(\\s+(?:[^\\@\\n]|(?<!\\s)\\@|\\@(?=\\s))*)([^\\n]*))|^\\s*(?:(-)(\\s+(?:[^\\@]|(?<!\\s)\\@|\\@(?=\\s))*)(.*\\@done(?=\\s|\\(|$)[^\\n]*))'\n      scope: meta.item.todo.completed\n      captures:\n        1: punctuation.definition.bullet.completed.todo\n        2: comment.line.completed.todo\n        3: meta.tag.todo.completed\n        4: punctuation.definition.bullet.completed.todo\n        5: comment.line.completed.todo\n        6: meta.tag.todo.completed\n    - match: '^\\s*(?:(✘|❌|x|\\[-\\])(\\s+(?:[^\\@\\n]|(?<!\\s)\\@|\\@(?=\\s))*)(.*))|^\\s*(?:(-)(\\s+(?:[^\\@]|(?<!\\s)\\@|\\@(?=\\s))*)(.*\\@cancelled(?=\\s|\\(|$)[^\\n]*))'\n      scope: meta.item.todo.cancelled\n      captures:\n        1: punctuation.definition.bullet.cancelled.todo\n        2: text.cancelled.todo\n        3: meta.tag.todo.cancelled\n        4: punctuation.definition.bullet.cancelled.todo\n        5: text.cancelled.todo\n        6: meta.tag.todo.cancelled\n    - match: '^\\s*(?!-|\\+|✓|✔|√|❍|❑|■|□|☐|▪|▫|–|—|≡|→|›|\\[[\\sx-]\\]|＿|✘|❌|(x\\s+))(?=\\S)'\n      push:\n        - meta_scope: notes.todo\n        - match: $\\n?\n          pop: true\n        - include: italic\n        - include: bold\n        - include: url\n    - match: '^\\s*(-|❍|❑|■|□|☐|▪|▫|–|—|≡|→|›|\\[\\s\\])(?=(\\s+(?:[^\\@\\n]|(?<![ \\t])\\@)*)(?!([^\\n]*)?(\\@done|\\@cancelled)[\\s\\(]))'\n      captures:\n        1: punctuation.definition.bullet.pending.todo\n      push:\n        - meta_scope: meta.item.todo.pending\n        - match: $\n          captures:\n            1: punctuation.definition.bullet.pending.todo\n          pop: true\n        - include: italic\n        - include: bold\n        - include: url\n        - include: tag\n        - include: today\n        - include: low\n        - include: high\n        - include: critical\n    - match: ^＿+$\n      scope: meta.punctuation.archive.todo\n    - match: '^\\s*---.{3,5}---+$'\n      scope: meta.punctuation.separator.todo\n  bold:\n    - match: '(?<=\\s|^)(\\*\\*|__)(?=\\S)(?=(?!(?<=\\S)\\1)[^\\n]+(?<=\\S)\\1)(?=[^\\n]+(?<=\\S)(\\1)((?![\\w\\d\\n])|(?=\\s|$)))'\n      captures:\n        1: punctuation.definition.bold\n      push:\n        - meta_scope: todo.bold\n        - match: '(?<=\\S)(\\1)((?![\\w\\d\\n])|(?=\\s|$))'\n          captures:\n            1: punctuation.definition.bold\n          pop: true\n  critical:\n    - match: (?<=\\s)\\@critical|✭critical\n      scope: string.other.tag.todo.critical\n  high:\n    - match: (?<=\\s)\\@high|✭high\n      scope: string.other.tag.todo.high\n  italic:\n    - match: '(?<=\\s|^)(\\*|_)(?=\\S)(?=(\\1\\1|(?!(?<=\\S)\\1).)++(?<=\\S)\\1)(?=[^\\n]+(?<=\\S)(\\1)(?!\\1|[\\w\\d]))'\n      captures:\n        1: punctuation.definition.italic\n      push:\n        - meta_scope: todo.italic\n        - match: '(?<=\\S)(\\1)(?!\\1|[\\w\\d])'\n          captures:\n            1: punctuation.definition.italic\n          pop: true\n  low:\n    - match: (?<=\\s)\\@low|✭low\n      scope: string.other.tag.todo.low\n  tag:\n    - match: '(?<=\\s)\\@(?!(high|today|critical|low|completed|done)[\\s\\(])[\\w\\d\\.\\(\\)\\-!? :\\+]+[ \\t]*'\n      scope: meta.tag.todo\n  today:\n    - match: (?<=\\s)\\@today|✭ᴛᴏᴅᴀʏ\n      scope: string.other.tag.todo.today\n  url:\n    - match: '(?<!\\S)(<)\\w+?(?!\\s)(\\.|:)(?!\\s)[^\\n]+?(>)'\n      scope: todo.url\n      captures:\n        1: punctuation.definition.url\n"
        },
        {
          "name": "PlainTasks.tmLanguage",
          "type": "blob",
          "size": 6.7568359375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>fileTypes</key>\n\t<array>\n\t\t<string>todo</string>\n\t\t<string>tasks</string>\n\t\t<string>todolist.txt</string>\n\t</array>\n\t<key>keyEquivalent</key>\n\t<string>^~T</string>\n\t<key>name</key>\n\t<string>Tasks</string>\n\t<key>patterns</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>^\\s*(\\w+.*?:\\s*?(\\@[^\\s]+(\\(.*?\\))?\\s*?)*$\\n?)</string>\n\t\t\t<key>name</key>\n\t\t\t<string>keyword.control.header.todo</string>\n\t\t</dict>\n\n\t\t<dict>\n\t\t\t<key>captures</key>\n\t\t\t<dict>\n\t\t\t\t<key>1</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.bullet.completed.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>2</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>comment.line.completed.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>3</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>4</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.bullet.completed.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>5</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>comment.line.completed.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>6</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>match</key>\n\t\t\t<string>^\\s*(?:(\\+|✓|✔|☑|√|\\[x\\])(\\s+(?:[^\\@\\n]|(?&lt;!\\s)\\@|\\@(?=\\s))*)([^\\n]*))|^\\s*(?:(-)(\\s+(?:[^\\@]|(?&lt;!\\s)\\@|\\@(?=\\s))*)(.*\\@done(?=\\s|\\(|$)[^\\n]*))</string>\n\t\t\t<key>name</key>\n\t\t\t<string>meta.item.todo.completed</string>\n\t\t</dict>\n\n\t\t<dict>\n\t\t\t<key>captures</key>\n\t\t\t<dict>\n\t\t\t\t<key>1</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.bullet.cancelled.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>2</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>text.cancelled.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>3</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>4</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.bullet.cancelled.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>5</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>text.cancelled.todo</string>\n\t\t\t\t</dict>\n\t\t\t\t<key>6</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>match</key>\n\t\t\t<string>^\\s*(?:(✘|❌|x|\\[-\\])(\\s+(?:[^\\@\\n]|(?&lt;!\\s)\\@|\\@(?=\\s))*)(.*))|^\\s*(?:(-)(\\s+(?:[^\\@]|(?&lt;!\\s)\\@|\\@(?=\\s))*)(.*\\@cancelled(?=\\s|\\(|$)[^\\n]*))</string>\n\t\t\t<key>name</key>\n\t\t\t<string>meta.item.todo.cancelled</string>\n\t\t</dict>\n\n\t\t<dict>\n\t\t  <key>begin</key>\n\t\t  <string>^\\s*(?!-|\\+|✓|✔|√|❍|❑|■|□|☐|▪|▫|–|—|≡|→|›|\\[[\\sx-]\\]|＿|✘|❌|(x\\s+))(?=\\S)</string>\n\t\t  <key>end</key>\n\t\t  <string>$\\n?</string>\n\t\t  <key>name</key>\n\t\t  <string>notes.todo</string>\n\t\t  <key>patterns</key>\n\t\t\t<array>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#italic</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#bold</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#url</string>\n\t\t\t\t</dict>\n\t\t\t</array>\n\t\t</dict>\n\n\t\t<dict>\n\t\t\t<key>captures</key>\n\t\t\t<dict>\n\t\t\t\t<key>1</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.bullet.pending.todo</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>begin</key>\n\t\t\t<string>^\\s*(-|❍|❑|■|□|☐|▪|▫|–|—|≡|→|›|\\[\\s\\])(?=(\\s+(?:[^\\@\\n]|(?&lt;![ \\t])\\@)*)(?!([^\\n]*)?(\\@done|\\@cancelled)[\\s\\(]))</string>\n\t\t\t<key>end</key>\n\t\t\t<string>$</string>\n\t\t\t<key>name</key>\n\t\t\t<string>meta.item.todo.pending</string>\n\t\t\t<key>patterns</key>\n\t\t\t<array>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#italic</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#bold</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#url</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#tag</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#today</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#low</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#high</string>\n\t\t\t\t</dict>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>include</key>\n\t\t\t\t\t<string>#critical</string>\n\t\t\t\t</dict>\n\t\t\t</array>\n\t\t</dict>\n\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>^＿+$</string>\n\t\t\t<key>name</key>\n\t\t\t<string>meta.punctuation.archive.todo</string>\n\t\t</dict>\n\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>^\\s*---.{3,5}---+$</string>\n\t\t\t<key>name</key>\n\t\t\t<string>meta.punctuation.separator.todo</string>\n\t\t</dict>\n\n\t</array>\n\n\n\t<key>repository</key>\n\t<dict>\n\n\t\t<key>bold</key>\n\t\t<dict>\n\t\t\t<key>captures</key>\n\t\t\t<dict>\n\t\t\t\t<key>1</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>begin</key>\n\t\t\t<string>(?&lt;=\\s|^)(\\*\\*|__)(?=\\S)(?=(?!(?&lt;=\\S)\\1)[^\\n]+(?&lt;=\\S)\\1)(?=[^\\n]+(?&lt;=\\S)(\\1)((?![\\w\\d\\n])|(?=\\s|$)))</string>\n\t\t\t<key>end</key>\n\t\t\t<string>(?&lt;=\\S)(\\1)((?![\\w\\d\\n])|(?=\\s|$))</string>\n\t\t\t<key>name</key>\n\t\t\t<string>todo.bold</string>\n\t\t</dict>\n\n\t\t<key>italic</key>\n\t\t<dict>\n\t\t\t<key>captures</key>\n\t\t\t<dict>\n\t\t\t\t<key>1</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>begin</key>\n\t\t\t<string>(?&lt;=\\s|^)(\\*|_)(?=\\S)(?=(\\1\\1|(?!(?&lt;=\\S)\\1).)++(?&lt;=\\S)\\1)(?=[^\\n]+(?&lt;=\\S)(\\1)(?!\\1|[\\w\\d]))</string>\n\t\t\t<key>end</key>\n\t\t\t<string>(?&lt;=\\S)(\\1)(?!\\1|[\\w\\d])</string>\n\t\t\t<key>name</key>\n\t\t\t<string>todo.italic</string>\n\t\t</dict>\n\n\t\t<key>url</key>\n\t\t<dict>\n\t\t\t<key>captures</key>\n\t\t\t<dict>\n\t\t\t\t<key>1</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>name</key>\n\t\t\t\t\t<string>punctuation.definition.url</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<key>match</key>\n\t\t\t<string>(?&lt;!\\S)(&lt;)\\w+?(?!\\s)(\\.|:)(?!\\s)[^\\n]+?(&gt;)</string>\n\t\t\t<key>name</key>\n\t\t\t<string>todo.url</string>\n\t\t</dict>\n\n\t\t<key>tag</key>\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>(?&lt;=\\s)\\@(?!(high|today|critical|low|completed|done)[\\s\\(])[\\w\\d\\.\\(\\)\\-!? :\\+]+[ \\t]*</string>\n\t\t\t<key>name</key>\n\t\t\t<string>meta.tag.todo</string>\n\t\t</dict>\n\n\t\t<key>today</key>\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>(?&lt;=\\s)\\@today|✭ᴛᴏᴅᴀʏ</string>\n\t\t\t<key>name</key>\n\t\t\t<string>string.other.tag.todo.today</string>\n\t\t</dict>\n\n\t\t<key>low</key>\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>(?&lt;=\\s)\\@low|✭low</string>\n\t\t\t<key>name</key>\n\t\t\t<string>string.other.tag.todo.low</string>\n\t\t</dict>\n\n\t\t<key>high</key>\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>(?&lt;=\\s)\\@high|✭high</string>\n\t\t\t<key>name</key>\n\t\t\t<string>string.other.tag.todo.high</string>\n\t\t</dict>\n\n\t\t<key>critical</key>\n\t\t<dict>\n\t\t\t<key>match</key>\n\t\t\t<string>(?&lt;=\\s)\\@critical|✭critical</string>\n\t\t\t<key>name</key>\n\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t</dict>\n\n\t</dict>\n\t<key>scopeName</key>\n\t<string>text.todo</string>\n\t<key>uuid</key>\n\t<string>8fj2g29c-04ef-4330-9a6b-9b99aae1c418</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "PlainTasksDates.py",
          "type": "blob",
          "size": 30.212890625,
          "content": "# coding: utf-8\nimport sublime, sublime_plugin\nimport json\nimport re\nimport locale\nimport calendar\nimport itertools\nfrom datetime import datetime\nfrom datetime import timedelta\n\nNT = sublime.platform() == 'windows'\nST3 = int(sublime.version()) >= 3000\nif ST3:\n    from .APlainTasksCommon import PlainTasksBase, PlainTasksEnabled, PlainTasksFold\n    MARK_SOON = sublime.DRAW_NO_FILL\n    MARK_INVALID = sublime.DRAW_NO_FILL | sublime.DRAW_NO_OUTLINE | sublime.DRAW_SQUIGGLY_UNDERLINE\nelse:\n    from APlainTasksCommon import PlainTasksBase, PlainTasksEnabled, PlainTasksFold\n    MARK_SOON = MARK_INVALID = 0\n    sublime_plugin.ViewEventListener = object\n\n\ntry:  # unavailable dependencies shall not break basic functionality\n    from dateutil import parser as dateutil_parser\n    from dateutil.relativedelta import relativedelta\nexcept:\n    dateutil_parser = None\n\n\nif ST3:\n    locale.setlocale(locale.LC_ALL, '')\n\n\ndef is_yearfirst(date_format):\n    return date_format.strip('(  )').startswith(('%y', '%Y'))\n\n\ndef is_dayfirst(date_format):\n    return date_format.strip('(  )').startswith(('%d'))\n\n\ndef _convert_date(matchstr, now):\n    match_obj = re.search(r'''(?mxu)\n        (?:\\s*\n         (?P<yearORmonthORday>\\d*(?!:))\n         (?P<sep>[-\\.])?\n         (?P<monthORday>\\d*)\n         (?P=sep)?\n         (?P<day>\\d*)\n         (?! \\d*:)(?# e.g. '23:' == hour, but '1 23:' == day=1, hour=23)\n        )?\n        \\s*\n        (?:\n         (?P<hour>\\d*)\n         :\n         (?P<minute>\\d*)\n        )?''', matchstr)\n    year  = now.year\n    month = now.month\n    day   = int(match_obj.group('day') or 0)\n    # print(day)\n    if day:\n        year  = int(match_obj.group('yearORmonthORday'))\n        month = int(match_obj.group('monthORday'))\n    else:\n        day = int(match_obj.group('monthORday') or 0)\n        # print(day)\n        if day:\n            month = int(match_obj.group('yearORmonthORday'))\n            if month < now.month:\n                year += 1\n        else:\n            day = int(match_obj.group('yearORmonthORday') or 0)\n            # print(day)\n            if 0 < day <= now.day:\n                # expect next month\n                month += 1\n                if month == 13:\n                    year += 1\n                    month = 1\n            elif not day:  # @due(0) == today\n                day = now.day\n            # else would be day>now, i.e. future day in current month\n    hour   = match_obj.group('hour')   or now.hour\n    minute = match_obj.group('minute') or now.minute\n    hour, minute = int(hour), int(minute)\n    if year < 100:\n        year += 2000\n\n    # print(year, month, day, hour, minute)\n    return year, month, day, hour, minute\n\n\ndef convert_date(matchstr, now):\n    year = month = day = hour = minute = None\n    try:\n        year, month, day, hour, minute = _convert_date(matchstr, now)\n        date = datetime(year, month, day, hour, minute, 0)\n    except (ValueError, OverflowError) as e:\n        return None, (e, year, month, day, hour, minute)\n    else:\n        return date, None\n\n\ndef increase_date(view, region, text, now, date_format):\n    # relative from date of creation if any\n    if '++' in text:\n        line = view.line(region)\n        line_content = view.substr(line)\n        created = re.search(r'(?mxu)@created\\(([\\d\\w,\\.:\\-\\/ @]*)\\)', line_content)\n        if created:\n            created_date, error = parse_date(created.group(1),\n                                             date_format=date_format,\n                                             yearfirst=is_yearfirst(date_format),\n                                             dayfirst=is_dayfirst(date_format),\n                                             default=now)\n            if error:\n                ln = (view.rowcol(line.a)[0] + 1)\n                print(u'\\nPlainTasks:\\nError at line %d\\n\\t%s\\ncaused by text:\\n\\t\"%s\"\\n' % (ln, error, created.group(0)))\n                sublime.status_message(u'@created date is invalid at line %d, see console for details' % ln)\n            else:\n                now = created_date\n\n    match_obj = re.search(r'''(?mxu)\n        \\s*\\+\\+?\\s*\n        (?:\n         (?P<number>\\d*(?![:.]))\\s*\n         (?P<days>[Dd]?)\n         (?P<weeks>[Ww]?)\n         (?! \\d*[:.])\n        )?\n        \\s*\n        (?:\n         (?P<hour>\\d*)\n         [:.]\n         (?P<minute>\\d*)\n        )?''', text)\n    number = int(match_obj.group('number') or 0)\n    days   = match_obj.group('days')\n    weeks  = match_obj.group('weeks')\n    hour   = int(match_obj.group('hour') or 0)\n    minute = int(match_obj.group('minute') or 0)\n    if not (number or hour or minute) or (not number and (days or weeks)):\n        # set 1 if number is omitted, i.e.\n        #   @due(+) == @due(+1) == @due(+1d)\n        #   @due(+w) == @due(+1w)\n        number = 1\n    delta = error = None\n    amount = number * 7 if weeks else number\n    try:\n        delta = now + timedelta(days=(amount), hours=hour, minutes=minute)\n    except (ValueError, OverflowError) as e:\n        error = e, amount, hour, minute\n    return delta, error\n\n\ndef expand_short_date(view, start, end, now, date_format):\n    while view.substr(start) != '(':\n        start -= 1\n    while view.substr(end) != ')':\n        end += 1\n    region = sublime.Region(start + 1, end)\n    text = view.substr(region)\n    # print(text)\n\n    if '+' in text:\n        date, error = increase_date(view, region, text, now, date_format)\n    else:\n        date, error = parse_date(text,\n                                 date_format,\n                                 yearfirst=is_yearfirst(date_format),\n                                 dayfirst=is_dayfirst(date_format),\n                                 default=now)\n\n    return date, error, sublime.Region(start, end + 1)\n\n\ndef parse_date(date_string, date_format='(%y-%m-%d %H:%M)', yearfirst=True, dayfirst=False, default=None):\n    '''\n    Attempt to convert arbitrary string to datetime object\n    date_string\n        Unicode\n    date_format\n        Unicode\n    yearfirst\n        boolin\n    default\n        datetime object (now)\n    '''\n    try:\n        return datetime.strptime(date_string, date_format), None\n    except ValueError as e:\n        # print(e)\n        pass\n    bare_date_string = date_string.strip('( )')\n    items = len(bare_date_string.split('-' if '-' in bare_date_string else '.'))\n    try:\n        if items < 2 and len(bare_date_string) < 3:\n            # e.g. @due(1) is always first day of next month,\n            # but dateutil consider it 1st day of current month\n            raise Exception(\"Special case of short date: less than 2 numbers\")\n        if items < 3 and any(s in date_string for s in '-.'):\n            # e.g. @due(2-1) is always Fabruary 1st of next year,\n            # but dateutil consider it this year\n            raise Exception(\"Special case of short date: less than 3 numbers\")\n        date = dateutil_parser.parse(bare_date_string,\n                                     yearfirst=yearfirst,\n                                     dayfirst=dayfirst,\n                                     default=default)\n        if NT and all((date.year < 1900, '%y' in date_format)):\n            return None, ('format %y requires year >= 1900 on Windows', date.year, date.month, date.day, date.hour, date.minute)\n    except Exception as e:\n        # print(e)\n        date, error = convert_date(bare_date_string, default)\n    else:\n        error = None\n    return date, error\n\n\ndef format_delta(view, delta):\n    delta -= timedelta(microseconds=delta.microseconds)\n    if view.settings().get('decimal_minutes', False):\n        days = delta.days\n        delta = u'%s%s%s%s' % (days or '', ' day, ' if days == 1 else '', ' days, ' if days > 1 else '', '%.2f' % (delta.seconds / 3600.0) if delta.seconds else '')\n    else:\n        delta = str(delta)\n    if delta[~7:] == ' 0:00:00' or delta == '0:00:00':  # strip meaningless time\n        delta = delta[:~6]\n    elif delta[~2:] == ':00':  # strip meaningless seconds\n        delta = delta[:~2]\n    return delta.strip(' ,')\n\n\nclass PlainTasksToggleHighlightPastDue(PlainTasksEnabled):\n    def run(self, edit):\n        highlight_on = self.view.settings().get('highlight_past_due', True)\n        self.view.erase_regions('past_due')\n        self.view.erase_regions('due_soon')\n        self.view.erase_regions('misformatted')\n        if not highlight_on:\n            return\n\n        pattern = r'@due(\\([^@\\n]*\\))'\n        dates_strings = []\n        dates_regions = self.view.find_all(pattern, 0, '\\\\1', dates_strings)\n        if not dates_regions:\n            if ST3:\n                self.view.settings().set('plain_tasks_remain_time_phantoms', [])\n            return\n\n        past_due, due_soon, misformatted, phantoms = self.group_due_tags(dates_strings, dates_regions)\n\n        scope_past_due = self.view.settings().get('scope_past_due', 'string.other.tag.todo.critical')\n        scope_due_soon = self.view.settings().get('scope_due_soon', 'string.other.tag.todo.high')\n        scope_misformatted = self.view.settings().get('scope_misformatted', 'string.other.tag.todo.low')\n        icon_past_due = self.view.settings().get('icon_past_due', 'circle')\n        icon_due_soon = self.view.settings().get('icon_due_soon', 'dot')\n        icon_misformatted = self.view.settings().get('icon_misformatted', '')\n        self.view.add_regions('past_due', past_due, scope_past_due, icon_past_due)\n        self.view.add_regions('due_soon', due_soon, scope_due_soon, icon_due_soon, MARK_SOON)\n        self.view.add_regions('misformatted', misformatted, scope_misformatted, icon_misformatted, MARK_INVALID)\n\n        if not ST3:\n            return\n        if self.view.settings().get('show_remain_due', False):\n            self.view.settings().set('plain_tasks_remain_time_phantoms', phantoms)\n        else:\n            self.view.settings().set('plain_tasks_remain_time_phantoms', [])\n\n    def group_due_tags(self, dates_strings, dates_regions):\n        past_due, due_soon, misformatted, phantoms = [], [], [], []\n        date_format = self.view.settings().get('date_format', '(%y-%m-%d %H:%M)')\n        yearfirst = is_yearfirst(date_format)\n        now = datetime.now()\n        default = now - timedelta(seconds=now.second, microseconds=now.microsecond)  # for short dates w/o time\n        due_soon_threshold = self.view.settings().get('highlight_due_soon', 24) * 60 * 60\n\n        for i, region in enumerate(dates_regions):\n            if any(s in self.view.scope_name(region.a) for s in ('completed', 'cancelled')):\n                continue\n            text = dates_strings[i]\n            if '+' in text:\n                date, error = increase_date(self.view, region, text, default, date_format)\n                # print(date, date_format)\n            else:\n                date, error = parse_date(text,\n                                         date_format=date_format,\n                                         yearfirst=yearfirst,\n                                         dayfirst=is_dayfirst(date_format),\n                                         default=default)\n                # print(date, date_format, yearfirst)\n            if error:\n                # print(error)\n                misformatted.append(region)\n            else:\n                if now >= date:\n                    past_due.append(region)\n                    phantoms.append((region.a, '-' + format_delta(self.view, default - date)))\n                else:\n                    phantoms.append((region.a, format_delta(self.view, date - default)))\n                    if due_soon_threshold:\n                        td = (date - now)\n                        # timedelta.total_seconds() is not available in 2.6.x\n                        time_left = (td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10.0**6\n                        if time_left < due_soon_threshold:\n                            due_soon.append(region)\n        return past_due, due_soon, misformatted, phantoms\n\n\nclass PlainTasksHLDue(sublime_plugin.EventListener):\n    def on_activated(self, view):\n        if not view.score_selector(0, \"text.todo\") > 0:\n            return\n        view.run_command('plain_tasks_toggle_highlight_past_due')\n\n    def on_post_save(self, view):\n        self.on_activated(view)\n\n    def on_load(self, view):\n        self.on_activated(view)\n\n\nclass PlainTasksFoldToDueTags(PlainTasksFold):\n    def run(self, edit):\n        if not self.view.settings().get('highlight_past_due', True):\n            return sublime.message_dialog('highlight_past_due setting must be true')\n        self.view.run_command('plain_tasks_toggle_highlight_past_due')\n        dues = sorted(self.view.line(r) for r in (self.view.get_regions('past_due') + self.view.get_regions('due_soon')))\n        if not dues:\n            return sublime.message_dialog('No overdue tasks.\\nCongrats!')\n        self.exec_folding(self.add_projects_and_notes(dues))\n\n\nclass PlainTasksCalculateTotalTimeForProject(PlainTasksEnabled):\n    def run(self, edit, start):\n        line = self.view.line(int(start))\n        total, eol = self.calc_total_time_for_project(line)\n        if total:\n            self.view.insert(edit, eol, ' @total(%s)' % format_delta(self.view, total).rstrip(', '))\n\n    def calc_total_time_for_project(self, line):\n        pattern = r'(?<=\\s)@(lasted|wasted|total)\\([ \\t]*(?:(\\d+)[ \\t]*days?,?)?[ \\t]*((?:(\\d+)\\:(\\d+)\\:?(\\d+)?)|(?:(\\d+)\\.(\\d+)))?[ \\t]*\\)'\n        format = '{\"days\": \"\\\\2\", \"hours\": \"\\\\4\", \"minutes\": \"\\\\5\", \"seconds\": \"\\\\6\", \"dhours\": \"\\\\7\", \"dminutes\": \"\\\\8\"}'\n        lasted_strings = []\n        lasted_regions = self.view.find_all(pattern, 0, format, lasted_strings)\n        if not lasted_regions:\n            return 0, 0\n\n        eol = line.end()\n        project_block = self.view.indented_region(eol + 1)\n        total = timedelta()\n        for i, region in enumerate(lasted_regions):\n            if not all((region > line, region.b <= project_block.b)):\n                continue\n            t = json.loads(lasted_strings[i].replace('\"\"', '\"0\"'))\n            total += timedelta(days=int(t['days']),\n                               hours=int(t['hours']) or int(t['dhours']),\n                               minutes=int(t['minutes']) or int(t['dminutes']) * 60,\n                               seconds=int(t['seconds']))\n        return total, eol\n\n\nclass PlainTasksCalculateTimeForTask(PlainTasksEnabled):\n    def run(self, edit, started_matches, toggle_matches, now, eol, tag='lasted'):\n        '''\n        started_matches\n            list of Unicode objects\n        toggle_matches\n            list of Unicode objects\n        now\n            Unicode object, moment of completion or cancellation of a task\n        eol\n            int as str (abs. point of end of task line without line break)\n        tag\n            Unicode object (lasted for complete, wasted for cancelled)\n        '''\n        if not started_matches:\n            return\n\n        date_format = self.view.settings().get('date_format', '(%y-%m-%d %H:%M)')\n        start = datetime.strptime(started_matches[0], date_format)\n        end = datetime.strptime(now, date_format)\n\n        toggle_times = [datetime.strptime(toggle, date_format) for toggle in toggle_matches]\n        all_times = [start] + toggle_times + [end]\n        pairs = zip(all_times[::2], all_times[1::2])\n        deltas = [pair[1] - pair[0] for pair in pairs]\n\n        delta = format_delta(self.view, sum(deltas, timedelta()))\n\n        tag = ' @%s(%s)' % (tag, delta.rstrip(', ') if delta else ('a bit' if '%H' in date_format else 'less than day'))\n        eol = int(eol)\n        if self.view.substr(sublime.Region(eol - 2, eol)) == '  ':\n            eol -= 2  # keep double whitespace at eol\n        self.view.insert(edit, eol, tag)\n\n\nclass PlainTasksReCalculateTimeForTasks(PlainTasksEnabled):\n    def run(self, edit):\n        started = r'^\\s*[^\\b]*?\\s*@started(\\([\\d\\w,\\.:\\-\\/ @]*\\)).*$'\n        toggle = r'@toggle(\\([\\d\\w,\\.:\\-\\/ @]*\\))'\n        calculated = r'([ \\t]@[lw]asted\\([\\d\\w,\\.:\\-\\/ @]*\\))'\n        done = r'^\\s*[^\\b]*?\\s*@(done|cancell?ed)[ \\t]*(\\([\\d\\w,\\.:\\-\\/ @]*\\)).*$'\n\n        date_format = self.view.settings().get('date_format', '(%y-%m-%d %H:%M)')\n        default_now = datetime.now().strftime(date_format)\n\n        regions = itertools.chain(*(reversed(self.view.lines(region)) for region in reversed(list(self.view.sel()))))\n        for line in regions:\n            current_scope = self.view.scope_name(line.a)\n            if not any(s in current_scope for s in ('completed', 'cancelled')):\n                continue\n\n            line_contents = self.view.substr(line)\n\n            done_match = re.match(done, line_contents, re.U)\n            now = done_match.group(2) if done_match else default_now\n\n            started_matches = re.findall(started, line_contents, re.U)\n            toggle_matches = re.findall(toggle, line_contents, re.U)\n            calc_matches = re.findall(calculated, line_contents, re.U)\n\n            for match in calc_matches:\n                line_contents = line_contents.replace(match, '')\n\n            self.view.replace(edit, line, line_contents)\n            self.view.run_command(\n                'plain_tasks_calculate_time_for_task', {\n                    'started_matches': started_matches,\n                    'toggle_matches': toggle_matches,\n                    'now': now,\n                    'eol': line.begin() + len(line_contents),\n                    'tag': 'lasted' if 'completed' in current_scope else 'wasted'}\n            )\n\n\nclass PlainTaskInsertDate(PlainTasksBase):\n    def runCommand(self, edit, region=None, date=None):\n        if region:\n            y, m, d, H, M = date\n            region = sublime.Region(*region)\n            self.view.replace(edit, region, datetime(y, m, d, H, M, 0).strftime(self.date_format) + ' ')\n            self.view.sel().clear()\n            self.view.sel().add(sublime.Region(self.view.line(region).b))\n            return\n\n        for s in reversed(list(self.view.sel())):\n            self.view.insert(edit, s.b, datetime.now().strftime(self.date_format))\n\n\nclass PlainTasksReplaceShortDate(PlainTasksBase):\n    def runCommand(self, edit):\n        s = self.view.sel()[0]\n        date, error, region = expand_short_date(self.view, s.a, s.b, datetime.now(), self.date_format)\n\n        if not date:\n            sublime.error_message(\n                'PlainTasks:\\n\\n'\n                '{0}:\\n days:\\t{1}\\n hours:\\t{2}\\n minutes:\\t{3}\\n'.format(*error) if len(error) == 4 else\n                '{0}:\\n year:\\t{1}\\n month:\\t{2}\\n day:\\t{3}\\n HH:\\t{4}\\n MM:\\t{5}\\n'.format(*error))\n            return\n\n        date = date.strftime(self.date_format)\n        self.view.replace(edit, region, date)\n        offset = region.a + len(date)\n        self.view.sel().clear()\n        self.view.sel().add(sublime.Region(offset, offset))\n\n\nclass PlainTasksViewEventListener(sublime_plugin.ViewEventListener):\n    @classmethod\n    def is_applicable(cls, settings):\n        return settings.get('syntax') in ('Packages/PlainTasks/PlainTasks.sublime-syntax', 'Packages/PlainTasks/PlainTasks.tmLanguage')\n\n\nclass PlainTasksPreviewShortDate(PlainTasksViewEventListener):\n    def __init__(self, view):\n        self.view = view\n        self.phantoms = sublime.PhantomSet(view, 'plain_tasks_preview_short_date')\n\n    def on_selection_modified_async(self):\n        self.phantoms.update([])  # https://github.com/SublimeTextIssues/Core/issues/1497\n        s = self.view.sel()[0]\n        if not (s.empty() and 'meta.tag.todo' in self.view.scope_name(s.a)):\n            return\n\n        rgn = self.view.extract_scope(s.a)\n        text = self.view.substr(rgn)\n        match = re.match(r'@due\\(([^@\\n]*)\\)[\\s$]*', text)\n        # print(s, rgn, text)\n\n        if not match:\n            return\n        # print(match.group(1))\n        preview_offset = self.view.settings().get('due_preview_offset', 0)\n        remain_format = self.view.settings().get('due_remain_format', '{time} remaining')\n        overdue_format = self.view.settings().get('due_overdue_format', '{time} overdue')\n\n\n        date_format = self.view.settings().get('date_format', '(%y-%m-%d %H:%M)')\n        start = rgn.a + 5  # within parenthesis\n        now = datetime.now().replace(second=0, microsecond=0)\n        date, error, region = expand_short_date(self.view, start, start, now, date_format)\n\n        upd = []\n        if not error:\n            if now >= date:\n                delta = '-' + format_delta(self.view, now - date)\n            else:\n                delta = format_delta(self.view, date - now)\n            content = (overdue_format if '-' in delta else remain_format).format(time=delta.lstrip('-') or 'a little bit')\n            if content:\n                if self.view.settings().get('show_remain_due', False):\n                    # replace existing remain/overdue phantom\n                    phantoms = self.view.settings().get('plain_tasks_remain_time_phantoms', [])\n                    for index, (point, _) in enumerate(phantoms):\n                        if point == region.a - 4:\n                            phantoms[index] = [point, str(delta)]\n                            self.view.settings().set('plain_tasks_remain_time_phantoms', phantoms)\n                            break\n                else:\n                    upd.append(sublime.Phantom(\n                        sublime.Region(region.a - 4),\n                        content,\n                        sublime.LAYOUT_BELOW))\n            date = date.strftime(date_format).strip('()')\n        if date == match.group(1).strip():\n            self.phantoms.update(upd)\n            return\n\n        upd.append(sublime.Phantom(\n            sublime.Region(region.b - preview_offset),\n            date or (\n            '{0}:<br> days:\\t{1}<br> hours:\\t{2}<br> minutes:\\t{3}<br>'.format(*error) if len(error) == 4 else\n            '{0}:<br> year:\\t{1}<br> month:\\t{2}<br> day:\\t{3}<br> HH:\\t{4}<br> MM:\\t{5}<br>'.format(*error)),\n            sublime.LAYOUT_INLINE))\n        self.phantoms.update(upd)\n\n\nclass PlainTasksChooseDate(sublime_plugin.ViewEventListener):\n    def __init__(self, view):\n        self.view = view\n\n    @classmethod\n    def is_applicable(cls, settings):\n        return settings.get('show_calendar_on_tags')\n\n    def on_selection_modified_async(self):\n        s = self.view.sel()[0]\n        if not (s.empty() and any('meta.tag.todo ' in self.view.scope_name(n) for n in (s.a, s.a - 1))):\n            return\n        self.view.run_command('plain_tasks_calendar', {'point': s.a})\n\n\nclass PlainTasksCalendar(sublime_plugin.TextCommand):\n    def is_visible(self):\n        return self.view.score_selector(0, \"text.todo\") > 0\n\n    def run(self, edit, point=None):\n        point = point or self.view.sel()[0].a\n        self.region, tag = self.extract_tag(point)\n        content = self.generate_calendar()\n        self.view.show_popup(content, sublime.COOPERATE_WITH_AUTO_COMPLETE, self.region.a, 555, 555, self.action)\n\n    def extract_tag(self, point):\n        '''point is cursor\n        Return tuple of two elements\n        Region\n            which will be replaced with chosen date, it may be parentheses belong to tag, or end of tag, or point\n        Unicode\n            tag under cursor (i.e. point)\n        '''\n        start = end = point\n        tag_pattern = r'(?<=\\s)(\\@[^\\(\\) ,\\.]+)([\\w\\d\\.\\(\\)\\-!? :\\+]*)'\n        line = self.view.line(point)\n        matches = re.finditer(tag_pattern, self.view.substr(line))\n        for match in matches:\n            m_start = line.a + match.start(1)\n            m_end   = line.a + match.end(2)\n            if m_start <= point <= m_end:\n                start = line.a + match.start(2)\n                end   = m_end\n                break\n        else:\n            match = None\n        tag = match.group(0) if match else ''\n        return sublime.Region(start, end), tag\n\n    def generate_calendar(self, date=None):\n        date = date or datetime.now()\n        y, m, d, H, M = date.year, date.month, date.day, date.hour, date.minute\n\n        content = ('<style> #today {{color: var(--background); background-color: var(--foreground)}}</style>'\n                   '<br> <center><big>{prev_month} {next_month} {month}'\n                   '    {prev_year} {next_year} {year}</big></center><br><br>'\n                   '{table}<br> {time}<br><br><hr>'\n                   '<br> Click day to insert date '\n                   '<br> into view, click month or '\n                   '<br> time to switch the picker <br><br>'\n                   )\n\n        locale.setlocale(locale.LC_ALL, '')  # to get native month name\n        month = '<a href=\"month:{0}-{1}-{2}-{3}-{4}\">{5}</a>'.format(y, m, d, H, M, date.strftime('%B'))\n        prev_month = '<a href=\"prev_month:{0}-{1}-{2}-{3}-{4}\">←</a>'.format(y, m, d, H, M)\n        next_month = '<a href=\"next_month:{0}-{1}-{2}-{3}-{4}\">→</a>'.format(y, m, d, H, M)\n        prev_year = '<a href=\"prev_year:{0}-{1}-{2}-{3}-{4}\">←</a>'.format(y, m, d, H, M)\n        next_year = '<a href=\"next_year:{0}-{1}-{2}-{3}-{4}\">→</a>'.format(y, m, d, H, M)\n        year = '<a href=\"year:{0}-{1}-{2}-{3}-{4}\">{0}</a>'.format(y, m, d, H, M)\n\n        table = ''\n        for week in calendar.Calendar().monthdayscalendar(y, m):\n            row = ['']\n            for day in week:\n                link = '<a href=\"day:{0}-{1}-{2}-{3}-{4}\"{5}>{2}</a>'.format(y, m, day, H, M, ' id=\"today\"' if d == day else '')\n                cell = ('  %s' % link if day < 10 else ' %s' % link) if day else '   '\n                row.append(cell)\n            table += ' '.join(row + ['<br><br>'])\n\n        time = '<a href=\"time:{0}-{1}-{2}-{3}-{4}\">{5}</a>'.format(y, m, d, H, M, date.strftime('%H:%M'))\n        return content.format(\n            prev_month=prev_month, next_month=next_month, month=month,\n            prev_year=prev_year, next_year=next_year, year=year,\n            time=time, table=table)\n\n    def action(self, payload):\n        msg, stamp = payload.split(':')\n\n        def insert(stamp):\n            self.view.hide_popup()\n            y, m, d, H, M = (int(i) for i in stamp.split('-'))\n            self.view.run_command('plain_task_insert_date', {'region': (self.region.a, self.region.b), 'date': (y, m, d, H, M)})\n            self.view.sel().clear()\n            self.view.sel().add(sublime.Region(self.region.b + 1))\n\n        def generate_months(stamp):\n            y, m, d, H, M = (int(i) for i in stamp.split('-'))\n            months = ['<br>{5}<a href=\"year:{0}-{1}-{2}-{3}-{4}\">{0}</a><br><br>'.format(y, m, d, H, M, ' ' * 8)]\n            for i in range(1, 13):\n                months.append('{6}<a href=\"calendar:{0}-{1}-{2}-{3}-{4}\">{5}</a> '.format(y, i, d, H, M, datetime(y, i, 1, H, M, 0).strftime('%b'), '•' if i == m else ' '))\n                if i in (4, 8, 12):\n                    months.append('<br><br>')\n            self.view.update_popup(''.join(months))\n\n        def generate_years(stamp):\n            y, m, d, H, M = (int(i) for i in stamp.split('-'))\n            years = ['<br>']\n            for i in range(y - 6, y + 6):\n                years.append('{5}<a href=\"month:{0}-{1}-{2}-{3}-{4}\">{0}</a> '.format(i, m, d, H, M, '•' if i == y else ' '))\n                if i in (y - 3, y + 1, y + 5):\n                    years.append('<br><br>')\n            self.view.update_popup(''.join(years))\n\n        def generate_time(stamp):\n            y, m, d, H, M = (int(i) for i in stamp.split('-'))\n            hours = ['<br> Hours:<br><br>']\n            for i in range(24):\n                hours.append('{6}{5}<a href=\"time:{0}-{1}-{2}-{3}-{4}\">{3}</a> '.format(y, m, d, i, M, '•' if i == H else ' ', ' ' if i < 10 else ''))\n                if i in (7, 15, 23):\n                    hours.append('<br><br>')\n            minutes = ['<br> Minutes:<br><br>']\n            for i in range(60):\n                minutes.append('{6}{5}<a href=\"time:{0}-{1}-{2}-{3}-{4}\">{4}</a> '.format(y, m, d, H, i, '•' if i == M else ' ', ' ' if i < 10 else ''))\n                if i in (9, 19, 29, 39, 49, 59):\n                    minutes.append('<br><br>')\n            confirm = ['<br> <a href=\"calendar:{0}-{1}-{2}-{3}-{4}\">Confirm: {5}</a> <br><br>'.format(y, m, d, H, M, datetime(y, m, d, H, M, 0).strftime('%H:%M'))]\n            self.view.update_popup(''.join(hours + minutes + confirm))\n\n        def calendar(stamp):\n            y, m, d, H, M = (int(i) for i in stamp.split('-'))\n            if m == 2 and d > 28:\n                d = 28\n            elif d == 31 and m in (4, 6, 9, 11):\n                d = 30\n            self.view.update_popup(self.generate_calendar(date=datetime(y, m, d, H, M, 0)))\n\n        def shift(stamp, month=0, year=0):\n            y, m, d, H, M = (int(i) for i in stamp.split('-'))\n            date = datetime(y, m, d, H, M, 0) + relativedelta(months=month, years=year)\n            self.view.update_popup(self.generate_calendar(date))\n\n        case = {\n            'day': insert,\n            'month': generate_months,\n            'year': generate_years,\n            'time': generate_time,\n            'calendar': calendar,\n            'prev_month': lambda s=stamp: shift(s, month=-1),\n            'next_month': lambda s=stamp: shift(s, month=1),\n            'prev_year': lambda s=stamp: shift(s, year=-1),\n            'next_year': lambda s=stamp: shift(s, year=1)\n        }\n        self.view.update_popup('Loading...')\n        case[msg](stamp)\n\n\nclass PlainTasksRemain(PlainTasksViewEventListener):\n    def __init__(self, view):\n        self.view = view\n        self.phantom_set = sublime.PhantomSet(view, 'plain_tasks_remain_time')\n        self.view.settings().add_on_change('plain_tasks_remain_time_phantoms', self.check_setting)\n        self.phantoms = self.view.settings().get('plain_tasks_remain_time_phantoms', [])\n\n    def check_setting(self):\n        '''add_on_change is issued on change of any setting in settings object'''\n        new_value = self.view.settings().get('plain_tasks_remain_time_phantoms', [])\n        if self.phantoms == new_value:\n            return\n        self.phantoms = new_value\n        self.update()\n\n    def update(self):\n        self.phantoms = self.view.settings().get('plain_tasks_remain_time_phantoms', [])\n        if not self.phantoms:\n            self.phantom_set.update([])\n            return\n        remain_format = self.view.settings().get('due_remain_format', '{time} remaining')\n        overdue_format = self.view.settings().get('due_overdue_format', '{time} overdue')\n\n        upd = []\n        for point, content in self.phantoms:\n            upd.append(sublime.Phantom(\n                sublime.Region(point),\n                (overdue_format if '-' in content else remain_format).format(time=content.lstrip('-') or 'a little bit'),\n                sublime.LAYOUT_BELOW))\n        self.phantom_set.update(upd)\n\n\ndef plugin_unloaded():\n    for window in sublime.windows():\n        for view in window.views():\n            view.settings().clear_on_change('plain_tasks_remain_time_phantoms')\n"
        },
        {
          "name": "PlainTasksToHTML.py",
          "type": "blob",
          "size": 14.681640625,
          "content": "# coding: utf-8\n\nimport sublime\nimport os\nimport re\nimport webbrowser\nimport cgi\nimport tempfile\n\nplatform = sublime.platform()\nST2 = int(sublime.version()) < 3000\n\n# io is not operable in ST2 on Linux, but in all other cases io is better\n# https://github.com/SublimeTextIssues/Core/issues/254\nif ST2 and platform == 'linux':\n    import codecs as io\nelse:\n    import io\n\nif not ST2:\n    from .plist_parser import parse_file\n    from .PlainTasks import PlainTasksBase\nelse:\n    from plist_parser import parse_file\n    from PlainTasks import PlainTasksBase\n\n\ndef hex_to_rgba(value):\n    value = value.lstrip('#')\n    length = len(value)\n    if length == 3:\n        value = ''.join([v*2 for v in list(value)])\n    alpha = [str(round(int(value[6:], 16)/255., 2) if length > 6 else 1.)]\n    return [str(int(value[i:i+2], 16)) for i in range(0, 6, 2)] + alpha\n\n\ndef convert_to_rgba_css(word):\n    rgba = hex_to_rgba(word)\n    rgba_css = 'rgb%s(%s)' % ('a' if len(rgba) > 3 else '', ','.join(rgba))\n    return rgba_css\n\n\ndefault_ccsl = [  # hand-made repr of tasks.hidden-tmTheme\n    'body { background-color: #efe9b7; }',\n    'a { color: rgba(0, 62, 114, .55); font-weight: bold; }',\n    '.bullet-pending { font-style: normal; font-weight: bold; color: rgba(0,0,0,.6); }',\n    '.bullet-done { font-style: normal; font-weight: bold; color: #00723e; }',\n    '.bullet-cancelled { font-style: normal; font-weight: bold; color: #b60101; }',\n    '.sep { font-style: normal; color: rgba(0,0,0,.44); }',\n    '.sep-archive { font-style: normal; color: rgba(0,0,0,.44); }',\n    '.header { font-weight: bold; font-style: normal; color: #bc644a; background-color: rgba(0,0,0,.05); width: 100%; }',\n    '.tag { font-weight: bold; font-style: normal; color: #C37763; }',\n    '.tag-done, .tag-cancelled { font-style: normal; color:#A49F85; }',\n    '.tag-today, .tag-critical, .tag-high, .tag-low { font-weight: bold; font-style: normal; color: #000000; }',\n    '.tag-today { background: #EADD4E; } .tag-critical{ background: #FF0000; }',\n    '.tag-high { background: #FF7F00; }',\n    '.tag-low { background: #222222; color: #ffffff; }',\n    '.done, .cancelled { color: #66654F; }',\n    '.note { font-style: normal; color: #858266; }'\n]\n\nscope_to_tag = {  # key is name of regex group, value is regex expression\n    'body': r'^body$',\n    'a':    r'(?:todo\\.)?url(?!\\.)',\n    # PENDING\n    '__open':           r'(?:^|\\b)meta(?!\\.)',\n    '__bullet_pending': r'bullet\\.pending(?!\\.)',\n    # COMPLETED\n    '__done':        r'comment(?!\\.)',\n    '__bullet_done': r'bullet\\.completed(?!\\.)',\n    '__tag_done':    r'tag\\.todo\\.completed(?!\\.)',\n    # CANCELLED\n    '__cancelled':        r'item\\.todo\\.cancelled(?!\\.)',\n    '__bullet_cancelled': r'bullet\\.cancelled(?!\\.)',\n    '__tag_cancelled':    r'tag\\.todo\\.cancelled(?!\\.)',\n    # PROJECT & NOTE\n    '__header': r'keyword(?!\\.)',\n    '__note':   r'notes(?:\\.todo(?!\\.))?',\n    # TAGS\n    '__tag':          r'(?:^|meta\\.)tag(?:\\.todo)?(?!\\.)',\n    '__tag_today':    r'(?:tag\\.todo\\.)?today(?!\\.)',\n    '__tag_critical': r'(?:tag\\.todo\\.)?critical(?!\\.)',\n    '__tag_high':     r'(?:tag\\.todo\\.)?high(?!\\.)',\n    '__tag_low':      r'(?:tag\\.todo\\.)?low(?!\\.)',\n    # SEPARATORS\n    '__sep':         r'separator(?:\\.todo(?!\\.))?',\n    '__sep_archive': r'archive(?:\\.todo(?!\\.))?'\n}\nallrxinone = r'|'.join([('(?P<%s>%s)' % (t, r)) for t, r in scope_to_tag.items()])\nSCOPES_REGEX = re.compile(allrxinone)\n\n\ndef convert_tmtheme_to_css(theme_file):\n    '''return list of css lines ready to be pasted'''\n    if not theme_file:\n        return default_ccsl\n\n    theme_as_dict = parse_file(theme_file)\n    cssl = []\n\n    # make default color pink, easy to see in case of bugs\n    default_color = 'rgb(236,9,140)'\n    for i in theme_as_dict.get('settings'):\n        s = i.get('settings', {})\n        if 'caret' in s:\n            default_color = convert_to_rgba_css(s['caret'])\n\n    for item in theme_as_dict.get('settings'):\n        scope = item.get('scope', 'body')\n        props = item.get('settings', {})\n        props_str = ''\n        if props:\n            for k, v in props.items():\n                k = k.replace('foreground', 'color')\n                if v:\n                    if any(k == w for w in ('background', 'color')):\n                        props_str += '%s: %s; ' % (k, convert_to_rgba_css(v) or v)\n                    elif k == 'fontStyle':\n                        if 'bold' in v:\n                            props_str += 'font-weight: bold; font-style: normal; '\n                        elif 'italic' in v:\n                            props_str += 'font-weight: normal; font-style: italic; '\n            if not props.get('fontStyle'):\n                props_str += 'font-weight: normal; font-style: normal; '\n            if not props.get('foreground'):\n                props_str += 'color: %s; ' % default_color\n        else:\n            props_str += 'color: %s; font-weight: normal; font-style: normal; ' % default_color\n        if scope == 'keyword':\n            props_str += 'width: 100%; '\n\n        mo = re.search(SCOPES_REGEX, scope)\n        tag = mo.lastgroup.replace('__', '.').replace('_', '-') if mo else ''\n        if tag:\n            cssl.append('%s { %s}' % (tag, props_str))\n        # else:\n            # if not any(w in scope for w in ('bold', 'italic')):\n                # print('\\n\\n')\n                # print('NO TAG FOR', scope)\n                # print('REGEX:')\n                # print(allrxinone)\n                # print(allrxinone.replace(')|(', ')\\n('))\n                # print('\\n\\n')\n    return cssl\n\n\nclass PlainTasksConvertToHtml(PlainTasksBase):\n    def is_enabled(self):\n        return self.view.score_selector(0, \"text.todo\") > 0\n\n    def runCommand(self, edit, ask=False):\n        all_lines_regions = self.view.split_by_newlines(sublime.Region(0, self.view.size()))\n        html_doc = []\n        patterns = {'HEADER':    'text.todo keyword.control.header.todo ',\n                    'EMPTY':     'text.todo ',\n                    'NOTE':      'text.todo notes.todo ',\n                    'OPEN':      'text.todo meta.item.todo.pending ',\n                    'DONE':      'text.todo meta.item.todo.completed ',\n                    'CANCELLED': 'text.todo meta.item.todo.cancelled ',\n                    'SEPARATOR': 'text.todo meta.punctuation.separator.todo ',\n                    'ARCHIVE':   'text.todo meta.punctuation.archive.todo '\n                    }\n        for r in all_lines_regions:\n            i = self.view.scope_name(r.a)\n\n            if patterns['HEADER'] in i:\n                ht = '<span class=\"header\">%s</span>' % cgi.escape(self.view.substr(r))\n\n            elif i == patterns['EMPTY']:\n                # these are empty lines (i.e. linebreaks, but span can be {display:none})\n                ht = '<span class=\"empty-line\">%s</span>' % self.view.substr(r)\n\n            elif patterns['NOTE'] in i:\n                scopes = self.extracting_scopes(self, r, i)\n                note = '<span class=\"note\">'\n                for s in scopes:\n                    sn = self.view.scope_name(s.a)\n                    if 'italic' in sn:\n                        note += '<i>%s</i>' % cgi.escape(self.view.substr(s).strip('_*'))\n                    elif 'bold' in sn:\n                        note += '<b>%s</b>' % cgi.escape(self.view.substr(s).strip('_*'))\n                    elif 'url' in sn:\n                        note += '<a href=\"{0}\">{0}</a>'.format(cgi.escape(self.view.substr(s).strip('<>')))\n                    else:\n                        note += cgi.escape(self.view.substr(s))\n                ht = note + '</span>'\n\n            elif patterns['OPEN'] in i:\n                scopes = self.extracting_scopes(self, r)\n                indent = self.view.substr(sublime.Region(r.a, scopes[0].a)) if r.a != scopes[0].a else ''\n                pending = '<span class=\"open\">%s' % indent\n                for s in scopes:\n                    sn = self.view.scope_name(s.a)\n                    if 'bullet' in sn:\n                        pending += '<span class=\"bullet-pending\">%s</span>' % self.view.substr(s)\n                    elif 'meta.tag' in sn:\n                        pending += '<span class=\"tag\">%s</span>' % cgi.escape(self.view.substr(s))\n                    elif 'tag.todo.today' in sn:\n                        pending += '<span class=\"tag-today\">%s</span>' % self.view.substr(s)\n                    elif 'tag.todo.critical' in sn:\n                        pending += '<span class=\"tag-critical\">%s</span>' % self.view.substr(s)\n                    elif 'tag.todo.high' in sn:\n                        pending += '<span class=\"tag-high\">%s</span>' % self.view.substr(s)\n                    elif 'tag.todo.low' in sn:\n                        pending += '<span class=\"tag-low\">%s</span>' % self.view.substr(s)\n                    elif 'italic' in sn:\n                        pending += '<i>%s</i>' % cgi.escape(self.view.substr(s).strip('_*'))\n                    elif 'bold' in sn:\n                        pending += '<b>%s</b>' % cgi.escape(self.view.substr(s).strip('_*'))\n                    elif 'url' in sn:\n                        pending += '<a href=\"{0}\">{0}</a>'.format(cgi.escape(self.view.substr(s).strip('<>')))\n                    else:\n                        pending += cgi.escape(self.view.substr(s))\n                ht = pending + '</span>'\n\n            elif patterns['DONE'] in i:\n                scopes = self.extracting_scopes(self, r)\n                indent = self.view.substr(sublime.Region(r.a, scopes[0].a)) if r.a != scopes[0].a else ''\n                done = '<span class=\"done\">%s' % indent\n                for s in scopes:\n                    sn = self.view.scope_name(s.a)\n                    if 'bullet' in sn:\n                        done += '<span class=\"bullet-done\">%s</span>' % self.view.substr(s)\n                    elif 'tag.todo.completed' in sn:\n                        done += '<span class=\"tag-done\">%s</span>' % cgi.escape(self.view.substr(s))\n                    else:\n                        done += cgi.escape(self.view.substr(s))\n                ht = done + '</span>'\n\n            elif patterns['CANCELLED'] in i:\n                scopes = self.extracting_scopes(self, r)\n                indent = self.view.substr(sublime.Region(r.a, scopes[0].a)) if r.a != scopes[0].a else ''\n                cancelled = '<span class=\"cancelled\">%s' % indent\n                for s in scopes:\n                    sn = self.view.scope_name(s.a)\n                    if 'bullet' in sn:\n                        cancelled += '<span class=\"bullet-cancelled\">%s</span>' % self.view.substr(s)\n                    elif 'tag.todo.cancelled' in sn:\n                        cancelled += '<span class=\"tag-cancelled\">%s</span>' % cgi.escape(self.view.substr(s))\n                    else:\n                        cancelled += cgi.escape(self.view.substr(s))\n                ht = cancelled + '</span>'\n\n            elif patterns['SEPARATOR'] in i:\n                ht = '<span class=\"sep\">%s</span>' % cgi.escape(self.view.substr(r))\n\n            elif patterns['ARCHIVE'] in i:\n                ht = '<span class=\"sep-archive\">%s</span>' % cgi.escape(self.view.substr(r))\n\n            else:\n                sublime.error_message('Hey! you are not supposed to see this message.\\n'\n                                      'Please, report an issue in PlainTasks repository on GitHub.')\n            html_doc.append(ht)\n\n        title = os.path.basename(self.view.file_name()) if self.view.file_name() else 'Export'\n        html  = self.produce_html_from_template(title, html_doc)\n\n        if ask:\n            window = sublime.active_window()\n            nv = window.new_file()\n            nv.set_syntax_file('Packages/HTML/HTML.tmLanguage')\n            nv.set_name(title + '.html')\n            nv.insert(edit, 0, html)\n            window.run_command('close_file')\n            return\n\n        tmp_html = tempfile.NamedTemporaryFile(delete=False, suffix='.html')\n        tmp_html.write(html.encode('utf-8'))\n        tmp_html.close()\n        webbrowser.open_new_tab(\"file://%s\" % tmp_html.name)\n\n    def produce_html_from_template(self, title, html_doc):\n        html_lines = []\n        ppath = sublime.packages_path()\n        tmtheme = os.path.join(ppath, self.view.settings().get('color_scheme').replace('Packages/', '', 1))\n        css = '\\n'.join(convert_tmtheme_to_css(tmtheme))\n        with io.open(os.path.join(ppath, 'PlainTasks/templates/template.html'), 'r', encoding='utf8') as template:\n            for line in template:\n                line = (line.replace('$title', title)\n                            .replace('$content', '\\n'.join(html_doc))\n                            .replace('$css', css)\n                            .strip('\\n'))\n                html_lines.append(line)\n        return u'\\n'.join(html_lines)\n\n    def extracting_scopes(self, edit, region, scope_name=''):\n        '''extract scope for each char in line wo dups, ineffective but it works?'''\n        scopes = []\n\n        for p in range(region.b-region.a):\n            p += region.a\n            sr = self.view.extract_scope(p)\n            # fix multi-line, because variable region is always a single line\n            if sr.a < region.a or sr.b - 1 > region.b:\n                if scopes and p == scopes[~0].b:  # *text* inbetween *markups*\n                    sr = sublime.Region(p, region.b)\n                else:  # multi-line\n                    sr = sublime.Region(region.a, region.b)\n            # main block, add unique entity to the list\n            if sr not in scopes:\n                scopes.append(sr)\n            elif scopes and self.view.scope_name(p) != self.view.scope_name(scopes[~0].a):\n                scopes.append(sublime.Region(p, region.b))\n            # fix intersecting regions, e.g. markup in notes\n            if scopes and sr.a < scopes[~0].b and p - 1 == scopes[~0].b:\n                scopes.append(sublime.Region(scopes[~0].b, sr.b))\n\n        if scopes and scopes[~0].b > region.b:\n            # avoid line break at eol\n            scopes[~0] = sublime.Region(scopes[~0].a, region.b)\n\n        if len(scopes) > 1:\n            # fix bullet\n            if scopes[0].intersects(scopes[1]):\n                scopes[0] = sublime.Region(scopes[0].a, scopes[1].a)\n            # fix text after tag(s)\n            if scopes[~0].b < region.b or scopes[~0].a < region.a:\n                scopes.append(sublime.Region(scopes[~0].b, region.b))\n            new_scopes = scopes[:0:~0]\n            for i, s in enumerate(new_scopes):\n                # fix overall intersections\n                if s.intersects(scopes[~(i + 1)]):\n                    if scopes[~(i + 1)].b < s.b:\n                        scopes[~i] = sublime.Region(scopes[~(i + 1)].b, s.b)\n                        new_scopes[i] = scopes[~i]\n                    else:\n                        scopes[~(i + 1)] = sublime.Region(scopes[~(i + 1)].a, s.a)\n                        if len(new_scopes) > i + 1:\n                            new_scopes[i + 1] = scopes[~(i + 1)]\n        return scopes\n"
        },
        {
          "name": "Readme.md",
          "type": "blob",
          "size": 18.654296875,
          "content": "## [PlainTasks](https://github.com/aziz/PlainTasks) \n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8d42f3e49d104ab8bf663392661b183b)](https://www.codacy.com/app/allen-bargi/PlainTasks?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=aziz/PlainTasks&amp;utm_campaign=Badge_Grade)\n\nAn opinionated todo-list plugin for Sublime Text (2 & 3) editor\n![](http://cl.ly/image/1q100Q212o2Q/ss.png)\n\n## Installation\nTo install this plugin, you have two options:\n\n1. If you have Package Control installed, simply search for `PlainTasks` to install.\n\n2. Clone source code to Sublime Text packages folder.\n\n## Start a new todo-list\nBring up the command palette (it’s <kbd>⌘ + shift + p</kbd> in OS X and <kbd>ctrl + shift + p</kbd> in Windows) and type `task` and select `Tasks: New document` command. \n\n**NOTE:** Save your todo files with `todo`, `todolist`, `tasks` or `taskpaper` file extensions or just name them `TODO` with no extension.\nFor more portability you can use `todolist.txt` either as a filename or as suffix for any arbitrary filename.\n\n## Usage\n**NOTE:** In Windows or Linux use <kbd>ctrl</kbd> instead of <kbd>⌘</kbd>\n\n☐ <kbd>⌘ + enter</kbd> or <kbd>⌘ + i</kbd>: new task\n\n☐ <kbd>⌘ + d</kbd>: toggle task as completed.\n\n☐ <kbd>ctrl + c</kbd>: toggle task as cancelled on Mac. <kbd>alt + c</kbd> on Windows/Linux.\n\n☐ <kbd>⌘ + shift + a</kbd> will archive the done tasks, by removing them from your list and appending them to the bottom of the file under Archive project\n\n☐ <kbd>⌘ + shift + o</kbd> will archive in Org-Mode style, removing the entire subtree after cursor and appending it to new file next to original one, e.g. if original is `filename.TODO` then new would be `filename_archive.TODO`\n\n☐ <kbd>⌘ + shift + u</kbd> will open the url under the cursor in your default browser, other than http(s) schemes must be enclosed within `<>`, e.g. `<skype:nickname>`\n\n☐ Anything with colon at the end of the line is a project title, you can also nest projects by indenting them. \n\n☐ You can write plain text as notes or descriptions wherever you want. Use `_` or `*` for italic and bold just like in Markdown.\n\n☐ You can add tags using **`@`** sign  \nYou can place cursors on tags, click right mouse button and **Filter by tags under cursors**:\npending tasks with selected tags will remain visible (and their notes and projects they belong to), but everything else will be hidden/folded; to unfold all press <kbd>⌘+k</kbd>, <kbd>⌘+j</kbd> or <kbd>⌘+k</kbd>, <kbd>⌘+0</kbd>\n\n☐ You can navigate tags in current document via <kbd>⌘+shift+r</kbd>.\n\n☐ PlainTasks comes with a simple snippet for creating separators, if you feel that your task list is becoming too long you can split it into several sections (and fold some of them) using this snippet:\n\n`--` and then <kbd>tab</kbd> will give you this: `--- ✄ -----------------------`\n\n☐ Completion rules (<kbd>ctrl+space</kbd> or <kbd>alt+/</kbd> to see list of them):  \n\n- type `t`, press <kbd>tab</kbd> — it’ll become `@today` — this one is highlighted differently than other tags;\n- `c`, <kbd>tab</kbd> — `@critical`;\n- `h`, <kbd>tab</kbd> — `@high`;\n- `l`, <kbd>tab</kbd> — `@low`;\n- `s`, <kbd>tab</kbd> — `@started` — press <kbd>tab</kbd> again and current date will be inserted, when you’ll complete or cancel a task with such tag, you’ll know how many time has passed since start; if you have to change done/cancelled/started time, then you can recalculate the time spent on task by pressing <kbd>tab</kbd> while cursor is placed on a tag;\n- `tg`, <kbd>tab</kbd>, <kbd>tab</kbd> work in the same manner as `s`, but inserts `@toggle(current date)` — so you can pause and resume to get more correct result when done/cancel; each toggle tag is either pause or resume depending on its place in sequence;\n- `cr`, <kbd>tab</kbd>, <kbd>tab</kbd> — `@created(current date)` (<kbd>⌘ + shift + enter</kbd> creates a new task with this tag);\n- `d`, <kbd>tab</kbd> — `@due( )`  \n  If you press <kbd>tab</kbd> again, it’ll insert current date, same for `@due( 0)`.  \n  You can type short date (similar to [OrgMode’s date prompt](http://orgmode.org/manual/The-date_002ftime-prompt.html), but not the same) and then press <kbd>tab</kbd> to expand it into default format.  \n  Short date should be __`@due(year-month-day hour:minute)`__  \n  Dot can be used instead of hyphen, but should be consistent _`year.month.day`_\n\n    - year, month, minute, hour can be omitted:\n\n        <table>\n         <tr>\n          <th>  Notation    </th><th>   Meaning     </th>\n         </tr>\n         <tr>\n          <td>  <code>@due(1)</code>    </td>\n          <td>  1st day of next month always    </td>\n         </tr>\n         <tr>\n          <td>  <code>@due(--1)</code>    </td>\n          <td>  1st day of current month always    </td>\n         </tr>\n         <tr>\n          <td>  <code>@due(5)</code>    </td>\n          <td>  5th day of current month (or next month if current day is 5th or older) </td>\n         </tr>\n         <tr>\n          <td>  <code>@due(2-3)</code>  </td>\n          <td>  February 3rd of current year or next one    </td>\n         </tr>\n         <tr>\n          <td>  <code>@due(31 23:)</code>   </td>\n          <td>  31st day of current/next month at 23 hours and minutes are equal to current moment  </td>\n         </tr>\n         <tr>\n          <td>  <code>@due(16.1.1 1:1)</code>   </td>\n          <td>  January 1st of 2016 at 01:01    <code>@due(16-01-01 01:01)</code>  </td>\n         </tr>\n        </table>\n\n    - relative period of time starts with a plus sign or two  \n      __`+[+][number][DdWw][h:m]`__ — number is optional as well as letter `d` for days or letter `w` for weeks.\n\n        <table>\n         <tr>\n          <th>  Notation    </th><th>   Meaning     </th>\n         </tr>\n         <tr>\n          <td>  <code>@due(+)</code>    </td>\n          <td>  tomorrow as well as <code>@due( +1)</code> or <code>@due( +1d)</code></td>\n         </tr>\n         <tr>\n          <td>  <code>@due(+w)</code>    </td>\n          <td>  one week since current date, i.e. <code>@due( +7)</code></td>\n         </tr>\n         <tr>\n          <td>  <code>@due(+3w)</code>  </td>\n          <td>  3 weeks since current date, i.e. <code>@due( +21d)</code></td>\n         </tr>\n         <tr>\n          <td>  <code>@due(++)</code>   </td>\n          <td>  one day since <code>@created(date)</code> if any, otherwise it is equal to <code>@due(+)</code></td>\n         </tr>\n         <tr>\n          <td>  <code>@due(+2:)</code>   </td>\n          <td>  two hours since current date</td>\n         </tr>\n         <tr>\n          <td>  <code>@due(+:555)</code>   </td>\n          <td>  555 minutes since current date</td>\n         </tr>\n         <tr>\n          <td>  <code>@due(+2 12:)</code>   </td>\n          <td>  2 days and 12 hours since current date</td>\n         </tr>\n        </table>\n\n☐ You can create a link to a file within your project by prefixing the file name with a dot and (back)slash like: `.\\filename\\` or `./another filename/`.  \n  The line and column can be specified by colons: `.\\filename:11:8`.  \n  In SublimeText 3 you can specify a symbol inside that file by using \\> character like: `.\\filename>symbol`.  \n  In SublimeText 2 you can specify a text inside that file by using inch characters like: `.\\filename\"any text\"`.  \n  Pressing <kbd>ctrl + o</kbd> (<kbd>alt + o</kbd> on Windows/Linux) will open the file in Sublime and scroll to specific position if any.  \n  Also in SublimeText 3 link may point to directory, open such link will add the directory to current project (sidebar).  \n  In addition, Markdown and “wiki” (Org-Mode, NV, etc.) styles are supported as well, examples:\n\n```\n[](path)\n[](path \":11:8\")\n[](path \">symbol\")\n[](path \"any text\")\n[[path]]\n[[path::11:8]]\n[[path::*symbol]]\n[[path::any text]]\n[[path]] \":11:8\"\n[[path]] \">symbol\"\n[[path]] \"any text\"\n```\n\n☐ To convert current document to HTML, bring up the command palette <kbd>⌘ + shift + p</kbd> and type `Tasks: View as HTML` — it will be opened in default webbrowser, so you can view and save it.  \n`Tasks: Save as HTML…` ask if you want to save and if yes, allow to choose directory and filename (but won’t open it in webbrowser).\n\n### Editor Useful Tools:\n\n☐ Use **<kbd>⌘ + control + up/down</kbd>** (**<kbd>ctrl + shift + up/down</kbd>** on Windows) to move tasks up and down.\n\n☐ Use **<kbd>⌘ + r</kbd>** to see a list of projects and quickly jump between them\n\n\n★ See the [Tutorial](https://github.com/aziz/PlainTasks/blob/master/messages/Tutorial.todo) for more detailed information.\n\n## Settings\nPlainTasks is an opinionated plugin, which means that it is highly configured to look in a specific way, but this does not mean that you can not customize it. If you feel that something does not look right and you want to change it, you can easily do it in your user settings file. \n\nGo to `Preferences → Package Settings → PlainTasks` and open `Settings - User`, there you can override all the default settings, to get an idea you can take a look at `Settings - Default`.\n\nHere is a list of PlainTasks’ specific settings:\n\n|            Setting             |     Default      |                                 Options/Description                                 |\n| ------------------------------ | ---------------- | ----------------------------------------------------------------------- |\n| **open_tasks_bullet**          | `☐`              | `-` `❍` `❑` `■` `□` `☐` `▪` `▫` `–` `—` `≡` `→` `›` `[ ]`             |\n| **done_tasks_bullet**          | `✔`              | `✓` `☑` `+` `[x]`                                                      |\n| **cancelled_tasks_bullet**     | `✘`              | `x` `[-]`                                                               |\n| **date_format**                | `(%y-%m-%d %H:%M)` | See [strfti.me](http://www.strfti.me/) for quick reference; detailed documentation: [ST2](https://docs.python.org/2.6/library/datetime.html#strftime-and-strptime-behavior), [ST3](https://docs.python.org/3.3/library/datetime.html#strftime-and-strptime-behavior) |\n| **done_tag**                   | true             | Determines whether done tasks should gain a `@done` tag or not          |\n| **done_date**                  | true             | Determines whether done tasks should gain a date or not                 |\n| **before_tasks_bullet_margin** | 1                | Determines the number of spaces (default indent) before the task bullet |\n| **project_tag**                | true             | Postfix archived task with project tag, otherwise prefix                |\n| **archive_name**               | `Archive:`       | Make sure it is the unique project name within your todo files          |\n| **new_on_top**                 | true             | How to sort archived tasks (done_tag=true and default date_format are required)|\n| **header_to_task**             | false            | If true, a project title line will be converted to a task on the certain keystroke  |\n| **decimal_minutes**            | false            | If true, minutes in lasted/wasted tags will be percent of hour, e.g. 1.50 instead of 1:30 |\n| **tasks_bullet_space**         | whitespace or tab | String to place after bullet, might be any character(s)                |\n| **highlight_past_due**         | true             | If true, highlight past, soon, and invalid `@due(something)`            |\n| **highlight_due_soon**         | 24               | Hours as int, threshold to define which `@due` will be soon             |\n| **scope_past_due**             | `string.other.tag.todo.critical` | Any scope, define color for past `@due`                 |\n| **scope_due_soon**             | `string.other.tag.todo.high`     | Any scope, define color for `@due` will be soon         |\n| **scope_misformatted**         | `string.other.tag.todo.low`      | Any scope, define color for `@due` mismatch **date_format** |\n| **icon_past_due**              | `\"circle\"`       | Gutter icon¹                                                            |\n| **icon_due_soon**              | `\"dot\"`          | Gutter icon¹                                                            |\n| **icon_misformatted**          | `\"\"`             | Gutter icon¹                                                            |\n| **icon_critical**              | `\"\"`             | Gutter icon¹                                                            |\n| **icon_high**                  | `\"\"`             | Gutter icon¹                                                            |\n| **icon_low**                   | `\"\"`             | Gutter icon¹                                                            |\n| **icon_today**                 | `\"\"`             | Gutter icon¹                                                            |\n| **show_remain_due**            | false            | In Sublime 3, show remain or overdue time under due tags                |\n| **show_calendar_on_tags**      | false            | In Sublime 3, if true, automatically show date picker when cursor is on tag (you can get date picker any time via context menu) |\n| **due_preview_offset**         | 0                | Place preview date outside of parens of `@due()`, 1 — within            |\n| **due_remain_format**          | `\"{time} remaining\"` | `{time}` will be replaced with actual value                         |\n| **due_overdue_format**         | `\"{time} overdue\"` | `{time}` will be replaced with actual value                           |\n\n<b>¹</b> Icon value can be  `\"dot\"`, `\"circle\"`, `\"bookmark\"`, `\"cross\"`, `\"\"`, or custom relative path to existing png file,\ne.g. `\"Packages/User/my-icon.png\"`.\n\n### Changing color scheme\nIf you don't like colors used in bundled schemes just copy any `.hidden-tmTheme` from PlainTasks to \nyour User directory, change colors and paste the code below in your user settings file:\n\n``` json\n{ \"color_scheme\": \"Path to your custom color scheme file. e.g. Packages/User/custom_plaintasks.hidden-tmTheme\" }\n```\n\n**N.B.**, sometimes you have to restart Sublime Text to apply changes made in tmTheme file.\n\n**N.B.**, `scope_past_due`, `scope_due_soon`, and `scope_misformatted` settings can assign any scopes defined in tmTheme file, e.g. \nyou can set `\"scope_past_due\": \"my.own.super.expired.whatever\"` and then just add style definition in tmTheme for this scope.\n\n### Taskpaper Compatibility\nIf you need to keep your files compatible with Taskpaper, go to \n`Preferences → Package Settings → PlainTasks` and open `Settings - User`, then\nadd these settings to the json file:\n\n```json\n{\n  \"translate_tabs_to_spaces\": false,\n  \"date_format\": \"(%y-%m-%d)\",\n  \"taskpaper_compatible\": true\n}\n```\n\n### Spell check\nIt is build-in feature of Sublime, you can toggle spell check with <kbd>F6</kbd>.  \nFor convinience, you may add bullets in list of ignored words into **`Preferences → Settings - User`**, e.g.\n\n```json\n{\n  \"ignored_words\": [ \"☐\", \"✔\", \"✘\", \"✄\" ]\n}\n```\n\n## [BONUS] Custom todo icon\nPlainTasks comes with a custom todo icon that you can find in the `icons` folder. You can assign it to your todo files to give them a better look and distinguish them from other plain text files. Google and find out how to assign a custom icon to a file type in your operating system.\n\n![](http://f.cl.ly/items/2t312B30121l2X1l0927/todo-icon.png)\n\n## [BONUS] Custom Statistics\nStatistics of current file are represented in status-bar, based on `stats_format`, which is `\"$n/$a done ($percent%) $progress Last task @done $last\"` by default — as you can see it’s just a string containing special directives (see table bellow) and regular chars.\n\n| Directive    | Description                                           |\n| ------------ | ----------------------------------------------------- |\n| `$o`         | Amount of pending tasks                               |\n| `$d`         | Amount of completed tasks                             |\n| `$c`         | Amount of cancelled tasks                             |\n| `$n`         | Sum of completed and cancelled tasks                  |\n| `$a`         | Sum of all tasks                                      |\n| `$percent`   | Ratio of `$n` to `$a`                                 |\n| `$progress`  | Percent as pseudo graphics (absents if less than 10%) |\n| `$last`      | Date of lastly completed task                         |\n| `{{...}}`    | Return `pending/completed/cancelled` tasks which matched by regex `...`;<br> e.g. `{{@tag}}` — amounts of tasks with `@tag`; or `{{@a|@b}}` — tasks with either `@a` or `@b` or both.<br> You may add several `{{...}}` to get separate stats for different tags. |\n\nSo you can customise it as you like, by adding to `Settings - User`, e.g.\n\n```\n{\n    \"stats_format\": \"☐$o ✔$d ✘$c\",\n\n    // if you want the statistics do not include the archived tasks:\n    \"stats_ignore_archive\": true\n}\n```\n\n### Copy statistics\nBring up the command palette and type `Tasks: Copy Statistics`.\n\n### Additional settings for progress bar\n```\n{\n    \"bar_full\": \"■\",   // any char\n    \"bar_empty\": \"☐\", // any char\n\n    // if you want to avoid Unicode when copy stats — you can define replacements\n    // e.g. to convert ■■■■■■☐☐☐☐ to [======    ]\n    \"replace_stats_chars\": [[\" ■\", \" [=\"], [\"■\", \"=\"], [\"☐ \", \" ] \"], [\"☐\", \" \"]]\n}\n```\n\n## Introduction to PlainTasks Screencast\n[![](http://i46.tinypic.com/9ggbd3.png)](https://www.youtube.com/watch?v=LsfGhjRVJwk)\n\n## PlainTasks for other editors\nNOTE: These are separate projects, maintained by some awesome developers other than us.\n- [Atom: Tasks plugin](https://atom.io/packages/tasks)\n- [Vim: Plaintasks.vim](https://github.com/elentok/plaintasks.vim)\n- [Visual Studio Code: To Do Tasks](https://github.com/sandy081/vscode-todotasks)\n- [Visual Studio Code: Todo+](https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-todo-plus)\n\n\n## Contributors\n- @antonioriva\n- @binaryannie\n- [Ben Johnson](https://github.com/benjohnson)\n- [Craig Campbell](https://github.com/ccampbell)\n- [Dominique Wahli](https://github.com/bizoo)\n- [Germán M. Bravo](https://github.com/Kronuz)\n- [Hindol Adhya](https://github.com/Hindol)\n- [Jesse Robertson](https://github.com/speilberg0)\n- [Marc Schlaich](https://github.com/schlamar)\n- [Michael McFarland](https://github.com/mikedmcfarland)\n- [Pablo Barrios](https://github.com/sauron)\n- [Stanislav Parfeniuk](https://github.com/travmik)\n- [Vova Kolobok](https://github.com/vovkkk)\n\nYou can contribute on [github](https://github.com/aziz/PlainTasks)\n\n\n## Inspiration\n- Thanks to Chagel for the [iTodo plugin](https://github.com/chagel/itodo).  \n- Thanks to [Taskmate for TextMate](https://github.com/svenfuchs/taskmate).\n- Thanks to [TaskPaper Mac application from hogbaysoftware.com](http://www.hogbaysoftware.com/products/taskpaper)\n\n## License\nCopyright 2012-2013 [Allen Bargi](https://twitter.com/aziz). Licensed under the MIT License\n"
        },
        {
          "name": "Symbol List.tmPreferences",
          "type": "blob",
          "size": 0.5634765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>name</key>\n  <string>Symbol List</string>\n  <key>scope</key>\n  <string>text.todo keyword</string>\n  <key>settings</key>\n  <dict>\n    <key>showInSymbolList</key>\n    <integer>1</integer>\n    <key>symbolTransformation</key>\n    <string>s/^(\\s*.+)\\s*:\\s?((\\s*?@\\w+(\\([^()]*\\))?)*)\\s*$/$1 $2/</string>\n  </dict>\n  <key>uuid</key>\n  <string>46F06118-8CE4-4C95-A4C4-4507E056A597</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "TODO.todo",
          "type": "blob",
          "size": 6.8916015625,
          "content": "TODO:\n ☐ make file links highlighted @feature\n ☐ use control+shift+A to only archive the first level tasks (or current level of indent) @feature\n ☐ in archive list, add date in front of done tasks (e.g. 2012-09-06 14:41 Ξ some task) @feature\n ☐ tags @today ✭ᴛᴏᴅᴀʏ @feature\n ☐ marking all nested tasks as done should mark the parent as done?\n ☐ other themes?\n ☐ mouse interaction @feature\n\n＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\nArchive:\n ✔ make urls highlighted @feature @done (15-05-18 08:15) @project(TODO)\n ✔ export to html/ preview in browser @feature @done (14-04-28 19:28)\n ✔ accept multiple bullet types at the same time @feature @done (14-01-23 15:39)\n ✔ taskpaper compatibility @improvement @done (14-01-23 15:38)\n ✔ include in the task the date and time of creation (using a shortcut key) @feature @done (13-10-25 14:47) @project(TODO)\n ✔ in archive list, adding newly archived items to the bottom or top should be configurable @feature @done (13-10-23 21:21) @project(TODO)\n ✔ Maybe after mark the task as done calculate (the end time - start time) @done (13-10-22 17:50) @project(TODO)\n ✔ in archive list, prefix task with project name, add specific scope for project prefixes @option @done (13-07-09 13:08) @project(TODO)\n ✔ indenting notes below tasks? @done (13-07-08 00:59) @project(TODO)\n ✔ when archiving, if a task has some note, those notes should also move to archive section @feature @done (13-06-25 11:49) @project(TODO)\n ✔ in archive list, postfix task with project name, add specific scope for project postfixes @feature @done (13-02-08 17:33) @project(TODO)\n ✔ make links clickable @feature @done (13-01-22 12:59)\n ✘ make gif animation @docs @cancelled (13-01-22 23:25)\n ✔ document cancelled tasks and margin before task bullet option @done (12-11-28 04:53)\n ✔ change all keymaps to use new commands @done (12-11-28 04:46)\n ✔ margin before task bullet should be customizable @improvement @done (12-11-16 21:05)\n ✔ add link to repo @documentation @done (12-09-23 11:36)\n ✔ tags with () @bug @done (12-09-23 11:28)\n ✔ can not make a new task on empty line @bug @important @done (12-09-23 11:26)\n ✔ improved support for custom date format @done (Thursday September 20, 2012 11:41 PM)\n ✔ removed the color of tags in done tasks @improvement @done (12-09-20 23:25)\n ✔ png images for linux @done (12-09-20 22:58)\n ✔ tags with dot can not be highlighted @bug @1.2 @done (12-09-20 22:58)\n ✔ can not add multiple tags anymore! WTF! @bug @done (12-09-20 22:46)\n ✔ adding ☑ to the complete_bullet list @done (12-09-20 22:29)\n ✔ removed mouse interation for now @bug @done (12-09-19 23:39)\n ✔ do not move the position of cursor when pressing cmd+D @improvement @done (12-09-18 22:05)\n ✔ mouse click support to toggle a task state @feature @done (12-09-18 13:32)\n ✔ write better readme @done (12-09-11 14:09)\n ✔ make an empty line gap between arhived task @bug @done (12-09-11 10:37)\n ✔ removed packages/tasks from settings and code @improvement @done (12-09-11 10:25)\n ✔ open tutorial after install @improvement @done (12-09-18 13:28)\n ✔ add to package manager @done (12-09-11 10:02)\n ✔ rename to PlainTasks @done (12-09-10 23:45)\n ✔ archiving with custom/none date format @bug @done (12-09-08 10:54)\n ✔ archiving with done tag false @bug @done (12-09-08 10:54)\n ✔ in archive list, make sure there's a line break at the end of list @improvement @done (12-09-08 10:42)\n ✔ in archive list, indented task should be unindented @bug @done (12-09-08 08:25)\n ✔ more tests on linux and windows @later @done (12-09-07 22:05)\n ✔ tags should not be italic @bug @done (12-09-07 22:05)\n ✔ make done tag optional @feature @done (12-09-07 15:54)\n ✔ make date labling optional @feature @done (12-09-07 14:56)\n ✔ now that date format is optional: just @done should be suffice @bug @done (12-09-07 14:56)\n ✔ being able to work with done tasks with no @done and date at the end @improvement @done (12-09-07 14:56)\n ✔ add ico format for windows @later @done (2012-09-06 15:02)\n ✔ BUG: having single qoutes (') or > in task do not allow archiving @IMP @done (2012-09-06 14:22)\n ✔ make date formating configurable @feature @done (2012-09-05 05:28)\n ✔ notes + make them foldable @feature @done (2012-09-05 05:19)\n ✔ add separator @feature @done (2012-09-05 05:11)\n ✔ BUG: command+enter on project name line @IMP @done (2012-09-05 04:49)\n ✔ add to settings menu @feature @done (2012-09-05 03:55)\n ✔ always show the folding icons (or force to show folding icons) @improvement @done (2012-09-05 03:43)\n ✔ refactor code @later @done (2012-09-05 03:26)\n ✔ BUG: archiving when there is no done item cause an empty line on top of Archive section @done (2012-09-05 03:23)\n ✔ BUG: repeating Archive put empty line sometimes @IMP @done (2012-09-05 03:22)\n ✔ can not archive if there is no empty line at the end of todo list @IMP @done (2012-09-04 19:33)\n ✔ fade the line above archive @done (2012-04-26 00:55)\n ✔ publish custom icon files @done (2012-04-20 22:50)\n ✔ use this full width low line (＿) for separator @done (2012-04-20 22:49)\n ✔ temporary fold with -------------- @done (2012-04-15 20:36)\n ✔ BUG: when no bullet detected after inseting bullet text should be deselected @done (2012-04-15 20:33)\n ✔ BUG: foldable projects @alaki @fine @done (2012-04-15 20:06)\n ✔ auto indent by one space to get folable projects @done (2012-04-15 20:05)\n ✔ FEATURE: support tags @tag @important @something @done (2012-04-15 19:54)\n ✔ Style normal tags @done (2012-04-15 19:54)\n ✔ BUG: keybindings should only work in todo context @done (2012-04-15 15:05)\n ✔ Platform Specific Settings @done (2012-03-29 09:17)\n ✔ FEATURE: activate project lists for cmd+R @done (2012-03-29 00:04)\n ✔ BUG: test it on windows (with default font and consolas) @done (2012-03-28 23:36)\n ✔ BUG: add shortcut keys for other systems @done (2012-03-28 18:28)\n ✔ BUG: include notebook.theme in the plugin @done (2012-03-28 00:08)\n ✔ BUG: indent task to have project folding @done (2012-03-27 17:08)\n ✔ escape bullet for regex to allow + @done (2012-03-27 17:05)\n ✔ have both command+i and command+enter for new @done (2012-03-27 16:57)\n ✔ have command+shift+A for archive @done (2012-03-27 16:57)\n ✔ Archive done tasks at the end of the file make it fold by defalt @done (2012-03-27 01:01)\n ✔ add archive section if it does not exists @done (2012-03-27 01:14)\n ✔ TODO: make line bulleted if it's not on cmd+I (take care of done and indent) @done (2012-03-26 14:48)\n ✔ TODO: customizeble bullets through settings @done (2012-03-25 20:57)\n ✔ TODO: add emdash and endash to the list of bullets – — @done (2012-03-25 20:34)\n ✔ TODO: add filetypes: .taskpaper , .tasks @done (2012-03-25 19:56)\n ✔ TODO: Allow custom filetypese types to be added @done (2012-03-25 03:34)\n ✔ TODO: Allow custom bullet punctuations @done (2012-03-25 11:10)\n ✔ TODO: Respect indentations @done (2012-03-25 03:34)\n"
        },
        {
          "name": "dependencies.json",
          "type": "blob",
          "size": 0.03125,
          "content": "{ \"*\": { \"*\": [ \"dateutil\" ] } }"
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "messages.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n    \"install\": \"messages/install.txt\"\n}"
        },
        {
          "name": "messages",
          "type": "tree",
          "content": null
        },
        {
          "name": "plist_parser.py",
          "type": "blob",
          "size": 10.345703125,
          "content": "#!/usr/bin/env python\n\"\"\"A `Property Lists`_ is a data representation used in Apple's Mac OS X as\na convenient way to store standard object types, such as string, number,\nboolean, and container object.\n\nThis file contains a class ``XmlPropertyListParser`` for parse\na property list file and get back a python native data structure.\n\n    :copyright: 2008 by Takanori Ishikawa <takanori.ishikawa@gmail.com>\n    :license: MIT (See LICENSE file for more details)\n\n.. _Property Lists: http://developer.apple.com/documentation/Cocoa/Conceptual/PropertyLists/\n\"\"\"\n\nimport re\nimport sys\n\n\nif sys.version_info >= (3,):\n    # Some forwards compatability\n    basestring = str\n\n\nclass PropertyListParseError(Exception):\n    \"\"\"Raised when parsing a property list is failed.\"\"\"\n    pass\n\n\nclass XmlPropertyListParser(object):\n    \"\"\"The ``XmlPropertyListParser`` class provides methods that\n    convert `Property Lists`_ objects from xml format.\n    Property list objects include ``string``, ``unicode``,\n    ``list``, ``dict``, ``datetime``, and ``int`` or ``float``.\n\n        :copyright: 2008 by Takanori Ishikawa <takanori.ishikawa@gmail.com>\n        :license: MIT License\n\n    .. _Property List: http://developer.apple.com/documentation/Cocoa/Conceptual/PropertyLists/\n    \"\"\"\n\n    def _assert(self, test, message):\n        if not test:\n            raise PropertyListParseError(message)\n\n    # ------------------------------------------------\n    # SAX2: ContentHandler\n    # ------------------------------------------------\n    def setDocumentLocator(self, locator):\n        pass\n\n    def startPrefixMapping(self, prefix, uri):\n        pass\n\n    def endPrefixMapping(self, prefix):\n        pass\n\n    def startElementNS(self, name, qname, attrs):\n        pass\n\n    def endElementNS(self, name, qname):\n        pass\n\n    def ignorableWhitespace(self, whitespace):\n        pass\n\n    def processingInstruction(self, target, data):\n        pass\n\n    def skippedEntity(self, name):\n        pass\n\n    def startDocument(self):\n        self.__stack = []\n        self.__plist = self.__key = self.__characters = None\n        # For reducing runtime type checking,\n        # the parser caches top level object type.\n        self.__in_dict = False\n\n    def endDocument(self):\n        self._assert(self.__plist is not None, \"A top level element must be <plist>.\")\n        self._assert(\n            len(self.__stack) == 0,\n            \"multiple objects at top level.\")\n\n    def startElement(self, name, attributes):\n        if name in XmlPropertyListParser.START_CALLBACKS:\n            XmlPropertyListParser.START_CALLBACKS[name](self, name, attributes)\n        if name in XmlPropertyListParser.PARSE_CALLBACKS:\n            self.__characters = []\n\n    def endElement(self, name):\n        if name in XmlPropertyListParser.END_CALLBACKS:\n            XmlPropertyListParser.END_CALLBACKS[name](self, name)\n        if name in XmlPropertyListParser.PARSE_CALLBACKS:\n            # Creates character string from buffered characters.\n            content = ''.join(self.__characters)\n            # For compatibility with ``xml.etree`` and ``plistlib``,\n            # convert text string to ascii, if possible\n            try:\n                content = content.encode('ascii')\n            except (UnicodeError, AttributeError):\n                pass\n            XmlPropertyListParser.PARSE_CALLBACKS[name](self, name, content)\n            self.__characters = None\n\n    def characters(self, content):\n        if self.__characters is not None:\n            self.__characters.append(content)\n\n    # ------------------------------------------------\n    # XmlPropertyListParser private\n    # ------------------------------------------------\n    def _push_value(self, value):\n        if not self.__stack:\n            self._assert(self.__plist is None, \"Multiple objects at top level\")\n            self.__plist = value\n        else:\n            top = self.__stack[-1]\n            #assert isinstance(top, (dict, list))\n            if self.__in_dict:\n                k = self.__key\n                if k is None:\n                    raise PropertyListParseError(\"Missing key for dictionary.\")\n                top[k] = value\n                self.__key = None\n            else:\n                top.append(value)\n\n    def _push_stack(self, value):\n        self.__stack.append(value)\n        self.__in_dict = isinstance(value, dict)\n\n    def _pop_stack(self):\n        self.__stack.pop()\n        self.__in_dict = self.__stack and isinstance(self.__stack[-1], dict)\n\n    def _start_plist(self, name, attrs):\n        self._assert(not self.__stack and self.__plist is None, \"<plist> more than once.\")\n        self._assert(attrs.get('version', '1.0') == '1.0',\n                     \"version 1.0 is only supported, but was '%s'.\" % attrs.get('version'))\n\n    def _start_array(self, name, attrs):\n        v = list()\n        self._push_value(v)\n        self._push_stack(v)\n\n    def _start_dict(self, name, attrs):\n        v = dict()\n        self._push_value(v)\n        self._push_stack(v)\n\n    def _end_array(self, name):\n        self._pop_stack()\n\n    def _end_dict(self, name):\n        if self.__key is not None:\n            raise PropertyListParseError(\"Missing value for key '%s'\" % self.__key)\n        self._pop_stack()\n\n    def _start_true(self, name, attrs):\n        self._push_value(True)\n\n    def _start_false(self, name, attrs):\n        self._push_value(False)\n\n    def _parse_key(self, name, content):\n        if not self.__in_dict:\n            raise PropertyListParseError(\"<key> element must be in <dict> element.\")\n        self.__key = content\n\n    def _parse_string(self, name, content):\n        self._push_value(content)\n\n    def _parse_data(self, name, content):\n        import base64\n        self._push_value(base64.b64decode(content))\n\n    # http://www.apple.com/DTDs/PropertyList-1.0.dtd says:\n    #\n    # Contents should conform to a subset of ISO 8601\n    # (in particular, YYYY '-' MM '-' DD 'T' HH ':' MM ':' SS 'Z'.\n    # Smaller units may be omitted with a loss of precision)\n    DATETIME_PATTERN = re.compile(r\"(?P<year>\\d\\d\\d\\d)(?:-(?P<month>\\d\\d)(?:-(?P<day>\\d\\d)(?:T(?P<hour>\\d\\d)(?::(?P<minute>\\d\\d)(?::(?P<second>\\d\\d))?)?)?)?)?Z$\")\n\n    def _parse_date(self, name, content):\n        import datetime\n\n        units = ('year', 'month', 'day', 'hour', 'minute', 'second', )\n        pattern = XmlPropertyListParser.DATETIME_PATTERN\n        match = pattern.match(content)\n        if not match:\n            raise PropertyListParseError(\"Failed to parse datetime '%s'\" % content)\n\n        groups, components = match.groupdict(), []\n        for key in units:\n            value = groups[key]\n            if value is None:\n                break\n            components.append(int(value))\n        while len(components) < 3:\n            components.append(1)\n\n        d = datetime.datetime(*components)\n        self._push_value(d)\n\n    def _parse_real(self, name, content):\n        self._push_value(float(content))\n\n    def _parse_integer(self, name, content):\n        self._push_value(int(content))\n\n    START_CALLBACKS = {\n        'plist': _start_plist,\n        'array': _start_array,\n        'dict': _start_dict,\n        'true': _start_true,\n        'false': _start_false,\n    }\n\n    END_CALLBACKS = {\n        'array': _end_array,\n        'dict': _end_dict,\n    }\n\n    PARSE_CALLBACKS = {\n        'key': _parse_key,\n        'string': _parse_string,\n        'data': _parse_data,\n        'date': _parse_date,\n        'real': _parse_real,\n        'integer': _parse_integer,\n    }\n\n    # ------------------------------------------------\n    # XmlPropertyListParser\n    # ------------------------------------------------\n    def _to_stream(self, io_or_string):\n        if isinstance(io_or_string, basestring):\n            # Creates a string stream for in-memory contents.\n            from cStringIO import StringIO\n            return StringIO(io_or_string)\n        elif hasattr(io_or_string, 'read') and callable(getattr(io_or_string, 'read')):\n            return io_or_string\n        else:\n            raise TypeError('Can\\'t convert %s to file-like-object' % type(io_or_string))\n\n    def _parse_using_etree(self, xml_input):\n        from xml.etree.cElementTree import iterparse\n\n        parser = iterparse(self._to_stream(xml_input), events=('start', 'end'))\n        self.startDocument()\n        try:\n            for action, element in parser:\n                name = element.tag\n                if action == 'start':\n                    if name in XmlPropertyListParser.START_CALLBACKS:\n                        XmlPropertyListParser.START_CALLBACKS[name](self, element.tag, element.attrib)\n                elif action == 'end':\n                    if name in XmlPropertyListParser.END_CALLBACKS:\n                        XmlPropertyListParser.END_CALLBACKS[name](self, name)\n                    if name in XmlPropertyListParser.PARSE_CALLBACKS:\n                        XmlPropertyListParser.PARSE_CALLBACKS[name](self, name, element.text or \"\")\n                    element.clear()\n        except SyntaxError as e:\n            raise PropertyListParseError(e)\n\n        self.endDocument()\n        return self.__plist\n\n    def _parse_using_sax_parser(self, xml_input):\n        from xml.sax import make_parser, xmlreader, SAXParseException\n        source = xmlreader.InputSource()\n        source.setByteStream(self._to_stream(xml_input))\n        reader = make_parser()\n        reader.setContentHandler(self)\n        try:\n            reader.parse(source)\n        except SAXParseException as e:\n            raise PropertyListParseError(e)\n\n        return self.__plist\n\n    def parse(self, xml_input):\n        \"\"\"Parse the property list (`.plist`, `.xml, for example) ``xml_input``,\n        which can be either a string or a file-like object.\n\n        >>> parser = XmlPropertyListParser()\n        >>> parser.parse(r'<plist version=\"1.0\">'\n        ...              r'<dict><key>Python</key><string>.py</string></dict>'\n        ...              r'</plist>')\n        {'Python': '.py'}\n        \"\"\"\n        try:\n            return self._parse_using_etree(xml_input)\n        except ImportError:\n            # No xml.etree.ccElementTree found.\n            return self._parse_using_sax_parser(xml_input)\n\n\ndef parse_string(io_or_string):\n    \"\"\"Parse a string (or a stream) and return the resulting object.\n    \"\"\"\n    return XmlPropertyListParser().parse(io_or_string)\n\n\ndef parse_file(file_path):\n    \"\"\"Parse the specified file and return the resulting object.\n    \"\"\"\n    with open(file_path) as f:\n        return XmlPropertyListParser().parse(f)\n"
        },
        {
          "name": "separator.sublime-snippet",
          "type": "blob",
          "size": 0.1416015625,
          "content": "<snippet>\n  <content><![CDATA[\n--- ✄ -----------------------\n]]></content>\n  <tabTrigger>--</tabTrigger>\n  <scope>text.todo</scope>\n</snippet>\n"
        },
        {
          "name": "tasks-dark.hidden-tmTheme",
          "type": "blob",
          "size": 12,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n  <key>name</key>\n\t<string>Notebook</string>\n\t<key>settings</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#050505</string>\n\t\t\t\t<key>caret</key>\n\t\t\t\t<string>#EEEEEE</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#DDDDDD</string>\n\t\t\t\t<key>invisibles</key>\n\t\t\t\t<string>#00000040</string>\n\t\t\t\t<key>lineHighlight</key>\n\t\t\t\t<string>#99999920</string>\n\t\t\t\t<key>selection</key>\n\t\t\t\t<string>#444444</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Comment</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>comment</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#999999</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tags</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#A02E2B99</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Notes</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>notes.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#105090</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Meta</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#009911</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#CCCCCC</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#e90101</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#838383</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#555555</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancel meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#555555</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Keyword</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>keyword</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#0067CE</string>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#222222</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Archive Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.archive.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#333333</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.separator.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#333333</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#10509075</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#10509075</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>normal</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>URL</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.url</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#003e7290</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\n\t\t<!-- ======================================== -->\n\n\n\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.section.embedded</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FFFFFF4D</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>String</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#E9D92BBF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Number</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.numeric</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#9AFF42BF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Built-in constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.language</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>User-defined constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character, constant.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.language, variable.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#6693525C</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Entity</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character.entity</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#8FE6D3BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Storage</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>storage</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#A69C86BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Class name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.type.class, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#1D368F</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Inherited class</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.inherited-class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.function</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function argument</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.parameter</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#B1A68FBF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag attribute</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.attribute-name</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library function</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.function, support.constant.property-value.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#F9559B6E</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.constant</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library class/type</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.type, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.other.variable</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Invalid</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>invalid</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#BF363B</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Today</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.today</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#EADD4E</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>High</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.high</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF7F00</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Low</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.low</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#222222</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ffffff</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Critical</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF0000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>uuid</key>\n\t<string>FE674D9A-27B3-4A5A-84F7-1CC67BD29531</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "tasks-eighties-colored.hidden-tmTheme",
          "type": "blob",
          "size": 11.7333984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\t<dict>\n\t\t<key>name</key><string>Notebook</string>\n\t\t<key>settings</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#2d2d2d</string>\n\t\t\t\t\t<key>caret</key><string>#d3d0c8</string>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c8</string>\n\t\t\t\t\t<key>invisibles</key><string>#EAE3C9</string>\n\t\t\t\t\t<key>lineHighlight</key><string>#464646</string>\n\t\t\t\t\t<key>selection</key><string>#464646</string>\n\t\t\t\t\t<key>popupCss</key>\n\t\t\t\t\t<string><![CDATA[\n\t\t\t\t\t\thtml, body {color: #d3d0c8; background-color: #2d2d2d}\n\t\t\t\t\t\ta {color: #ACC6F6;}\n\t\t\t\t\t]]></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Comment</string>\n\t\t\t\t<key>scope</key><string>comment</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t\t<key>foreground</key><string>#81EDA2</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Tags</string>\n\t\t\t\t<key>scope</key><string>meta.tag.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#FFD72F</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Notes</string>\n\t\t\t\t<key>scope</key><string>notes.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#ACC6F6</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Meta</string>\n\t\t\t\t<key>scope</key><string>meta</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Done bullet</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bullet.completed</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#99cc99</string>\n\t\t\t\t\t<key>fontStyle</key><string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Pending bullet</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bullet.pending</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#6699cc</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Cancelled bullet</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bullet.cancelled</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#f2777a</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Cancelled task</string>\n\t\t\t\t<key>scope</key><string>meta.item.todo.cancelled</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#EB7875</string>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Done meta info</string>\n\t\t\t\t<key>scope</key><string>meta.tag.todo.completed</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Cancel meta info</string>\n\t\t\t\t<key>scope</key><string>meta.tag.todo.cancelled</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Keyword</string>\n\t\t\t\t<key>scope</key><string>keyword</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#f99157</string>\n\t\t\t\t\t<key>background</key><string>#00000010</string>\n\t\t\t\t\t<key>fontStyle</key><string>bold underline</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Archive Separator</string>\n\t\t\t\t<key>scope</key><string>meta.punctuation.archive.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#515151</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Separator</string>\n\t\t\t\t<key>scope</key><string>meta.punctuation.separator.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#515151</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Italic punctuation</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.italic</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Italic</string>\n\t\t\t\t<key>scope</key><string>todo.italic</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Bold punctuation</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bold</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t\t<key>fontStyle</key><string>normal</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Bold</string>\n\t\t\t\t<key>scope</key><string>todo.bold</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>URL</string>\n\t\t\t\t<key>scope</key>\n\t\t\t\t<string>todo.url</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key>\n\t\t\t\t\t<string>#003e7290</string>\n\t\t\t\t\t<key>fontStyle</key>\n\t\t\t\t\t<string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Punctuation</string>\n\t\t\t\t<key>scope</key><string>punctuation.section.embedded</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#FFFFFF4D</string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>String</string>\n\t\t\t\t<key>scope</key><string>string</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#E9D92BBF</string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Number</string>\n\t\t\t\t<key>scope</key><string>constant.numeric</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#9AFF42BF</string>\n\t\t\t\t\t<key>foreground</key><string>#000000BF</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Built-in constant</string>\n\t\t\t\t<key>scope</key><string>constant.language</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#65D8E6BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>User-defined constant</string>\n\t\t\t\t<key>scope</key><string>constant.character, constant.other</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#65D8E6BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Variable</string>\n\t\t\t\t<key>scope</key><string>variable.language, variable.other</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#6693525C</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Entity</string>\n\t\t\t\t<key>scope</key><string>constant.character.entity</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#8FE6D3BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Storage</string>\n\t\t\t\t<key>scope</key><string>storage</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#A69C86BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Class name</string>\n\t\t\t\t<key>scope</key><string>entity.name.type.class, support.class</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#1D368F</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Inherited class</string>\n\t\t\t\t<key>scope</key><string>entity.other.inherited-class</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Function name</string>\n\t\t\t\t<key>scope</key><string>entity.name.function</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>underline</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Function argument</string>\n\t\t\t\t<key>scope</key><string>variable.parameter</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Tag name</string>\n\t\t\t\t<key>scope</key><string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#B1A68FBF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#000000BF</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Tag attribute</string>\n\t\t\t\t<key>scope</key><string>entity.other.attribute-name</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>underline</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library function</string>\n\t\t\t\t<key>scope</key><string>support.function, support.constant.property-value.css</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#F9559B6E</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library constant</string>\n\t\t\t\t<key>scope</key><string>support.constant</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library class/type</string>\n\t\t\t\t<key>scope</key><string>support.type, support.class</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict/>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library variable</string>\n\t\t\t\t<key>scope</key><string>support.other.variable</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict/>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Invalid</string>\n\t\t\t\t<key>scope</key><string>invalid</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#BF363B</string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Today</string>\n\t\t\t\t<key>scope</key><string>string.other.tag.todo.today</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#99cc99</string>\n\t\t\t\t\t<key>foreground</key><string>#2d2d2d</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>High</string>\n\t\t\t\t<key>scope</key><string>string.other.tag.todo.high</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#f99157</string>\n\t\t\t\t\t<key>foreground</key><string>#2d2d2d</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Low</string>\n\t\t\t\t<key>scope</key><string>string.other.tag.todo.low</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#d3d0c8</string>\n\t\t\t\t\t<key>foreground</key><string>#2d2d2d</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Critical</string>\n\t\t\t\t<key>scope</key><string>string.other.tag.todo.critical</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#EB7875</string>\n\t\t\t\t\t<key>foreground</key><string>#2d2d2d</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>uuid</key><string>79ffdc08-d6a6-4052-8ee6-5cc1dda4bbf6</string>\n\t</dict>\n</plist>\n"
        },
        {
          "name": "tasks-eighties-dark.hidden-tmTheme",
          "type": "blob",
          "size": 11.8349609375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n\t<dict>\n\t\t<key>name</key><string>Notebook</string>\n\t\t<key>settings</key>\n\t\t<array>\n\t\t\t<dict>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#2d2d2d</string>\n\t\t\t\t\t<key>caret</key><string>#d3d0c8</string>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c8</string>\n\t\t\t\t\t<key>invisibles</key><string>#EAE3C9</string>\n\t\t\t\t\t<key>lineHighlight</key><string>#393939</string>\n\t\t\t\t\t<key>selection</key><string>#393939</string>\n\t\t\t\t\t<key>popupCss</key>\n\t\t\t\t\t<string><![CDATA[\n\t\t\t\t\t\thtml, body {color: #d3d0c8; background-color: #2d2d2d}\n\t\t\t\t\t\ta {color: #ACC6F6;}\n\t\t\t\t\t]]></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Comment</string>\n\t\t\t\t<key>scope</key><string>comment</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t\t<key>foreground</key><string>#747369</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Tags</string>\n\t\t\t\t<key>scope</key><string>meta.tag.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#f99157</string>\n\t\t\t\t\t<key>fontStyle</key><string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Notes</string>\n\t\t\t\t<key>scope</key><string>notes.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#515151</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Meta</string>\n\t\t\t\t<key>scope</key><string>meta</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Done bullet</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bullet.completed</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#99cc99</string>\n\t\t\t\t\t<key>fontStyle</key><string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Pending bullet</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bullet.pending</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#6699cc</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Cancelled bullet</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bullet.cancelled</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#f2777a</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Cancelled task</string>\n\t\t\t\t<key>scope</key><string>meta.item.todo.cancelled</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#747369</string>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Done meta info</string>\n\t\t\t\t<key>scope</key><string>meta.tag.todo.completed</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Cancel meta info</string>\n\t\t\t\t<key>scope</key><string>meta.tag.todo.cancelled</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Keyword</string>\n\t\t\t\t<key>scope</key><string>keyword</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#f99157</string>\n\t\t\t\t\t<key>background</key><string>#00000010</string>\n\t\t\t\t\t<key>fontStyle</key><string>bold underline</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Archive Separator</string>\n\t\t\t\t<key>scope</key><string>meta.punctuation.archive.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#515151</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Separator</string>\n\t\t\t\t<key>scope</key><string>meta.punctuation.separator.todo</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#515151</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Italic punctuation</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.italic</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Italic</string>\n\t\t\t\t<key>scope</key><string>todo.italic</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>italic</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Bold punctuation</string>\n\t\t\t\t<key>scope</key><string>punctuation.definition.bold</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key><string>#d3d0c850</string>\n\t\t\t\t\t<key>fontStyle</key><string>normal</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Bold</string>\n\t\t\t\t<key>scope</key><string>todo.bold</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>URL</string>\n\t\t\t\t<key>scope</key>\n\t\t\t\t<string>todo.url</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>foreground</key>\n\t\t\t\t\t<string>#003e7290</string>\n\t\t\t\t\t<key>fontStyle</key>\n\t\t\t\t\t<string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Punctuation</string>\n\t\t\t\t<key>scope</key><string>punctuation.section.embedded</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#FFFFFF4D</string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>String</string>\n\t\t\t\t<key>scope</key><string>string</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#E9D92BBF</string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Number</string>\n\t\t\t\t<key>scope</key><string>constant.numeric</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#9AFF42BF</string>\n\t\t\t\t\t<key>foreground</key><string>#000000BF</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Built-in constant</string>\n\t\t\t\t<key>scope</key><string>constant.language</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#65D8E6BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>User-defined constant</string>\n\t\t\t\t<key>scope</key><string>constant.character, constant.other</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#65D8E6BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Variable</string>\n\t\t\t\t<key>scope</key><string>variable.language, variable.other</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#6693525C</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Entity</string>\n\t\t\t\t<key>scope</key><string>constant.character.entity</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#8FE6D3BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Storage</string>\n\t\t\t\t<key>scope</key><string>storage</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#A69C86BF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Class name</string>\n\t\t\t\t<key>scope</key><string>entity.name.type.class, support.class</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#1D368F</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Inherited class</string>\n\t\t\t\t<key>scope</key><string>entity.other.inherited-class</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Function name</string>\n\t\t\t\t<key>scope</key><string>entity.name.function</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>underline</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Function argument</string>\n\t\t\t\t<key>scope</key><string>variable.parameter</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Tag name</string>\n\t\t\t\t<key>scope</key><string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#B1A68FBF</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#000000BF</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Tag attribute</string>\n\t\t\t\t<key>scope</key><string>entity.other.attribute-name</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string>underline</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library function</string>\n\t\t\t\t<key>scope</key><string>support.function, support.constant.property-value.css</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#F9559B6E</string>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF1A</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library constant</string>\n\t\t\t\t<key>scope</key><string>support.constant</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>fontStyle</key><string></string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library class/type</string>\n\t\t\t\t<key>scope</key><string>support.type, support.class</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict/>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Library variable</string>\n\t\t\t\t<key>scope</key><string>support.other.variable</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict/>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Invalid</string>\n\t\t\t\t<key>scope</key><string>invalid</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#BF363B</string>\n\t\t\t\t\t<key>foreground</key><string>#FFFFFF</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key><string>Today</string>\n\t\t\t\t<key>scope</key><string>string.other.tag.todo.today</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key><string>#f2f0ce</string>\n\t\t\t\t\t<key>foreground</key><string>#ffcc66</string>\n\t\t\t\t\t<key>fontStyle</key><string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>High</string>\n\t\t\t\t<key>scope</key>\n\t\t\t\t<string>string.other.tag.todo.high</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key>\n\t\t\t\t\t<string>#FF7F00</string>\n\t\t\t\t\t<key>foreground</key>\n\t\t\t\t\t<string>#000000</string>\n\t\t\t\t\t<key>fontStyle</key>\n\t\t\t\t\t<string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>Low</string>\n\t\t\t\t<key>scope</key>\n\t\t\t\t<string>string.other.tag.todo.low</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key>\n\t\t\t\t\t<string>#222222</string>\n\t\t\t\t\t<key>foreground</key>\n\t\t\t\t\t<string>#ffffff</string>\n\t\t\t\t\t<key>fontStyle</key>\n\t\t\t\t\t<string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t\t<dict>\n\t\t\t\t<key>name</key>\n\t\t\t\t<string>Critical</string>\n\t\t\t\t<key>scope</key>\n\t\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t\t\t<key>settings</key>\n\t\t\t\t<dict>\n\t\t\t\t\t<key>background</key>\n\t\t\t\t\t<string>#FF0000</string>\n\t\t\t\t\t<key>foreground</key>\n\t\t\t\t\t<string>#000000</string>\n\t\t\t\t\t<key>fontStyle</key>\n\t\t\t\t\t<string>bold</string>\n\t\t\t\t</dict>\n\t\t\t</dict>\n\t\t</array>\n\t\t<key>uuid</key><string>79ffdc08-d6a6-4052-8ee6-5cc1dda4bbf6</string>\n\t</dict>\n</plist>\n"
        },
        {
          "name": "tasks-gray.hidden-tmTheme",
          "type": "blob",
          "size": 12.2958984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Notebook</string>\n\t<key>settings</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#e6e6e6</string>\n\t\t\t\t<key>caret</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000050</string>\n\t\t\t\t<key>invisibles</key>\n\t\t\t\t<string>#00000040</string>\n\t\t\t\t<key>lineHighlight</key>\n\t\t\t\t<string>#FFFFE588</string>\n\t\t\t\t<key>selection</key>\n\t\t\t\t<string>#00000029</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Comment</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>comment</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000090</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tags</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#A02E2B99</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Notes</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>notes.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#858266</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Meta</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00723e</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000066</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#b60101</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#68654F</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000050</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancel meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000050</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Keyword</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>keyword</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#bc644a</string>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#00000010</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Archive Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.archive.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000044</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.separator.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000044</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000044</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000044</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>normal</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>URL</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.url</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#003e7290</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\n\t\t<!-- ======================================== -->\n\n\n\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.section.embedded</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FFFFFF4D</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>String</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#E9D92BBF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Number</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.numeric</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#9AFF42BF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Built-in constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.language</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>User-defined constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character, constant.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.language, variable.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#6693525C</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Entity</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character.entity</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#8FE6D3BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Storage</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>storage</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#A69C86BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Class name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.type.class, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#1D368F</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Inherited class</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.inherited-class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.function</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function argument</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.parameter</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#B1A68FBF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag attribute</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.attribute-name</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library function</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.function, support.constant.property-value.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#F9559B6E</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.constant</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library class/type</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.type, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.other.variable</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Invalid</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>invalid</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#BF363B</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Today</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.today</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#EADD4E</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>High</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.high</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF7F00</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Low</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.low</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#222222</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ffffff</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Critical</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF0000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>uuid</key>\n\t<string>FE674D9A-27B3-4A5A-84F7-1CC67BD29531</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "tasks-monokai.hidden-tmTheme",
          "type": "blob",
          "size": 16.7978515625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>name</key>\n    <string>Monokai</string>\n    <key>settings</key>\n    <array>\n        <dict>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#222222</string>\n                <key>caret</key>\n                <string>#F8F8F0</string>\n                <key>findHighlight</key>\n                <string>#FFE792</string>\n                <key>findHighlightForeground</key>\n                <string>#000000</string>\n                <key>foreground</key>\n                <string>#F8F8F2</string>\n                <key>invisibles</key>\n                <string>#3B3A32</string>\n                <key>lineHighlight</key>\n                <string>#333333</string>\n                <key>selection</key>\n                <string>#444444</string>\n                <key>selectionBorder</key>\n                <string>#1c1c1c</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Comment</string>\n            <key>scope</key>\n            <string>comment</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>italic</string>\n                <key>foreground</key>\n                <string>#75715E</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Tags</string>\n            <key>scope</key>\n            <string>meta.tag.todo</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#66D9EF</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Notes</string>\n            <key>scope</key>\n            <string>notes.todo</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#75715E</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Meta</string>\n            <key>scope</key>\n            <string>meta</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>italic</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Done bullet</string>\n            <key>scope</key>\n            <string>punctuation.definition.bullet.completed</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#A6E22E</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Cancelled bullet</string>\n            <key>scope</key>\n            <string>punctuation.definition.bullet.cancelled</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#aa1f2a</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Cancelled task</string>\n            <key>scope</key>\n            <string>meta.item.todo.cancelled</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>italic</string>\n                <key>foreground</key>\n                <string>#75715E</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Done meta info</string>\n            <key>scope</key>\n            <string>meta.tag.todo.completed</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#d3d0c850</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Cancel meta info</string>\n            <key>scope</key>\n            <string>meta.tag.todo.cancelled</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#d3d0c850</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Keyword</string>\n            <key>scope</key>\n            <string>keyword</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#00000010</string>\n                <key>fontStyle</key>\n                <string>bold underline</string>\n                <key>foreground</key>\n                <string>#F92672</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Archive Separator</string>\n            <key>scope</key>\n            <string>meta.punctuation.archive.todo</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#75715E</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Separator</string>\n            <key>scope</key>\n            <string>meta.punctuation.separator.todo</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#75715E</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Italic punctuation</string>\n            <key>scope</key>\n            <string>punctuation.definition.italic</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#d3d0c850</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Italic</string>\n            <key>scope</key>\n            <string>todo.italic</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>italic</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bold punctuation</string>\n            <key>scope</key>\n            <string>punctuation.definition.bold</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>normal</string>\n                <key>foreground</key>\n                <string>#d3d0c850</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Bold</string>\n            <key>scope</key>\n            <string>todo.bold</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>bold</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>URL</string>\n            <key>scope</key>\n            <string>todo.url</string>\n            <key>settings</key>\n            <dict>\n                <key>foreground</key>\n                <string>#003e7290</string>\n                <key>fontStyle</key>\n                <string>bold</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Punctuation</string>\n            <key>scope</key>\n            <string>punctuation.section.embedded</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#FFFFFF4D</string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>String</string>\n            <key>scope</key>\n            <string>string</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#E9D92BBF</string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Number</string>\n            <key>scope</key>\n            <string>constant.numeric</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#9AFF42BF</string>\n                <key>foreground</key>\n                <string>#000000BF</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Built-in constant</string>\n            <key>scope</key>\n            <string>constant.language</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#65D8E6BF</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>User-defined constant</string>\n            <key>scope</key>\n            <string>constant.character, constant.other</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#65D8E6BF</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Variable</string>\n            <key>scope</key>\n            <string>variable.language, variable.other</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#6693525C</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Entity</string>\n            <key>scope</key>\n            <string>constant.character.entity</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#8FE6D3BF</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Storage</string>\n            <key>scope</key>\n            <string>storage</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#A69C86BF</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Class name</string>\n            <key>scope</key>\n            <string>entity.name.type.class, support.class</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#1D368F</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Inherited class</string>\n            <key>scope</key>\n            <string>entity.other.inherited-class</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Function name</string>\n            <key>scope</key>\n            <string>entity.name.function</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>underline</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Function argument</string>\n            <key>scope</key>\n            <string>variable.parameter</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Tag name</string>\n            <key>scope</key>\n            <string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#B1A68FBF</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#000000BF</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Tag attribute</string>\n            <key>scope</key>\n            <string>entity.other.attribute-name</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string>underline</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Library function</string>\n            <key>scope</key>\n            <string>support.function, support.constant.property-value.css</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#F9559B6E</string>\n                <key>fontStyle</key>\n                <string></string>\n                <key>foreground</key>\n                <string>#FFFFFF1A</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Library constant</string>\n            <key>scope</key>\n            <string>support.constant</string>\n            <key>settings</key>\n            <dict>\n                <key>fontStyle</key>\n                <string></string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Library class/type</string>\n            <key>scope</key>\n            <string>support.type, support.class</string>\n            <key>settings</key>\n            <dict/>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Library variable</string>\n            <key>scope</key>\n            <string>support.other.variable</string>\n            <key>settings</key>\n            <dict/>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Invalid</string>\n            <key>scope</key>\n            <string>invalid</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#ad271c</string>\n                <key>foreground</key>\n                <string>#FFFFFF</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Today</string>\n            <key>scope</key>\n            <string>string.other.tag.todo.today</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#222222</string>\n                <key>fontStyle</key>\n                <string>bold</string>\n                <key>foreground</key>\n                <string>#AE81FF</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>High</string>\n            <key>scope</key>\n            <string>string.other.tag.todo.high</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#FF7F00</string>\n                <key>foreground</key>\n                <string>#000000</string>\n                <key>fontStyle</key>\n                <string>bold</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Low</string>\n            <key>scope</key>\n            <string>string.other.tag.todo.low</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#222222</string>\n                <key>foreground</key>\n                <string>#ffffff</string>\n                <key>fontStyle</key>\n                <string>bold</string>\n            </dict>\n        </dict>\n        <dict>\n            <key>name</key>\n            <string>Critical</string>\n            <key>scope</key>\n            <string>string.other.tag.todo.critical</string>\n            <key>settings</key>\n            <dict>\n                <key>background</key>\n                <string>#FF0000</string>\n                <key>foreground</key>\n                <string>#000000</string>\n                <key>fontStyle</key>\n                <string>bold</string>\n            </dict>\n        </dict>\n    </array>\n    <key>uuid</key>\n    <string>8971e2ed-93fd-4500-be34-17c47d8988b5</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "tasks-solarized-dark.hidden-tmTheme",
          "type": "blob",
          "size": 12.42578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Notebook</string>\n\t<key>settings</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t  <key>background</key>\n\t\t\t  <string>#002b36</string><!-- base03 -->\n\t\t\t  <key>caret</key>\n\t\t\t  <string>#93a1a1</string><!-- base1 -->\n\t\t\t  <key>foreground</key>\n\t\t\t  <string>#93a1a1</string><!-- base1 -->\n\t\t\t  <key>invisibles</key>\n\t\t\t  <string>#EAE3C9</string>\n\t\t\t  <key>lineHighlight</key>\n\t\t\t  <string>#073642</string><!-- base02 -->\n\t\t\t  <key>selection</key>\n\t\t\t  <string>#073642</string><!-- base02 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Comment</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>comment</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#657b83</string><!-- base00 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tags</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#CB4B16</string><!-- orange -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Notes</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>notes.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#586e75</string><!-- base01 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Meta</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#859900</string><!-- green -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#268bd2</string><!-- blue -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#dc322f</string><!-- red -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#657b83</string><!-- base00 -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancel meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Keyword</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>keyword</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#CB4B16</string><!-- orange -->\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#00000010</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Archive Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.archive.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#586e75</string><!-- base01 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.separator.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#586e75</string><!-- base01 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>normal</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>URL</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.url</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#003e7290</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\n\t\t<!-- ======================================== -->\n\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.section.embedded</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FFFFFF4D</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>String</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#E9D92BBF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Number</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.numeric</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#9AFF42BF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Built-in constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.language</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>User-defined constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character, constant.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.language, variable.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#6693525C</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Entity</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character.entity</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#8FE6D3BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Storage</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>storage</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#A69C86BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Class name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.type.class, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#1D368F</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Inherited class</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.inherited-class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.function</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function argument</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.parameter</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#B1A68FBF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag attribute</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.attribute-name</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library function</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.function, support.constant.property-value.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#F9559B6E</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.constant</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library class/type</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.type, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.other.variable</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Invalid</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>invalid</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#BF363B</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Today</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.today</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FDF6E3</string><!-- base3 - background -->\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#b58900</string><!-- yellow -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>High</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.high</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF7F00</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Low</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.low</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#222222</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ffffff</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Critical</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF0000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>uuid</key>\n\t<string>FE674D9A-27B3-4A5A-84F7-1CC67BD29531</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "tasks-solarized-light.hidden-tmTheme",
          "type": "blob",
          "size": 12.43359375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Notebook</string>\n\t<key>settings</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t  <key>background</key>\n\t\t\t  <string>#FDF6E3</string><!-- base3 -->\n\t\t\t  <key>caret</key>\n\t\t\t  <string>#000000</string><!-- (nonstandard; black) -->\n\t\t\t  <key>foreground</key>\n\t\t\t  <string>#586E75</string><!-- base01 -->\n\t\t\t  <key>invisibles</key>\n\t\t\t  <string>#EAE3C9</string>\n\t\t\t  <key>lineHighlight</key>\n\t\t\t  <string>#EEE8D5</string><!-- base2 -->\n\t\t\t  <key>selection</key>\n\t\t\t  <string>#EEE8D5</string><!-- base2 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Comment</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>comment</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#839496</string><!-- base0 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tags</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#CB4B16</string><!-- orange -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Notes</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>notes.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a1</string><!-- base1 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Meta</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#859900</string><!-- green -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#268bd2</string><!-- blue -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#dc322f</string><!-- red -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#839496</string><!-- base0 -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancel meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Keyword</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>keyword</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#CB4B16</string><!-- orange -->\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#00000010</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Archive Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.archive.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a1</string><!-- base1 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.separator.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a1</string><!-- base1 -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#93a1a150</string><!-- base1 - 50% opacity - nonstandard -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>normal</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>URL</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.url</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#003e7290</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\n\t\t<!-- ======================================== -->\n\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.section.embedded</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FFFFFF4D</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>String</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#E9D92BBF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Number</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.numeric</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#9AFF42BF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Built-in constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.language</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>User-defined constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character, constant.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.language, variable.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#6693525C</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Entity</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character.entity</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#8FE6D3BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Storage</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>storage</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#A69C86BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Class name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.type.class, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#1D368F</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Inherited class</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.inherited-class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.function</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function argument</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.parameter</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#B1A68FBF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag attribute</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.attribute-name</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library function</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.function, support.constant.property-value.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#F9559B6E</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.constant</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library class/type</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.type, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.other.variable</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Invalid</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>invalid</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#BF363B</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Today</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.today</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FDF6E3</string><!-- base3 - background -->\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#b58900</string><!-- yellow -->\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>High</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.high</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF7F00</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Low</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.low</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#222222</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ffffff</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Critical</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF0000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>uuid</key>\n\t<string>FE674D9A-27B3-4A5A-84F7-1CC67BD29531</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "tasks.hidden-tmTheme",
          "type": "blob",
          "size": 12.29296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>name</key>\n\t<string>Notebook</string>\n\t<key>settings</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#efe9b7</string>\n\t\t\t\t<key>caret</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000050</string>\n\t\t\t\t<key>invisibles</key>\n\t\t\t\t<string>#00000040</string>\n\t\t\t\t<key>lineHighlight</key>\n\t\t\t\t<string>#F7DC8688</string>\n\t\t\t\t<key>selection</key>\n\t\t\t\t<string>#00000029</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Comment</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>comment</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000090</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tags</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#A02E2B99</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Notes</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>notes.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#858266</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Meta</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00723e</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000066</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled bullet</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bullet.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#b60101</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Pending task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.pending</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancelled task</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.item.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#68654F</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Done meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.completed</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000050</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Cancel meta info</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.tag.todo.cancelled</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000050</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Keyword</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>keyword</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#bc644a</string>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#00000010</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Archive Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.archive.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000044</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Separator</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>meta.punctuation.separator.todo</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#00000044</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ded9a6</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Italic</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.italic</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>italic</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.definition.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ded9a6</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>normal</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Bold</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.bold</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>URL</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>todo.url</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#003e7290</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\n\n\t\t<!-- ======================================== -->\n\n\n\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Punctuation</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>punctuation.section.embedded</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FFFFFF4D</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>String</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#E9D92BBF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Number</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.numeric</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#9AFF42BF</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Built-in constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.language</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>User-defined constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character, constant.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#65D8E6BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.language, variable.other</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#6693525C</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Entity</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>constant.character.entity</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#8FE6D3BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Storage</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>storage</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#A69C86BF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Class name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.type.class, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#1D368F</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Inherited class</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.inherited-class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.function</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Function argument</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>variable.parameter</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag name</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.name.tag, entity.other.attribute-name.class.css, entity.other.attribute-name.id.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#B1A68FBF</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000BF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Tag attribute</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>entity.other.attribute-name</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>underline</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library function</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.function, support.constant.property-value.css</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#F9559B6E</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF1A</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library constant</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.constant</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string></string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library class/type</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.type, support.class</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Library variable</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>support.other.variable</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict/>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Invalid</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>invalid</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#BF363B</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#FFFFFF</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Today</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.today</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#EADD4E</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>High</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.high</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF7F00</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Low</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.low</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#222222</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#ffffff</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t\t<dict>\n\t\t\t<key>name</key>\n\t\t\t<string>Critical</string>\n\t\t\t<key>scope</key>\n\t\t\t<string>string.other.tag.todo.critical</string>\n\t\t\t<key>settings</key>\n\t\t\t<dict>\n\t\t\t\t<key>background</key>\n\t\t\t\t<string>#FF0000</string>\n\t\t\t\t<key>foreground</key>\n\t\t\t\t<string>#000000</string>\n\t\t\t\t<key>fontStyle</key>\n\t\t\t\t<string>bold</string>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n\t<key>uuid</key>\n\t<string>FE674D9A-27B3-4A5A-84F7-1CC67BD29531</string>\n</dict>\n</plist>\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}