{
  "metadata": {
    "timestamp": 1736559559579,
    "page": 170,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "inventree/InvenTree",
      "stars": 4578,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devops",
          "type": "tree",
          "content": null
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1376953125,
          "content": "# .git-blame-ignore-revs\n# Code Structure refactor https://github.com/inventree/InvenTree/pull/5582\n0bace3f3afaa213c63b5dcc70103f0d232637a9a\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.115234375,
          "content": "* text=auto\n\n*.py text\n*.md text\n*.html text\n*.txt text\n*.yml text\n*.yaml text\n*.conf text\n*.sh text eol=lf\n*.js text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.677734375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# Distribution / packaging\n.Python\nenv/\ninventree-env/\n./build/\n.cache/\ndevelop-eggs/\ndist/\nbin/\nlib64\npyvenv.cfg\nshare/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n*.DS_Store\n\n# Django stuff:\n*.log\nlocal_settings.py\n*.sqlite\n*.sqlite3\n*.sqlite3-journal\n*.backup\n*.old\n\n# Files used for testing\ninventree-demo-dataset/\ninventree-data/\n\n# Local static and media file storage (only when running in development mode)\ninventree_media\ninventree_static\nstatic_i18n\n\n# Local config file\nconfig.yaml\nplugins.txt\n\n# Default data file\ndata.json\n*.json.tmp\n*.tmp.json\n\n# Key file\nsecret_key.txt\n\n# IDE / development files\n.idea/\n*.code-workspace\n.bash_history\n.DS_Store\n\n# https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n.vscode/*\n#!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n#!.vscode/extensions.json\n#!.vscode/*.code-snippets\n\n# Coverage reports\n.coverage\nhtmlcov/\n\n# Temporary javascript files (used for testing)\njs_tmp/\n\n# Development files\ndev/\ndata/\nenv/\n\n# Locale stats file\nsrc/backend/InvenTree/InvenTree/locale_stats.json\nsrc/backend/InvenTree/InvenTree/licenses.txt\n\n# Logs\nsrc/backend/InvenTree/logs.json\nsrc/backend/InvenTree/logs.log\n\n# node.js\nnode_modules/\n\n# maintenance locker\nmaintenance_mode_state.txt\n\n# plugin dev directory\nsrc/backend/InvenTree/plugins/\n\n# Compiled translation files\n*.mo\nmessages.ts\n\n# Generated API schema file\napi.yaml\n\n# web frontend (static files)\nsrc/backend/InvenTree/web/static\nInvenTree/web/static\n\n# Generated docs files\ndocs/schema.yml\ndocs/docs/api/*.yml\ndocs/docs/api/schema/*.yml\ninventree_settings.json\n"
        },
        {
          "name": ".pkgr.yml",
          "type": "blob",
          "size": 1.1962890625,
          "content": "name: inventree\ndescription: Open Source Inventory Management System\nhomepage: https://inventree.org\nnotifications: true\nbuildpack: https://github.com/mjmair/heroku-buildpack-python#v216-mjmair\nenv:\n  - STACK=heroku-20\n  - DISABLE_COLLECTSTATIC=1\n  - INVENTREE_DB_ENGINE=sqlite3\n  - INVENTREE_DB_NAME=database.sqlite3\n  - INVENTREE_PLUGINS_ENABLED\n  - INVENTREE_MEDIA_ROOT=/opt/inventree/media\n  - INVENTREE_STATIC_ROOT=/opt/inventree/static\n  - INVENTREE_BACKUP_DIR=/opt/inventree/backup\n  - INVENTREE_PLUGIN_FILE=/opt/inventree/plugins.txt\n  - INVENTREE_CONFIG_FILE=/opt/inventree/config.yaml\n  - APP_REPO=inventree/InvenTree\nbefore_install: contrib/packager.io/preinstall.sh\nafter_install: contrib/packager.io/postinstall.sh\nbefore_remove: contrib/packager.io/preinstall.sh\nbefore:\n  - contrib/packager.io/before.sh\ndependencies:\n  - curl\n  - \"python3.9 | python3.10 | python3.11\"\n  - \"python3.9-venv | python3.10-venv | python3.11-venv\"\n  - \"python3.9-dev | python3.10-dev | python3.11-dev\"\n  - python3-pip\n  - python3-cffi\n  - python3-brotli\n  - python3-wheel\n  - libpango-1.0-0\n  - libharfbuzz0b\n  - libpangoft2-1.0-0\n  - gettext\n  - nginx\n  - jq\n  - \"libffi7 | libffi8\"\ntargets:\n  ubuntu-20.04: true\n  debian-11: true\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.9833984375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nexclude: |\n    (?x)^(\n        src/backend/InvenTree/InvenTree/static/.*|\n        src/backend/InvenTree/locale/.*|\n        src/frontend/src/locales/.* |\n        .*/migrations/.* |\n        src/frontend/yarn.lock\n    )$\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: mixed-line-ending\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.3\n    hooks:\n    - id: ruff-format\n      args: [--preview]\n    - id: ruff\n      args: [\n        --fix,\n        # --unsafe-fixes,\n        --preview\n      ]\n-   repo: https://github.com/astral-sh/uv-pre-commit\n    rev: 0.5.1\n    hooks:\n      - id: pip-compile\n        name: pip-compile requirements-dev.in\n        args: [src/backend/requirements-dev.in, -o, src/backend/requirements-dev.txt, --no-strip-extras, --generate-hashes]\n        files: src/backend/requirements-dev\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements.txt\n        args: [src/backend/requirements.in, -o, src/backend/requirements.txt, --no-strip-extras, --generate-hashes]\n        files: src/backend/requirements\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements.txt\n        args: [contrib/dev_reqs/requirements.in, -o, contrib/dev_reqs/requirements.txt, --no-strip-extras, --generate-hashes]\n        files: contrib/dev_reqs/requirements\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements.txt\n        args: [docs/requirements.in, -o, docs/requirements.txt, --no-strip-extras, --generate-hashes]\n        files: docs/requirements\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements.txt\n        args: [contrib/container/requirements.in, -o, contrib/container/requirements.txt, --python-version=3.11, --no-strip-extras, --generate-hashes]\n        files: contrib/container/requirements\\.(in|txt)$\n-   repo: https://github.com/Riverside-Healthcare/djLint\n    rev: v1.36.1\n    hooks:\n      - id: djlint-django\n- repo: https://github.com/codespell-project/codespell\n  rev: v2.3.0\n  hooks:\n  - id: codespell\n    additional_dependencies:\n      - tomli\n    exclude: >\n      (?x)^(\n          docs/docs/stylesheets/.*|\n          docs/docs/javascripts/.*|\n          docs/docs/webfonts/.* |\n          src/frontend/src/locales/.* |\n          pyproject.toml |\n          src/frontend/vite.config.ts |\n      )$\n-   repo: https://github.com/biomejs/pre-commit\n    rev: \"v0.5.0\"\n    hooks:\n    -   id: biome-check\n        additional_dependencies: [\"@biomejs/biome@1.9.4\"]\n        files: ^src/frontend/.*\\.(js|ts|tsx)$\n-   repo: https://github.com/gitleaks/gitleaks\n    rev: v8.21.2\n    hooks:\n    -   id: gitleaks\n#-   repo: https://github.com/jumanjihouse/pre-commit-hooks\n#    rev: 3.0.0\n#    hooks:\n#    -   id: shellcheck\n-   repo: https://github.com/isidentical/teyit\n    rev: 0.4.3\n    hooks:\n    -   id: teyit\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.2998046875,
          "content": "### Contributing to InvenTree\n\nHi there, thank you for your interest in contributing!\nPlease read our contribution guidelines, before submitting your first pull request to the InvenTree codebase.\n\n### Project File Structure\n\nThe InvenTree project is split into two main components: frontend and backend. This source is located in the `src` directory. All other files are used for project management, documentation, and testing.\n\n```bash\nInvenTree/\n├─ .devops/                            # Files for Azure DevOps\n├─ .github/                            # Files for GitHub\n│  ├─ actions/                         # Reused actions\n│  ├─ ISSUE_TEMPLATE/                  # Templates for issues and pull requests\n│  ├─ workflows/                       # CI/CD flows\n│  ├─ scripts/                         # CI scripts\n├─ .vscode/                            # Settings for Visual Code IDE\n├─ assets/                             # General project assets\n├─ contrib/                            # Files needed for deployments\n│  ├─ container/                       # Files related to building container images\n│  ├─ installer/                       # Files needed to build single-file installer\n│  ├─ packager.io/                     # Files needed for Debian/Ubuntu packages\n├─ docs/                               # Directory for documentation / General helper files\n│  ├─ ci/                              # CI for documentation\n│  ├─ docs/                            # Source for documentation\n├─ src/                                # Source for application\n│  ├─ backend/                         # Directory for backend parts\n│  │  ├─ InvenTree/                    # Source for backend\n│  │  ├─ requirements.txt              # Dependencies for backend\n│  │  ├─ package.json                  # Dependencies for backend HTML linting\n│  ├─ frontend/                        # Directory for frontend parts\n│  │  ├─ src/                          # Source for frontend\n│  │  │  ├─ main.tsx                   # Entry point for frontend\n│  │  ├─ tests/                        # Tests for frontend\n│  │  ├─ netlify.toml                  # Settings for frontend previews (Netlify)\n│  │  ├─ package.json                  # Dependencies for frontend\n│  │  ├─ playwright.config.ts          # Settings for frontend tests\n│  │  ├─ tsconfig.json                 # Settings for frontend compilation\n├─ .pkgr.yml                           # Build definition for Debian/Ubuntu packages\n├─ .pre-commit-config.yaml             # Code formatter/linter configuration\n├─ CONTRIBUTING.md                     # Contribution guidelines and overview\n├─ Procfile                            # Process definition for Debian/Ubuntu packages\n├─ README.md                           # General project information and overview\n├─ runtime.txt                         # Python runtime settings for Debian/Ubuntu packages build\n├─ SECURITY.md                         # Project security policy\n├─ tasks.py                            # Action definitions for development, testing and deployment\n```\n\nRefer to our [contribution guidelines](https://docs.inventree.org/en/latest/develop/contributing/) for more information!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0537109375,
          "content": "MIT License\n\nCopyright (c) 2017 - InvenTree Developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.416015625,
          "content": "# Web process: gunicorn\nweb: env/bin/gunicorn --chdir $APP_HOME/src/backend/InvenTree -c src/backend/InvenTree/gunicorn.conf.py InvenTree.wsgi -b 0.0.0.0:$PORT\n# Worker process: qcluster\nworker: env/bin/python src/backend/InvenTree/manage.py qcluster\n# Invoke commands\ninvoke: echo \"\" | echo \"\" && . env/bin/activate && invoke\n# CLI: Provided for backwards compatibility\ncli: echo \"\" | echo \"\" && . env/bin/activate && invoke\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.2734375,
          "content": "<div align=\"center\">\n  <img src=\"assets/images/logo/inventree.png\" alt=\"InvenTree logo\" width=\"200\" height=\"auto\" />\n  <h1>InvenTree</h1>\n  <p>Open Source Inventory Management System </p>\n\n<!-- Badges -->\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/license/MIT)![GitHub tag (latest SemVer)](https://img.shields.io/github/v/tag/inventree/inventree)\n![CI](https://github.com/inventree/inventree/actions/workflows/qc_checks.yaml/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/inventree/badge/?version=latest)](https://inventree.readthedocs.io/en/latest/?badge=latest)\n![Docker Build](https://github.com/inventree/inventree/actions/workflows/docker.yaml/badge.svg)\n[![Netlify Status](https://api.netlify.com/api/v1/badges/9bbb2101-0a4d-41e7-ad56-b63fb6053094/deploy-status)](https://app.netlify.com/sites/inventree/deploys)\n\n[![OpenSSF Best Practices](https://bestpractices.coreinfrastructure.org/projects/7179/badge)](https://bestpractices.coreinfrastructure.org/projects/7179)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/inventree/InvenTree/badge)](https://securityscorecards.dev/viewer/?uri=github.com/inventree/InvenTree)\n[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=inventree_InvenTree&metric=sqale_rating)](https://sonarcloud.io/summary/new_code?id=inventree_InvenTree)\n\n[![codecov](https://codecov.io/gh/inventree/InvenTree/graph/badge.svg?token=9DZRGUUV7B)](https://codecov.io/gh/inventree/InvenTree)\n[![Crowdin](https://badges.crowdin.net/inventree/localized.svg)](https://crowdin.com/project/inventree)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/m/inventree/inventree)\n[![Docker Pulls](https://img.shields.io/docker/pulls/inventree/inventree)](https://hub.docker.com/r/inventree/inventree)\n\n[![GitHub Org's stars](https://img.shields.io/github/stars/inventree?style=social)](https://github.com/inventree/InvenTree/)\n[![Twitter Follow](https://img.shields.io/twitter/follow/inventreedb?style=social)](https://twitter.com/inventreedb)\n[![Subreddit subscribers](https://img.shields.io/reddit/subreddit-subscribers/inventree?style=social)](https://www.reddit.com/r/InvenTree/)\n[![Mastdon](https://img.shields.io/badge/dynamic/json?label=Mastodon&query=followers_count&url=https%3A%2F%2Fchaos.social%2Fapi%2Fv1%2Faccounts%2Flookup%3Facct=InvenTree&logo=mastodon&style=social)](https://chaos.social/@InvenTree)\n\n<h4>\n    <a href=\"https://demo.inventree.org/\">View Demo</a>\n  <span> · </span>\n    <a href=\"https://docs.inventree.org/en/latest/\">Documentation</a>\n  <span> · </span>\n    <a href=\"https://github.com/inventree/InvenTree/issues/new?template=bug_report.md&title=[BUG]\">Report Bug</a>\n  <span> · </span>\n    <a href=\"https://github.com/inventree/InvenTree/issues/new?template=feature_request.md&title=[FR]\">Request Feature</a>\n  </h4>\n</div>\n\n<!-- About the Project -->\n## :star2: About the Project\n\nInvenTree is an open-source Inventory Management System which provides powerful low-level stock control and part tracking. The core of the InvenTree system is a Python/Django database backend which provides an admin interface (web-based) and a REST API for interaction with external interfaces and applications. A powerful plugin system provides support for custom applications and extensions.\n\nCheck out [our website](https://inventree.org) for more details.\n\n<!-- Roadmap -->\n### :compass: Roadmap\n\nWant to see what we are working on? Check out the [roadmap tag](https://github.com/inventree/InvenTree/issues?q=is%3Aopen+is%3Aissue+label%3Aroadmap) and [horizon milestone](https://github.com/inventree/InvenTree/milestone/42).\n\n<!-- Integration -->\n### :hammer_and_wrench: Integration\n\nInvenTree is designed to be **extensible**, and provides multiple options for **integration** with external applications or addition of custom plugins:\n\n* [InvenTree API](https://docs.inventree.org/en/latest/api/api/)\n* [Python module](https://docs.inventree.org/en/latest/api/python/python/)\n* [Plugin interface](https://docs.inventree.org/en/latest/extend/plugins)\n* [Third party tools](https://docs.inventree.org/en/latest/extend/integrate)\n\n<!-- TechStack -->\n### :space_invader: Tech Stack\n\n<details>\n  <summary>Server</summary>\n  <ul>\n    <li><a href=\"https://www.python.org/\">Python</a></li>\n    <li><a href=\"https://www.djangoproject.com/\">Django</a></li>\n    <li><a href=\"https://www.django-rest-framework.org/\">DRF</a></li>\n    <li><a href=\"https://django-q.readthedocs.io/\">Django Q</a></li>\n    <li><a href=\"https://docs.allauth.org/\">Django-Allauth</a></li>\n  </ul>\n</details>\n\n<details>\n<summary>Database</summary>\n  <ul>\n    <li><a href=\"https://www.postgresql.org/\">PostgreSQL</a></li>\n    <li><a href=\"https://www.mysql.com/\">MySQL</a></li>\n    <li><a href=\"https://www.sqlite.org/\">SQLite</a></li>\n    <li><a href=\"https://redis.io/\">Redis</a></li>\n  </ul>\n</details>\n\n<details>\n  <summary>Client</summary>\n  <ul>\n    <li><a href=\"https://react.dev/\">React</a></li>\n    <li><a href=\"https://lingui.dev/\">Lingui</a></li>\n    <li><a href=\"https://reactrouter.com/\">React Router</a></li>\n    <li><a href=\"https://tanstack.com/query/\">TanStack Query</a></li>\n    <li><a href=\"https://github.com/pmndrs/zustand\">Zustand</a></li>\n    <li><a href=\"https://mantine.dev/\">Mantine</a></li>\n    <li><a href=\"https://icflorescu.github.io/mantine-datatable/\">Mantine Data Table</a></li>\n    <li><a href=\"https://codemirror.net/\">CodeMirror</a></li>\n  </ul>\n</details>\n\n<details>\n<summary>DevOps</summary>\n  <ul>\n    <li><a href=\"https://hub.docker.com/r/inventree/inventree\">Docker</a></li>\n    <li><a href=\"https://crowdin.com/project/inventree\">Crowdin</a></li>\n    <li><a href=\"https://app.codecov.io/gh/inventree/InvenTree\">Codecov</a></li>\n    <li><a href=\"https://sonarcloud.io/project/overview?id=inventree_InvenTree\">SonarCloud</a></li>\n    <li><a href=\"https://packager.io/gh/inventree/InvenTree\">Packager.io</a></li>\n  </ul>\n</details>\n\n<!-- Getting Started -->\n## \t:toolbox: Deployment / Getting Started\n\nThere are several options to deploy InvenTree.\n\n<div align=\"center\"><h4>\n    <a href=\"https://docs.inventree.org/en/latest/start/docker/\">Docker</a>\n    <span> · </span>\n    <a href=\"https://inventree.org/digitalocean\"><img src=\"https://www.deploytodo.com/do-btn-blue-ghost.svg\" alt=\"Deploy to DO\" width=\"auto\" height=\"40\" /></a>\n    <span> · </span>\n    <a href=\"https://docs.inventree.org/en/latest/start/install/\">Bare Metal</a>\n</h4></div>\n\nSingle line install - read [the docs](https://docs.inventree.org/en/latest/start/installer/) for supported distros and details about the function:\n```bash\nwget -qO install.sh https://get.inventree.org && bash install.sh\n```\n\nRefer to the [getting started guide](https://docs.inventree.org/en/latest/start/install/) for a full set of installation and setup instructions.\n\n<!-- Mobile App -->\n## \t:iphone: Mobile App\n\nInvenTree is supported by a [companion mobile app](https://docs.inventree.org/app/) which allows users access to stock control information and functionality.\n\n<div align=\"center\"><h4>\n    <a href=\"https://play.google.com/store/apps/details?id=inventree.inventree_app\">Android Play Store</a>\n     <span> · </span>\n    <a href=\"https://apps.apple.com/au/app/inventree/id1581731101#?platform=iphone\">Apple App Store</a>\n</h4></div>\n\n<!-- Contributing -->\n## :wave: Contributing\n\nContributions are welcomed and encouraged. Please help to make this project even better! Refer to the [contribution page](CONTRIBUTING.md).\n\n<!-- Translation -->\n## :scroll: Translation\n\nNative language translation of the InvenTree web application is [community contributed via crowdin](https://crowdin.com/project/inventree). **Contributions are welcomed and encouraged**.\n\n<!-- Sponsor -->\n## :money_with_wings: Sponsor\n\nIf you use InvenTree and find it to be useful, please consider [sponsoring the project](https://github.com/sponsors/inventree).\n\n<!-- Acknowledgments -->\n## :gem: Acknowledgements\n\nWe want to acknowledge [PartKeepr](https://github.com/partkeepr/PartKeepr) as a valuable predecessor and inspiration.\nFind a full list of used third-party libraries in [our documentation](https://docs.inventree.org/en/latest/credits/).\n\n## :heart: Support\n\n<p>This project is supported by the following sponsors:</p>\n\n<p align=\"center\">\n<a href=\"https://github.com/MartinLoeper\"><img src=\"https://github.com/MartinLoeper.png\" width=\"60px\" alt=\"Martin Löper\" /></a>\n<a href=\"https://github.com/lippoliv\"><img src=\"https://github.com/lippoliv.png\" width=\"60px\" alt=\"Oliver Lippert\" /></a>\n<a href=\"https://github.com/lfg-seth\"><img src=\"https://github.com/lfg-seth.png\" width=\"60px\" alt=\"Seth Smith\" /></a>\n<a href=\"https://github.com/snorkrat\"><img src=\"https://github.com/snorkrat.png\" width=\"60px\" alt=\"\" /></a>\n<a href=\"https://github.com/spacequest-ltd\"><img src=\"https://github.com/spacequest-ltd.png\" width=\"60px\" alt=\"SpaceQuest Ltd\" /></a>\n<a href=\"https://github.com/appwrite\"><img src=\"https://github.com/appwrite.png\" width=\"60px\" alt=\"Appwrite\" /></a>\n<a href=\"https://github.com/PricelessToolkit\"><img src=\"https://github.com/PricelessToolkit.png\" width=\"60px\" alt=\"\" /></a>\n<a href=\"https://github.com/cabottech\"><img src=\"https://github.com/cabottech.png\" width=\"60px\" alt=\"Cabot Technologies\" /></a>\n<a href=\"https://github.com/markus-k\"><img src=\"https://github.com/markus-k.png\" width=\"60px\" alt=\"Markus Kasten\" /></a>\n<a href=\"https://github.com/jefffhaynes\"><img src=\"https://github.com/jefffhaynes.png\" width=\"60px\" alt=\"Jess Haynes\" /></a>\n</p>\n\n<p>With ongoing resources provided by:</p>\n\n<p align=\"center\">\n  <a href=\"https://depot.dev?utm_source=inventree\"><img src=\"https://depot.dev/badges/built-with-depot.svg\" alt=\"Built with Depot\" /></a>\n  <a href=\"https://inventree.org/digitalocean\">\n    <img src=\"https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/SVG/DO_Logo_horizontal_blue.svg\" width=\"201px\" alt=\"Servers by Digital Ocean\">\n  </a>\n  <a href=\"https://www.netlify.com\"> <img src=\"https://www.netlify.com/v3/img/components/netlify-color-bg.svg\" alt=\"Deploys by Netlify\" /> </a>\n  <a href=\"https://crowdin.com\"> <img src=\"https://crowdin.com/images/crowdin-logo.svg\" alt=\"Translation by Crowdin\" /> </a>\n</p>\n\n\n<!-- License -->\n## :warning: License\n\nDistributed under the [MIT](https://choosealicense.com/licenses/mit/) License. See [LICENSE.txt](https://github.com/inventree/InvenTree/blob/master/LICENSE) for more information.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.771484375,
          "content": "# Security Policy\n\nThe InvenTree team take all security vulnerabilities seriously. Thank you for improving the security of our open source software.\nWe appreciate your efforts and responsible disclosure and will make every effort to acknowledge your contributions.\n\n## Reporting a Vulnerability\n\nPlease report security vulnerabilities by emailing the InvenTree team at:\n\n```\nsecurity@inventree.org\n```\n\nSomeone from the InvenTree development team will acknowledge your email as soon as possible, and indicate the next steps in handling your security report.\n\n\nThe team will endeavour to keep you informed of the progress towards a fix for the issue, and subsequent release to the stable and development code branches. Where possible, the issue will be resolved within 90 days of reporting.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "biome.json",
          "type": "blob",
          "size": 0.8818359375,
          "content": "{\n\t\"$schema\": \"https://biomejs.dev/schemas/1.9.4/schema.json\",\n\t\"javascript\": {\n\t\t\"formatter\": {\n\t\t\t\"quoteStyle\": \"single\",\n\t\t\t\"jsxQuoteStyle\": \"single\",\n\t\t\t\"trailingCommas\": \"none\",\n\t\t\t\"indentStyle\": \"space\"\n\t\t}\n\t},\n\t\"linter\": {\n    \"rules\": {\n\t\t\"suspicious\" : {\n\t\t\t\"noExplicitAny\": \"off\",\n\t\t\t\"noDoubleEquals\": \"off\",\n\t\t\t\"noArrayIndexKey\": \"off\",\n\t\t\t\"useDefaultSwitchClauseLast\": \"off\"\n\t\t},\n\t\t\"style\": {\n\t\t\t\"noUselessElse\": \"off\",\n\t\t\t\"noNonNullAssertion\": \"off\",\n\t\t\t\"noParameterAssign\": \"off\"\n\t\t}, \"correctness\":{\n\t\t\t\"useExhaustiveDependencies\": \"off\",\n\t\t\t\"useJsxKeyInIterable\": \"off\",\n\t\t\t\"noUnsafeOptionalChaining\": \"off\",\n\t\t\t\"noSwitchDeclarations\": \"off\",\n\t\t\t\"noUnusedImports\":\"error\"\n\t\t}, \"complexity\": {\n\t\t\t\"noBannedTypes\": \"off\",\n\t\t\t\"noExtraBooleanCast\": \"off\",\n\t\t\t\"noForEach\": \"off\",\n\t\t\t\"noUselessSwitchCase\": \"off\",\n\t\t\t\"useLiteralKeys\":\"off\"\n\t\t}, \"performance\": {\n\t\t\t\"noDelete\":\"off\"\n\t\t}\n\t}\n}\n}\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.6474609375,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: 82%\n    patch: off\n\ngithub_checks:\n    annotations: true\n\nflag_management:\n  default_rules:\n    carryforward: true\n  individual_flags:\n    - name: backend\n      carryforward: true\n      statuses:\n        - type: project\n          target: 85%\n    - name: migrations\n      carryforward: true\n      statuses:\n        - type: project\n          target: 40%\n    - name: pui\n      carryforward: true\n      statuses:\n        - type: project\n          target: 45%\n\ncomment:\n  require_bundle_changes: True\n  bundle_change_threshold: \"1Kb\"\n\nbundle_analysis:\n  warning_threshold: \"5%\"\n  status: \"informational\"\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "crowdin.yml",
          "type": "blob",
          "size": 0.6240234375,
          "content": "# Configuration file for Crowdin project integration\n# See: https://crowdin.com/project/inventree\n\n\"commit_message\": \"Fix: New translations %original_file_name% from Crowdin\"\n\"append_commit_message\": false\n\"preserve_hierarchy\": true\n\nfiles:\n  - source: /src/backend/InvenTree/locale/en/LC_MESSAGES/django.po\n    dest: /%original_path%/%original_file_name%\n    translation: /src/backend/InvenTree/locale/%two_letters_code%/LC_MESSAGES/%original_file_name%\n  - source: /src/frontend/src/locales/en/messages.po\n    dest: /%original_path%/%original_file_name%\n    translation: /src/frontend/src/locales/%two_letters_code%/%original_file_name%\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.6259765625,
          "content": "\n[tool.ruff]\nexclude = [\n    \".git\",\n    \"__pycache__\",\n    \"test.py\",\n    \"tests\",\n    \"venv\",\n    \"env\",\n    \".venv\",\n    \".env\",\n    \"src/backend/plugins/*\",\n]\nsrc = [\"src/backend/InvenTree\"]\n# line-length = 120\n\n[tool.ruff.lint.extend-per-file-ignores]\n\"__init__.py\" = [\"D104\"]\n\n[tool.ruff.lint]\nselect = [\"A\", \"B\", \"C\", \"C4\", \"D\", \"F\", \"I\", \"N\", \"SIM\", \"PIE\", \"PLE\", \"PLW\", \"RUF\", \"UP\", \"W\"]\n# Things that should be enabled in the future:\n# - LOG\n# - DJ # for Django stuff\n# - S # for security stuff (bandit)\n\nignore = [\n    \"PLE1205\",\n    # - PLE1205 - Too many arguments for logging format string\n    \"PLW2901\",\n    # - PLW2901 - Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target\n    \"PLW0602\",\"PLW0603\",\"PLW0604\",  # global variable things\n    \"RUF015\",\n    # - RUF015 - Prefer next({iterable}) over single element slice\n    \"RUF012\",\n    # - RUF012 - Mutable class attributes should be annotated with typing.ClassVar\n    \"SIM117\",\n    # - SIM117 - Use a single with statement with multiple contexts instead of nested with statements\n    \"SIM102\",\n    # - SIM102 - Use a single if statement instead of nested if statements\n    \"SIM105\",\n    # - SIM105 - Use contextlib.suppress({exception}) instead of try-except-pass\n    \"C901\",\n    # - C901 - function is too complex\n    \"N999\",\n    # - N802 - function name should be lowercase\n\t\"N802\",\n\t# - N806 - variable should be lowercase\n\t\"N806\",\n\t# - N812 - lowercase imported as non-lowercase\n\t\"N812\",\n    # - D417 Missing argument descriptions in the docstring\n    \"D417\",\n    # - RUF032 - decimal-from-float-literal\n    \"RUF032\",\n\n    # TODO These should be followed up and fixed\n    # - B904 Within an `except` clause, raise exceptions\n    \"B904\",\n\n    # Remove fast\n    \"A002\", \"B018\"\n]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"google\"\n\n[tool.ruff.lint.isort]\nsplit-on-trailing-comma = false\ncombine-as-imports = false\nsection-order = [\n    \"future\",\n    \"standard-library\",\n    \"django\",\n    \"third-party\",\n    \"first-party\",\n    \"local-folder\",\n]\n\n[tool.ruff.lint.isort.sections]\n\"django\" = [\"django\"]\n\n[tool.ruff.format]\nquote-style = \"single\"\nindent-style = \"space\"\nskip-magic-trailing-comma = true\nline-ending = \"auto\"\n\n[tool.uv.pip]\npython-version = \"3.9\"\nno-strip-extras=true\ngenerate-hashes=true\n\n[tool.coverage.run]\nsource = [\"src/backend/InvenTree\", \"InvenTree\"]\n\n[tool.djlint]\nignore = \"D018,H006,H008,H020,H021,H023,H025,H030,H031,T002\"\n\n[tool.isort]\nsrc_paths=[\"src/backend/InvenTree\", ]\nskip_glob =\"*/migrations/*.py\"\nknown_django=\"django\"\nsections=[\"FUTURE\",\"STDLIB\",\"DJANGO\",\"THIRDPARTY\",\"FIRSTPARTY\",\"LOCALFOLDER\"]\n\n[tool.codespell]\nignore-words-list = [\"assertIn\",\"SME\",\"intoto\",\"fitH\"]\n"
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.5517578125,
          "content": "version: 2\n\nmkdocs:\n  configuration: docs/mkdocs.yml\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n    - requirements: src/backend/requirements.txt\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.9\"\n  jobs:\n    post_install:\n      - echo \"Generating API schema file\"\n      - pip install -U invoke\n      - invoke migrate\n      - invoke int.export-settings-definitions --filename docs/inventree_settings.json --overwrite\n      - invoke dev.schema --filename docs/schema.yml --ignore-warnings\n      - python docs/extract_schema.py docs/schema.yml\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1318359375,
          "content": "# Dummy requirements file to trigger the package pipeline\n# The backend requirements file is located in src/backend/requirements.txt\n#\n"
        },
        {
          "name": "runtime.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "python-3.10.7\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 45.90234375,
          "content": "\"\"\"Tasks for automating certain actions and interacting with InvenTree from the CLI.\"\"\"\n\nimport json\nimport os\nimport pathlib\nimport re\nimport shutil\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom platform import python_version\nfrom typing import Optional\n\nfrom invoke import Collection, task\nfrom invoke.exceptions import UnexpectedExit\n\n\ndef task_exception_handler(t, v, tb):\n    \"\"\"Handle exceptions raised by tasks.\n\n    The intent here is to provide more 'useful' error messages when tasks fail.\n    \"\"\"\n    sys.__excepthook__(t, v, tb)\n\n    if t is ModuleNotFoundError:\n        mod_name = str(v).split(' ')[-1].strip(\"'\")\n\n        error(f'Error importing required module: {mod_name}')\n        warning('- Ensure the correct Python virtual environment is active')\n        warning(\n            '- Ensure that the invoke tool is installed in the active Python environment'\n        )\n        warning(\n            \"- Ensure all required packages are installed by running 'invoke install'\"\n        )\n\n\nsys.excepthook = task_exception_handler\n\n\ndef success(*args):\n    \"\"\"Print a success message to the console.\"\"\"\n    msg = ' '.join(map(str, args))\n    print(f'\\033[92m{msg}\\033[0m')\n\n\ndef error(*args):\n    \"\"\"Print an error message to the console.\"\"\"\n    msg = ' '.join(map(str, args))\n    print(f'\\033[91m{msg}\\033[0m')\n\n\ndef warning(*args):\n    \"\"\"Print a warning message to the console.\"\"\"\n    msg = ' '.join(map(str, args))\n    print(f'\\033[93m{msg}\\033[0m')\n\n\ndef info(*args):\n    \"\"\"Print an informational message to the console.\"\"\"\n    msg = ' '.join(map(str, args))\n    print(f'\\033[94m{msg}\\033[0m')\n\n\ndef checkPythonVersion():\n    \"\"\"Check that the installed python version meets minimum requirements.\n\n    If the python version is not sufficient, exits with a non-zero exit code.\n    \"\"\"\n    REQ_MAJOR = 3\n    REQ_MINOR = 9\n\n    version = sys.version.split(' ')[0]\n\n    valid = True\n\n    if sys.version_info.major < REQ_MAJOR or (\n        sys.version_info.major == REQ_MAJOR and sys.version_info.minor < REQ_MINOR\n    ):\n        valid = False\n\n    if not valid:\n        error(f'The installed python version ({version}) is not supported!')\n        error(f'InvenTree requires Python {REQ_MAJOR}.{REQ_MINOR} or above')\n        sys.exit(1)\n\n\nif __name__ in ['__main__', 'tasks']:\n    checkPythonVersion()\n\n\ndef apps():\n    \"\"\"Returns a list of installed apps.\"\"\"\n    return [\n        'build',\n        'common',\n        'company',\n        'importer',\n        'machine',\n        'order',\n        'part',\n        'report',\n        'stock',\n        'users',\n        'plugin',\n        'InvenTree',\n        'generic',\n        'machine',\n        'web',\n    ]\n\n\ndef content_excludes(\n    allow_auth: bool = True,\n    allow_tokens: bool = True,\n    allow_plugins: bool = True,\n    allow_sso: bool = True,\n):\n    \"\"\"Returns a list of content types to exclude from import/export.\n\n    Arguments:\n        allow_tokens (bool): Allow tokens to be exported/importe\n        allow_plugins (bool): Allow plugin information to be exported/imported\n        allow_sso (bool): Allow SSO tokens to be exported/imported\n    \"\"\"\n    excludes = [\n        'contenttypes',\n        'auth.permission',\n        'error_report.error',\n        'admin.logentry',\n        'django_q.schedule',\n        'django_q.task',\n        'django_q.ormq',\n        'exchange.rate',\n        'exchange.exchangebackend',\n        'common.notificationentry',\n        'common.notificationmessage',\n        'user_sessions.session',\n        'importer.dataimportsession',\n        'importer.dataimportcolumnmap',\n        'importer.dataimportrow',\n        'report.labeloutput',\n        'report.reportoutput',\n    ]\n\n    # Optionally exclude user auth data\n    if not allow_auth:\n        excludes.append('auth.group')\n        excludes.append('auth.user')\n\n    # Optionally exclude user token information\n    if not allow_tokens:\n        excludes.append('users.apitoken')\n\n    # Optionally exclude plugin information\n    if not allow_plugins:\n        excludes.append('plugin.pluginconfig')\n        excludes.append('plugin.pluginsetting')\n\n    # Optionally exclude SSO application information\n    if not allow_sso:\n        excludes.append('socialaccount.socialapp')\n        excludes.append('socialaccount.socialtoken')\n\n    return ' '.join([f'--exclude {e}' for e in excludes])\n\n\ndef localDir() -> Path:\n    \"\"\"Returns the directory of *THIS* file.\n\n    Used to ensure that the various scripts always run\n    in the correct directory.\n    \"\"\"\n    return Path(__file__).parent.resolve()\n\n\ndef managePyDir():\n    \"\"\"Returns the directory of the manage.py file.\"\"\"\n    return localDir().joinpath('src', 'backend', 'InvenTree')\n\n\ndef managePyPath():\n    \"\"\"Return the path of the manage.py file.\"\"\"\n    return managePyDir().joinpath('manage.py')\n\n\ndef run(c, cmd, path: Optional[Path] = None, pty=False, env=None):\n    \"\"\"Runs a given command a given path.\n\n    Args:\n        c: Command line context.\n        cmd: Command to run.\n        path: Path to run the command in.\n        pty (bool, optional): Run an interactive session. Defaults to False.\n    \"\"\"\n    env = env or {}\n    path = path or localDir()\n\n    try:\n        c.run(f'cd \"{path}\" && {cmd}', pty=pty, env=env)\n    except UnexpectedExit as e:\n        error(f\"ERROR: InvenTree command failed: '{cmd}'\")\n        warning('- Refer to the error messages in the log above for more information')\n        raise e\n\n\ndef manage(c, cmd, pty: bool = False, env=None):\n    \"\"\"Runs a given command against django's \"manage.py\" script.\n\n    Args:\n        c: Command line context.\n        cmd: Django command to run.\n        pty (bool, optional): Run an interactive session. Defaults to False.\n        env (dict, optional): Environment variables to pass to the command. Defaults to None.\n    \"\"\"\n    run(c, f'python3 manage.py {cmd}', managePyDir(), pty, env)\n\n\ndef yarn(c, cmd):\n    \"\"\"Runs a given command against the yarn package manager.\n\n    Args:\n        c: Command line context.\n        cmd: Yarn command to run.\n    \"\"\"\n    path = localDir().joinpath('src', 'frontend')\n    run(c, cmd, path, False)\n\n\ndef node_available(versions: bool = False, bypass_yarn: bool = False):\n    \"\"\"Checks if the frontend environment (ie node and yarn in bash) is available.\"\"\"\n\n    def ret(val, val0=None, val1=None):\n        if versions:\n            return val, val0, val1\n        return val\n\n    def check(cmd):\n        try:\n            return str(\n                subprocess.check_output([cmd], stderr=subprocess.STDOUT, shell=True),\n                encoding='utf-8',\n            ).strip()\n        except subprocess.CalledProcessError:\n            return None\n        except FileNotFoundError:\n            return None\n\n    yarn_version = check('yarn --version')\n    node_version = check('node --version')\n\n    # Either yarn is available or we don't care about yarn\n    yarn_passes = bypass_yarn or yarn_version\n\n    # Print a warning if node is available but yarn is not\n    if node_version and not yarn_passes:\n        warning(\n            'Node is available but yarn is not. Install yarn if you wish to build the frontend.'\n        )\n\n    # Return the result\n    return ret(yarn_passes and node_version, node_version, yarn_version)\n\n\ndef check_file_existence(filename: Path, overwrite: bool = False):\n    \"\"\"Checks if a file exists and asks the user if it should be overwritten.\n\n    Args:\n        filename (str): Name of the file to check.\n        overwrite (bool, optional): Overwrite the file without asking. Defaults to False.\n    \"\"\"\n    if filename.is_file() and overwrite is False:\n        response = input(\n            'Warning: file already exists. Do you want to overwrite? [y/N]: '\n        )\n        response = str(response).strip().lower()\n\n        if response not in ['y', 'yes']:\n            error('Cancelled export operation')\n            sys.exit(1)\n\n\n# Install tasks\n@task(help={'uv': 'Use UV (experimental package manager)'})\ndef plugins(c, uv=False):\n    \"\"\"Installs all plugins as specified in 'plugins.txt'.\"\"\"\n    from src.backend.InvenTree.InvenTree.config import get_plugin_file\n\n    plugin_file = get_plugin_file()\n\n    info(f\"Installing plugin packages from '{plugin_file}'\")\n\n    # Install the plugins\n    if not uv:\n        run(c, f\"pip3 install --disable-pip-version-check -U -r '{plugin_file}'\")\n    else:\n        run(c, 'pip3 install --no-cache-dir --disable-pip-version-check uv')\n        run(c, f\"uv pip install -r '{plugin_file}'\")\n\n    # Collect plugin static files\n    manage(c, 'collectplugins')\n\n\n@task(\n    help={\n        'uv': 'Use UV package manager (experimental)',\n        'skip_plugins': 'Skip plugin installation',\n    }\n)\ndef install(c, uv=False, skip_plugins=False):\n    \"\"\"Installs required python packages.\"\"\"\n    # Ensure path is relative to *this* directory\n    INSTALL_FILE = localDir().joinpath('src/backend/requirements.txt')\n\n    info(f\"Installing required python packages from '{INSTALL_FILE}'\")\n\n    if not Path(INSTALL_FILE).is_file():\n        raise FileNotFoundError(f\"Requirements file '{INSTALL_FILE}' not found\")\n\n    # Install required Python packages with PIP\n    if not uv:\n        run(\n            c,\n            'pip3 install --no-cache-dir --disable-pip-version-check -U pip setuptools',\n        )\n        run(\n            c,\n            f'pip3 install --no-cache-dir --disable-pip-version-check -U --require-hashes -r {INSTALL_FILE}',\n        )\n    else:\n        run(\n            c,\n            'pip3 install --no-cache-dir --disable-pip-version-check -U uv setuptools',\n        )\n        run(c, f'uv pip install -U --require-hashes  -r {INSTALL_FILE}')\n\n    # Run plugins install\n    if not skip_plugins:\n        plugins(c, uv=uv)\n\n    # Compile license information\n    lic_path = managePyDir().joinpath('InvenTree', 'licenses.txt')\n    run(\n        c,\n        f'pip-licenses --format=json --with-license-file --no-license-path > {lic_path}',\n    )\n\n    success('Dependency installation complete')\n\n\n@task(help={'tests': 'Set up test dataset at the end'})\ndef setup_dev(c, tests=False):\n    \"\"\"Sets up everything needed for the dev environment.\"\"\"\n    info(\"Installing required python packages from 'src/backend/requirements-dev.txt'\")\n\n    # Install required Python packages with PIP\n    run(c, 'pip3 install -U --require-hashes -r src/backend/requirements-dev.txt')\n\n    # Install pre-commit hook\n    info('Installing pre-commit for checks before git commits...')\n    run(c, 'pre-commit install')\n\n    # Update all the hooks\n    run(c, 'pre-commit autoupdate')\n\n    success('pre-commit set up complete')\n\n    # Set up test-data if flag is set\n    if tests:\n        setup_test(c)\n\n\n# Setup / maintenance tasks\n@task\ndef superuser(c):\n    \"\"\"Create a superuser/admin account for the database.\"\"\"\n    manage(c, 'createsuperuser', pty=True)\n\n\n@task\ndef rebuild_models(c):\n    \"\"\"Rebuild database models with MPTT structures.\"\"\"\n    info('Rebuilding internal database structures')\n    manage(c, 'rebuild_models', pty=True)\n\n\n@task\ndef rebuild_thumbnails(c):\n    \"\"\"Rebuild missing image thumbnails.\"\"\"\n    info('Rebuilding image thumbnails')\n    manage(c, 'rebuild_thumbnails', pty=True)\n\n\n@task\ndef clean_settings(c):\n    \"\"\"Clean the setting tables of old settings.\"\"\"\n    info('Cleaning old settings from the database')\n    manage(c, 'clean_settings')\n    success('Settings cleaned successfully')\n\n\n@task(help={'mail': \"mail of the user who's MFA should be disabled\"})\ndef remove_mfa(c, mail=''):\n    \"\"\"Remove MFA for a user.\"\"\"\n    if not mail:\n        warning('You must provide a users mail')\n        return\n\n    manage(c, f'remove_mfa {mail}')\n\n\n@task(\n    help={\n        'frontend': 'Build the frontend',\n        'clear': 'Remove existing static files',\n        'skip_plugins': 'Ignore collection of plugin static files',\n    }\n)\ndef static(c, frontend=False, clear=True, skip_plugins=False):\n    \"\"\"Copies required static files to the STATIC_ROOT directory, as per Django requirements.\"\"\"\n    if frontend and node_available():\n        frontend_trans(c)\n        frontend_build(c)\n\n    info('Collecting static files...')\n\n    cmd = 'collectstatic --no-input --verbosity 0'\n\n    if clear:\n        cmd += ' --clear'\n\n    manage(c, cmd)\n\n    # Collect plugin static files\n    if not skip_plugins:\n        manage(c, 'collectplugins')\n\n    success('Static files collected successfully')\n\n\n@task\ndef translate(c, ignore_static=False, no_frontend=False):\n    \"\"\"Rebuild translation source files. Advanced use only!\n\n    Note: This command should not be used on a local install,\n    it is performed as part of the InvenTree translation toolchain.\n    \"\"\"\n    info('Building translation files')\n\n    # Translate applicable .py / .html / .js files\n    manage(c, 'makemessages --all -e py,html,js --no-wrap')\n    manage(c, 'compilemessages')\n\n    if not no_frontend and node_available():\n        frontend_install(c)\n        frontend_trans(c)\n        frontend_build(c)\n\n    # Update static files\n    if not ignore_static:\n        static(c)\n\n    success('Translation files built successfully')\n\n\n@task(\n    help={\n        'clean': 'Clean up old backup files',\n        'path': 'Specify path for generated backup files (leave blank for default path)',\n    }\n)\ndef backup(c, clean=False, path=None):\n    \"\"\"Backup the database and media files.\"\"\"\n    info('Backing up InvenTree database...')\n\n    cmd = '--noinput --compress -v 2'\n\n    if path:\n        # Resolve the provided path\n        path = Path(path)\n        if not os.path.isabs(path):\n            path = localDir().joinpath(path).resolve()\n\n        cmd += f' -O {path}'\n\n    if clean:\n        cmd += ' --clean'\n\n    manage(c, f'dbbackup {cmd}')\n    info('Backing up InvenTree media files...')\n    manage(c, f'mediabackup {cmd}')\n\n    success('Backup completed successfully')\n\n\n@task(\n    help={\n        'path': 'Specify path to locate backup files (leave blank for default path)',\n        'db_file': 'Specify filename of compressed database archive (leave blank to use most recent backup)',\n        'media_file': 'Specify filename of compressed media archive (leave blank to use most recent backup)',\n        'ignore_media': 'Do not import media archive (database restore only)',\n        'ignore_database': 'Do not import database archive (media restore only)',\n    }\n)\ndef restore(\n    c,\n    path=None,\n    db_file=None,\n    media_file=None,\n    ignore_media=False,\n    ignore_database=False,\n):\n    \"\"\"Restore the database and media files.\"\"\"\n    base_cmd = '--noinput --uncompress -v 2'\n\n    if path:\n        # Resolve the provided path\n        path = Path(path)\n        if not os.path.isabs(path):\n            path = localDir().joinpath(path).resolve()\n\n        base_cmd += f' -I {path}'\n\n    if ignore_database:\n        info('Skipping database archive...')\n    else:\n        info('Restoring InvenTree database')\n        cmd = f'dbrestore {base_cmd}'\n\n        if db_file:\n            cmd += f' -i {db_file}'\n\n        manage(c, cmd)\n\n    if ignore_media:\n        info('Skipping media restore...')\n    else:\n        info('Restoring InvenTree media files')\n        cmd = f'mediarestore {base_cmd}'\n\n        if media_file:\n            cmd += f' -i {media_file}'\n\n        manage(c, cmd)\n\n\n@task(post=[rebuild_models, rebuild_thumbnails])\ndef migrate(c):\n    \"\"\"Performs database migrations.\n\n    This is a critical step if the database schema have been altered!\n    \"\"\"\n    info('Running InvenTree database migrations...')\n\n    # Run custom management command which wraps migrations in \"maintenance mode\"\n    manage(c, 'makemigrations')\n    manage(c, 'runmigrations', pty=True)\n    manage(c, 'migrate --run-syncdb')\n    manage(c, 'remove_stale_contenttypes --include-stale-apps --no-input', pty=True)\n\n    success('InvenTree database migrations completed')\n\n\n@task(help={'app': 'Specify an app to show migrations for (leave blank for all apps)'})\ndef showmigrations(c, app=''):\n    \"\"\"Show the migration status of the database.\"\"\"\n    manage(c, f'showmigrations {app}', pty=True)\n\n\n@task(\n    post=[clean_settings],\n    help={\n        'skip_backup': 'Skip database backup step (advanced users)',\n        'frontend': 'Force frontend compilation/download step (ignores INVENTREE_DOCKER)',\n        'no_frontend': 'Skip frontend compilation/download step',\n        'skip_static': 'Skip static file collection step',\n        'uv': 'Use UV (experimental package manager)',\n    },\n)\ndef update(\n    c,\n    skip_backup: bool = False,\n    frontend: bool = False,\n    no_frontend: bool = False,\n    skip_static: bool = False,\n    uv: bool = False,\n):\n    \"\"\"Update InvenTree installation.\n\n    This command should be invoked after source code has been updated,\n    e.g. downloading new code from GitHub.\n\n    The following tasks are performed, in order:\n\n    - install\n    - backup (optional)\n    - migrate\n    - frontend_compile or frontend_download (optional)\n    - static (optional)\n    - clean_settings\n    \"\"\"\n    info('Updating InvenTree installation...')\n\n    # Ensure required components are installed\n    install(c, uv=uv)\n\n    if not skip_backup:\n        backup(c)\n\n    # Perform database migrations\n    migrate(c)\n\n    # Stop here if we are not building/downloading the frontend\n    # If:\n    # - INVENTREE_DOCKER is set (by the docker image eg.) and not overridden by `--frontend` flag\n    # - `--no-frontend` flag is set\n    if (os.environ.get('INVENTREE_DOCKER', False) and not frontend) or no_frontend:\n        if no_frontend:\n            info('Skipping frontend update (no_frontend flag set)')\n        else:\n            info('Skipping frontend update (INVENTREE_DOCKER flag set)')\n\n        frontend = False\n        no_frontend = True\n    else:\n        info('Updating frontend...')\n        # Decide if we should compile the frontend or try to download it\n        if node_available(bypass_yarn=True):\n            frontend_compile(c)\n        else:\n            frontend_download(c)\n\n    if not skip_static:\n        static(c, frontend=not no_frontend)\n\n    success('InvenTree update complete!')\n\n\n# Data tasks\n@task(\n    help={\n        'filename': \"Output filename (default = 'data.json')\",\n        'overwrite': 'Overwrite existing files without asking first (default = False)',\n        'include_permissions': 'Include user and group permissions in the output file (default = False)',\n        'include_tokens': 'Include API tokens in the output file (default = False)',\n        'exclude_plugins': 'Exclude plugin data from the output file (default = False)',\n        'include_sso': 'Include SSO token data in the output file (default = False)',\n        'retain_temp': 'Retain temporary files (containing permissions) at end of process (default = False)',\n    }\n)\ndef export_records(\n    c,\n    filename='data.json',\n    overwrite=False,\n    include_permissions=False,\n    include_tokens=False,\n    exclude_plugins=False,\n    include_sso=False,\n    retain_temp=False,\n):\n    \"\"\"Export all database records to a file.\n\n    Write data to the file defined by filename.\n    If --overwrite is not set, the user will be prompted about overwriting an existing files.\n    If --include-permissions is not set, the file defined by filename will have permissions specified for a user or group removed.\n    If --delete-temp is not set, the temporary file (which includes permissions) will not be deleted. This file is named filename.tmp\n\n    For historical reasons, calling this function without any arguments will thus result in two files:\n    - data.json: does not include permissions\n    - data.json.tmp: includes permissions\n\n    If you want the script to overwrite any existing files without asking, add argument -o / --overwrite.\n\n    If you only want one file, add argument - d / --delete-temp.\n\n    If you want only one file, with permissions, then additionally add argument -i / --include-permissions\n    \"\"\"\n    # Get an absolute path to the file\n    target = Path(filename)\n    if not target.is_absolute():\n        target = localDir().joinpath(filename).resolve()\n\n    info(f\"Exporting database records to file '{target}'\")\n\n    check_file_existence(target, overwrite)\n\n    tmpfile = f'{target}.tmp'\n\n    excludes = content_excludes(\n        allow_tokens=include_tokens,\n        allow_plugins=not exclude_plugins,\n        allow_sso=include_sso,\n    )\n\n    cmd = f\"dumpdata --natural-foreign --indent 2 --output '{tmpfile}' {excludes}\"\n\n    # Dump data to temporary file\n    manage(c, cmd, pty=True)\n\n    info('Running data post-processing step...')\n\n    # Post-process the file, to remove any \"permissions\" specified for a user or group\n    with open(tmpfile, encoding='utf-8') as f_in:\n        data = json.loads(f_in.read())\n\n    data_out = []\n\n    if include_permissions is False:\n        for entry in data:\n            model_name = entry.get('model', None)\n\n            # Ignore any temporary settings (start with underscore)\n            if model_name in ['common.inventreesetting', 'common.inventreeusersetting']:\n                if entry['fields'].get('key', '').startswith('_'):\n                    continue\n\n            if model_name == 'auth.group':\n                entry['fields']['permissions'] = []\n\n            if model_name == 'auth.user':\n                entry['fields']['user_permissions'] = []\n\n            data_out.append(entry)\n\n    # Write the processed data to file\n    with open(target, 'w', encoding='utf-8') as f_out:\n        f_out.write(json.dumps(data_out, indent=2))\n\n    if not retain_temp:\n        info('Removing temporary files')\n        os.remove(tmpfile)\n\n    success('Data export completed')\n\n\n@task(\n    help={\n        'filename': 'Input filename',\n        'clear': 'Clear existing data before import',\n        'retain_temp': 'Retain temporary files at end of process (default = False)',\n    },\n    post=[rebuild_models, rebuild_thumbnails],\n)\ndef import_records(\n    c, filename='data.json', clear: bool = False, retain_temp: bool = False\n):\n    \"\"\"Import database records from a file.\"\"\"\n    # Get an absolute path to the supplied filename\n    target = Path(filename)\n    if not target.is_absolute():\n        target = localDir().joinpath(filename)\n\n    if not target.exists():\n        error(f\"ERROR: File '{target}' does not exist\")\n        sys.exit(1)\n\n    if clear:\n        delete_data(c, force=True)\n\n    info(f\"Importing database records from '{target}'\")\n\n    # We need to load 'auth' data (users / groups) *first*\n    # This is due to the users.owner model, which has a ContentType foreign key\n    authfile = f'{target}.auth.json'\n\n    # Pre-process the data, to remove any \"permissions\" specified for a user or group\n    datafile = f'{target}.data.json'\n\n    with open(target, encoding='utf-8') as f_in:\n        try:\n            data = json.loads(f_in.read())\n        except json.JSONDecodeError as exc:\n            error(f'ERROR: Failed to decode JSON file: {exc}')\n            sys.exit(1)\n\n    auth_data = []\n    load_data = []\n\n    for entry in data:\n        if 'model' in entry:\n            # Clear out any permissions specified for a group\n            if entry['model'] == 'auth.group':\n                entry['fields']['permissions'] = []\n\n            # Clear out any permissions specified for a user\n            if entry['model'] == 'auth.user':\n                entry['fields']['user_permissions'] = []\n\n            # Save auth data for later\n            if entry['model'].startswith('auth.'):\n                auth_data.append(entry)\n            else:\n                load_data.append(entry)\n        else:\n            warning('WARNING: Invalid entry in data file')\n            print(entry)\n\n    # Write the auth file data\n    with open(authfile, 'w', encoding='utf-8') as f_out:\n        f_out.write(json.dumps(auth_data, indent=2))\n\n    # Write the processed data to the tmp file\n    with open(datafile, 'w', encoding='utf-8') as f_out:\n        f_out.write(json.dumps(load_data, indent=2))\n\n    excludes = content_excludes(allow_auth=False)\n\n    # Import auth models first\n    info('Importing user auth data...')\n    cmd = f\"loaddata '{authfile}'\"\n    manage(c, cmd, pty=True)\n\n    # Import everything else next\n    info('Importing database records...')\n    cmd = f\"loaddata '{datafile}' -i {excludes}\"\n\n    manage(c, cmd, pty=True)\n\n    if not retain_temp:\n        info('Removing temporary files')\n        os.remove(datafile)\n        os.remove(authfile)\n\n    info('Data import completed')\n\n\n@task\ndef delete_data(c, force=False):\n    \"\"\"Delete all database records!\n\n    Warning: This will REALLY delete all records in the database!!\n    \"\"\"\n    info('Deleting all data from InvenTree database...')\n\n    if force:\n        manage(c, 'flush --noinput')\n    else:\n        manage(c, 'flush')\n\n\n@task(post=[rebuild_models, rebuild_thumbnails])\ndef import_fixtures(c):\n    \"\"\"Import fixture data into the database.\n\n    This command imports all existing test fixture data into the database.\n\n    Warning:\n        - Intended for testing / development only!\n        - Running this command may overwrite existing database data!!\n        - Don't say you were not warned...\n    \"\"\"\n    fixtures = [\n        # Build model\n        'build',\n        # Common models\n        'settings',\n        # Company model\n        'company',\n        'price_breaks',\n        'supplier_part',\n        # Order model\n        'order',\n        # Part model\n        'bom',\n        'category',\n        'params',\n        'part',\n        'test_templates',\n        # Stock model\n        'location',\n        'stock_tests',\n        'stock',\n        # Users\n        'users',\n    ]\n\n    command = 'loaddata ' + ' '.join(fixtures)\n\n    manage(c, command, pty=True)\n\n\n# Execution tasks\n@task\ndef wait(c):\n    \"\"\"Wait until the database connection is ready.\"\"\"\n    info('Waiting for database connection...')\n    return manage(c, 'wait_for_db')\n\n\n@task(\n    pre=[wait],\n    help={\n        'address': 'Server address:port (default=0.0.0.0:8000)',\n        'workers': 'Specify number of worker threads (override config file)',\n    },\n)\ndef gunicorn(c, address='0.0.0.0:8000', workers=None):\n    \"\"\"Launch a gunicorn webserver.\n\n    Note: This server will not auto-reload in response to code changes.\n    \"\"\"\n    config_file = localDir().joinpath('contrib', 'container', 'gunicorn.conf.py')\n    cmd = (\n        f'gunicorn -c {config_file} InvenTree.wsgi -b {address} --chdir {managePyDir()}'\n    )\n\n    if workers:\n        cmd += f' --workers={workers}'\n\n    info(f'Starting Gunicorn Server: {cmd}')\n    run(c, cmd, pty=True)\n\n\n@task(pre=[wait], help={'address': 'Server address:port (default=127.0.0.1:8000)'})\ndef server(c, address='127.0.0.1:8000'):\n    \"\"\"Launch a (development) server using Django's in-built webserver.\n\n    Note: This is *not* sufficient for a production installation.\n    \"\"\"\n    manage(c, f'runserver {address}', pty=True)\n\n\n@task(pre=[wait])\ndef worker(c):\n    \"\"\"Run the InvenTree background worker process.\"\"\"\n    manage(c, 'qcluster', pty=True)\n\n\n@task(post=[static, server])\ndef test_translations(c):\n    \"\"\"Add a fictional language to test if each component is ready for translations.\"\"\"\n    import django\n    from django.conf import settings\n\n    # setup django\n    base_path = Path.cwd()\n    new_base_path = pathlib.Path('InvenTree').resolve()\n    sys.path.append(str(new_base_path))\n    os.chdir(new_base_path)\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'InvenTree.settings')\n    django.setup()\n\n    # Add language\n    info('Add dummy language...')\n    manage(c, 'makemessages -e py,html,js --no-wrap -l xx')\n\n    # change translation\n    info('Fill in dummy translations...')\n\n    file_path = pathlib.Path(settings.LOCALE_PATHS[0], 'xx', 'LC_MESSAGES', 'django.po')\n    new_file_path = str(file_path) + '_new'\n\n    # compile regex\n    reg = re.compile(\n        r'[a-zA-Z0-9]{1}'  # match any single letter and number\n        + r'(?![^{\\(\\<]*[}\\)\\>])'  # that is not inside curly brackets, brackets or a tag\n        + r'(?<![^\\%][^\\(][)][a-z])'  # that is not a specially formatted variable with singles\n        + r'(?![^\\\\][\\n])'  # that is not a newline\n    )\n    last_string = ''\n\n    # loop through input file lines\n    with open(file_path, encoding='utf-8') as file_org:\n        with open(new_file_path, 'w', encoding='utf-8') as file_new:\n            for line in file_org:\n                if line.startswith('msgstr \"'):\n                    # write output -> replace regex matches with x in the read in (multi)string\n                    file_new.write(f'msgstr \"{reg.sub(\"x\", last_string[7:-2])}\"\\n')\n                    last_string = ''  # reset (multi)string\n                elif line.startswith('msgid \"'):\n                    last_string = (\n                        last_string + line\n                    )  # a new translatable string starts -> start append\n                    file_new.write(line)\n                else:\n                    if last_string:\n                        last_string = (\n                            last_string + line\n                        )  # a string is being read in -> continue appending\n                    file_new.write(line)\n\n    # change out translation files\n    file_path.rename(str(file_path) + '_old')\n    new_file_path.rename(file_path)\n\n    # compile languages\n    info('Compile languages ...')\n    manage(c, 'compilemessages')\n\n    # reset cwd\n    os.chdir(base_path)\n\n    # set env flag\n    os.environ['TEST_TRANSLATIONS'] = 'True'\n\n\n@task(\n    help={\n        'disable_pty': 'Disable PTY',\n        'runtest': 'Specify which tests to run, in format <module>.<file>.<class>.<method>',\n        'migrations': 'Run migration unit tests',\n        'report': 'Display a report of slow tests',\n        'coverage': 'Run code coverage analysis (requires coverage package)',\n    }\n)\ndef test(\n    c,\n    disable_pty=False,\n    runtest='',\n    migrations=False,\n    report=False,\n    coverage=False,\n    translations=False,\n):\n    \"\"\"Run unit-tests for InvenTree codebase.\n\n    Arguments:\n        disable_pty (bool): Disable PTY (default = False)\n        runtest (str): Specify which tests to run, in format <module>.<file>.<class>.<method> (default = '')\n        migrations (bool): Run migration unit tests (default = False)\n        report (bool): Display a report of slow tests (default = False)\n        coverage (bool): Run code coverage analysis (requires coverage package) (default = False)\n        translations (bool): Compile translations before running tests (default = False)\n\n    To run only certain test, use the argument --runtest.\n    This can filter all the way down to:\n        <module>.<file>.<class>.<method>\n\n    Example:\n        test --runtest=company.test_api\n    will run tests in the company/test_api.py file.\n    \"\"\"\n    # Run sanity check on the django install\n    manage(c, 'check')\n\n    if translations:\n        try:\n            manage(c, 'compilemessages', pty=True)\n        except Exception:\n            warning('Failed to compile translations')\n\n    pty = not disable_pty\n\n    _apps = ' '.join(apps())\n\n    cmd = 'test'\n\n    if runtest:\n        # Specific tests to run\n        cmd += f' {runtest}'\n    else:\n        # Run all tests\n        cmd += f' {_apps}'\n\n    if report:\n        cmd += ' --slowreport'\n\n    if migrations:\n        cmd += ' --tag migration_test'\n    else:\n        cmd += ' --exclude-tag migration_test'\n\n    if coverage:\n        # Run tests within coverage environment, and generate report\n        run(c, f'coverage run {managePyPath()} {cmd}')\n        run(c, 'coverage xml -i')\n    else:\n        # Run simple test runner, without coverage\n        manage(c, cmd, pty=pty)\n\n\n@task(help={'dev': 'Set up development environment at the end'})\ndef setup_test(c, ignore_update=False, dev=False, path='inventree-demo-dataset'):\n    \"\"\"Setup a testing environment.\"\"\"\n    from src.backend.InvenTree.InvenTree.config import get_media_dir\n\n    if not ignore_update:\n        update(c)\n\n    template_dir = localDir().joinpath(path)\n\n    # Remove old data directory\n    if template_dir.exists():\n        info('Removing old data ...')\n        run(c, f'rm {template_dir} -r')\n\n    # Get test data\n    info('Cloning demo dataset ...')\n    run(\n        c,\n        f'git clone https://github.com/inventree/demo-dataset {template_dir} -v --depth=1',\n    )\n\n    # Make sure migrations are done - might have just deleted sqlite database\n    if not ignore_update:\n        migrate(c)\n\n    # Load data\n    info('Loading database records ...')\n    import_records(c, filename=template_dir.joinpath('inventree_data.json'), clear=True)\n\n    # Copy media files\n    info('Copying media files ...')\n    src = template_dir.joinpath('media')\n    dst = get_media_dir()\n\n    info(f'Copying media files - \"{src}\" to \"{dst}\"')\n    shutil.copytree(src, dst, dirs_exist_ok=True)\n\n    info('Done setting up test environment...')\n\n    # Set up development setup if flag is set\n    if dev:\n        setup_dev(c)\n\n\n@task(\n    help={\n        'filename': \"Output filename (default = 'schema.yml')\",\n        'overwrite': 'Overwrite existing files without asking first (default = off/False)',\n        'no_default': 'Do not use default settings for schema (default = off/False)',\n    }\n)\ndef schema(\n    c, filename='schema.yml', overwrite=False, ignore_warnings=False, no_default=False\n):\n    \"\"\"Export current API schema.\"\"\"\n    filename = Path(filename).resolve()\n    check_file_existence(filename, overwrite)\n\n    info(f\"Exporting schema file to '{filename}'\")\n\n    cmd = f'spectacular --file {filename} --validate --color'\n\n    if not ignore_warnings:\n        cmd += ' --fail-on-warn'\n\n    envs = {}\n    if not no_default:\n        envs['INVENTREE_SITE_URL'] = (\n            'http://localhost:8000'  # Default site URL - to ensure server field is stable\n        )\n        envs['INVENTREE_PLUGINS_ENABLED'] = (\n            'False'  # Disable plugins to ensure they are kep out of schema\n        )\n        envs['INVENTREE_CURRENCY_CODES'] = (\n            'AUD,CNY,EUR,USD'  # Default currency codes to ensure they are stable\n        )\n\n    manage(c, cmd, pty=True, env=envs)\n\n    assert filename.exists()\n\n    success(f'Schema export completed: {filename}')\n\n\n@task\ndef export_settings_definitions(c, filename='inventree_settings.json', overwrite=False):\n    \"\"\"Export settings definition to a JSON file.\"\"\"\n    filename = Path(filename).resolve()\n    check_file_existence(filename, overwrite)\n\n    info(f\"Exporting settings definition to '{filename}'...\")\n    manage(c, f'export_settings_definitions {filename}', pty=True)\n\n\n@task(default=True)\ndef version(c):\n    \"\"\"Show the current version of InvenTree.\"\"\"\n    import src.backend.InvenTree.InvenTree.version as InvenTreeVersion\n    from src.backend.InvenTree.InvenTree.config import (\n        get_config_file,\n        get_media_dir,\n        get_static_dir,\n    )\n\n    # Gather frontend version information\n    _, node, yarn = node_available(versions=True)\n\n    print(\n        f\"\"\"\nInvenTree - inventree.org\nThe Open-Source Inventory Management System\\n\n\nPython paths:\nExecutable  {sys.executable}\nEnvironment {sys.prefix}\n\nInstallation paths:\nBase        {localDir()}\nConfig      {get_config_file()}\nMedia       {get_media_dir()}\nStatic      {get_static_dir()}\n\nVersions:\nPython      {python_version()}\nDjango      {InvenTreeVersion.inventreeDjangoVersion()}\nInvenTree   {InvenTreeVersion.inventreeVersion()}\nAPI         {InvenTreeVersion.inventreeApiVersion()}\nNode        {node if node else 'N/A'}\nYarn        {yarn if yarn else 'N/A'}\n\nCommit hash: {InvenTreeVersion.inventreeCommitHash()}\nCommit date: {InvenTreeVersion.inventreeCommitDate()}\"\"\"\n    )\n    if len(sys.argv) == 1 and sys.argv[0].startswith('/opt/inventree/env/lib/python'):\n        print(\n            \"\"\"\nYou are probably running the package installer / single-line installer. Please mentioned that in any bug reports!\n\nUse '--list' for a list of available commands\nUse '--help' for help on a specific command\"\"\"\n        )\n\n\n@task()\ndef frontend_check(c):\n    \"\"\"Check if frontend is available.\"\"\"\n    print(node_available())\n\n\n@task\ndef frontend_compile(c):\n    \"\"\"Generate react frontend.\n\n    Args:\n        c: Context variable\n    \"\"\"\n    info('Compiling frontend code...')\n    frontend_install(c)\n    frontend_trans(c)\n    frontend_build(c)\n    success('Frontend compilation complete')\n\n\n@task\ndef frontend_install(c):\n    \"\"\"Install frontend requirements.\n\n    Args:\n        c: Context variable\n    \"\"\"\n    info('Installing frontend dependencies')\n    yarn(c, 'yarn install')\n\n\n@task\ndef frontend_trans(c):\n    \"\"\"Compile frontend translations.\n\n    Args:\n        c: Context variable\n    \"\"\"\n    info('Compiling frontend translations')\n    yarn(c, 'yarn run extract')\n    yarn(c, 'yarn run compile')\n\n\n@task\ndef frontend_build(c):\n    \"\"\"Build frontend.\n\n    Args:\n        c: Context variable\n    \"\"\"\n    info('Building frontend')\n    yarn(c, 'yarn run build --emptyOutDir')\n\n\n@task\ndef frontend_server(c):\n    \"\"\"Start frontend development server.\n\n    Args:\n        c: Context variable\n    \"\"\"\n    info('Starting frontend development server')\n    yarn(c, 'yarn run compile')\n    yarn(c, 'yarn run dev')\n\n\n@task(\n    help={\n        'ref': 'git ref, default: current git ref',\n        'tag': 'git tag to look for release',\n        'file': 'destination to frontend-build.zip file',\n        'repo': 'GitHub repository, default: InvenTree/inventree',\n        'extract': 'Also extract and place at the correct destination, default: True',\n        'clean': 'Delete old files from InvenTree/web/static/web first, default: True',\n    }\n)\ndef frontend_download(\n    c,\n    ref=None,\n    tag=None,\n    file=None,\n    repo='InvenTree/inventree',\n    extract=True,\n    clean=True,\n):\n    \"\"\"Download a pre-build frontend from GitHub if you dont want to install nodejs on your machine.\n\n    There are 3 possibilities to install the frontend:\n    1. invoke frontend-download --ref 01f2aa5f746a36706e9a5e588c4242b7bf1996d5\n       if ref is omitted, it tries to auto detect the current git ref via `git rev-parse HEAD`.\n       Note: GitHub doesn't allow workflow artifacts to be downloaded from anonymous users, so\n             this will output a link where you can download the frontend with a signed in browser\n             and then continue with option 3\n    2. invoke frontend-download --tag 0.13.0\n       Downloads the frontend build from the releases.\n    3. invoke frontend-download --file /home/vscode/Downloads/frontend-build.zip\n       This will extract your zip file and place the contents at the correct destination\n    \"\"\"\n    import functools\n    import subprocess\n    from tempfile import NamedTemporaryFile\n    from zipfile import ZipFile\n\n    import requests\n\n    info('Downloading frontend...')\n\n    # globals\n    default_headers = {'Accept': 'application/vnd.github.v3+json'}\n\n    # helper functions\n    def find_resource(resource, key, value):\n        for obj in resource:\n            if obj[key] == value:\n                return obj\n        return None\n\n    def handle_extract(file):\n        # if no extract is requested, exit here\n        if not extract:\n            return\n\n        dest_path = managePyDir().joinpath('web', 'static', 'web')\n\n        # if clean, delete static/web directory\n        if clean:\n            shutil.rmtree(dest_path, ignore_errors=True)\n            dest_path.mkdir()\n            info(f'Cleaned directory: {dest_path}')\n\n        # unzip build to static folder\n        with ZipFile(file, 'r') as zip_ref:\n            zip_ref.extractall(dest_path)\n\n        info(f'Unzipped downloaded frontend build to: {dest_path}')\n\n    def handle_download(url):\n        # download frontend-build.zip to temporary file\n        with requests.get(\n            url, headers=default_headers, stream=True, allow_redirects=True\n        ) as response, NamedTemporaryFile(suffix='.zip') as dst:\n            response.raise_for_status()\n\n            # auto decode the gzipped raw data\n            response.raw.read = functools.partial(\n                response.raw.read, decode_content=True\n            )\n            with open(dst.name, 'wb') as f:\n                shutil.copyfileobj(response.raw, f)\n            info(f'Downloaded frontend build to temporary file: {dst.name}')\n\n            handle_extract(dst.name)\n\n    def check_already_current(tag=None, sha=None):\n        \"\"\"Check if the currently available frontend is already the requested one.\"\"\"\n        ref = 'tag' if tag else 'commit'\n\n        if tag:\n            current = managePyDir().joinpath('web', 'static', 'web', '.vite', 'tag.txt')\n        elif sha:\n            current = managePyDir().joinpath('web', 'static', 'web', '.vite', 'sha.txt')\n        else:\n            raise ValueError('Either tag or sha needs to be set')\n\n        if not current.exists():\n            warning(\n                f'Current frontend information for {ref} is not available in {current!s} - this is expected in some cases'\n            )\n            return False\n\n        current_content = current.read_text().strip()\n        ref_value = tag or sha\n        if current_content == ref_value:\n            info(f'Frontend {ref} is already `{ref_value}`')\n            return True\n        else:\n            info(\n                f'Frontend {ref} is not expected `{ref_value}` but `{current_content}` - new version will be downloaded'\n            )\n            return False\n\n    # if zip file is specified, try to extract it directly\n    if file:\n        handle_extract(file)\n        return\n\n    # check arguments\n    if ref is not None and tag is not None:\n        error('ERROR: Do not set ref and tag.')\n        return\n\n    if ref is None and tag is None:\n        try:\n            ref = subprocess.check_output(\n                ['git', 'rev-parse', 'HEAD'], encoding='utf-8'\n            ).strip()\n        except Exception:\n            # .deb Packages contain extra information in the VERSION file\n            version_file = localDir().joinpath('VERSION')\n            if not version_file.exists():\n                return\n            from dotenv import dotenv_values\n\n            content = dotenv_values(version_file)\n            if (\n                'INVENTREE_PKG_INSTALLER' in content\n                and content['INVENTREE_PKG_INSTALLER'] == 'PKG'\n            ):\n                ref = content.get('INVENTREE_COMMIT_SHA')\n                info(\n                    f'[INFO] Running in package environment, got commit \"{ref}\" from VERSION file'\n                )\n            else:\n                error(\"ERROR: Cannot get current ref via 'git rev-parse HEAD'\")\n                return\n\n    if ref is None and tag is None:\n        error('ERROR: Either ref or tag needs to be set.')\n\n    if tag:\n        tag = tag.lstrip('v')\n        try:\n            if check_already_current(tag=tag):\n                return\n            handle_download(\n                f'https://github.com/{repo}/releases/download/{tag}/frontend-build.zip'\n            )\n        except Exception as e:\n            if not isinstance(e, requests.HTTPError):\n                raise e\n            error(\n                f\"\"\"ERROR: An Error occurred. Unable to download frontend build, release or build does not exist,\ntry downloading the frontend-build.zip yourself via: https://github.com/{repo}/releases\nThen try continuing by running: invoke frontend-download --file <path-to-downloaded-zip-file>\"\"\"\n            )\n\n        return\n\n    if ref:\n        if check_already_current(sha=ref):\n            return\n        # get workflow run from all workflow runs on that particular ref\n        workflow_runs = requests.get(\n            f'https://api.github.com/repos/{repo}/actions/runs?head_sha={ref}',\n            headers=default_headers,\n        ).json()\n\n        if not (qc_run := find_resource(workflow_runs['workflow_runs'], 'name', 'QC')):\n            error(f'ERROR: Cannot find any workflow runs for current SHA {ref}')\n            return\n\n        info(\n            f'Found workflow {qc_run[\"name\"]} (run {qc_run[\"run_number\"]}-{qc_run[\"run_attempt\"]})'\n        )\n\n        # get frontend-build artifact from all artifacts available for this workflow run\n        artifacts = requests.get(\n            qc_run['artifacts_url'], headers=default_headers\n        ).json()\n        if not (\n            frontend_artifact := find_resource(\n                artifacts['artifacts'], 'name', 'frontend-build'\n            )\n        ):\n            error('[ERROR] Cannot find frontend-build.zip attachment for current sha')\n            return\n\n        info(\n            f'Found artifact {frontend_artifact[\"name\"]} with id {frontend_artifact[\"id\"]} ({frontend_artifact[\"size_in_bytes\"] / 1e6:.2f}MB).'\n        )\n\n        print(\n            f\"\"\"\nGitHub doesn't allow artifact downloads from anonymous users. Either download the following file\nvia your signed in browser, or consider using a point release download via invoke frontend-download --tag <git-tag>\n\n    Download: https://github.com/{repo}/suites/{qc_run['check_suite_id']}/artifacts/{frontend_artifact['id']} manually and\n    continue by running: invoke frontend-download --file <path-to-downloaded-zip-file>\"\"\"\n        )\n\n\n@task(\n    help={\n        'address': 'Host and port to run the server on (default: localhost:8080)',\n        'compile_schema': 'Compile the schema documentation first (default: False)',\n    }\n)\ndef docs_server(c, address='localhost:8080', compile_schema=False):\n    \"\"\"Start a local mkdocs server to view the documentation.\"\"\"\n    # Extract settings definitions\n    export_settings_definitions(\n        c, filename='docs/inventree_settings.json', overwrite=True\n    )\n\n    if compile_schema:\n        # Build the schema docs first\n        schema(c, ignore_warnings=True, overwrite=True, filename='docs/schema.yml')\n        run(c, 'python docs/extract_schema.py docs/schema.yml')\n\n    run(c, f'mkdocs serve -a {address} -f docs/mkdocs.yml')\n\n\n@task\ndef clear_generated(c):\n    \"\"\"Clear generated files from `invoke update`.\"\"\"\n    # pyc/pyo files\n    run(c, 'find src -name \"*.pyc\" -exec rm -f {} +')\n    run(c, 'find src -name \"*.pyo\" -exec rm -f {} +')\n\n    # cache folders\n    run(c, 'find src -name \"__pycache__\" -exec rm -rf {} +')\n\n    # Generated translations\n    run(c, 'find src -name \"django.mo\" -exec rm -f {} +')\n    run(c, 'find src -name \"messages.mo\" -exec rm -f {} +')\n\n\n# Collection sorting\ndevelopment = Collection(\n    delete_data,\n    docs_server,\n    frontend_server,\n    gunicorn,\n    import_fixtures,\n    schema,\n    server,\n    setup_dev,\n    setup_test,\n    test,\n    test_translations,\n    translate,\n)\n\ninternal = Collection(\n    clean_settings,\n    clear_generated,\n    export_settings_definitions,\n    frontend_build,\n    frontend_check,\n    frontend_compile,\n    frontend_install,\n    frontend_trans,\n    rebuild_models,\n    rebuild_thumbnails,\n    showmigrations,\n)\n\nns = Collection(\n    backup,\n    export_records,\n    frontend_download,\n    import_records,\n    install,\n    migrate,\n    plugins,\n    remove_mfa,\n    restore,\n    static,\n    superuser,\n    update,\n    version,\n    wait,\n    worker,\n)\n\nns.add_collection(development, 'dev')\nns.add_collection(internal, 'int')\n"
        }
      ]
    }
  ]
}