{
  "metadata": {
    "timestamp": 1736559844779,
    "page": 591,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lucidrains/stylegan2-pytorch",
      "stars": 3723,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7568359375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2020 Phil Wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.0732421875,
          "content": "## Simple StyleGan2 for Pytorch\n[![PyPI version](https://badge.fury.io/py/stylegan2-pytorch.svg)](https://badge.fury.io/py/stylegan2-pytorch)\n\nSimple Pytorch implementation of Stylegan2 based on https://arxiv.org/abs/1912.04958 that can be completely trained from the command-line, no coding needed.\n\nBelow are some flowers that do not exist.\n\n<img src=\"https://raw.githubusercontent.com/lucidrains/stylegan2-pytorch/master/samples/flowers.jpg\" width=\"450\" height=\"auto\">\n\n<img src=\"https://raw.githubusercontent.com/lucidrains/stylegan2-pytorch/master/samples/flowers-2.jpg\" width=\"450\" height=\"auto\">\n\nNeither do these hands\n\n<img src=\"https://raw.githubusercontent.com/lucidrains/stylegan2-pytorch/master/samples/hands.jpg\" width=\"450\" height=\"auto\">\n\nNor these cities\n\n<img src=\"https://raw.githubusercontent.com/lucidrains/stylegan2-pytorch/master/samples/cities.jpg\" width=\"450\" height=\"auto\">\n\nNor these celebrities (trained by <a href=\"https://github.com/yoniker\">@yoniker</a>)\n\n<img src=\"https://raw.githubusercontent.com/lucidrains/stylegan2-pytorch/master/samples/celebrities.jpg\" width=\"450\" height=\"auto\">\n\n<img src=\"https://raw.githubusercontent.com/lucidrains/stylegan2-pytorch/master/samples/celebrities-2.jpg\" width=\"450\" height=\"auto\">\n\n\n## Install\n\nYou will need a machine with a GPU and CUDA installed. Then pip install the package like this\n\n```bash\n$ pip install stylegan2_pytorch\n```\n\nIf you are using a windows machine, the following commands reportedly works.\n\n```bash\n$ conda install pytorch torchvision -c python\n$ pip install stylegan2_pytorch\n```\n\n## Use\n\n```bash\n$ stylegan2_pytorch --data /path/to/images\n```\n\nThat's it. Sample images will be saved to `results/default` and models will be saved periodically to `models/default`.\n\n## Advanced Use\n\nYou can specify the name of your project with\n\n```bash\n$ stylegan2_pytorch --data /path/to/images --name my-project-name\n```\n\nYou can also specify the location where intermediate results and model checkpoints should be stored with\n\n```bash\n$ stylegan2_pytorch --data /path/to/images --name my-project-name --results_dir /path/to/results/dir --models_dir /path/to/models/dir\n```\n\nYou can increase the network capacity (which defaults to `16`) to improve generation results, at the cost of more memory.\n\n```bash\n$ stylegan2_pytorch --data /path/to/images --network-capacity 256\n```\n\nBy default, if the training gets cut off, it will automatically resume from the last checkpointed file. If you want to restart with new settings, just add a `new` flag\n\n```bash\n$ stylegan2_pytorch --new --data /path/to/images --name my-project-name --image-size 512 --batch-size 1 --gradient-accumulate-every 16 --network-capacity 10\n```\n\nOnce you have finished training, you can generate images from your latest checkpoint like so.\n\n```bash\n$ stylegan2_pytorch  --generate\n```\n\nTo generate a video of a interpolation through two random points in latent space.\n\n```bash\n$ stylegan2_pytorch --generate-interpolation --interpolation-num-steps 100\n```\n\nTo save each individual frame of the interpolation\n\n```bash\n$ stylegan2_pytorch --generate-interpolation --save-frames\n```\n\nIf a previous checkpoint contained a better generator, (which often happens as generators start degrading towards the end of training), you can load from a previous checkpoint with another flag\n\n```bash\n$ stylegan2_pytorch --generate --load-from {checkpoint number}\n```\n\nA technique used in both StyleGAN and BigGAN is truncating the latent values so that their values fall close to the mean. The small the truncation value, the better the samples will appear at the cost of sample variety. You can control this with the `--trunc-psi`, where values typically fall between `0.5` and `1`. It is set at `0.75` as default\n\n```bash\n$ stylegan2_pytorch --generate --trunc-psi 0.5\n```\n\n## Multi-GPU training\n\nIf you have one machine with multiple GPUs, the repository offers a way to utilize all of them for training. With multiple GPUs, each batch will be divided evenly amongst the GPUs available. For example, for 2 GPUs, with a batch size of 32, each GPU will see 16 samples.\n\nYou simply have to add a `--multi-gpus` flag, everyting else is taken care of. If you would like to restrict to specific GPUs, you can use the `CUDA_VISIBLE_DEVICES` environment variable to control what devices can be used. (ex. `CUDA_VISIBLE_DEVICES=0,2,3` only devices 0, 2, 3 are available)\n\n```bash\n$ stylegan2_pytorch --data ./data --multi-gpus --batch-size 32 --gradient-accumulate-every 1\n```\n\n## Low amounts of Training Data\n\nIn the past, GANs needed a lot of data to learn how to generate well. The faces model took **70k** high quality images from Flickr, as an example.\n\nHowever, in the month of May 2020, researchers all across the world independently converged on a simple technique to reduce that number to as low as **1-2k**. That simple idea was to differentiably augment all images, generated or real, going into the discriminator during training.\n\nIf one were to augment at a low enough probability, the augmentations will not 'leak' into the generations.\n\nIn the setting of low data, you can use the feature with a simple flag.\n\n```bash\n# find a suitable probability between 0. -> 0.7 at maximum\n$ stylegan2_pytorch --data ./data --aug-prob 0.25\n```\n\nBy default, the augmentations used are `translation` and `cutout`. If you would like to add `color`, you can do so with the `--aug-types` argument.\n\n```bash\n# make sure there are no spaces between items!\n$ stylegan2_pytorch --data ./data --aug-prob 0.25 --aug-types [translation,cutout,color]\n```\n\nYou can customize it to any combination of the three you would like. The differentiable augmentation code was copied and slightly modified from <a href=\"https://github.com/mit-han-lab/data-efficient-gans/blob/master/DiffAugment_pytorch.py\">here</a>.\n\n## When do I stop training?\n\nFor as long as possible until the adversarial game between the two neural nets fall apart (we call this divergence). By default, the number of training steps is set to `150000` for 128x128 images, but you will certainly want this number to be higher if the GAN doesn't diverge by the end of training, or if you are training at a higher resolution.\n\n```bash\n$ stylegan2_pytorch --data ./data --image-size 512 --num-train-steps 1000000\n```\n\n## Attention\n\nThis framework also allows for you to add an efficient form of self-attention to the designated layers of the discriminator (and the symmetric layer of the generator), which will greatly improve results. The more attention you can afford, the better!\n\n```python\n# add self attention after the output of layer 1\n$ stylegan2_pytorch --data ./data --attn-layers 1\n```\n\n```python\n# add self attention after the output of layers 1 and 2\n# do not put a space after the comma in the list!\n$ stylegan2_pytorch --data ./data --attn-layers [1,2]\n```\n\n## Bonus\n\nTraining on transparent images\n\n```bash\n$ stylegan2_pytorch --data ./transparent/images/path --transparent\n```\n\n## Memory considerations\n\nThe more GPU memory you have, the bigger and better the image generation will be. Nvidia recommended having up to 16GB for training 1024x1024 images. If you have less than that, there are a couple settings you can play with so that the model fits.\n\n```bash\n$ stylegan2_pytorch --data /path/to/data \\\n    --batch-size 3 \\\n    --gradient-accumulate-every 5 \\\n    --network-capacity 16\n```\n\n1. Batch size - You can decrease the `batch-size` down to 1, but you should increase the `gradient-accumulate-every` correspondingly so that the mini-batch the network sees is not too small. This may be confusing to a layperson, so I'll think about how I would automate the choice of `gradient-accumulate-every` going forward.\n\n2. Network capacity - You can decrease the neural network capacity to lessen the memory requirements. Just be aware that this has been shown to degrade generation performance.\n\nIf none of this works, you can settle for <a href=\"https://github.com/lucidrains/lightweight-gan\">'Lightweight' GAN</a>, which will allow you to tradeoff quality to train at greater resolutions in reasonable amount of time.\n\n## Deployment on AWS\n\nBelow are some steps which may be helpful for deployment using Amazon Web Services. In order to use this, you will have\nto provision a GPU-backed EC2 instance. An appropriate instance type would be from a p2 or p3 series. I (iboates) tried\na p2.xlarge (the cheapest option) and it was quite slow, slower in fact than using Google Colab. More powerful instance\ntypes may be better but they are more expensive. You can read more about them\n[here](https://aws.amazon.com/ec2/instance-types/#Accelerated_Computing).\n\n### Setup steps\n\n1. Archive your training data and upload it to an S3 bucket\n2. Provision your EC2 instance (I used an Ubuntu AMI)\n3. Log into your EC2 instance via SSH\n4. Install the aws CLI client and configure it:\n\n```bash\nsudo snap install aws-cli --classic\naws configure\n```\n\nYou will then have to enter your AWS access keys, which you can retrieve from the management console under AWS\nManagement Console > Profile > My Security Credentials > Access Keys\n\nThen, run these commands, or maybe put them in a shell script and execute that:\n\n```bash\nmkdir data\ncurl -O https://bootstrap.pypa.io/get-pip.py\nsudo apt-get install python3-distutils\npython3 get-pip.py\npip3 install stylegan2_pytorch\nexport PATH=$PATH:/home/ubuntu/.local/bin\naws s3 sync s3://<Your bucket name> ~/data\ncd data\ntar -xf ../train.tar.gz\n```\n\nNow you should be able to train by simplying calling `stylegan2_pytorch [args]`.\n\nNotes:\n\n* If you have a lot of training data, you may need to provision extra block storage via EBS.\n* Also, you may need to spread your data across multiple archives.\n* You should run this on a `screen` window so it won't terminate once you log out of the SSH session.\n\n## Research\n\n### FID Scores\n\nThanks to <a href=\"https://github.com/GetsEclectic\">GetsEclectic</a>, you can now calculate the FID score periodically! Again, made super simple with one extra argument, as shown below.\n\nFirstly, install the `pytorch_fid` package\n\n```bash\n$ pip install pytorch-fid\n```\n\nFollowed by\n\n```bash\n$ stylegan2_pytorch --data ./data --calculate-fid-every 5000\n```\n\nFID results will be logged to `./results/{name}/fid_scores.txt`\n\n### Coding\n\nIf you would like to sample images programmatically, you can do so with the following simple `ModelLoader` class.\n\n```python\nimport torch\nfrom torchvision.utils import save_image\nfrom stylegan2_pytorch import ModelLoader\n\nloader = ModelLoader(\n    base_dir = '/path/to/directory',   # path to where you invoked the command line tool\n    name = 'default'                   # the project name, defaults to 'default'\n)\n\nnoise   = torch.randn(1, 512).cuda() # noise\nstyles  = loader.noise_to_styles(noise, trunc_psi = 0.7)  # pass through mapping network\nimages  = loader.styles_to_images(styles) # call the generator on intermediate style vectors\n\nsave_image(images, './sample.jpg') # save your images, or do whatever you desire\n```\n\n### Logging to experiment tracker\n\nTo log the losses to an open source experiment tracker (Aim), you simply need to pass an extra flag like so.\n\n```bash\n$ stylegan2_pytorch --data ./data --log\n```\n\nThen, you need to make sure you have <a href=\"https://docs.docker.com/get-docker/\">Docker installed</a>. Following the instructions at <a href=\"https://github.com/aimhubio/aim\">Aim</a>, you execute the following in your terminal.\n\n```bash\n$ aim up\n```\n\nThen open up your browser to the address and you should see\n\n<img src=\"./images/aim.png\" width=\"600px\"></img>\n\n\n## Experimental\n\n### Top-k Training for Generator\n\nA new paper has produced evidence that by simply zero-ing out the gradient contributions from samples that are deemed fake by the discriminator, the generator learns significantly better, achieving new state of the art.\n\n```python\n$ stylegan2_pytorch --data ./data --top-k-training\n```\n\nGamma is a decay schedule that slowly decreases the topk from the full batch size to the target fraction of 50% (also modifiable hyperparameter).\n\n```python\n$ stylegan2_pytorch --data ./data --top-k-training --generate-top-k-frac 0.5 --generate-top-k-gamma 0.99\n```\n\n### Feature Quantization\n\nA recent paper reported improved results if intermediate representations of the discriminator are vector quantized. Although I have not noticed any dramatic changes, I have decided to add this as a feature, so other minds out there can investigate. To use, you have to specify which layer(s) you would like to vector quantize. Default dictionary size is `256` and is also tunable.\n\n```python\n# feature quantize layers 1 and 2, with a dictionary size of 512 each\n# do not put a space after the comma in the list!\n$ stylegan2_pytorch --data ./data --fq-layers [1,2] --fq-dict-size 512\n```\n\n### Contrastive Loss Regularization\n\nI have tried contrastive learning on the discriminator (in step with the usual GAN training) and possibly observed improved stability and quality of final results. You can turn on this experimental feature with a simple flag as shown below.\n\n```python\n$ stylegan2_pytorch --data ./data --cl-reg\n```\n\n### Relativistic Discriminator Loss\n\nThis was proposed in the Relativistic GAN paper to stabilize training. I have had mixed results, but will include the feature for those who want to experiment with it.\n\n```python\n$ stylegan2_pytorch --data ./data --rel-disc-loss\n```\n\n### Non-constant 4x4 Block\n\nBy default, the StyleGAN architecture styles a constant learned 4x4 block as it is progressively upsampled. This is an experimental feature that makes it so the 4x4 block is learned from the style vector `w` instead.\n\n```python\n$ stylegan2_pytorch --data ./data --no-const\n```\n\n### Dual Contrastive Loss\n\nA recent paper has proposed that a novel contrastive loss between the real and fake logits can improve quality over other types of losses. (The default in this repository is hinge loss, and the paper shows a slight improvement)\n\n```python\n$ stylegan2_pytorch --data ./data --dual-contrast-loss\n```\n\n## Alternatives\n\n<a href=\"https://github.com/lucidrains/unet-stylegan2\">Stylegan2 + Unet Discriminator</a>\n\nI have gotten really good results with a unet discriminator, but the architecturally change was too big to fit as an option in this repository. If you are aiming for perfection, feel free to try it.\n\nIf you would like me to give the royal treatment to some other GAN architecture (BigGAN), feel free to reach out at my email. Happy to hear your pitch.\n\n## Appreciation\n\nThank you to Matthew Mann for his inspiring [simple port](https://github.com/manicman1999/StyleGAN2-Tensorflow-2.0) for Tensorflow 2.0\n\n## References\n\n```bibtex\n@article{Karras2019stylegan2,\n    title   = {Analyzing and Improving the Image Quality of {StyleGAN}},\n    author  = {Tero Karras and Samuli Laine and Miika Aittala and Janne Hellsten and Jaakko Lehtinen and Timo Aila},\n    journal = {CoRR},\n    volume  = {abs/1912.04958},\n    year    = {2019},\n}\n```\n\n```bibtex\n@misc{zhao2020feature,\n    title   = {Feature Quantization Improves GAN Training},\n    author  = {Yang Zhao and Chunyuan Li and Ping Yu and Jianfeng Gao and Changyou Chen},\n    year    = {2020}\n}\n```\n\n```bibtex\n@misc{chen2020simple,\n    title   = {A Simple Framework for Contrastive Learning of Visual Representations},\n    author  = {Ting Chen and Simon Kornblith and Mohammad Norouzi and Geoffrey Hinton},\n    year    = {2020}\n}\n```\n\n```bibtex\n@article{,\n    title     = {Oxford 102 Flowers},\n    author    = {Nilsback, M-E. and Zisserman, A., 2008},\n    abstract  = {A 102 category dataset consisting of 102 flower categories, commonly occuring in the United Kingdom. Each class consists of 40 to 258 images. The images have large scale, pose and light variations.}\n}\n```\n\n```bibtex\n@article{afifi201911k,\n    title   = {11K Hands: gender recognition and biometric identification using a large dataset of hand images},\n    author  = {Afifi, Mahmoud},\n    journal = {Multimedia Tools and Applications}\n}\n```\n\n```bibtex\n@misc{zhang2018selfattention,\n    title   = {Self-Attention Generative Adversarial Networks},\n    author  = {Han Zhang and Ian Goodfellow and Dimitris Metaxas and Augustus Odena},\n    year    = {2018},\n    eprint  = {1805.08318},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@article{shen2019efficient,\n    author    = {Zhuoran Shen and\n               Mingyuan Zhang and\n               Haiyu Zhao and\n               Shuai Yi and\n               Hongsheng Li},\n    title     = {Efficient Attention: Attention with Linear Complexities},\n    journal   = {CoRR},  \n    year      = {2018},\n    url       = {http://arxiv.org/abs/1812.01243},\n}\n```\n\n```bibtex\n@article{zhao2020diffaugment,\n    title   = {Differentiable Augmentation for Data-Efficient GAN Training},\n    author  = {Zhao, Shengyu and Liu, Zhijian and Lin, Ji and Zhu, Jun-Yan and Han, Song},\n    journal = {arXiv preprint arXiv:2006.10738},\n    year    = {2020}\n}\n```\n\n```bibtex\n@misc{zhao2020image,\n    title  = {Image Augmentations for GAN Training},\n    author = {Zhengli Zhao and Zizhao Zhang and Ting Chen and Sameer Singh and Han Zhang},\n    year   = {2020},\n    eprint = {2006.02595},\n    archivePrefix = {arXiv}\n}\n```\n\n```bibtex\n@misc{karras2020training,\n    title   = {Training Generative Adversarial Networks with Limited Data},\n    author  = {Tero Karras and Miika Aittala and Janne Hellsten and Samuli Laine and Jaakko Lehtinen and Timo Aila},\n    year    = {2020},\n    eprint  = {2006.06676},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```\n\n```bibtex\n@misc{jolicoeurmartineau2018relativistic,\n    title   = {The relativistic discriminator: a key element missing from standard GAN},\n    author  = {Alexia Jolicoeur-Martineau},\n    year    = {2018},\n    eprint  = {1807.00734},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.LG}\n}\n```\n\n```bibtex\n@misc{sinha2020topk,\n    title   = {Top-k Training of GANs: Improving GAN Performance by Throwing Away Bad Samples},\n    author  = {Samarth Sinha and Zhengli Zhao and Anirudh Goyal and Colin Raffel and Augustus Odena},\n    year    = {2020},\n    eprint  = {2002.06224},\n    archivePrefix = {arXiv},\n    primaryClass = {stat.ML}\n}\n```\n\n```bibtex\n@misc{yu2021dual,\n    title   = {Dual Contrastive Loss and Attention for GANs},\n    author  = {Ning Yu and Guilin Liu and Aysegul Dundar and Andrew Tao and Bryan Catanzaro and Larry Davis and Mario Fritz},\n    year    = {2021},\n    eprint  = {2103.16748},\n    archivePrefix = {arXiv},\n    primaryClass = {cs.CV}\n}\n```\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0595703125,
          "content": "# Inside of setup.cfg\n[metadata]\ndescription-file = README.md"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.21484375,
          "content": "import sys\nfrom setuptools import setup, find_packages\n\nsys.path[0:0] = ['stylegan2_pytorch']\nfrom version import __version__\n\nsetup(\n  name = 'stylegan2_pytorch',\n  packages = find_packages(),\n  entry_points={\n    'console_scripts': [\n      'stylegan2_pytorch = stylegan2_pytorch.cli:main',\n    ],\n  },\n  version = __version__,\n  license = 'MIT',\n  description = 'StyleGan2 in Pytorch',\n  long_description_content_type = 'text/markdown',\n  author = 'Phil Wang',\n  author_email = 'lucidrains@gmail.com',\n  url = 'https://github.com/lucidrains/stylegan2-pytorch',\n  download_url = 'https://github.com/lucidrains/stylegan2-pytorch/archive/v_036.tar.gz',\n  keywords = [\n    'generative adversarial networks',\n    'artificial intelligence'\n  ],\n  install_requires=[\n    'aim',\n    'einops>=0.7.0',\n    'contrastive_learner>=0.1.0',\n    'fire',\n    'kornia>=0.5.4',\n    'numpy',\n    'retry',\n    'tqdm',\n    'torch',\n    'torchvision',\n    'pillow',\n    'vector-quantize-pytorch==0.1.0'\n  ],\n  classifiers=[\n    'Development Status :: 4 - Beta',\n    'Intended Audience :: Developers',\n    'Topic :: Scientific/Engineering :: Artificial Intelligence',\n    'License :: OSI Approved :: MIT License',\n    'Programming Language :: Python :: 3.6',\n  ],\n)\n"
        },
        {
          "name": "stylegan2_pytorch",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}