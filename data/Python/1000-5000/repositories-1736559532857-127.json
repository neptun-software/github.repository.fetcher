{
  "metadata": {
    "timestamp": 1736559532857,
    "page": 127,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "python-jsonschema/jsonschema",
      "stars": 4664,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.7412109375,
          "content": "/TODO*\n/dirhtml/\n_cache\n_static\n_templates\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8173828125,
          "content": "exclude: json/\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-ast\n      - id: check-json\n      - id: check-toml\n      - id: check-vcs-permalinks\n      - id: check-yaml\n      - id: debug-statements\n        exclude: \"^jsonschema/tests/_suite.py$\"\n      - id: end-of-file-fixer\n      - id: mixed-line-ending\n        args: [--fix, lf]\n      - id: trailing-whitespace\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: \"v0.8.6\"\n    hooks:\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: \"v4.0.0-alpha.8\"\n    hooks:\n      - id: prettier\n        exclude: \"^jsonschema/benchmarks/issue232/issue.json$\"\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.1337890625,
          "content": "- id: jsonschema\n  name: jsonschema\n  description: json schema validation\n  language: python\n  pass_filenames: false\n  entry: jsonschema\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2490234375,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  apt_packages:\n    - inkscape\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  builder: dirhtml\n  configuration: docs/conf.py\n  fail_on_warning: true\n\nformats: all\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 19.52734375,
          "content": "v4.24.0\n=======\n\n* Support for Python 3.8 has been dropped, as it is nearing end-of-life.\n\nv4.23.0\n=======\n\n* Do not reorder dictionaries (schemas, instances) that are printed as part of validation errors.\n* Declare support for Py3.13\n\nv4.22.0\n=======\n\n* Improve ``best_match`` (and thereby error messages from ``jsonschema.validate``) in cases where there are multiple *sibling* errors from applying ``anyOf`` / ``allOf`` -- i.e. when multiple elements of a JSON array have errors, we now do prefer showing errors from earlier elements rather than simply showing an error for the full array (#1250).\n* (Micro-)optimize equality checks when comparing for JSON Schema equality by first checking for object identity, as ``==`` would.\n\nv4.21.1\n=======\n\n* Slightly speed up the ``contains`` keyword by removing some unnecessary validator (re-)creation.\n\nv4.21.0\n=======\n\n* Fix the behavior of ``enum`` in the presence of ``0`` or ``1`` to properly consider ``True`` and ``False`` unequal (#1208).\n* Special case the error message for ``{min,max}{Items,Length,Properties}`` when they're checking for emptiness rather than true length.\n\nv4.20.0\n=======\n\n* Properly consider items (and properties) to be evaluated by ``unevaluatedItems`` (resp. ``unevaluatedProperties``) when behind a ``$dynamicRef`` as specified by the 2020 and 2019 specifications.\n* ``jsonschema.exceptions.ErrorTree.__setitem__`` is now deprecated.\n  More broadly, in general users of ``jsonschema`` should never be mutating objects owned by the library.\n\nv4.19.2\n=======\n\n* Fix the error message for additional items when used with heterogeneous arrays.\n* Don't leak the ``additionalItems`` keyword into JSON Schema draft 2020-12, where it was replaced by ``items``.\n\nv4.19.1\n=======\n\n* Single label hostnames are now properly considered valid according to the ``hostname`` format.\n  This is the behavior specified by the relevant RFC (1123).\n  IDN hostname behavior was already correct.\n\nv4.19.0\n=======\n\n* Importing the ``Validator`` protocol directly from the package root is deprecated.\n  Import it from ``jsonschema.protocols.Validator`` instead.\n* Automatic retrieval of remote references (which is still deprecated) now properly succeeds even if the retrieved resource does not declare which version of JSON Schema it uses.\n  Such resources are assumed to be 2020-12 schemas.\n  This more closely matches the pre-referencing library behavior.\n\nv4.18.6\n=======\n\n* Set a ``jsonschema`` specific user agent when automatically retrieving remote references (which is deprecated).\n\nv4.18.5\n=======\n\n* Declare support for Py3.12\n\nv4.18.4\n=======\n\n* Improve the hashability of wrapped referencing exceptions when they contain hashable data.\n\nv4.18.3\n=======\n\n* Properly preserve ``applicable_validators`` in extended validators.\n  Specifically, validators extending early drafts where siblings of ``$ref`` were ignored will properly ignore siblings in the extended validator.\n\nv4.18.2\n=======\n\n* Fix an additional regression with the deprecated ``jsonschema.RefResolver`` and pointer resolution.\n\nv4.18.1\n=======\n\n* Fix a regression with ``jsonschema.RefResolver`` based resolution when used in combination with a custom validation dialect (via ``jsonschema.validators.create``).\n\nv4.18.0\n=======\n\nThis release majorly rehauls the way in which JSON Schema reference resolution is configured.\nIt does so in a way that *should* be backwards compatible, preserving old behavior whilst emitting deprecation warnings.\n\n* ``jsonschema.RefResolver`` is now deprecated in favor of the new `referencing library <https://github.com/python-jsonschema/referencing/>`_.\n  ``referencing`` will begin in beta, but already is more compliant than the existing ``$ref`` support.\n  This change is a culmination of a meaningful chunk of work to make ``$ref`` resolution more flexible and more correct.\n  Backwards compatibility *should* be preserved for existing code which uses ``RefResolver``, though doing so is again now deprecated, and all such use cases should be doable using the new APIs.\n  Please file issues on the ``referencing`` tracker if there is functionality missing from it, or here on the ``jsonschema`` issue tracker if you have issues with existing code not functioning the same, or with figuring out how to change it to use ``referencing``.\n  In particular, this referencing change includes a change concerning *automatic* retrieval of remote references (retrieving ``http://foo/bar`` automatically within a schema).\n  This behavior has always been a potential security risk and counter to the recommendations of the JSON Schema specifications; it has survived this long essentially only for backwards compatibility reasons, and now explicitly produces warnings.\n  The ``referencing`` library itself will *not* automatically retrieve references if you interact directly with it, so the deprecated behavior is only triggered if you fully rely on the default ``$ref`` resolution behavior and also include remote references in your schema, which will still be retrieved during the deprecation period (after which they will become an error).\n* Support for Python 3.7 has been dropped, as it is nearing end-of-life.\n  This should not be a \"visible\" change in the sense that ``requires-python`` has been updated, so users using 3.7 should still receive ``v4.17.3`` when installing the library.\n* On draft 2019-09, ``unevaluatedItems`` now properly does *not* consider items to be evaluated by an ``additionalItems`` schema if ``items`` is missing from the schema, as the specification says in this case that ``additionalItems`` must be completely ignored.\n* Fix the ``date`` format checker on Python 3.11 (when format assertion behavior is enabled), where it was too liberal (#1076).\n* Speed up validation of ``unevaluatedProperties`` (#1075).\n\nDeprecations\n------------\n\n* ``jsonschema.RefResolver`` -- see above for details on the replacement\n* ``jsonschema.RefResolutionError`` -- see above for details on the replacement\n* relying on automatic resolution of remote references -- see above for details on the replacement\n* importing ``jsonschema.ErrorTree`` -- instead import it via ``jsonschema.exceptions.ErrorTree``\n* importing ``jsonschema.FormatError`` -- instead import it via ``jsonschema.exceptions.FormatError``\n\nv4.17.3\n=======\n\n* Fix instantiating validators with cached refs to boolean schemas\n  rather than objects (#1018).\n\nv4.17.2\n=======\n\n* Empty strings are not valid relative JSON Pointers (aren't valid under the\n  RJP format).\n* Durations without (trailing) units are not valid durations (aren't\n  valid under the duration format). This involves changing the dependency\n  used for validating durations (from ``isoduration`` to ``isodate``).\n\nv4.17.1\n=======\n\n* The error message when using ``unevaluatedProperties`` with a non-trivial\n  schema value (i.e. something other than ``false``) has been improved (#996).\n\nv4.17.0\n=======\n\n* The ``check_schema`` method on ``jsonschema.protocols.Validator`` instances\n  now *enables* format validation by default when run. This can catch some\n  additional invalid schemas (e.g. containing invalid regular expressions)\n  where the issue is indeed uncovered by validating against the metaschema\n  with format validation enabled as an assertion.\n* The ``jsonschema`` CLI (along with ``jsonschema.cli`` the module) are now\n  deprecated. Use ``check-jsonschema`` instead, which can be installed via\n  ``pip install check-jsonschema`` and found\n  `here <https://github.com/python-jsonschema/check-jsonschema>`_.\n\nv4.16.1\n=======\n\n* Make ``ErrorTree`` have a more grammatically correct ``repr``.\n\nv4.16.0\n=======\n\n* Improve the base URI behavior when resolving a ``$ref`` to a resolution URI\n  which is different from the resolved schema's declared ``$id``.\n* Accessing ``jsonschema.draftN_format_checker`` is deprecated. Instead, if you\n  want access to the format checker itself, it is exposed as\n  ``jsonschema.validators.DraftNValidator.FORMAT_CHECKER`` on any\n  ``jsonschema.protocols.Validator``.\n\nv4.15.0\n=======\n\n* A specific API Reference page is now present in the documentation.\n* ``$ref`` on earlier drafts (specifically draft 7 and 6) has been \"fixed\" to\n  follow the specified behavior when present alongside a sibling ``$id``.\n  Specifically the ID is now properly ignored, and references are resolved\n  against whatever resolution scope was previously relevant.\n\nv4.14.0\n=======\n\n* ``FormatChecker.cls_checks`` is deprecated. Use ``FormatChecker.checks`` on\n  an instance of ``FormatChecker`` instead.\n* ``unevaluatedItems`` has been fixed for draft 2019. It's nonetheless\n  discouraged to use draft 2019 for any schemas, new or old.\n* Fix a number of minor annotation issues in ``protocols.Validator``\n\nv4.13.0\n=======\n\n* Add support for creating validator classes whose metaschema uses a different\n  dialect than its schemas. In other words, they may use draft2020-12 to define\n  which schemas are valid, but the schemas themselves use draft7 (or a custom\n  dialect, etc.) to define which *instances* are valid. Doing this is likely\n  not something most users, even metaschema authors, may need, but occasionally\n  will be useful for advanced use cases.\n\nv4.12.1\n=======\n\n* Fix some stray comments in the README.\n\nv4.12.0\n=======\n\n* Warn at runtime when subclassing validator classes. Doing so was not\n  intended to be public API, though it seems some downstream libraries\n  do so. A future version will make this an error, as it is brittle and\n  better served by composing validator objects instead. Feel free to reach\n  out if there are any cases where changing existing code seems difficult\n  and I can try to provide guidance.\n\nv4.11.0\n=======\n\n* Make the rendered README in PyPI simpler and fancier. Thanks Hynek (#983)!\n\nv4.10.3\n=======\n\n* ``jsonschema.validators.validator_for`` now properly uses the explicitly\n  provided default validator even if the ``$schema`` URI is not found.\n\nv4.10.2\n=======\n\n* Fix a second place where subclasses may have added attrs attributes (#982).\n\nv4.10.1\n=======\n\n* Fix Validator.evolve (and APIs like ``iter_errors`` which call it) for cases\n  where the validator class has been subclassed. Doing so wasn't intended to be\n  public API, but given it didn't warn or raise an error it's of course\n  understandable. The next release however will make it warn (and a future one\n  will make it error). If you need help migrating usage of inheriting from a\n  validator class feel free to open a discussion and I'll try to give some\n  guidance (#982).\n\nv4.10.0\n=======\n\n* Add support for referencing schemas with ``$ref`` across different versions\n  of the specification than the referrer's\n\nv4.9.1\n======\n\n* Update some documentation examples to use newer validator releases in their\n  sample code.\n\nv4.9.0\n======\n\n* Fix relative ``$ref`` resolution when the base URI is a URN or other scheme\n  (#544).\n* ``pkgutil.resolve_name`` is now used to retrieve validators\n  provided on the command line. This function is only available on\n  3.9+, so 3.7 and 3.8 (which are still supported) now rely on the\n  `pkgutil_resolve_name <https://pypi.org/project/pkgutil_resolve_name/>`_\n  backport package. Note however that the CLI itself is due\n  to be deprecated shortly in favor of `check-jsonschema\n  <https://github.com/python-jsonschema/check-jsonschema>`_.\n\nv4.8.0\n======\n\n* ``best_match`` no longer traverses into ``anyOf`` and ``oneOf`` when all of\n  the errors within them seem equally applicable. This should lead to clearer\n  error messages in some cases where no branches were matched.\n\nv4.7.2\n======\n\n* Also have ``best_match`` handle cases where the ``type`` validator is an\n  array.\n\nv4.7.1\n======\n\n* Minor tweak of the PyPI hyperlink names\n\nv4.7.0\n======\n\n* Enhance ``best_match`` to prefer errors from branches of the schema which\n  match the instance's type (#728)\n\nv4.6.2\n======\n\n* Fix a number of minor typos in docstrings, mostly private ones (#969)\n\nv4.6.1\n======\n\n* Gut the (incomplete) implementation of ``recursiveRef`` on draft 2019. It\n  needs completing, but for now can lead to recursion errors (e.g. #847).\n\nv4.6.0\n======\n\n* Fix ``unevaluatedProperties`` and ``unevaluatedItems`` for types they should\n  ignore (#949)\n* ``jsonschema`` now uses `hatch <https://hatch.pypa.io/>`_ for its build\n  process. This should be completely transparent to end-users (and only matters\n  to contributors).\n\nv4.5.1\n======\n\n* Revert changes to ``$dynamicRef`` which caused a performance regression\n  in v4.5.0\n\nv4.5.0\n======\n\n* Validator classes for each version now maintain references to the correct\n  corresponding format checker (#905)\n* Development has moved to a `GitHub organization\n  <https://github.com/python-jsonschema/>`_.\n  No functional behavior changes are expected from the change.\n\nv4.4.0\n======\n\n* Add ``mypy`` support (#892)\n* Add support for Python 3.11\n\nv4.3.3\n======\n\n* Properly report deprecation warnings at the right stack level (#899)\n\nv4.3.2\n======\n\n* Additional performance improvements for resolving refs (#896)\n\nv4.3.1\n======\n\n* Resolving refs has had performance improvements (#893)\n\nv4.3.0\n======\n\n* Fix undesired fallback to brute force container uniqueness check on\n  certain input types (#893)\n* Implement a PEP544 Protocol for validator classes (#890)\n\nv4.2.1\n======\n\n* Pin ``importlib.resources`` from below (#877)\n\nv4.2.0\n======\n\n* Use ``importlib.resources`` to load schemas (#873)\n* Ensure all elements of arrays are verified for uniqueness by ``uniqueItems``\n  (#866)\n\nv4.1.2\n======\n\n* Fix ``dependentSchemas`` to properly consider non-object instances to be\n  valid (#850)\n\nv4.1.1\n======\n\n* Fix ``prefixItems`` not indicating which item was invalid within the instance\n  path (#862)\n\nv4.1.0\n======\n\n* Add Python 3.10 to the list of supported Python versions\n\nv4.0.1\n======\n\n* Fix the declaration of minimum supported Python version (#846)\n\nv4.0.0\n======\n\n* Partial support for Draft 2020-12 (as well as 2019-09).\n  Thanks to Thomas Schmidt and Harald Nezbeda.\n* ``False`` and ``0`` are now properly considered non-equal even\n  recursively within a container (#686). As part of this change,\n  ``uniqueItems`` validation may be *slower* in some cases. Please feel\n  free to report any significant performance regressions, though in\n  some cases they may be difficult to address given the specification\n  requirement.\n* The CLI has been improved, and in particular now supports a ``--output``\n  option (with ``plain`` (default) or ``pretty`` arguments) to control the\n  output format. Future work may add additional machine-parsable output\n  formats.\n* Code surrounding ``DEFAULT_TYPES`` and the legacy mechanism for\n  specifying types to validators have been removed, as per the deprecation\n  policy. Validators should use the ``TypeChecker`` object to customize\n  the set of Python types corresponding to JSON Schema types.\n* Validation errors now have a ``json_path`` attribute, describing their\n  location in JSON path format\n* Support for the IP address and domain name formats has been improved\n* Support for Python 2 and 3.6 has been dropped, with ``python_requires``\n  properly set.\n* ``multipleOf`` could overflow when given sufficiently large numbers. Now,\n  when an overflow occurs, ``jsonschema`` will fall back to using fraction\n  division (#746).\n* ``jsonschema.__version__``, ``jsonschema.validators.validators``,\n  ``jsonschema.validators.meta_schemas`` and\n  ``jsonschema.RefResolver.in_scope`` have been deprecated, as has\n  passing a second-argument schema to ``Validator.iter_errors`` and\n  ``Validator.is_valid``.\n\nv3.2.0\n======\n\n* Added a ``format_nongpl`` setuptools extra, which installs only ``format``\n  dependencies that are non-GPL (#619).\n\nv3.1.1\n======\n\n* Temporarily revert the switch to ``js-regex`` until #611 and #612 are\n  resolved.\n\nv3.1.0\n======\n\n* Regular expressions throughout schemas now respect the ECMA 262 dialect, as\n  recommended by the specification (#609).\n\nv3.0.2\n======\n\n* Fixed a bug where ``0`` and ``False`` were considered equal by\n  ``const`` and ``enum`` (#575).\n\nv3.0.1\n======\n\n* Fixed a bug where extending validators did not preserve their notion\n  of which validator property contains ``$id`` information.\n\nv3.0.0\n======\n\n* Support for Draft 6 and Draft 7\n* Draft 7 is now the default\n* New ``TypeChecker`` object for more complex type definitions (and overrides)\n* Falling back to isodate for the date-time format checker is no longer\n  attempted, in accordance with the specification\n\nv2.6.0\n======\n\n* Support for Python 2.6 has been dropped.\n* Improve a few error messages for ``uniqueItems`` (#224) and\n  ``additionalProperties`` (#317)\n* Fixed an issue with ``ErrorTree``'s handling of multiple errors (#288)\n\nv2.5.0\n======\n\n* Improved performance on CPython by adding caching around ref resolution\n  (#203)\n\nv2.4.0\n======\n\n* Added a CLI (#134)\n* Added absolute path and absolute schema path to errors (#120)\n* Added ``relevance``\n* Meta-schemas are now loaded via ``pkgutil``\n\nv2.3.0\n======\n\n* Added ``by_relevance`` and ``best_match`` (#91)\n* Fixed ``format`` to allow adding formats for non-strings (#125)\n* Fixed the ``uri`` format to reject URI references (#131)\n\nv2.2.0\n======\n\n* Compile the host name regex (#127)\n* Allow arbitrary objects to be types (#129)\n\nv2.1.0\n======\n\n* Support RFC 3339 datetimes in conformance with the spec\n* Fixed error paths for additionalItems + items (#122)\n* Fixed wording for min / maxProperties (#117)\n\n\nv2.0.0\n======\n\n* Added ``create`` and ``extend`` to ``jsonschema.validators``\n* Removed ``ValidatorMixin``\n* Fixed array indices ref resolution (#95)\n* Fixed unknown scheme defragmenting and handling (#102)\n\n\nv1.3.0\n======\n\n* Better error tracebacks (#83)\n* Raise exceptions in ``ErrorTree``\\s for keys not in the instance (#92)\n* __cause__ (#93)\n\n\nv1.2.0\n======\n\n* More attributes for ValidationError (#86)\n* Added ``ValidatorMixin.descend``\n* Fixed bad ``RefResolutionError`` message (#82)\n\n\nv1.1.0\n======\n\n* Canonicalize URIs (#70)\n* Allow attaching exceptions to ``format`` errors (#77)\n\n\nv1.0.0\n======\n\n* Support for Draft 4\n* Support for format\n* Longs are ints too!\n* Fixed a number of issues with ``$ref`` support (#66)\n* Draft4Validator is now the default\n* ``ValidationError.path`` is now in sequential order\n* Added ``ValidatorMixin``\n\n\nv0.8.0\n======\n\n* Full support for JSON References\n* ``validates`` for registering new validators\n* Documentation\n* Bugfixes\n\n    * uniqueItems not so unique (#34)\n    * Improper any (#47)\n\n\nv0.7\n====\n\n* Partial support for (JSON Pointer) ``$ref``\n* Deprecations\n\n  * ``Validator`` is replaced by ``Draft3Validator`` with a slightly different\n    interface\n  * ``validator(meta_validate=False)``\n\n\nv0.6\n====\n\n* Bugfixes\n\n  * Issue #30 - Wrong behavior for the dependencies property validation\n  * Fixed a miswritten test\n\n\nv0.5\n====\n\n* Bugfixes\n\n  * Issue #17 - require path for error objects\n  * Issue #18 - multiple type validation for non-objects\n\n\nv0.4\n====\n\n* Preliminary support for programmatic access to error details (Issue #5).\n  There are certainly some corner cases that don't do the right thing yet, but\n  this works mostly.\n\n    In order to make this happen (and also to clean things up a bit), a number\n    of deprecations are necessary:\n\n        * ``stop_on_error`` is deprecated in ``Validator.__init__``. Use\n          ``Validator.iter_errors()`` instead.\n        * ``number_types`` and ``string_types`` are deprecated there as well.\n          Use ``types={\"number\" : ..., \"string\" : ...}`` instead.\n        * ``meta_validate`` is also deprecated, and instead is now accepted as\n          an argument to ``validate``, ``iter_errors`` and ``is_valid``.\n\n* A bugfix or two\n\n\nv0.3\n====\n\n* Default for unknown types and properties is now to *not* error (consistent\n  with the schema).\n* Python 3 support\n* Removed dependency on SecureTypes now that the hash bug has been resolved.\n* \"Numerous bug fixes\" -- most notably, a divisibleBy error for floats and a\n  bunch of missing typechecks for irrelevant properties.\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 2.7890625,
          "content": "============================\nContributing to `jsonschema`\n============================\n\nFound a bug?\n------------\n\nIf you suspect you may have found a security-related vulnerability, please follow the instructions in `the security policy <https://github.com/python-jsonschema/jsonschema/blob/main/.github/SECURITY.md>`_.\n\nOtherwise, it is extremely helpful if you first search to see whether your bug has been `previously reported on the Issues tab <https://github.com/python-jsonschema/jsonschema/issues?q=is%3Aissue+is%3Aopen+label%3ABug>`_.\n\nIf it doesn't appear to be a known issue, please `file a new one <https://github.com/python-jsonschema/jsonschema/issues/new>`_, and include a **title and clear description**, along with as much relevant information as possible.\nIncluding a *minimal*, *self-sufficient* bit of code (often an instance and schema) is the fastest way to get attention, along with a description of the behavior you expect, and if you're able, a link to where in the specification contains the behavior you're noticing is incorrect.\n\nPull requests to fix your issue are of course very welcome.\n\n\nFixing a Bug?\n-------------\n\nPlease open a new GitHub pull request with the change, along with new tests.\n\nEnsure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\nContinuous integration via GitHub actions should run to indicate whether your change passes both the test suite as well as linters.\nPlease ensure it passes, or indicate in a comment if you believe it fails spuriously.\n\n\nAdding New Functionality?\n-------------------------\n\nPlease discuss any larger changes ahead of time for the sake of your own time!\n\nImprovements are very welcome, but large pull requests, disruptive ones, or backwards incompatible ones, can lead to long back and forth discussions.\n\nYou're welcome to suggest a change in an issue and thereby get some initial feedback before embarking on an effort that may not get merged.\n\n\nImproving the Documentation?\n----------------------------\n\nWriting good documentation is challenging both to prioritize and to do well.\n\nAny help you may have would be great, especially if you're a beginner who's struggled to understand a part of the library.\n\nDocumentation is written in `Sphinx-flavored reStructuredText <https://www.sphinx-doc.org>`_, so you'll want to familiarize yourself a bit with Sphinx.\n\nFeel free to file issues or pull requests.\n\n\nHave a Question?\n----------------\n\nPlease do not use the issue tracker for questions, it's reserved for things believed to be bugs, or new functionality.\n\nThere is a `discussions tab <https://github.com/python-jsonschema/jsonschema/discussions>`_ where general questions can be asked.\n\nAnswers on it are best-effort.\n\nAny help you can offer to answer others' questions is of course very welcome as well.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2013 Julian Berman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.96484375,
          "content": "==========\njsonschema\n==========\n\n|PyPI| |Pythons| |CI| |ReadTheDocs| |Precommit| |Zenodo|\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/jsonschema.svg\n   :alt: PyPI version\n   :target: https://pypi.org/project/jsonschema/\n\n.. |Pythons| image:: https://img.shields.io/pypi/pyversions/jsonschema.svg\n   :alt: Supported Python versions\n   :target: https://pypi.org/project/jsonschema/\n\n.. |CI| image:: https://github.com/python-jsonschema/jsonschema/workflows/CI/badge.svg\n  :alt: Build status\n  :target: https://github.com/python-jsonschema/jsonschema/actions?query=workflow%3ACI\n\n.. |ReadTheDocs| image:: https://readthedocs.org/projects/python-jsonschema/badge/?version=stable&style=flat\n   :alt: ReadTheDocs status\n   :target: https://python-jsonschema.readthedocs.io/en/stable/\n\n.. |Precommit| image:: https://results.pre-commit.ci/badge/github/python-jsonschema/jsonschema/main.svg\n   :alt: pre-commit.ci status\n   :target: https://results.pre-commit.ci/latest/github/python-jsonschema/jsonschema/main\n\n.. |Zenodo| image:: https://zenodo.org/badge/3072629.svg\n   :alt: Zenodo DOI\n   :target: https://zenodo.org/badge/latestdoi/3072629\n\n\n``jsonschema`` is an implementation of the `JSON Schema <https://json-schema.org>`_ specification for Python.\n\n.. code:: python\n\n    >>> from jsonschema import validate\n\n    >>> # A sample schema, like what we'd get from json.load()\n    >>> schema = {\n    ...     \"type\" : \"object\",\n    ...     \"properties\" : {\n    ...         \"price\" : {\"type\" : \"number\"},\n    ...         \"name\" : {\"type\" : \"string\"},\n    ...     },\n    ... }\n\n    >>> # If no exception is raised by validate(), the instance is valid.\n    >>> validate(instance={\"name\" : \"Eggs\", \"price\" : 34.99}, schema=schema)\n\n    >>> validate(\n    ...     instance={\"name\" : \"Eggs\", \"price\" : \"Invalid\"}, schema=schema,\n    ... )                                   # doctest: +IGNORE_EXCEPTION_DETAIL\n    Traceback (most recent call last):\n        ...\n    ValidationError: 'Invalid' is not of type 'number'\n\nIt can also be used from the command line by installing `check-jsonschema <https://github.com/python-jsonschema/check-jsonschema>`_.\n\nFeatures\n--------\n\n* Full support for `Draft 2020-12 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft202012Validator>`_, `Draft 2019-09 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft201909Validator>`_, `Draft 7 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft7Validator>`_, `Draft 6 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft6Validator>`_, `Draft 4 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft4Validator>`_ and `Draft 3 <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/validators/#jsonschema.validators.Draft3Validator>`_\n\n* `Lazy validation <https://python-jsonschema.readthedocs.io/en/latest/api/jsonschema/protocols/#jsonschema.protocols.Validator.iter_errors>`_ that can iteratively report *all* validation errors.\n\n* `Programmatic querying <https://python-jsonschema.readthedocs.io/en/latest/errors/>`_ of which properties or items failed validation.\n\n\nInstallation\n------------\n\n``jsonschema`` is available on `PyPI <https://pypi.org/project/jsonschema/>`_. You can install using `pip <https://pip.pypa.io/en/stable/>`_:\n\n.. code:: bash\n\n    $ pip install jsonschema\n\n\nExtras\n======\n\nTwo extras are available when installing the package, both currently related to ``format`` validation:\n\n    * ``format``\n    * ``format-nongpl``\n\nThey can be used when installing in order to include additional dependencies, e.g.:\n\n.. code:: bash\n\n    $ pip install jsonschema'[format]'\n\nBe aware that the mere presence of these dependencies – or even the specification of ``format`` checks in a schema – do *not* activate format checks (as per the specification).\nPlease read the `format validation documentation <https://python-jsonschema.readthedocs.io/en/latest/validate/#validating-formats>`_ for further details.\n\n.. start cut from PyPI\n\nRunning the Test Suite\n----------------------\n\nIf you have ``nox`` installed (perhaps via ``pipx install nox`` or your package manager), running ``nox`` in the directory of your source checkout will run ``jsonschema``'s test suite on all of the versions of Python ``jsonschema`` supports.\nIf you don't have all of the versions that ``jsonschema`` is tested under, you'll likely want to run using ``nox``'s ``--no-error-on-missing-interpreters`` option.\n\nOf course you're also free to just run the tests on a single version with your favorite test runner.\nThe tests live in the ``jsonschema.tests`` package.\n\n\nBenchmarks\n----------\n\n``jsonschema``'s benchmarks make use of `pyperf <https://pyperf.readthedocs.io>`_.\nRunning them can be done via::\n\n      $ nox -s perf\n\n\nCommunity\n---------\n\nThe JSON Schema specification has `a Slack <https://json-schema.slack.com>`_, with an `invite link on its home page <https://json-schema.org/>`_.\nMany folks knowledgeable on authoring schemas can be found there.\n\nOtherwise, opening a `GitHub discussion <https://github.com/python-jsonschema/jsonschema/discussions>`_ or asking questions on Stack Overflow are other means of getting help if you're stuck.\n\n.. end cut from PyPI\n\n\nAbout\n-----\n\nI'm Julian Berman.\n\n``jsonschema`` is on `GitHub <https://github.com/python-jsonschema/jsonschema>`_.\n\nGet in touch, via GitHub or otherwise, if you've got something to contribute, it'd be most welcome!\n\nYou can also generally find me on Libera (nick: ``Julian``) in various channels, including ``#python``.\n\nIf you feel overwhelmingly grateful, you can also `sponsor me <https://github.com/sponsors/Julian/>`_.\n\nAnd for companies who appreciate ``jsonschema`` and its continued support and growth, ``jsonschema`` is also now supportable via `TideLift <https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&utm_medium=referral&utm_campaign=readme>`_.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "json",
          "type": "tree",
          "content": null
        },
        {
          "name": "jsonschema",
          "type": "tree",
          "content": null
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 6.33203125,
          "content": "from pathlib import Path\nfrom tempfile import TemporaryDirectory\nimport os\n\nimport nox\n\nROOT = Path(__file__).parent\nPACKAGE = ROOT / \"jsonschema\"\nBENCHMARKS = PACKAGE / \"benchmarks\"\nPYPROJECT = ROOT / \"pyproject.toml\"\nCHANGELOG = ROOT / \"CHANGELOG.rst\"\nDOCS = ROOT / \"docs\"\n\nINSTALLABLE = [\n    nox.param(value, id=name) for name, value in [\n        (\"no-extras\", str(ROOT)),\n        (\"format\", f\"{ROOT}[format]\"),\n        (\"format-nongpl\", f\"{ROOT}[format-nongpl]\"),\n    ]\n]\nREQUIREMENTS = dict(\n    docs=DOCS / \"requirements.txt\",\n)\nREQUIREMENTS_IN = [  # this is actually ordered, as files depend on each other\n    path.parent / f\"{path.stem}.in\" for path in REQUIREMENTS.values()\n]\n\nNONGPL_LICENSES = [\n    \"Apache Software License\",\n    \"BSD License\",\n    \"ISC License (ISCL)\",\n    \"MIT License\",\n    \"Mozilla Public License 2.0 (MPL 2.0)\",\n    \"Python Software Foundation License\",\n    \"The Unlicense (Unlicense)\",\n]\n\nSUPPORTED = [\"3.9\", \"3.10\", \"pypy3.10\", \"3.11\", \"3.12\", \"3.13\"]\nLATEST_STABLE = SUPPORTED[-1]\n\nnox.options.sessions = []\n\n\ndef session(default=True, python=LATEST_STABLE, **kwargs):  # noqa: D103\n    def _session(fn):\n        if default:\n            nox.options.sessions.append(kwargs.get(\"name\", fn.__name__))\n        return nox.session(python=python, **kwargs)(fn)\n\n    return _session\n\n\n@session(python=SUPPORTED)\n@nox.parametrize(\"installable\", INSTALLABLE)\ndef tests(session, installable):\n    \"\"\"\n    Run the test suite with a corresponding Python version.\n    \"\"\"\n    env = dict(JSON_SCHEMA_TEST_SUITE=str(ROOT / \"json\"))\n\n    session.install(\"virtue\", installable)\n\n    if session.posargs and session.posargs[0] == \"coverage\":\n        if len(session.posargs) > 1 and session.posargs[1] == \"github\":\n            posargs = session.posargs[2:]\n            github = Path(os.environ[\"GITHUB_STEP_SUMMARY\"])\n        else:\n            posargs, github = session.posargs[1:], None\n\n        session.install(\"coverage[toml]\")\n        session.run(\n            \"coverage\",\n            \"run\",\n            *posargs,\n            \"-m\",\n            \"virtue\",\n            PACKAGE,\n            env=env,\n        )\n\n        if github is None:\n            session.run(\"coverage\", \"report\")\n        else:\n            with github.open(\"a\") as summary:\n                summary.write(\"### Coverage\\n\\n\")\n                summary.flush()  # without a flush, output seems out of order.\n                session.run(\n                    \"coverage\",\n                    \"report\",\n                    \"--format=markdown\",\n                    stdout=summary,\n                )\n    else:\n        session.run(\"virtue\", *session.posargs, PACKAGE, env=env)\n\n\n@session()\n@nox.parametrize(\"installable\", INSTALLABLE)\ndef audit(session, installable):\n    \"\"\"\n    Audit dependencies for vulnerabilities.\n    \"\"\"\n    session.install(\"pip-audit\", installable)\n    session.run(\"python\", \"-m\", \"pip_audit\")\n\n\n@session()\ndef license_check(session):\n    \"\"\"\n    Check that the non-GPL extra does not allow arbitrary licenses.\n    \"\"\"\n    session.install(\"pip-licenses\", f\"{ROOT}[format-nongpl]\")\n    session.run(\n        \"python\",\n        \"-m\",\n        \"piplicenses\",\n        \"--ignore-packages\",\n\n        # because they're not our deps\n        \"pip-requirements-parser\",\n        \"pip_audit\",\n        \"pip-api\",\n\n        # because pip-licenses doesn't yet support PEP 639 :/\n        \"attrs\",\n        \"jsonschema\",\n        \"referencing\",\n\n        \"--allow-only\",\n        \";\".join(NONGPL_LICENSES),\n    )\n\n\n@session(tags=[\"build\"])\ndef build(session):\n    \"\"\"\n    Build a distribution suitable for PyPI and check its validity.\n    \"\"\"\n    session.install(\"build\", \"docutils\", \"twine\")\n    with TemporaryDirectory() as tmpdir:\n        session.run(\"python\", \"-m\", \"build\", ROOT, \"--outdir\", tmpdir)\n        session.run(\"twine\", \"check\", \"--strict\", tmpdir + \"/*\")\n        session.run(\n            \"python\", \"-m\", \"docutils\", \"--strict\", CHANGELOG, os.devnull,\n        )\n\n\n@session()\ndef secrets(session):\n    \"\"\"\n    Check for accidentally committed secrets.\n    \"\"\"\n    session.install(\"detect-secrets\")\n    session.run(\"detect-secrets\", \"scan\", ROOT)\n\n\n@session(tags=[\"style\"])\ndef style(session):\n    \"\"\"\n    Check Python code style.\n    \"\"\"\n    session.install(\"ruff\")\n    session.run(\"ruff\", \"check\", ROOT)\n\n\n@session()\ndef typing(session):\n    \"\"\"\n    Check static typing.\n    \"\"\"\n    session.install(\"mypy\", \"types-requests\", ROOT)\n    session.run(\"mypy\", \"--config\", PYPROJECT, PACKAGE)\n\n\n@session(tags=[\"docs\"])\n@nox.parametrize(\n    \"builder\",\n    [\n        nox.param(name, id=name)\n        for name in [\n            \"dirhtml\",\n            \"doctest\",\n            \"linkcheck\",\n            \"man\",\n            \"spelling\",\n        ]\n    ],\n)\ndef docs(session, builder):\n    \"\"\"\n    Build the documentation using a specific Sphinx builder.\n    \"\"\"\n    session.install(\"-r\", REQUIREMENTS[\"docs\"])\n    with TemporaryDirectory() as tmpdir_str:\n        tmpdir = Path(tmpdir_str)\n        argv = [\"-n\", \"-T\", \"-W\"]\n        if builder != \"spelling\":\n            argv += [\"-q\"]\n        posargs = session.posargs or [tmpdir / builder]\n        session.run(\n            \"python\",\n            \"-m\",\n            \"sphinx\",\n            \"-b\",\n            builder,\n            DOCS,\n            *argv,\n            *posargs,\n        )\n\n\n@session(tags=[\"docs\", \"style\"], name=\"docs(style)\")\ndef docs_style(session):\n    \"\"\"\n    Check the documentation style.\n    \"\"\"\n    session.install(\n        \"doc8\",\n        \"pygments\",\n        \"pygments-github-lexers\",\n    )\n    session.run(\"python\", \"-m\", \"doc8\", \"--config\", PYPROJECT, DOCS)\n\n\n@session(default=False)\n@nox.parametrize(\n    \"benchmark\",\n    [\n        nox.param(each.stem, id=each.stem)\n        for each in BENCHMARKS.glob(\"[!_]*.py\")\n    ],\n)\ndef bench(session, benchmark):\n    \"\"\"\n    Run a performance benchmark.\n    \"\"\"\n    session.install(\"pyperf\", f\"{ROOT}[format]\")\n    tmpdir = Path(session.create_tmp())\n    output = tmpdir / f\"bench-{benchmark}.json\"\n    session.run(\"python\", BENCHMARKS / f\"{benchmark}.py\", \"--output\", output)\n\n\n@session(default=False)\ndef requirements(session):\n    \"\"\"\n    Update the project's pinned requirements.\n\n    You should commit the result afterwards.\n    \"\"\"\n    session.install(\"pip-tools\")\n    for each in REQUIREMENTS_IN:\n        session.run(\n            \"pip-compile\",\n            \"--resolver\",\n            \"backtracking\",\n            \"--strip-extras\",\n            \"-U\",\n            each.relative_to(ROOT),\n        )\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 6.3583984375,
          "content": "[build-system]\nrequires = [\"hatchling\", \"hatch-vcs\", \"hatch-fancy-pypi-readme\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.version]\nsource = \"vcs\"\n\n[project]\nname = \"jsonschema\"\ndescription = \"An implementation of JSON Schema validation for Python\"\nrequires-python = \">=3.9\"\nlicense = \"MIT\"\nlicense-files = [\"COPYING\"]\nkeywords = [\n    \"validation\",\n    \"data validation\",\n    \"jsonschema\",\n    \"json\",\n    \"json schema\",\n]\nauthors = [\n  { name = \"Julian Berman\", email = \"Julian+jsonschema@GrayVines.com\" },\n]\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Intended Audience :: Developers\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: Implementation :: CPython\",\n  \"Programming Language :: Python :: Implementation :: PyPy\",\n  \"Topic :: File Formats :: JSON\",\n  \"Topic :: File Formats :: JSON :: JSON Schema\",\n]\ndynamic = [\"version\", \"readme\"]\ndependencies = [\n  \"attrs>=22.2.0\",\n  \"jsonschema-specifications>=2023.03.6\",\n  \"referencing>=0.28.4\",\n  \"rpds-py>=0.7.1\",\n\n  \"importlib_resources>=1.4.0;python_version<'3.9'\",\n  \"pkgutil_resolve_name>=1.3.10;python_version<'3.9'\",\n]\n\n[project.optional-dependencies]\nformat = [\n  \"fqdn\",\n  \"idna\",\n  \"isoduration\",\n  \"jsonpointer>1.13\",\n  \"rfc3339-validator\",\n  \"rfc3987\",\n  \"uri_template\",\n  \"webcolors>=1.11\",\n]\nformat-nongpl = [\n  \"fqdn\",\n  \"idna\",\n  \"isoduration\",\n  \"jsonpointer>1.13\",\n  \"rfc3339-validator\",\n  \"rfc3986-validator>0.1.0\",\n  \"uri_template\",\n  \"webcolors>=24.6.0\",\n]\n\n[project.scripts]\njsonschema = \"jsonschema.cli:main\"\n\n[project.urls]\nHomepage = \"https://github.com/python-jsonschema/jsonschema\"\nDocumentation = \"https://python-jsonschema.readthedocs.io/\"\nIssues = \"https://github.com/python-jsonschema/jsonschema/issues/\"\nFunding = \"https://github.com/sponsors/Julian\"\nTidelift = \"https://tidelift.com/subscription/pkg/pypi-jsonschema?utm_source=pypi-jsonschema&utm_medium=referral&utm_campaign=pypi-link\"\nChangelog = \"https://github.com/python-jsonschema/jsonschema/blob/main/CHANGELOG.rst\"\nSource = \"https://github.com/python-jsonschema/jsonschema\"\n\n[tool.hatch.metadata.hooks.fancy-pypi-readme]\ncontent-type = \"text/x-rst\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"README.rst\"\nend-before = \".. start cut from PyPI\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"README.rst\"\nstart-after = \".. end cut from PyPI\\n\\n\\n\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\ntext = \"\"\"\n\n\nRelease Information\n-------------------\n\n\"\"\"\n\n[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]\npath = \"CHANGELOG.rst\"\npattern = \"(^v.+?)\\nv\"\n\n[tool.coverage.html]\nshow_contexts = true\nskip_covered = false\n\n[tool.coverage.run]\nbranch = true\nsource = [\"jsonschema\"]\ndynamic_context = \"test_function\"\n\n[tool.coverage.report]\nexclude_also = [\n  \"if TYPE_CHECKING:\",\n  \"\\\\s*\\\\.\\\\.\\\\.\\\\s*\",\n]\nomit = [\n  \"*/jsonschema/__main__.py\",\n  \"*/jsonschema/benchmarks/*\",\n  \"*/jsonschema/tests/fuzz_validate.py\",\n]\nshow_missing = true\nskip_covered = true\n\n[tool.doc8]\nignore = [\n    \"D000\",  # see PyCQA/doc8#125\n    \"D001\",  # one sentence per line, so max length doesn't make sense\n]\n\n[tool.isort]\ncombine_as_imports = true\nensure_newline_before_comments = true\nfrom_first = true\ninclude_trailing_comma = true\nmulti_line_output = 3\n\n[tool.mypy]\nignore_missing_imports = true\nshow_error_codes = true\nexclude = [\"jsonschema/benchmarks/*\"]\n\n[tool.ruff]\nline-length = 79\nextend-exclude = [\"json\"]\n\n[tool.ruff.lint]\nselect = [\"ALL\"]\nignore = [\n  \"A001\",  # It's fine to shadow builtins\n  \"A002\",\n  \"A003\",\n  \"ARG\",  # This is all wrong whenever an interface is involved\n  \"ANN\",  # Just let the type checker do this\n  \"B006\",  # Mutable arguments require care but are OK if you don't abuse them\n  \"B008\",  # It's totally OK to call functions for default arguments.\n  \"B904\",  # raise SomeException(...) is fine.\n  \"B905\",  # No need for explicit strict, this is simply zip's default behavior\n  \"C408\",  # Calling dict is fine when it saves quoting the keys\n  \"C901\",  # Not really something to focus on\n  \"D105\",  # It's fine to not have docstrings for magic methods.\n  \"D107\",  # __init__ especially doesn't need a docstring\n  \"D200\",  # This rule makes diffs uglier when expanding docstrings\n  \"D203\",  # No blank lines before docstrings.\n  \"D212\",  # Start docstrings on the second line.\n  \"D400\",  # This rule misses sassy docstrings ending with ! or ?\n  \"D401\",  # This rule is too flaky.\n  \"D406\",  # Section headers should end with a colon not a newline\n  \"D407\",  # Underlines aren't needed\n  \"D412\",  # Plz spaces after section headers\n  \"EM101\",  # These don't bother me.\n  \"EM102\",\n  \"FBT\",  # It's worth avoiding boolean args but I don't care to enforce it\n  \"FIX\",  # Yes thanks, if I could it wouldn't be there\n  \"N\",  # These naming rules are silly\n  \"PERF203\",  # try/excepts in loops are sometimes needed\n  \"PLR0911\",  # These metrics are fine to be aware of but not to enforce\n  \"PLR0912\",\n  \"PLR0913\",\n  \"PLR0915\",\n  \"PLR1714\",  # This makes for uglier comparisons sometimes\n  \"PLW0642\",  # Shadowing self also isn't a big deal.\n  \"PLW2901\",  # Shadowing for loop variables is occasionally fine.\n  \"PT\",  # We use unittest\n  \"PYI025\",  # wat, I'm not confused, thanks.\n  \"RET502\",  # Returning None implicitly is fine\n  \"RET503\",\n  \"RET505\",  # These push you to use `if` instead of `elif`, but for no reason\n  \"RET506\",\n  \"RSE102\",  # Ha, what, who even knew you could leave the parens off. But no.\n  \"SIM300\", # Not sure what heuristic this uses, but it's easily incorrect\n  \"SLF001\",  # Private usage within this package itself is fine\n  \"TD\",  # These TODO style rules are also silly\n  \"TRY003\",  # Some exception classes are essentially intended for free-form\n  \"UP007\",  # We support 3.9\n]\n\n[tool.ruff.lint.flake8-pytest-style]\nmark-parentheses = false\n\n[tool.ruff.lint.flake8-quotes]\ndocstring-quotes = \"double\"\n\n[tool.ruff.lint.isort]\ncombine-as-imports = true\nfrom-first = true\n\n[tool.ruff.lint.per-file-ignores]\n\"noxfile.py\" = [\"ANN\", \"D100\", \"S101\", \"T201\"]\n\"docs/*\" = [\"ANN\", \"D\", \"INP001\"]\n\"jsonschema/tests/*\" = [\"ANN\", \"D\", \"RUF012\", \"S\", \"PLR\", \"PYI024\", \"TRY\"]\n\"jsonschema/tests/test_format.py\" = [\"ERA001\"]\n\"jsonschema/benchmarks/*\" = [\"ANN\", \"D\", \"INP001\", \"S101\"]\n"
        }
      ]
    }
  ]
}