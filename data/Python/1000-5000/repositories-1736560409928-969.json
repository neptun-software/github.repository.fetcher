{
  "metadata": {
    "timestamp": 1736560409928,
    "page": 969,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "octodns/octodns",
      "stars": 3226,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".ci-config.json",
          "type": "blob",
          "size": 0.10546875,
          "content": "{\n  \"python_version_current\": \"3.13\",\n  \"python_versions_active\": [\"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n}\n"
        },
        {
          "name": ".dependabot",
          "type": "tree",
          "content": null
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.3359375,
          "content": "# Commit that added in black formatting support\ne116d26eeca0891c31b689e43db5bb60b62f73f6\n# Commit that fixed a bunch of uneeded '...' '...' string joins from ^\nfa4225b625654c51c7b0be6efcfd6a1109768a72\n# Commit that added in isort formatting support\n6be0a8133a4fd9e12e6ac3affbdd69555b6c2503\n# black 24.x\nf936d0fa1fee67bc6048ee80c0dad5c52c031ffd\n"
        },
        {
          "name": ".git_hooks_pre-commit",
          "type": "blob",
          "size": 0.2587890625,
          "content": "#!/bin/sh\n\nset -e\n\nHOOKS=$(dirname \"$0\")\nGIT=$(dirname \"$HOOKS\")\nROOT=$(dirname \"$GIT\")\n\n. \"$ROOT/env/bin/activate\"\n\"$ROOT/script/lint\"\n\"$ROOT/script/format\" --check --quiet || (echo \"Formatting check failed, run ./script/format\" && exit 1)\n\"$ROOT/script/coverage\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3173828125,
          "content": "#\n# Do not add editor or OS specific ignores here. Have a look at adding\n# `excludesfile` to your `~/.gitconfig` to globally ignore such things.\n#\n*.pyc\n.coverage\n.env\n/build/\n/config/\ncoverage.xml\ndist/\nenv/\nexamples/migrating-to-octodns/config/\nhtmlcov/\nnosetests.xml\noctodns.egg-info/\noutput/\ntests/zones/unit.tests.\ntmp/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 36.328125,
          "content": "## v1.?.? - 2024-??-?? - ???\n\n* Deprecation warning for Source.populate w/o the lenient param, to be removed\n  in 2.x\n* Deprecation warning for Provider.populate w/o the processors param, to be\n  removed in 2.x\n* Add YamlProvider.order_mode to allow picking between natural (human)\n  the default when enforce_order=True and simple `sort`.\n* Fix type-o in _build_kwargs handler notification\n* Add support for configuring OwnershipProcessor TXT record's TTL\n\n## v1.10.0 - 2024-10-06 - Lots of little stuff\n\n* Zone name validation checking for double dots, and throwing InvalidNameError\n  rather than base Exception\n* Record validation checks for double dots in names\n* MetaProcessor.include_extra to add support for arbitrary extra values to be\n  set on the meta record.\n* Correctly handled quoted svcparams when parsing SVCB/HTTPS rdata text\n* Fix handling of chunked values (TXT, SPF) when escaped characters land at the\n  split boundaries, don't split escapes from their following chars\n\n## v1.9.1 - 2024-06-21 - What's in a name\n\n* Add `name` to Change.data, and thus PlanJson output\n\n## v1.9.0 - 2024-06-20 - Grab bag\n\n* ICMP & UDP healthcheck protocol support added\n* Improved handling of present, but empty/None config file values.\n* Add PlanJson plan_output support\n* Include `record_type` in Change data\n \n## v1.8.0 - 2024-06-10 - Set the records straight\n\n* Add support for SVCB and HTTPS records\n* Allow DS records to be specified for managed sub-zones, same as NS\n* Fix CAA rdata parsing to allow values with tags\n\n## v1.7.0 - 2024-04-29 - All the knobs and dials\n\n* Support for specifying per-zone change thresholds, to allow for zones\n  where lots of changes are expected frequently to live along side zones\n  where little or no churn is expected.\n* AutoArpa gained support for prioritizing values\n* Fix for EnsureTrailingDots reverting value types back to strings which then\n  failed when rr methods were used on them (e.g. w/octodns-bind)\n\n## v1.6.1 - 2024-03-17 - Didn't we do this already\n\n* Fix env var type handling that was previously fixed in 1.5.1 and then\n  regressed in 1.6.0.\n\n## v1.6.0 - 2024-03-11 - It's a secret, if I told you I'd have to kill you\n\n* Add EnsureTrailingDots processor\n* Beta support for custom secret providers added to Manager.\n\n## v1.5.1 - 2024-03-08 - env/* type conversion fix\n\n* Improved env variable to parameter type conversion logic, avoid converting\n  all numbers to float which caused some formatting issues in things that\n  weren't being careful enough.\n\n## v1.5.0 - 2024-02-26 - Checksums, nested expansion, & flexable values\n\n* Beta support for Manager.enable_checksum and octodns-sync --checksum Allows a\n  safer plan & apply workflow where the apply only moves forward if the apply\n  phase plan exactly matches the previous round's planning.\n* Fix for bug in MetaProcessor _up_to_date check that was failing when there was\n  a plan with a single change type with a single value, e.g. CNAME.\n* Support added for config env variable expansion on nested levels, not just\n  top-level provider/processor keys\n* _ChunkedValue ASCII validation added, SPF & TXT\n* Re-work value/values handling to always try and do the \"right\" thing based on\n  the content, so both singular values and lists will be handled identically\n  regardless of whether the key is value or values. This may result in\n  changes/fixes on the first sync after updating IFF you currently have\n  `values: a-single-thing`, which would have previously been pushed up as bunch\n  of single character values.\n* Record.octodns added to formally make that data \"API\" and Record._octodns is\n  deprecated. The latter has been converted to properties that return the\n  former and emit deprecation warnings.\n\n## v1.4.0 - 2023-12-04 - Minor Meta\n\n* Record.lenient property added similar to other common/standard _octodns data\n* Processor.process_source_and_target_zones added to support modifying both the\n  desired and/or existing zones just prior to computing changes.\n* Fix bug with Record.copy when values is an empty list []\n* Fix an issue in MetaProcessor/Manager.include_meta where include_provider\n  wasn't correctly taking effect\n\n## v1.3.0 - 2023-11-14 - New and improved processors\n\n#### Noteworthy changes\n\n* Added `octodns.__version__` to replace `octodns.__VERSION__` as the former is\n  more of a standard, per pep-8. `__VERSION__` is deprecated and will go away\n  in 2.x\n* Fixed issues with handling of chunking large TXT values for providers that use\n  the in-built `rrs` method\n* Removed code that included sha in module version number when installing from\n  repo as it caused problems with non-binary installs.\n* Fixed a bug/shortcoming in Record.data where it didn't include the `octodns`\n  portion of the record's data. Record.copy also omitted it since it relies on\n  .data for the heavy lifting. There are no known actual problems due to this\n  bug, but it's possible (non-public) third party providers are susceptible. The\n  most likely place to hit issues in is tests where data and/or copy are abused.\n\n#### Stuff\n\n* Added ZoneNameFilter processor to enable ignoring/alerting on type-os like\n  octodns.com.octodns.com\n* NetworkValueAllowlistFilter/NetworkValueRejectlistFilter added to\n  processors.filter to enable filtering A/AAAA records based on value. Can be\n  useful if you have records with non-routable values in an internal copy of a\n  zone, but want to exclude them when pushing the same zone publically (split\n  horizon)\n* ExcludeRootNsChanges processor that will error (or warn) if plan includes a\n  change to root NS records\n* Include the octodns special section info in `Record.__repr__`, makes it easier\n  to debug things with providers that have special functionality configured\n  there.\n* Most processor.filter processors now support an include_target flag that can\n  be set to False to leave the target zone data untouched, thus remove any\n  existing filtered records. Default behavior is unchanged and filtered records\n  will be completely invisible to octoDNS\n\n## v1.2.1 - 2023-09-29 - Now with fewer stale files\n\n* Update script/release to do clean room dist builds\n\n## v1.2.0 - 2023-09-28 - Bunch more bug fixes\n\n* Record.from_rrs supports `source` parameter\n* Record.parse_rdata_text unquotes any quoted (string) values\n* Fix crash bug when using the YamlProvider with a directory that contains a\n  mix of split and non-split zone yamls. See https://github.com/octodns/octodns/issues/1066\n* Fix discovery of zones from different sources when there are multiple dynamic\n  zones. See https://github.com/octodns/octodns/issues/1068\n\n## v1.1.1 - 2023-09-16 - Doh! Fix that one little thing\n\n* Address a bug in the handling of loading auto-arpa manager configuration.\n\n## v1.1.0 - 2023-09-13 - More than enough for a minor release\n\n#### Noteworthy changes\n\n* New dynamic zone config support that allows wildcard entries in the octoDNS\n  config to be expanded by the source provider(s). See\n  [Dynamic Zone Config](/README.md#dynamic-zone-config) for more information.\n* SplitYamlProvider has been deprecated and will be removed in 2.0. YamlProvider\n  now includes the ability to process split zones when configured to do so and\n  allows for more flexibility in how things are laid out than was previously\n  possible. This includes the ability to split some zones and not others and\n  even to have partially split zones with some records in the primary zone YAML\n  and others in a split directory. See YamlProvider documentation for more info.\n* YamlProvider now supports a `shared_filename` that can be used to add a set of\n  common records across all zones using the provider. It can be used stand-alone\n  or in combination with zone files and/or split configs to aid in DRYing up DNS\n* YamlProvider now supports an `!include` directive which enables shared\n  snippets of config to be reused across many records, e.g. common dynamic rules\n  across a set of services with service-specific pool values or a unified SFP\n  value included in TXT records at the root of all zones.\n* SpfRecord is formally deprecated with an warning and will become a\n  ValidationError in 2.x\n* SpfDnsLookupProcessor is formally deprcated in favor of the version relocated\n  into https://github.com/octodns/octodns-spf and will be removed in 2.x\n* MetaProcessor added to enable some useful/cool options for debugging/tracking\n  DNS changes. Specifically timestamps/uuid so you can track whether changes\n  that have been pushed to providers have propogated/transferred correctly.\n\n#### Stuff\n\n* Add context to general configuration and Record validation, e.g.\n  Some problem at filename.yaml, line 42, column 14. Our custom Yaml Loaders\n  attach this context information, arbitrary string. Other providers may do so\n  by creating ContextDict to pass as `data` into Record.new.\n* Add --all option to octodns-validate to enable showing all record validation\n  errors (as warnings) rather than exiting on the first. Exit code is non-zero\n  when there are any validation errors.\n* New `post_processors` manager configuration parameter to add global processors\n  that run AFTER zone-specific processors. This should allow more complete\n  control over when processors are run.\n\n## v1.0.0 - 2023-07-30 - The One\n\n1.0 marks a point at which we can formally deprecate things that will be\ngoing away with 2.0 more than specific functionality that has been added or\nhaving reached a notable level of stability (beyond what is normal.) It is also\nlong (years) overdue.\n\n#### Noteworthy changes\n\n* `geo` records are deprecated.\n\n#### Stuff\n\n* Removal of a Python 3.7 specific import work-around now that it's no longer an\n  active/supported version. Also bumps required minimum version of Python 3.8\n\n## v1.0.0.rc1 - 2023-07-20 - The last one before the 1s\n\n* Record and Zone validation now ensures there's no whitespace in names\n* OwnershipProcessor managed records always add w/lenient=True, this allows\n  ownership to be marked in the same zone for delegation NS records.\n* octodns-report access --lenient flag to allow running reports with records\n  sourced from providers with non-compliant record data.\n* Correctly handle FQDNs in TinyDNS config files that end with trailing .'s\n* Complete rewrite of TinyDnsBaseSource to fully implement the spec and the ipv6\n  extensions\n\n## v1.0.0.rc0 - 2023-05-16 - First of the ones\n\n#### Noteworthy changes\n\n* 1.x Deprecation removals\n   * Provider, Source, and Processor shims removed, they've been warnings for >\n     1yr.  Everything should be using and referring to provider-specific\n     modules now.\n   * Provider.strict_supports defaults to true, can be returned to the old\n     behavior by setting strict_supports=False in your provider params.\n* octodns.record has been broken up into multiple files/modules. Most of the\n  primary things that were available at that module path still will be, but if\n  you are importing things like idna_encode/decode that actually live elsewhere\n  from octodns.record you'll need to update and pull them from their actual\n  home. Classes beginning with _ are not exported from octodns.record any\n  longer as they were considered private/protected.\n* Beta support for auto-arpa has been added, See the\n  [auto-arpa documentation](/docs/auto_arpa.md) for more information.\n* Support for subnet targeting in dynamic records, see\n  [this section](/docs/dynamic_records.md#subnets) of dynamic records\n  documentation for more information.\n* Enhanced validations on dynamic rules to encourage best practices\n   * The last rule must be a catch-all w/o any targeted geos or subnets\n   * Geos must not be repeated in multiple rules\n   * Geos in rules and subsequent rules must be ordered most to least specific,\n     e.g. NA-US-TN must come before NA-US, which must occur before NA\n   * Similarly, subnets must not be repeated in multiple rules, and various\n     subnet rules must be ordered such that most specific subnets appear before\n     less specific ones; e.g. 10.1.1.0/24 must appear before 10.1.0.0/16.\n   * Subnet targeting is considered to be more specific than geo targeting, so\n     subnet-only rules must appear before any subnet+geo rules, followed by\n     geo-only rules (and catch-all rule w/o any geos/subnets in the end)\n\n#### Stuff\n\n* Added new DsRecord type (provider support will be added over time)\n* Added simple IgnoreRootNsFilter\n* Minor refactor on YamlProvider to add get_filenames making it a bit easier to\n  create specialized providers inheriting from it\n* Fixed bug in OwnershipProcessor when all changes were removed from plans\n\n## v0.9.21 - 2022-10-16 - Last of the oughts\n\n* Shim AxfrSource and ZoneFileSource post extraction into\n  https://github.com/octodns/octodns-bind\n\n## v0.9.20 - 2022-10-05 - International friendly\n\n#### Noteworthy changes\n\n* Added support for automatic handling of IDNA (utf-8) zones. Everything is\n  stored IDNA encoded internally. For ASCII zones that's a noop. For zones with\n  utf-8 chars they will be converted and all internals/providers will see the\n  encoded version and work with it without any knowledge of it having been\n  converted. This means that all providers will automatically support IDNA as of\n  this version. IDNA zones will generally be displayed in the logs in their\n  decoded form. Both forms should be accepted in command line arguments.\n  Providers may need to be updated to display the decoded form in their logs,\n  until then they'd display the IDNA version.\n* IDNA value support for Record types that hold FQDNs: ALIAS, CNAME, DNAME, PTR,\n  MX, NS, and SRV.\n* Support for configuring global processors that apply to all zones with\n  `manager.processors`\n\n#### Stuff\n\n* Addressed shortcomings with YamlProvider.SUPPORTS in that it didn't include\n  dynamically registered types, was a static list that could have drifted over\n  time even ignoring 3rd party types.\n* Provider._process_desired_zone needed to call Provider.supports rather than\n  doing it's own `_type in provider.SUPPORTS`. The default behavior in\n  Source.supports is ^, but it's possible for providers to override that\n  behavior and do special checking and `_process_desired_zone` wasn't taking\n  that into account.\n* Now that it's used as it needed to be YamlProvider overrides\n  Provider.supports and just always says Yes so that any dynamically registered\n  types will be supported.\n* Add TtlRestrictionFilter processor for adding ttl restriction/checking\n* NameAllowlistFilter & NameRejectlistFilter implementations to support\n  filtering on record names to include/exclude records from management.\n* All Record values are now first class objects. This shouldn't be an externally\n  visible change, but will enable future improvements.\n* --quiet command line option added to raise log level to WARNING, plan\n  output now comes from `plan` logger rather than `Manager` so that it can stay\n  at info\n* --logging-config command line option added to allow complete logging config\n  customization, see\n  https://docs.python.org/3/library/logging.config.html#logging-config-dictschema\n  for file format and\n  https://github.com/octodns/octodns/pull/945#issuecomment-1262839550 for an\n  example config\n\n## v0.9.19 - 2022-08-14 - Subzone handling\n\n* Fixed issue with sub-zone handling introduced in 0.9.18\n\n## v0.9.18 - 2022-08-09 - Internationalization\n\n* Added octodns.idna idna_encode/idna_decode helpers, providers will need to\n  individually add support via these helpers though :-/\n* `black` formatting implemented (including .git-blame-ignore-revs)\n* --output-provider support for dump to allow configurable dump\n  formatting/details\n* TLSA record type support\n* Subzones support for skipping levels\n\n## v0.9.17 - 2022-04-02 - Registration required\n\n#### Noteworthy changes\n\n* The changes in plans are now ordered based on change type prior to\n  considering the record name and type as was previously done. The chosen\n  order is: deletes, creates, updates. The reason for that many providers make\n  changes one at a time. When changing the type of a record, e.g. from A to\n  CNAME of vice versa this is done by deleting the old and creating the new.\n  If the CNAME create happens before the A delete it will often violate\n  rules against having typed records live at the same node as a CNAME. Several\n  providers have always handled this by sorting the changes themselves. This\n  just standardizes what they are doing as many other providers appear to need\n  to do so, but weren't. There was an ordering before, but it was essentially\n  arbitrarily picked.\n* Record.register_type added so that providers can register custom record\n  types, see [docs/records.md](docs/records.md) for more information\n* New `octodns-versions` command which will log out the version of octodns and\n  any provider/processor/plan_output modules you are using.\n\n#### Stuff\n\n* Manager includes the octoDNS version in its init log line\n* Non-official release installs will now include a bit of the sha to indicate\n  specifically what revision is being used, e.g. 0.9.17+abcdef12, these roughly\n  follow PEP440 guidelines\n\n## v0.9.16 - 2022-03-04 - Manage the root of the problem\n\n#### Noteworthy changes\n\n* Foundational support for root NS record management.\n   * YamlProvider has it enabled and in general everyone should add root NS\n     records that match what is in their provider(s) as of this release if they\n     aren't already there.\n   * Other providers will add root NS support over time following this release\n     once they have had the chance to investigate the functionality and\n     implement management if possible with whatever accomidations are required.\n   * Watch your providers README.md and CHANGELOG.md for support and more\n     information.\n   * Root NS record changes will always require `--force` indicating that they\n     are impactful changes that need a careful :eyes:\n\n#### Stuff\n\n* _AggregateTarget has more complete handling of SUPPORTS* functionality,\n  mostly applicable for the compare operation.\n* Fix null MX record validation error introduced in 0.9.15, `.` is again\n  allowed as a valid `exchange` value.\n\n## v0.9.15 - 2022-02-07 - Where have all the providers gone?\n\n#### Noteworthy changes\n\n* Providers extracted from octoDNS core into individual repos\n  https://github.com/octodns/octodns/issues/622 &\n  https://github.com/octodns/octodns/pull/822 for more information.\n   * [AzureProvider](https://github.com/octodns/octodns-azure/)\n   * [AkamaiProvider](https://github.com/octodns/octodns-edgedns/)\n   * [CloudflareProvider](https://github.com/octodns/octodns-cloudflare/)\n   * [ConstellixProvider](https://github.com/octodns/octodns-constellix/)\n   * [DigitalOceanProvider](https://github.com/octodns/octodns-digitalocean/)\n   * [DnsimpleProvider](https://github.com/octodns/octodns-dnsimple/)\n   * [DnsMadeEasyProvider](https://github.com/octodns/octodns-dnsmadeeasy/)\n   * [DynProvider](https://github.com/octodns/octodns-dynprovider/)\n   * [EasyDnsProvider](https://github.com/octodns/octodns-easydns/)\n   * [EtcHostsProvider](https://github.com/octodns/octodns-etchosts/)\n   * [GandiProvider](https://github.com/octodns/octodns-gandi/)\n   * [GcoreProvider](https://github.com/octodns/octodns-gcore/)\n   * [GoogleCloudProvider](https://github.com/octodns/octodns-googlecloud/)\n   * [HetznerProvider](https://github.com/octodns/octodns-hetzner/)\n   * [MythicBeastsProvider](https://github.com/octodns/octodns-mythicbeasts/)\n   * [Ns1Provider](https://github.com/octodns/octodns-ns1/)\n   * [OvhProvider](https://github.com/octodns/octodns-ovh/)\n   * [PowerDnsProvider](https://github.com/octodns/octodns-powerdns/)\n   * [RackspaceProvider](https://github.com/octodns/octodns-rackspace/)\n   * [Route53Provider](https://github.com/octodns/octodns-route53/) also\n     AwsAcmMangingProcessor\n   * [SelectelProvider](https://github.com/octodns/octodns-selectel/)\n   * [TransipProvider](https://github.com/octodns/octodns-transip/)\n   * [UltraDnsProvider](https://github.com/octodns/octodns-ultradns/)\n* As part of the extraction work octoDNS's requirements (setup.py and .txt\n  files) have been updated and minimized and a helper script,\n  script/update-requirements has been added to help manage the txt files going\n  forward.\n\n#### Prior to extraction\n\n* NS1 provider has received improvements to the dynamic record implementation.\n  As a result, if octoDNS is downgraded from this version, any dynamic records\n  created or updated using this version will show an update.\n* An edge-case bug related to geo rules involving continents in NS1 provider\n  has been fixed in this version. However, it will not show/fix the records that\n  match this edge-case. See https://github.com/octodns/octodns/pull/809 for\n  more information. If octoDNS is downgraded from this version, any dynamic\n  records created or updated using this version and matching the said edge-case\n  will not be read/parsed correctly by the older version and will show a diff.\n* Transip was updated to their new client api\n\n#### Stuff\n\n* Additional FQDN validation to ALIAS/CNAME value, MX exchange, SRV target and\n  tests of the functionality.\n* Improvements around dynamic record value weights allowing finer grained\n  control\n\n## v0.9.14 - 2021-10-10 - A new supports system\n\n#### Noteworthy changes\n\n* Provider `strict_supports` param added, currently defaults to `false`, along\n  with Provider._process_desired_zone this forms the foundations of a new\n  \"supports\" system where providers will warn or error (depending on the value\n  of `strict_supports`) during planning about their inability to do what\n  they're being asked. When `false` they will warn and \"adjust\" the desired\n  records. When true they will abort with an error indicating the problem. Over\n  time it is expected that all \"supports\" checking/handling will move into this\n  paradigm and `strict_supports` will likely be changed to default to `true`.\n* Zone shallow copy support, reworking of Processors (alpha) semantics\n* NS1 NA target now includes `SX` and `UM`. If `NA` continent is in use in\n  dynamic records care must be taken to upgrade/downgrade to v0.9.13.\n* Ns1Provider now supports a new parameter, shared_notifylist, which results in\n  all dynamic record monitors using a shared notify list named 'octoDNS NS1\n  Notify List'. Only newly created record values will use the shared notify\n  list. It should be safe to enable this functionality, but existing records\n  will not be converted. Note: Once this option is enabled downgrades to\n  previous versions of octoDNS are discouraged and may result in undefined\n  behavior and broken records. See https://github.com/octodns/octodns/pull/749\n  for related discussion.\n* TransipProvider removed as it currently relies on `suds` which is broken in\n  new python versions and hasn't seen a release since 2010. May return with\n  https://github.com/octodns/octodns/pull/762\n\n#### Stuff\n\n* Fully remove python 2.7 support & sims\n* Dynamic record pool status flag: up/down/obey added w/provider support as\n  possible.\n* Support for multi-value PTRs where providers allow them\n* Normalize IPv6 addresses to avoid false changes and simplify providers\n* Include pure-python wheel distirubtions in release builds\n* Improvements and updates to AzureProvider, especially w/respect to dynamic\n  records.\n* NS1Provider support for IPv6 monitors and general caching/performance\n  improvements\n* Route53Provider.get_zones_by_name option to avoid paging through huge lists\n  and hitting rate limits\n* Misc Route53Provider\n* Ensure no network access during testing (helps with runtime)\n* Sped up the long pole unit tests\n* Misc. ConstellixProvider, DigitalOceanProvider, GCoreProvider, and\n  Route53Provider fixes & improvements\n\n## v0.9.13 - 2021-07-18 - Processors Alpha\n\n#### Noteworthy changes\n\n* Alpha support for Processors has been added. Processors allow for hooking\n  into the source, target, and planing process to make nearly arbitrary changes\n  to data. See the [octodns/processor/](/octodns/processor) directory for\n  examples. The change has been designed to have no impact on the process\n  unless the `processors` key is present in zone configs.\n* Fixes NS1 provider's geotarget limitation of using `NA` continent. Now, when\n  `NA` is used in geos it considers **all** the countries of `North America`\n  instead of just `us-east`, `us-west` and `us-central` regions\n* `SX' &amp; 'UM` country support added to NS1Provider, not yet in the North\n   America list for backwards compatibility reasons. They will be added in the\n   next releaser.\n\n#### Stuff\n\n* Lots of progress on the partial/beta support for dynamic records in Azure,\n  still not production ready.\n* NS1 fix for when a pool only exists as a fallback\n* Zone level lenient flag\n* Validate weight makes sense for pools with a single record\n* UltraDNS support for aliases and general fixes/improvements\n* Misc doc fixes and improvements\n\n## v0.9.12 - 2021-04-30 - Enough time has passed\n\n#### Noteworthy changes\n\n* Formal Python 2.7 support removed, deps and tooling were becoming\n  unmaintainable\n* octodns/octodns move, from github/octodns, more to come\n\n#### Stuff\n\n* ZoneFileSource supports specifying an extension & no files end in . to better\n  support Windows\n* LOC record type support added\n* Support for pre-release versions of PowerDNS\n* PowerDNS delete before create which allows A <-> CNAME etc.\n* Improved validation of fqdn's in ALIAS, CNAME, etc.\n* Transip support for NS records\n* Support for sending plan output to a file\n* DNSimple uses zone api rather than domain to support non-registered stuff,\n  e.g. reverse zones.\n* Support for fallback-only dynamic pools and related fixes to NS1 provider\n* Initial Hetzner provider\n\n## v0.9.11 - 2020-11-05 - We still don't know edition\n\n#### Noteworthy changes\n\n* ALIAS records only allowed at the root of zones - see `leient` in record docs\n  for work-arounds if you really need them.\n\n#### New Providers\n\n* Gandi LiveDNS\n* UltraDNS\n* easyDNS\n\n#### Stuff\n\n* Add support for zones aliases\n* octodns-compare: Prefix filtering and status code on on mismatch\n* Implement octodns-sync --source\n* Adding environment variable record injection\n* Add support for wildcard SRV records, as shown in RFC 2782\n* Add healthcheck option 'request_interval' for Route53 provider\n* NS1 georegion, country, and catchall need to be separate groups\n* Add the ability to mark a zone as lenient\n* Add support for geo-targeting of CA provinces\n* Update geo_data to pick up a couple renames\n* Cloudflare: Add PTR Support, update rate-limit handling and pagination\n* Support PowerDNS 4.3.x\n* Added support for TCP health checking of dynamic records\n\n## v0.9.10 - 2020-04-20 - Dynamic NS1 and lots of misc\n\n* Added support for dynamic records to Ns1Provider, updated client and rate\n  limiting implementation\n* Moved CI to use GitHub Actions\n* Set up dependabot to automatically PR requirements updates\n* Pass at bumping all of the requirements and Dependabot them going forward\n* Enhanced `dynamic` pool validation rules\n* Delegation set support for Route53 and fix for CNAME/A ordering issues\n* DNSimple sandbox support\n* OVHProvider support for CAA\n* Akamai rename FastDNS to EdgeDNS\n* Transip bumped to 2.1.2 which should get away from its SOAP api which is EOLd\n\n## v0.9.9 - 2019-11-04 - Python 3.7 Support\n\n* Extensive pass through the whole codebase to support Python 3\n   * Tons of updates to replace `def __cmp__` with `__eq__` and friends to\n     preserve custom equality and ordering behaviors that are essential to\n     octoDNS's processes.\n   * Quite a few objects required the addition of `__eq__` and friends so that\n     they're sortable in Python 3 now that those things are more strict. A few\n     places this required jumping through hoops of sorts. Thankfully our tests\n     are pretty thorough and caught a lot of issues and hopefully the whole\n     plan, review, apply process will backstop that.\n   * Explicit ordering of changes by (name, type) to address inconsistent\n     ordering for a number of providers that just convert changes into API\n     calls as they come. Python 2 sets ordered consistently, Python 3 they do\n     not. https://github.com/octodns/octodns/pull/384/commits/7958233fccf9ea22d95e2fd06c48d7d0a4529e26\n   * Route53 `_mod_keyer` ordering wasn't 100% complete and thus unreliable and\n     random in Python 3. This has been addressed and may result in value\n     reordering on next plan, no actual changes in behavior should occur.\n   * `incf.countryutils` (in pypi) was last released in 2009 is not python 3\n     compatible (it's country data is also pretty stale.) `pycountry_convert`\n     appears to have the functionality required to replace its usage so it has\n     been removed as a dependency/requirement.\n   * Bunch of additional unit tests and supporting config to exercise new code\n     and verify things that were run into during the Python 3 work\n   * lots of `six`ing of things\n* Validate Record name & fqdn length\n\n## v0.9.8 - 2019-09-30 - One with no changes b/c PyPi description problems\n\n* No material changes\n\n## v0.9.7 - 2019-09-30 - It's about time\n\n* AkamaiProvider, ConstellixProvider, MythicBeastsProvider, SelectelProvider,\n  &amp; TransipPovider providers added\n* Route53Provider separator fix\n* YamlProvider export error around stringification\n* PyPi markdown rendering fix\n\n## v0.9.6 - 2019-07-16 - The little one that fixes stuff from the big one\n\n* Reduced dynamic record value weight range to 0-15 so that Dyn and Route53\n  match up behaviors. Dyn is limited to 0-15 and scaling that up would lose\n  resolution that couldn't be recovered during populate.\n* Addressed issues with Route53 change set ordering for dynamic records\n* Ignore unsupported record types in DigitalOceanProvider\n* Fix bugs in Route53 extra changes handling and health check managagement\n\n## v0.9.5 - 2019-05-06 - The big one, with all the dynamic stuff\n\n* dynamic record support, essentially a v2 version of geo records with a lot\n  more flexibility and power. Also support dynamic CNAME records (alpha)\n* Route53Provider dynamic record support\n* DynProvider dynamic record support\n* SUPPORTS_DYNAMIC is an optional property, defaults to False\n* Route53Provider health checks support disabling latency measurement\n* CloudflareProvider SRV record unpacking fix\n* DNSMadeEasy provider uses supports to avoid blowing up on unknown record\n  types\n* Updates to AzureProvider lib versions\n* Normalize MX/CNAME/ALIAS/PTR value to lower case\n* SplitYamlProvider support added\n* DynProvider fix for Traffic Directors association to records, explicit rather\n  than \"looks close enough\"\n* TinyDNS support for TXT and AAAA records and fixes to ; escaping\n* pre-commit hook requires 100% code coverage\n\n## v0.9.4 - 2019-01-28 - The one with a bunch of stuff, before the big one\n\n* A bunch of \"dynamic\" stuff that'll be detailed in the next release when\n  providers actually support it :grin:\n* Route53Provider adds support for using session tokens\n* Added support for proxying Cloudflare ALIAS records\n* Dyn CAA TTL fix\n* Documentation fixes and improvements\n* natsort version bump to address setup issues\n* DNSSimple TXT record handling fixes, ; it's always ;\n* Route53Provider support for sessiom tokens\n* Add ALIAS to the list of Cloudflare record types that support proxying\n* Fix for TTL bug in Dyn CCA records\n* Records updated so that 'octodns' record metadata is persisted through\n  YamlProvider\n* Added --version support to ArguementParser (thus all commands)\n\n## v0.9.3 - 2018-10-29 - Misc. stuff sort of release\n\n* ZoneFile source added\n* Major rework/improvements to the Cloudflare record update process, fixed bugs\n  and optimized it quite a bit\n* Add ability to manage Cloudflare proxy flag\n* Bump requests version to 2.20.0\n\n## v0.9.2 - 2018-08-20 - More sources\n\n* EtcHostsProvider implementation to create static/emergency best effort\n  content that can be used in /etc/hosts to resolve things.\n* Add lenient support to Zone.add_record, allows populate from providers that\n  have allowed/created invalid data and situations where a sub-zone is being\n  extracted from a parent, but the records still exist in the remote provider.\n* AXFR source support added\n* google-cloud-dns requirement instead of general package\n\n## v0.9.1 - 2018-05-21 - Going backwards with setup.py\n\n### NOTICE\n\nUsing this version on existing records with `geo` will result in\nrecreating all health checks. This process has been tested pretty thoroughly to\ntry and ensure a seamless upgrade without any traffic shifting around. It's\nprobably best to take extra care when updating and to try and make sure that\nall health checks are passing before the first sync with `--doit`. See\n[#67](https://github.com/octodns/octodns/pull/67) for more information.\n\n* Major update to geo healthchecks to allow configuring host (header), path,\n  protocol, and port [#67](https://github.com/octodns/octodns/pull/67)\n* SSHFP algorithm type 4\n* NS1 and DNSimple support skipping unsupported record types\n* Revert back to old style setup.py &amp; requirements.txt, setup.cfg was\n  causing too much pita\n\n## v0.9.0 - 2018-03-26 - Way too long since we last met\n\n* Way way way too much to list out here, shouldn't have waited so long\n* Initial NS1 geo support\n* Major reworking of `CloudflareProvider`'s update process, was only partially\n  functional before, also ignore proxied records\n* Fixes and improvements to better support non-ascii records and zones\n* Plans indicate when Zones are going to be created\n* Fix for `GoogleCloudProvider` handling of ; escapes\n* Skip Alias recordsets for Route53 (unsupported concept/type)\n* Make sure that Record geo values are sorted to prevent false diffs that can\n  never be fixed\n* `DynProvider` fix to safely roll rulesets, things could end up on rules\n  without a pool and/or hitting the default rule previously.\n\n## v0.8.8 - 2017-10-24 - Google Cloud DNS, Large TXT Record support\n\n* Added support for \"chunking\" TXT records where individual values were larger\n  than 255 chars. This is common with DKIM records involving multiple\n  providers.\n* Added `GoogleCloudProvider`\n* Configurable `UnsafePlan` thresholds to allow modification of how many\n  updates/deletes are allowed before a plan is declared dangerous.\n* Manager.dump bug fix around empty zones.\n* Prefer use of `.` over `source` in shell scripts\n* `DynProvider` warns when it ignores unrecognized traffic directors.\n\n## v0.8.7 - 2017-09-29 - OVH support\n\nAdds an OVH provider.\n\n## v0.8.6 - 2017-09-06 - CAA record type,\n\nMisc fixes and improvements.\n\n* Azure TXT record fix\n* PowerDNS api support for https\n* Configurable Route53 max retries and max-attempts\n* Improved key ordering error message\n\n## v0.8.5 - 2017-07-21 - Azure, NS1 escaping, & large zones\n\nRelatively small delta this go around. No major themes or anything, just steady\nprogress.\n\n* AzureProvider added thanks to work by\n  [Heesu Hwang](https://github.com/h-hwang).\n* Fixed some escaping issues with NS1 TXT and SPF records that were tracked down\n  with the help of [Blake Stoddard](https://github.com/blakestoddard).\n* Some tweaks were made to Zone.records to vastly improve handling of zones with\n  very large numbers of records, no more O(N^2).\n\n## v0.8.4 - 2017-06-28 - It's been too long\n\nLots of updates based on our internal use, needs, and feedback & suggestions\nfrom our OSS users. There's too much to list out since the previous release was\ncut, but I'll try to cover the highlights/important bits and promise to do\nbetter in the future :fingers_crossed:\n\n#### Major:\n\n* Complete rework of record validation with lenient mode support added to\n  octodns-dump so that data with validation problems can be dumped to config\n  files as a starting point. octoDNS now also ignores validation errors when\n  pulling the current state from a provider before planning changes. In both\n  cases this is best effort.\n* Naming of record keys are based on RFC-1035 and friends, previous names have\n  been kept for backwards compatibility until the 1.0 release.\n* Provider record type support is now explicit, i.e. opt-in, rather than\n  opt-out. This prevents bugs/oversights in record handling where providers\n  don't support (new) record types and didn't correctly ignore them.\n* ALIAS support for DNSimple, Dyn, NS1, PowerDNS\n* Ignored record support added, `octodns:\\n  ignored: True`\n* Ns1Provider added\n\n#### Miscellaneous\n\n* Use a 3rd party lib for natural sorting of keys, rather than my old\n  implementation. Sorting can be disabled in the YamlProvider with\n  `enforce_order: False`.\n* Semi-colon/escaping fixes and improvements.\n* Meta record support, `TXT octodns-meta.<zone>`. For now just\n  `provider=<provider-id>`. Optionally turned on with `include_meta` manager\n  config val.\n* Validations check for CNAMEs co-existing with other records and error out if\n  found. Was a common mistaken/unknown issue and this surfaces the problem\n  early.\n* Sizeable refactor in the way Route53 record translation works to make it\n  cleaner/less hacky\n* Lots of docs type-o fixes\n* Fixed some pretty major bugs in DnsimpleProvider\n* Relax UnsafePlan checks a bit, more to come here\n* Set User-Agent header on Dyn health checks\n\n## v0.8.0 - 2017-03-14 - First public release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1533203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at opensource@github.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6728515625,
          "content": "# Contributing\n\nHi there! We're thrilled that you'd like to contribute to octoDNS. Your help is essential for keeping it great.\n\nPlease note that this project adheres to the [Contributor Covenant Code of Conduct](/CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\nIf you have questions, or you'd like to check with us before embarking on a major development effort, please [open an issue](https://github.com/octodns/octodns/issues/new).\n\n## How to contribute\n\nThis project uses the [GitHub Flow](https://guides.github.com/introduction/flow/). That means that the `main` branch is stable and new development is done in feature branches. Feature branches are merged into the `main` branch via a Pull Request.\n\n0. Fork and clone the repository\n0. Configure and install the dependencies: `./script/bootstrap`\n0. Activate virtual environment: `source env/bin/activate`\n0. Make sure the tests pass on your machine: `./script/test`\n0. Create a new branch: `git checkout -b my-branch-name`\n0. Make your change, add tests, and make sure the tests still pass\n0. Make sure that `./script/lint` passes without any warnings\n0. Make sure that coverage is at :100:% `./script/coverage` and open `htmlcov/index.html`\n   * You can open PRs for :eyes: & discussion prior to this\n0. Push to your fork and submit a pull request\n\nWe will handle updating the version, tagging the release, and releasing the gem. Please don't bump the version or otherwise attempt to take on these administrative internal tasks as part of your pull request.\n\nHere are a few things you can do that will increase the likelihood of your pull request being accepted:\n\n* Follow [pep8](https://www.python.org/dev/peps/pep-0008/)\n\n- Write thorough tests. No PRs will be merged without :100:% code coverage. More than that tests should be very thorough and cover as many (edge) cases as possible. We're working with DNS here and bugs can have a major impact so we need to do as much as reasonably possible to ensure quality. While :100:% doesn't even begin to mean there are no bugs, getting there often requires close inspection & a relatively complete understanding of the code. More times than not the endeavor will uncover at least minor problems.\n\n- Bug fixes require specific tests covering the addressed behavior.\n\n- Write or update documentation. If you have added a feature or changed an existing one, please make appropriate changes to the docs. Doc-only PRs are always welcome.\n\n- Keep your change as focused as possible. If there are multiple changes you would like to make that are not dependent upon each other, consider submitting them as separate pull requests.\n\n- We target Python 3, support for Python 2 has been dropped.\n\n- Write a [good commit message](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html).\n\n## Development setup\n\n```\n./script/bootstrap\nsource env/bin/activate\n```\n\nSee the [`script/`](/script) if you'd like to run tests and coverage ([`script/coverage`](/script/coverage)) and coverage ([`script/lint`](/script/lint)). After bootstrapping and sourcing the `env/` commands in the [`octodns/cmds/`](/octodns/cmds) directory can be run with `PYTHONPATH=. ./octodns/cmds/sync.py ...`\n\n## License note\n\nWe can only accept contributions that are compatible with the MIT license.\n\nIt's OK to depend on gems licensed under either Apache 2.0 or MIT, but we cannot add dependencies on any gems that are licensed under GPL.\n\nAny contributions you make must be under the MIT license.\n\n## Resources\n\n- [Contributing to Open Source on GitHub](https://guides.github.com/activities/contributing-to-open-source/)\n- [Using Pull Requests](https://help.github.com/articles/using-pull-requests/)\n- [GitHub Help](https://help.github.com)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1025390625,
          "content": "MIT License\n\nCopyright (c) 2021 Ross McFarland & the octoDNS Maintainers\nCopyright (c) 2017 GitHub, Inc.\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.28515625,
          "content": "include CHANGELOG.md\ninclude CODE_OF_CONDUCT.md\ninclude CONTRIBUTING.md\ninclude LICENSE\ninclude README.md\ninclude requirements-dev.txt\ninclude requirements.txt\ninclude script/*\nrecursive-include docs *.png *.md\nrecursive-include tests *.json *.py *.txt *.yaml\nrecursive-include tests/zones *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.4677734375,
          "content": "<img src=\"https://raw.githubusercontent.com/octodns/octodns/main/docs/logos/octodns-logo.png?\" alt=\"octoDNS Logo\" height=251 width=404>\n\n## DNS as code - Tools for managing DNS across multiple providers\n\nIn the vein of [infrastructure as\ncode](https://en.wikipedia.org/wiki/Infrastructure_as_Code) octoDNS provides a set of tools & patterns that make it easy to manage your DNS records across multiple providers. The resulting config can live in a repository and be [deployed](https://github.com/blog/1241-deploying-at-github) just like the rest of your code, maintaining a clear history and using your existing review & workflow.\n\nThe architecture is pluggable and the tooling is flexible to make it applicable to a wide variety of use-cases. Effort has been made to make adding new providers as easy as possible. In the simple case that involves writing of a single `class` and a couple hundred lines of code, most of which is translating between the provider's schema and octoDNS's. More on some of the ways we use it and how to go about extending it below and in the [/docs directory](/docs).\n\n## Table of Contents\n\n* [Getting started](#getting-started)\n   * [Workspace](#workspace)\n      * [Installing a specific commit SHA](#installing-a-specific-commit-sha)\n   * [Config](#config)\n      * [Dynamic Zone Config](#dynamic-zone-config)\n      * [Static Zone Config](#static-zone-config)\n      * [General Configuration Concepts](#general-configuration-concepts)\n      * [Quick Example Record](#quick-example-record)\n   * [Noop](#noop)\n   * [Making changes](#making-changes)\n   * [Workflow](#workflow)\n   * [Bootstrapping config files](#bootstrapping-config-files)\n* [Providers](#providers)\n   * [Updating to use extracted providers](#updating-to-use-extracted-providers)\n* [Sources](#sources)\n   * [Notes](#notes)\n* [Processors](#processors)\n* [Automatic PTR generation](#automatic-ptr-generation)\n* [Compatibility and Compliance](#compatibility-and-compliance)\n   * [`lenient`](#lenient)\n   * [`strict_supports`](#strict_supports)\n   * [Configuring `strict_supports`](#configuring-strict_supports)\n* [Custom Sources and Providers](#custom-sources-and-providers)\n* [Other Uses](#other-uses)\n   * [Syncing between providers](#syncing-between-providers)\n   * [Dynamic sources](#dynamic-sources)\n* [Contributing](#contributing)\n* [Getting help](#getting-help)\n* [Related Projects and Resources](#related-projects-and-resources)\n* [License](#license)\n* [Authors](#authors)\n\n## Getting started\n\n### Workspace\n\nRunning through the following commands will install the latest release of octoDNS and set up a place for your config files to live. To determine if provider specific requirements are necessary see the [providers table](#providers) below.\n\n```console\n$ mkdir dns\n$ cd dns\n$ python -m venv env\n...\n$ source env/bin/activate\n# provider-specific-requirements would be things like: octodns-route53 octodns-azure\n$ pip install octodns <provider-specific-requirements>\n$ mkdir config\n```\n\n#### Installing a specific commit SHA\n\nIf you'd like to install a version that has not yet been released in a repeatable/safe manner you can do the following. In general octoDNS is fairly stable in between releases thanks to the plan and apply process, but care should be taken regardless.\n\n```console\n$ pip install -e git+https://git@github.com/octodns/octodns.git@<SHA>#egg=octodns\n```\n\n### Config\n\nWe start by creating a config file to tell octoDNS about our providers and the zone(s) we want it to manage. Below we're setting up a `YamlProvider` to source records from our config files and both a `Route53Provider` and `DynProvider` to serve as the targets for those records. You can have any number of zones set up and any number of sources of data and targets for records for each. You can also have multiple config files, that make use of separate accounts and each manage a distinct set of zones. A good example of this this might be `./config/staging.yaml` & `./config/production.yaml`. We'll focus on a `config/production.yaml`.\n\n#### Dynamic Zone Config\n\noctoDNS supports dynamically building the list of zones it will work with when source providers support it. The most common use of this would be with `YamlProvider` and a single dynamic entry to in effect use the files that exist in the provider's directory as the source of truth. Other providers may support the `list_zones` method and be available to populate zones dynamically as well. This can be especially useful when using `octodns-dump` to create an initial setup from an existing provider.\n\nAn example config would look something like:\n\n```yaml\n---\nproviders:\n  config:\n    class: octodns.provider.yaml.YamlProvider\n    directory: ./config\n    default_ttl: 3600\n    enforce_order: True\n  ns:\n    class: octodns_ns1.Ns1Provider\n    api_key: env/NS1_API_KEY\n  route53:\n    class: octodns_route53.Route53Provider\n    access_key_id: env/AWS_ACCESS_KEY_ID\n    secret_access_key: env/AWS_SECRET_ACCESS_KEY\n\nzones:\n  # This is a dynamic zone config. The source(s), here `config`, will be\n  # queried for a list of zone names and each will dynamically be set up to\n  # match the dynamic entry.\n  '*':\n    sources:\n      - config\n    targets:\n      - ns1\n      - route53\n```\n\n#### Static Zone Config\n\nIn cases where finer grained control is desired and the configuration of individual zones varies `zones` can be an explicit list with each configured zone listed along with its specific setup. As exemplified below `alias` zones can be useful when two zones are exact copies of each other, with the same configuration and records. YAML anchors are also helpful to avoid duplication where zones share config, but not records.\n\n```yaml\n---\nmanager:\n  include_meta: True\n  max_workers: 2\n\nproviders:\n  config:\n    class: octodns.provider.yaml.YamlProvider\n    directory: ./config\n    default_ttl: 3600\n    enforce_order: True\n  ns:\n    class: octodns_ns1.Ns1Provider\n    api_key: env/NS1_API_KEY\n  route53:\n    class: octodns_route53.Route53Provider\n    access_key_id: env/AWS_ACCESS_KEY_ID\n    secret_access_key: env/AWS_SECRET_ACCESS_KEY\n\nzones:\n  example.com.: &dual_target\n    sources:\n      - config\n    targets:\n      - ns1\n      - route53\n\n  # these have the same setup as example.com., but will have their own files\n  # in the configuration directory for records.\n  third.tv.: *dual_target\n  fourth.tv.: *dual_target\n\n  example.net.:\n    # example.net. is an exact copy of example.com., there will not be an\n    # example.net.yaml file in the config directory as `alias` includes\n    # duplicating the records of the aliased zone along with its config.\n    alias: example.com.\n\n  other.com.:\n    lenient: True\n    sources:\n      - config\n    targets:\n      - ns1\n\n```\n\n#### General Configuration Concepts\n\n`class` is a special key that tells octoDNS what python class should be loaded. Any other keys will be passed as configuration values to that provider. In general any sensitive or frequently rotated values should come from environmental variables. When octoDNS sees a value that starts with `env/` it will look for that value in the process's environment and pass the result along.\n\nFurther information can be found in the `docstring` of each source and provider class.\n\nThe `include_meta` key in the `manager` section of the config controls the creation of a TXT record at the root of a zone that is managed by octoDNS. If set to `True`, octoDNS will create a TXT record for the root of the zone with the value `provider=<target-provider>`. If not specified, the default value for `include_meta` is `False`.\n\nThe `max_workers` key in the `manager` section of the config enables threading to parallelize the planning portion of the sync.\n\n#### Quick Example Record\n\nNow that we have something to tell octoDNS about our providers & zones we need to tell it about our records. We'll keep it simple for now and just create a single `A` record at the top-level of the domain.\n\n`config/example.com.yaml`\n\n```yaml\n---\n'':\n  ttl: 60\n  type: A\n  values:\n    - 1.2.3.4\n    - 1.2.3.5\n```\n\nFurther information can be found in [Records Documentation](/docs/records.md).\n\n### Noop\n\nWe're ready to do a dry-run with our new setup to see what changes it would make. Since we're pretending here we'll act like there are no existing records for `example.com.` in our accounts on either provider.\n\n```console\n$ octodns-sync --config-file=./config/production.yaml\n...\n********************************************************************************\n* example.com.\n********************************************************************************\n* route53 (Route53Provider)\n*   Create <ARecord A 60, example.com., [u'1.2.3.4', '1.2.3.5']>\n*   Summary: Creates=1, Updates=0, Deletes=0, Existing Records=0\n* dyn (DynProvider)\n*   Create <ARecord A 60, example.com., [u'1.2.3.4', '1.2.3.5']>\n*   Summary: Creates=1, Updates=0, Deletes=0, Existing Records=0\n********************************************************************************\n...\n```\n\nThere will be other logging information presented on the screen, but successful runs of sync will always end with a summary like the above for any providers & zones with changes. If there are no changes a message saying so will be printed instead. Above we're creating a new zone in both providers so they show the same change, but that doesn't always have to be the case. If, to start, one of them had a different state, you would see the changes octoDNS intends to make to sync them up.\n\n### Making changes\n\n**WARNING**: octoDNS assumes ownership of any domain you point it to. When you tell it to act it will do whatever is necessary to try and match up states including deleting any unexpected records. Be careful when playing around with octoDNS. It's best to experiment with a fake zone or one without any data that matters until you're comfortable with the system.\n\nNow it's time to tell octoDNS to make things happen. We'll invoke it again with the same options and add a `--doit` on the end to tell it this time we actually want it to try and make the specified changes.\n\n```console\n$ octodns-sync --config-file=./config/production.yaml --doit\n...\n```\n\nThe output here would be the same as before with a few more log lines at the end as it makes the actual changes. After which the config in Route53 and Dyn should match what's in the yaml file.\n\n### Workflow\n\nIn the above case we manually ran octoDNS from the command line. That works and it's better than heading into the provider GUIs and making changes by clicking around, but octoDNS is designed to be run as part of a deploy process. The implementation details are well beyond the scope of this README, but here is an example of the workflow we use at GitHub. It follows the way [GitHub itself is branch deployed](https://githubengineering.com/deploying-branches-to-github-com/).\n\nThe first step is to create a PR with your changes.\n\n![GitHub user interface of a pull request](/docs/assets/pr.png)\n\nAssuming the code tests and config validation statuses are green the next step is to do a noop deploy and verify that the changes octoDNS plans to make are the ones you expect.\n\n![Output of a noop deployment command](/docs/assets/noop.png)\n\nAfter that comes a set of reviews. One from a teammate who should have full context on what you're trying to accomplish and visibility into the changes you're making to do it. The other is from a member of the team here at GitHub that owns DNS, mostly as a sanity check and to make sure that best practices are being followed. As much of that as possible is baked into `octodns-validate`.\n\nAfter the reviews it's time to branch deploy the change.\n\n![Output of a deployment command](/docs/assets/deploy.png)\n\nIf that goes smoothly, you again see the expected changes, and verify them with `dig` and/or `octodns-report` you're good to hit the merge button. If there are problems you can quickly do a `.deploy dns/main` to go back to the previous state.\n\n### Bootstrapping config files\n\nVery few situations will involve starting with a blank slate which is why there's tooling built in to pull existing data out of providers into a matching config file.\n\n```console\n$ octodns-dump --config-file=config/production.yaml --output-dir=tmp/ example.com. route53\n2017-03-15T13:33:34  INFO  Manager __init__: config_file=tmp/production.yaml\n2017-03-15T13:33:34  INFO  Manager dump: zone=example.com., sources=('route53',)\n2017-03-15T13:33:36  INFO  Route53Provider[route53] populate:   found 64 records\n2017-03-15T13:33:36  INFO  YamlProvider[dump] plan: desired=example.com.\n2017-03-15T13:33:36  INFO  YamlProvider[dump] plan:   Creates=64, Updates=0, Deletes=0, Existing Records=0\n2017-03-15T13:33:36  INFO  YamlProvider[dump] apply: making changes\n```\n\nThe above command pulled the existing data out of Route53 and placed the results into `tmp/example.com.yaml`. That file can be inspected and moved into `config/` to become the new source. If things are working as designed a subsequent noop sync should show zero changes.\n\nNote that a [Dynamic Zone Config](#dynamic-zone-config) and be really powerful in combination with `octodns-dump` allowing you to quickly create a set of octoDNS zone files for all the zones configured in your sources.\n\n```console\n$ octodns-dump --config-file=config/production.yaml --output-dir=tmp/ '*' route53\n...\n```\n\nIt is important to review any `WARNING` log lines printed out during an `octodns-dump` invocation as it will give you information about records that aren't supported fully or at all by octoDNS and thus won't be exact matches or included in the dumps. Generally records that cannot be converted are either of a type that octoDNS does not support or those that include \"dynamic\" functionality that doesn't match octoDNS's behaviors.\n\n## Providers\n\nThe table below lists the providers octoDNS supports. They are maintained in their own repositories and released as independent modules.\n\n| Provider | Module | Notes |\n|--|--|--|\n| [Akamai Edge DNS](https://www.akamai.com/products/edge-dns) | [octodns_edgedns](https://github.com/octodns/octodns-edgedns/) | |\n| [Amazon Route 53](https://aws.amazon.com/route53/) | [octodns_route53](https://github.com/octodns/octodns-route53) | |\n| [AutoDNS](https://www.internetx.com/autodns/) | [octodns_autodns](https://github.com/octodns/octodns-autodns) | |\n| [Azure DNS](https://azure.microsoft.com/en-us/services/dns/) | [octodns_azure](https://github.com/octodns/octodns-azure/) | |\n| [BIND, AXFR, RFC-2136](https://www.isc.org/bind/) | [octodns_bind](https://github.com/octodns/octodns-bind/) | |\n| [Cloudflare DNS](https://www.cloudflare.com/dns/) | [octodns_cloudflare](https://github.com/octodns/octodns-cloudflare/) | |\n| [Constellix](https://constellix.com/) | [octodns_constellix](https://github.com/octodns/octodns-constellix/) | |\n| [DigitalOcean](https://docs.digitalocean.com/products/networking/dns/) | [octodns_digitalocean](https://github.com/octodns/octodns-digitalocean/) | |\n| [DNS Made Easy](https://dnsmadeeasy.com/) | [octodns_dnsmadeeasy](https://github.com/octodns/octodns-dnsmadeeasy/) | |\n| [DNSimple](https://dnsimple.com/) | [octodns_dnsimple](https://github.com/octodns/octodns-dnsimple/) | |\n| [Dyn](https://www.oracle.com/cloud/networking/dns/) ([deprecated](https://www.oracle.com/corporate/acquisitions/dyn/technologies/migrate-your-services/)) | [octodns_dyn](https://github.com/octodns/octodns-dyn/) | |\n| [easyDNS](https://easydns.com/) | [octodns_easydns](https://github.com/octodns/octodns-easydns/) | |\n| [EdgeCenter DNS](https://edgecenter.ru/dns/) | [octodns_edgecenter](https://github.com/octodns/octodns-edgecenter/) | |\n| /etc/hosts | [octodns_etchosts](https://github.com/octodns/octodns-etchosts/) | |\n| [Gandi](https://www.gandi.net/en-US/domain/dns) | [octodns_gandi](https://github.com/octodns/octodns-gandi/) | |\n| [G-Core Labs DNS](https://gcorelabs.com/dns/) | [octodns_gcore](https://github.com/octodns/octodns-gcore/) | |\n| [Google Cloud DNS](https://cloud.google.com/dns) | [octodns_googlecloud](https://github.com/octodns/octodns-googlecloud/) | |\n| [Hetzner DNS](https://www.hetzner.com/dns-console) | [octodns_hetzner](https://github.com/octodns/octodns-hetzner/) | |\n| [Mythic Beasts DNS](https://www.mythic-beasts.com/support/hosting/dns) | [octodns_mythicbeasts](https://github.com/octodns/octodns-mythicbeasts/) | |\n| [NS1](https://ns1.com/products/managed-dns) | [octodns_ns1](https://github.com/octodns/octodns-ns1/) | |\n| [OVHcloud DNS](https://www.ovhcloud.com/en/domains/dns-subdomain/) | [octodns_ovh](https://github.com/octodns/octodns-ovh/) | |\n| [PowerDNS](https://www.powerdns.com/) | [octodns_powerdns](https://github.com/octodns/octodns-powerdns/) | |\n| [Rackspace](https://www.rackspace.com/library/what-is-dns) | [octodns_rackspace](https://github.com/octodns/octodns-rackspace/) | |\n| [Scaleway](https://www.scaleway.com/en/dns/) | [octodns_scaleway](https://github.com/scaleway/octodns-scaleway) | |\n| [Selectel](https://selectel.ru/en/services/additional/dns/) | [octodns_selectel](https://github.com/octodns/octodns-selectel/) | |\n| [SPF Value Management](https://github.com/octodns/octodns-spf) | [octodns_spf](https://github.com/octodns/octodns-spf/) | |\n| [TransIP](https://www.transip.eu/knowledgebase/entry/155-dns-and-nameservers/) | [octodns_transip](https://github.com/octodns/octodns-transip/) | |\n| [UltraDNS](https://vercara.com/authoritative-dns) | [octodns_ultra](https://github.com/octodns/octodns-ultra/) | |\n| [YamlProvider](/octodns/provider/yaml.py) | built-in | Supports all record types and core functionality |\n\n### Updating to use extracted providers\n\n1. Include the extracted module in your python environment, e.g. if using Route53 that would require adding the `octodns_route53` module to your requirements.txt, setup.py, or similar.\n1. Update the `class` value for your provider to the new path, e.g. again for Route53 that would be replacing `octodns.provider.route53.Route53Provider` with `octodns_route53.Route53Provider`\n\nThe module required and provider class path for extracted providers can be found in the table above.\n\n## Sources\n\nSimilar to providers, but can only serve to populate records into a zone, cannot be synced to.\n\n| Source | Record Support | Dynamic | Notes |\n|--|--|--|--|\n| [EnvVarSource](/octodns/source/envvar.py) | TXT | No | read-only environment variable injection |\n| [AxfrSource](https://github.com/octodns/octodns-bind/) | A, AAAA, CAA, CNAME, LOC, MX, NS, PTR, SPF, SRV, TXT | No | read-only |\n| [ZoneFileSource](https://github.com/octodns/octodns-bind/) | A, AAAA, CAA, CNAME, MX, NS, PTR, SPF, SRV, TXT | No | read-only |\n| [TinyDnsFileSource](/octodns/source/tinydns.py) | A, CNAME, MX, NS, PTR | No | read-only |\n\n### Notes\n\n* ALIAS support varies a lot from provider to provider care should be taken to verify that your needs are met in detail.\n   * Dyn's UI doesn't allow editing or view of TTL, but the API accepts and stores the value provided, this value does not appear to be used when served\n   * Dnsimple's uses the configured TTL when serving things through the ALIAS, there's also a secondary TXT record created alongside the ALIAS that octoDNS ignores\n* octoDNS itself supports non-ASCII character sets, but in testing Cloudflare is the only provider where that is currently functional end-to-end. Others have failures either in the client libraries or API calls\n\n## Processors\n\n| Processor | Description |\n|--|--|\n| [AcmeMangingProcessor](/octodns/processor/acme.py) | Useful when processes external to octoDNS are managing acme challenge DNS records, e.g. LetsEncrypt |\n| [AutoArpa](/octodns/processor/arpa.py) | See [Automatic PTR generation](#automatic-ptr-generation) below |\n| [EnsureTrailingDots](/octodns/processor/trailing_dots.py) | Processor that ensures ALIAS, CNAME, DNAME, MX, NS, PTR, and SRVs have trailing dots |\n| [ExcludeRootNsChanges](/octodns/processor/filter.py) | Filter that errors or warns on planned root/APEX NS records changes. |\n| [IgnoreRootNsFilter](/octodns/processor/filter.py) | Filter that IGNORES root/APEX NS records and prevents octoDNS from trying to manage them (where supported.) |\n| [MetaProcessor](/octodns/processor/meta.py) | Adds a special meta record with timing, UUID, providers, and/or version to aid in debugging and monitoring. |\n| [NameAllowlistFilter](/octodns/processor/filter.py) | Filter that ONLY manages records that match specified naming patterns, all others will be ignored |\n| [NameRejectlistFilter](/octodns/processor/filter.py) | Filter that IGNORES records that match specified naming patterns, all others will be managed |\n| [ValueAllowlistFilter](/octodns/processor/filter.py) | Filter that ONLY manages records that match specified value patterns based on `rdata_text`, all others will be ignored |\n| [ValueRejectlistFilter](/octodns/processor/filter.py) | Filter that IGNORES records that match specified value patterns based on `rdata_text`, all others will be managed |\n| [OwnershipProcessor](/octodns/processor/ownership.py) | Processor that implements ownership in octoDNS so that it can manage only the records in a zone in sources and will ignore all others. |\n| [SpfDnsLookupProcessor](/octodns/processor/spf.py) | Processor that checks SPF values for violations of DNS query limits |\n| [TtlRestrictionFilter](/octodns/processor/restrict.py) | Processor that restricts the allow TTL values to a specified range or list of specific values |\n| [TypeAllowlistFilter](/octodns/processor/filter.py) | Filter that ONLY manages records of specified types, all others will be ignored |\n| [TypeRejectlistFilter](/octodns/processor/filter.py) | Filter that IGNORES records of specified types, all others will be managed |\n| [octodns-spf](https://github.com/octodns/octodns-spf) | SPF Value Management for octoDNS |\n\n## Automatic PTR generation\n\noctoDNS supports automatically generating PTR records from the `A`/`AAAA` records it manages. For more information see the [auto-arpa documentation](/docs/auto_arpa.md).\n\n## Compatibility and Compliance\n\n### `lenient`\n\n`lenient` mostly focuses on the details of `Record`s and standards compliance. When set to `true` octoDNS will allow non-compliant configurations & values where possible. For example CNAME values that don't end with a `.`, label length restrictions, and invalid geo codes on `dynamic` records. When in lenient mode octoDNS will log validation problems at `WARNING` and try and continue with the configuration or source data as it exists. See [Lenience](/docs/records.md#lenience) for more information on the concept and how it can be configured.\n\n### `strict_supports`\n\n`strict_supports` is a `Provider` level parameter that comes into play when a provider has been asked to create a record that it is unable to support. The simplest case of this would be record type, e.g. `SSHFP` not being supported by `AzureProvider`. If such a record is passed to an `AzureProvider` as a target the provider will take action based on the `strict_supports`. When `true` it will throw an exception saying that it's unable to create the record, when set to `false` it will log at `WARNING` with information about what it's unable to do and how it is attempting to work around it. Other examples of things that cannot be supported would be `dynamic` records on a provider that only supports simple or the lack of support for specific geos in a provider, e.g. Route53Provider does not support `NA-CA-*`.\n\nIt is worth noting that these errors will happen during the plan phase of things so that problems will be visible without having to make changes.\n\nAs of octoDNS 1.x `strict_supports` is on by default. You have the choice to set `strict_supports=false` on a per provider basis to request that things warn and continue in a best-effort fashion.\n\n### Configuring `strict_supports`\n\nThe `strict_supports` parameter is available on all providers and can be configured in YAML as follows:\n\n```yaml\nproviders:\n  someprovider:\n    class: whatever.TheProvider\n    ...\n    strict_supports: true\n```\n\n## Custom Sources and Providers\n\nYou can check out the [source](/octodns/source/) and [provider](/octodns/provider/) directory to see what's currently supported. Sources act as a source of record information. AxfrSource and TinyDnsFileSource are currently the only OSS sources, though we have several others internally that are specific to our environment. These include something to pull host data from  [gPanel](https://githubengineering.com/githubs-metal-cloud/) and a similar provider that sources information about our network gear to create both `A` & `PTR` records for their interfaces. Things that might make good OSS sources might include an `ElbSource` that pulls information about [AWS Elastic Load Balancers](https://aws.amazon.com/elasticloadbalancing/) and dynamically creates `CNAME`s for them, or `Ec2Source` that pulls instance information so that records can be created for hosts similar to how our `GPanelProvider` works.\n\nMost of the things included in octoDNS are providers, the obvious difference being that they can serve as both sources and targets of data. We'd really like to see this list grow over time so if you use an unsupported provider then PRs are welcome. The existing providers should serve as reasonable examples. Those that have no GeoDNS support are relatively straightforward. Unfortunately most of the APIs involved to do GeoDNS style traffic management are complex and somewhat inconsistent so adding support for that function would be nice, but is optional and best done in a separate pass.\n\nThe `class` key in the providers config section can be used to point to arbitrary classes in the python path so internal or 3rd party providers can easily be included with no coordination beyond getting them into PYTHONPATH, most likely installed into the virtualenv with octoDNS.\n\nFor examples of building third-party sources and providers, see [Related Projects & Resources](#related-projects-and-resources).\n\n## Other Uses\n\n### Syncing between providers\n\nWhile the primary use-case is to sync a set of yaml config files up to one or more DNS providers, octoDNS has been built in such a way that you can easily source and target things arbitrarily. As a quick example the config below would sync `githubtest.net.` from Route53 to Dyn.\n\n```yaml\n---\nproviders:\n  route53:\n    class: octodns.provider.route53.Route53Provider\n    access_key_id: env/AWS_ACCESS_KEY_ID\n    secret_access_key: env/AWS_SECRET_ACCESS_KEY\n  dyn:\n    class: octodns.provider.dyn.DynProvider\n    customer: env/DYN_CUSTOMER\n    username: env/DYN_USERNAME\n    password: env/DYN_PASSWORD\n\nzones:\n\n  githubtest.net.:\n    sources:\n      - route53\n    targets:\n      - dyn\n```\n\n### Dynamic sources\n\nInternally we use custom sources to create records based on dynamic data that changes frequently without direct human intervention. An example of that might look something like the following. For hosts this mechanism is janitorial, run periodically, making sure the correct records exist as long as the host is alive and ensuring they are removed after the host is destroyed. The host provisioning and destruction processes do the actual work to create and destroy the records.\n\n```yaml\n---\nproviders:\n  gpanel-site:\n    class: github.octodns.source.gpanel.GPanelProvider\n    host: 'gpanel.site.github.foo'\n    token: env/GPANEL_SITE_TOKEN\n  powerdns-site:\n    class: octodns.provider.powerdns.PowerDnsProvider\n    host: 'internal-dns.site.github.foo'\n    api_key: env/POWERDNS_SITE_API_KEY\n\nzones:\n\n  hosts.site.github.foo.:\n    sources:\n      - gpanel-site\n    targets:\n      - powerdns-site\n```\n\n## Contributing\n\nPlease see our [contributing document](/CONTRIBUTING.md) if you would like to participate!\n\n## Getting help\n\nIf you have a problem or suggestion, please [open an issue](https://github.com/octodns/octodns/issues/new) in this repository, and we will do our best to help. Please note that this project adheres to the [Contributor Covenant Code of Conduct](/CODE_OF_CONDUCT.md).\n\n## Related Projects and Resources\n\n- **GitHub Action:** [octoDNS-Sync](https://github.com/marketplace/actions/octodns-sync)\n- **NixOS Integration:** [NixOS-DNS](https://github.com/Janik-Haag/nixos-dns/)\n- **Sample Implementations.** See how others are using it\n  - [`hackclub/dns`](https://github.com/hackclub/dns)\n  - [`kubernetes/k8s.io:/dns`](https://github.com/kubernetes/k8s.io/tree/main/dns)\n  - [`g0v-network/domains`](https://github.com/g0v-network/domains)\n  - [`jekyll/dns`](https://github.com/jekyll/dns)\n- **Custom Sources & Providers.**\n  - [`octodns/octodns-ddns`](https://github.com/octodns/octodns-ddns): A simple Dynamic DNS source.\n  - [`doddo/octodns-lexicon`](https://github.com/doddo/octodns-lexicon): Use [Lexicon](https://github.com/AnalogJ/lexicon) providers as octoDNS providers.\n  - [`asyncon/octoblox`](https://github.com/asyncon/octoblox): [Infoblox](https://www.infoblox.com/) provider.\n  - [`sukiyaki/octodns-netbox`](https://github.com/sukiyaki/octodns-netbox): [NetBox](https://github.com/netbox-community/netbox) source.\n  - [`jcollie/octodns-netbox-dns`](https://github.com/jcollie/octodns-netbox-dns): [NetBox-DNS Plugin](https://github.com/auroraresearchlab/netbox-dns) provider.\n  - [`kompetenzbolzen/octodns-custom-provider`](https://github.com/kompetenzbolzen/octodns-custom-provider): zonefile provider & phpIPAM source.\n  - [`Financial-Times/octodns-fastly`](https://github.com/Financial-Times/octodns-fastly): An octoDNS source for Fastly.\n- **Resources.**\n  - Article: [Visualising DNS records with Neo4j](https://medium.com/@costask/querying-and-visualising-octodns-records-with-neo4j-f4f72ab2d474) + code\n  - Video: [FOSDEM 2019 - DNS as code with octodns](https://archive.fosdem.org/2019/schedule/event/dns_octodns/)\n  - GitHub Blog: [Enabling DNS split authority with octoDNS](https://github.blog/2017-04-27-enabling-split-authority-dns-with-octodns/)\n  - Tutorial: [How To Deploy and Manage Your DNS using octoDNS on Ubuntu 18.04](https://www.digitalocean.com/community/tutorials/how-to-deploy-and-manage-your-dns-using-octodns-on-ubuntu-18-04)\n  - Cloudflare Blog: [Improving the Resiliency of Our Infrastructure DNS Zone](https://blog.cloudflare.com/improving-the-resiliency-of-our-infrastructure-dns-zone/)\n\nIf you know of any other resources, please do let us know!\n\n## License\n\noctoDNS is licensed under the [MIT license](LICENSE).\n\nThe MIT license grant is not for GitHub's trademarks, which include the logo designs. GitHub reserves all trademark and copyright rights in and to all GitHub trademarks. GitHub's logos include, for instance, the stylized designs that include \"logo\" in the file title in the following folder: https://github.com/octodns/octodns/tree/main/docs/logos/\n\nGitHub® and its stylized versions and the Invertocat mark are GitHub's Trademarks or registered Trademarks. When using GitHub's logos, be sure to follow the GitHub logo guidelines.\n\n## Authors\n\noctoDNS was designed and authored by [Ross McFarland](https://github.com/ross) and [Joe Williams](https://github.com/joewilliams). See https://github.com/octodns/octodns/graphs/contributors for a complete list of people who've contributed.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "octodns",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.3125,
          "content": "[tool.black]\nline-length=80\nskip-string-normalization=true\nskip-magic-trailing-comma=true\n\n[tool.coverage.run]\nomit=[\"octodns/cmds/*\"]\n\n[tool.isort]\nprofile = \"black\"\nknown_first_party=\"octodns\"\nline_length=80\n\n[tool.pytest.ini_options]\nfilterwarnings = [\n    'error',\n    'ignore:.*DEPRECATED.*2.0',\n]\npythonpath = \".\"\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.8994140625,
          "content": "# DO NOT EDIT THIS FILE DIRECTLY - use ./script/update-requirements to update\nPygments==2.18.0\nblack==24.10.0\nbuild==1.2.2.post1\ncertifi==2024.8.30\ncffi==1.17.1\ncharset-normalizer==3.3.2\nclick==8.1.7\ncmarkgfm==2024.1.14\ncoverage==7.6.1\ndocutils==0.21.2\nimportlib_metadata==8.5.0\niniconfig==2.0.0\nisort==5.13.2\njaraco.classes==3.4.0\njaraco.context==6.0.1\njaraco.functools==4.1.0\nkeyring==25.4.1\nmarkdown-it-py==3.0.0\nmdurl==0.1.2\nmore-itertools==10.5.0\nmypy-extensions==1.0.0\nnh3==0.2.18\npackaging==24.1\npathspec==0.12.1\npkginfo==1.10.0\nplatformdirs==4.3.6\npluggy==1.5.0\npprintpp==0.4.0\npycountry-convert==0.7.2\npycountry==24.6.1\npycparser==2.22\npyflakes==3.2.0\npyproject_hooks==1.2.0\npytest-cov==5.0.0\npytest-mock==3.14.0\npytest==8.3.3\npytest_network==0.0.1\nreadme_renderer==44.0\nrepoze.lru==0.7\nrequests-toolbelt==1.0.0\nrequests==2.32.3\nrfc3986==2.0.0\nrich==13.9.2\ntwine==5.1.1\nurllib3==2.2.3\nwheel==0.44.0\nzipp==3.20.2\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.18359375,
          "content": "# DO NOT EDIT THIS FILE DIRECTLY - use ./script/update-requirements to update\nPyYAML==6.0.2\ndnspython==2.7.0\nfqdn==1.5.1\nidna==3.10\nnatsort==8.4.0\npython-dateutil==2.9.0.post0\nsix==1.16.0\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.7158203125,
          "content": "#!/usr/bin/env python\n\nfrom io import StringIO\nfrom os.path import dirname, join\n\nimport octodns\n\ntry:\n    from setuptools import find_packages, setup\nexcept ImportError:\n    from distutils.core import find_packages, setup\n\ncmds = ('compare', 'dump', 'report', 'sync', 'validate', 'versions')\ncmds_dir = join(dirname(__file__), 'octodns', 'cmds')\nconsole_scripts = {\n    'octodns-{name} = octodns.cmds.{name}:main'.format(name=name)\n    for name in cmds\n}\n\n\ndef long_description():\n    buf = StringIO()\n    yaml_block = False\n    supported_providers = False\n    with open('README.md') as fh:\n        for line in fh:\n            if line == '```yaml\\n':\n                yaml_block = True\n                continue\n            elif yaml_block and line == '---\\n':\n                # skip the line\n                continue\n            elif yaml_block and line == '```\\n':\n                yaml_block = False\n                continue\n            elif supported_providers:\n                if line.startswith('## '):\n                    supported_providers = False\n                    # write this line out, no continue\n                else:\n                    # We're ignoring this one\n                    continue\n            elif line == '## Supported providers\\n':\n                supported_providers = True\n                continue\n            buf.write(line)\n    return buf.getvalue()\n\n\ntests_require = ('pytest>=6.2.5', 'pytest-cov>=3.0.0', 'pytest-network>=0.0.1')\n\nsetup(\n    author='Ross McFarland',\n    author_email='rwmcfa1@gmail.com',\n    description=octodns.__doc__,\n    entry_points={'console_scripts': console_scripts},\n    extras_require={\n        'dev': tests_require\n        + (\n            # we need to manually/explicitely bump major versions as they're\n            # likely to result in formatting changes that should happen in their\n            # own PR. This will basically happen yearly\n            # https://black.readthedocs.io/en/stable/the_black_code_style/index.html#stability-policy\n            'black>=24.3.0,<25.0.0',\n            'build>=0.7.0',\n            'isort>=5.11.5',\n            'pycountry>=19.8.18',\n            'pycountry-convert>=0.7.2',\n            'pyflakes>=2.2.0',\n            'readme_renderer[md]>=26.0',\n            'twine>=3.4.2',\n        )\n    },\n    install_requires=(\n        'PyYaml>=4.2b1',\n        'dnspython>=2.2.1',\n        'fqdn>=1.5.0',\n        'idna>=3.3',\n        'natsort>=5.5.0',\n        'python-dateutil>=2.8.1',\n    ),\n    license='MIT',\n    long_description=long_description(),\n    long_description_content_type='text/markdown',\n    name='octodns',\n    packages=find_packages(),\n    python_requires='>=3.9',\n    tests_require=tests_require,\n    url='https://github.com/octodns/octodns',\n    version=octodns.__version__,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}