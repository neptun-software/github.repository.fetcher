{
  "metadata": {
    "timestamp": 1736560007022,
    "page": 812,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BeastByteAI/scikit-llm",
      "stars": 3401,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\ntest.py\ntmp.ipynb\ntmp.py\n*.pickle\n*.ipynb\n\n# vscode\n.vscode/\ntmp2.py\ntmp.*"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.6591796875,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-docstring-first\n      - id: check-xml\n      - id: check-json\n      - id: check-yaml\n      - id: check-toml\n      - id: debug-statements\n      - id: check-executables-have-shebangs\n      - id: check-case-conflict\n      - id: check-added-large-files\n      - id: detect-private-key\n  # Formatter for Json and Yaml files\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v3.0.0-alpha.9-for-vscode\n    hooks:\n      - id: prettier\n        types: [json, yaml, toml]\n  # Formatter for markdown files\n  - repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.16\n    hooks:\n      - id: mdformat\n        args: [\"--number\"]\n        additional_dependencies:\n          - mdformat-gfm\n          - mdformat-tables\n          - mdformat-frontmatter\n          - mdformat-black\n          - mdformat-shfmt\n  # An extremely fast Python linter, written in Rust\n  - repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: \"v0.0.263\"\n    hooks:\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n  # Python code formatter\n  - repo: https://github.com/psf/black\n    rev: 23.3.0\n    hooks:\n      - id: black\n        args: [\"--config\", \"pyproject.toml\"]\n  # Python's import formatter\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.12.0\n    hooks:\n      - id: isort\n  # Formats docstrings to follow PEP 257\n  - repo: https://github.com/PyCQA/docformatter\n    rev: v1.6.4\n    hooks:\n      - id: docformatter\n        additional_dependencies: [tomli]\n        args: [\"--in-place\", \"--config\", \"pyproject.toml\"]\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1376953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nhttps://www.linkedin.com/in/iryna-kondrashchenko-673800155/.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9150390625,
          "content": "# Contributing to Scikit-LLM\n\nWelcome! We appreciate your interest in contributing to Scikit-LLM. Whether you're a developer, designer, writer, or simply passionate about open source, there are several ways you can help improve this project. This document will guide you through the process of contributing to our Python repository.\n\n## How Can I Contribute?\n\n**IMPORTANT:** We are currently preparing the transition to v.1.0 which will include major code restructuring. Until then, no new pull requests to the main branch will be approved unless discussed in advance via issues or in Discord !\n\nThere are several ways you can contribute to this project:\n\n- Bug Fixes: Help us identify and fix issues in the codebase.\n- Feature Implementation: Implement new features and enhancements.\n- Documentation: Improve the project's documentation, including code comments and README files.\n- Testing: Write and improve test cases to ensure the project's quality and reliability.\n- Translations: Provide translations for the project's documentation or user interface.\n- Bug Reports and Feature Requests: Submit bug reports or suggest new features and improvements.\n\n**Important:** before contributing, we recommend that you open an issue to discuss your planned changes. This allows us to align our goals, provide guidance, and potentially find other contributors interested in collaborating on the same feature or bug fix.\n\n> ### Legal Notice <!-- omit in toc -->\n>\n> When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.\n\n## Development  dependencies\n\nIn order to install all development dependencies, run the following command:\n\n```shell\npip install -r requirements-dev.txt\n```\n\nTo ensure that you follow the development workflow, please setup the pre-commit hooks:\n\n```shell\npre-commit install\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2023 Iryna Kondrashchenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.275390625,
          "content": "<div align=\"center\">\n  <img alt=\"logo\" src=\"https://gist.githubusercontent.com/OKUA1/55e2fb9dd55673ec05281e0247de6202/raw/41063fcd620d9091662fc6473f9331a7651b4465/scikit-llm.svg\" height = \"250\">\n</div>\n\n# Scikit-LLM: Scikit-Learn Meets Large Language Models\n\nSeamlessly integrate powerful language models like ChatGPT into scikit-learn for enhanced text analysis tasks.\n\n## Installation 💾\n\n```bash\npip install scikit-llm\n```\n\n## Support us 🤝\n\nYou can support the project in the following ways:\n\n- ⭐ Star Scikit-LLM on GitHub (click the star button in the top right corner)\n- 💡 Provide your feedback or propose ideas in the [issues](https://github.com/iryna-kondr/scikit-llm/issues) section or [Discord](https://discord.gg/YDAbwuWK7V)\n- 📰 Post about Scikit-LLM on LinkedIn or other platforms\n- 🔗 Check out our other projects: <a href=\"https://github.com/beastbyteai/agent_dingo\">Dingo</a>, <a href=\"https://github.com/beastbyteai/agent_dingo\">Falcon</a>\n\n<br>\n<a href=\"https://github.com/OKUA1/agent_dingo\">\n  <picture>\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://gist.githubusercontent.com/OKUA1/ce2167df8e441ce34a9fbc8578b86543/raw/f740c391ec37eaf2f80d5b46f1fa2a989dd45932/dingo_h_dark.svg\" >\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://gist.githubusercontent.com/OKUA1/ce2167df8e441ce34a9fbc8578b86543/raw/f740c391ec37eaf2f80d5b46f1fa2a989dd45932/ding_h_light.svg\">\n  <img alt=\"Logo\" src=\"https://gist.githubusercontent.com/OKUA1/ce2167df8e441ce34a9fbc8578b86543/raw/f740c391ec37eaf2f80d5b46f1fa2a989dd45932/dingo_h_dark.svg\" height = \"65\">\n</picture>\n</a> <br><br>\n<a href=\"https://github.com/OKUA1/falcon\">\n  <picture>\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://gist.githubusercontent.com/OKUA1/ce2167df8e441ce34a9fbc8578b86543/raw/f740c391ec37eaf2f80d5b46f1fa2a989dd45932/falcon_h_dark.svg\" >\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://gist.githubusercontent.com/OKUA1/ce2167df8e441ce34a9fbc8578b86543/raw/f740c391ec37eaf2f80d5b46f1fa2a989dd45932/falcon_h_light.svg\">\n  <img alt=\"Logo\" src=\"https://gist.githubusercontent.com/OKUA1/ce2167df8e441ce34a9fbc8578b86543/raw/f740c391ec37eaf2f80d5b46f1fa2a989dd45932/dingo_h_dark.svg\" height = \"65\">\n</picture>\n</a>\n\n## Quick Start & Documentation 📚\n\nQuick start example of zero-shot text classification using GPT:\n\n```python\n# Import the necessary modules\nfrom skllm.datasets import get_classification_dataset\nfrom skllm.config import SKLLMConfig\nfrom skllm.models.gpt.classification.zero_shot import ZeroShotGPTClassifier\n\n# Configure the credentials\nSKLLMConfig.set_openai_key(\"<YOUR_KEY>\")\nSKLLMConfig.set_openai_org(\"<YOUR_ORGANIZATION_ID>\")\n\n# Load a demo dataset\nX, y = get_classification_dataset() # labels: positive, negative, neutral\n\n# Initialize the model and make the predictions\nclf = ZeroShotGPTClassifier(model=\"gpt-4\")\nclf.fit(X,y)\nclf.predict(X)\n```\n\nFor more information please refer to the **[documentation](https://skllm.beastbyte.ai)**.\n\n## Citation\n\nYou can cite Scikit-LLM using the following BibTeX:\n\n```\n@software{ScikitLLM,\n  author = {Iryna Kondrashchenko and Oleh Kostromin},\n  year = {2023},\n  publisher = {beastbyte.ai},\n  address = {Linz, Austria},\n  title = {Scikit-LLM: Scikit-Learn Meets Large Language Models},\n  url = {https://github.com/iryna-kondr/scikit-llm }\n}\n```\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.8427734375,
          "content": "[build-system]\nrequires = [\"setuptools>=61.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\ndependencies = [\n  \"scikit-learn>=1.1.0,<2.0.0\",\n  \"pandas>=1.5.0,<3.0.0\",\n  \"openai>=1.2.0,<2.0.0\",\n  \"tqdm>=4.60.0,<5.0.0\",\n  \"google-cloud-aiplatform[pipelines]>=1.27.0,<2.0.0\"\n]\nname = \"scikit-llm\"\nversion = \"1.4.1\"\nauthors = [\n  { name=\"Oleh Kostromin\", email=\"kostromin97@gmail.com\" },\n  { name=\"Iryna Kondrashchenko\", email=\"iryna230520@gmail.com\" },\n]\ndescription = \"Scikit-LLM: Seamlessly integrate powerful language models like ChatGPT into scikit-learn for enhanced text analysis tasks.\"\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\nrequires-python = \">=3.9\"\nclassifiers = [\n    \"Programming Language :: Python :: 3\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: OS Independent\",\n]\n\n[project.optional-dependencies]\ngguf = [\"llama-cpp-python>=0.2.82,<0.2.83\"]\nannoy = [\"annoy>=1.17.2,<2.0.0\"]\n\n[tool.ruff]\nselect = [\n    # pycodestyle\n    \"E\",\n    # pyflakes\n    \"F\",\n    # pydocstyle\n    \"D\",\n    # flake8-bandit\n    \"S\",\n    # pyupgrade\n    \"UP\",\n    # pep8-naming\n    \"N\",\n]\n# Error E501 (Line too long) is ignored because of docstrings.\nignore = [\n    \"S101\",\n    \"S301\",\n    \"S311\",\n    \"D100\",\n    \"D200\",\n    \"D203\",\n    \"D205\",\n    \"D401\",\n    \"E501\",\n    \"N803\",\n    \"N806\",\n    \"D104\",\n]\nextend-exclude = [\"tests/*.py\", \"setup.py\"]\ntarget-version = \"py39\"\nforce-exclude = true\n\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"E402\", \"F401\", \"F403\", \"F811\"]\n\n[tool.ruff.pydocstyle]\nconvention = \"numpy\"\n\n[tool.mypy]\nignore_missing_imports = true\n\n[tool.black]\npreview = true\ntarget-version = ['py39', 'py310', 'py311']\n\n[tool.isort]\nprofile = \"black\"\nfilter_files = true\nknown_first_party = [\"skllm\", \"skllm.*\"]\nskip = [\"__init__.py\"]\n\n[tool.docformatter]\nclose-quotes-on-newline = true # D209\n\n[tool.pytest.ini_options]\npythonpath = [\n  \".\"\n]\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.064453125,
          "content": "pre-commit\nblack\nisort\nruff\ndocformatter\ninterrogate\nnumpy\npandas\n"
        },
        {
          "name": "skllm",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}