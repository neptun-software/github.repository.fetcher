{
  "metadata": {
    "timestamp": 1736559460464,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gregmalcolm/python_koans",
      "stars": 4968,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "*.pyc\n*.swp\n.DS_Store\nanswers\n.hg\n.idea"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.2763671875,
          "content": "# Install custom tools, runtimes, etc.\n# For example \"bastet\", a command-line tetris clone:\n# RUN brew install bastet\n#\n# More information: https://www.gitpod.io/docs/config-docker/\n  \nFROM gitpod/workspace-full:latest\n\nUSER gitpod\n\nRUN pip3 install pytest==4.4.2 pytest-testdox mock"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.4052734375,
          "content": "image:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - command: python contemplate_koans.py\n\ngithub:\n    prebuilds:\n        # enable for the master/default branch (defaults to true)\n        master: true\n        # enable for pull requests coming from this repo (defaults to true)\n        pullRequests: false\n        # add a \"Review in Gitpod\" button as a comment to pull requests (defaults to true)\n        addComment: false\n"
        },
        {
          "name": ".hgignore",
          "type": "blob",
          "size": 0.0517578125,
          "content": "syntax: glob\n*.pyc\n*.swp\n.DS_Store\nanswers\n.git\n.idea"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7392578125,
          "content": "language: python\n\npython:\n    - 3.9\n\nscript:\n    - python _runner_tests.py\n#   - python contemplate_koans.py                          # Run all the koans\n#   - python contemplate_koans.py about_asserts about_none # Run a subset of\n#                                                          # koans\n#\n#   Working through Python Koans in a fork? Want to use Travis CI to show which\n#   koans you've passed? Then comment out one of the above \"contemplate_koans\"\n#   lines above!\n#\nnotifications:\n  email: true\n\n# Some other koans (see runner/sensei.py or \"ls koans\" to see the light):\n#\n# about_none about_lists about_list_assignments about_dictionaries\n# about_strings about_tuples about_methods about_control_statements\n# about_true_and_false about_sets ...\n"
        },
        {
          "name": "Contributor Notes.txt",
          "type": "blob",
          "size": 0.3056640625,
          "content": "Testing a specific koan\n===================================\n\nThis will help when adding/modifying koans\n\nRunning a whole test case:\n\n  $ python3 contemplate_koans.py about_strings\n\n  Running a single test:\n\n  $ python3 contemplate_koans.py about_strings.AboutStrings.test_triple_quoted_strings_need_less_escaping\n"
        },
        {
          "name": "MIT-LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "Copyright 2021 Greg Malcolm and The Status Is Not Quo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 6.923828125,
          "content": "============\nPython Koans\n============\n\n.. image:: https://travis-ci.org/gregmalcolm/python_koans.png?branch=master\n   :target: http://travis-ci.org/gregmalcolm/python_koans\n\n.. image:: https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\n    :target: https://gitpod.io/#https://github.com/gregmalcolm/python_koans\n    \n.. image:: https://www.eclipse.org/che/contribute.svg\n    :target: https://workspaces.openshift.com/f?url=https://gitpod.io/#https://github.com/gregmalcolm/python_koans\n\nOne click installation:\n-----------------------\n\n.. image:: https://www.eclipse.org/che/contribute.svg\n    :target: https://workspaces.openshift.com/f?url=https://gitpod.io/#https://github.com/gregmalcolm/python_koans\n|   or\n.. image:: https://gitpod.io/button/open-in-gitpod.svg\n    :target: https://gitpod.io/#https://gitpod.io/#https://github.com/gregmalcolm/python_koans\n\n|\n\nPython Koans is a port of Edgecase's \"Ruby Koans\" which can be found\nat http://rubykoans.com/.\n\n.. image:: https://user-images.githubusercontent.com/2614930/28401740-ec6214b2-6cd0-11e7-8afd-30ed3102bfd6.png\n\nPython Koans is an interactive tutorial for learning the Python programming\nlanguage by making tests pass.\n\nMost tests are *fixed* by filling the missing parts of assert functions. Eg:\n\n.. code-block:: python\n\n    self.assertEqual(__, 1+2)\n\nwhich can be fixed by replacing the __ part with the appropriate code:\n\n.. code-block:: python\n\n    self.assertEqual(3, 1+2)\n\nOccasionally you will encounter some failing tests that are already filled out.\nIn these cases you will need to finish implementing some code to progress. For\nexample, there is an exercise for writing some code that will tell you if a\ntriangle is equilateral, isosceles or scalene.\n\nAs well as being a great way to learn some Python, it is also a good way to get\na taste of Test Driven Development (TDD).\n\n\nDownloading Python Koans\n------------------------\n\nPython Koans is available on GitHub:\n\n* https://github.com/gregmalcolm/python_koans\n\nYou can clone with Git or download the source as a zip/gz/bz2.\n\n\nInstalling Python Koans\n-----------------------\n\nAside from downloading or checking out the latest version of Python Koans, you\nneed to install the Python interpreter.\n\nAt this time of writing, we support Python 3. The policy is to try to keep\ncurrent with the latest production version.\n\nYou should be able to work with newer Python versions, but older ones will\nlikely give you problems.\n\nYou can download Python from here:\n\n* https://www.python.org/downloads/\n\nAfter installing Python make sure the folder containing the python executable\nis in the system path. In other words, you need to be able to run Python from a\ncommand console. It will either be ``python3`` or for Windows it will be ``python.exe``.\n\nIf you have problems, this may help:\n\n* https://www.python.org/about/gettingstarted/\n\nWindows users may also want to update the line in the batch file ``run.bat`` to\nset the python path::\n\n    SET PYTHON_PATH=C:\\Python39\n\n\nGetting Started\n---------------\n\nJake Hebbert has created a couple of screencasts available here:\n\nhttps://www.youtube.com/watch?v=e2WXgXEjbHY&list=PL5Up_u-XkWgNcunP_UrTJG_3EXgbK2BQJ&index=1\n\nOr if you prefer to read:\n\nFrom a \\*nix terminal or Windows command prompt run::\n\n.. code-block:: sh\n\n    python contemplate_koans.py\n\nor:\n\n.. code-block:: sh\n\n    python3 contemplate_koans.py\n\nIn my case I'm using Python 3 with Windows, so I fire up my command\nshell (cmd.exe) and run this:\n\n.. image:: https://user-images.githubusercontent.com/2614930/28401747-f723ff00-6cd0-11e7-9b9a-a6993b753cf6.png\n\nApparently a test failed::\n\n    AssertionError: False is not True\n\nIt also tells me exactly where the problem is, it's an assert on line 12\nof ``.\\\\koans\\\\about_asserts.py``. This one is easy, just change ``False`` to ``True`` to\nmake the test pass.\n\nSooner or later you will likely encounter tests where you are not sure what the\nexpected value should be. For example:\n\n.. code-block:: python\n\n    class Dog:\n        pass\n\n    def test_objects_are_objects(self):\n        fido = self.Dog()\n        self.assertEqual(__, isinstance(fido, object))\n\nThis is where the Python Command Line can come in handy. In this case I can\nfire up the command line, recreate the scenario and run queries:\n\n.. image:: https://user-images.githubusercontent.com/2614930/28401750-f9dcb296-6cd0-11e7-98eb-c20318eada33.png\n\nSniffer Support\n---------------\n\nSniffer allows you to run the tests continuously. If you modify any files files\nin the koans directory, it will rerun the tests.\n\nTo set this up, you need to install sniffer:\n\n.. code-block:: sh\n\n    python3 -m pip install sniffer\n\nYou should also run one of these libraries depending on your system. This will\nautomatically trigger sniffer when a file changes, otherwise sniffer will have\nto poll to see if the files have changed.\n\nOn Linux:\n\n.. code-block:: sh\n\n    python3 -m pip install pyinotify\n\nOn Windows:\n\n.. code-block:: sh\n\n    python3 -m pip install pywin32\n\n    Also available here:\n\n    https://github.com/mhammond/pywin32/releases\n\nOn macOS:\n\n.. code-block:: sh\n\n    python3 -m pip install MacFSEvents\n\nOnce it is set up, you just run:\n\n.. code-block:: sh\n\n    sniffer\n\nJust modify one of the koans files and you'll see that the tests are triggered\nautomatically. Sniffer is controlled by ``scent.py``.\n\nGetting the Most From the Koans\n-------------------------------\n\nQuoting the Ruby Koans instructions:\n\n\t\"In test-driven development the mantra has always been, red, green,\n\trefactor. Write a failing test and run it (red), make the test pass\n\t(green), then refactor it (that is look at the code and see if you\n\tcan make it any better). In this case you will need to run the koan\n\tand see it fail (red), make the test pass (green), then take a\n\tmoment and reflect upon the test to see what it is teaching you\n\tand improve the code to better communicate its intent (refactor).\"\n\n\n\nFinding More Koan Projects\n--------------------------\n\nThere are number of other great Koan projects out there for various languages\nand frameworks. Most of them can be found in GitHub. Also there is a little\nkoans activity on Bitbucket.\n\n* GitHub koan projects:\n    https://github.com/search?q=koans&ref=cmdform\n\n* Bitbucket koan projects:\n    https://bitbucket.org/repo/all?name=koans\n\nTranslations\n------------\n\nTranslations are always welcome! Feel free to add one to this README\nif you happen to work on one:\n\nhttps://github.com/mswell/python_koans_br\n\nAcknowledgments\n---------------\n\nThanks go to Jim Weirich and Joe O'Brien for the original Ruby Koans that the\nPython Koans is based on! Also the Ruby Koans in turn borrows from Metakoans\nso thanks also go to Ara Howard for that!\n\nAlso thanks to everyone who has contributed to Python Koans! I got a great\nheadstart by taking over a code base initiated by the combined Mikes of\nFPIP. So here's a little plug for their very cool Python podcast:\n\n* https://www.frompythonimportpodcast.com/\n\nA big thanks also to Mike Pirnat @pirnat and Kevin Chase @kjc have pitched in\nas co-maintainers at various times\n"
        },
        {
          "name": "_runner_tests.py",
          "type": "blob",
          "size": 0.9609375,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport unittest\n\nfrom runner.runner_tests.test_mountain import TestMountain\nfrom runner.runner_tests.test_sensei import TestSensei\nfrom runner.runner_tests.test_helper import TestHelper\nfrom runner.runner_tests.test_path_to_enlightenment import TestFilterKoanNames\nfrom runner.runner_tests.test_path_to_enlightenment import TestKoansSuite\n\n\ndef suite():\n    suite = unittest.TestSuite()\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMountain))\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestSensei))\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestHelper))\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestFilterKoanNames))\n    suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestKoansSuite))\n    return suite\n\n\nif __name__ == '__main__':\n    res = unittest.TextTestRunner(verbosity=2).run(suite())\n    sys.exit(not res.wasSuccessful())\n"
        },
        {
          "name": "contemplate_koans.py",
          "type": "blob",
          "size": 1.2333984375,
          "content": "#!/usr/bin/env python\n\n#\n# Acknowledgment:\n#\n# Python Koans is a port of Ruby Koans originally written by Jim Weirich\n# and Joe O'brien of Edgecase. There are some differences and tweaks specific\n# to the Python language, but a great deal of it has been copied wholesale.\n# So thanks guys!\n#\n\nimport sys\n\nif __name__ == '__main__':\n    if sys.version_info < (3, 0):\n        print(\"\\nThis is the Python 3 version of Python Koans, but you are \" +\n              \"running it with Python 2!\\n\\n\"\n              \"Did you accidentally use the wrong Python script? \\nTry:\\n\\n\" +\n              \"    python3 contemplate_koans.py\\n\")\n    else:\n        if sys.version_info < (3, 7):\n            print(\"\\n\" +\n                  \"********************************************************\\n\" +\n                  \"WARNING:\\n\" +\n                  \"This version of Python Koans was designed for \" +\n                  \"Python 3.7 or greater.\\n\" +\n                  \"Your version of Python is older, so you may run into \" +\n                  \"problems!\\n\\n\" +\n                  \"But let's see how far we get...\\n\" +\n                  \"********************************************************\\n\")\n\n        from runner.mountain import Mountain\n\n        Mountain().walk_the_path(sys.argv)\n"
        },
        {
          "name": "example_file.txt",
          "type": "blob",
          "size": 0.0146484375,
          "content": "this\nis\na\ntest\n"
        },
        {
          "name": "koans.txt",
          "type": "blob",
          "size": 1.671875,
          "content": "# Lines starting with # are ignored.\nkoans.about_asserts.AboutAsserts\nkoans.about_strings.AboutStrings\nkoans.about_none.AboutNone\nkoans.about_lists.AboutLists\nkoans.about_list_assignments.AboutListAssignments\nkoans.about_dictionaries.AboutDictionaries\nkoans.about_string_manipulation.AboutStringManipulation\nkoans.about_tuples.AboutTuples\nkoans.about_methods.AboutMethods\nkoans.about_control_statements.AboutControlStatements\nkoans.about_true_and_false.AboutTrueAndFalse\nkoans.about_sets.AboutSets\nkoans.about_triangle_project.AboutTriangleProject\nkoans.about_exceptions.AboutExceptions\nkoans.about_triangle_project2.AboutTriangleProject2\nkoans.about_iteration.AboutIteration\nkoans.about_comprehension.AboutComprehension\nkoans.about_generators.AboutGenerators\nkoans.about_lambdas.AboutLambdas\nkoans.about_scoring_project.AboutScoringProject\nkoans.about_classes.AboutClasses\nkoans.about_with_statements.AboutWithStatements\nkoans.about_monkey_patching.AboutMonkeyPatching\nkoans.about_dice_project.AboutDiceProject\nkoans.about_method_bindings.AboutMethodBindings\nkoans.about_decorating_with_functions.AboutDecoratingWithFunctions\nkoans.about_decorating_with_classes.AboutDecoratingWithClasses\nkoans.about_inheritance.AboutInheritance\nkoans.about_multiple_inheritance.AboutMultipleInheritance\nkoans.about_scope.AboutScope\nkoans.about_modules.AboutModules\nkoans.about_packages.AboutPackages\nkoans.about_class_attributes.AboutClassAttributes\nkoans.about_attribute_access.AboutAttributeAccess\nkoans.about_deleting_objects.AboutDeletingObjects\nkoans.about_proxy_object_project.AboutProxyObjectProject\nkoans.about_proxy_object_project.TelevisionTest\nkoans.about_extra_credit.AboutExtraCredit\nkoans.about_regex.AboutRegex\n"
        },
        {
          "name": "koans",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.bat",
          "type": "blob",
          "size": 0.7978515625,
          "content": "@echo off\n\nREM This is how you run it from the command line.\nREM You don't actually need this script!\nSET RUN_KOANS=python.exe -B contemplate_koans.py\n\nREM Set this to your python folder:\nSET PYTHON_PATH=C:\\Python311\n\nset SCRIPT=\n\n:loop\n\nREM Hunt around for python\nIF EXIST \"python.exe\" (\n  SET SCRIPT=%RUN_KOANS%\n) ELSE (\n  IF EXIST \"%PYTHON_PATH%\" (\n    SET SCRIPT=%PYTHON_PATH%\\%RUN_KOANS%\n  ) ELSE (\n    IF EXIST %PYTHON% SET SCRIPT=%PYTHON%\\%RUN_KOANS%\n  )\n)\n\nIF NOT \"\" == \"%SCRIPT%\" (\n  %SCRIPT%\n  pause\n) ELSE (\n  echo.\n  echo Python.exe is not in the path!\n  echo.\n  echo Fix the path and try again.\n  echo Or better yet, run this with the correct python path:\n  echo.\n  echo   python.exe contemplate_koans.py\n  pause\n)\n\nSet /p  keepgoing=\"Test again? y or n - \"\nif \"%keepgoing%\" == \"y\" (\n\tgoto loop\n\t)\n\n:end\n"
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 0.04296875,
          "content": "#!/bin/sh\n\npython3 -B contemplate_koans.py\n\n"
        },
        {
          "name": "runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "scent.py",
          "type": "blob",
          "size": 0.2744140625,
          "content": "from sniffer.api import *\nimport os\n\nwatch_paths = ['.', 'koans/']\n\n@file_validator\ndef py_files(filename):\n    return filename.endswith('.py') and not os.path.basename(filename).startswith('.')\n\n@runnable\ndef execute_koans(*args):\n    os.system('python3 -B contemplate_koans.py')\n"
        }
      ]
    }
  ]
}