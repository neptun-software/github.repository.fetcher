{
  "metadata": {
    "timestamp": 1736560393334,
    "page": 947,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deepjyoti30/ytmdl",
      "stars": 3254,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "__pycache__\n.eggs/\nbuild/\ndist/\nytmdl.*\nytmdl/__pycache__/*\n.cache\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0751953125,
          "content": "language: python\npython: \n  - \"3.6\"\n\ncache: pip\nscript:\n  - pip install ytmdl"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "MIT License\n\nCopyright (c) [2018-2020] [Deepjyoti Barman]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.7841796875,
          "content": "<div align=\"center\">\n  <img src=\".github/ytmdl.png\">\n</div>\n\n<div align=\"center\">\n<h1>YouTube Music Downloader</h1>\n<h4>Download songs from YouTube by getting the audio from YouTube and the metadata from sources like Itunes, Spotify, Gaana etc.</h4>\n</div>\n\n<div align=\"center\" width=\"60%\" height=\"auto\">\n  <br>\n    <img src=\".github/ytmdl.gif\">\n</div>\n\n<div align=\"center\">\n\n<br/>\n\n[![forthebadge made-with-python](http://ForTheBadge.com/images/badges/made-with-python.svg)](https://www.python.org/)<br/><br/>\n<img src=\"https://img.shields.io/badge/Maintained%3F-Yes-blueviolet?style=for-the-badge\">\n![Travis (.org)](https://img.shields.io/travis/deepjyoti30/ytmdl?style=for-the-badge) ![[RepoStatus](https://repostatus.deepjyoti30.dev)](https://apis.deepjyoti30.dev/repostatus/badge?repo=deepjyoti30%2Fytmdl&style=for-the-badge) [![License](https://img.shields.io/badge/License-MIT-pink.svg?style=for-the-badge)](LICENSE.md) ![PyPI](https://img.shields.io/pypi/v/ytmdl?style=for-the-badge) ![AUR](https://img.shields.io/aur/version/ytmdl?color=red&style=for-the-badge) [![Downloads](https://img.shields.io/badge/dynamic/json?style=for-the-badge&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fytmdl)](https://img.shields.io/badge/dynamic/json?style=for-the-badge&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fytmdl) [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-lightblue.svg?style=for-the-badge)](http://makeapullrequest.com) [![Telegram](https://img.shields.io/badge/Telegram-YTMDL-blue.svg?style=for-the-badge)](https://t.me/ytmdl)\n\n<p>\n<a href=\"https://ko-fi.com/deepjyoti30\"><img src=\"https://raw.githubusercontent.com/adi1090x/files/master/other/kofi.png\" alt=\"Support me on ko-fi\"></a>\n</p>\n\n<br/>\n\n### \\[[Web App](#web-app)] \\[[Why This?](#why-this)] \\[[Support the Project](#support-the-project)] \\[[Installation](#installation)] \\[[Configuration](#configuration)] \\[[WiKi](https://github.com/deepjyoti30/ytmdl/wiki/)]\n\n<br/>\n</div>\n\n## Web App\n\nYtmdl also has an web app, you can try it out [here](https://ytmdl.deepjyoti30.dev/)\n\n## Why this?\n\nThis app downloads a song by getting the audio from Youtube sources **using** youtube-dl and then adds song information like\nartist name, album name, release date, thumbnail etc by fetching it from sources like Itunes, Spotify, Gaana and other sources.\n\n**NO**. YoutubeDL doesn't do that. All youtube-dl does is lets you download audio from a video that you specify.\n**This app is not yet another youtube-dl clone.**\n\n## Support the Project?\n\nHelp the development of this project by becoming a backer or a sponsor.\n\n### [Become a Backer](https://opencollective.com/ytmdl#backer)\n\n### [Become a sponsor](https://opencollective.com/ytmdl#sponsor)\n\nIf you like my work, consider buying me a coffee or donating. In case you want to become a patron, join my [Pateron](https://www.patreon.com/deepjyoti30)\n\n<p align=\"left\">\n<a href=\"https://www.paypal.me/deepjyoti30\" target=\"_blank\"><img alt=\"undefined\" src=\"https://img.shields.io/badge/paypal-deepjyoti30-blue?style=for-the-badge&logo=paypal\"></a>\n<a href=\"https://www.patreon.com/deepjyoti30\" target=\"_blank\"><img alt=\"undefined\" src=\"https://img.shields.io/badge/Patreon-deepjyoti30-orange?style=for-the-badge&logo=patreon\"></a>\n<a href=\"https://ko-fi.com/deepjyoti30\" target=\"_blank\"><img alt=\"undefined\" src=\"https://img.shields.io/badge/KoFi-deepjyoti30-red?style=for-the-badge&logo=ko-fi\"></a>\n</p>\n\n## Requirements\n\n- Python 3.6.1\n- ffmpeg\n\n## Installation\n\n- [PyPi](#pypi)\n- [Arch Linux](#arch-linux)\n- [Gentoo](#gentoo)\n- [NixOS](#nixos)\n- [Windows](#windows)\n- [Manual](#manual)\n\n### PyPI\n\n```console\npip install ytmdl\n```\n\n> NOTE: System wide installation requires `sudo`\n\n### Arch Linux\n\n`ytmdl` is available in AUR as `ytmdl`. It can be found [here](https://aur.archlinux.org/packages/ytmdl/)\n\n> NOTE: The git version is availble as `ytmdl-git` in AUR.\n\n### Gentoo\n\n`ytmdl` can be installed in Gentoo by the following commands\n\n```console\n# First set up src_prepare-overlay (as root)\nemerge -av --noreplace app-eselect/eselect-repository\neselect repository enable src_prepare-overlay\nemaint sync -r src_prepare-overlay\n# Finally emerge ytmdl (as root)\nemerge -av --autounmask net-misc/ytmdl\n```\n\nAvailable in **src_prepare-overlay** [here](https://gitlab.com/src_prepare/src_prepare-overlay)\n\n### NixOS\n\n`ytmdl` can be installed using Nix with the command\n\n```console\nnix-env -iA nixos.ytmdl\n```\n\n### Windows\n\nYou need to install `ffmpeg` in order for `ytmdl` to work properly. This can be done by downloading the `ffmpeg` binary from [here](https://ffmpeg.org/download.html). Once downloaded, extract the file and find the `ffmpeg.exe` file. Copy the directory's path and add it to PATH in the following way.\n\n```console\nsetx path \"%path%;C:\\your\\path\\here\\\"\n```\n\nOnce `ffmpeg` is installed, install `ytmdl` using the following command\n\n```console\npip install ytmdl --upgrade\n```\n\n> NOTE: You'll need to have Python 3.6.1 or more installed.\n\nOptionally, also install the latest version of `downloader-cli` and `simber` using the following command:\n\n```console\npip install simber downloader-cli --upgrade\n```\n\n### Manual\n\nYou can manually install `ytmdl` by cloning this repository and running the `setup.py` script.\n\n1. Install `setuptools` if it isn't already:\n\n   ```console\n    pip install setuptools\n   ```\n\n1. Clone this repo:\n\n   ```console\n   git clone https://github.com/deepjyoti30/ytmdl\n   ```\n\n1. Move into the `ytmdl` directory and run the `setup.py` script:\n\n   ```console\n   cd ytmdl\n   sudo python setup.py install\n   ```\n\n## Usage\n\n```console\nusage: ytmdl [-h] [-q] [-o OUTPUT_DIR] [--song SONG-METADATA]\n             [--choice CHOICE] [--artist ARTIST] [--album ALBUM]\n             [--disable-metaadd] [--skip-meta] [-m] [--itunes-id ITUNES_ID]\n             [--spotify-id SPOTIFY_ID] [--disable-sort] [--ask-meta-name]\n             [--on-meta-error ON_META_ERROR] [--proxy URL] [--url URL]\n             [--list PATH TO LIST] [--nolocal] [--format FORMAT] [--trim]\n             [--version] [--keep-chapter-name] [--download-archive FILE]\n             [--ignore-chapters] [--ytdl-config PATH] [--dont-transcode]\n             [--filename NAME] [--pl-start NUMBER] [--pl-end NUMBER]\n             [--pl-items ITEM_SPEC] [--ignore-errors] [--title-as-name]\n             [--level LEVEL] [--disable-file] [--list-level]\n             [SONG_NAME ...]\n\npositional arguments:\n  SONG_NAME             Name of the song to download. Can be an URL to a\n                        playlist as well. It will be automatically recognized.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -q, --quiet           Don't ask the user to select songs if more than one\n                        search result. The first result in each case will be\n                        considered.\n  -o OUTPUT_DIR, --output-dir OUTPUT_DIR\n                        The location for the song to be downloaded to. When no\n                        argument is passed, the default locations of SONG_DIR\n                        or XDG_MUSIC_DIR are used.\n  --proxy URL           Use the specified HTTP/HTTPS/SOCKS proxy. To enable\n                        SOCKS proxy, specify a proper scheme. For example\n                        socks5://127.0.0.1:1080/. Pass in an empty string\n                        (--proxy \"\") for direct connection\n  --url URL             Youtube song link.\n  --list PATH TO LIST   Download list of songs. The list should have one song\n                        name in every line.\n  --nolocal             Don't search locally for the song before downloading.\n  --format FORMAT       The format in which the song should be downloaded.\n                        Default is mp3, but can be set in config. Available\n                        options are ['mp3', 'm4a', 'opus']\n  --trim, -t            Trim out the audio from the song. Use underlying\n                        speech and music segmentation engine to determine and\n                        keep only the music in the file. Useful in songs where\n                        there are speeches, noise etc before/after the start\n                        of the song. Default is false.\n  --version             show the program version number and exit\n  --keep-chapter-name   Keep the title extracted from the chapter in order to\n                        search for the metadata. If not passed, the user will\n                        be asked if they'd like to change the title with which\n                        the metadata will be searched.\n  --download-archive FILE\n                        Skip downloading songs that are present in the passed\n                        file. The songs are matched by using the videoId. All\n                        downloaded song Id's are automatically added to the\n                        file.\n  --ignore-chapters     Ignore chapters if available in the video and treat it\n                        like one video\n  --ytdl-config PATH    Path to the youtube-dl config location or the\n                        directory\n  --dont-transcode      Don't transcode the audio after downloading.\n                        Applicable for OPUS format only. (Default: false)\n  --filename NAME       Final filename after the song is ready to be used.\n                        This will be given priority over automatic detection\n                        unless dynamic filename path is set through config\n\nMetadata:\n  --song SONG-METADATA  The song to search in Metadata. Particularly useful\n                        for songs that have the names in a different language\n                        in YouTube. For Example, greek songs.\n  --choice CHOICE       The choice that the user wants to go for. Usefull to\n                        pass along with --quiet. Choices start at 1\n  --artist ARTIST       The name of the song's artist. Pass it with a song\n                        name.\n  --album ALBUM         The name of the song's album. Pass it with a song\n                        name.\n  --disable-metaadd     Disable addition of passed artist and album keyword to\n                        the youtube search in order to get a more accurate\n                        result. (Default: false)\n  --skip-meta           Skip setting the metadata and just copy the converted\n                        song to the destination directory. '--manual-meta'\n                        will override this option, pass only one of them.\n  -m, --manual-meta     Manually enter song details.\n  --itunes-id ITUNES_ID\n                        Direct lookup from itunes. If passed, metadata will be\n                        automatically added.\n  --spotify-id SPOTIFY_ID\n                        Direct lookup for Spotify tracks using the ID. If\n                        passed, metadata will be automatically added.\n  --disable-sort        Disable sorting of the metadata before asking for\n                        input. Useful if the song is in some other language\n                        and/or just a few providers are used.\n  --ask-meta-name       Ask the user to enter a separate name for searching\n                        the metadata (Default: false)\n  --on-meta-error ON_META_ERROR\n                        What to do if adding the metadata fails for some\n                        reason like lack of metadata or perhaps a network\n                        issue. Options are ['exit', 'skip', 'manual',\n                        'youtube']\n\nPlaylist:\n  --pl-start NUMBER     Playlist video to start at (default is 1)\n  --pl-end NUMBER       Playlist video to end at (default is last)\n  --pl-items ITEM_SPEC  Playlist video items to download. Specify indices of\n                        the videos present in the playlist separated by commas\n                        like: '--playlist-items 1, 2, 4, 6' if you want to\n                        download videos indexed 1, 2, 4 and 6. Range can also\n                        be passed like: '--playlist-items 1-3, 5-7' to\n                        download the videos indexed at 1, 2, 3, 5, 6, 7.\n  --ignore-errors       Ignore if downloading any video fails in a playlist.\n                        If passed, the execution will move to the next video\n                        in the passed playlist.\n  --title-as-name       Use the title of the video as the name of the song to\n                        search for metadata. If not passed, user will be asked\n                        if they want to use a different name and continue\n                        accordingly.\n\nLogger:\n  --level LEVEL         The level of the logger that will be used while\n                        verbosing. Use `--list-level` to check available\n                        options.\n  --disable-file        Disable logging to files\n  --list-level          List all the available logger levels.\n\n```\n\n## Configuration\n\n### Setup\n\nThe defaults can be changed by editing the config file in ytmdl folder in your .config folder\n\nThe config will be created automatically the first time you run `ytmdl` and will be present in ~/.config/ytmdl/config\n\nHowever, it can be created manually by the following command\n\n```console\nmkdir -p ~/.config/ytmdl; curl https://raw.githubusercontent.com/deepjyoti30/ytmdl/master/examples/config > ~/.config/ytmdl/config\n```\n\nAbove command will download the config from the repo and save it in the `~/.config/ytmdl/` directory.\n\n### Supported Options\n\nAs of the latest development branch, the following options can be changed from the config\n\n|         Name         | Description                                      | Default                        |\n| :------------------: | ------------------------------------------------ | ------------------------------ |\n|      `SONG_DIR`      | Directory to save the songs in after editing     | Current directory              |\n|    `SONG_QUALITY`    | Quality of the song                              | 320kbps                        |\n| `METADATA_PROVIDERS` | Which API providers to use for metadata          | all supported options are used |\n|   `DEFAULT_FORMAT`   | Default format of the song                       | mp3                            |\n|   `ON_META_ERROR`    | What to do if error occurs while writing meta    | exit                           |\n|   `ITUNES_COUNTRY`   | Which region to use while searching from Itunes  | US                             |\n|  `SPOTIFY_COUNTRY`   | Which market to use while searching from Spotify | US                             |\n\n### Advanced Configuration\n\n#### Dynamically storing songs\n\n`SONG_DIR` field also takes values that are extracted from the song being downloaded\n\nThe `SONG_DIR` field needs to be passed some special values in order to achieve that. The string is scanned and when a `$` sign occurs, the special string will start and each directory can be separated by using an `->` sign.\n\nTo save the song in the `/dir/<album_name>/<artist_name>/<title>/<song_name>.mp3` format, the following needs to be added in the `SONG_DIR` field.\n\n```\nSONG_DIR=\"/dir$Album->Artist->Title\"\n```\n\nAbove will extract to the following directory structure when a song named `Cradles` by artist `Sub Urban` from the album `Cradles - Single`\n\n```\n|--dir\n   |--Cradles - Single\n      |--Sub Urban\n         |--Cradles\n            |--Cradles.mp3\n```\n\nIn order to pass the name with which the song should be saved, the last attribute can be passed between `[]`.\n\nIf the `SONG_DIR` field is `/dir$Album->[Artist]` will extract to the following directory structure\n\n```\n|--dir\n   |--Cradles - Single\n      |--Sub Urban.mp3\n```\n\n#### Supported options for dynamic storing\n\nAs of the latest source, the following options can be passed to the special string in order to create dynamic directories\n\n|     Name      |                         |\n| :-----------: | ----------------------- |\n|   `Artist`    | Artist Of the Song      |\n|    `Album`    | Album Of the Song       |\n|    `Title`    | Title Of the Song       |\n|    `Genre`    | Genre Of the Song       |\n| `TrackNumber` | TrackNumber Of the Song |\n| `ReleaseDate` | ReleaseDate Of the Song |\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.05859375,
          "content": "#!/usr/bin/env python3\n\"\"\"Setup ytmdl.\"\"\"\n\nimport setuptools\nfrom os import path\nfrom warnings import warn\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nexec(open(\"ytmdl/__version__.py\").read())\n\nreq_pkgs = [\n    'yt-dlp>=2024.4.9',\n    'mutagen',\n    'itunespy',\n    'requests',\n    'colorama',\n    'beautifulsoup4',\n    'downloader-cli>=0.3.4',\n    'pyxdg',\n    'ffmpeg-python',\n    'pysocks',\n    'unidecode',\n    'youtube-search-python',\n    'pyDes',\n    'urllib3',\n    'simber==0.2.6',\n    'rich',\n    'musicbrainzngs',\n    'ytmusicapi',\n    'spotipy'\n]\n\n\nextra_features = {\n    'noise-clean': ['inaSpeechSegmenter', 'tensorflow']\n}\n\n\n# Add the distributable files\nfile_map = [\n    ('/etc/bash_completion.d', 'ytmdl.bash'),\n    ('/usr/share/zsh/functions/Completion/Unix', 'ytmdl.zsh')\n]\n\ndata_files = []\nfor dirname, filename in file_map:\n    if not path.exists(filename):\n        warn(\"%s does not exist, skipping.\" % filename)\n    else:\n        data_files.append((dirname, [filename]))\n\nparams = {\n    'data_files': data_files,\n}\n\n\nif __name__ == '__main__':\n    setuptools.setup(\n        name=\"ytmdl\",\n        version=__version__,\n        author=\"Deepjyoti Barman\",\n        author_email=\"deep.barma30@gmail.com\",\n        description=\"Youtube Music Downloader\",\n        long_description=long_description,\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/deepjyoti30/ytmdl\",\n        packages=setuptools.find_packages(),\n        classifiers=(\n            \"Programming Language :: Python :: 3\",\n            \"License :: OSI Approved :: MIT License\",\n            \"Operating System :: OS Independent\",\n            \"Development Status :: 5 - Production/Stable\",\n            \"Environment :: Console\",\n            \"Topic :: Multimedia :: Sound/Audio\",\n        ),\n        python_requires=\">=3.6.2\",\n        install_requires=req_pkgs,\n        setup_requires=req_pkgs,\n        extras_require=extra_features,\n        entry_points={\n            'console_scripts': [\n                \"ytmdl = ytmdl:entry\"\n            ]\n        },\n        **params\n    )\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "ytmdl",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}