{
  "metadata": {
    "timestamp": 1736560425079,
    "page": 992,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwMDA=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "autorope/donkeycar",
      "stars": 3192,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.046875,
          "content": "[run]\nbranch = True\nomit =\n    donkeycar/tests/*"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.22265625,
          "content": "\nenv/*\ndata/*\ndist/*\n\n*.pyc\n.ipynb_checkpoints\n*.egg-info/\n.git.bfg-report\n.DS_Store\nlag_log.csv\n\n.cache\nsite/*\nbuild\n\n#IDE\n.idea\n.spyproject\n.pytest_cache\n.coverage\n.vscode\n\n# codecov\nhtmlcov/\n\n# PyTorch\nlightning_logs\ntb_logs\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.5,
          "content": "# Contributing to Donkeycar\n\nThank you for contributing to the Donkeycar project.  Here are some guidelines that can help you be successful in getting your contributions merged into Donkeycar.\n\n## What makes for a good Pull Request?\n- The code implements a bug fix or optimization/refactor to a preexisting feature or adds a new feature.\n- If the code is adding a new feature, it would be advisable to open an Issue in the Donkeycar repo prior to opening the PR.  This would allow discussion on how the feature may be best implemented and even if the feature is something that would get accepted into Donkeycar.  The new feature should have fairly broad applicability; it should be a feature that would be useful to a lot of users.\n- The code should be well writte have some comments in it where it is not obvious what is going on and why. It should also be pep-8 compliant in style. Like with any other code, it should avoid code duplications from itself or other existing code. It should keep data and methods arranged in classes as much as possible and should avoid lengthy, monolithic functions and functions with too many input/output parameters. Monkey-patching is a no-go and pythonic style usually is a good guide.\n- The code must work on our currently supported platforms; Raspberry Pi OS and the Jetson Nano for cars and Linux, Mac and WSL on Windows.\n- The code should have unit tests.\n- The code should work on the version of Python specified in the installation documentation at docs.donkeycar.com\n- The PR should include instructions/steps telling how the feature/fix can be tested by a person.  In some cases you may want to create a video and link it from Youtube or Vimeo to show the process; for instance if it includes mounting hardware.\n- For new features or changes to preexisting feature you should also open a PR in the documentation repo https://github.com/autorope/donkeydocs with updated docs.  A human tester will want to refer to that when testing.\n\n\n## What makes for a Pull Request that is not likely to get accepted?\n- It adds a feature that is not useful to a broad audience or is too complex/complicated for the Donkeycar audience.  For instance, it adds a driver for a custom piece of hardware or a piece of hardware that is not generally obtainable.  In this case we will encourage you to maintain the feature in your own fork on Donkeycar and keep that fork up to date with the main branch.\n- It does not have unit tests.\n- The PR is opened and it receives comments and/or requests for change, but no response is made by the owner of the PR.  In this case we will eventually close the PR as unresponsive.\n\n\n## Pull Request Process\n- Fork the Donkeycar repository into your own github account.  See [About Forks](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks) in the github docs.\n- Create a branch based off the `main` branch in your repository and make the changes.  \n- Open a pull request to the Donkeycar main repository.  If it is associated with a github issue then reference the issue in the pull request.  See [Creating a Pull Request from a Fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) in the github docs.\n  - If the PR is associated with an Issue then link the issue in the PR description.\n  - If the PR is associated with a documentation change then link to the associated PR in the documentation repo.\n- The maintainers will be automatically notified of the pull request.  \n- Maintainers will provide comments and/or request for changes in the PR.  This could take a little while; we have a small volunteer team that is working on a number of initiatives.  You can get more visibility by announcing the PR in the software channel on the Discord.\n- The owner of the PR should be checking it for comments and/or request for changes and responding.  In particular, if there are requests for changes but you cannot get to them reasonably quickly then add a comment in the PR that helps us understand your timeframe so that we don't close that PR as unresponsive.\n- There is a possibility that we choose to not move forward with the PR and it will be closed.  You can minimize that chance by discussing the feature or fix in an Issue prior to opening a PR (see above).\n- If once all requested changes are made then the PR can be accepted.  At this point one of the maintainers will merge the PR and the PR will be closed as completed.  Congratulations, you just made the world better.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7919921875,
          "content": "FROM python:3.6\n\nWORKDIR /app\n\n# install donkey with tensorflow (cpu only version)\nADD ./setup.py /app/setup.py\nADD ./README.md /app/README.md\nRUN pip install -e .[tf]\n\n# get testing requirements\nRUN pip install -e .[dev]\n\n# setup jupyter notebook to run without password\nRUN pip install jupyter notebook\nRUN jupyter notebook --generate-config\nRUN echo \"c.NotebookApp.password = ''\">>/root/.jupyter/jupyter_notebook_config.py\nRUN echo \"c.NotebookApp.token = ''\">>/root/.jupyter/jupyter_notebook_config.py\n\n# add the whole app dir after install so the pip install isn't updated when code changes.\nADD . /app\n\n#start the jupyter notebook\nCMD jupyter notebook --no-browser --ip 0.0.0.0 --port 8888 --allow-root  --notebook-dir=/app/notebooks\n\n#port for donkeycar\nEXPOSE 8887\n\n#port for jupyter notebook\nEXPOSE 8888"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2017 Will Roscoe\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.10546875,
          "content": "include donkeycar/templates/*\ninclude scripts\nrecursive-include donkeycar/parts/web_controller/templates/ *\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.0498046875,
          "content": "\n\ntests:\n\tpytest\n\npackage:\n\tpython setup.py sdist\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4111328125,
          "content": "# Donkeycar: a python self driving library\n\n\n![Build Status](https://github.com/autorope/donkeycar/actions/workflows/python-package-conda.yml/badge.svg?branch=main)\n![Lint Status](https://github.com/autorope/donkeycar/actions/workflows/superlinter.yml/badge.svg?branch=main)\n![Release](https://img.shields.io/github/v/release/autorope/donkeycar)\n\n\n[![All Contributors](https://img.shields.io/github/contributors/autorope/donkeycar)](#contributors-)\n![Issues](https://img.shields.io/github/issues/autorope/donkeycar)\n![Pull Requests](https://img.shields.io/github/issues-pr/autorope/donkeycar?)\n![Forks](https://img.shields.io/github/forks/autorope/donkeycar)\n![Stars](https://img.shields.io/github/stars/autorope/donkeycar)\n![License](https://img.shields.io/github/license/autorope/donkeycar)\n\n![Discord](https://img.shields.io/discord/662098530411741184.svg?logo=discord&colorB=7289DA)\n\nDonkeycar is minimalist and modular self driving library for Python. It is developed for hobbyists and students with a focus on allowing fast experimentation and easy community contributions.  It is being actively used at the high school and university level for learning and research.  It offers a [rich graphical interface](https://docs.donkeycar.com/utility/ui/) and includes a [simulator](https://docs.donkeycar.com/guide/deep_learning/simulator/) so you can experiment with self-driving even before you build a robot.\n\n#### Quick Links\n* [Donkeycar Updates & Examples](http://donkeycar.com)\n* [Build instructions and Software documentation](http://docs.donkeycar.com)\n* [Discord / Chat](https://discord.gg/PN6kFeA)\n\n![donkeycar](https://github.com/autorope/donkeydocs/blob/master/docs/assets/build_hardware/donkey2.png)\n\n### Use Donkeycar if you want to:\n* Build a robot and teach it to drive itself.\n* Experiment with [autopilots](https://docs.donkeycar.com/guide/train_autopilot/), gps, computer vision and neural networks.\n* Compete in self driving races like [DIY Robocars](http://diyrobocars.com), including [online simulator races](https://docs.donkeycar.com/guide/deep_learning/virtual_race_league/) against competitors from around the world.\n* Participate in a vibrant online community learning cutting edge techology and having fun doing it.\n\n### What do you need to know before starting? (TL;DR nothing)\nDonkeycar is designed to be the 'Hello World' of automomous driving; it is simple yet flexible and powerful.  No specific prequisite knowledge is required, but it helps if you have some knowledge of:\n- [Python](https://docs.python.org/3.11/) programming.  You do not have to do any programming to use Donkeycar.  The file that you edit to configure your car, `myconfig.py`, is a Python file.  You mostly just uncomment the sections you want to change and edit them; you can avoid common mistakes if you know how Python [comments](https://www.w3schools.com/python/python_comments.asp) and [indentation](https://www.w3schools.com/python/python_syntax.asp) works.\n- Raspberry Pi.  The Raspberry Pi is the preferred on-board computer for a Donkeycar.  It is helpful to have setup and used a Raspberry Pi, but it is not necessary.  The Donkeycar documentation describes how to install the software on a RaspberryPi OS, but the specifics of how to install the RaspberryPi OS using [Raspberry Pi Imager](https://www.raspberrypi.com/software/) and how to configure the Raspberry Pi using [raspi-config](https://www.raspberrypi.com/documentation/computers/configuration.html) is left to the Raspberry Pi documentation, which is extensive and quite good. I would recommend setting up your Raspberry Pi using the Raspberry Pi documentation and then play with it a little; use the browser to visit websites and watch YouTube videos, like this one taken at the [very first outdoor race](https://youtu.be/tjWmrCIKgnE) for a Donkeycar.  Use a text editor to write and save a file.  Open a terminal and learn how to navigate the file system (see below). If you are comfortable with the Raspberry Pi then you won't have to learn it and Donkeycar at the same time.\n- The Linux [command line shell](https://magpi.raspberrypi.com/articles/terminal-help).  The command line shell is also often called the terminal.  You will type commands into the terminal to install and start the Donkeycar software.  The Donkeycar documentation describes how this works.  It is also helpful to know how navigate the file system and how to list, copy and delete files and directories/folders. You may also access your car [remotely](https://www.raspberrypi.com/documentation/computers/remote-access.html); so you will want to know how to enable and connect WIFI and how to enable and start an [SSH](https://www.raspberrypi.com/documentation/computers/remote-access.html#ssh) terminal or [VNC](https://www.raspberrypi.com/documentation/computers/remote-access.html#vnc) session from your host computer to get a command line on your car.\n\n## Get driving.\nAfter [building a Donkeycar](https://docs.donkeycar.com/guide/build_hardware/) and [installing](https://docs.donkeycar.com/guide/install_software/) the Donkeycar software you can choose your autopilot [template](https://docs.donkeycar.com/guide/create_application/) and [calibrate](https://docs.donkeycar.com/guide/calibrate/) your car and [get driving](https://docs.donkeycar.com/guide/get_driving/)!\n\n## Modify your car's behavior.\nDonkeycar includes a number of pre-built [templates](https://docs.donkeycar.com/guide/create_application/) that make it easy to get started by just changing configuration. The pre-built templates are all you may ever need, but if you want to go farther you can change a template or make your own. A Donkeycar template is organized as a pipeline of software [parts](https://docs.donkeycar.com/parts/about/) that run in order on each pass through the vehicle loop, reading inputs and writing outputs to the vehicle's software memory as they run.  A typical car has a parts that:\n- Get images from a camera. Donkeycar supports lots of different kinds of [cameras](https://docs.donkeycar.com/parts/cameras/), including 3D cameras and [lidar](https://docs.donkeycar.com/parts/lidar/).\n- Get position readings from a GPS receiver.\n- Get steering and throttle inputs from a [game controller](https://docs.donkeycar.com/parts/controllers/) or RC controller.  Donkeycar support PS3, PS4, XBox, WiiU, Nimbus and Logitech Bluetooth game controllers and any game controller that works with RaspberryPi.  Donkeycar also implements a WebUI that allows any browser compatible game controller to be connected and also offers an onscreen touch controller that works with phones.\n- Control the car's drivetrain [motors](https://docs.donkeycar.com/parts/actuators/) for acceleration and steering. Donkeycar supports various drivetrains including the ESC/Steering-servo configuration that is common to most RC cars and Differential Drive configurations.\n- Save telemetry [data](https://docs.donkeycar.com/parts/stores/) such as camera images, steering and throttle inputs, lidar data, etc.\n- Drive the car on autopilot.  Donkey supports three kinds of [autopilots](https://docs.donkeycar.com/guide/train_autopilot/); a [deep-learning](https://docs.donkeycar.com/guide/deep_learning/train_autopilot/) autopilot, a [gps autopilot](https://docs.donkeycar.com/guide/path_follow/path_follow/) and a [computer vision](https://docs.donkeycar.com/guide/computer_vision/computer_vision/) autopilot.  The Deep Learning autopilot supports Tensorflow, Tensorflow Lite, and Pytorch and many model [architectures](https://docs.donkeycar.com/parts/keras/).\n\nIf there isn't a Donkeycar part that does what you want then write your own [part](https://docs.donkeycar.com/parts/about/#parts) and add it to a vehicle [template](https://docs.donkeycar.com/parts/about/).\n\n```python\n#Define a vehicle to take and record pictures 10 times per second.\n\nimport time\nfrom donkeycar import Vehicle\nfrom donkeycar.parts.cv import CvCam\nfrom donkeycar.parts.tub_v2 import TubWriter\nV = Vehicle()\n\nIMAGE_W = 160\nIMAGE_H = 120\nIMAGE_DEPTH = 3\n\n#Add a camera part\ncam = CvCam(image_w=IMAGE_W, image_h=IMAGE_H, image_d=IMAGE_DEPTH)\nV.add(cam, outputs=['image'], threaded=True)\n\n#warmup camera\nwhile cam.run() is None:\n    time.sleep(1)\n\n#add tub part to record images\ntub = TubWriter(path='./dat', inputs=['image'], types=['image_array'])\nV.add(tub, inputs=['image'], outputs=['num_records'])\n\n#start the drive loop at 10 Hz\nV.start(rate_hz=10)\n```\n\nSee [home page](http://donkeycar.com), [docs](http://docs.donkeycar.com)\nor join the [Discord server](http://www.donkeycar.com/community.html) to learn more.\n"
        },
        {
          "name": "arduino",
          "type": "tree",
          "content": null
        },
        {
          "name": "donkeycar",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0908203125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n\n\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.107421875,
          "content": "[metadata]\nname = donkeycar\nversion = attr: donkeycar.__version__\nauthor = Will Roscoe, Adam Conway, Tawn Kramer\nurl = https://github.com/autorope/donkeycar\ndescription = Self driving library for python.\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nkeywords = selfdriving cars donkeycar diyrobocars\nlicense = MIT\nclassifiers =\n    # How mature is this project? Common values are\n    #   3 - Alpha\n    #   4 - Beta\n    #   5 - Production/Stable\n    Development Status :: 4 - Beta\n    # Indicate who your project is intended for\n    Intended Audience :: Developers\n    Topic :: Scientific/Engineering :: Artificial Intelligence\n    Programming Language :: Python :: 3.11\n\n[options]\npackages = find_namespace:\nzip_safe = True\ninclude_package_data = True\npython_requires = >=3.11.0,<3.12\ninstall_requires =\n    numpy\n    pillow\n    docopt\n    tornado\n    requests\n    PrettyTable\n    paho-mqtt\n    simple_pid\n    progress\n    pyfiglet\n    psutil\n    pynmea2\n    pyserial\n    utm\n    pandas\n    pyyaml\n\n[options.extras_require]\npi = \n    picamera2\n    Adafruit_PCA9685\n    adafruit-circuitpython-ssd1306\n    adafruit-circuitpython-rplidar\n    RPi.GPIO\n    flatbuffers==24.3.*\n    tensorflow-aarch64==2.15.*\n    opencv-contrib-python\n    matplotlib==3.8.*\n    kivy\n    kivy-garden.matplotlib\n    pandas\n    plotly\n    albumentations\n\nnano =\n    Adafruit_PCA9685\n    adafruit-circuitpython-ssd1306\n    adafruit-circuitpython-rplidar\n    Jetson.GPIO\n    numpy==1.23.*\n    matplotlib==3.7.*\n    kivy\n    kivy-garden.matplotlib\n    plotly\n    pandas==2.0.*\n\npc =\n    tensorflow==2.15.*\n    matplotlib==3.8.*\n    kivy\n    kivy-garden.matplotlib\n    pandas\n    plotly\n    albumentations\n\nmacos =\n    tensorflow==2.15.*\n    matplotlib==3.8.*\n    kivy\n    kivy-garden.matplotlib\n    pandas\n    plotly\n    albumentations\n\ndev =\n    pytest==8.1.*\n    pytest-cov\n    responses\n    mypy\n\ntorch =\n    torch==2.1.*\n    pytorch-lightning\n    torchvision\n    torchaudio\n    fastai\n\n\n[options.package_data]\n* = *.html, *.ini, *.txt, *.kv\n\n[options.entry_points]\nconsole_scripts =\n    donkey = donkeycar.management.base:execute_from_command_line\n"
        }
      ]
    }
  ]
}