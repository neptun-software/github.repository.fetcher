{
  "metadata": {
    "timestamp": 1736559581339,
    "page": 204,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spack/spack",
      "stars": 4497,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.9404296875,
          "content": "coverage:\n  precision: 2\n  round: nearest\n  range: 60...90\n  status:\n    project:\n      default:\n        threshold: 2.0%\n\nignore:\n  - lib/spack/spack/test/.*\n  - lib/spack/docs/.*\n  - lib/spack/external/.*\n  - share/spack/qa/.*\n\ncomment: off\n\n# Inline codecov annotations make the code hard to read, and they add\n# annotations in files that seemingly have nothing to do with the PR.\ngithub_checks:\n    annotations: false\n\n# Attempt to fix \"Missing base commit\" messages in the codecov UI.\n# Because we do not run full tests on package PRs, package PRs' merge\n# commits on `develop` don't have coverage info.  It appears that\n# codecov will give you an error if the pseudo-base's coverage data\n# doesn't all apply properly to the real PR base.\n#\n# See here for docs:\n#   https://docs.codecov.com/docs/comparing-commits#pseudo-comparison\n# See here for another potential solution:\n#   https://community.codecov.com/t/2480/15\ncodecov:\n  allow_coverage_offsets: true\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.154296875,
          "content": ".git/*\nopt/spack/*\n\n/etc/spack/*\n!/etc/spack/defaults\n\nshare/spack/dotkit/*\nshare/spack/lmod/*\nshare/spack/modules/*\nlib/spack/spack/test/*\nvar/spack/cache/*\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 1.44921875,
          "content": "# -*- conf -*-\n# flake8 settings for Spack.\n#\n# These exceptions are for Spack core files. We're slightly more lenient\n# with packages.  See .flake8_packages for that.\n#\n# This is the only flake8 rule Spack violates somewhat flagrantly\n# - E731: do not assign a lambda expression, use a def\n#\n# This is the only flake8 exception needed when using Black.\n# - E203: white space around slice operators can be required, ignore : warn\n#\n# We still allow these in packages (Would like to get rid of them or rely on mypy\n# in the future)\n# - F403: from/import * used; unable to detect undefined names\n# - F405: undefined name or from *\n# - F821: undefined name (needed with from/import *)\n#\n[flake8]\n#ignore = E129,,W503,W504,F999,N801,N813,N814,F403,F405,E203\nextend-ignore = E731,E203\nmax-line-length = 99\n\n# F4: Import\n# - F405: `name` may be undefined, or undefined from star imports: `module`\n#\n# F8: Name\n# - F821: undefined name `name`\n#\nper-file-ignores =\n  var/spack/repos/*/package.py:F403,F405,F821\n  *-ci-package.py:F403,F405,F821\n\n# exclude things we usually do not want linting for.\n# These still get linted when passed explicitly, as when spack flake8 passes\n# them on the command line.\nexclude =\n  .git\n  etc/\n  opt/\n  share/\n  var/spack/cache/\n  var/spack/gpg*/\n  var/spack/junit-report/\n  var/spack/mock-configs/\n  lib/spack/external\n  __pycache__\n  var\n\nformat = spack\n\n[flake8:local-plugins]\nreport =\n  spack = flake8_formatter:SpackFormatter\npaths =\n  ./share/spack/qa/\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1865234375,
          "content": "# .git-blame-ignore-revs\n# Formatted entire codebase with black 23\n603569e321013a1a63a637813c94c2834d0a0023\n# Formatted entire codebase with black 22\nf52f6e99dbf1131886a80112b8c79dfc414afb7c\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1025390625,
          "content": "*.py diff=python\n*.lp linguist-language=Prolog\nlib/spack/external/* linguist-vendored\n*.bat text eol=crlf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 8.4541015625,
          "content": "##########################\n# Spack-specific ignores #\n##########################\n\n/var/spack/stage\n/var/spack/cache\n/var/spack/environments\n/var/spack/repos/*/index.yaml\n/var/spack/repos/*/lock\n/opt\n# Ignore everything in /etc/spack except /etc/spack/defaults\n/etc/spack/*\n!/etc/spack/defaults\n/share/spack/modules\n/share/spack/lmod\n# Debug logs\nspack-db.*\n*.in.log\n*.out.log\n\n###########################\n# Python-specific ignores #\n###########################\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\n#lib/\n#lib64/\nparts/\nsdist/\n#var/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n!/lib/spack/env\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n########################\n# Vim-specific ignores #\n########################\n\n# Swap\n[._]*.s[a-v][a-z]\n!*.svg  # comment out if you don't need vector files\n[._]*.sw[a-p]\n[._]s[a-rt-v][a-z]\n[._]ss[a-gi-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\nSessionx.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n# Persistent undo\n[._]*.un~\n\n##########################\n# Emacs-specific ignores #\n##########################\n\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# zsh byte-compiled files\n*.zwc\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n# network security\n/network-security.data\n\n############################\n# Eclipse-specific ignores #\n############################\n\n.metadata\n#bin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.settings/\n.loadpath\n.recommenders\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# PyDev specific (Python IDE for Eclipse)\n*.pydevproject\n\n# CDT-specific (C/C++ Development Tooling)\n.cproject\n\n# CDT- autotools\n.autotools\n\n# Java annotation processor (APT)\n.factorypath\n\n# PDT-specific (PHP Development Tools)\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# Tern plugin\n.tern-project\n\n# TeXlipse plugin\n.texlipse\n\n# STS (Spring Tool Suite)\n.springBeans\n\n# Code Recommenders\n.recommenders/\n\n# Annotation Processing\n.apt_generated/\n.apt_generated_test/\n\n# Scala IDE specific (Scala & Java development for Eclipse)\n.cache-main\n.scala_dependencies\n.worksheet\n\n# Uncomment this line if you wish to ignore the project description file.\n# Typically, this file would be tracked if it contains build/dependency configurations:\n#.project\n\n##################################\n# Visual Studio-specific ignores #\n##################################\n\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n*.code-workspace\n\n# Local History for Visual Studio Code\n.history/\n\n#################################\n# Sublime Text-specific ignores #\n#################################\n\n# Cache files for Sublime Text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# Workspace files are user-specific\n*.sublime-workspace\n\n# Project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using Sublime Text\n# *.sublime-project\n\n# SFTP configuration file\nsftp-config.json\nsftp-config-alt*.json\n\n# Package control specific files\nPackage Control.last-run\nPackage Control.ca-list\nPackage Control.ca-bundle\nPackage Control.system-ca-bundle\nPackage Control.cache/\nPackage Control.ca-certs/\nPackage Control.merged-ca-bundle\nPackage Control.user-ca-bundle\noscrypto-ca-bundle.crt\nbh_unicode_properties.cache\n\n# Sublime-github package stores a github token in this file\n# https://packagecontrol.io/packages/sublime-github\nGitHub.sublime-settings\n\n##############################\n# JetBrains-specific ignores #\n##############################\n\n# Ignore the entire folder since it may conatin more files than\n# just the ones listed below\n.idea/\n\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n##########################\n# macOS-specific ignores #\n##########################\n\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\r\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n##########################\n# Linux-specific ignores #\n##########################\n\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n############################\n# Windows-specific ignores #\n############################\n\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\r\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 6.056640625,
          "content": "Abhinav Bhatele       <bhatele@llnl.gov>                Abhinav Bhatele         <bhatele@gmail.com>\nAdam Moody            <moody20@llnl.gov>                Adam T. Moody           <moody20@llnl.gov>\nAlfredo Gimenez       <gimenez1@llnl.gov>               Alfredo Gimenez         <alfredo.gimenez@gmail.com>\nAlfredo Gimenez       <gimenez1@llnl.gov>               Alfredo Adolfo Gimenez  <alfredo.gimenez@gmail.com>\nAndrew Williams       <williamsa89@cardiff.ac.uk>       Andrew Williams         <andrew@alshain.org.uk>\nAxel Huebl            <axelhuebl@lbl.gov>               Axel Huebl              <a.huebl@hzdr.de>\nAxel Huebl            <axelhuebl@lbl.gov>               Axel Huebl              <axel.huebl@plasma.ninja>\nBen Boeckel           <ben.boeckel@kitware.com>         Ben Boeckel             <mathstuf@gmail.com>\nBen Boeckel           <ben.boeckel@kitware.com>         Ben Boeckel             <mathstuf@users.noreply.github.com>\nBenedikt Hegner       <hegner@cern.ch>                  Benedikt Hegner         <benedikt.hegner@cern.ch>\nBrett Viren           <bv@bnl.gov>                      Brett Viren             <brett.viren@gmail.com>\nDavid Boehme          <boehme3@llnl.gov>                David Boehme            <boehme3@sierra324.llnl.gov>\nDavid Boehme          <boehme3@llnl.gov>                David Boehme            <boehme3@sierra648.llnl.gov>\nDavid Poliakoff       <poliakoff1@llnl.gov>             David Poliakoff         <david.poliakoff@gmail.com>\nDhanannjay Deo        <dhanannjay.deo@kitware.com>      Dhanannjay 'Djay' Deo   <dhanannjay.deo@kitware.com>\nElizabeth Fischer     <elizabeth.fischer@columbia.edu>  Elizabeth F             <elizabeth.fischer@columbia.edu>\nElizabeth Fischer     <elizabeth.fischer@columbia.edu>  Elizabeth F             <rpf2116@columbia.edu>\nElizabeth Fischer     <elizabeth.fischer@columbia.edu>  Elizabeth Fischer       <rpf2116@columbia.edu>\nElizabeth Fischer     <elizabeth.fischer@columbia.edu>  citibeth                <rpf2116@columbia.edu>\nGeoffrey Oxberry      <oxberry1@llnl.gov>               Geoffrey Oxberry        <goxberry@gmail.com>\nGlenn Johnson         <glenn-johnson@uiowa.edu>         Glenn Johnson           <gjohnson@argon-ohpc.hpc.uiowa.edu>\nGlenn Johnson         <glenn-johnson@uiowa.edu>         Glenn Johnson           <glennpj@gmail.com>\nGregory Becker        <becker33@llnl.gov>               Gregory Becker          <becker33.llnl.gov>\nGregory Becker        <becker33@llnl.gov>               Gregory Becker          <becker33.llnl.gov>\nGregory Becker        <becker33@llnl.gov>               Gregory Becker          <becker33@llnl.gov>\nGregory L. Lee        <lee218@llnl.gov>                 Greg Lee                <lee218@llnl.gov>\nGregory L. Lee        <lee218@llnl.gov>                 Gregory L. Lee          <lee218@cab687.llnl.gov>\nGregory L. Lee        <lee218@llnl.gov>                 Gregory L. Lee          <lee218@cab690.llnl.gov>\nGregory L. Lee        <lee218@llnl.gov>                 Gregory L. Lee          <lee218@catalyst159.llnl.gov>\nGregory L. Lee        <lee218@llnl.gov>                 Gregory L. Lee          <lee218@surface86.llnl.gov>\nGregory L. Lee        <lee218@llnl.gov>                 Gregory Lee             <lee218@llnl.gov>\nIan Lee               <lee1001@llnl.gov>                Ian Lee                 <IanLee1521@gmail.com>\nJames Wynne III       <wynnejr@ornl.gov>                James Riley Wynne III   <wynnejr@ornl.gov>\nJames Wynne III       <wynnejr@ornl.gov>                James Wynne III         <wynnejr@gpujake.com>\nJoachim Protze        <protze@rz.rwth-aachen.de>        jprotze                 <protze@rz.rwth-aachen.de>\nKelly (KT) Thompson   <kgt@lanl.gov>                                            <kellyt@MENE.localdomain>\nKelly (KT) Thompson   <kgt@lanl.gov>                    Kelly Thompson          <KineticTheory@users.noreply.github.com>\nKevin Brandstatter    <kjbrandstatter@gmail.com>        Kevin Brandstatter      <kbrandst@hawk.iit.edu>\nLuc Jaulmes           <luc.jaulmes@bsc.es>              Luc Jaulmes             <jaulmes1@llnl.gov>\nMario Melara          <maamelara@gmail.com>             Mario Melara            <mamelara@genepool1.nersc.gov>\nMark Miller           <miller86@llnl.gov>               miller86                <miller86@llnl.gov>\nMassimiliano Culpo    <massimiliano.culpo@epfl.ch>      Massimiliano Culpo      <massimiliano.culpo@googlemail.com>\nMassimiliano Culpo    <massimiliano.culpo@epfl.ch>      alalazo                 <massimiliano.culpo@googlemail.com>\nMayeul d'Avezac       <m.davezac@ucl.ac.uk>             Mayeul d'Avezac         <mdavezac@gmail.com>\nMitchell Devlin       <mitchell.r.devlin@gmail.com>     Mitchell Devlin         <devlin@blogin4.lcrc.anl.gov>\nNicolas Richart       <nicolas.richart@epfl.ch>         Nicolas                 <nrichart@users.noreply.github.com>\nNicolas Richart       <nicolas.richart@epfl.ch>         Nicolas Richart         <nrichart@users.noreply.github.com>\nPeter Scheibel        <scheibel1@llnl.gov>              scheibelp               <scheibel1@llnl.gov>\nRobert D. French      <frenchrd@ornl.gov>               Robert D. French        <robert@robertdfrench.me>\nRobert D. French      <frenchrd@ornl.gov>               Robert.French           <frenchrd@ornl.gov>\nRobert D. French      <frenchrd@ornl.gov>               robertdfrench           <frenchrd@ornl.gov>\nSaravan Pantham       <saravan.pantham@gmail.com>       Saravan Pantham         <pantham1@surface86.llnl.gov>\nSergey Kosukhin       <sergey.kosukhin@mpimet.mpg.de>   Sergey Kosukhin         <skosukhin@gmail.com>\nStephen Herbein       <sherbein@udel.edu>               Stephen Herbein         <stephen272@gmail.com>\nTodd Gamblin          <tgamblin@llnl.gov>               George Todd Gamblin     <gamblin2@llnl.gov>\nTodd Gamblin          <tgamblin@llnl.gov>               Todd Gamblin            <gamblin2@llnl.gov>\nTom Scogland          <tscogland@llnl.gov>              Tom Scogland            <scogland1@llnl.gov>\nTom Scogland          <tscogland@llnl.gov>              Tom Scogland            <tom.scogland@gmail.com>\nTzanio Kolev          <tzanio@llnl.gov>                 Tzanio                  <tzanio@llnl.gov>\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.7216796875,
          "content": "version: 2\n\nbuild:\n  os: \"ubuntu-22.04\"\n  apt_packages:\n    - graphviz\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  configuration: lib/spack/docs/conf.py\n  fail_on_warning: true\n\npython:\n  install:\n    - requirements: lib/spack/docs/requirements.txt\n\nsearch:\n  ranking:\n    spack.html: -10\n    spack.*.html: -10\n    llnl.html: -10\n    llnl.*.html: -10\n    _modules/*: -10\n    command_index.html: -9\n    basic_usage.html: 5\n    configuration.html: 5\n    config_yaml.html: 5\n    packages_yaml.html: 5\n    build_settings.html: 5\n    environments.html: 5\n    containers.html: 5\n    mirrors.html: 5\n    module_file_support.html: 5\n    repositories.html: 5\n    binary_caches.html: 5\n    chain.html: 5\n    pipelines.html: 5\n    packaging_guide.html: 5\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 109.0341796875,
          "content": "# v0.22.2 (2024-09-21)\n\n## Bugfixes\n- Forward compatibility with Spack 0.23 packages with language dependencies (#45205, #45191)\n- Forward compatibility with `urllib` from Python 3.12.6+ (#46453, #46483)\n- Bump vendored `archspec` for better aarch64 support (#45721, #46445)\n- Support macOS Sequoia (#45018, #45127)\n- Fix regression in `{variants.X}` and `{variants.X.value}` format strings (#46206)\n- Ensure shell escaping of environment variable values in load and activate commands (#42780)\n- Fix an issue where `spec[pkg]` considers specs outside the current DAG (#45090)\n- Do not halt concretization on unknown variants in externals (#45326)\n- Improve validation of `develop` config section (#46485)\n- Explicitly disable `ccache` if turned off in config, to avoid cache pollution (#45275)\n- Improve backwards compatibility in `include_concrete` (#45766)\n- Fix issue where package tags were sometimes repeated (#45160)\n- Make `setup-env.sh` \"sourced only\" by dropping execution bits (#45641)\n- Make certain source/binary fetch errors recoverable instead of a hard error (#45683)\n- Remove debug statements in package hash computation (#45235)\n- Remove redundant clingo warnings (#45269)\n- Remove hard-coded layout version (#45645)\n- Do not initialize previous store state in `use_store` (#45268)\n- Docs improvements (#46475)\n\n## Package updates\n- `chapel` major update (#42197, #44931, #45304)\n\n# v0.22.1 (2024-07-04)\n\n## Bugfixes\n- Fix reuse of externals on Linux (#44316)\n- Ensure parent gcc-runtime version >= child (#44834, #44870)\n- Ensure the latest gcc-runtime is rpath'ed when multiple exist among link deps (#44219)\n- Improve version detection of glibc (#44154)\n- Improve heuristics for solver (#44893, #44976, #45023)\n- Make strong preferences override reuse (#44373)\n- Reduce verbosity when C compiler is missing (#44182)\n- Make missing ccache executable an error when required (#44740)\n- Make every environment view containing `python` a `venv` (#44382)\n- Fix external detection for compilers with os but no target (#44156)\n- Fix version optimization for roots (#44272)\n- Handle common implementations of pagination of tags in OCI build caches (#43136)\n- Apply fetched patches to develop specs (#44950)\n- Avoid Windows wrappers for filesystem utilities on non-Windows (#44126)\n- Fix issue with long filenames in build caches on Windows (#43851)\n- Fix formatting issue in `spack audit` (#45045)\n- CI fixes (#44582, #43965, #43967, #44279, #44213)\n\n## Package updates\n- protobuf: fix 3.4:3.21 patch checksum (#44443)\n- protobuf: update hash for patch needed when=\"@3.4:3.21\" (#44210)\n- git: bump v2.39 to 2.45; deprecate unsafe versions (#44248)\n- gcc: use -rpath {rpath_dir} not -rpath={rpath dir} (#44315)\n- Remove mesa18 and libosmesa (#44264)\n- Enforce consistency of `gl` providers (#44307)\n- Require libiconv for iconv (#44335, #45026).\n  Notice that glibc/musl also provide iconv, but are not guaranteed to be\n  complete. Set `packages:iconv:require:[glibc]` to restore the old behavior.\n- py-matplotlib: qualify when to do a post install (#44191)\n- rust: fix v1.78.0 instructions (#44127)\n- suite-sparse: improve setting of the `libs` property (#44214)\n- netlib-lapack: provide blas and lapack together (#44981)\n\n# v0.22.0 (2024-05-12)\n\n`v0.22.0` is a major feature release.\n\n## Features in this release\n\n1. **Compiler dependencies**\n\n    We are in the process of making compilers proper dependencies in Spack, and a number\n    of changes in `v0.22` support that effort. You may notice nodes in your dependency\n    graphs for compiler runtime libraries like `gcc-runtime` or `libgfortran`, and you\n    may notice that Spack graphs now include `libc`. We've also begun moving compiler\n    configuration from `compilers.yaml` to `packages.yaml` to make it consistent with\n    other externals. We are trying to do this with the least disruption possible, so\n    your existing `compilers.yaml` files should still work. We expect to be done with\n    this transition by the `v0.23` release in November.\n\n    * #41104: Packages compiled with `%gcc` on Linux, macOS and FreeBSD now depend on a\n      new package `gcc-runtime`, which contains a copy of the shared compiler runtime\n      libraries. This enables gcc runtime libraries to be installed and relocated when\n      using a build cache. When building minimal Spack-generated container images it is\n      no longer necessary to install libgfortran, libgomp etc. using the system package\n      manager.\n\n    * #42062: Packages compiled with `%oneapi` now depend on a new package\n      `intel-oneapi-runtime`. This is similar to `gcc-runtime`, and the runtimes can\n      provide virtuals and compilers can inject dependencies on virtuals into compiled\n      packages. This allows us to model library soname compatibility and allows\n      compilers like `%oneapi` to provide virtuals like `sycl` (which can also be\n      provided by standalone libraries). Note that until we have an agreement in place\n      with intel, Intel packages are marked `redistribute(source=False, binary=False)`\n      and must be downloaded outside of Spack.\n\n    * #43272: changes to the optimization criteria of the solver improve the hit-rate of\n      buildcaches by a fair amount. The solver more relaxed compatibility rules and will\n      not try to strictly match compilers or targets of reused specs. Users can still\n      enforce the previous strict behavior with `require:` sections in `packages.yaml`.\n      Note that to enforce correct linking, Spack will *not* reuse old `%gcc` and\n      `%oneapi` specs that do not have the runtime libraries as a dependency.\n\n    * #43539: Spack will reuse specs built with compilers that are *not* explicitly\n      configured in `compilers.yaml`. Because we can now keep runtime libraries in build\n      cache, we do not require you to also have a local configured compiler to *use* the\n      runtime libraries. This improves reuse in buildcaches and avoids conflicts with OS\n      updates that happen underneath Spack.\n\n    * #43190: binary compatibility on `linux` is now based on the `libc` version,\n      instead of on the `os` tag. Spack builds now detect the host `libc` (`glibc` or\n      `musl`) and add it as an implicit external node in the dependency graph. Binaries\n      with a `libc` with the same name and a version less than or equal to that of the\n      detected `libc` can be reused. This is only on `linux`, not `macos` or `Windows`.\n\n    * #43464: each package that can provide a compiler is now detectable using `spack\n      external find`. External packages defining compiler paths are effectively used as\n      compilers, and `spack external find -t compiler` can be used as a substitute for\n      `spack compiler find`. More details on this transition are in\n      [the docs](https://spack.readthedocs.io/en/latest/getting_started.html#manual-compiler-configuration)\n\n2. **Improved `spack find` UI for Environments**\n\n   If you're working in an enviroment, you likely care about:\n\n   * What are the roots\n   * Which ones are installed / not installed\n   * What's been added that still needs to be concretized\n\n    We've tweaked `spack find` in environments to show this information much more\n    clearly. Installation status is shown next to each root, so you can see what is\n    installed. Roots are also shown in bold in the list of installed packages. There is\n    also a new option for `spack find -r` / `--only-roots` that will only show env\n    roots, if you don't want to look at all the installed specs.\n\n    More details in #42334.\n\n3. **Improved command-line string quoting**\n\n   We are making some breaking changes to how Spack parses specs on the CLI in order to\n   respect shell quoting instead of trying to fight it. If you (sadly) had to write\n   something like this on the command line:\n\n    ```\n    spack install zlib cflags=\\\"-O2 -g\\\"\n    ```\n\n    That will now result in an error, but you can now write what you probably expected\n    to work in the first place:\n\n    ```\n    spack install zlib cflags=\"-O2 -g\"\n    ```\n\n    Quoted can also now include special characters, so you can supply flags like:\n\n    ```\n    spack intall zlib ldflags='-Wl,-rpath=$ORIGIN/_libs'\n    ```\n\n    To reduce ambiguity in parsing, we now require that you *not* put spaces around `=`\n    and `==` when for flags or variants. This would not have broken before but will now\n    result in an error:\n\n    ```\n    spack install zlib cflags = \"-O2 -g\"\n    ```\n\n    More details and discussion in #30634.\n\n4. **Revert default `spack install` behavior to `--reuse`**\n\n   We changed the default concretizer behavior from `--reuse` to `--reuse-deps` in\n   #30990 (in `v0.20`), which meant that *every* `spack install` invocation would\n   attempt to build a new version of the requested package / any environment roots.\n   While this is a common ask for *upgrading* and for *developer* workflows, we don't\n   think it should be the default for a package manager.\n\n   We are going to try to stick to this policy:\n   1. Prioritize reuse and build as little as possible by default.\n   2. Only upgrade or install duplicates if they are explicitly asked for, or if there\n      is a known security issue that necessitates an upgrade.\n\n   With the install command you now have three options:\n\n   * `--reuse` (default): reuse as many existing installations as possible.\n   * `--reuse-deps` / `--fresh-roots`: upgrade (freshen) roots but reuse dependencies if possible.\n   * `--fresh`: install fresh versions of requested packages (roots) and their dependencies.\n\n   We've also introduced `--fresh-roots` as an alias for `--reuse-deps` to make it more clear\n   that it may give you fresh versions. More details in #41302 and #43988.\n\n5. **More control over reused specs**\n\n   You can now control which packages to reuse and how. There is a new\n   `concretizer:reuse` config option, which accepts the following properties:\n\n   - `roots`: `true` to reuse roots, `false` to reuse just dependencies\n   - `exclude`: list of constraints used to select which specs *not* to reuse\n   - `include`: list of constraints used to select which specs *to* reuse\n   - `from`: list of sources for reused specs (some combination of `local`,\n     `buildcache`, or `external`)\n\n   For example, to reuse only specs compiled with GCC, you could write:\n\n   ```yaml\n   concretizer:\n      reuse:\n        roots: true\n        include:\n        - \"%gcc\"\n   ```\n\n   Or, if `openmpi` must be used from externals, and it must be the only external used:\n\n   ```yaml\n   concretizer:\n     reuse:\n       roots: true\n       from:\n       - type: local\n         exclude: [\"openmpi\"]\n       - type: buildcache\n         exclude: [\"openmpi\"]\n       - type: external\n         include: [\"openmpi\"]\n   ```\n\n6. **New `redistribute()` directive**\n\n   Some packages can't be redistributed in source or binary form. We need an explicit\n   way to say that in a package.\n\n   Now there is a `redistribute()` directive so that package authors can write:\n\n   ```python\n   class MyPackage(Package):\n       redistribute(source=False, binary=False)\n   ```\n\n   Like other directives, this works with `when=`:\n\n   ```python\n   class MyPackage(Package):\n       # 12.0 and higher are proprietary\n       redistribute(source=False, binary=False, when=\"@12.0:\")\n\n       # can't redistribute when we depend on some proprietary dependency\n       redistribute(source=False, binary=False, when=\"^proprietary-dependency\")\n   ```\n\n    More in #20185.\n\n7. **New `conflict:` and `prefer:` syntax for package preferences**\n\n   Previously, you could express conflicts and preferences in `packages.yaml` through\n   some contortions with `require:`:\n\n    ```yaml\n    packages:\n      zlib-ng:\n        require:\n        - one_of: [\"%clang\", \"@:\"]   # conflict on %clang\n        - any_of: [\"+shared\", \"@:\"]  # strong preference for +shared\n    ```\n\n    You can now use `require:` and `prefer:` for a much more readable configuration:\n\n    ```yaml\n    packages:\n      zlib-ng:\n        conflict:\n        - \"%clang\"\n        prefer:\n        - \"+shared\"\n    ```\n\n    See [the documentation](https://spack.readthedocs.io/en/latest/packages_yaml.html#conflicts-and-strong-preferences)\n    and #41832 for more details.\n\n8. **`include_concrete` in environments**\n\n   You may want to build on the *concrete* contents of another environment without\n   changing that environment.  You can now include the concrete specs from another\n   environment's `spack.lock` with `include_concrete`:\n\n   ```yaml\n      spack:\n        specs: []\n        concretizer:\n            unify: true\n        include_concrete:\n        - /path/to/environment1\n        - /path/to/environment2\n   ```\n\n   Now, when *this* environment is concretized, it will bring in the already concrete\n   specs from `environment1` and `environment2`, and build on top of them without\n   changing them. This is useful if you have phased deployments, where old deployments\n   should not be modified but you want to use as many of them as possible. More details\n   in #33768.\n\n9. **`python-venv` isolation**\n\n   Spack has unique requirements for Python because it:\n    1. installs every package in its own independent directory, and\n    2. allows users to register *external* python installations.\n\n   External installations may contain their own installed packages that can interfere\n   with Spack installations, and some distributions (Debian and Ubuntu) even change the\n   `sysconfig` in ways that alter the installation layout of installed Python packages\n   (e.g., with the addition of a `/local` prefix on Debian or Ubuntu). To isolate Spack\n   from these and other issues, we now insert a small `python-venv` package in between\n   `python` and packages that need to install Python code. This isolates Spack's build\n   environment, isolates Spack from any issues with an external python, and resolves a\n   large number of issues we've had with Python installations.\n\n   See #40773 for further details.\n\n## New commands, options, and directives\n\n* Allow packages to be pushed to build cache after install from source (#42423)\n* `spack develop`: stage build artifacts in same root as non-dev builds #41373\n  * Don't delete `spack develop` build artifacts after install (#43424)\n* `spack find`: add options for local/upstream only (#42999)\n* `spack logs`: print log files for packages (either partially built or installed) (#42202)\n* `patch`: support reversing patches (#43040)\n* `develop`: Add -b/--build-directory option to set build_directory package attribute (#39606)\n* `spack list`: add `--namesapce` / `--repo` option (#41948)\n* directives: add `checked_by` field to `license()`, add some license checks\n* `spack gc`: add options for environments and build dependencies (#41731)\n* Add `--create` to `spack env activate` (#40896)\n\n## Performance improvements\n\n* environment.py: fix excessive re-reads (#43746)\n* ruamel yaml: fix quadratic complexity bug  (#43745)\n* Refactor to improve `spec format` speed (#43712)\n* Do not acquire a write lock on the env post install if no views (#43505)\n* asp.py: fewer calls to `spec.copy()` (#43715)\n* spec.py: early return in `__str__`\n* avoid `jinja2` import at startup unless needed (#43237)\n\n## Other new features of note\n\n* `archspec`: update to `v0.2.4`: support for Windows, bugfixes for `neoverse-v1` and\n  `neoverse-v2` detection.\n* `spack config get`/`blame`: with no args, show entire config\n* `spack env create <env>`: dir if dir-like (#44024)\n* ASP-based solver: update os compatibility for macOS (#43862)\n* Add handling of custom ssl certs in urllib ops (#42953)\n* Add ability to rename environments (#43296)\n* Add config option and compiler support to reuse across OS's (#42693)\n* Support for prereleases (#43140)\n* Only reuse externals when configured (#41707)\n* Environments: Add support for including views (#42250)\n\n## Binary caches\n* Build cache: make signed/unsigned a mirror property (#41507)\n* tools stack\n\n## Removals, deprecations, and syntax changes\n* remove `dpcpp` compiler and package (#43418)\n* spack load: remove --only argument (#42120)\n\n## Notable Bugfixes\n* repo.py: drop deleted packages from provider cache (#43779)\n* Allow `+` in module file names (#41999)\n* `cmd/python`: use runpy to allow multiprocessing in scripts (#41789)\n* Show extension commands with spack -h (#41726)\n* Support environment variable expansion inside module projections (#42917)\n* Alert user to failed concretizations (#42655)\n* shell: fix zsh color formatting for PS1 in environments (#39497)\n* spack mirror create --all: include patches (#41579)\n\n## Spack community stats\n\n* 7,994 total packages; 525 since `v0.21.0`\n    * 178 new Python packages, 5 new R packages\n* 358 people contributed to this release\n    * 344 committers to packages\n    * 45 committers to core\n\n# v0.21.3 (2024-10-02)\n\n## Bugfixes\n- Forward compatibility with Spack 0.23 packages with language dependencies (#45205, #45191)\n- Forward compatibility with `urllib` from Python 3.12.6+ (#46453, #46483)\n- Bump `archspec` to 0.2.5-dev for better aarch64 and Windows support (#42854, #44005,\n  #45721, #46445)\n- Support macOS Sequoia (#45018, #45127, #43862)\n- CI and test maintenance (#42909, #42728, #46711, #41943, #43363)\n\n# v0.21.2 (2024-03-01)\n\n## Bugfixes\n\n- Containerize: accommodate nested or pre-existing spack-env paths (#41558)\n- Fix setup-env script, when going back and forth between instances (#40924)\n- Fix using fully-qualified namespaces from root specs (#41957)\n- Fix a bug when a required provider is requested for multiple virtuals (#42088)\n- OCI buildcaches:\n  - only push in parallel when forking (#42143)\n  - use pickleable errors (#42160)\n- Fix using sticky variants in externals (#42253)\n- Fix a rare issue with conditional requirements and multi-valued variants (#42566)\n\n## Package updates\n- rust: add v1.75, rework a few variants (#41161,#41903)\n- py-transformers: add v4.35.2 (#41266)\n- mgard: fix OpenMP on AppleClang (#42933)\n\n# v0.21.1 (2024-01-11)\n\n## New features\n- Add support for reading buildcaches created by Spack v0.22 (#41773)\n\n## Bugfixes\n\n- spack graph: fix coloring with environments (#41240)\n- spack info: sort variants in --variants-by-name (#41389)\n- Spec.format: error on old style format strings (#41934)\n- ASP-based solver: \n  - fix infinite recursion when computing concretization errors (#41061)\n  - don't error for type mismatch on preferences (#41138)\n  - don't emit spurious debug output (#41218)\n- Improve the error message for deprecated preferences (#41075)\n- Fix MSVC preview version breaking clingo build on Windows (#41185)\n- Fix multi-word aliases (#41126)\n- Add a warning for unconfigured compiler (#41213)\n- environment: fix an issue with deconcretization/reconcretization of specs (#41294)\n- buildcache: don't error if a patch is missing, when installing from binaries (#41986)\n- Multiple improvements to unit-tests (#41215,#41369,#41495,#41359,#41361,#41345,#41342,#41308,#41226)\n\n## Package updates\n- root: add a webgui patch to address security issue (#41404)\n- BerkeleyGW: update source urls (#38218)\n\n# v0.21.0 (2023-11-11)\n\n`v0.21.0` is a major feature release.\n\n## Features in this release\n\n1. **Better error messages with condition chaining**\n\n   In v0.18, we added better error messages that could tell you what problem happened,\n   but they couldn't tell you *why* it happened. `0.21` adds *condition chaining* to the\n   solver, and Spack can now trace back through the conditions that led to an error and\n   build a tree of causes potential causes and where they came from. For example:\n\n   ```console\n   $ spack solve hdf5 ^cmake@3.0.1\n   ==> Error: concretization failed for the following reasons:\n\n      1. Cannot satisfy 'cmake@3.0.1'\n      2. Cannot satisfy 'cmake@3.0.1'\n           required because hdf5 ^cmake@3.0.1 requested from CLI\n      3. Cannot satisfy 'cmake@3.18:' and 'cmake@3.0.1\n           required because hdf5 ^cmake@3.0.1 requested from CLI\n           required because hdf5 depends on cmake@3.18: when @1.13:\n             required because hdf5 ^cmake@3.0.1 requested from CLI\n      4. Cannot satisfy 'cmake@3.12:' and 'cmake@3.0.1\n           required because hdf5 depends on cmake@3.12:\n             required because hdf5 ^cmake@3.0.1 requested from CLI\n           required because hdf5 ^cmake@3.0.1 requested from CLI\n   ```\n\n   More details in #40173.\n\n2. **OCI build caches**\n\n   You can now use an arbitrary [OCI](https://opencontainers.org) registry as a build\n   cache:\n\n   ```console\n   $ spack mirror add my_registry oci://user/image # Dockerhub\n   $ spack mirror add my_registry oci://ghcr.io/haampie/spack-test # GHCR\n   $ spack mirror set --push --oci-username ... --oci-password ... my_registry  # set login creds\n   $ spack buildcache push my_registry [specs...]\n   ```\n\n   And you can optionally add a base image to get *runnable* images:\n\n   ```console\n   $ spack buildcache push --base-image ubuntu:23.04 my_registry python\n   Pushed ... as [image]:python-3.11.2-65txfcpqbmpawclvtasuog4yzmxwaoia.spack\n\n   $ docker run --rm -it [image]:python-3.11.2-65txfcpqbmpawclvtasuog4yzmxwaoia.spack\n   ```\n\n   This creates a container image from the Spack installations on the host system,\n   without the need to run `spack install` from a `Dockerfile` or `sif` file. It also\n   addresses the inconvenience of losing binaries of dependencies when `RUN spack\n   install` fails inside `docker build`.\n\n   Further, the container image layers and build cache tarballs are the same files. This\n   means that `spack install` and `docker pull` use the exact same underlying binaries.\n   If you previously used `spack install` inside of `docker build`, this feature helps\n   you save storage by a factor two.\n\n   More details in #38358.\n\n3. **Multiple versions of build dependencies**\n\n   Increasingly, complex package builds require multiple versions of some build\n   dependencies. For example, Python packages frequently require very specific versions\n   of `setuptools`, `cython`, and sometimes different physics packages require different\n   versions of Python to build. The concretizer enforced that every solve was *unified*,\n   i.e., that there only be one version of every package. The concretizer now supports\n   \"duplicate\" nodes for *build dependencies*, but enforces unification through\n   transitive link and run dependencies. This will allow it to better resolve complex\n   dependency graphs in ecosystems like Python, and it also gets us very close to\n   modeling compilers as proper dependencies.\n\n   This change required a major overhaul of the concretizer, as well as a number of\n   performance optimizations. See #38447, #39621.\n\n4. **Cherry-picking virtual dependencies**\n\n   You can now select only a subset of virtual dependencies from a spec that may provide\n   more. For example, if you want `mpich` to be your `mpi` provider, you can be explicit\n   by writing:\n\n   ```\n   hdf5 ^[virtuals=mpi] mpich\n   ```\n\n   Or, if you want to use, e.g., `intel-parallel-studio` for `blas` along with an external\n   `lapack` like `openblas`, you could write:\n\n   ```\n   strumpack ^[virtuals=mpi] intel-parallel-studio+mkl ^[virtuals=lapack] openblas\n   ```\n\n   The `virtuals=mpi` is an edge attribute, and dependency edges in Spack graphs now\n   track which virtuals they satisfied. More details in #17229 and #35322.\n\n   Note for packaging: in Spack 0.21 `spec.satisfies(\"^virtual\")` is true if and only if\n   the package specifies `depends_on(\"virtual\")`. This is different from Spack 0.20,\n   where depending on a provider implied depending on the virtual provided. See #41002\n   for an example where `^mkl` was being used to test for several `mkl` providers in a\n   package that did not depend on `mkl`.\n\n5. **License directive**\n\n   Spack packages can now have license metadata, with the new `license()` directive:\n\n   ```python\n       license(\"Apache-2.0\")\n   ```\n\n   Licenses use [SPDX identifiers](https://spdx.org/licenses), and you can use SPDX\n   expressions to combine them:\n\n   ```python\n       license(\"Apache-2.0 OR MIT\")\n   ```\n\n   Like other directives in Spack, it's conditional, so you can handle complex cases like\n   Spack itself:\n\n   ```python\n      license(\"LGPL-2.1\", when=\"@:0.11\")\n      license(\"Apache-2.0 OR MIT\", when=\"@0.12:\")\n   ```\n\n   More details in #39346, #40598.\n\n6. **`spack deconcretize` command**\n\n   We are getting close to having a `spack update` command for environments, but we're\n   not quite there yet. This is the next best thing. `spack deconcretize` gives you\n   control over what you want to update in an already concrete environment. If you have\n   an environment built with, say, `meson`, and you want to update your `meson` version,\n   you can run:\n\n   ```console\n   spack deconcretize meson\n   ```\n\n   and have everything that depends on `meson` rebuilt the next time you run `spack\n   concretize`. In a future Spack version, we'll handle all of this in a single command,\n   but for now you can use this to drop bits of your lockfile and resolve your\n   dependencies again. More in #38803.\n\n7. **UI Improvements**\n\n   The venerable `spack info` command was looking shabby compared to the rest of Spack's\n   UI, so we reworked it to have a bit more flair. `spack info` now makes much better\n   use of terminal space and shows variants, their values, and their descriptions much\n   more clearly. Conditional variants are grouped separately so you can more easily\n   understand how packages are structured. More in #40998.\n\n   `spack checksum` now allows you to filter versions from your editor, or by version\n   range. It also notifies you about potential download URL changes. See #40403.\n\n8. **Environments can include definitions**\n\n   Spack did not previously support using `include:` with The\n   [definitions](https://spack.readthedocs.io/en/latest/environments.html#spec-list-references)\n   section of an environment, but now it does. You can use this to curate lists of specs\n   and more easily reuse them across environments. See #33960.\n\n9. **Aliases**\n\n   You can now add aliases to Spack commands in `config.yaml`, e.g. this might enshrine\n   your favorite args to `spack find` as `spack f`:\n\n   ```yaml\n   config:\n     aliases:\n       f: find -lv\n   ```\n\n   See #17229.\n\n10. **Improved autoloading of modules**\n\n    Spack 0.20 was the first release to enable autoloading of direct dependencies in\n    module files.\n\n    The downside of this was that `module avail` and `module load` tab completion would\n    show users too many modules to choose from, and many users disabled generating\n    modules for dependencies through `exclude_implicits: true`. Further, it was\n    necessary to keep hashes in module names to avoid file name clashes.\n\n    In this release, you can start using `hide_implicits: true` instead, which exposes\n    only explicitly installed packages to the user, while still autoloading\n    dependencies. On top of that, you can safely use `hash_length: 0`, as this config\n    now only applies to the modules exposed to the user -- you don't have to worry about\n    file name clashes for hidden dependencies.\n\n   Note: for `tcl` this feature requires Modules 4.7 or higher\n\n11. **Updated container labeling**\n\n    Nightly Docker images from the `develop` branch will now be tagged as `:develop` and\n    `:nightly`. The `:latest` tag is no longer associated with `:develop`, but with the\n    latest stable release. Releases will be tagged with `:{major}`, `:{major}.{minor}`\n    and `:{major}.{minor}.{patch}`. `ubuntu:18.04` has also been removed from the list of\n    generated Docker images, as it is no longer supported. See #40593.\n\n## Other new commands and directives\n\n* `spack env activate` without arguments now loads a `default` environment that you do\n  not have to create (#40756).\n* `spack find -H` / `--hashes`: a new shortcut for piping `spack find` output to\n  other commands (#38663)\n* Add `spack checksum --verify`, fix `--add` (#38458)\n* New `default_args` context manager factors out common args for directives (#39964)\n* `spack compiler find --[no]-mixed-toolchain` lets you easily mix `clang` and\n  `gfortran` on Linux (#40902)\n\n## Performance improvements\n\n* `spack external find` execution is now much faster (#39843)\n* `spack location -i` now much faster on success (#40898)\n* Drop redundant rpaths post install (#38976)\n* ASP-based solver: avoid cycles in clingo using hidden directive (#40720)\n* Fix multiple quadratic complexity issues in environments (#38771)\n\n## Other new features of note\n\n* archspec: update to v0.2.2, support for Sapphire Rapids, Power10, Neoverse V2 (#40917)\n* Propagate variants across nodes that don't have that variant (#38512)\n* Implement fish completion (#29549)\n* Can now distinguish between source/binary mirror; don't ping mirror.spack.io as much (#34523)\n* Improve status reporting on install (add [n/total] display) (#37903)\n\n## Windows\n\nThis release has the best Windows support of any Spack release yet, with numerous\nimprovements and much larger swaths of tests passing:\n\n* MSVC and SDK improvements (#37711, #37930, #38500, #39823, #39180)\n* Windows external finding: update default paths; treat .bat as executable on Windows (#39850)\n* Windows decompression: fix removal of intermediate file (#38958)\n* Windows: executable/path handling (#37762)\n* Windows build systems: use ninja and enable tests (#33589)\n* Windows testing (#36970, #36972, #36973, #36840, #36977, #36792, #36834, #34696, #36971)\n* Windows PowerShell support (#39118, #37951)\n* Windows symlinking and libraries (#39933, #38599, #34701, #38578, #34701)\n\n## Notable refactors\n* User-specified flags take precedence over others in Spack compiler wrappers (#37376)\n* Improve setup of build, run, and test environments (#35737, #40916)\n* `make` is no longer a required system dependency of Spack (#40380)\n* Support Python 3.12 (#40404, #40155, #40153)\n* docs: Replace package list with packages.spack.io (#40251)\n* Drop Python 2 constructs in Spack (#38720, #38718, #38703)\n\n## Binary cache and stack updates\n* e4s arm stack: duplicate and target neoverse v1 (#40369)\n* Add macOS ML CI stacks (#36586)\n* E4S Cray CI Stack (#37837)\n* e4s cray: expand spec list (#38947)\n* e4s cray sles ci: expand spec list (#39081)\n\n## Removals, deprecations, and syntax changes\n* ASP: targets, compilers and providers soft-preferences are only global (#31261)\n* Parser: fix ambiguity with whitespace in version ranges (#40344)\n* Module file generation is disabled by default; you'll need to enable it to use it (#37258)\n* Remove deprecated \"extra_instructions\" option for containers (#40365)\n* Stand-alone test feature deprecation postponed to v0.22 (#40600)\n* buildcache push: make `--allow-root` the default and deprecate the option (#38878)\n\n## Notable Bugfixes\n* Bugfix: propagation of multivalued variants (#39833)\n* Allow `/` in git versions (#39398)\n* Fetch & patch: actually acquire stage lock, and many more issues (#38903)\n* Environment/depfile: better escaping of targets with Git versions (#37560)\n* Prevent \"spack external find\" to error out on wrong permissions (#38755)\n* lmod: allow core compiler to be specified with a version range (#37789)\n\n## Spack community stats\n\n* 7,469 total packages, 303 new since `v0.20.0`\n    * 150 new Python packages\n    * 34 new R packages\n* 353 people contributed to this release\n    * 336 committers to packages\n    * 65 committers to core\n\n\n# v0.20.3 (2023-10-31)\n\n## Bugfixes\n\n- Fix a bug where `spack mirror set-url` would drop configured connection info (reverts #34210)\n- Fix a minor issue with package hash computation for Python 3.12 (#40328)\n\n\n# v0.20.2 (2023-10-03)\n\n## Features in this release\n\nSpack now supports Python 3.12 (#40155)\n\n## Bugfixes\n\n- Improve escaping in Tcl module files (#38375)\n- Make repo cache work on repositories with zero mtime (#39214)\n- Ignore errors for newer, incompatible buildcache version (#40279)\n- Print an error when git is required, but missing (#40254)\n- Ensure missing build dependencies get installed when using `spack install --overwrite` (#40252)\n- Fix an issue where Spack freezes when the build process unexpectedly exits (#39015)\n- Fix a bug where installation failures cause an unrelated `NameError` to be thrown (#39017)\n- Fix an issue where Spack package versions would be incorrectly derived from git tags (#39414)\n- Fix a bug triggered when file locking fails internally (#39188)\n- Prevent \"spack external find\" to error out when a directory cannot be accessed (#38755)\n- Fix multiple performance regressions in environments (#38771)\n- Add more ignored modules to `pyproject.toml` for `mypy` (#38769)\n\n\n# v0.20.1 (2023-07-10)\n\n## Spack Bugfixes\n\n- Spec removed from an environment where not actually removed if `--force` was not given (#37877)\n- Speed-up module file generation (#37739)\n- Hotfix for a few recipes that treat CMake as a link dependency (#35816)\n- Fix re-running stand-alone test a second time, which was getting a trailing spurious failure (#37840)\n- Fixed reading JSON manifest on Cray, reporting non-concrete specs (#37909)\n- Fixed a few bugs when generating Dockerfiles from Spack (#37766,#37769)\n- Fixed a few long-standing bugs when generating module files (#36678,#38347,#38465,#38455)\n- Fixed issues with building Python extensions using an external Python (#38186)\n- Fixed compiler removal from command line (#38057)\n- Show external status as [e] (#33792)\n- Backported `archspec` fixes (#37793)\n- Improved a few error messages (#37791)\n\n\n# v0.20.0 (2023-05-21)\n\n`v0.20.0` is a major feature release.\n\n## Features in this release\n\n1. **`requires()` directive and enhanced package requirements**\n\n   We've added some more enhancements to requirements in Spack (#36286).\n\n   There is a new `requires()` directive for packages. `requires()` is the opposite of\n   `conflicts()`. You can use it to impose constraints on this package when certain\n   conditions are met:\n\n   ```python\n   requires(\n       \"%apple-clang\",\n       when=\"platform=darwin\",\n       msg=\"This package builds only with clang on macOS\"\n   )\n   ```\n\n   More on this in [the docs](\n     https://spack.rtfd.io/en/latest/packaging_guide.html#conflicts-and-requirements).\n\n   You can also now add a `when:` clause to `requires:` in your `packages.yaml`\n   configuration or in an environment:\n\n   ```yaml\n   packages:\n     openmpi:\n       require:\n       - any_of: [\"%gcc\"]\n         when: \"@:4.1.4\"\n         message: \"Only OpenMPI 4.1.5 and up can build with fancy compilers\"\n   ```\n\n   More details can be found [here](\n     https://spack.readthedocs.io/en/latest/build_settings.html#package-requirements)\n\n2. **Exact versions**\n\n   Spack did not previously have a way to distinguish a version if it was a prefix of\n   some other version. For example, `@3.2` would match `3.2`, `3.2.1`, `3.2.2`, etc. You\n   can now match *exactly* `3.2` with `@=3.2`. This is useful, for example, if you need\n   to patch *only* the `3.2` version of a package. The new syntax is described in [the docs](\n     https://spack.readthedocs.io/en/latest/basic_usage.html#version-specifier).\n\n   Generally, when writing packages, you should prefer to use ranges like `@3.2` over\n   the specific versions, as this allows the concretizer more leeway when selecting\n   versions of dependencies. More details and recommendations are in the [packaging guide](\n     https://spack.readthedocs.io/en/latest/packaging_guide.html#ranges-versus-specific-versions).\n\n   See #36273 for full details on the version refactor.\n\n3. **New testing interface**\n\n   Writing package tests is now much simpler with a new [test interface](\n     https://spack.readthedocs.io/en/latest/packaging_guide.html#stand-alone-tests).\n\n   Writing a test is now as easy as adding a method that starts with `test_`:\n\n   ```python\n   class MyPackage(Package):\n       ...\n\n       def test_always_fails(self):\n           \"\"\"use assert to always fail\"\"\"\n           assert False\n\n       def test_example(self):\n           \"\"\"run installed example\"\"\"\n           example = which(self.prefix.bin.example)\n           example()\n    ```\n\n    You can use Python's native `assert` statement to implement your checks -- no more\n    need to fiddle with `run_test` or other test framework methods. Spack will\n    introspect the class and run `test_*` methods when you run `spack test`,\n\n4. **More stable concretization**\n\n   * Now, `spack concretize` will *only* concretize the new portions of the environment\n     and will not change existing parts of an environment unless you specify `--force`.\n     This has always been true for `unify:false`, but not for `unify:true` and\n     `unify:when_possible` environments. Now it is true for all of them (#37438, #37681).\n\n   * The concretizer has a new `--reuse-deps` argument that *only* reuses dependencies.\n     That is, it will always treat the *roots* of your environment as it would with\n     `--fresh`. This allows you to upgrade just the roots of your environment while\n     keeping everything else stable (#30990).\n\n5. **Weekly develop snapshot releases**\n\n   Since last year, we have maintained a buildcache of `develop` at\n   https://binaries.spack.io/develop, but the cache can grow to contain so many builds\n   as to be unwieldy. When we get a stable `develop` build, we snapshot the release and\n   add a corresponding tag the Spack repository. So, you can use a stack from a specific\n   day. There are now tags in the spack repository like:\n\n   * `develop-2023-05-14`\n   * `develop-2023-05-18`\n\n   that correspond to build caches like:\n\n   * https://binaries.spack.io/develop-2023-05-14/e4s\n   * https://binaries.spack.io/develop-2023-05-18/e4s\n\n   We plan to store these snapshot releases weekly.\n\n6. **Specs in buildcaches can be referenced by hash.**\n\n   * Previously, you could run `spack buildcache list` and see the hashes in\n     buildcaches, but referring to them by hash would fail.\n   * You can now run commands like `spack spec` and `spack install` and refer to\n     buildcache hashes directly, e.g. `spack install /abc123` (#35042)\n\n7. **New package and buildcache index websites**\n\n   Our public websites for searching packages have been completely revamped and updated.\n   You can check them out here:\n\n   * *Package Index*: https://packages.spack.io\n   * *Buildcache Index*: https://cache.spack.io\n\n   Both are searchable and more interactive than before. Currently major releases are\n   shown; UI for browsing `develop` snapshots is coming soon.\n\n8. **Default CMake and Meson build types are now Release**\n\n   Spack has historically defaulted to building with optimization and debugging, but\n   packages like `llvm` can be enormous with debug turned on. Our default build type for\n   all Spack packages is now `Release` (#36679, #37436). This has a number of benefits:\n\n   * much smaller binaries;\n   * higher default optimization level; and\n   * defining `NDEBUG` disables assertions, which may lead to further speedups.\n\n   You can still get the old behavior back through requirements and package preferences.\n\n## Other new commands and directives\n\n* `spack checksum` can automatically add new versions to package (#24532)\n* new command: `spack pkg grep` to easily search package files (#34388)\n* New `maintainers` directive (#35083)\n* Add `spack buildcache push` (alias to `buildcache create`) (#34861)\n* Allow using `-j` to control the parallelism of concretization (#37608)\n* Add `--exclude` option to 'spack external find' (#35013)\n\n## Other new features of note\n\n* editing: add higher-precedence `SPACK_EDITOR` environment variable\n* Many YAML formatting improvements from updating `ruamel.yaml` to the latest version\n  supporting Python 3.6. (#31091, #24885, #37008).\n* Requirements and preferences should not define (non-git) versions (#37687, #37747)\n* Environments now store spack version/commit in `spack.lock` (#32801)\n* User can specify the name of the `packages` subdirectory in repositories (#36643)\n* Add container images supporting RHEL alternatives (#36713)\n* make version(...) kwargs explicit (#36998)\n\n## Notable refactors\n\n* buildcache create: reproducible tarballs (#35623)\n* Bootstrap most of Spack dependencies using environments (#34029)\n* Split `satisfies(..., strict=True/False)` into two functions (#35681)\n* spack install: simplify behavior when inside environments (#35206)\n\n## Binary cache and stack updates\n\n* Major simplification of CI boilerplate in stacks (#34272, #36045)\n* Many improvements to our CI pipeline's reliability\n\n## Removals, Deprecations, and disablements\n* Module file generation is disabled by default; you'll need to enable it to use it (#37258)\n* Support for Python 2 was deprecated in `v0.19.0` and has been removed. `v0.20.0` only\n  supports Python 3.6 and higher.\n* Deprecated target names are no longer recognized by Spack. Use generic names instead:\n  * `graviton` is now `cortex_a72`\n  * `graviton2` is now `neoverse_n1`\n  * `graviton3` is now `neoverse_v1`\n* `blacklist` and `whitelist` in module configuration were deprecated in `v0.19.0` and are\n  removed in this release. Use `exclude` and `include` instead.\n* The `ignore=` parameter of the `extends()` directive has been removed. It was not used by\n  any builtin packages and is no longer needed to avoid conflicts in environment views (#35588).\n* Support for the old YAML buildcache format has been removed. It was deprecated in `v0.19.0` (#34347).\n* `spack find --bootstrap` has been removed. It was deprecated in `v0.19.0`. Use `spack\n  --bootstrap find` instead (#33964).\n* `spack bootstrap trust` and `spack bootstrap untrust` are now removed, having been\n  deprecated in `v0.19.0`. Use `spack bootstrap enable` and `spack bootstrap disable`.\n* The `--mirror-name`, `--mirror-url`, and `--directory` options to buildcache and\n  mirror commands were deprecated in `v0.19.0` and have now been removed. They have been\n  replaced by positional arguments (#37457).\n* Deprecate `env:` as top level environment key (#37424)\n* deprecate buildcache create --rel, buildcache install --allow-root (#37285)\n* Support for very old perl-like spec format strings (e.g., `$_$@$%@+$+$=`) has been\n  removed (#37425). This was deprecated in in `v0.15` (#10556).\n\n## Notable Bugfixes\n\n* bugfix: don't fetch package metadata for unknown concrete specs (#36990)\n* Improve package source code context display on error  (#37655)\n* Relax environment manifest filename requirements and lockfile identification criteria (#37413)\n* `installer.py`: drop build edges of installed packages by default (#36707)\n* Bugfix: package requirements with git commits (#35057, #36347)\n* Package requirements: allow single specs in requirement lists (#36258)\n* conditional variant values: allow boolean (#33939)\n* spack uninstall: follow run/link edges on --dependents (#34058)\n\n## Spack community stats\n\n* 7,179 total packages, 499 new since `v0.19.0`\n    * 329 new Python packages\n    * 31 new R packages\n* 336 people contributed to this release\n    * 317 committers to packages\n    * 62 committers to core\n\n\n# v0.19.1 (2023-02-07)\n\n### Spack Bugfixes\n\n* `buildcache create`: make \"file exists\" less verbose (#35019)\n* `spack mirror create`: don't change paths to urls (#34992)\n* Improve error message for requirements (#33988)\n* uninstall: fix accidental cubic complexity (#34005)\n* scons: fix signature for `install_args` (#34481)\n* Fix `combine_phase_logs` text encoding issues (#34657)\n* Use a module-like object to propagate changes in the MRO, when setting build env (#34059)\n* PackageBase should not define builder legacy attributes (#33942)\n* Forward lookup of the \"run_tests\" attribute (#34531)\n* Bugfix for timers (#33917, #33900)\n* Fix path handling in prefix inspections (#35318)\n* Fix libtool filter for Fujitsu compilers (#34916)\n* Bug fix for duplicate rpath errors on macOS when creating build caches (#34375)\n* FileCache: delete the new cache file on exception (#34623)\n* Propagate exceptions from Spack python console (#34547)\n* Tests: Fix a bug/typo in a `config_values.py` fixture (#33886)\n* Various CI fixes (#33953, #34560, #34560, #34828)\n* Docs: remove monitors and analyzers, typos (#34358, #33926)\n* bump release version for tutorial command (#33859)\n\n\n# v0.19.0 (2022-11-11)\n\n`v0.19.0` is a major feature release.\n\n## Major features in this release\n\n1. **Package requirements**\n\n   Spack's traditional [package preferences](\n     https://spack.readthedocs.io/en/latest/build_settings.html#package-preferences)\n   are soft, but we've added hard requriements to `packages.yaml` and `spack.yaml`\n   (#32528, #32369). Package requirements use the same syntax as specs:\n\n   ```yaml\n   packages:\n     libfabric:\n       require: \"@1.13.2\"\n     mpich:\n       require:\n       - one_of: [\"+cuda\", \"+rocm\"]\n   ```\n\n   More details in [the docs](\n     https://spack.readthedocs.io/en/latest/build_settings.html#package-requirements).\n\n2. **Environment UI Improvements**\n\n   * Fewer surprising modifications to `spack.yaml` (#33711):\n\n     * `spack install` in an environment will no longer add to the `specs:` list; you'll\n       need to either use `spack add <spec>` or `spack install --add <spec>`.\n\n     * Similarly, `spack uninstall` will not remove from your environment's `specs:`\n       list; you'll need to use `spack remove` or `spack uninstall --remove`.\n\n     This will make it easier to manage an environment, as there is clear separation\n     between the stack to be installed (`spack.yaml`/`spack.lock`) and which parts of\n     it should be installed (`spack install` / `spack uninstall`).\n\n   * `concretizer:unify:true` is now the default mode for new environments (#31787)\n\n     We see more users creating `unify:true` environments now. Users who need\n     `unify:false` can add it to their environment to get the old behavior. This will\n     concretize every spec in the environment independently.\n\n   * Include environment configuration from URLs (#29026, [docs](\n       https://spack.readthedocs.io/en/latest/environments.html#included-configurations))\n\n     You can now include configuration in your environment directly from a URL:\n\n     ```yaml\n     spack:\n       include:\n       - https://github.com/path/to/raw/config/compilers.yaml\n     ```\n\n4. **Multiple Build Systems**\n\n   An increasing number of packages in the ecosystem need the ability to support\n   multiple build systems (#30738, [docs](\n     https://spack.readthedocs.io/en/latest/packaging_guide.html#multiple-build-systems)),\n   either across versions, across platforms, or within the same version of the software.\n   This has been hard to support through multiple inheritance, as methods from different\n   build system superclasses would conflict. `package.py` files can now define separate\n   builder classes with installation logic for different build systems, e.g.:\n\n   ```python\n   class ArpackNg(CMakePackage, AutotoolsPackage):\n\n       build_system(\n           conditional(\"cmake\", when=\"@0.64:\"),\n           conditional(\"autotools\", when=\"@:0.63\"),\n           default=\"cmake\",\n       )\n\n   class CMakeBuilder(spack.build_systems.cmake.CMakeBuilder):\n       def cmake_args(self):\n           pass\n\n   class Autotoolsbuilder(spack.build_systems.autotools.AutotoolsBuilder):\n       def configure_args(self):\n           pass\n   ```\n\n5. **Compiler and variant propagation**\n\n   Currently, compiler flags and variants are inconsistent: compiler flags set for a\n   package are inherited by its dependencies, while variants are not. We should have\n   these be consistent by allowing for inheritance to be enabled or disabled for both\n   variants and compiler flags.\n\n   Example syntax:\n   - `package ++variant`:\n         enabled variant that will be propagated to dependencies\n   - `package +variant`:\n         enabled variant that will NOT be propagated to dependencies\n   - `package ~~variant`:\n         disabled variant that will be propagated to dependencies\n   - `package ~variant`:\n         disabled variant that will NOT be propagated to dependencies\n   - `package cflags==-g`:\n         `cflags` will be propagated to dependencies\n   - `package cflags=-g`:\n         `cflags` will NOT be propagated to dependencies\n\n   Syntax for non-boolan variants is similar to compiler flags. More in the docs for\n   [variants](\n     https://spack.readthedocs.io/en/latest/basic_usage.html#variants) and [compiler flags](\n     https://spack.readthedocs.io/en/latest/basic_usage.html#compiler-flags).\n\n6. **Enhancements to git version specifiers**\n\n   * `v0.18.0` added the ability to use git commits as versions. You can now use the\n     `git.` prefix to specify git tags or branches as versions. All of these are valid git\n     versions in `v0.19` (#31200):\n\n     ```console\n     foo@abcdef1234abcdef1234abcdef1234abcdef1234      # raw commit\n     foo@git.abcdef1234abcdef1234abcdef1234abcdef1234  # commit with git prefix\n     foo@git.develop                                   # the develop branch\n     foo@git.0.19                                      # use the 0.19 tag\n     ```\n\n   * `v0.19` also gives you more control over how Spack interprets git versions, in case\n     Spack cannot detect the version from the git repository. You can suffix a git\n     version with `=<version>` to force Spack to concretize it as a particular version\n     (#30998, #31914, #32257):\n\n     ```console\n     # use mybranch, but treat it as version 3.2 for version comparison\n     foo@git.mybranch=3.2\n\n     # use the given commit, but treat it as develop for version comparison\n     foo@git.abcdef1234abcdef1234abcdef1234abcdef1234=develop\n     ```\n\n     More in [the docs](\n       https://spack.readthedocs.io/en/latest/basic_usage.html#version-specifier)\n\n7. **Changes to Cray EX Support**\n\n   Cray machines have historically had their own \"platform\" within Spack, because we\n   needed to go through the module system to leverage compilers and MPI installations on\n   these machines. The Cray EX programming environment now provides standalone `craycc`\n   executables and proper `mpicc` wrappers, so Spack can treat EX machines like Linux\n   with extra packages (#29392).\n\n   We expect this to greatly reduce bugs, as external packages and compilers can now be\n   used by prefix instead of through modules. We will also no longer be subject to\n   reproducibility issues when modules change from Cray PE release to release and from\n   site to site. This also simplifies dealing with the underlying Linux OS on cray\n   systems, as Spack will properly model the machine's OS as either SuSE or RHEL.\n\n8. **Improvements to tests and testing in CI**\n\n   * `spack ci generate --tests` will generate a `.gitlab-ci.yml` file that not only does\n     builds but also runs tests for built packages (#27877). Public GitHub pipelines now\n     also run tests in CI.\n\n   * `spack test run --explicit` will only run tests for packages that are explicitly\n     installed, instead of all packages.\n\n9. **Experimental binding link model**\n\n   You can add a new option to `config.yaml` to make Spack embed absolute paths to\n   needed shared libraries in ELF executables and shared libraries on Linux (#31948, [docs](\n     https://spack.readthedocs.io/en/latest/config_yaml.html#shared-linking-bind)):\n\n   ```yaml\n   config:\n     shared_linking:\n       type: rpath\n       bind: true\n   ```\n\n   This can improve launch time at scale for parallel applications, and it can make\n   installations less susceptible to environment variables like `LD_LIBRARY_PATH`, even\n   especially when dealing with external libraries that use `RUNPATH`. You can think of\n   this as a faster, even higher-precedence version of `RPATH`.\n\n## Other new features of note\n\n* `spack spec` prints dependencies more legibly. Dependencies in the output now appear\n  at the *earliest* level of indentation possible (#33406)\n* You can override `package.py` attributes like `url`, directly in `packages.yaml`\n  (#33275, [docs](\n    https://spack.readthedocs.io/en/latest/build_settings.html#assigning-package-attributes))\n* There are a number of new architecture-related format strings you can use in Spack\n  configuration files to specify paths (#29810, [docs](\n    https://spack.readthedocs.io/en/latest/configuration.html#config-file-variables))\n* Spack now supports bootstrapping Clingo on Windows (#33400)\n* There is now support for an `RPATH`-like library model on Windows (#31930)\n\n## Performance Improvements\n\n* Major performance improvements for installation from binary caches (#27610, #33628,\n  #33636, #33608, #33590, #33496)\n* Test suite can now be parallelized using `xdist` (used in GitHub Actions) (#32361)\n* Reduce lock contention for parallel builds in environments (#31643)\n\n## New binary caches and stacks\n\n* We now build nearly all of E4S with `oneapi` in our buildcache (#31781, #31804,\n  #31804, #31803, #31840, #31991, #32117, #32107, #32239)\n* Added 3 new machine learning-centric stacks to binary cache: `x86_64_v3`, CUDA, ROCm\n  (#31592, #33463)\n\n## Removals and Deprecations\n\n* Support for Python 3.5 is dropped (#31908). Only Python 2.7 and 3.6+ are officially\n  supported.\n\n* This is the last Spack release that will support Python 2 (#32615). Spack `v0.19`\n  will emit a deprecation warning if you run it with Python 2, and Python 2 support will\n  soon be removed from the `develop` branch.\n\n* `LD_LIBRARY_PATH` is no longer set by default by `spack load` or module loads.\n\n  Setting `LD_LIBRARY_PATH` in Spack environments/modules can cause binaries from\n  outside of Spack to crash, and Spack's own builds use `RPATH` and do not need\n  `LD_LIBRARY_PATH` set in order to run. If you still want the old behavior, you\n  can run these commands to configure Spack to set `LD_LIBRARY_PATH`:\n\n  ```console\n  spack config add modules:prefix_inspections:lib64:[LD_LIBRARY_PATH]\n  spack config add modules:prefix_inspections:lib:[LD_LIBRARY_PATH]\n  ```\n\n* The `spack:concretization:[together|separately]` has been removed after being\n  deprecated in `v0.18`. Use `concretizer:unify:[true|false]`.\n* `config:module_roots` is no longer supported after being deprecated in `v0.18`. Use\n  configuration in module sets instead (#28659, [docs](\n    https://spack.readthedocs.io/en/latest/module_file_support.html)).\n* `spack activate` and `spack deactivate` are no longer supported, having been\n  deprecated in `v0.18`. Use an environment with a view instead of\n  activating/deactivating ([docs](\n    https://spack.readthedocs.io/en/latest/environments.html#configuration-in-spack-yaml)).\n* The old YAML format for buildcaches is now deprecated (#33707). If you are using an\n  old buildcache with YAML metadata you will need to regenerate it with JSON metadata.\n* `spack bootstrap trust` and `spack bootstrap untrust` are deprecated in favor of\n  `spack bootstrap enable` and `spack bootstrap disable` and will be removed in `v0.20`.\n  (#33600)\n* The `graviton2` architecture has been renamed to `neoverse_n1`, and `graviton3`\n  is now `neoverse_v1`. Buildcaches using the old architecture names will need to be rebuilt.\n* The terms `blacklist` and `whitelist` have been replaced with `include` and `exclude`\n  in all configuration files (#31569). You can use `spack config update` to\n  automatically fix your configuration files.\n\n## Notable Bugfixes\n\n* Permission setting on installation now handles effective uid properly (#19980)\n* `buildable:true` for an MPI implementation now overrides `buildable:false` for `mpi` (#18269)\n* Improved error messages when attempting to use an unconfigured compiler (#32084)\n* Do not punish explicitly requested compiler mismatches in the solver (#30074)\n* `spack stage`: add missing --fresh and --reuse (#31626)\n* Fixes for adding build system executables like `cmake` to package scope (#31739)\n* Bugfix for binary relocation with aliased strings produced by newer `binutils` (#32253)\n\n## Spack community stats\n\n* 6,751 total packages, 335 new since `v0.18.0`\n    * 141 new Python packages\n    * 89 new R packages\n* 303 people contributed to this release\n    * 287 committers to packages\n    * 57 committers to core\n\n\n# v0.18.1 (2022-07-19)\n\n### Spack Bugfixes\n* Fix several bugs related to bootstrapping (#30834,#31042,#31180)\n* Fix a regression that was causing spec hashes to differ between\n  Python 2 and Python 3 (#31092)\n* Fixed compiler flags for oneAPI and DPC++ (#30856)\n* Fixed several issues related to concretization (#31142,#31153,#31170,#31226)\n* Improved support for Cray manifest file and `spack external find` (#31144,#31201,#31173,#31186)\n* Assign a version to openSUSE Tumbleweed according to the GLIBC version\n  in the system (#19895)\n* Improved Dockerfile generation for `spack containerize` (#29741,#31321)\n* Fixed a few bugs related to concurrent execution of commands (#31509,#31493,#31477)\n\n### Package updates\n* WarpX: add v22.06, fixed libs property (#30866,#31102)\n* openPMD: add v0.14.5, update recipe for @develop (#29484,#31023)\n\n# v0.18.0 (2022-05-28)\n\n`v0.18.0` is a major feature release.\n\n## Major features in this release\n\n1. **Concretizer now reuses by default**\n\n   `spack install --reuse` was introduced in `v0.17.0`, and `--reuse`\n   is now the default concretization mode. Spack will try hard to\n   resolve dependencies using installed packages or binaries (#30396).\n\n   To avoid reuse and to use the latest package configurations, (the\n   old default), you can use `spack install --fresh`, or add\n   configuration like this to your environment or `concretizer.yaml`:\n\n   ```yaml\n   concretizer:\n       reuse: false\n   ```\n\n2. **Finer-grained hashes**\n\n   Spack hashes now include `link`, `run`, *and* `build` dependencies,\n   as well as a canonical hash of package recipes. Previously, hashes\n   only included `link` and `run` dependencies (though `build`\n   dependencies were stored by environments). We coarsened the hash to\n   reduce churn in user installations, but the new default concretizer\n   behavior mitigates this concern and gets us reuse *and* provenance.\n   You will be able to see the build dependencies of new installations\n   with `spack find`. Old installations will not change and their\n   hashes will not be affected. (#28156, #28504, #30717, #30861)\n\n3. **Improved error messages**\n\n   Error handling with the new concretizer is now done with\n   optimization criteria rather than with unsatisfiable cores, and\n   Spack reports many more details about conflicting constraints.\n   (#30669)\n\n4. **Unify environments when possible**\n\n   Environments have thus far supported `concretization: together` or\n   `concretization: separately`. These have been replaced by a new\n   preference in `concretizer.yaml`:\n\n   ```yaml\n   concretizer:\n       unify: [true|false|when_possible]\n   ```\n\n   `concretizer:unify:when_possible` will *try* to resolve a fully\n   unified environment, but if it cannot, it will create multiple\n   configurations of some packages where it has to. For large\n   environments that previously had to be concretized separately, this\n   can result in a huge speedup (40-50x). (#28941)\n\n5. **Automatically find externals on Cray machines**\n\n   Spack can now automatically discover installed packages in the Cray\n   Programming Environment by running `spack external find` (or `spack\n   external read-cray-manifest` to *only* query the PE). Packages from\n   the PE (e.g., `cray-mpich` are added to the database with full\n   dependency information, and compilers from the PE are added to\n   `compilers.yaml`. Available with the June 2022 release of the Cray\n   Programming Environment. (#24894, #30428)\n\n6. **New binary format and hardened signing**\n\n   Spack now has an updated binary format, with improvements for\n   security. The new format has a detached signature file, and Spack\n   verifies the signature before untarring or decompressing the binary\n   package. The previous format embedded the signature in a `tar`\n   file, which required the client to run `tar` *before* verifying\n   (#30750). Spack can still install from build caches using the old\n   format, but we encourage users to switch to the new format going\n   forward.\n\n   Production GitLab pipelines have been hardened to securely sign\n   binaries. There is now a separate signing stage so that signing\n   keys are never exposed to build system code, and signing keys are\n   ephemeral and only live as long as the signing pipeline stage.\n   (#30753)\n\n7. **Bootstrap mirror generation**\n\n   The `spack bootstrap mirror` command can automatically create a\n   mirror for bootstrapping the concretizer and other needed\n   dependencies in an air-gapped environment. (#28556)\n\n8. **Nascent Windows support**\n\n   Spack now has initial support for Windows. Spack core has been\n   refactored to run in the Windows environment, and a small number of\n   packages can now build for Windows. More details are\n   [in the documentation](https://spack.rtfd.io/en/latest/getting_started.html#spack-on-windows)\n   (#27021, #28385, many more)\n\n9. **Makefile generation**\n\n   `spack env depfile` can be used to generate a `Makefile` from an\n   environment, which can be used to build packages the environment\n   in parallel on a single node. e.g.:\n\n   ```console\n   spack -e myenv env depfile > Makefile\n   make\n   ```\n\n   Spack propagates `gmake` jobserver information to builds so that\n   their jobs can share cores. (#30039, #30254, #30302, #30526)\n\n10. **New variant features**\n\n    In addition to being conditional themselves, variants can now have\n    [conditional *values*](https://spack.readthedocs.io/en/latest/packaging_guide.html#conditional-possible-values)\n    that are only possible for certain configurations of a package. (#29530)\n\n    Variants can be\n    [declared \"sticky\"](https://spack.readthedocs.io/en/latest/packaging_guide.html#sticky-variants),\n    which prevents them from being enabled or disabled by the\n    concretizer. Sticky variants must be set explicitly by users\n    on the command line or in `packages.yaml`. (#28630)\n\n* Allow conditional possible values in variants\n* Add a \"sticky\" property to variants\n\n\n## Other new features of note\n\n* Environment views can optionally link only `run` dependencies\n  with `link:run` (#29336)\n* `spack external find --all` finds library-only packages in\n  addition to build dependencies (#28005)\n* Customizable `config:license_dir` option (#30135)\n* `spack external find --path PATH` takes a custom search path (#30479)\n* `spack spec` has a new `--format` argument like `spack find` (#27908)\n* `spack concretize --quiet` skips printing concretized specs (#30272)\n* `spack info` now has cleaner output and displays test info (#22097)\n* Package-level submodule option for git commit versions (#30085, #30037)\n* Using `/hash` syntax to refer to concrete specs in an environment\n  now works even if `/hash` is not installed. (#30276)\n\n## Major internal refactors\n\n* full hash (see above)\n* new develop versioning scheme `0.19.0-dev0`\n* Allow for multiple dependencies/dependents from the same package (#28673)\n* Splice differing virtual packages (#27919)\n\n## Performance Improvements\n\n* Concretization of large environments with `unify: when_possible` is\n  much faster than concretizing separately (#28941, see above)\n* Single-pass view generation algorithm is 2.6x faster (#29443)\n\n## Archspec improvements\n\n* `oneapi` and `dpcpp` flag support (#30783)\n* better support for `M1` and `a64fx` (#30683)\n\n## Removals and Deprecations\n\n* Spack no longer supports Python `2.6` (#27256)\n* Removed deprecated `--run-tests` option of `spack install`;\n  use `spack test` (#30461)\n* Removed deprecated `spack flake8`; use `spack style` (#27290)\n\n* Deprecate `spack:concretization` config option; use\n  `concretizer:unify` (#30038)\n* Deprecate top-level module configuration; use module sets (#28659)\n* `spack activate` and `spack deactivate` are deprecated in favor of\n  environments; will be removed in `0.19.0` (#29430; see also `link:run`\n  in #29336 above)\n\n## Notable Bugfixes\n\n* Fix bug that broke locks with many parallel builds (#27846)\n* Many bugfixes and consistency improvements for the new concretizer\n  and `--reuse` (#30357, #30092, #29835, #29933, #28605, #29694, #28848)\n\n## Packages\n\n* `CMakePackage` uses `CMAKE_INSTALL_RPATH_USE_LINK_PATH` (#29703)\n* Refactored `lua` support: `lua-lang` virtual supports both\n  `lua` and `luajit` via new `LuaPackage` build system(#28854)\n* PythonPackage: now installs packages with `pip` (#27798)\n* Python: improve site_packages_dir handling (#28346)\n* Extends: support spec, not just package name (#27754)\n* `find_libraries`: search for both .so and .dylib on macOS (#28924)\n* Use stable URLs and `?full_index=1` for all github patches (#29239)\n\n## Spack community stats\n\n* 6,416 total packages, 458 new since `v0.17.0`\n    * 219 new Python packages\n    * 60 new R packages\n* 377 people contributed to this release\n    * 337 committers to packages\n    * 85 committers to core\n\n# v0.17.3 (2022-07-14)\n\n### Spack bugfixes\n\n* Fix missing chgrp on symlinks in package installations (#30743)\n* Allow having non-existing upstreams (#30744, #30746)\n* Fix `spack stage` with custom paths (#30448)\n* Fix failing call for `spack buildcache save-specfile` (#30637)\n* Fix globbing in compiler wrapper (#30699)\n\n# v0.17.2 (2022-04-13)\n\n### Spack bugfixes\n* Fix --reuse with upstreams set in an environment (#29680)\n* config add: fix parsing of validator error to infer type from oneOf (#29475)\n* Fix spack -C command_line_scope used in conjunction with other flags (#28418)\n* Use Spec.constrain to construct spec lists for stacks (#28783)\n* Fix bug occurring when searching for inherited patches in packages (#29574)\n* Fixed a few bugs when manipulating symlinks (#28318, #29515, #29636)\n* Fixed a few minor bugs affecting command prompt, terminal title and argument completion (#28279, #28278, #28939, #29405, #29070, #29402)\n* Fixed a few bugs affecting the spack ci command (#29518, #29419)\n* Fix handling of Intel compiler environment (#29439)\n* Fix a few edge cases when reindexing the DB (#28764)\n* Remove \"Known issues\" from documentation (#29664)\n* Other miscellaneous bugfixes (0b72e070583fc5bcd016f5adc8a84c99f2b7805f, #28403, #29261)\n\n# v0.17.1 (2021-12-23)\n\n### Spack Bugfixes\n* Allow locks to work under high contention (#27846)\n* Improve errors messages from clingo (#27707 #27970)\n* Respect package permissions for sbang (#25764)\n* Fix --enable-locks behavior (#24675)\n* Fix log-format reporter ignoring install errors (#25961)\n* Fix overloaded argparse keys (#27379)\n* Allow style commands to run with targets other than \"develop\" (#27472)\n* Log lock messages to debug level, instead of verbose level (#27408)\n* Handle invalid unicode while logging (#21447)\n* spack audit: fix API calls to variants (#27713)\n* Provide meaningful message for empty environment installs (#28031)\n* Added opensuse leap containers to spack containerize (#27837)\n* Revert \"patches: make re-applied patches idempotent\" (#27625)\n* MANPATH can use system defaults (#21682)\n* Add \"setdefault\" subcommand to `spack module tcl` (#14686)\n* Regenerate views when specs already installed (#28113)\n\n### Package bugfixes\n* Fix external package detection for OpenMPI (#27255)\n* Update the UPC++ package to 2021.9.0 (#26996)\n* Added py-vermin v1.3.2 (#28072)\n\n# v0.17.0 (2021-11-05)\n\n`v0.17.0` is a major feature release.\n\n## Major features in this release\n\n1. **New concretizer is now default**\n   The new concretizer introduced as an experimental feature in `v0.16.0`\n   is now the default (#25502). The new concretizer is based on the\n   [clingo](https://github.com/potassco/clingo) logic programming system,\n   and it enables us to do much higher quality and faster dependency solving\n   The old concretizer is still available via the `concretizer: original`\n   setting, but it is deprecated and will be removed in `v0.18.0`.\n\n2. **Binary Bootstrapping**\n   To make it easier to use the new concretizer and binary packages,\n   Spack now bootstraps `clingo` and `GnuPG` from public binaries. If it\n   is not able to bootstrap them from binaries, it installs them from\n   source code. With these changes, you should still be able to clone Spack\n   and start using it almost immediately. (#21446, #22354, #22489, #22606,\n   #22720, #22720, #23677, #23946, #24003, #25138, #25607, #25964, #26029,\n   #26399, #26599).\n\n3. **Reuse existing packages (experimental)**\n   The most wanted feature from our\n   [2020 user survey](https://spack.io/spack-user-survey-2020/) and\n   the most wanted Spack feature of all time (#25310). `spack install`,\n   `spack spec`, and `spack concretize` now have a `--reuse` option, which\n   causes Spack to minimize the number of rebuilds it does. The `--reuse`\n   option will try to find existing installations and binary packages locally\n   and in registered mirrors, and will prefer to use them over building new\n   versions. This will allow users to build from source *far* less than in\n   prior versions of Spack. This feature will continue to be improved, with\n   configuration options and better CLI expected in `v0.17.1`. It will become\n   the *default* concretization mode in `v0.18.0`.\n\n4. **Better error messages**\n   We have improved the error messages generated by the new concretizer by\n   using *unsatisfiable cores*. Spack will now print a summary of the types\n   of constraints that were violated to make a spec unsatisfiable (#26719).\n\n5. **Conditional variants**\n   Variants can now have a `when=\"<spec>\"` clause, allowing them to be\n   conditional based on the version or other attributes of a package (#24858).\n\n6. **Git commit versions**\n   In an environment and on the command-line, you can now provide a full,\n   40-character git commit as a version for any package with a top-level\n   `git` URL.  e.g., `spack install hdf5@45bb27f58240a8da7ebb4efc821a1a964d7712a8`.\n   Spack will compare the commit to tags in the git repository to understand\n   what versions it is ahead of or behind.\n\n7. **Override local config and cache directories**\n   You can now set `SPACK_DISABLE_LOCAL_CONFIG` to disable the `~/.spack` and\n   `/etc/spack` configuration scopes. `SPACK_USER_CACHE_PATH` allows you to\n   move caches out of `~/.spack`, as well (#27022, #26735). This addresses\n   common problems where users could not isolate CI environments from local\n   configuration.\n\n8. **Improvements to Spack Containerize**\n   For added reproducibility, you can now pin the Spack version used by\n   `spack containerize` (#21910). The container build will only build\n   with the Spack version pinned at build recipe creation instead of the\n   latest Spack version.\n\n9. **New commands for dealing with tags**\n   The `spack tags` command allows you to list tags on packages (#26136), and you\n   can list tests and filter tags with `spack test list` (#26842).\n\n## Other new features of note\n\n* Copy and relocate environment views as stand-alone installations (#24832)\n* `spack diff` command can diff two installed specs (#22283, #25169)\n* `spack -c <config>` can set one-off config parameters on CLI (#22251)\n* `spack load --list` is an alias for `spack find --loaded` (#27184)\n* `spack gpg` can export private key with `--secret` (#22557)\n* `spack style` automatically bootstraps dependencies (#24819)\n* `spack style --fix` automatically invokes `isort` (#24071)\n* build dependencies can be installed from build caches with `--include-build-deps` (#19955)\n* `spack audit` command for checking package constraints (#23053)\n* Spack can now fetch from `CVS` repositories (yep, really) (#23212)\n* `spack monitor` lets you upload analysis about installations to a\n  [spack monitor server](https://github.com/spack/spack-monitor) (#23804, #24321,\n  #23777, #25928))\n* `spack python --path` shows which `python` Spack is using (#22006)\n* `spack env activate --temp` can create temporary environments (#25388)\n* `--preferred` and `--latest` options for `spack checksum` (#25830)\n* `cc` is now pure posix and runs on Alpine (#26259)\n* `SPACK_PYTHON` environment variable sets which `python` spack uses (#21222)\n* `SPACK_SKIP_MODULES` lets you source `setup-env.sh` faster if you don't need modules (#24545)\n\n## Major internal refactors\n\n* `spec.yaml` files are now `spec.json`, yielding a large speed improvement (#22845)\n* Splicing allows Spack specs to store mixed build provenance (#20262)\n* More extensive hooks API for installations (#21930)\n* New internal API for getting the active environment (#25439)\n\n## Performance Improvements\n\n* Parallelize separate concretization in environments; Previously 55 min E4S solve\n    now takes 2.5 min (#26264)\n* Drastically improve YamlFilesystemView file removal performance via batching (#24355)\n* Speed up spec comparison (#21618)\n* Speed up environment activation (#25633)\n\n## Archspec improvements\n* support for new generic `x86_64_v2`, `x86_64_v3`, `x86_64_v4` targets\n    (see [archspec#31](https://github.com/archspec/archspec-json/pull/31))\n* `spack arch --generic` lets you get the best generic architecture for\n    your node (#27061)\n* added support for aocc (#20124), `arm` compiler on `graviton2` (#24904)\n    and on `a64fx` (#24524),\n\n## Infrastructure, buildcaches, and services\n\n* Add support for GCS Bucket Mirrors (#26382)\n* Add `spackbot` to help package maintainers with notifications. See\n  [spack.github.io/spackbot](https://spack.github.io/spackbot/)\n* Reproducible pipeline builds with `spack ci rebuild` (#22887)\n* Removed redundant concretizations from GitLab pipeline generation (#26622)\n* Spack CI no longer generates jobs for unbuilt specs (#20435)\n* Every pull request pipeline has its own buildcache (#25529)\n* `--no-add` installs only specified specs and only if already present in… (#22657)\n* Add environment-aware `spack buildcache sync` command (#25470)\n* Binary cache installation speedups and improvements (#19690, #20768)\n\n## Deprecations and Removals\n\n* `spack setup` was deprecated in v0.16.0, and has now been removed.\n  Use `spack develop` and `spack dev-build`.\n* Remove unused `--dependencies` flag from `spack load` (#25731)\n* Remove stubs for `spack module [refresh|find|rm|loads]`, all of which\n  were deprecated in 2018.\n\n## Notable Bugfixes\n\n* Deactivate previous env before activating new one (#25409)\n* Many fixes to error codes from `spack install` (#21319, #27012, #25314)\n* config add: infer type based on JSON schema validation errors (#27035)\n* `spack config edit` now works even if `spack.yaml` is broken (#24689)\n\n## Packages\n\n* Allow non-empty version ranges like `1.1.0:1.1` (#26402)\n* Remove `.99`'s from many version ranges (#26422)\n* Python: use platform-specific site packages dir (#25998)\n* `CachedCMakePackage` for using *.cmake initial config files (#19316)\n* `lua-lang` allows swapping `lua` and `luajit` (#22492)\n* Better support for `ld.gold` and `ld.lld` (#25626)\n* build times are now stored as metadata in `$prefix/.spack` (#21179)\n* post-install tests can be reused in smoke tests (#20298)\n* Packages can use `pypi` attribute to infer `homepage`/`url`/`list_url` (#17587)\n* Use gnuconfig package for `config.guess` file replacement (#26035)\n* patches: make re-applied patches idempotent (#26784)\n\n## Spack community stats\n\n* 5969 total packages, 920 new since `v0.16.0`\n    * 358 new Python packages, 175 new R packages\n* 513 people contributed to this release\n    * 490 committers to packages\n    * 105 committers to core\n* Lots of GPU updates:\n    * ~77 CUDA-related commits\n    * ~66 AMD-related updates\n    * ~27 OneAPI-related commits\n    * 30 commits from AMD toolchain support\n* `spack test` usage in packages is increasing\n    * 1669 packages with tests (mostly generic python tests)\n    * 93 packages with their own tests\n\n\n# v0.16.3 (2021-09-21)\n\n* clang/llvm: fix version detection (#19978)\n* Fix use of quotes in Python build system (#22279)\n* Cray: fix extracting paths from module files (#23472)\n* Use AWS CloudFront for source mirror (#23978)\n* Ensure all roots of an installed environment are marked explicit in db (#24277)\n* Fix fetching for Python 3.8 and 3.9 (#24686)\n* locks: only open lockfiles once instead of for every lock held (#24794)\n* Remove the EOL centos:6 docker image\n\n# v0.16.2 (2021-05-22)\n\n* Major performance improvement for `spack load` and other commands. (#23661)\n* `spack fetch` is now environment-aware. (#19166)\n* Numerous fixes for the new, `clingo`-based concretizer. (#23016, #23307,\n  #23090, #22896, #22534, #20644, #20537, #21148)\n* Supoprt for automatically bootstrapping `clingo` from source. (#20652, #20657\n  #21364, #21446, #21913, #22354, #22444, #22460, #22489, #22610, #22631)\n* Python 3.10 support: `collections.abc` (#20441)\n* Fix import issues by using `__import__` instead of Spack package importe.\n  (#23288, #23290)\n* Bugfixes and `--source-dir` argument for `spack location`. (#22755, #22348,\n  #22321)\n* Better support for externals in shared prefixes. (#22653)\n* `spack build-env` now prefers specs defined in the active environment.\n  (#21642)\n* Remove erroneous warnings about quotes in `from_sourcing_files`. (#22767)\n* Fix clearing cache of `InternalConfigScope`. (#22609)\n* Bugfix for active when pkg is already active error. (#22587)\n* Make `SingleFileScope` able to repopulate the cache after clearing it.\n  (#22559)\n* Channelflow: Fix the package. (#22483)\n* More descriptive error message for bugs in `package.py` (#21811)\n* Use package-supplied `autogen.sh`. (#20319)\n* Respect `-k/verify-ssl-false` in `_existing_url` method. (#21864)\n\n\n# v0.16.1 (2021-02-22)\n\nThis minor release includes a new feature and associated fixes:\n* intel-oneapi support through new packages (#20411, #20686, #20693, #20717,\n  #20732, #20808, #21377, #21448)\n\nThis release also contains bug fixes/enhancements for:\n* HIP/ROCm support (#19715, #20095)\n* concretization (#19988, #20020, #20082, #20086, #20099, #20102, #20128,\n  #20182, #20193, #20194, #20196, #20203, #20247, #20259, #20307, #20362,\n  #20383, #20423, #20473, #20506, #20507, #20604, #20638, #20649, #20677,\n  #20680, #20790)\n* environment install reporting fix (#20004)\n* avoid import in ABI compatibility info (#20236)\n* restore ability of dev-build to skip patches (#20351)\n* spack find -d spec grouping (#20028)\n* spack smoke test support (#19987, #20298)\n* macOS fixes (#20038, #21662)\n* abstract spec comparisons (#20341)\n* continuous integration (#17563)\n* performance improvements for binary relocation (#19690, #20768)\n* additional sanity checks for variants in builtin packages (#20373)\n* do not pollute auto-generated configuration files with empty lists or\n  dicts (#20526)\n\nplus assorted documentation (#20021, #20174) and package bug fixes/enhancements\n(#19617, #19933, #19986, #20006, #20097, #20198, #20794, #20906, #21411).\n\n\n# v0.16.0 (2020-11-18)\n\n`v0.16.0` is a major feature release.\n\n## Major features in this release\n\n1. **New concretizer (experimental)** Our new backtracking concretizer is\n   now in Spack as an experimental feature. You will need to install\n   `clingo@master+python` and set `concretizer: clingo` in `config.yaml`\n   to use it. The original concretizer is not exhaustive and is not\n   guaranteed to find a solution if one exists. We encourage you to use\n   the new concretizer and to report any bugs you find with it. We\n   anticipate making the new concretizer the default and including all\n   required dependencies for it in Spack `v0.17`. For more details, see\n   #19501.\n\n2. **spack test (experimental)** Users can add `test()` methods to their\n   packages to run smoke tests on installations with the new `spack test`\n   command (the old `spack test` is now `spack unit-test`). `spack test`\n   is environment-aware, so you can `spack install` an environment and\n   `spack test run` smoke tests on all of its packages. Historical test\n   logs can be perused with `spack test results`. Generic smoke tests for\n   MPI implementations, C, C++, and Fortran compilers as well as specific\n   smoke tests for 18 packages. This is marked experimental because the\n   test API (`self.run_test()`) is likely to be change, but we encourage\n   users to upstream tests, and we will maintain and refactor any that\n   are added to mainline packages (#15702).\n\n3. **spack develop** New `spack develop` command allows you to develop\n   several packages at once within a Spack environment. Running\n   `spack develop foo@v1` and `spack develop bar@v2` will check\n    out specific versions of `foo` and `bar` into subdirectories, which you\n    can then build incrementally with `spack install ` (#15256).\n\n4. **More parallelism** Spack previously installed the dependencies of a\n   _single_ spec in parallel. Entire environments can now be installed in\n   parallel, greatly accelerating builds of large environments. get\n   parallelism from individual specs. Spack now parallelizes entire\n   environment builds (#18131).\n\n5. **Customizable base images for spack containerize**\n    `spack containerize` previously only output a `Dockerfile` based\n    on `ubuntu`. You may now specify any base image of your choosing (#15028).\n\n6. **more external finding** `spack external find` was added in `v0.15`,\n   but only `cmake` had support. `spack external find` can now find\n   `bison`, `cuda`, `findutils`, `flex`, `git`, `lustre` `m4`, `mpich`,\n   `mvapich2`, `ncurses`, `openmpi`, `perl`, `spectrum-mpi`, `tar`, and\n   `texinfo` on your system and add them automatically to\n   `packages.yaml`.\n\n7. **Support aocc, nvhpc, and oneapi compilers** We are aggressively\n   pursuing support for the newest vendor compilers, especially those for\n   the U.S. exascale and pre-exascale systems. Compiler classes and\n   auto-detection for `aocc`, `nvhpc`, `oneapi` are now in Spack (#19345,\n   #19294, #19330).\n\n## Additional new features of note\n\n* New `spack mark` command can be used to designate packages as explicitly\n  installed, so that `spack gc` will not garbage-collect them (#16662).\n* `install_tree` can be customized with Spack's projection format (#18341)\n* `sbang` now lives in the `install_tree` so that all users can access it (#11598)\n* `csh` and `tcsh` users no longer need to set `SPACK_ROOT` before\n  sourcing `setup-env.csh` (#18225)\n* Spec syntax now supports `variant=*` syntax for finding any package\n  that has a particular variant (#19381).\n* Spack respects `SPACK_GNUPGHOME` variable for custom GPG directories (#17139)\n* Spack now recognizes Graviton chips\n\n## Major refactors\n\n* Use spawn instead of fork on Python >= 3.8 on macOS (#18205)\n* Use indexes for public build caches (#19101, #19117, #19132, #19141,  #19209)\n* `sbang` is an external package now (https://github.com/spack/sbang, #19582)\n* `archspec` is an external package now (https://github.com/archspec/archspec, #19600)\n\n## Deprecations and Removals\n\n* `spack bootstrap` was deprecated in v0.14.0, and has now been removed.\n* `spack setup` is deprecated as of v0.16.0.\n* What was `spack test` is now called `spack unit-test`. `spack test` is\n  now the smoke testing feature in (2) above.\n\n## Bugfixes\n\nSome of the most notable bugfixes in this release include:\n\n* Better warning messages for deprecated syntax in `packages.yaml` (#18013)\n* `buildcache list --allarch` now works properly (#17827)\n* Many fixes and tests for buildcaches and binary relcoation (#15687,\n  *#17455, #17418, #17455, #15687, #18110)\n\n## Package Improvements\n\nSpack now has 5050 total packages, 720 of which were added since `v0.15`.\n\n* ROCm packages (`hip`, `aomp`, more) added by AMD (#19957, #19832, others)\n* Many improvements for ARM support\n* `llvm-flang`, `flang`, and `f18` removed, as `llvm` has real `flang`\n  support since Flang was merged to LLVM mainline\n* Emerging support for `spack external find` and `spack test` in packages.\n\n## Infrastructure\n\n* Major infrastructure improvements to pipelines on `gitlab.spack.io`\n* Support for testing PRs from forks (#19248) is being enabled for all\n  forks to enable rolling, up-to-date binary builds on `develop`\n\n\n# v0.15.4 (2020-08-12)\n\nThis release contains one feature addition:\n\n* Users can set `SPACK_GNUPGHOME` to override Spack's GPG path (#17139)\n\nSeveral bugfixes for CUDA, binary packaging, and `spack -V`:\n\n* CUDA package's `.libs` method searches for `libcudart` instead of `libcuda` (#18000)\n* Don't set `CUDAHOSTCXX` in environments that contain CUDA (#17826)\n* `buildcache create`: `NoOverwriteException` is a warning, not an error (#17832)\n* Fix `spack buildcache list --allarch` (#17884)\n* `spack -V` works with `releases/latest` tag and shallow clones (#17884)\n\nAnd fixes for GitHub Actions and tests to ensure that CI passes on the\nrelease branch (#15687, #17279, #17328, #17377, #17732).\n\n# v0.15.3 (2020-07-28)\n\nThis release contains the following bugfixes:\n\n* Fix handling of relative view paths (#17721)\n* Fixes for binary relocation (#17418, #17455)\n* Fix redundant printing of error messages in build environment (#17709)\n\nIt also adds a support script for Spack tutorials:\n\n* Add a tutorial setup script to share/spack (#17705, #17722)\n\n# v0.15.2 (2020-07-23)\n\nThis minor release includes two new features:\n\n* Spack install verbosity is decreased, and more debug levels are added (#17546)\n* The $spack/share/spack/keys directory contains public keys that may be optionally trusted for public binary mirrors (#17684)\n\nThis release also includes several important fixes:\n\n* MPICC and related variables are now cleand in the build environment (#17450)\n* LLVM flang only builds CUDA offload components when +cuda (#17466)\n* CI pipelines no longer upload user environments that can contain secrets to the internet (#17545)\n* CI pipelines add bootstrapped compilers to the compiler config (#17536)\n* `spack buildcache list` does not exit on first failure and lists later mirrors (#17565)\n* Apple's \"gcc\" executable that is an apple-clang compiler does not generate a gcc compiler config (#17589)\n* Mixed compiler toolchains are merged more naturally across different compiler suffixes (#17590)\n* Cray Shasta platforms detect the OS properly (#17467)\n* Additional more minor fixes.\n\n# v0.15.1 (2020-07-10)\n\nThis minor release includes several important fixes:\n\n* Fix shell support on Cray (#17386)\n* Fix use of externals installed with other Spack instances (#16954)\n* Fix gcc+binutils build (#9024)\n* Fixes for usage of intel-mpi (#17378 and #17382)\n* Fixes to Autotools config.guess detection (#17333 and #17356)\n* Update `spack install` message to prompt user when an environment is not\n  explicitly activated (#17454)\n\nThis release also adds a mirror for all sources that are\nfetched in Spack (#17077). It is expected to be useful when the\nofficial website for a Spack package is unavailable.\n\n# v0.15.0 (2020-06-28)\n\n`v0.15.0` is a major feature release.\n\n## Major Features in this release\n\n1. **Cray support** Spack will now work properly on Cray \"Cluster\"\nsystems (non XC systems) and after a `module purge` command on Cray\nsystems. See #12989\n\n2. **Virtual package configuration** Virtual packages are allowed in\npackages.yaml configuration. This allows users to specify a virtual\npackage as non-buildable without needing to specify for each\nimplementation. See #14934\n\n3. **New config subcommands** This release adds `spack config add` and\n`spack config remove` commands to add to and remove from yaml\nconfiguration files from the CLI. See #13920\n\n4. **Environment activation** Anonymous environments are **no longer**\nautomatically activated in the current working directory. To activate\nan environment from a `spack.yaml` file in the current directory, use\nthe `spack env activate .` command. This removes a concern that users\nwere too easily polluting their anonymous environments with accidental\ninstallations. See #17258\n\n5. **Apple clang compiler** The clang compiler and the apple-clang\ncompiler are now separate compilers in Spack. This allows Spack to\nimprove support for the apple-clang compiler. See #17110\n\n6. **Finding external packages** Spack packages can now support an API\nfor finding external installations. This allows the `spack external\nfind` command to automatically add installations of those packages to\nthe user's configuration. See #15158\n\n\n## Additional new features of note\n\n* support for using Spack with the fish shell (#9279)\n* `spack load --first` option to load first match (instead of prompting user) (#15622)\n* support the Cray cce compiler both new and classic versions (#17256, #12989)\n* `spack dev-build` command:\n  * supports stopping before a specified phase (#14699)\n  * supports automatically launching a shell in the build environment (#14887)\n* `spack install --fail-fast` allows builds to fail at the first error (rather than best-effort) (#15295)\n* environments: SpecList references can be dereferenced as compiler or dependency constraints (#15245)\n* `spack view` command: new support for a copy/relocate view type (#16480)\n* ci pipelines: see documentation for several improvements\n* `spack mirror -a` command now supports excluding packages (#14154)\n* `spack buildcache create` is now environment-aware (#16580)\n* module generation: more flexible format for specifying naming schemes (#16629)\n* lmod module generation: packages can be configured as core specs for lmod hierarchy (#16517)\n\n## Deprecations and Removals\n\nThe following commands were deprecated in v0.13.0, and have now been removed:\n\n* `spack configure`\n* `spack build`\n* `spack diy`\n\nThe following commands were deprecated in v0.14.0, and will be removed in the next major release:\n\n* `spack bootstrap`\n\n## Bugfixes\n\nSome of the most notable bugfixes in this release include:\n\n* Spack environments can now contain the string `-h` (#15429)\n* The `spack install` gracefully handles being backgrounded (#15723, #14682)\n* Spack uses `-isystem` instead of `-I` in cases that the underlying build system does as well (#16077)\n* Spack no longer prints any specs that cannot be safely copied into a Spack command (#16462)\n* Incomplete Spack environments containing python no longer cause problems (#16473)\n* Several improvements to binary package relocation\n\n## Package Improvements\n\nThe Spack project is constantly engaged in routine maintenance,\nbugfixes, and improvements for the package ecosystem. Of particular\nnote in this release are the following:\n\n* Spack now contains 4339 packages. There are 430 newly supported packages in v0.15.0\n* GCC now builds properly on ARM architectures (#17280)\n* Python: patched to support compiling mixed C/C++ python modules through distutils (#16856)\n* improvements to pytorch and py-tensorflow packages\n* improvements to major MPI implementations: mvapich2, mpich, openmpi, and others\n\n## Spack Project Management:\n\n* Much of the Spack CI infrastructure has moved from Travis to GitHub Actions (#16610, #14220, #16345)\n* All merges to the `develop` branch run E4S CI pipeline (#16338)\n* New `spack debug report` command makes reporting bugs easier (#15834)\n\n# v0.14.2 (2020-04-15)\n\nThis is a minor release on the `0.14` series. It includes performance\nimprovements and bug fixes:\n\n* Improvements to how `spack install` handles foreground/background (#15723)\n* Major performance improvements for reading the package DB (#14693, #15777)\n* No longer check for the old `index.yaml` database file (#15298)\n* Properly activate environments with '-h' in the name (#15429)\n* External packages have correct `.prefix` in environments/views (#15475)\n* Improvements to computing env modifications from sourcing files (#15791)\n* Bugfix on Cray machines when getting `TERM` env variable (#15630)\n* Avoid adding spurious `LMOD` env vars to Intel modules (#15778)\n* Don't output [+] for mock installs run during tests (#15609)\n\n# v0.14.1 (2020-03-20)\n\nThis is a bugfix release on top of `v0.14.0`.  Specific fixes include:\n\n* several bugfixes for parallel installation (#15339, #15341, #15220, #15197)\n* `spack load` now works with packages that have been renamed (#14348)\n* bugfix for `suite-sparse` installation (#15326)\n* deduplicate identical suffixes added to module names (#14920)\n* fix issues with `configure_args` during module refresh (#11084)\n* increased test coverage and test fixes (#15237, #15354, #15346)\n* remove some unused code (#15431)\n\n# v0.14.0 (2020-02-23)\n\n`v0.14.0` is a major feature release, with 3 highlighted features:\n\n1. **Distributed builds.** Multiple Spack instances will now coordinate\n   properly with each other through locks. This works on a single node\n   (where you've called `spack` several times) or across multiple nodes\n   with a shared filesystem. For example, with SLURM, you could build\n   `trilinos` and its dependencies on 2 24-core nodes, with 3 Spack\n   instances per node and 8 build jobs per instance, with `srun -N 2 -n 6\n   spack install -j 8 trilinos`. This requires a filesystem with locking\n   enabled, but not MPI or any other library for parallelism.\n\n2.  **Build pipelines.** You can also build in parallel through Gitlab\n   CI. Simply create a Spack environment and push it to Gitlab to build\n   on Gitlab runners. Pipeline support is now integrated into a single\n   `spack ci` command, so setting it up is easier than ever.  See the\n   [Pipelines section](https://spack.readthedocs.io/en/v0.14.0/pipelines.html)\n   in the docs.\n\n3. **Container builds.** The new `spack containerize` command allows you\n   to create a Docker or Singularity recipe from any Spack environment.\n   There are options to customize the build if you need them. See the\n   [Container Images section](https://spack.readthedocs.io/en/latest/containers.html)\n   in the docs.\n\nIn addition, there are several other new commands, many bugfixes and\nimprovements, and `spack load` no longer requires modules, so you can use\nit the same way on your laptop or on your supercomputer.\n\nSpack grew by over 300 packages since our last release in November 2019,\nand the project grew to over 500 contributors.  Thanks to all of you for\nmaking yet another great release possible. Detailed notes below.\n\n## Major new core features\n* Distributed builds: spack instances coordinate and build in parallel (#13100)\n* New `spack ci` command to manage CI pipelines (#12854)\n* Generate container recipes from environments: `spack containerize` (#14202)\n* `spack load` now works without using modules (#14062, #14628)\n* Garbage collect old/unused installations with `spack gc` (#13534)\n* Configuration files all set environment modifications the same way (#14372,\n  [docs](https://spack.readthedocs.io/en/v0.14.0/configuration.html#environment-modifications))\n* `spack commands --format=bash` auto-generates completion (#14393, #14607)\n* Packages can specify alternate fetch URLs in case one fails (#13881)\n\n## Improvements\n* Improved locking for concurrency with environments (#14676, #14621, #14692)\n* `spack test` sends args to `pytest`, supports better listing (#14319)\n* Better support for aarch64 and cascadelake microarch (#13825, #13780, #13820)\n* Archspec is now a separate library (see https://github.com/archspec/archspec)\n* Many improvements to the `spack buildcache` command (#14237, #14346,\n  #14466, #14467, #14639, #14642, #14659, #14696, #14698, #14714, #14732,\n  #14929, #15003, #15086, #15134)\n\n## Selected Bugfixes\n* Compilers now require an exact match on version (#8735, #14730, #14752)\n* Bugfix for patches that specified specific versions (#13989)\n* `spack find -p` now works in environments (#10019, #13972)\n* Dependency queries work correctly in `spack find` (#14757)\n* Bugfixes for locking upstream Spack instances chains (#13364)\n* Fixes for PowerPC clang optimization flags (#14196)\n* Fix for issue with compilers and specific microarchitectures (#13733, #14798)\n\n## New commands and options\n* `spack ci` (#12854)\n* `spack containerize` (#14202)\n* `spack gc` (#13534)\n* `spack load` accepts `--only package`, `--only dependencies` (#14062, #14628)\n* `spack commands --format=bash` (#14393)\n* `spack commands --update-completion` (#14607)\n* `spack install --with-cache` has new option: `--no-check-signature` (#11107)\n* `spack test` now has `--list`, `--list-long`, and `--list-names` (#14319)\n* `spack install --help-cdash` moves CDash help out of the main help (#13704)\n\n## Deprecations\n* `spack release-jobs` has been rolled into `spack ci`\n* `spack bootstrap` will be removed in a future version, as it is no longer\n  needed to set up modules (see `spack load` improvements above)\n\n## Documentation\n* New section on building container images with Spack (see\n  [docs](https://spack.readthedocs.io/en/latest/containers.html))\n* New section on using `spack ci` command to build pipelines (see\n  [docs](https://spack.readthedocs.io/en/latest/pipelines.html))\n* Document how to add conditional dependencies (#14694)\n* Document how to use Spack to replace Homebrew/Conda (#13083, see\n  [docs](https://spack.readthedocs.io/en/latest/workflows.html#using-spack-to-replace-homebrew-conda))\n\n## Important package changes\n* 3,908 total packages (345 added since 0.13.0)\n* Added first cut at a TensorFlow package (#13112)\n* We now build R without \"recommended\" packages, manage them w/Spack (#12015)\n* Elpa and OpenBLAS now leverage microarchitecture support (#13655, #14380)\n* Fix `octave` compiler wrapper usage (#14726)\n* Enforce that packages in `builtin` aren't missing dependencies (#13949)\n\n\n# v0.13.4 (2020-02-07)\n\nThis release contains several bugfixes:\n\n* bugfixes for invoking python in various environments (#14349, #14496, #14569)\n* brought tab completion up to date (#14392)\n* bugfix for removing extensions from views in order (#12961)\n* bugfix for nondeterministic hashing for specs with externals (#14390)\n\n# v0.13.3 (2019-12-23)\n\nThis release contains more major performance improvements for Spack\nenvironments, as well as bugfixes for mirrors and a `python` issue with\nRHEL8.\n\n* mirror bugfixes: symlinks, duplicate patches, and exception handling (#13789)\n* don't try to fetch `BundlePackages` (#13908)\n* avoid re-fetching patches already added to a mirror (#13908)\n* avoid re-fetching already added patches (#13908)\n* avoid re-fetching already added patches (#13908)\n* allow repeated invocations of `spack mirror create` on the same dir (#13908)\n* bugfix for RHEL8 when `python` is unavailable (#14252)\n* improve concretization performance in environments (#14190)\n* improve installation performance in environments (#14263)\n\n# v0.13.2 (2019-12-04)\n\nThis release contains major performance improvements for Spack environments, as\nwell as some bugfixes and minor changes.\n\n* allow missing modules if they are blacklisted (#13540)\n* speed up environment activation (#13557)\n* mirror path works for unknown versions (#13626)\n* environments: don't try to modify run-env if a spec is not installed (#13589)\n* use semicolons instead of newlines in module/python command (#13904)\n* verify.py: os.path.exists exception handling (#13656)\n* Document use of the maintainers field (#13479)\n* bugfix with config caching (#13755)\n* hwloc: added 'master' version pointing at the HEAD of the master branch (#13734)\n* config option to allow gpg warning suppression (#13744)\n* fix for relative symlinks when relocating binary packages (#13727)\n* allow binary relocation of strings in relative binaries (#13724)\n\n# v0.13.1 (2019-11-05)\n\nThis is a bugfix release on top of `v0.13.0`.  Specific fixes include:\n\n* `spack find` now displays variants and other spec constraints\n* bugfix: uninstall should find concrete specs by DAG hash (#13598)\n* environments: make shell modifications partially unconditional (#13523)\n* binary distribution: relocate text files properly in relative binaries (#13578)\n* bugfix: fetch prefers to fetch local mirrors over remote resources (#13545)\n* environments: only write when necessary (#13546)\n* bugfix: spack.util.url.join() now handles absolute paths correctly (#13488)\n* sbang: use utf-8 for encoding when patching (#13490)\n* Specs with quoted flags containing spaces are parsed correctly (#13521)\n* targets: print a warning message before downgrading (#13513)\n* Travis CI: Test Python 3.8 (#13347)\n* Documentation: Database.query methods share docstrings (#13515)\n* cuda: fix conflict statements for x86-64 targets (#13472)\n* cpu: fix clang flags for generic x86_64 (#13491)\n* syaml_int type should use int.__repr__ rather than str.__repr__ (#13487)\n* elpa: prefer 2016.05.004 until sse/avx/avx2 issues are resolved (#13530)\n* trilinos: temporarily constrain netcdf@:4.7.1 (#13526)\n\n# v0.13.0 (2019-10-25)\n\n`v0.13.0` is our biggest Spack release yet, with *many* new major features.\nFrom facility deployment to improved environments, microarchitecture\nsupport, and auto-generated build farms, this release has features for all of\nour users.\n\nSpack grew by over 700 packages in the past year, and the project now has\nover 450 contributors.  Thanks to all of you for making this release possible.\n\n## Major new core features\n- Chaining: use dependencies from external \"upstream\" Spack instances\n- Environments now behave more like virtualenv/conda\n  - Each env has a *view*: a directory with all packages symlinked in\n  - Activating an environment sets `PATH`, `LD_LIBRARY_PATH`, `CPATH`,\n    `CMAKE_PREFIX_PATH`, `PKG_CONFIG_PATH`, etc. to point to this view.\n- Spack detects and builds specifically for your microarchitecture\n  - named, understandable targets like `skylake`, `broadwell`, `power9`, `zen2`\n  - Spack knows which compilers can build for which architectures\n  - Packages can easily query support for features like `avx512` and `sse3`\n  - You can pick a target with, e.g. `spack install foo target=icelake`\n- Spack stacks: combinatorial environments for facility deployment\n  - Environments can now build cartesian products of specs (with `matrix:`)\n  - Conditional syntax support to exclude certain builds from the stack\n- Projections: ability to build easily navigable symlink trees environments\n- Support no-source packages (BundlePackage) to aggregate related packages\n- Extensions: users can write custom commands that live outside of Spack repo\n- Support ARM and Fujitsu compilers\n\n## CI/build farm support\n- `spack release-jobs` can detect `package.py` changes and generate\n    `.gitlab-ci.yml` to create binaries for an environment or stack\n\tin parallel (initial support -- will change in future release).\n- Results of build pipelines can be uploaded to a CDash server.\n- Spack can now upload/fetch from package mirrors in Amazon S3\n\n## New commands/options\n- `spack mirror create --all` downloads *all* package sources/resources/patches\n- `spack dev-build` runs phases of the install pipeline on the working directory\n- `spack deprecate` permanently symlinks an old, unwanted package to a new one\n- `spack verify` chcecks that packages' files match what was originally installed\n- `spack find --json` prints `JSON` that is easy to parse with, e.g. `jq`\n- `spack find --format FORMAT` allows you to flexibly print package metadata\n- `spack spec --json` prints JSON version of `spec.yaml`\n\n## Selected improvements\n- Auto-build requested compilers if they do not exist\n- Spack automatically adds `RPATHs` needed to make executables find compiler\n    runtime libraries (e.g., path to newer `libstdc++` in `icpc` or `g++`)\n- setup-env.sh is now compatible with Bash, Dash, and Zsh\n- Spack now caps build jobs at min(16, ncores) by default\n- `spack compiler find` now also throttles number of spawned processes\n- Spack now writes stage directories directly to `$TMPDIR` instead of\n    symlinking stages within `$spack/var/spack/cache`.\n- Improved and more powerful `spec` format strings\n- You can pass a `spec.yaml` file anywhere in the CLI you can type a spec.\n- Many improvements to binary caching\n- Gradually supporting new features from Environment Modules v4\n- `spack edit` respects `VISUAL` environment variable\n- Simplified package syntax for specifying build/run environment modifications\n- Numerous improvements to support for environments across Spack commands\n- Concretization improvements\n\n## Documentation\n- Multi-lingual documentation (Started a Japanese translation)\n- Tutorial now has its own site at spack-tutorial.readthedocs.io\n  - This enables us to keep multiple versions of the tutorial around\n\n## Deprecations\n- Spack no longer supports dotkit (LLNL's homegrown, now deprecated module tool)\n- `spack build`, `spack configure`, `spack diy` deprecated in favor of\n    `spack dev-build` and `spack install`\n\n## Important package changes\n- 3,563 total packages (718 added since 0.12.1)\n- Spack now defaults to Python 3 (previously preferred 2.7 by default)\n- Much improved ARM support thanks to Fugaku (RIKEN) and SNL teams\n- Support new special versions: master, trunk, and head (in addition to develop)\n- Better finding logic for libraries and headers\n\n\n# v0.12.1 (2018-11-13)\n\nThis is a minor bugfix release, with a minor fix in the tutorial and a `flake8` fix.\n\nBugfixes\n* Add `r` back to regex strings in binary distribution\n* Fix gcc install version in the tutorial\n\n\n# v0.12.0 (2018-11-13)\n\n## Major new features\n- Spack environments\n- `spack.yaml` and `spack.lock` files for tracking dependencies\n- Custom configurations via command line\n- Better support for linking Python packages into view directories\n- Packages have more control over compiler flags via flag handlers\n- Better support for module file generation\n- Better support for Intel compilers, Intel MPI, etc.\n- Many performance improvements, improved startup time\n\n## License\n- As of this release, all of Spack is permissively licensed under Apache-2.0 or MIT, at the user's option.\n- Consents from over 300 contributors were obtained to make this relicense possible.\n- Previous versions were distributed under the LGPL license, version 2.1.\n\n## New packages\nOver 2,900 packages (800 added since last year)\n\nSpack would not be possible without our community.  Thanks to all of our\n[contributors](https://github.com/spack/spack/graphs/contributors) for the\nnew features and packages in this release!\n\n\n# v0.11.2 (2018-02-07)\n\nThis release contains the following fixes:\n\n* Fixes for `gfortran` 7 compiler detection (#7017)\n* Fixes for exceptions thrown during module generation (#7173)\n\n\n# v0.11.1 (2018-01-19)\n\nThis release contains bugfixes for compiler flag handling.  There were issues in `v0.11.0` that caused some packages to be built without proper optimization.\n\nFixes:\n* Issue #6999: FFTW installed with Spack 0.11.0 gets built without optimisations\n\nIncludes:\n* PR #6415: Fixes for flag handling behavior\n* PR #6960: Fix type issues with setting flag handlers\n* 880e319: Upstream fixes to `list_url` in various R packages\n\n\n# v0.11.0 (2018-01-17)\n\nSpack v0.11.0 contains many improvements since v0.10.0.\nBelow is a summary of the major features, broken down by category.\n\n## New packages\n- Spack now has 2,178 packages (from 1,114 in v0.10.0)\n- Many more Python packages (356) and R packages (471)\n- 48 Exascale Proxy Apps (try `spack list -t proxy-app`)\n\n\n## Core features for users\n- Relocatable binary packages (`spack buildcache`, #4854)\n- Spack now fully supports Python 3 (#3395)\n- Packages can be tagged and searched by tags (#4786)\n- Custom module file templates using Jinja (#3183)\n- `spack bootstrap` command now sets up a basic module environment (#3057)\n- Simplified and better organized help output (#3033)\n- Improved, less redundant `spack install` output (#5714, #5950)\n- Reworked `spack dependents` and `spack dependencies` commands (#4478)\n\n\n## Major new features for packagers\n- Multi-valued variants (#2386)\n- New `conflicts()` directive (#3125)\n- New dependency type: `test` dependencies (#5132)\n- Packages can require their own patches on dependencies (#5476)\n  - `depends_on(..., patches=<patch list>)`\n- Build interface for passing linker information through Specs (#1875)\n  - Major packages that use blas/lapack now use this interface\n- Flag handlers allow packages more control over compiler flags (#6415)\n- Package subclasses support many more build systems:\n  - autotools, perl, qmake, scons, cmake, makefile, python, R, WAF\n  - package-level support for installing Intel HPC products (#4300)\n- `spack blame` command shows contributors to packages (#5522)\n- `spack create` now guesses many more build systems (#2707)\n- Better URL parsing to guess package version URLs (#2972)\n- Much improved `PythonPackage` support (#3367)\n\n\n## Core\n- Much faster concretization (#5716, #5783)\n- Improved output redirection (redirecting build output works properly #5084)\n- Numerous improvements to internal structure and APIs\n\n\n## Tutorials & Documentation\n- Many updates to documentation\n- [New tutorial material from SC17](https://spack.readthedocs.io/en/latest/tutorial.html)\n  - configuration\n  - build systems\n  - build interface\n  - working with module generation\n- Documentation on docker workflows and best practices\n\n\n## Selected improvements and bug fixes\n- No longer build Python eggs -- installations are plain directories (#3587)\n- Improved filtering of system paths from build PATHs and RPATHs (#2083, #3910)\n- Git submodules are properly handled on fetch (#3956)\n- Can now set default number of parallel build jobs in `config.yaml`\n- Improvements to `setup-env.csh` (#4044)\n- Better default compiler discovery on Mac OS X (#3427)\n  - clang will automatically mix with gfortran\n- Improved compiler detection on Cray machines (#3075)\n- Better support for IBM XL compilers\n- Better tab completion\n- Resume gracefully after prematurely terminated partial installs (#4331)\n- Better mesa support (#5170)\n\n\nSpack would not be possible without our community.  Thanks to all of our\n[contributors](https://github.com/spack/spack/graphs/contributors) for the\nnew features and packages in this release!\n\n\n# v0.10.0 (2017-01-17)\n\nThis is Spack `v0.10.0`.  With this release, we will start to push Spack\nreleases more regularly.  This is the last Spack release without\nautomated package testing.  With the next release, we will begin to run\npackage tests in addition to unit tests.\n\nSpack has grown rapidly from 422 to\n[1,114 packages](https://spack.readthedocs.io/en/v0.10.0/package_list.html),\nthanks to the hard work of over 100 contributors.  Below is a condensed\nversion of all the changes since `v0.9.1`.\n\n### Packages\n- Grew from 422 to 1,114 packages\n  - Includes major updates like X11, Qt\n  - Expanded HPC, R, and Python ecosystems\n\n### Core\n- Major speed improvements for spack find and concretization\n- Completely reworked architecture support\n  - Platforms can have front-end and back-end OS/target combinations\n  - Much better support for Cray and BG/Q cross-compiled environments\n- Downloads are now cached locally\n- Support installations in deeply nested directories: patch long shebangs using `sbang`\n\n### Basic usage\n- Easier global configuration via config.yaml\n  - customize install, stage, and cache locations\n- Hierarchical configuration scopes: default, site, user\n  - Platform-specific scopes allow better per-platform defaults\n- Ability to set `cflags`, `cxxflags`, `fflags` on the command line\n- YAML-configurable support for both Lmod and tcl modules in mainline\n- `spack install` supports --dirty option for emergencies\n\n### For developers\n- Support multiple dependency types: `build`, `link`, and `run`\n- Added `Package` base classes for custom build systems\n  - `AutotoolsPackage`, `CMakePackage`, `PythonPackage`, etc.\n  - `spack create` now guesses many more build systems\n- Development environment integration with `spack setup`\n- New interface to pass linking information via `spec` objects\n  - Currently used for `BLAS`/`LAPACK`/`SCALAPACK` libraries\n  - Polymorphic virtual dependency attributes: `spec['blas'].blas_libs`\n\n### Testing & Documentation\n- Unit tests run continuously on Travis CI for Mac and Linux\n- Switched from `nose` to `pytest` for unit tests.\n  - Unit tests take 1 minute now instead of 8\n- Massively expanded documentation\n- Docs are now hosted on [spack.readthedocs.io](https://spack.readthedocs.io)\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 3.6015625,
          "content": "# If you are referencing Spack in a publication, please cite the SC'15 paper\n# described here.\n#\n# Here's the raw citation:\n#\n#   Todd Gamblin, Matthew P. LeGendre, Michael R. Collette, Gregory L. Lee,\n#   Adam Moody, Bronis R. de Supinski, and W. Scott Futral.\n#   The Spack Package Manager: Bringing Order to HPC Software Chaos.\n#   In Supercomputing 2015 (SC’15), Austin, Texas, November 15-20 2015. LLNL-CONF-669890.\n#\n# Or, in BibTeX:\n#\n# @inproceedings{Gamblin_The_Spack_Package_2015,\n#     address = {Austin, Texas, USA},\n#     author = {Gamblin, Todd and LeGendre, Matthew and\n#               Collette, Michael R. and Lee, Gregory L. and\n#               Moody, Adam and de Supinski, Bronis R. and Futral, Scott},\n#     doi = {10.1145/2807591.2807623},\n#     month = {November 15-20},\n#     note = {LLNL-CONF-669890},\n#     series = {Supercomputing 2015 (SC’15)},\n#     title = {{The Spack Package Manager: Bringing Order to HPC Software Chaos}},\n#     url = {https://github.com/spack/spack},\n#     year = {2015}\n# }\n#\n# And here's the CITATION.cff format:\n#\ncff-version: 1.2.0\ntype: software\nmessage: \"If you are referencing Spack in a publication, please cite the paper below.\"\ntitle: \"The Spack Package Manager: Bringing Order to HPC Software Chaos\"\nabstract: >-\n  Large HPC centers spend considerable time supporting software for thousands of users, but the\n  complexity of HPC software is quickly outpacing the capabilities of existing software management\n  tools. Scientific applications require specific versions of compilers, MPI, and other dependency\n  libraries, so using a single, standard software stack is infeasible. However, managing many\n  configurations is difficult because the configuration space is combinatorial in size. We\n  introduce Spack, a tool used at Lawrence Livermore National Laboratory to manage this complexity.\n  Spack provides a novel, re- cursive specification syntax to invoke parametric builds of packages\n  and dependencies. It allows any number of builds to coexist on the same system, and it ensures\n  that installed packages can find their dependencies, regardless of the environment. We show\n  through real-world use cases that Spack supports diverse and demanding applications, bringing\n  order to HPC software chaos.\npreferred-citation:\n  title: \"The Spack Package Manager: Bringing Order to HPC Software Chaos\"\n  type: conference-paper\n  url: \"https://tgamblin.github.io/pubs/spack-sc15.pdf\"\n  authors:\n    - family-names: \"Gamblin\"\n      given-names: \"Todd\"\n    - family-names: \"LeGendre\"\n      given-names: \"Matthew\"\n    - family-names: \"Collette\"\n      given-names: \"Michael R.\"\n    - family-names: \"Lee\"\n      given-names: \"Gregory L.\"\n    - family-names: \"Moody\"\n      given-names: \"Adam\"\n    - family-names: \"de Supinski\"\n      given-names: \"Bronis R.\"\n    - family-names: \"Futral\"\n      given-names: \"Scott\"\n  conference:\n    name: \"Supercomputing 2015 (SC’15)\"\n    city: \"Austin\"\n    region: \"Texas\"\n    country: \"US\"\n    date-start: 2015-11-15\n    date-end: 2015-11-20\n  month: 11\n  year: 2015\n  identifiers:\n    - description: \"The concept DOI of the work.\"\n      type: doi\n      value: 10.1145/2807591.2807623\n    - description: \"The DOE Document Release Number of the work\"\n      type: other\n      value: \"LLNL-CONF-669890\"\nauthors:\n  - family-names: \"Gamblin\"\n    given-names: \"Todd\"\n  - family-names: \"LeGendre\"\n    given-names: \"Matthew\"\n  - family-names: \"Collette\"\n    given-names: \"Michael R.\"\n  - family-names: \"Lee\"\n    given-names: \"Gregory L.\"\n  - family-names: \"Moody\"\n    given-names: \"Adam\"\n  - family-names: \"de Supinski\"\n    given-names: \"Bronis R.\"\n  - family-names: \"Futral\"\n    given-names: \"Scott\"\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 3.296875,
          "content": "Intellectual Property Notice\n------------------------------\n\nSpack is licensed under the Apache License, Version 2.0 (LICENSE-APACHE\nor http://www.apache.org/licenses/LICENSE-2.0) or the MIT license,\n(LICENSE-MIT or http://opensource.org/licenses/MIT), at your option.\n\nCopyrights and patents in the Spack project are retained by contributors.\nNo copyright assignment is required to contribute to Spack.\n\nSpack was originally developed in 2013 by Lawrence Livermore National\nSecurity, LLC. It was originally distributed under the LGPL-2.1 license.\nConsent from contributors to relicense to Apache-2.0/MIT is documented at\nhttps://github.com/spack/spack/issues/9137.\n\n\nSPDX usage\n------------\n\nIndividual files contain SPDX tags instead of the full license text.\nThis enables machine processing of license information based on the SPDX\nLicense Identifiers that are available here: https://spdx.org/licenses/\n\nFiles that are dual-licensed as Apache-2.0 OR MIT contain the following\ntext in the license header:\n\n    SPDX-License-Identifier: (Apache-2.0 OR MIT)\n\n\nExternal Packages\n-------------------\n\nSpack bundles most external dependencies in lib/spack/external. It also\nincludes the sbang tool directly in bin/sbang. These packages are covered\nby various permissive licenses. A summary listing follows. See the\nlicense included with each package for full details.\n\nPackageName: altgraph\nPackageHomePage: https://altgraph.readthedocs.io/en/latest/index.html\nPackageLicenseDeclared: MIT\n\nPackageName: argparse\nPackageHomePage: https://pypi.python.org/pypi/argparse\nPackageLicenseDeclared: Python-2.0\n\nPackageName: astunparse\nPackageHomePage: https://github.com/simonpercivall/astunparse\nPackageLicenseDeclared: Python-2.0\n\nPackageName: attrs\nPackageHomePage: https://github.com/python-attrs/attrs\nPackageLicenseDeclared: MIT\n\nPackageName: ctest_log_parser\nPackageHomePage: https://github.com/Kitware/CMake\nPackageLicenseDeclared: BSD-3-Clause\n\nPackageName: distro\nPackageHomePage: https://pypi.python.org/pypi/distro\nPackageLicenseDeclared: Apache-2.0\n\nPackageName: functools32\nPackageHomePage: https://github.com/MiCHiLU/python-functools32\nPackageLicenseDeclared: Python-2.0\n\nPackageName: jinja2\nPackageHomePage: https://pypi.python.org/pypi/Jinja2\nPackageLicenseDeclared: BSD-3-Clause\n\nPackageName: jsonschema\nPackageHomePage: https://pypi.python.org/pypi/jsonschema\nPackageLicenseDeclared: MIT\n\nPackageName: macholib\nPackageHomePage: https://macholib.readthedocs.io/en/latest/index.html\nPackageLicenseDeclared: MIT\n\nPackageName: markupsafe\nPackageHomePage: https://pypi.python.org/pypi/MarkupSafe\nPackageLicenseDeclared: BSD-3-Clause\n\nPackageName: orderddict\nHomepage: https://pypi.org/project/ordereddict/\nPackageLicenseDeclared: MIT\n\nPackageName: py\nPackageHomePage: https://pypi.python.org/pypi/py\nPackageLicenseDeclared: MIT\n\nPackageName: pyrsistent\nPackageHomePage: http://github.com/tobgu/pyrsistent\nPackageLicenseDeclared: MIT\n\nPackageName: pytest\nPackageHomePage: https://pypi.python.org/pypi/pytest\nPackageLicenseDeclared: MIT\n\nPackageName: ruamel.yaml\nPackageHomePage: https://yaml.readthedocs.io/\nPackageLicenseDeclared: MIT\n\nPackageName: sbang\nPackageHomePage: https://github.com/spack/sbang\nPackageLicenseDeclared: Apache-2.0 OR MIT\n\nPackageName: typing_extensions\nPackageHomePage: https://pypi.org/project/typing-extensions/\nPackageLicenseDeclared: Python-2.0\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) Spack Project Developers.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.1396484375,
          "content": "This work was produced under the auspices of the U.S. Department of\nEnergy by Lawrence Livermore National Laboratory under Contract\nDE-AC52-07NA27344.\n\nThis work was prepared as an account of work sponsored by an agency of\nthe United States Government. Neither the United States Government nor\nLawrence Livermore National Security, LLC, nor any of their employees\nmakes any warranty, expressed or implied, or assumes any legal liability\nor responsibility for the accuracy, completeness, or usefulness of any\ninformation, apparatus, product, or process disclosed, or represents that\nits use would not infringe privately owned rights.\n\nReference herein to any specific commercial product, process, or service\nby trade name, trademark, manufacturer, or otherwise does not necessarily\nconstitute or imply its endorsement, recommendation, or favoring by the\nUnited States Government or Lawrence Livermore National Security, LLC.\n\nThe views and opinions of authors expressed herein do not necessarily\nstate or reflect those of the United States Government or Lawrence\nLivermore National Security, LLC, and shall not be used for advertising\nor product endorsement purposes.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.8974609375,
          "content": "<div align=\"left\">\n\n<h2>\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cdn.rawgit.com/spack/spack/develop/share/spack/logo/spack-logo-white-text.svg\" width=\"250\">\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://cdn.rawgit.com/spack/spack/develop/share/spack/logo/spack-logo-text.svg\" width=\"250\">\n  <img alt=\"Spack\" src=\"https://cdn.rawgit.com/spack/spack/develop/share/spack/logo/spack-logo-text.svg\" width=\"250\">\n</picture>\n\n<br>\n<br clear=\"all\">\n\n<a href=\"https://github.com/spack/spack/actions/workflows/ci.yml\"><img src=\"https://github.com/spack/spack/workflows/ci/badge.svg\" alt=\"CI Status\"></a>\n<a href=\"https://github.com/spack/spack/actions/workflows/bootstrapping.yml\"><img src=\"https://github.com/spack/spack/actions/workflows/bootstrap.yml/badge.svg\" alt=\"Bootstrap Status\"></a>\n<a href=\"https://github.com/spack/spack/actions/workflows/build-containers.yml\"><img src=\"https://github.com/spack/spack/actions/workflows/build-containers.yml/badge.svg\" alt=\"Containers Status\"></a>\n<a href=\"https://spack.readthedocs.io\"><img src=\"https://readthedocs.org/projects/spack/badge/?version=latest\" alt=\"Documentation Status\"></a>\n<a href=\"https://codecov.io/gh/spack/spack\"><img src=\"https://codecov.io/gh/spack/spack/branch/develop/graph/badge.svg\" alt=\"Code coverage\"/></a>\n<a href=\"https://slack.spack.io\"><img src=\"https://slack.spack.io/badge.svg\" alt=\"Slack\"/></a>\n<a href=\"https://matrix.to/#/#spack-space:matrix.org\"><img src=\"https://img.shields.io/matrix/spack-space%3Amatrix.org?label=matrix\" alt=\"Matrix\"/></a>\n\n</h2>\n\n**[Getting Started] &nbsp; • &nbsp; [Config] &nbsp; • &nbsp; [Community] &nbsp; • &nbsp; [Contributing] &nbsp; • &nbsp; [Packaging Guide]**\n\n[Getting Started]: https://spack.readthedocs.io/en/latest/getting_started.html\n[Config]: https://spack.readthedocs.io/en/latest/configuration.html\n[Community]: #community\n[Contributing]: https://spack.readthedocs.io/en/latest/contribution_guide.html\n[Packaging Guide]: https://spack.readthedocs.io/en/latest/packaging_guide.html\n\n</div>\n\nSpack is a multi-platform package manager that builds and installs\nmultiple versions and configurations of software. It works on Linux,\nmacOS, Windows, and many supercomputers. Spack is non-destructive: installing a\nnew version of a package does not break existing installations, so many\nconfigurations of the same package can coexist.\n\nSpack offers a simple \"spec\" syntax that allows users to specify versions\nand configuration options. Package files are written in pure Python, and\nspecs allow package authors to write a single script for many different\nbuilds of the same package.  With Spack, you can build your software\n*all* the ways you want to.\n\nSee the\n[Feature Overview](https://spack.readthedocs.io/en/latest/features.html)\nfor examples and highlights.\n\nTo install spack and your first package, make sure you have Python & Git.\nThen:\n\n    $ git clone -c feature.manyFiles=true --depth=2 https://github.com/spack/spack.git\n    $ cd spack/bin\n    $ ./spack install zlib\n\n> [!TIP]\n> `-c feature.manyFiles=true` improves git's performance on repositories with 1,000+ files.\n>\n> `--depth=2` prunes the git history to reduce the size of the Spack installation.\n\nDocumentation\n----------------\n\n[**Full documentation**](https://spack.readthedocs.io/) is available, or\nrun `spack help` or `spack help --all`.\n\nFor a cheat sheet on Spack syntax, run `spack help --spec`.\n\nTutorial\n----------------\n\nWe maintain a\n[**hands-on tutorial**](https://spack-tutorial.readthedocs.io/).\nIt covers basic to advanced usage, packaging, developer features, and large HPC\ndeployments.  You can do all of the exercises on your own laptop using a\nDocker container.\n\nFeel free to use these materials to teach users at your organization\nabout Spack.\n\nCommunity\n------------------------\n\nSpack is an open source project.  Questions, discussion, and\ncontributions are welcome. Contributions can be anything from new\npackages to bugfixes, documentation, or even new core features.\n\nResources:\n\n* **Slack workspace**: [spackpm.slack.com](https://spackpm.slack.com).\n  To get an invitation, visit [slack.spack.io](https://slack.spack.io).\n* **Matrix space**: [#spack-space:matrix.org](https://matrix.to/#/#spack-space:matrix.org):\n  [bridged](https://github.com/matrix-org/matrix-appservice-slack#matrix-appservice-slack) to Slack.\n* [**Github Discussions**](https://github.com/spack/spack/discussions):\n  for Q&A and discussions. Note the pinned discussions for announcements.\n* **X**: [@spackpm](https://twitter.com/spackpm). Be sure to\n  `@mention` us!\n* **Mailing list**: [groups.google.com/d/forum/spack](https://groups.google.com/d/forum/spack):\n  only for announcements. Please use other venues for discussions.\n\nContributing\n------------------------\nContributing to Spack is relatively easy.  Just send us a\n[pull request](https://help.github.com/articles/using-pull-requests/).\nWhen you send your request, make ``develop`` the destination branch on the\n[Spack repository](https://github.com/spack/spack).\n\nYour PR must pass Spack's unit tests and documentation tests, and must be\n[PEP 8](https://www.python.org/dev/peps/pep-0008/) compliant.  We enforce\nthese guidelines with our CI process. To run these tests locally, and for\nhelpful tips on git, see our\n[Contribution Guide](https://spack.readthedocs.io/en/latest/contribution_guide.html).\n\nSpack's `develop` branch has the latest contributions. Pull requests\nshould target `develop`, and users who want the latest package versions,\nfeatures, etc. can use `develop`.\n\nReleases\n--------\n\nFor multi-user site deployments or other use cases that need very stable\nsoftware installations, we recommend using Spack's\n[stable releases](https://github.com/spack/spack/releases).\n\nEach Spack release series also has a corresponding branch, e.g.\n`releases/v0.14` has `0.14.x` versions of Spack, and `releases/v0.13` has\n`0.13.x` versions. We backport important bug fixes to these branches but\nwe do not advance the package versions or make other changes that would\nchange the way Spack concretizes dependencies within a release branch.\nSo, you can base your Spack deployment on a release branch and `git pull`\nto get fixes, without the package churn that comes with `develop`.\n\nThe latest release is always available with the `releases/latest` tag.\n\nSee the [docs on releases](https://spack.readthedocs.io/en/latest/developer_guide.html#releases)\nfor more details.\n\nCode of Conduct\n------------------------\n\nPlease note that Spack has a\n[**Code of Conduct**](.github/CODE_OF_CONDUCT.md). By participating in\nthe Spack community, you agree to abide by its rules.\n\nAuthors\n----------------\nMany thanks go to Spack's [contributors](https://github.com/spack/spack/graphs/contributors).\n\nSpack was created by Todd Gamblin, tgamblin@llnl.gov.\n\n### Citing Spack\n\nIf you are referencing Spack in a publication, please cite the following paper:\n\n * Todd Gamblin, Matthew P. LeGendre, Michael R. Collette, Gregory L. Lee,\n   Adam Moody, Bronis R. de Supinski, and W. Scott Futral.\n   [**The Spack Package Manager: Bringing Order to HPC Software Chaos**](https://www.computer.org/csdl/proceedings/sc/2015/3723/00/2807623.pdf).\n   In *Supercomputing 2015 (SC’15)*, Austin, Texas, November 15-20 2015. LLNL-CONF-669890.\n\nOn GitHub, you can copy this citation in APA or BibTeX format via the \"Cite this repository\"\nbutton. Or, see the comments in `CITATION.cff` for the raw BibTeX.\n\nLicense\n----------------\n\nSpack is distributed under the terms of both the MIT license and the\nApache License (Version 2.0). Users may choose either license, at their\noption.\n\nAll new contributions must be made under both the MIT and Apache-2.0\nlicenses.\n\nSee [LICENSE-MIT](https://github.com/spack/spack/blob/develop/LICENSE-MIT),\n[LICENSE-APACHE](https://github.com/spack/spack/blob/develop/LICENSE-APACHE),\n[COPYRIGHT](https://github.com/spack/spack/blob/develop/COPYRIGHT), and\n[NOTICE](https://github.com/spack/spack/blob/develop/NOTICE) for details.\n\nSPDX-License-Identifier: (Apache-2.0 OR MIT)\n\nLLNL-CODE-811652\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.0654296875,
          "content": "# Security Policy\n\n## Supported Versions\n\nWe provide security updates for `develop` and for the last two\nstable (`0.x`) release series of Spack. Security updates will be\nmade available as patch (`0.x.1`, `0.x.2`, etc.) releases.\n\nFor more on Spack's release structure, see\n[`README.md`](https://github.com/spack/spack#releases).\n\n## Reporting a Vulnerability\n\nYou can report a vulnerability using GitHub's private reporting\nfeature:\n\n1. Go to [github.com/spack/spack/security](https://github.com/spack/spack/security).\n2. Click \"Report a vulnerability\" in the upper right corner of that page.\n3. Fill out the form and submit your draft security advisory.\n\nMore details are available in\n[GitHub's docs](https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability).\n\nYou can expect to hear back about security issues within two days.\nIf your security issue is accepted, we will do our best to release\na fix within a week. If fixing the issue will take longer than\nthis, we will discuss timeline options with you.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.9052734375,
          "content": "[project]\nname=\"spack\"\ndescription=\"The spack package manager\"\ndependencies=[\n  \"clingo\",\n  \"setuptools\",\n]\ndynamic = [\"version\"]\n\n[project.scripts]\nspack = \"lib.spack.spack_installable.main:main\"\n\n[tool.hatch.version]\npath = \"lib/spack/spack/__init__.py\"\n\n[project.optional-dependencies]\ndev = [\n  \"pip>=21.3\",\n  \"pytest\",\n  \"pytest-xdist\",\n  \"setuptools\",\n  \"click\",\n  'black',\n  \"mypy\",\n  \"isort\",\n  \"flake8\",\n  \"vermin\",\n]\nci = [\n  \"pytest-cov\",\n  \"codecov[toml]\",\n]\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.hatch.build.targets.wheel]\ninclude = [\n  \"/bin\",\n  \"/etc\",\n  \"/lib\",\n  \"/share\",\n  \"/var\",\n  \"CITATION.cff\",\n  \"COPYRIGHT\",\n  \"LICENSE-APACHE\",\n  \"LICENSE-MIT\",\n  \"NOTICE\",\n  \"README.md\",\n  \"SECURITY.md\",\n]\n\n[tool.hatch.envs.default]\nfeatures = [\n  \"dev\",\n]\n\n[tool.hatch.envs.default.scripts]\nspack = \"./bin/spack\"\nstyle = \"./bin/spack style\"\ntest = \"./bin/spack unit-test\"\n\n[tool.hatch.envs.ci]\nfeatures = [\n  \"dev\",\n  \"ci\",\n]\n\n[tool.black]\nline-length = 99\ntarget-version = ['py36', 'py37', 'py38', 'py39', 'py310']\ninclude = '(lib/spack|var/spack/repos)/.*\\.pyi?$|bin/spack$'\nextend-exclude = 'lib/spack/external'\nskip_magic_trailing_comma = true\n\n[tool.isort]\nline_length = 99\nprofile = \"black\"\nsections = [\n  \"FUTURE\",\n  \"STDLIB\",\n  \"THIRDPARTY\",\n  \"ARCHSPEC\", \"LLNL\", \"FIRSTPARTY\",\n  \"LOCALFOLDER\",\n]\nknown_first_party = \"spack\"\nknown_archspec = \"archspec\"\nknown_llnl = \"llnl\"\nknown_third_party = [\"ruamel\", \"six\"]\nsrc_paths = \"lib\"\nhonor_noqa = true\n\n[tool.mypy]\npython_version = 3.7\nfiles = ['lib/spack/llnl/**/*.py', 'lib/spack/spack/**/*.py', './var/spack/repos/builtin/packages/*/package.py']\nmypy_path = ['bin', 'lib/spack', 'lib/spack/external', 'var/spack/repos/builtin']\nallow_redefinition = true\n\n# This and a generated import file allows supporting packages\nnamespace_packages = true\n\n# To avoid re-factoring all the externals, ignore errors and missing imports\n# globally, then turn back on in spack and spack submodules\nignore_errors = true\nignore_missing_imports = true\n\n  [[tool.mypy.overrides]]\n  module = 'spack.*'\n  ignore_errors = false\n  ignore_missing_imports = false\n\n  [[tool.mypy.overrides]]\n  module = 'packages.*'\n  ignore_errors = false\n  ignore_missing_imports = false\n  # we can't do this here, not a module scope option, in spack style instead\n  # disable_error_code = 'no-redef'\n\n  [[tool.mypy.overrides]]\n  module = 'llnl.*'\n  ignore_errors = false\n  ignore_missing_imports = false\n\n  [[tool.mypy.overrides]]\n  module = 'spack.test.packages'\n  ignore_errors = true\n\n  # ignore errors in fake import path for packages\n  [[tool.mypy.overrides]]\n  module = 'spack.pkg.*'\n  ignore_errors = true\n  ignore_missing_imports = true\n\n  # Spack imports a number of external packages, and they *may* require Python 3.8 or\n  # higher in recent versions. This can cause mypy to fail because we check for 3.7\n  # compatibility. We could restrict mypy to run for the oldest supported version (3.7),\n  # but that means most developers won't be able to run mypy, which means it'll fail\n  # more in CI. Instead, we exclude these imported packages from mypy checking.\n  [[tool.mypy.overrides]]\n  module = [\n      'IPython',\n      'altgraph',\n      'attr',\n      'boto3',\n      'botocore',\n      'distro',\n      'importlib.metadata',\n      'jinja2',\n      'jsonschema',\n      'macholib',\n      'markupsafe',\n      'numpy',\n      'pkg_resources',\n      'pyristent',\n      'pytest',\n      'ruamel.yaml',\n      'six',\n  ]\n  follow_imports = 'skip'\n  follow_imports_for_stubs = true\n\n[tool.pyright]\nuseLibraryCodeForTypes = true\nreportMissingImports = true\nreportWildcardImportFromLibrary = false\ninclude = ['lib/spack', 'var/spack/repos']\nignore = ['lib/spack/external']\nextraPaths = ['lib/spack', 'lib/spack/external']\n\n\n[tool.coverage.run]\nparallel = true\nconcurrency = [\"multiprocessing\"]\nbranch = true\nsource = [\"bin\", \"lib\"]\ndata_file = \"./tests-coverage/.coverage\"\nomit = [\n    'lib/spack/spack/test/*',\n    'lib/spack/docs/*',\n    'lib/spack/external/*',\n    'share/spack/qa/*',\n]\n\n[tool.coverage.report]\n# Regexes for lines to exclude from consideration\nexclude_lines = [\n    # Have to re-enable the standard pragma\n    'pragma: no cover',\n\n    # Don't complain about missing debug-only code:\n    'def __repr__',\n    'if self\\.debug',\n\n    # Don't complain if tests don't hit defensive assertion code:\n    'raise AssertionError',\n    'raise NotImplementedError',\n\n    # Don't complain if non-runnable code isn't run:\n    'if 0:',\n    'if False:',\n    'if __name__ == .__main__.:',\n]\nignore_errors = true\n\n[tool.coverage.paths]\nsource = [\n    \".\",\n    \"/Users/runner/work/spack/spack\",\n    \"/System/Volumes/Data/home/runner/work/spack/spack\",\n    \"D:\\\\a\\\\spack\\\\spack\",\n]\n\n[tool.coverage.html]\ndirectory = \"htmlcov\"\n\n[tool.vendoring]\ndestination = \"lib/spack/external/_vendoring\"\nrequirements = \"lib/spack/external/vendor.txt\"\nnamespace = \"\"\n\nprotected-files = [\"__init__.py\", \"README.rst\", \"vendor.txt\"]\npatches-dir = \"lib/spack/external/patches\"\n\n[tool.vendoring.transformations]\nsubstitute = [\n]\ndrop = [\n  # contains unnecessary scripts\n  \"bin/\",\n  # interpreter and OS specific msgpack libs\n  \"msgpack/*.so\",\n  # unneeded parts of setuptools\n  \"easy_install.py\",\n  \"setuptools\",\n  \"pkg_resources/_vendor/\",\n  \"pkg_resources/extern/\",\n  # trim vendored pygments styles and lexers\n  \"pygments/styles/[!_]*.py\",\n  '^pygments/lexers/(?!python|__init__|_mapping).*\\.py$',\n  # trim rich's markdown support\n  \"rich/markdown.py\",\n  # ruamel.yaml installs unneded files\n  \"ruamel.*.pth\",\n  \"pvectorc.*.so\"\n]\n\n[tool.vendoring.typing-stubs]\nsix = [\"six.__init__\", \"six.moves.__init__\", \"six.moves.configparser\"]\ndistro = []\n\n[tool.vendoring.license.directories]\nsetuptools = \"pkg_resources\"\n\n[tool.vendoring.license.fallback-urls]\nCacheControl = \"https://raw.githubusercontent.com/ionrock/cachecontrol/v0.12.6/LICENSE.txt\"\ndistlib = \"https://bitbucket.org/pypa/distlib/raw/master/LICENSE.txt\"\nwebencodings = \"https://github.com/SimonSapin/python-webencodings/raw/master/LICENSE\"\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.8916015625,
          "content": "# content of pytest.ini\n[pytest]\naddopts = --durations=30 -ra --strict-markers\ntestpaths = lib/spack/spack/test\npython_files = *.py\nfilterwarnings =\n  ignore::UserWarning\nmarkers =\n  db: tests that require creating a DB\n  maybeslow: tests that may be slow (e.g. access a lot the filesystem, etc.)\n  regression: tests that fix a reported bug\n  requires_executables: tests that requires certain executables in PATH to run\n  nomockstage: use a stage area specifically created for this test, instead of relying on a common mock stage\n  enable_compiler_verification: enable compiler verification within unit tests\n  enable_compiler_execution: enable compiler execution to detect link paths and libc\n  disable_clean_stage_check: avoid failing tests if there are leftover files in the stage area\n  not_on_windows: mark tests that are skipped on Windows\n  only_windows: mark tests that are skipped everywhere but Windows\n"
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "var",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}