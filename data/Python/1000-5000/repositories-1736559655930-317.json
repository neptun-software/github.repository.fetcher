{
  "metadata": {
    "timestamp": 1736559655930,
    "page": 317,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spulec/freezegun",
      "stars": 4230,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.02734375,
          "content": "[run]\ninclude = freezegun/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0732421875,
          "content": "build\n.coverage\n*.egg-info\n*.tox\ndist\n*.pyc\nvenv/\n.idea\nhtmlcov/\n.DS_Store\n"
        },
        {
          "name": "AUTHORS.rst",
          "type": "blob",
          "size": 1.056640625,
          "content": "Patches and Suggestions\n```````````````````````\n\n- `Dan Miller <https://github.com/dnmiller>`_\n- `Matthew Schinckel <https://github.com/schinckel>`_\n- `JJ Geewax <https://github.com/jgeewax>`_\n- `Roman Imankulov <https://github.com/imankulov>`_\n- `Martin Geisler <https://github.com/mgeisler>`_\n- `Richard Eames <https://github.com/Naddiseo>`_\n- `Tye Wang <https://github.com/tyewang>`_\n- `Andreas Pelme <https://github.com/pelme>`_\n- `Jesse London <https://github.com/jesteria>`_\n- `Zach Smith <https://github.com/zmsmith>`_\n- `Adam Johnson <https://github.com/adamchainz>`_\n- `Alex Ehlke <https://github.com/aehlke>`_\n- `James Lu <github.com/CrazyPython>`_\n- `Dan Elkis <github.com/rinslow>`_\n- `Bastien Vallet <github.com/djailla>`_\n- `Julian Mehnle <github.com/jmehnle>`_\n- `Lukasz Balcerzak <https://github.com/lukaszb>`_\n- `Hannes Ljungberg <hannes@5monkeys.se>`_\n- `staticdev <staticdev-support@proton.me>`_\n- `Marcin Sulikowski <https://github.com/marcinsulikowski>`_\n- `Ashish Patil <https://github.com/ashishnitinpatil>`_\n- `Victor Ferrer <https://github.com/vicfergar>`_\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 2.71875,
          "content": "Freezegun Changelog\n===================\n\n1.5.1\n-----\n * Fix the typing of the `tick()` method, and improve it's behaviour.\n\n1.5.0\n----\n * The default ignore list now contains the `queue`-package\n * Added a missing `move_to`-function when calling `freeze_time(tick=True)`\n * Fixes a rounding error in `time.time_ns()`\n * Fixed a bug where the default ignore list could not be empty (`configure(default_ignore_list=[])`)\n * All `tick()` methods now return the new datetime (instead of None)\n * Type improvements\n\n1.4.0\n-----\n * `asyncio`-support from 1.3.x introduced quite a few  bugs, so that functionality is now hidden behind a flag:\n   `with freeze_time('1970-01-02', real_asyncio=True):`\n\n1.3.1\n-----\n * Fixed the release number in the build\n\n1.3.0\n-----\n\n* Fixed `asyncio` support to avoid `await asyncio.sleep(1)` hanging forever.\n\n* Added support for Python 3.12\n\n\n1.2.2\n-----\n\n* Removes Python 3.6 support, which reached its EOL on 2021-12-23 (https://devguide.python.org/versions/?highlight=End-of-life#unsupported-versions).\n\n* Improved static typing definitions\n\n* Don't freeze pytest timings. This avoids class-level decorator usage messing with pytest timings.\n\n* Pass through all setUp and tearDown arguments\n\n\n1.2.1\n-----\n\n* Added missing typeshed types from distribution\n\n* Pass all arguments on recursive freeze_time calls\n\n\n1.2.0\n-----\n\n* Add support for `time.perf_counter` (and `…_ns`)\n\n* Added typeshed types\n\n* Dropped support for python 3.5\n\n1.1.0\n-----\n\n* Add support for `time.monotonic` (and `…_ns`)\n\n* Allow to configure default ignore list, and also to just extend the default\n\n* Fixed when accessing from thread after stop()\n\n\n1.0.0\n------\n\n* Dropped Py2 support\n* Added as_kwarg argument in order to have the frozen time object passed with the name provided in as_kwarg argument\n\n0.3.15\n------\n\n* Fix locale timestamp bug. CC #328\n\n0.3.14\n------\n\n* Fix calendar.timegm behavior\n\n0.3.13\n------\n\n* Fix for Py3.8\n* Reset time.time_ns on stop\n\n0.3.12\n------\n\n* Refactor classes to functions\n* Ignore Selenium\n* Move to pytest\n* Conditionally patch time.clock\n* Patch time.time_ns added in Python 3.7\n\n0.3.11\n------\n\n* Performance improvements\n* Fix nesting time.time\n* Add nanosecond property\n\n0.3.10\n------\n\n* Performance improvements\n* Coroutine support\n\n0.3.9\n-----\n\n* If no time to be frozen, use current time\n* Fix uuid1 issues\n* Add support for python 3.6\n\n0.3.8\n-----\n\n* Bugfix for old-style classes\n* Ignore warnings when patching\n* Add `move_to` method to change time\n\n0.3.7\n-----\n\n* Fix CPython detection\n\n0.3.6\n-----\n\n* Catch TypeError when fetching attribute values\n* Speed improvements\n* Add manual tick increment\n\n\n0.3.5\n-----\n\n* Add `tick` argument to allow time to move forward\n* Performance improvements\n* Fix timezone example in README\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.580078125,
          "content": "\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2012 Steve Pulec\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2294921875,
          "content": "include README.rst LICENSE AUTHORS.rst CHANGELOG pyproject.toml\nrecursive-include tests *\ninclude requirements.txt tox.ini\ninclude freezegun/py.typed\nrecursive-include freezegun *.pyi\nglobal-exclude __pycache__\nglobal-exclude *.py[co]\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2646484375,
          "content": "SHELL := /bin/bash\n\ninit:\n\tpython setup.py develop\n\tpip install -r requirements.txt\n\ntest:\n\trm -f .coverage\n\tpytest\n\ntag:\n\tpython create_tag.py\n\npublish:\n\trm -rf dist\n\tpython -m build\n\ttwine upload dist/*\n\nvenv:\n\tvirtualenv venv\n\tvenv/bin/pip install -r requirements.txt\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 9.873046875,
          "content": "FreezeGun: Let your Python tests travel through time\n====================================================\n\n.. image:: https://img.shields.io/pypi/v/freezegun.svg\n   :target: https://pypi.python.org/pypi/freezegun/\n.. image:: https://github.com/spulec/freezegun/workflows/CI/badge.svg\n   :target: https://github.com/spulec/freezegun/actions\n.. image:: https://coveralls.io/repos/spulec/freezegun/badge.svg?branch=master\n   :target: https://coveralls.io/r/spulec/freezegun\n\nFreezeGun is a library that allows your Python tests to travel through time by mocking the datetime module.\n\nUsage\n-----\n\nOnce the decorator or context manager have been invoked, all calls to datetime.datetime.now(), datetime.datetime.utcnow(), datetime.date.today(), time.time(), time.localtime(), time.gmtime(), and time.strftime() will return the time that has been frozen. time.monotonic() and time.perf_counter() will also be frozen, but as usual it makes no guarantees about their absolute value, only their changes over time.\n\nDecorator\n~~~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n    import datetime\n    import unittest\n\n    # Freeze time for a pytest style test:\n\n    @freeze_time(\"2012-01-14\")\n    def test():\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\n    # Or a unittest TestCase - freezes for every test, and set up and tear down code\n\n    @freeze_time(\"1955-11-12\")\n    class MyTests(unittest.TestCase):\n        def test_the_class(self):\n            assert datetime.datetime.now() == datetime.datetime(1955, 11, 12)\n\n    # Or any other class - freezes around each callable (may not work in every case)\n\n    @freeze_time(\"2012-01-14\")\n    class Tester(object):\n        def test_the_class(self):\n            assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\n    # Or method decorator, might also pass frozen time object as kwarg\n\n    class TestUnitTestMethodDecorator(unittest.TestCase):\n        @freeze_time('2013-04-09')\n        def test_method_decorator_works_on_unittest(self):\n            self.assertEqual(datetime.date(2013, 4, 9), datetime.date.today())\n\n        @freeze_time('2013-04-09', as_kwarg='frozen_time')\n        def test_method_decorator_works_on_unittest(self, frozen_time):\n            self.assertEqual(datetime.date(2013, 4, 9), datetime.date.today())\n            self.assertEqual(datetime.date(2013, 4, 9), frozen_time.time_to_freeze.today())\n\n        @freeze_time('2013-04-09', as_kwarg='hello')\n        def test_method_decorator_works_on_unittest(self, **kwargs):\n            self.assertEqual(datetime.date(2013, 4, 9), datetime.date.today())\n            self.assertEqual(datetime.date(2013, 4, 9), kwargs.get('hello').time_to_freeze.today())\n\nContext manager\n~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    def test():\n        assert datetime.datetime.now() != datetime.datetime(2012, 1, 14)\n        with freeze_time(\"2012-01-14\"):\n            assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n        assert datetime.datetime.now() != datetime.datetime(2012, 1, 14)\n\nRaw use\n~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    freezer = freeze_time(\"2012-01-14 12:00:01\")\n    freezer.start()\n    assert datetime.datetime.now() == datetime.datetime(2012, 1, 14, 12, 0, 1)\n    freezer.stop()\n\nTimezones\n~~~~~~~~~\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    @freeze_time(\"2012-01-14 03:21:34\", tz_offset=-4)\n    def test():\n        assert datetime.datetime.utcnow() == datetime.datetime(2012, 1, 14, 3, 21, 34)\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 13, 23, 21, 34)\n\n        # datetime.date.today() uses local time\n        assert datetime.date.today() == datetime.date(2012, 1, 13)\n\n    @freeze_time(\"2012-01-14 03:21:34\", tz_offset=-datetime.timedelta(hours=3, minutes=30))\n    def test_timedelta_offset():\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 13, 23, 51, 34)\n\nNice inputs\n~~~~~~~~~~~\n\nFreezeGun uses dateutil behind the scenes so you can have nice-looking datetimes.\n\n.. code-block:: python\n\n    @freeze_time(\"Jan 14th, 2012\")\n    def test_nice_datetime():\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\nFunction and generator objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFreezeGun is able to handle function and generator objects.\n\n.. code-block:: python\n\n    def test_lambda():\n        with freeze_time(lambda: datetime.datetime(2012, 1, 14)):\n            assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n\n    def test_generator():\n        datetimes = (datetime.datetime(year, 1, 1) for year in range(2010, 2012))\n\n        with freeze_time(datetimes):\n            assert datetime.datetime.now() == datetime.datetime(2010, 1, 1)\n\n        with freeze_time(datetimes):\n            assert datetime.datetime.now() == datetime.datetime(2011, 1, 1)\n\n        # The next call to freeze_time(datetimes) would raise a StopIteration exception.\n\n``tick`` argument\n~~~~~~~~~~~~~~~~~\n\nFreezeGun has an additional ``tick`` argument which will restart time at the given\nvalue, but then time will keep ticking. This is an alternative to the default\nparameters which will keep time stopped.\n\n.. code-block:: python\n\n    @freeze_time(\"Jan 14th, 2020\", tick=True)\n    def test_nice_datetime():\n        assert datetime.datetime.now() > datetime.datetime(2020, 1, 14)\n\n``auto_tick_seconds`` argument\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFreezeGun has an additional ``auto_tick_seconds`` argument which will autoincrement the\nvalue every time by the given amount from the start value. This is an alternative to the default\nparameters which will keep time stopped. Note that given ``auto_tick_seconds`` the ``tick`` parameter will be ignored.\n\n.. code-block:: python\n\n    @freeze_time(\"Jan 14th, 2020\", auto_tick_seconds=15)\n    def test_nice_datetime():\n        first_time = datetime.datetime.now()\n        auto_incremented_time = datetime.datetime.now()\n        assert first_time + datetime.timedelta(seconds=15) == auto_incremented_time\n\n\nManual ticks\n~~~~~~~~~~~~\n\nFreezeGun allows for the time to be manually forwarded as well.\n\n.. code-block:: python\n\n    def test_manual_tick():\n        initial_datetime = datetime.datetime(year=1, month=7, day=12,\n                                            hour=15, minute=6, second=3)\n        with freeze_time(initial_datetime) as frozen_datetime:\n            assert frozen_datetime() == initial_datetime\n\n            frozen_datetime.tick()\n            initial_datetime += datetime.timedelta(seconds=1)\n            assert frozen_datetime() == initial_datetime\n\n            frozen_datetime.tick(delta=datetime.timedelta(seconds=10))\n            initial_datetime += datetime.timedelta(seconds=10)\n            assert frozen_datetime() == initial_datetime\n\n.. code-block:: python\n\n    def test_monotonic_manual_tick():\n        initial_datetime = datetime.datetime(year=1, month=7, day=12,\n                                            hour=15, minute=6, second=3)\n        with freeze_time(initial_datetime) as frozen_datetime:\n            monotonic_t0 = time.monotonic()\n            frozen_datetime.tick(1.0)\n            monotonic_t1 = time.monotonic()\n            assert monotonic_t1 == monotonic_t0 + 1.0\n\n\nMoving time to specify datetime\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFreezeGun allows moving time to specific dates.\n\n.. code-block:: python\n\n    def test_move_to():\n        initial_datetime = datetime.datetime(year=1, month=7, day=12,\n                                            hour=15, minute=6, second=3)\n\n        other_datetime = datetime.datetime(year=2, month=8, day=13,\n                                            hour=14, minute=5, second=0)\n        with freeze_time(initial_datetime) as frozen_datetime:\n            assert frozen_datetime() == initial_datetime\n\n            frozen_datetime.move_to(other_datetime)\n            assert frozen_datetime() == other_datetime\n\n            frozen_datetime.move_to(initial_datetime)\n            assert frozen_datetime() == initial_datetime\n\n\n    @freeze_time(\"2012-01-14\", as_arg=True)\n    def test(frozen_time):\n        assert datetime.datetime.now() == datetime.datetime(2012, 1, 14)\n        frozen_time.move_to(\"2014-02-12\")\n        assert datetime.datetime.now() == datetime.datetime(2014, 2, 12)\n\nParameter for ``move_to`` can be any valid ``freeze_time`` date (string, date, datetime).\n\n\nDefault arguments\n~~~~~~~~~~~~~~~~~\n\nNote that FreezeGun will not modify default arguments. The following code will\nprint the current date. See `here <http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments>`_ for why.\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n    import datetime as dt\n\n    def test(default=dt.date.today()):\n        print(default)\n\n    with freeze_time('2000-1-1'):\n        test()\n\n\nInstallation\n------------\n\nTo install FreezeGun, simply:\n\n.. code-block:: bash\n\n    $ pip install freezegun\n\nOn Debian systems:\n\n.. code-block:: bash\n\n    $ sudo apt-get install python-freezegun\n\n\nIgnore packages\n---------------\n\nSometimes it's desired to ignore FreezeGun behaviour for particular packages (i.e. libraries).\nIt's possible to ignore them for a single invocation:\n\n\n.. code-block:: python\n\n    from freezegun import freeze_time\n\n    with freeze_time('2020-10-06', ignore=['threading']):\n        # ...\n\n\nBy default FreezeGun ignores following packages:\n\n.. code-block:: python\n\n    [\n        'nose.plugins',\n        'six.moves',\n        'django.utils.six.moves',\n        'google.gax',\n        'threading',\n        'Queue',\n        'selenium',\n        '_pytest.terminal.',\n        '_pytest.runner.',\n        'gi',\n    ]\n\n\nIt's possible to set your own default ignore list:\n\n.. code-block:: python\n\n    import freezegun\n\n    freezegun.configure(default_ignore_list=['threading', 'tensorflow'])\n\n\nPlease note this will override default ignore list. If you want to extend existing defaults\nplease use:\n\n.. code-block:: python\n\n    import freezegun\n\n    freezegun.configure(extend_ignore_list=['tensorflow'])\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1884765625,
          "content": "## Security contact information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "create_tag.py",
          "type": "blob",
          "size": 0.55078125,
          "content": "import os\nimport re\n\n\ndef read_version():\n    with open(os.path.join('freezegun', '__init__.py')) as f:\n        m = re.search(r'''__version__\\s*=\\s*['\"]([^'\"]*)['\"]''', f.read())\n        if m:\n            return m.group(1)\n        raise ValueError(\"couldn't find version\")\n\n\ndef create_tag():\n    from subprocess import call\n    version = read_version()\n    errno = call(['git', 'tag', '--annotate', version, '--message', 'Version %s' % version])\n    if errno == 0:\n        print(\"Added tag for version %s\" % version)\n\n\nif __name__ == '__main__':\n    create_tag()\n"
        },
        {
          "name": "freezegun",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.255859375,
          "content": "[tool.mypy]\nfiles = \"freezegun,tests\"\nstrict = true\npretty = true\nshow_column_numbers = true\nshow_error_codes = true\nshow_error_context = true\nwarn_unused_ignores = false\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0791015625,
          "content": "pytest\npytest-cov\ncoveralls\npython-dateutil >= 2.7\nmaya; python_version < '3.12'\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.146484375,
          "content": "[metadata]\nname = freezegun\nversion = attr: freezegun.__version__\ndescription = Let your Python tests travel through time\nlong_description = file: README.rst\nauthor = Steve Pulec\nauthor_email = spulec@gmail.com\nurl = https://github.com/spulec/freezegun\nproject_urls =\n    Bug Tracker = https://github.com/spulec/freezegun/issues\n    Changes = https://github.com/spulec/freezegun/blob/master/CHANGELOG\n    Documentation = https://github.com/spulec/freezegun/blob/master/README.rst\n    Source Code = https://github.com/spulec/freezegun\nlicense = Apache 2.0\nclassifiers =\n    License :: OSI Approved :: Apache Software License\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n\n[options]\npackages = freezegun\npython_requires = >=3.7\ninstall_requires =\n    python-dateutil >= 2.7\ninclude_package_data = true\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.05859375,
          "content": "#!/usr/bin/env python\nfrom setuptools import setup\n\nsetup()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.4677734375,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py37, py38, py39, py310, py311, py312, pypy3, mypy\n\n[testenv]\ncommands = pytest --cov {posargs}\ndeps = -rrequirements.txt\n\n[testenv:mypy]\ndeps =\n    mypy\ncommands = mypy freezegun tests --install-types --non-interactive\n"
        }
      ]
    }
  ]
}