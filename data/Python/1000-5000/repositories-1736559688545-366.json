{
  "metadata": {
    "timestamp": 1736559688545,
    "page": 366,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "baichuan-inc/Baichuan2",
      "stars": 4116,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "OpenAI_api.py",
          "type": "blob",
          "size": 2.240234375,
          "content": "from flask import Flask, request, jsonify\nimport torch\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nfrom transformers.generation.utils import GenerationConfig\n\napp = Flask(__name__)\n\n# Load the pre-trained model and tokenizer\nmodel_name = \"baichuan-inc/Baichuan2-13B-Chat\"\ntokenizer = AutoTokenizer.from_pretrained(model_name, use_fast=False, trust_remote_code=True)\nmodel = AutoModelForCausalLM.from_pretrained(model_name, device_map=\"auto\", torch_dtype=torch.float16, trust_remote_code=True)\n#这里的torch_dtype=torch.float16可改为torch_dtype=torch.bfloat16，仅支持30系及以上显卡\nmodel.generation_config = GenerationConfig.from_pretrained(model_name)\n\n@app.route('/v1/chat/completions', methods=['POST'])#URL: http://127.0.0.1:8000/v1/chat/completions\ndef chat_completion():\n    try:\n        # Parse incoming JSON data\n        data = request.get_json()\n        messages = data.get('messages', [])\n        is_streaming = data.get('stream', False)\n\n        # Check if streaming is enabled\n        if is_streaming:#这里暂时只支持非流式输出\n            return jsonify({\"error\": \"Streaming is not supported.\"}), 400\n\n        # Generate response using the model\n        response_text = generate_response(messages)\n\n        # Calculate token counts\n        prompt_tokens = sum(len(tokenizer.encode(msg['content'])) for msg in messages)\n        # 暂时不支持调节其他参数\n        completion_tokens = len(response_text)\n        total_tokens = prompt_tokens + completion_tokens\n\n        # Build the response\n        response_data = {\n            \"object\": \"chat.completion\",\n            \"model\": model_name,\n            \"choices\": [{\"message\": {\"role\": \"assistant\", \"content\": response_text}, \"index\": 0, \"finish_reason\": \"stop\"}],\n            \"usage\": {\n                \"prompt_tokens\": prompt_tokens,\n                \"completion_tokens\": completion_tokens,\n                \"total_tokens\": total_tokens\n            }\n        }\n\n        return jsonify(response_data)\n\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\ndef generate_response(messages):\n    # Generate response using the model\n    response = model.chat(tokenizer, messages)\n    return response\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8000)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 37.875,
          "content": "<!-- markdownlint-disable first-line-h1 -->\n<!-- markdownlint-disable html -->\n\n<div align=\"center\">\n<h1>\n  Baichuan 2\n</h1>\n</div>\n\n<p align=\"center\">\n🤗 <a href=\"https://huggingface.co/baichuan-inc/\" target=\"_blank\">Hugging Face</a> • 🤖 <a href=\"https://modelscope.cn/organization/baichuan-inc\" target=\"_blank\">ModelScope</a> • 💬 <a href=\"https://github.com/baichuan-inc/Baichuan-7B/blob/main/media/wechat.jpeg?raw=true\" target=\"_blank\">WeChat</a>• 🧩 <a href=\"https://modelers.cn/spaces/Baichuan/Baichuan2-7B-Chat\" target=\"_blank\">Modelers</a>\n</p>\n\n<div align=\"center\">\n\n<div align=\"center\">\n<img src=\"https://github.com/baichuan-inc/Baichuan2/blob/main/media/xy.jpeg?raw=true\" width=20% />\n</div>\n\n🚀 百小应APP已正式上线！懂搜索、会提问的AI助手，各大应用商店搜索百小应下载，欢迎下载体验 🎉\n\n\n[![license](https://img.shields.io/github/license/modelscope/modelscope.svg)](https://github.com/baichuan-inc/Baichuan2/blob/main/LICENSE)\n\n\n<h4 align=\"center\">\n    <p>\n        <b>中文</b> |\n        <a href=\"https://github.com/baichuan-inc/Baichuan2/blob/main/README_EN.md\">English</a>\n    <p>\n</h4>\n\n</div>\n\n# 目录\n\n- [📖 模型介绍](#模型介绍)\n- [📊 Benchmark 结果 🥇🥇🔥🔥](#Benchmark-结果)\n- [⚙️ 推理和部署](#推理和部署)\n- [🛠️ 模型微调](#模型微调)\n- [💾 中间 Checkpoints 🔥🔥](#中间-Checkpoints)\n- [👥 社区与生态](#社区与生态)\n- [📜 声明、协议、引用](#声明协议引用)\n\n# 更新\n[2023.12.29] 🎉🎉🎉 我们发布了 **[Baichuan2-13B-Chat v2](https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat/tree/v2.0)** 版本。其中：\n- 大幅提升了模型的综合能力，特别是数学和逻辑推理、复杂指令跟随能力。\n\n# 模型介绍\n\n- Baichuan 2 是百川智能推出的**新一代开源大语言模型**，采用 **2.6 万亿**  Tokens 的高质量语料训练。\n- Baichuan 2 在多个权威的中文、英文和多语言的通用、领域 benchmark 上取得同尺寸**最佳**的效果。\n- 本次发布包含有 **7B**、**13B** 的 **Base** 和 **Chat** 版本，并提供了 Chat 版本的 **4bits 量化**。\n- 所有版本对学术研究完全开放。同时，开发者通过邮件申请并获得官方商用许可后，即可**免费商用**，请参考[协议](#协议)章节。\n- 欢迎阅读我们的技术报告 [Baichuan 2: Open Large-scale Language Models](https://arxiv.org/abs/2309.10305) 获取更多信息。\n\n本次发布版本和下载链接见下表：\n|         | 基座模型  | 对齐模型 | 对齐模型 4bits 量化 |\n|:-------:|:-------:|:-------:|:-----------------:|\n| 7B      | 🤗 [Baichuan2-7B-Base](https://huggingface.co/baichuan-inc/Baichuan2-7B-Base) | 🤗 [Baichuan2-7B-Chat](https://huggingface.co/baichuan-inc/Baichuan2-7B-Chat) | 🤗 [Baichuan2-7B-Chat-4bits](https://huggingface.co/baichuan-inc/Baichuan2-7B-Chat-4bits) |\n| 13B     | 🤗 [Baichuan2-13B-Base](https://huggingface.co/baichuan-inc/Baichuan2-13B-Base) | 🤗 [Baichuan2-13B-Chat](https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat) | 🤗 [Baichuan2-13B-Chat-4bits](https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat-4bits) |\n\n# Benchmark 结果\n\n我们在[通用](#通用领域)、[法律](#法律医疗)、[医疗](#法律医疗)、[数学](#数学代码)、[代码](#数学代码)和[多语言翻译](#多语言翻译)六个领域的中英文和多语言权威数据集上对模型进行了广泛测试。\n\n## 通用领域\n\n在通用领域我们在以下数据集上进行了 5-shot 测试。\n- [C-Eval](https://cevalbenchmark.com/index.html#home) 是一个全面的中文基础模型评测数据集，涵盖了 52 个学科和四个难度的级别。我们使用该数据集的 dev 集作为 few-shot 的来源，在 test 集上进行测试。我们采用了 [Baichuan-7B](https://github.com/baichuan-inc/Baichuan-7B/tree/main) 的评测方案。\n- [MMLU](https://arxiv.org/abs/2009.03300) 是包含 57 个任务的英文评测数据集，涵盖了初等数学、美国历史、计算机科学、法律等，难度覆盖高中水平到专家水平，是目前主流的 LLM 评测数据集。我们采用了[开源](https://github.com/hendrycks/test)的评测方案。\n- [CMMLU](https://github.com/haonan-li/CMMLU) 是一个包含 67 个主题的综合性性中文评估基准，专门用于评估语言模型在中文语境下的知识和推理能力。我们采用了其[官方](https://github.com/haonan-li/CMMLU)的评测方案。\n- [Gaokao](https://github.com/OpenLMLab/GAOKAO-Bench) 是一个以中国高考题作为评测大语言模型能力的数据集，用以评估模型的语言能力和逻辑推理能力。 我们只保留了其中的单项选择题，并进行了随机划分。我们采用了与 C-Eval 类似的评测方案。\n- [AGIEval](https://github.com/microsoft/AGIEval) 旨在评估模型的认知和解决问题相关的任务中的一般能力。 我们只保留了其中的四选一单项选择题，并进行了随机划分。我们采用了与 C-Eval 类似的评测方案。\n- [BBH](https://huggingface.co/datasets/lukaemon/bbh) 是一个挑战性任务 Big-Bench 的子集。Big-Bench 目前包括 204 项任务。任务主题涉及语言学、儿童发展、数学、常识推理、生物学、物理学、社会偏见、软件开发等方面。BBH 是从 204 项 Big-Bench 评测基准任务中大模型表现不好的任务单独拿出来形成的评测基准。\n\n### 7B 模型结果\n\n|                       | **C-Eval** | **MMLU** | **CMMLU** | **Gaokao** | **AGIEval** | **BBH** |\n|:---------------------:|:----------:|:--------:|:---------:|:----------:|:-----------:|:-------:|\n|                       |  5-shot    |  5-shot  |  5-shot   | 5-shot     | 5-shot      | 3-shot  |\n| **GPT-4**             | 68.40      | 83.93    | 70.33     | 66.15      | 63.27       | 75.12   |\n| **GPT-3.5 Turbo**     | 51.10      | 68.54    | 54.06     | 47.07      | 46.13       | 61.59   |\n| **LLaMA-7B**          | 27.10      | 35.10    | 26.75     | 27.81      | 28.17       | 32.38   |\n| **LLaMA2-7B**         | 28.90      | 45.73    | 31.38     | 25.97      | 26.53       | 39.16   |\n| **MPT-7B**            | 27.15      | 27.93    | 26.00     | 26.54      | 24.83       | 35.20   |\n| **Falcon-7B**         | 24.23      | 26.03    | 25.66     | 24.24      | 24.10       | 28.77   |\n| **ChatGLM2-6B**       | 50.20      | 45.90    | 49.00     | 49.44      | 45.28       | 31.65   |\n| **Baichuan-7B**       | 42.80      | 42.30    | 44.02     | 36.34      | 34.44       | 32.48   |\n| **Baichuan2-7B-Base** | 54.00      | 54.16    | 57.07     | 47.47      | 42.73       | 41.56   |\n\n### 13B 模型结果\n\n|                             | **C-Eval** | **MMLU** | **CMMLU** | **Gaokao** | **AGIEval** | **BBH** |\n|:---------------------------:|:----------:|:--------:|:---------:|:----------:|:-----------:|:-------:|\n|                             |  5-shot    |  5-shot  |  5-shot   | 5-shot     | 5-shot      | 3-shot  |\n| **GPT-4**                   | 68.40      | 83.93    | 70.33     | 66.15      | 63.27       | 75.12   |\n| **GPT-3.5 Turbo**           | 51.10      | 68.54    | 54.06     | 47.07      | 46.13       | 61.59   |\n| **LLaMA-13B**               | 28.50      | 46.30    | 31.15     | 28.23      | 28.22       | 37.89   |\n| **LLaMA2-13B**              | 35.80      | 55.09    | 37.99     | 30.83      | 32.29       | 46.98   |\n| **Vicuna-13B**              | 32.80      | 52.00    | 36.28     | 30.11      | 31.55       | 43.04   |\n| **Chinese-Alpaca-Plus-13B** | 38.80      | 43.90    | 33.43     | 34.78      | 35.46       | 28.94   |\n| **XVERSE-13B**              | 53.70      | 55.21    | 58.44     | 44.69      | 42.54       | 38.06   |\n| **Baichuan-13B-Base**       | 52.40      | 51.60    | 55.30     | 49.69      | 43.20       | 43.01   |\n| **Baichuan2-13B-Base**      | 58.10      | 59.17    | 61.97     | 54.33      | 48.17       | 48.78   |\n\n## 法律、医疗\n\n法律领域我们使用了 [JEC-QA](https://jecqa.thunlp.org/) 数据集。JEC-QA 数据集来源于中国国家司法考试。我们只保留了其中的单选题。我们采用了与 C-Eval 类似的评测方案。\n\n医疗领域则使用通用领域数据集（C-Eval、MMLU、CMMLU）中的医学相关学科、[MedQA](https://arxiv.org/abs/2009.13081) 和 [MedMCQA](https://medmcqa.github.io/)。我们采用了与 C-Eval 类似的评测方案。\n- 为了测试方便，我们使用了 C-Eval 的 val 集进行测试。\n- MedQA 数据集来源于美国、中国的医学考试。我们测试了 [MedQA数据集](https://huggingface.co/datasets/bigbio/med_qa) 中的 USMLE 和 MCMLE 两个子集，并采用了五个候选的版本。\n- MedMCQA 数据集来源于印度医学院的入学考试。我们只保留了其中的单选题。由于 test 集没有答案，我们使用 dev 集进行测试。\n- 通用领域数据集包含的医学相关学科如下：\n    - C-Eval: clinical_medicine, basic_medicine\n    - MMLU: clinical_knowledge, anatomy, college_medicine, college_biology, nutrition, virology, medical_genetics, professional_medicine\n    - CMMLU: anatomy, clinical_knowledge, college_medicine, genetics, nutrition, traditional_chinese_medicine, virology \n\n我们对以上数据集进行了 5-shot 测试。\n\n### 7B 模型结果\n\n|                       | **JEC-QA** | **CEval-MMLU-CMMLU** | **MedQA-USMLE** | **MedQA-MCMLE** | **MedMCQA** |\n|:---------------------:|:----------:|:--------------------:|:---------------:|:---------------:|:-----------:|\n|                       | 5-shot     | 5-shot               | 5-shot          | 5-shot          | 5-shot      |\n| **GPT-4**             | 59.32      | 77.16                | 80.28           | 74.58           | 72.51       |\n| **GPT-3.5 Turbo**     | 42.31      | 61.17                | 53.81           | 52.92           | 56.25       |\n| **LLaMA-7B**          | 27.45      | 33.34                | 24.12           | 21.72           | 27.45       |\n| **LLaMA2-7B**         | 29.20      | 36.75                | 27.49           | 24.78           | 37.93       |\n| **MPT-7B**            | 27.45      | 26.67                | 16.97           | 19.79           | 31.96       |\n| **Falcon-7B**         | 23.66      | 25.33                | 21.29           | 18.07           | 33.88       |\n| **ChatGLM2-6B**       | 40.76      | 44.54                | 26.24           | 45.53           | 30.22       |\n| **Baichuan-7B**       | 34.64      | 42.37                | 27.42           | 39.46           | 31.39       |\n| **Baichuan2-7B-Base** | 44.46      | 56.39                | 32.68           | 54.93           | 41.73       |\n\n### 13B 模型结果\n\n|                             | **JEC-QA** | **CEval-MMLU-CMMLU** | **MedQA-USMLE** | **MedQA-MCMLE** | **MedMCQA** |\n|:---------------------------:|:----------:|:--------------------:|:---------------:|:---------------:|:-----------:|\n|                             | 5-shot     |  5-shot              |  5-shot         |  5-shot         | 5-shot      |\n| **GPT-4**                   | 59.32      | 77.16                | 80.28           | 74.58           | 72.51       |\n| **GPT-3.5 Turbo**           | 42.31      | 61.17                | 53.81           | 52.92           | 56.25       |\n| **LLaMA-13B**               | 27.54      | 35.14                | 28.83           | 23.38           | 39.52       |\n| **LLaMA2-13B**              | 34.08      | 47.42                | 35.04           | 29.74           | 42.12       |\n| **Vicuna-13B**              | 28.38      | 40.99                | 34.80           | 27.67           | 40.66       |\n| **Chinese-Alpaca-Plus-13B** | 35.32      | 46.31                | 27.49           | 32.66           | 35.87       |\n| **XVERSE-13B**              | 46.42      | 58.08                | 32.99           | 58.76           | 41.34       |\n| **Baichuan-13B-Base**       | 41.34      | 51.77                | 29.07           | 43.67           | 39.60       |\n| **Baichuan2-13B-Base**      | 47.40      | 59.33                | 40.38           | 61.62           | 42.86       |\n\n## 数学、代码\n\n数学领域我们使用 [OpenCompass](https://opencompass.org.cn/) 评估框架，对 [GSM8K](https://huggingface.co/datasets/gsm8k) 和 [MATH](https://huggingface.co/datasets/competition_math) 数据集进行了 4-shot 测试。\n\n- GSM8K 是由 OpenAI 发布的一个由 8.5K 高质量的语言多样化的小学数学应用题组成的数据集，要求根据给定的场景和两个可能的解决方案，选择最合理的方案。\n- MATH 数据集包含 12,500 个数学问题（其中 7500 个属于训练集，5000 个属于测试集），这些问题收集自 AMC 10、AMC 12、AIME 等数学竞赛。\n\n代码领域则采用了 [HumanEval](https://huggingface.co/datasets/openai_humaneval) 和 [MBPP](https://huggingface.co/datasets/mbpp) 数据集。我们使用 OpenCompass，对 HumanEval 进行了 0-shot 测试，MBPP 数据集进行了 3-shot 测试。\n- HumanEval 中的编程任务包括模型语言理解、推理、算法和简单数学，以评估模型功能正确性，并衡量模型的问题解决能力。\n- MBPP 包括 974 个 Python 短函数、程序的文字描述以及用于检查功能正确性的测试用例的数据集。\n\n### 7B 模型结果\n\n|                       | **GSM8K** | **MATH** | **HumanEval** | **MBPP** |\n|:---------------------:|:---------:|:--------:|:-------------:|:--------:|\n|                       |  4-shot   | 4-shot   |  0-shot       |  3-shot  |\n| **GPT-4**             |   89.99   | 40.20    | 69.51         |  63.60   |\n| **GPT-3.5 Turbo**     |   57.77   | 13.96    | 52.44         |  61.40   |\n| **LLaMA-7B**          |   9.78    | 3.02     | 11.59         |  14.00   |\n| **LLaMA2-7B**         |   16.22   | 3.24     | 12.80         |  14.80   |\n| **MPT-7B**            |   8.64    | 2.90     | 14.02         |  23.40   |\n| **Falcon-7B**         |   5.46    | 1.68     | -             |  10.20   |\n| **ChatGLM2-6B**       |   28.89   | 6.40     | 9.15          |   9.00   |\n| **Baichuan-7B**       |   9.17    | 2.54     | 9.20          |   6.60   |\n| **Baichuan2-7B-Base** |   24.49   | 5.58     | 18.29         |  24.20   |\n\n### 13B 模型结果\n\n|                             | **GSM8K** | **MATH** | **HumanEval** | **MBPP** |\n|:---------------------------:|:---------:|:--------:|:-------------:|:--------:|\n|                             |  4-shot   | 4-shot   |  0-shot       |  3-shot  |\n| **GPT-4**                   |   89.99   | 40.20    | 69.51         |  63.60   |\n| **GPT-3.5 Turbo**           |   57.77   | 13.96    | 52.44         |  61.40   |\n| **LLaMA-13B**               |   20.55   | 3.68     | 15.24         |  21.40   |\n| **LLaMA2-13B**              |   28.89   | 4.96     | 15.24         |  27.00   |\n| **Vicuna-13B**              |   28.13   | 4.36     | 16.46         |  15.00   |\n| **Chinese-Alpaca-Plus-13B** |   11.98   | 2.50     | 16.46         |  20.00   |\n| **XVERSE-13B**              |   18.20   | 2.18     | 15.85         |  16.80   |\n| **Baichuan-13B-Base**       |   26.76   | 4.84     | 11.59         |  22.80   |\n| **Baichuan2-13B-Base**      |   52.77   | 10.08    | 17.07         |  30.20   |\n\n## 多语言翻译\n\n我们采用了 [Flores-101](https://huggingface.co/datasets/facebook/flores) 数据集来评估模型的多语言能力。Flores-101 涵盖了世界各地的 101 种语言。它的数据来源于新闻、旅游指南和书籍等多个不同领域。我们选择了联合国官方语言（阿拉伯文、中文、英文、法文、俄文和西班牙文）以及德文和日文作为测试语种。我们使用 OpenCompass 对 Flores-101 中的中-英、中-法、中-西班牙、中-阿拉伯、中-俄、中-日、中-德等七个子任务分别进行了 8-shot 测试。\n\n### 7B 模型结果\n\n|             | **CN-EN** | **CN-FR** | **CN-ES** | **CN-AR** | **CN-RU** | **CN-JP** | **CN-DE** | Average |\n|:---------------------:|:-------:|:-------:|:---------:|:---------:|:-------:|:-------:|:-------:|:-------:|\n| **GPT-4**             | 29.94   | 29.56   | 20.01     | 10.76     | 18.62   | 13.26   | 20.83   | 20.43   |\n| **GPT-3.5 Turbo**     | 27.67   | 26.15   | 19.58     | 10.73     | 17.45   | 1.82    | 19.70   | 17.59   |\n| **LLaMA-7B**          | 17.27   | 12.02   | 9.54      | 0.00      | 4.47    | 1.41    | 8.73    | 7.63    |\n| **LLaMA2-7B**         | 25.76   | 15.14   | 11.92     | 0.79      | 4.99    | 2.20    | 10.15   | 10.14   |\n| **MPT-7B**            | 20.77   | 9.53    | 8.96      | 0.10      | 3.54    | 2.91    | 6.54    | 7.48    |\n| **Falcon-7B**         | 22.13   | 15.67   | 9.28      | 0.11      | 1.35    | 0.41    | 6.41    | 7.91    |\n| **ChatGLM2-6B**       | 22.28   | 9.42    | 7.77      | 0.64      | 1.78    | 0.26    | 4.61    | 6.68    |\n| **Baichuan-7B**       | 25.07   | 16.51   | 12.72     | 0.41      | 6.66    | 2.24    | 9.86    | 10.50   |\n| **Baichuan2-7B-Base** | 27.27   | 20.87   | 16.17     | 1.39      | 11.21   | 3.11    | 12.76   | 13.25   |\n\n### 13B 模型结果\n\n|                   | **CN-EN** | **CN-FR** | **CN-ES** | **CN-AR** | **CN-RU** | **CN-JP** | **CN-DE** | Average |\n|:---------------------------:|:-------:|:-------:|:---------:|:---------:|:-------:|:-------:|:-------:|:-------:|\n|          **GPT-4**          | 29.94   | 29.56   | 20.01     | 10.76     | 18.62   | 13.26   | 20.83   | 20.43   |\n|      **GPT-3.5 Turbo**      | 27.67   | 26.15   | 19.58     | 10.73     | 17.45   | 1.82    | 19.70   | 17.59   |\n|        **LLaMA-13B**        | 21.75   | 16.16   | 13.29     | 0.58      | 7.61    | 0.41    | 10.66   | 10.07   |\n|       **LLaMA2-13B**        | 25.44   | 19.25   | 17.49     | 1.38      | 10.34   | 0.13    | 11.13   | 12.17   |\n|       **Vicuna-13B**        | 22.63   | 18.04   | 14.67     | 0.70      | 9.27    | 3.59    | 10.25   | 11.31   |\n| **Chinese-Alpaca-Plus-13B** | 22.53   | 13.82   | 11.29     | 0.28      | 1.52    | 0.31    | 8.13    | 8.27    |\n|       **XVERSE-13B**        | 29.26   | 24.03   | 16.67     | 2.78      | 11.61   | 3.08    | 14.26   | 14.53   |\n|    **Baichuan-13B-Base**    | 30.24   | 20.90   | 15.92     | 0.98      | 9.65    | 2.64    | 12.00   | 13.19   |\n|    **Baichuan2-13B-Base**   | 30.61   | 22.11   | 17.27     | 2.39      | 14.17   | 11.58   | 14.53   | 16.09   |\n\n# 推理和部署\n\n推理所需的模型权重、源码、配置已发布在 Hugging Face，下载链接见本文档最开始的表格。我们在此示范多种推理方式。程序会自动从 Hugging Face 下载所需资源。\n\n## 安装依赖\n```shell\npip install -r requirements.txt\n```\n\n## Python 代码方式\n\n### Chat 模型推理方法示范\n```python\n>>> import torch\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer\n>>> from transformers.generation.utils import GenerationConfig\n>>> tokenizer = AutoTokenizer.from_pretrained(\"baichuan-inc/Baichuan2-13B-Chat\", use_fast=False, trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-13B-Chat\", device_map=\"auto\", torch_dtype=torch.bfloat16, trust_remote_code=True)\n>>> model.generation_config = GenerationConfig.from_pretrained(\"baichuan-inc/Baichuan2-13B-Chat\")\n>>> messages = []\n>>> messages.append({\"role\": \"user\", \"content\": \"解释一下“温故而知新”\"})\n>>> response = model.chat(tokenizer, messages)\n>>> print(response)\n\"温故而知新\"是一句中国古代的成语，出自《论语·为政》篇。这句话的意思是：通过回顾过去，我们可以发现新的知识和理解。换句话说，学习历史和经验可以让我们更好地理解现在和未来。\n\n这句话鼓励我们在学习和生活中不断地回顾和反思过去的经验，从而获得新的启示和成长。通过重温旧的知识和经历，我们可以发现新的观点和理解，从而更好地应对不断变化的世界和挑战。\n```\n\n### Base 模型推理方法示范\n```python\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer\n>>> tokenizer = AutoTokenizer.from_pretrained(\"baichuan-inc/Baichuan2-13B-Base\", trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-13B-Base\", device_map=\"auto\", trust_remote_code=True)\n>>> inputs = tokenizer('登鹳雀楼->王之涣\\n夜雨寄北->', return_tensors='pt')\n>>> inputs = inputs.to('cuda:0')\n>>> pred = model.generate(**inputs, max_new_tokens=64, repetition_penalty=1.1)\n>>> print(tokenizer.decode(pred.cpu()[0], skip_special_tokens=True))\n登鹳雀楼->王之涣\n夜雨寄北->李商隐\n```\n\n> 在上述两段代码中，模型加载指定 `device_map='auto'`，会使用所有可用显卡。如需指定使用的设备，可以使用类似 `export CUDA_VISIBLE_DEVICES=0,1`（使用了0、1号显卡）的方式控制。\n\n## 命令行工具方式\n\n```shell\npython cli_demo.py\n```\n本命令行工具是为 Chat 场景设计，因此我们不支持使用该工具调用 Base 模型。\n\n## 网页 demo 方式\n\n依靠 streamlit 运行以下命令，会在本地启动一个 web 服务，把控制台给出的地址放入浏览器即可访问。本网页 demo 工具是为 Chat 场景设计，因此我们不支持使用该工具调用 Base 模型。\n\n```shell\nstreamlit run web_demo.py\n```\n\n## Baichuan2-13B-Chat 示例输出\n\n<details><summary><b>代码</b></summary>\n\n`````\n用户：找到下列数组的中位数[3.1,6.2,1.3,8.4,10.5,11.6,2.1]，请用python代码完成以上功能\n\nBaichuan 2：def find_median(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        return numbers[length // 2]\nnumbers = [3.1, 6.2, 1.3, 8.4, 10.5, 11.6, 2.1]\nprint(find_median(numbers))\n`````\n\n</details>\n\n<details><summary><b>数学</b></summary>\n\n`````\n用户：鸡和兔在一个笼子里，共有26个头，68只脚，那么鸡有多少只，兔有多少只？\n\nBaichuan 2：我们可以用代数方法来解决这个问题。假设鸡的数量为x，兔子的数量为y。根据题目给出的信息，我们可以得到以下两个方程：\n\n1. x + y = 26 (头的总数)\n2. 2x + 4y = 68 (脚的总数)\n\n现在我们需要解这个二元一次方程组。首先从第一个方程中解出x：\n\nx = 26 - y\n\n然后将x的表达式代入第二个方程：\n\n2(26 - y) + 4y = 68\n52 - 2y + 4y = 68\n2y = 16\n\n接下来我们求解y的值：\n\ny = 16 / 2\ny = 8\n\n现在我们得到了兔子的数量是8只。将y的值代入x的表达式求得鸡的数量：\n\nx = 26 - 8\nx = 18\n\n所以鸡有18只，兔子有8只。\n`````\n\n</details>\n\n<details><summary><b>指令跟随</b></summary>\n\n`````\n用户：从现在开始，请你将我接下来说的每一句话翻译成英语，准备好了吗？\n\nBaichuan 2：I'm ready to translate every word you say next into English.\n\n用户：你好\n\nBaichuan 2：Hello\n\n用户：我是Baichuan 2，很高兴认识大家\n\nBaichuan 2：I am Baichuan 2, and I am very happy to meet everyone.\n\n用户：希望通过大家的共同努力，早日迎接AGI时代的到来\n\nBaichuan 2：I hope through the joint efforts of all of us, we can welcome the arrival of the AGI era as soon as possible.\n`````\n</details>\n\n<details><summary><b>解题</b></summary>\n\n`````\n用户：以下物理常识题目，哪一个是错误的?A.在自然环境下，声音在固体中传播速度最快。B.牛顿第一定律:一个物体如果不受力作用，将保持静止或匀速直线运动的状态。C.牛顿第三定律:对于每个作用力，都有一个相等而反向的反作用力。D.声音在空气中的传播速度为1000m/s。\n\nBaichuan 2：本题考查物理基本概念和原理的理解和应用能力。\nA项：声音的传播需要介质，在固体、液体和气体的三种介质中，声音在固体中的传播速度是最快的，故A正确； B项：牛顿第一定律是惯性定律，其内容是：一个物体如果没有受到外力的作用，要么保持静止状态，要么保持匀速直线运动状态，直到有外力迫使它改变运动状态为止，故B正确； C项：牛顿第三定律的内容是：对于每一个作用力，都有一个大小相等、方向相反的反作用力，这两个力分别作用在两个相互作用的物体上，故C错误； D项：声音在空气中以波的形式传播，其传播速度与介质的温度、湿度等因素有关，一般情况下，声音在空气中的传播速度约为340m/s左右，而不是1000m/s，故D错误。 因此，本题的正确答案是 D 。\n`````\n`````\n用户：I'm Mike 。I am going to have a busy weekend。On Saturday，I am going to learn how to swim。I will go with my father。Then we are going to have lunch in the restaurant。In the afternoon，we are going to the zoo。We are going to see the pandas。On Sunday，I will finish my homework in the morning。In the afternoon，my parents and I are going to visit my grandparents。We will have dinner together。\n阅读短文，判断正确和错误！正确请写T，错误请写F:\n1.Mike is going to have a busy weekend()\n2.Mike is going to learn how to swim with his father()\n3.They are going to have lunch at home()\n\nBaichuan 2：1. T（正确的）\n2. T（正确的）\n3. F（错误的）\n`````\n\n</details>\n\n## 量化部署\n\n为了让不同的用户以及不同的平台都能运行 Baichuan 2 模型，我们针对 Baichuan 2 模型做了相应地量化工作（包括 Baichuan2-7B-Chat 和 Baichuan2-13B-Chat），方便用户快速高效地在自己的平台部署 Baichuan 2 模型。\n\n### 量化方法\n\nBaichuan 2 的采用社区主流的量化方法：[BitsAndBytes](https://github.com/TimDettmers/bitsandbytes)。该方法可以保证量化后的效果基本不掉点，目前已经集成到 transformers 库里，并在社区得到了广泛应用。BitsAndBytes 支持 8bits 和 4bits 两种量化，其中 4bits 支持 FP4 和 NF4 两种格式，Baichuan 2 选用 NF4 作为 4bits 量化的数据类型。  \n  \n基于该量化方法，Baichuan 2 支持在线量化和离线量化两种模式。\n\n### 在线量化\n\n对于在线量化，我们支持 8bits 和 4bits 量化，使用方式和 [Baichuan-13B](https://huggingface.co/baichuan-inc/Baichuan-13B-Chat) 项目中的方式类似，只需要先加载模型到 CPU 的内存里，再调用`quantize()`接口量化，最后调用 `cuda()`函数，将量化后的权重拷贝到 GPU 显存中。实现整个模型加载的代码非常简单，我们以 Baichuan2-7B-Chat 为例：\n\n8bits 在线量化:\n```python\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat\", torch_dtype=torch.float16, trust_remote_code=True)\nmodel = model.quantize(8).cuda() \n```\n4bits 在线量化:\n```python\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat\", torch_dtype=torch.float16, trust_remote_code=True)\nmodel = model.quantize(4).cuda() \n```\n需要注意的是，在用 `from_pretrained` 接口的时候，用户一般会加上 `device_map=\"auto\"`，在使用在线量化时，需要去掉这个参数，否则会报错。\n\n### 离线量化\n\n为了方便用户的使用，我们提供了离线量化好的 4bits 的版本 [Baichuan2-7B-Chat-4bits](https://huggingface.co/baichuan-inc/Baichuan2-7B-Chat-4bits/tree/main)，供用户下载。\n用户加载 Baichuan2-7B-Chat-4bits 模型很简单，只需要执行:\n```python\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat-4bits\", device_map=\"auto\", trust_remote_code=True)\n```\n对于 8bits 离线量化，我们没有提供相应的版本，因为 Hugging Face transformers 库提供了相应的 API 接口，可以很方便的实现 8bits 量化模型的保存和加载。用户可以自行按照如下方式实现 8bits 的模型保存和加载：\n```python\n# Model saving: model_id is the original model directory, and quant8_saved_dir is the directory where the 8bits quantized model is saved.\nmodel = AutoModelForCausalLM.from_pretrained(model_id, load_in_8bit=True, device_map=\"auto\", trust_remote_code=True)\nmodel.save_pretrained(quant8_saved_dir)\nmodel = AutoModelForCausalLM.from_pretrained(quant8_saved_dir, device_map=\"auto\", trust_remote_code=True)\n```\n\n### 量化效果\n\n量化前后显存占用对比 (GPU Mem in GB)：\n| Precision   | Baichuan2-7B |Baichuan2-13B |\n|-------------|:------------:|:------------:|\n| bf16 / fp16 | 15.3         | 27.5         |\n| 8bits       | 8.0          | 16.1         |\n| 4bits       | 5.1          | 8.6          |\n\n量化后在各个 benchmark 上的结果和原始版本对比如下：\n\n| Model 5-shot           | C-Eval | MMLU | CMMLU |\n|------------------------|:------:|:----:|:-----:|\n| Baichuan2-13B-Chat      | 56.74  | 57.32| 59.68  |\n| Baichuan2-13B-Chat-4bits | 56.05   | 56.24 | 58.82  |\n| Baichuan2-7B-Chat       | 54.35   | 52.93 | 54.99  |\n| Baichuan2-7B-Chat-4bits | 53.04   | 51.72 | 52.84  |\n> C-Eval 是在其 val set 上进行的评测\n\n可以看到，4bits 相对 bfloat16 精度损失在 1 - 2 个百分点左右。\n\n## CPU 部署\n\nBaichuan 2 模型支持 CPU 推理，但需要强调的是，CPU 的推理速度相对较慢。需按如下方式修改模型加载的方式：\n```python\n# Taking Baichuan2-7B-Chat as an example\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat\", torch_dtype=torch.float32, trust_remote_code=True)\n```\n## 对 Baichuan 1 的推理优化迁移到 Baichuan 2\n\n由于很多用户在 Baichuan 1 (Baichuan-7B, Baichuan-13B)上做了很多优化的工作，例如编译优化、量化等，为了将这些工作零成本地应用于 Baichuan 2，用户可以对 Baichuan 2 模型做一个离线转换，转换后就可以当做 Baichuan 1 模型来使用。具体来说，用户只需要利用以下脚本离线对 Baichuan 2 模型的最后一层 lm_head 做归一化，并替换掉`lm_head.weight`即可。替换完后，就可以像对 Baichuan 1 模型一样对转换后的模型做编译优化等工作了。\n```python\nimport torch\nimport os\nori_model_dir = 'your Baichuan 2 model directory'\n# To avoid overwriting the original model, it's best to save the converted model to another directory before replacing it\nnew_model_dir = 'your normalized lm_head weight Baichuan 2 model directory'\nmodel = torch.load(os.path.join(ori_model_dir, 'pytorch_model.bin'))\nlm_head_w = model['lm_head.weight']\nlm_head_w = torch.nn.functional.normalize(lm_head_w)\nmodel['lm_head.weight'] = lm_head_w\ntorch.save(model, os.path.join(new_model_dir, 'pytorch_model.bin'))\n```\n\n# 模型微调\n\n## 依赖安装\n\n```shell\ngit clone https://github.com/baichuan-inc/Baichuan2.git\ncd Baichuan2/fine-tune\npip install -r requirements.txt\n```\n- 如需使用 LoRA 等轻量级微调方法需额外安装 [peft](https://github.com/huggingface/peft)\n- 如需使用 xFormers 进行训练加速需额外安装 [xFormers](https://github.com/facebookresearch/xformers)\n\n## 单机训练\n\n下面我们给一个微调 Baichuan2-7B-Base 的单机训练例子。\n\n训练数据：`data/belle_chat_ramdon_10k.json`，该样例数据是从 [multiturn_chat_0.8M](https://huggingface.co/datasets/BelleGroup/multiturn_chat_0.8M) 采样出 1 万条，并且做了格式转换。主要是展示多轮数据怎么训练，不保证效果。\n\n```shell\nhostfile=\"\"\ndeepspeed --hostfile=$hostfile fine-tune.py  \\\n    --report_to \"none\" \\\n    --data_path \"data/belle_chat_ramdon_10k.json\" \\\n    --model_name_or_path \"baichuan-inc/Baichuan2-7B-Base\" \\\n    --output_dir \"output\" \\\n    --model_max_length 512 \\\n    --num_train_epochs 4 \\\n    --per_device_train_batch_size 16 \\\n    --gradient_accumulation_steps 1 \\\n    --save_strategy epoch \\\n    --learning_rate 2e-5 \\\n    --lr_scheduler_type constant \\\n    --adam_beta1 0.9 \\\n    --adam_beta2 0.98 \\\n    --adam_epsilon 1e-8 \\\n    --max_grad_norm 1.0 \\\n    --weight_decay 1e-4 \\\n    --warmup_ratio 0.0 \\\n    --logging_steps 1 \\\n    --gradient_checkpointing True \\\n    --deepspeed ds_config.json \\\n    --bf16 True \\\n    --tf32 True\n```\n\n## 多机训练\n\n多机训练只需要给一下 hostfile ，内容类似如下：\n```\nip1 slots=8\nip2 slots=8\nip3 slots=8\nip4 slots=8\n....\n```\n同时在训练脚本里面指定 hosftfile 的路径：\n```shell\nhostfile=\"/path/to/hostfile\"\ndeepspeed --hostfile=$hostfile fine-tune.py  \\\n    --report_to \"none\" \\\n    --data_path \"data/belle_chat_ramdon_10k.json\" \\\n    --model_name_or_path \"baichuan-inc/Baichuan2-7B-Base\" \\\n    --output_dir \"output\" \\\n    --model_max_length 512 \\\n    --num_train_epochs 4 \\\n    --per_device_train_batch_size 16 \\\n    --gradient_accumulation_steps 1 \\\n    --save_strategy epoch \\\n    --learning_rate 2e-5 \\\n    --lr_scheduler_type constant \\\n    --adam_beta1 0.9 \\\n    --adam_beta2 0.98 \\\n    --adam_epsilon 1e-8 \\\n    --max_grad_norm 1.0 \\\n    --weight_decay 1e-4 \\\n    --warmup_ratio 0.0 \\\n    --logging_steps 1 \\\n    --gradient_checkpointing True \\\n    --deepspeed ds_config.json \\\n    --bf16 True \\\n    --tf32 True\n```\n\n## 轻量化微调\n\n代码已经支持轻量化微调如 LoRA，如需使用仅需在上面的脚本中加入以下参数：\n```shell\n--use_lora True\n```\nLoRA 具体的配置可见 `fine-tune.py` 脚本。\n\n使用 LoRA 微调后可以使用下面的命令加载模型：\n```python\nfrom peft import AutoPeftModelForCausalLM\nmodel = AutoPeftModelForCausalLM.from_pretrained(\"output\", trust_remote_code=True)\n```\n\n# 中间 Checkpoints\n\n除了训练了 2.6 万亿 Tokens 的 Baichuan2-7B-Base 模型，我们还提供了在此之前的另外 11 个中间 checkpoints（分别对应训练了约 0.2 ~ 2.4 万亿 Tokens）供社区研究使用（[下载地址](https://huggingface.co/baichuan-inc/Baichuan2-7B-Intermediate-Checkpoints)）。下图给出了这些 checkpoints 在 C-Eval、MMLU、CMMLU 三个 benchmark 上的效果变化：\n\n<div align=\"center\">\n<img src=\"https://github.com/baichuan-inc/Baichuan2/blob/main/media/checkpoints.jpeg?raw=true\" width=50% />\n</div>\n\n# 社区与生态\n\n**📢📢📢 我们会在此持续更新社区和生态对 Baichuan 2 的支持 😀😀😀**\n\n## Intel 酷睿 Ultra 平台运行百川大模型\n\n### 使用方式\n\n使用酷睿™/至强® 可扩展处理器或配合锐炫™ GPU等进行部署BaiChuan2 - 7B/Chat，BaiChuan2 - 13B/Chat模型\n\n推荐使用 BigDL-LLM（[CPU](https://github.com/intel-analytics/BigDL/tree/main/python/llm/example/CPU/HF-Transformers-AutoModels/Model/baichuan2), [GPU](https://github.com/intel-analytics/BigDL/tree/main/python/llm/example/GPU/HF-Transformers-AutoModels/Model/baichuan2)）以发挥更好推理性能。\n\n### 帮助文档\n\n[中文操作手册](https://github.com/intel-analytics/bigdl-llm-tutorial/tree/main/Chinese_Version)，包括用notebook支持\n\n[加载，优化，保存方法等](https://github.com/intel-analytics/bigdl-llm-tutorial/blob/main/Chinese_Version/ch_3_AppDev_Basic/3_BasicApp.ipynb)\n\n## 华为昇腾\n\n### Pytorch 框架\n\n模型微调：Baichuan 2 （7B）已原生支持基于昇腾 NPU 的 PyTorch（2.1.0）+ Transformers（4.36.0）+ DeepSpeed（0.12.4）+ Accelerate（0.25.0）模型微调，无需额外适配即可使用。\n\n推理部署：Baichuan 2 （7B）已原生支持昇腾 NPU 推理，无需额外适配即可使用。\n\n### MindSpore 框架\n\n[MindFormers]( https://gitee.com/mindspore/mindformers) 是一个基于昇思框架（MindSpore）并支持大模型训练、微调、评估、推理、部署的全流程开发套件，[Baichuan2-7B / 13B]( https://gitee.com/mindspore/mindformers/tree/dev/research/baichuan2) 已集成于此套件，支持用户进行模型微调、部署，具体使用方式可见 [README]( https://gitee.com/mindspore/mindformers/tree/dev/research/baichuan2/baichuan2.md)。\n\n### 大模型体验平台\n\n[昇思大模型平台](https://xihe.mindspore.cn) 基于昇思 MindSpore AI 框架、MindFormers 大模型开发套件与昇腾硬件算力，将 [Baichuan2-7B](https://xihe.mindspore.cn/modelzoo/baichuan2_7b_chat) 大模型能力开放给公众，欢迎大家在线体验。\n\n## LLaMA-Efficient-Tuning\n[LLaMA-Efficient-Tuning](https://github.com/hiyouga/LLaMA-Efficient-Tuning) 已支持对 Baichuan 2 模型的微调和继续训练。\n\n## 太初元碁\nBaichuan2（7B/13B）支持太初 T100 加速卡推理，现[试用通道](http://www.tecorigin.com/cn/developer.html)已正式对外开启。\n\n# 声明、协议、引用\n\n## 声明\n\n我们在此声明，我们的开发团队并未基于 Baichuan 2 模型开发任何应用，无论是在 iOS、Android、网页或任何其他平台。我们强烈呼吁所有使用者，不要利用 Baichuan 2 模型进行任何危害国家社会安全或违法的活动。另外，我们也要求使用者不要将 Baichuan 2 模型用于未经适当安全审查和备案的互联网服务。我们希望所有的使用者都能遵守这个原则，确保科技的发展能在规范和合法的环境下进行。\n\n我们已经尽我们所能，来确保模型训练过程中使用的数据的合规性。然而，尽管我们已经做出了巨大的努力，但由于模型和数据的复杂性，仍有可能存在一些无法预见的问题。因此，如果由于使用 Baichuan 2 开源模型而导致的任何问题，包括但不限于数据安全问题、公共舆论风险，或模型被误导、滥用、传播或不当利用所带来的任何风险和问题，我们将不承担任何责任。\n\n## 协议\n社区使用 Baichuan 2 模型需要遵循 [Apache 2.0](https://github.com/baichuan-inc/Baichuan2/blob/main/LICENSE) 和[《Baichuan 2 模型社区许可协议》](https://huggingface.co/baichuan-inc/Baichuan2-7B-Base/resolve/main/Baichuan%202%E6%A8%A1%E5%9E%8B%E7%A4%BE%E5%8C%BA%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE.pdf)。Baichuan 2 模型支持商业用途，如果您计划将 Baichuan 2 模型或其衍生品用于商业目的，请您确认您的主体符合以下情况：\n  1. 您或您的关联方的服务或产品的日均用户活跃量（DAU）低于100万。\n  2. 您或您的关联方不是软件服务提供商、云服务提供商。\n  3. 您或您的关联方不存在将授予您的商用许可，未经百川许可二次授权给其他第三方的可能。\n\n在符合以上条件的前提下，您需要通过以下联系邮箱 opensource@baichuan-inc.com ，提交《Baichuan 2 模型社区许可协议》要求的申请材料。审核通过后，百川将特此授予您一个非排他性、全球性、不可转让、不可再许可、可撤销的商用版权许可。\n\n## 引用\n如需引用我们的工作，请使用如下 reference:\n```\n@article{baichuan2023baichuan2,\n  title={Baichuan 2: Open Large-scale Language Models},\n  author={Baichuan},\n  journal={arXiv preprint arXiv:2309.10305},\n  url={https://arxiv.org/abs/2309.10305},\n  year={2023}\n}\n```\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 39.521484375,
          "content": "<!-- markdownlint-disable first-line-h1 -->\n<!-- markdownlint-disable html -->\n\n<div align=\"center\">\n<h1>\n  Baichuan 2\n</h1>\n</div>\n\n<p align=\"center\">\n🤗 <a href=\"https://huggingface.co/baichuan-inc/\" target=\"_blank\">Hugging Face</a> • 🤖 <a href=\"https://modelscope.cn/organization/baichuan-inc\" target=\"_blank\">ModelScope</a> • 💬 <a href=\"https://github.com/baichuan-inc/Baichuan-7B/blob/main/media/wechat.jpeg?raw=true\" target=\"_blank\">WeChat</a>• 🧩 <a href=\"https://modelers.cn/spaces/Baichuan/Baichuan2-7B-Chat\" target=\"_blank\">Modelers</a>\n</p>\n\n<div align=\"center\">\n\n[![license](https://img.shields.io/github/license/modelscope/modelscope.svg)](https://github.com/baichuan-inc/Baichuan2/blob/main/LICENSE)\n<h4 align=\"center\">\n    <p>\n        <b>English</b> |\n        <a href=\"https://github.com/baichuan-inc/Baichuan2/blob/main/README.md\">中文</a>\n    <p>\n</h4>\n</div>\n\n# Table of Contents\n\n- [📖 Models Introduction](#Models-Introduction)\n- [📊 Benchmark Results 🥇🥇🔥🔥](#Benchmark-Results)\n- [⚙️ Inference and Deployment](#Inference-and-Deployment)\n- [🛠️ Fine-tuning the Model](#Fine-tuning-the-Model)\n- [💾 Intermediate Checkpoints 🔥🔥](#Intermediate-Checkpoints)\n- [👥 Community and Ecosystem](#Community-and-Ecosystem)\n- [📜 Disclaimer, License and Citation](#Disclaimer-License-and-Citation)\n\n# Update\n[2023.12.29] 🎉🎉🎉 We have released **[Baichuan2-13B-Chat v2](https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat/tree/v2.0)** version. In this version:\n- Significantly improved the model's overall capabilities, especially in mathematics and logical reasoning, and complex instruction following.\n\n# Models Introduction\n\n- Baichuan 2 is the new generation of open-source large language models launched by Baichuan Intelligent Technology. It was trained on a high-quality corpus with **2.6 trillion** tokens.\n- Baichuan 2 achieved the best performance of its size on multiple authoritative Chinese, English, and multi-language general and domain-specific benchmarks.\n- This release includes **Base** and **Chat** versions for **7B** and **13B**, and a **4bits quantized** version for the Chat model.\n- All versions are fully open to academic research. Developers only need to apply via email and obtain official commercial permission to use it for free commercially.\n- For more information, welcome reading our technical report [Baichuan 2: Open Large-scale Language Models](https://arxiv.org/abs/2309.10305).\n\nThe specific released versions and download links are shown in the table below:\n\n|         | Base Models  | Aligned Models | Aligned Models 4bits Quantized |\n|:-------:|:-----------:|:-------------:|:-----------------------------:|\n| 7B      | 🤗 [Baichuan2-7B-Base](https://huggingface.co/baichuan-inc/Baichuan2-7B-Base) | 🤗 [Baichuan2-7B-Chat](https://huggingface.co/baichuan-inc/Baichuan2-7B-Chat) | 🤗 [Baichuan2-7B-Chat-4bits](https://huggingface.co/baichuan-inc/Baichuan2-7B-Chat-4bits) |\n| 13B     | 🤗 [Baichuan2-13B-Base](https://huggingface.co/baichuan-inc/Baichuan2-13B-Base) | 🤗 [Baichuan2-13B-Chat](https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat) | 🤗 [Baichuan2-13B-Chat-4bits](https://huggingface.co/baichuan-inc/Baichuan2-13B-Chat-4bits) |\n\n# Benchmark Results\n\nWe conducted extensive testing on authoritative Chinese, English and multi-language datasets across six domains: [general](#General-Domain), [legal](#Law-and-Medicine), [medical](#Law-and-Medicine), [mathematics](#Mathematics-and-Code), [code](#Mathematics-and-Code), and [multi-language translation](#Multilingual-Translation).\n\n## General Domain\n\nIn the general domain, we conducted 5-shot tests on the following datasets:\n- [C-Eval](https://cevalbenchmark.com/index.html#home) is a comprehensive Chinese basic model evaluation dataset, covering 52 disciplines and four levels of difficulty. We used the dev set of this dataset as the source for few-shot learning and tested on the test set. Our evaluation approach followed that of [Baichuan-7B](https://github.com/baichuan-inc/Baichuan-7B/tree/main).\n- [MMLU](https://arxiv.org/abs/2009.03300) is an English evaluation dataset comprising 57 tasks, encompassing elementary math, American history, computer science, law, etc. The difficulty ranges from high school level to expert level. It's a mainstream LLM evaluation dataset. We used its [open-source](https://github.com/hendrycks/test) evaluation approach.\n- [CMMLU](https://github.com/haonan-li/CMMLU) is a comprehensive Chinese evaluation benchmark covering 67 topics, specifically designed to assess language models' knowledge and reasoning capabilities in a Chinese context. We adopted its [official](https://github.com/haonan-li/CMMLU) evaluation approach.\n- [Gaokao](https://github.com/OpenLMLab/GAOKAO-Bench) is a dataset utilizing China's college entrance examination questions to evaluate large language models' abilities, focusing on linguistic proficiency and logical reasoning. We retained only its single-choice questions and conducted random partitioning. Our evaluation method is similar to that of C-Eval.\n- [AGIEval](https://github.com/microsoft/AGIEval) aims to evaluate a model's general abilities in cognition and problem-solving related tasks. We retained only its four-option single-choice questions and did random partitioning. We used an evaluation scheme similar to C-Eval.\n- [BBH](https://huggingface.co/datasets/lukaemon/bbh) is a challenging task subset of Big-Bench. Big-Bench currently includes 204 tasks. Task themes involve linguistics, child development, mathematics, common sense reasoning, biology, physics, societal biases, software development, etc. BBH consists of benchmark tasks extracted from the 204 Big-Bench tasks in which large models did not perform well.\n\n### 7B Model Results\n\n|                       | **C-Eval** | **MMLU** | **CMMLU** | **Gaokao** | **AGIEval** | **BBH** |\n|:---------------------:|:----------:|:--------:|:---------:|:----------:|:-----------:|:-------:|\n|                       |  5-shot    |  5-shot  |  5-shot   | 5-shot     | 5-shot      | 3-shot  |\n| **GPT-4**             | 68.40      | 83.93    | 70.33     | 66.15      | 63.27       | 75.12   |\n| **GPT-3.5 Turbo**     | 51.10      | 68.54    | 54.06     | 47.07      | 46.13       | 61.59   |\n| **LLaMA-7B**          | 27.10      | 35.10    | 26.75     | 27.81      | 28.17       | 32.38   |\n| **LLaMA2-7B**         | 28.90      | 45.73    | 31.38     | 25.97      | 26.53       | 39.16   |\n| **MPT-7B**            | 27.15      | 27.93    | 26.00     | 26.54      | 24.83       | 35.20   |\n| **Falcon-7B**         | 24.23      | 26.03    | 25.66     | 24.24      | 24.10       | 28.77   |\n| **ChatGLM2-6B**       | 50.20      | 45.90    | 49.00     | 49.44      | 45.28       | 31.65   |\n| **Baichuan-7B**       | 42.80      | 42.30    | 44.02     | 36.34      | 34.44       | 32.48   |\n| **Baichuan2-7B-Base** | 54.00      | 54.16    | 57.07     | 47.47      | 42.73       | 41.56   |\n\n### 13B Model Results\n\n|                             | **C-Eval** | **MMLU** | **CMMLU** | **Gaokao** | **AGIEval** | **BBH** |\n|:---------------------------:|:----------:|:--------:|:---------:|:----------:|:-----------:|:-------:|\n|                             |  5-shot    |  5-shot  |  5-shot   | 5-shot     | 5-shot      | 3-shot  |\n| **GPT-4**                   | 68.40      | 83.93    | 70.33     | 66.15      | 63.27       | 75.12   |\n| **GPT-3.5 Turbo**           | 51.10      | 68.54    | 54.06     | 47.07      | 46.13       | 61.59   |\n| **LLaMA-13B**               | 28.50      | 46.30    | 31.15     | 28.23      | 28.22       | 37.89   |\n| **LLaMA2-13B**              | 35.80      | 55.09    | 37.99     | 30.83      | 32.29       | 46.98   |\n| **Vicuna-13B**              | 32.80      | 52.00    | 36.28     | 30.11      | 31.55       | 43.04   |\n| **Chinese-Alpaca-Plus-13B** | 38.80      | 43.90    | 33.43     | 34.78      | 35.46       | 28.94   |\n| **XVERSE-13B**              | 53.70      | 55.21    | 58.44     | 44.69      | 42.54       | 38.06   |\n| **Baichuan-13B-Base**       | 52.40      | 51.60    | 55.30     | 49.69      | 43.20       | 43.01   |\n| **Baichuan2-13B-Base**      | 58.10      | 59.17    | 61.97     | 54.33      | 48.17       | 48.78   |\n\n\n## Law and Medicine\n\nIn the legal domain, we used the [JEC-QA](https://jecqa.thunlp.org/) dataset. The JEC-QA dataset originates from China's National Judicial Examination. We retained only the multiple-choice questions from it. Our evaluation method was similar to that of C-Eval.\n\nIn the medical domain, we used medical-related subjects from general domain datasets (C-Eval, MMLU, CMMLU), as well as [MedQA](https://arxiv.org/abs/2009.13081) and [MedMCQA](https://medmcqa.github.io/). We followed an evaluation scheme similar to C-Eval.\n- For testing convenience, we used the val set from C-Eval for testing.\n- The MedQA dataset comes from medical exams in the US and China. We tested the USMLE and MCMLE subsets from the [MedQA dataset](https://huggingface.co/datasets/bigbio/med_qa), and used a version with five candidates.\n- The MedMCQA dataset originates from entrance exams of medical colleges in India. We retained only the multiple-choice questions. Since the test set doesn't have answers, we used the dev set for testing.\n- Medical-related subjects included in the general domain datasets are as follows:\n    - C-Eval: clinical_medicine, basic_medicine\n    - MMLU: clinical_knowledge, anatomy, college_medicine, college_biology, nutrition, virology, medical_genetics, professional_medicine\n    - CMMLU: anatomy, clinical_knowledge, college_medicine, genetics, nutrition, traditional_chinese_medicine, virology \n\nWe conducted 5-shot tests on the above datasets.\n\n### 7B Model Results\n\n|                       | **JEC-QA** | **CEval-MMLU-CMMLU** | **MedQA-USMLE** | **MedQA-MCMLE** | **MedMCQA** |\n|:---------------------:|:----------:|:--------------------:|:---------------:|:---------------:|:-----------:|\n|                       | 5-shot     | 5-shot               | 5-shot          | 5-shot          | 5-shot      |\n| **GPT-4**             | 59.32      | 77.16                | 80.28           | 74.58           | 72.51       |\n| **GPT-3.5 Turbo**     | 42.31      | 61.17                | 53.81           | 52.92           | 56.25       |\n| **LLaMA-7B**          | 27.45      | 33.34                | 24.12           | 21.72           | 27.45       |\n| **LLaMA2-7B**         | 29.20      | 36.75                | 27.49           | 24.78           | 37.93       |\n| **MPT-7B**            | 27.45      | 26.67                | 16.97           | 19.79           | 31.96       |\n| **Falcon-7B**         | 23.66      | 25.33                | 21.29           | 18.07           | 33.88       |\n| **ChatGLM2-6B**       | 40.76      | 44.54                | 26.24           | 45.53           | 30.22       |\n| **Baichuan-7B**       | 34.64      | 42.37                | 27.42           | 39.46           | 31.39       |\n| **Baichuan2-7B-Base** | 44.46      | 56.39                | 32.68           | 54.93           | 41.73       |\n\n### 13B Model Results\n\n|                             | **JEC-QA** | **CEval-MMLU-CMMLU** | **MedQA-USMLE** | **MedQA-MCMLE** | **MedMCQA** |\n|:---------------------------:|:----------:|:--------------------:|:---------------:|:---------------:|:-----------:|\n|                             | 5-shot     | 5-shot               | 5-shot          | 5-shot          | 5-shot      |\n| **GPT-4**                   | 59.32      | 77.16                | 80.28           | 74.58           | 72.51       |\n| **GPT-3.5 Turbo**           | 42.31      | 61.17                | 53.81           | 52.92           | 56.25       |\n| **LLaMA-13B**               | 27.54      | 35.14                | 28.83           | 23.38           | 39.52       |\n| **LLaMA2-13B**              | 34.08      | 47.42                | 35.04           | 29.74           | 42.12       |\n| **Vicuna-13B**              | 28.38      | 40.99                | 34.80           | 27.67           | 40.66       |\n| **Chinese-Alpaca-Plus-13B** | 35.32      | 46.31                | 27.49           | 32.66           | 35.87       |\n| **XVERSE-13B**              | 46.42      | 58.08                | 32.99           | 58.76           | 41.34       |\n| **Baichuan-13B-Base**       | 41.34      | 51.77                | 29.07           | 43.67           | 39.60       |\n| **Baichuan2-13B-Base**      | 47.40      | 59.33                | 40.38           | 61.62           | 42.86       |\n\n## Mathematics and Code\n\nIn the mathematics domain, we used the [OpenCompass](https://opencompass.org.cn/) evaluation framework and conducted 4-shot tests on the [GSM8K](https://huggingface.co/datasets/gsm8k) and [MATH](https://huggingface.co/datasets/competition_math) datasets.\n\n- GSM8K is a dataset released by OpenAI, consisting of 8.5K high-quality linguistically diverse elementary school math application questions. It requires selecting the most reasonable solution based on a given scenario and two possible solutions.\n- The MATH dataset contains 12,500 math problems (of which 7,500 belong to the training set and 5,000 to the test set). These problems are collected from math competitions like AMC 10, AMC 12, AIME.\n\nFor the code domain, we used the [HumanEval](https://huggingface.co/datasets/openai_humaneval) and [MBPP](https://huggingface.co/datasets/mbpp) datasets. Using OpenCompass, we performed a 0-shot test on HumanEval and a 3-shot test on the MBPP dataset.\n- Tasks in HumanEval include programming tasks encompassing language understanding, reasoning, algorithms, and basic math to evaluate the functional correctness of models and measure their problem-solving capability.\n- MBPP consists of a dataset with 974 Python short functions, textual descriptions of programs, and test cases to check their functional correctness.\n\n### 7B Model Results\n\n|                       | **GSM8K** | **MATH** | **HumanEval** | **MBPP** |\n|:---------------------:|:---------:|:--------:|:-------------:|:--------:|\n|                       |  4-shot   | 4-shot   |  0-shot       |  3-shot  |\n| **GPT-4**             |   89.99   | 40.20    | 69.51         |  63.60   |\n| **GPT-3.5 Turbo**     |   57.77   | 13.96    | 52.44         |  61.40   |\n| **LLaMA-7B**          |   9.78    | 3.02     | 11.59         |  14.00   |\n| **LLaMA2-7B**         |   16.22   | 3.24     | 12.80         |  14.80   |\n| **MPT-7B**            |   8.64    | 2.90     | 14.02         |  23.40   |\n| **Falcon-7B**         |   5.46    | 1.68     | -             |  10.20   |\n| **ChatGLM2-6B**       |   28.89   | 6.40     | 9.15          |   9.00   |\n| **Baichuan-7B**       |   9.17    | 2.54     | 9.20          |   6.60   |\n| **Baichuan2-7B-Base** |   24.49   | 5.58     | 18.29         |  24.20   |\n\n### 13B Model Results\n\n|                             | **GSM8K** | **MATH** | **HumanEval** | **MBPP** |\n|:---------------------------:|:---------:|:--------:|:-------------:|:--------:|\n|                             |  4-shot   | 4-shot   |  0-shot       |  3-shot  |\n| **GPT-4**                   |   89.99   | 40.20    | 69.51         |  63.60   |\n| **GPT-3.5 Turbo**           |   57.77   | 13.96    | 52.44         |  61.40   |\n| **LLaMA-13B**               |   20.55   | 3.68     | 15.24         |  21.40   |\n| **LLaMA2-13B**              |   28.89   | 4.96     | 15.24         |  27.00   |\n| **Vicuna-13B**              |   28.13   | 4.36     | 16.46         |  15.00   |\n| **Chinese-Alpaca-Plus-13B** |   11.98   | 2.50     | 16.46         |  20.00   |\n| **XVERSE-13B**              |   18.20   | 2.18     | 15.85         |  16.80   |\n| **Baichuan-13B-Base**       |   26.76   | 4.84     | 11.59         |  22.80   |\n| **Baichuan2-13B-Base**      |   52.77   | 10.08    | 17.07         |  30.20   |\n\n## Multilingual Translation\n\nWe used the [Flores-101](https://huggingface.co/datasets/facebook/flores) dataset to evaluate the multilingual capability of the models. Flores-101 covers 101 languages from around the world. Its data comes from various domains including news, travel guides, and books. We chose the official languages of the United Nations (Arabic, Chinese, English, French, Russian, and Spanish) as well as German and Japanese for testing. Using OpenCompass, we performed 8-shot tests on seven sub-tasks within Flores-101: Chinese-English, Chinese-French, Chinese-Spanish, Chinese-Arabic, Chinese-Russian, Chinese-Japanese, and Chinese-German.\n\n### 7B Model Results\n\n|             | **CN-EN** | **CN-FR** | **CN-ES** | **CN-AR** | **CN-RU** | **CN-JP** | **CN-DE** | Average |\n|:---------------------:|:-------:|:-------:|:---------:|:---------:|:-------:|:-------:|:-------:|:-------:|\n| **GPT-4**             | 29.94   | 29.56   | 20.01     | 10.76     | 18.62   | 13.26   | 20.83   | 20.43   |\n| **GPT-3.5 Turbo**     | 27.67   | 26.15   | 19.58     | 10.73     | 17.45   | 1.82    | 19.70   | 17.59   |\n| **LLaMA-7B**          | 17.27   | 12.02   | 9.54      | 0.00      | 4.47    | 1.41    | 8.73    | 7.63    |\n| **LLaMA2-7B**         | 25.76   | 15.14   | 11.92     | 0.79      | 4.99    | 2.20    | 10.15   | 10.14   |\n| **MPT-7B**            | 20.77   | 9.53    | 8.96      | 0.10      | 3.54    | 2.91    | 6.54    | 7.48    |\n| **Falcon-7B**         | 22.13   | 15.67   | 9.28      | 0.11      | 1.35    | 0.41    | 6.41    | 7.91    |\n| **ChatGLM2-6B**       | 22.28   | 9.42    | 7.77      | 0.64      | 1.78    | 0.26    | 4.61    | 6.68    |\n| **Baichuan-7B**       | 25.07   | 16.51   | 12.72     | 0.41      | 6.66    | 2.24    | 9.86    | 10.50   |\n| **Baichuan2-7B-Base** | 27.27   | 20.87   | 16.17     | 1.39      | 11.21   | 3.11    | 12.76   | 13.25   |\n\n### 13B Model Results\n\n|                   | **CN-EN** | **CN-FR** | **CN-ES** | **CN-AR** | **CN-RU** | **CN-JP** | **CN-DE** | Average |\n|:---------------------------:|:-------:|:-------:|:---------:|:---------:|:-------:|:-------:|:-------:|:-------:|\n|          **GPT-4**          | 29.94   | 29.56   | 20.01     | 10.76     | 18.62   | 13.26   | 20.83   | 20.43   |\n|      **GPT-3.5 Turbo**      | 27.67   | 26.15   | 19.58     | 10.73     | 17.45   | 1.82    | 19.70   | 17.59   |\n|        **LLaMA-13B**        | 21.75   | 16.16   | 13.29     | 0.58      | 7.61    | 0.41    | 10.66   | 10.07   |\n|       **LLaMA2-13B**        | 25.44   | 19.25   | 17.49     | 1.38      | 10.34   | 0.13    | 11.13   | 12.17   |\n|       **Vicuna-13B**        | 22.63   | 18.04   | 14.67     | 0.70      | 9.27    | 3.59    | 10.25   | 11.31   |\n| **Chinese-Alpaca-Plus-13B** | 22.53   | 13.82   | 11.29     | 0.28      | 1.52    | 0.31    | 8.13    | 8.27    |\n|       **XVERSE-13B**        | 29.26   | 24.03   | 16.67     | 2.78      | 11.61   | 3.08    | 14.26   | 14.53   |\n|    **Baichuan-13B-Base**    | 30.24   | 20.90   | 15.92     | 0.98      | 9.65    | 2.64    | 12.00   | 13.19   |\n|    **Baichuan2-13B-Base**   | 30.61   | 22.11   | 17.27     | 2.39      | 14.17   | 11.58   | 14.53   | 16.09   |\n\n# Inference and Deployment\n\nThe model weights, source code, and configuration needed for inference have been released on Hugging Face. Download links can be found in the table at the beginning of this document. Below, we demonstrate various inference methods using Baichuan2-13B-Chat as an example. The program will automatically download the required resources from Hugging Face.\n\n## Dependency Installation\n\n```shell\npip install -r requirements.txt\n```\n\n## Python Code Inference\n\n### Demonstration of Chat Model Inference\n\n```python\n>>> import torch\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer\n>>> from transformers.generation.utils import GenerationConfig\n>>> tokenizer = AutoTokenizer.from_pretrained(\"baichuan-inc/Baichuan2-13B-Chat\", use_fast=False, trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-13B-Chat\", device_map=\"auto\", torch_dtype=torch.bfloat16, trust_remote_code=True)\n>>> model.generation_config = GenerationConfig.from_pretrained(\"baichuan-inc/Baichuan2-13B-Chat\")\n>>> messages = []\n>>> messages.append({\"role\": \"user\", \"content\": \"解释一下“温故而知新”\"})\n>>> response = model.chat(tokenizer, messages)\n>>> print(response)\n\"温故而知新\"是一句中国古代的成语，出自《论语·为政》篇。这句话的意思是：通过回顾过去，我们可以发现新的知识和理解。换句话说，学习历史和经验可以让我们更好地理解现在和未来。\n\n这句话鼓励我们在学习和生活中不断地回顾和反思过去的经验，从而获得新的启示和成长。通过重温旧的知识和经历，我们可以发现新的观点和理解，从而更好地应对不断变化的世界和挑战。\n```\n\n### Demonstration of Base Model Inference\n\n```python\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer\n>>> tokenizer = AutoTokenizer.from_pretrained(\"baichuan-inc/Baichuan2-13B-Base\", trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-13B-Base\", device_map=\"auto\", trust_remote_code=True)\n>>> inputs = tokenizer('登鹳雀楼->王之涣\\n夜雨寄北->', return_tensors='pt')\n>>> inputs = inputs.to('cuda:0')\n>>> pred = model.generate(**inputs, max_new_tokens=64, repetition_penalty=1.1)\n>>> print(tokenizer.decode(pred.cpu()[0], skip_special_tokens=True))\n登鹳雀楼->王之涣\n夜雨寄北->李商隐\n```\n\n> In the above code snippets, the model loading specifies `device_map='auto'`, which will use all available GPUs. If you need to specify the device(s) to use, you can control it in a way similar to `export CUDA_VISIBLE_DEVICES=0,1` (using the 0 and 1 graphics cards).\n\n## Command Line Tool Inference\n\n```shell\npython cli_demo.py\n```\nWe do not support using this tool for Base Model because it is designed for Chat scenario.\n\n## Web Demo Inference\n\nRun the following command using streamlit. It will start a web service locally. You can access it by entering the address provided in the console into your browser. We do not support using this tool for Base Model because it is designed for Chat scenario.\n\n```shell\nstreamlit run web_demo.py\n```\n\n## Demo Results of Baichuan2-13B-Chat\n\n<details><summary><b>Coding</b></summary>\n\n`````\n用户：找到下列数组的中位数[3.1,6.2,1.3,8.4,10.5,11.6,2.1]，请用python代码完成以上功能\n\nBaichuan 2：def find_median(numbers):\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        return (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        return numbers[length // 2]\nnumbers = [3.1, 6.2, 1.3, 8.4, 10.5, 11.6, 2.1]\nprint(find_median(numbers))\n`````\n\n</details>\n\n<details><summary><b>Math</b></summary>\n\n`````\n用户：鸡和兔在一个笼子里，共有26个头，68只脚，那么鸡有多少只，兔有多少只？\n\nBaichuan 2：我们可以用代数方法来解决这个问题。假设鸡的数量为x，兔子的数量为y。根据题目给出的信息，我们可以得到以下两个方程：\n\n1. x + y = 26 (头的总数)\n2. 2x + 4y = 68 (脚的总数)\n\n现在我们需要解这个二元一次方程组。首先从第一个方程中解出x：\n\nx = 26 - y\n\n然后将x的表达式代入第二个方程：\n\n2(26 - y) + 4y = 68\n52 - 2y + 4y = 68\n2y = 16\n\n接下来我们求解y的值：\n\ny = 16 / 2\ny = 8\n\n现在我们得到了兔子的数量是8只。将y的值代入x的表达式求得鸡的数量：\n\nx = 26 - 8\nx = 18\n\n所以鸡有18只，兔子有8只。\n`````\n\n</details>\n\n<details><summary><b>Instruction Following</b></summary>\n\n`````\n用户：从现在开始，请你将我接下来说的每一句话翻译成英语，准备好了吗？\n\nBaichuan 2：I'm ready to translate every word you say next into English.\n\n用户：你好\n\nBaichuan 2：Hello\n\n用户：我是Baichuan 2，很高兴认识大家\n\nBaichuan 2：I am Baichuan 2, and I am very happy to meet everyone.\n\n用户：希望通过大家的共同努力，早日迎接AGI时代的到来\n\nBaichuan 2：I hope through the joint efforts of all of us, we can welcome the arrival of the AGI era as soon as possible.\n`````\n</details>\n\n<details><summary><b>Solving Quizzes</b></summary>\n\n`````\n用户：以下物理常识题目，哪一个是错误的?A.在自然环境下，声音在固体中传播速度最快。B.牛顿第一定律:一个物体如果不受力作用，将保持静止或匀速直线运动的状态。C.牛顿第三定律:对于每个作用力，都有一个相等而反向的反作用力。D.声音在空气中的传播速度为1000m/s。\n\nBaichuan 2：本题考查物理基本概念和原理的理解和应用能力。\nA项：声音的传播需要介质，在固体、液体和气体的三种介质中，声音在固体中的传播速度是最快的，故A正确； B项：牛顿第一定律是惯性定律，其内容是：一个物体如果没有受到外力的作用，要么保持静止状态，要么保持匀速直线运动状态，直到有外力迫使它改变运动状态为止，故B正确； C项：牛顿第三定律的内容是：对于每一个作用力，都有一个大小相等、方向相反的反作用力，这两个力分别作用在两个相互作用的物体上，故C错误； D项：声音在空气中以波的形式传播，其传播速度与介质的温度、湿度等因素有关，一般情况下，声音在空气中的传播速度约为340m/s左右，而不是1000m/s，故D错误。 因此，本题的正确答案是 D 。\n`````\n`````\n用户：I'm Mike 。I am going to have a busy weekend。On Saturday，I am going to learn how to swim。I will go with my father。Then we are going to have lunch in the restaurant。In the afternoon，we are going to the zoo。We are going to see the pandas。On Sunday，I will finish my homework in the morning。In the afternoon，my parents and I are going to visit my grandparents。We will have dinner together。\n阅读短文，判断正确和错误！正确请写T，错误请写F:\n1.Mike is going to have a busy weekend()\n2.Mike is going to learn how to swim with his father()\n3.They are going to have lunch at home()\n\nBaichuan 2：1. T（正确的）\n2. T（正确的）\n3. F（错误的）\n`````\n\n</details>\n\n## Quantization Deployment\n\nTo allow different users and platforms to run the Baichuan 2 model, we have carried out quantization for the Baichuan 2 model (including Baichuan2-7B-Chat and Baichuan2-13B-Chat). This facilitates users to quickly and efficiently deploy the Baichuan 2 model on their respective platforms.\n\n### Quantization Method\n\nBaichuan 2 utilizes the widely-adopted community quantization method: the [BitsAndBytes](https://github.com/TimDettmers/bitsandbytes) method. This method ensures that the performance remains largely unchanged after quantization. It has now been integrated into the transformers library and is widely used in the community. BitsAndBytes supports both 4bits and 8bits quantization. Within the 4bits option, it provides FP4 and NF4 formats, with Baichuan 2 selecting NF4 as its 4bits quantization data type.\n\nBased on this quantization method, Baichuan 2 supports both online and offline quantization modes.\n\n### Online Quantization\n\nFor online quantization, we support both 8bits and 4bits. The usage is similar to the method described in the [Baichuan-13B](https://huggingface.co/baichuan-inc/Baichuan-13B-Chat) project. One simply needs to first load the model into the CPU memory, then invoke the `quantize()` method, and finally call the `cuda()` function to copy the quantized weights to the GPU memory. The code for loading the entire model is straightforward. Let's take Baichuan2-7B-Chat as an example:\n\n8bits online quantization:\n```python\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat\", torch_dtype=torch.float16, trust_remote_code=True)\nmodel = model.quantize(8).cuda() \n```\n4bits online quantization:\n```python\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat\", torch_dtype=torch.float16, trust_remote_code=True)\nmodel = model.quantize(4).cuda() \n```\nIt's worth noting that when using the `from_pretrained` interface, users typically add `device_map=\"auto\"`. However, when using online quantization, this parameter should be removed; otherwise, an error will occur.\n\n### Offline Quantization\n\nTo facilitate user adoption, we offer a pre-quantized 4bits version: [Baichuan2-7B-Chat-4bits](https://huggingface.co/baichuan-inc/Baichuan2-7B-Chat-4bits/tree/main) for download. \nLoading the Baichuan2-7B-Chat-4bits model is straightforward, just execute:\n```python\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat-4bits\", device_map=\"auto\", trust_remote_code=True)\n```\nFor 8bits offline quantization, we haven't provided a corresponding version since the Hugging Face transformers library offers the necessary API interfaces. This makes the saving and loading of 8bits quantized models very convenient. Users can implement the saving and loading of 8bits models in the following manner:\n```python\n# Model saving: model_id is the original model directory, and quant8_saved_dir is the directory where the 8bits quantized model is saved.\nmodel = AutoModelForCausalLM.from_pretrained(model_id, load_in_8bit=True, device_map=\"auto\", trust_remote_code=True)\nmodel.save_pretrained(quant8_saved_dir)\nmodel = AutoModelForCausalLM.from_pretrained(quant8_saved_dir, device_map=\"auto\", trust_remote_code=True)\n```\n\n### Quantization Effect\n\nComparison of memory usage before and after quantization (GPU Mem in GB):\n| Precision   | Baichuan2-7B |Baichuan2-13B |\n|-------------|:------------:|:------------:|\n| bf16 / fp16 | 14.0         | 25.9         |\n| 8bits       | 8.0          | 14.2         |\n| 4bits       | 5.1          | 8.6          |\n\nThe results on various benchmarks after quantization compared to the original version are as follows:\n\n| Model 5-shot           | C-Eval | MMLU | CMMLU |\n|------------------------|:------:|:----:|:-----:|\n| Baichuan2-13B-Chat      | 56.74  | 57.32| 59.68  |\n| Baichuan2-13B-Chat-4bits | 56.05   | 56.24 | 58.82  |\n| Baichuan2-7B-Chat       | 54.35   | 52.93 | 54.99  |\n| Baichuan2-7B-Chat-4bits | 53.04   | 51.72 | 52.84  |\n> C-Eval is tested on val set\n\nIt can be seen that the 4bits, compared to bfloat16, has a drop of around 1 ~ 2 percentage points.\n\n## CPU Deployment\n\nBaichuan-13B supports CPU inference, but it should be emphasized that the inference speed on CPU will be very slow. Modify the model loading logic as follows:\n```python\n# Taking BVaichuan2-7B-Chat as an example\nmodel = AutoModelForCausalLM.from_pretrained(\"baichuan-inc/Baichuan2-7B-Chat\", torch_dtype=torch.float32, trust_remote_code=True)\n```\n\n## Migrating Inference Optimizations from Baichuan 1 to Baichuan 2\n\nGiven that many users have made various optimizations on Baichuan 1 (Baichuan-7B, Baichuan-13B), such as compilation optimizations, quantization, etc., to seamlessly apply these enhancements to Baichuan 2, users can perform an offline conversion on the Baichuan 2 model. After this conversion, it can be treated as a Baichuan 1 model. Specifically, users only need to use the script below to offline normalize the last `lm_head` layer of the Baichuan 2 model and replace the \"lm_head.weight\". Once replaced, optimizations such as compilation can be applied to the converted model just like with the Baichuan 1 model.\n```python\nimport torch\nimport os\nori_model_dir = 'your Baichuan 2 model directory'\n# To avoid overwriting the original model, it's best to save the converted model to another directory before replacing it\nnew_model_dir = 'your normalized lm_head weight Baichuan 2 model directory'\nmodel = torch.load(os.path.join(ori_model_dir, 'pytorch_model.bin'))\nlm_head_w = model['lm_head.weight']\nlm_head_w = torch.nn.functional.normalize(lm_head_w)\nmodel['lm_head.weight'] = lm_head_w\ntorch.save(model, os.path.join(new_model_dir, 'pytorch_model.bin'))\n```\n\n# Fine-tuning the Model\n\n## Dependency Installation\n\n```shell\ngit clone https://github.com/baichuan-inc/Baichuan2.git\ncd Baichuan2/fine-tune\npip install -r requirements.txt\n```\n- To use lightweight fine-tuning methods like LoRA, you must additionally install [peft](https://github.com/huggingface/peft).\n- To accelerate training with xFormers, you must additionally install [xFormers](https://github.com/facebookresearch/xformers).\n\n## Single Machine Training\n\nBelow, we provide an example of fine-tuning the Baichuan2-7B-Base on a single machine.\n\nTraining Data: `data/belle_chat_ramdon_10k.json`. This sample data was drawn from [multiturn_chat_0.8M](https://huggingface.co/datasets/BelleGroup/multiturn_chat_0.8M), consisting of a selection of 10,000 entries, and has been reformatted. The main purpose is to demonstrate how to train with multi-turn data, and effectiveness is not guaranteed.\n\n```shell\nhostfile=\"\"\ndeepspeed --hostfile=$hostfile fine-tune.py  \\\n    --report_to \"none\" \\\n    --data_path \"data/belle_chat_ramdon_10k.json\" \\\n    --model_name_or_path \"baichuan-inc/Baichuan2-7B-Base\" \\\n    --output_dir \"output\" \\\n    --model_max_length 512 \\\n    --num_train_epochs 4 \\\n    --per_device_train_batch_size 16 \\\n    --gradient_accumulation_steps 1 \\\n    --save_strategy epoch \\\n    --learning_rate 2e-5 \\\n    --lr_scheduler_type constant \\\n    --adam_beta1 0.9 \\\n    --adam_beta2 0.98 \\\n    --adam_epsilon 1e-8 \\\n    --max_grad_norm 1.0 \\\n    --weight_decay 1e-4 \\\n    --warmup_ratio 0.0 \\\n    --logging_steps 1 \\\n    --gradient_checkpointing True \\\n    --deepspeed ds_config.json \\\n    --bf16 True \\\n    --tf32 True\n```\n\n## Multi-machine Training\n\nFor multi-machine training, you only need to provide the hostfile, the content of which is similar to follows:\n```\nip1 slots=8\nip2 slots=8\nip3 slots=8\nip4 slots=8\n....\n```\n\nAt the same time, specify the path of the hostfile in the training script:\n```shell\nhostfile=\"/path/to/hostfile\"\ndeepspeed --hostfile=$hostfile fine-tune.py  \\\n    --report_to \"none\" \\\n    --data_path \"data/belle_chat_ramdon_10k.json\" \\\n    --model_name_or_path \"baichuan-inc/Baichuan2-7B-Base\" \\\n    --output_dir \"output\" \\\n    --model_max_length 512 \\\n    --num_train_epochs 4 \\\n    --per_device_train_batch_size 16 \\\n    --gradient_accumulation_steps 1 \\\n    --save_strategy epoch \\\n    --learning_rate 2e-5 \\\n    --lr_scheduler_type constant \\\n    --adam_beta1 0.9 \\\n    --adam_beta2 0.98 \\\n    --adam_epsilon 1e-8 \\\n    --max_grad_norm 1.0 \\\n    --weight_decay 1e-4 \\\n    --warmup_ratio 0.0 \\\n    --logging_steps 1 \\\n    --gradient_checkpointing True \\\n    --deepspeed ds_config.json \\\n    --bf16 True \\\n    --tf32 True\n```\n\n## Lightweight Fine-tuning\n\nThe code already supports lightweight fine-tuning such as LoRA. If you need to use it, simply add the following parameters to the script mentioned above.\n```shell\n--use_lora True\n```\nSpecific configurations for LoRA can be found in the fine-tune.py script.\n\nAfter fine-tuning with LoRA, you can load the model using the command below:\n```python\nfrom peft import AutoPeftModelForCausalLM\nmodel = AutoPeftModelForCausalLM.from_pretrained(\"output\", trust_remote_code=True)\n```\n\n# Intermediate Checkpoints\n\nIn addition to the Baichuan2-7B-Base model with 2.6 trillion tokens, we also provide 11 intermediate checkpoints (ranging approximately from 0.2 to 2.4 trillion tokens) from before this for community research ([Download link](https://huggingface.co/baichuan-inc/Baichuan2-7B-Intermediate-Checkpoints)). The chart below shows the performance changes of these checkpoints on the C-Eval, MMLU, and CMMLU benchmarks:\n\n<div align=\"center\">\n<img src=\"https://github.com/baichuan-inc/Baichuan2/blob/main/media/checkpoints.jpeg?raw=true\" width=50% />\n</div>\n\n# Community and Ecosystem\n\n**📢📢📢 We will continuously update the support for Baichuan 2 from the community and ecosystem here 😀😀😀**\n\n## Running BaiChuan LLM on Intel® Core™ Ultra\n\n### How to Use\n\nWhen deploy on Core™/Xeon® Scalable Processors or with Arc™ GPU to deploy BaiChuan2 - 7B/Chat and BaiChuan2 - 13B/Chat model.\n\nBigDL-LLM to ([CPU](https://github.com/intel-analytics/BigDL/tree/main/python/llm/example/CPU/HF-Transformers-AutoModels/Model/baichuan2), [GPU](https://github.com/intel-analytics/BigDL/tree/main/python/llm/example/GPU/HF-Transformers-AutoModels/Model/baichuan2)) is recommended to take full advantage of better inference performance.\n\n## Huawei Ascend\n\n### Pytorch Framework\n\nModel Fine-tuning: Baichuan 2 (7B) already supports PyTorch（2.1.0）+ Transformers（4.36.0）+ DeepSpeed（0.12.4）+ Accelerate（0.25.0）model fine-tuning based on Ascend NPU natively, and can be used without additional adaptation.\n\nInference Deployment: Baichuan 2 (7B) already supports inference with the Ascend NPU natively, and can be used without additional adaptation.\n\n### MindSpore Framework\n\n[MindFormers](https://gitee.com/mindspore/mindformers) is a comprehensive development suite based on the MindSpore framework that supports large model training, fine-tuning, evaluation, inference, and deployment. [Baichuan2-7B / 13B](https://gitee.com/mindspore/mindformers/tree/dev/research/baichuan2) has been integrated into this suite, supporting users in model fine-tuning and deployment. For specific usage, please see the [README](https://gitee.com/mindspore/mindformers/tree/dev/research/baichuan2/baichuan2.md).\n\n### Large Model Experience Platform\n\n[Ascend Large Model Platform](https://xihe.mindspore.cn) based on Ascend's MindSpore AI framework, MindFormers large model development suite, and Ascend hardware computing power, has opened the capabilities of the [Baichuan2-7B](https://xihe.mindspore.cn/modelzoo/baichuan2_7b_chat) large model to the public. Everyone is welcome to experience it online.\n\n# Disclaimer, License and Citation\n\n## Disclaimer\nWe hereby declare that our team has not developed any applications based on Baichuan 2 models, not on iOS, Android, the web, or any other platform. We strongly call on all users not to use Baichuan 2 models for any activities that harm national / social security or violate the law. Also, we ask users not to use Baichuan 2 models for Internet services that have not undergone appropriate security reviews and filings. We hope that all users can abide by this principle and ensure that the development of technology proceeds in a regulated and legal environment.\n\nWe have done our best to ensure the compliance of the data used in the model training process. However, despite our considerable efforts, there may still be some unforeseeable issues due to the complexity of the model and data. Therefore, if any problems arise due to the use of Baichuan 2 open-source models, including but not limited to data security issues, public opinion risks, or any risks and problems brought about by the model being misled, abused, spread or improperly exploited, we will not assume any responsibility.\n\n## License\nThe community usage of Baichuan 2 model requires adherence to [Apache 2.0](https://github.com/baichuan-inc/Baichuan2/blob/main/LICENSE) and [Community License for Baichuan2 Model](https://huggingface.co/baichuan-inc/Baichuan2-7B-Base/resolve/main/Baichuan%202%E6%A8%A1%E5%9E%8B%E7%A4%BE%E5%8C%BA%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE.pdf). The Baichuan 2 model supports commercial use. If you plan to use the Baichuan 2 model or its derivatives for commercial purposes, please ensure that your entity meets the following conditions:\n\n  1. The Daily Active Users (DAU) of your or your affiliate's service or product is less than 1 million.\n  2. Neither you nor your affiliates are software service providers or cloud service providers.\n  3. There is no possibility for you or your affiliates to grant the commercial license given to you, to reauthorize it to other third parties without Baichuan's permission.\n\nUpon meeting the above conditions, you need to submit the application materials required by the Baichuan 2 Model Community License Agreement via the following contact email: opensource@baichuan-inc.com. Once approved, Baichuan will hereby grant you a non-exclusive, global, non-transferable, non-sublicensable, revocable commercial copyright license.\n\n## Citation\nIf you wish to cite our work, please use the following reference:\n```\n@article{baichuan2023baichuan2,\n  title={Baichuan 2: Open Large-scale Language Models},\n  author={Baichuan},\n  journal={arXiv preprint arXiv:2309.10305},\n  url={https://arxiv.org/abs/2309.10305},\n  year={2023}\n}\n```\n"
        },
        {
          "name": "cli_demo.py",
          "type": "blob",
          "size": 2.783203125,
          "content": "import os\nimport torch\nimport platform\nimport subprocess\nfrom colorama import Fore, Style\nfrom tempfile import NamedTemporaryFile\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nfrom transformers.generation.utils import GenerationConfig\n\n\ndef init_model():\n    print(\"init model ...\")\n    model = AutoModelForCausalLM.from_pretrained(\n        \"baichuan-inc/Baichuan2-13B-Chat\",\n        torch_dtype=torch.float16,\n        device_map=\"auto\",\n        trust_remote_code=True\n    )\n    model.generation_config = GenerationConfig.from_pretrained(\n        \"baichuan-inc/Baichuan2-13B-Chat\"\n    )\n    tokenizer = AutoTokenizer.from_pretrained(\n        \"baichuan-inc/Baichuan2-13B-Chat\",\n        use_fast=False,\n        trust_remote_code=True\n    )\n    return model, tokenizer\n\n\ndef clear_screen():\n    if platform.system() == \"Windows\":\n        os.system(\"cls\")\n    else:\n        os.system(\"clear\")\n    print(Fore.YELLOW + Style.BRIGHT + \"欢迎使用百川大模型，输入进行对话，vim 多行输入，clear 清空历史，CTRL+C 中断生成，stream 开关流式生成，exit 结束。\")\n    return []\n\n\ndef vim_input():\n    with NamedTemporaryFile() as tempfile:\n        tempfile.close()\n        subprocess.call(['vim', '+star', tempfile.name])\n        text = open(tempfile.name).read()\n    return text\n\n\ndef main(stream=True):\n    model, tokenizer = init_model()\n    messages = clear_screen()\n    while True:\n        prompt = input(Fore.GREEN + Style.BRIGHT + \"\\n用户：\" + Style.NORMAL)\n        if prompt.strip() == \"exit\":\n            break\n        if prompt.strip() == \"clear\":\n            messages = clear_screen()\n            continue\n        if prompt.strip() == 'vim':\n            prompt = vim_input()\n            print(prompt)\n        print(Fore.CYAN + Style.BRIGHT + \"\\nBaichuan 2：\" + Style.NORMAL, end='')\n        if prompt.strip() == \"stream\":\n            stream = not stream\n            print(Fore.YELLOW + \"({}流式生成)\\n\".format(\"开启\" if stream else \"关闭\"), end='')\n            continue\n        messages.append({\"role\": \"user\", \"content\": prompt})\n        if stream:\n            position = 0\n            try:\n                for response in model.chat(tokenizer, messages, stream=True):\n                    print(response[position:], end='', flush=True)\n                    position = len(response)\n                    if torch.backends.mps.is_available():\n                        torch.mps.empty_cache()\n            except KeyboardInterrupt:\n                pass\n            print()\n        else:\n            response = model.chat(tokenizer, messages)\n            print(response)\n            if torch.backends.mps.is_available():\n                torch.mps.empty_cache()\n        messages.append({\"role\": \"assistant\", \"content\": response})\n    print(Style.RESET_ALL)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "fine-tune",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.111328125,
          "content": "accelerate\ncolorama\nbitsandbytes\nsentencepiece\nstreamlit\ntransformers_stream_generator\ncpm_kernels\nxformers\nscipy\n"
        },
        {
          "name": "web_demo.py",
          "type": "blob",
          "size": 2.20703125,
          "content": "import json\nimport torch\nimport streamlit as st\nfrom transformers import AutoModelForCausalLM, AutoTokenizer\nfrom transformers.generation.utils import GenerationConfig\n\n\nst.set_page_config(page_title=\"Baichuan 2\")\nst.title(\"Baichuan 2\")\n\n\n@st.cache_resource\ndef init_model():\n    model = AutoModelForCausalLM.from_pretrained(\n        \"baichuan-inc/Baichuan2-13B-Chat\",\n        torch_dtype=torch.float16,\n        device_map=\"auto\",\n        trust_remote_code=True\n    )\n    model.generation_config = GenerationConfig.from_pretrained(\n        \"baichuan-inc/Baichuan2-13B-Chat\"\n    )\n    tokenizer = AutoTokenizer.from_pretrained(\n        \"baichuan-inc/Baichuan2-13B-Chat\",\n        use_fast=False,\n        trust_remote_code=True\n    )\n    return model, tokenizer\n\n\ndef clear_chat_history():\n    del st.session_state.messages\n\n\ndef init_chat_history():\n    with st.chat_message(\"assistant\", avatar='🤖'):\n        st.markdown(\"您好，我是百川大模型，很高兴为您服务🥰\")\n\n    if \"messages\" in st.session_state:\n        for message in st.session_state.messages:\n            avatar = '🧑‍💻' if message[\"role\"] == \"user\" else '🤖'\n            with st.chat_message(message[\"role\"], avatar=avatar):\n                st.markdown(message[\"content\"])\n    else:\n        st.session_state.messages = []\n\n    return st.session_state.messages\n\n\ndef main():\n    model, tokenizer = init_model()\n    messages = init_chat_history()\n\n    if prompt := st.chat_input(\"Shift + Enter 换行, Enter 发送\"):\n        with st.chat_message(\"user\", avatar='🧑‍💻'):\n            st.markdown(prompt)\n        messages.append({\"role\": \"user\", \"content\": prompt})\n        print(f\"[user] {prompt}\", flush=True)\n        with st.chat_message(\"assistant\", avatar='🤖'):\n            placeholder = st.empty()\n            for response in model.chat(tokenizer, messages, stream=True):\n                placeholder.markdown(response)\n                if torch.backends.mps.is_available():\n                    torch.mps.empty_cache()\n        messages.append({\"role\": \"assistant\", \"content\": response})\n        print(json.dumps(messages, ensure_ascii=False), flush=True)\n\n        st.button(\"清空对话\", on_click=clear_chat_history)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        }
      ]
    }
  ]
}