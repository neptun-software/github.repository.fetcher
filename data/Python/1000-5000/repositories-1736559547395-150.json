{
  "metadata": {
    "timestamp": 1736559547395,
    "page": 150,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Qix-/better-exceptions",
      "stars": 4616,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.23046875,
          "content": "root = true\n\n[*]\nindent_style = tab\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[{package.json,*.yml,*.py}]\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.6796875,
          "content": "# Created by https://www.gitignore.io/api/python,virtualenv,vim,emacs,linux,macos,windows,pycharm,jetbrains\nMANIFEST\n\n### Emacs ###\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\ndist/\n\n# Flycheck\nflycheck_*.el\n\n# server auth directory\n/server/\n\n# projectiles files\n.projectile\n\n# directory configuration\n.dir-locals.el\n\n### JetBrains ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n\n# Sensitive or high-churn files:\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.xml\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n\n# Gradle:\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Mongo Explorer plugin:\n.idea/**/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n### JetBrains Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n### Linux ###\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n### macOS ###\n*.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### PyCharm ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n\n# Sensitive or high-churn files:\n\n# Gradle:\n\n# Mongo Explorer plugin:\n\n## File-based project format:\n\n## Plugin-specific files:\n\n# IntelliJ\n\n# mpeltonen/sbt-idea plugin\n\n# JIRA plugin\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\n\n### PyCharm Patch ###\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\n\n# *.iml\n# modules.xml\n# .idea/misc.xml\n# *.ipr\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n### Vim ###\n# swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-v][a-z]\n[._]sw[a-p]\n# session\nSession.vim\n# temporary\n.netrwhist\n# auto-generated tag files\ntags\n\n### VirtualEnv ###\n# Virtualenv\n# http://iamzed.com/2009/05/07/a-primer-on-virtualenv/\n[Bb]in\n[Ii]nclude\n[Ll]ib\n[Ll]ib64\n[Ll]ocal\n[Ss]cripts\npyvenv.cfg\npip-selfcheck.json\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nehthumbs.db\nehthumbs_vista.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n\n# End of https://www.gitignore.io/api/python,virtualenv,vim,emacs,linux,macos,windows,pycharm,jetbrains\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2626953125,
          "content": "language: python\n\nos:\n  - linux\n#  - osx # travis doesn't appear to support python on OSX as of right now...\npython:\n  - '3.6'\n  - '3.7'\n  - '3.8'\n  - '3.9'\n  - 'nightly'\ninstall:\n  - pip install -e .\nscript:\n  - ./test_all.sh\naddons:\n  apt:\n    packages:\n    - expect\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Josh Junon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1611328125,
          "content": "graft better_exceptions\ngraft test\n\ninclude better_exceptions_hook.pth\n\ninclude README.md\ninclude LICENSE.txt\ninclude setup.py\ninclude setup.cfg\ninclude test_all.sh\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.837890625,
          "content": "# better-exceptions [![Travis](https://img.shields.io/travis/Qix-/better-exceptions.svg?style=flat-square)](https://travis-ci.org/Qix-/better-exceptions)\n\nPretty and more helpful exceptions in Python, automatically.\n\n![Example screenshot of exceptions](screenshot.png)\n\n## Usage\n\nInstall `better_exceptions` via pip:\n\n```console\npip install better_exceptions\n```\n\nAnd set the `BETTER_EXCEPTIONS` environment variable to any value:\n\n```bash\nexport BETTER_EXCEPTIONS=1  # Linux / OSX\nsetx BETTER_EXCEPTIONS 1    # Windows\n```\n\nThat's it!\n\n### Python REPL (Interactive Shell)\n\nIn order to use `better_exceptions` in the Python REPL, first install the package (as instructed above) and run:\n\n```console\n$ python -m better_exceptions\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(BetterExceptionsConsole)\n>>>\n```\n\nin order to drop into a `better_exceptions`-enabled Python interactive shell.\n\n### Advanced Usage\n\nIf you want to allow the entirety of values to be outputted instead of being truncated to a certain amount of characters:\n\n```python\nimport better_exceptions\nbetter_exceptions.MAX_LENGTH = None\n```\n\nWhile using `better_exceptions` in production, do not forget to unset the `BETTER_EXCEPTIONS` variable to avoid leaking sensitive data in your logs.\n\n### Use with unittest\n\nIf you want to use `better_exceptions` to format `unittest`'s exception output, you can use the monkey patch below:\n\n```python\nimport sys\nimport unittest\nimport better_exceptions\n\ndef patch(self, err, test):\n    lines = better_exceptions.format_exception(*err)\n    if sys.version_info[0] == 2:\n        return u\"\".join(lines).encode(\"utf-8\")\n    return \"\".join(lines)\n\nunittest.result.TestResult._exc_info_to_string = patch\n```\n\nNote that this uses an undocumented method override, so it is **not** guaranteed to work on all platforms or versions of Python.\n\n### Django Usage\n\nIn `settings.py`, add your new class to the `MIDDLEWARE` setting and update your logging configuration:\n\n```python\n# ...\n\nMIDDLEWARE = [\n    # ...\n    \"better_exceptions.integrations.django.BetterExceptionsMiddleware\",\n]\n\n# ...\n\nfrom better_exceptions.integrations.django import skip_errors_filter\n\n# if you don't want to override LOGGING because you want to change the default,\n# you can vendor Django's default logging configuration and update it for\n# better-exceptions. the default for Django 3.1.4 can be found here:\n# https://github.com/django/django/blob/3.1.4/django/utils/log.py#L13-L63\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'skip_errors': {\n            '()': 'django.utils.log.CallbackFilter',\n            'callback': skip_errors_filter,\n        }\n    },\n    'handlers': {\n        'console': {\n            'level': 'INFO',\n            # without the 'filters' key, Django will log errors twice:\n            # one time from better-exceptions and one time from Django.\n            # with the 'skip_errors' filter, we remove the repeat log\n            # from Django, which is unformatted.\n            'filters': ['skip_errors'],\n            'class': 'logging.StreamHandler',\n        }\n    },\n    'loggers': {\n        'django': {\n            'handlers': [\n                'console',\n            ],\n        }\n    }\n}\n```\n\nexample output:\n\n![image](https://user-images.githubusercontent.com/157132/56871937-5a07b480-69f1-11e9-9fd5-fac12382ebb7.png)\n\n## Troubleshooting\n\nIf you do not see beautiful exceptions, first make sure that the environment variable does exist. You can try `echo $BETTER_EXCEPTIONS` (Linux / OSX) or `echo %BETTER_EXCEPTIONS%` (Windows). On Linux and OSX, the `export` command does not add the variable permanently, you will probably need to edit the `~/.profile` file to make it persistent. On Windows, you need to open a new terminal after the `setx` command.\n\nCheck that there is no conflict with another library, and that the `sys.excepthook` function has been correctly replaced with the `better_exceptions`'s one. Sometimes other components can set up their own exception handlers, such as the `python3-apport` Ubuntu package that you may need to uninstall.\n\nMake sure that you have not inadvertently deleted the `better_exceptions_hook.pth` file that should be in the same place as the `better_exceptions` folder where all of your Python packages are installed. Otherwise, try re-installing `better_exceptions`.\n\nYou can also try to manually activate the hook by adding `import better_exceptions; better_exceptions.hook()` at the beginning of your script.\n\nFinally, if you still can not get this module to work, [open a new issue](https://github.com/Qix-/better-exceptions/issues/new) by describing your problem precisely and detailing your configuration (Python and `better_exceptions` versions, OS, code snippet, interpreter, etc.) so that we can reproduce the bug you are experiencing.\n\n# License\n\nCopyright &copy; 2017, Josh Junon. Licensed under the [MIT license](LICENSE.txt).\n"
        },
        {
          "name": "better_exceptions",
          "type": "tree",
          "content": null
        },
        {
          "name": "better_exceptions_hook.pth",
          "type": "blob",
          "size": 0.37890625,
          "content": "import os; exec(\"try:\\n  if 'BETTER_EXCEPTIONS' in os.environ:import better_exceptions;better_exceptions.hook()\\nexcept:print('An error occurred while automatically hooking better_exceptions.\\\\nIf you uninstalled better_exceptions, you should probably delete any \\\\'better_exceptions_hook.pth\\\\' file on your system or unset your \\\\'BETTER_EXCEPTIONS\\\\' environment variable.'); raise;\")\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 87.962890625,
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.md\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.5712890625,
          "content": "import re\nfrom itertools import chain\nfrom os.path import basename\nfrom os.path import dirname\nfrom os.path import join\nfrom os.path import splitext\nfrom distutils.core import setup\nfrom distutils.command.build import build\nfrom setuptools.command.develop import develop\nfrom setuptools.command.easy_install import easy_install\nfrom setuptools.command.install_lib import install_lib\n\n\nclass BuildWithPTH(build):\n    def run(self):\n        build.run(self)\n        path = join(dirname(__file__), 'better_exceptions_hook.pth')\n        dest = join(self.build_lib, basename(path))\n        self.copy_file(path, dest)\n\n\nclass EasyInstallWithPTH(easy_install):\n    def run(self):\n        easy_install.run(self)\n        path = join(dirname(__file__), 'better_exceptions_hook.pth')\n        dest = join(self.install_dir, basename(path))\n        self.copy_file(path, dest)\n\n\nclass InstallLibWithPTH(install_lib):\n    def run(self):\n        install_lib.run(self)\n        path = join(dirname(__file__), 'better_exceptions_hook.pth')\n        dest = join(self.install_dir, basename(path))\n        self.copy_file(path, dest)\n        self.outputs = [dest]\n\n    def get_outputs(self):\n        return chain(install_lib.get_outputs(self), self.outputs)\n\n\nclass DevelopWithPTH(develop):\n    def run(self):\n        develop.run(self)\n        path = join(dirname(__file__), 'better_exceptions_hook.pth')\n        dest = join(self.install_dir, basename(path))\n        self.copy_file(path, dest)\n\n\nwith open('better_exceptions/__init__.py', 'r') as file:\n    version = re.search(r'^__version__\\s*=\\s*[\\'\"]([^\\'\"]*)[\\'\"]',\n                        file.read(), re.MULTILINE).group(1)\n\nsetup(\n    name = 'better_exceptions',\n    packages = ['better_exceptions', 'better_exceptions.integrations'],\n    version = version,\n    description = 'Pretty and helpful exceptions, automatically',\n    author = 'Josh Junon',\n    author_email = 'josh@junon.me',\n    url = 'https://github.com/qix-/better-exceptions',\n    download_url = 'https://github.com/qix-/better-exceptions/archive/{}.tar.gz'.format(version),\n    license = 'MIT',\n    keywords = ['pretty', 'better', 'exceptions', 'exception', 'error', 'local', 'debug', 'debugging', 'locals'],\n    classifiers = [],\n    extras_require = {\n        ':sys_platform==\"win32\"': ['colorama']\n    },\n    # This all comes from pytest-cov repository:\n    # https://github.com/pytest-dev/pytest-cov/blob/cde7c378b6a1971957759f42ac91e2860b41cf89/setup.py\n    cmdclass = {\n        'build': BuildWithPTH,\n        'easy_install': EasyInstallWithPTH,\n        'install_lib': InstallLibWithPTH,\n        'develop': DevelopWithPTH,\n    }\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_all.sh",
          "type": "blob",
          "size": 1.9755859375,
          "content": "#!/usr/bin/env bash\n\nset -e\n\nif [[ \"${1}\" == \"generate\" ]]; then\n\trm -rf test/output\n\tmkdir -p test/output\n\tGENERATE=true\nelse\n\tGENERATE=false\nfi\n\ncd \"$(dirname \"${0}\")\"\nPYTHONPATH=\"$(pwd):$(pwd)/test\"\nexport PYTHONPATH\n\nif [[ -z \"$PYTHON\" ]]; then\n\tPYTHON=python3\nfi\n\nfunction normalize {\n\t# we translate anything that looks like an address into 0xDEADBEEF\n\t# since the addresses change from run to run and break diff testing\n\tcat | sed 's|0x[a-fA-F0-9]\\{1,\\}|0xDEADBEEF|g' | sed 's|<module '\"'[^']*' from '[^']*'>|<module 'test_module' from '/removed/for/test/purposes.py'>\"'|g' | sed 's|File \"/[^\"]*\"|File \"/removed/for/test/purposes.ext\"|g' | grep -v \"bash: warning:\"\n}\n\nfunction test_case {\n\techo -e \"\\x1b[36;1m   \" \"$@\" \"\\x1b[m\" 1>&2\n\n\techo \"$@\"\n\techo -e \"\\n\"\n\t(\"$@\" 2>&1 || true) | normalize\n\techo -e \"\\n\\n\"\n\n\treturn $?\n}\n\nfunction test_all {\n\ttest_case \"$PYTHON\" \"test/test.py\"\n\ttest_case \"$PYTHON\" \"test/test_color.py\"\n\ttest_case \"$PYTHON\" \"test/test_encoding.py\"\n\ttest_case \"./test/test_interactive.sh\"\n\t# test_case \"./test/test_interactive_raw.sh\"\n\ttest_case \"./test/test_string.sh\"\n\ttest_case \"$PYTHON\" \"test/test_logging.py\"\n\ttest_case \"$PYTHON\" \"test/test_truncating.py\"\n\ttest_case \"$PYTHON\" \"test/test_truncating_disabled.py\"\n\ttest_case \"$PYTHON\" \"test/test_indentation_error.py\"\n\ttest_case \"$PYTHON\" \"test/test_syntax_error.py\"\n\ttest_case \"$PYTHON\" \"test/test_unittest_patch.py\"\n\n\tif [[ \"$PYTHON\" == \"python3\" ]]; then\n\t\ttest_case \"$PYTHON\" \"test/test_chaining.py\"\n\tfi\n}\n\nfor encoding in ascii \"UTF-8\"; do\n\tfor term in xterm vt100 dumb; do\n\t\tfor color in 0 1; do\n\t\t\t[[ $color == \"1\" ]] && color_filename=\"color\" || color_filename=\"nocolor\"\n\t\t\tfilename=\"test/output/python3-${term}-${encoding}-${color_filename}.out\"\n\n\t\t\texport PYTHONIOENCODING=\"${encoding}\"\n\t\t\texport TERM=\"${term}\"\n\t\t\texport FORCE_COLOR=\"${color}\"\n\n\t\t\techo -e \"\\x1b[35;1m${filename}\\x1b[m\" >&2\n\t\t\tif $GENERATE; then\n\t\t\t\texec > \"$filename\"\n\t\t\t\ttest_all \"$filename\"\n\t\t\telse\n\t\t\t\ttest_all | diff \"$(pwd)/${filename}\" -\n\t\t\tfi\n\t\tdone\n\tdone\ndone\n"
        }
      ]
    }
  ]
}