{
  "metadata": {
    "timestamp": 1736559939948,
    "page": 710,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RUCAIBox/RecBole",
      "stars": 3541,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.126953125,
          "content": "# Saved models\n/saved*\n*.pth\n\n.vscode/\n.idea/\n*.pyc\n*.log\nlog_tensorboard\nsaved/\n*.lprof\n*.egg-info/\ndocs/build/\nwandb/*\n/ray_log*"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2020 RUCAIBox\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0810546875,
          "content": "recursive-include recbole/properties *\nrecursive-include recbole/dataset_example *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.6142578125,
          "content": "![RecBole Logo](asset/logo.png)\r\n\r\n--------------------------------------------------------------------------------\r\n\r\n# RecBole (伯乐)\r\n\r\n*“世有伯乐，然后有千里马。千里马常有，而伯乐不常有。”——韩愈《马说》*\r\n\r\n[![PyPi Latest Release](https://img.shields.io/pypi/v/recbole)](https://pypi.org/project/recbole/)\r\n[![Conda Latest Release](https://anaconda.org/aibox/recbole/badges/version.svg)](https://anaconda.org/aibox/recbole)\r\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](./LICENSE)\r\n[![arXiv](https://img.shields.io/badge/arXiv-RecBole-%23B21B1B)](https://arxiv.org/abs/2011.01731)\r\n\r\n\r\n[HomePage] | [Docs] | [Datasets] | [Paper] | [Blogs] | [Models] | [中文版]\r\n\r\n[HomePage]: https://recbole.io/\r\n[Docs]: https://recbole.io/docs/\r\n[Datasets]: https://github.com/RUCAIBox/RecDatasets\r\n[Paper]: https://arxiv.org/abs/2011.01731\r\n[Blogs]: https://blog.csdn.net/Turinger_2000/article/details/111182852\r\n[Models]: https://github.com/RUCAIBox/RecBole2.0/blob/main/model_list.md\r\n[中文版]: README_CN.md\r\n\r\nRecBole is developed based on Python and PyTorch for reproducing and developing recommendation algorithms in a unified,\r\ncomprehensive and efficient framework for research purpose.\r\nOur library includes 91 recommendation algorithms, covering four major categories:\r\n\r\n+ General Recommendation\r\n+ Sequential Recommendation\r\n+ Context-aware Recommendation\r\n+ Knowledge-based Recommendation\r\n\r\nWe design a unified and flexible data file format, and provide the support for 43 benchmark recommendation datasets.\r\nA user can apply the provided script to process the original data copy, or simply download the processed datasets\r\nby our team.\r\n\r\n\r\n<p align=\"center\">\r\n  <img src=\"asset/framework.png\" alt=\"RecBole v0.1 architecture\" width=\"600\">\r\n  <br>\r\n  <b>Figure</b>: RecBole Overall Architecture\r\n</p>\r\n\r\nIn order to support the study of recent advances in recommender systems, we construct an extended recommendation library [RecBole2.0](https://github.com/RUCAIBox/RecBole2.0) consisting of 8 packages for up-to-date topics and architectures (e.g., debiased, fairness and GNNs). \r\n\r\n## Feature\r\n+ **General and extensible data structure.** We design general and extensible data structures to unify the formatting and\r\nusage of various recommendation datasets.\r\n\r\n+ **Comprehensive benchmark models and datasets.** We implement 78 commonly used recommendation algorithms, and provide\r\nthe formatted copies of 28 recommendation datasets.\r\n\r\n+ **Efficient GPU-accelerated execution.** We optimize the efficiency of our library with a number of improved techniques\r\noriented to the GPU environment.\r\n\r\n+ **Extensive and standard evaluation protocols.** We support a series of widely adopted evaluation protocols or settings\r\nfor testing and comparing recommendation algorithms.\r\n\r\n\r\n## RecBole News\r\n![new](/asset/new.gif) **11/01/2023**: We release RecBole [v1.2.0](https://github.com/RUCAIBox/RecBole/releases/tag/v1.2.0).\r\n\r\n![new](/asset/new.gif) **11/06/2022**: We release [the optimal hyperparameters of the model and their tuning ranges](https://recbole.io/hyperparameters/index.html).\r\n\r\n**10/05/2022**: We release RecBole [v1.1.1](https://github.com/RUCAIBox/RecBole/releases/tag/v1.1.1).\r\n\r\n**06/28/2022**: We release [**RecBole2.0**](https://github.com/RUCAIBox/RecBole2.0) with **8 packages** consisting of **65 newly implement models**. \r\n\r\n**02/25/2022**: We release RecBole [v1.0.1](https://github.com/RUCAIBox/RecBole/releases/tag/v1.0.1).\r\n\r\n**09/17/2021**: We release RecBole [v1.0.0](https://github.com/RUCAIBox/RecBole/releases/tag/v1.0.0).\r\n\r\n**03/22/2021**: We release RecBole [v0.2.1](https://github.com/RUCAIBox/RecBole/releases/tag/v0.2.1).\r\n\r\n**01/15/2021**: We release RecBole [v0.2.0](https://github.com/RUCAIBox/RecBole/releases/tag/v0.2.0).\r\n\r\n**12/10/2020**: 我们发布了[RecBole小白入门系列中文博客（持续更新中）](https://blog.csdn.net/Turinger_2000/article/details/111182852) 。\r\n\r\n**12/06/2020**: We release RecBole [v0.1.2](https://github.com/RUCAIBox/RecBole/releases/tag/v0.1.2).\r\n\r\n**11/29/2020**: We constructed preliminary experiments to test the time and memory cost on three\r\ndifferent-sized datasets and provided the [test result](https://github.com/RUCAIBox/RecBole#time-and-memory-costs)\r\nfor reference.\r\n\r\n**11/03/2020**: We release the first version of RecBole **v0.1.1**.\r\n\r\n### Latest Update for SIGIR 2023 Submission\r\n\r\nTo better meet the user requirements and contribute to the research community, we present a significant update of RecBole in the latest version, making it more user-friendly and easy-to-use as a comprehensive benchmark library for recommendation. We summarize these updates in \"**Towards a More User-Friendly and Easy-to-Use Benchmark Library for Recommender Systems**\" and submit the paper to **SIGIR 2023**. The main contribution in this update is introduced below.\r\n\r\nOur extensions are made in three major aspects, namely the models/datasets, the framework, and the configurations. Furthermore, we provide more comprehensive documentation and well-organized FAQ for the usage of our library, which largely improves the user experience. More specifically, the highlights of this update are summarized as: \r\n\r\n1. We introduce more operations and settings to help benchmarking the recommendation domain.\r\n\r\n2. We improve the user friendliness of our library by providing more detailed documentation and well-organized frequently asked questions. \r\n3. We point out several development guidelines for the open-source library developers. \r\n\r\nThese extensions make it much easier to reproduce the benchmark results and stay up-to-date with the recent advances on recommender systems. The datailed comparison between this update and previous versions is listed below.\r\n\r\n|          Aspect           |            RecBole 1.0             |          RecBole 2.0           |                   This update                    |\r\n| :-----------------------: | :--------------------------------: | :----------------------------: | :----------------------------------------------: |\r\n|   Recommendation tasks    |            4 categories            |    3 topics and 5 packages     |                   4 categories                   |\r\n|    Models and datasets    |     73 models and 28 datasets      |  65 models and 8 new datasets  |            91 models and 43 datasets             |\r\n|      Data structure       | Implemented Dataset and Dataloader |         Task-oriented          |  Compatible data module inherited from PyTorch   |\r\n|    Continuous features    |          Field embedding           |        Field embedding         |        Field embedding and discretization        |\r\n| GPU-accelerated execution |       Single-GPU utilization       |     Single-GPU utilization     |      Multi-GPU and mixed precision training      |\r\n|  Hyper-parameter tuning   |       Serial gradient search       |     Serial gradient search     | Three search methods in both serial and parallel |\r\n|     Significance test     |                 -                  |               -                |               Available interface                |\r\n|     Benchmark results     |                 -                  | Partially public (GNN and CDR) |      Benchmark configurations on 82 models       |\r\n|      Friendly usage       |           Documentation            |         Documentation          |       Improved documentation and FAQ page        |\r\n\r\n\r\n## Installation\r\nRecBole works with the following operating systems:\r\n\r\n* Linux\r\n* Windows 10\r\n* macOS X\r\n\r\nRecBole requires Python version 3.7 or later.\r\n\r\nRecBole requires torch version 1.7.0 or later. If you want to use RecBole with GPU,\r\nplease ensure that CUDA or cudatoolkit version is 9.2 or later.\r\nThis requires NVIDIA driver version >= 396.26 (for Linux) or >= 397.44 (for Windows10).\r\n\r\n### Install from conda\r\n\r\n```bash\r\nconda install -c aibox recbole\r\n```\r\n\r\n### Install from pip\r\n\r\n```bash\r\npip install recbole\r\n```\r\n\r\n### Install from source\r\n```bash\r\ngit clone https://github.com/RUCAIBox/RecBole.git && cd RecBole\r\npip install -e . --verbose\r\n```\r\n\r\n## Quick-Start\r\nWith the source code, you can use the provided script for initial usage of our library:\r\n\r\n```bash\r\npython run_recbole.py\r\n```\r\n\r\nThis script will run the BPR model on the ml-100k dataset.\r\n\r\nTypically, this example takes less than one minute. We will obtain some output like:\r\n\r\n```\r\nINFO ml-100k\r\nThe number of users: 944\r\nAverage actions of users: 106.04453870625663\r\nThe number of items: 1683\r\nAverage actions of items: 59.45303210463734\r\nThe number of inters: 100000\r\nThe sparsity of the dataset: 93.70575143257098%\r\nINFO Evaluation Settings:\r\nGroup by user_id\r\nOrdering: {'strategy': 'shuffle'}\r\nSplitting: {'strategy': 'by_ratio', 'ratios': [0.8, 0.1, 0.1]}\r\nNegative Sampling: {'strategy': 'full', 'distribution': 'uniform'}\r\nINFO BPRMF(\r\n    (user_embedding): Embedding(944, 64)\r\n    (item_embedding): Embedding(1683, 64)\r\n    (loss): BPRLoss()\r\n)\r\nTrainable parameters: 168128\r\nINFO epoch 0 training [time: 0.27s, train loss: 27.7231]\r\nINFO epoch 0 evaluating [time: 0.12s, valid_score: 0.021900]\r\nINFO valid result:\r\nrecall@10: 0.0073  mrr@10: 0.0219  ndcg@10: 0.0093  hit@10: 0.0795  precision@10: 0.0088\r\n...\r\nINFO epoch 63 training [time: 0.19s, train loss: 4.7660]\r\nINFO epoch 63 evaluating [time: 0.08s, valid_score: 0.394500]\r\nINFO valid result:\r\nrecall@10: 0.2156  mrr@10: 0.3945  ndcg@10: 0.2332  hit@10: 0.7593  precision@10: 0.1591\r\nINFO Finished training, best eval result in epoch 52\r\nINFO Loading model structure and parameters from saved/***.pth\r\nINFO best valid result:\r\nrecall@10: 0.2169  mrr@10: 0.4005  ndcg@10: 0.235  hit@10: 0.7582  precision@10: 0.1598\r\nINFO test result:\r\nrecall@10: 0.2368  mrr@10: 0.4519  ndcg@10: 0.2768  hit@10: 0.7614  precision@10: 0.1901\r\n```\r\n\r\nIf you want to change the parameters, such as ``learning_rate``, ``embedding_size``, just set the additional command\r\nparameters as you need:\r\n\r\n```bash\r\npython run_recbole.py --learning_rate=0.0001 --embedding_size=128\r\n```\r\n\r\nIf you want to change the models, just run the script by setting additional command parameters:\r\n\r\n```bash\r\npython run_recbole.py --model=[model_name]\r\n```\r\n\r\n### Auto-tuning Hyperparameter \r\nOpen `RecBole/hyper.test` and set several hyperparameters to auto-searching in parameter list. The following has two ways to search best hyperparameter:\r\n* **loguniform**: indicates that the parameters obey the uniform distribution, randomly taking values from e^{-8} to e^{0}.\r\n* **choice**: indicates that the parameter takes discrete values from the setting list.\r\n\r\nHere is an example for `hyper.test`: \r\n```\r\nlearning_rate loguniform -8, 0\r\nembedding_size choice [64, 96 , 128]\r\ntrain_batch_size choice [512, 1024, 2048]\r\nmlp_hidden_size choice ['[64, 64, 64]','[128, 128]']\r\n```\r\nSet training command parameters as you need to run:\r\n```\r\npython run_hyper.py --model=[model_name] --dataset=[data_name] --config_files=xxxx.yaml --params_file=hyper.test\r\ne.g.\r\npython run_hyper.py --model=BPR --dataset=ml-100k --config_files=test.yaml --params_file=hyper.test\r\n```\r\nNote that `--config_files=test.yaml` is optional, if you don't have any customize config settings, this parameter can be empty.\r\n\r\nThis processing maybe take a long time to output best hyperparameter and result:\r\n```\r\nrunning parameters:                                                                                                                    \r\n{'embedding_size': 64, 'learning_rate': 0.005947474154838498, 'mlp_hidden_size': '[64,64,64]', 'train_batch_size': 512}                \r\n  0%|                                                                                           | 0/18 [00:00<?, ?trial/s, best loss=?]\r\n```\r\n\r\nMore information about parameter tuning can be found in our [docs](https://recbole.io/docs/user_guide/usage/parameter_tuning.html).\r\n\r\n\r\n## Time and Memory Costs\r\nWe constructed preliminary experiments to test the time and memory cost on three different-sized datasets \r\n(small, medium and large). For detailed information, you can click the following links.\r\n\r\n* [General recommendation models](asset/time_test_result/General_recommendation.md)\r\n* [Sequential recommendation models](asset/time_test_result/Sequential_recommendation.md)\r\n* [Context-aware recommendation models](asset/time_test_result/Context-aware_recommendation.md)\r\n* [Knowledge-based recommendation models](asset/time_test_result/Knowledge-based_recommendation.md)\r\n\r\nNOTE: Our test results only gave the approximate time and memory cost of our implementations in the RecBole library\r\n(based on our machine server).  Any feedback or suggestions about the implementations and test are welcome. \r\nWe will keep improving our implementations, and update these test results.\r\n\r\n\r\n## RecBole Major Releases\r\n| Releases | Date       |\r\n|----------|------------|\r\n| v1.2.0   | 11/01/2023 |\r\n| v1.1.1   | 10/05/2022 |\r\n| v1.0.0   | 09/17/2021 |\r\n| v0.2.0   | 01/15/2021 |\r\n| v0.1.1   | 11/03/2020 |\r\n\r\n\r\n## Open Source Contributions\r\nAs a one-stop framework from data processing, model development, algorithm training to scientific evaluation, RecBole has a total of **11** related GitHub projects including \r\n- two versions of RecBole ([RecBole 1.0](https://github.com/RUCAIBox/RecBole) and [RecBole 2.0](https://github.com/RUCAIBox/RecBole2.0));\r\n- 8 benchmarking packages ([RecBole-MetaRec](https://github.com/nuster1128/RecBole-MetaRec), [RecBole-DA](https://github.com/RUCAIBox/RecBole-DA), [RecBole-Debias](https://github.com/JingsenZhang/RecBole-Debias), [RecBole-FairRec](https://github.com/TangJiakai/RecBole-FairRec), [RecBole-CDR](https://github.com/RUCAIBox/RecBole-CDR), [RecBole-TRM](https://github.com/RUCAIBox/RecBole-TRM), [RecBole-GNN](https://github.com/RUCAIBox/RecBole-GNN) and [RecBole-PJF](https://github.com/RUCAIBox/RecBole-PJF));\r\n- dataset repository (<a href=\"https://github.com/RUCAIBox/RecSysDatasets\">RecSysDatasets</a>).\r\n\r\nIn the following table, we summarize the open source contributions of GitHub projects based on RecBole.\r\n\r\n| **Projects**                                                 | **Stars**                                                    | **Forks**                                                    | **Issues**                                                   | **Pull requests**                                            |\r\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\r\n| [**RecBole**](https://github.com/RUCAIBox/RecBole)           | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole?style=social&logo=github)](https://github.com/RUCAIBox/RecBole/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole?style=social&logo=git)](https://github.com/RUCAIBox/RecBole/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole/pulls) |\r\n| [**RecBole2.0**](https://github.com/RUCAIBox/RecBole2.0)     | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole2.0?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole2.0/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole2.0?style=social&logo=github)](https://github.com/RUCAIBox/RecBole2.0/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole2.0?style=social&logo=git)](https://github.com/RUCAIBox/RecBole2.0/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole2.0?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole2.0/pulls) |\r\n| [**RecBole-DA**](https://github.com/RUCAIBox/RecBole-DA)     | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-DA?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-DA/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-DA?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-DA/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-DA?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-DA/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-DA?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-DA/pulls) |\r\n| [**RecBole-MetaRec**](https://github.com/nuster1128/RecBole-MetaRec) | [![Stars](https://img.shields.io/github/stars/nuster1128/RecBole-MetaRec?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/nuster1128/RecBole-MetaRec/stargazers) | [![Forks](https://img.shields.io/github/forks/nuster1128/RecBole-MetaRec?style=social&logo=github)](https://github.com/nuster1128/RecBole-MetaRec/network/members) | [![Issues](https://img.shields.io/github/issues-closed/nuster1128/RecBole-MetaRec?style=social&logo=git)](https://github.com/nuster1128/RecBole-MetaRec/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/nuster1128/RecBole-MetaRec?style=social&logo=githubactions)](https://github.com/nuster1128/RecBole-MetaRec/pulls) |\r\n| [**RecBole-Debias**](https://github.com/JingsenZhang/RecBole-Debias) | [![Stars](https://img.shields.io/github/stars/JingsenZhang/RecBole-Debias?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/JingsenZhang/RecBole-Debias/stargazers) | [![Forks](https://img.shields.io/github/forks/JingsenZhang/RecBole-Debias?style=social&logo=github)](https://github.com/JingsenZhang/RecBole-Debias/network/members) | [![Issues](https://img.shields.io/github/issues-closed/JingsenZhang/RecBole-Debias?style=social&logo=git)](https://github.com/JingsenZhang/RecBole-Debias/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/JingsenZhang/RecBole-Debias?style=social&logo=githubactions)](https://github.com/JingsenZhang/RecBole-Debias/pulls) |\r\n| [**RecBole-FairRec**](https://github.com/TangJiakai/RecBole-FairRec) | [![Stars](https://img.shields.io/github/stars/TangJiakai/RecBole-FairRec?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/TangJiakai/RecBole-FairRec/stargazers) | [![Forks](https://img.shields.io/github/forks/TangJiakai/RecBole-FairRec?style=social&logo=github)](https://github.com/TangJiakai/RecBole-FairRec/network/members) | [![Issues](https://img.shields.io/github/issues-closed/TangJiakai/RecBole-FairRec?style=social&logo=git)](https://github.com/TangJiakai/RecBole-FairRec/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/TangJiakai/RecBole-FairRec?style=social&logo=githubactions)](https://github.com/TangJiakai/RecBole-FairRec/pulls) |\r\n| [**RecBole-CDR**](https://github.com/RUCAIBox/RecBole-CDR)   | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-CDR?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-CDR/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-CDR?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-CDR/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-CDR?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-CDR/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-CDR?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-CDR/pulls) |\r\n| [**RecBole-GNN**](https://github.com/RUCAIBox/RecBole-GNN)   | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-GNN?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-GNN/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-GNN?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-GNN/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-GNN?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-GNN/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-GNN?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-GNN/pulls) |\r\n| [**RecBole-TRM**](https://github.com/RUCAIBox/RecBole-TRM)   | [![Stars](https://img.shields.io/github/stars/RUCAIBOX/RecBole-TRM?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBOX/RecBole-TRM/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-TRM?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-TRM/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-TRM?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-TRM/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-TRM?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-TRM/pulls) |\r\n| [**RecBole-PJF**](https://github.com/RUCAIBox/RecBole-PJF)   | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-PJF?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-PJF/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-PJF?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-PJF/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-PJF?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-PJF/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-PJF?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-PJF/pulls) |\r\n| [**RecSysDatasets**](https://github.com/RUCAIBox/RecSysDatasets) | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecSysDatasets?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecSysDatasets/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecSysDatasets?style=social&logo=github)](https://github.com/RUCAIBox/RecSysDatasets/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecSysDatasets?style=social&logo=git)](https://github.com/RUCAIBox/RecSysDatasets/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecSysDatasets?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecSysDatasets/pulls) |\r\n\r\n\r\n## Contributing\r\n\r\nPlease let us know if you encounter a bug or have any suggestions by [filing an issue](https://github.com/RUCAIBox/RecBole/issues).\r\n\r\nWe welcome all contributions from bug fixes to new features and extensions.\r\n\r\nWe expect all contributions discussed in the issue tracker and going through PRs.\r\n\r\nWe thank the insightful suggestions from [@tszumowski](https://github.com/tszumowski), [@rowedenny](https://github.com/rowedenny), [@deklanw](https://github.com/deklanw) et.al.\r\n\r\nWe thank the nice contributions through PRs from [@rowedenny](https://github.com/rowedenny)，[@deklanw](https://github.com/deklanw) et.al.\r\n\r\n\r\n## Cite\r\nIf you find RecBole useful for your research or development, please cite the following papers: [RecBole[1.0]](https://arxiv.org/abs/2011.01731), [RecBole[2.0]](https://dl.acm.org/doi/abs/10.1145/3459637.3482016) and [RecBole[1.2.0]](https://dl.acm.org/doi/10.1145/3539618.3591889).\r\n\r\n```bibtex\r\n@inproceedings{recbole[1.0],\r\n  author    = {Wayne Xin Zhao and Shanlei Mu and Yupeng Hou and Zihan Lin and Yushuo Chen and Xingyu Pan and Kaiyuan Li and Yujie Lu and Hui Wang and Changxin Tian and Yingqian Min and Zhichao Feng and Xinyan Fan and Xu Chen and Pengfei Wang and Wendi Ji and Yaliang Li and Xiaoling Wang and Ji{-}Rong Wen},\r\n  title     = {RecBole: Towards a Unified, Comprehensive and Efficient Framework for Recommendation Algorithms},\r\n  booktitle = {{CIKM}},\r\n  pages     = {4653--4664},\r\n  publisher = {{ACM}},\r\n  year      = {2021}\r\n}\r\n@inproceedings{recbole[2.0],\r\n  author    = {Wayne Xin Zhao and Yupeng Hou and Xingyu Pan and Chen Yang and Zeyu Zhang and Zihan Lin and Jingsen Zhang and Shuqing Bian and Jiakai Tang and Wenqi Sun and Yushuo Chen and Lanling Xu and Gaowei Zhang and Zhen Tian and Changxin Tian and Shanlei Mu and Xinyan Fan and Xu Chen and Ji{-}Rong Wen},\r\n  title     = {RecBole 2.0: Towards a More Up-to-Date Recommendation Library},\r\n  booktitle = {{CIKM}},\r\n  pages     = {4722--4726},\r\n  publisher = {{ACM}},\r\n  year      = {2022}\r\n}\r\n@inproceedings{recbole[1.2.0],\r\n  author    = {Lanling Xu and Zhen Tian and Gaowei Zhang and Junjie Zhang and Lei Wang and Bowen Zheng and Yifan Li and Jiakai Tang and Zeyu Zhang and Yupeng Hou and Xingyu Pan and Wayne Xin Zhao and Xu Chen and Ji{-}Rong Wen},\r\n  title     = {Towards a More User-Friendly and Easy-to-Use Benchmark Library for Recommender Systems},\r\n  booktitle = {{SIGIR}},\r\n  pages     = {2837--2847},\r\n  publisher = {{ACM}},\r\n  year      = {2023}\r\n}\r\n```\r\n\r\n\r\n## The Team\r\n\r\nRecBole is developed by [RUC, BUPT, ECNU](https://www.recbole.io/about.html), and maintained by RUC.\r\n\r\nHere is the list of our lead developers in each development phase. They are the souls of RecBole and have made outstanding contributions.\r\n\r\n|         Time          |        Version         |                Lead Developers                 |                Paper            |\r\n| :-------------------: | :--------------------: | :--------------------------------------------: | ---------------------------------------------- |\r\n| June 2020<br> ~<br> Nov. 2020 |        v0.1.1         |  Shanlei Mu ([@ShanleiMu](https://github.com/ShanleiMu)), Yupeng Hou ([@hyp1231](https://github.com/hyp1231)),<br> Zihan Lin ([@linzihan-backforward](https://github.com/linzihan-backforward)), Kaiyuan Li ([@tsotfsk](https://github.com/tsotfsk))| [PDF](https://dl.acm.org/doi/abs/10.1145/3459637.3482016) |\r\n|    Nov. 2020<br> ~ <br> Jul. 2022    | v0.1.2 ~ v1.0.1 |      Yushuo Chen ([@chenyushuo](https://github.com/chenyushuo)), Xingyu Pan ([@2017pxy](https://github.com/2017pxy))    | [PDF](https://dl.acm.org/doi/abs/10.1145/3459637.3482016)  |\r\n| Jul. 2022<br/> ~ <br/> Nov. 2023 | v1.1.0 ~ v1.1.1 | Lanling Xu ([@Sherry-XLL](https://github.com/Sherry-XLL)), Zhen Tian ([@chenyuwuxin](https://github.com/chenyuwuxin)), Gaowei Zhang ([@Wicknight](https://github.com/Wicknight)), Lei Wang ([@Paitesanshi](https://github.com/Paitesanshi)), Junjie Zhang ([@leoleojie](https://github.com/leoleojie)) | [PDF](https://dl.acm.org/doi/10.1145/3539618.3591889) |\r\n| Nov. 2023<br/> ~ <br/> now | v1.2.0 | Bowen Zheng ([@zhengbw0324](https://github.com/zhengbw0324)), Chen Ma ([@Yilu114](https://github.com/Yilu114)) | [PDF](https://dl.acm.org/doi/10.1145/3539618.3591889) |\r\n\r\n\r\n## License\r\nRecBole uses [MIT License](./LICENSE). All data and code in this project can only be used for academic purposes.\r\n\r\n## Acknowledgments\r\n\r\nThis project was supported by National Natural Science Foundation of China (No. 61832017)."
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 22.73828125,
          "content": "![RecBole Logo](asset/logo.png)\n\n--------------------------------------------------------------------------------\n\n# RecBole (伯乐)\n\n*“世有伯乐，然后有千里马。千里马常有，而伯乐不常有。”——韩愈《马说》*\n\n[![PyPi Latest Release](https://img.shields.io/pypi/v/recbole)](https://pypi.org/project/recbole/)\n[![Conda Latest Release](https://anaconda.org/aibox/recbole/badges/version.svg)](https://anaconda.org/aibox/recbole)\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](./LICENSE)\n[![arXiv](https://img.shields.io/badge/arXiv-RecBole-%23B21B1B)](https://arxiv.org/abs/2011.01731)\n\n\n[中文主页] | [文档] | [数据集] | [论文] | [博客] | [模型列表] | [English Version]\n\n[中文主页]: https://recbole.io/cn\n[文档]: https://recbole.io/docs/\n[数据集]: https://github.com/RUCAIBox/RecDatasets\n[论文]: https://arxiv.org/abs/2011.01731\n[博客]: https://blog.csdn.net/Turinger_2000/article/details/111182852\n[模型列表]: https://github.com/RUCAIBox/RecBole2.0/blob/main/model_list.md\n[English Version]: README.md\n\n\nRecBole 是一个基于 PyTorch 实现的，面向研究者的，易于开发与复现的，统一、全面、高效的推荐系统代码库。\n我们实现了91个推荐系统模型，包含常见的推荐系统类别，如:\n\n+ General Recommendation\n+ Sequential Recommendation\n+ Context-aware Recommendation\n+ Knowledge-based Recommendation\n\n\n我们约定了一个统一、易用的数据文件格式，并已支持 43 个 benchmark dataset。\n用户可以选择使用我们的数据集预处理脚本，或直接下载已被处理好的数据集文件。\n\n\n<p align=\"center\">\n  <img src=\"asset/framework.png\" alt=\"RecBole v0.1 架构\" width=\"600\">\n  <br>\n  <b>图片</b>: RecBole 总体架构\n</p>\n\n\n## 特色\n+ **通用和可扩展的数据结构** 我们设计了通用和可扩展的数据结构来支持各种推荐数据集统一化格式和使用。\n\n+ **全面的基准模型和数据集** 我们实现了91个常用的推荐算法，并提供了43个推荐数据集的格式化副本。\n\n+ **高效的 GPU 加速实现** 我们针对GPU环境使用了一系列的优化技术来提升代码库的效率。\n\n+ **大规模的标准评测** 我们支持一系列被广泛认可的评估方式来测试和比较不同的推荐算法。\n\n\n## RecBole 新闻\n![new](/asset/new.gif) **11/01/2023**: 我们发布了 [v1.2.0](https://github.com/RUCAIBox/RecBole/releases/tag/v1.2.0).\n\n![new](/asset/new.gif) **11/06/2022**: 我们公开了[模型的最优超参数及其调参范围](https://recbole.io/hyperparameters/index.html).\n\n**10/05/2022**: 我们发布了 [v1.1.1](https://github.com/RUCAIBox/RecBole/releases/tag/v1.1.1).\n\n**06/28/2022**: 我们发布了包括 **8 个子包**和 **65 个新实现模型**的 [**RecBole2.0**](https://github.com/RUCAIBox/RecBole2.0).\n\n**02/25/2022**: 我们发布了 [v1.0.1](https://github.com/RUCAIBox/RecBole/releases/tag/v1.0.1).\n\n**09/17/2021**: 我们发布了 [v1.0.0](https://github.com/RUCAIBox/RecBole/releases/tag/v1.0.0).\n\n**03/22/2021**: 我们发布了 [v0.2.1](https://github.com/RUCAIBox/RecBole/releases/tag/v0.2.1).\n\n**01/15/2021**: 我们发布了 [v0.2.0](https://github.com/RUCAIBox/RecBole/releases/tag/v0.2.0).\n\n**12/10/2020**: 我们发布了[RecBole小白入门系列中文博客（持续更新中）](https://blog.csdn.net/Turinger_2000/article/details/111182852) 。\n\n**12/06/2020**: 我们发布了 RecBole [v0.1.2](https://github.com/RUCAIBox/RecBole/releases/tag/v0.1.2).\n\n**11/29/2020**: 我们在三个不同大小的数据集上进行了时间和内存开销的初步测试，\n并提供了 [测试结果](https://github.com/RUCAIBox/RecBole#time-and-memory-costs) 以供参考。\n\n**11/03/2020**: 我们发布了第一版 RecBole **v0.1.1**.\n\n\n## 安装\nRecBole可以在以下几种系统上运行:\n\n* Linux\n* Windows 10\n* macOS X\n\nRecBole需要在python 3.7或更高的环境下运行。\n\nRecBole要求torch版本在1.7.0及以上，如果你想在GPU上运行RecBole，请确保你的CUDA版本或CUDAToolkit版本在9.2及以上。\n这需要你的NVIDIA驱动版本为396.26或以上（在linux系统上）或者为397.44或以上（在Windows10系统上）。\n\n\n### 从Conda安装\n\n```bash\nconda install -c aibox recbole\n```\n\n### 从pip安装\n\n```bash\npip install recbole\n```\n\n### 从源文件安装\n```bash\ngit clone https://github.com/RUCAIBox/RecBole.git && cd RecBole\npip install -e . --verbose\n```\n\n## 快速上手\n如果你从GitHub下载了RecBole的源码，你可以使用提供的脚本进行简单的使用：\n\n```bash\npython run_recbole.py\n```\n\n这个例子将会在ml-100k这个数据集上进行BPR模型的训练和测试。\n\n一般来说，这个例子将花费不到一分钟的时间，我们会得到一些类似下面的输出：\n\n```\nINFO ml-100k\nThe number of users: 944\nAverage actions of users: 106.04453870625663\nThe number of items: 1683\nAverage actions of items: 59.45303210463734\nThe number of inters: 100000\nThe sparsity of the dataset: 93.70575143257098%\n\nINFO Evaluation Settings:\nGroup by user_id\nOrdering: {'strategy': 'shuffle'}\nSplitting: {'strategy': 'by_ratio', 'ratios': [0.8, 0.1, 0.1]}\nNegative Sampling: {'strategy': 'full', 'distribution': 'uniform'}\n\nINFO BPRMF(\n    (user_embedding): Embedding(944, 64)\n    (item_embedding): Embedding(1683, 64)\n    (loss): BPRLoss()\n)\nTrainable parameters: 168128\n\nINFO epoch 0 training [time: 0.27s, train loss: 27.7231]\nINFO epoch 0 evaluating [time: 0.12s, valid_score: 0.021900]\nINFO valid result:\nrecall@10: 0.0073  mrr@10: 0.0219  ndcg@10: 0.0093  hit@10: 0.0795  precision@10: 0.0088\n\n...\n\nINFO epoch 63 training [time: 0.19s, train loss: 4.7660]\nINFO epoch 63 evaluating [time: 0.08s, valid_score: 0.394500]\nINFO valid result:\nrecall@10: 0.2156  mrr@10: 0.3945  ndcg@10: 0.2332  hit@10: 0.7593  precision@10: 0.1591\n\nINFO Finished training, best eval result in epoch 52\nINFO Loading model structure and parameters from saved/***.pth\nINFO best valid result:\nrecall@10: 0.2169  mrr@10: 0.4005  ndcg@10: 0.235  hit@10: 0.7582  precision@10: 0.1598\nINFO test result:\nrecall@10: 0.2368  mrr@10: 0.4519  ndcg@10: 0.2768  hit@10: 0.7614  precision@10: 0.1901\n```\n\n如果你要改参数，例如 ``learning_rate``, ``embedding_size``, 只需根据您的需求增加额外的参数，例如：\n\n```bash\npython run_recbole.py --learning_rate=0.0001 --embedding_size=128\n```\n\n如果你想改变运行模型，只需要在执行脚本时添加额外的设置参数即可：\n\n```bash\npython run_recbole.py --model=[model_name]\n```\n\n\n### 自动调参\n伯乐还支持自动调参功能，打开`RecBole/hyper.test` 然后设置一系列你想要调整的超参数进行自动搜索。下面有两种方式来进行超参搜索：\n* **loguniform**：参数会遵循均匀分布随机选取。\n* **choice**: 参数会从所设置的列表中选择每个离散值进行搜索。\n\n下面是一个`hyper.test`的例子\n```\nlearning_rate loguniform -8, 0\nembedding_size choice [64, 96 , 128]\ntrain_batch_size choice [512, 1024, 2048]\nmlp_hidden_size choice ['[64, 64, 64]','[128, 128]']\n```\n然后在命令行中运行：\n```\npython run_hyper.py --model=[model_name] --dataset=[data_name] --config_files=xxxx.yaml --params_file=hyper.test\ne.g.\npython run_hyper.py --model=BPR --dataset=ml-100k --config_files=test.yaml --params_file=hyper.test\n```\n注意：`--config_files=test.yaml`是可选的，如果你没有任何客制化设置，这个选项可以不添加，会默认使用该模型的默认配置。\n\n这个过程可能会花费一段时间，请耐心等待：\n```\nrunning parameters:                                                                                                                    \n{'embedding_size': 64, 'learning_rate': 0.005947474154838498, 'mlp_hidden_size': '[64,64,64]', 'train_batch_size': 512}                \n  0%|                                                                                           | 0/18 [00:00<?, ?trial/s, best loss=?]\n```\n你可以在我们的[docs](https://recbole.io/docs/user_guide/usage/parameter_tuning.html)中找到更多关于超参调试的信息。\n\n## 时间和内存开销\n我们构建了初步的实验来测试三个不同大小的数据集（小、中、大）的时间和内存开销。\n有关详细信息，请单击以下链接。\n\n* [General recommendation models](asset/time_test_result/General_recommendation.md)<br>\n* [Sequential recommendation models](asset/time_test_result/Sequential_recommendation.md)<br>\n* [Context-aware recommendation models](asset/time_test_result/Context-aware_recommendation.md)<br>\n* [Knowledge-based recommendation models](asset/time_test_result/Knowledge-based_recommendation.md)<br>\n\nNOTE: 我们的测试结果只给出了RecBole库中实现模型的大致时间和内存开销（基于我们的机器服务器）。\n我们欢迎任何关于测试、实现的建议。我们将继续改进我们的实现，并更新这些测试结果。\n\n\n## RecBole 重要发布\n| Releases | Date       |\n|----------|------------|\n| v1.2.0   | 11/01/2023 |\n| v1.1.1   | 10/05/2022 |\n| v1.0.0   | 09/17/2021 |\n| v0.2.0   | 01/15/2021 |\n| v0.1.1   | 11/03/2020 |\n\n\n## 开源贡献\n作为一个拥有从数据处理、模型开发、算法训练到科学评测的一站式全流程托管框架，RecBole 共有 **11** 个相关的 GitHub 项目，包括：\n- 2 个版本 ([RecBole 1.0](https://github.com/RUCAIBox/RecBole) 和 [RecBole 2.0](https://github.com/RUCAIBox/RecBole2.0))；\n- 8 个扩展工具子包 ([RecBole-MetaRec](https://github.com/nuster1128/RecBole-MetaRec)、[RecBole-DA](https://github.com/RUCAIBox/RecBole-DA)、[RecBole-Debias](https://github.com/JingsenZhang/RecBole-Debias)、[RecBole-FairRec](https://github.com/TangJiakai/RecBole-FairRec)、[RecBole-CDR](https://github.com/RUCAIBox/RecBole-CDR)、[RecBole-TRM](https://github.com/RUCAIBox/RecBole-TRM)、[RecBole-GNN](https://github.com/RUCAIBox/RecBole-GNN) 和 [RecBole-PJF](https://github.com/RUCAIBox/RecBole-PJF))；\n- 1 个数据集仓库 (<a href=\"https://github.com/RUCAIBox/RecSysDatasets\">RecSysDatasets</a>)。\n\n在下表中，我们总结了基于 RecBole 的 GitHub 项目的开源贡献。\n\n| **Projects**                                                 | **Stars**                                                    | **Forks**                                                    | **Issues**                                                   | **Pull requests**                                            |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| [**RecBole**](https://github.com/RUCAIBox/RecBole)           | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole?style=social&logo=github)](https://github.com/RUCAIBox/RecBole/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole?style=social&logo=git)](https://github.com/RUCAIBox/RecBole/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole/pulls) |\n| [**RecBole2.0**](https://github.com/RUCAIBox/RecBole2.0)     | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole2.0?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole2.0/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole2.0?style=social&logo=github)](https://github.com/RUCAIBox/RecBole2.0/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole2.0?style=social&logo=git)](https://github.com/RUCAIBox/RecBole2.0/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole2.0?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole2.0/pulls) |\n| [**RecBole-DA**](https://github.com/RUCAIBox/RecBole-DA)     | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-DA?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-DA/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-DA?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-DA/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-DA?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-DA/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-DA?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-DA/pulls) |\n| [**RecBole-MetaRec**](https://github.com/nuster1128/RecBole-MetaRec) | [![Stars](https://img.shields.io/github/stars/nuster1128/RecBole-MetaRec?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/nuster1128/RecBole-MetaRec/stargazers) | [![Forks](https://img.shields.io/github/forks/nuster1128/RecBole-MetaRec?style=social&logo=github)](https://github.com/nuster1128/RecBole-MetaRec/network/members) | [![Issues](https://img.shields.io/github/issues-closed/nuster1128/RecBole-MetaRec?style=social&logo=git)](https://github.com/nuster1128/RecBole-MetaRec/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/nuster1128/RecBole-MetaRec?style=social&logo=githubactions)](https://github.com/nuster1128/RecBole-MetaRec/pulls) |\n| [**RecBole-Debias**](https://github.com/JingsenZhang/RecBole-Debias) | [![Stars](https://img.shields.io/github/stars/JingsenZhang/RecBole-Debias?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/JingsenZhang/RecBole-Debias/stargazers) | [![Forks](https://img.shields.io/github/forks/JingsenZhang/RecBole-Debias?style=social&logo=github)](https://github.com/JingsenZhang/RecBole-Debias/network/members) | [![Issues](https://img.shields.io/github/issues-closed/JingsenZhang/RecBole-Debias?style=social&logo=git)](https://github.com/JingsenZhang/RecBole-Debias/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/JingsenZhang/RecBole-Debias?style=social&logo=githubactions)](https://github.com/JingsenZhang/RecBole-Debias/pulls) |\n| [**RecBole-FairRec**](https://github.com/TangJiakai/RecBole-FairRec) | [![Stars](https://img.shields.io/github/stars/TangJiakai/RecBole-FairRec?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/TangJiakai/RecBole-FairRec/stargazers) | [![Forks](https://img.shields.io/github/forks/TangJiakai/RecBole-FairRec?style=social&logo=github)](https://github.com/TangJiakai/RecBole-FairRec/network/members) | [![Issues](https://img.shields.io/github/issues-closed/TangJiakai/RecBole-FairRec?style=social&logo=git)](https://github.com/TangJiakai/RecBole-FairRec/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/TangJiakai/RecBole-FairRec?style=social&logo=githubactions)](https://github.com/TangJiakai/RecBole-FairRec/pulls) |\n| [**RecBole-CDR**](https://github.com/RUCAIBox/RecBole-CDR)   | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-CDR?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-CDR/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-CDR?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-CDR/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-CDR?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-CDR/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-CDR?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-CDR/pulls) |\n| [**RecBole-GNN**](https://github.com/RUCAIBox/RecBole-GNN)   | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-GNN?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-GNN/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-GNN?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-GNN/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-GNN?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-GNN/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-GNN?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-GNN/pulls) |\n| [**RecBole-TRM**](https://github.com/RUCAIBox/RecBole-TRM)   | [![Stars](https://img.shields.io/github/stars/RUCAIBOX/RecBole-TRM?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBOX/RecBole-TRM/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-TRM?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-TRM/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-TRM?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-TRM/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-TRM?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-TRM/pulls) |\n| [**RecBole-PJF**](https://github.com/RUCAIBox/RecBole-PJF)   | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecBole-PJF?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecBole-PJF/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecBole-PJF?style=social&logo=github)](https://github.com/RUCAIBox/RecBole-PJF/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecBole-PJF?style=social&logo=git)](https://github.com/RUCAIBox/RecBole-PJF/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecBole-PJF?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecBole-PJF/pulls) |\n| [**RecSysDatasets**](https://github.com/RUCAIBox/RecSysDatasets) | [![Stars](https://img.shields.io/github/stars/RUCAIBox/RecSysDatasets?style=social&logo=ReverbNation&logoColor=yellow)](https://github.com/RUCAIBox/RecSysDatasets/stargazers) | [![Forks](https://img.shields.io/github/forks/RUCAIBox/RecSysDatasets?style=social&logo=github)](https://github.com/RUCAIBox/RecSysDatasets/network/members) | [![Issues](https://img.shields.io/github/issues-closed/RUCAIBox/RecSysDatasets?style=social&logo=git)](https://github.com/RUCAIBox/RecSysDatasets/issues) | [![Pull requests](https://img.shields.io/github/issues-pr-closed/RUCAIBox/RecSysDatasets?style=social&logo=githubactions)](https://github.com/RUCAIBox/RecSysDatasets/pulls) |\n\n\n## 贡献\n\n如果您遇到错误或有任何建议，请通过 [Issue](https://github.com/RUCAIBox/RecBole/issues) 进行反馈\n\n我们欢迎关于修复错误、添加新特性的任何贡献。\n\n如果想贡献代码，请先在issue中提出问题，然后再提PR。\n\n我们对[@tszumowski](https://github.com/tszumowski), [@rowedenny](https://github.com/rowedenny), [@deklanw](https://github.com/deklanw) 等用户提出的建议表示感谢。\n\n我们也对[@rowedenny](https://github.com/rowedenny), [@deklanw](https://github.com/deklanw) 等用户做出的贡献表示感谢。\n\n\n## 引用\n如果你觉得 RecBole 对你的科研工作有帮助，请引用我们的论文：[RecBole[1.0]](https://arxiv.org/abs/2011.01731)，[RecBole[2.0]](https://dl.acm.org/doi/abs/10.1145/3459637.3482016) 和 [RecBole[1.2.0]](https://dl.acm.org/doi/10.1145/3539618.3591889)。\n\n```bibtex\n@inproceedings{recbole[1.0],\n  author    = {Wayne Xin Zhao and Shanlei Mu and Yupeng Hou and Zihan Lin and Yushuo Chen and Xingyu Pan and Kaiyuan Li and Yujie Lu and Hui Wang and Changxin Tian and Yingqian Min and Zhichao Feng and Xinyan Fan and Xu Chen and Pengfei Wang and Wendi Ji and Yaliang Li and Xiaoling Wang and Ji{-}Rong Wen},\n  title     = {RecBole: Towards a Unified, Comprehensive and Efficient Framework for Recommendation Algorithms},\n  booktitle = {{CIKM}},\n  pages     = {4653--4664},\n  publisher = {{ACM}},\n  year      = {2021}\n}\n@inproceedings{recbole[2.0],\n  author    = {Wayne Xin Zhao and Yupeng Hou and Xingyu Pan and Chen Yang and Zeyu Zhang and Zihan Lin and Jingsen Zhang and Shuqing Bian and Jiakai Tang and Wenqi Sun and Yushuo Chen and Lanling Xu and Gaowei Zhang and Zhen Tian and Changxin Tian and Shanlei Mu and Xinyan Fan and Xu Chen and Ji{-}Rong Wen},\n  title     = {RecBole 2.0: Towards a More Up-to-Date Recommendation Library},\n  booktitle = {{CIKM}},\n  pages     = {4722--4726},\n  publisher = {{ACM}},\n  year      = {2022}\n}\n@inproceedings{recbole[1.2.0],\n  author    = {Lanling Xu and Zhen Tian and Gaowei Zhang and Junjie Zhang and Lei Wang and Bowen Zheng and Yifan Li and Jiakai Tang and Zeyu Zhang and Yupeng Hou and Xingyu Pan and Wayne Xin Zhao and Xu Chen and Ji{-}Rong Wen},\n  title     = {Towards a More User-Friendly and Easy-to-Use Benchmark Library for Recommender Systems},\n  booktitle = {{SIGIR}},\n  pages     = {2837--2847},\n  publisher = {{ACM}},\n  year      = {2023}\n}\n```\n\n\n## 项目团队\nRecBole由 [中国人民大学, 北京邮电大学, 华东师范大学](https://www.recbole.io/cn/about.html) 的同学和老师进行开发和维护。 \n\n以下是伯乐项目的首席开发人员名单。他们是伯乐项目的灵魂人物，为伯乐项目的开发作出了重大贡献！\n\n|         时间段          |        版本         |               首席开发者                 |               论文               |\n| :-------------------: | :--------------------: | :--------------------------------------------: | ---------------------------------------------- |\n| 2020年6月<br> ~<br> 2020年11月 |        v0.1.1         |  牟善磊 ([@ShanleiMu](https://github.com/ShanleiMu)), 侯宇蓬 ([@hyp1231](https://github.com/@hyp1231)),<br> 林子涵 ([@linzihan-backforward](https://github.com/linzihan-backforward)), 李凯元 ([@tsotfsk](https://github.com/tsotfsk))| [PDF](https://dl.acm.org/doi/abs/10.1145/3459637.3482016) |\n|   2020年11月<br> ~ <br> 2022年7月   | v0.1.2 ~ v1.0.1 |      陈昱硕 ([@chenyushuo](https://github.com/https://github.com/chenyushuo)), 潘星宇 ([@2017pxy](https://github.com/2017pxy))    | [PDF](https://dl.acm.org/doi/abs/10.1145/3459637.3482016)    |\n| 2022年7月<br/> ~ <br/> 2023年11月 | v1.1.0 ~ v1.1.1 | 徐澜玲 ([@Sherry-XLL](https://github.com/Sherry-XLL)), 田震 ([@chenyuwuxin](https://github.com/chenyuwuxin)), 张高玮 ([@Wicknight](https://github.com/Wicknight)), 王磊 ([@Paitesanshi](https://github.com/Paitesanshi)), 张君杰 ([@leoleojie](https://github.com/leoleojie)) | [PDF](https://dl.acm.org/doi/10.1145/3539618.3591889) |\n| 2023年11月<br/> ~ <br/> 现在 | v1.2.0 | 郑博文 ([@zhengbw0324](https://github.com/zhengbw0324)), 马辰 ([@Yilu114](https://github.com/Yilu114)) | [PDF](https://dl.acm.org/doi/10.1145/3539618.3591889) |\n\n## 免责声明\nRecBole 基于 [MIT License](./LICENSE) 进行开发，本项目的所有数据和代码只能被用于学术目的。\n\n## 致谢\n\n本成果受到国家自然科学基金重点项目（No. 61832017）支持。\n"
        },
        {
          "name": "asset",
          "type": "tree",
          "content": null
        },
        {
          "name": "conda",
          "type": "tree",
          "content": null
        },
        {
          "name": "dataset",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hyper.test",
          "type": "blob",
          "size": 0.15234375,
          "content": "learning_rate loguniform -8,0\r\nembedding_size choice [64,96,128]\r\ntrain_batch_size choice [512,1024,2048]\r\nmlp_hidden_size choice ['[64,64,64]','[128,128]']"
        },
        {
          "name": "recbole",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2734375,
          "content": "torch>=1.10.0\nnumpy>=1.17.2\nscipy>=1.6.0\nhyperopt==0.2.5\npandas>=1.3.0\ntqdm>=4.48.2\nscikit_learn>=0.23.2\npyyaml>=5.1.0\ncolorlog>=4.7.2\ncolorama>=0.4.4\ntensorboard>=2.5.0\nthop>=0.1.1.post2207130030\nray>=1.13.0, <=2.6.3\ntabulate>=0.8.10 \nplotly>=4.0.0\ntexttable>=0.9.0\npsutil>=5.9.0"
        },
        {
          "name": "run_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_hyper.py",
          "type": "blob",
          "size": 4.455078125,
          "content": "# -*- coding: utf-8 -*-\n# @Time   : 2020/7/24 15:57\n# @Author : Shanlei Mu\n# @Email  : slmu@ruc.edu.cn\n# @File   : run_hyper.py\n# UPDATE:\n# @Time   : 2020/8/20 21:17, 2020/8/29, 2022/7/13, 2022/7/18\n# @Author : Zihan Lin, Yupeng Hou, Gaowei Zhang, Lei Wang\n# @Email  : linzihan.super@foxmail.com, houyupeng@ruc.edu.cn, zgw15630559577@163.com, zxcptss@gmail.com\n\nimport argparse\nimport os\nimport numpy as np\n\nfrom recbole.trainer import HyperTuning\nfrom recbole.quick_start import objective_function\nimport ray\nfrom ray import tune\nfrom ray.tune.schedulers import ASHAScheduler\nimport math\n\n\ndef hyperopt_tune(args):\n    # plz set algo='exhaustive' to use exhaustive search, in this case, max_evals is auto set\n    # in other case, max_evals needs to be set manually\n    config_file_list = (\n        args.config_files.strip().split(\" \") if args.config_files else None\n    )\n    hp = HyperTuning(\n        objective_function,\n        algo=\"exhaustive\",\n        early_stop=10,\n        max_evals=100,\n        params_file=args.params_file,\n        fixed_config_file_list=config_file_list,\n        display_file=args.display_file,\n    )\n    hp.run()\n    hp.export_result(output_file=args.output_file)\n    print(\"best params: \", hp.best_params)\n    print(\"best result: \")\n    print(hp.params2result[hp.params2str(hp.best_params)])\n\n\ndef ray_tune(args):\n    config_file_list = (\n        args.config_files.strip().split(\" \") if args.config_files else None\n    )\n    config_file_list = (\n        [os.path.join(os.getcwd(), file) for file in config_file_list]\n        if args.config_files\n        else None\n    )\n    params_file = (\n        os.path.join(os.getcwd(), args.params_file) if args.params_file else None\n    )\n    ray.init()\n    tune.register_trainable(\"train_func\", objective_function)\n    config = {}\n    with open(params_file, \"r\") as fp:\n        for line in fp:\n            para_list = line.strip().split(\" \")\n            if len(para_list) < 3:\n                continue\n            para_name, para_type, para_value = (\n                para_list[0],\n                para_list[1],\n                \"\".join(para_list[2:]),\n            )\n            if para_type == \"choice\":\n                para_value = eval(para_value)\n                config[para_name] = tune.choice(para_value)\n            elif para_type == \"uniform\":\n                low, high = para_value.strip().split(\",\")\n                config[para_name] = tune.uniform(float(low), float(high))\n            elif para_type == \"quniform\":\n                low, high, q = para_value.strip().split(\",\")\n                config[para_name] = tune.quniform(float(low), float(high), float(q))\n            elif para_type == \"loguniform\":\n                low, high = para_value.strip().split(\",\")\n                config[para_name] = tune.loguniform(\n                    math.exp(float(low)), math.exp(float(high))\n                )\n            else:\n                raise ValueError(\"Illegal param type [{}]\".format(para_type))\n    # choose different schedulers to use different tuning optimization algorithms\n    # For details, please refer to Ray's official website https://docs.ray.io\n    scheduler = ASHAScheduler(\n        metric=\"recall@10\", mode=\"max\", max_t=10, grace_period=1, reduction_factor=2\n    )\n\n    local_dir = \"./ray_log\"\n    result = tune.run(\n        tune.with_parameters(objective_function, config_file_list=config_file_list),\n        config=config,\n        num_samples=5,\n        log_to_file=args.output_file,\n        scheduler=scheduler,\n        local_dir=local_dir,\n        resources_per_trial={\"gpu\": 1},\n    )\n\n    best_trial = result.get_best_trial(\"recall@10\", \"max\", \"last\")\n    print(\"best params: \", best_trial.config)\n    print(\"best result: \", best_trial.last_result)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--config_files\", type=str, default=None, help=\"fixed config files\"\n    )\n    parser.add_argument(\"--params_file\", type=str, default=None, help=\"parameters file\")\n    parser.add_argument(\n        \"--output_file\", type=str, default=\"hyper_example.result\", help=\"output file\"\n    )\n    parser.add_argument(\n        \"--display_file\", type=str, default=None, help=\"visualization file\"\n    )\n    parser.add_argument(\"--tool\", type=str, default=\"Hyperopt\", help=\"tuning tool\")\n    args, _ = parser.parse_known_args()\n\n    if args.tool == \"Hyperopt\":\n        hyperopt_tune(args)\n    elif args.tool == \"Ray\":\n        ray_tune(args)\n    else:\n        raise ValueError(f\"The tool [{args.tool}] should in ['Hyperopt', 'Ray']\")\n"
        },
        {
          "name": "run_recbole.py",
          "type": "blob",
          "size": 1.5908203125,
          "content": "# @Time   : 2020/7/20\n# @Author : Shanlei Mu\n# @Email  : slmu@ruc.edu.cn\n\n# UPDATE\n# @Time   : 2022/7/8, 2020/10/3, 2020/10/1\n# @Author : Zhen Tian, Yupeng Hou, Zihan Lin\n# @Email  : chenyuwuxinn@gmail.com, houyupeng@ruc.edu.cn, zhlin@ruc.edu.cn\n\nimport argparse\n\nfrom recbole.quick_start import run\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--model\", \"-m\", type=str, default=\"BPR\", help=\"name of models\")\n    parser.add_argument(\n        \"--dataset\", \"-d\", type=str, default=\"ml-100k\", help=\"name of datasets\"\n    )\n    parser.add_argument(\"--config_files\", type=str, default=None, help=\"config files\")\n    parser.add_argument(\n        \"--nproc\", type=int, default=1, help=\"the number of process in this group\"\n    )\n    parser.add_argument(\n        \"--ip\", type=str, default=\"localhost\", help=\"the ip of master node\"\n    )\n    parser.add_argument(\n        \"--port\", type=str, default=\"5678\", help=\"the port of master node\"\n    )\n    parser.add_argument(\n        \"--world_size\", type=int, default=-1, help=\"total number of jobs\"\n    )\n    parser.add_argument(\n        \"--group_offset\",\n        type=int,\n        default=0,\n        help=\"the global rank offset of this group\",\n    )\n\n    args, _ = parser.parse_known_args()\n\n    config_file_list = (\n        args.config_files.strip().split(\" \") if args.config_files else None\n    )\n\n    run(\n        args.model,\n        args.dataset,\n        config_file_list=config_file_list,\n        nproc=args.nproc,\n        world_size=args.world_size,\n        ip=args.ip,\n        port=args.port,\n        group_offset=args.group_offset,\n    )\n"
        },
        {
          "name": "run_recbole_group.py",
          "type": "blob",
          "size": 2.8681640625,
          "content": "# @Time   : 2023/2/13\n# @Author : Gaowei Zhang\n# @Email  : zgw2022101006@ruc.edu.cn\n\n\nimport argparse\n\nfrom recbole.quick_start import run\nfrom recbole.utils import list_to_latex\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--model_list\", \"-m\", type=str, default=\"BPR\", help=\"name of models\"\n    )\n    parser.add_argument(\n        \"--dataset\", \"-d\", type=str, default=\"ml-100k\", help=\"name of datasets\"\n    )\n    parser.add_argument(\"--config_files\", type=str, default=None, help=\"config files\")\n    parser.add_argument(\n        \"--valid_latex\", type=str, default=\"./latex/valid.tex\", help=\"config files\"\n    )\n    parser.add_argument(\n        \"--test_latex\", type=str, default=\"./latex/test.tex\", help=\"config files\"\n    )\n    parser.add_argument(\n        \"--nproc\", type=int, default=1, help=\"the number of process in this group\"\n    )\n    parser.add_argument(\n        \"--ip\", type=str, default=\"localhost\", help=\"the ip of master node\"\n    )\n    parser.add_argument(\n        \"--port\", type=str, default=\"5678\", help=\"the port of master node\"\n    )\n    parser.add_argument(\n        \"--world_size\", type=int, default=-1, help=\"total number of jobs\"\n    )\n    parser.add_argument(\n        \"--group_offset\",\n        type=int,\n        default=0,\n        help=\"the global rank offset of this group\",\n    )\n\n    args, _ = parser.parse_known_args()\n\n    model_list = args.model_list.strip().split(\",\")\n    config_file_list = (\n        args.config_files.strip().split(\" \") if args.config_files else None\n    )\n    valid_file = args.valid_latex.strip()\n    test_file = args.test_latex.strip()\n\n    valid_result_list = []\n    test_result_list = []\n\n    run_times = len(model_list)\n\n    for idx in range(run_times):\n        model = model_list[idx]\n\n        valid_res_dict = {\"Model\": model}\n        test_res_dict = {\"Model\": model}\n        result = run(\n            model,\n            args.dataset,\n            config_file_list=config_file_list,\n            nproc=args.nproc,\n            world_size=args.world_size,\n            ip=args.ip,\n            port=args.port,\n            group_offset=args.group_offset,\n        )\n        valid_res_dict.update(result[\"best_valid_result\"])\n        test_res_dict.update(result[\"test_result\"])\n        bigger_flag = result[\"valid_score_bigger\"]\n        subset_columns = list(result[\"best_valid_result\"].keys())\n\n        valid_result_list.append(valid_res_dict)\n        test_result_list.append(test_res_dict)\n\n    df_valid, tex_valid = list_to_latex(\n        convert_list=valid_result_list,\n        bigger_flag=bigger_flag,\n        subset_columns=subset_columns,\n    )\n    df_test, tex_test = list_to_latex(\n        convert_list=test_result_list,\n        bigger_flag=bigger_flag,\n        subset_columns=subset_columns,\n    )\n\n    with open(valid_file, \"w\") as f:\n        f.write(tex_valid)\n    with open(test_file, \"w\") as f:\n        f.write(tex_test)\n"
        },
        {
          "name": "run_test.sh",
          "type": "blob",
          "size": 0.865234375,
          "content": "#!/bin/bash\n\n\npython -m pytest -v tests/metrics\necho \"metrics tests finished\"\n\npython -m pytest -v tests/config/test_config.py\npython -m pytest -v tests/config/test_overall.py\nexport PYTHONPATH=.\npython tests/config/test_command_line.py --use_gpu=False --valid_metric=Recall@10  --metrics=\"['Recall']\" --epochs=200 --learning_rate=0.3\nif [ $? -ne 0 ]\nthen\n  echo -e \"\\033[31mFailed in test_command_line.py\\033[0m\"\nfi\necho \"config tests finished\"\n\npython -m pytest -v tests/evaluation_setting\necho \"evaluation_setting tests finished\"\n\npython -m pytest -v tests/model/test_model_auto.py\npython -m pytest -v tests/model/test_model_manual.py\necho \"model tests finished\"\n\npython -m pytest -v tests/data/test_dataset.py\npython -m pytest -v tests/data/test_dataloader.py\necho \"data tests finished\"\n\npython -m pytest -v tests/hyper_tuning/test_hyper_tuning.py\necho \"hyper_tuning tests finished\""
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.119140625,
          "content": "from __future__ import absolute_import\nfrom __future__ import print_function\nfrom __future__ import division\n\nimport os\n\nfrom setuptools import setup, find_packages\n\ninstall_requires = [\n    \"torch>=1.10.0\",\n    \"numpy>=1.17.2\",\n    \"scipy>=1.6.0\",\n    \"pandas>=1.3.0\",\n    \"tqdm>=4.48.2\",\n    \"colorlog==4.7.2\",\n    \"colorama==0.4.4\",\n    \"scikit_learn>=0.23.2\",\n    \"pyyaml>=5.1.0\",\n    \"tensorboard>=2.5.0\",\n    \"thop>=0.1.1.post2207130030\",\n    \"tabulate>=0.8.10\",\n    \"plotly>=4.0.0\",\n    \"texttable>=0.9.0\",\n    \"psutil>=5.9.0\",\n    \"ray>=1.13.0, <=2.6.3\",\n]\n\nsetup_requires = []\n\nextras_require = {\"hyperopt\": [\"hyperopt==0.2.5\"]}\n\nclassifiers = [\"License :: OSI Approved :: MIT License\"]\n\nlong_description = (\n    \"RecBole is developed based on Python and PyTorch for \"\n    \"reproducing and developing recommendation algorithms in \"\n    \"a unified, comprehensive and efficient framework for \"\n    \"research purpose. In the first version, our library \"\n    \"includes 53 recommendation algorithms, covering four \"\n    \"major categories: General Recommendation, Sequential \"\n    \"Recommendation, Context-aware Recommendation and \"\n    \"Knowledge-based Recommendation. View RecBole homepage \"\n    \"for more information: https://recbole.io\"\n)\n\n# Readthedocs requires Sphinx extensions to be specified as part of\n# install_requires in order to build properly.\non_rtd = os.environ.get(\"READTHEDOCS\", None) == \"True\"\nif on_rtd:\n    install_requires.extend(setup_requires)\n\nsetup(\n    name=\"recbole\",\n    version=\"1.2.0\",  # please remember to edit recbole/__init__.py in response, once updating the version\n    description=\"A unified, comprehensive and efficient recommendation library\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/RUCAIBox/RecBole\",\n    author=\"RecBoleTeam\",\n    author_email=\"recbole@outlook.com\",\n    packages=[package for package in find_packages() if package.startswith(\"recbole\")],\n    include_package_data=True,\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    extras_require=extras_require,\n    zip_safe=False,\n    classifiers=classifiers,\n)\n"
        },
        {
          "name": "significance_test.py",
          "type": "blob",
          "size": 3.572265625,
          "content": "# @Time   : 2023/2/11\n# @Author : Jiakai Tang\n# @Email  : tangjiakai5704@ruc.edu.cn\n\n# UPDATE\n# @Time   :\n# @Author :\n# @Email  :\n\nimport argparse\nimport random\nfrom collections import defaultdict\n\nfrom scipy import stats\n\nfrom recbole.quick_start import run\n\n\ndef run_test(\n    model,\n    dataset,\n    config_files,\n    seeds,\n    nproc,\n    world_size,\n    ip,\n    port,\n    group_offset,\n):\n    results = defaultdict(list)\n    for seed in seeds:\n        res = run(\n            model,\n            dataset,\n            config_files,\n            config_dict={\"seed\": seed},\n            nproc=nproc,\n            world_size=world_size,\n            ip=ip,\n            port=port,\n            group_offset=group_offset,\n        )\n        for _key, _value in res[\"test_result\"].items():\n            results[_key].append(_value)\n    return results\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--model_ours\", type=str, default=\"BPR\", help=\"name of our models\"\n    )\n    parser.add_argument(\n        \"--model_baseline\", type=str, default=\"NeuMF\", help=\"name of baseline models\"\n    )\n    parser.add_argument(\n        \"--dataset\", \"-d\", type=str, default=\"ml-100k\", help=\"name of datasets\"\n    )\n    parser.add_argument(\n        \"--config_files\",\n        type=str,\n        default=None,\n        help=\"config files: 1st is our model and 2ed is baseline\",\n    )\n    parser.add_argument(\n        \"--st_seed\", type=int, default=2023, help=\"st_seed for generating random seeds\"\n    )\n    parser.add_argument(\n        \"--run_times\", type=int, default=10, help=\"run times for each model\"\n    )\n    parser.add_argument(\n        \"--nproc\", type=int, default=1, help=\"the number of process in this group\"\n    )\n    parser.add_argument(\n        \"--ip\", type=str, default=\"localhost\", help=\"the ip of master node\"\n    )\n    parser.add_argument(\n        \"--port\", type=str, default=\"5678\", help=\"the port of master node\"\n    )\n    parser.add_argument(\n        \"--world_size\", type=int, default=-1, help=\"total number of jobs\"\n    )\n    parser.add_argument(\n        \"--group_offset\",\n        type=int,\n        default=0,\n        help=\"the global rank offset of this group\",\n    )\n\n    args, _ = parser.parse_known_args()\n\n    config_file_list = (\n        args.config_files.strip().split(\" \") if args.config_files else None\n    )\n\n    if len(config_file_list) != 2:\n        raise ValueError(\"You have to specify 2 config files\")\n\n    random.seed(args.st_seed)\n    random_seeds = [random.randint(0, 2**32 - 1) for _ in range(args.run_times)]\n\n    config_file_ours, config_file_baseline = config_file_list\n\n    result_ours = run_test(\n        args.model_ours,\n        args.dataset,\n        [config_file_ours],\n        random_seeds,\n        args.nproc,\n        args.world_size,\n        args.ip,\n        args.port,\n        args.group_offset,\n    )\n    result_baseline = run_test(\n        args.model_baseline,\n        args.dataset,\n        [config_file_baseline],\n        random_seeds,\n        args.nproc,\n        args.world_size,\n        args.ip,\n        args.port,\n        args.group_offset,\n    )\n\n    final_result = {}\n    for key, value in result_ours.items():\n        if key not in result_baseline:\n            continue\n        ours = value\n        baseline = result_baseline[key]\n        final_result[key] = stats.ttest_rel(ours, baseline, alternative=\"less\")\n\n    with open(\"significant_test.txt\", \"w\") as f:\n        for key, value in final_result.items():\n            print(f\"{key}: statistic={value.statistic}, pvalue={value.pvalue}\\n\")\n            f.write(f\"{key}: statistic={value.statistic}, pvalue={value.pvalue}\\n\")\n"
        },
        {
          "name": "style.cfg",
          "type": "blob",
          "size": 11.6201171875,
          "content": "[style]\n# Align closing bracket with visual indentation.\nalign_closing_bracket_with_visual_indent=True\n\n# Allow dictionary keys to exist on multiple lines. For example:\n#\n#   x = {\n#       ('this is the first element of a tuple',\n#        'this is the second element of a tuple'):\n#            value,\n#   }\nallow_multiline_dictionary_keys=False\n\n# Allow lambdas to be formatted on more than one line.\nallow_multiline_lambdas=False\n\n# Allow splitting before a default / named assignment in an argument list.\nallow_split_before_default_or_named_assigns=True\n\n# Allow splits before the dictionary value.\nallow_split_before_dict_value=True\n\n#   Let spacing indicate operator precedence. For example:\n#\n#     a = 1 * 2 + 3 / 4\n#     b = 1 / 2 - 3 * 4\n#     c = (1 + 2) * (3 - 4)\n#     d = (1 - 2) / (3 + 4)\n#     e = 1 * 2 - 3\n#     f = 1 + 2 + 3 + 4\n#\n# will be formatted as follows to indicate precedence:\n#\n#     a = 1*2 + 3/4\n#     b = 1/2 - 3*4\n#     c = (1+2) * (3-4)\n#     d = (1-2) / (3+4)\n#     e = 1*2 - 3\n#     f = 1 + 2 + 3 + 4\n#\narithmetic_precedence_indication=False\n\n# Number of blank lines surrounding top-level function and class\n# definitions.\nblank_lines_around_top_level_definition=2\n\n# Insert a blank line before a class-level docstring.\nblank_line_before_class_docstring=False\n\n# Insert a blank line before a module docstring.\nblank_line_before_module_docstring=True\n\n# Insert a blank line before a 'def' or 'class' immediately nested\n# within another 'def' or 'class'. For example:\n#\n#   class Foo:\n#                      # <------ this blank line\n#     def method():\n#       ...\nblank_line_before_nested_class_or_def=True\n\n# Do not split consecutive brackets. Only relevant when\n# dedent_closing_brackets is set. For example:\n#\n#    call_func_that_takes_a_dict(\n#        {\n#            'key1': 'value1',\n#            'key2': 'value2',\n#        }\n#    )\n#\n# would reformat to:\n#\n#    call_func_that_takes_a_dict({\n#        'key1': 'value1',\n#        'key2': 'value2',\n#    })\ncoalesce_brackets=True\n\n# The column limit.\ncolumn_limit=120\n\n# The style for continuation alignment. Possible values are:\n#\n# - SPACE: Use spaces for continuation alignment. This is default behavior.\n# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs or\n#   CONTINUATION_INDENT_WIDTH spaces) for continuation alignment.\n# - VALIGN-RIGHT: Vertically align continuation lines to multiple of\n#   INDENT_WIDTH columns. Slightly right (one tab or a few spaces) if\n#   cannot vertically align continuation lines with indent characters.\ncontinuation_align_style=SPACE\n\n# Indent width used for line continuations.\ncontinuation_indent_width=4\n\n# Put closing brackets on a separate line, dedented, if the bracketed\n# expression can't fit in a single line. Applies to all kinds of brackets,\n# including function definitions and calls. For example:\n#\n#   config = {\n#       'key1': 'value1',\n#       'key2': 'value2',\n#   }        # <--- this bracket is dedented and on a separate line\n#\n#   time_series = self.remote_client.query_entity_counters(\n#       entity='dev3246.region1',\n#       key='dns.query_latency_tcp',\n#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n#       start_ts=now()-timedelta(days=3),\n#       end_ts=now(),\n#   )        # <--- this bracket is dedented and on a separate line\ndedent_closing_brackets=True\n\n# Disable the heuristic which places each list element on a separate line\n# if the list is comma-terminated.\ndisable_ending_comma_heuristic=False\n\n# Place each dictionary entry onto its own line.\neach_dict_entry_on_separate_line=True\n\n# Require multiline dictionary even if it would normally fit on one line.\n# For example:\n#\n#   config = {\n#       'key1': 'value1'\n#   }\nforce_multiline_dict=False\n\n# The regex for an i18n comment. The presence of this comment stops\n# reformatting of that line, because the comments are required to be\n# next to the string they translate.\ni18n_comment=\n\n# The i18n function call names. The presence of this function stops\n# reformattting on that line, because the string it has cannot be moved\n# away from the i18n comment.\ni18n_function_call=\n\n# Indent blank lines.\nindent_blank_lines=False\n\n# Put closing brackets on a separate line, indented, if the bracketed\n# expression can't fit in a single line. Applies to all kinds of brackets,\n# including function definitions and calls. For example:\n#\n#   config = {\n#       'key1': 'value1',\n#       'key2': 'value2',\n#       }        # <--- this bracket is indented and on a separate line\n#\n#   time_series = self.remote_client.query_entity_counters(\n#       entity='dev3246.region1',\n#       key='dns.query_latency_tcp',\n#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n#       start_ts=now()-timedelta(days=3),\n#       end_ts=now(),\n#       )        # <--- this bracket is indented and on a separate line\nindent_closing_brackets=False\n\n# Indent the dictionary value if it cannot fit on the same line as the\n# dictionary key. For example:\n#\n#   config = {\n#       'key1':\n#           'value1',\n#       'key2': value1 +\n#               value2,\n#   }\nindent_dictionary_value=False\n\n# The number of columns to use for indentation.\nindent_width=4\n\n# Join short lines into one line. E.g., single line 'if' statements.\njoin_multiple_lines=True\n\n# Do not include spaces around selected binary operators. For example:\n#\n#   1 + 2 * 3 - 4 / 5\n#\n# will be formatted as follows when configured with \"*,/\":\n#\n#   1 + 2*3 - 4/5\nno_spaces_around_selected_binary_operators=\n\n# Use spaces around default or named assigns.\nspaces_around_default_or_named_assign=False\n\n# Adds a space after the opening '{' and before the ending '}' dict delimiters.\n#\n#   {1: 2}\n#\n# will be formatted as:\n#\n#   { 1: 2 }\nspaces_around_dict_delimiters=False\n\n# Adds a space after the opening '[' and before the ending ']' list delimiters.\n#\n#   [1, 2]\n#\n# will be formatted as:\n#\n#   [ 1, 2 ]\nspaces_around_list_delimiters=False\n\n# Use spaces around the power operator.\nspaces_around_power_operator=True\n\n# Use spaces around the subscript / slice operator.  For example:\n#\n#   my_list[1 : 10 : 2]\nspaces_around_subscript_colon=False\n\n# Adds a space after the opening '(' and before the ending ')' tuple delimiters.\n#\n#   (1, 2, 3)\n#\n# will be formatted as:\n#\n#   ( 1, 2, 3 )\nspaces_around_tuple_delimiters=False\n\n# The number of spaces required before a trailing comment.\n# This can be a single value (representing the number of spaces\n# before each trailing comment) or list of values (representing\n# alignment column values; trailing comments within a block will\n# be aligned to the first column value that is greater than the maximum\n# line length within the block). For example:\n#\n# With spaces_before_comment=5:\n#\n#   1 + 1 # Adding values\n#\n# will be formatted as:\n#\n#   1 + 1     # Adding values <-- 5 spaces between the end of the statement and comment\n#\n# With spaces_before_comment=15, 20:\n#\n#   1 + 1 # Adding values\n#   two + two # More adding\n#\n#   longer_statement # This is a longer statement\n#   short # This is a shorter statement\n#\n#   a_very_long_statement_that_extends_beyond_the_final_column # Comment\n#   short # This is a shorter statement\n#\n# will be formatted as:\n#\n#   1 + 1          # Adding values <-- end of line comments in block aligned to col 15\n#   two + two      # More adding\n#\n#   longer_statement    # This is a longer statement <-- end of line comments in block aligned to col 20\n#   short               # This is a shorter statement\n#\n#   a_very_long_statement_that_extends_beyond_the_final_column  # Comment <-- the end of line comments are aligned based on the line length\n#   short                                                       # This is a shorter statement\n#\nspaces_before_comment=2\n\n# Insert a space between the ending comma and closing bracket of a list,\n# etc.\nspace_between_ending_comma_and_closing_bracket=False\n\n# Use spaces inside brackets, braces, and parentheses.  For example:\n#\n#   method_call( 1 )\n#   my_dict[ 3 ][ 1 ][ get_index( *args, **kwargs ) ]\n#   my_set = { 1, 2, 3 }\nspace_inside_brackets=False\n\n# Split before arguments\nsplit_all_comma_separated_values=False\n\n# Split before arguments, but do not split all subexpressions recursively\n# (unless needed).\nsplit_all_top_level_comma_separated_values=False\n\n# Split before arguments if the argument list is terminated by a\n# comma.\nsplit_arguments_when_comma_terminated=False\n\n# Set to True to prefer splitting before '+', '-', '*', '/', '//', or '@'\n# rather than after.\nsplit_before_arithmetic_operator=False\n\n# Set to True to prefer splitting before '&', '|' or '^' rather than\n# after.\nsplit_before_bitwise_operator=True\n\n# Split before the closing bracket if a list or dict literal doesn't fit on\n# a single line.\nsplit_before_closing_bracket=True\n\n# Split before a dictionary or set generator (comp_for). For example, note\n# the split before the 'for':\n#\n#   foo = {\n#       variable: 'Hello world, have a nice day!'\n#       for variable in bar if variable != 42\n#   }\nsplit_before_dict_set_generator=True\n\n# Split before the '.' if we need to split a longer expression:\n#\n#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n#\n# would reformat to something like:\n#\n#   foo = ('This is a really long string: {}, {}, {}, {}'\n#          .format(a, b, c, d))\nsplit_before_dot=False\n\n# Split after the opening paren which surrounds an expression if it doesn't\n# fit on a single line.\nsplit_before_expression_after_opening_paren=False\n\n# If an argument / parameter list is going to be split, then split before\n# the first argument.\nsplit_before_first_argument=False\n\n# Set to True to prefer splitting before 'and' or 'or' rather than\n# after.\nsplit_before_logical_operator=True\n\n# Split named assignments onto individual lines.\nsplit_before_named_assigns=True\n\n# Set to True to split list comprehensions and generators that have\n# non-trivial expressions and multiple clauses before each of these\n# clauses. For example:\n#\n#   result = [\n#       a_long_var + 100 for a_long_var in xrange(1000)\n#       if a_long_var % 10]\n#\n# would reformat to something like:\n#\n#   result = [\n#       a_long_var + 100\n#       for a_long_var in xrange(1000)\n#       if a_long_var % 10]\nsplit_complex_comprehension=False\n\n# The penalty for splitting right after the opening bracket.\nsplit_penalty_after_opening_bracket=300\n\n# The penalty for splitting the line after a unary operator.\nsplit_penalty_after_unary_operator=10000\n\n# The penalty of splitting the line around the '+', '-', '*', '/', '//',\n# ``%``, and '@' operators.\nsplit_penalty_arithmetic_operator=300\n\n# The penalty for splitting right before an if expression.\nsplit_penalty_before_if_expr=0\n\n# The penalty of splitting the line around the '&', '|', and '^'\n# operators.\nsplit_penalty_bitwise_operator=300\n\n# The penalty for splitting a list comprehension or generator\n# expression.\nsplit_penalty_comprehension=80\n\n# The penalty for characters over the column limit.\nsplit_penalty_excess_character=7000\n\n# The penalty incurred by adding a line split to the unwrapped line. The\n# more line splits added the higher the penalty.\nsplit_penalty_for_added_line_split=30\n\n# The penalty of splitting a list of \"import as\" names. For example:\n#\n#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n#                                                             long_argument_2,\n#                                                             long_argument_3)\n#\n# would reformat to something like:\n#\n#   from a_very_long_or_indented_module_name_yada_yad import (\n#       long_argument_1, long_argument_2, long_argument_3)\nsplit_penalty_import_names=0\n\n# The penalty of splitting the line around the 'and' and 'or'\n# operators.\nsplit_penalty_logical_operator=300\n\n# Use the Tab character for indentation.\nuse_tabs=False\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}