{
  "metadata": {
    "timestamp": 1736559647789,
    "page": 306,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pallets-eco/flask-sqlalchemy",
      "stars": 4251,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\nmax_line_length = 88\n\n[*.{css,html,js,json,jsx,scss,ts,tsx,yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": ".idea/\n.vscode/\n.venv*/\nvenv*/\n__pycache__/\ndist/\n.coverage*\nhtmlcov/\n.tox/\ndocs/_build/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.36328125,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.7.1\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: fix-byte-order-marker\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\npython:\n  install:\n    - requirements: requirements/docs.txt\n    - method: pip\n      path: .\nsphinx:\n  builder: dirhtml\n  fail_on_warning: true\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 14.7333984375,
          "content": "Version 3.1.2\n-------------\n\n- Fix issue with calling ``repr()`` on ``SQLAlchemy`` instance with no default engine. :issue:`1295`\n\n\nVersion 3.1.1\n-------------\n\nReleased 2023-09-11\n\n-   Deprecate the ``__version__`` attribute. Use feature detection, or\n    ``importlib.metadata.version(\"flask-sqlalchemy\")``, instead. :pr:`1256`\n\n\nVersion 3.1.0\n-------------\n\nReleased 2023-09-11\n\n-   Drop support for Python 3.7.  :pr:`1251`\n-   Add support for the SQLAlchemy 2.x API via ``model_class`` parameter. :issue:`1140`\n-   Bump minimum version of SQLAlchemy to 2.0.16.\n-   Remove previously deprecated code.\n-   Pass extra keyword arguments from ``get_or_404`` to ``session.get``. :issue:`1149`\n-   Fix bug with finding right bind key for clause statements. :issue:`1211`\n\n\nVersion 3.0.5\n-------------\n\nReleased 2023-06-21\n\n-   ``Pagination.next()`` enforces ``max_per_page``. :issue:`1201`\n-   Improve type hint for ``get_or_404`` return value to be non-optional. :pr:`1226`\n\n\nVersion 3.0.4\n-------------\n\nReleased 2023-06-19\n\n-   Fix type hint for ``get_or_404`` return value. :pr:`1208`\n-   Fix type hints for pyright (used by VS Code Pylance extension). :issue:`1205`\n\n\nVersion 3.0.3\n-------------\n\nReleased 2023-01-31\n\n-   Show helpful errors when mistakenly using multiple ``SQLAlchemy`` instances for the\n    same app, or without calling ``init_app``. :pr:`1151`\n-   Fix issue with getting the engine associated with a model that uses polymorphic\n    table inheritance. :issue:`1155`\n\n\nVersion 3.0.2\n-------------\n\nReleased 2022-10-14\n\n-   Update compatibility with SQLAlchemy 2. :issue:`1122`\n\n\nVersion 3.0.1\n-------------\n\nReleased 2022-10-11\n\n-   Export typing information instead of using external typeshed definitions.\n    :issue:`1112`\n-   If default engine options are set, but ``SQLALCHEMY_DATABASE_URI`` is not set, an\n    invalid default bind will not be configured. :issue:`1117`\n\n\nVersion 3.0.0\n-------------\n\nReleased 2022-10-04\n\n-   Drop support for Python 2, 3.4, 3.5, and 3.6.\n-   Bump minimum version of Flask to 2.2.\n-   Bump minimum version of SQLAlchemy to 1.4.18.\n-   Remove previously deprecated code.\n-   The session is scoped to the current app context instead of the thread. This\n    requires that an app context is active. This ensures that the session is cleaned up\n    after every request.\n-   An active Flask application context is always required to access ``session`` and\n    ``engine``, regardless of if an application was passed to the constructor.\n    :issue:`508, 944`\n-   Different bind keys use different SQLAlchemy ``MetaData`` registries, allowing\n    tables in different databases to have the same name. Bind keys are stored and looked\n    up on the resulting metadata rather than the model or table.\n-   ``SQLALCHEMY_DATABASE_URI`` does not default to ``sqlite:///:memory:``. An error is\n    raised if neither it nor ``SQLALCHEMY_BINDS`` define any engines. :pr:`731`\n-   Configuring SQLite with a relative path is relative to ``app.instance_path`` instead\n    of ``app.root_path``. The instance folder is created if necessary. :issue:`462`\n-   Added ``get_or_404``, ``first_or_404``, ``one_or_404``, and ``paginate`` methods to\n    the extension object. These use SQLAlchemy's preferred ``session.execute(select())``\n    pattern instead of the legacy query interface. :issue:`1088`\n-   Setup methods that create the engines and session are renamed with a leading\n    underscore. They are considered internal interfaces which may change at any time.\n-   All parameters to ``SQLAlchemy`` except ``app`` are keyword-only.\n-   Renamed the ``bind`` parameter to ``bind_key`` and removed the ``app`` parameter\n    from various ``SQLAlchemy`` methods.\n-   The extension object uses ``__getattr__`` to alias names from the SQLAlchemy\n    package, rather than copying them as attributes.\n-   The extension object is stored directly as ``app.extensions[\"sqlalchemy\"]``.\n    :issue:`698`\n-   The session class can be customized by passing the ``class_`` key in the\n    ``session_options`` parameter. :issue:`327`\n-   ``SignallingSession`` is renamed to ``Session``.\n-   ``Session.get_bind`` more closely matches the base implementation.\n-   Model classes and the ``db`` instance are available without imports in\n    ``flask shell``. :issue:`1089`\n-   The ``CamelCase`` to ``snake_case`` table name converter handles more patterns\n    correctly. If model that was already created in the database changed, either use\n    Alembic to rename the table, or set ``__tablename__`` to keep the old name.\n    :issue:`406`\n-   ``Model`` ``repr`` distinguishes between transient and pending instances.\n    :issue:`967`\n-   A custom model class can implement ``__init_subclass__`` with class parameters.\n    :issue:`1002`\n-   ``db.Table`` is a subclass instead of a function.\n-   The ``engine_options`` parameter is applied as defaults before per-engine\n    configuration.\n-   ``SQLALCHEMY_BINDS`` values can either be an engine URL, or a dict of engine options\n    including URL, for each bind. ``SQLALCHEMY_DATABASE_URI`` and\n    ``SQLALCHEMY_ENGINE_OPTIONS`` correspond to the ``None`` key and take precedence.\n    :issue:`783`\n-   Engines are created when calling ``init_app`` rather than the first time they are\n    accessed. :issue:`698`\n-   ``db.engines`` exposes the map of bind keys to engines for the current app.\n-   ``get_engine``, ``get_tables_for_bind``, and ``get_binds`` are deprecated.\n-   SQLite driver-level URIs that look like ``sqlite:///file:name.db?uri=true`` are\n    supported. :issue:`998, 1045`\n-   SQLite engines do not use ``NullPool`` if ``pool_size`` is 0.\n-   MySQL engines use the \"utf8mb4\" charset by default. :issue:`875`\n-   MySQL engines do not set ``pool_size`` to 10.\n-   MySQL engines don't set a default for ``pool_recycle`` if not using a queue pool.\n    :issue:`803`\n-   ``Query`` is renamed from ``BaseQuery``.\n-   Added ``Query.one_or_404``.\n-   The query class is applied to ``backref`` in ``relationship``. :issue:`417`\n-   Creating ``Pagination`` objects manually is no longer a public API. They should be\n    created with ``db.paginate`` or ``query.paginate``. :issue:`1088`\n-   ``Pagination.iter_pages`` and ``Query.paginate`` parameters are keyword-only.\n-   ``Pagination`` is iterable, iterating over its items. :issue:`70`\n-   Pagination count query is more efficient.\n-   ``Pagination.iter_pages`` is more efficient. :issue:`622`\n-   ``Pagination.iter_pages`` ``right_current`` parameter is inclusive.\n-   Pagination ``per_page`` cannot be 0. :issue:`1091`\n-   Pagination ``max_per_page`` defaults to 100. :issue:`1091`\n-   Added ``Pagination.first`` and ``last`` properties, which give the number of the\n    first and last item on the page. :issue:`567`\n-   ``SQLALCHEMY_RECORD_QUERIES`` is disabled by default, and is not enabled\n    automatically with ``app.debug`` or ``app.testing``. :issue:`1092`\n-   ``get_debug_queries`` is renamed to ``get_recorded_queries`` to better match the\n    config and functionality.\n-   Recorded query info is a dataclass instead of a tuple. The ``context`` attribute is\n    renamed to ``location``. Finding the location uses a more inclusive check.\n-   ``SQLALCHEMY_TRACK_MODIFICATIONS`` is disabled by default. :pr:`727`\n-   ``SQLALCHEMY_COMMIT_ON_TEARDOWN`` is deprecated. It can cause various design issues\n    that are difficult to debug. Call ``db.session.commit()`` directly instead.\n    :issue:`216`\n\n\nVersion 2.5.1\n-------------\n\nReleased 2021-03-18\n\n-   Fix compatibility with Python 2.7.\n\n\nVersion 2.5.0\n-------------\n\nReleased 2021-03-18\n\n-   Update to support SQLAlchemy 1.4.\n-   SQLAlchemy ``URL`` objects are immutable. Some internal methods have changed to\n    return a new URL instead of ``None``. :issue:`885`\n\n\nVersion 2.4.4\n-------------\n\nReleased 2020-07-14\n\n-   Change base class of meta mixins to ``type``. This fixes an issue caused by a\n    regression in CPython 3.8.4. :issue:`852`\n\n\nVersion 2.4.3\n-------------\n\nReleased 2020-05-26\n\n-   Deprecate ``SQLALCHEMY_COMMIT_ON_TEARDOWN`` as it can cause various design issues\n    that are difficult to debug. Call ``db.session.commit()`` directly instead.\n    :issue:`216`\n\n\nVersion 2.4.2\n-------------\n\nReleased 2020-05-25\n\n-   Fix bad pagination when records are de-duped. :pr:`812`\n\n\nVersion 2.4.1\n-------------\n\nReleased 2019-09-24\n\n-   Fix ``AttributeError`` when using multiple binds with polymorphic models. :pr:`651`\n\n\nVersion 2.4.0\n-------------\n\nReleased 2019-04-24\n\n-   Drop support for Python 2.6 and 3.3. :pr:`687`\n-   Address SQLAlchemy 1.3 deprecations. :pr:`684`\n-   Make engine configuration more flexible. Added the ``engine_options`` parameter and\n    ``SQLALCHEMY_ENGINE_OPTIONS`` config. Deprecated the individual engine option config\n    keys ``SQLALCHEMY_NATIVE_UNICODE``, ``SQLALCHEMY_POOL_SIZE``,\n    ``SQLALCHEMY_POOL_TIMEOUT``, ``SQLALCHEMY_POOL_RECYCLE``, and\n    ``SQLALCHEMY_MAX_OVERFLOW``. :pr:`684`\n-   ``get_or_404()`` and ``first_or_404()`` now accept a ``description`` parameter to\n    control the 404 message. :issue:`636`\n-   Use ``time.perf_counter`` for Python 3 on Windows. :issue:`638`\n-   Add an example of Flask's tutorial project, Flaskr, adapted for Flask-SQLAlchemy.\n    :pr:`720`\n\n\nVersion 2.3.2\n-------------\n\nReleased 2017-10-11\n\n-   Don't mask the parent table for single-table inheritance models. :pr:`561`\n\n\nVersion 2.3.1\n-------------\n\nReleased 2017-10-05\n\n-   If a model has a table name that matches an existing table in the metadata, use that\n    table. Fixes a regression where reflected tables were not picked up by models.\n    :issue:`551`\n-   Raise the correct error when a model has a table name but no primary key. :pr:`556`\n-   Fix ``repr`` on models that don't have an identity because they have not been\n    flushed yet. :issue:`555`\n-   Allow specifying a ``max_per_page`` limit for pagination, to avoid users specifying\n    high values in the request args. :pr:`542`\n-   For ``paginate`` with ``error_out=False``, the minimum value for ``page`` is 1 and\n    ``per_page`` is 0. :issue:`558`\n\n\nVersion 2.3.0\n-------------\n\nReleased 2017-09-28\n\n-   Multiple bugs with ``__tablename__`` generation are fixed. Names will be generated\n    for models that define a primary key, but not for single-table inheritance\n    subclasses. Names will not override a ``declared_attr``. ``PrimaryKeyConstraint`` is\n    detected. :pr:`541`\n-   Passing an existing ``declarative_base()`` as ``model_class`` to\n    ``SQLAlchemy.__init__`` will use this as the base class instead of creating one.\n    This allows customizing the metaclass used to construct the base. :issue:`546`\n-   The undocumented ``DeclarativeMeta`` internals that the extension uses for binds and\n    table name generation have been refactored to work as mixins. Documentation is added\n    about how to create a custom metaclass that does not do table name generation.\n    :issue:`546`\n-   Model and metaclass code has been moved to a new ``models`` module.\n    ``_BoundDeclarativeMeta`` is renamed to ``DefaultMeta``; the old name will be\n    removed in 3.0. :issue:`546`\n-   Models have a default ``repr`` that shows the model name and primary key. :pr:`530`\n-   Fixed a bug where using ``init_app`` would cause connectors to always use the\n    ``current_app`` rather than the app they were created for. This caused issues when\n    multiple apps were registered with the extension. :pr:`547`\n\n\nVersion 2.2\n-----------\n\nReleased 2017-02-27, codename Dubnium\n\n-   Minimum SQLAlchemy version is 0.8 due to use of ``sqlalchemy.inspect``.\n-   Added support for custom ``query_class`` and ``model_class`` as args to the\n    ``SQLAlchemy`` constructor. :pr:`328`\n-   Allow listening to SQLAlchemy events on ``db.session``. :pr:`364`\n-   Allow ``__bind_key__`` on abstract models. :pr:`373`\n-   Allow ``SQLALCHEMY_ECHO`` to be a string. :issue:`409`\n-   Warn when ``SQLALCHEMY_DATABASE_URI`` is not set. :pr:`443`\n-   Don't let pagination generate invalid page numbers. :issue:`460`\n-   Drop support of Flask < 0.10. This means the db session is always tied to the app\n    context and its teardown event. :issue:`461`\n-   Tablename generation logic no longer accesses class properties unless they are\n    ``declared_attr``. :issue:`467`\n\n\nVersion 2.1\n-----------\n\nReleased 2015-10-23, codename Caesium\n\n-   Table names are automatically generated in more cases, including subclassing mixins\n    and abstract models.\n-   Allow using a custom MetaData object.\n-   Add support for binds parameter to session.\n\n\nVersion 2.0\n-----------\n\nReleased 2014-08-29, codename Bohrium\n\n-   Changed how the builtin signals are subscribed to skip non-Flask-SQLAlchemy\n    sessions. This will also fix the attribute error about model changes not existing.\n-   Added a way to control how signals for model modifications are tracked.\n-   Made the ``SignallingSession`` a public interface and added a hook for customizing\n    session creation.\n-   If the ``bind`` parameter is given to the signalling session it will no longer cause\n    an error that a parameter is given twice.\n-   Added working table reflection support.\n-   Enabled autoflush by default.\n-   Consider ``SQLALCHEMY_COMMIT_ON_TEARDOWN`` harmful and remove from docs.\n\n\nVersion 1.0\n-----------\n\nReleased 2013-07-20, codename Aurum\n\n-   Added Python 3.3 support.\n-   Dropped Python 2.5 compatibility.\n-   Various bugfixes.\n-   Changed versioning format to do major releases for each update now.\n\n\nVersion 0.16\n------------\n\n-   New distribution format (flask_sqlalchemy).\n-   Added support for Flask 0.9 specifics.\n\n\nVersion 0.15\n------------\n\n-   Added session support for multiple databases.\n\n\nVersion 0.14\n------------\n\n-   Make relative sqlite paths relative to the application root.\n\n\nVersion 0.13\n------------\n\n-   Fixed an issue with Flask-SQLAlchemy not selecting the correct binds.\n\n\nVersion 0.12\n------------\n\n-   Added support for multiple databases.\n-   Expose ``BaseQuery`` as ``db.Query``.\n-   Set default ``query_class`` for ``db.relation``, ``db.relationship``, and\n    ``db.dynamic_loader`` to ``BaseQuery``.\n-   Improved compatibility with Flask 0.7.\n\n\nVersion 0.11\n------------\n\n-   Fixed a bug introduced in 0.10 with alternative table constructors.\n\n\nVersion 0.10\n------------\n\n-   Added support for signals.\n-   Table names are now automatically set from the class name unless overridden.\n-   ``Model.query`` now always works for applications directly passed to the\n    ``SQLAlchemy`` constructor. Furthermore the property now raises a ``RuntimeError``\n    instead of being ``None``.\n-   Added session options to constructor.\n-   Fixed a broken ``__repr__``.\n-   ``db.Table`` is now a factory function that creates table objects. This makes it\n    possible to omit the metadata.\n\n\nVersion 0.9\n-----------\n\n-   Applied changes to pass the Flask extension approval process.\n\n\nVersion 0.8\n-----------\n\n-   Added a few configuration keys for creating connections.\n-   Automatically activate connection recycling for MySQL connections.\n-   Added support for the Flask testing mode.\n\n\nVersion 0.7\n-----------\n\n-   Initial public release\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 9.8876953125,
          "content": "How to contribute to Flask-SQLAlchemy\n=====================================\n\nThank you for considering contributing to Flask-SQLAlchemy!\n\n\nSupport questions\n-----------------\n\nPlease don't use the issue tracker for this. The issue tracker is a tool\nto address bugs and feature requests in Flask-SQLAlchemy itself. Use one\nof the following resources for questions about using Flask-SQLAlchemy or\nissues with your own code:\n\n-   The ``#get-help`` channel on our Discord chat:\n    https://discord.gg/pallets\n-   The mailing list flask@python.org for long term discussion or larger\n    issues.\n-   Ask on `Stack Overflow`_. Search with Google first using:\n    ``site:stackoverflow.com flask-sqlalchemy {search term, exception message, etc.}``\n\n.. _Stack Overflow: https://stackoverflow.com/questions/tagged/flask-sqlalchemy?tab=Frequent\n\n\nReporting issues\n----------------\n\nFlask-SQLAlchemy is a thin wrapper that combines Flask and SQLAlchemy.\nMake sure your issue is actually with Flask-SQLAlchemy and not\nSQLAlchemy before submitting it. Check the traceback to see if the error\nis coming from SQLAlchemy. Check if your issue has already been reported\nto `SQLAlchemy`_.\n\nInclude the following information in your post:\n\n-   Describe what you expected to happen.\n-   If possible, include a `minimal reproducible example`_ to help us\n    identify the issue. This also helps check that the issue is not with\n    your own code.\n-   Describe what actually happened. Include the full traceback if there\n    was an exception.\n-   List your Python, Flask-SQLAlchemy, and SQLAlchemy versions. If\n    possible, check if this issue is already fixed in the latest\n    releases or the latest code in the repository.\n\n.. _SQLAlchemy: https://github.com/sqlalchemy/sqlalchemy/issues\n.. _minimal reproducible example: https://stackoverflow.com/help/minimal-reproducible-example\n\n\nSubmitting patches\n------------------\n\nIf there is not an open issue for what you want to submit, prefer\nopening one for discussion before working on a PR. You can work on any\nissue that doesn't have an open PR linked to it or a maintainer assigned\nto it. These show up in the sidebar. No need to ask if you can work on\nan issue that interests you.\n\nInclude the following in your patch:\n\n-   Use `Black`_ to format your code. This and other tools will run\n    automatically if you install `pre-commit`_ using the instructions\n    below.\n-   Include tests if your patch adds or changes code. Make sure the test\n    fails without your patch.\n-   Update any relevant docs pages and docstrings.\n-   Add an entry in ``CHANGES.rst``. Use the same style as other\n    entries. Also include ``.. versionchanged::`` inline changelogs in\n    relevant docstrings.\n\n.. _Black: https://black.readthedocs.io\n.. _pre-commit: https://pre-commit.com\n\n\nFirst time setup\n~~~~~~~~~~~~~~~~\n\n-   Download and install the `latest version of git`_.\n-   Configure git with your `username`_ and `email`_.\n\n    .. code-block:: text\n\n        $ git config --global user.name 'your name'\n        $ git config --global user.email 'your email'\n\n-   Make sure you have a `GitHub account`_.\n-   Fork Flask-SQLAlchemy to your GitHub account by clicking the `Fork`_\n    button.\n-   `Clone`_ the main repository locally, replacing ``{username}`` with your GitHub\n    username.\n\n    .. code-block:: text\n\n        $ git clone https://github.com/{username}/flask-sqlalchemy\n        $ cd flask-sqlalchemy\n\n-   Create a virtualenv.\n\n    .. code-block:: text\n\n        $ python3 -m venv .venv\n        $ . .venv/bin/activate\n\n    On Windows, activating is different.\n\n    .. code-block:: text\n\n        > .venv\\Scripts\\activate\n\n-   Install the development dependencies, then install Flask-SQLAlchemy\n    in editable mode.\n\n    .. code-block:: text\n\n        $ pip install -r requirements/dev.txt && pip install -e .\n\n-   Install the pre-commit hooks.\n\n    .. code-block:: text\n\n        $ pre-commit install\n\n.. _latest version of git: https://git-scm.com/downloads\n.. _username: https://docs.github.com/en/github/using-git/setting-your-username-in-git\n.. _email: https://docs.github.com/en/github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address\n.. _GitHub account: https://github.com/join\n.. _Fork: https://github.com/pallets-eco/flask-sqlalchemy/fork\n.. _Clone: https://docs.github.com/en/github/getting-started-with-github/fork-a-repo#step-2-create-a-local-clone-of-your-fork\n\n\nStart coding\n~~~~~~~~~~~~\n\n-   Create a branch to identify the issue you would like to work on. If\n    you're submitting a bug or documentation fix, branch off of the\n    latest \".x\" branch.\n\n    .. code-block:: text\n\n        $ git fetch origin\n        $ git checkout -b your-branch-name origin/3.0.x\n\n    If you're submitting a feature addition or change, branch off of the\n    \"main\" branch.\n\n    .. code-block:: text\n\n        $ git fetch origin\n        $ git checkout -b your-branch-name origin/main\n\n-   Using your favorite editor, make your changes,\n    `committing as you go`_.\n-   Include tests that cover any code changes you make. Make sure the\n    test fails without your patch. Run the tests as described below.\n-   Push your commits to your fork on GitHub and\n    `create a pull request`_. Link to the issue being addressed with\n    ``fixes #123`` in the pull request.\n\n    .. code-block:: text\n\n        $ git push --set-upstream fork your-branch-name\n\n.. _committing as you go: https://dont-be-afraid-to-commit.readthedocs.io/en/latest/git/commandlinegit.html#commit-your-changes\n.. _create a pull request: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request\n\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nRun the basic test suite with pytest.\n\n.. code-block:: text\n\n    $ pytest\n\nThis runs the tests for the current environment, which is usually sufficient. CI will\nrun the full suite when you submit your pull request. You can run the full test suite in\nparallel with tox if you don't want to wait.\n\n.. code-block:: text\n\n    $ tox p\n\n\nRunning test coverage\n~~~~~~~~~~~~~~~~~~~~~\n\nGenerating a report of lines that do not have test coverage can indicate where to start\ncontributing. Collect coverage from the tests and generate a report.\n\n.. code-block:: text\n\n    $ pip install \"coverage[toml]\"\n    $ coverage run -m pytest\n    $ coverage html\n\nOpen ``htmlcov/index.html`` in your browser to explore the report.\n\nRead more about `coverage <https://coverage.readthedocs.io>`__.\n\n\nBuilding the docs\n~~~~~~~~~~~~~~~~~\n\nBuild the docs in the ``docs`` directory using Sphinx.\n\n.. code-block:: text\n\n    $ cd docs\n    $ make html\n\nOpen ``_build/html/index.html`` in your browser to view the docs.\n\nRead more about `Sphinx <https://www.sphinx-doc.org/en/stable/>`__.\n\n\nPublishing a Release\n--------------------\n\nAs a maintainer, once you decide it's time to publish a new release, follow these\ninstructions.\n\n1.  You'll manage the release through a PR on GitHub. Create a branch like\n    \"release-A.B.C\". For a fix release, branch off the corresponding release branch. For\n    a feature release, branch off of main.\n\n    .. code-block:: text\n\n        $ git switch -c release-A.B.C A.B.x\n\n2.  Review the ``CHANGES.rst`` file and ensure each code change has a corresponding\n    entry. Only code changes need entries, not docs or non-published code and files. Use\n    your judgement on what users would want to know.\n\n3.  Update the ``CHANGES.rst`` file to replace \"Unreleased\" with \"Released YYYY-MM-DD\".\n\n4.  Update ``__version__`` in ``__init__.py`` to remove the \".dev\" suffix. Ensure that\n    the version number matches what you think you're releasing.\n\n5.  Commit with a standard message:\n\n    .. code-block:: text\n\n        $ git commit -am 'release version A.B.C'\n\n6.  Push the branch and open a PR. The title should be the same as the commit message\n    (if there was only one commit). No need to add a description. Assign it to the\n    corresponding vesion milestone, like \"3.0.4\". If there's no milestone, it's because\n    this is a newly adapted project that isn't using our full organization scheme yet,\n    no problem.\n\n7.  Don't merge the PR until the end. Observe that all workflows and checks pass for the\n    PR.\n\n8.  Create and push an annotated tag with a standard message. You'll see the new\n    \"build\" workflow status get added to the PR checks.\n\n    .. code-block:: text\n\n        $ git tag -am 'release version A.B.C' A.B.C\n        $ git push origin A.B.C\n\n9.  Wait for the \"build\", \"provenance\", and \"create-release\" workflows to succeed. Go\n    into the created draft release and check that the expected files (with the correct\n    version numbers) are part of it. Add a quick message about the release, such as\n    \"This is a fix release for the 3.0.x release branch.\" along with a link to the\n    changelog section and closed milestone. See an existing release in Flask for an\n    example. Save the draft (don't publish it yet, it's not on PyPI yet.)\n\n10. The \"publish-pypi\" workflow will have a yellow paused icon. A maintainer with\n    publish permissions must approve it. Once they do, the release files will be\n    uploaded to PyPI. If you don't have publish permission yet, ping the maintainers\n    channel.\n\n11. After seeing that the \"publish-pypi\" workflow succeeds, merge the PR. Then publish\n    the draft release, and close the milestone.\n\n12. If this was a fix release, merge the release branch (A.B.x) into main.\n\n    .. code-block:: text\n\n        $ git switch A.B.x\n        $ git pull\n        $ git switch main\n        $ git merge A.B.x\n        $ git push\n\n    Here's how to handle the expected merge conflicts:\n\n    * ``CHANGES.rst`` : Keep both changes, ensuring the next feature version is on top.\n    * ``__init__.py`` : Keep the version in main (the next feature version).\n\n12. If this was a feature release, make a new branch for fix releases.\n\n    .. code-block:: text\n\n        $ git switch main\n        $ git pull\n        $ git switch -c A.B.x\n        $ git push\n\n13. If this was a feature release, ask a maintainer with docs access to update Read the\n    Docs to use the new branch as the primary.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4404296875,
          "content": "Copyright 2010 Pallets\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1.  Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from\n    this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.345703125,
          "content": "# Flask-SQLAlchemy\n\nFlask-SQLAlchemy is an extension for [Flask][] that adds support for\n[SQLAlchemy][] to your application. It aims to simplify using SQLAlchemy\nwith Flask by providing useful defaults and extra helpers that make it\neasier to accomplish common tasks.\n\n[Flask]: https://flask.palletsprojects.com\n[SQLAlchemy]: https://www.sqlalchemy.org\n\n## Pallets Community Ecosystem\n\n> [!IMPORTANT]\\\n> This project is part of the Pallets Community Ecosystem. Pallets is the open\n> source organization that maintains Flask; Pallets-Eco enables community\n> maintenance of Flask extensions. If you are interested in helping maintain\n> this project, please reach out on [the Pallets Discord server][discord].\n>\n> [discord]: https://discord.gg/pallets\n\n## A Simple Example\n\n```python\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\napp = Flask(__name__)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///example.sqlite\"\n\nclass Base(DeclarativeBase):\n  pass\n\ndb = SQLAlchemy(app, model_class=Base)\n\nclass User(db.Model):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    username: Mapped[str] = mapped_column(unique=True)\n\nwith app.app_context():\n    db.create_all()\n\n    db.session.add(User(username=\"example\"))\n    db.session.commit()\n\n    users = db.session.scalars(db.select(User))\n```\n"
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.25,
          "content": "[project]\nname = \"Flask-SQLAlchemy\"\nversion = \"3.1.1\"\ndescription = \"Add SQLAlchemy support to your Flask application.\"\nreadme = \"README.md\"\nlicense = { file = \"LICENSE.txt\" }\nmaintainers = [{name = \"Pallets\", email = \"contact@palletsprojects.com\"},]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Web Environment\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Topic :: Internet :: WWW/HTTP :: Dynamic Content\",\n    \"Typing :: Typed\",\n]\nrequires-python = \">=3.8\"\ndependencies = [\n    \"flask>=2.2.5\",\n    \"sqlalchemy>=2.0.16\",\n]\n\n[project.urls]\nDonate = \"https://palletsprojects.com/donate\"\nDocumentation = \"https://flask-sqlalchemy.readthedocs.io\"\nChanges = \"https://flask-sqlalchemy.readthedocs.io/changes/\"\nSource = \"https://github.com/pallets-eco/flask-sqlalchemy/\"\nChat = \"https://discord.gg/pallets\"\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.module]\nname = \"flask_sqlalchemy\"\n\n[tool.flit.sdist]\ninclude = [\n    \"docs/\",\n    \"requirements/\",\n    \"tests/\",\n    \"CHANGES.rst\",\n    \"tox.ini\",\n]\nexclude = [\n    \"docs/_build/\",\n]\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\nfilterwarnings = [\n    \"error\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"flask_sqlalchemy\", \"tests\"]\n\n[tool.coverage.paths]\nsource = [\"src\", \"*/site-packages\"]\n\n[tool.mypy]\npython_version = \"3.8\"\nfiles = [\"src/flask_sqlalchemy\", \"tests\"]\nshow_error_codes = true\npretty = true\nstrict = true\n# db.Model attribute doesn't recognize subclassing\ndisable_error_code = [\"name-defined\"]\n# db.Model is Any\ndisallow_subclassing_any = false\n\n[tool.pyright]\npythonVersion = \"3.8\"\ninclude = [\"src/flask\", \"tests\"]\ntypeCheckingMode = \"basic\"\n\n[tool.ruff]\nextend-exclude = [\"examples/\"]\nsrc = [\"src\"]\nfix = true\nshow-fixes = true\noutput-format = \"full\"\n\n[tool.ruff.lint]\nselect = [\n    \"B\",  # flake8-bugbear\n    \"E\",  # pycodestyle error\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"UP\",  # pyupgrade\n    \"W\",  # pycodestyle warning\n]\nignore-init-module-imports = true\n\n[tool.ruff.lint.isort]\nforce-single-line = true\norder-by-type = false\n\n[tool.gha-update]\ntag-only = [\n    \"slsa-framework/slsa-github-generator\",\n]\n"
        },
        {
          "name": "requirements-skip",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.357421875,
          "content": "[tox]\nenvlist =\n    py3{12,11,10,9,8}\n    py311-min\n    style\n    typing\n    docs\nskip_missing_interpreters = true\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nconstrain_package_deps = true\nuse_frozen_constraints = true\ndeps =\n    -r requirements/tests.txt\n    min: -r requirements-skip/tests-min.txt\ncommands = pytest -v --tb=short --basetemp={envtmpdir} {posargs}\n\n[testenv:style]\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit run --all-files\n\n[testenv:typing]\ndeps = -r requirements/typing.txt\ncommands =\n    mypy --python-version 3.8\n    mypy --python-version 3.12\n\n[testenv:docs]\ndeps = -r requirements/docs.txt\ncommands = sphinx-build -E -W -b dirhtml docs docs/_build/dirhtml\n\n[testenv:update-actions]\nlabels = update\ndeps = gha-update\ncommands = gha-update\n\n[testenv:update-pre_commit]\nlabels = update\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit autoupdate -j4\n\n[testenv:update-requirements]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements\ncommands =\n    pip-compile build.in -q {posargs:-U}\n    pip-compile docs.in -q {posargs:-U}\n    pip-compile tests.in -q {posargs:-U}\n    pip-compile typing.in -q {posargs:-U}\n    pip-compile dev.in -q {posargs:-U}\n\n[testenv:update-requirements_skip]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements-skip\ncommands = pip-compile tests-min.in -q -U\n"
        }
      ]
    }
  ]
}