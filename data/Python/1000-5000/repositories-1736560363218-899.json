{
  "metadata": {
    "timestamp": 1736560363218,
    "page": 899,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "JiahuiYu/generative_inpainting",
      "stars": 3308,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "model_logs\nlogs\ndata\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.28125,
          "content": "## creative commons\n\n# Attribution-NonCommercial 4.0 International\n\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\n\n### Using Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n\n* __Considerations for licensors:__ Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. [More considerations for licensors](http://wiki.creativecommons.org/Considerations_for_licensors_and_licensees#Considerations_for_licensors).\n\n* __Considerations for the public:__ By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor’s permission is not necessary for any reason–for example, because of any applicable exception or limitation to copyright–then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. [More considerations for the public](http://wiki.creativecommons.org/Considerations_for_licensors_and_licensees#Considerations_for_licensees).\n\n## Creative Commons Attribution-NonCommercial 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\n### Section 1 – Definitions.\n\na. __Adapted Material__ means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\n\nb. __Adapter's License__ means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\n\nc. __Copyright and Similar Rights__ means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\n\nd. __Effective Technological Measures__ means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\n\ne. __Exceptions and Limitations__ means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\n\nf. __Licensed Material__ means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\n\ng. __Licensed Rights__ means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\n\nh. __Licensor__ means the individual(s) or entity(ies) granting rights under this Public License.\n\ni. __NonCommercial__ means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange.\n\nj. __Share__ means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\n\nk. __Sui Generis Database Rights__ means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\n\nl. __You__ means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\n### Section 2 – Scope.\n\na. ___License grant.___\n\n   1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\n       A. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and\n\n       B. produce, reproduce, and Share Adapted Material for NonCommercial purposes only.\n\n   2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\n\n   3. __Term.__ The term of this Public License is specified in Section 6(a).\n\n   4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\n\n    5. __Downstream recipients.__\n\n        A. __Offer from the Licensor – Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\n\n        B. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\n    6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nb. ___Other rights.___\n\n   1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this Public License.\n\n   3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.\n\n### Section 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\na. ___Attribution.___\n\n   1. If You Share the Licensed Material (including in modified form), You must:\n\n       A. retain the following if it is supplied by the Licensor with the Licensed Material:\n\n         i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\n\n         ii. a copyright notice;\n\n         iii. a notice that refers to this Public License;\n\n         iv. a notice that refers to the disclaimer of warranties;\n\n         v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\n       B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\n\n       C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\n   2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\n\n   3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\n\n   4. If You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n### Section 4 – Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\na. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only;\n\nb. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\n\nc. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\n\n### Section 5 – Disclaimer of Warranties and Limitation of Liability.\n\na. __Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.__\n\nb. __To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.__\n\nc. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\n### Section 6 – Term and Termination.\n\na. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\n\nb. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\n   1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n   For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\n\nc. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\n\nd. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\n### Section 7 – Other Terms and Conditions.\n\na. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\n\nb. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\n### Section 8 – Interpretation.\n\na. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\n\nb. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\n\nc. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\n\nd. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n> Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\n>\n> Creative Commons may be contacted at creativecommons.org\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.91015625,
          "content": "# Generative Image Inpainting\n\n![version](https://img.shields.io/badge/version-v2.0.0-green.svg?style=plastic)\n![pytorch](https://img.shields.io/badge/tensorflow-v1.7.0-green.svg?style=plastic)\n![license](https://img.shields.io/badge/license-CC_BY--NC-green.svg?style=plastic)\n\nAn open source framework for generative image inpainting task, with the support of [Contextual Attention](https://arxiv.org/abs/1801.07892) (CVPR 2018) and [Gated Convolution](https://arxiv.org/abs/1806.03589) (ICCV 2019 Oral).\n\n**For the code of previous version (DeepFill v1), please checkout branch [v1.0.0](https://github.com/JiahuiYu/generative_inpainting/tree/v1.0.0).**\n\n[CVPR 2018 Paper](https://arxiv.org/abs/1801.07892) | [ICCV 2019 Oral Paper](https://arxiv.org/abs/1806.03589) | [Project](http://jiahuiyu.com/deepfill) | [Demo](http://jiahuiyu.com/deepfill) | [YouTube v1](https://youtu.be/xz1ZvcdhgQ0) | [YouTube v2](https://youtu.be/uZkEi9Y2dj4) | [BibTex](#citing)\n\n<img src=\"https://raw.githubusercontent.com/JiahuiYu/generative_inpainting/v2.0.0/examples/places2/case1_raw.png\" width=\"33%\"/> <img src=\"https://raw.githubusercontent.com/JiahuiYu/generative_inpainting/v2.0.0/examples/places2/case1_input.png\" width=\"33%\"/> <img src=\"https://raw.githubusercontent.com/JiahuiYu/generative_inpainting/v2.0.0/examples/places2/case1_output.png\" width=\"33%\"/>\n<img src=\"https://raw.githubusercontent.com/JiahuiYu/generative_inpainting/v2.0.0/examples/places2/case4_raw.png\" width=\"33%\"/> <img src=\"https://raw.githubusercontent.com/JiahuiYu/generative_inpainting/v2.0.0/examples/places2/case4_input.png\" width=\"33%\"/> <img src=\"https://raw.githubusercontent.com/JiahuiYu/generative_inpainting/v2.0.0/examples/places2/case4_output.png\" width=\"33%\"/>\n\nFree-form image inpainting results by our system built on gated convolution. Each triad shows original image, free-form input and our result from left to right.\n\n## Run\n\n0. Requirements:\n    * Install python3.\n    * Install [tensorflow](https://www.tensorflow.org/install/) (tested on Release 1.3.0, 1.4.0, 1.5.0, 1.6.0, 1.7.0).\n    * Install tensorflow toolkit [neuralgym](https://github.com/JiahuiYu/neuralgym) (run `pip install git+https://github.com/JiahuiYu/neuralgym`).\n1. Training:\n    * Prepare training images filelist and shuffle it ([example](https://github.com/JiahuiYu/generative_inpainting/issues/15)).\n    * Modify [inpaint.yml](/inpaint.yml) to set DATA_FLIST, LOG_DIR, IMG_SHAPES and other parameters.\n    * Run `python train.py`.\n2. Resume training:\n    * Modify MODEL_RESTORE flag in [inpaint.yml](/inpaint.yml). E.g., MODEL_RESTORE: 20180115220926508503_places2_model.\n    * Run `python train.py`.\n3. Testing:\n    * Run `python test.py --image examples/input.png --mask examples/mask.png --output examples/output.png --checkpoint model_logs/your_model_dir`.\n4. Still have questions?\n    * If you still have questions (e.g.: How filelist looks like? How to use multi-gpus? How to do batch testing?), please first search over closed issues. If the problem is not solved, please open a new issue.\n\n## Pretrained models\n\n[Places2](https://drive.google.com/drive/folders/1y7Irxm3HSHGvp546hZdAZwuNmhLUVcjO?usp=sharing) | [CelebA-HQ](https://drive.google.com/drive/folders/1uvcDgMer-4hgWlm6_G9xjvEQGP8neW15?usp=sharing)\n\nDownload the model dirs and put it under `model_logs/` (rename `checkpoint.txt` to `checkpoint` because google drive automatically add ext after download). Run testing or resume training as described above. All models are trained with images of resolution 256x256 and largest hole size 128x128, above which the results may be deteriorated. We provide several example test cases. Please run:\n\n```bash\n# Places2 512x680 input\npython test.py --image examples/places2/case1_input.png --mask examples/places2/case1_mask.png --output examples/places2/case1_output.png --checkpoint_dir model_logs/release_places2_256\n# CelebA-HQ 256x256 input\n# Please visit CelebA-HQ demo at: jhyu.me/deepfill\n```\n\n**Note:** Please make sure the mask file completely cover the masks in input file. You may check it with saving a new image to visualize `cv2.imwrite('new.png', img - mask)`.\n\n## TensorBoard\n\nVisualization on [TensorBoard](https://www.tensorflow.org/programmers_guide/summaries_and_tensorboard) for training and validation is supported. Run `tensorboard --logdir model_logs --port 6006` to view training progress.\n\n## License\n\nCC 4.0 Attribution-NonCommercial International\n\nThe software is for educational and academic research purposes only.\n\n## Citing\n```\n@article{yu2018generative,\n  title={Generative Image Inpainting with Contextual Attention},\n  author={Yu, Jiahui and Lin, Zhe and Yang, Jimei and Shen, Xiaohui and Lu, Xin and Huang, Thomas S},\n  journal={arXiv preprint arXiv:1801.07892},\n  year={2018}\n}\n\n@article{yu2018free,\n  title={Free-Form Image Inpainting with Gated Convolution},\n  author={Yu, Jiahui and Lin, Zhe and Yang, Jimei and Shen, Xiaohui and Lu, Xin and Huang, Thomas S},\n  journal={arXiv preprint arXiv:1806.03589},\n  year={2018}\n}\n```\n"
        },
        {
          "name": "batch_test.py",
          "type": "blob",
          "size": 2.916015625,
          "content": "import time\nimport os\nimport argparse\n\nimport cv2\nimport numpy as np\nimport tensorflow as tf\nimport neuralgym as ng\n\nfrom inpaint_model import InpaintCAModel\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    '--flist', default='', type=str,\n    help='The filenames of image to be processed: input, mask, output.')\nparser.add_argument(\n    '--image_height', default=-1, type=int,\n    help='The height of images should be defined, otherwise batch mode is not'\n    ' supported.')\nparser.add_argument(\n    '--image_width', default=-1, type=int,\n    help='The width of images should be defined, otherwise batch mode is not'\n    ' supported.')\nparser.add_argument(\n    '--checkpoint_dir', default='', type=str,\n    help='The directory of tensorflow checkpoint.')\n\n\nif __name__ == \"__main__\":\n    FLAGS = ng.Config('inpaint.yml')\n    ng.get_gpus(1)\n    # os.environ['CUDA_VISIBLE_DEVICES'] =''\n    args = parser.parse_args()\n\n    sess_config = tf.ConfigProto()\n    sess_config.gpu_options.allow_growth = True\n    sess = tf.Session(config=sess_config)\n\n    model = InpaintCAModel()\n    input_image_ph = tf.placeholder(\n        tf.float32, shape=(1, args.image_height, args.image_width*2, 3))\n    output = model.build_server_graph(FLAGS, input_image_ph)\n    output = (output + 1.) * 127.5\n    output = tf.reverse(output, [-1])\n    output = tf.saturate_cast(output, tf.uint8)\n    vars_list = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)\n    assign_ops = []\n    for var in vars_list:\n        vname = var.name\n        from_name = vname\n        var_value = tf.contrib.framework.load_variable(\n            args.checkpoint_dir, from_name)\n        assign_ops.append(tf.assign(var, var_value))\n    sess.run(assign_ops)\n    print('Model loaded.')\n\n    with open(args.flist, 'r') as f:\n        lines = f.read().splitlines()\n    t = time.time()\n    for line in lines:\n    # for i in range(100):\n        image, mask, out = line.split()\n        base = os.path.basename(mask)\n\n        image = cv2.imread(image)\n        mask = cv2.imread(mask)\n        image = cv2.resize(image, (args.image_width, args.image_height))\n        mask = cv2.resize(mask, (args.image_width, args.image_height))\n        # cv2.imwrite(out, image*(1-mask/255.) + mask)\n        # # continue\n        # image = np.zeros((128, 256, 3))\n        # mask = np.zeros((128, 256, 3))\n\n        assert image.shape == mask.shape\n\n        h, w, _ = image.shape\n        grid = 4\n        image = image[:h//grid*grid, :w//grid*grid, :]\n        mask = mask[:h//grid*grid, :w//grid*grid, :]\n        print('Shape of image: {}'.format(image.shape))\n\n        image = np.expand_dims(image, 0)\n        mask = np.expand_dims(mask, 0)\n        input_image = np.concatenate([image, mask], axis=2)\n\n        # load pretrained model\n        result = sess.run(output, feed_dict={input_image_ph: input_image})\n        print('Processed: {}'.format(out))\n        cv2.imwrite(out, result[0][:, :, ::-1])\n\n    print('Time total: {}'.format(time.time() - t))\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "guided_batch_test.py",
          "type": "blob",
          "size": 3.1201171875,
          "content": "import time\nimport os\nimport argparse\n\nimport cv2\nimport numpy as np\nimport tensorflow as tf\nimport neuralgym as ng\n\nfrom inpaint_model import InpaintCAModel\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\n    '--flist', default='', type=str,\n    help='The filenames of image to be processed: input, mask, output.')\nparser.add_argument(\n    '--image_height', default=-1, type=int,\n    help='The height of images should be defined, otherwise batch mode is not'\n    ' supported.')\nparser.add_argument(\n    '--image_width', default=-1, type=int,\n    help='The width of images should be defined, otherwise batch mode is not'\n    ' supported.')\nparser.add_argument(\n    '--checkpoint_dir', default='', type=str,\n    help='The directory of tensorflow checkpoint.')\n\n\nif __name__ == \"__main__\":\n    ng.get_gpus(1)\n    # os.environ['CUDA_VISIBLE_DEVICES'] =''\n    args = parser.parse_args()\n\n    sess_config = tf.ConfigProto()\n    sess_config.gpu_options.allow_growth = True\n    sess = tf.Session(config=sess_config)\n\n    model = InpaintCAModel()\n    input_image_ph = tf.placeholder(\n        tf.float32, shape=(1, args.image_height, args.image_width*3, 3))\n    output = model.build_server_graph(input_image_ph)\n    output = (output + 1.) * 127.5\n    output = tf.reverse(output, [-1])\n    output = tf.saturate_cast(output, tf.uint8)\n    vars_list = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)\n    assign_ops = []\n    for var in vars_list:\n        vname = var.name\n        from_name = vname\n        var_value = tf.contrib.framework.load_variable(\n            args.checkpoint_dir, from_name)\n        assign_ops.append(tf.assign(var, var_value))\n    sess.run(assign_ops)\n    print('Model loaded.')\n\n    with open(args.flist, 'r') as f:\n        lines = f.read().splitlines()\n    t = time.time()\n    for line in lines:\n    # for i in range(100):\n        image, mask, out = line.split()\n        base = os.path.basename(mask)\n\n        guidance = cv2.imread(image[:-4] + '_edge.jpg')\n        image = cv2.imread(image)\n        mask = cv2.imread(mask)\n        image = cv2.resize(image, (args.image_width, args.image_height))\n        guidance = cv2.resize(guidance, (args.image_width, args.image_height))\n        mask = cv2.resize(mask, (args.image_width, args.image_height))\n        # cv2.imwrite(out, image*(1-mask/255.) + mask)\n        # # continue\n        # image = np.zeros((128, 256, 3))\n        # mask = np.zeros((128, 256, 3))\n\n        assert image.shape == mask.shape\n\n        h, w, _ = image.shape\n        grid = 4\n        image = image[:h//grid*grid, :w//grid*grid, :]\n        mask = mask[:h//grid*grid, :w//grid*grid, :]\n        guidance = guidance[:h//grid*grid, :w//grid*grid, :]\n        print('Shape of image: {}'.format(image.shape))\n\n        image = np.expand_dims(image, 0)\n        guidance = np.expand_dims(guidance, 0)\n        mask = np.expand_dims(mask, 0)\n        input_image = np.concatenate([image, guidance, mask], axis=2)\n\n        # load pretrained model\n        result = sess.run(output, feed_dict={input_image_ph: input_image})\n        print('Processed: {}'.format(out))\n        cv2.imwrite(out, result[0][:, :, ::-1])\n\n    print('Time total: {}'.format(time.time() - t))\n"
        },
        {
          "name": "inpaint.yml",
          "type": "blob",
          "size": 2.0546875,
          "content": "# =========================== Basic Settings ===========================\n# machine info\nnum_gpus_per_job: 1  # number of gpus each job need\nnum_cpus_per_job: 4  # number of gpus each job need\nnum_hosts_per_job: 1\nmemory_per_job: 32  # number of gpus each job need\ngpu_type: 'nvidia-tesla-p100'\n\n# parameters\nname: places2_gated_conv_v100  # any name\nmodel_restore: ''  # logs/places2_gated_conv\ndataset: 'celebahq'  # 'tmnist', 'dtd', 'places2', 'celeba', 'imagenet', 'cityscapes'\nrandom_crop: False  # Set to false when dataset is 'celebahq', meaning only resize the images to img_shapes, instead of crop img_shapes from a larger raw image. This is useful when you train on images with different resolutions like places2. In these cases, please set random_crop to true.\nval: False  # true if you want to view validation results in tensorboard\nlog_dir: logs/full_model_celeba_hq_256\n\ngan: 'sngan'\ngan_loss_alpha: 1\ngan_with_mask: True\ndiscounted_mask: True\nrandom_seed: False\npadding: 'SAME'\n\n# training\ntrain_spe: 4000\nmax_iters: 100000000\nviz_max_out: 10\nval_psteps: 2000\n\n# data\ndata_flist:\n  # https://github.com/jiahuiyu/progressive_growing_of_gans_tf\n  celebahq: [\n    'data/celeba_hq/train_shuffled.flist',\n    'data/celeba_hq/validation_static_view.flist'\n  ]\n  # http://mmlab.ie.cuhk.edu.hk/projects/celeba.html, please to use random_crop: True\n  celeba: [\n    'data/celeba/train_shuffled.flist',\n    'data/celeba/validation_static_view.flist'\n  ]\n  # http://places2.csail.mit.edu/, please download the high-resolution dataset and use random_crop: True\n  places2: [\n    'data/places2/train_shuffled.flist',\n    'data/places2/validation_static_view.flist'\n  ]\n  # http://www.image-net.org/, please use random_crop: True\n  imagenet: [\n    'data/imagenet/train_shuffled.flist',\n    'data/imagenet/validation_static_view.flist',\n  ]\n\nstatic_view_size: 30\nimg_shapes: [256, 256, 3]\nheight: 128\nwidth: 128\nmax_delta_height: 32\nmax_delta_width: 32\nbatch_size: 16\nvertical_margin: 0\nhorizontal_margin: 0\n\n# loss\nae_loss: True\nl1_loss: True\nl1_loss_alpha: 1.\n\n# to tune\nguided: False\nedge_threshold: 0.6\n"
        },
        {
          "name": "inpaint_model.py",
          "type": "blob",
          "size": 12.4423828125,
          "content": "\"\"\" common model for DCGAN \"\"\"\nimport logging\n\nimport cv2\nimport neuralgym as ng\nimport tensorflow as tf\nfrom tensorflow.contrib.framework.python.ops import arg_scope\n\nfrom neuralgym.models import Model\nfrom neuralgym.ops.summary_ops import scalar_summary, images_summary\nfrom neuralgym.ops.summary_ops import gradients_summary\nfrom neuralgym.ops.layers import flatten, resize\nfrom neuralgym.ops.gan_ops import gan_hinge_loss\nfrom neuralgym.ops.gan_ops import random_interpolates\n\nfrom inpaint_ops import gen_conv, gen_deconv, dis_conv\nfrom inpaint_ops import random_bbox, bbox2mask, local_patch, brush_stroke_mask\nfrom inpaint_ops import resize_mask_like, contextual_attention\n\n\nlogger = logging.getLogger()\n\n\nclass InpaintCAModel(Model):\n    def __init__(self):\n        super().__init__('InpaintCAModel')\n\n    def build_inpaint_net(self, x, mask, reuse=False,\n                          training=True, padding='SAME', name='inpaint_net'):\n        \"\"\"Inpaint network.\n\n        Args:\n            x: incomplete image, [-1, 1]\n            mask: mask region {0, 1}\n        Returns:\n            [-1, 1] as predicted image\n        \"\"\"\n        xin = x\n        offset_flow = None\n        ones_x = tf.ones_like(x)[:, :, :, 0:1]\n        x = tf.concat([x, ones_x, ones_x*mask], axis=3)\n\n        # two stage network\n        cnum = 48\n        with tf.variable_scope(name, reuse=reuse), \\\n                arg_scope([gen_conv, gen_deconv],\n                          training=training, padding=padding):\n            # stage1\n            x = gen_conv(x, cnum, 5, 1, name='conv1')\n            x = gen_conv(x, 2*cnum, 3, 2, name='conv2_downsample')\n            x = gen_conv(x, 2*cnum, 3, 1, name='conv3')\n            x = gen_conv(x, 4*cnum, 3, 2, name='conv4_downsample')\n            x = gen_conv(x, 4*cnum, 3, 1, name='conv5')\n            x = gen_conv(x, 4*cnum, 3, 1, name='conv6')\n            mask_s = resize_mask_like(mask, x)\n            x = gen_conv(x, 4*cnum, 3, rate=2, name='conv7_atrous')\n            x = gen_conv(x, 4*cnum, 3, rate=4, name='conv8_atrous')\n            x = gen_conv(x, 4*cnum, 3, rate=8, name='conv9_atrous')\n            x = gen_conv(x, 4*cnum, 3, rate=16, name='conv10_atrous')\n            x = gen_conv(x, 4*cnum, 3, 1, name='conv11')\n            x = gen_conv(x, 4*cnum, 3, 1, name='conv12')\n            x = gen_deconv(x, 2*cnum, name='conv13_upsample')\n            x = gen_conv(x, 2*cnum, 3, 1, name='conv14')\n            x = gen_deconv(x, cnum, name='conv15_upsample')\n            x = gen_conv(x, cnum//2, 3, 1, name='conv16')\n            x = gen_conv(x, 3, 3, 1, activation=None, name='conv17')\n            x = tf.nn.tanh(x)\n            x_stage1 = x\n\n            # stage2, paste result as input\n            x = x*mask + xin[:, :, :, 0:3]*(1.-mask)\n            x.set_shape(xin[:, :, :, 0:3].get_shape().as_list())\n            # conv branch\n            # xnow = tf.concat([x, ones_x, ones_x*mask], axis=3)\n            xnow = x\n            x = gen_conv(xnow, cnum, 5, 1, name='xconv1')\n            x = gen_conv(x, cnum, 3, 2, name='xconv2_downsample')\n            x = gen_conv(x, 2*cnum, 3, 1, name='xconv3')\n            x = gen_conv(x, 2*cnum, 3, 2, name='xconv4_downsample')\n            x = gen_conv(x, 4*cnum, 3, 1, name='xconv5')\n            x = gen_conv(x, 4*cnum, 3, 1, name='xconv6')\n            x = gen_conv(x, 4*cnum, 3, rate=2, name='xconv7_atrous')\n            x = gen_conv(x, 4*cnum, 3, rate=4, name='xconv8_atrous')\n            x = gen_conv(x, 4*cnum, 3, rate=8, name='xconv9_atrous')\n            x = gen_conv(x, 4*cnum, 3, rate=16, name='xconv10_atrous')\n            x_hallu = x\n            # attention branch\n            x = gen_conv(xnow, cnum, 5, 1, name='pmconv1')\n            x = gen_conv(x, cnum, 3, 2, name='pmconv2_downsample')\n            x = gen_conv(x, 2*cnum, 3, 1, name='pmconv3')\n            x = gen_conv(x, 4*cnum, 3, 2, name='pmconv4_downsample')\n            x = gen_conv(x, 4*cnum, 3, 1, name='pmconv5')\n            x = gen_conv(x, 4*cnum, 3, 1, name='pmconv6',\n                                activation=tf.nn.relu)\n            x, offset_flow = contextual_attention(x, x, mask_s, 3, 1, rate=2)\n            x = gen_conv(x, 4*cnum, 3, 1, name='pmconv9')\n            x = gen_conv(x, 4*cnum, 3, 1, name='pmconv10')\n            pm = x\n            x = tf.concat([x_hallu, pm], axis=3)\n\n            x = gen_conv(x, 4*cnum, 3, 1, name='allconv11')\n            x = gen_conv(x, 4*cnum, 3, 1, name='allconv12')\n            x = gen_deconv(x, 2*cnum, name='allconv13_upsample')\n            x = gen_conv(x, 2*cnum, 3, 1, name='allconv14')\n            x = gen_deconv(x, cnum, name='allconv15_upsample')\n            x = gen_conv(x, cnum//2, 3, 1, name='allconv16')\n            x = gen_conv(x, 3, 3, 1, activation=None, name='allconv17')\n            x = tf.nn.tanh(x)\n            x_stage2 = x\n        return x_stage1, x_stage2, offset_flow\n\n    def build_sn_patch_gan_discriminator(self, x, reuse=False, training=True):\n        with tf.variable_scope('sn_patch_gan', reuse=reuse):\n            cnum = 64\n            x = dis_conv(x, cnum, name='conv1', training=training)\n            x = dis_conv(x, cnum*2, name='conv2', training=training)\n            x = dis_conv(x, cnum*4, name='conv3', training=training)\n            x = dis_conv(x, cnum*4, name='conv4', training=training)\n            x = dis_conv(x, cnum*4, name='conv5', training=training)\n            x = dis_conv(x, cnum*4, name='conv6', training=training)\n            x = flatten(x, name='flatten')\n            return x\n\n    def build_gan_discriminator(\n            self, batch, reuse=False, training=True):\n        with tf.variable_scope('discriminator', reuse=reuse):\n            d = self.build_sn_patch_gan_discriminator(\n                batch, reuse=reuse, training=training)\n            return d\n\n    def build_graph_with_losses(\n            self, FLAGS, batch_data, training=True, summary=False,\n            reuse=False):\n        if FLAGS.guided:\n            batch_data, edge = batch_data\n            edge = edge[:, :, :, 0:1] / 255.\n            edge = tf.cast(edge > FLAGS.edge_threshold, tf.float32)\n        batch_pos = batch_data / 127.5 - 1.\n        # generate mask, 1 represents masked point\n        bbox = random_bbox(FLAGS)\n        regular_mask = bbox2mask(FLAGS, bbox, name='mask_c')\n        irregular_mask = brush_stroke_mask(FLAGS, name='mask_c')\n        mask = tf.cast(\n            tf.logical_or(\n                tf.cast(irregular_mask, tf.bool),\n                tf.cast(regular_mask, tf.bool),\n            ),\n            tf.float32\n        )\n\n        batch_incomplete = batch_pos*(1.-mask)\n        if FLAGS.guided:\n            edge = edge * mask\n            xin = tf.concat([batch_incomplete, edge], axis=3)\n        else:\n            xin = batch_incomplete\n        x1, x2, offset_flow = self.build_inpaint_net(\n            xin, mask, reuse=reuse, training=training,\n            padding=FLAGS.padding)\n        batch_predicted = x2\n        losses = {}\n        # apply mask and complete image\n        batch_complete = batch_predicted*mask + batch_incomplete*(1.-mask)\n        # local patches\n        losses['ae_loss'] = FLAGS.l1_loss_alpha * tf.reduce_mean(tf.abs(batch_pos - x1))\n        losses['ae_loss'] += FLAGS.l1_loss_alpha * tf.reduce_mean(tf.abs(batch_pos - x2))\n        if summary:\n            scalar_summary('losses/ae_loss', losses['ae_loss'])\n            if FLAGS.guided:\n                viz_img = [\n                    batch_pos,\n                    batch_incomplete + edge,\n                    batch_complete]\n            else:\n                viz_img = [batch_pos, batch_incomplete, batch_complete]\n            if offset_flow is not None:\n                viz_img.append(\n                    resize(offset_flow, scale=4,\n                           func=tf.image.resize_bilinear))\n            images_summary(\n                tf.concat(viz_img, axis=2),\n                'raw_incomplete_predicted_complete', FLAGS.viz_max_out)\n\n        # gan\n        batch_pos_neg = tf.concat([batch_pos, batch_complete], axis=0)\n        if FLAGS.gan_with_mask:\n            batch_pos_neg = tf.concat([batch_pos_neg, tf.tile(mask, [FLAGS.batch_size*2, 1, 1, 1])], axis=3)\n        if FLAGS.guided:\n            # conditional GANs\n            batch_pos_neg = tf.concat([batch_pos_neg, tf.tile(edge, [2, 1, 1, 1])], axis=3)\n        # wgan with gradient penalty\n        if FLAGS.gan == 'sngan':\n            pos_neg = self.build_gan_discriminator(batch_pos_neg, training=training, reuse=reuse)\n            pos, neg = tf.split(pos_neg, 2)\n            g_loss, d_loss = gan_hinge_loss(pos, neg)\n            losses['g_loss'] = g_loss\n            losses['d_loss'] = d_loss\n        else:\n            raise NotImplementedError('{} not implemented.'.format(FLAGS.gan))\n        if summary:\n            # summary the magnitude of gradients from different losses w.r.t. predicted image\n            gradients_summary(losses['g_loss'], batch_predicted, name='g_loss')\n            gradients_summary(losses['g_loss'], x2, name='g_loss_to_x2')\n            # gradients_summary(losses['ae_loss'], x1, name='ae_loss_to_x1')\n            gradients_summary(losses['ae_loss'], x2, name='ae_loss_to_x2')\n        losses['g_loss'] = FLAGS.gan_loss_alpha * losses['g_loss']\n        if FLAGS.ae_loss:\n            losses['g_loss'] += losses['ae_loss']\n        g_vars = tf.get_collection(\n            tf.GraphKeys.TRAINABLE_VARIABLES, 'inpaint_net')\n        d_vars = tf.get_collection(\n            tf.GraphKeys.TRAINABLE_VARIABLES, 'discriminator')\n        return g_vars, d_vars, losses\n\n    def build_infer_graph(self, FLAGS, batch_data, bbox=None, name='val'):\n        \"\"\"\n        \"\"\"\n        if FLAGS.guided:\n            batch_data, edge = batch_data\n            edge = edge[:, :, :, 0:1] / 255.\n            edge = tf.cast(edge > FLAGS.edge_threshold, tf.float32)\n        regular_mask = bbox2mask(FLAGS, bbox, name='mask_c')\n        irregular_mask = brush_stroke_mask(FLAGS, name='mask_c')\n        mask = tf.cast(\n            tf.logical_or(\n                tf.cast(irregular_mask, tf.bool),\n                tf.cast(regular_mask, tf.bool),\n            ),\n            tf.float32\n        )\n\n        batch_pos = batch_data / 127.5 - 1.\n        batch_incomplete = batch_pos*(1.-mask)\n        if FLAGS.guided:\n            edge = edge * mask\n            xin = tf.concat([batch_incomplete, edge], axis=3)\n        else:\n            xin = batch_incomplete\n        # inpaint\n        x1, x2, offset_flow = self.build_inpaint_net(\n            xin, mask, reuse=True,\n            training=False, padding=FLAGS.padding)\n        batch_predicted = x2\n        # apply mask and reconstruct\n        batch_complete = batch_predicted*mask + batch_incomplete*(1.-mask)\n        # global image visualization\n        if FLAGS.guided:\n            viz_img = [\n                batch_pos,\n                batch_incomplete + edge,\n                batch_complete]\n        else:\n            viz_img = [batch_pos, batch_incomplete, batch_complete]\n        if offset_flow is not None:\n            viz_img.append(\n                resize(offset_flow, scale=4,\n                       func=tf.image.resize_bilinear))\n        images_summary(\n            tf.concat(viz_img, axis=2),\n            name+'_raw_incomplete_complete', FLAGS.viz_max_out)\n        return batch_complete\n\n    def build_static_infer_graph(self, FLAGS, batch_data, name):\n        \"\"\"\n        \"\"\"\n        # generate mask, 1 represents masked point\n        bbox = (tf.constant(FLAGS.height//2), tf.constant(FLAGS.width//2),\n                tf.constant(FLAGS.height), tf.constant(FLAGS.width))\n        return self.build_infer_graph(FLAGS, batch_data, bbox, name)\n\n\n    def build_server_graph(self, FLAGS, batch_data, reuse=False, is_training=False):\n        \"\"\"\n        \"\"\"\n        # generate mask, 1 represents masked point\n        if FLAGS.guided:\n            batch_raw, edge, masks_raw = tf.split(batch_data, 3, axis=2)\n            edge = edge[:, :, :, 0:1] / 255.\n            edge = tf.cast(edge > FLAGS.edge_threshold, tf.float32)\n        else:\n            batch_raw, masks_raw = tf.split(batch_data, 2, axis=2)\n        masks = tf.cast(masks_raw[0:1, :, :, 0:1] > 127.5, tf.float32)\n\n        batch_pos = batch_raw / 127.5 - 1.\n        batch_incomplete = batch_pos * (1. - masks)\n        if FLAGS.guided:\n            edge = edge * masks[:, :, :, 0:1]\n            xin = tf.concat([batch_incomplete, edge], axis=3)\n        else:\n            xin = batch_incomplete\n        # inpaint\n        x1, x2, flow = self.build_inpaint_net(\n            xin, masks, reuse=reuse, training=is_training)\n        batch_predict = x2\n        # apply mask and reconstruct\n        batch_complete = batch_predict*masks + batch_incomplete*(1-masks)\n        return batch_complete\n"
        },
        {
          "name": "inpaint_ops.py",
          "type": "blob",
          "size": 17.88671875,
          "content": "import logging\nimport math\n\nimport cv2\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.contrib.framework.python.ops import add_arg_scope\nfrom PIL import Image, ImageDraw\n\nfrom neuralgym.ops.layers import resize\nfrom neuralgym.ops.layers import *\nfrom neuralgym.ops.loss_ops import *\nfrom neuralgym.ops.gan_ops import *\nfrom neuralgym.ops.summary_ops import *\n\n\nlogger = logging.getLogger()\nnp.random.seed(2018)\n\n\n@add_arg_scope\ndef gen_conv(x, cnum, ksize, stride=1, rate=1, name='conv',\n             padding='SAME', activation=tf.nn.elu, training=True):\n    \"\"\"Define conv for generator.\n\n    Args:\n        x: Input.\n        cnum: Channel number.\n        ksize: Kernel size.\n        Stride: Convolution stride.\n        Rate: Rate for or dilated conv.\n        name: Name of layers.\n        padding: Default to SYMMETRIC.\n        activation: Activation function after convolution.\n        training: If current graph is for training or inference, used for bn.\n\n    Returns:\n        tf.Tensor: output\n\n    \"\"\"\n    assert padding in ['SYMMETRIC', 'SAME', 'REFELECT']\n    if padding == 'SYMMETRIC' or padding == 'REFELECT':\n        p = int(rate*(ksize-1)/2)\n        x = tf.pad(x, [[0,0], [p, p], [p, p], [0,0]], mode=padding)\n        padding = 'VALID'\n    x = tf.layers.conv2d(\n        x, cnum, ksize, stride, dilation_rate=rate,\n        activation=None, padding=padding, name=name)\n    if cnum == 3 or activation is None:\n        # conv for output\n        return x\n    x, y = tf.split(x, 2, 3)\n    x = activation(x)\n    y = tf.nn.sigmoid(y)\n    x = x * y\n    return x\n\n\n@add_arg_scope\ndef gen_deconv(x, cnum, name='upsample', padding='SAME', training=True):\n    \"\"\"Define deconv for generator.\n    The deconv is defined to be a x2 resize_nearest_neighbor operation with\n    additional gen_conv operation.\n\n    Args:\n        x: Input.\n        cnum: Channel number.\n        name: Name of layers.\n        training: If current graph is for training or inference, used for bn.\n\n    Returns:\n        tf.Tensor: output\n\n    \"\"\"\n    with tf.variable_scope(name):\n        x = resize(x, func=tf.image.resize_nearest_neighbor)\n        x = gen_conv(\n            x, cnum, 3, 1, name=name+'_conv', padding=padding,\n            training=training)\n    return x\n\n\n@add_arg_scope\ndef dis_conv(x, cnum, ksize=5, stride=2, name='conv', training=True):\n    \"\"\"Define conv for discriminator.\n    Activation is set to leaky_relu.\n\n    Args:\n        x: Input.\n        cnum: Channel number.\n        ksize: Kernel size.\n        Stride: Convolution stride.\n        name: Name of layers.\n        training: If current graph is for training or inference, used for bn.\n\n    Returns:\n        tf.Tensor: output\n\n    \"\"\"\n    x = conv2d_spectral_norm(x, cnum, ksize, stride, 'SAME', name=name)\n    x = tf.nn.leaky_relu(x)\n    return x\n\n\ndef random_bbox(FLAGS):\n    \"\"\"Generate a random tlhw.\n\n    Returns:\n        tuple: (top, left, height, width)\n\n    \"\"\"\n    img_shape = FLAGS.img_shapes\n    img_height = img_shape[0]\n    img_width = img_shape[1]\n    maxt = img_height - FLAGS.vertical_margin - FLAGS.height\n    maxl = img_width - FLAGS.horizontal_margin - FLAGS.width\n    t = tf.random_uniform(\n        [], minval=FLAGS.vertical_margin, maxval=maxt, dtype=tf.int32)\n    l = tf.random_uniform(\n        [], minval=FLAGS.horizontal_margin, maxval=maxl, dtype=tf.int32)\n    h = tf.constant(FLAGS.height)\n    w = tf.constant(FLAGS.width)\n    return (t, l, h, w)\n\n\ndef bbox2mask(FLAGS, bbox, name='mask'):\n    \"\"\"Generate mask tensor from bbox.\n\n    Args:\n        bbox: tuple, (top, left, height, width)\n\n    Returns:\n        tf.Tensor: output with shape [1, H, W, 1]\n\n    \"\"\"\n    def npmask(bbox, height, width, delta_h, delta_w):\n        mask = np.zeros((1, height, width, 1), np.float32)\n        h = np.random.randint(delta_h//2+1)\n        w = np.random.randint(delta_w//2+1)\n        mask[:, bbox[0]+h:bbox[0]+bbox[2]-h,\n             bbox[1]+w:bbox[1]+bbox[3]-w, :] = 1.\n        return mask\n    with tf.variable_scope(name), tf.device('/cpu:0'):\n        img_shape = FLAGS.img_shapes\n        height = img_shape[0]\n        width = img_shape[1]\n        mask = tf.py_func(\n            npmask,\n            [bbox, height, width,\n             FLAGS.max_delta_height, FLAGS.max_delta_width],\n            tf.float32, stateful=False)\n        mask.set_shape([1] + [height, width] + [1])\n    return mask\n\n\ndef brush_stroke_mask(FLAGS, name='mask'):\n    \"\"\"Generate mask tensor from bbox.\n\n    Returns:\n        tf.Tensor: output with shape [1, H, W, 1]\n\n    \"\"\"\n    min_num_vertex = 4\n    max_num_vertex = 12\n    mean_angle = 2*math.pi / 5\n    angle_range = 2*math.pi / 15\n    min_width = 12\n    max_width = 40\n    def generate_mask(H, W):\n        average_radius = math.sqrt(H*H+W*W) / 8\n        mask = Image.new('L', (W, H), 0)\n\n        for _ in range(np.random.randint(1, 4)):\n            num_vertex = np.random.randint(min_num_vertex, max_num_vertex)\n            angle_min = mean_angle - np.random.uniform(0, angle_range)\n            angle_max = mean_angle + np.random.uniform(0, angle_range)\n            angles = []\n            vertex = []\n            for i in range(num_vertex):\n                if i % 2 == 0:\n                    angles.append(2*math.pi - np.random.uniform(angle_min, angle_max))\n                else:\n                    angles.append(np.random.uniform(angle_min, angle_max))\n\n            h, w = mask.size\n            vertex.append((int(np.random.randint(0, w)), int(np.random.randint(0, h))))\n            for i in range(num_vertex):\n                r = np.clip(\n                    np.random.normal(loc=average_radius, scale=average_radius//2),\n                    0, 2*average_radius)\n                new_x = np.clip(vertex[-1][0] + r * math.cos(angles[i]), 0, w)\n                new_y = np.clip(vertex[-1][1] + r * math.sin(angles[i]), 0, h)\n                vertex.append((int(new_x), int(new_y)))\n\n            draw = ImageDraw.Draw(mask)\n            width = int(np.random.uniform(min_width, max_width))\n            draw.line(vertex, fill=1, width=width)\n            for v in vertex:\n                draw.ellipse((v[0] - width//2,\n                              v[1] - width//2,\n                              v[0] + width//2,\n                              v[1] + width//2),\n                             fill=1)\n\n        if np.random.normal() > 0:\n            mask.transpose(Image.FLIP_LEFT_RIGHT)\n        if np.random.normal() > 0:\n            mask.transpose(Image.FLIP_TOP_BOTTOM)\n        mask = np.asarray(mask, np.float32)\n        mask = np.reshape(mask, (1, H, W, 1))\n        return mask\n    with tf.variable_scope(name), tf.device('/cpu:0'):\n        img_shape = FLAGS.img_shapes\n        height = img_shape[0]\n        width = img_shape[1]\n        mask = tf.py_func(\n            generate_mask,\n            [height, width],\n            tf.float32, stateful=True)\n        mask.set_shape([1] + [height, width] + [1])\n    return mask\n\n\ndef local_patch(x, bbox):\n    \"\"\"Crop local patch according to bbox.\n\n    Args:\n        x: input\n        bbox: (top, left, height, width)\n\n    Returns:\n        tf.Tensor: local patch\n\n    \"\"\"\n    x = tf.image.crop_to_bounding_box(x, bbox[0], bbox[1], bbox[2], bbox[3])\n    return x\n\n\ndef resize_mask_like(mask, x):\n    \"\"\"Resize mask like shape of x.\n\n    Args:\n        mask: Original mask.\n        x: To shape of x.\n\n    Returns:\n        tf.Tensor: resized mask\n\n    \"\"\"\n    mask_resize = resize(\n        mask, to_shape=x.get_shape().as_list()[1:3],\n        func=tf.image.resize_nearest_neighbor)\n    return mask_resize\n\n\ndef contextual_attention(f, b, mask=None, ksize=3, stride=1, rate=1,\n                         fuse_k=3, softmax_scale=10., training=True, fuse=True):\n    \"\"\" Contextual attention layer implementation.\n\n    Contextual attention is first introduced in publication:\n        Generative Image Inpainting with Contextual Attention, Yu et al.\n\n    Args:\n        x: Input feature to match (foreground).\n        t: Input feature for match (background).\n        mask: Input mask for t, indicating patches not available.\n        ksize: Kernel size for contextual attention.\n        stride: Stride for extracting patches from t.\n        rate: Dilation for matching.\n        softmax_scale: Scaled softmax for attention.\n        training: Indicating if current graph is training or inference.\n\n    Returns:\n        tf.Tensor: output\n\n    \"\"\"\n    # get shapes\n    raw_fs = tf.shape(f)\n    raw_int_fs = f.get_shape().as_list()\n    raw_int_bs = b.get_shape().as_list()\n    # extract patches from background with stride and rate\n    kernel = 2*rate\n    raw_w = tf.extract_image_patches(\n        b, [1,kernel,kernel,1], [1,rate*stride,rate*stride,1], [1,1,1,1], padding='SAME')\n    raw_w = tf.reshape(raw_w, [raw_int_bs[0], -1, kernel, kernel, raw_int_bs[3]])\n    raw_w = tf.transpose(raw_w, [0, 2, 3, 4, 1])  # transpose to b*k*k*c*hw\n    # downscaling foreground option: downscaling both foreground and\n    # background for matching and use original background for reconstruction.\n    f = resize(f, scale=1./rate, func=tf.image.resize_nearest_neighbor)\n    b = resize(b, to_shape=[int(raw_int_bs[1]/rate), int(raw_int_bs[2]/rate)], func=tf.image.resize_nearest_neighbor)  # https://github.com/tensorflow/tensorflow/issues/11651\n    if mask is not None:\n        mask = resize(mask, scale=1./rate, func=tf.image.resize_nearest_neighbor)\n    fs = tf.shape(f)\n    int_fs = f.get_shape().as_list()\n    f_groups = tf.split(f, int_fs[0], axis=0)\n    # from t(H*W*C) to w(b*k*k*c*h*w)\n    bs = tf.shape(b)\n    int_bs = b.get_shape().as_list()\n    w = tf.extract_image_patches(\n        b, [1,ksize,ksize,1], [1,stride,stride,1], [1,1,1,1], padding='SAME')\n    w = tf.reshape(w, [int_fs[0], -1, ksize, ksize, int_fs[3]])\n    w = tf.transpose(w, [0, 2, 3, 4, 1])  # transpose to b*k*k*c*hw\n    # process mask\n    if mask is None:\n        mask = tf.zeros([1, bs[1], bs[2], 1])\n    m = tf.extract_image_patches(\n        mask, [1,ksize,ksize,1], [1,stride,stride,1], [1,1,1,1], padding='SAME')\n    m = tf.reshape(m, [1, -1, ksize, ksize, 1])\n    m = tf.transpose(m, [0, 2, 3, 4, 1])  # transpose to b*k*k*c*hw\n    m = m[0]\n    mm = tf.cast(tf.equal(tf.reduce_mean(m, axis=[0,1,2], keep_dims=True), 0.), tf.float32)\n    w_groups = tf.split(w, int_bs[0], axis=0)\n    raw_w_groups = tf.split(raw_w, int_bs[0], axis=0)\n    y = []\n    offsets = []\n    k = fuse_k\n    scale = softmax_scale\n    fuse_weight = tf.reshape(tf.eye(k), [k, k, 1, 1])\n    for xi, wi, raw_wi in zip(f_groups, w_groups, raw_w_groups):\n        # conv for compare\n        wi = wi[0]\n        wi_normed = wi / tf.maximum(tf.sqrt(tf.reduce_sum(tf.square(wi), axis=[0,1,2])), 1e-4)\n        yi = tf.nn.conv2d(xi, wi_normed, strides=[1,1,1,1], padding=\"SAME\")\n\n        # conv implementation for fuse scores to encourage large patches\n        if fuse:\n            yi = tf.reshape(yi, [1, fs[1]*fs[2], bs[1]*bs[2], 1])\n            yi = tf.nn.conv2d(yi, fuse_weight, strides=[1,1,1,1], padding='SAME')\n            yi = tf.reshape(yi, [1, fs[1], fs[2], bs[1], bs[2]])\n            yi = tf.transpose(yi, [0, 2, 1, 4, 3])\n            yi = tf.reshape(yi, [1, fs[1]*fs[2], bs[1]*bs[2], 1])\n            yi = tf.nn.conv2d(yi, fuse_weight, strides=[1,1,1,1], padding='SAME')\n            yi = tf.reshape(yi, [1, fs[2], fs[1], bs[2], bs[1]])\n            yi = tf.transpose(yi, [0, 2, 1, 4, 3])\n        yi = tf.reshape(yi, [1, fs[1], fs[2], bs[1]*bs[2]])\n\n        # softmax to match\n        yi *=  mm  # mask\n        yi = tf.nn.softmax(yi*scale, 3)\n        yi *=  mm  # mask\n\n        offset = tf.argmax(yi, axis=3, output_type=tf.int32)\n        offset = tf.stack([offset // fs[2], offset % fs[2]], axis=-1)\n        # deconv for patch pasting\n        # 3.1 paste center\n        wi_center = raw_wi[0]\n        yi = tf.nn.conv2d_transpose(yi, wi_center, tf.concat([[1], raw_fs[1:]], axis=0), strides=[1,rate,rate,1]) / 4.\n        y.append(yi)\n        offsets.append(offset)\n    y = tf.concat(y, axis=0)\n    y.set_shape(raw_int_fs)\n    offsets = tf.concat(offsets, axis=0)\n    offsets.set_shape(int_bs[:3] + [2])\n    # case1: visualize optical flow: minus current position\n    h_add = tf.tile(tf.reshape(tf.range(bs[1]), [1, bs[1], 1, 1]), [bs[0], 1, bs[2], 1])\n    w_add = tf.tile(tf.reshape(tf.range(bs[2]), [1, 1, bs[2], 1]), [bs[0], bs[1], 1, 1])\n    offsets = offsets - tf.concat([h_add, w_add], axis=3)\n    # to flow image\n    flow = flow_to_image_tf(offsets)\n    # # case2: visualize which pixels are attended\n    # flow = highlight_flow_tf(offsets * tf.cast(mask, tf.int32))\n    if rate != 1:\n        flow = resize(flow, scale=rate, func=tf.image.resize_bilinear)\n    return y, flow\n\n\ndef test_contextual_attention(args):\n    \"\"\"Test contextual attention layer with 3-channel image input\n    (instead of n-channel feature).\n\n    \"\"\"\n    import cv2\n    import os\n    # run on cpu\n    os.environ['CUDA_VISIBLE_DEVICES'] = '0'\n\n    rate = 2\n    stride = 1\n    grid = rate*stride\n\n    b = cv2.imread(args.imageA)\n    b = cv2.resize(b, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_CUBIC)\n    h, w, _ = b.shape\n    b = b[:h//grid*grid, :w//grid*grid, :]\n    b = np.expand_dims(b, 0)\n    logger.info('Size of imageA: {}'.format(b.shape))\n\n    f = cv2.imread(args.imageB)\n    h, w, _ = f.shape\n    f = f[:h//grid*grid, :w//grid*grid, :]\n    f = np.expand_dims(f, 0)\n    logger.info('Size of imageB: {}'.format(f.shape))\n\n    with tf.Session() as sess:\n        bt = tf.constant(b, dtype=tf.float32)\n        ft = tf.constant(f, dtype=tf.float32)\n\n        yt, flow = contextual_attention(\n            ft, bt, stride=stride, rate=rate,\n            training=False, fuse=False)\n        y = sess.run(yt)\n        cv2.imwrite(args.imageOut, y[0])\n\n\ndef make_color_wheel():\n    RY, YG, GC, CB, BM, MR = (15, 6, 4, 11, 13, 6)\n    ncols = RY + YG + GC + CB + BM + MR\n    colorwheel = np.zeros([ncols, 3])\n    col = 0\n    # RY\n    colorwheel[0:RY, 0] = 255\n    colorwheel[0:RY, 1] = np.transpose(np.floor(255*np.arange(0, RY) / RY))\n    col += RY\n    # YG\n    colorwheel[col:col+YG, 0] = 255 - np.transpose(np.floor(255*np.arange(0, YG) / YG))\n    colorwheel[col:col+YG, 1] = 255\n    col += YG\n    # GC\n    colorwheel[col:col+GC, 1] = 255\n    colorwheel[col:col+GC, 2] = np.transpose(np.floor(255*np.arange(0, GC) / GC))\n    col += GC\n    # CB\n    colorwheel[col:col+CB, 1] = 255 - np.transpose(np.floor(255*np.arange(0, CB) / CB))\n    colorwheel[col:col+CB, 2] = 255\n    col += CB\n    # BM\n    colorwheel[col:col+BM, 2] = 255\n    colorwheel[col:col+BM, 0] = np.transpose(np.floor(255*np.arange(0, BM) / BM))\n    col += + BM\n    # MR\n    colorwheel[col:col+MR, 2] = 255 - np.transpose(np.floor(255 * np.arange(0, MR) / MR))\n    colorwheel[col:col+MR, 0] = 255\n    return colorwheel\n\n\nCOLORWHEEL = make_color_wheel()\n\n\ndef compute_color(u,v):\n    h, w = u.shape\n    img = np.zeros([h, w, 3])\n    nanIdx = np.isnan(u) | np.isnan(v)\n    u[nanIdx] = 0\n    v[nanIdx] = 0\n    # colorwheel = COLORWHEEL\n    colorwheel = make_color_wheel()\n    ncols = np.size(colorwheel, 0)\n    rad = np.sqrt(u**2+v**2)\n    a = np.arctan2(-v, -u) / np.pi\n    fk = (a+1) / 2 * (ncols - 1) + 1\n    k0 = np.floor(fk).astype(int)\n    k1 = k0 + 1\n    k1[k1 == ncols+1] = 1\n    f = fk - k0\n    for i in range(np.size(colorwheel,1)):\n        tmp = colorwheel[:, i]\n        col0 = tmp[k0-1] / 255\n        col1 = tmp[k1-1] / 255\n        col = (1-f) * col0 + f * col1\n        idx = rad <= 1\n        col[idx] = 1-rad[idx]*(1-col[idx])\n        notidx = np.logical_not(idx)\n        col[notidx] *= 0.75\n        img[:, :, i] = np.uint8(np.floor(255 * col*(1-nanIdx)))\n    return img\n\n\n\ndef flow_to_image(flow):\n    \"\"\"Transfer flow map to image.\n    Part of code forked from flownet.\n    \"\"\"\n    out = []\n    maxu = -999.\n    maxv = -999.\n    minu = 999.\n    minv = 999.\n    maxrad = -1\n    for i in range(flow.shape[0]):\n        u = flow[i, :, :, 0]\n        v = flow[i, :, :, 1]\n        idxunknow = (abs(u) > 1e7) | (abs(v) > 1e7)\n        u[idxunknow] = 0\n        v[idxunknow] = 0\n        maxu = max(maxu, np.max(u))\n        minu = min(minu, np.min(u))\n        maxv = max(maxv, np.max(v))\n        minv = min(minv, np.min(v))\n        rad = np.sqrt(u ** 2 + v ** 2)\n        maxrad = max(maxrad, np.max(rad))\n        u = u/(maxrad + np.finfo(float).eps)\n        v = v/(maxrad + np.finfo(float).eps)\n        img = compute_color(u, v)\n        out.append(img)\n    return np.float32(np.uint8(out))\n\n\ndef flow_to_image_tf(flow, name='flow_to_image'):\n    \"\"\"Tensorflow ops for computing flow to image.\n    \"\"\"\n    with tf.variable_scope(name), tf.device('/cpu:0'):\n        img = tf.py_func(flow_to_image, [flow], tf.float32, stateful=False)\n        img.set_shape(flow.get_shape().as_list()[0:-1]+[3])\n        img = img / 127.5 - 1.\n        return img\n\n\ndef highlight_flow(flow):\n    \"\"\"Convert flow into middlebury color code image.\n    \"\"\"\n    out = []\n    s = flow.shape\n    for i in range(flow.shape[0]):\n        img = np.ones((s[1], s[2], 3)) * 144.\n        u = flow[i, :, :, 0]\n        v = flow[i, :, :, 1]\n        for h in range(s[1]):\n            for w in range(s[1]):\n                ui = u[h,w]\n                vi = v[h,w]\n                img[ui, vi, :] = 255.\n        out.append(img)\n    return np.float32(np.uint8(out))\n\n\ndef highlight_flow_tf(flow, name='flow_to_image'):\n    \"\"\"Tensorflow ops for highlight flow.\n    \"\"\"\n    with tf.variable_scope(name), tf.device('/cpu:0'):\n        img = tf.py_func(highlight_flow, [flow], tf.float32, stateful=False)\n        img.set_shape(flow.get_shape().as_list()[0:-1]+[3])\n        img = img / 127.5 - 1.\n        return img\n\n\ndef image2edge(image):\n    \"\"\"Convert image to edges.\n    \"\"\"\n    out = []\n    for i in range(image.shape[0]):\n        img = cv2.Laplacian(image[i, :, :, :], cv2.CV_64F, ksize=3, scale=2)\n        out.append(img)\n    return np.float32(np.uint8(out))\n\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--imageA', default='', type=str, help='Image A as background patches to reconstruct image B.')\n    parser.add_argument('--imageB', default='', type=str, help='Image B is reconstructed with image A.')\n    parser.add_argument('--imageOut', default='result.png', type=str, help='Image B is reconstructed with image A.')\n    args = parser.parse_args()\n    test_contextual_attention(args)\n"
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 2.162109375,
          "content": "import argparse\n\nimport cv2\nimport numpy as np\nimport tensorflow as tf\nimport neuralgym as ng\n\nfrom inpaint_model import InpaintCAModel\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--image', default='', type=str,\n                    help='The filename of image to be completed.')\nparser.add_argument('--mask', default='', type=str,\n                    help='The filename of mask, value 255 indicates mask.')\nparser.add_argument('--output', default='output.png', type=str,\n                    help='Where to write output.')\nparser.add_argument('--checkpoint_dir', default='', type=str,\n                    help='The directory of tensorflow checkpoint.')\n\n\nif __name__ == \"__main__\":\n    FLAGS = ng.Config('inpaint.yml')\n    # ng.get_gpus(1)\n    args, unknown = parser.parse_known_args()\n\n    model = InpaintCAModel()\n    image = cv2.imread(args.image)\n    mask = cv2.imread(args.mask)\n    # mask = cv2.resize(mask, (0,0), fx=0.5, fy=0.5)\n\n    assert image.shape == mask.shape\n\n    h, w, _ = image.shape\n    grid = 8\n    image = image[:h//grid*grid, :w//grid*grid, :]\n    mask = mask[:h//grid*grid, :w//grid*grid, :]\n    print('Shape of image: {}'.format(image.shape))\n\n    image = np.expand_dims(image, 0)\n    mask = np.expand_dims(mask, 0)\n    input_image = np.concatenate([image, mask], axis=2)\n\n    sess_config = tf.ConfigProto()\n    sess_config.gpu_options.allow_growth = True\n    with tf.Session(config=sess_config) as sess:\n        input_image = tf.constant(input_image, dtype=tf.float32)\n        output = model.build_server_graph(FLAGS, input_image)\n        output = (output + 1.) * 127.5\n        output = tf.reverse(output, [-1])\n        output = tf.saturate_cast(output, tf.uint8)\n        # load pretrained model\n        vars_list = tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES)\n        assign_ops = []\n        for var in vars_list:\n            vname = var.name\n            from_name = vname\n            var_value = tf.contrib.framework.load_variable(args.checkpoint_dir, from_name)\n            assign_ops.append(tf.assign(var, var_value))\n        sess.run(assign_ops)\n        print('Model loaded.')\n        result = sess.run(output)\n        cv2.imwrite(args.output, result[0][:, :, ::-1])\n"
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 3.8486328125,
          "content": "import os\nimport glob\n\nimport tensorflow as tf\nimport neuralgym as ng\n\nfrom inpaint_model import InpaintCAModel\n\n\ndef multigpu_graph_def(model, FLAGS, data, gpu_id=0, loss_type='g'):\n    with tf.device('/cpu:0'):\n        images = data.data_pipeline(FLAGS.batch_size)\n    if gpu_id == 0 and loss_type == 'g':\n        _, _, losses = model.build_graph_with_losses(\n            FLAGS, images, FLAGS, summary=True, reuse=True)\n    else:\n        _, _, losses = model.build_graph_with_losses(\n            FLAGS, images, FLAGS, reuse=True)\n    if loss_type == 'g':\n        return losses['g_loss']\n    elif loss_type == 'd':\n        return losses['d_loss']\n    else:\n        raise ValueError('loss type is not supported.')\n\n\nif __name__ == \"__main__\":\n    # training data\n    FLAGS = ng.Config('inpaint.yml')\n    img_shapes = FLAGS.img_shapes\n    with open(FLAGS.data_flist[FLAGS.dataset][0]) as f:\n        fnames = f.read().splitlines()\n    if FLAGS.guided:\n        fnames = [(fname, fname[:-4] + '_edge.jpg') for fname in fnames]\n        img_shapes = [img_shapes, img_shapes]\n    data = ng.data.DataFromFNames(\n        fnames, img_shapes, random_crop=FLAGS.random_crop,\n        nthreads=FLAGS.num_cpus_per_job)\n    images = data.data_pipeline(FLAGS.batch_size)\n    # main model\n    model = InpaintCAModel()\n    g_vars, d_vars, losses = model.build_graph_with_losses(FLAGS, images)\n    # validation images\n    if FLAGS.val:\n        with open(FLAGS.data_flist[FLAGS.dataset][1]) as f:\n            val_fnames = f.read().splitlines()\n        if FLAGS.guided:\n            val_fnames = [\n                (fname, fname[:-4] + '_edge.jpg') for fname in val_fnames]\n        # progress monitor by visualizing static images\n        for i in range(FLAGS.static_view_size):\n            static_fnames = val_fnames[i:i+1]\n            static_images = ng.data.DataFromFNames(\n                static_fnames, img_shapes, nthreads=1,\n                random_crop=FLAGS.random_crop).data_pipeline(1)\n            static_inpainted_images = model.build_static_infer_graph(\n                FLAGS, static_images, name='static_view/%d' % i)\n    # training settings\n    lr = tf.get_variable(\n        'lr', shape=[], trainable=False,\n        initializer=tf.constant_initializer(1e-4))\n    d_optimizer = tf.train.AdamOptimizer(lr, beta1=0.5, beta2=0.999)\n    g_optimizer = d_optimizer\n    # train discriminator with secondary trainer, should initialize before\n    # primary trainer.\n    # discriminator_training_callback = ng.callbacks.SecondaryTrainer(\n    discriminator_training_callback = ng.callbacks.SecondaryMultiGPUTrainer(\n        num_gpus=FLAGS.num_gpus_per_job,\n        pstep=1,\n        optimizer=d_optimizer,\n        var_list=d_vars,\n        max_iters=1,\n        grads_summary=False,\n        graph_def=multigpu_graph_def,\n        graph_def_kwargs={\n            'model': model, 'FLAGS': FLAGS, 'data': data, 'loss_type': 'd'},\n    )\n    # train generator with primary trainer\n    # trainer = ng.train.Trainer(\n    trainer = ng.train.MultiGPUTrainer(\n        num_gpus=FLAGS.num_gpus_per_job,\n        optimizer=g_optimizer,\n        var_list=g_vars,\n        max_iters=FLAGS.max_iters,\n        graph_def=multigpu_graph_def,\n        grads_summary=False,\n        gradient_processor=None,\n        graph_def_kwargs={\n            'model': model, 'FLAGS': FLAGS, 'data': data, 'loss_type': 'g'},\n        spe=FLAGS.train_spe,\n        log_dir=FLAGS.log_dir,\n    )\n    # add all callbacks\n    trainer.add_callbacks([\n        discriminator_training_callback,\n        ng.callbacks.WeightsViewer(),\n        ng.callbacks.ModelRestorer(trainer.context['saver'], dump_prefix=FLAGS.model_restore+'/snap', optimistic=True),\n        ng.callbacks.ModelSaver(FLAGS.train_spe, trainer.context['saver'], FLAGS.log_dir+'/snap'),\n        ng.callbacks.SummaryWriter((FLAGS.val_psteps//1), trainer.context['summary_writer'], tf.summary.merge_all()),\n    ])\n    # launch training\n    trainer.train()\n"
        }
      ]
    }
  ]
}