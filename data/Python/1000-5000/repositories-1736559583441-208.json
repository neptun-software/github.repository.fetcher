{
  "metadata": {
    "timestamp": 1736559583441,
    "page": 208,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "InkboxSoftware/excelCPU",
      "stars": 4487,
      "defaultBranch": "main",
      "files": [
        {
          "name": "CPU.xlsx",
          "type": "blob",
          "size": 1465.9658203125,
          "content": null
        },
        {
          "name": "Excel-ASM16.xml",
          "type": "blob",
          "size": 5.130859375,
          "content": "<NotepadPlus>\r\n    <UserLang name=\"EXCEL-ASM16\" ext=\"\" udlVersion=\"2.1\">\r\n        <Settings>\r\n            <Global caseIgnored=\"yes\" allowFoldOfComments=\"yes\" foldCompact=\"no\" forcePureLC=\"0\" decimalSeparator=\"0\" />\r\n            <Prefix Keywords1=\"no\" Keywords2=\"yes\" Keywords3=\"yes\" Keywords4=\"no\" Keywords5=\"no\" Keywords6=\"no\" Keywords7=\"no\" Keywords8=\"no\" />\r\n        </Settings>\r\n        <KeywordLists>\r\n            <Keywords name=\"Comments\">00; 01 02 03 04</Keywords>\r\n            <Keywords name=\"Numbers, prefix1\"></Keywords>\r\n            <Keywords name=\"Numbers, prefix2\"></Keywords>\r\n            <Keywords name=\"Numbers, extras1\"></Keywords>\r\n            <Keywords name=\"Numbers, extras2\"></Keywords>\r\n            <Keywords name=\"Numbers, suffix1\"></Keywords>\r\n            <Keywords name=\"Numbers, suffix2\"></Keywords>\r\n            <Keywords name=\"Numbers, range\"></Keywords>\r\n            <Keywords name=\"Operators1\"></Keywords>\r\n            <Keywords name=\"Operators2\"></Keywords>\r\n            <Keywords name=\"Folders in code1, open\"></Keywords>\r\n            <Keywords name=\"Folders in code1, middle\"></Keywords>\r\n            <Keywords name=\"Folders in code1, close\"></Keywords>\r\n            <Keywords name=\"Folders in code2, open\"></Keywords>\r\n            <Keywords name=\"Folders in code2, middle\"></Keywords>\r\n            <Keywords name=\"Folders in code2, close\"></Keywords>\r\n            <Keywords name=\"Folders in comment, open\"></Keywords>\r\n            <Keywords name=\"Folders in comment, middle\"></Keywords>\r\n            <Keywords name=\"Folders in comment, close\"></Keywords>\r\n            <Keywords name=\"Keywords1\">JMP&#x000D;&#x000A;JEQ&#x000D;&#x000A;JLT&#x000D;&#x000A;JGE&#x000D;&#x000A;LOAD&#x000D;&#x000A;STORE&#x000D;&#x000A;TRAN&#x000D;&#x000A;ADD&#x000D;&#x000A;SUB&#x000D;&#x000A;MULT&#x000D;&#x000A;DIV&#x000D;&#x000A;INC&#x000D;&#x000A;DEC&#x000D;&#x000A;AND&#x000D;&#x000A;OR&#x000D;&#x000A;XOR&#x000D;&#x000A;NOT&#x000D;&#x000A;NOT&#x000D;&#x000A;ROL&#x000D;&#x000A;ROR&#x000D;&#x000A;CMP&#x000D;&#x000A;CLC&#x000D;&#x000A;STC&#x000D;&#x000A;NOP&#x000D;&#x000A;ORG</Keywords>\r\n            <Keywords name=\"Keywords2\">R</Keywords>\r\n            <Keywords name=\"Keywords3\">$&#x000D;&#x000A;#&#x000D;&#x000A;@</Keywords>\r\n            <Keywords name=\"Keywords4\">.DATA&#x000D;&#x000A;.CODE&#x000D;&#x000A;.INC</Keywords>\r\n            <Keywords name=\"Keywords5\"></Keywords>\r\n            <Keywords name=\"Keywords6\"></Keywords>\r\n            <Keywords name=\"Keywords7\"></Keywords>\r\n            <Keywords name=\"Keywords8\"></Keywords>\r\n            <Keywords name=\"Delimiters\"></Keywords>\r\n        </KeywordLists>\r\n        <Styles>\r\n            <WordsStyle name=\"DEFAULT\" fgColor=\"0080FF\" bgColor=\"FFFFFF\" fontStyle=\"1\" nesting=\"0\" />\r\n            <WordsStyle name=\"COMMENTS\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"LINE COMMENTS\" fgColor=\"008040\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"NUMBERS\" fgColor=\"0080FF\" bgColor=\"FFFFFF\" fontStyle=\"1\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS1\" fgColor=\"0000FF\" bgColor=\"FFFFFF\" fontStyle=\"1\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS2\" fgColor=\"0080FF\" bgColor=\"FFFFFF\" fontStyle=\"1\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS3\" fgColor=\"0000A0\" bgColor=\"FFFFFF\" fontStyle=\"1\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS4\" fgColor=\"FF0000\" bgColor=\"FFFFFF\" fontStyle=\"1\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS5\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS6\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS7\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"KEYWORDS8\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"OPERATORS\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"FOLDER IN CODE1\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"FOLDER IN CODE2\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"FOLDER IN COMMENT\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS1\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS2\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS3\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS4\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS5\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS6\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS7\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n            <WordsStyle name=\"DELIMITERS8\" fgColor=\"000000\" bgColor=\"FFFFFF\" fontStyle=\"0\" nesting=\"0\" />\r\n        </Styles>\r\n    </UserLang>\r\n</NotepadPlus>\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 6.8828125,
          "content": "Creative Commons Legal Code\n\nCC0 1.0 Universal\n\n    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE\n    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN\n    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS\n    INFORMATION ON AN \"AS-IS\" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES\n    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS\n    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM\n    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED\n    HEREUNDER.\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator\nand subsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for\nthe purpose of contributing to a commons of creative, cultural and\nscientific works (\"Commons\") that the public can reliably and without fear\nof later claims of infringement build upon, modify, incorporate in other\nworks, reuse and redistribute as freely as possible in any form whatsoever\nand for any purposes, including without limitation commercial purposes.\nThese owners may contribute to the Commons to promote the ideal of a free\nculture and the further production of creative, cultural and scientific\nworks, or to gain reputation or greater distribution for their Work in\npart through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any\nexpectation of additional consideration or compensation, the person\nassociating CC0 with a Work (the \"Affirmer\"), to the extent that he or she\nis an owner of Copyright and Related Rights in the Work, voluntarily\nelects to apply CC0 to the Work and publicly distribute the Work under its\nterms, with knowledge of his or her Copyright and Related Rights in the\nWork and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not\nlimited to, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display,\n     communicate, and translate a Work;\n ii. moral rights retained by the original author(s) and/or performer(s);\niii. publicity and privacy rights pertaining to a person's image or\n     likeness depicted in a Work;\n iv. rights protecting against unfair competition in regards to a Work,\n     subject to the limitations in paragraph 4(a), below;\n  v. rights protecting the extraction, dissemination, use and reuse of data\n     in a Work;\n vi. database rights (such as those arising under Directive 96/9/EC of the\n     European Parliament and of the Council of 11 March 1996 on the legal\n     protection of databases, and under any national implementation\n     thereof, including any amended or successor version of such\n     directive); and\nvii. other similar, equivalent or corresponding rights throughout the\n     world based on applicable law or treaty, and any national\n     implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention\nof, applicable law, Affirmer hereby overtly, fully, permanently,\nirrevocably and unconditionally waives, abandons, and surrenders all of\nAffirmer's Copyright and Related Rights and associated claims and causes\nof action, whether now known or unknown (including existing as well as\nfuture claims and causes of action), in the Work (i) in all territories\nworldwide, (ii) for the maximum duration provided by applicable law or\ntreaty (including future time extensions), (iii) in any current or future\nmedium and for any number of copies, and (iv) for any purpose whatsoever,\nincluding without limitation commercial, advertising or promotional\npurposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each\nmember of the public at large and to the detriment of Affirmer's heirs and\nsuccessors, fully intending that such Waiver shall not be subject to\nrevocation, rescission, cancellation, termination, or any other legal or\nequitable action to disrupt the quiet enjoyment of the Work by the public\nas contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason\nbe judged legally invalid or ineffective under applicable law, then the\nWaiver shall be preserved to the maximum extent permitted taking into\naccount Affirmer's express Statement of Purpose. In addition, to the\nextent the Waiver is so judged Affirmer hereby grants to each affected\nperson a royalty-free, non transferable, non sublicensable, non exclusive,\nirrevocable and unconditional license to exercise Affirmer's Copyright and\nRelated Rights in the Work (i) in all territories worldwide, (ii) for the\nmaximum duration provided by applicable law or treaty (including future\ntime extensions), (iii) in any current or future medium and for any number\nof copies, and (iv) for any purpose whatsoever, including without\nlimitation commercial, advertising or promotional purposes (the\n\"License\"). The License shall be deemed effective as of the date CC0 was\napplied by Affirmer to the Work. Should any part of the License for any\nreason be judged legally invalid or ineffective under applicable law, such\npartial invalidity or ineffectiveness shall not invalidate the remainder\nof the License, and in such case Affirmer hereby affirms that he or she\nwill not (i) exercise any of his or her remaining Copyright and Related\nRights in the Work or (ii) assert any associated claims and causes of\naction with respect to the Work, in either case contrary to Affirmer's\nexpress Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n a. No trademark or patent rights held by Affirmer are waived, abandoned,\n    surrendered, licensed or otherwise affected by this document.\n b. Affirmer offers the Work as-is and makes no representations or\n    warranties of any kind concerning the Work, express, implied,\n    statutory or otherwise, including without limitation warranties of\n    title, merchantability, fitness for a particular purpose, non\n    infringement, or the absence of latent or other defects, accuracy, or\n    the present or absence of errors, whether or not discoverable, all to\n    the greatest extent permissible under applicable law.\n c. Affirmer disclaims responsibility for clearing rights of other persons\n    that may apply to the Work or any use thereof, including without\n    limitation any person's Copyright and Related Rights in the Work.\n    Further, Affirmer disclaims responsibility for obtaining any necessary\n    consents, permissions or other rights required for any use of the\n    Work.\n d. Affirmer understands and acknowledges that Creative Commons is not a\n    party to this document and has no duty or obligation with respect to\n    this CC0 or use of the Work.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4755859375,
          "content": "# Excel 16-Bit CPU\nThe Excel 16-Bit CPU repository contains the following main files:\n```\nCPU.xlsx - The main spreadsheet which contains the CPU\nROM.xlsx - The ROM spreadsheet read by the CPU when the read ROM switch is turned on\nInstructionSet.xlsx - Explains the ISA of the CPU\ncompileExcelASM16.py - The Excel-ASM16 compiler\nExcel-ASM16.xml - Markdown for the Excel-ASM16 language compatible with Notepad++\nSample Programs - Folder of sample programs for the Excel CPU\n```\n\nThe CPU.xlsx file features a 16-bit CPU, 16 general purpose registers, 128KB of RAM, and a 128x128 display.\n\nIterative Calcuation must be turned on. This can be done by going to File -> Options -> Formulas -> then Enable Iterative Calculation and **set Maximum Iterations to 1**\n\nThe CPU runs off a clock signal set in B2. This clock signal will update under the normal conditions of recalculation within an Excel spreadsheet. Pressing the F9 key will recalculate the spreadsheet. \n\nThe Reset Button in the F2 cell, if set to true, will reset the PC register back to 0. \n\nThe computer in the CPU.xlsx file can be controlled either in automatic or manual mode. This is controlled by the button in J2. If set to true, when the clock signal from B2 is high, then the CPU will carry out the operation specified in the override slot in the Fetch Unit in cell D8. If false, then the CPU will execute the operation retrieved from the memory table as specified by the PC register. \n\nThe Reset RAM button, if set to true, will reset every memory unit to 0. \n\nThe Read ROM button, if set to true, will copy the values of the memory table in the ROM.xlsx spreadsheet onto the RAM table of the CPU.xlsx spreadsheet. \n\nNormal operation of the CPU consists of setting the Reset Button to high, either flipping the Reset RAM or Read ROM buttons on and off again (causing the RAM to be reset or the ROM to be read into the RAM table), and then turning off the Reset Button. The CPU is then set up to either run a program in Manual mode, or will carry out the program specified in RAM. \n\n\nThe CPU is designed to run according to the instruction set architecture specified in the InstructionSet.xlsx spreadsheet. \n\nWarning: It is not possible to simply mash the F9 key as fast as possible, it takes time for Excel to update so many cells, it is recommended to wait until the text \"Ready\" can be seen in the bottom left corner of Excel can be seen before continuing to press the F9 key. \n\n\nAlternatively, programs can be written in the Excel-ASM16 language and compiled to the ROM.xlsx spreadsheet.\n\nExcel-ASM16 features 24 different case-insensitive instructions. \nThere are three different operands that are used in each instruction\n```\n\tREG\t; refers to any of the 16 general purpose registers\n\tE.G. R0, R1, R15 &c.\n\t\n\tMEM\t; refers to any 16-bit addressable memory unit (formatted in hexadecimal)\n\tE.G. @0000, @F000, @FFFF, &c.\n\n\tIMD\t; refers to an immediate number usually 16-bits long, except in the case of ROL and ROR\n\t\t; can be defined either in decimal or hexadecimal\n\tE.G. #0000, $0CCC, #60340, $FF10, &c.\n```\n### LOAD\n```\n\tLOAD REG MEM\t; loads the specified memory unit into REG\n\tLOAD REG IMD\t; load specified 16-bit immediate value into REG\n\tLOAD REG REG\t; loads memory unit at the address stored in REGB into REGA\n```\n### STORE\n```\n\tSTORE REG MEM\t; stores the value of REG to the address specified\n\tSTORE REG REG \t; stores the value of REGA into the memory unit at the address in REGB\n```\n### JUMP\n```\n\tJMP IMD\t\t; sets PC to the immediate 16-bit value\n\tJEQ IMD\t\t; if ZF = 0, sets PC to the immediate 16-bit value\n\tJLT IMD\t\t; if CF = 0, sets PC to the immediate 16-bit value \n\tJGE IMD\t\t; if CF = 1 or ZF = 1, sets PC to the immediate 16-bit value \n```\n### TRAN\n```\n\tTRAN REG REG\t; transfers value from REGA to REGB\n```\n### ALGEBRAIC INSTRUCTIONS\n### ADD\n```\n\tADD REG REG\t; REGA + REGB + CF, result stored in REGA\n```\n### SUB\n```\n\tSUB REG REG\t; (REGA - REGB) - CF, result stored in REGA\n```\n### MULT\n```\n\tMULT REG REG\t; REGA * REGB, low 16-bit result stored in REGA, high 16-bit result stored in REGB\n```\n### DIV\n```\n\tDIV REG REG\t; REGA / REGB result stored in REGA, REGA MOD REGB stored in REGB\n```\n### INC\n```\n\tINC REG\t; REGA++, CF not affected\n```\n### DEC\n```\n\tDEC REG\t; REGA--, CF not affected\n```\n### BITWISE INSTRUCTIONS\n### AND\n```\n\tAND REG REG\t; REGA AND REGB, result stored in REGA\n```\n### OR\n```\n\tOR REG REG\t\t; REGA OR REGB, result stored in REGA\n```\n### XOR\n```\n\tXOR REG REG\t; REGA XOR REGB, result stored in REGA\n```\n### NOT\n```\n\tNOT REG \t\t; NOT REGA, result stored in REGA\n```\n### ROLL INSTRUCTIONS\n### ROL\n```\n\tROL REG IMD\t; leftwise roll of bits of REGA carried out IMD times\n\t\t\t\t; IMD is a 4-bit value\n```\n### ROR\n```\n\tROR REG IMD\t; rightwise roll of bits of REGA carried out IMD times\n\t\t\t\t; IMD is a 4-bit value\n```\n### Flag instructions\n```\n\tCLC\t\t\t; sets CF to 0\n\tSTC\t\t\t; sets CF to 1 \n```\n### NOP\n```\n\tNOP\t\t\t; does not effect any registers or memory\n```\n### ORG\n```\n\tORG IMD\t\t; sets the location of the next instruction\n\t\t\t\t; must be further than the current length of program\n```\n### INC\n```\n\tINC \"file.bin\"\t; copies the binary file into the program\n```\n\n### Compiling\nAfter having written a program, it is compiled with the commandline instruction\n```\n\tpy compileExcelASM16.py program.s ROM.xlsx\n```\nWhere **program.s** is the user's program file, and ROM.xlsx is the ROM spreadsheet\n\nAfter compiling successfully, the program can be transferred into the CPU.xlsx program by flipping the Read ROM button at the top of the spreadsheet. Note, the ROM.xlsx file must be open for the data to update correctly. \n\n\n\n\n\n\n\n\n\n\n\n"
        },
        {
          "name": "ROM.xlsx",
          "type": "blob",
          "size": 150.5087890625,
          "content": null
        },
        {
          "name": "compileExcelASM16.py",
          "type": "blob",
          "size": 17.263671875,
          "content": "#COMPILER FOR EXCEL-ASM16\r\n#USE:   py compileExcelASM16.py [program.s] ROM.xlsx\r\n\r\nimport sys\r\nimport os\r\nimport time\r\nimport math\r\nfrom openpyxl import load_workbook\r\n\r\ncompiled = False;\r\nfilePath = \"\"\r\nspreadsheet = \"\"\r\nstartTime = 0\r\ndata = []\r\nprogram = []\r\noutput = []\r\n\r\nlabelOpen = False\r\nlabelToUse = \"\"\r\nRED = '\\033[91m';\r\nENDCOLOR = '\\033[0m';\r\n\r\ndef integerError(lineNumber):\r\n    print(RED + \"\\tInteger outside of expected range, line: \" + str(lineNumber)+ ENDCOLOR)\r\n    compileResults()\r\n    \r\ndef syntaxError(lineNumber):\r\n    print(RED + \"\\tSyntax Error, line: \" + str(lineNumber)+ ENDCOLOR)\r\n    compileResults()  \r\n    \r\ndef labelError(lineNumber):\r\n    print(RED + \"\\tDouble label detected, line \" + str(lineNumber) + ENDCOLOR)\r\n    compileResults()\r\n    \r\ndef referenceNotFoundError(labelName):\r\n    print(RED + \"\\tReference to variable or label not found, \" + str(labelName) + ENDCOLOR)\r\n    compileResults()\r\n\r\ndef unrecognizedError(lineNumber):\r\n    print(RED + \"\\tUnrecognized Instruction, line \" + str(lineNumber) + ENDCOLOR)\r\n    compileResults()\r\n\r\ndef varSequenceError(lineNumber):\r\n    print(RED + \"\\tVariables must be defined before program code, line \" + str(lineNumber) + ENDCOLOR)\r\n    compileResults()\r\n\r\ndef varUseError(varName):\r\n    print(RED + \"\\tVariable cannot be used like label, var: \" + str(lineNumber) + ENDCOLOR)\r\n    compileResults()\r\n\r\ndef orgError(lineNumber):\r\n    print(RED + \"\\tProgram Count exceeds target address, line \" + str(lineNumber) + ENDCOLOR)\r\n    compileResults()\r\n    \r\ndef incResourceError(resourceName, lineNumber):\r\n    print(RED + \"\\tResource \" + resourceName + \" could not be found, line \" + str(lineNumber) + ENDCOLOR)\r\n    compileResults()    \r\n\r\ndef lengthError(exceededWords):\r\n    print(RED + \"\\tProgram length exceeds available RAM by \" + str(exceededWords) + \" words\" + ENDCOLOR)\r\n    compileResults()\r\n\r\ndef ROMbookError():\r\n    print(RED + \"\\tCould not save to specified workbook, make sure the file is closed and try again\" + ENDCOLOR)\r\n    exit()\r\n    \r\ndef createLine(label, operations):\r\n    return [label, operations]\r\n\r\ndef getCurrentAddress():\r\n    address = len(data)\r\n    for operations in program:\r\n        address = address + len(operations[1])\r\n    return address\r\n\r\ndef getLocationOfLabel(labelName):\r\n    location = 0\r\n    for var in data:\r\n        if (labelName == var[0]):\r\n            varUseError(labelName)\r\n        location = location + 1\r\n    for operations in program:\r\n        if (labelName == operations[0]):\r\n            return location\r\n        location = location + len(operations[1])\r\n    return -1\r\n\r\ndef getVarIndex(varName):\r\n    i = 0\r\n    for var in data:\r\n        if (varName == var[0]):\r\n            return i\r\n        i = i + 1\r\n    return -1    \r\n\r\ndef includeBIN(fileName):\r\n    with open(fileName, \"rb\") as incFile:\r\n        cycle = False\r\n        lastValue = 0\r\n        while (word := incFile.read(1)):\r\n            value = int.from_bytes(word, \"big\")\r\n            if (cycle):\r\n                value = (lastValue * 256) + value\r\n                if (value >= pow(2, 16)):\r\n                    input()\r\n                program.append(createLine(\"\", [value]))\r\n                cycle = False\r\n            else:\r\n                lastValue = value\r\n                cycle = True\r\n        if (cycle): #catching last single byte value\r\n            program.append(createLine(\"\", [(lastValue * 256)]))\r\n            \r\n    return\r\n\r\ndef parseNumber(numberString, lineNumber):\r\n    prefix = numberString[0]\r\n    numberString = numberString[1:]\r\n    result = 0\r\n    if (prefix == \"$\" or prefix == \"@\"):\r\n        result = int(numberString, 16)\r\n        if (result > 65535):\r\n            integerError(lineNumber)\r\n    elif (prefix == \"#\"):\r\n        result = int(numberString)\r\n        if (result > 65535):\r\n            integerError(lineNumber)\r\n    elif (prefix == \"R\" and numberString.isdigit() and int(numberString) <= 15):\r\n        result = int(numberString)\r\n        if (result > 15):\r\n            integerError(lineNumber)\r\n    else:   #is a label\r\n        result = getLocationOfLabel(prefix + numberString)\r\n        if (result == -1 and lineNumber == -1): #second time around\r\n            referenceNotFoundError(prefix + numberString)\r\n        elif (result == -1):\r\n            return \"LABEL-\" + (prefix + numberString)            \r\n        if (result > 65535):\r\n            integerError(lineNumber)\r\n    if (result < 0):\r\n        integerError(lineNumber)\r\n    return result\r\n\r\ndef encode(line, lineNumber):\r\n    #convert to list of integers\r\n    opcode = line[0]\r\n    operand0 = 0\r\n    operand1 = 0\r\n    twoWord = False\r\n    #check instruction format:\r\n    if (opcode == \"JMP\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        twoWord = True\r\n        operand0 = int(\"0000\", 16)\r\n        operand1 = parseNumber(line[1], lineNumber)\r\n    elif (opcode == \"JEQ\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        twoWord = True\r\n        operand0 = int(\"0100\", 16)\r\n        operand1 = parseNumber(line[1], lineNumber)\r\n    elif (opcode == \"JLT\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        twoWord = True\r\n        operand0 = int(\"0200\", 16)\r\n        operand1 = parseNumber(line[1], lineNumber)\r\n    elif (opcode == \"JGE\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        twoWord = True\r\n        operand0 = int(\"0300\", 16)\r\n        operand1 = parseNumber(line[1], lineNumber)\r\n    elif (opcode == \"LOAD\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        varVal = getVarIndex(line[2])    #check if references variable\r\n        if (line[1][0] == \"R\" and not(str(varVal)[0] == \"-\")):\r\n            twoWord = True\r\n            operand0 = int(\"0400\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n            operand1 = varVal\r\n        elif (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"1900\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        elif (line[1][0] == \"R\" and line[2][0] == \"@\"):\r\n            twoWord = True\r\n            operand0 = int(\"0400\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n            operand1 = parseNumber(line[2], lineNumber)\r\n        elif (line[1][0] == \"R\" and (line[2][0] == \"$\" or line[2][0] == \"#\")):\r\n            twoWord = True\r\n            operand0 = int(\"0500\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n            operand1 = parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"STORE\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0700\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        elif (line[1][0] == \"R\" and line[2][0] == \"@\"):\r\n            twoWord = True\r\n            operand0 = int(\"0600\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n            operand1 = parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"TRAN\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0800\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"ADD\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0900\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"SUB\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0A00\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"MULT\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0B00\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"DIV\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0C00\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"INC\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == \"R\"):\r\n            operand0 = int(\"0D00\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"DEC\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == \"R\"):\r\n            operand0 = int(\"0E00\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"AND\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"0F00\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"OR\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"1000\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"XOR\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"1100\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"NOT\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == \"R\"):\r\n            operand0 = int(\"1200\", 16) + (parseNumber(line[1], lineNumber) * 16)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"ROL\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (not(line[1][0]) == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"1300\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"ROR\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (not(line[1][0] == line[2][0]) and line[1][0] == \"R\"):\r\n            operand0 = int(\"1400\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"CMP\"):\r\n        if (not(len(line) == 3)):\r\n            syntaxError(lineNumber)\r\n        if (line[1][0] == line[2][0] and line[1][0] == \"R\"):\r\n            operand0 = int(\"1500\", 16) + (parseNumber(line[1], lineNumber) * 16) + parseNumber(line[2], lineNumber)\r\n        else:\r\n            syntaxError(lineNumber)\r\n    elif (opcode == \"CLC\"):\r\n        if (not(len(line) == 1)):\r\n            syntaxError(lineNumber)\r\n        operand0 = int(\"1600\", 16)\r\n    elif (opcode == \"STC\"):\r\n        if (not(len(line) == 1)):\r\n            syntaxError(lineNumber)\r\n        operand0 = int(\"1700\", 16)\r\n    elif (opcode == \"NOP\"):\r\n        if (not(len(line) == 1)):\r\n            syntaxError(lineNumber)\r\n        operand0 = int(\"1800\", 16)\r\n    elif (len(line) == 3 and line[1] == \"=\"):  #variables\r\n        if (len(program) > 0):\r\n            varSequenceError(lineNumber)\r\n        data.append(createLine(line[0], line[2]))\r\n        return None\r\n    elif (len(line) == 1 and line[0] == \".DATA\"):\r\n        return None\r\n    elif (len(line) == 1 and line[0] == \".CODE\"):\r\n        #ADD JUMP TO START OF PROGRAM\r\n        data.insert(0, createLine(\"\", len(data) + 2))    #number of words in data section\r\n        data.insert(0, createLine(\"\", int(\"0000\", 16)))   #JMP\r\n        return None\r\n    elif (opcode == \"ORG\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        targetAddress = parseNumber(line[1], lineNumber)\r\n        currentAddress = getCurrentAddress()\r\n        if (currentAddress > targetAddress):\r\n            orgError(lineNumber)\r\n        while(currentAddress < targetAddress):\r\n            program.append(createLine(\"\", [0]))\r\n            currentAddress = currentAddress + 1\r\n        return None\r\n    elif (opcode == \".INC\"):\r\n        if (not(len(line) == 2)):\r\n            syntaxError(lineNumber)\r\n        line[1] = line[1].replace(\"\\\"\", \"\")\r\n        line[1] = line[1].replace(\"\\'\", \"\")\r\n        if (not(os.path.isfile(line[1]))):\r\n            incResourceError(line[1], lineNumber)\r\n        includeBIN(line[1])\r\n        return None\r\n    else:\r\n        unrecognizedError(lineNumber)\r\n    \r\n    if (not twoWord):\r\n        #print(str(hex(operand0)).upper())\r\n        return [operand0]\r\n    else:\r\n        #print(str(hex(operand0)).upper() + \", \" + str(hex(operand1)).upper())\r\n        return [operand0, operand1]\r\n        \r\ndef parseProgram():\r\n    global output\r\n    global compiled\r\n    global data\r\n    for value in data:\r\n        if (len(value[0]) > 0):\r\n            value[1] = parseNumber(value[1], 0)\r\n        output.append(value[1])\r\n    for operations in program:\r\n        for value in operations[1]:\r\n            output.append(value)\r\n    if (len(output) > 65536):\r\n        lengthError(len(output) - 65536)\r\n    compiled = True\r\n    return\r\n\r\ndef parseUnmarkedLabels():\r\n    pLine = 0\r\n    for operations in program:\r\n        valLine = 0\r\n        for val in operations[1]:\r\n            if (\"LABEL\" in str(val)):\r\n                program[pLine][1][valLine] = parseNumber(val[6:], -1)\r\n            valLine = valLine + 1\r\n        pLine = pLine + 1\r\n    return\r\n\r\ndef compileASM(filepath):\r\n    file = open(filepath, \"r\")\r\n    lineNumber = 1  #file line number for specifying errors\r\n    for line in file:\r\n        #print(line)\r\n        line = line.upper()\r\n        line = line.split(\";\")  #getting rid of comments\r\n        line[0] = line[0].replace(\"\\n\", \"\") #removing return line\r\n        line[0] = line[0].replace(\"\\r\", \"\")\r\n        line[0] = line[0].strip()\r\n        #print(line)\r\n        if (len(line[0]) > 0):\r\n            parseLine(line[0], lineNumber)\r\n        lineNumber = lineNumber + 1\r\n    parseUnmarkedLabels()    \r\n    parseProgram()\r\n    compileResults()\r\n\r\ndef parseLine(line, lineNumber):\r\n    global labelOpen\r\n    global labelToUse\r\n    labelLine = line.split(\":\");\r\n    label = labelLine[0]\r\n    if (\":\" in line and len(labelLine[1]) <= 1):\r\n        if (labelOpen):\r\n            labelError(lineNumber)\r\n        labelToUse = label  #add a label with no operations to program\r\n        labelOpen = True\r\n        return\r\n    elif (\":\" not in line):\r\n        if (labelOpen):\r\n            label = labelToUse\r\n            labelOpen = False\r\n        else:\r\n            label = \"\"\r\n    else:\r\n        if (labelOpen):\r\n            labelError(lineNumber)\r\n        line = labelLine[1].strip()\r\n    line = line.split(\" \")\r\n    #print(str(lineNumber) + \"\\t\" + str(label) + \"\\t\" + str(line))\r\n    operations = encode(line, lineNumber)\r\n    if (not(operations == None)):\r\n        program.append(createLine(label, operations))\r\n    return\r\n\r\ndef sendToSpreadsheet():\r\n    #load excel file\r\n    workbook = load_workbook(filename = spreadsheet)     \r\n    #open workbook\r\n    sheet = workbook.active\r\n    try:\r\n        i = 0\r\n        while (i < pow(2, 16)):\r\n            if (i < len(output)):\r\n                sheet.cell(row = math.floor(i / 256) + 1, column = (i % 256) + 1, value = output[i])\r\n            else:\r\n                sheet.cell(row = math.floor(i / 256) + 1, column = (i % 256) + 1, value = 0)\r\n            i = i + 1\r\n        #save the file\r\n        workbook.save(filename = spreadsheet)\r\n    except:\r\n        ROMbookError()\r\n    return\r\n\r\ndef compileResults():\r\n    if (not(compiled)):\r\n        print(RED + \"\\tProgram could not be compiled\" + ENDCOLOR)\r\n    else:\r\n        print(\"\\tProgram compiled Successfully\")\r\n        #print(output)\r\n    print(\"\\tProgram length in words: \" + str(getCurrentAddress()))\r\n    print(\"\\tWriting to spreadsheet ROM...\")\r\n    sendToSpreadsheet()\r\n    print(\"\\tFinished in \" + str(time.time()-startTime)[:6] + \"s\")\r\n    exit()\r\n\r\nif __name__ == \"__main__\":\r\n    startTime = time.time()\r\n    os.system('color')\r\n    print(\"\\tStarting operation...\")\r\n    \r\n    if (len(sys.argv) == 3):\r\n        filePath = sys.argv[1]\r\n        spreadsheet = sys.argv[2]\r\n    elif (len(sys.argv) == 1):\r\n        print(RED + \"\\tInsufficent arguments, no ASM file specified\" + ENDCOLOR)\r\n        compileResults()\r\n    elif (len(sys.argv) == 2):\r\n        print(RED + \"\\tInsufficent arguments, no target spreadsheet specified\" + ENDCOLOR)\r\n        compileResults()\r\n    else:\r\n        print(RED + \"\\tArguments too many\" + ENDCOLOR)\r\n        compileResults()\r\n    \r\n    if (not(os.path.isfile(filePath))):\r\n        print(RED + \"\\tFile \" + filePath + \" not found\" + ENDCOLOR)\r\n        compileResults()\r\n    compileASM(filePath)"
        },
        {
          "name": "instructionSet.xlsx",
          "type": "blob",
          "size": 12.8603515625,
          "content": null
        },
        {
          "name": "sample programs",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}