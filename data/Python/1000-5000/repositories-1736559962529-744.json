{
  "metadata": {
    "timestamp": 1736559962529,
    "page": 744,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cuemacro/finmarketpy",
      "stars": 3498,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.091796875,
          "content": "*.py linguist-language=Python\n*.ipynb linguist-language=Python\n*.html linguist-language=Python"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7890625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Credentials files\n*cred.py\n\n# Distribution / packaging\n.idea/\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist*/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\noutput_data\noutput_files\ndash/\ndash-master/\nscrap/\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Output Files\n\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 16.7001953125,
          "content": "# Installation of Cuemacro Python libraries (finmarketpy, findatapy and chartpy)\n\nIn order to install the Cuemacro Python libraries, I would recommend following the instructions below. If you already have Python 3.5 installed,\nyou can skip most of these steps. The below instructions assume that you have not installed Python at all and are assuming you have Windows.\n\nAt the end I also have comments related to installing finmarketpy, findatapy and chartpy on Linux and OS X.\n\nIn general, I would go in the order suggested here. Some components are optional (such as Bloomberg software).\n\nBefore installation of any specific Python libraries, we need to set up the core Python distribution and other programming tools,\nwhich will help you to write your own trading strategies and Python scripts for doing market analysis on top of the Cuemacro libraries.\n\n* Programming Tools\n    * Anaconda 64 bit Python - [download](https://www.continuum.io/downloads) - Windows/Linux/Mac OS X\n      * This is the most used Python distribution for data science\n      * As well as installing the core Python libraries, it also installs many useful libraries like the SciPy stack, which\n    contains NumPy, pandas etc. and many other useful libraries like matplotlib which are dependencies for the various Cuemacro libraries\n      * Recommend installing latest version of Python 3.7 (by running in command line `conda install python=3.7`) as some of the multiprocessing libraries have issues with Python 3.6 at present when I've tried it\n      * findatapy, chartpy and finmarketpy should be compatible with the dependencies in Anaconda (eg. version of pandas, numpy etc.)\n    * Microsoft Visual Studio 2017 Community Edition - [download](https://www.visualstudio.com/downloads/) or Visual C++ 2015 build tools - Windows\n      * Makes sure to do a custom installation and tick Visual C++ in the Visual Studio 2017 installation\n      * Alternatively, it is quicker to install [Visual C++ 2017 build tools](http://landinghub.visualstudio.com/visual-cpp-build-tools)\n         * You may need to add the following (or similar) to your Windows path `C:\\Program Files (x86)\\Windows Kits\\8.1\\bin\\x64`\n         * This should prevent the following compilation error where 'rl.exe' is not found\n      * Some Python libraries need a C++ compiler in order to build (such as blpapi and arctic)\n      * Often it is easier to install Python libraries using conda\n      * Alternatively, if you don't want to compile the libraries yourself, you can sometimes find pre-compiled\n      Python wheels for your platform\n    * Git - https://git-scm.com/downloads - Windows/Linux/Mac OS X\n        * Version control software\n        * Makes it easier to maintain your own Python code\n    * PyCharm Community Edition - [download](https://www.jetbrains.com/pycharm/download/) - Windows/Linux/Mac OS X\n        * PyCharm is a relatively easy to use IDE for coding Python, with tools such as autocompletion\n        and syntax highlighting\n        * The Professional Edition also adds a few bells and whistles including a code profiler\n        * I recommend running the 64 bit version, as I've the 32 bit version can run out memory particularly when building\n        indices\n        * There are many other alternative IDEs (and text editors) for Python, I recommend you also check out a few to see which you like most\n        (or you just use a simple text editor like Notepad!)\n            * Atom - [hackable text editor, which also has addins for Python coding](https://atom.io/)\n            * PyDev - [Python IDE written on top of Eclipse](http://www.pydev.org/)\n            * Sublime - [text editor](http://www.sublimetext.com/3)\n\n* Data tools\n    * MongoDB - [download](https://www.mongodb.com/download-center) - Windows/Linux/Mac OS X\n        * IOEngine class has a wrapper over arctic to use MongoDB (as well as HDF5 files if preferred)\n        * Be sure to setup a database in MongoDB, if you wish to use it to store data later\n    * Redis - [Download](https://redis.io/download) - Windows/Linux/Mac OS X\n        * IOEngine class has a wrapper to use Redis, as a high level cache\n        * Redis is an in-memory database designed for short term volatile storage\n        * findatapy uses it as a high level cache to speed up access to repeatedly used datasets\n    * Bloomberg Terminal - [download](https://www.bloomberg.com/professional/downloads/]) - Windows\n        * Bloomberg provides a high quality data source\n        * Note, you must be a subscriber for the software to function and to have a licence for the data\n        * This also needs installation of your serial number\n        * Bloomberg Terminal is only available for Windows\n        * Bloomberg Server API is available for Windows/Linux/Mac OS X but runs under a different licence\n\n* Fonts\n    * Open Sans - chartpy uses the open source Open Sans family of fonts as default for matplotlib\n    * You can download these for free from [Font Squirrel](https://www.fontsquirrel.com/fonts/open-sans)\n    * Once downloaded you need to install them on your operating system\n    * On Windows this involves copying the fonts to your Windows font folder (eg. C:\\Windows\\Fonts)\n    * You need to delete matplotlib's font cache file, so it picks up the new font (eg. fontList.py3k.cache in\n    C:\\Users\\User name\\.matplotlib\n\nOpen up the Anaconda Command Prompt (accessible via the Start Menu) to run the various \"conda\" and \"pip\" commands to install the\nvarious Python libraries. The Cuemacro libraries will install most Python dependencies, but some need to be installed separately.\n\n* Install finmarketpy, findatapy and chartpy the easy way...\n    * You can install some Python data science conda environments that I use for teaching\n    which include finmarketpy, findatapy and chartpy\n    * Instructions on how to install Anaconda and the py37class conda environment at \n    [https://github.com/cuemacro/teaching/blob/master/pythoncourse/installation/installing_anaconda_and_pycharm.ipynb](https://github.com/cuemacro/teaching/blob/master/pythoncourse/installation/installing_anaconda_and_pycharm.ipynb)\n\n* Python libraries (open source)\n    * arctic - `pip install arctic`\n        * Wrapper for MongoDB (also installs pymongo)\n        * Allows us to easily save and load pandas DataFrames in MongoDB\n        * Also compresses data contents\n    * blpapi - https://www.bloomberglabs.com/api/libraries/ (both C++ and Python libraries)\n        * Interact with Bloomberg programmatically via Python to download historical and live data\n        * Note that may need requires a C++ compiler to build the Python library \n        * Follow instructions at [https://github.com/cuemacro/findatapy/blob/master/BLOOMBERG.md](https://github.com/cuemacro/findatapy/blob/master/BLOOMBERG.md) for all the steps necessary to install blpapi\n    * Whilst Anaconda has most of the dependencies below and pip will install all additional ones needed by the Cuemacro Python\n    libraries it is possible to install them manually via pip, below is a list of the dependencies\n        * all libraries\n            * numpy - matrix algebra (Anaconda)\n            * pandas - time series (Anaconda) - older versions of pandas could have issues due to deprecated methods - recommend 1.0.5\n            * pytz - timezone management (Anaconda)\n            * requests - accessing URLs (Anaconda)\n            * mulitprocess - multitasking\n            * multiprocessing_on_dill - multiprocessing on dill (similar to multiprocess, can select which library to use)\n        * findatapy\n            * pandas_datareader - accessing market data sources including Yahoo Finance (Anaconda)\n            * quandl - accessing market data sources (Anaconda)\n            * redis - Python wrapper to access Redis, in-memory database, like a hashtable (Anaconda Linux/Mac)\n                * `brew reinstall redis` (Unix)\n            * openpyxl - writing Excel spreadsheets to disk (Anaconda)\n            * pyarrow - for caching \n            * keyring - for storing passwords\n            * arctic - wrapper on MongoDB (see below for installation)\n            * blpapi - Python API for Bloomberg (see below for installation)\n            * xlsxwriter - writing Excel files from Python (and reading) (Anaconda)\n        * chartpy\n            * bokeh - visualisation (Anaconda)\n            * cufflinks - wrapper on plotly\n            * matplotlib - visualisation (Anaconda)\n            * plotly - visualisation (Anaconda)\n            * vispy - visualisation with GPU acceleration\n            * twython - Twitter library for Python\n        * You can install all of these, and also chartpy, findatapy and finmarketpy by running the install_packages.bat file on Windows\n\n* Cuemacro Python libraries (open source)\n    * Before we start, make sure we are familiar where your Anaconda site packages folder is (ie. where it will install your Python dependencies),\n    as this will be where we need to edit the various configuration files described in this section.\n        * Typically this is in folders like:\n            * C:\\Anaconda3\\Lib\\site-packages\n            * C:\\Program Files\\Anaconda\\Lib\\site-packages\n    * chartpy - `pip install chartpy`\n        * Check constants file configuration [chartpy/chartpy/util/chartconstants.py](https://github.com/cuemacro/finmarketpy/blob/master/chartpy/util/chartconstants.py) for\n            * Adding your own API keys for Plotly, Twitter etc\n            * Changing the default size of plots\n            * Changing the default chart engine (eg. Plotly, Bokeh or Matplotlib)\n        * Alternatively you can create chartcred.py class in the same folder to put your own API keys\n        * This has the benefit of not being overwritten each time you upgrade the project\n    * findatapy - `pip install findatapy`\n        * Check constants file configuration [findatapy/findatapy/util/dataconstants.py](https://github.com/cuemacro/finmarketpy/blob/master/findatatpy/util/dataconstants.py) for\n            * adding your own API keys for Quandl etc.\n            * changing path of your local data source (change `folder_time_series_data` attribute)\n            * changing path of the config folder if necessary (change `config_root_folder` attribute) so you can create your own custom\n            ticker library (otherwise it will get overwritten each time you upgrade findatapy)\n            * changing the ticker library (placed in findatapy/findatapy/conf/*.CSV files)\n                * time_series_categories_fields.csv - define the categories of tickers and what fields they have\n                * time_series_fields_list.csv - define aliases for vendor fields\n                * time_series_tickers_list.csv - defines aliases for vendor tickers\n                * There are already setup with a few FX tickers to act as an example\n                * In addition, you can add your own CSV files to accompany time_series_tickers_list.csv (add to time_series_tickers_list attribute)\n                    * fx_vol_tickers.csv - samples of FX vol tickers\n                    * fx_forward_tickers.csv - samples of FX forward tickers\n            * changing logging.conf\n                * For customising how the project dumps logs to disk\n        * Alternatively you can create datacred.py class in the same folder to put your own API keys and file folder settings.\n        * This has the benefit of not being overwritten each time you upgrade the project.\n        * Below we have a sample datacred.py class file, to be placed in the \"util\" folder, any parameters set here, will overwrite\n        those of dataconstants.py (note: for passwords if a datacred.py file is not created, it will use\n        passwords stored in your keyring and will prompt you the very first time it is run):\n\n        ```python\nclass DataCred(object):\n\n    folder_historic_CSV = \"E:/tickdata/historicCSV\"\n    folder_time_series_data = \"C:/timeseriesdata\"\n\n    config_root_folder = \"E:/Remote/yen/conf/\"\n\n    ###### FOR ALIAS TICKERS\n    # config file for time series categories\n    time_series_categories_fields = \\\n        config_root_folder + \"conf/time_series_categories_fields.csv\"\n\n    # we can have multiple tickers files (separated by \";\")\n    time_series_tickers_list = config_root_folder + \"conf/time_series_tickers_list.csv;\" + \\\n                               config_root_folder + \"conf/futures_contracts_tickers.csv\"\n\n\n    time_series_fields_list = config_root_folder + \"conf/time_series_fields_list.csv\"\n\n    # config file for long term econ data\n    all_econ_tickers = config_root_folder + \"conf/all_econ_tickers.csv\"\n    econ_country_codes = config_root_folder + \"conf/econ_country_codes.csv\"\n    econ_country_groups = config_root_folder + \"conf/econ_country_groups.csv\"\n\n    default_market_data_generator = \"marketdatagenerator\"\n\n    # Quandl settings\n    quandl_api_key = \"XYZ\"\n\n    # Twitter settings (you need to set these up on Twitter)\n    TWITTER_APP_KEY = \"XYZ\"\n    TWITTER_APP_SECRET = \"XYZ\"\n    TWITTER_OAUTH_TOKEN = \"XYZ\"\n    TWITTER_OAUTH_TOKEN_SECRET = \"XYZ\"\n\n    # FRED API key\n    fred_api_key = \"XYZ\"\n\n    # database settings need to be filled in even if you aren't going to use one\n    # main database settings\n    db_server = '127.0.0.1'\n\n    # cache database settings\n    db_cache_server = '127.0.0.1'\n    db_cache_port = '6379'\n    write_cache_engine = 'redis'\n\n    # Override multithreading for certain categories of downloads\n    override_multi_threading_for_categories = []\n\n    ```\n    * finmarketpy - `pip install git+https://github.com/cuemacro/finmarketpy.git`\n        * Check constants file configuration [finmarketpy/finmarketpy/util/marketconstants.py](https://github.com/cuemacro/finmarketpy/blob/master/finmarketpy/util/marketconstants.py)\n        * You can also create your own file marketcred.py (placed in the same folder)\n\nYou can then setup your own separate project in PyCharm to create your own trading strategies on top of it. I'd recommend creating\na private (or public) project on GitHub so you can use it for version control and backup on the cloud. BitBucket is an alternative online\nsite for hosting a Git server. It also possible to setup a Git server locally as well.\n\n# Installing on Linux and Mac OS X\n\nI have been able to install both chartpy and finmarketpy both Linux and Mac OS X, using the Anaconda distribution\nfor both platforms.\n\nHowever, with findatapy, I would note that following:\n* Bloomberg Terminal software is only available for windows, so Bloomberg Desktop API (DAPI) is not available for either Linux or Mac OS X,\nblpapi needs the Bloomberg Terminal software to communicate with\n* However, it should be possible to install Bloomberg Server API (SAPI) which allows blpapi to communicate with it, but you need\na different Bloomberg server licence to run that\n* To install arctic on Mac OS X, read [this useful thread](https://github.com/manahl/arctic/issues/14), which gives suggestions\non ways of solving issues when installing arctic on Mac OS X, in particular around the C compiler\n\n* Even if you cannot install blpapi and arctic, findatapy will still install and largely function, but you won't be able\nto make Bloomberg calls or calls via arctic to MongoDB\n\n# Installation additional notes - conda environments (courtesy of Tahsin Alam)\n\n*   To install findatapy into a conda environment separate from root, you will need to create that environment with pip (rather than create the environment and then install pip into it). So, do:\n    ```\n    conda create -n cuemacro python=3.6 pip\n    INSTEAD OF\n    conda create -n cuemacro python=3.6\n    ```\n\n    This will ensure that pip installs any packages in this environment's site-packages folder rather than in the global site-packages folder. (This currently appears to be a known issue with conda - see https://github.com/ContinuumIO/anaconda-issues/issues/1429).\n\n*   You can now activate the new conda environment and run pip install on findatapy:\n\n    ```\n    activate cuemacro\n    pip install git+https://github.com/cuemacro/findatapy.git\n    ```\n\n    This will install findatapy into the conda environment's site-packages folder.\n\n*   Above works fine for environments where you are planning to use findatapy. But for an environment if you plan to work on findatapy code itself, you might prefer to set it up a bit differently.\nThis will keep code you are working on separate from the site-packages directory. So, instead of running pip install on findatapy, run conda install (or pip install since some of the packages don't appear to be available on conda) on each of the packages listed in findatapy's setup.py:\n\n    ```\n    conda create -n devcuemacro python=3.6 pip\n    activate devcuemacro\n    pip install pandas twython pytz requests numpy pandas_datareader quandl statsmodels multiprocess ...\n    ```\n\n    I then separately clone the findatapy repository and add its location to my PYTHONPATH\n\n*   If we wish to install an conda instance in our environment (which will install lots of libraries like pandas) we can instead run\n\n    ```\n    conda create -n devcuemacro python=3.6 anaconda\n    ```"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 11.109375,
          "content": "Copyright (c) 2016 Cuemacro\nAll rights reserved.\n\n  Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1240234375,
          "content": "recursive-include finmarketpy/ *.*\nrecursive-include finmarketpy_examples/ *.*\n\nglobal-exclude *.py[cod] __pycache__ *.so *.pdf"
        },
        {
          "name": "PLANNED_FEATURES.md",
          "type": "blob",
          "size": 2.28125,
          "content": "# Planned features for finmarketpy, findatapy and chartpy\n\nWhilst the finmarketpy, findatapy and chartpy projects have been going in various forms for a few years, we have a large\nwishlist of features and improvements to add (in addition to general bug fixes). If you are looking to contribute to any\nof these projects, any of these features would be a great place to start. I've tried to focus the new features on areas\nwhich I would find useful in my market analysis, but of course I'm sure I've missed many potential features here.\n\n## finmarketpy plans\n\n* Speeding up BacktestEngine class (possibly via using multiprocessor_on_dill library, but also accelerating computation of returns,\nreturn statistics, for example through using GPU accelerated code for cases when we multiply matrices etc.)\n* Add more market analysis types in the economics folder including\n    * Proper seasonality analysis (eg. decompose into seasonal and trend components)\n* More statistics for trading result output (including ability to create fully encapsulated HTML files?)\n* Adding tests based on pytest\n* Add more examples to demonstrate API usage\n* Use Sphinx to create HTML API files (readthedocs)\n* Add basic event driven backtester on top (possibly) with a wrapper for Interactive Brokers - low priority at this stage\n\n## findatapy plans\n\n* Add data wrappers for other data providers:\n    * Thomson Reuters\n    * Alpha Vantage\n    * Macrobond\n    * And any others we can think of!\n* Add subscription style data listening to data from:\n    * Bloomberg\n    * Thomson Reuters\n    * And more\n* Improve DataQuality class for evaluating data quality\n* Adding tests based on pytest\n* Add more examples\n* Use Sphinx to create HTML API files (readthedocs)\n\n## chartpy plans\n\n* Add a wrapper for bqplot (Bloomberg's open source plotting library designed for Jupyter notebook)\n* Add a wrapper for vispy, high performance GPU accelerated (partially done)\n* Add more chart types across the various engines, in particular for plotly and matplotlib including FOMC style dotplot (aka beeswarm plot)\n* Add more animated chart types (surface currently implemented for matplotlib, want to add for plotly)\n* Adding tests based on pytest (although guess this is tricky, given output is graphical)\n* Add more examples\n* Use Sphinx to create HTML API files (readthedocs)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.705078125,
          "content": "<img src=\"finmarketpy_logo.png?raw=true\" width=\"300\"/>\n\n# [finmarketpy (formerly pythalesians)](https://github.com/cuemacro/finmarketpy)\n\n[![Downloads](https://pepy.tech/badge/finmarketpy)](https://pepy.tech/project/finmarketpy)\n\nfinmarketpy is a Python based library that enables you to analyze market data and also to backtest trading strategies using\na simple to use API, which has prebuilt templates for you to define backtest. Included in the library\n\n* Prebuilt templates for backtesting trading strategies\n* Display historical returns for trading strategies\n* Investigate seasonality of trading strategies\n* Conduct market event studies around data events\n* In built calculator for risk weighting using volatility targeting\n* Written in object oriented way to make code more reusable\n\n*Contributors for the project are very much welcome, see below!*\n\n# Merging with pythalesians\nI had previously written the open source PyThalesians financial library (which has been merged with this - so can focus on maintaining\none set of libraries). This new finmarketpy library has \n* Similar functionality to the trading part of pythalesians\n* Rewritten the API to make it much cleaner and easier to use, as well as having many \nnew features. \n* finmarketpy requires the libraries, which I've written chartpy (for charts) and findatapy (for loading market data) to function\n* By splitting up into smaller more specialised libraries, it should make it easier for contributors\n* Using findatapy, you can download market data easily from Bloomberg, Quandl, Yahoo etc\n* Using chartpy, you can choose to have results displayed in matplotlib, plotly or bokeh by changing single keyword!\n\nPoints to note:\n* Please bear in mind at present finmarketpy is under continual development. The API is heavily documented, but we are\nlooking to add more general documentation.\n* Uses Apache 2.0 licence\n\n# Gallery\n\nCalculate the cumulative returns of a trading strategy historically (see finmarketpy_examples/tradingmodelfxtrend_example.py)\n\n<img src=\"finmarketpy_examples/gallery/fx-trend-cumulative.png?raw=true\" width=\"750\"/>\n\nPlot the leverage of the strategy over time\n\n<img src=\"finmarketpy_examples/gallery/fx-trend-leverage.png?raw=true\" width=\"750\"/>\n\nPlot the individual trade returns\n\n<img src=\"finmarketpy_examples/gallery/fx-trend-trade-returns.png?raw=true\" width=\"750\"/>\n\nCalculate seasonality of any asset: here we show gold and FX volatility seasonality (see examples/seasonality_examples.py)\n\n<img src=\"finmarketpy_examples/gallery/gold-seasonality.png?raw=true\" width=\"750\"/>\n\n<img src=\"finmarketpy_examples/gallery/fx-vol-seasonality.png?raw=true\" width=\"750\"/>\n\nCalculate event study around events for asset (see examples/events_examples.py)\n\n<img src=\"finmarketpy_examples/gallery/usdjpy-nfp.png?raw=true\" width=\"750\"/>\n\n\n# Requirements\n\nMajor requirements\n* Required: Python 3.8\n* Required: pandas 1.2.3, numpy etc.\n* Required: findatapy for downloading market data (https://github.com/cuemacro/findatapy)\n* Required: chartpy for funky interactive plots (https://github.com/cuemacro/chartpy)\n\n# Installation\n\nFor detailed installation instructions for finmarketpy and its associated Python libraries go to\nhttps://github.com/cuemacro/finmarketpy/blob/master/INSTALL.md (which includes details on how to setup your entire Python environment).\n\nAlso take a look at https://github.com/cuemacro/teaching/blob/master/pythoncourse/installation/installing_anaconda_and_pycharm.ipynb\nfrom my Python for finance workshop course, where I keep notes specifically about setting up your Anaconda environment \nfor data science (including for findatapy/chartpy/finmarketpy), including YAML files etc.\n\nYou can install the library using the below (better to get the newest version from repo, as opposed to releases).\n\nAfter installation:\n* Make sure you edit the marketconstants.py file (or you can create a marketcred.py file to overwrite the settings)\n\n```\npip install git+https://github.com/cuemacro/finmarketpy.git\n```\n\nBut beforehand please make sure you have already installed both chartpy, findatapy and any other dependencies. \nIn chartpy you will need to change the chartconstants.py file (to add Plotly API key) and \nfor findatapy, you will also need to change the dataconstants.py file to add the Quandl API \n(and possibly change other configuration settings there or add a datacred.py file in the util folder, \nalternatively you will be prompted on your first run to input the API key which will be installed). If you do pip with git \nyou'll get the very latest commit.\n\n```\npip install git+https://github.com/cuemacro/chartpy.git\npip install git+https://github.com/cuemacro/findatapy.git\n```\n\nHowever you can also pip install to get from PyPI (might be a slighter older verison from that on GitHub)\n\n```\npip install chartpy\npip install findatapy\n```\n\nNote that if you use the option pricing/total returns you might need to get the latest FinancePy version from GitHub\nhttps://github.com/domokane/FinancePy/ as opposed to PyPI \n\n```\npip install git+https://github.com/domokane/FinancePy/FinancePy.git\n\n```\n\n# Binder and Jupyter - Run finmarketpy in your browser\n\nYou can run some of the Jupyter notebooks in Binder interactively in your browser to play around with finmarketpy. It might take a few minutes for the \nBinder instance to start. We are currently working on having more notebooks in Binder, so stay tuned!\n\nNote that you will need to get a Quandl\nAPI key to download market data to use some of these, and you can sign up for a free account at https://www.quandl.com.\n\n* [Backtesting an FX trend following strategy - backtest_example (Binder Link)](https://mybinder.org/v2/gh/cuemacro/finmarketpy/master?filepath=finmarketpy_examples/finmarketpy_notebooks/backtest_example.ipynb)\n* [Downloading market data examples - market_data_example (Binder Link)](https://mybinder.org/v2/gh/cuemacro/finmarketpy/master?filepath=finmarketpy_examples/finmarketpy_notebooks/market_data_example.ipynb)\n\n# Synchronizing your fork of finmarketpy with master\n\nI found this [article useful](https://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository) for \nexplaining how to update your fork to match the master changes.\n\n# Contributors\n\nContributors are always welcome for finmarketpy, findatapy and chartpy. If you'd like to contribute, have a look at\n[Planned Features](PLANNED_FEATURES.md) for areas we're looking for help on. Or if you have any ideas for improvements\nto the libriares please let us know too!\n\n# Sponsorship, workshops and support for Cuemacro libraries\n\nWe have spent many years writing finmarketpy and other open source libraries at Cuemacro, and we are keen to do so\nfor many years into the future.\n \nIf you using our libraries and are interested in sponsoring Cuemacro's open source libraries, you can do so through the\nGitHub sponsorship page at https://github.com/sponsors/cuemacro\n\nWe also offer commercial services for our Cuemacro libraries, which include:\n\n* a 2 day Python for finance workshop, which can be taught at your firm, to teach you how to use Cuemacro's libraries \n* extensive commercial technical support for our libraries\n\nIf you are interested in our commercial services please contact saeed@cuemacro.com\n\nAll these sources of funding, whether it is sponsorship or our commercial services, help us to maintain Cuemacro's libraries, \nso we can improve our open source libraries for the community.\n\n# Problems with Numba and doing options pricing in finmarketpy/financepy\n\nUnderneath finmarketpy uses financepy to do option pricing. It uses Numba to speed up the computation.\n\nYou may sometimes experience Numba errors like such as `Failed in nopython mode pipeline (step: nopython frontend)`\n\nOne possible way to fix this is to delete the `__pycache__` folders underneath wherever financepy is installed:\n\nEg. if you are using the `py38class` environment, if you've installed Anaconda in `C:\\Anaconda3`, you might find the financepy\nfolder at the below location\n\n`C:\\Anaconda3\\envs\\py38class\\Lib\\site-packages\\financepy`\n\n# finmarketpy examples\n\nIn finmarketpy/examples you will find several examples, including some simple trading models\n\n# Release Notes\n\n* 0.11.12 - finmarketpy (26 Apr 2023)\n* 0.11.11 - finmarketpy (07 Oct 2021)\n* 0.11.10 - finmarketpy (06 Oct 2021)\n* 0.11.9 - finmarketpy (01 Jun 2021)\n* 0.11.8 - finmarketpy (25 Jan 2021)\n* 0.11.7 - finmarketpy (20 Oct 2020)\n* 0.11.6 - finmarketpy (02 Oct 2020)\n* 0.11.5 - finmarketpy (24 Aug 2020)\n* 0.11.4 - finmarketpy (06 May 2020)\n* 0.11.3 - finmarketpy (04 Dec 2019)\n* 0.11.1 - finmarketpy (23 Oct 2019)\n* 0.11 - finmarketpy\n* First prerelease version \n\n# Coding log\n\n# finmarketpy log\n\n* 09 Nov 2024\n  * Changed trend following example to use FRED\n* 19 May 2024\n  * Fixed run in parallel bug on\n* 01 Apr 2024\n  * Added Jupyter notebook for new ArcticDB support from findatapy\n* 01 Jan 2024\n  * Helper code to reduce boiler plate code for TradingModel\n  * Upgraded to FinancePy 0.310 and refactored FXVolSurface\n* 26 Apr 2023\n  * Changed sklearn to scikit-learn dependency\n* 05 Apr 2022\n  * Set FinancePy version required to 0.220 and refactored FXVolSurface for\n  this\n* 07 Oct 2021\n  * Set FinancePy version required to 0.193\n* 23 Sep 2021\n  * Fixed bug in YoY plot\n* 23 Jul 2021\n  * Added roll costs in backtest\n* 30 May 2021\n  * Added S3 Jupyter notebook for use with findatapy\n* 21 May 2021\n  * Fix bug with plotting vol target charts when vol targeting is off\n* 12 May 2021\n  * Fixed bug when calculating benchmark return statistics in TradingModel with different start/finish date\n* 04 May 2021\n  * Revamped Jupyter notebook for downloading market data with findatapy\n* 28 Apr 2021\n  * Added signal multiplier parameter for charts\n* 21 Apr 2021\n  * Format changes to TradingModel charts\n* 15 Apr 2021\n  * Constant overrides now persist\n* 13 Apr 2021\n  * Replaced loc with iloc in TechIndicator to remove Pandas deprecated functionality\n* 08 Apr 2021\n  * Fixed EventStudy issue when start window is before time series\n* 21 Mar 2021\n  * Fixed issue with EventStudy\n  * Refactored TradingModel when constructing weights\n* 22 Feb 2021\n  * Fix bug when plotting IR of strategies\n* 16 Feb 2021\n  * Added total returns in example for options indices construction\n* 11 Feb 2021\n  * Refactored to use join from Calculations instead of pandas_outer_join\n  * Allowed backtesting by fields other than close\n  * Customize strike range for extracting FX vol surface\n* 22 Jan 2021\n  * FX spot total returns now supports intraday data and added example\n  * Fixed problem with Numba implementation of FX spot total returns\n* 17 Jan 2021\n  * Fix vol surface examples to work with new FXVolSurface\n* 16 Jan 2021\n  * Additional work on FXOptionPricer and total returns (FXOptionCurve)\n    * Speed up and deal with non-convergence of solver\n    * Allow options entry on user specified dates\n  * Added more option examples\n* 11 Jan 2021\n  * Fixed issue with OTM strikes in FXOptionPricer\n* 10 Jan 2021\n  * Fixed incorrect pushing of 10d quotes on FX vol surface\n  * Added extra parameters for FXOptionsCurve, freezing FX implied, calendar etc.\n* 09 Jan 2021\n  * Fixed dom/for rate in FX vol surface\n  * Fixed additive index  \n  * Still sorting issues with total return indices for FX options\n* 08 Jan 2021\n  * Added total returns for straddle (with example)\n  * Fixed positioning flip and expiring on day without market data on FXOptionsCurve\n* 08 Jan 2021\n  * Changed FXVolSurface to fit better with newest FinancePy\n  * Added missing FXOptionsCurve class\n* 07 Jan 2021 \n  * Added FX vanilla option pricing (via FinancePy)\n  * Calculate total return indices for FX vanilla options\n* 26 Dec 2020\n    * Refactored classes to take into account new Calendar object from findatapy\n* 24 Dec 2020\n    * Added FX forwards pricer with examples\n      * Interpolation of odd dates\n      * Implied depo calculations\n    * Added FX forwards total return calculator with examples\n    * Rewrote FX spot indices construction to use Numba\n* 20 Dec 2020\n  * Changed typo in licence at top of scripts\n* 19 Dec 2020\n  * Added VolStats and examples to calculate realized vol, vol risk premium and implied vol addons\n  * Added FX total return calculations for FX spot positions\n  * Begun to add FX total return calculations for FX forwards (incomplete)\n  * Adapted FX vol code to latest version of FinancePy (note, may need to download via GitHub instead of PyPI)\n  * Also calculated implied PDF for FX vol surface using FinancePy underneath\n* 04 Dec 2020\n    * Fix imports in FX vol interpolation\n* 02 Dec 2020\n    * Added FX vol surface interpolation (using FinancePy library underneath) + animated example\n* 12 Nov 2020\n    * Added Binder, so can run notebooks interactively\n    * Edited backtest_example Jupyter notebook with more description\n* 11 Nov 2020\n    * Added cumulative additive index flag for backtests\n* 20 Oct 2020\n    * Fixed missing GBP depo tickers\n    * Fixed startup on newer MacOS\n* 02 Oct 2020\n    * Fixed vol surface calculation\n* 24 Aug 2020\n    * Replaced .ix to work with later versions of pandas\n* 07 May 2020\n    * Improved QuickChart, adding additional labels, fixing example\n* 06 May 2020\n    * Added QuickChart for one line download of market data and plotting\n    * Added feature to resample returns\n    * Allow more custom parameters in backtest\n* 17 Dec 2019\n    * Added link for Python for finance workshop installation notes for Anaconda\n* 04 Dec 2019\n    * Making blosc optional in BacktestEngine\n* 14 Nov 2019\n    * Added network plot\n* 02 Nov 2019 \n    * Fixed bug running on Mac\n    * Updated installation instructions\n    * Added tests for technical indicators\n    * Added backtestcomparison.py\n* 29 Mar 2019 - Added variable transaction costs\n* 14 Nov 2018 - Fixed contract bug in backtest_example\n* 18 Sep 2018 - Fixed bug on writing PnL CSV\n* 17 Sep 2018 - Added rounding for trade size display (otherwise trades can be ungrounded because of rounding errors)\n* 11 Jun 2018 - Fixed bug with single threaded TradeAnalysis\n* 29 May 2018 - Added port\n* 25 Apr 2018\n    * Added (some) parallel features for backtesting and sensitivity analysis (works better in Linux)\n    * Added different transaction costs by assets\n    * Fixed backtesting examples so work with \"run_in_parallel\" keyword and can customise BacktestRequest more\n* 18 Apr 2018 - Fix bug with trade notional sizes\n* 06 Apr 2018 - Added function to measure freq of trade notional sizes\n* 29 Mar 2018 - Fix bug when dumping CSV of P&L\n* 15 Mar 2018 - Added caching for event data\n* 26 Feb 2018 - Added solution for replacing parameters under tech_params (in tradeanalysis.py).\n* 30 Jan 2018 - Fix bug on backtest.example.py\n* 25 Jan 2018 - Fix bug on class\n* 04 Jan 2018 - Bug fix for Cred override of constants\n* 16 Sep 2017 - Adding to planned features list\n* 10 Jul 2017 - Added install instructions for conda\n* 03 Jul 2017 - Fixed dependency on seasonal library\n* 26 Jun 2017 - BacktestEngine can now handle weighted sum style portfolios\n* 23 Jun 2017 - Downloads observation date for economic data (EventStudy)\n* 21 Jun 2017 - Added trend following example using Bloomberg total return data\n* 07 Jun 2017 - Added output of IR/Rets in sensitivity analysis (TradeAnalysis)\n* 22 May 2017 - Output returns of strategy (to CSV file)\n* 03 May 2017 - Added more planned features\n* 13 Apr 2017 - Changed finish date on FX trend following model\n* 12 Mar 2017 - Added FX vol surface animation example\n* 25 Feb 2017 - Added signal delay parameter\n* 24 Feb 2017 - Refactored backtesting classes so have consistent naming\n* 21 Feb 2017 - Refactored BacktestEngine to use SwimPool\n* 20 Feb 2017 - Extra install instructions\n* 14 Feb 2017 - Added Planned Features page\n* 08 Feb 2017 - Added SHOW_CHARTS parameter for TradingModel and made SMA work with old pandas\n* 05 Feb 2017 - Added more installation notes and fixed Excel output in TradeAnalysis if notional not specified\n* 02 Feb 2017 - Further changes to constraints on max long/shorts (with refactoring)\n* 01 Feb 2017 - Added constraints for max longs/shorts and plots in BacktestEngine\n* 25 Jan 2017 - Additional work on stops/take profit with multiple assets & plotting bug fixes for TradeAnalysis\n* 24 Jan 2017 - Fixing issues around stops/take profits and adding fields in TechParams\n* 19 Jan 2017 - Change location of examples in project\n* 16 Jan 2017 - Added method in BacktestEngine for debugging of P&L (dumps table with signals/assets/returns)\n* 12 Jan 2017 - Added detailed installation notes\n* 11 Jan 2017 - Rewrote large number of comments, added ATR calculation and basic stop loss/take profit functionality\n* 07 Jan 2017 - Now outputs position sizes scaled by notional & by user defined contract sizes\n* 06 Jan 2017 - Added user defined weightings for strategies & general bug fixes\n* 04 Jan 2017 - Added a period shift parameter for calculating leverage (in RiskEngine)\n* 30 Nov 2016 - Added seasonality example for NFP\n* 24 Nov 2016 - Added seasonality example for gasoline\n* 17 Nov 2016 - Changed source to ChartConstants default for TradingModel\n* 14 Oct 2016 - Fixed arctic references in MarketConstants\n* 13 Oct 2016 - Fixed IR plotting for BacktestEngine, added YoY metric plots\n* 11 Oct 2016 - Added to TradeAnalysis another way to plot return statistics for a portfolio\n* 10 Oct 2016 - Added returns_example to show how to use PyFolio via finmarketpy, added dataframe input for TradeAnalysis, fixed typo in readme\n* 07 Oct 2016 - Add .idea to .gitignore\n* 06 Oct 2016 - Split out plotting of no of trades and position proportion\n* 22 Sep 2016 - Fixed sorting of columns when signal plotting\n* 21 Sep 2016 - Allow plotting of multiple signal days\n* 15 Sep 2016 - Merged finmarketpy and pythalesians fully, released version 0.11\n* 12 Sep 2016 - Fixed issue with TradeAnalysis (method names)\n* 02 Sep 2016 - Fixed issue with external dataframe eco events, added event study example\n* 01 Sep 2016 - Added seasonality example for FX vol\n* 22 Aug 2016 - Fixed boot issue and added credentials\n* 17 Aug 2016 - Uploaded first code\n\n# pythalesians log\n\n* 03 Aug 2016 - Fixed missing conf files\n* 02 Aug 2016 - Changed default Plotly background color and fixed constants issue with AdapterTemplate\n* 01 Aug 2016 - Renamed pythalesians_graphics as chartesians (preparing eventual spinout)\n* 29 Jul 2016 - Created Jupyter notebook plot_market_data for plotting with multiple libraries, also fixed Bokeh sizing issue,\nrefactored library, spinning out chart functionality into pythalesians_graphics\n* 28 Jul 2016 - Fixed issue with multiple fields returned by Quandl, added Quandl downloading example\n* 26 Jul 2016 - Added more support for Plotly charts, added surface vol Plotly example\n* 21 Jul 2016 - Refactor StrategyTemplate graph plotting functions\n* 20 Jul 2016 - Return of figure handle for AdapterPyThalesians\n* 08 Jun 2016 - Fix kurtosis issue, refactored vol scaling in CashBasktest, added resample wrapper in TimeSeriesFilter\n* 03 Jun 2016 - Speed up CashBacktest (construct_strategy method)  \n* 02 Jun 2016 - Fixed missing StrategyTemplate file in installation, added auto-detection of path \nto simplify installation and added methods for converting between pandas and bcolz\n* 31 May 2016 - Got rid of deprecated Pandas methods in TechIndicator\n* 27 May 2016 - Added ability to plot strategy signal at point in time\n* 19 May 2016 - Updated Quandl wrapper to use new Quandl API\n* 02 May 2016 - Tidied up BacktestRequest, added SPX seasonality example\n* 28 Apr 2016 - Updated cashbacktest (for Pandas 0.18)\n* 21 Apr 2016 - Got rid of deprecated Pandas methods in EventStudy\n* 18 Apr 2016 - Fixed some incompatibility issues with Pandas 0.18\n* 06 Apr 2016 - Added more trade statistics output\n* 01 Apr 2016 - Speeded up joining operations, noticeable when fetching high freq time series\n* 21 Mar 2016 - Added IPython notebook to demonstrate how to backtest simple FX trend following trading strategy\n* 19 Mar 2016 - Tested with Python 3.5 64 bit (Anaconda 2.5 on Windows 10)\n* 17 Mar 2016 - Refactored some of graph/time series functions and StrategyTemplate\n* 11 Mar 2016 - Fixed warnings in matplotlib 1.5\n* 09 Mar 2016 - Added more TradeAnalysis features (for sensitivity analysis of trading strategies)\n* 01 Mar 2016 - Added IPython notebook to demonstrate how to download market data and plot\n* 27 Feb 2016 - Fixed total returns FX example\n* 20 Feb 2016 - Added more parameters for StrategyTemplate\n* 13 Feb 2016 - Edited time series filter methods\n* 11 Feb 2016 - Added example to plot BoJ interventions against USDJPY spot\n* 10 Feb 2016 - Updated project description\n* 01 Feb 2016 - Added LightEventsFactory to make it easier to deal with econ data events (stored as HDF5 files)\n* 20 Jan 2016 - Added kurtosis measure for trading strategy results, fixed Quandl issue\n* 19 Jan 2016 - Changed examples folder name\n* 15 Jan 2016 - Added risk on/off FX correlation example\n* 05 Jan 2016 - Added total return (spot) indices construction for FX and example\n* 26 Dec 2015 - Fixed problem with econ data downloaders\n* 24 Dec 2015 - Added datafactory templates for creating custom indicators\n* 19 Dec 2015 - Refactored Dukascopy downloader\n* 10 Dec 2015 - Various bug fixes\n* 22 Nov 2015 - Increased vol targeting features for doing backtesting\n* 07 Nov 2015 - Added feature to download tick data from Bloomberg (with example)\n* 05 Nov 2015 - Added intraday event study class (and example)\n* 02 Nov 2015 - Added easy wrapper for doing rolling correlations (and example)\n* 28 Oct 2015 - Added more sensitivity analysis for trading strategies\n* 26 Oct 2015 - Various bug fixes for Bloomberg Open API downloader\n* 14 Oct 2015 - Added capability to do parallel downloading of market data (thread/multiprocessing library), with an \nexample for benchmarking and bug fixes for Bloomberg downloader\n* 25 Sep 2015 - Refactored examples into different folders / more seasonality examples\n* 19 Sep 2015 - Added support for Plotly choropleth map plots & easy downloading of economic data via FRED/Bloomberg/Quandl\n* 12 Sep 2015 - Added basic support for PyFolio for statistical analysis of strategies\n* 04 Sep 2015 - Added StrategyTemplate for backtesting (with example) & bug fixes\n* 21 Aug 2015 - Added stacked charts (with matplotlib & bokeh) & several bug fixes\n* 15 Aug 2015 - Added bar charts (with matplotlib & bokeh) & added more time series filter functions\n* 09 Aug 2015 - Improved Bokeh support\n* 07 Aug 2015 - Added Plotly support (via Jorge Santos Cufflinks wrapper)\n* 04 Aug 2015 - Added ability to download from FRED and example for downloading from FRED.\n* 29 Jul 2015 - Added backtesting functions (including simple FX trend following strategy) and various bug fixes/comments.\n* 24 Jul 2015 - Added functions for doing simple seasonality studies and added examples.\n* 17 Jul 2015 - Created example to show how to use technical indicators.\n* 13 Jul 2015 - Changed location of conf, renamed examples folder to pythalesians_examples. Can now be installed using setup.py.\n* 10 Jul 2015 - Added ability to download Dukascopy FX tick data (data is free for personal use - check Dukascopy terms & conditions). Note that past month of data is generally not made available by Dukascopy\n\nEnd of note\n"
        },
        {
          "name": "binder",
          "type": "tree",
          "content": null
        },
        {
          "name": "create_package.bat",
          "type": "blob",
          "size": 0.0400390625,
          "content": "python setup.py sdist --formats=gztar,zip"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "finmarketpy",
          "type": "tree",
          "content": null
        },
        {
          "name": "finmarketpy_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "finmarketpy_logo.png",
          "type": "blob",
          "size": 22.8466796875,
          "content": null
        },
        {
          "name": "install_extra_packages.bat",
          "type": "blob",
          "size": 0.4814453125,
          "content": "REM this will install all of the dependencies used by chartpy, findatapy and finmarketpy (other than the actual libraries themselves)\npip install numpy, pandas, pytz, request, multiprocess, pandas_datareader, quandl, redis, openpxyl, blosc, bokeh, plotly, cufflinks, matplotlib, git+https://github.com/manahl/arctic.git\npip install git+https://github.com/cuemacro/chartpy.git\npip install git+https://github.com/cuemacro/findatapy.git\npip install git+https://github.com/cuemacro/finmarketpy.git"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0283203125,
          "content": "chartpy\nfinmarketpy\nfindatapy"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.2001953125,
          "content": "from setuptools import setup, find_packages\n\nlong_description = \"\"\"finmarketpy is a Python based library that enables you to \nanalyze market data and also to backtest trading strategies using a simple to \nuse API, which has prebuilt templates for you to define backtest.\"\"\"\n\nsetup(name=\"finmarketpy\",\n      version=\"0.11.14\",\n      description=\"finmarketpy is a Python based library for backtesting trading strategies\",\n      author=\"Saeed Amen\",\n      author_email=\"saeed@cuemacro.com\",\n      license=\"Apache 2.0\",\n      long_description=long_description,\n      keywords=[\"trading\", \"markets\", \"currencies\", \"pandas\", \"data\",\n                \"Bloomberg\", \"tick\", \"stocks\", \"equities\"],\n      url=\"https://github.com/cuemacro/finmarketpy\",\n      packages=find_packages(),\n      include_package_data=True,\n      install_requires=[\"pandas\",\n                        \"twython\",\n                        \"pytz\",\n                        \"requests\",\n                        \"numpy\",\n                        \"multiprocess\",\n                        \"seasonal\",\n                        \"scikit-learn\",\n                        \"matplotlib\",\n                        \"numba\",\n                        \"financepy==0.310\"],\n      zip_safe=False)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}