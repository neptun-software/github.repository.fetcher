{
  "metadata": {
    "timestamp": 1736559463291,
    "page": 22,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mozillazg/python-pinyin",
      "stars": 4951,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bumpversion.cfg",
          "type": "blob",
          "size": 0.1025390625,
          "content": "[bumpversion]\ncommit = True\ntag = True\ncurrent_version = 0.53.0\n\n[bumpversion:file:pypinyin/__init__.py]\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.2275390625,
          "content": "[run]\nbranch = True\nomit =\n    # pypinyin/runner.py\n    pypinyin/__main__.py\n\n[report]\nexclude_lines =\n    pragma: no cover\n    except NameError\n    except ImportError\n    pass\n    def main\n    if py3:\n    if __name__ == .__main__.:\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.439453125,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n# Indentiation\n[*.{py,rst}]\nindent_style = space\nindent_size = 4\n[Makefile]\nindent_style = tab\nindent_size = 4\n[*.{ini,yml}]\nindent_style = space\nindent_size = 2\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.53515625,
          "content": "*.py[cod]\n*.sw[op]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n_build\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\nhtmlcov\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\ntools/words.txt\n*~\ntools/phrases_dict.txt\nvenv\n.cache/\n2.7/\n.python-version\nvenv2.7/\nvenvPyInstaller/\noutput.dat\nvocab.bin\nvocab.large.bin\n.mypy_cache/\n.pytest_cache/\n/pypinyin/phrases_dict_large.py\n/docs/CHANGELOG.html\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2119140625,
          "content": "[submodule \"pinyin-data\"]\n\tpath = pinyin-data\n\turl = https://github.com/mozillazg/pinyin-data.git\n[submodule \"phrase-pinyin-data\"]\n\tpath = phrase-pinyin-data\n\turl = https://github.com/mozillazg/phrase-pinyin-data.git\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.73828125,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.4.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n        exclude: 'tools/|(pypinyin/(legacy/|phonetic_symbol.py))'\n      - id: double-quote-string-fixer\n        exclude: 'pypinyin/(legacy/|phonetic_symbol.py)'\n      - id: end-of-file-fixer\n        exclude: '.bumpversion.cfg|.*.json'\n      - id: requirements-txt-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/pycqa/flake8\n    rev: 3.8.4\n    hooks:\n      - id: flake8\n        exclude: 'tools|pypinyin/(legacy/|phonetic_symbol.py)|(docs/conf.py)'\n  # - repo: https://github.com/pre-commit/mirrors-mypy\n  #   rev: 'v0.812'\n  #   hooks:\n  #     - id: mypy\n  #       files: 'pypinyin/'\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.009765625,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#   - pdf\n#   - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\n# python:\n#   install:\n#     - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 43.677734375,
          "content": "Changelog\n---------\n\n\n`0.53.0`_ (2024-09-15)\n+++++++++++++++++++++++++\n\n* **[New]** 内置对 pyinstaller 打包的支持，\n  避免使用 pyinstaller 打包时需要额外处理类似 `no such file or dictionary: pinyin_dict.json` 错误的问题。\n  （ **未增加新的依赖包** ，仅通过在源码中增加 __pyinstaller 目录，\n  支持使用 pyinstaller 打包依赖了 pypinyin 的项目时自动打包 v0.52.0 版本新引入的 json 文件）\n  via `#329`_ Thanks `@xushengj`_ , 详见 `#326`_ 。\n\n\n\n`0.52.0`_ (2024-08-04)\n+++++++++++++++++++++++++\n\n* **[Changed]** 改为运行时从内置的 json 文件中读取单字和词语拼音数据（之前是从内置的 dict 类型的变量中读取），\n  缓解 Python 3.12 环境中存在的性能劣化问题 (via `#324`_ Thanks `@serfend`_ ) 详见 `#319`_ `#322`_  。\n  主要解决 Python 3.12 环境中存在的如下问题（非 pypinyin 自身 bug 导致。其他 Python 版本环境中无类似问题）：\n\n  * 在 VSCode 中使用 debugpy 调试时， ``import pypinyin`` 操作需要耗时 10 分钟左右。\n  * 运行 ``py.test --cov`` 命令时，pypinyin 相关代码会卡住很长一段时间。\n\n\n\n`0.51.0`_ (2024-03-10)\n+++++++++++++++++++++++++\n\n* **[New]** 新增一个用于转换拼音风格的命令行辅助工具::\n\n    $ python -m pypinyin.tools.toneconvert to-tone 'zhong4 xin1'\n    zhòng xīn\n\n    $ python -m pypinyin.tools.toneconvert to-tone2 'zhòng xīn'\n    zho4ng xi1n\n\n    $ python -m pypinyin.tools.toneconvert to-tone3 'zhòng xīn'\n    zhong4 xin1\n\n    $ python -m pypinyin.tools.toneconvert to-normal 'zhòng xīn'\n    zhong xin\n\n* **[New]** ``pypinyin`` 命令行工具支持接受空格间隔的多个汉字词语作为输入（无需引号包裹）(via `#318`_ Thanks `@Freed-Wu`_) ::\n\n      # 老版本\n      $ pypinyin 我 是 小明\n      pypinyin: error: unrecognized arguments: 是 小明\n\n      # 新版本\n      $ pypinyin 我 是 小明\n      wǒ\n      shì\n      xiǎo míng\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.17.0 的词语拼音数据。\n\n\n`0.50.0`_ (2023-12-11)\n+++++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.16.0 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.14.0 的拼音数据。\n\n\n`0.49.0`_ (2023-05-14)\n+++++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.15.0 的词语拼音数据。\n\n\n`0.48.0`_ (2023-01-15)\n+++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复 ``pypinyin.contrib.tone_convert`` 中 ``to_`` 开头的转换函数\n  没有正确处理输入的拼音包含 ``5`` 的场景（当包含 ``5`` 时会导致返回的格式不符合函数预期的返回格式）\n  以及修复没有正确处理部分拼音中的 ``ü`` 或 ``v`` 的问题\n  （当 ``v_to_u=False`` 时返回结果需要将 ``ü`` 替换为 ``v``） Fixed `#290`_ :\n\n  .. code-block:: python\n\n      # 修复前\n      >>> to_tone('lve')\n      'lve'\n      >>> to_tone2('lün5')\n      'lv5n'\n      >>> to_tone3('lün5')\n      'lv5n'\n      >>> to_tone2('lvn5')\n      'lv5n'\n      >>> to_tone3('lvn5')\n      'lv5n'\n\n      # 修复后\n      >>> to_tone('lve')\n      'lüe'\n      >>> to_tone2('lün5')\n      'lvn'\n      >>> to_tone3('lün5')\n      'lvn'\n      >>> to_tone2('lvn5')\n      'lvn'\n      >>> to_tone3('lvn5')\n      'lvn'\n      >>> to_tone2('lvn5', v_to_u=True)\n      'lün'\n      >>> to_tone3('lvn5', v_to_u=True)\n      'lün'\n      >>> to_tone2('lvn', neutral_tone_with_five=True)\n      'lv5n'\n      >>> to_tone3('lvn', neutral_tone_with_five=True)\n      'lvn5'\n\n* **[Bugfixed]** 修复 ``Style.BOPOMOFO`` 风格下未处理 ``ê`` 的问题。Fixed `#291`_\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.14.0 的词语拼音数据。\n\n\n`0.47.1`_ (2022-08-21)\n+++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复在处理既没有声母也没有韵母的拼音时，指定 neutral_tone_with_five=True 会返回\n  ``5`` 作为拼音的问题（`#284`_）:\n\n  .. code-block:: python\n\n      # 修复前\n      >>> lazy_pinyin('嗯', style=Style.FINALS_TONE3, neutral_tone_with_five=True)\n      ['5']\n      # 修复后\n      >>> lazy_pinyin('嗯', style=Style.FINALS_TONE3, neutral_tone_with_five=True)\n      ['']\n\n\n`0.47.0`_ (2022-07-30)\n+++++++++++++++++++++++++\n\n* **[New]** **[Changed]** 自定义拼音风格的回调函数新增关键字参数 ``han`` ，用于接收对应的原始汉字:\n\n  .. code-block:: python\n\n        @register('new_style')\n        def new_style_func(pinyin, **kwargs):\n            return kwargs.get('han', '') + pinyin\n\n        pinyin('北京', style='new_style')  # output: [['北běi'], ['京jīng']]\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.13.0 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.13.0 的拼音数据。\n* **[Bugfixed]** 修复 ``tone_to_tone3`` 函数对空字符串的处理 via `#279`_\n\n\n`0.46.0`_ (2022-02-12)\n+++++++++++++++++++++++++\n\n* **[New]** ``pypinyin.contrib.tone_convert`` 模块新增 ``to_finals_tone`` 、``to_finals_tone2``\n  以及 ``to_finals_tone3`` 函数，用于将拼音转换为 ``Style.FINALS_TONE`` 、 ``Style.FINALS_TONE2``\n  以及 ``Style.FINALS_TONE3`` 风格的结果。\n* **[Changed]** 将 ``pypinyin.contrib.tone_convert`` 模块中 ``to_tone2`` 、 ``to_tone3``、\n  ``tone_to_tone2`` 及 ``tone_to_tone3`` 函数的 ``neutral_tone_with_5`` 参数重命名为统一的\n  ``neutral_tone_with_five`` 参数名称，兼容已有代码传入的 ``neutral_tone_with_5`` 参数。建议升级版本后择期修改为\n  使用新的 ``neutral_tone_with_five`` 参数名称。\n\n\n`0.45.0`_ (2022-01-23)\n+++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复韵母相关拼音风格在 ``strict=True`` 时未按预期只返回拼音标准中定义过的韵母。\n  (Fixes `#266`_, Closes `#80`_)\n* **[New]** ``pypinyin.contrib.tone_convert`` 模块新增 ``to_initials`` 和 ``to_finals`` 函数，\n  用于将拼音转换为 ``Style.INITIALS`` 和 ``Style.FINALS`` 风格的结果。\n\n\n`0.44.0`_ (2021-11-14)\n+++++++++++++++++++++++++\n\n* **[New]** 增加 Python 3.10 下的测试，正式支持 Python 3.10 。\n* **[New]** ``tone2_to_tone3`` 、``tone3_to_tone2`` 新增 ``v_to_u=False`` 参数\n* **[Bugfixed]** 修复 ``pypinyin.contrib.tone_convert`` 中无声调相关风格转换没有正确处理 ``v_to_u`` 参数的问题 （Fixes `#251`_ ）\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.12.0 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.12.0 的拼音数据。\n\n\n`0.43.0`_ (2021-10-06)\n++++++++++++++++++++++++\n\n* **[New]** ``lazy_pinyin`` 函数增加参数 ``tone_sandhi`` 用于控制是否对拼音结果按 `变调规则`_ 进行处理:\n\n  .. code-block:: python\n\n      >>> lazy_pinyin('你好', style=Style.TONE2)\n      ['ni3', 'ha3o']\n      >>> lazy_pinyin('你好', style=Style.TONE2, tone_sandhi=True)\n      ['ni2', 'ha3o']\n\n\n`0.42.1`_ (2021-09-30)\n++++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.11.0 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.11.0 的拼音数据。\n\n\n`0.42.0`_ (2021-06-14)\n++++++++++++++++++++++++\n\n* **[New]** 新增 ``Style.WADEGILES`` ：威妥玛拼音/韦氏拼音/威式拼音风格，无声调\n\n  .. code-block:: python\n\n      >>> lazy_pinyin('威妥玛拼音', style=Style.WADEGILES)\n      ['wei', \"t'o\", 'ma', \"p'in\", 'yin']\n\n\n`0.41.0`_ (2021-03-13)\n++++++++++++++++++++++++\n\n* **[New]** 新增 ``pypinyin.contrib.tone_convert`` 模块，用于\n  ``Style.TONE`` 、 ``Style.TONE2`` 、 ``Style.TONE3`` 、 ``Style.NORMAL`` 风格的拼音之间互相转换。\n  详见 `文档 <https://pypinyin.readthedocs.io/zh_CN/develop/contrib.html#tone-convert>`__\n* **[Improved]** 使用 `pinyin-data`_ v0.10.2 的拼音数据。\n\n\n`0.40.0`_ (2020-11-22)\n++++++++++++++++++++++++\n\n* **[Improved]** 精简 phrases_dict, 删除 phrases_dict 中凡是能通过 pinyin_dict 得到相同结果的数据。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.10.5 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.10.1 的拼音数据。\n\n\n`0.39.1`_ (2020-10-08)\n++++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.10.4 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.10.0 的拼音数据。\n\n\n`0.39.0`_ (2020-08-16)\n++++++++++++++++++++++++\n\n* **[New]** ``pinyin`` 和 ``lazy_pinyin`` 函数增加参数 ``v_to_u`` 和 ``neutral_tone_with_five``:\n\n  * ``v_to_u=True`` 时在无声调相关拼音风格下使用 ``ü`` 代替原来的 ``v``\n\n  .. code-block:: python\n\n      >>> lazy_pinyin('战略')\n      ['zhan', 'lve']\n      >>> lazy_pinyin('战略', v_to_u=True)\n      ['zhan', 'lüe']\n\n  * ``neutral_tone_with_five=True`` 时在数字标识声调相关风格下使用 ``5`` 标识轻声\n\n  .. code-block:: python\n\n      >>> lazy_pinyin('衣裳', style=Style.TONE3)\n      ['yi1', 'shang']\n      >>> lazy_pinyin('衣裳', style=Style.TONE3, neutral_tone_with_five=True)\n      ['yi1', 'shang5']\n\n\n\n`0.38.1`_ (2020-07-05)\n++++++++++++++++++++++++\n\n* **[Improved]** 优化内置分词，处理前缀匹配导致无法正确识别尾部词语的问题。 Fixed `#205`_\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.10.3 的词语拼音数据。\n\n\n`0.38.0`_ (2020-06-07)\n++++++++++++++++++++++++\n\n* **[Improved]** 优化内置分词，严格按照是否是词语来分词。 Fixed `#139`_\n* **[Improved]** 使用 `pinyin-data`_ v0.9.0 的拼音数据。\n\n\n`0.37.0`_ (2020-02-09)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复 ``NeutralToneWith5Mixin`` 在 ``TONE3`` 相关风格未把 5 标在预期的拼音末尾位置。\n* **[New]** 增加 Python 3.8 下的测试，正式支持 Python 3.8 。\n\n\n`0.36.0`_ (2019-10-27)\n+++++++++++++++++++++++\n\n* **[New]** 增加 ``V2UMixin`` 用于支持无声调相关拼音风格下的结果使用 ``ü`` 代替原来的 ``v`` 。\n  详见 `文档 <https://pypinyin.readthedocs.io/zh_CN/master/contrib.html#v2umixin>`__ 。\n* **[New]** 增加 ``NeutralToneWith5Mixin`` 用于支持使用数字表示声调的拼音风格下使用 5 标识轻声。\n  详见 `文档 <https://pypinyin.readthedocs.io/zh_CN/master/contrib.html#neutraltonewith5mixin>`__ 。\n* **[New]** 增加 ``Pinyin`` 和 ``DefaultConverter`` 类用于实现自定义处理过程和结果\n  （实验性功能，绝大部分用户无需关心新增的这两个类）。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.10.2 的词语拼音数据。\n* **[Improved]** 使用 `pinyin-data`_ v0.8.1 的拼音数据。\n\n\n`0.35.4`_ (2019-07-13)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** 修复 ``m̄`` ``ê̄``  ``ế`` ``ê̌`` ``ề`` 这几个音无法转换为不含声调结果的问题。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.10.1 的词语拼音数据。 Fixed `#174`_\n* **[Improved]** 使用 `pinyin-data`_ v0.8.0 的拼音数据。\n* **[Improved]** 修复一处参数注释错误。(via `#176`_ Thanks `@yangwe1`_)\n\n\n`0.35.3`_ (2019-05-11)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复鼻音 ``m̀`` 无法转换为不含声调结果的问题。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.10.0 的词语拼音数据。\n  Fixed `#166`_ `#167`_ `#169`_ `#170`_\n* **[Improved]** Windows CI 增加在 x64 下跑测试 (via `#164`_ Thanks `@hanabi1224`_)\n\n\n`0.35.2`_ (2019-04-06)\n+++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.9.2 的词语拼音数据。 Fixed `#159`_ `#160`_\n* **[Improved]** 使用 `pinyin-data`_ v0.7.0 的拼音数据。\n\n\n`0.35.1`_ (2019-03-02)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** 修复 ``朝阳`` 在 ``heteronym=False`` 时输出了多个音的情况。\n\n\n`0.35.0`_ (2019-02-24)\n+++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.9.0 的词语拼音数据。 Fixed `#154`_ `#149`_\n* **[New]** 支持 ``朝阳`` 这种一个词多个音（ ``'朝阳': [['zhāo', 'cháo'], ['yáng']]`` ）在多音字模式下输出多个音。 Fixed `#154`_\n\n\n`0.34.1`_ (2018-12-30)\n+++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.8.5 的词语拼音数据。 Fixed `#151`_\n\n\n`0.34.0`_ (2018-12-08)\n+++++++++++++++++++++++\n\n不兼容旧版的变更\n~~~~~~~~~~~~~~~~~~\n\n* **[Changed]** 当 ``errors`` 参数的值是个回调对象并且返回值是个 ``list`` 时，\n  会使用这个 list 来 extend 结果 list (via `#147`_ . Thanks `@howl-anderson`_ ) ::\n\n    # 更新前\n    >>> pinyin('你好☆☆', errors=lambda x: ['star' for _ in x])\n    [['nǐ'], ['hǎo'], ['star', 'star']]\n\n    # 更新后\n    >>> pinyin('你好☆☆', errors=lambda x: ['star' for _ in x])\n    [['nǐ'], ['hǎo'], ['star'], ['star']]\n\n\n详见文档: https://pypinyin.readthedocs.io/zh_CN/develop/usage.html#handle-no-pinyin\n\n\n`0.33.2`_ (2018-11-03)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复 ``strict=True`` 时韵母相关风格下没有正确处理韵母 ``üan`` 的问题。\n\n\n`0.33.1`_ (2018-09-23)\n++++++++++++++++++++++++\n\n* **[Improved]** 使用 `pinyin-data`_ v0.6.2 的拼音数据。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.8.4 的词语拼音数据。\n\n\n`0.33.0`_ (2018-08-05)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复命令行程序在 ``sys.stdin.encoding`` 为 ``None`` 时无法正常工作的问题。\n* **[Improved]** 使用 `pinyin-data`_ v0.6.1 的拼音数据。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.8.3 的词语拼音数据。\n\n  * Fixed `#137`_\n\n* **[Changed]** 不再测试 Python 2.6 和 Python 3.3，增加测试 Python 3.7 和 PyPy3\n  即不保证程序兼容 Python 2.6 和 Python 3.3。\n\n\n`0.32.0`_ (2018-07-28)\n++++++++++++++++++++++++\n\n* **[Improved]** 使用 `pinyin-data`_ v0.6.0 的拼音数据。\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.8.2 的词语拼音数据。\n\n\n`0.31.0`_ (2018-06-10)\n++++++++++++++++++++++++\n\n* **[New]** 增加 py.typed 标记文件，支持 `PEP 561`_ (via `#130`_)\n* **[Changed]** 使用 `phrase-pinyin-data`_ v0.7.3 的词语拼音数据。\n\n  * fixed `#112`_ `#117`_ `#122`_ `#131`_\n  * 精简词组拼音，删除部分数据有误的拼音数据\n\n\n`0.30.1`_ (2018-04-25)\n++++++++++++++++++++++++\n\n* **[Improved]** 更新文档和测试。(via `7fa0b87 <https://github.com/mozillazg/python-pinyin/commit/7fa0b879df47e8a7e5af5edb5f243dd4ea645410>`_)\n* **[Improved]** 对用户传入的已进行分词处理的数据进行二次分词以便提高准确性。(via `#126`_)\n* **[Improved]** 使用 `pinyin-data`_ v0.5.1 的拼音数据。(via `#125`_)\n\n\n`0.30.0`_ (2018-02-03)\n++++++++++++++++++++++++\n\n* **[New]** 支持有拼音的非汉字字符 ``〇`` (via `#119`_)。\n* **[Changed]** 修复之前无意中把 ``pinyin`` 函数中的 ``strict`` 参数的默认值修改为了 ``False`` ，\n  现在把 ``strict`` 参数的默认值恢复为预期的 ``True`` (via `#121`_)。关于 ``strict`` 参数的影响详见文档： `strict 参数的影响`_\n\n\n`0.29.0`_ (2018-01-14)\n++++++++++++++++++++++++\n\n* **[New]** 可以通过环境变量 ``PYPINYIN_NO_DICT_COPY`` 禁用代码内对 dict 的 copy 操作，节省内存(via `#115`_ thanks `@daya0576`_ )。\n\n`0.28.0`_ (2017-12-08)\n++++++++++++++++++++++++\n\n* **[New]** 给代码增加类型注解(via `#110`_)。\n\n\n`0.27.0`_ (2017-10-28)\n++++++++++++++++++++++++\n\n* **[New]** 命令行工具支持通过更简便的方式指定参数及拼音风格。\n  (详见 `#105`_, Thanks `@wdscxsj`_ )\n* **[Improved]** 增加说明 ``strict`` 参数对结果有什么影响的文档。\n\n\n`0.26.1`_ (2017-10-25)\n++++++++++++++++++++++++\n\n* **[Improved]** 使用 `phrase-pinyin-data`_ v0.5.1 的词语拼音数据。fixed `#106`_\n\n\n`0.26.0`_ (2017-10-12)\n+++++++++++++++++++++++\n\n* **[Changed]** 不再自动调用 jieba 分词模块，改为自动调用内置的正向最大匹配分词模块来分词。\n  (via `#102`_)\n\n\n`0.25.0`_ (2017-10-01)\n+++++++++++++++++++++++\n\n* **[New]** 内置一个正向最大匹配分词模块，使用内置的词语拼音库来训练这个分词模块，\n  解决自定义词语库有时可能不生效的问题（因为这个词语在 jieba 等分词模块中不是可用词）。(via `#81`_)\n\n\n  获取拼音或自定义词库后使用：\n\n  .. code-block:: python\n\n      >>> from pypinyin import pinyin, load_phrases_dict\n      >>> load_phrases_dict({'了局': [['liǎo'], ['jú']]})\n      >>> pinyin('了局啊')   # 使用 jieba 分词\n      Building prefix dict from the default dictionary ...\n      Dumping model to file cache /var/folders/s6/z9r_07h53pj_d4x7qjszwmbw0000gn/T/jieba.cache\n      Loading model cost 1.175 seconds.\n      Prefix dict has been built succesfully.\n      [['le'], ['jú'], ['a']]\n\n      >>> from pypinyin.contrib.mmseg import seg, retrain\n      >>> retrain(seg)   # 没有使用 load_phrases_dict 时可以不调用这个函数\n      >>> pinyin(seg.cut('了局啊'))  # 使用内置的正向最大匹配分词\n      [['liǎo'], ['jú'], ['a']]\n      >>>\n\n  单独使用:\n\n  .. code-block:: python\n\n        >>> from pypinyin.contrib.mmseg import seg\n        >>> text = '你好，我是中国人，我爱我的祖国'\n        >>> seg.cut(text)\n        <generator object Seg.cut at 0x10b2df2b0>\n        >>> list(seg.cut(text))\n        ['你好', '，', '我', '是', '中国人', '，', '我', '爱',\n         '我的', '祖', '国']\n        >>> seg.train(['祖国', '我是'])\n        >>> list(seg.cut(text))\n        ['你好', '，', '我是', '中国人', '，', '我', '爱',\n         '我的', '祖国']\n        >>>\n\n\n`0.24.0`_ (2017-09-17)\n++++++++++++++++++++++++\n\n* **[New]** 支持类似 pyinstaller 的打包工具对使用 pypinyin 的程序进行打包，\n  不会出现跟打包前不一样的输出（比如： `#92`_ ）（via `#93`_ ）。\n\n\n`0.23.0`_ (2017-07-09)\n++++++++++++++++++++++++\n\n* **[New]** 使用 `phrase-pinyin-data`_ v0.5.0 的词语拼音数据。\n\n\n`0.22.0`_ (2017-06-14)\n++++++++++++++++++++++++\n\n* **[New]** 支持 IronPython (via `#86`_). Thanks `@LevyLession`_\n\n\n`0.21.1`_ (2017-05-29)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复在 Python 2 下通过 pip install 安装 wheel 格式的安装包后, 无法正常使用的问题。（Python 2 下没有自动安装依赖包）\n\n\n`0.21.0`_ (2017-05-14)\n++++++++++++++++++++++++\n\n* **[New]** 重构各拼音风格实现，支持自定义拼音风格或覆盖已有拼音风格的实现.\n\n  .. code-block:: python\n\n      from pypinyin.style import register\n\n      @register('style1')\n      def func(pinyin, **kwargs):\n          # pinyin = xxx   # convert to style1\n          return pinyin\n\n      def func(pinyin, **kwargs):\n          # pinyin = xxx   # convert to style2\n          return pinyin\n      register('style2', func=func)\n\n\n`0.20.0`_ (2017-05-13)\n++++++++++++++++++++++++\n\n* **[New]** 增加 ``strict`` 参数来控制处理声母和韵母时是否严格遵循 `《汉语拼音方案》 <http://www.moe.edu.cn/s78/A19/yxs_left/moe_810/s230/195802/t19580201_186000.html>`_ 标准。\n\n  当 ``strict=True`` 时根据 `《汉语拼音方案》 <http://www.moe.edu.cn/s78/A19/yxs_left/moe_810/s230/195802/t19580201_186000.html>`_ 的如下规则处理声母、在韵母相关风格下还原正确的韵母：\n\n   * 21 个声母： ``b p m f d t n l g k h j q x zh ch sh r z c s`` （**y, w 不是声母**）\n   * i行的韵母，前面没有声母的时候，写成yi(衣)，ya(呀)，ye(耶)，yao(腰)，you(忧)，yan(烟)，yin(因)，yang(央)，ying(英)，yong(雍)。（**y 不是声母**）\n   * u行的韵母，前面没有声母的时候，写成wu(乌)，wa(蛙)，wo(窝)，wai(歪)，wei(威)，wan(弯)，wen(温)，wang(汪)，weng(翁)。（**w 不是声母**）\n   * ü行的韵母，前面没有声母的时候，写成yu(迂)，yue(约)，yuan(冤)，yun(晕)；ü上两点省略。（**韵母相关风格下还原正确的韵母 ü**）\n   * ü行的韵跟声母j，q，x拼的时候，写成ju(居)，qu(区)，xu(虚)，ü上两点也省略；\n     但是跟声母n，l拼的时候，仍然写成nü(女)，lü(吕)。（**韵母相关风格下还原正确的韵母 ü**）\n   * iou，uei，uen前面加声母的时候，写成iu，ui，un。例如niu(牛)，gui(归)，lun(论)。（**韵母相关风格下还原正确的韵母 iou，uei，uen**）\n\n  具体差异可以查看 tests/test_standard.py 中的对比结果测试用例\n\n* **[Changed]** 改为使用 enum 定义拼音风格（兼容旧版本）\n\n\n`0.19.0`_ (2017-05-05)\n++++++++++++++++++++++++\n\n* **[New]** 韵母风格下根据 `汉语拼音方案`_ 还原原始的 ``iou`` , ``uei`` , ``uen`` 韵母。\n\n    iou，uei，uen前面加声母的时候，写成iu，ui，un。\n    例如niu(牛)，gui(归)，lun(论)。即：\n\n    * niu 的韵母是 iou\n    * gui 的韵母是 uei\n    * lun 的韵母是 uen\n* **[Fixed]** 修复韵母相关风格下没有正确处理 ``wu`` 的韵母的问题\n  (比如: ``无`` 在 ``FINALS_TONE`` 风格下的结果是 ``uú`` 的问题) 。\n* **[Fixed]** 修复漏了 ǖ -> v1 的转换。\n\n\n\n`0.18.2`_ (2017-04-25)\n++++++++++++++++++++++++\n\n* **[Fixed]** 使用 `phrase-pinyin-data`_ v0.4.1 的词语拼音数据, fixed `#72`_ 。\n\n\n`0.18.1`_ (2017-03-22)\n++++++++++++++++++++++++\n\n* **[Improved]** PyPI 上传过程中出了点问题。\n\n\n`0.18.0`_ (2017-03-22)\n++++++++++++++++++++++++\n\n* **[Changed]** 使用 `phrase-pinyin-data`_ v0.4.0 的词语拼音数据。\n\n\n`0.17.0`_ (2017-03-13)\n++++++++++++++++++++++++\n\n* **[Changed]** 词语拼音数据改为使用来自 `phrase-pinyin-data`_ v0.3.1 的拼音数据。\n* **[Fixed]** 修正 ``斯事体大`` 的拼音。\n\n\n`0.16.1`_ (2017-02-12)\n++++++++++++++++++++++++\n\n* **[Improved]** 使用 `pinyin-data`_ v0.4.1 的拼音数据. fixed `#58`_\n* **[Improved]** 更新 `厦门` 的拼音. fixed `#59`_\n\n\n`0.16.0`_ (2016-11-27)\n++++++++++++++++++++++++\n\n* **[New]** Added new pinyin styles - ``CYRILLIC`` (汉语拼音与俄语字母对照表) and ``CYRILLIC _FIRST`` (via `#55`_ thanks `@tyrbonit`_)\n\n  .. code-block:: python\n\n      >>> pypinyin.pinyin('中心', style=pypinyin.CYRILLIC)\n      [['чжун1'], ['синь1']]\n      >>> pypinyin.pinyin('中心', style=pypinyin.CYRILLIC_FIRST)\n      [['ч'], ['с']]\n* **[New]** Added Russian translation README (`README_ru.rst`_)\n* **[New]** Command-line tool supported the new pinyin styles: ``CYRILLIC, CYRILLIC_FIRST``\n\n\n`0.15.0`_ (2016-10-18)\n++++++++++++++++++++++++\n\n* **[Changed]** 使用 `pinyin-data`_ v0.4.0 的拼音数据\n\n\n`0.14.0`_ (2016-09-24)\n++++++++++++++++++++++++\n\n* **[New]** 新增注音 ``BOPOMOFO`` 及注音首字母 ``BOPOMOFO_FIRST`` 风格(via `#51`_ thanks `@gumblex`_ `@Artoria2e5`_)\n\n  .. code-block:: python\n\n      >>> pypinyin.pinyin('中心', style=pypinyin.BOPOMOFO)\n      [['ㄓㄨㄥ'], ['ㄒㄧㄣ']]\n      >>> pypinyin.pinyin('中心', style=pypinyin.BOPOMOFO_FIRST)\n      [['ㄓ'], ['ㄒ']]\n\n\n* **[New]** 新增音调在拼音后的 ``TONE3`` 以及 ``FINALS_TONE3`` 风格(via `#51`_ thanks `@gumblex`_ `@Artoria2e5`_ )\n\n  .. code-block:: python\n\n      >>> pypinyin.pinyin('中心', style=pypinyin.TONE3)\n      [['zhong1'], ['xin1']]\n      >>> pypinyin.pinyin('中心', style=pypinyin.FINALS_TONE3)\n      [['ong1'], ['in1']]\n\n* **[New]** 命令行程序支持新增的四个风格: ``TONE3, FINALS_TONE3, BOPOMOFO, BOPOMOFO_FIRST``\n* **[Bugfixed]** 修复 TONE2 中 ü 标轻声的问题（像 侵略 -> qi1n lv0e4），以及去除文档中 0 表示轻声(via `#51`_ thanks `@gumblex`_)\n* **[Changed]** 不再使用 0 表示轻声，轻声时没有数字(via `#51`_ thanks `@gumblex`_)\n\n\n`0.13.0`_ (2016-08-19)\n++++++++++++++++++++++++\n\n* **[Changed]** 分离词组库中包含中文逗号的词语(via `f097b6a <https://github.com/mozillazg/python-pinyin/commit/f097b6ad7b9e2acbc1ecc214991be510f4f95d72>`_)\n* **[Changed]** 使用 `pinyin-data`_ v0.3.0 的拼音数据\n\n\n`0.12.1`_ (2016-05-11)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** 修复一些词语存在拼音粘连在一起的情况. (`#41`_ thanks `@jolly-tao`_ )\n\n\n`0.12.0`_ (2016-03-12)\n++++++++++++++++++++++++\n\n* **[Changed]** 单个汉字的拼音数据改为使用来自 `pinyin-data`_ 的拼音数据。\n* **[New]** 命令行程序支持从标准输入读取汉字信息::\n\n    $ echo \"你好\" | pypinyin\n    nǐ hǎo\n    $ pypinyin < hello.txt\n    nǐ hǎo\n\n\n`0.11.1`_ (2016-02-17)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** 更新 phrases_dict 修复类似 `#36`_ 的问题。thanks `@someus`_\n\n\n`0.11.0`_ (2016-01-16)\n+++++++++++++++++++++++\n\n* **[Changed]** 分割 ``__init__.py`` 为 ``compat.py``, ``constants.py``， ``core.py`` 和 ``utils.py``。\n  影响: ``__init__.py`` 中只保留文档中提到过的 api, 如果使用了不在文档中的 api 则需要调整代码。\n\n\n`0.10.0`_ (2016-01-02)\n+++++++++++++++++++++++\n\n* **[New]** Python 3.3++++ 以上版本默认支持 ``U++++20000 ~ U++++2FA1F`` 区间内的汉字(详见 `#33`_)\n\n\n`0.9.5`_ (2015-12-19)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** 修复未正确处理鼻音（详见 `汉语拼音 - 维基百科`_ ）的问题(`#31`_ thanks `@xulin97`_ ):\n\n  * ``ḿ、ń、ň、ǹ`` 对应 “呒”、“呣”、“唔”、“嗯”等字。\n    这些字之前在各种风格下都输出原始的汉字而不是拼音。\n\n\n`0.9.4`_ (2015-11-27)\n+++++++++++++++++++++++\n\n* **[Improved]** 细微调整，主要是更新文档\n\n\n`0.9.3`_ (2015-11-15)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** Fixed Python 3 compatibility was broken.\n\n\n`0.9.2`_ (2015-11-15)\n+++++++++++++++++++++++\n\n* **[New]** ``load_single_dict`` 和 ``load_phrases_dict`` 增加 ``style`` 参数支持 TONE2 风格的拼音 ::\n\n      load_single_dict({ord(u'啊'): 'a1'}, style='tone2')\n      load_phrases_dict({u\"阿爸\": [[u\"a1\"], [u\"ba4\"]]}, style='tone2'}\n* **[Improved]** Improved docs\n\n\n`0.9.1`_ (2015-10-17)\n+++++++++++++++++++++++\n\n* **[Bugfixed][Changed]** 修复 ``ju``, ``qu``, ``xu``, ``yu``, ``yi`` 和 ``wu`` 的韵母( `#26`_ ). Thanks `@MingStar`_ :\n\n  * ``ju``, ``qu``, ``xu`` 的韵母应该是 ``v``\n  * ``yi`` 的韵母是 ``i``\n  * ``wu`` 的韵母是 ``u``\n  * 从现在开始 ``y`` 既不是声母也不是韵母，详见 `汉语拼音方案`_\n\n\n`0.9.0`_ (2015-09-20)\n+++++++++++++++++++++++\n\n* **[Changed]** 将拼音词典库里的国际音标字母替换为 ASCII 字母. Thanks `@MingStar`_ :\n\n  * ``ɑ -> a``\n  * ``ɡ -> g``\n\n\n`0.8.5`_ (2015-08-23)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** 修复 zh, ch, sh, z, c, s 顺序问题导致获取声母有误\n\n\n`0.8.4`_ (2015-08-23)\n+++++++++++++++++++++++\n\n* **[Changed]** ``y``, ``w`` 也不是声母. (`hotoo/pinyin#57 <https://github.com/hotoo/pinyin/issues/57>`__):\n\n  * 以 ``y``, ``w`` 开头的拼音在声母(``INITIALS``)模式下将返回 ``['']``\n\n\n`0.8.3`_ (2015-08-20)\n+++++++++++++++++++++++\n\n* **[Improved]** 上传到 PyPI 出了点问题，但是又 `没法重新上传 <http://sourceforge.net/p/pypi/support-requests/468/>`__ ，只好新增一个版本\n\n\n`0.8.2`_ (2015-08-20)\n+++++++++++++++++++++++\n\n* **[Bugfixed][Changed]** 修复误把 yu 放入声母列表里的 BUG(`#22`_). Thanks `@MingStar`_\n\n\n`0.8.1`_ (2015-07-04)\n+++++++++++++++++++++++\n\n* **[Bugfixed]** 重构内置的分词功能，修复“无法正确处理包含空格的字符串的问题”\n\n\n`0.8.0`_ (2015-06-27)\n++++++++++++++++++++++++\n\n* **[New]** 内置简单的分词功能，完善处理没有拼音的字符\n  （如果不需要处理多音字问题, 现在可以不用安装 ``jieba`` 或其他分词模块了）::\n\n        # 之前, 安装了结巴分词模块\n        lazy_pinyin(u'你好abc☆☆')\n        [u'ni', u'hao', 'a', 'b', 'c', u'\\u2606', u'\\u2606']\n\n        # 现在, 无论是否安装结巴分词模块\n        lazy_pinyin(u'你好abc☆☆')\n        [u'ni', u'hao', u'abc\\u2606\\u2606']\n\n* | **[Changed]** 当 ``errors`` 参数是回调函数时，函数的参数由 ``单个字符`` 变更为 ``单个字符或词组`` 。\n  | 即: 对于 ``abc`` 字符串, 之前将调用三次 ``errors`` 回调函数: ``func('a') ... func('b') ... func('abc')``\n  | 现在只调用一次: ``func('abc')`` 。\n* **[Changed]** 将英文字符也纳入 ``errors`` 参数的处理范围::\n\n        # 之前\n        lazy_pinyin(u'abc', errors='ignore')\n        [u'abc']\n\n        # 现在\n        lazy_pinyin(u'abc', errors='ignore')\n        []\n\n`0.7.0`_ (2015-06-20)\n++++++++++++++++++++++++\n\n* **[Bugfixed]** Python 2 下无法使用 ``from pypinyin import *`` 的问题\n* **[New]** 支持以下环境变量:\n\n  * ``PYPINYIN_NO_JIEBA=true``: 禁用“自动调用结巴分词模块”\n  * ``PYPINYIN_NO_PHRASES=true``: 禁用内置的“词组拼音库”\n\n\n`0.6.0`_ (2015-06-10)\n++++++++++++++++++++++++\n\n* **[New]** ``errors`` 参数支持回调函数(`#17`_): ::\n\n    def foobar(char):\n        return u'a'\n    pinyin(u'あ', errors=foobar)\n\n`0.5.7`_ (2015-05-17)\n++++++++++++++++++++++\n\n* **[Bugfixed]** 纠正包含 \"便宜\" 的一些词组的读音\n\n\n`0.5.6`_ (2015-02-26)\n++++++++++++++++++++++\n\n* **[Bugfixed]** \"苹果\" pinyin error. `#11`__\n* **[Bugfixed]** 重复 import jieba 的问题\n* **[Improved]** 精简 phrases_dict\n* **[Improved]** 更新文档\n\n__ https://github.com/mozillazg/python-pinyin/issues/11\n\n\n`0.5.5`_ (2015-01-27)\n++++++++++++++++++++++\n\n* **[Bugfixed]** phrases_dict error\n\n\n`0.5.4`_ (2014-12-26)\n++++++++++++++++++++++\n\n* **[Bugfixed]** 无法正确处理由分词模块产生的中英文混合词组（比如：B超，维生素C）的问题.  `#8`__\n\n__ https://github.com/mozillazg/python-pinyin/issues/8\n\n\n`0.5.3`_ (2014-12-07)\n++++++++++++++++++++++\n\n* **[Improved]** 更新拼音库\n\n\n`0.5.2`_ (2014-09-21)\n+++++++++++++++++++++\n\n* **[Improved]** 载入拼音库时，改为载入其副本。防止内置的拼音库被破坏\n* **[Bugfixed]** ``胜败乃兵家常事`` 的音标问题\n\n\n`0.5.1`_ (2014-03-09)\n+++++++++++++++++++++\n\n* **[New]** 参数 ``errors`` 用来控制如何处理没有拼音的字符:\n\n  * ``'default'``: 保留原始字符\n  * ``'ignore'``: 忽略该字符\n  * ``'replace'``: 替换为去掉 ``\\u`` 的 unicode 编码字符串(``u'\\u90aa'`` => ``u'90aa'``)\n\n  只处理 ``[^a-zA-Z0-9_]`` 字符。\n\n\n`0.5.0`_ (2014-03-01)\n+++++++++++++++++++++\n\n* **[Changed]** **使用新的单字拼音库内容和格式**\n\n  | 新的格式：``{0x963F: u\"ā,ē\"}``\n  | 旧的格式：``{u'啊': u\"ā,ē\"}``\n\n\n`0.4.4`_ (2014-01-16)\n+++++++++++++++++++++\n\n* **[Improved]** 清理命令行命令的输出结果，去除无关信息\n* **[Bugfixed]** “ImportError: No module named runner”\n\n\n`0.4.3`_ (2014-01-10)\n+++++++++++++++++++++\n\n* **[Bugfixed]** 命令行工具在 Python 3 下的兼容性问题\n\n\n`0.4.2`_ (2014-01-10)\n+++++++++++++++++++++\n\n* **[Changed]** 拼音风格前的 ``STYLE_`` 前缀（兼容包含 ``STYLE_`` 前缀的拼音风格）\n* **[New]** 命令行工具，具体用法请见： ``pypinyin -h``\n\n\n`0.4.1`_ (2014-01-04)\n+++++++++++++++++++++\n\n* **[New]** 支持自定义拼音库，方便用户修正程序结果(``load_single_dict``, ``load_phrases_dict``)\n\n\n`0.4.0`_ (2014-01-03)\n+++++++++++++++++++++\n\n* **[Changed]** 将 ``jieba`` 模块改为可选安装，用户可以选择使用自己喜爱的分词模块对汉字进行分词处理\n* **[New]** 支持 Python 3\n\n\n`0.3.1`_ (2013-12-24)\n+++++++++++++++++++++\n\n* **[New]** ``lazy_pinyin`` ::\n\n    >>> lazy_pinyin(u'中心')\n    ['zhong', 'xin']\n\n\n`0.3.0`_ (2013-09-26)\n+++++++++++++++++++++\n\n* **[Bugfixed]** 首字母风格无法正确处理只有韵母的汉字\n\n* **[New]** 三个拼音风格:\n    * ``pypinyin.STYLE_FINALS`` ：       韵母风格1，只返回各个拼音的韵母部分，不带声调。如： ``ong uo``\n    * ``pypinyin.STYLE_FINALS_TONE`` ：   韵母风格2，带声调，声调在韵母第一个字母上。如： ``ōng uó``\n    * ``pypinyin.STYLE_FINALS_TONE2`` ：  韵母风格2，带声调，声调在各个拼音之后，用数字 [0-4] 进行表示。如： ``o1ng uo2``\n\n\n`0.2.0`_ (2013-09-22)\n+++++++++++++++++++++\n\n* **[Improved]** 完善对中英文混合字符串的支持::\n\n    >> pypinyin.pinyin(u'你好abc')\n    [[u'n\\u01d0'], [u'h\\u01ceo'], [u'abc']]\n\n\n0.1.0 (2013-09-21)\n++++++++++++++++++\n\n* **[New]** Initial Release\n\n\n.. _#17: https://github.com/mozillazg/python-pinyin/pull/17\n.. _#22: https://github.com/mozillazg/python-pinyin/pull/22\n.. _#26: https://github.com/mozillazg/python-pinyin/pull/26\n.. _@MingStar: https://github.com/MingStar\n.. _汉语拼音方案: https://zh.wiktionary.org/wiki/%E9%99%84%E5%BD%95:%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3%E6%96%B9%E6%A1%88\n.. _汉语拼音方案.pdf: http://www.moe.edu.cn/s78/A19/yxs_left/moe_810/s230/195802/t19580201_186000.html\n.. _汉语拼音 - 维基百科: https://zh.wikipedia.org/wiki/%E6%B1%89%E8%AF%AD%E6%8B%BC%E9%9F%B3#cite_ref-10\n.. _@xulin97: https://github.com/xulin97\n.. _#31: https://github.com/mozillazg/python-pinyin/issues/31\n.. _#33: https://github.com/mozillazg/python-pinyin/pull/33\n.. _#36: https://github.com/mozillazg/python-pinyin/issues/36\n.. _pinyin-data: https://github.com/mozillazg/pinyin-data\n.. _@someus: https://github.com/someus\n.. _#34: https://github.com/mozillazg/python-pinyin/issues/34\n.. _#41: https://github.com/mozillazg/python-pinyin/issues/41\n.. _@jolly-tao: https://github.com/jolly-tao\n.. _@gumblex: https://github.com/gumblex\n.. _@Artoria2e5: https://github.com/Artoria2e5\n.. _#51: https://github.com/mozillazg/python-pinyin/issues/51\n.. _#55: https://github.com/mozillazg/python-pinyin/pull/55\n.. _@tyrbonit: https://github.com/tyrbonit\n.. _README_ru.rst: https://github.com/mozillazg/python-pinyin/blob/master/README_ru.rst\n.. _#58: https://github.com/mozillazg/python-pinyin/issues/58\n.. _#59: https://github.com/mozillazg/python-pinyin/issues/59\n.. _#72: https://github.com/mozillazg/python-pinyin/issues/72\n.. _phrase-pinyin-data: https://github.com/mozillazg/phrase-pinyin-data\n.. _@LevyLession: https://github.com/LevyLession\n.. _#86: https://github.com/mozillazg/python-pinyin/issues/86\n.. _#92: https://github.com/mozillazg/python-pinyin/issues/92\n.. _#93: https://github.com/mozillazg/python-pinyin/issues/93\n.. _#81: https://github.com/mozillazg/python-pinyin/issues/81\n.. _#102: https://github.com/mozillazg/python-pinyin/issues/102\n.. _#105: https://github.com/mozillazg/python-pinyin/issues/105\n.. _#106: https://github.com/mozillazg/python-pinyin/issues/106\n.. _@wdscxsj: https://github.com/wdscxsj\n.. _#110: https://github.com/mozillazg/python-pinyin/pull/110\n.. _#115: https://github.com/mozillazg/python-pinyin/pull/115\n.. _#119: https://github.com/mozillazg/python-pinyin/pull/119\n.. _@daya0576: https://github.com/daya0576\n.. _#121: https://github.com/mozillazg/python-pinyin/pull/121\n.. _#125: https://github.com/mozillazg/python-pinyin/pull/125\n.. _#126: https://github.com/mozillazg/python-pinyin/pull/126\n.. _#112: https://github.com/mozillazg/python-pinyin/issues/112\n.. _#117: https://github.com/mozillazg/python-pinyin/issues/117\n.. _#122: https://github.com/mozillazg/python-pinyin/issues/122\n.. _#131: https://github.com/mozillazg/python-pinyin/issues/131\n.. _#130: https://github.com/mozillazg/python-pinyin/pull/130\n.. _PEP 561: https://www.python.org/dev/peps/pep-0561/\n.. _#137: https://github.com/mozillazg/python-pinyin/issues/137\n.. _#147: https://github.com/mozillazg/python-pinyin/pull/147\n.. _@howl-anderson: https://github.com/howl-anderson\n.. _#151: https://github.com/mozillazg/python-pinyin/issues/151\n.. _#154: https://github.com/mozillazg/python-pinyin/issues/154\n.. _#149: https://github.com/mozillazg/python-pinyin/issues/149\n.. _#159: https://github.com/mozillazg/python-pinyin/issues/159\n.. _#160: https://github.com/mozillazg/python-pinyin/issues/160\n.. _strict 参数的影响: https://pypinyin.readthedocs.io/zh_CN/master/usage.html#strict\n.. _#166: https://github.com/mozillazg/python-pinyin/issues/166\n.. _#167: https://github.com/mozillazg/python-pinyin/issues/167\n.. _#169: https://github.com/mozillazg/python-pinyin/issues/169\n.. _#170: https://github.com/mozillazg/python-pinyin/issues/170\n.. _#174: https://github.com/mozillazg/python-pinyin/issues/174\n.. _#139: https://github.com/mozillazg/python-pinyin/issues/139\n.. _#205: https://github.com/mozillazg/python-pinyin/issues/205\n.. _#251: https://github.com/mozillazg/python-pinyin/issues/251\n.. _#266: https://github.com/mozillazg/python-pinyin/issues/266\n.. _#80: https://github.com/mozillazg/python-pinyin/issues/80\n.. _#284: https://github.com/mozillazg/python-pinyin/issues/284\n.. _#290: https://github.com/mozillazg/python-pinyin/issues/290\n.. _#291: https://github.com/mozillazg/python-pinyin/issues/291\n.. _#319: https://github.com/mozillazg/python-pinyin/issues/319\n.. _#322: https://github.com/mozillazg/python-pinyin/issues/322\n.. _#326: https://github.com/mozillazg/python-pinyin/issues/326\n.. _#164: https://github.com/mozillazg/python-pinyin/pull/164\n.. _#176: https://github.com/mozillazg/python-pinyin/pull/176\n.. _#279: https://github.com/mozillazg/python-pinyin/pull/279\n.. _#318: https://github.com/mozillazg/python-pinyin/pull/318\n.. _#324: https://github.com/mozillazg/python-pinyin/pull/324\n.. _#329: https://github.com/mozillazg/python-pinyin/pull/329\n.. _@hanabi1224: https://github.com/hanabi1224\n.. _@yangwe1: https://github.com/yangwe1\n.. _@Freed-Wu: https://github.com/Freed-Wu\n.. _@serfend: https://github.com/serfend\n.. _@xushengj: https://github.com/xushengj\n.. _变调规则: https://en.wikipedia.org/wiki/Standard_Chinese_phonology#Tone_sandhi\n\n.. _0.2.0: https://github.com/mozillazg/python-pinyin/compare/v0.1.0...v0.2.0\n.. _0.3.0: https://github.com/mozillazg/python-pinyin/compare/v0.2.0...v0.3.0\n.. _0.3.1: https://github.com/mozillazg/python-pinyin/compare/v0.3.0...v0.3.1\n.. _0.4.0: https://github.com/mozillazg/python-pinyin/compare/v0.3.1...v0.4.0\n.. _0.4.1: https://github.com/mozillazg/python-pinyin/compare/v0.4.0...v0.4.1\n.. _0.4.2: https://github.com/mozillazg/python-pinyin/compare/v0.4.1...v0.4.2\n.. _0.4.3: https://github.com/mozillazg/python-pinyin/compare/v0.4.2...v0.4.3\n.. _0.4.4: https://github.com/mozillazg/python-pinyin/compare/v0.4.3...v0.4.4\n.. _0.5.0: https://github.com/mozillazg/python-pinyin/compare/v0.4.4...v0.5.0\n.. _0.5.1: https://github.com/mozillazg/python-pinyin/compare/v0.5.0...v0.5.1\n.. _0.5.2: https://github.com/mozillazg/python-pinyin/compare/v0.5.1...v0.5.2\n.. _0.5.3: https://github.com/mozillazg/python-pinyin/compare/v0.5.2...v0.5.3\n.. _0.5.4: https://github.com/mozillazg/python-pinyin/compare/v0.5.3...v0.5.4\n.. _0.5.5: https://github.com/mozillazg/python-pinyin/compare/v0.5.4...v0.5.5\n.. _0.5.6: https://github.com/mozillazg/python-pinyin/compare/v0.5.5...v0.5.6\n.. _0.5.7: https://github.com/mozillazg/python-pinyin/compare/v0.5.6...v0.5.7\n.. _0.6.0: https://github.com/mozillazg/python-pinyin/compare/v0.5.7...v0.6.0\n.. _0.7.0: https://github.com/mozillazg/python-pinyin/compare/v0.6.0...v0.7.0\n.. _0.8.0: https://github.com/mozillazg/python-pinyin/compare/v0.7.0...v0.8.0\n.. _0.8.1: https://github.com/mozillazg/python-pinyin/compare/v0.8.0...v0.8.1\n.. _0.8.2: https://github.com/mozillazg/python-pinyin/compare/v0.8.1...v0.8.2\n.. _0.8.3: https://github.com/mozillazg/python-pinyin/compare/v0.8.2...v0.8.3\n.. _0.8.4: https://github.com/mozillazg/python-pinyin/compare/v0.8.3...v0.8.4\n.. _0.8.5: https://github.com/mozillazg/python-pinyin/compare/v0.8.4...v0.8.5\n.. _0.9.0: https://github.com/mozillazg/python-pinyin/compare/v0.8.5...v0.9.0\n.. _0.9.1: https://github.com/mozillazg/python-pinyin/compare/v0.9.0...v0.9.1\n.. _0.9.2: https://github.com/mozillazg/python-pinyin/compare/v0.9.1...v0.9.2\n.. _0.9.3: https://github.com/mozillazg/python-pinyin/compare/v0.9.2...v0.9.3\n.. _0.9.4: https://github.com/mozillazg/python-pinyin/compare/v0.9.3...v0.9.4\n.. _0.9.5: https://github.com/mozillazg/python-pinyin/compare/v0.9.4...v0.9.5\n.. _0.10.0: https://github.com/mozillazg/python-pinyin/compare/v0.9.5...v0.10.0\n.. _0.11.0: https://github.com/mozillazg/python-pinyin/compare/v0.10.0...v0.11.0\n.. _0.11.1: https://github.com/mozillazg/python-pinyin/compare/v0.11.0...v0.11.1\n.. _0.12.0: https://github.com/mozillazg/python-pinyin/compare/v0.11.1...v0.12.0\n.. _0.12.1: https://github.com/mozillazg/python-pinyin/compare/v0.12.0...v0.12.1\n.. _0.13.0: https://github.com/mozillazg/python-pinyin/compare/v0.12.1...v0.13.0\n.. _0.14.0: https://github.com/mozillazg/python-pinyin/compare/v0.13.0...v0.14.0\n.. _0.15.0: https://github.com/mozillazg/python-pinyin/compare/v0.14.0...v0.15.0\n.. _0.16.0: https://github.com/mozillazg/python-pinyin/compare/v0.15.0...v0.16.0\n.. _0.16.1: https://github.com/mozillazg/python-pinyin/compare/v0.16.0...v0.16.1\n.. _0.17.0: https://github.com/mozillazg/python-pinyin/compare/v0.16.1...v0.17.0\n.. _0.18.0: https://github.com/mozillazg/python-pinyin/compare/v0.17.0...v0.18.0\n.. _0.18.1: https://github.com/mozillazg/python-pinyin/compare/v0.18.0...v0.18.1\n.. _0.18.2: https://github.com/mozillazg/python-pinyin/compare/v0.18.1...v0.18.2\n.. _0.19.0: https://github.com/mozillazg/python-pinyin/compare/v0.18.2...v0.19.0\n.. _0.20.0: https://github.com/mozillazg/python-pinyin/compare/v0.19.0...v0.20.0\n.. _0.21.0: https://github.com/mozillazg/python-pinyin/compare/v0.20.0...v0.21.0\n.. _0.21.1: https://github.com/mozillazg/python-pinyin/compare/v0.21.0...v0.21.1\n.. _0.22.0: https://github.com/mozillazg/python-pinyin/compare/v0.21.1...v0.22.0\n.. _0.23.0: https://github.com/mozillazg/python-pinyin/compare/v0.22.0...v0.23.0\n.. _0.24.0: https://github.com/mozillazg/python-pinyin/compare/v0.23.0...v0.24.0\n.. _0.25.0: https://github.com/mozillazg/python-pinyin/compare/v0.24.0...v0.25.0\n.. _0.26.0: https://github.com/mozillazg/python-pinyin/compare/v0.25.0...v0.26.0\n.. _0.26.1: https://github.com/mozillazg/python-pinyin/compare/v0.26.0...v0.26.1\n.. _0.27.0: https://github.com/mozillazg/python-pinyin/compare/v0.26.1...v0.27.0\n.. _0.28.0: https://github.com/mozillazg/python-pinyin/compare/v0.27.0...v0.28.0\n.. _0.29.0: https://github.com/mozillazg/python-pinyin/compare/v0.28.0...v0.29.0\n.. _0.30.0: https://github.com/mozillazg/python-pinyin/compare/v0.29.0...v0.30.0\n.. _0.30.1: https://github.com/mozillazg/python-pinyin/compare/v0.30.0...v0.30.1\n.. _0.31.0: https://github.com/mozillazg/python-pinyin/compare/v0.30.1...v0.31.0\n.. _0.32.0: https://github.com/mozillazg/python-pinyin/compare/v0.31.0...v0.32.0\n.. _0.33.0: https://github.com/mozillazg/python-pinyin/compare/v0.32.0...v0.33.0\n.. _0.33.1: https://github.com/mozillazg/python-pinyin/compare/v0.33.0...v0.33.1\n.. _0.33.2: https://github.com/mozillazg/python-pinyin/compare/v0.33.1...v0.33.2\n.. _0.34.0: https://github.com/mozillazg/python-pinyin/compare/v0.33.2...v0.34.0\n.. _0.34.1: https://github.com/mozillazg/python-pinyin/compare/v0.34.0...v0.34.1\n.. _0.35.0: https://github.com/mozillazg/python-pinyin/compare/v0.34.1...v0.35.0\n.. _0.35.1: https://github.com/mozillazg/python-pinyin/compare/v0.35.0...v0.35.1\n.. _0.35.2: https://github.com/mozillazg/python-pinyin/compare/v0.35.1...v0.35.2\n.. _0.35.3: https://github.com/mozillazg/python-pinyin/compare/v0.35.2...v0.35.3\n.. _0.35.4: https://github.com/mozillazg/python-pinyin/compare/v0.35.3...v0.35.4\n.. _0.36.0: https://github.com/mozillazg/python-pinyin/compare/v0.35.4...v0.36.0\n.. _0.37.0: https://github.com/mozillazg/python-pinyin/compare/v0.36.0...v0.37.0\n.. _0.38.0: https://github.com/mozillazg/python-pinyin/compare/v0.37.0...v0.38.0\n.. _0.38.1: https://github.com/mozillazg/python-pinyin/compare/v0.38.0...v0.38.1\n.. _0.39.0: https://github.com/mozillazg/python-pinyin/compare/v0.38.1...v0.39.0\n.. _0.39.1: https://github.com/mozillazg/python-pinyin/compare/v0.39.0...v0.39.1\n.. _0.40.0: https://github.com/mozillazg/python-pinyin/compare/v0.39.1...v0.40.0\n.. _0.41.0: https://github.com/mozillazg/python-pinyin/compare/v0.40.0...v0.41.0\n.. _0.42.0: https://github.com/mozillazg/python-pinyin/compare/v0.41.0...v0.42.0\n.. _0.42.1: https://github.com/mozillazg/python-pinyin/compare/v0.42.0...v0.42.1\n.. _0.43.0: https://github.com/mozillazg/python-pinyin/compare/v0.42.1...v0.43.0\n.. _0.44.0: https://github.com/mozillazg/python-pinyin/compare/v0.43.0...v0.44.0\n.. _0.45.0: https://github.com/mozillazg/python-pinyin/compare/v0.44.0...v0.45.0\n.. _0.46.0: https://github.com/mozillazg/python-pinyin/compare/v0.45.0...v0.46.0\n.. _0.47.0: https://github.com/mozillazg/python-pinyin/compare/v0.46.0...v0.47.0\n.. _0.47.1: https://github.com/mozillazg/python-pinyin/compare/v0.47.0...v0.47.1\n.. _0.48.0: https://github.com/mozillazg/python-pinyin/compare/v0.47.1...v0.48.0\n.. _0.49.0: https://github.com/mozillazg/python-pinyin/compare/v0.48.0...v0.49.0\n.. _0.50.0: https://github.com/mozillazg/python-pinyin/compare/v0.49.0...v0.50.0\n.. _0.51.0: https://github.com/mozillazg/python-pinyin/compare/v0.50.0...v0.51.0\n.. _0.52.0: https://github.com/mozillazg/python-pinyin/compare/v0.51.0...v0.52.0\n.. _0.53.0: https://github.com/mozillazg/python-pinyin/compare/v0.52.0...v0.53.0\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1435546875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at mozillazg101@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0791015625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 mozillazg, 闲耘 <hotoo.cn@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.091796875,
          "content": "include README.rst LICENSE.txt CHANGELOG.rst\nrecursive-include pypinyin *.pyi py.typed *.json\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.849609375,
          "content": "help:\n\t@echo \"test             run test\"\n\t@echo \"publish          publish to PyPI\"\n\t@echo \"publish_test     publish to TestPyPI\"\n\t@echo \"docs_html        make html docs\"\n\t@echo \"docs_serve       serve docs\"\n\t@echo \"gen_data         gen pinyin data\"\n\t@echo \"gen_pinyin_dict  gen single hanzi pinyin dict\"\n\t@echo \"gen_phrases_dict gen phrase hanzi pinyin dict\"\n\t@echo \"lint             run lint\"\n\t@echo \"clean - remove all build, test, coverage and Python artifacts\"\n\t@echo \"clean-build - remove build artifacts\"\n\t@echo \"clean-pyc - remove Python file artifacts\"\n\t@echo \"clean-test - remove test and coverage artifacts\"\n\n.PHONY: test\ntest: lint\n\t@echo \"run test\"\n\tmake testonly\n\n.PHONY: testonly\ntestonly: doctest\n\tpy.test --random-order --cov pypinyin tests/ pypinyin/\n\n.PHONY: doctest\ndoctest:\n\tfor f in $(shell find pypinyin -name '*.py' |grep -v __ ); do python -m doctest $$f; done\n\n.PHONY: publish\npublish: clean\n\t@echo \"publish to pypi\"\n\tpython setup.py sdist\n\tpython setup.py bdist_wheel\n\ttwine upload dist/*\n\n.PHONY: publish_test\npublish_test: clean\n\t@echo \"publish to test pypi\"\n\tpython setup.py sdist\n\tpython setup.py bdist_wheel\n\ttwine upload --repository test dist/*\n\n.PHONY: docs_html\ndocs_html:\n\tcd docs && make html\n\n.PHONY: docs_serve\ndocs_serve: docs_html\n\tcd docs/_build/html && python -m http.server\n\n.PHONY: gen_data\ngen_data: sync_submodule gen_pinyin_dict gen_phrases_dict\n\n.PHONY: gen_pinyin_dict\ngen_pinyin_dict: sync_submodule\n\tpython gen_pinyin_dict.py pinyin-data/pinyin.txt pypinyin/legacy/pinyin_dict.py\n\t$(MAKE) to_json source=pypinyin/legacy/pinyin_dict.py var=pinyin_dict dst=pypinyin/pinyin_dict.json\n\n.PHONY: gen_phrases_dict\ngen_phrases_dict: sync_submodule\n\tpython gen_phrases_dict.py phrase-pinyin-data/pinyin.txt pypinyin/legacy/phrases_dict.py\n\t$(MAKE) to_json source=pypinyin/legacy/phrases_dict.py var=phrases_dict dst=pypinyin/phrases_dict.json\n\n\n.PHONY: to_json\nto_json:\n\tpython -c 'import json; exec(open(\"$(source)\").read()); json.dump($(var), open(\"$(dst)\", \"w\"), ensure_ascii=False, sort_keys=True, indent=\"\")'\n\n.PHONY: sync_submodule\nsync_submodule:\n\tgit submodule init\n\tgit submodule update\n\n.PHONY: lint\nlint:\n\tpre-commit run --all-files\n\tmypy --strict pypinyin\n\nclean: clean-build clean-pyc clean-test\n\nclean-build:\n\trm -fr build/\n\trm -fr dist/\n\trm -fr .eggs/\n\tfind . -name '*.egg-info' -exec rm -fr {} +\n\tfind . -name '*.egg' -exec rm -f {} +\n\nclean-pyc:\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f {} +\n\tfind . -name '__pycache__' -exec rm -fr {} +\n\nclean-test:\n\trm -fr .tox/\n\trm -f .coverage\n\trm -fr htmlcov/\n\nrebase_master:\n\tgit fetch origin && git rebase origin/master\n\nmerge_dev:\n\tgit merge --no-ff origin/develop\n\nbump_patch:\n\tbumpversion --verbose patch\n\nbump_minor:\n\tbumpversion --verbose minor\n\nstart_next:\n\tgit push && git push --tags && git checkout develop && git rebase master && git push\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 10.3232421875,
          "content": "汉字拼音转换工具（Python 版）\n=============================\n\n|Build| |GitHubAction| |Coverage| |Pypi version| |PyPI downloads| |DOI|\n\n\n将汉字转为拼音。可以用于汉字注音、排序、检索(`Russian translation`_) 。\n\n最初版本的代码参考了 `hotoo/pinyin <https://github.com/hotoo/pinyin>`__ 的实现。\n\n* Documentation: https://pypinyin.readthedocs.io/\n* GitHub: https://github.com/mozillazg/python-pinyin\n* License: MIT license\n* PyPI: https://pypi.org/project/pypinyin\n* Python version: 2.7, pypy, pypy3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13\n\n.. contents::\n\n\n特性\n----\n\n* 根据词组智能匹配最正确的拼音。\n* 支持多音字。\n* 简单的繁体支持，注音支持，威妥玛拼音支持。\n* 支持多种不同拼音/注音风格。\n\n\n安装\n----\n\n.. code-block:: bash\n\n    pip install pypinyin\n\n\n使用示例\n--------\n\n.. code-block:: python\n\n    >>> from pypinyin import pinyin, lazy_pinyin, Style\n    >>> pinyin('中心')  # or pinyin(['中心'])，参数值为列表时表示输入的是已分词后的数据\n    [['zhōng'], ['xīn']]\n    >>> pinyin('中心', heteronym=True)  # 启用多音字模式\n    [['zhōng', 'zhòng'], ['xīn']]\n    >>> pinyin('中心', style=Style.FIRST_LETTER)  # 设置拼音风格\n    [['z'], ['x']]\n    >>> pinyin('中心', style=Style.TONE2, heteronym=True)\n    [['zho1ng', 'zho4ng'], ['xi1n']]\n    >>> pinyin('中心', style=Style.TONE3, heteronym=True)\n    [['zhong1', 'zhong4'], ['xin1']]\n    >>> pinyin('中心', style=Style.BOPOMOFO)  # 注音风格\n    [['ㄓㄨㄥ'], ['ㄒㄧㄣ']]\n    >>> lazy_pinyin('威妥玛拼音', style=Style.WADEGILES)\n    ['wei', \"t'o\", 'ma', \"p'in\", 'yin']\n    >>> lazy_pinyin('中心')  # 不考虑多音字的情况\n    ['zhong', 'xin']\n    >>> lazy_pinyin('战略', v_to_u=True)  # 不使用 v 表示 ü\n    ['zhan', 'lüe']\n    # 使用 5 标识轻声\n    >>> lazy_pinyin('衣裳', style=Style.TONE3, neutral_tone_with_five=True)\n    ['yi1', 'shang5']\n    # 变调  nǐ hǎo -> ní hǎo\n    >>> lazy_pinyin('你好', style=Style.TONE2, tone_sandhi=True)\n    ['ni2', 'ha3o']\n\n**注意事项** ：\n\n* 默认情况下拼音结果不会标明哪个韵母是轻声，轻声的韵母没有声调或数字标识（可以通过参数 ``neutral_tone_with_five=True`` 开启使用 ``5`` 标识轻声 ）。\n* 默认情况下无声调相关拼音风格下的结果会使用 ``v`` 表示 ``ü`` （可以通过参数 ``v_to_u=True`` 开启使用 ``ü`` 代替 ``v`` ）。\n* 默认情况下会原样输出没有拼音的字符（自定义处理没有拼音的字符的方法见 `文档 <https://pypinyin.readthedocs.io/zh_CN/master/usage.html#handle-no-pinyin>`__ ）。\n* ``嗯`` 的拼音并不是大部分人以为的 ``en`` 以及存在既没有声母也没有韵母的拼音，详见下方 FAQ 中的说明。\n\n命令行工具：\n\n.. code-block:: console\n\n    $ pypinyin 音乐\n    yīn yuè\n\n    $ python -m pypinyin.tools.toneconvert to-tone 'zhong4 xin1'\n    zhòng xīn\n\n\n文档\n--------\n\n详细文档请访问：https://pypinyin.readthedocs.io/。\n\n项目代码开发方面的问题可以看看 `开发文档`_ 。\n\n\nFAQ\n---------\n\n拼音有误？\n+++++++++++++++++++++++++++++\n\n可以通过下面的方法提高拼音准确性：\n\n* 可以通过自定义词组拼音库或者单字拼音库的方式修正拼音结果，\n  详见 `文档 <https://pypinyin.readthedocs.io/zh_CN/master/usage.html#custom-dict>`__ 。\n\n.. code-block:: python\n\n    >> from pypinyin import load_phrases_dict, load_single_dict\n\n    >> load_phrases_dict({'桔子': [['jú'], ['zǐ']]})  # 增加 \"桔子\" 词组\n\n    >> load_single_dict({ord('还'): 'hái,huán'})  # 调整 \"还\" 字的拼音顺序或覆盖默认拼音\n\n* 也可以使用 `pypinyin-dict <https://github.com/mozillazg/pypinyin-dict>`__ 项目提供的自定义拼音库来纠正结果。\n\n.. code-block:: python\n\n    # 使用 phrase-pinyin-data 项目中 cc_cedict.txt 文件中的拼音数据优化结果\n    >>> from pypinyin_dict.phrase_pinyin_data import cc_cedict\n    >>> cc_cedict.load()\n\n    # 使用 pinyin-data 项目中 kXHC1983.txt 文件中的拼音数据优化结果\n    >>> from pypinyin_dict.pinyin_data import kxhc1983\n    >>> kxhc1983.load()\n\n* 如果是分词导致的拼音有误的话，可以先使用其他的分词模块对数据进行分词处理，\n  然后将分词后的词组结果列表作为函数的参数即可:\n\n.. code-block:: python\n\n    >>> # 使用其他分词模块分词，比如 jieba 之类，\n    >>> #或者基于 phrases_dict.py 里的词语数据使用其他分词算法分词\n    >>> words = list(jieba.cut('每股24.67美元的确定性协议'))\n    >>> pinyin(words)\n\n* 如果你希望能通过训练模型的方式提高拼音准确性的话，可以看一下 `pypinyin-g2pW <https://github.com/mozillazg/pypinyin-g2pW>`__ 这个项目。\n\n\n为什么没有 y, w, yu 几个声母？\n++++++++++++++++++++++++++++++++++++++++++++\n\n.. code-block:: python\n\n    >>> from pypinyin import Style, pinyin\n    >>> pinyin('下雨天', style=Style.INITIALS)\n    [['x'], [''], ['t']]\n\n因为根据 `《汉语拼音方案》 <http://www.moe.gov.cn/jyb_sjzl/ziliao/A19/195802/t19580201_186000.html>`__ ，\ny，w，ü (yu) 都不是声母。\n\n    声母风格（INITIALS）下，“雨”、“我”、“圆”等汉字返回空字符串，因为根据\n    `《汉语拼音方案》 <http://www.moe.gov.cn/jyb_sjzl/ziliao/A19/195802/t19580201_186000.html>`__ ，\n    y，w，ü (yu) 都不是声母，在某些特定韵母无声母时，才加上 y 或 w，而 ü 也有其特定规则。    —— @hotoo\n\n    **如果你觉得这个给你带来了麻烦，那么也请小心一些无声母的汉字（如“啊”、“饿”、“按”、“昂”等）。\n    这时候你也许需要的是首字母风格（FIRST_LETTER）**。    —— @hotoo\n\n    参考: `hotoo/pinyin#57 <https://github.com/hotoo/pinyin/issues/57>`__,\n    `#22 <https://github.com/mozillazg/python-pinyin/pull/22>`__,\n    `#27 <https://github.com/mozillazg/python-pinyin/issues/27>`__,\n    `#44 <https://github.com/mozillazg/python-pinyin/issues/44>`__\n\n如果觉得这个行为不是你想要的，就是想把 y 当成声母的话，可以指定 ``strict=False`` ，\n这个可能会符合你的预期：\n\n.. code-block:: python\n\n    >>> from pypinyin import Style, pinyin\n    >>> pinyin('下雨天', style=Style.INITIALS)\n    [['x'], [''], ['t']]\n    >>> pinyin('下雨天', style=Style.INITIALS, strict=False)\n    [['x'], ['y'], ['t']]\n\n详见 `strict 参数的影响`_ 。\n\n存在既没有声母也没有韵母的拼音？\n+++++++++++++++++++++++++++++++++\n\n是的，``strict=True`` 模式下存在极少数既没有声母也没有韵母的拼音。\n比如下面这些拼音（来自汉字 ``嗯``、``呒``、``呣``、``唔``）::\n\n    ń ńg ňg ǹg ň ǹ m̄ ḿ m̀\n\n尤其需要注意的是 ``嗯`` 的所有拼音都既没有声母也没有韵母，``呣`` 的默认拼音既没有声母也没有韵母。\n详见 `#109`_ `#259`_ `#284`_ 。\n\n\n如何将某一风格的拼音转换为其他风格的拼音？\n++++++++++++++++++++++++++++++++++++++++++++\n\n可以通过 ``pypinyin.contrib.tone_convert`` 模块提供的辅助函数对标准拼音进行转换，得到不同风格的拼音。\n比如将 ``zhōng`` 转换为 ``zhong``，或者获取拼音中的声母或韵母数据：\n\n.. code-block:: python\n\n    >>> from pypinyin.contrib.tone_convert import to_normal, to_tone, to_initials, to_finals\n    >>> to_normal('zhōng')\n    'zhong'\n    >>> to_tone('zhong1')\n    'zhōng'\n    >>> to_initials('zhōng')\n    'zh'\n    >>> to_finals('zhōng')\n    'ong'\n\n更多拼音转换的辅助函数，详见 ``pypinyin.contrib.tone_convert`` 模块的\n`文档 <https://pypinyin.readthedocs.io/zh_CN/master/contrib.html#tone-convert>`__ 。\n\n\n如何减少内存占用？\n++++++++++++++++++++\n\n如果对拼音的准确性不是特别在意的话，可以通过设置环境变量 ``PYPINYIN_NO_PHRASES``\n和 ``PYPINYIN_NO_DICT_COPY`` 来节省内存。\n详见 `文档 <https://pypinyin.readthedocs.io/zh_CN/master/faq.html#no-phrases>`__\n\n\n更多 FAQ 详见文档中的\n`FAQ <https://pypinyin.readthedocs.io/zh_CN/master/faq.html>`__ 部分。\n\n\n.. _#13 : https://github.com/mozillazg/python-pinyin/issues/113\n.. _strict 参数的影响: https://pypinyin.readthedocs.io/zh_CN/master/usage.html#strict\n\n\n拼音数据\n---------\n\n* 单个汉字的拼音使用 `pinyin-data`_ 的数据\n* 词组的拼音使用 `phrase-pinyin-data`_ 的数据\n* 声母和韵母使用 `《汉语拼音方案》 <http://www.moe.gov.cn/jyb_sjzl/ziliao/A19/195802/t19580201_186000.html>`__ 的数据\n\n\nRelated Projects\n-----------------\n\n* `hotoo/pinyin`__: 汉字拼音转换工具 Node.js/JavaScript 版。\n* `mozillazg/go-pinyin`__: 汉字拼音转换工具 Go 版。\n* `mozillazg/rust-pinyin`__: 汉字拼音转换工具 Rust 版。\n* `wolfgitpr/cpp-pinyin`__: 汉字拼音转换工具 c++ 版。\n* `wolfgitpr/csharp-pinyin`__: 汉字拼音转换工具 c# 版。\n\n\n__ https://github.com/hotoo/pinyin\n__ https://github.com/mozillazg/go-pinyin\n__ https://github.com/mozillazg/rust-pinyin\n__ https://github.com/wolfgitpr/cpp-pinyin\n__ https://github.com/wolfgitpr/csharp-pinyin\n\n\n.. |Build| image:: https://img.shields.io/circleci/project/github/mozillazg/python-pinyin/master.svg\n   :target: https://circleci.com/gh/mozillazg/python-pinyin\n.. |GitHubAction| image:: https://github.com/mozillazg/python-pinyin/workflows/CI/badge.svg\n   :target: https://github.com/mozillazg/python-pinyin/actions\n.. |Coverage| image:: https://img.shields.io/coveralls/github/mozillazg/python-pinyin/master.svg\n   :target: https://coveralls.io/github/mozillazg/python-pinyin\n.. |PyPI version| image:: https://img.shields.io/pypi/v/pypinyin.svg\n   :target: https://pypi.org/project/pypinyin/\n.. |DOI| image:: https://zenodo.org/badge/12830126.svg\n   :target: https://zenodo.org/badge/latestdoi/12830126\n.. |PyPI downloads| image:: https://img.shields.io/pypi/dm/pypinyin.svg\n   :target: https://pypi.org/project/pypinyin/\n\n\n\n.. _Russian translation: https://github.com/mozillazg/python-pinyin/blob/master/README_ru.rst\n.. _pinyin-data: https://github.com/mozillazg/pinyin-data\n.. _phrase-pinyin-data: https://github.com/mozillazg/phrase-pinyin-data\n.. _开发文档: https://pypinyin.readthedocs.io/zh_CN/develop/develop.html\n.. _#109: https://github.com/mozillazg/python-pinyin/issues/109\n.. _#259: https://github.com/mozillazg/python-pinyin/issues/259\n.. _#284: https://github.com/mozillazg/python-pinyin/issues/284\n"
        },
        {
          "name": "README_en.rst",
          "type": "blob",
          "size": 6.734375,
          "content": "A tool for converting Chinese characters to pinyin (Python version)\n=====================================================================\n\n|Build| |GitHubAction| |Coverage| |Pypi version| |DOI|\n\n\nTakes Chinese characters and converts them to pinyin, zhuyin, and Cyrillic.\n\nBased on `hotoo/pinyin <https://github.com/hotoo/pinyin>`__\n\n* Documentation: http://pypinyin.rtfd.io/\n* GitHub: https://github.com/mozillazg/python-pinyin\n* License: MIT license\n* PyPI: https://pypi.org/project/pypinyin\n* Python version: 2.7, pypy, pypy3, 3.4, 3.5, 3.6, 3.7, 3.8\n\n.. contents::\n\n\nCharacteristics\n----\n\n* Finds the most fitting pinyin based on phrase occurences.\n* Has support for characters with two or more readings (heteronyms).\n* Has support for simplified, traditional characters, and zhuyin (also known als bopomofo).\n* Has support for multiple styles of pinyin and zhuyin (e.g. tone conventions).\n\n\nInstall\n----\n\n.. code-block:: bash\n\n    $ pip install pypinyin\n\n\nUsage cases\n--------\n\nPython 3 (For below Python 2, change '中心' to u'中心'):\n\n.. code-block:: python\n\n    >>> from pypinyin import pinyin, lazy_pinyin, Style\n    >>> pinyin('中心')\n    [['zhōng'], ['xīn']]\n    >>> pinyin('中心', heteronym=True)  # make use of heteronym mode\n    [['zhōng', 'zhòng'], ['xīn']]\n    >>> pinyin('中心', style=Style.FIRST_LETTER)  # set the pinyin style\n    [['z'], ['x']]\n    >>> pinyin('中心', style=Style.TONE2, heteronym=True)\n    [['zho1ng', 'zho4ng'], ['xi1n']]\n    >>> pinyin('中心', style=Style.TONE3, heteronym=True)\n    [['zhong1', 'zhong4'], ['xin1']]\n    >>> pinyin('中心', style=Style.BOPOMOFO)  # zhuyin mode\n    [['ㄓㄨㄥ'], ['ㄒㄧㄣ']]\n    >>> lazy_pinyin('中心')  # don't include tone information or heteronyms\n    ['zhong', 'xin']\n\n\n**Please take note** ：\n\n* Pinyin results will have no indicators for syllables with a neutral tone,\nneither diacritics or numbers. (For the use of '5' for neutral tones, see `article <https://pypinyin.readthedocs.io/zh_CN/master/contrib.html#neutraltonewith5mixin>`__).\n* Lazy pinyin results will use 'v' for 'ü'\n(for using 'ü', see `article <https://pypinyin.readthedocs.io/zh_CN/master/contrib.html#v2umixin>`__).\n\nCommand line tools:\n\n.. code-block:: console\n\n    $ pypinyin 音乐\n    yīn yuè\n    $ pypinyin -h\n\n\nDocumentation\n--------\n\nFor more details, see `article <http://pypinyin.rtfd.io/>`__\n\nFor project development related question, please refer to `development documents`_.\n\n\nFAQ\n---------\n\nAre there any mistakes in the heteronyms?\n+++++++++++++++++++++++++++++\n\nA database of pinyin phrases are used to solve the heteronym problem.\nIf there turns out to be a mistake, you can use custom pinyin phrases to adapt the database:\n\n.. code-block:: python\n\n    >>> from pypinyin import Style, pinyin, load_phrases_dict\n    >>> pinyin('步履蹒跚')\n    [['bù'], ['lǚ'], ['mán'], ['shān']]\n    >>> load_phrases_dict({'步履蹒跚': [['bù'], ['lǚ'], ['pán'], ['shān']]})\n    >>> pinyin('步履蹒跚')\n    [['bù'], ['lǚ'], ['pán'], ['shān']]\n\nFor more details, see `article <https://pypinyin.readthedocs.io/zh_CN/master/usage.html#custom-dict>`__.\n\nWhy are there no y, w, yu as syllable initials?\n++++++++++++++++++++++++++++++++++++++++++++\n\n.. code-block:: python\n\n    >>> from pypinyin import Style, pinyin\n    >>> pinyin('下雨天', style=Style.INITIALS)\n    [['x'], [''], ['t']]\n\nBecause according to the standard pinyin rules (`《汉语拼音方案》 <http://www.moe.gov.cn/jyb_sjzl/ziliao/A19/195802/t19580201_186000.html>`__),\n'y', 'w', and 'ü' ('yu') are not counted as syllable initials.\n\n    ** If this causes you inconvenience, please also be aware of characters without an initial\n    like '啊' ('a'), '饿' ('e'), '按' ('an'), '昂' ('ang'), etc. In this case you might need 'FIRST_LETTER' mode.\n\t —— @hotoo\n\n    reference: `hotoo/pinyin#57 <https://github.com/hotoo/pinyin/issues/57>`__,\n    `#22 <https://github.com/mozillazg/python-pinyin/pull/22>`__,\n    `#27 <https://github.com/mozillazg/python-pinyin/issues/27>`__,\n    `#44 <https://github.com/mozillazg/python-pinyin/issues/44>`__\n\nIf this is not the desired behaviour, that is if you want 'y' to be counted as an initial,\nuse 'strict=False'.\n\n.. code-block:: python\n\n    >>> from pypinyin import Style, pinyin\n    >>> pinyin('下雨天', style=Style.INITIALS)\n    [['x'], [''], ['t']]\n    >>> pinyin('下雨天', style=Style.INITIALS, strict=False)\n    [['x'], ['y'], ['t']]\n\n\nHow to reduce internal memory load?\n++++++++++++++++++++\n\nIf you don't care too much about the correctness of pinyin,\nyou can use the environmental parameters 'PYPINYIN_NO_PHRASES' and 'PYPINYIN_NO_DICT_COPY'\nto reduce internal memory load.\nFor more details, see `article <https://pypinyin.readthedocs.io/zh_CN/master/faq.html#no-phrases>`__\n\n\nFor more FAQ:\n`FAQ <https://pypinyin.readthedocs.io/zh_CN/master/faq.html>`__\n\n\n.. _#13 : https://github.com/mozillazg/python-pinyin/issues/113\n.. _strict impact: https://pypinyin.readthedocs.io/zh_CN/master/usage.html#strict\n\n\nPinyin data\n---------\n\n* Single charachter pinyin usage `pinyin-data`_ data\n* Pinyin usage in phrases `phrase-pinyin-data`_ data\n\n\nRelated Projects\n-----------------\n\n* `hotoo/pinyin`__: A tool for converting Chinese characters to pinyin, Node.js/JavaScript version.\n* `mozillazg/go-pinyin`__: A tool for converting Chinese characters to pinyin, Go version.\n* `mozillazg/rust-pinyin`__: A tool for converting Chinese characters to pinyin, Rust version.\n* `wolfgitpr/cpp-pinyin`__: A tool for converting Chinese characters to pinyin, Cpp version.\n* `wolfgitpr/csharp-pinyin`__: A tool for converting Chinese characters to pinyin, C# version.\n\n\n__ https://github.com/hotoo/pinyin\n__ https://github.com/mozillazg/go-pinyin\n__ https://github.com/mozillazg/rust-pinyin\n__ https://github.com/wolfgitpr/cpp-pinyin\n__ https://github.com/wolfgitpr/csharp-pinyin\n\n\n.. |Build| image:: https://img.shields.io/circleci/project/github/mozillazg/python-pinyin/master.svg\n   :target: https://circleci.com/gh/mozillazg/python-pinyin\n.. |GitHubAction| image:: https://github.com/mozillazg/python-pinyin/workflows/CI/badge.svg\n   :target: https://github.com/mozillazg/python-pinyin/actions\n.. |Coverage| image:: https://img.shields.io/codecov/c/github/mozillazg/python-pinyin/master.svg\n   :target: https://codecov.io/gh/mozillazg/python-pinyin\n.. |PyPI version| image:: https://img.shields.io/pypi/v/pypinyin.svg\n   :target: https://pypi.org/project/pypinyin/\n.. |DOI| image:: https://zenodo.org/badge/12830126.svg\n   :target: https://zenodo.org/badge/latestdoi/12830126\n\n\n\n.. _Russian translation: https://github.com/mozillazg/python-pinyin/blob/master/README_ru.rst\n.. _pinyin-data: https://github.com/mozillazg/pinyin-data\n.. _phrase-pinyin-data: https://github.com/mozillazg/phrase-pinyin-data\n.. _development documents: https://pypinyin.readthedocs.io/zh_CN/develop/develop.html\n"
        },
        {
          "name": "README_ru.rst",
          "type": "blob",
          "size": 5.94921875,
          "content": "Утилита для фонетической транскрипции китайских иероглифов (Python версия)\n============================================================================\n\n|Build| |Coverage| |Pypi version|\n\n\nВыполняет преобразование китайских иероглифов в пиньин. Можно использовать для фонетики китайских иероглифов, сортировки, просмотра информации.\n\nОсновано на `hotoo/pinyin <https://github.com/hotoo/pinyin>`__ проекте.\n\n* Documentation: http://pypinyin.rtfd.io/\n* GitHub: https://github.com/mozillazg/python-pinyin\n* License: MIT license\n* PyPI: https://pypi.python.org/pypi/pypinyin\n* Python version: 2.6, 2.7, pypy, 3.3, 3.4, 3.5, 3.6\n\n\nОсобенности\n--------------\n\n* Весьма точная транскрипция, основанная на интеллектуальном сопоставлении словосочетаний\n* Поддержка иероглифов в несколькими вариантами произношения\n* Поддержка простой и полной формы иероглифов, фонетическая поддержка\n* Поддержка различных форм пиньина/фонетических стилей\n\n\nУстановка\n--------------\n\n.. code-block:: bash\n\n    $ pip install pypinyin\n\n\nДокументация\n------------------\n\nПодробную документацию смотрите здесь：http://pypinyin.rtfd.io/\n\n\nПримеры использования\n----------------------------\n\nPython 3(в Python 2 строку ``'中心'`` достаточно заменить на ``u'中心'``):\n\n.. code-block:: python\n\n    >>> from pypinyin import pinyin, lazy_pinyin\n    >>> import pypinyin\n    >>> pinyin('中心')\n    [['zhōng'], ['xīn']]\n    >>> pinyin('中心', heteronym=True)  # Задействовать режим выдачи иероглифов с несколькими вариантами произношения (омографы)\n    [['zhōng', 'zhòng'], ['xīn']]\n    >>> pinyin('中心', style=pypinyin.FIRST_LETTER)  # Настройка фонетического стиля\n    [['z'], ['x']]\n    >>> pinyin('中心', style=pypinyin.TONE2, heteronym=True)\n    [['zho1ng', 'zho4ng'], ['xi1n']]\n    >>> pinyin('中心', style=pypinyin.BOPOMOFO)  # Фонетический стиль - чжуи́нь или бопомофо\n    [['ㄓㄨㄥ'], ['ㄒㄧㄣ']]\n    >>> pinyin('中心', style=pypinyin.CYRILLIC)  # Фонетический стиль - запись кириллицей по системе Палладия\n    [['чжун1'], ['синь1']]\n    >>> lazy_pinyin('中心')  # Без учета омографов\n    ['zhong', 'xin']\n\nЧерез командную строку:\n\n.. code-block:: console\n\n    $ pypinyin 音乐\n    yīn yuè\n    $ pypinyin -h\n\n\nFAQ\n---------\n\nПочему y, w, yu не имеют инициалей?\n++++++++++++++++++++++++++++++++++++++++++++\n\n    Стиль инициалей （INITIALS） следующих “雨”、“我”、“圆” и других иероглифов возвращает символ пустой строки, так как согласно `\"Метод фонетической транскрипции китайских иероглифов\" <http://www.moe.gov.cn/jyb_sjzl/ziliao/A19/195802/t19580201_186000.html>`__ , символы y, w, ü (yu) не являются инициалями, при этом к некоторым специальным гласным без согласных букв,добавляется y или w，а также ü согласно специальным правилам    —— @hotoo\n\n    Если вы заметили, что это приносит вам трудности, то пожалуйста повнимательней отнеситесь к некоторым иероглифам без инициалей (например “啊”、“饿”、“按”、“昂” и т.д.). Тогда вам возможно потребуется стиль выдачи инициалей (FIRST_LETTER).    —— @hotoo\n\n    Для справки: `hotoo/pinyin#57 <https://github.com/hotoo/pinyin/issues/57>`__, `#22 <https://github.com/mozillazg/python-pinyin/pull/22>`__, `#27 <https://github.com/mozillazg/python-pinyin/issues/27>`__,\n    `#44 <https://github.com/mozillazg/python-pinyin/issues/44>`__\n\n\nRelated Projects\n-----------------\n\n* `hotoo/pinyin`__: Утилита для пиньин конвертации китайских иероглифов  Node.js/JavaScript версия.\n* `mozillazg/go-pinyin`__: Утилита для пиньин конвертации китайских иероглифов Go версия.\n* `mozillazg/rust-pinyin`__: Утилита для пиньин конвертации китайских иероглифов Rust версия.\n* `wolfgitpr/cpp-pinyin`__: Утилита для пиньин конвертации китайских иероглифов Cpp версия.\n* `wolfgitpr/csharp-pinyin`__: Утилита для пиньин конвертации китайских иероглифов C# версия.\n\n\n__ https://github.com/hotoo/pinyin\n__ https://github.com/mozillazg/go-pinyin\n__ https://github.com/mozillazg/rust-pinyin\n__ https://github.com/wolfgitpr/cpp-pinyin\n__ https://github.com/wolfgitpr/csharp-pinyin\n\n\n.. |Build| image:: https://img.shields.io/travis/mozillazg/python-pinyin/master.svg\n   :target: https://travis-ci.org/mozillazg/python-pinyin\n.. |Coverage| image:: https://img.shields.io/coveralls/mozillazg/python-pinyin/master.svg\n   :target: https://coveralls.io/r/mozillazg/python-pinyin\n.. |PyPI version| image:: https://img.shields.io/pypi/v/pypinyin.svg\n   :target: https://pypi.python.org/pypi/pypinyin\n.. |PyPI downloads| image:: https://img.shields.io/pypi/dm/pypinyin.svg\n   :target: https://pypi.python.org/pypi/pypinyin\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen_phrases_dict.py",
          "type": "blob",
          "size": 1.6240234375,
          "content": "# -*- coding: utf-8 -*-\nimport sys\n\n\ndef remove_dup_items(lst):\n    new_lst = []\n    for item in lst:\n        if item not in new_lst:\n            new_lst.append(item)\n    return new_lst\n\n\ndef parse(fp):\n    phrases_dict = {}\n    for line in in_fp.readlines():\n        line = line.strip()\n        if line.startswith('#') or not line:\n            continue\n\n        # 中国: zhōng guó\n        data = line.split('#')[0]\n        hanzi, pinyin = data.strip().split(':')\n        hanzi = hanzi.strip()\n        # [[zhōng], [guó]]\n        pinyin_list = [[s] for s in pinyin.split()]\n\n        if hanzi not in phrases_dict:\n            phrases_dict[hanzi] = pinyin_list\n        else:\n            for index, value in enumerate(phrases_dict[hanzi]):\n                value.extend(pinyin_list[index])\n                phrases_dict[hanzi][index] = remove_dup_items(value)\n\n    return phrases_dict\n\n\ndef main(in_fp, out_fp):\n    out_fp.write('''# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\n# Warning: Auto-generated file, don't edit.\nphrases_dict = {\n''')\n    hanzi_pairs = sorted(parse(in_fp).items(), key=lambda x: x[0])\n    for hanzi, pinyin_list in hanzi_pairs:\n        #     中国: [[zhōng], [guó]]\n        new_line = \"    '{hanzi}': {pinyin_list},\\n\".format(\n            hanzi=hanzi.strip(), pinyin_list=pinyin_list\n        )\n        out_fp.write(new_line)\n    out_fp.write('}\\n')\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        print('python gen_phrases_dict.py INPUT OUTPUT')\n        sys.exit(1)\n    in_f = sys.argv[1]\n    out_f = sys.argv[2]\n\n    with open(in_f) as in_fp, open(out_f, 'w') as out_fp:\n        main(in_fp, out_fp)\n"
        },
        {
          "name": "gen_pinyin_dict.py",
          "type": "blob",
          "size": 1.091796875,
          "content": "# -*- coding: utf-8 -*-\nimport sys\n\n\ndef main(in_fp, out_fp):\n    out_fp.write('''# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\n# Warning: Auto-generated file, don't edit.\npinyin_dict = {\n''')\n    for line in in_fp.readlines():\n        line = line.strip()\n        if line.startswith('#') or not line:\n            continue\n        else:\n            # line is U+4E2D: zhōng,zhòng  # 中\n            # raw_line U+4E2D: zhōng,zhòng\n            raw_line = line.split('#')[0].strip()\n            # 0x4E2D: zhōng,zhòng\n            new_line = raw_line.replace('U+', '0x')\n            # 0x4E2D: 'zhōng,zhòng\n            new_line = new_line.replace(': ', \": '\")\n            #     0x4E2D: 'zhōng,zhòng'\\n\n            new_line = \"    {new_line}',\\n\".format(new_line=new_line)\n            out_fp.write(new_line)\n    out_fp.write('}\\n')\n\n\nif __name__ == '__main__':\n    if len(sys.argv) == 1:\n        print('python gen_pinyin_dict.py INPUT OUTPUT')\n        sys.exit(1)\n    in_f = sys.argv[1]\n    out_f = sys.argv[2]\n\n    with open(in_f) as in_fp, open(out_f, 'w') as out_fp:\n        main(in_fp, out_fp)\n"
        },
        {
          "name": "phrase-pinyin-data",
          "type": "commit",
          "content": null
        },
        {
          "name": "pinyin-data",
          "type": "commit",
          "content": null
        },
        {
          "name": "pypinyin",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.2158203125,
          "content": "[pytest]\npython_files = test_*.py\npython_classes = Test\npython_functions = test\naddopts = -slv --cov-report term-missing --tb=short --durations=10 --doctest-modules\nnorecursedirs = .git __pycache__ pypinyin/__pyinstaller\n"
        },
        {
          "name": "requirements_dev.txt",
          "type": "blob",
          "size": 0.1982421875,
          "content": "argparse\nbumpversion\nmypy\npre-commit\npygments>=2.7.4 # not directly required, pinned by Snyk to avoid a vulnerability\npytest\npytest-cov\npytest-random-order\nsetuptools\nSphinx>=3.0.4\ntox\ntwine\nwheel>=0.21\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.025390625,
          "content": "[bdist_wheel]\nuniversal=1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.3876953125,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom codecs import open\nimport os\nimport re\nimport sys\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\npackages = [\n    'pypinyin',\n    'pypinyin.contrib',\n    'pypinyin.seg',\n    'pypinyin.style',\n    'pypinyin.tools',\n    'pypinyin.__pyinstaller',\n]\n\nrequirements = []\nif sys.version_info[:2] < (2, 7):\n    requirements.append('argparse')\nif sys.version_info[:2] < (3, 4):\n    requirements.append('enum34')\nif sys.version_info[:2] < (3, 5):\n    requirements.append('typing')\nextras_require = {\n    ':python_version<\"2.7\"': ['argparse'],\n    ':python_version<\"3.4\"': ['enum34'],\n    ':python_version<\"3.5\"': ['typing'],\n}\n\n\ndef get_meta():\n    meta_re = re.compile(r\"(?P<name>__\\w+__) = '(?P<value>[^']+)'\")\n    meta_d = {}\n    with open(os.path.join(current_dir, 'pypinyin/__init__.py'),\n              encoding='utf8') as fp:\n        for match in meta_re.finditer(fp.read()):\n            meta_d[match.group('name')] = match.group('value')\n    return meta_d\n\n\ndef long_description():\n    with open(os.path.join(current_dir, 'README.rst'),\n              encoding='utf8') as fp:\n        return fp.read()\n\n\nmeta_d = get_meta()\nsetup(\n    name='pypinyin',\n    version=meta_d['__version__'],\n    description='汉字拼音转换模块/工具.',\n    long_description=long_description(),\n    long_description_content_type='text/x-rst',\n    url='https://github.com/mozillazg/python-pinyin',\n    author=meta_d['__author__'],\n    author_email='mozillazg101@gmail.com',\n    license=meta_d['__license__'],\n    project_urls={\n        'Documentation': 'https://pypinyin.readthedocs.io/',\n        'Source': 'https://github.com/mozillazg/python-pinyin',\n        'Tracker': 'https://github.com/mozillazg/python-pinyin/issues',\n    },\n    packages=packages,\n    package_dir={'pypinyin': 'pypinyin'},\n    include_package_data=True,\n    install_requires=requirements,\n    extras_require=extras_require,\n    python_requires='>=2.6, !=3.0.*, !=3.1.*, !=3.2.*, <4',\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'pypinyin = pypinyin.__main__:main',\n        ],\n        'pyinstaller40': [\n            'hook-dirs = pypinyin.__pyinstaller:get_hook_dirs'\n        ],\n    },\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: 3.13',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n        'Topic :: Utilities',\n        'Topic :: Text Processing',\n    ],\n    keywords='pinyin, 拼音',\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidy_phrases_dict.py",
          "type": "blob",
          "size": 1.888671875,
          "content": "# -*- coding: utf-8 -*-\n\nenv = {}\n\n\ndef get_pinyins_via_pinyin_dict(phrases):\n    pinyins = []\n    for han in phrases:\n        pinyin = env['pinyin_dict'][ord(han)].split(',')[0]\n        pinyins.append([pinyin])\n\n    return pinyins\n\n\ndef save(new_dict, output_file):\n    with open(output_file, 'w') as out_fp:\n        out_fp.write('''# -*- coding: utf-8 -*-\nfrom __future__ import unicode_literals\n\n# Warning: Auto-generated file, don't edit.\nphrases_dict = {\n''')\n        hanzi_pairs = sorted(new_dict.items(), key=lambda x: x[0])\n        for hanzi, pinyin_list in hanzi_pairs:\n            #     中国: [[zhōng], [guó]]\n            new_line = \"    '{hanzi}': {pinyin_list},\\n\".format(\n                hanzi=hanzi.strip(), pinyin_list=pinyin_list\n            )\n            out_fp.write(new_line)\n        out_fp.write('}\\n')\n\n\ndef double_check():\n    import pypinyin\n    from pypinyin.legacy import phrases_dict as large_dict\n    from pypinyin import load_phrases_dict\n    load_phrases_dict(large_dict.phrases_dict)\n\n    missing_dict = {}\n    for phrases, pinyins in env['phrases_dict'].items():\n        if pypinyin.pinyin(phrases, heteronym=True) != pinyins:\n            missing_dict[phrases] = pinyins\n\n    return missing_dict\n\n\ndef tidy():\n    new_dict = {}\n    for phrases, pinyins in env['phrases_dict'].items():\n        pinyins_via_pinyin_dict = get_pinyins_via_pinyin_dict(phrases)\n        if pinyins != pinyins_via_pinyin_dict:\n            new_dict[phrases] = pinyins\n\n    return new_dict\n\n\ndef main():\n    with open('./pypinyin/legacy/pinyin_dict.py') as fp:\n        exec(fp.read(), env, env)\n    with open('./pypinyin/legacy/phrases_dict.py') as fp:\n        exec(fp.read(), env, env)\n\n    output = 'pypinyin/legacy/phrases_dict_tidy.py'\n    new_dict = tidy()\n    save(new_dict, output)\n\n    missing_dict = double_check()\n    new_dict.update(missing_dict)\n    save(new_dict, output)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.9189453125,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist = py26, py27, py33, py34, py35, py36, py37, py38, py39, py310, py311, py312, py313, pypy, pypy3\n\n[base]\ndeps =\n  pytest\n  pytest-cov\n  pytest-random-order\n\n[testenv]\ndeps = {[base]deps}\ncommands = py.test --cov pypinyin tests/ pypinyin/\n\n[oldpy]\ndeps =\n  pytest<3.3.0\n  pytest-cov<2.6.0\n  pytest-random-order<0.8\ncommands = py.test --cov pypinyin tests/\n\n[testenv:py26]\ndeps = {[oldpy]deps}\ncommands = {[oldpy]commands}\n\n[testenv:py27]\ndeps = {[oldpy]deps}\ncommands = {[oldpy]commands}\n\n[testenv:py33]\ndeps = {[oldpy]deps}\ncommands = {[oldpy]commands}\n\n[testenv:py34]\ndeps = {[oldpy]deps}\ncommands = {[oldpy]commands}\n\n[testenv:pypy]\ndeps = {[oldpy]deps}\ncommands = {[oldpy]commands}\n"
        }
      ]
    }
  ]
}