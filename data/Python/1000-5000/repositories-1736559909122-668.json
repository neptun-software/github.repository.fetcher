{
  "metadata": {
    "timestamp": 1736559909122,
    "page": 668,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "benfred/implicit",
      "stars": 3599,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9619140625,
          "content": "_skbuild\n\nimplicit/_nearest_neighbours.cpp\nimplicit/cpu/_als.cpp\nimplicit/cpu/bpr.cpp\nimplicit/evaluation.cpp\nimplicit/gpu/_cuda.cpp\nimplicit/lmf.cpp\nimplicit/recommender_base.cpp\n\n# Mac stuff\n.DS_Store\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n#Ipython Notebook\n.ipynb_checkpoints\n\n.vscode/\n.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8212890625,
          "content": "repos:\n      - repo: https://github.com/timothycrosley/isort\n        rev: 5.12.0\n        hooks:\n        - id: isort\n          additional_dependencies: [toml]\n      - repo: https://github.com/python/black\n        rev: 23.3.0\n        hooks:\n        - id: black\n      - repo: https://github.com/pycqa/flake8\n        rev: 6.0.0\n        hooks:\n        - id: flake8\n      - repo: https://github.com/pycqa/pylint\n        rev: v2.17.4\n        hooks:\n        - id: pylint\n      - repo: https://github.com/codespell-project/codespell\n        rev: v2.2.4\n        hooks:\n        - id: codespell\n      - repo: local\n        hooks:\n        - id: clang-format\n          name: clang-format\n          description: Format files with ClangFormat.\n          entry: clang-format --dry-run --Werror\n          language: system \n          files: \\.(cu|cuh|h|cpp)$\n\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 1.1083984375,
          "content": "[MASTER]\n\nignore-patterns=setup.py\n\nextension-pkg-whitelist=implicit.cpu._als,implicit.cpu.lmf,implicit._nearest_neighbours,implicit.gpu._cuda,implicit.cpu.bpr,implicit.cpu.topk,numpy.random.mtrand,nmslib,faiss\n\n[MESSAGES CONTROL]\ndisable=fixme,\n    missing-function-docstring,\n    missing-module-docstring,\n    missing-class-docstring,\n    wrong-import-order,\n    wrong-import-position,\n    ungrouped-imports,\n    line-too-long,\n    superfluous-parens,\n    trailing-whitespace,\n    invalid-name,\n    import-error,\n\n    # disable code-complexity check\n    too-many-function-args,\n    too-many-instance-attributes,\n    too-many-locals,\n    too-many-branches,\n    too-many-nested-blocks,\n    too-many-statements,\n    too-many-arguments,\n    too-many-return-statements,\n    too-many-lines,\n    too-few-public-methods,\n\n    # TODO: fix underlying errors for these\n    import-outside-toplevel,\n    not-callable,\n    unused-argument,\n    abstract-method,\n    arguments-differ,\n    no-member,\n    no-name-in-module,\n    arguments-renamed,\n    protected-access,\n\n[SIMILARITIES]\nmin-similarity-lines=64\nignore-docstrings=yes\nignore-imports=yes\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.103515625,
          "content": "## v0.5.0\n\n### Breaking API Changes\n\nThe API for implicit has substantially changed in v0.5.0 - and any code written for the previous\nAPI will need to be rewritten:\n\n* Change model.fit to take a user_items sparse matrix [#484](https://github.com/benfred/implicit/pull/484)\n* Return numpy arrays from recommend methods [#482](https://github.com/benfred/implicit/pull/482)\n* Don't require empty rows in user_items and item_users parameters [#526](https://github.com/benfred/implicit/pull/526)\n* Unify API for rank_items/recommend/recommend_all [#489](https://github.com/benfred/implicit/issues/489)\n\n### Performance Improvements\n\n* Speedup evaluation by using batch recommend functions [#520](https://github.com/benfred/implicit/pull/520)\n* Use FAISS for GPU inference [#506](https://github.com/benfred/implicit/pull/506)\n* Multithreaded speedups for CPU models [#517](https://github.com/benfred/implicit/pull/517)\n* Use thrust::binary_search to verify negative samples on GPU [#524](https://github.com/benfred/implicit/pull/524)\n* Release GIL on GPU calls [#528](https://github.com/benfred/implicit/pull/528)\n\n### New Features\n\n* Add incremental retraining support for ALS models [#527](https://github.com/benfred/implicit/pull/527)\n* Add filtering for similar_items and similar_users [#488](https://github.com/benfred/implicit/issues/488)\n* Add support for recalculate_users/items on the GPU [#515](https://github.com/benfred/implicit/pull/515)\n* Add methods for converting MF models to/from gpu [#521](https://github.com/benfred/implicit/pull/521)\n* Add a tutorial notebook for the lastfm example [#529](https://github.com/benfred/implicit/pull/529)\n* Approximate nearest neighbour for BPR/LMF and GPU models [#487](https://github.com/benfred/implicit/issues/487)\n* Dynamically detect CUDA availability [#174](https://github.com/benfred/implicit/issues/174)\n\n## v0.4.5\n\n* GPU Inference [#406](https://github.com/benfred/implicit/pull/406)\n* Fix ALS model for case of > 2^31 interactions [#400](https://github.com/benfred/implicit/pull/400)\n* Fix GPU dot product when the # of factors wasn't warp aligned [#427](https://github.com/benfred/implicit/pull/427)\n* Use gpu registers for dot product [#448](https://github.com/benfred/implicit/pull/448)\n* Fix random output with LMF/BPR models [#408](https://github.com/benfred/implicit/pull/408)\n* Add seed for test-train split [#411](https://github.com/benfred/implicit/pull/411)\n\n## v0.4.4\n\n* Adds Precompiled CUDA packages on conda-forge\n* Drops support for CUDA 8\n\n## v0.4.3\n\n* Implement filter_already_liked_items option [#328](https://github.com/benfred/implicit/pull/328)\n* Fix bug in ALS explain when user_items contains negative confidence values [#313](https://github.com/benfred/implicit/pull/313)\n* Improve numerical stability of LMF [#383](https://github.com/benfred/implicit/pull/383)\n* Add error check after training for NaN factors [#381](https://github.com/benfred/implicit/pull/381)\n* Support building with Cuda 11\n\n## v0.4.0\n\n* Add logistic matrix factorization algorithm [#231](https://github.com/benfred/implicit/pull/231)\n* Use tqdm for progress bars [#240](https://github.com/benfred/implicit/pull/240)\n* Add AUC@K [#275](https://github.com/benfred/implicit/pull/275)\n\n## v0.3.9\n\n* Add ability to pickle nearest neighbours recommenders [#191](https://github.com/benfred/implicit/issues/191)\n* add NDCG method to evaluation [#212](https://github.com/benfred/implicit/pull/212)\n* Add a 'recommend_all' method for matrix factorization models [#179](https://github.com/benfred/implicit/pull/179)\n\n## v0.3.8\n\n* Ensure progress bar hits 100% during xval\n* Fix bm25recommender missing default parameter on fit\n\n## v0.3.7\n\n* Fix GPU faiss model with > 1024 results [#149](https://github.com/benfred/implicit/issues/149)\n* Add a reddit votes dataseet\n* Add similar users calculation in MF modeles [#139](https://github.com/benfred/implicit/pull/139)\n* Add an option to whether to include previously liked items or not [#131](https://github.com/benfred/implicit/issues/13)\n* Add option for negative preferences to ALS modele [#119](https://github.com/benfred/implicit/issues/119)\n* Add filtering negative feedback in test set [#124](https://github.com/benfred/implicit/issues/124)\n\n## v0.3.6\n\n* Adds evaluation functionality with functions for computing P@k and MAP@K and generating a train/test split\n* BPR model now verifies negative samples havenâ€™t been actually liked now, leading to more accurate recommendations\n* Faster KNN recommendations (up to 10x faster recommend calls)\n* Various fixes for models when fitting on the GPU\n* Fix CUDA install on Windows\n* Display progress bars when fitting models using tqdm\n* More datasets: added million song dataset, sketchfab, movielens 100k, 1m and 10m\n\n## v0.3.5\n\n* Use HDF5 files for distributing datasets\n* Add rank_items method to recommender\n\n## v0.3.3\n\n* Fix issue with last user having no ratings in BPR model\n\n## v0.3.2\n\n* Support more than 2^31 training examples in ALS and BPR models\n* Allow 64 bit factors for BPR\n\n## v0.3.0\n* Add a Bayesian Personalized Ranking model, with an option for fitting on the GPU\n\n## v0.2.7\n* Add Support for ANN libraries likes Faiss, NMSLIB and Annoy for making recommendations\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.2412109375,
          "content": "cmake_minimum_required(VERSION 3.17.0)\n\nproject(implicit)\n\nenable_testing()\n\nfind_package(PythonExtensions REQUIRED)\nfind_package(Cython REQUIRED)\nfind_package(OpenMP)\n\ninclude_directories(.)\nset (CMAKE_CXX_STANDARD 11)\nadd_subdirectory(implicit)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Ben Frederickson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2421875,
          "content": "recursive-include implicit *.h *.cu *.cuh *.pyx *.py *.pxd *.txt\ninclude README.md\ninclude CMakeLists.txt\ninclude requirements.txt\ninclude requirements-dev.txt\ninclude LICENSE\ninclude tox.ini\ninclude pyproject.toml\ninclude setup.cfg\nprune _skbuild\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.048828125,
          "content": "Implicit\n=======\n\n[![Build\nStatus](https://github.com/benfred/implicit/workflows/Build/badge.svg)](https://github.com/benfred/implicit/actions?query=workflow%3ABuild+branch%3Amain)\n[![Documentation](https://img.shields.io/badge/documentation-blue.svg)](https://benfred.github.io/implicit/)\n\n\nFast Python Collaborative Filtering for Implicit Datasets.\n\nThis project provides fast Python implementations of several different popular recommendation algorithms for\nimplicit feedback datasets:\n\n * Alternating Least Squares as described in the papers [Collaborative Filtering for Implicit Feedback Datasets](http://yifanhu.net/PUB/cf.pdf) and [Applications of the Conjugate Gradient Method for Implicit\nFeedback Collaborative Filtering](https://pdfs.semanticscholar.org/bfdf/7af6cf7fd7bb5e6b6db5bbd91be11597eaf0.pdf).\n\n * [Bayesian Personalized Ranking](https://arxiv.org/pdf/1205.2618.pdf).\n\n * [Logistic Matrix Factorization](https://web.stanford.edu/~rezab/nips2014workshop/submits/logmat.pdf)\n\n * Item-Item Nearest Neighbour models using Cosine, TFIDF or BM25 as a distance metric.\n\nAll models have multi-threaded training routines, using Cython and OpenMP to fit the models in\nparallel among all available CPU cores.  In addition, the ALS and BPR models both have custom CUDA\nkernels - enabling fitting on compatible GPU's. Approximate nearest neighbours libraries such as [Annoy](https://github.com/spotify/annoy), [NMSLIB](https://github.com/searchivarius/nmslib)\nand [Faiss](https://github.com/facebookresearch/faiss) can also be used by Implicit to [speed up\nmaking recommendations](https://www.benfrederickson.com/approximate-nearest-neighbours-for-recommender-systems/).\n\n#### Installation\n\nImplicit can be installed from pypi with:\n\n```\npip install implicit\n```\n\nInstalling with pip will use prebuilt binary wheels on x86_64 Linux, Windows\nand OSX. These wheels include GPU support on Linux.\n\nImplicit can also be installed with conda:\n\n```\n# CPU only package\nconda install -c conda-forge implicit\n\n# CPU+GPU package\nconda install -c conda-forge implicit implicit-proc=*=gpu\n```\n\n#### Basic Usage\n\n```python\nimport implicit\n\n# initialize a model\nmodel = implicit.als.AlternatingLeastSquares(factors=50)\n\n# train the model on a sparse matrix of user/item/confidence weights\nmodel.fit(user_item_data)\n\n# recommend items for a user\nrecommendations = model.recommend(userid, user_item_data[userid])\n\n# find related items\nrelated = model.similar_items(itemid)\n```\n\nThe examples folder has a program showing how to use this to [compute similar artists on the\nlast.fm dataset](https://github.com/benfred/implicit/blob/master/examples/lastfm.py).\n\nFor more information see the [documentation](https://benfred.github.io/implicit/).\n\n#### Articles about Implicit\n\nThese blog posts describe the algorithms that power this library:\n\n * [Finding Similar Music with Matrix Factorization](https://www.benfrederickson.com/matrix-factorization/)\n * [Faster Implicit Matrix Factorization](https://www.benfrederickson.com/fast-implicit-matrix-factorization/)\n * [Implicit Matrix Factorization on the GPU](https://www.benfrederickson.com/implicit-matrix-factorization-on-the-gpu/)\n * [Approximate Nearest Neighbours for Recommender Systems](https://www.benfrederickson.com/approximate-nearest-neighbours-for-recommender-systems/)\n * [Distance Metrics for Fun and Profit](https://www.benfrederickson.com/distance-metrics/)\n\nThere are also several other articles about using Implicit to build recommendation systems:\n * [H&M Personalized Fashion Recommendations Kaggle Competition](https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/discussion/324129)\n * [Yandex Cup 2022: Like Prediction](https://github.com/greenwolf-nsk/yandex-cup-2022-recsys)\n * [Recommending GitHub Repositories with Google BigQuery and the implicit library](https://medium.com/@jbochi/recommending-github-repositories-with-google-bigquery-and-the-implicit-library-e6cce666c77)\n * [Intro to Implicit Matrix Factorization: Classic ALS with Sketchfab Models](http://blog.ethanrosenthal.com/2016/10/19/implicit-mf-part-1/)\n * [A Gentle Introduction to Recommender Systems with Implicit Feedback](https://jessesw.com/Rec-System/).\n\n\n#### Requirements\n\nThis library requires SciPy version 0.16 or later and Python version 3.6 or later.\n\nGPU Support requires at least version 11 of the [NVidia CUDA Toolkit](https://developer.nvidia.com/cuda-downloads).\n\nThis library is tested with Python 3.7, 3.8, 3.9, 3.10 and 3.11 on Ubuntu, OSX and Windows.\n\n#### Benchmarks\n\nSimple benchmarks comparing the ALS fitting time versus [Spark can be found here](https://github.com/benfred/implicit/tree/master/benchmarks).\n\n#### Optimal Configuration\n\nI'd recommend configuring SciPy to use Intel's MKL matrix libraries. One easy way of doing this is by installing the Anaconda Python distribution.\n\nFor systems using OpenBLAS, I highly recommend setting 'export OPENBLAS_NUM_THREADS=1'. This\ndisables its internal multithreading ability, which leads to substantial speedups for this\npackage. Likewise for Intel MKL, setting 'export MKL_NUM_THREADS=1' should also be set.\n\nReleased under the MIT License\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "implicit",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.005859375,
          "content": "[tool.black]\n\nline-length = 100\n\n[build-system]\nrequires = [\n    \"setuptools>=42\",\n    \"wheel\",\n    \"scikit-build>=0.13.1\",\n    \"Cython>=0.24\",\n    \"scipy>=0.16\",\n    \"cmake>=3.18\",\n    \"ninja\"\n]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.cibuildwheel]\n# skip testing in the cibuildwheel phase, will install the wheels later\n# and verify\ntest-command = \"\"\nskip = [\"pp*\", \"*musl*\",  \"*-manylinux_i686\", \"*win32\"]\n\n[[tool.cibuildwheel.overrides]]\nselect = \"*-manylinux_x86_64*\"\nbefore-all = \"ci/install_cuda.sh\"\n\n# auditwheel includes cuda libraries, just skip it\n[tool.cibuildwheel.linux]\nrepair-wheel-command = \"\"\n\n[tool.cibuildwheel.linux.environment]\nCUDACXX = \"/usr/local/cuda/bin/nvcc\"\n\n# Build `universal2` and `arm64` wheels on an Intel runner.\n# Note that the `arm64` wheel and the `arm64` part of the `universal2`\n# wheel cannot be tested in this configuration.\n[tool.cibuildwheel.macos]\narchs = [\"x86_64\", \"universal2\", \"arm64\"]\n\n[tool.pytest.ini_options]\nfilterwarnings = ['ignore::implicit.utils.ParameterWarning']\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0908203125,
          "content": "-r requirements.txt\n\nscikit-build>=0.13.1\npytest\nblack==22.3.0\nflake8\nisort\ncodespell\npylint\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.068359375,
          "content": "numpy>=1.17.0\nscipy>=0.16.0\nCython>=0.24.0\ntqdm>=4.27.0\nthreadpoolctl\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.646484375,
          "content": "[bumpversion]\ncurrent_version = 0.7.2\ncommit = True\ntag = True\n\n[metadata]\ndescription_file = README.md\n\n[flake8]\nmax-line-length = 100\nexclude = build,.eggs,.tox\nignore = E203,W503\n\n[isort]\nmulti_line_output = 3\ninclude_trailing_comma = True\nforce_grid_wrap = 0\nuse_parentheses = True\nensure_newline_before_comments = True\nknown_first_party = implicit\nknown_third_party = scipy,annoy,numpy,cython,pandas\nline_length = 100\nskip = build,.eggs,.tox\n\n[codespell]\nskip = ./.git,./.github,./build,./dist,./docs/build,.*egg-info.*,*.csv,*.tsv\nignore-words-list = als,coo,nd,unparseable,compiletime\n\n[bumpversion:file:implicit/__init__.py]\n\n[bumpversion:file:setup.py]\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.68359375,
          "content": "import io\nimport os.path\n\nfrom setuptools import find_packages\nfrom skbuild import setup\n\n\ndef read(file_name):\n    \"\"\"Read a text file and return the content as a string.\"\"\"\n    file_path = os.path.join(os.path.dirname(__file__), file_name)\n    with io.open(file_path, encoding=\"utf-8\") as f:\n        return f.read()\n\n\ndef exclude_non_implicit_cmake_files(cmake_manifest):\n    # we seem to be picking up a bunch of unrelated files from thrust/spdlog/rmm\n    # filter the cmake manifest down to things from this package only\n    return [f for f in cmake_manifest if \"implicit\" in f]\n\n\nsetup(\n    name=\"implicit\",\n    version=\"0.7.2\",\n    description=\"Collaborative Filtering for Implicit Feedback Datasets\",\n    long_description=read(\"README.md\"),\n    long_description_content_type=\"text/markdown\",\n    url=\"http://github.com/benfred/implicit/\",\n    author=\"Ben Frederickson\",\n    author_email=\"ben@benfrederickson.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 4 - Beta\",\n        \"Natural Language :: English\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Cython\",\n        \"Operating System :: OS Independent\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    keywords=(\n        \"Matrix Factorization, Implicit Alternating Least Squares, \"\n        \"Collaborative Filtering, Recommender Systems\"\n    ),\n    packages=find_packages(),\n    install_requires=[\"numpy>=1.17.0\", \"scipy>=0.16\", \"tqdm>=4.27\", \"threadpoolctl\"],\n    cmake_process_manifest_hook=exclude_non_implicit_cmake_files,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.3212890625,
          "content": "[tox]\nenvlist = py27, py35, style\n\n[testenv]\ncommands = {envpython} setup.py test\ndeps =\n    -rrequirements.txt\n    annoy\n\n[testenv:style]\ndeps =\n    -rrequirements.txt\n    flake8\n    isort\n    cpplint\n\ncommands =\n    flake8\n    isort -c\n    cpplint --linelength 100 implicit/nearest_neighbours.h\n\n[flake8]\nmax-line-length = 100\n"
        }
      ]
    }
  ]
}