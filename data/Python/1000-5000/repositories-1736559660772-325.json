{
  "metadata": {
    "timestamp": 1736559660772,
    "page": 325,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jeffkaufman/icdiff",
      "stars": 4211,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "/venv/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2099609375,
          "content": "language: python\nsudo: required\ndist: xenial\npython:\n  - \"3.4\"\n  - \"3.5\"\n  - \"3.6\"\n  - \"3.7\"\n  - \"3.8\"\n  - \"3.9\"\n  - \"nightly\"\nscript:\n  - pip install -r requirements-dev.txt\n  - ./test.sh python\ngit:\n  depth: false"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 3.2275390625,
          "content": "2.0.7\n\tAdd --show-no-spaces #173\n\n2.0.6\n\tFix process exit code for non-file inputs #205\n\tMake fullwidth characters take two columns #202\n\tAdd -x/--exclude optin to to exclude files matching patterns #199\n\n2.0.5\n\tSet process exit code to indicate differences #195\n\tSupport -P/--permissions option #197\n\n2.0.4\n\tInclude LICENSE in package\n\n2.0.3\n\tAttempts to publisher 2.0.1 and 2.0.2 to pypi gave broken packages\n\n2.0.1\n\tAdd  -t/--truncate option #184\n\n2.0.0\n\tDrop support for Python 2\n\tClearer error on unknown encodings #145\n\tStop printing an error on closed pipes #156\n\tFix displayed filed names with git #159\n\tFix testcase that assumed a git repo #166\n\tImplement --report-identical-files #168\n\tImproved handling of very long lines #180\n\n1.9.4\n\tAllow {path} and {basename} in --label #139\n\tProperly implement git difftool protocol #140\n\n1.9.3\n\tProperly set the version number\n\n1.9.2\n\tAdd --exclude-lines (-E) which can exclude comments\n\tAdd --color-map so you can choose which colors to use for what #121 #117\n\tAllow highlighted characters to be bold #122\n\tSupport configuring git-icdiff with gitconfig\n\tDon't choke on bad terminal sizes #113\n\tPrint proper error messages instead of raising exceptions\n\tAllow the line numbers to be colorized\n\tAdd a LICENSE file\n\n1.9.1\n\tHandle files with CR characters better and add --strip-trailing-cr\n\n1.9.0\n\tFix setup.py by symlinking icdiff to icdiff.py\n\n1.8.2\n\tAdd short flags for --highlight (-H), --line-numbers (-N), and --whole-file (-W).\n\tFix use with bash process substitution and other special files\n\n1.8.1\n\tUpdated remaining copy of unicode test file (b/1)\n\n1.8.0\n\tUpdated unicode test file (input-3)\n\tAllow testing installed version\n\tAllow importing as a module\n\tMinor deduplication tweak to git-icdiff\n\tAdd pip instructions to readme\n\tAllow using --tabsize\n\tAllow non-recursive directory diffing\n\n1.7.6\n\tFixed copyright.\n\n1.7.3\n\tFix git-icdiff to handle filenames with spaces as arguments.\n\n1.7.2\n\tDon't stop diffing recursively when encountering a binary file.\n\n1.7.1\n\tDon't treat files with identical (mode, size, mtime) as equal.\n\n1.7.0\n\tAdd tests\n\n1.6.4\n\tUnbreak --recursive again\n\n1.6.3\n\tStop setting LESS_IS_MORE with git-icdiff, fixing #33.\n\n1.6.2\n\tAdd support for setting the output encoding and default to utf8\n\n1.6.1\n\tUnbreak --recursive\n\n1.6.0\n\tAdd support for setting the encoding, and handle fullwidth chars\n\tin python2\n\n1.5.3\n\tSupport use as an svn difftool.\n\tSupport -U and -L, and allow but ignore -u.\n\n1.5.2\n\tVarious pager improvements in git-icdiff.\n\n1.5.1\n\tMake --highlight and --no-bold play nice.\n\n1.5.0\n\tPass arguments through to icdiff when using git-icdiff.\n\n1.4.0\n\tUse less with \"git icdiff\" by default.\n\n1.3.2\n\tFix linewrapping with unicode.\n\n1.3.1\n\t1.3.0 was completely borked.\n\n1.3.0\n\tUse setup.py to support standard python installation.\n\n1.2.2\n\tStart printing output as soon as its ready instead of waiting for\n\tthe whole file to complete.\n\n1.2.1\n\tSpace fullwidth characters properly when treating input as unicode.\n\n1.2.0\n\tAdd --recursive to support diffing directory trees.\n\n1.1.2\n\tFlush stdout when done.\n\n1.1.1\n\tDon't print stack traces on Ctrl+C or when piping into something\n\tthat quits.\n\n1.1.0\n\tAdd --no-bold option useful with the solarized colorscheme and for\n\tpeople who just don't like bold.\n\n1.0.0\n\tFirst Release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 12.4638671875,
          "content": "A. HISTORY OF THE SOFTWARE\n==========================\n\nPython was created in the early 1990s by Guido van Rossum at Stichting\nMathematisch Centrum (CWI, see http://www.cwi.nl) in the Netherlands\nas a successor of a language called ABC.  Guido remains Python's\nprincipal author, although it includes many contributions from others.\n\nIn 1995, Guido continued his work on Python at the Corporation for\nNational Research Initiatives (CNRI, see http://www.cnri.reston.va.us)\nin Reston, Virginia where he released several versions of the\nsoftware.\n\nIn May 2000, Guido and the Python core development team moved to\nBeOpen.com to form the BeOpen PythonLabs team.  In October of the same\nyear, the PythonLabs team moved to Digital Creations, which became\nZope Corporation.  In 2001, the Python Software Foundation (PSF, see\nhttps://www.python.org/psf/) was formed, a non-profit organization\ncreated specifically to own Python-related Intellectual Property.\nZope Corporation was a sponsoring member of the PSF.\n\nAll Python releases are Open Source (see http://www.opensource.org for\nthe Open Source Definition).  Historically, most, but not all, Python\nreleases have also been GPL-compatible; the table below summarizes\nthe various releases.\n\n    Release         Derived     Year        Owner       GPL-\n                    from                                compatible? (1)\n\n    0.9.0 thru 1.2              1991-1995   CWI         yes\n    1.3 thru 1.5.2  1.2         1995-1999   CNRI        yes\n    1.6             1.5.2       2000        CNRI        no\n    2.0             1.6         2000        BeOpen.com  no\n    1.6.1           1.6         2001        CNRI        yes (2)\n    2.1             2.0+1.6.1   2001        PSF         no\n    2.0.1           2.0+1.6.1   2001        PSF         yes\n    2.1.1           2.1+2.0.1   2001        PSF         yes\n    2.1.2           2.1.1       2002        PSF         yes\n    2.1.3           2.1.2       2002        PSF         yes\n    2.2 and above   2.1.1       2001-now    PSF         yes\n\nFootnotes:\n\n(1) GPL-compatible doesn't mean that we're distributing Python under\n    the GPL.  All Python licenses, unlike the GPL, let you distribute\n    a modified version without making your changes open source.  The\n    GPL-compatible licenses make it possible to combine Python with\n    other software that is released under the GPL; the others don't.\n\n(2) According to Richard Stallman, 1.6.1 is not GPL-compatible,\n    because its license has a choice of law clause.  According to\n    CNRI, however, Stallman's lawyer has told CNRI's lawyer that 1.6.1\n    is \"not incompatible\" with the GPL.\n\nThanks to the many outside volunteers who have worked under Guido's\ndirection to make these releases possible.\n\n\nB. TERMS AND CONDITIONS FOR ACCESSING OR OTHERWISE USING PYTHON\n===============================================================\n\nPYTHON SOFTWARE FOUNDATION LICENSE VERSION 2\n--------------------------------------------\n\n1. This LICENSE AGREEMENT is between the Python Software Foundation\n(\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using this software (\"Python\") in source or binary form and\nits associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative version,\nprovided, however, that PSF's License Agreement and PSF's notice of copyright,\ni.e., \"Copyright (c) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018 Python Software Foundation; All\nRights Reserved\" are retained in Python alone or in any derivative version\nprepared by Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python.\n\n4. PSF is making Python available to Licensee on an \"AS IS\"\nbasis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any\nrelationship of agency, partnership, or joint venture between PSF and\nLicensee.  This License Agreement does not grant permission to use PSF\ntrademarks or trade name in a trademark sense to endorse or promote\nproducts or services of Licensee, or any third party.\n\n8. By copying, installing or otherwise using Python, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\n-------------------------------------------\n\nBEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1\n\n1. This LICENSE AGREEMENT is between BeOpen.com (\"BeOpen\"), having an\noffice at 160 Saratoga Avenue, Santa Clara, CA 95051, and the\nIndividual or Organization (\"Licensee\") accessing and otherwise using\nthis software in source or binary form and its associated\ndocumentation (\"the Software\").\n\n2. Subject to the terms and conditions of this BeOpen Python License\nAgreement, BeOpen hereby grants Licensee a non-exclusive,\nroyalty-free, world-wide license to reproduce, analyze, test, perform\nand/or display publicly, prepare derivative works, distribute, and\notherwise use the Software alone or in any derivative version,\nprovided, however, that the BeOpen Python License is retained in the\nSoftware, alone or in any derivative version prepared by Licensee.\n\n3. BeOpen is making the Software available to Licensee on an \"AS IS\"\nbasis.  BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF THE SOFTWARE WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE\nSOFTWARE FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS\nAS A RESULT OF USING, MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY\nDERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n5. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n6. This License Agreement shall be governed by and interpreted in all\nrespects by the law of the State of California, excluding conflict of\nlaw provisions.  Nothing in this License Agreement shall be deemed to\ncreate any relationship of agency, partnership, or joint venture\nbetween BeOpen and Licensee.  This License Agreement does not grant\npermission to use BeOpen trademarks or trade names in a trademark\nsense to endorse or promote products or services of Licensee, or any\nthird party.  As an exception, the \"BeOpen Python\" logos available at\nhttp://www.pythonlabs.com/logos.html may be used according to the\npermissions granted on that web page.\n\n7. By copying, installing or otherwise using the software, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\n\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\n---------------------------------------\n\n1. This LICENSE AGREEMENT is between the Corporation for National\nResearch Initiatives, having an office at 1895 Preston White Drive,\nReston, VA 20191 (\"CNRI\"), and the Individual or Organization\n(\"Licensee\") accessing and otherwise using Python 1.6.1 software in\nsource or binary form and its associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, CNRI\nhereby grants Licensee a nonexclusive, royalty-free, world-wide\nlicense to reproduce, analyze, test, perform and/or display publicly,\nprepare derivative works, distribute, and otherwise use Python 1.6.1\nalone or in any derivative version, provided, however, that CNRI's\nLicense Agreement and CNRI's notice of copyright, i.e., \"Copyright (c)\n1995-2001 Corporation for National Research Initiatives; All Rights\nReserved\" are retained in Python 1.6.1 alone or in any derivative\nversion prepared by Licensee.  Alternately, in lieu of CNRI's License\nAgreement, Licensee may substitute the following text (omitting the\nquotes): \"Python 1.6.1 is made available subject to the terms and\nconditions in CNRI's License Agreement.  This Agreement together with\nPython 1.6.1 may be located on the Internet using the following\nunique, persistent identifier (known as a handle): 1895.22/1013.  This\nAgreement may also be obtained from a proxy server on the Internet\nusing the following URL: http://hdl.handle.net/1895.22/1013\".\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python 1.6.1 or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python 1.6.1.\n\n4. CNRI is making Python 1.6.1 available to Licensee on an \"AS IS\"\nbasis.  CNRI MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, CNRI MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 1.6.1 WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\n1.6.1 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. This License Agreement shall be governed by the federal\nintellectual property law of the United States, including without\nlimitation the federal copyright law, and, to the extent such\nU.S. federal law does not apply, by the law of the Commonwealth of\nVirginia, excluding Virginia's conflict of law provisions.\nNotwithstanding the foregoing, with regard to derivative works based\non Python 1.6.1 that incorporate non-separable material that was\npreviously distributed under the GNU General Public License (GPL), the\nlaw of the Commonwealth of Virginia shall govern this License\nAgreement only as to issues arising under or with respect to\nParagraphs 4, 5, and 7 of this License Agreement.  Nothing in this\nLicense Agreement shall be deemed to create any relationship of\nagency, partnership, or joint venture between CNRI and Licensee.  This\nLicense Agreement does not grant permission to use CNRI trademarks or\ntrade name in a trademark sense to endorse or promote products or\nservices of Licensee, or any third party.\n\n8. By clicking on the \"ACCEPT\" button where indicated, or by copying,\ninstalling or otherwise using Python 1.6.1, Licensee agrees to be\nbound by the terms and conditions of this License Agreement.\n\n        ACCEPT\n\n\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\n--------------------------------------------------\n\nCopyright (c) 1991 - 1995, Stichting Mathematisch Centrum Amsterdam,\nThe Netherlands.  All rights reserved.\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Stichting Mathematisch\nCentrum or CWI not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\n\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.033203125,
          "content": "include README.md\ninclude LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6435546875,
          "content": "# Icdiff\n\nImproved colored diff\n\n![screenshot](https://www.jefftk.com/icdiff-css-demo.png)\n\n## Installation\n\nDownload the [latest](https://github.com/jeffkaufman/icdiff/tags) `icdiff` and put it on your PATH.\n\nAlternatively, install with packaging tools:\n\n```\n# pip\npip install icdiff\n\n# apt\nsudo apt install icdiff\n\n# homebrew\nbrew install icdiff\n\n# aur\nyay -S icdiff\n\n# nix\nnix-env -i icdiff\n```\n\n## Usage\n\n```sh\nicdiff [options] left_file right_file\n```\n\nShow differences between files in a two column view.\n\n### Options\n\n```\n  --version             show program's version number and exit\n  -h, --help            show this help message and exit\n  --cols=COLS           specify the width of the screen. Autodetection is Unix\n                        only\n  --encoding=ENCODING   specify the file encoding; defaults to utf8\n  -E MATCHER, --exclude-lines=MATCHER\n                        Do not diff lines that match this regex. Not\n                        compatible with the 'line-numbers' option\n  --head=HEAD           consider only the first N lines of each file\n  -H, --highlight       color by changing the background color instead of the\n                        foreground color.  Very fast, ugly, displays all\n                        changes\n  -L LABELS, --label=LABELS\n                        override file labels with arbitrary tags. Use twice,\n                        one for each file\n  -N, --line-numbers    generate output with line numbers. Not compatible with\n                        the 'exclude-lines' option.\n  --no-bold             use non-bold colors; recommended for solarized\n  --no-headers          don't label the left and right sides with their file\n                        names\n  --output-encoding=OUTPUT_ENCODING\n                        specify the output encoding; defaults to utf8\n  -r, --recursive       recursively compare subdirectories\n  -s, --report-identical-files\n                        report when two files are the same\n  --show-all-spaces     color all non-matching whitespace including that which\n                        is not needed for drawing the eye to changes.  Slow,\n                        ugly, displays all changes\n  --tabsize=TABSIZE     tab stop spacing\n  -t, --truncate        truncate long lines instead of wrapping them\n  -u, --patch           generate patch. This is always true, and only exists\n                        for compatibility\n  -U NUM, --unified=NUM, --numlines=NUM\n                        how many lines of context to print; can't be combined\n                        with --whole-file\n  -W, --whole-file      show the whole file instead of just changed lines and\n                        context\n  --strip-trailing-cr   strip any trailing carriage return at the end of an\n                        input line\n  --color-map=COLOR_MAP\n                        choose which colors are used for which items. Default\n                        is --color-map='add:green_bold,change:yellow_bold,desc\n                        ription:blue,meta:magenta,separator:blue,subtract:red_\n                        bold'.  You don't have to override all of them:\n                        '--color-map=separator:white,description:cyan\n```\n\n## Using with Git\n\nTo see what it looks like, try:\n\n```sh\ngit difftool --extcmd icdiff\n```\n\nTo install this as a tool you can use with Git, copy\n`git-icdiff` into your PATH and run:\n\n```sh\ngit icdiff\n```\n\nYou can configure `git-icdiff` in Git's config:\n\n```\ngit config --global icdiff.options '--highlight --line-numbers'\n```\n\n## Using with subversion\n\nTo try it out, run:\n\n```sh\nsvn diff --diff-cmd icdiff\n```\n\n## Using with Mercurial\n\nAdd the following to your `~/.hgrc`:\n\n```sh\n[extensions]\nextdiff=\n\n[extdiff]\ncmd.icdiff=icdiff\nopts.icdiff=--recursive --line-numbers\n```\n\nOr check more [in-depth setup instructions](https://ianobermiller.com/blog/2016/07/14/side-by-side-diffs-for-mercurial-hg-icdiff-revisited/).\n\n## Setting up a dev environment\n\nCreate a virtualenv and install the dev dependencies.\nThis is not needed for normal usage.\n\n```sh\nvirtualenv venv\nsource venv/bin/activate\npip install -r requirements-dev.txt\n```\n\n## Running tests\n\n```sh\n./test.sh python3\n```\n\n## Making a release\n\n- Update ChangeLog with all the changes since the last release\n- Update `__version__` in `icdiff`\n- Run tests, make sure they pass\n- `git commit -a -m \"release ${version}\"`\n- `git push`\n- `git tag release-${version}`\n- `git push origin release-${version}`\n- A GitHub Action should be triggered due to the release tag being pushed, and will upload to PyPI.\n\n## License\n\nThis file is derived from `difflib.HtmlDiff` which is under [license](https://www.python.org/download/releases/2.6.2/license/).\nI release my changes here under the same license. This is GPL compatible.\n"
        },
        {
          "name": "git-icdiff",
          "type": "blob",
          "size": 0.455078125,
          "content": "#!/bin/sh\nICDIFF_OPTIONS=$(git config --get icdiff.options)\nICDIFF_OPTIONS=\"${ICDIFF_OPTIONS} --is-git-diff\"\nGITPAGER=$(git config --get icdiff.pager)\n\nif [ -z \"$GITPAGER\" ]; then\n  GITPAGER=$(git config --get core.pager)\nfi\n\nif [ -z \"$GITPAGER\" ]; then\n  GITPAGER=\"${PAGER:-less}\"\nfi\n\nif [ \"${GITPAGER%% *}\" = \"more\" ] || [ \"${GITPAGER%% *}\" = \"less\" ]; then\n  GITPAGER=\"$GITPAGER -R\"\nfi\n\ngit difftool --no-prompt --extcmd=\"icdiff $ICDIFF_OPTIONS\" \"$@\" | $GITPAGER\n"
        },
        {
          "name": "icdiff",
          "type": "blob",
          "size": 31.287109375,
          "content": "#!/usr/bin/env python3\n\n\"\"\" icdiff.py\n\nAuthor: Jeff Kaufman, derived from difflib.HtmlDiff\n\nLicense: This code is usable under the same open terms as the rest of\n         python.  See: http://www.python.org/psf/license/\n\nCopyright (c) 2001, 2002, 2003, 2004, 2005, 2006 Python Software Foundation;\nAll Rights Reserved\n\nBased on Python's difflib.HtmlDiff,\nwith changes to provide console output instead of html output.  \"\"\"\n\nimport os\nimport stat\nimport sys\nimport errno\nimport difflib\nfrom optparse import Option, OptionParser\nimport re\nimport filecmp\nimport unicodedata\nimport codecs\nimport fnmatch\n\n__version__ = \"2.0.7\"\n\n# Exit code constants\nEXIT_CODE_SUCCESS = 0\nEXIT_CODE_DIFF = 1\nEXIT_CODE_ERROR = 2\n\ncolor_codes = {\n    \"black\": \"\\033[0;30m\",\n    \"red\": \"\\033[0;31m\",\n    \"green\": \"\\033[0;32m\",\n    \"yellow\": \"\\033[0;33m\",\n    \"blue\": \"\\033[0;34m\",\n    \"magenta\": \"\\033[0;35m\",\n    \"cyan\": \"\\033[0;36m\",\n    \"white\": \"\\033[0;37m\",\n    \"none\": \"\\033[m\",\n    \"black_bold\": \"\\033[1;30m\",\n    \"red_bold\": \"\\033[1;31m\",\n    \"green_bold\": \"\\033[1;32m\",\n    \"yellow_bold\": \"\\033[1;33m\",\n    \"blue_bold\": \"\\033[1;34m\",\n    \"magenta_bold\": \"\\033[1;35m\",\n    \"cyan_bold\": \"\\033[1;36m\",\n    \"white_bold\": \"\\033[1;37m\",\n}\n\n\ncolor_mapping = {\n    \"add\": \"green_bold\",\n    \"subtract\": \"red_bold\",\n    \"change\": \"yellow_bold\",\n    \"separator\": \"blue\",\n    \"description\": \"blue\",\n    \"permissions\": \"yellow\",\n    \"meta\": \"magenta\",\n    \"line-numbers\": \"white\",\n}\n\n\nclass ConsoleDiff(object):\n    \"\"\"Console colored side by side comparison with change highlights.\n\n    Based on difflib.HtmlDiff\n\n    This class can be used to create a text-mode table showing a side\n\n    by side, line by line comparison of text with inter-line and\n    intra-line change highlights in ansi color escape sequences as\n    intra-line change highlights in ansi color escape sequences as\n    read by xterm.  The table can be generated in either full or\n    contextual difference mode.\n\n    To generate the table, call make_table.\n\n    Usage is the almost the same as HtmlDiff except only make_table is\n    implemented and the file can be invoked on the command line.\n    Run::\n\n      python icdiff.py --help\n\n    for command line usage information.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        tabsize=8,\n        wrapcolumn=None,\n        linejunk=None,\n        charjunk=difflib.IS_CHARACTER_JUNK,\n        cols=80,\n        line_numbers=False,\n        show_all_spaces=False,\n        show_no_spaces=False,\n        highlight=False,\n        truncate=False,\n        strip_trailing_cr=False,\n    ):\n        \"\"\"ConsoleDiff instance initializer\n\n        Arguments:\n        tabsize -- tab stop spacing, defaults to 8.\n        wrapcolumn -- column number where lines are broken and wrapped,\n            defaults to None where lines are not wrapped.\n        linejunk, charjunk -- keyword arguments passed into ndiff() (used by\n            ConsoleDiff() to generate the side by side differences).  See\n            ndiff() documentation for argument default values and descriptions.\n        \"\"\"\n\n        self._tabsize = tabsize\n        self.line_numbers = line_numbers\n        self.cols = cols\n        self.show_all_spaces = show_all_spaces\n        self.show_no_spaces = show_no_spaces\n        self.highlight = highlight\n        self.strip_trailing_cr = strip_trailing_cr\n        self.truncate = truncate\n\n        if wrapcolumn is None:\n            if not line_numbers:\n                wrapcolumn = self.cols // 2 - 2\n            else:\n                wrapcolumn = self.cols // 2 - 10\n\n        self._wrapcolumn = wrapcolumn\n        self._linejunk = linejunk\n        self._charjunk = charjunk\n\n    def _tab_newline_replace(self, fromlines, tolines):\n        \"\"\"Returns from/to line lists with tabs expanded and newlines removed.\n\n        Instead of tab characters being replaced by the number of spaces\n        needed to fill in to the next tab stop, this function will fill\n        the space with tab characters.  This is done so that the difference\n        algorithms can identify changes in a file when tabs are replaced by\n        spaces and vice versa.  At the end of the table generation, the tab\n        characters will be replaced with a space.\n        \"\"\"\n\n        def expand_tabs(line):\n            # hide real spaces\n            line = line.replace(\" \", \"\\0\")\n            # expand tabs into spaces\n            line = line.expandtabs(self._tabsize)\n            # replace spaces from expanded tabs back into tab characters\n            # (we'll replace them with markup after we do differencing)\n            line = line.replace(\" \", \"\\t\")\n            return line.replace(\"\\0\", \" \").rstrip(\"\\n\")\n\n        fromlines = [expand_tabs(line) for line in fromlines]\n        tolines = [expand_tabs(line) for line in tolines]\n        return fromlines, tolines\n\n    def _strip_trailing_cr(self, lines):\n        \"\"\"Remove windows return carriage\"\"\"\n        lines = [line.rstrip(\"\\r\") for line in lines]\n        return lines\n\n    def _all_cr_nl(self, lines):\n        \"\"\"Whether a file is entirely \\r\\n line endings\"\"\"\n        return all(line.endswith(\"\\r\") for line in lines)\n\n    def _display_len(self, s):\n        # Handle wide characters like Chinese.\n        def width(c):\n            if isinstance(c, type(\"\")) and unicodedata.east_asian_width(c) in [\n                \"F\",\n                \"W\",\n            ]:\n                return 2\n            elif c == \"\\r\":\n                return 2\n            return 1\n\n        return sum(width(c) for c in s)\n\n    def _split_line(self, data_list, line_num, text):\n        \"\"\"Builds list of text lines by splitting text lines at wrap point\n\n        This function will determine if the input text line needs to be\n        wrapped (split) into separate lines.  If so, the first wrap point\n        will be determined and the first line appended to the output\n        text line list.  This function is used recursively to handle\n        the second part of the split line to further split it.\n        \"\"\"\n\n        while True:\n            # if blank line or context separator, just add it to the output\n            # list\n            if not line_num:\n                data_list.append((line_num, text))\n                return\n\n            # if line text doesn't need wrapping, just add it to the output\n            # list\n            if (\n                self._display_len(text) - (text.count(\"\\0\") * 3)\n                <= self._wrapcolumn\n            ):\n                data_list.append((line_num, text))\n                return\n\n            # scan text looking for the wrap point, keeping track if the wrap\n            # point is inside markers\n            i = 0\n            n = 0\n            mark = \"\"\n            while n < self._wrapcolumn and i < len(text):\n                if text[i] == \"\\0\":\n                    i += 1\n                    mark = text[i]\n                    i += 1\n                elif text[i] == \"\\1\":\n                    i += 1\n                    mark = \"\"\n                else:\n                    n += self._display_len(text[i])\n                    i += 1\n\n            # wrap point is inside text, break it up into separate lines\n            line1 = text[:i]\n            line2 = text[i:]\n\n            # if wrap point is inside markers, place end marker at end of first\n            # line and start marker at beginning of second line because each\n            # line will have its own table tag markup around it.\n            if mark:\n                line1 = line1 + \"\\1\"\n                line2 = \"\\0\" + mark + line2\n\n            # tack on first line onto the output list\n            data_list.append((line_num, line1))\n\n            # use this routine again to wrap the remaining text\n            # unless truncate is set\n            if self.truncate:\n                return\n            line_num = \">\"\n            text = line2\n\n    def _line_wrapper(self, diffs):\n        \"\"\"Returns iterator that splits (wraps) mdiff text lines\"\"\"\n\n        # pull from/to data and flags from mdiff iterator\n        for fromdata, todata, flag in diffs:\n            # check for context separators and pass them through\n            if flag is None:\n                yield fromdata, todata, flag\n                continue\n            (fromline, fromtext), (toline, totext) = fromdata, todata\n            # for each from/to line split it at the wrap column to form\n            # list of text lines.\n            fromlist, tolist = [], []\n            self._split_line(fromlist, fromline, fromtext)\n            self._split_line(tolist, toline, totext)\n            # yield from/to line in pairs inserting blank lines as\n            # necessary when one side has more wrapped lines\n            while fromlist or tolist:\n                if fromlist:\n                    fromdata = fromlist.pop(0)\n                else:\n                    fromdata = (\"\", \" \")\n                if tolist:\n                    todata = tolist.pop(0)\n                else:\n                    todata = (\"\", \" \")\n                yield fromdata, todata, flag\n\n    def _collect_lines(self, diffs):\n        \"\"\"Collects mdiff output into separate lists\n\n        Before storing the mdiff from/to data into a list, it is converted\n        into a single line of text with console markup.\n        \"\"\"\n\n        # pull from/to data and flags from mdiff style iterator\n        for fromdata, todata, flag in diffs:\n            if (fromdata, todata, flag) == (None, None, None):\n                yield None\n            else:\n                yield (\n                    self._format_line(*fromdata),\n                    self._format_line(*todata),\n                )\n\n    def _format_line(self, linenum, text):\n        text = text.rstrip()\n        if not self.line_numbers:\n            return text\n        return self._add_line_numbers(linenum, text)\n\n    def _add_line_numbers(self, linenum, text):\n        try:\n            lid = \"%d\" % linenum\n        except TypeError:\n            # handle blank lines where linenum is '>' or ''\n            lid = \"\"\n            return text\n        return \"%s %s\" % (\n            self._rpad(simple_colorize(str(lid), \"line-numbers\"), 8),\n            text,\n        )\n\n    def _real_len(self, s):\n        s_len = 0\n        in_esc = False\n        prev = \" \"\n        for c in replace_all(\n            {\"\\0+\": \"\", \"\\0-\": \"\", \"\\0^\": \"\", \"\\1\": \"\", \"\\t\": \" \"}, s\n        ):\n            if in_esc:\n                if c == \"m\":\n                    in_esc = False\n            else:\n                if c == \"[\" and prev == \"\\033\":\n                    in_esc = True\n                    s_len -= 1  # we counted prev when we shouldn't have\n                else:\n                    s_len += self._display_len(c)\n            prev = c\n\n        return s_len\n\n    def _rpad(self, s, field_width):\n        return self._pad(s, field_width) + s\n\n    def _pad(self, s, field_width):\n        return \" \" * (field_width - self._real_len(s))\n\n    def _lpad(self, s, field_width):\n        return s + self._pad(s, field_width)\n\n    def make_table(\n        self,\n        fromlines,\n        tolines,\n        fromdesc=\"\",\n        todesc=\"\",\n        fromperms=None,\n        toperms=None,\n        context=False,\n        numlines=5,\n    ):\n        \"\"\"Generates table of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of \"from\" lines\n        tolines -- list of \"to\" lines\n        fromdesc -- \"from\" file column header string\n        todesc -- \"to\" file column header string\n        fromperms -- \"from\" file permissions\n        toperms -- \"to\" file permissions\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the \"next\" link anchors before the next change (so click of\n            \"next\" link jumps to just before the change).\n        \"\"\"\n        if context:\n            context_lines = numlines\n        else:\n            context_lines = None\n\n        # change tabs to spaces before it gets more difficult after we insert\n        # markup\n        fromlines, tolines = self._tab_newline_replace(fromlines, tolines)\n\n        if self.strip_trailing_cr or (\n            self._all_cr_nl(fromlines) and self._all_cr_nl(tolines)\n        ):\n            fromlines = self._strip_trailing_cr(fromlines)\n            tolines = self._strip_trailing_cr(tolines)\n\n        # create diffs iterator which generates side by side from/to data\n        diffs = difflib._mdiff(\n            fromlines,\n            tolines,\n            context_lines,\n            linejunk=self._linejunk,\n            charjunk=self._charjunk,\n        )\n\n        # set up iterator to wrap lines that exceed desired width\n        if self._wrapcolumn:\n            diffs = self._line_wrapper(diffs)\n        diffs = self._collect_lines(diffs)\n\n        for left, right in self._generate_table(\n            fromdesc, todesc, fromperms, toperms, diffs\n        ):\n            yield self.colorize(\n                \"%s %s\"\n                % (\n                    self._lpad(left, self.cols // 2 - 1),\n                    self._lpad(right, self.cols // 2 - 1),\n                )\n            )\n\n    def _generate_table(self, fromdesc, todesc, fromperms, toperms, diffs):\n        if fromdesc or todesc:\n            yield (\n                simple_colorize(fromdesc, \"description\"),\n                simple_colorize(todesc, \"description\"),\n            )\n\n        if fromperms != toperms:\n            yield (\n                simple_colorize(\n                    f\"{stat.filemode(fromperms)} ({fromperms:o})\",\n                    \"permissions\",\n                ),\n                simple_colorize(\n                    f\"{stat.filemode(toperms)} ({toperms:o})\", \"permissions\"\n                ),\n            )\n\n        for i, line in enumerate(diffs):\n            if line is None:\n                # mdiff yields None on separator lines; skip the bogus ones\n                # generated for the first line\n                if i > 0:\n                    yield (\n                        simple_colorize(\"---\", \"separator\"),\n                        simple_colorize(\"---\", \"separator\"),\n                    )\n            else:\n                yield line\n\n    def colorize(self, s):\n        def background(color):\n            return replace_all(\n                {\"\\033[1;\": \"\\033[7;1;\", \"\\033[0;\": \"\\033[7;\"}, color\n            )\n\n        C_ADD = color_codes[color_mapping[\"add\"]]\n        C_SUB = color_codes[color_mapping[\"subtract\"]]\n        C_CHG = color_codes[color_mapping[\"change\"]]\n\n        if self.highlight:\n            C_ADD, C_SUB, C_CHG = (\n                background(C_ADD),\n                background(C_SUB),\n                background(C_CHG),\n            )\n\n        C_NONE = color_codes[\"none\"]\n        colors = (C_ADD, C_SUB, C_CHG, C_NONE)\n\n        s = replace_all(\n            {\n                \"\\0+\": C_ADD,\n                \"\\0-\": C_SUB,\n                \"\\0^\": C_CHG,\n                \"\\1\": C_NONE,\n                \"\\t\": \" \",\n                \"\\r\": \"\\\\r\",\n            },\n            s,\n        )\n\n        if self.highlight:\n            return s\n\n        if self.show_no_spaces:\n            # Don't show whitespace even if it's a whitespace-only line.\n            return re.sub(\n                \"\\033\\\\[[01];3([01234567])m(\\\\s+)(\\033\\\\[)\",\n                \"\\033[0;3\\\\1m\\\\2\\\\3\",\n                s,\n            )\n\n        elif not self.show_all_spaces:\n            # If there's a change consisting entirely of whitespace,\n            # don't color it.\n            return re.sub(\n                \"\\033\\\\[[01];3([01234567])m(\\\\s+)(\\033\\\\[)\",\n                \"\\033[7;3\\\\1m\\\\2\\\\3\",\n                s,\n            )\n\n        def will_see_coloredspace(i, s):\n            while i < len(s) and s[i].isspace():\n                i += 1\n            if i < len(s) and s[i] == \"\\033\":\n                return False\n            return True\n\n        n_s = []\n        in_color = False\n        seen_coloredspace = False\n        for i, c in enumerate(s):\n            if len(n_s) > 6 and n_s[-1] == \"m\":\n                ns_end = \"\".join(n_s[-7:])\n                for color in colors:\n                    if ns_end.endswith(color):\n                        if color != in_color:\n                            seen_coloredspace = False\n                        in_color = color\n                if ns_end.endswith(C_NONE):\n                    in_color = False\n\n            if (\n                c.isspace()\n                and in_color\n                and (\n                    self.show_all_spaces\n                    or not (seen_coloredspace or will_see_coloredspace(i, s))\n                )\n            ):\n                n_s.extend([C_NONE, background(in_color), c, C_NONE, in_color])\n            else:\n                if in_color:\n                    seen_coloredspace = True\n                n_s.append(c)\n\n        joined = \"\".join(n_s)\n\n        return joined\n\n\ndef raw_colorize(s, color):\n    return \"%s%s%s\" % (color_codes[color], s, color_codes[\"none\"])\n\n\ndef simple_colorize(s, category):\n    return raw_colorize(s, color_mapping[category])\n\n\ndef replace_all(replacements, string):\n    for search, replace in replacements.items():\n        string = string.replace(search, replace)\n    return string\n\n\nclass MultipleOption(Option):\n    ACTIONS = Option.ACTIONS + (\"extend\",)\n    STORE_ACTIONS = Option.STORE_ACTIONS + (\"extend\",)\n    TYPED_ACTIONS = Option.TYPED_ACTIONS + (\"extend\",)\n    ALWAYS_TYPED_ACTIONS = Option.ALWAYS_TYPED_ACTIONS + (\"extend\",)\n\n    def take_action(self, action, dest, opt, value, values, parser):\n        if action == \"extend\":\n            values.ensure_value(dest, []).append(value)\n        else:\n            Option.take_action(self, action, dest, opt, value, values, parser)\n\n\ndef create_option_parser():\n    # If you change any of these, also update README.\n    parser = OptionParser(\n        usage=\"usage: %prog [options] left_file right_file\",\n        version=\"icdiff version %s\" % __version__,\n        description=\"Show differences between files in a \" \"two column view.\",\n        option_class=MultipleOption,\n    )\n    parser.add_option(\n        \"--cols\",\n        default=None,\n        help=\"specify the width of the screen. Autodetection is \" \"Unix only\",\n    )\n    parser.add_option(\n        \"--encoding\",\n        default=\"utf-8\",\n        help=\"specify the file encoding; defaults to utf8\",\n    )\n    parser.add_option(\n        \"-E\",\n        \"--exclude-lines\",\n        action=\"store\",\n        type=\"string\",\n        dest=\"matcher\",\n        help=\"Do not diff lines that match this regex. Not \"\n        \"compatible with the 'line-numbers' option\",\n    )\n    parser.add_option(\n        \"--head\",\n        default=0,\n        help=\"consider only the first N lines of each file\",\n    )\n    parser.add_option(\n        \"-H\",\n        \"--highlight\",\n        default=False,\n        action=\"store_true\",\n        help=\"color by changing the background color instead of \"\n        \"the foreground color.  Very fast, ugly, displays all \"\n        \"changes\",\n    )\n    parser.add_option(\n        \"-L\",\n        \"--label\",\n        action=\"extend\",\n        type=\"string\",\n        dest=\"labels\",\n        help=\"override file labels with arbitrary tags. \"\n        \"Use twice, one for each file. You may include the \"\n        \"formatting strings '{path}' and '{basename}'\",\n    )\n    parser.add_option(\n        \"-N\",\n        \"--line-numbers\",\n        default=False,\n        action=\"store_true\",\n        help=\"generate output with line numbers. Not compatible \"\n        \"with the 'exclude-lines' option.\",\n    )\n    parser.add_option(\n        \"--no-bold\",\n        default=False,\n        action=\"store_true\",\n        help=\"use non-bold colors; recommended for solarized\",\n    )\n    parser.add_option(\n        \"--no-headers\",\n        default=False,\n        action=\"store_true\",\n        help=\"don't label the left and right sides \" \"with their file names\",\n    )\n    parser.add_option(\n        \"--output-encoding\",\n        default=\"utf-8\",\n        help=\"specify the output encoding; defaults to utf8\",\n    )\n    parser.add_option(\n        \"-r\",\n        \"--recursive\",\n        default=False,\n        action=\"store_true\",\n        help=\"recursively compare subdirectories\",\n    )\n    parser.add_option(\n        \"-s\",\n        \"--report-identical-files\",\n        default=False,\n        action=\"store_true\",\n        help=\"report when two files are the same\",\n    )\n    parser.add_option(\n        \"--show-all-spaces\",\n        default=False,\n        action=\"store_true\",\n        help=\"color all non-matching whitespace including \"\n        \"that which is not needed for drawing the eye to \"\n        \"changes.  Slow, ugly, displays all changes\",\n    )\n    parser.add_option(\n        \"--show-no-spaces\",\n        default=False,\n        action=\"store_true\",\n        help=\"don't color whitespace-only changes\",\n    )\n    parser.add_option(\"--tabsize\", default=8, help=\"tab stop spacing\")\n    parser.add_option(\n        \"-t\",\n        \"--truncate\",\n        default=False,\n        action=\"store_true\",\n        help=\"truncate long lines instead of wrapping them\",\n    )\n    parser.add_option(\n        \"-u\",\n        \"--patch\",\n        default=True,\n        action=\"store_true\",\n        help=\"generate patch. This is always true, \"\n        \"and only exists for compatibility\",\n    )\n    parser.add_option(\n        \"-U\",\n        \"--unified\",\n        \"--numlines\",\n        default=5,\n        metavar=\"NUM\",\n        help=\"how many lines of context to print; \"\n        \"can't be combined with --whole-file\",\n    )\n    parser.add_option(\n        \"-W\",\n        \"--whole-file\",\n        default=False,\n        action=\"store_true\",\n        help=\"show the whole file instead of just changed \"\n        \"lines and context\",\n    )\n    parser.add_option(\n        \"-P\",\n        \"--permissions\",\n        default=False,\n        action=\"store_true\",\n        help=\"compare the file permissions as well as the \"\n        \"content of the file\",\n    )\n    parser.add_option(\n        \"--strip-trailing-cr\",\n        default=False,\n        action=\"store_true\",\n        help=\"strip any trailing carriage return at the end of \"\n        \"an input line\",\n    )\n    parser.add_option(\n        \"--color-map\",\n        default=None,\n        help=\"choose which colors are used for which items. \"\n        \"Default is --color-map='\"\n        + \",\".join(\"%s:%s\" % x for x in sorted(color_mapping.items()))\n        + \"'\"\n        \".  You don't have to override all of them: \"\n        \"'--color-map=separator:white,description:cyan\",\n    )\n    parser.add_option(\n        \"--is-git-diff\",\n        default=False,\n        action=\"store_true\",\n        help=\"Show the real file name when displaying \" \"git-diff result\",\n    )\n    parser.add_option(\n        \"-x\",\n        \"--exclude\",\n        metavar=\"PAT\",\n        action=\"append\",\n        default=[],\n        help=\"exclude files that match PAT\",\n    )\n    return parser\n\n\ndef set_cols_option(options):\n    if os.name == \"nt\":\n        try:\n            import struct\n            from ctypes import windll, create_string_buffer\n\n            fh = windll.kernel32.GetStdHandle(-12)  # stderr is -12\n            csbi = create_string_buffer(22)\n            windll.kernel32.GetConsoleScreenBufferInfo(fh, csbi)\n            res = struct.unpack(\"hhhhHhhhhhh\", csbi.raw)\n            options.cols = res[7] - res[5] + 1  # right - left + 1\n            return\n\n        except Exception:\n            pass\n\n    else:\n\n        def ioctl_GWINSZ(fd):\n            try:\n                import fcntl\n                import termios\n                import struct\n\n                cr = struct.unpack(\n                    \"hh\", fcntl.ioctl(fd, termios.TIOCGWINSZ, \"1234\")\n                )\n            except Exception:\n                return None\n            return cr\n\n        cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)\n        if cr and cr[1] > 0:\n            options.cols = cr[1]\n            return\n    options.cols = 80\n\n\ndef validate_has_two_arguments(parser, args):\n    if len(args) != 2:\n        parser.print_help()\n        sys.exit(EXIT_CODE_DIFF)\n\n\ndef start():\n    diffs_found = False\n    parser = create_option_parser()\n    options, args = parser.parse_args()\n    validate_has_two_arguments(parser, args)\n    if not options.cols:\n        set_cols_option(options)\n    try:\n        diffs_found = diff(options, *args)\n    except KeyboardInterrupt:\n        pass\n    except IOError as e:\n        if e.errno == errno.EPIPE:\n            pass\n        else:\n            raise\n\n    # Close stderr to prevent printing errors when icdiff is piped to\n    # something that closes before icdiff is done writing\n    #\n    # See: https://stackoverflow.com/questions/26692284/...\n    #      ...how-to-prevent-brokenpipeerror-when-doing-a-flush-in-python\n    sys.stderr.close()\n    sys.exit(EXIT_CODE_DIFF if diffs_found else EXIT_CODE_SUCCESS)\n\n\ndef codec_print(s, options):\n    s = \"%s\\n\" % s\n    if hasattr(sys.stdout, \"buffer\"):\n        sys.stdout.buffer.write(s.encode(options.output_encoding))\n    else:\n        sys.stdout.write(s.encode(options.output_encoding))\n\n\ndef cmp_perms(options, a, b):\n    return not options.permissions or (\n        os.lstat(a).st_mode == os.lstat(b).st_mode\n    )\n\n\ndef should_be_excluded(name, pats):\n    return any(fnmatch.fnmatchcase(name, pat) for pat in pats)\n\n\ndef diff(options, a, b):\n    def print_meta(s):\n        codec_print(simple_colorize(s, \"meta\"), options)\n\n    # We start out and assume that no diffs have been found (so far)\n    diffs_found = False\n\n    # Don't use os.path.isfile; it returns False for file-like entities like\n    # bash's process substitution (/dev/fd/N).\n    is_a_file = not os.path.isdir(a)\n    is_b_file = not os.path.isdir(b)\n\n    if is_a_file and is_b_file:\n        try:\n            if not (\n                filecmp.cmp(a, b, shallow=False) and cmp_perms(options, a, b)\n            ):\n                diffs_found = diffs_found | diff_files(options, a, b)\n            elif options.report_identical_files:\n                print(\"Files %s and %s are identical.\" % (a, b))\n        except OSError as e:\n            if e.errno == errno.ENOENT:\n                print_meta(\"error: file '%s' was not found\" % e.filename)\n                sys.exit(EXIT_CODE_ERROR)\n            else:\n                raise (e)\n\n    elif not is_a_file and not is_b_file:\n        a_contents = set(os.listdir(a))\n        b_contents = set(os.listdir(b))\n\n        for child in sorted(a_contents.union(b_contents)):\n            if should_be_excluded(child, options.exclude):\n                continue\n            if child not in b_contents:\n                print_meta(\"Only in %s: %s\" % (a, child))\n            elif child not in a_contents:\n                print_meta(\"Only in %s: %s\" % (b, child))\n            elif options.recursive:\n                diffs_found = diffs_found | diff(\n                    options, os.path.join(a, child), os.path.join(b, child)\n                )\n    elif not is_a_file and is_b_file:\n        print_meta(\"File %s is a directory while %s is a file\" % (a, b))\n        diffs_found = True\n\n    elif is_a_file and not is_b_file:\n        print_meta(\"File %s is a file while %s is a directory\" % (a, b))\n        diffs_found = True\n\n    return diffs_found\n\n\ndef read_file(fname, options):\n    try:\n        with codecs.open(fname, encoding=options.encoding, mode=\"rb\") as inf:\n            return inf.readlines()\n    except UnicodeDecodeError as e:\n        codec_print(\n            \"error: file '%s' not valid with encoding '%s': <%s> at %s-%s.\"\n            % (fname, options.encoding, e.reason, e.start, e.end),\n            options,\n        )\n        raise\n    except LookupError:\n        codec_print(\n            \"error: encoding '%s' was not found.\" % (options.encoding), options\n        )\n        sys.exit(EXIT_CODE_ERROR)\n\n\ndef format_label(path, label=\"{path}\"):\n    \"\"\"Format a label using a file's path and basename.\n\n    Example:\n      For file `/foo/bar.py` and label \"Yours: {basename}\" -\n      The output is \"Yours: bar.py\"\n    \"\"\"\n    return label.format(path=path, basename=os.path.basename(path))\n\n\ndef diff_files(options, a, b):\n    diff_found = False\n    if options.is_git_diff is True:\n        # Use $BASE as label when displaying git-diff result\n        base = os.getenv(\"BASE\")\n        headers = [format_label(a, base), format_label(b, base)]\n    else:\n        if options.labels:\n            if len(options.labels) == 2:\n                headers = [\n                    format_label(a, options.labels[0]),\n                    format_label(b, options.labels[1]),\n                ]\n            else:\n                codec_print(\n                    \"error: to use arbitrary file labels, \"\n                    \"specify -L twice.\",\n                    options,\n                )\n                sys.exit(EXIT_CODE_ERROR)\n        else:\n            headers = a, b\n    if options.no_headers:\n        headers = None, None\n\n    head = int(options.head)\n\n    assert not os.path.isdir(a)\n    assert not os.path.isdir(b)\n\n    try:\n        lines_a = read_file(a, options)\n        lines_b = read_file(b, options)\n    except UnicodeDecodeError:\n        return diff_found\n\n    if head != 0:\n        lines_a = lines_a[:head]\n        lines_b = lines_b[:head]\n\n    if options.matcher:\n        lines_a = [\n            line_a\n            for line_a in lines_a\n            if not re.search(options.matcher, line_a)\n        ]\n        lines_b = [\n            line_b\n            for line_b in lines_b\n            if not re.search(options.matcher, line_b)\n        ]\n\n    # Determine if a difference has been detected\n    diff_found = lines_a != lines_b or not cmp_perms(options, a, b)\n\n    if options.no_bold:\n        for key in color_mapping:\n            color_mapping[key] = color_mapping[key].replace(\"_bold\", \"\")\n\n    if options.color_map:\n        command_for_errors = '--color-map=\"%s\"' % (options.color_map)\n        for mapping in options.color_map.split(\",\"):\n            category, color = mapping.split(\":\", 1)\n\n            if category not in color_mapping:\n                print(\n                    \"Invalid category '%s' in '%s'.  Valid categories are: %s.\"\n                    % (\n                        category,\n                        command_for_errors,\n                        \", \".join(sorted(color_mapping.keys())),\n                    )\n                )\n                sys.exit(EXIT_CODE_ERROR)\n\n            if color not in color_codes:\n                print(\n                    \"Invalid color '%s' in '%s'.  Valid colors are: %s.\"\n                    % (\n                        color,\n                        command_for_errors,\n                        \", \".join(\n                            [\n                                raw_colorize(x, x)\n                                for x in sorted(color_codes.keys())\n                            ]\n                        ),\n                    )\n                )\n                sys.exit(EXIT_CODE_ERROR)\n\n            color_mapping[category] = color\n\n    if options.permissions:\n        mode_a = os.lstat(a).st_mode\n        mode_b = os.lstat(b).st_mode\n    else:\n        mode_a = None\n        mode_b = None\n\n    cd = ConsoleDiff(\n        cols=int(options.cols),\n        show_all_spaces=options.show_all_spaces,\n        show_no_spaces=options.show_no_spaces,\n        highlight=options.highlight,\n        line_numbers=options.line_numbers,\n        tabsize=int(options.tabsize),\n        truncate=options.truncate,\n        strip_trailing_cr=options.strip_trailing_cr,\n    )\n    for line in cd.make_table(\n        lines_a,\n        lines_b,\n        headers[0],\n        headers[1],\n        mode_a,\n        mode_b,\n        context=(not options.whole_file),\n        numlines=int(options.unified),\n    ):\n        codec_print(line, options)\n        sys.stdout.flush()\n\n    return diff_found\n\n\nif __name__ == \"__main__\":\n    start()\n"
        },
        {
          "name": "icdiff.py",
          "type": "blob",
          "size": 0.005859375,
          "content": "icdiff"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.06640625,
          "content": "flake8==2.4.0\nmccabe==0.3\npep8==1.5.7\npyflakes==0.8.1\nblack==22.3.0\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.6787109375,
          "content": "from setuptools import setup\nfrom icdiff import __version__\n\nsetup(\n    name=\"icdiff\",\n    version=__version__,\n    url=\"https://www.jefftk.com/icdiff\",\n    project_urls={\n        \"Source\": \"https://github.com/jeffkaufman/icdiff\",\n    },\n    classifiers=[\n        \"License :: OSI Approved :: Python Software Foundation License\"\n    ],\n    author=\"Jeff Kaufman\",\n    author_email=\"jeff@jefftk.com\",\n    description=\"improved colored diff\",\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    scripts=['git-icdiff'],\n    py_modules=['icdiff'],\n    entry_points={\n        'console_scripts': [\n            'icdiff=icdiff:start',\n        ],\n    },\n)\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 8.1455078125,
          "content": "#!/bin/bash\n\n# Usage: ./test.sh [--regold] [test-name] python[3]\n# Example:\n#   Run all tests:\n#     ./test.sh python3\n#   Regold all tests:\n#     ./test.sh --regold python3\n#   Run one test:\n#     ./test.sh tests/gold-45-sas-h-nb.txt python3\n#   Regold one test:\n#     ./test.sh --regold tests/gold-45-sas-h-nb.txt python3\n\nif [ \"$#\" -gt 1 -a \"$1\" = \"--regold\" ]; then\n  REGOLD=true\n  shift\nelse\n  REGOLD=false\nfi\n\nTEST_NAME=all\nif [ \"$#\" -gt 1 ]; then\n  TEST_NAME=$1\n  shift\nfi\n\nif [ \"$#\" != 1 ]; then\n  echo \"Usage: '$0 [--regold] [test-name] python[3]'\"\n  exit 1\nfi\n\nPYTHON=\"$1\"\nICDIFF=\"icdiff\"\n\nif [ ! -z \"$INSTALLED\" ]; then\n  INVOCATION=\"$ICDIFF\"\nelse\n  INVOCATION=\"$PYTHON $ICDIFF\"\nfi\n\nfunction fail() {\n  echo \"FAIL\"\n  exit 1\n}\n\nfunction check_gold() {\n  local error_code\n  local expect=$1\n  local gold=tests/$2\n  shift\n  shift\n\n  if [ $TEST_NAME != \"all\" -a $TEST_NAME != $gold ]; then\n    return\n  fi\n\n  echo \"    check_gold $gold matches $@\"\n  local tmp=/tmp/icdiff.output\n  $INVOCATION \"$@\" &> $tmp\n  error_code=$?\n\n  if $REGOLD; then\n    if [ -e $gold ] && diff $tmp $gold > /dev/null; then\n      echo \"Did not need to regold $gold\"\n    else\n      cat $tmp\n      read -p \"Is this correct? y/n > \" -n 1 -r\n      echo\n      if [[ $REPLY =~ ^[Yy]$ ]]; then\n        mv $tmp $gold\n        echo \"Regolded $gold.\"\n      else\n        echo \"Did not regold $gold.\"\n      fi\n    fi\n    return\n  fi\n\n  if ! diff $gold $tmp; then\n    echo \"Got: ($tmp)\"\n    cat $tmp\n    echo \"Expected: ($gold)\"\n    cat $gold\n    fail\n  fi\n\n  if [[ $error_code != $expect ]]; then\n    echo \"Got error code:      $error_code\"\n    echo \"Expected error code: $expect\"\n    fail\n  fi\n}\n\nFIRST_TIME_CHECK_GIT_DIFF=true\nfunction check_git_diff() {\n  local gitdiff=tests/$1\n  shift\n\n  echo \"    check_gitdiff $gitdiff matches git icdiff $@\"\n  # Check when using icdiff in git\n  if $FIRST_TIME_CHECK_GIT_DIFF; then\n    FIRST_TIME_CHECK_GIT_DIFF=false\n    # Set default args when first time check git diff\n    yes | git difftool --extcmd icdiff > /dev/null\n    git config --global icdiff.options '--cols=80'\n    export PATH=\"$(pwd)\":$PATH\n  fi\n  local tmp=/tmp/git-icdiff.output\n  git icdiff $1 $2 &> $tmp\n  if ! diff $tmp $gitdiff; then\n    echo \"Got: ($tmp)\"\n    cat $tmp\n    echo \"Expected: ($gitdiff)\"\n    fail\n  fi\n}\n\ncheck_gold 1 gold-recursive.txt       --recursive tests/{a,b} --cols=80\ncheck_gold 1 gold-exclude.txt         --exclude-lines '^#|  pad' tests/input-4-cr.txt tests/input-4-partial-cr.txt --cols=80\ncheck_gold 0 gold-dir.txt             tests/{a,b} --cols=80\ncheck_gold 1 gold-12.txt              tests/input-{1,2}.txt --cols=80\ncheck_gold 1 gold-12-t.txt            tests/input-{1,2}.txt --cols=80 --truncate\ncheck_gold 0 gold-3.txt               tests/input-{3,3}.txt\ncheck_gold 1 gold-45.txt              tests/input-{4,5}.txt --cols=80\ncheck_gold 1 gold-45-95.txt           tests/input-{4,5}.txt --cols=95\ncheck_gold 1 gold-45-sas.txt          tests/input-{4,5}.txt --cols=80 --show-all-spaces\ncheck_gold 1 gold-45-h.txt            tests/input-{4,5}.txt --cols=80 --highlight\ncheck_gold 1 gold-45-nb.txt           tests/input-{4,5}.txt --cols=80 --no-bold\ncheck_gold 1 gold-45-sas-h.txt        tests/input-{4,5}.txt --cols=80 --show-all-spaces --highlight\ncheck_gold 1 gold-45-sas-h-nb.txt     tests/input-{4,5}.txt --cols=80 --show-all-spaces --highlight --no-bold\ncheck_gold 1 gold-sas.txt             tests/input-{10,11}.txt --cols=80 --show-all-spaces\ncheck_gold 1 gold-sns.txt             tests/input-{10,11}.txt --cols=80 --show-no-spaces\ncheck_gold 1 gold-show-spaces.txt     tests/input-{10,11}.txt --cols=80\ncheck_gold 1 gold-45-h-nb.txt         tests/input-{4,5}.txt --cols=80 --highlight --no-bold\ncheck_gold 1 gold-45-ln.txt           tests/input-{4,5}.txt --cols=80 --line-numbers\ncheck_gold 1 gold-45-ln-color.txt     tests/input-{4,5}.txt --cols=80 --line-numbers --color-map='line-numbers:cyan'\ncheck_gold 1 gold-45-nh.txt           tests/input-{4,5}.txt --cols=80 --no-headers\ncheck_gold 1 gold-45-h3.txt           tests/input-{4,5}.txt --cols=80 --head=3\ncheck_gold 2 gold-45-l.txt            tests/input-{4,5}.txt --cols=80 -L left\ncheck_gold 1 gold-45-lr.txt           tests/input-{4,5}.txt --cols=80 -L left -L right\ncheck_gold 1 gold-45-lbrb.txt         tests/input-{4,5}.txt --cols=80 -L \"L {basename}\" -L \"R {basename}\"\ncheck_gold 1 gold-45-pipe.txt         tests/input-4.txt <(cat tests/input-5.txt) --cols=80 --no-headers\ncheck_gold 1 gold-4dn.txt             tests/input-4.txt /dev/null --cols=80 -L left -L right\ncheck_gold 1 gold-dn5.txt             /dev/null tests/input-5.txt --cols=80 -L left -L right\ncheck_gold 1 gold-67.txt              tests/input-{6,7}.txt --cols=80\ncheck_gold 1 gold-67-wf.txt           tests/input-{6,7}.txt --cols=80 --whole-file\ncheck_gold 1 gold-67-ln.txt           tests/input-{6,7}.txt --cols=80 --line-numbers\ncheck_gold 1 gold-67-u3.txt           tests/input-{6,7}.txt --cols=80 -U 3\ncheck_gold 1 gold-tabs-default.txt    tests/input-{8,9}.txt --cols=80\ncheck_gold 1 gold-tabs-4.txt          tests/input-{8,9}.txt --cols=80 --tabsize=4\ncheck_gold 2 gold-file-not-found.txt  tests/input-4.txt nonexistent_file\ncheck_gold 1 gold-strip-cr-off.txt    tests/input-4.txt tests/input-4-cr.txt --cols=80\ncheck_gold 1 gold-strip-cr-on.txt     tests/input-4.txt tests/input-4-cr.txt --cols=80 --strip-trailing-cr\ncheck_gold 1 gold-no-cr-indent        tests/input-4-cr.txt tests/input-4-partial-cr.txt --cols=80\ncheck_gold 1 gold-hide-cr-if-dos      tests/input-4-cr.txt tests/input-5-cr.txt --cols=80\ncheck_gold 1 gold-12-subcolors.txt    tests/input-{1,2}.txt --cols=80 --color-map='change:magenta,description:cyan_bold'\ncheck_gold 2 gold-subcolors-bad-color tests/input-{1,2}.txt --cols=80 --color-map='change:mageta,description:cyan_bold'\ncheck_gold 2 gold-subcolors-bad-cat tests/input-{1,2}.txt --cols=80 --color-map='chnge:magenta,description:cyan_bold'\ncheck_gold 2 gold-subcolors-bad-fmt tests/input-{1,2}.txt --cols=80 --color-map='change:magenta:gold,description:cyan_bold'\ncheck_gold 0 gold-identical-on.txt tests/input-{1,1}.txt -s\ncheck_gold 2 gold-bad-encoding.txt tests/input-{1,2}.txt --encoding=nonexistend_encoding\ncheck_gold 0 gold-recursive-with-exclude.txt --recursive -x c tests/{a,b} --cols=80\ncheck_gold 1 gold-recursive-with-exclude2.txt --recursive -x 'excl*' tests/test-with-exclude/{a,b} --cols=80\ncheck_gold 0 gold-exit-process-sub tests/input-1.txt <(cat tests/input-1.txt) --no-headers --cols=80\n\nrm -f tests/permissions-{a,b}\ntouch tests/permissions-{a,b}\ncheck_gold 0 gold-permissions-same.txt tests/permissions-{a,b} -P --cols=80\n\nchmod 666 tests/permissions-a\nchmod 665 tests/permissions-b\ncheck_gold 1 gold-permissions-diff.txt tests/permissions-{a,b} -P --cols=80\n\necho \"some text\" >> tests/permissions-a\ncheck_gold 1 gold-permissions-diff-text.txt tests/permissions-{a,b} -P --cols=80\n\necho -e \"\\04\" >> tests/permissions-b\ncheck_gold 1 gold-permissions-diff-binary.txt tests/permissions-{a,b} -P --cols=80\nrm -f tests/permissions-{a,b}\n\nif git show 4e86205629 &> /dev/null; then\n  # We're in the repo, so test git.\n  check_git_diff gitdiff-only-newlines.txt 4e86205629~1 4e86205629\nelse\n  echo \"Not in icdiff repo; skipping git test\"\nfi\n\n# Testing pipe behavior doesn't fit well with the check_gold system\n$INVOCATION tests/input-{4,5}.txt 2>/tmp/icdiff-pipe-error-output | head -n 1\nif [ -s /tmp/icdiff-pipe-error-output ]; then\n  echo 'emitting errors on early pipe closure'\n  fail\nfi\n\nVERSION=$($INVOCATION --version | awk '{print $NF}')\nif [ \"$VERSION\" != $(head -n 1 ChangeLog) ]; then\n  echo \"Version mismatch between ChangeLog and icdiff source.\"\n  fail\nfi\n\nfunction ensure_installed() {\n  if ! command -v \"$1\" >/dev/null 2>&1; then\n    echo \"Could not find $1.\"\n    echo 'Ensure it is installed and on your $PATH.'\n    if [ -z \"$VIRTUAL_ENV\" ]; then\n      echo 'It appears you have have forgotten to activate your virtualenv.'\n    fi\n    echo 'See README.md for details on setting up your environment.'\n    fail\n  fi\n}\n\nensure_installed \"black\"\necho 'Running black formatter...'\nif ! black icdiff --quiet --line-length 79 --check; then\n  echo \"\"\n  echo 'Consider running `black icdiff --line-length 79`'\n  fail\nfi\n\nensure_installed \"flake8\"\necho 'Running flake8 linter...'\nif ! flake8 icdiff; then\n  fail\nfi\n\nif ! $REGOLD; then\n  echo PASS\nfi\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}