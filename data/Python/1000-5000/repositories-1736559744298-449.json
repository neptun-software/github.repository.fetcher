{
  "metadata": {
    "timestamp": 1736559744298,
    "page": 449,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "beancount/beancount",
      "stars": 3975,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.046875,
          "content": "((python-mode\n   (mode . ruff-format-on-save)))\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1669921875,
          "content": "etc/** export-ignore\nexperiments/** export-ignore\ntools/** export-ignore\nindex.html export-ignore\nstyle.css export-ignore\n.nginx.conf export-ignore\nMakefile export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3349609375,
          "content": "*.DS_Store\n*.a\n*.picklecache\n*.pyc\n*.so\n*.pyd\n*.swp\n*~\n.cache\n.idea\n.noseids\n.pytest_cache/*\nTAGS\nbazel-*\nbeancount.egg-info\nbeancount/parser/grammar.output\nbeancount/parser/tokens_test\nbeancount/parser/*.o\nbuild\ndist\nexamples/generated/*\nexperiments/v3/arrow/*.feather\nexperiments/v3/arrow/*.parquet\nexperiments/v3/arrow/*.arrow\n.aider*\n.env\n"
        },
        {
          "name": ".nginx.conf",
          "type": "blob",
          "size": 18.525390625,
          "content": "# Redirects in nginx config.\nlocation /beancount {\n    # Redirect for external sites.\n    location = /beancount/list                      { rewrite ^(.*)$ /beancount/mailing-list; }\n    location = /beancount/mailing-list              { return 302 https://groups.google.com/forum/#!forum/beancount; }\n\n    # Short redirect links for most of the documentation on Google Drive.\n    location = /beancount/doc/meta                  { rewrite ^(.*)$ /beancount/doc/index; }\n    location = /beancount/doc/index                 { return 302 https://docs.google.com/document/d/1RaondTJCS_IUPBHFNdT8oqFKJjVJDsfsn6JEjBG04eA/; }\n\n    location = /beancount/doc/context               { rewrite ^(.*)$ /beancount/doc/motivation; }\n    location = /beancount/doc/motivation            { return 302 https://docs.google.com/document/d/1e4Vz3wZB_8-ZcAwIFde8X5CjzKshE4-OXtVVHm4RQ8s/; }\n\n    location = /beancount/doc/comparison            { return 302 https://docs.google.com/document/d/1dW2vIjaXVJAf9hr7GlZVe3fJOkM-MtlVjvCO1ZpNLmg/; }\n\n    location = /beancount/doc/credits               { rewrite ^(.*)$ /beancount/doc/history; }\n    location = /beancount/doc/history               { return 302 https://docs.google.com/document/d/17wTH7aKnN_7-6nCxsOad6zIQfHwQgJUdI02RjzQuNi8/; }\n\n    location = /beancount/doc/double_entry          { rewrite ^(.*)$ /beancount/doc/double-entry; }\n    location = /beancount/doc/doubleentry           { rewrite ^(.*)$ /beancount/doc/double-entry; }\n    location = /beancount/doc/double                { rewrite ^(.*)$ /beancount/doc/double-entry; }\n    location = /beancount/doc/de-method             { rewrite ^(.*)$ /beancount/doc/double-entry; }\n    location = /beancount/doc/method                { rewrite ^(.*)$ /beancount/doc/double-entry; }\n    location = /beancount/doc/intro                 { rewrite ^(.*)$ /beancount/doc/double-entry; }\n    location = /beancount/doc/double-entry          { return 302 https://docs.google.com/document/d/100tGcA4blh6KSXPRGCZpUlyxaRUwFHEvnz_k9DyZFn4/; }\n\n    location = /beancount/doc/using-equity          { rewrite ^(.*)$ /beancount/doc/equity; }\n    location = /beancount/doc/equity                { return 302 https://docs.google.com/document/d/1H6C4YNPSe8GvC9Pe4Mp84q7ErPwI2AlZrFfKuNq-TG4/; }\n\n    location = /beancount/doc/install               { return 302 https://docs.google.com/document/d/1FqyrTPwiHVLyncWTf3v5TcooCu9z5JRX8Nm41lVZi0U/; }\n\n    location = /beancount/doc/getting-started       { return 302 https://docs.google.com/document/d/1P5At-z1sP8rgwYLHso5sEy3u4rMnIUDDgob9Y_BYuWE/; }\n\n    location = /beancount/doc/tools                 { return 302 https://docs.google.com/document/d/1e44jtLyVRl2H2Pj4K3WUc66otAlTOFOc90-tsrFEQdo/; }\n    location = /beancount/doc/invocation            { rewrite ^(.*)$ /beancount/doc/tools; }\n    location = /beancount/doc/run                   { rewrite ^(.*)$ /beancount/doc/tools; }\n    location = /beancount/doc/running               { rewrite ^(.*)$ /beancount/doc/tools; }\n\n    location = /beancount/doc/language              { rewrite ^(.*)$ /beancount/doc/syntax; }\n    location = /beancount/doc/language-syntax       { rewrite ^(.*)$ /beancount/doc/syntax; }\n    location = /beancount/doc/directives            { rewrite ^(.*)$ /beancount/doc/syntax; }\n    location = /beancount/doc/users-manual          { rewrite ^(.*)$ /beancount/doc/syntax; }\n    location = /beancount/doc/manual                { rewrite ^(.*)$ /beancount/doc/syntax; }\n    location = /beancount/doc/syntax                { return 302 https://docs.google.com/document/d/1wAMVrKIA2qtRGmoVDSUBJGmYZSygUaR0uOMW1GV3YE0/; }\n\n    location = /beancount/doc/options               { return 302 https://docs.google.com/document/d/1_-T_BvDtUjj9M7liZMNSkrL8pgC60TGMBlYCiV1e4ZM/; }\n\n    location = /beancount/doc/query-language        { rewrite ^(.*)$ /beancount/doc/query; }\n    location = /beancount/doc/sql                   { rewrite ^(.*)$ /beancount/doc/query; }\n    location = /beancount/doc/bql                   { rewrite ^(.*)$ /beancount/doc/query; }\n    location = /beancount/doc/query                 { return 302 https://docs.google.com/document/d/1s0GOZMcrKKCLlP29MD7kHO4L88evrwWdIO0p4EwRBE0/; }\n\n    location = /beancount/doc/examples              { rewrite ^(.*)$ /beancount/doc/cookbook; }\n    location = /beancount/doc/cookbook              { return 302 https://docs.google.com/document/d/1Tss0IEzEyAPuKSGeNsfNgb0BfiW2ZHyP5nCFBW1uWlk/; }\n\n    location = /beancount/doc/scripts               { rewrite ^(.*)$ /beancount/doc/scripting; }\n    location = /beancount/doc/plugins               { rewrite ^(.*)$ /beancount/doc/scripting; }\n    location = /beancount/doc/scripting             { return 302 https://docs.google.com/document/d/1QftxNvQPdH-MikMBHupftU6F4IsNZP5FlFh1LCbVgk8/; }\n\n    location = /beancount/doc/stock                 { rewrite ^(.*)$ /beancount/doc/trading; }\n    location = /beancount/doc/stocks                { rewrite ^(.*)$ /beancount/doc/trading; }\n    location = /beancount/doc/pnl                   { rewrite ^(.*)$ /beancount/doc/trading; }\n    location = /beancount/doc/trading               { return 302 https://docs.google.com/document/d/1WjARst_cSxNE-Lq6JnJ5CC41T3WndEsiMw4d46r2694/; }\n\n    location = /beancount/doc/exporting             { rewrite ^(.*)$ /beancount/doc/export; }\n    location = /beancount/doc/export                { return 302 https://docs.google.com/document/d/1mNyE_ONuyEkF_I2l6V_AoAU5HJgI654AOBhHsnNPPqw/; }\n\n    location = /beancount/doc/export-old            { return 302 https://docs.google.com/document/d/1eZIDRmQZxR6cmDyOJf7U3BnCm4PDMah2twxYFfKPJtM/; }\n\n    location = /beancount/doc/subaccount            { rewrite ^(.*)$ /beancount/doc/payee; }\n    location = /beancount/doc/payees                { rewrite ^(.*)$ /beancount/doc/payee; }\n    location = /beancount/doc/payee                 { return 302 https://docs.google.com/document/d/17_u_cYxeXVsCV4GmaubK_xsTQl_H9rP87E_vnZHKNb0/; }\n\n    location = /beancount/doc/inventories           { rewrite ^(.*)$ /beancount/doc/booking; }\n    location = /beancount/doc/inventory             { rewrite ^(.*)$ /beancount/doc/booking; }\n    location = /beancount/doc/how-inventories-work  { rewrite ^(.*)$ /beancount/doc/booking; }\n    location = /beancount/doc/booking               { return 302 https://docs.google.com/document/d/11a9bIoNuxpSOth3fmfuIFzlZtpTJbvw-bPaQCnezQJs/; }\n\n    location = /beancount/doc/cheat                 { rewrite ^(.*)$ /beancount/doc/cheatsheet; }\n    location = /beancount/doc/sheet                 { rewrite ^(.*)$ /beancount/doc/cheatsheet; }\n    location = /beancount/doc/reference             { rewrite ^(.*)$ /beancount/doc/cheatsheet; }\n    location = /beancount/doc/cheatsheet            { return 302 https://docs.google.com/document/d/1M4GwF6BkcXyVVvj4yXBJMX7YFXpxlxo95W6CpU3uWVc/; }\n\n    location = /beancount/doc/old-cheatsheet        { rewrite ^(.*)$ /beancount/doc/cheatsheet-old; }\n    location = /beancount/doc/cheatsheet-old        { return 302 https://furius.ca/beancount/doc/cheatsheet/beancount-cheatsheet.pdf; }\n\n    location = /beancount/doc/design                { rewrite ^(.*)$ /beancount/doc/design-doc; }\n    location = /beancount/doc/design-doc            { return 302 https://docs.google.com/document/d/1N7HDXuNWgLG2PqFS4Kkgv5LzAAtU6c97UVNT7tdTIjA/; }\n\n    location = /beancount/doc/devel                 { rewrite ^(.*)$ /beancount/doc/devel-doc; }\n    location = /beancount/doc/developer             { rewrite ^(.*)$ /beancount/doc/devel-doc; }\n    location = /beancount/doc/devel-doc             { return 302 https://docs.google.com/document/d/1l6YmKIPUsucrooofdrollO6Re2rTPJA9KigoS8OBluk/; }\n\n    location = /beancount/doc/convert               { rewrite ^(.*)$ /beancount/doc/converting; }\n    location = /beancount/doc/ledger                { rewrite ^(.*)$ /beancount/doc/converting; }\n    location = /beancount/doc/converting            { return 302 https://docs.google.com/document/d/1tkoUeSfZyEhEGdXHwYp5vBrSrNDgC4FVXhReSWsILlw/; }\n\n    location = /beancount/doc/conversions           { return 302 https://docs.google.com/document/d/1rW7zQyMiv8hKZ0993pwQiu5vTxzEOQf_Q67GvVk6zu0/; }\n\n    location = /beancount/doc/tutorial              { rewrite ^(.*)$ /beancount/doc/example; }\n    location = /beancount/doc/example               { return 302 https://docs.google.com/document/d/1G-gsmwK551lSyuHboVLW3xbLhh99JfoKIbNnZSJxteE/; }\n\n    location = /beancount/doc/custom                { rewrite ^(.*)$ /beancount/doc/custom-application; }\n    location = /beancount/doc/application           { rewrite ^(.*)$ /beancount/doc/custom-application; }\n    location = /beancount/doc/custom-application    { return 302 https://docs.google.com/document/d/1SnR7BdE2VXFTMEvnkhAd9PwXu_AxytTYpiS1LjXdP0E/; }\n\n    location = /beancount/doc/portfolio-returns     { rewrite ^(.*)$ /beancount/doc/returns; }\n    location = /beancount/doc/calculating-returns   { rewrite ^(.*)$ /beancount/doc/returns; }\n    location = /beancount/doc/computing-returns     { rewrite ^(.*)$ /beancount/doc/returns; }\n    location = /beancount/doc/returns               { return 302 https://docs.google.com/document/d/1nPsMIunLnDvdsg6TSsd0PZb7jngojNpFlqnaX36WRp8/; }\n    location = /beancount/doc/returns-old           { return 302 https://docs.google.com/document/d/1vEFB44-HFqydYVJXA-QxT4AN0K5xHHfSkhTmRSCPkac/; }\n\n    location = /beancount/doc/proposal-inventory    { rewrite ^(.*)$ /beancount/doc/proposal-booking; }\n    location = /beancount/doc/proposal-booking      { return 302 https://docs.google.com/document/d/1F8IJ_7fMHZ75XFPocMokLxVZczAhrBRBVN9uMhQFCZ4/; }\n\n    location = /beancount/doc/proposal-costbasis    { rewrite ^(.*)$ /beancount/doc/proposal-cost-basis; }\n    location = /beancount/doc/proposal-basis        { rewrite ^(.*)$ /beancount/doc/proposal-cost-basis; }\n    location = /beancount/doc/proposal-cost-basis   { return 302 https://docs.google.com/document/d/1af2ONEAePSAy_hwulwBrxEynKq9hvE9ZPx5u-f2PWi4/edit?ts=5f1642ea#heading=h.qmbg9ehtfas8; }\n\n    location = /beancount/doc/precision             { rewrite ^(.*)$ /beancount/doc/tolerances; }\n    location = /beancount/doc/rounding              { rewrite ^(.*)$ /beancount/doc/tolerances; }\n    location = /beancount/doc/tolerances            { return 302 https://docs.google.com/document/d/1lgHxUUEY-UVEgoF6cupz2f_7v7vEF7fiJyiSlYYlhOo/; }\n\n    location = /beancount/doc/share                 { rewrite ^(.*)$ /beancount/doc/sharing; }\n    location = /beancount/doc/splitting             { rewrite ^(.*)$ /beancount/doc/sharing; }\n    location = /beancount/doc/split                 { rewrite ^(.*)$ /beancount/doc/sharing; }\n    location = /beancount/doc/sharing               { return 302 https://docs.google.com/document/d/1FRcJqUfeAMQO6KjG94w6rF7VajMGJaFplmF1Wu0rCHY/; }\n\n    location = /beancount/doc/vest                  { rewrite ^(.*)$ /beancount/doc/vesting; }\n    location = /beancount/doc/rsu                   { rewrite ^(.*)$ /beancount/doc/vesting; }\n    location = /beancount/doc/vesting               { return 302 https://docs.google.com/document/d/1mHNlNMTZsKPMjP_qQmedoizZFQy1-GzlR2lX5zy_0ok/; }\n\n    location = /beancount/doc/ext                   { rewrite ^(.*)$ /beancount/doc/external; }\n    location = /beancount/doc/contrib               { rewrite ^(.*)$ /beancount/doc/external; }\n    location = /beancount/doc/contribution          { rewrite ^(.*)$ /beancount/doc/external; }\n    location = /beancount/doc/contributions         { rewrite ^(.*)$ /beancount/doc/external; }\n    location = /beancount/doc/external              { return 302 https://docs.google.com/document/d/1Z37bQ45wDtjTPaMQ_x-f33p1trH9fNosEAUgbQXwp30/; }\n\n    location = /beancount/doc/ca                    { rewrite ^(.*)$ /beancount/doc/contributing; }\n    location = /beancount/doc/contributing          { return 302 https://docs.google.com/document/d/1e4Vz3wZB_8-ZcAwIFde8X5CjzKshE4-OXtVVHm4RQ8s/; }\n\n    location = /beancount/doc/proposal-residual     { rewrite ^(.*)$ /beancount/doc/proposal-rounding; }\n    location = /beancount/doc/proposal-precision    { rewrite ^(.*)$ /beancount/doc/proposal-rounding; }\n    location = /beancount/doc/proposal-rounding     { return 302 https://docs.google.com/document/d/1MY2JMiiXUmcwsOT0CkiK-fCo0ZE7nbr8uTcTL50b6X4/; }\n\n    location = /beancount/doc/proposal-filter       { rewrite ^(.*)$ /beancount/doc/proposal-filtering; }\n    location = /beancount/doc/proposal-filters      { rewrite ^(.*)$ /beancount/doc/proposal-filtering; }\n    location = /beancount/doc/proposal-views        { rewrite ^(.*)$ /beancount/doc/proposal-filtering; }\n    location = /beancount/doc/proposal-query        { rewrite ^(.*)$ /beancount/doc/proposal-filtering; }\n    location = /beancount/doc/proposal-filtering    { return 302 https://docs.google.com/document/d/1d88MkHqxiVdF8XSQBT1QQpOKEOt6OC1P9ZoF3u86DwI/; }\n\n    location = /beancount/doc/proposal-settlement   { rewrite ^(.*)$ /beancount/doc/proposal-dates; }\n    location = /beancount/doc/proposal-dates        { return 302 https://docs.google.com/document/d/1x0qqWGRHi02ef-FtUW172SHkdJ8quOZD-Xli7r4Nl_k/; }\n\n    location = /beancount/doc/proposal-split        { rewrite ^(.*)$ /beancount/doc/proposal-splits; }\n    location = /beancount/doc/proposal-splits       { return 302 https://docs.google.com/document/d/1SC_q_t8TkLdPxglb2qcpG8q4wVe0VP-XU35FTI0ICRA/; }\n\n    location = /beancount/doc/proposal-assertions   { rewrite ^(.*)$ /beancount/doc/proposal-balance; }\n    location = /beancount/doc/proposal-balance      { return 302 https://docs.google.com/document/d/1vyemZFox47IZjuBrT2RjhSHZyTgloYOUeJb73RxMRD0/; }\n\n    location = /beancount/doc/proposal-budgeting    { rewrite ^(.*)$ /beancount/doc/proposal-budget; }\n    location = /beancount/doc/proposal-forecast     { rewrite ^(.*)$ /beancount/doc/proposal-budget; }\n    location = /beancount/doc/proposal-budget       { return 302 https://docs.google.com/document/d/12BVfdhnHy1Ruqyyu3JGf3OdWrpXFKB2zFyHFrznwuOU/; }\n\n    location = /beancount/doc/proposal-pad          { rewrite ^(.*)$ /beancount/doc/proposal-padding; }\n    location = /beancount/doc/proposal-padding      { return 302 https://docs.google.com/document/d/1rZW3Hz5oJw1x9AwbcBj6uw5FabCHqubiIvaHwAjmCvk/; }\n\n    location = /beancount/doc/mirror                { rewrite ^(.*)$ /beancount/doc/proposal-mirror; }\n    location = /beancount/doc/proposal-mirror       { return 302 https://docs.google.com/document/d/1dhz-_Of-hdubafHg-OESEMdMG_-fJqw4P4KcJsKPqk0/; }\n\n    location = /beancount/doc/inter-account         { rewrite ^(.*)$ /beancount/doc/proposal-inter; }\n    location = /beancount/doc/proposal-inter        { return 302 https://docs.google.com/document/d/12YyAqfGygzCGMZsbsO3ZpUK08j6rUCQvB2Je9c42oqc/; }\n\n    location = /beancount/doc/fund                  { rewrite ^(.*)$ /beancount/doc/proposal-funds; }\n    location = /beancount/doc/fund-accounting       { rewrite ^(.*)$ /beancount/doc/proposal-funds; }\n    location = /beancount/doc/proposal-funds        { return 302 https://docs.google.com/document/d/1nf_yCiLuewVCEjkXq9Kd9SqbZGWqcs0v0pT5xQnkyzs/; }\n\n    location = /beancount/doc/price                 { rewrite ^(.*)$ /beancount/doc/prices; }\n    location = /beancount/doc/fetch-prices          { rewrite ^(.*)$ /beancount/doc/prices; }\n    location = /beancount/doc/fetch-price           { rewrite ^(.*)$ /beancount/doc/prices; }\n    location = /beancount/doc/prices                { return 302 https://docs.google.com/document/d/1thYRAMell_QT1Da1F_laprSs6BlROZjyK_h3V8qHW9c/; }\n\n    location = /beancount/doc/bug-negative-prices   { return 302 https://groups.google.com/forum/#!topic/beancount/2Y7EWFUA3OA; }\n\n    location = /beancount/doc/selfreductions        { rewrite ^(.*)$ /doc/ledgerhub/self-reductions; }\n    location = /beancount/doc/self-redux            { rewrite ^(.*)$ /doc/ledgerhub/self-reductions; }\n    location = /beancount/doc/selfredux             { rewrite ^(.*)$ /doc/ledgerhub/self-reductions; }\n    location = /beancount/doc/self-reductions       { return 302 https://docs.google.com/document/d/16dKnXJ7KZhemPs5NPHmSTNCV7LUPrMD9jFgiV79Npb8/; }\n\n    # Old document\n    location = /beancount/doc/import                { rewrite ^(.*)$ /beancount/doc/beangulp; }\n    location = /beancount/doc/ingesting             { rewrite ^(.*)$ /beancount/doc/beangulp; }\n    location = /beancount/doc/importing             { rewrite ^(.*)$ /beancount/doc/beangulp; }\n    location = /beancount/doc/ingest                { return 302 https://docs.google.com/document/d/11EwQdujzEo2cxqaF5PgxCEZXWfKKQCYSMfdJowp_1S8/; }\n    location = /beancount/doc/beangulp              { return 302 https://docs.google.com/document/d/1hBfsHZcoHgz5rvhCdP42g2FJ5ouycIMV4H1tfgXpwBU/; }\n\n    # Old LedgerHub documents now redirected from here.\n    location = /beancount/doc/ledgerhub/design      { rewrite ^(.*)$ /beancount/doc/ledgerhub/design-doc; }\n    location = /beancount/doc/ingest-design-doc     { rewrite ^(.*)$ /beancount/doc/ledgerhub/design-doc; }\n    location = /beancount/doc/ingest-design         { rewrite ^(.*)$ /beancount/doc/ledgerhub/design-doc; }\n    location = /beancount/doc/ledgerhub/design-doc  { return 302 https://docs.google.com/document/d/11u1sWv7H7Ykbc7ayS4M9V3yKqcuTY7LJ3n1tgnEN2Hk/; }\n\n    location = /beancount/doc/ledgerhub/status      { rewrite ^(.*)$ /beancount/doc/ledgerhub/manual; }\n    location = /beancount/doc/ledgerhub/manual      { return 302 https://docs.google.com/document/d/1vnvqQNGaHOM3opRnEZspvALpv-G6fVQq0bSgAchVpuk/; }\n\n    location = /beancount/doc/ledgerhub/proposal-v2 { rewrite ^(.*)$ /beancount/doc/ledgerhub/postmortem; }\n    location = /beancount/doc/ledgerhub/postmortem  { return 302 https://docs.google.com/document/d/1Bln8Zo11Cvez2rdEgpnM-oBHC1B6uPC18Qm7ulobolM/; }\n\n    location = /beancount/doc/proposal-v3           { rewrite ^(.*)$ /beancount/doc/v3; }\n    location = /beancount/doc/v3                    { return 302 https://docs.google.com/document/d/1qPdNXaz5zuDQ8M9uoZFyyFis7hA0G55BEfhWhrVBsfc/; }\n\n    location = /beancount/doc/v3-deps               { rewrite ^(.*)$ /beancount/doc/v3-dependencies; }\n    location = /beancount/doc/v3-dependencies       { return 302 https://docs.google.com/document/d/10R-msZljuqFY8nckUnR1jVxMX1ol7rJUCMZo7w7QUQs/; }\n\n    location = /beancount/doc/v3-install            { return 302 https://docs.google.com/document/d/1WwZYqsp28Uuk5eFqHQ1u1zqdjghymy8S_Yo-OJENoa4/; }\n    location = /beancount/doc/v3-changes            { return 302 https://docs.google.com/document/d/1Ia4zYmkB6I6IbWPRlcZYYuMS1ZI55T99dp9LiMJqXCE/; }\n    location = /beancount/doc/v3-booking            { return 302 https://docs.google.com/document/d/1H0UDD1cKenraIMe40PbdMgnqJdeqI6yKv0og51mXk-0/; }\n\n    location = /beancount/doc/parsed-comments       { return 302 https://docs.google.com/document/d/1yestw21g4AEMNrIUsBuOaxucfz3_7eMAR6NYnVnTzV0/; }\n    location = /beancount/doc/symbology             { return 302 https://docs.google.com/document/d/1_52VhapAuR-ej4yB8rFovA8MyMmF8IOcqO44apsdtKU/; }\n}\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.9111328125,
          "content": "exclude: ^examples/.*\\.output$\n\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: check-case-conflict\n      - id: check-ast\n      - id: check-toml\n      - id: check-yaml\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: mixed-line-ending\n        args: [ --fix=lf ]\n      - id: end-of-file-fixer\n\n  - repo: https://github.com/abravalheri/validate-pyproject\n    rev: v0.22\n    hooks:\n      - id: validate-pyproject\n        # schema-store include schema for ruff config,\n        # need to match ruff hook version\n        additional_dependencies: [ \"validate-pyproject-schema-store[all]==2024.11.25\" ]\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # when we update this version, need also update schema-store to match it.\n    rev: v0.8.1\n    hooks:\n      - id: ruff\n        args: [ --fix ]\n      - id: ruff-format\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 165.2705078125,
          "content": "========================\n   beancount: CHANGES\n========================\nNote: This file contains a list changes in the 'v2' branch.\nThe master branch will rely on the Git repository history.\n\n\n2024-06-16\n\n- Created branch 'v3' and released 3.0.0\n\n     Based on our recent discussion around Beancount branches being confusing, I did the following to branches:\n\n     - v2: remains the same (no change); but v2 is now even less subject to freeze exceptions than before, because v3 is now officially born and PyPI releases will be made for it.  The default reply to patches to v2 will be \"move that to v3.\"\n\n     - cpp: I turned the previous master branch's state with all C++ and Bazel build into a new 'cpp' branch.\n       All work on the C++ rewrite -- if it is to continue -- will live on that branch.\n       If things do move to Rust, I will probably salvage bits and pieces of that manually into a 'rust' branch.\n       In particular, the schema defined in the proto files is something I'd like to carry forward (nicely\n       documented and distinguishes between the pre and post interpolation data structures explicitly),\n       and perhaps the new reFlex parser will be useful at some point.\n\n     - v3: a new branch, to contain the state of the master branch MINUS the C++ bits.\n       As stated above, the C++ code remains only on branch 'cpp'.\n       This is now the official release branch and PyPI releases will be made of it.\n\n     - master: this branch is now where new work on v3 might live.\n       I'm not sure we really need it or what it should mean, but it should track v3 for now.\n\n     I've reviewed missing PyPI releases and made sure we have these:\n\n     https://pypi.org/project/beancount/\n     https://pypi.org/project/beangulp/\n     https://pypi.org/project/beanquery/\n     https://pypi.org/project/beanprice/\n     https://pypi.org/project/beangrow/\n     https://pypi.org/project/beancount2ledger/\n\n     ​The inclusion of v3 releases for PyPI and new PyPI releases for subprojects should normalize the versioning situation in Beancount. Note that packaging and following other people's conventions are not my forte (and I don't use PyPI for my own projects I just use source), if you have any suggestions or something's missing please reply to this thread.\n     Thanks for your patience,\n\n\n2022-02-15\n\n - Released 2.3.5 with only a few minor bugfixes. Mainly released for 3.10.\n\n\n2021-03-20\n\n - Fixed #639: Released 2.3.4.\n\n\n2021-01-09\n\n - Fixed bug in booking that assumed number is set on cost. I did this while\n   running booking manually on entries freshly created on an importer (never ahd\n   done that before, will be customary in v3).\n\n\n2021-01-08\n\n - Fixed recently introduced bug with the export script that reordered the\n   columns.\n - Fixed bug with printer leaving trailing whitespace. Was annoying.\n\n\n2020-12-20\n\n - Merged half of branch pr128_seltzered_beanpriceupdate on this side of\n   Beancount. The other side will be patched to\n   http://github.com/beancount/beanprice. This adds some trimming functions to\n   beancount.ops.lifetimes.\n\n\n2020-12-14\n\n - Fixed #588: Catch more narrow exceptions from plugins and render full stack\n   when caught.\n\n\n2020-11-25\n\n - Fixed #584 - a bug which was occurring because a pathological example using a\n   very large precision was used in inferring the precision of a currency and a\n   subsequent attempt to quantize a large number exceeded the default precision.\n\n\n2020-11-22\n\n - Fixed bug in parser.parse_file() which when passed a filename in would leave\n   the file unclosed.\n - Fixed latent bug with key/value parsing (incorrect grammar rule, was working\n   anyway somehow).\n - Internal changes to lexer and parser to minimize diffs with ongoing work in\n   'master' / C++ scanner/parser.\n\n\n2020-11-17\n\n - Made it legal to insert a balance entry after account closure. It is a common\n   case that transactions happen on the last day of an account and the balance\n   directive operates at the beginning of the day. It was arguable whether\n   directives should be allowed after closure; notes and documents were allowed\n   because statements and phone calls may still occur after an account is\n   closed, but I suppose you can make the argument that a statement balance can\n   also occur at a later date, so voila, make it legal. You still cannot post\n   transactions to a closed account, which is the thing that really matters.\n\n\n2020-11-15\n\n - Render the tolerance in Balance directives (merged from Aaron Lindsay).\n\n\n2020-11-01\n\n - In the process of removing dependencies to the beancount.ops.holdings module,\n   significantly sped up the net-worth-over-time script by using simple\n   aggregation to an inventory (which is how it should be done).\n - Allow balance_by_account() method to compress positions that aren't booked,\n   as an option.\n - Added split() method to Inventory, like segregate_units but with no\n   constraints.\n - Fixed #255: Added a new beancount.core.prices.project() method to project\n   prices to another cost currency.\n\n\n2020-10-26\n\n - Fixed Github Actions workflows and Wheel generation.\n - Released 2.3.3 to trigger new binaries.\n\n\n2020-10-25\n\n - Removed the part of setup_test checks running the binaries with --help, as\n   they fail starting at 3.8. Someone with more time would create a test using\n   pytest-virtualenv.\n\n\n2020-10-17\n\n - Fixed #566: Duplicate postings on entries should count toward distinct\n   hashes.\n\n\n2020-10-10\n\n - Moved Emacs support to its own repository\n   (http://github.com/beancount/beancount-mode).\n\n\n2020-09-12\n\n - Added metadata on implicitly generated Price directives (from implicit_prices\n   plugin).\n\n\n2020-09-12\n\n - Released 2.3.2.\n\n\n2020-09-07\n\n - Fixed #401: Fixed initialization bugs on min() and max() functions for the SQL\n   aggregator.\n - Fixed #364: Fixed important core bug in how the CostSpec were converted to\n   Cost for cost specs with total and per-unit cost numbers, like this {106.935\n   # 6.98 USD}. For short positions, the cost was computed as negative. In a\n   sense this was a naive bug, but a very important one. This occurred only for\n   short positions.\n\n\n2020-08-19\n\n - Added an option to the printer to allow an arbitraty Python value to be\n   output. This is useful when creating values programmatically with types not\n   supported by the syntax.\n\n\n2020-07-25\n\n - Release 2.3.1 as dependency for beanprice.\n - Moved beancount.prices.find_prices to beancount.ops.find_prices in\n   preparation of moving price fetching code to a new 'beanprice' repository.\n\n\n2020-07-17\n\n - Fixed bug #508 in beancount.plugins.unique_prices.\n\n\n2020-07-06\n\n - Updated export script to honor lowercase \"ignore\" instead of \"IGNORE\" and set\n   default tax type to \"taxable\" instead of \"TAXABLE\" so that changes in PR 472\n   don't pick up the metadata as currencies.\n\n\n2020-07-05\n\n - Removed bean-report and all associated codes. Use bean-query instead (or\n   Fava).\n - Removed bean-web and bean-bake (for v3). Use Fava instead.\n - Moved beancount.web.scrape to beancount.utils.scrape in preparation of\n   removing beancount.web.\n - Removed experiments/portfolio for its dependency on beancount.reports code\n   (this script was obsolete anyway).\n - Moved get_assets_holdings() function out of reports code to preserve it for\n   use by an experimental script (in preparation for removing beancount.reports).\n - Moved beancount.scripts.tutorial to beancount.reports.tutorial in preparation\n   of removing beancount.reports and beancount.web.\n - Moved beancount.reports.context to beancount.parser.context in preparation of\n   removing beancount.reports and beancount.web.\n - Moved beancount.reports.table to beancount.utils.table in preparation of\n   removing beancount.reports and beancount.web.\n\n\n2020-07-04\n\n  - Fixed #494, invalid account used for clamping the period view\n    (Equity:Conversions:Previous instead of Equity:Conversions:Current).\n\n\n2020-06-27\n\n  - Merged PR #484, some parser improvements by @dnicolodi.\n  - Merged PR #488 from branch beancount/pr135_ppmarciniak_fixnetworth by\n    @pmarciniak.\n  - Merged branch pr131_tohojo_csvtweaks (BitBucket PR 131) by @tohojo, fixed\n    encoding bug in reading the file for the date and allow customizing the\n    number parser.\n\n\n2020-06-26\n\n  - Merged #480 - parser: Read input data from Python file objects by dnicolodi.\n\n\n2020-06-10\n\n  - Released 2.3.0. See #459.\n\n\n2020-06-03\n\n - Added a 'hooks' argument to beancount.ingest.scripts_utils.ingest() replacing\n   'detect_duplicates_func'. 'find_duplicate_entries()' is still inserted if no\n   other filter functions are specified (I'd like to remove this eventually; not\n   changing behavior here for now.)\n - Added an example for how to run the importers explictly via a Python script\n   calling the ingest() function.\n - Fixed bug with explicit invocation of importers via ingest() function when\n   calling the 'file' sub command.\n - Some installations of pdfminer install 'pdf2txt.py' as 'pdf2txt'. Adjusted\n   ingestion example scripts.\n\n\n2020-06-02\n\n - Modified recently added --no-cache option to also delete the cache if it\n   exists. Honor the same environment variables. The motivation behind this\n   change is that while --no-cache is useful for debugging plugins, it can be\n   disconcerting that if you remove it on the next run it picks up the old\n   existing cache. Deleting it on usage of --no-cache is reasonable behavior and\n   avoids the introduction of a --clear-cache option; this should be sufficient.\n\n\n2020-05-25\n\n - Fixed #449: Added options to bean-check: --no-cache and --cache-filename to\n   override the cache location. These are added to bean-check only and are\n   useful during development. The 'BEANCOUNT_DISABLE_LOAD_CACHE' and\n   'BEANCOUNT_LOAD_CACHE_FILENAME' environment variables are still honored by\n   the loader and work across all other programs.\n\n\n2020-05-23\n\n - Fixed #184: Added explicit test for Inventory.average().\n - Fixed #404: Iex price source not working any more.\n - Fixed #281: Query \"id\" column does not identify transactions uniquely. Made\n   the default hash_entry() function include metadata. Exclude metadata and\n   derived fields explicitly in the context of comparison.\n - Fixed #182: Eliding an amount with total price raises TypeError.\n - Added options to filter accounts in \"onecommodity\" plugin: skip accounts with\n   explicitly declared commodities, metadata of \"onecommodity: FALSE\" and added\n   regular expression to specify the list of accounts to match (default: all).\n\n\n2020-05-22\n\n - Migration of code repository to Github.\n\n\n2020-05-02\n\n - Minor performance improvment by avoiding calling __iadd__ in a few places.\n - Fixed bug due to the removal of __version__ in apiclient:\n   https://github.com/googleapis/google-api-python-client/commit/1d8ec6874e1c6081893de7cd7cbc86d1f6580320\n - Changes all imports from 'apiclient' to 'googleapiclient', which is now the\n   recommended way.\n - Fixed some warnings.\n - Disabled expensive assertions in Inventory class and implemented a special\n   case for adding to an empty inventory to avoid expensive aggregation. This\n   can occur in aggregation loops and is unnecessarily expensive when adding a\n   single, very large inventory.\n - Made balance check aggregation avoid an initial empty inventory object, and\n   changed the balance check code to call the realization utility function\n   compute_balance().\n\n\n2020-04-11\n\n - Fixed #425: Tentative bug fix for crash on decref over null traceback. The\n   Python API for this function may return some null values. Not taking any\n   chances. This should fix this particular bug.\n\n\n2020-03-28\n\n  - Allow the \"divert_expenses\" plugin to override diversions on postings that\n    aren't for expenses accounts. I needed this to account to a deposit to my\n    kid's daycare, which is an asset account in his diverted ledger.\n\n\n2020-03-22\n\n  - Added docstrings on some import code (while installing a new importer; my\n    stuff is sometimes poorly documented I'm afraid).\n\n\n2020-02-23\n\n  - Added new features to the CSV importer:\n    * A new 'invert_sign' option to invert the sign of the amount.\n    * A new field, 'CATEGORY', which goes unrendered.\n    * Replace newlines from all narrations by semi-colons.\n    These were driven by recent changes to the Amex CSV format.\n\n\n2019-12-29\n\n - Added a CSV field for a unique reference number. If present, this is set as a\n   link on the transaction.\n\n\n2019-12-25\n\n - Applied patch from Daniele Nicolodi\n   (https://bitbucket.org/blais/beancount/pull-requests/139/parser-work-around-python38-bug-causing-a)\n   to work around typing constraints around signed size types introduced in\n   Python 3.8. See also https://bugs.python.org/issue38913.\n\n - Fixed bug with running python3 as a subprocess during testing. Fixes an error\n   that occurs with the tutorial file generation.\n\n\n2019-11-29\n\n - Added 'encoding' option to CSV importer. Amex encodes as 'latin1', not\n   'utf-8' and this turned out to be necessary.\n\n\n2019-11-10\n\n - Added an option to upload-to-sheets script to apply a minimum to the number\n   of rows resized to. The problem was I had another sheet longer than the\n   auto-updated data sheet, and when new rows were being inserted, rows in the\n   referencing sheet were being incremented automatically to refer to the now\n   displaced previous rows in the updated data sheet (even if they used to refer\n   to rows after the last row in the data sheet). Avoid resizing in the number\n   of rows up or down sheet should avoid most of these problems (except when at\n   the boundary, but then the minimum number of rows could just be increased).\n   This is quick fix that should work in the medium term.\n\n\n\n2019-10-20\n\n - More changes to unittest while porting to Bazel build (for C++ support).\n\n\n2019-10-11\n\n - Added __main__ block to all tests because ongoing port to Bazel build\n   requires it.\n\n\n2019-10-10\n\n - Moved test data for b.utils.file_type for Bazel support. It otherwise assumes\n   file_type.py is a package.\n\n\n2019-08-21\n\n - Released 2.2.3.\n - Fixed bug in split_expenses plugin.\n\n\n2019-06-01\n\n  - Upgraded Bison to 3.4 (built from source). Silenced warnings.\n\n\n2019-05-01\n\n - Fixed #389: Patch for b.p.forecast improvements.\n\n - Added rolled back change to default value of flag used when using the 'txn'\n   syntax. See issue #295 for a discussion.\n\n\n2019-03-16\n\n  - Had a very quick shot at implementing trade tracking, added the list of\n    matches positions from the booking methods. This doesn't work yet, I need to\n    make changes to b.c.Inventory in order to make this work. Partial\n    changelist.\n\n\n2019-03-03\n\n  - Fixed #378: Rendering metadata with null values wasn't properly implemented.\n    In the process, I explicit parsing of None values by allowing \"NULL\".\n\n  - Fixed #309: Catch PermissionError to work around\n    https://bugs.python.org/issue25481.\n\n\n2019-02-27\n\n  - Implemented a quick prototype of the current trading accounts method of\n    Peter Selinger in 'beancount.plugins.currency_accounts'. A few warts remain:\n\n    * FIXME: We need to handle these important cases (they're not frivolous,\n      this is a prototype), probably by inserting some exceptions with\n      collaborating code in the booking (e.g. insert some metadata that\n      disables price conversions on those postings).\n\n    * FIXME(2): Ouch! Some of the residual seeps through here, where there\n      are more than a single currency block. This needs fixing too. You can\n      easily mitigate some of this to some extent, by excluding transactions\n      which don't have any price conversion in them.\n\n\n2019-02-26\n\n  - Fixed #376: Coerce implicit boolean to true boolean.\n\n\n2019-02-10\n\n  - Fixed #374: Option --all treatment was broken in #210. Also catch and print\n    errors.\n\n  - Fixed rare failure of shutil.rmtree() in encryption cleanup test.\n\n\n2019-02-03\n\n  - Fixed #372: Removed formatted string literal to keep compat with Python 3.5.\n\n\n2019-01-29\n\n  - Fixed #362: Predicate matching a parent account was matching accounts with\n    word breaks but not at the boundary of an account name. This was causing\n    a rare (but important) failure in how Pad balances were calculated.\n\n\n2019-01-28\n\n  - Released 2.2.1 for bug fixes.\n\n\n2019-01-25\n\n  - Improve output of tags and links for bean-report ledger and hledger.\n\n\n2019-01-22\n\n  - Fixed problem with invalid format strings with 0-width field when rendering\n    MISSING.\n\n\n2019-01-05\n\n  - Merged pull request #85\n    (https://bitbucket.org/blais/beancount/pull-requests/85) from hardikar,\n    adding function grepn() to the shell.\n\n  - Merged pull request #86\n    (https://bitbucket.org/blais/beancount/pull-requests/86) from hardikar,\n    adding function subst() to the shell.\n\n  - Merged pull request #89\n    (https://bitbucket.org/blais/beancount/pull-requests/89) from hardikar,\n    adding functions date_diff(), date_add() to the shell.\n\n  - Implemented best compression for zipfile in bean-bake as per Justus\n    Pendleton's suggestion. For context, see this:\n    https://groups.google.com/d/msgid/beancount/de75671d-532a-4deb-bd0f-fd9377e63753%40googlegroups.com?utm_medium=email&utm_source=footer\n\n\n2018-12-18\n\n  - Fixed #214: Add directory of current filename to sys.path with new option\n    \"insert_pythonpath\". When this option is encountered in a file, we prepend\n    the path of the file in which it is encountered at the front of the\n    PYTHONPATH for the rest of the duration of the problem (we could consider\n    resetting this after parsing and processing the plugins; not doing it now).\n\n  - Added detection of hitting the root if the search for the repository root\n    failed.\n\n  - Fixed #341: find_repository_root() fails on source tarball. Renamed PKGINFO\n    to PKG-INFO to match what pip sdist produces.\n\n  - Change version number from 2.2.0-devel to 2.2.0-dev which apparently is\n    recognized by pip (thanks Jakob Schnitzer).\n    https://bitbucket.org/blais/beancount/pull-requests/91/default/diff#comment-85707662\n\n\n2018-12-12\n\n  - Suppressed almost all the Python 3.8 warnings.\n\n\n2018-11-16\n\n  - Added more logging in loader (done while debugging something else).\n\n\n2018-10-26\n\n  - Fixed #302: Fixed second bug with font-locking for account names (starting\n    with digit).\n\n  - Fixed bug ingest that would cause relative filenames to fail.\n    See this thread for details:\n    https://groups.google.com/d/msgid/beancount/709141d5-88a4-444a-acef-94bf43a9b388%40googlegroups.com?utm_medium=email&utm_source=footer\n\n  - Fixed bug in ingest whereby the custom duplicates detection function wasn't\n    being called.\n\n\n2018-10-25\n\n  - Fixed unit test failure on BitBucket pipelines using a temp directory\n    context manager.\n\n  - Applied PR by Richard W to install the mixins package (install was broken).\n\n  - Fixed #302: beancount.el does not fontify account names with single letter\n    components (based on bug report by arianaut@).\n\n\n2018-10-13\n\n  - Fixed #158: Missing MIME type for QFX files.\n\n\n2018-10-04\n\n  - Merged new_ingest_mixins: Added new implementations of mixins for ingestion:\n\n    * beancount.ingest.importers.mixins.identifier which implements identify().\n    * beancount.ingest.importers.mixins.filing which implements file_account()\n      and file_name().\n    * beancount.ingest.importers.mixins.config which implement a simple schema\n      with a configuration.\n\n    These new mixins are intended to be more independent and more easily\n    composable than the older ones. The beancount.ingest.importers.regexp has\n    been removed. If you need it in interim, I made a copy under\n    experiments/ingest/regexp.py.\n\n\n* Version: 2.1.3\n\n2018-10-04\n\n  - Fixed #323: Escape strings in printer.\n\n  - Minor bug fix for beancount.prices.price on null result.\n\n\n2018-09-19\n\n  - Removed TRUNCATE(), after realizing ROOT() can already do the same thing.\n\n\n2018-09-18\n\n  - Added TRUNCATE() function to SQL shell for Vikas Rawal.\n\n\n2018-09-03\n\n  - Added a parameter to the cmptest assertions to disable real booking and\n    allow a weak local form of booking conversion that allows interpolation.\n    (I'm using this in another project to assert some incomplete transactions.)\n\n\n2018-08-30\n\n  - Made assertions on entries off of the TestCase class, as free functions (so\n    that they can be used in another project).\n\n\n2018-08-26\n\n  - Fixed tests for pipeline running pytest (somehow the curses functions fail,\n    probably due to better environment isolation from pytest).\n\n  - Implementation of beancount.ingest.regression_pytest, a pytest replacement\n    for beancount.ingest.regression, which was for nose. This is simpler and\n    better and more straightforward (no conditionals; all regression files must\n    have all accompanying expect files and all must pass). See the module\n    docstring for new instructions on how to use this.\n\n    This should not break the older tests, as I haven't changed the older\n    support. It (beancount.ingest.regression) will be removed eventually.\n\n    (This completes porting Beancount to use pytest instead of nosetests.)\n\n\n2018-08-25\n\n  - Today we're switching to pytest as the official test runner. All the tests\n    pass, and it even runs faster. It's about time!\n\n  - Removed all references and workaround to nose.\n\n\n2018-08-23\n\n  - Oops... removing forgotten trace in bean-web.\n\n  - Fixed #325: Implemented support for including encrypted files (for Milind Kamble\n    and using some of this changes).\n\n\n2018-08-17\n\n  - Added 'issuer' column to the export script. I'm going to use this to produce\n    a deaggregated list of exposure to individual stocks from a list of ETFs.\n\n\n2018-08-25\n\n  - Upgrade requirement to bison-3.0.5 for development.\n\n\n2018-08-12\n\n  - After many years of using something like it to track my investment portfolio\n    using a Google Sheets doc, I cleaned up, rewrote and move the asset list\n    exporting script to beancount.projects.export and deleted the old version\n    under experiments/upload.\n\n\n2018-08-05\n\n  - Fixed #322: Adjustments to StopIteration treatment from within generators\n    were breaking bean-example generation code.\n\n  - Implemented a new plugin which asserts that on accounts with 'NONE' booking\n    method reducing postings' cost basis is within the vicinity of the average\n    cost basis in the account. This allows you to approximate the 'AVERAGE'\n    booking method avoid too much cost basis leakage until it's implemented\n    properly.\n\n\n2018-08-02\n\n  - Created a new 'commodity_attr' plugin to asset the presence and validity\n    (in a set, like an enum) of metadata attributes on Commodity directives.\n\n    I export my holdings joined to a table of per-Commodity attributes and I've\n    made a mistake this week that ended up showing up as an overestimated\n    portfolio value on my portfolio tracking Google Sheets doc.\n\n\n2018-07-31\n\n  - Fixed bug in new ingest() function found as I refactored my importers.\n\n  - Fixed bug with the pipeline making sure to set the CWD of the subprocess\n    when we run an import test.\n\n  - Fixed bug with previous commit containing stray 'string' reference. (My\n    environment has autoimports by default.)\n\n  - Implemented a beancount.ingest.scripts_utils.ingest() function that will act\n    as a main program, so you can write your own importer scripts from top to\n    bottom without having to rely on bean-identiy, bean-extract or bean-file.\n\n    The purpose of this change was to allow the user to insert an optional\n    argument 'detect_duplicates_func' in order to implement their own duplicates\n    detection. See discussion under\n    https://bitbucket.org/blais/beancount/pull-requests/75/. In order to install\n    your duplicates detector, just call ingest at the end of your importer\n    script, like this:\n\n      my_importers = [ ... ]\n      ingest(my_importers, my_duplicates_func)\n\n    I could have chosen to add a \"hook\" option and such to Beancount, but I\n    preferred moving the whole import framework one level closer to code. I also\n    like that it's not just an imported module; it's really just your script,\n    with three subcommands. You could add more custom import-level stuff in\n    there. The ingest() function is a main program, and commands like\n\n      bean-extract myimporters.py ~/Downloads --reverse -e myledger.beancount\n\n    are invoked similarly by calling the Python script directly, like this:\n\n      ./myimporters.py -d ~/Downloads extract --reverse -e myledger.beancount\n\n    These two should be equivalent.\n\n    The older way of doing things--that is, calling bean-identify, bean-extract\n    and bean-file--are still supported regardless of whether you've inserted a\n    call to ingest() in your importers configuration or not. This is made to\n    work via a rather labyrinthine trampoline of functions calls (in particular,\n    getting the arguments setup right was surprisingly tricky).\n\n    I'm still debating whether this should be \"the new way\", or just for those\n    wishing to build their own duplicate detection heuristic. Feedback (on the\n    list) would be interesting.\n\n\n2018-07-29\n\n  - Updated to flex-2.6.4.\n\n\n2018-07-28\n\n  - Added a utility to import modules by dotted string name.\n\n\n2018-07-19\n\n  * Fixed #319: Incorrect version number from 2.1.2-devel to 2.1.3-devel.\n\n\n2018-07-28\n\n  - Added automated unit test for calling identify() from the importers test\n    suite, expecting True, always.\n\n\n2018-05-31\n\n  - Created a new plugin: \"fill_account\" to automatically insert a posting with\n    a default account name where there's a single posting. Will use this while\n    traveling as a lot of the expenses come from cash; this should significantly\n    shorten such files.\n\n  - Changed template for version number from {date|short} to {date(date, \"%s%)}\n    as per discussion on #304 (thanks to Jason Chu for looking up the detail for\n    this).\n\n\n2018-05-29\n\n  - Refactored the call to find duplicates in imported files so that it can be\n    called only once with all the results from all the importers. This should\n    eventually allow a user-provided function that can merge entries between\n    importers. Existing behavior should be unaffected (though there may be a\n    small delay until everything gets printed out; all the importers are invoked\n    before any output is written). See #298.\n\n\n2018-05-28\n\n  - Fixed bug with tempdir being a symlink on Mac, which was making one test\n    fail.\n\n  - Fixed unit tests which failed due to timestamps getting rendered with an\n    offset on a Mac while on a train in Japan.\n\n  - Render tags and links on Document directive.\n\n  - Minor bug fix: don't fail on rendering a MISSING instnace.\n\n  - In 'divert_expenses' plugin, allow limiting diversions to one posting only.\n\n  - Fixed unit test for git checkouts. This should fix the Travis-CI build.\n\n\n* Version: 2.1.2\n\n2018-05-12\n\n  - Fixed setup.py to catch exceptions in the absence of git as well.\n\n\n* Version: 2.1.1\n\n2018-05-12\n\n  - Fixed installation with missing version string.\n\n\n* Version: 2.1.0\n\n2018-05-12\n\n  - Added back lexer test from Adrian Medrano Calvo's UTF8 changes to head.\n\n\n2018-05-08\n\n  - Fixed #287: In the price fetcher, store the datetime instances as\n    naive-in-UTC in order to avoid a serialization problem with older Python\n    versions.\n\n\n2018-05-06\n\n  - Changes to support git versioning if hg versioning is not available.\n\n\n2018-05-05\n\n  - Fixed #289: Add option to find beancount version. All scripts now support\n    --version.\n\n  - Amended PR64 to remove the need for __getitem__(). Clarified docstring.\n\n  - Merged PR64 from Jakob Schnitzer: Inventory: use dict instead of list as a\n    base.\n\n\n2018-05-04\n\n  - Fixed #290: Validation of account name components was incorrectly swapped.\n\n\n2018-05-03\n\n  - Amended PR74: Adding a new unit test, fail if tags / link appear after the\n    first posting. Performance amendment to tags/links and clarification to the\n    freezing of tags & links and their default values.\n\n  - Merged PR74 / Fixed #99: Allow tags and links to be spread over several\n    lines.\n\n  - Amended PR14: added simple unit testing for regexp, changes in parsing UTF-8\n    account type to match changes in Beancount head.\n\n  - Merged PR14 by Adrian Medrano Calvo: Support account names to consist of\n    Unicode letters and numbers.\n\n2018-05-02\n\n  - Removed a few accidental __author__ metadatas from files, normalized to\n    __copyright__ as all other files.\n\n\n2018-05-01\n\n  - Added patch for clean build for lexer. 2.6.1 results in a build warning.\n\n  - Merged PR73 (Ethan Glasser-Camp) - Cleanups to lexer and more restrictive\n    syntax for comments within a transaction's indented block.\n\n  - Fixed failing test re. new grammar.\n\n  - Merged PR29: Update grammar to allow comments in the middle of transactions\n    (Ethan Glasser-Camp).\n\n  - Merged PR71: Use enhanced extract method which passes existing entries\n    (Patrick Ruckstuhl).\n\n\n2018-04-29\n\n  - Added polymorphic POSSIGN(_, account) function to the SQL shell in order to\n    support correcting for per-account sign.\n\n  - Implemented polymorphic NEG() function in the SQL shell, which works on\n    instances of Decimal, Amount, Position, Inventory.\n\n  - Changed the SQL shell's operators to dispatch to Python's default operator\n    selection instead of coercing to Decimal instances.\n\n\n2018-04-28\n\n  - Added QUARTER() function to the SQL shell.\n    (See https://groups.google.com/d/msg/beancount/fTlSnQRPayo/1yN8zd76AAAJ.)\n\n  - Updated version of flex on Ubuntu (2.6.1) generates warnings. Fixed a few.\n    But Beancount now fails on account names with a dash in them; added a test\n    for those. (The lexer is not the issue; I suspect a bison update from 4/17.)\n\n\n2018-04-18\n\n  - Fixed #157: Building a price map with zero prices should not fail,\n    especially when done accidentally.\n\n  - Fixed #264: Converted zip compression in bake from using an external zip\n    tool to using the 'zipfile' module packaged with Python. I'm doing this to\n    fix the CI build as well.\n\n\n2018-04-17\n\n  - Fixed #265: Refined the timezone specification of the price sources. In\n    doing this, I documented it in the beancount.prices.source module and now\n    pass in a timezone-aware datetime instance instead of a date, and the source\n    is now required to also require a timezone-aware datetime instance. I fixed\n    all the tests, and added a utility to simulate running them from different\n    timezones.\n\n  - Implemented multi-file support for bean-doctor context command. Use it like\n    this:\n\n      bean-doctor context <toplevel.beancount> <file.beancount>:<lineno>\n\n    The previous syntax is still supported; like this:\n\n      bean-doctor context <toplevel.beancount> <lineno>\n\n\n2018-04-05\n\n  - Since I added a dependency on 'requests', forgot to add to checkdeps. Done.\n\n\n2018-04-04\n\n  - Handle error on an invalid implementation of a price source (e.g., in this\n    case an obsoleted price source string of 'google' imports something else and\n    referenceing .Source fails).\n\n  - Bubble up error from Yahoo price source.\n\n  - Fixed #267: Implemented a price source from the IEX exchange.\n\n\n2018-04-03\n\n  - Implemented Quandl importer on its REST API. Another implementation, based\n    on the Quandl Python client API was proposed by Hugo Ideler (see PR34), but\n    I didn't want to add a dependency on the client library (nor on Pandas), and\n    after reading the description on Quandl API's website, I figured the library\n    was simple enough the output could be parsed directly. I wrote a new\n    implementation from scratch, parsing just the time-series datasets.\n\n  - Merged PR68 from Martin Michlmayr, added Travis Yaml support file.\n\n  - Fixed Emacs functionality to uncomment regions (change submitted by Stefan\n    Monnier on the list).\n\n\n2018-04-02\n\n  - Fixed #193: Removed the broken Google Finance price source importer. Google\n    has removed this service in the favor of a special Search page and this has\n    been broken for the recent little while.\n\n  - Fixed #203: Updated the Yahoo price source implementation to use the\n    undocumented v7 and v8 APIs; moved away from the \"ichart\" and \"download\"\n    APIs. The Yahoo importer is back in function.\n\n    This introduced a new dependency on the awesome 'requests' library, which\n    really, was quite inevitable).\n\n\n2018-04-01\n\n  - Merged PR65: Use parse_version to compare versions; then replicated\n    parse_version() locally to avoid the dependency on setuptools.\n\n  - Merged PR15 by Johannes Harms:\n    Added the following features to the forecasting plugin:\n    - Yearly repetition of recurring transactions (instead of just monthly)\n    - Users may optionally specify an end date\n    - Users may optionally specify the number of repetitions\n    \"I used this code to calculate scenarios for a possible real estate purchase\n    and I contribute a cleaned-up version as an example file.\"\n\n  - Merged PR54 & Fixed #232: Align quoted commodities correctly in ledger price\n    statements (from Martin Michlmayr).\n\n  - Merged PR57: query_execute: Allow ordering by columns which may be None\n    (from Jakob Schnitzer). Made some adjustments to generalize on all\n    datatypes.\n\n  - Merged PR62: Also allow 0/0 in SAFEDIV() (from Jakob Schnitzer), with small\n    adjustments to catch only the specific invalid operations on Decimal.\n\n  - Merged PR64 from yagebu@ (Jakob Schnitzer), which makes the Inventory class\n    rely on the fact that Position is immutable in order to avoid unnecessary\n    copies. This yields an 18% speedup with no difference.\n\n  - Removed unused and invalid mutating method Position.set_units(). Amazing\n    obsolete stuff like this can still be found.\n\n\n2018-03-31\n\n  - Fixed #10: \"print from close_date\" causes problems on account open. This was\n    stemming from a bug in the implementation of the FROM clause execution. I\n    changed the \"entry\" context functions to also accept a RowContext object, as\n    the simple functions may be called in either entry or posting context.\n\n    (The SQL shell remains the part of Beancount which is severely undertested\n    and wading into that code once again has convinced me I need to rewrite the\n    shell from scratch, it'll be simpler and better. The distinction between\n    entry and posting context will go away in the next version.)\n\n  - Fixed #120: Documents directive with a trailing slash fails.\n\n\n2018-03-28\n\n  - Fixed failing test in amount_test probably due to some recent merges.\n\n\n2018-03-27\n\n  - Completed PR #59 which adds support for globbing patterns in includes,\n    inserting a chdir() around glob.glob() to handle expansion of relative\n    filenames. (Credits to Martin Michlmayr for submitting the patch in the\n    first place.)\n\n\n* Version: 2.0.0\n\n2018-03-27\n\n  - Released 2.0.0. Today we're starting versioning Beancount. Many people have\n    been waiting for this in order to manage their dependencies (e.g. Fava\n    users).\n\n    We're loosely adopting semantic versioning (https://semver.org/) where bug\n    fixes will be posted as 0.0.x releases, and new features that don't break\n    existing functionality (nor change it too much) will be posted as 0.x.0\n    releases.\n\n    Note: There's nothing special about this particular point in time, other\n    than I haven't added much features in the last six months and have mainly\n    been fixing bugs and accepting bug reports in order to make sure things are\n    stable. There are plenty remaining bug reports and it's not perfect.\n    Addressing some of these will involve making changes that could break\n    existing functionality. For this reason, I prefer to release now and make\n    those changes as part of point releases later on.\n\n\n2018-03-26\n\n  - Fixed #245: Synchronized the definition of a valid account regular\n    expression between the lexer and the later enhanced version (in Python)\n    which checks the configured prefixes. A valid subaccount name may start with\n    either a capital letter or a number.\n\n\n2018-03-23\n\n  - Removed deprecated methods from beancount.core (position, inventory,\n    interpolation).\n\n\n2018-03-22\n\n  - Fixed #249: Error messages involving postings should start counting at 1\n    instead of 0. (I agree.)\n\n  - Added aliases for COMMODITY_META() vs. CURRENCY_META() and CURRENCY() and\n    COMMODITY(). These terms are used interchangeably. In the next version of\n    the shell, only one of them will be available.\n\n  - Removed the ability to explicitly set a different price currency than a cost\n    currency. I'm stunned my test for this is gone, I must have removed this by\n    accident? No idea. It should not be allowed.\n\n\n2018-03-19\n\n  - Fixed #218, added a SAFEDIV function to the shell language.\n\n  - Fixed #239, HELP command should tolerate semicolons and whitespace.\n    (Also, don't print shell commands in test (remove docstrings), we want the\n    name of the tests to list, not the input.)\n\n\n2018-03-13\n\n  - Removed SIMPLE booking method and all traces of it, including the\n    'booking_algorithm' option. Only the later (I hesitate to say \"newer\"\n    because it's been around for years) FULL booking method is supported\n    onwards.\n\n  - Fixed #35: Implemented implicit group-by syntax. That is, if you omit the\n    GROUP BY clause, it is automatically inferred to be the non-aggregate\n    columns. This make writing the type of simple queries we do much more\n    convenient and allows you to be a little sloppy.\n\n  - Fixed bug with unit test util for docutil, which was stripping the first\n    empty line of the docstring (and failing).\n\n\n2018-03-02\n\n  - Made the 'readline' library conditional, for Windows support.\n    See PR46.\n\n\n2018-02-23\n\n  - Fixed #219: Restored sorting of the entries in the extractor. File order\n    will have to be maintained by extracting the line no, which is used as a\n    secondary key.\n\n\n2018-02-19\n\n  - Added prototype for converting Google Docs doc from docx and rst\n    conversions, using the docx blocks to insert indented versions in the rst\n    file.\n\n  - Removed deprecated beancount.ops.prices module.\n\n\n2018-02-17\n\n  - Added an option to the CSV importer for the string separating the narration\n    (default: \"; \").\n\n  - Merged a change submitted by @droogmic to add options for the dateutils\n    parser, in order to disambiguate between day-first (DD-MM-YYYY) vs.\n    month-first (MM-DD-YYYY) date representations.\n\n  - Created a new plugin \"check_closing\" that automatically inserts a zero\n    balance check after postings which are known - and flagged, using metadata -\n    to be closing trades.\n\n  - Fixed bug in \"sellgains\" plugin whereby a price of zero units failed an\n    assertion. Added a test.\n\n\n2018-02-12\n\n  - Added a side-effects local variable saver utility for writing importers.\n\n  - Fixed #212: Clarified error message for error in covering non-aggregate\n    targets.\n\n  - The Importer.extract() method now accepts a new parameters with the prior\n    entries (or None, if not specified) as 'existing_entries'. It's free to use\n    that as it pleases in order to flag entries as duplicates. The entries\n    returned by Importer.extract() will be checked for __duplicate__ metadata\n    and automatically inserted to that set if it is present. This allows the\n    importer to return some duplicate entries for context - which will be\n    rendered as such in the output, e.g. commented out - without having to\n    necessarily throw them away.\n\n    (The previous signature is still supported in order to avoid breaking\n    everyone's importers.)\n\n\n2018-01-31\n\n  - Modified 'divert_expenses' plugin to store the original account name as\n    metadata of diverted postings, so that they can be picked up by the\n    extract_tagged script and brought back into the extract file.\n\n\n2018-01-29\n\n  - Created a new 'divert_expenses' plugin to redirect Expenses postings from\n    transactions tagged with a particular tag to another account. See this\n    thread for details:\n    https://docs.google.com/drawings/d/18fTrrGlmz0jFbfcGGHTffbdRwbmST8r9_3O26Dd1Xww/edit?usp=sharing\n\n  - Added account_types.is_account_type() function, which should be used above\n    account_types.get_account_type().\n\n\n2018-01-23\n\n  - Removed the insertion of 'balance' metadata from the importer. We use it for\n    inserting Balance entries, not attach as metadata.\n\n  - Disabled Balance insertion CSV test;\n    03d9a5c3b2784a6f6a05c12eaeb7776f0478a96d broke the insertion of Balance\n    entries without inserting 'balance' metadata. We'll probably have to revert the\n    sorting changes and that. For now, fix the test.\n\n  - Fixed #210: Changed the bean-price option --undeclared to accept a string\n    value, the name of the Python source module to use for fetching undeclared\n    commodities.\n\n  - Added an error on using explicit merge cost syntax (this one: {..., *}).\n    It's not supported yet, like AVERAGE cost booking (I probably should not\n    have enabled the syntax until it was done. I was hopeful and moving fast at\n    the time).\n\n\n2018-01-16\n\n  - CSV importer: Added an option not to add balance metadata to output.\n  - CSV importer: Also, fixed a bug I introduced in the recent PR merge with\n    rendering the name of the importer.\n  - SQL importer: Made \"location\" field support transactions with metadata with\n    missing filename and line no. Some plugins might be doing that.\n\n\n2018-01-08\n\n  - Fixed #209: Don't require 'ido. User will have to make sure that\n    beancount-use-ido is false.\n\n\n2018-01-07\n\n  - Merged https://bitbucket.org/blais/beancount/pull-requests/28/allow-one-character-top-level-account,\n    allowing one character top-level account names in the syntax. This doesn't\n    mess with the flag token generateion because the account name is required to\n    have at least two components.\n\n\n2017-12-09\n\n  - Fixed rendering of price directives to use the display context precision.\n\n\n2017-11-24\n\n  - Silenced annoying warning about file_cache version incompatibility in\n    upload-to-sheets.\n\n\n2017-10-28\n\n  - Fixed bug with identification based on the first line of a file.\n\n  - Fixed bug with 'context' on a directive that's not a transaction.\n\n\n2017-09-30\n\n  - Fixed a bug in reduction booking that would fail when the units are omitted.\n\n\n2017-09-17\n\n  - Fixed bug in Balance check, detect when an account does not exist and handle\n    it properly.\n\n  - Added bean-difference script, used to reconcile transactions in multiple\n    files after a long trip.\n\n\n2017-09-06\n\n  - Added ABS() implementation to SQL shell for Position and Inventory types.\n    See https://groups.google.com/d/msg/beancount/0i4w98LmS6E/JJGOKSB8CQAJ\n\n\n2017-08-08\n\n  - Accept account name components as numbers only. The grammar safely supports\n    this because of the leading semi-colon, all the tests pass, and everything\n    runs on my own very large input files.\n\n  - Fixed a failing test with MIME mis-categorization which occurred under\n    Ubuntu.\n\n\n2017-07-25\n\n  - Fixed #181: Support underscores in Python module names for price sources\n    (thanks to Stephan Mueller for reporting).\n\n\n2017-07-23\n\n  - Fixed #179: Scientific notation should never appear in rendered output.\n\n\n2017-07-02\n\n  - Fixed minor bug with rendering postings with missing numbers.\n\n\n2017-07-06\n\n  - More changes on #173: use a stringify two-level macro in order to place the\n    parser source hash as a string in the source file. Hopefully this should\n    also work under MSDEV.\n\n\n2017-07-05\n\n  - Fixed #173: Added a potential fix for building under MSDEV. Thanks to Alan\n    Ray for pointing out a method to build with MSDEV under Windows.\n\n\n2017-06-25\n\n  - Fixed a minor bug in the tolerance inference code that wouldn't accept a\n    posting with a missing number only, e.g. Assets:Checking  USD @ 1.32 CAD.\n\n  - Added a \"--no-colon\" option to both bean-web and bean-bake in order to\n    support Windows filesystems which do not allow colons in filenames.\n\n\n2017-06-22\n\n  - Added --numberify option to bean-query, which for CSV output will remove the\n    currencies of any Amount column. This is great for then uploading to a\n    spreadsheet.\n\n\n2017-05-28\n\n  - Merged patch from Felix Eckhofer that adds an option to bean-format to make\n    it use a fixed width. I've been wanting this myself for a while actually, I\n    think a fixed value makes more sense than what I'd done previously and\n    should eventually be made the default.\n\n\n2017-05-24\n\n  - Implemented beancount.plugins.auto and beancount.plugins.pedantic. I've been\n    wanting to do this for a while. When writing quick-and-dirty little tests,\n    inserting 'plugin \"beancount.plugins.auto\"' is quick and does the job, and\n    if you want absolutely all the verifications and to make Beancount as\n    pedantic as possible, you should be able to adopt 'plugin\n    \"beancount.plugins.pedantic\"'.\n\n    In order to do that I had to make the loader support plugin definitions\n    whose __plugins__ attribute is a function reference, not just a string. It\n    supports both now.\n\n  - A number like this now fails to parse: 1,245,449,72.00 USD. I added a test\n    in the lexer to tighten the parser. This has been brought up before and will\n    potentially avoid input errors.\n\n\n2017-05-20\n\n  - Clarified error message for price format specified on the command-line.\n\n\n2017-05-08\n\n  - Made the open/close map return by the getters not a defaultdict by default,\n    so that accidentally looking up elements won't mutate it.\n\n\n2017-04-30\n\n  - Moved src/python/beancount/... to beancount/...\n    The purpose is to structure this project in the most common way\n    people expect it (most Python OSS projects have this structure, with the\n    package name directory at the root). I've had this other structure for a\n    while mainly for historical reasons. I wanted to make this clean before\n    baking a final 2.0 release and switching to numbered releases.\n\n  - Moved src/elisp/beancount.el to editors/emacs/beancount.el and made\n    necessary adjustments.\n\n  - Merged incomplete changes from booking branch to \"default.\" The work on\n    supporting self-reduction (see\n    http://furius.ca/benacount/doc/self-reductions) won't be carried during 2.0,\n    it will be subject of a subsequent release.\n\n  - This concludes the merging of all the branches, which I've done in order to\n    move the source to a more regular project directory (under /beancount).\n\n\n2017-04-29\n\n  - Fixed #27: IN membership operator did not have a proper precedence definition.\n\n\n2017-03-19\n\n  - Fixed minor bug with CSV importer that would occur when the file has no\n    valid columns.\n\n\n2017-01-26\n\n  - (internal) Moved the implementation of booking methods to its own\n    beancount.parser.booking_methods module.\n\n  - (internal) Split up the booking methods to functions for exhaustive testing\n    and allowing others to implement new methods more easily if desired.\n\n\n2017-01-22\n\n  - Added new price source fetcher from OANDA's API. It supports a large number\n    of currency pairs with tickers like this \"XXX_YYY\", such as \"EUR_USD\". Use\n    it like the other price sources, e.g., like this:\n\n      bean-price -e 'USD:oanda/EUR_USD'\n\n  - Began working on the conversion of Google Docs to reStructuredText for\n    inclusion in Dominik Aumayr's docs.\n\n\n2017-01-21\n\n  - Fixed #155: Use entry_points instead of scripts in setup.py.\n\n  - Added an extra check for Balance directives, verifying that asserted\n    currencies are accepted currencies for that account (if the account's\n    corresponding currencies have been declared explicitly). In other words,\n    this will now fail instead of being silently ignored:\n\n      2017-01-21 open Assets:Checking    CAD\n      2017-01-21 balance Assets:Checking  0.00 USD\n\n  - Fixed bug in sheets_upload.py / upload-to-sheets whereby all the fields of a\n    sheet being updated just in order to resize it was causing the sheet to be\n    reindexed at the front of the list of sheets.\n\n  - Merged 'arithmetic_ops' branch with no effect, in order to move all files\n    and release. This will have to be revisited later.\n\n\n2017-01-19\n\n  - Fixed bug with generation of column names in sheets uploader script.\n\n\n2017-01-16\n\n  - Removed tools/gauth (used to be beancount.docs.gauth). All users of this are\n    slightly different, and they're utility scripts. Unfactoring.\n\n  - Removed beancount.docs from Beancount library. These are internal tools used\n    to manage documentation, should not be included in the installed codebase.\n\n  - Some cleanup of internal tools.\n\n  - Added some basic unit tetsts for beancount.tools.sheets_upload.\n\n  - Moved bin/upload-to-sheets to src/python/beancount/tools/sheets_upload.py\n    and replaced it with an associated stub for it.\n\n  - Moved bin/treeify to src/python/beancount/tools/treeify.py. The script is\n    still usable in a standalone form (no new dependencies have been added). To\n    have all the source code in one place is more convenient for maintenance.\n\n  - Created a beancount.tools package to contain all standalone tools which\n    don't depend on Beancount modules or packages.\n\n  - Removed branch \"returns2\" and moved associated projects script\n    beancount.projects.returns to experiments/returns. This code isn't robust\n    enough to work for everyone, and so therefore I'm moving it back to\n    experiments until I have time to produce something that will work very\n    robustly, and on all my own accounts as well.\n\n\n2017-01-15\n\n  (from branch \"conversions\")\n\n  - Created and test beancount.core.convert Posting and Position conversion\n    functions: get_units(), get_cost(), get_weight(), get_value() (for market\n    value).\n\n  - Implemented Inventory.reduce() and associated test, which works in\n    conjunction with those.\n\n  - Implemented more straightforward versions of convert_position() and\n    convert_amount() in module beancount.core.convert, to convert positions and\n    amounts to other currencies.\n\n  - Deprecated Inventory.units(); use Inventory.reduce(convert.get_units)\n\n  - Deprecated Inventory.cost(); use Inventory.reduce(convert.get_cost)\n\n  - Deprecated Inventory.get_units() to Inventory.get_currency_units() in order to\n    avoid future name confusion.\n\n  - Deprecated Position.at_cost(); use convert.get_cost(position) instead.\n\n  - Deprecated Position.get_cost(); use convert.get_cost(position) instead.\n\n  - Deprecated b.c.interpolation.compute_cost_basis(); use\n    Inventory.(pos for pos in positions if pos.cost is not\n    None).reduce(convert.get_cost)\n    instead.\n\n  - Deprecated get_posting_weight(); use convert.get_weight() instead.\n\n  - Removed b.ops.holdings.get_pholding_market_value(), which was unused.\n    If you need a market-value function, use convert.get_value() instead.\n\n  - Converted all the old code to these new converted functions.\n\n  - Moved module beancount.ops.prices to beancount.core.prices, and added a\n    deprecation warning.\n\n  - Deprecated shell function PRICE(). Renamed it to GETPRICE() in order to\n    avoid confusion.\n\n  - Removed beancount.core.prices.convert_amount(). Use\n    beancount.core.convert.convert_amount() instead. Note that a failure doesn't\n    return None anymore, but an unmodified amount. Also notice the reordering of\n    parameters to be consistent with the other functions in that module.\n\n  - Removed beancount.core.prices.get_position_market_value();\n    use convert.get_value() instead.\n\n  - Removed beancount.core.prices.get_inventory_market_value();\n    use Inventory.reduce(convert.get_value, price_map) instead.\n\n  - Removed private functions\n      beancount.query.query_env.convert_amount(),\n      beancount.query.query_env.convert_position(), and\n      beancount.query.query_env.value_position(),\n      beancount.query.query_env.value_inventory().\n    These used to issue warnings if the conversion could not be carried out; now\n    they simply keeps the units of the position instead.\n\n\n2017-01-15\n\n  - Fixed all tests for Python-3.6.\n    Beancount has not officially been ported to Python-3.6.\n\n\n2017-01-14\n\n  - Fixed bug with generation of example that would produce an incorrect initial\n    balance for banking accounts. The example test should have been broken. (No\n    idea why this wasn't deteted earlier, probably by chance.)\n\n\n2017-01-08\n\n  - Completed \"Intro to Double-Entry Accounting\" doc.\n    http://furius.ca/beancount/doc/intro\n\n  - Added a --reverse/--descending flag to bean-extract to print the extracted\n    entries in reverse order.\n\n\n2016-12-17\n\n  - Added a --title option to upload-to-sheets in order to conveniently set the\n    document's title.\n\n  - Removed obsolete variable LEGACY_DEFAULT_TOLERANCES which had been\n    forgotten.\n\n\n2016-12-15\n\n  - Made beancount.ingest.extract print out a stack trace when an unexpected\n    exception is raised.\n\n  - Fixed bugs in beancount.query.query_render where expand wasn't being passed\n    through the rendering functions.\n\n  - Deprecated bin/upload-csv-to-google-sheet; I moved the last version to\n    beancount/experiments/gapis in case you've come to be dependent on its\n    particularities. It doesn't need any of the Beancount libraries, so you can\n    just copy it somewhere and keep using it if so desired.\n\n  - Replaced \"bin/upload-csv-to-google-sheet\" to \"bin/upload-to-sheets\". The\n    newer script is a complete rewrite which does not require the antiquated\n    gdata library, and which uses the latest and greatest version of the Google\n    Sheets API (v4). You don't need gdata anymore. Moreover, this one runs in\n    Python3 instead of depending on Python2.\n\n    The script has slightly improved invocation semantics, and I'll using it\n    regularly to share CSV files with others, most often CSV files produced by\n    bean-query.\n\n\n2016-12-11\n\n  - Changed b.p.split_expenses outputs to be more useful.\n\n\n2016-12-10\n\n  - Made Amount, Posting, Cost and CostSpec all immutable classes that inherit\n    from typing.NamedTuple.\n\n  - Removed mutable method Posting.add().\n\n\n2016-12-05\n\n  - Merged changes made for calculating wash sales a long time ago. I had\n    implemnted a temporary kludge to carry dates on all augmenting postings,\n    left it in a branch so I could use it there for taxes every year. Now that\n    the booking branch is merged, this is supported by default, so I could undo\n    that kludge. Some changes remained:\n\n    * The Inventory.add_amount() method used to return the modified position.\n      Now it returns the position before being modified, which is more useful.\n\n    * The list-wash-sales.py script has been updated. It now works on 'default'.\n\n    * The 'carry_date_and_book_cost' branch has been merged away.\n\n\n2016-12-04\n\n  - Made .tags and .links attributes of b.data.Transaction and b.data.Document\n    directives ensured to always be a set when they're empty. If there are no\n    tags (or links), those attributes are set to b.data.EMPTY_SET, whose value\n    is a frozenset(). This should make the processing of those attributes a bit\n    simpler.\n\n    Note that if you create transactions from plugins and their tags and/or\n    links attributes are set None, they will now fail. The right thing to do is\n    to set their value to an empty set, or reuse the immutable\n    beancount.core.data.EMPTY_SET object.\n\n    If you need to circumvent this temporarily, set the following option in your\n    file, which will allow None again:\n\n      option \"allow_deprecated_none_for_tags_and_links\" \"TRUE\"\n\n    See {1989ba9e0e79} for details.\n\n  - Updated all copyright and license notices on all files.\n\n  - Added a script to automatically verify that all source files include a\n    copyright notice.\n\n  - Removed ancestral Beancount documentation from eons ago. These notes and\n    conversationsa are now wildly irrelevant to the current state of Beancount,\n    and all the documentation from Google Docs is vastly more recent and\n    obsoletes all these old snippets and notes.\n\n  - Moved all development tools under tools/, from etc/ and\n    experiments/code-health/.\n\n\n2016-12-03\n\n  - Fixed fava bug #429, avoid empty conversion entries if the cost of the\n    conversion balance is zero. See:\n    https://github.com/beancount/fava/issues/429.\n\n\n2016-11-20\n\n  - Fixed bugs in bean-format; in order to do this properly I made bean-format\n    reuse the globally defined regular expressions for currency and account in\n    the rest of Beancount's code. This makes bean-format depend on the Beancount\n    installation. Bah, it's reasonable. This issue is related to issue #146.\n\n  - Added ANY_META() function to the SQL shell's environment; ANY_META() allows\n    you to query a posting's metadata, falling back on the parent entry's\n    metadata. This idea was suggested by Stefano Zacchiroli in\n    https://groups.google.com/d/msg/beancount/jh-n4rvbQAI/Hz5Mmd60BAAJ. I also\n    added the first unit tests for environment functions--I'll have to write all\n    of those at some point.\n\n  - Made unsupported cost specifications in the SIMPLE booking algorithm issue\n    an appropriate error. For example, instead of just ignoring the cost spec in\n    this:\n\n          2014-10-15 * \"buy widgets\"\n            Assets:Inventory     10 WIDGET {} ;; Not supported.\n            Assets:Cash         -80 GBP\n\n    It will issue an error. See\n    https://groups.google.com/d/msg/beancount/9NBcT-SXZMQ/sy7Z3dIdBQAJ for\n    context.\n\n\n2016-11-12\n\n  - Made the Emacs prefix key configurable via a new beancount-mode-map-prefix\n    variable. See discussion here:\n    https://groups.google.com/d/msg/beancount/_7TscZ9phNE/K8PkcRMpBAAJ\n\n\n2016-11-06\n\n  - Fixed #139: Full booking parsing had been more liberal than the old SIMPLE\n    booking algorithm can interpret. In the old code, explicitly disallow some\n    interpolation cases which cannot be handled.\n\n  - Fixed #129: Ignore custom directives for Ledger and HLedger conversion.\n\n\n2016-11-05\n\n  - Fixed #142: bean-check should return non-zero exit code upon failure.\n\n\n2016-10-30\n\n  - Merge the current version of the 'booking' branch and made the \"FULL\" booking\n    algorithm the default one.\n\n    * The \"experiment_booking_algorithm\" option has been renamed to\n      \"booking_algorithm\". Its default value is now \"FULL\"; everyone will be\n      using the new booking code. If for some reason you have a transitional\n      need to revert to the older booking method use this option.\n\n        option \"booking_algorithm\" \"SIMPLE\"\n\n    * The new booking algorithm is _MUCH_ more powerful than the one old. I'll\n      describe it soon in a new document, but briefly:\n\n      - It supports many more interpolation capabilities; try omitting amounts\n        or currencies which you think it ought be able to figure out\n        automatically and you might find it does.\n\n      - All positions carry a date. This means that if you have transactions\n        that would merge because they weren't specified with a date, like this\n        you may face a problem:\n\n          2016-01-15 *\n            Assets:Investments          70 UUG {10.00 USD}\n            ...\n\n          2016-02-16 *\n            Assets:Investments          25 UUG {10.00 USD}\n            ...\n\n          2016-03-30 *\n            Assets:Investments         -80 UUG {10.00 USD}\n            ...\n\n        Those used to resolve automatically because both augmenting lots would\n        merge into a single one without a date. Now that all positions have an\n        acquisition date, the -80 reducing posting is ambiguous, because it\n        matches against these:\n\n            Assets:Investments          70 UUG {10.00 USD, 2016-01-15}\n            Assets:Investments          25 UUG {10.00 USD, 2016-02-16}\n\n        Either you'll have to disambiguate, or let Beancount do so. One way to\n        do this is to add more specific matching data, and split the posting.\n        An even easier way to do this is to make the default booking method of\n        this account to \"FIFO\" or \"LIFO\", which will automatically select the\n        oldest (newest) postings without issuing a warning.\n\n        If you find yourself in a bind, please email the mailing-list with a\n        specific and as small as possible data input that reproduces the\n        problem.\n\n\n  - Removed parsing of the pipe (|) symbol as a separator for strings on\n    transaction description lines. This was vestigial from the days long long\n    ago when Beancount was attempting to be compatible with Ledger syntax; this\n    is wholly unnecessary how.\n\n    You will have to convert transactions like this:\n\n      2015-08-25 * \"Tunnel\" | \"Coffees\"\n        Expenses:Food:Coffee           15 CAD\n        Assets:Cash\n\n    Into transactions like this:\n\n      2015-08-25 * \"Tunnel\" \"Coffees\"\n        Expenses:Food:Coffee           15 CAD\n        Assets:Cash\n\n    This can be done using a sed script, or as a macro in your favorite text editor.\n    If you need a temporary respite, you can use the following option, which\n    will replace all the error messages by a single warning:\n\n      option \"allow_pipe_separator\" \"TRUE\"\n\n    Support for this option will be removed eventually.\n\n\n  - Moved the {{...}}} total cost syntax from a legacy support with only \"/\"\n    separator and a date, no label, to full support. Previously, only these syntaxes\n    were supported for total cost:\n\n      Assets:Account     100 MSFT {{2000.00 USD}}\n      Assets:Account     100 MSFT {{2000.00 USD / 2016-10-30}}\n\n    Changes:\n\n    * The \"/\" separator support has been removed, you must now use a comma, like\n      for the {...} full booking syntax.\n\n    * The same syntax as for the regular {...} compound cost is supported;\n      however, specifying a compound amount will raise an error, and the\n      per-unit cost is interpreted as a total cost.\n\n    For example, this:\n\n      Assets:Account     100 MSFT {{2000.00 USD}}\n\n    is interpreted as:\n\n      Assets:Account     100 MSFT {0 # 2000.00 USD}\n\n    which is equivalent to:\n\n      Assets:Account     100 MSFT {20.00 USD}\n\n    And the following will raise an error, it is not legal syntax:\n\n      Assets:Account     100 MSFT {{0 # 2000.00 USD}}\n\n    Finally, specifying a date and a label can be done, just like for {...}:\n\n      Assets:Account     100 MSFT {{2000.00 USD, 2011-10-30, \"ref32\"}}\n\n    The intention here is to deprecate the older limited syntax while keeping\n    support for total cost input using {{...}}. Based on previous questions, I\n    suspect that many users are still using {{...}} instead of {{# ...}}, so I\n    won't remove it just yet.\n\n  - Removed very old compatibility code in beancount.core.amount that lived\n    since I cleaned up the definition of the D() constructor and moved it to\n    beancount.core.number.\n\n  - Removed built-in aliases for auto_accounts and implicit_prices modules, from\n    beancount.ops to beancount.plugins.\n\n  - Removed deprecated option \"default_tolerance\" (which had been renamed to\n    \"inferred_tolerance_default\").\n\n  - Removed deprecated option \"tolerance\".\n\n  - Remove deprecated use of 'plugin' as an option. The directive ought to be\n    the only way.\n\n  - Removed deprecated option \"experiment_explicit_tolerances\".\n\n  - Renamed \"experiment_booking_algorithm\" to \"booking_algorithm\", and changed\n    the default value to \"FULL\". The old \"SIMPLE\" algorithm will be deprecated\n    eventually.\n\n  - Removed old code that would warn if the user set account_rounding to a full\n    account name; it just needs be a subaccount.\n\n  - Commit to Python 3.5. 3.5.0 released more than a year ago. You need to\n    update or stick with the 2.0b13 release.\n\n  - Remove old code to dispatch between an external Enum class and the built-in\n    one that's included in 3.5 (commit to 3.5).\n\n  - Added type annotations to beancount.core.data. This will grow more over\n    time. (I also need to add rules to use those.)\n\n\n2016-10-23\n\n  - Modified parsing of transaction strings and links and tags. I did this to\n    factor out the parsing of tags and links in order to add it to other\n    transactions and minimize grammar code. There is user-visible impact to this\n    change: all of a transaction's strings must appear before tags or links. You\n    cannot place tags or links before or in-between strings anymore. This is a\n    reasonable restriction and I doubt anybody did anyway.\n\n  - Added support for tags and links to the Document directive. This works just\n    as for Transactions, e.g.\n\n      2016-10-23 document Assets:Checking \"/statements/oct.pdf\" #banking ^9fed846348c2\n\n    The current tags on the tag stack are also included, like for transactions.\n\n\n2016-10-10\n\n  - Removed \"experiment_explicit_tolerances\" flag; made this supported by\n    default permanently.\n\n\n2016-10-08\n\n  - Documented a subtle problem reported about balances against inventory of\n    mixed at-cost and no-cost, added more context to the error and a unit test\n    for balance checks with mixed at-cost and no-cost positions.\n\n  - Fixed a bug in the full booking matching code whereby an existing position\n    not held at cost would trip up the matching code. (Credits to Son Nguyen for\n    finding and reporting.)\n\n  - During ingest, when multiple extractors match a particular file, select the\n    first matching account instead of raising an error.\n\n  - Fixed accidentally colliding key-binding for invoking bean-price from Emacs,\n    to C-c p.\n\n\n2016-09-25\n\n  - Fixed typo in grammar that was parsing a transaction flag as '#' into '*'.\n\n  - Added \"cost_date\" and \"cost_label\" columns in the SQL shell.\n\n\n2016-09-04\n\n  - Implemented new \"run\" shell command that allows you to run a named query.\n    For example, if an input file has a Query directive like this:\n\n      2016-09-01 query \"home\" \"select account, sum(position) where account ~ 'Home' group by 1\"\n\n    And you input this command:\n\n      run home\n\n    The entries will be closed at tue query date (2016-09-01) and the query\n    automatically run. If you want to always include all the transactions, set a\n    date far into the future.\n\n    This works from the command-line and from the shell, equally. You can also\n    run all the queries in an input file, like this:\n\n      run *\n\n    To view the list of available queries, just type the \"run\" command without\n    an argument.\n\n\n2016-08-21\n\n  - Fixed a SQL shell bug with extracting UNITS() from a Position column.\n\n  - Finally properly fixed the timezone of the Google Finance price fetcher.\n    (It was done incorrectly and I found my unit tests failing whenever I would\n    work on Beancount from another timezone.)\n\n\n2016-08-17\n\n  - Added beancount.core.amount.abs() function for absolute values of Amount.\n\n  - Added rendering of links to beancount.plugins.split_expenses plugin, and\n    made it quiet by default. Added --output-stdout option to make it do that\n    again.\n\n  - Created a new experimental script that attempts to match postings between\n    two ledgers. A pair of (filename, account-regexp) is provided for each, and\n    then the amounts and links are compared and paired up, and remaining\n    unmatched postings are printed out. This is very useful to reconcile trip\n    expenses between a personal ledger and the ledger for a trip or external\n    project where some of the expenses are paid from the personal ledger as\n    contributions to the trip or project.\n\n  - Made the upload-csv-to-google-sheet script use the basename (without\n    extension) of the given filenames as sheet names instead of \"Sheet X\"\n    numbers. (Note: This entire thing be rewritten using the new Google Sheets\n    API which won't require gdata and which will be more stable.)\n\n  - Added a quick implementation of b.q.query_render.render_csv()\n    and refactored b.q.query_render.render_text() to use common code. Both\n    functions now have a new 'expand' option which will create multiple rows for\n    cells which return a list of strings. The new default behavior is to\n    concatenate the strings with commas.\n\n    The shell (bean-query) has a new 'expand' shell variable to match. Also, the\n    -f/--format option of it is now supported, and in interactive mode it sets\n    the default value for 'expand'.\n\n  - Since output to CSV is now implemented, I enabled the --output-csv option of\n    b.p.split_expenses as well.\n\n\n2016-08-14\n\n  - Fixed bug in beancount.utils.file_type for Python3, whereby magic now returns\n    bytes, not a string\n\n\n2016-08-04\n\n  - Made account name components allowed to have two characters (beyond the\n    first component). For instance, Assets:Investments:F is now a valid account\n    name.\n\n\n2016-07-11\n\n  - Added parsing a transaction date column to metadata in the CSV importer.\n\n\n2016-07-01\n\n  - bean-format now accepts input from stdin.\n\n\n2016-06-30\n\n  - Make it possible for a BALANCES statement to have a WHERE clause. BALANCES\n    is now equivalent to\n\n      SELECT account, sum(position) FROM ... WHERE ... GROUP BY account\n\n    Inching one step closer to removing that WHERE clause eventually.\n\n\n2016-06-18\n\n  - Added support for columns AMOUNT_DEBIT and AMOUNT_CREDIT in the csv\n    importer.\n\n  - Merged ongoing progress from 'booking' branch; if you don't use any of the\n    in-progress new booking methods, this should not have any effect.\n\n    However, the 'booking_method has changed names and you may have to adjust\n    its values if you've been tinkering with it:\n\n    * 'booking_method' used to take on value \"SIMPLE\" or \"FULL\" and dispatch\n      betwee the current (old) booking implementation and the new one which will\n      support many other booking methods. This option is now named\n      'experiment_booking_algorithm' (a new option) and takes on the same\n      values. The default value is \"SIMPLE\", which keeps the behavior unchanged.\n      Use \"FULL\" if you want to test out the new booking algorithm: the new\n      algorithms should work except for the AVERAGE cost method. WARNING: This\n      is still under flux and considered unreleased.\n\n    \" 'booking_method': This is a different option now, and takes the value of\n      any one of the booking methods visible here:\n      https://bitbucket.org/blais/beancount/src/7b9e00e6e19136f680befc1d4322f47cdc294cf6/src/python/beancount/core/data.py?at=booking&fileviewer=file-view-default#data.py-64\n\n\n2016-06-13\n\n  - Ported beancount.docs.download_docs to the v3 drive API and the use of a\n    service account instead of a full access to a user account. Service accounts\n    are easier to configure and work with.\n\n  - Ported beancount.docs.upload_options to the v3 drive API.\n\n\n2016-06-05\n\n  - Added a new column to the posting context: \"other_accounts\" is a set of\n    account strings for the other postings of the transaction.\n\n  - Added a new JOINSTR() generic function to the shell, to reduce the repeated\n    column above to a single comma-separated string.\n\n\n2016-05-28\n\n  - Made various changes to the shell in order to make it possible to convert to\n    the market value:\n\n    * CONVERT() has been converted to convert to the market value, when applied\n      to a position held at cost. However, it still requires a target currency\n      and it may fail if you apply it to a position for which the cost currency\n      differs from that of the target currency, i.e., it will not automatically\n      chase down the transitive conversions toward the desired target currency.\n\n    * A new function VALUE() has been added, which is similar to CONVERT() but\n      which when applied to a position held at cost converts to the cost\n      currency at the current price. It's similar to CONVERT() but you don't\n      have to provide the target currency. And similarly to CONVERT(), you may\n      provide a particular date, and if at that date there is no available\n      conversion rate in the prices database, the conversion will fail\n      analogously and spit out an error message.\n\n    * PRICE() has been renamed to GETPRICE() to avoid some confusion. PRICE()\n      does not convert, it merely gets the price from the price database.\n      GETPRICE() is thus a more appropriate name.\n\n\n2016-05-22\n\n  - Created the beancount.plugins.mark_unverified plugin as a response to this\n    thread: https://groups.google.com/d/msg/beancount/hQoOSJE7qNo/-E__v-XhEgAJ\n\n    This plugin makes it possible to compute the balances as of the last Balance\n    directive of each account by adding metadata to postings which appear after\n    that account's last balance. You'd filter out unverified postings with an SQL\n    query on meta-data like this:\n\n      SELECT account, sum(position)\n      WHERE NOT meta('unverified')\n      GROUP BY 1\n      ORDER BY 1\n\n    Note that the resulting balanaces almost certainly don't sum up to zero,\n    because of differing dates of the Balance directives. Also, note that\n    accounts without a single Balance directive will not have their postings\n    marked at all.\n\n\n2016-05-08\n\n  - In the output of bean-price, sort prices exclusively by currency, regardless\n    of date. This is because on weekends you'll tend to get slightly varying\n    dates, and manual/occasional price updates are usually put in \"chunks\" in a\n    file section. It's easier to visually find the price by scanning by currency\n    order.\n\n\n2016-05-05\n\n  - Added a shell function to filter a set of strings (for tags or links) with a\n    regular expression and return the first one. This way you can extract some\n    of the tags or links with a pattern as columns.\n\n\n2016-05-01\n\n  - Fixed issue #124, a leak in the grammar parser which would leak the entire\n    set of entries on every instance of parse.\n\n  - Fixed some warnings about unclosed files which occur only on default python\n    branch.\n\n\n2016-04-29\n\n  - Don't just log an extraction error to logging.error() in the regression\n    tests; let the exception through. This makes building and debugging\n    importers much easier.\n\n  - Created an experimental script to extract date/location information required\n    for a naturalization application.\n\n\n2016-04-24\n\n  - Rewrote the section on \"Core Data Structures\" of the Design Doc, to reflect\n    the newer internals of Beancount, those which have been merged from the\n    ongoing 'booking' branch.\n    See http://furius.ca/beancount/doc/design-doc.\n\n\n2016-04-23\n\n  - Added beancount.ingest.importers.fileonly, a simplistic importer which can\n    be instantiated to just file away some downloads without extracting anything\n    from them.\n\n\n2016-04-18\n\n  - In bean-doctor context, all the accounts should appear in the\n    post-transaction balances, even if their balance is empty. This had been\n    fixed for the pre-transaction balances but I stumbled upon a case of\n    post-transaction balances not showing an empty account.\n\n\n2016-04-17\n\n  - Added support for the BEANCOUNT_LOAD_CACHE_FILENAME environment variable,\n    which can be set in order to overridde the location of the pickle cache.\n    This variable may contain the string \"{filename}\", and if it is present the\n    basename of the beancount file will be spliced in. This can be useful if,\n    for example, you are reading your Beancount input file from a read-only\n    filesystem and still want to use the cache by specifying an alternative\n    filename.\n\n  - Fixed a bug when reading from a read-only filesystem, the loader cache would\n    fail to be removed and raise an exception.\n\n  - Fixed an important bug in beancount.ingest whereby instances of\n    b.i.cache.FileMemo weren't being shared as widely as they could have been.\n    FileMemo instances now have to be created via b.i.cache.get_file() and\n    FileMemo is now a hidden class _FileMemo. See this discussion for more details:\n    https://groups.google.com/d/msg/beancount/b-ZqYqag7AU/N-AaGSZOAwAJ\n\n\n2016-04-10\n\n  - Create a new 'beancount.plugins.fix_payees' plugin that allows the user to\n    provide a set of rules to rewrite and clean up the names of the payees from\n    the Beancount file.\n\n    While it would be ideal to do this at import time, in practice there are a\n    lot of downloaded files' \"memo\" fields which get set as the payee\n    automatically. These \"memos\" aren't very clean and readable strings: they\n    sometimes contain numbers, partial city names, and other junk. In order to\n    produce clean reports where one might want to aggregate by payee, it's\n    useful to rewrite the payees to make them nice and clean. You can use this\n    plugin to do that.\n\n\n  - Made the Custom directive accept ACCOUNT tokens. You can now do something\n    like this:\n\n      2014-06-20 custom \"budget\" Assets:Account2 \"balance < 200.00 USD\"\n\n    Prior to this, the account name had to be represented as a string. (Users of\n    the burgeoning Custom directive not like this very much.)\n\n    Note that account names and regular strings are both output from the parser\n    as 'str' objects, so in order to make this possible, I had to change the\n    representation of the values to a pair of (value, dtype). Account names have\n    a 'dtype' of beancount.core.account.TYPE. (Eventually I will probably want\n    to make account strings represented with their own custom datatypes, but\n    that will require a fair amount of work on the codebase; this substitute is\n    fine for now, as there are no other places where such a disambiguation is\n    necessary.)\n\n\n2016-04-04\n\n  - Added a test to make sure that building a source dist includes the header\n    files and C implementation files.\n\n  - Sort Document directives after Transactions when they occur on the same day.\n    The reason for this is that statements typically include transactions on\n    that final day, and we'd like for them to occur at the right place in the\n    journals. See originating thread:\n    https://groups.google.com/d/msg/beancount/3ItOYS9DJx4/VyTJB3ssBQAJ\n\n\n2016-04-03\n\n  - Fixed a bug in \"bean-doctor context\" which wouldn't report the full set of\n    accounts when an account's before-balance would be empty.\n\n  - Fixed a bug in \"bean-doctor linked\" whereby the balances wouldn't get\n    printed out if there was no link. Print the balances before and after; in\n    fact, maybe this command should be renamed to \"balances\" and have an option\n    to support links.\n\n\n2016-03-31\n\n  - Added TODAY() function to extract today's date. Not sure how useful it'll\n    be.\n\n\n2016-03-27\n\n  - Added a PRICE() function to extract entries from the price database. You can\n    now query for \"SELECT PRICE('USD', 'CAD', date)\", for example.\n\n  - Added a boolean renderer for the SQL shell.\n\n  - Added support for arithmetic operations to the bean-query SQL shell.\n\n\n2016-03-26\n\n  - Added an optional date argument to convert, so you can provide the requested\n    date in a SQL query, as in \"CONVERT(sum(position), \"CAD\", 2015-06-01)\".\n\n  - Improved the rendering of the context, removed the weird comments it used to\n    render with, render an account name if the inventory is empty.\n\n  - Ignore .DS_Store files from the file finder in ingest.\n\n\n2016-03-22\n\n  - Support multiple accounts in same ofx file. See\n    https://bitbucket.org/blais/beancount/pull-requests/10/. I applied this\n    one-liner: issue a balance for each statement, use the maximum date for the\n    file_date() method, and added unit tests for this.\n\n\n2016-03-21\n\n  - Fixed bug in beancount.ingest.file whereby two files being filed to the same\n    destination filename would clobber each other; with this fix, instead, an\n    error will be generated.\n\n  - Create an example of an importer just filing a PDF file using the external\n    tool PDFminer2. If the tool isn't installed, nothing should \"break\" (but the\n    importer won't really do its job). The tests should be skipped\n    automatically, and the importing will just ignore the PDF file to be filed.\n\n\n2016-03-20\n\n  - Implemented beancount.ingest.importers.regexp and\n    beancount.ingest.importers.config mixin classes to help support\n    functionality which used to be available in LedgerHub.\n\n  - Removed the temporary beancount.ingest.importers.compat\n    backwards-compatibility helper for LedgerHub. Not needed.\n\n  - Completed the documentation for the new import framework \"beancount.ingest\".\n    The document is here:\n    http://furius.ca/beancount/doc/ingest\n\n\n2016-03-19\n\n  - Centralized the <3.4 and >=3.4 support for Enum class into\n    beancount.utils.misc_utils.Enum.\n\n  - Added an option to the OFX importer to let the instantiator decides whether\n    a balance directive should not be inserted (NONE), should be inserted at the\n    declared date of a <ledgerbal> tag (DECLARED), or right after the last entry\n    imported from the file (LAST).\n\n\n2016-03-18\n\n  - Merged 'web_months' branch modified from changes originally submitted by\n    Dave Stephens, which implements a monthly view. You enter the monthly view\n    from the annual view.\n\n\n2016-03-14\n\n  - Added META() and ENTRY_META() functions to the SQL shell to answer a\n    question on the mailing-list (from richieuk63 at gmail dot com).\n\n  - Fixed a bug with the OFX importer whereby the Balance directive should be\n    generated to a day following the date provided in the LEDGERBAL directive.\n\n  - Added forgotten dependency on \"beautifulsoup4\" in setup.py.\n\n\n2016-03-13\n\n  - Merged more changes from the 'ingest' branch which furthers the work of\n    integrating the LedgerHub code into Beancount (almost done now).\n\n    * Added mimetype() and head() methods to the file cache object passed to the\n      extractors, as a convenience instead of having clients call the cached\n      convert() method.\n\n    * Added paranoid exception handlers to all the methods called on the\n      importer classes.\n\n    * Added tests for the examples provided in \"examples/ingest\".\n\n    * Refactor some of the code of beancount.ingest.file.\n\n    * Fixed bugs with ensuring the filenames are absolute names.\n\n    * Cleaned up the output of the commands.\n\n    * Made the header and section strings configurable from the import\n      configuration.\n\n    * Cleaned up the OFX importer from LedgerHub, added unit tests for it, and\n      added it to the beancount.ingest.importers directory. In addition, added\n      it to the example configuration for ingest under\n      beancount/examples/ingest.\n\n    * Added a dependency on the beautifulsoup4 package (bs4) in order to parse\n      XML files.\n\n  - Added a beancount.core.amount.add() function to add two amounts.\n\n  - Made the directive printer be more lenient to support incomplete postings.\n\n  - Moved the \"src/clojure\" and \"src/golang\" directories to the experiments/\n    directory; they really are experiments. Should have done this a long time\n    ago.\n\n\n2016-03-12\n\n  - Converted the amount.amount_*() functions to amount.*(). It's just simpler\n    and nicer.\n\n  - Made the beancount.report.balance_reports text reports rendered using the\n    precision from the DisplayContext, and realization.dump_balances() require a\n    formatter argument. More probaby needs to be done on issue #108 to close it,\n    but that's a good start.\n\n  - Made the beancount.plugins.auto_accounts plugin insert entries that will\n    sort stably.\n\n  - Sync up the print report code with the print command code, fixing a bug with\n    precision not being rendered correctly by the print report.\n\n  - Fixed #104: bean-format would fail on numbers with commas in them.\n\n  - Fixed #106: The \"render_commas\" option wasn't being honored. I have no idea\n    how things came to be this way, but I fixed it. When rendering numbers,\n    inserting commas for thousands (e.g., \"1,000\" vs. \"1000\") is now controlled\n    by the \"render_commas\" option, and the default is not to render them\n    (FALSE). Note:  This should affect the web interface, the reports, and the\n    PRINT command, but so far NOT the output of the SQL query reports. The\n    reason for this is historical: the query rendering code does not make use of\n    the DisplayContext; it needs to be converted to do that. See\n    https://bitbucket.org/blais/beancount/issues/105/\n    https://bitbucket.org/blais/beancount/issues/106/\n    https://bitbucket.org/blais/beancount/issues/107/ and\n    https://groups.google.com/d/msg/beancount/frfN1zc6TEc/d5OjuDnREgAJ for a\n    discussion.\n\n\n2016-03-06\n\n  - Fixed issue #83: Renamed 'default_tolerance' option to\n    'inferred_tolerance_default'.\n\n  - Added exception handlers for all importer callbacks. Badly written importers\n    should never completely throw off the tools.\n\n\n2016-03-05\n\n  - Improved handling of corrupted or out-of-date pickle cache file.\n\n  - Fixed a test that would only fail in a timzone != EST.\n\n  - Made bean-file use the configuration filename's directory as the default\n    output dir instead of requiring an option. The behavior of providing a\n    reasonable default makes most sense.\n\n\n2016-02-28\n\n  - Moved beancount.scripts.report to beancount.report.report in order to be\n    consistent with the way other libraries are invoked. I had to move\n    beancount.report.report out of the way (to beancount.report.base) to make\n    space for it.\n\n  - Moved beancount.scripts.query to beancount.query.shell in order to be\n    consistent with the way other libraries are invoked.\n\n  - Merged fix by yagebu for bug found in b.ops.summarize() that would not yield\n    a list of ordered transactions.\n\n  - Introduced a new \"Custom\" directive type. You can enter directives like\n    this:\n\n      2016-02-28 custom \"budget\" ....\n\n    where \"...\" can be a mixed list of\n\n    * string\n    * date\n    * boolean\n    * number\n    * amount (number + currency)\n\n    The first element is a string, which is intended to be used as the runtime\n    type of the directive. This can be used to prototype new features in plugins\n    or otherwise.\n\n    Right now, no consistency is enforced on the datatypes declared for\n    directives with the same type name. Also, there is currently no way for a\n    plugin to declare what a valid set of tokens may be (but I may do this later\n    on to simplify error reporting for plugin implementors).\n\n\n2016-02-27\n\n  - Fixed rendering bug in bean-web whereby empty cells would receive a 0.00\n    amount.\n\n  - Improved rendering of the account name in the name of the compat importer.\n\n\n2016-02-24\n\n  - Changed the bean-doctor \"linked\" command to fetch the set of links from the\n    entire set of entries.\n\n  - Added ABS() function to the shell, in order to dig around for transactions\n    with a particular amount.\n\n\n2016-02-22\n\n  - Fixed issue #98: There was a bug when fetching historical data from a Yahoo\n    price source was failing, it wasn't handled correctly.\n\n  - Merged LedgerHub back into beancount under a new \"beancount.ingest\" package.\n    The new protocol for importers can be read at:\n    /home/blais/p/repos/beancount1/src/python/beancount/ingest/importer.py\n\n    There are three new scripts:\n\n      bean-identify\n      bean-extract\n      bean-file\n\n    These correspond one-to-one to their ledgerhub variants.\n\n    There is a bit more work to be done to complete this - see the top of the\n    TODO file in the \"ingest\" branch if you're interested - and I'll write\n    documentation on this once all the work is completed.\n\n    LedgerHub is now officially dead.\n\n\n2016-02-20\n\n  - Create an beancount.utils.misc_utils.is_sorted() utility function to be used\n    in the new importer code.\n\n  - Match a price source over the entire source string.\n\n\n2016-02-19\n\n  - Now accepting '=' in currency symbol in order to accommodate currencies in\n    Yahoo, which look like this \"CNYUSD=X\".\n\n\n2016-02-15\n\n  - Handle an incomplete pickle file by ignoring it and regenerating it silently.\n\n\n2016-02-14\n\n  - Baked a 2.0b5 and 2.0b6 releases in a further attempt to get the included\n    files to be included by setuptools and for pip3 to be able to make a local\n    build. setuptools is horrible.\n\n  - Baked a 2.0b4 release for a more recent PyPI availability.\n\n  - Fixed issue #72 - Thanks to Gary Peck for figuring out what was wrong with\n    setuptools - and now you should be able to install via pip3 again, which\n    will pull all the dependencies automatically. If setuptools isn't installed,\n    this should degrade peacefully to distutil.\n\n\n2016-02-06\n\n  - IMPORTANT API CHANGES FOLLOW:\n\n    I made some important changes to the following classes:\n\n      beancount.core.position.Position\n      beancount.core.inventory.Inventory\n      beancount.core.data.Posting\n\n    \"Position\" objects have been restructured to reflect the structure implied\n    by the syntax. Instead of a .number (Decimal) and .lot (Lot) objects, a\n    Position now has a .units (Amount) and .cost (Cost) objects.\n\n    The \"Lot\" class has been removed; it has been replaced by a \"Cost\" class\n    with .number (Decimal), .currency (string), .date (datetime.date), .label\n    (string) attributes.\n\n    The \"Inventory\" class is a  list of \"Position\" objects, and as such it has\n    received corresponding adjustments and minor changes.\n\n    \"Posting\" objects do not contain a .position attribute anymore. Instead, the\n    data structure has been flattened to contain .units and .cost objects\n    directly. As a result, a Posting acts a bit like a subclass of a Position\n    rather than using composition to contain one.\n\n    During the parsing phase, a \"Posting\" object's .cost attribute does not\n    point to a \"Cost\" instance, but rather to a \"CostSpec\" instance, which\n    reflects the unresolved and partially incomplete lot specification from the\n    input syntax that needs to get resolved to a particular lot during the new\n    booking process.\n\n    Here's a pictorial representation of changes. Before we had:\n\n     Assets:Checking    -40    QQQ       {66.32 USD, 2015-12-14} @ 70.32 USD\n     `---account---'  `number' `--------------lot--------------' `--price--'\n                               `currency'`---cost--' `--date--'\n\n        posting                     (Posting)\n            .account                (str)\n            .position               (Position)\n                .number             (Decimal)\n                .lot                (Lot)\n                    .currency       (str)\n                    .cost           (Amount)\n                        .number     (Decimal)\n                        .currency   (str)\n                    .lot_date       (datetime.date)\n            .price                  (Amount)\n                .number             (Decimal)\n                .currency           (str)\n\n\n    After the changes we have something that looks more like the input:\n\n     Assets:Checking  -40 QQQ   {66.32 USD,   2015-12-14, \"0d6f0\"} @ 70.32 USD\n     `---account---' `-units-' `------------cost-----------------' `--price--'\n                                number currency date       label\n\n        posting             (Posting)\n            .account        (str)\n            .units          (Amount)\n                .number     (Decimal)\n                .currency   (str)\n            .cost           (Cost, CostSpec, or None)\n                .number     (Decimal)\n                .currency   (str)\n                .date       (datetime.date, or None)\n                .label      (str, or None)\n            .price          (Amount, or None)\n                .number     (Decimal)\n                .currency   (str)\n\n    And field-by-field conversions:\n\n        posting.account                    -> posting.account\n        posting.position.number            -> posting.units.number\n        posting.position.lot.currency      -> posting.units.currency\n        posting.position.lot.cost.number   -> posting.cost.number\n        posting.position.lot.cost.currency -> posting.cost.currency\n        posting.position.lot.lot_date      -> posting.cost.date\n        (none)                             -> posting.cost.label\n        posting.price.number               -> posting.price.number\n        posting.price.currency             -> posting.price.currency\n\n    Notes:\n\n    * These changes are mostly driven by the need for the parser to output\n      incomplete cost specifications. The booking of lots against existing\n      inventory is isolated in a beancount.parser.booking and before booking we\n      need to be able to represent missing values from the input syntax, since\n      the booking process is able to interpolate and fill in these missing\n      values. It was required to make important changes to the data structures\n      for this reason. The parser outputs 'posting.cost' with an instance of a\n      new \"CostSpec\" class, not \"Cost\". After booking, all the postings's costs\n      are replaced by instances of \"Cost\" and \"CostSpec\" is gone.\n\n    * This representation is much closer to the syntax. It's also flatter and\n      simpler. The original representation's design was driven by an old idea\n      that the lots were to be used as the key in Inventory mappings, but as it\n      turns out, operations on lots are just as well implemented with an\n      association list and performance isn't a problem. Moreover, lots with a\n      cost are never merged using such a mapping, only reduced against, so this\n      was an unnecessary distraction.\n\n    * If you were creating Position objects in plugins or other code, please\n      look at the new interface and make necessary changes to your code. You can\n      create new Position objects from a pair of Amount and Cost objects.\n\n\n  - beancount.core.position.lot_currency_pair() has been converted to\n    beancount.core.position.Position.currency_pair().\n\n  - Renamed beancount.core.position.Position.cost() to\n    beancount.core.position.Position.at_cost() due to the conflict resulting\n    from the Position class changes.\n\n  - There is a new option \"booking_method\" which should be set to the value\n    \"SIMPLE\" to maintain the current booking algorithm (it's the default if left\n    unset), but which can be set to \"FULL\" to enable the yet-unreleased, new\n    experimental booking method. Do this at your own risk; this is not ready for\n    public use, not effectively working yet.\n\n\n2016-02-05\n\n  - Fixed bug with query parser: a single dot (.) would be matched as a number.\n    It should require at least some digits.\n\n  - Fixed bug whereby a missing cost number would be rendered as \"0\"; if needs\n    be a null value.\n\n\n2016-01-31\n\n  - Added python-magic as an optional depdendency, in order to support imports\n    code. Updated http://furius.ca/beancount/doc/install\n\n  - Renamed beancount.scripts.checkdeps to beancount.scripts.deps (annoyed with\n    name too similar to beancount.scripts.check and I trip over it all the\n    time).\n\n  - Moved ledgerhub.core.compress to beancount.ops.compress and its associated\n    test.\n\n  - Moved ledgerhub.identify.filetype to beancount.utils.file_type and its\n    associated test and test files.\n\n  - Small improvement to beancount.utils.test_utils.skipIfRaises() to accept\n    multiple exceptions.\n\n\n2016-01-25\n\n  - Moved many of the utility code from ledgerhub.utils to beancount.utils. This\n    is beginning the process of migrating and rewriting LedgerHub and\n    integrating it into the Beancount source code.\n\n  - Moved the 'remove_crdb' utility script from LedgerHub into\n    beancount/experiments/imports.\n\n\n2016-01-18\n\n  - Committed the Query directive to non-experimental status, for\n    beancount-web's usage.\n\n\n2016-01-16\n\n  - Created the beancount.plugins.coherent_cost plugin which checks that one's\n    currencies are either always used with cost, or never at all. This is by far\n    the most typical situation whereby a currency is always held at cost, or\n    never (and perhaps converted at price or not).\n\n  - Created a function to filter just the transactions, which is such an\n    incredibly common operation I should have done this a while ago. I should\n    convert all code to use it.\n\n\n2016-01-16\n\n  - Added a feature to the \"beancount.plugins.ira_contribs\" plugin to allow the\n    further restriction that the trigger posting must include a particular flag\n    in order for the insertion to occur. This is to be used in account that have\n    sales, whereby just looking at the sign of the posting isn't enough to\n    decide that an insertion must be made.\n\n\n2016-01-10\n\n  - Addressed issue #96, supporting an explicitly installed C decimal version\n    when the Python3 installation does not include one. From\n    beancount.core.number:\n\n      Note: Python 3.3 is supposed to guarantee a fast \"C\" decimal implementation,\n      as it comes with its source code. However, in practice, many distributions,\n      including the popular Ubuntu distro, simply don't compile it. Other distros\n      (e.g., Arch Linux) insist on breaking up Python into multiple packages in\n      order to manage the dependency to the mpdec library, and make that\n      installation optional. Moreover, there seems to have been changes in the\n      dispatching of pure-Python and fast C decimal implementations in Python-3.5's\n      source code itself. The result is that despite Python-3.3 or above being\n      installed, a fast C decimal implementation may or may not be present. Thus, we\n      must detect it here. I believe this subtle problem should go away with\n      Python-3.5 and above.\n\n      What do we do? We import the default 'decimal' module, and if it's the pure\n      Python implementation, we attempt to import an explicitly installed\n      'cdecimal', which you can install with\n\n        pip3 install m3-cdecimal\n\n    Also added a check for this in checkdeps. Hopefully this resolves the issue\n    once and for all.\n\n\n2016-01-09\n\n  - Fixed a bug (issue #94) in the load cache that wouldn't handle files\n    disappearing after having been moved.\n\n\n2016-01-03\n\n  - Moved beancount.web.scrape.scrape() to beancount.web.web.scrape_webapp() to\n    isolate beancount.web.scrape from dependencies, so that other projects may\n    reuse it.\n\n\n2015-12-25\n\n  - Closed multiple obsolete branches: parse_test_utils, display_context,\n    performance, datatypes.\n\n  - Added some utilities for parsing strings for writing tests that use the\n    local variables present in the caller (a bit of magic).\n\n  - Improved date parsing from command-line options for some scripts; imported\n    from branch 'text_statements'.\n\n\n2015-12-24\n\n  - Implemented metadata stack and \"pushmeta\" and \"popmeta\" directives mirroring\n    \"pushtag\" and \"poptag\". These new directives work similarly, but setting\n    metadata fields instead of tags themselves. The parser maintains a stack of\n    values for each metadata field. Values explicitly set on the Transactions\n    themselves are not overridden by the meta stack.\n\n\n2015-12-21\n\n  - Created a new project script that uses specific metadata on Open directives\n    to generate a document of a user's assets, institution names, addresses and\n    contact info, and account types and approximate value. Note: I haven't made\n    the example file include necessary fields to demo or document this yet.\n\n  - The loader now supports loading encrypted files transparently. If a filename\n    ends with .gpg or .asc (and contains armored content), the file is run\n    through a gpg subprocess to decrypt it. No temporary files are created. Note\n    that caching for those files is disabled.\n\n    If you're writing a script, you can also call\n    beancount.loaded.load_encrypted_file() directly to avoid the check.\n\n  - Implemented the 'beancount.plugins.merge_meta' plugin that copies metadata\n    from an external file into a regular file. It is essentially a data join on\n    the key of accounts for Open and Close directives, and a join on the key of\n    currency on Commodity directives.\n\n  - Added an option to Inventory.to_string() to avoid rendering parentheses.\n\n  - Added variable and username expansion support for the loader filename.\n\n  - Removed --batch mode for the encryption support; it needs to be potentially\n    interactive.\n\n\n2015-12-17\n\n  - In prices, removed undocumented support for automatically extracting\n    Commodities with a \"quote\" metadata field. This had been used in times past\n    and had been brought in as legacy, but now neither the export code nor the prices\n    code use it. Vaccummed away.\n\n\n2015-12-13\n\n  - Fixed a minor bug with the loader cache whereby errors weren't getting\n    emitted on a cache hit (Issue #92).\n\n\n2015-12-12\n\n  - Made bean-web's --incognito mode replace integer numbers, not just\n    fractional ones. (See issue #86).\n\n  - Output a warning when cdecimal isn't installed. This may occur on some\n    distribution which break up Python into multiple packages in order to allow\n    the user to avoid depending on a mpdec library install. Arch Linux suffers\n    from this problem.\n\n  - Made some improvements to the loader caching algorithm in order not to rely\n    on the percision of timestamps from the filesystem. Filesystems implement\n    one-second precision which is not sufficient in some case. I now cache both\n    the time and the size of files in order to check for a cache hit, and this\n    paves the way for hashing the contents of files as well eventually.\n\n  - Began implementing aggregation of some of the attributes of options map\n    across include files. Both \"operating_currency\" and \"commodities\" will be\n    aggregated correctly. (This was a request for beancount-web.)\n\n  - Fixed flaky test that failed only in homecooked install of Python 3.5.1.\n\n  - Fixed a minor bug that would not print out costs with zero amounts.\n\n\n2015-12-11\n\n  - In the context page dedicated to rendering the details of an entry, render\n    an \"Open\" link on the upper right that can be clicked on in order to invoke\n    a desktop handler that will open a text editor to the containing file and at\n    the right line number.\n\n\n2015-12-10\n\n  - Renamed beancount.reports.context.render_entry_context() to\n    render_file_context() and implemented render_entry_context() to accept an\n    entry directly instead of a (filename, line-no), so that bug reporters can\n    insert some print statements. I also removed the dcontext instance required\n    to be passed, since all the callers were fetching it from options_map. This\n    should make it easier for those sending bug reports to insert quick calls to\n    render the context around a particular entry or file location.\n\n\n2015-12-09\n\n  - Fixed installation snafu: forgot to add the beancount.prices and bean-price\n    install to the setup.py file.\n\n\n2015-12-07\n\n  - Fixed a bug in the load cache, whereby the load cache would not update\n    itself on an included file. In order to do this, first I made the loader\n    always return the full correct set of unique filenames processed in a load\n    call, and then I used this to check the latest modified time.\n\n  - I also used this to fix a related bug in the bean-web watcher: If an\n    included file was being modified, bean-web would not reload itself\n    automatically. redstreet0 sent a pull request to highlight the problem\n    (thanks!):\n    https://bitbucket.org/blais/beancount/pull-requests/6/feature-include-files-refresh/diff\n\n\n2015-12-03\n\n  - Added ROOT(account, num) account manipulation function to the shell.\n\n\n2015-12-02\n\n  - Fixed issue #84: The sorting of entries from multiple files was incorrectly\n    placed, due to recent changes merged from the booking branch.\n\n  - Fixed a bug deleting the load cache (was using an invalid filename).\n\n\n2015-11-29\n\n  - Made the pickle load cache enabled by default. This means you can now remove\n    the BEANCOUNT_LOAD_CACHE environment variable. The load cache will be\n    written out automatically, but only if it takes more than the time threshold\n    (1 sec) to load a Beancount file. If it takes less than this time, no cache\n    is written. (This saves the creation of these pesky crumbs for files it\n    doesn't matter for.) If you would like to always disable the load cache, set\n    the environment variable BEANCOUNT_DISABLE_LOAD_CACHE. I don't recommend\n    it--this works well and for large files makes loading much, much faster.\n\n\n2015-11-28\n\n  - Implemented a script used to fetch prices online and output them in\n    Beancount input format. This script is able not only to take an explicit\n    list of prices to get, but also able to read a Beancount input file and\n    figure out the list of commodities held at a particular point in time and\n    fetch only those prices. A \"price\" metadata field on a Commodity directive\n    is used to specify how and where to get prices from. It comes with support\n    for Google Finance and Yahoo! Finance price sources and the syntax supports\n    custom-written Python modules so you can write your own price fetching\n    extensions, that integrate with the price fetching tool.\n\n    The new code is located under \"src/python/beancount/prices\" and this new\n    tool is documented in http://furius.ca/beancount/doc/prices.\n\n    (Note: This is brand new code, probably imperfect, but I tried to keep this\n    simple yet complex enough to be practical. I've been using a variant of it\n    for a while, I'm going to merge this now and use it myself, and I hope it\n    works for others.)\n\n\n2015-11-26\n\n  - I redesigned the portfolio export process in order to (a) simplify it\n    greatly (the process was a bit confusing, between the use of three metadat\n    fields: \"ticker\", \"export\" and \"quote\"), and (b) to separate it entirely\n    from the upcoming price fetching script metadata.\n\n    The new outcome is very similiar, however, except it uses only a SINGLE\n    metadata field: \"export\", and the documentation has been rewritten to\n    reflect this:\n    https://docs.google.com/document/d/1mNyE_ONuyEkF_I2l6V_AoAU5HJgI654AOBhHsnNPPqw/edit#\n\n    If you have an existing file, here's what you need to do to it:\n\n    * Remove all the 'quote' metadata. You won't need it.\n    * If you have 'ticker' metadata: convert those to 'export'.\n    * If you have 'export' metadata: keep it.\n    * If you had an 'export' metadata with a \"MONEY\" spec, move that into the\n      'export' field after the symbol to export to.\n\n    The example has been ported, so you can refer to that as well.\n\n    I think the new process is much simpler to understand and the documentation\n    shorter and easier to read. It should be a trivial exercise to convert one's\n    input file to the newer format.\n\n\n2015-11-22\n\n  - Removed beancount.core.data.AttrDict and replace it by a regular dict. This\n    removes some annoyances when pickling and copying metadata. Metadata is now\n    represented by a plain old dict. (Fixes issue #79.)\n\n\n2015-11-09\n\n  - Implemented a simple pickle-date on beancount.loader.load_file(), which will\n    reload the parsed & processed contents of a top-level file if a cache file\n    is present and more recent than the file itself, or update the contents of\n    the cache after loading if not. (This works a bit like .pyc byte-compilation\n    in Python or .elc in Emacs LISP.) This makes the loading of large files\n    multiple times ~15x faster, which is a big deal since Beancount has become a\n    little bit slow (I need to spend time optimizing at some point).\n\n    This feature is a bit experimental, so for now it only gets turned on if the\n    BEANCOUNT_LOAD_CACHE environment variable is set.\n\n\n2015-10-04\n\n  - Implemented --output=<filename> option for bean-query tool.\n\n\n2015-10-02\n\n  - Implemented an experimental new Query directive whose purpose is to define\n    pre-canned SQL queries in the Beancount file itself and to then build tools\n    to automate the generation of reports of those queries.\n\n    For the moment being, I'm just playing with this to convince myself that\n    this can be powerful and generic enough to provide more generally. I've\n    found myself running specific queries on speific files, e.g., during trips\n    and I'd like to automate those to some extend, perhaps replace the script\n    code that lives in beancount.plugins.split_expenses with this.\n\n    Anyhow, this is not supported but if you understand this and really want to\n    turn it on, set this option in your input file:\n\n      option \"experimental_query_directive\" \"TRUE\"\n\n    The directives aren't used anywhere yet, and you'll have to read source code\n    to figure out what they look like.\n\n\n  - Implemented a \"reload\" command in the shell. Typing \"reload\" will refresh\n    the data from the latest file contents.\n\n\n2015-09-29\n\n  - Tightened the screws on the Amount() constructor a bit and made changes ini\n    order to allow it to accept a sentinel value for MISSING values from the\n    parser. Changes to beancount.core.amount.Amount are:\n\n    1. A string for the number is not accepted anymore, that is, Amount(str,\n       str) is not supported anymore. Amount() now unconditionally requires a\n       Decimal instance, so you must use Amount(Decimal, str). In any case, this\n       constrcutros was likely abused only by me in the tests. I'd rather have\n       a tighter, less permissive constructor.\n\n    2. The convenience constructor beancount.core.amount.from_string() is now\n       officially aliased as beancount.core.amount.A, so you can \"from\n       beancount.core.amount import A\". I now commit to using this constructor\n       and converted all the tests to use it. This is great for writing tests.\n       Amount really is a fundamental piece that deserves a very short alias\n       like this.\n\n    In summary, how to create Amount instances:\n\n    * If you use explicit values, use Amount(Decimal, str), e.g.,\n      Amount(D('100.00'), 'USD'), Amount(number, currency)\n\n    * If you need a convenience constructor, use A(str), e.g.,\n      A('100.00 USD'), A('32,000 KRW')\n\n\n2015-09-29\n\n  - Added a new column 'description' to the SQL client in order to produce more\n    compact reports.\n\n    Oftentimes the payee is left to an empty value and journals\n    have a lot of wasted whitespace. Concatenating the payee and the narration\n    in a single field goes a long way towards producing reports that aren't\n    nearly as wide. I could have added a CONCAT() function but this is so common\n    and convenient that a dedicated 'description' alias is justified. You can\n    use it in posting context (\"SELECT description ...\" or \"SELECT ... WHERE\n    description ~ '...'\") or transaction context (\"SELECT ... FROM description ~\n    '...'\")..\n\n\n2015-09-27\n\n  - Implemented a plugin that can book price conversions using a particular\n    booking method, in this case, FIFO. This idea stemmed from a suggestion I\n    made on the mailing-list a few weeks ago, which was to process a particular\n    account's price conversions to insert cost basis specifications and in doing\n    so to book reducing postings to FIFO order automatically. This could all be\n    done via a plugin, so I did it. (See tag {c395de691449} on the mailing-list\n    for more context.)\n\n    You can find it under \"beancount.plugins.book_conversions\". You use it like\n    this: first you load the plugin:\n\n      plugin \"beancount.plugins.book_conversions\" \"Assets:Bitcoin,Income:Bitcoin\"\n\n    The configuration requires you provide two accounts:\n\n    1. An assets account to process, whereby all price conversions (in any currency)\n       occurring in that account will have their cost basis automatically inserted,\n       and,\n\n    2. An Income account that is inserted on reducing transactions to absorb the\n       profit or loss of the sale.\n\n    Then you book your transactions as simple price conversions, without worrying\n    about cost basis, for example, this input:\n\n      2015-09-04 *\n        Assets:Bank           -750.00 USD\n        Assets:Bitcoin       3.000000 BTC @ 250.00 USD\n\n      2015-09-05 *\n        Assets:Bank           -780.00 USD\n        Assets:Bitcoin       3.000000 BTC @ 260.00 USD\n\n      2015-09-20 *\n        Assets:Bitcoin       -2.000000 BTC @ 300.00 USD\n        Expenses:Something\n\n      2015-09-21 *\n        Assets:Bitcoin       -2.000000 BTC @ 310.00 USD\n        Expenses:Something\n\n      2015-09-22 *\n        Assets:Bitcoin       -2.000000 BTC @ 330.00 USD\n        Expenses:Something\n\n    Would get translated by the plugin into the equivalent of this:\n\n      2015-09-04 *\n        Assets:Bitcoin  3.000000 BTC {250.00 USD} @ 250.00 USD\n          trades: \"trade-ff4c3e592147,trade-6b9c8689ed50\"\n        Assets:Bank      -750.00 USD\n\n      2015-09-05 *\n        Assets:Bitcoin  3.000000 BTC {260.00 USD} @ 260.00 USD\n          trades: \"trade-91e2245de593,trade-d622a89c614d\"\n        Assets:Bank      -780.00 USD\n\n      2015-09-20 *\n        Assets:Bitcoin          -2.000000 BTC {250.00 USD} @ 300.00 USD\n          trades: \"trade-ff4c3e592147\"\n        Income:Bitcoin      -100.00000000 USD\n        Expenses:Something   600.00000000 USD\n\n      2015-09-21 *\n        Assets:Bitcoin          -1.000000 BTC {250.00 USD} @ 310.00 USD\n          trades: \"trade-6b9c8689ed50\"\n        Assets:Bitcoin          -1.000000 BTC {260.00 USD} @ 310.00 USD\n          trades: \"trade-91e2245de593\"\n        Income:Bitcoin      -110.00000000 USD\n        Expenses:Something   620.00000000 USD\n\n      2015-09-22 *\n        Assets:Bitcoin          -2.000000 BTC {260.00 USD} @ 330.00 USD\n          trades: \"trade-d622a89c614d\"\n        Income:Bitcoin      -140.00000000 USD\n        Expenses:Something   660.00000000 USD\n\n    Note that the price annotations are kept as in the input file. The plugin only\n    inserts the cost basis and splits postings where required.\n\n    Secondly, a unique trade identifier is allocated for each matching pair of\n    postings that were booked and is added to the metadata of those postings.\n    Its value is a comma-separated list. This metadata is useful because it\n    allows you to load the entries and from it, to build a list of trades to\n    produce a suitable report for reporting.\n\n    So the plugin also contains code to do this. You can invoke it as a main\n    program, like this:\n\n      python3 -m beancount.plugins.book_conversions <filename.beancount>\n\n    On the file above, it should generate the following output, which I believe is\n    the report you're really after for reporting purposes:\n\n       Units  Currency  Cost Currency    Buy Date  Buy Price   Sell Date  Sell Price     P/L\n    --------  --------  -------------  ----------  ---------  ----------  ----------  ------\n    2.000000       BTC            USD  2015-09-04     250.00  2015-09-20      300.00  100.00\n    1.000000       BTC            USD  2015-09-04     250.00  2015-09-21      310.00   60.00\n    1.000000       BTC            USD  2015-09-05     260.00  2015-09-21      310.00   50.00\n    2.000000       BTC            USD  2015-09-05     260.00  2015-09-22      330.00  140.00\n    --------  --------  -------------  ----------  ---------  ----------  ----------  ------\n\n    Use the '--format=csv' option if you want to produce output suitable for\n    including in a spreadsheet. If you need to customize the output further, see the\n    source code (file:book_conversions.py). It is not possible to generate this list\n    of trades using the SQL client yet, to change the output columns you would have\n    to create a standalone script; you can copy just the main() function in the\n    plugin if you need to do that and import the rest. (Note: The function that\n    extracts the list of matches provides both the posting and its parent\n    Transaction object, so you can output data from the transaction if you want,\n    e.g. the narration of the selling transaction.)\n\n\n2015-09-14\n\n  - Merged more changes to beancount.el (Emacs support) by Stefan Monnier:\n    * Use syntax-tables for comments and strings.\n    * Make ido use optional in Emacs config.\n    * Quote filenames on command lines\n    Thank you Stefan!\n\n\n2015-09-12\n\n  - Added to beancount.plugins.split_expenses a new script that is able to\n    generate the typical kinds of reports you would need to provide to\n    participants in a shared project or travel on their specific expenses and\n    contributions, as well as a breakdown of their expenses per category\n    (expenses account) and final balances for each participants. Invoke it like\n    this:\n\n      python3 -m beancount.plugins.split_expenses <filename>\n\n    The script lives in the same file as the split_expenses plugin, because it\n    is tightly related to it. It presumes the input file will process through\n    this plugin. Try to run it on the example files under\n    beancount/examples/sharing.\n\n  - Added a new file \"examples/sharing/duxbury2015.beancount\" which contains a\n    new example of sharing expenses on a trip between three people.\n\n  - Starter cleanup of beancount.el contributed by Stefan Monnier. More changes\n    to come, this is basically a no-op patch. It just moves code around and\n    makes other such cosmetic changes to silence some compiler warnings, prepare\n    for subsequent changes, better follow coding conventions etc. Detail:\n\n    * beancount.el: Add some standard file headers, license, and\n      sectioning comments.  Sprinkle a few FIXMEs while I'm here.\n      (beancount-font-lock-defaults): Rename from beancount-font-lock-keywords,\n      since this corresponds to font-lock-keywords and not to\n      font-lock-defaults.\n      (beancount-directive-names, beancount-font-lock-keywords,\n      beancount-accounts):  Move variables before their first use (to silence\n      the compiler).\n      (beancount-mode-map): Use a proper defvar instead of define-minor-mode's\n      half-broken :keymap.\n      (beancount-mode): Merge the make-local-variables into their corresponding\n      `set'.\n      (beancount-accounts): Move make-variable-buffer-local to top-level since\n      it's a global operation.\n      (beancount): Declare this group, already used in define-minor-mode.\n      (beancount-hash-keys): Mark unused arg `v' with an underscore.\n      (beancount-transaction-set-flag): Don't use replace-string (designed for\n      interactive use) from Elisp.\n      (beancount-for-line-in-region): Use copy-marker and eobp.\n      (beancount-align-numbers): Break lines to avoid hiding arguments.\n      (compilation-read-command): Declare variable to silence byte-compiler.\n\n\n2015-09-06\n\n  - Filter out platform-specific comments from the code generated by GNU Bison,\n    in order to avoid unnecessary diffs when I switch between Linux and Mac OS X.\n\n\n2015-09-05\n\n  - Changed the semantics of the account_rounding account, so that it matches\n    that of the other account options, that is, they all specify a sub-account\n    of the Equity account. So if you had\n\n      option \"account_rounding\" \"Equity:RoundingError\"\n\n    in your input file, change this to:\n\n      option \"account_rounding\" \"RoundingError\"\n\n    To ease the transition, the parser now checks if the first component is one\n    of the five categories and if so, issues a warning and removes the prefix.\n\n    (One side-effect of this change is that the rounding error account may only\n    be an Equity account, but I'm hoping this won't be a problem for anyone.)\n\n\n2015-08-31\n\n  - The column \"weight\" was broken; fixed by yagebu@.\n\n\n2015-08-30\n\n  - Fixed a very minor bug in split_expenses plugin whereby the generated\n    postings did not contain the __automatic__ metadata field, and in some\n    particular situations, their automatically calculated values would end up\n    being used for inferring the tolerances.\n\n\n2015-08-15\n\n  - Changed the semantics of the parsing stage, in a fairly profound way.\n    This should have no visible changes to users, but people writing scripts\n    should revise their code if they were using\n    beancount.parser.parser.parse_*() functions.\n\n    Just to be clear: beancount.loader.load_*() has not changed. If you just use\n    the loader, there are no changes. Changes are only at the parser level.\n\n    Here's what's going on and why: The parser used to carry out interpolation\n    of missing numbers on postings for each transaction locally, while parsing\n    the transactions. This was done by calling by calling\n    beancount.core.interpolate.balance_incomplete_postings(), here:\n    https://bitbucket.org/blais/beancount/src/ee2073aae080aaa8e260abe8a501abf872948f0e/src/python/beancount/parser/grammar.py?at=default#grammar.py-803\n\n    Loading a list of entries was carried out in two steps:\n\n                  ,-----------------------load----------------------.\n                       (recursively)\n                 ,---------------------.   ,---------.   ,------------.\n      (input)--->| parse + interpolate |-->| plugins |-->| validation |--> entries\n                 `---------------------'   `---------'   `------------'\n\n    First, the parser would run on the input and process all the input files\n    recursively (processing includes). \"Interpolation\", the process of filling\n    in missing numbers, was carried out at that stage, during parsing, and only\n    locally, that is, for each transaction in isolation. \"Booking\" of lots, that\n    is, selecting which of an account's inventory lots to match and reduce, was\n    explicit. This booking could not take advantage of the accumulated\n    inventories in order to vary its behavior. You had to specify the entire lot\n    information unambiguously.\n\n    After this, in a second stage, the plugins were run on the entries and a\n    final validation step was run at the end.\n\n    To implement the booking proposal\n    (http://furius.ca/beancount/doc/proposal-booking), we want for the user to\n    be able to provide a partial specification of lots to be matched against an\n    account's accumulated inventory at the date the transaction is to be\n    applied. The idea is that if there is no ambiguity, the user should be able\n    to specify very little information about a lot (for example if there is a\n    single lot in the account when processing the transaction an empty spec of\n    \"{}\" should be sufficient). Moreover, where the specification is ambiguous,\n    we also want to support automatic selection of lots according a method\n    specified by the user, e.g., FIFO booking, LIFO booking, etc.\n\n    For this to work, we need to have parsed all the inputs to some sort of\n    incomplete specification, a representation of inputs that hasn't yet been\n    resolved to specific lots, in order to carry out booking. The parser has\n    been modified to output such incomplete postings:\n\n              ,-------------------------load-------------------------.\n               (recursively)\n                 ,-------.   ,-------------.   ,---------.   ,------------.\n      (input)--->| parse |-->|   booking   |-->| plugins |-->| validation |--> entries\n                 `-------'   |      +      |   `---------'   `------------'\n                             | interpolate |\n                             `-------------'\n                        incomplete\n                         entries\n\n    Because \"interpolation\" runs on the result of specific lot values, \"booking\"\n    must run before it, and so they are inter-related. Thus, booking and\n    inteprolation has been moved to a dedicated step that runs on the list of\n    incomplete entries and resolves them to the regular entries to be processed\n    further by plugins and validation.\n\n    This also has a nice side-effect: the booking step is where all the\n    complexity is, and it is now isolated and I will be able to test and\n    experiment on it in isolation. This is where all the fun will be.\n\n    A description of the incomplete specifications output by the parser can be\n    found here in the parser.py file, this is the description of the\n    intermediate state of postings whose lots haven't yet been matched and\n    resolved to specific inventory lots:\n    https://bitbucket.org/blais/beancount/src/18282452e265959b69d3d10c6d9cf32e5815c522/src/python/beancount/parser/parser.py?at=booking\n\n    Essentially, a posting's 'lot' attribute contains a \"LotSpec\" tuple instead\n    of a \"Lot\" tuple, and several numbers may be left unfilled (for interpolate\n    values). I don't imagine anyone will ever have to manipulate such\n    intermediate entries, only the booking code.\n\n    The previous booking algorithm has been moved to the booking stage and the\n    semantics should be identical to what they used to be. This is still the\n    default algorithm--it just runs in its own dedicated stage, still operating\n    locally on each transation. You should observe no difference in behaviour.\n\n    I've merged these changes now in order to minimize the differences between\n    the booking and default branches and because I was able to do it without\n    changing any of the semantics (despite the large number of lines and tests\n    modified). This was a necessary refactoring. Because that code is now\n    isolated to its own stage I should be able to begin implementing the more\n    complex state-dependent booking algorithms in the 'booking' branch. (I'm\n    excited about this.) I could even implement different booking heuristics and\n    switch between them.\n\n    Because the parser used to spit out regular, complete entries,\n    parser.parsedoc() was used in much of the tests instead of loader.loaddoc(),\n    so that many of those tests would not have to concern themselves with making\n    sure the input passed the validation stage run by the loader. For example,\n    creating Open directives just to create some Transaction test object wasn't\n    necessary in the tests. All of those tests had to be revised and I made them\n    all depend on beancount.loader.load_*() instead of the now weakened\n    parser.parse_*() functions which output incomplete, unbooked entries. This\n    cleans up the dependencies a bit as well. If you wrote your own unit tests\n    and were using parser.parsedoc(), you should convert them to use\n    loader.loaddoc(). In order for this change not to go unnoticed (and for\n    naming consistency with parse_string() and parse_file()) I'll probably\n    rename parser.parsedoc() to parser.parse_doc() and ditto with the loader.\n\n    (Note: In some cases I've had to specifically setup the input of some tests\n    in \"raw\" plugin processing mode to avoid triggering some unwanted and\n    unrelated errors. I'm tempted to remove even more from the default plugins.\n    This may happen in a future CL.)\n\n\n  - Renamed beancount.parser.parser.parsedoc() to parse_doc() and\n    beancount.loader.loaddoc() to load_doc(), for consistency with the other\n    parse_*() and load_*() functions. Kept a stub that will issue a warning if\n    you use it.\n\n\n2015-07-23\n\n  - In the conversion to the new booking syntax, I had inadventently removed\n    support for the total cost \"{{ ... }}\" syntax. I brought this back next to\n    the new booking syntax, and uncommented tests that had been made to skip.\n\n\n2015-07-21\n\n  - Merged ongoing work from the 'booking' branch that will eventually change\n    the semantics of inventory booking; in the interest of a smooth transition,\n    and for me to be able to use either branch interchangeably, I introduced a\n    few changes that should have no user-visible effect on 'default':\n\n    * The parser.parse_string() and parser.parse_file() routines don't\n      interpolate anymore. For this reason, the tests all had to be adjusted not\n      to include interpolation. The interpolation of incomplete postings\n      (grammar.interpolation()) has moved to a separate phase and is now run by\n      loader._load() *AFTER* parsing. This is key to implementing fuzzy matching\n      semantics for matching reducing lots: we need to have all the incomplete\n      transactions parsed and sorted in order to select matching lots in date\n      order.\n\n      This only affects you if you wrote scripts against the parser\n      interface directly (this is highly unlikely).\n\n    * For writing unit tests, parser.parsedoc() and loader.loaddoc() are now\n      decorator factories. This allowed me to add options to parser.parsedoc()\n      to perform interpolation, and when not specified, to check that entries\n      with interpolation are not present in the tests. Also, I coudl merge the\n      functionality of parser.parsedoc_noerrors() and loader.loaddoc_noerrors()\n      in their respective equivalents. The docstring tests now validate that\n      there are no errors in the docstrings by default. This makes the tests\n      tighter (a few bugs in the tests themselves were found and fixed).\n\n    * The new syntax for cost specification that will be in effect for the\n      inventory booking proposal is now supported. The syntax is\n      backward-compatible with the previous one. Previously, the following\n      syntaxes were supported for specifying the cost and optionally a lot\n      acquisition date:\n\n        Assets:Investments    1 HOOL {123.00 USD}\n        Assets:Investments    1 HOOL {123.00 USD / 2013-07-20}\n\n      Instead of these options, the new syntax supports a comma-separated list\n      of cost-specifiers which can be one of\n\n        <cost>       -> e.g. 123.00 USD\n        <lot-date>   -> e.g. 2015-07-20\n        <label>      -> e.g. \"first-lot\"\n        <merge-cost> -> e.g. *\n\n      In order to keep current input working, either a comma (,) or a slash (/)\n      is supported to separate the components. This is valid:\n\n        Assets:Investments    1 HOOL {2013-07-20 / 123.00 USD / \"first-lot\"}\n\n      Those can be provided in any order. For example, these are all also valid\n      syntaxes for cost:\n\n        Assets:Investments    1 HOOL {}\n        Assets:Investments    1 HOOL {\"first-lot\"}\n        Assets:Investments    1 HOOL {2013-07-20, 123.00 USD}\n        Assets:Investments    1 HOOL {2013-07-20, \"first-lot\"}\n        Assets:Investments    1 HOOL {*}\n        Assets:Investments    1 HOOL {*, 123.00 USD}\n\n      Moreover, the cost amount now supports a compound amount that is expressed\n      not in terms of each unit of the currency, but in terms of the total\n      amount over all units, for example, this is how you could fold in the cost\n      of a commission:\n\n        Assets:Investments    1 HOOL {123.00 # 9.95 USD}\n\n      The syntax for a compound amount follows this pattern:\n\n          [<per-unit-cost>] # [<total-cost>] <currency>\n\n      The numbers are both optional. If no '#' separator is present, the total\n      cost component is assumed to be zero. This will eventually subsume the\n      {{...}} total cost syntax, by specifying only the total cost portion of\n      the compound amount:\n\n        Assets:Investments    100 HOOL {# 12300.00 USD}\n\n      Of course, this combines with the other spec formats, so this is valid:\n\n        Assets:Investments    1 HOOL {123.00 # 9.95 USD, 2015-07-22}\n\n      Finally, while the new syntax is supported in the parser, the old\n      semantics for inventory lot specification is still in order. If you\n      provide an unsupported combination of lot specifiers (e.g., you use a\n      label, a compound amount, or a merge-cost marker), an error will be issued\n      accordingly.\n\n      So just use the cost and date as previously; I will bring in new semantics\n      incrementally, semantics that will take advantage of this new syntax. I\n      will try to do so in a way that minimizes changes.\n\n  - I removed forwarded symbols from beancount.parser. Generally, in order to be\n    able to mock functions, you should always import packages, not symbols.\n\n\n2015-07-20\n\n  - Numbers rendered from bean-query are now rendered using the display context\n    inferred from the input file. This means numbers are rounded nicely, using\n    the most common precision seen in the input file.\n\n  - I fixed a bug on writing UTF-8 output to the console on Mac OS X and how it\n    interacts with the 'less' pager.\n\n\n2015-07-12\n\n  - Implemented support for arithmetic operations: +, -, *, / and parenthesis\n    groupings are now supported, anywhere that a number can be seen in the input\n    file, including postings, costs & prices, and balance numbers.\n\n\n2015-07-12\n\n  - Changed how web & report rendering code renders numbers so that it uses the\n    DisplayContext inferred from the numbers in the input file. Numbers in the\n    reports were previously using the default precision and that led to all\n    sorts of inconsistencies. The numbers are now rendered using the most common\n    precision which has been seen in the input files. (This work had been\n    planned for a while, as part of converting everything to use the\n    DisplayContext. Next up will be converting the shell's rendering routines.)\n\n\n2015-07-11\n\n  - WARNING: API CHANGES AHEAD. If you wrote plugins, you will need to remove\n    the 'entry' parameter to constructors of Posting().\n\n    I removed the Posting.entry back-reference of Postings to their owning\n    Transaction objects. This makes programmatically creating our data\n    structures much more straight-forward and avoids us having to run pirouettes\n    around which object to create first. It also removes all manners of \"fixing\n    up\" transactions and removes one ultimatley unnecessary degree of freedom\n    from plugins outputs: we don't have to check that the plugins generate\n    objects with correct back-references. It also makes the documentation\n    simpler: I won't have to explain backreferences and how to deal with them.\n    Finally, it avoids the circular reference which could potentially make\n    Python's GC do some work for no other reason.\n\n    This happened because it occurred to me that the only really important place\n    where back-references were used were in the beancount.core.realization code,\n    and that in the RealAccount objects I could easily replace the Posting\n    instances in lists of \"postings or entries\" into a new tuple object\n    \"TxnPosting\" that contains a reference to the parent transaction and a\n    reference to the posting. This voids the need for a back-reference, and\n    makes the API really straightforward.\n\n\n  - WARNING: USER-LEVEL CHANGES FOLLOW. I repatriated the following optional\n    plugins to the beancount.plugins package, so that all the plugins are in the\n    same place:\n\n       beancount.ops.auto_accounts   -> beancount.plugins.auto_accounts\n       beancount.ops.implicit_prices -> beancount.plugins.implicit_prices\n\n    This is so that the \"beancount.ops\" package contains only plugins run by\n    default (non-optional), and so that the \"beancount.plugins\" only contains\n    optional plugins the user must provide.\n\n    In doing so, I also made the \"implicit_prices\" plugin NOT INCLUDED BY\n    DEFAULT. This plugin creates automatically Price directives for all Postings\n    which have a @ <price> annotation, thus feeding those prices into the price\n    database. If you want to keep this behaviour -- and you probably should --\n    you need to add the following in your input file:\n\n      plugin \"beancount.plugins.implicit_prices\"\n\n    (I'm considering moving move of the default plugins to be optional, in\n    particular, beancount.ops.documents, not sure yet.)\n\n\n2015-07-05\n\n  - Implemented support for parsing strings from files in various encodings.\n    Only string objects encoded in non-ASCII are supported, e.g., payee,\n    narrations, description, etc. This means the account names are still\n    restricted to ASCII, in particular. This works with UTF8 encoding (tested),\n    latin1 encoding (tested), and probably more. The support is at the lexer\n    level. You may now supply an 'encoding' parameter to parser.parse_file(),\n    parser.parse_string(), loader.load_file(), loader.load_string() functions.\n    Passing in an invalid encoding should not mail it fail (though the contents\n    of the strings will be empty). Unit tests for all those cases have been\n    added.\n\n  - Completely reviewed all lexer and grammar error handling code. The parser\n    code used to bail out with abort() on an unhandled exception and dump core\n    after issuing its error message (this is ugly but was never a big issue\n    since this occurred pretty rarely). All errors are now handled gracefully\n    (invalid lexer token, exception raised in lexer builder, invalid gramamr\n    rule, exception raised in grammar builder Python code). A comprehensive\n    suite of unit tests has been built to catch all these. You should never\n    experience a core dump anymore. A number of other unexpected cases has also\n    been dealt with.\n\n  - The lexer used to have a fixed-size buffer for parsing its strings. The\n    buffer is now dynamically allocated. Lexing should also be slightly faster.\n\n  - Mmeory management for the parser has been reviewed. Memory clean up for\n    temporaries generated during parsing has been reinstated (it was disabled\n    somehow) and cleanup rules are invoked even in the case of errors. This may\n    make the parser somewhat slower.\n\n\n2015-07-02\n\n  - Built support for setuptools and rolled back changes. Setuptools is broken\n    beyond what I can bear. Forget this. You'll have to install dependencies by\n    hand. It's a one-liner, like this:\n\n      pip3 install python-dateutil bottle ply lxml\n\n\n2015-07-01\n\n  - Wrote a post-mortem/assessment doc on LedgerHub, detailed future plans for\n    LedgerHub and plans to eventually merge the codebase into Beancount again.\n    See: http://furius.ca/ledgerhub/doc/postmortem\n\n\n\n2015-06-27\n\n  - Complete the design doc and made it public.\n\n\n2015-06-26\n\n  - Created a generic script that can be used to automate the upload of\n    arbitrary CSV files to a Google Spreadsheet. This can be used along with the\n    holdings reports in order to create a spreadsheet tracking your assets.\n\n    Unfortunately, this script has to be written in Python 2.x, because of\n    the unavailability of the gdata-python-client library which is not available\n    at this time for Python 3.x. The script is self-contained. If you want\n    to use this, you must install the following libraries in your Python 2.x\n    install:\n\n    * gdata-python-client\n    * oauth2client\n    * httplib2\n\n\n2015-06-25\n\n  - Posting objects now have (filename, lineno) in their metadata. This could\n    potentially be helpful for people who want to insert text programmatically\n    in their input file without having to write their own parser.\n    See: https://groups.google.com/d/msg/beancount/zNCFk-YGdr8/8P2_vGGH9xoJ\n\n\n2015-06-15\n\n  - All the code to bake a static HTML archive of a bean-web interface has been\n    rewritten.\n\n    * There used to be a number of bugs caused by the wget tool. These bugs have\n      been fixed.\n\n    * The new code does not depend on wget -- Beancount does not require wget\n      anymore. Explicit code to do web scraping has been implemented. On the\n      other hand, a new dependency is introduced: lxml. This dependency was\n      already required for development and install in the same way as all the\n      other dependencies: using pip3. Should be a breeze to install on all\n      platforms.\n\n    * A verification layer has been tacked on after the web scraping step to\n      check that there are no dangling links.\n\n    * Intentionally skipped links are now converted to plain text, such that\n      there are no dangling links for pages we aren't saving (these just used\n      to be ignored).\n\n    I repeat: Beancount does not depend on wget anymore.\n    Please install lxml with: \"pip3 install lxml\"\n\n\n  - The 'exportpf' report which is used to produce OFX that can be imported in\n    Google Finance now issues a warning if you did not provide either 'ticker'\n    or 'export' metadata for holdings that get exported. The reason for the new\n    adminition is that it trips up the OFX import and when Google Finance sees\n    a ticker it does not understand, the import fails. At least with the warning\n    we're telling the user they should be providing tickers or export directives\n    for all their commodities if they export the portfolio.\n\n\n2015-06-10\n\n  - Removed dependency on curses. If you don't have curses, everything should\n    work fine now, errors are being caught. Curses was only used to provide good\n    default values for rendering tables in terminals on e.g. bean-report\n    journal and to decide whether to use a pager in multi-page bean-query.\n    The default values are fixed if curses isn't available, e.g. 80 chars wide,\n    but as previously, you can override them manually. I also removed the\n    dependency from checkdeps and from the install document.\n\n\n2015-06-09\n\n  - Rewrote the Installation Instructions document completely to make it\n    simpler. Some users had found it daunting.\n    http://furius.ca/beancount/doc/install\n\n  - Tested Windows installation using Cygwin and added it to the installation\n    instructions.\n    http://furius.ca/beancount/doc/install\n\n\n2015-06-07\n\n  - Moved the following representation related symbols to their own module:\n\n      beancount.core.amount.D          ->  beancount.core.number.D\n      beancount.core.amount.Decimal    ->  beancount.core.number.Decimal\n      beancount.core.amount.ZERO       ->  beancount.core.number.ZERO\n      beancount.core.amount.ONE        ->  beancount.core.number.ONE\n      beancount.core.amount.HALF       ->  beancount.core.number.HALF\n      beancount.core.amount.round_to   ->  beancount.core.number.round_to\n\n    I also moved the tests. All the code specifically related to numbers is\n    now in beancount.core.number. I also removed the relative imports, as\n    Ledgerhub is importing from the Beancount source code now.\n\n    This is not a user-visible change. However, if you wrote scripts against\n    the codebase, you will need to rename your imports. In the meantime I added\n    stubs which issue a warning if you import from the obsoleted names.\n\n\n  - Moved documentation scripts from experiments to the main Beancount codebase.\n    There is a new package for it: beancount.docs. These codes are used to maintain\n    the Beancount documentation and there is common code for authentication in there,\n    code that I plan to use for automating the exporting ot portfolios.\n\n    This introduces some optional dependencies:\n\n    * google-api-python-client\n    * oauth2client\n    * httplib2\n\n    These are optional, and at the moment none of the actual Beancount tools\n    make any use of them. I moved this into the main Beancount codes because\n    the common authentication code will be used to export portfolios directly\n    to a Google spreadsheet in Google Drive, which will be super convenient\n    to build custom portfolio tracking views.\n\n\n2015-06-06\n\n  - Added an 'inferred_tolerance_multiplier' option to allow the user to adjust\n    the magnitude of the inferred tolerance.\n\n    When the tolerance values aren't specified explicitly via the\n    'default_tolerance' option, the tolerance is inferred from the numbers in\n    the input file. For example, if a transaction has posting with a value\n    like '32.424 CAD', the tolerance for CAD will be inferred to be 0.001\n    times some multiplier. This is the muliplier value.\n\n    We normally assume that the institution we're reproducing this posting\n    from applies rounding, and so the default value for the multiplier is\n    0.5, that is, half of the smallest digit encountered.\n\n    You can now customize this multiplier by changing this option, typically\n    expanding it to account for amounts slightly beyond the usual tolerance,\n    for example, if you deal with institutions with bad of unexpected rounding\n    behaviour.\n\n  - Promoted the 'experiment_infer_tolerance_from_cost' option to\n    'infer_tolerance_from_cost': not an experiment anymore. See thread on\n    mailing-list w/ mharris. This feature works well and actually solves real\n    problems for users.\n\n    A corresponding section has been added in the documentation at\n    http://furius.ca/beancount/doc/tolerances\n\n\n2015-06-04\n\n  - When using the 'experiment_infer_tolerance_from_cost' option, the inferred\n    tolerance is now expanded to include the SUM of all maximum rounding errors\n    from postings held at cost, not just the maximum. Users with multiple\n    rounding events in a single transactions could occur rounding that many\n    times. We assume no more rounding events than the number of postings held at\n    cost.\n\n  - I wrote a new document to explain how to deal with restricted stock units\n    vesting events:\n    http://furius.ca/beancount/doc/vesting\n\n\n2015-06-03\n\n  - bean-doctor context now outputs weight and residual numbers at their full\n    precision instead of their rounded one.\n\n\n2015-06-02\n\n  - Created a new document to keep track of user contributions:\n    http://furius.ca/beancount/doc/contrib\n\n\n2015-05-30\n\n  - Converted the Syntax Cheat Sheet to a Google Doc and removed it here.\n\n  - Added a check to bake the source code's checksums into the C extension\n    module and upon loading beancount.parser.parser check that the checksums\n    match. This automatically issues a warning on all programs that use the\n    parser if the compiled extension module is out-of-date and the user needs to\n    rebuild. This should explain the occasional unexpected situation where the\n    extension module doesn't match the Python code, for those running from\n    source or during development and in switching branches.\n\n  - Added an experimental boolean option: 'experiment_infer_tolerance_from_cost'\n    that expands the inferred tolerance to include values inferred from the cost\n    and price amounts on those cost and price currencies.\n\n    Here is the doc for it:\n\n      Enable an EXPERIMENTAL feature that expands the maximum tolerance inferred\n      on transactions to include values on cost currencies inferred by postings\n      held at-cost or converted at price. Those postings can imply a tolerance\n      value by multiplying the smallest digit of the unit by the cost or price value\n      and taking half of that value.\n\n      For example, if a posting has an amount of \"2.345 RGAGX {45.00 USD}\"\n      attached to it, it implies a tolerance of 0.001 x 45.00 / 2 = 0.045 USD\n      and this is added to the mix to enlarge the tolerance allowed for units of\n      USD on that transaction. All the normally inferred tolerances (see\n      http://furius.ca/beancount/doc/tolerances) are still taken into account.\n      Enabling this flag only makes the tolerances potentially wider.\n\n      WARNING: This feature may go away in the future. It is an exploration to see\n      if it is truly useful.\n\n  - Added a dependency check for 'curses' library and updated documentation.\n    This is for OpenSuse which packages curses separately.\n\n\n2015-05-22\n\n  - Fixed a simple bug (#47) where the default value used for legacy tolerances\n    wasn't being initialized properly and added a test for it.\n\n\n2015-05-20\n\n  - Fixed a potential important bug (#48) just introduced a few days ago whereby\n    enabling the 'account_rounding' option would inadvertently disable balance\n    checks. Thanks to Matthew Harris for finding and reporting it.\n\n  - Added a 'dedent' option to both beancount.parser.parser.parse_string() and\n    beancount.loader.load_string(). This is a convenience for writing quick\n    tests.\n\n\n2015-05-17\n\n  - MAJOR CHANGES: Precision and tolerances in Beancount have been entirely\n    revamped. The logic used to compute tolerances on transaction balances and\n    balance assertions is new. This previously discussed proposal:\n\n      http://furius.ca/beancount/doc/proposal-rounding\n\n    has been implemented. The new behaviour is documented here:\n\n      http://furius.ca/beancount/doc/tolerances\n\n\n    Here is a high-level summary of changes (see doc above for details):\n\n    * The tolerance used for transaction balances is inferred automatically from\n      the amounts on the transactions themselves. When not possible, a default\n      tolerance is looked up from values you can provide (as well as a global\n      default).\n\n    * There is a new 'default_tolerances' option to provide tolerances to be\n      used used when it cannot be inferred automatically. You use it like this:\n\n        option \"default_tolerance\" \"*:0.005\"\n        option \"default_tolerance\" \"INR:0.5\"\n        ...\n\n    * The 'tolerance' option has been deprecated. It now has no effect.\n\n    * Balance assertions and Pad directives use a similar inference mechanism,\n      where the tolerance is based on the precision of the expected number in\n      the input.\n\n    * Rounding errors may be automatically posted to a special account (new\n      postings are inserted during parsing where necessary). This is disabled by\n      default; you enable this by setting the new 'account_rounding' option to\n      the account you want the rounding errors to be posted to:\n\n        option \"account_rounding\" \"Equity:Rounding-Errors\"\n\n    * These changes may cause some of your transactions to report as not\n      balancing, because the tolerances and now inferred automatically and the\n      inferred tolerances may be smaller than the fixed value we used\n      previously. YOU NEED TO MAKE SUITABLE ADJUSTMENTS TO YOUR INPUT FILE.\n      However, because this might cause some minor disruption, I have provided\n      an option to allow users to revert Beancount to its previous tolerance\n      behavior for a few months:\n\n        option \"use_legacy_fixed_tolerances\" \"TRUE\"\n\n    * There is a new EXPERIMENTAL feature which makes Beancount accept an\n      explicit tolerance value on balance assertions, like this:\n\n        YYYY-MM-DD balance <account>  <number> ~ <tolerance> <currency>\n\n      For example,\n\n        2015-05-17 balance Assets:Vanguard   23.2134 ~ 0.002 RGAGX\n\n      By default, this feature is not enabled; this is being tested out and it\n      might go away eventually. To enable it, add the following experiment flag:\n\n        option \"experiment_explicit_tolerances\" \"TRUE\"\n\n\n  - The 'plugin' option has now been deprecated and will issue a warning if you\n    use it. You must now use the 'plugin' directive instead.\n\n  - The parser now supports boolean types, with this syntax: TRUE, FALSE. This\n    can be useful to set metadata fields.\n\n  - Postings that were inserted automatically have some metadata set on them to\n    distinguish this fact ('__automatic__').\n\n\n\n2015-05-12\n\n  - Allow currency names up to 24 characters (not 12). This is often required\n    for people using financial options.\n\n\n2015-05-11\n\n  - Added parsing of boolean types: TRUE, FALSE will produce values of\n    Python \"True\" and \"False\". This is useful to used as metadata values.\n\n  - Removed extraneous reference release in key_value_value in parser.\n\n\n2015-05-03\n\n  - Added Equity to the list of accounts that count as proceeds for\n    beancount.plugins.sellgains plugin. This is so that old transactions\n    may use an unknown equity account and still pass the sellgains check.\n\n\n2015-04-19\n\n  - Fixed a bug with the pad directive that did not look for account name\n    boundaries when looking at a parent account.\n\n  - In output of bean-doctor context, now print the residual amount.\n\n\n2015-04-18\n\n  - Implemented limited support for arithmetic expressions. For now, only\n    support division. So A/B where \"A\" and \"B\" are numbers should now work.\n\n    In order to support full arithmetic expressions, we need to reimplement\n    the lexer in order to distinguish between \"*\" as a TAG or as a multiplication\n    token, and operator precedence to deal with terms vs. exprs. This will\n    probably be done soon. (I need division for a particular task right now, so\n    it is being added in a backwards-compatilble way).\n\n\n2015-04-18\n\n  - Merged a new plugin (beancount.plugins.sellgains) that automatically\n    cross-checks the purchase price of a lot against all the other legs that are\n    in non-income accounts. This is useful to verify the correctness of @ price\n    annotations on reductions at cost, because not only the transactions have to\n    balance in cost (that is, including the income portion), they then also have\n    to balance without the income portion, using the price you attached (if you\n    somehow reported an incorrect price you will get an error).\n\n    This is best explained with an example:\n\n      1999-07-31 * \"Sell\"\n        Assets:US:BRS:Company:ESPP          -81 ADSK {26.3125 USD} @ 26.4375 USD\n        Assets:US:BRS:Company:Cash      2141.36 USD\n        Expenses:Financial:Fees            0.08 USD\n        Income:US:Company:ESPP:PnL      -10.125 USD\n\n    The regular balance verification checks all the legs against the cost basis:\n\n      -18 x 26.3125 + 2141.36 + 0.08 - 10.125 = 0 USD\n\n    This is the default behavior, and is still required. With the sellgains\n    plugin, an additional check also verifies that\n\n      -18 x 26.4375 + 2141.36 + 0.08 = 0 USD\n\n    Note how the price (26.4375) is used instead of the cost basis, and how\n    income legs are ignore in the calculation.\n\n    Transactions with reductions without a price and without an income leg will\n    be ignored, so only those which can be verified will be verified.\n\n\n2015-04-13\n\n  - Beancount now allows the cost to the set to zero. This is useful for stock\n    options that one receives from an employer that have no value attached to\n    them.\n\n    Additionally, I'm considering allowing negative cost as well, which may be\n    necessary to handle adjusted cost bases, but I haven't added this just yet.\n    I'm not 100% convinced (adjustments are probably always upward).\n\n\n2015-04-16\n\n  - Added a new command to bean-doctor: \"linked\" which prints out all\n    transactions linked to the one at a given line number, in a format Emacs can\n    grok with filename and location like errors so you can easily navigate\n    between the linked transactions.\n\n    Correspondingly, added a \"bean-linked\" command to the Emacs support mode.\n\n\n2015-04-13\n\n  - A minor improvment to bean-format has been implemented: Whitespace before\n    postings is now automatically normalized to the most frequent spacing\n    present in the document. This allows you to be somewhat sloppy on the\n    postings themselves when entering new transactions.\n\n\n2015-02-16\n\n  - Finally completed documentation on how to export your portfolio to Google\n    Finance, as\n    http://furius.ca/beancount/doc/export,\n    or equivalently as\n    https://docs.google.com/document/d/1eZIDRmQZxR6cmDyOJf7U3BnCm4PDMah2twxYFfKPJtM/\n\n\n2015-02-10\n\n  - Revamped the export-to-OFX report to showcase a more explicit, flexible and\n    easily debuggable configuration. Also supports the declaration of money\n    instrument equivalents within the file itself. This will be documented here:\n    https://docs.google.com/document/d/1eZIDRmQZxR6cmDyOJf7U3BnCm4PDMah2twxYFfKPJtM/\n\n\n2015-02-03\n\n  - Fixed an unreported bug with Emacs support whereby a number appearing within\n    a narration string would get aligned along with the other amounts.\n\n\n2015-02-01\n\n  - Implemented an \"include\" directive. The include directive does not parse the\n    files in order... rather, each parse run on an input file accumulates the\n    list of includes to be parsed and processed the includes after parsing the\n    file. Because we're order independent, this should work. Note however that\n    the options should be set in the root file.\n\n    This is documented here:\n    https://docs.google.com/document/d/1wAMVrKIA2qtRGmoVDSUBJGmYZSygUaR0uOMW1GV3YE0/edit#heading=h.86lelow4097r\n\n\n2015-01-24\n\n  - I created a new branch 'ledgerhub' to provide a version of Beancount that i\n    guaranteed to be compatible with LedgerHub.\n\n    Previously, LedgerHub was synchronizing a copy of some of the files under\n    beancount.core in order to avoid depending on Beancount. This turned out to\n    be difficult to maintain, as Beancount is still evolving relatively fast. So\n    I've decided to return to the original state of affairs: LedgerHub will\n    depend on a Beancount install in order to reuse its core libraries. (The\n    original reason for not doing so was that I thought I'd want to fork\n    those core libraries to support Ledger-specific features, but at this point\n    it's dubious whether I will need that at all --or whether I couldn't just\n    add generic support in Beancount's core libraries themselve to do that-- and\n    this will be an easier way to synchronize the two codebases going forward).\n\n    If you're a LedgerHub user, please checkout Beancount at its 'ledgerhub'\n    branch and make your PYTHONPATH depend on that.\n\n\n2015-01-22\n\n  - Added a dependency check for PLY and documented in the Install doc\n    (http://furius.ca/beancount/doc/install).\n\n\n2015-01-18\n\n  - Added a new, optional \"Commodity\" directive, which can be used to declare\n    commodity/currencies/instruments. The real purpose of this optional\n    directive is to hang per-commodity meta-data off of them. Some scripts are\n    much simplified by being able to define custom attributes for each\n    commodity, e.g. \"name\", \"asset-class\", \"currency-exposure\", and such. There\n    is a new function beancount.core.getters.get_commodity_map() which can be\n    used to gather a map of commodity to metadata.\n\n    You otherwise don't have to add those declarations; the new directive is\n    entirely optional and its addition should not break any existing feature\n    nor input file. It is an error to insert duplicate Commodity directives\n    for the same commodity name. I'm mainly doing this now so I can migrate\n    the portfolio dashboard script from experiments into the mainline while\n    configuring it using metadata.\n\n    The directive is documented here:\n    http://furius.ca/beancount/doc/language#heading=h.a3si01ejc035\n\n\n  - I added a development dependency on pyflakes and validated all code on\n    'default' to pass a flawless pyflakes run.\n\n\n2015-01-17\n\n  - I added a paragraph about Releases in the Install document. Basically, I\n    don't do releases: the \"default\" branch is stable, just clone on \"default\"\n    and update regularly, I do all \"risky\" feature development in branches and\n    only merge to \"default\" when fully stable. All major changes on \"default\"\n    are announced in this file.\n\n\n2015-01-11\n\n  - **IMPORTANT** Fixed an inconsistency with the signs of total cost syntax,\n    like this:\n\n        <account>          -1000 USD @@ -1123.24 CAD\n\n    It was required to use the negative sign in order to get the correct value.\n    This makes no sense: per-unit cost and price amounts were unsigned, and total\n    cost values were only allowed to be positive. Also, Ledger requires all\n    costs and prices to be positive/unsigned, which could be confusing for\n    Ledger users. I had no particularly good reason to require the same sign\n    for total cost: this was only an oversight.\n\n    So I changed this so that total price, like total cost, per-unit price,\n    per-unit cost, are all positive/unsigned. An error is now raised i a price\n    or cost, total or per-unit, are provided negative. You need to convert your\n    input files to unsigned values, like this (for the above example):\n\n        <account>          -1000 USD @@ 1123.24 CAD\n\n    If you pull this change and have negative total prices, your input file will\n    break. In order to circumvent the change, you may set the\n    BEANCOUNT_ALLOW_NEGATIVE_PRICES environment variable. I will remove this\n    workaround in a few months.\n    (This bug reported by Matthew Harris.)\n\n  - Fixed a bug when total cost {{...}} syntax was being used with a negative\n    number of units: it would raise an error, although it was legal to do so.\n    For example, this is legal and was raising an error:\n\n        <account>          -10 MSFT {{455.24 USD}}\n\n    It probably did not show up much because few people use the total cost\n    method, and the tests happened only to use positive numbers of units.\n\n  - Fixed issue #5: bug in beancount.plugins.leafonly plugin when posting to a\n    non-leaf account that had no Open directive. (This bug reported by Nathan\n    Grigg.)\n\n\n2015-01-04\n\n  - Merged the 'shell' branch into 'default', providing a new tool to extract\n    information from a Beancount input file: bean-query. This is the first\n    revision of the SQL-like query language for Beancount. Documentation for it\n    is available under http://furius.ca/beancount/doc/query.\n\n\n2014-12-28\n\n  - Merged various functions (in beancount.ops.lifetimes) used to automatically\n    compute the date intervals that particular commodities are in used. This is\n    intended to be used to write scripts to automatically fetch all the price\n    entries needed during the lifetime of a particular Ledger. A script has been\n    created under experiments (src/experiments/fetch-missing-prices.py) which\n    you should be able to modify to your favourite price fetcher.\n\n  - The 'export_holdings' report now exports an extra holding as a cash\n    equivalent mutual fund in order to take into account of the value of\n    holdings that could not be converted to symbols the online portfolio\n    manager software knows about. The cash position brings the portfolio to\n    close to its total value.\n\n\n2014-12-26\n\n  - Merged the latest version of the 'display_context' branch into 'default'.\n    These changes make the DisplayContext object a factory for DisplayFormatter\n    objects which are then used to render numbers. This is a little more\n    sophisticated than the previous approach and will be reusable in the\n    rendering routines for the interactive SQL shell's result.\n\n\n2014-12-25\n\n  - The 'metadata' branch has been merged into 'default'. Metadata is now\n    officially supported in Beancount.\n\n    * Metadata can be created on all directives and postings. An attribute of\n      '.meta' can be used to access all parsed metadata. The object is a dict\n      which can also have its fields accessed via attributes.\n\n    * The '.source' attribute on all directives has been removed and '.meta' now\n      replaces it. The 'filename' and 'lineno' attributes which were previously\n      available on the beancount.core.data.Source tuple have been folded into\n      the metadata dict under the same names.\n\n    * Metadata values can be of various datatypes and these will be parsed and\n      available in Python:\n\n      - Strings\n      - Account names (appears as str)\n      - Currency (appears as str)\n      - Dates (a datetime.date instance)\n      - Tags (appears as str)\n      - Numbers (a decimal.Decimal instance)\n      - Amount (a beancount.core.amount.Amount instance)\n\n    * Attributes without a value will be parsed and have a value of 'None'. If\n      an attribute is repeated multiple times, only the first value for this\n      attribute will be parsed and retained.\n\n    * Apart from the 'filename' and 'lineno' attributes, no other \"special\"\n      usage of metadata will be made by Beancount. Metadata is intended to be\n      for the user to attach arbitrary data to directives. The query language\n      will eventually support query arbitrary metadata attributes, but no special\n      meaning will be assumed.\n\n\n\n2014-12-19\n\n  - Created a new \"export_holdings\" report type that spits out an OFX format of\n    the holdings that can be consumed by external portfolio definition services\n    such as Google Finance (for example). This is useful, as it allows you to\n    monitor changes in your portfolio from a mobile device.\n\n    Note that in some of these services, a commodity that isn't a valid ticker\n    symbol fails the import process. Also, a commodity that is a mutual fund\n    recorded in the OFX file as a stock will similar fail the import process. We\n    need to find a way to fetch this info from the file itself. When metadata\n    will get merged, we should be able to get it from the account names, where\n    we could attach a property to the account's corresponding Open directive.\n\n    In the meantime, and as a kludge to start using this right away, place a\n    note for each currency (at any date, in any account) with the text in the\n    following format:\n\n       YYYY-MM-DD note <account> \"Export <commodity>: IGNORE\"\n       YYYY-MM-DD note <account> \"Export <commodity>: MUTUAL_FUND\"\n\n    This will get removed later.\n\n\n\n2014-12-07\n\n  - After much more work on the SQL query language (in 'shell' branch), I need\n    to access Inventory positions by index, so I removed the getitem ([])\n    operator from Inventory, which was unused in the codebase. (If you have\n    scripts this *may* affect you; translate calls to [] into calls to\n    .get_position()).\n\n\n\n2014-11-29\n\n  - Completed work on calculating returns (merged branch 'returns' into\n    default). I created a new package called \"projects\" to hold these special\n    tasks, those that don't integrate in the plugins framework, and created a\n    beancount.projects.returns library that can be inovoked as a script, like\n    this:\n\n      python3 -m beancount.projects.returns <filename.beancount> ...\n\n    For the arguments, you will have to read the docstring. You essentially need\n    to provide two or three regular expressions to list the set of accounts\n    that define you portfolio as well as other lists of accounts that should be\n    considered internal flows. See the docstring for details. I will eventually\n    move much of that explanation into a Google Doc and detail it in more depth.\n\n    There is also a script that runs it on the example beancount file, as well\n    as examples in the unit tests.\n\n\n2014-11-27\n\n  - Started the \"booking\" branch which will implement the\n    http://furius.ca/beancount/doc/proposal-booking proposal. The first step was\n    to add an argument to the Open directive to specify the default booking\n    method to use when there are either 0, 2 or more matching lots in an\n    inventory. The only value supported by this are currently \"STRICT\" (the\n    default) or \"NONE\" which effectively disables inventory booking and is\n    equivalent to Ledger's method of accumulating lots. The new syntax looked\n    like this and is backward compatible with previous synta for it:\n\n      YYYY-MM-DD open <account>   [<commodities>]  [\"<booking-method>\"]\n\n    Though the result may be inventories with positive and negative positions in\n    the same commodity, this is useful for working with accounts booked at their\n    average cost (until we have correct treatment of basis for those with\n    dedicated syntax for merging lots). The total number of units and the total\n    cost should be correct.\n\n    This state of the 'booking' branch was merged into the 'default' branch,\n    which is why it appears in this CHANGE entry.\n\n\n2014-11-21\n\n  - Merged \"metadata\" branch into default, Beancount now parses the metadata but\n    does not store it anywhere. This was done so that early adopters can start\n    to enter metadata right away even if it is not usable yet.\n\n\n2014-11-13\n\n  - Added a new \"beancount.plugins.ira_contribs\" module that automatically\n    inserts postings for tracking pre-tax money contributions.\n\n\n2014-11-11\n\n  - The precision of rendered numbers isn't quantized nor subject to hard-coded\n    maximums anymore. I cleaned this up. There is a new \"DisplayContext\" object\n    that maintains the most common and maximum precisions to be used to render\n    each currency, and this precision is derived automatically from the numbers\n    used in the input file (the most common is the mode of the distribution of\n    numbers seen). The alignment of the printer's amounts is now also fixed (it\n    rendered correct transactions lately but alignment was a little borked), and\n    the output is now kept as tightly as possible close to the account names.\n\n  - Numbers don't render with commas by default anymore. There is a new option:\n    'render_commas' that you can set to have commas in numbers rendered in all\n    the routines that output numbers.\n\n\n2014-11-09\n\n  - A new directive has been created: \"plugin\" that accepts the an optional\n    plugin-configuration string. Instead of\n\n      option \"plugin\" \"<module>\"\n      option \"plugin\" \"<module>:<config>\"\n\n    Now use:\n\n      plugin \"<module>\"\n      plugin \"<module>\" \"<config>\"\n\n    The plugin option will remain functional for a while. The configuration\n    string is as previously a free-form string whose meaning is to be defined by\n    the plugin itself.\n\n  - The parser now stores the distribution of the precisions of all the numbers\n    it parses, and this adds a little bit of overhead (about 4%). With a large\n    file, you might notice a little tiny bit of extra slowness. The reason I\n    created this is in order to automatically infer reasonable defaults for the\n    display precision (used in the SQL shell at the moment).\n\n  - Renamed the 'bean-query' tool to 'bean-report'. There is a good reason for\n    this: there is a new tool coming that will provide an command-shell to make\n    interactive queries on your ledger contents. This tool will be\n    called--appropriately--\"bean-query\". I decided that the two tools should be\n    separate: \"bean-report\" will be used to render custom-coded reports (nothing\n    changes), and \"bean-query\" will be used to build reports out of SQL-like\n    queries. I'm hoping that eventually bean-query functionality will entirely\n    subsume bean-report reports, but that is unclear at this point.\n\n  - Made default rendering for changes and balances of HTML reports by units().\n    Rendering all the lots was horrible in even moderately complex stock trading\n    accounts with a few positions. Now we aggregate by currency (\"units\").\n\n     In order for the user to be able to view the previously available lot\n     detail from the web interface, we now provide a link to the \"context\",\n     which is a link specific to a transaction that renders the balances for all\n     the accounts just before the transaction is applied, and just after.\n\n  - (Internal) Renamed beancount.core.complete to beancount.core.interpolate.\n    I've been using the term interpolate for a while now, in the docs, and it's\n    way more telling than complete.\n\n\n(Beginning to summarize user-facing changes 2014-11-09.)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.9130859375,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n\n\n          ------------------------------------------------------------\n\nNote:\nThis is a GNU GPL \"v2 only\" license.\nThis is not a GNU GPL \"v2 or any later version\" license.\n                                                             ---Martin Blais\n"
        },
        {
          "name": "CREDITS",
          "type": "blob",
          "size": 1.3671875,
          "content": "Martin Blais (original author).\n\nContributors (in alphabetical order):\n\n- Adrián Medraño Calvo (support for UTF-8)\n- Alex Johnstone (bug fix)\n- Alok Parlikar (bug fix)\n- Christoph Sarnowski (bug fix)\n- Daniel Clemente (early adoption and tickets)\n- Dominik Aumayr (web-related bug fixes, static documentation, author of Fava)\n- Ethan Glasser-Camp (improvements to grammar)\n- Felix Eckhofer (bug fix)\n- Hugo Ideler (bug fix price source0\n- Jakob Schnitzer (bug fixes in plugins and SQL, co-author/maintainer of Fava)\n- Jason Chu (bug fixes, plugins, lots of comments)\n- Jeff Brantley (windows installation improvements)\n- Johannes Harms (bug fixes, forecast plugin improvement)\n- Josh Moles (importer for TSP)\n- Justus Pendleton (bug fixes, patches)\n- Mark Hansen (docs)\n- Markus Teufelberger (bug fix / testing)\n- Martin Michlmayr (numerous tickets, CI setup, bug fixes and improvements)\n- Michael Droogleever (importer-related improvements)\n- Mikhail Gusarov (parser / improvement for short account names)\n- Patrick Ruckstuhl (bug fix importers)\n- Robert Sesek (bug fix)\n- Zhuoyun Wei (importers improvements)\n- dave_stephens (web-related improvement)\n- rkhwaja (windows installation improvement)\n- Сергей Трофимов (bug fix, parser)\n\nAnd all the other users on the mailing-list asking important questions, making\nuseful suggestions and engaging in productive discussions. Thank you!\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.30078125,
          "content": "#!/usr/bin/env make\n\nINPUT = $(HOME)/q/office/accounting/blais.beancount\nDOWNLOADS = $(HOME)/u/Downloads\nTOOLS=./tools\n\nPYTHON ?= python3\nGRAPHER = dot\n\nPYMODEXT = $(shell $(PYTHON) -c 'import importlib.machinery; print(importlib.machinery.EXTENSION_SUFFIXES[0])')\n\nall: build\n\nclean:\n\trm -rf build\n\tfind . -name __pycache__ -exec rm -r \"{}\" \\; -prune\n\n.PHONY: build\nbuild:\n\tmeson setup --reconfigure -Dtests=enabled build/\n\tninja -C build/\n\tcp build/_parser$(PYMODEXT) beancount/parser/\n\n.PHONY: ctest\nctest:\n\tmeson setup --reconfigure -Dtests=enabled build/\n\tmeson test -C build/\n\n\n# Dump the lexer parsed output. This can be used to check across languages.\ndump_lexer:\n\tbean-dump-lexer $(INPUT)\n\n\n# Check for memory leaks.\ngrind:\n\tvalgrind --leak-check=full $(PYTHON) bean-sandbox $(INPUT)\n\n# Regenerate the website.\nhtml docs:\n\tprojects docs beancount\n\n# Compute and plot inter-module dependencies.\n# We want to insure a really strict set of relationships between the modules,\n# and this is the high-level picture.\nbuild/beancount.deps:\n\tsfood -i bin beancount > $@\n\nCLUSTERS_REGEXPS =\t\t\t\t\t\t\t\\\n\tbeancount/core/.*_test\\.py\t \tcore/tests\t\t\\\n\tbeancount/core\t\t\t \tcore\t\t\t\\\n\tbeancount/ops/.*_test\\.py\t \tops/tests\t\t\\\n\tbeancount/ops\t\t\t \tops\t\t\t\\\n\tbeancount/parser/printer_test\\.py \tprinter/tests\t\t\\\n\tbeancount/parser/printer.py\t \tprinter\t\t\t\\\n\tbeancount/parser/options_test\\.py \toptions/tests\t\t\\\n\tbeancount/parser/options.py\t \toptions\t\t\t\\\n\tbeancount/parser/.*_test\\.py\t \tparser/tests\t\t\\\n\tbeancount/parser\t\t \tparser\t\t\t\\\n\tbeancount/plugins/.*_test\\.py\t \tplugins/tests\t\t\\\n\tbeancount/plugins\t\t \tplugins\t\t\t\\\n\tbeancount/reports/.*_test\\.py\t \treports/tests\t\t\\\n\tbeancount/reports\t\t \treports\t\t\t\\\n\tbeancount/scripts/bake.*_test\\.py\tscripts/bake/tests\t\\\n\tbeancount/scripts/bake.*\t\tscripts/bake\t\t\\\n\tbeancount/scripts/.*_test\\.py\t \tscripts/tests\t\t\\\n\tbeancount/scripts\t\t \tscripts\t\t\t\\\n\tbeancount/utils/.*_test\\.py\t \tutils/tests\t\t\\\n\tbeancount/utils\t\t\t \tutils\t\t\t\\\n\tbeancount/web/.*_test\\.py\t \tweb/tests\t\t\\\n\tbeancount/web\t\t\t \tweb\t\t\t\\\n\tbeancount/load.*_test\\.py\t \tload/tests\t\t\\\n\tbeancount/load.*\\.py\t\t \tload\t\t\t\\\n\tbeancount                        \tload\n\n\nbuild/beancount.pdf: build/beancount.deps\n\tcat $< | sfood-cluster-regexp $(CLUSTERS_REGEXPS) | grep -v /tests | sfood-graph | $(GRAPHER) -Tps | ps2pdf - $@\n\tevince $@\n\nbuild/beancount_tests.pdf: build/beancount.deps\n\tcat $< | sfood-cluster-regexp $(CLUSTERS_REGEXPS) | sfood-graph | $(GRAPHER) -Tps | ps2pdf - $@\n\tevince $@\n\n\n\n# Compute ahd plot the dependencies within the core.\n# We are considering a separation of the basic data structure and the basic operations.\n# This provides the detail of the relationships between these sets of fils.\nbuild/beancount-core.pdf: build/beancount-core.deps\n\tsfood -ii beancount/core/*.py | sfood-graph | $(GRAPHER) -Tps | ps2pdf - $@\n\nshowdeps-core: build/beancount-core.pdf\n\tevince $<\n\n\n# Run in the debugger.\ndebug:\n\tgdb --args $(PYTHON) /home/blais/p/beancount/bin/bean-sandbox $(INPUT)\n\nvtest vtests verbose-test verbose-tests:\n\t$(PYTHON) -m pytest -v -s beancount examples\n\nqtest qtests quiet-test quiet-tests test tests:\n\t$(PYTHON) -m pytest beancount\n\ntest-last test-last-failed test-failed:\n\t$(PYTHON) -m pytest --last-failed beancount\n\ntest-naked:\n\tPATH=/bin:/usr/bin PYTHONPATH= $(PYTHON) -m pytest -x beancount\n\n# Run the parser and measure its performance.\n.PHONY: check\ncheck:\n\tbean-check $(INPUT)\n\n\n# Generate the example file.\nEXAMPLE=examples/example.beancount\nexample $(EXAMPLE):\n\t./bin/bean-example --seed=0 -o $(EXAMPLE)\n\n\n# Run the importer.\n.PHONY: import\nimport:\n\tbean-import $(INPUT) $(DOWNLOADS)\n\n# My development sandbox script. This is messy and it's okay.\n.PHONY: sandbox\nsandbox:\n\tbean-sandbox $(INPUT)\n\nmissing-tests:\n\t$(TOOLS)/find_missing_tests.py beancount\n\nfixmes:\n\tegrep -srn '\\b(FIXME|TODO\\()' beancount || true\n\nfilter-terms:\n\tegrep --exclude-dir='.hg' --exclude-dir='__pycache__' -srn 'GOOGL?\\b' $(PWD) | grep -v GOOGLE_APIS || true\n\nmulti-imports:\n\t(egrep -srn '^(from.*)?import.*,' beancount | grep -v 'from typing') || true\n\n# Check for unused imports.\nsfood-checker:\n\tsfood-checker bin beancount\n\n# Check dependency constraints.\nconstraints dep-constraints: build/beancount.deps\n\t$(TOOLS)/dependency_constraints.py $<\n\n\n# Run the linter on all source code.\nruff lint:\n\tNO_COLOR=1 ruff check .\n\tNO_COLOR=1 ruff format .\n\nmypy typecheck:\n\tNO_COLOR=1 mypy .\n\n# Check everything.\nstatus check: filter-terms missing-tests dep-constraints multi-imports test\n\n\n# Experimental docs conversion.\ndownload-pdf:\n\t./tools/download_docs.py pdf $(HOME)/p/beancount-downloads/pdf\n\ndownload-odt:\n\t./tools/download_docs.py odt $(HOME)/p/beancount-downloads/odt\n\nsphinx sphinx_odt2rst:\n\t./tools/sphinx_odt2rst.py $(HOME)/p/beancount-downloads/odt $(HOME)/p/beancount-docs\n\nconvert_test:\n\t./tools/convert_doc.py --cache=/tmp/convert_test.cache '1WjARst_cSxNE-Lq6JnJ5CC41T3WndEsiMw4d46r2694' /tmp/trading.md\n\n# This does not work well; import errors just won't go away, it's slow, and it\n# seems you have to pregenerate all .pyi to do anything useful.\npytype:\n\tfind $(PWD)/beancount -name '*.py' | parallel -j16  pytype --pythonpath=$(PWD) -o {}i {}\n\npytype1:\n\tpytype --pythonpath=$(PWD) beancount/utils/net_utils.py\n\nlinks bazel-link:\n\trm -f beancount/parser/_parser.so\n\tln -s -f ../../bazel-bin/beancount/parser/_parser.so beancount/parser/_parser.so\n\tln -s -f ../../bazel-bin/beancount/cparser/extmodule.so beancount/cparser/extmodule.so\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.333984375,
          "content": "========================================================\n   beancount: Double-Entry Accounting from Text Files\n========================================================\n\n.. contents::\n..\n    1  Description\n    2  Documentation\n    3  Download & Installation\n    4  Versions\n    5  Filing Bugs\n    6  Copyright and License\n    7  Donations\n    8  Sincerely, thank you.\n    9  Author\n\n\nDescription\n===========\n\nA double-entry bookkeeping computer language that lets you define financial\ntransaction records in a text file, read them in memory, generate a variety of\nreports from them, and provides a web interface.\n\n\nDocumentation\n=============\n\nDocumentation can be read at:\n\n  https://beancount.github.io/docs/\n\nDocumentation authoring happens on Google Docs, where you can contribute by\nrequesting access or commenting on individual documents. An index of all source\ndocuments is available here:\n\n  http://furius.ca/beancount/doc/index\n\nThere's a `mailing-list dedicated to Beancount\n<https://groups.google.com/forum/#!forum/beancount>`_, please post questions\nthere, so others can share in the responses. More general discussions about\ncommand-line accounting also occur on the `Ledger mailing-list\n<https://groups.google.com/forum/#!forum/ledger-cli>`_ so you might be\ninterested in that group as well.\n\n\nDownload & Installation\n=======================\n\nYou can obtain the source code from the official Git repository on Github:\n\n  | https://github.com/beancount/beancount/\n\nSee the `Installing Beancount`__ document for more details.\n\n__ http://furius.ca/beancount/doc/install\n\n\nVersions\n========\n\nThere are three versions\n\n- **Version 3** (`branch v3 <http://github.com/beancount/beancount/tree/v3>`_):\n  The current stable version of Beancount since June 2024. Use this. Note that\n  this version is trimmed down from v2 and most of the tools the v2 branch\n  included have been moved to their own independent projects on Github.\n\n- **Version 2** (`branch v2 <http://github.com/beancount/beancount/tree/v2>`_):\n  The previous stable version of Beancount, in maintenance mode from 2020 until\n  2024 and now frozen and obsolete. This was a complete rewrite of the first\n  version, which introduced a number of constraints and a new grammar and much\n  more.\n\n- **Version 1** (`branch v1 <http://github.com/beancount/beancount/tree/v1>`_):\n  The original version of Beancount. Development on this version halted in 2013.\n  This initial version was intended to be similar to and partially compatible\n  with Ledger. Do not use this.\n\n\nFiling Bugs\n===========\n\nTickets can be filed at on the Github project page:\n\n  https://github.com/beancount/beancount/issues\n\n\nCopyright and License\n=====================\n\nCopyright (C) 2007-2024  Martin Blais.  All Rights Reserved.\n\nThis code is distributed under the terms of the \"GNU GPLv2 only\".\nSee COPYING file for details.\n\n\nDonations\n=========\n\nBeancount has found itself being useful to many users, companies, and\nfoundations since I started it around 2007. I never ask for money, as my intent\nwith this project is to build something that is useful to me first, as well as\nfor others, in the simplest, most durable manner, and I believe in the genuinely\nfree and open stance of Open Source software. Though its ends are utilitarian -\nit is about doing my own accounting in the first order - it is also a labor of\nlove and I take great pride in it, pride which has pushed me to add the polish\nso that it would be usable and understandable by others. This is one of the rare\nareas of my software practice where I can let my desire for perfection and\nminimalism run untamed from the demands of time and external constraints.\n\nMany people have asked where they can donate for the project. If you would like\nto give back, you can send a donation via Wise (preferably):\n\n    https://wise.com/share/martinb4019\n\nor PayPal at:\n\n    https://www.paypal.com/paypalme/misislavski\n\nYour donation is always appreciated in any amount, and while the countless hours\nspent on building this project are impossible to match, the impact of each\ndonation is much larger than its financial import. I truly appreciate every\nperson who offers one; software can be a lonely endeavour, and those donations\nas well as words of appreciation keep reminding me of the positive impact my\nside projects can have on others. I feel gratitude for all users of Beancount.\n\nThank you!\n\n\nAuthor\n======\n\nMartin Blais <blais@furius.ca>\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 212.2705078125,
          "content": "-*- mode: org -*-\nbeancount: TODO\n* V3 / C++\n\n- TODO(blais): Setup ASSERT() as a stream.\n- Replace absl/strings/string_view.h to <string_view>\n\n- Contemplate removing Ledger and the beancount::Ledger proto. Do we really need\n  both? Measure performance and use cases and eliminate one or the other.\n\n- Establish a distinction between strings and currencies in data type in Python;\n  this allows us to process metadata correctly. See this plugin for a use case:\n  beancount.plugins.check_commodity\n\n- Review and test pointer ownership and leakage. This parser does not currently\n  apply much rigor on reclaiming memory.\n\n- In options `plugin_processing_mode`:\n\n    TODO(blais): Make the default include all the core plugins, as PEDANTIC.\n    Let that be the default. Make DEFAULT some other name. V3 should include\n    all the pedantry by default.\n\n** Reminders\n\n- It would be great to be able to file a reminder of payment directive, and\n  somehow for bean-check to warn you to file those when within a certain time\n  frame, e.g., 30 days.\n\n\n** For API\n\n- Inventory: Add a function to discard by currency.\n- Inventory: Make it easier to reduce & convert to a single currency.\n\n\n* Priorities\n\n- Fix #145\n\nbooking_full.py: # FIXME: Refactor compute_cost_number() and convert_costspec_to_cost().\n\n- Start versioning very soon. It's desired by users.\n\n- Pivot report... very useful. I need it.\n- Pull request for Unicode support: https://bitbucket.org/blais/beancount/pull-requests/13/allow-unicode-in-account-names/diff#comment-20233638\n- Fix #128\n- Fix #130\n\n{booking}\n{holding}\n{balance-where}\n{autogroup}\n{review-dcontext}\n{write-intro-doc}\n{commodity-required}\n\n\n* Returns (Revision)\n\n  - Fix remaining tests for removal of open/balance entries from segment_periods().\n\n  - Implement per account, with data structures + code to combine them together\n  - Trailing windows\n  - Rolling windows\n  - Calculate pre-tax returns, post-tax returns\n  - Output nice debugging information\n  - Warn when prices aren't within a certain date interval with their usage\n  - Render a graph of the actual values of the assets as well.\n  - There should be a separate web application that handles this, no need to\n    pre-render everything.\n  - You need to merge the external entries when multiple ones occur on the same\n    date.\n  - Handle the various FIXMEs.\n\n* Settlement Dates (Split & Merge)\n\n  In http://furius.ca/beancount/doc/proposal-settlement, I describe the problem\n  of merging two half-transactions that occur at different dates, pulled by\n  importing from two different accounts into a single one. I also discuss that\n  this problem is dual to that of providing a way to input a single transaction\n  with legs posting at different dates. These two problems are related and will\n  be dealt together by providing additions to the syntax and some plugins as\n  well.\n\n  - Including the email thread with mharris & redstreet0 in the settlement doc.\n\n  - Review all the documentation to convert \"transfer account\" to \"clearing\n    account\" everywhere; that's the correct name for this idea (thanks Filippo).\n\n  - Limbo accounts: Start a document on handling limbo accounts, summarize all\n    info from emails. (BTW, these are called \"Clearing Accounts\"; rename all docs)\n\n  - You need to be able to support a single transaction that gets amortized over\n    time.\n\n** Dated Postings\n\n  - In order to create multiple similar transactions at many dates in one\n    syntax' entry, you could allow overriding the date on each posting, e.g.:\n\n       2013-04-01 * Blah di bla\n         2013-01-01  Grocery          10 USD\n         2013-02-01  Grocery          10 USD\n         2013-03-01  Grocery          10 USD\n         Cash\n\n    This would create three transactions, with these dates:\n\n        date           aux-date\n        2013-01-01     2013-04-01     10 / 3.33\n        2013-02-01     2013-04-01     ...\n        2013-03-01     2013-04-01     ...\n\n    Could be a nice way to make distributed transactions.\n\n  - Move 'effective date' to the postings in my input file, using the dated\n    postings feature.\n\n  - Another idea would be to make @pad able to pad for a percentage of the\n    total, so that we're able to use @pad instead of \"distribution of expenses\"\n    entries.\n\n* Exporting Data\n\n  Beancount has various reports and export mechanisms, but there remain several\n  flaws. I want to address some of these urgently.\n\n  - Implement output to XLS as well.\n\n  - Complete the export of holdings to a Google Spreadsheet and completely\n    replace my usage of Google Finance for intra-day reporting. Part of this\n    work should result in the ability to produce a spreadsheet of various\n    aggregations of dimensions on each stock, e.g., report intra-day movement in\n    small, mid and large cap stock positions separately.\n\n  - Idea: Export the Posting table to a Spreadsheet equivalent, as a single list\n    of postings, joining transactions by an id column. That should quiet down\n    those who think you can do this with a Spreadsheet to try it out for\n    themselves.\n\n  - Write a script that, given my portfolio of ETFs, will compute the total\n    exposure of AMZN (or any other stock contained within the ETF) of the entire\n    portfolio value. In other words, sum up the components of individual stocks\n    across all ETFs and mutual funds, and reaggregate by those individual\n    stocks. I believe that there is much overlap.\n\n* Documentation\n\n  I have a number of documents pending to release, some of which for part of the\n  Benacount Cookbook which exists to provide guidance on selecting accounts and\n  methods to book various things.\n\n  Tasks:\n\n  - \"Introduction to Double-Entry Booking.\" The most important one is this intro\n    doc. I have a very clear idea of how I want to present this, but for some\n    reason I've written everything else and left this for last. I had a couple\n    of shots at it but never really finished it. This document will also contain\n    a section to explain how inventories \"work\", that is, how amounts posted to\n    them are matched against their existing contents. Complete this doc first.\n    {write-intro-doc}\n\n  - \"Cookbook: Taxes.\" I have a nearly complete cookbook document on booking\n    taxes. It's timely [April 2016] and I should try to complete that now for\n    this reason.\n\n  - \"Cookbook: Health Care\". I have a nearly complete cookbook document on\n    booking health-care costs. Tracking health-case costs in the US has caused\n    me headaches occasionally but I've managed to come up with a nice framework\n    for doing so. I need to finish this document to share this. (Ideally with\n    DEDUC and COPAY legs explanation. Write an accompanying plugin to insert the\n    deductible tracking and what-not.)\n\n  - \"Property sale example.\" Beancount was begun shortly after buying my first\n    real-estate property (a condominium loft in Montreal). Because of this, I\n    tracked _all_ related expenses in Beancount and I'd like to build an example\n    script which processes my transactions to extract just those and finally\n    calculate the precise return on the property, including every single little\n    tidbit that was spent on it. My goal is to demonstrate that although at face\n    value a profit was made, when you account for all the details you realize\n    that the true return is much smaller--even potentially a loss. Part of the\n    work here involves ensuring that all the input numbers can be pulled out of\n    Beancount directly, without using a spreadsheet. I think that doig this\n    might require some custom scripting and I intended for this use case to\n    become an example of writing scripts against the Beancount API.\n\n  - Write a worked and detailed example of generating automated transactions in\n    the Plugins document.\n\n  - Make sure this doc is linked from somewhere:\n    http://furius.ca/beancount/doc/proposal-rounding\n\n  - Create an index page of all the possible reports, from the web page.\n\n  - Write more on saving, \"Climbing the Capital Mountain.\"\n\n  - Summarize Ledger's --limit --real --virtual --equity, etc. options.\n\n  - Write a doc about how conceptually Beancount's data is really just a single\n    large joined table of Transactions JOIN Postings with some repeated fields\n    for inventory and tags, some data types for Amount and Inventory along with\n    accompanying functions to deal with those types. This could really help a\n    lot of people understand the framework for extracting data from Beancount.\n\n** Misc Documentation Tasks\n\n  - Write a script to automatically convert and upload the docs for the shell\n    functions and what-not into a Google Docs that we can open with a web\n    browser. Write a script to spit it out in a nice format and upload.\n\n  - In the comparison doc: describe how Beancount has asset types\n\n  - Comparison w/ Ledger doc: \"balance sheet and closing of year\"\n\n  - Write a document that explains how to convert to and from Ledger and/or\n    HLedger.\n\n  - Complete \"How Inventories Work?\"\n\n  - Complete intro document on double-entry bookkeepingk.\"\n  - Complete Design Doc\n\n  - Change documentation script to try to download to ODT format and then batch\n    format to ebook\n\n  - You should have a dedicated section of your document that explains how market\n    values are reported, that is, via the unrealized gains plugin. Also provide a\n    market() function, to value holdings.\n\n  - Finally bake a PDF of all GDocs documentation and add a link to it. Should\n    be mobile-friendly.\n\n\n\n\n  - Merge \"Getting Started with Beancount\" & \"Tutorial & Example\" into a single\n    document. See comments from:\n    https://docs.google.com/document/d/1w5wWVFuPe6H2Aeex8iqCL8YfAO6xNZgzmrnRNlvxJec/\n\n  - Merge \"A Comparison of Beancount, Ledger & HLedger\" & \"Beancount History &\n    Credits\" documents into one. See comments from:\n    https://docs.google.com/document/d/1w5wWVFuPe6H2Aeex8iqCL8YfAO6xNZgzmrnRNlvxJec/\n\n  - Move the \"spreadsheet / mint / quicken / quickbooks / gnucash / sql\"\n    comparison bit out of the \"Motivation\" document into the \"Comparison\" document.\n    See comments from:\n    https://docs.google.com/document/d/1w5wWVFuPe6H2Aeex8iqCL8YfAO6xNZgzmrnRNlvxJec/\n\n  - Make the four extraction methods clear, create a \"part\" for the four docs.\n\n  - Document average cost inventory booking; in doing so, include this example\n    from yegle:\n\n       \"The average cost booking could also be useful in other scenarios. For example,\n       when you buy gift card in various discounted price, redeem it to an account, and\n       use it later. One can manually recalculate cost-basis like this:\n\n         2016-04-15 open Assets:CC\n         2016-04-15 open Assets:ITUNES\n         2016-04-15 open Expenses:Movie\n\n         2016-04-15 * \"15% off giftcard\"\n             Assets:CC        -85 USD\n             Assets:ITUNES    100 GUSD {2016-04-15, 0.85 USD}\n\n         2016-04-16 * \"no discount\"\n             Assets:CC        -50 USD\n             Assets:ITUNES     50 GUSD {2016-04-16, 1 USD}\n\n         2016-04-16 * \"recalculate cost basis\"\n             Assets:ITUNES    -50 GUSD {2016-04-16, 1 USD} @1 USD\n             Assets:ITUNES   -100 GUSD {2016-04-15, 0.85 USD} @0.85 USD\n             Assets:ITUNES    150 GUSD {2016-04-16, 0.90 USD}\n\n         2016-04-16 * \"rent a movie\"\n             Assets:ITUNES    -10 GUSD {2016-04-16, 0.90 USD}\n             Expenses:Movie    10 GUSD {2016-04-16, 0.90 USD}\n\n       (http://pastie.org/private/fxtirb6nhojyqmhuop9dfq) but it would be good\n       to have beancount handle it for me.\n\n       This is exactly what I do as well, and had similarly thought it would be a great\n       secondary use for average cost booking. It would be good to document this\n       somewhere. Perhaps Martin would like it in one of his documents or at Simon's\n       plain text accounting site/\"\n\n    When I write the document on average cost basis, I'll add this example in.\n\n** Auto-Generated Doc\n\n  - Integrate submitted work on auto-generating Beancount docs in the Beancount\n    source code itself.\n\n  - Create a registry of all metadata fields being used in the system, with\n    documentation for each, so that it does not end up becoming a mess.\n\n  - Create a registry of valid experiment flags. These should be documented in a\n    single place as well. This is all easy. How to list the available ones\n    (bean-doctor should be able to do this from the registry).\n\n\n** Presentation\n\n  I'd should build another couple of presentations on Beancount. I'm thinking of\n  making a few videos this time around, something that would be situational and\n  educational.\n\n  - Use impress.js to built a visualization of the DE method\n\n  - Use photos of white board instead of Slides, use post its, maybe a chalk\n    board. Do something original.\n\n  - Record a video, that's an easy way to explain how this works.\n\n  - IDEA!!!  Use drawings a-la-ThinkBig or whatever it is. This will be the\n    perfect medium for this. Mix it with video. Start writing a detailed script.\n\n  - Script 1: Begin with a USB key in hand. \"On this 8 GB USB key, I have all of\n    8 years history of financial transactions in my life. Every single price\n    paid that went recorded into an account it these.\"\n\n  - Script 2: Motivate by speaking of the results, ask \"Wouldn't it be great if\n    a single system could do all of that?\" Explain that the task of inputting\n    all the data in a single system is a lot less work than producing all the\n    different reports IF you have a unified system. Beancount!\n\n  - Slide: 4 methods: bean-web, bean-report, bean-query, write script + plugin\n\n** Padding Documentation Review\n\n  Some users have found themselves very confused about the intended usage of the\n  Pad directive. Its documentation should be reviewed and improved\n  substantially.\n\n  - Put this in the docs to explain \"pad\"\n\n     > > Ok, restarted example, let's say you begin\n     > > accounting in dec 2013, you'll have this:\n     > >\n     > >   2010-01-01 open\n     > >   2010-01-01 pad\n     > >   2013-12-04 balance\n     > >   2013-12-08 * ...\n     > >   2013-12-11 * ...\n     > >   2013-12-17 * ...\n     > >\n     > > eventually, moving forward, you'll get to 2014:\n     > >\n     > >   2010-01-01 open\n     > >   2010-01-01 pad\n     > >   2013-12-04 balance\n     > >   2013-12-08 * ...\n     > >   2013-12-11 * ...\n     > >   2013-12-17 * ...\n     > >   2013-12-22 * ...\n     > >   2013-12-29 * ...\n     > >   2014-01-02 * ...\n     > >   2014-12-04 balance\n     > >   2014-12-06 * ...\n     > >\n     > > Allright, now you decide you like this, and you\n     > > want to enter statements before you started.\n     > > You find your paper statement for november, and\n     > > fill in:\n     > >\n     > >   2010-01-01 open\n     > >   2010-01-01 pad\n     > >   ; here you insert\n     > >   2013-11-04 balance\n     > >   2013-11-08 * ...\n     > >   2013-11-18 * ...\n     > >   ...\n     > >   ; this is what was there previously\n     > >   2013-12-04 balance\n     > >   2013-12-08 * ...\n     > >   2013-12-11 * ...\n     > >   2013-12-17 * ...\n     > >   2013-12-22 * ...\n     > >   2013-12-29 * ...\n     > >   2014-01-02 * ...\n     > >   2014-12-04 balance\n     > >   2014-12-06 * ...\n     > >\n     > > Great. Now, notice how the balance for\n     > > 2013-11-04 is probably different than that of\n     > > 2013-12-04. If instead of a pad directive you\n     > > had added a manual adjustment, you'd have to\n     > > change it here. This is the beauty of the pad\n     > > directive: it automatically does it for you.\n     > >\n     > > Now, let's keep going backward in time. You dig\n     > > around your records, you find September's\n     > > statement, but you cannot find the statement\n     > > for October, maybe it's lost, or somewhere\n     > > else. Fine! You insert a pad directive to\n     > > account for those missing transactions:\n     > >\n     > >   2010-01-01 open\n     > >   2010-01-01 pad\n     > >\n     > >   2013-09-04 balance\n     > >   2013-09-05 * ...\n     > >   ... september transactions\n     > >   2013-09-30 * ...\n     > >   2013-10-04 balance\n     > >\n     > >   ; padding for missing October statement,\n     > > where is my statement?\n     > >   2013-10-04 pad\n     > >   2013-11-04 balance\n     > >\n     > >   ... november transactions\n     > >   2013-11-08 * ...\n     > >   2013-11-18 * ...\n     > >   ...\n     > >   2013-12-04 balance\n     > >\n     > >   2013-12-08 * ...\n     > >   2013-12-11 * ...\n     > >   2013-12-17 * ...\n     > >   2013-12-22 * ...\n     > >   2013-12-29 * ...\n     > >   2014-01-02 * ...\n     > >   2014-12-04 balance\n     > >\n     > >   2014-12-06 * ...\n     > >\n     > > This is the full example.\n\nImprove this bit:\n\n    >   But the detailed explanation cannot be found. There's only one phrase: ?Think\n    >   of the Equity account as something from the past that you had to give up in\n    >   order to obtain the beginning snapshot of the Assets + Liabilities balance.?\n    >\n    > Great comment. I'll improve this.\n\n More user comments:\n\n    >   After doing my research, I found about debits and credits, which in Beancount\n    >   you represent with positive numbers and negative numbers respectively. I\n    >   found that having a name for each group of accounts helps me to think of them\n    >   at the same time, e.g. Liabilities+Equity+Income as part of a common thing,\n    >   instead of having to research each of it independently.\n    >   In the documentation you start speaking about numbers, then about signs, then\n    >   about grouping the accounts. Maybe it's better to go top-down and start\n    >   saying that there are two types of account (usually +, usually -) and then\n    >   divide each group further.\n    >\n    > I will change that, thanks for the comment.\n\n** Contributor agreement\n\n  * See note at the bottom of: https://github.com/fourier/ztree\n\n      Since ztree is a part of GNU ELPA, it is copyrighted by the Free Software\n      Foundation, Inc.. Therefore in order to submit nontrivial changes (with total\n      amount of lines > 15), one needs to to grant the right to include your works in\n      GNU Emacs to the FSF.\n\n      For this you need to complete this form, and send it to assign@gnu.org. The FSF\n      will send you the assignment contract that both you and the FSF will sign.\n\n      For more information one can read here to understand why it is needed.\n\n      As soon as the paperwork is done one can contribute to ztree with bigger pull\n      requests. Note what pull requests without paperwork done will not be accepted,\n      so please notify the maintainer if everything is in place.\n\n  - Great example (from Camlistore project link):\n    https://cla.developers.google.com/about/google-individual\n\n** Google Docs\n\n  - Write a script to download and bake all my PDFs docs in a\n    mobile-friendly format.\n\n  - I'd like the documentation links to open in \"View\" mode by default, YET\n    still allowing the user to switch to \"Suggestion\" mode if they want to. See\n    project volteface to complete this, this does not have to be a part of\n    Beancount, this should be its own presentation project.\n\n* Complete Display Precision Work\n\n  Automatically determining the required number of fractional digits to render\n  numbers with in reports can be surprisingly more complicated than it appears.\n  Statistics on the numbers visible in the input file can be used to figure out\n  good default values and options exist to override them. In addition, while\n  some numbers should be rendered at their most common precision, other\n  numbers--prices and rates--need to be rendered at a higher precision.\n  Moreover, numbers rendered from an import tend to be produced with the minimal\n  number of fractional digits but to render them nicely we should normalize that\n  to the most common precision, while rendering more digits if they are present.\n\n  For all the reasons above, at some point I built\n  beancount.core.display_context, which provides an accumulator (\"context\") for\n  statistics on precision and a formatter that can be passed around and used by\n  the various rendering methods to produce sensible output.\n\n  Tasks:\n\n  - At the moment, the Formatter objects are defined to render a single\n    precision for its numbers; this is problematic, because some of the\n    to_string() routines of the core objects print out units, cost and price\n    numbers at the same time. The Formattter object needs to be extended to\n    support formatting all three.\n\n    * Then, the core data structures should be reviewed for correct usage of\n      this new, better formatter object.\n\n  - When I implemented the display_context, I did not review the entire codebase\n    for consistent usage. I'm a bit ashamed to admit that some of the code uses\n    it, and some doesn't. It was a bit thorny to implement and after spending\n    much time getting it to work right I did not finish converting all the\n    existing code to it (I should have). In particular:\n\n    * The reports code does not use it everywhere. Review all reports code for\n      proper use of DisplayContext.\n\n    * bean-web does not use it everywhere. Review all that code.\n\n    * The rendering code used by bean-query has a DecimalRenderer object which\n      uses its own method for determining the precision should clearly be\n      converted to use the DisplayContext instead.\n\n  - In beancount.ingest, in order to redner numbers pulled from imported data\n    nicely for user review, I need to create a new rendering type of\n    max(MAXIMUM, MOST_COMMON) for the DisplayFormatter. This type will always\n    render at least the most common number of fractional digits but if required,\n    render more fractional digits. I've found over time that this would be the\n    most palatable rendering style to produce: learn the precision from the\n    Beancount input file but render the full precision found in the imported\n    files.\n\n  - Make the printer support explicit tolerance syntax. This is crucial for\n    round-trip.\n\n  - Implement the maximum number of digits by accumulating the largest possible\n    sum of all the ABSOLUTE values seen in the file. This should be a good basis\n    for compute the maximum width possibly required to render with Align.RIGHT.\n    There is currently a bug whereby that's not being computed correctly, the\n    current algorithm is insufficient for accumulated balances, there is a\n    bug.\n\n  - Create a page in the web view that lists the various precision - by\n    example - inferred in the global DisplayContext.\n\n  - Make setting the precision from bean-example easier (provide a method to\n    create that format and update without conversion on the DisplayContext\n    itself).\n\n  - In the DisplayContext, implement caching of the formatters created to\n    increase speed, especially for printing a single entry repeatedly.\n\n  - Implement reserved number of digits.\n\n  - Add docstrings to DisplayContext.\n\n  - In the EntryPrinter(), figure out the maximum width of accounts and set it up.\n  - Add a \"target num columns\" instead of a \"min_width_account\" to the\n    EntryPrinter and figure out the min_width_account automatically from it,\n    depending on whether we've got render_weights on or not. Use the longest\n    possible number of integral digits required from the DisplayContext in\n    order to make this tight.\n\n  - Add an option for the DisplayContext to issue a warning if numbers are\n    rendered through it that lose some precision.\n\n  - Add \"display_precision\" input file option whereby the user can set the\n    precision to be used by each currency.\n\n  - This needs to be handled properly, the last column needs to have correct\n    precision rendering, using the DisplayContext:\n\n      bean-query trans-pricing.beancount 'select account, sum(position),\n      cost(sum(position)), convert(cost(sum(position)), \"EUR\") group by account'\n              account                sum_position         cost_sum_posi convert_cost_sum_position_c_\n      ----------------------- --------------------------- ------------- ----------------------------------\n      Assets:Investments:Cash -734.10   USD               -734.10   USD -644.2864665613480779357556609 EUR\n      Assets:Investments:HDV    10      HDV {73.41   USD}  734.10   USD  644.2864665613480779357556609 EUR\n\n  - bean-doctor context does not render all digits... it should render all the\n    numbers as represented in memory. Don't round those numbers.\n\n  - Review all the reports code and convert it all to render using the\n    DisplayContext, make the query output also use it, and review rendering\n    precision for cost & prices and maybe find a self-contained solution for\n    passing two separate formatters somehow. {review-dcontext}\n\n* Move Much of Core to Plugins\n\n  Some of the functionality currently residing in the Beancount core could be\n  moved to plugins. For example, processing directories for auto-creating\n  document directives should not be part of the core (it's there for historical\n  reasons: plugins did not exist at the time). I'd like to do that in order to\n  simplify the Beancount core itself.\n\n** Document Directives\n\n  Document directives should be moved to their own plugin and numerous\n  improvements can be carried out on them. Their association with transactions\n  as well as avoiding collisions when creating them autoamtically would all be\n  improvements to them.\n\n  - Move the document option which seeks document files from directives to a\n    plugin.\n\n  - IDEA: Create a plugin that will convert \"doc:\" metadata to a document file,\n    that will search for a unique string name in all the filenames and\n    associate the filename with this directive via a link or something.\n\n  - Write a proposal for implementing a transformation on a specific set of\n    transactions, that supports capital gains with commission taken into\n    account.\n\n  - Can we automatically add a ^LINK to the document directive in order to\n    associate a PDF with a document?!? -> For trade tickets. Maybe let the\n    modules provide a import_link() function on the associated PDF files?\n    (This is related to ^64647f10b2fd)\n\n  - Document directives created automatically from directories of files should\n    ignore documents already associated via an explicit documents directive;\n    just ignore files with the same absolute name.\n\n  - Documents found in parent directories don't end up creating a directive\n    because we skip them because we only restrict to accounts which have had an\n    open declaration... this is probably not what we want, in order to maximize\n    the number of documents captured by this. {fa96aa05361d}\n\n  - Idea: A link between a transaction to a document can be created by\n    associating a document's checksum as the link of the transaction instead of\n    a unique filename. If Beancount could associate them - and it could, it has\n    access to the document files and the corpus of transactions - the web\n    interface could insert a special link between the two. Maybe we could do the\n    same thing with the filename as well.\n\n  - A better idea to do this would be to allow specifying an explicit document\n    directive, and finding document directives from files that are already\n    specified should not re-create them. This way you can specify both the\n    document and a transaction and use a common link as a natural way to\n    associate them, e.g.:\n\n       2014-06-20 document Income:US:Employer:GSU \"2014-06-20.employer.0000000.pdf\" ^ee63c6fc7aa6\n\n       2014-06-20 * \"PAYROLL\" | \"Refund for fractional shares\" ^ee63c6fc7aa6\n         ...\n         ...\n\n  - Document finding from files should not create documents that have been\n    explicitly specified in the ledger. Avoid duplication! This is an important\n    fix to make, that will allow both to co-exist together.\n\n  - Make document directive accept links, so that explicit documents could be\n    associated with specific transactions.\n\n  - Generalize the scope of Document directives so that they don't just point to\n    filenames, but can hold references to arbitrary document ids.\n    * Rename the field from 'filename' to 'document'\n    * Make the verification of that field against a filename option, enabled by\n      a plugin.\n    * Notify bw3443 about this.\n\n  - Do we need a dedicated web page for listing all documents? This page could\n    include documents without a date, could be rendered as a tree-table, with\n    the list of each document in the corresponding account. Maybe that's\n    overkill. DK.\n\n*** Old Notes\n\n  - You could define some special tags, like 'document', which could\n    automatically try to find the corresponding document in the repository and\n    insert a link to it in the web page. I already have a managed stash of\n    document filenames... something like this:\n\n      2014-05-20 * \"Invoice from Autodesk\"\n        #document: 2014-05-20.autodesk.invoice200.pdf\n        Income:US:Autodesk  -3475.20 USD\n        Assets:US:Checking\n\n    A document filename that does not get resolved could spit out a warning in\n    order to keep the file tidy. This is a nice idea... perhaps nicer than just\n    insert entries for documents, an actual link. Not sure if it would make that\n    much of a difference though. Something to ponder.\n\n    Create a plugin that will convert \"doc:\" metadata to a document file, that\n    will search for a unique string name in all the filenames and associate the\n    filename with this directive via a link or something.\n\n** Balance Directives\n\n  - Balance checks could also be a plugin.\n\n** Open/Close Directives\n\n  - I think if you relax the assumptions about having Open and Close directives\n    for all accounts, those could even be moved to a plugin. Without this\n    'open_close' plugin, accounts would just get auto-created and no error\n    output if they weren't. With the plugin, we would have current strict\n    behavior. This means that non-plugin code that requires the full set of\n    accounts from a list of entries would not be able to rely anymore on the\n    presence of open entries, and so would the validation.\n\n** Pad Directives\n\n  - Put all the Pad code into a single file as a plugin, same with Open Close,\n    and Balance. Maybe we can organize those codes to be all localized in single\n    files, and for many of these features, they can be implemented in\n    self-contained plugins with all their codes together! openclose.py, pad.py,\n    balance.py, etc. I think even 'event' directives can become those. And maybe\n    a good way to disambiguate between ops adn plugins is just this... maybe ops\n    is non-plugins, e.g. prices, summarize, etc.\n\n  - Pad could be a plugin, definitely.\n\n  - You could make the narrations for padding and summarization transactions\n    specifiable via options.\n\n** Dynamic Directives / Configurable\n\n  - (old notes) I recently teased out that many of the basic functions can be\n    implemented as individual stages of transformations on the list of\n    directives. This started out as a way to add plugins by adding a custom\n    transformation stage, but now I see that if I can make the parser able to\n    consume generic syntax that might allow extensions, and to allow these\n    plugins to specify new directive types for extensions, I might be able to\n    shove a *lot* of the existing functionality into nice isolated plugin\n    modules. Even functionality as basic as Balance checks. I'm not going to to\n    do this in the first release, but I want to set the stage for it.\n\n  - Make the plugins able to register types with the parser... this should\n    allow the parser to call back on the plugins to create the appropriate\n    types... this means true extensibility throughout! This is a fantastic\n    idea... do this after v2 ship.  Maybe they get parsed as a special \"Unknown\"\n    directive that accepts a grab-bag of strings and tags and accounts and\n    amounts and they get replaced by the plugins; whatever Unknown trickles\n    through would generate a warning in the errors.\n\n  - It should be possible to make the parser accept unknown directives that\n    accept an arbitrary list of accounts and string parameters, like this:\n\n      2014-06-01 unknown Assets:US:CreditCard \"Something\"\n\n\n* Import (Ingest)\n\n  In Q1 2016, I converted the entire LedgerHub codebase to a leaner, simpler and\n  better set of code under beancount.ingest. I finished all the work to convert\n  what was previously there and while I'm quite happy with it, my original ideas\n  for what the import code could do went a bit beyond what it currently does. It\n  involves a number of small but impactful improvements, such as adding an\n  on-disk cache so that repeating slow conversions (e.g., from PDF) would not\n  have to be repeated, or to carry out some default cleanup up common input\n  files. I also want to add a good CSV importer, and maybe a QIF one.\n\n** CSV Importer\n\n  - Separate the concern of the file format and table importers. This is a\n    \"table importer\" which happens to have a CSV container. Similarly, XLSX\n    containers are other table importers. Name things appropriately.\n\n  - Create a good, default, useful, configurable importer for CSV files.\n\n  - Write a CSV file sniffer that automatically infers which columns should\n    match which fields. Try to make this smart, e.g., if some column \"mostly\"\n    increases, it would be the balance column. This should be for fun (I don't\n    need it).\n\n  - Use new CSV downloads to build the importer; start using it.\n\n  - The sniffer should support column types:\n\n    * Date\n    * Description\n    * Change\n    * Credit\n    * Debit\n    * Balance\n\n    And should tolerance some cross-checking of the balance against the amounts.\n\n** Solve Slowness Problems on Mac\n\n  - Trying to bean-extract from LC on Mac takes FOREVER. Debug this thing\n    damnit.\n\n  - Implement on-disk cache now.\n\n  - Implement logging of time take by each importer (verbose switch). In\n    find_imports(). Do nice logging.\n\n  - Fix ugly importer names from my configuration.\n  - Uniformize all directory names from my configuration.\n\n** Auto-Insert\n\n  - AWESOME IDEA: Write a script that, given an input file with various sets of\n    transactions, will find sections with most similar transactions in a\n    destination file (the main file) and automatically insert those transactions\n    in the destination file in the right place and run a diff with it. This\n    should be part of the import suite. Do this as a post-process to import!\n    Maybe use org-mode or other separators as a way to segregate groups of\n    transactions.\n\n** Regression Testing Improvements\n\n  - Make example and real importers into properly named modules, not package\n    __init__.py files and move tests to their own _test.py files, as per usual.\n\n  - Improve the regression testing utility function: Allow the _test files to\n    source outside of the same directory, but keep it easy to do so as well.\n    Some people may want to share their importers yet test on real data too.\n    This should be well supported. (For 'beansoup'.)\n\n** Future Features\n\n  - When multiple files match (as is the case for the A:CA:R importer) make\n    file_one_file() put a copy of the file in each place instead of issuing an\n    \"Ambiguous accounts from many importers\" warning.\n\n  - Make beancount.ingest.importers.regexp.RegexpImporterMixin accept a\n    \"convert\" optional argument that would be called by its get_text() method,\n    and would allow us not to have to derive in order to support non-text files.\n\n  - Implement formatting that's \"minimum most-common\" and use it on the\n    importer's output, it would really improve the output of it, which is\n    currently literal, e.g., it just prints what's from the file, at that\n    precision. I hate correcting those manually.\n\n  - In identify, mark as ambiguous if two handlers match.\n\n  - Run directories check on each run of file? Disable with an option.\n\n  - Make sure that when an exptest fails it includes the filename of the test\n    somewhere in there; it's annoying when it's not present there.\n\n  - Printing transactions should use the maximum precision between display\n    context and natural. Create a new DisplayContext style, on top of \"COMMON\"\n    and \"MAXIMUM\", call it something else, perhaps \"COMPLETE\". Should be max of\n    context and natural.\n\n  - Implement on-disk caching for conversions. This is important--it's quite\n    frustrating to wait a few times too many. Do this now.\n\n  - The code that auto-files statements needs to detect and de-dup files which\n    have the same contents, because it is likely some files will be downloaded\n    twice, it happens a lot.\n\n  - When payee == narration, remove one of the two. This should be a generic and\n    simple enough check to apply. This is a common occurrence.\n\n  - There should be an automatic check that the accounts output by the\n    extraction are all valid Beancount/Ledger account names.\n\n  - Duplicate entries should cover all directive types (for balances).\n\n  - Also, similarly, if one is entirely contained in the other, as happens often\n    in OFX files, remove one. For example, here's what some OFX imports may\n    look like with the current OFX importer:\n\n       \"DDA WITHDRAW MG21       MTL QC A / DDA WITHDRAW MG21       MTL QC ABM OPS MTL ABM O    MONTREAL      C AN\"\n\n  - Validation of directories (aka bean-doctor directories) should be\n    automatically invoked by bean-file, and that would make sense.\n\n  - Implement some hook to provide your own auto-categorization.\n  - Provide some module that will attempt to categorize automatically, that can\n    be inserted into this auto-categorization hook.\n\n  - It would be super awesome if you could automate away the insertion of new\n    transactions in the input file, following the previous transactions...\n    we can find a heuristic to do this. That would be _really_ cool.\n\n  - We will want to somehow \"normalize\" and merge payee names, because some of\n    that differ very little are obvious for the same business... this would be\n    useful. What kinds of tools will we need for that?\n\n    Clean Import: The new importers should be able to strip the non-payee parts\n    of the payee name, e.g. NEW YO, SAN FR, etc. Maybe we could let the user\n    provide a filter function to sanitize the names of the payees, or maybe more\n    generally just a filter on the entries before printing them out. This way\n    you could provide your very own custom filter function that cleans up\n    anything you don't like.\n\n  - Importer should warn when not all the sections within have importers for it\n    (R. OFX has many sections and one of the sections I needed - credit line -\n    was missing in my importer config, so I discovered this). If we do this,\n    this means that we may want to provide a \"no-op\" importer in order to\n    silence that warning in case that's what's desired.\n\n  - Write a generic import routine that will try to heuristically match\n    partially completed transactions from an existing Ledger. Use some NLP or\n    somesuch matching algorithm.\n\n    Given some incomplete transactions, complete them heuristically based on\n    previous contents of the ledger. This should make import a lot easier. This\n    should be generic and work across all importers, a single function call.\n\n  - Provide the previous ledger as input to extract(), some people may want to\n    do per-account matching. See Filippo's request on this, whereby he wants to\n    use the previous ledger's list of accounts to configure his importers. I\n    suggested he load the previous file explicitly (taking advantage of the\n    cache) in his configuration for now, but this is something I may want to\n    revisit in the future.\n\n  - In ingest, use /usr/bin/strings as a last resort if all other PDF converters\n    fail.\n\n  - When we import, if a file was not detected, don't spit out an org text\n    line. Still doesn't work.\n\n  - Deal with the problem of matching Google Wallet amounts directly... attempt\n    to match a matching directive in the other account, and insert a link into\n    the imported one.\n\n  - Because one downloads all files manually, oftentimes the same file is\n    downloaded twice. This should be detected and the duplicated identical file\n    should be ignored entirely.\n\n  - Transactions within the set of newly imported ones should never duplicate\n    each other. Right now they do (see Transactions-Download-07-14-2016.csv).\n\n  - It would be useful in many circumstances to rename the files but not to move\n    them to their destination directory. For example, I'd rename the files and\n    look at the filenames when processing PDFs manually to figure out what\n    they're for.\n\n  - A very interesting idea is for the CSV importers to cache already imported\n    entries in a separate file, e.g., one signature for each row, and to use\n    that to avoid double-importing. OTOH, it creates a potential problem whereby\n    the result of an extraction is not stored in the Beancount input file and so\n    further extractions ignore unseen transactions. An idea that is better than\n    both of these would be to create a unique link made up of a short checksum\n    for the import row and to cross-check this special link when considering the\n    duplication, e.g. ^import-signature-c21c0fc8fe13 or something like that.\n    That would work.\n\n** GnuCash\n\n  - Write a converter of GnuCash XML files into Beancount.\n\n  - Contact xentac@ for an example GnuCash input file with 2-3 years of data.\n    Willing to share (see email).\n\n\n** Betterment\n\n  - Process xentac's Betterment example PDF for the booking branch, that would\n    be great input for a PDF converter, and figure out which lot identification\n    method Betterment uses for tax-loss harvesting and rebalancing.\n\n\n* Make Commodity Directives Required\n{commodity-required}\n\n  Zhuoyun Wei made a comment on a doc that account names are required to be\n  declared by default while commodities don't. However, at this point they both\n  have dedicated directives to declare them. Commodity directives are so far\n  only used to hang metadata off of them. He suggests that Commodity directives\n  should be required to be present by default. It would make the behavior\n  similar as that of accounts. It would be more pedantic by default. Instead of\n  a check_commodity plugin I could provide an auto_commodity plugin similar to\n  auto_accounts, so you could use that in order to not bother. The stream of\n  transactions would assured to always contain a Commodity directive if one\n  appears, like for accounts.\n\n  https://groups.google.com/d/msg/beancount/RHaV16bXlJs/Gyy5plujFgAJ\n\n  - Do this.\n\n  - OLD DESCRIPTION: options['commodities'] is currently where the list of all\n    commodities seen from the parser lives. The\n    beancount.core.getters.get_commodities_map() routine uses this to\n    automatically generate a full list of directives. An alternative would be to\n    implement a plugin that enforces the generation of these post-parsing so\n    that they are always guaranteed to live within the flow of entries. This\n    would allow us to keep all the data in that list of entries and to avoid\n    depending on the options to store that output.\n\n    This should probably be combined with a similar step that similarly\n    enforces all unopened accounts to have an Open directive as well.\n\n  - Make the onecommodity plugin skip accounts with multiple declared\n    commodities. It should apply only to accounts which have no declared\n    commodities. Then turn it on in my own file.\n\n\n* Booking\n\n  The 'booking' branch is one of the biggest branches ongoing in Beancount: it\n  implements the proposal at http://furius.ca/beancount/doc/proposal-booking. It\n  essentially consists in three big changes: (1) it allows a lot more\n  opportunities for interpolating missing input, and (2) it changes in how lots\n  are applied to inventories. Input specified in reducing lots will be\n  interpreted as a partial match specification against the inventory of the\n  corresponding accounts. This should allow users to provide the minimal amount\n  of information and produce a specific lot. Augmenting lots always inherit the\n  date of their transaction which will allow us to report on trades correctly,\n  including automatically determining short vs. long-term holding periods, and\n  finally (3) it introduces syntax to automatically merge lots together in order\n  to deal with average cost booking. These changes will also allow aumatically\n  resolution of ambiguous lots which will invoke a particular method chosen by\n  the user, e.g. FIFO booking.\n\n  In order to carry on during the tax season for TY2015, I implemented a kludge\n  in the \"carry_date_and_book_cost\" branch. This will get removed.\n\n  Tasks:\n\n  - In the average cost method, add an option to determine whether explicit lot\n    information should just be lost silently or if it should trigger an explicit\n    error.\n\n  - When lots are merged in AVERAGE booking, decide whether to keep the older or\n    youngest lot using an option (add an option for this).\n\n  - Make the \"reduction_method\" (rename from \"booking_method\") per-account and\n    support the old method in the new code, as \"FIFO\". It really just is FIFO\n    but now there will be lot splits instead of single lots being merged; this\n    should work. Or you could call it \"PRICEONLY\".\n\n    * Provide a global option \"reduction_method\" for its default value across\n      all accounts. Set the default to \"PRICEONLY\" so that no changes occur by\n      default.\n\n    * Dispatch the new 'full' booking method to reduction_method \"STRICT\".\n\n    * Support \"NONE\" and \"AVCO\" after that.\n\n    * \"AVDO\" should be able to work even without the star marker.\n\n  - Remove the horrible CARRY_DATE_AND_BOOK_COST kludge; do this by finishing\n    the 'booking' branch and making the lots conform exactly to those present in\n    the inventory balance, so that the inventory booking can proceed by\n    comparing the entire cost object precisely...\n\n  - Complete testing incomplete output with CostSpec:\n\n    - This causes a problem because a tag is parsed in '#9.95':\n      10 AAPL {45.23#9.95 USD}\n\n    - Make sure parsing {3.00 # USD} does not produce the same CostSpec as {3.00 USD}.\n\n    - Remove OLD comments from parser.py and update the description to use the\n      xposition class.\n\n  - Remove the beancount.ops.documents plugin, or perhaps make the loader\n    operate in a raw mode, e.g. not running any plugins.\n\n    egrep --include='*.py' -srn 'parse_(string|file)' /home/blais/p/beancount/src/python/beancount\n\n  - Write test for beancount.parser.booking_full.\n\n  - Merge beancount.core.interpolate into booking.\n  - Merge beancount.ops.validation.validate_inventory_booking() into booking.\n\n  - This causes a problem because a tag is parsed in '#9.95':\n    10 AAPL {45.23#9.95 USD}\n\n  - (Annoyance) Make interpolation.balance_incomplete_postings() return a new\n    object and not work destructively. No reason not to.\n\n  - (Annoyance) All functions that return an (entries, errors, options_map)\n    triple really should return (entries, options_map, errors), in this order.\n\n  - Improve the ability to detect a user-specific tolerance in\n    is_tolerance_user_specified(). This heuristic is not great, find some better\n    way.\n\n  - Create a b.c.data.transactions_only() function to this common type of\n    filtering and grep/replace everywhere. This is just too common not to create\n    a utility.\n\n  - Unref the constants in finalizer for module, here: {48414425cf78}.\n\n  - Write a test to ensure that an auto-posting with no effect results in no\n    new posting getting inserted.\n\n  - Implement an optional feature that disables the merging of inventory lots\n    for all lots except lots without cost. In other words, if there's a cost\n    object, don't even compare them or try to merge them together; only lots\n    without cost would automatically merge.\n\n    I believe that this probably wouldn't cause any problems in selecting\n    reducing lots and could simplify the \"rules\" for how inventory booking\n    works. I'd want to test it out on my real file before committing to the\n    idea. Removing merging of lots-at-cost would make the merging logic simpler\n    and easier to understand.\n\n    But what about something like this? Do we want multiple lots here?\n\n       2005-12-29 * \"Dividend on NB550\"\n         Assets:CA:RRSP:NB550            1.340 NB550 {18.2348 CAD}\n         Assets:CA:RRSP:NB550           28.646 NB550 {18.2348 CAD}\n         Income:CA:RRSP:Dividends\n\n  - Test a conversion of shares with lot-date, e.g.:\n\n      2000-01-18 * Buy CRA\n        Assets:CA:RBC-Investing:Taxable-CAD:CRA           4 \"CRA1\" {232.00 USD / 2000-01-18}\n        Assets:CA:RBC-Investing:Taxable-CAD               -1395.43 CAD @ 0.665027984206 USD  ; cost\n\n      2000-02-22 * CRA Stock Split 2:1\n        Assets:CA:RBC-Investing:Taxable-CAD:CRA          -4 \"CRA1\" {232.00 USD / 2000-01-18}\n        Assets:CA:RBC-Investing:Taxable-CAD:CRA           8 CRA {116.00 USD / 2000-01-18}\n\n  - Create a command in bean-doctor which lists all of the lots and their\n    changes for a particular account. This is meant to be a debugging tool for\n    booking algorithms. The rendering should be clear and detailed.\n\n  - TEST CASE: When a label is provided on a lot, make sure that the label is\n    unique throughout the entire file, not just on the inventory the lot is\n    being inserted into.\n\n  - Rename beancount.core.interpolate to beancount.core.tolerances\n\n  - An important question: on an empty inventory, does the following transaction\n    work?\n\n      2016-04-23 * \"Buy and sell on the same transaction\"\n        Assets:Investments:HOOL    1 HOOL {100.00 USD}\n        Assets:Investments:HOOL   -1 HOOL {}\n\n    One way to handle this would be to process all account augmentations before\n    reductions. But that's not really possible, because the augmentation may\n    require interpolation first. Hmmm. Difficult question. {f89b5b01e568}\n\n    [This is being handled in the \"booking\" branch.]\n\n  - Add an option \"merge_lots\" whose default value is TRUE, and which can be set\n    to FALSE in order to avoid merging augmenting lots in the Inventory. It this\n    is false, there's the possibillity of an inventory owning two lots which\n    cannot be differentiated, and the only way for the user out of that\n    situation would be to insert unique labels (indicate this somehow). Write\n    unit tests for this. And try running it over my personal file to see if\n    there's any instance of it ever happening (I don't think so).\n\n  - Consider building a fromstring() constructor for Cost and CostSpec. This may\n    make writing tests even easier and would complement what's there already.\n\n  - Deal with all the FIXME cases in the new booking code.\n\n  - Does the Inventory object require changes to make sure the dates are always\n    set? Would that not make sense?\n\n  - Write scripts to compare with the new and old method, on my own large file:\n\n    1. Compare balances at random points in time (many of them)\n    2. Compare transactions one-to-one.\n\n  - There's a fair bit of sign change in the new booking code. Do test the case\n    of negative inventories!\n\n** Auto-Link Booking Transactions\n\n  - Automatically create a link between transactions that book each other.\n    I'm not sure how I'm going to implement that - perhaps in the lot matching,\n    a hash to the original entry will be kept in the lot - but we should be\n    able to update the links to all the transactions that book together.\n\n    This will be a great debugging tool as well... a very powerful idea that\n    can be implemented entirely in a plug-in.\n\n** Original Idea for this Branch\n\n  - Lot improvement: the lot specification on a reducing posting is only present\n    to disambiguate which of the lots to reduce or match against. Maybe we\n    should provide a different syntax when an expected reduction takes place,\n    this would be allowed:\n\n       (augment)\n       2014-06-17 *\n          Assets:US:Investing:HOOL    10 HOOL {523.45 USD / i-want-more}\n\n       (reducing) All of the following should be allowed:\n          Assets:US:Investing:HOOL    -7 HOOL ; possibly ambiguous\n          Assets:US:Investing:HOOL    -7 HOOL [] ; possibly ambiguous\n          Assets:US:Investing:HOOL    -7 HOOL [523.45 USD]\n          Assets:US:Investing:HOOL    -7 HOOL [2014-06-17]\n          Assets:US:Investing:HOOL    -7 HOOL [i-want-more]\n\n    By enforcing a distinct syntax, the user is telling us that this leg is\n    expected to reduce an existing position. This information is useful, in\n    that it avoids possible mistakes. I like the explicitness of it.\n\n    Sufficient debugging output should be provided from the \"print\" command to\n    be able to identify which lot is being matched against and why. We need to\n    provide more transparency into this.\n\n  - FIFO or LIFO booking could be \"enforced\" simply by declaring the expected\n    booking method of an account, and then issuing an error when explicit\n    entries deviate from that method. This is an easy idea... would be very\n    useful. The automatic method would only be used to resolve ambiguity! This\n    is nice.\n\n** Old Notes\n\n  - Make a temporary hack to disable strict checks on a per-account basis. This\n    will keep us going against average cost until the full inventory proposal\n    is implemented.\n\n      \"The inventory booking proposal for average booking won't be implemented in\n      the next few weeks... I'm tempted to think that maybe I should provide a way\n      to disable the strict balance checks in the interim. This way we could enter\n      the transactions without matching lots strictly... at least all the data\n      would be present and the balance checks would work.  Would people think it's\n      a good idea?  I would do this by extending the default value for the type of\n      booking is intended to take place (as in the inventory proposal) and add a\n      new value for it, i.e,. in addition to STRICT, FIFO, LIFO, AVERAGE,\n      AVERAGE_ONLY, I would add NONE. I would use the proposed syntax extension for\n      the Open directive, e.g.\n\n      2014-08-84 open Assets:US:Vanguard:VIIPX    VIIPX    \"NONE\"\n\n      This also means that you could setup all your accounts to remove all inventory\n      booking, which results in a booking method similar to Ledger (no checks and no\n      errors), by setting the default value for it, like this:\n\n        option \"booking_method\" \"NONE\"\n\n      This could appeal to those who would like less checks, like Ledger, or who are\n      converting their Ledger ledgers to Beancount.\n\n      Down the road, the inventory booking would use that and implement all methods,\n      but for now, only the balance check would consult that value and disable the\n      check if the default booking method is \"NONE\". I think I could easily hack that\n      in a few hours.\"\n\n\n\n  - Implement the proposal\n\n\n  - (design) New inventory booking:\n    1. for each posting, classify by currency\n    2. for each posting at cost, classify whether position augmentation or reduction\n    3. For position reductions, match against inventory\n    4. Within currency groups, process interpolation, including those in\n       position augmentations\n\n    It should be possible to do something like this for cost basis adjustments:\n       Assets:Account         -10 MSFT {34 USD}\n       Assets:Account          10 MSFT {USD}\n       Income:PnL             400 USD\n\n    (See doc on Smarter Elision for a better version of this)\n\n\n\n  - Separate inventory booking to be implemented in a plugin. It should do\n    three things:\n\n    * Find matching lots and raise errors when not found\n\n    * replace all partially specified lots to their fully specified versions\n      (they matched lots). For augmenting lots, this means insert the date. For\n      lot reductions, it means, find the matching lot and use that instead of\n      the partially specified one.\n\n    * Insert links on matching lots, so that trades can be identified a\n      posteriori.\n\n    This means, move beancount.ops.validation.validate_inventory_booking() to\n    its own file and make it do the three steps above.\n\n\n\n  (avg cost idea)\n\n  - Docs for inventory booking: Add {* 634.23 USD} idea for average cost\n    booking: there should be an optional amount, and the star just means \"before\n    and after\". Add this to B docs.\n\n  - PROBLEM: You need be able to provide the cost with both and addition and a\n    reduction, e.g.\n       -2 HOOL {* 650 USD} ;; Should be possible even if current avg cost if 600 USD\n        2 HOOL {* 650 USD} ;; Means \"add at this cost and then convert to avg\n    cost\"\n\n    This is nice! The \"*\" now always means \"after applying this operation,\n    convert to avg cost.\".\n\n\n\n  - You should add tests to ensure that an Inventory() can never have positions\n    created with a cost of the same cost_currency as the currency. This should\n    be enforced in the Position object itself.\n\n  - After it's done, merge back branch 'sanscost', and we should be able to\n    make this work using the total cost value on the lots.\n\n\n\n  - Implement a report of Trades booked in the list of filtered transactions!\n    Trades should be automatically identified by the booking process, with\n    its own namespace of links. Then allow producing suitable reports for trades.\n\n  - (reports) Bring back the trades report into the mainline version, using\n    inventory reductions.\n\n  - (reports) We really do need to report on position reduction as TRADES. This\n    is an important report to generate! This should be done separately from the\n    improved inventory booking method.\n\n    This report needs to include the long-term vs. short-term nature of those\n    trades! The right way to do this is to run a separate plug-in that will\n    add appropriate #long-term and #short-term tags or meta-data to those\n    transactions, based on their booking dates..\n\n\n  - Add the acquisition date to each lot, so that short/long-term can be\n    calculated for the lot. The goal is to enable the automatic calculation and\n    reporting of long vs. short capital gains.\n\n\n** Notes Copied from Full Booking Code\n\n  - Testing:\n\n    * FIXME: Come up with cases where we're able to infer an AUGMENTING leg\n\n    * FIXME: Come up with a case that would be ambiguous if not for the fact\n      that one of the currencies already balances.\n\n\n    # You should be able to support inference of prices as per the sellgains plugin.\n    # Or should we instead have the sellgains plugin automatically insert the prices itself?\n    # (I like that better).\n\n    # FIXME: When the other amounts balance, this should be doable.\n    # In this example, the first three postings in CAD balance each other.\n    # the 4th posting is USD and not completely balanced, and the last is\n    # unknown. We should look at the two groups of CAD and USD postings,\n    # realize that the first group is already balanced and that the second\n    # isn't, and automatically select the USD group.\n    \"\"\"\n      2010-05-28 *\n        Assets:Account1     100.00 CAD\n        Assets:Account2     -80.00 CAD\n        Assets:Account3     -20.00 CAD\n        Assets:Account4      20.00 USD\n        Assets:Account4    -100.00 CAD @\n    \"\"\"\n\n\n    # FIXME: If there is only a single other group, we should be able infer the\n    # price is for CAD here. Currently this raises an error.\n    \"\"\"\n      2010-05-28 *\n        Assets:Account1     100.00 USD @ 1.2\n        Assets:Account2     120.00 CAD\n    \"\"\"\n\n\n  - TODO: Conversion from CostSpec to Cost\n\n  - Make interpolation work off of Cost instances, not just CostSpec.\n\n\n  - Notes:\n\n    varieties:\n\n      1. No cost, no price, with currency, e.g.\n           Assets:Something       213.45 USD\n         or\n           Assets:Something              USD\n         This is obvious, it buckets into the units currency, i.e., USD.\n\n      2. No cost, no price, no currency, e.g.\n           Assets:Something\n         This is an auto-posting. One of these should be replicated for every\n         currency present in the transaction.\n\n\n    Postings with a price define their currency:\n\n      3. No cost with price:\n           Assets:Something       1000 JPY @ 120.0000 USD\n         or\n           Assets:Something       1000 JPY @          USD\n         We use the price currency, e.g. USD\n\n      4. No cost and no price currency:\n           Assets:Something       1000 JPY @\n         In this case, we must consult the other postings. We look\n\n\n    Then, we have postings with costs, which also come in two varieties:\n\n      5. With an explicit cost currency, e.g.\n           Assets:Something       100 HOOL {12.23 USD}\n         Or with missing amounts, e.g.,\n           Assets:Something       100 HOOL {USD}\n         This clearly goes into the USD bucket.\n\n      6. With no explicit cost currency, e.g.,\n           Assets:Something       100 HOOL {2014-09-30}\n           Assets:Something       100 HOOL {\"1b24b1151261\"}\n           Assets:Something       100 HOOL {}\n         These are uncategorized.\n\n         In order to resolve these postings to a specific currency bucket, we\n         implement two heuristics:\n\n         a) If all the other legs are of a single currency and there are no\n            other uncategorized legs, this posting must also book against those;\n            use that currency.\n\n         b) Otherwise, look at the accumulated ante-inventory; if there is a\n            single currency for it, the posting must be in that currency.\n\n         Finally, if we aren't able to resolve the currency of that posting\n         using (a) or (b), fail interpolation/booking and skip the transaction.\n\n    With that algorithm, we should be able to automatically resolve stock splits\n    that look like this, as long as the ante-inventory contains only lots in\n    USD:\n\n      2015-09-30 * \"Split\"\n        Assets:Investments:AAPL       -40 AAPL {}\n        Assets:Investments:AAPL        80 AAPL {}\n\n    Finally, note that postings with both a cost and a price must have a\n    currency that matches, as constrained by the parser. If only the price or\n    the cost is specified, we used that currency. Both a price and a cost may\n    not be missing--that would leave two DOF to fill in.\n\n\n\n** More Old Notes\n\n  - IMPORTANT FEATURE: Implement Average Booking for 401k adjustments,\n    with associated tests and syntax in the parser.\n\n    Update for inventory.py:\n\n      def average(self):\n          \"\"\"Merge all lots of the same currency together at their average cost.\n\n          Returns:\n            A new instance of Inventory, with all the positions of each currency\n            merged together at cost, bringing all these positions at average cost.\n          \"\"\"\n          logging.warn('FIXME: continue here, this will be needed to report positions')\n          # FIXME: This is ill-defined, the grouping must also take into account the cost currency.\n\n          units_map = defaultdict(Decimal)\n          costs_map = defaultdict(Decimal)\n          for position in self.positions:\n              lot = position.lot\n\n              cost_currency = lot.cost.currency if lot.cost else None\n              key = (lot.currency, cost_currency)\n              units_map[key] += position.number\n              pcosts_map[key] += position.get_cost().number\n\n          inventory = Inventory()\n          for lotcost_currencies, units in units_map.items():\n              lot_currency, cost_currency = lotcost_currencies\n              cost_number = costs_map[lotcost_currencies]\n              inventory.add(Amount(units, lot_currency),\n                            Amount(cost_number, cost_currency),\n                            allow_negative=True)\n\n          return inventory\n\n\n  - Change booking to always have lot-date and list trades automatically.\n  - Report trades, all bookings should be findable after the fact using a link.\n    This can be added without doing full booking.\n\n** Link Trades\n\n  - Create a plugin that will link together all reducing transactions\n    automatically. When a transaction reduces a position, both transactions\n    should have a common unique link. This should likely be done by default, by\n    the new booking method, because it already requires for the matching to\n    happen in order to book lots properly. This is an important new typ9e of\n    report to support!\n\n\n* Short Sales\n\n  Test short sales in-depth. (They work now, but  I want more test cases.)\n\n  - Allow short sales eventually. This should already work if all that you do is\n    selectively suppress the validation check that verifies that a position at\n    cost may not go negative. We could selectively suppress it by adding a flag\n    to the open directive associated with an account, or maybe adding some\n    special syntax in the cost specification that allows us to do this.\n\n  - You can implement the sign check for positions held-at-cost only when there\n    are other of that same commodity held at cost in the inventory in the\n    opposite sign. This should allow holding short positions yet still retain\n    the benefit of the check for data entry errors. It also removes what for\n    most people will appear as a limitation from the docs (although with\n    experience you would realize that it is not much of a limitation at atll).\n\n  - Add tests for holding short positions.\n  - Add tests for holding long and short positions in different commodities.\n\n  - In order to relax the constraint that you may not add negative units at\n    cost, we could only disallow under certain circumstances:\n\n    * An account has received units in the opposite direction\n    * If the posting cross the zero boundary. Maybe starting from zero in\n      either direction could be fine.\n\n  - Idea: Relax checks for negative values: from docs\n\n      \"PLEASE NOTE! In a future version of Beancount, we will relax this constraint\n      somewhat. We will allow an account to hold a negative number of units of a\n      commodity if and only if there are no other units of that commodity held in the\n      account. Either that, or we will allow you to mark an account has having no\n      such constraints at all.\"\n\n* Cleanup, Deprecation, and Performance\n\n  These are a number of pending tasks to tidy up the codebase in various ways.\n  Some of these are more impactful than others.\n\n** Core Cleanup\n\n  - IMPORTANT: We need to test the return values of the Inventory.add_amount()\n    method! Review and do this now.\n\n  - Inventory: Implement a test for Inventory.get_amounts() with multiple lots of the same\n    currency; they really should have been aggregated.\n\n  - (Annoyance) All functions that return an (entries, errors, options_map)\n    triple really should return (entries, options_map, errors), in this order.\n\n  - Define a C extension module to implement D().\n    This function should catch useless errors from the cdecimal library:\n      Declined: [<class 'decimal.ConversionSyntax'>]\n    and always provide the input string so we can debug WTF happened.\n\n  - Reconcile all usage of account regexps to beancount.core.account.ACCOUNT_RE\n    throughout the code  (grep --include='*.py'  -srn A-Z    ~/p/beancount/src/python/beancount).\n\n  - An easy way to remove the diff_amount exceptional field from Balance is to\n    move it to metadata, and this would be consistent with the goal of plugins\n    using metadata for their own goals: assertions of Balance can be see as a\n    feature of the plugins.\n\n  - Rename test_util.TestCase.assertLines() to assertEqualNoWS().\n\n  - Review all the source code to use data.filter_txns() everywhere we can. The\n    data.filter_txns() function has been created but the code hasn't been\n    converted.\n\n  - Amount and Inventory and other basic classes: You could eventually support\n    an implementation of __format__ which attempts to make sense of the\n    different components, e.g., apply the format specifier to the number\n    excluding the space required to render the currency.\n\n  - (open directives) An invariant that we would love to have is to ensure that\n    after parsing, all accounts that are used in a list of entries should have a\n    corresponding Open directive for them. This would mean a variant of the\n    validation routine that automatically inserts missing directives. At the\n    moment, when an Open directive is missing, processing code that assumes they\n    are always present might fail. We cannot insert the missing directives in\n    the validation code simply because validation code is not allowed to modify\n    the list of entries. We could insert a \"fixup\" step after validation, that\n    does these kinds of automatic recoveries. Ponder this for a while.\n\n  - (open directives) Do we need to insert Open entries for the equity accounts\n    described in options? I think we could safely plop that at the very\n    beginning of the entries list in the parser.\n\n  - Document args of C functions in the same way as Python's, perhaps using the\n    new Python3 syntax definition thingamajig (I forget the name, there's a PEP).\n\n  - entries_table() really should be called postings_table().\n\n  - Review all the code that is an effective switch/case on directive types and\n    add checks for unknown directives. Make sure Commodity is being handled\n    correctly. Grep for isinstance. Add else clause everywhere none was, e.g.\n    https://bitbucket.org/blais/beancount/src/0e3be569f32a80411df8396d42d5e5ac3487a68f/src/python/beancount/core/realization.py?at=default#cl-292\n\n  - Make _all_ plugins accept a configuration parameter, unconditionally. The\n    interface should be this regular. Right now, some of the plugin functions\n    accept configuration, some don't. This is easy and will make things more\n    consistent.\n\n** Realization Cleanup\n\n  - You need to convert some of TestRealization to TestCheck.\n\n** Install Cleanup\n\n  - Don't install all the _test.py files, make sure they're not installed.\n\n** More Testing\n\n  - In the parser or in the validation, check that the price currency matches\n    that of the cost currency, if both are specified!\n\n       2011-01-25 * \"Transfer of Assets, 3467.90 USD\"\n           * Assets:Investments:RothIRA:Vanguard:VTIVX  250.752 VTIVX {18.35 USD} @ 13.83 CAD\n           * Assets:Investments:RothIRA:DodgeCox:DODGX  -30.892 DODGX {148.93 USD} @ 112.26 USD\n\n  - Continue adding more of the pylint tests and make them pass. The codebase is\n    almost at a point where it has all the tests from the default configuration.\n\n  - Add a lint check that ensures the non-test files are never importing any of\n    other test files.\n\n  - You need to unit-test for multiline notes... do they work as expected?\n\n  - Try to run the tests using 'watchr', 'sniffer', 'autonose' or other such tool.\n\n  - Create special make target to run tests on my own large Ledger.\n    This should bean-check, bean-roundtrip, bean-bake / scrape.\n\n  - Implement a \"fuzzing\" input generator, that will output a very large input\n    file with all possible kinds of combinations, to see where Beancount hits\n    its limits and perhaps bring up some bugs from input I haven't thought of.\n    This is easy and fruitful.\n\n** Total Price Syntax Work\n\n  - Document the @@ and {{}} syntaxes (see Matthew Harris email), especially as\n    they relate to price.\n\n  - You need to create a unit test for @@ price conversions.\n\n  - As an aside, I see that the grammar supports @@ and {{}} syntaxes, but they\n    don't appear to be documented in the language manual.\n\n      Oh I hadn't noticed... I will document those, thank you for reporting this\n      oversight.\n\n  - When using @@ the signs should match; warn if they don't.\n\n  - Make prices required to always be positive, including with @@, and err on\n    negative amounts for prices. This will match Ledger semantics and will\n    remove one degree of freedom that wasn't necessary.\n\n** Parser Cleanup & Improvements\n\n  - You need to validate the account name options (empty, or no :, use regex to\n    constrain).\n\n  - Make booking the cost on the same currency as the instrument impossible:\n\n       <account>      1212.023 USD {100.00 USD}\n\n    Ditto w/ the price. This should only be done after allowing zero cost.\n\n  - Add support for triple-quoted strings, which may alleviate problems we're\n    seen with syntax highlighting (idea from aumayr@).\n\n  - What happens if you specify the same plugin twice, with different\n    configuration strings?\n\n  - KeyboardInterrupts (if you press it) in the parser will cause errors:\n\n        $ bean-report $L exportpf > /tmp/export.ofx\n        blais.beancount:42041: KeyboardInterrupt:\n\n      This is exceedinly rare but maybe worthwhile to catch regardless.\n\n  - It would be very useful to have #ifdef syntax support. See if this could be\n    integrated with cpp by preprocessing the input. This would also take care of\n    #include, potentially, and I might be able to remove that feature from\n    Beancount itself. Just an idea.\n\n  - (parser) Is it possible to specify no flag on a transaction?, e.g. just the date?\n\n       2014-07-12\n         ..\n\n    Does this work? It would be nice if it did. Make it so. This is more\n    permissive and would ease the burden of conversion for users already\n    familiar with Ledger. We should change the grammar so that the flag is part\n    of the txn_fields. This is elegant: basically, instead of the flag taking\n    the place of the transaction, the 'txn' keyword just becomes optional.\n    That's it. DO THIS!\n\n  - Add an option to the parser to not just ignore unparsed lines, more strict.\n\n  - BUG: A transaction like this fails to parse; allow it:\n      2014-02-22 * \"Payee\" |\n        ..\n\n  - BUG: This input file without currencies does not currently fail! This is due\n    to the parser accepting incomplete input. It should fail!\n\n      2014-01-01 * \"Buy Hooli\"\n        Assets:US:Broker:HOOL      120.00  {1212.5100 USD}\n        Assets:US:Broker:Cash\n\n      2014-04-08 * \"HOOLI INC CL C SPINOFF   ON\"\n        Assets:US:Broker:HOOLA     -120.00  {1212.5100 USD}\n        Assets:US:Broker:HOOLA      120.00  {1212.5100 * 0.4992 USD}\n        Assets:US:Broker:HOOL       120.00  {1212.5100 * 0.5008 USD}\n\n  - When an error occurs while parsing a directive/transaction, add the ability\n    to let the parser skip until the next directive and ignore the parsed\n    transaction because of the error. Maybe this should be an exception\n    mechanism, or just storing a flag that gets reset when the directive is\n    completed. Not sure. This would be a more elegant way to deal with some\n    errors.\n\n** File Cleanup\n\n  - Remove plugins from ops, remove algorithms from core:\n\n      (Also remove \"documents\" option and move that as input to this plugin.)\n      b.ops.documents       -> b.plugins.documents  (not sure if breaks)\n\n      b.core.getters        -> b.ops.getters (does it add deps?)\n      b.core.realization    -> b.ops.realization (does it add deps?)\n\n** Prices Cleanup\n\n  - Make the code finding lists of commodities for holdings and price reports\n    use the same code as beancount.ops.find_prices. Also, this should  really\n    just be renamed beancount.prices.find_commodities and perhaps be moved up to\n    beancount.ops.\n\n      src/python/beancount/ops/holdings.py\n      src/python/beancount/reports/price_reports.py\n\n  - Remove the final traces of the \"quote\" metadata field from holdings:\n\n      /home/blais/p/beancount/src/python/beancount/ops/holdings.py:153:      Commodity directive from its 'quote' metadata field.\n      /home/blais/p/beancount/src/python/beancount/ops/holdings.py:190:            quote_currency = commodity_entry.meta.get('quote', None)\n\n    Nothing else uses this anymore, this needs to go too.\n\n  - Issue warnings when fetching prices with dates that are too far from the\n    requested dates. We need to find a way to issue a global tolerance for this,\n    that indicates to the user to fill in missing prices that are required to\n    carry out particular reporting tasks.\n\n  - Price entries should have extra metadata to disambiguate between implicitly\n    created prices, linking to the original transaction that created them, and\n    explicitly created ones.\n\n** Example Files Cleanup\n\n  - Convert example file to use beancount.plugins.ira_contribs plugin for mirror\n    accounting.\n\n** Revise Dependency Graph\n\n  As I'm moving to a system with more plugins and less code in the core, and\n  with the intermediate reports stage instead of just the web interface, it's\n  becoming clearer where some files need to move.\n\n  - Make various attempts to simplify depgraph, we want to ship with a really\n    lean dependency graph.\n\n  - ops & plugins should not depend on parser...\n\n      * Move beancount.parser.options to beancount.core.options\n      * Move beancount.parser.printer outside parser, ideally, or just factor the\n        dependencies separately.\n\n  - If you want to be consistent with the script names, rename\n    beancount.reports to beancount.report. This way, bean-* matches a single\n    package name. Just saying.\n\n  - Emerge a principle for where the following files should separate, or merge\n    the two modules:\n\n      beancount.ops.*\n      beancount.plugins.*\n\n  - beancount.core.realization: Look at deps for beancount.core.realization and\n    move it upstream where it makes sense, maybe ops.\n\n  - beancount.core.getters: Should this move to ops as well? Check the\n    dependency tree, see if it makes sense.\n\n\n** Improve Balance Checks\n\n  - An important option exists around the behavior of balance checks: Should\n    balance checks bring their balance to the balance amount? In other words,\n    should a balance check imply an automatic, on-demand Pad behavior on\n    failure? This has an impact on following balance checks further in time. The\n    current behavior is not to pad a failure, so if there are multiple balance\n    checks, a single mistake before them would generate a number of errors. An\n    equally valid behavior would be to trigger only a single error, isolating\n    the periods between balance checks. Both semantics have advantages. You\n    should provide an option to ustomize this behavior, the user should be able\n    to choose. option \"pad_failing_balances\".\n\n** Tagged Strings\n\n  - Make tags and payees output \"tagged strings\", with their own data types. You\n    can derive from str. These new objects should behave exactly like 'str' but\n    carry over their type. This would be in force for tags, account names, and\n    currencies.\n\n    You need to write some careful testing to figure out what happens on\n    concatenation, etc. with these types.\n\n  - If you do this, you can make the Custom directive not output pairs of\n    objects for its 'values' attribuet; instead, you'd use the data type of the\n    str object itself.\n\n** Improve Errors\n\n  - Enhance error reporting! Make all errors possibly hold on to a list of\n    entries, not just one. Many, many errors will benefit from this.\n\n  - The creation of exceptions should be made easier: each error class should\n    inherit from a base class that is able to accept an optional list of\n    entries, that would automatically render the fileloc of each of those\n    entries, and that would use the fileloc of the first entry in order to\n    render the location of the error. If no entries are specified, an OPTIONAL\n    fileloc= parameter should be provided to specify where the error occurs.\n    This will make creating errors a lot easier and nicer.\n\n    As part of this, we should also somehow produce a list of all possible\n    errors with a lavish description.\n\n  - Refine 'source' attribute on all directives: For .source, instead of '<...>'\n    for the filename, we should use a scheme:..., like file://..., and\n    plugin:beancount.... . This makes a lot more sense. The lineno still needs\n    to be separate, we need that for sorting and prefer not to have it part of\n    the string.\n\n** Errors as Directives\n\n  - (architecture) Seriously consider merging entries and errors; errors are\n    just a special type of entry, and they have dates, and they get rendered in\n    journals. This could make a lot of sense.\n\n  - Interesting idea: Maybe instead of returning errors, \"errors\" could simply\n    become \"Error\" directives and be inserted into the flow, and picked up by\n    the various rendering routines in different ways?!?  I love this. One less\n    thing to return. Hmmm ponder it seriously.\n\n** Caching Improvements\n\n  Caching is emerging as a key feature because adding more plugins increases\n  processing time. I'd like to eventually be able to cache as much processed\n  data as possible, per file.\n\n  There are therre types of relevant caching:\n\n  * Load cache: Caches the parsing and processing of a top-level Beancount file\n    to a pickle.\n\n  * Price cache: Caches previously fetched prices from external price sources.\n    This allows us to re-run price fetching cheaply.\n\n  * [Not Done] Document conversion cache: For importing new documents, some\n    conversions are very expensive, in particular conversions from PDF. When\n    there are problems, we end up having to re-run these slow conversions many\n    times. Even without problems, we run them at least twice: Once for\n    extraction and once for filing. We should build a conversion cache.\n\n  These need to have consistent sets of related options and file locations.\n\n  - Create a ~/.beancount-cache directory and store all the cache information in\n    there instead of in the different places they are now.\n\n  - I really need a --no-cache and --clear-cache options across all the\n    programs, consistently defined. When developing a plugin, it would be so\n    much more convenient.\n\n  - Add options to disable the cache in bean-check so that using -v would be\n    useful when you're trying to assess performance. I try this often enough I\n    want options for it.\n\n  - Use the same option on all tools for showing the timings, --verbose timings,\n    maybe add it from the loader module.\n\n  - (Performance) Great idea for performance: Implement the cache for each file\n    separately. I could split my big file and only the bits which get edited\n    would have to be recomputed.\n\n  - All usage of environment variables should be removed by replacing them by\n    the standard command-line options.\n\n** Performance\n\n  - (validation/performance) Optimize the performance of validations and bring\n    all the HARDCORE_VALIDATIONS in by default.\n\n  - Maybe the builder should have a 'filename' state that only gets changed here\n    and there instead of getting that fileloc argument passed in every time on\n    every rule. Maybe we just always get the fileloc from the parser.c as in\n    NUMBER. I think it might make the parser more efficient too... try it out,\n    do timings, see how much it improves parsing performance.\n\n  - See if you replace BUILD()'s PyObject_CallMethod to this how much faster it\n    gets: \"Note that if you only pass PyObject * args, PyObject_CallMethodObjArgs() is a\n    faster alternative.\"\n    https://docs.python.org/3/c-api/object.html\n\n  - (performance) Profile the web pages, if account_link() is high, provide an\n    explicit cache for each unique view. (We had to remove this when we\n    simplified the function using build_url for adding tests.)\n\n  - (performance) Implement the stable hashing function in C and reinstall the\n    validate_hash test.\n\n  - (performance) Implement inventories in C and reinstall the\n    validate_check_balances test.\n\n  - (performance) Don't pass in the FILE_LINE_ARGS on function calls, these\n    should be part of the context of the parser, should be gettable only on\n    demand.\n\n  - Can I use Py_RETURN_NONE in order to incref and assign, in the lexer,\n    instead of doing it in two steps?\n\n  - Optimize the main update() routine that is called in display_context.\n\n*** Parser Performance\n\n  - Implement \"D\" in C, it's worth it. This should make a substantial difference.\n\n  - Test using the empty case of list parsing to create the initial empty lists\n    instead of the conditional in Parser.handle_list() and measure, to see if\n    there is a significant difference in parsing performance.\n\n  - Parser performance: try not calling back to builder for simple types that\n    just return their value; measure the difference, it may be worth it, and we\n    wouldn't lose much of flexibility, especially for the lexer types, which are\n    aplenty.\n\n  - Write the builder object in C... it won't change very much anymore, and\n    that's probably simple enough.\n\n  - Check the performance of D(). I suspect improving this routine\n    could have a dramatic effect on performance.\n\n* Python Types & Namedtuple\n** Typed Data Types\n\n  - Install proto3 and try to represent all the data using it; measure the\n    difference in performance.\n\n** Hashing\n\n  - See if we can remove Position's __hash__ method now that it's a namedtuple.\n\n  - Also, look at all the objects in b.core.data, and see if you can override\n    the hash function on them automatically in order to ignore the entry in\n    postings, and the listness in entry.postings. It would be nice to be able\n    to hash every directive type.\n\n* Portfolio Management\n\n  I'm somewhat automating the process of managing my own portfolio using\n  Beancount. I export the contents of my assets to Google Finance using a\n  script, and I have a way to upload my current list of holdings to a Google\n  Spreadsheet, though I haven't completely switched over to that. My plan is to\n  ditch the GFinance export in favor of a custom spreadsheet, particularly\n  because the latter can be entirely automated. My scripts will just update the\n  list of assets in the spreadsheet and I should be able to derive various\n  measures from that.\n\n  - Complete the automation of uploading my portfolio to a spreadsheet and begin\n    using that (over the Google Finance solution).\n\n  - \"Computing portfolio returns using Beancount.\" Create a new document to\n    describe the process, to describe how to do that.\n\n  - Make sure that the list of holdings computed by bean-query is the same as\n    that generated by the holdings report... Would it be possible to compute the\n    latter using the former?\n\n  - You should be able to export to input files or APIs for websites that track\n    portfolios for you, such as Google Finance and Yahoo and others. Use the\n    list of holdings as input. This should perhaps just be another report name.\n\n  - Move the current portfolio code hacks out of my private repo and make that\n    into the main repo.\n\n  - Possibly create a 'beancount.portfolio' package  and move all the there,\n    validated and all, if there's enough meat for it.\n\n  - In holdings: create the concept of a \"composition\" which can be associated\n    to any holding, based on the (account, currency, cost-currency), and which\n    is a vector of proportions to be normalized and associated to the holding.\n    You should then be able to compute the sum total of all compositions. This\n    can be achieved with metadata, and it could be a generalized concept, with\n    the following applications:\n\n    * Liquidity (how easy is it to get money out of this account?)\n    * Taxability (pre-tax, roth, after-tax, usually 0 or 100%)\n    * Sector, industry exposures\n    * Currency exposure\n    * ...\n\n    Honestly, it would be even better if we don't have to even do that and if we\n    can do this by querying metadata and aggregating on the postings directly.\n\n  - Compute pre-tax and post-tax net worth reports, based on a \"tax\" account\n    metadata field and some reasonable assumptions.\n\n  - Fetch the CSV holdings of each Holding and compute the full list of stocks I\n    own from these ETFs in dollar value. Sort by larger to smaller. Also compute\n    the industry with that. You need to write Vanguard download (harder, need to\n    scrape), and iShares download (easier, CSV).\n\n  - Implement the dashboard on the example file, take the code out of my\n    private code stash and share.\n\n  - Replace the portfolio script by a bean-query command that will use metadata\n    on the commodities (!). This will simplify things a lot and be more\n    flexible. These are really just aggregations of a different kind.\n\n** Dashboard\n\n  Add the following to the portfolio dashboard:\n  - PnL since yesterday, one week ago, two weeks ago, one month ago, three months ago\n  - Current portfolio breakdowns\n  - Cash report\n  - A listing of short-term lots vs. long-term lots\n  - Schedule of lots to become long-term in the near future\n  - Returns (computed correctly, over many periods)\n\n  From email to fxt:\n\n    I want to build an investment dashboard, that would contain:\n\n    - List of holdings, with various rollups (see the different aggregations of\n      holdings reports)\n    - Rollups of holdings against various types (e.g., Stocks vs. Bonds)\n    - P/L since the morning or for the last day, over the last week, last two\n      weeks, last month, last quarter, last year.\n    - Report of uninvested cash and the detail of where it is\n    - A listing of short-term vs. long-term lots, and a schedule of which lots are\n      going to switch from short-term to long-term in the near future (to avoid\n      selecting those for sale)\n    - Returns, as computed by my prototype of our ideas during the bicycle trip\n    - Automatically refresh current prices if run intra-day\n\n    This script would run every hour on a crontab and generate static HTML files\n    that I could access from my phone to make investment decisions and monitor\n    gains/losses during the day. I'm certain you would appreciate having such a\n    thing too. I want to integrate the code I already have out of\n    beancount/experiments and start moving all this stuff to the\n    beancount.dashboard.* and add unit tests and make it work on the tutorial file.\n    This should make it easy for others to use.\n\n* Removal of Holding Object\n\n  At some point in Q4'2015 I overhauled the Posting object to rationalize its\n  attributes. The result is a much simpler object, and one which could readily\n  be used instead of the Holding objects I had defined in beancount.ops.holdings\n  and beancount.reports.holdings_reports. I'd like to remove the Holding class\n  to reduce complexity. This will make generating the reports for portfolios\n  more straightforward: the list of assets simply should be the list of Postings\n  accumulated at a particular point in time.\n\n  - Remove Holding object everywhere and replace it by Posting. Convert all\n    aggregation routines to work on Posting instances instead. {holding}\n\n  - Replace Holding by the new, flattened Position, it's a _lot_ more like it.\n    Makes a lot of sense now. Move the price_date to .meta, I don't think it's\n    actually used.\n\n  - In doing so, it might be useful to enrich the Price field of a Posting\n    object with a date (number, currency, date). This would allow the creation\n    of holdings at different dates. I'm not entirely certain we need it.\n\n  - When attempting a conversion in holdings, if the rate isn't available\n    directly, you should always attempt to value it indirectly via an\n    indirection through one of the operating currencies.\n\n  - Add the acquisition date of each lot to each Holding, and it should be\n    output at that date by print_holdings as well.\n\n** Old Notes\n\n  - I think there's a way to simplify holdings: you can probably remove the\n    \"Holding\" type and replace that with a Posting, which really, is much like a\n    Holding, it has an account and a position, and a price.... That would\n    normalize Holding quite a bit, even if it means we end up adding a few\n    unused slots to Posting. I'm happy to do that! Simplify simplify simplify...\n    always.\n\n  - Along with the new inventory, you can make Holding -> Position. This makes\n    a lot of sense actually. Do do this!\n\n  (work on holdings)\n  - Support output format \"beancount\" for holdings, use a single file instead of\n    a holdings I/O file (merge holdings.csv + prices.beancount -> holdings.beancount)\n    This would be much nicer.\n\n  - Check holdings I/O by saving and reloading a list of holdings created from\n    a set of entries (with sales, just to make sure).\n\n  - In add_unrealized_gains(), convert to use our holdings aggregator.\n\n  - Build a new category to portfolio to identify accountings holding\n    \"Uninvested Cash\", which should be cash available to invest now.\n\n\n\n* Computing Asset Returns\n\n  Another important task I've been trying to do is to process my investment\n  history in order to compute the actual, precise returns, including all fees\n  and taking into actual my particular cash transfers. Most brokers will provide\n  either the generic returns of a particular instrument regardless of your\n  exposure over time, or the difference between the current time and some past\n  time for your entire portfolio. Neither of these is sufficient to evaluate\n  your portfolio returns. I want to compute the returns of each instrument\n  separately, entirely from the Beancount input file, and then combining those\n  returns histories to compute portfolio returns.\n\n  In order to do this right, the structure of each investment has to follow some\n  sort of pattern so that for each instrument we can identify external flows of\n  money, internal flows, and \"value accounts\" which contain the commodities\n  whose price fluctuates. I had a pretty good shot at this in the 'returns'\n  branch, which has been merged, and have found some shortcomings, so I wrote\n  the 'returns2' branch, but it is yet incomplete and I have to restart working\n  on this at some point.\n\n  - I need to add detailed debugging information in order to troubleshoot the\n    cases where it does not work well. There are several corner cases and I've\n    been having a difficult time identifying exactly why it fails for some\n    commodities. Time to write some nice debugging output, this will be useful\n    later, and for others, and for others to share when asking questions if they\n    face similar difficulties.\n\n  - In order to compute this properly, I will need to pull prices at various\n    points in time. I want to automate the process of figuring out the dates at\n    which prices are needed, i.e., when the prices in Beancount at too far from\n    the evaluation dates, and perhaps automate the fetching of all necessary prices.\n\n  - Bring in all the generic functions from experiments/returns/returns.py into\n    core beancount. Bring in returns as a plugin.\n\n  - Prices: Write a script to output the timeline of prices/rates missing &\n    required in order to compute all the returns correctly. Then use it to drive\n    fetching a historical table of monthly or perhaps weekly exchange rates for\n    USD/CAD, USD/AUD, EUR/USD since the beginning of my file. Make this script\n    reusable.\n\n  - Fetch missing prices for my input file and recompute returns.\n\n  - Returns calculation should spit out missing prices.\n    Automate returns calculation.\n\n  - Fix FIXME in beancount.projects.returns, from DClemente issues.\n\n* Net Worth\n\n  A complement to the portfolio management features is the ability to report on\n  the total \"net worth\" on the balance sheet, over time, and as pre- and post-\n  tax amounts.\n\n  - Make the net-worth-over-time script output post-tax networth as well, using\n    metadata. In other words, the post-tax amount should represent the\n    liquidation value of the portfolio if all tax liabilities had to be incurred\n    (e.g., taking all the money out of tax-deferred retirement accounts). This\n    should use a percentage meta-data field in order to figure out the\n    approximate taxation rate, e.g.,\n\n       2014-01-29 open Assets:US:Vanguard:PreTax401k\n         tax: \"pre\"\n\n    Allowable values should be:\n\n      \"pre\"   : For regular tax-deferred accounts, where the entire amount is\n                taxed on distribution.\n      \"after\" : For after-tax 401k accounts where only the gains are taxed on\n                distribution.\n      \"roth\"  : For Roth accounts (not taxable on distribution).\n      None    : For taxable accounts.\n\n  - Make the net-worth script into an official project, don't just leave it\n    under experiments. Do this only _after_ the removal of the Holding object,\n    to minimize changes.\n\n* Standalone Tools\n\n  In order to produce many of the reports, I've had many ideas of composable\n  command-line tools to build and provide for processing text with account\n  names. These are small standalone projects.\n\n  - Build a function and command-line tool that can injest either a table of\n    results or a CSV file and infer that an entire column is of numbers and\n    pairs of numbers and can accordingly split the column into multiple columns\n    and put the currency in the header so you can import that up to a\n    spreadsheet.\n\n  - Build an 'statement' tool that will render a treeified balance sheet in two\n    columns! Limit it to use the beginning of a line, and hard-code to use the\n    five known categories (optionally changeable). It's okay if the tool is a\n    bit more limited than treeify. It should optionally do the treeification.\n    It should also optionally sort the account names (or not).\n\n    * Add a --title option to render at the top.\n\n    (A two-column tool to convert one column into two columns (for text mode\n    balance sheet and income statement). The equivalent UNIX tool does not\n    exist. Select columns by regexp on prefix.\n\n  - Build a simple 'colrneg' tool that just highlights numbers as green or red\n    depending on if positive or negative.\n\n  - Perhaps should build a version of treeify for internal usage that works on\n    HTML columns, off of HTML text. Or BETTER: just a stateful tool that can\n    transform an account's name to indent it properly every time you feed it the\n    full account name! This could be used by the routine that want to render\n    columns as tree. Maybe 'treeify' should use that as well. That would make a\n    lot of sense.\n\n\n* Streamline Commands\n\n  As features grow, so do commands. I'd like to minimize the number of them,\n  where it makes sense. I find it's often possible to do that.\n\n  - I plan to remove bean-example and fold that into a bean-doctor subcommand.\n\n  - Maybe bean-bake could be folded into bean-web.\n\n  - bean-sql is a bit of an experiment, I'm not sure we need it, but I want to\n    keep the functionality. Maybe this should only be a subcommand of the code\n    that provides Beancount postings as a a virtual SQLite3 table.\n\n\n\n* Debits & Credits Normalization\n\n  One simple idea that might make at least some people happy is to make it\n  possible to input the great majority of numbers as positive numbers. This\n  can easily be done by considering the account type to which a number is\n  attached and invert the number, if necessary. For example, if this input mode\n  is enabled, you would input a posting to Income as a positive number, but it\n  would be interpreted as a negative number.\n\n  - Allow sign normalization:\n\n    * Add an option to the parser to allow signs to be entered with the \"all\n      positive\" convention, and actually invert the signs right at the output\n      of the parser.  Balance errors should be enhanced to emphasize which of\n      the postings should be increased or decreased, based on the sign of the\n      balance error and the type of each account.\n\n    * For display, in the shell, provide a SIGN(account) function that allows\n      the user to multiply the inventory by, or a NORM(inventory, account)\n      function that would do that itself on the inventory.\n\n    This whole thing should be a minor version. This would be a valuable feature\n    IMO, allowing users to choose their favorite convention would be a plus.\n\n  - Do support rendering options to invert the amounts of the minus accounts.\n    This is an important feature.\n\n  - The new balance sheets should be able to invert the numbers (and then they\n    should get rendered differently). Basically, every number shown should be\n    either in signed or cr/dr format. We should be able to switch between the\n    two at render time. This should work across all number-rendering routines\n    everywhere--do this centrally.\n\n  - In the balance sheet and income statement, we need to render the amounts\n    inverted (and in a slightly different style).\n\n\n* Sanity Check For Conversions\n\n  - Insert a validation check when transferring amounts to the balance sheet\n    that the implied rate of the conversion entries is within certain bounds of\n    the price, for each pair of commodities (find a way). These bounds should be\n    proportional to the variance of the price. This would just provide an extra\n    amount of good fuzzy feeling, knowing for sure that my solution to the\n    conversions problem is always meaningful and correct.\n\n* Add an \"End Balance\" Directive\n\n  Some people are requesting and end balance directive.\n\n  - Create one by fudging the date and storing a regular Balance directive. This\n    is an easy task.\n    https://bitbucket.org/blais/beancount/issues/118/create-a-balance_end-directive\n\n\n* Improve the Include Directive\n\n  - Support an include directive that is a URL, in order to fetch lists of\n    prices updated remotely, or via crontab. This way the dashboard does not\n    have to include code that fetches prices.\n\n  - Idea: an include directive should have a \"prefix\" option, to add a prefix to\n    all accounts from the included file.\n\n\n* Improvements to Price Fetching\n\n  - Infer the rendering precision for inverted currencies from only the list of\n    previous prices. Run a DisplayContext on those and do similar\n    quantization/rounding automatically. This would make a lot of sense,\n    especially when inversion generates a very large number of digits.\n\n  - Write a script that will iterate and fetch all the missing dates on Friday,\n    or last DOM for the required portfolio during the entire duration, or allow\n    providing a frequency string (does rrule have one?) and let bean-price do\n    this natively. This will work the API.\n\n  - You have to deal with the case whereby two currencies provide incompatible\n    conversions of each other. This would potentially result in colliding\n    entries in the price database. Not sure how to deal with those yet.\n\n  - Write a script that will automatically fetch the dates I held various\n    positions at cost for throughout the history and a list of weekly dates to\n    fetch rates for.\n\n** OANDA\n\n  - Finish the implementation of my delayed rate fetcher from OANDA.\n\n\n* Will & Legacy\n\n  One of the tasks I'd like to Beancount to be able to do is to produce\n  documents which list the account details of assets and liabilities, including\n  account number, institutino address, phone numbers, contact persons, etc. in\n  order to encrypt and share with a trusted one, in case I pass away.\n\n  - Create a new type of report that produces a readable document with the\n    entire list of accounts and descriptions and account numbers pulled from\n    metadata. This document should be attacheable to a will, to describe all the\n    accounts, institutions' phone numbers, account numbers, in a way that makes\n    it possible for someone executing a will to easily understand that full\n    nature of the assets and how to reach the relevant institutions to liquidate\n    the assets.\n\n  - In order to have someone else be able to take care of your business, you\n    should be able to produce a list of the accounts open at the end of the\n    period, with the account ids and balances. This should be printable and\n    storable, for someone else to take care of your things in case you die.\n\n* Gains Sans Commissions\n\n  How do I take into account the commissions and fees adjustment on the cost\n  basis for a position? You need to be able to accommodate commissions as not\n  being part of the gain.\n\n  BRANCH: 'sanscost'\n\n  - This work depends on the completion of the 'booking' branch.\n\n  - Capital gains should not count commissions nor on the buy nor on the\n    sell side. How do we book them like this?  Can we count this somehow\n    automatically? Misc accounts? Not sure.\n\n* Normalized Credit & Debits\n\n  One idea is to allow the user to work in terms of credits and debits, using\n  all (largely) positive signs for all postings.\n\n  - Make this possible in the input, switch the signs in the parser.\n\n  - Also render the numbers with normalized, positive signs only.\n\n  - Make it possible to render the credits and debit numbers separately, putting\n    them in the correct column based on their account type AND sign.\n\n  - Rendering only: Color the background of numbers with an inverted sign (e.g.\n    payments in a liability account) differently! There should be modes to\n    rendering balance sheets and income statements with inverted amounts, and it\n    should all be done client-side. When amounts are rendered as credits/debits,\n    color their background distinctly, so that it's obvious what kind of sign\n    convention is in use.\n\n* Total Balance\n\n  Currently, the Balance directive only asserts the currency of its attached\n  amount. Some users have requested a balance check that is exhaustive, that is,\n  which asserts that the inventory matches the contents of a directive.\n\n  - Implement some parser-level, generic directive for specifying the contents\n    of an inventory (units only).\n\n  - Implement a total balance assertion using the following syntax:\n\n      YYYY-MM-DD balance\n         account    amount\n         account    amount\n         account    amount\n         account    amount\n\n    The distinction is that it's on multiple lines. Maybe call it balance*.\n\n  - A variant on this would be a balance directive which asserts the cost basis\n    of an account, either by currency, or total. Perhaps this could be useful,\n    and if anything, easy to implement. See past discussion with Eric Weigle on\n    the ledger-cli mailing-list.\n\n  - When you will add cost basis to the balance assertions, make the padding\n    directive also able to fill in with some cost basis. This would be useful\n    for mharris (see discussion on Language Syntax document).\n\n  - Create a new directive for balance that checks for the complete balance.\n    Ideas for syntax:\n\n      2014-06-20 balance      Assets:Some:Account    10 HOOL, 640.40 USD   FULL\n      2014-06-20 balance      Assets:Some:Account    [10 HOOL, 640.40 USD]\n      2014-06-20 balance      Assets:Some:Account    <10 HOOL, 640.40 USD>\n      2014-06-20 balance*     Assets:Some:Account    10 HOOL, 640.40 USD\n      2014-06-20 full_balance Assets:Some:Account    10 HOOL, 640.40 USD\n\n    Maybe we should define a general syntax for input'ing an Inventory object,\n    that could be read at parsing time.\n\n* Wash Sales\n\n  Right now [2016-04-20], there is an experimental plugin that's there to\n  remove the commissions from the P/L (experiemnts/washsales/commissions.py).\n  This is then used by two custom scripts\n  (experiemnts/washsales/list-wash-sales.py) which uses metadata from the\n  postings marked to be washed by the user, and all the \"washing\" takes place\n  somewhere in that script, not in Beancount. There is also another script\n  (experiemnts/washsales/list-lots.py) which is used to list the resulting\n  lots.\n\n  - Document all cases of wash sales and support arbitrary washing of sales in\n    an official Beancount plugin.\n\n  - You need to make the washing of the lots a part of regular Beancount, the\n    washing of the lots needs to occur within Beancount, not in\n    the list-wash-sales.\n\n    For example, this transaction:\n\n      2015-05-19 * \"Sold some\" ^c2fbec103d99\n        ref: 036\n        Assets:US:Broker:HOOL                       -X HOOL {538.6500 USD} @ 552.4460 USD\n        Assets:US:Broker:HOOL                       -X HOOL {577.5400 USD} @ 552.4460 USD\n          wash: TRUE\n        Expenses:Financial:Commissions           0.19 USD\n        Assets:US:Broker:Cash                   XXXX.XX USD\n        Income:US:Broker:HOOL:PnL\n\n    Should be converted to this one automatically:\n\n      2015-05-19 * \"Sold some\" ^c2fbec103d99\n        ref: 036\n        Assets:US:Broker:HOOL                       -X HOOL {538.6500 USD} @ 552.4460 USD\n        Assets:US:Broker:HOOL                       -X HOOL {577.5400 USD} @ 552.4460 USD\n          wash: TRUE\n        Expenses:Financial:Commissions           0.19 USD\n        Assets:US:Broker:Cash                   XXXX.XX USD\n        Income:US:Broker:HOOL:PnL\n        Income:US:Broker:HOOL:PnL              YYY.YY USD\n        Income:US:Broker:HOOL:Adjustments     -YYY.YY USD\n\n    The list-wash-sales script ought to be a simple gathering of the already\n    washed sales.\n\n  - Listing the lots in a particular account at a particular date should be\n    carried out not with a custom experiments/washsales/list-lots.py script, but\n    rather by writing a simple SQL query. This requires the 'booking' branch to\n    be completed, and the CSV output from bean-query to work as well. Do this.\n\n  - Enumerate the various cases for wash sales, write a nice document for them,\n    and write example cases for each, to be referenced from the document. Solve\n    this completely, using metadata and a plugin.\n\n\n  I wrote a script to wash losses for entire lots. This still needs more work:\n  ideally, one should be able to insert an arbitrary cost basis adjustment for\n  each lot. Do this, and integrate with the wash-sales-tracker implemented by\n  bbreslauer.\n\n  - It should be possible to produce input for the wash sales calculation, to\n    then insert metadata or some other set of postings on each lot, and to\n    produce output suitable to be printed and sent to the IRS.\n\n  - There is already a plugin which allows the user to wash away the P/L of\n    entire lots under experiments/washsales. Enhance that to support arbitrary\n    adjustments and move that into 'beancount.plugins'.\n\n* Stock Splits\n\n  Beancount currently does not deal with stock splits, but you can deal with it\n  yourself. Essentially, you have to write a single transaction which empties\n  out your positions and recreates them at their new cost basis. You process\n  could be automated, probably the best way to carry this out would be to write\n  a plugin that provides a new custom directive.\n\n  - Find a way to automatically create multiple currencies to account for stock\n    splits. The user should not have to do this themselves:\n\n      \"One choice you have is whether you want to keep the same symbol pre and post\n      split. If you keep the same symbol the price database will show a drop in\n      price over time. If not, choose a new symbol for the post split period. So far\n      in my own file I use the same symbol but I think eventually I'd like to find a\n      way to differentiate them automatically and have a multiplier in the price\n      database, because doing it manually is not nice. In any case both methods\n      work.\"\n\n    Perhaps a directive could be created to declare them that would\n    automatically insert converting transactions, but that makes it difficult to\n    deal with weird cases, like oddly unequal splits (e.g. Google A/C), or cases\n    with spinoffs, as below. Perhaps the splitting transaction should be\n    inserted automatically, but that the split directive would just create a new\n    currency name, internally.\n\n    A currency would then be referred to by a pair of (name, date), and that\n    would resolve to a internal currency name.\n\n  - (IDEA) In order to create suitable stock split entries that would look like\n    this:\n\n      2013-04-01 * \"split 4:1\"\n        Assets:CA:ITrade:AAPL             -40 AAPL {{5483.09 USD}}\n        Assets:CA:ITrade:AAPL             160 AAPL {{5483.09 USD}}\n\n    You could easily add support for a directive that looks like this:\n\n      2013-04-01 split Assets:CA:ITrade:AAPL  4:1  AAPL\n\n    This would allow the user to do some processing specific to stock splits by\n    processing the explicit stock split entries.\n\n  - Include this in the user examples, + stock splits:\n\n       2013-04-01 * \"name change\"\n\n         Assets:CA:ITrade:AAPL             -40 AAPL {{5483.09 USD}}\n         Assets:CA:ITrade:NEWAAPL             40 NEWAAPL {{5483.09 USD}}\n\n       2013-04-01 * \"spinoff\"\n         Assets:CA:ITrade:KRFT             -100 KRFT {{20000 USD}}\n         Assets:CA:ITrade:KRFT              100 KRFT {{17000 USD}}\n         Assets:CA:ITrade:FOO                20 FOO  {{ 3000 USD}}\n\n  - Because of the way we currently deal with stock splits, allow a list of\n    commodity names on the commodity directive, so you can do this:\n\n      1998-01-01 commodity CRA,CRA1\n        name: \"Celera Corporation\"\n        asset-class: \"Stock\"\n        ticker: \"CRA\"\n        quote: USD\n\n* Sharing Expenses\n** Producing Journals as Tables\n\n  - Figure out some way to report the names of the other accounts of a\n    particular account. For example, render a journal as a detailed expense\n    report, for a set of accounts (e.g., Expenses:*) pulling out amounts in\n    various columns based on other expressions (e.g. Assets:Cash:Caroline).\n\n    This would be an approximation:\n\n      bean-query $L \"\n        SELECT date, account, maxwidth(description, 25), convert(position, 'USD')\n        FROM has_account('Caroline')\n        WHERE (NOT account ~ 'Caroline')\n          AND (NOT account ~ 'Rounding')\n          AND account ~ 'Expenses:';\"\n\n      However it doesn't work so well. The description isn't good enough.\n      A better approach would be to just provide a special which lists all the\n      other accounts in a single string.\n\n* Book Unrealized Gains Correctly\n\n  - IMPORTANT: Unrealized gains for opened periods should show only gains since\n    the openings. In other words, unrealized gains should be realized\n    marked-to-market at the time of open.\n\n  - Unrealized gain when rendering for closed years does not appear.\n    Perhaps we should insert the unrealized gains during close operation.\n\n    Idea: close realized gains along with close(), so that they don't show up for\n    the latest year.\n\n  - Unrealized gains should be modified so that they replace the book value of\n    the positions that they adjust, and can be applied at multiple dates. Then,\n    the realization should automatically occur both at the beginning and end of\n    reporting periods.\n\n** Old Notes\n\n  - Unrealized gains should not be added if the gain is zero.\n\n  - There's a fundamental question about which date to be used for pricing\n    entries. This really would depend on the view. If this is a period view, the\n    date of the last entry is most appropriate. If it is any other kind of view,\n    the latest price is best. All the reports should be adjusted for this.\n\n** Old Notes\n\n  - Unrealized capital gains could be inserted automatically into special\n    sub-accounts, based on the current price and the cost-basis of particular\n    accounts. This could be inserted automatically! e.g.\n\n        DATE check Assets:US:Ameritrade:AAPL       10 AAPL {200 USD}\n\n        DATE price AAPL  210 USD\n\n      Assets:US:Ameritrade:AAPL                    2000 USD\n      Assets:US:Ameritrade:AAPL:Gains               100 USD\n\n    The \"Gains\" subaccount could be inserted automatically if the price differs\n    from the cost basis... this would be a clever way to represent this! We\n    could even do this by inserting a transaction automatically with an\n    offsetting account... actually this would be the RIGHT way to do this!\n\n      We need an option to designate which subaccount leaf to create all\n      the new transactions for:\n\n        %option account_unrealized  \"Unrealized\"\n\n        2013-05-23 'A \"Booking unrealized gains for AAPL\"\n          Assets:US:Ameritrade:AAPL:Unrealized              230.45 USD\n          Income:Unrealized                                -230.45 USD\n\n      By doing this, the reporting does not have anything to do... it can choose\n      to report positions at cost or in held units, and whether the gains are\n      included or not entirely depends on whether these transactions have been\n      inserted in or not.\n\n\n* Pivot Reports\n\n  An interesting reporting idea which comes back again and again is the ability\n  to produce a year-on-year or month-by-month summary of income and expenses, as\n  a table. This is essentially a pivot table where the date (year or month) is\n  rendered as the X axis, and accounts used on the X axis. Account balances are\n  aggregated in the cells.\n\n  - Implement PIVOT reports directly from the shell. These are oft-requested.\n\n  - Including RSP contribs, like my big spreadsheet that I crafted manually? Can\n    I do that? That would be awesome!\n\n  - 'csv-pivot': build this: a script that can accept a CSV file and render a\n    CSV pivot table from it. The reason we need support is in order to carry out\n    operations on columns of inventories. Maybe we should impleemnted some sort\n    of swiss-knife tool that is able to parse inventories from columns and\n    perform various operations on them, aggregations, etc. using Beancount's\n    Inventory() class. This could be a powerful tool! Make it possible to parse\n    and create Inventory objects from cells.\n\n  - One kind of report that would be GREAT is a single grid with all income accounts\n    on the left with year by year on the horizontal. An overview of all the\n    years. Same with month-by-month report.\n\n** Use Metadata for Pivoting\n\n  - One idea Ledger uses well is the ability to associate key-values meta-data\n    to transaction objects, a-la-Common Lisp. See the --pivot feature. It seems\n    a bit superfluous at the moment, but may be useful in order to provide the\n    ability to implement custom aggregations eventually, instead of using the\n    strings. Maybe the payee could be a special case of this, e.g payee=\"value\"\n\n    (From mailing-list):\n\n      Take this example:\n\n      2011-01-01 * Opening balance\n          Assets:Cash                               25.00 GBP\n          Equity:Opening balance                   -25.00 GBP\n\n      2011-02-01 * Sell to customer AAA\n          ; Customer: AAA\n          ; Invoice: 101\n          Assets:Receivables                        10.00 GBP\n          Income:Sale                              -10.00 GBP\n\n      2011-02-02 * Sell to customer BBB\n          ; Customer: BBB\n          ; Invoice: 102\n          Assets:Receivables                        11.00 GBP\n          Income:Sale                              -11.00 GBP\n\n      2011-02-03 * Sell to customer AAA\n          ; Customer: AAA\n          ; Invoice: 103\n          Assets:Receivables                        12.00 GBP\n          Income:Sale                              -12.00 GBP\n\n      2011-02-03 * Money received from customer AAA for invoice 101\n          ; Customer: AAA\n          ; Invoice: 101\n          Assets:Cash                               10.00 GBP\n          Assets:Receivables                       -10.00 GBP\n\n      Now you can see how much each customer owes you:\n\n      ledger -f d bal assets:receivables --pivot Customer\n                 23.00 GBP  Customer\n                 12.00 GBP    AAA:Assets:Receivables\n                 11.00 GBP    BBB:Assets:Receivables\n      --------------------\n                 23.00 GBP\n\n      And you can see which invoices haven't been paid yet:\n\n      ledger -f d bal assets:receivables --pivot Invoice\n                 23.00 GBP  Invoice\n                 11.00 GBP    102:Assets:Receivables\n                 12.00 GBP    103:Assets:Receivables\n      --------------------\n                 23.00 GBP\n\n* Reporting to Single Currency\n\n  Another oft-requested feature is the ability to boil down all assets to a\n  single target currency, converting to cost, and then to the final currency.\n  The point is to show a single column of value which can be operated on.\n\n\n* Plugins\n\n  I've had various ideas for writing new plugins, some make sense, some don't,\n  but in any case, these accumulate here.\n\n  - Would it make sense for every plugin to provide a validation function? We\n    could then move all the validation routines in their plugin file. I very\n    much like this idea: it creates more isolation for routines and less\n    dependencies. Open/Close, Balance checks, do seem to be able to fit in this\n    category. Those functions should return only a single list of errors, no\n    entries, and the calling function should perform a simple hash check to\n    ensure that the mutable portion of the entries hasn't been modified by the\n    user-provided validation functions.\n    'beancount.ops.documents' could benefit from this split.\n\n** Plugin: sellgains\n\n  - This would probably benefit in being renamed to 'check_gains', a better\n    name.\n\n** Plugin: flagged_subset\n\n  - Idea: Write two plugins...\n\n    * One that check that all the postings with a particular flag on them\n      balance to zero.\n\n    * One that forks out all postings with a particular flag to a separate\n      transaction.\n\n    This is from an email thread with redstreet0 in Jan 2015:\n\n    I said: \"\n\n       - Define yourself a special account under a common base, e.g. Equity:Extra:*\n         for all those special accounts.\n       - Write a plugin that will ensure that for all transactions that include at\n         least one posting on an Equity:Extra account, the sum of all the weights of\n         these postings is zero.\n       - If you want to automatically fill in missing postings these accounts, you can\n         also do that from a plugin.\n       - Your plugin should be configurable with the root account you want to make\n         special in that way, in this case \"Equity:Extra\". See other plugins for how\n         to pass in a configuration.\n       - You can optionally filter out all those Equity:Extra:* postings in the\n         reports using the FROM syntax. Otherwise the detail of the Equity:Extra\n         accounts in the balance sheet will be pretty harmless anyhow, but you could\n         remove it.\n\n       Note that instead of identifying these special postings using a known root\n       account, you could instead trigger that capability by using posting flags.\n\n       (Also, note that if all you care about is the balanced virtual accounts, that's\n       entirely equivalent to a second transaction on the same date. I could be\n       convinced to add that in, a special state for a subset of postings, as a\n       \"shadow transaction\" whereby the parser splits the single transaction into two\n       separate ones, perhaps adding a tag to the shadow one so that you can filter\n       them out at will. That could be implemented as a plugin, BTW, separating\n       postings that have a particular flag on them.)\n\n    \". This could be used to simulate balanced virtual postings.\n\n** Plugin: alt_date\n\n  - Create a plugin that allows you to replace the date with some of the\n    metadata fields, e.g. to create alternative date histories.\n\n      \"Note that if you _really_ badly wanted alternative history, you could you could\n      easily enter alternative dates as metadata (Beancount will recognize and parse\n      a datetime.date type as a value for metadata) and you coudl write _very_ simple\n      plugin that converts all the transactions to use the alternative date where\n      present in the metadata (or otherwise leave the date as is). You could even\n      define yourself multiple different sets of alternative dates by using different\n      metadata fields... you can go crazy if you like and create multiple versions of\n      history that way. But that would be segregated to a plugin so I'm comfortable\n      with it, do whatever you like in plugins, they're perfect for experimentation.\"\n\n** Plugin: unverified\n\n  - Idea! Allow the selection or reporting of all the postings since their\n    balance check in each account. These postings can be called \"unverified\"\n    and it should be possible to report just those. Maybe we can restrict\n    further to the list of those without a '*' flag, or maybe just those with a\n    '!' flag. \"Show me all that's unverified right now.\"\n\n    Can this be accomplished with the shell? I suppose a new plugin could be\n    created to flag unverified entries with meta-data and then filter on that.\n    That's probably the best way to do this.\n\n** Plugin: no_zero_amounts\n\n  - Move the check for zero units (\"Amount is zero\" from the parser) to a\n    plugin, and make this selectively removable.\n\n** Plugin: no_unused_pad\n\n  - The validation check that pushes an error on unused pad directives should\n    be moved to a plugin, that should be optional. There is rationale for\n    allowing to keep unused pad directives. Don't be so strict, Martin.\n\n\n** Plugin: init_pad\n\n  - Idea: a plugin that autopads all initial balance assertions! Do it for\n    demos, will be very useful for making demos easier, not having to be so\n    strict.\n\n  - Write a plugin that automatically inserts a padding directive for accounts\n    with no open directive and with a balance check.\n\n** Plugin: multi_pad\n\n  - New plugin type: a kind of spreaded Pad directive, that creates multiple\n    pads at regular intervals. This is to deal with smooth cash distributions or\n    work meals assignment. You should be able to specify the frequency and\n    have it automatically insert a number of entries to spread the expense\n    evenly. 'evenpad', 'multipad', 'distribution'? This should most definitely\n    be a plugin.\n\n** Plugin: cost_pad\n\n  - (pad) Review the possibility of padding units held at cost:\n\n      \"The reason it fails is that there must have been units of those commodities\n      held at cost before the pad date, and it is an error to pad commodities at\n      cost, because Beancount has no way to know what the cost basis of those\n      commodities should be.\"\n\n** Plugin: auto_remove\n\n  - Add a auto-remove-unused part of the auto_accounts plugin,\n    that automatically removes Open directives for unused accounts. This is\n    useful for demos and such.\n\n** Plugin: monotonic\n\n  - Write a plugin that enables a check that all postings' amounts are of the\n    correctly allowed sign, e.g. Expenses should almost always be a positive\n    amount, Income a negative one, Assets can be both, also Liabilities. If an\n    amount is posted in the contra direction, this should trigger a warning,\n    unless the transaction is flag with a particular character, or some special\n    tag is present.\n\n\n** Plugin: match_pending\n\n  - Implement beancount.plugins.tag_pending as a general feature of links...\n    this ought to be built-in by default, this is a great idea.\n\n** Plugin: balance_constraint\n\n  - Idea: You could add a further constraint property to an account name: that\n    the amounts may never be allowed to balance to a particular sign. This\n    could be useful to avoid data entry mistakes. You could even write a doc\n    just focused on all features designed to avoid data entry mistakes.\n\n  - Create a verification plugin that verifies that the balance of an account\n    does not go under some negative threshold below/above zero. This way you\n    could check that account balances are of the expected size. (The plugin\n    should accept transient negative balances within the day though, as those\n    are order-dependent.)\n\n** Plugin: tip_calculator\n\n  - Write another example plugin that splits \"Expenses:Restaurant\" legs into\n    two two postings: \"Expenses:Restaurant x 83%\" and \"Expenses:Tips x 17%\".\n\n** Plugin: gifi_reporting\n\n  - You could write a script to automatically fill this form:\n    http://www.cra-arc.gc.ca/E/pub/tg/rc4088/rc4088-12e.pdf\n\n      \"With Beancount, one thing that would be doable _outside_ of Beancount, as\n    a separate script, is to associate a set of accounts to these GIFI codes and\n    automatically generate the forms.\"\n\n** Plugin: sans_cost\n\n  Capital Gain Without Cost.\n\n  - Implement the proposal for putting the capital gain in the cost as a plugin\n    that transforms the relevant transactions, those tagged as such. This will\n    require some loosening of the booking method in order to make it easier to\n    disambiguate a sale, and some good debugging tools as well.\n\n    You could automatically look for the right amounts by looking at the signs.\n    I think you could automate a lot of it.\n\n  - Compare with what I've done for wash sales for TY2015.\n\n** Plugin: avco_checker\n\n  Strict Average Cost Inventory Booking Checker.\n\n  - Build a plugin that will check that accounts with average cost inventory\n    booking method only have such reductions in them:\n\n    https://docs.google.com/document/d/1F8IJ_7fMHZ75XFPocMokLxVZczAhrBRBVN9uMhQFCZ4/edit#heading=h.m74dwkjzqojh\n\n      \"Another approach would be to not enforce these aggregations, but to provide a\n      plugin that would check that for those accounts that are marked as using the\n      average cost inventory booking method by default, that only such bookings\n      actually take place.\"\n\n   This is, of cource, to be implemented only after implementing support for\n   the average cost inventory booking method.\n\n** Plugin: match_pending\n\n  - Write a plugin that will pair up (link) matching transactions posting to a common\n    account; this could be used to properly pair up the transactions to\n    Liabilities:AccountsPayable, which would be very useful.\n\n** Plugin: at_cost_only\n\n  - Idea for one of those constraint plugins: Create a plugin whereby you\n    declare some currencies and assert that any units in them are always held at\n    cost.\n\n** Plugin: subset_balances\n\n  - Create a plugin that filters out postings with a particular per-posting\n    flag, and that checks that they are balanced by themselves.\n\n\n** Super-Plugins: Pedantic & Auto\n\n  There are two groups of plugins which I use quite often, and would benefit\n  from it being possible to enable all at the same time: \"auto everything\" and\n  \"super pedantic.\" Ideally the list of actual plugins being run would be\n  expanded in the loader. I think we ought to just make the loader support\n  modules in its __plugins__ attribute, and it would insert them this way in\n  options_map, and run them individually, or maybe use another module attribute,\n  e.g. __plugins_delegate__ or whatever..\n\n  - (pedantic) Create a new plugin-of-plugins which enables all the possible\n    constraining other plugins in order to make Beancount as tight as possible\n    by default. Making the hardcore validation into a plugin might be a good way\n    to provide a strict mode. You could build a \"beancount.plugins.pedantic\"\n    plugin-of-plugins.\n\n  - (auto) Create a new plugin-of-plugins which enables all the auto-declaration\n    plugins in order to make crafting little test files as convenient as\n    possible. I do this all the time, I need this actually. You could build a\n    \"beancount.plugins.auto\" plugin-of-plugins.\n\n  - Put all verification plugins, including nounused and noduplicates under\n    beancount.plugins.constraints.*.\n\n* Payees as Subaccounts\n\n  Payees whose transactions always post to the same expense accounts may be\n  viewed as sub-accounts of those accounts, in some sense. I've been toying with\n  the idea of taking advantage of this in various ways. For example, one could\n  break down the balance of an account by payee, or conversely, use the leaf\n  account name as the payee itself (and remove it). I'm not sure if this useful.\n  This would also require some clean payee names. This section contains some\n  ideas about that.\n\n  - Idea: Allow sub-account names to include a special character, e.g., '#',\n    (only one) that would indicate to the reporting facilities that, by default,\n    the aggregation should be reported to the parent account. A \"detail\" or\n    \"verbose\" switch could be used to trigger the detailing of subaccounts. For\n    example,\n\n       Expenses:Health:Medical:#Claims\n       Expenses:Health:Medical:#PatientSavings\n       Expenses:Health:Medical:#ClaimsPayments\n\n    would be reported as\n\n      Expenses:Health:Medical\n\n    by default, but with the detailed switch, would be reported as\n\n       Expenses:Health:Medical:Claims\n       Expenses:Health:Medical:PatientSavings\n       Expenses:Health:Medical:ClaimsPayments\n\n    This could be used for various subaccounts actually. It's a nice way to\n    guide reporting that does not complexify the semantics.\n\n  - Idea: in the query language, provide a special Account:Payee field, in\n    order to play with the notion of payee-as-subacccount often discussed.\n\n  - About the discrepancy between the concept of \"Payee\" and a superfluous lead\n    account, e.g. Internet:TimeWarner, which typically contains only\n    transactions from that payee: maybe we can elide the account name if it\n    contains only a single payee, or perhaps a warning may be issued? I don't\n    know.\n\n    Basically, it would be nice to be able to have multiple payees in the same\n    category over time (e.g. Electricity, Internet) but to be able to separate\n    them somehow, without having to put the payee into the name. This is a\n    little fuzzy, and I'm not sure how to do it, because the imported payee\n    names are often not very clear and often truncated as well.\n\n      Have you ever thought that Payees often end up functioning like an extra\n    subaccount? I've come to realize that for Payees that only ever touch a\n    single account, the line is really fuzzy there. I've been entertaining the\n    idea of automatically creating subaccounts for payees like that.\n\n  - Write a script that will highlight some \"payee vs tags vs subaccount\"\n    invariants:\n    * Highlight payees that are always used with the same accounts\n    * Same with tags\n\n** Old Notes\n\n  - Create a plugin that will define subaccounts for payees within accounts and\n    modify all the transactions accordingly. This would be a great way to kick\n    the tires on this idea without affecting the rest of the system.\n\n      Expenses:Electricity:ConEdison\n      Expenses:Phone:TMobile\n      Expenses:Groceries:WholeFoodsMarket\n      Expenses:Groceries:UnionMarket\n\n  - Should we define some notion of the default level for aggregation, per\n    account? For example, in Expenses:Electricity:ConEdison, the default level\n    of aggregation should be Expenses:Electricity. If we define that, using\n    subaccounts should not bother us much.\n\n* Budgets & Temporal Constraints\n\n  The concept of \"budgeting\" should be implemented as a list of constraints on\n  top of what Beancount already offers. It could be segregated to a plugin, as\n  long as the input syntax is powerful enough to support it. Some people in the\n  'fava' team have already begun experimenting and that's why I added support\n  for a Custom directive. However, eventually this should be formalized a bit\n  more and unknown directives should be let to trickle through, and for plugins\n  to either register a validation function for the expected data types that were\n  seen (this wouldn't be grammar-level parsing, would have to be after the\n  grammar has run) or for them to validate their matching directives directly.\n\n  - It would be useful to create a directive that checks that the balance\n    of an account in a time interval is lesser or greater than some specific\n    amount, e.g.\n\n       Expenses:US:TY2014:SocSec      <= 7254 USD  ;; 6.2% of 117,000 USD\n       Expenses:US:TY2015:SocSec      <= 7347 USD  ;; 6.2% of 118,500 USD\n\n  - \"Envelope budgeting\" is easily implemented like this:\n\n    * A sub-account of a real assets account is market as special.\n    * Those sub-accounts are used to transfer funds from their parent account.\n      They are constrained to only ever transfer funds to and from that parent\n      account.\n    * Their transactions can simply be filtered out in order to remove the\n      budgeting aspect.\n    * You should be able to report balances on these accounts. In fact, since\n      they're marked as special, you should be able to gather all of them and\n      report the balances of all the envelopes. That's the summarization for the\n      budgeting function.\n    * Finally, some level of automation should be provided to automatically\n      replenish the enveloped at some set frequency (e.g. the beginning of each\n      month), including rolling unspent amounts.\n\n\n** Plugin: budget\n\n  - Implement a plugin that defines and enforces budget constraints.\n\n  - Look at this syntax for an example of a recurring transaction specification:\n    https://www.roaringpenguin.com/products/remind\n    (Sumitted by user comment.)\n\n** Budgeting / Goals\n\n  - We could easily add features for budgeting, e.g. somehow set goals and then\n    report on the difference between actual and the goal, and project in the\n    future according to rate, e.g.:\n\n       ;; Check that the total for this position between 2013-06-01 and 2013-12-31 < 800 USD\n       2013-12-31 goal  Expenses:US:Restaurant  2013-06-01  < 800 USD\n\n       ;; Check that the balance of this account on 2013-12-31 is >= 1000 USD\n       2013-12-31 goal  Assets:Savings  >= 1000 USD\n\n* Filtering\n** Views\n\n  - Replace all views by filtering queries... the root page should still have\n    convenient links to various preset views, like the last five years, but\n    these links should be implemented using the filtering query feature!\n    Maybe it's worth allowing the user to specify common queries in the options\n    map, and provide links to them. Do this, and try removing some of my\n    subaccounts to simplify the accounts-trees somewhat.\n\n  - The root page should feature a prominent input form that allows the user to\n    specify a query! This input needs live at the very root\n\n  - (views) You should be able to filter to all transactions related to some\n    account, e.g. Immigration\n\n  - IMPORTANT! Try to let through some of the non-transaction entries in the\n    view filtering. We obviously cannot let through balance entries, but\n    documents yes, depending on the type of filtering. We should do our best to\n    let all the entries carry through.\n\n** Custom dimensions\n\n  - From discussion:\n\n       | (digression not about virtual postings but answers auxiliary questions about\n       | them)\n       |\n       | Now this points to a more general idea that I've been pondering for a while:\n       | these \"accounts\" can often be seen as a set of flat dimensions, the fact that\n       | they have a hierarchy can get in the way. I tend to have accounts that look\n       | like this:\n       |\n       |   TYPE:COUNTRY:INSTITUTION:ACCOUNT:SUBACCOUNT\n       |\n       | like this, for example:\n       |\n       |   Assets:US:HSBC:Checking\n       |   Assets:CA:RBC:Savings\n       |\n       | For these four dimensions, I actually like having most accounts (Assets,\n       | Liabilities and Income) specify them in this order. This does not always make\n       | sense though, especially for expense accounts; for those you wouldn't really\n       | want to have a COUNTRY dimension at the root. You want the general category\n       | only, so I'll have, for example:\n       |\n       |   Expenses:Food:Restaurant\n       |   Expenses:Food:Grocery\n       |\n       | but sometimes the dimensions get inverted too, like in my recent change about\n       | how to track taxation:\n       |\n       |   Expenses:Taxes:US:TY2014:Employer:Federal\n       |   Expenses:Taxes:US:TY2014:Employer:StateNY\n       |   Expenses:Taxes:US:TY2014:Employer:CityNYC\n       |   ...\n       | Here the \"institution\" is your employer, and shows deeper in the hierarchy.\n       | Finally, you often do want to have multiple types for the same or similar\n       | accounts, for instance, to track gains and dividends income from a particular\n       | investment account, you want a mirror of most of the dimensions except for the\n       | assets bit:\n       |\n       |   Assets:US:ETrade:IRA -> Income:US:ETrade:IRA\n       |\n       | For instance:\n       |\n       |   Assets:US:ETrade:IRA:Cash\n       |   Income:US:ETrade:IRA:Dividends\n       |\n       | You see what I'm getting at... these components really operate more like a\n       | database table with values possibly NULL, e.g.,\n       |\n       |   type     country  institution  account   category\n       |   -------- -------- ------------ --------- -----------\n       |   Assets   US       HSBC         Checking  NULL\n       |   Assets   CA       RBC          Savings   NULL\n       |   Assets   US       ETrade       IRA       Cash\n       |   Income   US       ETrade       IRA       Dividends\n       |   Expenses NULL     NULL         Food      Restaurant\n       |   Expenses NULL     NULL         Food      Grocery\n       |\n       | Having to order your account components in a hierarchy forces you to\n       | decide how you want to report on them, a strict order of grouping from\n       | top to bottom.\n       | So I've been thinking about an experiment to rename all accounts according to\n       | dimensions, where the ordering of the components would not matter. These two\n       | would point to the same bucket, for example (changing the syntax slightly),\n       |\n       |   Expenses|Taxes|US|TY2014|Employer|Federal\n       |   Expenses|US|Employer|Taxes|TY2014|StateNY\n       |\n       | You could then display reports (again, the usual reports, balance sheet,\n       | income statement, journals) for \"the subset of all transactions which has one\n       | posting in an account in <set>\" where <set> is defined by values on a list of\n       | dimensions, a bit like a WHERE clause would do.\n       |\n       | Now, now, now... this would be a bit radical, now wouldn't it? Many of these\n       | accounts do point to real accounts whose postings have to be booked exactly,\n       | and I'm a bit worried about the looseness that this could introduce. One and\n       | only one account name for a particular account is a nice property to have.\n       |\n       | So what can we do to select across many dimensions while still keeping\n       | hierarchical account names?\n       |\n       | The first thing I did in Beancount is to create views for all unique account\n       | component names. For example, if the following account exists:\n       |\n       |   Assets:US:ETrade:IRA\n       |\n       | You will see four \"view\" links at the root of the Beancount web page:\n       |\n       |   Assets\n       |   US\n       |   ETrade\n       |   IRA\n       |\n       | Clicking on the link selects all the transactions with a posting with an\n       | account where that component appears. (Views provide access to all the reports\n       | filtered by a subset of transactions.) You can click your way to any journal\n       | or report for that subset of transactions. This exists in HEAD today. You can\n       | draw all the reports where a particular component appears, e.g., \"Employer\", as\n       | in \"Income:US:Employer:Salary\" and \"Expenses:Taxes:US:TY2014:Employer:Federal\".\n       |\n       | But this does not define \"dimensions.\" It would be nice to group values for\n       | these components by what kind of thing they are, e.g., a bank, an instution, a\n       | country, a tax year, etc, without regard for their location in the account\n       | name. A further experiment will consist in the following:  again assuming\n       | unique \"account component names\" (which is not much of a constraint to\n       | require, BTW, at least not in my account names), allow the user to define\n       | dimensions by declaring a list of component names that form this dimension.\n       | Here's how this would look, with the previous examples (new syntax):\n       |\n       |   dimension employer  Microsoft,Autodesk,Apple\n       |   dimension bank      HSBC,RBC,ETrade\n       |   dimension country   US,CA,AU\n       |   dimension taxyear   TY2014,TY2013,TY2012,TY2011,TY2010\n       |   dimension type      Assets,Liabilities,Equity,Income,Expenses (implicit?)\n       |\n       | You could then say something like \"show me trial balance for all transactions\n       | with posting accounts where bank is not NULL group by bank\" and you would\n       | obtain mini-hierarchies for each group of accounts (by bank, across all other\n       | dimensions).\n       |\n       | (With the state of my current system, I could probably code this as a\n       | prototype in a single day.)\n       |\n       | Addtionally, accounts have currency constraints and a history of postings\n       | which define a set o currencies used in them. More selection can be done with\n       | this (e.g., show me all transactions with postings that credit/debit CAD\n       | units).\n       |\n       | IMHO, all you're trying to do with these virtual accounts is aggregate with\n       | one less dimension, you want to remove the real account and group by community\n       | project. My claim is that there are ways to do that without giving up o the\n       | elegant balancing rules of the DE system.\n\n    In relation to this... these \"dimensions\", could they just become other\n    dimensions in the filtering language?\n\n      component:Microsoft\n\n      employer:Microsoft\n      bank:RBC\n      country:US\n\n    You can then break down by those, like a GROUP BY clause, and generate\n    reports that have those as root accounts, or separate breakdowns.\n\n** Tags used as dimensions\n\n  - If you had tags as key-value pairs, those could be used as well:\n\n      2014-05-21 * ...\n        #employer:Microsoft\n\n    Searching for:\n\n      tag:employer=Microsoft\n\n    This is another dimension in the same filtering language.\n\n* Operations\n** Validation\n\n  - Write a dedicated routine to check the following invariant:\n\n        # Handle sanity checks when the check is at the beginning of the day.\n        check_is_at_beginning_of_day = parser.SORT_ORDER[Check] < 0\n        ...\n        if check_is_at_beginning_of_day:\n            # Note: Check entries are assumed to have been sorted to be before any\n            # other entries with the same date. This is supposed to be done by the\n            # parser. Verify this invariant here.\n            if isinstance(entry, (Check, Open)):\n                assert entry.date > prev_date, (\n                    \"Invalid entry order: Check or Open directive before transaction.\",\n                    (entry, prev_entry))\n            else:\n                prev_entry = entry\n                prev_date = entry.date\n\n  -  Sanity check: Check that all postings of Transaction entries point to their\n     actual parent.\n\n  - (validation) In addition to the Check/Open before-constraint, check that\n    the entries are always sorted. Add this sanity check.\n\n  - The default validation should check the invariant that Open and Check\n    directives come before any Transaction.\n\n  - Validation: Everywhere we have a filter of entries to entries, we should be\n    able to apply a check that the total balances before and the total balances\n    after should have the very same value.\n\n  - In validate.py: differentiate between the case of an entry appearing too\n    early before an Open directive, and an entry appearing for an account that\n    simply just doesn't exist.\n\n  - Auto-detect and warn on likely duplicate transactions within the file.\n\n** Padding\n\n  - Idea: Padding entries could be extended a tiny bit in order to\n    automatically calculate the cash distribution entries, e.g., like this:\n\n      2014-03-04 pad Asset:Cash  Expenses:Restaurant    60%\n      2014-03-04 pad Asset:Cash  Expenses:Alcohol       40%\n\n      2014-04-04 pad Asset:Cash  Expenses:Restaurant    70%\n      2014-04-04 pad Asset:Cash  Expenses:Alcohol       30%\n\n      2014-05-04 pad Asset:Cash  Expenses:Restaurant    70%\n      2014-05-04 pad Asset:Cash  Expenses:Alcohol       30%\n\n    This is a great idea, is in line with the general meaning of pad entries\n    (implicit 100%) and would add a much desired feature.\n\n  - Add tests for all the cases of realization padding.\n\n** Locations\n\n  - @location really should just convert into a generic event \"location\", just\n    as address and school should; they're just events with forward fill...\n    Serve this at:\n\n       http://localhost:8080/20120101/20130101/events/location/days\n\n  - Add a \"reason\" field for @location, and display as trips, with\n    some sort of meaning to them. Ok, this contradicts the previous idea.\n\n\n\n* Parser\n** Errors\n\n  - Parsing an indented string results in some output... for example, this code\n    spits out a single Balance entry (the last one):\n\n        balance_entries, _, __ = parser.parse_string(\"\"\"\n          2014-01-02 balance Liabilities:CreditCard   100.00 USD\n          2014-01-03 balance Liabilities:CreditCard   200.00 USD\n        \"\"\")\n\n    It should not. It should output nothing, because these entries are indented.\n    I don't understand why it does. This is a parser bug which needs to be\n    traced and debugged. This has come up in writing tests here and there,\n    forgetting to insert dedent=True.\n\n  - We need to gather errors in a single place and report them like the others;\n    right now I'm catching them in sum_to_date() and writing using the logging\n    module; but they really should be trickled up with the rest.\n\n  - Syntax errors currently have no location... this is unacceptable. Write an\n    automated test, check for all kinds of errors, in the lexer, in the parser,\n    in the Python. (Just work with the line number, we don't really need\n    character position.) Test everything with automated tests.\n\n  - 'lineno' is incorrect, it points to the next entry, not the previous one,\n    fix this bug! This is really annoying.\n\n  - Set a correct filename in grammar.y\n\n  - Errors from the parser and others should all be accumulated in one place,\n    so that we do all the reporting at the very top level.\n\n  - Don't raise error exceptions anywhere; log everything to an error\n    handler/accumulator class instead, and skip to the next entry/declaration.\n  - Propagate exception from Python(?)\n\n  - Problematic transactions (!) should spit something of color on stdout, they\n    should not be forgotten so easily.\n\n  - Bug: Invalid account names should only be reported once.\n\n** Lexer Work\n*** Errors in Flex Lexer\n\n  - (parser) Support enabling flex debugging in beancount.core._parser.parse(),\n    using \"yyset_debug(int bdebug)\".\n\n  - When an error occurs, skip the lexer to the next empty line and recommence.\n\n    * Modify the lexer to emit EOF and add that in the grammar rules for empty_line.\n\n*** Write a New Lexer From Scratch\n\n  Reasons to write your own lexer manually:\n\n  - Should support UTF-8 encoding.\n\n  - Should support SCHEDULE entries for org-mode (see email discussion).\n  - More flexible syntax (see \"Is it possbile for beancount to ignore org-mode\n    SCHEDULED and DEADLINE?\" thread).\n\n  - Better error reporting\n\n  - (performance) Write your own lexer manually and compare performance with\n    flex one. I think we can do a much better job at error reporting by writing\n    our own, but I'm unsure how the performance compares.\n\n  - IMPORTANT LATENT ISSUE. You need to extend the lexer to parse A-Z for flags,\n    not just PSTCU! This is important, as I just realized that it could prevent\n    the correct parsing for entries in a round-trip, with postings produced with\n    unexpected flags. In fact, any character with whitespace on each side should\n    parse as a flag. This is very important.\n\n    This manifests when adding a posting with letter 'M' right now. Replicate\n    this, fix the problem.\n\n** Make the Parser Reentrant\n\n  - Make the parser reentrant [2014-08-02]. This is _not_ a difficult task.\n\n    * Follow this:\n      https://www.lemoda.net/c/reentrant-parser/\n      http://flex.sourceforge.net/manual/Extra-Data.html\n      to remove all globals from my lexer and make it truly reentrant and free of globals.\n\n    * You need to add unit tests that check the correctness of line numbers on\n      parsed directives and errors.\n\n    * You need to remove the get_yylineno and get_yyfilename accessors.\n\n    * You need to make the parser reentrant, by add this directive to the grammar:\n\n         %parse-param { PyObject* builder}\n\n      You also need to redefine yyerror() accordingly. I've done it and it\n      works, it's simple, it's a 20 minute change:\n      https://www.gnu.org/software/bison/manual/html_node/Parser-Function.html\n\n    * You also need to make the lexer reentrant:\n      http://flex.sourceforge.net/manual/Reentrant-Overview.html#Reentrant-Overview\n\n         %option reentrant\n\n      (I haven't tried this yet.)\n\n    * Most of the \"real\" work involved is in removing the globals for lineno and\n      filename.\n\n    * Make sure the performance does not degrade as a result of doing this.\n\n** Syntax\n\n  - You should support a payee with no description! This generates a parser\n    error right now.\n\n  - The syntax should support multiline strings naturally...\n\n  - For Links vs. Tags: dont impose an order, parse as tags_or_links.\n    Right now the order is tags_list and links_list.\n\n  - You should accept commas in the input; simply ignore their value.\n\n  - Add 1/rate syntax for prices (and anything... really, why not).\n    Convert at parsing time.\n\n*** Sensible Syntax for Lots\n\n  - Consider making the lot syntax like this:\n\n       -4 {HOOL @ 790.83 USD}\n\n    instead of:\n\n       -4 HOOL {790.83 USD}\n\n    It's actually a lot more accurate to what's going on...\n\n** Testing\n\n  - Allow file objects to parse() and dump_lexer(). This should use fdopen() or\n    whatever else to get this job done at the parser level.\n\n  - You need to clean up the memory of the strings created; call free() on each\n    string in the rules.\n\n  - Add a unit test for pushtag/poptag errors.\n  - Add unittests for tags, pushtag/poptag\n\n* Reports\n** Text Statements\n\n  - Complete text-statements branch, printing out balance sheet and income\n    statement to text for bean-report and ELI, complete with --date on those\n    reports.\n\n - Using an intermediate data structure, produce text and csv / xls reports,\n   downloadable from the web front-end, or even generatable directly. All of\n   this reporting infrastructure should be reusable, ideally.\n\n  - A text rendering of the balance sheet / income statement would be\n    _very_ useful for collaboration/communication with others. Add a link to\n    download a text version of any report. This would be made easy if we only\n    have a few distinct types of reports.\n\n** List of Unreconciled Transactions and Postings\n\n  - Perhaps we want to produce a report of all transactions with a highlight on\n    them.\n\n** Balance Sheet\n\n  - (web) We really need to reorder the accounts in a way that is more\n    sensible... it's annoying to see the accounts I care about at the top of\n    the page. Cash, Points, AU, should be at the bottom... I wonder if there's\n    a nice heuristic. Last updated date? I think that would be good enough.\n\n  - We need to figure out how to order the accounts on the balsheet; I want the\n    most relevant near the top. Sorting accounts: compute a score made up of\n\n    * nb. txns from the last 3 months\n    * nb. checks from the last 3 months (weighted more heavily)\n    * line-no of Open directive in the file.\n    * last updated date.\n\n** HTML Rendering\n\n  - Rendering: When you collapse a parent account, its aggregate amount should\n    render, and disappear when not collapsed.\n\n  - Numbers should align to the right.\n\n  - USD and CAD should be aggregated in their own columns for balance sheet and\n    income statements. These should be specified from the command-line.\n\n  - All entries should have collapsing a-la-JavaScript, along with\n    collapse/reveal all buttons. All JS.\n\n  - If the software is finally fast enough in Go, render RESTful on the fly for\n    any date:\n\n    * REST:  /balsheet/20121231/\n    * REST:  /income/20121231/20131231/\n\n    This way, you could have any year on the same run. No need to restart, even\n    have a menu with all the years, and perhaps even some of the latest months.\n\n  - It would be really nice to render the line numbers to the source in the HTML\n\n  - (Performance) Implement buffered output for faster response using a separate\n    thread and an iterator that yields from app.write when the data buffer is\n    large enough.\n\n  - Postings that have a \"!\" flag should have at least their\n    background red.\n\n  - You should more explicitly state the beginning and ending period\n    on each statement pages (it is super important information).\n    Just below the title.\n\n\n\n** Excel Output\n\n  - Find good ways to transfer data to an Excel spreadsheet. A link to download\n    a file should be supported.\n\n\n** Links to Source\n\n  - The new format code should keep and optionally render the source file/line\n    of any transaction, and allow clicking to get to the source line in the\n    rendering.\n\n  - Maybe there should be a script that can take a report specification and\n    output a list of emacs-compatible links to the entries, interspersed with\n    the text format rendering! You could go \"next-error\" to go through the\n    entries in time order, emacs taking you there one-by-one.\n\n** Event Reports\n\n  - We should be able to count the days of each event type.\n\n** Distribution of Expenses and Income\n\n  - Add a pie chart to visualize the constitution of the Income Statement for\n    Expenses and Income.\n\n** Summary Reports\n\n  - To create custom views, for example, weekly summaries, you could\n    convert the ledger into another ledger, where entries would have\n    been replaced by summary entries instead, and all the other\n    functionalities would still work.\n\n** Financial Ratio Analysis\n\n  - Add these: https://www.csun.edu/~bjc20362/Controlling-2.pdf\n\n** Trades\n\n  - You should be able to report on all booked trades during a period,\n    especially with the new booking algorithm, this will be useful.\n    Create a new report type for this.\n\n** Reports: Overview Stats\n\n  - Add a simple overview 'stats' report with output like this:\n\n      Files these postings came from:\n        ...\n\n      Unique payees:            2681\n      Unique accounts:           151\n\n      Number of postings:       9026 (4.8 per day)\n      Uncleared postings:        126\n\n      Days since last post:     -206\n      Posts in last 7 days:       30\n      Posts in last 30 days:      52\n      Posts seen this month:       8\n\n  - This ought to replace the current stats reports, which are simply too small\n    and specialized.\n\n** Reports: Rendering Journals\n\n  - Journals should render in either order.\n\n  - Add an option for spacing in the revamped reports.\n\n  - When multiple transactions occur in the same day, it makes sense not to\n    render the balance amount until the last one. Do this. This is important.\n\n  - In rendering balance directives, don't render the amount in the \"change\"\n    column; that is too confusing for some users, keep the change column for\n    changes.\n\n  - (easy) Don't render postings in the HTML interface by default. The detail\n    can be made available via bean-query now, and users can click on /context\n    link in order to get the full transaction detail. Journals should be\n    summaries. Add an optional argument to turn it on/off, but it should be off\n    by default.\n\n** Reports: Rendering Tables of Balances\n\n  - tree rendering: If a parent account has only a single subaccount and the\n    parent account otherwise has no postings in its realization, render the\n    account on a single line instead of two, e.g.\n\n      Expenses                     Expenses\n        Taxes                        Taxes\n          US                           US\n            TY2014                       TY2014\n              State                        State:Company\n                Company                    ...\n              ...\n\n** Reports: Rendering Tables\n\n  - For table rendering, move the actual formatting at rendering time. CSV files\n    should have fractional values for percentages, txt and html should have %\n    values. I need to figure out a good solution for this. Maybe the thing to do\n    is to move the field selection at rendering stage, or at least to have it at\n    both.\n\n** Reports: Accounts\n\n  - bean-report accounts should produce a regular table that can be rendered\n    with CSV or TXT, not a custom output string.\n\n** Reports: Cash\n\n  - Create a function to identify whether a Position/Inventory is cash... use\n    this to reproduce/replace the 'cash' report. Use the same rule from\n    bean-report.\n\n** Report: XML\n\n  - Output to a structured XML format, some people are finding that useful to\n    build other visualizations. In order to test this completely, do a\n    round-trip test.  The code should live in beancount.parser, parallel to the\n    existing code there.\n\n** Report: Events\n\n  - Build a 'events' report that will print out the current value of all events.\n\n  - Create a new report type: \"days\" that counts the days of any event in the\n    filtered log.\n\n* Price Freshness / Dated Prices\n\n  - Issue warnings if the price date is too far from the requested market value\n    date. This will help with returns, a lot. You should likely do this in the\n    price_map object, in the lookup function, maybe, so that all modules benefit\n    from the feature. You could ideally provide a date and a tolerance, and\n    somehow issue warnings automatically. The tolerance for price freshness\n    should be provided as an option in the input file.\n\n  - Add the capability to issue warnings when the price database is queried for\n    a specific date but the price point is too distant from the requested date.\n\n      \"One thing I want to do soon is to issue warnings when the price database is\n      looked up and the price point is too far from the requested date, so that the\n      user could go fill in the missing prices. I'd probably issue price entries with\n      the approximated price (approximated with a distant date) and then feed that\n      into another script that would fetch prices for those directives.\"\n\n* Review Design of Tags & Links\n\n  - Consider removing the \"links\" attribute altogether and making that simply\n    just a tag. Do we really, truly need to distinguish between tags and links?\n\n  - Try removing the 'tags' attribute of transactions by moving it to metadata\n    fields and making sure tools are available to perform the same aggregations\n    using bean-query and views using bean-web.\n\n  - Make the Pad directive accept #tags and propagate those to the generated\n    transactions:\n    https://bitbucket.org/blais/beancount/issues/70/add-tag-to-the-pad-directive-and-propagate\n\n* Web Interface Improvements\n\n  - (easy) Make b.w.web also 'app.options_map' instead of 'app.options'.\n\n  - Make the web interface not render postings anymore by default.\n\n  - web: Don't render the transaction detail anymore; instead, the full context\n    should come up in a tooltip that is computed on-demand. Rendering the basic\n    table should not have to render all the detail upfront, that is always\n    overkill.\n\n  - web: Don't render the full Inventory'es; instead, already render at cost and\n    provide their full detail either by clicking on the transaction, which\n    should render the full detail of an inventory (for debugging), or in a\n    tooltip.\n\n  - Highlight (e.g., in the color red) the postings to accounts that are in\n    contra value, e.g. a positive Income, or a negative Expenses posting.\n    (Maybe this is just something that lives in Fava actually)\n\n  - In the web interface, it would be nice to have a fancy client-side\n    JavaScript overlay here, that automatically appears after parsing if there\n    are errors and that automatically smoothly fades out. All errors should be\n    displayed in an overlay; proper error handling and display for the web\n    interface is not optional, it's important.\n\n  - Figure out how to disable googleapis fonts when on a very slow connection.\n    I'd like to enable the fonts, but if they cannot be fetched quickly, or\n    cached, this should be disabled.\n\n  - Implement a little plug-ins system that allows a user to insert a new tab in\n    bean-web, to insert some custom display.\n\n  - Instead of rendering inventories with the full contents in the journal,\n    render the cost, and place the full inventory in a tooltip!\n\n  - A table of price entries should be rendered under the price graph in the\n    web interface.\n\n  - The Trial Balance page could be a good place to put all the accounts on the\n    left and have two sets of columns: beginning of period -> end of period.\n\n  - In order to implement .txt output, you will need to decouple the web\n    rendering and the generation of its included data. This will be\n    great--ability to cut-and-paste any page into txt. format=txt, and we could\n    still have the links clickable. Everything else would just be txt. A bit of\n    a crazy idea, but it might work well and be simple. Maybe.\n\n  - Render tags on the HTML page\n\n  - Replace gviz charts by some other library that does not require you to be\n    online in order for it to work.\n\n  - Silence BrokenPipeError errors from bottle using wsgiref. You could use\n    CherryPy, which doesn't suffer from that, or just... fix it and silence\n    them.\n\n  - In balance/aggregate reports, render the balances for parent accounts too,\n    in lighter gray.\n\n  - Render the Conversions amount at the bottom of the Conversions page...\n\n** Visualizations\n\n  - Move the TreeMaps experimental script for Expenses and Assets subtrees into\n    the bean-web codebase:\n    https://bost.ocks.org/mike/treemap/\n    (Or maybe that would just be left for fava.)\n\n** Rendering Documents\n\n  - Serving CSV files from the Documents page should not done be via download,\n    but rather they should rendered directly. Same with text files. As much as\n    possible files should be served directly.\n\n  - The documents web page should render by-month + date, and by-account + date.\n\n** Update Activity Page\n\n  - Update activity: Remove parent accounts with no child accounts.\n  - Update activity: This exhibits a bug in the table rendering, look for IVV,\n    see TODO(blais) in acctree.py\n\n** Bake Improvements\n\n  - Move beancount.scripts.bake to beancount/web and adjust all the references\n    accordingly.\n\n  - bake: Make bake support curl if wget is not available. It should work with either,\n    to relax dependencies.\n\n  - Make the web scraper run in multiple threads... it's quite a bit too slow as\n    it is. I'm sure we can make it scrape in parallel using multiprocessing and\n    a work queue (this should be a fun little project and would make baking to\n    an archive a lot faster in many cases).\n\n** Programmable View\n\n  - GREAT IDEA! Have a web form that you can input a view filtering expression,\n    e.g.  year:2014 component:Microsoft\n    to have that year's transactions made with this component. Encode the\n    results in a unique string that you can decode and create a corresponding\n    view of the subset selected by the expression. You can then view any of the\n    reports for that subset! This means we can then get rid of many of the root\n    page's links automatically, yet still provide all the opportunities... this\n    is the way to go, and would best mirror the command-line capabilities.\n\n** Error reporting\n\n  - We really need to list all the entries markes '!' somewhere; they should be\n    more annoying to the user.\n\n  - In the balance sheet or trial balance, mark accounts that have errors in\n    red, or add a little red start next to them.\n\n  - Implement basic error reporting page from the list of errors.\n\n** Links\n\n  - (web) Render links to the right of descriptions, and the link href link\n    should actually render a page of the related linked entries.\n\n** Aesthetics\n\n  - In the entries table HTML, highlight the relevant posting leg somehow, maybe\n    use a '>>' marker, or make it bold. Something. (Bold is too much, use >>.)\n\n  - Render \"as of YYYY-MM-DD\" under the title for Balance Sheet, and \"from\n    YYYY-MM-DD to YYYY-MM-DD\" under the title for Income Statement\n\n  - Answer to favicon.ico request.\n\n  - Add an option to render the entries table upwards, not just downwards.\n\n  - Use that beautiful new font (Roboto) from Tactile in the new rendering.\n    Totally worth it. Use the nice Lucida-like font for numbers, like in\n    TurboTax.\n\n*** JavaScript / Client-Side Interaction\n\n  - Render balance sheet/ income statement cells with two numbers for parent\n    nodes, so that when you collapse a node, all the amounts of its children sum\n    up automatically and display in its cell. You should have a consistent\n    report regardless of whether nodes are collapsed or not. This will require\n    some JavaScript effort.\n\n  - Implemented a JavaScript cursor in JS. J, K up down. SPC = toggle.\n\n  - In Journal view, pressing 'C' should toggle displaying the checks on and off.\n\n** Trial Balance\n\n  - We should have a nicer way to tell what accounts need to be updated.\n    Highlight them red if they haven't been updated in more a month\n    (configurable).\n    Put the last updated date in the balance sheet or perhaps the trial balance\n    page. Should be easy; we don't need a dedicated page for this.\n\n  - Shove more information in the Trial Balance page, info about errors, documents, etc.\n\n** Source\n\n  - The source page should take a special '?line=ddd' parameter that will\n    scroll the page to the transaction at that line.\n\n** Conversions\n\n\n* Small Projects & Challenge Ideas\n** Maximum Balance\n\n  - Can I compute the maximum value of each account at the end of every year\n    (for foreign assets decl.) This would be useful for FBAR / FATCA\n    declarations.\n\n  - Automatically compute the maximum account values of foreign accounts for\n    the FBAR filing.\n\n  - You should report a trial-balance -like listing of the minimum and maximum\n    values of all the accounts.\n\n** Property Lifetime Return\n\n  - Challenge: Can I compute IRR return on my condo purchase and sale,\n    accurately accounting for all the little expenses and cash flows along the\n    way? TODO: Add benefits received as an Income, as transactions.\n\n** Taxation Rate\n\n  - Challenge: Can I automatically compute my taxation rate for every year?\n\n** Currency Exposure Report\n\n  - For a particular balance sheet, report the total currency exposure of the\n    ledger. This should be a very simple report, probably in the form of a pie\n    chart.  Maybe this pie chart should be located in the capital report\n    (possibly makes sense).\n\n** Inflation Adjusted Reporting\n\n  - It would be AWESOME to look at a balance sheets from the past but\n    inflation-adjusted for any date... Answer this question easily:\n\n      \"What was I making in 2010 in today's dollar terms?\"\n\n  - How would I produce an inflation adjusted version of some charts. Maybe all\n    charts should have that option?\n\n  - Look at average meal 10 years ago, average electricity, etc. things that\n    should be equal, and correct for the time-value-of-money, compare prices\n    today with prices then. Maybe come up with some kind of constant unit that\n    I can convert everything to.\n\n** Account Linkage Report\n\n  - Generate a Graphviz link of all the inter-account transactions that are\n    larger than a certain amount.\n\n    Generate a graph for the main kinds of account\n    interchanges, by looking at the most significant transactions\n    between the accounts. For example, ignore transactions which are\n    too small in absolute value, or whose total is too small a portion\n    of the total.\n\n    Fun little project: Create a graphviz output from a Ledger, where\n    transactions above a certain amount would generate a link between\n    accounts. Note:  the threshold could be either for single\n    transactions, or for aggregate amounts (absolute value).\n\n** Predict Vacation Cap Date\n\n  - Make an plugin that computes the precise date at which my vacation will cap\n    (240 VACHR) base on an account.\n\n* Account Hiding Criterion\n\n  - Set the closing criterion for empty accounts, implement in a single place,\n    and review all the code which renders balances to use it.\n\n      \"I used to have it so that accounts closed before the beginning of the exercise\n      (in the reports) would not appear. Accounts closed at the end of the period but\n      with some activity within the period would appear (so you can click on them and\n      see their journal). Opened accounts with a zero balance would, too. Closed\n      before begin + no activity = no show.\"\n\n        2000-01-10 open Assets:Continuing\n        2000-01-10 open Assets:Empty\n        2000-01-10 open Assets:Terminated\n\n        2000-01-10 open Equity:Whatever\n\n        2014-03-10 *\n          Assets:Continuing       110 USD\n          Assets:Terminated       120 USD\n          Assets:Empty            130 USD\n          Equity:Whatever\n\n        2014-03-30 *\n          Assets:Terminated      -120 USD\n          Assets:Empty           -130 USD\n          Equity:Whatever\n\n        2014-05-15 close Assets:Terminated\n\n        2015-01-10 *\n          Assets:Continuing       110 USD\n          Equity:Whatever\n\n  - Whether an account shows up in a particular Ledger (realization) really only\n    should depend on whether the account was open during the period (we now have\n    account open/close dates... let's use them instead of a heuristic!).\n    Create a routine to figure out if an account was open during a specific\n    time period?\n\n  - Related topics:\n    (ticket) https://bitbucket.org/blais/beancount/issues/36/balances-output-sometimes-outputs-000\n    (fava) https://github.com/aumayr/fava/issues/292#issuecomment-219563582\n\n  - One question is whether we should display an account which has a non-zero\n    balance but when rounded for display rounds to a zero number?\n\n      \"the problem is not the sell, but the buy\n      that leaves -0.00120 USD in Assets:XYZ\"\n\n* Rejected Ideas\n\n  - Why aren't we using the price on the first leg of this transaction? This is\n    an interesting variation on the meaning of the price: it could mean either\n    (a) the price of the lot, or (b) the conversion price of the cost of the\n    lot. This would enable the following:\n\n        2013-07-22 * \"Bought some US investment in a CAD account\"\n          Assets:Investment:HOOL           50 HOOL {700 USD} @ 1.01 CAD   ;; 35350 CAD\n          Assets:Investment:Cash          -35359.95 CAD\n          Expenses:Commissions                 9.95 CAD\n\n  - Add a --auto-everything option to bean-check that automatically inserts a\n    beancount.plugins.auto_accounts directive and more.\n\n* To Be Categorized\n** Reporting Plugin Errors\n\n  - Build a utility function to parse plugin configs using ast.literal_eval()\n    and catch and produce a consistent error message when an invalid Python\n    expression is provided. Convert all the plugins to use it.\n\n  - When rendering errors, render the data type so the error tells you which\n    component or plugin generated it.\n\n  - Parse and save the line no for \"plugin\" directives in order to improve their\n    error reporting.\n\n** doctor / tools\n\n  - Add a list of posted balances by account to \"bean-doctor context\".  \"linked\"\n    always links all the transactions, so it's not good enough. Just add this by\n    default to the context command.\n\n  - Great idea: Make the printer able to (1) output \"incomplete\" entries and (2)\n    print out the entries in the order of (filename, line-no) in which they were\n    parsed, to produce a file that is as close as possible to output. (bw3443\n    asked for this in order to make modifications to his input and push that\n    back out to a file, this could be useful.)\n\n** Improvements to Emacs Support\n\n  - Investigate indent-region and see if it wouldn't make sense to override this\n    in order to invoke beancount-align / beancount-format.\n\n  - Add an Emacs mode command to compute a command at the date of the\n    transaction preceding or at the cursor line (with C-u). Without a C-u\n    prefix, compute the balances at the latest date. The point is that the user\n    shouldn't have to type in the bean-query <filename>, other than perhaps\n    having to type \"balances\". To work quickly on smaller files.\n\n*** Transaction Lists which can be Explored with Emacs\n\n  - Add a \"lineno\" format for transactions that render in \"Emacs errors\"\n    compatible format, so we can easily jump in time throughout the input file\n    instead of rendering a journal. Offer the option to list in reverse to. This\n    should be invokable from the SQL shell.\n\n  - Register (with filter) should have \"print\" mode that also includes\n    file:lineno so that we can make Emacs \"jump\" between the transactions in\n    the order they appear.\n\n** Trading\n\n  - Produce example transactions for each of the cases provided by Filippo's\n    sample transactions.\n\n** Tools: Formatting\n\n  - BUG: There is a bug in bean-format; on\n    /home/blais/sharing-with-roommate/liabilities-account-solution.beancount, it\n    fails with an assertion. I highly suspect that it's because of postings like this:\n      Expenses:Electricity             45.34/2 USD\n      Liabilities:Alice                45.34/2 USD\n\n* Crypto\n\n  Start thinking about some features for crypto users.\n\n  - Make it possible to transfer lots with cost between accounts without having\n    to specify the full detail (use matching).\n\n* Misc Grab Bag of Ideas\n\n  Here follows a grab bag of ideas. When I have a new idea coming to me, I don't\n  have time to think about where to put it, I just come here at the end and jot\n  it down. Every couple of years I clean this mess up and put it in the sections\n  above.\n\n  - Add HIGHEST_COST booking method.\n\n  - Make queries with group by order by unaggregated columns by default (output\n    should be stable even without ORDER BY clause.\n\n  - IDEA: In linked and context commands, output the sum of all positive and all\n    negatives numbers (like \"Net Income\" sum in 'linked').\n\n  - IDEA: For ugly transactions like this, it's convenient to repeat account\n    names and amounts, like this:\n\n      2020-08-09 * \"Delta Dental\" \"Processing claim\" ^deltadental-XXXXXXXXXXXx\n        service: 2020-08-07\n        Expenses:Health:Dental:NonEligible             295.00 USD\n        Expenses:Health:Dental:NonEligible             -50.00 USD\n        Expenses:Health:Dental:Deductible               50.00 USD\n        Expenses:Health:Dental:NonEligible          0.20 * -202.00 USD\n        Expenses:Health:Dental:Coinsurance          0.20 *  202.00 USD\n        Expenses:Health:Dental:NonEligible          0.80 * -202.00 USD\n        Expenses:Health:Dental:Allowed              0.80 *  202.00 USD\n        Expenses:Health:Dental:Reimbursement          -161.60 USD\n        Assets:AccountsReceivable:Anthem:Dental\n\n    But we don't want them applied as such. It would be nice to have those\n    automatically turned into:\n\n      2020-08-09 * \"Delta Dental\" \"Processing claim\" ^deltadental-XXXXXXXXXXXx\n        service: 2020-08-07\n        Expenses:Health:Dental:NonEligible              43.00 USD  <--- here.\n        Expenses:Health:Dental:Deductible               50.00 USD\n        Expenses:Health:Dental:Coinsurance              40.40 USD\n        Expenses:Health:Dental:Allowed                 161.60 USD\n        Expenses:Health:Dental:Reimbursement          -161.60 USD\n        Assets:AccountsReceivable:Anthem:Dental\n\n    It's fine if this is done only for postings with the same currency and no\n    cost basis, or postings with a particular flag on, or just for some subset\n    of accounts. \"automeld\"? This would be nice in v3, as the original parsed\n    transaction can keep all the original detail while the reduced one only\n    appears in the finaly flow.\n\n    Or maybe... this shoule be global and automatic?  Impelment it, and print\n    out which transactions would be affected to find out.\n\n  - `bean-doctor linked` command should render the balances after each\n    transaction. Either horizontally (new columns), or a dedicated tree right\n    after each. Add an option. This would be nice for debugging.\n\n  - `bean-doctor linked`: The account types aren't in the correct order. It\n    shows Assets, Expenses, Liabilities... put all the balance statemnet\n    accounts first, then income statement accounts, finally, equity.\n\n  - Plugin idea: A plugin that ensures that there is no residual commodity in an\n    account as of its closing.\n\n  - For Vanguard RothIRA, I need a balance check that applies only to a subset\n    of linked transactions. I'm being provided with this number in the imported\n    file but I have to split the transactions themselves.\n\n  - Turn all FIXME into TODO(blais) and NOTE(blais).\n\n  - \"find $PWD | treeify -F\" is broken; used to work. Update and fix this.\n\n  - Make the spreadsheets <-> beancount upload/download conversion scripts more\n    general and flexible and provide them to the general public. These are\n    really powerful.\n\n  - When env var L is set to a directory, failure just says that the Lex scanner\n    fails; this should mention the name of the file, so it's clear. Sometimes I\n    override \"L\".\n\n  - In order to render all linked transactions, support pulling the referenced\n    link or tag name under the cursor (in Emacs).\n\n  - In beancount.plugins.auto_accounts: It would be really nice to constraint\n    which types accounts can be auto-created, for example, don't auto-create\n    Assets/Income accounts. This would be helpful in trip files.\n\n  - Idea! Add original conversion rate on an augmenting leg with cost basis, in\n    order to be able to partition profits due to appreciate vs. currency drift.\n    See https://groups.google.com/d/msgid/beancount/939fe47e-382a-4272-94e6-dd29f660d519%40googlegroups.com?utm_medium=email&utm_source=footer\n\n    \"This brings up an interesting point, one which I had never given much\n    though before: if we wanted to solve this problem - and I think it may be\n    worthwhile to do so - couldn't we just (optionally) store the original\n    exchange rate at the time the lot was converted, with the lot (i.e.,\n    Position object) itself? That is, each lot would store:\n    - units (amount, currency)\n    - cost (amount, currency, acquistion-date, label, rate*)\n    (*) This being the new bit.\n\n    Given those rates, we should be able to compute the current value of the\n    cost basis in the local currency, and that against how much it cost us\n    originally, should tell us the proportion of gain/loss due solely to\n    currency appreciation/depreciation (ignore the effect relative interest\n    differences between the two currencies).\"\n\n  - Three interesting ideas for extending booking further here:\n    https://groups.google.com/d/msgid/beancount/9c9dcc5f-72bf-44b2-aaf9-4e0c07cbff77%40googlegroups.com?utm_medium=email&utm_source=footer\n\n    1. When you apply the partial booking specification, it could be applied\n       against the booked legs of the transaction in order to select cost bases.\n       I'm not sure if this generalizes.\n\n        \"Finally, the partial specification, say, just specifying the date, is\n         used to narrow down the lot against the list of possible lots in the\n         Inventory of the account before applying the transaction, but NOT against\n         the list of other postings. That would be an interesting power to add to\n         the booking system, as it could disambiguate this case.\"\n\n    2. One could assume a single currency group in each transaction when there's\n       at least one posting at cost.\n\n    3. One could also assume that in that account a commodity is never priced in\n       terms of two different currencies.\n\n  - Allow plugins to run before and after booking; this would make it possible\n    for plugins to run on CostSpec and fill in more information. In fact, maybe\n    the booking process itself could be moved to a plugin. This coudl be a\n    powerful idea, in that it would clarify the distinction between the two\n    streams of transactions.\n\n  - Add support for this data source: https://www.alphavantage.co/documentation/\n\n\n  - Sometimes it might be useful to end the stream of useful transactions at a\n    particular point in the input file. Normally this is best done by filtering\n    in the queries themselves, but there are times where having an End\n    directives specified temporarily in the input file would have been useful\n    (e.g. when traveling and running temporary balances while editing the input\n    file). Consider adding this facility, it might be a convenience, especially\n    to get around some of the absence of time issues.\n\n  - In the new SQL shell, allow the plugins to define new subsets of postings\n    (transactions), so that they can be queries separately. For instance, when\n    I'm traveling, it should be possible to query the set of transactions before\n    or after the split_expenses plugin ran. This would actually have been useful\n    while traveling, because the split_expenses plugin doubles up a lot of the\n    postings (that's what it does...).\n\n  - Document the \"{ <num> # <num> <ccy> }\" syntax properly, in a dedicated place.\n\n  - New currency sources:\n    https://www.ecb.europa.eu/stats/policy_and_exchange_rates/euro_reference_exchange_rates/html/index.en.html\n    https://news.ycombinator.com/item?id=15616880\n\n  - Idea: Add \"contra\" as a new column, when the sign posted in the wrong\n    direction based on the account type. Or add a boolean \"contra\" virtual\n    column (or function, from account name).\n\n  - Here's another way to implement an intra-day balance: define a new balance\n    directive type, whose semantic is tp sort all the entries, but the entries\n    on the same day of the balance are sorted in file order. I think this would\n    handle the most common use case. Try it (experiment).\n\n  - It might be interesting to support some sort of transfer syntax that would\n    allow the movement of Position's across accounts, without converting to the\n    cost, something like this:\n\n      2000-01-01 * \"Transfer shares from BrokerOne to BrokerTwo to sell at BrokerTwo\"\n        Assets:BrokerOne     -10 HOOL {}\n        Assets:BrokerTwo\n\n    While this example is simple enough, a fully general version of this might\n    not be, but it's worth prototyping. This would require some sort of new\n    syntax for these \"transfers.\"\n\n  - Rationalize the strategy for reporting errors.\n\n  - Rendering idea: If a posting moved the balance in the unusual direction\n    (positive for Income, negative for Expenses), it could be rendered with a\n    highlight or a different color. These are rare and unusualy. One could also\n    do the same for Assets (when the amount moves up) or Liabilities (when it\n    moves down).\n\n  - Create a new \"AssertQuery\" directive to assert that the result of a\n    particular query produces a particular Inventory. For example, you could\n    check your total contributions to an account over a period of time like\n    this:\n\n       2018-03-11 assert_query \"\n         select sum(position)\n         where year = 2018\n           and account ~ 'Assets:US:Vanguard:Retire:AfterTax:Cash'\n           and number > 0\" == 27250 USD\n\n  - In the account name completion function in Emacs, don't include the name of\n    closed accounts.\n\n  - Ingest should sort the transaction using a secondary \"txndate:\" metadata\n    field and document this somewhere.\n\n  - Idea: Upon an irrecoverable error in the postings, instead of skipping a\n    transaction, record it without any postings. This will allow \"bean-doctor\n    context\" to at least find the offending transaction.\n\n  - Idea: Limit the absolute value that can be posted to rounding accounts. The\n    limits could be automatically derived from the tolerance values.\n\n  - Integrate the docs from here: https://bitbucket.org/aumayr/beancount\n\n  - Idea to deal with #145: Add all augmenting postings, THEN book all reducing\n    ones against that.\n\n  - Full booking: We need an example of two reducing bookings competing for the\n    same lot.\n\n  - Implement IPython/Jupyter notebook support for directly viewing the results\n    of queries.\n\n  - \"bean-doctor linked\" should list the list of links that were followed. That\n    would go some of the way to explain some of the sometimes surprising\n    results.\n\n  - SQL: OpenMeta is different than Meta; it returns a dict. That's bad. Provide\n    a direct lookup, like Meta.\n\n  - Complete tests for csv importer; it should be tested frantically, and a\n    decent sniffer should be implemented, specifically with credit/debit support\n    and balance vs. posting amount support, as well as detecting fees.\n\n  - Add an AVERAGE function to the SQL shell.\n    See related discussion, I would like to compute this for myself too:\n    https://groups.google.com/d/msg/ledger-cli/dWuWysV6qZU/cyYNzleTCAAJ\n\n  - There ought to be some unit tests for all the custom metadata added to\n    Posting instances. I think this is undertested at the moment.\n\n  - Implement a new plugin to convert metadata-fields to Document directives.\n\n      Scan all transactions that have the invoice-metadata field (or any other\n    suiting field-name of your choice), and create a Document directive for\n    each, with a link to the transaction it comes from.\n\n    In doing so, add support for \"fuzzy-matching\":  When only a relative\n    filename is specified in the metadata-field (and Document directive), search\n    different locations based on the Account this is on/in.\n\n    See https://github.com/aumayr/fava/issues/386#issuecomment-256895713.\n\n\n  - Core: Some problems occur (with the new method) if you mix at-cost and\n    without-cost for the same currency, like this:\n\n      2015-09-15 * \"Buy\"\n        Assets:Investments:HOOL   50.795 HOOL {14.63 USD} @ 14.63 USD\n        Assets:Investments:Cash   -743.13 USD\n        Equity:Vanguard:Rounding\n\n      2015-09-24 * \"Dividend Received\"\n        Assets:Investments:HOOL           0.252 HOOL {14.11 USD} @ 14.11 USD\n        Income:Vanguard:Retire:AfterTax:HOOL:Dividend  -3.56 USD\n        Equity:Vanguard:Rounding\n\n      2016-05-09 * \"Conversion From\"\n        Assets:Investments:HOOL      -51.047 HOOL @ 14.33 USD\n        Assets:Investments:Cash       731.50 USD\n        Income:Vanguard:Retire:AfterTax:HOOL:Pnl\n\n      2016-05-10 balance Assets:Investments:HOOL 0 HOOL\n\n      2016-05-10 * \"Buy\"\n        Assets:Investments:HOOL   292.285 HOOL {14.33 USD} @ 14.33 USD\n        Assets:Investments:Cash   -4188.44 USD\n        Equity:Vanguard:Rounding\n\n    The better way to deal with this would be not to allow it to happen. Because\n    this needs to be applied during matching, we cannot implement this in a\n    plugin, this needs to become an option (to allow it, and to make it\n    disallowed by default) in the parser itself.\n\n  - The Beancount loader cache should be automatically invalidated if the\n    revision of Beancount has been updated. This could avoid some potentially\n    confusing user interpretation of errors.\n\n  - Idea to deal with #145: Add all augmenting postings, THEN book all reducing\n    ones against that.\n\n  - Full booking: We need an example of two reducing bookings competing for the\n    same lot.\n\n  - Implement IPython/Jupyter notebook support for directly viewing the results\n    of queries.\n\n  - \"bean-doctor linked\" should list the list of links that were followed. That\n    would go some of the way to explain some of the sometimes surprising\n    results.\n\n  - SQL: OpenMeta is different than Meta; it returns a dict. That's bad. Provide\n    a direct lookup, like Meta.\n\n  - Implement beancount.plugins.auto and beancount.plugins.pedantic finally.\n\n  - You need to add options to provide the precision to use for prices,\n    otherwise something like this:\n\n      2016-07-15 * \"Resto\" \"Nice dinner near Storm Hotel\" ^b4cd7330bc3d\n        Expenses:Food:Restaurants   12500 ISK\n        Income:Martin:CreditCard  -103.18 USD @ ISK\n\n    will render as\n\n      2016-07-15 * \"Resto\" | \"Nice dinner near Storm Hotel\" ^b4cd7330bc3d\n        Expenses:Food:Restaurants:Martin       6250 ISK                ;                           6250 ISK\n        Expenses:Food:Restaurants:Caroline     6250 ISK                ;                           6250 ISK\n        Income:Martin:CreditCard            -103.18 USD @ 121 ISK      ; -12499.99999999999999999999999 ISK\n\n    instead of\n\n      2016-07-15 * \"Resto\" | \"Nice dinner near Storm Hotel\" ^b4cd7330bc3d\n        Expenses:Food:Restaurants:Martin       6250 ISK                ;                           6250 ISK\n        Expenses:Food:Restaurants:Caroline     6250 ISK                ;                           6250 ISK\n        Income:Martin:CreditCard            -103.18 USD @ 121.148 ISK  ; -12499.99999999999999999999999 ISK\n\n    Right now, the only solution is to provide at least one price with a\n    suitable precision.\n\n    Another solution, instead of letting the user select the precision, for\n    inferred prices, would be to infer maximum precision by default if a digit\n    of precision hasn't been seen yet. Round prices shouldn't imply 0 digits of\n    precision when it comes to inferred prices, for rendering.\n\n    Note that the actual numbers derived are correct, the only problem is how\n    they get rendered by default.\n\n  - Try to modify b.l._parse_recursive() to reuse the DisplayContext object\n    across all the parsed files, in order to accumulate its full state. Some\n    users (from fava, e.g. Daniel Bos, see thread on mailing-list) are defining\n    a single top-level file with only includes, and this breaks the rendering of\n    the fractional digits in the web interface in a severe way.\n\n  - Investigate using PrettyTable over my custom one. Is there any point to that?\n\n  - Put all the contents of experiments/ under their own directories and add\n    decent README files for each of these.\n\n  - Write a new plugin to spread cash transactions over multiple dates. Use a\n    template transaction in the input file as input.\n\n  - Setup continuous integration that would push build status for each commit to\n    bitbucket's build status API. Buildbot already has a plugin for this.\n\n  - In upload_assets.py, add the export date somewhere very visible.\n\n  - Convert the upload.py script to use the Sheets v4 API instead of gspread.\n\n  - Produce pivot on monthly expenses as a custom report, the need for this\n    occurs too often to wait for the SQL shell to support it.\n\n  - The Beancount presentation should include the table's implicit join,\n    graphically, and then explain select/filter/aggregate. Include a section in\n    the design doc about this, or perhaps even in its own doc.\n\n  - Add support for the ABC's for the pure interfaces, e.g.\n    beancount.prices.sources, beancount.ingest.importers, etc.\n\n  - Start accumulating test cases from real data for similarity classification,\n    and rewrite this function from scratch, it just doesn't work well at all.\n\n  - Port all my wash sales scripts to use the new booking method. This ought to\n    be working now, with the new booking method.\n\n  - Create an explicit license for my documentation, one that is compatible to\n    publishing this as a book later on.\n\n  - BUG: The \"bean-doctor context\" command does not provide any useful\n    information if there was an error on the transaction at context and its\n    postings are empty. If we're looking to get the set of lots before and\n    after, it's not obvious.\n\n  - Compute and render the difference on a sellgains error. In order to make\n    this work, you'll have to implement a difference between inventories.\n\n  - This will fail because of an unfortunate ordering in the transactions on\n    the same date:\n\n      2014-08-11 * \"Google Massage - 60 minute Table Massage\" | \"Online purchase\"\n        Assets:US:GoogleInc:Wallet              -60.00 USD\n        Assets:US:GoogleInc:Massage                         120  RUB {0.50 USD}\n\n      2014-08-11 * \"Table Massage 60 mins - GB\" ^7430817d565c\n        Assets:US:GoogleInc:Massage                                        -60 RUB {0.50 USD}\n        Expenses:Health:Healing:Massage\n\n    This is normally fixed by fudging the date on the second transaction to 8/12.\n    The thing is, we could either\n\n    * Make the check allow a temporary negative balance if on the same date, or\n    * Reorder the transactions so that the positive amounts always occur first.\n      (I'm not sure that's always possible, imaging a combo of postings that\n      requires the opposite order in order for this to work).\n\n    This problem occurs rarely, but when it does, it's annoying to deal with\n    because the error removes the transaction and it cascades to more errors.\n    Fixing this would help usability a fair amount.\n\n  - This type of interpolation with per-account currency constraints should just work:\n\n      YYYY-MM-DD open Expenses:Communications:Internet  USD\n      YYYY-MM-DD open Assets:US:Points:Verizon          VERIPTS\n\n      2017-03-12 * \"VERIZON ONETIMEPAY  VERIZON.COM         FL\" \"PHONE SRV\"\n        Liabilities:US:CreditCard  -178.37 USD\n        Expenses:Communications:Internet\n        Income:US:Rewards                -650 VERIPTS\n        Assets:US:Points:Verizon\n\n  - You should definitely do some anomaly detection on the list of prices, when\n    prices go out of whack with the rest of the time series. I had this happen\n    with a rewritten and buggy new price source. This could be done in a plugin\n    and would be useful, as invalid prices can manifest in some wildly incorrect\n    totals, and this is a common error. Easy with good payoff on correctness.\n    Make this part of the pedantic list as well.\n\n\n** Google Keep Tickets\n\n  - Unicode support: add a basic filter with 'ignore' to a temp file, before I\n    finish having a proper lexer. Kick the tires off a lexer anyhow.\n\n  - Idea: select * from transactions, but you have to find a way to\n    open/close/clear either before filtering or after.\n\n  - Print out metadata from the C-c x bean-doctor context command\n\n  - Get to a point where you can compute long term vs short term\n\n  - For testing decimal, work the renderers from a given dictionary, either\n    computed or given glabally. A maximum should be enforced too.\n\n  - Testing for rendering Needs to test with numbers under prec, over prec,\n    integers, with wild prec (enforce max).\n\n  - Add a display_precision option yo allow the user to override it.\n\n  - Add warning on repeated metadata value key\n\n  - Returns: identify entries with intflows + extflows on one transaction,\n    without assets, they should be printed out for review in dates after all\n    assets accounts are opened\n\n  - Preso: offer an estimate of data size for a ledger and show how its really\n    small.\n\n  - Finish prior to spreadsheet replicating g finance\n\n  - Add change from trailing day, week, month, helps making decision based on\n    recent trends\n\n  - Idea: introduce balance checks on preso, immediately motivates the de\n    method! Highlight errors\n\n  - If I sell my entire position of multiple lots the booking should be able to\n    infer that this is umambiguous\n\n  - Don't allow negative units by default--modify STRICT method to disallow\n    that.\n\n  - Idea: stock split could be its own directive with a corresponding stream\n    transformation, all defined in a plugin\n\n  - Idea: wash adjusents to adjutsment account and zero balance in 2015, instead\n    of washing to pnl account. Do this now.\n\n  - Beancount: Review terminology used in documents, use \"Clearing\" instead of\n    \"Transfer.\"\n\n  - Idea: report only on last posting of a transaction!\n\n  - In reading example of stock split, add one that maintains the original\n    purchase date\n\n*** Sqltool why interesting ?\n\n  - Automatic schemas\n  - Typed calculations\n  - Single line\n  - Basic operations\n  - Running commands\n\n  - Broadcast concept, for inventories\n  - Data (..., \"html\", 1), Html(...)\n  - Sources: Beancount, ledger, hledger, CSV, dbm, Xls, xml, etc.\n\n*** Taxes & Finance\n\n  - In Canada, all trading is carried out at average lot! Since when? Adjust my Beancount file.\n  - When in foreign land, how much is the base deduction (-93k?) and are you only subject to federal tax rate when you're not there?\n  - Q: Can you convert short term gains into long ones via a wash sale?\n\n** File Entries from TODO file\n*** Urgent-ish\n\n  - Unify bean-doctor linked and bean-doctor context; make it one, and C-u\n    prefix triggers links, perhaps ask for which link\n\n  - Create a demo video about ?context? and ?linked? command-line tools.\n\n  - Add a function to fetch a particular subset of tags with a regular\n    expression, e.g. FIRST_REGEXP('award'). Use this on the imported\n    stockstatement transactions. This can be used to create a column out of a\n    set of tags.\n\n*** Documentation / Process\n\n  - Complete the CA and handle all remaining pull requests and minor bugs.\n\n  - Improve the Lang Syn doc right before the Unused Pad Directives by adding an\n    intervening transaction instead of explaining how it works. It would be much\n    clearer.\n\n  - Write a doc (video)  that explains how to debug issues, context, linked, print, etc.\n\n*** Branches\n\n  - Finish work on booking branch\n\n  - SQL tool really ought to be extracted away from Beancount, extract as a\n    separate project.\n\n*** Small Tasks\n\n  - A large imbalance will appear as a RoundingError, which it shouldn?t!\n    RoundingError?s should only be inserted when a transaction balances! Run a\n    context on a non-balancing transaction and you?ll see what I mean.\n\n  - Build a script that can list all my cap. gains for tax-loss harvesting.\n\n  - Modify networth script to list post-tax worth, basis + pre-tax value =\n    post-tax value, segment based on accounts.\n\n  - Finish that Health Care tracking document.\n\n  - Move over the updating process to Google Spreadsheets solution.\n\n  - Remove all double descriptions in importers in ledgerhub (when payee ==\n    narration).\n\n  - beancount-linked is broken, missing line number, and an exception is raised:\n    bean-doctor linked blais.beancount 57660; fix this now, rename as\n    beancount-context-linked and add a better binding. Use this a lot more.\n\n  - Booking: generate all combinations for just currencies, missing or not, in\n    order to complete categorize implementation; (1) apply cost-currency =\n    price-currency constraint, (2) infer currency from other legs, (3) infer\n    currency from inventory.\n\n  - Define a way to specify output format for rendering many queries, and\n    perhaps that should include a Google doc directly that makes an upload, even\n    if that has to call out to a Python2 subprocess (that?s fine). Use that\n    everywhere.\n\n  - Add ?display_tolerances? rendering override to fix bug with rendering HKD in\n    trips, should be mirroring tolerances input syntax. Bug with Beancount:\n    journal ?Assets:Caroline:Octopus? does not render with correct precision.\n\n  - Remove unused auto-postings, they distract from the reporting.\n\n  - Deal with flattening now (default should be never to flatten, never render\n    empty fields on a continuation line for an inventory) and THEN implement CSV\n    rendering.\n\n  - Implement implicit GROUP-BY now.\n\n  - Move ?bean-doctor missing-open? to ?bean-reports missing-open?, this really\n    is a report type.\n\n  - Merge 3 newer monnier beancount.el patches.\n\n  - Bug: an unbalanced tag should output a correct line number in the error.\n    Right now mistaking push/pop as push/push outputs an error with a zero line\n    number, not useful. Need this. Fix this.\n\n  - Complete ultipro tables from PDF parser.\n\n  - payees: train a little model on my payee names to convert them to nice,\n    clean payee names. Extract the data now.\n\n  - returns2: Returns revamp + web reports.\n\n  - booking: Implement booking proposal.\n\n  - export: Export to spreadsheets.\n\n  - Document arithmetic operations support\n\n  - Export to Google Spreadsheets: Complete and document how to upload to a Trix\n\n  - Doc on exportpf\n\n  - Conversions: Document how open close clear works. This is really important.\n    Use as an important the desire to pre-enter transactions from the future\n    (e.g., Jon Stahl?s vesting events).\n\n  - Write Intro with an explanation of open/close/clear.\n\n  - Finish parser cleanup for Unicode.\n\n  - Store residual in metadata, print it out in context\n\n  - ?Transaction does not balance? message should include the tolerance value\n    allowed.\n\n  - Complete ?legacy? doc generation (merge assets.asc into that doc, we\n    shouldn?t need assets.asc once that?s done, and schematize its contents) And\n    start using this.\n\n  - Plugins doc: Add documentation for sellgains plugin in the rest of the docs\n    (and of all other plugins).\n\n  - Add a section about Options in the Trading document, with these contents.\n\n  - Implement year close via command-line.\n\n  - Convert dividends to per-stock returns.\n\n  - Wrap up docs? Use the framedocs script?\n\n  - This should be the goto/ project, it should be able to do that.\n\n  - Definitely make a teaching video? this will be useful for applications to\n    other things!\n\n  - Write a doc specifically on handling the vesting of shares, including the\n    tracking of unvested shares.\n\n  - Write doc on booking taxes NOW.\n\n  - Complete unfinished doc on health care.\n\n  - Convert blais.portfolio to a number of SQL scripts.\n\n  - Why doesn?t ^c2fbec103d99 generate an error?!?\n    Ha! It?s because it?s NOT a mixed result? only negatives. Maybe allow only\n    positive totals with a different mode, somehow. A constraint on\n    dictionaries, another booking method. Maybe that should be the default:\n    don?t allow negatives at all.\n\n*** Accounting\n\n  - Measure time taken to find and process documents in ingest and only cache it\n    if very long.\n\n  - Document the idea of implementing a virtual SQLite table for Beancount\n\n  - Plan is to support smart sniffers\n\n  - Convert to schema automatically\n\n  - Load them into SQLite tables, or make sources as adapters to virtual tables\n\n  - Add a first step that?s a conversion\n\n*** SQLite\n\n  - Q. Can we invoke arbitrary Python functions from SQLite?\n\n  - Look at termsql & sqlparse\n\n*** Idea for talk\n\n  - Start with a description of all the desired processes and their outputs\n\n  - Then put down the realization: (work to do all of these separately) >>>\n    (work to represent all inputs)\n\n  - Black box in the middle of >>>, *THAT*?s what Beancount does\n\n*** Contributor agreement\n\n  - Add this to Beancount contributor agreement notes: CLA:\n    https://cla.developers.google.com/about/google-corporate\n\n*** Idea\n\n  - Implement a feature that generates a closing + opening transaction to be\n    able to split one?s file to multiple files. This should include the currency\n    conversions as well.\n\n  - Create a script that splits up a file at a particular date and output two\n    files! You should be able to split by date interval, and by tag (to extract\n    all the transactions with a particular tag to a separate file).\n\n  - Provide a plugin that summarizes all the balances from transactions marked\n    with a particular tag, and replaces those with a single transaction. If all\n    the balances are zero, don?t output anything. This could be used to remove\n    the opening + closing transactions when including multiple files!\n\n*** Annuities\n\n  - Annuities w/ numpy\n** Starred Email - TODO\n\n  - Omitting all currencies in a transaction does not raise an error.\n    https://bitbucket.org/blais/beancount/issues/125/omitting-all-currencies-in-a-transaction\n\n  - Option to disable pickle cache\n    https://bitbucket.org/blais/beancount/issues/123/option-to-disable-pickle-cache\n\n  - pickle cache prevents document folder from being scanned\n    https://bitbucket.org/blais/beancount/issues/122/pickle-cache-prevents-document-folder-from\n\n  - If beancount file is encrypted relative document paths behave differently\n    https://bitbucket.org/blais/beancount/issues/119/if-beancount-file-is-encrypted-relative\n\n  - Create a balance_end directive\n    https://bitbucket.org/blais/beancount/issues/118/create-a-balance_end-directive\n    https://groups.google.com/d/msgid/beancount/CALkVjQbGAgJiGFb0aT9rUUYtiWOYOWvJGUgKqgGsuSE7%3DrodCQ%40mail.gmail.com?utm_medium=email&utm_source=footer\n\n  - Allow arithmetic operations on dates\n    https://bitbucket.org/blais/beancount/issues/115/allow-arithmetic-operations-on-dates\n\n  - Missing account from bean-report balances\n    https://bitbucket.org/blais/beancount/issues/116/missing-account-from-bean-report-balances\n\n      That's odd indeed. There's some background to this issue; some facts: -\n      There are multiple different types of balance reports, they all use a\n      different method to determine whether an empty balance account should be\n      rendered or not - Some of the criteria include: empty account has had\n      entries posted to it during the reporting period, empty account is open,\n      empty account has children - I need to review all of those and make them\n      consistent.\n\n      I'll leave this ticket open for now and address this in time for your specific\n      case. (It's tax-time, so I have a few other features I'm focusing right now\n      which I need immediately, will work on this later.)\n\n  - Documents directive with a trailing slash fails; relative path is undocumented\n    https://bitbucket.org/blais/beancount/issues/120/documents-directive-with-a-trailing-slash\n\n  - Implement a HAVING clause\n    https://bitbucket.org/blais/beancount/issues/114/implement-having\n\n\n\n  - A lot of decimal digits if using total price\n    https://bitbucket.org/blais/beancount/issues/109/a-lot-of-decimal-digits-if-using-total\n\n      This is an interesting idea I hadn't thought about, basically for the completion\n      to round from the most precise until the tolerance fails. I like this. Will\n      definitely consider this and implement eventually.\n\n  - Review all codes that renders units, costs and prices for precision using\n    display context.\n    https://bitbucket.org/blais/beancount/issues/107/review-all-codes-that-renders-units-costs\n\n  - New issue 65: Context should render with natural precision\n    https://bitbucket.org/blais/beancount/issues/65/context-should-render-with-natural\n\n  - New issue 60: Rendering precision for reports is inconsistent.\n    https://bitbucket.org/blais/beancount/issue/60/rendering-precision-for-reports-is\n\n\n\n\n  - Make the balance sheet and income statement reports support conversion to a\n    single currency\n    https://bitbucket.org/blais/beancount/issues/103/make-the-balance-sheet-and-income\n    https://groups.google.com/d/msg/beancount/5JE9vntz54o/Xrh4w74rEQAJ\n\n  - Create a balance assertion that applies only to tagged or linked transactions.\n    https://bitbucket.org/blais/beancount/issues/102/create-a-balance-assertion-that-applies\n\n\n  - Integrate aumayr's beancount-docs into beancount/doc\n    https://bitbucket.org/blais/beancount/issues/101/integrate-aumayrs-beancount-docs-into\n\n  - New issue 100: Provide an external registration mechanism to build new\n    reports, for fava\n    https://bitbucket.org/blais/beancount/issues/100/provide-an-external-registration-mechanism\n\n  - New issue 74: Make the printer not output | separator anymore\n    https://bitbucket.org/blais/beancount/issues/74/make-the-printer-not-output-separator\n\n  - New issue 99: multi-line syntax for tags and links\n    https://bitbucket.org/blais/beancount/issues/99/multi-line-syntax-for-tags-and-links\n\n  - New issue 66: Change active years in bean-web to be calculated using the\n    correct year month boundary\n    https://bitbucket.org/blais/beancount/issues/66/change-active-years-in-bean-web-to-be\n\n  - New issue 61: Implement pivot table tool & make sure it works to produce monthly\n    aggregations\n    https://bitbucket.org/blais/beancount/issue/61/implement-pivot-table-tool-make-sure-it\n\n\n  - Integrate Jon Stahl's doc contribution into the main doc about vesting; from here:\n    https://docs.google.com/document/d/1BnPgPGUEcCsWWadlDCvOUxVXVI1W26ysJPqL_aG-5JQ/edit\n    He added a section about options a long while ago. Review and complete this.\n\n  - New issue 55: Make it easy to filter out transactions in the future\n    https://bitbucket.org/blais/beancount/issue/55/make-it-easy-to-filter-out-transactions-in\n\n  - Provide some better built-in way to associate a particular document with a\n    transaction, see discussion here:\n    https://groups.google.com/d/msg/beancount/xGMbpfgb220/WPAjxkr8BQAJ\n\n  - Add #tag to the Pad directive and propagate the tags to the generated\n    transactions\n    https://bitbucket.org/blais/beancount/issues/70/add-tag-to-the-pad-directive-and-propagate\n\n\n\n*** Emacs Support\n\n  - Continue patching beancount.el from Stefan's submitted patches:\n    https://mail.google.com/mail/u/0/#inbox/14fdc82a04d90565\n\n  - Try it outline-minor-mode to see if I could make Beancount be a major mode\n    instead of a minor mode.\n    https://mail.google.com/mail/u/0/#inbox/149d363077404909\n\n      From Stefan: \"Hmm... so basically as a glorified outline-minor-mode.\n      Could you try out outline-minor-mode and tell me what irks you most?\"\n\n  - Look into TAB problem:\n    https://mail.google.com/mail/u/0/#inbox/14fdc82a04d90565\n\n      \"Ben, en fait j'attendais de r?soudre le probl?me du TAB, et pour ?a j'ai\n      besoin d'un \"recipe\" vu que ce que j'ai essay? fonctionne.\"\n\n  - Make it possible to bean-doctor context on a specific link or tag\n    (thing-at-point).\n\n  - Fix amounts alignment function, it always seems to pick up stuff from the\n    narration. Make it a fixed column!\n\n** Open Tickets - TODO\n\n  - Issue #130: Padding involving the same account doesn't work incrementally (blais/beancount)\n\n  - Issue #131: Aggregate the state of DisplayContext across all parsed files.\n\n  - Issue #128: bean-report holdings market value incorrect if no price given\n    initially (blais/beancount)\n\n** TaxMin Reporting\n\n  - Read about TaxMin loss harvesting and see if I couldn't implement a similar\n    thing in Beancount:\n\n      \"Thank you for taking the time to write in and follow up. At this time, there is\n      no way to view the full cost basis of all of your holdings at once at\n      Betterment.\n\n      Betterment uses a unique algorithm to optimize the tax-efficiency when selling\n      shares. You can learn more about our cost basis method for sales here:\n      https://www.betterment.com/resources/investment-strategy/taxes/lowering-your-tax-bill-by-improving-our-cost-basis-accounting-methods/\n\n      The same data available on our PDF statements is available for download in CSV\n      format. At this time, there is no way to provide more digits of precision in\n      that PDF report. If you do transfer funds out of Betterment into another\n      brokerage service, your cost basis information will be provided in full to your\n      new financial institution upon completion of your transfer.\"\n\n      --\n\n      \"Thank you for writing in about tax loss harvesting. To avoid wash sales,\n      Betterment uses a proprietary Parallel Position Management system that utilizes\n      secondary securities as a safe harbor to minimize wash sales. Sales will also be\n      delayed if recent deposits are made until they are clear of the 30 day wash sale\n      window.\n\n      You can find much more information in both our White Paper (see ?Parallel\n      Position Management?) and FAQ below:\n\n      TLH White Paper:\n      https://www.betterment.com/resources/tax-loss-harvesting-white-paper/\n      TLH FAQ:\n      http://support.betterment.com/customer/portal/topics/670337-tax-loss-harvesting\n\n      In general, you?ll want to avoid investing in any passive ETFs or mutual funds\n      that track the same index as the funds in our portfolios. You can check the\n      indexes of our investments here.\n\n      TLH+ will automatically manage your purchases when they are made inside your\n      Betterment taxable account, as well as your Betterment IRA.\n\n      Target date funds, actively managed funds and individual stocks are generally\n      not problematic to use alongside our TLH+ algorithm. To read more about using\n      TLH+ with external accounts, please see our guide here.\n\n      Thank you for the feedback regarding exporting data to CSV format, your friend\n      is correct. My apologies for the earlier miscommunication; I?ll certainly pass\n      your suggestion to our product team.\n\n      Please let us know if you have any additional questions or if we can be of any\n      further assistance. Thank you for being a Betterment customer, have a wonderful\n      day.\"\n\n** Adding Types\n\n  Comments from YYing re. adding types:\n  https://bitbucket.org/blais/beancount/issues/140/add-type-annotation-to-beancount-codebase\n\n  - Some bad design choice is more obvious when adding type annotation. E.g.\n    https://github.com/yegle/beancount-type-stubs/blob/master/beancount/core/data.pyi#L67\n    the tags field of Transcation type is an Optional[Set[str]]. I think it should\n    be a Set[str] since an empty set should be sufficient to express \"there's no\n    tags for this transaction\". I'm not sure if there's any difference in turns of\n    performance\n\n  - mypy has very limited ability to infer function return types. E.g. functions\n    like is_balance_sheet_account in beancount/core/account_types.py, which\n    returns foo in bar, mypy is unable to infer that the return type is a bool.\n    I think pytype from Google have better type inference but it's written in\n    Python2 and I haven't figure out how to run it against python3 code.\n\n** V3-Specific\n\n- Build RE/flex with Boost or PCRE2 with JIT-optimized regexps; see how much of\n  a difference it makes; right now it's using the default, which is claimed to\n  be faster.\n"
        },
        {
          "name": "beancount",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "experiments",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 5.6884765625,
          "content": "<?xml version=\"1.0\" encoding=\"iso-8859-1\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />\n<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n<title>beancount: Double-Entry Accounting from Text Files</title>\n<link rel=\"stylesheet\" href=\"style.css\" type=\"text/css\" />\n</head>\n<body>\n\n<div id=\"project-header\">\n  <a href=\"http://furius.ca/\"><img src=\"http://furius.ca/home/furius-logo-w.png\" id=\"logo\"></a>\n  <div id=\"project-home\"><a href=\"/home/index.html\">Project Home</a></div>\n</div>\n\n<div class=\"document\" id=\"beancount-double-entry-accounting-from-text-files\">\n<h1 class=\"title\">beancount: Double-Entry Accounting from Text Files</h1>\n\n<div class=\"contents topic\" id=\"contents\">\n<p class=\"topic-title\">Contents</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"#description\" id=\"id2\">Description</a></li>\n<li><a class=\"reference internal\" href=\"#documentation\" id=\"id3\">Documentation</a></li>\n<li><a class=\"reference internal\" href=\"#download-installation\" id=\"id4\">Download &amp; Installation</a></li>\n<li><a class=\"reference internal\" href=\"#versions\" id=\"id5\">Versions</a></li>\n<li><a class=\"reference internal\" href=\"#filing-bugs\" id=\"id6\">Filing Bugs</a></li>\n<li><a class=\"reference internal\" href=\"#copyright-and-license\" id=\"id7\">Copyright and License</a></li>\n<li><a class=\"reference internal\" href=\"#author\" id=\"id8\">Author</a></li>\n</ul>\n</div>\n<!-- 1  Description\n2  Documentation\n3  Download & Installation\n4  Filing Bugs\n5  Copyright and License\n6  Author -->\n<div class=\"section\" id=\"description\">\n<h1><a class=\"toc-backref\" href=\"#id2\">Description</a></h1>\n<p>A double-entry bookkeeping computer language that lets you define financial\ntransaction records in a text file, read them in memory, generate a variety of\nreports from them, and provides a web interface.</p>\n</div>\n<div class=\"section\" id=\"documentation\">\n<h1><a class=\"toc-backref\" href=\"#id3\">Documentation</a></h1>\n<p>Documentation can be read at:</p>\n<blockquote>\n<a class=\"reference external\" href=\"https://beancount.github.io/docs/\">https://beancount.github.io/docs/</a></blockquote>\n<p>Documentation authoring happens on Google Docs, where you can contribute by\nrequesting access or commenting on individual documents. An index of all source\ndocuments is available here:</p>\n<blockquote>\n<a class=\"reference external\" href=\"http://furius.ca/beancount/doc/index\">http://furius.ca/beancount/doc/index</a></blockquote>\n<p>There's a <a class=\"reference external\" href=\"https://groups.google.com/forum/#!forum/beancount\">mailing-list dedicated to Beancount</a>, please post questions\nthere, so others can share in the responses. More general discussions about\ncommand-line accounting also occur on the <a class=\"reference external\" href=\"https://groups.google.com/forum/#!forum/ledger-cli\">Ledger mailing-list</a> so you might be\ninterested in that group as well.</p>\n</div>\n<div class=\"section\" id=\"download-installation\">\n<h1><a class=\"toc-backref\" href=\"#id4\">Download &amp; Installation</a></h1>\n<p>You can obtain the source code from the official Git repository on Github:</p>\n<blockquote>\n<div class=\"line-block\">\n<div class=\"line\"><a class=\"reference external\" href=\"https://github.com/beancount/beancount/\">https://github.com/beancount/beancount/</a></div>\n</div>\n</blockquote>\n<p>See the <a class=\"reference external\" href=\"http://furius.ca/beancount/doc/install\">Installing Beancount</a> document for more details.</p>\n</div>\n<div class=\"section\" id=\"versions\">\n<h1><a class=\"toc-backref\" href=\"#id5\">Versions</a></h1>\n<p>There are three versions</p>\n<ul class=\"simple\">\n<li><strong>Version 3</strong> (<a class=\"reference external\" href=\"http://github.com/beancount/beancount/tree/master\">branch master</a>): The in-development\nnext version of Beancount since June 2020. This is unstable and you want to\nuse version 2 below. The scope of changes is described in <a class=\"reference external\" href=\"https://docs.google.com/document/d/1qPdNXaz5zuDQ8M9uoZFyyFis7hA0G55BEfhWhrVBsfc/\">this document</a>.</li>\n<li><strong>Version 2</strong> (<a class=\"reference external\" href=\"http://github.com/beancount/beancount/tree/v2\">branch v2</a>):\nThe current stable version of Beancount, in maintenance mode as of July 2020.\nThis was a complete rewrite of the first version, which introduced a number of\nconstraints and a new grammar and much more. Use this now.</li>\n<li><strong>Version 1</strong> (<a class=\"reference external\" href=\"http://github.com/beancount/beancount/tree/v1\">branch v1</a>):\nThe original version of Beancount. Development on this version halted in 2013.\nThis initial version was intended to be similar to and partially compatible\nwith Ledger. Do not use this.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"filing-bugs\">\n<h1><a class=\"toc-backref\" href=\"#id6\">Filing Bugs</a></h1>\n<p>Tickets can be filed at on the Github project page:</p>\n<blockquote>\n<a class=\"reference external\" href=\"https://github.com/beancount/beancount/issues\">https://github.com/beancount/beancount/issues</a></blockquote>\n</div>\n<div class=\"section\" id=\"copyright-and-license\">\n<h1><a class=\"toc-backref\" href=\"#id7\">Copyright and License</a></h1>\n<p>Copyright (C) 2007-2020  Martin Blais.  All Rights Reserved.</p>\n<p>This code is distributed under the terms of the &quot;GNU GPLv2 only&quot;.\nSee COPYING file for details.</p>\n</div>\n<div class=\"section\" id=\"author\">\n<h1><a class=\"toc-backref\" href=\"#id8\">Author</a></h1>\n<p>Martin Blais &lt;<a class=\"reference external\" href=\"mailto:blais&#64;furius.ca\">blais&#64;furius.ca</a>&gt;</p>\n</div>\n</div>\n</body>\n</html>\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 8.5908203125,
          "content": "project('beancount', 'c', version: files('beancount/VERSION'), meson_version: '>=1.1')\n\nbison = find_program('bison', 'win_bison', version: '>=3.8.0')\nflex = find_program('flex', 'win_flex', version: '>=2.6.4')\n\npy = import('python').find_installation(pure: false)\n\npy.install_sources(\n    '''\n    beancount/__init__.py\n    beancount/VERSION\n    beancount/py.typed\n    beancount/api.py\n    beancount/core/__init__.py\n    beancount/core/account.py\n    beancount/core/account_types.py\n    beancount/core/amount.py\n    beancount/core/compare.py\n    beancount/core/convert.py\n    beancount/core/data.py\n    beancount/core/display_context.py\n    beancount/core/distribution.py\n    beancount/core/flags.py\n    beancount/core/getters.py\n    beancount/core/interpolate.py\n    beancount/core/inventory.py\n    beancount/core/number.py\n    beancount/core/position.py\n    beancount/core/prices.py\n    beancount/core/realization.py\n    beancount/loader.py\n    beancount/ops/__init__.py\n    beancount/ops/balance.py\n    beancount/ops/basicops.py\n    beancount/ops/compress.py\n    beancount/ops/documents.py\n    beancount/ops/find_prices.py\n    beancount/ops/lifetimes.py\n    beancount/ops/pad.py\n    beancount/ops/summarize.py\n    beancount/ops/validation.py\n    beancount/parser/__init__.py\n    beancount/parser/booking.py\n    beancount/parser/booking_full.py\n    beancount/parser/booking_method.py\n    beancount/parser/cmptest.py\n    beancount/parser/context.py\n    beancount/parser/grammar.py\n    beancount/parser/hashsrc.py\n    beancount/parser/lexer.py\n    beancount/parser/options.py\n    beancount/parser/parser.py\n    beancount/parser/printer.py\n    beancount/parser/version.py\n    beancount/plugins/__init__.py\n    beancount/plugins/auto.py\n    beancount/plugins/auto_accounts.py\n    beancount/plugins/check_average_cost.py\n    beancount/plugins/check_closing.py\n    beancount/plugins/check_commodity.py\n    beancount/plugins/check_drained.py\n    beancount/plugins/close_tree.py\n    beancount/plugins/coherent_cost.py\n    beancount/plugins/commodity_attr.py\n    beancount/plugins/currency_accounts.py\n    beancount/plugins/implicit_prices.py\n    beancount/plugins/leafonly.py\n    beancount/plugins/noduplicates.py\n    beancount/plugins/nounused.py\n    beancount/plugins/onecommodity.py\n    beancount/plugins/pedantic.py\n    beancount/plugins/sellgains.py\n    beancount/plugins/unique_prices.py\n    beancount/projects/__init__.py\n    beancount/projects/export.py\n    beancount/scripts/__init__.py\n    beancount/scripts/check.py\n    beancount/scripts/deps.py\n    beancount/scripts/directories.py\n    beancount/scripts/doctor.py\n    beancount/scripts/example.py\n    beancount/scripts/format.py\n    beancount/tools/__init__.py\n    beancount/tools/treeify.py\n    beancount/utils/__init__.py\n    beancount/utils/bisect_key.py\n    beancount/utils/defdict.py\n    beancount/utils/encryption.py\n    beancount/utils/file_utils.py\n    beancount/utils/import_utils.py\n    beancount/utils/invariants.py\n    beancount/utils/memo.py\n    beancount/utils/misc_utils.py\n    beancount/utils/pager.py\n    beancount/utils/table.py\n    beancount/utils/test_utils.py\n    '''.split(),\n    preserve_path: true,\n)\n\n# these are needed only to be able to run hashsrc.py at run time\npy.install_sources(\n    '''\n    beancount/parser/lexer.l\n    beancount/parser/grammar.y\n    beancount/parser/decimal.h\n    beancount/parser/decimal.c\n    beancount/parser/macros.h\n    beancount/parser/parser.h\n    beancount/parser/parser.c\n    beancount/parser/tokens.h\n    '''.split(),\n    preserve_path: true,\n)\n\n# tests\npy.install_sources('''\n    beancount/core/account_test.py\n    beancount/core/account_types_test.py\n    beancount/core/amount_test.py\n    beancount/core/compare_test.py\n    beancount/core/convert_test.py\n    beancount/core/data_test.py\n    beancount/core/display_context_test.py\n    beancount/core/distribution_test.py\n    beancount/core/flags_test.py\n    beancount/core/getters_test.py\n    beancount/core/interpolate_test.py\n    beancount/core/inventory_test.py\n    beancount/core/number_test.py\n    beancount/core/position_test.py\n    beancount/core/prices_test.py\n    beancount/core/realization_test.py\n    beancount/loader_test.py\n    beancount/ops/balance_test.py\n    beancount/ops/basicops_test.py\n    beancount/ops/compress_test.py\n    beancount/ops/documents_test.py\n    beancount/ops/find_prices_test.py\n    beancount/ops/lifetimes_test.py\n    beancount/ops/pad_test.py\n    beancount/ops/summarize_test.py\n    beancount/ops/validation_test.py\n    beancount/parser/booking_full_test.py\n    beancount/parser/booking_method_test.py\n    beancount/parser/booking_test.py\n    beancount/parser/cmptest_test.py\n    beancount/parser/context_test.py\n    beancount/parser/grammar_test.py\n    beancount/parser/hashsrc_test.py\n    beancount/parser/lexer_test.py\n    beancount/parser/options_test.py\n    beancount/parser/parser_test.py\n    beancount/parser/printer_test.py\n    beancount/parser/version_test.py\n    beancount/plugins/auto_accounts_test.py\n    beancount/plugins/auto_test.py\n    beancount/plugins/check_average_cost_test.py\n    beancount/plugins/check_closing_test.py\n    beancount/plugins/check_commodity_test.py\n    beancount/plugins/check_drained_test.py\n    beancount/plugins/close_tree_test.py\n    beancount/plugins/coherent_cost_test.py\n    beancount/plugins/commodity_attr_test.py\n    beancount/plugins/currency_accounts_test.py\n    beancount/plugins/implicit_prices_test.py\n    beancount/plugins/leafonly_test.py\n    beancount/plugins/noduplicates_test.py\n    beancount/plugins/nounused_test.py\n    beancount/plugins/onecommodity_test.py\n    beancount/plugins/pedantic_test.py\n    beancount/plugins/sellgains_test.py\n    beancount/plugins/unique_prices_test.py\n    beancount/projects/export_test.py\n    beancount/scripts/check_examples_test.py\n    beancount/scripts/check_test.py\n    beancount/scripts/deps_test.py\n    beancount/scripts/directories_test.py\n    beancount/scripts/doctor_test.py\n    beancount/scripts/example_test.py\n    beancount/scripts/format_test.py\n    beancount/tools/treeify_test.py\n    beancount/utils/bisect_key_test.py\n    beancount/utils/defdict_test.py\n    beancount/utils/encryption_test.py\n    beancount/utils/file_utils_test.py\n    beancount/utils/import_utils_test.py\n    beancount/utils/invariants_test.py\n    beancount/utils/memo_test.py\n    beancount/utils/misc_utils_test.py\n    beancount/utils/pager_test.py\n    beancount/utils/table_test.py\n    beancount/utils/test_utils_test.py\n    '''.split(),\n    preserve_path: true,\n)\n\nparser_source_hash = run_command(\n    [py, '-c', 'from hashsrc import hash_parser_source_files; print(hash_parser_source_files())'],\n    env: {'PYTHONPATH': '@0@/beancount/parser/'.format(meson.current_source_dir())},\n    capture: true,\n    check: true,\n).stdout().strip()\n\nadd_project_arguments(\n    '-DPARSER_SOURCE_HASH=@0@'.format(parser_source_hash),\n    '-DBEANCOUNT_VERSION=@0@'.format(meson.project_version()),\n    language: 'c',\n)\n\nif host_machine.system() == 'windows'\n    add_project_arguments('-DYY_NO_UNISTD_H', language: 'c')\nendif\n\nflex_gen = generator(\n    flex,\n    output: ['@BASENAME@.c', '@BASENAME@.h'],\n    arguments: ['--outfile=@OUTPUT0@', '--header-file=@OUTPUT1@', '@INPUT@']\n)\n\nlexer_c = flex_gen.process(\n    'beancount/parser/lexer.l',\n    preserve_path_from: meson.current_source_dir(),\n)\n\nbison_gen = generator(\n    bison,\n    output: ['@BASENAME@.c', '@BASENAME@.h'],\n    arguments: ['--report=itemset', '--verbose', '-Wall', '-Werror', '-o', '@OUTPUT0@', '@INPUT@']\n)\n\ngrammar_c = bison_gen.process(\n    'beancount/parser/grammar.y',\n    preserve_path_from: meson.current_source_dir(),\n)\n\nparser = py.extension_module(\n    '_parser',\n    'beancount/parser/decimal.c',\n    'beancount/parser/parser.c',\n    'beancount/parser/tokens.c',\n    lexer_c,\n    grammar_c,\n    install: true,\n    subdir: 'beancount/parser',\n)\n\n# Support prehistoric development practices: use ``meson setup build;\n# ninja -C build build_ext`` to obtain the equivalent of ``python\n# setup.by build_ext --inplace``.\ncustom_target(\n    'extension module in-place',\n    input: parser,\n    output: 'build_ext',\n    command: [\n        py,\n        '-c',\n        'import shutil, sys; shutil.copy(sys.argv[1], sys.argv[2])',\n        '@INPUT@',\n        meson.project_source_root() / 'beancount/parser/',\n    ],\n    build_by_default: false,\n)\n\nif get_option('tests').enabled()\n    cc = meson.get_compiler('c')\n    libm = cc.find_library('m', required: false)\n    tokens_test = executable(\n        'tokens-test',\n        'beancount/parser/decimal.c',\n        'beancount/parser/tokens.c',\n        'beancount/parser/tokens_test.c',\n        dependencies: [libm, py.dependency(embed: true)],\n        install: false,\n    )\n    test('tokens', tokens_test)\nendif\n"
        },
        {
          "name": "meson.options",
          "type": "blob",
          "size": 0.05078125,
          "content": "option('tests', type: 'feature', value: 'disabled')\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.123046875,
          "content": "[build-system]\nbuild-backend = \"mesonpy\"\nrequires = [\n    \"meson-python >= 0.14.0\",\n    \"meson >= 1.2.1\",\n]\n\n[project]\nname = \"beancount\"\ndescription = \"Command-line Double-Entry Accounting\"\nreadme = { content-type = \"text/x-rst\", text = \"\"\"\nA double-entry accounting system that uses text files as input.\n\nBeancount defines a simple data format or \"language\" that lets you\ndefine financial transaction records in a text file, load them in\nmemory and generate and export a variety of reports, such as balance\nsheets or income statements. It also provides a client with an\nSQL-like query language to filter and aggregate financial data, and a\nweb interface which renders those reports to HTML. Finally, it\nprovides the scaffolding required to automate the conversion of\nexternal data into one's input file in Beancount syntax.\"\"\" }\nauthors = [\n    { name = \"Martin Blais\", email = \"blais@furius.ca\" },\n]\nlicense = { text = \"GPL-2.0-only\" }\nrequires-python = \">=3.9\"\ndependencies = [\n    \"click >=7.0\",\n    \"python-dateutil >=2.6.0\",\n    \"regex >=2022.9.13\",\n]\ndynamic = [\"version\"]\n\n[project.optional-dependencies]\ntypes = [\n    \"mypy==1.4.0\",\n    \"types-regex\",\n]\n\n[project.scripts]\nbean-check = \"beancount.scripts.check:main\"\nbean-doctor = \"beancount.scripts.doctor:main\"\nbean-example = \"beancount.scripts.example:main\"\nbean-format = \"beancount.scripts.format:main\"\ntreeify = \"beancount.tools.treeify:main\"\n\n[project.urls]\nhomepage = \"https://beancount.github.io/\"\ndocumentation = \"https://beancount.github.io/docs/\"\nrepository = \"https://github.com/beancount/beancount\"\n\n[tool.mypy]\nmypy_path = '$MYPY_CONFIG_FILE_DIR'\nexclude = [\"tools\", \"experiments\", \".venv\", \"build\", \"__pycache__\"]\ncheck_untyped_defs = false\npython_version = '3.9'\ncache_dir = \".venv/.mypy_cache\"\n\n[[tool.mypy.overrides]]\nmodule = \"beancount.projects.*\"\nignore_errors = true\n\n[[tool.mypy.overrides]]\nmodule = \"beancount.scripts.*\"\nignore_errors = true\n\n[tool.black]\nline-length = 92\n# Please note: We use 'ruff format' to autoformat buffers.\n# See 'rust-format.el' and .dir-locals.el at the root of the project.\n\n[tool.ruff]\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".hg\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"venv\",\n]\n\n# Same as Black.\nline-length = 92\n\n[tool.ruff.lint]\n# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.\nselect = [\"E\", \"F\", \"PL\", \"PD\", \"I\", \"TC\", \"RUF022\", 'ISC001', 'UP034']\nignore = [\n    'E501',\n    'E731',\n    'E741',\n    'PD011',\n    'PLR0912',\n    'PLR0913',\n    'PLR0915',\n    'PLR2004',\n    'PLR5501',\n    'PLW0603',\n    'PLW2901',\n]\n\n# Allow autofix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\nper-file-ignores = { }\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[tool.ruff.lint.isort]\nforce-single-line = true\n\n[tool.ruff.lint.mccabe]\n\n# Unlike Flake8, default to a complexity level of 10.\nmax-complexity = 10\n"
        },
        {
          "name": "style.css",
          "type": "blob",
          "size": 0.173828125,
          "content": "@import url(\"/docutils-style.css\");\n@import url(\"/project.css\");\n\ndiv#project-header {\n  background-image: url(\"etc/header-universal-dollar.jpg\");\n  background-color: #989898;\n}\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}