{
  "metadata": {
    "timestamp": 1736559833657,
    "page": 575,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebookresearch/VideoPose3D",
      "stars": 3765,
      "defaultBranch": "main",
      "files": [
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.2412109375,
          "content": "# Code of Conduct\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please [read the full text](https://code.facebook.com/codeofconduct) so that you can understand what actions will and will not be tolerated."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1064453125,
          "content": "# Contributing\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\n## Coding Style\nWe follow the [PEP 8](https://www.python.org/dev/peps/pep-0008/) style guidelines.\n\n## License\nBy contributing to this project, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree."
        },
        {
          "name": "DATASETS.md",
          "type": "blob",
          "size": 8.953125,
          "content": "# Dataset setup\n\n## Human3.6M\nWe provide two ways to set up the Human3.6M dataset on our pipeline. You can either convert the original dataset (recommended) or use the [dataset preprocessed by Martinez et al.](https://github.com/una-dinosauria/3d-pose-baseline) (no longer available as of May 22nd, 2020). The two methods produce the same result. After this step, you should end up with two files in the `data` directory: `data_3d_h36m.npz` for the 3D poses, and `data_2d_h36m_gt.npz` for the ground-truth 2D poses.\n\n### Setup from original source (recommended)\n**Update:** we have updated the instructions to simplify the procedure. MATLAB is no longer required for this step.\n\nRegister to the [Human3.6m website](http://vision.imar.ro/human3.6m/) website (or login if you already have an account) and download the dataset in its original format. You only need to download *Poses -> D3 Positions* for each subject (1, 5, 6, 7, 8, 9, 11)\n\n##### Instructions without MATLAB (recommended)\nYou first need to install `cdflib` Python library via `pip install cdflib`.\n\nExtract the archives named `Poses_D3_Positions_S*.tgz` (subjects 1, 5, 6, 7, 8, 9, 11) to a common directory. Your directory tree should look like this:\n\n```\n/path/to/dataset/S1/MyPoseFeatures/D3_Positions/Directions 1.cdf\n/path/to/dataset/S1/MyPoseFeatures/D3_Positions/Directions.cdf\n...\n```\n\nThen, run the preprocessing script:\n```sh\ncd data\npython prepare_data_h36m.py --from-source-cdf /path/to/dataset\ncd ..\n```\n\nIf everything goes well, you are ready to go.\n\n##### Instructions with MATLAB (old instructions)\nFirst, we need to convert the 3D poses from `.cdf` to `.mat`, so they can be loaded from Python scripts. To this end, we have provided the MATLAB script `convert_cdf_to_mat.m` in the `data` directory. Extract the archives named `Poses_D3_Positions_S*.tgz` (subjects 1, 5, 6, 7, 8, 9, 11) to a directory named `pose`, and set up your directory tree so that it looks like this:\n\n```\n/path/to/dataset/convert_cdf_to_mat.m\n/path/to/dataset/pose/S1/MyPoseFeatures/D3_Positions/Directions 1.cdf\n/path/to/dataset/pose/S1/MyPoseFeatures/D3_Positions/Directions.cdf\n...\n```\nThen run `convert_cdf_to_mat.m` from MATLAB.\n\nFinally, run the Python conversion script specifying the dataset path:\n```sh\ncd data\npython prepare_data_h36m.py --from-source /path/to/dataset/pose\ncd ..\n```\n\n### Setup from preprocessed dataset (old instructions)\n**Update:** the link to the preprocessed dataset is no longer available; please use the procedure above. These instructions have been kept for backwards compatibility in case you already have a copy of this archive. All procedures produce the same result.\n\nDownload the [~~h36m.zip archive~~](https://www.dropbox.com/s/e35qv3n6zlkouki/h36m.zip) (source: [3D pose baseline repository](https://github.com/una-dinosauria/3d-pose-baseline)) to the `data` directory, and run the conversion script from the same directory. This step does not require any additional dependency.\n\n```sh\ncd data\nwget https://www.dropbox.com/s/e35qv3n6zlkouki/h36m.zip\npython prepare_data_h36m.py --from-archive h36m.zip\ncd ..\n```\n\n## 2D detections for Human3.6M\nWe provide support for the following 2D detections:\n\n- `gt`: ground-truth 2D poses, extracted through the camera projection parameters.\n- `sh_pt_mpii`: Stacked Hourglass detections (model pretrained on MPII, no fine tuning).\n- `sh_ft_h36m`: Stacked Hourglass detections, fine-tuned on Human3.6M.\n- `detectron_pt_h36m`: Detectron (Mask R-CNN) detections (model pretrained on COCO, no fine tuning).\n- `detectron_ft_h36m`: Detectron (Mask R-CNN) detections, fine-tuned on Human3.6M.\n- `cpn_ft_h36m_dbb`: Cascaded Pyramid Network detections, fine-tuned on Human3.6M. Bounding boxes from `detectron_ft_h36m`.\n- User-supplied (see below).\n\nThe 2D detection source is specified through the `--keypoints` parameter, which loads the file `data_2d_DATASET_DETECTION.npz` from the `data` directory, where `DATASET` is the dataset name (e.g. `h36m`) and `DETECTION` is the 2D detection source (e.g. `sh_pt_mpii`). Since all the files are encoded according to the same format, it is trivial to create a custom set of 2D detections.\n\nGround-truth poses (`gt`) have already been extracted by the previous step. The other detections must be downloaded manually (see instructions below). You only need to download the detections you want to use. For reference, our best results on Human3.6M are achieved by `cpn_ft_h36m_dbb`.\n\n### Mask R-CNN and CPN detections\nYou can download these directly and put them in the `data` directory. We recommend starting with:\n\n```sh\ncd data\nwget https://dl.fbaipublicfiles.com/video-pose-3d/data_2d_h36m_cpn_ft_h36m_dbb.npz\nwget https://dl.fbaipublicfiles.com/video-pose-3d/data_2d_h36m_detectron_ft_h36m.npz\ncd ..\n```\n\nThese detections have been produced by models fine-tuned on Human3.6M. We adopted the usual protocol of fine-tuning on 5 subjects (S1, S5, S6, S7, and S8). We also included detections from the unlabeled subjects S2, S3, S4, which can be loaded by our framework for semi-supervised experimentation.\n\nOptionally, you can download the Mask R-CNN detections without fine-tuning if you want to experiment with these:\n```sh\ncd data\nwget https://dl.fbaipublicfiles.com/video-pose-3d/data_2d_h36m_detectron_pt_coco.npz\ncd ..\n```\n\n### Stacked Hourglass detections\nThese detections (both pretrained and fine-tuned) are provided by [Martinez et al.](https://github.com/una-dinosauria/3d-pose-baseline) in their repository on 3D human pose estimation. The 2D poses produced by the pretrained model are in the same archive as the dataset ([h36m.zip](https://www.dropbox.com/s/e35qv3n6zlkouki/h36m.zip)). The fine-tuned poses can be downloaded [here](https://drive.google.com/open?id=0BxWzojlLp259S2FuUXJ6aUNxZkE). Put the two archives in the `data` directory and run:\n\n```sh\ncd data\npython prepare_data_2d_h36m_sh.py -pt h36m.zip\npython prepare_data_2d_h36m_sh.py -ft stacked_hourglass_fined_tuned_240.tar.gz\ncd ..\n```\n\n## HumanEva-I\nFor HumanEva, you need the original dataset and MATLAB. We provide a MATLAB script to extract the revelant parts of the dataset automatically.\n\n1. Download the [HumanEva-I dataset](http://humaneva.is.tue.mpg.de/datasets_human_1) and extract it.\n2. Download the official [source code v1.1 beta](http://humaneva.is.tue.mpg.de/main/download?file=Release_Code_v1_1_beta.zip) and extract it where you extracted the dataset.\n3. Copy the contents of the directory `Release_Code_v1_1_beta\\HumanEva_I` to the root of the source tree (`Release_Code_v1_1_beta/`).\n4. Download the [critical dataset update](http://humaneva.is.tue.mpg.de/main/download?file=Critical_Update_OFS_files.zip) and apply it.\n5. **Important:** for visualization purposes, the original code requires an old library named *dxAvi*, which is used for decoding XVID videos. A precompiled binary for 32-bit architectures is already included, but if you are running MATLAB on a 64-bit system, the code will not work. You can either recompile *dxAvi* library for x64, or bypass it entirely, since we are not using visualization features in our conversion script. To this end, you can patch `@sync_stream/sync_stream.m`, replacing line 202: `ImageStream(I) = image_stream(image_paths{I}, start_image_offset(I));` with `ImageStream(I) = 0;`\n6. Now you can copy our script `ConvertHumanEva.m` (from `data/`) to `Release_Code_v1_1_beta/`, and run it. It will create a directory named `converted_15j`, which contains the converted 2D/3D ground-truth poses on a 15-joint skeleton.\n7. **Optional:** if you want to experiment with a 20-joint skeleton, change `N_JOINTS` to 20 in `ConvertHumanEva.m`, and repeat the process. It will create a directory named `converted_20j`. Adapt next steps accordingly.\n\nIf you get warnings about mocap errors or dropped frames, this is normal. The HumanEva dataset contains some invalid frames due to occlusions, which are simply discarded. Since we work with videos (and not individual frames), we try to minimize the impact of this issue by grouping valid sequences into contiguous chunks.\n\nFinally, run the Python script to produce the final files:\n```\npython prepare_data_humaneva.py -p /path/to/dataset/Release_Code_v1_1_beta/converted_15j --convert-3d\n```\nYou should end up with two files in the `data` directory: `data_3d_humaneva15.npz` for the 3D poses, and `data_2d_humaneva15_gt.npz` for the ground-truth 2D poses.\n\n### 2D detections for HumanEva-I\nWe provide support for the following 2D detections:\n\n- `gt`: ground-truth 2D poses, extracted through camera projection.\n- `detectron_pt_coco`: Detectron (Mask R-CNN) detections, pretrained on COCO.\n\nSince HumanEva is very small, we do not fine-tune the pretrained models. As before, you can download Mask R-CNN detections from AWS (`data_2d_humaneva15_detectron_pt_coco.npz`, which must be copied to `data/`). As before, we have included detections for unlabeled subjects/actions. These begin with the prefix `Unlabeled/`. Chunks that correspond to corrupted motion capture streams are also marked as unlabeled.\n```sh\ncd data\nwget https://dl.fbaipublicfiles.com/video-pose-3d/data_2d_humaneva15_detectron_pt_coco.npz\ncd ..\n```"
        },
        {
          "name": "DOCUMENTATION.md",
          "type": "blob",
          "size": 13.126953125,
          "content": "# Documentation\nThis guide explains in depth all the features of this framework. Make sure you have read the quick start guide in [`README.md`](README.md) before proceeding.\n\n## Training\nBy default, the script `run.py` runs in training mode. The list of command-line arguments is defined in `common/arguments.py`.\n\n- `-h`: shows the help / list of parameters.\n- `-d` or `--dataset`: specifies the dataset to use (`h36m` or `humaneva15`). Default: `h36m`. If you converted the 20-joint HumanEva skeleton, you can also use `humaneva20`.\n- `-k` or `--keypoints`: specifies the 2D detections to use. Default: `cpn_ft_h36m_dbb` (CPN fine-tuned on Human 3.6M).\n- `-c` or `--checkpoint`: specifies the directory where checkpoints are saved/read. Default: `checkpoint`.\n- `--checkpoint-frequency`: save checkpoints every N epochs. Default: `10`.\n- `-r` or `--resume`: resume training from a particular checkpoint (you should only specify the file name, not the path), e.g. `epoch_10.bin`.\n- `-str` or `--subjects-train`: specifies the list of subjects on which the model is trained, separated by commas. Default: `S1,S5,S6,S7,S8`. For HumanEva, you may want to specify these manually.\n- `-ste` or `--subjects-test`: specifies the list of subjects on which the model is tested at the end of each epoch (and in the final evaluation), separated by comma. Default: `S9,S11`. For HumanEva, you may want to specify these manually.\n- `-a` or `--actions`: select only a subset of actions, separated by commas. E.g. `Walk,Jog`. By default, all actions are used.\n- `-e` or `--epochs`: train for N epochs, i.e. N passes over the entire training set. Default: `60`.\n- `--no-eval`: disable testing at the end of each epoch (marginal speed up). By default, testing is enabled.\n- `--export-training-curves`: export training curves as PNG images after every epoch. They are saved in the checkpoint directory. Default: disabled.\n\n\nIf `--no-eval` is not specified, the model is tested at the end of each epoch, although the reported metric is merely an approximation of the final result (for performance reasons). Once training is over, the model is automatically tested using the full procedure. This means that you can also specify the testing parameters when training.\n\nHere is a description of the model hyperparameters:\n- `-s` or `--stride`: the chunk size used for training, i.e. the number of frames that are predicted at once from each sequence. Increasing this value improves training speed at the expense of the error (due to correlated batch statistics). Default: `1` frame, which ensures maximum decorrelation. When this value is set to `1`, we also employ an optimized implementation of the model (see implementation details).\n- `-b` or `--batch-size`: the batch size used for training the model, in terms of *output frames* (regardless of the stride/chunk length). Default: `1024` frames.\n- `-drop` or `--dropout`: dropout probability. Default: `0.25`.\n- `-lr` or `--learning-rate`: initial learning rate. Default: `0.001`.\n- `-lrd` or `--lr-decay`: learning rate decay after every epoch (multiplicative coefficient). Default: `0.95`.\n- `-no-tta` or `--no-test-time-augmentation`: disable test-time augmentation (which is enabled by default), i.e. do not flip poses horizontally when testing the model. Only effective when combined with data augmentation, so if you disable this you should also disable train-time data augmentation.\n- `-no-da` or `--no-data-augmentation`: disable train-time data augmentation (which is enabled by default), i.e. do not flip poses horizontally to double the training data.\n- `-arc` or `--architecture`: filter widths (only odd numbers supported) separated by commas. This parameter also specifies the number of residual blocks, and determines the receptive field of the model. The first number refers to the input layer, and is followed by the filter widths of the residual blocks. For instance, `3,5,5` uses `3x1` convolutions in the first layer, followed by two residual blocks with `5x1` convolutions. Default: `3,3,3`. Some valid examples are:\n-- `-arc 3,3,3` (27 frames)\n-- `-arc 3,3,7` (63 frames)\n-- `-arc 3,3,3,3` (81 frames)\n-- `-arc 3,3,3,3,3` (243 frames)\n- `--causal`: use causal (i.e. asymmetric) convolutions instead of symmetric convolutions. Causal convolutions are suitable for real-time applications because they do not exploit future frames (they only look in the past), but symmetric convolutions result in a better error since they can consider both past and future data. See below for more details.  Default: disabled.\n- `-ch` or `--channels`: number of channels in convolutions. Default: `1024`.\n- `--dense`: use dense convolutions instead of dilated convolutions. This is only useful for benchmarks and ablation experiments.\n- `--disable-optimizations`: disable the optimized implementation when `--stride` == `1`. This is only useful for benchmarks.\n\n## Semi-supervised training\nSemi-supervised learning is only implemented for Human3.6M.\n\n- `-sun` or `--subjects-unlabeled`: specifies the list of unlabeled subjects that are used for semi-supervision (separated by commas). Semi-supervised learning is automatically enabled when this parameter is set.\n- `--warmup`: number of supervised training epochs before attaching the semi-supervised loss. Default: `1` epoch. You may want to increase this when downsampling the dataset.\n- `--subset`: reduce the size of the training set by a given factor (a real number). E.g. `0.1` uses one tenth of the training data. Subsampling is achieved by extracting a random contiguous chunk from each video, while preserving the original frame rate. Default: `1` (i.e. disabled). This parameter can also be used in a supervised setting, but it is especially useful to simulate data scarcity in a semi-supervised setting.\n- `--downsample`: reduce the dataset frame rate by an integer factor. Default: `1` (i.e. disabled).\n- `--no-bone-length`: do not add the bone length term to the unsupervised loss function (only useful for ablation experiments).\n- `--linear-projection`: ignore non-linear camera distortion parameters when performing projection to 2D, i.e. use only focal length and principal point.\n- `--no-proj`: do not add the projection consistency term to the loss function (only useful for ablations).\n\n## Testing\nTo test a particular model, you need to specify the checkpoint file via the `--evaluate` parameter, which will be loaded from the checkpoint directory (default: `checkpoint/`, but you can change it using the `-c` parameter). You also need to specify the same settings/hyperparameters that you used for training (e.g. input keypoints, architecture, etc.). The script will not run any compatibility checks -- this is a design choice to facilitate ablation experiments.\n\n## Visualization\nYou can render videos by specifying both `--evaluate` and  `--render`. The script generates a visualization which contains three viewports: the 2D input keypoints (and optionally, a video overlay), the 3D reconstruction, and the 3D ground truth.\nNote that when you specify a video, the 2D detections are still loaded from the dataset according to the given parameters. It is up to you to choose the correct video. You can also visualize unlabeled videos -- in this case, the ground truth will not be shown.\n\nHere is a list of the command-line arguments related to visualization:\n- `--viz-subject`: subject to render, e.g. `S1`.\n- `--viz-action`: action to render, e.g. `Walking` or `Walking 1`.\n- `--viz-camera`: camera to render (integer), from 0 to 3 for Human3.6M, 0 to 2 for HumanEva. Default: `0`.\n- `--viz-video`: path to the 2D video to show. If specified, the script will render a skeleton overlay on top of the video. If not specified, a black background will be rendered instead (but the 2D detections will still be shown). \n- `--viz-skip`: skip the first N frames from the specified video. Useful for HumanEva. Default: `0`.\n- `--viz-output`: output file name (either a `.mp4` or `.gif` file).\n- `--viz-bitrate`: bitrate for MP4 videos. Default: `3000`.\n- `--viz-no-ground-truth`: by default, the videos contain three viewports: the 2D input pose, the 3D reconstruction, and the 3D ground truth. This flags removes the last one.\n- `--viz-limit`: render only first N frames. By default, all frames are rendered.\n- `--viz-downsample`: downsample videos by the specified factor, i.e. reduce the frame rate. E.g. if set to `2`, the frame rate is reduced from 50 FPS to 25 FPS. Default: `1` (no downsampling).\n- `--viz-size`: output resolution multiplier. Higher = larger images. Default: `5`.\n- `--viz-export`: export 3D joint coordinates (in camera space) to the specified NumPy archive.\n\nExample:\n```\npython run.py -k cpn_ft_h36m_dbb -arc 3,3,3,3,3 -c checkpoint --evaluate pretrained_h36m_cpn.bin --render --viz-subject S11 --viz-action Walking --viz-camera 0 --viz-video \"/path/to/videos/S11/Videos/Walking.54138969.mp4\" --viz-output output.gif --viz-size 3 --viz-downsample 2 --viz-limit 60\n```\n![](images/demo_h36m.gif)\n\nGenerates a visualization for S11/Walking from camera 0, and exports the first frames to a GIF animation with a frame rate of 25 FPS. If you remove the `--viz-video` parameter, the skeleton overlay will be rendered on a blank background.\n\nWhile Human3.6M visualization works out of the box, HumanEva visualization is trickier because the original videos must be segmented manually. Additionally, invalid frames and software synchronization complicate matters. Nonetheless, you can get decent visualizations by selecting the chunk 0 of validation sequences (which start at the beginning of each video) and discarding the first frames using `--viz-skip`. For a suggestion on the number of frames to skip, take a look at `sync_data` in `data/prepare_data_humaneva.py`.\n\nExample:\n```\npython run.py -d humaneva15 -k detectron_pt_coco -str Train/S1,Train/S2,Train/S3 -ste Validate/S1,Validate/S2,Validate/S3 -c checkpoint --evaluate pretrained_humaneva15_detectron.bin  --render --viz-subject Validate/S2 --viz-action \"Walking 1 chunk0\" --viz-camera 0 --viz-output output_he.gif --viz-size 3 --viz-downsample 2 --viz-video \"/path/to/videos/S2/Walking_1_(C1).avi\" --viz-skip 115 --viz-limit 60\n```\n![](images/demo_humaneva.gif)\n\nUnlabeled videos are easier to visualize because they do not require synchronization with the ground truth. In this case, visualization works out of the box even for HumanEva.\n\nExample:\n```\npython run.py -d humaneva15 -k detectron_pt_coco -str Train/S1,Train/S2,Train/S3 -ste Validate/S1,Validate/S2,Validate/S3 -c checkpoint --evaluate pretrained_humaneva15_detectron.bin  --render --viz-subject Unlabeled/S4 --viz-action \"Box 2\" --viz-camera 0 --viz-output output_he.gif --viz-size 3 --viz-downsample 2 --viz-video \"/path/to/videos/S4/Box_2_(C1).avi\" --viz-limit 60\n```\n![](images/demo_humaneva_unlabeled.gif)\n\n## Implementation details\n### Batch generation during training\nSome details of our training procedure are better understood visually.\n![](images/batching.png)\nThe figure above shows how training batches are generated, depending on the value of `--stride` (from left to right: 1, 2, and 4). This example shows a sequence of 2D poses which has a length of N = 8 frames. The 3D poses (blue boxes in the figure) are inferred using a model that has a receptive field F = 5 frames. Therefore, because of valid padding, an input sequence of length N results in an output sequence of length N - F + 1, i.e. N - 4 in this example.\n\nWhen `--stride=1`, we generate one training example for each frame. This ensures that the batches are maximally uncorrelated, which helps batch normalization as well as generalization. As `--stride` increases, training becomes faster because the model can reutilize intermediate computations, at the cost of biased batch statistics. However, we provide an optimized implementation when `--stride=1`, which replaces dilated convolutions with strided convolutions (only while training), so in principle you should not touch this parameter unless you want to run specific experiments. To understand how it works, see the figures below:\n\n![](images/convolutions_1f_naive.png)\nThe figure above shows the information flow for a model with a receptive field of 27 frames, and a single-frame prediction, i.e. from N = 27 input frames we end up with one output frame. You can observe that this regular implementation tends to waste some intermediate results when a small number of frames are predicted. However, for inference of very long sequences, this approach is very efficient as intermediate results are shared among successive frames.\n\n![](images/convolutions_1f_optimized.png)\nTherefore, for training *only*, we use the implementation above, which replaces dilated convolutions with strided convolutions. It achieves the same result, but avoids computing unnecessary intermediate results.\n\n### Symmetric convolutions vs causal convolutions\nThe figures below show the information flow from input (bottom) to output (top). In this example, we adopt a model with a receptive field of 27 frames.\n\n![](images/convolutions_normal.png)\nWith symmetric convolutions, both past and future information is exploited, resulting in a better reconstruction.\n\n![](images/convolutions_causal.png)\nWith causal convolutions, only past data is exploited. This approach is suited to real-time applications where future data cannot be exploited, at the cost of a slightly higher error."
        },
        {
          "name": "INFERENCE.md",
          "type": "blob",
          "size": 7.509765625,
          "content": "# Inference in the wild\n\n**Update:** we have added support for Detectron2.\n\nIn this short tutorial, we show how to run our model on arbitrary videos and visualize the predictions. Note that this feature is only provided for experimentation/research purposes and presents some limitations, as this repository is meant to provide a reference implementation of the approach described in the paper (not production-ready code for inference in the wild).\n\nOur script assumes that a video depicts *exactly* one person. In case of multiple people visible at once, the script will select the person corresponding to the bounding box with the highest confidence, which may cause glitches.\n\nThe instructions below show how to use Detectron to infer 2D keypoints from videos, convert them to a custom dataset for our code, and infer 3D poses. For now, we do not have instructions for CPN. In the last section of this tutorial, we also provide some tips.\n\n## Step 1: setup\nThe inference script requires `ffmpeg`, which you can easily install via conda, pip, or manually.\n\nDownload the [pretrained model](https://dl.fbaipublicfiles.com/video-pose-3d/pretrained_h36m_detectron_coco.bin) for generating 3D predictions. This model is different than the pretrained ones listed in the main README, as it expects input keypoints in COCO format (generated by the pretrained Detectron model) and outputs 3D joint positions in Human3.6M format. Put this model in the `checkpoint` directory of this repo.\n\n**Note:** if you had downloaded `d-pt-243.bin`, you should download the new pretrained model using the link above. `d-pt-243.bin` takes the keypoint probabilities as input (in addition to the x, y coordinates), which causes problems on videos with a different resolution than that of Human3.6M. The new model is only trained on 2D coordinates and works with any resolution/aspect ratio.\n\n## Step 2 (optional): video preprocessing\nSince the script expects a single-person scenario, you may want to extract a portion of your video. This is very easy to do with ffmpeg, e.g.\n```\nffmpeg -i input.mp4 -ss 1:00 -to 1:30 -c copy output.mp4\n```\nextracts a clip from minute 1:00 to minute 1:30 of `input.mp4`, and exports it to `output.mp4`.\n\nOptionally, you can also adapt the frame rate of the video. Most videos have a frame rate of about 25 FPS, but our Human3.6M model was trained on 50-FPS videos. Since our model is robust to alterations in speed, this step is not very important and can be skipped, but if you want the best possible results you can use ffmpeg again for this task:\n```\nffmpeg -i input.mp4 -filter \"minterpolate='fps=50'\" -crf 0 output.mp4\n```\n\n## Step 3: inferring 2D keypoints with Detectron\n\n### Using Detectron2 (new)\nSet up [Detectron2](https://github.com/facebookresearch/detectron2) and use the script  `inference/infer_video_d2.py` (no need to copy this, as it directly uses the Detectron2 API). This script provides a convenient interface to generate 2D keypoint predictions from videos without manually extracting individual frames.\n\nTo infer keypoints from all the mp4 videos in `input_directory`, run\n```\ncd inference\npython infer_video_d2.py \\\n    --cfg COCO-Keypoints/keypoint_rcnn_R_101_FPN_3x.yaml \\\n    --output-dir output_directory \\\n    --image-ext mp4 \\\n    input_directory\n```\nThe results will be exported to `output_directory` as custom NumPy archives (`.npz` files). You can change the video extension in `--image-ext` (ffmpeg supports a wide range of formats).\n\n**Note:** although the architecture is the same (ResNet-101), the weights used by the Detectron2 model are not the same as those used by Detectron1. Since our pretrained model was trained on Detectron1 poses, the result might be slightly different (but it should still be pretty close).\n\n### Using Detectron1 (old instructions)\nSet up [Detectron](https://github.com/facebookresearch/Detectron) and copy the script `inference/infer_video.py` from this repo to the `tools` directory of the Detectron repo. This script provides a convenient interface to generate 2D keypoint predictions from videos without manually extracting individual frames.\n\nOur Detectron script `infer_video.py` is a simple adaptation of `infer_simple.py` (which works on images) and has a similar command-line syntax.\n\nTo infer keypoints from all the mp4 videos in `input_directory`, run\n```\npython tools/infer_video.py \\\n    --cfg configs/12_2017_baselines/e2e_keypoint_rcnn_R-101-FPN_s1x.yaml \\\n    --output-dir output_directory \\\n    --image-ext mp4 \\\n\t--wts https://dl.fbaipublicfiles.com/detectron/37698009/12_2017_baselines/e2e_keypoint_rcnn_R-101-FPN_s1x.yaml.08_45_57.YkrJgP6O/output/train/keypoints_coco_2014_train:keypoints_coco_2014_valminusminival/generalized_rcnn/model_final.pkl \\\n    input_directory\n```\nThe results will be exported to `output_directory` as custom NumPy archives (`.npz` files). You can change the video extension in `--image-ext` (ffmpeg supports a wide range of formats).\n\n## Step 4: creating a custom dataset\nRun our dataset preprocessing script from the `data` directory:\n```\npython prepare_data_2d_custom.py -i /path/to/detections/output_directory -o myvideos\n```\nThis creates a custom dataset named `myvideos` (which contains all the videos in `output_directory`, each of which is mapped to a different subject) and saved to `data_2d_custom_myvideos.npz`. You are free to specify any name for the dataset.\n\n**Note:** as mentioned, the script will take the bounding box with the highest probability for each frame. If a particular frame has no bounding boxes, it is assumed to be a missed detection and the keypoints will be interpolated from neighboring frames.\n\n## Step 5: rendering a custom video and exporting coordinates\nYou can finally use the visualization feature to render a video of the 3D joint predictions. You must specify the `custom` dataset (`-d custom`), the input keypoints as exported in the previous step (`-k myvideos`), the correct architecture/checkpoint, and the action `custom` (`--viz-action custom`). The subject is the file name of the input video, and the camera is always 0.\n```\npython run.py -d custom -k myvideos -arc 3,3,3,3,3 -c checkpoint --evaluate pretrained_h36m_detectron_coco.bin --render --viz-subject input_video.mp4 --viz-action custom --viz-camera 0 --viz-video /path/to/input_video.mp4 --viz-output output.mp4 --viz-size 6\n```\n\nYou can also export the 3D joint positions (in camera space) to a NumPy archive. To this end, replace `--viz-output` with `--viz-export` and specify the file name.\n\n## Limitations and tips\n- The model was trained on Human3.6M cameras (which are relatively undistorted), and the results may be bad if the intrinsic parameters of the cameras of your videos differ much from those of Human3.6M. This may be particularly noticeable with fisheye cameras, which present a high degree of non-linear lens distortion. If the camera parameters are known, consider preprocessing your videos to match those of Human3.6M as closely as possible.\n- If you want multi-person tracking, you should implement a bounding box matching strategy. An example would be to use bipartite matching on the bounding box overlap (IoU) between subsequent frames, but there are many other approaches.\n- Predictions are relative to the root joint, i.e. the global trajectory is not regressed. If you need it, you may want to use another model to regress it, such as the one we use for semi-supervision.\n- Predictions are always in *camera space* (regardless of whether the trajectory is available). For our visualization script, we simply take a random camera from Human3.6M, which fits decently most videos where the camera viewport is parallel to the ground. "
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 18.88671875,
          "content": "Attribution-NonCommercial 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n     wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public: \n     wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-NonCommercial 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-NonCommercial 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n  d. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  e. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  f. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  g. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  h. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  i. NonCommercial means not primarily intended for or directed towards\n     commercial advantage or monetary compensation. For purposes of\n     this Public License, the exchange of the Licensed Material for\n     other material subject to Copyright and Similar Rights by digital\n     file-sharing or similar means is NonCommercial provided there is\n     no payment of monetary compensation in connection with the\n     exchange.\n\n  j. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  k. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  l. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part, for NonCommercial purposes only; and\n\n            b. produce, reproduce, and Share Adapted Material for\n               NonCommercial purposes only.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties, including when\n          the Licensed Material is used other than for NonCommercial\n          purposes.\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n       4. If You Share Adapted Material You produce, the Adapter's\n          License You apply must not prevent recipients of the Adapted\n          Material from complying with this Public License.\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database for NonCommercial purposes\n     only;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material; and\n\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n=======================================================================\n\nCreative Commons is not a party to its public\nlicenses. Notwithstanding, Creative Commons may elect to apply one of\nits public licenses to material it publishes and in those instances\nwill be considered the “Licensor.” The text of the Creative Commons\npublic licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.80859375,
          "content": "# 3D human pose estimation in video with temporal convolutions and semi-supervised training\n<p align=\"center\"><img src=\"images/convolutions_anim.gif\" width=\"50%\" alt=\"\" /></p>\n\nThis is the implementation of the approach described in the paper:\n> Dario Pavllo, Christoph Feichtenhofer, David Grangier, and Michael Auli. [3D human pose estimation in video with temporal convolutions and semi-supervised training](https://arxiv.org/abs/1811.11742). In Conference on Computer Vision and Pattern Recognition (CVPR), 2019.\n\nMore demos are available at https://dariopavllo.github.io/VideoPose3D\n\n<p align=\"center\"><img src=\"images/demo_yt.gif\" width=\"70%\" alt=\"\" /></p>\n\n![](images/demo_temporal.gif)\n\n### Results on Human3.6M\nUnder Protocol 1 (mean per-joint position error) and Protocol 2 (mean-per-joint position error after rigid alignment).\n\n| 2D Detections | BBoxes | Blocks | Receptive Field | Error (P1) | Error (P2) |\n|:-------|:-------:|:-------:|:-------:|:-------:|:-------:|\n| CPN | Mask R-CNN  | 4 | 243 frames | **46.8 mm** | **36.5 mm** |\n| CPN | Ground truth | 4 | 243 frames | 47.1 mm | 36.8 mm |\n| CPN | Ground truth | 3 | 81 frames | 47.7 mm | 37.2 mm |\n| CPN | Ground truth | 2 | 27 frames | 48.8 mm | 38.0 mm |\n| Mask R-CNN | Mask R-CNN | 4 | 243 frames | 51.6 mm | 40.3 mm |\n| Ground truth | -- | 4 | 243 frames | 37.2 mm | 27.2 mm |\n\n## Quick start\nTo get started as quickly as possible, follow the instructions in this section. This should allow you train a model from scratch, test our pretrained models, and produce basic visualizations. For more detailed instructions, please refer to [`DOCUMENTATION.md`](DOCUMENTATION.md).\n\n### Dependencies\nMake sure you have the following dependencies installed before proceeding:\n- Python 3+ distribution\n- PyTorch >= 0.4.0\n\nOptional:\n- Matplotlib, if you want to visualize predictions. Additionally, you need *ffmpeg* to export MP4 videos, and *imagemagick* to export GIFs.\n- MATLAB, if you want to experiment with HumanEva-I (you need this to convert the dataset). \n\n### Dataset setup\nYou can find the instructions for setting up the Human3.6M and HumanEva-I datasets in [`DATASETS.md`](DATASETS.md). For this short guide, we focus on Human3.6M. You are not required to setup HumanEva, unless you want to experiment with it.\n\nIn order to proceed, you must also copy CPN detections (for Human3.6M) and/or Mask R-CNN detections (for HumanEva).\n\n### Evaluating our pretrained models\nThe pretrained models can be downloaded from AWS. Put `pretrained_h36m_cpn.bin` (for Human3.6M) and/or `pretrained_humaneva15_detectron.bin` (for HumanEva) in the `checkpoint/` directory (create it if it does not exist).\n```sh\nmkdir checkpoint\ncd checkpoint\nwget https://dl.fbaipublicfiles.com/video-pose-3d/pretrained_h36m_cpn.bin\nwget https://dl.fbaipublicfiles.com/video-pose-3d/pretrained_humaneva15_detectron.bin\ncd ..\n```\n\nThese models allow you to reproduce our top-performing baselines, which are:\n- 46.8 mm for Human3.6M, using fine-tuned CPN detections, bounding boxes from Mask R-CNN, and an architecture with a receptive field of 243 frames.\n- 33.0 mm for HumanEva-I (on 3 actions), using pretrained Mask R-CNN detections, and an architecture with a receptive field of 27 frames. This is the multi-action model trained on 3 actions (Walk, Jog, Box).\n\nTo test on Human3.6M, run:\n```\npython run.py -k cpn_ft_h36m_dbb -arc 3,3,3,3,3 -c checkpoint --evaluate pretrained_h36m_cpn.bin\n```\n\nTo test on HumanEva, run:\n```\npython run.py -d humaneva15 -k detectron_pt_coco -str Train/S1,Train/S2,Train/S3 -ste Validate/S1,Validate/S2,Validate/S3 -a Walk,Jog,Box --by-subject -c checkpoint --evaluate pretrained_humaneva15_detectron.bin\n```\n\n[`DOCUMENTATION.md`](DOCUMENTATION.md) provides a precise description of all command-line arguments.\n\n### Inference in the wild\nWe have introduced an experimental feature to run our model on custom videos. See [`INFERENCE.md`](INFERENCE.md) for more details.\n\n### Training from scratch\nIf you want to reproduce the results of our pretrained models, run the following commands.\n\nFor Human3.6M:\n```\npython run.py -e 80 -k cpn_ft_h36m_dbb -arc 3,3,3,3,3\n```\nBy default the application runs in training mode. This will train a new model for 80 epochs, using fine-tuned CPN detections. Expect a training time of 24 hours on a high-end Pascal GPU. If you feel that this is too much, or your GPU is not powerful enough, you can train a model with a smaller receptive field, e.g.\n- `-arc 3,3,3,3` (81 frames) should require 11 hours and achieve 47.7 mm. \n- `-arc 3,3,3` (27 frames) should require 6 hours and achieve 48.8 mm.\n\nYou could also lower the number of epochs from 80 to 60 with a negligible impact on the result.\n\nFor HumanEva:\n```\npython run.py -d humaneva15 -k detectron_pt_coco -str Train/S1,Train/S2,Train/S3 -ste Validate/S1,Validate/S2,Validate/S3 -b 128 -e 1000 -lrd 0.996 -a Walk,Jog,Box --by-subject\n```\nThis will train for 1000 epochs, using Mask R-CNN detections and evaluating each subject separately.\nSince HumanEva is much smaller than Human3.6M, training should require about 50 minutes.\n\n### Semi-supervised training\nTo perform semi-supervised training, you just need to add the `--subjects-unlabeled` argument. In the example below, we use ground-truth 2D poses as input, and train supervised on just 10% of Subject 1 (specified by `--subset 0.1`). The remaining subjects are treated as unlabeled data and are used for semi-supervision.\n```\npython run.py -k gt --subjects-train S1 --subset 0.1 --subjects-unlabeled S5,S6,S7,S8 -e 200 -lrd 0.98 -arc 3,3,3 --warmup 5 -b 64\n```\nThis should give you an error around 65.2 mm. By contrast, if we only train supervised\n```\npython run.py -k gt --subjects-train S1 --subset 0.1 -e 200 -lrd 0.98 -arc 3,3,3 -b 64\n```\nwe get around 80.7 mm, which is significantly higher.\n\n### Visualization\nIf you have the original Human3.6M videos, you can generate nice visualizations of the model predictions. For instance:\n```\npython run.py -k cpn_ft_h36m_dbb -arc 3,3,3,3,3 -c checkpoint --evaluate pretrained_h36m_cpn.bin --render --viz-subject S11 --viz-action Walking --viz-camera 0 --viz-video \"/path/to/videos/S11/Videos/Walking.54138969.mp4\" --viz-output output.gif --viz-size 3 --viz-downsample 2 --viz-limit 60\n```\nThe script can also export MP4 videos, and supports a variety of parameters (e.g. downsampling/FPS, size, bitrate). See [`DOCUMENTATION.md`](DOCUMENTATION.md) for more details.\n\n## License\nThis work is licensed under CC BY-NC. See LICENSE for details. Third-party datasets are subject to their respective licenses.\nIf you use our code/models in your research, please cite our paper:\n```\n@inproceedings{pavllo:videopose3d:2019,\n  title={3D human pose estimation in video with temporal convolutions and semi-supervised training},\n  author={Pavllo, Dario and Feichtenhofer, Christoph and Grangier, David and Auli, Michael},\n  booktitle={Conference on Computer Vision and Pattern Recognition (CVPR)},\n  year={2019}\n}\n```\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 40.92578125,
          "content": "# Copyright (c) 2018-present, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the license found in the\n# LICENSE file in the root directory of this source tree.\n#\n\nimport numpy as np\n\nfrom common.arguments import parse_args\nimport torch\n\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nimport os\nimport sys\nimport errno\n\nfrom common.camera import *\nfrom common.model import *\nfrom common.loss import *\nfrom common.generators import ChunkedGenerator, UnchunkedGenerator\nfrom time import time\nfrom common.utils import deterministic_random\n\nargs = parse_args()\nprint(args)\n\ntry:\n    # Create checkpoint directory if it does not exist\n    os.makedirs(args.checkpoint)\nexcept OSError as e:\n    if e.errno != errno.EEXIST:\n        raise RuntimeError('Unable to create checkpoint directory:', args.checkpoint)\n\nprint('Loading dataset...')\ndataset_path = 'data/data_3d_' + args.dataset + '.npz'\nif args.dataset == 'h36m':\n    from common.h36m_dataset import Human36mDataset\n    dataset = Human36mDataset(dataset_path)\nelif args.dataset.startswith('humaneva'):\n    from common.humaneva_dataset import HumanEvaDataset\n    dataset = HumanEvaDataset(dataset_path)\nelif args.dataset.startswith('custom'):\n    from common.custom_dataset import CustomDataset\n    dataset = CustomDataset('data/data_2d_' + args.dataset + '_' + args.keypoints + '.npz')\nelse:\n    raise KeyError('Invalid dataset')\n\nprint('Preparing data...')\nfor subject in dataset.subjects():\n    for action in dataset[subject].keys():\n        anim = dataset[subject][action]\n        \n        if 'positions' in anim:\n            positions_3d = []\n            for cam in anim['cameras']:\n                pos_3d = world_to_camera(anim['positions'], R=cam['orientation'], t=cam['translation'])\n                pos_3d[:, 1:] -= pos_3d[:, :1] # Remove global offset, but keep trajectory in first position\n                positions_3d.append(pos_3d)\n            anim['positions_3d'] = positions_3d\n\nprint('Loading 2D detections...')\nkeypoints = np.load('data/data_2d_' + args.dataset + '_' + args.keypoints + '.npz', allow_pickle=True)\nkeypoints_metadata = keypoints['metadata'].item()\nkeypoints_symmetry = keypoints_metadata['keypoints_symmetry']\nkps_left, kps_right = list(keypoints_symmetry[0]), list(keypoints_symmetry[1])\njoints_left, joints_right = list(dataset.skeleton().joints_left()), list(dataset.skeleton().joints_right())\nkeypoints = keypoints['positions_2d'].item()\n\nfor subject in dataset.subjects():\n    assert subject in keypoints, 'Subject {} is missing from the 2D detections dataset'.format(subject)\n    for action in dataset[subject].keys():\n        assert action in keypoints[subject], 'Action {} of subject {} is missing from the 2D detections dataset'.format(action, subject)\n        if 'positions_3d' not in dataset[subject][action]:\n            continue\n            \n        for cam_idx in range(len(keypoints[subject][action])):\n            \n            # We check for >= instead of == because some videos in H3.6M contain extra frames\n            mocap_length = dataset[subject][action]['positions_3d'][cam_idx].shape[0]\n            assert keypoints[subject][action][cam_idx].shape[0] >= mocap_length\n            \n            if keypoints[subject][action][cam_idx].shape[0] > mocap_length:\n                # Shorten sequence\n                keypoints[subject][action][cam_idx] = keypoints[subject][action][cam_idx][:mocap_length]\n\n        assert len(keypoints[subject][action]) == len(dataset[subject][action]['positions_3d'])\n        \nfor subject in keypoints.keys():\n    for action in keypoints[subject]:\n        for cam_idx, kps in enumerate(keypoints[subject][action]):\n            # Normalize camera frame\n            cam = dataset.cameras()[subject][cam_idx]\n            kps[..., :2] = normalize_screen_coordinates(kps[..., :2], w=cam['res_w'], h=cam['res_h'])\n            keypoints[subject][action][cam_idx] = kps\n\nsubjects_train = args.subjects_train.split(',')\nsubjects_semi = [] if not args.subjects_unlabeled else args.subjects_unlabeled.split(',')\nif not args.render:\n    subjects_test = args.subjects_test.split(',')\nelse:\n    subjects_test = [args.viz_subject]\n\nsemi_supervised = len(subjects_semi) > 0\nif semi_supervised and not dataset.supports_semi_supervised():\n    raise RuntimeError('Semi-supervised training is not implemented for this dataset')\n            \ndef fetch(subjects, action_filter=None, subset=1, parse_3d_poses=True):\n    out_poses_3d = []\n    out_poses_2d = []\n    out_camera_params = []\n    for subject in subjects:\n        for action in keypoints[subject].keys():\n            if action_filter is not None:\n                found = False\n                for a in action_filter:\n                    if action.startswith(a):\n                        found = True\n                        break\n                if not found:\n                    continue\n                \n            poses_2d = keypoints[subject][action]\n            for i in range(len(poses_2d)): # Iterate across cameras\n                out_poses_2d.append(poses_2d[i])\n                \n            if subject in dataset.cameras():\n                cams = dataset.cameras()[subject]\n                assert len(cams) == len(poses_2d), 'Camera count mismatch'\n                for cam in cams:\n                    if 'intrinsic' in cam:\n                        out_camera_params.append(cam['intrinsic'])\n                \n            if parse_3d_poses and 'positions_3d' in dataset[subject][action]:\n                poses_3d = dataset[subject][action]['positions_3d']\n                assert len(poses_3d) == len(poses_2d), 'Camera count mismatch'\n                for i in range(len(poses_3d)): # Iterate across cameras\n                    out_poses_3d.append(poses_3d[i])\n    \n    if len(out_camera_params) == 0:\n        out_camera_params = None\n    if len(out_poses_3d) == 0:\n        out_poses_3d = None\n    \n    stride = args.downsample\n    if subset < 1:\n        for i in range(len(out_poses_2d)):\n            n_frames = int(round(len(out_poses_2d[i])//stride * subset)*stride)\n            start = deterministic_random(0, len(out_poses_2d[i]) - n_frames + 1, str(len(out_poses_2d[i])))\n            out_poses_2d[i] = out_poses_2d[i][start:start+n_frames:stride]\n            if out_poses_3d is not None:\n                out_poses_3d[i] = out_poses_3d[i][start:start+n_frames:stride]\n    elif stride > 1:\n        # Downsample as requested\n        for i in range(len(out_poses_2d)):\n            out_poses_2d[i] = out_poses_2d[i][::stride]\n            if out_poses_3d is not None:\n                out_poses_3d[i] = out_poses_3d[i][::stride]\n    \n\n    return out_camera_params, out_poses_3d, out_poses_2d\n\naction_filter = None if args.actions == '*' else args.actions.split(',')\nif action_filter is not None:\n    print('Selected actions:', action_filter)\n    \ncameras_valid, poses_valid, poses_valid_2d = fetch(subjects_test, action_filter)\n\nfilter_widths = [int(x) for x in args.architecture.split(',')]\nif not args.disable_optimizations and not args.dense and args.stride == 1:\n    # Use optimized model for single-frame predictions\n    model_pos_train = TemporalModelOptimized1f(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], dataset.skeleton().num_joints(),\n                                filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels)\nelse:\n    # When incompatible settings are detected (stride > 1, dense filters, or disabled optimization) fall back to normal model\n    model_pos_train = TemporalModel(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], dataset.skeleton().num_joints(),\n                                filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels,\n                                dense=args.dense)\n    \nmodel_pos = TemporalModel(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], dataset.skeleton().num_joints(),\n                            filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels,\n                            dense=args.dense)\n\nreceptive_field = model_pos.receptive_field()\nprint('INFO: Receptive field: {} frames'.format(receptive_field))\npad = (receptive_field - 1) // 2 # Padding on each side\nif args.causal:\n    print('INFO: Using causal convolutions')\n    causal_shift = pad\nelse:\n    causal_shift = 0\n\nmodel_params = 0\nfor parameter in model_pos.parameters():\n    model_params += parameter.numel()\nprint('INFO: Trainable parameter count:', model_params)\n\nif torch.cuda.is_available():\n    model_pos = model_pos.cuda()\n    model_pos_train = model_pos_train.cuda()\n    \nif args.resume or args.evaluate:\n    chk_filename = os.path.join(args.checkpoint, args.resume if args.resume else args.evaluate)\n    print('Loading checkpoint', chk_filename)\n    checkpoint = torch.load(chk_filename, map_location=lambda storage, loc: storage)\n    print('This model was trained for {} epochs'.format(checkpoint['epoch']))\n    model_pos_train.load_state_dict(checkpoint['model_pos'])\n    model_pos.load_state_dict(checkpoint['model_pos'])\n    \n    if args.evaluate and 'model_traj' in checkpoint:\n        # Load trajectory model if it contained in the checkpoint (e.g. for inference in the wild)\n        model_traj = TemporalModel(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], 1,\n                            filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels,\n                            dense=args.dense)\n        if torch.cuda.is_available():\n            model_traj = model_traj.cuda()\n        model_traj.load_state_dict(checkpoint['model_traj'])\n    else:\n        model_traj = None\n        \n    \ntest_generator = UnchunkedGenerator(cameras_valid, poses_valid, poses_valid_2d,\n                                    pad=pad, causal_shift=causal_shift, augment=False,\n                                    kps_left=kps_left, kps_right=kps_right, joints_left=joints_left, joints_right=joints_right)\nprint('INFO: Testing on {} frames'.format(test_generator.num_frames()))\n\nif not args.evaluate:\n    cameras_train, poses_train, poses_train_2d = fetch(subjects_train, action_filter, subset=args.subset)\n\n    lr = args.learning_rate\n    if semi_supervised:\n        cameras_semi, _, poses_semi_2d = fetch(subjects_semi, action_filter, parse_3d_poses=False)\n        \n        if not args.disable_optimizations and not args.dense and args.stride == 1:\n            # Use optimized model for single-frame predictions\n            model_traj_train = TemporalModelOptimized1f(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], 1,\n                    filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels)\n        else:\n            # When incompatible settings are detected (stride > 1, dense filters, or disabled optimization) fall back to normal model\n            model_traj_train = TemporalModel(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], 1,\n                    filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels,\n                    dense=args.dense)\n        \n        model_traj = TemporalModel(poses_valid_2d[0].shape[-2], poses_valid_2d[0].shape[-1], 1,\n                            filter_widths=filter_widths, causal=args.causal, dropout=args.dropout, channels=args.channels,\n                            dense=args.dense)\n        if torch.cuda.is_available():\n            model_traj = model_traj.cuda()\n            model_traj_train = model_traj_train.cuda()\n        optimizer = optim.Adam(list(model_pos_train.parameters()) + list(model_traj_train.parameters()),\n                               lr=lr, amsgrad=True)\n        \n        losses_2d_train_unlabeled = []\n        losses_2d_train_labeled_eval = []\n        losses_2d_train_unlabeled_eval = []\n        losses_2d_valid = []\n\n        losses_traj_train = []\n        losses_traj_train_eval = []\n        losses_traj_valid = []\n    else:\n        optimizer = optim.Adam(model_pos_train.parameters(), lr=lr, amsgrad=True)\n        \n    lr_decay = args.lr_decay\n\n    losses_3d_train = []\n    losses_3d_train_eval = []\n    losses_3d_valid = []\n\n    epoch = 0\n    initial_momentum = 0.1\n    final_momentum = 0.001\n    \n    \n    train_generator = ChunkedGenerator(args.batch_size//args.stride, cameras_train, poses_train, poses_train_2d, args.stride,\n                                       pad=pad, causal_shift=causal_shift, shuffle=True, augment=args.data_augmentation,\n                                       kps_left=kps_left, kps_right=kps_right, joints_left=joints_left, joints_right=joints_right)\n    train_generator_eval = UnchunkedGenerator(cameras_train, poses_train, poses_train_2d,\n                                              pad=pad, causal_shift=causal_shift, augment=False)\n    print('INFO: Training on {} frames'.format(train_generator_eval.num_frames()))\n    if semi_supervised:\n        semi_generator = ChunkedGenerator(args.batch_size//args.stride, cameras_semi, None, poses_semi_2d, args.stride,\n                                          pad=pad, causal_shift=causal_shift, shuffle=True,\n                                          random_seed=4321, augment=args.data_augmentation,\n                                          kps_left=kps_left, kps_right=kps_right, joints_left=joints_left, joints_right=joints_right,\n                                          endless=True)\n        semi_generator_eval = UnchunkedGenerator(cameras_semi, None, poses_semi_2d,\n                                                 pad=pad, causal_shift=causal_shift, augment=False)\n        print('INFO: Semi-supervision on {} frames'.format(semi_generator_eval.num_frames()))\n\n    if args.resume:\n        epoch = checkpoint['epoch']\n        if 'optimizer' in checkpoint and checkpoint['optimizer'] is not None:\n            optimizer.load_state_dict(checkpoint['optimizer'])\n            train_generator.set_random_state(checkpoint['random_state'])\n        else:\n            print('WARNING: this checkpoint does not contain an optimizer state. The optimizer will be reinitialized.')\n        \n        lr = checkpoint['lr']\n        if semi_supervised:\n            model_traj_train.load_state_dict(checkpoint['model_traj'])\n            model_traj.load_state_dict(checkpoint['model_traj'])\n            semi_generator.set_random_state(checkpoint['random_state_semi'])\n            \n    print('** Note: reported losses are averaged over all frames and test-time augmentation is not used here.')\n    print('** The final evaluation will be carried out after the last training epoch.')\n    \n    # Pos model only\n    while epoch < args.epochs:\n        start_time = time()\n        epoch_loss_3d_train = 0\n        epoch_loss_traj_train = 0\n        epoch_loss_2d_train_unlabeled = 0\n        N = 0\n        N_semi = 0\n        model_pos_train.train()\n        if semi_supervised:\n            # Semi-supervised scenario\n            model_traj_train.train()\n            for (_, batch_3d, batch_2d), (cam_semi, _, batch_2d_semi) in \\\n                zip(train_generator.next_epoch(), semi_generator.next_epoch()):\n                \n                # Fall back to supervised training for the first epoch (to avoid instability)\n                skip = epoch < args.warmup\n                \n                cam_semi = torch.from_numpy(cam_semi.astype('float32'))\n                inputs_3d = torch.from_numpy(batch_3d.astype('float32'))\n                if torch.cuda.is_available():\n                    cam_semi = cam_semi.cuda()\n                    inputs_3d = inputs_3d.cuda()\n                    \n                inputs_traj = inputs_3d[:, :, :1].clone()\n                inputs_3d[:, :, 0] = 0\n                \n                # Split point between labeled and unlabeled samples in the batch\n                split_idx = inputs_3d.shape[0]\n\n                inputs_2d = torch.from_numpy(batch_2d.astype('float32'))\n                inputs_2d_semi = torch.from_numpy(batch_2d_semi.astype('float32'))\n                if torch.cuda.is_available():\n                    inputs_2d = inputs_2d.cuda()\n                    inputs_2d_semi = inputs_2d_semi.cuda()\n                inputs_2d_cat =  torch.cat((inputs_2d, inputs_2d_semi), dim=0) if not skip else inputs_2d\n\n                optimizer.zero_grad()\n\n                # Compute 3D poses\n                predicted_3d_pos_cat = model_pos_train(inputs_2d_cat)\n\n                loss_3d_pos = mpjpe(predicted_3d_pos_cat[:split_idx], inputs_3d)\n                epoch_loss_3d_train += inputs_3d.shape[0]*inputs_3d.shape[1] * loss_3d_pos.item()\n                N += inputs_3d.shape[0]*inputs_3d.shape[1]\n                loss_total = loss_3d_pos\n\n                # Compute global trajectory\n                predicted_traj_cat = model_traj_train(inputs_2d_cat)\n                w = 1 / inputs_traj[:, :, :, 2] # Weight inversely proportional to depth\n                loss_traj = weighted_mpjpe(predicted_traj_cat[:split_idx], inputs_traj, w)\n                epoch_loss_traj_train += inputs_3d.shape[0]*inputs_3d.shape[1] * loss_traj.item()\n                assert inputs_traj.shape[0]*inputs_traj.shape[1] == inputs_3d.shape[0]*inputs_3d.shape[1]\n                loss_total += loss_traj\n\n                if not skip:\n                    # Semi-supervised loss for unlabeled samples\n                    predicted_semi = predicted_3d_pos_cat[split_idx:]\n                    if pad > 0:\n                        target_semi = inputs_2d_semi[:, pad:-pad, :, :2].contiguous()\n                    else:\n                        target_semi = inputs_2d_semi[:, :, :, :2].contiguous()\n                        \n                    projection_func = project_to_2d_linear if args.linear_projection else project_to_2d\n                    reconstruction_semi = projection_func(predicted_semi + predicted_traj_cat[split_idx:], cam_semi)\n\n                    loss_reconstruction = mpjpe(reconstruction_semi, target_semi) # On 2D poses\n                    epoch_loss_2d_train_unlabeled += predicted_semi.shape[0]*predicted_semi.shape[1] * loss_reconstruction.item()\n                    if not args.no_proj:\n                        loss_total += loss_reconstruction\n                    \n                    # Bone length term to enforce kinematic constraints\n                    if args.bone_length_term:\n                        dists = predicted_3d_pos_cat[:, :, 1:] - predicted_3d_pos_cat[:, :, dataset.skeleton().parents()[1:]]\n                        bone_lengths = torch.mean(torch.norm(dists, dim=3), dim=1)\n                        penalty = torch.mean(torch.abs(torch.mean(bone_lengths[:split_idx], dim=0) \\\n                                                     - torch.mean(bone_lengths[split_idx:], dim=0)))\n                        loss_total += penalty\n                        \n                    \n                    N_semi += predicted_semi.shape[0]*predicted_semi.shape[1]\n                else:\n                    N_semi += 1 # To avoid division by zero\n\n                loss_total.backward()\n\n                optimizer.step()\n            losses_traj_train.append(epoch_loss_traj_train / N)\n            losses_2d_train_unlabeled.append(epoch_loss_2d_train_unlabeled / N_semi)\n        else:\n            # Regular supervised scenario\n            for _, batch_3d, batch_2d in train_generator.next_epoch():\n                inputs_3d = torch.from_numpy(batch_3d.astype('float32'))\n                inputs_2d = torch.from_numpy(batch_2d.astype('float32'))\n                if torch.cuda.is_available():\n                    inputs_3d = inputs_3d.cuda()\n                    inputs_2d = inputs_2d.cuda()\n                inputs_3d[:, :, 0] = 0\n\n                optimizer.zero_grad()\n\n                # Predict 3D poses\n                predicted_3d_pos = model_pos_train(inputs_2d)\n                loss_3d_pos = mpjpe(predicted_3d_pos, inputs_3d)\n                epoch_loss_3d_train += inputs_3d.shape[0]*inputs_3d.shape[1] * loss_3d_pos.item()\n                N += inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                loss_total = loss_3d_pos\n                loss_total.backward()\n\n                optimizer.step()\n\n        losses_3d_train.append(epoch_loss_3d_train / N)\n\n        # End-of-epoch evaluation\n        with torch.no_grad():\n            model_pos.load_state_dict(model_pos_train.state_dict())\n            model_pos.eval()\n            if semi_supervised:\n                model_traj.load_state_dict(model_traj_train.state_dict())\n                model_traj.eval()\n\n            epoch_loss_3d_valid = 0\n            epoch_loss_traj_valid = 0\n            epoch_loss_2d_valid = 0\n            N = 0\n            \n            if not args.no_eval:\n                # Evaluate on test set\n                for cam, batch, batch_2d in test_generator.next_epoch():\n                    inputs_3d = torch.from_numpy(batch.astype('float32'))\n                    inputs_2d = torch.from_numpy(batch_2d.astype('float32'))\n                    if torch.cuda.is_available():\n                        inputs_3d = inputs_3d.cuda()\n                        inputs_2d = inputs_2d.cuda()\n                    inputs_traj = inputs_3d[:, :, :1].clone()\n                    inputs_3d[:, :, 0] = 0\n\n                    # Predict 3D poses\n                    predicted_3d_pos = model_pos(inputs_2d)\n                    loss_3d_pos = mpjpe(predicted_3d_pos, inputs_3d)\n                    epoch_loss_3d_valid += inputs_3d.shape[0]*inputs_3d.shape[1] * loss_3d_pos.item()\n                    N += inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                    if semi_supervised:\n                        cam = torch.from_numpy(cam.astype('float32'))\n                        if torch.cuda.is_available():\n                            cam = cam.cuda()\n\n                        predicted_traj = model_traj(inputs_2d)\n                        loss_traj = mpjpe(predicted_traj, inputs_traj)\n                        epoch_loss_traj_valid += inputs_traj.shape[0]*inputs_traj.shape[1] * loss_traj.item()\n                        assert inputs_traj.shape[0]*inputs_traj.shape[1] == inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                        if pad > 0:\n                            target = inputs_2d[:, pad:-pad, :, :2].contiguous()\n                        else:\n                            target = inputs_2d[:, :, :, :2].contiguous()\n                        reconstruction = project_to_2d(predicted_3d_pos + predicted_traj, cam)\n                        loss_reconstruction = mpjpe(reconstruction, target) # On 2D poses\n                        epoch_loss_2d_valid += reconstruction.shape[0]*reconstruction.shape[1] * loss_reconstruction.item()\n                        assert reconstruction.shape[0]*reconstruction.shape[1] == inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                losses_3d_valid.append(epoch_loss_3d_valid / N)\n                if semi_supervised:\n                    losses_traj_valid.append(epoch_loss_traj_valid / N)\n                    losses_2d_valid.append(epoch_loss_2d_valid / N)\n\n\n                # Evaluate on training set, this time in evaluation mode\n                epoch_loss_3d_train_eval = 0\n                epoch_loss_traj_train_eval = 0\n                epoch_loss_2d_train_labeled_eval = 0\n                N = 0\n                for cam, batch, batch_2d in train_generator_eval.next_epoch():\n                    if batch_2d.shape[1] == 0:\n                        # This can only happen when downsampling the dataset\n                        continue\n                        \n                    inputs_3d = torch.from_numpy(batch.astype('float32'))\n                    inputs_2d = torch.from_numpy(batch_2d.astype('float32'))\n                    if torch.cuda.is_available():\n                        inputs_3d = inputs_3d.cuda()\n                        inputs_2d = inputs_2d.cuda()\n                    inputs_traj = inputs_3d[:, :, :1].clone()\n                    inputs_3d[:, :, 0] = 0\n\n                    # Compute 3D poses\n                    predicted_3d_pos = model_pos(inputs_2d)\n                    loss_3d_pos = mpjpe(predicted_3d_pos, inputs_3d)\n                    epoch_loss_3d_train_eval += inputs_3d.shape[0]*inputs_3d.shape[1] * loss_3d_pos.item()\n                    N += inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                    if semi_supervised:\n                        cam = torch.from_numpy(cam.astype('float32'))\n                        if torch.cuda.is_available():\n                            cam = cam.cuda()\n                        predicted_traj = model_traj(inputs_2d)\n                        loss_traj = mpjpe(predicted_traj, inputs_traj)\n                        epoch_loss_traj_train_eval += inputs_traj.shape[0]*inputs_traj.shape[1] * loss_traj.item()\n                        assert inputs_traj.shape[0]*inputs_traj.shape[1] == inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                        if pad > 0:\n                            target = inputs_2d[:, pad:-pad, :, :2].contiguous()\n                        else:\n                            target = inputs_2d[:, :, :, :2].contiguous()\n                        reconstruction = project_to_2d(predicted_3d_pos + predicted_traj, cam)\n                        loss_reconstruction = mpjpe(reconstruction, target)\n                        epoch_loss_2d_train_labeled_eval += reconstruction.shape[0]*reconstruction.shape[1] * loss_reconstruction.item()\n                        assert reconstruction.shape[0]*reconstruction.shape[1] == inputs_3d.shape[0]*inputs_3d.shape[1]\n\n                losses_3d_train_eval.append(epoch_loss_3d_train_eval / N)\n                if semi_supervised:\n                    losses_traj_train_eval.append(epoch_loss_traj_train_eval / N)\n                    losses_2d_train_labeled_eval.append(epoch_loss_2d_train_labeled_eval / N)\n\n                # Evaluate 2D loss on unlabeled training set (in evaluation mode)\n                epoch_loss_2d_train_unlabeled_eval = 0\n                N_semi = 0\n                if semi_supervised:\n                    for cam, _, batch_2d in semi_generator_eval.next_epoch():\n                        cam = torch.from_numpy(cam.astype('float32'))\n                        inputs_2d_semi = torch.from_numpy(batch_2d.astype('float32'))\n                        if torch.cuda.is_available():\n                            cam = cam.cuda()\n                            inputs_2d_semi = inputs_2d_semi.cuda()\n\n                        predicted_3d_pos_semi = model_pos(inputs_2d_semi)\n                        predicted_traj_semi = model_traj(inputs_2d_semi)\n                        if pad > 0:\n                            target_semi = inputs_2d_semi[:, pad:-pad, :, :2].contiguous()\n                        else:\n                            target_semi = inputs_2d_semi[:, :, :, :2].contiguous()\n                        reconstruction_semi = project_to_2d(predicted_3d_pos_semi + predicted_traj_semi, cam)\n                        loss_reconstruction_semi = mpjpe(reconstruction_semi, target_semi)\n\n                        epoch_loss_2d_train_unlabeled_eval += reconstruction_semi.shape[0]*reconstruction_semi.shape[1] \\\n                                                              * loss_reconstruction_semi.item()\n                        N_semi += reconstruction_semi.shape[0]*reconstruction_semi.shape[1]\n                    losses_2d_train_unlabeled_eval.append(epoch_loss_2d_train_unlabeled_eval / N_semi)\n\n        elapsed = (time() - start_time)/60\n        \n        if args.no_eval:\n            print('[%d] time %.2f lr %f 3d_train %f' % (\n                    epoch + 1,\n                    elapsed,\n                    lr,\n                    losses_3d_train[-1] * 1000))\n        else:\n            if semi_supervised:\n                print('[%d] time %.2f lr %f 3d_train %f 3d_eval %f traj_eval %f 3d_valid %f '\n                      'traj_valid %f 2d_train_sup %f 2d_train_unsup %f 2d_valid %f' % (\n                        epoch + 1,\n                        elapsed,\n                        lr,\n                        losses_3d_train[-1] * 1000,\n                        losses_3d_train_eval[-1] * 1000,\n                        losses_traj_train_eval[-1] * 1000,\n                        losses_3d_valid[-1] * 1000,\n                        losses_traj_valid[-1] * 1000,\n                        losses_2d_train_labeled_eval[-1],\n                        losses_2d_train_unlabeled_eval[-1],\n                        losses_2d_valid[-1]))\n            else:\n                print('[%d] time %.2f lr %f 3d_train %f 3d_eval %f 3d_valid %f' % (\n                        epoch + 1,\n                        elapsed,\n                        lr,\n                        losses_3d_train[-1] * 1000,\n                        losses_3d_train_eval[-1] * 1000,\n                        losses_3d_valid[-1]  *1000))\n        \n        # Decay learning rate exponentially\n        lr *= lr_decay\n        for param_group in optimizer.param_groups:\n            param_group['lr'] *= lr_decay\n        epoch += 1\n        \n        # Decay BatchNorm momentum\n        momentum = initial_momentum * np.exp(-epoch/args.epochs * np.log(initial_momentum/final_momentum))\n        model_pos_train.set_bn_momentum(momentum)\n        if semi_supervised:\n            model_traj_train.set_bn_momentum(momentum)\n            \n        # Save checkpoint if necessary\n        if epoch % args.checkpoint_frequency == 0:\n            chk_path = os.path.join(args.checkpoint, 'epoch_{}.bin'.format(epoch))\n            print('Saving checkpoint to', chk_path)\n            \n            torch.save({\n                'epoch': epoch,\n                'lr': lr,\n                'random_state': train_generator.random_state(),\n                'optimizer': optimizer.state_dict(),\n                'model_pos': model_pos_train.state_dict(),\n                'model_traj': model_traj_train.state_dict() if semi_supervised else None,\n                'random_state_semi': semi_generator.random_state() if semi_supervised else None,\n            }, chk_path)\n            \n        # Save training curves after every epoch, as .png images (if requested)\n        if args.export_training_curves and epoch > 3:\n            if 'matplotlib' not in sys.modules:\n                import matplotlib\n                matplotlib.use('Agg')\n                import matplotlib.pyplot as plt\n            \n            plt.figure()\n            epoch_x = np.arange(3, len(losses_3d_train)) + 1\n            plt.plot(epoch_x, losses_3d_train[3:], '--', color='C0')\n            plt.plot(epoch_x, losses_3d_train_eval[3:], color='C0')\n            plt.plot(epoch_x, losses_3d_valid[3:], color='C1')\n            plt.legend(['3d train', '3d train (eval)', '3d valid (eval)'])\n            plt.ylabel('MPJPE (m)')\n            plt.xlabel('Epoch')\n            plt.xlim((3, epoch))\n            plt.savefig(os.path.join(args.checkpoint, 'loss_3d.png'))\n\n            if semi_supervised:\n                plt.figure()\n                plt.plot(epoch_x, losses_traj_train[3:], '--', color='C0')\n                plt.plot(epoch_x, losses_traj_train_eval[3:], color='C0')\n                plt.plot(epoch_x, losses_traj_valid[3:], color='C1')\n                plt.legend(['traj. train', 'traj. train (eval)', 'traj. valid (eval)'])\n                plt.ylabel('Mean distance (m)')\n                plt.xlabel('Epoch')\n                plt.xlim((3, epoch))\n                plt.savefig(os.path.join(args.checkpoint, 'loss_traj.png'))\n\n                plt.figure()\n                plt.plot(epoch_x, losses_2d_train_labeled_eval[3:], color='C0')\n                plt.plot(epoch_x, losses_2d_train_unlabeled[3:], '--', color='C1')\n                plt.plot(epoch_x, losses_2d_train_unlabeled_eval[3:], color='C1')\n                plt.plot(epoch_x, losses_2d_valid[3:], color='C2')\n                plt.legend(['2d train labeled (eval)', '2d train unlabeled', '2d train unlabeled (eval)', '2d valid (eval)'])\n                plt.ylabel('MPJPE (2D)')\n                plt.xlabel('Epoch')\n                plt.xlim((3, epoch))\n                plt.savefig(os.path.join(args.checkpoint, 'loss_2d.png'))\n            plt.close('all')\n\n# Evaluate\ndef evaluate(test_generator, action=None, return_predictions=False, use_trajectory_model=False):\n    epoch_loss_3d_pos = 0\n    epoch_loss_3d_pos_procrustes = 0\n    epoch_loss_3d_pos_scale = 0\n    epoch_loss_3d_vel = 0\n    with torch.no_grad():\n        if not use_trajectory_model:\n            model_pos.eval()\n        else:\n            model_traj.eval()\n        N = 0\n        for _, batch, batch_2d in test_generator.next_epoch():\n            inputs_2d = torch.from_numpy(batch_2d.astype('float32'))\n            if torch.cuda.is_available():\n                inputs_2d = inputs_2d.cuda()\n\n            # Positional model\n            if not use_trajectory_model:\n                predicted_3d_pos = model_pos(inputs_2d)\n            else:\n                predicted_3d_pos = model_traj(inputs_2d)\n\n            # Test-time augmentation (if enabled)\n            if test_generator.augment_enabled():\n                # Undo flipping and take average with non-flipped version\n                predicted_3d_pos[1, :, :, 0] *= -1\n                if not use_trajectory_model:\n                    predicted_3d_pos[1, :, joints_left + joints_right] = predicted_3d_pos[1, :, joints_right + joints_left]\n                predicted_3d_pos = torch.mean(predicted_3d_pos, dim=0, keepdim=True)\n                \n            if return_predictions:\n                return predicted_3d_pos.squeeze(0).cpu().numpy()\n                \n            inputs_3d = torch.from_numpy(batch.astype('float32'))\n            if torch.cuda.is_available():\n                inputs_3d = inputs_3d.cuda()\n            inputs_3d[:, :, 0] = 0    \n            if test_generator.augment_enabled():\n                inputs_3d = inputs_3d[:1]\n\n            error = mpjpe(predicted_3d_pos, inputs_3d)\n            epoch_loss_3d_pos_scale += inputs_3d.shape[0]*inputs_3d.shape[1] * n_mpjpe(predicted_3d_pos, inputs_3d).item()\n\n            epoch_loss_3d_pos += inputs_3d.shape[0]*inputs_3d.shape[1] * error.item()\n            N += inputs_3d.shape[0] * inputs_3d.shape[1]\n            \n            inputs = inputs_3d.cpu().numpy().reshape(-1, inputs_3d.shape[-2], inputs_3d.shape[-1])\n            predicted_3d_pos = predicted_3d_pos.cpu().numpy().reshape(-1, inputs_3d.shape[-2], inputs_3d.shape[-1])\n\n            epoch_loss_3d_pos_procrustes += inputs_3d.shape[0]*inputs_3d.shape[1] * p_mpjpe(predicted_3d_pos, inputs)\n\n            # Compute velocity error\n            epoch_loss_3d_vel += inputs_3d.shape[0]*inputs_3d.shape[1] * mean_velocity_error(predicted_3d_pos, inputs)\n            \n    if action is None:\n        print('----------')\n    else:\n        print('----'+action+'----')\n    e1 = (epoch_loss_3d_pos / N)*1000\n    e2 = (epoch_loss_3d_pos_procrustes / N)*1000\n    e3 = (epoch_loss_3d_pos_scale / N)*1000\n    ev = (epoch_loss_3d_vel / N)*1000\n    print('Test time augmentation:', test_generator.augment_enabled())\n    print('Protocol #1 Error (MPJPE):', e1, 'mm')\n    print('Protocol #2 Error (P-MPJPE):', e2, 'mm')\n    print('Protocol #3 Error (N-MPJPE):', e3, 'mm')\n    print('Velocity Error (MPJVE):', ev, 'mm')\n    print('----------')\n\n    return e1, e2, e3, ev\n\n\nif args.render:\n    print('Rendering...')\n    \n    input_keypoints = keypoints[args.viz_subject][args.viz_action][args.viz_camera].copy()\n    ground_truth = None\n    if args.viz_subject in dataset.subjects() and args.viz_action in dataset[args.viz_subject]:\n        if 'positions_3d' in dataset[args.viz_subject][args.viz_action]:\n            ground_truth = dataset[args.viz_subject][args.viz_action]['positions_3d'][args.viz_camera].copy()\n    if ground_truth is None:\n        print('INFO: this action is unlabeled. Ground truth will not be rendered.')\n        \n    gen = UnchunkedGenerator(None, None, [input_keypoints],\n                             pad=pad, causal_shift=causal_shift, augment=args.test_time_augmentation,\n                             kps_left=kps_left, kps_right=kps_right, joints_left=joints_left, joints_right=joints_right)\n    prediction = evaluate(gen, return_predictions=True)\n    if model_traj is not None and ground_truth is None:\n        prediction_traj = evaluate(gen, return_predictions=True, use_trajectory_model=True)\n        prediction += prediction_traj\n    \n    if args.viz_export is not None:\n        print('Exporting joint positions to', args.viz_export)\n        # Predictions are in camera space\n        np.save(args.viz_export, prediction)\n    \n    if args.viz_output is not None:\n        if ground_truth is not None:\n            # Reapply trajectory\n            trajectory = ground_truth[:, :1]\n            ground_truth[:, 1:] += trajectory\n            prediction += trajectory\n        \n        # Invert camera transformation\n        cam = dataset.cameras()[args.viz_subject][args.viz_camera]\n        if ground_truth is not None:\n            prediction = camera_to_world(prediction, R=cam['orientation'], t=cam['translation'])\n            ground_truth = camera_to_world(ground_truth, R=cam['orientation'], t=cam['translation'])\n        else:\n            # If the ground truth is not available, take the camera extrinsic params from a random subject.\n            # They are almost the same, and anyway, we only need this for visualization purposes.\n            for subject in dataset.cameras():\n                if 'orientation' in dataset.cameras()[subject][args.viz_camera]:\n                    rot = dataset.cameras()[subject][args.viz_camera]['orientation']\n                    break\n            prediction = camera_to_world(prediction, R=rot, t=0)\n            # We don't have the trajectory, but at least we can rebase the height\n            prediction[:, :, 2] -= np.min(prediction[:, :, 2])\n        \n        anim_output = {'Reconstruction': prediction}\n        if ground_truth is not None and not args.viz_no_ground_truth:\n            anim_output['Ground truth'] = ground_truth\n        \n        input_keypoints = image_coordinates(input_keypoints[..., :2], w=cam['res_w'], h=cam['res_h'])\n        \n        from common.visualization import render_animation\n        render_animation(input_keypoints, keypoints_metadata, anim_output,\n                         dataset.skeleton(), dataset.fps(), args.viz_bitrate, cam['azimuth'], args.viz_output,\n                         limit=args.viz_limit, downsample=args.viz_downsample, size=args.viz_size,\n                         input_video_path=args.viz_video, viewport=(cam['res_w'], cam['res_h']),\n                         input_video_skip=args.viz_skip)\n    \nelse:\n    print('Evaluating...')\n    all_actions = {}\n    all_actions_by_subject = {}\n    for subject in subjects_test:\n        if subject not in all_actions_by_subject:\n            all_actions_by_subject[subject] = {}\n\n        for action in dataset[subject].keys():\n            action_name = action.split(' ')[0]\n            if action_name not in all_actions:\n                all_actions[action_name] = []\n            if action_name not in all_actions_by_subject[subject]:\n                all_actions_by_subject[subject][action_name] = []\n            all_actions[action_name].append((subject, action))\n            all_actions_by_subject[subject][action_name].append((subject, action))\n\n    def fetch_actions(actions):\n        out_poses_3d = []\n        out_poses_2d = []\n\n        for subject, action in actions:\n            poses_2d = keypoints[subject][action]\n            for i in range(len(poses_2d)): # Iterate across cameras\n                out_poses_2d.append(poses_2d[i])\n\n            poses_3d = dataset[subject][action]['positions_3d']\n            assert len(poses_3d) == len(poses_2d), 'Camera count mismatch'\n            for i in range(len(poses_3d)): # Iterate across cameras\n                out_poses_3d.append(poses_3d[i])\n\n        stride = args.downsample\n        if stride > 1:\n            # Downsample as requested\n            for i in range(len(out_poses_2d)):\n                out_poses_2d[i] = out_poses_2d[i][::stride]\n                if out_poses_3d is not None:\n                    out_poses_3d[i] = out_poses_3d[i][::stride]\n        \n        return out_poses_3d, out_poses_2d\n\n    def run_evaluation(actions, action_filter=None):\n        errors_p1 = []\n        errors_p2 = []\n        errors_p3 = []\n        errors_vel = []\n\n        for action_key in actions.keys():\n            if action_filter is not None:\n                found = False\n                for a in action_filter:\n                    if action_key.startswith(a):\n                        found = True\n                        break\n                if not found:\n                    continue\n\n            poses_act, poses_2d_act = fetch_actions(actions[action_key])\n            gen = UnchunkedGenerator(None, poses_act, poses_2d_act,\n                                     pad=pad, causal_shift=causal_shift, augment=args.test_time_augmentation,\n                                     kps_left=kps_left, kps_right=kps_right, joints_left=joints_left, joints_right=joints_right)\n            e1, e2, e3, ev = evaluate(gen, action_key)\n            errors_p1.append(e1)\n            errors_p2.append(e2)\n            errors_p3.append(e3)\n            errors_vel.append(ev)\n\n        print('Protocol #1   (MPJPE) action-wise average:', round(np.mean(errors_p1), 1), 'mm')\n        print('Protocol #2 (P-MPJPE) action-wise average:', round(np.mean(errors_p2), 1), 'mm')\n        print('Protocol #3 (N-MPJPE) action-wise average:', round(np.mean(errors_p3), 1), 'mm')\n        print('Velocity      (MPJVE) action-wise average:', round(np.mean(errors_vel), 2), 'mm')\n\n    if not args.by_subject:\n        run_evaluation(all_actions, action_filter)\n    else:\n        for subject in all_actions_by_subject.keys():\n            print('Evaluating on subject', subject)\n            run_evaluation(all_actions_by_subject[subject], action_filter)\n            print('')"
        }
      ]
    }
  ]
}