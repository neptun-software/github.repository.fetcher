{
  "metadata": {
    "timestamp": 1736559593874,
    "page": 226,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "beeware/toga",
      "stars": 4455,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.142578125,
          "content": "# Add pre-commit hook: pyupgrade\n63ddaa623c66d7386ab29a377cacb791fe334106\n\n# Migrate code style to Black\n10c22a3a5453ca24060caaceee5f93ec095959ae\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.513671875,
          "content": "*.pyc\n*~\n.*.sw[op]\n*.egg-info\n*.dist-info\n.eggs\n.coverage\n.coverage.*\ncoverage.xml\ndist\nbuild\nlogs\n_build\ndistribute-*\ndocs/env\nlocal\n*venv*\n.idea\nPipfile*\n.tox\nnode_modules\ngtk/gi\ngtk/pygtkcompat\ngtk/cairo\n.DS_Store\npip-selfcheck.json\npyvenv.cfg\n.vscode\n.envrc\nbin/\nlib/\n\n# Exclude briefcase packages from the examples dir.\nexamples/*/macOS/\nexamples/*/iOS/\nexamples/*/linux/\nexamples/*/android/\nexamples/*/django/\nexamples/*/windows/\nexamples/*/web/\n\n# Memory Profiler\nmprofile_*.dat\n\n# Briefcase log files.\nbriefcase.*.log\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.92578125,
          "content": "exclude: \"^(examples/.template)/\"\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-toml\n      - id: check-yaml\n      - id: check-case-conflict\n      - id: check-docstring-first\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n      - id: pyupgrade\n        args: [--py39-plus]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.10.0\n    hooks:\n      - id: black\n        language_version: python3\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n    - id: codespell\n      # remove toml extra once Python 3.10 is no longer supported\n      additional_dependencies: ['.[toml]']\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.87109375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    # Docs are always built on Python 3.12. See also the tox config and contribution docs.\n    python: \"3.12\"\n  jobs:\n    post_checkout:\n      # RTD defaults to a depth of 50 but Toga versioning may require\n      # much more git history to accurately determine the SCM version\n      - git fetch --unshallow\n    pre_build:\n      - tox -e docs-lint\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  builder: html\n  configuration: docs/conf.py\n  fail_on_warning: true\n\n# Build docs as PDF (other options are epub and htmlzip)\nformats:\n   - pdf\n\n# Install extras for build - dev is needed to run tox\npython:\n  install:\n  - method: pip\n    path: core\n    extra_requirements:\n      - dev\n      - docs\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.1787109375,
          "content": "# Contributing\n\nBeeWare <3's contributions!\n\nPlease be aware, BeeWare operates under a Code of Conduct.\n\nSee [CONTRIBUTING to BeeWare](https://beeware.org/contributing/) for details.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.484375,
          "content": "Copyright (c) 2014 Russell Keith-Magee.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of Toga nor the names of its contributors may\n       be used to endorse or promote products derived from this software without\n       specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.4462890625,
          "content": ".. |logo| image:: https://beeware.org/project/projects/libraries/toga/toga.png\n    :width: 72px\n    :target: https://beeware.org/toga\n\n.. |pyversions| image:: https://img.shields.io/pypi/pyversions/toga.svg\n    :target: https://pypi.python.org/pypi/toga\n    :alt: Python Versions\n\n.. |version| image:: https://img.shields.io/pypi/v/toga.svg\n    :target: https://pypi.python.org/pypi/toga\n    :alt: Project version\n\n.. |maturity| image:: https://img.shields.io/pypi/status/toga.svg\n    :target: https://pypi.python.org/pypi/toga\n    :alt: Project status\n\n.. |license| image:: https://img.shields.io/pypi/l/toga.svg\n    :target: https://github.com/beeware/toga/blob/main/LICENSE\n    :alt: BSD License\n\n.. |ci| image:: https://github.com/beeware/toga/workflows/CI/badge.svg?branch=main\n   :target: https://github.com/beeware/toga/actions\n   :alt: Build Status\n\n.. |social| image:: https://img.shields.io/discord/836455665257021440?label=Discord%20Chat&logo=discord&style=plastic\n   :target: https://beeware.org/bee/chat/\n   :alt: Discord server\n\n|logo|\n\nToga\n====\n\n|pyversions| |version| |maturity| |license| |ci| |social|\n\nA Python native, OS native GUI toolkit.\n\nMinimum requirements\n--------------------\n\n* Toga requires **Python 3.9 or higher**.\n\n* If you're on macOS, you need to be on 11 (Big Sur) or newer.\n\n* If you're on Windows, you'll need Windows 10 or newer. If you are using\n  Windows 10 and want to use a WebView to display web content, you will also\n  need to install the `Edge WebView2 Evergreen Runtime\n  <https://developer.microsoft.com/en-us/microsoft-edge/webview2/#download-section>`__.\n  Windows 11 has this runtime installed by default.\n\n* If you're on Linux (or another Unix-based operating system), you need to have\n  GTK+ >= 3.24 and glib >= 2.64. These are available starting with Ubuntu 20.04 and\n  Fedora 32. You also need to install the system packages listed in `Linux platform\n  documentation <https://toga.readthedocs.io/en/latest/reference/platforms/linux.html#prerequisites>`__.\n\nQuickstart\n----------\n\nTo get a demonstration of the capabilities of Toga, run the following::\n\n    $ pip install toga-demo\n    $ toga-demo\n\nThis will pop up a GUI window with some sample widgets.\n\nDocumentation\n-------------\n\nDocumentation for Toga can be found on `Read The Docs`_.\n\n.. _Read The Docs: https://toga.readthedocs.io\n\nCommunity\n---------\n\nToga is part of the `BeeWare suite`_. You can talk to the community through:\n\n* `@beeware@fosstodon.org on Mastodon`_\n* `Discord`_\n* The Toga `Github Discussions forum`_\n\nWe foster a welcoming and respectful community as described in our\n`BeeWare Community Code of Conduct`_.\n\n.. _BeeWare suite: https://beeware.org\n.. _@beeware@fosstodon.org on Mastodon: https://fosstodon.org/@beeware\n.. _Discord: https://beeware.org/bee/chat/\n.. _Github Discussions forum: https://github.com/beeware/toga/discussions\n.. _BeeWare Community Code of Conduct: https://beeware.org/community/behavior/\n\nContributing\n------------\n\nIf you'd like to contribute to Toga development, our `guide for first time\ncontributors`_ will help you get started.\n\nIf you experience problems with Toga, `log them on GitHub`_. If you want to\ncontribute code, please `fork the code`_ and `submit a pull request`_.\n\n.. _guide for first time contributors: https://toga.readthedocs.io/en/latest/how-to/contribute/index.html\n.. _log them on Github: https://github.com/beeware/toga/issues\n.. _fork the code: https://github.com/beeware/toga\n.. _submit a pull request: https://github.com/beeware/toga/pulls\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "changes",
          "type": "tree",
          "content": null
        },
        {
          "name": "cocoa",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "dummy",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gtk",
          "type": "tree",
          "content": null
        },
        {
          "name": "iOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.0390625,
          "content": "[tool.codespell]\nskip = \".git,*.pdf,*.svg\"\n# the way to make case sensitive skips of words etc\nignore-regex = \"\\bNd\\b\"\nignore-words-list = \"te,crate,re-use,MapPin\"\n\n# The coverage settings in this file only control `coverage report`. `coverage run` and\n# `coverage combine` are controlled by the pyproject.toml files in each package's\n# subdirectory.\n#\n# In each subdirectory's pyproject.toml, we use both of the following settings:\n#   * `source_pkgs`: detects the given packages no matter where they're imported from.\n#   * `source`: detects all files in the given directory, including files that are\n#      never imported by the tests.\n#\n# When running through `tox`, this will produce duplicate entries which must be merged\n# with `coverage combine`.\n\n[tool.coverage.run]\nplugins = [\"coverage_conditional_plugin\"]\nrelative_files = true\n\n[tool.coverage.report]\nshow_missing = true\nskip_covered = true\nskip_empty = true\nprecision = 1\nexclude_lines = [\n    \"pragma: no cover\",\n    \"@(abc\\\\.)?abstractmethod\",\n    \"NotImplementedError\\\\(\\\\)\",\n    \"if TYPE_CHECKING:\",\n    \"class .+?\\\\(Protocol.*\\\\):\",\n    \"@overload\",\n]\n\n[tool.coverage.coverage_conditional_plugin.rules]\nno-cover-if-missing-setuptools_scm = \"not is_installed('setuptools_scm')\"\nno-cover-if-missing-PIL = \"not is_installed('PIL')\"\nno-cover-if-PIL-installed = \"is_installed('PIL')\"\nno-cover-if-lt-py311 = \"sys_version_info < (3, 11) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'\"\nno-cover-if-gte-py311 = \"sys_version_info > (3, 11) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'\"\nno-cover-if-lt-py310 = \"sys_version_info < (3, 10) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'\"\nno-cover-if-gte-py310 = \"sys_version_info > (3, 10) and os_environ.get('COVERAGE_EXCLUDE_PYTHON_VERSION') != 'disable'\"\n\n[tool.isort]\nprofile = \"black\"\nsplit_on_trailing_comma = true\ncombine_as_imports = true\nknown_third_party = [\n    \"android\",  # isort defaults to making this first-party for some reason.\n]\nknown_first_party = [\n    \"testbed\",\n    \"toga\",\n    \"toga_android\",\n    \"toga_cocoa\",\n    \"toga_dummy\",\n    \"toga_gtk\",\n    \"toga_iOS\",\n    \"toga_web\",\n    \"toga_winforms\",\n]\n\n[tool.towncrier]\ndirectory = \"changes\"\npackage = \"toga\"\npackage_dir = \"core/src\"\nfilename = \"docs/background/project/releases.rst\"\ntitle_format = \"{version} ({project_date})\"\nissue_format = \"`#{issue} <https://github.com/beeware/toga/issues/{issue}>`__\"\ntemplate = \"changes/template.rst\"\ntype = [\n    { directory = \"feature\", name = \"Features\", showcontent = true },\n    { directory = \"bugfix\", name = \"Bugfixes\", showcontent = true },\n    { directory = \"removal\", name = \"Backward Incompatible Changes\", showcontent = true },\n    { directory = \"doc\", name = \"Documentation\", showcontent = true },\n    { directory = \"misc\", name = \"Misc\", showcontent = false },\n]\n\n[tool.setuptools_scm]\n# We're not doing anything Python-related at the root level of the repo, but if this\n# declaration isn't here, tox commands run from the root directory raise a warning that\n# pyproject.toml doesn't contain a setuptools_scm section.\n"
        },
        {
          "name": "testbed",
          "type": "tree",
          "content": null
        },
        {
          "name": "textual",
          "type": "tree",
          "content": null
        },
        {
          "name": "toga",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 4.142578125,
          "content": "# Flake8 doesn't provide a pyproject configuration, but allows tox.ini\n[flake8]\nmax-line-length = 88\nextend-ignore =\n    # whitespace before :\n    # See https://github.com/PyCQA/pycodestyle/issues/373\n    E203,\n\n[tox]\nenvlist = py{39,310,311,312,313}-cov,coverage\nlabels =\n    test = py-cov,coverage\n    test39 = py39-cov,coverage39\n    test310 = py310-cov,coverage310\n    test311 = py311-cov,coverage311\n    test312 = py312-cov,coverage312\n    test313 = py313-cov,coverage313\n    ci = towncrier-check,docs-lint,pre-commit,py{39,310,311,312,313}-cov,coverage-fail-platform\nskip_missing_interpreters = True\n\n[testenv:pre-commit]\nskip_install = True\ndeps =\n    {tox_root}{/}core[dev]\ncommands = pre-commit run --all-files --show-diff-on-failure --color=always\n\n# The leading comma generates the \"py\" environment\n[testenv:py{,39,310,311,312,313}{,-cov}]\ndepends = pre-commit\nchangedir = core\nskip_install = True\nsetenv =\n    TOGA_BACKEND = toga_dummy\nallowlist_externals =\n    bash\ncommands =\n    # TOGA_INSTALL_COMMAND is set to a bash command by the CI workflow\n    # Install as editable so parallel runs don't clobber the build directory for each other\n    {env:TOGA_INSTALL_COMMAND:python -m pip install {tox_root}{/}core[dev] {tox_root}{/}dummy}\n    !cov: python -m pytest {posargs:-vv --color yes}\n    cov : python -m coverage run -m pytest {posargs:-vv --color yes}\n\n[testenv:coverage{,39,310,311,312,313}{,-html}{,-keep}{,-fail}{,-platform}]\ndepends = pre-commit,py{,39,310,311,312,313}{,-cov}\nchangedir = core\nskip_install = True\n# by default, coverage should run on oldest supported Python for testing platform coverage.\n# however, coverage for a particular Python version should match the version used for pytest.\nbase_python =\n    coverage39: py39\n    coverage310: py310\n    coverage311: py311\n    coverage312: py312\n    coverage313: py313\ndeps =\n    {tox_root}{/}core[dev]\nsetenv =\n    keep: COMBINE_KEEP = --keep\n    fail: REPORT_FAIL_COND = --fail-under=100\n    CORE_RCFILE = --rcfile {tox_root}{/}core{/}pyproject.toml\n    PROJECT_RCFILE = --rcfile {tox_root}{/}pyproject.toml\n    # disable conditional coverage exclusions for Python version\n    {platform}: COVERAGE_EXCLUDE_PYTHON_VERSION=disable\ncommands_pre = python --version\ncommands =\n    -python -m coverage combine {env:CORE_RCFILE} {env:COMBINE_KEEP}\n    html: python -m coverage html {env:PROJECT_RCFILE} --skip-covered --skip-empty\n    python -m coverage report {env:PROJECT_RCFILE} {env:REPORT_FAIL_COND}\n\n[testenv:towncrier{,-check}]\nskip_install = True\ndeps =\n    towncrier==24.8.0\n    {tox_root}{/}core\ncommands =\n    check  : python -m towncrier.check --compare-with origin/main\n    !check : python -m towncrier {posargs}\n\n[docs]\ndocs_dir = {tox_root}{/}docs\nbuild_dir = {[docs]docs_dir}{/}_build\nsphinx_args = --show-traceback --fail-on-warning --keep-going --jobs auto\n\n[testenv:docs{,-lint,-all,-live,-live-src}]\n# Docs are always built on Python 3.12. See also the RTD config and contribution docs.\nbase_python = py312\nskip_install = True\n# give sphinx-autobuild time to shutdown http server\nsuicide_timeout = 1\ndeps =\n    # editable install so docstrings can be updated for 'all' and 'live'\n    -e {tox_root}{/}core[docs]\npassenv =\n    # On macOS M1, you need to manually set the location of the PyEnchant\n    # library:\n    #     export PYENCHANT_LIBRARY_PATH=/opt/homebrew/lib/libenchant-2.2.dylib\n    PYENCHANT_LIBRARY_PATH\ncommands =\n    !lint-!all-!live : python -m sphinx {[docs]sphinx_args} {posargs} --builder html {[docs]docs_dir} {[docs]build_dir}{/}html\n    lint : python -m sphinx {[docs]sphinx_args} {posargs} --builder spelling {[docs]docs_dir} {[docs]build_dir}{/}spell\n    lint : python -m sphinx {[docs]sphinx_args} {posargs} --builder linkcheck {[docs]docs_dir} {[docs]build_dir}{/}links\n    all  : python -m sphinx {[docs]sphinx_args} {posargs} --verbose --write-all --fresh-env --builder html {[docs]docs_dir} {[docs]build_dir}{/}html\n    live-!src : sphinx-autobuild {[docs]sphinx_args} {posargs} --builder html {[docs]docs_dir} {[docs]build_dir}{/}live\n    live-src  : sphinx-autobuild {[docs]sphinx_args} {posargs} --write-all --fresh-env --watch {tox_root}{/}core{/}src{/}toga --builder html {[docs]docs_dir} {[docs]build_dir}{/}live\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        },
        {
          "name": "winforms",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}