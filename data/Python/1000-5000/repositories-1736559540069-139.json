{
  "metadata": {
    "timestamp": 1736559540069,
    "page": 139,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "andresriancho/w3af",
      "stars": 4640,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3828125,
          "content": "*.py[cod]\n*.py~\n*~\n*.swp\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n.noseids\nnoseids.pickle\nnose.cfg\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n.settings/\n.idea\n\n# w3af stuff\nparser.out\nparsetab.py\noutput-http.txt\noutput.txt\n\n# This is generated by the setup_moth.py script\ndjango-moth\n\n# Debugging circleci high memory usage\nmemory-usage.txt\n\n# Ignore sphinx builds\ndoc/sphinx/_build/\n\n# 404 test stuff\ndata.shelve\ntop-1m.csv\ntop-1m.csv.zip\n\n# docker build temp files\n/.dockerignore\n/Dockerfile\n\n# To make testing easier\ntest.w3af\noutput-w3af.txt\n\n# Ignore some profiling data\n*.dump\n\n# Ignore intermediate XML file\nw3af/plugins/crawl/phishtank/index.xml\n\n# For debian package build\n.pc/\ndebian/files\ndebian/w3af-console.debhelper.log\ndebian/w3af-console.postinst.debhelper\ndebian/w3af-console.prerm.debhelper\ndebian/w3af-console.substvars\ndebian/w3af-console/\ndebian/w3af.debhelper.log\ndebian/w3af.postinst.debhelper\ndebian/w3af.postrm.debhelper\ndebian/w3af.prerm.debhelper\ndebian/w3af.substvars\ndebian/w3af/\ndocker/kali-debootstrap\n*.deb\n\nw3af/core/data/parsers/tests/data/huge.html\n\n# Helpers to create deserialization payloads\nysoserial-0.0.6-SNAPSHOT-all.jar\nnode_modules/\n\n# Ignore scan logs\nscan-logs/"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5224609375,
          "content": "## w3af - Web Application Attack and Audit Framework\n\n[w3af](http://w3af.org/) is an [open source](https://www.gnu.org/licenses/gpl-2.0.txt)\nweb application security scanner which helps developers and penetration testers\nidentify and exploit vulnerabilities in their web applications.\n\nThe scanner is able to identify [200+ vulnerabilities](https://github.com/andresriancho/w3af/blob/master/w3af/core/data/constants/vulns.py),\nincluding [Cross-Site Scripting](https://github.com/andresriancho/w3af/blob/master/w3af/plugins/audit/xss.py),\n[SQL injection](https://github.com/andresriancho/w3af/blob/master/w3af/plugins/audit/sqli.py) and\n[OS commanding](https://github.com/andresriancho/w3af/blob/master/w3af/plugins/audit/os_commanding.py).\n\n## Contributing\n\nPull requests are always welcome! If you're not sure where to start, please take\na look at the [First steps as a contributor](https://github.com/andresriancho/w3af/wiki/First-steps-as-a-contributor)\ndocument in our wiki. All contributions, no matter how small, are welcome.\n\n## Links and documentation\n * [w3af's main site](http://w3af.org/)\n * [Project documentation](http://docs.w3af.org/en/latest/)\n\n## Sponsors\n\n[Holm Security](https://www.holmsecurity.com/) sponsors the project and uses [w3af](http://w3af.org/)\nas part of their amazing [automated and continuous vulnerability assessment platform](https://www.holmsecurity.com/vulnerability-assessment).\n\nFound this project useful? Donations are accepted via [ethereum](https://www.ethereum.org/) at `0xb1B56F04E6cc5F4ACcB19678959800824DA8DE82`\n"
        },
        {
          "name": "circle.yml",
          "type": "blob",
          "size": 6.6513671875,
          "content": "#\n#   This file is used to configure the continuous integration for w3af\n#   see http://w3af.org/how-w3af-uses-continuous-integration-to-improve\n#\n#   As a user you don't need to understand this file.\n#\nmachine:\n  services:\n    - docker\n\n  python:\n    version: 2.7.3\n\n  post:\n    # This was required to avoid issues with different builds of python being\n    # used between the gtk libs installed in /usr/lib/python2.7/dist-packages/\n    # and the python which was put inside my virtualenv\n    - pyenv global system\n\n\ncheckout:\n  post:\n    # Since the auto_update feature needs the git repository history, we run\n    # this command which will retrieve it (since CircleCI doesn't for perf).\n    # In our case it is fine, and it will get cached.\n    - if [[ -e .git/shallow ]]; then git fetch --unshallow; fi\n\n\ndependencies:\n  cache_directories:\n    # These are inside the w3af directory\n    - \"xpresser\"\n\n  pre:\n    - docker info\n    - docker version\n    - docker images\n\n    - sudo apt-get update\n\n    # GUI dependencies\n    #- sudo apt-get install -y python-gtksourceview2 python-gtk2 gir1.2-notify-0.7 python-pyatspi2\n    #                          python-dbus python-pygame python-opencv python-scipy python-numpy\n    - sudo apt-get install -y python-webkit\n\n    # Misc dependencies\n    - sudo apt-get install -y stunnel4 libffi-dev tcpdump joe\n\n    # ClamAV installation for grep.clamav testing\n    - sudo apt-get install clamav-daemon clamav-freshclam clamav-unofficial-sigs\n    - sudo service clamav-daemon start\n\n    # Install the core/console dependencies\n    - pip install --upgrade pip\n    - w3af/core/controllers/ci/install_scripts/install_core_dependencies.sh\n\n    # Install GUI dependencies\n    - w3af/core/controllers/ci/install_scripts/install_gui_dependencies.sh\n\n    # Link the GUI stuff to the venv\n    - w3af/core/controllers/ci/install_scripts/install_c_extensions_venv.sh\n\n    # Install the test dependencies\n    - w3af/core/controllers/ci/install_scripts/install_test_dependencies.sh\n\n    # Run the test servers/dependencies\n    - cd w3af/tests/ && docker-compose up -d\n    - w3af/tests/add-test-routes.sh\n\n    # While we wait for the test dependencies, list the test we're going to run.\n    #\n    # This line is useful to debug builds that fail because of excessive memory\n    # usage, such as https://circleci.com/gh/andresriancho/w3af/2819#tests/containers/0\n    #\n    # Those builds are hard to debug since the build VM is killed and the only\n    # collected artifact is memory-usage.txt. In that file you should find the\n    # test ID which was running when circleci killed the build. Using that ID\n    # and the output of this tool, you'll be able to pinpoint which test was\n    # using a lot of memory.\n    - python w3af/core/controllers/ci/nosetests_wrapper/show-test-ids.py\n\n    # Might need more waiting for the docker-compose up command to finish\n    - w3af/tests/waitfor-test-dependencies.py\n\n  post:\n    - pip --version\n    - pip freeze\n\n\ntest:\n  override:\n    - w3af/core/controllers/ci/nosetests_wrapper/main.py:\n        timeout: 360\n\n    - nosetests w3af/core/data/constants/tests/test_vulns.py:TestVulnsConstants.test_vuln_updated\n\n    # Dump the container logs for debugging\n    - for c in `docker ps -q`; do docker logs $c > $CIRCLE_ARTIFACTS/docker-$c.log; done\n\n# https://bitbucket.org/ned/coveragepy/issue/282/coverage-combine-consumes-a-lot-of-memory         \n#  post:\n#    - coverage combine\n#    - coveralls\n\ndeployment:\n  production:\n    branch: master\n    owner: andresriancho\n    commands:\n      # Save docker hub credentials to file\n      - sed \"s/<EMAIL>/$DOCKER_EMAIL/;s/<AUTH>/$DOCKER_AUTH/\" < extras/docker/dockercfg.template > ~/.dockercfg\n\n      # Note the master in the URLs\n      - \"curl --header 'Content-Type: application/json' --request POST https://circleci.com/api/v1/project/andresriancho/w3af-module/tree/master?circle-token=$W3AF_MODULE_TOKEN\"\n      - \"curl --header 'Content-Type: application/json' --request POST https://circleci.com/api/v1/project/andresriancho/w3af-kali-ci/tree/master?circle-token=$W3AF_KALI_TOKEN\"\n      - \"curl --header 'Content-Type: application/json' --request POST https://circleci.com/api/v1/project/andresriancho/w3af-api-client/tree/master?circle-token=$W3AF_API_CLIENT_TOKEN\"\n\n      # Nasty hack required for docker cache sanity: Because we get a new clone\n      # of the repo, timestamps don't correspond any more to when the file was\n      # last changed. To rectify this, first set everything to a timestamp in\n      # the past and then update the timestamp for all git-tracked files based\n      # on their last committed change.\n      #\n      # This takes ~1min to run, so we're doing it here in order to run it only\n      # when the build is successful AND we're in master/develop where it's\n      # really needed\n      - find . -exec touch -t 201401010000 {} \\;\n      - for x in $(git ls-tree --full-tree --name-only -r HEAD); do touch -t $(date -d \"$(git log -1 --format=%ci \"${x}\")\" +%y%m%d%H%M.%S) \"${x}\"; done\n\n      - docker pull andresriancho/w3af:latest; true\n      - ./docker-build.sh master:\n          pwd: extras/docker/\n\n      - docker push andresriancho/w3af:latest\n      - w3af/core/controllers/ci/circleci/trigger-w3af-api-build.py\n\n  staging:\n    branch: develop\n    owner: andresriancho\n    commands:\n      # Save docker hub credentials to file\n      - sed \"s/<EMAIL>/$DOCKER_EMAIL/;s/<AUTH>/$DOCKER_AUTH/\" < extras/docker/dockercfg.template > ~/.dockercfg\n\n      # Note the develop in the URLs\n      - \"curl --header 'Content-Type: application/json' --request POST https://circleci.com/api/v1/project/andresriancho/w3af-module/tree/develop?circle-token=$W3AF_MODULE_TOKEN\"\n      - \"curl --header 'Content-Type: application/json' --request POST https://circleci.com/api/v1/project/andresriancho/w3af-api-client/tree/develop?circle-token=$W3AF_API_CLIENT_TOKEN\"\n\n      # Nasty hack required for docker cache sanity: Because we get a new clone\n      # of the repo, timestamps don't correspond any more to when the file was\n      # last changed. To rectify this, first set everything to a timestamp in\n      # the past and then update the timestamp for all git-tracked files based\n      # on their last committed change.\n      #\n      # This takes ~1min to run, so we're doing it here in order to run it only\n      # when the build is successful AND we're in master/develop where it's\n      # really needed\n      - find . -exec touch -t 201401010000 {} \\;\n      - for x in $(git ls-tree --full-tree --name-only -r HEAD); do touch -t $(date -d \"$(git log -1 --format=%ci \"${x}\")\" +%y%m%d%H%M.%S) \"${x}\"; done\n\n      - docker pull andresriancho/w3af:develop; true\n      - ./docker-build.sh develop:\n          pwd: extras/docker/\n\n      - w3af/core/controllers/ci/circleci/trigger-w3af-api-build.py"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "profiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "result",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "w3af",
          "type": "tree",
          "content": null
        },
        {
          "name": "w3af_api",
          "type": "blob",
          "size": 0.275390625,
          "content": "#!/usr/bin/env python\n\nimport sys\n\nfrom w3af.core.controllers.dependency_check.dependency_check import dependency_check\n\n\nif __name__ == '__main__':\n    # Check if I have all needed dependencies\n    dependency_check()\n\n    from w3af.core.ui.api.main import main\n    sys.exit(main())"
        },
        {
          "name": "w3af_console",
          "type": "blob",
          "size": 5.2822265625,
          "content": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getopt\nimport sys\nimport os\nimport base64\nimport re\n\n# Check if I have all needed dependencies\nfrom w3af.core.controllers.dependency_check.dependency_check import dependency_check\ndependency_check()\n\nfrom w3af.core.ui.console.console_ui import ConsoleUI\nfrom w3af.core.controllers.misc.get_w3af_version import get_w3af_version\nimport w3af.core.controllers.output_manager as om\n\n\n# from https://en.wikipedia.org/wiki/Percent-encoding#Types_of_URI_characters\nURL_RE = re.compile('^([a-z]|[A-Z]|[0-9]|\\.|-|_|~|\\[|\\]|#|\\'|\\(|\\)|;|:|@|&|=|\\+|\\$|,|\\*|!|\\/|\\?)+$')\n\n\nUSAGE_DOC = \"\"\"\nw3af - Web Application Attack and Audit Framework\n\nUsage:\n\n    ./w3af_console -h\n    ./w3af_console -t\n    ./w3af_console [-s <script_file>]\n\nOptions:\n\n    -h or --help\n        Display this help message\n\n    -s <script_file> or --script=<script_file>\n        Run <script_file> script\n\n    -n or --no-update\n        No update check will be made when starting. This option takes \n        precedence over the 'auto-update' setting in 'startup.conf' file.\n     \n    -f or --force-update\n        An update check will be made when starting. This option takes \n        precedence over the 'auto-update' setting in 'startup.conf' file.\n     \n    -p <profile> or --profile=<profile>\n        Run with the selected <profile>\n    \n    -P <profile> or --profile-run=<profile>\n        Run with the selected <profile> in batch mode\n    \n    -v or --version\n        Show w3af's version\n\n    -y or --yes\n        Automatically agree to disclaimer prompt\n\n    -t or --target\n        Target URL for scan\n\nFor more info visit http://w3af.org/\n\"\"\"\n\n\ndef _configure_output_manager():\n    \"\"\"\n    Make sure that the output manager is started before doing anything else,\n    since it is used by most w3af modules\n    \"\"\" \n    try:\n        om.manager.set_output_plugins(['console'])\n    except Exception as e:\n        print('Something went wrong, w3af failed to start the output manager.')\n        print('Exception: \"%s\"' % e)\n        sys.exit(-9)\n\n\ndef _usage():\n    print(USAGE_DOC)\n\n\ndef _generate_run_commands(script_file, profile, force_profile, target_url):\n    \"\"\"\n    Given the user configuration, generate the commands to run in the console\n    user interface at startup.\n    \n    :param script_file: The script (-s) file name\n    :param profile: The profile (-p) name\n    :param force_profile: Should we run the profile? (-P)\n    :target_url: Target URL for scan\n    \"\"\"\n    commands_to_run = []\n\n    if target_url:\n        if URL_RE.match(target_url):\n            commands_to_run.extend(['target', 'set target {}'.format(target_url), 'back'])\n        else:\n            print ('Target URL is invalid')\n            sys.exit(2)\n\n    if script_file is not None:\n        try:\n            fd = open(script_file)\n        except IOError:\n            print('Failed to open script file: \"%s\"' % script_file)\n            sys.exit(2)\n        else:\n            for line in fd:   \n                line = line.strip()\n                # if not a comment..\n                if line != '' and line[0] != '#':\n                    commands_to_run.append(line)\n            fd.close() \n    elif profile is not None:\n        \n        current_dir = os.getcwd()\n        commands_to_run = [\"profiles use %s %s\" % (profile, current_dir)]\n        \n        if force_profile is not None:\n            commands_to_run.append(\"start\")\n            commands_to_run.append(\"exit\")\n\n    return commands_to_run\n\n\ndef main():\n    try:\n        long_options = ['script=', 'help', 'version', 'no-update',\n                        'force-update', 'profile=', 'commit=',\n                        'profile-run', 'yes', 'target=']\n        opts, _ = getopt.getopt(sys.argv[1:], \"ehvs:nfp:P:yt:\", long_options)\n    except getopt.GetoptError:\n        # Print help information and exit\n        _usage()\n        return -3\n    \n    script_file = None\n    force_profile = None\n    profile = None\n    do_update = None\n    skip_disclaimer = False\n    target_url = None\n    \n    for o, a in opts:\n        if o == \"-e\":\n            # easter egg\n            msg = 'R3JhY2lhcyBFdWdlIHBvciBiYW5jYXJtZSB0YW50YXMgaG9yYXMgZGUgZG'\\\n                  'VzYXJyb2xsbywgdGUgYW1vIGdvcmRhIQ=='\n            print(base64.b64decode(msg))\n        if o in ('-s', '--script'):\n            script_file = a\n        if o in ('-P', '--profile-run'):\n            # selected profile\n            force_profile = True\n            profile = a\n        if o in ('-p', '--profile'):\n            # selected profile\n            profile = a\n        if o in ('-h', '--help'):\n            _usage()\n            return 0\n        if o in ('-v', '--version'):\n            print(get_w3af_version())\n            return 0\n        if o in ('-f', '--force-update'):\n            do_update = True\n        elif o in ('-n', '--no-update'):\n            do_update = False\n        if o in ('-y', '--yes'):\n            skip_disclaimer = True\n        if o in ('-t', '--target'):\n            target_url = a\n    \n    commands_to_run = _generate_run_commands(script_file, profile, force_profile, target_url)\n    console = ConsoleUI(commands=commands_to_run, do_upd=do_update)\n    \n    if not skip_disclaimer and not console.accept_disclaimer():\n        return -4\n\n    return console.sh()\n\n\ndef _main():\n    _configure_output_manager()\n    sys.exit(main())\n\n\nif __name__ == \"__main__\":\n    _main()\n"
        },
        {
          "name": "w3af_gui",
          "type": "blob",
          "size": 2.84765625,
          "content": "#!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport getopt\nimport sys\nimport os\nimport base64\n\n# Perform the GTK UI dependency check, this will verify that the current system\n# has all the modules required to run w3af (including the core dependencies)\nfrom w3af.core.ui.gui.dependency_check.dependency_check import dependency_check\ndependency_check()\n\nimport w3af.core.controllers.output_manager as om\n\n      \nUSAGE_DOC = '''\nw3af - Web Application Attack and Audit Framework\n\nUsage:\n\n    ./w3af_gui [OPTIONS]\n\nOptions:\n\n    -h or --help\n        Display this help message.\n\n    -n or --no-update\n        No update check will be made when starting. This option takes \n        precedence over the 'auto-update' setting in 'startup.conf' file.\n     \n    -f or --force-update\n        An update check will be made when starting. This option takes \n        precedence over the 'auto-update' setting in 'startup.conf' file.\n    \n    -p <profile> or --profile=<profile>\n        Run with the selected <profile>\n\nFor more info visit http://w3af.org/\n'''    \n\n\ndef _configure_output_manager():\n    \"\"\"\n    Make sure that the output manager is started before doing anything else,\n    since it is used by most w3af modules\n    \"\"\"\n    try:\n        om.manager.set_output_plugins(['console'])\n    except Exception as e:\n        print('Something went wrong, w3af failed to start the output manager.')\n        print('Exception: \"%s\"' % e)\n        sys.exit(-9)\n\n\ndef usage():\n    print(USAGE_DOC)\n\n\ndef main():\n    try:\n        long_options = ['help', 'no-update', 'force-update', 'profile=']\n        opts, _ = getopt.getopt(sys.argv[1:], \"ehnfp:\", long_options)\n    except getopt.GetoptError:\n        # print help information and exit:\n        usage()\n        return -3\n    \n    profile = None\n    doupdate = None\n    \n    for o, a in opts:\n        if o in (\"-e\"):\n            # easter egg\n            msg = 'R3JhY2lhcyBFdWdlIHBvciBiYW5jYXJtZSB0YW50YXMgaG9yYXMgZGUgZGV'\\\n                  'zYXJyb2xsbywgdGUgYW1vIGdvcmRhIQ=='\n            print(base64.b64decode(msg))\n        if o in ('-p', '--profile'):\n            # selected profile\n            profile = a\n        if o in ('-h', '--help'):\n            usage()\n            return 0\n        if o in ('-f', '--force-update'):\n            doupdate = True\n        elif o in ('-n', '--no-update'):\n            doupdate = False\n    \n\n    # go with GTK, but first check about DISPLAY environment variable\n    if sys.platform != \"win32\":\n        display = os.getenv(\"DISPLAY\")\n        if not display:\n            om.out.error(\"The DISPLAY environment variable is not set! You can\"\n                         \" not use any graphical program without it...\")\n            return -1\n\n    from w3af.core.ui.gui.main import main as gui_main\n    gui_main(profile, doupdate)\n\n\ndef _main():\n    _configure_output_manager()\n    sys.exit(main())\n\n\nif __name__ == \"__main__\":\n    _main()\n"
        }
      ]
    }
  ]
}