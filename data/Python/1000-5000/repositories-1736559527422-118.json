{
  "metadata": {
    "timestamp": 1736559527422,
    "page": 118,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gitpython-developers/GitPython",
      "stars": 4694,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.05078125,
          "content": "test/fixtures/* eol=lf\n*.sh eol=lf\n/Makefile eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5927734375,
          "content": "# Cached Python bytecode\n__pycache__/\n*.py[co]\n\n# Other caches\n.cache/\n.mypy_cache/\n.pytest_cache/\n\n# Transient editor files\n*.swp\n*~\n\n# Editor configuration\nnbproject\n*.sublime-workspace\n/.vscode/\n.idea/\n\n# Virtual environments\n.env/\nenv/\n.venv/\nvenv/\n\n# Build output\n/*egg-info\n/lib/GitPython.egg-info\n/build\n/dist\n/doc/_build\n\n# Tox builds/environments\n/.tox\n\n# Code coverage output\ncover/\n.coverage\n.coverage.*\n\n# Monkeytype output\nmonkeytype.sqlite3\nmonkeytype.sqlite3.*\n\n# Manual command output\noutput.txt\n\n# Finder metadata\n.DS_Store\n\n# Files created by OSS-Fuzz when running locally\nfuzz_*.pkg.spec\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.099609375,
          "content": "[submodule \"gitdb\"]\r\n\turl = https://github.com/gitpython-developers/gitdb.git\r\n\tpath = git/ext/gitdb\r\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.841796875,
          "content": "repos:\n- repo: https://github.com/codespell-project/codespell\n  rev: v2.3.0\n  hooks:\n  - id: codespell\n    additional_dependencies: [tomli]\n    exclude: ^test/fixtures/\n\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  rev: v0.6.0\n  hooks:\n  - id: ruff\n    args: [\"--fix\"]\n    exclude: ^git/ext/\n  - id: ruff-format\n    exclude: ^git/ext/\n\n- repo: https://github.com/shellcheck-py/shellcheck-py\n  rev: v0.10.0.1\n  hooks:\n  - id: shellcheck\n    args: [--color]\n    exclude: ^test/fixtures/polyglot$|^git/ext/\n\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.6.0\n  hooks:\n  - id: end-of-file-fixer\n    exclude: ^test/fixtures/|COPYING|LICENSE\n  - id: check-symlinks\n  - id: check-toml\n  - id: check-yaml\n  - id: check-merge-conflict\n\n- repo: https://github.com/abravalheri/validate-pyproject\n  rev: v0.19\n  hooks:\n  - id: validate-pyproject\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.01171875,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need.\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"doc/\" directory with Sphinx.\nsphinx:\n  configuration: doc/source/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub.\nformats: all\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation.\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n  - method: pip\n    path: .\n    extra_requirements:\n    - doc\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 2.279296875,
          "content": "GitPython was originally written by Michael Trier.\nGitPython 0.2 was partially (re)written by Sebastian Thiel, based on 0.1.6 and git-dulwich.\n\nContributors are:\n\n-Michael Trier <mtrier _at_ gmail.com>\n-Alan Briolat\n-Florian Apolloner <florian _at_ apolloner.eu>\n-David Aguilar <davvid _at_ gmail.com>\n-Jelmer Vernooij <jelmer _at_ samba.org>\n-Steve Frécinaux <code _at_ istique.net>\n-Kai Lautaportti <kai _at_ lautaportti.fi>\n-Paul Sowden <paul _at_ idontsmoke.co.uk>\n-Sebastian Thiel <byronimo _at_ gmail.com>\n-Jonathan Chu <jonathan.chu _at_ me.com>\n-Vincent Driessen <me _at_ nvie.com>\n-Phil Elson <pelson _dot_ pub _at_ gmail.com>\n-Bernard `Guyzmo` Pratz <guyzmo+gitpython+pub@m0g.net>\n-Timothy B. Hartman <tbhartman _at_ gmail.com>\n-Konstantin Popov <konstantin.popov.89 _at_ yandex.ru>\n-Peter Jones <pjones _at_ redhat.com>\n-Anson Mansfield <anson.mansfield _at_ gmail.com>\n-Ken Odegard <ken.odegard _at_ gmail.com>\n-Alexis Horgix Chotard\n-Piotr Babij <piotr.babij _at_ gmail.com>\n-Mikuláš Poul <mikulaspoul _at_ gmail.com>\n-Charles Bouchard-Légaré <cblegare.atl _at_ ntis.ca>\n-Yaroslav Halchenko <debian _at_ onerussian.com>\n-Tim Swast <swast _at_ google.com>\n-William Luc Ritchie\n-David Host <hostdm _at_ outlook.com>\n-A. Jesse Jiryu Davis <jesse _at_ emptysquare.net>\n-Steven Whitman <ninloot _at_ gmail.com>\n-Stefan Stancu <stefan.stancu _at_ gmail.com>\n-César Izurieta <cesar _at_ caih.org>\n-Arthur Milchior <arthur _at_ milchior.fr>\n-Anil Khatri <anil.soccer.khatri _at_ gmail.com>\n-JJ Graham <thetwoj _at_ gmail.com>\n-Ben Thayer <ben _at_ benthayer.com>\n-Dries Kennes <admin _at_ dries007.net>\n-Pratik Anurag <panurag247365 _at_ gmail.com>\n-Harmon <harmon.public _at_ gmail.com>\n-Liam Beguin <liambeguin _at_ gmail.com>\n-Ram Rachum <ram _at_ rachum.com>\n-Alba Mendez <me _at_ alba.sh>\n-Robert Westman <robert _at_ byteflux.io>\n-Hugo van Kemenade\n-Hiroki Tokunaga <tokusan441 _at_ gmail.com>\n-Julien Mauroy <pro.julien.mauroy _at_ gmail.com>\n-Patrick Gerard\n-Luke Twist <itsluketwist@gmail.com>\n-Joseph Hale <me _at_ jhale.dev>\n-Santos Gallegos <stsewd _at_ proton.me>\n-Wenhan Zhu <wzhu.cosmos _at_ gmail.com>\n-Eliah Kagan <eliah.kagan _at_ gmail.com>\n-Ethan Lin <et.repositories _at_ gmail.com>\n-Jonas Scharpf <jonas.scharpf _at_ checkmk.com>\n\nPortions derived from other open source works and are clearly marked.\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 0.1416015625,
          "content": "Please see the online documentation for the latest changelog:\nhttps://github.com/gitpython-developers/GitPython/blob/main/doc/source/changes.rst\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7197265625,
          "content": "# How to contribute\n\nThe following is a short step-by-step rundown of what one typically would do to contribute.\n\n- [Fork this project](https://github.com/gitpython-developers/GitPython/fork) on GitHub.\n- For setting up the environment to run the self tests, please run `init-tests-after-clone.sh`.\n- Please try to **write a test that fails unless the contribution is present.**\n- Try to avoid massive commits and prefer to take small steps, with one commit for each.\n- Feel free to add yourself to AUTHORS file.\n- Create a pull request.\n\n## Fuzzing Test Specific Documentation\n\nFor details related to contributing to the fuzzing test suite and OSS-Fuzz integration, please \nrefer to the dedicated [fuzzing README](./fuzzing/README.md).\n"
        },
        {
          "name": "FUNDING.json",
          "type": "blob",
          "size": 0.1044921875,
          "content": "{\n  \"drips\": {\n    \"ethereum\": {\n      \"ownedBy\": \"0xD0d4dCFc194ec24bCc777e635289e0b10E1a7b87\"\n    }\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4677734375,
          "content": "Copyright (C) 2008, 2009 Michael Trier and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\n* Neither the name of the GitPython project nor the names of\nits contributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.259765625,
          "content": "include AUTHORS\ninclude CHANGES\ninclude CONTRIBUTING.md\ninclude LICENSE\ninclude README.md\ninclude VERSION\ninclude requirements.txt\ninclude test-requirements.txt\ninclude git/py.typed\n\nrecursive-include doc *\nrecursive-exclude test *\n\nglobal-exclude __pycache__ *.pyc\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.2919921875,
          "content": ".PHONY: all clean release force_release\n\nall:\n\t@awk -F: '/^[[:alpha:]].*:/ && !/^all:/ {print $$1}' Makefile\n\nclean:\n\trm -rf build/ dist/ .eggs/ .tox/\n\nrelease: clean\n\t./check-version.sh\n\tmake force_release\n\nforce_release: clean\n\t./build-release.sh\n\ttwine upload dist/*\n\tgit push --tags origin main\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.935546875,
          "content": "![Python package](https://github.com/gitpython-developers/GitPython/workflows/Python%20package/badge.svg)\n[![Documentation Status](https://readthedocs.org/projects/gitpython/badge/?version=stable)](https://readthedocs.org/projects/gitpython/?badge=stable)\n[![Packaging status](https://repology.org/badge/tiny-repos/python:gitpython.svg)](https://repology.org/metapackage/python:gitpython/versions)\n\n## [Gitoxide](https://github.com/Byron/gitoxide): A peek into the future…\n\nI started working on GitPython in 2009, back in the days when Python was 'my thing' and I had great plans with it.\nOf course, back in the days, I didn't really know what I was doing and this shows in many places. Somewhat similar to\nPython this happens to be 'good enough', but at the same time is deeply flawed and broken beyond repair.\n\nBy now, GitPython is widely used and I am sure there is a good reason for that, it's something to be proud of and happy about.\nThe community is maintaining the software and is keeping it relevant for which I am absolutely grateful. For the time to come I am happy to continue maintaining GitPython, remaining hopeful that one day it won't be needed anymore.\n\nMore than 15 years after my first meeting with 'git' I am still in excited about it, and am happy to finally have the tools and\nprobably the skills to scratch that itch of mine: implement `git` in a way that makes tool creation a piece of cake for most.\n\nIf you like the idea and want to learn more, please head over to [gitoxide](https://github.com/Byron/gitoxide), an\nimplementation of 'git' in [Rust](https://www.rust-lang.org).\n\n*(Please note that `gitoxide` is not currently available for use in Python, and that Rust is required.)*\n\n## GitPython\n\nGitPython is a python library used to interact with git repositories, high-level like git-porcelain,\nor low-level like git-plumbing.\n\nIt provides abstractions of git objects for easy access of repository data often backed by calling the `git`\ncommand-line program.\n\n### DEVELOPMENT STATUS\n\nThis project is in **maintenance mode**, which means that\n\n- …there will be no feature development, unless these are contributed\n- …there will be no bug fixes, unless they are relevant to the safety of users, or contributed\n- …issues will be responded to with waiting times of up to a month\n\nThe project is open to contributions of all kinds, as well as new maintainers.\n\n### REQUIREMENTS\n\nGitPython needs the `git` executable to be installed on the system and available in your\n`PATH` for most operations. If it is not in your `PATH`, you can help GitPython find it\nby setting the `GIT_PYTHON_GIT_EXECUTABLE=<path/to/git>` environment variable.\n\n- Git (1.7.x or newer)\n- Python >= 3.7\n\nThe list of dependencies are listed in `./requirements.txt` and `./test-requirements.txt`.\nThe installer takes care of installing them for you.\n\n### INSTALL\n\nGitPython and its required package dependencies can be installed in any of the following ways, all of which should typically be done in a [virtual environment](https://docs.python.org/3/tutorial/venv.html).\n\n#### From PyPI\n\nTo obtain and install a copy [from PyPI](https://pypi.org/project/GitPython/), run:\n\n```sh\npip install GitPython\n```\n\n(A distribution package can also be downloaded for manual installation at [the PyPI page](https://pypi.org/project/GitPython/).)\n\n#### From downloaded source code\n\nIf you have downloaded the source code, run this from inside the unpacked `GitPython` directory:\n\n```sh\npip install .\n```\n\n#### By cloning the source code repository\n\nTo clone the [the GitHub repository](https://github.com/gitpython-developers/GitPython) from source to work on the code, you can do it like so:\n\n```sh\ngit clone https://github.com/gitpython-developers/GitPython\ncd GitPython\n./init-tests-after-clone.sh\n```\n\nOn Windows, `./init-tests-after-clone.sh` can be run in a Git Bash shell.\n\nIf you are cloning [your own fork](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/about-forks), then replace the above `git clone` command with one that gives the URL of your fork. Or use this [`gh`](https://cli.github.com/) command (assuming you have `gh` and your fork is called `GitPython`):\n\n```sh\ngh repo clone GitPython\n```\n\nHaving cloned the repo, create and activate your [virtual environment](https://docs.python.org/3/tutorial/venv.html).\n\nThen make an [editable install](https://pip.pypa.io/en/stable/topics/local-project-installs/#editable-installs):\n\n```sh\npip install -e \".[test]\"\n```\n\nIn the less common case that you do not want to install test dependencies, `pip install -e .` can be used instead.\n\n#### With editable *dependencies* (not preferred, and rarely needed)\n\nIn rare cases, you may want to work on GitPython and one or both of its [gitdb](https://github.com/gitpython-developers/gitdb) and [smmap](https://github.com/gitpython-developers/smmap) dependencies at the same time, with changes in your local working copy of gitdb or smmap immediately reflected in the behavior of your local working copy of GitPython. This can be done by making editable installations of those dependencies in the same virtual environment where you install GitPython.\n\nIf you want to do that *and* you want the versions in GitPython's git submodules to be used, then pass `-e git/ext/gitdb` and/or `-e git/ext/gitdb/gitdb/ext/smmap` to `pip install`. This can be done in any order, and in separate `pip install` commands or the same one, so long as `-e` appears before *each* path. For example, you can install GitPython, gitdb, and smmap editably in the currently active virtual environment this way:\n\n```sh\npip install -e \".[test]\" -e git/ext/gitdb -e git/ext/gitdb/gitdb/ext/smmap\n```\n\nThe submodules must have been cloned for that to work, but that will already be the case if you have run `./init-tests-after-clone.sh`. You can use `pip list` to check which packages are installed editably and which are installed normally.\n\nTo reiterate, this approach should only rarely be used. For most development it is preferable to allow the gitdb and smmap dependencices to be retrieved automatically from PyPI in their latest stable packaged versions.\n\n### Limitations\n\n#### Leakage of System Resources\n\nGitPython is not suited for long-running processes (like daemons) as it tends to\nleak system resources. It was written in a time where destructors (as implemented\nin the `__del__` method) still ran deterministically.\n\nIn case you still want to use it in such a context, you will want to search the\ncodebase for `__del__` implementations and call these yourself when you see fit.\n\nAnother way assure proper cleanup of resources is to factor out GitPython into a\nseparate process which can be dropped periodically.\n\n#### Windows support\n\nSee [Issue #525](https://github.com/gitpython-developers/GitPython/issues/525).\n\n### RUNNING TESTS\n\n_Important_: Right after cloning this repository, please be sure to have executed\nthe `./init-tests-after-clone.sh` script in the repository root. Otherwise\nyou will encounter test failures.\n\n#### Install test dependencies\n\nEnsure testing libraries are installed. This is taken care of already if you installed with:\n\n```sh\npip install -e \".[test]\"\n```\n\nIf you had installed with a command like `pip install -e .` instead, you can still run\nthe above command to add the testing dependencies.\n\n#### Test commands\n\nTo test, run:\n\n```sh\npytest\n```\n\nTo lint, and apply some linting fixes as well as automatic code formatting, run:\n\n```sh\npre-commit run --all-files\n```\n\nThis includes the linting and autoformatting done by Ruff, as well as some other checks.\n\nTo typecheck, run:\n\n```sh\nmypy\n```\n\n#### CI (and tox)\n\nStyle and formatting checks, and running tests on all the different supported Python versions, will be performed:\n\n- Upon submitting a pull request.\n- On each push, *if* you have a fork with GitHub Actions enabled.\n- Locally, if you run [`tox`](https://tox.wiki/) (this skips any Python versions you don't have installed).\n\n#### Configuration files\n\nSpecific tools are all configured in the `./pyproject.toml` file:\n\n- `pytest` (test runner)\n- `coverage.py` (code coverage)\n- `ruff` (linter and formatter)\n- `mypy` (type checker)\n\nOrchestration tools:\n\n- Configuration for `pre-commit` is in the `./.pre-commit-config.yaml` file.\n- Configuration for `tox` is in `./tox.ini`.\n- Configuration for GitHub Actions (CI) is in files inside `./.github/workflows/`.\n\n### Contributions\n\nPlease have a look at the [contributions file][contributing].\n\n### INFRASTRUCTURE\n\n- [User Documentation](http://gitpython.readthedocs.org)\n- [Questions and Answers](http://stackexchange.com/filters/167317/gitpython)\n- Please post on Stack Overflow and use the `gitpython` tag\n- [Issue Tracker](https://github.com/gitpython-developers/GitPython/issues)\n  - Post reproducible bugs and feature requests as a new issue.\n    Please be sure to provide the following information if posting bugs:\n    - GitPython version (e.g. `import git; git.__version__`)\n    - Python version (e.g. `python --version`)\n    - The encountered stack-trace, if applicable\n    - Enough information to allow reproducing the issue\n\n### How to make a new release\n\n1. Update/verify the **version** in the `VERSION` file.\n2. Update/verify that the `doc/source/changes.rst` changelog file was updated. It should include a link to the forthcoming release page: `https://github.com/gitpython-developers/GitPython/releases/tag/<version>`\n3. Commit everything.\n4. Run `git tag -s <version>` to tag the version in Git.\n5. _Optionally_ create and activate a [virtual environment](https://packaging.python.org/en/latest/guides/installing-using-pip-and-virtual-environments/#creating-a-virtual-environment). (Then the next step can install `build` and `twine`.)\n6. Run `make release`.\n7. Go to [GitHub Releases](https://github.com/gitpython-developers/GitPython/releases) and publish a new one with the recently pushed tag. Generate the changelog.\n\n### Projects using GitPython\n\n- [PyDriller](https://github.com/ishepard/pydriller)\n- [Kivy Designer](https://github.com/kivy/kivy-designer)\n- [Prowl](https://github.com/nettitude/Prowl)\n- [Python Taint](https://github.com/python-security/pyt)\n- [Buster](https://github.com/axitkhurana/buster)\n- [git-ftp](https://github.com/ezyang/git-ftp)\n- [Git-Pandas](https://github.com/wdm0006/git-pandas)\n- [PyGitUp](https://github.com/msiemens/PyGitUp)\n- [PyJFuzz](https://github.com/mseclab/PyJFuzz)\n- [Loki](https://github.com/Neo23x0/Loki)\n- [Omniwallet](https://github.com/OmniLayer/omniwallet)\n- [GitViper](https://github.com/BeayemX/GitViper)\n- [Git Gud](https://github.com/bthayer2365/git-gud)\n\n### LICENSE\n\n[3-Clause BSD License](https://opensource.org/license/bsd-3-clause/), also known as the New BSD License. See the [LICENSE file][license].\n\nOne file exclusively used for fuzz testing is subject to [a separate license, detailed here](./fuzzing/README.md#license).\nThis file is not included in the wheel or sdist packages published by the maintainers of GitPython.\n\n[contributing]: https://github.com/gitpython-developers/GitPython/blob/main/CONTRIBUTING.md\n[license]: https://github.com/gitpython-developers/GitPython/blob/main/LICENSE\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.95703125,
          "content": "# Security Policy\n\n## Supported Versions\n\nOnly the latest version of GitPython can receive security updates. If a vulnerability is discovered, a fix can be issued in a new release.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 3.x.x   | :white_check_mark: |\n| < 3.0   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report private portions of a vulnerability to <https://github.com/gitpython-developers/GitPython/security/advisories/new>. Doing so helps to receive updates and collaborate on the matter, without disclosing it publicly right away.\n\nVulnerabilities in GitPython's dependencies [gitdb](https://github.com/gitpython-developers/gitdb/blob/master/SECURITY.md) or [smmap](https://github.com/gitpython-developers/smmap/blob/master/SECURITY.md), which primarily exist to support GitPython, can be reported here as well, at that same link. The affected package (`GitPython`, `gitdb`, or `smmap`) can be included in the report, if known.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "3.1.44\n"
        },
        {
          "name": "build-release.sh",
          "type": "blob",
          "size": 0.990234375,
          "content": "#!/bin/bash\n#\n# This file is part of GitPython and is released under the\n# 3-Clause BSD License: https://opensource.org/license/bsd-3-clause/\n#\n# This script builds a release. If run in a venv, it auto-installs its tools.\n# You may want to run \"make release\" instead of running this script directly.\n\nset -eEu\n\nfunction release_with() {\n    \"$1\" -m build --sdist --wheel\n}\n\nfunction suggest_venv() {\n    local venv_cmd='python -m venv env && source env/bin/activate'\n    printf \"HELP: To avoid this error, use a virtual-env with '%s' instead.\\n\" \"$venv_cmd\"\n}\n\nif test -n \"${VIRTUAL_ENV-}\"; then\n    deps=(build twine)  # Install twine along with build, as we need it later.\n    echo \"Virtual environment detected. Adding packages: ${deps[*]}\"\n    pip install --quiet --upgrade \"${deps[@]}\"\n    echo 'Starting the build.'\n    release_with python\nelse\n    trap suggest_venv ERR  # This keeps the original exit (error) code.\n    echo 'Starting the build.'\n    release_with python3  # Outside a venv, use python3.\nfi\n"
        },
        {
          "name": "check-version.sh",
          "type": "blob",
          "size": 2.2080078125,
          "content": "#!/bin/bash\n#\n# This file is part of GitPython and is released under the\n# 3-Clause BSD License: https://opensource.org/license/bsd-3-clause/\n#\n# This script checks if we are in a consistent state to build a new release.\n# See the release instructions in README.md for the steps to make this pass.\n# You may want to run \"make release\" instead of running this script directly.\n\nset -eEfuo pipefail\ntrap 'echo \"$0: Check failed. Stopping.\" >&2' ERR\n\nreadonly version_path='VERSION'\nreadonly changes_path='doc/source/changes.rst'\n\nfunction check_status() {\n    git status -s \"$@\"\n    test -z \"$(git status -s \"$@\")\"\n}\n\nfunction get_latest_tag() {\n    local config_opts\n    printf -v config_opts ' -c versionsort.suffix=-%s' alpha beta pre rc RC\n    # shellcheck disable=SC2086  # Deliberately word-splitting the arguments.\n    git $config_opts tag -l '[0-9]*' --sort=-v:refname | head -n1\n}\n\necho 'Checking current directory.'\ntest \"$(cd -- \"$(dirname -- \"$0\")\" && pwd)\" = \"$(pwd)\"  # Ugly, but portable.\n\necho \"Checking that $version_path and $changes_path exist and have no uncommitted changes.\"\ntest -f \"$version_path\"\ntest -f \"$changes_path\"\ncheck_status -- \"$version_path\" \"$changes_path\"\n\n# This section can be commented out, if absolutely necessary.\necho 'Checking that ALL changes are committed.'\ncheck_status --ignore-submodules\n\nversion_version=\"$(<\"$version_path\")\"\nchanges_version=\"$(awk '/^[0-9]/ {print $0; exit}' \"$changes_path\")\"\nlatest_tag=\"$(get_latest_tag)\"\nhead_sha=\"$(git rev-parse HEAD)\"\nlatest_tag_sha=\"$(git rev-parse \"${latest_tag}^{commit}\")\"\n\n# Display a table of all the current version, tag, and HEAD commit information.\necho\necho 'The VERSION must be the same in all locations, and so must the HEAD and tag SHA'\nprintf '%-14s = %s\\n' 'VERSION file'   \"$version_version\" \\\n                      'changes.rst'    \"$changes_version\" \\\n                      'Latest tag'     \"$latest_tag\" \\\n                      'HEAD SHA'       \"$head_sha\" \\\n                      'Latest tag SHA' \"$latest_tag_sha\"\n\n# Check that the latest tag and current version match the HEAD we're releasing.\ntest \"$version_version\" = \"$changes_version\"\ntest \"$latest_tag\" = \"$version_version\"\ntest \"$head_sha\" = \"$latest_tag_sha\"\necho 'OK, everything looks good.'\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzzing",
          "type": "tree",
          "content": null
        },
        {
          "name": "git",
          "type": "tree",
          "content": null
        },
        {
          "name": "init-tests-after-clone.sh",
          "type": "blob",
          "size": 2.146484375,
          "content": "#!/bin/sh\n#\n# This file is part of GitPython and is released under the\n# 3-Clause BSD License: https://opensource.org/license/bsd-3-clause/\n\nset -eu\n\nfallback_repo_for_tags='https://github.com/gitpython-developers/GitPython.git'\n\nci() {\n    # For now, check just these, as a false positive could lead to data loss.\n    test -n \"${TRAVIS-}\" || test -n \"${GITHUB_ACTIONS-}\"\n}\n\nno_version_tags() {\n    test -z \"$(git tag -l '[0-9]*' 'v[0-9]*')\"\n}\n\nwarn() {\n    if test -n \"${GITHUB_ACTIONS-}\"; then\n        printf '::warning ::%s\\n' \"$*\" >&2  # Annotate workflow.\n    else\n        printf '%s\\n' \"$@\" >&2\n    fi\n}\n\nif ! ci; then\n    printf 'This operation will destroy locally modified files. Continue ? [N/y]: ' >&2\n    read -r answer\n    case \"$answer\" in\n    [yY])\n        ;;\n    *)\n        exit 2 ;;\n    esac\nfi\n\n# Stop if we have run this. (You can delete __testing_point__ to let it rerun.)\n# This also keeps track of where we are, so we can get back here.\ngit tag __testing_point__\n\n# The tests need a branch called master.\ngit checkout master -- || git checkout -b master\n\n# The tests need a reflog history on the master branch.\ngit reset --hard HEAD~1\ngit reset --hard HEAD~1\ngit reset --hard HEAD~1\n\n# Point the master branch where we started, so we test the correct code.\ngit reset --hard __testing_point__\n\n# The tests need submodules, including a submodule with a submodule.\ngit submodule update --init --recursive\n\n# The tests need some version tags. Try to get them even in forks. This fetches\n# other objects too. So, locally, we always do it, for a consistent experience.\nif ! ci || no_version_tags; then\n    git fetch --all --tags\nfi\n\n# If we still have no version tags, try to get them from the original repo.\nif no_version_tags; then\n    warn 'No local or remote version tags found. Trying fallback remote:' \\\n         \"$fallback_repo_for_tags\"\n\n    # git fetch supports * but not [], and --no-tags means no *other* tags, so...\n    printf 'refs/tags/%d*:refs/tags/%d*\\n' 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 |\n        xargs git fetch --no-tags \"$fallback_repo_for_tags\"\n\n    if no_version_tags; then\n        warn 'No version tags found anywhere. Some tests will fail.'\n    fi\nfi\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.7666015625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.pytest.ini_options]\naddopts = \"--cov=git --cov-report=term -ra\"\nfilterwarnings = \"ignore::DeprecationWarning\"\npython_files = \"test_*.py\"\ntmp_path_retention_policy = \"failed\"\ntestpaths = \"test\"  # Space separated list of paths from root e.g test tests doc/testing.\n# --cov   coverage\n# --cov-report term  # send report to terminal term-missing -> terminal with line numbers  html  xml\n# --cov-report term-missing # to terminal with line numbers\n# --cov-report html:path  # html file at path\n# --maxfail  # number of errors before giving up\n# -rfE  # default test summary: list fail and error\n# -ra   # test summary: list all non-passing (fail, error, skip, xfail, xpass)\n# --ignore-glob=**/gitdb/*  # ignore glob paths\n# filterwarnings ignore::WarningType  # ignores those warnings\n\n[tool.mypy]\npython_version = \"3.8\"\nfiles = [\"git/\", \"test/deprecation/\"]\ndisallow_untyped_defs = true\nno_implicit_optional = true\nwarn_redundant_casts = true\nwarn_unused_ignores = true  # Useful in general, but especially in test/deprecation.\nwarn_unreachable = true\nimplicit_reexport = true\n# strict = true\n# TODO: Remove when 'gitdb' is fully annotated.\nexclude = [\"^git/ext/gitdb\"]\n[[tool.mypy.overrides]]\nmodule = \"gitdb.*\"\nignore_missing_imports = true\n\n[tool.coverage.run]\nsource = [\"git\"]\n\n[tool.coverage.report]\ninclude = [\"*/git/*\"]\nomit = [\"*/git/ext/*\"]\n\n[tool.ruff]\ntarget-version = \"py37\"\nline-length = 120\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \"git/ext/\",\n    \"build\",\n    \"dist\",\n]\n# Enable Pyflakes `E` and `F` codes by default.\nlint.select = [\n    \"E\",\n    \"W\",     # See: https://pypi.org/project/pycodestyle\n    \"F\",     # See: https://pypi.org/project/pyflakes\n    # \"I\",   # See: https://pypi.org/project/isort/\n    # \"S\",   # See: https://pypi.org/project/flake8-bandit\n    # \"UP\",  # See: https://docs.astral.sh/ruff/rules/#pyupgrade-up\n]\nlint.extend-select = [\n    # \"A\",     # See: https://pypi.org/project/flake8-builtins\n    \"B\",       # See: https://pypi.org/project/flake8-bugbear\n    \"C4\",      # See: https://pypi.org/project/flake8-comprehensions\n    \"TCH004\",  # See: https://docs.astral.sh/ruff/rules/runtime-import-in-type-checking-block/\n]\nlint.ignore = [\n    \"E203\",  # Whitespace before ':'\n    \"E731\",  # Do not assign a `lambda` expression, use a `def`\n]\nlint.ignore-init-module-imports = true\nlint.unfixable = [\n    \"F401\",  # Module imported but unused\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"test/**\" = [\n    \"B018\",  # useless-expression\n]\n\"fuzzing/fuzz-targets/**\" = [\n  \"E402\",  # environment setup must happen before the `git` module is imported, thus cannot happen at top of file\n]\n\n\n[tool.codespell]\nignore-words-list=\"afile,assertIn,doesnt,gud,uptodate\"\n#count = true\nquiet-level = 3\n"
        },
        {
          "name": "release-verification-key.asc",
          "type": "blob",
          "size": 5.064453125,
          "content": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\nfqxMjx0bDHkiDsZTgmEDJnz6+jK0DmvsFmU=\n=wC+d\n-----END PGP PUBLIC KEY BLOCK-----\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.173828125,
          "content": "-r requirements.txt\r\n-r test-requirements.txt\r\n\r\n# For additional local testing/linting - to be added elsewhere eventually.\r\nruff\r\nshellcheck\r\npytest-icdiff\r\n# pytest-profiling\r\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0625,
          "content": "gitdb>=4.0.1,<5\ntyping-extensions>=3.7.4.3;python_version<\"3.8\"\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.833984375,
          "content": "#!/usr/bin/env python\n\nimport os\nfrom pathlib import Path\nimport sys\nfrom typing import Sequence\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.build_py import build_py as _build_py\nfrom setuptools.command.sdist import sdist as _sdist\n\n\ndef _read_content(path: str) -> str:\n    return (Path(__file__).parent / path).read_text(encoding=\"utf-8\")\n\n\nversion = _read_content(\"VERSION\").strip()\nrequirements = _read_content(\"requirements.txt\").splitlines()\ntest_requirements = _read_content(\"test-requirements.txt\").splitlines()\ndoc_requirements = _read_content(\"doc/requirements.txt\").splitlines()\nlong_description = _read_content(\"README.md\")\n\n\nclass build_py(_build_py):\n    def run(self) -> None:\n        init = os.path.join(self.build_lib, \"git\", \"__init__.py\")\n        if os.path.exists(init):\n            os.unlink(init)\n        _build_py.run(self)\n        _stamp_version(init)\n        self.byte_compile([init])\n\n\nclass sdist(_sdist):\n    def make_release_tree(self, base_dir: str, files: Sequence) -> None:\n        _sdist.make_release_tree(self, base_dir, files)\n        orig = os.path.join(\"git\", \"__init__.py\")\n        assert os.path.exists(orig), orig\n        dest = os.path.join(base_dir, orig)\n        if hasattr(os, \"link\") and os.path.exists(dest):\n            os.unlink(dest)\n        self.copy_file(orig, dest)\n        _stamp_version(dest)\n\n\ndef _stamp_version(filename: str) -> None:\n    found, out = False, []\n    try:\n        with open(filename) as f:\n            for line in f:\n                if \"__version__ =\" in line:\n                    line = line.replace('\"git\"', \"'%s'\" % version)\n                    found = True\n                out.append(line)\n    except OSError:\n        print(\"Couldn't find file %s to stamp version\" % filename, file=sys.stderr)\n\n    if found:\n        with open(filename, \"w\") as f:\n            f.writelines(out)\n    else:\n        print(\"WARNING: Couldn't find version line in file %s\" % filename, file=sys.stderr)\n\n\nsetup(\n    name=\"GitPython\",\n    cmdclass={\"build_py\": build_py, \"sdist\": sdist},\n    version=version,\n    description=\"GitPython is a Python library used to interact with Git repositories\",\n    author=\"Sebastian Thiel, Michael Trier\",\n    author_email=\"byronimo@gmail.com, mtrier@gmail.com\",\n    license=\"BSD-3-Clause\",\n    url=\"https://github.com/gitpython-developers/GitPython\",\n    packages=find_packages(exclude=[\"test\", \"test.*\"]),\n    include_package_data=True,\n    package_dir={\"git\": \"git\"},\n    python_requires=\">=3.7\",\n    install_requires=requirements,\n    extras_require={\n        \"test\": test_requirements,\n        \"doc\": doc_requirements,\n    },\n    zip_safe=False,\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        # Picked from\n        #   http://pypi.python.org/pypi?:action=list_classifiers\n        # \"Development Status :: 1 - Planning\",\n        # \"Development Status :: 2 - Pre-Alpha\",\n        # \"Development Status :: 3 - Alpha\",\n        # \"Development Status :: 4 - Beta\",\n        \"Development Status :: 5 - Production/Stable\",\n        # \"Development Status :: 6 - Mature\",\n        # \"Development Status :: 7 - Inactive\",\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"License :: OSI Approved :: BSD License\",\n        \"Operating System :: OS Independent\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Typing :: Typed\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n    ],\n)\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.1923828125,
          "content": "coverage[toml]\nddt >= 1.1.1, != 1.4.3\nmock ; python_version < \"3.8\"\nmypy\npre-commit\npytest >= 7.3.1\npytest-cov\npytest-instafail\npytest-mock\npytest-sugar\ntyping-extensions ; python_version < \"3.11\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.1806640625,
          "content": "[tox]\nrequires = tox>=4\nenv_list = py{37,38,39,310,311,312}, ruff, format, mypy, html, misc\n\n[testenv]\ndescription = Run unit tests\npackage = wheel\nextras = test\npass_env = SSH_*\ncommands = pytest --color=yes {posargs}\n\n[testenv:ruff]\ndescription = Lint with Ruff\nbase_python = py{39,310,311,312,38,37}\ndeps = ruff\nset_env =\n    CLICOLOR_FORCE = 1  # Set NO_COLOR to override this.\ncommands = ruff check .\n\n[testenv:format]\ndescription = Check formatting with Ruff\nbase_python = py{39,310,311,312,38,37}\ndeps = ruff\nset_env =\n    CLICOLOR_FORCE = 1  # Set NO_COLOR to override this.\ncommands = ruff format --check .\n\n[testenv:mypy]\ndescription = Typecheck with mypy\nbase_python = py{39,310,311,312,38,37}\nset_env =\n    MYPY_FORCE_COLOR = 1\ncommands = mypy\nignore_outcome = true\n\n[testenv:html]\ndescription = Build HTML documentation\nbase_python = py{39,310,311,312,38,37}\nextras = doc\nallowlist_externals = make\ncommands =\n    make BUILDDIR={env_tmp_dir}/doc/build -C doc clean\n    make BUILDDIR={env_tmp_dir}/doc/build -C doc html\n\n[testenv:misc]\ndescription = Run other checks via pre-commit\nbase_python = py{39,310,311,312,38,37}\nset_env =\n    SKIP = ruff-format,ruff\ncommands = pre-commit run --all-files\n"
        }
      ]
    }
  ]
}