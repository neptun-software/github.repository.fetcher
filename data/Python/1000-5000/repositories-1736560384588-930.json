{
  "metadata": {
    "timestamp": 1736560384588,
    "page": 930,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MooreThreads/Moore-AnimateAnyone",
      "stars": 3273,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "__pycache__/\npretrained_weights/\noutput/\n.venv/\nmlruns/\ndata/\n\n*.pth\n*.pt\n*.pkl\n*.bin"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.15234375,
          "content": "Copyright @2023-2024 Moore Threads Technology Co., Ltd(\"Moore Threads\"). All rights reserved.\n\n  Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.634765625,
          "content": "==============================================================\nThis repo also contains various third-party components and some code modified from other repos under other open source licenses. The following sections contain licensing infromation for such third-party libraries.\n\n-----------------------------\nmajic-animate\nBSD 3-Clause License\nCopyright (c) Bytedance Inc.\n\n-----------------------------\nanimatediff\nApache License, Version 2.0\n\n-----------------------------\nDwpose\nApache License, Version 2.0\n\n-----------------------------\ninference pipeline for animatediff-cli-prompt-travel\nanimatediff-cli-prompt-travel\nApache License, Version 2.0"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.8955078125,
          "content": "# 🤗 Introduction  \n**update** 🔥🔥🔥 We propose a face reenactment method, based on our AnimateAnyone pipeline: Using the facial landmark of driving video to control the pose of given source image, and keeping the identity of source image. Specially, we disentangle head attitude (including eyes blink) and mouth motion from the landmark of driving video, and it can control the expression and movements of source face precisely. We release our inference codes and pretrained models of face reenactment!!\n\n\n**update** 🏋️🏋️🏋️ We release our training codes!! Now you can train your own AnimateAnyone models. See [here](#train) for more details. Have fun!\n\n**update**：🔥🔥🔥 We launch a HuggingFace Spaces demo of Moore-AnimateAnyone at [here](https://huggingface.co/spaces/xunsong/Moore-AnimateAnyone)!!\n\nThis repository reproduces [AnimateAnyone](https://github.com/HumanAIGC/AnimateAnyone). To align the results demonstrated by the original paper, we adopt various approaches and tricks, which may differ somewhat from the paper and another [implementation](https://github.com/guoqincode/Open-AnimateAnyone). \n\nIt's worth noting that this is a very preliminary version, aiming for approximating the performance (roughly 80% under our test) showed in [AnimateAnyone](https://github.com/HumanAIGC/AnimateAnyone). \n\nWe will continue to develop it, and also welcome feedbacks and ideas from the community. The enhanced version will also be launched on our [MoBi MaLiang](https://maliang.mthreads.com/) AIGC platform, running on our own full-featured GPU S4000 cloud computing platform.\n\n# 📝 Release Plans\n\n- [x] Inference codes and pretrained weights of AnimateAnyone  \n- [x] Training scripts of AnimateAnyone  \n- [x] Inference codes and pretrained weights of face reenactment\n- [ ] Training scripts of face reenactment\n- [ ] Inference scripts of audio driven portrait video generation\n- [ ] Training scripts of audio driven portrait video generation\n# 🎞️ Examples \n\n## AnimateAnyone  \n\nHere are some AnimateAnyone results we generated, with the resolution of 512x768.\n\nhttps://github.com/MooreThreads/Moore-AnimateAnyone/assets/138439222/f0454f30-6726-4ad4-80a7-5b7a15619057\n\nhttps://github.com/MooreThreads/Moore-AnimateAnyone/assets/138439222/337ff231-68a3-4760-a9f9-5113654acf48\n\n<table class=\"center\">\n    \n<tr>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/138439222/9c4d852e-0a99-4607-8d63-569a1f67a8d2\" muted=\"false\"></video>\n    </td>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/138439222/722c6535-2901-4e23-9de9-501b22306ebd\" muted=\"false\"></video>\n    </td>\n</tr>\n\n<tr>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/138439222/17b907cc-c97e-43cd-af18-b646393c8e8a\" muted=\"false\"></video>\n    </td>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/138439222/86f2f6d2-df60-4333-b19b-4c5abcd5999d\" muted=\"false\"></video>\n    </td>\n</tr>\n</table>\n\n**Limitation**: We observe following shortcomings in current version:\n1. The background may occur some artifacts, when the reference image has a clean background\n2. Suboptimal results may arise when there is a scale mismatch between the reference image and keypoints. We have yet to implement preprocessing techniques as mentioned in the [paper](https://arxiv.org/pdf/2311.17117.pdf).\n3. Some flickering and jittering may occur when the motion sequence is subtle or the scene is static.\n\n\n\nThese issues will be addressed and improved in the near future. We appreciate your anticipation!\n\n## Face Reenactment\n\nHere are some results we generated, with the resolution of 512x512.  \n\n<table class=\"center\">\n    \n<tr>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/117793823/8cfaddec-fb81-485e-88e9-229c0adb8bf9\" muted=\"false\"></video>\n    </td>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/117793823/ad06ba29-5bb2-490e-a204-7242c724ba8b\" muted=\"false\"></video>\n    </td>\n</tr>\n\n<tr>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/117793823/6843cdc0-830b-4f91-87c5-41cd12fbe8c2\" muted=\"false\"></video>\n    </td>\n    <td width=50% style=\"border: none\">\n        <video controls autoplay loop src=\"https://github.com/MooreThreads/Moore-AnimateAnyone/assets/117793823/bb9b8b74-ba4b-4f62-8fd1-7ebf140acc81\" muted=\"false\"></video>\n    </td>\n</tr>\n</table>\n\n\n# ⚒️ Installation\n\n## Build Environtment\n\nWe Recommend a python version `>=3.10` and cuda version `=11.7`. Then build environment as follows:\n\n```shell\n# [Optional] Create a virtual env\npython -m venv .venv\nsource .venv/bin/activate\n# Install with pip:\npip install -r requirements.txt  \n# For face landmark extraction\ngit clone https://github.com/emilianavt/OpenSeeFace.git  \n```\n\n## Download weights\n\n**Automatically downloading**: You can run the following command to download weights automatically:\n\n```shell\npython tools/download_weights.py\n```\n\nWeights will be placed under the `./pretrained_weights` direcotry. The whole downloading process may take a long time.\n\n**Manually downloading**: You can also download weights manually, which has some steps:\n\n1. Download our AnimateAnyone trained [weights](https://huggingface.co/patrolli/AnimateAnyone/tree/main), which include four parts: `denoising_unet.pth`, `reference_unet.pth`, `pose_guider.pth` and `motion_module.pth`.\n\n2. Download our trained [weights](https://pan.baidu.com/s/1lS5CynyNfYlDbjowKKfG8g?pwd=crci) of face reenactment, and place these weights under `pretrained_weights`.\n\n3. Download pretrained weight of based models and other components: \n    - [StableDiffusion V1.5](https://huggingface.co/runwayml/stable-diffusion-v1-5)\n    - [sd-vae-ft-mse](https://huggingface.co/stabilityai/sd-vae-ft-mse)\n    - [image_encoder](https://huggingface.co/lambdalabs/sd-image-variations-diffusers/tree/main/image_encoder)\n\n4. Download dwpose weights (`dw-ll_ucoco_384.onnx`, `yolox_l.onnx`) following [this](https://github.com/IDEA-Research/DWPose?tab=readme-ov-file#-dwpose-for-controlnet).\n\nFinally, these weights should be orgnized as follows:\n\n```text\n./pretrained_weights/\n|-- DWPose\n|   |-- dw-ll_ucoco_384.onnx\n|   `-- yolox_l.onnx\n|-- image_encoder\n|   |-- config.json\n|   `-- pytorch_model.bin\n|-- denoising_unet.pth\n|-- motion_module.pth\n|-- pose_guider.pth\n|-- reference_unet.pth\n|-- sd-vae-ft-mse\n|   |-- config.json\n|   |-- diffusion_pytorch_model.bin\n|   `-- diffusion_pytorch_model.safetensors\n|-- reenact\n|   |-- denoising_unet.pth\n|   |-- reference_unet.pth\n|   |-- pose_guider1.pth\n|   |-- pose_guider2.pth\n`-- stable-diffusion-v1-5\n    |-- feature_extractor\n    |   `-- preprocessor_config.json\n    |-- model_index.json\n    |-- unet\n    |   |-- config.json\n    |   `-- diffusion_pytorch_model.bin\n    `-- v1-inference.yaml\n```\n\nNote: If you have installed some of the pretrained models, such as `StableDiffusion V1.5`, you can specify their paths in the config file (e.g. `./config/prompts/animation.yaml`).\n\n# 🚀 Training and Inference \n\n## Inference of AnimateAnyone\n\nHere is the cli command for running inference scripts:\n\n```shell\npython -m scripts.pose2vid --config ./configs/prompts/animation.yaml -W 512 -H 784 -L 64\n```\n\nYou can refer the format of `animation.yaml` to add your own reference images or pose videos. To convert the raw video into a pose video (keypoint sequence), you can run with the following command:\n\n```shell\npython tools/vid2pose.py --video_path /path/to/your/video.mp4\n```\n\n## Inference of Face Reenactment\nHere is the cli command for running inference scripts:\n\n```shell\npython -m scripts.lmks2vid --config ./configs/prompts/inference_reenact.yaml --driving_video_path YOUR_OWN_DRIVING_VIDEO_PATH --source_image_path YOUR_OWN_SOURCE_IMAGE_PATH  \n```  \nWe provide some face images in `./config/inference/talkinghead_images`, and some face videos in `./config/inference/talkinghead_videos` for inference.  \n\n## <span id=\"train\"> Training of AnimateAnyone </span>\n\nNote: package dependencies have been updated, you may upgrade your environment via `pip install -r requirements.txt` before training.\n\n### Data Preparation\n\nExtract keypoints from raw videos: \n\n```shell\npython tools/extract_dwpose_from_vid.py --video_root /path/to/your/video_dir\n```\n\nExtract the meta info of dataset:\n\n```shell\npython tools/extract_meta_info.py --root_path /path/to/your/video_dir --dataset_name anyone \n```\n\nUpdate lines in the training config file: \n\n```yaml\ndata:\n  meta_paths:\n    - \"./data/anyone_meta.json\"\n```\n\n### Stage1\n\nPut [openpose controlnet weights](https://huggingface.co/lllyasviel/control_v11p_sd15_openpose/tree/main) under `./pretrained_weights`, which is used to initialize the pose_guider.\n\nPut [sd-image-variation](https://huggingface.co/lambdalabs/sd-image-variations-diffusers/tree/main) under `./pretrained_weights`, which is used to initialize unet weights.\n\nRun command:\n\n```shell\naccelerate launch train_stage_1.py --config configs/train/stage1.yaml\n```\n\n### Stage2\n\nPut the pretrained motion module weights `mm_sd_v15_v2.ckpt` ([download link](https://huggingface.co/guoyww/animatediff/blob/main/mm_sd_v15_v2.ckpt)) under `./pretrained_weights`. \n\nSpecify the stage1 training weights in the config file `stage2.yaml`, for example:\n\n```yaml\nstage1_ckpt_dir: './exp_output/stage1'\nstage1_ckpt_step: 30000 \n```\n\nRun command:\n\n```shell\naccelerate launch train_stage_2.py --config configs/train/stage2.yaml\n```\n\n# 🎨 Gradio Demo\n\n**HuggingFace Demo**: We launch a quick preview demo of Moore-AnimateAnyone at [HuggingFace Spaces](https://huggingface.co/spaces/xunsong/Moore-AnimateAnyone)!!\nWe appreciate the assistance provided by the HuggingFace team in setting up this demo.\n\nTo reduce waiting time, we limit the size (width, height, and length) and inference steps when generating videos. \n\nIf you have your own GPU resource (>= 16GB vram), you can run a local gradio app via following commands:\n\n`python app.py`\n\n# Community Contributions\n\n- Installation for Windows users: [Moore-AnimateAnyone-for-windows](https://github.com/sdbds/Moore-AnimateAnyone-for-windows)\n\n# 🖌️ Try on Mobi MaLiang\n\nWe will launched this model on our [MoBi MaLiang](https://maliang.mthreads.com/) AIGC platform, running on our own full-featured GPU S4000 cloud computing platform. Mobi MaLiang has now integrated various AIGC applications and functionalities (e.g. text-to-image, controllable generation...). You can experience it by [clicking this link](https://maliang.mthreads.com/) or scanning the QR code bellow via WeChat!\n\n<p align=\"left\">\n  <img src=\"assets/mini_program_maliang.png\" width=\"100\n  \"/>\n</p> \n\n# ⚖️ Disclaimer\n\nThis project is intended for academic research, and we explicitly disclaim any responsibility for user-generated content. Users are solely liable for their actions while using the generative model. The project contributors have no legal affiliation with, nor accountability for, users' behaviors. It is imperative to use the generative model responsibly, adhering to both ethical and legal standards.\n\n# 🙏🏻 Acknowledgements\n\nWe first thank the authors of [AnimateAnyone](). Additionally, we would like to thank the contributors to the [majic-animate](https://github.com/magic-research/magic-animate), [animatediff](https://github.com/guoyww/AnimateDiff) and [Open-AnimateAnyone](https://github.com/guoqincode/Open-AnimateAnyone) repositories, for their open research and exploration. Furthermore, our repo incorporates some codes from [dwpose](https://github.com/IDEA-Research/DWPose) and [animatediff-cli-prompt-travel](https://github.com/s9roll7/animatediff-cli-prompt-travel/), and we extend our thanks to them as well.\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 8.7900390625,
          "content": "import os\nimport random\nfrom datetime import datetime\n\nimport gradio as gr\nimport numpy as np\nimport torch\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom einops import repeat\nfrom omegaconf import OmegaConf\nfrom PIL import Image\nfrom torchvision import transforms\nfrom transformers import CLIPVisionModelWithProjection\n\nfrom src.models.pose_guider import PoseGuider\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d import UNet3DConditionModel\nfrom src.pipelines.pipeline_pose2vid_long import Pose2VideoPipeline\nfrom src.utils.util import get_fps, read_frames, save_videos_grid\n\n\nclass AnimateController:\n    def __init__(\n        self,\n        config_path=\"./configs/prompts/animation.yaml\",\n        weight_dtype=torch.float16,\n    ):\n        # Read pretrained weights path from config\n        self.config = OmegaConf.load(config_path)\n        self.pipeline = None\n        self.weight_dtype = weight_dtype\n\n    def animate(\n        self,\n        ref_image,\n        pose_video_path,\n        width=512,\n        height=768,\n        length=24,\n        num_inference_steps=25,\n        cfg=3.5,\n        seed=123,\n    ):\n        generator = torch.manual_seed(seed)\n        if isinstance(ref_image, np.ndarray):\n            ref_image = Image.fromarray(ref_image)\n        if self.pipeline is None:\n            vae = AutoencoderKL.from_pretrained(\n                self.config.pretrained_vae_path,\n            ).to(\"cuda\", dtype=self.weight_dtype)\n\n            reference_unet = UNet2DConditionModel.from_pretrained(\n                self.config.pretrained_base_model_path,\n                subfolder=\"unet\",\n            ).to(dtype=self.weight_dtype, device=\"cuda\")\n\n            inference_config_path = self.config.inference_config\n            infer_config = OmegaConf.load(inference_config_path)\n            denoising_unet = UNet3DConditionModel.from_pretrained_2d(\n                self.config.pretrained_base_model_path,\n                self.config.motion_module_path,\n                subfolder=\"unet\",\n                unet_additional_kwargs=infer_config.unet_additional_kwargs,\n            ).to(dtype=self.weight_dtype, device=\"cuda\")\n\n            pose_guider = PoseGuider(320, block_out_channels=(16, 32, 96, 256)).to(\n                dtype=self.weight_dtype, device=\"cuda\"\n            )\n\n            image_enc = CLIPVisionModelWithProjection.from_pretrained(\n                self.config.image_encoder_path\n            ).to(dtype=self.weight_dtype, device=\"cuda\")\n            sched_kwargs = OmegaConf.to_container(infer_config.noise_scheduler_kwargs)\n            scheduler = DDIMScheduler(**sched_kwargs)\n\n            # load pretrained weights\n            denoising_unet.load_state_dict(\n                torch.load(self.config.denoising_unet_path, map_location=\"cpu\"),\n                strict=False,\n            )\n            reference_unet.load_state_dict(\n                torch.load(self.config.reference_unet_path, map_location=\"cpu\"),\n            )\n            pose_guider.load_state_dict(\n                torch.load(self.config.pose_guider_path, map_location=\"cpu\"),\n            )\n\n            pipe = Pose2VideoPipeline(\n                vae=vae,\n                image_encoder=image_enc,\n                reference_unet=reference_unet,\n                denoising_unet=denoising_unet,\n                pose_guider=pose_guider,\n                scheduler=scheduler,\n            )\n            pipe = pipe.to(\"cuda\", dtype=self.weight_dtype)\n            self.pipeline = pipe\n\n        pose_images = read_frames(pose_video_path)\n        src_fps = get_fps(pose_video_path)\n\n        pose_list = []\n        pose_tensor_list = []\n        pose_transform = transforms.Compose(\n            [transforms.Resize((height, width)), transforms.ToTensor()]\n        )\n        for pose_image_pil in pose_images[:length]:\n            pose_list.append(pose_image_pil)\n            pose_tensor_list.append(pose_transform(pose_image_pil))\n\n        video = self.pipeline(\n            ref_image,\n            pose_list,\n            width=width,\n            height=height,\n            video_length=length,\n            num_inference_steps=num_inference_steps,\n            guidance_scale=cfg,\n            generator=generator,\n        ).videos\n\n        ref_image_tensor = pose_transform(ref_image)  # (c, h, w)\n        ref_image_tensor = ref_image_tensor.unsqueeze(1).unsqueeze(0)  # (1, c, 1, h, w)\n        ref_image_tensor = repeat(\n            ref_image_tensor, \"b c f h w -> b c (repeat f) h w\", repeat=length\n        )\n        pose_tensor = torch.stack(pose_tensor_list, dim=0)  # (f, c, h, w)\n        pose_tensor = pose_tensor.transpose(0, 1)\n        pose_tensor = pose_tensor.unsqueeze(0)\n        video = torch.cat([ref_image_tensor, pose_tensor, video], dim=0)\n\n        save_dir = f\"./output/gradio\"\n        if not os.path.exists(save_dir):\n            os.makedirs(save_dir, exist_ok=True)\n        date_str = datetime.now().strftime(\"%Y%m%d\")\n        time_str = datetime.now().strftime(\"%H%M\")\n        out_path = os.path.join(save_dir, f\"{date_str}T{time_str}.mp4\")\n        save_videos_grid(\n            video,\n            out_path,\n            n_rows=3,\n            fps=src_fps,\n        )\n\n        torch.cuda.empty_cache()\n\n        return out_path\n\n\ncontroller = AnimateController()\n\n\ndef ui():\n    with gr.Blocks() as demo:\n        gr.Markdown(\n            \"\"\"\n            # Moore-AnimateAnyone Demo\n            \"\"\"\n        )\n        animation = gr.Video(\n            format=\"mp4\",\n            label=\"Animation Results\",\n            height=448,\n            autoplay=True,\n        )\n\n        with gr.Row():\n            reference_image = gr.Image(label=\"Reference Image\")\n            motion_sequence = gr.Video(\n                format=\"mp4\", label=\"Motion Sequence\", height=512\n            )\n\n            with gr.Column():\n                width_slider = gr.Slider(\n                    label=\"Width\", minimum=448, maximum=768, value=512, step=64\n                )\n                height_slider = gr.Slider(\n                    label=\"Height\", minimum=512, maximum=1024, value=768, step=64\n                )\n                length_slider = gr.Slider(\n                    label=\"Video Length\", minimum=24, maximum=128, value=24, step=24\n                )\n                with gr.Row():\n                    seed_textbox = gr.Textbox(label=\"Seed\", value=-1)\n                    seed_button = gr.Button(\n                        value=\"\\U0001F3B2\", elem_classes=\"toolbutton\"\n                    )\n                    seed_button.click(\n                        fn=lambda: gr.Textbox.update(value=random.randint(1, 1e8)),\n                        inputs=[],\n                        outputs=[seed_textbox],\n                    )\n                with gr.Row():\n                    sampling_steps = gr.Slider(\n                        label=\"Sampling steps\",\n                        value=25,\n                        info=\"default: 25\",\n                        step=5,\n                        maximum=30,\n                        minimum=10,\n                    )\n                    guidance_scale = gr.Slider(\n                        label=\"Guidance scale\",\n                        value=3.5,\n                        info=\"default: 3.5\",\n                        step=0.5,\n                        maximum=10,\n                        minimum=2.0,\n                    )\n                submit = gr.Button(\"Animate\")\n\n        def read_video(video):\n            return video\n\n        def read_image(image):\n            return Image.fromarray(image)\n\n        # when user uploads a new video\n        motion_sequence.upload(read_video, motion_sequence, motion_sequence)\n        # when `first_frame` is updated\n        reference_image.upload(read_image, reference_image, reference_image)\n        # when the `submit` button is clicked\n        submit.click(\n            controller.animate,\n            [\n                reference_image,\n                motion_sequence,\n                width_slider,\n                height_slider,\n                length_slider,\n                sampling_steps,\n                guidance_scale,\n                seed_textbox,\n            ],\n            animation,\n        )\n\n        # Examples\n        gr.Markdown(\"## Examples\")\n        gr.Examples(\n            examples=[\n                [\n                    \"./configs/inference/ref_images/anyone-5.png\",\n                    \"./configs/inference/pose_videos/anyone-video-2_kps.mp4\",\n                ],\n                [\n                    \"./configs/inference/ref_images/anyone-10.png\",\n                    \"./configs/inference/pose_videos/anyone-video-1_kps.mp4\",\n                ],\n                [\n                    \"./configs/inference/ref_images/anyone-2.png\",\n                    \"./configs/inference/pose_videos/anyone-video-5_kps.mp4\",\n                ],\n            ],\n            inputs=[reference_image, motion_sequence],\n            outputs=animation,\n        )\n\n    return demo\n\n\ndemo = ui()\ndemo.launch(share=True)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.6748046875,
          "content": "accelerate==0.21.0\nav==11.0.0\nclip @ https://github.com/openai/CLIP/archive/d50d76daa670286dd6cacf3bcd80b5e4823fc8e1.zip#sha256=b5842c25da441d6c581b53a5c60e0c2127ebafe0f746f8e15561a006c6c3be6a\ndecord==0.6.0\ndiffusers==0.24.0\neinops==0.4.1\ngradio==3.41.2\ngradio_client==0.5.0\nimageio==2.33.0\nimageio-ffmpeg==0.4.9\nnumpy==1.23.5\nomegaconf==2.2.3\nonnxruntime-gpu==1.16.3\nopen-clip-torch==2.20.0\nopencv-contrib-python==4.8.1.78\nopencv-python==4.8.1.78\nPillow==9.5.0\nscikit-image==0.21.0\nscikit-learn==1.3.2\nscipy==1.11.4\ntorch==2.0.1\ntorchdiffeq==0.2.3\ntorchmetrics==1.2.1\ntorchsde==0.2.5\ntorchvision==0.15.2\ntqdm==4.66.1\ntransformers==4.30.2\nmlflow==2.9.2\nxformers==0.0.22\ncontrolnet-aux==0.0.7"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "train_stage_1.py",
          "type": "blob",
          "size": 25.9736328125,
          "content": "import argparse\nimport logging\nimport math\nimport os\nimport os.path as osp\nimport random\nimport warnings\nfrom datetime import datetime\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\n\nimport diffusers\nimport mlflow\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nimport transformers\nfrom accelerate import Accelerator\nfrom accelerate.logging import get_logger\nfrom accelerate.utils import DistributedDataParallelKwargs\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom diffusers.optimization import get_scheduler\nfrom diffusers.utils import check_min_version\nfrom diffusers.utils.import_utils import is_xformers_available\nfrom omegaconf import OmegaConf\nfrom PIL import Image\nfrom tqdm.auto import tqdm\nfrom transformers import CLIPVisionModelWithProjection\n\nfrom src.dataset.dance_image import HumanDanceDataset\nfrom src.dwpose import DWposeDetector\nfrom src.models.mutual_self_attention import ReferenceAttentionControl\nfrom src.models.pose_guider import PoseGuider\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d import UNet3DConditionModel\nfrom src.pipelines.pipeline_pose2img import Pose2ImagePipeline\nfrom src.utils.util import delete_additional_ckpt, import_filename, seed_everything\n\nwarnings.filterwarnings(\"ignore\")\n\n# Will error if the minimal version of diffusers is not installed. Remove at your own risks.\ncheck_min_version(\"0.10.0.dev0\")\n\nlogger = get_logger(__name__, log_level=\"INFO\")\n\n\nclass Net(nn.Module):\n    def __init__(\n        self,\n        reference_unet: UNet2DConditionModel,\n        denoising_unet: UNet3DConditionModel,\n        pose_guider: PoseGuider,\n        reference_control_writer,\n        reference_control_reader,\n    ):\n        super().__init__()\n        self.reference_unet = reference_unet\n        self.denoising_unet = denoising_unet\n        self.pose_guider = pose_guider\n        self.reference_control_writer = reference_control_writer\n        self.reference_control_reader = reference_control_reader\n\n    def forward(\n        self,\n        noisy_latents,\n        timesteps,\n        ref_image_latents,\n        clip_image_embeds,\n        pose_img,\n        uncond_fwd: bool = False,\n    ):\n        pose_cond_tensor = pose_img.to(device=\"cuda\")\n        pose_fea = self.pose_guider(pose_cond_tensor)\n\n        if not uncond_fwd:\n            ref_timesteps = torch.zeros_like(timesteps)\n            self.reference_unet(\n                ref_image_latents,\n                ref_timesteps,\n                encoder_hidden_states=clip_image_embeds,\n                return_dict=False,\n            )\n            self.reference_control_reader.update(self.reference_control_writer)\n\n        model_pred = self.denoising_unet(\n            noisy_latents,\n            timesteps,\n            pose_cond_fea=pose_fea,\n            encoder_hidden_states=clip_image_embeds,\n        ).sample\n\n        return model_pred\n\n\ndef compute_snr(noise_scheduler, timesteps):\n    \"\"\"\n    Computes SNR as per\n    https://github.com/TiankaiHang/Min-SNR-Diffusion-Training/blob/521b624bd70c67cee4bdf49225915f5945a872e3/guided_diffusion/gaussian_diffusion.py#L847-L849\n    \"\"\"\n    alphas_cumprod = noise_scheduler.alphas_cumprod\n    sqrt_alphas_cumprod = alphas_cumprod**0.5\n    sqrt_one_minus_alphas_cumprod = (1.0 - alphas_cumprod) ** 0.5\n\n    # Expand the tensors.\n    # Adapted from https://github.com/TiankaiHang/Min-SNR-Diffusion-Training/blob/521b624bd70c67cee4bdf49225915f5945a872e3/guided_diffusion/gaussian_diffusion.py#L1026\n    sqrt_alphas_cumprod = sqrt_alphas_cumprod.to(device=timesteps.device)[\n        timesteps\n    ].float()\n    while len(sqrt_alphas_cumprod.shape) < len(timesteps.shape):\n        sqrt_alphas_cumprod = sqrt_alphas_cumprod[..., None]\n    alpha = sqrt_alphas_cumprod.expand(timesteps.shape)\n\n    sqrt_one_minus_alphas_cumprod = sqrt_one_minus_alphas_cumprod.to(\n        device=timesteps.device\n    )[timesteps].float()\n    while len(sqrt_one_minus_alphas_cumprod.shape) < len(timesteps.shape):\n        sqrt_one_minus_alphas_cumprod = sqrt_one_minus_alphas_cumprod[..., None]\n    sigma = sqrt_one_minus_alphas_cumprod.expand(timesteps.shape)\n\n    # Compute SNR.\n    snr = (alpha / sigma) ** 2\n    return snr\n\n\ndef log_validation(\n    vae,\n    image_enc,\n    net,\n    scheduler,\n    accelerator,\n    width,\n    height,\n):\n    logger.info(\"Running validation... \")\n\n    ori_net = accelerator.unwrap_model(net)\n    reference_unet = ori_net.reference_unet\n    denoising_unet = ori_net.denoising_unet\n    pose_guider = ori_net.pose_guider\n\n    # generator = torch.manual_seed(42)\n    generator = torch.Generator().manual_seed(42)\n    # cast unet dtype\n    vae = vae.to(dtype=torch.float32)\n    image_enc = image_enc.to(dtype=torch.float32)\n\n    pose_detector = DWposeDetector()\n    pose_detector.to(accelerator.device)\n\n    pipe = Pose2ImagePipeline(\n        vae=vae,\n        image_encoder=image_enc,\n        reference_unet=reference_unet,\n        denoising_unet=denoising_unet,\n        pose_guider=pose_guider,\n        scheduler=scheduler,\n    )\n    pipe = pipe.to(accelerator.device)\n\n    ref_image_paths = [\n        \"./configs/inference/ref_images/anyone-2.png\",\n        \"./configs/inference/ref_images/anyone-3.png\",\n    ]\n    pose_image_paths = [\n        \"./configs/inference/pose_images/pose-1.png\",\n        \"./configs/inference/pose_images/pose-1.png\",\n    ]\n\n    pil_images = []\n    for ref_image_path in ref_image_paths:\n        for pose_image_path in pose_image_paths:\n            pose_name = pose_image_path.split(\"/\")[-1].replace(\".png\", \"\")\n            ref_name = ref_image_path.split(\"/\")[-1].replace(\".png\", \"\")\n            ref_image_pil = Image.open(ref_image_path).convert(\"RGB\")\n            pose_image_pil = Image.open(pose_image_path).convert(\"RGB\")\n\n            image = pipe(\n                ref_image_pil,\n                pose_image_pil,\n                width,\n                height,\n                20,\n                3.5,\n                generator=generator,\n            ).images\n            image = image[0, :, 0].permute(1, 2, 0).cpu().numpy()  # (3, 512, 512)\n            res_image_pil = Image.fromarray((image * 255).astype(np.uint8))\n            # Save ref_image, src_image and the generated_image\n            w, h = res_image_pil.size\n            canvas = Image.new(\"RGB\", (w * 3, h), \"white\")\n            ref_image_pil = ref_image_pil.resize((w, h))\n            pose_image_pil = pose_image_pil.resize((w, h))\n            canvas.paste(ref_image_pil, (0, 0))\n            canvas.paste(pose_image_pil, (w, 0))\n            canvas.paste(res_image_pil, (w * 2, 0))\n\n            pil_images.append({\"name\": f\"{ref_name}_{pose_name}\", \"img\": canvas})\n\n    vae = vae.to(dtype=torch.float16)\n    image_enc = image_enc.to(dtype=torch.float16)\n\n    del pipe\n    torch.cuda.empty_cache()\n\n    return pil_images\n\n\ndef main(cfg):\n    kwargs = DistributedDataParallelKwargs(find_unused_parameters=True)\n    accelerator = Accelerator(\n        gradient_accumulation_steps=cfg.solver.gradient_accumulation_steps,\n        mixed_precision=cfg.solver.mixed_precision,\n        log_with=\"mlflow\",\n        project_dir=\"./mlruns\",\n        kwargs_handlers=[kwargs],\n    )\n\n    # Make one log on every process with the configuration for debugging.\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n        datefmt=\"%m/%d/%Y %H:%M:%S\",\n        level=logging.INFO,\n    )\n    logger.info(accelerator.state, main_process_only=False)\n    if accelerator.is_local_main_process:\n        transformers.utils.logging.set_verbosity_warning()\n        diffusers.utils.logging.set_verbosity_info()\n    else:\n        transformers.utils.logging.set_verbosity_error()\n        diffusers.utils.logging.set_verbosity_error()\n\n    # If passed along, set the training seed now.\n    if cfg.seed is not None:\n        seed_everything(cfg.seed)\n\n    exp_name = cfg.exp_name\n    save_dir = f\"{cfg.output_dir}/{exp_name}\"\n    if accelerator.is_main_process and not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n\n    if cfg.weight_dtype == \"fp16\":\n        weight_dtype = torch.float16\n    elif cfg.weight_dtype == \"fp32\":\n        weight_dtype = torch.float32\n    else:\n        raise ValueError(\n            f\"Do not support weight dtype: {cfg.weight_dtype} during training\"\n        )\n\n    sched_kwargs = OmegaConf.to_container(cfg.noise_scheduler_kwargs)\n    if cfg.enable_zero_snr:\n        sched_kwargs.update(\n            rescale_betas_zero_snr=True,\n            timestep_spacing=\"trailing\",\n            prediction_type=\"v_prediction\",\n        )\n    val_noise_scheduler = DDIMScheduler(**sched_kwargs)\n    sched_kwargs.update({\"beta_schedule\": \"scaled_linear\"})\n    train_noise_scheduler = DDIMScheduler(**sched_kwargs)\n    vae = AutoencoderKL.from_pretrained(cfg.vae_model_path).to(\n        \"cuda\", dtype=weight_dtype\n    )\n\n    reference_unet = UNet2DConditionModel.from_pretrained(\n        cfg.base_model_path,\n        subfolder=\"unet\",\n    ).to(device=\"cuda\")\n    denoising_unet = UNet3DConditionModel.from_pretrained_2d(\n        cfg.base_model_path,\n        \"\",\n        subfolder=\"unet\",\n        unet_additional_kwargs={\n            \"use_motion_module\": False,\n            \"unet_use_temporal_attention\": False,\n        },\n    ).to(device=\"cuda\")\n\n    image_enc = CLIPVisionModelWithProjection.from_pretrained(\n        cfg.image_encoder_path,\n    ).to(dtype=weight_dtype, device=\"cuda\")\n\n    if cfg.pose_guider_pretrain:\n        pose_guider = PoseGuider(\n            conditioning_embedding_channels=320, block_out_channels=(16, 32, 96, 256)\n        ).to(device=\"cuda\")\n        # load pretrained controlnet-openpose params for pose_guider\n        controlnet_openpose_state_dict = torch.load(cfg.controlnet_openpose_path)\n        state_dict_to_load = {}\n        for k in controlnet_openpose_state_dict.keys():\n            if k.startswith(\"controlnet_cond_embedding.\") and k.find(\"conv_out\") < 0:\n                new_k = k.replace(\"controlnet_cond_embedding.\", \"\")\n                state_dict_to_load[new_k] = controlnet_openpose_state_dict[k]\n        miss, _ = pose_guider.load_state_dict(state_dict_to_load, strict=False)\n        logger.info(f\"Missing key for pose guider: {len(miss)}\")\n    else:\n        pose_guider = PoseGuider(\n            conditioning_embedding_channels=320,\n        ).to(device=\"cuda\")\n\n    # Freeze\n    vae.requires_grad_(False)\n    image_enc.requires_grad_(False)\n\n    # Explictly declare training models\n    denoising_unet.requires_grad_(True)\n    #  Some top layer parames of reference_unet don't need grad\n    for name, param in reference_unet.named_parameters():\n        if \"up_blocks.3\" in name:\n            param.requires_grad_(False)\n        else:\n            param.requires_grad_(True)\n\n    pose_guider.requires_grad_(True)\n\n    reference_control_writer = ReferenceAttentionControl(\n        reference_unet,\n        do_classifier_free_guidance=False,\n        mode=\"write\",\n        fusion_blocks=\"full\",\n    )\n    reference_control_reader = ReferenceAttentionControl(\n        denoising_unet,\n        do_classifier_free_guidance=False,\n        mode=\"read\",\n        fusion_blocks=\"full\",\n    )\n\n    net = Net(\n        reference_unet,\n        denoising_unet,\n        pose_guider,\n        reference_control_writer,\n        reference_control_reader,\n    )\n\n    if cfg.solver.enable_xformers_memory_efficient_attention:\n        if is_xformers_available():\n            reference_unet.enable_xformers_memory_efficient_attention()\n            denoising_unet.enable_xformers_memory_efficient_attention()\n        else:\n            raise ValueError(\n                \"xformers is not available. Make sure it is installed correctly\"\n            )\n\n    if cfg.solver.gradient_checkpointing:\n        reference_unet.enable_gradient_checkpointing()\n        denoising_unet.enable_gradient_checkpointing()\n\n    if cfg.solver.scale_lr:\n        learning_rate = (\n            cfg.solver.learning_rate\n            * cfg.solver.gradient_accumulation_steps\n            * cfg.data.train_bs\n            * accelerator.num_processes\n        )\n    else:\n        learning_rate = cfg.solver.learning_rate\n\n    # Initialize the optimizer\n    if cfg.solver.use_8bit_adam:\n        try:\n            import bitsandbytes as bnb\n        except ImportError:\n            raise ImportError(\n                \"Please install bitsandbytes to use 8-bit Adam. You can do so by running `pip install bitsandbytes`\"\n            )\n\n        optimizer_cls = bnb.optim.AdamW8bit\n    else:\n        optimizer_cls = torch.optim.AdamW\n\n    trainable_params = list(filter(lambda p: p.requires_grad, net.parameters()))\n    optimizer = optimizer_cls(\n        trainable_params,\n        lr=learning_rate,\n        betas=(cfg.solver.adam_beta1, cfg.solver.adam_beta2),\n        weight_decay=cfg.solver.adam_weight_decay,\n        eps=cfg.solver.adam_epsilon,\n    )\n\n    # Scheduler\n    lr_scheduler = get_scheduler(\n        cfg.solver.lr_scheduler,\n        optimizer=optimizer,\n        num_warmup_steps=cfg.solver.lr_warmup_steps\n        * cfg.solver.gradient_accumulation_steps,\n        num_training_steps=cfg.solver.max_train_steps\n        * cfg.solver.gradient_accumulation_steps,\n    )\n\n    train_dataset = HumanDanceDataset(\n        img_size=(cfg.data.train_width, cfg.data.train_height),\n        img_scale=(0.9, 1.0),\n        data_meta_paths=cfg.data.meta_paths,\n        sample_margin=cfg.data.sample_margin,\n    )\n    train_dataloader = torch.utils.data.DataLoader(\n        train_dataset, batch_size=cfg.data.train_bs, shuffle=True, num_workers=4\n    )\n\n    # Prepare everything with our `accelerator`.\n    (\n        net,\n        optimizer,\n        train_dataloader,\n        lr_scheduler,\n    ) = accelerator.prepare(\n        net,\n        optimizer,\n        train_dataloader,\n        lr_scheduler,\n    )\n\n    # We need to recalculate our total training steps as the size of the training dataloader may have changed.\n    num_update_steps_per_epoch = math.ceil(\n        len(train_dataloader) / cfg.solver.gradient_accumulation_steps\n    )\n    # Afterwards we recalculate our number of training epochs\n    num_train_epochs = math.ceil(\n        cfg.solver.max_train_steps / num_update_steps_per_epoch\n    )\n\n    # We need to initialize the trackers we use, and also store our configuration.\n    # The trackers initializes automatically on the main process.\n    if accelerator.is_main_process:\n        run_time = datetime.now().strftime(\"%Y%m%d-%H%M\")\n        accelerator.init_trackers(\n            cfg.exp_name,\n            init_kwargs={\"mlflow\": {\"run_name\": run_time}},\n        )\n        # dump config file\n        mlflow.log_dict(OmegaConf.to_container(cfg), \"config.yaml\")\n\n    # Train!\n    total_batch_size = (\n        cfg.data.train_bs\n        * accelerator.num_processes\n        * cfg.solver.gradient_accumulation_steps\n    )\n\n    logger.info(\"***** Running training *****\")\n    logger.info(f\"  Num examples = {len(train_dataset)}\")\n    logger.info(f\"  Num Epochs = {num_train_epochs}\")\n    logger.info(f\"  Instantaneous batch size per device = {cfg.data.train_bs}\")\n    logger.info(\n        f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_batch_size}\"\n    )\n    logger.info(\n        f\"  Gradient Accumulation steps = {cfg.solver.gradient_accumulation_steps}\"\n    )\n    logger.info(f\"  Total optimization steps = {cfg.solver.max_train_steps}\")\n    global_step = 0\n    first_epoch = 0\n\n    # Potentially load in the weights and states from a previous save\n    if cfg.resume_from_checkpoint:\n        if cfg.resume_from_checkpoint != \"latest\":\n            resume_dir = cfg.resume_from_checkpoint\n        else:\n            resume_dir = save_dir\n        # Get the most recent checkpoint\n        dirs = os.listdir(resume_dir)\n        dirs = [d for d in dirs if d.startswith(\"checkpoint\")]\n        dirs = sorted(dirs, key=lambda x: int(x.split(\"-\")[1]))\n        path = dirs[-1]\n        accelerator.load_state(os.path.join(resume_dir, path))\n        accelerator.print(f\"Resuming from checkpoint {path}\")\n        global_step = int(path.split(\"-\")[1])\n\n        first_epoch = global_step // num_update_steps_per_epoch\n        resume_step = global_step % num_update_steps_per_epoch\n\n    # Only show the progress bar once on each machine.\n    progress_bar = tqdm(\n        range(global_step, cfg.solver.max_train_steps),\n        disable=not accelerator.is_local_main_process,\n    )\n    progress_bar.set_description(\"Steps\")\n\n    for epoch in range(first_epoch, num_train_epochs):\n        train_loss = 0.0\n        for step, batch in enumerate(train_dataloader):\n            with accelerator.accumulate(net):\n                # Convert videos to latent space\n                pixel_values = batch[\"img\"].to(weight_dtype)\n                with torch.no_grad():\n                    latents = vae.encode(pixel_values).latent_dist.sample()\n                    latents = latents.unsqueeze(2)  # (b, c, 1, h, w)\n                    latents = latents * 0.18215\n\n                noise = torch.randn_like(latents)\n                if cfg.noise_offset > 0.0:\n                    noise += cfg.noise_offset * torch.randn(\n                        (noise.shape[0], noise.shape[1], 1, 1, 1),\n                        device=noise.device,\n                    )\n\n                bsz = latents.shape[0]\n                # Sample a random timestep for each video\n                timesteps = torch.randint(\n                    0,\n                    train_noise_scheduler.num_train_timesteps,\n                    (bsz,),\n                    device=latents.device,\n                )\n                timesteps = timesteps.long()\n\n                tgt_pose_img = batch[\"tgt_pose\"]\n                tgt_pose_img = tgt_pose_img.unsqueeze(2)  # (bs, 3, 1, 512, 512)\n\n                uncond_fwd = random.random() < cfg.uncond_ratio\n                clip_image_list = []\n                ref_image_list = []\n                for batch_idx, (ref_img, clip_img) in enumerate(\n                    zip(\n                        batch[\"ref_img\"],\n                        batch[\"clip_images\"],\n                    )\n                ):\n                    if uncond_fwd:\n                        clip_image_list.append(torch.zeros_like(clip_img))\n                    else:\n                        clip_image_list.append(clip_img)\n                    ref_image_list.append(ref_img)\n\n                with torch.no_grad():\n                    ref_img = torch.stack(ref_image_list, dim=0).to(\n                        dtype=vae.dtype, device=vae.device\n                    )\n                    ref_image_latents = vae.encode(\n                        ref_img\n                    ).latent_dist.sample()  # (bs, d, 64, 64)\n                    ref_image_latents = ref_image_latents * 0.18215\n\n                    clip_img = torch.stack(clip_image_list, dim=0).to(\n                        dtype=image_enc.dtype, device=image_enc.device\n                    )\n                    clip_image_embeds = image_enc(\n                        clip_img.to(\"cuda\", dtype=weight_dtype)\n                    ).image_embeds\n                    image_prompt_embeds = clip_image_embeds.unsqueeze(1)  # (bs, 1, d)\n\n                # add noise\n                noisy_latents = train_noise_scheduler.add_noise(\n                    latents, noise, timesteps\n                )\n\n                # Get the target for loss depending on the prediction type\n                if train_noise_scheduler.prediction_type == \"epsilon\":\n                    target = noise\n                elif train_noise_scheduler.prediction_type == \"v_prediction\":\n                    target = train_noise_scheduler.get_velocity(\n                        latents, noise, timesteps\n                    )\n                else:\n                    raise ValueError(\n                        f\"Unknown prediction type {train_noise_scheduler.prediction_type}\"\n                    )\n\n                model_pred = net(\n                    noisy_latents,\n                    timesteps,\n                    ref_image_latents,\n                    image_prompt_embeds,\n                    tgt_pose_img,\n                    uncond_fwd,\n                )\n\n                if cfg.snr_gamma == 0:\n                    loss = F.mse_loss(\n                        model_pred.float(), target.float(), reduction=\"mean\"\n                    )\n                else:\n                    snr = compute_snr(train_noise_scheduler, timesteps)\n                    if train_noise_scheduler.config.prediction_type == \"v_prediction\":\n                        # Velocity objective requires that we add one to SNR values before we divide by them.\n                        snr = snr + 1\n                    mse_loss_weights = (\n                        torch.stack(\n                            [snr, cfg.snr_gamma * torch.ones_like(timesteps)], dim=1\n                        ).min(dim=1)[0]\n                        / snr\n                    )\n                    loss = F.mse_loss(\n                        model_pred.float(), target.float(), reduction=\"none\"\n                    )\n                    loss = (\n                        loss.mean(dim=list(range(1, len(loss.shape))))\n                        * mse_loss_weights\n                    )\n                    loss = loss.mean()\n\n                # Gather the losses across all processes for logging (if we use distributed training).\n                avg_loss = accelerator.gather(loss.repeat(cfg.data.train_bs)).mean()\n                train_loss += avg_loss.item() / cfg.solver.gradient_accumulation_steps\n\n                # Backpropagate\n                accelerator.backward(loss)\n                if accelerator.sync_gradients:\n                    accelerator.clip_grad_norm_(\n                        trainable_params,\n                        cfg.solver.max_grad_norm,\n                    )\n                optimizer.step()\n                lr_scheduler.step()\n                optimizer.zero_grad()\n\n            if accelerator.sync_gradients:\n                reference_control_reader.clear()\n                reference_control_writer.clear()\n                progress_bar.update(1)\n                global_step += 1\n                accelerator.log({\"train_loss\": train_loss}, step=global_step)\n                train_loss = 0.0\n                if global_step % cfg.checkpointing_steps == 0:\n                    if accelerator.is_main_process:\n                        save_path = os.path.join(save_dir, f\"checkpoint-{global_step}\")\n                        delete_additional_ckpt(save_dir, 1)\n                        accelerator.save_state(save_path)\n\n                if global_step % cfg.val.validation_steps == 0:\n                    if accelerator.is_main_process:\n                        generator = torch.Generator(device=accelerator.device)\n                        generator.manual_seed(cfg.seed)\n\n                        sample_dicts = log_validation(\n                            vae=vae,\n                            image_enc=image_enc,\n                            net=net,\n                            scheduler=val_noise_scheduler,\n                            accelerator=accelerator,\n                            width=cfg.data.train_width,\n                            height=cfg.data.train_height,\n                        )\n\n                        for sample_id, sample_dict in enumerate(sample_dicts):\n                            sample_name = sample_dict[\"name\"]\n                            img = sample_dict[\"img\"]\n                            with TemporaryDirectory() as temp_dir:\n                                out_file = Path(\n                                    f\"{temp_dir}/{global_step:06d}-{sample_name}.gif\"\n                                )\n                                img.save(out_file)\n                                mlflow.log_artifact(out_file)\n\n            logs = {\n                \"step_loss\": loss.detach().item(),\n                \"lr\": lr_scheduler.get_last_lr()[0],\n            }\n            progress_bar.set_postfix(**logs)\n\n            if global_step >= cfg.solver.max_train_steps:\n                break\n\n        # save model after each epoch\n        if (\n            epoch + 1\n        ) % cfg.save_model_epoch_interval == 0 and accelerator.is_main_process:\n            unwrap_net = accelerator.unwrap_model(net)\n            save_checkpoint(\n                unwrap_net.reference_unet,\n                save_dir,\n                \"reference_unet\",\n                global_step,\n                total_limit=3,\n            )\n            save_checkpoint(\n                unwrap_net.denoising_unet,\n                save_dir,\n                \"denoising_unet\",\n                global_step,\n                total_limit=3,\n            )\n            save_checkpoint(\n                unwrap_net.pose_guider,\n                save_dir,\n                \"pose_guider\",\n                global_step,\n                total_limit=3,\n            )\n\n    # Create the pipeline using the trained modules and save it.\n    accelerator.wait_for_everyone()\n    accelerator.end_training()\n\n\ndef save_checkpoint(model, save_dir, prefix, ckpt_num, total_limit=None):\n    save_path = osp.join(save_dir, f\"{prefix}-{ckpt_num}.pth\")\n\n    if total_limit is not None:\n        checkpoints = os.listdir(save_dir)\n        checkpoints = [d for d in checkpoints if d.startswith(prefix)]\n        checkpoints = sorted(\n            checkpoints, key=lambda x: int(x.split(\"-\")[1].split(\".\")[0])\n        )\n\n        if len(checkpoints) >= total_limit:\n            num_to_remove = len(checkpoints) - total_limit + 1\n            removing_checkpoints = checkpoints[0:num_to_remove]\n            logger.info(\n                f\"{len(checkpoints)} checkpoints already exist, removing {len(removing_checkpoints)} checkpoints\"\n            )\n            logger.info(f\"removing checkpoints: {', '.join(removing_checkpoints)}\")\n\n            for removing_checkpoint in removing_checkpoints:\n                removing_checkpoint = os.path.join(save_dir, removing_checkpoint)\n                os.remove(removing_checkpoint)\n\n    state_dict = model.state_dict()\n    torch.save(state_dict, save_path)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=\"./configs/training/stage1.yaml\")\n    args = parser.parse_args()\n\n    if args.config[-5:] == \".yaml\":\n        config = OmegaConf.load(args.config)\n    elif args.config[-3:] == \".py\":\n        config = import_filename(args.config).cfg\n    else:\n        raise ValueError(\"Do not support this format config file\")\n    main(config)\n"
        },
        {
          "name": "train_stage_2.py",
          "type": "blob",
          "size": 27.205078125,
          "content": "import argparse\nimport copy\nimport logging\nimport math\nimport os\nimport os.path as osp\nimport random\nimport time\nimport warnings\nfrom collections import OrderedDict\nfrom datetime import datetime\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\n\nimport diffusers\nimport mlflow\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.utils.checkpoint\nimport transformers\nfrom accelerate import Accelerator\nfrom accelerate.logging import get_logger\nfrom accelerate.utils import DistributedDataParallelKwargs\nfrom diffusers import AutoencoderKL, DDIMScheduler\nfrom diffusers.optimization import get_scheduler\nfrom diffusers.utils import check_min_version\nfrom diffusers.utils.import_utils import is_xformers_available\nfrom einops import rearrange\nfrom omegaconf import OmegaConf\nfrom PIL import Image\nfrom torchvision import transforms\nfrom tqdm.auto import tqdm\nfrom transformers import CLIPVisionModelWithProjection\n\nfrom src.dataset.dance_video import HumanDanceVideoDataset\nfrom src.models.mutual_self_attention import ReferenceAttentionControl\nfrom src.models.pose_guider import PoseGuider\nfrom src.models.unet_2d_condition import UNet2DConditionModel\nfrom src.models.unet_3d import UNet3DConditionModel\nfrom src.pipelines.pipeline_pose2vid import Pose2VideoPipeline\nfrom src.utils.util import (\n    delete_additional_ckpt,\n    import_filename,\n    read_frames,\n    save_videos_grid,\n    seed_everything,\n)\n\nwarnings.filterwarnings(\"ignore\")\n\n# Will error if the minimal version of diffusers is not installed. Remove at your own risks.\ncheck_min_version(\"0.10.0.dev0\")\n\nlogger = get_logger(__name__, log_level=\"INFO\")\n\n\nclass Net(nn.Module):\n    def __init__(\n        self,\n        reference_unet: UNet2DConditionModel,\n        denoising_unet: UNet3DConditionModel,\n        pose_guider: PoseGuider,\n        reference_control_writer,\n        reference_control_reader,\n    ):\n        super().__init__()\n        self.reference_unet = reference_unet\n        self.denoising_unet = denoising_unet\n        self.pose_guider = pose_guider\n        self.reference_control_writer = reference_control_writer\n        self.reference_control_reader = reference_control_reader\n\n    def forward(\n        self,\n        noisy_latents,\n        timesteps,\n        ref_image_latents,\n        clip_image_embeds,\n        pose_img,\n        uncond_fwd: bool = False,\n    ):\n        pose_cond_tensor = pose_img.to(device=\"cuda\")\n        pose_fea = self.pose_guider(pose_cond_tensor)\n\n        if not uncond_fwd:\n            ref_timesteps = torch.zeros_like(timesteps)\n            self.reference_unet(\n                ref_image_latents,\n                ref_timesteps,\n                encoder_hidden_states=clip_image_embeds,\n                return_dict=False,\n            )\n            self.reference_control_reader.update(self.reference_control_writer)\n\n        model_pred = self.denoising_unet(\n            noisy_latents,\n            timesteps,\n            pose_cond_fea=pose_fea,\n            encoder_hidden_states=clip_image_embeds,\n        ).sample\n\n        return model_pred\n\n\ndef compute_snr(noise_scheduler, timesteps):\n    \"\"\"\n    Computes SNR as per\n    https://github.com/TiankaiHang/Min-SNR-Diffusion-Training/blob/521b624bd70c67cee4bdf49225915f5945a872e3/guided_diffusion/gaussian_diffusion.py#L847-L849\n    \"\"\"\n    alphas_cumprod = noise_scheduler.alphas_cumprod\n    sqrt_alphas_cumprod = alphas_cumprod**0.5\n    sqrt_one_minus_alphas_cumprod = (1.0 - alphas_cumprod) ** 0.5\n\n    # Expand the tensors.\n    # Adapted from https://github.com/TiankaiHang/Min-SNR-Diffusion-Training/blob/521b624bd70c67cee4bdf49225915f5945a872e3/guided_diffusion/gaussian_diffusion.py#L1026\n    sqrt_alphas_cumprod = sqrt_alphas_cumprod.to(device=timesteps.device)[\n        timesteps\n    ].float()\n    while len(sqrt_alphas_cumprod.shape) < len(timesteps.shape):\n        sqrt_alphas_cumprod = sqrt_alphas_cumprod[..., None]\n    alpha = sqrt_alphas_cumprod.expand(timesteps.shape)\n\n    sqrt_one_minus_alphas_cumprod = sqrt_one_minus_alphas_cumprod.to(\n        device=timesteps.device\n    )[timesteps].float()\n    while len(sqrt_one_minus_alphas_cumprod.shape) < len(timesteps.shape):\n        sqrt_one_minus_alphas_cumprod = sqrt_one_minus_alphas_cumprod[..., None]\n    sigma = sqrt_one_minus_alphas_cumprod.expand(timesteps.shape)\n\n    # Compute SNR.\n    snr = (alpha / sigma) ** 2\n    return snr\n\n\ndef log_validation(\n    vae,\n    image_enc,\n    net,\n    scheduler,\n    accelerator,\n    width,\n    height,\n    clip_length=24,\n    generator=None,\n):\n    logger.info(\"Running validation... \")\n\n    ori_net = accelerator.unwrap_model(net)\n    reference_unet = ori_net.reference_unet\n    denoising_unet = ori_net.denoising_unet\n    pose_guider = ori_net.pose_guider\n\n    if generator is None:\n        generator = torch.manual_seed(42)\n    tmp_denoising_unet = copy.deepcopy(denoising_unet)\n    tmp_denoising_unet = tmp_denoising_unet.to(dtype=torch.float16)\n\n    pipe = Pose2VideoPipeline(\n        vae=vae,\n        image_encoder=image_enc,\n        reference_unet=reference_unet,\n        denoising_unet=tmp_denoising_unet,\n        pose_guider=pose_guider,\n        scheduler=scheduler,\n    )\n    pipe = pipe.to(accelerator.device)\n\n    test_cases = [\n        (\n            \"./configs/inference/ref_images/anyone-3.png\",\n            \"./configs/inference/pose_videos/anyone-video-1_kps.mp4\",\n        ),\n        (\n            \"./configs/inference/ref_images/anyone-2.png\",\n            \"./configs/inference/pose_videos/anyone-video-2_kps.mp4\",\n        ),\n    ]\n\n    results = []\n    for test_case in test_cases:\n        ref_image_path, pose_video_path = test_case\n        ref_name = Path(ref_image_path).stem\n        pose_name = Path(pose_video_path).stem\n        ref_image_pil = Image.open(ref_image_path).convert(\"RGB\")\n\n        pose_list = []\n        pose_tensor_list = []\n        pose_images = read_frames(pose_video_path)\n        pose_transform = transforms.Compose(\n            [transforms.Resize((height, width)), transforms.ToTensor()]\n        )\n        for pose_image_pil in pose_images[:clip_length]:\n            pose_tensor_list.append(pose_transform(pose_image_pil))\n            pose_list.append(pose_image_pil)\n\n        pose_tensor = torch.stack(pose_tensor_list, dim=0)  # (f, c, h, w)\n        pose_tensor = pose_tensor.transpose(0, 1)\n\n        pipeline_output = pipe(\n            ref_image_pil,\n            pose_list,\n            width,\n            height,\n            clip_length,\n            20,\n            3.5,\n            generator=generator,\n        )\n        video = pipeline_output.videos\n\n        # Concat it with pose tensor\n        pose_tensor = pose_tensor.unsqueeze(0)\n        video = torch.cat([video, pose_tensor], dim=0)\n\n        results.append({\"name\": f\"{ref_name}_{pose_name}\", \"vid\": video})\n\n    del tmp_denoising_unet\n    del pipe\n    torch.cuda.empty_cache()\n\n    return results\n\n\ndef main(cfg):\n    kwargs = DistributedDataParallelKwargs(find_unused_parameters=False)\n    accelerator = Accelerator(\n        gradient_accumulation_steps=cfg.solver.gradient_accumulation_steps,\n        mixed_precision=cfg.solver.mixed_precision,\n        log_with=\"mlflow\",\n        project_dir=\"./mlruns\",\n        kwargs_handlers=[kwargs],\n    )\n\n    # Make one log on every process with the configuration for debugging.\n    logging.basicConfig(\n        format=\"%(asctime)s - %(levelname)s - %(name)s - %(message)s\",\n        datefmt=\"%m/%d/%Y %H:%M:%S\",\n        level=logging.INFO,\n    )\n    logger.info(accelerator.state, main_process_only=False)\n    if accelerator.is_local_main_process:\n        transformers.utils.logging.set_verbosity_warning()\n        diffusers.utils.logging.set_verbosity_info()\n    else:\n        transformers.utils.logging.set_verbosity_error()\n        diffusers.utils.logging.set_verbosity_error()\n\n    # If passed along, set the training seed now.\n    if cfg.seed is not None:\n        seed_everything(cfg.seed)\n\n    exp_name = cfg.exp_name\n    save_dir = f\"{cfg.output_dir}/{exp_name}\"\n    if accelerator.is_main_process:\n        if not os.path.exists(save_dir):\n            os.makedirs(save_dir)\n\n    inference_config_path = \"./configs/inference/inference_v2.yaml\"\n    infer_config = OmegaConf.load(inference_config_path)\n\n    if cfg.weight_dtype == \"fp16\":\n        weight_dtype = torch.float16\n    elif cfg.weight_dtype == \"fp32\":\n        weight_dtype = torch.float32\n    else:\n        raise ValueError(\n            f\"Do not support weight dtype: {cfg.weight_dtype} during training\"\n        )\n\n    sched_kwargs = OmegaConf.to_container(cfg.noise_scheduler_kwargs)\n    if cfg.enable_zero_snr:\n        sched_kwargs.update(\n            rescale_betas_zero_snr=True,\n            timestep_spacing=\"trailing\",\n            prediction_type=\"v_prediction\",\n        )\n    val_noise_scheduler = DDIMScheduler(**sched_kwargs)\n    sched_kwargs.update({\"beta_schedule\": \"scaled_linear\"})\n    train_noise_scheduler = DDIMScheduler(**sched_kwargs)\n\n    image_enc = CLIPVisionModelWithProjection.from_pretrained(\n        cfg.image_encoder_path,\n    ).to(dtype=weight_dtype, device=\"cuda\")\n    vae = AutoencoderKL.from_pretrained(cfg.vae_model_path).to(\n        \"cuda\", dtype=weight_dtype\n    )\n    reference_unet = UNet2DConditionModel.from_pretrained(\n        cfg.base_model_path,\n        subfolder=\"unet\",\n    ).to(device=\"cuda\", dtype=weight_dtype)\n\n    denoising_unet = UNet3DConditionModel.from_pretrained_2d(\n        cfg.base_model_path,\n        cfg.mm_path,\n        subfolder=\"unet\",\n        unet_additional_kwargs=OmegaConf.to_container(\n            infer_config.unet_additional_kwargs\n        ),\n    ).to(device=\"cuda\")\n\n    pose_guider = PoseGuider(\n        conditioning_embedding_channels=320, block_out_channels=(16, 32, 96, 256)\n    ).to(device=\"cuda\", dtype=weight_dtype)\n\n    stage1_ckpt_dir = cfg.stage1_ckpt_dir\n    stage1_ckpt_step = cfg.stage1_ckpt_step\n    denoising_unet.load_state_dict(\n        torch.load(\n            os.path.join(stage1_ckpt_dir, f\"denoising_unet-{stage1_ckpt_step}.pth\"),\n            map_location=\"cpu\",\n        ),\n        strict=False,\n    )\n    reference_unet.load_state_dict(\n        torch.load(\n            os.path.join(stage1_ckpt_dir, f\"reference_unet-{stage1_ckpt_step}.pth\"),\n            map_location=\"cpu\",\n        ),\n        strict=False,\n    )\n    pose_guider.load_state_dict(\n        torch.load(\n            os.path.join(stage1_ckpt_dir, f\"pose_guider-{stage1_ckpt_step}.pth\"),\n            map_location=\"cpu\",\n        ),\n        strict=False,\n    )\n\n    # Freeze\n    vae.requires_grad_(False)\n    image_enc.requires_grad_(False)\n    reference_unet.requires_grad_(False)\n    denoising_unet.requires_grad_(False)\n    pose_guider.requires_grad_(False)\n\n    # Set motion module learnable\n    for name, module in denoising_unet.named_modules():\n        if \"motion_modules\" in name:\n            for params in module.parameters():\n                params.requires_grad = True\n\n    reference_control_writer = ReferenceAttentionControl(\n        reference_unet,\n        do_classifier_free_guidance=False,\n        mode=\"write\",\n        fusion_blocks=\"full\",\n    )\n    reference_control_reader = ReferenceAttentionControl(\n        denoising_unet,\n        do_classifier_free_guidance=False,\n        mode=\"read\",\n        fusion_blocks=\"full\",\n    )\n\n    net = Net(\n        reference_unet,\n        denoising_unet,\n        pose_guider,\n        reference_control_writer,\n        reference_control_reader,\n    )\n\n    if cfg.solver.enable_xformers_memory_efficient_attention:\n        if is_xformers_available():\n            reference_unet.enable_xformers_memory_efficient_attention()\n            denoising_unet.enable_xformers_memory_efficient_attention()\n        else:\n            raise ValueError(\n                \"xformers is not available. Make sure it is installed correctly\"\n            )\n\n    if cfg.solver.gradient_checkpointing:\n        reference_unet.enable_gradient_checkpointing()\n        denoising_unet.enable_gradient_checkpointing()\n\n    if cfg.solver.scale_lr:\n        learning_rate = (\n            cfg.solver.learning_rate\n            * cfg.solver.gradient_accumulation_steps\n            * cfg.data.train_bs\n            * accelerator.num_processes\n        )\n    else:\n        learning_rate = cfg.solver.learning_rate\n\n    # Initialize the optimizer\n    if cfg.solver.use_8bit_adam:\n        try:\n            import bitsandbytes as bnb\n        except ImportError:\n            raise ImportError(\n                \"Please install bitsandbytes to use 8-bit Adam. You can do so by running `pip install bitsandbytes`\"\n            )\n\n        optimizer_cls = bnb.optim.AdamW8bit\n    else:\n        optimizer_cls = torch.optim.AdamW\n\n    trainable_params = list(filter(lambda p: p.requires_grad, net.parameters()))\n    logger.info(f\"Total trainable params {len(trainable_params)}\")\n    optimizer = optimizer_cls(\n        trainable_params,\n        lr=learning_rate,\n        betas=(cfg.solver.adam_beta1, cfg.solver.adam_beta2),\n        weight_decay=cfg.solver.adam_weight_decay,\n        eps=cfg.solver.adam_epsilon,\n    )\n\n    # Scheduler\n    lr_scheduler = get_scheduler(\n        cfg.solver.lr_scheduler,\n        optimizer=optimizer,\n        num_warmup_steps=cfg.solver.lr_warmup_steps\n        * cfg.solver.gradient_accumulation_steps,\n        num_training_steps=cfg.solver.max_train_steps\n        * cfg.solver.gradient_accumulation_steps,\n    )\n\n    train_dataset = HumanDanceVideoDataset(\n        width=cfg.data.train_width,\n        height=cfg.data.train_height,\n        n_sample_frames=cfg.data.n_sample_frames,\n        sample_rate=cfg.data.sample_rate,\n        img_scale=(1.0, 1.0),\n        data_meta_paths=cfg.data.meta_paths,\n    )\n    train_dataloader = torch.utils.data.DataLoader(\n        train_dataset, batch_size=cfg.data.train_bs, shuffle=True, num_workers=4\n    )\n\n    # Prepare everything with our `accelerator`.\n    (\n        net,\n        optimizer,\n        train_dataloader,\n        lr_scheduler,\n    ) = accelerator.prepare(\n        net,\n        optimizer,\n        train_dataloader,\n        lr_scheduler,\n    )\n\n    # We need to recalculate our total training steps as the size of the training dataloader may have changed.\n    num_update_steps_per_epoch = math.ceil(\n        len(train_dataloader) / cfg.solver.gradient_accumulation_steps\n    )\n    # Afterwards we recalculate our number of training epochs\n    num_train_epochs = math.ceil(\n        cfg.solver.max_train_steps / num_update_steps_per_epoch\n    )\n\n    # We need to initialize the trackers we use, and also store our configuration.\n    # The trackers initializes automatically on the main process.\n    if accelerator.is_main_process:\n        run_time = datetime.now().strftime(\"%Y%m%d-%H%M\")\n        accelerator.init_trackers(\n            exp_name,\n            init_kwargs={\"mlflow\": {\"run_name\": run_time}},\n        )\n        # dump config file\n        mlflow.log_dict(OmegaConf.to_container(cfg), \"config.yaml\")\n\n    # Train!\n    total_batch_size = (\n        cfg.data.train_bs\n        * accelerator.num_processes\n        * cfg.solver.gradient_accumulation_steps\n    )\n\n    logger.info(\"***** Running training *****\")\n    logger.info(f\"  Num examples = {len(train_dataset)}\")\n    logger.info(f\"  Num Epochs = {num_train_epochs}\")\n    logger.info(f\"  Instantaneous batch size per device = {cfg.data.train_bs}\")\n    logger.info(\n        f\"  Total train batch size (w. parallel, distributed & accumulation) = {total_batch_size}\"\n    )\n    logger.info(\n        f\"  Gradient Accumulation steps = {cfg.solver.gradient_accumulation_steps}\"\n    )\n    logger.info(f\"  Total optimization steps = {cfg.solver.max_train_steps}\")\n    global_step = 0\n    first_epoch = 0\n\n    # Potentially load in the weights and states from a previous save\n    if cfg.resume_from_checkpoint:\n        if cfg.resume_from_checkpoint != \"latest\":\n            resume_dir = cfg.resume_from_checkpoint\n        else:\n            resume_dir = save_dir\n        # Get the most recent checkpoint\n        dirs = os.listdir(resume_dir)\n        dirs = [d for d in dirs if d.startswith(\"checkpoint\")]\n        dirs = sorted(dirs, key=lambda x: int(x.split(\"-\")[1]))\n        path = dirs[-1]\n        accelerator.load_state(os.path.join(resume_dir, path))\n        accelerator.print(f\"Resuming from checkpoint {path}\")\n        global_step = int(path.split(\"-\")[1])\n\n        first_epoch = global_step // num_update_steps_per_epoch\n        resume_step = global_step % num_update_steps_per_epoch\n\n    # Only show the progress bar once on each machine.\n    progress_bar = tqdm(\n        range(global_step, cfg.solver.max_train_steps),\n        disable=not accelerator.is_local_main_process,\n    )\n    progress_bar.set_description(\"Steps\")\n\n    for epoch in range(first_epoch, num_train_epochs):\n        train_loss = 0.0\n        t_data_start = time.time()\n        for step, batch in enumerate(train_dataloader):\n            t_data = time.time() - t_data_start\n            with accelerator.accumulate(net):\n                # Convert videos to latent space\n                pixel_values_vid = batch[\"pixel_values_vid\"].to(weight_dtype)\n                with torch.no_grad():\n                    video_length = pixel_values_vid.shape[1]\n                    pixel_values_vid = rearrange(\n                        pixel_values_vid, \"b f c h w -> (b f) c h w\"\n                    )\n                    latents = vae.encode(pixel_values_vid).latent_dist.sample()\n                    latents = rearrange(\n                        latents, \"(b f) c h w -> b c f h w\", f=video_length\n                    )\n                    latents = latents * 0.18215\n\n                noise = torch.randn_like(latents)\n                if cfg.noise_offset > 0:\n                    noise += cfg.noise_offset * torch.randn(\n                        (latents.shape[0], latents.shape[1], 1, 1, 1),\n                        device=latents.device,\n                    )\n                bsz = latents.shape[0]\n                # Sample a random timestep for each video\n                timesteps = torch.randint(\n                    0,\n                    train_noise_scheduler.num_train_timesteps,\n                    (bsz,),\n                    device=latents.device,\n                )\n                timesteps = timesteps.long()\n\n                pixel_values_pose = batch[\"pixel_values_pose\"]  # (bs, f, c, H, W)\n                pixel_values_pose = pixel_values_pose.transpose(\n                    1, 2\n                )  # (bs, c, f, H, W)\n\n                uncond_fwd = random.random() < cfg.uncond_ratio\n                clip_image_list = []\n                ref_image_list = []\n                for batch_idx, (ref_img, clip_img) in enumerate(\n                    zip(\n                        batch[\"pixel_values_ref_img\"],\n                        batch[\"clip_ref_img\"],\n                    )\n                ):\n                    if uncond_fwd:\n                        clip_image_list.append(torch.zeros_like(clip_img))\n                    else:\n                        clip_image_list.append(clip_img)\n                    ref_image_list.append(ref_img)\n\n                with torch.no_grad():\n                    ref_img = torch.stack(ref_image_list, dim=0).to(\n                        dtype=vae.dtype, device=vae.device\n                    )\n                    ref_image_latents = vae.encode(\n                        ref_img\n                    ).latent_dist.sample()  # (bs, d, 64, 64)\n                    ref_image_latents = ref_image_latents * 0.18215\n\n                    clip_img = torch.stack(clip_image_list, dim=0).to(\n                        dtype=image_enc.dtype, device=image_enc.device\n                    )\n                    clip_img = clip_img.to(device=\"cuda\", dtype=weight_dtype)\n                    clip_image_embeds = image_enc(\n                        clip_img.to(\"cuda\", dtype=weight_dtype)\n                    ).image_embeds\n                    clip_image_embeds = clip_image_embeds.unsqueeze(1)  # (bs, 1, d)\n\n                # add noise\n                noisy_latents = train_noise_scheduler.add_noise(\n                    latents, noise, timesteps\n                )\n\n                # Get the target for loss depending on the prediction type\n                if train_noise_scheduler.prediction_type == \"epsilon\":\n                    target = noise\n                elif train_noise_scheduler.prediction_type == \"v_prediction\":\n                    target = train_noise_scheduler.get_velocity(\n                        latents, noise, timesteps\n                    )\n                else:\n                    raise ValueError(\n                        f\"Unknown prediction type {train_noise_scheduler.prediction_type}\"\n                    )\n\n                # ---- Forward!!! -----\n                model_pred = net(\n                    noisy_latents,\n                    timesteps,\n                    ref_image_latents,\n                    clip_image_embeds,\n                    pixel_values_pose,\n                    uncond_fwd=uncond_fwd,\n                )\n\n                if cfg.snr_gamma == 0:\n                    loss = F.mse_loss(\n                        model_pred.float(), target.float(), reduction=\"mean\"\n                    )\n                else:\n                    snr = compute_snr(train_noise_scheduler, timesteps)\n                    if train_noise_scheduler.config.prediction_type == \"v_prediction\":\n                        # Velocity objective requires that we add one to SNR values before we divide by them.\n                        snr = snr + 1\n                    mse_loss_weights = (\n                        torch.stack(\n                            [snr, cfg.snr_gamma * torch.ones_like(timesteps)], dim=1\n                        ).min(dim=1)[0]\n                        / snr\n                    )\n                    loss = F.mse_loss(\n                        model_pred.float(), target.float(), reduction=\"none\"\n                    )\n                    loss = (\n                        loss.mean(dim=list(range(1, len(loss.shape))))\n                        * mse_loss_weights\n                    )\n                    loss = loss.mean()\n\n                # Gather the losses across all processes for logging (if we use distributed training).\n                avg_loss = accelerator.gather(loss.repeat(cfg.data.train_bs)).mean()\n                train_loss += avg_loss.item() / cfg.solver.gradient_accumulation_steps\n\n                # Backpropagate\n                accelerator.backward(loss)\n                if accelerator.sync_gradients:\n                    accelerator.clip_grad_norm_(\n                        trainable_params,\n                        cfg.solver.max_grad_norm,\n                    )\n                optimizer.step()\n                lr_scheduler.step()\n                optimizer.zero_grad()\n\n            if accelerator.sync_gradients:\n                reference_control_reader.clear()\n                reference_control_writer.clear()\n                progress_bar.update(1)\n                global_step += 1\n                accelerator.log({\"train_loss\": train_loss}, step=global_step)\n                train_loss = 0.0\n\n                if global_step % cfg.val.validation_steps == 0:\n                    if accelerator.is_main_process:\n                        generator = torch.Generator(device=accelerator.device)\n                        generator.manual_seed(cfg.seed)\n\n                        sample_dicts = log_validation(\n                            vae=vae,\n                            image_enc=image_enc,\n                            net=net,\n                            scheduler=val_noise_scheduler,\n                            accelerator=accelerator,\n                            width=cfg.data.train_width,\n                            height=cfg.data.train_height,\n                            clip_length=cfg.data.n_sample_frames,\n                            generator=generator,\n                        )\n\n                        for sample_id, sample_dict in enumerate(sample_dicts):\n                            sample_name = sample_dict[\"name\"]\n                            vid = sample_dict[\"vid\"]\n                            with TemporaryDirectory() as temp_dir:\n                                out_file = Path(\n                                    f\"{temp_dir}/{global_step:06d}-{sample_name}.gif\"\n                                )\n                                save_videos_grid(vid, out_file, n_rows=2)\n                                mlflow.log_artifact(out_file)\n\n            logs = {\n                \"step_loss\": loss.detach().item(),\n                \"lr\": lr_scheduler.get_last_lr()[0],\n                \"td\": f\"{t_data:.2f}s\",\n            }\n            t_data_start = time.time()\n            progress_bar.set_postfix(**logs)\n\n            if global_step >= cfg.solver.max_train_steps:\n                break\n        # save model after each epoch\n        if accelerator.is_main_process:\n            save_path = os.path.join(save_dir, f\"checkpoint-{global_step}\")\n            delete_additional_ckpt(save_dir, 1)\n            accelerator.save_state(save_path)\n            # save motion module only\n            unwrap_net = accelerator.unwrap_model(net)\n            save_checkpoint(\n                unwrap_net.denoising_unet,\n                save_dir,\n                \"motion_module\",\n                global_step,\n                total_limit=3,\n            )\n\n    # Create the pipeline using the trained modules and save it.\n    accelerator.wait_for_everyone()\n    accelerator.end_training()\n\n\ndef save_checkpoint(model, save_dir, prefix, ckpt_num, total_limit=None):\n    save_path = osp.join(save_dir, f\"{prefix}-{ckpt_num}.pth\")\n\n    if total_limit is not None:\n        checkpoints = os.listdir(save_dir)\n        checkpoints = [d for d in checkpoints if d.startswith(prefix)]\n        checkpoints = sorted(\n            checkpoints, key=lambda x: int(x.split(\"-\")[1].split(\".\")[0])\n        )\n\n        if len(checkpoints) >= total_limit:\n            num_to_remove = len(checkpoints) - total_limit + 1\n            removing_checkpoints = checkpoints[0:num_to_remove]\n            logger.info(\n                f\"{len(checkpoints)} checkpoints already exist, removing {len(removing_checkpoints)} checkpoints\"\n            )\n            logger.info(f\"removing checkpoints: {', '.join(removing_checkpoints)}\")\n\n            for removing_checkpoint in removing_checkpoints:\n                removing_checkpoint = os.path.join(save_dir, removing_checkpoint)\n                os.remove(removing_checkpoint)\n\n    mm_state_dict = OrderedDict()\n    state_dict = model.state_dict()\n    for key in state_dict:\n        if \"motion_module\" in key:\n            mm_state_dict[key] = state_dict[key]\n\n    torch.save(mm_state_dict, save_path)\n\n\ndef decode_latents(vae, latents):\n    video_length = latents.shape[2]\n    latents = 1 / 0.18215 * latents\n    latents = rearrange(latents, \"b c f h w -> (b f) c h w\")\n    # video = self.vae.decode(latents).sample\n    video = []\n    for frame_idx in tqdm(range(latents.shape[0])):\n        video.append(vae.decode(latents[frame_idx : frame_idx + 1]).sample)\n    video = torch.cat(video)\n    video = rearrange(video, \"(b f) c h w -> b c f h w\", f=video_length)\n    video = (video / 2 + 0.5).clamp(0, 1)\n    # we always cast to float32 as this does not cause significant overhead and is compatible with bfloa16\n    video = video.cpu().float().numpy()\n    return video\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--config\", type=str, default=\"./configs/training/stage2.yaml\")\n    args = parser.parse_args()\n\n    if args.config[-5:] == \".yaml\":\n        config = OmegaConf.load(args.config)\n    elif args.config[-3:] == \".py\":\n        config = import_filename(args.config).cfg\n    else:\n        raise ValueError(\"Do not support this format config file\")\n    main(config)\n"
        }
      ]
    }
  ]
}