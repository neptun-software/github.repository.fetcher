{
  "metadata": {
    "timestamp": 1736559756236,
    "page": 465,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brightmart/albert_zh",
      "stars": 3946,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.6611328125,
          "content": "# albert_zh\n\nAn Implementation of <a href=\"https://arxiv.org/pdf/1909.11942.pdf\">A Lite Bert For Self-Supervised Learning Language Representations</a> with TensorFlow\n\nALBert is based on Bert, but with some improvements. It achieves state of the art performance on main benchmarks with 30% parameters less. \n\nFor albert_base_zh it only has ten percentage parameters compare of original bert model, and main accuracy is retained. \n\n\nDifferent version of ALBERT pre-trained model for Chinese, including TensorFlow, PyTorch and Keras, is available now.\n\n海量中文语料上预训练ALBERT模型：参数更少，效果更好。预训练小模型也能拿下13项NLP任务，ALBERT三大改造登顶GLUE基准\n\n<a href='https://www.cluebenchmarks.com/clueai.html'>clueai工具包: 三行代码，三分钟定制一个NLP的API（零样本学习）</a>\n\n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/albert_tiny_compare_s.jpg\"  width=\"90%\" height=\"70%\" />\n\n一键运行10个数据集、9个基线模型、不同任务上模型效果的详细对比，见<a href=\"http://www.CLUEbenchmarks.com\">CLUE benchmark</a>\n\n一键运行CLUE中文任务：6个中文分类或句子对任务（新）\n---------------------------------------------------------------------\n    使用方式：\n    1、克隆项目\n       git clone https://github.com/brightmart/albert_zh.git\n    2、运行一键运行脚本(GPU方式): 会自动下载模型和所有任务数据并开始运行。\n       bash run_classifier_clue.sh\n       执行该一键运行脚本将会自动下载所有任务数据，并为所有任务找到最优模型，然后测试得到提交结果\n    \n\n模型下载 Download Pre-trained Models of Chinese\n-----------------------------------------------\n1、<a href=\"https://storage.googleapis.com/albert_zh/albert_tiny.zip\">albert_tiny_zh</a>, <a href=\"https://storage.googleapis.com/albert_zh/albert_tiny_489k.zip\">albert_tiny_zh(训练更久，累积学习20亿个样本)</a>，文件大小16M、参数为4M\n\n    训练和推理预测速度提升约10倍，精度基本保留，模型大小为bert的1/25；语义相似度数据集LCQMC测试集上达到85.4%，相比bert_base仅下降1.5个点。\n\n    lcqmc训练使用如下参数： --max_seq_length=128 --train_batch_size=64   --learning_rate=1e-4   --num_train_epochs=5 \n    \n    albert_tiny使用同样的大规模中文语料数据，层数仅为4层、hidden size等向量维度大幅减少; 尝试使用如下学习率来获得更好效果：{2e-5, 6e-5, 1e-4} \n    \n    【使用场景】任务相对比较简单一些或实时性要求高的任务，如语义相似度等句子对任务、分类任务；比较难的任务如阅读理解等，可以使用其他大模型。\n\n     例如，可以使用[Tensorflow Lite](https://www.tensorflow.org/lite)在移动端进行部署，本文[随后](#use_tflite)针对这一点进行了介绍，包括如何把模型转换成Tensorflow Lite格式和对其进行性能测试等。\n     \n     一键运行albert_tiny_zh(linux,lcqmc任务)：\n     1) git clone https://github.com/brightmart/albert_zh\n     2) cd albert_zh\n     3) bash run_classifier_lcqmc.sh\n1.1、<a href=\"https://storage.googleapis.com/albert_zh/albert_tiny_zh_google.zip\">albert_tiny_google_zh(累积学习10亿个样本,google版本)</a>，模型大小16M、性能与albert_tiny_zh一致\n\n1.2、<a href=\"https://storage.googleapis.com/albert_zh/albert_small_zh_google.zip\">albert_small_google_zh(累积学习10亿个样本,google版本)</a>，\n     \n     速度比bert_base快4倍；LCQMC测试集上比Bert下降仅0.9个点；去掉adam后模型大小18.5M；使用方法，见 #下游任务 Fine-tuning on Downstream Task     \n     \n2、<a href=\"https://storage.googleapis.com/albert_zh/albert_large_zh.zip\">albert_large_zh</a>,参数量，层数24，文件大小为64M\n   \n    参数量和模型大小为bert_base的六分之一；在口语化描述相似性数据集LCQMC的测试集上相比bert_base上升0.2个点\n\n3、<a href=\"https://storage.googleapis.com/albert_zh/albert_base_zh_additional_36k_steps.zip\">albert_base_zh(额外训练了1.5亿个实例即 36k steps * batch_size 4096)</a>; <a href=\"https://storage.googleapis.com/albert_zh/albert_base_zh.zip\"> albert_base_zh(小模型体验版)</a>, 参数量12M, 层数12，大小为40M\n\n    参数量为bert_base的十分之一，模型大小也十分之一；在口语化描述相似性数据集LCQMC的测试集上相比bert_base下降约0.6~1个点；\n    相比未预训练，albert_base提升14个点\n\n4、<a href=\"https://storage.googleapis.com/albert_zh/albert_xlarge_zh_177k.zip\">albert_xlarge_zh_177k </a>; \n<a href=\"https://storage.googleapis.com/albert_zh/albert_xlarge_zh_183k.zip\">albert_xlarge_zh_183k(优先尝试)</a>参数量，层数24，文件大小为230M\n   \n    参数量和模型大小为bert_base的二分之一；需要一张大的显卡；完整测试对比将后续添加；batch_size不能太小，否则可能影响精度\n\n### 快速加载\n依托于[Huggingface-Transformers 2.2.2](https://github.com/huggingface/transformers)，可轻松调用以上模型。\n```\ntokenizer = AutoTokenizer.from_pretrained(\"MODEL_NAME\")\nmodel = AutoModel.from_pretrained(\"MODEL_NAME\")\n```\n\n其中`MODEL_NAME`对应列表如下：\n\n| 模型名 | MODEL_NAME |\n| - | - |\n| albert_tiny_google_zh | voidful/albert_chinese_tiny |\n| albert_small_google_zh | voidful/albert_chinese_small  |\n| albert_base_zh (from google) | voidful/albert_chinese_base   |\n| albert_large_zh (from google) | voidful/albert_chinese_large   |\n| albert_xlarge_zh (from google) | voidful/albert_chinese_xlarge   |\n| albert_xxlarge_zh (from google) | voidful/albert_chinese_xxlarge   |\n\n更多通过transformers使用albert的<a href='https://huggingface.co/models?search=albert_chinese'>示例</a>\n\n预训练 Pre-training\n-----------------------------------------------\n\n#### 生成特定格式的文件(tfrecords) Generate tfrecords Files\n\nRun following command 运行以下命令即可。项目自动了一个示例的文本文件(data/news_zh_1.txt)\n   \n       bash create_pretrain_data.sh\n   \n如果你有很多文本文件，可以通过传入参数的方式，生成多个特定格式的文件(tfrecords）\n\n###### Support English and Other Non-Chinese Language: \n    If you are doing pre-train for english or other language,which is not chinese, \n    you should set hyperparameter of non_chinese to True on create_pretraining_data.py; \n    otherwise, by default it is doing chinese pre-train using whole word mask of chinese.\n\n#### 执行预训练 pre-training on GPU/TPU using the command\n    GPU(brightmart版, tiny模型):\n    export BERT_BASE_DIR=./albert_tiny_zh\n    nohup python3 run_pretraining.py --input_file=./data/tf*.tfrecord  \\\n    --output_dir=./my_new_model_path --do_train=True --do_eval=True --bert_config_file=$BERT_BASE_DIR/albert_config_tiny.json \\\n    --train_batch_size=4096 --max_seq_length=512 --max_predictions_per_seq=51 \\\n    --num_train_steps=125000 --num_warmup_steps=12500 --learning_rate=0.00176    \\\n    --save_checkpoints_steps=2000  --init_checkpoint=$BERT_BASE_DIR/albert_model.ckpt &\n    \n    GPU(Google版本, small模型):\n    export BERT_BASE_DIR=./albert_small_zh_google\n    nohup python3 run_pretraining_google.py --input_file=./data/tf*.tfrecord --eval_batch_size=64 \\\n    --output_dir=./my_new_model_path --do_train=True --do_eval=True --albert_config_file=$BERT_BASE_DIR/albert_config_small_google.json  --export_dir=./my_new_model_path_export \\\n    --train_batch_size=4096 --max_seq_length=512 --max_predictions_per_seq=20 \\\n    --num_train_steps=125000 --num_warmup_steps=12500 --learning_rate=0.00176   \\\n    --save_checkpoints_steps=2000 --init_checkpoint=$BERT_BASE_DIR/albert_model.ckpt\n    \n    TPU, add something like this:\n        --use_tpu=True  --tpu_name=grpc://10.240.1.66:8470 --tpu_zone=us-central1-a\n        \n    注：如果你重头开始训练，可以不指定init_checkpoint；\n    如果你从现有的模型基础上训练，指定一下BERT_BASE_DIR的路径，并确保bert_config_file和init_checkpoint两个参数的值能对应到相应的文件上；\n    领域上的预训练，根据数据的大小，可以不用训练特别久。\n\n环境 Environment\n-----------------------------------------------\nUse Python3 + Tensorflow 1.x \n\ne.g. Tensorflow 1.4 or 1.5\n\n\n下游任务 Fine-tuning on Downstream Task\n-----------------------------------------------\n##### 使用TensorFlow:\n\n以使用albert_base做LCQMC任务为例。LCQMC任务是在口语化描述的数据集上做文本的相似性预测。\n\nWe will use LCQMC dataset for fine-tuning, it is oral language corpus, it is used to train and predict semantic similarity of a pair of sentences.\n\n下载<a href=\"https://drive.google.com/open?id=1HXYMqsXjmA5uIfu_SFqP7r_vZZG-m_H0\">LCQMC</a>数据集，包含训练、验证和测试集，训练集包含24万口语化描述的中文句子对，标签为1或0。1为句子语义相似，0为语义不相似。\n\n通过运行下列命令做LCQMC数据集上的fine-tuning:\n    \n    1. Clone this project:\n          \n          git clone https://github.com/brightmart/albert_zh.git\n          \n    2. Fine-tuning by running the following command.\n        brightmart版本的tiny模型\n        export BERT_BASE_DIR=./albert_tiny_zh\n        export TEXT_DIR=./lcqmc\n        nohup python3 run_classifier.py   --task_name=lcqmc_pair   --do_train=true   --do_eval=true   --data_dir=$TEXT_DIR   --vocab_file=./albert_config/vocab.txt  \\\n        --bert_config_file=./albert_config/albert_config_tiny.json --max_seq_length=128 --train_batch_size=64   --learning_rate=1e-4  --num_train_epochs=5 \\\n        --output_dir=./albert_lcqmc_checkpoints --init_checkpoint=$BERT_BASE_DIR/albert_model.ckpt &\n        \n        google版本的small模型\n        export BERT_BASE_DIR=./albert_small_zh\n        export TEXT_DIR=./lcqmc\n        nohup python3 run_classifier_sp_google.py --task_name=lcqmc_pair   --do_train=true   --do_eval=true   --data_dir=$TEXT_DIR   --vocab_file=./albert_config/vocab.txt  \\\n        --albert_config_file=./$BERT_BASE_DIR/albert_config_small_google.json --max_seq_length=128 --train_batch_size=64   --learning_rate=1e-4   --num_train_epochs=5 \\\n        --output_dir=./albert_lcqmc_checkpoints --init_checkpoint=$BERT_BASE_DIR/albert_model.ckpt &\n\n    Notice/注：\n        1) you need to download pre-trained chinese albert model, and also download LCQMC dataset \n        你需要下载预训练的模型，并放入到项目当前项目，假设目录名称为albert_tiny_zh; 需要下载LCQMC数据集，并放入到当前项目，\n        假设数据集目录名称为lcqmc\n\n        2) for Fine-tuning, you can try to add small percentage of dropout(e.g. 0.1) by changing parameters of \n          attention_probs_dropout_prob & hidden_dropout_prob on albert_config_xxx.json. By default, we set dropout as zero. \n        \n        3) you can try different learning rate {2e-5, 6e-5, 1e-4} for better performance \n\n\nUpdates\n-----------------------------------------------\n**\\*\\*\\*\\*\\* 2019-11-03: add google version of albert_small, albert_tiny; \n\nadd method to deploy ablert_tiny to mobile devices with only 0.1 second inference time for sequence length 128, 60M memory \\*\\*\\*\\*\\***\n\n**\\*\\*\\*\\*\\* 2019-10-30: add a simple guide about converting the model to Tensorflow Lite for edge deployment \\*\\*\\*\\*\\***\n\n**\\*\\*\\*\\*\\* 2019-10-15: albert_tiny_zh, 10 times fast than bert base for training and inference, accuracy remains \\*\\*\\*\\*\\***\n\n**\\*\\*\\*\\*\\* 2019-10-07: more models of albert \\*\\*\\*\\*\\***\n\nadd albert_xlarge_zh; albert_base_zh_additional_steps, training with more instances\n\n**\\*\\*\\*\\*\\* 2019-10-04: PyTorch and Keras versions of albert were supported \\*\\*\\*\\*\\***\n\na.Convert to PyTorch version and do your tasks through <a href=\"https://github.com/lonePatient/albert_pytorch\">albert_pytorch</a>\n\nb.Load pre-trained model with keras using one line of codes through <a href=\"https://github.com/bojone/bert4keras\">bert4keras</a>\n\nc.Use albert with TensorFlow 2.0: Use or load pre-trained model with tf2.0 through <a href=\"https://github.com/kpe/bert-for-tf2\">bert-for-tf2</a>\n\nReleasing albert_xlarge on 6th Oct\n\n**\\*\\*\\*\\*\\* 2019-10-02: albert_large_zh,albert_base_zh \\*\\*\\*\\*\\***\n\nRelesed albert_base_zh with only 10% parameters of bert_base, a small model(40M) & training can be very fast. \n\nRelased albert_large_zh with only 16% parameters of bert_base(64M)\n\n**\\*\\*\\*\\*\\* 2019-09-28: codes and test functions \\*\\*\\*\\*\\*** \n\nAdd codes and test functions for three main changes of albert from bert\n\nALBERT模型介绍 Introduction of ALBERT\n-----------------------------------------------\nALBERT模型是BERT的改进版，与最近其他State of the art的模型不同的是，这次是预训练小模型，效果更好、参数更少。\n\n它对BERT进行了三个改造 Three main changes of ALBert from Bert：\n\n1）词嵌入向量参数的因式分解 Factorized embedding parameterization\n   \n     O(V * H) to O(V * E + E * H)\n     \n     如以ALBert_xxlarge为例，V=30000, H=4096, E=128\n       \n     那么原先参数为V * H= 30000 * 4096 = 1.23亿个参数，现在则为V * E + E * H = 30000*128+128*4096 = 384万 + 52万 = 436万，\n       \n     词嵌入相关的参数变化前是变换后的28倍。\n\n\n2）跨层参数共享 Cross-Layer Parameter Sharing\n\n     参数共享能显著减少参数。共享可以分为全连接层、注意力层的参数共享；注意力层的参数对效果的减弱影响小一点。\n\n3）段落连续性任务 Inter-sentence coherence loss.\n     \n     使用段落连续性任务。正例，使用从一个文档中连续的两个文本段落；负例，使用从一个文档中连续的两个文本段落，但位置调换了。\n     \n     避免使用原有的NSP任务，原有的任务包含隐含了预测主题这类过于简单的任务。\n\n      We maintain that inter-sentence modeling is an important aspect of language understanding, but we propose a loss \n      based primarily on coherence. That is, for ALBERT, we use a sentence-order prediction (SOP) loss, which avoids topic \n      prediction and instead focuses on modeling inter-sentence coherence. The SOP loss uses as positive examples the \n      same technique as BERT (two consecutive segments from the same document), and as negative examples the same two \n      consecutive segments but with their order swapped. This forces the model to learn finer-grained distinctions about\n      discourse-level coherence properties. \n\n其他变化，还有 Other changes：\n\n    1）去掉了dropout  Remove dropout to enlarge capacity of model.\n        最大的模型，训练了1百万步后，还是没有过拟合训练数据。说明模型的容量还可以更大，就移除了dropout\n        （dropout可以认为是随机的去掉网络中的一部分，同时使网络变小一些）\n        We also note that, even after training for 1M steps, our largest models still do not overfit to their training data. \n        As a result, we decide to remove dropout to further increase our model capacity.\n        其他型号的模型，在我们的实现中我们还是会保留原始的dropout的比例，防止模型对训练数据的过拟合。\n        \n    2）为加快训练速度，使用LAMB做为优化器 Use LAMB as optimizer, to train with big batch size\n      使用了大的batch_size来训练(4096)。 LAMB优化器使得我们可以训练，特别大的批次batch_size，如高达6万。\n    \n    3）使用n-gram(uni-gram,bi-gram, tri-gram）来做遮蔽语言模型 Use n-gram as make language model\n       即以不同的概率使用n-gram,uni-gram的概率最大，bi-gram其次，tri-gram概率最小。\n       本项目中目前使用的是在中文上做whole word mask，稍后会更新一下与n-gram mask的效果对比。n-gram从spanBERT中来。\n\n\n训练语料/训练配置 Training Data & Configuration\n-----------------------------------------------\n30g中文语料，超过100亿汉字，包括多个百科、新闻、互动社区。\n\n预训练序列长度sequence_length设置为512，批次batch_size为4096，训练产生了3.5亿个训练数据(instance)；每一个模型默认会训练125k步，albert_xxlarge将训练更久。\n\n作为比较，roberta_zh预训练产生了2.5亿个训练数据、序列长度为256。由于albert_zh预训练生成的训练数据更多、使用的序列长度更长，\n \n    我们预计albert_zh会有比roberta_zh更好的性能表现，并且能更好处理较长的文本。\n\n训练使用TPU v3 Pod，我们使用的是v3-256，它包含32个v3-8。每个v3-8机器，含有128G的显存。\n\n\n模型性能与对比(英文) Performance and Comparision\n-----------------------------------------------    \n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/state_of_the_art.jpg\"  width=\"80%\" height=\"40%\" />\n  \n   \n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/albert_performance.jpg\"  width=\"80%\" height=\"40%\" />\n\n\n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/add_data_removing_dropout.jpg\"  width=\"80%\" height=\"40%\" />\n\n\n中文任务集上效果对比测试 Performance on Chinese datasets\n----------------------------------------------- \n\n###  问题匹配语任务：LCQMC(Sentence Pair Matching)\n\n| 模型 | 开发集(Dev) | 测试集(Test) |\n| :------- | :---------: | :---------: |\n| BERT | 89.4(88.4) | 86.9(86.4) | \n| ERNIE | 89.8 (89.6) | 87.2 (87.0) | \n| BERT-wwm |89.4 (89.2) | 87.0 (86.8) | \n| BERT-wwm-ext | - |-  |\n| RoBERTa-zh-base | 88.7 | 87.0  |\n| RoBERTa-zh-Large | ***89.9(89.6)*** | 87.2(86.7) |\n| RoBERTa-zh-Large(20w_steps) | 89.7| 87.0 |\n| ALBERT-zh-tiny | -- | 85.4 |\n| ALBERT-zh-small | -- | 86.0 |\n| ALBERT-zh-small(Pytorch) | -- | 86.8 |\n| ALBERT-zh-base-additional-36k-steps | 87.8 | 86.3 |\n| ALBERT-zh-base | 87.2 | 86.3 |\n| ALBERT-large | 88.7 | 87.1 |\n| ALBERT-xlarge | 87.3 | ***87.7*** |\n\n注：只跑了一次ALBERT-xlarge，效果还可能提升\n\n### 自然语言推断：XNLI of Chinese Version\n\n| 模型 | 开发集 | 测试集 |\n| :------- | :---------: | :---------: |\n| BERT | 77.8 (77.4) | 77.8 (77.5) | \n| ERNIE | 79.7 (79.4) | 78.6 (78.2) | \n| BERT-wwm | 79.0 (78.4) | 78.2 (78.0) | \n| BERT-wwm-ext | 79.4 (78.6) | 78.7 (78.3) |\n| XLNet | 79.2  | 78.7 |\n| RoBERTa-zh-base | 79.8 |78.8  |\n| RoBERTa-zh-Large | 80.2 (80.0) | 79.9 (79.5) |\n| ALBERT-base | 77.0 | 77.1 |\n| ALBERT-large | 78.0 | 77.5 |\n| ALBERT-xlarge | ? | ? |\n\n注：BERT-wwm-ext来自于<a href=\"https://github.com/ymcui/Chinese-BERT-wwm\">这里</a>；XLNet来自于<a href=\"https://github.com/ymcui/Chinese-PreTrained-XLNet\">这里</a>; RoBERTa-zh-base，指12层RoBERTa中文模型\n   \n\n###  阅读理解任务：CRMC2018\n\n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/crmc2018_compare_s.jpg\"  width=\"90%\" height=\"70%\" />\n\n\n### 语言模型、文本段预测准确性、训练时间 Mask Language Model Accuarcy & Training Time\n\n| Model | MLM eval acc | SOP eval acc | Training(Hours) | Loss eval |\n| :------- | :---------: | :---------: | :---------: |:---------: |\n| albert_zh_base | 79.1% | 99.0% | 6h | 1.01|\n| albert_zh_large | 80.9% | 98.6% | 22.5h | 0.93|\n| albert_zh_xlarge | ? | ? | 53h(预估) | ? |\n| albert_zh_xxlarge | ? | ? | 106h(预估) | ? |\n\n注：? 将很快替换\n\n模型参数和配置 Configuration of Models\n-----------------------------------------------\n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/albert_configuration.jpg\"  width=\"80%\" height=\"40%\" />\n\n代码实现和测试 Implementation and Code Testing\n-----------------------------------------------\n通过运行以下命令测试主要的改进点，包括但不限于词嵌入向量参数的因式分解、跨层参数共享、段落连续性任务等。\n\n    python test_changes.py\n\n##### <a name=\"use_tflite\"></a>使用TensorFlow Lite(TFLite)在移动端进行部署:\n这里我们主要介绍TFLite模型格式转换和性能测试。转换成TFLite模型后，对于如何在移\n动端使用该模型，可以参考TFLite提供的[Android/iOS应用完整开发案例教程页面](https://www.tensorflow.org/lite/examples)。\n该页面目前已经包含了[文本分类](https://github.com/tensorflow/examples/blob/master/lite/examples/text_classification/android)，\n[文本问答](https://github.com/tensorflow/examples/blob/master/lite/examples/bert_qa/android)两个Android案例。\n\n下面以<a href=\"https://storage.googleapis.com/albert_zh/albert_tiny.zip\">albert_tiny_zh</a>\n为例来介绍TFLite模型格式转换和性能测试：\n\n1. Freeze graph from the checkpoint\n\nEnsure to have >=1.14 1.x installed to use the freeze_graph tool as it is removed from 2.x distribution\n\n    pip install tensorflow==1.15\n\n    freeze_graph --input_checkpoint=./albert_model.ckpt \\\n      --output_graph=/tmp/albert_tiny_zh.pb \\\n      --output_node_names=cls/predictions/truediv \\\n      --checkpoint_version=1 --input_meta_graph=./albert_model.ckpt.meta --input_binary=true\n\n2. Convert to TFLite format\n\nWe are going to use the new experimental tf->tflite converter that's distributed with the Tensorflow nightly build.\n\n    pip install tf-nightly\n\n    tflite_convert --graph_def_file=/tmp/albert_tiny_zh.pb \\\n      --input_arrays='input_ids,input_mask,segment_ids,masked_lm_positions,masked_lm_ids,masked_lm_weights' \\\n      --output_arrays='cls/predictions/truediv' \\\n      --input_shapes=1,128:1,128:128:1,128:1,128:1,128 \\\n      --output_file=/tmp/albert_tiny_zh.tflite \\\n      --enable_v1_converter --experimental_new_converter\n\n3. Benchmark the performance of the TFLite model\n\nSee [here](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/lite/tools/benchmark) \nfor details about the performance benchmark tools in TFLite. For example: after\nbuilding the benchmark tool binary for an Android phone, do the following to\nget an idea of how the TFLite model performs on the phone\n\n    adb push /tmp/albert_tiny_zh.tflite /data/local/tmp/\n    adb shell /data/local/tmp/benchmark_model_performance_options --graph=/data/local/tmp/albert_tiny_zh.tflite --perf_options_list=cpu\n\nOn an Android phone w/ Qualcomm's SD845 SoC, via the above benchmark tool, as\nof 2019/11/01, the inference latency is ~120ms w/ this converted TFLite model\nusing 4 threads on CPU, and the memory usage is ~60MB for the model during\ninference. Note the performance will improve further with future TFLite\nimplementation optimizations.\n\n##### 使用PyTorch版本:\n\n    download pre-trained model, and convert to PyTorch using:\n     \n      python convert_albert_tf_checkpoint_to_pytorch.py     \n     \n   using <a href=\"https://github.com/lonePatient/albert_pytorch\">albert_pytorch\n   \n##### 使用Keras加载:\n\n<a href=\"https://github.com/bojone/bert4keras\">bert4keras</a> 适配albert，能成功加载albert_zh的权重，只需要在load_pretrained_model函数里加上albert=True\n\nload pre-trained model with bert4keras\n\n##### 使用tf2.0加载:\n\n<a href=\"https://github.com/kpe/bert-for-tf2\">bert-for-tf2</a>\n\n\n使用案例-基于用户输入预测文本相似性 Use Case-Text Similarity Based on User Input\n-------------------------------------------------\n\n功能说明：用户可以通过本例了解如何加载训训练集实现基于用户输入的短文本相似度判断。可以基于该代码将程序灵活地拓展为后台服务或增加文本分类等示例。\n\n涉及代码：similarity.py、args.py\n\n步骤：\n\n1、使用本模型进行文本相似性训练，保存模型文件至相应目录下\n\n2、根据实际情况，修改args.py中的参数，参数说明如下：\n\n```python\n#模型目录，存放ckpt文件\nmodel_dir = os.path.join(file_path, 'albert_lcqmc_checkpoints/')\n\n#config文件，存放模型的json文件\nconfig_name = os.path.join(file_path, 'albert_config/albert_config_tiny.json')\n\n#ckpt文件名称\nckpt_name = os.path.join(model_dir, 'model.ckpt')\n\n#输出文件目录，训练时的模型输出目录\noutput_dir = os.path.join(file_path, 'albert_lcqmc_checkpoints/')\n\n#vocab文件目录\nvocab_file = os.path.join(file_path, 'albert_config/vocab.txt')\n\n#数据目录，训练使用的数据集存放目录\ndata_dir = os.path.join(file_path, 'data/')\n```\n\n本例中的文件结构为：\n\n    |__args.py\n    \n    |__similarity.py\n    \n    |__data\n    \n    |__albert_config\n    \n    |__albert_lcqmc_checkpoints\n    \n    |__lcqmc\n\n3、修改用户输入单词\n\n打开similarity.py，最底部如下代码：\n\n```python\nif __name__ == '__main__':\n    sim = BertSim()\n    sim.start_model()\n    sim.predict_sentences([(\"我喜欢妈妈做的汤\", \"妈妈做的汤我很喜欢喝\")])\n```\n\n其中sim.start_model()表示加载模型，sim.predict_sentences的输入为一个元组数组，元组中包含两个元素分别为需要判定相似的句子。\n\n4、运行python文件：similarity.py\n\n\n支持的序列长度与批次大小的关系,12G显存 Trade off between batch Size and sequence length\n-------------------------------------------------\n\nSystem       | Seq Length | Max Batch Size\n------------ | ---------- | --------------\n`albert-base`  | 64         | 64\n...          | 128        | 32\n...          | 256        | 16\n...          | 320        | 14\n...          | 384        | 12\n...          | 512        | 6\n`albert-large` | 64         | 12\n...          | 128        | 6\n...          | 256        | 2\n...          | 320        | 1\n...          | 384        | 0\n...          | 512        | 0\n`albert-xlarge` | -         | -\n\n学习曲线 Training Loss of xlarge of albert_zh\n-------------------------------------------------\n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/xlarge_loss.jpg\"  width=\"80%\" height=\"40%\" />\n\n所有的参数 Parameters of albert_xlarge\n-------------------------------------------------\n<img src=\"https://github.com/brightmart/albert_zh/blob/master/resources/albert_large_zh_parameters.jpg\"  width=\"80%\" height=\"40%\" />\n\n\n#### 技术交流与问题讨论QQ群: 836811304 Join us on QQ group\n\nIf you have any question, you can raise an issue, or send me an email: brightmart@hotmail.com;\n\nCurrently how to use PyTorch version of albert is not clear yet, if you know how to do that, just email us or open an issue.\n\nYou can also send pull request to report you performance on your task or add methods on how to load models for PyTorch and so on.\n\nIf you have ideas for generate best performance pre-training Chinese model, please also let me know.\n\n##### Research supported with Cloud TPUs from Google's TensorFlow Research Cloud (TFRC)\n\nCite Us\n-----------------------------------------------\nBright Liang Xu, albert_zh, (2019), GitHub repository, https://github.com/brightmart/albert_zh\n\nReference\n-----------------------------------------------\n1、<a href=\"https://arxiv.org/pdf/1909.11942.pdf\">ALBERT: A Lite BERT For Self-Supervised Learning Of Language Representations</a>\n\n2、<a href=\"https://arxiv.org/pdf/1810.04805.pdf\">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a>\n\n3、<a href=\"https://arxiv.org/abs/1907.10529\">SpanBERT: Improving Pre-training by Representing and Predicting Spans</a>\n\n4、<a href=\"https://arxiv.org/pdf/1907.11692.pdf\">RoBERTa: A Robustly Optimized BERT Pretraining Approach</a>\n\n5、<a href=\"https://arxiv.org/pdf/1904.00962.pdf\">Large Batch Optimization for Deep Learning: Training BERT in 76 minutes(LAMB)</a>\n\n6、<a href=\"https://github.com/ymcui/LAMB_Optimizer_TF\">LAMB Optimizer,TensorFlow version</a>\n\n7、<a href=\"http://baijiahao.baidu.com/s?id=1645712785366950083&wfr=spider&for=pc\">预训练小模型也能拿下13项NLP任务，ALBERT三大改造登顶GLUE基准</a>\n\n8、 <a href=\"https://github.com/lonePatient/albert_pytorch\">albert_pytorch</a>\n\n9、<a href=\"https://github.com/bojone/bert4keras\">load albert with keras</a>\n\n10、<a href=\"https://github.com/kpe/bert-for-tf2\">load albert with tf2.0</a>\n\n11、<a href=\"https://github.com/google-research/google-research/tree/master/albert\">repo of albert from google</a>\n\n12、<a href=\"https://github.com/chineseGLUE/chineseGLUE\">chineseGLUE-中文任务基准测评：公开可用多个任务、基线模型、广泛测评与效果对比</a>\n\n\n\n\n"
        },
        {
          "name": "albert_config",
          "type": "tree",
          "content": null
        },
        {
          "name": "args.py",
          "type": "blob",
          "size": 0.9072265625,
          "content": "import os\nimport tensorflow as tf\n\ntf.logging.set_verbosity(tf.logging.INFO)\n\nfile_path = os.path.dirname(__file__)\n\n\n#模型目录\nmodel_dir = os.path.join(file_path, 'albert_lcqmc_checkpoints/')\n\n#config文件\nconfig_name = os.path.join(file_path, 'albert_config/albert_config_tiny.json')\n#ckpt文件名称\nckpt_name = os.path.join(model_dir, 'model.ckpt')\n#输出文件目录\noutput_dir = os.path.join(file_path, 'albert_lcqmc_checkpoints/')\n#vocab文件目录\nvocab_file = os.path.join(file_path, 'albert_config/vocab.txt')\n#数据目录\ndata_dir = os.path.join(file_path, 'data/')\n\nnum_train_epochs = 10\nbatch_size = 128\nlearning_rate = 0.00005\n\n# gpu使用率\ngpu_memory_fraction = 0.8\n\n# 默认取倒数第二层的输出值作为句向量\nlayer_indexes = [-2]\n\n# 序列的最大程度，单文本建议把该值调小\nmax_seq_len = 128\n\n# graph名字\ngraph_file = os.path.join(file_path, 'albert_lcqmc_checkpoints/graph')"
        },
        {
          "name": "bert_utils.py",
          "type": "blob",
          "size": 4.455078125,
          "content": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport six\nimport tensorflow as tf\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n\t\"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n\n\tArgs:\n\t\ttensor: A tf.Tensor object to find the shape of.\n\t\texpected_rank: (optional) int. The expected rank of `tensor`. If this is\n\t\t\tspecified and the `tensor` has a different rank, and exception will be\n\t\t\tthrown.\n\t\tname: Optional name of the tensor for the error message.\n\n\tReturns:\n\t\tA list of dimensions of the shape of tensor. All static dimensions will\n\t\tbe returned as python integers, and dynamic dimensions will be returned\n\t\tas tf.Tensor scalars.\n\t\"\"\"\n\tif name is None:\n\t\tname = tensor.name\n\n\tif expected_rank is not None:\n\t\tassert_rank(tensor, expected_rank, name)\n\n\tshape = tensor.shape.as_list()\n\n\tnon_static_indexes = []\n\tfor (index, dim) in enumerate(shape):\n\t\tif dim is None:\n\t\t\tnon_static_indexes.append(index)\n\n\tif not non_static_indexes:\n\t\treturn shape\n\n\tdyn_shape = tf.shape(tensor)\n\tfor index in non_static_indexes:\n\t\tshape[index] = dyn_shape[index]\n\treturn shape\n\ndef reshape_to_matrix(input_tensor):\n\t\"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n\tndims = input_tensor.shape.ndims\n\tif ndims < 2:\n\t\traise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n\t\t\t\t\t\t\t\t\t\t (input_tensor.shape))\n\tif ndims == 2:\n\t\treturn input_tensor\n\n\twidth = input_tensor.shape[-1]\n\toutput_tensor = tf.reshape(input_tensor, [-1, width])\n\treturn output_tensor\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n\t\"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n\tif len(orig_shape_list) == 2:\n\t\treturn output_tensor\n\n\toutput_shape = get_shape_list(output_tensor)\n\n\torig_dims = orig_shape_list[0:-1]\n\twidth = output_shape[-1]\n\n\treturn tf.reshape(output_tensor, orig_dims + [width])\n\ndef assert_rank(tensor, expected_rank, name=None):\n\t\"\"\"Raises an exception if the tensor rank is not of the expected rank.\n\n\tArgs:\n\t\ttensor: A tf.Tensor to check the rank of.\n\t\texpected_rank: Python integer or list of integers, expected rank.\n\t\tname: Optional name of the tensor for the error message.\n\n\tRaises:\n\t\tValueError: If the expected shape doesn't match the actual shape.\n\t\"\"\"\n\tif name is None:\n\t\tname = tensor.name\n\n\texpected_rank_dict = {}\n\tif isinstance(expected_rank, six.integer_types):\n\t\texpected_rank_dict[expected_rank] = True\n\telse:\n\t\tfor x in expected_rank:\n\t\t\texpected_rank_dict[x] = True\n\n\tactual_rank = tensor.shape.ndims\n\tif actual_rank not in expected_rank_dict:\n\t\tscope_name = tf.get_variable_scope().name\n\t\traise ValueError(\n\t\t\t\t\"For the tensor `%s` in scope `%s`, the actual rank \"\n\t\t\t\t\"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n\t\t\t\t(name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n\ndef gather_indexes(sequence_tensor, positions):\n\t\"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n\tsequence_shape = get_shape_list(sequence_tensor, expected_rank=3)\n\tbatch_size = sequence_shape[0]\n\tseq_length = sequence_shape[1]\n\twidth = sequence_shape[2]\n\n\tflat_offsets = tf.reshape(\n\t\t\ttf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n\tflat_positions = tf.reshape(positions + flat_offsets, [-1])\n\tflat_sequence_tensor = tf.reshape(sequence_tensor,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[batch_size * seq_length, width])\n\toutput_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n\treturn output_tensor\n\n# add sequence mask for:\n# 1. random shuffle lm modeling---xlnet with random shuffled input\n# 2. left2right and right2left language modeling\n# 3. conditional generation\ndef generate_seq2seq_mask(attention_mask, mask_sequence, seq_type, **kargs):\n\tif seq_type == 'seq2seq':\n\t\tif mask_sequence is not None:\n\t\t\tseq_shape = get_shape_list(mask_sequence, expected_rank=2)\n\t\t\tseq_len = seq_shape[1]\n\t\t\tones = tf.ones((1, seq_len, seq_len))\n\t\t\ta_mask = tf.matrix_band_part(ones, -1, 0)\n\t\t\ts_ex12 = tf.expand_dims(tf.expand_dims(mask_sequence, 1), 2)\n\t\t\ts_ex13 = tf.expand_dims(tf.expand_dims(mask_sequence, 1), 3)\n\t\t\ta_mask = (1 - s_ex13) * (1 - s_ex12) + s_ex13 * a_mask\n\t\t\t# generate mask of batch x seq_len x seq_len\n\t\t\ta_mask = tf.reshape(a_mask, (-1, seq_len, seq_len))\n\t\t\tout_mask = attention_mask * a_mask\n\t\telse:\n\t\t\tones = tf.ones_like(attention_mask[:1])\n\t\t\tmask = (tf.matrix_band_part(ones, -1, 0))\n\t\t\tout_mask = attention_mask * mask\n\telse:\n\t\tout_mask = attention_mask\n\n\treturn out_mask\n\n"
        },
        {
          "name": "classifier_utils.py",
          "type": "blob",
          "size": 30.3779296875,
          "content": "# -*- coding: utf-8 -*-\n# @Author: bo.shi\n# @Date:   2019-12-01 22:28:41\n# @Last Modified by:   bo.shi\n# @Last Modified time: 2019-12-02 18:36:50\n# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Utility functions for GLUE classification tasks.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\n\nfrom __future__ import print_function\n\nimport json\nimport csv\nimport os\nimport six\n\nimport tensorflow as tf\n\n\ndef convert_to_unicode(text):\n  \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return text.decode(\"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text.decode(\"utf-8\", \"ignore\")\n    elif isinstance(text, unicode):\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\nclass InputExample(object):\n  \"\"\"A single training/test example for simple sequence classification.\"\"\"\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    \"\"\"Constructs a InputExample.\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  \"\"\"Fake example so the num input examples is a multiple of the batch size.\n  When running eval/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won't be generated.\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  \"\"\"\n\n\nclass DataProcessor(object):\n  \"\"\"Base class for data converters for sequence classification data sets.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    raise NotImplementedError()\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    raise NotImplementedError()\n\n  @classmethod\n  def _read_tsv(cls, input_file, delimiter=\"\\t\", quotechar=None):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = csv.reader(f, delimiter=delimiter, quotechar=quotechar)\n      lines = []\n      for line in reader:\n        lines.append(line)\n      return lines\n\n  @classmethod\n  def _read_txt(cls, input_file):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = f.readlines()\n      lines = []\n      for line in reader:\n        lines.append(line.strip().split(\"_!_\"))\n      return lines\n\n  @classmethod\n  def _read_json(cls, input_file):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = f.readlines()\n      lines = []\n      for line in reader:\n        lines.append(json.loads(line.strip()))\n      return lines\n\n\nclass XnliProcessor(DataProcessor):\n  \"\"\"Processor for the XNLI data set.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"See base class.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = convert_to_unicode(line['premise'])\n      text_b = convert_to_unicode(line['hypo'])\n      label = convert_to_unicode(line['label']) if set_type != 'test' else 'contradiction'\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n\n# class TnewsProcessor(DataProcessor):\n#     \"\"\"Processor for the MRPC data set (GLUE version).\"\"\"\n#\n#     def get_train_examples(self, data_dir):\n#         \"\"\"See base class.\"\"\"\n#         return self._create_examples(\n#             self._read_txt(os.path.join(data_dir, \"toutiao_category_train.txt\")), \"train\")\n#\n#     def get_dev_examples(self, data_dir):\n#         \"\"\"See base class.\"\"\"\n#         return self._create_examples(\n#             self._read_txt(os.path.join(data_dir, \"toutiao_category_dev.txt\")), \"dev\")\n#\n#     def get_test_examples(self, data_dir):\n#         \"\"\"See base class.\"\"\"\n#         return self._create_examples(\n#             self._read_txt(os.path.join(data_dir, \"toutiao_category_test.txt\")), \"test\")\n#\n#     def get_labels(self):\n#         \"\"\"See base class.\"\"\"\n#         labels = []\n#         for i in range(17):\n#             if i == 5 or i == 11:\n#                 continue\n#             labels.append(str(100 + i))\n#         return labels\n#\n#     def _create_examples(self, lines, set_type):\n#         \"\"\"Creates examples for the training and dev sets.\"\"\"\n#         examples = []\n#         for (i, line) in enumerate(lines):\n#             if i == 0:\n#                 continue\n#             guid = \"%s-%s\" % (set_type, i)\n#             text_a = convert_to_unicode(line[3])\n#             text_b = None\n#             label = convert_to_unicode(line[1])\n#             examples.append(\n#                 InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#         return examples\n\n\nclass TnewsProcessor(DataProcessor):\n  \"\"\"Processor for the MRPC data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    labels = []\n    for i in range(17):\n      if i == 5 or i == 11:\n        continue\n      labels.append(str(100 + i))\n    return labels\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = convert_to_unicode(line['sentence'])\n      text_b = None\n      label = convert_to_unicode(line['label']) if set_type != 'test' else \"100\"\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\n# class iFLYTEKDataProcessor(DataProcessor):\n#     \"\"\"Processor for the iFLYTEKData data set (GLUE version).\"\"\"\n#\n#     def get_train_examples(self, data_dir):\n#         \"\"\"See base class.\"\"\"\n#         return self._create_examples(\n#             self._read_txt(os.path.join(data_dir, \"train.txt\")), \"train\")\n#\n#     def get_dev_examples(self, data_dir):\n#         \"\"\"See base class.\"\"\"\n#         return self._create_examples(\n#             self._read_txt(os.path.join(data_dir, \"dev.txt\")), \"dev\")\n#\n#     def get_test_examples(self, data_dir):\n#         \"\"\"See base class.\"\"\"\n#         return self._create_examples(\n#             self._read_txt(os.path.join(data_dir, \"test.txt\")), \"test\")\n#\n#     def get_labels(self):\n#         \"\"\"See base class.\"\"\"\n#         labels = []\n#         for i in range(119):\n#             labels.append(str(i))\n#         return labels\n#\n#     def _create_examples(self, lines, set_type):\n#         \"\"\"Creates examples for the training and dev sets.\"\"\"\n#         examples = []\n#         for (i, line) in enumerate(lines):\n#             if i == 0:\n#                 continue\n#             guid = \"%s-%s\" % (set_type, i)\n#             text_a = convert_to_unicode(line[1])\n#             text_b = None\n#             label = convert_to_unicode(line[0])\n#             examples.append(\n#                 InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#         return examples\n\n\nclass iFLYTEKDataProcessor(DataProcessor):\n  \"\"\"Processor for the iFLYTEKData data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    labels = []\n    for i in range(119):\n      labels.append(str(i))\n    return labels\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = convert_to_unicode(line['sentence'])\n      text_b = None\n      label = convert_to_unicode(line['label']) if set_type != 'test' else \"0\"\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass AFQMCProcessor(DataProcessor):\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = convert_to_unicode(line['sentence1'])\n      text_b = convert_to_unicode(line['sentence2'])\n      label = convert_to_unicode(line['label']) if set_type != 'test' else '0'\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass CMNLIProcessor(DataProcessor):\n  \"\"\"Processor for the CMNLI data set.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples_json(os.path.join(data_dir, \"train.json\"), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples_json(os.path.join(data_dir, \"dev.json\"), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples_json(os.path.join(data_dir, \"test.json\"), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n  def _create_examples_json(self, file_name, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    lines = tf.gfile.Open(file_name, \"r\")\n    index = 0\n    for line in lines:\n      line_obj = json.loads(line)\n      index = index + 1\n      guid = \"%s-%s\" % (set_type, index)\n      text_a = convert_to_unicode(line_obj[\"sentence1\"])\n      text_b = convert_to_unicode(line_obj[\"sentence2\"])\n      label = convert_to_unicode(line_obj[\"label\"]) if set_type != 'test' else 'neutral'\n\n      if label != \"-\":\n        examples.append(InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n\n    return examples\n\n\nclass CslProcessor(DataProcessor):\n  \"\"\"Processor for the CSL data set.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = convert_to_unicode(\" \".join(line['keyword']))\n      text_b = convert_to_unicode(line['abst'])\n      label = convert_to_unicode(line['label']) if set_type != 'test' else '0'\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\n# class InewsProcessor(DataProcessor):\n#   \"\"\"Processor for the MRPC data set (GLUE version).\"\"\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_txt(os.path.join(data_dir, \"train.txt\")), \"train\")\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_txt(os.path.join(data_dir, \"dev.txt\")), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_txt(os.path.join(data_dir, \"test.txt\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     labels = [\"0\", \"1\", \"2\"]\n#     return labels\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     for (i, line) in enumerate(lines):\n#       if i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       text_a = convert_to_unicode(line[2])\n#       text_b = convert_to_unicode(line[3])\n#       label = convert_to_unicode(line[0]) if set_type != \"test\" else '0'\n#       examples.append(\n#           InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#     return examples\n#\n#\n# class THUCNewsProcessor(DataProcessor):\n#   \"\"\"Processor for the THUCNews data set (GLUE version).\"\"\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_txt(os.path.join(data_dir, \"train.txt\")), \"train\")\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_txt(os.path.join(data_dir, \"dev.txt\")), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_txt(os.path.join(data_dir, \"test.txt\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     labels = []\n#     for i in range(14):\n#       labels.append(str(i))\n#     return labels\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     for (i, line) in enumerate(lines):\n#       if i == 0 or len(line) < 3:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       text_a = convert_to_unicode(line[3])\n#       text_b = None\n#       label = convert_to_unicode(line[0])\n#       examples.append(\n#           InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#     return examples\n#\n# class LCQMCProcessor(DataProcessor):\n#   \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n#\n#   def __init__(self):\n#     self.language = \"zh\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"train.txt\")), \"train\")\n#     # dev_0827.tsv\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"dev.txt\")), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"test.txt\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     return [\"0\", \"1\"]\n#     # return [\"-1\",\"0\", \"1\"]\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     print(\"length of lines:\", len(lines))\n#     for (i, line) in enumerate(lines):\n#       # print('#i:',i,line)\n#       if i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       try:\n#         label = convert_to_unicode(line[2])\n#         text_a = convert_to_unicode(line[0])\n#         text_b = convert_to_unicode(line[1])\n#         examples.append(\n#             InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#       except Exception:\n#         print('###error.i:', i, line)\n#     return examples\n#\n#\n# class JDCOMMENTProcessor(DataProcessor):\n#   \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n#\n#   def __init__(self):\n#     self.language = \"zh\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"jd_train.csv\"), \",\", \"\\\"\"), \"train\")\n#     # dev_0827.tsv\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"jd_dev.csv\"), \",\", \"\\\"\"), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"jd_test.csv\"), \",\", \"\\\"\"), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     return [\"1\", \"2\", \"3\", \"4\", \"5\"]\n#     # return [\"-1\",\"0\", \"1\"]\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     print(\"length of lines:\", len(lines))\n#     for (i, line) in enumerate(lines):\n#       # print('#i:',i,line)\n#       if i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       try:\n#         label = convert_to_unicode(line[0])\n#         text_a = convert_to_unicode(line[1])\n#         text_b = convert_to_unicode(line[2])\n#         examples.append(\n#             InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#       except Exception:\n#         print('###error.i:', i, line)\n#     return examples\n#\n#\n# class BQProcessor(DataProcessor):\n#   \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n#\n#   def __init__(self):\n#     self.language = \"zh\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"train.txt\")), \"train\")\n#     # dev_0827.tsv\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"dev.txt\")), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"test.txt\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     return [\"0\", \"1\"]\n#     # return [\"-1\",\"0\", \"1\"]\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     print(\"length of lines:\", len(lines))\n#     for (i, line) in enumerate(lines):\n#       # print('#i:',i,line)\n#       if i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       try:\n#         label = convert_to_unicode(line[2])\n#         text_a = convert_to_unicode(line[0])\n#         text_b = convert_to_unicode(line[1])\n#         examples.append(\n#             InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#       except Exception:\n#         print('###error.i:', i, line)\n#     return examples\n#\n#\n# class MnliProcessor(DataProcessor):\n#   \"\"\"Processor for the MultiNLI data set (GLUE version).\"\"\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"train.tsv\")), \"train\")\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"dev_matched.tsv\")),\n#         \"dev_matched\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"test_matched.tsv\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     return [\"contradiction\", \"entailment\", \"neutral\"]\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     for (i, line) in enumerate(lines):\n#       if i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, convert_to_unicode(line[0]))\n#       text_a = convert_to_unicode(line[8])\n#       text_b = convert_to_unicode(line[9])\n#       if set_type == \"test\":\n#         label = \"contradiction\"\n#       else:\n#         label = convert_to_unicode(line[-1])\n#       examples.append(\n#           InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#     return examples\n#\n#\n# class MrpcProcessor(DataProcessor):\n#   \"\"\"Processor for the MRPC data set (GLUE version).\"\"\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"train.tsv\")), \"train\")\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"dev.tsv\")), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"test.tsv\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     return [\"0\", \"1\"]\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     for (i, line) in enumerate(lines):\n#       if i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       text_a = convert_to_unicode(line[3])\n#       text_b = convert_to_unicode(line[4])\n#       if set_type == \"test\":\n#         label = \"0\"\n#       else:\n#         label = convert_to_unicode(line[0])\n#       examples.append(\n#           InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n#     return examples\n#\n#\n# class ColaProcessor(DataProcessor):\n#   \"\"\"Processor for the CoLA data set (GLUE version).\"\"\"\n#\n#   def get_train_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"train.tsv\")), \"train\")\n#\n#   def get_dev_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"dev.tsv\")), \"dev\")\n#\n#   def get_test_examples(self, data_dir):\n#     \"\"\"See base class.\"\"\"\n#     return self._create_examples(\n#         self._read_tsv(os.path.join(data_dir, \"test.tsv\")), \"test\")\n#\n#   def get_labels(self):\n#     \"\"\"See base class.\"\"\"\n#     return [\"0\", \"1\"]\n#\n#   def _create_examples(self, lines, set_type):\n#     \"\"\"Creates examples for the training and dev sets.\"\"\"\n#     examples = []\n#     for (i, line) in enumerate(lines):\n#       # Only the test set has a header\n#       if set_type == \"test\" and i == 0:\n#         continue\n#       guid = \"%s-%s\" % (set_type, i)\n#       if set_type == \"test\":\n#         text_a = convert_to_unicode(line[1])\n#         label = \"0\"\n#       else:\n#         text_a = convert_to_unicode(line[3])\n#         label = convert_to_unicode(line[1])\n#       examples.append(\n#           InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n#     return examples\n\nclass WSCProcessor(DataProcessor):\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"true\", \"false\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = convert_to_unicode(line['text'])\n      text_a_list = list(text_a)\n      target = line['target']\n      query = target['span1_text']\n      query_idx = target['span1_index']\n      pronoun = target['span2_text']\n      pronoun_idx = target['span2_index']\n\n      assert text_a[pronoun_idx: (pronoun_idx + len(pronoun))\n                    ] == pronoun, \"pronoun: {}\".format(pronoun)\n      assert text_a[query_idx: (query_idx + len(query))] == query, \"query: {}\".format(query)\n\n      if pronoun_idx > query_idx:\n        text_a_list.insert(query_idx, \"_\")\n        text_a_list.insert(query_idx + len(query) + 1, \"_\")\n        text_a_list.insert(pronoun_idx + 2, \"[\")\n        text_a_list.insert(pronoun_idx + len(pronoun) + 2 + 1, \"]\")\n      else:\n        text_a_list.insert(pronoun_idx, \"[\")\n        text_a_list.insert(pronoun_idx + len(pronoun) + 1, \"]\")\n        text_a_list.insert(query_idx + 2, \"_\")\n        text_a_list.insert(query_idx + len(query) + 2 + 1, \"_\")\n\n      text_a = \"\".join(text_a_list)\n\n      if set_type == \"test\":\n        label = \"true\"\n      else:\n        label = line['label']\n\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    return examples\n\n\nclass COPAProcessor(DataProcessor):\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n\n  def __init__(self):\n    self.language = \"zh\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"train.json\")), \"train\")\n    # dev_0827.tsv\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"dev.json\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_json(os.path.join(data_dir, \"test.json\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  @classmethod\n  def _create_examples_one(self, lines, set_type):\n    examples = []\n    for (i, line) in enumerate(lines):\n      guid1 = \"%s-%s\" % (set_type, i)\n#         try:\n      if line['question'] == 'cause':\n        text_a = convert_to_unicode(line['premise'] + '原因是什么呢？' + line['choice0'])\n        text_b = convert_to_unicode(line['premise'] + '原因是什么呢？' + line['choice1'])\n      else:\n        text_a = convert_to_unicode(line['premise'] + '造成了什么影响呢？' + line['choice0'])\n        text_b = convert_to_unicode(line['premise'] + '造成了什么影响呢？' + line['choice1'])\n      label = convert_to_unicode(str(1 if line['label'] == 0 else 0)) if set_type != 'test' else '0'\n      examples.append(\n          InputExample(guid=guid1, text_a=text_a, text_b=text_b, label=label))\n#         except Exception as e:\n#             print('###error.i:',e, i, line)\n    return examples\n\n  @classmethod\n  def _create_examples(self, lines, set_type):\n    examples = []\n    for (i, line) in enumerate(lines):\n      i = 2 * i\n      guid1 = \"%s-%s\" % (set_type, i)\n      guid2 = \"%s-%s\" % (set_type, i + 1)\n#         try:\n      premise = convert_to_unicode(line['premise'])\n      choice0 = convert_to_unicode(line['choice0'])\n      label = convert_to_unicode(str(1 if line['label'] == 0 else 0)) if set_type != 'test' else '0'\n      #text_a2 = convert_to_unicode(line['premise'])\n      choice1 = convert_to_unicode(line['choice1'])\n      label2 = convert_to_unicode(\n          str(0 if line['label'] == 0 else 1)) if set_type != 'test' else '0'\n      if line['question'] == 'effect':\n        text_a = premise\n        text_b = choice0\n        text_a2 = premise\n        text_b2 = choice1\n      elif line['question'] == 'cause':\n        text_a = choice0\n        text_b = premise\n        text_a2 = choice1\n        text_b2 = premise\n      else:\n        print('wrong format!!')\n        return None\n      examples.append(\n          InputExample(guid=guid1, text_a=text_a, text_b=text_b, label=label))\n      examples.append(\n          InputExample(guid=guid2, text_a=text_a2, text_b=text_b2, label=label2))\n#         except Exception as e:\n#             print('###error.i:',e, i, line)\n    return examples"
        },
        {
          "name": "create_pretrain_data.sh",
          "type": "blob",
          "size": 0.3310546875,
          "content": "#!/usr/bin/env bash\n\nBERT_BASE_DIR=./albert_config\npython3 create_pretraining_data.py --do_whole_word_mask=True --input_file=data/news_zh_1.txt \\\n--output_file=data/tf_news_2016_zh_raw_news2016zh_1.tfrecord --vocab_file=$BERT_BASE_DIR/vocab.txt --do_lower_case=True \\\n--max_seq_length=512 --max_predictions_per_seq=51 --masked_lm_prob=0.10"
        },
        {
          "name": "create_pretraining_data.py",
          "type": "blob",
          "size": 43.0791015625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Create masked LM/next sentence masked_lm TF examples for BERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport random\nimport tokenization\nimport tensorflow as tf\nimport jieba\nimport re\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\nflags.DEFINE_string(\"input_file\", None,\n                    \"Input raw text file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\n    \"output_file\", None,\n    \"Output TF example file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the BERT model was trained on.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_bool(\n    \"do_whole_word_mask\", False,\n    \"Whether to use whole word masking rather than per-WordPiece masking.\")\n\nflags.DEFINE_integer(\"max_seq_length\", 128, \"Maximum sequence length.\")\n\nflags.DEFINE_integer(\"max_predictions_per_seq\", 20,\n                     \"Maximum number of masked LM predictions per sequence.\")\n\nflags.DEFINE_integer(\"random_seed\", 12345, \"Random seed for data generation.\")\n\nflags.DEFINE_integer(\n    \"dupe_factor\", 10,\n    \"Number of times to duplicate the input data (with different masks).\")\n\nflags.DEFINE_float(\"masked_lm_prob\", 0.15, \"Masked LM probability.\")\n\nflags.DEFINE_float(\n    \"short_seq_prob\", 0.1,\n    \"Probability of creating sequences which are shorter than the \"\n    \"maximum length.\")\n\nflags.DEFINE_bool(\"non_chinese\", False,\"manually set this to True if you are not doing chinese pre-train task.\")\n\n\nclass TrainingInstance(object):\n  \"\"\"A single training instance (sentence pair).\"\"\"\n\n  def __init__(self, tokens, segment_ids, masked_lm_positions, masked_lm_labels,\n               is_random_next):\n    self.tokens = tokens\n    self.segment_ids = segment_ids\n    self.is_random_next = is_random_next\n    self.masked_lm_positions = masked_lm_positions\n    self.masked_lm_labels = masked_lm_labels\n\n  def __str__(self):\n    s = \"\"\n    s += \"tokens: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.tokens]))\n    s += \"segment_ids: %s\\n\" % (\" \".join([str(x) for x in self.segment_ids]))\n    s += \"is_random_next: %s\\n\" % self.is_random_next\n    s += \"masked_lm_positions: %s\\n\" % (\" \".join(\n        [str(x) for x in self.masked_lm_positions]))\n    s += \"masked_lm_labels: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.masked_lm_labels]))\n    s += \"\\n\"\n    return s\n\n  def __repr__(self):\n    return self.__str__()\n\n\ndef write_instance_to_example_files(instances, tokenizer, max_seq_length,\n                                    max_predictions_per_seq, output_files):\n  \"\"\"Create TF example files from `TrainingInstance`s.\"\"\"\n  writers = []\n  for output_file in output_files:\n    writers.append(tf.python_io.TFRecordWriter(output_file))\n\n  writer_index = 0\n\n  total_written = 0\n  for (inst_index, instance) in enumerate(instances):\n    input_ids = tokenizer.convert_tokens_to_ids(instance.tokens)\n    input_mask = [1] * len(input_ids)\n    segment_ids = list(instance.segment_ids)\n    assert len(input_ids) <= max_seq_length\n\n    while len(input_ids) < max_seq_length:\n      input_ids.append(0)\n      input_mask.append(0)\n      segment_ids.append(0)\n\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n\n    masked_lm_positions = list(instance.masked_lm_positions)\n    masked_lm_ids = tokenizer.convert_tokens_to_ids(instance.masked_lm_labels)\n    masked_lm_weights = [1.0] * len(masked_lm_ids)\n\n    while len(masked_lm_positions) < max_predictions_per_seq:\n      masked_lm_positions.append(0)\n      masked_lm_ids.append(0)\n      masked_lm_weights.append(0.0)\n\n    next_sentence_label = 1 if instance.is_random_next else 0\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(input_ids)\n    features[\"input_mask\"] = create_int_feature(input_mask)\n    features[\"segment_ids\"] = create_int_feature(segment_ids)\n    features[\"masked_lm_positions\"] = create_int_feature(masked_lm_positions)\n    features[\"masked_lm_ids\"] = create_int_feature(masked_lm_ids)\n    features[\"masked_lm_weights\"] = create_float_feature(masked_lm_weights)\n    features[\"next_sentence_labels\"] = create_int_feature([next_sentence_label])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n\n    writers[writer_index].write(tf_example.SerializeToString())\n    writer_index = (writer_index + 1) % len(writers)\n\n    total_written += 1\n\n    if inst_index < 20:\n      tf.logging.info(\"*** Example ***\")\n      tf.logging.info(\"tokens: %s\" % \" \".join(\n          [tokenization.printable_text(x) for x in instance.tokens]))\n\n      for feature_name in features.keys():\n        feature = features[feature_name]\n        values = []\n        if feature.int64_list.value:\n          values = feature.int64_list.value\n        elif feature.float_list.value:\n          values = feature.float_list.value\n        tf.logging.info(\n            \"%s: %s\" % (feature_name, \" \".join([str(x) for x in values])))\n\n  for writer in writers:\n    writer.close()\n\n  tf.logging.info(\"Wrote %d total instances\", total_written)\n\n\ndef create_int_feature(values):\n  feature = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n  return feature\n\n\ndef create_float_feature(values):\n  feature = tf.train.Feature(float_list=tf.train.FloatList(value=list(values)))\n  return feature\n\n\ndef create_training_instances(input_files, tokenizer, max_seq_length,\n                              dupe_factor, short_seq_prob, masked_lm_prob,\n                              max_predictions_per_seq, rng):\n  \"\"\"Create `TrainingInstance`s from raw text.\"\"\"\n  all_documents = [[]]\n\n  # Input file format:\n  # (1) One sentence per line. These should ideally be actual sentences, not\n  # entire paragraphs or arbitrary spans of text. (Because we use the\n  # sentence boundaries for the \"next sentence prediction\" task).\n  # (2) Blank lines between documents. Document boundaries are needed so\n  # that the \"next sentence prediction\" task doesn't span between documents.\n  for input_file in input_files:\n    with tf.gfile.GFile(input_file, \"r\") as reader:\n      while True:\n        strings=reader.readline()\n        strings=strings.replace(\"   \",\" \").replace(\"  \",\" \") # 如果有两个或三个空格，替换为一个空格\n        line = tokenization.convert_to_unicode(strings)\n        if not line:\n          break\n        line = line.strip()\n\n        # Empty lines are used as document delimiters\n        if not line:\n          all_documents.append([])\n        tokens = tokenizer.tokenize(line)\n        if tokens:\n          all_documents[-1].append(tokens)\n\n  # Remove empty documents\n  all_documents = [x for x in all_documents if x]\n  rng.shuffle(all_documents)\n\n  vocab_words = list(tokenizer.vocab.keys())\n  instances = []\n  for _ in range(dupe_factor):\n    for document_index in range(len(all_documents)):\n      instances.extend(\n        create_instances_from_document_albert( # change to albert style for sentence order prediction(SOP), 2019-08-28, brightmart\n              all_documents, document_index, max_seq_length, short_seq_prob,\n              masked_lm_prob, max_predictions_per_seq, vocab_words, rng))\n\n  rng.shuffle(instances)\n  return instances\n\ndef get_new_segment(segment):  # 新增的方法 ####\n    \"\"\"\n    输入一句话，返回一句经过处理的话: 为了支持中文全称mask，将被分开的词，将上特殊标记(\"#\")，使得后续处理模块，能够知道哪些字是属于同一个词的。\n    :param segment: 一句话. e.g.  ['悬', '灸', '技', '术', '培', '训', '专', '家', '教', '你', '艾', '灸', '降', '血', '糖', '，', '为', '爸', '妈', '收', '好', '了', '！']\n    :return: 一句处理过的话 e.g.    ['悬', '##灸', '技', '术', '培', '训', '专', '##家', '教', '你', '艾', '##灸', '降', '##血', '##糖', '，', '为', '爸', '##妈', '收', '##好', '了', '！']\n    \"\"\"\n    seq_cws = jieba.lcut(\"\".join(segment)) # 分词\n    seq_cws_dict = {x: 1 for x in seq_cws} # 分词后的词加入到词典dict\n    new_segment = []\n    i = 0\n    while i < len(segment): # 从句子的第一个字开始处理，知道处理完整个句子\n      if len(re.findall('[\\u4E00-\\u9FA5]', segment[i])) == 0:  # 如果找不到中文的，原文加进去即不用特殊处理。\n        new_segment.append(segment[i])\n        i += 1\n        continue\n\n      has_add = False\n      for length in range(3, 0, -1):\n        if i + length > len(segment):\n          continue\n        if ''.join(segment[i:i + length]) in seq_cws_dict:\n          new_segment.append(segment[i])\n          for l in range(1, length):\n            new_segment.append('##' + segment[i + l])\n          i += length\n          has_add = True\n          break\n      if not has_add:\n        new_segment.append(segment[i])\n        i += 1\n    # print(\"get_new_segment.wwm.get_new_segment:\",new_segment)\n    return new_segment\n\ndef create_instances_from_document_albert(\n    all_documents, document_index, max_seq_length, short_seq_prob,\n    masked_lm_prob, max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates `TrainingInstance`s for a single document.\n     This method is changed to create sentence-order prediction (SOP) followed by idea from paper of ALBERT, 2019-08-28, brightmart\n  \"\"\"\n  document = all_documents[document_index] # 得到一个文档\n\n  # Account for [CLS], [SEP], [SEP]\n  max_num_tokens = max_seq_length - 3\n\n  # We *usually* want to fill up the entire sequence since we are padding\n  # to `max_seq_length` anyways, so short sequences are generally wasted\n  # computation. However, we *sometimes*\n  # (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter\n  # sequences to minimize the mismatch between pre-training and fine-tuning.\n  # The `target_seq_length` is just a rough target however, whereas\n  # `max_seq_length` is a hard limit.\n  target_seq_length = max_num_tokens\n  if rng.random() < short_seq_prob: # 有一定的比例，如10%的概率，我们使用比较短的序列长度，以缓解预训练的长序列和调优阶段（可能的）短序列的不一致情况\n    target_seq_length = rng.randint(2, max_num_tokens)\n\n  # We DON'T just concatenate all of the tokens from a document into a long\n  # sequence and choose an arbitrary split point because this would make the\n  # next sentence prediction task too easy. Instead, we split the input into\n  # segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user\n  # input.\n  # 设法使用实际的句子，而不是任意的截断句子，从而更好的构造句子连贯性预测的任务\n  instances = []\n  current_chunk = [] # 当前处理的文本段，包含多个句子\n  current_length = 0\n  i = 0\n  # print(\"###document:\",document) # 一个document可以是一整篇文章、新闻、词条等. document:[['是', '爷', '们', '，', '就', '得', '给', '媳', '妇', '幸', '福'], ['关', '注', '【', '晨', '曦', '教', '育', '】', '，', '获', '取', '育', '儿', '的', '智', '慧', '，', '与', '孩', '子', '一', '同', '成', '长', '！'], ['方', '法', ':', '打', '开', '微', '信', '→', '添', '加', '朋', '友', '→', '搜', '号', '→', '##he', '##bc', '##x', '##jy', '##→', '关', '注', '!', '我', '是', '一', '个', '爷', '们', '，', '孝', '顺', '是', '做', '人', '的', '第', '一', '准', '则', '。'], ['甭', '管', '小', '时', '候', '怎', '么', '跟', '家', '长', '犯', '混', '蛋', '，', '长', '大', '了', '，', '就', '底', '报', '答', '父', '母', '，', '以', '后', '我', '媳', '妇', '也', '必', '须', '孝', '顺', '。'], ['我', '是', '一', '个', '爷', '们', '，', '可', '以', '花', '心', '，', '可', '以', '好', '玩', '。'], ['但', '我', '一', '定', '会', '找', '一', '个', '管', '的', '住', '我', '的', '女', '人', '，', '和', '我', '一', '起', '生', '活', '。'], ['28', '岁', '以', '前', '在', '怎', '么', '玩', '都', '行', '，', '但', '我', '最', '后', '一', '定', '会', '找', '一', '个', '勤', '俭', '持', '家', '的', '女', '人', '。'], ['我', '是', '一', '爷', '们', '，', '我', '不', '会', '让', '自', '己', '的', '女', '人', '受', '一', '点', '委', '屈', '，', '每', '次', '把', '她', '抱', '在', '怀', '里', '，', '看', '她', '洋', '溢', '着', '幸', '福', '的', '脸', '，', '我', '都', '会', '引', '以', '为', '傲', '，', '这', '特', '么', '就', '是', '我', '的', '女', '人', '。'], ['我', '是', '一', '爷', '们', '，', '干', '什', '么', '也', '不', '能', '忘', '了', '自', '己', '媳', '妇', '，', '就', '算', '和', '哥', '们', '一', '起', '喝', '酒', '，', '喝', '到', '很', '晚', '，', '也', '要', '提', '前', '打', '电', '话', '告', '诉', '她', '，', '让', '她', '早', '点', '休', '息', '。'], ['我', '是', '一', '爷', '们', '，', '我', '媳', '妇', '绝', '对', '不', '能', '抽', '烟', '，', '喝', '酒', '还', '勉', '强', '过', '得', '去', '，', '不', '过', '该', '喝', '的', '时', '候', '喝', '，', '不', '该', '喝', '的', '时', '候', '，', '少', '扯', '纳', '极', '薄', '蛋', '。'], ['我', '是', '一', '爷', '们', '，', '我', '媳', '妇', '必', '须', '听', '我', '话', '，', '在', '人', '前', '一', '定', '要', '给', '我', '面', '子', '，', '回', '家', '了', '咱', '什', '么', '都', '好', '说', '。'], ['我', '是', '一', '爷', '们', '，', '就', '算', '难', '的', '吃', '不', '上', '饭', '了', '，', '都', '不', '张', '口', '跟', '媳', '妇', '要', '一', '分', '钱', '。'], ['我', '是', '一', '爷', '们', '，', '不', '管', '上', '学', '还', '是', '上', '班', '，', '我', '都', '会', '送', '媳', '妇', '回', '家', '。'], ['我', '是', '一', '爷', '们', '，', '交', '往', '不', '到', '1', '年', '，', '绝', '对', '不', '会', '和', '媳', '妇', '提', '过', '分', '的', '要', '求', '，', '我', '会', '尊', '重', '她', '。'], ['我', '是', '一', '爷', '们', '，', '游', '戏', '永', '远', '比', '不', '上', '我', '媳', '妇', '重', '要', '，', '只', '要', '媳', '妇', '发', '话', '，', '我', '绝', '对', '唯', '命', '是', '从', '。'], ['我', '是', '一', '爷', '们', '，', '上', 'q', '绝', '对', '是', '为', '了', '等', '媳', '妇', '，', '所', '有', '暧', '昧', '的', '心', '情', '只', '为', '她', '一', '个', '女', '人', '而', '写', '，', '我', '不', '一', '定', '会', '经', '常', '写', '日', '志', '，', '可', '是', '我', '会', '告', '诉', '全', '世', '界', '，', '我', '很', '爱', '她', '。'], ['我', '是', '一', '爷', '们', '，', '不', '一', '定', '要', '经', '常', '制', '造', '浪', '漫', '、', '偶', '尔', '过', '个', '节', '日', '也', '要', '送', '束', '玫', '瑰', '花', '给', '媳', '妇', '抱', '回', '家', '。'], ['我', '是', '一', '爷', '们', '，', '手', '机', '会', '24', '小', '时', '为', '她', '开', '机', '，', '让', '她', '半', '夜', '痛', '经', '的', '时', '候', '，', '做', '恶', '梦', '的', '时', '候', '，', '随', '时', '可', '以', '联', '系', '到', '我', '。'], ['我', '是', '一', '爷', '们', '，', '我', '会', '经', '常', '带', '媳', '妇', '出', '去', '玩', '，', '她', '不', '一', '定', '要', '和', '我', '所', '有', '的', '哥', '们', '都', '认', '识', '，', '但', '见', '面', '能', '说', '的', '上', '话', '就', '行', '。'], ['我', '是', '一', '爷', '们', '，', '我', '会', '和', '媳', '妇', '的', '姐', '妹', '哥', '们', '搞', '好', '关', '系', '，', '让', '她', '们', '相', '信', '我', '一', '定', '可', '以', '给', '我', '媳', '妇', '幸', '福', '。'], ['我', '是', '一', '爷', '们', '，', '吵', '架', '后', '、', '也', '要', '主', '动', '打', '电', '话', '关', '心', '她', '，', '咱', '是', '一', '爷', '们', '，', '给', '媳', '妇', '服', '个', '软', '，', '道', '个', '歉', '怎', '么', '了', '？'], ['我', '是', '一', '爷', '们', '，', '绝', '对', '不', '会', '嫌', '弃', '自', '己', '媳', '妇', '，', '拿', '她', '和', '别', '人', '比', '，', '说', '她', '这', '不', '如', '人', '家', '，', '纳', '不', '如', '人', '家', '的', '。'], ['我', '是', '一', '爷', '们', '，', '陪', '媳', '妇', '逛', '街', '时', '，', '碰', '见', '熟', '人', '，', '无', '论', '我', '媳', '妇', '长', '的', '好', '看', '与', '否', '，', '我', '都', '会', '大', '方', '的', '介', '绍', '。'], ['谁', '让', '咱', '爷', '们', '就', '好', '这', '口', '呢', '。'], ['我', '是', '一', '爷', '们', '，', '我', '想', '我', '会', '给', '我', '媳', '妇', '最', '好', '的', '幸', '福', '。'], ['【', '我', '们', '重', '在', '分', '享', '。'], ['所', '有', '文', '字', '和', '美', '图', '，', '来', '自', '网', '络', '，', '晨', '欣', '教', '育', '整', '理', '。'], ['对', '原', '文', '作', '者', '，', '表', '示', '敬', '意', '。'], ['】', '关', '注', '晨', '曦', '教', '育', '[UNK]', '[UNK]', '晨', '曦', '教', '育', '（', '微', '信', '号', '：', 'he', '##bc', '##x', '##jy', '）', '。'], ['打', '开', '微', '信', '，', '扫', '描', '二', '维', '码', '，', '关', '注', '[UNK]', '晨', '曦', '教', '育', '[UNK]', '，', '获', '取', '更', '多', '育', '儿', '资', '源', '。'], ['点', '击', '下', '面', '订', '阅', '按', '钮', '订', '阅', '，', '会', '有', '更', '多', '惊', '喜', '哦', '！']]\n  while i < len(document): # 从文档的第一个位置开始，按个往下看\n    segment = document[i] # segment是列表，代表的是按字分开的一个完整句子，如 segment=['我', '是', '一', '爷', '们', '，', '我', '想', '我', '会', '给', '我', '媳', '妇', '最', '好', '的', '幸', '福', '。']\n    if FLAGS.non_chinese==False: # if non chinese is False, that means it is chinese, then do something to make chinese whole word mask works.\n      segment = get_new_segment(segment)  # whole word mask for chinese: 结合分词的中文的whole mask设置即在需要的地方加上“##”\n\n    current_chunk.append(segment) # 将一个独立的句子加入到当前的文本块中\n    current_length += len(segment) # 累计到为止位置接触到句子的总长度\n    if i == len(document) - 1 or current_length >= target_seq_length:\n      # 如果累计的序列长度达到了目标的长度，或当前走到了文档结尾==>构造并添加到“A[SEP]B“中的A和B中；\n      if current_chunk: # 如果当前块不为空\n        # `a_end` is how many segments from `current_chunk` go into the `A`\n        # (first) sentence.\n        a_end = 1\n        if len(current_chunk) >= 2: # 当前块，如果包含超过两个句子，取当前块的一部分作为“A[SEP]B“中的A部分\n          a_end = rng.randint(1, len(current_chunk) - 1)\n        # 将当前文本段中选取出来的前半部分，赋值给A即tokens_a\n        tokens_a = []\n        for j in range(a_end):\n          tokens_a.extend(current_chunk[j])\n\n        # 构造“A[SEP]B“中的B部分(有一部分是正常的当前文档中的后半部;在原BERT的实现中一部分是随机的从另一个文档中选取的，）\n        tokens_b = []\n        for j in range(a_end, len(current_chunk)):\n          tokens_b.extend(current_chunk[j])\n\n        # 有百分之50%的概率交换一下tokens_a和tokens_b的位置\n        # print(\"tokens_a length1:\",len(tokens_a))\n        # print(\"tokens_b length1:\",len(tokens_b)) # len(tokens_b) = 0\n\n        if len(tokens_a) == 0 or len(tokens_b) == 0: i += 1; continue\n        if rng.random() < 0.5: # 交换一下tokens_a和tokens_b\n          is_random_next=True\n          temp=tokens_a\n          tokens_a=tokens_b\n          tokens_b=temp\n        else:\n          is_random_next=False\n\n        truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng)\n\n        assert len(tokens_a) >= 1\n        assert len(tokens_b) >= 1\n\n        # 把tokens_a & tokens_b加入到按照bert的风格，即以[CLS]tokens_a[SEP]tokens_b[SEP]的形式，结合到一起，作为最终的tokens; 也带上segment_ids，前面部分segment_ids的值是0，后面部分的值是1.\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n          tokens.append(token)\n          segment_ids.append(0)\n\n        tokens.append(\"[SEP]\")\n        segment_ids.append(0)\n\n        for token in tokens_b:\n          tokens.append(token)\n          segment_ids.append(1)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(1)\n\n        # 创建masked LM的任务的数据 Creates the predictions for the masked LM objective\n        (tokens, masked_lm_positions,\n         masked_lm_labels) = create_masked_lm_predictions(\n             tokens, masked_lm_prob, max_predictions_per_seq, vocab_words, rng)\n        instance = TrainingInstance( # 创建训练实例的对象\n            tokens=tokens,\n            segment_ids=segment_ids,\n            is_random_next=is_random_next,\n            masked_lm_positions=masked_lm_positions,\n            masked_lm_labels=masked_lm_labels)\n        instances.append(instance)\n      current_chunk = [] # 清空当前块\n      current_length = 0 # 重置当前文本块的长度\n    i += 1 # 接着文档中的内容往后看\n\n  return instances\n\n\ndef create_instances_from_document_original( # THIS IS ORIGINAL BERT STYLE FOR CREATE DATA OF MLM AND NEXT SENTENCE PREDICTION TASK\n    all_documents, document_index, max_seq_length, short_seq_prob,\n    masked_lm_prob, max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates `TrainingInstance`s for a single document.\"\"\"\n  document = all_documents[document_index] # 得到一个文档\n\n  # Account for [CLS], [SEP], [SEP]\n  max_num_tokens = max_seq_length - 3\n\n  # We *usually* want to fill up the entire sequence since we are padding\n  # to `max_seq_length` anyways, so short sequences are generally wasted\n  # computation. However, we *sometimes*\n  # (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter\n  # sequences to minimize the mismatch between pre-training and fine-tuning.\n  # The `target_seq_length` is just a rough target however, whereas\n  # `max_seq_length` is a hard limit.\n  target_seq_length = max_num_tokens\n  if rng.random() < short_seq_prob: # 有一定的比例，如10%的概率，我们使用比较短的序列长度，以缓解预训练的长序列和调优阶段（可能的）短序列的不一致情况\n    target_seq_length = rng.randint(2, max_num_tokens)\n\n  # We DON'T just concatenate all of the tokens from a document into a long\n  # sequence and choose an arbitrary split point because this would make the\n  # next sentence prediction task too easy. Instead, we split the input into\n  # segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user\n  # input.\n  # 设法使用实际的句子，而不是任意的截断句子，从而更好的构造句子连贯性预测的任务\n  instances = []\n  current_chunk = [] # 当前处理的文本段，包含多个句子\n  current_length = 0\n  i = 0\n  # print(\"###document:\",document) # 一个document可以是一整篇文章、新闻、一个词条等. document:[['是', '爷', '们', '，', '就', '得', '给', '媳', '妇', '幸', '福'], ['关', '注', '【', '晨', '曦', '教', '育', '】', '，', '获', '取', '育', '儿', '的', '智', '慧', '，', '与', '孩', '子', '一', '同', '成', '长', '！'], ['方', '法', ':', '打', '开', '微', '信', '→', '添', '加', '朋', '友', '→', '搜', '号', '→', '##he', '##bc', '##x', '##jy', '##→', '关', '注', '!', '我', '是', '一', '个', '爷', '们', '，', '孝', '顺', '是', '做', '人', '的', '第', '一', '准', '则', '。'], ['甭', '管', '小', '时', '候', '怎', '么', '跟', '家', '长', '犯', '混', '蛋', '，', '长', '大', '了', '，', '就', '底', '报', '答', '父', '母', '，', '以', '后', '我', '媳', '妇', '也', '必', '须', '孝', '顺', '。'], ['我', '是', '一', '个', '爷', '们', '，', '可', '以', '花', '心', '，', '可', '以', '好', '玩', '。'], ['但', '我', '一', '定', '会', '找', '一', '个', '管', '的', '住', '我', '的', '女', '人', '，', '和', '我', '一', '起', '生', '活', '。'], ['28', '岁', '以', '前', '在', '怎', '么', '玩', '都', '行', '，', '但', '我', '最', '后', '一', '定', '会', '找', '一', '个', '勤', '俭', '持', '家', '的', '女', '人', '。'], ['我', '是', '一', '爷', '们', '，', '我', '不', '会', '让', '自', '己', '的', '女', '人', '受', '一', '点', '委', '屈', '，', '每', '次', '把', '她', '抱', '在', '怀', '里', '，', '看', '她', '洋', '溢', '着', '幸', '福', '的', '脸', '，', '我', '都', '会', '引', '以', '为', '傲', '，', '这', '特', '么', '就', '是', '我', '的', '女', '人', '。'], ['我', '是', '一', '爷', '们', '，', '干', '什', '么', '也', '不', '能', '忘', '了', '自', '己', '媳', '妇', '，', '就', '算', '和', '哥', '们', '一', '起', '喝', '酒', '，', '喝', '到', '很', '晚', '，', '也', '要', '提', '前', '打', '电', '话', '告', '诉', '她', '，', '让', '她', '早', '点', '休', '息', '。'], ['我', '是', '一', '爷', '们', '，', '我', '媳', '妇', '绝', '对', '不', '能', '抽', '烟', '，', '喝', '酒', '还', '勉', '强', '过', '得', '去', '，', '不', '过', '该', '喝', '的', '时', '候', '喝', '，', '不', '该', '喝', '的', '时', '候', '，', '少', '扯', '纳', '极', '薄', '蛋', '。'], ['我', '是', '一', '爷', '们', '，', '我', '媳', '妇', '必', '须', '听', '我', '话', '，', '在', '人', '前', '一', '定', '要', '给', '我', '面', '子', '，', '回', '家', '了', '咱', '什', '么', '都', '好', '说', '。'], ['我', '是', '一', '爷', '们', '，', '就', '算', '难', '的', '吃', '不', '上', '饭', '了', '，', '都', '不', '张', '口', '跟', '媳', '妇', '要', '一', '分', '钱', '。'], ['我', '是', '一', '爷', '们', '，', '不', '管', '上', '学', '还', '是', '上', '班', '，', '我', '都', '会', '送', '媳', '妇', '回', '家', '。'], ['我', '是', '一', '爷', '们', '，', '交', '往', '不', '到', '1', '年', '，', '绝', '对', '不', '会', '和', '媳', '妇', '提', '过', '分', '的', '要', '求', '，', '我', '会', '尊', '重', '她', '。'], ['我', '是', '一', '爷', '们', '，', '游', '戏', '永', '远', '比', '不', '上', '我', '媳', '妇', '重', '要', '，', '只', '要', '媳', '妇', '发', '话', '，', '我', '绝', '对', '唯', '命', '是', '从', '。'], ['我', '是', '一', '爷', '们', '，', '上', 'q', '绝', '对', '是', '为', '了', '等', '媳', '妇', '，', '所', '有', '暧', '昧', '的', '心', '情', '只', '为', '她', '一', '个', '女', '人', '而', '写', '，', '我', '不', '一', '定', '会', '经', '常', '写', '日', '志', '，', '可', '是', '我', '会', '告', '诉', '全', '世', '界', '，', '我', '很', '爱', '她', '。'], ['我', '是', '一', '爷', '们', '，', '不', '一', '定', '要', '经', '常', '制', '造', '浪', '漫', '、', '偶', '尔', '过', '个', '节', '日', '也', '要', '送', '束', '玫', '瑰', '花', '给', '媳', '妇', '抱', '回', '家', '。'], ['我', '是', '一', '爷', '们', '，', '手', '机', '会', '24', '小', '时', '为', '她', '开', '机', '，', '让', '她', '半', '夜', '痛', '经', '的', '时', '候', '，', '做', '恶', '梦', '的', '时', '候', '，', '随', '时', '可', '以', '联', '系', '到', '我', '。'], ['我', '是', '一', '爷', '们', '，', '我', '会', '经', '常', '带', '媳', '妇', '出', '去', '玩', '，', '她', '不', '一', '定', '要', '和', '我', '所', '有', '的', '哥', '们', '都', '认', '识', '，', '但', '见', '面', '能', '说', '的', '上', '话', '就', '行', '。'], ['我', '是', '一', '爷', '们', '，', '我', '会', '和', '媳', '妇', '的', '姐', '妹', '哥', '们', '搞', '好', '关', '系', '，', '让', '她', '们', '相', '信', '我', '一', '定', '可', '以', '给', '我', '媳', '妇', '幸', '福', '。'], ['我', '是', '一', '爷', '们', '，', '吵', '架', '后', '、', '也', '要', '主', '动', '打', '电', '话', '关', '心', '她', '，', '咱', '是', '一', '爷', '们', '，', '给', '媳', '妇', '服', '个', '软', '，', '道', '个', '歉', '怎', '么', '了', '？'], ['我', '是', '一', '爷', '们', '，', '绝', '对', '不', '会', '嫌', '弃', '自', '己', '媳', '妇', '，', '拿', '她', '和', '别', '人', '比', '，', '说', '她', '这', '不', '如', '人', '家', '，', '纳', '不', '如', '人', '家', '的', '。'], ['我', '是', '一', '爷', '们', '，', '陪', '媳', '妇', '逛', '街', '时', '，', '碰', '见', '熟', '人', '，', '无', '论', '我', '媳', '妇', '长', '的', '好', '看', '与', '否', '，', '我', '都', '会', '大', '方', '的', '介', '绍', '。'], ['谁', '让', '咱', '爷', '们', '就', '好', '这', '口', '呢', '。'], ['我', '是', '一', '爷', '们', '，', '我', '想', '我', '会', '给', '我', '媳', '妇', '最', '好', '的', '幸', '福', '。'], ['【', '我', '们', '重', '在', '分', '享', '。'], ['所', '有', '文', '字', '和', '美', '图', '，', '来', '自', '网', '络', '，', '晨', '欣', '教', '育', '整', '理', '。'], ['对', '原', '文', '作', '者', '，', '表', '示', '敬', '意', '。'], ['】', '关', '注', '晨', '曦', '教', '育', '[UNK]', '[UNK]', '晨', '曦', '教', '育', '（', '微', '信', '号', '：', 'he', '##bc', '##x', '##jy', '）', '。'], ['打', '开', '微', '信', '，', '扫', '描', '二', '维', '码', '，', '关', '注', '[UNK]', '晨', '曦', '教', '育', '[UNK]', '，', '获', '取', '更', '多', '育', '儿', '资', '源', '。'], ['点', '击', '下', '面', '订', '阅', '按', '钮', '订', '阅', '，', '会', '有', '更', '多', '惊', '喜', '哦', '！']]\n  while i < len(document): # 从文档的第一个位置开始，按个往下看\n    segment = document[i] # segment是列表，代表的是按字分开的一个完整句子，如 segment=['我', '是', '一', '爷', '们', '，', '我', '想', '我', '会', '给', '我', '媳', '妇', '最', '好', '的', '幸', '福', '。']\n    # print(\"###i:\",i,\";segment:\",segment)\n    current_chunk.append(segment) # 将一个独立的句子加入到当前的文本块中\n    current_length += len(segment) # 累计到为止位置接触到句子的总长度\n    if i == len(document) - 1 or current_length >= target_seq_length: # 如果累计的序列长度达到了目标的长度==>构造并添加到“A[SEP]B“中的A和B中。\n      if current_chunk: # 如果当前块不为空\n        # `a_end` is how many segments from `current_chunk` go into the `A`\n        # (first) sentence.\n        a_end = 1\n        if len(current_chunk) >= 2: # 当前块，如果包含超过两个句子，怎取当前块的一部分作为“A[SEP]B“中的A部分\n          a_end = rng.randint(1, len(current_chunk) - 1)\n        # 将当前文本段中选取出来的前半部分，赋值给A即tokens_a\n        tokens_a = []\n        for j in range(a_end):\n          tokens_a.extend(current_chunk[j])\n\n        # 构造“A[SEP]B“中的B部分(原本的B有一部分是随机的从另一个文档中选取的，有一部分是正常的当前文档中的后半部）\n        tokens_b = []\n        # Random next\n        is_random_next = False\n        if len(current_chunk) == 1 or rng.random() < 0.5: # 有50%的概率，是从其他文档中随机的选取一个文档，并得到这个文档的后半版本作为B即tokens_b\n          is_random_next = True\n          target_b_length = target_seq_length - len(tokens_a)\n\n          # This should rarely go for more than one iteration for large\n          # corpora. However, just to be careful, we try to make sure that\n          # the random document is not the same as the document\n          # we're processing.\n          random_document_index=0\n          for _ in range(10): # 随机的选出一个与当前的文档不一样的文档的索引\n            random_document_index = rng.randint(0, len(all_documents) - 1)\n            if random_document_index != document_index:\n              break\n\n          random_document = all_documents[random_document_index] # 选出这个文档\n          random_start = rng.randint(0, len(random_document) - 1) # 从这个文档选出一个段落的开始位置\n          for j in range(random_start, len(random_document)): # 从这个文档的开始位置到结束，作为我们的“A[SEP]B“中的B即tokens_b\n            tokens_b.extend(random_document[j])\n            if len(tokens_b) >= target_b_length:\n              break\n          # We didn't actually use these segments so we \"put them back\" so\n          # they don't go to waste. 这里是为了防止文本的浪费的一个小技巧\n          num_unused_segments = len(current_chunk) - a_end # e.g. 550-200=350\n          i -= num_unused_segments # i=i-num_unused_segments, e.g. i=400, num_unused_segments=350, 那么 i=i-num_unused_segments=400-350=50\n        # Actual next\n        else: # 有另外50%的几乎，从当前文本块（长度为max_sequence_length）中的后段中填充到tokens_b即“A[SEP]B“中的B。\n          is_random_next = False\n          for j in range(a_end, len(current_chunk)):\n            tokens_b.extend(current_chunk[j])\n        truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng)\n\n        assert len(tokens_a) >= 1\n        assert len(tokens_b) >= 1\n\n        # 把tokens_a & tokens_b加入到按照bert的风格，即以[CLS]tokens_a[SEP]tokens_b[SEP]的形式，结合到一起，作为最终的tokens; 也带上segment_ids，前面部分segment_ids的值是0，后面部分的值是1.\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n          tokens.append(token)\n          segment_ids.append(0)\n\n        tokens.append(\"[SEP]\")\n        segment_ids.append(0)\n\n        for token in tokens_b:\n          tokens.append(token)\n          segment_ids.append(1)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(1)\n\n        # 创建masked LM的任务的数据 Creates the predictions for the masked LM objective\n        (tokens, masked_lm_positions,\n         masked_lm_labels) = create_masked_lm_predictions(\n             tokens, masked_lm_prob, max_predictions_per_seq, vocab_words, rng)\n        instance = TrainingInstance( # 创建训练实例的对象\n            tokens=tokens,\n            segment_ids=segment_ids,\n            is_random_next=is_random_next,\n            masked_lm_positions=masked_lm_positions,\n            masked_lm_labels=masked_lm_labels)\n        instances.append(instance)\n      current_chunk = [] # 清空当前块\n      current_length = 0 # 重置当前文本块的长度\n    i += 1 # 接着文档中的内容往后看\n\n  return instances\n\n\nMaskedLmInstance = collections.namedtuple(\"MaskedLmInstance\",\n                                          [\"index\", \"label\"])\n\n\ndef create_masked_lm_predictions(tokens, masked_lm_prob,\n                                 max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates the predictions for the masked LM objective.\"\"\"\n\n  cand_indexes = []\n  for (i, token) in enumerate(tokens):\n    if token == \"[CLS]\" or token == \"[SEP]\":\n      continue\n    # Whole Word Masking means that if we mask all of the wordpieces\n    # corresponding to an original word. When a word has been split into\n    # WordPieces, the first token does not have any marker and any subsequence\n    # tokens are prefixed with ##. So whenever we see the ## token, we\n    # append it to the previous set of word indexes.\n    #\n    # Note that Whole Word Masking does *not* change the training code\n    # at all -- we still predict each WordPiece independently, softmaxed\n    # over the entire vocabulary.\n    if (FLAGS.do_whole_word_mask and len(cand_indexes) >= 1 and\n            token.startswith(\"##\")):\n      cand_indexes[-1].append(i)\n    else:\n      cand_indexes.append([i])\n\n  rng.shuffle(cand_indexes)\n\n  if FLAGS.non_chinese==False: # if non chinese is False, that means it is chinese, then try to remove \"##\" which is added previously\n    output_tokens = [t[2:] if len(re.findall('##[\\u4E00-\\u9FA5]', t)) > 0 else t for t in tokens]  # 去掉\"##\"\n  else: # english and other language, which is not chinese\n    output_tokens = list(tokens)\n\n  num_to_predict = min(max_predictions_per_seq,\n                       max(1, int(round(len(tokens) * masked_lm_prob))))\n\n  masked_lms = []\n  covered_indexes = set()\n  for index_set in cand_indexes:\n    if len(masked_lms) >= num_to_predict:\n      break\n    # If adding a whole-word mask would exceed the maximum number of\n    # predictions, then just skip this candidate.\n    if len(masked_lms) + len(index_set) > num_to_predict:\n      continue\n    is_any_index_covered = False\n    for index in index_set:\n      if index in covered_indexes:\n        is_any_index_covered = True\n        break\n    if is_any_index_covered:\n      continue\n    for index in index_set:\n      covered_indexes.add(index)\n\n      masked_token = None\n      # 80% of the time, replace with [MASK]\n      if rng.random() < 0.8:\n        masked_token = \"[MASK]\"\n      else:\n        # 10% of the time, keep original\n        if rng.random() < 0.5:\n          if FLAGS.non_chinese == False: # if non chinese is False, that means it is chinese, then try to remove \"##\" which is added previously\n            masked_token = tokens[index][2:] if len(re.findall('##[\\u4E00-\\u9FA5]', tokens[index])) > 0 else tokens[index]  # 去掉\"##\"\n          else:\n            masked_token = tokens[index]\n        # 10% of the time, replace with random word\n        else:\n          masked_token = vocab_words[rng.randint(0, len(vocab_words) - 1)]\n\n      output_tokens[index] = masked_token\n\n      masked_lms.append(MaskedLmInstance(index=index, label=tokens[index]))\n  assert len(masked_lms) <= num_to_predict\n  masked_lms = sorted(masked_lms, key=lambda x: x.index)\n\n  masked_lm_positions = []\n  masked_lm_labels = []\n  for p in masked_lms:\n    masked_lm_positions.append(p.index)\n    masked_lm_labels.append(p.label)\n\n  # tf.logging.info('%s' % (tokens))\n  # tf.logging.info('%s' % (output_tokens))\n  return (output_tokens, masked_lm_positions, masked_lm_labels)\n\ndef create_masked_lm_predictions_original(tokens, masked_lm_prob,\n                                 max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates the predictions for the masked LM objective.\"\"\"\n\n  cand_indexes = []\n  for (i, token) in enumerate(tokens):\n    if token == \"[CLS]\" or token == \"[SEP]\":\n      continue\n    # Whole Word Masking means that if we mask all of the wordpieces\n    # corresponding to an original word. When a word has been split into\n    # WordPieces, the first token does not have any marker and any subsequence\n    # tokens are prefixed with ##. So whenever we see the ## token, we\n    # append it to the previous set of word indexes.\n    #\n    # Note that Whole Word Masking does *not* change the training code\n    # at all -- we still predict each WordPiece independently, softmaxed\n    # over the entire vocabulary.\n    if (FLAGS.do_whole_word_mask and len(cand_indexes) >= 1 and\n        token.startswith(\"##\")):\n      cand_indexes[-1].append(i)\n    else:\n      cand_indexes.append([i])\n\n  rng.shuffle(cand_indexes)\n\n  output_tokens = list(tokens)\n\n  num_to_predict = min(max_predictions_per_seq,\n                       max(1, int(round(len(tokens) * masked_lm_prob))))\n\n  masked_lms = []\n  covered_indexes = set()\n  for index_set in cand_indexes:\n    if len(masked_lms) >= num_to_predict:\n      break\n    # If adding a whole-word mask would exceed the maximum number of\n    # predictions, then just skip this candidate.\n    if len(masked_lms) + len(index_set) > num_to_predict:\n      continue\n    is_any_index_covered = False\n    for index in index_set:\n      if index in covered_indexes:\n        is_any_index_covered = True\n        break\n    if is_any_index_covered:\n      continue\n    for index in index_set:\n      covered_indexes.add(index)\n\n      masked_token = None\n      # 80% of the time, replace with [MASK]\n      if rng.random() < 0.8:\n        masked_token = \"[MASK]\"\n      else:\n        # 10% of the time, keep original\n        if rng.random() < 0.5:\n          masked_token = tokens[index]\n        # 10% of the time, replace with random word\n        else:\n          masked_token = vocab_words[rng.randint(0, len(vocab_words) - 1)]\n\n      output_tokens[index] = masked_token\n\n      masked_lms.append(MaskedLmInstance(index=index, label=tokens[index]))\n  assert len(masked_lms) <= num_to_predict\n  masked_lms = sorted(masked_lms, key=lambda x: x.index)\n\n  masked_lm_positions = []\n  masked_lm_labels = []\n  for p in masked_lms:\n    masked_lm_positions.append(p.index)\n    masked_lm_labels.append(p.label)\n\n  return (output_tokens, masked_lm_positions, masked_lm_labels)\n\n\ndef truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng):\n  \"\"\"Truncates a pair of sequences to a maximum sequence length.\"\"\"\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_num_tokens:\n      break\n\n    trunc_tokens = tokens_a if len(tokens_a) > len(tokens_b) else tokens_b\n    assert len(trunc_tokens) >= 1\n\n    # We want to sometimes truncate from the front and sometimes from the\n    # back to add more randomness and avoid biases.\n    if rng.random() < 0.5:\n      del trunc_tokens[0]\n    else:\n      trunc_tokens.pop()\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Reading from input files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\", input_file)\n\n  rng = random.Random(FLAGS.random_seed)\n  instances = create_training_instances(\n      input_files, tokenizer, FLAGS.max_seq_length, FLAGS.dupe_factor,\n      FLAGS.short_seq_prob, FLAGS.masked_lm_prob, FLAGS.max_predictions_per_seq,\n      rng)\n\n  output_files = FLAGS.output_file.split(\",\")\n  tf.logging.info(\"*** Writing to output files ***\")\n  for output_file in output_files:\n    tf.logging.info(\"  %s\", output_file)\n\n  write_instance_to_example_files(instances, tokenizer, FLAGS.max_seq_length,\n                                  FLAGS.max_predictions_per_seq, output_files)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"output_file\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  tf.app.run()"
        },
        {
          "name": "create_pretraining_data_google.py",
          "type": "blob",
          "size": 22.5693359375,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n# coding=utf-8\n\"\"\"Create masked LM/next sentence masked_lm TF examples for ALBERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport random\n\nimport numpy as np\nimport six\nfrom six.moves import range\nfrom six.moves import zip\nimport tensorflow as tf\n\nfrom albert import tokenization\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\nflags.DEFINE_string(\"input_file\", None,\n                    \"Input raw text file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\n    \"output_file\", None,\n    \"Output TF example file (or comma-separated list of files).\")\n\nflags.DEFINE_string(\n    \"vocab_file\", None,\n    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_bool(\n    \"do_whole_word_mask\", True,\n    \"Whether to use whole word masking rather than per-xWordPiece masking.\")\n\nflags.DEFINE_bool(\n    \"do_permutation\", False,\n    \"Whether to do the permutation training.\")\n\nflags.DEFINE_bool(\n    \"favor_shorter_ngram\", False,\n    \"Whether to set higher probabilities for sampling shorter ngrams.\")\n\nflags.DEFINE_bool(\n    \"random_next_sentence\", False,\n    \"Whether to use the sentence that's right before the current sentence \"\n    \"as the negative sample for next sentence prection, rather than using \"\n    \"sentences from other random documents.\")\n\nflags.DEFINE_integer(\"max_seq_length\", 512, \"Maximum sequence length.\")\n\nflags.DEFINE_integer(\"ngram\", 3, \"Maximum number of ngrams to mask.\")\n\nflags.DEFINE_integer(\"max_predictions_per_seq\", 20,\n                     \"Maximum number of masked LM predictions per sequence.\")\n\nflags.DEFINE_integer(\"random_seed\", 12345, \"Random seed for data generation.\")\n\nflags.DEFINE_integer(\n    \"dupe_factor\", 10,\n    \"Number of times to duplicate the input data (with different masks).\")\n\nflags.DEFINE_float(\"masked_lm_prob\", 0.15, \"Masked LM probability.\")\n\nflags.DEFINE_float(\n    \"short_seq_prob\", 0.1,\n    \"Probability of creating sequences which are shorter than the \"\n    \"maximum length.\")\n\n\nclass TrainingInstance(object):\n  \"\"\"A single training instance (sentence pair).\"\"\"\n\n  def __init__(self, tokens, segment_ids, masked_lm_positions, masked_lm_labels,\n               is_random_next, token_boundary):\n    self.tokens = tokens\n    self.segment_ids = segment_ids\n    self.is_random_next = is_random_next\n    self.token_boundary = token_boundary\n    self.masked_lm_positions = masked_lm_positions\n    self.masked_lm_labels = masked_lm_labels\n\n  def __str__(self):\n    s = \"\"\n    s += \"tokens: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.tokens]))\n    s += \"segment_ids: %s\\n\" % (\" \".join([str(x) for x in self.segment_ids]))\n    s += \"token_boundary: %s\\n\" % (\" \".join(\n        [str(x) for x in self.token_boundary]))\n    s += \"is_random_next: %s\\n\" % self.is_random_next\n    s += \"masked_lm_positions: %s\\n\" % (\" \".join(\n        [str(x) for x in self.masked_lm_positions]))\n    s += \"masked_lm_labels: %s\\n\" % (\" \".join(\n        [tokenization.printable_text(x) for x in self.masked_lm_labels]))\n    s += \"\\n\"\n    return s\n\n  def __repr__(self):\n    return self.__str__()\n\n\ndef write_instance_to_example_files(instances, tokenizer, max_seq_length,\n                                    max_predictions_per_seq, output_files):\n  \"\"\"Create TF example files from `TrainingInstance`s.\"\"\"\n  writers = []\n  for output_file in output_files:\n    writers.append(tf.python_io.TFRecordWriter(output_file))\n\n  writer_index = 0\n\n  total_written = 0\n  for (inst_index, instance) in enumerate(instances):\n    input_ids = tokenizer.convert_tokens_to_ids(instance.tokens)\n    input_mask = [1] * len(input_ids)\n    segment_ids = list(instance.segment_ids)\n    token_boundary = list(instance.token_boundary)\n    assert len(input_ids) <= max_seq_length\n\n    while len(input_ids) < max_seq_length:\n      input_ids.append(0)\n      input_mask.append(0)\n      segment_ids.append(0)\n      token_boundary.append(0)\n\n    assert len(input_ids) == max_seq_length\n    assert len(input_mask) == max_seq_length\n    assert len(segment_ids) == max_seq_length\n\n    masked_lm_positions = list(instance.masked_lm_positions)\n    masked_lm_ids = tokenizer.convert_tokens_to_ids(instance.masked_lm_labels)\n    masked_lm_weights = [1.0] * len(masked_lm_ids)\n\n    multiplier = 1 + int(FLAGS.do_permutation)\n    while len(masked_lm_positions) < max_predictions_per_seq * multiplier:\n      masked_lm_positions.append(0)\n      masked_lm_ids.append(0)\n      masked_lm_weights.append(0.0)\n\n    sentence_order_label = 1 if instance.is_random_next else 0\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(input_ids)\n    features[\"input_mask\"] = create_int_feature(input_mask)\n    features[\"segment_ids\"] = create_int_feature(segment_ids)\n    features[\"token_boundary\"] = create_int_feature(token_boundary)\n    features[\"masked_lm_positions\"] = create_int_feature(masked_lm_positions)\n    features[\"masked_lm_ids\"] = create_int_feature(masked_lm_ids)\n    features[\"masked_lm_weights\"] = create_float_feature(masked_lm_weights)\n    # Note: We keep this feature name `next_sentence_labels` to be compatible\n    # with the original data created by lanzhzh@. However, in the ALBERT case\n    # it does contain sentence_order_label.\n    features[\"next_sentence_labels\"] = create_int_feature(\n        [sentence_order_label])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n\n    writers[writer_index].write(tf_example.SerializeToString())\n    writer_index = (writer_index + 1) % len(writers)\n\n    total_written += 1\n\n    if inst_index < 6:\n      tf.logging.info(\"*** Example ***\")\n      tf.logging.info(\"tokens: %s\" % \" \".join(\n          [tokenization.printable_text(x) for x in instance.tokens]))\n\n      for feature_name in features.keys():\n        feature = features[feature_name]\n        values = []\n        if feature.int64_list.value:\n          values = feature.int64_list.value\n        elif feature.float_list.value:\n          values = feature.float_list.value\n        tf.logging.info(\n            \"%s: %s\" % (feature_name, \" \".join([str(x) for x in values])))\n\n  for writer in writers:\n    writer.close()\n\n  tf.logging.info(\"Wrote %d total instances\", total_written)\n\n\ndef create_int_feature(values):\n  feature = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n  return feature\n\n\ndef create_float_feature(values):\n  feature = tf.train.Feature(float_list=tf.train.FloatList(value=list(values)))\n  return feature\n\n\ndef create_training_instances(input_files, tokenizer, max_seq_length,\n                              dupe_factor, short_seq_prob, masked_lm_prob,\n                              max_predictions_per_seq, rng):\n  \"\"\"Create `TrainingInstance`s from raw text.\"\"\"\n  all_documents = [[]]\n\n  # Input file format:\n  # (1) One sentence per line. These should ideally be actual sentences, not\n  # entire paragraphs or arbitrary spans of text. (Because we use the\n  # sentence boundaries for the \"next sentence prediction\" task).\n  # (2) Blank lines between documents. Document boundaries are needed so\n  # that the \"next sentence prediction\" task doesn't span between documents.\n  for input_file in input_files:\n    with tf.gfile.GFile(input_file, \"r\") as reader:\n      while True:\n        line = reader.readline()\n        if not FLAGS.spm_model_file:\n          line = tokenization.convert_to_unicode(line)\n        if not line:\n          break\n        if FLAGS.spm_model_file:\n          line = tokenization.preprocess_text(line, lower=FLAGS.do_lower_case)\n        else:\n          line = line.strip()\n\n        # Empty lines are used as document delimiters\n        if not line:\n          all_documents.append([])\n        tokens = tokenizer.tokenize(line)\n        if tokens:\n          all_documents[-1].append(tokens)\n\n  # Remove empty documents\n  all_documents = [x for x in all_documents if x]\n  rng.shuffle(all_documents)\n\n  vocab_words = list(tokenizer.vocab.keys())\n  instances = []\n  for _ in range(dupe_factor):\n    for document_index in range(len(all_documents)):\n      instances.extend(\n          create_instances_from_document(\n              all_documents, document_index, max_seq_length, short_seq_prob,\n              masked_lm_prob, max_predictions_per_seq, vocab_words, rng))\n\n  rng.shuffle(instances)\n  return instances\n\n\ndef create_instances_from_document(\n    all_documents, document_index, max_seq_length, short_seq_prob,\n    masked_lm_prob, max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates `TrainingInstance`s for a single document.\"\"\"\n  document = all_documents[document_index]\n\n  # Account for [CLS], [SEP], [SEP]\n  max_num_tokens = max_seq_length - 3\n\n  # We *usually* want to fill up the entire sequence since we are padding\n  # to `max_seq_length` anyways, so short sequences are generally wasted\n  # computation. However, we *sometimes*\n  # (i.e., short_seq_prob == 0.1 == 10% of the time) want to use shorter\n  # sequences to minimize the mismatch between pre-training and fine-tuning.\n  # The `target_seq_length` is just a rough target however, whereas\n  # `max_seq_length` is a hard limit.\n  target_seq_length = max_num_tokens\n  if rng.random() < short_seq_prob:\n    target_seq_length = rng.randint(2, max_num_tokens)\n\n  # We DON'T just concatenate all of the tokens from a document into a long\n  # sequence and choose an arbitrary split point because this would make the\n  # next sentence prediction task too easy. Instead, we split the input into\n  # segments \"A\" and \"B\" based on the actual \"sentences\" provided by the user\n  # input.\n  instances = []\n  current_chunk = []\n  current_length = 0\n  i = 0\n  while i < len(document):\n    segment = document[i]\n    current_chunk.append(segment)\n    current_length += len(segment)\n    if i == len(document) - 1 or current_length >= target_seq_length:\n      if current_chunk:\n        # `a_end` is how many segments from `current_chunk` go into the `A`\n        # (first) sentence.\n        a_end = 1\n        if len(current_chunk) >= 2:\n          a_end = rng.randint(1, len(current_chunk) - 1)\n\n        tokens_a = []\n        for j in range(a_end):\n          tokens_a.extend(current_chunk[j])\n\n        tokens_b = []\n        # Random next\n        is_random_next = False\n        if len(current_chunk) == 1 or \\\n            (FLAGS.random_next_sentence and rng.random() < 0.5):\n          is_random_next = True\n          target_b_length = target_seq_length - len(tokens_a)\n\n          # This should rarely go for more than one iteration for large\n          # corpora. However, just to be careful, we try to make sure that\n          # the random document is not the same as the document\n          # we're processing.\n          for _ in range(10):\n            random_document_index = rng.randint(0, len(all_documents) - 1)\n            if random_document_index != document_index:\n              break\n\n          random_document = all_documents[random_document_index]\n          random_start = rng.randint(0, len(random_document) - 1)\n          for j in range(random_start, len(random_document)):\n            tokens_b.extend(random_document[j])\n            if len(tokens_b) >= target_b_length:\n              break\n          # We didn't actually use these segments so we \"put them back\" so\n          # they don't go to waste.\n          num_unused_segments = len(current_chunk) - a_end\n          i -= num_unused_segments\n        elif not FLAGS.random_next_sentence and rng.random() < 0.5:\n          is_random_next = True\n          for j in range(a_end, len(current_chunk)):\n            tokens_b.extend(current_chunk[j])\n          # Note(mingdachen): in this case, we just swap tokens_a and tokens_b\n          tokens_a, tokens_b = tokens_b, tokens_a\n        # Actual next\n        else:\n          is_random_next = False\n          for j in range(a_end, len(current_chunk)):\n            tokens_b.extend(current_chunk[j])\n        truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng)\n\n        assert len(tokens_a) >= 1\n        assert len(tokens_b) >= 1\n\n        tokens = []\n        segment_ids = []\n        tokens.append(\"[CLS]\")\n        segment_ids.append(0)\n        for token in tokens_a:\n          tokens.append(token)\n          segment_ids.append(0)\n\n        tokens.append(\"[SEP]\")\n        segment_ids.append(0)\n\n        for token in tokens_b:\n          tokens.append(token)\n          segment_ids.append(1)\n        tokens.append(\"[SEP]\")\n        segment_ids.append(1)\n\n        (tokens, masked_lm_positions,\n         masked_lm_labels, token_boundary) = create_masked_lm_predictions(\n             tokens, masked_lm_prob, max_predictions_per_seq, vocab_words, rng)\n        instance = TrainingInstance(\n            tokens=tokens,\n            segment_ids=segment_ids,\n            is_random_next=is_random_next,\n            token_boundary=token_boundary,\n            masked_lm_positions=masked_lm_positions,\n            masked_lm_labels=masked_lm_labels)\n        instances.append(instance)\n      current_chunk = []\n      current_length = 0\n    i += 1\n\n  return instances\n\n\nMaskedLmInstance = collections.namedtuple(\"MaskedLmInstance\",\n                                          [\"index\", \"label\"])\n\n\ndef _is_start_piece_sp(piece):\n  \"\"\"Check if the current word piece is the starting piece (sentence piece).\"\"\"\n  special_pieces = set(list('!\"#$%&\\\"()*+,-./:;?@[\\\\]^_`{|}~'))\n  special_pieces.add(u\"€\".encode(\"utf-8\"))\n  special_pieces.add(u\"£\".encode(\"utf-8\"))\n  # Note(mingdachen):\n  # For foreign characters, we always treat them as a whole piece.\n  english_chars = set(list(\"abcdefghijklmnopqrstuvwhyz\"))\n  if (six.ensure_str(piece).startswith(\"▁\") or\n      six.ensure_str(piece).startswith(\"<\") or piece in special_pieces or\n      not all([i.lower() in english_chars.union(special_pieces)\n               for i in piece])):\n    return True\n  else:\n    return False\n\n\ndef _is_start_piece_bert(piece):\n  \"\"\"Check if the current word piece is the starting piece (BERT).\"\"\"\n  # When a word has been split into\n  # WordPieces, the first token does not have any marker and any subsequence\n  # tokens are prefixed with ##. So whenever we see the ## token, we\n  # append it to the previous set of word indexes.\n  return not six.ensure_str(piece).startswith(\"##\")\n\n\ndef is_start_piece(piece):\n  if FLAGS.spm_model_file:\n    return _is_start_piece_sp(piece)\n  else:\n    return _is_start_piece_bert(piece)\n\n\ndef create_masked_lm_predictions(tokens, masked_lm_prob,\n                                 max_predictions_per_seq, vocab_words, rng):\n  \"\"\"Creates the predictions for the masked LM objective.\"\"\"\n\n  cand_indexes = []\n  # Note(mingdachen): We create a list for recording if the piece is\n  # the starting piece of current token, where 1 means true, so that\n  # on-the-fly whole word masking is possible.\n  token_boundary = [0] * len(tokens)\n\n  for (i, token) in enumerate(tokens):\n    if token == \"[CLS]\" or token == \"[SEP]\":\n      token_boundary[i] = 1\n      continue\n    # Whole Word Masking means that if we mask all of the wordpieces\n    # corresponding to an original word.\n    #\n    # Note that Whole Word Masking does *not* change the training code\n    # at all -- we still predict each WordPiece independently, softmaxed\n    # over the entire vocabulary.\n    if (FLAGS.do_whole_word_mask and len(cand_indexes) >= 1 and\n        not is_start_piece(token)):\n      cand_indexes[-1].append(i)\n    else:\n      cand_indexes.append([i])\n      if is_start_piece(token):\n        token_boundary[i] = 1\n\n  output_tokens = list(tokens)\n\n  masked_lm_positions = []\n  masked_lm_labels = []\n\n  if masked_lm_prob == 0:\n    return (output_tokens, masked_lm_positions,\n            masked_lm_labels, token_boundary)\n\n  num_to_predict = min(max_predictions_per_seq,\n                       max(1, int(round(len(tokens) * masked_lm_prob))))\n\n  # Note(mingdachen):\n  # By default, we set the probilities to favor longer ngram sequences.\n  ngrams = np.arange(1, FLAGS.ngram + 1, dtype=np.int64)\n  pvals = 1. / np.arange(1, FLAGS.ngram + 1)\n  pvals /= pvals.sum(keepdims=True)\n\n  if FLAGS.favor_shorter_ngram:\n    pvals = pvals[::-1]\n\n  ngram_indexes = []\n  for idx in range(len(cand_indexes)):\n    ngram_index = []\n    for n in ngrams:\n      ngram_index.append(cand_indexes[idx:idx+n])\n    ngram_indexes.append(ngram_index)\n\n  rng.shuffle(ngram_indexes)\n\n  masked_lms = []\n  covered_indexes = set()\n  for cand_index_set in ngram_indexes:\n    if len(masked_lms) >= num_to_predict:\n      break\n    if not cand_index_set:\n      continue\n    # Note(mingdachen):\n    # Skip current piece if they are covered in lm masking or previous ngrams.\n    for index_set in cand_index_set[0]:\n      for index in index_set:\n        if index in covered_indexes:\n          continue\n\n    n = np.random.choice(ngrams[:len(cand_index_set)],\n                         p=pvals[:len(cand_index_set)] /\n                         pvals[:len(cand_index_set)].sum(keepdims=True))\n    index_set = sum(cand_index_set[n - 1], [])\n    n -= 1\n    # Note(mingdachen):\n    # Repeatedly looking for a candidate that does not exceed the\n    # maximum number of predictions by trying shorter ngrams.\n    while len(masked_lms) + len(index_set) > num_to_predict:\n      if n == 0:\n        break\n      index_set = sum(cand_index_set[n - 1], [])\n      n -= 1\n    # If adding a whole-word mask would exceed the maximum number of\n    # predictions, then just skip this candidate.\n    if len(masked_lms) + len(index_set) > num_to_predict:\n      continue\n    is_any_index_covered = False\n    for index in index_set:\n      if index in covered_indexes:\n        is_any_index_covered = True\n        break\n    if is_any_index_covered:\n      continue\n    for index in index_set:\n      covered_indexes.add(index)\n\n      masked_token = None\n      # 80% of the time, replace with [MASK]\n      if rng.random() < 0.8:\n        masked_token = \"[MASK]\"\n      else:\n        # 10% of the time, keep original\n        if rng.random() < 0.5:\n          masked_token = tokens[index]\n        # 10% of the time, replace with random word\n        else:\n          masked_token = vocab_words[rng.randint(0, len(vocab_words) - 1)]\n\n      output_tokens[index] = masked_token\n\n      masked_lms.append(MaskedLmInstance(index=index, label=tokens[index]))\n  assert len(masked_lms) <= num_to_predict\n\n  rng.shuffle(ngram_indexes)\n\n  select_indexes = set()\n  if FLAGS.do_permutation:\n    for cand_index_set in ngram_indexes:\n      if len(select_indexes) >= num_to_predict:\n        break\n      if not cand_index_set:\n        continue\n      # Note(mingdachen):\n      # Skip current piece if they are covered in lm masking or previous ngrams.\n      for index_set in cand_index_set[0]:\n        for index in index_set:\n          if index in covered_indexes or index in select_indexes:\n            continue\n\n      n = np.random.choice(ngrams[:len(cand_index_set)],\n                           p=pvals[:len(cand_index_set)] /\n                           pvals[:len(cand_index_set)].sum(keepdims=True))\n      index_set = sum(cand_index_set[n - 1], [])\n      n -= 1\n\n      while len(select_indexes) + len(index_set) > num_to_predict:\n        if n == 0:\n          break\n        index_set = sum(cand_index_set[n - 1], [])\n        n -= 1\n      # If adding a whole-word mask would exceed the maximum number of\n      # predictions, then just skip this candidate.\n      if len(select_indexes) + len(index_set) > num_to_predict:\n        continue\n      is_any_index_covered = False\n      for index in index_set:\n        if index in covered_indexes or index in select_indexes:\n          is_any_index_covered = True\n          break\n      if is_any_index_covered:\n        continue\n      for index in index_set:\n        select_indexes.add(index)\n    assert len(select_indexes) <= num_to_predict\n\n    select_indexes = sorted(select_indexes)\n    permute_indexes = list(select_indexes)\n    rng.shuffle(permute_indexes)\n    orig_token = list(output_tokens)\n\n    for src_i, tgt_i in zip(select_indexes, permute_indexes):\n      output_tokens[src_i] = orig_token[tgt_i]\n      masked_lms.append(MaskedLmInstance(index=src_i, label=orig_token[src_i]))\n\n  masked_lms = sorted(masked_lms, key=lambda x: x.index)\n\n  for p in masked_lms:\n    masked_lm_positions.append(p.index)\n    masked_lm_labels.append(p.label)\n  return (output_tokens, masked_lm_positions, masked_lm_labels, token_boundary)\n\n\ndef truncate_seq_pair(tokens_a, tokens_b, max_num_tokens, rng):\n  \"\"\"Truncates a pair of sequences to a maximum sequence length.\"\"\"\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_num_tokens:\n      break\n\n    trunc_tokens = tokens_a if len(tokens_a) > len(tokens_b) else tokens_b\n    assert len(trunc_tokens) >= 1\n\n    # We want to sometimes truncate from the front and sometimes from the\n    # back to add more randomness and avoid biases.\n    if rng.random() < 0.5:\n      del trunc_tokens[0]\n    else:\n      trunc_tokens.pop()\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Reading from input files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\", input_file)\n\n  rng = random.Random(FLAGS.random_seed)\n  instances = create_training_instances(\n      input_files, tokenizer, FLAGS.max_seq_length, FLAGS.dupe_factor,\n      FLAGS.short_seq_prob, FLAGS.masked_lm_prob, FLAGS.max_predictions_per_seq,\n      rng)\n\n  tf.logging.info(\"number of instances: %i\", len(instances))\n\n  output_files = FLAGS.output_file.split(\",\")\n  tf.logging.info(\"*** Writing to output files ***\")\n  for output_file in output_files:\n    tf.logging.info(\"  %s\", output_file)\n\n  write_instance_to_example_files(instances, tokenizer, FLAGS.max_seq_length,\n                                  FLAGS.max_predictions_per_seq, output_files)\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"output_file\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  tf.app.run()"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "lamb_optimizer_google.py",
          "type": "blob",
          "size": 5.4912109375,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"Functions and classes related to optimization (weight updates).\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\nimport six\nimport tensorflow as tf\n\n# pylint: disable=g-direct-tensorflow-import\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import linalg_ops\nfrom tensorflow.python.ops import math_ops\n# pylint: enable=g-direct-tensorflow-import\n\n\nclass LAMBOptimizer(tf.train.Optimizer):\n  \"\"\"LAMB (Layer-wise Adaptive Moments optimizer for Batch training).\"\"\"\n  # A new optimizer that includes correct L2 weight decay, adaptive\n  # element-wise updating, and layer-wise justification. The LAMB optimizer\n  # was proposed by Yang You, Jing Li, Jonathan Hseu, Xiaodan Song,\n  # James Demmel, and Cho-Jui Hsieh in a paper titled as Reducing BERT\n  # Pre-Training Time from 3 Days to 76 Minutes (arxiv.org/abs/1904.00962)\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               exclude_from_layer_adaptation=None,\n               name=\"LAMBOptimizer\"):\n    \"\"\"Constructs a LAMBOptimizer.\"\"\"\n    super(LAMBOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n    # exclude_from_layer_adaptation is set to exclude_from_weight_decay if the\n    # arg is None.\n    # TODO(jingli): validate if exclude_from_layer_adaptation is necessary.\n    if exclude_from_layer_adaptation:\n      self.exclude_from_layer_adaptation = exclude_from_layer_adaptation\n    else:\n      self.exclude_from_layer_adaptation = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_m\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_v\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      ratio = 1.0\n      if self._do_layer_adaptation(param_name):\n        w_norm = linalg_ops.norm(param, ord=2)\n        g_norm = linalg_ops.norm(update, ord=2)\n        ratio = array_ops.where(math_ops.greater(w_norm, 0), array_ops.where(\n            math_ops.greater(g_norm, 0), (w_norm / g_norm), 1.0), 1.0)\n\n      update_with_lr = ratio * self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _do_layer_adaptation(self, param_name):\n    \"\"\"Whether to do layer-wise learning rate adaptation for `param_name`.\"\"\"\n    if self.exclude_from_layer_adaptation:\n      for r in self.exclude_from_layer_adaptation:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", six.ensure_str(param_name))\n    if m is not None:\n      param_name = m.group(1)\n    return param_name\n"
        },
        {
          "name": "modeling.py",
          "type": "blob",
          "size": 49.4140625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"The main BERT model and related functions.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six\nimport tensorflow as tf\nimport bert_utils\n\nclass BertConfig(object):\n  \"\"\"Configuration for `BertModel`.\"\"\"\n\n  def __init__(self,\n               vocab_size,\n               hidden_size=768,\n               num_hidden_layers=12,\n               num_attention_heads=12,\n               intermediate_size=3072,\n               hidden_act=\"gelu\",\n               hidden_dropout_prob=0.1,\n               attention_probs_dropout_prob=0.1,\n               max_position_embeddings=512,\n               type_vocab_size=16,\n               initializer_range=0.02):\n    \"\"\"Constructs BertConfig.\n\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `BertModel`.\n      hidden_size: Size of the encoder layers and the pooler layer.\n      num_hidden_layers: Number of hidden layers in the Transformer encoder.\n      num_attention_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n        layer in the Transformer encoder.\n      hidden_act: The non-linear activation function (function or string) in the\n        encoder and pooler.\n      hidden_dropout_prob: The dropout probability for all fully connected\n        layers in the embeddings, encoder, and pooler.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      max_position_embeddings: The maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `BertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    \"\"\"\n    self.vocab_size = vocab_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_attention_heads = num_attention_heads\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    \"\"\"Constructs a `BertConfig` from a Python dictionary of parameters.\"\"\"\n    config = BertConfig(vocab_size=None)\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    \"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"\n    with tf.gfile.GFile(json_file, \"r\") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    \"\"\"Serializes this instance to a Python dictionary.\"\"\"\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    \"\"\"Serializes this instance to a JSON string.\"\"\"\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + \"\\n\"\n\n\nclass BertModel(object):\n  \"\"\"BERT model (\"Bidirectional Encoder Representations from Transformers\").\n\n  Example usage:\n\n  ```python\n  # Already been converted into WordPiece token ids\n  input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n  input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n  token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n\n  config = modeling.BertConfig(vocab_size=32000, hidden_size=512,\n    num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n\n  model = modeling.BertModel(config=config, is_training=True,\n    input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n\n  label_embeddings = tf.get_variable(...)\n  pooled_output = model.get_pooled_output()\n  logits = tf.matmul(pooled_output, label_embeddings)\n  ...\n  ```\n  \"\"\"\n\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               scope=None):\n    \"\"\"Constructor for BertModel.\n\n    Args:\n      config: `BertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      scope: (optional) variable scope. Defaults to \"bert\".\n\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes\n        is invalid.\n    \"\"\"\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=\"bert\"):\n      with tf.variable_scope(\"embeddings\"):\n        # Perform embedding lookup on the word ids, but use stype of factorized embedding parameterization from albert. add by brightmart, 2019-09-28\n        (self.embedding_output, self.embedding_table,self.embedding_table_2) = embedding_lookup_factorized(\n            input_ids=input_ids,\n            vocab_size=config.vocab_size,\n            hidden_size=config.hidden_size,\n            embedding_size=config.embedding_size,\n            initializer_range=config.initializer_range,\n            word_embedding_name=\"word_embeddings\",\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(\n            input_tensor=self.embedding_output,\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=\"token_type_embeddings\",\n            use_position_embeddings=True,\n            position_embedding_name=\"position_embeddings\",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob)\n\n      with tf.variable_scope(\"encoder\"):\n        # This converts a 2D mask of shape [batch_size, seq_length] to a 3D\n        # mask of shape [batch_size, seq_length, seq_length] which is used\n        # for the attention scores.\n        attention_mask = create_attention_mask_from_input_mask(\n            input_ids, input_mask)\n\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n        ln_type=config.ln_type\n        print(\"ln_type:\",ln_type)\n        if ln_type=='postln' or ln_type is None: # currently, base or large of albert used post-LN structure\n            print(\"old structure of transformer.use: transformer_model,which use post-LN\")\n            self.all_encoder_layers = transformer_model(\n                input_tensor=self.embedding_output,\n                attention_mask=attention_mask,\n                hidden_size=config.hidden_size,\n                num_hidden_layers=config.num_hidden_layers,\n                num_attention_heads=config.num_attention_heads,\n                intermediate_size=config.intermediate_size,\n                intermediate_act_fn=get_activation(config.hidden_act),\n                hidden_dropout_prob=config.hidden_dropout_prob,\n                attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n                initializer_range=config.initializer_range,\n                do_return_all_layers=True)\n        else: # xlarge or xxlarge of albert, used pre-LN structure\n            print(\"new structure of transformer.use: prelln_transformer_model,which use pre-LN\")\n            self.all_encoder_layers = prelln_transformer_model( # change by brightmart, 4th, oct, 2019. pre-Layer Normalization can converge fast and better. check paper: ON LAYER NORMALIZATION IN THE TRANSFORMER ARCHITECTURE\n                input_tensor=self.embedding_output,\n                attention_mask=attention_mask,\n                hidden_size=config.hidden_size,\n                num_hidden_layers=config.num_hidden_layers,\n                num_attention_heads=config.num_attention_heads,\n                intermediate_size=config.intermediate_size,\n                intermediate_act_fn=get_activation(config.hidden_act),\n                hidden_dropout_prob=config.hidden_dropout_prob,\n                attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n                initializer_range=config.initializer_range,\n                do_return_all_layers=True,\n                shared_type='all') #  do_return_all_layers=True\n\n      self.sequence_output = self.all_encoder_layers[-1] # [batch_size, seq_length, hidden_size]\n      # The \"pooler\" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(\"pooler\"):\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    \"\"\"Gets final hidden layer of encoder.\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"\n    return self.sequence_output\n\n  def get_all_encoder_layers(self):\n    return self.all_encoder_layers\n\n  def get_embedding_output(self):\n    \"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    \"\"\"\n    return self.embedding_output\n\n  def get_embedding_table(self):\n    return self.embedding_table\n\n  def get_embedding_table_2(self):\n    return self.embedding_table_2\n\ndef gelu(x):\n  \"\"\"Gaussian Error Linear Unit.\n\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"\n  cdf = 0.5 * (1.0 + tf.tanh(\n      (np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3)))))\n  return x * cdf\n\n\ndef get_activation(activation_string):\n  \"\"\"Maps a string to a Python function, e.g., \"relu\" => `tf.nn.relu`.\n\n  Args:\n    activation_string: String name of the activation function.\n\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or \"linear\", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  \"\"\"\n\n  # We assume that anything that\"s not a string is already an activation\n  # function, so we just return it.\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh\n  else:\n    raise ValueError(\"Unsupported activation: %s\" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint):\n  \"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(\"^(.*):\\\\d+$\", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var\n\n  init_vars = tf.train.list_variables(init_checkpoint)\n\n  assignment_map = collections.OrderedDict()\n  for x in init_vars:\n    (name, var) = (x[0], x[1])\n    if name not in name_to_variable:\n      continue\n    assignment_map[name] = name\n    initialized_variable_names[name] = 1\n    initialized_variable_names[name + \":0\"] = 1\n\n  return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n  \"\"\"Perform dropout.\n\n  Args:\n    input_tensor: float Tensor.\n    dropout_prob: Python float. The probability of dropping out a value (NOT of\n      *keeping* a dimension as in `tf.nn.dropout`).\n\n  Returns:\n    A version of `input_tensor` with dropout applied.\n  \"\"\"\n  if dropout_prob is None or dropout_prob == 0.0:\n    return input_tensor\n\n  output = tf.nn.dropout(input_tensor, 1.0 - dropout_prob)\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  \"\"\"Runs layer normalization followed by dropout.\"\"\"\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  \"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n  \"\"\"Looks up words embeddings for id tensor.\n\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.gather()`.\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  \"\"\"\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #\n  # If the input is a 2D tensor of shape [batch_size, seq_length], we\n  # reshape to [batch_size, seq_length, 1].\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1]) # shape of input_ids is:[ batch_size, seq_length, 1]\n\n  embedding_table = tf.get_variable( # [vocab_size, embedding_size]\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n\n  flat_input_ids = tf.reshape(input_ids, [-1]) # one rank. shape as (batch_size * sequence_length,)\n  if use_one_hot_embeddings:\n    one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size) # one_hot_input_ids=[batch_size * sequence_length,vocab_size]\n    output = tf.matmul(one_hot_input_ids, embedding_table) # output=[batch_size * sequence_length,embedding_size]\n  else:\n    output = tf.gather(embedding_table, flat_input_ids) # [vocab_size, embedding_size]*[batch_size * sequence_length,]--->[batch_size * sequence_length,embedding_size]\n\n  input_shape = get_shape_list(input_ids) # input_shape=[ batch_size, seq_length, 1]\n\n  output = tf.reshape(output,input_shape[0:-1] + [input_shape[-1] * embedding_size]) # output=[batch_size,sequence_length,embedding_size]\n  return (output, embedding_table)\n\ndef embedding_lookup_factorized(input_ids, # Factorized embedding parameterization provide by albert\n                     vocab_size,\n                     hidden_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n    \"\"\"Looks up words embeddings for id tensor, but in a factorized style followed by albert. it is used to reduce much percentage of parameters previous exists.\n       Check \"Factorized embedding parameterization\" session in the paper.\n\n     Args:\n       input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n         ids.\n       vocab_size: int. Size of the embedding vocabulary.\n       embedding_size: int. Width of the word embeddings.\n       initializer_range: float. Embedding initialization range.\n       word_embedding_name: string. Name of the embedding table.\n       use_one_hot_embeddings: bool. If True, use one-hot method for word\n         embeddings. If False, use `tf.gather()`.\n\n     Returns:\n       float Tensor of shape [batch_size, seq_length, embedding_size].\n     \"\"\"\n    # This function assumes that the input is of shape [batch_size, seq_length,\n    # num_inputs].\n    #\n    # If the input is a 2D tensor of shape [batch_size, seq_length], we\n    # reshape to [batch_size, seq_length, 1].\n\n    # 1.first project one-hot vectors into a lower dimensional embedding space of size E\n    print(\"embedding_lookup_factorized. factorized embedding parameterization is used.\")\n    if input_ids.shape.ndims == 2:\n        input_ids = tf.expand_dims(input_ids, axis=[-1])  # shape of input_ids is:[ batch_size, seq_length, 1]\n\n    embedding_table = tf.get_variable(  # [vocab_size, embedding_size]\n        name=word_embedding_name,\n        shape=[vocab_size, embedding_size],\n        initializer=create_initializer(initializer_range))\n\n    flat_input_ids = tf.reshape(input_ids, [-1])  # one rank. shape as (batch_size * sequence_length,)\n    if use_one_hot_embeddings:\n        one_hot_input_ids = tf.one_hot(flat_input_ids,depth=vocab_size)  # one_hot_input_ids=[batch_size * sequence_length,vocab_size]\n        output_middle = tf.matmul(one_hot_input_ids, embedding_table)  # output=[batch_size * sequence_length,embedding_size]\n    else:\n        output_middle = tf.gather(embedding_table,flat_input_ids)  # [vocab_size, embedding_size]*[batch_size * sequence_length,]--->[batch_size * sequence_length,embedding_size]\n\n    # 2. project vector(output_middle) to the hidden space\n    project_variable = tf.get_variable(  # [embedding_size, hidden_size]\n        name=word_embedding_name+\"_2\",\n        shape=[embedding_size, hidden_size],\n        initializer=create_initializer(initializer_range))\n    output = tf.matmul(output_middle, project_variable) # ([batch_size * sequence_length, embedding_size] * [embedding_size, hidden_size])--->[batch_size * sequence_length, hidden_size]\n    # reshape back to 3 rank\n    input_shape = get_shape_list(input_ids)  # input_shape=[ batch_size, seq_length, 1]\n    batch_size, sequene_length, _=input_shape\n    output = tf.reshape(output, (batch_size,sequene_length,hidden_size))  # output=[batch_size, sequence_length, hidden_size]\n    return (output, embedding_table, project_variable)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=\"token_type_embeddings\",\n                            use_position_embeddings=True,\n                            position_embedding_name=\"position_embeddings\",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n  \"\"\"Performs various post-processing on a word embedding tensor.\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n\n  Returns:\n    float tensor with same shape as `input_tensor`.\n\n  Raises:\n    ValueError: One of the tensor shapes or input values is invalid.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(\"`token_type_ids` must be specified if\"\n                       \"`use_token_type` is True.\")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary.\n    flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n    one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n    token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n    token_type_embeddings = tf.reshape(token_type_embeddings,\n                                       [batch_size, seq_length, width])\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n\ndef create_attention_mask_from_input_mask(from_tensor, to_mask):\n  \"\"\"Create 3D attention mask from a 2D tensor mask.\n\n  Args:\n    from_tensor: 2D or 3D Tensor of shape [batch_size, from_seq_length, ...].\n    to_mask: int32 Tensor of shape [batch_size, to_seq_length].\n\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length, to_seq_length].\n  \"\"\"\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  batch_size = from_shape[0]\n  from_seq_length = from_shape[1]\n\n  to_shape = get_shape_list(to_mask, expected_rank=2)\n  to_seq_length = to_shape[1]\n\n  to_mask = tf.cast(\n      tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)\n\n  # We don't assume that `from_tensor` is a mask (although it could be). We\n  # don't actually care if we attend *from* padding tokens (only *to* padding)\n  # tokens so we create a tensor of all ones.\n  #\n  # `broadcast_ones` = [batch_size, from_seq_length, 1]\n  broadcast_ones = tf.ones(\n      shape=[batch_size, from_seq_length, 1], dtype=tf.float32)\n\n  # Here we broadcast along two dimensions to create the mask.\n  mask = broadcast_ones * to_mask\n\n  return mask\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    size_per_head=512,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    do_return_2d_tensor=False,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None):\n  \"\"\"Performs multi-headed attention from `from_tensor` to `to_tensor`.\n\n  This is an implementation of multi-headed attention based on \"Attention\n  is all you Need\". If `from_tensor` and `to_tensor` are the same, then\n  this is self-attention. Each timestep in `from_tensor` attends to the\n  corresponding sequence in `to_tensor`, and returns a fixed-with vector.\n\n  This function first projects `from_tensor` into a \"query\" tensor and\n  `to_tensor` into \"key\" and \"value\" tensors. These are (effectively) a list\n  of tensors of length `num_attention_heads`, where each tensor is of shape\n  [batch_size, seq_length, size_per_head].\n\n  Then, the query and key tensors are dot-producted and scaled. These are\n  softmaxed to obtain attention probabilities. The value tensors are then\n  interpolated by these probabilities, then concatenated back to a single\n  tensor and returned.\n\n  In practice, the multi-headed attention are done with transposes and\n  reshapes rather than actual separate tensors.\n\n  Args:\n    from_tensor: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    size_per_head: int. Size of each attention head.\n    query_act: (optional) Activation function for the query transform.\n    key_act: (optional) Activation function for the key transform.\n    value_act: (optional) Activation function for the value transform.\n    attention_probs_dropout_prob: (optional) float. Dropout probability of the\n      attention probabilities.\n    initializer_range: float. Range of the weight initializer.\n    do_return_2d_tensor: bool. If True, the output will be of shape [batch_size\n      * from_seq_length, num_attention_heads * size_per_head]. If False, the\n      output will be of shape [batch_size, from_seq_length, num_attention_heads\n      * size_per_head].\n    batch_size: (Optional) int. If the input is 2D, this might be the batch size\n      of the 3D version of the `from_tensor` and `to_tensor`.\n    from_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `from_tensor`.\n    to_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `to_tensor`.\n\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length,\n      num_attention_heads * size_per_head]. (If `do_return_2d_tensor` is\n      true, this will be of shape [batch_size * from_seq_length,\n      num_attention_heads * size_per_head]).\n\n  Raises:\n    ValueError: Any of the arguments or tensor shapes are invalid.\n  \"\"\"\n\n  def transpose_for_scores(input_tensor, batch_size, num_attention_heads,\n                           seq_length, width):\n    output_tensor = tf.reshape(\n        input_tensor, [batch_size, seq_length, num_attention_heads, width])\n\n    output_tensor = tf.transpose(output_tensor, [0, 2, 1, 3])\n    return output_tensor\n\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        \"The rank of `from_tensor` must match the rank of `to_tensor`.\")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          \"When passing in rank 2 tensors to attention_layer, the values \"\n          \"for `batch_size`, `from_seq_length`, and `to_seq_length` \"\n          \"must all be specified.\")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n\n  from_tensor_2d = reshape_to_matrix(from_tensor)\n  to_tensor_2d = reshape_to_matrix(to_tensor)\n\n  # `query_layer` = [B*F, N*H]\n  query_layer = tf.layers.dense(\n      from_tensor_2d,\n      num_attention_heads * size_per_head,\n      activation=query_act,\n      name=\"query\",\n      kernel_initializer=create_initializer(initializer_range))\n\n  # `key_layer` = [B*T, N*H]\n  key_layer = tf.layers.dense(\n      to_tensor_2d,\n      num_attention_heads * size_per_head,\n      activation=key_act,\n      name=\"key\",\n      kernel_initializer=create_initializer(initializer_range))\n\n  # `value_layer` = [B*T, N*H]\n  value_layer = tf.layers.dense(\n      to_tensor_2d,\n      num_attention_heads * size_per_head,\n      activation=value_act,\n      name=\"value\",\n      kernel_initializer=create_initializer(initializer_range))\n\n  # `query_layer` = [B, N, F, H]\n  query_layer = transpose_for_scores(query_layer, batch_size,\n                                     num_attention_heads, from_seq_length,\n                                     size_per_head)\n\n  # `key_layer` = [B, N, T, H]\n  key_layer = transpose_for_scores(key_layer, batch_size, num_attention_heads,\n                                   to_seq_length, size_per_head)\n\n  # Take the dot product between \"query\" and \"key\" to get the raw\n  # attention scores.\n  # `attention_scores` = [B, N, F, T]\n  attention_scores = tf.matmul(query_layer, key_layer, transpose_b=True)\n  attention_scores = tf.multiply(attention_scores,\n                                 1.0 / math.sqrt(float(size_per_head)))\n\n  if attention_mask is not None:\n    # `attention_mask` = [B, 1, F, T]\n    attention_mask = tf.expand_dims(attention_mask, axis=[1])\n\n    # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n    # masked positions, this operation will create a tensor which is 0.0 for\n    # positions we want to attend and -10000.0 for masked positions.\n    adder = (1.0 - tf.cast(attention_mask, tf.float32)) * -10000.0\n\n    # Since we are adding it to the raw scores before the softmax, this is\n    # effectively the same as removing these entirely.\n    attention_scores += adder\n\n  # Normalize the attention scores to probabilities.\n  # `attention_probs` = [B, N, F, T]\n  attention_probs = tf.nn.softmax(attention_scores)\n\n  # This is actually dropping out entire tokens to attend to, which might\n  # seem a bit unusual, but is taken from the original Transformer paper.\n  attention_probs = dropout(attention_probs, attention_probs_dropout_prob)\n\n  # `value_layer` = [B, T, N, H]\n  value_layer = tf.reshape(\n      value_layer,\n      [batch_size, to_seq_length, num_attention_heads, size_per_head])\n\n  # `value_layer` = [B, N, T, H]\n  value_layer = tf.transpose(value_layer, [0, 2, 1, 3])\n\n  # `context_layer` = [B, N, F, H]\n  context_layer = tf.matmul(attention_probs, value_layer)\n\n  # `context_layer` = [B, F, N, H]\n  context_layer = tf.transpose(context_layer, [0, 2, 1, 3])\n\n  if do_return_2d_tensor:\n    # `context_layer` = [B*F, N*H]\n    context_layer = tf.reshape(\n        context_layer,\n        [batch_size * from_seq_length, num_attention_heads * size_per_head])\n  else:\n    # `context_layer` = [B, F, N*H]\n    context_layer = tf.reshape(\n        context_layer,\n        [batch_size, from_seq_length, num_attention_heads * size_per_head])\n\n  return context_layer\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      intermediate_act_fn=gelu,\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False,\n                      share_parameter_across_layers=True):\n  \"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n\n  This is almost an exact implementation of the original Transformer encoder.\n\n  See the original paper:\n  https://arxiv.org/abs/1706.03762\n\n  Also see:\n  https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n      seq_length], with 1 for positions that can be attended to and 0 in\n      positions that should not be.\n    hidden_size: int. Hidden size of the Transformer.\n    num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n    num_attention_heads: int. Number of attention heads in the Transformer.\n    intermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n      forward) layer.\n    intermediate_act_fn: function. The non-linear activation function to apply\n      to the output of the intermediate/feed-forward layer.\n    hidden_dropout_prob: float. Dropout probability for the hidden layers.\n    attention_probs_dropout_prob: float. Dropout probability of the attention\n      probabilities.\n    initializer_range: float. Range of the initializer (stddev of truncated\n      normal).\n    do_return_all_layers: Whether to also return all layers or just the final\n      layer.\n\n  Returns:\n    float Tensor of shape [batch_size, seq_length, hidden_size], the final\n    hidden layer of the Transformer.\n\n  Raises:\n    ValueError: A Tensor shape or parameter is invalid.\n  \"\"\"\n  if hidden_size % num_attention_heads != 0:\n    raise ValueError(\n        \"The hidden size (%d) is not a multiple of the number of attention \"\n        \"heads (%d)\" % (hidden_size, num_attention_heads))\n\n  attention_head_size = int(hidden_size / num_attention_heads)\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  input_width = input_shape[2]\n\n  # The Transformer performs sum residuals on all layers so the input needs\n  # to be the same as the hidden size.\n  if input_width != hidden_size:\n    raise ValueError(\"The width of the input tensor (%d) != hidden size (%d)\" %\n                     (input_width, hidden_size))\n\n  # We keep the representation as a 2D tensor to avoid re-shaping it back and\n  # forth from a 3D tensor to a 2D tensor. Re-shapes are normally free on\n  # the GPU/CPU but may not be free on the TPU, so we want to minimize them to\n  # help the optimizer.\n  prev_output = reshape_to_matrix(input_tensor)\n\n  all_layer_outputs = []\n  for layer_idx in range(num_hidden_layers):\n    if share_parameter_across_layers:\n        name_variable_scope=\"layer_shared\"\n    else:\n        name_variable_scope=\"layer_%d\" % layer_idx\n    # share all parameters across layers. add by brightmart, 2019-09-28. previous it is like this: \"layer_%d\" % layer_idx\n    with tf.variable_scope(name_variable_scope, reuse=True if (share_parameter_across_layers and layer_idx>0) else False):\n\n      layer_input = prev_output\n\n      with tf.variable_scope(\"attention\"):\n        attention_heads = []\n        with tf.variable_scope(\"self\"):\n          attention_head = attention_layer(\n              from_tensor=layer_input,\n              to_tensor=layer_input,\n              attention_mask=attention_mask,\n              num_attention_heads=num_attention_heads,\n              size_per_head=attention_head_size,\n              attention_probs_dropout_prob=attention_probs_dropout_prob,\n              initializer_range=initializer_range,\n              do_return_2d_tensor=True,\n              batch_size=batch_size,\n              from_seq_length=seq_length,\n              to_seq_length=seq_length)\n          attention_heads.append(attention_head)\n\n        attention_output = None\n        if len(attention_heads) == 1:\n          attention_output = attention_heads[0]\n        else:\n          # In the case where we have other sequences, we just concatenate\n          # them to the self-attention head before the projection.\n          attention_output = tf.concat(attention_heads, axis=-1)\n\n        # Run a linear projection of `hidden_size` then add a residual\n        # with `layer_input`.\n        with tf.variable_scope(\"output\"):\n          attention_output = tf.layers.dense(\n              attention_output,\n              hidden_size,\n              kernel_initializer=create_initializer(initializer_range))\n          attention_output = dropout(attention_output, hidden_dropout_prob)\n          attention_output = layer_norm(attention_output + layer_input)\n\n      # The activation is only applied to the \"intermediate\" hidden layer.\n      with tf.variable_scope(\"intermediate\"):\n        intermediate_output = tf.layers.dense(\n            attention_output,\n            intermediate_size,\n            activation=intermediate_act_fn,\n            kernel_initializer=create_initializer(initializer_range))\n\n      # Down-project back to `hidden_size` then add the residual.\n      with tf.variable_scope(\"output\"):\n        layer_output = tf.layers.dense(\n            intermediate_output,\n            hidden_size,\n            kernel_initializer=create_initializer(initializer_range))\n        layer_output = dropout(layer_output, hidden_dropout_prob)\n        layer_output = layer_norm(layer_output + attention_output)\n        prev_output = layer_output\n        all_layer_outputs.append(layer_output)\n\n  if do_return_all_layers:\n    final_outputs = []\n    for layer_output in all_layer_outputs:\n      final_output = reshape_from_matrix(layer_output, input_shape)\n      final_outputs.append(final_output)\n    return final_outputs\n  else:\n    final_output = reshape_from_matrix(prev_output, input_shape)\n    return final_output\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  \"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  \"\"\"Raises an exception if the tensor rank is not of the expected rank.\n\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n\n  Raises:\n    ValueError: If the expected shape doesn't match the actual shape.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        \"For the tensor `%s` in scope `%s`, the actual rank \"\n        \"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n\ndef prelln_transformer_model(input_tensor,\n\t\t\t\t\t\tattention_mask=None,\n\t\t\t\t\t\thidden_size=768,\n\t\t\t\t\t\tnum_hidden_layers=12,\n\t\t\t\t\t\tnum_attention_heads=12,\n\t\t\t\t\t\tintermediate_size=3072,\n\t\t\t\t\t\tintermediate_act_fn=gelu,\n\t\t\t\t\t\thidden_dropout_prob=0.1,\n\t\t\t\t\t\tattention_probs_dropout_prob=0.1,\n\t\t\t\t\t\tinitializer_range=0.02,\n\t\t\t\t\t\tdo_return_all_layers=False,\n\t\t\t\t\t\tshared_type='all', # None,\n\t\t\t\t\t\tadapter_fn=None):\n\t\"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n\n\tThis is almost an exact implementation of the original Transformer encoder.\n\n\tSee the original paper:\n\thttps://arxiv.org/abs/1706.03762\n\n\tAlso see:\n\thttps://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n\n\tArgs:\n\t\tinput_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n\t\tattention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n\t\t\tseq_length], with 1 for positions that can be attended to and 0 in\n\t\t\tpositions that should not be.\n\t\thidden_size: int. Hidden size of the Transformer.\n\t\tnum_hidden_layers: int. Number of layers (blocks) in the Transformer.\n\t\tnum_attention_heads: int. Number of attention heads in the Transformer.\n\t\tintermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n\t\t\tforward) layer.\n\t\tintermediate_act_fn: function. The non-linear activation function to apply\n\t\t\tto the output of the intermediate/feed-forward layer.\n\t\thidden_dropout_prob: float. Dropout probability for the hidden layers.\n\t\tattention_probs_dropout_prob: float. Dropout probability of the attention\n\t\t\tprobabilities.\n\t\tinitializer_range: float. Range of the initializer (stddev of truncated\n\t\t\tnormal).\n\t\tdo_return_all_layers: Whether to also return all layers or just the final\n\t\t\tlayer.\n\n\tReturns:\n\t\tfloat Tensor of shape [batch_size, seq_length, hidden_size], the final\n\t\thidden layer of the Transformer.\n\n\tRaises:\n\t\tValueError: A Tensor shape or parameter is invalid.\n\t\"\"\"\n\tif hidden_size % num_attention_heads != 0:\n\t\traise ValueError(\n\t\t\t\t\"The hidden size (%d) is not a multiple of the number of attention \"\n\t\t\t\t\"heads (%d)\" % (hidden_size, num_attention_heads))\n\n\tattention_head_size = int(hidden_size / num_attention_heads)\n\n\tinput_shape = bert_utils.get_shape_list(input_tensor, expected_rank=3)\n\tbatch_size = input_shape[0]\n\tseq_length = input_shape[1]\n\tinput_width = input_shape[2]\n\n\t# The Transformer performs sum residuals on all layers so the input needs\n\t# to be the same as the hidden size.\n\tif input_width != hidden_size:\n\t\traise ValueError(\"The width of the input tensor (%d) != hidden size (%d)\" %\n\t\t\t\t\t\t\t\t\t\t (input_width, hidden_size))\n\n\t# We keep the representation as a 2D tensor to avoid re-shaping it back and\n\t# forth from a 3D tensor to a 2D tensor. Re-shapes are normally free on\n\t# the GPU/CPU but may not be free on the TPU, so we want to minimize them to\n\t# help the optimizer.\n\tprev_output = bert_utils.reshape_to_matrix(input_tensor)\n\n\tall_layer_outputs = []\n\n\tdef layer_scope(idx, shared_type):\n\t\tif shared_type == 'all':\n\t\t\ttmp = {\n\t\t\t\t\"layer\":\"layer_shared\",\n\t\t\t\t'attention':'attention',\n\t\t\t\t'intermediate':'intermediate',\n\t\t\t\t'output':'output'\n\t\t\t}\n\t\telif shared_type == 'attention':\n\t\t\ttmp = {\n\t\t\t\t\"layer\":\"layer_shared\",\n\t\t\t\t'attention':'attention',\n\t\t\t\t'intermediate':'intermediate_{}'.format(idx),\n\t\t\t\t'output':'output_{}'.format(idx)\n\t\t\t}\n\t\telif shared_type == 'ffn':\n\t\t\ttmp = {\n\t\t\t\t\"layer\":\"layer_shared\",\n\t\t\t\t'attention':'attention_{}'.format(idx),\n\t\t\t\t'intermediate':'intermediate',\n\t\t\t\t'output':'output'\n\t\t\t}\n\t\telse:\n\t\t\ttmp = {\n\t\t\t\t\"layer\":\"layer_{}\".format(idx),\n\t\t\t\t'attention':'attention',\n\t\t\t\t'intermediate':'intermediate',\n\t\t\t\t'output':'output'\n\t\t\t}\n\n\t\treturn tmp\n\n\tall_layer_outputs = []\n\n\tfor layer_idx in range(num_hidden_layers):\n\n\t\tidx_scope = layer_scope(layer_idx, shared_type)\n\n\t\twith tf.variable_scope(idx_scope['layer'], reuse=tf.AUTO_REUSE):\n\t\t\tlayer_input = prev_output\n\n\t\t\twith tf.variable_scope(idx_scope['attention'], reuse=tf.AUTO_REUSE):\n\t\t\t\tattention_heads = []\n\n\t\t\t\twith tf.variable_scope(\"output\", reuse=tf.AUTO_REUSE):\n\t\t\t\t\tlayer_input_pre = layer_norm(layer_input)\n\n\t\t\t\twith tf.variable_scope(\"self\"):\n\t\t\t\t\tattention_head = attention_layer(\n\t\t\t\t\t\t\tfrom_tensor=layer_input_pre,\n\t\t\t\t\t\t\tto_tensor=layer_input_pre,\n\t\t\t\t\t\t\tattention_mask=attention_mask,\n\t\t\t\t\t\t\tnum_attention_heads=num_attention_heads,\n\t\t\t\t\t\t\tsize_per_head=attention_head_size,\n\t\t\t\t\t\t\tattention_probs_dropout_prob=attention_probs_dropout_prob,\n\t\t\t\t\t\t\tinitializer_range=initializer_range,\n\t\t\t\t\t\t\tdo_return_2d_tensor=True,\n\t\t\t\t\t\t\tbatch_size=batch_size,\n\t\t\t\t\t\t\tfrom_seq_length=seq_length,\n\t\t\t\t\t\t\tto_seq_length=seq_length)\n\t\t\t\t\tattention_heads.append(attention_head)\n\n\t\t\t\tattention_output = None\n\t\t\t\tif len(attention_heads) == 1:\n\t\t\t\t\tattention_output = attention_heads[0]\n\t\t\t\telse:\n\t\t\t\t\t# In the case where we have other sequences, we just concatenate\n\t\t\t\t\t# them to the self-attention head before the projection.\n\t\t\t\t\tattention_output = tf.concat(attention_heads, axis=-1)\n\n\t\t\t\t# Run a linear projection of `hidden_size` then add a residual\n\t\t\t\t# with `layer_input`.\n\t\t\t\twith tf.variable_scope(\"output\", reuse=tf.AUTO_REUSE):\n\t\t\t\t\tattention_output = tf.layers.dense(\n\t\t\t\t\t\t\tattention_output,\n\t\t\t\t\t\t\thidden_size,\n\t\t\t\t\t\t\tkernel_initializer=create_initializer(initializer_range))\n\t\t\t\t\tattention_output = dropout(attention_output, hidden_dropout_prob)\n\n\t\t\t\t\t# attention_output = layer_norm(attention_output + layer_input)\n\t\t\t\t\tattention_output = attention_output + layer_input\n\n\t\t\twith tf.variable_scope(idx_scope['output'], reuse=tf.AUTO_REUSE):\n\t\t\t\tattention_output_pre = layer_norm(attention_output)\n\n\t\t\t# The activation is only applied to the \"intermediate\" hidden layer.\n\t\t\twith tf.variable_scope(idx_scope['intermediate'], reuse=tf.AUTO_REUSE):\n\t\t\t\tintermediate_output = tf.layers.dense(\n\t\t\t\t\t\tattention_output_pre,\n\t\t\t\t\t\tintermediate_size,\n\t\t\t\t\t\tactivation=intermediate_act_fn,\n\t\t\t\t\t\tkernel_initializer=create_initializer(initializer_range))\n\n\t\t\t# Down-project back to `hidden_size` then add the residual.\n\t\t\twith tf.variable_scope(idx_scope['output'], reuse=tf.AUTO_REUSE):\n\t\t\t\tlayer_output = tf.layers.dense(\n\t\t\t\t\t\tintermediate_output,\n\t\t\t\t\t\thidden_size,\n\t\t\t\t\t\tkernel_initializer=create_initializer(initializer_range))\n\t\t\t\tlayer_output = dropout(layer_output, hidden_dropout_prob)\n\n\t\t\t\t# layer_output = layer_norm(layer_output + attention_output)\n\t\t\t\tlayer_output = layer_output + attention_output\n\t\t\t\tprev_output = layer_output\n\t\t\t\tall_layer_outputs.append(layer_output)\n\n\tif do_return_all_layers:\n\t\tfinal_outputs = []\n\t\tfor layer_output in all_layer_outputs:\n\t\t\tfinal_output = bert_utils.reshape_from_matrix(layer_output, input_shape)\n\t\t\tfinal_outputs.append(final_output)\n\t\treturn final_outputs\n\telse:\n\t\tfinal_output = bert_utils.reshape_from_matrix(prev_output, input_shape)\n\t\treturn final_output\n"
        },
        {
          "name": "modeling_google.py",
          "type": "blob",
          "size": 42.0029296875,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"The main ALBERT model and related functions.\nFor a description of the algorithm, see https://arxiv.org/abs/1909.11942.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six\nfrom six.moves import range\nimport tensorflow as tf\n\n\nclass AlbertConfig(object):\n  \"\"\"Configuration for `AlbertModel`.\n  The default settings match the configuration of model `albert_xxlarge`.\n  \"\"\"\n\n  def __init__(self,\n               vocab_size,\n               embedding_size=128,\n               hidden_size=4096,\n               num_hidden_layers=12,\n               num_hidden_groups=1,\n               num_attention_heads=64,\n               intermediate_size=16384,\n               inner_group_num=1,\n               down_scale_factor=1,\n               hidden_act=\"gelu\",\n               hidden_dropout_prob=0,\n               attention_probs_dropout_prob=0,\n               max_position_embeddings=512,\n               type_vocab_size=2,\n               initializer_range=0.02):\n    \"\"\"Constructs AlbertConfig.\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `AlbertModel`.\n      embedding_size: size of voc embeddings.\n      hidden_size: Size of the encoder layers and the pooler layer.\n      num_hidden_layers: Number of hidden layers in the Transformer encoder.\n      num_hidden_groups: Number of group for the hidden layers, parameters in\n        the same group are shared.\n      num_attention_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n        layer in the Transformer encoder.\n      inner_group_num: int, number of inner repetition of attention and ffn.\n      down_scale_factor: float, the scale to apply\n      hidden_act: The non-linear activation function (function or string) in the\n        encoder and pooler.\n      hidden_dropout_prob: The dropout probability for all fully connected\n        layers in the embeddings, encoder, and pooler.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      max_position_embeddings: The maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `AlbertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    \"\"\"\n    self.vocab_size = vocab_size\n    self.embedding_size = embedding_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_hidden_groups = num_hidden_groups\n    self.num_attention_heads = num_attention_heads\n    self.inner_group_num = inner_group_num\n    self.down_scale_factor = down_scale_factor\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    \"\"\"Constructs a `AlbertConfig` from a Python dictionary of parameters.\"\"\"\n    config = AlbertConfig(vocab_size=None)\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    \"\"\"Constructs a `AlbertConfig` from a json file of parameters.\"\"\"\n    with tf.gfile.GFile(json_file, \"r\") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    \"\"\"Serializes this instance to a Python dictionary.\"\"\"\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    \"\"\"Serializes this instance to a JSON string.\"\"\"\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + \"\\n\"\n\n\nclass AlbertModel(object):\n  \"\"\"BERT model (\"Bidirectional Encoder Representations from Transformers\").\n  Example usage:\n  ```python\n  # Already been converted from strings into ids\n  input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n  input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n  token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n  config = modeling.AlbertConfig(vocab_size=32000, hidden_size=512,\n    num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n  model = modeling.AlbertModel(config=config, is_training=True,\n    input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n  label_embeddings = tf.get_variable(...)\n  pooled_output = model.get_pooled_output()\n  logits = tf.matmul(pooled_output, label_embeddings)\n  ...\n  ```\n  \"\"\"\n\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               scope=None):\n    \"\"\"Constructor for AlbertModel.\n    Args:\n      config: `AlbertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      scope: (optional) variable scope. Defaults to \"bert\".\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes\n        is invalid.\n    \"\"\"\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=\"bert\"):\n      with tf.variable_scope(\"embeddings\"):\n        # Perform embedding lookup on the word ids.\n        (self.word_embedding_output,\n         self.output_embedding_table) = embedding_lookup(\n            input_ids=input_ids,\n            vocab_size=config.vocab_size,\n            embedding_size=config.embedding_size,\n            initializer_range=config.initializer_range,\n            word_embedding_name=\"word_embeddings\",\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(\n            input_tensor=self.word_embedding_output,\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=\"token_type_embeddings\",\n            use_position_embeddings=True,\n            position_embedding_name=\"position_embeddings\",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob)\n\n      with tf.variable_scope(\"encoder\"):\n\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n        self.all_encoder_layers = transformer_model(\n            input_tensor=self.embedding_output,\n            attention_mask=input_mask,\n            hidden_size=config.hidden_size,\n            num_hidden_layers=config.num_hidden_layers,\n            num_hidden_groups=config.num_hidden_groups,\n            num_attention_heads=config.num_attention_heads,\n            intermediate_size=config.intermediate_size,\n            inner_group_num=config.inner_group_num,\n            intermediate_act_fn=get_activation(config.hidden_act),\n            hidden_dropout_prob=config.hidden_dropout_prob,\n            attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n            initializer_range=config.initializer_range,\n            do_return_all_layers=True)\n\n      self.sequence_output = self.all_encoder_layers[-1]\n      # The \"pooler\" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(\"pooler\"):\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    \"\"\"Gets final hidden layer of encoder.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"\n    return self.sequence_output\n\n  def get_all_encoder_layers(self):\n    return self.all_encoder_layers\n\n  def get_word_embedding_output(self):\n    \"\"\"Get output of the word(piece) embedding lookup.\n    This is BEFORE positional embeddings and token type embeddings have been\n    added.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the word(piece) embedding layer.\n    \"\"\"\n    return self.word_embedding_output\n\n  def get_embedding_output(self):\n    \"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    \"\"\"\n    return self.embedding_output\n\n  def get_embedding_table(self):\n    return self.output_embedding_table\n\n\ndef gelu(x):\n  \"\"\"Gaussian Error Linear Unit.\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"\n  cdf = 0.5 * (1.0 + tf.tanh(\n      (np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3)))))\n  return x * cdf\n\n\ndef get_activation(activation_string):\n  \"\"\"Maps a string to a Python function, e.g., \"relu\" => `tf.nn.relu`.\n  Args:\n    activation_string: String name of the activation function.\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or \"linear\", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  \"\"\"\n\n  # We assume that anything that\"s not a string is already an activation\n  # function, so we just return it.\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh\n  else:\n    raise ValueError(\"Unsupported activation: %s\" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint, num_of_group=0):\n  \"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(\"^(.*):\\\\d+$\", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var\n  init_vars = tf.train.list_variables(init_checkpoint)\n  init_vars_name = [name for (name, _) in init_vars]\n\n  if num_of_group > 0:\n    assignment_map = []\n    for gid in range(num_of_group):\n      assignment_map.append(collections.OrderedDict())\n  else:\n    assignment_map = collections.OrderedDict()\n\n  for name in name_to_variable:\n    if name in init_vars_name:\n      tvar_name = name\n    elif (re.sub(r\"/group_\\d+/\", \"/group_0/\",\n                 six.ensure_str(name)) in init_vars_name and\n          num_of_group > 1):\n      tvar_name = re.sub(r\"/group_\\d+/\", \"/group_0/\", six.ensure_str(name))\n    elif (re.sub(r\"/ffn_\\d+/\", \"/ffn_1/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"/ffn_\\d+/\", \"/ffn_1/\", six.ensure_str(name))\n    elif (re.sub(r\"/attention_\\d+/\", \"/attention_1/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"/attention_\\d+/\", \"/attention_1/\",\n                         six.ensure_str(name))\n    else:\n      tf.logging.info(\"name %s does not get matched\", name)\n      continue\n    tf.logging.info(\"name %s match to %s\", name, tvar_name)\n    if num_of_group > 0:\n      group_matched = False\n      for gid in range(1, num_of_group):\n        if ((\"/group_\" + str(gid) + \"/\" in name) or\n            (\"/ffn_\" + str(gid) + \"/\" in name) or\n            (\"/attention_\" + str(gid) + \"/\" in name)):\n          group_matched = True\n          tf.logging.info(\"%s belongs to %dth\", name, gid)\n          assignment_map[gid][tvar_name] = name\n      if not group_matched:\n        assignment_map[0][tvar_name] = name\n    else:\n      assignment_map[tvar_name] = name\n    initialized_variable_names[name] = 1\n    initialized_variable_names[six.ensure_str(name) + \":0\"] = 1\n\n  return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n  \"\"\"Perform dropout.\n  Args:\n    input_tensor: float Tensor.\n    dropout_prob: Python float. The probability of dropping out a value (NOT of\n      *keeping* a dimension as in `tf.nn.dropout`).\n  Returns:\n    A version of `input_tensor` with dropout applied.\n  \"\"\"\n  if dropout_prob is None or dropout_prob == 0.0:\n    return input_tensor\n\n  output = tf.nn.dropout(input_tensor, rate=dropout_prob)\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  \"\"\"Runs layer normalization followed by dropout.\"\"\"\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  \"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef get_timing_signal_1d_given_position(channels,\n                                        position,\n                                        min_timescale=1.0,\n                                        max_timescale=1.0e4):\n  \"\"\"Get sinusoids of diff frequencies, with timing position given.\n  Adapted from add_timing_signal_1d_given_position in\n  //third_party/py/tensor2tensor/layers/common_attention.py\n  Args:\n    channels: scalar, size of timing embeddings to create. The number of\n        different timescales is equal to channels / 2.\n    position: a Tensor with shape [batch, seq_len]\n    min_timescale: a float\n    max_timescale: a float\n  Returns:\n    a Tensor of timing signals [batch, seq_len, channels]\n  \"\"\"\n  num_timescales = channels // 2\n  log_timescale_increment = (\n      math.log(float(max_timescale) / float(min_timescale)) /\n      (tf.to_float(num_timescales) - 1))\n  inv_timescales = min_timescale * tf.exp(\n      tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)\n  scaled_time = (\n      tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(\n          tf.expand_dims(inv_timescales, 0), 0))\n  signal = tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)\n  signal = tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])\n  return signal\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n  \"\"\"Looks up words embeddings for id tensor.\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.nn.embedding_lookup()`.\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  \"\"\"\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #\n  # If the input is a 2D tensor of shape [batch_size, seq_length], we\n  # reshape to [batch_size, seq_length, 1].\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n  embedding_table = tf.get_variable(\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n\n  if use_one_hot_embeddings:\n    flat_input_ids = tf.reshape(input_ids, [-1])\n    one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size)\n    output = tf.matmul(one_hot_input_ids, embedding_table)\n  else:\n    output = tf.nn.embedding_lookup(embedding_table, input_ids)\n\n  input_shape = get_shape_list(input_ids)\n\n  output = tf.reshape(output,\n                      input_shape[0:-1] + [input_shape[-1] * embedding_size])\n  return (output, embedding_table)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=\"token_type_embeddings\",\n                            use_position_embeddings=True,\n                            position_embedding_name=\"position_embeddings\",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n  \"\"\"Performs various post-processing on a word embedding tensor.\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n  Returns:\n    float tensor with same shape as `input_tensor`.\n  Raises:\n    ValueError: One of the tensor shapes or input values is invalid.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(\"`token_type_ids` must be specified if\"\n                       \"`use_token_type` is True.\")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary.\n    flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n    one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n    token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n    token_type_embeddings = tf.reshape(token_type_embeddings,\n                                       [batch_size, seq_length, width])\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n\ndef dense_layer_3d(input_tensor,\n                   num_attention_heads,\n                   head_size,\n                   initializer,\n                   activation,\n                   name=None):\n  \"\"\"A dense layer with 3D kernel.\n  Args:\n    input_tensor: float Tensor of shape [batch, seq_length, hidden_size].\n    num_attention_heads: Number of attention heads.\n    head_size: The size per attention head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[hidden_size, num_attention_heads * head_size],\n        initializer=initializer)\n    w = tf.reshape(w, [hidden_size, num_attention_heads, head_size])\n    b = tf.get_variable(\n        name=\"bias\",\n        shape=[num_attention_heads * head_size],\n        initializer=tf.zeros_initializer)\n    b = tf.reshape(b, [num_attention_heads, head_size])\n    ret = tf.einsum(\"BFH,HND->BFND\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dense_layer_3d_proj(input_tensor,\n                        hidden_size,\n                        head_size,\n                        initializer,\n                        activation,\n                        name=None):\n  \"\"\"A dense layer with 3D kernel for projection.\n  Args:\n    input_tensor: float Tensor of shape [batch,from_seq_length,\n      num_attention_heads, size_per_head].\n    hidden_size: The size of hidden layer.\n    num_attention_heads: The size of output dimension.\n    head_size: The size of head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor)\n  num_attention_heads= input_shape[2]\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[num_attention_heads * head_size, hidden_size],\n        initializer=initializer)\n    w = tf.reshape(w, [num_attention_heads, head_size, hidden_size])\n    b = tf.get_variable(\n        name=\"bias\", shape=[hidden_size], initializer=tf.zeros_initializer)\n    ret = tf.einsum(\"BFND,NDH->BFH\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dense_layer_2d(input_tensor,\n                   output_size,\n                   initializer,\n                   activation,\n                   num_attention_heads=1,\n                   name=None):\n  \"\"\"A dense layer with 2D kernel.\n  Args:\n    input_tensor: Float tensor with rank 3.\n    output_size: The size of output dimension.\n    initializer: Kernel initializer.\n    activation: Activation function.\n    num_attention_heads: number of attention head in attention layer.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  del num_attention_heads  # unused\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[hidden_size, output_size],\n        initializer=initializer)\n    b = tf.get_variable(\n        name=\"bias\", shape=[output_size], initializer=tf.zeros_initializer)\n    ret = tf.einsum(\"BFH,HO->BFO\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dot_product_attention(q, k, v, bias, dropout_rate=0.0):\n  \"\"\"Dot-product attention.\n  Args:\n    q: Tensor with shape [..., length_q, depth_k].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    bias: bias Tensor (see attention_bias())\n    dropout_rate: a float.\n  Returns:\n    Tensor with shape [..., length_q, depth_v].\n  \"\"\"\n  logits = tf.matmul(q, k, transpose_b=True)  # [..., length_q, length_kv]\n  logits = tf.multiply(logits, 1.0 / math.sqrt(float(get_shape_list(q)[-1])))\n  if bias is not None:\n    # `attention_mask` = [B, T]\n    from_shape = get_shape_list(q)\n    if len(from_shape) == 4:\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], 1], tf.float32)\n    elif len(from_shape) == 5:\n      # from_shape = [B, N, Block_num, block_size, depth]#\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], from_shape[3],\n                                1], tf.float32)\n\n    bias = tf.matmul(broadcast_ones,\n                     tf.cast(bias, tf.float32), transpose_b=True)\n\n    # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n    # masked positions, this operation will create a tensor which is 0.0 for\n    # positions we want to attend and -10000.0 for masked positions.\n    adder = (1.0 - bias) * -10000.0\n\n    # Since we are adding it to the raw scores before the softmax, this is\n    # effectively the same as removing these entirely.\n    logits += adder\n  else:\n    adder = 0.0\n\n  attention_probs = tf.nn.softmax(logits, name=\"attention_probs\")\n  attention_probs = dropout(attention_probs, dropout_rate)\n  return tf.matmul(attention_probs, v)\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None):\n  \"\"\"Performs multi-headed attention from `from_tensor` to `to_tensor`.\n  Args:\n    from_tensor: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    query_act: (optional) Activation function for the query transform.\n    key_act: (optional) Activation function for the key transform.\n    value_act: (optional) Activation function for the value transform.\n    attention_probs_dropout_prob: (optional) float. Dropout probability of the\n      attention probabilities.\n    initializer_range: float. Range of the weight initializer.\n    batch_size: (Optional) int. If the input is 2D, this might be the batch size\n      of the 3D version of the `from_tensor` and `to_tensor`.\n    from_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `from_tensor`.\n    to_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `to_tensor`.\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length, num_attention_heads,\n      size_per_head].\n  Raises:\n    ValueError: Any of the arguments or tensor shapes are invalid.\n  \"\"\"\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n  size_per_head = int(from_shape[2]/num_attention_heads)\n\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        \"The rank of `from_tensor` must match the rank of `to_tensor`.\")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          \"When passing in rank 2 tensors to attention_layer, the values \"\n          \"for `batch_size`, `from_seq_length`, and `to_seq_length` \"\n          \"must all be specified.\")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n\n  # `query_layer` = [B, F, N, H]\n  q = dense_layer_3d(from_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), query_act, \"query\")\n\n  # `key_layer` = [B, T, N, H]\n  k = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), key_act, \"key\")\n  # `value_layer` = [B, T, N, H]\n  v = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), value_act, \"value\")\n  q = tf.transpose(q, [0, 2, 1, 3])\n  k = tf.transpose(k, [0, 2, 1, 3])\n  v = tf.transpose(v, [0, 2, 1, 3])\n  if attention_mask is not None:\n    attention_mask = tf.reshape(\n        attention_mask, [batch_size, 1, to_seq_length, 1])\n    # 'new_embeddings = [B, N, F, H]'\n  new_embeddings = dot_product_attention(q, k, v, attention_mask,\n                                         attention_probs_dropout_prob)\n\n  return tf.transpose(new_embeddings, [0, 2, 1, 3])\n\n\ndef attention_ffn_block(layer_input,\n                        hidden_size=768,\n                        attention_mask=None,\n                        num_attention_heads=1,\n                        attention_head_size=64,\n                        attention_probs_dropout_prob=0.0,\n                        intermediate_size=3072,\n                        intermediate_act_fn=None,\n                        initializer_range=0.02,\n                        hidden_dropout_prob=0.0):\n  \"\"\"A network with attention-ffn as sub-block.\n  Args:\n    layer_input: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    hidden_size: (optional) int, size of hidden layer.\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    attention_head_size: int. Size of attention head.\n    attention_probs_dropout_prob: float. dropout probability for attention_layer\n    intermediate_size: int. Size of intermediate hidden layer.\n    intermediate_act_fn: (optional) Activation function for the intermediate\n      layer.\n    initializer_range: float. Range of the weight initializer.\n    hidden_dropout_prob: (optional) float. Dropout probability of the hidden\n      layer.\n  Returns:\n    layer output\n  \"\"\"\n\n  with tf.variable_scope(\"attention_1\"):\n    with tf.variable_scope(\"self\"):\n      attention_output = attention_layer(\n          from_tensor=layer_input,\n          to_tensor=layer_input,\n          attention_mask=attention_mask,\n          num_attention_heads=num_attention_heads,\n          attention_probs_dropout_prob=attention_probs_dropout_prob,\n          initializer_range=initializer_range)\n\n    # Run a linear projection of `hidden_size` then add a residual\n    # with `layer_input`.\n    with tf.variable_scope(\"output\"):\n      attention_output = dense_layer_3d_proj(\n          attention_output,\n          hidden_size,\n          attention_head_size,\n          create_initializer(initializer_range),\n          None,\n          name=\"dense\")\n      attention_output = dropout(attention_output, hidden_dropout_prob)\n  attention_output = layer_norm(attention_output + layer_input)\n  with tf.variable_scope(\"ffn_1\"):\n    with tf.variable_scope(\"intermediate\"):\n      intermediate_output = dense_layer_2d(\n          attention_output,\n          intermediate_size,\n          create_initializer(initializer_range),\n          intermediate_act_fn,\n          num_attention_heads=num_attention_heads,\n          name=\"dense\")\n      with tf.variable_scope(\"output\"):\n        ffn_output = dense_layer_2d(\n            intermediate_output,\n            hidden_size,\n            create_initializer(initializer_range),\n            None,\n            num_attention_heads=num_attention_heads,\n            name=\"dense\")\n      ffn_output = dropout(ffn_output, hidden_dropout_prob)\n  ffn_output = layer_norm(ffn_output + attention_output)\n  return ffn_output\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_hidden_groups=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      inner_group_num=1,\n                      intermediate_act_fn=\"gelu\",\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False):\n  \"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n  This is almost an exact implementation of the original Transformer encoder.\n  See the original paper:\n  https://arxiv.org/abs/1706.03762\n  Also see:\n  https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n      seq_length], with 1 for positions that can be attended to and 0 in\n      positions that should not be.\n    hidden_size: int. Hidden size of the Transformer.\n    num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n    num_hidden_groups: int. Number of group for the hidden layers, parameters\n      in the same group are shared.\n    num_attention_heads: int. Number of attention heads in the Transformer.\n    intermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n      forward) layer.\n    inner_group_num: int, number of inner repetition of attention and ffn.\n    intermediate_act_fn: function. The non-linear activation function to apply\n      to the output of the intermediate/feed-forward layer.\n    hidden_dropout_prob: float. Dropout probability for the hidden layers.\n    attention_probs_dropout_prob: float. Dropout probability of the attention\n      probabilities.\n    initializer_range: float. Range of the initializer (stddev of truncated\n      normal).\n    do_return_all_layers: Whether to also return all layers or just the final\n      layer.\n  Returns:\n    float Tensor of shape [batch_size, seq_length, hidden_size], the final\n    hidden layer of the Transformer.\n  Raises:\n    ValueError: A Tensor shape or parameter is invalid.\n  \"\"\"\n  if hidden_size % num_attention_heads != 0:\n    raise ValueError(\n        \"The hidden size (%d) is not a multiple of the number of attention \"\n        \"heads (%d)\" % (hidden_size, num_attention_heads))\n\n  attention_head_size = hidden_size // num_attention_heads\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  input_width = input_shape[2]\n\n  all_layer_outputs = []\n  if input_width != hidden_size:\n    prev_output = dense_layer_2d(\n        input_tensor, hidden_size, create_initializer(initializer_range),\n        None, name=\"embedding_hidden_mapping_in\")\n  else:\n    prev_output = input_tensor\n  with tf.variable_scope(\"transformer\", reuse=tf.AUTO_REUSE):\n    for layer_idx in range(num_hidden_layers):\n      group_idx = int(layer_idx / num_hidden_layers * num_hidden_groups)\n      with tf.variable_scope(\"group_%d\" % group_idx):\n        with tf.name_scope(\"layer_%d\" % layer_idx):\n          layer_output = prev_output\n          for inner_group_idx in range(inner_group_num):\n            with tf.variable_scope(\"inner_group_%d\" % inner_group_idx):\n              layer_output = attention_ffn_block(\n                  layer_output, hidden_size, attention_mask,\n                  num_attention_heads, attention_head_size,\n                  attention_probs_dropout_prob, intermediate_size,\n                  intermediate_act_fn, initializer_range, hidden_dropout_prob)\n              prev_output = layer_output\n              all_layer_outputs.append(layer_output)\n  if do_return_all_layers:\n    return all_layer_outputs\n  else:\n    return all_layer_outputs[-1]\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  \"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  \"\"\"Raises an exception if the tensor rank is not of the expected rank.\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n  Raises:\n    ValueError: If the expected shape doesn't match the actual shape.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        \"For the tensor `%s` in scope `%s`, the actual rank \"\n        \"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))"
        },
        {
          "name": "modeling_google_fast.py",
          "type": "blob",
          "size": 46.193359375,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"The main ALBERT model and related functions.\nFor a description of the algorithm, see https://arxiv.org/abs/1909.11942.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport copy\nimport json\nimport math\nimport re\nimport numpy as np\nimport six\nfrom six.moves import range\nimport tensorflow as tf\n\n\nclass AlbertConfig(object):\n  \"\"\"Configuration for `AlbertModel`.\n  The default settings match the configuration of model `albert_xxlarge`.\n  \"\"\"\n\n  def __init__(self,\n               vocab_size,\n               embedding_size=128,\n               hidden_size=4096,\n               num_hidden_layers=12,\n               num_hidden_groups=1,\n               num_attention_heads=64,\n               intermediate_size=16384,\n               inner_group_num=1,\n               down_scale_factor=1,\n               hidden_act=\"gelu\",\n               hidden_dropout_prob=0,\n               attention_probs_dropout_prob=0,\n               max_position_embeddings=512,\n               type_vocab_size=2,\n               initializer_range=0.02):\n    \"\"\"Constructs AlbertConfig.\n    Args:\n      vocab_size: Vocabulary size of `inputs_ids` in `AlbertModel`.\n      embedding_size: size of voc embeddings.\n      hidden_size: Size of the encoder layers and the pooler layer.\n      num_hidden_layers: Number of hidden layers in the Transformer encoder.\n      num_hidden_groups: Number of group for the hidden layers, parameters in\n        the same group are shared.\n      num_attention_heads: Number of attention heads for each attention layer in\n        the Transformer encoder.\n      intermediate_size: The size of the \"intermediate\" (i.e., feed-forward)\n        layer in the Transformer encoder.\n      inner_group_num: int, number of inner repetition of attention and ffn.\n      down_scale_factor: float, the scale to apply\n      hidden_act: The non-linear activation function (function or string) in the\n        encoder and pooler.\n      hidden_dropout_prob: The dropout probability for all fully connected\n        layers in the embeddings, encoder, and pooler.\n      attention_probs_dropout_prob: The dropout ratio for the attention\n        probabilities.\n      max_position_embeddings: The maximum sequence length that this model might\n        ever be used with. Typically set this to something large just in case\n        (e.g., 512 or 1024 or 2048).\n      type_vocab_size: The vocabulary size of the `token_type_ids` passed into\n        `AlbertModel`.\n      initializer_range: The stdev of the truncated_normal_initializer for\n        initializing all weight matrices.\n    \"\"\"\n    self.vocab_size = vocab_size\n    self.embedding_size = embedding_size\n    self.hidden_size = hidden_size\n    self.num_hidden_layers = num_hidden_layers\n    self.num_hidden_groups = num_hidden_groups\n    self.num_attention_heads = num_attention_heads\n    self.inner_group_num = inner_group_num\n    self.down_scale_factor = down_scale_factor\n    self.hidden_act = hidden_act\n    self.intermediate_size = intermediate_size\n    self.hidden_dropout_prob = hidden_dropout_prob\n    self.attention_probs_dropout_prob = attention_probs_dropout_prob\n    self.max_position_embeddings = max_position_embeddings\n    self.type_vocab_size = type_vocab_size\n    self.initializer_range = initializer_range\n\n  @classmethod\n  def from_dict(cls, json_object):\n    \"\"\"Constructs a `AlbertConfig` from a Python dictionary of parameters.\"\"\"\n    config = AlbertConfig(vocab_size=None)\n    for (key, value) in six.iteritems(json_object):\n      config.__dict__[key] = value\n    return config\n\n  @classmethod\n  def from_json_file(cls, json_file):\n    \"\"\"Constructs a `AlbertConfig` from a json file of parameters.\"\"\"\n    with tf.gfile.GFile(json_file, \"r\") as reader:\n      text = reader.read()\n    return cls.from_dict(json.loads(text))\n\n  def to_dict(self):\n    \"\"\"Serializes this instance to a Python dictionary.\"\"\"\n    output = copy.deepcopy(self.__dict__)\n    return output\n\n  def to_json_string(self):\n    \"\"\"Serializes this instance to a JSON string.\"\"\"\n    return json.dumps(self.to_dict(), indent=2, sort_keys=True) + \"\\n\"\n\n\nclass AlbertModel(object):\n  \"\"\"BERT model (\"Bidirectional Encoder Representations from Transformers\").\n  Example usage:\n  ```python\n  # Already been converted from strings into ids\n  input_ids = tf.constant([[31, 51, 99], [15, 5, 0]])\n  input_mask = tf.constant([[1, 1, 1], [1, 1, 0]])\n  token_type_ids = tf.constant([[0, 0, 1], [0, 2, 0]])\n  config = modeling.AlbertConfig(vocab_size=32000, hidden_size=512,\n    num_hidden_layers=8, num_attention_heads=6, intermediate_size=1024)\n  model = modeling.AlbertModel(config=config, is_training=True,\n    input_ids=input_ids, input_mask=input_mask, token_type_ids=token_type_ids)\n  label_embeddings = tf.get_variable(...)\n  pooled_output = model.get_pooled_output()\n  logits = tf.matmul(pooled_output, label_embeddings)\n  ...\n  ```\n  \"\"\"\n\n  def __init__(self,\n               config,\n               is_training,\n               input_ids,\n               input_mask=None,\n               token_type_ids=None,\n               use_one_hot_embeddings=False,\n               scope=None):\n    \"\"\"Constructor for AlbertModel.\n    Args:\n      config: `AlbertConfig` instance.\n      is_training: bool. true for training model, false for eval model. Controls\n        whether dropout will be applied.\n      input_ids: int32 Tensor of shape [batch_size, seq_length].\n      input_mask: (optional) int32 Tensor of shape [batch_size, seq_length].\n      token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      use_one_hot_embeddings: (optional) bool. Whether to use one-hot word\n        embeddings or tf.embedding_lookup() for the word embeddings.\n      scope: (optional) variable scope. Defaults to \"bert\".\n    Raises:\n      ValueError: The config is invalid or one of the input tensor shapes\n        is invalid.\n    \"\"\"\n    config = copy.deepcopy(config)\n    if not is_training:\n      config.hidden_dropout_prob = 0.0\n      config.attention_probs_dropout_prob = 0.0\n\n    input_shape = get_shape_list(input_ids, expected_rank=2)\n    batch_size = input_shape[0]\n    seq_length = input_shape[1]\n\n    if input_mask is None:\n      input_mask = tf.ones(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    if token_type_ids is None:\n      token_type_ids = tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)\n\n    with tf.variable_scope(scope, default_name=\"bert\"):\n      with tf.variable_scope(\"embeddings\"):\n        # Perform embedding lookup on the word ids.\n        (self.word_embedding_output,\n         self.output_embedding_table) = embedding_lookup(\n            input_ids=input_ids,\n            vocab_size=config.vocab_size,\n            embedding_size=config.embedding_size,\n            initializer_range=config.initializer_range,\n            word_embedding_name=\"word_embeddings\",\n            use_one_hot_embeddings=use_one_hot_embeddings)\n\n        # Add positional embeddings and token type embeddings, then layer\n        # normalize and perform dropout.\n        self.embedding_output = embedding_postprocessor(\n            input_tensor=self.word_embedding_output,\n            use_token_type=True,\n            token_type_ids=token_type_ids,\n            token_type_vocab_size=config.type_vocab_size,\n            token_type_embedding_name=\"token_type_embeddings\",\n            use_position_embeddings=True,\n            position_embedding_name=\"position_embeddings\",\n            initializer_range=config.initializer_range,\n            max_position_embeddings=config.max_position_embeddings,\n            dropout_prob=config.hidden_dropout_prob)\n\n      with tf.variable_scope(\"encoder\"):\n\n        # Run the stacked transformer.\n        # `sequence_output` shape = [batch_size, seq_length, hidden_size].\n        self.all_encoder_layers = transformer_model(\n            input_tensor=self.embedding_output,\n            attention_mask=input_mask,\n            hidden_size=config.hidden_size,\n            num_hidden_layers=config.num_hidden_layers,\n            num_hidden_groups=config.num_hidden_groups,\n            num_attention_heads=config.num_attention_heads,\n            intermediate_size=config.intermediate_size,\n            inner_group_num=config.inner_group_num,\n            intermediate_act_fn=get_activation(config.hidden_act),\n            hidden_dropout_prob=config.hidden_dropout_prob,\n            attention_probs_dropout_prob=config.attention_probs_dropout_prob,\n            initializer_range=config.initializer_range,\n            do_return_all_layers=True)\n\n      self.sequence_output = self.all_encoder_layers[-1]\n      # The \"pooler\" converts the encoded sequence tensor of shape\n      # [batch_size, seq_length, hidden_size] to a tensor of shape\n      # [batch_size, hidden_size]. This is necessary for segment-level\n      # (or segment-pair-level) classification tasks where we need a fixed\n      # dimensional representation of the segment.\n      with tf.variable_scope(\"pooler\"):\n        # We \"pool\" the model by simply taking the hidden state corresponding\n        # to the first token. We assume that this has been pre-trained\n        first_token_tensor = tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)\n        self.pooled_output = tf.layers.dense(\n            first_token_tensor,\n            config.hidden_size,\n            activation=tf.tanh,\n            kernel_initializer=create_initializer(config.initializer_range))\n\n  def get_pooled_output(self):\n    return self.pooled_output\n\n  def get_sequence_output(self):\n    \"\"\"Gets final hidden layer of encoder.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the final hidden of the transformer encoder.\n    \"\"\"\n    return self.sequence_output\n\n  def get_all_encoder_layers(self):\n    return self.all_encoder_layers\n\n  def get_word_embedding_output(self):\n    \"\"\"Get output of the word(piece) embedding lookup.\n    This is BEFORE positional embeddings and token type embeddings have been\n    added.\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the word(piece) embedding layer.\n    \"\"\"\n    return self.word_embedding_output\n\n  def get_embedding_output(self):\n    \"\"\"Gets output of the embedding lookup (i.e., input to the transformer).\n    Returns:\n      float Tensor of shape [batch_size, seq_length, hidden_size] corresponding\n      to the output of the embedding layer, after summing the word\n      embeddings with the positional embeddings and the token type embeddings,\n      then performing layer normalization. This is the input to the transformer.\n    \"\"\"\n    return self.embedding_output\n\n  def get_embedding_table(self):\n    return self.output_embedding_table\n\n\ndef gelu(x):\n  \"\"\"Gaussian Error Linear Unit.\n  This is a smoother version of the RELU.\n  Original paper: https://arxiv.org/abs/1606.08415\n  Args:\n    x: float Tensor to perform activation.\n  Returns:\n    `x` with the GELU activation applied.\n  \"\"\"\n  cdf = 0.5 * (1.0 + tf.tanh(\n      (np.sqrt(2 / np.pi) * (x + 0.044715 * tf.pow(x, 3)))))\n  return x * cdf\n\n\ndef get_activation(activation_string):\n  \"\"\"Maps a string to a Python function, e.g., \"relu\" => `tf.nn.relu`.\n  Args:\n    activation_string: String name of the activation function.\n  Returns:\n    A Python function corresponding to the activation function. If\n    `activation_string` is None, empty, or \"linear\", this will return None.\n    If `activation_string` is not a string, it will return `activation_string`.\n  Raises:\n    ValueError: The `activation_string` does not correspond to a known\n      activation.\n  \"\"\"\n\n  # We assume that anything that\"s not a string is already an activation\n  # function, so we just return it.\n  if not isinstance(activation_string, six.string_types):\n    return activation_string\n\n  if not activation_string:\n    return None\n\n  act = activation_string.lower()\n  if act == \"linear\":\n    return None\n  elif act == \"relu\":\n    return tf.nn.relu\n  elif act == \"gelu\":\n    return gelu\n  elif act == \"tanh\":\n    return tf.tanh\n  elif act == \"swish\":\n    return lambda x: x * tf.sigmoid(x)\n  else:\n    raise ValueError(\"Unsupported activation: %s\" % act)\n\n\ndef get_assignment_map_from_checkpoint(tvars, init_checkpoint, num_of_group=0):\n  \"\"\"Compute the union of the current variables and checkpoint variables.\"\"\"\n  assignment_map = {}\n  initialized_variable_names = {}\n\n  name_to_variable = collections.OrderedDict()\n  for var in tvars:\n    name = var.name\n    m = re.match(\"^(.*):\\\\d+$\", name)\n    if m is not None:\n      name = m.group(1)\n    name_to_variable[name] = var\n  init_vars = tf.train.list_variables(init_checkpoint)\n  init_vars_name = [name for (name, _) in init_vars]\n\n  if num_of_group > 0:\n    assignment_map = []\n    for gid in range(num_of_group):\n      assignment_map.append(collections.OrderedDict())\n  else:\n    assignment_map = collections.OrderedDict()\n\n  for name in name_to_variable:\n    if name in init_vars_name:\n      tvar_name = name\n    elif (re.sub(r\"/group_\\d+/\", \"/group_0/\",\n                 six.ensure_str(name)) in init_vars_name and\n          num_of_group > 1):\n      tvar_name = re.sub(r\"/group_\\d+/\", \"/group_0/\", six.ensure_str(name))\n    elif (re.sub(r\"/ffn_\\d+/\", \"/ffn_1/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"/ffn_\\d+/\", \"/ffn_1/\", six.ensure_str(name))\n    elif (re.sub(r\"/attention_\\d+/\", \"/attention_1/\", six.ensure_str(name))\n          in init_vars_name and num_of_group > 1):\n      tvar_name = re.sub(r\"/attention_\\d+/\", \"/attention_1/\",\n                         six.ensure_str(name))\n    else:\n      tf.logging.info(\"name %s does not get matched\", name)\n      continue\n    tf.logging.info(\"name %s match to %s\", name, tvar_name)\n    if num_of_group > 0:\n      group_matched = False\n      for gid in range(1, num_of_group):\n        if ((\"/group_\" + str(gid) + \"/\" in name) or\n            (\"/ffn_\" + str(gid) + \"/\" in name) or\n            (\"/attention_\" + str(gid) + \"/\" in name)):\n          group_matched = True\n          tf.logging.info(\"%s belongs to %dth\", name, gid)\n          assignment_map[gid][tvar_name] = name\n      if not group_matched:\n        assignment_map[0][tvar_name] = name\n    else:\n      assignment_map[tvar_name] = name\n    initialized_variable_names[name] = 1\n    initialized_variable_names[six.ensure_str(name) + \":0\"] = 1\n\n  return (assignment_map, initialized_variable_names)\n\n\ndef dropout(input_tensor, dropout_prob):\n  \"\"\"Perform dropout.\n  Args:\n    input_tensor: float Tensor.\n    dropout_prob: Python float. The probability of dropping out a value (NOT of\n      *keeping* a dimension as in `tf.nn.dropout`).\n  Returns:\n    A version of `input_tensor` with dropout applied.\n  \"\"\"\n  if dropout_prob is None or dropout_prob == 0.0:\n    return input_tensor\n\n  output = tf.nn.dropout(input_tensor, rate=dropout_prob)\n  return output\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef layer_norm_and_dropout(input_tensor, dropout_prob, name=None):\n  \"\"\"Runs layer normalization followed by dropout.\"\"\"\n  output_tensor = layer_norm(input_tensor, name)\n  output_tensor = dropout(output_tensor, dropout_prob)\n  return output_tensor\n\n\ndef create_initializer(initializer_range=0.02):\n  \"\"\"Creates a `truncated_normal_initializer` with the given range.\"\"\"\n  return tf.truncated_normal_initializer(stddev=initializer_range)\n\n\ndef get_timing_signal_1d_given_position(channels,\n                                        position,\n                                        min_timescale=1.0,\n                                        max_timescale=1.0e4):\n  \"\"\"Get sinusoids of diff frequencies, with timing position given.\n  Adapted from add_timing_signal_1d_given_position in\n  //third_party/py/tensor2tensor/layers/common_attention.py\n  Args:\n    channels: scalar, size of timing embeddings to create. The number of\n        different timescales is equal to channels / 2.\n    position: a Tensor with shape [batch, seq_len]\n    min_timescale: a float\n    max_timescale: a float\n  Returns:\n    a Tensor of timing signals [batch, seq_len, channels]\n  \"\"\"\n  num_timescales = channels // 2\n  log_timescale_increment = (\n      math.log(float(max_timescale) / float(min_timescale)) /\n      (tf.to_float(num_timescales) - 1))\n  inv_timescales = min_timescale * tf.exp(\n      tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)\n  scaled_time = (\n      tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(\n          tf.expand_dims(inv_timescales, 0), 0))\n  signal = tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)\n  signal = tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])\n  return signal\n\n\ndef embedding_lookup(input_ids,\n                     vocab_size,\n                     embedding_size=128,\n                     initializer_range=0.02,\n                     word_embedding_name=\"word_embeddings\",\n                     use_one_hot_embeddings=False):\n  \"\"\"Looks up words embeddings for id tensor.\n  Args:\n    input_ids: int32 Tensor of shape [batch_size, seq_length] containing word\n      ids.\n    vocab_size: int. Size of the embedding vocabulary.\n    embedding_size: int. Width of the word embeddings.\n    initializer_range: float. Embedding initialization range.\n    word_embedding_name: string. Name of the embedding table.\n    use_one_hot_embeddings: bool. If True, use one-hot method for word\n      embeddings. If False, use `tf.nn.embedding_lookup()`.\n  Returns:\n    float Tensor of shape [batch_size, seq_length, embedding_size].\n  \"\"\"\n  # This function assumes that the input is of shape [batch_size, seq_length,\n  # num_inputs].\n  #\n  # If the input is a 2D tensor of shape [batch_size, seq_length], we\n  # reshape to [batch_size, seq_length, 1].\n  if input_ids.shape.ndims == 2:\n    input_ids = tf.expand_dims(input_ids, axis=[-1])\n\n  embedding_table = tf.get_variable(\n      name=word_embedding_name,\n      shape=[vocab_size, embedding_size],\n      initializer=create_initializer(initializer_range))\n\n  if use_one_hot_embeddings:\n    flat_input_ids = tf.reshape(input_ids, [-1])\n    one_hot_input_ids = tf.one_hot(flat_input_ids, depth=vocab_size)\n    output = tf.matmul(one_hot_input_ids, embedding_table)\n  else:\n    output = tf.nn.embedding_lookup(embedding_table, input_ids)\n\n  input_shape = get_shape_list(input_ids)\n\n  output = tf.reshape(output,\n                      input_shape[0:-1] + [input_shape[-1] * embedding_size])\n  return (output, embedding_table)\n\n\ndef embedding_postprocessor(input_tensor,\n                            use_token_type=False,\n                            token_type_ids=None,\n                            token_type_vocab_size=16,\n                            token_type_embedding_name=\"token_type_embeddings\",\n                            use_position_embeddings=True,\n                            position_embedding_name=\"position_embeddings\",\n                            initializer_range=0.02,\n                            max_position_embeddings=512,\n                            dropout_prob=0.1):\n  \"\"\"Performs various post-processing on a word embedding tensor.\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length,\n      embedding_size].\n    use_token_type: bool. Whether to add embeddings for `token_type_ids`.\n    token_type_ids: (optional) int32 Tensor of shape [batch_size, seq_length].\n      Must be specified if `use_token_type` is True.\n    token_type_vocab_size: int. The vocabulary size of `token_type_ids`.\n    token_type_embedding_name: string. The name of the embedding table variable\n      for token type ids.\n    use_position_embeddings: bool. Whether to add position embeddings for the\n      position of each token in the sequence.\n    position_embedding_name: string. The name of the embedding table variable\n      for positional embeddings.\n    initializer_range: float. Range of the weight initialization.\n    max_position_embeddings: int. Maximum sequence length that might ever be\n      used with this model. This can be longer than the sequence length of\n      input_tensor, but cannot be shorter.\n    dropout_prob: float. Dropout probability applied to the final output tensor.\n  Returns:\n    float tensor with same shape as `input_tensor`.\n  Raises:\n    ValueError: One of the tensor shapes or input values is invalid.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  batch_size = input_shape[0]\n  seq_length = input_shape[1]\n  width = input_shape[2]\n\n  output = input_tensor\n\n  if use_token_type:\n    if token_type_ids is None:\n      raise ValueError(\"`token_type_ids` must be specified if\"\n                       \"`use_token_type` is True.\")\n    token_type_table = tf.get_variable(\n        name=token_type_embedding_name,\n        shape=[token_type_vocab_size, width],\n        initializer=create_initializer(initializer_range))\n    # This vocab will be small so we always do one-hot here, since it is always\n    # faster for a small vocabulary.\n    flat_token_type_ids = tf.reshape(token_type_ids, [-1])\n    one_hot_ids = tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)\n    token_type_embeddings = tf.matmul(one_hot_ids, token_type_table)\n    token_type_embeddings = tf.reshape(token_type_embeddings,\n                                       [batch_size, seq_length, width])\n    output += token_type_embeddings\n\n  if use_position_embeddings:\n    assert_op = tf.assert_less_equal(seq_length, max_position_embeddings)\n    with tf.control_dependencies([assert_op]):\n      full_position_embeddings = tf.get_variable(\n          name=position_embedding_name,\n          shape=[max_position_embeddings, width],\n          initializer=create_initializer(initializer_range))\n      # Since the position embedding table is a learned variable, we create it\n      # using a (long) sequence length `max_position_embeddings`. The actual\n      # sequence length might be shorter than this, for faster training of\n      # tasks that do not have long sequences.\n      #\n      # So `full_position_embeddings` is effectively an embedding table\n      # for position [0, 1, 2, ..., max_position_embeddings-1], and the current\n      # sequence has positions [0, 1, 2, ... seq_length-1], so we can just\n      # perform a slice.\n      position_embeddings = tf.slice(full_position_embeddings, [0, 0],\n                                     [seq_length, -1])\n      num_dims = len(output.shape.as_list())\n\n      # Only the last two dimensions are relevant (`seq_length` and `width`), so\n      # we broadcast among the first dimensions, which is typically just\n      # the batch size.\n      position_broadcast_shape = []\n      for _ in range(num_dims - 2):\n        position_broadcast_shape.append(1)\n      position_broadcast_shape.extend([seq_length, width])\n      position_embeddings = tf.reshape(position_embeddings,\n                                       position_broadcast_shape)\n      output += position_embeddings\n\n  output = layer_norm_and_dropout(output, dropout_prob)\n  return output\n\n\ndef dense_layer_3d(input_tensor,\n                   num_attention_heads,\n                   head_size,\n                   initializer,\n                   activation,\n                   name=None):\n  \"\"\"A dense layer with 3D kernel.\n  Args:\n    input_tensor: float Tensor of shape [batch, seq_length, hidden_size].\n    num_attention_heads: Number of attention heads.\n    head_size: The size per attention head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[hidden_size, num_attention_heads * head_size],\n        initializer=initializer)\n    w = tf.reshape(w, [hidden_size, num_attention_heads, head_size])\n    b = tf.get_variable(\n        name=\"bias\",\n        shape=[num_attention_heads * head_size],\n        initializer=tf.zeros_initializer)\n    b = tf.reshape(b, [num_attention_heads, head_size])\n    ret = tf.einsum(\"BFH,HND->BFND\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dense_layer_3d_proj(input_tensor,\n                        hidden_size,\n                        head_size,\n                        initializer,\n                        activation,\n                        name=None):\n  \"\"\"A dense layer with 3D kernel for projection.\n  Args:\n    input_tensor: float Tensor of shape [batch,from_seq_length,\n      num_attention_heads, size_per_head].\n    hidden_size: The size of hidden layer.\n    num_attention_heads: The size of output dimension.\n    head_size: The size of head.\n    initializer: Kernel initializer.\n    activation: Actication function.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  input_shape = get_shape_list(input_tensor)\n  num_attention_heads= input_shape[2]\n  with tf.variable_scope(name):\n    w = tf.get_variable(\n        name=\"kernel\",\n        shape=[num_attention_heads * head_size, hidden_size],\n        initializer=initializer)\n    w = tf.reshape(w, [num_attention_heads, head_size, hidden_size])\n    b = tf.get_variable(\n        name=\"bias\", shape=[hidden_size], initializer=tf.zeros_initializer)\n    ret = tf.einsum(\"BFND,NDH->BFH\", input_tensor, w)\n    ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\ndef dense_layer_2d(input_tensor,\n                   output_size,\n                   initializer,\n                   activation,\n                   num_attention_heads=1,\n                   name=None,\n                   num_groups=1):\n  \"\"\"A dense layer with 2D kernel.\n  Args:\n    input_tensor: Float tensor with rank 3.\n    output_size: The size of output dimension.\n    initializer: Kernel initializer.\n    activation: Activation function.\n    num_groups: number of groups in dense layer\n    num_attention_heads: number of attention head in attention layer.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  del num_attention_heads  # unused\n  input_shape = get_shape_list(input_tensor)\n  hidden_size = input_shape[2]\n  if num_groups == 1:\n    with tf.variable_scope(name):\n      w = tf.get_variable(\n          name=\"kernel\",\n          shape=[hidden_size, output_size],\n          initializer=initializer)\n      b = tf.get_variable(\n          name=\"bias\", shape=[output_size], initializer=tf.zeros_initializer)\n      ret = tf.einsum(\"BFH,HO->BFO\", input_tensor, w)\n      ret += b\n  else:\n    assert hidden_size % num_groups == 0\n    assert output_size % num_groups == 0\n    with tf.variable_scope(name):\n      w = tf.get_variable(\n          name=\"kernel\",\n          shape=[hidden_size//num_groups, output_size//num_groups, num_groups],\n          initializer=initializer)\n      b = tf.get_variable(\n          name=\"bias\", shape=[output_size], initializer=tf.zeros_initializer)\n      input_tensor = tf.reshape(input_tensor, input_shape[:2] + [hidden_size//num_groups, num_groups])\n      ret = tf.einsum(\"BFHG,HOG->BFGO\", input_tensor, w)\n      ret = tf.reshape(ret, input_shape[:2] + [output_size])\n      ret += b\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\ndef dense_layer_2d_old(input_tensor,\n                   output_size,\n                   initializer,\n                   activation,\n                   num_attention_heads=1,\n                   name=None,\n                   num_groups=1):\n  \"\"\"A dense layer with 2D kernel. 添加分组全连接的方式\n  Args:\n    input_tensor: Float tensor with rank 3. [ batch_size,sequence_length, hidden_size]\n    output_size: The size of output dimension.\n    initializer: Kernel initializer.\n    activation: Activation function.\n    num_groups: number of groups in dense layer\n    num_attention_heads: number of attention head in attention layer.\n    name: The name scope of this layer.\n  Returns:\n    float logits Tensor.\n  \"\"\"\n  del num_attention_heads  # unused\n  input_shape = get_shape_list(input_tensor)\n  # print(\"#dense_layer_2d.1.input_shape of input_tensor:\",input_shape)  # e.g. [2, 512, 768] = [ batch_size,sequence_length, hidden_size]\n  hidden_size = input_shape[2]\n  if num_groups == 1:\n    with tf.variable_scope(name):\n      w = tf.get_variable(\n          name=\"kernel\",\n          shape=[hidden_size, output_size],\n          initializer=initializer)\n      b = tf.get_variable(\n          name=\"bias\", shape=[output_size], initializer=tf.zeros_initializer)\n      ret = tf.einsum(\"BFH,HO->BFO\", input_tensor, w)\n      ret += b\n  else: # e.g. input_shape = [2, 512, 768] = [ batch_size,sequence_length, hidden_size]\n    assert hidden_size % num_groups == 0\n    assert output_size % num_groups == 0\n    # print(\"#dense_layer_2d.output_size:\",output_size,\";hidden_size:\",hidden_size) # output_size = 3072; hidden_size = 768\n    with tf.variable_scope(name):\n      w = tf.get_variable(\n          name=\"kernel\",\n          shape=[num_groups, hidden_size//num_groups, output_size//num_groups],\n          initializer=initializer)\n      # print(\"#dense_layer_2d.2'w:\",w.shape) # (16, 48, 192)\n      b = tf.get_variable(\n          name=\"bias\", shape=[num_groups, output_size//num_groups], initializer=tf.zeros_initializer)\n      # input_tensor = [ batch_size,sequence_length, hidden_size].\n      # input_shape[:2] + [hidden_size//num_groups, num_groups] = [batch_size, sequence_length, hidden_size/num_groups, num_groups]\n      input_tensor = tf.reshape(input_tensor, input_shape[:2] + [hidden_size//num_groups, num_groups])\n      # print(\"#dense_layer_2d.2.input_shape of input_tensor:\", input_tensor.shape)\n      input_tensor = tf.transpose(input_tensor, [3, 0, 1, 2]) # [num_groups, batch_size, sequence_length, hidden_size/num_groups]\n      # print(\"#dense_layer_2d.3.input_shape of input_tensor:\", input_tensor.shape) #  input_tensor=(16, 2, 512, 192)\n      # input_tensor=[num_groups, batch_size, sequence_length, hidden_size/num_groups], w=[num_groups, hidden_size/num_groups, output_size/num_groups]\n\n      ret = tf.einsum(\"GBFH,GHO->GBFO\", input_tensor, w)\n      # print(\"#dense_layer_2d.4. shape of ret:\", ret.shape) #  (16, 2, 512, 48) = [num_groups, batch_size, sequence_length ,output_size]\n      b = tf.expand_dims(b, 1)\n      b = tf.expand_dims(b, 1)\n      # print(\"#dense_layer_2d.4.2.b:\",b.shape) #  (16, 1, 1, 48)\n      ret += b\n      ret = tf.transpose(ret, [1, 2, 0, 3]) #  (2, 512, 16, 48)\n      # print(\"#dense_layer_2d.5. shape of ret:\", ret.shape)\n      ret = tf.reshape(ret, input_shape[:2] + [output_size]) # [2, 512, 768]\n  if activation is not None:\n    return activation(ret)\n  else:\n    return ret\n\n\ndef dot_product_attention(q, k, v, bias, dropout_rate=0.0):\n  \"\"\"Dot-product attention.\n  Args:\n    q: Tensor with shape [..., length_q, depth_k].\n    k: Tensor with shape [..., length_kv, depth_k]. Leading dimensions must\n      match with q.\n    v: Tensor with shape [..., length_kv, depth_v] Leading dimensions must\n      match with q.\n    bias: bias Tensor (see attention_bias())\n    dropout_rate: a float.\n  Returns:\n    Tensor with shape [..., length_q, depth_v].\n  \"\"\"\n  logits = tf.matmul(q, k, transpose_b=True)  # [..., length_q, length_kv]\n  logits = tf.multiply(logits, 1.0 / math.sqrt(float(get_shape_list(q)[-1])))\n  if bias is not None:\n    # `attention_mask` = [B, T]\n    from_shape = get_shape_list(q)\n    if len(from_shape) == 4:\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], 1], tf.float32)\n    elif len(from_shape) == 5:\n      # from_shape = [B, N, Block_num, block_size, depth]#\n      broadcast_ones = tf.ones([from_shape[0], 1, from_shape[2], from_shape[3],\n                                1], tf.float32)\n\n    bias = tf.matmul(broadcast_ones,\n                     tf.cast(bias, tf.float32), transpose_b=True)\n\n    # Since attention_mask is 1.0 for positions we want to attend and 0.0 for\n    # masked positions, this operation will create a tensor which is 0.0 for\n    # positions we want to attend and -10000.0 for masked positions.\n    adder = (1.0 - bias) * -10000.0\n\n    # Since we are adding it to the raw scores before the softmax, this is\n    # effectively the same as removing these entirely.\n    logits += adder\n  else:\n    adder = 0.0\n\n  attention_probs = tf.nn.softmax(logits, name=\"attention_probs\")\n  attention_probs = dropout(attention_probs, dropout_rate)\n  return tf.matmul(attention_probs, v)\n\n\ndef attention_layer(from_tensor,\n                    to_tensor,\n                    attention_mask=None,\n                    num_attention_heads=1,\n                    query_act=None,\n                    key_act=None,\n                    value_act=None,\n                    attention_probs_dropout_prob=0.0,\n                    initializer_range=0.02,\n                    batch_size=None,\n                    from_seq_length=None,\n                    to_seq_length=None):\n  \"\"\"Performs multi-headed attention from `from_tensor` to `to_tensor`.\n  Args:\n    from_tensor: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    to_tensor: float Tensor of shape [batch_size, to_seq_length, to_width].\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    query_act: (optional) Activation function for the query transform.\n    key_act: (optional) Activation function for the key transform.\n    value_act: (optional) Activation function for the value transform.\n    attention_probs_dropout_prob: (optional) float. Dropout probability of the\n      attention probabilities.\n    initializer_range: float. Range of the weight initializer.\n    batch_size: (Optional) int. If the input is 2D, this might be the batch size\n      of the 3D version of the `from_tensor` and `to_tensor`.\n    from_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `from_tensor`.\n    to_seq_length: (Optional) If the input is 2D, this might be the seq length\n      of the 3D version of the `to_tensor`.\n  Returns:\n    float Tensor of shape [batch_size, from_seq_length, num_attention_heads,\n      size_per_head].\n  Raises:\n    ValueError: Any of the arguments or tensor shapes are invalid.\n  \"\"\"\n  from_shape = get_shape_list(from_tensor, expected_rank=[2, 3])\n  to_shape = get_shape_list(to_tensor, expected_rank=[2, 3])\n  size_per_head = int(from_shape[2]/num_attention_heads)\n\n  if len(from_shape) != len(to_shape):\n    raise ValueError(\n        \"The rank of `from_tensor` must match the rank of `to_tensor`.\")\n\n  if len(from_shape) == 3:\n    batch_size = from_shape[0]\n    from_seq_length = from_shape[1]\n    to_seq_length = to_shape[1]\n  elif len(from_shape) == 2:\n    if (batch_size is None or from_seq_length is None or to_seq_length is None):\n      raise ValueError(\n          \"When passing in rank 2 tensors to attention_layer, the values \"\n          \"for `batch_size`, `from_seq_length`, and `to_seq_length` \"\n          \"must all be specified.\")\n\n  # Scalar dimensions referenced here:\n  #   B = batch size (number of sequences)\n  #   F = `from_tensor` sequence length\n  #   T = `to_tensor` sequence length\n  #   N = `num_attention_heads`\n  #   H = `size_per_head`\n\n  # `query_layer` = [B, F, N, H]\n  q = dense_layer_3d(from_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), query_act, \"query\")\n\n  # `key_layer` = [B, T, N, H]\n  k = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), key_act, \"key\")\n  # `value_layer` = [B, T, N, H]\n  v = dense_layer_3d(to_tensor, num_attention_heads, size_per_head,\n                     create_initializer(initializer_range), value_act, \"value\")\n  q = tf.transpose(q, [0, 2, 1, 3])\n  k = tf.transpose(k, [0, 2, 1, 3])\n  v = tf.transpose(v, [0, 2, 1, 3])\n  if attention_mask is not None:\n    attention_mask = tf.reshape(\n        attention_mask, [batch_size, 1, to_seq_length, 1])\n    # 'new_embeddings = [B, N, F, H]'\n  new_embeddings = dot_product_attention(q, k, v, attention_mask,\n                                         attention_probs_dropout_prob)\n\n  return tf.transpose(new_embeddings, [0, 2, 1, 3])\n\n\ndef attention_ffn_block(layer_input,\n                        hidden_size=768,\n                        attention_mask=None,\n                        num_attention_heads=1,\n                        attention_head_size=64,\n                        attention_probs_dropout_prob=0.0,\n                        intermediate_size=3072,\n                        intermediate_act_fn=None,\n                        initializer_range=0.02,\n                        hidden_dropout_prob=0.0):\n  \"\"\"A network with attention-ffn as sub-block.\n  Args:\n    layer_input: float Tensor of shape [batch_size, from_seq_length,\n      from_width].\n    hidden_size: (optional) int, size of hidden layer.\n    attention_mask: (optional) int32 Tensor of shape [batch_size,\n      from_seq_length, to_seq_length]. The values should be 1 or 0. The\n      attention scores will effectively be set to -infinity for any positions in\n      the mask that are 0, and will be unchanged for positions that are 1.\n    num_attention_heads: int. Number of attention heads.\n    attention_head_size: int. Size of attention head.\n    attention_probs_dropout_prob: float. dropout probability for attention_layer\n    intermediate_size: int. Size of intermediate hidden layer.\n    intermediate_act_fn: (optional) Activation function for the intermediate\n      layer.\n    initializer_range: float. Range of the weight initializer.\n    hidden_dropout_prob: (optional) float. Dropout probability of the hidden\n      layer.\n  Returns:\n    layer output\n  \"\"\"\n\n  with tf.variable_scope(\"attention_1\"):\n    with tf.variable_scope(\"self\"):\n      attention_output = attention_layer(\n          from_tensor=layer_input,\n          to_tensor=layer_input,\n          attention_mask=attention_mask,\n          num_attention_heads=num_attention_heads,\n          attention_probs_dropout_prob=attention_probs_dropout_prob,\n          initializer_range=initializer_range)\n\n    # Run a linear projection of `hidden_size` then add a residual\n    # with `layer_input`.\n    with tf.variable_scope(\"output\"):\n      attention_output = dense_layer_3d_proj(\n          attention_output,\n          hidden_size,\n          attention_head_size,\n          create_initializer(initializer_range),\n          None,\n          name=\"dense\")\n      attention_output = dropout(attention_output, hidden_dropout_prob)\n  attention_output = layer_norm(attention_output + layer_input)\n  with tf.variable_scope(\"ffn_1\"):\n    with tf.variable_scope(\"intermediate\"):\n      intermediate_output = dense_layer_2d(\n          attention_output,\n          intermediate_size,\n          create_initializer(initializer_range),\n          intermediate_act_fn,\n          num_attention_heads=num_attention_heads,\n          name=\"dense\",\n          num_groups=16)\n      with tf.variable_scope(\"output\"):\n        ffn_output = dense_layer_2d(\n            intermediate_output,\n            hidden_size,\n            create_initializer(initializer_range),\n            None,\n            num_attention_heads=num_attention_heads,\n            name=\"dense\",\n            num_groups=16)\n      ffn_output = dropout(ffn_output, hidden_dropout_prob)\n  ffn_output = layer_norm(ffn_output + attention_output)\n  return ffn_output\n\n\ndef transformer_model(input_tensor,\n                      attention_mask=None,\n                      hidden_size=768,\n                      num_hidden_layers=12,\n                      num_hidden_groups=12,\n                      num_attention_heads=12,\n                      intermediate_size=3072,\n                      inner_group_num=1,\n                      intermediate_act_fn=\"gelu\",\n                      hidden_dropout_prob=0.1,\n                      attention_probs_dropout_prob=0.1,\n                      initializer_range=0.02,\n                      do_return_all_layers=False):\n  \"\"\"Multi-headed, multi-layer Transformer from \"Attention is All You Need\".\n  This is almost an exact implementation of the original Transformer encoder.\n  See the original paper:\n  https://arxiv.org/abs/1706.03762\n  Also see:\n  https://github.com/tensorflow/tensor2tensor/blob/master/tensor2tensor/models/transformer.py\n  Args:\n    input_tensor: float Tensor of shape [batch_size, seq_length, hidden_size].\n    attention_mask: (optional) int32 Tensor of shape [batch_size, seq_length,\n      seq_length], with 1 for positions that can be attended to and 0 in\n      positions that should not be.\n    hidden_size: int. Hidden size of the Transformer.\n    num_hidden_layers: int. Number of layers (blocks) in the Transformer.\n    num_hidden_groups: int. Number of group for the hidden layers, parameters\n      in the same group are shared.\n    num_attention_heads: int. Number of attention heads in the Transformer.\n    intermediate_size: int. The size of the \"intermediate\" (a.k.a., feed\n      forward) layer.\n    inner_group_num: int, number of inner repetition of attention and ffn.\n    intermediate_act_fn: function. The non-linear activation function to apply\n      to the output of the intermediate/feed-forward layer.\n    hidden_dropout_prob: float. Dropout probability for the hidden layers.\n    attention_probs_dropout_prob: float. Dropout probability of the attention\n      probabilities.\n    initializer_range: float. Range of the initializer (stddev of truncated\n      normal).\n    do_return_all_layers: Whether to also return all layers or just the final\n      layer.\n  Returns:\n    float Tensor of shape [batch_size, seq_length, hidden_size], the final\n    hidden layer of the Transformer.\n  Raises:\n    ValueError: A Tensor shape or parameter is invalid.\n  \"\"\"\n  if hidden_size % num_attention_heads != 0:\n    raise ValueError(\n        \"The hidden size (%d) is not a multiple of the number of attention \"\n        \"heads (%d)\" % (hidden_size, num_attention_heads))\n\n  attention_head_size = hidden_size // num_attention_heads\n  input_shape = get_shape_list(input_tensor, expected_rank=3)\n  input_width = input_shape[2]\n\n  all_layer_outputs = []\n  if input_width != hidden_size:\n    prev_output = dense_layer_2d(\n        input_tensor, hidden_size, create_initializer(initializer_range),\n        None, name=\"embedding_hidden_mapping_in\")\n  else:\n    prev_output = input_tensor\n  with tf.variable_scope(\"transformer\", reuse=tf.AUTO_REUSE):\n    for layer_idx in range(num_hidden_layers):\n      group_idx = int(layer_idx / num_hidden_layers * num_hidden_groups)\n      with tf.variable_scope(\"group_%d\" % group_idx):\n        with tf.name_scope(\"layer_%d\" % layer_idx):\n          layer_output = prev_output\n          for inner_group_idx in range(inner_group_num):\n            with tf.variable_scope(\"inner_group_%d\" % inner_group_idx):\n              layer_output = attention_ffn_block(\n                  layer_output, hidden_size, attention_mask,\n                  num_attention_heads, attention_head_size,\n                  attention_probs_dropout_prob, intermediate_size,\n                  intermediate_act_fn, initializer_range, hidden_dropout_prob)\n              prev_output = layer_output\n              all_layer_outputs.append(layer_output)\n  if do_return_all_layers:\n    return all_layer_outputs\n  else:\n    return all_layer_outputs[-1]\n\n\ndef get_shape_list(tensor, expected_rank=None, name=None):\n  \"\"\"Returns a list of the shape of tensor, preferring static dimensions.\n  Args:\n    tensor: A tf.Tensor object to find the shape of.\n    expected_rank: (optional) int. The expected rank of `tensor`. If this is\n      specified and the `tensor` has a different rank, and exception will be\n      thrown.\n    name: Optional name of the tensor for the error message.\n  Returns:\n    A list of dimensions of the shape of tensor. All static dimensions will\n    be returned as python integers, and dynamic dimensions will be returned\n    as tf.Tensor scalars.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  if expected_rank is not None:\n    assert_rank(tensor, expected_rank, name)\n\n  shape = tensor.shape.as_list()\n\n  non_static_indexes = []\n  for (index, dim) in enumerate(shape):\n    if dim is None:\n      non_static_indexes.append(index)\n\n  if not non_static_indexes:\n    return shape\n\n  dyn_shape = tf.shape(tensor)\n  for index in non_static_indexes:\n    shape[index] = dyn_shape[index]\n  return shape\n\n\ndef reshape_to_matrix(input_tensor):\n  \"\"\"Reshapes a >= rank 2 tensor to a rank 2 tensor (i.e., a matrix).\"\"\"\n  ndims = input_tensor.shape.ndims\n  if ndims < 2:\n    raise ValueError(\"Input tensor must have at least rank 2. Shape = %s\" %\n                     (input_tensor.shape))\n  if ndims == 2:\n    return input_tensor\n\n  width = input_tensor.shape[-1]\n  output_tensor = tf.reshape(input_tensor, [-1, width])\n  return output_tensor\n\n\ndef reshape_from_matrix(output_tensor, orig_shape_list):\n  \"\"\"Reshapes a rank 2 tensor back to its original rank >= 2 tensor.\"\"\"\n  if len(orig_shape_list) == 2:\n    return output_tensor\n\n  output_shape = get_shape_list(output_tensor)\n\n  orig_dims = orig_shape_list[0:-1]\n  width = output_shape[-1]\n\n  return tf.reshape(output_tensor, orig_dims + [width])\n\n\ndef assert_rank(tensor, expected_rank, name=None):\n  \"\"\"Raises an exception if the tensor rank is not of the expected rank.\n  Args:\n    tensor: A tf.Tensor to check the rank of.\n    expected_rank: Python integer or list of integers, expected rank.\n    name: Optional name of the tensor for the error message.\n  Raises:\n    ValueError: If the expected shape doesn't match the actual shape.\n  \"\"\"\n  if name is None:\n    name = tensor.name\n\n  expected_rank_dict = {}\n  if isinstance(expected_rank, six.integer_types):\n    expected_rank_dict[expected_rank] = True\n  else:\n    for x in expected_rank:\n      expected_rank_dict[x] = True\n\n  actual_rank = tensor.shape.ndims\n  if actual_rank not in expected_rank_dict:\n    scope_name = tf.get_variable_scope().name\n    raise ValueError(\n        \"For the tensor `%s` in scope `%s`, the actual rank \"\n        \"`%d` (shape = %s) is not equal to the expected rank `%s`\" %\n        (name, scope_name, actual_rank, str(tensor.shape), str(expected_rank)))\n"
        },
        {
          "name": "optimization.py",
          "type": "blob",
          "size": 11.5166015625,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Functions and classes related to optimization (weight updates).\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\nimport tensorflow as tf\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu):\n    \"\"\"Creates an optimizer training op.\"\"\"\n    global_step = tf.train.get_or_create_global_step()\n\n    learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n    # Implements linear decay of the learning rate.\n    learning_rate = tf.train.polynomial_decay(\n        learning_rate,\n        global_step,\n        num_train_steps,\n        end_learning_rate=0.0,\n        power=1.0,\n        cycle=False)\n\n    # Implements linear warmup. I.e., if global_step < num_warmup_steps, the\n    # learning rate will be `global_step/num_warmup_steps * init_lr`.\n    if num_warmup_steps:\n        global_steps_int = tf.cast(global_step, tf.int32)\n        warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n        global_steps_float = tf.cast(global_steps_int, tf.float32)\n        warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n        warmup_percent_done = global_steps_float / warmup_steps_float\n        warmup_learning_rate = init_lr * warmup_percent_done\n\n        is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n        learning_rate = (\n                (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n    # It is recommended that you use this optimizer for fine tuning, since this\n    # is how the model was trained (note that the Adam m/v variables are NOT\n    # loaded from init_checkpoint.)\n    optimizer = LAMBOptimizer(\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n\n    if use_tpu:\n        optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n    tvars = tf.trainable_variables()\n    grads = tf.gradients(loss, tvars)\n\n    # This is how the model was pre-trained.\n    (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n    train_op = optimizer.apply_gradients(\n        zip(grads, tvars), global_step=global_step)\n\n    # Normally the global step update is done inside of `apply_gradients`.\n    # However, `AdamWeightDecayOptimizer` doesn't do this. But if you use\n    # a different optimizer, you should probably take this line out.\n    new_global_step = global_step + 1\n    train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n    return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n    \"\"\"A basic Adam optimizer that includes \"correct\" L2 weight decay.\"\"\"\n\n    def __init__(self,\n                 learning_rate,\n                 weight_decay_rate=0.0,\n                 beta_1=0.9,\n                 beta_2=0.999,\n                 epsilon=1e-6,\n                 exclude_from_weight_decay=None,\n                 name=\"AdamWeightDecayOptimizer\"):\n        \"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"\n        super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n        self.learning_rate = learning_rate\n        self.weight_decay_rate = weight_decay_rate\n        self.beta_1 = beta_1\n        self.beta_2 = beta_2\n        self.epsilon = epsilon\n        self.exclude_from_weight_decay = exclude_from_weight_decay\n\n    def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n        \"\"\"See base class.\"\"\"\n        assignments = []\n        for (grad, param) in grads_and_vars:\n            if grad is None or param is None:\n                continue\n\n            param_name = self._get_variable_name(param.name)\n\n            m = tf.get_variable(\n                name=param_name + \"/adam_m\",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n            v = tf.get_variable(\n                name=param_name + \"/adam_v\",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n\n            # Standard Adam update.\n            next_m = (\n                    tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n            next_v = (\n                    tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                              tf.square(grad)))\n\n            update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n            # Just adding the square of the weights to the loss function is *not*\n            # the correct way of using L2 regularization/weight decay with Adam,\n            # since that will interact with the m and v parameters in strange ways.\n            #\n            # Instead we want ot decay the weights in a manner that doesn't interact\n            # with the m/v parameters. This is equivalent to adding the square\n            # of the weights to the loss with plain (non-momentum) SGD.\n            if self._do_use_weight_decay(param_name):\n                update += self.weight_decay_rate * param\n\n            update_with_lr = self.learning_rate * update\n\n            next_param = param - update_with_lr\n\n            assignments.extend(\n                [param.assign(next_param),\n                 m.assign(next_m),\n                 v.assign(next_v)])\n        return tf.group(*assignments, name=name)\n\n    def _do_use_weight_decay(self, param_name):\n        \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n        if not self.weight_decay_rate:\n            return False\n        if self.exclude_from_weight_decay:\n            for r in self.exclude_from_weight_decay:\n                if re.search(r, param_name) is not None:\n                    return False\n        return True\n\n    def _get_variable_name(self, param_name):\n        \"\"\"Get the variable name from the tensor name.\"\"\"\n        m = re.match(\"^(.*):\\\\d+$\", param_name)\n        if m is not None:\n            param_name = m.group(1)\n        return param_name\n\n\n#\nclass LAMBOptimizer(tf.train.Optimizer):\n    \"\"\"\n    LAMBOptimizer optimizer.\n    https://github.com/ymcui/LAMB_Optimizer_TF\n    # IMPORTANT NOTE\n    - This is NOT an official implementation.\n    - LAMB optimizer is changed from arXiv v1 ~ v3.\n    - We implement v3 version (which is the latest version on June, 2019.).\n    - Our implementation is based on `AdamWeightDecayOptimizer` in BERT (provided by Google).\n\n    # References\n    - Large Batch Optimization for Deep Learning: Training BERT in 76 minutes. https://arxiv.org/abs/1904.00962v3\n    - BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. https://arxiv.org/abs/1810.04805\n    # Parameters\n    - There is nothing special, just the same as `AdamWeightDecayOptimizer`.\n    \"\"\"\n\n    def __init__(self,\n                 learning_rate,\n                 weight_decay_rate=0.01,\n                 beta_1=0.9,\n                 beta_2=0.999,\n                 epsilon=1e-6,\n                 exclude_from_weight_decay=None,\n                 name=\"LAMBOptimizer\"):\n        \"\"\"Constructs a LAMBOptimizer.\"\"\"\n        super(LAMBOptimizer, self).__init__(False, name)\n\n        self.learning_rate = learning_rate\n        self.weight_decay_rate = weight_decay_rate\n        self.beta_1 = beta_1\n        self.beta_2 = beta_2\n        self.epsilon = epsilon\n        self.exclude_from_weight_decay = exclude_from_weight_decay\n\n    def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n        \"\"\"See base class.\"\"\"\n        assignments = []\n        for (grad, param) in grads_and_vars:\n            if grad is None or param is None:\n                continue\n\n            param_name = self._get_variable_name(param.name)\n\n            m = tf.get_variable(\n                name=param_name + \"/lamb_m\",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n            v = tf.get_variable(\n                name=param_name + \"/lamb_v\",\n                shape=param.shape.as_list(),\n                dtype=tf.float32,\n                trainable=False,\n                initializer=tf.zeros_initializer())\n\n            # Standard Adam update.\n            next_m = (\n                    tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n            next_v = (\n                    tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                              tf.square(grad)))\n\n            update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n            # Just adding the square of the weights to the loss function is *not*\n            # the correct way of using L2 regularization/weight decay with Adam,\n            # since that will interact with the m and v parameters in strange ways.\n            #\n            # Instead we want ot decay the weights in a manner that doesn't interact\n            # with the m/v parameters. This is equivalent to adding the square\n            # of the weights to the loss with plain (non-momentum) SGD.\n            if self._do_use_weight_decay(param_name):\n                update += self.weight_decay_rate * param\n\n            ############## BELOW ARE THE SPECIFIC PARTS FOR LAMB ##############\n\n            # Note: Here are two choices for scaling function \\phi(z)\n            # minmax:   \\phi(z) = min(max(z, \\gamma_l), \\gamma_u)\n            # identity: \\phi(z) = z\n            # The authors does not mention what is \\gamma_l and \\gamma_u\n            # UPDATE: after asking authors, they provide me the code below.\n            # ratio = array_ops.where(math_ops.greater(w_norm, 0), array_ops.where(\n            #      math_ops.greater(g_norm, 0), (w_norm / g_norm), 1.0), 1.0)\n\n            r1 = tf.sqrt(tf.reduce_sum(tf.square(param)))\n            r2 = tf.sqrt(tf.reduce_sum(tf.square(update)))\n\n            r = tf.where(tf.greater(r1, 0.0),\n                         tf.where(tf.greater(r2, 0.0),\n                                  r1 / r2,\n                                  1.0),\n                         1.0)\n\n            eta = self.learning_rate * r\n\n            update_with_lr = eta * update\n\n            next_param = param - update_with_lr\n\n            assignments.extend(\n                [param.assign(next_param),\n                 m.assign(next_m),\n                 v.assign(next_v)])\n        return tf.group(*assignments, name=name)\n\n    def _do_use_weight_decay(self, param_name):\n        \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n        if not self.weight_decay_rate:\n            return False\n        if self.exclude_from_weight_decay:\n            for r in self.exclude_from_weight_decay:\n                if re.search(r, param_name) is not None:\n                    return False\n        return True\n\n    def _get_variable_name(self, param_name):\n        \"\"\"Get the variable name from the tensor name.\"\"\"\n        m = re.match(\"^(.*):\\\\d+$\", param_name)\n        if m is not None:\n            param_name = m.group(1)\n        return param_name"
        },
        {
          "name": "optimization_finetuning.py",
          "type": "blob",
          "size": 6.1748046875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Functions and classes related to optimization (weight updates).\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\nimport tensorflow as tf\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu):\n  \"\"\"Creates an optimizer training op.\"\"\"\n  global_step = tf.train.get_or_create_global_step()\n\n  learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n  # Implements linear decay of the learning rate.\n  learning_rate = tf.train.polynomial_decay(\n      learning_rate,\n      global_step,\n      num_train_steps,\n      end_learning_rate=0.0,\n      power=1.0,\n      cycle=False)\n\n  # Implements linear warmup. I.e., if global_step < num_warmup_steps, the\n  # learning rate will be `global_step/num_warmup_steps * init_lr`.\n  if num_warmup_steps:\n    global_steps_int = tf.cast(global_step, tf.int32)\n    warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n    global_steps_float = tf.cast(global_steps_int, tf.float32)\n    warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n    warmup_percent_done = global_steps_float / warmup_steps_float\n    warmup_learning_rate = init_lr * warmup_percent_done\n\n    is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n    learning_rate = (\n        (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n  # It is recommended that you use this optimizer for fine tuning, since this\n  # is how the model was trained (note that the Adam m/v variables are NOT\n  # loaded from init_checkpoint.)\n  optimizer = AdamWeightDecayOptimizer(\n      learning_rate=learning_rate,\n      weight_decay_rate=0.01,\n      beta_1=0.9,\n      beta_2=0.999, # 0.98 ONLY USED FOR PRETRAIN. MUST CHANGE AT FINE-TUNING 0.999,\n      epsilon=1e-6,\n      exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n\n  if use_tpu:\n    optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n  tvars = tf.trainable_variables()\n  grads = tf.gradients(loss, tvars)\n\n  # This is how the model was pre-trained.\n  (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n  train_op = optimizer.apply_gradients(\n      zip(grads, tvars), global_step=global_step)\n\n  # Normally the global step update is done inside of `apply_gradients`.\n  # However, `AdamWeightDecayOptimizer` doesn't do this. But if you use\n  # a different optimizer, you should probably take this line out.\n  new_global_step = global_step + 1\n  train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n  return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n  \"\"\"A basic Adam optimizer that includes \"correct\" L2 weight decay.\"\"\"\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               name=\"AdamWeightDecayOptimizer\"):\n    \"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"\n    super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=param_name + \"/adam_m\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=param_name + \"/adam_v\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      update_with_lr = self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", param_name)\n    if m is not None:\n      param_name = m.group(1)\n    return param_name\n"
        },
        {
          "name": "optimization_google.py",
          "type": "blob",
          "size": 7.396484375,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"Functions and classes related to optimization (weight updates).\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport re\n\nimport six\nfrom six.moves import zip\nimport tensorflow as tf\n\nimport lamb_optimizer_google as lamb_optimizer\n\n\ndef create_optimizer(loss, init_lr, num_train_steps, num_warmup_steps, use_tpu,\n                     optimizer=\"adamw\", poly_power=1.0, start_warmup_step=0):\n  \"\"\"Creates an optimizer training op.\"\"\"\n  global_step = tf.train.get_or_create_global_step()\n\n  learning_rate = tf.constant(value=init_lr, shape=[], dtype=tf.float32)\n\n  # Implements linear decay of the learning rate.\n  learning_rate = tf.train.polynomial_decay(\n      learning_rate,\n      global_step,\n      num_train_steps,\n      end_learning_rate=0.0,\n      power=poly_power,\n      cycle=False)\n\n  # Implements linear warmup. I.e., if global_step - start_warmup_step <\n  # num_warmup_steps, the learning rate will be\n  # `(global_step - start_warmup_step)/num_warmup_steps * init_lr`.\n  if num_warmup_steps:\n    tf.logging.info(\"++++++ warmup starts at step \" + str(start_warmup_step)\n                    + \", for \" + str(num_warmup_steps) + \" steps ++++++\")\n    global_steps_int = tf.cast(global_step, tf.int32)\n    start_warm_int = tf.constant(start_warmup_step, dtype=tf.int32)\n    global_steps_int = global_steps_int - start_warm_int\n    warmup_steps_int = tf.constant(num_warmup_steps, dtype=tf.int32)\n\n    global_steps_float = tf.cast(global_steps_int, tf.float32)\n    warmup_steps_float = tf.cast(warmup_steps_int, tf.float32)\n\n    warmup_percent_done = global_steps_float / warmup_steps_float\n    warmup_learning_rate = init_lr * warmup_percent_done\n\n    is_warmup = tf.cast(global_steps_int < warmup_steps_int, tf.float32)\n    learning_rate = (\n        (1.0 - is_warmup) * learning_rate + is_warmup * warmup_learning_rate)\n\n  # It is OK that you use this optimizer for finetuning, since this\n  # is how the model was trained (note that the Adam m/v variables are NOT\n  # loaded from init_checkpoint.)\n  # It is OK to use AdamW in the finetuning even the model is trained by LAMB.\n  # As report in the Bert pulic github, the learning rate for SQuAD 1.1 finetune\n  # is 3e-5, 4e-5 or 5e-5. For LAMB, the users can use 3e-4, 4e-4,or 5e-4 for a\n  # batch size of 64 in the finetune.\n  if optimizer == \"adamw\":\n    tf.logging.info(\"using adamw\")\n    optimizer = AdamWeightDecayOptimizer(\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n  elif optimizer == \"lamb\":\n    tf.logging.info(\"using lamb\")\n    optimizer = lamb_optimizer.LAMBOptimizer(\n        learning_rate=learning_rate,\n        weight_decay_rate=0.01,\n        beta_1=0.9,\n        beta_2=0.999,\n        epsilon=1e-6,\n        exclude_from_weight_decay=[\"LayerNorm\", \"layer_norm\", \"bias\"])\n  else:\n    raise ValueError(\"Not supported optimizer: \", optimizer)\n\n  if use_tpu:\n    optimizer = tf.contrib.tpu.CrossShardOptimizer(optimizer)\n\n  tvars = tf.trainable_variables()\n  grads = tf.gradients(loss, tvars)\n\n  # This is how the model was pre-trained.\n  (grads, _) = tf.clip_by_global_norm(grads, clip_norm=1.0)\n\n  train_op = optimizer.apply_gradients(\n      list(zip(grads, tvars)), global_step=global_step)\n\n  # Normally the global step update is done inside of `apply_gradients`.\n  # However, neither `AdamWeightDecayOptimizer` nor `LAMBOptimizer` do this.\n  # But if you use a different optimizer, you should probably take this line\n  # out.\n  new_global_step = global_step + 1\n  train_op = tf.group(train_op, [global_step.assign(new_global_step)])\n  return train_op\n\n\nclass AdamWeightDecayOptimizer(tf.train.Optimizer):\n  \"\"\"A basic Adam optimizer that includes \"correct\" L2 weight decay.\"\"\"\n\n  def __init__(self,\n               learning_rate,\n               weight_decay_rate=0.0,\n               beta_1=0.9,\n               beta_2=0.999,\n               epsilon=1e-6,\n               exclude_from_weight_decay=None,\n               name=\"AdamWeightDecayOptimizer\"):\n    \"\"\"Constructs a AdamWeightDecayOptimizer.\"\"\"\n    super(AdamWeightDecayOptimizer, self).__init__(False, name)\n\n    self.learning_rate = learning_rate\n    self.weight_decay_rate = weight_decay_rate\n    self.beta_1 = beta_1\n    self.beta_2 = beta_2\n    self.epsilon = epsilon\n    self.exclude_from_weight_decay = exclude_from_weight_decay\n\n  def apply_gradients(self, grads_and_vars, global_step=None, name=None):\n    \"\"\"See base class.\"\"\"\n    assignments = []\n    for (grad, param) in grads_and_vars:\n      if grad is None or param is None:\n        continue\n\n      param_name = self._get_variable_name(param.name)\n\n      m = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_m\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n      v = tf.get_variable(\n          name=six.ensure_str(param_name) + \"/adam_v\",\n          shape=param.shape.as_list(),\n          dtype=tf.float32,\n          trainable=False,\n          initializer=tf.zeros_initializer())\n\n      # Standard Adam update.\n      next_m = (\n          tf.multiply(self.beta_1, m) + tf.multiply(1.0 - self.beta_1, grad))\n      next_v = (\n          tf.multiply(self.beta_2, v) + tf.multiply(1.0 - self.beta_2,\n                                                    tf.square(grad)))\n\n      update = next_m / (tf.sqrt(next_v) + self.epsilon)\n\n      # Just adding the square of the weights to the loss function is *not*\n      # the correct way of using L2 regularization/weight decay with Adam,\n      # since that will interact with the m and v parameters in strange ways.\n      #\n      # Instead we want ot decay the weights in a manner that doesn't interact\n      # with the m/v parameters. This is equivalent to adding the square\n      # of the weights to the loss with plain (non-momentum) SGD.\n      if self._do_use_weight_decay(param_name):\n        update += self.weight_decay_rate * param\n\n      update_with_lr = self.learning_rate * update\n\n      next_param = param - update_with_lr\n\n      assignments.extend(\n          [param.assign(next_param),\n           m.assign(next_m),\n           v.assign(next_v)])\n    return tf.group(*assignments, name=name)\n\n  def _do_use_weight_decay(self, param_name):\n    \"\"\"Whether to use L2 weight decay for `param_name`.\"\"\"\n    if not self.weight_decay_rate:\n      return False\n    if self.exclude_from_weight_decay:\n      for r in self.exclude_from_weight_decay:\n        if re.search(r, param_name) is not None:\n          return False\n    return True\n\n  def _get_variable_name(self, param_name):\n    \"\"\"Get the variable name from the tensor name.\"\"\"\n    m = re.match(\"^(.*):\\\\d+$\", six.ensure_str(param_name))\n    if m is not None:\n      param_name = m.group(1)\n    return param_name\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_classifier.py",
          "type": "blob",
          "size": 34.7607421875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"BERT finetuning runner.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport csv\nimport os\nimport modeling\nimport optimization_finetuning as optimization\nimport tokenization\nimport tensorflow as tf\n# from loss import bi_tempered_logistic_loss\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(\n    \"bert_config_file\", None,\n    \"The config json file corresponding to the pre-trained BERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"task_name\", None, \"The name of the task to train.\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the BERT model was trained on.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 128,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\nclass InputExample(object):\n  \"\"\"A single training/test example for simple sequence classification.\"\"\"\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    \"\"\"Constructs a InputExample.\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  \"\"\"Fake example so the num input examples is a multiple of the batch size.\n  When running eval/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won't be generated.\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  \"\"\"\n\n\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n  \"\"\"Base class for data converters for sequence classification data sets.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    raise NotImplementedError()\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    raise NotImplementedError()\n\n  @classmethod\n  def _read_tsv(cls, input_file, quotechar=None):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = csv.reader(f, delimiter=\"\\t\", quotechar=quotechar)\n      lines = []\n      for line in reader:\n        lines.append(line)\n      return lines\n\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in BERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer, output_file):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  name_to_features = {\n      \"input_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"label_ids\": tf.FixedLenFeature([], tf.int64),\n      \"is_real_example\": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that's truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n\ndef create_model(bert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings):\n  \"\"\"Creates a classification model.\"\"\"\n  model = modeling.BertModel(\n      config=bert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n\n  # In the demo, we are doing a simple classification task on the entire\n  # segment.\n  #\n  # If you want to use the token-level output, use model.get_sequence_output()\n  # instead.\n  output_layer = model.get_pooled_output()\n\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):\n    ln_type = bert_config.ln_type\n    if ln_type == 'preln': # add by brightmart, 10-06. if it is preln, we need to an additonal layer: layer normalization as suggested in paper \"ON LAYER NORMALIZATION IN THE TRANSFORMER ARCHITECTURE\"\n        print(\"ln_type is preln. add LN layer.\")\n        output_layer=layer_norm(output_layer)\n    else:\n        print(\"ln_type is postln or other,do nothing.\")\n\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    probabilities = tf.nn.softmax(logits, axis=-1)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)\n\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1) # todo 08-29 try temp-loss\n    ###############bi_tempered_logistic_loss############################################################################\n    # print(\"##cross entropy loss is used....\"); tf.logging.info(\"##cross entropy loss is used....\")\n    # t1=0.9 #t1=0.90\n    # t2=1.05 #t2=1.05\n    # per_example_loss=bi_tempered_logistic_loss(log_probs,one_hot_labels,t1,t2,label_smoothing=0.1,num_iters=5) # TODO label_smoothing=0.0\n    #tf.logging.info(\"per_example_loss:\"+str(per_example_loss.shape))\n    ##############bi_tempered_logistic_loss#############################################################################\n\n    loss = tf.reduce_mean(per_example_loss)\n\n    return (loss, per_example_loss, logits, probabilities)\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\ndef model_fn_builder(bert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, logits, probabilities) = create_model(\n        bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\n        num_labels, use_one_hot_embeddings)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n        predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions, weights=is_real_example)\n        loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n        return {\n            \"eval_accuracy\": accuracy,\n            \"eval_loss\": loss,\n        }\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids, logits, is_real_example])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={\"probabilities\": probabilities},\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n\nclass LCQMCPairClassificationProcessor(DataProcessor): # TODO NEED CHANGE2\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n  def __init__(self):\n    self.language = \"zh\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train.txt\")), \"train\")\n    # dev_0827.tsv\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"dev.txt\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test.txt\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n    #return [\"-1\",\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    print(\"length of lines:\",len(lines))\n    for (i, line) in enumerate(lines):\n      #print('#i:',i,line)\n      if i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      try:\n          label = tokenization.convert_to_unicode(line[2])\n          text_a = tokenization.convert_to_unicode(line[0])\n          text_b = tokenization.convert_to_unicode(line[1])\n          examples.append(\n              InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n      except Exception:\n          print('###error.i:', i, line)\n    return examples\n\nclass SentencePairClassificationProcessor(DataProcessor):\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n  def __init__(self):\n    self.language = \"zh\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train_0827.tsv\")), \"train\")\n    # dev_0827.tsv\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"dev_0827.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test_0827.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n    #return [\"-1\",\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    print(\"length of lines:\",len(lines))\n    for (i, line) in enumerate(lines):\n      #print('#i:',i,line)\n      if i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      try:\n          label = tokenization.convert_to_unicode(line[0])\n          text_a = tokenization.convert_to_unicode(line[1])\n          text_b = tokenization.convert_to_unicode(line[2])\n          examples.append(\n              InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n      except Exception:\n          print('###error.i:', i, line)\n    return examples\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer):\n  \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    features.append(feature)\n  return features\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {\n      \"sentence_pair\": SentencePairClassificationProcessor,\n      \"lcqmc_pair\":LCQMCPairClassificationProcessor,\n      \"lcqmc\": LCQMCPairClassificationProcessor\n\n  }\n\n  tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                FLAGS.init_checkpoint)\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval` or `do_predict' must be True.\")\n\n  bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n  if FLAGS.max_seq_length > bert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the BERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, bert_config.max_position_embeddings))\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name]()\n\n  label_list = processor.get_labels()\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  # Cloud TPU: Invalid TPU configuration, ensure ClusterResolver is passed to tpu.\n  print(\"###tpu_cluster_resolver:\",tpu_cluster_resolver)\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:\n    train_examples =processor.get_train_examples(FLAGS.data_dir) # TODO\n    print(\"###length of total train_examples:\",len(train_examples))\n    num_train_steps = int(len(train_examples)/ FLAGS.train_batch_size * FLAGS.num_train_epochs)\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n  model_fn = model_fn_builder(\n      bert_config=bert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    train_file = os.path.join(FLAGS.output_dir, \"train.tf_record\")\n    train_file_exists=os.path.exists(train_file)\n    print(\"###train_file_exists:\", train_file_exists,\" ;train_file:\",train_file)\n    if not train_file_exists: # if tf_record file not exist, convert from raw text file. # TODO\n        file_based_convert_examples_to_features(train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(PaddingInputExample())\n\n    eval_file = os.path.join(FLAGS.output_dir, \"eval.tf_record\")\n    file_based_convert_examples_to_features(\n        eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder)\n\n    #######################################################################################################################\n    # evaluate all checkpoints; you can use the checkpoint with the best dev accuarcy\n    steps_and_files = []\n    filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n    for filename in filenames:\n        if filename.endswith(\".index\"):\n            ckpt_name = filename[:-6]\n            cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n            global_step = int(cur_filename.split(\"-\")[-1])\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files.append([global_step, cur_filename])\n    steps_and_files = sorted(steps_and_files, key=lambda x: x[0])\n\n    output_eval_file = os.path.join(FLAGS.data_dir, \"eval_results_albert_zh.txt\")\n    print(\"output_eval_file:\",output_eval_file)\n    tf.logging.info(\"output_eval_file:\"+output_eval_file)\n    with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n        for global_step, filename in sorted(steps_and_files, key=lambda x: x[0]):\n            result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps, checkpoint_path=filename)\n\n            tf.logging.info(\"***** Eval results %s *****\" % (filename))\n            writer.write(\"***** Eval results %s *****\\n\" % (filename))\n            for key in sorted(result.keys()):\n                tf.logging.info(\"  %s = %s\", key, str(result[key]))\n                writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    #######################################################################################################################\n\n    #result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n    #\n    #output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    #with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n    #  tf.logging.info(\"***** Eval results *****\")\n    #  for key in sorted(result.keys()):\n    #    tf.logging.info(\"  %s = %s\", key, str(result[key]))\n    #    writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")\n    file_based_convert_examples_to_features(predict_examples, label_list,\n                                            FLAGS.max_seq_length, tokenizer,\n                                            predict_file)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder)\n\n    result = estimator.predict(input_fn=predict_input_fn)\n\n    output_predict_file = os.path.join(FLAGS.output_dir, \"test_results.tsv\")\n    with tf.gfile.GFile(output_predict_file, \"w\") as writer:\n      num_written_lines = 0\n      tf.logging.info(\"***** Predict results *****\")\n      for (i, prediction) in enumerate(result):\n        probabilities = prediction[\"probabilities\"]\n        if i >= num_actual_predict_examples:\n          break\n        output_line = \"\\t\".join(\n            str(class_probability)\n            for class_probability in probabilities) + \"\\n\"\n        writer.write(output_line)\n        num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"task_name\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  flags.mark_flag_as_required(\"bert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()"
        },
        {
          "name": "run_classifier_clue.py",
          "type": "blob",
          "size": 37.0751953125,
          "content": "# -*- coding: utf-8 -*-\n# @Author: bo.shi\n# @Date:   2019-11-04 09:56:36\n# @Last Modified by:   bo.shi\n# @Last Modified time: 2019-12-04 14:29:04\n# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"BERT finetuning runner.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport modeling\nimport optimization_finetuning as optimization\nimport tokenization\nimport tensorflow as tf\n# from loss import bi_tempered_logistic_loss\nimport sys\nsys.path.append('..')\nfrom classifier_utils import *\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n# Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(\n    \"bert_config_file\", None,\n    \"The config json file corresponding to the pre-trained BERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"task_name\", None, \"The name of the task to train.\")\n\nflags.DEFINE_string(\"vocab_file\", None,\n                    \"The vocabulary file that the BERT model was trained on.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n# Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 128,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.is_real_example = is_real_example\n\n\ndef convert_single_example_for_inews(ex_index, tokens_a, tokens_b, label_map, max_seq_length,\n                                     tokenizer, example):\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in BERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n\n  return feature\n\n\ndef convert_example_list_for_inews(ex_index, example, label_list, max_seq_length,\n                                   tokenizer):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return [InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)]\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n    must_len = len(tokens_a) + 3\n    extra_len = max_seq_length - must_len\n  feature_list = []\n  if example.text_b and extra_len > 0:\n    extra_num = int((len(tokens_b) - 1) / extra_len) + 1\n    for num in range(extra_num):\n      max_len = min((num + 1) * extra_len, len(tokens_b))\n      tokens_b_sub = tokens_b[num * extra_len: max_len]\n      feature = convert_single_example_for_inews(\n          ex_index, tokens_a, tokens_b_sub, label_map, max_seq_length, tokenizer, example)\n      feature_list.append(feature)\n  else:\n    feature = convert_single_example_for_inews(\n        ex_index, tokens_a, tokens_b, label_map, max_seq_length, tokenizer, example)\n    feature_list.append(feature)\n  return feature_list\n\n\ndef file_based_convert_examples_to_features_for_inews(\n        examples, label_list, max_seq_length, tokenizer, output_file):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n  num_example = 0\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 1000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature_list = convert_example_list_for_inews(ex_index, example, label_list,\n                                                  max_seq_length, tokenizer)\n    num_example += len(feature_list)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    for feature in feature_list:\n      features[\"input_ids\"] = create_int_feature(feature.input_ids)\n      features[\"input_mask\"] = create_int_feature(feature.input_mask)\n      features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n      features[\"label_ids\"] = create_int_feature([feature.label_id])\n      features[\"is_real_example\"] = create_int_feature(\n          [int(feature.is_real_example)])\n\n      tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n      writer.write(tf_example.SerializeToString())\n  tf.logging.info(\"feature num: %s\", num_example)\n  writer.close()\n\n\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in BERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n        examples, label_list, max_seq_length, tokenizer, output_file):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  name_to_features = {\n      \"input_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"label_ids\": tf.FixedLenFeature([], tf.int64),\n      \"is_real_example\": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that's truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n\ndef create_model(bert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings):\n  \"\"\"Creates a classification model.\"\"\"\n  model = modeling.BertModel(\n      config=bert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n\n  # In the demo, we are doing a simple classification task on the entire\n  # segment.\n  #\n  # If you want to use the token-level output, use model.get_sequence_output()\n  # instead.\n  output_layer = model.get_pooled_output()\n\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):\n    ln_type = bert_config.ln_type\n    if ln_type == 'preln':  # add by brightmart, 10-06. if it is preln, we need to an additonal layer: layer normalization as suggested in paper \"ON LAYER NORMALIZATION IN THE TRANSFORMER ARCHITECTURE\"\n      print(\"ln_type is preln. add LN layer.\")\n      output_layer = layer_norm(output_layer)\n    else:\n      print(\"ln_type is postln or other,do nothing.\")\n\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    probabilities = tf.nn.softmax(logits, axis=-1)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)\n\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs,\n                                      axis=-1)  # todo 08-29 try temp-loss\n    ###############bi_tempered_logistic_loss############################################################################\n    # print(\"##cross entropy loss is used....\"); tf.logging.info(\"##cross entropy loss is used....\")\n    # t1=0.9 #t1=0.90\n    # t2=1.05 #t2=1.05\n    # per_example_loss=bi_tempered_logistic_loss(log_probs,one_hot_labels,t1,t2,label_smoothing=0.1,num_iters=5) # TODO label_smoothing=0.0\n    # tf.logging.info(\"per_example_loss:\"+str(per_example_loss.shape))\n    ##############bi_tempered_logistic_loss#############################################################################\n\n    loss = tf.reduce_mean(per_example_loss)\n\n    return (loss, per_example_loss, logits, probabilities)\n\n\ndef layer_norm(input_tensor, name=None):\n  \"\"\"Run layer normalization on the last dimension of the tensor.\"\"\"\n  return tf.contrib.layers.layer_norm(\n      inputs=input_tensor, begin_norm_axis=-1, begin_params_axis=-1, scope=name)\n\n\ndef model_fn_builder(bert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, logits, probabilities) = create_model(\n        bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\n        num_labels, use_one_hot_embeddings)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n       ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(per_example_loss, label_ids, logits, is_real_example):\n        predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions, weights=is_real_example)\n        loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n        return {\n            \"eval_accuracy\": accuracy,\n            \"eval_loss\": loss,\n        }\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids, logits, is_real_example])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={\"probabilities\": probabilities},\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer):\n  \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    features.append(feature)\n  return features\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {\n      \"xnli\": XnliProcessor,\n      \"tnews\": TnewsProcessor,\n      \"afqmc\": AFQMCProcessor,\n      \"iflytek\": iFLYTEKDataProcessor,\n      \"copa\": COPAProcessor,\n      \"cmnli\": CMNLIProcessor,\n      \"wsc\": WSCProcessor,\n      \"csl\": CslProcessor,\n      \"copa\": COPAProcessor,\n  }\n\n  tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                FLAGS.init_checkpoint)\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval` or `do_predict' must be True.\")\n\n  bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file)\n\n  if FLAGS.max_seq_length > bert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the BERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, bert_config.max_position_embeddings))\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name]()\n\n  label_list = processor.get_labels()\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  # Cloud TPU: Invalid TPU configuration, ensure ClusterResolver is passed to tpu.\n  print(\"###tpu_cluster_resolver:\", tpu_cluster_resolver)\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:\n    train_examples = processor.get_train_examples(FLAGS.data_dir)  # TODO\n    print(\"###length of total train_examples:\", len(train_examples))\n    num_train_steps = int(len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n  model_fn = model_fn_builder(\n      bert_config=bert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    train_file = os.path.join(FLAGS.output_dir, \"train.tf_record\")\n    train_file_exists = os.path.exists(train_file)\n    print(\"###train_file_exists:\", train_file_exists, \" ;train_file:\", train_file)\n    if not train_file_exists:  # if tf_record file not exist, convert from raw text file. # TODO\n      if task_name == \"inews\":\n        file_based_convert_examples_to_features_for_inews(\n            train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n      else:\n        file_based_convert_examples_to_features(\n            train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:\n    # dev dataset\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(PaddingInputExample())\n\n    eval_file = os.path.join(FLAGS.output_dir, \"dev.tf_record\")\n    if task_name == \"inews\":\n      file_based_convert_examples_to_features_for_inews(\n          eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n    else:\n      file_based_convert_examples_to_features(\n          eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder)\n\n    #######################################################################################################################\n    # evaluate all checkpoints; you can use the checkpoint with the best dev accuarcy\n    steps_and_files = []\n    filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n    for filename in filenames:\n      if filename.endswith(\".index\"):\n        ckpt_name = filename[:-6]\n        cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n        global_step = int(cur_filename.split(\"-\")[-1])\n        tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n        steps_and_files.append([global_step, cur_filename])\n    steps_and_files = sorted(steps_and_files, key=lambda x: x[0])\n\n    output_eval_file = os.path.join(FLAGS.data_dir, \"dev_results_albert_zh.txt\")\n    print(\"output_eval_file:\", output_eval_file)\n    tf.logging.info(\"output_eval_file:\" + output_eval_file)\n    with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n      for global_step, filename in sorted(steps_and_files, key=lambda x: x[0]):\n        result = estimator.evaluate(input_fn=eval_input_fn,\n                                    steps=eval_steps, checkpoint_path=filename)\n\n        tf.logging.info(\"***** Eval results %s *****\" % (filename))\n        writer.write(\"***** Eval results %s *****\\n\" % (filename))\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    #######################################################################################################################\n\n    # result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n    #\n    # output_eval_file = os.path.join(FLAGS.output_dir, \"dev_results_albert_zh.txt\")\n    # with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n    #  tf.logging.info(\"***** Eval results *****\")\n    #  for key in sorted(result.keys()):\n    #    tf.logging.info(\"  %s = %s\", key, str(result[key]))\n    #    writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")\n    if task_name == \"inews\":\n      file_based_convert_examples_to_features_for_inews(predict_examples, label_list,\n                                                        FLAGS.max_seq_length, tokenizer,\n                                                        predict_file)\n    else:\n      file_based_convert_examples_to_features(predict_examples, label_list,\n                                              FLAGS.max_seq_length, tokenizer,\n                                              predict_file)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder)\n\n    result = estimator.predict(input_fn=predict_input_fn)\n    index2label_map = {}\n    for (i, label) in enumerate(label_list):\n      index2label_map[i] = label\n    output_predict_file_label_name = task_name + \"_predict.json\"\n    output_predict_file_label = os.path.join(FLAGS.output_dir, output_predict_file_label_name)\n    output_predict_file = os.path.join(FLAGS.output_dir, \"test_results.tsv\")\n    with tf.gfile.GFile(output_predict_file_label, \"w\") as writer_label:\n      with tf.gfile.GFile(output_predict_file, \"w\") as writer:\n        num_written_lines = 0\n        tf.logging.info(\"***** Predict results *****\")\n        for (i, prediction) in enumerate(result):\n          probabilities = prediction[\"probabilities\"]\n          label_index = probabilities.argmax(0)\n          if i >= num_actual_predict_examples:\n            break\n          output_line = \"\\t\".join(\n              str(class_probability)\n              for class_probability in probabilities) + \"\\n\"\n          test_label_dict = {}\n          test_label_dict[\"id\"] = i\n          test_label_dict[\"label\"] = str(index2label_map[label_index])\n          if task_name == \"tnews\":\n            test_label_dict[\"label_desc\"] = \"\"\n          writer.write(output_line)\n          json.dump(test_label_dict, writer_label)\n          writer_label.write(\"\\n\")\n          num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"task_name\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  flags.mark_flag_as_required(\"bert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()"
        },
        {
          "name": "run_classifier_clue.sh",
          "type": "blob",
          "size": 3.00390625,
          "content": "# @Author: bo.shi\n# @Date:   2020-03-15 16:11:00\n# @Last Modified by:   bo.shi\n# @Last Modified time: 2020-04-02 17:54:05\n#!/usr/bin/env bash\n\nexport CUDA_VISIBLE_DEVICES=\"0\"\nCURRENT_DIR=$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\nCLUE_DATA_DIR=$CURRENT_DIR/CLUEdataset\nALBERT_TINY_DIR=$CURRENT_DIR/albert_tiny\n\ndownload_data(){\n  TASK_NAME=$1\n  if [ ! -d $CLUE_DATA_DIR ]; then\n    mkdir -p $CLUE_DATA_DIR\n    echo \"makedir $CLUE_DATA_DIR\"\n  fi\n  cd $CLUE_DATA_DIR\n  if [ ! -d ${TASK_NAME} ]; then\n    mkdir $TASK_NAME\n    echo \"make dataset dir $CLUE_DATA_DIR/$TASK_NAME\"\n  fi\n  cd $TASK_NAME\n  if [ ! -f \"train.json\" ] || [ ! -f \"dev.json\" ] || [ ! -f \"test.json\" ]; then\n    rm *\n    wget https://storage.googleapis.com/cluebenchmark/tasks/${TASK_NAME}_public.zip\n    unzip ${TASK_NAME}_public.zip\n    rm ${TASK_NAME}_public.zip\n  else\n    echo \"data exists\"\n  fi\n  echo \"Finish download dataset.\"\n}\n\ndownload_model(){\n  if [ ! -d $ALBERT_TINY_DIR ]; then\n    mkdir -p $ALBERT_TINY_DIR\n    echo \"makedir $ALBERT_TINY_DIR\"\n  fi\n  cd $ALBERT_TINY_DIR\n  if [ ! -f \"albert_config_tiny.json\" ] || [ ! -f \"vocab.txt\" ] || [ ! -f \"checkpoint\" ] || [ ! -f \"albert_model.ckpt.index\" ] || [ ! -f \"albert_model.ckpt.meta\" ] || [ ! -f \"albert_model.ckpt.data-00000-of-00001\" ]; then\n    rm *\n    wget -c https://storage.googleapis.com/albert_zh/albert_tiny_489k.zip\n    unzip albert_tiny_489k.zip\n    rm albert_tiny_489k.zip\n  else\n    echo \"model exists\"\n  fi\n  echo \"Finish download model.\"\n}\n\nrun_task() {\n  TASK_NAME=$1\n  download_data $TASK_NAME\n  download_model $MODEL_NAME\n  DATA_DIR=$CLUE_DATA_DIR/${TASK_NAME}\n  PREV_TRAINED_MODEL_DIR=$ALBERT_TINY_DIR\n  MAX_SEQ_LENGTH=$2\n  TRAIN_BATCH_SIZE=$3\n  LEARNING_RATE=$4\n  NUM_TRAIN_EPOCHS=$5\n  SAVE_CHECKPOINTS_STEPS=$6\n  OUTPUT_DIR=$CURRENT_DIR/${TASK_NAME}_output/\n  COMMON_ARGS=\"\n        --task_name=$TASK_NAME \\\n        --data_dir=$DATA_DIR \\\n        --vocab_file=$PREV_TRAINED_MODEL_DIR/vocab.txt \\\n        --bert_config_file=$PREV_TRAINED_MODEL_DIR/albert_config_tiny.json \\\n        --init_checkpoint=$PREV_TRAINED_MODEL_DIR/albert_model.ckpt \\\n        --max_seq_length=$MAX_SEQ_LENGTH \\\n        --train_batch_size=$TRAIN_BATCH_SIZE \\\n        --learning_rate=$LEARNING_RATE \\\n        --num_train_epochs=$NUM_TRAIN_EPOCHS \\\n        --save_checkpoints_steps=$SAVE_CHECKPOINTS_STEPS \\\n        --output_dir=$OUTPUT_DIR \\\n        --keep_checkpoint_max=0 \\\n  \"\n  cd $CURRENT_DIR\n  echo \"Start running...\"\n  python run_classifier_clue.py \\\n        $COMMON_ARGS \\\n        --do_train=true \\\n        --do_eval=false \\\n        --do_predict=false\n\n  echo \"Start predict...\"\n  python run_classifier_clue.py \\\n        $COMMON_ARGS \\\n        --do_train=false \\\n        --do_eval=true \\\n        --do_predict=true\n}\n\n##command##task_name##model_name##max_seq_length##train_batch_size##learning_rate##num_train_epochs##save_checkpoints_steps##tpu_ip\nrun_task afqmc 128 16 2e-5 3 300\nrun_task cmnli 128 64 3e-5 2 300\nrun_task csl 128 16 1e-5 5 100\nrun_task iflytek 128 32 2e-5 3 300\nrun_task tnews 128 16 2e-5 3 300\nrun_task wsc 128 16 1e-5 10 10"
        },
        {
          "name": "run_classifier_lcqmc.sh",
          "type": "blob",
          "size": 2.20703125,
          "content": "#!/usr/bin/env bash\n# @Author: bo.shi, https://github.com/chineseGLUE/chineseGLUE\n# @Date:   2019-11-04 09:56:36\n# @Last Modified by:   bright\n# @Last Modified time: 2019-11-10 09:00:00\n\nTASK_NAME=\"lcqmc\"\nMODEL_NAME=\"albert_tiny_zh\"\nCURRENT_DIR=$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\n\nexport CUDA_VISIBLE_DEVICES=\"0\"\nexport ALBERT_CONFIG_DIR=$CURRENT_DIR/albert_config\nexport ALBERT_PRETRAINED_MODELS_DIR=$CURRENT_DIR/prev_trained_model\nexport ALBERT_TINY_DIR=$ALBERT_PRETRAINED_MODELS_DIR/$MODEL_NAME\n#mkdir chineseGLUEdatasets\nexport GLUE_DATA_DIR=$CURRENT_DIR/chineseGLUEdatasets\n\n# download and unzip dataset\nif [ ! -d $GLUE_DATA_DIR ]; then\n  mkdir -p $GLUE_DATA_DIR\n  echo \"makedir $GLUE_DATA_DIR\"\nfi\ncd $GLUE_DATA_DIR\nif [ ! -d $TASK_NAME ]; then\n  mkdir $TASK_NAME\n  echo \"makedir $GLUE_DATA_DIR/$TASK_NAME\"\nfi\ncd $TASK_NAME\necho \"Please try again if the data is not downloaded successfully.\"\nwget -c https://raw.githubusercontent.com/pengming617/text_matching/master/data/train.txt\nwget -c https://raw.githubusercontent.com/pengming617/text_matching/master/data/dev.txt\nwget -c https://raw.githubusercontent.com/pengming617/text_matching/master/data/test.txt\necho \"Finish download dataset.\"\n\n# download model\nif [ ! -d $ALBERT_TINY_DIR ]; then\n  mkdir -p $ALBERT_TINY_DIR\n  echo \"makedir $ALBERT_TINY_DIR\"\nfi\ncd $ALBERT_TINY_DIR\nif [ ! -f \"albert_config_tiny.json\" ] || [ ! -f \"vocab.txt\" ] || [ ! -f \"checkpoint\" ] || [ ! -f \"albert_model.ckpt.index\" ] || [ ! -f \"albert_model.ckpt.meta\" ] || [ ! -f \"albert_model.ckpt.data-00000-of-00001\" ]; then\n  rm *\n  wget https://storage.googleapis.com/albert_zh/albert_tiny_489k.zip\n  unzip albert_tiny_489k.zip\n  rm albert_tiny_489k.zip\nelse\n  echo \"model exists\"\nfi\necho \"Finish download model.\"\n\n# run task\ncd $CURRENT_DIR\necho \"Start running...\"\npython run_classifier.py \\\n  --task_name=$TASK_NAME \\\n  --do_train=true \\\n  --do_eval=true \\\n  --data_dir=$GLUE_DATA_DIR/$TASK_NAME \\\n  --vocab_file=$ALBERT_CONFIG_DIR/vocab.txt \\\n  --bert_config_file=$ALBERT_CONFIG_DIR/albert_config_tiny.json \\\n  --init_checkpoint=$ALBERT_TINY_DIR/albert_model.ckpt \\\n  --max_seq_length=128 \\\n  --train_batch_size=64 \\\n  --learning_rate=1e-4 \\\n  --num_train_epochs=5.0 \\\n  --output_dir=$CURRENT_DIR/${TASK_NAME}_output/\n"
        },
        {
          "name": "run_classifier_sp_google.py",
          "type": "blob",
          "size": 38.3544921875,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"BERT finetuning runner with sentence piece tokenization.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport csv\nimport os\n\nimport six\nfrom six.moves import zip\nimport tensorflow as tf\n\nimport modeling_google as modeling\nimport optimization_google as optimization\nimport tokenization_google as tokenization\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"data_dir\", None,\n    \"The input data dir. Should contain the .tsv files (or other data files) \"\n    \"for the task.\")\n\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\"task_name\", None, \"The name of the task to train.\")\n\nflags.DEFINE_string(\n    \"vocab_file\", None,\n    \"The vocabulary file that the ALBERT model was trained on.\")\n\nflags.DEFINE_string(\"spm_model_file\", None,\n                    \"The model file for sentence piece tokenization.\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\n\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained ALBERT model).\")\n\nflags.DEFINE_bool(\n    \"use_pooled_output\", True, \"Whether to use the CLS token outputs\")\n\nflags.DEFINE_bool(\n    \"do_lower_case\", True,\n    \"Whether to lower case the input text. Should be True for uncased \"\n    \"models and False for cased models.\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_bool(\n    \"do_predict\", False,\n    \"Whether to run the model in inference mode on the test set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_integer(\"predict_batch_size\", 8, \"Total batch size for predict.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_float(\"num_train_epochs\", 3.0,\n                   \"Total number of training epochs to perform.\")\n\nflags.DEFINE_float(\n    \"warmup_proportion\", 0.1,\n    \"Proportion of training to perform linear learning rate warmup for. \"\n    \"E.g., 0.1 = 10% of training.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\nclass InputExample(object):\n  \"\"\"A single training/test example for simple sequence classification.\"\"\"\n\n  def __init__(self, guid, text_a, text_b=None, label=None):\n    \"\"\"Constructs a InputExample.\n    Args:\n      guid: Unique id for the example.\n      text_a: string. The untokenized text of the first sequence. For single\n        sequence tasks, only this sequence must be specified.\n      text_b: (Optional) string. The untokenized text of the second sequence.\n        Only must be specified for sequence pair tasks.\n      label: (Optional) string. The label of the example. This should be\n        specified for train and dev examples, but not for test examples.\n    \"\"\"\n    self.guid = guid\n    self.text_a = text_a\n    self.text_b = text_b\n    self.label = label\n\n\nclass PaddingInputExample(object):\n  \"\"\"Fake example so the num input examples is a multiple of the batch size.\n  When running eval/predict on the TPU, we need to pad the number of examples\n  to be a multiple of the batch size, because the TPU requires a fixed batch\n  size. The alternative is to drop the last batch, which is bad because it means\n  the entire output data won't be generated.\n  We use this class instead of `None` because treating `None` as padding\n  battches could cause silent errors.\n  \"\"\"\n\n\nclass InputFeatures(object):\n  \"\"\"A single set of features of data.\"\"\"\n\n  def __init__(self,\n               input_ids,\n               input_mask,\n               segment_ids,\n               label_id,\n               is_real_example=True):\n    self.input_ids = input_ids\n    self.input_mask = input_mask\n    self.segment_ids = segment_ids\n    self.label_id = label_id\n    self.is_real_example = is_real_example\n\n\nclass DataProcessor(object):\n  \"\"\"Base class for data converters for sequence classification data sets.\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"\n    raise NotImplementedError()\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"\n    raise NotImplementedError()\n\n  def get_test_examples(self, data_dir):\n    \"\"\"Gets a collection of `InputExample`s for prediction.\"\"\"\n    raise NotImplementedError()\n\n  def get_labels(self):\n    \"\"\"Gets the list of labels for this data set.\"\"\"\n    raise NotImplementedError()\n\n  @classmethod\n  def _read_tsv(cls, input_file, quotechar=None):\n    \"\"\"Reads a tab separated value file.\"\"\"\n    with tf.gfile.Open(input_file, \"r\") as f:\n      reader = csv.reader(f, delimiter=\"\\t\", quotechar=quotechar)\n      lines = []\n      for line in reader:\n        lines.append(line)\n      return lines\n\n\nclass XnliProcessor(DataProcessor):\n  \"\"\"Processor for the XNLI data set.\"\"\"\n\n  def __init__(self):\n    self.language = \"zh\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    lines = self._read_tsv(\n        os.path.join(data_dir, \"multinli\",\n                     \"multinli.train.%s.tsv\" % self.language))\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = \"train-%d\" % (i)\n      text_a = tokenization.convert_to_unicode(line[0])\n      text_b = tokenization.convert_to_unicode(line[1])\n      label = tokenization.convert_to_unicode(line[2])\n      if label == tokenization.convert_to_unicode(\"contradictory\"):\n        label = tokenization.convert_to_unicode(\"contradiction\")\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    lines = self._read_tsv(os.path.join(data_dir, \"xnli.dev.tsv\"))\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = \"dev-%d\" % (i)\n      language = tokenization.convert_to_unicode(line[0])\n      if language != tokenization.convert_to_unicode(self.language):\n        continue\n      text_a = tokenization.convert_to_unicode(line[6])\n      text_b = tokenization.convert_to_unicode(line[7])\n      label = tokenization.convert_to_unicode(line[1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n\nclass MnliProcessor(DataProcessor):\n  \"\"\"Processor for the MultiNLI data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"dev_matched.tsv\")),\n        \"dev_matched\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test_matched.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"contradiction\", \"entailment\", \"neutral\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n    # Note(mingdachen): We will rely on this guid for GLUE submission.\n      guid = tokenization.preprocess_text(line[0], lower=FLAGS.do_lower_case)\n      text_a = tokenization.preprocess_text(line[8], lower=FLAGS.do_lower_case)\n      text_b = tokenization.preprocess_text(line[9], lower=FLAGS.do_lower_case)\n      if set_type == \"test\":\n        label = \"contradiction\"\n      else:\n        label = tokenization.preprocess_text(line[-1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass LCQMCPairClassificationProcessor(DataProcessor):\n  \"\"\"Processor for the internal data set. sentence pair classification\"\"\"\n  def __init__(self):\n    self.language = \"zh\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train.txt\")), \"train\")\n    # dev_0827.tsv\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test.txt\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test.txt\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    print(\"length of lines:\",len(lines))\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      try:\n          label = tokenization.convert_to_unicode(line[2])\n          text_a = tokenization.convert_to_unicode(line[0])\n          text_b = tokenization.convert_to_unicode(line[1])\n          examples.append(\n              InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n      except Exception:\n          print('###error.i:', i, line)\n    return examples\n\nclass MrpcProcessor(DataProcessor):\n  \"\"\"Processor for the MRPC data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      if i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      text_a = tokenization.preprocess_text(line[3], lower=FLAGS.do_lower_case)\n      text_b = tokenization.preprocess_text(line[4], lower=FLAGS.do_lower_case)\n      if set_type == \"test\":\n        guid = line[0]\n        label = \"0\"\n      else:\n        label = tokenization.preprocess_text(line[0])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\n    return examples\n\n\nclass ColaProcessor(DataProcessor):\n  \"\"\"Processor for the CoLA data set (GLUE version).\"\"\"\n\n  def get_train_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"train.tsv\")), \"train\")\n\n  def get_dev_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"dev.tsv\")), \"dev\")\n\n  def get_test_examples(self, data_dir):\n    \"\"\"See base class.\"\"\"\n    return self._create_examples(\n        self._read_tsv(os.path.join(data_dir, \"test.tsv\")), \"test\")\n\n  def get_labels(self):\n    \"\"\"See base class.\"\"\"\n    return [\"0\", \"1\"]\n\n  def _create_examples(self, lines, set_type):\n    \"\"\"Creates examples for the training and dev sets.\"\"\"\n    examples = []\n    for (i, line) in enumerate(lines):\n      # Only the test set has a header\n      if set_type == \"test\" and i == 0:\n        continue\n      guid = \"%s-%s\" % (set_type, i)\n      if set_type == \"test\":\n        guid = line[0]\n        text_a = tokenization.preprocess_text(\n            line[1], lower=FLAGS.do_lower_case)\n        label = \"0\"\n      else:\n        text_a = tokenization.preprocess_text(\n            line[3], lower=FLAGS.do_lower_case)\n        label = tokenization.preprocess_text(line[1])\n      examples.append(\n          InputExample(guid=guid, text_a=text_a, text_b=None, label=label))\n    return examples\n\n\ndef convert_single_example(ex_index, example, label_list, max_seq_length,\n                           tokenizer):\n  \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\n\n  if isinstance(example, PaddingInputExample):\n    return InputFeatures(\n        input_ids=[0] * max_seq_length,\n        input_mask=[0] * max_seq_length,\n        segment_ids=[0] * max_seq_length,\n        label_id=0,\n        is_real_example=False)\n\n  label_map = {}\n  for (i, label) in enumerate(label_list):\n    label_map[label] = i\n\n  tokens_a = tokenizer.tokenize(example.text_a)\n  tokens_b = None\n  if example.text_b:\n    tokens_b = tokenizer.tokenize(example.text_b)\n\n  if tokens_b:\n    # Modifies `tokens_a` and `tokens_b` in place so that the total\n    # length is less than the specified length.\n    # Account for [CLS], [SEP], [SEP] with \"- 3\"\n    _truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\n  else:\n    # Account for [CLS] and [SEP] with \"- 2\"\n    if len(tokens_a) > max_seq_length - 2:\n      tokens_a = tokens_a[0:(max_seq_length - 2)]\n\n  # The convention in ALBERT is:\n  # (a) For sequence pairs:\n  #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\n  #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\n  # (b) For single sequences:\n  #  tokens:   [CLS] the dog is hairy . [SEP]\n  #  type_ids: 0     0   0   0  0     0 0\n  #\n  # Where \"type_ids\" are used to indicate whether this is the first\n  # sequence or the second sequence. The embedding vectors for `type=0` and\n  # `type=1` were learned during pre-training and are added to the wordpiece\n  # embedding vector (and position vector). This is not *strictly* necessary\n  # since the [SEP] token unambiguously separates the sequences, but it makes\n  # it easier for the model to learn the concept of sequences.\n  #\n  # For classification tasks, the first vector (corresponding to [CLS]) is\n  # used as the \"sentence vector\". Note that this only makes sense because\n  # the entire model is fine-tuned.\n  tokens = []\n  segment_ids = []\n  tokens.append(\"[CLS]\")\n  segment_ids.append(0)\n  for token in tokens_a:\n    tokens.append(token)\n    segment_ids.append(0)\n  tokens.append(\"[SEP]\")\n  segment_ids.append(0)\n\n  if tokens_b:\n    for token in tokens_b:\n      tokens.append(token)\n      segment_ids.append(1)\n    tokens.append(\"[SEP]\")\n    segment_ids.append(1)\n\n  input_ids = tokenizer.convert_tokens_to_ids(tokens)\n\n  # The mask has 1 for real tokens and 0 for padding tokens. Only real\n  # tokens are attended to.\n  input_mask = [1] * len(input_ids)\n\n  # Zero-pad up to the sequence length.\n  while len(input_ids) < max_seq_length:\n    input_ids.append(0)\n    input_mask.append(0)\n    segment_ids.append(0)\n\n  assert len(input_ids) == max_seq_length\n  assert len(input_mask) == max_seq_length\n  assert len(segment_ids) == max_seq_length\n\n  label_id = label_map[example.label]\n  if ex_index < 5:\n    tf.logging.info(\"*** Example ***\")\n    tf.logging.info(\"guid: %s\" % (example.guid))\n    tf.logging.info(\"tokens: %s\" % \" \".join(\n        [tokenization.printable_text(x) for x in tokens]))\n    tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\n    tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\n    tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\n    tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\n\n  feature = InputFeatures(\n      input_ids=input_ids,\n      input_mask=input_mask,\n      segment_ids=segment_ids,\n      label_id=label_id,\n      is_real_example=True)\n  return feature\n\n\ndef file_based_convert_examples_to_features(\n    examples, label_list, max_seq_length, tokenizer, output_file):\n  \"\"\"Convert a set of `InputExample`s to a TFRecord file.\"\"\"\n\n  writer = tf.python_io.TFRecordWriter(output_file)\n\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    def create_int_feature(values):\n      f = tf.train.Feature(int64_list=tf.train.Int64List(value=list(values)))\n      return f\n\n    features = collections.OrderedDict()\n    features[\"input_ids\"] = create_int_feature(feature.input_ids)\n    features[\"input_mask\"] = create_int_feature(feature.input_mask)\n    features[\"segment_ids\"] = create_int_feature(feature.segment_ids)\n    features[\"label_ids\"] = create_int_feature([feature.label_id])\n    features[\"is_real_example\"] = create_int_feature(\n        [int(feature.is_real_example)])\n\n    tf_example = tf.train.Example(features=tf.train.Features(feature=features))\n    writer.write(tf_example.SerializeToString())\n  writer.close()\n\n\ndef file_based_input_fn_builder(input_file, seq_length, is_training,\n                                drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  name_to_features = {\n      \"input_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"input_mask\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"segment_ids\": tf.FixedLenFeature([seq_length], tf.int64),\n      \"label_ids\": tf.FixedLenFeature([], tf.int64),\n      \"is_real_example\": tf.FixedLenFeature([], tf.int64),\n  }\n\n  def _decode_record(record, name_to_features):\n    \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n    example = tf.parse_single_example(record, name_to_features)\n\n    # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n    # So cast all int64 to int32.\n    for name in list(example.keys()):\n      t = example[name]\n      if t.dtype == tf.int64:\n        t = tf.to_int32(t)\n      example[name] = t\n\n    return example\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    d = tf.data.TFRecordDataset(input_file)\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            drop_remainder=drop_remainder))\n\n    return d\n\n  return input_fn\n\n\ndef _truncate_seq_pair(tokens_a, tokens_b, max_length):\n  \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\n\n  # This is a simple heuristic which will always truncate the longer sequence\n  # one token at a time. This makes more sense than truncating an equal percent\n  # of tokens from each, since if one sequence is very short then each token\n  # that's truncated likely contains more information than a longer sequence.\n  while True:\n    total_length = len(tokens_a) + len(tokens_b)\n    if total_length <= max_length:\n      break\n    if len(tokens_a) > len(tokens_b):\n      tokens_a.pop()\n    else:\n      tokens_b.pop()\n\n\ndef create_model(albert_config, is_training, input_ids, input_mask, segment_ids,\n                 labels, num_labels, use_one_hot_embeddings):\n  \"\"\"Creates a classification model.\"\"\"\n  model = modeling.AlbertModel(\n      config=albert_config,\n      is_training=is_training,\n      input_ids=input_ids,\n      input_mask=input_mask,\n      token_type_ids=segment_ids,\n      use_one_hot_embeddings=use_one_hot_embeddings)\n\n  # In the demo, we are doing a simple classification task on the entire\n  # segment.\n  #\n  # If you want to use the token-level output, use model.get_sequence_output()\n  # instead.\n  if FLAGS.use_pooled_output:\n    tf.logging.info(\"using pooled output\")\n    output_layer = model.get_pooled_output()\n  else:\n    tf.logging.info(\"using meaned output\")\n    output_layer = tf.reduce_mean(model.get_sequence_output(), axis=1)\n\n  hidden_size = output_layer.shape[-1].value\n\n  output_weights = tf.get_variable(\n      \"output_weights\", [num_labels, hidden_size],\n      initializer=tf.truncated_normal_initializer(stddev=0.02))\n\n  output_bias = tf.get_variable(\n      \"output_bias\", [num_labels], initializer=tf.zeros_initializer())\n\n  with tf.variable_scope(\"loss\"):\n    if is_training:\n      # I.e., 0.1 dropout\n      output_layer = tf.nn.dropout(output_layer, keep_prob=0.9)\n\n    logits = tf.matmul(output_layer, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    predictions = tf.argmax(logits, axis=-1, output_type=tf.int32)\n    probabilities = tf.nn.softmax(logits, axis=-1)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    one_hot_labels = tf.one_hot(labels, depth=num_labels, dtype=tf.float32)\n\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n\n    return (loss, per_example_loss, probabilities, predictions)\n\n\ndef model_fn_builder(albert_config, num_labels, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    label_ids = features[\"label_ids\"]\n    is_real_example = None\n    if \"is_real_example\" in features:\n      is_real_example = tf.cast(features[\"is_real_example\"], dtype=tf.float32)\n    else:\n      is_real_example = tf.ones(tf.shape(label_ids), dtype=tf.float32)\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    (total_loss, per_example_loss, probabilities, predictions) = \\\n        create_model(albert_config, is_training, input_ids, input_mask,\n                     segment_ids, label_ids, num_labels, use_one_hot_embeddings)\n\n    tvars = tf.trainable_variables()\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(per_example_loss, label_ids, predictions, is_real_example):\n        accuracy = tf.metrics.accuracy(\n            labels=label_ids, predictions=predictions, weights=is_real_example)\n        loss = tf.metrics.mean(values=per_example_loss, weights=is_real_example)\n        return {\n            \"eval_accuracy\": accuracy,\n            \"eval_loss\": loss,\n        }\n\n      eval_metrics = (metric_fn,\n                      [per_example_loss, label_ids,\n                       predictions, is_real_example])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          predictions={\"probabilities\": probabilities,\n                       \"predictions\": predictions},\n          scaffold_fn=scaffold_fn)\n    return output_spec\n\n  return model_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef input_fn_builder(features, seq_length, is_training, drop_remainder):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  all_input_ids = []\n  all_input_mask = []\n  all_segment_ids = []\n  all_label_ids = []\n\n  for feature in features:\n    all_input_ids.append(feature.input_ids)\n    all_input_mask.append(feature.input_mask)\n    all_segment_ids.append(feature.segment_ids)\n    all_label_ids.append(feature.label_id)\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    num_examples = len(features)\n\n    # This is for demo purposes and does NOT scale to large data sets. We do\n    # not use Dataset.from_generator() because that uses tf.py_func which is\n    # not TPU compatible. The right way to load data is with TFRecordReader.\n    d = tf.data.Dataset.from_tensor_slices({\n        \"input_ids\":\n            tf.constant(\n                all_input_ids, shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"input_mask\":\n            tf.constant(\n                all_input_mask,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"segment_ids\":\n            tf.constant(\n                all_segment_ids,\n                shape=[num_examples, seq_length],\n                dtype=tf.int32),\n        \"label_ids\":\n            tf.constant(all_label_ids, shape=[num_examples], dtype=tf.int32),\n    })\n\n    if is_training:\n      d = d.repeat()\n      d = d.shuffle(buffer_size=100)\n\n    d = d.batch(batch_size=batch_size, drop_remainder=drop_remainder)\n    return d\n\n  return input_fn\n\n\n# This function is not used by this file but is still used by the Colab and\n# people who depend on it.\ndef convert_examples_to_features(examples, label_list, max_seq_length,\n                                 tokenizer):\n  \"\"\"Convert a set of `InputExample`s to a list of `InputFeatures`.\"\"\"\n\n  features = []\n  for (ex_index, example) in enumerate(examples):\n    if ex_index % 10000 == 0:\n      tf.logging.info(\"Writing example %d of %d\" % (ex_index, len(examples)))\n\n    feature = convert_single_example(ex_index, example, label_list,\n                                     max_seq_length, tokenizer)\n\n    features.append(feature)\n  return features\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  processors = {\n      \"cola\": ColaProcessor,\n      \"mnli\": MnliProcessor,\n      \"mrpc\": MrpcProcessor,\n      \"xnli\": XnliProcessor,\n      \"lcqmc_pair\": LCQMCPairClassificationProcessor\n\n  }\n\n  tokenization.validate_case_matches_checkpoint(FLAGS.do_lower_case,\n                                                FLAGS.init_checkpoint)\n\n  if not FLAGS.do_train and not FLAGS.do_eval and not FLAGS.do_predict:\n    raise ValueError(\n        \"At least one of `do_train`, `do_eval` or `do_predict' must be True.\")\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  if FLAGS.max_seq_length > albert_config.max_position_embeddings:\n    raise ValueError(\n        \"Cannot use sequence length %d because the ALBERT model \"\n        \"was only trained up to sequence length %d\" %\n        (FLAGS.max_seq_length, albert_config.max_position_embeddings))\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  task_name = FLAGS.task_name.lower()\n\n  if task_name not in processors:\n    raise ValueError(\"Task not found: %s\" % (task_name))\n\n  processor = processors[task_name]()\n\n  label_list = processor.get_labels()\n\n  tokenizer = tokenization.FullTokenizer(\n      vocab_file=FLAGS.vocab_file, do_lower_case=FLAGS.do_lower_case,\n      spm_model_file=FLAGS.spm_model_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  train_examples = None\n  num_train_steps = None\n  num_warmup_steps = None\n  if FLAGS.do_train:\n    train_examples = processor.get_train_examples(FLAGS.data_dir)\n    num_train_steps = int(\n        len(train_examples) / FLAGS.train_batch_size * FLAGS.num_train_epochs)\n    num_warmup_steps = int(num_train_steps * FLAGS.warmup_proportion)\n\n  model_fn = model_fn_builder(\n      albert_config=albert_config,\n      num_labels=len(label_list),\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=num_train_steps,\n      num_warmup_steps=num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size,\n      predict_batch_size=FLAGS.predict_batch_size)\n\n  if FLAGS.do_train:\n    train_file = os.path.join(FLAGS.output_dir, \"train.tf_record\")\n    file_based_convert_examples_to_features(\n        train_examples, label_list, FLAGS.max_seq_length, tokenizer, train_file)\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Num examples = %d\", len(train_examples))\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    tf.logging.info(\"  Num steps = %d\", num_train_steps)\n    train_input_fn = file_based_input_fn_builder(\n        input_file=train_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=True,\n        drop_remainder=True)\n    estimator.train(input_fn=train_input_fn, max_steps=num_train_steps)\n\n  if FLAGS.do_eval:\n    eval_examples = processor.get_dev_examples(FLAGS.data_dir)\n    num_actual_eval_examples = len(eval_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on. These do NOT count towards the metric (all tf.metrics\n      # support a per-instance weight, and these get a weight of 0.0).\n      while len(eval_examples) % FLAGS.eval_batch_size != 0:\n        eval_examples.append(PaddingInputExample())\n\n    eval_file = os.path.join(FLAGS.output_dir, \"eval.tf_record\")\n    file_based_convert_examples_to_features(\n        eval_examples, label_list, FLAGS.max_seq_length, tokenizer, eval_file)\n\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(eval_examples), num_actual_eval_examples,\n                    len(eval_examples) - num_actual_eval_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    # This tells the estimator to run through the entire set.\n    eval_steps = None\n    # However, if running eval on the TPU, you will need to specify the\n    # number of steps.\n    if FLAGS.use_tpu:\n      assert len(eval_examples) % FLAGS.eval_batch_size == 0\n      eval_steps = int(len(eval_examples) // FLAGS.eval_batch_size)\n\n    eval_drop_remainder = True if FLAGS.use_tpu else False\n    eval_input_fn = file_based_input_fn_builder(\n        input_file=eval_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=eval_drop_remainder)\n\n    #######################################################################################################################\n    # evaluate all checkpoints; you can use the checkpoint with the best dev accuarcy\n    steps_and_files = []\n    filenames = tf.gfile.ListDirectory(FLAGS.output_dir)\n    for filename in filenames:\n        if filename.endswith(\".index\"):\n            ckpt_name = filename[:-6]\n            cur_filename = os.path.join(FLAGS.output_dir, ckpt_name)\n            global_step = int(cur_filename.split(\"-\")[-1])\n            tf.logging.info(\"Add {} to eval list.\".format(cur_filename))\n            steps_and_files.append([global_step, cur_filename])\n    steps_and_files = sorted(steps_and_files, key=lambda x: x[0])\n\n    output_eval_file = os.path.join(FLAGS.data_dir, \"eval_results_albert_zh.txt\")\n    print(\"output_eval_file:\",output_eval_file)\n    tf.logging.info(\"output_eval_file:\"+output_eval_file)\n    with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n        for global_step, filename in sorted(steps_and_files, key=lambda x: x[0]):\n            result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps, checkpoint_path=filename)\n\n            tf.logging.info(\"***** Eval results %s *****\" % (filename))\n            writer.write(\"***** Eval results %s *****\\n\" % (filename))\n            for key in sorted(result.keys()):\n                tf.logging.info(\"  %s = %s\", key, str(result[key]))\n                writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n    #######################################################################################################################\n    # result = estimator.evaluate(input_fn=eval_input_fn, steps=eval_steps)\n    # output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    # with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n    #  tf.logging.info(\"***** Eval results *****\")\n    #  for key in sorted(result.keys()):\n    #    tf.logging.info(\"  %s = %s\", key, str(result[key]))\n    #    writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\n  if FLAGS.do_predict:\n    predict_examples = processor.get_test_examples(FLAGS.data_dir)\n    num_actual_predict_examples = len(predict_examples)\n    if FLAGS.use_tpu:\n      # TPU requires a fixed batch size for all batches, therefore the number\n      # of examples must be a multiple of the batch size, or else examples\n      # will get dropped. So we pad with fake examples which are ignored\n      # later on.\n      while len(predict_examples) % FLAGS.predict_batch_size != 0:\n        predict_examples.append(PaddingInputExample())\n\n    predict_file = os.path.join(FLAGS.output_dir, \"predict.tf_record\")\n    file_based_convert_examples_to_features(predict_examples, label_list,\n                                            FLAGS.max_seq_length, tokenizer,\n                                            predict_file)\n\n    tf.logging.info(\"***** Running prediction*****\")\n    tf.logging.info(\"  Num examples = %d (%d actual, %d padding)\",\n                    len(predict_examples), num_actual_predict_examples,\n                    len(predict_examples) - num_actual_predict_examples)\n    tf.logging.info(\"  Batch size = %d\", FLAGS.predict_batch_size)\n\n    predict_drop_remainder = True if FLAGS.use_tpu else False\n    predict_input_fn = file_based_input_fn_builder(\n        input_file=predict_file,\n        seq_length=FLAGS.max_seq_length,\n        is_training=False,\n        drop_remainder=predict_drop_remainder)\n\n    result = estimator.predict(input_fn=predict_input_fn)\n\n    output_predict_file = os.path.join(FLAGS.output_dir, \"test_results.tsv\")\n    output_submit_file = os.path.join(FLAGS.output_dir, \"submit_results.tsv\")\n    with tf.gfile.GFile(output_predict_file, \"w\") as pred_writer,\\\n        tf.gfile.GFile(output_submit_file, \"w\") as sub_writer:\n      num_written_lines = 0\n      tf.logging.info(\"***** Predict results *****\")\n      for (i, (example, prediction)) in\\\n          enumerate(zip(predict_examples, result)):\n        probabilities = prediction[\"probabilities\"]\n        if i >= num_actual_predict_examples:\n          break\n        output_line = \"\\t\".join(\n            str(class_probability)\n            for class_probability in probabilities) + \"\\n\"\n        pred_writer.write(output_line)\n\n        actual_label = label_list[int(prediction[\"predictions\"])]\n        sub_writer.write(\n            six.ensure_str(example.guid) + \"\\t\" + actual_label + \"\\n\")\n        num_written_lines += 1\n    assert num_written_lines == num_actual_predict_examples\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"data_dir\")\n  flags.mark_flag_as_required(\"task_name\")\n  flags.mark_flag_as_required(\"vocab_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()"
        },
        {
          "name": "run_pretraining.py",
          "type": "blob",
          "size": 19.3857421875,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Run masked LM/next sentence masked_lm pre-training for BERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport modeling\nimport optimization\nimport tensorflow as tf\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"bert_config_file\", None,\n    \"The config json file corresponding to the pre-trained BERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"input_file\", None,\n    \"Input TF example files (can be a glob or comma separated).\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\n## Other parameters\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained BERT model).\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 128,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded. Must match data generation.\")\n\nflags.DEFINE_integer(\n    \"max_predictions_per_seq\", 20,\n    \"Maximum number of masked LM predictions per sequence. \"\n    \"Must match data generation.\")\n\nflags.DEFINE_bool(\"do_train\", False, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 32, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 8, \"Total batch size for eval.\")\n\nflags.DEFINE_float(\"learning_rate\", 5e-5, \"The initial learning rate for Adam.\")\n\nflags.DEFINE_integer(\"num_train_steps\", 100000, \"Number of training steps.\")\n\nflags.DEFINE_integer(\"num_warmup_steps\", 10000, \"Number of warmup steps.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 1000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\"max_eval_steps\", 100, \"Maximum number of eval steps.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\n\ndef model_fn_builder(bert_config, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    masked_lm_positions = features[\"masked_lm_positions\"]\n    masked_lm_ids = features[\"masked_lm_ids\"]\n    masked_lm_weights = features[\"masked_lm_weights\"]\n    next_sentence_labels = features[\"next_sentence_labels\"]\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    model = modeling.BertModel(\n        config=bert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    (masked_lm_loss,\n     masked_lm_example_loss, masked_lm_log_probs) = get_masked_lm_output(\n         bert_config, model.get_sequence_output(), model.get_embedding_table(),model.get_embedding_table_2(),\n         masked_lm_positions, masked_lm_ids, masked_lm_weights)\n\n    (next_sentence_loss, next_sentence_example_loss,\n     next_sentence_log_probs) = get_next_sentence_output(\n         bert_config, model.get_pooled_output(), next_sentence_labels)\n\n    total_loss = masked_lm_loss + next_sentence_loss\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    print(\"init_checkpoint:\",init_checkpoint)\n    scaffold_fn = None\n    if init_checkpoint:\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\n      if use_tpu:\n\n        def tpu_scaffold():\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps, use_tpu)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n                    masked_lm_weights, next_sentence_example_loss,\n                    next_sentence_log_probs, next_sentence_labels):\n        \"\"\"Computes the loss and accuracy of the model.\"\"\"\n        masked_lm_log_probs = tf.reshape(masked_lm_log_probs,[-1, masked_lm_log_probs.shape[-1]])\n        masked_lm_predictions = tf.argmax(masked_lm_log_probs, axis=-1, output_type=tf.int32)\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n\n        next_sentence_log_probs = tf.reshape(\n            next_sentence_log_probs, [-1, next_sentence_log_probs.shape[-1]])\n        next_sentence_predictions = tf.argmax(\n            next_sentence_log_probs, axis=-1, output_type=tf.int32)\n        next_sentence_labels = tf.reshape(next_sentence_labels, [-1])\n        next_sentence_accuracy = tf.metrics.accuracy(\n            labels=next_sentence_labels, predictions=next_sentence_predictions)\n        next_sentence_mean_loss = tf.metrics.mean(\n            values=next_sentence_example_loss)\n\n        return {\n            \"masked_lm_accuracy\": masked_lm_accuracy,\n            \"masked_lm_loss\": masked_lm_mean_loss,\n            \"next_sentence_accuracy\": next_sentence_accuracy,\n            \"next_sentence_loss\": next_sentence_mean_loss,\n        }\n\n      # next_sentence_example_loss=0.0 TODO\n      # next_sentence_log_probs=0.0 # TODO\n      eval_metrics = (metric_fn, [\n          masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n          masked_lm_weights, next_sentence_example_loss,\n          next_sentence_log_probs, next_sentence_labels\n      ])\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\"Only TRAIN and EVAL modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef get_masked_lm_output(bert_config, input_tensor, output_weights,project_weights, positions,\n                         label_ids, label_weights):\n  \"\"\"Get loss and log probs for the masked LM.\"\"\"\n  input_tensor = gather_indexes(input_tensor, positions)\n\n  with tf.variable_scope(\"cls/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=bert_config.hidden_size,\n          activation=modeling.get_activation(bert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              bert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[bert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    # logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    # input_tensor=[-1,hidden_size], project_weights=[embedding_size, hidden_size], project_weights_transpose=[hidden_size, embedding_size]--->[-1, embedding_size]\n    input_project = tf.matmul(input_tensor, project_weights, transpose_b=True)\n    logits = tf.matmul(input_project, output_weights, transpose_b=True)\n    #  # input_project=[-1, embedding_size], output_weights=[vocab_size, embedding_size], output_weights_transpose=[embedding_size, vocab_size] ---> [-1, vocab_size]\n\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    label_ids = tf.reshape(label_ids, [-1])\n    label_weights = tf.reshape(label_weights, [-1])\n\n    one_hot_labels = tf.one_hot(label_ids, depth=bert_config.vocab_size, dtype=tf.float32)\n\n    # The `positions` tensor might be zero-padded (if the sequence is too\n    # short to have the maximum number of predictions). The `label_weights`\n    # tensor has a value of 1.0 for every real prediction and 0.0 for the\n    # padding predictions.\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator / denominator\n\n  return (loss, per_example_loss, log_probs)\n\n\ndef get_next_sentence_output(bert_config, input_tensor, labels):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, bert_config.hidden_size],\n        initializer=modeling.create_initializer(bert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    name_to_features = {\n        \"input_ids\":\n            tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"input_mask\":\n            tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"segment_ids\":\n            tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"masked_lm_positions\":\n            tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n        \"masked_lm_ids\":\n            tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n        \"masked_lm_weights\":\n            tf.FixedLenFeature([max_predictions_per_seq], tf.float32),\n        \"next_sentence_labels\":\n            tf.FixedLenFeature([1], tf.int64),\n    }\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.contrib.data.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don't want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don't* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(\n        tf.contrib.data.map_and_batch(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            num_parallel_batches=num_cpu_threads,\n            drop_remainder=True))\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval: # 必须是训练或验证的类型\n    raise ValueError(\"At least one of `do_train` or `do_eval` must be True.\")\n\n  bert_config = modeling.BertConfig.from_json_file(FLAGS.bert_config_file) # 从json文件中获得配置信息\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = [] # 输入可以是多个文件，以“逗号隔开”；可以是一个匹配形式的，如“input_x*”\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Input Files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n      tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver( # TODO\n            tpu=FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  print(\"###tpu_cluster_resolver:\",tpu_cluster_resolver,\";FLAGS.use_tpu:\",FLAGS.use_tpu,\";FLAGS.tpu_name:\",FLAGS.tpu_name,\";FLAGS.tpu_zone:\",FLAGS.tpu_zone)\n  # ###tpu_cluster_resolver: <tensorflow.python.distribute.cluster_resolver.tpu_cluster_resolver.TPUClusterResolver object at 0x7f4b387b06a0> ;FLAGS.use_tpu: True ;FLAGS.tpu_name: grpc://10.240.1.83:8470\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      keep_checkpoint_max=20, # 10\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(\n      bert_config=bert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)\n\n    result = estimator.evaluate(input_fn=eval_input_fn, steps=FLAGS.max_eval_steps)\n\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    with tf.gfile.GFile(output_eval_file, \"w\") as writer:\n      tf.logging.info(\"***** Eval results *****\")\n      for key in sorted(result.keys()):\n        tf.logging.info(\"  %s = %s\", key, str(result[key]))\n        writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"bert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()\n"
        },
        {
          "name": "run_pretraining_google.py",
          "type": "blob",
          "size": 21.24609375,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"Run masked LM/next sentence masked_lm pre-training for ALBERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport time\n\nfrom six.moves import range\nimport tensorflow as tf\n\nimport modeling_google as modeling\nimport optimization_google as optimization\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"input_file\", None,\n    \"Input TF example files (can be a glob or comma separated).\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\nflags.DEFINE_string(\n    \"export_dir\", None,\n    \"The output directory where the saved models will be written.\")\n## Other parameters\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained ALBERT model).\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded. Must match data generation.\")\n\nflags.DEFINE_integer(\n    \"max_predictions_per_seq\", 20,\n    \"Maximum number of masked LM predictions per sequence. \"\n    \"Must match data generation.\")\n\nflags.DEFINE_bool(\"do_train\", True, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 4096, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 64, \"Total batch size for eval.\")\n\nflags.DEFINE_enum(\"optimizer\", \"lamb\", [\"adamw\", \"lamb\"],\n                  \"The optimizer for training.\")\n\nflags.DEFINE_float(\"learning_rate\", 0.00176, \"The initial learning rate.\")\n\nflags.DEFINE_float(\"poly_power\", 1.0, \"The power of poly decay.\")\n\nflags.DEFINE_integer(\"num_train_steps\", 125000, \"Number of training steps.\")\n\nflags.DEFINE_integer(\"num_warmup_steps\", 3125, \"Number of warmup steps.\")\n\nflags.DEFINE_integer(\"start_warmup_step\", 0, \"The starting step of warmup.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 5000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\"max_eval_steps\", 100, \"Maximum number of eval steps.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\nflags.DEFINE_bool(\"init_from_group0\", False, \"Whether to initialize\"\n                  \"parameters of other groups from group 0\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\nflags.DEFINE_float(\n    \"masked_lm_budget\", 0,\n    \"If >0, the ratio of masked ngrams to unmasked ngrams. Default 0,\"\n    \"for offline masking\")\n\n\ndef model_fn_builder(albert_config, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings, optimizer, poly_power,\n                     start_warmup_step):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    masked_lm_positions = features[\"masked_lm_positions\"]\n    masked_lm_ids = features[\"masked_lm_ids\"]\n    masked_lm_weights = features[\"masked_lm_weights\"]\n    # Note: We keep this feature name `next_sentence_labels` to be compatible\n    # with the original data created by lanzhzh@. However, in the ALBERT case\n    # it does represent sentence_order_labels.\n    sentence_order_labels = features[\"next_sentence_labels\"]\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    model = modeling.AlbertModel(\n        config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    (masked_lm_loss, masked_lm_example_loss,\n     masked_lm_log_probs) = get_masked_lm_output(albert_config,\n                                                 model.get_sequence_output(),\n                                                 model.get_embedding_table(),\n                                                 masked_lm_positions,\n                                                 masked_lm_ids,\n                                                 masked_lm_weights)\n\n    (sentence_order_loss, sentence_order_example_loss,\n     sentence_order_log_probs) = get_sentence_order_output(\n         albert_config, model.get_pooled_output(), sentence_order_labels)\n\n    total_loss = masked_lm_loss + sentence_order_loss\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      tf.logging.info(\"number of hidden group %d to initialize\",\n                      albert_config.num_hidden_groups)\n      num_of_initialize_group = 1\n      if FLAGS.init_from_group0:\n        num_of_initialize_group = albert_config.num_hidden_groups\n        if albert_config.net_structure_type > 0:\n          num_of_initialize_group = albert_config.num_hidden_layers\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(\n              tvars, init_checkpoint, num_of_initialize_group)\n      if use_tpu:\n\n        def tpu_scaffold():\n          for gid in range(num_of_initialize_group):\n            tf.logging.info(\"initialize the %dth layer\", gid)\n            tf.logging.info(assignment_map[gid])\n            tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        for gid in range(num_of_initialize_group):\n          tf.logging.info(\"initialize the %dth layer\", gid)\n          tf.logging.info(assignment_map[gid])\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps,\n          use_tpu, optimizer, poly_power, start_warmup_step)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(*args):\n        \"\"\"Computes the loss and accuracy of the model.\"\"\"\n        (masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n         masked_lm_weights, sentence_order_example_loss,\n         sentence_order_log_probs, sentence_order_labels) = args[:7]\n\n\n        masked_lm_log_probs = tf.reshape(masked_lm_log_probs,\n                                         [-1, masked_lm_log_probs.shape[-1]])\n        masked_lm_predictions = tf.argmax(\n            masked_lm_log_probs, axis=-1, output_type=tf.int32)\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n\n        metrics = {\n            \"masked_lm_accuracy\": masked_lm_accuracy,\n            \"masked_lm_loss\": masked_lm_mean_loss,\n        }\n\n        sentence_order_log_probs = tf.reshape(\n            sentence_order_log_probs, [-1, sentence_order_log_probs.shape[-1]])\n        sentence_order_predictions = tf.argmax(\n            sentence_order_log_probs, axis=-1, output_type=tf.int32)\n        sentence_order_labels = tf.reshape(sentence_order_labels, [-1])\n        sentence_order_accuracy = tf.metrics.accuracy(\n            labels=sentence_order_labels,\n            predictions=sentence_order_predictions)\n        sentence_order_mean_loss = tf.metrics.mean(\n            values=sentence_order_example_loss)\n        metrics.update({\n            \"sentence_order_accuracy\": sentence_order_accuracy,\n            \"sentence_order_loss\": sentence_order_mean_loss\n        })\n        return metrics\n\n      metric_values = [\n          masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n          masked_lm_weights, sentence_order_example_loss,\n          sentence_order_log_probs, sentence_order_labels\n      ]\n\n      eval_metrics = (metric_fn, metric_values)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\"Only TRAIN and EVAL modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef get_masked_lm_output(albert_config, input_tensor, output_weights, positions,\n                         label_ids, label_weights):\n  \"\"\"Get loss and log probs for the masked LM.\"\"\"\n  input_tensor = gather_indexes(input_tensor, positions)\n\n\n  with tf.variable_scope(\"cls/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=albert_config.embedding_size,\n          activation=modeling.get_activation(albert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[albert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    label_ids = tf.reshape(label_ids, [-1])\n    label_weights = tf.reshape(label_weights, [-1])\n\n    one_hot_labels = tf.one_hot(\n        label_ids, depth=albert_config.vocab_size, dtype=tf.float32)\n\n    # The `positions` tensor might be zero-padded (if the sequence is too\n    # short to have the maximum number of predictions). The `label_weights`\n    # tensor has a value of 1.0 for every real prediction and 0.0 for the\n    # padding predictions.\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator / denominator\n\n  return (loss, per_example_loss, log_probs)\n\n\ndef get_sentence_order_output(albert_config, input_tensor, labels):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, albert_config.hidden_size],\n        initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    name_to_features = {\n        \"input_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"input_mask\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"segment_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        # Note: We keep this feature name `next_sentence_labels` to be\n        # compatible with the original data created by lanzhzh@. However, in\n        # the ALBERT case it does represent sentence_order_labels.\n        \"next_sentence_labels\": tf.FixedLenFeature([1], tf.int64),\n    }\n\n    if FLAGS.masked_lm_budget:\n      name_to_features.update({\n          \"token_boundary\":\n              tf.FixedLenFeature([max_seq_length], tf.int64)})\n    else:\n      name_to_features.update({\n          \"masked_lm_positions\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_ids\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_weights\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.float32)})\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.contrib.data.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don't want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don't* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(\n        tf.data.experimental.map_and_batch_with_legacy_function(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            num_parallel_batches=num_cpu_threads,\n            drop_remainder=True))\n    tf.logging.info(d)\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval:\n    raise ValueError(\"At least one of `do_train` or `do_eval` must be True.\")\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Input Files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(\n      albert_config=albert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      optimizer=FLAGS.optimizer,\n      poly_power=FLAGS.poly_power,\n      start_warmup_step=FLAGS.start_warmup_step)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n    global_step = -1\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    tf.gfile.MakeDirs(FLAGS.export_dir)\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)\n    while global_step < FLAGS.num_train_steps:\n      if estimator.latest_checkpoint() is None:\n        tf.logging.info(\"No checkpoint found yet. Sleeping.\")\n        time.sleep(1)\n      else:\n        result = estimator.evaluate(\n            input_fn=eval_input_fn, steps=FLAGS.max_eval_steps)\n        global_step = result[\"global_step\"]\n        tf.logging.info(\"***** Eval results *****\")\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()"
        },
        {
          "name": "run_pretraining_google_fast.py",
          "type": "blob",
          "size": 21.2509765625,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n\"\"\"Run masked LM/next sentence masked_lm pre-training for ALBERT.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\nimport time\n\nfrom six.moves import range\nimport tensorflow as tf\n\nimport modeling_google_fast as modeling\nimport optimization_google as optimization\n\nflags = tf.flags\n\nFLAGS = flags.FLAGS\n\n## Required parameters\nflags.DEFINE_string(\n    \"albert_config_file\", None,\n    \"The config json file corresponding to the pre-trained ALBERT model. \"\n    \"This specifies the model architecture.\")\n\nflags.DEFINE_string(\n    \"input_file\", None,\n    \"Input TF example files (can be a glob or comma separated).\")\n\nflags.DEFINE_string(\n    \"output_dir\", None,\n    \"The output directory where the model checkpoints will be written.\")\n\nflags.DEFINE_string(\n    \"export_dir\", None,\n    \"The output directory where the saved models will be written.\")\n## Other parameters\nflags.DEFINE_string(\n    \"init_checkpoint\", None,\n    \"Initial checkpoint (usually from a pre-trained ALBERT model).\")\n\nflags.DEFINE_integer(\n    \"max_seq_length\", 512,\n    \"The maximum total input sequence length after WordPiece tokenization. \"\n    \"Sequences longer than this will be truncated, and sequences shorter \"\n    \"than this will be padded. Must match data generation.\")\n\nflags.DEFINE_integer(\n    \"max_predictions_per_seq\", 20,\n    \"Maximum number of masked LM predictions per sequence. \"\n    \"Must match data generation.\")\n\nflags.DEFINE_bool(\"do_train\", True, \"Whether to run training.\")\n\nflags.DEFINE_bool(\"do_eval\", False, \"Whether to run eval on the dev set.\")\n\nflags.DEFINE_integer(\"train_batch_size\", 4096, \"Total batch size for training.\")\n\nflags.DEFINE_integer(\"eval_batch_size\", 64, \"Total batch size for eval.\")\n\nflags.DEFINE_enum(\"optimizer\", \"lamb\", [\"adamw\", \"lamb\"],\n                  \"The optimizer for training.\")\n\nflags.DEFINE_float(\"learning_rate\", 0.00176, \"The initial learning rate.\")\n\nflags.DEFINE_float(\"poly_power\", 1.0, \"The power of poly decay.\")\n\nflags.DEFINE_integer(\"num_train_steps\", 125000, \"Number of training steps.\")\n\nflags.DEFINE_integer(\"num_warmup_steps\", 3125, \"Number of warmup steps.\")\n\nflags.DEFINE_integer(\"start_warmup_step\", 0, \"The starting step of warmup.\")\n\nflags.DEFINE_integer(\"save_checkpoints_steps\", 5000,\n                     \"How often to save the model checkpoint.\")\n\nflags.DEFINE_integer(\"iterations_per_loop\", 1000,\n                     \"How many steps to make in each estimator call.\")\n\nflags.DEFINE_integer(\"max_eval_steps\", 100, \"Maximum number of eval steps.\")\n\nflags.DEFINE_bool(\"use_tpu\", False, \"Whether to use TPU or GPU/CPU.\")\n\nflags.DEFINE_bool(\"init_from_group0\", False, \"Whether to initialize\"\n                  \"parameters of other groups from group 0\")\n\ntf.flags.DEFINE_string(\n    \"tpu_name\", None,\n    \"The Cloud TPU to use for training. This should be either the name \"\n    \"used when creating the Cloud TPU, or a grpc://ip.address.of.tpu:8470 \"\n    \"url.\")\n\ntf.flags.DEFINE_string(\n    \"tpu_zone\", None,\n    \"[Optional] GCE zone where the Cloud TPU is located in. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\n    \"gcp_project\", None,\n    \"[Optional] Project name for the Cloud TPU-enabled project. If not \"\n    \"specified, we will attempt to automatically detect the GCE project from \"\n    \"metadata.\")\n\ntf.flags.DEFINE_string(\"master\", None, \"[Optional] TensorFlow master URL.\")\n\nflags.DEFINE_integer(\n    \"num_tpu_cores\", 8,\n    \"Only used if `use_tpu` is True. Total number of TPU cores to use.\")\n\nflags.DEFINE_float(\n    \"masked_lm_budget\", 0,\n    \"If >0, the ratio of masked ngrams to unmasked ngrams. Default 0,\"\n    \"for offline masking\")\n\n\ndef model_fn_builder(albert_config, init_checkpoint, learning_rate,\n                     num_train_steps, num_warmup_steps, use_tpu,\n                     use_one_hot_embeddings, optimizer, poly_power,\n                     start_warmup_step):\n  \"\"\"Returns `model_fn` closure for TPUEstimator.\"\"\"\n\n  def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\n    \"\"\"The `model_fn` for TPUEstimator.\"\"\"\n\n    tf.logging.info(\"*** Features ***\")\n    for name in sorted(features.keys()):\n      tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\n\n    input_ids = features[\"input_ids\"]\n    input_mask = features[\"input_mask\"]\n    segment_ids = features[\"segment_ids\"]\n    masked_lm_positions = features[\"masked_lm_positions\"]\n    masked_lm_ids = features[\"masked_lm_ids\"]\n    masked_lm_weights = features[\"masked_lm_weights\"]\n    # Note: We keep this feature name `next_sentence_labels` to be compatible\n    # with the original data created by lanzhzh@. However, in the ALBERT case\n    # it does represent sentence_order_labels.\n    sentence_order_labels = features[\"next_sentence_labels\"]\n\n    is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n\n    model = modeling.AlbertModel(\n        config=albert_config,\n        is_training=is_training,\n        input_ids=input_ids,\n        input_mask=input_mask,\n        token_type_ids=segment_ids,\n        use_one_hot_embeddings=use_one_hot_embeddings)\n\n    (masked_lm_loss, masked_lm_example_loss,\n     masked_lm_log_probs) = get_masked_lm_output(albert_config,\n                                                 model.get_sequence_output(),\n                                                 model.get_embedding_table(),\n                                                 masked_lm_positions,\n                                                 masked_lm_ids,\n                                                 masked_lm_weights)\n\n    (sentence_order_loss, sentence_order_example_loss,\n     sentence_order_log_probs) = get_sentence_order_output(\n         albert_config, model.get_pooled_output(), sentence_order_labels)\n\n    total_loss = masked_lm_loss + sentence_order_loss\n\n    tvars = tf.trainable_variables()\n\n    initialized_variable_names = {}\n    scaffold_fn = None\n    if init_checkpoint:\n      tf.logging.info(\"number of hidden group %d to initialize\",\n                      albert_config.num_hidden_groups)\n      num_of_initialize_group = 1\n      if FLAGS.init_from_group0:\n        num_of_initialize_group = albert_config.num_hidden_groups\n        if albert_config.net_structure_type > 0:\n          num_of_initialize_group = albert_config.num_hidden_layers\n      (assignment_map, initialized_variable_names\n      ) = modeling.get_assignment_map_from_checkpoint(\n              tvars, init_checkpoint, num_of_initialize_group)\n      if use_tpu:\n\n        def tpu_scaffold():\n          for gid in range(num_of_initialize_group):\n            tf.logging.info(\"initialize the %dth layer\", gid)\n            tf.logging.info(assignment_map[gid])\n            tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n          return tf.train.Scaffold()\n\n        scaffold_fn = tpu_scaffold\n      else:\n        for gid in range(num_of_initialize_group):\n          tf.logging.info(\"initialize the %dth layer\", gid)\n          tf.logging.info(assignment_map[gid])\n          tf.train.init_from_checkpoint(init_checkpoint, assignment_map[gid])\n\n    tf.logging.info(\"**** Trainable Variables ****\")\n    for var in tvars:\n      init_string = \"\"\n      if var.name in initialized_variable_names:\n        init_string = \", *INIT_FROM_CKPT*\"\n      tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\n                      init_string)\n\n    output_spec = None\n    if mode == tf.estimator.ModeKeys.TRAIN:\n      train_op = optimization.create_optimizer(\n          total_loss, learning_rate, num_train_steps, num_warmup_steps,\n          use_tpu, optimizer, poly_power, start_warmup_step)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          train_op=train_op,\n          scaffold_fn=scaffold_fn)\n    elif mode == tf.estimator.ModeKeys.EVAL:\n\n      def metric_fn(*args):\n        \"\"\"Computes the loss and accuracy of the model.\"\"\"\n        (masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n         masked_lm_weights, sentence_order_example_loss,\n         sentence_order_log_probs, sentence_order_labels) = args[:7]\n\n\n        masked_lm_log_probs = tf.reshape(masked_lm_log_probs,\n                                         [-1, masked_lm_log_probs.shape[-1]])\n        masked_lm_predictions = tf.argmax(\n            masked_lm_log_probs, axis=-1, output_type=tf.int32)\n        masked_lm_example_loss = tf.reshape(masked_lm_example_loss, [-1])\n        masked_lm_ids = tf.reshape(masked_lm_ids, [-1])\n        masked_lm_weights = tf.reshape(masked_lm_weights, [-1])\n        masked_lm_accuracy = tf.metrics.accuracy(\n            labels=masked_lm_ids,\n            predictions=masked_lm_predictions,\n            weights=masked_lm_weights)\n        masked_lm_mean_loss = tf.metrics.mean(\n            values=masked_lm_example_loss, weights=masked_lm_weights)\n\n        metrics = {\n            \"masked_lm_accuracy\": masked_lm_accuracy,\n            \"masked_lm_loss\": masked_lm_mean_loss,\n        }\n\n        sentence_order_log_probs = tf.reshape(\n            sentence_order_log_probs, [-1, sentence_order_log_probs.shape[-1]])\n        sentence_order_predictions = tf.argmax(\n            sentence_order_log_probs, axis=-1, output_type=tf.int32)\n        sentence_order_labels = tf.reshape(sentence_order_labels, [-1])\n        sentence_order_accuracy = tf.metrics.accuracy(\n            labels=sentence_order_labels,\n            predictions=sentence_order_predictions)\n        sentence_order_mean_loss = tf.metrics.mean(\n            values=sentence_order_example_loss)\n        metrics.update({\n            \"sentence_order_accuracy\": sentence_order_accuracy,\n            \"sentence_order_loss\": sentence_order_mean_loss\n        })\n        return metrics\n\n      metric_values = [\n          masked_lm_example_loss, masked_lm_log_probs, masked_lm_ids,\n          masked_lm_weights, sentence_order_example_loss,\n          sentence_order_log_probs, sentence_order_labels\n      ]\n\n      eval_metrics = (metric_fn, metric_values)\n\n      output_spec = tf.contrib.tpu.TPUEstimatorSpec(\n          mode=mode,\n          loss=total_loss,\n          eval_metrics=eval_metrics,\n          scaffold_fn=scaffold_fn)\n    else:\n      raise ValueError(\"Only TRAIN and EVAL modes are supported: %s\" % (mode))\n\n    return output_spec\n\n  return model_fn\n\n\ndef get_masked_lm_output(albert_config, input_tensor, output_weights, positions,\n                         label_ids, label_weights):\n  \"\"\"Get loss and log probs for the masked LM.\"\"\"\n  input_tensor = gather_indexes(input_tensor, positions)\n\n\n  with tf.variable_scope(\"cls/predictions\"):\n    # We apply one more non-linear transformation before the output layer.\n    # This matrix is not used after pre-training.\n    with tf.variable_scope(\"transform\"):\n      input_tensor = tf.layers.dense(\n          input_tensor,\n          units=albert_config.embedding_size,\n          activation=modeling.get_activation(albert_config.hidden_act),\n          kernel_initializer=modeling.create_initializer(\n              albert_config.initializer_range))\n      input_tensor = modeling.layer_norm(input_tensor)\n\n    # The output weights are the same as the input embeddings, but there is\n    # an output-only bias for each token.\n    output_bias = tf.get_variable(\n        \"output_bias\",\n        shape=[albert_config.vocab_size],\n        initializer=tf.zeros_initializer())\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n\n    label_ids = tf.reshape(label_ids, [-1])\n    label_weights = tf.reshape(label_weights, [-1])\n\n    one_hot_labels = tf.one_hot(\n        label_ids, depth=albert_config.vocab_size, dtype=tf.float32)\n\n    # The `positions` tensor might be zero-padded (if the sequence is too\n    # short to have the maximum number of predictions). The `label_weights`\n    # tensor has a value of 1.0 for every real prediction and 0.0 for the\n    # padding predictions.\n    per_example_loss = -tf.reduce_sum(log_probs * one_hot_labels, axis=[-1])\n    numerator = tf.reduce_sum(label_weights * per_example_loss)\n    denominator = tf.reduce_sum(label_weights) + 1e-5\n    loss = numerator / denominator\n\n  return (loss, per_example_loss, log_probs)\n\n\ndef get_sentence_order_output(albert_config, input_tensor, labels):\n  \"\"\"Get loss and log probs for the next sentence prediction.\"\"\"\n\n  # Simple binary classification. Note that 0 is \"next sentence\" and 1 is\n  # \"random sentence\". This weight matrix is not used after pre-training.\n  with tf.variable_scope(\"cls/seq_relationship\"):\n    output_weights = tf.get_variable(\n        \"output_weights\",\n        shape=[2, albert_config.hidden_size],\n        initializer=modeling.create_initializer(\n            albert_config.initializer_range))\n    output_bias = tf.get_variable(\n        \"output_bias\", shape=[2], initializer=tf.zeros_initializer())\n\n    logits = tf.matmul(input_tensor, output_weights, transpose_b=True)\n    logits = tf.nn.bias_add(logits, output_bias)\n    log_probs = tf.nn.log_softmax(logits, axis=-1)\n    labels = tf.reshape(labels, [-1])\n    one_hot_labels = tf.one_hot(labels, depth=2, dtype=tf.float32)\n    per_example_loss = -tf.reduce_sum(one_hot_labels * log_probs, axis=-1)\n    loss = tf.reduce_mean(per_example_loss)\n    return (loss, per_example_loss, log_probs)\n\n\ndef gather_indexes(sequence_tensor, positions):\n  \"\"\"Gathers the vectors at the specific positions over a minibatch.\"\"\"\n  sequence_shape = modeling.get_shape_list(sequence_tensor, expected_rank=3)\n  batch_size = sequence_shape[0]\n  seq_length = sequence_shape[1]\n  width = sequence_shape[2]\n\n  flat_offsets = tf.reshape(\n      tf.range(0, batch_size, dtype=tf.int32) * seq_length, [-1, 1])\n  flat_positions = tf.reshape(positions + flat_offsets, [-1])\n  flat_sequence_tensor = tf.reshape(sequence_tensor,\n                                    [batch_size * seq_length, width])\n  output_tensor = tf.gather(flat_sequence_tensor, flat_positions)\n  return output_tensor\n\n\ndef input_fn_builder(input_files,\n                     max_seq_length,\n                     max_predictions_per_seq,\n                     is_training,\n                     num_cpu_threads=4):\n  \"\"\"Creates an `input_fn` closure to be passed to TPUEstimator.\"\"\"\n\n  def input_fn(params):\n    \"\"\"The actual input function.\"\"\"\n    batch_size = params[\"batch_size\"]\n\n    name_to_features = {\n        \"input_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"input_mask\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        \"segment_ids\": tf.FixedLenFeature([max_seq_length], tf.int64),\n        # Note: We keep this feature name `next_sentence_labels` to be\n        # compatible with the original data created by lanzhzh@. However, in\n        # the ALBERT case it does represent sentence_order_labels.\n        \"next_sentence_labels\": tf.FixedLenFeature([1], tf.int64),\n    }\n\n    if FLAGS.masked_lm_budget:\n      name_to_features.update({\n          \"token_boundary\":\n              tf.FixedLenFeature([max_seq_length], tf.int64)})\n    else:\n      name_to_features.update({\n          \"masked_lm_positions\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_ids\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.int64),\n          \"masked_lm_weights\":\n              tf.FixedLenFeature([max_predictions_per_seq], tf.float32)})\n\n    # For training, we want a lot of parallel reading and shuffling.\n    # For eval, we want no shuffling and parallel reading doesn't matter.\n    if is_training:\n      d = tf.data.Dataset.from_tensor_slices(tf.constant(input_files))\n      d = d.repeat()\n      d = d.shuffle(buffer_size=len(input_files))\n\n      # `cycle_length` is the number of parallel files that get read.\n      cycle_length = min(num_cpu_threads, len(input_files))\n\n      # `sloppy` mode means that the interleaving is not exact. This adds\n      # even more randomness to the training pipeline.\n      d = d.apply(\n          tf.contrib.data.parallel_interleave(\n              tf.data.TFRecordDataset,\n              sloppy=is_training,\n              cycle_length=cycle_length))\n      d = d.shuffle(buffer_size=100)\n    else:\n      d = tf.data.TFRecordDataset(input_files)\n      # Since we evaluate for a fixed number of steps we don't want to encounter\n      # out-of-range exceptions.\n      d = d.repeat()\n\n    # We must `drop_remainder` on training because the TPU requires fixed\n    # size dimensions. For eval, we assume we are evaluating on the CPU or GPU\n    # and we *don't* want to drop the remainder, otherwise we wont cover\n    # every sample.\n    d = d.apply(\n        tf.data.experimental.map_and_batch_with_legacy_function(\n            lambda record: _decode_record(record, name_to_features),\n            batch_size=batch_size,\n            num_parallel_batches=num_cpu_threads,\n            drop_remainder=True))\n    tf.logging.info(d)\n    return d\n\n  return input_fn\n\n\ndef _decode_record(record, name_to_features):\n  \"\"\"Decodes a record to a TensorFlow example.\"\"\"\n  example = tf.parse_single_example(record, name_to_features)\n\n  # tf.Example only supports tf.int64, but the TPU only supports tf.int32.\n  # So cast all int64 to int32.\n  for name in list(example.keys()):\n    t = example[name]\n    if t.dtype == tf.int64:\n      t = tf.to_int32(t)\n    example[name] = t\n\n  return example\n\n\ndef main(_):\n  tf.logging.set_verbosity(tf.logging.INFO)\n\n  if not FLAGS.do_train and not FLAGS.do_eval:\n    raise ValueError(\"At least one of `do_train` or `do_eval` must be True.\")\n\n  albert_config = modeling.AlbertConfig.from_json_file(FLAGS.albert_config_file)\n\n  tf.gfile.MakeDirs(FLAGS.output_dir)\n\n  input_files = []\n  for input_pattern in FLAGS.input_file.split(\",\"):\n    input_files.extend(tf.gfile.Glob(input_pattern))\n\n  tf.logging.info(\"*** Input Files ***\")\n  for input_file in input_files:\n    tf.logging.info(\"  %s\" % input_file)\n\n  tpu_cluster_resolver = None\n  if FLAGS.use_tpu and FLAGS.tpu_name:\n    tpu_cluster_resolver = tf.contrib.cluster_resolver.TPUClusterResolver(\n        FLAGS.tpu_name, zone=FLAGS.tpu_zone, project=FLAGS.gcp_project)\n\n  is_per_host = tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2\n  run_config = tf.contrib.tpu.RunConfig(\n      cluster=tpu_cluster_resolver,\n      master=FLAGS.master,\n      model_dir=FLAGS.output_dir,\n      save_checkpoints_steps=FLAGS.save_checkpoints_steps,\n      tpu_config=tf.contrib.tpu.TPUConfig(\n          iterations_per_loop=FLAGS.iterations_per_loop,\n          num_shards=FLAGS.num_tpu_cores,\n          per_host_input_for_training=is_per_host))\n\n  model_fn = model_fn_builder(\n      albert_config=albert_config,\n      init_checkpoint=FLAGS.init_checkpoint,\n      learning_rate=FLAGS.learning_rate,\n      num_train_steps=FLAGS.num_train_steps,\n      num_warmup_steps=FLAGS.num_warmup_steps,\n      use_tpu=FLAGS.use_tpu,\n      use_one_hot_embeddings=FLAGS.use_tpu,\n      optimizer=FLAGS.optimizer,\n      poly_power=FLAGS.poly_power,\n      start_warmup_step=FLAGS.start_warmup_step)\n\n  # If TPU is not available, this will fall back to normal Estimator on CPU\n  # or GPU.\n  estimator = tf.contrib.tpu.TPUEstimator(\n      use_tpu=FLAGS.use_tpu,\n      model_fn=model_fn,\n      config=run_config,\n      train_batch_size=FLAGS.train_batch_size,\n      eval_batch_size=FLAGS.eval_batch_size)\n\n  if FLAGS.do_train:\n    tf.logging.info(\"***** Running training *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.train_batch_size)\n    train_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=True)\n    estimator.train(input_fn=train_input_fn, max_steps=FLAGS.num_train_steps)\n\n  if FLAGS.do_eval:\n    tf.logging.info(\"***** Running evaluation *****\")\n    tf.logging.info(\"  Batch size = %d\", FLAGS.eval_batch_size)\n    global_step = -1\n    output_eval_file = os.path.join(FLAGS.output_dir, \"eval_results.txt\")\n    writer = tf.gfile.GFile(output_eval_file, \"w\")\n    tf.gfile.MakeDirs(FLAGS.export_dir)\n    eval_input_fn = input_fn_builder(\n        input_files=input_files,\n        max_seq_length=FLAGS.max_seq_length,\n        max_predictions_per_seq=FLAGS.max_predictions_per_seq,\n        is_training=False)\n    while global_step < FLAGS.num_train_steps:\n      if estimator.latest_checkpoint() is None:\n        tf.logging.info(\"No checkpoint found yet. Sleeping.\")\n        time.sleep(1)\n      else:\n        result = estimator.evaluate(\n            input_fn=eval_input_fn, steps=FLAGS.max_eval_steps)\n        global_step = result[\"global_step\"]\n        tf.logging.info(\"***** Eval results *****\")\n        for key in sorted(result.keys()):\n          tf.logging.info(\"  %s = %s\", key, str(result[key]))\n          writer.write(\"%s = %s\\n\" % (key, str(result[key])))\n\nif __name__ == \"__main__\":\n  flags.mark_flag_as_required(\"input_file\")\n  flags.mark_flag_as_required(\"albert_config_file\")\n  flags.mark_flag_as_required(\"output_dir\")\n  tf.app.run()"
        },
        {
          "name": "similarity.py",
          "type": "blob",
          "size": 10.7763671875,
          "content": "\"\"\"\r\n进行文本相似度预测的示例。可以直接运行进行预测。\r\n参考了项目：https://github.com/chdd/bert-utils\r\n\r\n\"\"\"\r\n\r\n\r\nimport tensorflow as tf\r\nimport args\r\nimport tokenization\r\nimport modeling\r\nfrom run_classifier import InputFeatures, InputExample, DataProcessor, create_model, convert_examples_to_features\r\n\r\n\r\n# os.environ['CUDA_VISIBLE_DEVICES'] = '1'\r\n\r\n\r\nclass SimProcessor(DataProcessor):\r\n    def get_sentence_examples(self, questions):\r\n        examples = []\r\n        for index, data in enumerate(questions):\r\n            guid = 'test-%d' % index\r\n            text_a = tokenization.convert_to_unicode(str(data[0]))\r\n            text_b = tokenization.convert_to_unicode(str(data[1]))\r\n            label = str(0)\r\n            examples.append(InputExample(guid=guid, text_a=text_a, text_b=text_b, label=label))\r\n        return examples\r\n\r\n    def get_labels(self):\r\n        return ['0', '1']\r\n\r\n\r\n\"\"\"\r\n模型类，负责载入checkpoint初始化模型\r\n\"\"\"\r\nclass BertSim:\r\n    def __init__(self, batch_size=args.batch_size):\r\n        self.mode = None\r\n        self.max_seq_length = args.max_seq_len\r\n        self.tokenizer = tokenization.FullTokenizer(vocab_file=args.vocab_file, do_lower_case=True)\r\n        self.batch_size = batch_size\r\n        self.estimator = None\r\n        self.processor = SimProcessor()\r\n        tf.logging.set_verbosity(tf.logging.INFO)\r\n\r\n\r\n\r\n    #载入estimator,构造模型\r\n    def start_model(self):\r\n        self.estimator = self.get_estimator()\r\n\r\n\r\n    def model_fn_builder(self, bert_config, num_labels, init_checkpoint, learning_rate,\r\n                         num_train_steps, num_warmup_steps,\r\n                         use_one_hot_embeddings):\r\n        \"\"\"Returns `model_fn` closurimport_tfe for TPUEstimator.\"\"\"\r\n\r\n        def model_fn(features, labels, mode, params):  # pylint: disable=unused-argument\r\n            from tensorflow.python.estimator.model_fn import EstimatorSpec\r\n\r\n            tf.logging.info(\"*** Features ***\")\r\n            for name in sorted(features.keys()):\r\n                tf.logging.info(\"  name = %s, shape = %s\" % (name, features[name].shape))\r\n\r\n            input_ids = features[\"input_ids\"]\r\n            input_mask = features[\"input_mask\"]\r\n            segment_ids = features[\"segment_ids\"]\r\n            label_ids = features[\"label_ids\"]\r\n\r\n            is_training = (mode == tf.estimator.ModeKeys.TRAIN)\r\n\r\n            (total_loss, per_example_loss, logits, probabilities) = create_model(\r\n                bert_config, is_training, input_ids, input_mask, segment_ids, label_ids,\r\n                num_labels, use_one_hot_embeddings)\r\n\r\n            tvars = tf.trainable_variables()\r\n            initialized_variable_names = {}\r\n\r\n            if init_checkpoint:\r\n                (assignment_map, initialized_variable_names) \\\r\n                    = modeling.get_assignment_map_from_checkpoint(tvars, init_checkpoint)\r\n                tf.train.init_from_checkpoint(init_checkpoint, assignment_map)\r\n\r\n            tf.logging.info(\"**** Trainable Variables ****\")\r\n            for var in tvars:\r\n                init_string = \"\"\r\n                if var.name in initialized_variable_names:\r\n                    init_string = \", *INIT_FROM_CKPT*\"\r\n                tf.logging.info(\"  name = %s, shape = %s%s\", var.name, var.shape,\r\n                                init_string)\r\n            output_spec = EstimatorSpec(mode=mode, predictions=probabilities)\r\n\r\n            return output_spec\r\n\r\n        return model_fn\r\n\r\n    def get_estimator(self):\r\n\r\n        from tensorflow.python.estimator.estimator import Estimator\r\n        from tensorflow.python.estimator.run_config import RunConfig\r\n\r\n        bert_config = modeling.BertConfig.from_json_file(args.config_name)\r\n        label_list = self.processor.get_labels()\r\n        if self.mode == tf.estimator.ModeKeys.TRAIN:\r\n            init_checkpoint = args.ckpt_name\r\n        else:\r\n            init_checkpoint = args.output_dir\r\n\r\n        model_fn = self.model_fn_builder(\r\n            bert_config=bert_config,\r\n            num_labels=len(label_list),\r\n            init_checkpoint=init_checkpoint,\r\n            learning_rate=args.learning_rate,\r\n            num_train_steps=None,\r\n            num_warmup_steps=None,\r\n            use_one_hot_embeddings=False)\r\n\r\n        config = tf.ConfigProto()\r\n        config.gpu_options.allow_growth = True\r\n        config.gpu_options.per_process_gpu_memory_fraction = args.gpu_memory_fraction\r\n        config.log_device_placement = False\r\n\r\n        return Estimator(model_fn=model_fn, config=RunConfig(session_config=config), model_dir=args.output_dir,\r\n                         params={'batch_size': self.batch_size})\r\n\r\n    def predict_sentences(self,sentences):\r\n        results= self.estimator.predict(input_fn=input_fn_builder(self,sentences), yield_single_examples=False)\r\n        #打印预测结果\r\n        for i in results:\r\n            print(i)\r\n\r\n    def _truncate_seq_pair(self, tokens_a, tokens_b, max_length):\r\n        \"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"\r\n\r\n        # This is a simple heuristic which will always truncate the longer sequence\r\n        # one token at a time. This makes more sense than truncating an equal percent\r\n        # of tokens from each, since if one sequence is very short then each token\r\n        # that's truncated likely contains more information than a longer sequence.\r\n        while True:\r\n            total_length = len(tokens_a) + len(tokens_b)\r\n            if total_length <= max_length:\r\n                break\r\n            if len(tokens_a) > len(tokens_b):\r\n                tokens_a.pop()\r\n            else:\r\n                tokens_b.pop()\r\n\r\n    def convert_single_example(self, ex_index, example, label_list, max_seq_length, tokenizer):\r\n        \"\"\"Converts a single `InputExample` into a single `InputFeatures`.\"\"\"\r\n        label_map = {}\r\n        for (i, label) in enumerate(label_list):\r\n            label_map[label] = i\r\n\r\n        tokens_a = tokenizer.tokenize(example.text_a)\r\n        tokens_b = None\r\n        if example.text_b:\r\n            tokens_b = tokenizer.tokenize(example.text_b)\r\n\r\n        if tokens_b:\r\n            # Modifies `tokens_a` and `tokens_b` in place so that the total\r\n            # length is less than the specified length.\r\n            # Account for [CLS], [SEP], [SEP] with \"- 3\"\r\n            self._truncate_seq_pair(tokens_a, tokens_b, max_seq_length - 3)\r\n        else:\r\n            # Account for [CLS] and [SEP] with \"- 2\"\r\n            if len(tokens_a) > max_seq_length - 2:\r\n                tokens_a = tokens_a[0:(max_seq_length - 2)]\r\n\r\n        # The convention in BERT is:\r\n        # (a) For sequence pairs:\r\n        #  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]\r\n        #  type_ids: 0     0  0    0    0     0       0 0     1  1  1  1   1 1\r\n        # (b) For single sequences:\r\n        #  tokens:   [CLS] the dog is hairy . [SEP]\r\n        #  type_ids: 0     0   0   0  0     0 0\r\n        #\r\n        # Where \"type_ids\" are used to indicate whether this is the first\r\n        # sequence or the second sequence. The embedding vectors for `type=0` and\r\n        # `type=1` were learned during pre-training and are added to the wordpiece\r\n        # embedding vector (and position vector). This is not *strictly* necessary\r\n        # since the [SEP] token unambiguously separates the sequences, but it makes\r\n        # it easier for the model to learn the concept of sequences.\r\n        #\r\n        # For classification tasks, the first vector (corresponding to [CLS]) is\r\n        # used as as the \"sentence vector\". Note that this only makes sense because\r\n        # the entire model is fine-tuned.\r\n        tokens = []\r\n        segment_ids = []\r\n        tokens.append(\"[CLS]\")\r\n        segment_ids.append(0)\r\n        for token in tokens_a:\r\n            tokens.append(token)\r\n            segment_ids.append(0)\r\n        tokens.append(\"[SEP]\")\r\n        segment_ids.append(0)\r\n\r\n        if tokens_b:\r\n            for token in tokens_b:\r\n                tokens.append(token)\r\n                segment_ids.append(1)\r\n            tokens.append(\"[SEP]\")\r\n            segment_ids.append(1)\r\n\r\n        input_ids = tokenizer.convert_tokens_to_ids(tokens)\r\n\r\n        # The mask has 1 for real tokens and 0 for padding tokens. Only real\r\n        # tokens are attended to.\r\n        input_mask = [1] * len(input_ids)\r\n\r\n        # Zero-pad up to the sequence length.\r\n        while len(input_ids) < max_seq_length:\r\n            input_ids.append(0)\r\n            input_mask.append(0)\r\n            segment_ids.append(0)\r\n\r\n        assert len(input_ids) == max_seq_length\r\n        assert len(input_mask) == max_seq_length\r\n        assert len(segment_ids) == max_seq_length\r\n\r\n        label_id = label_map[example.label]\r\n        if ex_index < 5:\r\n            tf.logging.info(\"*** Example ***\")\r\n            tf.logging.info(\"guid: %s\" % (example.guid))\r\n            tf.logging.info(\"tokens: %s\" % \" \".join(\r\n                [tokenization.printable_text(x) for x in tokens]))\r\n            tf.logging.info(\"input_ids: %s\" % \" \".join([str(x) for x in input_ids]))\r\n            tf.logging.info(\"input_mask: %s\" % \" \".join([str(x) for x in input_mask]))\r\n            tf.logging.info(\"segment_ids: %s\" % \" \".join([str(x) for x in segment_ids]))\r\n            tf.logging.info(\"label: %s (id = %d)\" % (example.label, label_id))\r\n\r\n        feature = InputFeatures(\r\n            input_ids=input_ids,\r\n            input_mask=input_mask,\r\n            segment_ids=segment_ids,\r\n            label_id=label_id)\r\n        return feature\r\n\r\n\r\n\r\n\r\ndef input_fn_builder(bertSim,sentences):\r\n    def predict_input_fn():\r\n        return (tf.data.Dataset.from_generator(\r\n            generate_from_input,\r\n            output_types={\r\n                'input_ids': tf.int32,\r\n                'input_mask': tf.int32,\r\n                'segment_ids': tf.int32,\r\n                'label_ids': tf.int32},\r\n            output_shapes={\r\n                'input_ids': (None, bertSim.max_seq_length),\r\n                'input_mask': (None, bertSim.max_seq_length),\r\n                'segment_ids': (None, bertSim.max_seq_length),\r\n                'label_ids': (1,)}).prefetch(10))\r\n\r\n    def generate_from_input():\r\n        processor = bertSim.processor\r\n        predict_examples = processor.get_sentence_examples(sentences)\r\n        features = convert_examples_to_features(predict_examples, processor.get_labels(), args.max_seq_len,\r\n                                                bertSim.tokenizer)\r\n        yield {\r\n            'input_ids': [f.input_ids for f in features],\r\n            'input_mask': [f.input_mask for f in features],\r\n            'segment_ids': [f.segment_ids for f in features],\r\n            'label_ids': [f.label_id for f in features]\r\n        }\r\n\r\n    return predict_input_fn\r\n\r\n\r\nif __name__ == '__main__':\r\n    sim = BertSim()\r\n    sim.start_model()\r\n    sim.predict_sentences([(\"我喜欢妈妈做的汤\", \"妈妈做的汤我很喜欢喝\")])\r\n"
        },
        {
          "name": "test_changes.py",
          "type": "blob",
          "size": 3.009765625,
          "content": "# coding=utf-8\nimport tensorflow as tf\nfrom modeling import embedding_lookup_factorized,transformer_model\nimport os\n\n\"\"\"\n测试albert主要的改进点：词嵌入的因式分解、层间参数共享、段落间连贯性\ntest main change of albert from bert\n\"\"\"\nbatch_size = 2048\nsequence_length = 512\nvocab_size = 30000\nhidden_size = 1024\nnum_attention_heads = int(hidden_size / 64)\n\ndef get_total_parameters():\n    \"\"\"\n    get total parameters of a graph\n    :return:\n    \"\"\"\n    total_parameters = 0\n    for variable in tf.trainable_variables():\n        # shape is an array of tf.Dimension\n        shape = variable.get_shape()\n        # print(shape)\n        # print(len(shape))\n        variable_parameters = 1\n        for dim in shape:\n            # print(dim)\n            variable_parameters *= dim.value\n        # print(variable_parameters)\n        total_parameters += variable_parameters\n    return total_parameters\n\ndef test_factorized_embedding():\n    \"\"\"\n    test of Factorized embedding parameterization\n    :return:\n    \"\"\"\n    input_ids=tf.zeros((batch_size, sequence_length),dtype=tf.int32)\n    output, embedding_table, embedding_table_2=embedding_lookup_factorized(input_ids,vocab_size,hidden_size)\n    print(\"output:\",output)\n\ndef test_share_parameters():\n    \"\"\"\n    test of share parameters across all layers: how many parameter after share parameter across layers of transformer.\n    :return:\n    \"\"\"\n    def total_parameters_transformer(share_parameter_across_layers):\n        input_tensor=tf.zeros((batch_size, sequence_length, hidden_size),dtype=tf.float32)\n        print(\"transformer_model. input:\",input_tensor)\n        transformer_result=transformer_model(input_tensor,hidden_size=hidden_size,num_attention_heads=num_attention_heads,share_parameter_across_layers=share_parameter_across_layers)\n        print(\"transformer_result:\",transformer_result)\n        total_parameters=get_total_parameters()\n        print('total_parameters(not share):',total_parameters)\n\n    share_parameter_across_layers=False\n    total_parameters_transformer(share_parameter_across_layers) # total parameters, not share: 125,976,576 = 125 million\n\n    tf.reset_default_graph() # Clears the default graph stack and resets the global default graph\n    share_parameter_across_layers=True\n    total_parameters_transformer(share_parameter_across_layers) #  total parameters,   share: 10,498,048 = 10.5 million\n\ndef test_sentence_order_prediction():\n    \"\"\"\n    sentence order prediction.\n\n    check method of create_instances_from_document_albert from create_pretrining_data.py\n\n    :return:\n    \"\"\"\n    # 添加运行权限\n    os.system(\"chmod +x create_pretrain_data.sh\")\n\n    os.system(\"./create_pretrain_data.sh\")\n\n\n# 1.test of Factorized embedding parameterization\n#test_factorized_embedding()\n\n# 2. test of share parameters across all layers: how many parameter after share parameter across layers of transformer.\n# before share parameter: 125,976,576; after share parameter:\n#test_share_parameters()\n\n# 3. test of sentence order prediction(SOP)\ntest_sentence_order_prediction()\n\n"
        },
        {
          "name": "tokenization.py",
          "type": "blob",
          "size": 13.001953125,
          "content": "# coding=utf-8\n# Copyright 2018 The Google AI Language Team Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tokenization classes.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport re\nimport unicodedata\nimport six\nimport tensorflow as tf\n\n\ndef validate_case_matches_checkpoint(do_lower_case, init_checkpoint):\n  \"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"\n\n  # The casing has to be passed in by the user and there is no explicit check\n  # as to whether it matches the checkpoint. The casing information probably\n  # should have been stored in the bert_config.json file, but it's not, so\n  # we have to heuristically detect it to validate.\n\n  if not init_checkpoint:\n    return\n\n  m = re.match(\"^.*?([A-Za-z0-9_-]+)/bert_model.ckpt\", init_checkpoint)\n  if m is None:\n    return\n\n  model_name = m.group(1)\n\n  lower_models = [\n      \"uncased_L-24_H-1024_A-16\", \"uncased_L-12_H-768_A-12\",\n      \"multilingual_L-12_H-768_A-12\", \"chinese_L-12_H-768_A-12\"\n  ]\n\n  cased_models = [\n      \"cased_L-12_H-768_A-12\", \"cased_L-24_H-1024_A-16\",\n      \"multi_cased_L-12_H-768_A-12\"\n  ]\n\n  is_bad_config = False\n  if model_name in lower_models and not do_lower_case:\n    is_bad_config = True\n    actual_flag = \"False\"\n    case_name = \"lowercased\"\n    opposite_flag = \"True\"\n\n  if model_name in cased_models and do_lower_case:\n    is_bad_config = True\n    actual_flag = \"True\"\n    case_name = \"cased\"\n    opposite_flag = \"False\"\n\n  if is_bad_config:\n    raise ValueError(\n        \"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"\n        \"However, `%s` seems to be a %s model, so you \"\n        \"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"\n        \"how the model was pre-training. If this error is wrong, please \"\n        \"just comment out this check.\" % (actual_flag, init_checkpoint,\n                                          model_name, case_name, opposite_flag))\n\n\ndef convert_to_unicode(text):\n  \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return text.decode(\"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text.decode(\"utf-8\", \"ignore\")\n    elif isinstance(text, unicode):\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef printable_text(text):\n  \"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"\n\n  # These functions want `str` for both Python2 and Python3, but in one case\n  # it's a Unicode string and in the other it's a byte string.\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return text.decode(\"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, unicode):\n      return text.encode(\"utf-8\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef load_vocab(vocab_file):\n  \"\"\"Loads a vocabulary file into a dictionary.\"\"\"\n  vocab = collections.OrderedDict()\n  index = 0\n  with tf.gfile.GFile(vocab_file, \"r\") as reader:\n    while True:\n      token = convert_to_unicode(reader.readline())\n      if not token:\n        break\n      token = token.strip()\n      vocab[token] = index\n      index += 1\n  return vocab\n\n\ndef convert_by_vocab(vocab, items):\n  \"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"\n  output = []\n  #print(\"items:\",items) #['[CLS]', '日', '##期', '，', '但', '被', '##告', '金', '##东', '##福', '载', '##明', '[MASK]', 'U', '##N', '##K', ']', '保', '##证', '本', '##月', '1', '##4', '[MASK]', '到', '##位', '，', '2', '##0', '##1', '##5', '年', '6', '[MASK]', '1', '##1', '日', '[', 'U', '##N', '##K', ']', '，', '原', '##告', '[MASK]', '认', '##可', '于', '2', '##0', '##1', '##5', '[MASK]', '6', '月', '[MASK]', '[MASK]', '日', '##向', '被', '##告', '主', '##张', '权', '##利', '。', '而', '[MASK]', '[MASK]', '自', '[MASK]', '[MASK]', '[MASK]', '[MASK]', '年', '6', '月', '1', '##1', '日', '[SEP]', '原', '##告', '于', '2', '##0', '##1', '##6', '[MASK]', '6', '[MASK]', '2', '##4', '日', '起', '##诉', '，', '主', '##张', '保', '##证', '责', '##任', '，', '已', '超', '##过', '保', '##证', '期', '##限', '[MASK]', '保', '##证', '人', '依', '##法', '不', '##再', '承', '##担', '保', '##证', '[MASK]', '[MASK]', '[MASK]', '[SEP]']\n  for i,item in enumerate(items):\n    #print(i,\"item:\",item) #  ##期\n    output.append(vocab[item])\n  return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n  return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n  return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n  \"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"\n  text = text.strip()\n  if not text:\n    return []\n  tokens = text.split()\n  return tokens\n\n\nclass FullTokenizer(object):\n  \"\"\"Runs end-to-end tokenziation.\"\"\"\n\n  def __init__(self, vocab_file, do_lower_case=True):\n    self.vocab = load_vocab(vocab_file)\n    self.inv_vocab = {v: k for k, v in self.vocab.items()}\n    self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)\n    self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)\n\n  def tokenize(self, text):\n    split_tokens = []\n    for token in self.basic_tokenizer.tokenize(text):\n      for sub_token in self.wordpiece_tokenizer.tokenize(token):\n        split_tokens.append(sub_token)\n\n    return split_tokens\n\n  def convert_tokens_to_ids(self, tokens):\n    return convert_by_vocab(self.vocab, tokens)\n\n  def convert_ids_to_tokens(self, ids):\n    return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n  \"\"\"Runs basic tokenization (punctuation splitting, lower casing, etc.).\"\"\"\n\n  def __init__(self, do_lower_case=True):\n    \"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    \"\"\"\n    self.do_lower_case = do_lower_case\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text.\"\"\"\n    text = convert_to_unicode(text)\n    text = self._clean_text(text)\n\n    # This was added on November 1st, 2018 for the multilingual and Chinese\n    # models. This is also applied to the English models now, but it doesn't\n    # matter since the English models were not trained on any Chinese data\n    # and generally don't have any Chinese data in them (there are Chinese\n    # characters in the vocabulary because Wikipedia does have some Chinese\n    # words in the English Wikipedia.).\n    text = self._tokenize_chinese_chars(text)\n\n    orig_tokens = whitespace_tokenize(text)\n    split_tokens = []\n    for token in orig_tokens:\n      if self.do_lower_case:\n        token = token.lower()\n        token = self._run_strip_accents(token)\n      split_tokens.extend(self._run_split_on_punc(token))\n\n    output_tokens = whitespace_tokenize(\" \".join(split_tokens))\n    return output_tokens\n\n  def _run_strip_accents(self, text):\n    \"\"\"Strips accents from a piece of text.\"\"\"\n    text = unicodedata.normalize(\"NFD\", text)\n    output = []\n    for char in text:\n      cat = unicodedata.category(char)\n      if cat == \"Mn\":\n        continue\n      output.append(char)\n    return \"\".join(output)\n\n  def _run_split_on_punc(self, text):\n    \"\"\"Splits punctuation on a piece of text.\"\"\"\n    chars = list(text)\n    i = 0\n    start_new_word = True\n    output = []\n    while i < len(chars):\n      char = chars[i]\n      if _is_punctuation(char):\n        output.append([char])\n        start_new_word = True\n      else:\n        if start_new_word:\n          output.append([])\n        start_new_word = False\n        output[-1].append(char)\n      i += 1\n\n    return [\"\".join(x) for x in output]\n\n  def _tokenize_chinese_chars(self, text):\n    \"\"\"Adds whitespace around any CJK character.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if self._is_chinese_char(cp):\n        output.append(\" \")\n        output.append(char)\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n  def _is_chinese_char(self, cp):\n    \"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"\n    # This defines a \"chinese character\" as anything in the CJK Unicode block:\n    #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n    #\n    # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n    # despite its name. The modern Korean Hangul alphabet is a different block,\n    # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n    # space-separated words, so they are not treated specially and handled\n    # like the all of the other languages.\n    if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n        (cp >= 0x3400 and cp <= 0x4DBF) or  #\n        (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n        (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n        (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n        (cp >= 0x2B820 and cp <= 0x2CEAF) or\n        (cp >= 0xF900 and cp <= 0xFAFF) or  #\n        (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n      return True\n\n    return False\n\n  def _clean_text(self, text):\n    \"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if cp == 0 or cp == 0xfffd or _is_control(char):\n        continue\n      if _is_whitespace(char):\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n\nclass WordpieceTokenizer(object):\n  \"\"\"Runs WordPiece tokenziation.\"\"\"\n\n  def __init__(self, vocab, unk_token=\"[UNK]\", max_input_chars_per_word=200):\n    self.vocab = vocab\n    self.unk_token = unk_token\n    self.max_input_chars_per_word = max_input_chars_per_word\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"\n\n    text = convert_to_unicode(text)\n\n    output_tokens = []\n    for token in whitespace_tokenize(text):\n      chars = list(token)\n      if len(chars) > self.max_input_chars_per_word:\n        output_tokens.append(self.unk_token)\n        continue\n\n      is_bad = False\n      start = 0\n      sub_tokens = []\n      while start < len(chars):\n        end = len(chars)\n        cur_substr = None\n        while start < end:\n          substr = \"\".join(chars[start:end])\n          if start > 0:\n            substr = \"##\" + substr\n          if substr in self.vocab:\n            cur_substr = substr\n            break\n          end -= 1\n        if cur_substr is None:\n          is_bad = True\n          break\n        sub_tokens.append(cur_substr)\n        start = end\n\n      if is_bad:\n        output_tokens.append(self.unk_token)\n      else:\n        output_tokens.extend(sub_tokens)\n    return output_tokens\n\n\ndef _is_whitespace(char):\n  \"\"\"Checks whether `chars` is a whitespace character.\"\"\"\n  # \\t, \\n, and \\r are technically contorl characters but we treat them\n  # as whitespace since they are generally considered as such.\n  if char == \" \" or char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return True\n  cat = unicodedata.category(char)\n  if cat == \"Zs\":\n    return True\n  return False\n\n\ndef _is_control(char):\n  \"\"\"Checks whether `chars` is a control character.\"\"\"\n  # These are technically control characters but we count them as whitespace\n  # characters.\n  if char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return False\n  cat = unicodedata.category(char)\n  if cat in (\"Cc\", \"Cf\"):\n    return True\n  return False\n\n\ndef _is_punctuation(char):\n  \"\"\"Checks whether `chars` is a punctuation character.\"\"\"\n  cp = ord(char)\n  # We treat all non-letter/number ASCII as punctuation.\n  # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n  # Punctuation class but we treat them as punctuation anyways, for\n  # consistency.\n  if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n      (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n    return True\n  cat = unicodedata.category(char)\n  if cat.startswith(\"P\"):\n    return True\n  return False\n"
        },
        {
          "name": "tokenization_google.py",
          "type": "blob",
          "size": 15.2568359375,
          "content": "# coding=utf-8\n# Copyright 2019 The Google Research Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python2, python3\n# coding=utf-8\n\"\"\"Tokenization classes.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport collections\nimport re\nimport unicodedata\nimport six\nfrom six.moves import range\nimport tensorflow as tf\nimport sentencepiece as spm\n\nSPIECE_UNDERLINE = u\"▁\".encode(\"utf-8\")\n\n\ndef validate_case_matches_checkpoint(do_lower_case, init_checkpoint):\n  \"\"\"Checks whether the casing config is consistent with the checkpoint name.\"\"\"\n\n  # The casing has to be passed in by the user and there is no explicit check\n  # as to whether it matches the checkpoint. The casing information probably\n  # should have been stored in the bert_config.json file, but it's not, so\n  # we have to heuristically detect it to validate.\n\n  if not init_checkpoint:\n    return\n\n  m = re.match(\"^.*?([A-Za-z0-9_-]+)/bert_model.ckpt\",\n               six.ensure_str(init_checkpoint))\n  if m is None:\n    return\n\n  model_name = m.group(1)\n\n  lower_models = [\n      \"uncased_L-24_H-1024_A-16\", \"uncased_L-12_H-768_A-12\",\n      \"multilingual_L-12_H-768_A-12\", \"chinese_L-12_H-768_A-12\"\n  ]\n\n  cased_models = [\n      \"cased_L-12_H-768_A-12\", \"cased_L-24_H-1024_A-16\",\n      \"multi_cased_L-12_H-768_A-12\"\n  ]\n\n  is_bad_config = False\n  if model_name in lower_models and not do_lower_case:\n    is_bad_config = True\n    actual_flag = \"False\"\n    case_name = \"lowercased\"\n    opposite_flag = \"True\"\n\n  if model_name in cased_models and do_lower_case:\n    is_bad_config = True\n    actual_flag = \"True\"\n    case_name = \"cased\"\n    opposite_flag = \"False\"\n\n  if is_bad_config:\n    raise ValueError(\n        \"You passed in `--do_lower_case=%s` with `--init_checkpoint=%s`. \"\n        \"However, `%s` seems to be a %s model, so you \"\n        \"should pass in `--do_lower_case=%s` so that the fine-tuning matches \"\n        \"how the model was pre-training. If this error is wrong, please \"\n        \"just comment out this check.\" % (actual_flag, init_checkpoint,\n                                          model_name, case_name, opposite_flag))\n\n\ndef preprocess_text(inputs, remove_space=True, lower=False):\n  \"\"\"preprocess data by removing extra space and normalize data.\"\"\"\n  outputs = inputs\n  if remove_space:\n    outputs = \" \".join(inputs.strip().split())\n\n  if six.PY2 and isinstance(outputs, str):\n    try:\n      outputs = six.ensure_text(outputs, \"utf-8\")\n    except UnicodeDecodeError:\n      outputs = six.ensure_text(outputs, \"latin-1\")\n\n  outputs = unicodedata.normalize(\"NFKD\", outputs)\n  outputs = \"\".join([c for c in outputs if not unicodedata.combining(c)])\n  if lower:\n    outputs = outputs.lower()\n\n  return outputs\n\n\ndef encode_pieces(sp_model, text, return_unicode=True, sample=False):\n  \"\"\"turn sentences into word pieces.\"\"\"\n\n  if six.PY2 and isinstance(text, six.text_type):\n    text = six.ensure_binary(text, \"utf-8\")\n\n  if not sample:\n    pieces = sp_model.EncodeAsPieces(text)\n  else:\n    pieces = sp_model.SampleEncodeAsPieces(text, 64, 0.1)\n  new_pieces = []\n  for piece in pieces:\n    piece = printable_text(piece)\n    if len(piece) > 1 and piece[-1] == \",\" and piece[-2].isdigit():\n      cur_pieces = sp_model.EncodeAsPieces(\n          six.ensure_binary(piece[:-1]).replace(SPIECE_UNDERLINE, b\"\"))\n      if piece[0] != SPIECE_UNDERLINE and cur_pieces[0][0] == SPIECE_UNDERLINE:\n        if len(cur_pieces[0]) == 1:\n          cur_pieces = cur_pieces[1:]\n        else:\n          cur_pieces[0] = cur_pieces[0][1:]\n      cur_pieces.append(piece[-1])\n      new_pieces.extend(cur_pieces)\n    else:\n      new_pieces.append(piece)\n\n  # note(zhiliny): convert back to unicode for py2\n  if six.PY2 and return_unicode:\n    ret_pieces = []\n    for piece in new_pieces:\n      if isinstance(piece, str):\n        piece = six.ensure_text(piece, \"utf-8\")\n      ret_pieces.append(piece)\n    new_pieces = ret_pieces\n\n  return new_pieces\n\n\ndef encode_ids(sp_model, text, sample=False):\n  pieces = encode_pieces(sp_model, text, return_unicode=False, sample=sample)\n  ids = [sp_model.PieceToId(piece) for piece in pieces]\n  return ids\n\n\ndef convert_to_unicode(text):\n  \"\"\"Converts `text` to Unicode (if it's not already), assuming utf-8 input.\"\"\"\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return six.ensure_text(text, \"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return six.ensure_text(text, \"utf-8\", \"ignore\")\n    elif isinstance(text, six.text_type):\n      return text\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef printable_text(text):\n  \"\"\"Returns text encoded in a way suitable for print or `tf.logging`.\"\"\"\n\n  # These functions want `str` for both Python2 and Python3, but in one case\n  # it's a Unicode string and in the other it's a byte string.\n  if six.PY3:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, bytes):\n      return six.ensure_text(text, \"utf-8\", \"ignore\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  elif six.PY2:\n    if isinstance(text, str):\n      return text\n    elif isinstance(text, six.text_type):\n      return six.ensure_binary(text, \"utf-8\")\n    else:\n      raise ValueError(\"Unsupported string type: %s\" % (type(text)))\n  else:\n    raise ValueError(\"Not running on Python2 or Python 3?\")\n\n\ndef load_vocab(vocab_file):\n  \"\"\"Loads a vocabulary file into a dictionary.\"\"\"\n  vocab = collections.OrderedDict()\n  with tf.gfile.GFile(vocab_file, \"r\") as reader:\n    while True:\n      token = convert_to_unicode(reader.readline())\n      if not token:\n        break\n      token = token.strip() # previous: token.strip().split()[0]\n      if token not in vocab:\n        vocab[token] = len(vocab)\n  return vocab\n\n\ndef convert_by_vocab(vocab, items):\n  \"\"\"Converts a sequence of [tokens|ids] using the vocab.\"\"\"\n  output = []\n  for item in items:\n    output.append(vocab[item])\n  return output\n\n\ndef convert_tokens_to_ids(vocab, tokens):\n  return convert_by_vocab(vocab, tokens)\n\n\ndef convert_ids_to_tokens(inv_vocab, ids):\n  return convert_by_vocab(inv_vocab, ids)\n\n\ndef whitespace_tokenize(text):\n  \"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"\n  text = text.strip()\n  if not text:\n    return []\n  tokens = text.split()\n  return tokens\n\n\nclass FullTokenizer(object):\n  \"\"\"Runs end-to-end tokenziation.\"\"\"\n\n  def __init__(self, vocab_file, do_lower_case=True, spm_model_file=None):\n    self.vocab = None\n    self.sp_model = None\n    print(\"spm_model_file:\",spm_model_file,\";vocab_file:\",vocab_file)\n    if spm_model_file:\n      print(\"#Use spm_model_file\")\n      self.sp_model = spm.SentencePieceProcessor()\n      tf.logging.info(\"loading sentence piece model\")\n      self.sp_model.Load(spm_model_file)\n      # Note(mingdachen): For the purpose of consisent API, we are\n      # generating a vocabulary for the sentence piece tokenizer.\n      self.vocab = {self.sp_model.IdToPiece(i): i for i\n                    in range(self.sp_model.GetPieceSize())}\n    else:\n      print(\"#Use vocab_file\")\n      self.vocab = load_vocab(vocab_file)\n      self.basic_tokenizer = BasicTokenizer(do_lower_case=do_lower_case)\n      self.wordpiece_tokenizer = WordpieceTokenizer(vocab=self.vocab)\n    self.inv_vocab = {v: k for k, v in self.vocab.items()}\n\n  def tokenize(self, text):\n    if self.sp_model:\n      split_tokens = encode_pieces(self.sp_model, text, return_unicode=False)\n    else:\n      split_tokens = []\n      for token in self.basic_tokenizer.tokenize(text):\n        for sub_token in self.wordpiece_tokenizer.tokenize(token):\n          split_tokens.append(sub_token)\n\n    return split_tokens\n\n  def convert_tokens_to_ids(self, tokens):\n    if self.sp_model:\n      tf.logging.info(\"using sentence piece tokenzier.\")\n      return [self.sp_model.PieceToId(\n          printable_text(token)) for token in tokens]\n    else:\n      return convert_by_vocab(self.vocab, tokens)\n\n  def convert_ids_to_tokens(self, ids):\n    if self.sp_model:\n      tf.logging.info(\"using sentence piece tokenzier.\")\n      return [self.sp_model.IdToPiece(id_) for id_ in ids]\n    else:\n      return convert_by_vocab(self.inv_vocab, ids)\n\n\nclass BasicTokenizer(object):\n  \"\"\"Runs basic tokenization (punctuation splitting, lower casing, etc.).\"\"\"\n\n  def __init__(self, do_lower_case=True):\n    \"\"\"Constructs a BasicTokenizer.\n\n    Args:\n      do_lower_case: Whether to lower case the input.\n    \"\"\"\n    self.do_lower_case = do_lower_case\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text.\"\"\"\n    text = convert_to_unicode(text)\n    text = self._clean_text(text)\n\n    # This was added on November 1st, 2018 for the multilingual and Chinese\n    # models. This is also applied to the English models now, but it doesn't\n    # matter since the English models were not trained on any Chinese data\n    # and generally don't have any Chinese data in them (there are Chinese\n    # characters in the vocabulary because Wikipedia does have some Chinese\n    # words in the English Wikipedia.).\n    text = self._tokenize_chinese_chars(text)\n\n    orig_tokens = whitespace_tokenize(text)\n    split_tokens = []\n    for token in orig_tokens:\n      if self.do_lower_case:\n        token = token.lower()\n        token = self._run_strip_accents(token)\n      split_tokens.extend(self._run_split_on_punc(token))\n\n    output_tokens = whitespace_tokenize(\" \".join(split_tokens))\n    return output_tokens\n\n  def _run_strip_accents(self, text):\n    \"\"\"Strips accents from a piece of text.\"\"\"\n    text = unicodedata.normalize(\"NFD\", text)\n    output = []\n    for char in text:\n      cat = unicodedata.category(char)\n      if cat == \"Mn\":\n        continue\n      output.append(char)\n    return \"\".join(output)\n\n  def _run_split_on_punc(self, text):\n    \"\"\"Splits punctuation on a piece of text.\"\"\"\n    chars = list(text)\n    i = 0\n    start_new_word = True\n    output = []\n    while i < len(chars):\n      char = chars[i]\n      if _is_punctuation(char):\n        output.append([char])\n        start_new_word = True\n      else:\n        if start_new_word:\n          output.append([])\n        start_new_word = False\n        output[-1].append(char)\n      i += 1\n\n    return [\"\".join(x) for x in output]\n\n  def _tokenize_chinese_chars(self, text):\n    \"\"\"Adds whitespace around any CJK character.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if self._is_chinese_char(cp):\n        output.append(\" \")\n        output.append(char)\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n  def _is_chinese_char(self, cp):\n    \"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"\n    # This defines a \"chinese character\" as anything in the CJK Unicode block:\n    #   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n    #\n    # Note that the CJK Unicode block is NOT all Japanese and Korean characters,\n    # despite its name. The modern Korean Hangul alphabet is a different block,\n    # as is Japanese Hiragana and Katakana. Those alphabets are used to write\n    # space-separated words, so they are not treated specially and handled\n    # like the all of the other languages.\n    if ((cp >= 0x4E00 and cp <= 0x9FFF) or  #\n        (cp >= 0x3400 and cp <= 0x4DBF) or  #\n        (cp >= 0x20000 and cp <= 0x2A6DF) or  #\n        (cp >= 0x2A700 and cp <= 0x2B73F) or  #\n        (cp >= 0x2B740 and cp <= 0x2B81F) or  #\n        (cp >= 0x2B820 and cp <= 0x2CEAF) or\n        (cp >= 0xF900 and cp <= 0xFAFF) or  #\n        (cp >= 0x2F800 and cp <= 0x2FA1F)):  #\n      return True\n\n    return False\n\n  def _clean_text(self, text):\n    \"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"\n    output = []\n    for char in text:\n      cp = ord(char)\n      if cp == 0 or cp == 0xfffd or _is_control(char):\n        continue\n      if _is_whitespace(char):\n        output.append(\" \")\n      else:\n        output.append(char)\n    return \"\".join(output)\n\n\nclass WordpieceTokenizer(object):\n  \"\"\"Runs WordPiece tokenziation.\"\"\"\n\n  def __init__(self, vocab, unk_token=\"[UNK]\", max_input_chars_per_word=200):\n    self.vocab = vocab\n    self.unk_token = unk_token\n    self.max_input_chars_per_word = max_input_chars_per_word\n\n  def tokenize(self, text):\n    \"\"\"Tokenizes a piece of text into its word pieces.\n\n    This uses a greedy longest-match-first algorithm to perform tokenization\n    using the given vocabulary.\n\n    For example:\n      input = \"unaffable\"\n      output = [\"un\", \"##aff\", \"##able\"]\n\n    Args:\n      text: A single token or whitespace separated tokens. This should have\n        already been passed through `BasicTokenizer.\n\n    Returns:\n      A list of wordpiece tokens.\n    \"\"\"\n\n    text = convert_to_unicode(text)\n\n    output_tokens = []\n    for token in whitespace_tokenize(text):\n      chars = list(token)\n      if len(chars) > self.max_input_chars_per_word:\n        output_tokens.append(self.unk_token)\n        continue\n\n      is_bad = False\n      start = 0\n      sub_tokens = []\n      while start < len(chars):\n        end = len(chars)\n        cur_substr = None\n        while start < end:\n          substr = \"\".join(chars[start:end])\n          if start > 0:\n            substr = \"##\" + six.ensure_str(substr)\n          if substr in self.vocab:\n            cur_substr = substr\n            break\n          end -= 1\n        if cur_substr is None:\n          is_bad = True\n          break\n        sub_tokens.append(cur_substr)\n        start = end\n\n      if is_bad:\n        output_tokens.append(self.unk_token)\n      else:\n        output_tokens.extend(sub_tokens)\n    return output_tokens\n\n\ndef _is_whitespace(char):\n  \"\"\"Checks whether `chars` is a whitespace character.\"\"\"\n  # \\t, \\n, and \\r are technically control characters but we treat them\n  # as whitespace since they are generally considered as such.\n  if char == \" \" or char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return True\n  cat = unicodedata.category(char)\n  if cat == \"Zs\":\n    return True\n  return False\n\n\ndef _is_control(char):\n  \"\"\"Checks whether `chars` is a control character.\"\"\"\n  # These are technically control characters but we count them as whitespace\n  # characters.\n  if char == \"\\t\" or char == \"\\n\" or char == \"\\r\":\n    return False\n  cat = unicodedata.category(char)\n  if cat in (\"Cc\", \"Cf\"):\n    return True\n  return False\n\n\ndef _is_punctuation(char):\n  \"\"\"Checks whether `chars` is a punctuation character.\"\"\"\n  cp = ord(char)\n  # We treat all non-letter/number ASCII as punctuation.\n  # Characters such as \"^\", \"$\", and \"`\" are not in the Unicode\n  # Punctuation class but we treat them as punctuation anyways, for\n  # consistency.\n  if ((cp >= 33 and cp <= 47) or (cp >= 58 and cp <= 64) or\n      (cp >= 91 and cp <= 96) or (cp >= 123 and cp <= 126)):\n    return True\n  cat = unicodedata.category(char)\n  if cat.startswith(\"P\"):\n    return True\n  return False\n"
        }
      ]
    }
  ]
}