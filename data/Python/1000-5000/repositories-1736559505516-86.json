{
  "metadata": {
    "timestamp": 1736559505516,
    "page": 86,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "0x5e/wechat-deleted-friends",
      "stars": 4776,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.685546875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9541015625,
          "content": "# Êü•ÁúãË¢´Âà†ÁöÑÂæÆ‰ø°Â•ΩÂèã\n\n## Ê≥®ÊÑè\n\nÁõÆÂâçÂ≠òÂú®‰∏§‰∏™ÈòªÁ¢ç‰ΩøÁî®ÁöÑÈóÆÈ¢òÔºåÊâÄ‰ª•Â∑≤ÁªèÊó†Ê≥ï‰ΩøÁî®‰∫ÜÔºåËØ∑ÂêéÈù¢Êù•ÁöÑÂêåÂ≠¶‰ª¨ÁúãÁúãÂ∞±Â•ΩÔºå‰∏çÁî®Â∞ùËØï‰∫Ü„ÄÇ„ÄÇ„ÄÇ„ÄÇË∞¢Ë∞¢Â§ßÂÆ∂ÁöÑÂÖ≥Ê≥®~\n\n- Êñ∞Âª∫Áæ§ÁªÑÔºåÊ∑ªÂä†Â•ΩÂèãÁöÑÊé•Âè£Â≠òÂú®Êï∞ÈáèÈôêÂà∂„ÄÇÂú®‰∏ÄÂÆöÊó∂Èó¥ÂÜÖÊ∑ªÂä†ÁöÑÊÄª‰∫∫Êï∞Ë∂ÖËøá‰∏ÄÂÆöÊï∞ÈáèÂêéÔºåÊé•Âè£Â∞±‰ºöÊó†Ê≥ï‰ΩøÁî®„ÄÇÔºàÂπªÊÉ≥Áî®ÈöèÊú∫Êï∞ÁöÑÁ´•ÈûãÊîæÂºÉÂêß„ÄÇ„ÄÇÂèØËÉΩÊòØ‰Ω†Â•ΩÂèãÊï∞Èáè‰∏çÂ§üÂ§öÔºüÔºâ\n- ÊçÆVÁ´ôÊúãÂèãÂèçÈ¶à(@kobe1941)ÔºöÂç≥‰Ωø‰Ω†Â∑≤Ë¢´ÂØπÊñπÂà†Èô§Â•ΩÂèãÔºå‰æùÁÑ∂ÂèØ‰ª•ÊãâÂØπÊñπÂÖ•Áæ§ÔºåÊâÄ‰ª•ËØ•ËÑöÊú¨Â∑•‰ΩúÁöÑÂâçÊèêÂ∑≤‰∏çÂ≠òÂú®„ÄÇ\n\nÊé®Ëçê‰∏§‰∏™Áõ∏ÂÖ≥È°πÁõÆÔºö\n\n[Urinx / WeixinBot](https://github.com/Urinx/WeixinBot)ÔºöÁΩëÈ°µÁâàÂæÆ‰ø°APIÔºåÂåÖÂê´ÁªàÁ´ØÁâàÂæÆ‰ø°ÂèäÂæÆ‰ø°Êú∫Âô®‰∫∫\n\n[geeeeeeeeek / electronic-wechat](https://github.com/geeeeeeeeek/electronic-wechat)Ôºöüí¨ A better WeChat on macOS and Linux. Fewer bugs, more features. Built with Electron by Zhongyi Tong.\n\nÂçèËÆÆÁõ∏ÂÖ≥ÊñáÊ°£Ôºö\n\n[xiangzhai / qwx - ÁΩëÈ°µÂæÆ‰ø°ÂÆ¢Êà∑Á´ØÂ∞ÅÂåÖÂ§ßÂÖ®](https://github.com/xiangzhai/qwx/blob/master/doc/protocol.md)\n\n## ‰ªãÁªç\n\nÂéüÁêÜÂ∞±ÊòØÊñ∞Âª∫Áæ§ÁªÑ,Â¶ÇÊûúÂä†‰∏çËøõÊù•Â∞±ÊòØË¢´Âà†Â•ΩÂèã‰∫Ü(‰∏çË¶ÅÂú®Áæ§ÁªÑÈáåËÆ≤ËØù,Âà´‰∫∫ÊòØÁúã‰∏çËßÅÁöÑ)\n\nÁî®ÁöÑÊòØÂæÆ‰ø°ÁΩëÈ°µÁâàÁöÑÊé•Âè£\n\nÊü•ËØ¢ÁªìÊûúÂèØËÉΩ‰ºöÂºïËµ∑‰∏Ä‰∫õÂøÉÁêÜ‰∏äÁöÑ‰∏çÈÄÇ,ËØ∑Â∞èÂøÉ‰ΩøÁî®..(ÈÄÉ\n\nMac OSÁî®Ê≥ï:\nÂêØÂä®Terminal\n\n`$ python wdf.py`\n\nÊåâÊåáÁ§∫ÂÅöÂç≥ÂèØ\n\nËØ∑Á°Æ‰øùrequestsÊ®°ÂùóÂ∑≤ÊàêÂäüÂÆâË£Ö\n\n`$ pip install requests   #ÂÆâË£ÖrequestsÊ®°Âùó`\n\n### ÊöÇÊú™Ëß£ÂÜ≥ÁöÑÈóÆÈ¢ò\n\nÈîôËØØ1205 \"Êìç‰ΩúÂ§™È¢ëÁπÅÔºåËØ∑Á®çÂêéÂÜçËØï„ÄÇ\" (Â≠òÂú®Êé•Âè£ËÆøÈóÆÈôêÂà∂)\n\n‰∏çÊ∏ÖÊ•öÊé•Âè£ÁöÑÈôêÂà∂Á≠ñÁï•ÊòØ‰ªÄ‰πà,ÊúâÁöÑÂêåÂ≠¶ËÉΩÁî®ÊúâÁöÑ‰∏çËÉΩÁî®\n\nÊâìÂç∞Ë¢´ÊãâÈªëÁöÑÂàóË°®(Ë¢´ÈôêÂà∂‰∫Ü,Ê≤°Ê≥ïÊµãËØï..)\n\nURLError (ÁΩëÁªúÂºÇÂ∏∏Êú™Â§ÑÁêÜ)\n\nÊúÄÁªà‰ºöÈÅóÁïô‰∏ã‰∏Ä‰∏™Âè™ÊúâËá™Â∑±ÁöÑÁæ§ÁªÑ,ÈúÄË¶ÅÊâãÂ∑•Âà†‰∏Ä‰∏ã\n\n## ÂÖ∂‰ªñËØ≠Ë®ÄÂÆûÁé∞\n\n[Go Áâà](https://github.com/miraclesu/wechat-deleted-friends)\n\n[Node.js Áâà](https://github.com/chemdemo/wechat-helper)\n\n[Chrome Êèí‰ª∂](https://github.com/liaohuqiu/wechat-helper)\n\n"
        },
        {
          "name": "wdf.py",
          "type": "blob",
          "size": 15.0888671875,
          "content": "#!/usr/bin/env python\n# coding=utf-8\nfrom __future__ import print_function\n\nimport os\nimport requests\nimport re\nimport time\nimport xml.dom.minidom\nimport json\nimport sys\nimport math\nimport subprocess\nimport ssl\nimport threading\n\nDEBUG = False\n\nMAX_GROUP_NUM = 2  # ÊØèÁªÑ‰∫∫Êï∞\nINTERFACE_CALLING_INTERVAL = 5  # Êé•Âè£Ë∞ÉÁî®Êó∂Èó¥Èó¥Èöî, Èó¥ÈöîÂ§™Áü≠ÂÆπÊòìÂá∫Áé∞\"Êìç‰ΩúÂ§™È¢ëÁπÅ\", ‰ºöË¢´ÈôêÂà∂Êìç‰ΩúÂçäÂ∞èÊó∂Â∑¶Âè≥\nMAX_PROGRESS_LEN = 50\n\nQRImagePath = os.path.join(os.getcwd(), 'qrcode.jpg')\n\ntip = 0\nuuid = ''\n\nbase_uri = ''\nredirect_uri = ''\npush_uri = ''\n\nskey = ''\nwxsid = ''\nwxuin = ''\npass_ticket = ''\ndeviceId = 'e000000000000000'\n\nBaseRequest = {}\n\nContactList = []\nMy = []\nSyncKey = []\n\ntry:\n    xrange\n    range = xrange\nexcept:\n    # python 3\n    pass\n\n\ndef responseState(func, BaseResponse):\n    ErrMsg = BaseResponse['ErrMsg']\n    Ret = BaseResponse['Ret']\n    if DEBUG or Ret != 0:\n        print('func: %s, Ret: %d, ErrMsg: %s' % (func, Ret, ErrMsg))\n\n    if Ret != 0:\n        return False\n\n    return True\n\n\n\ndef getUUID():\n    global uuid\n\n    url = 'https://login.weixin.qq.com/jslogin'\n    params = {\n        'appid': 'wx782c26e4c19acffb',\n        'fun': 'new',\n        'lang': 'zh_CN',\n        '_': int(time.time()),\n    }\n\n    r= myRequests.get(url=url, params=params)\n    r.encoding = 'utf-8'\n    data = r.text\n\n    # print(data)\n\n    # window.QRLogin.code = 200; window.QRLogin.uuid = \"oZwt_bFfRg==\";\n    regx = r'window.QRLogin.code = (\\d+); window.QRLogin.uuid = \"(\\S+?)\"'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n    uuid = pm.group(2)\n\n    if code == '200':\n        return True\n\n    return False\n\n\ndef showQRImage():\n    global tip\n\n    url = 'https://login.weixin.qq.com/qrcode/' + uuid\n    params = {\n        't': 'webwx',\n        '_': int(time.time()),\n    }\n\n    r = myRequests.get(url=url, params=params)\n\n    tip = 1\n\n    f = open(QRImagePath, 'wb')\n    f.write(r.content)\n    f.close()\n    time.sleep(1)\n\n    if sys.platform.find('darwin') >= 0:\n        subprocess.call(['open', QRImagePath])\n    elif sys.platform.find('linux') >= 0:\n        subprocess.call(['xdg-open', QRImagePath])\n    else:\n        os.startfile(QRImagePath)\n\n    print('ËØ∑‰ΩøÁî®ÂæÆ‰ø°Êâ´Êèè‰∫åÁª¥Á†Å‰ª•ÁôªÂΩï')\n\n\ndef waitForLogin():\n    global tip, base_uri, redirect_uri, push_uri\n\n    url = 'https://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?tip=%s&uuid=%s&_=%s' % (\n        tip, uuid, int(time.time()))\n\n    r = myRequests.get(url=url)\n    r.encoding = 'utf-8'\n    data = r.text\n\n    # print(data)\n\n    # window.code=500;\n    regx = r'window.code=(\\d+);'\n    pm = re.search(regx, data)\n\n    code = pm.group(1)\n\n    if code == '201':  # Â∑≤Êâ´Êèè\n        print('ÊàêÂäüÊâ´Êèè,ËØ∑Âú®ÊâãÊú∫‰∏äÁÇπÂáªÁ°ÆËÆ§‰ª•ÁôªÂΩï')\n        tip = 0\n    elif code == '200':  # Â∑≤ÁôªÂΩï\n        print('Ê≠£Âú®ÁôªÂΩï...')\n        regx = r'window.redirect_uri=\"(\\S+?)\";'\n        pm = re.search(regx, data)\n        redirect_uri = pm.group(1) + '&fun=new'\n        base_uri = redirect_uri[:redirect_uri.rfind('/')]\n\n        # push_uri‰∏ébase_uriÂØπÂ∫îÂÖ≥Á≥ª(ÊéíÂêçÂàÜÂÖàÂêé)(Â∞±ÊòØËøô‰πàÂ•áËë©..)\n        services = [\n            ('wx2.qq.com', 'webpush2.weixin.qq.com'),\n            ('qq.com', 'webpush.weixin.qq.com'),\n            ('web1.wechat.com', 'webpush1.wechat.com'),\n            ('web2.wechat.com', 'webpush2.wechat.com'),\n            ('wechat.com', 'webpush.wechat.com'),\n            ('web1.wechatapp.com', 'webpush1.wechatapp.com'),\n        ]\n        push_uri = base_uri\n        for (searchUrl, pushUrl) in services:\n            if base_uri.find(searchUrl) >= 0:\n                push_uri = 'https://%s/cgi-bin/mmwebwx-bin' % pushUrl\n                break\n\n        # closeQRImage\n        if sys.platform.find('darwin') >= 0:  # for OSX with Preview\n            os.system(\"osascript -e 'quit app \\\"Preview\\\"'\")\n    elif code == '408':  # Ë∂ÖÊó∂\n        pass\n    # elif code == '400' or code == '500':\n\n    return code\n\n\ndef login():\n    global skey, wxsid, wxuin, pass_ticket, BaseRequest\n\n    r = myRequests.get(url=redirect_uri)\n    r.encoding = 'utf-8'\n    data = r.text\n\n    # print(data)\n\n    doc = xml.dom.minidom.parseString(data)\n    root = doc.documentElement\n\n    for node in root.childNodes:\n        if node.nodeName == 'skey':\n            skey = node.childNodes[0].data\n        elif node.nodeName == 'wxsid':\n            wxsid = node.childNodes[0].data\n        elif node.nodeName == 'wxuin':\n            wxuin = node.childNodes[0].data\n        elif node.nodeName == 'pass_ticket':\n            pass_ticket = node.childNodes[0].data\n\n    # print('skey: %s, wxsid: %s, wxuin: %s, pass_ticket: %s' % (skey, wxsid,\n    # wxuin, pass_ticket))\n\n    if not all((skey, wxsid, wxuin, pass_ticket)):\n        return False\n\n    BaseRequest = {\n        'Uin': int(wxuin),\n        'Sid': wxsid,\n        'Skey': skey,\n        'DeviceID': deviceId,\n    }\n\n    return True\n\n\ndef webwxinit():\n\n    url = (base_uri + \n        '/webwxinit?pass_ticket=%s&skey=%s&r=%s' % (\n            pass_ticket, skey, int(time.time())) )\n    params  = {'BaseRequest': BaseRequest }\n    headers = {'content-type': 'application/json; charset=UTF-8'}\n\n    r = myRequests.post(url=url, data=json.dumps(params),headers=headers)\n    r.encoding = 'utf-8'\n    data = r.json()\n\n    if DEBUG:\n        f = open(os.path.join(os.getcwd(), 'webwxinit.json'), 'wb')\n        f.write(r.content)\n        f.close()\n\n\n    # print(data)\n\n    global ContactList, My, SyncKey\n    dic = data\n    ContactList = dic['ContactList']\n    My = dic['User']\n    SyncKey = dic['SyncKey']\n\n    state = responseState('webwxinit', dic['BaseResponse'])\n    return state\n\n\ndef webwxgetcontact():\n\n    url = (base_uri + \n        '/webwxgetcontact?pass_ticket=%s&skey=%s&r=%s' % (\n            pass_ticket, skey, int(time.time())) )\n    headers = {'content-type': 'application/json; charset=UTF-8'}\n\n\n    r = myRequests.post(url=url,headers=headers)\n    r.encoding = 'utf-8'\n    data = r.json()\n\n    if DEBUG:\n        f = open(os.path.join(os.getcwd(), 'webwxgetcontact.json'), 'wb')\n        f.write(r.content)\n        f.close()\n\n    # print(data)\n\n    dic = data\n    MemberList = dic['MemberList']\n\n    # ÂÄíÂ∫èÈÅçÂéÜ,‰∏çÁÑ∂Âà†Èô§ÁöÑÊó∂ÂÄôÂá∫ÈóÆÈ¢ò..\n    SpecialUsers = [\"newsapp\", \"fmessage\", \"filehelper\", \"weibo\", \"qqmail\", \"tmessage\", \"qmessage\", \"qqsync\", \"floatbottle\", \"lbsapp\", \"shakeapp\", \"medianote\", \"qqfriend\", \"readerapp\", \"blogapp\", \"facebookapp\", \"masssendapp\",\n                    \"meishiapp\", \"feedsapp\", \"voip\", \"blogappweixin\", \"weixin\", \"brandsessionholder\", \"weixinreminder\", \"wxid_novlwrv3lqwv11\", \"gh_22b87fa7cb3c\", \"officialaccounts\", \"notification_messages\", \"wxitil\", \"userexperience_alarm\"]\n    for i in range(len(MemberList) - 1, -1, -1):\n        Member = MemberList[i]\n        if Member['VerifyFlag'] & 8 != 0:  # ÂÖ¨‰ºóÂè∑/ÊúçÂä°Âè∑\n            MemberList.remove(Member)\n        elif Member['UserName'] in SpecialUsers:  # ÁâπÊÆäË¥¶Âè∑\n            MemberList.remove(Member)\n        elif Member['UserName'].find('@@') != -1:  # Áæ§ËÅä\n            MemberList.remove(Member)\n        elif Member['UserName'] == My['UserName']:  # Ëá™Â∑±\n            MemberList.remove(Member)\n\n    return MemberList\n\n\ndef createChatroom(UserNames):\n    MemberList = [{'UserName': UserName} for UserName in UserNames]\n\n    url = (base_uri + \n        '/webwxcreatechatroom?pass_ticket=%s&r=%s' % (\n            pass_ticket, int(time.time())) )\n    params = {\n        'BaseRequest': BaseRequest,\n        'MemberCount': len(MemberList),\n        'MemberList': MemberList,\n        'Topic': '',\n    }\n    headers = {'content-type': 'application/json; charset=UTF-8'}\n\n    r = myRequests.post(url=url, data=json.dumps(params),headers=headers)\n    r.encoding = 'utf-8'\n    data = r.json()\n\n    # print(data)\n\n    dic = data\n    ChatRoomName = dic['ChatRoomName']\n    MemberList = dic['MemberList']\n    DeletedList = []\n    BlockedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4:  # Ë¢´ÂØπÊñπÂà†Èô§‰∫Ü\n            DeletedList.append(Member['UserName'])\n        elif Member['MemberStatus'] == 3:  # Ë¢´Âä†ÂÖ•ÈªëÂêçÂçï\n            BlockedList.append(Member['UserName'])\n\n    state = responseState('createChatroom', dic['BaseResponse'])\n\n    return ChatRoomName, DeletedList, BlockedList\n\n\ndef deleteMember(ChatRoomName, UserNames):\n    url = (base_uri + \n        '/webwxupdatechatroom?fun=delmember&pass_ticket=%s' % (pass_ticket) )\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'DelMemberList': ','.join(UserNames),\n    }\n    headers = {'content-type': 'application/json; charset=UTF-8'}\n\n    r = myRequests.post(url=url, data=json.dumps(params),headers=headers)\n    r.encoding = 'utf-8'\n    data = r.json()\n\n    # print(data)\n\n    dic = data\n\n    state = responseState('deleteMember', dic['BaseResponse'])\n    return state\n\n\ndef addMember(ChatRoomName, UserNames):\n    url = (base_uri + \n        '/webwxupdatechatroom?fun=addmember&pass_ticket=%s' % (pass_ticket) )\n    params = {\n        'BaseRequest': BaseRequest,\n        'ChatRoomName': ChatRoomName,\n        'AddMemberList': ','.join(UserNames),\n    }\n    headers = {'content-type': 'application/json; charset=UTF-8'}\n\n    r = myRequests.post(url=url, data=json.dumps(params),headers=headers)\n    r.encoding = 'utf-8'\n    data = r.json()\n\n    # print(data)\n\n    dic = data\n    MemberList = dic['MemberList']\n    DeletedList = []\n    BlockedList = []\n    for Member in MemberList:\n        if Member['MemberStatus'] == 4:  # Ë¢´ÂØπÊñπÂà†Èô§‰∫Ü\n            DeletedList.append(Member['UserName'])\n        elif Member['MemberStatus'] == 3:  # Ë¢´Âä†ÂÖ•ÈªëÂêçÂçï\n            BlockedList.append(Member['UserName'])\n\n    state = responseState('addMember', dic['BaseResponse'])\n\n    return DeletedList, BlockedList\n\n\ndef syncKey():\n    SyncKeyItems = ['%s_%s' % (item['Key'], item['Val'])\n                    for item in SyncKey['List']]\n    SyncKeyStr = '|'.join(SyncKeyItems)\n    return SyncKeyStr\n\n\ndef syncCheck():\n    url = push_uri + '/synccheck?'\n    params = {\n        'skey': BaseRequest['Skey'],\n        'sid': BaseRequest['Sid'],\n        'uin': BaseRequest['Uin'],\n        'deviceId': BaseRequest['DeviceID'],\n        'synckey': syncKey(),\n        'r': int(time.time()),\n    }\n\n    r = myRequests.get(url=url,params=params)\n    r.encoding = 'utf-8'\n    data = r.text\n\n    # print(data)\n\n    # window.synccheck={retcode:\"0\",selector:\"2\"}\n    regx = r'window.synccheck={retcode:\"(\\d+)\",selector:\"(\\d+)\"}'\n    pm = re.search(regx, data)\n\n    retcode = pm.group(1)\n    selector = pm.group(2)\n\n    return selector\n\n\ndef webwxsync():\n    global SyncKey\n\n    url = base_uri + '/webwxsync?lang=zh_CN&skey=%s&sid=%s&pass_ticket=%s' % (\n        BaseRequest['Skey'], BaseRequest['Sid'], quote_plus(pass_ticket))\n    params = {\n        'BaseRequest': BaseRequest,\n        'SyncKey': SyncKey,\n        'rr': ~int(time.time()),\n    }\n    headers = {'content-type': 'application/json; charset=UTF-8'}\n\n    r = myRequests.post(url=url, data=json.dumps(params))\n    r.encoding = 'utf-8'\n    data = r.json()\n\n    # print(data)\n\n    dic = data\n    SyncKey = dic['SyncKey']\n\n    state = responseState('webwxsync', dic['BaseResponse'])\n    return state\n\n\ndef heartBeatLoop():\n    while True:\n        selector = syncCheck()\n        if selector != '0':\n            webwxsync()\n        time.sleep(1)\n\n\ndef main():\n    global myRequests\n\t\n    if hasattr(ssl, '_create_unverified_context'):\n        ssl._create_default_https_context = ssl._create_unverified_context\n\n    headers = {'User-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36'}\n    myRequests = requests.Session()\n    myRequests.headers.update(headers)\n\n\n    if not getUUID():\n        print('Ëé∑ÂèñuuidÂ§±Ë¥•')\n        return\n\n    print('Ê≠£Âú®Ëé∑Âèñ‰∫åÁª¥Á†ÅÂõæÁâá...')\n    showQRImage()\n\n    while waitForLogin() != '200':\n        pass\n\n    os.remove(QRImagePath)\n\n    if not login():\n        print('ÁôªÂΩïÂ§±Ë¥•')\n        return\n\n    if not webwxinit():\n        print('ÂàùÂßãÂåñÂ§±Ë¥•')\n        return\n\n    MemberList = webwxgetcontact()\n\n    print('ÂºÄÂêØÂøÉË∑≥Á∫øÁ®ã')\n    threading.Thread(target=heartBeatLoop)\n\n    MemberCount = len(MemberList)\n    print('ÈÄöËÆØÂΩïÂÖ±%s‰ΩçÂ•ΩÂèã' % MemberCount)\n\n    ChatRoomName = ''\n    result = []\n    d = {}\n    for Member in MemberList:\n        d[Member['UserName']] = (Member['NickName'], Member['RemarkName'])\n    print('ÂºÄÂßãÊü•Êâæ...')\n    group_num = int(math.ceil(MemberCount / float(MAX_GROUP_NUM)))\n    for i in range(0, group_num):\n        UserNames = []\n        for j in range(0, MAX_GROUP_NUM):\n            if i * MAX_GROUP_NUM + j >= MemberCount:\n                break\n            Member = MemberList[i * MAX_GROUP_NUM + j]\n            UserNames.append(Member['UserName'])\n\n        # Êñ∞Âª∫Áæ§ÁªÑ/Ê∑ªÂä†ÊàêÂëò\n        if ChatRoomName == '':\n            (ChatRoomName, DeletedList, BlockedList) = createChatroom(\n                UserNames)\n        else:\n            (DeletedList, BlockedList) = addMember(ChatRoomName, UserNames)\n\n        # todo BlockedList Ë¢´ÊãâÈªëÂàóË°®\n\n        DeletedCount = len(DeletedList)\n        if DeletedCount > 0:\n            result += DeletedList\n\n        # Âà†Èô§ÊàêÂëò\n        deleteMember(ChatRoomName, UserNames)\n\n        # ËøõÂ∫¶Êù°\n        progress = MAX_PROGRESS_LEN * (i + 1) / group_num\n        print('[', '#' * int(progress), '-' * int(MAX_PROGRESS_LEN - progress), ']', end=' ')\n        print('Êñ∞ÂèëÁé∞‰Ω†Ë¢´%d‰∫∫Âà†Èô§' % DeletedCount)\n        for i in range(DeletedCount):\n            if d[DeletedList[i]][1] != '':\n                print('%s(%s)' % (d[DeletedList[i]][0],d[DeletedList[i]][1]))\n            else:\n                print(d[DeletedList[i]][0])\n\n        if i != group_num - 1:\n            print('Ê≠£Âú®ÁªßÁª≠Êü•Êâæ,ËØ∑ËÄêÂøÉÁ≠âÂæÖ...')\n            # ‰∏ã‰∏ÄÊ¨°ËøõË°åÊé•Âè£Ë∞ÉÁî®ÈúÄË¶ÅÁ≠âÂæÖÁöÑÊó∂Èó¥\n            time.sleep(INTERFACE_CALLING_INTERVAL)\n    # todo Âà†Èô§Áæ§ÁªÑ\n\n    print('\\nÁªìÊûúÊ±áÊÄªÂÆåÊØï,20sÂêéÂèØÈáçËØï...')\n    resultNames = []\n    for r in result:\n        if d[r][1] != '':\n            resultNames.append('%s(%s)' % (d[r][0],d[r][1]))\n        else:\n            resultNames.append(d[r][0])\n\n    print('---------- Ë¢´Âà†Èô§ÁöÑÂ•ΩÂèãÂàóË°®(ÂÖ±%d‰∫∫) ----------' % len(result))\n    # ËøáÊª§emoji\n    resultNames = list(map(lambda x: re.sub(r'<span.+/span>', '', x), resultNames))\n    if len(resultNames):\n        print('\\n'.join(resultNames))\n    else:\n        print(\"Êó†\")\n    print('---------------------------------------------')\n\n\n# windows‰∏ãÁºñÁ†ÅÈóÆÈ¢ò‰øÆÂ§ç\n# http://blog.csdn.net/heyuxuanzee/article/details/8442718\n\nclass UnicodeStreamFilter:\n\n    def __init__(self, target):\n        self.target = target\n        self.encoding = 'utf-8'\n        self.errors = 'replace'\n        self.encode_to = self.target.encoding\n\n    def write(self, s):\n        if type(s) == str:\n            try:\n                s = s.decode('utf-8')\n            except:\n                pass\n        s = s.encode(self.encode_to, self.errors).decode(self.encode_to)\n        self.target.write(s)\n\nif sys.stdout.encoding == 'cp936':\n    sys.stdout = UnicodeStreamFilter(sys.stdout)\n\nif __name__ == '__main__':\n\n    print('Êú¨Á®ãÂ∫èÁöÑÊü•ËØ¢ÁªìÊûúÂèØËÉΩ‰ºöÂºïËµ∑‰∏Ä‰∫õÂøÉÁêÜ‰∏äÁöÑ‰∏çÈÄÇ,ËØ∑Â∞èÂøÉ‰ΩøÁî®...')\n    print('1Â∞èÊó∂ÂÜÖÂè™ËÉΩ‰ΩøÁî®‰∏ÄÊ¨°ÔºåÂê¶Âàô‰ºöÂõ†Êìç‰ΩúÁπÅÂøôÈòªÊ≠¢Âª∫Áæ§')\n    main()\n    print('ÂõûËΩ¶ÈîÆÈÄÄÂá∫...')\n    input()\n"
        }
      ]
    }
  ]
}