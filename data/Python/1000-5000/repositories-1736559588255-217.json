{
  "metadata": {
    "timestamp": 1736559588255,
    "page": 217,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MakiNaruto/Automatic_ticket_purchase",
      "stars": 4470,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": ".idea/\n\nPipfile\n"
        },
        {
          "name": "Automatic_ticket_purchase.py",
          "type": "blob",
          "size": 15.2822265625,
          "content": "# -*- coding: UTF-8 -*-\n\"\"\"\n__Author__ = \"MakiNaruto\"\n__Version__ = \"2.1.0\"\n__Description__ = \"\"\n__Created__ = 2022/2/14 10:37 下午\n\"\"\"\n\nimport re\nimport os\nimport json\nimport tools\nimport argparse\nimport requests\nfrom requests import session\n\n\nclass DaMaiTicket:\n    def __init__(self):\n        # 登录信息\n        self.login_cookies = {}\n        self.session = session()\n        self.login_id: str = 'account'  # 大麦网登录账户名\n        self.login_password: str = 'password'  # 大麦网登录密码\n        # 以下为抢票必须的参数\n        self.item_id: int = 610820299671  # 商品id\n        self.viewer: list = ['viewer1']  # 在大麦网已填写的观影人\n        self.buy_nums: int = 1  # 购买影票数量, 需与观影人数量一致\n        self.ticket_price: int = 180  # 购买指定票价\n\n    def step1_get_order_info(self, item_id, commodity_param, ticket_price=None):\n        \"\"\"\n        获取点击购买所必须的参数信息\n        :param item_id:             商品id\n        :param commodity_param:     获取商品购买信息必须的参数\n        :param ticket_price:        购买指定价位的票\n        :return:\n        \"\"\"\n        if not ticket_price:\n            print('-' * 10, '票价未填写, 请选择票价', '-' * 10)\n            return False\n\n        commodity_param.update({'itemId': item_id})\n        headers = {\n            'authority': 'detail.damai.cn',\n            'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"98\", \"Google Chrome\";v=\"98\"',\n            'sec-ch-ua-mobile': '?0',\n            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'accept': '*/*',\n            'sec-fetch-site': 'same-origin',\n            'sec-fetch-mode': 'no-cors',\n            'sec-fetch-dest': 'script',\n            'referer': 'https://detail.damai.cn/item.htm',\n            'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n        }\n\n        response = self.session.get('https://detail.damai.cn/subpage', headers=headers, params=commodity_param)\n        ticket_info = json.loads(response.text.replace('null(', '').replace('__jp0(', '')[:-1])\n        all_ticket_sku = ticket_info['perform']['skuList']\n        sku_id_sequence = 0\n        sku_id = ''\n        if ticket_price:\n            for index, sku in enumerate(all_ticket_sku):\n                if sku.get('price') and float(sku.get('price')) == float(ticket_price):\n                    sku_id_sequence = index\n                    sku_id = sku.get('skuId')\n                    break\n        return ticket_info, sku_id_sequence, sku_id\n\n    def step2_click_buy_now(self, ex_params, sku_info):\n        \"\"\"\n        点击立即购买\n        :param ex_params:   点击立即购买按钮所发送请求的必须参数\n        :param sku_info:    购买指定商品信息及数量信息\n        :return:\n        \"\"\"\n\n        headers = {\n            'authority': 'buy.damai.cn',\n            'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'upgrade-insecure-requests': '1',\n            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36',\n            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'navigate',\n            'sec-fetch-user': '?1',\n            'sec-fetch-dest': 'document',\n            'referer': 'https://detail.damai.cn/',\n            'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7'\n        }\n        params = {\n            'exParams': json.dumps(ex_params),\n            'buyParam': sku_info,\n            'buyNow': 'true',\n            'spm': 'a2oeg.project.projectinfo.dbuy'\n        }\n\n        response = self.session.get('https://buy.damai.cn/orderConfirm', headers=headers,\n                                    params=params, cookies=self.login_cookies)\n        result = re.search('window.__INIT_DATA__[\\s\\S]*?};', response.text)\n        self.login_cookies.update(self.session.cookies)\n        try:\n            submit_order_info = json.loads(result.group().replace('window.__INIT_DATA__ = ', '')[:-1])\n            submit_order_info.update({'output': json.loads(submit_order_info.get('output'))})\n        except Exception as e:\n            print('-' * 10, '获取购买必备参数异常，请重新解析response返回的参数', '-' * 10)\n            print(result.group())\n            return False\n        return submit_order_info\n\n    def step2_click_confirm_select_seats(self, project_id, perform_id, seat_info, sku_info):\n        \"\"\" 选座购买，点击确认选座 \"\"\"\n        headers = {\n            'authority': 'buy.damai.cn',\n            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\n            'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n            'cache-control': 'max-age=0',\n            'referer': 'https://seatsvc.damai.cn/',\n            'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"100\", \"Google Chrome\";v=\"100\"',\n            'sec-ch-ua-mobile': '?0',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'sec-fetch-dest': 'document',\n            'sec-fetch-mode': 'navigate',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-user': '?1',\n            'upgrade-insecure-requests': '1',\n            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',\n        }\n\n        params = {\n            'exParams': json.dumps({'damai': '1',\n                                    'channel': 'damai_app',\n                                    'umpChannel': '10002',\n                                    'atomSplit': '1',\n                                    'seatInfo': seat_info,\n                                    'serviceVersion': '2.0.0'}).replace(' ', ''),\n            'buyParam': sku_info,\n            'buyNow': 'true',\n            'projectId': project_id,\n            'performId': perform_id,\n            'spm': 'a2oeg.selectseat.bottom.dbuy',\n        }\n\n        response = requests.get('https://buy.damai.cn/orderConfirm', params=params, cookies=self.login_cookies,\n                                headers=headers)\n        if response.status_code == 200:\n            result = re.search('window.__INIT_DATA__[\\s\\S]*?};', response.text)\n            self.login_cookies.update(self.session.cookies)\n            try:\n                submit_order_info = json.loads(result.group().replace('window.__INIT_DATA__ = ', '')[:-1])\n                submit_order_info.update({'output': json.loads(submit_order_info.get('output'))})\n            except Exception as e:\n                print('-' * 10, '获取购买必备参数异常，请重新解析response返回的参数', '-' * 10)\n                print(result.group())\n                return False\n            return submit_order_info\n\n    def step3_submit_order(self, submit_order_info, viewer, seat_info=None):\n        \"\"\"\n        提交订单所需参数信息\n        :param submit_order_info:   最终确认订单所需的所有信息。\n        :param viewer:  指定观演人进行购票\n        :param seat_info:  座位id\n        :return:\n        \"\"\"\n        headers = {\n            'authority': 'buy.damai.cn',\n            'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"98\", \"Google Chrome\";v=\"98\"',\n            'accept': 'application/json, text/plain, */*',\n            'content-type': 'application/json;charset=UTF-8',\n            'x-requested-with': 'XMLHttpRequest',\n            'sec-ch-ua-mobile': '?0',\n            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.109 Safari/537.36',\n            'sec-ch-ua-platform': '\"macOS\"',\n            'origin': 'https://buy.damai.cn',\n            'sec-fetch-site': 'same-origin',\n            'sec-fetch-mode': 'cors',\n            'sec-fetch-dest': 'empty',\n            'referer': 'https://buy.damai.cn/orderConfirm?',\n            'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n        }\n\n        params = (\n            ('feature', '{\"returnUrl\":\"https://orders.damai.cn/orderDetail\",\"serviceVersion\":\"1.8.5\"}'),\n            ('submitref', 'undefined'),\n        )\n        dm_viewer_pc = str([k for k, v in submit_order_info.get('data').items()])\n        dm_viewer_pc_id_search = re.search('dmViewerPC_[0-9]*', dm_viewer_pc)\n        if dm_viewer_pc_id_search:\n            dm_viewer_pc_id = dm_viewer_pc_id_search.group()  # 获取到观演人的 key\n            user_list = submit_order_info['data'][dm_viewer_pc_id]['fields']['dmViewerList']\n            all_available_user = [name.get('viewerName') for name in user_list]\n            if len(set(viewer).intersection(set(all_available_user))) != len(viewer):\n                print('-' * 10, '请检查输入的观演人信息与大麦网观演人信息是否一致', '-' * 10)\n                return False\n            for user in user_list:\n                if user.get('viewerName') in viewer:\n                    user['isUsed'] = True\n            # 若为选座购买, 则需要添加座位id。\n            if seat_info:\n                seat_info = [seat.get('seatId') for seat in seat_info]\n                seat_index = 0\n                for user in user_list:\n                    if seat_index > len(viewer) - 1:\n                        break\n                    if user.get('viewerName') in viewer:\n                        user['seatId'] = seat_info[seat_index]\n                        seat_index += 1\n        else:\n            print(\"该场次不需要指定观演人\")\n\n        submit_order_info = json.dumps(submit_order_info)\n        response = self.session.post('https://buy.damai.cn/multi/trans/createOrder',\n                                     headers=headers,\n                                     params=params,\n                                     data=submit_order_info,\n                                     cookies=self.login_cookies)\n        buy_status = json.loads(response.text)\n        if buy_status.get('success') is True and buy_status.get('module').get('alipayOrderId'):\n            print('-' * 10, '抢票成功, 请前往 大麦网->我的大麦->交易中心->订单管理 确认订单', '-' * 10)\n            print('alipayOrderId: ', buy_status.get('module').get('alipayOrderId'))\n            print('支付宝支付链接: ', buy_status.get('module').get('alipayWapCashierUrl'))\n\n    def run(self):\n        if len(self.viewer) != self.buy_nums:\n            print('-' * 10, '购买数量与实际观演人数量不符', '-' * 10)\n            return\n        if os.path.exists('cookies.pkl'):\n            cookies = tools.load_cookies()\n            self.login_cookies.update(cookies)\n        elif 'account' == args.mode.lower():\n            self.login_cookies = tools.account_login('account', self.login_id, self.login_password)\n        else:\n            self.login_cookies = tools.account_login('qr')\n\n        login_status = tools.check_login_status(self.login_cookies)\n\n        if not login_status:\n            print('-' * 10, '登录失败, 请检查登录账号信息。若使用保存的cookies，则删除cookies文件重新尝试', '-' * 10)\n            return\n        elif login_status and not os.path.exists('cookies.pkl'):\n            tools.save_cookies(self.login_cookies)\n\n        commodity_param, ex_params = tools.get_api_param()\n\n        submit_order_info = ''\n        buy_serial_number = ''\n        seat_info = None\n        while True:\n            ticket_info, sku_id_sequence, sku_id = self.step1_get_order_info(self.item_id, commodity_param,\n                                                                             ticket_price=self.ticket_price)\n            ticket_sku_status = ticket_info['skuPagePcBuyBtn']['skuBtnList'][sku_id_sequence]['btnText']\n            if ticket_sku_status == '即将开抢':\n                continue\n            elif ticket_sku_status == '缺货登记':\n                print('-' * 10, '手慢了，该票价已经售空: ', ticket_sku_status, '-' * 10)\n                return False\n            elif ticket_sku_status == '立即购买':\n                buy_serial_number = '{}_{}_{}'.format(self.item_id, self.buy_nums, sku_id)\n                submit_order_info = self.step2_click_buy_now(ex_params, buy_serial_number)\n                break\n            elif ticket_sku_status == '选座购买':\n                # 获取选座购买必备的数据信息。\n                city_id, project_id, item_id, perform_id = tools.get_select_seat_params(self.item_id)\n                stand_id, seat_price_list = tools.get_seat_dynamic_info(self.login_cookies, project_id, item_id,\n                                                                        perform_id)\n                api_address = tools.get_select_seat_api(self.login_cookies, perform_id, city_id)\n                buy_serial_number = '{}_{}_{}'.format(self.item_id, self.buy_nums, sku_id)\n                api_address += str(stand_id) + '.json'\n                response = requests.get(api_address)\n                if response.status_code != 200:\n                    return\n                # 获取全部的座位信息\n                all_seats_info = json.loads(response.text)\n                # 获取可售的座位信息\n                valuable_info = tools.get_valuable_seat_id(self.login_cookies, project_id, perform_id, city_id,\n                                                           stand_id)\n                # 获取 指定抢票价格的 sku_id, price_id\n                sku_id, price_id = None, None\n                for sku_info in seat_price_list:\n                    if self.ticket_price == int(sku_info.get('salePrice')):\n                        sku_id = sku_info.get('skuId')\n                        price_id = sku_info.get('priceId')\n                        break\n                if not sku_id or not price_id:\n                    print('-' * 10, '获取sku_id失败', '-' * 10)\n                    return\n\n                \"\"\"\n                过滤无效座位信息，仅留下符合条件的座位id\n                1. 仅保留目标价位下的座位id(暂时只支持一种目标价位)\n                2. 过滤掉不可售的座位id。\n                \"\"\"\n                valuable_seat = tools.format_valuable_seatid(all_seats_info, valuable_info, price_id)\n                # 挑选座位\n                seat_info = tools.pick_seat(valuable_seat, stand_id, self.buy_nums)\n                submit_order_info = self.step2_click_confirm_select_seats(project_id, perform_id, seat_info,\n                                                                          buy_serial_number)\n                break\n        if not buy_serial_number or not submit_order_info:\n            print('-' * 10, '获取购票所需信息失败', '-' * 10)\n            return\n        self.step3_submit_order(submit_order_info, self.viewer, seat_info)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='manual to this script')\n    parser.add_argument('--mode', type=str, default='account', required=False,\n                        help='account: account login， QR: Scan QR code login')\n    args = parser.parse_args()\n    a = DaMaiTicket()\n    a.run()"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2022 MakiNaruto\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7392578125,
          "content": "# 已停止维护\n大部分购买方式已迁移至手机端，需配合抓包处理。暂无更新计划。\n\n# 大麦抢票脚本 V2.1\n更新\n- 增加选座购买，暂时只支持抢购指定价格下的座位，且暂不支持连坐购买。\n\n# 大麦抢票脚本 V2.0\n在学习到接口相关知识后，决定改造之前的脚本。\n\n## 功能介绍\n之前的版本通过按钮操作，还要等待页面元素加载，效率低下。\n此版本仅需登录时用到页面，通过selenium打开页面进行登录。其余操作均通过requests进行请求。\n\nps: 暂不支持选座购买。\n\n其流程图如下:\n\n<img src=\"images/flow_chart.jpeg\" width=\"50%\" height=\"50%\" />\n\n## 准备工作\n### 1. 配置环境\n\n1.1 安装所需要的环境\n```shell\npip install -r requirements.txt\n```\n\n1.2 需要下载与系统安装对应的ChromeDriver驱动并配置(也可以改用其他浏览器驱动)，\n\n下载地址: http://chromedriver.storage.googleapis.com/index.html\n\n1.3 配置驱动路径，默认在项目根目录下。\n\n例如：windows系统下，则重命名下载的chromedriver，将其重命名为chromedriver_windows\n```python\ndef account_login():\n    if platform.system().lower() == 'linux':\n        chromedriver = os.path.join(os.getcwd(), 'chromedriver_linux')\n    elif platform.system().lower() == 'windows':\n        chromedriver = os.path.join(os.getcwd(), 'chromedriver_windows')\n    else:\n        chromedriver = os.path.join(os.getcwd(), 'chromedriver_mac')\n```\n\n### 2. 运行\n2.1 若采取账号方式，修改代码中下面的信息，进行抢票。\n\nitem_id根据地区来确定,每一个城市对应不同的item_id。选择相应地区后将箭头指向的item_id填写到函数内。\n```text\ndef __init__(self):\n    ...\n    # 若选择账号登录方式，则需要填写\n    self.login_id: str = 'account'          # 大麦网登录账户名\n    self.login_password: str = 'password'   # 大麦网登录密码\n    # 以下为抢票必须的参数\n    self.item_id: int = 610820299671        # 商品id\n    self.viewer: list = ['viewer1']         # 在大麦网已填写的观影人\n    self.buy_nums: int = 1                  # 购买影票数量, 需与观影人数量一致\n    self.ticket_price: int = 180            # 购买指定票价\n```\n![image](images/item_id.png)\n\n2.2 运行\n\n初次登陆没有cookies，默认登录方式为账号密码登录方式，可改成其他方式进行登录，如扫码或短信登录。\n```shell\n# 默认登录方式\npython Automatic_ticket_purchase.py\n# 指定其他方式登录\npython Automatic_ticket_purchase.py --mode qr\n```\n\n\n免责声明：详见MIT License，此仓库仅用于个人参考学习，但如他人用本仓库代码用于商业用途(鄙视黄牛)，侵犯到大麦网利益等，本人不承担任何责任。"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0712890625,
          "content": "beautifulsoup4==4.9.3\nrequests==2.24.0\nselenium==3.141.0\npyexecjs==1.5.1\n"
        },
        {
          "name": "signcode.js",
          "type": "blob",
          "size": 5.224609375,
          "content": "function calcaulate(e) {\n    function t(e, t) {\n        return e << t | e >>> 32 - t\n    }\n\n    function n(e, t) {\n        var n, r, o, i, a;\n        return o = 2147483648 & e,\n            i = 2147483648 & t,\n            a = (1073741823 & e) + (1073741823 & t),\n            (n = 1073741824 & e) & (r = 1073741824 & t) ? 2147483648 ^ a ^ o ^ i : n | r ? 1073741824 & a ? 3221225472 ^ a ^ o ^ i : 1073741824 ^ a ^ o ^ i : a ^ o ^ i\n    }\n\n    function r(e, r, o, i, a, s, u) {\n        return n(t(e = n(e, n(n(function (e, t, n) {\n            return e & t | ~e & n\n        }(r, o, i), a), u)), s), r)\n    }\n\n    function o(e, r, o, i, a, s, u) {\n        return n(t(e = n(e, n(n(function (e, t, n) {\n            return e & n | t & ~n\n        }(r, o, i), a), u)), s), r)\n    }\n\n    function i(e, r, o, i, a, s, u) {\n        return n(t(e = n(e, n(n(function (e, t, n) {\n            return e ^ t ^ n\n        }(r, o, i), a), u)), s), r)\n    }\n\n    function a(e, r, o, i, a, s, u) {\n        return n(t(e = n(e, n(n(function (e, t, n) {\n            return t ^ (e | ~n)\n        }(r, o, i), a), u)), s), r)\n    }\n\n    function s(e) {\n        var t, n = \"\", r = \"\";\n        for (t = 0; 3 >= t; t++)\n            n += (r = \"0\" + (e >>> 8 * t & 255).toString(16)).substr(r.length - 2, 2);\n        return n\n    }\n\n    var u, l, c, g, h, f, d, p, m, v;\n    for (v = function (e) {\n        for (var t, n = e.length, r = n + 8, o = 16 * ((r - r % 64) / 64 + 1), i = new Array(o - 1), a = 0, s = 0; n > s;)\n            a = s % 4 * 8,\n                i[t = (s - s % 4) / 4] = i[t] | e.charCodeAt(s) << a,\n                s++;\n        return a = s % 4 * 8,\n            i[t = (s - s % 4) / 4] = i[t] | 128 << a,\n            i[o - 2] = n << 3,\n            i[o - 1] = n >>> 29,\n            i\n    }(e = function (e) {\n        e = e.replace(/\\r\\n/g, \"\\n\");\n        for (var t = \"\", n = 0; n < e.length; n++) {\n            var r = e.charCodeAt(n);\n            128 > r ? t += String.fromCharCode(r) : r > 127 && 2048 > r ? (t += String.fromCharCode(r >> 6 | 192),\n                t += String.fromCharCode(63 & r | 128)) : (t += String.fromCharCode(r >> 12 | 224),\n                t += String.fromCharCode(r >> 6 & 63 | 128),\n                t += String.fromCharCode(63 & r | 128))\n        }\n        return t\n    }(e)),\n        f = 1732584193,\n        d = 4023233417,\n        p = 2562383102,\n        m = 271733878,\n        u = 0; u < v.length; u += 16)\n            l = f,\n            c = d,\n            g = p,\n            h = m,\n            d = a(d = a(d = a(d = a(d = i(d = i(d = i(d = i(d = o(d = o(d = o(d = o(d = r(d = r(d = r(d = r(d, p = r(p, m = r(m, f = r(f, d, p, m, v[u + 0], 7, 3614090360), d, p, v[u + 1], 12, 3905402710), f, d, v[u + 2], 17, 606105819), m, f, v[u + 3], 22, 3250441966), p = r(p, m = r(m, f = r(f, d, p, m, v[u + 4], 7, 4118548399), d, p, v[u + 5], 12, 1200080426), f, d, v[u + 6], 17, 2821735955), m, f, v[u + 7], 22, 4249261313), p = r(p, m = r(m, f = r(f, d, p, m, v[u + 8], 7, 1770035416), d, p, v[u + 9], 12, 2336552879), f, d, v[u + 10], 17, 4294925233), m, f, v[u + 11], 22, 2304563134), p = r(p, m = r(m, f = r(f, d, p, m, v[u + 12], 7, 1804603682), d, p, v[u + 13], 12, 4254626195), f, d, v[u + 14], 17, 2792965006), m, f, v[u + 15], 22, 1236535329), p = o(p, m = o(m, f = o(f, d, p, m, v[u + 1], 5, 4129170786), d, p, v[u + 6], 9, 3225465664), f, d, v[u + 11], 14, 643717713), m, f, v[u + 0], 20, 3921069994), p = o(p, m = o(m, f = o(f, d, p, m, v[u + 5], 5, 3593408605), d, p, v[u + 10], 9, 38016083), f, d, v[u + 15], 14, 3634488961), m, f, v[u + 4], 20, 3889429448), p = o(p, m = o(m, f = o(f, d, p, m, v[u + 9], 5, 568446438), d, p, v[u + 14], 9, 3275163606), f, d, v[u + 3], 14, 4107603335), m, f, v[u + 8], 20, 1163531501), p = o(p, m = o(m, f = o(f, d, p, m, v[u + 13], 5, 2850285829), d, p, v[u + 2], 9, 4243563512), f, d, v[u + 7], 14, 1735328473), m, f, v[u + 12], 20, 2368359562), p = i(p, m = i(m, f = i(f, d, p, m, v[u + 5], 4, 4294588738), d, p, v[u + 8], 11, 2272392833), f, d, v[u + 11], 16, 1839030562), m, f, v[u + 14], 23, 4259657740), p = i(p, m = i(m, f = i(f, d, p, m, v[u + 1], 4, 2763975236), d, p, v[u + 4], 11, 1272893353), f, d, v[u + 7], 16, 4139469664), m, f, v[u + 10], 23, 3200236656), p = i(p, m = i(m, f = i(f, d, p, m, v[u + 13], 4, 681279174), d, p, v[u + 0], 11, 3936430074), f, d, v[u + 3], 16, 3572445317), m, f, v[u + 6], 23, 76029189), p = i(p, m = i(m, f = i(f, d, p, m, v[u + 9], 4, 3654602809), d, p, v[u + 12], 11, 3873151461), f, d, v[u + 15], 16, 530742520), m, f, v[u + 2], 23, 3299628645), p = a(p, m = a(m, f = a(f, d, p, m, v[u + 0], 6, 4096336452), d, p, v[u + 7], 10, 1126891415), f, d, v[u + 14], 15, 2878612391), m, f, v[u + 5], 21, 4237533241), p = a(p, m = a(m, f = a(f, d, p, m, v[u + 12], 6, 1700485571), d, p, v[u + 3], 10, 2399980690), f, d, v[u + 10], 15, 4293915773), m, f, v[u + 1], 21, 2240044497), p = a(p, m = a(m, f = a(f, d, p, m, v[u + 8], 6, 1873313359), d, p, v[u + 15], 10, 4264355552), f, d, v[u + 6], 15, 2734768916), m, f, v[u + 13], 21, 1309151649), p = a(p, m = a(m, f = a(f, d, p, m, v[u + 4], 6, 4149444226), d, p, v[u + 11], 10, 3174756917), f, d, v[u + 2], 15, 718787259), m, f, v[u + 9], 21, 3951481745),\n            f = n(f, l),\n            d = n(d, c),\n            p = n(p, g),\n            m = n(m, h);\n    return (s(f) + s(d) + s(p) + s(m)).toLowerCase()\n}\n"
        },
        {
          "name": "tools.py",
          "type": "blob",
          "size": 17.541015625,
          "content": "# -*- coding: UTF-8 -*-\n\"\"\"\n__Author__ = \"MakiNaruto\"\n__Version__ = \"2.1.0\"\n__Description__ = \"\"\n__Created__ = 2022/5/02 14:16\n\"\"\"\n\nimport re\nimport os\nimport json\nimport execjs\nimport pickle\nimport platform\nimport requests\nfrom datetime import datetime\nfrom bs4 import BeautifulSoup\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.wait import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n\ndef save_cookies(login_cookies):\n    \"\"\" 保存cookies \"\"\"\n    with open('cookies.pkl', 'wb') as fw:\n        pickle.dump(login_cookies, fw)\n\n\ndef load_cookies():\n    \"\"\" 读取保存的cookies \"\"\"\n    try:\n        with open('cookies.pkl', 'rb') as fr:\n            cookies = pickle.load(fr)\n        return cookies\n    except Exception as e:\n        print('-' * 10, '加载cookies失败', '-' * 10)\n        print(e)\n\n\ndef check_login_status(login_cookies):\n    \"\"\" 检测是否登录成功 \"\"\"\n    personal_title = '我的大麦-个人信息'\n\n    headers = {\n        'authority': 'passport.damai.cn',\n        'cache-control': 'max-age=0',\n        'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"99\", \"Google Chrome\";v=\"99\"',\n        'sec-ch-ua-mobile': '?0',\n        'sec-ch-ua-platform': '\"macOS\"',\n        'upgrade-insecure-requests': '1',\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.83 Safari/537.36',\n        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\n        'sec-fetch-site': 'same-origin',\n        'sec-fetch-mode': 'navigate',\n        'sec-fetch-user': '?1',\n        'sec-fetch-dest': 'document',\n        'referer': 'https://passport.damai.cn/login?ru=https://passport.damai.cn/accountinfo/myinfo',\n        'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n    }\n\n    response = requests.get('https://passport.damai.cn/accountinfo/myinfo',\n                            headers=headers,\n                            cookies=login_cookies)\n    personal_info = BeautifulSoup(response.text, 'html.parser')\n    if personal_info.title.text == personal_title:\n        return True\n    else:\n        return False\n\n\ndef account_login(login_type: str, login_id=None, login_password=None):\n    \"\"\"\n    登录大麦网\n\n    :param login_id:\n    :param login_password:\n    :param login_type:  选择哪种方式进行登录\n    :return:\n    \"\"\"\n    damai_title = '大麦网-全球演出赛事官方购票平台-100%正品、先付先抢、在线选座！'\n\n    login_url = 'https://passport.damai.cn/login'\n    option = webdriver.ChromeOptions()  # 默认Chrome浏览器\n    # 关闭开发者模式, window.navigator.webdriver 控件检测到你是selenium进入，若关闭会导致出现滑块并无法进入。\n    option.add_experimental_option('excludeSwitches', ['enable-automation'])\n    option.add_argument('--disable-blink-features=AutomationControlled')\n    # option.add_argument('headless')               # Chrome以后台模式进行，注释以进行调试\n    # option.add_argument('window-size=1920x1080')  # 指定分辨率\n    # option.add_argument('no-sandbox')             # 取消沙盒模式\n    # option.add_argument('--disable-gpu')          # 禁用GPU加速\n    # option.add_argument('disable-dev-shm-usage')  # 大量渲染时候写入/tmp而非/dev/shm\n    if platform.system().lower() == 'linux':\n        chromedriver = os.path.join(os.getcwd(), 'chromedriver_linux')\n    elif platform.system().lower() == 'windows':\n        chromedriver = os.path.join(os.getcwd(), 'chromedriver_windows')\n    else:\n        chromedriver = os.path.join(os.getcwd(), 'chromedriver_mac')\n\n    driver = webdriver.Chrome(chromedriver, options=option)\n    driver.set_page_load_timeout(60)\n    driver.get(login_url)\n    if login_type == 'account':\n        driver.switch_to.frame('alibaba-login-box')  # 切换内置frame，否则会找不到元素位置\n        driver.find_element_by_name('fm-login-id').send_keys(login_id)\n        driver.find_element_by_name('fm-login-password').send_keys(login_password)\n        driver.find_element_by_class_name('password-login').send_keys(Keys.ENTER)\n    WebDriverWait(driver, 180, 0.5).until(EC.title_contains(damai_title))\n\n    login_cookies = {}\n    if driver.title != damai_title:\n        print('登录异常，请检查页面登录提示信息')\n    for cookie in driver.get_cookies():\n        login_cookies[cookie['name']] = cookie['value']\n    if check_login_status(login_cookies):\n        return login_cookies\n\n\ndef get_api_param():\n    \"\"\" 获取请求大麦API所必须的一些参数, 可能大麦网js代码更新后需要修改此函数内的代码以重新获得参数信息 \"\"\"\n\n    def format_param(context):\n        param = []\n        for line in context.split(','):\n            k, v = line.split(':')\n            param.append('\"{}\":{}'.format(k, v))\n        param = json.loads('{' + ','.join(param) + '}')\n        return param\n\n    js_code_define = requests.get(\n        \"https://g.alicdn.com/damai/??/vue-pc/0.0.70/vendor.js,vue-pc/0.0.70/perform/perform.js\").text\n    # 获取商品SKU的API参数\n    commodity_param = re.search('getSkuData:function.*?\\|\\|\"\"}}', js_code_define).group()\n    commodity_param = re.search('data:{.*?\\|\\|\"\"}}', commodity_param).group()\n    commodity_param = commodity_param.replace('data:{', ''). \\\n        replace('this.vmSkuData.privilegeId||\"\"}}', '\"\"'). \\\n        replace('itemId:e', 'itemId:\"\"')\n    commodity_param = format_param(commodity_param)\n    # 获取订单购买用户的API参数\n    ex_params = re.search(',i=Z}else{.*?;e&&', js_code_define).group()\n    ex_params = re.search('{.*}', ex_params).group()\n    ex_params = ex_params.replace('{var u=', '')[1:-1]\n    ex_params = format_param(ex_params)\n    return commodity_param, ex_params\n\n\ndef get_sign_code(h5_token: str, time_stamp, api_param) -> str:\n    \"\"\"\n    返回请求选座信息接口必备的sign信息\n\n    :return:\n    \"\"\"\n    node = execjs.get()\n    with open('signcode.js', 'r', encoding='utf-8') as f:\n        js_file = f.read()\n    js_exec = node.compile(js_file)\n    param1 = '{}&{}&12574478&'.format(h5_token, time_stamp)\n\n    context = param1 + api_param\n    sign_code = js_exec.call('calcaulate', context)\n    return sign_code\n\n\ndef get_select_seat_params(item_id, data_id=None):\n    \"\"\" 获取座位信息的必备参数 \"\"\"\n    headers = {\n        'authority': 'detail.damai.cn',\n        'accept': '*/*',\n        'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n        'referer': 'https://detail.damai.cn/item.htm?spm=a2oeg.home.card_1.ditem_1.591b23e1qozgyw&id=671100996170',\n        'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"100\", \"Google Chrome\";v=\"100\"',\n        'sec-ch-ua-mobile': '?0',\n        'sec-ch-ua-platform': '\"macOS\"',\n        'sec-fetch-dest': 'script',\n        'sec-fetch-mode': 'no-cors',\n        'sec-fetch-site': 'same-origin',\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',\n    }\n\n    params = {\"itemId\": item_id,\n              \"dataId\": data_id,\n              \"dataType\": 4,\n              \"apiVersion\": 2.0,\n              \"dmChannel\": \"damai_pc\",\n              \"bizCode\": \"ali.china.damai\",\n              \"scenario\": \"itemsku\"\n              }\n\n    response = requests.get('https://detail.damai.cn/subpage', headers=headers, params=params)\n    if response.status_code == 200:\n        result = json.loads(response.text[5:-1])\n        item_basic_info = result.get('itemBasicInfo')\n        city_id = item_basic_info.get('nationalStandardCityId')\n        project_id = item_basic_info.get('projectId')\n        item_id = item_basic_info.get('itemId')\n        perform_id = result.get('perform').get('performId')\n        return city_id, project_id, item_id, perform_id\n\n\ndef get_seat_dynamic_info(cookies, project_id, item_id, perform_id):\n    \"\"\" 获取 standId, 用于获取所有座位信息 \"\"\"\n    headers = {\n        'authority': 'mtop.damai.cn',\n        'accept': 'application/json',\n        'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n        'content-type': 'application/x-www-form-urlencoded',\n        # Requests sorts cookies= alphabetically\n        # 'cookie': 'cna=QAvhGhruGS4CAXx+ibfGKnY/; t=1ff77fc3f03114d784e6055f2e58128e; damai.cn_email=23964951@qq.com; damai.cn_nickName=MakiNaruto; munb=4031179480; xlly_s=1; cookie2=109b25aa6388dfbc71b8d6cb05dbb154; _tb_token_=3e87e37a17bde; _samesite_flag_=true; _hvn_login=18; csg=21db6663; damai.cn_user=SHm/AXRMF7mxpN8uip9sNS+4EH/qiS5ef3Q/K/+slykinDgISXh0XsCSZVMGSCKgGxb2+Rjuqig=; damai.cn_user_new=SHm%2FAXRMF7mxpN8uip9sNS%2B4EH%2FqiS5ef3Q%2FK%2F%2BslykinDgISXh0XsCSZVMGSCKgGxb2%2BRjuqig%3D; h5token=3936e2bf88964af2a37c20b092c61c75_1_1; damai_cn_user=SHm%2FAXRMF7mxpN8uip9sNS%2B4EH%2FqiS5ef3Q%2FK%2F%2BslykinDgISXh0XsCSZVMGSCKgGxb2%2BRjuqig%3D; loginkey=3936e2bf88964af2a37c20b092c61c75_1_1; user_id=108050604; _m_h5_tk=2ef39e419fe42af48f9fb3adc7e043df_1651324694423; _m_h5_tk_enc=a442fe5379084c1830b4418f456f7fb3; tfstk=c4McBWjbVz_B4DFoOKwXCmEadKORZ9Wa-AkSUn0_9Hotq0MPi_CPTJd2qrYBu11..; l=eBgKXWFnLg3Eg5F3BOfwourza77OSIRAguPzaNbMiOCPOTfp5_f1W6qQzd89C3GNh6zeR3J8Iu2zBeYBcSvEdvNX0cWf96Hmn; isg=BEhIJmYUvgYlEtLl2khALh8EGbBa8az7J9rUOgL5lEO23ehHqgF8i95bVb2tbWTT',\n        'origin': 'https://seatsvc.damai.cn',\n        'referer': 'https://seatsvc.damai.cn/',\n        'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"100\", \"Google Chrome\";v=\"100\"',\n        'sec-ch-ua-mobile': '?0',\n        'sec-ch-ua-platform': '\"macOS\"',\n        'sec-fetch-dest': 'empty',\n        'sec-fetch-mode': 'cors',\n        'sec-fetch-site': 'same-site',\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',\n    }\n    h5_token = cookies.get('_m_h5_tk').split('_')[0]\n    time_stamp = int(datetime.now().timestamp() * 1000)\n    api_param = json.dumps({'projectId': project_id,\n                            'performanceId': perform_id,\n                            'itemId': item_id,\n                            'hasPromotion': 'true',\n                            'dmChannel': 'pc@damai_pc'}).replace(' ', '')\n    sign_code = get_sign_code(h5_token, time_stamp, api_param)\n\n    params = {\n        'jsv': '2.6.0',\n        'appKey': '12574478',\n        't': time_stamp,\n        'sign': sign_code,\n        'type': 'originaljson',\n        'dataType': 'json',\n        'v': '1.0',\n        'H5Request': 'true',\n        'AntiCreep': 'true',\n        'AntiFlood': 'true',\n        'api': 'mtop.damai.wireless.seat.dynamicinfo',\n        'data': api_param,\n    }\n\n    response = requests.get('https://mtop.damai.cn/h5/mtop.damai.wireless.seat.dynamicinfo/1.0/', params=params,\n                            cookies=cookies, headers=headers)\n    if response.status_code == 200:\n        result = json.loads(response.text).get('data')\n        stand_id = result.get('standColorList')[0].get('standId')\n        seat_price_list = result.get('priceList')\n        return stand_id, seat_price_list\n\n\ndef get_select_seat_api(cookies, perform_id, city_id):\n    \"\"\" 得到请求所有座位信息的api地址 \"\"\"\n    h5_token = cookies.get('_m_h5_tk').split('_')[0]\n    time_stamp = int(datetime.now().timestamp() * 1000)\n    api_param = json.dumps({\"cityId\": city_id,\n                            \"pfId\": 2147483647 ^ int(perform_id),\n                            \"excludestatus\": True,\n                            \"svgEncVer\": \"1.0\",\n                            \"dmChannel\": \"pc@damai_pc\"}).replace(' ', '')\n    sign_code = get_sign_code(h5_token, time_stamp, api_param)\n    headers = {\n        'authority': 'mtop.damai.cn',\n        'accept': 'application/json',\n        'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n        'content-type': 'application/x-www-form-urlencoded',\n        'origin': 'https://seatsvc.damai.cn',\n        'referer': 'https://seatsvc.damai.cn/',\n        'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"100\", \"Google Chrome\";v=\"100\"',\n        'sec-ch-ua-mobile': '?0',\n        'sec-ch-ua-platform': '\"macOS\"',\n        'sec-fetch-dest': 'empty',\n        'sec-fetch-mode': 'cors',\n        'sec-fetch-site': 'same-site',\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',\n    }\n\n    params = {\n        'jsv': '2.6.0',\n        'appKey': '12574478',\n        't': time_stamp,\n        'sign': sign_code,\n        'type': 'originaljson',\n        'dataType': 'json',\n        'v': '1.3',\n        'H5Request': 'true',\n        'AntiCreep': 'true',\n        'AntiFlood': 'true',\n        'api': 'mtop.damai.wireless.project.getB2B2CAreaInfo',\n        'data': api_param,\n    }\n    response = requests.get('https://mtop.damai.cn/h5/mtop.damai.wireless.project.getb2b2careainfo/1.3/',\n                            headers=headers, params=params, cookies=cookies)\n    if response.status_code == 200:\n        api_text = json.loads(response.text).get('data').get('result')\n        api_info = json.loads(api_text).get('seatQuYu')\n        api_address = api_info.get('resourcesPath')\n        seat_price_list = api_info.get('seatPriceList')\n        return api_address\n\n\ndef get_valuable_seat_id(cookies, project_id, perform_id, city_id, stand_id):\n    \"\"\" 获取可用的座位信息 \"\"\"\n    h5_token = cookies.get('_m_h5_tk').split('_')[0]\n    time_stamp = int(datetime.now().timestamp() * 1000)\n    api_param = json.dumps({\"cityId\": city_id,\n                            \"pfId\": 2147483647 ^ int(perform_id),\n                            \"standIds\": stand_id,\n                            \"channel\": 100100010001,\n                            \"projectId\": project_id,\n                            \"lessFirst\": True,\n                            \"dmChannel\": \"pc@damai_pc\"}).replace(' ', '')\n    sign_code = get_sign_code(h5_token, time_stamp, api_param)\n\n    headers = {\n        'authority': 'mtop.damai.cn',\n        'accept': 'application/json',\n        'accept-language': 'zh,en;q=0.9,en-US;q=0.8,zh-CN;q=0.7',\n        'content-type': 'application/x-www-form-urlencoded',\n        'origin': 'https://seatsvc.damai.cn',\n        'referer': 'https://seatsvc.damai.cn/',\n        'sec-ch-ua': '\" Not A;Brand\";v=\"99\", \"Chromium\";v=\"100\", \"Google Chrome\";v=\"100\"',\n        'sec-ch-ua-mobile': '?0',\n        'sec-ch-ua-platform': '\"macOS\"',\n        'sec-fetch-dest': 'empty',\n        'sec-fetch-mode': 'cors',\n        'sec-fetch-site': 'same-site',\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36',\n    }\n\n    params = {\n        'jsv': '2.6.0',\n        'appKey': '12574478',\n        't': time_stamp,\n        'sign': sign_code,\n        'type': 'originaljson',\n        'dataType': 'json',\n        'v': '1.0',\n        'H5Request': 'true',\n        'AntiCreep': 'true',\n        'AntiFlood': 'true',\n        'api': 'mtop.damai.wireless.seat.queryseatstatus',\n        'data': api_param\n    }\n\n    response = requests.get('https://mtop.damai.cn/h5/mtop.damai.wireless.seat.queryseatstatus/1.0/', params=params,\n                            cookies=cookies, headers=headers)\n    if response.status_code == 200:\n        seat_data = json.loads(response.text)\n        seat_data = seat_data.get('data')\n        return seat_data\n\n\ndef create_seat_dict(detail, save_dict):\n    \"\"\" 构建座位层级信息 \"\"\"\n    floor = detail.get('fn')\n    row = detail.get('x')\n    col = detail.get('y')\n    sid = detail.get('sid')\n    if floor not in save_dict:\n        save_dict.update({floor: {}})\n    if row not in save_dict.get(floor):\n        save_dict[floor].update({row: {}})\n    if col not in save_dict.get(floor).get(row):\n        save_dict[floor][row].update({col: sid})\n\n\ndef format_valuable_seatid(all_seats_info, valuable_seats_info, price_id):\n    \"\"\" 格式化 seatid 相关信息 \"\"\"\n    sid2coordinate = {}\n    coordinate2sid = {}\n\n    for detail in all_seats_info.get('seats'):\n        create_seat_dict(detail, coordinate2sid)\n        sid2coordinate.update({\n            detail.get('sid'): {\n                'sid': detail.get('sid'),\n                'plid': detail.get('plid'),\n                'fn': detail.get('fn'),\n                'x': detail.get('x'),\n                'y': detail.get('y')\n            }})\n\n    if 'noseat' in valuable_seats_info:\n        # 去除不可用的座位信息\n        noseat_data = valuable_seats_info.get('noseat')\n        for line in noseat_data:\n            sid = line.get('sid')\n            floor = sid2coordinate.get(sid).get('floor')\n            row = sid2coordinate.get(sid).get('row')\n            col = sid2coordinate.get(sid).get('col')\n            coordinate2sid[floor][row].pop(col)\n        for line in coordinate2sid:\n            if line.get('plid') != price_id:\n                floor = line.get('fn')\n                row = line.get('row')\n                col = line.get('col')\n                coordinate2sid[floor][row].pop(col)\n        return coordinate2sid\n    else:\n        valuable_sid = {}\n        seat_data = valuable_seats_info.get('seat')\n        for line in seat_data:\n            sid = line.get('sid')\n            detail = sid2coordinate.get(sid)\n            if detail.get('plid') == price_id:\n                create_seat_dict(detail, valuable_sid)\n        return valuable_sid\n\n\ndef pick_seat(valuable_seat, stand_id, buy_nums):\n    \"\"\" 简单实现选取座位信息 \"\"\"\n    selected_seats = []\n    for floor, floor_info in valuable_seat.items():\n        for row, row_info in floor_info.items():\n            for col, sid in row_info.items():\n                selected_seats.append({'seatId': sid, 'standId': stand_id})\n                if len(selected_seats) == buy_nums:\n                    return selected_seats\n"
        }
      ]
    }
  ]
}