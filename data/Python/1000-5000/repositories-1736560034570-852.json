{
  "metadata": {
    "timestamp": 1736560034570,
    "page": 852,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iswbm/magic-python",
      "stars": 3360,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": ".idea/\n*.pyc\nPipfile\ntest*\nbuild_bak\nbuild\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.623046875,
          "content": "# Minimal makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line, and also\n# from the environment for the first two.\nSPHINXOPTS    ?=\nSPHINXBUILD   ?= sphinx-build\nSOURCEDIR     = source\nBUILDDIR      = build\n\n# Put it first so that \"make\" without argument is like \"make help\".\nhelp:\n\t@$(SPHINXBUILD) -M help \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\n.PHONY: help Makefile\n\n# Catch-all target: route all unknown targets to Sphinx using the new\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n%: Makefile\n\t@$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.455078125,
          "content": "![](http://image.iswbm.com/20200719231251.png)\n\n<p align=\"center\">\n      <a href=\"http://image.iswbm.com/20200816082224.png\"><img src=\"https://img.shields.io/badge/Talk-%E5%BE%AE%E4%BF%A1%E7%BE%A4-brightgreen.svg?style=popout-square\" alt=\"微信\"></a>\n      <a href=\"https://github.com/iswbm/magic-python/stargazers\"><img src=\"https://img.shields.io/github/stars/iswbm/magic-python.svg?style=popout-square\" alt=\"GitHub stars\"></a>\n      <a href=\"https://github.com/iswbm/magic-python/issues\"><img src=\"https://img.shields.io/github/issues/iswbm/magic-python.svg?style=popout-square\" alt=\"GitHub issues\"></a>\n    <img src='https://img.shields.io/badge/language-Python-blue.svg' alt=\"Build Status\">\n    <img src='https://img.shields.io/badge/framwork-Sphinx-green.svg'>\n  \t<a href='https://www.zhihu.com/people/wongbingming'><img src='https://img.shields.io/badge/dynamic/json?color=0084ff&logo=zhihu&label=%E7%8E%8B%E7%82%B3%E6%98%8E&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dzhihu%26queryKey%3Dwongbingming'></a>\n    <a href='https://juejin.im/user/5b08d982f265da0db3502c55'><img src='https://img.shields.io/badge/掘金-2481-blue'></a>\n    <a href='http://image.iswbm.com/20200607114246.png'><img src='http://img.shields.io/badge/%E5%85%AC%E4%BC%97%E5%8F%B7-60k+-brightgreen'></a>\n</p>\n\n\n\n\n## 关于本书\n\n本书是一本专门介绍 **Python 黑魔法玩法**的电子书。其中包括少有人知的一些 Python 冷门知识，Python Shell 的多样玩法，各种令人疯狂的 Python 炫技操作，Python 的超详细进阶知识解读，还有不断扩充完善适合所有 Python 开发者的开发技巧等等。\n\n本书旨在向你介绍一个不一样的 Python，而不是一份初学者的 Python 基础教学资料。\n\n![](https://image.iswbm.com/20200802161110.png)\n\n## 如何开始\n\n阅读本书有两个入口：\n\n1. **在线阅读**：实时更新最新内容，链接：[Python黑魔法手册](https://magic.iswbm.com/)\n\n2. **离线阅读**：到 [Release](https://github.com/iswbm/magic-python/releases) 下载最新版的 PDF \n\n## 我的电子书\n\n我写过四个在线文件，分别是：\n\n1.  《[Python 黑魔法指南](https://magic.iswbm.com/)》：https://magic.iswbm.com/\n2.  《[PyCharm 中文指南](https://pycharm.iswbm.com/)》：https://pycharm.iswbm.com/\n3.  《[Python 中文指南](https://python.iswbm.com/)》：https://python.iswbm.com/\n\n4.  《[Go 编程时光 - 入门宝典](https://golang.iswbm.com/)》：https://golang.iswbm.com/\n\n有兴趣的，可以点击链接了解一下。\n\n## 目录大纲\n\n- **第一章：魔法冷知识**\n   * [# 1.1 默默无闻的省略号很好用](https://magic.iswbm.com/c01/c01_01.html)\n   * [# 1.2 使用 end 来结束代码块](https://magic.iswbm.com/c01/c01_02.html)\n   * [# 1.3 可直接运行的 zip 包](https://magic.iswbm.com/c01/c01_03.html)\n   * [# 1.4 反斜杠的倔强: 不写最后](https://magic.iswbm.com/c01/c01_04.html)\n   * [# 1.5 如何修改解释器提示符](https://magic.iswbm.com/c01/c01_05.html)\n   * [# 1.6 简洁而优雅的链式比较](https://magic.iswbm.com/c01/c01_06.html)\n   * [# 1.7 and 和 or 的短路效应](https://magic.iswbm.com/c01/c01_07.html)\n   * [# 1.8 连接多个列表最极客的方式](https://magic.iswbm.com/c01/c01_08.html)\n   * [# 1.9 字典居然是可以排序的？](https://magic.iswbm.com/c01/c01_09.html)\n   * [# 1.10 哪些情况下不需要续行符？](https://magic.iswbm.com/c01/c01_10.html)\n   * [# 1.11 用户无感知的小整数池](https://magic.iswbm.com/c01/c01_11.html)\n   * [# 1.12 神奇的 intern 机制](https://magic.iswbm.com/c01/c01_12.html)\n   * [# 1.13 site-packages和 dist-packages](https://magic.iswbm.com/c01/c01_13.html)\n   * [# 1.14 argument 和 parameter 的区别?](https://magic.iswbm.com/c01/c01_14.html)\n   * [# 1.15 /usr/bin/env python 有什么用？](https://magic.iswbm.com/c01/c01_15.html)\n   * [# 1.16 dict() 与 {} 生成空字典有什么区别？](https://magic.iswbm.com/c01/c01_16.html)\n   * [# 1.17 有趣但没啥用的 import 用法](https://magic.iswbm.com/c01/c01_17.html)\n   * [# 1.18 正负得负，负负得正](https://magic.iswbm.com/c01/c01_18.html)\n   * [# 1.19 return不一定都是函数的终点](https://magic.iswbm.com/c01/c01_19.html)\n   * [# 1.20 字符串里的缝隙是什么？](https://magic.iswbm.com/c01/c01_20.html)\n   * [# 1.21 Python2下 也能使用 print(“”)](https://magic.iswbm.com/c01/c01_21.html)\n   * [# 1.22 字母也玩起了障眼法](https://magic.iswbm.com/c01/c01_22.html)\n   * [# 1.23 数值与字符串的比较](https://magic.iswbm.com/c01/c01_23.html)\n   * [# 1.24 时有时无的切片异常](https://magic.iswbm.com/c01/c01_24.html)\n   * [# 1.25 迷一样的字符串](https://magic.iswbm.com/c01/c01_25.html)\n   * [# 1.26 x 与 +x 等价吗？](https://magic.iswbm.com/c01/c01_26.html)\n   * [# 1.27 += 不等同于=+](https://magic.iswbm.com/c01/c01_27.html)\n   * [# 1.28 循环中的局部变量泄露](https://magic.iswbm.com/c01/c01_28.html)\n   * [# 1.29 局部/全局变量傻傻分不清](https://magic.iswbm.com/c01/c01_29.html)\n   * [# 1.30 break /continue 和 上下文管理器哪个优先级高？](https://magic.iswbm.com/c01/c01_30.html)\n   * [# 1.31 如何像 awk一样分割字符串？](https://magic.iswbm.com/c01/c01_31.html)\n   * [# 1.32 如何让大数变得更易于阅读？](https://magic.iswbm.com/c01/c01_32.html)\n- **第二章：魔法命令行**\n   * [# 2.1 懒人必备技能：使用 “_”](https://magic.iswbm.com/c02/c02_01.html)\n   * [# 2.2 最快查看包搜索路径的方式](https://magic.iswbm.com/c02/c02_02.html)\n   * [# 2.3 使用 json.tool 来格式化 JSON](https://magic.iswbm.com/c02/c02_03.html)\n   * [# 2.4 命令行式执行 Python 代码](https://magic.iswbm.com/c02/c02_04.html)\n   * [# 2.5 用调试模式执行脚本](https://magic.iswbm.com/c02/c02_05.html)\n   * [# 2.6 如何快速搭建 HTTP 服务器](https://magic.iswbm.com/c02/c02_06.html)\n   * [# 2.7 快速构建 HTML 帮助文档](https://magic.iswbm.com/c02/c02_07.html)\n   * [# 2.8 最正确且优雅的装包方法](https://magic.iswbm.com/c02/c02_08.html)\n   * [# 2.9 往 Python Shell 中传入参数](https://magic.iswbm.com/c02/c02_09.html)\n   * [# 2.10 让脚本报错后立即进入调试模式](https://magic.iswbm.com/c02/c02_10.html)\n   * [# 2.11 极简模式执行 Python Shell](https://magic.iswbm.com/c02/c02_11.html)\n   * [# 2.12 在执行任意代码前自动念一段平安经](https://magic.iswbm.com/c02/c02_12.html)\n   * [# 2.13 启动 Python Shell 前自动执行某脚本](https://magic.iswbm.com/c02/c02_13.html)\n   * [# 2.14 把模块当做脚本来执行 7 种方法及原理](https://magic.iswbm.com/c02/c02_14.html)\n   * [# 2.15 命令行式打开 idle 编辑脚本](https://magic.iswbm.com/c02/c02_15.html)\n   * [# 2.16 快速计算字符串 base64编码](https://magic.iswbm.com/c02/c02_16.html)\n   * [# 2.17 快速找到指定文件的mime类型](https://magic.iswbm.com/c02/c02_17.html)\n   * [# 2.18 快速查看 Python 的环境信息](https://magic.iswbm.com/c02/c02_18.html)\n   * [# 2.19 快速解压和压缩文件](https://magic.iswbm.com/c02/c02_19.html)\n   * [# 2.20 快速编辑 Python 脚本](https://magic.iswbm.com/c02/c02_20.html)\n   * [# 2.21 使用自带的 telnet 端口检测工具](https://magic.iswbm.com/c02/c02_21.html)\n   * [# 2.22 快速将项目打包成应用程序](https://magic.iswbm.com/c02/c02_22.html)\n   * [# 2.23 快速打印函数的调用栈](https://magic.iswbm.com/c02/c02_23.html)\n- **第三章：炫技魔法操作**\n   * [# 3.1 八种连接列表的方式](https://magic.iswbm.com/c03/c03_01.html)\n   * [# 3.2 合并字典的 7 种方法](https://magic.iswbm.com/c03/c03_02.html)\n   * [# 3.3 花式导包的八种方法](https://magic.iswbm.com/c03/c03_03.html)\n   * [# 3.4 条件语句的七种写法](https://magic.iswbm.com/c03/c03_04.html)\n   * [# 3.5 判断是否包含子串的七种方法](https://magic.iswbm.com/c03/c03_05.html)\n   * [# 3.6 海象运算符的三种用法](https://magic.iswbm.com/c03/c03_06.html)\n   * [# 3.7 模块重载的五种方法](https://magic.iswbm.com/c03/c03_07.html)\n   * [# 3.8 Python 转义的五种表示法](https://magic.iswbm.com/c03/c03_08.html)\n   * [# 3.9 Python 装包的八种方法](https://magic.iswbm.com/c03/c03_09.html)\n   * [# 3.10 Python装饰器的六种写法](https://magic.iswbm.com/c03/c03_10.html)\n   * [# 3.11 Python 读取文件的六种方式](https://magic.iswbm.com/c03/c03_11.html)\n   * [# 3.12 调用函数的九种方法](https://magic.iswbm.com/c03/c03_12.html)\n   * [# 3.13 创造 \"新语法\" 的黑科技](https://magic.iswbm.com/c03/c03_13.html)\n- **第四章：魔法进阶扫盲**\n   * [# 4.1 精通上下文管理器](https://magic.iswbm.com/c04/c04_01.html)\n   * [# 4.2 深入理解描述符](https://magic.iswbm.com/c04/c04_02.html)\n   * [# 4.3 神奇的元类编程](https://magic.iswbm.com/c04/c04_03.html)\n- **第五章：魔法开发技巧**\n   * [# 5.1 嵌套上下文管理的另类写法](https://magic.iswbm.com/c05/c05_01.html)\n   * [# 5.2 将嵌套 for 循环写成单行](https://magic.iswbm.com/c05/c05_02.html)\n   * [# 5.3 单行实现 for 死循环如何写？](https://magic.iswbm.com/c05/c05_03.html)\n   * [# 5.4 如何关闭异常自动关联上下文？](https://magic.iswbm.com/c05/c05_04.html)\n   * [# 5.5 自带的缓存机制不用白不用](https://magic.iswbm.com/c05/c05_05.html)\n   * [# 5.6 如何流式读取数G超大文件](https://magic.iswbm.com/c05/c05_06.html)\n   * [# 5.7 实现类似 defer 的延迟调用](https://magic.iswbm.com/c05/c05_07.html)\n   * [# 5.8 如何快速计算函数运行时间](https://magic.iswbm.com/c05/c05_08.html)\n   * [# 5.9 重定向标准输出到日志](https://magic.iswbm.com/c05/c05_09.html)\n   * [# 5.10 快速定位错误进入调试模式](https://magic.iswbm.com/c05/c05_10.html)\n   * [# 5.11 在程序退出前执行代码的技巧](https://magic.iswbm.com/c05/c05_11.html)\n   * [# 5.12 逗号也有它的独特用法](https://magic.iswbm.com/c05/c05_12.html)\n   * [# 5.13 如何在运行状态查看源代码？](https://magic.iswbm.com/c05/c05_13.html)\n   * [# 5.14 单分派泛函数如何写？](https://magic.iswbm.com/c05/c05_14.html)\n   * [# 5.15 让我爱不释手的用户环境](https://magic.iswbm.com/c05/c05_15.html)\n   * [# 5.16 字符串的分割技巧](https://magic.iswbm.com/c05/c05_16.html)\n   * [# 5.17 反转字符串/列表最优雅的方式](https://magic.iswbm.com/c05/c05_17.html)\n   * [# 5.18 如何将 print 内容输出到文件](https://magic.iswbm.com/c05/c05_18.html)\n   * [# 5.19 改变默认递归次数限制](https://magic.iswbm.com/c05/c05_19.html)\n   * [# 5.20 让你晕头转向的 else 用法](https://magic.iswbm.com/c05/c05_20.html)\n   * [# 5.21 字典访问不存在的key时不再报错](https://magic.iswbm.com/c05/c05_21.html)\n   * [# 5.22 如何实现函数的连续调用？](https://magic.iswbm.com/c05/c05_22.html)\n   * [# 5.23 如何实现字典的多级排序](https://magic.iswbm.com/c05/c05_23.html)\n   * [# 5.24 对齐字符串的两种方法](https://magic.iswbm.com/c05/c05_24.html)\n   * [# 5.25 将位置参数变成关键字参数](https://magic.iswbm.com/c05/c05_25.html)\n   * [# 5.26 如何获取一个函数设定的参数](https://magic.iswbm.com/c05/c05_26.html)\n   * [# 5.27 如何进行版本的比较](https://magic.iswbm.com/c05/c05_27.html)\n   * [# 5.28 如何捕获警告?(注意不是捕获异常)](https://magic.iswbm.com/c05/c05_28.html)\n   * [# 5.29 如何禁止对象深拷贝?](https://magic.iswbm.com/c05/c05_29.html)\n   * [# 5.30 如何将变量名和变量值转为字典？](https://magic.iswbm.com/c05/c05_30.html)\n   * [# 5.31 替换实例方法的最佳实践](https://magic.iswbm.com/c05/c05_31.html)\n   * [# 5.32 如何动态创建函数？](https://magic.iswbm.com/c05/c05_32.html)\n   * [# 5.33 如何规定函数的参数类型？](https://magic.iswbm.com/c05/c05_33.html)\n- **第六章：良好编码习惯**\n   * [# 6.1 不要直接调用类的私有方法](https://magic.iswbm.com/c06/c06_01.html)\n   * [# 6.2 默认参数最好不为可变对象](https://magic.iswbm.com/c06/c06_02.html)\n   * [# 6.3 增量赋值的性能更好](https://magic.iswbm.com/c06/c06_03.html)\n   * [# 6.4 别再使用 pprint 打印了](https://magic.iswbm.com/c06/c06_04.html)\n   * [# 6.5 变量名与保留关键字冲突怎么办？](https://magic.iswbm.com/c06/c06_05.html)\n   * [# 6.6 不想让子类继承的变量名该怎么写？](https://magic.iswbm.com/c06/c06_06.html)\n   * [# 6.7 利用 any 代替 for 循环](https://magic.iswbm.com/c06/c06_07.html)\n   * [# 6.8 不同条件分支里应减少重合度](https://magic.iswbm.com/c06/c06_08.html)\n   * [# 6.9 如无必要，勿增实体噢](https://magic.iswbm.com/c06/c06_09.html)\n   * [# 6.10 保持代码的简洁与可诗性](https://magic.iswbm.com/c06/c06_10.html)\n   * [# 6.11 给模块的私有属性上保险](https://magic.iswbm.com/c06/c06_11.html)\n   * [# 6.12 变量不能与保留关键字重名](https://magic.iswbm.com/c06/c06_12.html)\n- **第七章：神奇魔法模块**\n   * [# 7.1 远程登陆服务器的最佳利器](https://magic.iswbm.com/c07/c07_01.html)\n   * [# 7.2 代码 BUG 变得酷炫的利器](https://magic.iswbm.com/c07/c07_02.html)\n   * [# 7.3 少有人知的 Python \"重试机制\"](https://magic.iswbm.com/c07/c07_03.html)\n   * [# 7.4 规整字符串提取数据的神器](https://magic.iswbm.com/c07/c07_04.html)\n   * [# 7.5 一行代码让代码运行速度提高100倍](https://magic.iswbm.com/c07/c07_05.html)\n   * [# 7.6 新一代的调试神器：PySnooper](https://magic.iswbm.com/c07/c07_06.html)\n   * [# 7.7 比open更好用、更优雅的读取文件](https://magic.iswbm.com/c07/c07_07.html)\n   * [# 7.8 像操作路径一样，操作嵌套字典](https://magic.iswbm.com/c07/c07_08.html)\n   * [# 7.9 读取文件中任意行的数据](https://magic.iswbm.com/c07/c07_09.html)\n   * [# 7.10 让你的装饰器写得更轻松的神库](https://magic.iswbm.com/c07/c07_10.html)\n   * [# 7.11 国际化模块，让翻译更优雅](https://magic.iswbm.com/c07/c07_11.html)\n   * [# 7.12 非常好用的调度模块](https://magic.iswbm.com/c07/c07_12.html)\n   * [# 7.13 实现字典的点式操作](https://magic.iswbm.com/c07/c07_13.html)\n   * [# 7.14 使用 trypackage 试用新库](https://magic.iswbm.com/c07/c07_14.html)\n      * [# 7.15 利用 streamlit 傻瓜式构建可视化web应用](https://magic.iswbm.com/c07/c07_15.html)\n\n## 写在最后\n\n本书所有文章均为本人原创，若对你学习 Python 有帮助，希望你能多多帮忙宣传，让更多的人知道这本书。\n\n如果你有不错的内容，想加入进来，可以提交 pull requests ，大家一起努力作好这个项目。\n"
        },
        {
          "name": "baidu_verify_code-akNcNpmYjb.html",
          "type": "blob",
          "size": 0.03125,
          "content": "3a591fe8805732ea01993ca4769e52e7"
        },
        {
          "name": "exts",
          "type": "tree",
          "content": null
        },
        {
          "name": "github-toc-maker-for-sphinx.py",
          "type": "blob",
          "size": 2.126953125,
          "content": "import os\nimport re\nimport linecache\nfrom glob import glob\n\npwd = os.getcwd()\nsource_dir = os.path.join(pwd, \"source\")\n\ndef get_chapter_name(file):\n    return linecache.getline(file, 2).strip()\n\ndef get_title(file):\n    first_line = linecache.getline(file, 1)\n\n    if first_line.startswith(\"#\"):\n        return first_line.strip()\n\ndef get_all_chapter():\n    all_chapters_path = []\n    os.chdir(source_dir)\n    for dir_name in glob(\"c*\"):\n        if dir_name == \"chapters\" or dir_name == \"conf.py\":\n            continue\n        all_chapters_path.append(os.path.join(dir_name))\n\n    return all_chapters_path\n\ndef generate_mapping(all_chapters_path):\n    mapping = dict.fromkeys([os.path.basename(chapter_path) for chapter_path in all_chapters_path])\n    for key in mapping.keys():\n        chapter_file = os.path.join(pwd, \"source\", \"chapters\", key.replace(\"c\", \"p\") + \".rst\")\n        mapping[key] = get_chapter_name(chapter_file)\n\n    return mapping\n\ndef get_toc_info(all_chapters_path):\n    toc = {}\n    for dir_name in all_chapters_path:\n        chapter_toc = {}\n        os.chdir(os.path.join(source_dir, dir_name))\n\n        for file_name in sorted(glob(dir_name + \"*.md\")):\n            section = int(re.findall(r\"c\\d{2}_(\\d{2}).md\", file_name)[0])\n\n            md_path = os.path.join(\"https://magic.iswbm.com/\", dir_name, file_name.replace(\"md\", \"html\"))\n            title = get_title(file_name)\n            if not title:\n                continue\n\n            chapter_toc[section] = (title, md_path)\n\n        toc[dir_name] = chapter_toc\n\n    return toc\n\ndef print_md_toc(toc_info, mapping):\n    for chapter in sorted(toc_info.items(), key=lambda item: item[0]):\n        posts = chapter[1]\n        chapter_name = mapping[chapter[0]]\n        print(f\"- **{chapter_name}**\")\n        for post in sorted(posts.items(), key=lambda item:item[0]):\n            # print title only \n            # print(f\"{post[1][0]}\")\n            print(\"  \", f\"* [{post[1][0]}]({post[1][1]})\")\n\ndef main():\n    all_chapter = get_all_chapter()\n    mapping = generate_mapping(all_chapter)\n    toc_info = get_toc_info(all_chapter)\n    print_md_toc(toc_info, mapping)\n\nif __name__ == '__main__':\n    main()\n\n"
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 0.7802734375,
          "content": "@ECHO OFF\r\n\r\npushd %~dp0\r\n\r\nREM Command file for Sphinx documentation\r\n\r\nif \"%SPHINXBUILD%\" == \"\" (\r\n\tset SPHINXBUILD=sphinx-build\r\n)\r\nset SOURCEDIR=source\r\nset BUILDDIR=build\r\n\r\nif \"%1\" == \"\" goto help\r\n\r\n%SPHINXBUILD% >NUL 2>NUL\r\nif errorlevel 9009 (\r\n\techo.\r\n\techo.The 'sphinx-build' command was not found. Make sure you have Sphinx\r\n\techo.installed, then set the SPHINXBUILD environment variable to point\r\n\techo.to the full path of the 'sphinx-build' executable. Alternatively you\r\n\techo.may add the Sphinx directory to PATH.\r\n\techo.\r\n\techo.If you don't have Sphinx installed, grab it from\r\n\techo.http://sphinx-doc.org/\r\n\texit /b 1\r\n)\r\n\r\n%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\r\ngoto end\r\n\r\n:help\r\n%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%\r\n\r\n:end\r\npopd\r\n"
        },
        {
          "name": "md2rst.py",
          "type": "blob",
          "size": 4.208984375,
          "content": "# coding:utf-8\nimport os\nimport subprocess\nimport platform\n\n\nosName = platform.system()\npwd = os.getcwd()\nblog_path = os.path.join(pwd, \"source\")\nindex_path = os.path.join(pwd, \"README.md\")\n\n\nbase_link = \"http://python.iswbm.com/en/latest/\"\nreadme_header = '''\n![](http://image.iswbm.com/20200607120940.png)\n\n<p align=\"center\">\n    <img src='https://img.shields.io/badge/language-Python-blue.svg' alt=\"Build Status\">\n    <img src='https://img.shields.io/badge/framwork-Sphinx-green.svg'>\n  \t<a href='https://www.zhihu.com/people/wongbingming'><img src='https://img.shields.io/badge/dynamic/json?color=0084ff&logo=zhihu&label=%E7%8E%8B%E7%82%B3%E6%98%8E&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dzhihu%26queryKey%3Dwongbingming'></a>\n    <a href='https://juejin.im/user/5b08d982f265da0db3502c55'><img src='https://img.shields.io/badge/掘金-2481-blue'></a>\n    <a href='http://image.iswbm.com/20200607114246.png'><img src='http://img.shields.io/badge/%E5%85%AC%E4%BC%97%E5%8F%B7-30k+-brightgreen'></a>\n</p>\n\n## [项目主页](http://python.iswbm.com/)\n\n在线阅读：[Python 编程时光](http://python.iswbm.com/)\n\n![](http://image.iswbm.com/20200607130051.png)\n\n## 文章结构\n\n![](http://image.iswbm.com/20200607131339.png)\n\n'''\nreadme_tooter = '''\n---\n![](http://image.iswbm.com/20200607174235.png)\n\n'''\n\n\ndef get_file_info(filename):\n    with open(filename, 'r', encoding=\"utf-8\") as file:\n        first_line = file.readline().replace(\"#\", \"\").strip()\n    return first_line.split(' ', 1)\n\ndef make_line(chapter, file):\n    page_name, _ = os.path.splitext(file)\n    (index, title) = get_file_info(file)\n    url = base_link  + chapter + \"/\" + page_name + \".html\"\n    item_list = [\"-\", index, \"[{}]({})\\n\".format(title, url)]\n    return \" \".join(item_list)\n\ndef render_index_page(index_info):\n    '''\n    生成 readme.md 索引文件，包含所有文件目录\n    '''\n    # 重新排序\n    index_info = sorted(index_info.items(), key=lambda item:item[0], reverse=False)\n\n    # 写入文件\n    with open(index_path, 'w+', encoding=\"utf-8\") as file:\n        file.write(readme_header)\n        for chp, info in index_info:\n            chp_name = info[\"name\"]\n            file.write(\"## \" + chp_name + \"\\n\")\n            for line in info[\"contents\"]:\n                file.write(line)\n            file.write(\"\\n\")\n        file.write(readme_tooter)\n\ndef convert_md5_to_rst(file):\n    '''\n    转换格式：md5转换成rst\n    '''\n    (filename, extension) = os.path.splitext(file)\n    convert_cmd = 'pandoc -V mainfont=\"SimSun\" -f markdown -t rst {md_file} -o {rst_file}'.format(\n        md_file=filename+'.md', rst_file=filename+'.rst'\n    )\n    # status, output = commands.getstatusoutput(convert_cmd)\n    status = subprocess.call(convert_cmd.split(\" \"))\n    if status != 0:\n        print(\"命令执行失败: \" + convert_cmd)\n        os._exit(1)\n    if status == 0:\n        print(file + ' 处理完成')\n    else:\n        print(file + '处理失败')\n\ndef get_all_dir():\n    '''\n    获取所有的目录\n    '''\n    dir_list = []\n    file_list = os.listdir(blog_path)\n    for item in file_list:\n        abs_path = os.path.join(blog_path, item)\n        if os.path.isdir(abs_path):\n            dir_list.append(abs_path)\n    return dir_list\n\n\ndef init_index_info():\n    '''\n    初始化索引\n    '''\n    index_info = {}\n    chapter_dir = os.path.join(blog_path, \"chapters\")\n    os.chdir(chapter_dir)\n    for file in os.listdir(chapter_dir):\n        name, _ = os.path.splitext(file)\n        with open(file, 'r', encoding=\"utf-8\") as f:\n            chapter_name = f.readlines()[1].strip()\n        index_info[name.replace(\"p\", \"\")] = {\"name\": chapter_name, \"contents\": []}\n    return index_info\n\ndef main(index_info):\n    for folder in get_all_dir():\n        os.chdir(folder)\n        chapter = os.path.split(folder)[1]\n        all_file = os.listdir(folder)\n        all_md_file = sorted([file for file in all_file if file.endswith('md')])\n\n        for file in all_md_file:\n            line = make_line(chapter, file)\n            index_info[chapter.replace(\"c\", \"\")][\"contents\"].append(line)\n            convert_md5_to_rst(file)\n\n\nif __name__ == '__main__':\n    index_info = init_index_info()\n    main(index_info)\n    # render_index_page(index_info)\n    print(\"OK\")\n"
        },
        {
          "name": "pdf_maker.py",
          "type": "blob",
          "size": 1.4951171875,
          "content": "#!/usr/local/bin/python3\n\nimport os\nimport glob\nimport fileinput\nimport linecache\nfrom functools import partial\n\nrepo_dir = os.getcwd()\nsource_dir = os.path.join(repo_dir, \"source\")\nall_md_path = os.path.join(repo_dir, \"all_v3.0.md\",)\n\ncount = 0\n\nwith open(all_md_path, \"w\") as all_md:\n    write = partial(print, file=all_md, end=\"\")\n    os.chdir(source_dir)\n\n    for c_no in sorted(glob.glob(\"c*\")):\n        if c_no == \"chapters\" or c_no == \"conf.py\":\n            continue\n\n        # 读取并记下章节名\n        c_name = linecache.getline(os.path.join(source_dir, \"chapters\", f\"{c_no.replace('c', 'p')}.rst\"), 2)\n        write(f\"# {c_name}\\n\\n\", file=all_md)\n\n        # 读取每一节的内容\n        all_md_file = sorted(glob.glob(f\"{source_dir}/{c_no}/*.md\"))\n        for line in fileinput.input(all_md_file):\n            if \"20200804124133\" in line or \"20200607174235\" in line:\n                continue\n\n            if fileinput.isfirstline():\n                count += 1\n                if count%5 == 0:\n                    write(\"![](http://image.iswbm.com/20210523153308.png)\", end=\"\\n\\n\")\n\n            if line.startswith(\"# \"):\n                line = line.replace(\"# \", \"## \")\n            elif line.startswith(\"## \"):\n                line = line.replace(\"## \", \"### \")\n            elif line.startswith(\"### \"):\n                line = line.replace(\"### \", \"#### \")\n            elif \"gif\" in line:\n                line = line.replace(\"![]\", \"![该图为GIF,请前往 magic.iswbm.com 浏览]\")\n\n            write(line)\n\n"
        },
        {
          "name": "rebuild.sh",
          "type": "blob",
          "size": 0.376953125,
          "content": "cat << EOF >/usr/local/lib/python3.10/site-packages/sphinx_rtd_theme/comments.html\n<comments>\n  <script src=\"https://utteranc.es/client.js\"\n    repo=\"iswbm/magic-python\"\n    issue-term=\"pathname\"\n    theme=\"github-light\"\n    crossorigin=\"anonymous\"\n    async>\n  </script>\n</comments>\nEOF\n\nrm -rf build/ && sphinx-multiversion source build/html && cp -rf build/html/master/* build/html/\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.8525390625,
          "content": "alabaster==0.7.12\nargh==0.26.2\nBabel==2.9.1\ncertifi==2019.6.16\nchardet==3.0.4\ndocutils==0.14\nimagesize==1.1.0\nJinja2==2.11.3\nlivereload==2.6.1\nMarkupSafe==1.1.1\npackaging==19.0\npathtools==0.1.2\nport-for==0.3.1\nPygments==2.7.4\npyparsing==2.4.0\npytz==2019.1\nPyYAML==6.0.1\nrequests==2.32.3\nsix==1.12.0\nsnowballstemmer==1.9.0\nSphinx==2.1.2\nsphinx-autobuild==0.7.1\nsphinx-rtd-theme==0.4.3\nsphinxcontrib-applehelp==1.0.1\nsphinxcontrib-devhelp==1.0.1\nsphinxcontrib-htmlhelp==1.0.2\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-qthelp==1.0.2\nsphinxcontrib-serializinghtml==1.1.3\ntornado==6.0.3\nurllib3==2.2.2\nwatchdog==0.9.0\nsphinxcontrib-disqus==1.1.0\nsphinxcontrib-applehelp==1.0.1\nsphinxcontrib-devhelp==1.0.1\nsphinxcontrib-htmlhelp==1.0.2\nsphinxcontrib-jsmath==1.0.1\nsphinxcontrib-qthelp==1.0.2\nsphinxcontrib-serializinghtml==1.1.3\nsphinx-sitemap==2.2.0\nsphinx-multiversion==0.2.4\n"
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        },
        {
          "name": "usercustomize.py",
          "type": "blob",
          "size": 0.888671875,
          "content": "msg=r\"\"\"\n \n                    _ooOoo_\n                   o8888888o    __________________________________\n                   88\" . \"88   |  爬虫工程师平安  后端工程师平安  |\n                   (| -_- |)   |  数据分析师平安  自动化运维平安  |\n                    O\\ = /O    <__________________________________|\n                ____/`---'\\____\n              .   ' \\\\| |// `.\n               / \\\\||| : |||// \\\n             / _||||| -:- |||||- \\\n               | | \\\\\\ - /// | |\n             | \\_| ''\\---/'' | |\n              \\ .-\\__ `-` ___/-. /\n           ___`. .' /--.--\\ `. . __\n        .\"\" '< `.___\\_<|>_/___.' >'\"\".\n       | | : `- \\`.;`\\ _ /`;.`/ - ` : | |\n         \\ \\ `-. \\_ __\\ /__ _/ .-` / /\n ======`-.____`-.___\\_____/___.-`____.-'======\n                    `=---='\n \n .............................................\n          佛祖保佑             永无BUG\n\"\"\"\nprint(msg)\n"
        }
      ]
    }
  ]
}