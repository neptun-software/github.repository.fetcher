{
  "metadata": {
    "timestamp": 1736559459323,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenDroneMap/ODM",
      "stars": 4972,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.322265625,
          "content": "Dockerfile\r\ntests/test_data\r\nSuperBuild/build\r\nSuperBuild/download\r\nSuperBuild/install\r\nSuperBuild/src\r\nbuild\r\nopensfm\r\nodm_orthophoto\r\nodm_texturing\r\nodm_meshing\r\nodm_georeferencing\r\nimages_resize\r\n.git\r\n\r\n/contrib\r\n/docs\r\n/hooks\r\n/img\r\n/license\r\n/tests\r\ntests.sh\r\nsettings.yml\r\ncode_of_conduct.md\r\nconfigure_18_04.sh\r\nindex.html"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.291015625,
          "content": "*~\nbin/\ninclude/\nlib/\nlogs/\nshare/\n\n\nsrc/\n\n!modules/*\n\ndownload/\n\nSuperBuild/build/\nSuperBuild/install/\nbuild/\n\ncmvs.tar.gz\nparallel.tar.bz2\nLAStools.zip\npcl.tar.gz\nceres-solver.tar.gz\n*.pyc\nopencv.zip\nsettings.yaml\n.setupdevenv\n__pycache__\n*.snap\nstorage/\n\n\nvcpkg/\nvenv/\npython38/\ndist/\ninnosetup/"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.015625,
          "content": "opendronemap.org"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.072265625,
          "content": "See https://github.com/OpenDroneMap/documents/blob/master/CONTRIBUTING.md\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.669921875,
          "content": "FROM ubuntu:21.04 AS builder\n\n# Env variables\nENV DEBIAN_FRONTEND=noninteractive \\\n    PYTHONPATH=\"$PYTHONPATH:/code/SuperBuild/install/lib/python3.9/dist-packages:/code/SuperBuild/install/lib/python3.8/dist-packages:/code/SuperBuild/install/bin/opensfm\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/code/SuperBuild/install/lib\"\n\n# Prepare directories\nWORKDIR /code\n\n# Copy everything\nCOPY . ./\n\n# Use old-releases for 21.04\nRUN printf \"deb http://old-releases.ubuntu.com/ubuntu/ hirsute main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-backports main restricted universe multiverse\" > /etc/apt/sources.list\n\n# Run the build\nRUN bash configure.sh install\n\n# Clean Superbuild\nRUN bash configure.sh clean\n\n### END Builder\n\n### Use a second image for the final asset to reduce the number and\n# size of the layers.\nFROM ubuntu:21.04\n\n# Env variables\nENV DEBIAN_FRONTEND=noninteractive \\\n    PYTHONPATH=\"$PYTHONPATH:/code/SuperBuild/install/lib/python3.9:/code/SuperBuild/install/lib/python3.8/dist-packages:/code/SuperBuild/install/bin/opensfm\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/code/SuperBuild/install/lib\" \\\n    PDAL_DRIVER_PATH=\"/code/SuperBuild/install/bin\"\n\nWORKDIR /code\n\n# Copy everything we built from the builder\nCOPY --from=builder /code /code\n\n# Copy the Python libraries installed via pip from the builder\nCOPY --from=builder /usr/local /usr/local\n\n# Use old-releases for 21.04\nRUN printf \"deb http://old-releases.ubuntu.com/ubuntu/ hirsute main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-backports main restricted universe multiverse\" > /etc/apt/sources.list\n\n# Install shared libraries that we depend on via APT, but *not*\n# the -dev packages to save space!\n# Also run a smoke test on ODM and OpenSfM\nRUN bash configure.sh installruntimedepsonly \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n  && bash run.sh --help \\\n  && bash -c \"eval $(python3 /code/opendm/context.py) && python3 -c 'from opensfm import io, pymap'\"\n# Entry point\nENTRYPOINT [\"python3\", \"/code/run.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.712890625,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.5517578125,
          "content": "![ODM Logo](https://user-images.githubusercontent.com/1951843/79699889-438ce580-8260-11ea-9c79-8667834aeab2.png)\n\nAn open source command line toolkit for processing aerial drone imagery. ODM turns simple 2D images into:\n\n* Classified Point Clouds\n* 3D Textured Models\n* Georeferenced Orthorectified Imagery\n* Georeferenced Digital Elevation Models\n\n![images-diag](https://user-images.githubusercontent.com/1174901/96644651-5b205600-12f7-11eb-827b-8f4a3a6f3b21.png)\n\nThe application is available for Windows, Mac and Linux and it works from the command line, making it ideal for power users, scripts and for integration with other software.\n\nIf you would rather not type commands in a shell and are looking for a friendly user interface, check out [WebODM](https://github.com/OpenDroneMap/WebODM).\n\n## Quickstart\n\nThe easiest way to run ODM on is via docker. To install docker, see [docs.docker.com](https://docs.docker.com). Once you have docker installed and [working](https://docs.docker.com/get-started/#test-docker-installation), you can run ODM by placing some images (JPEGs or TIFFs) in a folder named “images” (for example `C:\\Users\\youruser\\datasets\\project\\images` or `/home/youruser/datasets/project/images`) and simply run from a Command Prompt / Terminal:\n\n```bash\n# Windows\ndocker run -ti --rm -v c:/Users/youruser/datasets:/datasets opendronemap/odm --project-path /datasets project\n\n# Mac/Linux\ndocker run -ti --rm -v /home/youruser/datasets:/datasets opendronemap/odm --project-path /datasets project\n```\n\nYou can pass [additional parameters](https://docs.opendronemap.org/arguments/) by appending them to the command:\n\n```bash\ndocker run -ti --rm -v /datasets:/datasets opendronemap/odm --project-path /datasets project [--additional --parameters --here]\n```\n\nFor example, to generate a DSM (`--dsm`) and increase the orthophoto resolution (`--orthophoto-resolution 2`) :\n\n```bash\ndocker run -ti --rm -v /datasets:/datasets opendronemap/odm --project-path /datasets project --dsm --orthophoto-resolution 2\n```\n\n## Viewing Results\n\nWhen the process finishes, the results will be organized as follows:\n\n    |-- images/\n        |-- img-1234.jpg\n        |-- ...\n    |-- opensfm/\n        |-- see mapillary/opensfm repository for more info\n    |-- odm_meshing/\n        |-- odm_mesh.ply                    # A 3D mesh\n    |-- odm_texturing/\n        |-- odm_textured_model.obj          # Textured mesh\n        |-- odm_textured_model_geo.obj      # Georeferenced textured mesh\n    |-- odm_georeferencing/\n        |-- odm_georeferenced_model.laz     # LAZ format point cloud\n    |-- odm_orthophoto/\n        |-- odm_orthophoto.tif              # Orthophoto GeoTiff\n\nYou can use the following free and open source software to open the files generated in ODM:\n * .tif (GeoTIFF): [QGIS](http://www.qgis.org/)\n * .laz (Compressed LAS): [CloudCompare](https://www.cloudcompare.org/)\n * .obj (Wavefront OBJ), .ply (Stanford Triangle Format): [MeshLab](http://www.meshlab.net/)\n\n**Note!** Opening the .tif files generated by ODM in programs such as Photoshop or GIMP might not work (they are GeoTIFFs, not plain TIFFs). Use [QGIS](http://www.qgis.org/) instead.\n\n## API\n\nODM can be made accessible from a network via [NodeODM](https://github.com/OpenDroneMap/NodeODM).\n\n## Documentation\n\nSee http://docs.opendronemap.org for tutorials and more guides.\n\n## Forum\n\nWe have a vibrant [community forum](https://community.opendronemap.org/). You can [search it](https://community.opendronemap.org/search?expanded=true) for issues you might be having with ODM and you can post questions there. We encourage users of ODM to participate in the forum and to engage with fellow drone mapping users.\n\n## Windows Setup\n\nODM can be installed natively on Windows. Just download the latest setup from the [releases](https://github.com/OpenDroneMap/ODM/releases) page. After opening the ODM Console you can process datasets by typing:\n\n```bash\nrun C:\\Users\\youruser\\datasets\\project  [--additional --parameters --here]\n```\n\n## GPU Acceleration\n\nODM has support for doing SIFT feature extraction on a GPU, which is about 2x faster than the CPU on a typical consumer laptop. To use this feature, you need to use the `opendronemap/odm:gpu` docker image instead of `opendronemap/odm` and you need to pass the `--gpus all` flag:\n\n```\ndocker run -ti --rm -v c:/Users/youruser/datasets:/datasets --gpus all opendronemap/odm:gpu --project-path /datasets project\n```\n\nWhen you run ODM, if the GPU is recognized, in the first few lines of output you should see:\n\n```\n[INFO]    Writing exif overrides\n[INFO]    Maximum photo dimensions: 4000px\n[INFO]    Found GPU device: Intel(R) OpenCL HD Graphics\n[INFO]    Using GPU for extracting SIFT features\n```\n\nThe SIFT GPU implementation is CUDA-based, so should work with most NVIDIA graphics cards of the GTX 9xx Generation or newer.\n\nIf you have an NVIDIA card, you can test that docker is recognizing the GPU by running:\n\n```\ndocker run --rm --gpus all nvidia/cuda:10.0-base nvidia-smi\n```\n\nIf you see an output that looks like this:\n\n```\nFri Jul 24 18:51:55 2020       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n```\n\nYou're in good shape!\n\nSee https://github.com/NVIDIA/nvidia-docker and https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker for information on docker/NVIDIA setup.\n\n## Native Install (Ubuntu 21.04)\n\nYou can run ODM natively on Ubuntu 21.04 (although we don't recommend it):  \n\n```bash\ngit clone https://github.com/OpenDroneMap/ODM\ncd ODM\nbash configure.sh install\n```\n\nYou can then process datasets with `./run.sh /datasets/odm_data_aukerman`\n\n## Native Install (MacOS)\n\nYou can run ODM natively on Intel/ARM MacOS.\n\nFirst install:\n\n * Xcode 13 (not 14, there's currently a bug)\n * [Homebrew](https://docs.brew.sh/Installation)\n\nThen Run:\n\n```bash\ngit clone https://github.com/OpenDroneMap/ODM\ncd ODM\nbash configure_macos.sh install\n```\n\nYou can then process datasets with `./run.sh /datasets/odm_data_aukerman`\n\nThis could be improved in the future. [Helps us create a Homebrew formula](https://github.com/OpenDroneMap/ODM/issues/1531).\n\n### Updating a native installation\n\nWhen updating to a newer version of native ODM, it is recommended that you run:\n\n`bash configure.sh reinstall`\n\nto ensure all the dependent packages and modules get updated.\n\n### Build Docker Images From Source\n\nIf you want to rebuild your own docker image (if you have changed the source code, for example), from the ODM folder you can type:\n\n```bash\ndocker build -t my_odm_image --no-cache .\n```\nWhen building your own Docker image, if image size is of importance to you, you should use the ```--squash``` flag, like so:\n\n```bash\ndocker build --squash -t my_odm_image .\n```\n\nThis will clean up intermediate steps in the Docker build process, resulting in a significantly smaller image (about half the size).\n\nExperimental flags need to be enabled in Docker to use the ```--squash``` flag. To enable this, insert the following into the file `/etc/docker/daemon.json`:\n\n```json\n{\n   \"experimental\": true\n}\n```\n\nAfter this, you must restart docker.\n\n## Video Support\n\nStarting from version 3.0.4, ODM can automatically extract images from video files (.mp4, .mov, .lrv, .ts). Just place one or more video files into the `images` folder and run the program as usual. Subtitles files (.srt) with GPS information are also supported. Place .srt files in the `images` folder, making sure that the filenames match. For example, `my_video.mp4` ==> `my_video.srt` (case-sensitive).\n\n## Developers\n\nHelp improve our software! We welcome contributions from everyone, whether to add new features, improve speed, fix existing bugs or add support for more cameras. Check our [code of conduct](https://github.com/OpenDroneMap/documents/blob/master/CONDUCT.md), the [contributing guidelines](https://github.com/OpenDroneMap/documents/blob/master/CONTRIBUTING.md) and [how decisions are made](https://github.com/OpenDroneMap/documents/blob/master/GOVERNANCE.md#how-decisions-are-made).\n\n\n### Installation and first run\nFor Linux users, the easiest way to modify the software is to make sure docker is installed, clone the repository and then run from a shell:\n\n```bash\n$ DATA=/path/to/datasets ./start-dev-env.sh\n```\n\nWhere `/path/to/datasets` is a directory where you can place test datasets (it can also point to an empty directory if you don't have test datasets).\n\nRun configure to set up the required third party libraries:\n```bash\n(odmdev) [user:/code] master+* ± bash configure.sh reinstall\n```\n\nYou can now make changes to the ODM source. When you are ready to test the changes you can simply invoke:\n\n```bash\n(odmdev) [user:/code] master+* ± ./run.sh --project-path /datasets mydataset\n```\n### Stop dev container\n```bash\n docker  stop odmdev\n```\n### To come back to dev environement\nchange your_username to your username\n```bash\ndocker start odmdev\ndocker exec -ti odmdev bash\nsu your_username\n```\n\n\nIf you have questions, join the developer's chat at https://community.opendronemap.org/c/developers-chat/21\n\n1. Try to keep commits clean and simple\n2. Submit a pull request with detailed changes and test results\n3. Have fun!\n\n### Troubleshooting\nThe dev environment makes use of `opendronemap/nodeodm` by default. You may want to run \n`docker pull opendronemap/nodeodm` before running `./start-dev-env.sh` to avoid using an old cached version.\n\nIn order to make a clean build, remove `~/.odm-dev-home` and `ODM/.setupdevenv`.\n\n## Credits\n\nODM makes use of [several libraries](https://github.com/OpenDroneMap/ODM/blob/master/snap/snapcraft.yaml#L36) and other awesome open source projects to perform its tasks. Among them we'd like to highlight:\n\n - [OpenSfM](https://github.com/mapillary/OpenSfM)\n - [OpenMVS](https://github.com/cdcseacave/openMVS/)\n - [PDAL](https://github.com/PDAL/PDAL)\n - [Entwine](https://entwine.io/)\n - [MVS Texturing](https://github.com/nmoehrle/mvs-texturing)\n - [GRASS GIS](https://grass.osgeo.org/)\n - [GDAL](https://gdal.org/)\n - [PoissonRecon](https://github.com/mkazhdan/PoissonRecon)\n\n\n## Citation\n\n> *OpenDroneMap Authors* ODM - A command line toolkit to generate maps, point clouds, 3D models and DEMs from drone, balloon or kite images. **OpenDroneMap/ODM GitHub Page** 2020; [https://github.com/OpenDroneMap/ODM](https://github.com/OpenDroneMap/ODM)\n\n## Trademark\n\nSee [Trademark Guidelines](https://github.com/OpenDroneMap/documents/blob/master/TRADEMARK.md)\n"
        },
        {
          "name": "SuperBuild",
          "type": "tree",
          "content": null
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.5.4\n"
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 0.0673828125,
          "content": "See https://github.com/OpenDroneMap/documents/blob/master/CONDUCT.md\n"
        },
        {
          "name": "configure.py",
          "type": "blob",
          "size": 8.09375,
          "content": "import sys, platform\nif sys.platform != 'win32':\n    print(\"This script is for Windows only! Use configure.sh instead.\")\n    exit(1)\nif sys.version_info.major != 3 or sys.version_info.minor != 8:\n    print(\"You need to use Python 3.8.x (due to the requirements.txt). You are using %s instead.\" % platform.python_version())\n    exit(1)\n\nimport argparse\nimport subprocess\nimport os\nimport stat\nimport urllib.request\nimport shutil \nimport zipfile\n\nfrom venv import EnvBuilder\n\nparser = argparse.ArgumentParser(description='ODM Windows Configure Script')\nparser.add_argument('action',\n                type=str,\n                choices=[\"build\", \"clean\", \"dist\", \"vcpkg_export\"],\n                help='Action: %(choices)s')\nparser.add_argument('--build-vcpkg',\n                    type=bool,\n                    help='Build VCPKG environment from scratch instead of downloading prebuilt one.')\nparser.add_argument('--vcpkg-archive-url',\n                    type=str,\n                    default='https://github.com/OpenDroneMap/windows-deps/releases/download/2.5.0/vcpkg-export-250.zip',\n                    required=False,\n                    help='Path to VCPKG export archive')\nparser.add_argument('--code-sign-cert-path',\n                    type=str,\n                    default='',\n                    required=False,\n                    help='Path to pfx code signing certificate')\n\nargs = parser.parse_args()\n\ndef run(cmd, cwd=os.getcwd()):\n    env = os.environ.copy()\n    print(cmd)\n    p = subprocess.Popen(cmd, shell=True, env=env, cwd=cwd)\n    retcode = p.wait()\n    if retcode != 0:\n        raise Exception(\"Command returned %s\" % retcode)\n\n# https://izziswift.com/shutil-rmtree-fails-on-windows-with-access-is-denied/\ndef rmtree(top):\n    for root, dirs, files in os.walk(top, topdown=False):\n        for name in files:\n            filename = os.path.join(root, name)\n            os.chmod(filename, stat.S_IWUSR)\n            os.remove(filename)\n        for name in dirs:\n            os.rmdir(os.path.join(root, name))\n    os.rmdir(top)\n\ndef vcpkg_requirements():\n    with open(\"vcpkg-requirements.txt\") as f:\n        pckgs = list(filter(lambda l: len(l) > 0, map(str.strip, f.read().split(\"\\n\"))))\n    return pckgs\n\ndef build():\n    # Create python virtual env\n    if not os.path.isdir(\"venv\"):\n        print(\"Creating virtual env --> venv/\")\n        ebuilder = EnvBuilder(with_pip=True)\n        ebuilder.create(\"venv\")\n\n    run(\"venv\\\\Scripts\\\\pip install --ignore-installed -r requirements.txt\")\n    \n    # Download / build VCPKG environment\n    if not os.path.isdir(\"vcpkg\"):\n        if args.build_vcpkg:\n            print(\"TODO\")\n            # git clone vcpkg repo\n            # bootstrap\n            # install requirements\n\n        else:\n            if not os.path.exists(\"vcpkg-env.zip\"):\n                print(\"Downloading %s\" % args.vcpkg_archive_url)\n                with urllib.request.urlopen(args.vcpkg_archive_url) as response, open( \"vcpkg-env.zip\", 'wb') as out_file:\n                    shutil.copyfileobj(response, out_file)\n            if not os.path.exists(\"vcpkg\"):\n                print(\"Extracting vcpkg-env.zip --> vcpkg/\")\n                with zipfile.ZipFile(\"vcpkg-env.zip\") as z:\n                    top_dir = z.namelist()[0]\n                    z.extractall(\".\")\n\n                    if os.path.exists(top_dir):\n                        os.rename(top_dir, \"vcpkg\")\n                    else:\n                        print(\"Warning! Something looks wrong in the VCPKG archive... check the vcpkg/ directory.\")\n                safe_remove(\"vcpkg-env.zip\")\n\n    if not os.path.exists(os.path.join(\"SuperBuild\", \"build\")) or not os.path.exists(os.path.join(\"SuperBuild\", \"install\")):\n        print(\"Compiling SuperBuild\")\n        \n        build_dir = os.path.join(\"SuperBuild\", \"build\")\n        if not os.path.isdir(build_dir):\n            os.mkdir(build_dir)\n\n        toolchain_file = os.path.join(os.getcwd(), \"vcpkg\", \"scripts\", \"buildsystems\", \"vcpkg.cmake\")\n        run(\"cmake .. -DCMAKE_TOOLCHAIN_FILE=\\\"%s\\\"\" % toolchain_file,  cwd=build_dir)\n        run(\"cmake --build . --config Release\", cwd=build_dir)\n\ndef vcpkg_export():\n    if not os.path.exists(\"vcpkg\"):\n        print(\"vcpkg directory does not exist. Did you build the environment?\")\n        exit(1)\n\n    pkgs = vcpkg_requirements()\n    out = \"vcpkg-export-%s\" % odm_version().replace(\".\", \"\")\n    run(\"vcpkg\\\\vcpkg export %s --output=%s --zip\" % (\" \".join(pkgs), out))\n\ndef odm_version():\n    with open(\"VERSION\") as f:\n        return f.read().split(\"\\n\")[0].strip()\n\ndef safe_remove(path):\n    if os.path.isdir(path):\n        rmtree(path)\n    elif os.path.isfile(path):\n        os.remove(path)\n\ndef clean():\n    safe_remove(\"vcpkg-download.zip\")\n    safe_remove(\"vcpkg\")\n    safe_remove(\"venv\")\n    safe_remove(os.path.join(\"SuperBuild\", \"build\"))\n    safe_remove(os.path.join(\"SuperBuild\", \"download\"))\n    safe_remove(os.path.join(\"SuperBuild\", \"src\"))\n    safe_remove(os.path.join(\"SuperBuild\", \"install\"))\n\ndef dist():\n    if not os.path.exists(\"SuperBuild\\\\install\"):\n        print(\"You need to run configure.py build before you can run dist\")\n        exit(1)\n\n    if not os.path.exists(\"SuperBuild\\\\download\"):\n        os.mkdir(\"SuperBuild\\\\download\")\n\n    # Download VC++ runtime\n    vcredist_path = os.path.join(\"SuperBuild\", \"download\", \"vc_redist.x64.zip\")\n    if not os.path.isfile(vcredist_path):\n        vcredist_url = \"https://github.com/OpenDroneMap/windows-deps/releases/download/2.5.0/VC_redist.x64.zip\"\n        print(\"Downloading %s\" % vcredist_url)\n        with urllib.request.urlopen(vcredist_url) as response, open(vcredist_path, 'wb') as out_file:\n            shutil.copyfileobj(response, out_file)\n\n        print(\"Extracting --> vc_redist.x64.exe\")\n        with zipfile.ZipFile(vcredist_path) as z:\n            z.extractall(os.path.join(\"SuperBuild\", \"download\"))\n\n    # Download portable python\n    if not os.path.isdir(\"python38\"):\n        pythonzip_path = os.path.join(\"SuperBuild\", \"download\", \"python38.zip\")\n        python_url = \"https://github.com/OpenDroneMap/windows-deps/releases/download/2.5.0/python-3.8.1-embed-amd64-less-pth.zip\"\n        if not os.path.exists(pythonzip_path):\n            print(\"Downloading %s\" % python_url)\n            with urllib.request.urlopen(python_url) as response, open( pythonzip_path, 'wb') as out_file:\n                shutil.copyfileobj(response, out_file)\n        \n        os.mkdir(\"python38\")\n\n        print(\"Extracting --> python38/\")\n        with zipfile.ZipFile(pythonzip_path) as z:\n            z.extractall(\"python38\")\n\n    # Download signtool\n    signtool_path = os.path.join(\"SuperBuild\", \"download\", \"signtool.exe\")\n    signtool_url = \"https://github.com/OpenDroneMap/windows-deps/releases/download/2.5.0/signtool.exe\"\n    if not os.path.exists(signtool_path):\n        print(\"Downloading %s\" % signtool_url)\n        with urllib.request.urlopen(signtool_url) as response, open(signtool_path, 'wb') as out_file:\n            shutil.copyfileobj(response, out_file)\n\n    # Download innosetup\n    if not os.path.isdir(\"innosetup\"):\n        innosetupzip_path = os.path.join(\"SuperBuild\", \"download\", \"innosetup.zip\")\n        innosetup_url = \"https://github.com/OpenDroneMap/windows-deps/releases/download/2.5.0/innosetup-portable-win32-6.0.5-3.zip\"\n        if not os.path.exists(innosetupzip_path):\n            print(\"Downloading %s\" % innosetup_url)\n            with urllib.request.urlopen(innosetup_url) as response, open(innosetupzip_path, 'wb') as out_file:\n                shutil.copyfileobj(response, out_file)\n\n        os.mkdir(\"innosetup\")\n\n        print(\"Extracting --> innosetup/\")\n        with zipfile.ZipFile(innosetupzip_path) as z:\n            z.extractall(\"innosetup\")\n\n    # Run\n    cs_flags = '/DSKIP_SIGN=1'\n    if args.code_sign_cert_path:\n        cs_flags = '\"/Ssigntool=%s sign /f %s /fd SHA1 /t http://timestamp.sectigo.com $f\"' % (signtool_path, args.code_sign_cert_path)\n    run(\"innosetup\\\\iscc /Qp \" + cs_flags  + \" \\\"innosetup.iss\\\"\")\n\n    print(\"Done! Setup created in dist/\")\n\nif args.action == 'build':\n    build()\nelif args.action == 'vcpkg_export':\n    vcpkg_export()\nelif args.action == 'dist':\n    dist()\nelif args.action == 'clean':\n    clean()\nelse:\n    args.print_help()\n    exit(1)\n"
        },
        {
          "name": "configure.sh",
          "type": "blob",
          "size": 6.494140625,
          "content": "#!/bin/bash\n\n# Ensure the DEBIAN_FRONTEND environment variable is set for apt-get calls\nAPT_GET=\"env DEBIAN_FRONTEND=noninteractive $(command -v apt-get)\"\n\ncheck_version(){  \n  UBUNTU_VERSION=$(lsb_release -r)\n  case \"$UBUNTU_VERSION\" in\n    *\"20.04\"*|*\"21.04\"*)\n      echo \"Ubuntu: $UBUNTU_VERSION, good!\"\n      ;;\n    *\"18.04\"*|*\"16.04\"*)\n      echo \"ODM 2.1 has upgraded to Ubuntu 21.04, but you're on $UBUNTU_VERSION\"\n      echo \"* The last version of ODM that supports Ubuntu 16.04 is v1.0.2.\"\n      echo \"* The last version of ODM that supports Ubuntu 18.04 is v2.0.0.\"\n      echo \"We recommend you to upgrade, or better yet, use docker.\"\n      exit 1\n      ;;\n    *)\n      echo \"You are not on Ubuntu 21.04 (detected: $UBUNTU_VERSION)\"\n      echo \"It might be possible to run ODM on a newer version of Ubuntu, however, you cannot rely on this script.\"\n      exit 1\n      ;;\n  esac\n}\n\nif [[ $2 =~ ^[0-9]+$ ]] ; then\n    processes=$2\nelse\n    processes=$(nproc)\nfi\n\nensure_prereqs() {\n    export DEBIAN_FRONTEND=noninteractive\n\n    if ! command -v sudo &> /dev/null; then\n        echo \"Installing sudo\"\n        $APT_GET update\n        $APT_GET install -y -qq --no-install-recommends sudo\n    else\n        sudo $APT_GET update\n    fi\n\n    if ! command -v lsb_release &> /dev/null; then\n        echo \"Installing lsb_release\"\n        sudo $APT_GET install -y -qq --no-install-recommends lsb-release\n    fi\n\n    if ! command -v pkg-config &> /dev/null; then\n        echo \"Installing pkg-config\"\n        sudo $APT_GET install -y -qq --no-install-recommends pkg-config\n    fi\n\n    echo \"Installing tzdata\"\n    sudo $APT_GET install -y -qq tzdata\n\n    UBUNTU_VERSION=$(lsb_release -r)\n    if [[ \"$UBUNTU_VERSION\" == *\"20.04\"* ]]; then\n        echo \"Enabling PPA for Ubuntu GIS\"\n        sudo $APT_GET install -y -qq --no-install-recommends software-properties-common\n        sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable\n        sudo $APT_GET update\n    fi\n\n    echo \"Installing Python PIP\"\n    sudo $APT_GET install -y -qq --no-install-recommends \\\n        python3-pip \\\n        python3-setuptools\n    sudo pip3 install -U pip\n    sudo pip3 install -U shyaml\n}\n\n# Save all dependencies in snapcraft.yaml to maintain a single source of truth.\n# Maintaining multiple lists will otherwise be painful.\ninstalldepsfromsnapcraft() {\n    section=\"$2\"\n    case \"$1\" in\n        build) key=build-packages; ;;\n        runtime) key=stage-packages; ;;\n        *) key=build-packages; ;; # shouldn't be needed, but it's here just in case\n    esac\n\n    UBUNTU_VERSION=$(lsb_release -r)\n    SNAPCRAFT_FILE=\"snapcraft.yaml\"\n    if [[ \"$UBUNTU_VERSION\" == *\"21.04\"* ]]; then\n        SNAPCRAFT_FILE=\"snapcraft21.yaml\"\n    fi\n\n    cat snap/$SNAPCRAFT_FILE | \\\n        shyaml get-values-0 parts.$section.$key | \\\n        xargs -0 sudo $APT_GET install -y -qq --no-install-recommends\n}\n\ninstallruntimedepsonly() {\n    echo \"Installing runtime dependencies\"\n    ensure_prereqs\n    check_version\n\n    echo \"Installing Required Requisites\"\n    installdepsfromsnapcraft runtime prereqs\n    echo \"Installing OpenCV Dependencies\"\n    installdepsfromsnapcraft runtime opencv\n    echo \"Installing OpenSfM Dependencies\"\n    installdepsfromsnapcraft runtime opensfm\n    echo \"Installing OpenMVS Dependencies\"\n    installdepsfromsnapcraft runtime openmvs\n}\n\ninstallreqs() {\n    cd /code\n    \n    ## Set up library paths\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNPATH/SuperBuild/install/lib\n\n\t## Before installing\n    echo \"Updating the system\"\n    ensure_prereqs\n    check_version\n    \n    echo \"Installing Required Requisites\"\n    installdepsfromsnapcraft build prereqs\n    echo \"Installing OpenCV Dependencies\"\n    installdepsfromsnapcraft build opencv\n    echo \"Installing OpenSfM Dependencies\"\n    installdepsfromsnapcraft build opensfm\n    echo \"Installing OpenMVS Dependencies\"\n    installdepsfromsnapcraft build openmvs\n    \n    set -e\n\n    # edt requires numpy to build\n    pip install --ignore-installed numpy==1.23.1\n    pip install --ignore-installed -r requirements.txt\n    #if [ ! -z \"$GPU_INSTALL\" ]; then\n    #fi\n    set +e\n}\n    \ninstall() {\n    installreqs\n\n    if [ ! -z \"$PORTABLE_INSTALL\" ]; then\n        echo \"Replacing g++ and gcc with our scripts for portability...\"\n        if [ ! -e /usr/bin/gcc_real ]; then\n            sudo mv -v /usr/bin/gcc /usr/bin/gcc_real\n            sudo cp -v ./docker/gcc /usr/bin/gcc\n        fi\n        if [ ! -e /usr/bin/g++_real ]; then\n            sudo mv -v /usr/bin/g++ /usr/bin/g++_real\n            sudo cp -v ./docker/g++ /usr/bin/g++\n        fi\n    fi\n\n    set -eo pipefail\n    \n    echo \"Compiling SuperBuild\"\n    cd ${RUNPATH}/SuperBuild\n    mkdir -p build && cd build\n    cmake .. && make -j$processes\n\n    echo \"Configuration Finished\"\n}\n\nuninstall() {\n    check_version\n\n    echo \"Removing SuperBuild and build directories\"\n    cd ${RUNPATH}/SuperBuild\n    rm -rfv build src download install\n    cd ../\n    rm -rfv build\n}\n\nreinstall() {\n    check_version\n\n    echo \"Reinstalling ODM modules\"\n    uninstall\n    install\n}\n\nclean() {\n    rm -rf \\\n        ${RUNPATH}/SuperBuild/build \\\n        ${RUNPATH}/SuperBuild/download \\\n        ${RUNPATH}/SuperBuild/src\n\n    # find in /code and delete static libraries and intermediate object files\n    find ${RUNPATH} -type f -name \"*.a\" -delete -or -type f -name \"*.o\" -delete\n}\n\nusage() {\n    echo \"Usage:\"\n    echo \"bash configure.sh <install|update|uninstall|installreqs|help> [nproc]\"\n    echo \"Subcommands:\"\n    echo \"  install\"\n    echo \"    Installs all dependencies and modules for running OpenDroneMap\"\n    echo \"  installruntimedepsonly\"\n    echo \"    Installs *only* the runtime libraries (used by docker builds). To build from source, use the 'install' command.\"\n    echo \"  reinstall\"\n    echo \"    Removes SuperBuild and build modules, then re-installs them. Note this does not update OpenDroneMap to the latest version. \"\n    echo \"  uninstall\"\n    echo \"    Removes SuperBuild and build modules. Does not uninstall dependencies\"\n    echo \"  installreqs\"\n    echo \"    Only installs the requirements (does not build SuperBuild)\"\n    echo \"  clean\"\n    echo \"    Cleans the SuperBuild directory by removing temporary files. \"\n    echo \"  help\"\n    echo \"    Displays this message\"\n    echo \"[nproc] is an optional argument that can set the number of processes for the make -j tag. By default it uses $(nproc)\"\n}\n\nif [[ $1 =~ ^(install|installruntimedepsonly|reinstall|uninstall|installreqs|clean)$ ]]; then\n    RUNPATH=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n    \"$1\"\nelse\n    echo \"Invalid instructions.\" >&2\n    usage\n    exit 1\nfi\n"
        },
        {
          "name": "configure_macos.sh",
          "type": "blob",
          "size": 3.15234375,
          "content": "#!/bin/bash\nuname=$(uname)\nif [[ \"$uname\" != \"Darwin\" ]]; then\n    echo \"This script is meant for MacOS only.\"\n    exit 1\nfi\n\nif [[ $2 =~ ^[0-9]+$ ]] ; then\n    processes=$2\nelse\n    processes=$(sysctl -n hw.ncpu)\nfi\n\nensure_prereqs() {\n    export DEBIAN_FRONTEND=noninteractive\n\n    if ! command -v xcodebuild &> /dev/null; then\n        echo \"You need to install Xcode first. Go to the App Store and download Xcode\"\n        exit 1\n    fi\n\n    if ! command -v brew &> /dev/null; then\n        echo \"You need to install Homebrew first. https://brew.sh/\"\n        exit 1\n    fi\n\n}\n\ninstallreqs() {\n    ensure_prereqs\n    \n    brew install cmake gcc@12 python@3.8 tbb@2020 eigen gdal boost cgal libomp\n    brew link tbb@2020\n\n    python3.8 -m pip install virtualenv\n\n    if [ ! -e ${RUNPATH}/venv ]; then\n        python3.8 -m virtualenv venv\n    fi\n\n    source venv/bin/activate\n    pip install --ignore-installed -r requirements.txt\n}\n    \ninstall() {\n    installreqs\n    \n    echo \"Compiling SuperBuild\"\n    cd ${RUNPATH}/SuperBuild\n    mkdir -p build && cd build\n    cmake .. && make -j$processes\n\n    cd /tmp\n    pip download GDAL==3.6.2\n    tar -xpzf GDAL-3.6.2.tar.gz\n    cd GDAL-3.6.2\n    if [ -e /opt/homebrew/bin/gdal-config ]; then\n        python setup.py build_ext --gdal-config /opt/homebrew/bin/gdal-config\n    else\n        python setup.py build_ext --gdal-config /usr/local/bin/gdal-config\n    fi\n    python setup.py build\n    python setup.py install\n    rm -fr /tmp/GDAL-3.6.2 /tmp/GDAL-3.6.2.tar.gz\n\n    cd ${RUNPATH}\n\n    echo \"Configuration Finished\"\n}\n\nuninstall() {\n    echo \"Removing SuperBuild and build directories\"\n    cd ${RUNPATH}/SuperBuild\n    rm -rfv build src download install\n    cd ../\n    rm -rfv build\n}\n\nreinstall() {\n    echo \"Reinstalling ODM modules\"\n    uninstall\n    install\n}\n\nclean() {\n    rm -rf \\\n        ${RUNPATH}/SuperBuild/build \\\n        ${RUNPATH}/SuperBuild/download \\\n        ${RUNPATH}/SuperBuild/src\n\n    # find in /code and delete static libraries and intermediate object files\n    find ${RUNPATH} -type f -name \"*.a\" -delete -or -type f -name \"*.o\" -delete\n}\n\nusage() {\n    echo \"Usage:\"\n    echo \"bash configure.sh <install|update|uninstall|installreqs|help> [nproc]\"\n    echo \"Subcommands:\"\n    echo \"  install\"\n    echo \"    Installs all dependencies and modules for running OpenDroneMap\"\n    echo \"  reinstall\"\n    echo \"    Removes SuperBuild and build modules, then re-installs them. Note this does not update OpenDroneMap to the latest version. \"\n    echo \"  uninstall\"\n    echo \"    Removes SuperBuild and build modules. Does not uninstall dependencies\"\n    echo \"  installreqs\"\n    echo \"    Only installs the requirements (does not build SuperBuild)\"\n    echo \"  clean\"\n    echo \"    Cleans the SuperBuild directory by removing temporary files. \"\n    echo \"  help\"\n    echo \"    Displays this message\"\n    echo \"[nproc] is an optional argument that can set the number of processes for the make -j tag. By default it uses $(nproc)\"\n}\n\nif [[ $1 =~ ^(install|installruntimedepsonly|reinstall|uninstall|installreqs|clean)$ ]]; then\n    RUNPATH=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n    \"$1\"\nelse\n    echo \"Invalid instructions.\" >&2\n    usage\n    exit 1\nfi\n"
        },
        {
          "name": "console.bat",
          "type": "blob",
          "size": 0.52734375,
          "content": "@echo off\n\nsetlocal\ncall win32env.bat\n\nstart \"ODM Console\" cmd /k \"echo  ____________________________ && echo /   ____    _____    __  __  \\ && echo ^|  / __ \\  ^|  __ \\  ^|  \\/  ^| ^| && echo ^| ^| ^|  ^| ^| ^| ^|  ^| ^| ^| \\  / ^| ^| && echo ^| ^| ^|  ^| ^| ^| ^|  ^| ^| ^| ^|\\/^| ^| ^| && echo ^| ^| ^|__^| ^| ^| ^|__^| ^| ^| ^|  ^| ^| ^| && echo ^|  \\____/  ^|_____/  ^|_^|  ^|_^| ^| && echo \\____________________________/ && @echo off && FOR /F %%i in (VERSION) do echo        version: %%i && @echo on && echo. && run --help\n\nendlocal\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpu.Dockerfile",
          "type": "blob",
          "size": 1.857421875,
          "content": "FROM nvidia/cuda:11.2.2-devel-ubuntu20.04 AS builder\n\n# Env variables\nENV DEBIAN_FRONTEND=noninteractive \\\n    PYTHONPATH=\"$PYTHONPATH:/code/SuperBuild/install/lib/python3.9/dist-packages:/code/SuperBuild/install/lib/python3.8/dist-packages:/code/SuperBuild/install/bin/opensfm\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/code/SuperBuild/install/lib\"\n\n# Prepare directories\nWORKDIR /code\n\n# Copy everything\nCOPY . ./\n\n# Run the build\nRUN PORTABLE_INSTALL=YES GPU_INSTALL=YES bash configure.sh install\n\n# Clean Superbuild\nRUN bash configure.sh clean\n\n### END Builder\n\n### Use a second image for the final asset to reduce the number and\n# size of the layers.\nFROM nvidia/cuda:11.2.2-runtime-ubuntu20.04\n#FROM nvidia/cuda:11.2.0-devel-ubuntu20.04\n\n# Env variables\nENV DEBIAN_FRONTEND=noninteractive \\\n    PYTHONPATH=\"$PYTHONPATH:/code/SuperBuild/install/lib/python3.9/dist-packages:/code/SuperBuild/install/lib/python3.8/dist-packages:/code/SuperBuild/install/bin/opensfm\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/code/SuperBuild/install/lib\" \\\n    PDAL_DRIVER_PATH=\"/code/SuperBuild/install/bin\"\n\nWORKDIR /code\n\n# Copy everything we built from the builder\nCOPY --from=builder /code /code\n\n# Copy the Python libraries installed via pip from the builder\nCOPY --from=builder /usr/local /usr/local\n#COPY --from=builder /usr/lib/x86_64-linux-gnu/libavcodec.so.58 /usr/lib/x86_64-linux-gnu/libavcodec.so.58\nRUN apt-get update -y \\\n && apt-get install -y ffmpeg libtbb2\n# Install shared libraries that we depend on via APT, but *not*\n# the -dev packages to save space!\n# Also run a smoke test on ODM and OpenSfM\nRUN bash configure.sh installruntimedepsonly \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n  && bash run.sh --help \\\n  && bash -c \"eval $(python3 /code/opendm/context.py) && python3 -c 'from opensfm import io, pymap'\"\n# Entry point\nENTRYPOINT [\"python3\", \"/code/run.py\"]\n"
        },
        {
          "name": "innosetup.iss",
          "type": "blob",
          "size": 5.83984375,
          "content": "; Script generated by the Inno Setup Script Wizard.\n; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!\n\n#define MyAppName \"ODM\"\n#define VerFile FileOpen(\"VERSION\")\n#define MyAppVersion FileRead(VerFile)\n#expr FileClose(VerFile)\n#undef VerFile\n#define MyAppPublisher \"OpenDroneMap\"\n#define MyAppURL \"https://opendronemap.org\"\n\n[Setup]\n; NOTE: The value of AppId uniquely identifies this application.\n; Do not use the same AppId value in installers for other applications.\n; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)\nAppId={{443998BA-9F8F-4A69-9A96-0D8FBC8C6393}\nAppName={#MyAppName}\nAppVersion={#MyAppVersion}\nAppPublisher={#MyAppPublisher}\nAppPublisherURL={#MyAppURL}\nAppSupportURL={#MyAppURL}\nAppUpdatesURL={#MyAppURL}\nDefaultDirName=C:\\ODM\nDefaultGroupName={#MyAppName}\nAllowNoIcons=yes\nLicenseFile=LICENSE\nOutputDir=dist\nOutputBaseFilename=ODM_Setup_{#MyAppVersion}\nCompression=lzma\nSolidCompression=yes\nArchitecturesAllowed=x64\nArchitecturesInstallIn64BitMode=x64\n#ifndef SKIP_SIGN\nSignTool=signtool\n#endif\nPrivilegesRequired=lowest\nPrivilegesRequiredOverridesAllowed=commandline\nUsePreviousAppDir=no\n;SetupIconFile=setup.ico\n\n[Languages]\nName: \"english\"; MessagesFile: \"compiler:Default.isl\"\n\n[Files]\nSource: \"contrib\\*\"; DestDir: \"{app}\\contrib\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"licenses\\*\"; DestDir: \"{app}\\licenses\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"opendm\\*\"; DestDir: \"{app}\\opendm\"; Excludes: \"__pycache__\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"stages\\*\"; DestDir: \"{app}\\stages\"; Excludes: \"__pycache__\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"SuperBuild\\install\\bin\\*\"; DestDir: \"{app}\\SuperBuild\\install\\bin\"; Excludes: \"__pycache__\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"SuperBuild\\install\\lib\\python3.8\\*\"; DestDir: \"{app}\\SuperBuild\\install\\lib\\python3.8\"; Excludes: \"__pycache__\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"venv\\*\"; DestDir: \"{app}\\venv\"; Excludes: \"__pycache__,pyvenv.cfg\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"python38\\*\"; DestDir: \"{app}\\venv\\Scripts\"; Excludes: \"__pycache__\"; Flags: ignoreversion recursesubdirs createallsubdirs\nSource: \"console.bat\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"VERSION\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"LICENSE\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"run.bat\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"run.py\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"settings.yaml\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"win32env.bat\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"winrun.bat\"; DestDir: \"{app}\"; Flags: ignoreversion\nSource: \"SuperBuild\\download\\vc_redist.x64.exe\"; DestDir: {tmp}; Flags: dontcopy\nSource: \"winpostinstall.bat\"; DestDir: \"{app}\"; Flags: ignoreversion\n\n[Dirs]\nName: \"{commonappdata}\\ODM\"; Permissions: users-modify\n\n[Icons]\nName: {group}\\ODM Console; Filename: \"{app}\\console.bat\"; WorkingDir: \"{app}\"\nName: \"{userdesktop}\\ODM Console\"; Filename: \"{app}\\console.bat\"; WorkingDir: \"{app}\"; Tasks: desktopicon\n\n[Tasks]\nName: \"desktopicon\"; Description: \"{cm:CreateDesktopIcon}\"; GroupDescription: \"{cm:AdditionalIcons}\"; Flags: unchecked\n\n[Run]\nFilename: \"{tmp}\\vc_redist.x64.exe\"; StatusMsg: \"Installing Visual C++ Redistributable Packages for Visual Studio 2019\"; Parameters: \"/quiet\"; Check: VC2019RedistNeedsInstall ; Flags: waituntilterminated\nFilename: \"{app}\\winpostinstall.bat\"; StatusMsg: \"Post Install\"; Flags: waituntilterminated runhidden\nFilename: \"{app}\\console.bat\"; Description: {cm:LaunchProgram,ODM Console}; Flags: nowait postinstall skipifsilent\n\n[Code]\n\nfunction VC2019RedistNeedsInstall: Boolean;\nvar\n  Version: String;\nbegin\n  if RegQueryStringValue(HKEY_LOCAL_MACHINE,\n       'SOFTWARE\\Microsoft\\VisualStudio\\14.0\\VC\\Runtimes\\x64', 'Version', Version) then\n  begin\n    // Is the installed version at least 14.14 ?\n    Log('VC Redist Version check : found ' + Version);\n    Result := (CompareStr(Version, 'v14.14.26429.03')<0);\n  end\n  else\n  begin\n    // Not even an old version installed\n    Result := True;\n  end;\n  if (Result) then\n  begin\n    ExtractTemporaryFile('vc_redist.x64.exe');\n  end;\nend;\n\nfunction GetUninstallString(): String;\nvar\n  sUnInstPath: String;\n  sUnInstallString: String;\nbegin\n  sUnInstPath := ExpandConstant('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\{#emit SetupSetting(\"AppId\")}_is1');\n  sUnInstallString := '';\n  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then\n    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);\n  Result := sUnInstallString;\nend;\n\nfunction IsUpgrade(): Boolean;\nbegin\n  Result := (GetUninstallString() <> '');\nend;\n\nfunction UnInstallOldVersion(): Integer;\nvar\n  sUnInstallString: String;\n  iResultCode: Integer;\nbegin\n{ Return Values: }\n{ 1 - uninstall string is empty }\n{ 2 - error executing the UnInstallString }\n{ 3 - successfully executed the UnInstallString }\n\n  { default return value }\n  Result := 0;\n\n  { get the uninstall string of the old app }\n  sUnInstallString := GetUninstallString();\n  if sUnInstallString <> '' then begin\n    sUnInstallString := RemoveQuotes(sUnInstallString);\n    if Exec(sUnInstallString, '/SILENT /NORESTART /SUPPRESSMSGBOXES','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then\n      Result := 3\n    else\n      Result := 2;\n  end else\n    Result := 1;\nend;\n\nprocedure CurStepChanged(CurStep: TSetupStep);\nbegin\n  if (CurStep=ssInstall) then\n  begin\n    if (IsUpgrade()) then\n    begin\n      UnInstallOldVersion();\n    end;\n  end;\nend;\n\n[UninstallDelete]\nType: filesandordirs; Name: \"{app}\\SuperBuild\"\nType: filesandordirs; Name: \"{app}\\contrib\"\nType: filesandordirs; Name: \"{app}\\licenses\"\nType: filesandordirs; Name: \"{app}\\opendm\"\nType: filesandordirs; Name: \"{app}\\stages\"\nType: filesandordirs; Name: \"{app}\\venv\"\n"
        },
        {
          "name": "licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "odm_docker_readme.txt",
          "type": "blob",
          "size": 0.9462890625,
          "content": "#ODM 0.3.1 under Debian 8.10 jessie  - 2018-02-27 by yjmenezes\n#https://github.com/OpenDroneMap/OpenDroneMap/wiki/Docker\n#git clone https://github.com/OpenDroneMap/OpenDroneMap.git\ngit clone https://github.com/yjmenezes/OpenDroneMap.git\ncd OpenDroneMap\n# list images\ndocker images\n#remove old my_odm_image if necessary\ndocker rmi my_odm_image \n#build a fresh one using instructions from ./Dockerfile\ndocker build -t my_odm_image . \n#run tests with supplied image set. \n#Mapped host directories for output. -v host_path:container_path\ncd tests/test_data/\nsudo rm -r odm_* opensfm\ndocker run -it --rm \\\n    -v $(pwd)/gcp_list.txt:/code/gcp_list.txt \\\n    -v $(pwd)/images:/code/images \\\n    -v $(pwd)/opensfm:/code/opensfm \\\n    -v $(pwd)/odm_meshing:/code/odm_meshing \\\n    -v $(pwd)/odm_georeferencing:/code/odm_georeferencing \\\n    -v $(pwd)/odm_orthophoto:/code/odm_orthophoto \\\n    -v $(pwd)/odm_texturing:/code/odm_texturing \\\n    my_odm_image  --mesh-size 100000\n\n"
        },
        {
          "name": "opendm",
          "type": "tree",
          "content": null
        },
        {
          "name": "portable.Dockerfile",
          "type": "blob",
          "size": 2.6630859375,
          "content": "FROM ubuntu:21.04 AS builder\n\n# Env variables\nENV DEBIAN_FRONTEND=noninteractive \\\n    PYTHONPATH=\"$PYTHONPATH:/code/SuperBuild/install/lib/python3.9/dist-packages:/code/SuperBuild/install/lib/python3.8/dist-packages:/code/SuperBuild/install/bin/opensfm\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/code/SuperBuild/install/lib\"\n\n# Prepare directories\nWORKDIR /code\n\n# Copy everything\nCOPY . ./\n\n# Use old-releases for 21.04\nRUN printf \"deb http://old-releases.ubuntu.com/ubuntu/ hirsute main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-backports main restricted universe multiverse\" > /etc/apt/sources.list\n\n# Run the build\nRUN PORTABLE_INSTALL=YES bash configure.sh install\n\n# Clean Superbuild\nRUN bash configure.sh clean\n\n### END Builder\n\n### Use a second image for the final asset to reduce the number and\n# size of the layers.\nFROM ubuntu:21.04\n\n# Env variables\nENV DEBIAN_FRONTEND=noninteractive \\\n    PYTHONPATH=\"$PYTHONPATH:/code/SuperBuild/install/lib/python3.9/dist-packages:/code/SuperBuild/install/lib/python3.8/dist-packages:/code/SuperBuild/install/bin/opensfm\" \\\n    LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:/code/SuperBuild/install/lib\" \\\n    PDAL_DRIVER_PATH=\"/code/SuperBuild/install/bin\"\n\nWORKDIR /code\n\n# Copy everything we built from the builder\nCOPY --from=builder /code /code\n\n# Copy the Python libraries installed via pip from the builder\nCOPY --from=builder /usr/local /usr/local\n\n# Use old-releases for 21.04\nRUN printf \"deb http://old-releases.ubuntu.com/ubuntu/ hirsute main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates main restricted\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates universe\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-updates multiverse\\ndeb http://old-releases.ubuntu.com/ubuntu/ hirsute-backports main restricted universe multiverse\" > /etc/apt/sources.list\n\n# Install shared libraries that we depend on via APT, but *not*\n# the -dev packages to save space!\nRUN bash configure.sh installruntimedepsonly \\\n  && apt-get clean \\\n  && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n  && bash run.sh --help \\\n  && bash -c \"eval $(python3 /code/opendm/context.py) && python3 -c 'from opensfm import io, pymap'\"\n\n# Entry point\nENTRYPOINT [\"python3\", \"/code/run.py\"]\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.9873046875,
          "content": "appsettings==0.8\nattrs==20.3.0\nbeautifulsoup4==4.9.3\ncloudpickle==1.6.0\nedt==2.0.2\nODMExifRead==3.0.4\nFiona==1.8.17 ; sys_platform == 'linux'\nFiona==1.9.1 ; sys_platform == 'darwin'\nhttps://github.com/OpenDroneMap/windows-deps/raw/main/Fiona-1.8.19-cp38-cp38-win_amd64.whl ; sys_platform == 'win32'\njoblib==1.1.0\nlxml==4.6.1\nmatplotlib==3.3.3\nnetworkx==2.5\nnumpy==1.23.1\nPillow==8.3.2\nvmem==1.0.2\npyodm==1.5.8\npyproj==3.3.1\nPysolar==0.9\npytz==2020.4\nPyYAML==5.1\nrasterio==1.2.3 ; sys_platform == 'linux'\nrasterio==1.3.6 ; sys_platform == 'darwin'\nhttps://github.com/OpenDroneMap/windows-deps/raw/main/rasterio-1.2.3-cp38-cp38-win_amd64.whl ; sys_platform == 'win32'\nhttps://github.com/OpenDroneMap/windows-deps/raw/main/GDAL-3.2.3-cp38-cp38-win_amd64.whl ; sys_platform == 'win32'\nrepoze.lru==0.7\nscikit-learn==1.1.1\nPywavelets==1.3.0\nscikit-image==0.19.3\nscipy==1.8.1\nxmltodict==0.12.0\nfpdf2==2.4.6\nShapely==1.7.1\nonnxruntime==1.12.1\npygltflib==1.15.3\ncodem==0.24.0\ntrimesh==3.17.1\npandas==1.5.2\npiexif==1.1.3\n"
        },
        {
          "name": "run.bat",
          "type": "blob",
          "size": 0.1005859375,
          "content": "@echo off\nrem Bypass \"Terminate Batch Job\" prompt.\n\nsetlocal\n\ncd /d %~dp0\nwinrun.bat %* <NUL\n\nendlocal\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 6.10546875,
          "content": "#!/usr/bin/python3\n\n# Basic check\nimport sys\nif sys.version_info.major < 3:\n    print(\"Ups! ODM needs to run with Python 3. It seems you launched it with Python 2. Try using: python3 run.py ... \")\n    sys.exit(1)\n\nimport os\nfrom opendm import log\nfrom opendm import config\nfrom opendm import system\nfrom opendm import io\nfrom opendm.progress import progressbc\nfrom opendm.utils import get_processing_results_paths, rm_r\nfrom opendm.arghelpers import args_to_dict, save_opts, compare_args, find_rerun_stage\n\nfrom stages.odm_app import ODMApp\n\ndef odm_version():\n    try:\n        with open(\"VERSION\") as f:\n            return f.read().split(\"\\n\")[0].strip()\n    except:\n        return \"?\"\n\nif __name__ == '__main__':\n    args = config.config()\n\n    log.ODM_INFO('Initializing ODM %s - %s' % (odm_version(), system.now()))\n\n    progressbc.set_project_name(args.name)\n    args.project_path = os.path.join(args.project_path, args.name)\n\n    if not io.dir_exists(args.project_path):\n        log.ODM_ERROR('Directory %s does not exist.' % args.name)\n        exit(1)\n\n    opts_json = os.path.join(args.project_path, \"options.json\")\n    auto_rerun_stage, opts_diff = find_rerun_stage(opts_json, args, config.rerun_stages, config.processopts)\n    if auto_rerun_stage is not None and len(auto_rerun_stage) > 0:\n        log.ODM_INFO(\"Rerunning from: %s\" % auto_rerun_stage[0])\n        args.rerun_from = auto_rerun_stage\n\n    # Print args\n    args_dict = args_to_dict(args)\n    log.ODM_INFO('==============')\n    for k in args_dict.keys():\n        log.ODM_INFO('%s: %s%s' % (k, args_dict[k], ' [changed]' if k in opts_diff else ''))\n    log.ODM_INFO('==============')\n    \n\n    # If user asks to rerun everything, delete all of the existing progress directories.\n    if args.rerun_all:\n        log.ODM_INFO(\"Rerun all -- Removing old data\")\n        for d in [os.path.join(args.project_path, p) for p in get_processing_results_paths()] + [\n                  os.path.join(args.project_path, \"odm_meshing\"),\n                  os.path.join(args.project_path, \"opensfm\"),\n                  os.path.join(args.project_path, \"odm_texturing_25d\"),\n                  os.path.join(args.project_path, \"odm_filterpoints\"),\n                  os.path.join(args.project_path, \"submodels\")]:\n            rm_r(d)\n\n    app = ODMApp(args)\n    retcode = app.execute()\n\n    if retcode == 0:\n        save_opts(opts_json, args)\n    \n    # Do not show ASCII art for local submodels runs\n    if retcode == 0 and not \"submodels\" in args.project_path:\n        log.ODM_INFO('MMMMMMMMMMMNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMdo:..---../sNMMMMMMMMMMMMMMMMMMMMMMMMMMNs/..---..:odMMMMMM')\n        log.ODM_INFO('MMMMy-.odNMMMMMNy/`/mMMMMMMMMMMMMMMMMMMMMMMm/`/hNMMMMMNdo.-yMMMM')\n        log.ODM_INFO('MMN/`sMMMMMMMMMNNMm/`yMMMMMMMMMMMMMMMMMMMMy`/mMNNMMMMMMMMNs`/MMM')\n        log.ODM_INFO('MM/ hMMMMMMMMNs.+MMM/ dMMMMMMMMMMMMMMMMMMh +MMM+.sNMMMMMMMMh +MM')\n        log.ODM_INFO('MN /MMMMMMNo/./mMMMMN :MMMMMMMMMMMMMMMMMM: NMMMMm/./oNMMMMMM: NM')\n        log.ODM_INFO('Mm +MMMMMN+ `/MMMMMMM`-MMMMMMMMMMMMMMMMMM-`MMMMMMM:` oNMMMMM+ mM')\n        log.ODM_INFO('MM..NMMNs./mNMMMMMMMy sMMMMMMMMMMMMMMMMMMo hMMMMMMMNm/.sNMMN`-MM')\n        log.ODM_INFO('MMd`:mMNomMMMMMMMMMy`:MMMMMMMNmmmmNMMMMMMN:`hMMMMMMMMMdoNMm-`dMM')\n        log.ODM_INFO('MMMm:.omMMMMMMMMNh/  sdmmho/.`..`-``-/sddh+  /hNMMMMMMMMdo.:mMMM')\n        log.ODM_INFO('MMMMMd+--/osss+:-:/`  ```:- .ym+ hmo``:-`   `+:-:ossso/-:+dMMMMM')\n        log.ODM_INFO('MMMMMMMNmhysosydmNMo   /ds`/NMM+ hMMd..dh.  sMNmdysosyhmNMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMMMs .:-:``hmmN+ yNmds -:.:`-NMMMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMMN.-mNm- //:::. -:://: +mMd`-NMMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMM+ dMMN -MMNNN+ yNNNMN :MMMs sMMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMM`.mmmy /mmmmm/ smmmmm``mmmh :MMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMM``:::- ./////. -:::::` :::: -MMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMM:`mNNd /NNNNN+ hNNNNN .NNNy +MMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMMd`/MMM.`ys+//. -/+oso +MMN.`mMMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMMMMMy /o:- `oyhd/ shys+ `-:s-`hMMMMMMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMNmdhhhdmNMMM`  +d+ sMMM+ hMMN:`hh-  sMMNmdhhhdmNMMMMMMMM')\n        log.ODM_INFO('MMMMMms:::/++//::+ho    .+- /dM+ hNh- +/`   -h+:://++/::/smMMMMM')\n        log.ODM_INFO('MMMN+./hmMMMMMMNds-  ./oso:.``:. :-``.:os+-  -sdNMMMMMMmy:.oNMMM')\n        log.ODM_INFO('MMm-.hMNhNMMMMMMMMNo`/MMMMMNdhyyyyhhdNMMMM+`oNMMMMMMMMNhNMh.-mMM')\n        log.ODM_INFO('MM:`mMMN/-sNNMMMMMMMo yMMMMMMMMMMMMMMMMMMy sMMMMMMMNNs-/NMMm`:MM')\n        log.ODM_INFO('Mm /MMMMMd/.-oMMMMMMN :MMMMMMMMMMMMMMMMMM-`MMMMMMMo-./dMMMMM/ NM')\n        log.ODM_INFO('Mm /MMMMMMm:-`sNMMMMN :MMMMMMMMMMMMMMMMMM-`MMMMMNs`-/NMMMMMM/ NM')\n        log.ODM_INFO('MM:`mMMMMMMMMd/-sMMMo yMMMMMMMMMMMMMMMMMMy sMMMs-/dMMMMMMMMd`:MM')\n        log.ODM_INFO('MMm-.hMMMMMMMMMdhMNo`+MMMMMMMMMMMMMMMMMMMM+`oNMhdMMMMMMMMMh.-mMM')\n        log.ODM_INFO('MMMNo./hmNMMMMMNms--yMMMMMMMMMMMMMMMMMMMMMMy--smNMMMMMNmy/.oNMMM')\n        log.ODM_INFO('MMMMMms:-:/+++/:-+hMMMMMMMMMMMMMMMMMMMMMMMMMNh+-:/+++/:-:smMMMMM')\n        log.ODM_INFO('MMMMMMMMNdhhyhdmMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmdhyhhmNMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMNNNNNMMMMMMNNNNNNMMMMMMMMNNMMMMMMMNNMMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMh/-...-+dMMMm......:+hMMMMs../MMMMMo..sMMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMM/  /yhy-  sMMm  -hhy/  :NMM+   oMMMy   /MMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMy  /MMMMN`  NMm  /MMMMo  +MM: .` yMd``` :MMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMM+  sMMMMM:  hMm  /MMMMd  -MM- /s `h.`d- -MMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMs  +MMMMM.  mMm  /MMMMy  /MM. +M/   yM: `MMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMN-  smNm/  +MMm  :NNdo` .mMM` oMM+/yMM/  MMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMNo-    `:yMMMm      `:sNMMM` sMMMMMMM+  NMMMMMMMMMMM')\n        log.ODM_INFO('MMMMMMMMMMMMMMMNmmNMMMMMMMNmmmmNMMMMMMMNNMMMMMMMMMNNMMMMMMMMMMMM')\n        log.ODM_INFO('ODM app finished - %s' % system.now())\n    else:\n        exit(retcode)"
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 0.2958984375,
          "content": "#!/bin/bash\n\nRUNPATH=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nif [ -e $RUNPATH/venv ]; then\n    source $RUNPATH/venv/bin/activate\nfi\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNPATH/SuperBuild/install/lib\nexport DYLD_LIBRARY_PATH=$RUNPATH/SuperBuild/install/lib\npython3 $RUNPATH/run.py \"$@\"\n\n"
        },
        {
          "name": "settings.yaml",
          "type": "blob",
          "size": 2.328125,
          "content": "---\n# A list of global configuration variables\n# Uncomment lines as needed to edit default settings.\n# Note this only works for settings with default values. Some commands like --rerun <module>\n# or --force-ccd n will have to be set in the command line (if you need to)\n\n# This line is really important to set up properly\n# For docker builds, this should be \"/\" (or docker-compose won't work)\nproject_path: '/' # Example: '/home/user/ODMProjects'\n\n# The rest of the settings will default to the values set unless you uncomment and change them\n#resize_to: 2048\n#start_with: 'resize'\n#end_with: 'odm_orthophoto'\n#rerun_all: False\n#zip_results: False\n#verbose: False\n#time: False\n#use_fixed_camera_params: False\n#use_hybrid_bundle_adjustment: False\n#opensfm_processes: 4 # by default this is set to $(nproc)\n#min_num_features: 4000\n#matcher_threshold: 2.0\n#matcher_ratio: 0.6\n#matcher_neighbors: 8\n#matcher_distance: 0\n#use_pmvs: False # The cmvs/pmvs settings only matter if 'Enabled' is set to True\n#cmvs_maximages: 500\n#pmvs_level: 1\n#pmvs_csize: 2\n#pmvs_threshold: 0.7\n#pmvs_wsize: 7\n#pmvs_min_images: 3\n#pmvs_num_cores: 4 # by default this is set to $(nproc)\n#mesh_size: 100000\n#mesh_octree_depth: 9\n#mesh_samples: 1.0\n#mesh_solver_divide: 9\n#texturing_data_term: 'gmi'\n#texturing_outlier_removal_type: 'gauss_clamping'\n#texturing_skip_visibility_test: False\n#texturing_skip_global_seam_leveling: False\n#texturing_skip_local_seam_leveling: False\n#texturing_skip_hole_filling: False\n#texturing_keep_unseen_faces: False\n#texturing_tone_mapping: 'none'\n#gcp: !!null  # YAML tag for None\n#use_exif: False # Set to True if you have a GCP file (it auto-detects) and want to use EXIF\n#dtm: False      # Use this tag to build a DTM (Digital Terrain Model\n#dsm: False      # Use this tag to build a DSM (Digital Surface Model\n#dem-gapfill-steps: 4\n#dem-resolution: 0.1\n#dem-maxangle:20\n#dem-maxsd: 2.5\n#dem-approximate: False\n#dem-decimation: 1\n#dem-terrain-type: ComplexForest\n#orthophoto_resolution: 5.0 # cm/pixel\n#orthophoto_target_srs: !!null # Currently does nothing\n#orthophoto_no_tiled: False\n#orthophoto_compression: DEFLATE # Options are [JPEG, LZW, PACKBITS, DEFLATE, LZMA, NONE] Don't change unless you know what you are doing\n#orthophoto_bigtiff: IF_SAFER # Options are [YES, NO, IF_NEEDED, IF_SAFER]\n#build_overviews: FALSE\n#pc-classify: none\n#force_gps: False\n#rectify: False\n"
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "stages",
          "type": "tree",
          "content": null
        },
        {
          "name": "start-dev-env.sh",
          "type": "blob",
          "size": 4.2646484375,
          "content": "#!/bin/bash\nset -eo pipefail\n__dirname=$(cd $(dirname \"$0\"); pwd -P)\ncd \"${__dirname}\"\n\nif [ \"$1\" = \"--setup\" ]; then\n    export HOME=/home/$2\n\n    if [ ! -f .setupdevenv ]; then\n        echo \"Recompiling environment... this might take a while.\"\n        bash configure.sh reinstall\n        \n        touch .setupdevenv\n        apt update && apt install -y vim git\n        chown -R $3:$4 /code\n        chown -R $3:$4 /var/www\n    fi\n\n    echo \"Adding $2 to /etc/passwd\"\n    echo \"$2:x:$3:$4::/home/$2:/bin/bash\" >> /etc/passwd\n    echo \"Adding $2 to /etc/group\"\n    echo \"$2:x:$4:\" >> /etc/group\n    echo \"Adding $2 to /etc/shadow\"\n    echo \"$2:x:14871::::::\" >> /etc/shadow\n    echo \"$2   ALL=(ALL)   NOPASSWD:ALL\" >> /etc/sudoers\n    echo \"odm   ALL=(ALL)   NOPASSWD:ALL\" >> /etc/sudoers\n    echo \"echo '' && echo '' && echo '' && echo '###################################' && echo 'ODM Dev Environment Ready. Hack on!' && echo '###################################' && echo '' && cd /code\" > $HOME/.bashrc\n\n    # Install qt creator\n    if hash qtcreator 2>/dev/null; then\n        has_qtcreator=\"YES\"\n    fi\n\n    if [ \"$has_qtcreator\" != \"YES\" ] && [ \"$5\" == \"YES\" ]; then \n        apt install -y libxrender1 gdb qtcreator\n    fi\n\n    # Install liquidprompt\n    if [ ! -e \"$HOME/liquidprompt\" ]; then\n        git clone https://github.com/nojhan/liquidprompt.git --depth 1 $HOME/liquidprompt\n    fi\n    \n    if [ -e \"$HOME/liquidprompt\" ]; then\n        echo \"source $HOME/liquidprompt/liquidprompt\" >> $HOME/.bashrc\n        echo \"export LP_PS1_PREFIX='(odmdev)'\" >> $HOME/.bashrc\n    fi\n\n    # Colors\n    echo \"alias ls='ls --color=auto'\" >> $HOME/.bashrc\n\n    # Python paths\n    echo $(python3 /code/opendm/context.py) >> $HOME/.bashrc\n    \n    # Vim \n    printf \"syntax on\\nset showmatch\\nset ts=4\\nset sts=4\\nset sw=4\\nset autoindent\\nset smartindent\\nset smarttab\\nset expandtab\" > $HOME/.vimrc\n\n    # Misc aliases\n    echo \"alias pdal=/code/SuperBuild/install/bin/pdal\" >> $HOME/.bashrc\n    echo \"alias opensfm=/code/SuperBuild/install/bin/opensfm/bin/opensfm\" >> $HOME/.bashrc\n    \n\n    su -c bash $2\n    exit 0\nfi\n\nplatform=\"Linux\" # Assumed\nuname=$(uname)\ncase $uname in\n\t\"Darwin\")\n\tplatform=\"MacOS\"\n\t;;\n\tMINGW*)\n\tplatform=\"Windows\"\n\t;;\nesac\n\nif [[ $platform != \"Linux\" && $platform != \"MacOS\" ]]; then\n\techo \"This script only works on Linux and MacOS.\"\n    exit 1\nfi\n\nif hash docker 2>/dev/null; then\n    has_docker=\"YES\"\nfi\nif hash nvidia-smi 2>/dev/null; then\n    has_nvidia_smi=\"YES\"\nfi\n\n\nif [ \"$has_docker\" != \"YES\" ]; then\n    echo \"You need to install docker before running this script.\"\n    exit 1\nfi\n\nIMAGE_SET=NO\nif [[ ! -z $IMAGE ]]; then\n    IMAGE_SET=YES\nfi\nexport PORT=\"${PORT:=3000}\"\nexport QTC=\"${QTC:=NO}\"\nexport IMAGE=\"${IMAGE:=opendronemap/nodeodm}\"\nexport GPU=\"${GPU:=NO}\"\n\nif [ -z \"$DATA\" ]; then\n    echo \"Usage: DATA=/path/to/datasets [VARS] $0\"\n    echo\n    echo \"VARS:\"\n    echo \"\tDATA\tPath to directory that contains datasets for testing. The directory will be mounted in /datasets. If you don't have any, simply set it to a folder outside the ODM repository.\"\n    echo \"\tPORT\tPort to expose for NodeODM (default: $PORT)\"\n    echo \"\tIMAGE\tDocker image to use (default: $IMAGE)\"\n    echo \"\tGPU\tEnable GPU support (default: $GPU)\"\n    echo \"\tQTC\tWhen set to YES, installs QT Creator for C++ development (default: $QTC)\"\n    exit 1\nfi\n\n\necho \"Starting development environment...\"\necho \"Datasets path: $DATA\"\necho \"Expose port: $PORT\"\necho \"QT Creator: $QTC\"\necho \"Image: $IMAGE\"\necho \"GPU: $GPU\"\n\nif [ ! -e \"$HOME\"/.odm-dev-home ]; then\n    mkdir -p \"$HOME\"/.odm-dev-home\nfi\n\nUSER_ID=$(id -u)\nGROUP_ID=$(id -g)\nUSER=$(id -un)\nGPU_FLAGS=\"\"\nif [[ \"$GPU\" != \"NO\" ]]; then\n    if [[ \"$IMAGE_SET\" = \"NO\" ]]; then\n        IMAGE=\"$IMAGE:gpu\"\n    fi\n\n    GPU_FLAGS=\"--gpus all\"\n    if [[ \"$has_nvidia_smi\" = \"YES\" ]]; then\n        GPU_FLAGS=\"$GPU_FLAGS --device /dev/nvidia0 --device /dev/nvidia-uvm --device /dev/nvidia-uvm-tools --device /dev/nvidia-modeset --device /dev/nvidiactl\"\n    fi\nfi\n\nxhost + || true\ndocker run -ti --entrypoint bash --name odmdev --user root -v $(pwd):/code -v \"$DATA\":/datasets -p $PORT:3000 $GPU_FLAGS --privileged -e DISPLAY -e LANG=C.UTF-8 -e LC_ALL=C.UTF-8 -v=\"/tmp/.X11-unix:/tmp/.X11-unix:rw\" -v=\"$HOME/.odm-dev-home:/home/$USER\" $IMAGE -c \"/code/start-dev-env.sh --setup $USER $USER_ID $GROUP_ID $QTC\"\nexit 0\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.125,
          "content": "if [ ! -z \"$1\" ]; then\n\tpython3 -m unittest discover tests \"test_$1.py\"\nelse\n\tpython3 -m unittest discover tests \"test_*.py\"\nfi\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vcpkg-requirements.txt",
          "type": "blob",
          "size": 0.52734375,
          "content": "eigen3:x64-windows\nsuitesparse:x64-windows\nlapack:x64-windows\ntbb:x64-windows\nglog:x64-windows\ncurl:x64-windows\nlibxml2:x64-windows\nzlib:x64-windows\nlibpng:x64-windows\nlibjpeg-turbo:x64-windows\ntiff:x64-windows\nflann:x64-windows\nboost-filesystem:x64-windows\nboost-date-time:x64-windows\nboost-iostreams:x64-windows\nboost-foreach:x64-windows\nboost-signals2:x64-windows\nboost-interprocess:x64-windows\nboost-graph:x64-windows\nboost-asio:x64-windows\nboost-program-options:x64-windows\nlibgeotiff:x64-windows\ncgal:x64-windows\nyasm-tool:x86-windows"
        },
        {
          "name": "win32env.bat",
          "type": "blob",
          "size": 1.3759765625,
          "content": "@echo off\n\nrem This file is UTF-8 encoded, so we need to update the current code page while executing it\nfor /f \"tokens=2 delims=:.\" %%a in ('\"%SystemRoot%\\System32\\chcp.com\"') do (\n    set _OLD_CODEPAGE=%%a\n)\nif defined _OLD_CODEPAGE (\n    \"%SystemRoot%\\System32\\chcp.com\" 65001 > nul\n)\n\nset ODMBASE=%~dp0\nset GDALBASE=%ODMBASE%venv\\Lib\\site-packages\\osgeo\nset GDAL_DATA=%GDALBASE%\\data\\gdal\nset GDAL_DRIVER_PATH=%GDALBASE%\\gdalplugins\nset OSFMBASE=%ODMBASE%SuperBuild\\install\\bin\\opensfm\\bin\nset SBBIN=%ODMBASE%SuperBuild\\install\\bin\nset PDAL_DRIVER_PATH=%ODMBASE%SuperBuild\\install\\bin\nset PYTHONPYCACHEPREFIX=%PROGRAMDATA%\\ODM\\pycache\n\nset PATH=%GDALBASE%;%SBBIN%;%OSFMBASE%\nset PROJ_LIB=%GDALBASE%\\data\\proj\n\nset VIRTUAL_ENV=%ODMBASE%venv\nset PYTHONPATH=%VIRTUAL_ENV%\nset PYENVCFG=%VIRTUAL_ENV%\\pyvenv.cfg\n\nif not defined PROMPT set PROMPT=$P$G\n\nif defined _OLD_VIRTUAL_PROMPT set PROMPT=%_OLD_VIRTUAL_PROMPT%\nif defined _OLD_VIRTUAL_PYTHONHOME set PYTHONHOME=%_OLD_VIRTUAL_PYTHONHOME%\n\nset _OLD_VIRTUAL_PROMPT=%PROMPT%\nset PROMPT=(venv) %PROMPT%\n\nif defined PYTHONHOME set _OLD_VIRTUAL_PYTHONHOME=%PYTHONHOME%\nset PYTHONHOME=\n\nif defined _OLD_VIRTUAL_PATH set PATH=%_OLD_VIRTUAL_PATH%\nif not defined _OLD_VIRTUAL_PATH set _OLD_VIRTUAL_PATH=%PATH%\n\nset PATH=%VIRTUAL_ENV%\\Scripts;%PATH%\n\n:END\nif defined _OLD_CODEPAGE (\n    \"%SystemRoot%\\System32\\chcp.com\" %_OLD_CODEPAGE% > nul\n    set _OLD_CODEPAGE=\n)\n"
        },
        {
          "name": "winpostinstall.bat",
          "type": "blob",
          "size": 0.5380859375,
          "content": "set ODMBASE=%~dp0\nset VIRTUAL_ENV=%ODMBASE%venv\nset PYENVCFG=%VIRTUAL_ENV%\\pyvenv.cfg\nset SBBIN=%ODMBASE%SuperBuild\\install\\bin\n\nrem Hot-patching pyvenv.cfg\necho home = %ODMBASE%venv\\Scripts> \"%PYENVCFG%\"\necho include-system-site-packages = false>> \"%PYENVCFG%\"\n\nrem Hot-patching cv2 extension configs\necho BINARIES_PATHS = [r\"%SBBIN%\"] + BINARIES_PATHS> venv\\Lib\\site-packages\\cv2\\config.py\necho PYTHON_EXTENSIONS_PATHS = [r'''%VIRTUAL_ENV%\\lib\\site-packages\\cv2\\python-3.8'''] + PYTHON_EXTENSIONS_PATHS> venv\\Lib\\site-packages\\cv2\\config-3.8.py\n\ncls"
        },
        {
          "name": "winrun.bat",
          "type": "blob",
          "size": 0.1259765625,
          "content": "@echo off\n\nsetlocal\n\ncall win32env.bat\npython -X utf8 \"%ODMBASE%\\run.py\" %*\n\nendlocal\n\nif defined ODM_NONINTERACTIVE (\n    exit\n)"
        }
      ]
    }
  ]
}