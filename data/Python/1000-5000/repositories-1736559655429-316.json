{
  "metadata": {
    "timestamp": 1736559655429,
    "page": 316,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "aaPanel/BaoTa",
      "stars": 4232,
      "defaultBranch": "7.x",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 2.458984375,
          "content": "###############################################################################\n# Set default behavior to automatically normalize line endings.\n###############################################################################\n* text=auto\n\n###############################################################################\n# Set default behavior for command prompt diff.\n#\n# This is need for earlier builds of msysgit that does not have it on by\n# default for csharp files.\n# Note: This is only used by command line\n###############################################################################\n#*.cs     diff=csharp\n\n###############################################################################\n# Set the merge driver for project and solution files\n#\n# Merging from the command prompt will add diff markers to the files if there\n# are conflicts (Merging from VS is not affected by the settings below, in VS\n# the diff markers are never inserted). Diff markers may cause the following \n# file extensions to fail to load in VS. An alternative would be to treat\n# these files as binary and thus will always conflict and require user\n# intervention with every merge. To do so, just uncomment the entries below\n###############################################################################\n#*.sln       merge=binary\n#*.csproj    merge=binary\n#*.vbproj    merge=binary\n#*.vcxproj   merge=binary\n#*.vcproj    merge=binary\n#*.dbproj    merge=binary\n#*.fsproj    merge=binary\n#*.lsproj    merge=binary\n#*.wixproj   merge=binary\n#*.modelproj merge=binary\n#*.sqlproj   merge=binary\n#*.wwaproj   merge=binary\n\n###############################################################################\n# behavior for image files\n#\n# image files are treated as binary by default.\n###############################################################################\n#*.jpg   binary\n#*.png   binary\n#*.gif   binary\n\n###############################################################################\n# diff behavior for common document formats\n# \n# Convert binary document formats to text before diffing them. This feature\n# is only available from the command line. Turn it on by uncommenting the \n# entries below.\n###############################################################################\n#*.doc   diff=astextplain\n#*.DOC   diff=astextplain\n#*.docx  diff=astextplain\n#*.DOCX  diff=astextplain\n#*.dot   diff=astextplain\n#*.DOT   diff=astextplain\n#*.pdf   diff=astextplain\n#*.PDF   diff=astextplain\n#*.rtf   diff=astextplain\n#*.RTF   diff=astextplain\n"
        },
        {
          "name": "BT-Panel",
          "type": "blob",
          "size": 6.681640625,
          "content": "#!/www/server/panel/pyenv/bin/python\n#coding: utf-8\n# +-------------------------------------------------------------------\n# | 宝塔Linux面板 \n# +-------------------------------------------------------------------\n# | Copyright (c) 2015-2099 宝塔软件(http://bt.cn) All rights reserved.\n# +-------------------------------------------------------------------\n# | Author: hwliang <hwl@bt.cn>\n# +-------------------------------------------------------------------\nfrom gevent import monkey\nmonkey.patch_all()\nimport os,sys,ssl\n\n_PATH = '/www/server/panel'\nos.chdir(_PATH)\n\nupgrade_file = 'script/upgrade_flask.sh'\nif os.path.exists(upgrade_file):\n    os.system(\"nohup bash {} &>/dev/null &\".format(upgrade_file))\n    \nif os.path.exists('class/flask'):\n    os.system('rm -rf class/flask')\nif not 'class/' in sys.path:\n    sys.path.insert(0,'class/')\nfrom BTPanel import app,sys,public\nis_debug = os.path.exists('data/debug.pl')\n\n\nif is_debug:\n    import pyinotify,time,logging,re\n    logging.basicConfig(level=logging.DEBUG,format=\"[%(asctime)s][%(levelname)s] - %(message)s\")\n    logger = logging.getLogger()\n\n    class PanelEventHandler(pyinotify.ProcessEvent):\n        _exts = ['py','html','BT-Panel','so']\n        _explude_patts = [\n            re.compile('{}/plugin/.+\\.html'.format(_PATH)),\n            re.compile('{}/(tmp|temp)/.+'.format(_PATH)),\n            re.compile('{}/pyenv/.+'.format(_PATH))\n        ]\n        _lsat_time = 0\n        \n\n        def is_ext(self,filename):\n            fname = os.path.basename(filename)\n            result = fname.split('.')[-1] in self._exts\n            if not result: return False\n            for e in self._explude_patts:\n                if e.match(filename): return False\n            return True\n\n        def panel_reload(self,filename,in_type):\n            stime = time.time()\n            if stime - self._lsat_time < 2:\n                return\n            self._lsat_time = stime\n            logger.debug('检测到文件: {} -> {}'.format(filename,in_type))\n            \n            fname = os.path.basename(filename)\n            if fname in ['BT-Task']:\n                logger.debug('正在后台任务...')\n                if os.path.getsize(filename) < 4096:\n                    public.ExecShell(\"{} {}/BT-Task\".format(public.get_python_bin(),_PATH))\n                else:\n                    public.ExecShell(\"{}/BT-Task\".format(_PATH))\n                logger.debug('后台任务已启动!')\n            else:\n                logger.debug('正在重启面板...')\n                public.ExecShell(\"bash {}/init.sh reload &>/dev/null &\".format(_PATH))\n\n        def process_IN_CREATE(self, event):\n            if not self.is_ext(event.pathname): return\n            self.panel_reload(event.pathname,'[创建]')\n\n        def process_IN_DELETE(self,event):\n            if not self.is_ext(event.pathname): return\n            self.panel_reload(event.pathname,'[删除]')\n        \n        def process_IN_MODIFY(self,event):\n            if not self.is_ext(event.pathname): return\n            self.panel_reload(event.pathname,'[修改]')\n        \n        def process_IN_MOVED_TO(self,event):\n            if not self.is_ext(event.pathname): return\n            self.panel_reload(event.pathname,'[覆盖]')\n\n    def debug_event():\n        logger.debug('以debug模式启动面板')\n        logger.debug('监听端口：0.0.0.0:{}'.format(public.readFile('data/port.pl')))\n\n        event = PanelEventHandler()\n        watchManager = pyinotify.WatchManager()\n        mode = pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY | pyinotify.IN_MOVED_TO\n        watchManager.add_watch(_PATH, mode, auto_add=True, rec=True)\n        notifier = pyinotify.Notifier(watchManager, event)\n        notifier.loop()\n\nif __name__ == '__main__':\n    pid_file = \"{}/logs/panel.pid\".format(_PATH)\n    if os.path.exists(pid_file):\n        public.ExecShell(\"kill -9 {}\".format(public.readFile(pid_file)))\n    pid = os.fork()\n    if pid: sys.exit(0)\n    \n    os.setsid()\n\n    _pid = os.fork()\n    if _pid:\n        public.writeFile(pid_file,str(_pid))\n        sys.exit(0)\n\n    sys.stdout.flush()\n    sys.stderr.flush()\n\n    f = open('data/port.pl')\n    PORT = int(f.read())\n    HOST = '0.0.0.0'\n    if os.path.exists('data/ipv6.pl'):\n        HOST = \"0:0:0:0:0:0:0:0\"\n    f.close()\n    \n    \n    keyfile = 'ssl/privateKey.pem'\n    certfile = 'ssl/certificate.pem'\n    is_ssl = False\n    if os.path.exists('data/ssl.pl') and os.path.exists(keyfile) and os.path.exists(certfile):\n        is_ssl = True\n    \n    if not is_ssl or is_debug:\n        err_f = open('logs/error.log','a+')\n        os.dup2(err_f.fileno(),sys.stderr.fileno())\n        err_f.close()\n\n    import threading\n    os.system(\"nohup {} {}/jobs.py &>/dev/null &\".format(public.get_python_bin(),public.get_class_path()))\n    import task\n    p1 = threading.Thread(target=task.systemTask)\n    p1.start()\n    p2 = threading.Thread(target=task.check502Task)\n    p2.start()\n    p3 = threading.Thread(target=task.update_software_list)\n    p3.start()\n\n    if is_ssl:\n        ssl_context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        ssl_context.load_cert_chain(certfile=certfile,keyfile=keyfile)\n        if hasattr(ssl_context, \"minimum_version\"):\n            ssl_context.minimum_version = ssl.TLSVersion.TLSv1_2\n        else:\n            ssl_context.options = (ssl.OP_NO_SSLv2 | ssl.OP_NO_SSLv3 | ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1)\n        \n        ssl_context.set_ciphers(\"ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE\")\n        is_ssl_verify = os.path.exists('/www/server/panel/data/ssl_verify_data.pl')\n        if is_ssl_verify:\n            crlfile = '/www/server/panel/ssl/crl.pem'\n            rootcafile = '/www/server/panel/ssl/ca.pem'\n            #注销列表\n            # ssl_context.load_verify_locations(crlfile)\n            # ssl_context.verify_flags |= ssl.VERIFY_CRL_CHECK_CHAIN\n            #加载证书\n            ssl_context.load_verify_locations(rootcafile)\n            ssl_context.verify_mode = ssl.CERT_REQUIRED\n            ssl_context.set_default_verify_paths()\n\n    from  gevent.pywsgi import WSGIServer\n    try:\n        import flask_sock\n        if is_ssl:\n            http_server = WSGIServer((HOST, PORT), app,ssl_context = ssl_context)\n        else:\n            http_server = WSGIServer((HOST, PORT), app)\n    except:\n        from geventwebsocket.handler import WebSocketHandler\n        if is_ssl:\n            http_server = WSGIServer((HOST, PORT), app,ssl_context = ssl_context,handler_class=WebSocketHandler)\n        else:\n            http_server = WSGIServer((HOST, PORT), app,handler_class=WebSocketHandler)\n            \n\n    if is_debug:\n        try:\n            dev = threading.Thread(target=debug_event)\n            dev.start()\n        except:\n            pass\n\n    http_server.serve_forever()"
        },
        {
          "name": "BT-Task",
          "type": "blob",
          "size": 0.693359375,
          "content": "#!/usr/bin/python\n#coding: utf-8\n# +-------------------------------------------------------------------\n# | 宝塔Linux面板 \n# +-------------------------------------------------------------------\n# | Copyright (c) 2015-2099 宝塔软件(http://bt.cn) All rights reserved.\n# +-------------------------------------------------------------------\n# | Author: hwliang <hwl@bt.cn>\n# +-------------------------------------------------------------------\n\nimport os\nos.chdir(\"/www/server/panel\")\nos.system(\"cd task && make\")\nos.system(\"chmod 700 /www/server/panel/BT-Task\")\nos.system(\"/www/server/panel/BT-Task &\")\nif os.path.getsize(\"/www/server/panel/BT-Task\") > 4096:\n    os.system(\"rm -rf /www/server/panel/task\")"
        },
        {
          "name": "BTPanel",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.5244140625,
          "content": "##### 宝塔开源许可协议：https://www.bt.cn/kyxy.html\n##### 使用手册：http://docs.bt.cn\n##### 论坛地址：https://www.bt.cn/bbs\n##### 反馈建议： https://www.bt.cn/bbs/forum-43-1.html\n##### Bug提交：https://www.bt.cn/bbs/forum-39-1.html\n\n#### 安装命令：\n##### Centos\n```bash\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n```\n##### Ubuntu/Debian\n```bash\nwget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh && sudo bash install.sh\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report security issues to `1249648969@qq.com`"
        },
        {
          "name": "class",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "init.sh",
          "type": "blob",
          "size": 10.65234375,
          "content": "#!/bin/bash\n# chkconfig: 2345 55 25\n# description: bt Cloud Service\n\n### BEGIN INIT INFO\n# Provides:          bt\n# Required-Start:    $all\n# Required-Stop:     $all\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: starts bt\n# Description:       starts the bt\n### END INIT INFO\npanel_init(){\n        panel_path=/www/server/panel\n        pidfile=$panel_path/logs/panel.pid\n        cd $panel_path\n        env_path=$panel_path/pyenv/bin/python3\n        if [ -f $env_path ];then\n                pythonV=$panel_path/pyenv/bin/python3\n                chmod -R 700 $panel_path/pyenv/bin\n        else\n                pythonV=/usr/bin/python\n        fi\n        reg=\"^#\\!$pythonV\\$\"\n        is_sed=$(cat $panel_path/BT-Panel|head -n 1|grep -E $reg)\n        if [ \"${is_sed}\" = \"\" ];then\n                sed -i \"s@^#!.*@#!$pythonV@\" $panel_path/BT-Panel\n        fi\n        is_sed=$(cat $panel_path/BT-Task|head -n 1|grep -E $reg)\n        if [ \"${is_sed}\" = \"\" ];then\n                sed -i \"s@^#!.*@#!$pythonV@\" $panel_path/BT-Task\n        fi\n        chmod 700 $panel_path/BT-Panel\n        chmod 700 $panel_path/BT-Task\n        log_file=$panel_path/logs/error.log\n        task_log_file=$panel_path/logs/task.log\n        if [ -f $panel_path/data/ssl.pl ];then\n                log_file=/dev/null\n        fi\n\n        port=$(cat $panel_path/data/port.pl)\n}\npanel_init\n\nget_panel_pids(){\n        isStart=$(ps aux|grep -E '(runserver|BT-Panel)'|grep -v grep|awk '{print $2}'|xargs)\n        pids=$isStart\n        arr=$isStart\n}\n\nget_task_pids(){\n        isStart=$(ps aux|grep -E '(task.py|BT-Task)'|grep -v grep|awk '{print $2}'|xargs)\n        pids=$isStart\n        arr=$isStart    \n}\n\npanel_start()\n{\n        isStart=`ps aux|grep 'runserver:app'|grep -v grep|awk '{print $2}'`\n        if [ \"$isStart\" != '' ];then\n                kill -9 $isStart\n        fi\n        get_panel_pids\n        if [ \"$isStart\" == '' ];then\n                rm -f $pidfile\n                panel_port_check\n                echo -e \"Starting Bt-Panel...\\c\"\n                nohup $panel_path/BT-Panel >> $log_file 2>&1 &\n                isStart=\"\"\n                n=0\n                while [[ \"$isStart\" == \"\" ]];\n                do\n                        echo -e \".\\c\"\n                        sleep 0.5\n                        get_panel_pids\n                        let n+=1\n                        if [ $n -gt 8 ];then\n                                break;\n                        fi\n                done\n                if [ \"$isStart\" == '' ];then\n                        echo -e \"\\033[31mfailed\\033[0m\"\n                        echo '------------------------------------------------------'\n                        tail -n 20 $log_file\n                        echo '------------------------------------------------------'\n                        echo -e \"\\033[31mError: BT-Panel service startup failed.\\033[0m\"\n                fi\n                echo -e \"\t\\033[32mdone\\033[0m\"\n        else\n                echo \"Starting Bt-Panel... Bt-Panel (pid $(echo $isStart)) already running\"\n        fi\n        \n        get_task_pids\n        if [ \"$isStart\" == '' ];then\n                echo -e \"Starting Bt-Tasks... \\c\"\n                nohup $panel_path/BT-Task >> $task_log_file 2>&1 &\n                sleep 0.2\n                get_task_pids\n                if [ \"$isStart\" == '' ];then\n                        echo -e \"\\033[31mfailed\\033[0m\"\n                        echo '------------------------------------------------------'\n                        tail -n 20 $task_log_file\n                        echo '------------------------------------------------------'\n                        echo -e \"\\033[31mError: BT-Task service startup failed.\\033[0m\"\n                        return;\n                fi\n                echo -e \"\t\\033[32mdone\\033[0m\"\n        else\n                echo \"Starting Bt-Tasks... Bt-Tasks (pid $isStart) already running\"\n        fi\n}\n\npanel_port_check()\n{\n\tis_process=$(lsof -n -P -i:$port|grep LISTEN|grep -v grep|awk '{print $1}'|sort|uniq|xargs)\n\tfor pn in ${is_process[@]}\n        do\n          if [ \"$pn\" = \"nginx\" ];then\n\t\t\t\t/etc/init.d/nginx restart\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"httpd\" ];then\n\t\t\t\t/etc/init.d/httpd restart\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"mysqld\" ];then\n\t\t\t\t/etc/init.d/mysqld restart\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"superviso\" ];then\n\t\t\t\tpkill -9 superviso\n\t\t\t\tsleep 0.2\n\t\t\t\tsupervisord -c /etc/supervisor/supervisord.conf\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"pure-ftpd\" ];then\n\t\t\t\t/etc/init.d/pure-ftpd restart\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"memcached\" ];then\n\t\t\t\t/etc/init.d/memcached restart\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"sudo\" ];then\n\t\t\t\tif [ -f /etc/init.d/redis ];then\n\t\t\t\t\t/etc/init.d/redis restart\n\t\t\t\tfi\n\t\t  fi\n\n\t\t  if [ \"$pn\" = \"php-fpm\" ];then\n\t\t\t\tphp_v=(52 53 54 55 56 70 71 72 73 74);\n\t\t\t\tfor pv in ${php_v[@]};\n\t\t\t\tdo\n\t\t\t\t\tif [ -f /etc/init.d/php-fpm-${pv} ];then\n\t\t\t\t\t\tif [ -f /www/server/php/%{pv}/sbin/php-fpm ];then\n\t\t\t\t\t\t\tif [ -f /tmp/php-cgi-${pv}.sock ];then\n\t\t\t\t\t\t\t\t/etc/init.d/php-fpm-${pv} start\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\t/etc/init.d/php-fpm-${pv} restart\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t  fi\n        done\n\t\n\tis_ports=$(lsof -n -P -i:$port|grep LISTEN|grep -v grep|awk '{print $2}'|xargs)\n\tif [ \"$is_ports\" != '' ];then\n\t\tkill -9 $is_ports\n\t\tsleep 1\n\tfi\n}\n\npanel_stop()\n{\n        echo -e \"Stopping Bt-Tasks...\\c\";\n        get_task_pids\n        arr=($pids)\n        for p in ${arr[@]}\n        do\n                kill -9 $p\n        done\n        echo -e \"\t\\033[32mdone\\033[0m\"\n\n        echo -e \"Stopping Bt-Panel...\\c\";\n\n        get_panel_pids\n        for p in ${arr[@]}\n        do\n                kill -9 $p &>/dev/null\n        done\n        \n        if [ -f $pidfile ];then\n                rm -f $pidfile\n        fi\n        echo -e \"\t\\033[32mdone\\033[0m\"\n}\n\npanel_status()\n{\n        port=$(cat $panel_path/data/port.pl)\n        get_panel_pids\n        if [ \"$isStart\" != '' ];then\n                echo -e \"\\033[32mBt-Panel (pid $(echo $isStart)) already running\\033[0m\"\n        else\n                echo -e \"\\033[31mBt-Panel not running\\033[0m\"\n        fi\n        \n        get_task_pids\n        if [ \"$isStart\" != '' ];then\n                echo -e \"\\033[32mBt-Task (pid $isStart) already running\\033[0m\"\n        else\n                echo -e \"\\033[31mBt-Task not running\\033[0m\"\n        fi\n}\n\npanel_reload()\n{\n\tisStart=$(ps aux|grep 'runserver:app'|grep -v grep|awk '{print $2}')\n        if [ \"$isStart\" != '' ];then\n\t\tkill -9 $isStart\n\t\tsleep 0.5\n\tfi\n\tget_panel_pids\n        if [ \"$isStart\" != '' ];then\n    \t\n\t    get_panel_pids\n\tfor p in ${arr[@]}\n        do\n                kill -9 $p\n        done\n\t\trm -f $pidfile\n\t\tpanel_port_check\n\t\techo -e \"Reload Bt-Panel.\\c\";\n                nohup $panel_path/BT-Panel >> $log_file 2>&1 &\n\t\tisStart=\"\"\n\t\tn=0\n\t\twhile [[ \"$isStart\" == \"\" ]];\n\t\tdo\n\t\t\techo -e \".\\c\"\n\t\t\tsleep 0.5\n\t\t\tget_panel_pids\n\t\t\tlet n+=1\n\t\t\tif [ $n -gt 8 ];then\n\t\t\t\tbreak;\n\t\t\tfi\n\t\tdone\n        if [ \"$isStart\" == '' ];then\n                echo -e \"\\033[31mfailed\\033[0m\"\n                echo '------------------------------------------------------'\n                tail -n 20 $log_file\n                echo '------------------------------------------------------'\n                echo -e \"\\033[31mError: BT-Panel service startup failed.\\033[0m\"\n                return;\n        fi\n        echo -e \"\t\\033[32mdone\\033[0m\"\n    else\n        echo -e \"\\033[31mBt-Panel not running\\033[0m\"\n        panel_start\n    fi\n}\n\ninstall_used()\n{\n        if [ -f $panel_path/aliyun.pl ];then\n                password=$(cat /dev/urandom | head -n 16 | md5sum | head -c 12)\n                username=$($pythonV $panel_path/tools.py panel $password)\n                echo \"$password\" > $panel_path/default.pl\n                rm -f $panel_path/aliyun.pl\n        fi\n\n        if [ -f $panel_path/php_mysql_auto.pl ];then\n                bash $panel_path/script/mysql_auto.sh &> /dev/null\n                bash $panel_path/script/php_auto.sh &> /dev/null\n                rm -f $panel_path/php_mysql_auto.pl\n        fi\n\n        pip_file=/www/server/panel/pyenv/bin/pip3\n        python_file=/www/server/panel/pyenv/bin/python3\n        if [ -f $pip_file ];then\n                is_rep=$(ls -l /usr/bin/btpip|grep pip3.)\n                if [ \"${is_rep}\" != \"\" ];then\n                        rm -f /usr/bin/btpip /usr/bin/btpython\n                        ln -sf $pip_file /usr/bin/btpip\n                        ln -sf $python_file /usr/bin/btpython\n                fi\n        fi\n        \n}\n\nerror_logs()\n{\n\ttail -n 100 $log_file\n}\n\n\ncase \"$1\" in\n        'start')\n                install_used\n                panel_start\n                ;;\n        'stop')\n                panel_stop\n                ;;\n        'restart')\n                panel_stop\n\t\tsleep 1\n                panel_start\n                ;;\n        'reload')\n                panel_reload\n                ;;\n        'status')\n                panel_status\n                ;;\n        'logs')\n        \t\terror_logs\n        \t\t;;\n        'panel')\n        \t\t$pythonV $panel_path/tools.py cli $2\n        \t\t;;\n        'default')\n                port=$(cat $panel_path/data/port.pl)\n                password=$(cat $panel_path/default.pl)\n                if [ -f $panel_path/data/domain.conf ];then\n                \taddress=$(cat $panel_path/data/domain.conf)\n                fi\n                auth_path=/login\n                if [ -f $panel_path/data/admin_path.pl ];then\n                \tauth_path=$(cat $panel_path/data/admin_path.pl)\n                fi\n                if [ \"$address\" = \"\" ];then\n                \taddress=$(curl -sS --connect-timeout 10 -m 60 https://www.bt.cn/Api/getIpAddress)\n                fi\n                pool=http\n                if [ -f $panel_path/data/ssl.pl ];then\n                        pool=https\n                fi\n                if [ \"$auth_path\" == \"/\" ];then\n                        auth_path=/login\n                fi\n\n                echo -e \"==================================================================\"\n                echo -e \"\\033[32mBT-Panel default info!\\033[0m\"\n                echo -e \"==================================================================\"\n                echo  \"Bt-Panel-URL: $pool://$address:$port$auth_path\"\n                echo -e `$pythonV $panel_path/tools.py username`\n                echo -e \"password: $password\"\n                echo -e \"\\033[33mWarning:\\033[0m\"\n                echo -e \"\\033[33mIf you cannot access the panel, \\033[0m\"\n                echo -e \"\\033[33mrelease the following port (8888|888|80|443|20|21) in the security group\\033[0m\"\n                echo -e \"\\033[33m注意：初始密码仅在首次登录面板前能正确获取，其它时间请通过 bt 5 命令修改密码\\033[0m\"\n                echo -e \"==================================================================\"\n                ;;\n        *)\n                $pythonV $panel_path/tools.py cli $1\n        ;;\nesac\n\n"
        },
        {
          "name": "install",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 25.0283203125,
          "content": "宝塔面板软件许可使用协议\n\n在使用宝塔面板软件之前，请务必仔细阅读本协议，特别是免除或者限制责任的条款、管辖与法律适用的条款，以及关于开通或者使用第三方提供的某项服务的条款。宝塔面板软件的所有或任意部分一经复制、安装或使用，即表示您接受本协议所规定的全部条款及条件。\n您可与广东堡塔安全技术有限公司（下称“堡塔公司”）直接订立另一书面协议，以补充或取代本协议的全部或任何部分。宝塔面板软件只在遵守本协议各项条款的情况下供许可使用，并且不得出售。\n\n堡塔公司将不时对本协议予以更新，更新内容一经正式发布即成为本协议不可分割的组成部分。在更新内容发布后继续使用本软件及堡塔公司服务即表示您同意新的条款；如果您不同意新的条款，您应当卸载本软件及停止使用堡塔公司服务、关闭您的堡塔公司帐户，如果您是父母或监护人，请帮助您的未成年子女或者被监护人关闭他或她的宝塔面板帐户。\n\n如果您未满18周岁，请在法定监护⼈的陪同下阅读本协议及其他上述协议，并特别注意未成年⼈使用条款。\n\n1 软件许可声明\n\n1.1 许可授权：我们只是为您提供使用此软件的许可，并非将此软件所有权出售给您；在您同意所有条款之后，我们将通过许可证授予您拥有在特定设备中使用该软件的权利。许可期限到期或者终止后，在更新许可证之前，您可能无法使用宝塔面板软件。经堡塔公司及宝塔面板同意的方式，您可变更安装和使用宝塔面板的设备。\n\n1.2 许可证类型\n\n(1) 基础版：在许可期限内，堡塔公司免费授予您一项非排他性和不可转让的许可，以使您能够在您拥有或控制的一台或多台支持设备上安装和使用宝塔面板。基础版包含宝塔面板核心功能。\n\n(2) 专业版：您通过在堡塔公司官网（https://www.bt.cn）线上购买或与堡塔公司线下磋商购买宝塔面板专业版。除免费授予您一项非排他性和不可转让的基础版许可外，堡塔公司另外授予您一项非排他性和不可转让的专业版插件许可，作为基础版功能性的延伸，您所支付的费用即用于购买专业版插件许可（详见官网内容）。您仅可在许可期限内，根据购买的授权数量在设备上安装和使用专业版。您需要通过连接互联网以激活，更新和验证许可证，如果宝塔面板无法定期验证，该软件可能会在未另行通知的情况下无法继续使用；您同意宝塔面板可随时改变专业版中包含的软件类型（例如相关组件、版本、平台、语言，增加或删除部分插件等等），且不因此类更改对您承担任何责任。\n\n(3) 企业版：您通过在堡塔公司官网线上购买或与堡塔公司线下磋商购买宝塔面板企业版。除免费授予您一项非排他性和不可转让的基础版许可外，堡塔公司另外授予您一项非排他性和不可转让的企业版插件许可，作为基础版功能性的延伸，您所支付的费用用于购买企业版插件许可（详见官网内容）。您仅可在许可期限内，根据购买的授权数量在设备上安装和使用企业版。您需要通过连接互联网以激活，更新和验证许可证，如果宝塔面板无法定期验证，该软件可能会在未另行通知的情况下无法继续使用；您同意宝塔面板可随时改变企业版中包含的软件类型（例如相关组件、版本、平台、语言，增加或删除部分插件等等），且不因此类更改对您承担任何责任。\n\n(4) 即使您被授予的是基础版或专业版许可证，您仍可通过向堡塔公司购买的方式就宝塔面板提供的部分插件获单独的使用许可授权。该部分授权同样适用本协议条款。\n\n2 宝塔面板的获取、安装、更新和卸载\n\n2.1 您可直接从官网或者获得堡塔公司授权的第三方处获取宝塔面板。如果您从未经堡塔公司授权的第三方处获取本软件或与本软件名称相同的安装程序，堡塔公司无法保证该软件能够正常使用，并对因此给您造成的损失不承担责任。\n\n2.2 堡塔公司为不同的支持设备开发了本软件的不同版本，您应当根据你设备的实际情况选择或购买合适的版本。\n\n2.3下载本软件后，您需要按照本软件提示的步骤正确安装。因您在安装过程中未按照提示步骤操作不当造成的损失，堡塔公司不承担责任。\n\n2.4 为了完善用户体验，增强宝塔面板软件的功能及性能，宝塔面板将会不断努力开发新的功能，并为您不定期提供宝塔面板软件更新。\n\n2.5 宝塔面板软件可能会⾃动检测并提醒您安装更新，通过使用宝塔面板软件，您同意堡塔公司有权对宝塔面板软件进行更新，或者对软件的部分功能进行改变或限制。\n\n2.6 宝塔面板软件新版本发布后，旧版本的软件可能无法使用。宝塔面板不保证旧版宝塔面板软件继续可用及相应地为您服务，请您随时核对并下载最新版本。\n\n2.7 如您不再需要使用宝塔面板，可以自行卸载本软件。您已获取的仍在有效期限内的专业版或企业版许可证，不因卸载本软件而发生中止或终止，您为购买许可证所支付的费用，不因卸载本软件而退还。\n\n3 宝塔账号\n\n3.1 堡塔账号是指堡塔官网注册的账号，使用堡塔产品需要注册绑定绑定账号才可以正常使用。\n\n3.2 您须以真实身份注册开通堡塔账号，并保证所提供的资料信息真实、完整、有效，且保证堡塔公司可以通过您所填写的联系方式与您取得联系。注册堡塔账号后，如果所提供的资料信息有所变更，应当及时更新。因资料信息没有及时变更导致的损失，堡塔公司不承担任何责任。\n\n3.3 您所提供的信息适用于双方往来联系、书面文件送达及争议解决时法律文书送达。因您提供的联系方式和联系信息错误而无法直接送达的自交邮后第7日视为送达。\n\n3.4 您应对您的账号负责，只有您本人可以使用您的堡塔账号，该账号不可转让、不可赠与、不可继承。\n\n3.5 您应妥善保管并正确、安全地使用账号及密码，对使用该账号及密码进行的一切操作负完全的责任。如您发现有他人冒用或盗用您的账户及密码或任何其他未经合法授权之情形时，应立即以有效方式通知堡塔公司，要求堡塔公司暂停相关服务。同时，堡塔公司应对您的请求做出及时响应，您应理解在此之前，堡塔公司对您的账号中已执行的指令及所导致的您的损失不承担任何责任。对于未尽上述保管义务导致账号密码遗失、账号被盗等情形而给您权利造成损害的，您应自行承担一切由此产生的损失。堡塔公司应积极地采取技术与管理等合理措施保障用户账号的安全、有效。\n\n4 数据信息保护\n\n4.1\t堡塔公司致力于保护您的信息安全，并为此采取合理的预防措施。除法律法规规定的情形和您的许可外，堡塔公司不会向第三方公开、透露您的个人信息。\n\n4.2\t在本软件安装和使用过程中，本软件将向堡塔公司发送本软件及安装本软件的支持设备的信息，该信息包括本软件的版本、语言、支持设备的IP地址、硬件配置信息。堡塔公司通常使用该信息以确认您使用本软件的最新版本、允许您下载和安装适用于该支持设备的更新版本，而不会作为用于识别您的个人信息；如果您是注册用户，堡塔公司将使用该信息以确保支持设备与堡塔公司服务的交互，您可通过本软件内的设置限制或在特定情形下限制该交互技术。\n\n4.3\t为确保使用符合行业标准内容加密技术来保护您的支持设备与堡塔公司之间的信息传输，堡塔公司可能将使用数字证书。为保护上述传输的安全性，您无法禁用该数字证书。通过使用本软件，您特此同意分享该信息及该交互技术。\n\n4.4\t您在使用本软件或使用堡塔公司服务的过程中，可能需要填写一些必要的信息。若国家法律法规或政策有特殊规定的，您需要填写真实的身份信息。若您填写的信息不完整，则无法使用本软件或堡塔公司服务，或者在使用过程中受到限制。\n\n4.5\t为创建和支持您的账户、向您提供方便又个性化的服务和活动、以及改进本软件的功能和可用性，堡塔公司有权收集您某些必要的信息并在上述目的范围内使用和处理。\n\n4.6\t在法律允许的范围内，堡塔公司可能收集、使用、处理非识别性数据，以改善本软件或堡塔公司服务，更好地满足您的需求。\n\n4.7 宝塔面板在使用过程中不会收集、传输、存储其安装载体中的数据，您需要自行负责您的数据安全与备份。您理解并同意宝塔面板无法提供找回丢失数据等服务。\n\n4.8\t您理解并同意本软件的开发是一个持续开发过程，您及其他用户因此而受益。为促进本软件的持续开发，您可以向堡塔公司提供关于使用、改进或应用本软件的建议、文件、材料或其他数据（简称“贡献”）。您充分了解并同意堡塔公司可能在本软件和/或相关产品或服务上使用贡献。除非堡塔公司和您针对任何贡献签署书面文件或本协议另有约定，您授予堡塔公司不可撤销的、永久的、非排他的、世界范围内的、免费的许可，以在开发、示范、展示、许可、修改、复制、分发和出售本软件和/或相关产品和服务时披露、使用和纳入。同时请确保您的反馈不包含您或者第三方的机密和著作权信息。\n\n4.9\t您可阅读堡塔公司网站上发布的《隐私声明》进一步了解堡塔公司会如何收集、使用、存储和保护您的个人信息及您享有何种权利。该《隐私政策》可能会不时更新，在上述更新发布后继续使用本软件或堡塔公司服务即表示您同意新的条款。\n\n4.10 如果您未满18周岁，您在使用本软件前须取得法定监护人的书面同意。\n\n5 用户使用规范\n\n5.1\t除非法律允许、本协议另有规定或堡塔公司书面许可外，您不得从事下列行为：\n(1)\t出租、出借、分许可、出售、复制、修改或传播本软件，或基于宝塔面板创造衍生作品，或促使或允许他人作上述行为；\n(2)\t修改或删除本软件及其副本或任何第三方软件上关于宝塔面板或第三方的版权声明、商标或其他知识产权声明；\n(3)\t以任何形式或为任何目的，直接或间接对本软件进行修改、翻译、反向工程、反向汇编、反向编译、转换为其他编程语言或者以其他方式尝试发现本软件的源代码或由本软件产生的内在数据文件，或对本协议项下获取的任何软件或固件进行任何类似操作；\n(4)\t对本软件或者本软件运行过程中释放到任何终端内存中的数据、软件运行过程中客户端与服务器端的交互数据以及本软件运行所必需的系统数据，予以复制、修改、增加、删除、挂接运行或创作任何衍生作品，包括但不限于使用插件、外挂或非经宝塔面板授权的第三方工具/服务接入本软件和相关系统；\n(5)\t通过修改或伪造本软件运行中的指令、数据，增加、删减、变动本软件的功能或运行效果，或者将用于上述用途的软件、方法进行运营或向公众传播，无论这些行为是否为商业目的；\n(6)\t通过非宝塔面板开发、授权的第三方软件、插件、外挂、系统，登录或使用本软件及宝塔面板服务，或制作、发布、传播上述工具；\n(7)\t自行、授权他人或利用第三方软件对本软件及其组件、模块、数据等进行干扰；\n(8)\t任何危害本软件或利用本软件危害计算机网络安全的行为；\n(9)\t以意图规避宝塔面板服务条款、违反相应法律法规的方式或超出正常使用范围而使用本软件；\n(10) 通过本软件或宝塔面板服务向他人发送、诱导或煽动他人发送大量信息； \n(12) 其他未经宝塔面板明示授权、许可或违反本协议的行为。\n\n5.2\t在使用本软件和/或宝塔面板服务时，您不得从事下列行为，或为下列行为提供帮助：\n(1)\t上传、储存、发布、传送、传播或使用违反国家法律、危害国家安全统一、社会稳定、公序良俗、社会公德以及侮辱、诽谤、淫秽、暴力的内容；\n(2)\t上传、储存、发布、传送、传播或使用侵害他人名誉权、肖像权、知识产权、商业秘密等合法权利的内容；\n(3)\t上传、储存、发布、传送、传播或使用涉及他人隐私、个人信息或资料的内容；\n(4)\t发布、传送、传播骚扰、广告信息及垃圾信息；\n(5)\t虚构事实、隐瞒真相以误导、欺骗他人；\n(6)\t发布、传送、传播广告信息及垃圾信息；或\n(7)\t从事其他违反法律法规、政策及公序良俗、社会公德等的行为。\n\n5.3\t您在使用卖方产品时不侵犯任何第三方合法权益，不使用本软件上传、储存、发布、传送、传播或使用包含以下内容的信息：\n(1)\t侵害他人名誉权、肖像权、知识产权、商业秘密等合法权利；\n(2)\t侵犯他人隐私、个人信息、个人资料；或\n(3)\t其他侵犯其他用户或第三方合法权益。\n\n5.4\t您应妥善保管登录和使用本软件和服务的信息及密码，不向他人透露，并对您未妥善保管账户信息及密码所受到的损失承担全部责任。\n\n6 用户行为责任\n\n6.1\t您充分了解并同意，您必须为自己使用本软件及堡塔公司服务的一切行为负责，包括您利用本软件或堡塔公司服务储存、发布、传送、传播的任何内容以及由此产生的任何后果。\n\n6.2\t如堡塔公司发现或收到他人举报您有违反本协议或相关法律法规的行为，我们将采取包括但不限于终止授权许可、停止技术支持、向有关部门移交线索、追究法律责任等措施。您同意并确认这是堡塔公司为维护健康良好的网络环境而采取的必要措施，若由于堡塔公司按照前述约定采取措施而对您产生影响或任何损失的，您同意不追究堡塔公司的任何责任或不向堡塔公司主张任何权利。\n\n6.3\t您将就任何第三方因您违反上述条款而遭受的所有损害承担责任，同时如堡塔公司因您的违反遭受损失，您也应当赔偿堡塔公司的相关损失。\n\n7 第三方软件及技术\n\n7.1 宝塔面板软件可能会使用第三方软件或技术（例如开源的开发框架及公共插件等等），这种使用已获得合法授权。\n\n7.2 宝塔面板为您提供第三方应用购买和下载服务。第三方应用由第三方开发者提供，使用时可能会向您请求权限。您在购买、下载和使用第三方提供的应用之前，建议您详细了解该应用可能会获取的权限和第三方的隐私声明和政策等。\n\n7.3您同意使用第三方应用时，您将与应用开发者订立合同（下称“第三方协议”）。堡塔公司不是您与第三方应用提供商订立的第三方协议中的一方，因此我们建议您仔细阅读第三方协议及第三方隐私政策。堡塔公司无权也没有义务控制或审查第三方应用提供商所提供产品或服务的内容，对于您在使用此类第三方产品与服务时遭受的权益侵犯，堡塔公司不承担任何责任。堡塔公司不对任何第三方产品或服务的安全性、准确性、稳定性或其他不确定的风险负责，也不为第三方在宝塔面板提供的任何内容、广告、产品、服务或其他信息作出任何形式的背书。若您不遵守第三方协议和/或第三方隐私政策，第三方可能对您采取法律行动。\n\n7.4 通过宝塔面板购买、下载和使用第三方应用与服务导致的任何争议由第三方服务提供商解决，如因第三方服务的中断、暂停、数据泄露或其他问题引起的争议及损害，堡塔公司对此不承担任何责任。堡塔公司不为第三方软件或技术提供任何客户支持。若您需要支持，需联系第三方服务提供商。\n\n7.5 各第三方服务提供商为其产品、服务、内容及所作保证承担全部责任。若出现争议，以第三方服务提供商的产品或服务保证或第三方协议的约定为准。\n\n7.6 您理解并同意，堡塔公司将不定期更新宝塔面板，增强宝塔面板的功能及性能，无法保证您所购买和使用的第三方应用适用于宝塔面板所有版本。如出现第三方应用与宝塔面板不兼容的情形，您需要联系第三方开发者协商解决。\n\n7.7 您也许需要接受第三方开发者的协议和收费才能下载和使用他们的应用。您特此确认并知悉，开发者可以保留调整应用价格的权利，并在您购买相应的应用之前适时告知您。新的价格生效后，您需要接受新调整的价格才能够继续使用应用。如果您不同意应用调整后的价格，您有权停止使用本服务。您将需要根据任何适用的相关法律要求纳税。\n\n8 免责申明\n\n8.1 您明确认可并同意，您使用宝塔面板软件需自行承担风险，并承担有关质量满意度、性能、准确性及结果等方面的全部风险。您进一步理解并同意，根据目前行业技术发展水平，尚无法保证完全不发生故障或系统没有漏洞及程序不会出错，并可能因此产生人身或财产损害的风险，您在使用宝塔面板时应采取必要的措施保障安全性，包括但不限于安全防护措施、数据备份措施等。\n\n8.2 堡塔公司向您保证，堡塔公司尽合理商业努力保障卖方产品的正常运行及实质上符合本软件适用的行业标准。\n\n8.3 您理解并同意，如堡塔公司和/或其许可方违反上述保证，我们的责任仅限于为您修补或更换本软件。堡塔公司可能会要求您向堡塔公司或其授权方返还或证明本软件的损坏。\n\n8.4 除本协议第8.3条明确约定外，在法律允许的最大范围内，堡塔公司明确否认任何形式的所有明示或暗示的保证及条件，包括但不限于，适销性、针对特定用途的适用性和无侵权的默示保证和条件。\n\n8.5 安装宝塔面板软件可能影响第三方软件、应用软件或第三方服务的可用性，您在安装、使用宝塔面板的全过程中应自行采取必要的措施以避免对您造成损失，包括但不限于使用环境测试、数据备份等。\n\n8.6 堡塔公司不保证本软件满足您的所有需求、本软件的运行不间断、安全或无错误、或本软件的所有错误均可被纠正。并且，堡塔公司不对因下列情况引起的缺陷或错误负责：\n(1)\t堡塔公司在官网公告之系统停机维护期间；\n(2) 除堡塔公司以外的一方修改、错误使用或损坏本软件；\n(3)\t您未能安装堡塔公司提供的所有的漏洞修补程序或其他缺陷修复程序；\n(4)\t未根据本协议及本软件指示或要求正确使用本软件；\n(5)\t第三方个人电脑、设备、网络或软件的缺陷或错误，或用户操作失误；\n(6)\t因网络服务特性而特有的情况，包括但不限于基础网络运营商故障、计算机或互联网技术缺陷、互联网覆盖范围限制、计算机病毒、黑客攻击、网络设备或技术提供商的服务延迟或障碍等。\n\n8.7 堡塔公司不对任何非堡塔公司的产品或服务作出保证及承担责任，包括但不限于第三方软件或硬件、互联网连接或计算机网络。\n\n8.8 互联网传输无法保证100%的安全，您确认具有互联网安全知识，能够自行承担信息传输过程中可能产生的风险。\n\n8.9 堡塔公司不因不可抗力造成的本软件或堡塔公司服务的中断或故障承担责任，不可抗力包括但不限于自然灾害、战争行为、恐怖活动、骚乱、革命、罢工等社会因素、立法变化、政策修改、政府行为及命令、电信部门技术调整等不能预见、不能避免并不能克服的客观情况。\n\n8.10 在任何情况下，堡塔公司不因您使用本软件或堡塔公司服务所引起的、或在任何方面与本软件或堡塔公司服务有关的任何数据或个人或商业信息的丢失或损坏、任何意外的、间接的、特殊的、惩罚性的、或附带的损害或请求（包括但不限于业务利润损失、业务中断、信息泄露、数据丢失、金钱损失、或取得替代产品及服务的费用）承担责任。\n\n8.11 堡塔公司向您免费提供软件许可，作为免费使用本软件的对价，除本协议另有约定外，堡塔公司对本协议项下所有事项不承担责任，不论是合同、侵权或其他责任。本责任限制条款在本协议第8.3条软件保证救济不能完全弥补您的损失时仍然适用。\n\n8.12 您理解并同意，为了向您提供有效的服务，本软件会利用你终端设备的处理器和带宽等资源。本软件使用过程中可能产生数据流量费用，该费用由您承担。\n\n9 知识产权声明\n\n9.1 堡塔公司拥有对堡塔公司官网以及本软件的所有权利或合法授权，包括但不限于著作权、商标权、专利权、商业秘密等知识产权，与本软件相关的所有信息内容（包括但不限于文本、图片、音频、视频、图表、标识、版面设计、排版方式、有关数据或电子文档等）及所有衍生作品（包括所有副本和相关资料）均受中国法律法规和相应国际条约的保护。\n\n9.2 在堡塔公司协议有效期内，一方（“接受方”）必须对自另一方（“披露方”）所获知的任何非公开信息（包括但不限于技术信息、商业秘密、堡塔公司协议内容）（统称“保密信息”）严格保密，在未事先取得披露方书面同意的情况下，不得向任何第三方披露。接收方同意应仅为履行本协议之目的使用保密信息，并采取必要合理的措施保护披露方的保密信息，接受方保证其因为工作需要接触保密信息的员工将对保密信息严格保密，且其已与其前述员工签订了相应的保密协议。\n\n10 开源许可\n\n10.1 堡塔公司支持行业技术学习、交流与发展，您被允许以自用为目的，对堡塔公司向您公开的源代码实施以下行为：\n(1) 任意修改源代码；\n(2) 创造衍生作品。\n\n10.2 您在实施本协议第10.1条的行为时，应当遵守以下要求：\n(1) 不得对堡塔公司未公开的源代码实施该行为；\n(2) 除以自用为目的外，不得以其他目的或形式实施该行为；\n(3) 不得修改或删除任何关于宝塔面板或第三方的版权声明、商标或其他知识产权声明；\n(4) 不得以任何目的发表、发行、出租、出借、许可、出售、或传播您修改后的源代码或衍生产品，或变相实施前述行为；\n(5) 不得以任何方式破坏堡塔公司的授权许可机制（包括但不限于收集源代码后经营与堡塔公司同类型、同性质服务等）\n(6) 不得利用堡塔面板、修改后的源代码或所创造的衍生作品实施任何违反法律法规，有悖公序良俗，危害网络安全，或者侵犯他人信息、人身或财产安全的行为。\n\n10.3 您应当对所修改的源代码或所创造的衍生作品的合法性、安全性、准确性、稳定性或其他不确定的风险负责。对于您所修改的源代码或所创造的衍生作品造成您自身或任何第三方损失的，堡塔公司及宝塔面板不承担任何责任，造成堡塔公司损失的，您应当向堡塔公司进行赔偿。\n\n11 未成年人使用条款\n\n11.1 若您未满18周岁，则为未成年人，您应当在监护人的监护、指导下阅读本协议以及使用堡塔面板及相关服务。\n\n11.2 监护人应对未成年人使用宝塔面板及服务时加以监督和引导。\n\n12 法律管辖\n\n12.1 本许可协议受中华人民共和国法律管辖并按该等法律解释，不适用法律冲突规则。如果具有合法管辖权的法院因故裁定本许可协议的任何条款或任何部分不可强制执行，则本许可的其余条款或部分仍具有完整法律效力和作用。\n\n12.2 双方发生争议时，所有因本协议引起的或与本协议有关的任何争议，双方应首先通过友好协商解决；如协商未果，任何一方可提交堡塔公司住所地有管辖权的人民法院解决。\n\n13 其他\n\n13.1 您使用宝塔面板软件即视为您已阅读并同意受本协议的约束。宝塔面板有权在必要时修改本协议条款。您可以在宝塔面板软件的最新版本中查阅相关协议条款。本协议条款变更后，如果您继续使用宝塔面板软件，即视为您已接受修改后的协议。如果您不接受修改后的协议，应当停⽌使用宝塔面板软件。"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.841796875,
          "content": "bcrypt==3.2.0\ncertifi==2021.10.8\ncffi==1.15.0\nchardet==4.0.0\ncharset-normalizer==2.0.12\nclick==8.0.4\nconfigparser==5.2.0\ncos-python-sdk-v5==1.9.15\ncrcmod==1.7\ncryptography==36.0.1\nCython==0.29.28\nDeprecated==1.2.13\ndicttoxml==1.7.4\ndnspython==2.2.1\ndocker==5.0.3\nFlask==2.0.3\nflask-sock==0.5.1\nh11==0.13.0\nidna==3.3\nIPy==1.1\nitsdangerous==2.1.1\nJinja2==3.0.3\nMarkupSafe==2.1.0\noauthlib==3.2.0\npackaging==21.3\nparamiko==2.10.2\nPillow==9.0.1\npsutil==5.9.0\npyasn1==0.4.8\npycparser==2.21\npycryptodome==3.14.1\npyinotify==0.9.6\nPyMySQL==1.0.2\nPyNaCl==1.5.0\npyOpenSSL==22.0.0\npyparsing==3.0.7\nqiniu==7.5.0\nqrcode==7.3.1\nredis==4.1.4\nrequests==2.27.1\nrequests-file==1.5.1\nrequests-oauthlib==1.3.1\nrsa==4.8\nsimple-websocket==0.5.1\nsix==1.16.0\nsoupsieve==2.3.1\nupyun==2.5.5\nurllib3==1.26.8\nwebsocket-client==1.3.1\nWerkzeug==2.0.3\nwrapt==1.14.0\nwsproto==1.1.0\ngevent\npyyaml"
        },
        {
          "name": "rewrite",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "task.py",
          "type": "blob",
          "size": 11.9189453125,
          "content": "#!/bin/python\n#coding: utf-8\n# +-------------------------------------------------------------------\n# | 宝塔Linux面板\n# +-------------------------------------------------------------------\n# | Copyright (c) 2015-2016 宝塔软件(http://bt.cn) All rights reserved.\n# +-------------------------------------------------------------------\n# | Author: hwliang <hwl@bt.cn>\n# +-------------------------------------------------------------------\n\n# ------------------------------\n# 计划任务\n# ------------------------------\nimport sys\nimport os\nimport logging\nfrom json import dumps, loads\nfrom psutil import Process, pids, cpu_count\nos.environ['BT_TASK'] = '1'\nsys.path.insert(0, \"/www/server/panel/class/\")\nimport time\nimport public\nimport db\nlogPath = '/tmp/panelExec.log'\nisTask = '/tmp/panelTask.pl'\npython_bin = None\n\ndef get_python_bin():\n    global python_bin\n    if python_bin: return python_bin\n    bin_file = '/www/server/panel/pyenv/bin/python'\n    bin_file2 = '/usr/bin/python'\n    if os.path.exists(bin_file):\n        python_bin = bin_file\n        return bin_file\n    python_bin = bin_file2\n    return bin_file2\n\ndef WriteFile(filename,s_body,mode='w+'):\n    \"\"\"\n    写入文件内容\n    @filename 文件名\n    @s_body 欲写入的内容\n    return bool 若文件不存在则尝试自动创建\n    \"\"\"\n    try:\n        fp = open(filename, mode)\n        fp.write(s_body)\n        fp.close()\n        return True\n    except:\n        try:\n            fp = open(filename, mode,encoding=\"utf-8\")\n            fp.write(s_body)\n            fp.close()\n            return True\n        except:\n            return False\n\ndef ReadFile(filename, mode='r'):\n    \"\"\"\n    读取文件内容\n    @filename 文件名\n    return string(bin) 若文件不存在，则返回None\n    \"\"\"\n    if not os.path.exists(filename):\n        return False\n    f_body = None\n    with open(filename, mode) as fp:\n        f_body = fp.read()\n    return f_body\n\n# 写输出日志\ndef WriteLogs(logMsg):\n    try:\n        global logPath\n        with open(logPath, 'w+') as fp:\n            fp.write(logMsg)\n            fp.close()\n    except:\n        pass\n\n\n# 日报监控任务\ndef systemTask():\n    process_object = process_task()\n    while 1:\n        time.sleep(60)\n        process_object.get_monitor_list()\n        # 日报数据收集\n        if os.path.exists(\"/www/server/panel/data/start_daily.pl\"):\n            try:\n                from panelDaily import panelDaily\n                pd = panelDaily()\n                t_now = time.localtime()\n                yesterday  = time.localtime(time.mktime((\n                    t_now.tm_year, t_now.tm_mon, t_now.tm_mday-1, \n                    0,0,0,0,0,0\n                )))\n                yes_time_key = pd.get_time_key(yesterday)\n                con = ReadFile(\"/www/server/panel/data/store_app_usage.pl\")\n                store = False\n                if con:\n                    if con != str(yes_time_key):\n                        store = True\n                else:\n                    store = True\n\n                if store:\n                    date_str = str(yes_time_key)\n                    daily_data = pd.get_daily_data_local(date_str)\n                    if \"status\" in daily_data.keys():\n                        if daily_data[\"status\"]:\n                            score = daily_data[\"score\"]\n                            if public.M(\"system\").dbfile(\"system\").table(\"daily\").where(\"time_key=?\", (yes_time_key,)).count() == 0:\n                                public.M(\"system\").dbfile(\"system\").table(\"daily\").add(\"time_key,evaluate,addtime\", (yes_time_key, score, time.time()))\n                            pd.store_app_usage(yes_time_key)\n                            WriteFile(\"/www/server/panel/data/store_app_usage.pl\", str(yes_time_key), \"w\")\n                        pd.check_server()\n            except Exception as e:\n                logging.info(\"存储应用空间信息错误:\"+str(e)) \n\n# 检查502错误\ndef check502():\n    try:\n        phpversions = public.get_php_versions()\n        for version in phpversions:\n            if version in ['52','5.2']: continue\n            php_path = '/www/server/php/' + version + '/sbin/php-fpm'\n            if not os.path.exists(php_path):\n                continue\n            if checkPHPVersion(version):\n                continue\n            if startPHPVersion(version):\n                public.WriteLog('PHP守护程序', '检测到PHP-' + version + '处理异常,已自动修复!', not_web=True)\n    except Exception as ex:\n        logging.info(ex)\n\n# 处理指定PHP版本\ndef startPHPVersion(version):\n    try:\n        fpm = '/etc/init.d/php-fpm-'+version\n        php_path = '/www/server/php/' + version + '/sbin/php-fpm'\n        if not os.path.exists(php_path):\n            if os.path.exists(fpm):\n                os.remove(fpm)\n            return False\n\n        # 尝试重载服务\n        os.system(fpm + ' start')\n        os.system(fpm + ' reload')\n        if checkPHPVersion(version):\n            return True\n\n        # 尝试重启服务\n        cgi = '/tmp/php-cgi-'+version + '.sock'\n        pid = '/www/server/php/'+version+'/var/run/php-fpm.pid'\n        os.system('pkill -9 php-fpm-'+version)\n        time.sleep(0.5)\n        if os.path.exists(cgi):\n            os.remove(cgi)\n        if os.path.exists(pid):\n            os.remove(pid)\n        os.system(fpm + ' start')\n        if checkPHPVersion(version):\n            return True\n        # 检查是否正确启动\n        if os.path.exists(cgi):\n            return True\n        return False\n    except Exception as ex:\n        logging.info(ex)\n        return True\n\n\n# 检查指定PHP版本\ndef checkPHPVersion(version):\n    try:\n        cgi_file = '/tmp/php-cgi-{}.sock'.format(version)\n        if os.path.exists(cgi_file):\n            init_file = '/etc/init.d/php-fpm-{}'.format(version)\n            if os.path.exists(init_file):\n                init_body = public.ReadFile(init_file)\n                if not init_body: return True\n            uri = \"/phpfpm_\"+version+\"_status?json\"\n            result = public.request_php(version, uri, '')\n            loads(result)\n        return True\n    except:\n        logging.info(\"检测到PHP-{}无法访问\".format(version))\n        return False\n\n\n# 502错误检查线程\ndef check502Task():\n    try:\n        while True:\n            public.auto_backup_panel()\n            check502()\n            time.sleep(600)\n    except Exception as ex:\n        logging.info(ex)\n        time.sleep(600)\n        check502Task()\n\n\n#5个小时更新一次更新软件列表\ndef update_software_list():\n    while True:\n        try:\n            import panelPlugin\n            panelPlugin.panelPlugin().get_cloud_list_status(None)\n            time.sleep(18000)\n        except:\n            time.sleep(1800)\n            update_software_list()\n\nclass process_task:\n\n    __pids = []\n    __last_times = {}\n    __last_dates = {}\n    __cpu_count = cpu_count()\n    __sql = None\n\n    def __init__(self):\n        self.__sql = db.Sql().dbfile('system')\n        csql = '''CREATE TABLE IF NOT EXISTS `process_tops` (\n  `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n  `process_list` REAL,\n  `addtime` INTEGER\n)'''\n        self.__sql.execute(csql, ())\n        csql = '''CREATE TABLE IF NOT EXISTS `process_high_percent` (\n  `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n  `name` REAL,\n  `pid`  REAL,\n  `cmdline` REAL,\n  `cpu_percent` FLOAT,\n  `memory` FLOAT,\n  `cpu_time_total` INTEGER,\n  `addtime` INTEGER\n)'''\n        self.__sql.execute(csql, ())\n        self.__sql.close()\n\n    def get_pids(self):\n        '''\n            @name 获取pid列表\n            @author hwliang<2021-09-04>\n            @return None\n        '''\n        self.__pids = pids()\n\n    def get_cpu_percent(self,pid,cpu_time_total):\n        '''\n            @name 获取pid的cpu占用率\n            @author hwliang<2021-09-04>\n            @param pid 进程id\n            @param cpu_time_total 进程总cpu时间\n            @return 占用cpu百分比\n        '''\n        stime = time.time()\n        if pid in self.__last_times:\n            old_time = self.__last_times[pid]\n        else:\n            self.__last_times[pid] = cpu_time_total\n            self.__last_dates[pid] = stime\n            return 0\n\n        cpu_percent = round(100.00 * float(cpu_time_total - old_time) / (stime - self.__last_dates[pid]) / self.__cpu_count,2)\n        return cpu_percent\n\n    def read_file(self,filename):\n        f = open(filename,'rb')\n        result = f.read()\n        f.close()\n        return result.decode().replace(\"\\u0000\",\" \").strip()\n\n    def get_monitor_list(self):\n        '''\n            @name 获取监控列表\n            @author hwliang<2021-09-04>\n            @return list\n        '''\n        self.get_pids()\n        monitor_list = {}\n        cpu_src_limit = 30\n        cpu_pre_limit = 80 / self.__cpu_count\n        \n        addtime = int(time.time())\n        for pid in self.__pids:\n            try:\n                process_proc_comm = '/proc/{}/comm'.format(pid)\n                process_proc_cmdline = '/proc/{}/cmdline'.format(pid)\n                if pid < 100: continue\n                p = Process(pid)\n\n                cpu_times = p.cpu_times()\n                cpu_time_total = int(sum(cpu_times))\n                pname = self.read_file(process_proc_comm)\n                cmdline = self.read_file(process_proc_cmdline)\n                rss = p.memory_info().rss\n                cpu_percent = self.get_cpu_percent(pid,cpu_time_total)\n                pid = str(pid)\n                ppid = str(p.ppid())\n                if ppid in monitor_list:\n                    monitor_list[ppid]['pid'].append(pid)\n                    monitor_list[ppid]['cpu_time_total'] += cpu_time_total\n                    monitor_list[ppid]['memory'] += rss\n                    monitor_list[ppid]['cpu_percent'] += cpu_percent\n                else:\n                    if pname == 'php-fpm':\n                        if cmdline.find('/www/server/php/') != -1:\n                            pname += '(' + '.'.join(cmdline.split('/')[-3]) + ')'\n                    elif pname in ['mysqld','mysqld_safe']:\n                        pname = 'mysqld,mysql_safe(MySQL)'\n                    elif pname in ['BT-Task','BT-Panel']:\n                        continue\n                    \n                    monitor_list[pid] = {\n                        'pid':[pid],\n                        'name':pname,\n                        'cmdline': cmdline,\n                        'memory': rss, \n                        'cpu_time_total': cpu_time_total,\n                        'cpu_percent': cpu_percent\n                    }\n\n            except:\n                continue\n\n        process_info_list = []\n        cpu_high_list = []\n        for i in monitor_list:\n            pid_count = len(monitor_list[i]['pid'])\n            monitor_list[i]['pid'] = ','.join(monitor_list[i]['pid'])\n            process_info_list.append(monitor_list[i])\n\n            # 记录CPU占用超过 cpu_pre_limit 的进程\n            if pid_count > 1:\n                if monitor_list[i]['cpu_percent'] >= cpu_src_limit:\n                    cpu_high_list.append(monitor_list[i])\n            else:\n                if monitor_list[i]['cpu_percent'] >= cpu_pre_limit:\n                    cpu_high_list.append(monitor_list[i])\n            \n\n        self.__sql = db.Sql().dbfile('system')        \n        process_info_list = sorted(process_info_list,key=lambda x:x['cpu_time_total'],reverse=True)\n        self.__sql.table('process_tops').insert({\"process_list\": dumps(process_info_list[:10]),'addtime':addtime})\n\n        if cpu_high_list:\n            for cpu_high in cpu_high_list:\n                self.__sql.table('process_high_percent').addAll(\n                    'pid,name,cmdline,memory,cpu_time_total,cpu_percent,addtime',\n                    (\n                        cpu_high['pid'],\n                        cpu_high['name'],\n                        cpu_high['cmdline'],\n                        cpu_high['memory'],\n                        cpu_high['cpu_time_total'],\n                        cpu_high['cpu_percent'],\n                        addtime\n                    )\n                )\n            self.__sql.commit()\n\n        self.__sql.close()\n\n"
        },
        {
          "name": "task",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.py",
          "type": "blob",
          "size": 27.4541015625,
          "content": "#coding: utf-8\n# +-------------------------------------------------------------------\n# | 宝塔Linux面板\n# +-------------------------------------------------------------------\n# | Copyright (c) 2015-2099 宝塔软件(http://bt.cn) All rights reserved.\n# +-------------------------------------------------------------------\n# | Author: hwliang <hwl@bt.cn>\n# +-------------------------------------------------------------------\n\n#------------------------------\n# 工具箱\n#------------------------------\nimport sys,os\npanelPath = '/www/server/panel/'\nos.chdir(panelPath)\nsys.path.insert(0,panelPath + \"class/\")\nimport public,time,json\nif sys.version_info[0] == 3: raw_input = input\n\n#设置MySQL密码\ndef set_mysql_root(password):\n    import db,os\n    sql = db.Sql()\n    \n    root_mysql = '''#!/bin/bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\npwd=$1\n/etc/init.d/mysqld stop\nmysqld_safe --skip-grant-tables&\necho '正在修改密码...';\necho 'The set password...';\nsleep 6\nm_version=$(cat /www/server/mysql/version.pl|grep -E \"(5.1.|5.5.|5.6.|10.0|10.1)\")\nm2_version=$(cat /www/server/mysql/version.pl|grep -E \"(10.5.|10.4.)\")\nif [ \"$m_version\" != \"\" ];then\n    mysql -uroot -e \"UPDATE mysql.user SET password=PASSWORD('${pwd}') WHERE user='root'\";\nelif [ \"$m2_version\" != \"\" ];then\n    mysql -uroot -e \"FLUSH PRIVILEGES;alter user 'root'@'localhost' identified by '${pwd}';alter user 'root'@'127.0.0.1' identified by '${pwd}';FLUSH PRIVILEGES;\";\nelse\n    m_version=$(cat /www/server/mysql/version.pl|grep -E \"(5.7.|8.0.)\")\n    if [ \"$m_version\" != \"\" ];then\n        mysql -uroot -e \"FLUSH PRIVILEGES;update mysql.user set authentication_string='' where user='root' and (host='127.0.0.1' or host='localhost');alter user 'root'@'localhost' identified by '${pwd}';alter user 'root'@'127.0.0.1' identified by '${pwd}';FLUSH PRIVILEGES;\";\n    else\n        mysql -uroot -e \"update mysql.user set authentication_string=password('${pwd}') where user='root';\"\n    fi\nfi\nmysql -uroot -e \"FLUSH PRIVILEGES\";\npkill -9 mysqld_safe\npkill -9 mysqld\nsleep 2\n/etc/init.d/mysqld start\n\necho '==========================================='\necho \"root密码成功修改为: ${pwd}\"\necho \"The root password set ${pwd}  successuful\"'''\n    \n    public.writeFile('mysql_root.sh',root_mysql)\n    os.system(\"/bin/bash mysql_root.sh \" + password)\n    os.system(\"rm -f mysql_root.sh\")\n    \n    result = sql.table('config').where('id=?',(1,)).setField('mysql_root',password)\n    print(result)\n\n#设置面板密码\ndef set_panel_pwd(password,ncli = False):\n    import db\n    sql = db.Sql()\n    result = sql.table('users').where('id=?',(1,)).setField('password',public.password_salt(public.md5(password),uid=1))\n    username = sql.table('users').where('id=?',(1,)).getField('username')\n    if ncli:\n        print(\"|-用户名: \" + username)\n        print(\"|-新密码: \" + password)\n    else:\n        print(username)\n\n#设置数据库目录\ndef set_mysql_dir(path):\n    mysql_dir = '''#!/bin/bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\noldDir=`cat /etc/my.cnf |grep 'datadir'|awk '{print $3}'`\nnewDir=$1\nmkdir $newDir\nif [ ! -d \"${newDir}\" ];then\n    echo 'The specified storage path does not exist!'\n    exit\nfi\necho \"Stopping MySQL service...\"\n/etc/init.d/mysqld stop\n\necho \"Copying files, please wait...\"\n\\cp -r -a $oldDir/* $newDir\nchown -R mysql.mysql $newDir\nsed -i \"s#$oldDir#$newDir#\" /etc/my.cnf\n\necho \"Starting MySQL service...\"\n/etc/init.d/mysqld start\necho ''\necho 'Successful'\necho '---------------------------------------------------------------------'\necho \"Has changed the MySQL storage directory to: $newDir\"\necho '---------------------------------------------------------------------'\n'''\n\n    public.writeFile('mysql_dir.sh',mysql_dir)\n    os.system(\"/bin/bash mysql_dir.sh \" + path)\n    os.system(\"rm -f mysql_dir.sh\")\n\n\n#封装\ndef PackagePanel():\n    print('========================================================')\n    print('|-正在清理日志信息...'),\n    public.M('logs').where('id!=?',(0,)).delete()\n    print('\\t\\t\\033[1;32m[done]\\033[0m')\n    print('|-正在清理任务历史...'),\n    public.M('tasks').where('id!=?',(0,)).delete()\n    print('\\t\\t\\033[1;32m[done]\\033[0m')\n    print('|-正在清理网络监控记录...'),\n    public.M('network').dbfile('system').where('id!=?',(0,)).delete()\n    print('\\t\\033[1;32m[done]\\033[0m')\n    print('|-正在清理CPU监控记录...'),\n    public.M('cpuio').dbfile('system').where('id!=?',(0,)).delete()\n    print('\\t\\033[1;32m[done]\\033[0m')\n    print('|-正在清理磁盘监控记录...'),\n    public.M('diskio').dbfile('system').where('id!=?',(0,)).delete()\n    print('\\t\\033[1;32m[done]\\033[0m')\n    print('|-正在清理IP信息...'),\n    os.system('rm -f /www/server/panel/data/iplist.txt')\n    os.system('rm -f /www/server/panel/data/address.pl')\n    os.system('rm -f /www/server/panel/data/*.login')\n    os.system('rm -f /www/server/panel/data/domain.conf')\n    os.system('rm -f /www/server/panel/data/user*')\n    os.system('rm -f /www/server/panel/data/admin_path.pl')\n    os.system('rm -f /root/.ssh/*')\n\n    print('\\t\\033[1;32m[done]\\033[0m')\n    print('|-正在清理系统使用痕迹...'),\n    command = '''cat /dev/null > /var/log/boot.log\ncat /dev/null > /var/log/btmp\ncat /dev/null > /var/log/cron\ncat /dev/null > /var/log/dmesg\ncat /dev/null > /var/log/firewalld\ncat /dev/null > /var/log/grubby\ncat /dev/null > /var/log/lastlog\ncat /dev/null > /var/log/mail.info\ncat /dev/null > /var/log/maillog\ncat /dev/null > /var/log/messages\ncat /dev/null > /var/log/secure\ncat /dev/null > /var/log/spooler\ncat /dev/null > /var/log/syslog\ncat /dev/null > /var/log/tallylog\ncat /dev/null > /var/log/wpa_supplicant.log\ncat /dev/null > /var/log/wtmp\ncat /dev/null > /var/log/yum.log\nhistory -c\n'''\n    os.system(command)\n    print('\\t\\033[1;32m[done]\\033[0m')\n    if sys.version_info[0] == 3:\n        a_input = input('|-是否在首次开机自动按机器配置优化PHP/MySQL配置?(y/n default: y): ')\n    else:\n        a_input = raw_input('|-是否在首次开机自动按机器配置优化PHP/MySQL配置?(y/n default: y): ')\n    if not a_input: a_input = 'y'\n    print(a_input)\n    if not a_input in ['Y','y','yes','YES']:\n        public.ExecShell(\"rm -f /www/server/panel/php_mysql_auto.pl\")\n    else:\n        public.writeFile('/www/server/panel/php_mysql_auto.pl',\"True\")\n    \n    print(\"|-请选择用户初始化方式：\")\n    print(\"=\"*50)\n    print(\" (1) 访问面板页面时显示初始化页面\")\n    print(\" (2) 首次启动时自动随机生成新帐号密码\")\n    print(\"=\"*50)\n    p_input = input(\"请选择初始化方式(default: 1): \")\n    print(p_input)\n    if p_input in [2,'2']:\n        public.writeFile('/www/server/panel/aliyun.pl',\"True\")\n        s_file = '/www/server/panel/install.pl'\n        if os.path.exists(s_file): os.remove(s_file)\n        public.M('config').where(\"id=?\",('1',)).setField('status',1)\n    else:\n        public.writeFile('/www/server/panel/install.pl',\"True\")\n        public.M('config').where(\"id=?\",('1',)).setField('status',0)\n    port = public.readFile('data/port.pl').strip()\n    print('========================================================')\n    print('\\033[1;32m|-面板封装成功,请不要再登陆面板做任何其它操作!\\033[0m')\n    if not p_input in [2,'2']:\n        print('\\033[1;41m|-面板初始化地址: http://{SERVERIP}:'+port+'/install\\033[0m')\n    else:\n        print('\\033[1;41m|-获取初始帐号密码命令:bt default \\033[0m')\n        print('\\033[1;41m|-注意：仅在首次登录面板前能正确获取初始帐号密码 \\033[0m')\n\n#清空正在执行的任务\ndef CloseTask():\n    ncount = public.M('tasks').where('status!=?',(1,)).delete()\n    os.system(\"kill `ps -ef |grep 'python panelSafe.pyc'|grep -v grep|grep -v panelExec|awk '{print $2}'`\")\n    os.system(\"kill `ps -ef |grep 'install_soft.sh'|grep -v grep|grep -v panelExec|awk '{print $2}'`\")\n    os.system('/etc/init.d/bt restart')\n    print(\"成功清理 \" + int(ncount) + \" 个任务!\")\n    \n#自签证书\ndef CreateSSL():\n    import OpenSSL\n    key = OpenSSL.crypto.PKey()\n    key.generate_key( OpenSSL.crypto.TYPE_RSA, 2048 )\n    cert = OpenSSL.crypto.X509()\n    cert.set_serial_number(0)\n    cert.get_subject().CN = public.GetLocalIp()\n    cert.set_issuer(cert.get_subject())\n    cert.gmtime_adj_notBefore( 0 )\n    cert.gmtime_adj_notAfter( 10*365*24*60*60 )\n    cert.set_pubkey( key )\n    cert.sign( key, 'md5' )\n    cert_ca = OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)\n    private_key = OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, key)\n    if len(cert_ca) > 100 and len(private_key) > 100:\n        public.writeFile('ssl/certificate.pem',cert_ca)\n        public.writeFile('ssl/privateKey.pem',private_key)\n        print('success')\n        return\n    print('error')\n\n#创建文件\ndef CreateFiles(path,num):\n    if not os.path.exists(path): os.system('mkdir -p ' + path)\n    import time;\n    for i in range(num):\n        filename = path + '/' + str(time.time()) + '__' + str(i)\n        open(path,'w+').close()\n\n#计算文件数量\ndef GetFilesCount(path):\n    i=0\n    for name in os.listdir(path): i += 1\n    return i\n\n\n#清理系统垃圾\ndef ClearSystem():\n    count = total = 0\n    tmp_total,tmp_count = ClearMail()\n    count += tmp_count\n    total += tmp_total\n    print('=======================================================================')\n    tmp_total,tmp_count = ClearSession()\n    count += tmp_count\n    total += tmp_total\n    print('=======================================================================')\n    tmp_total,tmp_count = ClearOther()\n    count += tmp_count\n    total += tmp_total\n    print('=======================================================================')\n    print('\\033[1;32m|-系统垃圾清理完成，共删除['+str(count)+']个文件,释放磁盘空间['+ToSize(total)+']\\033[0m')\n\n#清理邮件日志\ndef ClearMail():\n    rpath = '/var/spool'\n    total = count = 0\n    import shutil\n    con = ['cron','anacron','mail']\n    for d in os.listdir(rpath):\n        if d in con: continue\n        dpath = rpath + '/' + d\n        print('|-正在清理' + dpath + ' ...')\n        time.sleep(0.2)\n        num = size = 0\n        for n in os.listdir(dpath):\n            filename = dpath + '/' + n\n            fsize = os.path.getsize(filename)\n            print('|---['+ToSize(fsize)+'] del ' + filename),\n            size += fsize\n            if os.path.isdir(filename):\n                shutil.rmtree(filename)\n            else:\n                os.remove(filename)\n            print('\\t\\033[1;32m[OK]\\033[0m')\n            num += 1\n        print('|-已清理['+dpath+'],删除['+str(num)+']个文件,共释放磁盘空间['+ToSize(size)+']')\n        total += size\n        count += num\n    print('=======================================================================')\n    print('|-已完成spool的清理，删除['+str(count)+']个文件,共释放磁盘空间['+ToSize(total)+']')\n    return total,count\n\n#清理php_session文件\ndef ClearSession():\n    spath = '/tmp'\n    total = count = 0\n    import shutil\n    print('|-正在清理PHP_SESSION ...')\n    for d in os.listdir(spath):\n        if d.find('sess_') == -1: continue\n        filename = spath + '/' + d\n        fsize = os.path.getsize(filename)\n        print('|---['+ToSize(fsize)+'] del ' + filename),\n        total += fsize\n        if os.path.isdir(filename):\n            shutil.rmtree(filename)\n        else:\n            os.remove(filename)\n        print('\\t\\033[1;32m[OK]\\033[0m')\n        count += 1\n    print('|-已完成php_session的清理，删除['+str(count)+']个文件,共释放磁盘空间['+ToSize(total)+']')\n    return total,count\n\n#清空回收站\ndef ClearRecycle_Bin():\n    import files\n    f = files.files()\n    f.Close_Recycle_bin(None)\n    \n#清理其它\ndef ClearOther():\n    clearPath = [\n                 {'path':'/www/server/panel','find':'testDisk_'},\n                 {'path':'/www/wwwlogs','find':'log'},\n                 {'path':'/tmp','find':'panelBoot.pl'},\n                 {'path':'/www/server/panel/install','find':'.rpm'},\n                 {'path':'/www/server/panel/install','find':'.zip'},\n                 {'path':'/www/server/panel/install','find':'.gz'}\n                 ]\n    \n    total = count = 0\n    print('|-正在清理临时文件及网站日志 ...')\n    for c in clearPath:\n        for d in os.listdir(c['path']):\n            if d.find(c['find']) == -1: continue\n            filename = c['path'] + '/' + d\n            if os.path.isdir(filename): continue\n            fsize = os.path.getsize(filename)\n            print('|---['+ToSize(fsize)+'] del ' + filename),\n            total += fsize\n            os.remove(filename)\n            print('\\t\\033[1;32m[OK]\\033[0m')\n            count += 1\n    public.serviceReload()\n    os.system('sleep 1 && /etc/init.d/bt reload > /dev/null &')\n    print('|-已完成临时文件及网站日志的清理，删除['+str(count)+']个文件,共释放磁盘空间['+ToSize(total)+']')\n    return total,count\n\n#关闭普通日志\ndef CloseLogs():\n    try:\n        paths = ['/usr/lib/python2.7/site-packages/web/httpserver.py','/usr/lib/python2.6/site-packages/web/httpserver.py']\n        for path in paths:\n            if not os.path.exists(path): continue\n            hsc = public.readFile(path)\n            if hsc.find('500 Internal Server Error') != -1: continue\n            rstr = '''def log(self, status, environ):\n        if status != '500 Internal Server Error': return;'''\n            hsc = hsc.replace(\"def log(self, status, environ):\",rstr)\n            if hsc.find('500 Internal Server Error') == -1: return False\n            public.writeFile(path,hsc)\n    except:pass\n\n#字节单位转换\ndef ToSize(size):\n    ds = ['b','KB','MB','GB','TB']\n    for d in ds:\n        if size < 1024: return str(size)+d\n        size = size / 1024\n    return '0b'\n\n#随机面板用户名\ndef set_panel_username(username = None):\n    import db\n    sql = db.Sql()\n    if username:\n        if len(username) < 3:\n            print(\"|-错误，用户名长度不能少于3位\")\n            return\n        if username in ['admin','root']:\n            print(\"|-错误，不能使用过于简单的用户名\")\n            return\n\n        sql.table('users').where('id=?',(1,)).setField('username',username)\n        print(\"|-新用户名: %s\" % username)\n        return\n    \n    username = sql.table('users').where('id=?',(1,)).getField('username')\n    if username == 'admin': \n        username = public.GetRandomString(8).lower()\n        sql.table('users').where('id=?',(1,)).setField('username',username)\n    print('username: ' + username)\n    \n#设定idc\ndef setup_idc():\n    try:\n        panelPath = '/www/server/panel'\n        filename = panelPath + '/data/o.pl'\n        if not os.path.exists(filename): return False\n        o = public.readFile(filename).strip()\n        c_url = 'http://www.bt.cn/api/idc/get_idc_info_bycode?o=%s' % o\n        idcInfo = json.loads(public.httpGet(c_url))\n        if not idcInfo['status']: return False\n        pFile = panelPath + '/config/config.json'\n        pInfo = json.loads(public.readFile(pFile))\n        pInfo['brand'] = idcInfo['msg']['name']\n        pInfo['product'] = u'与宝塔联合定制版'\n        public.writeFile(pFile,json.dumps(pInfo))\n        tFile = panelPath + '/data/title.pl'\n        titleNew = pInfo['brand'] + u'面板'\n        if os.path.exists(tFile):\n            title = public.GetConfigValue('title')\n            if title == '' or title == '宝塔Linux面板': \n                public.writeFile(tFile,titleNew)\n                public.SetConfigValue('title',titleNew)\n        else:\n            public.writeFile(tFile,titleNew)\n            public.SetConfigValue('title',titleNew)\n        return True\n    except:pass\n\n#将插件升级到6.0\ndef update_to6():\n    print(\"====================================================\")\n    print(\"正在升级插件...\")\n    print(\"====================================================\")\n    download_address = public.get_url()\n    exlodes = ['gitlab','pm2','mongodb','deployment_jd','logs','docker','beta','btyw']\n    for pname in os.listdir('plugin/'):\n        if not os.path.isdir('plugin/' + pname): continue\n        if pname in exlodes: continue\n        print(\"|-正在升级【%s】...\" % pname),\n        download_url = download_address + '/install/plugin/' + pname + '/install.sh'\n        to_file = '/tmp/%s.sh' % pname\n        public.downloadFile(download_url,to_file)\n        os.system('/bin/bash ' + to_file + ' install &> /tmp/plugin_update.log 2>&1')\n        print(\"    \\033[32m[成功]\\033[0m\")\n    print(\"====================================================\")\n    print(\"\\033[32m所有插件已成功升级到最新!\\033[0m\")\n    print(\"====================================================\")\n\n#命令行菜单\ndef bt_cli(u_input = 0):\n    raw_tip = \"===============================================\"\n    if not u_input:\n        print(\"===============宝塔面板命令行==================\")\n        print(\"(1) 重启面板服务           (8) 改面板端口\")\n        print(\"(2) 停止面板服务           (9) 清除面板缓存\")\n        print(\"(3) 启动面板服务           (10) 清除登录限制\")\n        print(\"(4) 重载面板服务\")\n        print(\"(5) 修改面板密码           (12) 取消域名绑定限制\")\n        print(\"(6) 修改面板用户名         (13) 取消IP访问限制\")\n        print(\"(7) 强制修改MySQL密码      (14) 查看面板默认信息\")\n        print(\"(22) 显示面板错误日志      (15) 清理系统垃圾\")\n        print(\"(23) 关闭BasicAuth认证     (16) 修复面板(检查错误并更新面板文件到最新版)\")\n        print(\"(24) 关闭动态口令认证          (17) 设置日志切割是否压缩\")\n        print(\"(25) 设置是否保存文件历史副本  (18) 设置是否自动备份面板\")\n        print(\"(0) 取消                   (29) 取消访问设备验证\")\n        print(raw_tip)\n        try:\n            u_input = input(\"请输入命令编号：\")\n            if sys.version_info[0] == 3: u_input = int(u_input)\n        except: u_input = 0\n    try:\n        if u_input in ['log','logs','error','err','tail','debug','info']:\n            os.system(\"tail -f {}\".format(public.get_panel_log_file()))\n            return\n        if u_input[:6] in ['instal','update']:\n            print(\"提示：命令传参示例（编译安装php7.4）：bt install/0/php/7.4\")\n            print(sys.argv)\n            install_args = u_input.split('/')\n            if len(install_args) < 2:\n                try:\n                    install_input = input(\"请选择安装方式(0 编译安装，1 极速安装，默认: 1)：\")\n                    install_input = int(install_input)\n                except:\n                    install_input = 1\n            else:\n                install_input = int(install_args[1])\n            print(raw_tip)\n            soft_list = 'nginx apache php mysql memcached redis pure-ftpd phpmyadmin pm2 docker openlitespeed mongodb'\n            soft_list_arr = soft_list.split(' ')\n            if len(install_args) < 3:\n                install_soft = ''\n                while not install_soft:\n                    print(\"支持的软件：{}\".format(soft_list))\n                    print(raw_tip)\n                    install_soft = input(\"请输入要安装的软件名称(如：nginx)：\")\n                    if install_soft not in soft_list_arr:\n                        print(\"不支命令行安装的持的软件\")\n                        install_soft = ''\n            else:\n                install_soft = install_args[2]\n                    \n            print(raw_tip)\n            if len(install_args) < 4:\n                install_version = ''\n                while not install_version:\n                    print(raw_tip)\n                    install_version = input(\"请输入要安装的版本号(如：1.18)：\")\n            else:\n                install_version = install_args[3]\n            \n            print(raw_tip)\n            os.system(\"bash /www/server/panel/install/install_soft.sh {} {} {} {}\".format(install_input,install_args[0],install_soft,install_version))\n            exit()\n\n        print(\"不支持的指令\")\n        exit()\n    except: pass\n\n\n    nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,22,23,24,25,29]\n    if not u_input in nums:\n        print(raw_tip)\n        print(\"已取消!\")\n        exit()\n\n    print(raw_tip)\n    print(\"正在执行(%s)...\" % u_input)\n    print(raw_tip)\n    if u_input == 29:\n        os.system(\"rm -rf /www/server/panel/data/ssl_verify_data.pl\")\n        os.system(\"/etc/init.d/bt restart\")\n        print(\"|-已关闭访问设备验证\")\n    if u_input == 1:\n        os.system(\"/etc/init.d/bt restart\")\n    elif u_input == 2:\n        os.system(\"/etc/init.d/bt stop\")\n    elif u_input == 3:\n        os.system(\"/etc/init.d/bt start\")\n    elif u_input == 4:\n        os.system(\"/etc/init.d/bt reload\")\n    elif u_input == 5:\n        if sys.version_info[0] == 2:\n            input_pwd = raw_input(\"请输入新的面板密码：\")\n        else:\n            input_pwd = input(\"请输入新的面板密码：\")\n        if len(input_pwd.strip()) < 5:\n            print(\"|-错误，密码长度不能小于5位\")\n            return\n        set_panel_pwd(input_pwd.strip(),True)\n    elif u_input == 6:\n        if sys.version_info[0] == 2:\n            input_user = raw_input(\"请输入新的面板用户名(>3位)：\")\n        else:\n            input_user = input(\"请输入新的面板用户名(>3位)：\")\n        set_panel_username(input_user.strip())\n    elif u_input == 7:\n        if sys.version_info[0] == 2:\n            input_mysql = raw_input(\"请输入新的MySQL密码：\")\n        else:\n            input_mysql = input(\"请输入新的MySQL密码：\")\n        if not input_mysql:\n            print(\"|-错误，不能设置空密码\")\n            return\n\n        if len(input_mysql) < 8:\n            print(\"|-错误，长度不能少于8位\")\n            return\n\n        import re\n        rep = r\"^[\\w@\\._]+$\"\n        if not re.match(rep, input_mysql):\n            print(\"|-错误，密码中不能包含特殊符号\")\n            return\n        \n        print(input_mysql)\n        set_mysql_root(input_mysql.strip())\n    elif u_input == 8:\n        input_port = input(\"请输入新的面板端口：\")\n        if sys.version_info[0] == 3: input_port = int(input_port)\n        if not input_port:\n            print(\"|-错误，未输入任何有效端口\")\n            return\n        if input_port in [80,443,21,20,22]:\n            print(\"|-错误，请不要使用常用端口作为面板端口\")\n            return\n        old_port = int(public.readFile('data/port.pl'))\n        if old_port == input_port:\n            print(\"|-错误，与面板当前端口一致，无需修改\")\n            return\n        if input_port > 65535 or input_port < 1:\n            print(\"|-错误，可用端口范围在1-65535之间\")\n            return\n\n        is_exists = public.ExecShell(\"lsof -i:%s|grep LISTEN|grep -v grep\" % input_port)\n        if len(is_exists[0]) > 5:\n            print(\"|-错误，指定端口已被其它应用占用\")\n            return\n\n        public.writeFile('data/port.pl',str(input_port))\n        if os.path.exists(\"/usr/bin/firewall-cmd\"):\n            os.system(\"firewall-cmd --permanent --zone=public --add-port=%s/tcp\" % input_port)\n            os.system(\"firewall-cmd --reload\")\n        elif os.path.exists(\"/etc/sysconfig/iptables\"):\n            os.system(\"iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport %s -j ACCEPT\" % input_port)\n            os.system(\"service iptables save\")\n        else:\n            os.system(\"ufw allow %s\" % input_port)\n            os.system(\"ufw reload\")\n        os.system(\"/etc/init.d/bt reload\")\n        print(\"|-已将面板端口修改为：%s\" % input_port)\n        print(\"|-若您的服务器提供商是[阿里云][腾讯云][华为云]或其它开启了[安全组]的服务器,请在安全组放行[%s]端口才能访问面板\" % input_port)\n    elif u_input == 9:\n        sess_file = '/www/server/panel/data/session'\n        if os.path.exists(sess_file):\n            os.system(\"rm -f {}/*\".format(sess_file))\n        os.system(\"/etc/init.d/bt reload\")\n    elif u_input == 10:\n        os.system(\"/etc/init.d/bt reload\")\n    elif u_input == 11:\n        auth_file = 'data/admin_path.pl'\n        if os.path.exists(auth_file): os.remove(auth_file)\n        os.system(\"/etc/init.d/bt reload\")\n        print(\"|-已取消入口限制,请在URL地址中增加/login访问面板\")\n    elif u_input == 12:\n        auth_file = 'data/domain.conf'\n        if os.path.exists(auth_file): os.remove(auth_file)\n        os.system(\"/etc/init.d/bt reload\")\n        print(\"|-已取消域名访问限制\")\n    elif u_input == 13:\n        auth_file = 'data/limitip.conf'\n        if os.path.exists(auth_file): os.remove(auth_file)\n        os.system(\"/etc/init.d/bt reload\")\n        print(\"|-已取消IP访问限制\")\n    elif u_input == 14:\n        os.system(\"/etc/init.d/bt default\")\n    elif u_input == 15:\n        ClearSystem()\n    elif u_input == 16:\n        os.system(\"curl http://download.bt.cn/install/update6.sh|bash\")\n    elif u_input == 17:\n        l_path = '/www/server/panel/data/log_not_gzip.pl'\n        if os.path.exists(l_path):\n            print(\"|-检测到已关闭gzip压缩功能,正在开启...\")\n            os.remove(l_path)\n            print(\"|-已开启gzip压缩\")\n        else:\n            print(\"|-检测到已开启gzip压缩功能,正在关闭...\")\n            public.writeFile(l_path,'True')\n            print(\"|-已关闭gzip压缩\")\n    elif u_input == 18:\n        l_path = '/www/server/panel/data/not_auto_backup.pl'\n        if os.path.exists(l_path):\n            print(\"|-检测到已关闭面板自动备份功能,正在开启...\")\n            os.remove(l_path)\n            print(\"|-已开启面板自动备份功能\")\n        else:\n            print(\"|-检测到已开启面板自动备份功能,正在关闭...\")\n            public.writeFile(l_path,'True')\n            print(\"|-已关闭面板自动备份功能\")\n    elif u_input == 22:\n        os.system('tail -100 /www/server/panel/logs/error.log')\n    elif u_input == 23:\n        filename = '/www/server/panel/config/basic_auth.json'\n        if os.path.exists(filename): os.remove(filename)\n        os.system('bt reload')\n        print(\"|-已关闭BasicAuth认证\")\n    elif u_input == 24:\n        filename = '/www/server/panel/data/two_step_auth.txt'\n        if os.path.exists(filename): os.remove(filename)\n        print(\"|-已关闭谷歌认证\")\n    elif u_input == 25:\n        l_path = '/www/server/panel/data/not_file_history.pl'\n        if os.path.exists(l_path):\n            print(\"|-检测到已关闭文件副本功能,正在开启...\")\n            os.remove(l_path)\n            print(\"|-已开启文件副本功能\")\n        else:\n            print(\"|-检测到已开启文件副本功能,正在关闭...\")\n            public.writeFile(l_path,'True')\n            print(\"|-已关闭文件副本功能\")\n\n\n\nif __name__ == \"__main__\":\n    type = sys.argv[1]\n    if type == 'root':\n        set_mysql_root(sys.argv[2])\n    elif type == 'panel':\n        set_panel_pwd(sys.argv[2])\n    elif type == 'username':\n        set_panel_username()\n    elif type == 'o':\n        setup_idc()\n    elif type == 'mysql_dir':\n        set_mysql_dir(sys.argv[2])\n    elif type == 'package':\n        PackagePanel()\n    elif type == 'ssl':\n        CreateSSL()\n    elif type == 'clear':\n        ClearSystem()\n    elif type == 'closelog':\n        CloseLogs()\n    elif type == 'update_to6':\n        update_to6()\n    elif type == \"cli\":\n        clinum = 0\n        try:\n            if len(sys.argv) > 2: \n                clinum = int(sys.argv[2]) if sys.argv[2][:6] not in ['instal','update'] else sys.argv[2]\n        except:\n            clinum = sys.argv[2]\n        bt_cli(clinum)\n    else:\n        print('ERROR: Parameter error')\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.6416015625,
          "content": "#!/bin/bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\nLANG=en_US.UTF-8\n\n# 宝塔面板离线升级脚本\n\npanel_path='/www/server/panel'\n\nif [ ! -d $panel_path ];then\n\techo \"当前未安装宝塔面板!\"\n\texit 0;\nfi\n\nbase_dir=$(cd \"$(dirname \"$0\")\";pwd)\nif [ $base_dir = $panel_path ];then\n\techo \"不能在面板根目录执行离线升级命令!\"\n\texit 0;\nfi\n\nif [ ! -d $base_dir/class ];then\n\techo \"没有找到升级文件!\"\n\texit 0;\nfi\n\nrm -f $panel_path/*.pyc $panel_path/class/*.pyc\n\\cp -r -f $base_dir/. $panel_path/\n/etc/init.d/bt restart\necho \"====================================\"\necho \"已完成升级!\"\n"
        },
        {
          "name": "vhost",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}