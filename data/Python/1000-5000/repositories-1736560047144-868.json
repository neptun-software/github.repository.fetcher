{
  "metadata": {
    "timestamp": 1736560047144,
    "page": 868,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jazzband/django-taggit",
      "stars": 3348,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.2216796875,
          "content": "[run]\nbranch = True\nsource = taggit\n\n[report]\nexclude_lines =\n    if self.debug:\n    pragma: no cover\n    raise NotImplementedError\n    if __name__ == .__main__.:\nignore_errors = True\nomit =\n    tests/*\n    taggit/migrations/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.193359375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# PyCharm files\n.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.603515625,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n  - repo: https://github.com/psf/black\n    rev: 24.8.0\n    hooks:\n      - id: black\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.17.0\n    hooks:\n    -   id: pyupgrade\n        args: [--py37-plus]\n  - repo: https://github.com/adamchainz/django-upgrade\n    rev: 1.21.0\n    hooks:\n    - id: django-upgrade\n      args: [--target-version, \"3.2\"]\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.1513671875,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.9\"\n\npython:\n  install:\n    - method: pip\n      path: .\n\nsphinx:\n  configuration: docs/conf.py\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.685546875,
          "content": "django-taggit was originally created by Alex Gaynor.\n\ndjango-taggit-serializer was originally created by Paul Oostenrijk.\n\nThe following is a list of much appreciated contributors:\n\nNathan Borror <nathan@playgroundblues.com>\nfakeempire <adam@fakeempire.com>\nBen Firshman <ben@firshman.co.uk>\nAlex Gaynor <alex.gaynor@gmail.com>\nRob Hudson <rob@cogit8.org>\nCarl Meyer <carl@oddbird.net>\nFrank Wiles\nJonathan Buchanan\nidle sign <idlesign@yandex.ru>\nCharles Leifer\nFlorian Apolloner <apollo13@apolloner.eu>\nAndrew Pryde <andrew@rocketpod.co.uk>\nJohn Whitlock <jwhitlock@mozilla.com>\nJon Dufresne <jon.dufresne@gmail.com>\nPablo Olmedo Dorado <pablolmedorado@gmail.com>\nSteve Reciao <stevenrecio@gmail.com>\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 15.669921875,
          "content": "Changelog\n=========\n\n(Unreleased)\n~~~~~~~~~~~~\n\n* Add an admin command to remove orphaned tags\n* Remove support for Python 3.8\n* Fix an issue where the admin merge tag form redirect would fail when querystrings are present inside the URL\n\n6.1.0 (2024-09-29)\n~~~~~~~~~~~~~~~~~~\n\n* Add a management command (``remove_orphaned_tags``) to remove orphaned tags\n* Add a fallback for when multiple tags are found in case-insensitivity mode (the earliest by PK is returned)\n* Add a ``deduplicate_tags`` management command to remove duplicate tags based on case insensitivity. This feature is enabled when ``TAGGIT_CASE_INSENSITIVE`` is set to ``True`` in the settings.\n* We no longer package tests, docs, or the sample taggit app into the distributed wheels. While we believe this shouldn't affect anything for users of the library, please tell us if you find yourself hitting issues (like around import errors)\n* Fix missing template file for admin merge tag action\n\n6.0.0 (2024-07-27)\n~~~~~~~~~~~~~~~~~~\n\n* By default, order tag items on instances by the primary key. This generally means that they will be ordered by \"creation date\" for the tag item.\n  The previous behavior for this was that by default tag items were not ordered. In practice tag items often end up ordered by creation date anyways, just due to how databases work, but this was not a guarantee.\n  If you wish to have the old behavior, set ``ordering=[]`` to your ``TaggableManager`` instance.\n  We believe that this should not cause a noticable performance change, and the number of queries involved should not change.\n* Added the ability to merge tags via the admin\n* Add Django 5.0 support (no code changes were needed, but now we test this release).\n* Add Python 3.12 support\n* Add support for dumpdata/loaddata using natural keys\n\n5.0.1 (2023-10-26)\n~~~~~~~~~~~~~~~~~~\n\n* Fix the package metadata to properly reflect the right Django and Python version requirements\n  Release 5.0.0 improperly stated its Django bounds as >=3.2, so people installing without bounds will end up on a version that won't work.\n\n5.0.0 (2023-10-24)\n~~~~~~~~~~~~~~~~~~\n* **Backwards icompatible:** Rename the (``content_type``, ``object_id``) index on ``TaggedItem``.\n  It is very unlikely for this to affect your code itself, and a migration will rename the index. This should not cause any downtime according to my research (Postgres does not lock the table for index renames, and Oracle holds a tiny lock to do it, and the change is only to the metadata, so is not dependent on table size).\n\n* **Backwards incompatible:** Remove the ``.index_together`` and ``.unique_together`` attributes on ``TaggedItem``\n\n  We are instead using ``constraints`` and ``indexes`` to set up these properties.\n* Remove support for Django 3.2.\n* Remove usage of deprecated APIs for Django 4.2\n* Remove support for Python 3.7 (no code changes involved)\n* Fix ``tag_kwargs`` and ``TAGGIT_CASE_INSENSITIVE=True`` discrepency.\n\n4.0.0 (2023-05-04)\n~~~~~~~~~~~~~~~~~~\n* Remove Python 3.6 support (no code changes occurred, but we no longer test this release).\n* Remove Django 4.0 support (no code changes occurred, but we no longer test this release).\n* Add Django 4.2 support.\n\n3.1.0 (2022-11-08)\n~~~~~~~~~~~~~~~~~~\n\n* Add Python 3.11 support (no code changes were needed, but now we test this release).\n* Add Django 4.1 support (no code changes were needed, but now we test this release).\n* Fixed an issue where object caches would not be properly cleared after updating tags, leading\n  to stale reads in cases where ``prefetch_related`` is used.\n* Change ``TagListSerializerField`` to be a subclass of ``ListField``. This should improve support for API document generation. This change should not affect API behavior, but might affect metaprogramming code, so please procede carefully during this update.\n\n3.0.0 (2022-05-02)\n~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** Tag slugification used to silently strip non-ASCII characters\n  from the tag name to make the slug. This leads to a lot of confusion for anyone using\n  languages with non-latin alphabets, as well as weird performance issues.\n\n  Tag slugification will now, by default, maintain unicode characters as-is during\n  slugification. This will lead to less surprises, but might cause issues for you if you are\n  expecting all of your tag slugs to fit within a regex like ``[a-zA-Z0-9]`` (for example in\n  URL routing configurations).\n\n  Generally speaking, this should not require action on your part as a library user, as\n  existing tag slugs are persisted in the database, and only new tags will receive the\n  enhanced unicode-compatible slug.\n\n  If you wish to maintain the old stripping behavior, set the setting\n  ``TAGGIT_STRIP_UNICODE_WHEN_SLUGIFYING`` to ``True``.\n\n  As a reminder, custom tag models can easily customize slugification behavior by overriding\n  the ``slugify`` method to your business needs.\n\n`` Drop Django 2.2 support.\n\n2.1.0 (2022-01-24)\n~~~~~~~~~~~~~~~~~~\n\n* Add Python 3.10 support.\n* Add Django 4.0 support.\n* Drop Django 3.1 support.\n\n\n2.0.0 (2021-11-14)\n~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** ``TaggableManager.set`` now takes a list of tags\n  (instead of varargs) so that its API matches Django's ``RelatedManager.set``. Example:\n\n  - previously: ``item.tags.set(\"red\", \"blue\")``\n  - now: ``item.tags.set([\"red\", \"blue\"])``\n\n* Fix issue where ``TagField`` would incorrectly report that a field has changed on empty values.\n* Update Russian translation.\n* Add Persian translation\n* Fix issue for many languages where content types were not being properly translated.\n* Provide translators additional context regarding strings in TagBase model.\n\n\n1.5.1 (2021-07-01)\n~~~~~~~~~~~~~~~~~~\n\n* Fix compiled Ukranian translation (which would cause a failure on load for this locale).\n* Update compiled Danish translation.\n\n\n1.5.0 (2021-06-30)\n~~~~~~~~~~~~~~~~~~\n\n* Vendor in the `django-taggit-serializer` project (under `taggit.serializers`).\n* Add Arabic translation.\n* Add Ukranian translation.\n\n\n1.4.0 (2021-04-19)\n~~~~~~~~~~~~~~~~~~\n\n* Add Python 3.9 support.\n* Remove Python 3.5 support.\n* Add Django 3.2 support.\n* Remove Django 1.11 and 3.0 support.\n* Add Danish translation.\n* Fix crashing that could occur with ``similar_objects`` in multi-inheritance contexts.\n* Add support for custom fields on through table models with `through_defaults` for ``TaggedManager.add`` and ``TaggedManager.set``.\n\n\n1.3.0 (2020-05-19)\n~~~~~~~~~~~~~~~~~~\n\n* Model and field ``verbose_name`` and ``verbose_name_plural`` attributes are\n  now lowercase. This simplifies using the name in the middle of a sentence.\n  When used as a header, title, or at the beginning of a sentence, a text\n  transformed can be used to adjust the case.\n* Fix prefetch_related when using UUIDTaggedItem.\n* Allow for passing in extra constructor parameters when using\n  ``TaggableManager.add``. This is especially useful when using custom\n  tag models.\n\n1.2.0 (2019-12-03)\n~~~~~~~~~~~~~~~~~~\n\n* **Removed** support for end-of-life Django 2.0 and 2.1.\n* Added support for Django 3.0.\n* Added support for Python 3.8.\n* Moved ``TaggedItemBase.tags_for()`` to ItemBase.\n* Replaced reference to removed Django's ``.virtual_fields`` with\n  ``.private_field``.\n* Added ``TextareaTagWidget``.\n\n1.1.0 (2019-03-22)\n~~~~~~~~~~~~~~~~~~\n\n* Added Finnish translation.\n* Updated Chinese translation.\n* Updated Esperanto translation.\n* Fix ``form.changed_data`` to allow early access for a tags defined with\n  ``blank=True``.\n\n1.0.0 (2019-03-17)\n~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** Remove support for Python 2.\n* Added ``has_changed()`` method to ``taggit.forms.TagField``.\n* Added multi-column unique constraint to model ``TaggedItem`` on fields\n  ``content_type``, ``object_id``, and ``tag``. Databases that contain\n  duplicates will need to add a data migration to resolve these duplicates.\n* Fixed ``TaggableManager.most_common()`` to always evaluate lazily. Allows\n  placing a ``.most_common()`` query at the top level of a module.\n* Fixed setting the ``related_name`` on a tags manager that exists on a model\n  named ``Name``.\n\n0.24.0 (2019-02-19)\n~~~~~~~~~~~~~~~~~~~\n\n* The project has moved to `Jazzband <https://jazzband.co/>`_. This is the\n  first release under the new organization. The new repository URL is\n  `<https://github.com/jazzband/django-taggit>`_.\n* Added support for Django 2.2.\n* Fixed a race condition in ``TaggableManager``.\n* Removed method ``ItemBase.bulk_lookup_kwargs()``.\n* Fixed view ``tagged_object_list`` to set ``queryset.model`` as\n  ``ListView.model`` (was previously set as a ``ContentType`` instance).\n* ``_TaggableManager`` and ``TaggableManager`` now always call the parent\n  class ``__init__``.\n* Removed ``TaggableRel`` and replaced uses with ``ManyToManyRel``.\n\n0.23.0 (2018-08-07)\n~~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** Remove support for Django < 1.11\n* Added support for Django 2.1 and Python 3.7\n* Moved TagWidget value conversion from TagWidget.render() to TagWidget.format_value()\n\n0.22.2 (2017-12-27)\n~~~~~~~~~~~~~~~~~~~\n\n* Added support for Django 2.0\n* **Backwards incompatible:** Dropped support for EOL Python 3.3\n\n0.22.1 (2017-04-22)\n~~~~~~~~~~~~~~~~~~~\n\n* Update spanish translation\n* Add testing for Django 1.11 and Python 3.6\n* introduce isort and flake8 in the CI\n* [docs] Fixed links to external apps\n* Improved auto-slug in TagBase to support UUID pk\n* [docs] Added contribution guidelines\n\n0.22.0 (2017-01-29)\n~~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** Drop support for Django 1.7\n\n0.21.6 (2017-01-25)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix case-insensitive tag creation when setting to a mix of new and existing\n  tags are used\n\n0.21.5 (2017-01-21)\n~~~~~~~~~~~~~~~~~~~\n\n* Check for case-insensitive duplicates when creating new tags\n\n0.21.4 (2017-01-10)\n~~~~~~~~~~~~~~~~~~~\n\n* Support __gt__ and __lt__ ordering on Tags\n\n0.21.3 (2016-10-07)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix list view\n\n0.21.2 (2016-08-31)\n~~~~~~~~~~~~~~~~~~~\n\n* Update Python version classifiers in setup.py\n* Add Greek translation\n\n0.21.1 (2016-08-25)\n~~~~~~~~~~~~~~~~~~~\n\n* Document supported versions of Django; fix Travis to test these versions.\n\n0.21.0 (2016-08-22)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix form tests on Django 1.10\n* Address list_display and fieldsets in admin docs\n* external_apps.txt improvements\n* Remove support for Django 1.4-1.6, again.\n\n0.20.2 (2016-07-11)\n~~~~~~~~~~~~~~~~~~~\n\n* Add extra_filters argument to the manager's most_common method\n\n0.20.1 (2016-06-23)\n~~~~~~~~~~~~~~~~~~~\n\n* Specify `app_label` for `Tag` and `TaggedItem`\n\n0.20.0 (2016-06-19)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix UnboundLocalError in _TaggableManager.set(..)\n* Update doc links to reflect RTD domain changes\n* Improve Russian translations\n\n0.19.1 (2016-05-25)\n~~~~~~~~~~~~~~~~~~~\n\n* Add app config, add simplified Chinese translation file\n\n0.19.0 (2016-05-23)\n~~~~~~~~~~~~~~~~~~~\n\n* Implementation of m2m_changed signal sending\n* Code and tooling improvements\n\n0.18.3 (2016-05-12)\n~~~~~~~~~~~~~~~~~~~\n\n* Added Spanish and Turkish translations\n\n0.18.2 (2016-05-08)\n~~~~~~~~~~~~~~~~~~~\n\n* Add the min_count parameter to managers.most_common function\n\n0.18.1 (2016-03-30)\n~~~~~~~~~~~~~~~~~~~\n\n* Address deprecation warnings\n\n0.18.0 (2016-01-18)\n~~~~~~~~~~~~~~~~~~~\n\n* Add option to override default tag string parsing\n* Drop support for Python 2.6\n\n0.17.6 (2015-12-09)\n~~~~~~~~~~~~~~~~~~~\n\n* Silence Django 1.9 warning\n\n0.17.5 (2015-11-27)\n~~~~~~~~~~~~~~~~~~~\n\n* Django 1.9 compatibility fix\n\n0.17.4 (2015-11-25)\n~~~~~~~~~~~~~~~~~~~\n\n* Allows custom Through Model with GenericForeignKey\n\n0.17.3 (2015-10-26)\n~~~~~~~~~~~~~~~~~~~\n\n* Silence Django 1.9 warning about on_delete\n\n0.17.2 (2015-10-25)\n~~~~~~~~~~~~~~~~~~~\n\n* Django 1.9 beta compatibility\n\n0.17.1 (2015-09-10)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix unknown column `object_id` issue with Django 1.6+\n\n0.17.0 (2015-08-14)\n~~~~~~~~~~~~~~~~~~~\n\n* Database index added on TaggedItem fields content_type & object_id\n\n0.16.4 (2015-08-13)\n~~~~~~~~~~~~~~~~~~~\n\n* Access default manager via class instead of instance\n\n0.16.3 (2015-08-08)\n~~~~~~~~~~~~~~~~~~~\n\n* Prevent IntegrityError with custom TagBase classes\n\n0.16.2 (2015-07-13)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix an admin bug related to the `Manager` property `through_fields`\n\n0.16.1 (2015-07-09)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix bug that assumed all primary keys are named 'id'\n\n0.16.0 (2015-07-04)\n~~~~~~~~~~~~~~~~~~~\n\n* Add option to allow case-insensitive tags\n\n0.15.0 (2015-06-23)\n~~~~~~~~~~~~~~~~~~~\n\n* Fix wrong slugs for non-latin chars. Only works if optional GPL dependency\n  (unidecode) is installed.\n\n0.14.0 (2015-04-26)\n~~~~~~~~~~~~~~~~~~~\n\n* Prevent extra JOIN when prefetching\n* Prevent _meta warnings with Django 1.8\n\n0.13.0 (2015-04-02)\n~~~~~~~~~~~~~~~~~~~\n\n* Django 1.8 support\n\n0.12.3 (2015-03-03)\n~~~~~~~~~~~~~~~~~~~\n\n* Specify that the internal type of the TaggitManager is a ManyToManyField\n\n0.12.2 (2014-21-09)\n~~~~~~~~~~~~~~~~~~~\n\n* Fixed 1.7 migrations.\n\n0.12.1 (2014-10-08)\n~~~~~~~~~~~~~~~~~~~\n\n* Final (hopefully) fixes for the upcoming Django 1.7 release.\n* Added Japanese translation.\n\n0.12.0 (2014-20-04)\n~~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** Support for Django 1.7 migrations. South users\n  have to set ``SOUTH_MIGRATION_MODULES`` to use ``taggit.south_migrations``\n  for taggit.\n* **Backwards incompatible:** Django's new transaction handling is used on\n  Django 1.6 and newer.\n* **Backwards incompatible:** ``Tag.save`` got changed to opportunistically try\n  to save the tag and if that fails fall back to selecting existing similar\n  tags and retry -- if that fails too an ``IntegrityError`` is raised by the\n  database, your app will have to handle that.\n* Added Italian and Esperanto translations.\n\n0.11.2 (2013-13-12)\n~~~~~~~~~~~~~~~~~~~\n\n* Forbid multiple TaggableManagers via generic foreign keys.\n\n0.11.1 (2013-25-11)\n~~~~~~~~~~~~~~~~~~~\n\n* Fixed support for Django 1.4 and 1.5.\n\n0.11.0 (2013-25-11)\n~~~~~~~~~~~~~~~~~~~\n\n* Added support for prefetch_related on tags fields.\n* Fixed support for Django 1.7.\n* Made the tagging relations unserializeable again.\n* Allow more than one TaggableManager on models (assuming concrete FKs are\n   used for the relations).\n\n0.10.0 (2013-17-08)\n~~~~~~~~~~~~~~~~~~~\n\n* Support for Django 1.6 and 1.7.\n* Python3 support\n* **Backwards incompatible:** Dropped support for Django < 1.4.5.\n* Tag names are unique now, use the provided South migrations to upgrade.\n\n0.9.2 (2011-01-17)\n~~~~~~~~~~~~~~~~~~\n\n* **Backwards incompatible:** Forms containing a :class:`TaggableManager` by\n  default now require tags, to change this provide ``blank=True`` to the\n  :class:`TaggableManager`.\n* Now works with Django 1.3 (as of beta-1).\n\n0.9.0 (2010-09-22)\n~~~~~~~~~~~~~~~~~~\n\n* Added a Hebrew locale.\n* Added an index on the ``object_id`` field of ``TaggedItem``.\n* When displaying tags always join them with commas, never spaces.\n* The docs are now available `online <https://django-taggit.readthedocs.io/>`_.\n* Custom ``Tag`` models are now allowed.\n* **Backwards incompatible:** Filtering on tags is no longer\n  ``filter(tags__in=[\"foo\"])``, it is written\n  ``filter(tags__name__in=[\"foo\"])``.\n* Added a German locale.\n* Added a Dutch locale.\n* Removed ``taggit.contrib.suggest``, it now lives in an external application,\n   see :doc:`external_apps` for more information.\n\n0.8.0 (2010-06-22)\n~~~~~~~~~~~~~~~~~~\n\n* Fixed querying for objects using ``exclude(tags__in=tags)``.\n* Marked strings as translatable.\n* Added a Russian translation.\n* Created a `mailing list <http://groups.google.com/group/django-taggit>`_.\n* Smarter tagstring parsing for form field; ported from Jonathan Buchanan's\n  `django-tagging <http://django-tagging.googlecode.com>`_. Now supports tags\n  containing commas. See :ref:`tags-in-forms` for details.\n* Switched to using savepoints around the slug generation for tags. This\n  ensures that it works fine on databases (such as Postgres) which dirty a\n  transaction with an ``IntegrityError``.\n* Added Python 2.4 compatibility.\n* Added Django 1.1 compatibility.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.3193359375,
          "content": "# Code of Conduct\n\nAs contributors and maintainers of the Jazzband projects, and in the interest of\nfostering an open and welcoming community, we pledge to respect all people who\ncontribute through reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in the Jazzband a harassment-free experience\nfor everyone, regardless of the level of experience, gender, gender identity and\nexpression, sexual orientation, disability, personal appearance, body size, race,\nethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery\n- Personal attacks\n- Trolling or insulting/derogatory comments\n- Public or private harassment\n- Publishing other's private information, such as physical or electronic addresses,\n  without explicit permission\n- Other unethical or unprofessional conduct\n\nThe Jazzband roadies have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are not\naligned to this Code of Conduct, or to ban temporarily or permanently any contributor\nfor other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, the roadies commit themselves to fairly and\nconsistently applying these principles to every aspect of managing the jazzband\nprojects. Roadies who do not follow or enforce the Code of Conduct may be permanently\nremoved from the Jazzband roadies.\n\nThis code of conduct applies both within project spaces and in public spaces when an\nindividual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by\ncontacting the roadies at `roadies@jazzband.co`. All complaints will be reviewed and\ninvestigated and will result in a response that is deemed necessary and appropriate to\nthe circumstances. Roadies are obligated to maintain confidentiality with regard to the\nreporter of an incident.\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version\n1.3.0, available at [https://contributor-covenant.org/version/1/3/0/][version]\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/3/0/\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 3.662109375,
          "content": "Contributing to django-taggit\n=============================\n\n.. image:: https://jazzband.co/static/img/jazzband.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\nThis is a `Jazzband <https://jazzband.co>`_ project. By contributing you agree\nto abide by the `Contributor Code of Conduct\n<https://jazzband.co/about/conduct>`_ and follow the `guidelines\n<https://jazzband.co/about/guidelines>`_.\n\nThank you for taking the time to contribute to django-taggit.\n\nFollow these guidelines to speed up the process.\n\nReach out before you start\n--------------------------\n\nBefore opening a new issue, look if somebody else has already started working\non the same issue in the `GitHub issues\n<https://github.com/jazzband/django-taggit/issues>`_ and `pull requests\n<https://github.com/jazzband/django-taggit/pulls>`_.\n\nFork the repository\n-------------------\n\nOnce you have forked this repository to your own GitHub account, install your\nown fork in your development environment:\n\n.. code-block:: console\n\n    git clone git@github.com:<your_fork>/django-taggit.git\n    cd django-taggit\n    python setup.py develop\n\nRunning tests\n-------------\n\ndjango-taggit uses `tox <https://tox.readthedocs.io/>`_ to run tests:\n\n.. code-block:: console\n\n    tox\n\nRunning the sample application\n------------------------------\n\nThere is a sample application in ``sample_taggit``. You can run it by doing the following:\n\n\n**Prepare the Database**\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nUse the `reset-db` command to prepare your database. This will remove any existing data, run migrations, and load fixtures, including creating a default admin user.\n\n**On Windows:**\n\n.. code-block:: console\n\n     cd sample_taggit\n     call make.bat reset-db\n\n**On Mac/Linux:**\n\n.. code-block:: console\n\n     cd sample_taggit\n     make reset-db\n\n**Launch the Sample Project**\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLaunch the sample project itself with:\n\n.. code-block:: console\n\n     sample_taggit/manage.py runserver\n\n**Default Admin User Login:**\n\nUsername: taggit\n\nPassword: admin\n\nFollow style conventions (black, flake8, isort)\n-----------------------------------------------\n\nCheck that your changes are not breaking the style conventions with:\n\n.. code-block:: console\n\n    tox -e black,flake8,isort\n\nUpdate the documentation\n------------------------\n\nIf you introduce new features or change existing documented behavior, please\nremember to update the documentation.\n\nThe documentation is located in the ``docs`` directory of the repository.\n\nTo do work on the docs, proceed with the following steps:\n\n.. code-block:: console\n\n    pip install sphinx\n    sphinx-build -n -W docs docs/_build\n\nAdd a changelog line\n--------------------\n\nEven when the change is minor, a changelog line is helpful to both describe\nthe intent of the change, and to give a heads up to people upgrading. You can\nadd a line in the ``(Unreleased)`` section of ``CHANGELOG.rst``, along with\nany more detailed explanations for more complicated changes.\n\nSend pull request\n-----------------\n\nIt is now time to push your changes to GitHub and open a `pull request\n<https://github.com/jazzband/django-taggit/pulls>`_!\n\n\nRelease Checklist\n-----------------\n\nThese steps need to happen by a release maintainer.\n\nTo make a release, the following needs to happen:\n\n- Make sure that ``setup.cfg`` is set up properly w/r/t Python and Django requirements\n- Make sure the documentation (``docs/index.rst``) also describes the right Python/Django versions\n- Bump the version number in ``taggit/__init__.py``\n- Update the changelog (making sure to add the (Unreleased) section to the top)\n- Get those changes onto the ``master`` branch\n- Tag the commit with the version number\n- CI should then upload a release to be verified through Jazzband\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.525390625,
          "content": "Copyright (c) Alex Gaynor, Paul Oostenrijk, and individual contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of django-taggit nor the names of its contributors\n       may be used to endorse or promote products derived from this software\n       without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2587890625,
          "content": "include AUTHORS\ninclude CHANGELOG.rst\ninclude LICENSE\ninclude README.rst\ninclude setup.cfg\ninclude setup.py\nrecursive-include taggit *.py\nrecursive-include taggit/templates *.html\nrecursive-include taggit/locale *.mo *.po\nprune tests\nprune sample_taggit\nprune docs\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.0615234375,
          "content": "django-taggit\n=============\n\n.. image:: https://jazzband.co/static/img/badge.svg\n   :target: https://jazzband.co/\n   :alt: Jazzband\n\n.. image:: https://img.shields.io/pypi/pyversions/django-taggit.svg\n   :target: https://pypi.org/project/django-taggit/\n   :alt: Supported Python versions\n\n.. image:: https://img.shields.io/pypi/djversions/django-taggit.svg\n   :target: https://pypi.org/project/django-taggit/\n   :alt: Supported Django versions\n\n.. image:: https://github.com/jazzband/django-taggit/workflows/Test/badge.svg\n   :target: https://github.com/jazzband/django-taggit/actions\n   :alt: GitHub Actions\n\n.. image:: https://codecov.io/gh/jazzband/django-taggit/coverage.svg?branch=master\n    :target: https://codecov.io/gh/jazzband/django-taggit?branch=master\n\nThis is a `Jazzband <https://jazzband.co>`_ project. By contributing you agree\nto abide by the `Contributor Code of Conduct\n<https://jazzband.co/about/conduct>`_ and follow the `guidelines\n<https://jazzband.co/about/guidelines>`_.\n\n``django-taggit`` a simpler approach to tagging with Django.  Add ``\"taggit\"`` to your\n``INSTALLED_APPS`` then just add a TaggableManager to your model and go:\n\n.. code:: python\n\n    from django.db import models\n\n    from taggit.managers import TaggableManager\n\n\n    class Food(models.Model):\n        # ... fields here\n\n        tags = TaggableManager()\n\n\nThen you can use the API like so:\n\n.. code:: pycon\n\n    >>> apple = Food.objects.create(name=\"apple\")\n    >>> apple.tags.add(\"red\", \"green\", \"delicious\")\n    >>> apple.tags.all()\n    [<Tag: red>, <Tag: green>, <Tag: delicious>]\n    >>> apple.tags.remove(\"green\")\n    >>> apple.tags.all()\n    [<Tag: red>, <Tag: delicious>]\n    >>> Food.objects.filter(tags__name__in=[\"red\"])\n    [<Food: apple>, <Food: cherry>]\n\nTags will show up for you automatically in forms and the admin.\n\n``django-taggit`` requires Django 3.2 or greater.\n\nFor more info check out the `documentation\n<https://django-taggit.readthedocs.io/>`_. And for questions about usage or\ndevelopment you can create an issue on Github (if your question is about\nusage please add the `question` tag).\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample_taggit",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.3623046875,
          "content": "[metadata]\nname = django-taggit\nversion = attr: taggit.__version__\ndescription = django-taggit is a reusable Django application for simple tagging.\nlong_description = file: README.rst\nauthor = Alex Gaynor\nauthor_email = alex.gaynor@gmail.com\nurl = https://github.com/jazzband/django-taggit\nlicense = BSD\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Environment :: Web Environment\n    Framework :: Django\n    Framework :: Django :: 4.1\n    Framework :: Django :: 4.2\n    Framework :: Django :: 5.0\n    Intended Audience :: Developers\n    License :: OSI Approved :: BSD License\n    Operating System :: OS Independent\n    Programming Language :: Python\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\nproject_urls =\n    Documentation = https://django-taggit.readthedocs.io\n    Source = https://github.com/jazzband/django-taggit\n    Tracker = https://github.com/jazzband/django-taggit/issues\n\n[options]\npython_requires = >=3.9\npackages = find:\ninstall_requires = Django>=4.1\ninclude_package_data = true\nzip_safe = false\n\n[options.packages.find]\nexclude = tests*\n\n[flake8]\n# E501: line too long\nignore = E501\nexclude = .venv,.git,.tox,.direnv\n\n[isort]\nprofile = black\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.037109375,
          "content": "from setuptools import setup\n\nsetup()\n"
        },
        {
          "name": "taggit",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.0830078125,
          "content": "[tox]\nminversion = 1.9\nenvlist =\n    black\n    flake8\n    isort\n    py{39,310,311,312}-dj{41,42}\n    py{310,311,312}-dj{50}\n    py{310,311,312}-djmain\n    docs\n\n[gh-actions]\npython =\n    3.9: py39, black, flake8, isort\n    3.10: py310\n    3.11: py311\n    3.12: py312\n\n[testenv]\ndeps =\n    dj41: Django>=4.1,<4.2\n    dj42: Django>=4.2,<5.0\n    dj50: Django>=5.0,<5.1\n    djmain: https://github.com/django/django/archive/main.tar.gz\n    coverage\n    djangorestframework\n    unidecode\nsetenv =\n    PYTHONWARNINGS=all\ncommands =\n    coverage run -m django test --settings=tests.settings {posargs}\n    coverage report\n    coverage xml\nignore_outcome =\n    djmain: True\nignore_errors =\n    djmain: True\n\n[testenv:black]\nbasepython = python3\nskip_install = true\ndeps = black\ncommands = black --target-version=py38 --check --diff .\n\n[testenv:flake8]\nbasepython = python3\nskip_install = true\ndeps = flake8\ncommands = flake8\n\n[testenv:isort]\nbasepython = python3\nskip_install = true\ndeps = isort>=5.0.2\ncommands = isort --check-only --diff .\n\n[testenv:docs]\ndeps = sphinx\ncommands = sphinx-build -n -W docs docs/_build\n"
        }
      ]
    }
  ]
}