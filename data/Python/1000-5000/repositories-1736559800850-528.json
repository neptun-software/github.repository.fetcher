{
  "metadata": {
    "timestamp": 1736559800850,
    "page": 528,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Lasagne/Lasagne",
      "stars": 3850,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0283203125,
          "content": "[run]\nomit = lasagne/tests/*\n"
        },
        {
          "name": ".coveragerc-nogpu",
          "type": "blob",
          "size": 0.1201171875,
          "content": "[run]\nomit =\n    lasagne/tests/*\n    lasagne/layers/corrmm.py\n    lasagne/layers/cuda_convnet.py\n    lasagne/layers/dnn.py\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2626953125,
          "content": "# Virtualenv\nbin/\ninclude/\nsrc/\n\n# Dataset used in examples\ntrain-images-idx3-ubyte.gz\ntrain-labels-idx1-ubyte.gz\nt10k-images-idx3-ubyte.gz\nt10k-labels-idx1-ubyte.gz\n# Dataset used in earlier versions\nmnist.pkl.gz\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n### vim ###\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n*.un~\nSession.vim\n.netrwhist\n*~\n\n\n### OSX ###\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear on external disk\n.Spotlight-V100\n.Trashes\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Directories from IDE\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.484375,
          "content": "language: python\nsudo: false\npython:\n  - \"2.7\"\n  - \"3.4\"\naddons:\n  apt:\n    packages:\n    - libblas-dev\n    - liblapack-dev\n    - gfortran\nbefore_install:\n  - pip install -U pip\ninstall:\n  - travis_wait travis_retry pip install -r requirements-dev.txt\n  - travis_retry pip install python-coveralls\n  - travis_retry python setup.py dev\nscript: py.test --runslow --cov-config=.coveragerc-nogpu\nafter_success:\n  - coveralls\ncache:\n  - apt\n  - directories:\n    - $HOME/.cache/pip\n    - $HOME/.theano\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 1.2255859375,
          "content": "Changelog\n---------\n\n0.1 (2015-08-13)\n~~~~~~~~~~~~~~~~\n\nFirst release.\n\n* core contributors, in alphabetical order:\n\n  * Eric Battenberg (@ebattenberg)\n  * Sander Dieleman (@benanne)\n  * Daniel Nouri (@dnouri)\n  * Eben Olson (@ebenolson)\n  * Aäron van den Oord (@avdnoord)\n  * Colin Raffel (@craffel)\n  * Jan Schlüter (@f0k)\n  * Søren Kaae Sønderby (@skaae)\n\n* extra contributors, in chronological order:\n\n  * Daniel Maturana (@dimatura): documentation, cuDNN layers, LRN\n  * Jonas Degrave (@317070): get_all_param_values() fix\n  * Jack Kelly (@JackKelly): help with recurrent layers\n  * Gábor Takács (@takacsg84): support broadcastable parameters in lasagne.updates\n  * Diogo Moitinho de Almeida (@diogo149): MNIST example fixes\n  * Brian McFee (@bmcfee): MaxPool2DLayer fix\n  * Martin Thoma (@MartinThoma): documentation\n  * Jeffrey De Fauw (@JeffreyDF): documentation, ADAM fix\n  * Michael Heilman (@mheilman): NonlinearityLayer, lasagne.random\n  * Gregory Sanders (@instagibbs): documentation fix\n  * Jon Crall (@erotemic): check for non-positive input shapes\n  * Hendrik Weideman (@hjweide): set_all_param_values() test, MaxPool2DCCLayer fix\n  * Kashif Rasul (@kashif): ADAM simplification\n  * Peter de Rivaz (@peterderivaz): documentation fix\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4130859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2015 Lasagne contributors\n\nLasagne uses a shared copyright model: each contributor holds copyright over\ntheir contributions to Lasagne. The project versioning records all such\ncontribution and copyright details.\nBy contributing to the Lasagne repository through pull-request, comment,\nor otherwise, the contributor releases their content to the license and\ncopyright terms herein.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2421875,
          "content": "include *.rst\ninclude *.txt\ninclude LICENSE\n\nrecursive-include lasagne/tests *.py\ninclude .coveragerc\nrecursive-include examples *.py\nrecursive-include docs *.rst conf.py *.css Makefile\n\nrecursive-exclude * __pycache__\nrecursive-exclude * *.py[co]\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.6513671875,
          "content": ".. image:: https://readthedocs.org/projects/lasagne/badge/\n    :target: http://lasagne.readthedocs.org/en/latest/\n\n.. image:: https://travis-ci.org/Lasagne/Lasagne.svg\n    :target: https://travis-ci.org/Lasagne/Lasagne\n\n.. image:: https://img.shields.io/coveralls/Lasagne/Lasagne.svg\n    :target: https://coveralls.io/r/Lasagne/Lasagne\n\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg\n    :target: https://github.com/Lasagne/Lasagne/blob/master/LICENSE\n\n.. image:: https://zenodo.org/badge/16974/Lasagne/Lasagne.svg\n   :target: https://zenodo.org/badge/latestdoi/16974/Lasagne/Lasagne\n\nLasagne\n=======\n\nLasagne is a lightweight library to build and train neural networks in Theano.\nIts main features are:\n\n* Supports feed-forward networks such as Convolutional Neural Networks (CNNs),\n  recurrent networks including Long Short-Term Memory (LSTM), and any\n  combination thereof\n* Allows architectures of multiple inputs and multiple outputs, including\n  auxiliary classifiers\n* Many optimization methods including Nesterov momentum, RMSprop and ADAM\n* Freely definable cost function and no need to derive gradients due to\n  Theano's symbolic differentiation\n* Transparent support of CPUs and GPUs due to Theano's expression compiler\n\nIts design is governed by `six principles\n<http://lasagne.readthedocs.org/en/latest/user/development.html#philosophy>`_:\n\n* Simplicity: Be easy to use, easy to understand and easy to extend, to\n  facilitate use in research\n* Transparency: Do not hide Theano behind abstractions, directly process and\n  return Theano expressions or Python / numpy data types\n* Modularity: Allow all parts (layers, regularizers, optimizers, ...) to be\n  used independently of Lasagne\n* Pragmatism: Make common use cases easy, do not overrate uncommon cases\n* Restraint: Do not obstruct users with features they decide not to use\n* Focus: \"Do one thing and do it well\"\n\n\nInstallation\n------------\n\nIn short, you can install a known compatible version of Theano and the latest\nLasagne development version via:\n\n.. code-block:: bash\n\n  pip install -r https://raw.githubusercontent.com/Lasagne/Lasagne/master/requirements.txt\n  pip install https://github.com/Lasagne/Lasagne/archive/master.zip\n\nFor more details and alternatives, please see the `Installation instructions\n<http://lasagne.readthedocs.org/en/latest/user/installation.html>`_.\n\n\nDocumentation\n-------------\n\nDocumentation is available online: http://lasagne.readthedocs.org/\n\nFor support, please refer to the `lasagne-users mailing list\n<https://groups.google.com/forum/#!forum/lasagne-users>`_.\n\n\nExample\n-------\n\n.. code-block:: python\n\n  import lasagne\n  import theano\n  import theano.tensor as T\n\n  # create Theano variables for input and target minibatch\n  input_var = T.tensor4('X')\n  target_var = T.ivector('y')\n\n  # create a small convolutional neural network\n  from lasagne.nonlinearities import leaky_rectify, softmax\n  network = lasagne.layers.InputLayer((None, 3, 32, 32), input_var)\n  network = lasagne.layers.Conv2DLayer(network, 64, (3, 3),\n                                       nonlinearity=leaky_rectify)\n  network = lasagne.layers.Conv2DLayer(network, 32, (3, 3),\n                                       nonlinearity=leaky_rectify)\n  network = lasagne.layers.Pool2DLayer(network, (3, 3), stride=2, mode='max')\n  network = lasagne.layers.DenseLayer(lasagne.layers.dropout(network, 0.5),\n                                      128, nonlinearity=leaky_rectify,\n                                      W=lasagne.init.Orthogonal())\n  network = lasagne.layers.DenseLayer(lasagne.layers.dropout(network, 0.5),\n                                      10, nonlinearity=softmax)\n\n  # create loss function\n  prediction = lasagne.layers.get_output(network)\n  loss = lasagne.objectives.categorical_crossentropy(prediction, target_var)\n  loss = loss.mean() + 1e-4 * lasagne.regularization.regularize_network_params(\n          network, lasagne.regularization.l2)\n\n  # create parameter update expressions\n  params = lasagne.layers.get_all_params(network, trainable=True)\n  updates = lasagne.updates.nesterov_momentum(loss, params, learning_rate=0.01,\n                                              momentum=0.9)\n\n  # compile training function that updates parameters and returns training loss\n  train_fn = theano.function([input_var, target_var], loss, updates=updates)\n\n  # train network (assuming you've got some training data in numpy arrays)\n  for epoch in range(100):\n      loss = 0\n      for input_batch, target_batch in training_data:\n          loss += train_fn(input_batch, target_batch)\n      print(\"Epoch %d: Loss %g\" % (epoch + 1, loss / len(training_data)))\n\n  # use trained network for predictions\n  test_prediction = lasagne.layers.get_output(network, deterministic=True)\n  predict_fn = theano.function([input_var], T.argmax(test_prediction, axis=1))\n  print(\"Predicted class for first test input: %r\" % predict_fn(test_data[0]))\n\nFor a fully-functional example, see `examples/mnist.py <examples/mnist.py>`_,\nand check the `Tutorial\n<http://lasagne.readthedocs.org/en/latest/user/tutorial.html>`_ for in-depth\nexplanations of the same. More examples, code snippets and reproductions of\nrecent research papers are maintained in the separate `Lasagne Recipes\n<https://github.com/Lasagne/Recipes>`_ repository.\n\n\nCitation\n--------\n\nIf you find Lasagne useful for your scientific work, please consider citing it\nin resulting publications. We provide a ready-to-use `BibTeX entry for citing\nLasagne <https://github.com/Lasagne/Lasagne/wiki/Lasagne-Citation-(BibTeX)>`_.\n\n\nDevelopment\n-----------\n\nLasagne is a work in progress, input is welcome.\n\nPlease see the `Contribution instructions\n<http://lasagne.readthedocs.org/en/latest/user/development.html>`_ for details\non how you can contribute!\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lasagne",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.1181640625,
          "content": "-r requirements.txt\nmock\nnumpydoc\npep8==1.6.2\npytest\npytest-cov\npytest-pep8\nJinja2==2.7.3\nSphinx==1.2.3\nsphinx_rtd_theme\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "Theano>=0.8.2\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1904296875,
          "content": "[aliases]\ndev = develop easy_install lasagne[testing]\n\n[tool:pytest]\naddopts =\n    -v --doctest-modules\n    --cov=lasagne --cov-report=term-missing\n    --pep8\n    lasagne/\npython_files = test*py\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.09765625,
          "content": "import os\nimport re\nfrom setuptools import find_packages\nfrom setuptools import setup\n# We need io.open() (Python 3's default open) to specify file encodings \nimport io\n\nhere = os.path.abspath(os.path.dirname(__file__))\ntry:\n    # obtain version string from __init__.py\n    # Read ASCII file with builtin open() so __version__ is str in Python 2 and 3\n    with open(os.path.join(here, 'lasagne', '__init__.py'), 'r') as f:\n        init_py = f.read()\n    version = re.search('__version__ = \"(.*)\"', init_py).groups()[0]\nexcept Exception:\n    version = ''\ntry:\n    # obtain long description from README and CHANGES\n    # Specify encoding to get a unicode type in Python 2 and a str in Python 3\n    with io.open(os.path.join(here, 'README.rst'), 'r', encoding='utf-8') as f:\n        README = f.read()\n    with io.open(os.path.join(here, 'CHANGES.rst'), 'r', encoding='utf-8') as f:\n        CHANGES = f.read()\nexcept IOError:\n    README = CHANGES = ''\n\ninstall_requires = [\n    'numpy',\n    # 'Theano',  # we require a development version, see requirements.txt\n    ]\n\ntests_require = [\n    'mock',\n    'pytest',\n    'pytest-cov',\n    'pytest-pep8',\n    ]\n\nsetup(\n    name=\"Lasagne\",\n    version=version,\n    description=\"A lightweight library to build and train neural networks \"\n                \"in Theano\",\n    long_description=\"\\n\\n\".join([README, CHANGES]),\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 2.7\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.4\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n        ],\n    keywords=\"\",\n    author=\"Lasagne contributors\",\n    author_email=\"lasagne-users@googlegroups.com\",\n    url=\"https://github.com/Lasagne/Lasagne\",\n    license=\"MIT\",\n    packages=find_packages(),\n    include_package_data=False,\n    zip_safe=False,\n    install_requires=install_requires,\n    extras_require={\n        'testing': tests_require,\n        },\n    )\n"
        }
      ]
    }
  ]
}