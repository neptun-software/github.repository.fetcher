{
  "metadata": {
    "timestamp": 1736559904317,
    "page": 661,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "MrGemy95/Tensorflow-Project-Template",
      "stars": 3615,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2548828125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n.idea\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n/experiments/\n.idea/Tensorflow-architecture-templete.iml\n.idea/misc.xml\n.idea/modules.xml\n.idea/workspace.xml\nexperiments/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.779296875,
          "content": "# Tensorflow Project Template\nA simple and well designed structure is essential for any Deep Learning project, so after a lot of practice and contributing in tensorflow projects here's a tensorflow project template that combines   **simplcity**, **best practice for folder structure** and **good OOP design**.\nThe main idea is that there's much stuff you do every time you start your tensorflow project, so wrapping all this shared stuff will help you to change just the core idea every time you start a new tensorflow project.\n\n**So, here's a simple tensorflow template that help you get into your main project faster and just focus on your core (Model, Training, ...etc)**\n# Table Of Contents\n\n-  [In a Nutshell](#in-a-nutshell)\n-  [In Details](#in-details)\n    -  [Project architecture](#project-architecture)\n    -  [Folder structure](#folder-structure)\n    -  [ Main Components](#main-components)\n        -  [Models](#models)\n        -  [Trainer](#trainer)\n        -  [Data Loader](#data-loader)\n        -  [Logger](#logger)\n        -  [Configuration](#configuration)\n        -  [Main](#main)\n -  [Future Work](#future-work)\n -  [Contributing](#contributing)\n -  [Acknowledgments](#acknowledgments)\n\n# In a Nutshell   \nIn a nutshell here's how to use this template, so **for example** assume you want to implement VGG model so you should do the following:\n-  In models folder create a class named VGG that inherit the \"base_model\" class\n\n```python\n\n    class VGGModel(BaseModel):\n        def __init__(self, config):\n            super(VGGModel, self).__init__(config)\n            #call the build_model and init_saver functions.\n            self.build_model() \n            self.init_saver() \n  ```\n- Override these two functions \"build_model\" where you implement the vgg model, and \"init_saver\" where you define a tensorflow saver, then call them in the initalizer.\n    \n```python\n     def build_model(self):\n        # here you build the tensorflow graph of any model you want and also define the loss.\n        pass\n            \n     def init_saver(self):\n        # here you initalize the tensorflow saver that will be used in saving the checkpoints.\n        self.saver = tf.train.Saver(max_to_keep=self.config.max_to_keep)\n\n  ```\n   \n- In trainers folder create a VGG trainer that inherit from \"base_train\" class\n```python\n\n    class VGGTrainer(BaseTrain):\n        def __init__(self, sess, model, data, config, logger):\n            super(VGGTrainer, self).__init__(sess, model, data, config, logger)\n```\n- Override these two functions \"train_step\", \"train_epoch\" where you write the logic of the training process\n```python\n\n    def train_epoch(self):\n        \"\"\"\n       implement the logic of epoch:\n       -loop on the number of iterations in the config and call the train step\n       -add any summaries you want using the summary\n        \"\"\"\n        pass\n\n    def train_step(self):\n        \"\"\"\n       implement the logic of the train step\n       - run the tensorflow session\n       - return any metrics you need to summarize\n       \"\"\"\n        pass\n\n```\n- In main file, you create the session and instances of the following objects \"Model\", \"Logger\", \"Data_Generator\", \"Trainer\", and config\n```python\n    sess = tf.Session()\n    # create instance of the model you want\n    model = VGGModel(config)\n    # create your data generator\n    data = DataGenerator(config)\n    # create tensorboard logger\n    logger = Logger(sess, config)\n```\n- Pass the all these objects to the trainer object, and start your training by calling \"trainer.train()\" \n```python\n    trainer = VGGTrainer(sess, model, data, config, logger)\n\n    # here you train your model\n    trainer.train()\n\n```\n**You will find a template file and a simple example in the model and trainer folder that shows you how to try your first model simply.**\n\n\n# In Details\n\nProject architecture \n--------------\n\n<div align=\"center\">\n\n<img align=\"center\" hight=\"600\" width=\"600\" src=\"https://github.com/Mrgemy95/Tensorflow-Project-Templete/blob/master/figures/diagram.png?raw=true\">\n\n</div>\n\n\nFolder structure\n--------------\n\n```\n├──  base\n│   ├── base_model.py   - this file contains the abstract class of the model.\n│   └── base_train.py   - this file contains the abstract class of the trainer.\n│\n│\n├── model               - this folder contains any model of your project.\n│   └── example_model.py\n│\n│\n├── trainer             - this folder contains trainers of your project.\n│   └── example_trainer.py\n│   \n├──  mains              - here's the main(s) of your project (you may need more than one main).\n│    └── example_main.py  - here's an example of main that is responsible for the whole pipeline.\n\n│  \n├──  data _loader  \n│    └── data_generator.py  - here's the data_generator that is responsible for all data handling.\n│ \n└── utils\n     ├── logger.py\n     └── any_other_utils_you_need\n\n```\n\n\n## Main Components\n\n### Models\n--------------\n- #### **Base model**\n    \n    Base model is an abstract class that must be Inherited by any model you create, the idea behind this is that there's much shared stuff between all models.\n    The base model contains:\n    - ***Save*** -This function to save a checkpoint to the desk. \n    - ***Load*** -This function to load a checkpoint from the desk.\n    - ***Cur_epoch, Global_step counters*** -These variables to keep track of the current epoch and global step.\n    - ***Init_Saver*** An abstract function to initialize the saver used for saving and loading the checkpoint, ***Note***: override this function in the model you want to implement.\n    - ***Build_model*** Here's an abstract function to define the model, ***Note***: override this function in the model you want to implement.\n- #### **Your model**\n    Here's where you implement your model.\n    So you should :\n    - Create your model class and inherit the base_model class\n    - override \"build_model\" where you write the tensorflow model you want\n    - override \"init_save\" where you create a tensorflow saver to use it to save and load checkpoint\n    - call the \"build_model\" and \"init_saver\" in the initializer.\n\n### Trainer\n--------------\n- #### **Base trainer**\n    Base trainer is an abstract class that just wrap the training process.\n    \n- #### **Your trainer**\n     Here's what you should implement in your trainer.\n    1. Create your trainer class and inherit the base_trainer class.\n    2. override these two functions \"train_step\", \"train_epoch\" where you implement the training process of each step and each epoch.\n### Data Loader\nThis class is responsible for all data handling and processing and provide an easy interface that can be used by the trainer.\n### Logger\nThis class is responsible for the tensorboard summary, in your trainer create a dictionary of all tensorflow variables you want to summarize then pass this dictionary to logger.summarize().\n\n\nThis class also supports reporting to **Comet.ml** which allows you to see all your hyper-params, metrics, graphs, dependencies and more including real-time metric.\nAdd your API key [in the configuration file](configs/example.json#L9):\n\nFor example: \"comet_api_key\": \"your key here\"\n\n\n### Comet.ml Integration\nThis template also supports reporting to Comet.ml which allows you to see all your hyper-params, metrics, graphs, dependencies and more including real-time metric. \n\nAdd your API key [in the configuration file](configs/example.json#L9):\n\n\nFor example:  `\"comet_api_key\": \"your key here\"` \n\nHere's how it looks after you start training:\n<div align=\"center\">\n\n<img align=\"center\" width=\"800\" src=\"https://comet-ml.nyc3.digitaloceanspaces.com/CometDemo.gif\">\n\n</div>\n\nYou can also link your Github repository to your comet.ml project for full version control. \n[Here's a live page showing the example from this repo](https://www.comet.ml/gidim/tensorflow-project-template/caba580d8d1547ccaed982693a645507/chart)\n\n\n\n### Configuration\nI use Json as configuration method and then parse it, so write all configs you want then parse it using \"utils/config/process_config\" and pass this configuration object to all other objects.\n### Main\nHere's where you combine all previous part.\n1. Parse the config file.\n2. Create a tensorflow session.\n2. Create an instance of \"Model\", \"Data_Generator\" and \"Logger\" and parse the config to all of them.\n3. Create an instance of \"Trainer\" and pass all previous objects to it.\n4. Now you can train your model by calling \"Trainer.train()\"\n\n\n# Future Work\n- Replace the data loader part with new tensorflow dataset API.\n\n\n# Contributing\nAny kind of enhancement or contribution is welcomed.\n\n\n# Acknowledgments\nThanks for my colleague  [Mo'men Abdelrazek](https://github.com/moemen95) for contributing in this work.\nand thanks for [Mohamed Zahran](https://github.com/moh3th1) for the review.\n**Thanks for Jtoy for including the repo in  [Awesome Tensorflow](https://github.com/jtoy/awesome-tensorflow).** \n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_loader",
          "type": "tree",
          "content": null
        },
        {
          "name": "figures",
          "type": "tree",
          "content": null
        },
        {
          "name": "mains",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "trainers",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}