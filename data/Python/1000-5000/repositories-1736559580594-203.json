{
  "metadata": {
    "timestamp": 1736559580594,
    "page": 203,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lincolnloop/python-qrcode",
      "stars": 4498,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.236328125,
          "content": "# editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.py]\nindent_size = 4\nmax_line_length = 88\n\n[*.{rst,md}]\nindent_size = 4\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.072265625,
          "content": "# Ruff format the entire project\n5d60da17455607e9c8b7e7fef9940d20027894f2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.111328125,
          "content": "*.pyc\n.coverage\n.coverage.*\n.idea/\n.pytest_cache/\n.tox\nbuild/\ncov.xml\ndist/\nhtmlcov/\npoetry.lock\nqrcode.egg-info/\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 7.8994140625,
          "content": "==========\nChange log\n==========\n\n8.0 ( 27 September 2024)\n========================\n\n- Added support for Python 3.11 and 3.12.\n\n- Drop support for Python <=3.8.\n\n- Change local development setup to use Poetry_.\n\n- Testsuite and code quality checks are done through Github Actions.\n\n- Code quality and formatting utilises ruff_.\n\n- Removed ``typing_extensions`` as a dependency, as it's no longer required with\n  having Python 3.9+ as a requirement.\n\n- Only allow high error correction rate (`qrcode.ERROR_CORRECT_H`) when generating\n  QR codes with embedded images to ensure content is readable\n\n.. _Poetry: https://python-poetry.org\n.. _ruff: https://astral.sh/ruff\n\n\n7.4.2 (6 February 2023)\n=======================\n\n- Allow ``pypng`` factory to allow for saving to a string (like\n  ``qr.save(\"some_file.png\")``) in addition to file-like objects.\n\n\n7.4.1 (3 February 2023)\n=======================\n\n- Fix bad over-optimization in v7.4 that broke large QR codes. Thanks to\n  mattiasj-axis!\n\n\n7.4 (1 February 2023)\n=====================\n\n- Restructure the factory drawers, allowing different shapes in SVG image\n  factories as well.\n\n- Add a ``--factory-drawer`` option to the ``qr`` console script.\n\n- Optimize the output for the ``SVGPathImage`` factory (more than 30% reduction\n  in file sizes).\n\n- Add a ``pypng`` image factory as a pure Python PNG solution. If ``pillow`` is\n  *not* installed, then this becomes the default factory.\n\n- The ``pymaging`` image factory has been removed, but its factory shortcut and\n  the actual PymagingImage factory class now just link to the PyPNGImage\n  factory.\n\n\n7.3.1 (1 October 2021)\n======================\n\n- Improvements for embedded image.\n\n\n7.3 (19 August 2021)\n====================\n\n- Skip color mask if QR is black and white\n\n\n7.2 (19 July 2021)\n==================\n\n- Add Styled PIL image factory, allowing different color masks and shapes in QR codes\n\n- Small performance inprovement\n\n- Add check for border size parameter\n\n\n7.1 (1 July 2021)\n=================\n\n- Add --ascii parameter to command line interface allowing to output ascii when stdout is piped\n\n- Add --output parameter to command line interface to specify output file\n\n- Accept RGB tuples in fill_color and back_color\n\n- Add to_string method to SVG images\n\n- Replace inline styles with SVG attributes to avoid CSP issues\n\n- Add Python3.10 to supported versions\n\n\n7.0 (29 June 2021)\n==================\n\n- Drop Python < 3.6 support.\n\n\n6.1 (14 January 2019)\n=====================\n\n- Fix short chunks of data not being optimized to the correct mode.\n\n- Tests fixed for Python 3\n\n\n6.0 (23 March 2018)\n===================\n\n- Fix optimize length being ignored in ``QRCode.add_data``.\n\n- Better calculation of the best mask pattern and related optimizations. Big\n  thanks to cryptogun!\n\n\n5.3 (18 May 2016)\n=================\n\n* Fix incomplete block table for QR version 15. Thanks Rodrigo Queiro for the\n  report and Jacob Welsh for the investigation and fix.\n\n* Avoid unnecessary dependency for non MS platforms, thanks to Noah Vesely.\n\n* Make ``BaseImage.get_image()`` actually work.\n\n\n5.2 (25 Jan 2016)\n=================\n\n* Add ``--error-correction`` option to qr script.\n\n* Fix script piping to stdout in Python 3 and reading non-UTF-8 characters in\n  Python 3.\n\n* Fix script piping in Windows.\n\n* Add some useful behind-the-curtain methods for tinkerers.\n\n* Fix terminal output when using Python 2.6\n\n* Fix terminal output to display correctly on MS command line.\n\n5.2.1\n-----\n\n* Small fix to terminal output in Python 3 (and fix tests)\n\n5.2.2\n-----\n\n* Revert some terminal changes from 5.2 that broke Python 3's real life tty\n  code generation and introduce a better way from Jacob Welsh.\n\n\n5.1 (22 Oct 2014)\n=================\n\n* Make ``qr`` script work in Windows. Thanks Ionel Cristian Mărieș\n\n* Fixed print_ascii function in Python 3.\n\n* Out-of-bounds code version numbers are handled more consistently with a\n  ValueError.\n\n* Much better test coverage (now only officially supporting Python 2.6+)\n\n\n5.0 (17 Jun 2014)\n=================\n\n* Speed optimizations.\n\n* Change the output when using the ``qr`` script to use ASCII rather than\n  just colors, better using the terminal real estate.\n\n* Fix a bug in passing bytecode data directly when in Python 3.\n\n* Substation speed optimizations to best-fit algorithm (thanks Jacob Welsh!).\n\n* Introduce a ``print_ascii`` method and use it as the default for the ``qr``\n  script rather than ``print_tty``.\n\n5.0.1\n-----\n\n* Update version numbers correctly.\n\n\n4.0 (4 Sep 2013)\n================\n\n* Made qrcode work on Python 2.4 - Thanks tcely.\n  Note: officially, qrcode only supports 2.5+.\n\n* Support pure-python PNG generation (via pymaging) for Python 2.6+ -- thanks\n  Adam Wisniewski!\n\n* SVG image generation now supports alternate sizing (the default box size of\n  10 == 1mm per rectangle).\n\n* SVG path image generation allows cleaner SVG output by combining all QR rects\n  into a single path. Thank you, Viktor Stískala.\n\n* Added some extra simple SVG factories that fill the background white.\n\n4.0.1\n-----\n\n* Fix the pymaging backend not able to save the image to a buffer. Thanks ilj!\n\n4.0.2\n-----\n\n* Fix incorrect regex causing a comma to be considered part of the alphanumeric\n  set.\n\n* Switch to using setuptools for setup.py.\n\n4.0.3\n-----\n\n* Fix bad QR code generation due to the regex comma fix in version 4.0.2.\n\n4.0.4\n-----\n\n* Bad version number for previous hotfix release.\n\n\n3.1 (12 Aug 2013)\n=================\n\n* Important fixes for incorrect matches of the alphanumeric encoding mode.\n  Previously, the pattern would match if a single line was alphanumeric only\n  (even if others wern't). Also, the two characters ``{`` and ``}`` had snuck\n  in as valid characters. Thanks to Eran Tromer for the report and fix.\n\n* Optimized chunking -- if the parts of the data stream can be encoded more\n  efficiently, the data will be split into chunks of the most efficient modes.\n\n3.1.1\n-----\n\n* Update change log to contain version 3.1 changes. :P\n\n* Give the ``qr`` script an ``--optimize`` argument to control the chunk\n  optimization setting.\n\n\n3.0 (25 Jun 2013)\n=================\n\n* Python 3 support.\n\n* Add QRCode.get_matrix, an easy way to get the matrix array of a QR code\n  including the border. Thanks Hugh Rawlinson.\n\n* Add in a workaround so that Python 2.6 users can use SVG generation (they\n  must install ``lxml``).\n\n* Some initial tests! And tox support (``pip install tox``) for testing across\n  Python platforms.\n\n\n2.7 (5 Mar 2013)\n================\n\n* Fix incorrect termination padding.\n\n\n2.6 (2 Apr 2013)\n================\n\n* Fix the first four columns incorrectly shifted by one. Thanks to Josep\n  Gómez-Suay for the report and fix.\n\n* Fix strings within 4 bits of the QR version limit being incorrectly\n  terminated. Thanks to zhjie231 for the report.\n\n\n2.5 (12 Mar 2013)\n=================\n\n* The PilImage wrapper is more transparent - you can use any methods or\n  attributes available to the underlying PIL Image instance.\n\n* Fixed the first column of the QR Code coming up empty! Thanks to BecoKo.\n\n2.5.1\n-----\n\n* Fix installation error on Windows.\n\n\n2.4 (23 Apr 2012)\n=================\n\n* Use a pluggable backend system for generating images, thanks to Branko Čibej!\n  Comes with PIL and SVG backends built in.\n\n2.4.1\n-----\n\n* Fix a packaging issue\n\n2.4.2\n-----\n\n* Added a ``show`` method to the PIL image wrapper so the ``run_example``\n  function actually works.\n\n\n2.3 (29 Jan 2012)\n=================\n\n* When adding data, auto-select the more efficient encoding methods for numbers\n  and alphanumeric data (KANJI still not supported).\n\n2.3.1\n-----\n\n* Encode unicode to utf-8 bytestrings when adding data to a QRCode.\n\n\n2.2 (18 Jan 2012)\n=================\n\n* Fixed tty output to work on both white and black backgrounds.\n\n* Added `border` parameter to allow customizing of the number of boxes used to\n  create the border of the QR code\n\n\n2.1 (17 Jan 2012)\n=================\n\n* Added a ``qr`` script which can be used to output a qr code to the tty using\n  background colors, or to a file via a pipe.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.0927734375,
          "content": "Copyright (c) 2011, Lincoln Loop\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n    * Neither the package name nor the names of its contributors may be\n      used to endorse or promote products derived from this software without\n      specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE \nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n-------------------------------------------------------------------------------\n\n\nOriginal text and license from the pyqrnative package where this was forked\nfrom (http://code.google.com/p/pyqrnative):\n\n#Ported from the Javascript library by Sam Curren\n#\n#QRCode for Javascript\n#http://d-project.googlecode.com/svn/trunk/misc/qrcode/js/qrcode.js\n#\n#Copyright (c) 2009 Kazuhiko Arase\n#\n#URL: http://www.d-project.com/\n#\n#Licensed under the MIT license:\n#   http://www.opensource.org/licenses/mit-license.php\n#\n# The word \"QR Code\" is registered trademark of\n# DENSO WAVE INCORPORATED\n#   http://www.denso-wave.com/qrcode/faqpatent-e.html\n"
        },
        {
          "name": "PACKAGING.rst",
          "type": "blob",
          "size": 0.1982421875,
          "content": "Packaging quick reminder\n========================\n\nMake sure maintainer dependencies are installed::\n\n    poetry install\n\nRun release command and follow prompt instructions::\n\n    poetry run fullrelease\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 7.74609375,
          "content": "=============================\nPure python QR Code generator\n=============================\n\nGenerate QR codes.\n\nA standard install uses pypng_ to generate PNG files and can also render QR\ncodes directly to the console. A standard install is just::\n\n    pip install qrcode\n\nFor more image functionality, install qrcode with the ``pil`` dependency so\nthat pillow_ is installed and can be used for generating images::\n\n    pip install \"qrcode[pil]\"\n\n.. _pypng: https://pypi.python.org/pypi/pypng\n.. _pillow: https://pypi.python.org/pypi/Pillow\n\n\nWhat is a QR Code?\n==================\n\nA Quick Response code is a two-dimensional pictographic code used for its fast\nreadability and comparatively large storage capacity. The code consists of\nblack modules arranged in a square pattern on a white background. The\ninformation encoded can be made up of any kind of data (e.g., binary,\nalphanumeric, or Kanji symbols)\n\nUsage\n=====\n\nFrom the command line, use the installed ``qr`` script::\n\n    qr \"Some text\" > test.png\n\nOr in Python, use the ``make`` shortcut function:\n\n.. code:: python\n\n    import qrcode\n    img = qrcode.make('Some data here')\n    type(img)  # qrcode.image.pil.PilImage\n    img.save(\"some_file.png\")\n\nAdvanced Usage\n--------------\n\nFor more control, use the ``QRCode`` class. For example:\n\n.. code:: python\n\n    import qrcode\n    qr = qrcode.QRCode(\n        version=1,\n        error_correction=qrcode.constants.ERROR_CORRECT_L,\n        box_size=10,\n        border=4,\n    )\n    qr.add_data('Some data')\n    qr.make(fit=True)\n\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\nThe ``version`` parameter is an integer from 1 to 40 that controls the size of\nthe QR Code (the smallest, version 1, is a 21x21 matrix).\nSet to ``None`` and use the ``fit`` parameter when making the code to determine\nthis automatically.\n\n``fill_color`` and ``back_color`` can change the background and the painting\ncolor of the QR, when using the default image factory. Both parameters accept\nRGB color tuples.\n\n.. code:: python\n\n\n    img = qr.make_image(back_color=(255, 195, 235), fill_color=(55, 95, 35))\n\nThe ``error_correction`` parameter controls the error correction used for the\nQR Code. The following four constants are made available on the ``qrcode``\npackage:\n\n``ERROR_CORRECT_L``\n    About 7% or less errors can be corrected.\n``ERROR_CORRECT_M`` (default)\n    About 15% or less errors can be corrected.\n``ERROR_CORRECT_Q``\n    About 25% or less errors can be corrected.\n``ERROR_CORRECT_H``.\n    About 30% or less errors can be corrected.\n\nThe ``box_size`` parameter controls how many pixels each \"box\" of the QR code\nis.\n\nThe ``border`` parameter controls how many boxes thick the border should be\n(the default is 4, which is the minimum according to the specs).\n\nOther image factories\n=====================\n\nYou can encode as SVG, or use a new pure Python image processor to encode to\nPNG images.\n\nThe Python examples below use the ``make`` shortcut. The same ``image_factory``\nkeyword argument is a valid option for the ``QRCode`` class for more advanced\nusage.\n\nSVG\n---\n\nYou can create the entire SVG or an SVG fragment. When building an entire SVG\nimage, you can use the factory that combines as a path (recommended, and\ndefault for the script) or a factory that creates a simple set of rectangles.\n\nFrom your command line::\n\n    qr --factory=svg-path \"Some text\" > test.svg\n    qr --factory=svg \"Some text\" > test.svg\n    qr --factory=svg-fragment \"Some text\" > test.svg\n\nOr in Python:\n\n.. code:: python\n\n    import qrcode\n    import qrcode.image.svg\n\n    if method == 'basic':\n        # Simple factory, just a set of rects.\n        factory = qrcode.image.svg.SvgImage\n    elif method == 'fragment':\n        # Fragment factory (also just a set of rects)\n        factory = qrcode.image.svg.SvgFragmentImage\n    else:\n        # Combined path factory, fixes white space that may occur when zooming\n        factory = qrcode.image.svg.SvgPathImage\n\n    img = qrcode.make('Some data here', image_factory=factory)\n\nTwo other related factories are available that work the same, but also fill the\nbackground of the SVG with white::\n\n    qrcode.image.svg.SvgFillImage\n    qrcode.image.svg.SvgPathFillImage\n\nThe ``QRCode.make_image()`` method forwards additional keyword arguments to the\nunderlying ElementTree XML library. This helps to fine tune the root element of\nthe resulting SVG:\n\n.. code:: python\n\n    import qrcode\n    qr = qrcode.QRCode(image_factory=qrcode.image.svg.SvgPathImage)\n    qr.add_data('Some data')\n    qr.make(fit=True)\n\n    img = qr.make_image(attrib={'class': 'some-css-class'})\n\nYou can convert the SVG image into strings using the ``to_string()`` method.\nAdditional keyword arguments are forwarded to ElementTrees ``tostring()``:\n\n.. code:: python\n\n    img.to_string(encoding='unicode')\n\n\nPure Python PNG\n---------------\n\nIf Pillow is not installed, the default image factory will be a pure Python PNG\nencoder that uses `pypng`.\n\nYou can use the factory explicitly from your command line::\n\n    qr --factory=png \"Some text\" > test.png\n\nOr in Python:\n\n.. code:: python\n\n    import qrcode\n    from qrcode.image.pure import PyPNGImage\n    img = qrcode.make('Some data here', image_factory=PyPNGImage)\n\n\nStyled Image\n------------\n\nWorks only with versions_ >=7.2 (SVG styled images require 7.4).\n\n.. _versions: https://github.com/lincolnloop/python-qrcode/blob/master/CHANGES.rst#72-19-july-2021\n\nTo apply styles to the QRCode, use the ``StyledPilImage`` or one of the\nstandard SVG_ image factories. These accept an optional ``module_drawer``\nparameter to control the shape of the QR Code.\n\nThese QR Codes are not guaranteed to work with all readers, so do some\nexperimentation and set the error correction to high (especially if embedding\nan image).\n\nOther PIL module drawers:\n\n    .. image:: doc/module_drawers.png\n\nFor SVGs, use ``SvgSquareDrawer``, ``SvgCircleDrawer``,\n``SvgPathSquareDrawer``, or ``SvgPathCircleDrawer``.\n\nThese all accept a ``size_ratio`` argument which allows for \"gapped\" squares or\ncircles by reducing this less than the default of ``Decimal(1)``.\n\n\nThe ``StyledPilImage`` additionally accepts an optional ``color_mask``\nparameter to change the colors of the QR Code, and an optional\n``embeded_image_path`` to embed an image in the center of the code.\n\nOther color masks:\n\n    .. image:: doc/color_masks.png\n\nHere is a code example to draw a QR code with rounded corners, radial gradient\nand an embedded image:\n\n.. code:: python\n\n    import qrcode\n    from qrcode.image.styledpil import StyledPilImage\n    from qrcode.image.styles.moduledrawers.pil import RoundedModuleDrawer\n    from qrcode.image.styles.colormasks import RadialGradiantColorMask\n\n    qr = qrcode.QRCode(error_correction=qrcode.constants.ERROR_CORRECT_H)\n    qr.add_data('Some data')\n\n    img_1 = qr.make_image(image_factory=StyledPilImage, module_drawer=RoundedModuleDrawer())\n    img_2 = qr.make_image(image_factory=StyledPilImage, color_mask=RadialGradiantColorMask())\n    img_3 = qr.make_image(image_factory=StyledPilImage, embeded_image_path=\"/path/to/image.png\")\n\nExamples\n========\n\nGet the text content from `print_ascii`:\n\n.. code:: python\n\n    import io\n    import qrcode\n    qr = qrcode.QRCode()\n    qr.add_data(\"Some text\")\n    f = io.StringIO()\n    qr.print_ascii(out=f)\n    f.seek(0)\n    print(f.read())\n\nThe `add_data` method will append data to the current QR object. To add new data by replacing previous content in the same object, first use clear method:\n\n.. code:: python\n\n    import qrcode\n    qr = qrcode.QRCode()\n    qr.add_data('Some data')\n    img = qr.make_image()\n    qr.clear()\n    qr.add_data('New data')\n    other_img = qr.make_image()\n\nPipe ascii output to text file in command line::\n\n    qr --ascii \"Some data\" > \"test.txt\"\n    cat test.txt\n\nAlternative to piping output to file to avoid PowerShell issues::\n\n    # qr \"Some data\" > test.png\n    qr --output=test.png \"Some data\"\n"
        },
        {
          "name": "TESTING.rst",
          "type": "blob",
          "size": 0.8154296875,
          "content": "Testing\n=======\n\nFirst, install dev dependencies::\n\n    poetry install --with dev\n\nTo run all tests, you'll need to install multiple Python interpreters. On a\nmodern Ubuntu distribution you can use ``add-apt-repository\nppa:deadsnakes/ppa``.\n\nDepending on if you can install the wheels directly for your OS, you may need\nthe libraries to build PIL, too. Here's the Ubuntu commands::\n\n    sudo apt-get install build-essential python-dev python3-dev\n    sudo apt-get install libjpeg8-dev zlib1g-dev\n\nHere's the OSX Homebrew command:\n\n    brew install libjpeg libtiff little-cms2 openjpeg webp\n\nFinally, just run ``tox``::\n\n    poetry run tox\n    # or\n    poetry shell\n    tox\n\nIf you want, you can test against a specific version like this: ``tox -e py312-pil``\n\n\nLinting\n-------\n\nRun `ruff` to check formatting::\n\n    ruff format qrcode\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.9921875,
          "content": "[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.poetry]\nname = \"qrcode\"\nversion = \"8.0\"\npackages = [{include = \"qrcode\"}]\ndescription = \"QR Code image generator\"\nauthors = [\"Lincoln Loop <info@lincolnloop.com>\"]\nlicense = \"BSD\"\nreadme = [\"README.rst\", \"CHANGES.rst\"]\nhomepage = \"https://github.com/lincolnloop/python-qrcode\"\nkeywords = [\"qr\", \"denso-wave\", \"IEC18004\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Intended Audience :: Developers\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Topic :: Multimedia :: Graphics\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n]\n\n# There is no support for data files yet.\n# https://github.com/python-poetry/poetry/issues/9519\n#\n# data_files = [\n#     { destination = \"share/man/man1\", from = [ \"doc/qr.1\" ] },\n# ]\n\n[tool.poetry.scripts]\nqr = 'qrcode.console_scripts:main'\n\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\ncolorama = {version = \"*\", platform = \"win32\"}\npypng = {version = \"*\", optional = true}\npillow = {version = \">=9.1.0\", optional = true}\n\n[tool.poetry.extras]\npil = [\"pillow\"]\npng = [\"pypng\"]\nall = [\"pypng\",\"pillow\"]\n\n[tool.poetry.group.dev.dependencies]\npytest = {version = \"*\"}\npytest-cov = {version = \"*\"}\ntox = {version = \"*\"}\nruff = {version = \"*\"}\npypng = {version = \"*\"}\npillow = {version = \">=9.1.0\"}\ndocutils = \"^0.21.2\"\nzest-releaser = {extras = [\"recommended\"], version = \"^9.2.0\"}\n\n[tool.zest-releaser]\nless-zeros = \"yes\"\nversion-levels = 2\ntag-format = \"v{version}\"\ntag-message = \"Version {version}\"\ntag-signing = \"yes\"\ndate-format =\" %%-d %%B %%Y\"\nprereleaser.middle = [\n    \"qrcode.release.update_manpage\"\n]\n"
        },
        {
          "name": "qrcode",
          "type": "tree",
          "content": null
        },
        {
          "name": "signing-key.asc",
          "type": "blob",
          "size": 2.1630859375,
          "content": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1\n\n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\nyCUbp4StCe9l6Jv7I6XTqofSZaQVkWNLwbOi\n=OWh8\n-----END PGP PUBLIC KEY BLOCK-----\n\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.2900390625,
          "content": "[tox]\ndistribute = False\nenvlist = py{39,310,311,312}-{pil,png,none}\nskip_missing_interpreters = True\n\n[gh-actions]\npython =\n    3.9: py39\n    3.10: py310\n    3.11: py311\n    3.12: py312\n\n[testenv]\ncommands =\n    pytest --cov\ndeps =\n    pil: pillow>=9.1.0\n    png: pypng\n    pytest\n    pytest-cov\n"
        }
      ]
    }
  ]
}