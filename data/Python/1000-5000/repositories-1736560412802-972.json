{
  "metadata": {
    "timestamp": 1736560412802,
    "page": 972,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "archivy/archivy",
      "stars": 3222,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1220703125,
          "content": "archivy/static/*.js linguist-vendored\narchivy/static/math.css linguist-vendored\narchivy/static/monokai.css linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9951171875,
          "content": "# Source for the following rules: https://raw.githubusercontent.com/github/gitignore/master/Python.gitignore\n# Byte-compiled / optimized / DLL files\n.flaskenv\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# pyenv\n.python-version\n\n# Environments\n.env\n.venv\nenv/\nvenv/*\nENV/\nenv.bak/\nvenv.bak/\ndb.json\ndata/\n.vim/\n.vscode/\n"
        },
        {
          "name": "API.md",
          "type": "blob",
          "size": 3.5283203125,
          "content": "\n\n# API documentation\n\nThe archivy api allows you to interact with your archivy instance through HTTP. This allows a complete, programmatic access to the archivy's functionality.\n\nAll these requests must be made by an authenticated user. For example, using the python `requests` module:\n\n```python\nimport requests\n# we create a new session that will allow us to login once\ns = requests.session()\n\nINSTANCE_URL = <your instance url>\ns.post(f\"{INSTANCE_URL}/api/login\", auth=(<username>, <password>))\n\n# once you've logged in - you can make authenticated requests to the api, like:\nresp = s.get(f\"{INSTANCE_URL}/api/dataobjs\").content)\n```\n\n## API spec\nThis is an api specification for the routes you might find useful in your scripts. The url prefix for all the requests is `/api`.\n\n### General routes\n\n| Route name    | Parameters                                                   | Description                                          |\n| ------------- | ------------------------------------------------------------ | ---------------------------------------------------- |\n| POST `/login` | [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication): username and password | Logs you in with your archivy username and password  |\n| GET `/search` | `query`: search query                                        | Fetches elasticsearch results for your search terms. |\n\n\n\n### Folders\n\n| Route name               | Parameters                                                   | Description                                                  |\n| ------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| POST `/folders/new`      | `path`: path of new directory For example, if you want to create the directory `trees` in the existing directory `nature`, `path = \"nature/trees\"` | Allows you to create new directories                         |\n| DELETE `/folders/delete` | `path`: path of directory to delete. For example, if you want to delete the `trees` dir in `nature`, `path = natures/trees` | Deletes existing directories. Also works if the directories contain data, which will be deleted with it. |\n\n### Dataobjs\n\n| Route name            | Parameters                                                   | Description                                                  |\n| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| POST `/notes`         | `title`, `content`, `desc`, `tags`: array of tags to associate with the note, `path`: string with the relative dir in which the note should be stored. | Creates a new note in the knowledge base. The only required parameter is the title of the note. |\n| POST `/bookmarks`     | `url`, `desc`, `tags`: array of tags to associate with the bookmark, `path`: string with the relative dir in which the note should be stored. | Stores a new bookmark. Only required parameter is `url`.     |\n| GET `/dataobjs`       |                                                              | Returns an array of all dataobjs with their title, id, contents, url, path etc... This request is resource-heavy so we might need to consider not sending the large contents. |\n| GET `/dataobjs/id`    |                                                              | Returns data for **one** dataobj, specified by his id.       |\n| DELETE `/dataobjs/id` |                                                              | Deletes specified dataobj.                                   |\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0380859375,
          "content": "MIT License\n\nCopyright (c) 2020 Uzay-G\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.12890625,
          "content": "include LICENSE\ninclude README.md\ninclude requirements.txt\nrecursive-include archivy/static *\nrecursive-include archivy/templates *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.443359375,
          "content": "![logo](docs/img/logo.png)\n\n# Archivy\n\nArchivy is a self-hostable knowledge repository that allows you to learn and retain information in your own personal and extensible wiki.\n\nFeatures:\n\n- If you add bookmarks, their web-pages contents' will be saved to ensure that you will **always** have access to it, following the idea of [digital preservation](https://jeffhuang.com/designed_to_last/). Archivy is also easily integrated with other services and your online accounts.\n- Knowledge base organization with bidirectional links between notes, and embedded tags.\n- Everything is a file! For ease of access and editing, all the content is stored in extended markdown files with yaml front matter. This format supports footnotes, LaTeX math rendering, syntax highlighting and more. \n- Extensible plugin system and API for power users to take control of their knowledge process\n- [syncing options](https://github.com/archivy/archivy-git)\n- Powerful and advanced search. \n- Image upload\n\n\n[demo video](https://www.uzpg.me/assets/images/archivy.mov)\n\n[Roadmap](https://github.com/archivy/archivy/issues/74#issuecomment-764828063)\n\nUpcoming:\n\n- Annotations\n- Multi User System with permission setup.\n\n## Quickstart\n\n\nInstall archivy with `pip install archivy`. Other installations methods are listed [here](https://archivy.github.io/install), including Docker.\n\nRun the `archivy init` command to setup you installation.\n\nThen run this and enter a password to create a new user:\n\n```bash\n$ archivy create-admin <username>\n```\n\nFinally, execute `archivy run` to serve the app. You can open it at https://localhost:5000 and login with the credentials you entered before.\n\nYou can then use archivy to create notes, bookmarks and then organize and store information.\n\nSee the [official docs](https://archivy.github.io) for information on other installation methods.\n\n## Community\n\nArchivy is dedicated to building **open and quality knowledge base software** through collaboration and community discussion.\n\nTo get news and updates on Archivy and its development, you can [watch the archivy repository](https://github.com/archivy/archivy) or follow [@uzpg_ on Twitter](https://twitter.com/uzpg_).\n\nYou can interact with us through the [issue board](https://github.com/archivy/archivy/issues) and the more casual [discord server](https://discord.gg/uQsqyxB).\n\nNote: If you're interested in the applications of AI to knowledge management, we're also working on this with [Espial](https://github.com/Uzay-G/espial).\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.1240234375,
          "content": "If you think you've found a security issue in Archivy, please contact halcyon@disroot.org before disclosing anything publicly.\n"
        },
        {
          "name": "archivy",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 5.8193359375,
          "content": "import shutil\nimport tempfile\nfrom pathlib import Path\n\nimport click\nimport pytest\nimport responses\n\nfrom archivy import app, cli\nfrom archivy.click_web import create_click_web_app, _flask_app\nfrom archivy.helpers import get_db, load_hooks\nfrom archivy.models import DataObj, User\n\n_app = None\n\n\n@pytest.fixture\ndef test_app():\n    \"\"\"Instantiate the app for each test with its own temporary data directory\n\n    Each test using this fixture will use its own db.json and its own data\n    directory, and then delete them.\n    \"\"\"\n    # create a temporary file to isolate the database for each test\n    global _app\n    if _app is None:\n        _app = create_click_web_app(cli, cli.cli, app)\n    app_dir = Path(tempfile.mkdtemp())\n    _app.config[\"INTERNAL_DIR\"] = str(app_dir)\n    _app.config[\"USER_DIR\"] = str(app_dir)\n    (app_dir / \"data\").mkdir()\n    (app_dir / \"images\").mkdir()\n\n    _app.config[\"TESTING\"] = True\n    _app.config[\"WTF_CSRF_ENABLED\"] = False\n    _app.config[\"SCRAPING_CONF\"][\"save_images\"] = False\n    # This setups a TinyDB instance, using the `app_dir` temporary\n    # directory defined above\n    # Required so that `flask.current_app` can be called in data.py and\n    # models.py\n    # See https://flask.palletsprojects.com/en/1.1.x/appcontext/ for more\n    # information.\n    with _app.app_context():\n        _ = get_db()\n        user = {\"username\": \"halcyon\", \"password\": \"password\"}\n\n        User(**user).insert()\n        yield _app\n\n    # close and remove the temporary database\n    shutil.rmtree(app_dir)\n\n\n@pytest.fixture\ndef client(test_app):\n    \"\"\"HTTP client for calling a test instance of the app\"\"\"\n    with test_app.test_client() as client:\n        client.post(\"/login\", data={\"username\": \"halcyon\", \"password\": \"password\"})\n        yield client\n\n\n@pytest.fixture\ndef mocked_responses():\n    \"\"\"\n    Setup mock responses using the `responses` python package.\n\n    Using https://pypi.org/project/responses/, this fixture will mock out\n    HTTP calls made by the requests library.\n\n    For example,\n    >>> mocked_responses.add(responses.GET, \"http://example.org\",\n     json={'key': 'val'}\n     )\n    >>> r = requests.get(\"http://example.org\")\n    >>> print(r.json())\n    {'key': 'val'}\n    \"\"\"\n    with responses.RequestsMock() as rsps:\n        # this ensure that all requests calls are mocked out\n        rsps.assert_all_requests_are_fired = False\n        yield rsps\n\n\n@pytest.fixture\ndef note_fixture(test_app):\n    note_dict = {\n        \"type\": \"note\",\n        \"title\": \"Test Note\",\n        \"tags\": [\"testing\", \"archivy\"],\n        \"path\": \"\",\n    }\n\n    with test_app.app_context():\n        note = DataObj(**note_dict)\n        note.insert()\n    return note\n\n\n@pytest.fixture\ndef bookmark_fixture(test_app, mocked_responses):\n    mocked_responses.add(\n        responses.GET,\n        \"https://example.com/\",\n        body=\"\"\"<html>\n        <head><title>Example</title></head><body><p>\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit\n        <script>console.log(\"this should be sanitized\")</script>\n        <img src=\"/images/image1.png\">\n        <a href=\"/testing-absolute-url\">link</a>\n        <a href\"/empty-link\"></a>\n         #embedded-tag# #tag2#\n        </p></body></html>\n    \"\"\",\n    )\n\n    datapoints = {\n        \"type\": \"bookmark\",\n        \"title\": \"Test Bookmark\",\n        \"tags\": [\"testing\", \"archivy\"],\n        \"path\": \"\",\n        \"url\": \"https://example.com/\",\n    }\n\n    with test_app.app_context():\n        bookmark = DataObj(**datapoints)\n        bookmark.process_bookmark_url()\n        bookmark.insert()\n    return bookmark\n\n\n@pytest.fixture\ndef different_bookmark_fixture(test_app, mocked_responses):\n    mocked_responses.add(\n        responses.GET,\n        \"https://example2.com/\",\n        body=\"\"\"<html>\n        <head><title>Example</title></head><body><p>asdsad<div class=\"nested\">aaa</div></body></html>\n    \"\"\",\n    )\n\n    datapoints = {\n        \"type\": \"bookmark\",\n        \"title\": \"Test Bookmark2\",\n        \"url\": \"https://example2.com/\",\n    }\n\n    with test_app.app_context():\n        bookmark = DataObj(**datapoints)\n        bookmark.process_bookmark_url()\n        bookmark.insert()\n    return bookmark\n\n\n@pytest.fixture()\ndef user_fixture(test_app):\n    user = {\"username\": \"__username__\", \"password\": \"__password__\"}\n\n    user = User(**user)\n    user.insert()\n    return user\n\n\n@pytest.fixture()\ndef pocket_fixture(test_app, mocked_responses):\n    \"\"\"Sets up pocket key and mocked responses for testing pocket sync\n\n    When using this fixture, all calls to https://getpocket.com/v3/get will\n    succeed and return a single article whose url is https://example.com.\n    \"\"\"\n    with test_app.app_context():\n        db = get_db()\n\n    mocked_responses.add(\n        responses.POST,\n        \"https://getpocket.com/v3/oauth/authorize\",\n        json={\n            \"access_token\": \"5678defg-5678-defg-5678-defg56\",\n            \"username\": \"test_user\",\n        },\n    )\n\n    # fake /get response from pocket API\n    mocked_responses.add(\n        responses.POST,\n        \"https://getpocket.com/v3/get\",\n        json={\n            \"status\": 1,\n            \"complete\": 1,\n            \"list\": {\n                \"3088163616\": {\n                    \"given_url\": \"https://example.com\",\n                    \"status\": \"0\",\n                    \"resolved_url\": \"https://example.com\",\n                    \"excerpt\": \"Lorem ipsum\",\n                    \"is_article\": \"1\",\n                },\n            },\n        },\n    )\n\n    pocket_key = {\n        \"type\": \"pocket_key\",\n        \"consumer_key\": \"1234-abcd1234abcd1234abcd1234\",\n        \"code\": \"dcba4321-dcba-4321-dcba-4321dc\",\n    }\n    db.insert(pocket_key)\n    return pocket_key\n\n\n@pytest.fixture()\ndef click_cli():\n    yield cli.cli\n\n\n@pytest.fixture()\ndef ctx(click_cli):\n    with click.Context(click_cli, info_name=click_cli, parent=None) as ctx:\n        yield ctx\n\n\n@pytest.fixture()\ndef cli_runner():\n    yield click.testing.CliRunner()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.1904296875,
          "content": "site_name: Archivy\ntheme:\n  name: material\n  logo: img/logo-2.png\n  favicon: img/logo-2.png\n  features:\n    - navigation.tabs\n  custom_dir: docs/overrides\n\n\nplugins:\n  - mkdocstrings\n  - search\n\n\nmarkdown_extensions:\n  - pymdownx.highlight\n  - pymdownx.superfences\n  - pymdownx.tasklist:\n      clickable_checkbox: true\n  - footnotes\n\nnav:\n  - Home: \n    - \"index.md\"\n    - What makes Archivy different: \"difference.md\"\n    - Architecture: \"reference/architecture.md\"\n    - Contributing: \"CONTRIBUTING.md\"\n  - Getting Started:\n      - Installing Archivy: \"install.md\"\n      - Usage: \"usage.md\"\n      - Search: \"setup-search.md\"\n      - Config: \"config.md\"\n      - Editing: \"editing.md\"\n      - What's Next: \"whats_next.md\"\n  - Plugins:\n      - Index: \"plugins.md\"\n  - API Reference:\n    - Architecture: \"reference/architecture.md\"\n    - Web API: \"reference/web_api.md\"\n    - Models for User and DataObj: \"reference/models.md\"\n    - Dataobj Filesystem Layer: \"reference/filesystem_layer.md\"\n    - Helpers: \"reference/helpers.md\"\n    - Hooks: \"reference/hooks.md\"\n    - Search: \"reference/search.md\" \n    - Web Inputs For Plugins: \"reference/web_inputs.md\"\n\nrepo_url: https://github.com/archivy/archivy\nrepo_name: archivy\n"
        },
        {
          "name": "plugins.md",
          "type": "blob",
          "size": 5.921875,
          "content": "# Plugins\n\nPlugins are a newly introduced method to add extensions to the archivy cli and web interface. It relies on the extremely useful [click-plugins](https://github.com/click-contrib/click-plugins) package that is loaded through pip and the [click-web](https://github.com/click-contrib/click-plugins) which has been modified and whose can be found in `archivy/click_web/`, some of the tests, templates and static files.\n\n\nTo help you understand the way the plugin system works, we're going to build our own plugin that allows users to sync content from `pocket`. We'll even deploy it to Pypi so that other people can install it.\n\n\nPrerequisites: A python and pip installation with archivy.\n\n## Step 1: Defining what our archivy extension does\n\n`archivy` source used to have a built-in feature that allowed you to sync up to the bookmarks of your pocket account. We removed this and prefer to replace it with a standalone plugin, so let's build it!\n\nWhat it will do is allow a user to download their bookmarks from pocket, without redownloading content that already exists.\n\n## Step 2: Setting up the project\n\nMake a new directory named `archivy_pocket` wherever you want on your system and create a new [`setup.py`](https://stackoverflow.com/questions/1471994/what-is-setup-py) file that will define the characteristics of our package.\n\nThis is what it looks like:\n\n```python\n\nfrom setuptools import setup, find_packages\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='archivy_pocket',\n    version='0.1.0',\n    author=\"Uzay-G\",\n    author_email=\"halcyon@disroot.org\",\n    description=(\n        \"Archivy extension to sync content to your pocket account.\"\n    ),\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n    ],\n    packages=find_packages(),\n    entry_points='''\n        [archivy.plugins]\n        pocket=archivy_pocket:pocket\n    '''\n)\n```\n\nLet's walk through what this is doing. We are setting up our package and we define a few characteristics of the package. We specify some metadata you can adapt to your own package. We then load our package by using the `find_packages` function. The `entry_points` part is the most important. The `[archivy.plugins]` tells archivy that this package will extend our CLI and then we define the command we want to add. In our case, people will call the extension using `archivy pocket`. We will actually be creating a group so that people will call subcommands like this: `archivy pocket <subcommand>`. You can do things either way.\n\nCreate a `README.md` file that you can keep empty for now but should haCve information on your project.\n\n## Step 3: Writing the core code of our plugin\n\nCreate an `archivy_web` directory inside the current directory where `setup.py` is stored. Create an `__init__.py` file in that directory where we'll store our main project code. For larger projects, it's better to separate concerns but that'll be good for now.\n\nThis is what the skeleton of our code looks will look like.\n\n```python\nimport click # the package that manages the cli\n\n@click.group()\ndef pocket():\n    pass\n\n@pocket.command()\ndef command1():\n\t...\n\n@pocket.command()\ndef command2():\n\t...\n```\n\nWith this structure, you'll be able to call `archivy pocket command1` and `archivy pocket command2`. Read the [click docs](https://click.palletsprojects.com/en/7.x/options/) to learn about how to build more intricate\n\nLet's get into actually writing a command that interacts with the archivy codebase.\n\nThe code below does a few things:\n\n- It imports the archivy `app` that basically is the interface for the webserver and many essential Flask features (flask is the web framework archivy uses).\n- It imports the `get_db` function that allows us to access and modify the db.\n- We define our pocket group.\n- We create a new command from that group, what's important here is the `with app.app_context` part. We need to run our code inside the archivy `app_context` to be able to call some of the archivy methods. If you call archivy methods in your plugins, it might fail if you don't include this part.\n- Then we just have our command code.\n\n\n```python\nimport click\nfrom archivy.extensions import get_db\nfrom archivy import app\nfrom archivy.data import get_items\n\n@click.group()\ndef pocket():\n    pass\n\n@pocket.command()\n@click.argument(\"api_key\")\ndef auth(api_key):\n    with app.app_context():\n        db = get_db()\n\t\t# ...\n```\n\n\nWe also added some other commands, but we'll skip them for brevity and you can check out the source code [here](https://github.com/archivy/archivy_pocket).\n\nNow you just need to do `pip install .` in the main directory and you'll have access to the commands. Check it out by running `archivy --help`.\n\n## Step 4: Publishing our package to Pypi\n\n[Pypi](https://pypi.org) is the Python package repository. Publishing our package to it will allow other users to easily install our code onto their own archivy instance.\n\nThis is a short overview. Check out [this website](https://packaging.python.org/) for more info.\n\nThis section is inspired by [this](https://packaging.python.org/tutorials/packaging-projects/#installing-your-newly-uploaded-package).\n\n\nMake sure the required utilities are installed:\n\n```python\npython3 -m pip install --user --upgrade setuptools wheel\n```\n\nNow run this command in the main dir to build the source:\n\n```python\npython3 setup.py sdist bdist_wheel\n```\n\nNow you need to create an account on [Pypi](https://pypi.org). Then go [here](https://pypi.org/manage/account/#api-tokens) and create a new API token; don’t limit its scope to a particular project, since you are creating a new project.\n\n\nOnce you've saved your token, install `twine`, the program that will take care of the upload:\n\n```python\npython3 -m pip install --user --upgrade twine\n```\n\nAnd you can finally upload your code! The username you should enter is `__token__` and then the password is your API token.\n\n```python\npython3 -m twine upload dist/*\n```\n\n"
        },
        {
          "name": "requirements-tests.txt",
          "type": "blob",
          "size": 0.099609375,
          "content": "-r requirements.txt\n\npytest==6.0.2\npytest-cov\n# for mocking out requests HTTP calls\nresponses==0.12.0\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.9833984375,
          "content": "# Automatically generated by https://github.com/damnever/pigar.\n\n# archivy/__init__.py: 7\n# archivy/check_changes.py: 5\n# archivy/data.py: 9\n# archivy/extensions.py: 6\n# archivy/models.py: 13\n# archivy/routes.py: 7\nFlask == 2.3.2\nwerkzeug == 2.3.3\njinja2 == 3.1.2\n\n# archivy/forms.py: 2\nFlask_WTF == 1.1.1\n\n# archivy/forms.py: 4\nWTForms == 2.3.1\n\n# archivy/config.py: 2\nappdirs == 1.4.4\n\n# archivy/models.py: 10\nattrs == 20.2.0\n\n# archivy/models.py: 11\nbeautifulsoup4 >= 4.8.2\n\n\n# archivy/__init__.py: 6\n# archivy/extensions.py: 4,5\nelasticsearch == 7.7.1\n\n\n# archivy/run.py: 1\npython_dotenv == 0.13.0\n\n# archivy/data.py: 8\n# archivy/models.py: 5\n\npython_frontmatter == 0.5.0\n\n# archivy/models.py: 7\n# archivy/routes.py: 4\nrequests == 2.30.0\n\n# archivy/extensions.py: 7\n# archivy/routes.py: 5\ntinydb == 4.1.1\n\n# archivy/models.py: 8\nvalidators == 0.15.0\n\n# archivy/__init__.py: 9\n# archivy/models.py: 13\n# archivy/routes.py: 10\nflask-login == 0.6.2\n\nclick_plugins\nhtml2text\nflask_compress\nreadability-lxml\n\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.07421875,
          "content": "import setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nwith open(\"requirements.txt\", encoding=\"utf-8\") as f:\n    all_reqs = f.read().split(\"\\n\")\n    install_requires = [\n        x.strip()\n        for x in all_reqs\n        if not x.startswith(\"#\") and not x.startswith(\"-e git\")\n    ]\n\nsetuptools.setup(\n    name=\"archivy\",\n    version=\"1.7.7\",\n    author=\"Uzay-G\",\n    author_email=\"halcyon@disroot.org\",\n    description=(\n        \"Minimalist knowledge base focused on digital preservation\"\n        \" and building your second brain.\"\n    ),\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/archivy/archivy\",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n    entry_points={\n        \"console_scripts\": [\n            \"archivy = archivy.cli:cli\",\n        ]\n    },\n    include_package_data=True,\n    zip_safe=False,\n    install_requires=install_requires,\n    python_requires=\">=3.6\",\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}