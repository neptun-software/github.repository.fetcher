{
  "metadata": {
    "timestamp": 1736559966446,
    "page": 750,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jtesta/ssh-audit",
      "stars": 3492,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "src/ssh_audit/__pycache__/\nsrc/ssh_audit.egg-info/\nsrc/ssh_audit/*~\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.244140625,
          "content": "*~\n*.py[cod]\n*.exe\n*.asc\nvenv*/\n.cache/\n.mypy_cache/\n.tox\n.coverage*\nreports/\n.scannerwork/\n\n# PyPI packaging\n/build/\n/dist/\n*.egg-info/\n*.egg\n\n# Snap packaging\n/parts/\n/prime/\n/snap/\n/stage/\n/ssh-audit_*.snap\n\n# Your local server config\nservers.txt\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.41015625,
          "content": "# Contributing to ssh-audit\n\nWe are very much open to receiving patches from the community!  To encourage participation, passing CI tests, unit tests, etc., *is OPTIONAL*.  As long as the patch works properly, it can be merged.\n\nHowever, if you can submit patches that pass all of our automated tests, then you'll lighten the load for the project maintainer (who already has enough to do!).  This document describes what tests are done and what documentation is maintained.\n\n*Anything extra you can do is appreciated!*\n\n\n## Tox Tests\n\n[Tox](https://tox.wiki/) is used to automate testing.  Linting is done with [pylint](http://pylint.pycqa.org/en/latest/) & [flake8](https://flake8.pycqa.org/en/latest/), and static type-checking is done with [mypy](https://mypy.readthedocs.io/en/stable/).\n\nInstall the required packages with `python3 -m pip install -U codecov coveralls flake8 mypy pylint pytest tox`, then run the tests with `python3 -m tox`.  Look for any error messages in the (verbose) output.\n\n\n## Docker Tests\n\nDocker is used to run ssh-audit against various real SSH servers (OpenSSH, Dropbear, and TinySSH).  The output is then diff'ed against the expected result.  Any differences result in failure.\n\nThe docker tests are run with `./docker_test.sh`.\n\n\n## Man Page\n\nThe `ssh-audit.1` man page documents the various features of ssh-audit.  If features are added, or significant behavior is modified, the man page needs to be updated.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5888671875,
          "content": "# syntax=docker/dockerfile:latest\nFROM scratch AS files\n\n# Copy ssh-audit code to temporary container\nCOPY ssh-audit.py /\nCOPY src/ /\n\nFROM python:3-alpine AS runtime\n\n# Update the image to remediate any vulnerabilities.\nRUN apk upgrade -U --no-cache -a -l && \\ \n    # Remove suid & sgid bits from all files.\n    find / -xdev -perm /6000 -exec chmod ug-s {} \\; 2> /dev/null || true\n\n# Copy the ssh-audit code from files container.\nCOPY --from=files / /\n\n# Allow listening on 2222/tcp for client auditing.\nEXPOSE 2222\n\n# Drop root privileges.\nUSER nobody:nogroup\n\nENTRYPOINT [\"python3\", \"/ssh-audit.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1376953125,
          "content": "The MIT License (MIT)\n\nCopyright (C) 2017-2024 Joe Testa (jtesta@positronsecurity.com)\nCopyright (C) 2017 Andris Raugulis (moo@arthepsy.eu)\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile.docker",
          "type": "blob",
          "size": 0.7783203125,
          "content": "VERSION = $(shell grep VERSION src/ssh_audit/globals.py | grep -E -o \"'(v.*)'\" | tr -d \"'\")\nifeq ($(VERSION),)\n  $(error \"could not determine version!\")\nendif\n\nall:\n\t./add_builtin_man_page.sh\n\tdocker buildx create --name multiarch --use || exit 0\n\tdocker buildx build \\\n\t\t--platform linux/amd64,linux/arm64,linux/arm/v7 \\\n\t\t--tag positronsecurity/ssh-audit:${VERSION} \\\n\t\t--tag positronsecurity/ssh-audit:latest \\\n\t\t.\n\tdocker buildx build \\\n\t\t--tag positronsecurity/ssh-audit:${VERSION} \\\n\t\t--tag positronsecurity/ssh-audit:latest \\\n\t\t--load \\\n\t\t--builder=multiarch \\\n\t\t.\n\nupload:\n\tdocker login -u positronsecurity\n\tdocker buildx build \\\n\t\t--platform linux/amd64,linux/arm64,linux/arm/v7 \\\n\t\t--tag positronsecurity/ssh-audit:${VERSION} \\\n\t\t--tag positronsecurity/ssh-audit:latest \\\n\t\t--push \\\n\t\t.\n"
        },
        {
          "name": "Makefile.pypi",
          "type": "blob",
          "size": 0.623046875,
          "content": "all:\n\t./add_builtin_man_page.sh\n\trm -rf /tmp/pypi_upload\n\tvirtualenv -p /usr/bin/python3 /tmp/pypi_upload/\n\tcp -R src /tmp/pypi_upload/\n\tcp setup.py setup.cfg README.md LICENSE /tmp/pypi_upload/\n\t/bin/bash -c \"pushd /tmp/pypi_upload/; source bin/activate; pip3 install -U setuptools twine build; pip3 install -U requests_toolbelt; python3 -m build\"\n\nuploadtest:\n\t/bin/bash -c \"pushd /tmp/pypi_upload; source bin/activate; python3 -m twine upload --repository testpypi /tmp/pypi_upload/dist/*\"\n\nuploadprod:\n\t/bin/bash -c \"pushd /tmp/pypi_upload; source bin/activate; twine upload /tmp/pypi_upload/dist/*\"\n\nclean:\n\trm -rf /tmp/pypi_upload/\n"
        },
        {
          "name": "PACKAGING.md",
          "type": "blob",
          "size": 2.017578125,
          "content": "# Windows\n\nAn executable can only be made on a Windows host because the PyInstaller tool (https://www.pyinstaller.org/) does not support cross-compilation.\n\n1.) Install Python v3.x from https://www.python.org/.  To make life easier, check the option to add Python to the PATH environment variable.\n\n2.) Install Cygwin (https://www.cygwin.com/).\n\n3.) Install/update package dependencies and create the executable with:\n\n```\n    $ ./build_windows_executable.sh\n```\n\n\n# PyPI\n\nTo create package and upload to test server (hint: use API token for test.pypi.org):\n\n```\n    $ sudo apt install python3-virtualenv python3.12-venv\n    $ make -f Makefile.pypi\n    $ make -f Makefile.pypi uploadtest\n```\n\nTo download from test server and verify:\n\n```\n    $ virtualenv /tmp/pypi_test\n    $ cd /tmp/pypi_test; source bin/activate\n    $ pip3 install --index-url https://test.pypi.org/simple ssh-audit\n```\n\nTo upload to production server (hint: use API token for production pypi.org):\n\n```\n    $ make -f Makefile.pypi uploadprod\n```\n\nTo download from production server and verify:\n\n```\n    $ virtualenv /tmp/pypi_prod\n    $ cd /tmp/pypi_prod; source bin/activate\n    $ pip3 install ssh-audit\n```\n\n\n# Snap\n\nTo create the Snap package, run a fully-updated Ubuntu Server 24.04 VM.\n\nCreate the Snap package with:\n```\n    $ ./build_snap.sh\n```\n\nUpload the Snap with:\n\n```\n    $ snapcraft export-login ~/snap_creds.txt\n    $ export SNAPCRAFT_STORE_CREDENTIALS=$(cat ~/snap_creds.txt)\n    $ snapcraft upload --release=beta ssh-audit_*.snap\n    $ snapcraft status ssh-audit  # Note the revision number of the beta channel.\n    $ snapcraft release ssh-audit X stable  # Fill in with the revision number.\n```\n\n\n# Docker\n\nEnsure that the `buildx` plugin is available by following the installation instructions available at: https://docs.docker.com/engine/install/ubuntu/\n\nBuild a local image with:\n\n```\n    $ make -f Makefile.docker\n```\n\nCreate a multi-architecture build and upload it to Dockerhub with (hint: use the API token as the password):\n\n```\n    $ make -f Makefile.docker upload\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.888671875,
          "content": "# ssh-audit\n[![License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://github.com/jtesta/ssh-audit/blob/master/LICENSE)\n[![Build Status](https://github.com/jtesta/ssh-audit/actions/workflows/tox.yaml/badge.svg)](https://github.com/jtesta/ssh-audit/actions)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/jtesta/ssh-audit/blob/master/CONTRIBUTING.md)\n\n[![PyPI Downloads](https://img.shields.io/pypi/dm/ssh-audit?label=pypi%20downloads&color=purple)](https://pypi.org/project/ssh-audit/)\n[![Homebrew Downloads](https://img.shields.io/homebrew/installs/dy/ssh-audit?label=homebrew%20downloads&color=teal)](https://formulae.brew.sh/formula/ssh-audit)\n[![Docker Pulls](https://img.shields.io/docker/pulls/positronsecurity/ssh-audit)](https://hub.docker.com/r/positronsecurity/ssh-audit)\n[![Snap Downloads](https://img.shields.io/badge/snap%20downloads-no%20idea-yellow.svg)](https://snapcraft.io/ssh-audit)\n\n[![Github Sponsors](https://img.shields.io/github/sponsors/jtesta?color=red)](https://github.com/sponsors/jtesta)\n\n**ssh-audit** is a tool for ssh server & client configuration auditing.\n\n[jtesta/ssh-audit](https://github.com/jtesta/ssh-audit/) (v2.0+) is the updated and maintained version of ssh-audit forked from [arthepsy/ssh-audit](https://github.com/arthepsy/ssh-audit) (v1.x) due to inactivity.\n\n- [Features](#features)\n- [Usage](#usage)\n- [Screenshots](#screenshots)\n    - [Server Standard Audit Example](#server-standard-audit-example)\n    - [Server Policy Audit Example](#server-policy-audit-example)\n    - [Client Standard Audit Example](#client-standard-audit-example)\n- [Hardening Guides](#hardening-guides)\n- [Pre-Built Packages](#pre-built-packages)\n- [Web Front-End](#web-front-end)\n- [ChangeLog](#changelog)\n\n## Features\n- SSH1 and SSH2 protocol server support;\n- analyze SSH client configuration;\n- grab banner, recognize device or software and operating system, detect compression;\n- gather key-exchange, host-key, encryption and message authentication code algorithms;\n- output algorithm security information (available since, removed/disabled, unsafe/weak/legacy, etc);\n- output algorithm recommendations (append or remove based on recognized software version);\n- analyze SSH version compatibility based on algorithm information;\n- historical information from OpenSSH, Dropbear SSH and libssh;\n- policy scans to ensure adherence to a hardened/standard configuration;\n- runs on Linux and Windows;\n- supports Python 3.8 - 3.13;\n- no dependencies\n\n## Usage\n```\nusage: ssh-audit.py [-h] [-1] [-2] [-4] [-6] [-b] [-c] [-d]\n                    [-g <min1:pref1:max1[,min2:pref2:max2,...]> / <x-y[:step]>] [-j] [-l {info,warn,fail}] [-L]\n                    [-M custom_policy.txt] [-m] [-n] [-P \"Built-In Policy Name\" / custom_policy.txt] [-p N]\n                    [-T targets.txt] [-t N] [-v] [--conn-rate-test N[:max_rate]] [--dheat N[:kex[:e_len]]]\n                    [--lookup alg1[,alg2,...]] [--skip-rate-test] [--threads N]\n                    [host]\n\npositional arguments:\n  host                  target hostname or IPv4/IPv6 address\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -1, --ssh1            force ssh version 1 only\n  -2, --ssh2            force ssh version 2 only\n  -4, --ipv4            enable IPv4 (order of precedence)\n  -6, --ipv6            enable IPv6 (order of precedence)\n  -b, --batch           batch output\n  -c, --client-audit    starts a server on port 2222 to audit client software config (use -p to change port; use -t\n                        to change timeout)\n  -d, --debug           enable debugging output\n  -g <min1:pref1:max1[,min2:pref2:max2,...]> / <x-y[:step]>, --gex-test <min1:pref1:max1[,min2:pref2:max2,...]> / <x-y[:step]>\n                        conducts a very customized Diffie-Hellman GEX modulus size test. Tests an array of minimum,\n                        preferred, and maximum values, or a range of values with an optional incremental step amount\n  -j, --json            enable JSON output (use -jj to enable indentation for better readability)\n  -l {info,warn,fail}, --level {info,warn,fail}\n                        minimum output level (default: info)\n  -L, --list-policies   list all the official, built-in policies. Combine with -v to view policy change logs\n  -M custom_policy.txt, --make-policy custom_policy.txt\n                        creates a policy based on the target server (i.e.: the target server has the ideal\n                        configuration that other servers should adhere to), and stores it in the file path specified\n  -m, --manual          print the man page (Docker, PyPI, Snap, and Windows builds only)\n  -n, --no-colors       disable colors (automatic when the NO_COLOR environment variable is set)\n  -P \"Built-In Policy Name\" / custom_policy.txt, --policy \"Built-In Policy Name\" / custom_policy.txt\n                        run a policy test using the specified policy (use -L to see built-in policies, or specify\n                        filesystem path to custom policy created by -M)\n  -p N, --port N        the TCP port to connect to (or to listen on when -c is used)\n  -T targets.txt, --targets targets.txt\n                        a file containing a list of target hosts (one per line, format HOST[:PORT]). Use -p/--port\n                        to set the default port for all hosts. Use --threads to control concurrent scans\n  -t N, --timeout N     timeout (in seconds) for connection and reading (default: 5)\n  -v, --verbose         enable verbose output\n  --conn-rate-test N[:max_rate]\n                        perform a connection rate test (useful for collecting metrics related to susceptibility of\n                        the DHEat vuln). Testing is conducted with N concurrent sockets with an optional maximum\n                        rate of connections per second\n  --dheat N[:kex[:e_len]]\n                        continuously perform the DHEat DoS attack (CVE-2002-20001) against the target using N\n                        concurrent sockets. Optionally, a specific key exchange algorithm can be specified instead\n                        of allowing it to be automatically chosen. Additionally, a small length of the fake e value\n                        sent to the server can be chosen for a more efficient attack (such as 4).\n  --lookup alg1[,alg2,...]\n                        looks up an algorithm(s) without connecting to a server.\n  --skip-rate-test      skip the connection rate test during standard audits (used to safely infer whether the DHEat\n                        attack is viable)\n  --threads N           number of threads to use when scanning multiple targets (-T/--targets) (default: 32)\n```\n* if both IPv4 and IPv6 are used, order of precedence can be set by using either `-46` or `-64`.\n* batch flag `-b` will output sections without header and without empty lines (implies verbose flag).\n* verbose flag `-v` will prefix each line with section type and algorithm name.\n* an exit code of 0 is returned when all algorithms are considered secure (for a standard audit), or when a policy check passes (for a policy audit).\n\nBasic server auditing:\n```\nssh-audit localhost\nssh-audit 127.0.0.1\nssh-audit 127.0.0.1:222\nssh-audit ::1\nssh-audit [::1]:222\n```\n\nTo run a standard audit against many servers (place targets into servers.txt, one on each line in the format of `HOST[:PORT]`):\n\n```\nssh-audit -T servers.txt\n```\n\nTo audit a client configuration (listens on port 2222 by default; connect using `ssh -p 2222 anything@localhost`):\n\n```\nssh-audit -c\n```\n\nTo audit a client configuration, with a listener on port 4567:\n```\nssh-audit -c -p 4567\n```\n\nTo  list all official built-in policies (hint: use resulting policy names with `-P`/`--policy`):\n```\nssh-audit -L\n```\n\nTo run a policy audit against a server:\n```\nssh-audit -P [\"policy name\" | path/to/server_policy.txt] targetserver\n```\n\nTo run a policy audit against a client:\n```\nssh-audit -c -P [\"policy name\" | path/to/client_policy.txt]\n```\n\nTo run a policy audit against many servers:\n```\nssh-audit -T servers.txt -P [\"policy name\" | path/to/server_policy.txt]\n```\n\nTo create a policy based on a target server (which can be manually edited):\n```\nssh-audit -M new_policy.txt targetserver\n```\n\nTo run the DHEat CPU exhaustion DoS attack ([CVE-2002-20001](https://nvd.nist.gov/vuln/detail/CVE-2002-20001)) against a target using 10 concurrent sockets:\n```\nssh-audit --dheat=10 targetserver\n```\n\nTo run the DHEat attack using the `diffie-hellman-group-exchange-sha256` key exchange algorithm:\n```\nssh-audit --dheat=10:diffie-hellman-group-exchange-sha256 targetserver\n```\n\nTo run the DHEat attack using the `diffie-hellman-group-exchange-sha256` key exchange algorithm along with very small but non-standard packet lengths (this may result in the same CPU exhaustion, but with many less bytes per second being sent):\n```\nssh-audit --dheat=10:diffie-hellman-group-exchange-sha256:4 targetserver\n```\n\n## Screenshots\n\n### Server Standard Audit Example\nBelow is a screen shot of the standard server-auditing output when connecting to an unhardened OpenSSH v5.3 service:\n![screenshot](https://user-images.githubusercontent.com/2982011/64388792-317e6f80-d00e-11e9-826e-a4934769bb07.png)\n\n### Server Policy Audit Example\nBelow is a screen shot of the policy auditing output when connecting to an un-hardened Ubuntu Server 20.04 machine (hint: use `-L`/`--list-policies` to see names of built-in policies to use with `-P`/`--policy`):\n![screenshot](https://user-images.githubusercontent.com/2982011/94370881-95178700-00c0-11eb-8705-3157a4669dc0.png)\n\nAfter applying the steps in the hardening guide (see below), the output changes to the following:\n![screenshot](https://user-images.githubusercontent.com/2982011/94370873-87620180-00c0-11eb-9a59-469f61a56ce1.png)\n\n### Client Standard Audit Example\nBelow is a screen shot of the client-auditing output when an unhardened OpenSSH v7.2 client connects:\n![client_screenshot](https://user-images.githubusercontent.com/2982011/68867998-b946c100-06c4-11ea-975f-1f47e4178a74.png)\n\n## Hardening Guides\nGuides to harden server & client configuration can be found here: [https://www.ssh-audit.com/hardening_guides.html](https://www.ssh-audit.com/hardening_guides.html)\n\n## Pre-Built Packages\nPre-built packages are available for Windows (see the [Releases](https://github.com/jtesta/ssh-audit/releases) page), PyPI, Snap, and Docker:\n\nTo install from PyPI:\n```\n$ pip3 install ssh-audit\n```\n\nTo install the Snap package:\n```\n$ snap install ssh-audit\n```\n\nTo install from Dockerhub:\n```\n$ docker pull positronsecurity/ssh-audit\n```\n(Then run with: `docker run -it --rm -p 2222:2222 positronsecurity/ssh-audit 10.1.1.1`)\n\nThe status of various other platform packages can be found below (via Repology):\n\n<a href=\"https://repology.org/project/ssh-audit/versions\"><img src=\"https://repology.org/badge/vertical-allrepos/ssh-audit.svg?columns=4\" alt=\"Packaging status\" align=\"center\"></a>\n\n## Web Front-End\nFor convenience, a web front-end on top of the command-line tool is available at [https://www.ssh-audit.com/](https://www.ssh-audit.com/).\n\n## ChangeLog\n\n### v3.4.0-dev\n - Added warning to all key exchanges that do not include protections against quantum attacks due to the Harvest Now, Decrypt Later strategy (see https://en.wikipedia.org/wiki/Harvest_now,_decrypt_later).\n - Migrated from deprecated `getopt` module to `argparse`; partial credit [oam7575](https://github.com/oam7575).\n - When running against multiple hosts, now prints each target host regardless of output level.\n - Batch mode (`-b`) no longer automatically enables verbose mode, due to sometimes confusing results; users can still explicitly enable verbose mode using the `-v` flag.\n\n### v3.3.0 (2024-10-15)\n - Added Python 3.13 support.\n - Added built-in policies for Ubuntu 24.04 LTS server & client, OpenSSH 9.8, and OpenSSH 9.9.\n - Added IPv6 support for DHEat and connection rate tests.\n - Added TCP port information to JSON policy scan results; credit [Fabian Malte Kopp](https://github.com/dreizehnutters).\n - Added LANcom LCOS server recognition and Ed448 key extraction; credit [Daniel Lenski](https://github.com/dlenskiSB).\n  - Now reports ECDSA and DSS fingerprints when in verbose mode; partial credit [Daniel Lenski](https://github.com/dlenskiSB).\n - Removed CVE information based on server/client version numbers, as this was wildly inaccurate (see [this thread](https://github.com/jtesta/ssh-audit/issues/240) for the full discussion, as well as the results of the community vote on this matter).\n - Fixed crash when running with `-P` and `-T` options simultaneously.\n - Fixed host key tests from only reporting a key type at most once despite multiple hosts supporting it; credit [Daniel Lenski](https://github.com/dlenskiSB).\n - Fixed DHEat connection rate testing on MacOS X and BSD platforms; credit [Drew Noel](https://github.com/drewmnoel) and [Michael Osipov](https://github.com/michael-o).\n - Fixed invalid JSON output when a socket error occurs while performing a client audit.\n - Fixed `--conn-rate-test` feature on Windows.\n - When scanning multiple targets (using `-T`/`--targets`), the `-p`/`--port` option will now be used as the default port (set to 22 if `-p`/`--port` is not given).  Hosts specified in the file can override this default with an explicit port number (i.e.: \"host1:1234\").  For example, when using `-T targets.txt -p 222`, all hosts in `targets.txt` that do not explicitly include a port number will default to 222; when using `-T targets.txt` (without `-p`), all hosts will use a default of 22.\n - Updated built-in server & client policies for Amazon Linux 2023, Debian 12, Rocky Linux 9, and Ubuntu 22.04 to improve host key efficiency and cipher resistance to quantum attacks.\n - Added 1 new cipher: `grasshopper-ctr128`.\n - Added 2 new key exchanges: `mlkem768x25519-sha256`, `sntrup761x25519-sha512`.\n\n### v3.2.0 (2024-04-22)\n - Added implementation of the DHEat denial-of-service attack (see `--dheat` option; [CVE-2002-20001](https://nvd.nist.gov/vuln/detail/CVE-2002-20001)).\n - Expanded filter of CBC ciphers to flag for the Terrapin vulnerability.  It now includes more rarely found ciphers.\n - Fixed parsing of `ecdsa-sha2-nistp*` CA signatures on host keys.  Additionally, they are now flagged as potentially back-doored, just as standard host keys are.\n - Gracefully handle rare exceptions (i.e.: crashes) while performing GEX tests.\n - The built-in man page (`-m`, `--manual`) is now available on Docker, PyPI, and Snap builds, in addition to the Windows build.\n - Snap builds are now architecture-independent.\n - Changed Docker base image from `python:3-slim` to `python:3-alpine`, resulting in a 59% reduction in image size; credit [Daniel Thamdrup](https://github.com/dallemon).\n - Added built-in policies for Amazon Linux 2023, Debian 12, OpenSSH 9.7, and Rocky Linux 9.\n - Built-in policies now include a change log (use `-L -v` to view them).\n - Custom policies now support the `allow_algorithm_subset_and_reordering` directive to allow targets to pass with a subset and/or re-ordered list of host keys, kex, ciphers, and MACs.  This allows for the creation of a baseline policy where targets can optionally implement stricter controls; partial credit [yannik1015](https://github.com/yannik1015).\n - Custom policies now support the `allow_larger_keys` directive to allow targets to pass with larger host keys, CA keys, and Diffie-Hellman keys.  This allows for the creation of a baseline policy where targets can optionally implement stricter controls; partial credit [Damian Szuberski](https://github.com/szubersk).\n - Color output is disabled if the `NO_COLOR` environment variable is set (see https://no-color.org/).\n - Added 1 new key exchange algorithm: `gss-nistp384-sha384-*`.\n - Added 1 new cipher: `aes128-ocb@libassh.org`.\n\n### v3.1.0 (2023-12-20)\n - Added test for the Terrapin message prefix truncation vulnerability ([CVE-2023-48795](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-48795)).\n - Dropped support for Python 3.7 (EOL was reached in June 2023).\n - Added Python 3.12 support.\n - In server policies, reduced expected DH modulus sizes from 4096 to 3072 to match the [online hardening guides](https://ssh-audit.com/hardening_guides.html) (note that 3072-bit moduli provide the equivalent of 128-bit symmetric security).\n - In Ubuntu 22.04 client policy, moved host key types `sk-ssh-ed25519@openssh.com` and `ssh-ed25519` to the end of all certificate types.\n - Updated Ubuntu Server & Client policies for 20.04 and 22.04 to account for key exchange list changes due to Terrapin vulnerability patches.\n - Re-organized option host key types for OpenSSH 9.2 server policy to correspond with updated Debian 12 hardening guide.\n - Added built-in policies for OpenSSH 9.5 and 9.6.\n - Added an `additional_notes` field to the JSON output.\n\n### v3.0.0 (2023-09-07)\n - Results from concurrent scans against multiple hosts are no longer improperly combined; bug discovered by [Adam Russell](https://github.com/thecliguy).\n - Hostname resolution failure no longer causes scans against multiple hosts to terminate unexpectedly; credit [Dani Cuesta](https://github.com/daniel-cues).\n - Algorithm recommendations resulting from warnings are now printed in yellow instead of red; credit [Adam Russell](https://github.com/thecliguy).\n - Added failure, warning, and info notes to JSON output (note that this results in a breaking change to the banner protocol, \"enc\", and \"mac\" fields); credit [Bareq Al-Azzawi](https://github.com/BareqAZ).\n - Docker Makefile now creates multi-arch builds for amd64, arm64, and armv7; credit [Sebastian Cohnen](https://github.com/tisba).\n - Fixed crash during GEX tests.\n - Refined GEX testing against OpenSSH servers: when the fallback mechanism is suspected of being triggered, perform an additional test to obtain more accurate results.\n - The color of all notes will be printed in green when the related algorithm is rated good.\n - Prioritized host key certificate algorithms for Ubuntu 22.04 LTS client policy.\n - Marked all NIST K-, B-, and T-curves as unproven since they are so rarely used.\n - Added built-in policy for OpenSSH 9.4.\n - Added 12 new host keys: `ecdsa-sha2-curve25519`, `ecdsa-sha2-nistb233`, `ecdsa-sha2-nistb409`, `ecdsa-sha2-nistk163`, `ecdsa-sha2-nistk233`, `ecdsa-sha2-nistk283`, `ecdsa-sha2-nistk409`, `ecdsa-sha2-nistp224`, `ecdsa-sha2-nistp192`, `ecdsa-sha2-nistt571`, `ssh-dsa`, `x509v3-sign-rsa-sha256`.\n - Added 15 new key exchanges: `curve448-sha512@libssh.org`, `ecdh-nistp256-kyber-512r3-sha256-d00@openquantumsafe.org`, `ecdh-nistp384-kyber-768r3-sha384-d00@openquantumsafe.org`, `ecdh-nistp521-kyber-1024r3-sha512-d00@openquantumsafe.org`, `ecdh-sha2-brainpoolp256r1@genua.de`, `ecdh-sha2-brainpoolp384r1@genua.de`, `ecdh-sha2-brainpoolp521r1@genua.de`, `kexAlgoDH14SHA1`, `kexAlgoDH1SHA1`, `kexAlgoECDH256`, `kexAlgoECDH384`, `kexAlgoECDH521`, `sm2kep-sha2-nistp256`, `x25519-kyber-512r3-sha256-d00@amazon.com`, `x25519-kyber512-sha512@aws.amazon.com`.\n - Added 8 new ciphers: `aes192-gcm@openssh.com`, `cast128-12-cbc`, `cast128-12-cfb`, `cast128-12-ecb`, `cast128-12-ofb`, `des-cfb`, `des-ecb`, `des-ofb`.\n - Added 14 new MACs: `cbcmac-3des`, `cbcmac-aes`, `cbcmac-blowfish`, `cbcmac-des`, `cbcmac-rijndael`, `cbcmac-twofish`, `hmac-sha256-96`, `md5`, `md5-8`, `ripemd160`, `ripemd160-8`, `sha1`, `sha1-8`, `umac-128`.\n\n### v2.9.0 (2023-04-29)\n - Dropped support for Python 3.6, as it reached EOL at the end of 2021.\n - Added Ubuntu Server & Client 22.04 hardening policies.\n - Removed experimental warning tag from `sntrup761x25519-sha512@openssh.com`.\n - Updated CVE database; credit [Alexandre Zanni](https://github.com/noraj).\n - Added `-g` and `--gex-test` for granular GEX modulus size tests; credit [Adam Russell](https://github.com/thecliguy).\n - Snap packages now print more user-friendly error messages when permission errors are encountered.\n - JSON 'target' field now always includes port number; credit [tomatohater1337](https://github.com/tomatohater1337).\n - JSON output now includes recommendations and CVE data.\n - Mixed host key/CA key types (i.e.: RSA host keys signed with ED25519 CAs, etc.) are now properly handled.\n - Warnings are now printed for 2048-bit moduli; partial credit [Adam Russell](https://github.com/thecliguy).\n - SHA-1 algorithms now cause failures.\n - CBC mode ciphers are now warnings instead of failures.\n - Generic failure/warning messages replaced with more specific reasons (i.e.: 'using weak cipher' => 'using broken RC4 cipher').\n - Updated built-in policies to include missing host key size information.\n - Added built-in policies for OpenSSH 8.8, 8.9, 9.0, 9.1, 9.2, and 9.3.\n - Added 33 new host keys: `dsa2048-sha224@libassh.org`, `dsa2048-sha256@libassh.org`, `dsa3072-sha256@libassh.org`, `ecdsa-sha2-1.3.132.0.10-cert-v01@openssh.com`, `eddsa-e382-shake256@libassh.org`, `eddsa-e521-shake256@libassh.org`, `null`, `pgp-sign-dss`, `pgp-sign-rsa`, `spki-sign-dss`, `spki-sign-rsa`, `ssh-dss-sha224@ssh.com`, `ssh-dss-sha384@ssh.com`, `ssh-dss-sha512@ssh.com`, `ssh-ed448-cert-v01@openssh.com`, `ssh-rsa-sha224@ssh.com`, `ssh-rsa-sha2-256`, `ssh-rsa-sha2-512`, `ssh-rsa-sha384@ssh.com`, `ssh-rsa-sha512@ssh.com`, `ssh-xmss-cert-v01@openssh.com`, `ssh-xmss@openssh.com`, `webauthn-sk-ecdsa-sha2-nistp256@openssh.com`, `x509v3-ecdsa-sha2-1.3.132.0.10`, `x509v3-sign-dss-sha1`, `x509v3-sign-dss-sha224@ssh.com`, `x509v3-sign-dss-sha256@ssh.com`, `x509v3-sign-dss-sha384@ssh.com`, `x509v3-sign-dss-sha512@ssh.com`, `x509v3-sign-rsa-sha1`, `x509v3-sign-rsa-sha224@ssh.com`, `x509v3-sign-rsa-sha384@ssh.com`, `x509v3-sign-rsa-sha512@ssh.com`.\n - Added 46 new key exchanges: `diffie-hellman-group14-sha224@ssh.com`, `diffie-hellman_group17-sha512`, `diffie-hellman-group-exchange-sha224@ssh.com`, `diffie-hellman-group-exchange-sha384@ssh.com`, `ecdh-sha2-1.2.840.10045.3.1.1`, `ecdh-sha2-1.2.840.10045.3.1.7`, `ecdh-sha2-1.3.132.0.1`, `ecdh-sha2-1.3.132.0.16`, `ecdh-sha2-1.3.132.0.26`, `ecdh-sha2-1.3.132.0.27`, `ecdh-sha2-1.3.132.0.33`, `ecdh-sha2-1.3.132.0.34`, `ecdh-sha2-1.3.132.0.35`, `ecdh-sha2-1.3.132.0.36`, `ecdh-sha2-1.3.132.0.37`, `ecdh-sha2-1.3.132.0.38`, `ecdh-sha2-4MHB+NBt3AlaSRQ7MnB4cg==`, `ecdh-sha2-5pPrSUQtIaTjUSt5VZNBjg==`, `ecdh-sha2-9UzNcgwTlEnSCECZa7V1mw==`, `ecdh-sha2-D3FefCjYoJ/kfXgAyLddYA==`, `ecdh-sha2-h/SsxnLCtRBh7I9ATyeB3A==`, `ecdh-sha2-m/FtSAmrV4j/Wy6RVUaK7A==`, `ecdh-sha2-mNVwCXAoS1HGmHpLvBC94w==`, `ecdh-sha2-qCbG5Cn/jjsZ7nBeR7EnOA==`, `ecdh-sha2-qcFQaMAMGhTziMT0z+Tuzw==`, `ecdh-sha2-VqBg4QRPjxx1EXZdV0GdWQ==`, `ecdh-sha2-wiRIU8TKjMZ418sMqlqtvQ==`, `ecdh-sha2-zD/b3hu/71952ArpUG4OjQ==`, `ecmqv-sha2`, `gss-13.3.132.0.10-sha256-*`, `gss-curve25519-sha256-*`, `gss-curve448-sha512-*`, `gss-gex-sha1-*`, `gss-gex-sha256-*`, `gss-group14-sha1-*`, `gss-group14-sha256-*`, `gss-group15-sha512-*`, `gss-group16-sha512-*`, `gss-group17-sha512-*`, `gss-group18-sha512-*`, `gss-group1-sha1-*`, `gss-nistp256-sha256-*`, `gss-nistp384-sha256-*`, `gss-nistp521-sha512-*`, `m383-sha384@libassh.org`, `m511-sha512@libassh.org`.\n - Added 28 new ciphers: `3des-cfb`, `3des-ecb`, `3des-ofb`, `blowfish-cfb`, `blowfish-ecb`, `blowfish-ofb`, `camellia128-cbc@openssh.org`, `camellia128-ctr@openssh.org`, `camellia192-cbc@openssh.org`, `camellia192-ctr@openssh.org`, `camellia256-cbc@openssh.org`, `camellia256-ctr@openssh.org`, `cast128-cfb`, `cast128-ecb`, `cast128-ofb`, `cast128-12-cbc@ssh.com`, `idea-cfb`, `idea-ecb`, `idea-ofb`, `rijndael-cbc@ssh.com`, `seed-ctr@ssh.com`, `serpent128-gcm@libassh.org`, `serpent256-gcm@libassh.org`, `twofish128-gcm@libassh.org`, `twofish256-gcm@libassh.org`, `twofish-cfb`, `twofish-ecb`, `twofish-ofb`\n - Added 5 new MACs: `hmac-sha1-96@openssh.com`, `hmac-sha224@ssh.com`, `hmac-sha256-2@ssh.com`, `hmac-sha384@ssh.com`, `hmac-whirlpool`.\n\n### v2.5.0 (2021-08-26)\n - Fixed crash when running host key tests.\n - Handles server connection failures more gracefully.\n - Now prints JSON with indents when `-jj` is used (useful for debugging).\n - Added MD5 fingerprints to verbose output.\n - Added `-d`/`--debug` option for getting debugging output; credit [Adam Russell](https://github.com/thecliguy).\n - Updated JSON output to include MD5 fingerprints.  Note that this results in a breaking change in the 'fingerprints' dictionary format.\n - Updated OpenSSH 8.1 (and earlier) policies to include `rsa-sha2-512` and `rsa-sha2-256`.\n - Added OpenSSH v8.6 & v8.7 policies.\n - Added 3 new key exchanges: `gss-gex-sha1-eipGX3TCiQSrx573bT1o1Q==`, `gss-group1-sha1-eipGX3TCiQSrx573bT1o1Q==`, and `gss-group14-sha1-eipGX3TCiQSrx573bT1o1Q==`.\n - Added 3 new MACs: `hmac-ripemd160-96`, `AEAD_AES_128_GCM`, and `AEAD_AES_256_GCM`.\n\n### v2.4.0 (2021-02-23)\n - Added multi-threaded scanning support.\n - Added built-in Windows manual page (see `-m`/`--manual`); credit [Adam Russell](https://github.com/thecliguy).\n - Added version check for OpenSSH user enumeration (CVE-2018-15473).\n - Added deprecation note to host key types based on SHA-1.\n - Added extra warnings for SSHv1.\n - Added built-in hardened OpenSSH v8.5 policy.\n - Upgraded warnings to failures for host key types based on SHA-1.\n - Fixed crash when receiving unexpected response during host key test.\n - Fixed hang against older Cisco devices during host key test & gex test.\n - Fixed improper termination while scanning multiple targets when one target returns an error.\n - Dropped support for Python 3.5 (which reached EOL in Sept. 2020).\n - Added 1 new key exchange: `sntrup761x25519-sha512@openssh.com`.\n\n### v2.3.1 (2020-10-28)\n - Now parses public key sizes for `rsa-sha2-256-cert-v01@openssh.com` and `rsa-sha2-512-cert-v01@openssh.com` host key types.\n - Flag `ssh-rsa-cert-v01@openssh.com` as a failure due to SHA-1 hash.\n - Fixed bug in recommendation output which suppressed some algorithms inappropriately.\n - Built-in policies now include CA key requirements (if certificates are in use).\n - Lookup function (`--lookup`) now performs case-insensitive lookups of similar algorithms; credit [Adam Russell](https://github.com/thecliguy).\n - Migrated pre-made policies from external files to internal database.\n - Split single 3,500 line script into many files (by class).\n - Added setup.py support; credit [Ganden Schaffner](https://github.com/gschaffner).\n - Added 1 new cipher: `des-cbc@ssh.com`.\n\n### v2.3.0 (2020-09-27)\n - Added new policy auditing functionality to test adherence to a hardening guide/standard configuration (see `-L`/`--list-policies`, `-M`/`--make-policy` and `-P`/`--policy`).  For an in-depth tutorial, see <https://www.positronsecurity.com/blog/2020-09-27-ssh-policy-configuration-checks-with-ssh-audit/>.\n - Created new man page (see `ssh-audit.1` file).\n - 1024-bit moduli upgraded from warnings to failures.\n - Many Python 2 code clean-ups, testing framework improvements, pylint & flake8 fixes, and mypy type comments; credit [Jürgen Gmach](https://github.com/jugmac00).\n - Added feature to look up algorithms in internal database (see `--lookup`); credit [Adam Russell](https://github.com/thecliguy).\n - Suppress recommendation of token host key types.\n - Added check for use-after-free vulnerability in PuTTY v0.73.\n - Added 11 new host key types: `ssh-rsa1`, `ssh-dss-sha256@ssh.com`, `ssh-gost2001`, `ssh-gost2012-256`, `ssh-gost2012-512`, `spki-sign-rsa`, `ssh-ed448`, `x509v3-ecdsa-sha2-nistp256`, `x509v3-ecdsa-sha2-nistp384`, `x509v3-ecdsa-sha2-nistp521`, `x509v3-rsa2048-sha256`.\n - Added 8 new key exchanges: `diffie-hellman-group1-sha256`, `kexAlgoCurve25519SHA256`, `Curve25519SHA256`, `gss-group14-sha256-`, `gss-group15-sha512-`, `gss-group16-sha512-`, `gss-nistp256-sha256-`, `gss-curve25519-sha256-`.\n - Added 5 new ciphers: `blowfish`, `AEAD_AES_128_GCM`, `AEAD_AES_256_GCM`, `crypticore128@ssh.com`, `seed-cbc@ssh.com`.\n - Added 3 new MACs: `chacha20-poly1305@openssh.com`, `hmac-sha3-224`, `crypticore-mac@ssh.com`.\n\n### v2.2.0 (2020-03-11)\n - Marked host key type `ssh-rsa` as weak due to [practical SHA-1 collisions](https://eprint.iacr.org/2020/014.pdf).\n - Added Windows builds.\n - Added 10 new host key types: `ecdsa-sha2-1.3.132.0.10`, `x509v3-sign-dss`, `x509v3-sign-rsa`, `x509v3-sign-rsa-sha256@ssh.com`, `x509v3-ssh-dss`, `x509v3-ssh-rsa`, `sk-ecdsa-sha2-nistp256-cert-v01@openssh.com`, `sk-ecdsa-sha2-nistp256@openssh.com`, `sk-ssh-ed25519-cert-v01@openssh.com`, and `sk-ssh-ed25519@openssh.com`.\n - Added 18 new key exchanges: `diffie-hellman-group14-sha256@ssh.com`, `diffie-hellman-group15-sha256@ssh.com`, `diffie-hellman-group15-sha384@ssh.com`, `diffie-hellman-group16-sha384@ssh.com`, `diffie-hellman-group16-sha512@ssh.com`, `diffie-hellman-group18-sha512@ssh.com`, `ecdh-sha2-curve25519`, `ecdh-sha2-nistb233`, `ecdh-sha2-nistb409`, `ecdh-sha2-nistk163`, `ecdh-sha2-nistk233`, `ecdh-sha2-nistk283`, `ecdh-sha2-nistk409`, `ecdh-sha2-nistp192`, `ecdh-sha2-nistp224`, `ecdh-sha2-nistt571`, `gss-gex-sha1-`, and `gss-group1-sha1-`.\n - Added 9 new ciphers: `camellia128-cbc`, `camellia128-ctr`, `camellia192-cbc`, `camellia192-ctr`, `camellia256-cbc`, `camellia256-ctr`, `aes128-gcm`, `aes256-gcm`, and `chacha20-poly1305`.\n - Added 2 new MACs: `aes128-gcm` and `aes256-gcm`.\n\n### v2.1.1 (2019-11-26)\n - Added 2 new host key types: `rsa-sha2-256-cert-v01@openssh.com`, `rsa-sha2-512-cert-v01@openssh.com`.\n - Added 2 new ciphers: `des`, `3des`.\n - Added 3 new PuTTY vulnerabilities.\n - During client testing, client IP address is now listed in output.\n\n### v2.1.0 (2019-11-14)\n - Added client software auditing functionality (see `-c` / `--client-audit` option).\n - Added JSON output option (see `-j` / `--json` option; credit [Andreas Jaggi](https://github.com/x-way)).\n - Fixed crash while scanning Solaris Sun_SSH.\n - Added 9 new key exchanges: `gss-group1-sha1-toWM5Slw5Ew8Mqkay+al2g==`, `gss-gex-sha1-toWM5Slw5Ew8Mqkay+al2g==`, `gss-group14-sha1-`, `gss-group14-sha1-toWM5Slw5Ew8Mqkay+al2g==`, `gss-group14-sha256-toWM5Slw5Ew8Mqkay+al2g==`, `gss-group15-sha512-toWM5Slw5Ew8Mqkay+al2g==`, `diffie-hellman-group15-sha256`, `ecdh-sha2-1.3.132.0.10`, `curve448-sha512`.\n - Added 1 new host key type: `ecdsa-sha2-1.3.132.0.10`.\n - Added 4 new ciphers: `idea-cbc`, `serpent128-cbc`, `serpent192-cbc`, `serpent256-cbc`.\n - Added 6 new MACs: `hmac-sha2-256-96-etm@openssh.com`, `hmac-sha2-512-96-etm@openssh.com`, `hmac-ripemd`, `hmac-sha256-96@ssh.com`, `umac-32@openssh.com`, `umac-96@openssh.com`.\n\n### v2.0.0 (2019-08-29)\n - Forked from https://github.com/arthepsy/ssh-audit (development was stalled, and developer went MIA).\n - Added RSA host key length test.\n - Added RSA certificate key length test.\n - Added Diffie-Hellman modulus size test.\n - Now outputs host key fingerprints for RSA and ED25519.\n - Added 5 new key exchanges: `sntrup4591761x25519-sha512@tinyssh.org`, `diffie-hellman-group-exchange-sha256@ssh.com`, `diffie-hellman-group-exchange-sha512@ssh.com`, `diffie-hellman-group16-sha256`, `diffie-hellman-group17-sha512`.\n - Added 3 new encryption algorithms: `des-cbc-ssh1`, `blowfish-ctr`, `twofish-ctr`.\n - Added 10 new MACs: `hmac-sha2-56`, `hmac-sha2-224`, `hmac-sha2-384`, `hmac-sha3-256`, `hmac-sha3-384`, `hmac-sha3-512`, `hmac-sha256`, `hmac-sha256@ssh.com`, `hmac-sha512`, `hmac-512@ssh.com`.\n - Added command line argument (`-t` / `--timeout`) for connection & reading timeouts.\n - Updated CVEs for libssh & Dropbear.\n\n### v1.7.0 (2016-10-26)\n - implement options to allow specify IPv4/IPv6 usage and order of precedence\n - implement option to specify remote port (old behavior kept for compatibility)\n - add colors support for Microsoft Windows via optional colorama dependency\n - fix encoding and decoding issues, add tests, do not crash on encoding errors\n - use mypy-lang for static type checking and verify all code\n\n### v1.6.0 (2016-10-14)\n - implement algorithm recommendations section (based on recognized software)\n - implement full libssh support (version history, algorithms, security, etc)\n - fix SSH-1.99 banner recognition and version comparison functionality\n - do not output empty algorithms (happens for misconfigured servers)\n - make consistent output for Python 3.x versions\n - add a lot more tests (conf, banner, software, SSH1/SSH2, output, etc)\n - use Travis CI to test for multiple Python versions (2.6-3.5, pypy, pypy3)\n\n### v1.5.0 (2016-09-20)\n - create security section for related security information\n - match and output assigned CVE list and security issues for Dropbear SSH\n - implement full SSH1 support with fingerprint information\n - automatically fallback to SSH1 on protocol mismatch\n - add new options to force SSH1 or SSH2 (both allowed by default)\n - parse banner information and convert it to specific software and OS version\n - do not use padding in batch mode\n - several fixes (Cisco sshd, rare hangs, error handling, etc)\n\n### v1.0.20160902\n - implement batch output option\n - implement minimum output level option\n - fix compatibility with Python 2.6\n\n### v1.0.20160812\n - implement SSH version compatibility feature\n - fix wrong mac algorithm warning\n - fix Dropbear SSH version typo\n - parse pre-banner header\n - better errors handling\n\n### v1.0.20160803\n - use OpenSSH 7.3 banner\n - add new key-exchange algorithms\n\n### v1.0.20160207\n - use OpenSSH 7.2 banner\n - additional warnings for OpenSSH 7.2\n - fix OpenSSH 7.0 failure messages\n - add rijndael-cbc failure message from OpenSSH 6.7\n\n### v1.0.20160105\n - multiple additional warnings\n - support for none algorithm\n - better compression handling\n - ensure reading enough data (fixes few Linux SSH)\n\n### v1.0.20151230\n - Dropbear SSH support\n\n### v1.0.20151223\n - initial version\n"
        },
        {
          "name": "add_builtin_man_page.sh",
          "type": "blob",
          "size": 4.2197265625,
          "content": "#!/usr/bin/env bash\n\n#\n#   The MIT License (MIT)\n#\n#   Copyright (C) 2021-2024 Joe Testa (jtesta@positronsecurity.com)\n#   Copyright (C) 2021 Adam Russell (<adam[at]thecliguy[dot]co[dot]uk>)\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a copy\n#   of this software and associated documentation files (the \"Software\"), to deal\n#   in the Software without restriction, including without limitation the rights\n#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n#   copies of the Software, and to permit persons to whom the Software is\n#   furnished to do so, subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included in\n#   all copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n#   THE SOFTWARE.\n#\n\n################################################################################\n# add_builtin_man_page.sh\n#\n# PURPOSE\n#   Since some platforms lack a manual reader it's necessary to provide an\n#   alternative means of reading the man page.\n#\n#   This script should be run as part of the ssh-audit packaging process for\n#   Docker, PyPI, Snap, and Windows. It populates the 'BUILTIN_MAN_PAGE'\n#   variable in 'globals.py' with the contents of the man page. Users can then\n#   see the man page with \"ssh-audit [--manual|-m]\".\n#\n#   Linux or Cygwin is required to run this script.\n#\n# USAGE\n#   add_builtin_man_page.sh [-m <path-to-man-page>] [-g <path-to-globals.py>]\n#\n################################################################################\n\nusage() {\n    echo >&2 \"Usage: $0 [-m <path-to-man-page>] [-g <path-to-globals.py>] [-h]\"\n    echo >&2 \"  -m    Specify an alternate man page path (default: ./ssh-audit.1)\"\n    echo >&2 \"  -g    Specify an alternate globals.py path (default: ./src/ssh_audit/globals.py)\"\n    echo >&2 \"  -h    This help message\"\n}\n\nPLATFORM=\"$(uname -s)\"\n\n# This script is intended for use on Linux and Cygwin only.\ncase \"${PLATFORM}\" in\n  Linux | CYGWIN*) ;;\n  *)\n    echo \"Platform not supported: ${PLATFORM}\"\n    exit 1\n    ;;\nesac\n\nMAN_PAGE=./ssh-audit.1\nGLOBALS_PY=./src/ssh_audit/globals.py\n\nwhile getopts \"m: g: h\" OPTION; do\n    case \"${OPTION}\" in\n        m)\n            MAN_PAGE=\"${OPTARG}\"\n            ;;\n        g)\n            GLOBALS_PY=\"${OPTARG}\"\n            ;;\n        h)\n            usage\n            exit 0\n            ;;\n        *)\n            echo >&2 \"Invalid parameter(s) provided\"\n            usage\n            exit 1\n            ;;\n    esac\ndone\n\n# Check that the specified files exist.\n[[ -f \"$MAN_PAGE\" ]] || { echo >&2 \"man page file not found: $MAN_PAGE\"; exit 1; }\n[[ -f \"${GLOBALS_PY}\" ]] || { echo >&2 \"globals.py file not found: ${GLOBALS_PY}\"; exit 1; }\n\n# Check that the 'ul' (do underlining) binary exists.\nif [[ \"${PLATFORM}\" == \"Linux\" ]]; then\n    command -v ul >/dev/null 2>&1 || { echo >&2 \"ul not found.\"; exit 1; }\nfi\n\n# Check that the 'sed' (stream editor) binary exists.\ncommand -v sed >/dev/null 2>&1 || { echo >&2 \"sed not found.\"; exit 1; }\n\n# Reset the globals.py file, in case it was modified from a prior run.\ngit checkout \"${GLOBALS_PY}\" > /dev/null 2>&1\n\n# Remove the Windows man page placeholder from 'globals.py'.\nsed -i '/^BUILTIN_MAN_PAGE/d' \"${GLOBALS_PY}\"\n\necho \"Processing man page at ${MAN_PAGE} and placing output into ${GLOBALS_PY}...\"\n\n# Append the man page content to 'globals.py'.\n#   * man outputs a backspace-overwrite sequence rather than an ANSI escape\n#     sequence.\n#   * 'MAN_KEEP_FORMATTING' preserves the backspace-overwrite sequence when\n#     redirected to a file or a pipe.\n#   * sed converts unicode hyphens into an ASCI equivalent.\n\necho BUILTIN_MAN_PAGE = '\"\"\"' >> \"${GLOBALS_PY}\"\nMANWIDTH=80 MAN_KEEP_FORMATTING=1 man \"${MAN_PAGE}\" | sed $'s/\\u2010/-/g' >> \"${GLOBALS_PY}\"\necho '\"\"\"' >> \"${GLOBALS_PY}\"\n\necho \"Done.\"\nexit 0\n"
        },
        {
          "name": "build_snap.sh",
          "type": "blob",
          "size": 2.9736328125,
          "content": "#!/usr/bin/env bash\n\n#\n#   The MIT License (MIT)\n#\n#   Copyright (C) 2021-2024 Joe Testa (jtesta@positronsecurity.com)\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a copy\n#   of this software and associated documentation files (the \"Software\"), to deal\n#   in the Software without restriction, including without limitation the rights\n#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n#   copies of the Software, and to permit persons to whom the Software is\n#   furnished to do so, subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included in\n#   all copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n#   THE SOFTWARE.\n#\n\n################################################################################\n# build_snap.sh\n#\n# Builds a Snap package.\n################################################################################\n\n\n# Pre-requisites\nsudo apt install -y make\nsudo snap install snapcraft --classic\nsudo snap install review-tools lxd\n\n# Initialize LXD.\nsudo lxd init --auto\n\n# Reset the filesystem from any previous runs.\nrm -rf parts/ prime/ snap/ stage/ build/ dist/ src/*.egg-info/ ssh-audit*.snap\ngit checkout snapcraft.yaml 2> /dev/null\ngit checkout src/ssh_audit/globals.py 2> /dev/null\n\n# Add the built-in manual page.\n./add_builtin_man_page.sh\n\n# Get the version from the globals.py file.\nversion=$(grep VERSION src/ssh_audit/globals.py | awk 'BEGIN {FS=\"=\"} ; {print $2}' | tr -d '[:space:]')\n\n# Strip the quotes around the version (along with the initial 'v' character) and append \"-1\" to make the default Snap version (i.e.: 'v2.5.0' => '2.5.0-1')\ndefault_snap_version=\"${version:2:-1}-1\"\necho -e -n \"\\nEnter Snap package version [default: ${default_snap_version}]: \"\nread -r snap_version\n\n# If no version was specified, use the default version.\nif [[ $snap_version == '' ]]; then\n    snap_version=$default_snap_version\n    echo -e \"Using default snap version: ${snap_version}\\n\"\nfi\n\n# Ensure that the snap version fits the format of X.X.X-X.\nif [[ ! $snap_version =~ ^[0-9]\\.[0-9]\\.[0-9]\\-[0-9]$ ]]; then\n   echo \"Error: version string does not match format X.X.X-X!\"\n   exit 1\nfi\n\n# Append the version field to the end of the file.  Not pretty, but it works.\necho -e \"\\nversion: '${snap_version}'\" >> snapcraft.yaml\n\n# Set the SNAP_PACKAGE variable to True so that file permission errors give more user-friendly \nsed -i 's/SNAP_PACKAGE = False/SNAP_PACKAGE = True/' src/ssh_audit/globals.py\n\nsnapcraft --use-lxd && echo -e \"\\nDone.\\n\"\n"
        },
        {
          "name": "build_windows_executable.sh",
          "type": "blob",
          "size": 3.96484375,
          "content": "#!/usr/bin/env bash\n\n#\n#   The MIT License (MIT)\n#\n#   Copyright (C) 2021-2024 Joe Testa (jtesta@positronsecurity.com)\n#\n#   Permission is hereby granted, free of charge, to any person obtaining a copy\n#   of this software and associated documentation files (the \"Software\"), to deal\n#   in the Software without restriction, including without limitation the rights\n#   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n#   copies of the Software, and to permit persons to whom the Software is\n#   furnished to do so, subject to the following conditions:\n#\n#   The above copyright notice and this permission notice shall be included in\n#   all copies or substantial portions of the Software.\n#\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n#   THE SOFTWARE.\n#\n\n################################################################################\n# build_windows_executable.sh\n#\n# Builds a Windows executable using PyInstaller.\n################################################################################\n\n\nPLATFORM=\"$(uname -s)\"\n\n# This script is intended for use on Cygwin only.\ncase \"${PLATFORM}\" in\n    CYGWIN*) ;;\n    *)\n    echo \"Platform not supported (${PLATFORM}).  This must be run in Cygwin only.\"\n    exit 1\n    ;;\nesac\n\n# Ensure that Python 3.x is installed.\nif [[ \"$(python -V)\" != \"Python 3.\"* ]]; then\n    echo \"Python v3.x not found.  Install the latest stable version from: https://www.python.org/\"\n    exit 1\nfi\n\n# Install/update package dependencies.\necho \"Installing/updating pyinstaller and colorama packages...\"\npip install -U pyinstaller colorama\necho\n\n# Prompt for the version to release.\necho -n \"Enter the version to release, using format 'vX.X.X': \"\nread -r version\n\n# Ensure that entered version fits required format.\nif [[ ! $version =~ ^v[0-9]\\.[0-9]\\.[0-9]$ ]]; then\n   echo \"Error: version string does not match format vX.X.X!\"\n   exit 1\nfi\n\n# Verify that version is correct.\necho -n \"Version will be set to '${version}'.  Is this correct? (y/n): \"\nread -r yn\necho\n\nif [[ $yn != \"y\" ]]; then\n   echo \"Build cancelled.\"\n   exit 1\nfi\n\n# Reset any local changes made to globals.py from a previous run.\ngit checkout src/ssh_audit/globals.py 2> /dev/null\n\n# Update the man page.\n./add_builtin_man_page.sh\nretval=$?\nif [[ ${retval} != 0 ]]; then\n    echo \"Failed to run ./update_windows_man_page.sh\"\n    exit 1\nfi\n\n# Do all operations from this point from the main source directory.\npushd src/ssh_audit || exit > /dev/null\n\n# Delete the existing VERSION variable and add the value that the user entered, above.\nsed -i '/^VERSION/d' globals.py\necho \"VERSION = '$version'\" >> globals.py\n\n# Delete cached files if they exist from a prior run.\nrm -rf dist/ build/ ssh-audit.spec\n\n# Create a hard link from ssh_audit.py to ssh-audit.py.\nif [[ ! -f ssh-audit.py ]]; then\n    ln ssh_audit.py ssh-audit.py\nfi\n\necho -e \"\\nRunning pyinstaller...\\n\"\npyinstaller -F --icon ../../windows_icon.ico ssh-audit.py\n\nif [[ -f dist/ssh-audit.exe ]]; then\n    echo -e \"\\nExecutable created in $(pwd)/dist/ssh-audit.exe\\n\"\nelse\n    echo -e \"\\nFAILED to create $(pwd)/dist/ssh-audit.exe!\\n\"\n    exit 1\nfi\n\n# Ensure that the version string doesn't have '-dev' in it.\ndist/ssh-audit.exe | grep -E 'ssh-audit.exe v.+\\-dev' > /dev/null\nretval=$?\nif [[ ${retval} == 0 ]]; then\n    echo -e \"\\nError: executable's version number includes '-dev'.\"\n    exit 1\nfi\n\n# Remove the cache files created during the build process, along with the link we created, above.\nrm -rf build/ ssh-audit.spec ssh-audit.py\n\n# Reset the changes we made to globals.py.\ngit checkout globals.py 2> /dev/null\n\npopd || exit > /dev/null\nexit 0\n"
        },
        {
          "name": "docker_test.sh",
          "type": "blob",
          "size": 30.0244140625,
          "content": "#!/bin/bash\n\n#\n# This script will set up a docker image with multiple versions of OpenSSH, then\n# use it to run tests.\n#\n# Optional arguments:\n#   --accept: accepts test failures and overwrites expected results with actual results (useful for updating the tests themselves).\n#   --create: attempts to create a new docker image.\n#\n#\n# For debugging purposes, here is a cheat sheet for manually running the docker image:\n#\n# docker run -p 2222:22 -it ssh-audit-test:X /bin/bash\n# docker run -p 2222:22 --security-opt seccomp:unconfined -it ssh-audit-test /debug.sh\n# docker run -d -p 2222:22 ssh-audit-test:X /openssh/sshd-5.6p1 -D -f /etc/ssh/sshd_config-5.6p1_test1\n# docker run -d -p 2222:22 ssh-audit-test:X /openssh/sshd-8.0p1 -D -f /etc/ssh/sshd_config-8.0p1_test1\n#\n\n\n# This is the docker tag for the image.  If this tag doesn't exist, then we assume the\n# image is out of date, and generate a new one with this tag.\nIMAGE_VERSION=3\n\n# This is the name of our docker image.\nIMAGE_NAME=positronsecurity/ssh-audit-test-framework\n\n\n# Terminal colors.\nCLR=\"\\033[0m\"\n#RED=\"\\033[0;31m\"\n#YELLOW=\"\\033[0;33m\"\nGREEN=\"\\033[0;32m\"\nREDB=\"\\033[1;31m\"    # Red + bold\nYELLOWB=\"\\033[1;33m\" # Yellow + bold\nGREENB=\"\\033[1;32m\"  # Green + bold\n\n# Program return values.\nPROGRAM_RETVAL_FAILURE=3\nPROGRAM_RETVAL_WARNING=2\n#PROGRAM_RETVAL_CONNECTION_ERROR=1\nPROGRAM_RETVAL_GOOD=0\n\n\n# Counts the number of test failures.\nnum_failures=0\n\n# When set, if a failure is encountered, overwrite the expected output with the actual value (i.e.: the user validated the failures already and wants to update the tests themselves).\naccept=0\n\n\n# Returns 0 if current docker image exists.\ncheck_if_docker_image_exists() {\n    images=$(docker image ls | grep -E \"$IMAGE_NAME[[:space:]]+$IMAGE_VERSION\")\n}\n\n\n# Uncompresses and compiles the specified version of Dropbear.\ncompile_dropbear() {\n    version=$1\n    compile \"Dropbear\" \"$version\"\n}\n\n\n# Uncompresses and compiles the specified version of OpenSSH.\ncompile_openssh() {\n    version=$1\n    compile \"OpenSSH\" \"$version\"\n}\n\n\n# Uncompresses and compiles the specified version of TinySSH.\ncompile_tinyssh() {\n    version=$1\n    compile \"TinySSH\" \"$version\"\n}\n\n\ncompile() {\n    project=$1\n    version=$2\n\n    tarball=\n    uncompress_options=\n    source_dir=\n    server_executable=\n    if [[ $project == \"OpenSSH\" ]]; then\n        tarball=\"openssh-${version}.tar.gz\"\n        uncompress_options=\"xzf\"\n        source_dir=\"openssh-${version}\"\n        server_executable=sshd\n    elif [[ $project == \"Dropbear\" ]]; then\n        tarball=\"dropbear-${version}.tar.bz2\"\n        uncompress_options=\"xjf\"\n        source_dir=\"dropbear-${version}\"\n        server_executable=dropbear\n    elif [[ $project == \"TinySSH\" ]]; then\n        tarball=\"${version}.tar.gz\"\n        uncompress_options=\"xzf\"\n        source_dir=\"tinyssh-${version}\"\n        server_executable=\"build/bin/tinysshd\"\n    fi\n\n    echo \"Uncompressing ${project} ${version}...\"\n    tar $uncompress_options \"$tarball\"\n\n    echo \"Compiling ${project} ${version}...\"\n    pushd \"$source_dir\" || exit > /dev/null\n\n    # TinySSH has no configure script... only a Makefile.\n    if [[ $project == \"TinySSH\" ]]; then\n        make -j 10\n    else\n        ./configure && make -j 10\n    fi\n\n    if [[ ! -f $server_executable ]]; then\n        echo -e \"${REDB}Error: ${server_executable} not built!${CLR}\"\n        exit 1\n    fi\n\n    echo -e \"\\n${GREEN}Successfully built ${project} ${version}${CLR}\\n\"\n    popd || exit > /dev/null\n}\n\n\n# Creates a new docker image.\ncreate_docker_image() {\n    # Create a new temporary directory.\n    TMP_DIR=$(mktemp -d /tmp/sshaudit-docker-XXXXXXXXXX)\n\n    # Copy the Dockerfile and all files in the test/docker/ dir to our new temp directory.\n    find test/docker/ -maxdepth 1 -type f -exec cp -t \"$TMP_DIR\" \"{}\" +\n\n    # Make the temp directory our working directory for the duration of the build\n    # process.\n    pushd \"$TMP_DIR\" || exit > /dev/null\n\n    # Get the release keys.\n    get_dropbear_release_key\n    get_openssh_release_key\n    get_tinyssh_release_key\n\n    # Aside from checking the GPG signatures, we also compare against this known-good\n    # SHA-256 hash just in case.\n    get_openssh \"4.0p1\" \"5adb9b2c2002650e15216bf94ed9db9541d9a17c96fcd876784861a8890bc92b\"\n    get_openssh \"5.6p1\" \"538af53b2b8162c21a293bb004ae2bdb141abd250f61b4cea55244749f3c6c2b\"\n    get_openssh \"8.0p1\" \"bd943879e69498e8031eb6b7f44d08cdc37d59a7ab689aa0b437320c3481fd68\"\n    get_dropbear \"2019.78\" \"525965971272270995364a0eb01f35180d793182e63dd0b0c3eb0292291644a4\"\n    get_tinyssh \"20190101\" \"554a9a94e53b370f0cd0c5fbbd322c34d1f695cbcea6a6a32dcb8c9f595b3fea\"\n\n    # Compile the versions of OpenSSH.\n    compile_openssh \"4.0p1\"\n    compile_openssh \"5.6p1\"\n    compile_openssh \"8.0p1\"\n\n    # Compile the versions of Dropbear.\n    compile_dropbear \"2019.78\"\n\n    # Compile the versions of TinySSH.\n    compile_tinyssh \"20190101\"\n\n\n    # Rename the default config files so we know they are our originals.\n    mv openssh-4.0p1/sshd_config sshd_config-4.0p1_orig\n    mv openssh-5.6p1/sshd_config sshd_config-5.6p1_orig\n    mv openssh-8.0p1/sshd_config sshd_config-8.0p1_orig\n\n\n    # Create the configurations for each test.\n\n\n    #\n    # OpenSSH v4.0p1\n    #\n\n    # Test 1: Basic test.\n    create_openssh_config \"4.0p1\" \"test1\" \"HostKey /etc/ssh/ssh1_host_key\\nHostKey /etc/ssh/ssh_host_rsa_key_1024\\nHostKey /etc/ssh/ssh_host_dsa_key\"\n\n\n    #\n    # OpenSSH v5.6p1\n    #\n\n    # Test 1: Basic test.\n    create_openssh_config \"5.6p1\" \"test1\" \"HostKey /etc/ssh/ssh_host_rsa_key_1024\\nHostKey /etc/ssh/ssh_host_dsa_key\"\n\n    # Test 2: RSA 1024 host key with RSA 1024 certificate.\n    create_openssh_config \"5.6p1\" \"test2\" \"HostKey /etc/ssh/ssh_host_rsa_key_1024\\nHostCertificate /etc/ssh/ssh_host_rsa_key_1024-cert_1024.pub\"\n\n    # Test 3: RSA 1024 host key with RSA 3072 certificate.\n    create_openssh_config \"5.6p1\" \"test3\" \"HostKey /etc/ssh/ssh_host_rsa_key_1024\\nHostCertificate /etc/ssh/ssh_host_rsa_key_1024-cert_3072.pub\"\n\n    # Test 4: RSA 3072 host key with RSA 1024 certificate.\n    create_openssh_config \"5.6p1\" \"test4\" \"HostKey /etc/ssh/ssh_host_rsa_key_3072\\nHostCertificate /etc/ssh/ssh_host_rsa_key_3072-cert_1024.pub\"\n\n    # Test 5: RSA 3072 host key with RSA 3072 certificate.\n    create_openssh_config \"5.6p1\" \"test5\" \"HostKey /etc/ssh/ssh_host_rsa_key_3072\\nHostCertificate /etc/ssh/ssh_host_rsa_key_3072-cert_3072.pub\"\n\n\n    #\n    # OpenSSH v8.0p1\n    #\n\n    # Test 1: Basic test.\n    create_openssh_config \"8.0p\" \"test1\" \"HostKey /etc/ssh/ssh_host_rsa_key_3072\\nHostKey /etc/ssh/ssh_host_ecdsa_key\\nHostKey /etc/ssh/ssh_host_ed25519_key\"\n\n    # Test 2: ED25519 certificate test.\n    create_openssh_config \"8.0p1\" \"test2\" \"HostKey /etc/ssh/ssh_host_ed25519_key\\nHostCertificate /etc/ssh/ssh_host_ed25519_key-cert.pub\"\n\n    # Test 3: Hardened installation test.\n    create_openssh_config \"8.0p1\" \"test3\" \"HostKey /etc/ssh/ssh_host_ed25519_key\\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\"\n\n\n    # Now build the docker image!\n    docker build --tag \"$IMAGE_NAME:$IMAGE_VERSION\" .\n\n    popd || exit > /dev/null\n    rm -rf -- \"$TMP_DIR\"\n}\n\n\n# Creates an OpenSSH configuration file for a specific test.\ncreate_openssh_config() {\n    openssh_version=$1\n    test_number=$2\n    config_text=$3\n\n    cp \"sshd_config-${openssh_version}_orig\" \"sshd_config-${openssh_version}_${test_number}\"\n    echo -e \"${config_text}\" >> \"sshd_config-${openssh_version}_${test_number}\"\n}\n\n\n# Downloads the Dropbear release key and adds it to the local keyring.\nget_dropbear_release_key() {\n    get_release_key \"Dropbear\" \"https://matt.ucc.asn.au/dropbear/releases/dropbear-key-2015.asc\" \"F29C6773\" \"F734 7EF2 EE2E 07A2 6762  8CA9 4493 1494 F29C 6773\"\n}\n\n\n# Downloads the OpenSSH release key and adds it to the local keyring.\nget_openssh_release_key() {\n    get_release_key \"OpenSSH\" \"https://ftp.openbsd.org/pub/OpenBSD/OpenSSH/RELEASE_KEY.asc\" \"6D920D30\" \"59C2 118E D206 D927 E667  EBE3 D3E5 F56B 6D92 0D30\"\n}\n\n\n# Downloads the TinySSH release key and adds it to the local keyring.\nget_tinyssh_release_key() {\n    get_release_key \"TinySSH\" \"\" \"96939FF9\" \"AADF 2EDF 5529 F170 2772  C8A2 DEC4 D246 931E F49B\"\n}\n\n\nget_release_key() {\n    project=$1\n    key_url=$2\n    key_id=$3\n    release_key_fingerprint_expected=$4\n\n    # The TinySSH release key isn't on any website, apparently.\n    if [[ $project == \"TinySSH\" ]]; then\n        gpg --keyserver keys.gnupg.net --recv-key \"$key_id\"\n    else\n        echo -e \"\\nGetting ${project} release key...\\n\"\n        wget -O key.asc \"$2\"\n\n        echo -e \"\\nImporting ${project} release key...\\n\"\n        gpg --import key.asc\n\n        rm key.asc\n    fi\n\n    local release_key_fingerprint_actual\n    release_key_fingerprint_actual=$(gpg --fingerprint \"$key_id\")\n    if [[ $release_key_fingerprint_actual != *\"$release_key_fingerprint_expected\"* ]]; then\n        echo -e \"\\n${REDB}Error: ${project} release key fingerprint does not match expected value!\\n\\tExpected: $release_key_fingerprint_expected\\n\\tActual: $release_key_fingerprint_actual\\n\\nTerminating.${CLR}\"\n        exit 1\n    fi\n    echo -e \"\\n\\n${GREEN}${project} release key matches expected value.${CLR}\\n\"\n}\n\n\n# Downloads the specified version of Dropbear.\nget_dropbear() {\n    version=$1\n    tarball_checksum_expected=$2\n    get_source \"Dropbear\" \"$version\" \"$tarball_checksum_expected\"\n}\n\n\n# Downloads the specified version of OpenSSH.\nget_openssh() {\n    version=$1\n    tarball_checksum_expected=$2\n    get_source \"OpenSSH\" \"$version\" \"$tarball_checksum_expected\"\n}\n\n\n# Downloads the specified version of TinySSH.\nget_tinyssh() {\n    version=$1\n    tarball_checksum_expected=$2\n    get_source \"TinySSH\" \"$version\" \"$tarball_checksum_expected\"\n}\n\n\nget_source() {\n    project=$1\n    version=$2\n    tarball_checksum_expected=$3\n\n    base_url_source=\n    base_url_sig=\n    tarball=\n    sig=\n    signer=\n    if [[ $project == \"OpenSSH\" ]]; then\n        base_url_source=\"https://cdn.openbsd.org/pub/OpenBSD/OpenSSH/portable/\"\n        base_url_sig=$base_url_source\n        tarball=\"openssh-${version}.tar.gz\"\n        sig=\"${tarball}.asc\"\n        signer=\"Damien Miller \"\n    elif [[ $project == \"Dropbear\" ]]; then\n        base_url_source=\"https://matt.ucc.asn.au/dropbear/releases/\"\n        base_url_sig=$base_url_source\n        tarball=\"dropbear-${version}.tar.bz2\"\n        sig=\"${tarball}.asc\"\n        signer=\"Dropbear SSH Release Signing <matt@ucc.asn.au>\"\n    elif [[ $project == \"TinySSH\" ]]; then\n        base_url_source=\"https://github.com/janmojzis/tinyssh/archive/\"\n        base_url_sig=\"https://github.com/janmojzis/tinyssh/releases/download/${version}/\"\n        tarball=\"${version}.tar.gz\"\n        sig=\"${tarball}.asc\"\n        signer=\"Jan Mojžíš <jan.mojzis@gmail.com>\"\n    fi\n\n    echo -e \"\\nGetting ${project} ${version} sources...\\n\"\n    wget \"${base_url_source}${tarball}\"\n\n    echo -e \"\\nGetting ${project} ${version} signature...\\n\"\n    wget \"${base_url_sig}${sig}\"\n\n\n    # Older OpenSSH releases were .sigs.\n    if [[ ($project == \"OpenSSH\") && (! -f $sig) ]]; then\n        wget \"${base_url_sig}openssh-${version}.tar.gz.sig\"\n        sig=openssh-${version}.tar.gz.sig\n    fi\n\n    local gpg_verify\n    gpg_verify=$(gpg --verify \"${sig}\" \"${tarball}\" 2>&1)\n    retval=$?\n    if [[ $gpg_verify != *\"Good signature from \\\"${signer}\"* ]]; then\n        echo -e \"\\n\\n${REDB}Error: ${project} signature invalid!\\n$gpg_verify\\n\\nTerminating.${CLR}\"\n        exit 1\n    fi\n\n    # Check GPG's return value.  0 denotes a valid signature, and 1 is returned\n    # on invalid signatures.\n    if [[ ${retval} != 0 ]]; then\n        echo -e \"\\n\\n${REDB}Error: ${project} signature invalid!  Verification returned code: $?\\n\\nTerminating.${CLR}\"\n        exit 1\n    fi\n\n    echo -e \"${GREEN}Signature on ${project} sources verified.${CLR}\\n\"\n\n    local checksum_actual\n    checksum_actual=$(sha256sum \"${tarball}\" | cut -f1 -d\" \")\n    if [[ $checksum_actual != \"$tarball_checksum_expected\" ]]; then\n        echo -e \"${REDB}Error: ${project} checksum is invalid!\\n  Expected: ${tarball_checksum_expected}\\n  Actual:   ${checksum_actual}\\n\\n  Terminating.${CLR}\"\n        exit 1\n    fi\n}\n\n\n# Pulls the defined image from Dockerhub.\npull_docker_image() {\n    docker pull \"${IMAGE_NAME}:${IMAGE_VERSION}\"\n    retval=$?\n    if [[ ${retval} == 0 ]]; then\n        echo -e \"${GREEN}Successfully downloaded image ${IMAGE_NAME}:${IMAGE_VERSION} from Dockerhub.${CLR}\\n\"\n    else\n        echo -e \"${REDB}Failed to pull image ${IMAGE_NAME}:${IMAGE_VERSION} from Dockerhub!  Error code: ${retval}${CLR}\\n\"\n        exit 1\n    fi\n}\n\n\n# Runs a Dropbear test.  Upon failure, a diff between the expected and actual results\n# is shown, then the script immediately terminates.\nrun_dropbear_test() {\n    dropbear_version=$1\n    test_number=$2\n    options=$3\n    expected_retval=$4\n\n    run_test \"Dropbear\" \"${dropbear_version}\" \"${test_number}\" \"${options}\" \"${expected_retval}\"\n}\n\n\n# Runs an OpenSSH test.  Upon failure, a diff between the expected and actual results\n# is shown, then the script immediately terminates.\nrun_openssh_test() {\n    openssh_version=$1\n    test_number=$2\n    expected_retval=$3\n\n    run_test \"OpenSSH\" \"${openssh_version}\" \"${test_number}\" \"\" \"${expected_retval}\"\n}\n\n\n# Runs a TinySSH test.  Upon failure, a diff between the expected and actual results\n# is shown, then the script immediately terminates.\nrun_tinyssh_test() {\n    tinyssh_version=$1\n    test_number=$2\n    expected_retval=$3\n\n    run_test \"TinySSH\" \"${tinyssh_version}\" \"${test_number}\" \"\" \"${expected_retval}\"\n}\n\n\nrun_test() {\n    server_type=$1\n    version=$2\n    test_number=$3\n    options=$4\n    expected_retval=$5\n\n    failed=0  # Set to 1 if this test fails.\n    server_exec=\n    test_result_stdout=\n    test_result_json=\n    expected_result_stdout=\n    expected_result_json=\n    test_name=\n    if [[ $server_type == \"OpenSSH\" ]]; then\n        server_exec=\"/openssh/sshd-${version} -D -f /etc/ssh/sshd_config-${version}_${test_number}\"\n        test_result_stdout=\"${TEST_RESULT_DIR}/openssh_${version}_${test_number}.txt\"\n        test_result_json=\"${TEST_RESULT_DIR}/openssh_${version}_${test_number}.json\"\n        expected_result_stdout=\"test/docker/expected_results/openssh_${version}_${test_number}.txt\"\n        expected_result_json=\"test/docker/expected_results/openssh_${version}_${test_number}.json\"\n        test_name=\"OpenSSH ${version} ${test_number}\"\n        options=\n    elif [[ $server_type == \"Dropbear\" ]]; then\n        server_exec=\"/dropbear/dropbear-${version} -F ${options}\"\n        test_result_stdout=\"${TEST_RESULT_DIR}/dropbear_${version}_${test_number}.txt\"\n        test_result_json=\"${TEST_RESULT_DIR}/dropbear_${version}_${test_number}.json\"\n        expected_result_stdout=\"test/docker/expected_results/dropbear_${version}_${test_number}.txt\"\n        expected_result_json=\"test/docker/expected_results/dropbear_${version}_${test_number}.json\"\n        test_name=\"Dropbear ${version} ${test_number}\"\n    elif [[ $server_type == \"TinySSH\" ]]; then\n        server_exec=\"/usr/bin/tcpserver -HRDl0 0.0.0.0 22 /tinysshd/tinyssh-20190101 -v /etc/tinyssh/\"\n        test_result_stdout=\"${TEST_RESULT_DIR}/tinyssh_${version}_${test_number}.txt\"\n        test_result_json=\"${TEST_RESULT_DIR}/tinyssh_${version}_${test_number}.json\"\n        expected_result_stdout=\"test/docker/expected_results/tinyssh_${version}_${test_number}.txt\"\n        expected_result_json=\"test/docker/expected_results/tinyssh_${version}_${test_number}.json\"\n        test_name=\"TinySSH ${version} ${test_number}\"\n    fi\n\n    #echo \"Running: docker run --rm -d -p 2222:22 $IMAGE_NAME:$IMAGE_VERSION ${server_exec}\"\n    cid=$(docker run --rm -d -p 2222:22 \"${IMAGE_NAME}:${IMAGE_VERSION}\" ${server_exec})\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n        echo -e \"${REDB}Failed to run docker image! (exit code: ${retval})${CLR}\"\n        exit 1\n    fi\n\n    ./ssh-audit.py --skip-rate-test localhost:2222 > \"$test_result_stdout\"\n    actual_retval=$?\n    if [[ $actual_retval != \"$expected_retval\" ]]; then\n        echo -e \"${REDB}Unexpected return value.  Expected: ${expected_retval}; Actual: ${actual_retval}${CLR}\"\n\n        if [[ $accept == 1 ]]; then\n            echo -e \"\\n${REDB}This failure cannot be automatically fixed; this script must be manually updated with the new expected return value.${CLR}\"\n        fi\n\n        cat \"${test_result_stdout}\"\n        docker container stop -t 0 \"${cid}\" > /dev/null\n        exit 1\n    fi\n\n    ./ssh-audit.py --skip-rate-test -jj localhost:2222 > \"$test_result_json\"\n    actual_retval=$?\n    if [[ $actual_retval != \"$expected_retval\" ]]; then\n        echo -e \"${REDB}Unexpected return value.  Expected: ${expected_retval}; Actual: ${actual_retval}${CLR}\"\n\n        if [[ $accept == 1 ]]; then\n            echo -e \"\\n${REDB}This failure cannot be automatically fixed; this script must be manually updated with the new expected return value.${CLR}\"\n\tfi\n\n        cat \"${test_result_json}\"\n        docker container stop -t 0 \"${cid}\" > /dev/null\n        exit 1\n    fi\n\n    docker container stop -t 0 \"${cid}\" > /dev/null\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n       echo -e \"${REDB}Failed to stop docker container ${cid}! (exit code: ${retval})${CLR}\"\n       exit 1\n    fi\n\n    # TinySSH outputs a random string in each banner, which breaks our test.  So\n    # we need to filter out the banner part of the output so we get stable, repeatable\n    # results.\n    if [[ $server_type == \"TinySSH\" ]]; then\n        grep -v \"(gen) banner: \" \"${test_result_stdout}\" > \"${test_result_stdout}.tmp\"\n        mv \"${test_result_stdout}.tmp\" \"${test_result_stdout}\"\n        cat \"${test_result_json}\" | perl -pe 's/\"comments\": \".*?\"/\"comments\": \"\"/' | perl -pe 's/\"raw\": \".+?\"/\"raw\": \"\"/' > \"${test_result_json}.tmp\"\n        mv \"${test_result_json}.tmp\" \"${test_result_json}\"\n    fi\n\n    diff=$(diff -u \"${expected_result_stdout}\" \"${test_result_stdout}\")\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n\n        # If the user wants to update the tests, then overwrite the expected results with the actual results.\n        if [[ $accept == 1 ]]; then\n            cp \"${test_result_stdout}\" \"${expected_result_stdout}\"\n            echo -e \"${test_name} ${YELLOWB}UPDATED${CLR}\\n\"\n        else\n            echo -e \"${test_name} ${REDB}FAILED${CLR}.\\n\\n${diff}\\n\"\n            failed=1\n            num_failures=$((num_failures+1))\n        fi\n\n    fi\n\n    diff=$(diff -u \"${expected_result_json}\" \"${test_result_json}\")\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n\n        # If the user wants to update the tests, then overwrite the expected results with the actual results.\n        if [[ $accept == 1 ]]; then\n            cp \"${test_result_json}\" \"${expected_result_json}\"\n            echo -e \"${test_name} ${YELLOWB}UPDATED${CLR}\\n\"\n        else\n            echo -e \"${test_name} ${REDB}FAILED${CLR}.\\n\\n${diff}\\n\"\n            failed=1\n            num_failures=$((num_failures+1))\n        fi\n\n    fi\n\n    if [[ $failed == 0 ]]; then\n        echo -e \"${test_name} ${GREEN}passed${CLR}.\"\n    fi\n}\n\nrun_builtin_policy_test() {\n    policy_name=$1         # The built-in policy name to use.\n    version=$2             # Version of OpenSSH to test with.\n    test_number=$3         # The test number to run.\n    server_options=$4      # The options to start the server with (i.e.: \"-o option1,options2,...\")\n    expected_exit_code=$5  # The expected exit code of ssh-audit.py.\n\n    server_exec=\"/openssh/sshd-${version} -D -f /etc/ssh/sshd_config-8.0p1_test1 ${server_options}\"\n    test_result_stdout=\"${TEST_RESULT_DIR}/openssh_${version}_builtin_policy_${test_number}.txt\"\n    test_result_json=\"${TEST_RESULT_DIR}/openssh_${version}_builtin_policy_${test_number}.json\"\n    expected_result_stdout=\"test/docker/expected_results/openssh_${version}_builtin_policy_${test_number}.txt\"\n    expected_result_json=\"test/docker/expected_results/openssh_${version}_builtin_policy_${test_number}.json\"\n    test_name=\"OpenSSH ${version} built-in policy ${test_number}\"\n\n    run_policy_test \"${test_name}\" \"${server_exec}\" \"${policy_name}\" \"${test_result_stdout}\" \"${test_result_json}\" \"${expected_exit_code}\"\n}\n\n\nrun_custom_policy_test() {\n    config_number=$1  # The configuration number to use.\n    test_number=$2    # The policy test number to run.\n    expected_exit_code=$3  # The expected exit code of ssh-audit.py.\n\n    version=\n    config=\n    if [[ ${config_number} == \"config1\" ]]; then\n        version=\"5.6p1\"\n        config=\"sshd_config-5.6p1_test1\"\n    elif [[ ${config_number} == \"config2\" ]]; then\n        version=\"8.0p1\"\n        config=\"sshd_config-8.0p1_test1\"\n    elif [[ ${config_number} == \"config3\" ]]; then\n        version=\"5.6p1\"\n        config=\"sshd_config-5.6p1_test4\"\n    fi\n\n    server_exec=\"/openssh/sshd-${version} -D -f /etc/ssh/${config}\"\n    policy_path=\"test/docker/policies/policy_${test_number}.txt\"\n    test_result_stdout=\"${TEST_RESULT_DIR}/openssh_${version}_custom_policy_${test_number}.txt\"\n    test_result_json=\"${TEST_RESULT_DIR}/openssh_${version}_custom_policy_${test_number}.json\"\n    expected_result_stdout=\"test/docker/expected_results/openssh_${version}_custom_policy_${test_number}.txt\"\n    expected_result_json=\"test/docker/expected_results/openssh_${version}_custom_policy_${test_number}.json\"\n    test_name=\"OpenSSH ${version} custom policy ${test_number}\"\n\n    run_policy_test \"${test_name}\" \"${server_exec}\" \"${policy_path}\" \"${test_result_stdout}\" \"${test_result_json}\" \"${expected_exit_code}\"\n}\n\n\nrun_policy_test() {\n    test_name=$1\n    server_exec=$2\n    policy_path=$3\n    test_result_stdout=$4\n    test_result_json=$5\n    expected_exit_code=$6\n\n\n    #echo \"Running: docker run --rm -d -p 2222:22 $IMAGE_NAME:$IMAGE_VERSION ${server_exec}\"\n    cid=$(docker run --rm -d -p 2222:22 \"${IMAGE_NAME}:${IMAGE_VERSION}\" ${server_exec})\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n        echo -e \"${REDB}Failed to run docker image! (exit code: ${retval})${CLR}\"\n        exit 1\n    fi\n\n    #echo \"Running: ./ssh-audit.py -P \\\"${policy_path}\\\" localhost:2222 > ${test_result_stdout}\"\n    ./ssh-audit.py -P \"${policy_path}\" localhost:2222 > \"${test_result_stdout}\"\n    actual_exit_code=$?\n    if [[ ${actual_exit_code} != \"${expected_exit_code}\" ]]; then\n        echo -e \"${test_name} ${REDB}FAILED${CLR} (expected exit code: ${expected_exit_code}; actual exit code: ${actual_exit_code}\\n\"\n\n        if [[ $accept == 1 ]]; then\n            echo -e \"\\n${REDB}This failure cannot be automatically fixed; this script must be manually updated with the new expected return value.${CLR}\"\n        fi\n\n        cat \"${test_result_stdout}\"\n        docker container stop -t 0 \"${cid}\" > /dev/null\n        exit 1\n    fi\n\n    #echo \"Running: ./ssh-audit.py -P \\\"${policy_path}\\\" -jj localhost:2222 > ${test_result_json} 2> /dev/null\"\n    ./ssh-audit.py -P \"${policy_path}\" -jj localhost:2222 > \"${test_result_json}\" 2> /dev/null\n    actual_exit_code=$?\n    if [[ ${actual_exit_code} != \"${expected_exit_code}\" ]]; then\n        echo -e \"${test_name} ${REDB}FAILED${CLR} (expected exit code: ${expected_exit_code}; actual exit code: ${actual_exit_code}\\n\"\n\n        if [[ $accept == 1 ]]; then\n            echo -e \"\\n${REDB}This failure cannot be automatically fixed; this script must be manually updated with the new expected return value.${CLR}\"\n        fi\n\n        cat \"${test_result_json}\"\n        docker container stop -t 0 \"${cid}\" > /dev/null\n        exit 1\n    fi\n\n    docker container stop -t 0 \"${cid}\" > /dev/null\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n       echo -e \"${REDB}Failed to stop docker container ${cid}! (exit code: ${retval})${CLR}\"\n       exit 1\n    fi\n\n    diff=$(diff -u \"${expected_result_stdout}\" \"${test_result_stdout}\")\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n\n\t# If the user wants to update the tests, then overwrite the expected results with the actual results.\n        if [[ $accept == 1 ]]; then\n            cp \"${test_result_stdout}\" \"${expected_result_stdout}\"\n            echo -e \"${test_name} ${YELLOWB}UPDATED${CLR}\\n\"\n        else\n            echo -e \"${test_name} ${REDB}FAILED${CLR}.\\n\\n${diff}\\n\"\n            exit 1\n        fi\n\n    fi\n\n    diff=$(diff -u \"${expected_result_json}\" \"${test_result_json}\")\n    retval=$?\n    if [[ ${retval} != 0 ]]; then\n\n\t# If the user wants to update the tests, then overwrite the expected results with the actual results.\n        if [[ $accept == 1 ]]; then\n            cp \"${test_result_json}\" \"${expected_result_json}\"\n            echo -e \"${test_name} ${YELLOWB}UPDATED${CLR}\\n\"\n        else\n            echo -e \"${test_name} ${REDB}FAILED${CLR}.\\n\\n${diff}\\n\"\n            exit 1\n        fi\n\n    fi\n\n    echo -e \"${test_name} ${GREEN}passed${CLR}.\"\n}\n\n\n# First check if docker is functional.\ndocker version > /dev/null\nretval=$?\nif [[ ${retval} != 0 ]]; then\n    echo -e \"${REDB}Error: 'docker version' command failed (error code: ${retval}).  Is docker installed and functioning?${CLR}\"\n    exit 1\nfi\n\n\n# Check if the docker image is the most up-to-date version.\ndocker_image_exists=0\ncheck_if_docker_image_exists\nretval=$?\nif [[ ${retval} == 0 ]]; then\n    docker_image_exists=1\nfi\n\n\n# Check if the user specified --create to build a new image.\nif [[ ($# == 1) && ($1 == \"--create\") ]]; then\n    # Ensure that the image name doesn't already exist before building.\n    if [[ ${docker_image_exists} == 1 ]]; then\n        echo -e \"${REDB}Error: --create specified, but ${IMAGE_NAME}:${IMAGE_VERSION} already exists!${CLR}\"\n        exit 1\n    else\n        echo -e \"\\nCreating docker image ${IMAGE_NAME}:${IMAGE_VERSION}...\"\n        create_docker_image\n        echo -e \"\\n${GREEN}Done creating docker image!${CLR}\"\n        exit 0\n    fi\nfi\n\n\n# If the user passes --accept, then the actual results will replace the expected results (meaning the user wants to update the tests themselves due to new functionality).\nif [[ ($# == 1) && ($1 == \"--accept\") ]]; then\n    accept=1\n    echo -e \"\\n${YELLOWB}Expected test results will be replaced with actual results.${CLR}\"\nfi\n\n\n# If we weren't explicitly told to create a new image, and it doesn't exist, then pull it from Dockerhub.\nif [[ ${docker_image_exists} == 0 ]]; then\n    echo -e \"\\nPulling docker image ${IMAGE_NAME}:${IMAGE_VERSION}...\"\n    pull_docker_image\nfi\n\n\necho -e \"\\n${GREEN}Starting tests...${CLR}\"\n\n# Create a temporary directory to write test results to.\nTEST_RESULT_DIR=$(mktemp -d /tmp/ssh-audit_test-results_XXXXXXXXXX)\n\n# Now run all the tests.\necho -e \"\\nRunning tests...\"\nrun_openssh_test \"4.0p1\" \"test1\" \"${PROGRAM_RETVAL_FAILURE}\"\necho\nrun_openssh_test \"5.6p1\" \"test1\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_openssh_test \"5.6p1\" \"test2\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_openssh_test \"5.6p1\" \"test3\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_openssh_test \"5.6p1\" \"test4\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_openssh_test \"5.6p1\" \"test5\" \"${PROGRAM_RETVAL_FAILURE}\"\necho\nrun_openssh_test \"8.0p1\" \"test1\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_openssh_test \"8.0p1\" \"test2\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_openssh_test \"8.0p1\" \"test3\" \"${PROGRAM_RETVAL_WARNING}\"\necho\nrun_dropbear_test \"2019.78\" \"test1\" \"-r /etc/dropbear/dropbear_rsa_host_key_1024 -r /etc/dropbear/dropbear_dss_host_key -r /etc/dropbear/dropbear_ecdsa_host_key\" 3\necho\nrun_tinyssh_test \"20190101\" \"test1\" \"${PROGRAM_RETVAL_WARNING}\"\necho\necho\nrun_custom_policy_test \"config1\" \"test1\" \"${PROGRAM_RETVAL_GOOD}\"\nrun_custom_policy_test \"config1\" \"test2\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_custom_policy_test \"config1\" \"test3\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_custom_policy_test \"config1\" \"test4\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_custom_policy_test \"config1\" \"test5\" \"${PROGRAM_RETVAL_FAILURE}\"\nrun_custom_policy_test \"config2\" \"test6\" \"${PROGRAM_RETVAL_GOOD}\"\n\n# Passing test with host key certificate and CA key certificates.\nrun_custom_policy_test \"config3\" \"test7\" \"${PROGRAM_RETVAL_GOOD}\"\n\n# Failing test with host key certificate and non-compliant CA key length.\nrun_custom_policy_test \"config3\" \"test8\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Failing test with non-compliant host key certificate and CA key certificate.\nrun_custom_policy_test \"config3\" \"test9\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Failing test with non-compliant host key certificate and non-compliant CA key certificate.\nrun_custom_policy_test \"config3\" \"test10\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Passing test with host key size check.\nrun_custom_policy_test \"config2\" \"test11\" \"${PROGRAM_RETVAL_GOOD}\"\n\n# Failing test with non-compliant host key size check.\nrun_custom_policy_test \"config2\" \"test12\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Passing test with DH modulus test.\nrun_custom_policy_test \"config2\" \"test13\" \"${PROGRAM_RETVAL_GOOD}\"\n\n# Failing test with DH modulus test.\nrun_custom_policy_test \"config2\" \"test14\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Passing test with algorithm subset matching.\nrun_custom_policy_test \"config2\" \"test15\" \"${PROGRAM_RETVAL_GOOD}\"\n\n# Failing test with algorithm subset matching.\nrun_custom_policy_test \"config2\" \"test16\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Passing test with larger key matching.\nrun_custom_policy_test \"config2\" \"test17\" \"${PROGRAM_RETVAL_GOOD}\"\n\n# Failing test for built-in OpenSSH 8.0p1 server policy (RSA host key size is 3072 instead of 4096).\nrun_builtin_policy_test \"Hardened OpenSSH Server v8.0 (version 4)\" \"8.0p1\" \"test1\" \"-o HostKeyAlgorithms=rsa-sha2-512,rsa-sha2-256,ssh-ed25519 -o KexAlgorithms=curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256 -o Ciphers=chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr -o MACs=hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n# Failing test for built-in OpenSSH 8.0p1 server policy (MACs not hardened).\nrun_builtin_policy_test \"Hardened OpenSSH Server v8.0 (version 4)\" \"8.0p1\" \"test2\" \"-o HostKeyAlgorithms=rsa-sha2-512,rsa-sha2-256,ssh-ed25519 -o KexAlgorithms=curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256 -o Ciphers=chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\" \"${PROGRAM_RETVAL_FAILURE}\"\n\n\nif [[ $num_failures == 0 ]]; then\n    echo -e \"\\n${GREENB}ALL TESTS PASS!${CLR}\\n\"\n    rm -rf -- \"${TEST_RESULT_DIR}\"\nelse\n    echo -e \"\\n${REDB}${num_failures} TESTS FAILED!${CLR}\\n\"\nfi\n\nexit 0\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.1748046875,
          "content": "[build-system]\n# https://pip.pypa.io/en/stable/reference/pip/#pep-517-and-518-support\nrequires = [\n    \"setuptools>=40.8.0\",\n    \"wheel\"\n]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.3837890625,
          "content": "[metadata]\nname = ssh-audit\nversion = attr: ssh_audit.globals.VERSION\nauthor = Joe Testa\nauthor_email = jtesta@positronsecurity.com\ndescription = An SSH server & client configuration security auditing tool\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nlicense = MIT\nlicense_files = LICENSE\nurl = https://github.com/jtesta/ssh-audit\nproject_urls =\n    Source Code = https://github.com/jtesta/ssh-audit\n    Bug Tracker = https://github.com/jtesta/ssh-audit/issues\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Intended Audience :: Information Technology\n    Intended Audience :: System Administrators\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: 3.13\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\n    Topic :: Security\n    Topic :: Security :: Cryptography\n\n[options]\npackages = find:\npackage_dir =\n     = src\npython_requires = >=3.8,<4\n\n[options.packages.find]\nwhere = src\n\n[options.entry_points]\nconsole_scripts =\n    ssh-audit = ssh_audit.ssh_audit:main\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.8466796875,
          "content": "import re\nimport sys\nfrom setuptools import setup\n\nprint_warning = False\nm = re.search(r'^VERSION\\s*=\\s*\\'v(\\d\\.\\d\\.\\d)\\'', open('src/ssh_audit/globals.py').read(), re.M)\nif m is None:\n    # If we failed to parse the stable version, see if this is the development version.\n    m = re.search(r'^VERSION\\s*=\\s*\\'v(\\d\\.\\d\\.\\d-dev)\\'', open('src/ssh_audit/globals.py').read(), re.M)\n    if m is None:\n        print(\"Error: could not parse VERSION variable from ssh_audit.py.\")\n        sys.exit(1)\n    else:  # Continue with the development version, but print a warning later.\n        print_warning = True\n\nversion = m.group(1)\nprint(\"\\n\\nPackaging ssh-audit v%s...\\n\\n\" % version)\n\n# see setup.cfg\nsetup()\n\nif print_warning:\n    print(\"\\n\\n    !!! WARNING: development version detected (%s).  Are you sure you want to package this version?  Probably not...\\n\" % version)\n"
        },
        {
          "name": "snapcraft.yaml",
          "type": "blob",
          "size": 0.4794921875,
          "content": "name: ssh-audit\n# 'version' field will be automatically added by build_snap.sh.\nlicense: 'MIT'\nsummary: ssh-audit\ndescription: |\n  SSH server and client security configuration auditor.  Official repository: <https://github.com/jtesta/ssh-audit>\n\nbase: core22\ngrade: stable\nconfinement: strict\narchitectures:\n  - build-on: [amd64]\n    build-for: [all]\n\napps:\n  ssh-audit:\n    command: bin/ssh-audit\n    plugs: [network,network-bind,home]\n\nparts:\n  ssh-audit:\n    plugin: python\n    source: .\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssh-audit.1",
          "type": "blob",
          "size": 11.60546875,
          "content": ".TH SSH-AUDIT 1 \"September 24, 2024\"\n.SH NAME\n\\fBssh-audit\\fP \\- SSH server & client configuration auditor\n.SH SYNOPSIS\n.B ssh-audit\n.RI [ options ] \" <target_host>\"\n.SH DESCRIPTION\n.PP\n\\fBssh-audit\\fP analyzes the configuration of SSH servers & clients, then warns the user of weak, obsolete, and/or untested cryptographic primitives.  It is very useful for hardening SSH tunnels, which by default tend to be optimized for compatibility, not security.\n.PP\nSee <https://www.ssh\\-audit.com/> for official hardening guides for common platforms.\n\n.SH OPTIONS\n.TP\n.B -h, \\-\\-help\n.br\nPrint short summary of options.\n\n.TP\n.B -1, \\-\\-ssh1\n.br\nOnly perform an audit using SSH protocol version 1.\n\n.TP\n.B -2, \\-\\-ssh2\n.br\nOnly perform an audit using SSH protocol version 2.\n\n.TP\n.B -4, \\-\\-ipv4\n.br\nPrioritize the usage of IPv4.\n\n.TP\n.B -6, \\-\\-ipv6\n.br\nPrioritize the usage of IPv6.\n\n.TP\n.B -b, \\-\\-batch\n.br\nEnables grepable output.\n\n.TP\n.B -c, \\-\\-client\\-audit\n.br\nStarts a server on port 2222 to audit client software configuration.  Use -p/--port=<port> to change port and -t/--timeout=<secs> to change listen timeout.\n\n.TP\n.B     \\-\\-conn\\-rate\\-test=N[:max_rate]\n.br\nPerforms a connection rate test (useful for collecting metrics related to susceptibility of the DHEat vulnerability [CVE-2002-20001]).  A successful connection is counted when the server returns a valid SSH banner.  Testing is conducted with N concurrent sockets with an optional maximum rate of connections per second.\n\n.TP\n.B -d, \\-\\-debug\n.br\nEnable debug output.\n\n.TP\n.B     \\-\\-dheat=N[:kex[:e_len]]\n.br\nRun the DHEat DoS attack (CVE-2002-20001) against the target server (which will consume all available CPU resources).  The number of concurrent sockets, N, needed to achieve this effect will be highly dependent on the CPU resources available on the target, as well as the latency between the source and target machines.  The key exchange is automatically chosen based on which would cause maximum effect, unless explicitly chosen in the second field.  Lastly, an (experimental) option allows the length in bytes of the fake e value sent to the server to be specified in the third field.  Normally, the length of e is roughly the length of the modulus of the Diffie-Hellman exchange (hence, an 8192-bit / 1024-byte value of e is sent in each connection when targeting the diffie-hellman-group18-sha512 algorithm).  Instead, it was observed that many SSH implementations accept small values, such as 4 bytes; this results in a much more network-efficient attack.\n\n.TP\n.B -g, \\-\\-gex-test=<x[,y,...] | min1:pref1:max1[,min2:pref2:max2,...] | x-y[:step]>\n.br\nRuns a Diffie-Hellman Group Exchange modulus size test against a server.\n\nDiffie-Hellman requires the client and server to agree on a generator value and a modulus value.  In the \"Group Exchange\" implementation of Diffie-Hellman, the client specifies the size of the modulus in bits by providing the server with minimum, preferred and maximum values. The server then finds a group that best matches the client's request, returning the corresponding generator and modulus.  For a full explanation of this process see RFC 4419 and its successors.\n\nThis test acts as a client by providing an SSH server with the size of a modulus and then obtains the size of the modulus returned by the server.\n\nThree types of syntax are supported:\n\n  1. <x[,y,...]>\n\n     A comma delimited list of modulus sizes.\n     A test is performed against each value in the list where it acts as the minimum, preferred and maximum modulus size.\n\n  2. <min:pref:max[,min:pref:max,...]>\n\n     A set of three colon delimited values denoting minimum, preferred and maximum modulus size.\n     A test is performed against each set.\n     Multiple sets can specified as a comma separated list.\n\n  3. <x-y[:step]>\n\n     A range of modulus sizes with an optional step value. Step defaults to 1 if omitted.\n     If the left value is greater than the right value, then the sequence operates from right to left.\n     A test is performed against each value in the range where it acts as the minimum, preferred and maximum modulus size.\n\nDuplicates are excluded from the return value.\n\n.TP\n.B -j, \\-\\-json\n.br\nOutput results in JSON format.  Specify twice (-jj) to enable indent printing (useful for debugging).\n\n.TP\n.B -l, \\-\\-level=<info|warn|fail>\n.br\nSpecify the minimum output level.  Default is info.\n\n.TP\n.B -L, \\-\\-list-policies\n.br\nList all official, built-in policies for common systems.  Their full names can then be passed to -P/--policy.  Add \\-v to \\-L to view policy change logs.\n\n.TP\n.B \\-\\-lookup=<alg1,alg2,...>\n.br\nLook up the security information of an algorithm(s) in the internal database.  Does not connect to a server.\n\n.TP\n.B -m, \\-\\-manual\n.br\nPrint the man page (Docker, PyPI, Snap, and Windows builds only).\n\n.TP\n.B -M, \\-\\-make-policy=<custom_policy.txt>\n.br\nCreates a policy based on the target server.  Useful when other servers should be compared to the target server's custom configuration (i.e.: a cluster environment).  Note that the resulting policy can be edited manually.\n\n.TP\n.B -n, \\-\\-no-colors\n.br\nDisable color output.  Automatically set when the NO_COLOR environment variable is set.\n\n.TP\n.B -p, \\-\\-port=<port>\n.br\nThe TCP port to connect to when auditing a server, or the port to listen on when auditing a client.\n\n.TP\n.B -P, \\-\\-policy=<\"built-in policy name\" | path/to/custom_policy.txt>\n.br\nRuns a policy audit against a target using the specified policy (see \\fBPOLICY AUDIT\\fP section for detailed description of this mode of operation).  Combine with -c/--client-audit to audit a client configuration instead of a server.  Use -L/--list-policies to list all official, built-in policies for common systems.\n\n.TP\n.B     \\-\\-skip\\-rate\\-test\n.br\nSkips the connection rate test during standard audits.  By default, a few dozen TCP connections are created with the target host to see if connection throttling is implemented (this can safely infer whether the target is vulnerable to the DHEat attack; see CVE-2002-20001).\n\n.TP\n.B -t, \\-\\-timeout=<secs>\n.br\nThe timeout, in seconds, for creating connections and reading data from the socket.  Default is 5.\n\n.TP\n.B -T, \\-\\-targets=<hosts.txt>\n.br\nA file containing a list of target hosts.  Each line must have one host, in the format of HOST[:PORT].  Use -p/--port to set the default port for all hosts.  Use --threads to control concurrent scans.\n\n.TP\n.B     \\-\\-threads=<threads>\n.br\nThe number of threads to use when scanning multiple targets (with -T/--targets).  Default is 32.\n\n.TP\n.B -v, \\-\\-verbose\n.br\nEnable verbose output.\n\n\n.SH STANDARD AUDIT\n.PP\nBy default, \\fBssh-audit\\fP performs a standard audit.  That is, it enumerates all host key types, key exchanges, ciphers, MACs, and other information, then color-codes them in output to the user.  Cryptographic primitives with potential issues are displayed in yellow; primitives with serious flaws are displayed in red.\n\n\n.SH POLICY AUDIT\n.PP\nWhen the -P/--policy option is used, \\fBssh-audit\\fP performs a policy audit.  The target's host key types, key exchanges, ciphers, MACs, and other information is compared to a set of expected values defined in the specified policy file.  If everything matches, only a short message stating a passing result is reported.  Otherwise, the field(s) that did not match are reported.\n\n.PP\nPolicy auditing is helpful for ensuring a group of related servers are properly hardened to an exact specification.\n\n.PP\nThe set of official built-in policies can be viewed with -L/--list-policies.  Multiple servers can be audited with -T/--targets=<servers.txt>.  Custom policies can be made from an ideal target server with -M/--make-policy=<custom_policy.txt>.\n\n\n.SH EXAMPLES\n.LP\nBasic server auditing:\n.RS\n.nf\nssh-audit localhost\nssh-audit 127.0.0.1\nssh-audit 127.0.0.1:222\nssh-audit ::1\nssh-audit [::1]:222\n.fi\n.RE\n\n.LP\nTo run a standard audit against many servers (place targets into servers.txt, one on each line in the format of HOST[:PORT]):\n.RS\n.nf\nssh-audit -T servers.txt\n.fi\n.RE\n\n.LP\nTo audit a client configuration (listens on port 2222 by default; connect using \"ssh -p 2222 anything@localhost\"):\n.RS\n.nf\nssh-audit -c\n.fi\n.RE\n\n.LP\nTo audit a client configuration, with a listener on port 4567:\n.RS\n.nf\nssh-audit -c -p 4567\n.fi\n.RE\n\n.LP\nTo list all official built-in policies (hint: use their full names with -P/--policy):\n.RS\n.nf\nssh-audit -L\n.fi\n.RE\n\n.LP\nTo run a built-in policy audit against a server (hint: use -L to see list of built-in policies):\n.RS\n.nf\nssh-audit -P \"Hardened Ubuntu Server 20.04 LTS (version 1)\" targetserver\n.fi\n.RE\n\n\n.LP\nTo run a custom policy audit against a server (hint: use -M/--make-policy to create a custom policy file):\n.RS\n.nf\nssh-audit -P path/to/server_policy.txt targetserver\n.fi\n.RE\n\n.LP\nTo run a policy audit against a client:\n.RS\n.nf\nssh-audit -c -P [\"policy name\" | path/to/client_policy.txt]\n.fi\n.RE\n\n.LP\nTo run a policy audit against many servers:\n.RS\n.nf\nssh-audit -T servers.txt -P [\"policy name\" | path/to/server_policy.txt]\n.fi\n.RE\n\n.LP\nTo create a policy based on a target server (which can be manually edited; see official built-in policies for syntax examples):\n.RS\n.nf\nssh-audit -M new_policy.txt targetserver\n.fi\n.RE\n\n.LP\nTo run a Diffie-Hellman Group Exchange modulus size test using the values 2000 bits, 3000 bits, 4000 bits and 5000 bits:\n.RS\n.nf\nssh-audit targetserver --gex-test=2000,3000,4000,5000\n.fi\n.RE\n\n.LP\nTo run a Diffie-Hellman Group Exchange modulus size test where 2048 bits is the minimum, 3072 bits is the preferred and 5000 bits is the maximum:\n.RS\n.nf\nssh-audit targetserver --gex-test=2048:3072:5000\n.fi\n.RE\n\n.LP\nTo run a Diffie-Hellman Group Exchange modulus size test from 0 bits to 5120 bits in increments of 1024 bits:\n.RS\n.nf\nssh-audit targetserver --gex-test=0-5120:1024\n.fi\n.RE\n\n.LP\nTo run the DHEat DoS attack (monitor the target server's CPU usage to determine the optimal number of concurrent sockets):\n.RS\n.nf\nssh-audit targetserver --dheat=10\n.fi\n.RE\n\n.LP\nTo run the DHEat attack and manually target the diffie-hellman-group-exchange-sha256 algorithm:\n.RS\n.nf\nssh-audit targetserver --dheat=10:diffie-hellman-group-exchange-sha256\n.fi\n.RE\n\n.LP\nTo run the DHEat attack and manually target the diffie-hellman-group-exchange-sha256 algorithm with a very small length of e (resulting in the same effect but without having to send large packets):\n.RS\n.nf\nssh-audit targetserver --dheat=10:diffie-hellman-group-exchange-sha256:4\n.fi\n.RE\n\n.LP\nTo test the number of successful connections per second that can be created with the target using 8 parallel threads (useful for detecting whether connection throttling is implemented by the target):\n.RS\n.nf\nssh-audit targetserver --conn-rate-test=8\n.fi\n.RE\n\n.LP\nTo use 8 parallel threads to create up to 100 connections per second with the target (useful for understanding how much CPU load is caused on the target simply from handling new connections vs excess modular exponentiation when performing the DHEat attack):\n.RS\n.nf\nssh-audit targetserver --conn-rate-test=8:100\n.fi\n.RE\n\n.SH RETURN VALUES\nWhen a successful connection is made and all algorithms are rated as \"good\", \\fBssh-audit\\fP returns 0.  Other possible return values are:\n\n.RS\n.nf\n1 = connection error\n2 = at least one algorithm warning was found\n3 = at least one algorithm failure was found\n<any other non-zero value> = unknown error\n.fi\n.RE\n\n.SH SSH HARDENING GUIDES\nHardening guides for common platforms can be found at: <https://www.ssh\\-audit.com/>\n\n.SH BUG REPORTS\nPlease file bug reports as a Github Issue at: <https://github.com/jtesta/ssh\\-audit/issues>\n\n.SH AUTHOR\n.LP\n\\fBssh-audit\\fP was originally written by Andris Raugulis <moo@arthepsy.eu>, and maintained from 2015 to 2017.\n.br\n.LP\nMaintainership was assumed and development was resumed in 2017 by Joe Testa <jtesta@positronsecurity.com>.\n"
        },
        {
          "name": "ssh-audit.py",
          "type": "blob",
          "size": 0.6240234375,
          "content": "#!/usr/bin/env python3\n\"\"\"src/ssh_audit/ssh_audit.py wrapper for backwards compatibility\"\"\"\n\nimport multiprocessing\nimport sys\nimport traceback\nfrom pathlib import Path\n\nsys.path.insert(0, str(Path(__file__).resolve().parent / \"src\"))\n\nfrom ssh_audit.ssh_audit import main  # noqa: E402\nfrom ssh_audit import exitcodes  # noqa: E402\n\nif __name__ == \"__main__\":\n    multiprocessing.freeze_support()  # Needed for PyInstaller (Windows) builds.\n\n    exit_code = exitcodes.GOOD\n    try:\n        exit_code = main()\n    except Exception:\n        exit_code = exitcodes.UNKNOWN_ERROR\n        print(traceback.format_exc())\n\n    sys.exit(exit_code)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 3.275390625,
          "content": "[tox]\nenvlist =\n\tpy{py3}-{test,pylint,flake8}\n\tpy{38,39,310,311,312,313}-{test,mypy,pylint,flake8}\n\tcov\nskip_missing_interpreters = true\n\n[testenv]\ndeps =\n\ttest: pytest\n\ttest,cov: {[testenv:cov]deps}\n\ttest,py{38,39,310,311,312,313}-{type,mypy}: colorama\n\tpy{38,39,310,311,312,313}-{type,mypy}: {[testenv:mypy]deps}\n\tpy{py3,38,39,310,311,312,313}-{lint,pylint},lint: {[testenv:pylint]deps}\n\tpy{py3,38,39,310,311,312,313}-{lint,flake8},lint: {[testenv:flake8]deps}\nsetenv =\n\tSSHAUDIT = {toxinidir}/src\n\ttest: COVERAGE_FILE = {toxinidir}/.coverage.{envname}\n\ttype,mypy: MYPYPATH = {toxinidir}/test/stubs\n\ttype,mypy: MYPYHTML = {toxinidir}/reports/html/mypy\ncommands =\n\ttest: coverage run --source ssh_audit -m -p -- \\\n\ttest: pytest -v --junitxml={toxinidir}/reports/junit.{envname}.xml {posargs:test}\n\ttest: coverage combine\n\ttest: coverage report --show-missing\n\ttest: coverage html -d {toxinidir}/reports/html/coverage.{envname}\n\tpy{38,39,310,311,312,313}-{type,mypy}: {[testenv:mypy]commands}\n\tpy{py3,38,39,310,311,312,313}-{lint,pylint},lint: {[testenv:pylint]commands}\n\tpy{py3,38,39,310,311,312,313}-{lint,flake8},lint: {[testenv:flake8]commands}\n\n#ignore_outcome =\n#\ttype: true\n#\tlint: true\n\n[testenv:cov]\ndeps =\n\tcoverage\nsetenv =\n\tCOVERAGE_FILE = {toxinidir}/.coverage\ncommands =\n\tcoverage erase\n\tcoverage combine\n\tcoverage report --show-missing\n\tcoverage xml -i -o {toxinidir}/reports/coverage.xml\n\tcoverage html -d {toxinidir}/reports/html/coverage\n\n[testenv:mypy]\ndeps =\n\tcolorama\n\tlxml\n\tmypy\ncommands =\n\tmypy \\\n\t    --strict \\\n\t\t--show-error-context \\\n\t\t--html-report {env:MYPYHTML}.py3.{envname} \\\n\t\t{posargs:{env:SSHAUDIT}}\n\n[testenv:pylint]\ndeps =\n\tmccabe\n\tpylint\ncommands =\n\tpylint \\\n\t\t--rcfile tox.ini \\\n\t\t--load-plugins=pylint.extensions.bad_builtin \\\n\t\t--load-plugins=pylint.extensions.check_elif \\\n\t\t--load-plugins=pylint.extensions.mccabe \\\n\t\t{posargs:{env:SSHAUDIT}}\n\n[testenv:flake8]\ndeps =\n\tflake8\ncommands =\n\tflake8 {posargs:{env:SSHAUDIT} {toxinidir}/setup.py {toxinidir}/test {toxinidir}/ssh-audit.py}  --statistics\n\n[pylint]\nreports = no\n#output-format = colorized\nindent-string = \"    \"\ndisable =\n        broad-except,\n        duplicate-code,\n        fixme,\n        invalid-name,\n        line-too-long,\n        missing-docstring,\n        no-else-raise,\n        no-else-return,\n        super-with-arguments,   # Can be re-factored, at some point.\n        too-complex,\n        too-many-arguments,\n        too-many-boolean-expressions,\n        too-many-branches,\n        too-many-instance-attributes,\n        too-many-lines,\n        too-many-locals,\n        too-many-nested-blocks,\n        too-many-positional-arguments,\n        too-many-return-statements,\n        too-many-statements,\n        consider-using-f-string\nmax-complexity = 15\nmax-args = 8\nmax-locals = 20\nmax-returns = 6\nmax-branches = 15\nmax-statements = 60\nmax-parents = 7\nmax-attributes = 8\nmin-public-methods = 1\nmax-public-methods = 20\nmax-bool-expr = 5\nmax-nested-blocks = 6\nmax-line-length = 80\nignore-long-lines = ^\\s*(#\\s+type:\\s+.*|[A-Z0-9_]+\\s+=\\s+.*|('.*':\\s+)?\\[.*\\],?|assert\\s+.*)$\nmax-module-lines = 2500\n\n[flake8]\n# E241 = multiple spaces after operator; should be kept for tabular data\n# E303 = too many blank lines\n# E501 = line too long\nignore = E241, E303, E501\n\n[pytest]\njunit_family = xunit1\n\n[coverage:paths]\nsource =\n    src\n    */site-packages\n"
        },
        {
          "name": "windows_icon.ico",
          "type": "blob",
          "size": 16.560546875,
          "content": null
        }
      ]
    }
  ]
}