{
  "metadata": {
    "timestamp": 1736559625843,
    "page": 272,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "RomelTorres/alpha_vantage",
      "stars": 4340,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".deepsource.toml",
          "type": "blob",
          "size": 0.1474609375,
          "content": "version = 1\n\ntest_patterns = [\"test_alpha_vantage/**\"]\n\n[[analyzers]]\nname = \"python\"\nenabled = true\n\n  [analyzers.meta]\n  runtime_version = \"3.x.x\"\n  "
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.822265625,
          "content": "\n# Created by https://www.gitignore.io/api/vim,linux,python\n\n### Linux ###\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\nalpha_vantage_env/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n### Vim ###\n# swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-v][a-z]\n[._]sw[a-p]\n# session\nSession.vim\n# temporary\n.netrwhist\n# auto-generated tag files\ntags\n\n### Do not include the README.rst ###\nREADME.rst\n\n# sphinx build folder\n_build\n\n\n\n# End of https://www.gitignore.io/api/vim,linux,python\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.55078125,
          "content": "# .readthedocs.yml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\n# Build documentation with MkDocs\n#mkdocs:\n#  configuration: mkdocs.yml\n\n# Optionally build your docs in additional formats such as PDF\nformats:\n  - pdf\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  version: 3.7\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.134765625,
          "content": "language: python\ncache: pip\nenv:\n  global:\n    secure: b5W0+Z5GaQS5xcVTtyhThQEBKd2uUgcQ479ZvaX2UMTMvm0ZY/UU9WIUVtjniAHYRcq1XBm6cEe93ew3TiE8nNkcFcqB9KHBaXmy7bYP3KQWPrToal2a4IMV9zGRjLDx2P72CJ/j5I2xIMNRvAc7NqfVj2W90//RtMAZUt46wGm/YXiPcRXqMgkh1MBQMflqurbAHq8HAj1OAhCsMXawUvNTOqSAZox397ROJVINHdLngvNCL1uhX+5YNSkGrahiiNsKvU6X2PxAhNWJxPMYdmAXNrL2FPEM1U0dVkhdr17BvU8VtRValFOycNYEIflSH3yzRiFiWYrkXXDbsVN+Mvg5elvUtmNcovqmnL+Dksafgj8mP6EyFdeFw/PShFg/KbkhR4zTXwDX/Te3Ug2oLg8gO0SboAmqDf4REmfDUB5dAlC+6lRGb7Vw/qBqm0nvFP1ZucA9xNHaBysq4nbjlG1P7VoBfHvmEMIc1ZxetXKMcCPBG80cnP313cDtQTTov3/k/LHJzTjn4/VU3efmQCuFOZSwFD0KJIt223UvJnEls/yvPVuyTjRapIjsqu8KZY/nidfn4zCgHDTUhBvA5Ns7s2ECd2I13SerfambAXeO2IA1Ny7YRD4stHUXYeWAUBv8crqB/1MBSGhn8/BnbCjpHVbvzQeXH1CFcWwQOUA=\n\ndist: xenial\npython:\n    - '2.7'\n    - '3.4'\n    - '3.5'\n    - '3.6'\n\ninstall:\n    - pip install pandas==0.19.2\n    - pip install requests\n    - pip install requests-mock\n    - pip install numpy==1.16.4\nscript:\n    nosetests --nocapture test_alpha_vantage/test_alphavantage.py\nallow_failure:\n  script:\n      nosetests --nocapture nosetests -s test_alpha_vantage/test_integration_alphavantage.py\nafter_sucess:\n    codecov\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2017 Romel Torres\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0625,
          "content": "include README.rst\nrecursive-include images\ninclude LICENSE.txt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.728515625,
          "content": "# alpha_vantage\n\n[![Build Status](https://travis-ci.org/RomelTorres/alpha_vantage.png?branch=master)](https://travis-ci.org/RomelTorres/alpha_vantage)\n[![PyPI version](https://badge.fury.io/py/alpha-vantage.svg)](https://badge.fury.io/py/alpha-vantage)\n[![Documentation Status](https://readthedocs.org/projects/alpha-vantage/badge/?version=latest)](http://alpha-vantage.readthedocs.io/en/latest/?badge=latest)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/RomelTorres/alpha_vantage.svg)](http://isitmaintained.com/project/RomelTorres/alpha_vantage \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/RomelTorres/alpha_vantage.svg)](http://isitmaintained.com/project/RomelTorres/alpha_vantage \"Percentage of issues still open\")\n\n*Python module to get stock data/cryptocurrencies from the Alpha Vantage API*\n\nAlpha Vantage delivers a free API for real time financial data and most used finance indicators in a simple json or pandas format. This module implements a python interface to the free API provided by [Alpha Vantage](https://www.alphavantage.co/). It requires a free API key, that can be requested from http://www.alphavantage.co/support/#api-key. You can have a look at all the API calls available in their [API documentation](https://www.alphavantage.co/documentation/).\n\nFor code-less access to financial market data, you may also consider [Wisesheets](https://www.wisesheets.io/) or the official [Google Sheet Add-on](https://gsuite.google.com/marketplace/app/alpha_vantage_market_data/434809773372) or the [Microsoft Excel Add-on](https://appsource.microsoft.com/en-us/product/office/WA200001365) by Alpha Vantage. Check out [this](https://medium.com/@patrick.collins_58673/stock-api-landscape-5c6e054ee631) guide for some common tips on working with financial market data. \n\n## News\n\n* From version 3.0.0 onwards, all options, commodities, and economic indicators are supported, as well as various additional features in alpha intelligence and fundamental data. All sector performance, extended intraday, and the FCAS crypto rating have been deprecated. Support for the month parameter for technical indicators and entitlement, as necessary, have also been added.\n* From version 2.3.0 onwards, fundamentals data and extended intraday is supported.\n* From version 2.2.0 onwards, asyncio support now provided. See below for more information. \n* From version 2.1.3 onwards, [rapidAPI](https://rapidapi.com/alphavantage/api/alpha-vantage/) key integration is now available.\n* From version 2.1.0 onwards, error logging of bad API calls has been made more apparent.\n* From version 1.9.0 onwards, the urllib was substituted by pythons request library that is thread safe. If you have any error, post an issue.\n* From version 1.8.0 onwards, the column names of the data frames have changed, they are now exactly what alphavantage gives back in their json response. You can see the examples in better detail in the following git repo:  https://github.com/RomelTorres/av_example\n* From version 1.6.0, pandas was taken out as a hard dependency.\n\n## Install\nTo install the package use:\n```shell\npip install alpha_vantage\n```\nOr install with pandas support, simply install pandas too:\n```shell\npip install alpha_vantage pandas\n```\n\nIf you want to install from source, then use:\n```shell\ngit clone https://github.com/RomelTorres/alpha_vantage.git\npip install -e alpha_vantage\n```\n\n## Usage\nTo get data from the API, simply import the library and call the object with your API key. Next, get ready for some awesome, free, realtime finance data. Your API key may also be stored in the environment variable ``ALPHAVANTAGE_API_KEY``.\n```python\nfrom alpha_vantage.timeseries import TimeSeries\nts = TimeSeries(key='YOUR_API_KEY')\n# Get json object with the intraday data and another with  the call's metadata\ndata, meta_data = ts.get_intraday('GOOGL')\n```\nTo query data from a specific month in history, you may use the 'month' parameter for various features.\n```python\nfrom alpha_vantage.timeseries import TimeSeries\nfrom alpha_vantage.techindicators import TechIndicators\nts = TimeSeries(key='YOUR_API_KEY')\nti = TechIndicators(key='YOUR_API_KEY')\n# Get json object with the 30-min interval intraday data and another with  the call's metadata for January, 2014.\ndata, meta_data = ts.get_intraday('GOOGL', month='2014-01', interval='30min')\n#Get json object with the 30-min interval simple moving average (SMA) values and another with  the call's metadata for January, 2014.\ndata, meta_data = ti.get_sma('GOOGL', month='2014-01', interval='30min')\n```\nYou may also get a key from [rapidAPI](https://rapidapi.com/alphavantage/api/alpha-vantage-alpha-vantage-default). Use your rapidAPI key for the key variable, and set ```rapidapi=True```\n\n```python\nts = TimeSeries(key='YOUR_API_KEY',rapidapi=True)\n```\n\nInternally there is a retries counter, that can be used to minimize connection errors (in case that the API is not able to respond in time), the default is set to\n5 but can be increased or decreased whenever needed.\n```python\nts = TimeSeries(key='YOUR_API_KEY',retries='YOUR_RETRIES')\n```\nThe library supports giving its results as json dictionaries (default), pandas dataframe (if installed) or csv, simply pass the parameter output_format='pandas' to change the format of the output for all the API calls in the given class. Please note that some API calls do not support the csv format (namely ```ForeignExchange and TechIndicators```) because the API endpoint does not support the format on their calls either.\n\n```python\nts = TimeSeries(key='YOUR_API_KEY',output_format='pandas')\n```\n\nThe pandas data frame given by the call, can have either a date string indexing or an integer indexing (by default the indexing is 'date'),\ndepending on your needs, you can use both.\n\n```python\n # For the default date string index behavior\nts = TimeSeries(key='YOUR_API_KEY',output_format='pandas', indexing_type='date')\n# For the default integer index behavior\nts = TimeSeries(key='YOUR_API_KEY',output_format='pandas', indexing_type='integer')\n```\n\n## Data frame structure\nThe data frame structure is given by the call on alpha vantage rest API. The column names of the data frames\nare the ones given by their data structure. For example, the following call:\n```python\nfrom alpha_vantage.timeseries import TimeSeries\nfrom pprint import pprint\nts = TimeSeries(key='YOUR_API_KEY', output_format='pandas')\ndata, meta_data = ts.get_intraday(symbol='MSFT',interval='1min', outputsize='full')\npprint(data.head(2))\n```\nWould result on:\n![alt text](images/docs_data_frame_header.png?raw=True \"Data Header format.\")\n\nThe headers from the data are specified from Alpha Vantage (in previous versions, the numbers in the headers were removed, but long term is better to have the data exactly as Alpha Vantage produces it.)\n## Plotting\n### Time Series\nUsing pandas support we can plot the intra-minute value for 'MSFT' stock quite easily:\n\n```python\nfrom alpha_vantage.timeseries import TimeSeries\nimport matplotlib.pyplot as plt\n\nts = TimeSeries(key='YOUR_API_KEY', output_format='pandas')\ndata, meta_data = ts.get_intraday(symbol='MSFT',interval='1min', outputsize='full')\ndata['4. close'].plot()\nplt.title('Intraday Times Series for the MSFT stock (1 min)')\nplt.show()\n```\nGiving us as output:\n![alt text](images/docs_ts_msft_example.png?raw=True \"MSFT minute value plot example\")\n\n### Technical indicators\nThe same way we can get pandas to plot technical indicators like Bollinger Bands®\n\n```python\nfrom alpha_vantage.techindicators import TechIndicators\nimport matplotlib.pyplot as plt\n\nti = TechIndicators(key='YOUR_API_KEY', output_format='pandas')\ndata, meta_data = ti.get_bbands(symbol='MSFT', interval='60min', time_period=60)\ndata.plot()\nplt.title('BBbands indicator for  MSFT stock (60 min)')\nplt.show()\n```\nGiving us as output:\n![alt text](images/docs_ti_msft_example.png?raw=True \"MSFT minute value plot example\")\n\n### Crypto currencies.\n\nWe can also plot crypto currencies prices like BTC:\n\n```python\nfrom alpha_vantage.cryptocurrencies import CryptoCurrencies\nimport matplotlib.pyplot as plt\n\ncc = CryptoCurrencies(key='YOUR_API_KEY', output_format='pandas')\ndata, meta_data = cc.get_digital_currency_daily(symbol='BTC', market='CNY')\ndata['4b. close (USD)'].plot()\nplt.tight_layout()\nplt.title('Daily close value for bitcoin (BTC)')\nplt.grid()\nplt.show()\n```\n\nGiving us as output:\n![alt text](images/docs_cripto_btc.png?raw=True \"Crypto Currenci daily (BTC)\")\n\n### Foreign Exchange (FX)\n\nThe foreign exchange endpoint has no metadata, thus only available as json format and pandas (using the 'csv' format will raise an Error)\n\n```python\nfrom alpha_vantage.foreignexchange import ForeignExchange\nfrom pprint import pprint\ncc = ForeignExchange(key='YOUR_API_KEY')\n# There is no metadata in this call\ndata, _ = cc.get_currency_exchange_rate(from_currency='BTC',to_currency='USD')\npprint(data)\n```\nGiving us as output:\n```\n{\n    '1. From_Currency Code': 'BTC',\n    '2. From_Currency Name': 'Bitcoin',\n    '3. To_Currency Code': 'USD',\n    '4. To_Currency Name': 'United States Dollar',\n    '5. Exchange Rate': '5566.80500105',\n    '6. Last Refreshed': '2017-10-15 15:13:08',\n    '7. Time Zone': 'UTC'\n}\n```\n\n### Asyncio support\n\nFrom version 2.2.0 on, asyncio support will now be available. This is only for python versions 3.5+. If you do not have 3.5+, the code will break.\n\nThe syntax is simple, just mark your methods with the `async` keyword, and use the `await` keyword. \n\nHere is an example of a for loop for getting multiple symbols asyncronously. This greatly improving the performance of a program with multiple API calls.\n\n```python\nimport asyncio\nfrom alpha_vantage.async_support.timeseries import TimeSeries\n\nsymbols = ['AAPL', 'GOOG', 'TSLA', 'MSFT']\n\n\nasync def get_data(symbol):\n    ts = TimeSeries(key='YOUR_KEY_HERE')\n    data, _ = await ts.get_quote_endpoint(symbol)\n    await ts.close()\n    return data\n\nloop = asyncio.get_event_loop()\ntasks = [get_data(symbol) for symbol in symbols]\ngroup1 = asyncio.gather(*tasks)\nresults = loop.run_until_complete(group1)\nloop.close()\nprint(results)\n```\n\nWe have written a much more in depth article to explain asyncio for those who have never used it but want to learn about asyncio, concurrency, and multi-threading. Check it out here: [Which Should You Use: Asynchronous Programming or Multi-Threading?](https://medium.com/better-programming/which-should-you-use-asynchronous-programming-or-multi-threading-7435ec9adc8e?source=friends_link&sk=8c6c05c2bbc3666e9066547cb564c352)\n\n## Examples\n\nI have added a repository with examples in a python notebook to better see the\nusage of the library: https://github.com/RomelTorres/av_example\n\n\n## Tests\n\nIn order to run the tests you have to first export your API key so that the test can use it to run, also the tests require pandas, mock and nose.\n```shell\nexport API_KEY=YOUR_API_KEY\ncd alpha_vantage\nnosetests\n```\n\n## Documentation\nThe code documentation can be found at https://alpha-vantage.readthedocs.io/en/latest/\n\n## Contributing\nContributing is always welcome. Just contact us on how best you can contribute, add an issue, or make a PR. \n\n## TODOs:\n* The integration tests are not being run at the moment within travis, gotta fix them to run.\n* Add test for csv calls as well.\n* Add tests for incompatible parameter raise errors.\n* Github actions & other items in the issues page. \n\n\n\n## Contact:\nYou can reach/follow the Alpha Vantage team on any of the following platforms:\n* [Slack](https://alphavantage.herokuapp.com/)\n* [Twitter: @alpha_vantage](https://twitter.com/alpha_vantage)\n* [Medium-Patrick](https://medium.com/@patrick.collins_58673)\n* [Medium-AlphaVantage](https://medium.com/alpha-vantage)\n* Email: support@alphavantage.co\n* Community events: https://alphavhack.devpost.com/\n\n\n## Star if you like it.\nIf you like or use this project, consider showing your support by starring it.\n\n:venezuela:-:de:\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "alpha_vantage",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.md\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.6357421875,
          "content": "from setuptools import setup, find_packages\nfrom codecs import open\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\ntry:\n    with open(\"README.md\", \"r\") as fh:\n        long_description = fh.read()\nexcept IOError:\n    long_description = 'Python module to get stock data from the Alpha Vantage Api'\n\nsetup(\n    name='alpha_vantage',\n    version='3.0.0',\n    author='Romel J. Torres',\n    author_email='romel.torres@gmail.com',\n    license='MIT',\n    description='Python module to get stock data from the Alpha Vantage Api',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Topic :: Office/Business :: Financial :: Investment',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8'\n    ],\n    url='https://github.com/RomelTorres/alpha_vantage',\n    install_requires=[\n        'aiohttp',\n        'requests'\n    ],\n    test_requires=[\n        'aioresponses',\n        'nose',\n        'requests_mock'\n    ],\n    extras_requires={\n        'pandas': ['pandas'],\n    },\n    keywords=['stocks', 'market', 'finance', 'alpha_vantage', 'quotes',\n              'shares'],\n    packages=find_packages(\n        exclude=['helpers', 'test_alpha_vantage', 'images']),\n    package_data={\n        'alpha_vantage': [],\n    }\n)\n"
        },
        {
          "name": "test_alpha_vantage",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}