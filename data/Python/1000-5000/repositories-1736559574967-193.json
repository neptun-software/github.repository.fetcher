{
  "metadata": {
    "timestamp": 1736559574967,
    "page": 193,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "apple/coremltools",
      "stars": 4517,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3017578125,
          "content": "*~\n*.pyc\nCMakeCache.txt\nCMakeFiles/\nCMakeScripts/\ncmake_install.cmake\n*.a\n*.so\n*.dylib\n/coremltools.build/\n/deps/protobuf/cmake/coremltools.build/\n/mlmodel/coremltools.build/\n/build/\n/envs/\n/docs/_build/\n/docs/generated/\n/docs-guides/_build/\n/*.egg-info/\n/dist/\n/envs/\n.DS_Store\n.vscode/\n.cache/\n.idea/\n*.log\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 7.4716796875,
          "content": "stages:\n  - check\n  - build\n  - test\n\n#########################################################################\n##\n##                               Check\n##\n#########################################################################\n\ncheck_python_flake8:\n  tags:\n    - macOS_M1\n  stage: check\n  script:\n    - python -m pip install --upgrade pip\n    - pip install flake8\n    - flake8 ./coremltools --count --select=E9,F5,F63,F7,F82 --show-source --statistics\n\n\n#########################################################################\n##\n##                         Build\n##\n#########################################################################\n\n.build_macos: &build_macos\n    stage: build\n    script:\n      - zsh -e scripts/build.sh --num-procs=4 --python=$PYTHON --dist\n    artifacts:\n      expire_in: 2 weeks\n      paths:\n        - build/dist/\n\nbuild_wheel_macos_py37_intel:\n  <<: *build_macos\n  tags:\n    - macOS_intel\n  variables:\n    PYTHON: \"3.7\"\n\nbuild_wheel_macos_py39_intel:\n  <<: *build_macos\n  tags:\n    - macOS_intel\n  variables:\n    PYTHON: \"3.9\"\n\nbuild_wheel_macos_py310:\n  <<: *build_macos\n  tags:\n    - macOS_M1\n  variables:\n    PYTHON: \"3.10\"\n\n\n#########################################################################\n##\n##                         Test\n##\n#########################################################################\n.test_macos_pkg: &test_macos_pkg\n   stage: test\n   timeout: 12h\n   script:\n     - zsh -e scripts/test.sh --wheel-path=${WHEEL_PATH} --python=${PYTHON}\n       --test-package=${TEST_PACKAGE} --requirements=${REQUIREMENTS} --fast\n\ntest_py39_coremltools_test_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    TEST_PACKAGE: coremltools.test\n    PYTHON: \"3.9\"\n    REQUIREMENTS: reqs/test.pip\n\ntest_py39_pytorch_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    PYTHON: \"3.9\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.torch\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    REQUIREMENTS: reqs/test.pip\n\ntest_py37_tf1_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py37_intel\n  variables:\n    PYTHON: \"3.7\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.tensorflow\n    WHEEL_PATH: build/dist/*cp37*10_15*\n    REQUIREMENTS: reqs/test_tf1.pip\n\ntest_py39_tf2_intel-1:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    PYTHON: \"3.9\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.tensorflow\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    REQUIREMENTS: reqs/test_tf2.pip\n\ntest_py39_tf2_intel-2:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    PYTHON: \"3.9\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.tensorflow2\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    REQUIREMENTS: reqs/test_tf2.pip\n\ntest_py39_mil_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    PYTHON: \"3.9\"\n    TEST_PACKAGE: coremltools.converters.mil.mil\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    REQUIREMENTS: reqs/test.pip\n\ntest_py39_backends_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    TEST_PACKAGE: coremltools.converters.mil.backend\n    PYTHON: \"3.9\"\n    REQUIREMENTS: reqs/test.pip\n\ntest_py39_shapes_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    TEST_PACKAGE: coremltools.converters.mil.test_inputs_outputs_shape\n    PYTHON: \"3.9\"\n    REQUIREMENTS: reqs/test.pip\n\ntest_py39_milproto_intel:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_intel\n  dependencies:\n    - build_wheel_macos_py39_intel\n  variables:\n    WHEEL_PATH: build/dist/*cp39*10_15*\n    TEST_PACKAGE: coremltools.converters.mil.frontend.milproto\n    PYTHON: \"3.9\"\n    REQUIREMENTS: reqs/test_tf2.pip\n\n\n\ntest_py310_coremltools_test:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    WHEEL_PATH: build/dist/*cp310*11*\n    TEST_PACKAGE: coremltools.test\n    PYTHON: \"3.10\"\n    REQUIREMENTS: reqs/test.pip\n\ntest_py310_pytorch_script:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.torch\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test.pip\n    TORCH_FRONTENDS: TORCHSCRIPT\n\ntest_py310_pytorch_export:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.torch\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test.pip\n    TORCH_FRONTENDS: TORCHEXPORT\n\ntest_py310_pytorch_executorch:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.torch\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test.pip\n    TORCH_FRONTENDS: EXECUTORCH\n\ntest_py310_tf2-1:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.tensorflow\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test_tf2.pip\n\ntest_py310_tf2-2:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.tensorflow2\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test_tf2.pip\n\ntest_py310_mil:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.mil\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test.pip\n\ntest_py310_backends:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.backend\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test.pip\n\ntest_py310_shapes:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.test_inputs_outputs_shape\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test.pip\n\ntest_py310_milproto:\n  <<: *test_macos_pkg\n  tags:\n    - macOS_M1\n  dependencies:\n    - build_wheel_macos_py310\n  variables:\n    PYTHON: \"3.10\"\n    TEST_PACKAGE: coremltools.converters.mil.frontend.milproto\n    WHEEL_PATH: build/dist/*cp310*11*\n    REQUIREMENTS: reqs/test_tf2.pip\n\n\n\n#########################################################################\n##\n##                        Make docs\n##\n#########################################################################\nbuild_documentation:\n  tags:\n    - macOS_M1\n  stage: test\n  script:\n    - export PATH=$PATH:/opt/anaconda/bin/\n    - bash -e scripts/build_docs.sh --wheel-path=${WHEEL_PATH} --python=${PYTHON}\n  dependencies:\n    - build_wheel_macos_py310\n  artifacts:\n    when: always\n    expire_in: 2 weeks\n    paths:\n      - _build/html/\n  variables:\n    WHEEL_PATH: build/dist/coremltools*cp310-none-macosx_11_0_arm64.whl\n    PYTHON: \"3.10\"\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 14.3173828125,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint.\njobs=4\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=\n  bad-continuation,bad-whitespace,\n  bare-except,\n  consider-using-enumerate,\n  fixme,\n  global-statement,\n  invalid-name,\n  len-as-condition,\n  line-too-long,\n  logging-fstring-interpolation,\n  missing-docstring,\n  no-else-return,\n  no-self-use,\n  protected-access,\n  redefined-builtin,\n  redefined-outer-name,\n  superfluous-parens,\n  too-few-public-methods,\n  too-many-arguments,too-many-boolean-expressions,too-many-branches,too-many-function-args,\n  too-many-instance-attributes,too-many-lines,too-many-locals,too-many-nested-blocks,\n  too-many-public-methods,too-many-return-statements,too-many-statements,\n  trailing-whitespace,\n  ungrouped-imports,\n  unsubscriptable-object,\n  unused-argument,\n  unused-variable,\n  useless-object-inheritance,\n  wrong-import-order,wrong-import-position\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio).You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n\n[BASIC]\n\n# Naming hint for argument names\nargument-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct argument names\nargument-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Naming hint for attribute names\nattr-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct attribute names\nattr-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Naming hint for class attribute names\nclass-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Naming hint for class names\nclass-name-hint=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression matching correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Naming hint for constant names\nconst-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression matching correct constant names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming hint for function names\nfunction-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct function names\nfunction-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_,slim\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Naming hint for inline iteration names\ninlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming hint for method names\nmethod-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct method names\nmethod-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Naming hint for module names\nmodule-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty\n\n# Naming hint for variable names\nvariable-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct variable names\nvariable-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,dict-separator\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager,tensorflow.python.util.tf_contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=pyespresso,screwsdriver,espressobar,Features\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=\n  optparse.Values,\n  sympy.core.mul.Mul,\n  thread._local,\n  _thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n  LazyLoader,\n  matplotlib.cm,\n  tensorflow,\n  tensorflow.core.framework.*_pb2,\n  tensorflow.tools.api.generator.api.contrib,\n  torch\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,future.builtins\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in a if statement\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.1591796875,
          "content": "[style]\nbased_on_style = pep8\nsplit_before_first_argument = 1\nindent_dictionary_value = 1\ncoalesce_brackets = 1\nsplit_complex_comprehension = 1\ncolumn_limit = 100\n"
        },
        {
          "name": "BUILDING.md",
          "type": "blob",
          "size": 3.0908203125,
          "content": "Building from Source\n====================\n\nThis page describes how to build Core ML Tools (coremltools) from the source repository.\n\n## Requirements\n\nTo build coremltools from source, you need the following:\n\n* [CMake](https://cmake.org/)\n* [Miniconda](https://docs.conda.io/en/latest/miniconda.html) (or [Anaconda](https://www.anaconda.com/))\n* [Zsh shell](http://zsh.sourceforge.net/) (the default shell for macOS 10.16+) installed in /usr/bin\n* A C++17 compatible compiler (if using GCC, need GCC 9.0 or later)\n\n## Build script\n\nFollow these steps:\n\n1. Fork and clone the GitHub [coremltools repository](https://github.com/apple/coremltools).\n\n2. Run the [build.sh](scripts/build.sh) script to build `coremltools`.\n\t* By default this script uses Python 3.7, but you can include `--python=3.8` (or `3.9`, `3.10`, `3.11`, `3.12`) as a argument to change the Python version.\n\t* The script creates a new `build` folder with the coremltools distribution, and a `dist` folder with Python wheel files.\n\n3. Run the [test.sh](scripts/test.sh) script to test the build.\n\n**Under the hood**: If an Anaconda or Miniconda environment doesn't already exist or is not up-to-date, the `build.sh` script automatically runs the [`env_create.sh`](scripts/env_create.sh) script to create the environment. It then uses [`env_activate.sh`](scripts/env_activate.sh) to activate the environment and set up the appropriate version of Python. The new environment is located at `<repo root>/coremltools/envs` and is named after the `py` parameter. For example, a development environment with py 3.7 is named `coremltools-dev-py37`.\n\n\n## Build targets\n\nThe following build targets help you configure the development environment. If you need to add packages, edit the `reqs/pip` files, and the auto-environment script installs them automatically.\n\n\n* `build` | Build coremltools in debug mode (include symbols).\n* `docs` | Build documentation.\n* `clean` | Clean build dir.\n* `clean_envs` | Delete all `envs` created by the scripts.\n* `lint` | Linter.\n* `proto` | Build coremltools and rebuild MLModel protobuf sources.\n* `release` | Set up the package for release, but don't upload to pypi. Include all wheels from `build/dist` in the built package.\n* `style` | Style checking.\n* `test` | Run all tests. Pass `TEST_PACKAGES=\"...\"` to set which packages to test.\n* `test_fast` | Run all fast tests.\n* `test_slow` | Run all non-fast tests.\n* `wheel` | Build wheels in release mode.\n\nThe script uses Python 3.7, but you can include `--python=3.8` (or `3.9`, `3.10`, `3.11`, `3.12`) as a argument to change the Python version.\n\n## Resources\n\nFor more information, see the following:\n\n* Core ML Tools [README](README.md) file for this repository\n* [Release Notes](https://github.com/apple/coremltools/releases/) for the current release and previous releases\n* [Guides and examples](https://coremltools.readme.io/) with installation and troubleshooting help\n* [API Reference](https://apple.github.io/coremltools/index.html)\n* [Core ML Specification](https://apple.github.io/coremltools/mlmodel/index.html)\n* [Contribution Guidelines](CONTRIBUTING.md) for reporting issues and making pull requests\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.5126953125,
          "content": "cmake_minimum_required(VERSION 3.10.2)\n\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n\nproject(coremltools)\n\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n  message(FATAL_ERROR \"\n    Source directory '${PROJECT_SOURCE_DIR}' is the same\n    as binary directory '${PROJECT_BINARY_DIR}'; coremltools requires\n    an out-of-source build.  Note that your directory tree will require\n    you to remove CMakeCache.txt before this will work, and CMake may have\n    clobbered some source files (use git reset --hard).\n    See: https://gitlab.kitware.com/cmake/community/wikis/FAQ#i-run-an-out-of-source-build-but-cmake-generates-in-source-anyway-why\n  \")\nendif()\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\n# Globally ignore \"no symbols\" warnings during compilation\nSET(CMAKE_CXX_ARCHIVE_CREATE \"<CMAKE_AR> Scr <TARGET> <LINK_FLAGS> <OBJECTS>\")\nif(APPLE)\n    SET(CMAKE_CXX_ARCHIVE_FINISH \"<CMAKE_RANLIB> -no_warning_for_no_symbols -c <TARGET>\")\nendif()\n\nfind_program(HAS_CCACHE ccache)\nif(HAS_CCACHE)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\nendif()\n\nadd_subdirectory(deps)\nadd_subdirectory(mlmodel)\n\nfind_package(PythonInterp)\nfind_package(PythonLibs)\n\nmessage(\"Found python at ${PYTHON_EXECUTABLE}\")\nmessage(\"Found python version ${PYTHON_VERSION_STRING}\")\nmessage(\"Found python includes ${PYTHON_INCLUDE_DIRS}\")\n\ninclude_directories(\n  .\n  deps/protobuf/src\n  deps/pybind11/include\n  deps/nlohmann\n  mlmodel/src\n  ${PYTHON_INCLUDE_DIRS}\n  )\n\nif(APPLE)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fobjc-arc\")\nendif()\n\nadd_library(milstoragepython\n  SHARED\n  milstoragepython/MilStorage.cpp\n  milstoragepython/MilStoragePython.cpp\n  )\n\ntarget_link_libraries(milstoragepython\n  mlmodel\n  )\n\nadd_library(modelpackage\n  SHARED\n  modelpackage/src/ModelPackage.cpp\n  modelpackage/src/utils/JsonMap.cpp\n  modelpackage/src/ModelPackagePython.cpp\n  )\n  \ntarget_compile_definitions(modelpackage\n  PRIVATE\n  CPU_ONLY=1\n  )\n\ntarget_link_libraries(modelpackage\n  mlmodel\n  libprotobuf\n  )\n\nif (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.1)\n  target_link_libraries(modelpackage\n    stdc++fs\n    )\nendif()\n\nif (APPLE)\n  # Allow Python to be found at runtime instead of compile/link time\n  # This is apparently the default on Linux\n  set_target_properties(milstoragepython PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\n  set_target_properties(modelpackage PROPERTIES LINK_FLAGS \"-undefined dynamic_lookup\")\nendif()\n\nfile(COPY ${CMAKE_SOURCE_DIR}/README.md DESTINATION ${CMAKE_BINARY_DIR})\nfile(COPY ${CMAKE_SOURCE_DIR}/coremltools/__init__.py\n  DESTINATION ${CMAKE_BINARY_DIR}/coremltools)\nfile(COPY ${CMAKE_SOURCE_DIR}/coremltools/version.py\n  DESTINATION ${CMAKE_BINARY_DIR}/coremltools)\n\nset(copy_dirs _deps converters models proto)\nforeach(cdir IN ITEMS ${copy_dirs})\n  file(COPY ${CMAKE_SOURCE_DIR}/coremltools/${cdir}\n    DESTINATION ${CMAKE_BINARY_DIR}/coremltools)\nendforeach()\n\nif(NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(_additional_milstoragepython_command COMMAND strip -x ${PROJECT_SOURCE_DIR}/coremltools/libmilstoragepython.so)\n  set(_additional_modelpackage_command COMMAND strip -x ${PROJECT_SOURCE_DIR}/coremltools/libmodelpackage.so)\nendif()\n\nadd_custom_command(\n  TARGET modelpackage\n  POST_BUILD\n  COMMAND cp $<TARGET_FILE:modelpackage> ${PROJECT_SOURCE_DIR}/coremltools/libmodelpackage.so\n  ${_additional_modelpackage_command}\n)\nif (NOT APPLE)\n  target_link_libraries(modelpackage uuid)\nendif()\n\nadd_custom_command(\n  TARGET milstoragepython\n  POST_BUILD\n  COMMAND cp $<TARGET_FILE:milstoragepython> ${PROJECT_SOURCE_DIR}/coremltools/libmilstoragepython.so\n  ${_additional_milstoragepython_command}\n)\n\nfind_library(CORE_VIDEO CoreVideo)\nfind_library(CORE_ML CoreML)\nfind_library(FOUNDATION Foundation)\n\nif (APPLE AND CORE_VIDEO AND CORE_ML AND FOUNDATION)\n  execute_process(\n      COMMAND ${PYTHON_EXECUTABLE} -c \"import numpy; print(numpy.get_include())\"\n      RESULT_VARIABLE NUMPY_INCLUDE_STATUS\n      OUTPUT_VARIABLE NUMPY_INCLUDE\n  )\n\n  if(\"${NUMPY_INCLUDE}\" STREQUAL \"\" OR NOT NUMPY_INCLUDE_STATUS EQUAL 0)\n      message(FATAL_ERROR \"Could not find numpy include path. Exit code: ${NUMPY_INCLUDE_STATUS}\")\n  endif()\n  message(\"Found numpy include path at ${NUMPY_INCLUDE}\")\n\n  include_directories(\n    ${NUMPY_INCLUDE}\n  )\n\n  add_library(coremlpython\n    SHARED\n    coremlpython/CoreMLPython.mm\n    coremlpython/CoreMLPython.h\n    coremlpython/CoreMLPythonArray.mm\n    coremlpython/CoreMLPythonArray.h\n    coremlpython/CoreMLPythonUtils.mm\n    coremlpython/CoreMLPythonUtils.h\n  )\n  target_link_libraries(coremlpython\n    mlmodel\n    ${CORE_VIDEO}\n    ${CORE_ML}\n    ${FOUNDATION}\n  )\n\n  set(osx_export_file ${CMAKE_SOURCE_DIR}/coremlpython/exported_symbols_osx.ver)\n  set_property(TARGET coremlpython APPEND PROPERTY LINK_DEPENDS \"${osx_export_file}\")\n  set_property(TARGET coremlpython APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,-exported_symbols_list,${osx_export_file} \")\n\n  # Allow Python to be found at runtime instead of compile/link time\n  # This is apparently the default on Linux\n  set_property(TARGET coremlpython APPEND_STRING PROPERTY LINK_FLAGS \"-undefined dynamic_lookup\")\n\n  set_property(TARGET coremlpython APPEND_STRING PROPERTY LINK_FLAGS \" -Wl,-dead_strip\")\n\n  if(NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(_additional_libcoremlpython_command\n      COMMAND strip -x ${PROJECT_SOURCE_DIR}/coremltools/libcoremlpython.so\n    )\n  endif()\n\n  add_custom_command(\n    TARGET coremlpython\n    POST_BUILD\n    COMMAND cp $<TARGET_FILE:coremlpython> ${PROJECT_SOURCE_DIR}/coremltools/libcoremlpython.so\n    ${_additional_libcoremlpython_command}\n  )\n\nelse()\n  message(STATUS \"CoreML.framework and dependent frameworks not found. Skipping libcoremlpython build.\")\nendif()\n\n\n# Build kmeans-1d\nset(KMEANS_DIR \"${PROJECT_SOURCE_DIR}/deps/kmeans1d\")\nexecute_process(\n  COMMAND python3 setup.py build_ext --inplace\n  WORKING_DIRECTORY ${KMEANS_DIR}\n)\n\n# Somehow Python's setuptools is building this shared object file so that it tries to load the C++\n# standard library using an rpath that only exist on the build machine. Change that so it gets\n# loaded from the standard location.\nif(APPLE)\n  file(GLOB SO_FILE \"${PROJECT_SOURCE_DIR}/deps/kmeans1d/kmeans1d/_core.*.so\")\n  execute_process(\n    COMMAND install_name_tool -change @rpath/libc++.1.dylib /usr/lib/libc++.1.dylib ${SO_FILE}\n  )\nendif()\n\n# Copy kmeans-1d to Python deps folder\nexecute_process(\n  COMMAND cp -r kmeans1d ../../coremltools/_deps\n  WORKING_DIRECTORY ${KMEANS_DIR}\n)\n\n\nset(PYTHON_TAG \"cp${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}\")\nif(APPLE)\n  execute_process(COMMAND uname -m OUTPUT_VARIABLE HARDWARE_NAME OUTPUT_STRIP_TRAILING_WHITESPACE)\n  if(${HARDWARE_NAME} MATCHES \"x86_64\")\n    set(MIN_MAC_OS \"10_15\")\n  elseif(${HARDWARE_NAME} MATCHES \"arm64\")\n    set(MIN_MAC_OS \"11_0\")\n  else()\n    message(FATAL_ERROR \"Unsupported hardware type. On macOS, x86_64 and arm64 are supported.\")\n  endif()\n  set(PLAT_NAME \"macosx_${MIN_MAC_OS}_${HARDWARE_NAME}\")\nelseif(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Linux\")\n  set(PLAT_NAME \"manylinux1_x86_64\")\nelse()\n  message(FATAL_ERROR \"Unsupported build platform. Supported platforms are Linux and macOS.\")\nendif()\n\n\nif(BUILD_TAG)\n  set(BUILD_TAG_OPTION \"--build-number=${BUILD_TAG}\")\n  message(STATUS \"Using ${BUILD_TAG} as build tag for wheels.\")\nelse()\n  set(BUILD_TAG_OPTION \"\")\nendif()\n\n# Add a target for each platform, and then a 'dist' that will build all of them.\n# Parallel invocations of setup.py is not safe, so we serialize them.\nset(plat_targets \"\")\nforeach(platform IN ITEMS ${PLAT_NAME})\n  add_custom_target(dist_${platform}\n    COMMENT \"Building dist for platform ${platform}...\"\n    COMMAND ${PYTHON_EXECUTABLE}\n      ${CMAKE_SOURCE_DIR}/setup.py\n      bdist_wheel\n      --plat-name=${platform}\n      --python-tag=${PYTHON_TAG}\n      ${BUILD_TAG_OPTION}\n      --dist-dir=${PROJECT_BINARY_DIR}/dist\n    DEPENDS \"milstoragepython;modelpackage;coremlpython;${plat_targets}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n  )\n  set(plat_targets \"${plat_targets};dist_${platform}\")\nendforeach()\n# Add a 'dist' target that will build wheels for all possible platforms.\nadd_custom_target(dist DEPENDS ${plat_targets})\n\nadd_custom_target(pip_install_dev\n  COMMAND pip install -e ${PROJECT_SOURCE_DIR}\n  DEPENDS \"coremlpython\"\n)\n\nadd_custom_target(pytest\n  COMMAND pytest -r fs ${PROJECT_SOURCE_DIR}/coremltools/test/ --timeout=600\n  DEPENDS pip_install_dev\n  USES_TERMINAL\n)\n\nadd_custom_target(pytest_no_slow\n  COMMAND pytest -r fs -m '\"no slow\"' ${PROJECT_SOURCE_DIR}/coremltools/test/\n  DEPENDS pip_install_dev\n  USES_TERMINAL\n)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.673828125,
          "content": "\nContribution Guidelines\n=======================\n\nThe Core ML `.mlmodel` file format is a publicly documented specification. The Core ML Tools source code is 100% open source under the [BSD-3 Clause license](https://github.com/apple/coremltools/blob/master/LICENSE.txt). We welcome all contributions and ideas to grow the product. We ask that you follow the [contributing guidelines and code of conduct](#guidelines-and-code-of-conduct), which are typical of open source communities.\n\nThere are many ways to contribute to coremltools. [**Use these templates**](https://github.com/apple/coremltools/issues/new/choose) to report issues, make feature requests, or ask questions. We welcome even minor improvements to code, testing, and documentation, as well as requests for new features and enhancements. Don’t hesitate to do the following:\n\n* Report issues you are facing. Check [open issues](https://github.com/apple/coremltools/issues) to see if the issue has already been reported, and [current pull requests](https://github.com/apple/coremltools/pulls) to see if the issue has already been addressed. Comment on or thumbs-up issues that have already been reported by others. We encourage you to resolve or add comments.\n* Request new features or enhancements, or ask questions, using [these templates](https://github.com/apple/coremltools/issues/new/choose).\n* Add new code to improve a feature or add functionality by submitting a GitHub [pull request](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request). For examples, see the [list of current pull requests](https://github.com/apple/coremltools/pulls). \n* Improve the documentation. Even if you find only a typo, don’t hesitate to send us a pull request with your corrections. \n\nFor instructions, see [**Contributing**](https://coremltools.readme.io/docs/how-to-contribute).\n\n## Guidelines and code of conduct \n\nThe contributing guidelines and code of conduct are similar to those of most open source communities. They include participating in the community through developing, receiving help, and answering questions as well as engaging in a highly motivated and positive environment. For example:\n\n* Providing comments that are helpful, motivating and constructive.\n* Treating with respect others within the community.\n* Collaborating with others to produce new and useful contributions to the community.\n\nTo ensure that issues and pull requests can be addressed quickly, please do the following before submitting issues, questions, or pull requests:\n\n* Check [open issues](https://github.com/apple/coremltools/issues) and [current pull requests](https://github.com/apple/coremltools/pulls) in the repository to see if your issue, feature request, or question already exists or has already been addressed.\n* Fill in the appropriate [template](https://github.com/apple/coremltools/issues/new/choose) with as much detail as possible as well as code snippets, so that we are able to reproduce the issue.\n* Promptly reply to any requests or questions asked by others within the community on your issue or pull request.\n\n## Resources\n\nFor more information, see the following:\n\n* [Contributing](https://coremltools.readme.io/docs/how-to-contribute) for instructions on contributing to the repository.\n* Core ML Tools [README](README.md) file for this repository\n* [Release Notes](https://github.com/apple/coremltools/releases/) for the current release and previous releases\n* [Guides and examples](https://coremltools.readme.io/) with installation and troubleshooting\n* [API Reference](https://apple.github.io/coremltools/index.html)\n* [Core ML Specification](https://apple.github.io/coremltools/mlmodel/index.html)\n* [Building from Source](BUILDING.md)\n\n"
        },
        {
          "name": "Info.plist",
          "type": "blob",
          "size": 0.8134765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CFBundleDevelopmentRegion</key>\n\t<string>en</string>\n\t<key>CFBundleExecutable</key>\n\t<string>$(EXECUTABLE_NAME)</string>\n\t<key>CFBundleIdentifier</key>\n\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n\t<key>CFBundleInfoDictionaryVersion</key>\n\t<string>6.0</string>\n\t<key>CFBundleName</key>\n\t<string>$(PRODUCT_NAME)</string>\n\t<key>CFBundlePackageType</key>\n\t<string>BNDL</string>\n\t<key>CFBundleShortVersionString</key>\n\t<string>1.0</string>\n\t<key>CFBundleVersion</key>\n\t<string>1</string>\n\t<key>NSHumanReadableCopyright</key>\n\t<string>Copyright © 2017 Apple Inc. All rights reserved.</string>\n\t<key>NSPrincipalClass</key>\n\t<string></string>\n</dict>\n</plist>\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.45703125,
          "content": "Copyright © 2020-2023, Apple Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:  \n\n1.  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder(s) nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0166015625,
          "content": "include README.md"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.7509765625,
          "content": "#\n# Before invoking `make`, make sure the python environment is setup by following the instructions\n# in README.md.\n#\nSHELL := /bin/zsh\n\n# All the packages that we care about for linting, testing, etc.\nCURR_DIR=$(notdir $(shell pwd))\nSRC_PACKAGES=$(subst -,_,${CURR_DIR})\nTEST_PACKAGES=${SRC_PACKAGES}\nPACKAGES=${SRC_PACKAGES} ${TEST_PACKAGES} ${EXAMPLES}\nENV_DIR=envs/${CURR_DIR}-py${python}\n\n# Docker image for CoreML\nDOCKERFILE_PATH=docker/Dockerfile-coremltools-linux\nDOCKERFILE_ROOT=docker/\nDOCKER_TAG=docker.apple.com/turi/coremltools-linux:latest\n\n# Define python version to use\nPY_EXE ?= $(shell command -v python || command -v python)\npython = 3.7\n\n.PHONY: all build checkstyle clean clean_envs docker_build docker_push env env_force lint proto release style test test_fast test_slow wheel\n\nall: build\n\nbuild: ${ENV_DIR}/build_reqs\n\tzsh -i scripts/build.sh --python=${python} --debug --no-check-env\n\ncheckstyle:\n\t${PY_EXE} -m yapf -rdp ${PACKAGES}\n\nclean:\n\trm -rf build\n\nclean_envs:\n\trm -rf envs\n\ndocker_build:\n\tdocker build -f ${DOCKERFILE_PATH} -t ${DOCKER_TAG} ${DOCKERFILE_ROOT}\n\ndocker_push:\n\tdocker push ${DOCKER_TAG}\n\ndocs: ${ENV_DIR}/docs_reqs\n\tzsh -i scripts/build_docs.sh --python=${python} --no-check-env\n\nenv:\n\tzsh -i scripts/env_create.sh --python=${python} --dev\n\nenv_force:\n\tzsh -i scripts/env_create.sh --python=${python} --force --dev --no-check-env\n\nlint:\n\t${PY_EXE} -m pylint -j 0 ${PACKAGES}\n\nproto: ${ENV_DIR}/build_reqs\n\tzsh -i scripts/build.sh --python=${python} --protobuf --debug --no-check-env\n\nrelease: ${ENV_DIR}/build_reqs\n\tzsh -i scripts/release_wheel.sh --no-check-env\n\nstyle:\n\t${PY_EXE} -m yapf -rip --verify ${PACKAGES}\n\ntest: ${ENV_DIR}/test_reqs\n\tzsh -i scripts/test.sh --python=${python} --test-package=\"${TEST_PACKAGES}\" --cov=\"${SRC_PACKAGES}\" --no-check-env\n\ntest_fast: ${ENV_DIR}/test_reqs\n\tzsh -i scripts/test.sh --python=${python} --test-package=\"${TEST_PACKAGES}\" --cov=\"${SRC_PACKAGES}\" --fast --no-check-env\n\ntest_slow: ${ENV_DIR}/test_reqs\n\tzsh -i scripts/test.sh --python=${python} --test-package=\"${TEST_PACKAGES}\" --cov=\"${SRC_PACKAGES}\" --slow --no-check-env\n\nwheel: ${ENV_DIR}/build_reqs\n\tzsh -i scripts/build.sh --python=${python} --dist --no-check-env\n\n# For Managing Environments, so we don't need to rebuild every time we run a target.\n${ENV_DIR}/build_reqs: ./reqs/build.pip\n\tzsh -i scripts/env_create.sh --python=${python} --exclude-test-deps\n\ttouch ${ENV_DIR}/build_reqs\n\n${ENV_DIR}/test_reqs: ${ENV_DIR}/build_reqs ./reqs/test.pip\n\tzsh -i scripts/env_create.sh --python=${python} --exclude-build-deps\n\ttouch ${ENV_DIR}/test_reqs\n\n${ENV_DIR}/docs_reqs: ${ENV_DIR}/build_reqs ${ENV_DIR}/test_reqs ./reqs/docs.pip\n\tzsh -i scripts/env_create.sh --python=${python} --include-docs-deps --exclude-build-deps --exclude-test-deps\n\ttouch ${ENV_DIR}/docs_reqs\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 4.1513671875,
          "content": "Copyright © 2020-2023, Apple Inc. All rights reserved.\n\nThis project contains content adapted from kmeans1d (https://github.com/dstein64/kmeans1d), the license for which follows:\n\nMIT License\n\nCopyright (c) 2019 Daniel Steinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\nThis project contains content in the files coremltools/optimize/torch/layerwise_compression/_quant.py,\ncoremltools/optimize/torch/layerwise_compression/algorithms.py,\nand coremltools/optimize/torch/layerwise_compression/layerwise_compressor.py which are adapted from\ngtpq (https://github.com/IST-DASLab/gptq/). It also contains content in the file coremltools/optimize/torch/layerwise_compression/algorithms.py which is adapted from sparsegpt (https://github.com/IST-DASLab/sparsegpt). The license for these follows:\n\nApache License 2.0\n\nCopyright 2023 IST Austria Distributed Algorithms and Systems Lab\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\t http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nThis project contains content in the files coremltools/optimize/torch/quantization/modules/conv_transpose.py and coremltools/optimize/torch/quantization/modules/conv_transpose_fused.py which are adapted from pytorch (https://github.com/pytorch/). The license for these follows:\n\nCopyright (c) 2016 Facebook, Inc (Adam Paszke)\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the names of Facebook, Deepmind Technologies, NYU, NEC Laboratories America\n   and IDIAP Research Institute nor the names of its contributors may be\n   used to endorse or promote products derived from this software without\n   specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7431640625,
          "content": "[![Build Status](https://img.shields.io/gitlab/pipeline/coremltools1/coremltools/main)](https://gitlab.com/coremltools1/coremltools/-/pipelines?page=1&scope=branches&ref=main)\n[![PyPI Release](https://img.shields.io/pypi/v/coremltools.svg)](#)\n[![Python Versions](https://img.shields.io/pypi/pyversions/coremltools.svg)](#)\n\n[Core ML Tools](https://apple.github.io/coremltools/docs-guides/source/overview-coremltools.html)\n=======================\n\n![Core ML Tools logo](docs/logo.png)\n\nUse [Core ML Tools](https://apple.github.io/coremltools/docs-guides/source/overview-coremltools.html) (*coremltools*) to convert machine learning models from third-party libraries to the Core ML format. This Python package contains the supporting tools for converting models from training libraries such as the following:\n\n* [TensorFlow 1.x](https://www.tensorflow.org/versions/r1.15/api_docs/python/tf)\n* [TensorFlow 2.x](https://www.tensorflow.org/api_docs)\n* [PyTorch](https://pytorch.org/)\n* Non-neural network frameworks:\n\t* [scikit-learn](https://scikit-learn.org/stable/)\n\t* [XGBoost](https://xgboost.readthedocs.io/en/latest/)\n\t* [LibSVM](https://www.csie.ntu.edu.tw/~cjlin/libsvm/)\n\nWith coremltools, you can:\n\n* Convert trained models to the Core ML format.\n* Read, write, and optimize Core ML models.\n* Verify conversion/creation (on macOS) by making predictions using Core ML.\n\nAfter conversion, you can integrate the Core ML models with your app using Xcode.\n\n## Install Version 8.1\nTo install the latest non-beta version, run the following command in your terminal:\n```shell\npip install -U coremltools\n```\n\n## Core ML\n\n[Core ML](https://developer.apple.com/documentation/coreml) is an Apple framework to integrate machine learning models into your app. Core ML provides a unified representation for all models. Your app uses Core ML APIs and user data to make predictions, and to fine-tune models, all on the user’s device. Core ML optimizes on-device performance by leveraging the CPU, GPU, and Neural Engine while minimizing its memory footprint and power consumption. Running a model strictly on the user’s device removes any need for a network connection, which helps keep the user’s data private and your app responsive.\n\n## Resources\n\nTo install coremltools, see [Installing Core ML Tools](https://apple.github.io/coremltools/docs-guides/source/installing-coremltools.html). For more information, see the following:\n\n* [Release Notes](https://github.com/apple/coremltools/releases/)\n* [Guide and examples](https://apple.github.io/coremltools/docs-guides/index.html)\n* [API Reference](https://apple.github.io/coremltools/index.html)\n* [Core ML Specification](https://apple.github.io/coremltools/mlmodel/index.html)\n* [Building from Source](BUILDING.md)\n* [Contribution Guidelines](CONTRIBUTING.md)\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "coremlpython",
          "type": "tree",
          "content": null
        },
        {
          "name": "coremltools",
          "type": "tree",
          "content": null
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs-guides",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "milstoragepython",
          "type": "tree",
          "content": null
        },
        {
          "name": "mlmodel",
          "type": "tree",
          "content": null
        },
        {
          "name": "modelpackage",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.4521484375,
          "content": "[pytest]\nlog_cli = false\nlog_cli_level = INFO\n\nlog_file = test.log\nlog_file_level = DEBUG\n\nlog_format      = [%(asctime)s %(levelname)s %(pathname)s:%(lineno)s] %(message)s\nlog_file_format = [%(asctime)s %(levelname)s %(pathname)s:%(lineno)s] %(message)s\nlog_date_format      = %Y%m%d %H:%M:%S\nlog_file_date_format = %Y%m%d %H:%M:%S\n\naddopts = -ra -q\nmarkers =\n\tslow: tests that take more than a second or so to run\n\nfilterwarnings =\n\tmodule\n\tignore::UserWarning\n"
        },
        {
          "name": "reqs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.498046875,
          "content": "#!/usr/bin/env python\n#\n# Copyright (c) 2017, Apple Inc. All rights reserved.\n#\n# Use of this source code is governed by a BSD-3-clause license that can be\n# found in the LICENSE.txt file or at https://opensource.org/licenses/BSD-3-Clause\n\nimport importlib.util\nimport os\nfrom setuptools import setup, find_packages\n\n# Get the coremltools version string\ncoremltools_dir = os.path.join(os.path.dirname(__file__), \"coremltools\")\nversion_file = os.path.join(coremltools_dir, \"version.py\")\n\nspec = importlib.util.spec_from_file_location(\"coremltools.version\", version_file)\nversion_module = importlib.util.module_from_spec(spec)\nspec.loader.exec_module(version_module)\n\n__version__ = version_module.__version__\n\nREADME = os.path.join(os.getcwd(), \"README.md\")\n\n\nlong_description = \"\"\"coremltools\n===========\n\n`Core ML <http://developer.apple.com/documentation/coreml>`_\nis an Apple framework that allows developers to easily integrate\nmachine learning (ML) models into apps. Core ML is available on iOS, iPadOS,\nwatchOS, macOS, and tvOS. Core ML introduces a public file format (.mlmodel)\nfor a broad set of ML methods including deep neural networks (convolutional\nand recurrent), tree ensembles (boosted trees, random forest, decision trees),\nand generalized linear models. Core ML models can be directly integrated into\napps within Xcode.\n\n:code:`coremltools` is a python package for creating, examining, and testing models in\nthe .mlmodel format. In particular, it can be used to:\n\n- Convert trained models from popular machine learning tools into Core ML format\n  (.mlmodel).\n- Write models to Core ML format with a simple API.\n- Making predictions using the Core ML framework (on select platforms) to\n  verify conversion.\n\nMore Information\n----------------\n\n- `coremltools user guide and examples <https://coremltools.readme.io/>`_\n- `Core ML framework documentation <http://developer.apple.com/documentation/coreml>`_\n- `Machine learning at Apple <https://developer.apple.com/machine-learning>`_\n\nLicense\n-------\nCopyright (c) 2020, Apple Inc. All rights reserved.\n\nUse of this source code is governed by the\n`3-Clause BSD License <https://opensource.org/licenses/BSD-3-Clause>`_\nthat can be found in the LICENSE.txt file.\n\"\"\"\n\nsetup(\n    name=\"coremltools\",\n    version=__version__,\n    description=\"Community Tools for Core ML\",\n    long_description=long_description,\n    author=\"Apple Inc.\",\n    author_email=\"coremltools@apple.com\",\n    url=\"https://github.com/apple/coremltools\",\n    packages=find_packages(),\n    package_data={\n        \"\": [\n            \"_core.*.so\",  # kmeans1d\n            \"libcoremlpython.so\",\n            \"libmilstoragepython.so\",\n            \"libmodelpackage.so\",\n            \"LICENSE.txt\",\n            \"README.md\",\n        ]\n    },\n    install_requires=[\n        \"numpy >= 1.14.5\",\n        \"protobuf >= 3.1.0\",\n        \"sympy\",\n        \"tqdm\",\n        \"packaging\",\n        \"attrs>=21.3.0\",\n        \"cattrs\",\n        \"pyaml\",\n    ],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Operating System :: POSIX :: Linux\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Software Development\",\n    ],\n    license=\"BSD\",\n)\n"
        }
      ]
    }
  ]
}