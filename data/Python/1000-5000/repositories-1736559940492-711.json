{
  "metadata": {
    "timestamp": 1736559940492,
    "page": 711,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rawpython/remi",
      "stars": 3541,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7744140625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\npackage-lock.json\npackage.json\nnode_modules\n.ipynb_checkpoints/\nvenv/\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n.vscode\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IDE\n.idea\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5302734375,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.1.0\n    hooks:\n    - id: end-of-file-fixer\n    - id: trailing-whitespace\n  - repo: https://github.com/ambv/black\n    rev: 19.10b0\n    hooks:\n      - id: black\n        args: ['--line-length', '127']\n  - repo: https://gitlab.com/pycqa/flake8\n    rev: 3.8.2\n    hooks:\n      - id: flake8\n        args: ['--max-line-length=127', '--ignore=W191,W201,W291,W293,W391,W503,W605,E101,E203,E262,E265,E266,E302,E402,E501,E711,E712,E713,E714,E721,E741,F401,F403,F405,F811,F841']\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6103515625,
          "content": "language: python\ncache: pip\nmatrix:\n  include:\n    - python: 2.7\n      env: TOXENV=py27\n    - python: 3.5\n      env: TOXENV=py35\n    - python: 3.6\n      env: TOXENV=py36\n    - python: 3.7\n      env: TOXENV=py37\n    - python: 3.8\n      env: TOXENV=py38\n    - python: 3.7\n      env: TOXENV=precommit\n    - python: 3.7\n      env: TOXENV=flake8\n  allow_failures:\n    env: TOXENV=precommit\naddons:\n  chrome: stable\n  firefox: latest\nenv:\n  global:\n    - MOZ_HEADLESS=1\ninstall:\n  - pip install tox\n  # install specific webdrivers for selenium\n  - ./test/install_webdrivers\n  - export PATH=\"$HOME/.local/bin:$PATH\"\nscript:\n  - tox\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.04296875,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2014 Davide Rosa\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0712890625,
          "content": "include remi/res/*\ninclude editor/*\ninclude editor/res/*\ninclude LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.9384765625,
          "content": "[![Build Status](https://travis-ci.com/dddomodossola/remi.svg?branch=master)](https://travis-ci.com/dddomodossola/remi)\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/rawpython/remi/master/remi/res/logo.png\" width=\"430\">\n</p>\n\n<h2 align=\"center\" style=\"font-weight:bolder\">\n    GUI library for your Python applications\n</h2>\n\n<p align=\"center\" style=\"white-space:pre\">\nRemi is a GUI library for Python applications that gets rendered in web browsers. \nThis allows you to access your interface locally and remotely.\n</p>\n\n\nProud to be sponsored by\n===\n<p align=\"center\">\n<a href=\"https://www.simracingstudio.com/\" style=\"font-size:25px\" >\n<img src=\"https://static.wixstatic.com/media/092827_44a73f6751144b85af49c280304c9f25~mv2.png/v1/crop/x_0,y_37,w_4349,h_2313/fill/w_155,h_83,al_c,q_85,usm_0.66_1.00_0.01/srs-logo-whitebackground-slogan.webp\" width=\"250\">\n</a>\n<p>\n<p align=\"center\">\n<a href=\"https://github.com/PySimpleGUI\" style=\"font-size:25px;right:0px;\">\n<img src=\"https://raw.githubusercontent.com/PySimpleGUI/PySimpleGUI/master/images/for_readme/Logo%20with%20text%20for%20GitHub%20Top.png\" width=\"200\">\n</a>\n<p>\n\nDo you need support?\n===\n<p align=\"center\">\n<a href=\"https://www.reddit.com/r/RemiGUI\" style=\"font-size:25px\">Reddit - (subreddit RemiGUI)</a>\n</p>\n\n\nThere is also a **drag n drop GUI Editor**. Look at the [Editor](https://github.com/rawpython/remi/tree/master/editor) subfolder to download your copy.\n\n<a href=\"https://vimeo.com/517626422\" style=\"font-size:25px\">A demonstrative video from the great REVVEN labs</a>\n\n<p align=\"center\">\n\n\nGetting Started\n===\nFor a **stable** version:\n```\npip install remi\n```\n\nFor the most updated **experimental** version [Download](https://github.com/rawpython/remi/archive/master.zip) or check out Remi from git and install\n\n```\npython setup.py install\n```\nor install directly using pip\n\n```\npip install git+https://github.com/rawpython/remi.git\n```\n\nThen start the test script (download it from github https://github.com/rawpython/remi/blob/master/examples/widgets_overview_app.py):\n```\npython widgets_overview_app.py\n```\n\n\nRemi\n===\nPlatform independent Python GUI library. In less than 100 Kbytes of source code, perfect for your diet.\n\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/rawpython/remi/development/remi/res/screenshot.png\" title=\"Widgets overview\">\n</p>\n\nRemi enables developers to create platform independent GUI with Python. The entire GUI is rendered in your browser. **No HTML** is required, Remi automatically translates your Python code into HTML. When your app starts, it starts a web server that will be accessible on your network.\n\nA basic application appears like this:\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        container = gui.VBox(width=120, height=100)\n        self.lbl = gui.Label('Hello world!')\n        self.bt = gui.Button('Press me!')\n\n        # setting the listener for the onclick event of the button\n        self.bt.onclick.do(self.on_button_pressed)\n\n        # appending a widget to another, the first argument is a string key\n        container.append(self.lbl)\n        container.append(self.bt)\n\n        # returning the root widget\n        return container\n\n    # listener function\n    def on_button_pressed(self, widget):\n        self.lbl.set_text('Button pressed!')\n        self.bt.set_text('Hi!')\n\n# starts the web server\nstart(MyApp, port=8081)\n```\n\nIn order to see the user interface, open your preferred browser and type \"http://127.0.0.1:8081\".\nYou can change the URL address by specific **kwargs at `start` function call. This will be discussed later.\n\nTested on Android, Linux, Windows.\nUseful on Raspberry Pi for Python script development. It allows interacting with your Raspberry Pi remotely from your mobile device.\n\n\nFAQ\n===\n- **Why another GUI lib?**\nKivy, PyQT, and PyGObject all require native code for the host operating system, which means installing or compiling large dependencies. Remi needs only a web browser to show your GUI.\n\n- **Do I need to know HTML?**\nNO, It is not required, you have to code only in Python.\n\n- **Is it open source?**\nFor sure! Remi is released under the Apache License. See the ``LICENSE`` file for more details.\n\n- **Do I need some kind of web server?**\nNo, it's included.\n\n\nBrief tutorial\n===\nImport Remi library and some other useful stuff.\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n```\n\nSubclass the `App` class and declare a `main` function that will be the entry point of the application. Inside the main function you have to <code>return</code> the root widget.\n\n```py\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        lbl = gui.Label(\"Hello world!\", width=100, height=30)\n\n        # return of the root widget\n        return lbl\n```\n\nOutside the main class, start the application by calling the function `start` and passing the name of the class you declared previously as the parameter:\n\n```py\n# starts the webserver\nstart(MyApp, port=8081)\n```\n\nRun the script. If it's all OK the GUI will be opened automatically in your browser, otherwise, you have to type in the address bar \"http://127.0.0.1:8081\".\n\nYou can customize optional parameters in the `start` call like:\n\n```py\nstart(MyApp, address='127.0.0.1', port=8081, multiple_instance=False, enable_file_cache=True, update_interval=0.1, start_browser=True)\n```\n\nParameters:\n- address: network interface IP\n- port: listen port\n- multiple_instance: boolean, if True multiple clients that connect to your script has different App instances (identified by unique cookie session identifier)\n- enable_file_cache: boolean, if True enable resource caching\n- update_interval: GUI update interval in seconds. If zero, the update happens at each change. If zero, the App.idle method is not called.\n- start_browser: boolean that defines if the browser should be opened automatically at startup\n- standalone: boolean, indicates where to run the application as a standard Desktop application with its own window. If False, the interface is shown in a browser webpage.\n\nAdditional Parameters:\n- username: for a basic HTTP authentication\n- password: for a basic HTTP authentication\n- certfile: SSL certificate filename\n- keyfile: SSL key file\n- ssl_version: authentication version (i.e. ssl.PROTOCOL_TLSv1_2). If None disables SSL encryption\n\nAll widgets constructors accept two standards**kwargs that are:\n- width: can be expressed as int (and is interpreted as a pixel) or as str (and you can specify the measuring unit like '10%')\n- height: can be expressed as int (and is interpreted as a pixel) or as str (and you can specify the measuring unit like '10%')\n\n\nEvents and callbacks\n===\nWidgets expose a set of events that happen during user interaction.\nSuch events are a convenient way to define the application behavior.\nEach widget has its own callbacks, depending on the type of user interaction it allows.\nThe specific callbacks for the widgets will be illustrated later.\n\nIn order to register a function as an event listener you have to call a function like eventname.do (i.e. onclick.do) passing as parameters the callback that will manage the event.\nFollows an example:\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        container = gui.VBox(width=120, height=100)\n        self.lbl = gui.Label('Hello world!')\n        self.bt = gui.Button('Press me!')\n\n        # setting the listener for the onclick event of the button\n        self.bt.onclick.do(self.on_button_pressed)\n\n        # appending a widget to another, the first argument is a string key\n        container.append(self.lbl)\n        container.append(self.bt)\n\n        # returning the root widget\n        return container\n\n    # listener function\n    def on_button_pressed(self, widget):\n        self.lbl.set_text('Button pressed!')\n        self.bt.set_text('Hi!')\n\n# starts the web server\nstart(MyApp)\n```\n\nIn the shown example *self.bt.onclick.do(self.on_button_pressed)* registers the self's *on_button_pressed* function as a listener for the event *onclick* exposed by the Button widget.\nSimple, easy.\n\nListener's callbacks will receive the emitter's instance firstly, then all other parameters provided by the specific event.\n\n\nBesides the standard event registration (as aforementioned), it is possible to pass user parameters to listener functions. This can be achieves appending parameters to the *do* function call.\n\n```py\nimport remi.gui as gui\nfrom remi import start, App\n\nclass MyApp(App):\n    def __init__(self, *args):\n        super(MyApp, self).__init__(*args)\n\n    def main(self):\n        container = gui.VBox(width=120, height=100)\n        self.lbl = gui.Label('Hello world!')\n        self.bt = gui.Button('Hello name!')\n        self.bt2 = gui.Button('Hello name surname!')\n\n        # setting the listener for the onclick event of the buttons\n        self.bt.onclick.do(self.on_button_pressed, \"Name\")\n        self.bt2.onclick.do(self.on_button_pressed, \"Name\", \"Surname\")\n\n        # appending a widget to another\n        container.append(self.lbl)\n        container.append(self.bt)\n        container.append(self.bt2)\n\n        # returning the root widget\n        return container\n\n    # listener function\n    def on_button_pressed(self, widget, name='', surname=''):\n        self.lbl.set_text('Button pressed!')\n        widget.set_text('Hello ' + name + ' ' + surname)\n\n# starts the web server\nstart(MyApp)\n```\n\nThis allows great flexibility, getting different behaviors with the same event listener definition.\n\n\nHTML Attribute accessibility\n===\nSometimes it is required to access Widget's HTML representation in order to manipulate HTML attributes.\nThe library allows accessing this information easily.\n\nA simple example: It is the case where you would like to add a hover text to a widget. This can be achieved by the *title* attribute of an HTML tag.\nIn order to do this:\n\n```py\n    widget_instance.attributes['title'] = 'Your title content'\n```\n\nA special case of HTML attribute is the *style*.\nThe style attributes can be altered in this way:\n\n```py\n    widget_instance.style['color'] = 'red'\n```\n\nThe assignment of a new attribute automatically creates it.\n\nFor a reference list of HTML attributes, you can refer to https://www.w3schools.com/tags/ref_attributes.asp\n\nFor a reference list of style attributes, you can refer to https://www.w3schools.com/cssref/default.asp\n\nTake care about internally used attributes. These are:\n- **class**: It is used to store the Widget class name for styling purpose\n- **id**: It is used to store the instance id of the widget for callback management\n\n\nRemote access\n===\nIf you are using your REMI app remotely, with a DNS and behind a firewall, you can specify special parameters in the `start` call:\n- **port**: HTTP server port. Don't forget to NAT this port on your router;\n\n```py\nstart(MyApp, address='0.0.0.0', port=8081)\n```\n\n\nStandalone Execution\n===\nI suggest using the browser as a standard interface window.\n\nHowever, you can avoid using the browser.\nThis can be simply obtained joining REMI and [PyWebView](https://github.com/r0x0r/pywebview).\nHere is an example about this [standalone_app.py](https://github.com/rawpython/remi/blob/development/examples/standalone_app.py).\n\n**Be aware that PyWebView uses qt, gtk and so on to create the window. An outdated version of these libraries can cause UI problems. If you experience UI issues, update these libraries, or better avoid standalone execution.**\n\n\nAuthentication\n===\nIn order to limit remote access to your interface, you can define a username and password. It consists of a simple authentication process.\nJust define the parameters **username** and **password** in the start call:\n```py\nstart(MyApp, username='myusername', password='mypassword')\n```\n\n\nStyling\n===\nIn order to define a new style for your app, you have to do the following.\nCreate a *res* folder and pass it to your App class constructor:\n```python\nclass MyApp(App):\n    def __init__(self, *args):\n        res_path = os.path.join(os.path.dirname(__file__), 'res')\n        super(MyApp, self).__init__(*args, static_file_path={'res':res_path})\n```\n\nCopy the standard style.css file from the remi folder and paste it inside your *res* folder. Edit it in order to customize.\nThis way the standard *style.css* file gets overridden by the one you created.\n\n\nCompatibility\n===\nRemi is made to be compatible from Python2.7 to Python3.X. Please notify compatibility issues.\n\n\nSecurity\n===\nRemi should be intended as a standard desktop GUI framework.\nThe library itself doesn't implement security strategies, and so it is advised to not expose its access to unsafe public networks.\n\nWhen loading data from external sources, consider protecting the application from potential javascript injection before displaying the content directly.\n\n\nProjects using Remi\n===\n[PySimpleGUI](https://github.com/PySimpleGUI/PySimpleGUI): Launched in 2018 Actively developed and supported. Supports tkinter, Qt, WxPython, Remi (in browser). Create custom layout GUI's simply. Python 2.7 & 3 Support. 100+ Demo programs & Cookbook for rapid start. Extensive documentation.\n\n[App Template For REMI](https://github.com/cheak1974/remi-app-template): A really well written template for multiview applications.\n\n[Web based dynamic reconfigure for ROS robots](https://github.com/awesomebytes/web_dyn_reconf)\n\n[razmq](https://github.com/MrYsLab/razmq)\n\n[Espresso-ARM](http://hallee.github.io/espresso-arm/)\n\n[PiPresents](https://github.com/KenT2/pipresents-gapless)\n\n[The Python Banyan Framework](https://github.com/MrYsLab/python_banyan)\n\n[LightShowPi show manager](https://github.com/Chrispizzi75/ShowManager)\n\n[rElectrum](https://github.com/emanuelelaface/rElectrum): A powerful promising Electrum wallet manager for safe transactions.\n\nOther Implementations\n===\nListed here are other implementations of this library:\n- [**cremi**](https://github.com/cyberpro4/cremi): (WIP) developed for your C++ projects by [Claudio Cannatà](https://github.com/cyberpro4).\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "remi",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.951171875,
          "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport setuptools\nfrom setuptools import setup\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nparams = {\n    'name':\"remi\",\n    'description':\"Python REMote Interface library\",\n    'use_scm_version':{'version_scheme': 'post-release'},\n    'long_description':long_description,\n    'long_description_content_type':\"text/markdown\",\n    'url':\"https://github.com/rawpython/remi\",\n    'download_url':\"https://github.com/rawpython/remi/archive/master.zip\",\n    'keywords':[\"gui-library\", \"remi\", \"platform-independent\", \"ui\", \"gui\"],\n    'author':\"Davide Rosa\",\n    'author_email':\"dddomodossola@gmail.com\",\n    'license':\"Apache\",\n    'packages':setuptools.find_packages(),\n    'include_package_data':True,\n    'setup_requires':['setuptools_scm'],\n}\ntry:\n    setup(**params)\nexcept:\n    del params['setup_requires']\n    params['use_scm_version'] = False\n    params['version'] = '2022.7.27'\n    setup(**params)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.8740234375,
          "content": "[tox]\nproject = remi\n# this should match the travis env list\nenvlist = py27,py35,py36,py37,precommit,flake8\n\n##\n# Default tests (unit tests)\n##\n[testenv]\ndeps =\n    coverage\n    matplotlib\n    Pillow\n    selenium\nwhitelist_externals =\n    chromedriver\ncommands =\n    python -m coverage erase\n    python -m coverage run test/\n    python -m coverage report --include=\"examples/*,test/*\"\n    python -m coverage report --include=\"{toxinidir}/*remi/*,*editor/*\"\n\n##\n# Syntax tests\n##\n[testenv:precommit]\ndescription = Run flake8, black and friends\ndeps =\n    pre-commit\ncommands =\n    pre-commit install -f --install-hooks\n    pre-commit run --all-files\n\n[testenv:flake8]\ndescription = Run essential flake8 test\ndeps =\n    flake8\ncommands =\n    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n"
        }
      ]
    }
  ]
}