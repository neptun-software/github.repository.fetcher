{
  "metadata": {
    "timestamp": 1736559850313,
    "page": 599,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jmcarp/robobrowser",
      "stars": 3704,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1298828125,
          "content": "[report]\nomit =\n    robobrowser/ordereddict.py\n    robobrowser/responses.py\n    */python?.?/*\n    */lib-python/?.?/*.py\n    */pypy/*\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.37109375,
          "content": "*.py[cod]\n.idea/\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Complexity\noutput/*.html\noutput/*/index.html\n\n# Sphinx\ndocs/_build\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3515625,
          "content": "language: python\nsudo: false\n\npython:\n    - \"3.4\"\n    - \"3.3\"\n    - \"2.7\"\n    - \"2.6\"\n    - \"pypy\"\n\ninstall:\n    - python setup.py install\n    - pip install -U -r dev-requirements.txt\n    - pip install coverage coveralls nose responses\n\nbefore_script: flake8 robobrowser\n\nscript: nosetests --with-coverage --cover-package=robobrowser\n\nafter_success: coveralls\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 1.630859375,
          "content": ".. :changelog:\n\nHistory\n-------\n\n0.5.3\n++++++++++++++++++\n* Improve documentation. Thanks tpugsley and rcutmore for improvements!\n* Improve messages in error handling. Thanks again rcutmore!\n* Fix default values for <select> fields. Thanks pohmelie for reporting!\n* Simplify value property of field elements; delete `FieldMeta`.\n* Move retry logic to requests and urllib3.\n\n0.5.2\n++++++++++++++++++\n* Remove requirements parsing from `setup.py`.\n* Don't pin to exact requirements versions. Thanks StuntsPT!\n* Don't install tests along with package. Thanks voyageur!\n* Handle empty select fields. Thanks pratyushmittal!\n* Parse partial document correctly when lxml is installed. Thanks again pratyushmittal!\n* Lint code with flake8.\n\n0.5.0\n++++++++++++++++++\n* Add optional `session` argument to `RoboBrowser::__init__`\n* Add optional `timeout` and `allow_redirects` options to `RoboBrowser::__init__`\n* Allow `RoboBrowser::open`, `RoboBrowser::follow_link`, and `RoboBrowser::submit_form` to accept optional keyword arguments to requests (`timeout`, `verify`, etc.)\n* *Backwards-incompatible*: Remove `auth`, `headers`,  and `verify` arguments `from RoboBrowser::__init__`; session configuration should instead be passed in `session`\n* *Backwards-incompatible*: Restrict `RoboBrowser::follow_link` to `link` argument; text strings and BeautifulSoup arguments no longer accepted\n\n0.4.1\n++++++++++++++++++\n* Handle multi-option fields without \"value\" attributes\n\n0.4.0\n++++++++++++++++++\n* Fix modeling of form fields to handle non-unique field names.\n* Allow selection of submit button if multiple submits are present.\n\n0.1.0\n++++++++++++++++++\n\n* First release on PyPI.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4326171875,
          "content": "Copyright (c) \"\", Joshua Carp\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n* Neither the name of robobrowser nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1220703125,
          "content": "include AUTHORS.rst\ninclude CONTRIBUTING.rst\ninclude HISTORY.rst\ninclude LICENSE\ninclude README.rst\ninclude requirements.txt\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.169921875,
          "content": ".PHONY: clean-pyc clean-build docs\n\nhelp:\n\t@echo \"clean-build - remove build artifacts\"\n\t@echo \"clean-pyc - remove Python file artifacts\"\n\t@echo \"lint - check style with flake8\"\n\t@echo \"test - run tests quickly with the default Python\"\n\t@echo \"testall - run tests on every Python version with tox\"\n\t@echo \"coverage - check code coverage quickly with the default Python\"\n\t@echo \"docs - generate Sphinx HTML documentation, including API docs\"\n\t@echo \"release - package and upload a release\"\n\t@echo \"sdist - package\"\n\nclean: clean-build clean-pyc\n\nclean-build:\n\trm -fr build/\n\trm -fr dist/\n\trm -fr *.egg-info\n\nclean-pyc:\n\tfind . -name '*.pyc' -exec rm -f {} +\n\tfind . -name '*.pyo' -exec rm -f {} +\n\tfind . -name '*~' -exec rm -f {} +\n\nlint:\n\tflake8 robobrowser tests\n\ntest:\n\tpython setup.py test\n\ntest-all:\n\ttox\n\ncoverage:\n\tcoverage run --source robobrowser setup.py test\n\tcoverage report -m\n\tcoverage html\n\topen htmlcov/index.html\n\ndocs:\n\trm -f docs/robobrowser.rst\n\trm -f docs/modules.rst\n\tsphinx-apidoc -o docs/ robobrowser\n\t$(MAKE) -C docs clean\n\t$(MAKE) -C docs html\n\topen docs/_build/html/index.html\n\nrelease: clean\n\tpython setup.py sdist upload\n\nsdist: clean\n\tpython setup.py sdist\n\tls -l dist"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.6357421875,
          "content": "RoboBrowser's caching module is heavily inspired by httpcache, so its license\nis included here:\n\nCopyright 2013 Cory Benfield\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this work except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.87890625,
          "content": "RoboBrowser: Your friendly neighborhood web scraper\n===============================================\n\n.. image:: https://badge.fury.io/py/robobrowser.png\n    :target: http://badge.fury.io/py/robobrowser\n\n.. image:: https://travis-ci.org/jmcarp/robobrowser.png?branch=master\n        :target: https://travis-ci.org/jmcarp/robobrowser\n\n.. image:: https://coveralls.io/repos/jmcarp/robobrowser/badge.png?branch=master\n        :target: https://coveralls.io/r/jmcarp/robobrowser\n\nHomepage: `http://robobrowser.readthedocs.org/ <http://robobrowser.readthedocs.org/>`_\n\nRoboBrowser is a simple, Pythonic library for browsing the web without a standalone web browser. RoboBrowser\ncan fetch a page, click on links and buttons, and fill out and submit forms. If you need to interact with web services\nthat don't have APIs, RoboBrowser can help.\n\n.. code-block:: python\n\n    import re\n    from robobrowser import RoboBrowser\n\n    # Browse to Genius\n    browser = RoboBrowser(history=True)\n    browser.open('http://genius.com/')\n\n    # Search for Porcupine Tree\n    form = browser.get_form(action='/search')\n    form                # <RoboForm q=>\n    form['q'].value = 'porcupine tree'\n    browser.submit_form(form)\n\n    # Look up the first song\n    songs = browser.select('.song_link')\n    browser.follow_link(songs[0])\n    lyrics = browser.select('.lyrics')\n    lyrics[0].text      # \\nHear the sound of music ...\n\n    # Back to results page\n    browser.back()\n\n    # Look up my favorite song\n    song_link = browser.get_link('trains')\n    browser.follow_link(song_link)\n\n    # Can also search HTML using regex patterns\n    lyrics = browser.find(class_=re.compile(r'\\blyrics\\b'))\n    lyrics.text         # \\nTrain set and match spied under the blind...\n\nRoboBrowser combines the best of two excellent Python libraries:\n`Requests <http://docs.python-requests.org/en/latest/>`_ and\n`BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/>`_.\nRoboBrowser represents browser sessions using Requests and HTML responses\nusing BeautifulSoup, transparently exposing methods of both libraries:\n\n.. code-block:: python\n\n    import re\n    from robobrowser import RoboBrowser\n\n    browser = RoboBrowser(user_agent='a python robot')\n    browser.open('https://github.com/')\n\n    # Inspect the browser session\n    browser.session.cookies['_gh_sess']         # BAh7Bzo...\n    browser.session.headers['User-Agent']       # a python robot\n\n    # Search the parsed HTML\n    browser.select('div.teaser-icon')       # [<div class=\"teaser-icon\">\n                                            # <span class=\"mega-octicon octicon-checklist\"></span>\n                                            # </div>,\n                                            # ...\n    browser.find(class_=re.compile(r'column', re.I))    # <div class=\"one-third column\">\n                                                        # <div class=\"teaser-icon\">\n                                                        # <span class=\"mega-octicon octicon-checklist\"></span>\n                                                        # ...\n\nYou can also pass a custom `Session` instance for lower-level configuration:\n\n.. code-block:: python\n\n    from requests import Session\n    from robobrowser import RoboBrowser\n\n    session = Session()\n    session.verify = False  # Skip SSL verification\n    session.proxies = {'http': 'http://custom.proxy.com/'}  # Set default proxies\n    browser = RoboBrowser(session=session)\n\nRoboBrowser also includes tools for working with forms, inspired by\n`WebTest <https://github.com/Pylons/webtest>`_ and `Mechanize <http://wwwsearch.sourceforge.net/mechanize/>`_.\n\n.. code-block:: python\n\n    from robobrowser import RoboBrowser\n\n    browser = RoboBrowser()\n    browser.open('http://twitter.com')\n\n    # Get the signup form\n    signup_form = browser.get_form(class_='signup')\n    signup_form         # <RoboForm user[name]=, user[email]=, ...\n\n    # Inspect its values\n    signup_form['authenticity_token'].value     # 6d03597 ...\n\n    # Fill it out\n    signup_form['user[name]'].value = 'python-robot'\n    signup_form['user[user_password]'].value = 'secret'\n\n    # Submit the form\n    browser.submit_form(signup_form)\n\nCheckboxes:\n\n.. code-block:: python\n\n    from robobrowser import RoboBrowser\n\n    # Browse to a page with checkbox inputs\n    browser = RoboBrowser()\n    browser.open('http://www.w3schools.com/html/html_forms.asp')\n\n    # Find the form\n    form = browser.get_forms()[3]\n    form                            # <RoboForm vehicle=[]>\n    form['vehicle']                 # <robobrowser.forms.fields.Checkbox...>\n\n    # Checked values can be get and set like lists\n    form['vehicle'].options         # [u'Bike', u'Car']\n    form['vehicle'].value           # []\n    form['vehicle'].value = ['Bike']\n    form['vehicle'].value = ['Bike', 'Car']\n\n    # Values can also be set using input labels\n    form['vehicle'].labels          # [u'I have a bike', u'I have a car \\r\\n']\n    form['vehicle'].value = ['I have a bike']\n    form['vehicle'].value           # [u'Bike']\n\n    # Only values that correspond to checkbox values or labels can be set;\n    # this will raise a `ValueError`\n    form['vehicle'].value = ['Hot Dogs']\n\nUploading files:\n\n.. code-block:: python\n\n    from robobrowser import RoboBrowser\n\n    # Browse to a page with an upload form\n    browser = RoboBrowser()\n    browser.open('http://cgi-lib.berkeley.edu/ex/fup.html')\n\n    # Find the form\n    upload_form = browser.get_form()\n    upload_form                     # <RoboForm upfile=, note=>\n\n    # Choose a file to upload\n    upload_form['upfile']           # <robobrowser.forms.fields.FileInput...>\n    upload_form['upfile'].value = open('path/to/file.txt', 'r')\n\n    # Submit\n    browser.submit(upload_form)\n\nBy default, creating a browser instantiates a new requests `Session`. \n\nRequirements\n------------\n\n- Python >= 2.6 or >= 3.3\n\nLicense\n-------\n\nMIT licensed. See the bundled `LICENSE <https://github.com/jmcarp/robobrowser/blob/master/LICENSE>`_ file for more details.\n\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.0546875,
          "content": "coverage\ncoveralls\ndocutils\nflake8\nmock\nnose\nsphinx\ntox\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "robobrowser",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1162109375,
          "content": "[flake8]\nignore = E127,E128,E265,E302,N803,N804,N806,E731,E402\nexclude = compat.py,ordereddict.py\nmax-line-length = 90\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.9375,
          "content": "# -*- coding: utf-8 -*-\n\nimport os\nimport re\nimport sys\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\n\nREQUIREMENTS = [\n    'beautifulsoup4>=4.3.2',\n    'requests>=2.6.0',\n    'six>=1.9.0',\n    'Werkzeug>=0.10.4',\n]\nTEST_REQUIREMENTS = [\n    'coverage',\n    'coveralls',\n    'docutils',\n    'mock',\n    'nose',\n    'sphinx',\n    'tox',\n]\n\n\nif sys.argv[-1] == 'publish':\n    os.system('python setup.py sdist upload')\n    sys.exit()\n\n\ndef find_version(fname):\n    \"\"\"Attempts to find the version number in the file names fname.\n    Raises RuntimeError if not found.\n    \"\"\"\n    version = ''\n    with open(fname, 'r') as fp:\n        reg = re.compile(r'__version__ = [\\'\"]([^\\'\"]*)[\\'\"]')\n        for line in fp:\n            m = reg.match(line)\n            if m:\n                version = m.group(1)\n                break\n    if not version:\n        raise RuntimeError('Cannot find version information')\n    return version\n\n\nsetup(\n    name='robobrowser',\n    version=find_version('robobrowser/__init__.py'),\n    description='Your friendly neighborhood web scraper',\n    author='Joshua Carp',\n    author_email='jm.carp@gmail.com',\n    url='https://github.com/jmcarp/robobrowser',\n    packages=find_packages(exclude=('tests',)),\n    package_dir={'robobrowser': 'robobrowser'},\n    include_package_data=True,\n    install_requires=REQUIREMENTS,\n    tests_require=TEST_REQUIREMENTS,\n    license='MIT',\n    zip_safe=False,\n    keywords='robobrowser',\n    classifiers=[\n        'Development Status :: 2 - Pre-Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Natural Language :: English',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.6',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n    ],\n    test_suite='tests',\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.126953125,
          "content": "[tox]\nenvlist = py26,py27,py33,py34,pypy\n\n[testenv]\ndeps = \n    -rdev-requirements.txt\ncommands = \n    {envpython} setup.py test\n\n"
        }
      ]
    }
  ]
}