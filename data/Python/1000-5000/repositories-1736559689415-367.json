{
  "metadata": {
    "timestamp": 1736559689415,
    "page": 367,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scrapinghub/splash",
      "stars": 4114,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.099609375,
          "content": "[run]\nbranch = true\ninclude = splash/*\nomit =\n  splash/tests/*\n  splash/vendor/*\n  splash/conftest.py\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.302734375,
          "content": "build/\ndist/\ndev/\n.ipynb_checkpoints/\ndebian/\nscripts/\nbenchmark/\nnotebooks/\nsplash.egg-info/\ndocs/\nexamples/\n*.pyc\n__pycache__\n.idea\nsplash/vendor/harviewer/build-tools\nsplash/vendor/harviewer/releases\nsplash/vendor/harviewer/selenium\nsplash/vendor/harviewer/wordpress\nsplash/vendor/harviewer/requirejs\n.git/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# distutils/setuptools files\nbuild\ndist\nsplash.egg-info\ndocs/_build\n\n# temp files & IDE settings\n_trial_temp\n*.pyc\n.idea\n.ipynb_checkpoints\n.splash-cache*\n.coverage\nenv*\n.cache/\nhtmlcov/\n\n# IPython notebooks\n/notebooks/\n\n# Dev files\n/dev/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.119140625,
          "content": "[submodule \"splash/vendor/harviewer\"]\n\tpath = splash/vendor/harviewer\n\turl = https://github.com/janodvarko/harviewer.git\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3564453125,
          "content": "dist: trusty\nsudo: required\nservices:\n  - docker\n\nbranches:\n    only:\n        - master\n        - /^\\d\\.\\d+$/\n\nbefore_install:\n    - docker build -t splash .\n    - docker build -t splash-tests -f dockerfiles/tests/Dockerfile .\n\nscript:\n    - docker run `bash <(curl -s https://codecov.io/env)` -it splash-tests\n\n#cache:\n#    directories:\n#        - $HOME/.cache/pip\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 28.779296875,
          "content": "Changes\n=======\n\n3.5 (2020-06-16)\n----------------\n\n* Upgraded some dependencies, fixing some crashes:\n  * qtwebkit 5.212.0-alpha-4\n  * Qt 5.14.1\n  * PyQt 5.14.2\n  * PyQtWebEngine 5.14.0\n  * SIP 4.19.22\n* It is now possible to build Splash with a custom qtwebkit binary or build\n* Improved the error message about out-of-range viewports\n* Enabled logs on Jupyter Notebook\n* Fixed a few typos in the documentation\n* Fixed Qt installation on Docker after upstream changes to the installer\n\n\n3.4.1 (2020-01-09)\n------------------\n\nHTTP2 support is now disabled by default when using the default Splash engine,\nWebKit. We discovered that it does not work properly on some websites, which\nresults in ``network399`` errors or incorrect rendering (if those\n``network399`` errors happen for HTML resources such as style of script files).\n\nIt can be enabled with the :ref:`http2 <arg-http2>` argument, and with\n:ref:`request:set_http2_enabled <splash-request-set-http2-enabled>` or\n:ref:`splash-http2-enabled` in Lua scripts.\n\n\n3.4 (2019-10-25)\n----------------\n\nIn this release qtwebkit is updated to a more recent version.\nIt is still the same rendering engine, but with some bugs fixed\n(e.g. handling of redirects where ``#`` is present),\nand with HTTP2 support enabled.\n\nIn addition to webkit, Splash 3.4 got an experimental\nChromium support (v73.0.3683.105); it can be enabled per-request using\n:ref:`engine <arg-engine>` argument of render.html, render.png and render.jpeg\nendpoints: ``engine=chromium``. It is in pre-alpha stage, and not suggested\nto use in production: many (most) features don't work, there are known bugs.\n\nMain new features:\n\n* Splash now supports HTTP2, and it's enabled by default. It can be\n  disabled with :ref:`http2 <arg-http2>` argument, and with\n  :ref:`request:set_http2_enabled <splash-request-set-http2-enabled>`\n  or :ref:`splash-http2-enabled` in Lua scripts.\n* new ``--dont-log-args`` startup option allows to replace certain\n  argument values with ``\"***\"`` in logs. Use it for sensitive data or for\n  arguments with long values which you don't want in logs, e.g.\n  ``--dont-log-args=lua_source,mypassword``. Note that sensitive data\n  may still appear in logs, e.g. if you pass it\n  via GET parameters instead of POST.\n\nOther improvements and bug fixes:\n\n* ``--browser-engines`` startup option allows to disable browser\n  engines globally;\n* Max allowed viewport size is increased.\n* For requests which are cancelled (e.g. because client closed a connection)\n  GlobalTimeoutError error no longer appears in logs; it is CancelledError\n  now instead.\n* In case of timeouts, error dict returned to the user now contains\n  \"remaining\" field with the time remaining, in seconds.\n  It should be negative in most cases (no time remaining => timeout happens).\n  Requests are cancelled not at exact timeout time, there is a small\n  difference, and \"remaining\" field gives a visibility into that.\n* Better log messages on segfaults (faulthandler is enabled).\n* More robust handling of internal errors in the API.\n* DelayedCall objects are now tracked.\n* Fixed incorrect exception when error happens in ``splash:autoload()`` script.\n* Dockerfile is rewritten to use multi-stage builds; ``provision.sh``\n  script is split into several smaller scripts. This makes development easier,\n  e.g. large downloads (qt, etc.) are now cached.\n* Testing improvements.\n\nDependency updates:\n\n* qtwebkit is updated to 5.212/1570542016 snapshot.\n* Qt is updated to 5.13.1; PyQt is updated to  5.13.1.\n* Ubuntu 18.04 is used as the base docker image.\n* Splash now uses Python 3.6.\n* Twisted is updated to 19.7.0.\n\n3.3.1 (2019-02-21)\n------------------\n\n* Fix a crash in :ref:`splash-wait-for-resume` - Splash used to crash when\n  ``resume()`` or ``error()`` are called more than once, e.g. by delayed JS\n  code;\n* new FAQ section about debugging Splash crashes.\n\n3.3 (2019-02-06)\n----------------\n\nBackwards incompatible:\n\n* ``--manhole`` support is dropped for now: it was untested and\n  not really documented, and it stopped working after software upgrades;\n* default ``--slots`` value is now 20 instead of 50\n  (which is still too high for most practical tasks).\n\nNew features:\n\n* :ref:`splash-on-navigation-locked` allows to register a function to\n  be called before a request is discarded when navigation is locked.\n* new ``--disable-browser-caches`` command-line option allows to disable\n  browser caching. See :ref:`why-css-images` for an use case.\n* :ref:`request_body <arg-request-body>` and :ref:`splash-request-body-enabled`\n  allow to enable request bodies in HAR output and :ref:`splash-on-response`\n  callbacks.\n\nBug fixes:\n\n* fixed crash on pages which call ``window.prompt``, prompts are discarded now;\n* fixed ``response.request.method`` and ``response.request.url`` in\n  :ref:`splash-on-response` callbacks;\n* fixed an edge case with logging causing an exception;\n* proper log level is used for \"image is trimmed vertically\" message.\n\nOther improvements:\n\n* qt5reactor is upgraded to 0.5 - this should slightly reduce idle CPU usage;\n* Twisted is upgraded from 16.1.0 to 18.9.0;\n* PyQt5 is upgraded from 5.9 to 5.9.2;\n* Pillow is upgraded to 5.4.1 - as a side effect, taking large JPEG screenshots\n  should use slightly less RAM;\n* a workaround for JPEG + transparency on a web page is removed, as it seems\n  to do nothing;\n* Splash-Jupyter is updated to latest jupyter (ipykernel==5.1.0,\n  notebook==5.7.4);\n* testing improvements;\n* typo fixes and documentation improvements.\n\n3.2 (2018-02-15)\n----------------\n\nHTML5 media (e.g. ``<video>`` tags playback) is disabled by default in this\nrelease, because it was a source of some of Splash crashes. This is\n**backwards incompatible**, as it can affect rendering. If you need old\nbehavior (it was working on sites you're crawling), use either\n:ref:`html5_media=1 <arg-html5-media>` HTTP API argument\nor :ref:`splash-html5-media-enabled` attribute to re-enable HTML5 media.\n\nOther changes:\n\n* :ref:`html5_media <arg-html5-media>` HTTP API argument and\n  :ref:`splash-html5-media-enabled` attribute allow to enable/disable HTML5\n  media;\n* :ref:`splash-webgl-enabled` attribute allows to enable/disable WebGL;\n* :ref:`splash-media-source-enabled` attribute allows to enable/disable\n  Media Source Extension API;\n* ``--xvbf_screen_size`` Splash startup argument allows to customize\n  xvfb screen size (it could be helpful sometimes to have it matching with\n  a viewport size you're using in a crawl);\n* documentation and test improvements.\n\n3.1 (2018-01-31)\n----------------\n\n* IndexedDB can be enabled by setting :ref:`splash-indexeddb-enabled`\n  attribute to ``true`` in a Lua script;\n* Bengali and Assamese fonts are added to the default Docker image;\n* :ref:`splash-runjs` and :ref:`splash-autoload` are fixed for scripts\n  which end with a line comment (``//``);\n* ``--ip`` startup argument allows to set an IP address Splash listens on;\n* Documentation and testing improvements.\n\n3.0 (2017-07-06)\n----------------\n\nWebKit is upgraded in this Splash release - Splash now uses\nhttps://github.com/annulen/webkit instead of official (deprecated\nand unsupported) QtWebKit. Splash rendering engine\nis now similar to Safari from mid-2016. It fixes a lot of problems\nwith compatibility, speed and quality of rendering.\n\nBackwards incompatible changes:\n\n* there are rendering changes, as WebKit is upgraded;\n* :ref:`wait <arg-wait>` argument for render.??? endpoints\n  no longer increases :ref:`timeout <arg-timeout>` automatically.\n  If you increase ``timeout`` by ``wait`` value requests to render.???\n  endpoints will work as before. Also, 30s limit (10s prior to Splash 2.3.3)\n  for wait argument is removed - you can set any ``wait`` value, as soon\n  as it is smaller than ``timeout``.\n* Python 2 support is removed. You can still use Python 2 to make requests\n  to Splash, but Splash server itself now runs on Python 3.4+.\n* :ref:`splash-element-mouse-click` and :ref:`splash-element-mouse-hover`\n  now click/hover element center by default, not element top-left corner.\n  Also, they scroll to the element being clicked/hovered if needed, to\n  make it work when an element is outside the current viewport. These methods\n  are now async; they wait for events to propagate\n  (unlike :ref:`splash-mouse-click` and :ref:`splash-mouse-hover`).\n\nNew features:\n\n* An alternative way to access :ref:`splash-args`: it can be received\n  as a second argument of ``main`` function\n  (i.e. ``function main(splash, args) ...``);\n* new :ref:`run` endpoint is an alternative to :ref:`execute` endpoint; it is\n  almost the same, but it doesn't require putting code into\n  ``function main(splash, args) ... end``;\n* new :ref:`splash-scroll-position` attribute allows to get and set\n  window scroll position;\n* Qt is upgraded to 5.9.1, PyQt is upgraded to 5.9;\n* official Docker image now uses Ubuntu 16.04.\n\nOther changes and bug fixes:\n\n* default :ref:`timeout <arg-timeout>` **limit** (i.e. max allowed value)\n  is increased from 60s to 90s; default ``timeout`` **value**\n  is still 30s.\n* Lua sandbox: instruction count limit is increased further\n  (10M instructions instead of 5M)\n* new docs section: :ref:`splash-lua-api-overview`;\n* new FAQ entries: :ref:`using-http-api`, :ref:`rendering-problems`;\n* Fixed an issue with :ref:`splash-runjs`: previously in case of an error\n  it returned a table with error information. This approach didn't play well\n  with Lua ``assert``, so now a string with an error message is returned\n  instead. It was always documented that a string is returned by splash:runjs\n  as a second value when error happens.\n* Fixed :ref:`splash-element-png` and :ref:`splash-element-jpeg` for elements\n  outside curent viewport;\n* DOM attributes and methods are documented as accessible on\n  elements directly, without ``.node`` - i.e.\n  ``splash:select('.my-element'):getAttribute('foo')`` instead of\n  ``splash:select('.my-element').node:getAttribute('foo')``;\n* exposed ``element:scrollIntoViewIfNeeded()`` method;\n* improved validation of ``headers`` arguments in :ref:`splash-go`,\n  :ref:`splash-set-custom-headers`, :ref:`splash-http-get` and\n  :ref:`splash-http-post`;\n* Splash shouldn't crash if an exception happens while creating a request\n  in network manager;\n* cleanup of JS event handlers is improved;\n* documentation and testing improvements.\n\n\n2.3.3 (2017-06-07)\n------------------\n\n* WebGL support in default Docker image;\n* Maximum value for ``wait`` argument in render.??? endpoints\n  is increased from 10 seconds to 30 seconds;\n* Lua sandbox limits (RAM and CPU) are raised;\n* documentation and testing improvements.\n\n2.3.2 (2017-03-03)\n------------------\n\n* security fix: Xvfb shouldn't listen to tcp.\n\n2.3.1 (2017-01-24)\n------------------\n\n* Fixed proxy authentication for proxies set using :ref:`'proxy' <arg-proxy>`\n  HTTP argument;\n* minor documentation fixes.\n\n2.3 (2016-12-01)\n----------------\n\nThis release adds lots of scraping helpers to Splash: CSS selectors,\nform filling, easy access to HTML node attributes. Scraping helpers were\nimplemented by Michael Manukyan as a Google Summer of Code 2016 project.\n\nNew features:\n\n* :ref:`splash-select` and :ref:`splash-select-all` methods which allow\n  to execute CSS selectors;\n* new :ref:`Element <splash-element>` object which wraps JavaScript DOM\n  node and allows to interact with it.\n\n\n2.2.2 (2016-11-10)\n------------------\n\nThis is a bug fix release:\n\n* Splash-Jupyter is fixed;\n* fix an issue with non-ascii HTTP status messages;\n* upgrade Pillow to 3.4.2.\n\n\n2.2.1 (2016-10-17)\n------------------\n\nThis is a bug fix release:\n\n* fix Splash UI in Chrome when serving from localhost;\n* upgrade adblockparser to 0.7 to support recent easylist filters;\n* upgrade Pillow to 3.3.3.\n\n2.2 (2016-09-10)\n----------------\n\nNew features:\n\n* new :ref:`splash-send-keys` and :ref:`splash-send-text` methods allow to\n  send native keyboard events to browser;\n* new :ref:`splash-with-timeout` method allows to limit execution time of\n  blocks of code;\n* new :ref:`splash-plugins-enabled` attribute which allows to enable Flash;\n  Flash is now available in Docker image, but it is still disabled by default.\n* new :ref:`splash-response-body-enabled` attribute,\n  :ref:`splash-request-enable-response-body` method and\n  :ref:`response_body <arg-response-body>` argument allows to access\n  and export response bodies.\n\nBug fixes:\n\n* fixed handling of :ref:`splash-call-later`, :ref:`splash-on-request`,\n  :ref:`splash-on-response` and :ref:`splash-on-response-headers`\n  callback arguments;\n* fixed cleanup of various callbacks;\n* fixed :ref:`save_args <arg-save-args>` in Python 2.x;\n\nOther changes:\n\n* internal cleanup of Lua <-> Python interaction;\n* Pillow library is updated in Docker image;\n* HarViewer is upgraded to a recent version.\n\n2.1 (2016-04-20)\n----------------\n\nNew features:\n\n* 'region' argument for :ref:`splash-png` and :ref:`splash-jpeg` methods\n  allow to take screenshots of parts of pages;\n* :ref:`save_args <arg-save-args>` and :ref:`load_args <arg-load-args>`\n  parameters allow to save network traffic by caching large request arguments\n  inside Splash server;\n* new :ref:`splash-mouse-click`, :ref:`splash-mouse-press`,\n  :ref:`splash-mouse-release` and :ref:`splash-mouse-hover` methods for sending\n  mouse events to web pages.\n\nBug fixes:\n\n* User-Agent is set correctly for requests with baseurl;\n* \"download\" links in Splash UI are fixed;\n* an issue with ad blockers preventing Splash UI to work is fixed.\n\n2.0.3 (2016-03-04)\n------------------\n\nThis is a bugfix release:\n\n* Splash Notebook is fixed to work with recent ipykernel versions;\n* segfaults in adblock middleware are fixed;\n* adblock parsing issues are fixed by upgrading adblockparser to v0.5;\n* fixed handling of adblock rules with 'domain' option: domain is now\n  extracted from the page URL, not necessarily from 'url' Splash argument.\n\n2.0.2 (2016-02-26)\n------------------\n\nThis is a bugfix release:\n\n* an issue which may cause segfaults is fixed.\n\n2.0.1 (2016-02-25)\n------------------\n\nThis is a bugfix release:\n\n* XSS in HTTP UI is fixed;\n* Splash-Jupyter docker image is fixed.\n\n2.0 (2016-02-21)\n----------------\n\nSplash 2.0 uses Qt 5.5.1 instead of Qt 4; it means the rendering\nengine now supports more HTML5 features and is more modern overall.\nAlso, the official Docker image now uses Python 3 instead of Python 2.\nThis work is largely done by Tarashish Mishra as a Google Summer of Code 2015\nproject.\n\nSplash 2.0 release introduces other cool new features:\n\n* many Splash HTTP UI improvements;\n* better support for :ref:`binary data <binary-data>`;\n* built-in :ref:`lib-json` and :ref:`lib-base64` libraries;\n* more :ref:`control <lib-treat>` for result serialization\n  (support for JSON arrays and raw bytes);\n* it is now possible to turn Private mode OFF at startup using command-line\n  option or at runtime using :ref:`splash-private-mode-enabled` attribute;\n* :ref:`http-ping` endpoint is added;\n* cookie handling is fixed;\n* downloader efficiency is improved;\n* request processing is stopped when client disconnects;\n* logging inside callbacks now uses proper verbosity;\n* sandbox memory limit for user objects is increased to 50MB;\n* some sandboxing issues are fixed;\n* :ref:`splash-evaljs` and :ref:`splash-jsfunc` results are sanitized better;\n* it is possible to pass arguments when starting Splash-Jupyter - it means\n  now you can get a browser window for splash-jupyter when it is executed\n  from docker;\n* proxy authentication is fixed;\n* logging improvements: logs now contain request arguments in JSON format;\n  errors are logged;\n\nThere are **backwards-incompatible** changes\nto :ref:`Splash Scripting <scripting-tutorial>`: previously, different\nSplash methods were returning/receiving inconsistent\nresponse and request objects. For example, :ref:`splash-http-get` response was\nnot in the same format as ``response`` received by :ref:`splash-on-response`\ncallbacks. Splash 2.0 uses :ref:`Request <splash-request>` and\n:ref:`Response <splash-response>` objects consistently.\nUnfortunately this requires changes to existing user scripts:\n\n* replace ``resp = splash:http_get(...)`` and ``resp = splash:http_post(...)``\n  with ``resp = splash:http_get(...).info`` and\n  ``resp = splash:http_post(...).info``. Client code also may need to be\n  changed: the default encoding of ``info['content']['text']`` is now base64.\n  If you used ``resp.content.text`` consider switching to\n  :ref:`splash-response-body`.\n\n* ``response`` object received by :ref:`splash-on-response-headers` and\n  :ref:`splash-on-response` callbacks is changed: instead of\n  ``response.request`` write ``response.request.info``.\n\nSerialization of JS objects in :ref:`splash-jsfunc`, :ref:`splash-evaljs`\nand :ref:`splash-wait-for-resume` **is changed**: circular objects are\nno longer returned, Splash doesn't try to serialize DOM elements, and error\nmessages are changed.\n\nSplash **no longer supports** QT-based disk cache; it was disable by default\nand it usage was discouraged since Splash 1.0, in Splash 2.0 ``--cache``\ncommand-line option is removed. For HTTP cache there are better options like\n`Squid <http://www.squid-cache.org/>`_.\n\nAnother **backwards-incompatible** change is that Splash-as-a-proxy feature\nis removed. Please use regular HTTP API instead of this proxy interface.\nOf course, Splash will still support using proxies to make requests,\nthese are two different features.\n\n\n1.8 (2015-09-29)\n----------------\n\nNew features:\n\n* POST requests support: :ref:`http_method <arg-http-method>` and\n  :ref:`body <arg-body>` arguments for render endpoints;\n  new :ref:`splash-go` arguments: ``body``, ``http_method`` and ``formdata``;\n  new :ref:`splash-http-post` method.\n* Errors are now returned in JSON format; error mesages became more detailed;\n  Splash UI now displays detailed error information.\n* new :ref:`splash-call-later` method which allows to schedule tasks in future;\n* new :ref:`splash-on-response` method allows to register a callback to be\n  executed after each response;\n* proxy can now be set directly, without using proxy profiles - there is a new\n  :ref:`proxy <arg-proxy>` argument for render endpoints;\n* more detailed :ref:`splash-go` errors: a new \"render_error\" error type can\n  be reported;\n* new :ref:`splash-set-result-status-code` method;\n* new :ref:`splash-resource-timeout` attribute as a shortcut for\n  ``request:set_timeout`` in :ref:`splash-on-request`;\n* new :ref:`splash-get-version` method;\n* new :ref:`splash-autoload-reset`, :ref:`splash-on-response-reset`,\n  :ref:`splash-on-request-reset`, :ref:`splash-on-response-headers-reset`,\n  :ref:`splash-har-reset` methods and a new ``reset=true`` argument for\n  :ref:`splash-har`. They are most useful with Splash-Jupyter.\n\nBug fixes and improvements:\n\n* fixed an issue: proxies were not applied for POST requests;\n* improved argument validation for various methods;\n* more detailed logs;\n* it is now possible to load a combatibility shim for window.localStorage;\n* code coverage integration;\n* improved Splash-Jupyter tests;\n* Splash-Jupyter is upgraded to Jupyter 4.0.\n\n1.7 (2015-08-06)\n----------------\n\nNew features:\n\n* :ref:`render.jpeg` endpoint and :ref:`splash-jpeg` function allow to take\n  screenshots in JPEG format;\n* :ref:`splash-on-response-headers` Lua function and\n  :ref:`allowed_content_types <arg-allowed-content-types>` /\n  :ref:`forbidden_content_types <arg-forbidden-content-types>` HTTP arguments\n  allow to discard responses earlier based on their headers;\n* :ref:`splash-images-enabled` attribute to enable/disable images from\n  Lua scripts;\n* :ref:`splash-js-enabled` attribute to enable/disable JS processing from\n  Lua scripts;\n* :ref:`splash-set-result-header` method for setting custom HTTP headers\n  returned to Splash clients;\n* :ref:`resource_timeout <arg-resource-timeout>` argument for setting network\n  request timeouts in render endpoints;\n* ``request:set_timeout(timeout)`` method (ses :ref:`splash-on-request`)\n  for setting request timeouts from Lua scripts;\n* SOCKS5 proxy support: new 'type' argument\n  in :ref:`proxy profile <proxy profiles>` config files\n  and ``request:set_proxy`` method (ses :ref:`splash-on-request`)\n* enabled HTTPS proxying;\n\nOther changes:\n\n* HTTP error detection is improved;\n* MS fonts are added to the Docker image for better rendering quality;\n* Chinese fonts are added to the Docker image to enable rendering of Chinese\n  websites;\n* validation of ``timeout`` and ``wait`` arguments is improved;\n* documentation: grammar is fixed in the tutorial;\n* assorted documentation improvements and code cleanups;\n* ``splash:set_images_enabled`` method is deprecated.\n\n\n1.6 (2015-05-15)\n----------------\n\nThe main new feature in Splash 1.6 is :ref:`splash-on-request` function\nwhich allows to process individual outgoing requests: log, abort,\nchange them.\n\nOther improvements:\n\n* a new :ref:`http-gc` endpoint which allows to clear QWebKit caches;\n* Docker images are updated with more recent package versions;\n* HTTP arguments validation is improved;\n* serving Splash UI under HTTPS is fixed.\n* documentation improvements and typo fixes.\n\n\n1.5 (2015-03-03)\n----------------\n\nIn this release we introduce :ref:`Splash-Jupyter <splash-jupyter>` - a\nweb-based IDE for Splash Lua scripts with syntax highlighting, autocompletion\nand a connected live browser window. It is implemented as a kernel for\nJupyter (IPython).\n\nDocker images for Splash 1.5 are optimized - download size is much smaller\nthan in previous releases.\n\nOther changes:\n\n* :ref:`splash:go() <splash-go>` returned incorrect result after an\n  unsuccessful splash:go() call - this is fixed;\n* Lua ``main`` function can now return multiple results;\n* there are testing improvements and internal cleanups.\n\n\n1.4 (2015-02-10)\n----------------\n\nThis release provides faster and more robust screenshot rendering,\nmany improvements in Splash scripting engine and other improvements\nlike better cookie handling.\n\nFrom version 1.4 Splash requires Pillow (built with PNG support) to work.\n\nThere are backwards-incompatible changes in Splash scripts:\n\n* splash:set_viewport() is split into\n  :ref:`splash:set_viewport_size() <splash-set-viewport-size>`\n  and :ref:`splash:set_viewport_full() <splash-set-viewport-full>`;\n* old splash:runjs() method is renamed to :ref:`splash:evaljs() <splash-evaljs>`;\n* new :ref:`splash:runjs <splash-runjs>` method just runs JavaScript code\n  without returning the result of the last JS statement.\n\nTo upgrade check all splash:runjs() usages: if the returned result is used\nthen replace splash:runjs() with splash:evaljs().\n\n``viewport=full`` argument is deprecated; use ``render_all=1``.\n\nNew scripting features:\n\n* it is now possible to write custom Lua plugins stored server-side;\n* a restricted version of Lua ``require`` is enabled in sandbox;\n* :ref:`splash:autoload() <splash-autoload>` method for setting JS to load\n  on each request;\n* :ref:`splash:wait_for_resume() <splash-wait-for-resume>` method for\n  interacting with async JS code;\n* :ref:`splash:lock_navigation() <splash-lock-navigation>` and\n  :ref:`splash:unlock_navigation() <splash-unlock-navigation>` methods;\n* splash:set_viewport() is split into\n  :ref:`splash:set_viewport_size() <splash-set-viewport-size>`\n  and :ref:`splash:set_viewport_full() <splash-set-viewport-full>`;\n* :ref:`splash:get_viewport_size() <splash-get-viewport-size>` method;\n* :ref:`splash:http_get() <splash-http-get>` method for sending HTTP GET\n  requests without loading result to the browser;\n* :ref:`splash:set_content() <splash-set-content>` method for setting\n  page content from a string;\n* :ref:`splash:get_cookies() <splash-get-cookies>`,\n  :ref:`splash:add_cookie() <splash-add-cookie>`,\n  :ref:`splash:clear_cookies() <splash-clear-cookies>`,\n  :ref:`splash:delete_cookies() <splash-delete-cookies>` and\n  :ref:`splash:init_cookies() <splash-init-cookies>` methods for working\n  with cookies;\n* :ref:`splash:set_user_agent() <splash-set-user-agent>` method for\n  setting User-Agent header;\n* :ref:`splash:set_custom_headers() <splash-set-custom-headers>` method for\n  setting other HTTP headers;\n* :ref:`splash:url() <splash-url>` method for getting current URL;\n* :ref:`splash:go() <splash-go>` now accepts ``headers`` argument;\n* :ref:`splash:evaljs() <splash-evaljs>` method, which is a\n  splash:runjs() from Splash v1.3.1 with improved error handling\n  (it raises an error in case of JavaScript exceptions);\n* :ref:`splash:runjs() <splash-runjs>` method no longer returns the result\n  of last computation;\n* :ref:`splash:runjs() <splash-runjs>` method handles JavaScript errors\n  by returning ``ok, error`` pair;\n* :ref:`splash:get_perf_stats() <splash-get-perf-stats>` method for\n  getting Splash resource usage.\n\nOther improvements:\n\n* --max-timeout option can be passed to Splash at startup to increase or\n  decrease maximum allowed timeout value;\n* cookies are no longer shared between requests;\n* PNG rendering becomes more efficient: less CPU is spent on compression.\n  The downside is that the returned PNG images become 10-15% larger;\n* there is an option (``scale_method=vector``) to resize images\n  while painting to avoid pixel-based resize step - it can make taking\n  a screenshot much faster on image-light webpages (up to several times faster);\n* when 'height' is set and image is downscaled the rendering is more efficient\n  because Splash now avoids rendering unnecessary parts;\n* /debug endpoint tracks more objects;\n* testing setup improvements;\n* application/json POST requests handle invalid JSON better;\n* undocumented splash:go_and_wait() and splash:_wait_restart_on_redirects()\n  methods are removed (they are moved to tests);\n* Lua sandbox is cleaned up;\n* long log messages from Lua are truncated in logs;\n* more detailed error info is logged;\n* example script in Splash UI is simplified;\n* stress tests now include PNG rendering benchmark.\n\nBug fixes:\n\n* default viewport size and window geometry are now set to 1024x768;\n  this fixes PNG screenshots with viewport=full;\n* PNG rendering is fixed for huge viewports;\n* splash:go() argument validation is improved;\n* timer is properly deleted when an exception is raised in an errback;\n* redirects handling for baseurl requests is fixed;\n* reply is deleted only once when baseurl is used.\n\n1.3.1 (2014-12-13)\n------------------\n\nThis release fixes packaging issues with Splash 1.3.\n\n1.3 (2014-12-04)\n----------------\n\nThis release introduces an experimental\n:ref:`scripting support <scripting-tutorial>`.\n\nOther changes:\n\n* manhole is disabled by default in Debian package;\n* more objects are tracked in /debug endpoint;\n* \"history\" in render.json now includes \"queryString\" keys; it makes the\n  output compatible with HAR entry format;\n* logging improvements;\n* improved timer cancellation.\n\n1.2.1 (2014-10-16)\n------------------\n\n* Dockerfile base image is downgraded to Ubuntu 12.04 to fix random crashes;\n* Debian/buildbot config is fixed to make Splash UI available when deployed\n  from deb;\n* Qt / PyQt / sip / WebKit / Twisted version numbers are logged at startup.\n\n1.2 (2014-10-14)\n----------------\n\n* All Splash rendering endpoints now accept ``Content-Type: application/json``\n  POST requests with JSON-encoded rendering options as an alternative to using\n  GET parameters;\n* ``headers`` parameter allows to set HTTP headers (including user-agent)\n  for all endpoints - previously it was possible only in proxy mode;\n* ``js_source`` parameter allows to execute JS in page context without\n  ``application/javascript`` POST requests;\n* testing suite is switched to pytest, test running can now be parallelized;\n* viewport size changes are logged;\n* ``/debug`` endpoint provides leak info for more classes;\n* Content-Type header parsing is less strict;\n* documentation improvements;\n* various internal code cleanups.\n\n1.1 (2014-10-10)\n----------------\n\n* An UI is added - it allows to quickly check Splash features.\n* Splash can now return requests/responses information in HAR_ format. See\n  :ref:`render.har` endpoint and :ref:`har <arg-har>` argument of render.json\n  endpoint. A simpler :ref:`history <arg-history>` argument is also available.\n  With HAR support it is possible to get timings for various events,\n  HTTP status code of the responses, HTTP headers, redirect chains, etc.\n* Processing of related resources is stopped earlier and more robustly\n  in case of timeouts.\n* :ref:`wait <arg-wait>` parameter changed its meaning: waiting now restarts\n  after each redirect.\n* Dockerfile is improved: image is updated to Ubuntu 14.04;\n  logs are shown immediately; it becomes possible to pass additional\n  options to Splash and customize proxy/js/filter profiles; adblock filters\n  are supported in Docker; versions of Python dependencies are pinned;\n  Splash is started directly (without supervisord).\n* Splash now tries to start Xvfb automatically - no need for xvfb-run.\n  This feature requires ``xvfbwrapper`` Python package to be installed.\n* Debian package improvements: Xvfb viewport matches default Splash viewport,\n  it is possible to change Splash option using SPLASH_OPTS environment variable.\n* Documentation is improved: finally, there are some install instructions.\n* Logging: verbosity level of several logging events are changed;\n  data-uris are truncated in logs.\n* Various cleanups and testing improvements.\n\n.. _HAR: http://www.softwareishard.com/blog/har-12-spec/\n\n1.0 (2014-07-28)\n----------------\n\nInitial release.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 5.9931640625,
          "content": "ARG QT_MAJOR_VERSION=5\nARG QT_MINOR_VERSION=14\nARG QT_PATCH_VERSION=1\n# docker build has arguments but doesn't have variables\n# here we use arguments as variables\nARG QT_SHORT_VERSION=${QT_MAJOR_VERSION}.${QT_MINOR_VERSION}\nARG QT_FULL_VERSION=${QT_SHORT_VERSION}.${QT_PATCH_VERSION}\n\nARG SPLASH_BUILD_PARALLEL_JOBS=8\n\n# =====================\n\nFROM byrnedo/alpine-curl as qt-downloader\n\nARG QT_SHORT_VERSION\nARG QT_FULL_VERSION\nENV QT_SHORT_VERSION=${QT_SHORT_VERSION}\nENV QT_FULL_VERSION=${QT_FULL_VERSION}\n\nCOPY dockerfiles/splash/download-qt-installer.sh /tmp/download-qt-installer.sh\nRUN /tmp/download-qt-installer.sh /tmp/qt-installer.run\n\n# =====================\n#\n#FROM byrnedo/alpine-curl as qtwebkit-source-downloader\n#COPY dockerfiles/splash/download-qtwebkit-source.sh /tmp/download-qtwebkit-source.sh\n#RUN /tmp/download-qtwebkit-source.sh /tmp/qtwebkit.tar.xz\n\n# =====================\n\nFROM byrnedo/alpine-curl as qtwebkit-downloader\nARG WEBKIT_URL=https://github.com/qtwebkit/qtwebkit/releases/download/qtwebkit-5.212.0-alpha4/qtwebkit-Linux-RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64.7z\nENV WEBKIT_URL=${WEBKIT_URL}\nCOPY dockerfiles/splash/download-qtwebkit.sh /tmp/download-qtwebkit.sh\nRUN /tmp/download-qtwebkit.sh /tmp/qtwebkit.7z\n\n# =====================\n\nFROM byrnedo/alpine-curl as pyqt5-downloader\n\n# need to update URLs here with new version of Qt\nCOPY dockerfiles/splash/download-pyqt5.sh /tmp/download-pyqt5.sh\nRUN /tmp/download-pyqt5.sh /tmp/sip.tar.gz /tmp/pyqt5.tar.gz /tmp/webengine.tar.gz\n\n# =====================\n\nFROM ubuntu:18.04 as qtbase\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY dockerfiles/splash/prepare-install.sh /tmp/prepare-install.sh\nRUN /tmp/prepare-install.sh\n\nCOPY dockerfiles/splash/install-system-deps.sh /tmp/install-system-deps.sh\nRUN /tmp/install-system-deps.sh\n\nCOPY dockerfiles/splash/install-fonts.sh /tmp/install-fonts.sh\nRUN /tmp/install-fonts.sh\n\nCOPY dockerfiles/splash/install-flash.sh /tmp/install-flash.sh\nRUN /tmp/install-flash.sh\n\nCOPY dockerfiles/splash/install-qtwebengine-deps.sh /tmp/install-qtwebengine-deps.sh\nRUN /tmp/install-qtwebengine-deps.sh\n\nCOPY dockerfiles/splash/install-qtwebkit-deps.sh /tmp/install-qtwebkit-deps.sh\nRUN /tmp/install-qtwebkit-deps.sh\n\n# =====================\n\nFROM qtbase as qtbuilder\nENV DEBIAN_FRONTEND noninteractive\n\nCOPY --from=qt-downloader /tmp/qt-installer.run /tmp/\n\nARG DISPLAY\n\nARG QT_MAJOR_VERSION\nARG QT_MINOR_VERSION\nARG QT_PATCH_VERSION\nARG QT_SHORT_VERSION\nARG QT_FULL_VERSION\nENV QT_MAJOR_VERSION=${QT_MAJOR_VERSION}\nENV QT_MINOR_VERSION=${QT_MINOR_VERSION}\nENV QT_PATCH_VERSION=${QT_PATCH_VERSION}\nENV QT_SHORT_VERSION=${QT_SHORT_VERSION}\nENV QT_FULL_VERSION=${QT_FULL_VERSION}\n\nCOPY dockerfiles/splash/qt-installer-noninteractive.qs /tmp/script.qs\nCOPY dockerfiles/splash/run-qt-installer.sh /tmp/run-qt-installer.sh\nRUN /tmp/run-qt-installer.sh /tmp/qt-installer.run /tmp/script.qs\n\nENV PATH=\"/opt/qt-${QT_SHORT_VERSION}/${QT_FULL_VERSION}/gcc_64/bin:${PATH}\"\n\n# install qtwebkit\nCOPY --from=qtwebkit-downloader /tmp/qtwebkit.7z /tmp/\nCOPY dockerfiles/splash/install-qtwebkit.sh /tmp/install-qtwebkit.sh\nRUN /tmp/install-qtwebkit.sh /tmp/qtwebkit.7z\n\n# =====================\n\nFROM qtbuilder as qtwebkitbuilder-base\n\nCOPY dockerfiles/splash/install-qtwebkit-build-deps.sh /tmp/install-qtwebkit-build-deps.sh\nCOPY dockerfiles/splash/create-package.sh /tmp/create-package.sh\nRUN /tmp/install-qtwebkit-build-deps.sh\n\n# =====================\n\n#FROM qtbuilder as qtwebkitbuilder\n#COPY --from=qtwebkit-downloader /tmp/qtwebkit.tar.xz /tmp/\n#\n#COPY dockerfiles/splash/install-qtwebkit-build-deps.sh /tmp/install-qtwebkit-build-deps.sh\n#RUN /tmp/install-qtwebkit-build-deps.sh\n#\n#COPY dockerfiles/splash/build-qtwebkit.sh /tmp/build-qtwebkit.sh\n#RUN /tmp/build-qtwebkit.sh /tmp/qtwebkit.tar.xz\n\n# =====================\n\nFROM qtbase as splash-base\n\nCOPY dockerfiles/splash/install-system-splash-deps.sh /tmp/install-system-splash-deps.sh\nRUN /tmp/install-system-splash-deps.sh\n\nARG QT_SHORT_VERSION\nARG QT_FULL_VERSION\n\nCOPY --from=qtbuilder \\\n    /opt/qt-${QT_SHORT_VERSION}/${QT_FULL_VERSION}/gcc_64 \\\n    /opt/qt-${QT_SHORT_VERSION}/${QT_FULL_VERSION}/gcc_64\n\n#RUN ls -l /opt/qt-${QT_SHORT_VERSION}/${QT_FULL_VERSION}/gcc_64/lib\nENV PATH=\"/opt/qt-${QT_SHORT_VERSION}/${QT_FULL_VERSION}/gcc_64/bin:${PATH}\"\nENV LD_LIBRARY_PATH=\"/opt/qt-${QT_SHORT_VERSION}/${QT_FULL_VERSION}/gcc_64/lib:$LD_LIBRARY_PATH\"\n\n# =====================\n\nFROM splash-base as qt5-builder\n\nARG SPLASH_BUILD_PARALLEL_JOBS\nENV SPLASH_BUILD_PARALLEL_JOBS=${SPLASH_BUILD_PARALLEL_JOBS}\n\nCOPY --from=pyqt5-downloader /tmp/sip.tar.gz /tmp/\nCOPY --from=pyqt5-downloader /tmp/pyqt5.tar.gz /tmp/\nCOPY dockerfiles/splash/install-pyqt5.sh /tmp/install-pyqt5.sh\nRUN /tmp/install-pyqt5.sh /tmp/sip.tar.gz /tmp/pyqt5.tar.gz\n\nCOPY --from=pyqt5-downloader /tmp/webengine.tar.gz /tmp/\nCOPY dockerfiles/splash/install-pyqtwebengine.sh /tmp/install-pyqtwebengine.sh\nRUN /tmp/install-pyqtwebengine.sh /tmp/webengine.tar.gz\n\n# =====================\n\nFROM splash-base as splash\n\nARG QT_MAJOR_VERSION\nENV QT_MAJOR_VERSION=${QT_MAJOR_VERSION}\n\nCOPY dockerfiles/splash/install-python-splash-deps.sh /tmp/install-python-splash-deps.sh\nRUN /tmp/install-python-splash-deps.sh\n\n# FIXME: use virtualenv\nCOPY --from=qt5-builder /usr/lib/python3/dist-packages /usr/lib/python3/dist-packages\nCOPY --from=qt5-builder /usr/local/lib/python3.6/dist-packages /usr/local/lib/python3.6/dist-packages\n\nCOPY . /app\nRUN pip3 install /app\nENV PYTHONPATH $PYTHONPATH:/app\n#ENV QT_DEBUG_PLUGINS=1\n\n# Chromium refuses to start under root\nRUN groupadd -r splash && useradd --no-log-init --create-home -r -g splash splash\nRUN chown -R splash:splash /app\nUSER splash:splash\n\n\nVOLUME [ \\\n    \"/etc/splash/proxy-profiles\", \\\n    \"/etc/splash/js-profiles\", \\\n    \"/etc/splash/filters\", \\\n    \"/etc/splash/lua_modules\" \\\n]\n\nEXPOSE 8050\n\nENTRYPOINT [ \\\n    \"python3\", \\\n    \"/app/bin/splash\", \\\n    \"--proxy-profiles-path\", \"/etc/splash/proxy-profiles\", \\\n    \"--js-profiles-path\", \"/etc/splash/js-profiles\", \\\n    \"--filters-path\", \"/etc/splash/filters\", \\\n    \"--lua-package-path\", \"/etc/splash/lua_modules/?.lua\" \\\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.47265625,
          "content": "Copyright (c) Scrapinghub\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of Splash nor the names of its contributors may be used\n       to endorse or promote products derived from this software without\n       specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.57421875,
          "content": "include LICENSE\ninclude README.rst\ninclude CHANGES.rst\ninclude docs/Makefile\ninclude docs/make.bat\ninclude docs/conf.py\ninclude requirements.txt\n\nrecursive-include scripts *.py\nrecursive-include docs *.rst\nrecursive-include splash/ui *.*\nrecursive-include splash/examples *.lua\nrecursive-include splash/lua_modules *.lua *.md *.rst *.txt\nrecursive-include splash/tests *.txt *.js *.ini *.lua\nrecursive-include splash/vendor/harviewer/webapp *.js *.html *.css *.gif *.png *.swf *.html\nrecursive-include splash/kernel/inspections *.json\nrecursive-include splash/kernel/kernels *.json *.png\n"
        },
        {
          "name": "Makefile.buildbot",
          "type": "blob",
          "size": 0.0693359375,
          "content": "export DISPLAY=:0\n\nclean:\n\tgit submodule update --init\n\ntest:\n\tpy.test\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.40625,
          "content": "=======================================\nSplash - A javascript rendering service\n=======================================\n\n.. image:: https://img.shields.io/travis/scrapinghub/splash/master.svg\n   :alt: Build Status\n   :target: https://travis-ci.org/scrapinghub/splash\n\n.. image:: https://img.shields.io/codecov/c/github/scrapinghub/splash/master.svg\n   :alt: Coverage report\n   :target: http://codecov.io/github/scrapinghub/splash?branch=master\n\n.. image:: https://img.shields.io/badge/GITTER-join%20chat-green.svg\n   :alt: Join the chat at https://gitter.im/scrapinghub/splash\n   :target: https://gitter.im/scrapinghub/splash\n\nSplash is a javascript rendering service with an HTTP API. It's a lightweight\nbrowser with an HTTP API, implemented in Python 3 using Twisted and QT5.\n\nIt's fast, lightweight and state-less which makes it easy to distribute.\n\nDocumentation\n-------------\n\nDocumentation is available here:\nhttps://splash.readthedocs.io/\n\nUsing Splash with Scrapy\n------------------------\n\nTo use Splash with Scrapy, please refer to the `scrapy-splash library`_.\n\nSupport\n-------\n\nOpen source support is provided here in GitHub. Please `create a question\nissue`_.\n\nCommercial support is also available by `Scrapinghub`_.\n\n.. _create a question issue: https://github.com/scrapinghub/splash/issues/new?labels=question\n.. _Scrapinghub: https://scrapinghub.com\n.. _scrapy-splash library: https://github.com/scrapy-plugins/scrapy-splash\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.078125,
          "content": "comment:\n  layout: \"header, diff, tree\"\n\ncoverage:\n  status:\n    project: false\n"
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 0.029296875,
          "content": "collect_ignore = [\"setup.py\"]\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.2587890625,
          "content": "# the following libraries are only required by tests\npyasn1\n# pyasn-modules >= 0.2.4\npytest >= 5.0.0\nservice-identity >= 18.1.0\npyOpenSSL >= 19.0.0\ncryptography >= 2.5\nrequests >= 2.21\njsonschema >= 2.0\nstrict-rfc3339\njupyter_kernel_test\n-r requirements-jupyter.txt"
        },
        {
          "name": "requirements-jupyter.txt",
          "type": "blob",
          "size": 0.2373046875,
          "content": "ipykernel==5.1.2\nipython==7.7.0\nipython-genutils==0.2.0\nipywidgets==7.5.1\njupyter==1.0.0\njupyter-client==5.3.1\njupyter-console==6.0.0\njupyter-core==4.5.0\nnbconvert==5.6.0\nnbformat==4.4.0\nnotebook==5.7.8\ntornado < 6.0\nwidgetsnbextension==3.5.1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.326171875,
          "content": "# install PyQt5 (Splash is tested on PyQT 5.13)\n# and the following packages:\ntwisted[http2] == 19.7.0\nqt5reactor\npsutil\nadblockparser >= 0.5\nhttps://github.com/sunu/pyre2/archive/c610be52c3b5379b257d56fc0669d022fd70082a.zip#egg=re2\nxvfbwrapper\nPillow > 2.0\nattrs >= 18.2.0\n\n# for scripting support\nlupa >= 1.3\nfuncparserlib >= 0.3.6\n"
        },
        {
          "name": "runsplash-docker.sh",
          "type": "blob",
          "size": 0.1640625,
          "content": "#!/usr/bin/env bash\ndocker build -t splash-tests -f dockerfiles/tests/Dockerfile . && \\\ndocker run -it -p8050:8050 --rm --entrypoint \"/app/bin/splash\" splash-tests \"$@\""
        },
        {
          "name": "runtests-docker.sh",
          "type": "blob",
          "size": 0.1220703125,
          "content": "#!/usr/bin/env bash\ndocker build -t splash-tests -f dockerfiles/tests/Dockerfile . && \\\ndocker run -it --rm splash-tests \"$@\""
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3779296875,
          "content": "[bumpversion]\ncurrent_version = 3.5.0\ncommit = True\ntag = True\ntag_name = {new_version}\n\n[bumpversion:file:splash/__init__.py]\nserialize = \n\t{major}.{minor}.{patch}\n\t{major}.{minor}\n\n[bumpversion:file:docs/conf.py]\nserialize = \n\t{major}.{minor}\n\n[tool:pytest]\nnorecursedirs = bin debian dist docs examples notebooks splash/kernel\ndoctest_optionflags = ALLOW_UNICODE\naddopts = --tb=short\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.888671875,
          "content": "#!/usr/bin/env python\nimport os\nimport re\nfrom setuptools import setup\n\n\ndef _path(*args):\n    return os.path.join(os.path.dirname(__file__), *args)\n\n\ndef get_version():\n    filename = _path('splash', '__init__.py')\n    with open(filename, 'rb') as fp:\n        contents = fp.read().decode('utf8')\n        return re.search(r\"__version__ = ['\\\"](.+)['\\\"]\", contents).group(1)\n\n\nsetup_args = {\n    'name': 'splash',\n    'version': get_version(),\n    'url': 'https://github.com/scrapinghub/splash',\n    'description': 'A javascript rendered with a HTTP API',\n    'long_description': open('README.rst').read(),\n    'author': 'Scrapinghub',\n    'author_email': 'info@scrapinghub.com',\n    'maintainer': 'Scrapinghub',\n    'maintainer_email': 'info@scrapinghub.com',\n    'license': 'BSD',\n    'scripts': ['bin/splash'],\n    'packages': ['splash', 'splash.har', 'splash.kernel',\n                 'splash.engines.chromium', 'splash.engines.webkit'],\n    'package_data': {'splash': [\n        'vendor/harviewer/webapp/css/*.css',\n        'vendor/harviewer/webapp/css/images/*.*',\n        'vendor/harviewer/webapp/css/images/menu/*.*',\n        'vendor/harviewer/webapp/scripts/*.*',\n        'vendor/harviewer/webapp/scripts/core/*.*',\n        'vendor/harviewer/webapp/scripts/domplate/*.*',\n        'vendor/harviewer/webapp/scripts/downloadify/js/*.*',\n        'vendor/harviewer/webapp/scripts/downloadify/src/*.*',\n        'vendor/harviewer/webapp/scripts/downloadify/media/*.*',\n        'vendor/harviewer/webapp/scripts/excanvas/*.*',\n        'vendor/harviewer/webapp/scripts/jquery-plugins/*.*',\n        'vendor/harviewer/webapp/scripts/json-query/*.*',\n        'vendor/harviewer/webapp/scripts/nls/*.*',\n        'vendor/harviewer/webapp/scripts/preview/*.*',\n        'vendor/harviewer/webapp/scripts/syntax-highlighter/*.js',\n        'vendor/harviewer/webapp/scripts/tabs/*.*',\n        'vendor/harviewer/webapp/har.js',\n        'ui/*.*',\n\n        'examples/*.lua',\n        'lua_modules/*.lua',\n        'lua_modules/libs/*.lua',\n        'lua_modules/vendor/*.lua',\n        'kernel/inspections/*.json',\n        'kernel/kernels/splash-py2/*.*',\n        'kernel/kernels/splash-py3/*.*',\n    ]},\n    'zip_safe': False,\n    'install_requires': [\n        'Twisted[http2] >= 19.7.0',\n        'qt5reactor',\n        'psutil',\n        'adblockparser',\n        'xvfbwrapper',\n        'funcparserlib',\n        'Pillow >= 3.4.2',\n        'attrs >= 18.2.0',\n    ],\n    'classifiers': [\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Console',\n        'Environment :: No Input/Output (Daemon)',\n        'Topic :: Internet :: WWW/HTTP',\n    ],\n}\n\n\nsetup(**setup_args)\n"
        },
        {
          "name": "splash",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}