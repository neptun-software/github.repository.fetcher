{
  "metadata": {
    "timestamp": 1736559596347,
    "page": 230,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "biopython/biopython",
      "stars": 4446,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.7265625,
          "content": "skip_tags: true\nclone_depth: 1\n\nos: Visual Studio 2015\n\nenvironment:\n  matrix:\n    - PY_MAJOR_VER: 3\n      PYTHON_ARCH: \"x86\"\n    - PY_MAJOR_VER: 3\n      PYTHON_ARCH: \"x86_64\"\n\nmatrix:\n  fast_finish: true\n\n# Enable MySQL and PostgreSQL for BioSQL tests\nservices:\n  - postgresql\n  - mysql\n\nbefore_build:\n  - SET PGUSER=postgres\n  - SET PGPASSWORD=Password12!\n  - SET PATH=C:\\Program Files\\PostgreSQL\\9.6\\bin\\;%PATH%\n  - psql -U postgres -c \"CREATE USER biosql_user WITH PASSWORD 'biosql_pass';\"\n  - psql -U postgres -c \"CREATE DATABASE biosql_test OWNER biosql_user;\"\n\nbuild_script:\n# If there's a newer build queued for the same PR, cancel this one\n  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `\n        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `\n        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `\n        throw \"There are newer queued builds for this pull request, failing early.\" }\n  - ps: Start-FileDownload \"https://repo.continuum.io/miniconda/Miniconda$env:PY_MAJOR_VER-latest-Windows-$env:PYTHON_ARCH.exe\" C:\\Miniconda.exe; echo \"Finished downloading miniconda\"\n  - ps: start -Wait -FilePath C:\\Miniconda.exe -ArgumentList \"/S /D=C:\\Py\"\n  - SET PATH=C:\\Py;C:\\Py\\Scripts;C:\\Py\\Library\\bin;%PATH%\n  - conda config --set always_yes yes\n  - conda update conda --channel conda-forge --override-channels\n  - python -m pip install --upgrade coverage setuptools numpy\n  - python -m pip install .\n\ntest_script:\n  - python -c \"import sys; print(sys.version)\"\n  - cd Tests\n  - cp biosql.ini.appveyor biosql.ini\n  - coverage run --source Bio,BioSQL run_tests.py --offline\n  - coverage xml\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 4.7216796875,
          "content": "# =================================================\n# flake8:\n#   pycodestyle: E### (error), W### (warning)\n#   pyflake:     F### (error)\n# flake8-blind-except: B###\n# flake8-bugbear: B###\n# flake8-quotes: Q###\n# flake8-black : BLK###\n# flake8-commas: C8## (in case installed locally)\n# flake8-pie : PIE### (in case installed locally)\n# flake8-sfs : SFS### (in case installed locally)\n# flake8-pydocstyle: D### (in case installed locally)\n# =================================================\n\n[flake8]\ndoctests = True\nrst-roles =\n    class,\n    func,\n    meth,\n    mod,\n    data,\nrst-directives =\n    seealso,\n    todo,\n# Exclude some file types and folders that shouldn't be checked:\nexclude = .svn,CVS,.bzr,.hg,.git,__pycache__,.tox,.github,build\nignore =\n    # =============================================================\n    # Biopython's 'standard' ignores we can agree to always accept:\n    # =============================================================\n    W503,\n    # line-break before binary operator\n    # deliberately ignore (in favour of enforcing W504)\n    # ===========================================\n    # Ignores that we have to accept for a while:\n    # ===========================================\n    E203,\n    # whitespace before ':'\n    # gives false positives after running black, see\n    # https://github.com/PyCQA/pycodestyle/issues/373\n    E122,E131,E124,E126,E127,E128,E201,E241,\n    # E112 continuation line missing indentation or outdented\n    # E131 continuation line unaligned for hanging indent\n    # E124 closing bracket does not match visual indentation\n    # E126 continuation line over-indented for hanging indent\n    # E127 continuation line over-indented for visual indent\n    # E128 continuation line under-indented for visual indent\n    # E201 whitespace after '['\n    # E241 multiple spaces after ','\n    # ignoring as using black for layout (if this is triggered,\n    # it would be in a snippet explicitly excluded from black)\n    E501,\n    # line too long\n    # Maybe we find a sensible limit, e.g. 88 (black) and enforce it\n    E704,\n    # multiple statements on one line (def)\n    # seeing some false positives with @overload ... for type annotation\n    B007,\n    # Loop control variable not used within the loop body.\n    # If this is intended, start the name with an underscore\n    B028,\n    # No explicit stacklevel keyword argument found.\n    # The warn method from the warnings module uses a stacklevel of 1\n    # by default... It is therefore recommended to use a stacklevel of\n    # 2 or greater to provide more information to the user\n    B902,\n    # =========================================\n    # Optional ignores for local installations:\n    # =========================================\n    PIE781,\n    # Assigning to temp variable and then returning, not enforcing\n    SFS101,SFS301,\n    # typical string formatting\n    C8,\n    # everything from flake8-commas - just use black\n    D,\n    # using ruff for the historic flake8-pydocstyle codes\n\n# ========================\n# Folder specific ignores:\n# ========================\nper-file-ignores =\n    Bio/*:F401,F841,B009,B010\n    Tests/*:F401,F841,W291,B009,B010,B015\n\n    # Due to a bug in flake8, we need the following lines for running the\n    # pre-commit hook. If you made edits above, please change also here!\n    /Bio/*:F401,F841,B009,B010\n    /Tests/*:F401,F841,D101,W291,B009,B010,B015\n\n#Explanation of the codes being ignored in Bio/ and Tests/:\n#\n#Bio/*:F401 module imported but unused TODO? (97 occurrences)\n#      F841 local variable is assigned to but never used TODO? (58 occurrences)\n#      B009 do not call getattr with a constant attribute value (5 occurrences),\n#           it is not any safer than normal property access\n#      B010 do not call setattr with a constant attribute value (11 occurrences),\n#           it is not any safer than normal property access\n#Tests/*:F401 module imported but unused TODO? (115 occurrences)\n#        F841 local variable is assigned to but never used TODO? (93 occurrences)\n#        D101 missing docstring in public class (244 occurrences)\n#        D102 missing docstring in public method (1368 occurrences)\n#        D103 missing docstring in public functions (20 occurrences)\n#        W291 trailing whitespace (due to alignment tests)\n#        B009 do not call getattr with a constant attribute value (10 occurrences),\n#             it is not any safer than normal property access\n#        B010 do not call setattr with a constant attribute value (7 occurrences),\n#             it is not any safer than normal property access\n#        B015 Pointless comparison. This comparison does nothing ... (108 occurrences)\n#             (Intended to trigger exceptions in our tests)\n\n# =======================\n# flake8-quotes settings:\n# =======================\ninline-quotes = double\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.0205078125,
          "content": "# On Windows, git can be setup to convert text files to use\n# DOS/Windows newlines (\\r\\n) rather than Unix style (\\n).\n# This should be harmless for most of our unit tests...\n# Still, it's better when we try to assure unform Unix style\n# when committing:\n\n* text=auto\n\n# However, where testing indexing and get_raw (including the\n# BGZF tests comparing the uncompressed file to the compressed\n# file) it can be important to preserve the line endings in git.\n\nTests/Fasta/f002 binary\nTests/GenBank/cor6_6.gb binary\nTests/GenBank/NC_000932.gb binary\nTests/Quality/example.fastq binary\nTests/Quality/example_dos.fastq binary\nTests/Blast/wnts.xml binary\n\n# This pickle file has to be using Unix new lines otherwise at\n# least Python 3.4's C pickle parser fails with exception:\n# _pickle.UnpicklingError: the STRING opcode argument must be quoted\n\nTests/SubsMat/acc_rep_mat.pik binary\n\n# MMTF is a binary file format,\nTests/PDB/4CUP.mmtf binary\n\n# UCSC Nib files are binary:\nTests/Nib/test_bigendian.nib binary\nTests/Nib/test_littleendian.nib binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.453125,
          "content": "#Ignore the build directory (and its sub-directories):\nbuild\n\n#Ignore the distribution directory\ndist\n\n#Ignore backup files from some Unix editors,\n\\#*\\#\n*~\n*.swp\n*.bak\n\n#Ignore patches and any original files created by patch command\n*.diff\n*.patch\n*.orig\n*.rej\n\n#Ignore these hidden files from Mac OS X\n.DS_Store\n\n#Ignore hidden files from Dolphin window manager\n.directory\n\n#Ignore all compiled python files (e.g. from running the unit tests):\n*.pyc\n*.pyo\n*.py-e\n*.pyd\n\n#Ignore all Jython class files (present if using Jython)\n*.class\n\n#Ignore any compiled C code\n*.so\n\n#Ignore the .tox directory from running tox locally\n.tox/\n\n#Ignore the MANIFEST file created automatically from MANIFEST.in\nMANIFEST\n\n#Ignore potential directory created during install:\nbiopython.egg-info\n\n#The graphics unit tests produce output files for human inspection\n#(at the time of writing, only PDF and PNG files are created)\nTests/Graphics/*.pdf\nTests/Graphics/*.eps\nTests/Graphics/*.svg\nTests/Graphics/*.png\n\n# This file is downloaded when testing the Bio.SeqIO.GckIO module.\nTests/Gck/DGVC_GCK.zip\n\n#Ignore the local BioSQL test settings:\nTests/biosql.ini\n\n#TODO - The unit tests shouldn't leave temp files after running:\nTests/BioSQL/temp_sqlite.db\nTests/BioSQL/temp_sqlite.db-journal\nTests/Cluster/cyano_result*\n# Created by Tests/test_BWA_tool.py:\nTests/out.bam\n\n#TODO - The Tutorial doctests should leave example files after\n#running Tests/test_Tutorial.py\nDoc/examples/other_trees.nwk\nDoc/examples/tree1.nwk\n\n#Ignore LaTeX temp files, and compiled output\nDoc/*.aux\nDoc/*.gz\nDoc/*.log\nDoc/*.out\nDoc/*.toc\nDoc/*.haux\nDoc/*.htoc\nDoc/*/*.aux\nDoc/*/*.log\nDoc/*/*.out\nDoc/*/*.toc\nDoc/*/*.haux\nDoc/*/*.htoc\nDoc/*/*/*.aux\nDoc/*/*/*.log\nDoc/*/*/*.out\nDoc/*/*/*.toc\nDoc/*/*/*.haux\nDoc/*/*/*.htoc\nDoc/_minted-Tutorial/\nDoc/_build/\nDoc/Tutorial.txt\nDoc/Tutorial.pdf\nDoc/Tutorial.html\nDoc/Tutorial.pyg\nDoc/biopdb_faq.pdf\nDoc/Biopython_doc.pdf\nDoc/version.sh\nDoc/install/Installation.txt\nDoc/install/Installation.pdf\nDoc/install/Installation.html\nDoc/cookbook/motif/motif.pdf\nDoc/cookbook/motif/motif.html\n\n#Ignore the hevea.sty file if present (used for HTML docs)\nDoc/hevea.sty\nDoc/*/hevea.sty\nDoc/*/*/hevea.sty\n\n#Ignore artifacts of building the docs\n_build\nDoc/api/*.rst\n\n#Ignore IntelliJ IDEA directory and project files\n.idea\n*.iml\n\n#Ignore unittest cache directory\n.cache/\n\n#Ignore vscode directory\n.vscode\n\n#Ignore mypy cache directory\n.mypy_cache\n\n#Ignore virtual environments\n.env\n.venv\nenv/\nvenv/\nENV/\n\n# Testing\n**/.coverage\n"
        },
        {
          "name": ".mypy.ini",
          "type": "blob",
          "size": 1.451171875,
          "content": "[mypy]\n# equivalent to \"files\" in .pre-commit-config.yaml\nfiles = Bio,BioSQL\nstrict_equality = True\nextra_checks = True\n#check_untyped_defs = True\n#disallow_untyped_calls = True\ndisallow_incomplete_defs = True\n#disallow_untyped_defs = True\nno_implicit_reexport = True\nshow_error_context = True\nshow_column_numbers = True\nshow_error_codes = True\npretty = True\nwarn_redundant_casts = True\n#warn_return_any = True\nwarn_unused_configs = True\n\n[mypy-Bio/PDB/*]\ndisallow_incomplete_defs = False\n\n[mypy-Bio.PDB.ccealign]\nignore_missing_imports = True\n\n[mypy-Bio.PDB.ic_rebuild]\nignore_errors = True\n\n[mypy-Bio.PDB.internal_coords]\nignore_errors = True\n\n[mypy-Bio.PDB.kdtrees]\nignore_missing_imports = True\n\n[mypy-Bio.PDB.PDBMLParser]\nignore_errors = True\n\n[mypy-Bio.PDB.PICIO]\nignore_errors = True\n\n[mypy-igraph.*]\nignore_missing_imports = True\n\n[mypy-mmtf.*]\nignore_missing_imports = True\n\n[mypy-numpy.*]\nignore_missing_imports = True\n\n[mypy-reportlab.*]\nignore_missing_imports = True\n\n[mypy-scipy.*]\nignore_missing_imports = True\n\n[mypy-networkx.*]\nignore_missing_imports = True\n\n[mypy-pylab.*]\nignore_missing_imports = True\n\n[mypy-matplotlib.*]\nignore_missing_imports = True\n\n[mypy-PIL.*]\nignore_missing_imports = True\n\n[mypy-rdflib.*]\nignore_missing_imports = True\n\n[mypy-MySQLdb.*]\nignore_missing_imports = True\n\n[mypy-xml.sax.expatreader.*]\nignore_missing_imports = True\n\n[mypy-Bio.pairwise2.*]\n# deprecated module\nignore_errors = True\n\n[mypy-com.ziclix.*]\nignore_missing_imports = True\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 3.7294921875,
          "content": "# See CONTRIBUTING.rst, we expect this to be run via a git pre-commit hook.\n# You can also run the checks directly at the terminal, e.g.\n#\n# $ pre-commit run --all-files\n#\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: check-executables-have-shebangs\n        files: \\.(py|sh)$\n    -   id: check-json\n    -   id: end-of-file-fixer\n        files: \\.py$\n    -   id: mixed-line-ending\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n    # Run the Ruff linter.\n    -   id: ruff\n        args: [\n            '--fix',\n            '--extend-select=B,C4,D,ISC,UP',\n            '--extend-ignore=E501,F401,F841,D105,D2,D4',\n            '--extend-ignore=B007,B009,B010,B018,B028,B904,UP031',\n            '--extend-per-file-ignores=Tests/*.py:D101,Tests/*.py:D102,Tests/*.py:D103',\n            '--extend-per-file-ignores=Tests/*.py:B015',\n            '--config=lint.isort.force-single-line=true',\n            '--config=lint.isort.order-by-type=false',\n        ]\n-   repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n    -   id: black\n        args: [--check,--target-version,py39]\n-   repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n    -   id: flake8\n        additional_dependencies: [\n            'flake8-rst-docstrings>=0.2.3',\n        ]\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.14.1\n    hooks:\n    -   id: mypy\n        # equivalent to \"files\" in .mypy.ini\n        files: '^(Bio|BioSQL)/'\n-   repo: https://github.com/asottile/blacken-docs\n    rev: 1.19.1\n    hooks:\n    -   id: blacken-docs\n        additional_dependencies: [black==24.2.0]\n        exclude: ^.github/\n-   repo: https://github.com/rstcheck/rstcheck\n    rev: v6.2.4\n    hooks:\n    -   id: rstcheck\n        args: [\n            '--ignore-roles=ref,numref,py:mod',\n            --ignore-directives=toctree,\n            --ignore-substitutions=version,\n            --report-level=warning,\n            --ignore-messages=Unknown\\ target\\ name\n        ]\n-   repo: https://github.com/PyCQA/doc8\n    rev: v1.1.2\n    hooks:\n    -   id: doc8\n        additional_dependencies: [pygments]\n        args: [\n        --quiet,\n        --ignore-path=Doc/examples/ec_*.txt,\n        '--ignore=D000,D001,D002,D004'\n    ]\n-   repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n    -   id: codespell\n        files: \\.(rst|md)$\n        args: [\n            --ignore-regex,\n            '(^|\\W)([A-Z]{2,3})(\\W|$)',\n            -L,\n            'ser,hsa,hist,fpr,blosum,ags,manuel,mian,fallin'\n        ]\n-   repo: local\n    hooks:\n    -   id: doi-link-style\n        name: Enforce https://doi.org/ style\n        description: Check DOI link style, see https://www.crossref.org/display-guidelines/\n        entry: '(?i)(doi:|dx\\.doi\\.org|http://doi\\.org)'\n        language: pygrep\n        files: \\.(rst|tex)$\n    -   id: contrib-sort\n        name: Contributor sorting\n        description: Confirms alphabetical sorting of the CONTRIB.rst file\n        entry: bash -c 'for n in $(seq 0 \"$#\"); do grep \"^- \" \"${!n}\" | LC_ALL=C sort -u -c -f; done'\n        #entry: 'grep \"^- \" CONTRIB.rst | LC_ALL=C sort -u -c -f'\n        language: system\n        files: ^CONTRIB\\.rst$\nci:\n    # Settings for the https://pre-commit.ci/ continuous integration service\n    autofix_prs: true\n    # Default message is more verbose\n    autoupdate_commit_msg: '[pre-commit.ci] autoupdate'\n    # Default is weekly\n    autoupdate_schedule: quarterly\n    # Currently pre-commit.ci checks all files, and all hooks takes too long\n    # and causes a timeout - so as a short-term workaround, skip flake8 etc:\n    skip: [\n        check-json,\n        mixed-line-ending,\n        flake8,\n        rstcheck,\n        doc8,\n        codespell,\n        doi-link-style\n    ]\n"
        },
        {
          "name": "Bio",
          "type": "tree",
          "content": null
        },
        {
          "name": "BioSQL",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIB.rst",
          "type": "blob",
          "size": 16.609375,
          "content": "CONTRIBUTORS\n============\n\nThis is a list of people who have made contributions to Biopython.\n\nPeople are listed alphabetically, as verified with Unix sort::\n\n    $ grep \"^- \" CONTRIB.rst | LC_ALL=C sort -u -c -f\n\nThis is certainly not comprehensive, and if you've been overlooked (sorry!),\nplease open an issue on GitHub or mention it on the mailing list.\n\n- Aaron Gallagher <habnabit at gmail>\n- Aaron Kitzmiller <https://github.com/aaronk>\n- Aaron Rosenfeld <https://github.com/arosenfeld>\n- Adam Kurkiewicz <adam@kurkiewicz.pl>\n- Adam Novak <https://github.com/AdamNovak>\n- Adam Vandergriff <https://github.com/acvander>\n- Adhemar Zerlotini <https://github.com/azneto>\n- Adil Iqbal <https://github.com/Adil-Iqbal>\n- Adrian Altenhoff <https://github.com/alpae>\n- Alan Medlar <https://github.com/ajm>\n- Alessio Papini <first dot last at unifi dot it>\n- Alessio Quercia <https://github.com/AlessioQuercia>\n- Alex Crocker <alex.w.crocker at gmail>\n- Alex Morehead <https://github.com/amorehead>\n- Alexander Decurnou <https://github.com/adcrn>\n- Allis Tauri <https://github.com/allista>\n- Alona Levy-Jurgenson <https://github.com/alonalj>\n- Anders Pitman <https://github.com/anderspitman>\n- Andrea Pierleoni <andrea at the Italian domain biocomp dot unibo>\n- Andrea Rizzi <https://github.com/andrrizzi>\n- Andreas Kuntzagk <andreas.kuntzagk at domain mdc-berlin.de>\n- Andrei Istrate <andrei at ebi dot ac dot uk>\n- Andres Colubri <andres dot colubri at gmail dot com>\n- Andrew Dalke <dalke at domain dalke scientific dot com>\n- Andrew Guy <https://github.com/andrewguy>\n- Andrew Sczesnak <https://github.com/polyatail>\n- Andrey Raspopov <https://github.com/Andrey-Raspopov>\n- Andrius Merkys <https://github.com/merkys>\n- Anil Tuncel <https://github.com/anilbey>\n- Anne Pajon <ap one two at sanger ac uk>\n- Anthony Bradley <https://github.com/abradle>\n- Antonio Jesús Gálvez Muñoz <https://github.com/PyCreatine>\n- Antonio Trande <https://github.com/sagitter>\n- Antony Lee <https://github.com/anntzer>\n- Anuj Sharma <https://github.com/xulesc>\n- Ariel Aptekmann <https://github.com/aralap>\n- Arpan Sahoo <https://github.com/arpansahoo>\n- Artemi Bendandi <https://github.com/artbendandi>\n- Arup Ghosh <https://github.com/arupgsh>\n- Austin Varela <https://github.com/austinv11>\n- Aziz Khan <https://github.com/asntech>\n- Barbara Mühlemann <https://github.com/bamueh>\n- Bart de Koning <bratdaking gmail>\n- Bartek Wilczynski <bartek at domain rezolwenta.eu.org>\n- Bartosz Telenczuk <bartosz.telenczuk at domain gmail.com>\n- Ben Fulton <https://github.com/benfulton>\n- Ben Morris <https://github.com/bendmorris>\n- Ben Woodcroft <https://github.com/wwood>\n- Benedict Carling <https://github.com/Benedict-Carling>\n- Benjamin Rowell <https://github.com/benjaminr>\n- Benjamin Vaisvil <https://github.com/bvaisvil>\n- Bernhard C. Thiel <https://github.com/Bernhard10>\n- Bertrand Caron <https://github.com/bertrand-caron>\n- Bertrand Frottier <bertrand.frottier at domain free.fr>\n- Bertrand Néron <https://github.com/bneron>\n- Bill Barnard <bill at domain barnard-engineering.com>\n- Blaise Li <https://github.com/blaiseli>\n- Bob Bussell <rgb2003 at domain med.cornell.edu>\n- Bogdan T. <bogdan at pearlgen dot com>\n- Brad Chapman <https://github.com/chapmanb>\n- Brandon Carter  <https://github.com/b-carter>\n- Brandon Invergo <https://github.com/brandoninvergo>\n- Brian Osborne <https://github.com/bosborne>\n- Bryan Lunt <https://github.com/bryan-lunt>\n- Caio Fontes <https://github.com/Caiofcas>\n- Cam McMenamie <https://github.com/kamurani>\n- Carlos Pena <https://github.com/carlosp420>\n- Carlos Ríos <https://github.com/Crosvera>\n- Catherine Lesuisse <https://github.com/kaskales>\n- Cecilia Alsmark <Cecilia.Alsmark at domain ebc.uu.se>\n- Chad Parmet <https://github.com/cparmet>\n- Chaitanya Gupta <https://github.com/iCHAIT>\n- Cheng Soon Ong <chengsoon.ong at tuebingen.mpg.de>\n- Chenghao Zhu <zhuchcn@gmail.com>\n- Chris Daley <https://github.com/chebizarro>\n- Chris Jackson <https://github.com/chrisjackson-pellicle>\n- Chris Lasher <chris.lasher at gmail.com>\n- Chris MacRaild <https://github.com/macraild>\n- Chris Mitchell <https://github.com/chrismit>\n- Chris Rands <https://github.com/chris-rands>\n- Chris Warth <https://github.com/cswarth>\n- Christiam Camacho <https://github.com/christiam>\n- Christian Balbin <christian at domain balbin.com>\n- Christian Brueffer <christian at domain brueffer.de>\n- Christian Zmasek <https://github.com/cmzmasek>\n- Chunlei Wu <https://github.com/newgene>\n- Claude Paroz <claude at two (as digit) xlibre dot net>\n- Connor McCoy <cmccoy at the dot org domain fhcrc>\n- Connor T. Skennerton <https://github.com/ctSkennerton>\n- Cymon J Cox <https://github.com/cymon>\n- Damien Goutte-Gattat <https://github.com/gouttegd>\n- Dan Vogel <dmv at domain andrew.cmu.edu>\n- Darcy Mason <https://github.com/darcymason>\n- David Born <https://github.com/hypostulate>\n- David Cain <gmail, david joseph cain>\n- David Koppstein <https://github.com/dkoppstein>\n- David Nicholson <https://github.com/danich1>\n- David Weisman <david.weisman at domain acm.org>\n- David Winter <https://github.com/dwinter>\n- Deepak Khatri <https://github.com/deepaklorkhatri007>\n- Devang Thakkar <https://github.com/devangthakkar>\n- Diana Jaunzeikare\n- Diego Brouard <diego at domain conysis.com>\n- Edward Liaw <https://github.com/edliaw>\n- Emmanuel Noutahi <https://github.com/maclandrol>\n- Eric Rasche <https://github.com/erasche>\n- Eric Talevich <https://github.com/etal>\n- Erick Matsen <surname at fhcrc dot org>\n- Erik Cederstrand <https://github.com/ecederstrand>\n- Erik Weßels <https://github.com/BioNij>\n- Erik Whiting <https://github.com/erik-whiting>\n- Ernesto Rodriguez <https://github.com/netogallo>\n- Fabian Egli <https://github.com/fabianegli>\n- Fabio Zanini <https://github.com/iosonofabio>\n- Farhan Khan <https://github.com/BabaYaga1221>\n- Fei Qi <https://github.com/qifei9>\n- Foen Peng <https://github.com/foenpeng>\n- Francesco Gastaldello <https://github.com/Gasta88>\n- Francisco Pina-Martins <https://github.com/StuntsPT>\n- Franco Caramia <https://github.com/fcaramia>\n- Frank Kauff <https://github.com/frankkl>\n- François Coste <https://github.com/francoiscoste>\n- Frederic Sapet <https://github.com/FredericBGA>\n- Frederic Sohm <fsms at domain users.sourceforge.net>\n- Frederik Gwinner\n- Fredric Johansson <https://github.com/fredricj>\n- Fábio Madeira <https://github.com/biomadeira>\n- Gaetan Lehman <gaetan.lehmann at domain jouy.inra.fr>\n- Gavin E Crooks <https://github.com/gecrooks>\n- Gert Hulselmans <https://github.com/ghuls>\n- Gleb Kuznetsov <https://github.com/glebkuznetsov>\n- Gokcen Eraslan <https://github.com/gokceneraslan>\n- Harry Jubb <https://github.com/harryjubb>\n- Harry Zuzan <iliketobicycle at domain yahoo.ca>\n- Hector Martinez <https://github.com/hmarlo>\n- Hielke Walinga <https://github.com/hwalinga>\n- Hongbo Zhu <https://github.com/hongbo-zhu-cn>\n- Hussein Faara <https://github.com/hfaara18>\n- Hye-Shik Chang <perky at domain fallin.lv>\n- Iddo Friedberg <https://github.com/idoerg>\n- Igor S. Gerasimov <https://github.com/foxtran>\n- Ilya Flyamer <https://github.com/Phlya>\n- Isaac Ellmen <https://github.com/Ellmen>\n- Ivan Antonov <https://github.com/vanya-antonov>\n- Jacek Śmietański <https://github.com/dadoskawina>\n- Jack Twilley <https://github.com/mathuin>\n- Jacob Beal <https://github.com/jakebeal>\n- Jacob Byerly <https://github.com/byerlyj>\n- Jakub Lipinski <https://github.com/jakublipinski>\n- James Baker <https://github.com/JamesABaker>\n- James Casbon <https://github.com/jamescasbon>\n- James Jeffryes <https://github.com/JamesJeffryes>\n- James Krieger <https://github.com/JamesMKrieger>\n- Jared Andrews <https://github.com/j-andrews7>\n- Jared Lumpe <https://github.com/jlumpe>\n- Jarrod Millman <https://github.com/jarrodmillman>\n- Jason A. Hackney <jhackney at domain stanford.edu>\n- Jeff Hussmann <first dot last at gmail dot com>\n- Jeffrey Chang <https://github.com/jchang>\n- Jeffrey Finkelstein <https://github.com/jfinkels>\n- Jens Thomas <https://github.com/linucks>\n- Jeremy LaBarge <https://github.com/biojerm>\n- Jeroen Van Goey <https://github.com/BioGeek>\n- Jerven Bolleman <https://github.com/JervenBolleman>\n- Jian-Long Huang <https://github.com/jlhg>\n- Jimmy O'Donnell <https://github.com/jimmyodonnell>\n- Joanna & Dominik Kasprzak\n- Joe Cora <https://github.com/JoeCora>\n- Joe Greener <https://github.com/jgreener64>\n- Joel Ibaceta <https://github.com/joelibaceta>\n- Joerg Schaarschmidt <https://github.com/schaarj>\n- Johann Visagie <wjv at domain cityip.co.za>\n- John Bradley <https://github.com/johnbradley>\n- John Kern <https://github.com/kern3020>\n- John Ma <https://github.com/JohnMCMa>\n- John Stilley <https://github.com/john-science>\n- Jonathan Taylor <jonathan dot taylor at utoronto dot ca>\n- Jordan Willis <https://github.com/jwillis0720>\n- Jose Blanca <https://github.com/JoseBlanca>\n- Josha Inglis <https://github.com/joshainglis>\n- Joshua Meyers <https://github.com/JoshuaMeyers>\n- João D Ferreira <https://github.com/jdferreira>\n- João Rodrigues <https://github.com/joaorodrigues>\n- João Vitor F Cavalcante <https://github.com/jvfe>\n- Judith Bernett <https://github.com/JudithBernett>\n- Jun Aruga <https://github.com/junaruga>\n- Juraj Szász <https:/github.com/sars1492>\n- Kai Blin <https://github.com/kblin>\n- Kamil Slowikowski <k no dot slowikowski at gmail dot com>\n- Karthikeyan Singaravelan <https://github.com/tirkarthi>\n- Katharine Lindner <katel at domain worldpath.net>\n- Kevin Jacobs <jacobs at bioinformed dot com>\n- Kevin Wu <https://github.com/kevinwuhoo>\n- Kian Ho <https://github.com/kianho>\n- Kiran Mukhyala <https://github.com/mukhyala>\n- Klaus Kopec <https://github.com/klauskopec>\n- Konrad Förstner <https://github.com/konrad>\n- Konstantin Okonechnikov <k.okonechnikov at domain gmail.com>\n- Konstantin Vdovkin <https://github.com/rtf_const>\n- Konstantinos Zisis <https://github.com/zisikons>\n- Kozo Nishida <https://github.com/kozo2>\n- Kristian Davidsen <https://github.com/krdav>\n- Kristian Rother <https://github.com/krother>\n- Kuan-Yi Li <https://github.com/kuanyili>\n- Kurt Graff <https://github.com/graph1994>\n- Kyle Ellrott <https://github.com/kellrott>\n- Leighton Pritchard <https://github.com/widdowquinn>\n- Lenna Peterson <ark first-name at gmail dot com>\n- Leonhard Heizinger <https://github.com/he-leon>\n- Leszek Pryszcz <https://github.com/lpryszcz>\n- Lewis A. Marshall <https://github.com/lewisamarshall>\n- Luca Monari <https://github.com/Lucandia>\n- Lucas Sinclair <https://github.com/xapple>\n- Lukasz Walejko <https://github.com/lwalejko>\n- Lyn H. <http://github.com/flaar94>\n- Manuel Lera Ramirez <https://github.com/manulera>\n- Manuel Nuno Melo <https://github.com/mnmelo>\n- Marc Colosimo <mcolosimo at domain mitre.org>\n- Marcin Magnus <https://github.com/mmagnus>\n- Marco Galardini <https://github.com/mgalardini>\n- Marie Crane <https://github.com/mariecrane>\n- Mark Amery <https://github.com/ExplodingCabbage>\n- Markus Piotrowski <https://github.com/MarkusPiotrowski>\n- Martin Thoma <https://martin-thoma.com/author/martin-thoma/>\n- Marton Langa <https://github.com/martonlanga>\n- Mateusz Korycinski <https://github.com/mkorycinski>\n- Matt Ruffalo <https://github.com/mruffalo>\n- Matt Shirley <https://github.com/mdshw5>\n- Matteo Sticco <https://github.com/sticken88>\n- Matteo Ugolotti <https://github.com/matteougolotti>\n- Maximilian Greil <https://github.com/MaxGreil>\n- Maximilian Peters <maximili.peters at mail.huji.ac.il>\n- Melissa Gymrek <https://github.com/mgymrek>\n- Meridia Jane Bryant <https://github.com/meridiajane>\n- Michael Hoffman <https://github.com/michaelmhoffman>\n- Michael M. <https://github.com/michaelfm1211>\n- Michael R. Crusoe <https://orcid.org/0000-0002-2961-9670>\n- Michal Kurowski <michal at domain genesilico.pl>\n- Michał J. Gajda <https://github.com/mgajda>\n- Michiel de Hoon <https://github.com/mdehoon>\n- Micky Yun Chan <https://github.com/michiboo>\n- Mike Moritz <https://github.com/mikepmikepm35>\n- Mike Poidinger <Michael.Poidinger at domain eBioinformatics.com>\n- Milind Luthra <https://github.com/milindl>\n- morrme <https://github.com/morrme>\n- Mustafa Anil Tuncel <https://github.com/anilbey>\n- Nader Morshed <https://github.com/naderm>\n- Nate Sutton <https://github.com/nmsutton>\n- Nathan J. Edwards <nje5 at edu domain georgetown>\n- Neil P. <https://github.com/npars>\n- Nick Negretti <https://github.com/nimne>\n- Nicolas Fontrodona <https://github.com/NFontrodona>\n- Nigel Delaney <https://github.com/evolvedmicrobe>\n- Noam Kremen <https://github.com/noamkremen>\n- Olivier Morelle <https://github.com/Oli4>\n- Oscar G. Garcia <https://github.com/oscarmaestre>\n- Osvaldo Zagordi <https://github.com/ozagordi>\n- Owen Solberg <https://github.com/odoublewen>\n- Pamela Russell <https://github.com/pamelarussell>\n- Pascal Schläpfer <https://github.com/pascalschlaepferprivate>\n- Patrick Kunzmann <https://github.com/padix-key>\n- Paul T. Bathen\n- Peter Bienstman <Peter.Bienstman at domain rug.ac.be>\n- Peter Cock <https://github.com/peterjc>\n- Peter Kerpedjiev <https://github.com/pkerpedjiev>\n- Peter Slickers <piet at domain clondiag.com>\n- Philip Bergstrom <https://github.com/phber>\n- Philip Capel <https://github.com/pcapel>\n- Phillip Garland <pgarland at gmail>\n- Pol Estecha <https://github.com/poleshe>\n- Ralf Stephan <https://github.com/rwst>\n- Rasmus Fonseca <https://github.com/RasmusFonseca>\n- rht <https://github.com/rht>\n- Ricardas Ralys\n- Richard Neher <https://github.com/rneher>\n- Rob Miller <https://github.com/rob-miller>\n- Robert Ernst <https://github.com/rernst>\n- Robert Sawicki <https://github.com/Battlesheepu>\n- Rodrigo Dorantes-Gilardi <https://github.com/rodogi>\n- Rona Costello <https://github.com/RonaCostello>\n- Rudolf Koopmann <https://github.com/koopmann>\n- Ryan Stecher <https://github.com/rystecher>\n- Sacha Laurent <https://github.com/Cashalow>\n- Saket Choudhary <https://github.com/saketkc>\n- Sean Aubin <https://github.com/seanny123>\n- Sean Davis <https://github.com/seandavi>\n- Sean Johnson <https://github.com/seanrjohnson>\n- Sean Workman <https://github.com/sean-workman>\n- Sebastian Bassi <https://about.me/bassi>\n- Sergei Lebedev <https://github.com/superbobry>\n- Sergio Valqui <https://github.com/svalqui>\n- Seth Sims <seth.sims at gmail>\n- She Zhang <https://github.com/shz66>\n- Shoichiro Kawauchi <https://github.com/lacrosse91>\n- Shuichiro MAKIGAKI <https://github.com/shuichiro-makigaki>\n- Shyam Saladi <https://github.com/smsaladi>\n- Siddharta Morion <https://github.com/siddhartasr10>\n- Siong Kong <https://github.com/siongkong>\n- Sjoerd de Vries <https://github.com/sjdv1982>\n- Soroush Saffari <https://github.com/sorsaffari>\n- Sourav Singh <https://github.com/souravsingh>\n- Spencer Bliven <https://github.com/sbliven>\n- Stefans Mezulis <https://github.com/StefansM>\n- Steve Bond <https://github.com/biologyguy>\n- Steve Marshall <https://github.com/hungryhoser>\n- Stuart Nelis <https://github.com/biostu24>\n- Sujan Dulal <https://github.com/Dsujan>\n- Sunhwan Jo <https://github.com/sunhwan>\n- Suresh Panneerselvam <https://github.com/Amrithasuresh>\n- Suyash Gupta <https://github.com/sgalpha01>\n- Tarcisio Fedrizzi <https://github.com/hcraT>\n- Tarjei Mikkelsen <https://github.com/tmikkelsen>\n- Ted Cybulski <https://github.com/tcyb>\n- Terry Jones <https://github.com/terrycojones>\n- Thomas Hamelryck <thamelry at domain binf.ku.dk>\n- Thomas Holder <https://github.com/speleo3>\n- Thomas Rosleff Soerensen <rosleff at domain mpiz-koeln.mpg.de>\n- Thomas Schmitt <https://github.com/wurstbonbon>\n- Thomas Sicheritz-Ponten <thomas at domain cbs.dtu.dk>\n- Tiago Antao <https://github.com/tiagoantao>\n- Tianyi Shi <https://github.com/TianyiShi2001>\n- Tim Burke <https://github.com/tipabu>\n- Tom Eulenfeld <https://github.com/trichter>\n- Tommy Carstensen <https://github.com/tommycarstensen>\n- Tyghe Vallard <https://github.com/necrolyte2>\n- Uri Laserson <https://github.com/laserson>\n- Uwe Schmitt <https://github.com/uweschmitt>\n- Valentin Vareškić <https://github.com/valentin994>\n- Veronika Berman <https://github.com/NikiB>\n- Victor Lin <https://github.com/victorlin>\n- Vini Salazar <https://github.com/vinisalazar>\n- Vishesh Soni <https://github.com/vishesh2802>\n- Vladislav Kuznetsov <https://github.com/vladkuz-vk>\n- Walter Gillett <https://github.com/wgillett>\n- Wayne Decatur <https://github.com/fomightez>\n- Wibowo Arindrarto <https://github.com/bow>\n- Will Tyler <https://github.com/Will-Tyler>\n- Wolfgang Schueler <wolfgang at domain proceryon.at>\n- Xiaoyu Zhuo <https://github.com/xzhuo>\n- Yair Benita <Y.Benita at domain pharm.uu.nl>\n- Yanbo Ye <https://github.com/lijax>\n- Yasar L. Ahmed <https://github.com/pyahmed>\n- Yi Hsiao <https://github.com/hsiaoyi0504>\n- Yiming Qu <https://github.com/whatever60>\n- Yogesh Kulkarni <https://https://github.com/yogeshhk>\n- Yu Huang <krocea at domain yahoo.com.cn>\n- Yves Bastide <ybastide at domain irisa.fr>\n- Zachary Sailer <https://github.com/Zsailer>\n- Zaid Ur-Rehman <https://github.com/zaidurrehman>\n- Zheng Ruan <https://github.com/zruan>\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 3.8583984375,
          "content": "Contributing to Biopython\n=========================\n\nWe welcome pull requests to fix bugs or add new features. Please read\nhttp://biopython.org/wiki/Contributing for a general overview about\ncontributing - this file is primarily concerned with the practicalities.\n\n\nLicensing\n---------\n\nBiopython is moving towards dual licensing the code. In your git commit and/or\npull request, please explicitly state that you agree to your contributions\nbeing dual licensed under *both* our original \"Biopython License Agreement\"\nand the more widely used \"3-Clause BSD License\" (see our LICENSE file for more\ndetails).\n\n\nGit Usage\n---------\n\nWe have a git introduction online at http://biopython.org/wiki/GitUsage\n\nIf you are planning to make a pull request, start by creating a new branch\nwith a short but descriptive name (rather than using your master branch).\n\n\nCoding Conventions\n------------------\n\nBiopython tries to follow the coding conventions laid out in PEP8 and PEP257,\nwith the notable exception of existing module names which are not lower case.\n\n- http://www.python.org/dev/peps/pep-0008/\n- http://www.python.org/dev/peps/pep-0257/\n\nFor docstrings (Python's in-code documentation), in addition to PEP257 we are\nusing reStructuredText (RST) markup language which allows basic formatting\nlike *italics* and **bold** once rendered into HTML webpages for our online\nAPI documentation. We also use reStructuredText for files like ``README.rst``.\n\nTo facilitate style checking, we make use of ``pre-commit`` to automatically\nrun various ``flake8`` plugins as well as ``black`` on the Python code, and\n``restructuredtext-lint`` (also known as ``rst-lint``) to check the RST files\ntoo. We also use continuous integration on GitHub to run these checks, but we\nstrongly suggest you install and run ``pre-commit`` in your local machine (see\nbelow).\n\n\nTesting\n-------\n\nAny new feature or functionality will not be accepted without tests. Likewise\nfor any bug fix, we encourage including an additional test. See the testing\nchapter in the Biopython Tutorial for more information on our test framework:\nhttp://biopython.org/DIST/docs/tutorial/Tutorial.html\n\n\nLocal Development\n-----------------\n\nAs mentioned above, to simplify your contributions, we provide a `pre-commit\n<https://pre-commit.com/>`_ configuration. Pre-commit is a Python package which\nautomatically hooks into git. When you run \"git commit\" within the biopython\nrepository, it will automatically run various fast checks (including ``black``,\n``flake8``, ``rst-lint`` and ``doc8``) before the commit happens. To install\nthis, run::\n\n    $ pip install pre-commit\n\n    # Activate pre-commit for biopython\n    $ cd biopython-repository\n    $ pre-commit install\n\n\nLocal Testing\n-------------\n\nPlease always run the full test suite locally before submitting a pull\nrequest, e.g.::\n\n    $ pip install -e .\n    $ python setup.py test\n    $ git commit ...\n\nHave a look at the `related chapter <http://biopython.org/DIST/docs/tutorial/Tutorial.html#chapter%3Atesting>`_ in the documentation for more details.\n\nContinuous Integration\n----------------------\n\nOnce you submit your pull request on GitHub, several automated tests should be\nrun via continuous integration services, and their results reported on the pull\nrequest. These will run most of the Biopython tests (although not with all the\noptional dependencies included), plus also style checks using ``pre-commit``\n(also used for git pre-commit checks, see above).\n\nThe continuous integration tests collect test coverage information via\nCodeCov: https://codecov.io/github/biopython/biopython/\n\n**The continuous integration checks must pass before your pull request will be\nmerged.** Ideally the CodeCov checks will also pass, but we currently do not insist on\nthis when reviewing pull requests.\n\nContributing to the Biopython Tutorial\n--------------------------------------\n\nFor instructions, see `the Biopython Tutorial README <Doc/README.rst>`_\n"
        },
        {
          "name": "DEPRECATED.rst",
          "type": "blob",
          "size": 26.68359375,
          "content": "This file provides documentation for modules in Biopython that have been moved\nor deprecated in favor of other modules. This provides some quick and easy\nto find documentation about how to update your code to work again.\nPython releases go first, then code (modules, methods, functions).\n\nPython\n======\n\nPython 3.9\n----------\nFirst supported in release 1.79, although it was mostly working in 1.78.\nSupport deprecated as of Release 1.84.\n\nPython 3.8\n----------\nFirst supported in release 1.75. Support deprecated as of Release 1.83,\nand no longer supported as of Release 1.84.\n\nPython 3.7\n----------\nNo longer supported as of Release 1.82. First supported in release 1.73.\n\nPython 3.6\n----------\nNo longer supported as of Release 1.80, having triggered a deprecation\nwarning as of release 1.79. First supported in release 1.69.\n\nPython 3.5\n----------\nNo longer supported as of Release 1.77. First supported in release 1.66.\n\nPython 3.4\n----------\nNo longer supported as of Release 1.75, having triggered a deprecation\nwarning in release 1.74. First supported in release 1.64.\n\nPython 3.3\n----------\nNo longer supported as of Release 1.70, having triggered a warning with\nrelease 1.67 onwards.\n\nPython 3.0, 3.1, 3.2\n--------------------\nNever officially supported, these triggered a warning in Release 1.62\nrecommending Python 3.3 or later. As of Biopython Release 1.63 onwards,\ninstallation simply aborts with a error message.\n\nPython 2.7\n----------\nNo longer supported as of Release 1.77 (2020, in line with end-of-life or\nsunset date for Python 2.7 itself), having triggered a warning in prior\nreleases.\n\nJython\n------\nNo longer supported as of Release 1.77 with the end of Python 2 support.\nBiopython was mostly working under Jython 2.7.0, but support for Jython\nwas deprecated as of Release 1.70.\n\nBiopython modules, methods, functions\n=====================================\n\nBio.SeqIO.FastaIO\n-----------------\nParsing a FASTA file using Bio.SeqIO.parse with ``format='fasta'`` interprets\nlines before the first line starting with '>' as comments and skips them. To be\nconsistent with the most common interpretation of the FASTA file format, the\nuse of such comment lines at the beginning of the FASTA file was deprecated in\nBiopython Release 1.85.\nAs an alternative, you can use ``format='fasta-pearson'`` to specify the FASTA\nfile format as defined by William Pearson's FASTA aligner program, allowing for\ncomment lines at the top of the FASTA file (lines anywhere in the file starting\nby ';' are also regarded as comment lines and skipped).\nAnother option is to use ``format='fasta-blast'``; this follows the FASTA file\nformat accepted by BLAST, treating any lines starting with '#', ';', or '!' as\ncomment lines and ignoring them.\n\nBio.SeqIO.UniprotIO\n-------------------\nParsing a UniProt XML file opened in text mode (if the file was opened using\n``open(\"myuniprotfile.xml\")``) was deprecated in Release 1.85, as this may lead\nto garbled characters.  Please open the file in binary mode (as in\n``open(\"myuniprotfile.xml\", \"rb\")``), or let ``Bio.SeqIO.parse`` take care of\nopening and closing files by passing the file name instead of a file handle.\n\nBio.Entrez\n----------\nThe ``egquery`` function wrapping the NCBI EGQuery (Entrez Global Query)\nAPI was deprecated in Release 1.84. The API has stopped working and the\nNCBI said this API was no longer being maintained.\n\nBio.SCOP\n--------\nThe ``search`` function was deprecated in Release 1.84. The CGI API this\nwrapped is no longer available since SCOP moved to the EBI website.\n\nBio.AlignInfo\n-------------\nThe ``pos_specific_score_matrix`` method of the ``SummaryInfo`` class and the\n``PSSM`` class were deprecated in release 1.82. As an alternative, please use\nthe ``alignment`` property of a ``MultipleSeqAlignment`` object to obtains a\nnew-style ``Alignment`` object, and use it to create a ``Bio.motifs.Motif``\nobject. For example,\n\n>>> alignment = msa.alignment\n>>> from Bio.motifs import Motif\n>>> motif = Motif('ACGT', alignment)\n>>> counts = motif.counts\n\nThe ``counts`` object contains the same information as the PSSM returned by\n``pos_specific_score_matrix``, but note that the indices are reversed:\n\n>>> counts[letter][i] == pssm[index][letter]\nTrue\n\nThe ``information_content`` method and the ``ic_vector`` attribute of the\n``SummaryInfo`` class were deprecated in release 1.82. As an alternative,\nplease use the ``relative_entropy`` attribute of the ``motif`` instance (see\nabove); it contains the same values as the ``ic_vector`` attribute, while\n``sum(relative_entropy)`` is equal to the value returned by\n``information_content``.\n\nThe ``replacement_dictionary`` method of the ``SummaryInfo`` class was\ndeprecated in release 1.82. As an alternative, please use the ``alignment``\nproperty of the ``MultipleSeqAlignment`` object to obtain a new-style\n``Alignment`` object, and use its ``substitutions`` attribute to obtain the\nreplacement dictionary:\n\n>>> alignment = msa.alignment\n>>> dictionary = alignment.substitutions\n\nIf the multiple sequence alignment object ``msa`` was obtained using\n``Bio.AlignIO``, then you can obtain a new-style ``Alignment`` object directly\nby using ``Bio.Align.read`` instead of ``Bio.AlignIO.read``, or\n``Bio.Align.parse`` instead of ``Bio.AlignIO.parse``.\n\nThe ``dumb_consensus`` and ``gap_consensus`` methods of the ``SummaryInfo``\nclass were deprecated in Release 1.82.\n\nThe ``print_info_content`` function in ``Bio.Align.AlignInfo`` was deprecated\nin Release 1.82.\n\nBio.kNN\n-------\nDeprecated in release 1.82, consider using scikit-learn instead.\n\nBio.LogisticRegression\n----------------------\nDeprecated in release 1.82, consider using scikit-learn instead.\n\nBio.NaiveBayes\n--------------\nDeprecated in release 1.82, consider using skikit-learn instead.\n\nBio.MaxEntropy\n--------------\nDeprecated in release 1.82, consider using scikit-learn instead.\n\nBio.MarkovModel\n---------------\nDeprecated in release 1.82, consider using hmmlearn\n(https://pypi.org/project/hmmlearn/) instead.\n\nBio.HMM\n-------\nThe `Bio.HMM.DynamicProgramming`, `Bio.HMM.Trainer`, `Bio.HMM.MarkovModel`, and\n`Bio.HMM.Utilities` modules were deprecated in release 1.82. Consider using\nhmmlearn (https://pypi.org/project/hmmlearn/) instead.\n\n\nBio.Data.SCOPData\n-----------------\nDeprecated in release 1.80, and removed in release 1.82. Please use\nBio.Data.PDBData instead.\n\nBio.Application and the command line wrappers using it\n------------------------------------------------------\nDeclared obsolete in release 1.79, and deprecated in release 1.82. Please use\nthe standard library subprocess module directly instead.\n\nBio.Index\n---------\nDeprecated in release 1.75, removed in release 1.77. Was not used anywhere in\nBiopython.\n\nBio.Crystal\n-----------\nDeclared obsolete in release 1.75, deprecated in release 1.76, removed in\nrelease 1.79. PDB NDB files can be opened with Bio.PDB.\n\nBio.motifs\n----------\n``Bio.motifs.mast`` plain-text parsing deprecated in favor of XML parsing as of\nrelease 1.74. Also affects ``Bio.motifs.read`` and ``Bio.motifs.parse`` for the\n``mast`` format.\nThe ``format`` method of the ``Motif`` class in ``Bio.motifs`` was deprecated\nin release 1.77, in favor of a ``__format__`` method that can be used from the\n``format`` built-in function. This decision was reversed in release 1.79.\nThe ``search`` method of the ``Instances`` class in ``Bio.motifs`` was\ndeprecated in release 1.82. Instead of ``instances.search(sequence)``,\n``sequence.search(instances)`` can be used, where sequence is a Seq object.\nThis allows instances to have different lengths.\nThe ``version`` parameter of the ``weblogo`` method of the ``Motif`` class in\n``Bio.motifs`` was deprecated in release 1.83. Using the parameter has no\neffect.\n\nThe ``Instances`` class and the ``instances`` argument of the ``Motif`` class\ninitializer in ``Bio.motifs`` were deprecated in release 1.82. Instead of\n\n>>> from Bio.motifs import Instances\n>>> instances = Instances([Seq('ACGT'), Seq('ACCT'), Seq('AAGT')])\n>>> motif = Motif(alphabet='ACGT', instances=instances)\n\nplease use\n\n>>> from Bio.Align import Alignment\n>>> alignment = Alignment([Seq('ACGT'), Seq('ACCT'), Seq('AAGT')])\n>>> motif = Motif(alphabet='ACGT', alignment=alignment)\n\nThe ``instances`` attribute of the ``Motif`` class  in ``Bio.motifs`` was\ndeprecated in release 1.82. Instead of ``mymotif.instances``, please use\n``mymotif.alignment.sequences``.\n\nThe ``Instance`` class in ``Bio.motifs.meme`` was deprecated in release 1.85.\nThis class is a subclass from ``Seq``, but does not provide any additional\ncapabilities. Please use a ``Seq`` object instead.\n\nBio.Restriction.RanaConfig\n--------------------------\nRemoved in Biopython 1.74 without explicit deprecation period. RanaConfig was\na configuration file containing some constants for Bio.Restriction.PrintFormat\nand ranacompiler.py, a script to update Bio.Restriction.Restriction_Dictionary,\nand which is not part of the Biopython installation. The constants were\nimplemented in the respective modules.\n\nBio.Alphabet\n------------\nDeclared obsolete in Biopython release 1.74, and removed from Biopython in\nrelease 1.78. This module defined an ``Alphabet`` class and various subclasses,\nwhich were used as attributes to ``Seq`` and objects to describe how the\nindividual characters in the sequence string should be interpreted. For\nexample, a string \"AGTACACTGGT\" could be a DNA sequence or a protein sequence\nthat happens to be rich in Alanines, Glycines, Cysteines and Threonines.\nHowever, as the exact definition of the alphabet and its purpose remained\nunclear, this class was removed from Biopython.\nStarting with Biopython 1.78, the molecule type, if specified in the input\nfile, is stored by the ``SeqIO`` parser as ``molecule_type`` in the annotations\nof each ``SeqRecord``. We urge users to use this attribute with caution, as the\nmolecule type means different things in different sequence file formats, and in\na sense the interpretation of ``molecule_type`` can still be ambiguous.\n\n\nBio.ExPASy.sprot_search_ful and ExPASy.sprot_search_de\n------------------------------------------------------\nThese two functions were labelled as broken in Release 1.70, and removed in\nRelease 1.73, since the underlying web-server API no longer exists.\n\nBio.GA\n------\nThis was deprecated in Biopython 1.70, and removed in Release 1.73.\nPlease consider using a dedicated genetic algorithm library like DEAP\ninstead.\n\nBio.NeuralNetwork\n-----------------\nThis was deprecated in Biopython 1.70, and removed in Release 1.73.\nPlease consider using a dedicated machine learning library like\nscikit-learn or TensorFlow instead.\n\nBio.Phylo.CDAOIO.CDAOError\n--------------------------\nThis exception was deprecated as of Release 1.70 as it was no longer used\nwithin Biopython, and removed in Release 1.75.\n\nBio.DocSQL\n----------\nThis was deprecated in Biopython 1.69, and removed in Release 1.71.\n\nBio.CodonAlign\n--------------\nThis new experimental module included in Biopython 1.64 was renamed to\nBio.codonalign in Biopython 1.65 to follow PEP8 module naming rules.\n\nBio.SeqRecord equality\n----------------------\nAs of Release 1.67, the SeqRecord objects (and their subclasses) no longer use\nthe default Python object comparison. Instead they will raise an exception if\nyou try to compare them.\n\nFor backward compatibility and/or to explicitly use object comparison, please\nuse id(record1) == id(record2) instead.\n\nOtherwise please test whichever specific attributes you are interested in\nexplicitly, for example record1.id == record2.id or record1.seq == record.seq\n(see also the note below about sequence equality).\n\nBio.Seq sequence equality\n-------------------------\nAs of Release 1.65, the Seq and MutableSeq objects (and their subclasses)\nuse string-like equality testing and hashing (ignoring any difference in\nalphabet except to issue warnings).\n\nPrior releases used Python's object comparison. Warnings of this change\nwere first added in Release 1.54 (May 2010), with hash warnings present\nfrom Release 1.62 (August 2013) to Release 1.76 (December 2019).\n\nFor backward compatibility and/or to silence warnings about this, please use\nexplicit string comparison, str(seq1) == str(seq2), or object comparison,\nid(seq1) == id(seq2), as required.\n\nBio.Seq.Seq.tostring() and Bio.Seq.MutableSeq.tostring()\n--------------------------------------------------------\nDeprecated in release 1.64, and removed in release 1.73.\nYou should now use str(Bio.Seq.Seq) or str(Bio.Seq.MutableSeq) instead of\nthe tostring() methods.\n\nBio.Seq.Seq.tomutable() and Bio.Seq.MutableSeq.toseq()\n------------------------------------------------------\nDeprecated in release 1.79, removed in release 1.81.\nInstead of myseq.tomutable() or mymutableseq.toseq(), you should now use\nBio.Seq.MutableSeq(myseq) or Bio.Seq.Seq(mymutableseq), respectively.\n\nBio.Seq.Seq.ungap()\n-------------------\nDeclared obsolete in release 1.79, deprecated in release 1.80, and removed in\nrelease 1.82.  Instead of myseq.ungap(), please use myseq.replace(\"-\", \"\").\n\nBio.Seq.UnknownSeq\n------------------\nDeprecated in release 1.79, and removed in release 1.81.\nInstead of ``UnknownSeq(length)``, please use ``Seq(None, length=length)``.\nNote that the sequence contents of a ``Seq`` object constructed in this way\nis considered to be unknown, and any attempt to access the sequence contents\n(for example, by calling ``print`` on the object) will result in an\n``UndefinedSequenceError``.\n\nBio.Seq: Functions and methods ``complement`` and ``reverse_complement``\n------------------------------------------------------------------------\nStarting from release 1.82, the ``inplace`` argument of ``complement`` and\n``reverse_complement`` in ``Bio.Seq`` always default to ``False`` both for\n``Seq`` and ``MutableSeq`` objects.\nTo modify a ``MutableSeq`` in-place, use ``inplace=True``.\n\nIterator .next() methods\n------------------------\nThe .next() method defined for any Biopython iterator is deprecated as of\nBiopython 1.63 under Python 2 (and not present on Python 3). Please replace\nmy_iterator.next() with next(my_iterator) using the new built-in function\nnext() instead. Python 2 support and the remaining next methods were removed\nin release 1.77.\n\nBio.SVDSuperimposer\n-------------------\nAs of Release 1.63, the main class (confusingly also called) SVDSuperimposer\nis best imported as follows:\n\n>>> from Bio.SVDSuperimposer import SVDSuperimposer\n>>> super_imposer = SVDSuperimposer()\n\nThis short form also works on older releases. The longer even more\nconfusing historical alternatives dependent on the double module name\nno longer work, e.g. you can no longer do this:\n\n>>> from Bio.SVDSuperimposer.SVDSuperimposer import SVDSuperimposer\n>>> super_imposer = SVDSuperimposer()\n\nBio.PDB.Vector (the module)\n---------------------------\nDue to a long standing name shadowing problem, ``Bio.PDB.Vector`` was\nboth a class and a module, which defined the class and various other\nfunctions imported to the ``Bio.PDB`` namespace.\n\nAs of Release 1.70, the module has been renamed ``Bio.PDB.vectors``, leaving\n``Bio.PDB.Vector`` to unambiguously mean the class. This is in line with the\nPEP8 naming conventions. A deprecated compatibility stub was left in place\nso that any imports via the old module name will work but raise a warning.\nThis compatibility stub was removed in Release 1.74.\n\nWe expect this to have no impact for the majority of users, unless you do\nsomething like ``from Bio.PDB.Vector import calc_dihedral`` in which case\nuse ``from Bio.PDB import calc_dihedral`` (which will work on older versions\nof Biopython as well).\n\nBio.PDB.Residue\n---------------\nThe ``get_atom`` and ``sort`` methods of the ``Residue`` class were deprecated\nin Release 1.71 and 1.70 respectively, and removed in Release 1.79.\n\nBio.PDB.ResidueDepth\n--------------------\nUse of the ``PDB_TO_XYZR`` bash script was removed from ``get_surface`` in\nRelease 1.79.\n\nBio.PDB.QCPSuperimposer\n-----------------------\nThe ``Bio.PDB.QCPSuperimposer`` module was deprecated in release 1.80, and\nremoved in release 1.82. Please use the ``Bio.PDB.qcprot`` module instead.\n\nBio.SeqFeature\n--------------\n\nRelease 1.82 unfortunately removed the ``.strand``, ``.ref``, and ``.ref_db``\nattributes of the ``SeqFeature`` without a deprecation period. Release 1.83\nrestored but deprecated them. Please use ``.location.strand`` etc instead.\n\nWith the introduction of the CompoundLocation in Release 1.62, the SeqFeature\nattribute sub_features was deprecated. It was removed in Release 1.68.\n\nNote that in Release 1.80 the location_operator argument can no longer be\nused, instead do this via the CompoundLocation object. The location_operator\nargument was removed from the SeqFeature initializer in Release 1.82.\n\nThere were multiple deprecations in Release 1.80, listed below. The\ndeprecated code was removed in Release 1.82.\n\n* Class ``FeatureLocation`` renamed to ``SimpleLocation``, with the old\n  name preserved for now solely for backward compatibility.\n* Arguments ``strand``, ``ref`` and ``ref_db`` to the ``SeqFeature``\n  class - set them via the location object\n* Unused class ``PositionGap`` - originally for very old GenBank files.\n* Location attributes ``location.nofuzzy_start`` and ``location.nofuzzy_end`` -\n  use the location directly or if required ``int(location.start)`` and\n  ``int(location.end)``. This will fail for the ``UnknownPosition``\n  where the nofuzzy aliases returned ``None``.\n* Position attribute ``.position`` returned the (left) position as an\n  integer - use the location directly or if required ``int(position)``,\n  however for ``OneOfPosition``, ``BetweenPosition``, and\n  ``WithinPosition`` that will give the default position rather than\n  the left-most (minimum) value.\n* Position attribute ``.extension`` returned the \"width\", typically\n  zero except for ``OneOfPosition``, ``BetweenPosition``, and\n  ``WithinPosition`` where this must be handled explicitly now.\n* Base class ``AbstractPosition`` was renamed to ``Position``.\n\nBio.Motif\n---------\nDeclared obsolete with a PendingDeprecationWarning in Release 1.61, formally\ndeprecated in Release 1.62, removed in Release 1.67. Please use the newer\nBio.motifs module instead.\n\nAlignAceCommandline and CompareAceCommandline\n---------------------------------------------\nDeprecated in release 1.62, removed in Release 1.67. An up to date version of\nthe software cannot be obtained anymore (affects Bio.Motif and its replacement\nBio.motifs).\n\nBio.SeqIO.Interfaces\n--------------------\nUnused class InterlacedSequenceIterator was deprecated in Release 1.61, and\nremoved in Release 1.64.\n\nClass SequentialSequenceWriter was declared obsolete in Release 1.77,\ndeprecated in Release 1.78, and removed in Release 1.80.\n\nBio.HotRand\n-----------\nObsolete file Bio/HotRand.py was deprecated in Release 1.61, and removed in\nRelease 1.64. Consider using an alternative RNG, or the Python module\n\"randomdotorg\".\n\nBio.Search\n----------\nLong obsolete file Bio/Search.py was deprecated in Release 1.61, and removed\nin Release 1.64.\n\nBio.Blast.NCBIStandalone\n------------------------\nThe three functions for calling the \"legacy\" NCBI BLAST command line tools\nblastall, blastpgp and rpsblast were declared obsolete in Biopython Release\n1.53, deprecated in Release 1.61, and removed in Release 1.64. Please use\nthe BLAST+ wrappers in Bio.Blast.Applications instead.\n\nThe remainder of this module is a parser for the plain text BLAST output,\nwhich was declared obsolete in Release 1.54, and deprecated in Release 1.63.\nThe module was removed in Release 1.72 from the public API. It lives now\nin maintenance mode in Bio.SearchIO._legacy to preserve existing functionality.\nA BiopythonDeprecationWarning was added to this module in Release 1.80.\nThe Bio.SearchIO._legacy module was removed from Biopython in Release 1.82.\n\nFor some time now, both the NCBI and Biopython have encouraged people to\nparse the XML output instead.\n\nBio.Blast.Applications\n----------------------\nNCBI \"legacy\" BLAST tool wrappers FastacmdCommandline, BlastallCommandline,\nBlastpgpCommandline and RpsBlastCommandline were declared obsolete in Release\n1.53, deprecated in Release 1.61, and removed in Release 1.64, having been\nreplaced with wrappers for the new NCBI BLAST+ tools (e.g.\nNcbiblastpCommandline and NcbipsiblastCommandline).\n\nBio.Blast.ParseBlastTable\n-------------------------\nThe parser in ``Bio.Blast.ParseBlastTable`` for tabular output generated by\nNCBI blastpgp was deprecated in Biopython release 1.80, and removed in release\n1.82. To parse tabular output generated by BLAST programs, please use the\n``parse`` function in ``Bio.Align``.\n\nBioSQL.BioSeqDatabase\n---------------------\nThe ``remove_database`` and ``get_all_primary_ids`` methods were removed from\nthe ``DBServer`` class in Release 1.79.\nThe ``get_Seq_by_primary_id`` method was removed from the ``BioSeqDatabase``\nclass in Release 1.79.\n\nBio.Graphics.GenomeDiagram and colour/color, centre/center\n----------------------------------------------------------\nGenomeDiagram originally used colour and centre (UK spelling of color and\ncenter) for argument names.  As part of its integration into Biopython 1.50,\nthis will support both colour and color, and both centre and center, to help\npeople port existing scripts written for the standalone version of\nGenomeDiagram.  However, these were deprecated in Release 1.55 final.\nSupport for centre was removed in Release 1.62, and we intend to eventually\nremove support for colour in later releases of Biopython.\n\nBio.Seq, Bio.MutableSeq and the data property\n---------------------------------------------\nDirect use of the Seq object (and MutableSeq object) .data property is\ndeprecated.  As of Release 1.49, writing to the Seq object's .data property\ntriggered a warning, and this property was made read only in Release 1.53. In\nRelease 1.55 final, accessing the .data property of a Seq object gives a\nDeprecationWarning. The Seq object's .data property was removed in Release\n1.61.  Starting from Release 1.78, accessing the .data property of a MutableSeq\nobject similarly gives a deprecation warning.\n\nBio.SeqUtils\n------------\nFunction quick_FASTA_reader was declared obsolete in Release 1.61,\ndeprecated in Release 1.64, and removed in Release 1.67. Use function\nlist(SimpleFastaParser(handle)) from Bio.SeqIO.FastaIO instead (but\nideally convert your code to using an iterator approach).\n\nThe 'title2ids' argument to FastaIterator in Bio.SeqIO.FastaIO and\nFastqPhredIterator in Bio.SeqIO.QualityIO was deprecated in Release 1.80, and\nremoved in Release 1.82.\nPlease use a generator function to modify the records returned by the parser.\n\nFunction Tm_staluc in Bio.SeqUtils.MeltingTemp was deprecated in Release 1.78,\nand removed in Release 1.80.\n\nThe modules Bio.SeqUtils.CodonUsage and Bio.SeqUtils.CodonUsageIndices were\ndeprecated in Release 1.80, and removed in Release 1.82. Please use the new\nCodonAdaptationIndex class in Bio.SeqUtils instead. Note that this class has\nbeen updated to use modern Python, and may give slightly different results from\nthe CodonAdaptationIndex class in Bio.SeqUtils.CodonUsage, as the calculation\nwas updated to be consistent with the calculated values by Sharp & Li.\n\nFunction 'GC' in Bio.SeqUtils was deprecated in Release 1.80, and removed in\nRelease 1.82. Instead use function 'gc_fraction'.\n\nFunction get_amino_acids_percent in Bio.SeqUtils.ProteinAnalysis was deprecated\nin Release 1.85. Use the amino_acids_percent property instead.\n\nBio.PopGen.Async\n----------------\n``Bio.PopGen.Async`` was deprecated in Release 1.68, removed in Release 1.70.\n\nBio.PopGen.FDist\n----------------\n``Bio.PopGen.FDist`` was deprecated in Release 1.68, removed in Release 1.70.\n\nBio.PopGen.SimCoal\n------------------\n``Bio.PopGen.SimCoal`` was deprecated in Release 1.68, and removed in Release\n1.70.\n\nBio.UniGene\n-----------\nSubmodule Bio.UniGene.UniGene which was an HTML parser was declared obsolete\nin Release 1.59, deprecated in Release 1.61, and removed in Release 1.64.\n\nBio.SubsMat\n-----------\nThe methods ``print_full_mat`` and ``print_mat`` were removed from the\n`SeqMat`` class in Bio.SubsMat in Release 1.79.\nThe Bio.SubsMat module was deprecated in Release 1.78, and removed in Release\n1.80. As an alternative, please consider using Bio.Align.substitution_matrices.\n\nBio.Align\n---------\nThe ``infer_coordinates`` class method of the ``Alignment`` class in\n``Bio.Align`` was deprecated in Release 1.84.  Instead,please use the\n``parse_printed_alignment`` method, which is much faster, and returns both the\nsequences after removing the gaps and the coordinates.\n\nThe ``get_column`` method of the MultipleSeqAlignment was deprecated in\nRelease 1.57 and removed in Release 1.69.\n\nThe ``add_sequence`` method of the MultipleSeqAlignment was deprecated in\nRelease 1.57 and should have been removed in Release 1.69. It was actually\nremoved in Release 1.79.\n\nThe ``format`` method of the MultipleSeqAlignment class and the\nPairwiseAlignment class were deprecated in Release 1.76. This decision was\nreversed in Release 1.79.\n\nThe ``__format__`` method of the Array class in Bio.Align.substitution_matrices\nwas deprecated in Release 1.79.\n\nThe PairwiseAlignment class was deprecated in Release 1.80, and removed in\nRelease 1.82. Please use the new Alignment class instead.\n\nBio.Align.Generic\n-----------------\nThis module which defined to original (Multiple-Sequence) Alignment class was\ndeprecated in Release 1.57 and removed in Release 1.69.\n\nBio.ParserSupport\n-----------------\n``Bio.ParserSupport`` was declared obsolete in Release 1.59, and deprecated in\nRelease 1.63. The Martel specific ``EventGenerator`` was removed in Release\n1.67, and the entire module was removed in Release 1.72.\n\nBio.KDTree\n----------\nThis module was declared obsolete in Release 1.72, deprecated in Release 1.74,\nand removed in Release 1.77. As of Release 1.72, KDTree data structures and\nthe functionality previously available in ``Bio.KDTree`` are provided in a new\nmodule ``Bio.PDB.kdtrees``.\n\nBio.trie, Bio.triefind\n----------------------\nThese modules were declared obsolete in Release 1.72, deprecated in Release\n1.73, and removed in Release 1.77. We suggest pygtrie as an alternative library\nimplementing a trie data structure.\n\nBio.Statistics\n--------------\nThis module was declared obsolete in Release 1.74, deprecated in Release 1.76,\nand removed in Release 1.79.\n\nBio.File\n--------\nThe UndoHandle class was deprecated in Release 1.77, and moved to\nBio/SearchIO/_legacy/ParserSupport.py, which was the only module in\nBiopython still using this class. The UndoHandle class in Bio.File was removed\nin Release 1.79.\n\nBio.FSSP\n-----------\nDeprecated in Release 1.77, and removed in Release 1.79.\n\nBio.Phylo._utils\n----------------\nThe ``draw_graphviz`` function was removed in Release 1.79.\n\nBio.pairwise2\n-------------\nThe ``Bio.pairwise2`` module was deprecated in Release 1.80.\n\nBio.Wise\n--------\nThe ``Bio.Wise`` module was deprecated in Release 1.80, and removed in Release\n1.82.\n\nBio.Nexus\n---------\nThe ``original_taxon_order`` attribute of the ``Nexus`` class in\n``Bio.Nexus.Nexus`` was deprecated in Release 1.80, and removed in\nRelease 1.85.  Please use the ``taxlabels`` attribute instead.\n\nScripts/Restriction/ranacompiler.py\n-----------------------------------\nThe ``is_palindrom`` function was removed in Release 1.79.\n"
        },
        {
          "name": "Doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.0107421875,
          "content": "LICENSE.rst"
        },
        {
          "name": "LICENSE.rst",
          "type": "blob",
          "size": 3.1904296875,
          "content": "Biopython is currently released under the \"Biopython License Agreement\"\n(given in full below). Unless stated otherwise in individual file headers,\nall Biopython's files are under the \"Biopython License Agreement\".\n\nSome files are explicitly dual licensed under your choice of the\n\"Biopython License Agreement\" or the \"BSD 3-Clause License\" (both given\nin full below). This is with the intention of later offering all of\nBiopython under this dual licensing approach.\n\n\n------------------------------------------------------------------------------\n\n\nBiopython License Agreement\n---------------------------\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation with or without modifications and for any purpose and\nwithout fee is hereby granted, provided that any copyright notices\nappear in all copies and that both those copyright notices and this\npermission notice appear in supporting documentation, and that the\nnames of the contributors or copyright holders not be used in\nadvertising or publicity pertaining to distribution of the software\nwithout specific prior permission.\n\nTHE CONTRIBUTORS AND COPYRIGHT HOLDERS OF THIS SOFTWARE DISCLAIM ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL THE\nCONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE\nOR PERFORMANCE OF THIS SOFTWARE.\n\n\n------------------------------------------------------------------------------\n\n\nBSD 3-Clause License\n--------------------\n\nCopyright (c) 1999-2024, The Biopython Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 2.4658203125,
          "content": "# MANIFEST.in\n#\n# This tells distutils what files to distribute.\n\ninclude CONTRIB.rst\ninclude LICENSE.rst\ninclude NEWS.rst\ninclude README.rst\ninclude DEPRECATED.rst\ninclude CONTRIBUTING.rst\n\ninclude MANIFEST.in\n\nrecursive-include Scripts *    # Include scripts.\nrecursive-include Tests *      # Include regression tests.\nrecursive-include Bio *.c      # Include all .c files.\nrecursive-include Bio *.h      # Include headers to compile .c files.\nrecursive-include Doc *.tex    # Include relevant documentation.\nrecursive-include Doc *.pdf\nrecursive-include Doc *.py\nrecursive-include Doc *.html\nrecursive-include Doc *.fasta\nrecursive-include Doc Makefile\nrecursive-include Doc/examples *.aln\nrecursive-include Doc/examples *.faa\nrecursive-include Doc/examples *.xpk\nrecursive-include Doc/examples *.gbk\nrecursive-include Doc/examples *.sth\nrecursive-include Doc/examples *.bgz\nrecursive-include Doc/examples *.xml\nrecursive-include Doc/examples *.psl\nrecursive-include Doc/examples *.dnd\nrecursive-include Doc/examples *.csv\nrecursive-include Doc/images *.png\nrecursive-include Doc/images *.jpg # e.g. the old logo for the Tutorial\nrecursive-include Doc/images *.svg # e.g. the new logo for the Tutorial\ninclude Doc/examples/ls_orchid.gbk.gz\ninclude Doc/examples/ls_orchid.gbk.bz2\ninclude Doc/examples/ec_5.4.2.2.txt \nexclude Doc/_build/\n\n# Include Bio.Cluster, Bio.Affy, Bio.phenotype\n# Note setup.py will only install these if Numpy is installed.\nrecursive-include Bio/Cluster *.py\nrecursive-include Bio/Affy *.py\nrecursive-include Bio/Align *.py\nrecursive-include Bio/phenotype *.py\n\nexclude Tests/Graphics/*   # Exclude test files generated by reportlab.\ninclude Tests/Graphics/README # But include README file to make directory!\n\n# Exclude archive of sample Gck files (automatically downloaded during\n# tests but that we cannot redistribute).\nexclude Tests/Gck/DGVC_GCK.zip\n\n# e.g. from running the unit tests, or PyPy, etc\nglobal-exclude *.pyc *.pyo *.py{} *.py-e\n\n# Include Python type annotation declarations, see PEP-561\ninclude Bio/py.typed\ninclude BioSQL/py.typed\n\n# Make sure the required data files are included.\ninclude Bio/Entrez/DTDs/*.dtd  # Include DTD files for Entrez\ninclude Bio/Entrez/DTDs/*.ent  # Include DTD files for Entrez\ninclude Bio/Entrez/DTDs/*.mod  # Include DTD files for Entrez\ninclude Bio/Entrez/XSDs/*.xsd  # Include XSD files for Entrez\ninclude Bio/Align/substitution_matrices/data/*  # Include precalculated substitution matrices\nexclude Bio/Align/substitution_matrices/data/README.txt\n"
        },
        {
          "name": "NEWS.rst",
          "type": "blob",
          "size": 133.115234375,
          "content": "News for the Biopython Project\n==============================\n\nThis NEWS file contains release notes covering major additions or changes.\nSeparately the DEPRECATED file tracks the removal of obsolete modules or\nfunctions (which are generally not covered here in the NEWS file).\n\nThe news entries for each release are also usually repeated as a blog post at\nhttps://www.open-bio.org/category/obf-projects/biopython/\n\nThe latest news is at the top of this file.\n\n(In progress, not yet released): Biopython 1.85\n===============================================\n\nThis release of Biopython supports Python 3.9, 3.10, 3.11 and 3.12. It\nhas also been tested on PyPy3.9 v7.3.13. Python 3.9 is approaching end of\nlife, our support for it is now deprecated.\n\n``Bio.motifs`` now supports reading PFM from Cys2His2 Zinc Finger Proteins PWM\nPredictor and reading motifs in ``pfm-four-columns`` format will set motif name\nto \"\" instead of None, when no motif name was found.\n\nTests that use assertAlmostEqual calls now use ``places`` parameter with enough\npresision when comparing very small numbers in scientific notation.\n\n``Bio.motifs`` now supports reverse complementing RNA motifs and correctly\ngenerating degenerate consensus sequences for RNA motifs.\n\n``Bio.motifs.minimal`` now supports parsing RNA motifs and parsing motifs\nfor which not all statistics are provided (e.g. missing E-values or nsites).\n\n``Bio.motifs.clusterbuster`` now supports parsing GAP and WEIGHT parameters\nand can optionally write Cluster Buster motif files with floats instead of\nintegers, by specifying the ``precision=<int>`` parameter when writing:\ne.g. motifs.write(motifs, \"clusterbuster\", precision=2)\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alan Medlar\n- Carlos Peña\n- Gert Hulselmans\n- Peter Cock\n- Michiel de Hoon\n\n28 June 2024: Biopython 1.84\n============================\n\nThis release of Biopython supports Python 3.9, 3.10, 3.11 and 3.12. It\nhas also been tested on PyPy3.9 v7.3.13. Python 3.9 is approaching end of\nlife, our support for it is now deprecated.\n\nOur main documentation, the Biopython Tutorial and Cookbook, has been\nconverted from LaTeX to reStructuredText, and combined with the existing API\ndocumentation, into a single more modern and navigable HTML output.\n\nBio.Blast contains a new parser for BLAST XML output as a replacement for the\nold parser in Bio.Blast.NCBIXML. The main differences between the parsers is\nas follows:\n\n* The old parser stores information in a Bio.Blast.NCBIXML.Blast object, with\n  attribute names based on plain-text Blast output. The new parser stores\n  information in a Bio.Blast.Record object. This class follows the DTD that\n  describes the XML in terms of attribute names and dictionary key names,\n  class structure, and object types. This makes it easier to find the detailed\n  description of each field in the NCBI Blast documentation.\n* The old parser stores alignment information directly as seen in the BLAST XML\n  output, i.e. as strings with dashes to represent gaps. The new parser stores\n  the alignment information as a Bio.Align.Alignment object, which can then be\n  used to e.g. print the alignment in a different format.\n\nBio.Blast also contains a new qblast function as a replacement for the old\nqblast function in Bio.Blast.NCBIWWW. The main difference is that the old\nqblast function in Bio.Blast.NCBIWWW returns the BLAST search results as Python\nstrings, while the new qblast returns bytes objects. Note that in Python, to\nparse an XML file it should be opened in binary mode, as the string encoding is\nspecified in the XML data itself. The object returned by the new qblast\nfunction can therefore be passed directly to the BLAST parser. Also, this\nallows data to be downloaded in a binary format such as JSON2, which returns\ndata in a zipped JSON format.\n\nA function called ``Bio.Phylo.to_igraph`` has been added to convert a\n``Bio.Phylo.Tree`` into an ``igraph.Graph`` graph, in parallel to the existing\nfunction to convert the same object into a ``networkx`` graph.\n\nThe PDB module's CE Align code for pairwise structure alignment was cleaned up,\nand the improved CE align code now considers more alignments and selects one of\nthe longer alignments with the smallest RMSD. As a result, users may find\nalignments with slightly smaller RMSDs when using CE Align.\n\nThe PDB module no longer uses the PDB FTP server by default.\nInstead, the PDB module uses the HTTPS server in most cases.\nFor ``get_all_assemblies``, the PDB module now uses the\n`RCSB PDB Search API <https://search.rcsb.org/#search-api>`_ to get all the\nassemblies.\nThe wwPDB organization announced that they plan to deprecate the FTP\nserver by the end of the year. See the announcement\n`here <https://www.wwpdb.org/news/news?year=2023#65562f0ad78e004e766a96c1>`_.\n\nA parser has been added for parsing PDBML (PDB XML) files.\n`PDBML <https://pdbml.wwpdb.org/>`_ is a representation of PDB data in XML format.\nThe PDB chapter of the tutorial is updated to show how to use the PDBML parser.\n\nAdditionally, a parser has been added for BinaryCIF files.\nBinaryCIF is a compact, binary representation of CIF data.\nThe PDB tutorial is updated to show how to use the BinaryCIF parser.\nThe RCSB PDB recommends that users switch from MMTF to BinaryCIF.\nSee the `announcement <https://www.rcsb.org/news/feature/65a1af31c76ca3abcc925d0c>`_.\n\nBio.PDB Structure objects will now issue a warning - instead of an exception - when\ntwo children (e.g. residues) have identical IDs. This can be useful in some\ncases, e.g. renumbering residues in a chain.\n\n``Bio.SeqIO`` now supports reading sequences from the Graphical Fragment\nAssembly (GFA) files with the formats ``gfa1`` and ``gfa2`` (for GFA 1.x and\nGFA 2.0 files respectively). All data outside of segment lines are ignored, such\nas linkage information.\n\nThe UniProt package now includes a method to search UniProt programmatically.\nThe tutorial has been updated with examples of how to use the search method.\nSee the chapter on Swiss-Prot and ExPASy in the tutorial for more information.\n\nThe restriction enzyme ``search`` function now has a consistent behaviour for\ncutting sites lying on the edges of the sequence for enzymes for which\nthe recognition site is different from the cutsite. See issue #4604.\n\nThe PDB package now includes a new module, ``alphafold_db``, for interacting\nwith the AlphaFold DB of predicted protein structures. The module allows users\nto load AlphaFold-predicted structures in the same format as experimentally-predicted\nPDB structures.\n\nNow when reverse complementing a ``SeqRecord`` containing unstranded features\nwith compound locations the order of the sublocations is reversed, to improve\nthe representation of origin-spanning locations. See issue #4611.\n\nUpdated ``Bio.Restriction`` to the April 2024 release of REBASE.\n\nA bug in ``bgzf`` was resolved, restoring the ability to pass a file handle\ndirectly to ``BgzfWriter``.\n\n``Bio.Entrez.local_cache`` can be set to a directory for caching downloaded DTD/XSD files.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Anil Tuncel (first contribution)\n- David Cain\n- Fabio Zanini (first contribution)\n- Joao Rodrigues\n- Judith Bernett (first contribution)\n- Luca Monari (first contribution)\n- Meridia Jane Bryant (first contribution)\n- Manuel Lera-Ramirez\n- Michael M. (first contribution)\n- Michiel de Hoon\n- Peter Cock\n- Rudolf Koopmann (first contribution)\n- Will Tyler (first contribution)\n\n10 January 2024: Biopython 1.83\n===============================\n\nThis release of Biopython supports Python 3.8, 3.9, 3.10, 3.11 and 3.12. It\nhas also been tested on PyPy3.9 v7.3.13. Python 3.8 is approaching end of\nlife, our support for it is now deprecated.\n\nThis release reverts the removal of the ``.strand``, ``.ref``, and ``.ref_db``\nattributes of the ``SeqFeature`` which was done without a deprecation period.\nThey are again aliases for ``.location.strand`` etc, but trigger deprecation\nwarnings.\n\n22 December 2023: Biopython 1.82\n================================\n\nThis release of Biopython supports Python 3.8, 3.9, 3.10, 3.11 and 3.12. It\nhas also been tested on PyPy3.8 v7.3.11.\n\n[NOTE: This release unfortunately removed the ``.strand``, ``.ref``, and\n``.ref_db`` attributes of the ``SeqFeature`` without a deprecation period.\nThis has been addressed in Biopython 1.83, which restores them but starts\nthe formal deprecation cycle.]\n\nThe ``inplace`` argument of ``complement`` and ``reverse_complement`` in\n``Bio.Seq`` now always default to ``False`` both for ``Seq`` and ``MutableSeq``\nobjects. To modify a ``MutableSeq`` in-place, use ``inplace=True``.\n\nA new class ``CodonAligner`` was added to ``Bio.Align``. A ``CodonAligner``\nobject can align a nucleotide sequence to the amino acid sequence it encodes,\nusing a dynamic programming algorithm modeled on ``PairwiseAligner`` to take\nframe shifts into account. The ``CodonAligner`` returns ``Alignment`` objects.\nBy calling the new ``mapall`` method on an ``Alignment`` object storing a\nmultiple sequence alignment of amino acid sequences, with nucleotide-to-amino\nacid alignments generated by ``CodonAligner`` as the argument, a codon-by-codon\nmultiple sequence alignment of nucleotide sequences can be obtained. The new\nsubmodule ``Bio.Align.analysis`` provides functions to estimate synonymous and\nnonsynonymous mutations and to perform the McDonald-Kreitman test on the codon\nmultiple sequence alignments. Together, this provides the same functionality as\nthe ``Bio.codonalign`` module, but uses the standard ``Alignment`` class, and\ndoes not rely on regular expression searching to align a nucleotide sequence to\nan amino acid sequence.\n\nThe ``hmmer3-text`` SearchIO format now also extracts the similarity string of\nthe parsed alignments. This value is available under the 'similarity' key of\nthe ``aln_annotation`` attribute of each HSP, the same as how it is done in\nother SearchIO formats.\n\nHMMER results with the full path to the hmmer executable in the banner are\nnow parsed correctly. This should help Windows users and users with python\ninstallations in non-default locations.\n\nWe now have basic type hint annotations in various modules including ``Seq``,\n``SeqRecord``, and ``SeqIO``. This should help anyone using an editor or IDE\nwith type-aware autocomplete, or in conjunction with mypy as a pre-commit\ncheck this can catch passing the wrong types to Biopython functions/methods.\n\nCalling ``iter`` on a ``PairwiseAlignments`` object returned by a\n``PairwiseAigner`` previously reset the iterator such that it will start from\nthe first alignment when iterating. As a side effect, this will cause all other\niterators of the alignments to reset as well, which is bug prone. Instead,\ncalling ``iter`` on a ``PairwiseAlignments`` object will now return itself. The\niterator can be reset by calling the ``rewind`` method.\n\nCalling ``secondary_structure_fraction()`` on a ``ProtParam.ProteinAnalysis``\nobject historically returned (sheet, turn, helix) while claiming to return\n(helix, turn, sheet). This was fixed to correctly return (helix, turn, sheet).\nAdditionally, the amino acids considered were revised as per recent literature.\n\nThe sequence objects now have ``.removeprefix()`` and ``.removesuffix()``\nmethods matching those added to strings in Python 3.9. They also now have a\n``search`` method to ``Seq`` and ``MutableSeq`` object to search for\nmultiple subsequences at the same time.\n\nThe MMCIFParser now ignores '.' header values.\n\nCalling ``set_angle()`` on a residue dihedral angle previously set only\nthe specified angle, now the default behavior is to update overlapping\nangles as well.  For example, setting Psi (N-CA-CN) now updates the\noverlapping angle N-CA-C-O, as most users would probably expect.\n\nGenerating a structure with default internal coordinates, e.g. from a\nsequence with ``read_PIC_seq()``,  previously selected wrong default\nvalues in many cases.  This has been fixed.\n\nAdded ``make_extended()`` to set a chain to an extended beta strand\nconformation, as the default backbone values reflect the more popular\nalpha helix in most cases.\n\nThe ``Instances`` class and the ``instances`` argument of the ``Motif`` class\ninitializer in ``Bio.motifs`` were deprecated in release 1.82. Instead of\n\n>>> from Bio.motifs import Instances\n>>> instances = Instances([Seq('ACGT'), Seq('ACCT'), Seq('AAGT')])\n>>> motif = Motif(alphabet='ACGT', instances=instances)\n\nplease use\n\n>>> from Bio.Align import Alignment\n>>> alignment = Alignment([Seq('ACGT'), Seq('ACCT'), Seq('AAGT')])\n>>> motif = Motif(alphabet='ACGT', alignment=alignment)\n\nThe ``instances`` attribute of the ``Motif`` class  in ``Bio.motifs`` was\ndeprecated in release 1.82. Instead of ``mymotif.instances``, please use\n``mymotif.alignment.sequences``.\n\nAdditionally, a number of small bugs and typos have been fixed with additions\nto the test suite.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alex Crocker (first contribution)\n- Antonio Trande (first contribution)\n- Arpan Sahoo (first contribution)\n- Benedict Carling (first contribution)\n- Cam McMenamie (first contribution)\n- Ernesto Rodriguez (first contribution)\n- Jacob Byerly (first contribution)\n- João Rodrigues\n- Joe Greener\n- Manuel Lera Ramirez\n- Michael R. Crusoe\n- Michiel de Hoon\n- Peter Cock\n- Ricardas Ralys (first contribution)\n- Rob Miller\n- Thomas Holder\n- Tom Eulenfeld (first contribution)\n- Vladislav Kuznetsov (first contribution)\n- Wibowo Arindrarto\n- Yiming Qu (first contribution)\n\n\n12 February 2023: Biopython 1.81\n================================\n\nThis release of Biopython supports Python 3.7, 3.8, 3.9, 3.10, 3.11. It has\nalso been tested on PyPy3.7 v7.3.5. We intend to drop Python 3.7 support.\n\nThe API documentation and the `Biopython Tutorial and Cookbook` have\nbeen updated to better annotate use and application of the\n``Bio.PDB.internal_coords`` module.\n\n``Bio.Phylo`` now supports ``Alignment`` and ``MultipleSeqAlignment``\nobjects as input.\n\nSeveral improvements and bug fixes to the snapgene parser contributes by\nDamien Goutte-Gattat.\n\nAdditionally, a number of small bugs and typos have been fixed with additions\nto the test suite.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Adam Vandergriff (first contribution)\n- Damien Goutte-Gatta\n- Joe Greener\n- Michiel de Hoon\n- Peter Cock\n- Robert Miller\n- Farhan Khan (first contribution)\n\n18 November 2022: Biopython 1.80\n================================\n\nThis release of Biopython supports Python 3.7, 3.8, 3.9, 3.10, 3.11. It has\nalso been tested on PyPy3.7 v7.3.5.\n\nFunctions ``read``, ``parse``, and ``write`` were added to ``Bio.Align`` to\nread and write ``Alignment`` objects.  String formatting and printing output\nof ``Alignment`` objects from ``Bio.Align`` were changed to support these new\nfunctions. To obtain a string showing the aligned sequence with the appropriate\ngap characters (as previously shown when calling ``format`` on an alignment),\nuse ``alignment[i]``, where ``alignment`` is an ``Alignment`` object and ``i``\nis the index of the aligned sequence.\n\nBecause dict retains the item order by default since Python3.6, all instances\nof ``collections.OrderedDict`` have been replaced by either standard ``dict``\nor where appropriate by ``collections.defaultsdict``.\n\nRobert Miller has updated the ``Bio.PDB.internal_coords`` module  to\nmake better use of Numpy for lossless structure assembly from dihedral\nangles and related internal coordinates.  In addition to speeding the\nassembly step by ~30%, this adds distance plot support (including\nre-generating structures from distance plot data), coordinate space\ntransforms for superimposing residues and their environments, a\nper-chain all-atom array for Atom coordinates, and optional default\nvalues for all internal coordinates.  The internal coordinates module\ncontinues to support extracting dihedral angle, bond angle and bond\nlength (internal coordinates) data, reading/writing structure files of\ninternal coordinates, and OpenSCAD output of structures for 3D CAD/3D\nprinting work.\n\nThe ``Bio.motifs.jaspar.db`` now returns ``tf_family`` and ``tf_class`` as a\nstring array since the JASPAR 2018 release.\n\nThe Local Composition Complexity functions from ``Bio.SeqUtils`` now uses\nbase 4 log instead of 2 as stated in the original reference Konopka (2005),\nSequence Complexity and Composition. https://doi.org/10.1038/npg.els.0005260\n\nAppend mode is now supported in ``Bio.bgzf`` (and a bug parsing blocked GZIP\nfiles with an internal empty block fixed).\n\nThe experimental warning was dropped from ``Bio.phenotype`` (which was new in\nBiopython 1.67).\n\nSequences now have a ``defined`` attribute that returns a boolean indicating\nif the underlying data is defined or not.\n\nThe ``Bio.PDB`` module now includes a structural alignment module, using the\ncombinatorial extension algorithm of Shindyalov and Bourne, commonly known as\nCEAlign. The module allows for two structures to be aligned based solely on\ntheir 3D conformation, ie. in a sequence-independent manner. The method is\nparticularly powerful when the structures shared a very low degree of sequence\nsimilarity. The new module is available in ``Bio.PDB.CEAligner`` with an\ninterface similar to other 3D superimposition modules.\n\nA new module ``Bio.PDB.qcprot`` implements the QCP superposition algorithm in\npure Python, deprecating the existing C implementation. This leads to a slight\nperformance improvement and to much better maintainability. The refactored\n``qcprot.QCPSuperimposer`` class has small changes to its API, to better mirror\nthat of ``Bio.PDB.Superimposer``.\n\nThe ``Bio.PDB.PDBList`` module now allows downloading biological assemblies,\nfor one or more entries of the wwPDB.\n\nIn the ``Bio.Restriction`` module, each restriction enzyme now includes an `id`\nproperty giving the numerical identifier for the REBASE database identifier\nfrom which the enzyme object was created, and a `uri` property with a canonical\n`identifiers.org` link to the database, for use in linked-data representations.\n\nAdd new ``gc_fraction`` function in ``SeqUtils`` and marks ``GC`` for future\ndeprecation.\n\nSupport for the old format (dating back to 2004) of the GN line in SwissProt\nfiles was dropped in ``Bio.SwissProt``.\n\nAdditionally, a number of small bugs and typos have been fixed with additions\nto the test suite.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Andrius Merkys\n- Arup Ghosh (first contribution)\n- Alessio Quercia\n- Aziz Khan\n- Alex Morehead\n- Caio Fontes\n- Chenghao Zhu\n- Christian Brueffer\n- Damien Goutte-Gattat\n- Erik Weßels (first contribution)\n- Erik  Whiting\n- Fabian Egli\n- Fredric Johansson\n- Hongbo Zhu\n- Hussein Faara (first contribution)\n- Manuel Lera Ramirez\n- Jacob Beal (first contribution)\n- Jarrod Millman\n- João Rodrigues\n- Josha Inglis\n- Markus Piotrowski\n- Michiel de Hoon\n- Neil P. (first contribution)\n- Peter Cock\n- Robert Miller\n- Robert Sawicki (first contribution)\n- Sebastian Bassi\n- Sean Aubin\n- Sean Workman (first contribution)\n- Soroush Saffari (first contribution)\n- Tim Burke\n- Valentin Vareškić (first contribution)\n- Robert Miller\n\n\n3 June 2021: Biopython 1.79\n===========================\n\nThis is intended to be our final release supporting Python 3.6. It also\nsupports Python 3.7, 3.8 and 3.9, and has also been tested on PyPy3.6.1 v7.1.1.\n\nThe ``Seq`` and ``MutableSeq`` classes in ``Bio.Seq`` now store their sequence\ncontents as ``bytes`` and ``bytearray`` objects, respectively. Previously, for\n``Seq`` objects a string object was used, and a Unicode array object for\n``MutableSeq`` objects. This was maintained during the transition from Python2\nto Python3. However, a Python2 string object corresponds to a ``bytes`` object\nin Python3, storing the string as a series of 256-bit characters. While\nnon-ASCII characters could be stored in Python2 strings, they were not treated\nas such. For example:\n\nIn Python2::\n\n    >>> s = \"Генетика\"\n    >>> type(s)\n    <class 'str'>\n    >>> len(s)\n    16\n\nIn Python3::\n\n    >>> s = \"Генетика\"\n    >>> type(s)\n    <class 'str'>\n    >>> len(s)\n    8\n\nIn Python3, storing the sequence contents as ``bytes`` and ``bytearray``\nobjects has the further advantage that both support the buffer protocol.\n\nTaking advantage of the similarity between ``bytes`` and ``bytearray``, the\n``Seq`` and ``MutableSeq`` classes now inherit from an abstract base class\n``_SeqAbstractBaseClass`` in ``Bio.Seq`` that implements most of the ``Seq``\nand ``MutableSeq`` methods, ensuring their consistency with each other. For\nmethods that modify the sequence contents, an optional ``inplace`` argument to\nspecify if a new sequence object should be returned with the new sequence\ncontents (if ``inplace`` is ``False``, the default) or if the sequence object\nitself should be modified (if ``inplace`` is ``True``). For ``Seq`` objects,\nwhich are immutable, using ``inplace=True`` raises an exception. For\n``inplace=False``, the default, ``Seq`` objects and ``MutableSeq`` behave\nconsistently.\n\nAs before, ``Seq`` and ``MutableSeq`` objects can be initialized using a string\nobject, which will be converted to a ``bytes`` or ``bytearray`` object assuming\nan ASCII encoding. Alternatively, a ``bytes`` or ``bytearray`` object can be\nused, or an instance of any class inheriting from the new\n``SequenceDataAbstractBaseClass`` abstract base class in ``Bio.Seq``. This\nrequires that the class implements the ``__len__`` and ``__getitem`` methods\nthat return the sequence length and sequence contents on demand. Initializing a\n``Seq`` instance using an instance of a class inheriting from\n``SequenceDataAbstractBaseClass`` allows the ``Seq`` object to be lazy, meaning\nthat its sequence is provided on demand only, without requiring to initialize\nthe full sequence. This feature is now used in ``BioSQL``, providing on-demand\nsequence loading from an SQL database, as well as in a new parser for twoBit\n(.2bit) sequence data added to ``Bio.SeqIO``. This is a lazy parser that allows\nfast access to genome-size DNA sequence files by not having to read the full\ngenome sequence. The new ``_UndefinedSequenceData`` class in ``Bio.Seq``  also\ninherits from ``SequenceDataAbstractBaseClass`` to represent sequences of known\nlength but unknown sequence contents. This provides an alternative to\n``UnknownSeq``, which has now been removed as its definition was ambiguous. For\nexample, in these examples the ``UnknownSeq`` is interpreted as a sequence with\na well-defined sequence contents::\n\n    >>> s = UnknownSeq(3, character=\"A\")\n    >>> s.translate()\n    UnknownSeq(1, character='K')\n    >>> s + \"A\"\n    Seq(\"AAAA\")\n\nA sequence object with an undefined sequence contents can now be created by\nusing ``None`` when creating the ``Seq`` object, together with the sequence\nlength. Trying to access its sequence contents raises an\n``UndefinedSequenceError``::\n\n    >>> s = Seq(None, length=6)\n    >>> s\n    Seq(None, length=6)\n    >>> len(s)\n    6\n    >>> \"A\" in s\n    Traceback (most recent call last):\n    ...\n    Bio.Seq.UndefinedSequenceError: Sequence content is undefined\n    >>> print(s)\n    Traceback (most recent call last):\n    ....\n    Bio.Seq.UndefinedSequenceError: Sequence content is undefined\n\nElement assignment in Bio.PDB.Atom now returns \"X\" when the element cannot be\nunambiguously guessed from the atom name, in accordance with PDB structures.\n\nBio.PDB entities now have a ``center_of_mass()`` method that calculates either\ncenters of gravity or geometry.\n\nNew method ``disordered_remove()`` implemented in Bio.PDB DisorderedAtom and\nDisorderedResidue to remove children.\n\nNew module Bio.PDB.SASA implements the Shrake-Rupley algorithm to calculate\natomic solvent accessible areas without third-party tools.\n\nExpected ``TypeError`` behaviour has been restored to the ``Seq`` object's\nstring like methods (fixing a regression in Biopython 1.78).\n\nThe KEGG ``KGML_Pathway`` KGML output was fixed to produce output that complies\nwith KGML v0.7.2.\n\nParsing motifs in ``pfm-four-rows`` format can now handle motifs with values\nin scientific notation.\n\nParsing motifs in ``minimal`` MEME format will use ``nsites`` when making\nthe count matrix from the frequency matrix, instead of multiply the frequency\nmatrix by 1000000.\n\nBio.UniProt.GOA now parses Gene Product Information (GPI) files version 1.2,\nfiles can be downloaded from the EBI ftp site:\nftp://ftp.ebi.ac.uk/pub/databases/GO/goa/\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Damien Goutte-Gattat\n- Gert Hulselmans\n- João Rodrigues\n- Markus Piotrowski\n- Pascal Schläpfer (first contribution)\n- Leighton Pritchard\n- Sergio Valqui\n- Suyash Gupta\n- Vini Salazar (first contribution)\n\n\n4 September 2020: Biopython 1.78\n================================\n\nThis release of Biopython supports Python 3.6, 3.7 and 3.8. It has also been\ntested on PyPy3.6.1 v7.1.1.\n\nThe main change is that ``Bio.Alphabet`` is no longer used. In some cases you\nwill now have to specify expected letters, molecule type (DNA, RNA, protein),\nor gap character explicitly. Please consult the updated Tutorial and API\ndocumentation for guidance. This simplification has sped up many ``Seq``\nobject methods. See https://biopython.org/wiki/Alphabet for more information.\n\n``Bio.SeqIO.parse()`` is faster with \"fastq\" format due to small improvements\nin the ``Bio.SeqIO.QualityIO`` module.\n\nThe ``SeqFeature`` object's ``.extract()`` method can now be used for\ntrans-spliced locations via an optional dictionary of references.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\nAdditionally, a number of small bugs and typos have been fixed with additions\nto the test suite. There has been further work to follow the Python PEP8,\nPEP257 and best practice standard coding style, and all of the tests have\nbeen reformatted with the ``black`` tool to match the main code base.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Adam Sjøgren (first contribution)\n- Carlos Pena\n- Chris Daley\n- Chris Rands\n- Christian Brueffer\n- Damien Goutte-Gattat\n- João Rodrigues\n- João Vitor F Cavalcante (first contribution)\n- Marie Crane\n- Markus Piotrowski\n- Michiel de Hoon\n- Peter Cock\n- Sergio Valqui\n- Yogesh Kulkarni (first contribution)\n- Zheng Ruan\n\n25 May 2020: Biopython 1.77\n===========================\n\nThis release of Biopython supports Python 3.6, 3.7 and 3.8 It has also been\ntested on PyPy3.6.1 v7.1.1-beta0.\n\n**We have dropped support for Python 2 now.**\n\n``pairwise2`` now allows the input of parameters with keywords and returns the\nalignments as a list of ``namedtuples``.\n\nThe codon tables have been updated to NCBI genetic code table version 4.5,\nwhich adds Cephalodiscidae mitochondrial as table 33.\n\nUpdated ``Bio.Restriction`` to the January 2020 release of REBASE.\n\nA major contribution by Rob Miller to ``Bio.PDB`` provides new methods to\nhandle protein structure transformations using dihedral angles (internal\ncoordinates). The new framework supports lossless interconversion between\ninternal and cartesian coordinates, which, among other uses, simplifies the\nanalysis and manipulation of coordinates of proteins structures.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\nAdditionally, a number of small bugs and typos have been fixed with further\nadditions to the test suite. There has been further work to follow the Python\nPEP8, PEP257 and best practice standard coding style, and all the main code\nbase has been reformatted with the ``black`` tool.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alexander Decurnou (first contribution)\n- Andrei Istrate (first contribution)\n- Andrey Raspopov\n- Artemi Bendandi (first contribution)\n- Austin Varela (first contribution)\n- Chris Daley\n- Chris Rands\n- Deepak Khatri\n- Hielke Walinga (first contribution)\n- Kai Blin\n- Karthikeyan Singaravelan (first contribution)\n- Konstantinos Zisis (first contribution)\n- Markus Piotrowski\n- Michiel de Hoon\n- Peter Cock\n- Rob Miller\n- Sergio Valqui\n- Steve Bond\n- Sujan Dulal (first contribution)\n- Tianyi Shi (first contribution)\n\n20 December 2019: Biopython 1.76\n================================\n\nThis release of Biopython supports Python 2.7, 3.5, 3.6, 3.7 and 3.8. It has\nalso been tested on PyPy2.7.13 v7.1.1 and PyPy3.6.1 v7.1.1-beta0.\n\nWe intend this to be our final release supporting Python 2.7 and 3.5.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\n\n``PDBParser`` and ``PDBIO`` now support PQR format file parsing and input/\noutput.\n\nIn addition to the mainstream ``x86_64`` aka ``AMD64`` CPU architecture, we\nnow also test every contribution on the ``ARM64``, ``ppc64le``, and ``s390x``\nCPUs under Linux thanks to Travis CI. Further post-release testing done by\nDebian and other packagers and distributors of Biopython also covers these\nCPUs.\n\n``Bio.motifs.PositionSpecificScoringMatrix.search()`` method has been\nre-written: it now applies ``.calculate()`` to chunks of the sequence\nto maintain a low memory footprint for long sequences.\n\nAdditionally, a number of small bugs and typos have been fixed with further\nadditions to the test suite. There has been further work to follow the Python\nPEP8, PEP257 and best practice standard coding style, and more of the code\nstyle has been reformatted with the ``black`` tool.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Chris Daley (first contribution)\n- Chris Rands\n- Christian Brueffer\n- Ilya Flyamer (first contribution)\n- Jakub Lipinski (first contribution)\n- Michael R. Crusoe (first contribution)\n- Michiel de Hoon\n- Peter Cock\n- Sergio Valqui\n\n6 November 2019: Biopython 1.75\n===============================\n\nThis release of Biopython supports Python 2.7, 3.5, 3.6, 3.7 and is expected\nto work on the soon to be released Python 3.8. It has also been tested on\nPyPy2.7.13 v7.1.1 and PyPy3.6.1 v7.1.1-beta0.\n\nNote we intend to drop Python 2.7 support in early 2020.\n\nThe restriction enzyme list in ``Bio.Restriction`` has been updated to the\nAugust 2019 release of REBASE.\n\n``Bio.SeqIO`` now supports reading and writing files in the native format of\nChristian Marck's DNA Strider program (\"xdna\" format, also used by Serial\nCloner), as well as reading files in the native formats of GSL Biotech's\nSnapGene (\"snapgene\") and Textco Biosoftware's Gene Construction Kit (\"gck\").\n\n``Bio.AlignIO`` now supports GCG MSF multiple sequence alignments as the \"msf\"\nformat (work funded by the National Marrow Donor Program).\n\nThe main ``Seq`` object now has string-like ``.index()`` and ``.rindex()``\nmethods, matching the existing ``.find()`` and ``.rfind()`` implementations.\nThe ``MutableSeq`` object retains its more list-like ``.index()`` behaviour.\n\nThe ``MMTFIO`` class has been added that allows writing of MMTF file format\nfiles from a Biopython structure object. ``MMTFIO`` has a similar interface to\n``PDBIO`` and ``MMCIFIO``, including the use of a ``Select`` class to write\nout a specified selection. This final addition to read/write support for\nPDB/mmCIF/MMTF in Biopython allows conversion between all three file formats.\n\nValues from mmCIF files are now read in as a list even when they consist of a\nsingle value. This change improves consistency and reduces the likelihood of\nmaking an error, but will require user code to be updated accordingly.\n\n`Bio.motifs.meme` has been updated to parse XML output files from MEME over\nthe plain-text output file. The goal of this change is to parse a more\nstructured data source with minimal loss of functionality upon future MEME\nreleases.\n\n``Bio.PDB`` has been updated to support parsing REMARK 99 header entries from\nPDB-style Astral files.\n\nA new keyword parameter ``full_sequences`` was added to ``Bio.pairwise2``'s\npretty print method ``format_alignment`` to restore the output of local\nalignments to the 'old' format (showing the whole sequences including the\nun-aligned parts instead of only showing the aligned parts).\n\nA new function ``charge_at_pH(pH)`` has been added to ``ProtParam`` and\n``IsoelectricPoint`` in ``Bio.SeqUtils``.\n\nThe ``PairwiseAligner`` in ``Bio.Align`` was extended to allow generalized\npairwise alignments, i.e. alignments of any Python object, for example\nthree-letter amino acid sequences, three-nucleotide codons, and arrays of\nintegers.\n\nA new module ``substitution_matrices`` was added to ``Bio.Align``, which\nincludes an ``Array`` class that can be used as a substitution matrix. As\nthe ``Array`` class is a subclass of a numpy array, mathematical operations\ncan be applied to it directly, and C code that makes use of substitution\nmatrices can directly access the numerical values stored in the substitution\nmatrices. This module is intended as a replacement of ``Bio.SubsMat``,\nwhich is currently unmaintained.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\nAdditionally, a number of small bugs and typos have been fixed with further\nadditions to the test suite, and there has been further work to follow the\nPython PEP8, PEP257 and best practice standard coding style. We have also\nstarted to use the ``black`` Python code formatting tool.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Chris MacRaild\n- Chris Rands\n- Damien Goutte-Gattat (first contribution)\n- Devang Thakkar\n- Harry Jubb\n- Joe Greener\n- Kiran Mukhyala (first contribution)\n- Konstantin Vdovkin\n- Mark Amery\n- Markus Piotrowski\n- Michiel de Hoon\n- Mike Moritz (first contribution)\n- Mustafa Anil Tuncel\n- Nick Negretti\n- Osvaldo Zagordi (first contribution)\n- Peter Cock\n- Peter Kerpedjiev\n- Sergio Valqui\n- Spencer Bliven\n- Victor Lin\n\n\n16 July 2019: Biopython 1.74\n============================\n\nThis release of Biopython supports Python 2.7, 3.4, 3.5, 3.6 and 3.7. However,\nit will be the last release to support Python 3.4 which is now at end-of-life.\nIt has also been tested on PyPy2.7 v6.0.0 and PyPy3.5 v6.0.0.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\nOur core sequence objects (``Seq``, ``UnknownSeq``, and ``MutableSeq``) now\nhave a string-like ``.join()`` method.\n\nThe NCBI now allows longer accessions in the GenBank file LOCUS line, meaning\nthe fields may not always follow the historical column based positions. We\nno longer give a warning when parsing these. We now allow writing such files\n(although with a warning as support for reading them is not yet widespread).\n\nSupport for the ``mysqlclient`` package, a fork of MySQLdb, has been added.\n\nWe now capture the IDcode field from PDB Header records.\n\n``Bio.pairwise2``'s pretty-print output from ``format_alignment`` has been\noptimized for local alignments: If they do not consist of the whole sequences,\nonly the aligned section of the sequences are shown, together with the start\npositions of the sequences (in 1-based notation). Alignments of lists will now\nalso be prettily printed.\n\n``Bio.SearchIO`` now supports parsing the text output of the HHsuite protein\nsequence search tool. The format name is ``hhsuite2-text`` and\n``hhsuite3-text``, for versions 2 and 3 of HHsuite, respectively.\n\n``Bio.SearchIO`` HSP objects has a new attribute called ``output_index``. This\nattribute is meant for capturing the order by which the HSP were output in the\nparsed file and is set with a default value of -1 for all HSP objects. It is\nalso used for sorting the output of ``QueryResult.hsps``.\n\n``Bio.SeqIO.AbiIO`` has been updated to preserve bytes value when parsing. The\ngoal of this change is make the parser more robust by being able to extract\nstring-values that are not utf-8-encoded. This affects all tag values, except\nfor ID and description values, where they need to be extracted as strings\nto conform to the ``SeqRecord`` interface. In this case, the parser will\nattempt to decode using ``utf-8`` and fall back to the system encoding if that\nfails. This change affects Python 3 only.\n\n``Bio.motifs.mast`` has been updated to parse XML output files from MAST over\nthe plain-text output file. The goal of this change is to parse a more\nstructured data source with minimal loss of functionality upon future MAST\nreleases. Class structure remains the same plus an additional attribute\n``Record.strand_handling`` required for diagram parsing.\n\n``Bio.Entrez`` now automatically retries HTTP requests on failure. The\nmaximum number of tries and the sleep between them can be configured by\nchanging ``Bio.Entrez.max_tries`` and ``Bio.Entrez.sleep_between_tries``.\n(The defaults are 3 tries and 15 seconds, respectively.)\n\nThe restriction enzyme list in ``Bio.Restriction`` has been updated to the May\n2019 release of REBASE.\n\nAll tests using the older print-and-compare approach have been replaced by\nunittests following Python's standard testing framework.\n\nOn the documentation side, all the public modules, classes, methods and\nfunctions now have docstrings (built in help strings). Furthermore, the PDF\nversion of the *Biopython Tutorial and Cookbook* now uses syntax coloring\nfor code snippets.\n\nAdditionally, a number of small bugs and typos have been fixed with further\nadditions to the test suite, and there has been further work to follow the\nPython PEP8, PEP257 and best practice standard coding style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Andrey Raspopov (first contribution)\n- Antony Lee\n- Benjamin Rowell (first contribution)\n- Bernhard Thiel\n- Brandon Invergo\n- Catherine Lesuisse\n- Chris Rands\n- Deepak Khatri (first contribution)\n- Gert Hulselmans\n- Jared Andrews\n- Jens Thomas (first contribution)\n- Konstantin Vdovkin\n- Lenna Peterson\n- Mark Amery\n- Markus Piotrowski\n- Micky Yun Chan (first contribution)\n- Nick Negretti\n- Peter Cock\n- Peter Kerpedjiev\n- Ralf Stephan\n- Rob Miller (first contribution)\n- Sergio Valqui\n- Victor Lin\n- Wibowo 'Bow' Arindrarto\n- Zheng Ruan\n\n\n18 December 2018: Biopython 1.73\n================================\n\nThis release of Biopython supports Python 2.7, 3.4, 3.5, 3.6 and 3.7.\nIt has also been tested on PyPy2.7 v6.0.0 and PyPy3.5 v6.0.0.\n\nAs in recent releases, more of our code is now explicitly available under\neither our original \"Biopython License Agreement\", or the very similar but\nmore commonly used \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for\nmore details.\n\nThe dictionary-like indexing in SeqIO and SearchIO will now explicitly preserve\nrecord order to match a behaviour change in the Python standard dict object.\nThis means looping over the index will load the records in the on-disk order,\nwhich will be much faster (previously it would be effectively at random, based\non the key hash sorting).\n\nThe \"grant\" matrix in Bio.SubsMat.MatrixInfo has been replaced as our original\nvalues taken from Gerhard Vogt's old webpages at EMBL Heidelberg were\ndiscovered to be in error. The new values have been transformed following\nVogt's approach, taking the global maximum 215 minus the similarity scores\nfrom the original paper Grantham (1974), to give a distance measure.\n\nAdditionally, a number of small bugs and typos have been fixed with further\nadditions to the test suite, and there has been further work to follow the\nPython PEP8, PEP257 and best practice standard coding style.\n\nDouble-quote characters in GenBank feature qualifier values in ``Bio.SeqIO``\nare now escaped as per the NCBI standard. Improperly escaped values trigger a\nwarning on parsing.\n\nThere is a new command line wrapper for the BWA-MEM sequence mapper.\n\nThe string-based FASTA parsers in ``Bio.SeqIO.FastaIO`` have been optimised,\nwhich also speeds up parsing FASTA files using ``Bio.SeqIO.parse()``.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alona Levy-Jurgenson (first contribution)\n- Ariel Aptekmann\n- Brandon Invergo\n- Catherine Lesuisse\n- Chris Rands\n- Darcy Mason (first contribution)\n- Devang Thakkar (first contribution)\n- Ivan Antonov (first contribution)\n- Jeremy LaBarage (first contribution)\n- Juraj Szász (first contribution)\n- Kai Blin\n- Konstantin Vdovkin (first contribution)\n- Manuel Nuno Melo (first contribution)\n- Maximilian Greil\n- Nick Negretti (first contribution)\n- Peter Cock\n- Rona Costello (first contribution)\n- Spencer Bliven\n- Wibowo 'Bow' Arindrarto\n- Yi Hsiao (first contribution)\n\n\n21 June 2018: Biopython 1.72\n============================\n\nThis release of Biopython supports Python 2.7, 3.4, 3.5 and 3.6.\nIt has also been tested on PyPy2.7 v6.0.0 and PyPy3.5 v6.0.0.\n\nInternal changes to Bio.SeqIO have sped up the SeqRecord .format method and\nSeqIO.write (especially when used in a for loop).\n\nThe MAF alignment indexing in Bio.AlignIO.MafIO has been updated to use\ninclusive end coordinates to better handle searches at end points. This\nwill require you to rebuild any existing MAF index files.\n\nIn this release more of our code is now explicitly available under either our\noriginal \"Biopython License Agreement\", or the very similar but more commonly\nused \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for more details.\n\nThe Entrez module now supports the NCBI API key. Also you can now set a custom\ndirectory for DTD and XSD files. This allows Entrez to be used in environments\nlike AWS Lambda, which restricts write access to specific directories.\nImproved support for parsing NCBI Entrez XML files that use XSD schemas.\n\nInternal changes to our C code mean that NumPy is no longer required at\ncompile time - only at run time (and only for those modules which use NumPy).\n\nSeq, UnknownSeq, MutableSeq and derived classes now support integer\nmultiplication methods, matching native Python string methods.\n\nA translate method has been added to Bio.SeqFeature that will extract a\nfeature and translate it using the codon_start and transl_table qualifiers\nof the feature if they are present.\n\nBio.SearchIO is no longer considered experimental, and so it does not raise\nwarnings anymore when imported.\n\nA new pairwise sequence aligner is available in Bio.Align, as an alternative\nto the existing pairwise sequence aligner in Bio.pairwise2.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Benjamin Vaisvil (first contribution)\n- Blaise Li\n- Chad Parmet\n- Chris Rands\n- Connor T. Skennerton\n- Francesco Gastaldello\n- Michiel de Hoon\n- Pamela Russell (first contribution)\n- Peter Cock\n- Spencer Bliven\n- Stefans Mezulis\n- Wibowo 'Bow' Arindrarto\n\n\n3 April 2018: Biopython 1.71\n============================\n\nThis release of Biopython supports Python 2.7, 3.4, 3.5 and 3.6.\nIt has also been tested on PyPy2.7 v5.10.0 and PyPy3.5 v5.10.1.\n\nPython 3 is the primary development platform for Biopython. We will drop\nsupport for Python 2.7 no later than 2020, in line with the end-of-life or\nsunset date for Python 2.7 itself.\n\nEncoding issues have been fixed in several parsers when reading data files\nwith non-ASCII characters, like accented letters in people's names. This would\nraise ``UnicodeDecodeError: 'ascii' codec can't decode byte ...`` under some\nsystem locale settings.\n\nBio.KEGG can now parse Gene files.\n\nThe multiple-sequence-alignment object used by Bio.AlignIO etc now supports\na per-column annotation dictionary, useful for richly annotated alignments\nin the Stockholm/PFAM format.\n\nThe SeqRecord object now has a translate method, following the approach used\nfor its existing reverse_complement method etc.\n\nThe output of function ``format_alignment`` in ``Bio.pairwise2`` for displaying\na pairwise sequence alignment as text now indicates gaps and mis-matches.\n\nBio.SeqIO now supports reading and writing two-line-per-record FASTA files\nunder the format name \"fasta-2line\", useful if you wish to work without\nline-wrapped sequences.\n\nBio.PDB now contains a writer for the mmCIF file format, which has been the\nstandard PDB archive format since 2014. This allows structural objects to be\nwritten out and facilitates conversion between the PDB and mmCIF file formats.\n\nBio.Emboss.Applications has been updated to fix a wrong parameter in fuzznuc\nwrapper and include a new wrapper for fuzzpro.\n\nThe restriction enzyme list in ``Bio.Restriction`` has been updated to the\nNovember 2017 release of REBASE.\n\nNew codon tables 27-31 from NCBI (NCBI genetic code table version 4.2)\nwere added to Bio.Data.CodonTable. Note that tables 27, 28 and 31 contain\nno dedicated stop codons; the stop codons in these codes have a context\ndependent encoding as either STOP or as amino acid.\n\nIO functions such as ``SeqIO.parse`` now accept any objects which can be passed\nto the builtin ``open`` function. Specifically, this allows using\n``pathlib.Path`` objects under Python 3.6 and newer, as per `PEP 519\n<https://www.python.org/dev/peps/pep-0519/>`_.\n\nBio.SearchIO can now parse InterProScan XML files.\n\nFor Python 3 compatibility, comparison operators for the entities within a\nBio.PDB Structure object were implemented. These allow the comparison of\nmodels, chains, residues, and atoms with the common operators  (==, !=, >, ...)\nComparisons are based on IDs and take the parents of the entity up to the\nmodel level into account. For consistent behaviour of all entities the\noperators for atoms were modified to also consider the parent IDs. NOTE: this\nrepresents a change in behaviour in respect to v1.70 for Atom comparisons. In\norder to mimic the behaviour of previous versions, comparison will have to be\ndone for Atom IDs and alternative locations specifically.\n\nIn this release more of our code is now explicitly available under either our\noriginal \"Biopython License Agreement\", or the very similar but more commonly\nused \"3-Clause BSD License\".  See the ``LICENSE.rst`` file for more details.\n\nAdditionally, a number of small bugs and typos have been fixed with further\nadditions to the test suite, and there has been further work to follow the\nPython PEP8, PEP257 and best practice standard coding style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Adhemar Zerlotini\n- Ariel Aptekmann\n- Chris Rands\n- Christian Brueffer\n- Connor T. Skennerton\n- Erik Cederstrand (first contribution)\n- Fei Qi (first contribution)\n- Francesco Gastaldello\n- James Jeffryes (first contribution)\n- Jerven Bolleman (first contribution)\n- Joe Greener (first contribution)\n- Joerg Schaarschmidt (first contribution)\n- João Rodrigues\n- Jeroen Van Goey\n- Jun Aruga (first contribution)\n- Kai Blin\n- Kozo Nishida\n- Lewis A. Marshall (first contribution)\n- Markus Piotrowski\n- Michiel de Hoon\n- Nicolas Fontrodona (first contribution)\n- Peter Cock\n- Philip Bergstrom (first contribution)\n- rht (first contribution)\n- Saket Choudhary\n- Shuichiro MAKIGAKI (first contribution)\n- Shyam Saladi (first contribution)\n- Siong Kong\n- Spencer Bliven\n- Stefans Mezulis\n- Steve Bond\n- Yasar L. Ahmed (first contribution)\n- Zachary Sailer (first contribution)\n- Zaid Ur-Rehman (first contribution)\n\n\n10 July 2017: Biopython 1.70\n============================\n\nThis release of Biopython supports Python 2.7, 3.4, 3.5 and 3.6 (we have now\ndropped support for Python 3.3). It has also been tested on PyPy v5.7,\nPyPy3.5 v5.8 beta, and Jython 2.7 (although support for Jython is deprecated).\n\nBiopython now has a new logo, contributed by Patrick Kunzmann. Drawing on our\noriginal logo and the current Python logo, this shows a yellow and blue snake\nforming a double helix.\n\nFor installation Biopython now assumes ``setuptools`` is present, and takes\nadvantage of this to declare we require NumPy at install time (except under\nJython). This should help ensure ``pip install biopython`` works smoothly.\n\nBio.AlignIO now supports Mauve's eXtended Multi-FastA (XMFA) file format\nunder the format name \"mauve\" (contributed by Eric Rasche).\n\nBio.ExPASy was updated to fix fetching PROSITE and PRODOC records, and return\ntext-mode handles for use under Python 3.\n\nTwo new arguments for reading and writing blast-xml files have been added\nto the Bio.SearchIO functions (read/parse and write, respectively). They\nare 'use_raw_hit_ids' and 'use_raw_query_ids'. Check out the relevant\nSearchIO.BlastIO documentation for a complete description of what these\narguments do.\n\nBio.motifs was updated to support changes in MEME v4.11.4 output.\n\nThe Bio.Seq sequence objects now have a ``.count_overlap()`` method to\nsupplement the Python string like non-overlap based ``.count()`` method.\n\nThe Bio.SeqFeature location objects can now be compared for equality.\n\nBio.Phylo.draw_graphviz is now deprecated. We recommend using Bio.Phylo.draw\ninstead, or another library or program if more advanced plotting functionality\nis needed.\n\nIn Bio.Phylo.TreeConstruction, the DistanceMatrix class (previously\n_DistanceMatrix) has a new method 'format_phylip' to write Phylip-compatible\ndistance matrix files (contributed by Jordan Willis).\n\nAdditionally, a number of small bugs have been fixed with further additions\nto the test suite, and there has been further work to follow the Python PEP8,\nPEP257 and best practice standard coding style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Aaron Kitzmiller (first contribution)\n- Adil Iqbal (first contribution)\n- Allis Tauri\n- Andrew Guy\n- Ariel Aptekmann (first contribution)\n- Ben Fulton\n- Bertrand Caron (first contribution)\n- Chris Rands (first contribution)\n- Connor T. Skennerton\n- Eric Rasche\n- Eric Talevich\n- Francesco Gastaldello\n- François Coste (first contribution)\n- Frederic Sapet (first contribution)\n- Jimmy O'Donnell (first contribution)\n- Jared Andrews (first contribution)\n- John Kern (first contribution)\n- Jordan Willis (first contribution)\n- João Rodrigues\n- Kai Blin\n- Markus Piotrowski\n- Mateusz Korycinski (first contribution)\n- Maximilian Greil\n- Michiel de Hoon\n- morrme (first contribution)\n- Noam Kremen (first contribution)\n- Patrick Kunzmann (first contribution)\n- Peter Cock\n- Rasmus Fonseca (first contribution)\n- Rodrigo Dorantes-Gilardi (first contribution)\n- Sacha Laurent (first contribution)\n- Sourav Singh\n- Ted Cybulski (first contribution)\n- Tiago Antao\n- Wibowo 'Bow' Arindrarto\n- Zheng Ruan\n\n\n6 April 2017: Biopython 1.69\n============================\n\nThis release of Biopython supports Python 2.7, 3.3, 3.4, 3.5 and 3.6 (we have\nnow dropped support for Python 2.6). It has also been tested on PyPy v5.7,\nPyPy3.5 v5.7 beta, and Jython 2.7.\n\nWe have started to dual-license Biopython under both our original liberal\n\"Biopython License Agreement\", and the very similar but more commonly used\n\"3-Clause BSD License\". In this release a small number of the Python files\nare explicitly available under either license, but most of the code remains\nunder the \"Biopython License Agreement\" only. See the ``LICENSE.rst`` file\nfor more details.\n\nWe now expect and take advantage of NumPy under PyPy, and compile most of the\nBiopython C code modules as well.\n\nBio.AlignIO now supports the UCSC Multiple Alignment Format (MAF) under the\nformat name \"maf\", using new module Bio.AlignIO.MafIO which also offers\nindexed access to these potentially large files using SQLite3 (contributed by\nAndrew Sczesnak, with additional refinements from Adam Novak).\n\nBio.SearchIO.AbiIO has been extended to support parsing FSA files. The\nunderlying format (ABIF) remains the same as AB1 files and so the string\n'abif' is the expected format argument in the main SeqIO functions. AbiIO\ndetermines whether the file is AB1 or FSA based on the presence of specific\ntags.\n\nThe Uniprot parser is now able to parse \"submittedName\" elements in XML files.\n\nThe NEXUS parser handling of internal node comments has been improved, which\nshould help if working with tools like the BEAST TreeAnnotator. Slashes are\nnow also allowed in identifiers.\n\nNew parser for ExPASy Cellosaurus, a cell line database, cell line catalogue,\nand cell line ontology (contributed by Steve Marshall).\n\nFor consistency the Bio.Seq module now offers a complement function (already\navailable as a method on the Seq and MutableSeq objects).\n\nThe SeqFeature object's qualifiers is now an explicitly ordered dictionary\n(note that as of Python 3.6 the Python dict is ordered by default anyway).\nThis helps reproduce GenBank/EMBL files on input/output.\n\nThe Bio.SeqIO UniProt-XML parser was updated to cope with features with\nunknown locations which can be found in mass spec data.\n\nThe Bio.SeqIO GenBank, EMBL, and IMGT parsers now record the molecule type\nfrom the LOCUS/ID line explicitly in the record.annotations dictionary.\nThe Bio.SeqIO EMBL parser was updated to cope with more variants seen in\npatent data files, and the related IMGT parser was updated to cope with\nIPD-IMGT/HLA database files after release v3.16.0 when their ID line changed.\nThe GenBank output now uses colon space to match current NCBI DBLINK lines.\n\nThe Bio.Affy package supports Affymetrix version 4 of the CEL file format,\nin addition to version 3.\n\nThe restriction enzyme list in ``Bio.Restriction`` has been updated to the\nFebruary 2017 release of REBASE.\n\nBio.PDB.PDBList now can download PDBx/mmCif (new default), PDB (old default),\nPDBML/XML and mmtf format protein structures.  This is inline with the RCSB\nrecommendation to use PDBx/mmCif and deprecate the PDB file format. Biopython\nalready has support for parsing mmCif files.\n\nAdditionally, a number of small bugs have been fixed with further additions\nto the test suite, and there has been further work to follow the Python PEP8,\nPEP257 and best practice standard coding style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Aaron Rosenfeld\n- Adam Kurkiewicz (first contribution)\n- Adam Novak (first contribution)\n- Adrian Altenhoff (first contribution)\n- Allis Tauri (first contribution)\n- Andrew Dalke\n- Andrew Guy (first contribution)\n- Andrew Sczesnak (first contribution)\n- Ben Fulton\n- Bernhard Thiel (first contribution)\n- Bertrand Néron\n- Blaise Li (first contribution)\n- Brandon Carter (first contribution)\n- Brandon Invergo\n- Carlos Pena\n- Carlos Ríos\n- Chris Warth\n- Emmanuel Noutahi\n- Foen Peng (first contribution)\n- Francesco Gastaldello (first contribution)\n- Francisco Pina-Martins (first contribution)\n- Hector Martinez (first contribution)\n- Jacek Śmietański\n- Jack Twilley (first contribution)\n- Jeroen Van Goey (first contribution)\n- Joshua Meyers (first contribution)\n- Kurt Graff (first contribution)\n- Lenna Peterson\n- Leonhard Heizinger (first contribution)\n- Marcin Magnus (first contribution)\n- Markus Piotrowski\n- Maximilian Greil (first contribution)\n- Michał J. Gajda (first contribution)\n- Michiel de Hoon\n- Milind Luthra (first contribution)\n- Oscar G. Garcia (first contribution)\n- Owen Solberg\n- Peter Cock\n- Richard Neher (first contribution)\n- Sebastian Bassi\n- Sourav Singh (first contribution)\n- Spencer Bliven (first contribution)\n- Stefans Mezulis\n- Steve Bond\n- Steve Marshall (first contribution)\n- Uri Laserson\n- Veronika Berman (first contribution)\n- Vincent Davis\n- Wibowo 'Bow' Arindrarto\n\n\n25 August 2016: Biopython 1.68\n==============================\n\nThis release of Biopython supports Python 2.6, 2.7, 3.3, 3.4 and 3.5, but\nthis will be our final release to run on Python 2.6. It has also been tested\non PyPy 5.0, PyPy3 version 2.4, and Jython 2.7.\n\nBio.PDB has been extended to parse the RSSB's new binary Macromolecular\nTransmission Format (MMTF, see http://mmtf.rcsb.org), in addition to the\nmmCIF and PDB file formats (contributed by Anthony Bradley). This requires\nan optional external dependency on the mmtf-python library.\n\nModule Bio.pairwise2 has been re-written (contributed by Markus Piotrowski).\nIt is now faster, addresses some problems with local alignments, and also\nnow allows gap insertions after deletions, and vice versa, inspired by the\nhttps://doi.org/10.1101/031500 preprint from Flouri et al.\n\nThe two sample graphical tools SeqGui (Sequence Graphical User Interface)\nand xbbtools were rewritten (SeqGui) or updated (xbbtools) using the tkinter\nlibrary (contributed by Markus Piotrowski). SeqGui allows simple nucleotide\ntranscription, back-transcription and translation into amino acids using\nBio.Seq internally, offering of the NCBI genetic codes supported in Biopython.\nxbbtools is able to open Fasta formatted files, does simple nucleotide\noperations and translations in any reading frame using one of the NCBI genetic\ncodes. In addition, it supports standalone Blast installations to do local\nBlast searches.\n\nNew NCBI genetic code table 26 (Pachysolen tannophilus Nuclear Code) has been\nadded to Bio.Data (and the translation functionality), and table 11 is now\nalso available under the alias Archaeal.\n\nIn line with NCBI website changes, Biopython now uses HTTPS rather than HTTP\nto connect to the NCBI Entrez and QBLAST API.\n\nAdditionally, a number of small bugs have been fixed with further additions\nto the test suite, and there has been further work to follow the Python PEP8\nand best practice standard coding style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Anthony Bradley (first contribution)\n- Ben Fulton\n- Carlos Pena\n- Connor T. Skennerton\n- Iddo Friedberg\n- Kai Blin\n- Kristian Davidsen (first contribution)\n- Markus Piotrowski\n- Olivier Morelle (first contribution)\n- Peter Cock\n- Stefans Mezulis (first contribution)\n- Tiago Antao\n- Travis Wrightsman\n- Uwe Schmitt (first contribution)\n- Xiaoyu Zhuo (first contribution)\n\n\n8 June 2016: Biopython 1.67\n===========================\n\nThis release of Biopython supports Python 2.6, 2.7, 3.3, 3.4 and 3.5, but\nsupport for Python 2.6 is considered to be deprecated. It has also been\ntested on PyPy 5.0, PyPy3 version 2.4, and Jython 2.7.\n\nComparison of SeqRecord objects until now has used the default Python object\ncomparison (are they the same instance in memory?). This can be surprising, but\ncomparing all of the attributes would be too complex. As of this release\nattempting to compare SeqRecord objects should raise an exception instead. If\nyou want the old behaviour, use id(record1) == id(record2) instead.\n\nNew experimental module Bio.phenotype is for working with Phenotype Microarray\nplates in JSON and the machine vendor's CSV format (contributed by Marco\nGalardini).\n\nFollowing the convention used elsewhere in Biopython, there is a new function\nBio.KEGG.read(...) for parsing KEGG files expected to contain a single record\nonly - the existing function Bio.KEGG.parse(...) is intended to be used to\niterate over multi-record files.\n\nWhen a gap character is defined, Bio.Seq will now translate gap codons\n(e.g. \"---\") into a single gap (\"-\") in the protein sequence. The gap character\nis inferred from the Seq object's alphabet, but it can also be passed as an\nargument to the translate method.\n\nThe new NCBI genetic code table 25, covering Candidate Division SR1 and\nGracilibacteria, has been added to Bio.Data (and the translation\nfunctionality).\n\nThe Bio.Entrez interface will automatically use an HTTP POST rather than\nHTTP GET if the URL would exceed 1000 characters. This is based on NCBI\nguidelines and the fact that very long queries like complex searches can\notherwise trigger an HTTP Error 414 Request URI too long.\n\nForeign keys are now used when creating BioSQL databases with SQLite3 (this\nwas not possible until SQLite version 3.6.19). The BioSQL taxonomy code now\nupdates the taxon table left/right keys when updating the taxonomy.\n\nThere have been some fixes to the MMCIF structure parser which now uses\nidentifiers which better match results from the PDB structure parse.\n\nThe restriction enzyme list in ``Bio.Restriction`` has been updated to the\nMay 2016 release of REBASE.\n\nThe mmCIF parser in Bio.PDB.MMCIFParser has been joined by a second version\nwhich only looks at the ATOM and HETATM lines and can be much faster.\n\nThe Bio.KEGG.REST will now return unicode text-based handles, except for\nimages which remain as binary bytes-based handles, making it easier to use\nwith the mostly text-based parsers in Biopython.\n\nNote that the BioSQL test configuration information is now in a new file\nTests/biosql.ini rather than directly in Tests/test_BioSQL_*.py as before.\nYou can make a copy of the provided example file Tests/biosql.ini.sample\nas Tests/biosql.ini and edit this if you wish to run the BioSQL tests.\n\nAdditionally, a number of small bugs have been fixed with further additions\nto the test suite, and there has been further work to follow the Python PEP8\nstandard coding style, and in converting our docstring documentation to use\nthe reStructuredText markup style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Aaron Rosenfeld (first contribution)\n- Anders Pitman (first contribution)\n- Barbara Mühlemann (first contribution)\n- Ben Fulton\n- Ben Woodcroft (first contribution)\n- Brandon Invergo\n- Brian Osborne (first contribution)\n- Carlos Pena\n- Chaitanya Gupta (first contribution)\n- Chris Warth (first contribution)\n- Christiam Camacho (first contribution)\n- Connor T. Skennerton\n- David Koppstein (first contribution)\n- Eric Talevich\n- Jacek Śmietański (first contribution)\n- João D Ferreira (first contribution)\n- João Rodrigues\n- Joe Cora (first contribution)\n- Kai Blin\n- Leighton Pritchard\n- Lenna Peterson\n- Marco Galardini (first contribution)\n- Markus Piotrowski\n- Matt Ruffalo (first contribution)\n- Matteo Sticco (first contribution)\n- Nader Morshed (first contribution)\n- Owen Solberg (first contribution)\n- Peter Cock\n- Steve Bond (first contribution)\n- Terry Jones (first contribution)\n- Vincent Davis\n- Zheng Ruan\n\n\n21 October 2015: Biopython 1.66\n===============================\n\nThis release of Biopython supports Python 2.6, 2.7, 3.3, 3.4 and 3.5, but\nsupport for Python 2.6 is considered to be deprecated. It has also been\ntested on PyPy 2.4 to 2.6, PyPy3 version 2.4, and Jython 2.7.\n\nFurther work on the Bio.KEGG and Bio.Graphics modules now allows drawing KGML\npathways with transparency.\n\nThe Bio.SeqIO \"abi\" parser now decodes almost all the documented fields used\nby the ABIF instruments - including the individual color channels.\n\nBio.PDB now has a QCPSuperimposer module using the Quaternion Characteristic\nPolynomial algorithm for superimposing structures. This is a fast alternative\nto the existing SVDSuperimposer code using singular value decomposition.\n\nBio.Entrez now implements the NCBI Entrez Citation Matching function\n(ECitMatch), which retrieves PubMed IDs (PMIDs) that correspond to a set of\ninput citation strings.\n\nBio.Entrez.parse(...) now supports NCBI XML files using XSD schemas, which\nwill be downloaded and cached like NCBI DTD files.\n\nA subtle bug in how multi-part GenBank/EMBL locations on the reverse strand\nwere parsed into CompoundLocations was fixed: complement(join(...)) as used\nby NCBI worked, but join(complement(...),complement(...),...) as used by\nEMBL/ENSEMBL gave the CompoundLocation parts in the wrong order. A related\nbug when taking the reverse complement of a SeqRecord containing features\nwith CompoundLocations was also fixed.\n\nAdditionally, a number of small bugs have been fixed with further additions\nto the test suite, and there has been further work on conforming to the\nPython PEP8 standard coding style.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alan Medlar (first contribution)\n- Anthony Mathelier (first contribution)\n- Antony Lee (first contribution)\n- Anuj Sharma (first contribution)\n- Ben Fulton (first contribution)\n- Bertrand Néron\n- Brandon Invergo\n- Carlos Pena\n- Christian Brueffer\n- Connor T. Skennerton (first contribution)\n- David Arenillas (first contribution)\n- David Nicholson (first contribution)\n- Emmanuel Noutahi (first contribution)\n- Eric Rasche (first contribution)\n- Fabio Madeira (first contribution)\n- Franco Caramia (first contribution)\n- Gert Hulselmans (first contribution)\n- Gleb Kuznetsov (first contribution)\n- João Rodrigues\n- John Bradley (first contribution)\n- Kai Blin\n- Kian Ho (first contribution)\n- Kozo Nishida (first contribution)\n- Kuan-Yi Li (first contribution)\n- Leighton Pritchard\n- Lucas Sinclair\n- Michiel de Hoon\n- Peter Cock\n- Saket Choudhary\n- Sunhwan Jo (first contribution)\n- Tarcisio Fedrizzi (first contribution)\n- Tiago Antao\n- Vincent Davis\n\n\n17 December 2014: Biopython 1.65 released.\n==========================================\n\nThe Biopython sequence objects now use string comparison, rather than Python's\nobject comparison. This has been planned for a long time with warning messages\nin place (under Python 2, the warnings were sadly missing under Python 3).\n\nThe Bio.KEGG and Bio.Graphics modules have been expanded with support for\nthe online KEGG REST API, and parsing, representing and drawing KGML pathways.\n\nThe Pterobranchia Mitochondrial genetic code has been added to Bio.Data (and\nthe translation functionality), which is the new NCBI genetic code table 24.\n\nThe Bio.SeqIO parser for the ABI capillary file format now exposes all the raw\ndata in the SeqRecord's annotation as a dictionary. This allows further\nin-depth analysis by advanced users.\n\nBio.SearchIO QueryResult objects now allow Hit retrieval using its alternative\nIDs (any IDs listed after the first one, for example as used with the NCBI\nBLAST NR database).\n\nWe have also done some more work applying PEP8 coding styles to Biopython.\n\nBio.SeqUtils.MeltingTemp has been rewritten with new functionality.\n\nThe new experimental module Bio.CodonAlign has been renamed Bio.codonalign\n(and similar lower case PEP8 style module names have been used for the\nsub-modules within this).\n\nBio.SeqIO.index_db(...) and Bio.SearchIO.index_db(...) now store any relative\nfilenames relative to the index file, rather than (as before) relative to the\ncurrent directory at the time the index was built. This makes the indexes\nless fragile, so that they can be used from other working directories. NOTE:\nThis change is backward compatible (old index files work as before), however\nrelative paths in new indexes will not work on older versions of Biopython!\n\nBiopython also seems to work fine under PyPy3 2.4 which implements Python 3.2\nplus unicode string literals.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alan Du (first contribution)\n- Carlos Pena (first contribution)\n- Colin Lappala (first contribution)\n- Christian Brueffer\n- David Bulger (first contribution)\n- Eric Talevich\n- Evan Parker (first contribution)\n- Hongbo Zhu\n- Kai Blin\n- Kevin Wu (first contribution)\n- Leighton Pritchard\n- Leszek Pryszcz (first contribution)\n- Markus Piotrowski\n- Matt Shirley (first contribution)\n- Mike Cariaso (first contribution)\n- Peter Cock\n- Seth Sims (first contribution)\n- Tiago Antao\n- Travis Wrightsman (first contribution)\n- Tyghe Vallard (first contribution)\n- Vincent Davis\n- Wibowo 'Bow' Arindrarto\n- Zheng Ruan\n\n\n29 May 2014: Biopython 1.64 released.\n=====================================\n\nThis release of Biopython supports Python 2.6 and 2.7, 3.3 and also the\nnew 3.4 version. It is also tested on PyPy 2.0 to 2.3, and Jython 2.7b2.\n\nThe new experimental module Bio.CodonAlign facilitates building codon\nalignment and further analysis upon it. This work is from the Google\nSummer of Code (GSoC) project by Zheng Ruan.\n\nBio.Phylo now has tree construction and consensus modules, from the\nGSoC work by Yanbo Ye.\n\nBio.Entrez will now automatically download and cache new NCBI DTD files for\nXML parsing under the user's home directory (using ``~/.biopython`` on\nUnix like systems, and ``$APPDATA/biopython`` on Windows).\n\nBio.Sequencing.Applications now includes a wrapper for the samtools command\nline tool.\n\nBio.PopGen.SimCoal now also supports fastsimcoal.\n\nSearchIO hmmer3-text, hmmer3-tab, and hmmer3-domtab now support output from\nhmmer3.1b1.\n\nThe ``accession`` of QueryResult and Hit objects created when using the\n'hmmer3-tab' format are now properly named as ``accession`` (previously they\nwere ``acc``, deviating from the documentation).\n\nThe ``homology` key in the ``aln_annotation`` attribute of an HSP object in\nBio.SearchIO has been renamed to ``similarity``.\n\nThe Bio.SeqUtils masses and molecular_weight function have been updated.\n\nBioSQL can now use the mysql-connector package (available for Python 2, 3\nand PyPy) as an alternative to MySQLdb (Python 2 only) to connect to a MySQL\ndatabase.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Chunlei Wu (first contribution)\n- Edward Liaw (first contribution)\n- Eric Talevich\n- Leighton Pritchard\n- Manlio Calvi (first contribution)\n- Markus Piotrowski (first contribution)\n- Melissa Gymrek (first contribution)\n- Michiel de Hoon\n- Nigel Delaney\n- Peter Cock\n- Saket Choudhary\n- Tiago Antao\n- Vincent Davis (first contribution)\n- Wibowo 'Bow' Arindrarto\n- Yanbo Ye (first contribution)\n- Zheng Ruan (first contribution)\n\n\n4 December 2013: Biopython 1.63 released.\n=========================================\n\nThis release supports Python 3.3 onwards without conversion via the 2to3\nlibrary. See the Biopython 1.63 beta release notes below for details. Since\nthe beta release we have made some minor bug fixes and test improvements.\n\nThe restriction enzyme list in Bio.Restriction has been updated to the\nDecember 2013 release of REBASE.\n\nAdditional contributors since the beta:\n\n- Gokcen Eraslan (first contribution)\n\n\n12 November 2013: Biopython 1.63 beta released.\n===============================================\n\nThis is a beta release for testing purposes, the main reason for a\nbeta version is the large amount of changes imposed by the removal of\nthe 2to3 library previously required for the support of Python 3.X.\nThis was made possible by dropping Python 2.5 (and Jython 2.5).\n\nThis release of Biopython supports Python 2.6 and 2.7, and also Python\n3.3.\n\nThe Biopython Tutorial & Cookbook, and the docstring examples in the source\ncode, now use the Python 3 style print function in place of the Python 2\nstyle print statement. This language feature is available under Python 2.6\nand 2.7 via::\n\n    from __future__ import print_function\n\nSimilarly we now use the Python 3 style built-in next function in place of\nthe Python 2 style iterators' .next() method. This language feature is also\navailable under Python 2.6 and 2.7.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Chris Mitchell (first contribution)\n- Christian Brueffer\n- Eric Talevich\n- Josha Inglis (first contribution)\n- Konstantin Tretyakov (first contribution)\n- Lenna Peterson\n- Martin Mokrejs\n- Nigel Delaney (first contribution)\n- Peter Cock\n- Sergei Lebedev (first contribution)\n- Tiago Antao\n- Wayne Decatur (first contribution)\n- Wibowo 'Bow' Arindrarto\n\n\n28 August 2013: Biopython 1.62 released.\n========================================\n\nThis is our first release to officially support Python 3, however it is\nalso our final release supporting Python 2.5. Specifically this release\nis supported and tested on standard Python 2.5, 2.6, 2.7 and 3.3.\nIt was also tested under Jython 2.5, 2.7 and PyPy 1.9, 2.0.\n\nSee the Biopython 1.62 beta release notes below for most changes. Since the\nbeta release we have added several minor bug fixes and test improvements.\nAdditional contributors since the beta:\n\n- Bertrand Néron (first contribution)\n- Lenna Peterson\n- Martin Mokrejs\n- Matsuyuki Shirota (first contribution)\n\n\n15 July 2013: Biopython 1.62 beta released.\n===========================================\n\nThis is a beta release for testing purposes, both for new features added,\nand changes to location parsing, but more importantly Biopython 1.62 will\nbe our first release to officially support Python 3.\n\nSpecifically we intend Biopython 1.62 to support standard Python 2.5, 2.6, 2.7\nand 3.3, but the release will also be tested under Jython 2.5, 2.7 and PyPy\n1.9, 2.0 as well. It will be our final release supporting Python 2.5.\n\nThe translation functions will give a warning on any partial codons (and this\nwill probably become an error in a future release). If you know you are dealing\nwith partial sequences, either pad with N to extend the sequence length to a\nmultiple of three, or explicitly trim the sequence.\n\nThe handling of joins and related complex features in Genbank/EMBL files has\nbeen changed with the introduction of a CompoundLocation object. Previously\na SeqFeature for something like a multi-exon CDS would have a child SeqFeature\n(under the sub_features attribute) for each exon. The sub_features property\nwill still be populated for now, but is deprecated and will in future be\nremoved. Please consult the examples in the help (docstrings) and Tutorial.\n\nThanks to the efforts of Ben Morris, the Phylo module now supports the file\nformats NeXML and CDAO. The Newick parser is also significantly faster, and can\nnow optionally extract bootstrap values from the Newick comment field (like\nMolphy and Archaeopteryx do). Nate Sutton added a wrapper for FastTree to\nBio.Phylo.Applications.\n\nNew module Bio.UniProt adds parsers for the GAF, GPA and GPI formats from\nUniProt-GOA.\n\nThe BioSQL module is now supported in Jython. MySQL and PostgreSQL databases\ncan be used. The relevant JDBC driver should be available in the CLASSPATH.\n\nFeature labels on circular GenomeDiagram figures now support the label_position\nargument (start, middle or end) in addition to the current default placement,\nand in a change to prior releases these labels are outside the features which\nis now consistent with the linear diagrams.\n\nThe code for parsing 3D structures in mmCIF files was updated to use the\nPython standard library's shlex module instead of C code using flex.\n\nThe Bio.Sequencing.Applications module now includes a BWA command line wrapper.\n\nBio.motifs supports JASPAR format files with multiple position-frequence\nmatrices.\n\nAdditionally there have been other minor bug fixes and more unit tests.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Alexander Campbell (first contribution)\n- Andrea Rizzi (first contribution)\n- Anthony Mathelier (first contribution)\n- Ben Morris (first contribution)\n- Brad Chapman\n- Christian Brueffer\n- David Arenillas (first contribution)\n- David Martin (first contribution)\n- Eric Talevich\n- Iddo Friedberg\n- Jian-Long Huang (first contribution)\n- Joao Rodrigues\n- Kai Blin\n- Michiel de Hoon\n- Nate Sutton (first contribution)\n- Peter Cock\n- Petra Kubincová (first contribution)\n- Phillip Garland\n- Saket Choudhary (first contribution)\n- Tiago Antao\n- Wibowo 'Bow' Arindrarto\n- Xabier Bello (first contribution)\n\n\n5 February 2013: Biopython 1.61 released.\n=========================================\n\nGenomeDiagram has three new sigils (shapes to illustrate features). OCTO shows\nan octagonal shape, like the existing BOX sigil but with the corners cut off.\nJAGGY shows a box with jagged edges at the start and end, intended for things\nlike NNNNN regions in draft genomes. Finally BIGARROW is like the existing\nARROW sigil but is drawn straddling the axis. This is useful for drawing\nvertically compact figures where you do not have overlapping genes.\n\nNew module Bio.Graphics.ColorSpiral can generate colors along a spiral path\nthrough HSV color space. This can be used to make arbitrary 'rainbow' scales,\nfor example to color features or cross-links on a GenomeDiagram figure.\n\nThe Bio.SeqIO module now supports reading sequences from PDB files in two\ndifferent ways. The \"pdb-atom\" format determines the sequence as it appears in\nthe structure based on the atom coordinate section of the file (via Bio.PDB,\nso NumPy is currently required for this). Alternatively, you can use the\n\"pdb-seqres\" format to read the complete protein sequence as it is listed in\nthe PDB header, if available.\n\nThe Bio.SeqUtils module how has a seq1 function to turn a sequence using three\nletter amino acid codes into one using the more common one letter codes. This\nacts as the inverse of the existing seq3 function.\n\nThe multiple-sequence-alignment object used by Bio.AlignIO etc now supports\nan annotation dictionary. Additional support for per-column annotation is\nplanned, with addition and splicing to work like that for the SeqRecord\nper-letter annotation.\n\nA new warning, Bio.BiopythonExperimentalWarning, has been introduced. This\nmarks any experimental code included in the otherwise stable release. Such\n'beta' level code is ready for wider testing, but still likely to change and\nshould only be tried by early adopters to give feedback via the biopython-dev\nmailing list. We'd expect such experimental code to reach stable status in\none or two releases time, at which point our normal policies about trying to\npreserve backwards compatibility would apply. See also the README file.\n\nThis release also includes Bow's Google Summer of Code work writing a unified\nparsing framework for NCBI BLAST (assorted formats including tabular and XML),\nHMMER, BLAT, and other sequence searching tools. This is currently available\nwith the new BiopythonExperimentalWarning to indicate that this is still\nsomewhat experimental. We're bundling it with the main release to get more\npublic feedback, but with the big warning that the API is likely to change.\nIn fact, even the current name of Bio.SearchIO may change since unless you\nare familiar with BioPerl its purpose isn't immediately clear.\n\nThe Bio.Motif module has been updated and reorganized. To allow for a clean\ndeprecation of the old code, the new motif code is stored in a new module\nBio.motifs, and a PendingDeprecationWarning was added to Bio.Motif.\n\nA faster low level string FASTA based parser SimpleFastaParser has been added\nto Bio.SeqIO.FastaIO which like its sister function for FASTQ files does not\nhave the overhead of constructing SeqRecord objects.\n\nAdditionally there have been other minor bug fixes and more unit tests.\n\nFinally, we are phasing out support for Python 2.5. We will continue support\nfor at least one further release (Biopython 1.62). This could be extended\ngiven feedback from our users (or if the Jython 2.7 release is delayed, since\nthe current stable release Jython 2.5 implemented Python 2.5 only). Focusing\non Python 2.6 and 2.7 only will make writing Python 3 compatible code easier.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Brandon Invergo\n- Bryan Lunt (first contribution)\n- Christian Brueffer (first contribution)\n- David Cain\n- Eric Talevich\n- Grace Yeo (first contribution)\n- Jeffrey Chang\n- Jingping Li (first contribution)\n- Kai Blin (first contribution)\n- Leighton Pritchard\n- Lenna Peterson\n- Lucas Sinclair (first contribution)\n- Michiel de Hoon\n- Nick Semenkovich (first contribution)\n- Peter Cock\n- Robert Ernst (first contribution)\n- Tiago Antao\n- Wibowo 'Bow' Arindrarto\n\n\n25 June 2012: Biopython 1.60 released.\n======================================\n\nNew module Bio.bgzf supports reading and writing BGZF files (Blocked GNU\nZip Format), a variant of GZIP with efficient random access, most commonly\nused as part of the BAM file format. This uses Python's zlib library\ninternally, and provides a simple interface like Python's gzip library.\nUsing this the Bio.SeqIO indexing functions now support BGZF compressed\nsequence files.\n\nThe GenBank/EMBL parser will now give a warning on unrecognised feature\nlocations and continue parsing (leaving the feature's location as None).\nPreviously it would abort with an exception, which was often unhelpful.\n\nThe Bio.PDB.MMCIFParser is now compiled by default (but is still not\navailable under Jython, PyPy or Python 3).\n\nThe SFF parser in Bio.SeqIO now decodes Roche 454 'universal accession\nnumber' 14 character read names, which encode the timestamp of the run,\nthe region the read came from, and the location of the well.\n\nIn the Phylo module, the \"draw\" function for plotting tree objects has become\nmuch more flexible, with improved support for matplotlib conventions and new\nparameters for specifying branch and taxon labels. Writing in the PhyloXML\nformat has been updated to more closely match the output of other programs. A\nwrapper for the program RAxML has been added under Bio.Phylo.Applications,\nalongside the existing wrapper for PhyML.\n\nAdditionally there have been other minor bug fixes and more unit tests.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Brandon Invergo\n- Eric Talevich\n- Jeff Hussmann (first contribution)\n- John Comeau (first contribution)\n- Kamil Slowikowski (first contribution)\n- Kevin Jacobs\n- Lenna Peterson (first contribution)\n- Matt Fenwick (first contribution)\n- Peter Cock\n- Paul T. Bathen\n- Wibowo Arindrarto\n\n\n24 February 2012: Biopython 1.59 released.\n==========================================\n\nPlease note that this release will *not* work on Python 2.4 (while the recent\nreleases have worked despite us not officially supporting this).\n\nThe position objects used in Bio.SeqFeature now act almost like integers,\nmaking dealing with fuzzy locations in EMBL/GenBank files much easier. Note as\npart of this work, the arguments to create fuzzy positions OneOfPosition and\nWithinPosition have changed in a non-backwards compatible way.\n\nThe SeqFeature's strand and any database reference are now properties of the\nFeatureLocation object (a more logical placement), with proxy methods for\nbackwards compatibility. As part of this change, if you print a location\nobject it will now display any strand and database reference information.\n\nThe installation setup.py now supports 'install_requires' when setuptools\nis installed. This avoids the manual dialog when installing Biopython via\neasy_install or pip and numpy is not installed. It also allows user libraries\nthat require Biopython to include it in their install_requires and get\nautomatic installation of dependencies.\n\nBio.Graphics.BasicChromosome has been extended to allow simple sub-features to\nbe drawn on chromosome segments, suitable to show the position of genes, SNPs\nor other loci. Note Bio.Graphics requires the ReportLab library.\n\nBio.Graphics.GenomeDiagram has been extended to allow cross-links between\ntracks, and track specific start/end positions for showing regions. This can\nbe used to imitate the output from the Artemis Comparison Tool (ACT).\nAlso, a new attribute circle_core makes it easier to have an empty space in\nthe middle of a circular diagram (see tutorial).\n\nBio.Align.Applications now includes a wrapper for command line tool Clustal\nOmega for protein multiple sequence alignment.\n\nBio.AlignIO now supports sequential PHYLIP files (as well as interlaced\nPHYLIP files) as a separate format variant.\n\nNew module Bio.TogoWS offers a wrapper for the TogoWS REST API, a web service\nbased in Japan offering access to KEGG, DDBJ, PDBj, CBRC plus access to some\nNCBI, EBI resources including PubMed, GenBank and UniProt. This is much easier\nto use than the NCBI Entrez API, but should be especially useful for Biopython\nusers based in Asia.\n\nBio.Entrez function efetch has been updated to handle the NCBI's stricter\nhandling of multiple ID arguments in EFetch 2.0, however the NCBI have also\nchanged the retmode default argument so you may need to make this explicit.\ne.g. retmode=\"text\"\n\nAdditionally there have been other minor bug fixes and more unit tests.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Andreas Wilm (first contribution)\n- Alessio Papini (first contribution)\n- Brad Chapman\n- Brandon Invergo\n- Connor McCoy\n- Eric Talevich\n- João Rodrigues\n- Konrad Förstner (first contribution)\n- Michiel de Hoon\n- Matej Repič (first contribution)\n- Leighton Pritchard\n- Peter Cock\n\n\n18 August 2011: Biopython 1.58 released.\n========================================\n\nA new interface and parsers for the PAML (Phylogenetic Analysis by Maximum\nLikelihood) package of programs, supporting codeml, baseml and yn00 as well\nas a Python re-implementation of chi2 was added as the Bio.Phylo.PAML module.\n\nBio.SeqIO now includes read and write support for the SeqXML, a simple XML\nformat offering basic annotation support. See Schmitt et al (2011) in\nBriefings in Bioinformatics, https://doi.org/10.1093/bib/bbr025\n\nBio.SeqIO now includes read support for ABI files (\"Sanger\" capillary\nsequencing trace files, containing called sequence with PHRED qualities).\n\nThe Bio.AlignIO \"fasta-m10\" parser was updated to cope with the >>><<< lines\nas used in Bill Pearson's FASTA version 3.36, without this fix the parser\nwould only return alignments for the first query sequence.\n\nThe Bio.AlignIO \"phylip\" parser and writer now treat a dot/period in the\nsequence as an error, in line with the official PHYLIP specification. Older\nversions of our code didn't do anything special with this character. Also,\nsupport for \"phylip-relaxed\" has been added which allows longer record names\nas used in RAxML and PHYML.\n\nOf potential interest to anyone subclassing Biopython objects, any remaining\n\"old style\" Python classes have been switched to \"new style\" classes. This\nallows things like defining properties.\n\nBio.HMM's Viterbi algorithm now expects the initial probabilities explicitly.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Aaron Gallagher (first contribution)\n- Bartek Wilczynski\n- Bogdan T. (first contribution)\n- Brandon Invergo (first contribution)\n- Connor McCoy (first contribution)\n- David Cain (first contribution)\n- Eric Talevich\n- Fábio Madeira (first contribution)\n- Hongbo Zhu\n- Joao Rodrigues\n- Michiel de Hoon\n- Peter Cock\n- Thomas Schmitt (first contribution)\n- Tiago Antao\n- Walter Gillett\n- Wibowo Arindrarto (first contribution)\n\n\n2 April 2011: Biopython 1.57 released.\n======================================\n\nBio.SeqIO now includes an index_db() function which extends the existing\nindexing functionality to allow indexing many files, and more importantly\nthis keeps the index on disk in a simple SQLite3 database rather than in\nmemory in a Python dictionary.\n\nBio.Blast.Applications now includes a wrapper for the BLAST+ blast_formatter\ntool from NCBI BLAST 2.2.24+ or later. This release of BLAST+ added the\nability to run the BLAST tools and save the output as ASN.1 format, and then\nconvert this to any other supported BLAST output format (plain text, tabular,\nXML, or HTML) with the blast_formatter tool. The wrappers were also updated\nto include new arguments added in BLAST 2.2.25+ such as -db_hard_mask.\n\nThe SeqRecord object now has a reverse_complement method (similar to that of\nthe Seq object). This is most useful to reversing per-letter-annotation (such\nas quality scores from FASTQ) or features (such as annotation from GenBank).\n\nBio.SeqIO.write's QUAL output has been sped up, and Bio.SeqIO.convert now\nuses an optimised routine for FASTQ to QUAL making this much faster.\n\nBiopython can now be installed with pip. Thanks to David Koppstein and\nJames Casbon for reporting the problem.\n\nBio.SeqIO.write now uses lower case for the sequence for GenBank, EMBL and\nIMGT output.\n\nThe Bio.PDB module received several fixes and improvements, including starting\nto merge João's work from GSoC 2010; consequently Atom objects now know\ntheir element type and IUPAC mass. (The new features that use these\nattributes won't be included in Biopython until the next release, though, so\nstay tuned.)\n\nThe nodetype hierarchy in the Bio.SCOP.Cla.Record class is now a dictionary\n(previously it was a list of key,value tuples) to better match the standard.\n\nMany thanks to the Biopython developers and community for making this release\npossible, especially the following contributors:\n\n- Brad Chapman\n- Eric Talevich\n- Erick Matsen (first contribution)\n- Hongbo Zhu\n- Jeffrey Finkelstein (first contribution)\n- Joanna & Dominik Kasprzak (first contribution)\n- Joao Rodrigues\n- Kristian Rother\n- Leighton Pritchard\n- Michiel de Hoon\n- Peter Cock\n- Peter Thorpe (first contribution)\n- Phillip Garland\n- Walter Gillett (first contribution)\n\n\n26 November 2010: Biopython 1.56 released.\n==========================================\n\nThis is planned to be our last release to support Python 2.4, however this\ncould be delayed given immediate feedback from our users (e.g. if this proves\nto be a problem in combination with other libraries or a popular Linux\ndistribution).\n\nBio.SeqIO can now read and index UniProt XML files (under format name\n\"uniprot-xml\", which was agreed with EMBOSS and BioPerl for when/if they\nsupport it too).\n\nBio.SeqIO can now read, write and index IMGT files. These are a variant of\nthe EMBL sequence text file format with longer feature indentation.\n\nBio.SeqIO now supports protein EMBL files (used in the EMBL patents database\nfile epo_prt.dat) - previously we only expected nucleotide EMBL files.\n\nThe Bio.Seq translation methods and function will now accept an arbitrary\nCodonTable object (for those of you working on very unusual organisms).\n\nThe SeqFeature object now supports len(feature) giving the length consistent\nwith the existing extract method. Also, it now supports iteration giving the\ncoordinate (with respect to the parent sequence) of each letter within the\nfeature (in frame aware order), and \"in\" which allows you to check if a\n(parent based) coordinate is within the feature location.\n\nBio.Entrez will now try to download any missing NCBI DTD files and cache them\nin the user's home directory.\n\nThe provisional database schema for BioSQL support on SQLite which Biopython\nhas been using since Release 1.53 has now been added to BioSQL, and updated\nslightly.\n\nBio.PopGen.FDist now supports the DFDist command line tool as well as FDist2.\n\nBio.Motif now has a chapter in the Tutorial.\n\n(At least) 13 people have contributed to this release, including 6 new people:\n\n- Andrea Pierleoni (first contribution)\n- Bart de Koning (first contribution)\n- Bartek Wilczynski\n- Bartosz Telenczuk (first contribution)\n- Cymon Cox\n- Eric Talevich\n- Frank Kauff\n- Michiel de Hoon\n- Peter Cock\n- Phillip Garland (first contribution)\n- Siong Kong (first contribution)\n- Tiago Antao\n- Uri Laserson (first contribution)\n\n\n31 August 2010: Biopython 1.55 released.\n========================================\n\nSee the notes below for the Biopython 1.55 beta release for changes since\nBiopython 1.54 was released. Since the beta release we have marked a few\nmodules as obsolete or deprecated, and removed some deprecated code. There\nhave also been a few bug fixes, extra unit tests, and documentation\nimprovements.\n\n(At least) 12 people have contributed to this release, including 6 new people:\n\n- Andres Colubri (first contribution)\n- Carlos Ríos (first contribution)\n- Claude Paroz (first contribution)\n- Cymon Cox\n- Eric Talevich\n- Frank Kauff\n- Joao Rodrigues (first contribution)\n- Konstantin Okonechnikov (first contribution)\n- Michiel de Hoon\n- Nathan Edwards (first contribution)\n- Peter Cock\n- Tiago Antao\n\n\n18 August 2010: Biopython 1.55 beta released.\n=============================================\n\nThis is a beta release for testing purposes, both for new features added,\nand more importantly updates to avoid code deprecated in Python 2.7 or in\nPython 3. This is an important step towards Python 3 support.\n\nWe are phasing out support for Python 2.4. We will continue to support it\nfor at least one further release (Biopython 1.56). This could be delayed\ngiven feedback from our users (e.g. if this proves to be a problem in\ncombination with other libraries or a popular Linux distribution).\n\nThe SeqRecord object now has upper and lower methods (like the Seq object and\nPython strings), which return a new SeqRecord with the sequence in upper or\nlower case and a copy of all the annotation unchanged.\n\nSeveral small issues with Bio.PDB have been resolved, which includes better\nhandling of model numbers, and files missing the element column.\n\nFeature location parsing for GenBank and EMBL files has been rewritten,\nmaking the parser much faster.\n\nAce parsing by SeqIO now uses zero rather than None for the quality score of\nany gaps (insertions) in the contig sequence.\n\nThe BioSQL classes DBServer and BioSeqDatabase now act more like Python\ndictionaries, making it easier to count, delete, iterate over, or check for\nmembership of namespaces and records.\n\nThe command line tool application wrapper classes are now executable, so you\ncan use them to call the tool (using the subprocess module internally) and\ncapture the output and any error messages as strings (stdout and stderr).\nThis avoids having to worry about the details of how best to use subprocess.\n\n(At least) 10 people have contributed to this release, including 5 new people:\n\n- Andres Colubri (first contribution)\n- Carlos Ríos (first contribution)\n- Claude Paroz (first contribution)\n- Eric Talevich\n- Frank Kauff\n- Joao Rodrigues (first contribution)\n- Konstantin Okonechnikov (first contribution)\n- Michiel de Hoon\n- Peter Cock\n- Tiago Antao\n\n\nMay 20, 2010: Biopython 1.54 released.\n======================================\n\nSee the notes below for the Biopython 1.54 beta release for changes since\nBiopython 1.53 was released. Since then there have been some changes to\nthe new Bio.Phylo module, more documentation, and a number of smaller\nbug fixes.\n\n\nApril 2, 2010: Biopython 1.54 beta released.\n============================================\n\nWe are phasing out support for Python 2.4. We will continue to support it\nfor at least two further releases, and at least one year (whichever takes\nlonger), before dropping support for Python 2.4. This could be delayed\ngiven feedback from our users (e.g. if this proves to be a problem in\ncombination with other libraries or a popular Linux distribution).\n\nNew module Bio.Phylo includes support for reading, writing and working with\nphylogenetic trees from Newick, Nexus and phyloXML files. This was work by\nEric Talevich on a Google Summer of Code 2009 project, under The National\nEvolutionary Synthesis Center (NESCent), mentored by Brad Chapman and\nChristian Zmasek.\n\nBio.Entrez includes some more DTD files, in particular eLink_090910.dtd,\nneeded for our NCBI Entrez Utilities XML parser.\n\nThe parse, read and write functions in Bio.SeqIO and Bio.AlignIO will now\naccept filenames as well as handles. This follows a general shift from\nother Python libraries, and does make usage a little simpler. Also\nthe write functions will now accept a single SeqRecord or alignment.\n\nBio.SeqIO now supports writing EMBL files (DNA and RNA sequences only).\n\nThe dictionary-like objects from Bio.SeqIO.index() now support a get_raw\nmethod for most file formats, giving you the original unparsed data from the\nfile as a string. This is useful for selecting a subset of records from a\nfile where Bio.SeqIO.write() does not support the file format (e.g. the\n\"swiss\" format) or where you need to exactly preserve the original layout.\n\nBased on code from Jose Blanca (author of sff_extract), Bio.SeqIO now\nsupports reading, indexing and writing Standard Flowgram Format (SFF)\nfiles which are used by 454 Life Sciences (Roche) sequencers. This means\nyou can use SeqIO to convert from SFF to FASTQ, FASTA and QUAL (as\ntrimmed or untrimmed reads).\n\nAn improved multiple sequence alignment object has been introduced,\nand is used by Bio.AlignIO for input. This is a little stricter than the\nold class but should otherwise be backwards compatible.\n\n(At least) 11 people contributed to this release, including 5 new people:\n\n- Anne Pajon (first contribution)\n- Brad Chapman\n- Christian Zmasek\n- Diana Jaunzeikare (first contribution)\n- Eric Talevich\n- Jose Blanca (first contribution)\n- Kevin Jacobs (first contribution)\n- Leighton Pritchard\n- Michiel de Hoon\n- Peter Cock\n- Thomas Holder (first contribution)\n\n\nDecember 15, 2009: Biopython 1.53 released.\n===========================================\n\nBiopython is now using git for source code control, currently on github. Our\nold CVS repository will remain on the OBF servers in the short/medium term\nas a backup, but will not be updated in future.\n\nThe Bio.Blast.Applications wrappers now covers the new NCBI BLAST C++ tools\n(where blastall is replaced by blastp, blastn, etc, and the command line\nswitches have all been renamed). These will be replacing the old wrappers in\nBio.Blast.NCBIStandalone which are now obsolete, and will be deprecated in\nour next release.\n\nThe plain text BLAST parser has been updated, and should cope with recent\nversions of NCBI BLAST, including the new C++ based version. Nevertheless,\nwe (and the NCBI) still recommend using the XML output for parsing.\n\nThe Seq (and related UnknownSeq) objects gained upper and lower methods,\nlike the string methods of the same name but alphabet aware. The Seq object\nalso gained a new ungap method for removing gap characters in an alphabet\naware manner.\n\nThe SeqFeature object now has an extract method, used with the parent\nsequence (as a string or Seq object) to get the region of that sequence\ndescribed by the feature's location information (including the strand and\nany sub-features for a join). As an example, this is useful to get the\nnucleotide sequence for features in GenBank or EMBL files.\n\nSeqRecord objects now support addition, giving a new SeqRecord with the\ncombined sequence, all the SeqFeatures, and any common annotation.\n\nBio.Entrez includes the new (Jan 2010) DTD files from the NCBI for parsing\nMedLine/PubMed data.\n\nThe NCBI codon tables have been updated from version 3.4 to 3.9, which adds\na few extra start codons, and a few new tables (Tables 16, 21, 22 and 23).\nNote that Table 14 which used to be called \"Flatworm Mitochondrial\" is now\ncalled \"Alternative Flatworm Mitochondrial\", and \"Flatworm Mitochondrial\" is\nnow an alias for Table 9 (\"Echinoderm Mitochondrial\").\n\nThe restriction enzyme list in Bio.Restriction has been updated to the\nNov 2009 release of REBASE.\n\nThe Bio.PDB parser and output code has been updated to understand the\nelement column in ATOM and HETATM lines (based on patches contributed by\nHongbo Zhu and Frederik Gwinner). Bio.PDB.PDBList has also been updated\nfor recent changes to the PDB FTP site (Paul T. Bathen).\n\nSQLite support was added for BioSQL databases (Brad Chapman), allowing access\nto BioSQL through a lightweight embedded SQL engine. Python 2.5+ includes\nsupport for SQLite built in, but on Python 2.4 the optional sqlite3 library\nmust be installed to use this. We currently use a draft BioSQL on SQLite\nschema, which will be merged with the main BioSQL release for use in other\nprojects.\n\nSupport for running Biopython under Jython (using the Java Virtual Machine)\nhas been much improved thanks to input from Kyle Ellrott. Note that Jython\ndoes not support C code - this means NumPy isn't available, and nor are a\nselection of Biopython modules (including Bio.Cluster, Bio.PDB and BioSQL).\nAlso, currently Jython does not parse DTD files, which means the XML parser\nin Bio.Entrez won't work. However, most of the Biopython modules seem fine\nfrom testing Jython 2.5.0 and 2.5.1.\n\n(At least) 12 people contributed to this release, including 3 first timers:\n\n- Bartek Wilczynski\n- Brad Chapman\n- Chris Lasher\n- Cymon Cox\n- Frank Kauff\n- Frederik Gwinner (first contribution)\n- Hongbo Zhu (first contribution)\n- Kyle Ellrott\n- Leighton Pritchard\n- Michiel de Hoon\n- Paul Bathen (first contribution)\n- Peter Cock\n\n\nSeptember 22, 2009: Biopython 1.52 released.\n============================================\n\nThe Population Genetics module now allows the calculation of several tests,\nand statistical estimators via a wrapper to GenePop. Supported are tests for\nHardy-Weinberg equilibrium, linkage disequilibrium and estimates for various\nF statistics (Cockerham and Wier Fst and Fis, Robertson and Hill Fis, etc),\nnull allele frequencies and number of migrants among many others. Isolation\nBy Distance (IBD) functionality is also supported.\n\nNew helper functions Bio.SeqIO.convert() and Bio.AlignIO.convert() allow an\neasier way to use Biopython for simple file format conversions. Additionally,\nthese new functions allow Biopython to offer important file format specific\noptimisations (e.g. FASTQ to FASTA, and interconverting FASTQ variants).\n\nNew function Bio.SeqIO.index() allows indexing of most sequence file formats\n(but not alignment file formats), allowing dictionary like random access to\nall the entries in the file as SeqRecord objects, keyed on the record id.\nThis is especially useful for very large sequencing files, where all the\nrecords cannot be held in memory at once. This supplements the more flexible\nbut memory demanding Bio.SeqIO.to_dict() function.\n\nBio.SeqIO can now write \"phd\" format files (used by PHRED, PHRAD and CONSED),\nallowing interconversion with FASTQ files, or FASTA+QUAL files.\n\nBio.Emboss.Applications now includes wrappers for the \"new\" PHYLIP EMBASSY\npackage (e.g. fneighbor) which replace the \"old\" PHYLIP EMBASSY package (e.g.\neneighbor) whose Biopython wrappers are now obsolete.\n\nSee also the DEPRECATED file, as several old deprecated modules have finally\nbeen removed (e.g. Bio.EUtils which had been replaced by Bio.Entrez).\n\nOn a technical note, this will be the last release using CVS for source code\ncontrol. Biopython is moving from CVS to git.\n\n\nAugust 17, 2009: Biopython 1.51 released.\n=========================================\n\nFASTQ support in Bio.SeqIO has been improved, extended and sped up since\nBiopython 1.50. Support for Illumina 1.3+ style FASTQ files was added in the\n1.51 beta release. Furthermore, we now follow the interpretation agreed on\nthe OBF mailing lists with EMBOSS, BioPerl, BioJava and BioRuby for inter-\nconversion and the valid score range for each FASTQ variant. This means\nSolexa FASTQ scores can be from -5 to 62 (format name \"fastq-solexa\" in\nBio.SeqIO), Illumina 1.3+ FASTQ files have PHRED scores from 0 to 62 (format\nname \"fastq-illumina\"), and Sanger FASTQ files have PHRED scores from 0 to\n93 (format name \"fastq\" or \"fastq-sanger\").\n\nBio.Sequencing.Phd has been updated, for example to cope with missing peak\npositions. The \"phd\" support in Bio.SeqIO has also been updated to record\nthe PHRED qualities (and peak positions) in the SeqRecord's per-letter\nannotation. This allows conversion of PHD files into FASTQ or QUAL which may\nbe useful for meta-assembly.\n\nSee the notes below for the Biopython 1.50 beta release for changes since\nBiopython 1.49 was released. This includes dropping support for Python 2.3,\nremoving our deprecated parsing infrastructure (Martel and Bio.Mindy), and\nhence removing any dependence on mxTextTools.\n\nAdditionally, since the beta, a number of small bugs have been fixed, and\nthere have been further additions to the test suite and documentation.\n\n\nJune 23, 2009: Biopython 1.51 beta released.\n============================================\n\nBiopython no longer supports Python 2.3.  Currently we support Python 2.4,\n2.5 and 2.6.\n\nOur deprecated parsing infrastructure (Martel and Bio.Mindy) has been\nremoved.  This means Biopython no longer has any dependence on mxTextTools.\n\nA few cosmetic issues in GenomeDiagram with arrow sigils and labels on\ncircular diagrams have been fixed.\n\nBio.SeqIO will now write GenBank files with the feature table (previously\nomitted), and a couple of obscure errors parsing ambiguous locations have\nbeen fixed.\n\nBio.SeqIO can now read and write Illumina 1.3+ style FASTQ files (which use\nPHRED quality scores with an ASCII offset of 64) under the format name\n\"fastq-illumina\". Biopython 1.50 supported just \"fastq\" (the original Sanger\nstyle FASTQ files using PHRED scores with an ASCII offset of 33), and\n\"fastq-solexa\" (the original Solexa/Illumina FASTQ format variant holding\nSolexa scores with an ASCII offset of 64) .\n\nFor parsing the \"swiss\" format, Bio.SeqIO now uses the new Bio.SwissProt\nparser, making it about twice as fast as in Biopython 1.50, where the older\nnow deprecated Bio.SwissProt.SProt was used. There should be no functional\ndifferences as a result of this change.\n\nOur command line wrapper objects have been updated to support accessing\nparameters via python properties, and setting of parameters at initiation\nwith keyword arguments.  Additionally Cymon Cox has contributed several new\nmultiple alignment wrappers under Bio.Align.Applications.\n\nA few more issues with Biopython's BioSQL support have been fixed (mostly by\nCymon Cox). In particular, the default PostgreSQL schema includes some rules\nintended for BioPerl support only, which were causing problems in Biopython\n(see BioSQL bug 2839).\n\nThere have also been additions to the tutorial, such as the new alignment\nwrappers, with a whole chapter for the SeqRecord object. We have also added\nto the unit test coverage.\n\n\nApril 20, 2009: Biopython 1.50 released.\n========================================\n\nSee the notes below for the Biopython 1.50 beta release for more details,\nbut the highlights are:\n\n* The SeqRecord supports slicing and per-letter-annotation\n* Bio.SeqIO can read and write FASTQ and QUAL files\n* Bio.Seq now has an UnknownSeq object\n* GenomeDiagram has been integrated into Biopython\n* New module Bio.Motif will later replace Bio.AlignAce and Bio.MEME\n* This will be the final release to support Python 2.3\n* This will be the final release with Martel and Bio.Mindy\n\nSince the 1.50 beta release:\n\n* The NCBI's Entrez EFetch no longer supports rettype=\"genbank\"\n  and \"gb\" (or \"gp\") should be used instead.\n* Bio.SeqIO now supports \"gb\" as an alias for \"genbank\".\n* The Seq object now has string-like startswith and endswith methods\n* Bio.Blast.NCBIXML now has a read function for single record files\n* A few more unit tests were added\n* More documentation\n\n\nApril 3, 2009: Biopython 1.50 beta released.\n============================================\n\nThe SeqRecord object has a new dictionary attribute, letter_annotations,\nwhich is for holding per-letter-annotation information like sequence\nquality scores or secondary structure predictions.  As part of this work,\nthe SeqRecord object can now be sliced to give a new SeqRecord covering\njust part of the sequence.  This will slice the per-letter-annotation to\nmatch, and will also include any SeqFeature objects as appropriate.\n\nBio.SeqIO can now read and write FASTQ and QUAL quality files using PHRED\nquality scores (Sanger style, also used for Roche 454 sequencing), and FASTQ\nfiles using Solexa/Illumina quality scores.\n\nThe Bio.Seq module now has an UnknownSeq object, used for when we have a\nsequence of known length, but unknown content.  This is used in parsing\nGenBank and EMBL files where the sequence may not be present (e.g. for a\ncontig record) and when parsing QUAL files (which don't have the sequence)\n\nGenomeDiagram by Leighton Pritchard has been integrated into Biopython as\nthe Bio.Graphics.GenomeDiagram module  If you use this code, please cite the\npublication Pritchard et al. (2006), Bioinformatics 22 616-617.  Note that\nlike Bio.Graphics, this requires the ReportLab python library.\n\nA new module Bio.Motif has been added, which is intended to replace the\nexisting Bio.AlignAce and Bio.MEME modules.\n\nThe set of NCBI DTD files included with Bio.Entrez has been updated with the\nrevised files the NCBI introduced on 1 Jan 2009.\n\nMinor fix to BioSQL for retrieving references and comments.\n\nBio.SwissProt has a new faster parser which will be replacing the older\nslower code in Bio.SwissProt.SProt (which we expect to deprecate in the next\nrelease).\n\nWe've also made some changes to our test framework, which is now given a\nwhole chapter in the tutorial.  This intended to help new developers or\ncontributors wanting to improve our unit test coverage.\n\n\nNovember 21, 2008: Biopython 1.49 released.\n===========================================\n\nSee the notes below for the Biopython 1.49 beta release for more details,\nbut the highlights are:\n\n* Biopython has transitioned from Numeric to NumPy\n* Martel and Bio.Mindy are now deprecated\n\nSince the 1.49 beta release:\n\n* A couple of NumPy issues have been resolved\n* Further small improvements to BioSQL\n* Bio.PopGen.SimCoal should now work on Windows\n* A few more unit tests were added\n\n\nNovember 7, 2008: Biopython 1.49 beta released.\n===============================================\n\nBiopython has transitioned from Numeric to NumPy.  Please move to NumPy.\n\nA number of small changes have been made to support Python 2.6 (mostly\navoiding deprecated functionality), and further small changes have been\nmade for better compatibility with Python 3 (this work is still ongoing).\nHowever, we intend to support Python 2.3 for only a couple more releases.\n\nAs part of the Numeric to NumPy migration, Bio.KDTree has been rewritten in\nC instead of C++ which therefore simplifies building Biopython from source.\n\nMartel and Bio.Mindy are now considered to be deprecated, meaning mxTextTools\nis no longer required to use Biopython.  See the DEPRECATED file for details\nof other deprecations.\n\nThe Seq object now supports more string like methods (gaining find, rfind,\nsplit, rsplit, strip, lstrip and rstrip in addition to previously supported\nmethods like count).  Also, biological methods transcribe, back_transcribe\nand translate have been added, joining the pre-existing reverse_complement\nand complement methods.  Together these changes allow a more object\norientated programming style using the Seq object.\n\nThe behaviour of the Bio.Seq module's translate function has changed so that\nambiguous codons which could be a stop codon like \"TAN\" or \"NNN\" are now\ntranslated as \"X\" (consistent with EMBOSS and BioPerl - Biopython previously\nraised an exception), and a bug was fixed so that invalid codons (like \"A-T\")\nnow raise an exception (previously these were translated as stop codons).\n\nBioSQL had a few bugs fixed, and can now optionally fetch the NCBI taxonomy\non demand when loading sequences (via Bio.Entrez) allowing you to populate\nthe taxon/taxon_name tables gradually.  This has been tested in combination\nwith the BioSQL load_ncbi_taxonomy.pl script used to populate or update the\ntaxon/taxon_name tables.  BioSQL should also now work with the psycopg2\ndriver for PostgreSQL as well as the older psycopg driver.\n\nThe PDB and PopGen sections of the Tutorial have been promoted to full\nchapters, and a new chapter has been added on supervised learning methods\nlike logistic regression.  The \"Cookbook\" section now has a few graphical\nexamples using Biopython to calculate sequence properties, and matplotlib\n(pylab) to plot them.\n\nThe input functions in Bio.SeqIO and Bio.AlignIO now accept an optional\nargument to specify the expected sequence alphabet.\n\nThe somewhat quirky unit test GUI has been removed, the unit tests are now\nrun via the command line by default.\n\n\nSeptember 8, 2008: Biopython 1.48 released.\n===========================================\n\nThe SeqRecord and Alignment objects have a new method to format the object as\na string in a requested file format (handled via Bio.SeqIO and Bio.AlignIO).\n\nAdditional file formats supported in Bio.SeqIO and Bio.AlignIO:\n\n- reading and writing \"tab\" format (simple tab separated)\n- writing \"nexus\" files.\n- reading \"pir\" files (NBRF/PIR)\n- basic support for writing \"genbank\" files (GenBank plain text)\n\nFixed some problems reading Clustal alignments (introduced in Biopython 1.46\nwhen consolidating Bio.AlignIO and Bio.Clustalw).\n\nUpdates to the Bio.Sequencing parsers.\n\nBio.PubMed and the online code in Bio.GenBank are now considered obsolete,\nand we intend to deprecate them after the next release. For accessing PubMed\nand GenBank, please use Bio.Entrez instead.\n\nBio.Fasta is now considered to be obsolete, please use Bio.SeqIO instead. We\ndo intend to deprecate this module eventually, however, for several years\nthis was the primary FASTA parsing module in Biopython and is likely to be in\nuse in many existing scripts.\n\nMartel and Bio.Mindy are now considered to be obsolete, and are likely to be\ndeprecated and removed in a future release.\n\nIn addition a number of other modules have been deprecated, including:\nBio.MetaTool, Bio.EUtils, Bio.Saf, Bio.NBRF, and Bio.IntelliGenetics\nSee the DEPRECATED file for full details.\n\n\nJuly 5, 2008: Biopython 1.47 released.\n======================================\n\nImproved handling of ambiguous nucleotides in Bio.Seq.Translate().\nBetter handling of stop codons in the alphabet from a translation.\nFixed some codon tables (problem introduced in Biopython 1.46).\n\nUpdated Nexus file handling.\n\nFixed a bug in Bio.Cluster potentially causing segfaults in the\nsingle-linkage hierarchical clustering library.\n\nAdded some DTDs to be able to parse EFetch results from the\nnucleotide database.\n\nAdded IntelliGenetics/MASE parsing to Bio.SeqIO (as the \"ig\" format).\n\n\nJune 29, 2008: Biopython 1.46 released.\n=======================================\n\nBio.Entrez now has several Entrez format XML parsers, and a chapter\nin the tutorial.\n\nAddition of new Bio.AlignIO module for working with sequence alignments\nin the style introduced with Bio.SeqIO in recent releases, with a whole\nchapter in the tutorial.\n\nA problem parsing certain EMBL files was fixed.\n\nSeveral minor fixes were made to the NCBI BLAST XML parser, including\nsupport for the online version 2.2.18+ introduced in May 2008.\n\nThe NCBIWWW.qblast() function now allows other programs (blastx, tblastn,\ntblastx) in addition to just blastn and blastp.\n\nBio.EUtils has been updated to explicitly enforce the NCBI's rule of at\nmost one query every 3 seconds, rather than assuming the user would obey\nthis.\n\nIterators in Bio.Medline, Bio.SCOP, Bio.Prosite, Bio.Prosite.Prodoc,\nBio.SwissProt, and others to make them more generally usable.\n\nPhylip export added to Bio.Nexus.\n\nImproved handling of ambiguous nucleotides and stop codons in\nBio.Seq.Translate (plus introduced a regression fixed in Biopython 1.47).\n\n\nMarch 22, 2008: Biopython 1.45 released.\n========================================\n\nThe Seq and MutableSeq objects act more like python strings, in particular\nstr(object) now returns the full sequence as a plain string.  The existing\ntostring() method is preserved for backwards compatibility.\n\nBioSQL has had some bugs fixed, and has an additional unit test which loads\nrecords into a database using Bio.SeqIO and then checks the records can be\nretrieved correctly.  The DBSeq and DBSeqRecord classes now subclass the\nSeq and SeqRecord classes, which provides more functionality.\n\nThe modules under Bio.WWW are being deprecated.\nFunctionality in Bio.WWW.NCBI, Bio.WWW.SCOP, Bio.WWW.InterPro and\nBio.WWW.ExPASy is now available from Bio.Entrez, Bio.SCOP, Bio.InterPro and\nBio.ExPASy instead. Bio.Entrez was used to fix a nasty bug in Bio.GenBank.\n\nTiago Antao has included more functionality in the Population Genetics\nmodule, Bio.PopGen.\n\nThe Bio.Cluster module has been updated to be more consistent with other\nBiopython code.\n\nThe tutorial has been updated, including devoting a whole chapter to\nSwiss-Prot, Prosite, Prodoc, and ExPASy. There is also a new chapter on\nBio.Entrez.\n\nBio.biblio was deprecated.\n\n\nOctober 28, 2007: Biopython 1.44 released.\n==========================================\n\nNOTE: This release includes some rather drastic code changes, which were\nnecessary to get Biopython to work with the new release of mxTextTools.\n\nThe (reverse)complement functions in Bio.Seq support ambiguous nucleotides.\n\nBio.Kabat, which was previously deprecated, is now removed from Biopython.\n\nBio.MarkupEditor was deprecated, as it does not appear to have any users.\n\nBio.Blast.NCBI.qblast() updated with more URL options, thanks to a patch\nfrom Chang Soon Ong.\n\nSeveral fixes to the Blast parser.\n\nThe deprecated Bio.Blast.NCBIWWW functions blast and blasturl were removed.\n\nThe standalone Blast functions blastall, blastpgp now create XML output by\ndefault.\n\nBio.SeqIO.FASTA and Bio.SeqIO.generic have been deprecated in favour of\nthe new Bio.SeqIO module.\n\nBio.FormatIO has been removed (a gradual deprecation was not possible).\nPlease look at Bio.SeqIO for sequence input/output instead.\n\nFix for a bug in Bio.Cluster, which caused kcluster() to hang on some\nplatforms.\n\nBio.expressions has been deprecated.\n\nBio.SeqUtils.CheckSum created, including new methods from Sebastian Bassi,\nand functions crc32 and crc64 which were moved from Bio/crc.py.\nBio.crc is now deprecated. Bio.lcc was updated and moved to Bio.SeqUtils.lcc.\n\nBio.SwissProt parser updated to cope with recent file format updates.\n\nBio.Fasta, Bio.KEGG and Bio.Geo updated to pure python parsers which\ndon't rely on Martel.\n\nNumerous fixes in the Genbank parser.\n\nSeveral fixes in Bio.Nexus.\n\nBio.MultiProc and Bio.Medline.NLMMedlineXML were deprecating, as they failed\non some platforms, and seemed to have no users. Deprecated concurrent\nbehavior in Bio.config.DBRegistry and timeouts in Bio.dbdefs.swissprot,\nwhich relies on Bio.MultiProc.\n\nTiago Antao has started work on a Population Genetics module, Bio.PopGen\n\nUpdates to the tutorial, including giving Bio.Seq and Bio.SeqIO a whole\nchapter each.\n\n\nMarch 17, 2007: Biopython 1.43 released.\n========================================\n\nNew Bio.SeqIO module for reading and writing biological sequence files\nin various formats, based on SeqRecord objects.  This includes a new fasta\nparser which is much faster than Bio.Fasta, particularly for larger files.\nEasier to use, too.\n\nVarious improvements in Bio.SeqRecord.\n\nRunning Blast using Bio.Blast.NCBIStandalone now generates output in XML\nformat by default.\nThe new function Bio.Blast.NCBIXML.parse can parse multiple Blast records\nin XML format.\n\nBio.Cluster no longer uses ranlib, but uses its own random number generator\ninstead. Some modifications to make Bio.Cluster more compatible with the new\nNumPy (we're not quite there yet though).\n\nNew Bio.UniGene parser.\n\nNumerous improvements in Bio.PDB.\n\nBug fixes in Bio.SwissProt, BioSQL, Bio.Nexus, and other modules.\n\nFaster parsing of large GenBank files.\n\nNew EMBL parser under Bio.GenBank and also integrated into (new) Bio.SeqIO\n\nCompilation of KDTree (C++ code) is optional (setup.py asks the user if it\nshould be compiled). For the Windows installer, C++ code is now included.\n\nNominating Bio.Kabat for removal.\n\nBelieve it or not, even the documentation was updated.\n\n\nJuly 16, 2006: Biopython 1.42 released.\n=======================================\n\nBio.GenBank: New parser by Peter, which doesn't rely on Martel.\n\nNumerous updates in Bio.Nexus and Bio.Geo.\n\nBio.Cluster became (somewhat) object-oriented.\n\nLots of bug fixes, and updates to the documentation.\n\n\nOctober 28, 2005: Biopython 1.41 released.\n==========================================\n\nMajor changes:\n\nNEW: Bio.MEME -- thanks to Jason Hackney\n\nAdded transcribe, translate, and reverse_complement functions to Bio.Seq that\nwork both on Seq objects and plain strings.\n\nMajor code optimization in cpairwise2module.\n\nCompareACE support added to AlignAce.\n\nUpdates to Blast parsers in Bio.Blast, in particular use of the XML parser\nin NCBIXML contributed by Bertrand Frottier, and the BLAT parser by Yair\nBenita.\n\nPairwise single-linkage hierarchical clustering in Bio.Cluster became much\nfaster and memory-efficient, allowing clustering of large data sets.\n\nBio.Emboss: Added command lines for einverted and palindrome.\n\nBio.Nexus: Added support for StringIO objects.\n\nNumerous updates in Bio.PDB.\n\nLots of fixes in the documentation.\n\nMarch 29, 2005: MEME parser added. Thanks to Jason Hackney\n\n\nFeb 18, 2005: Biopython 1.40 beta\n=================================\nMajor Changes since v1.30. For a full list of changes please see the CVS\n\nIMPORTANT: Biopython now works with Python version >= 2.3\n\nNEW: Bio.Nexus -- thanks to Frank Kauff\nBio.Nexus is a Nexus file parser. Nexus is a common format for phylogenetic\ntrees.\n\nNEW: CAPS module -- Thanks to Jonathan Taylor.\n\nNEW: Restriction enzyme package contributed by Frederic Sohm. This includes\nclasses for manipulating enzymes, updating from Rebase, as well as\ndocumentation and Tests.\n\nCHANGED: Bio.PDB -- thanks to Thomas Hamelryck.\n\n- Added atom serial number.\n- Epydoc style documentation.\n- Added secondary structure support (through DSSP).\n- Added Accessible Surface Area support (through DSSP).\n- Added Residue Depth support (through MSMS).\n- Added Half Sphere Exposure.\n- Added Fragment classification of the protein backbone (see Kolodny et al.,\n- JMB, 2002).\n- Corrected problem on Windows with PDBList (thanks to Matt Dimmic)\n- Added StructureAlignment module to superimpose structures based on a FASTA\n  sequence alignment.\n- Various additions to Polypeptide.\n- Various bug corrections in Vector.\n- Lots of smaller bug corrections and additional features\n\nCHANGED: MutableSeq -- thanks to Michiel De Hoon\nAdded the functions 'complement' and 'reverse_complement' to Bio.Seq's Seq and\nMutableSeq objects. Similar functions previously existed in various locations\nin BioPython:\n\n- forward_complement, reverse_complement in Bio.GFF.easy\n- complement, antiparallel in Bio.SeqUtils\n\nThese functions have now been deprecated, and will issue a DeprecationWarning\nwhen used. The functions complement and reverse_complement, when applied to a\nSeq object, will return a new Seq object. The same function applied to a\nMutableSeq object will modify the MutableSeq object itself, and don't return\nanything.\n\n\nMay 14, 2004: Biopython 1.30\n============================\n\n- Affy package added for dealing with Affymetrix cel files -- thanks to Harry\n  Zuzan.\n- Added code for parsing Blast XML output -- thanks to Bertrand Frottier.\n- Added code for parsing Compass output -- thanks to James Casbon.\n- New melting temperature calculation module -- thanks to Sebastian Bassi.\n- Added lowess function for non-parameteric regression -- thanks to Michiel.\n- Reduced protein alphabet supported added -- thanks to Iddo.\n\n- Added documentation for Logistic Regression and Bio.PDB -- thanks to Michiel\n  and Thomas.\n- Documentation added for converting between file formats.\n- Updates to install documentation for non-root users -- thanks to Jakob\n  Fredslund.\n- epydoc now used for automatic generation of documentation.\n\n- Fasta parser updated to use Martel for parsing and indexing, allowing better\n  speed and dealing with large data files.\n- Updated to Registry code. Now 'from Bio import db' gives you a number of new\n  retrieval options, including embl, fasta, genbak, interpro, prodoc and\n  swissprot.\n- GenBank parser uses new Martel format. GenBank retrieval now uses EUtils\n  instead of the old non-working entrez scripts. GenBank indexing uses standard\n  Mindy indexing. Fix for valueless qualifiers in feature keys -- thanks to\n  Leighton Pritchard.\n- Numerous updated to Bio.PDB modules -- thanks to Thomas. PDB can now parse\n  headers -- thanks to Kristian Rother.\n- Updates to the Ace parser -- thanks to Frank Kauff and Leighton Pritchard.\n\n- Added pgdb (PyGreSQL) support to BioSQL -- thanks to Marc Colosimo.\n- Fix problems with using py2exe and Biopython -- thanks to Michael Cariaso.\n- PSIBlast parser fixes -- thanks to Jer-Yee John Chuang and James Casbon.\n- Fix to NCBIWWW retrieval so that HTML results are returned correctly.\n- Fix to Clustalw to handle question marks in title names -- thanks to Ashleigh\n  Smythe.\n- Fix to NBRF parsing to it accepts files produced by Clustalw -- thanks to\n  Ashleigh Smythe.\n- Fixes to the Enyzme module -- thanks to Marc Colosimo.\n- Fix for bugs in SeqUtils -- thanks to Frank Kauff.\n- Fix for optional hsps in ncbiblast Martel format -- thanks to Heiko.\n- Fix to Fasta parsing to allow # comment lines -- thanks to Karl Diedrich.\n- Updates to the C clustering library -- thanks to Michiel.\n- Fixes for breakage in the SCOP module and addition of regression tests to\n  framework -- thanks to Gavin.\n- Various fixes to Bio.Wise -- thanks to Michael.\n- Fix for bug in FastaReader -- thanks to Micheal.\n- Fix EUtils bug where efetch would only return 500 sequences.\n- Updates for Emboss commandlines, water and tranalign.\n- Fixes to the FormatIO system of file conversion.\n\n- C++ code (KDTree, Affy) now compiled by default on most platforms -- thanks\n  to Michael for some nice distutils hacks and many people for testing.\n- Deprecated Bio.sequtils -- use Bio.SeqUtils instead.\n- Deprecated Bio.SVM -- use libsvm instead.\n- Deprecated Bio.kMeans and Bio.xkMeans -- use Bio.cluster instead.\n- Deprecated RecordFile -- doesn't appear to be finished code.\n\n\nFeb 16, 2004: Biopython 1.24\n============================\n\n- New parsers for Phred and Ace format files -- thanks to Frank Kauff\n- New Code for dealing with NMR data -- thanks to Bob Bussell\n- New SeqUtils modules for codon usage, isoelectric points and other\n  protein properties -- thanks to Yair Benita\n- New code for dealing with Wise contributed by Michael\n- EZ-Retrieve sequence retrieval now supported thanks to Jeff\n- Bio.Cluster updated along with documentation by Michiel\n- BioSQL fixed so it now works with the current SQL schema -- thanks to Yves\n  Bastide for patches\n- Patches to Bio/__init__ to make it compatible with py2exe -- thanks to\n  Leighton Pritchard\n- Added __iter__ to all Biopython Iterators to make them Python 2.2 compatible\n- Fixes to NCBIWWW for retrieving from NCBI -- thanks to Chris Wroe\n- Retrieval of multiple alignment objects from BLAST records -- thanks to\n  James Casbon\n- Fixes to GenBank format for new tags by Peter\n- Parsing fixes in clustalw parsed -- thanks to Greg Singer and Iddo\n- Fasta Indexes can have a specified filename -- thanks to Chunlei Wu\n- Fix to Prosite parser -- thanks to Mike Liang\n- Fix in GenBank parsing -- mRNAs now get strand information\n\n\nOct 18, 2003: Biopython 1.23\n============================\n\n- Fixed distribution of files in Bio/Cluster\n- Now distributing Bio/KDTree/_KDTree.swig.C\n- minor updates in installation code\n- added mmCIF support for PDB files\n\n\nOct 9, 2003: Biopython 1.22\n===========================\n\n- Added Peter Slicker's patches for speeding up modules under Python 2.3\n- Fixed Martel installation.\n- Does not install Bio.Cluster without Numeric.\n- Distribute EUtils DTDs.\n- Yves Bastide patched NCBIStandalone.Iterator to be Python 2.0 iterator\n- Ashleigh's string coercion fixes in Clustalw.\n- Yair Benita added precision to the protein molecular weights.\n- Bartek updated AlignAce.Parser and added Motif.sim method\n- bug fixes in Michiel De Hoon's clustering library\n- Iddo's bug fixes to Bio.Enzyme and new RecordConsumer\n- Guido Draheim added patches for fixing import path to xbb scripts\n- regression tests updated to be Python 2.3 compatible\n- GenBank.NCBIDictionary is smarter about guessing the format\n\n\nJul 28, 2003: Biopython 1.21\n============================\n\n- Martel added back into the released package\n- new AlignACE module by Bartek Wilczynski\n- Andreas Kuntzagk fix for GenBank Iterator on empty files\n\n\nJul 27, 2003: Biopython 1.20\n============================\n\n- added Andrew Dalke's EUtils library\n- added Michiel de Hoon's gene expression analysis package\n- updates to setup code, now smarter about dependencies\n- updates to test suite, now smarter about code that is imported\n- Michael Hoffman's fixes to DocSQL\n- syntax fixes in triemodule.c to compile on SGI, Python 2.1 compatible\n- updates in NCBIStandalone, short query error\n- Sebastian Bassi submitted code to calculate LCC complexity\n- Greg Kettler's NCBIStandalone fix for long query lengths\n- slew of miscellaneous fixes from George Paci\n- miscellaneous cleanups and updates from Andreas Kuntzagk\n- Peter Bienstman's fixes to Genbank code -- now parses whole database\n- Kayte Lindner's LocusLink package\n- miscellaneous speedups and code cleanup in ParserSupport by Brad Chapman\n- miscellaneous BLAST fixes and updates\n- Iddo added new code to parse BLAST table output format\n- Karl Diedrich's patch to read T_Coffee files\n- Larry Heisler's fix for primer3 output\n- Bio.Medline now uses proper iterator objects\n- copen now handles SIGTERM correctly\n- small bugfixes and updates in Thomas Hamelryck's PDB package\n- bugfixes and updates to SeqIO.FASTA reader\n- updates to Registry system, conforms to 2003 hackathon OBDA spec\n- Yu Huang patch to support tblastn in wublast expression\n\n\nDec 17, 2002: Biopython 1.10\n============================\n\n- Python requirement bumped up to 2.2\n- hierarchy reorg, many things moved upwards into Bio namespace\n- pairwise2 replaces fastpairwise and pairwise\n- removed deprecated Sequence.py package\n- minor bug fix in File.SGMLStripper\n- added Scripts/debug/debug_blast_parser.py to diagnose blast parsing errors\n- IPI supported by SwissProt/SProt.py parser\n- large speedup for kmeans\n- new registry framework for generic access to databases and parsers\n- small bug fix in stringfns.split\n- scripts that access NCBI moved over to new EUtils system\n- new crc module\n- biblio.py supports the EBI Bibliographic database\n- new CDD parser\n- new Ndb parser\n- new ECell parser\n- new Geo parser\n- access to GFF databases\n- new KDTree data structure\n- new LocusLink parser\n- new MarkovModel algorithm\n- new Saf parser\n- miscellaneous sequence handling functions in sequtils\n- new SVDSuperimpose algorithm\n\n\nDec 18, 2001: Biopython1.00a4\n=============================\n\n- minor bug fix in NCBIStandalone.blastall\n- optimization in dynamic programming code\n- new modules for logistic regression and maximum entropy\n- minor bug fix in ParserSupport\n- minor bug fixes in SCOP package\n- minor updates in the kMeans cluster selection code\n- minor bug fixes in SubsMat code\n- support for XML-formatted MEDLINE files\n- added MultiProc.run to simplify splitting code across processors\n- listfns.items now supports lists with unhashable items\n- new data type for pathways\n- new support for intelligenetics format\n- new support for metatool format\n- new support for NBRF format\n- new support for generalized launching of applications\n- new support for genetic algorithms\n- minor bug fixes in GenBank parsing\n- new support for Primer in the Emboss package\n- new support for chromosome graphics\n- new support for HMMs\n- new support for NeuralNetwork\n- slew of Martel fixes (see Martel docs)\n\n\nSept 3, 2001: Biopython1.00a3\n=============================\n\n- added package to support KEGG\n- added sequtils module for computations on sequences\n- added pairwise sequence alignment algorithm\n- major bug fixes in UndoHandle\n- format updates in PubMed\n- Tk interface to kMeans clustering\n\n\nJuly 5, 2001: Biopython1.00a2\n=============================\n\n- deprecated old regression testing frameworks\n- deprecated Sequence.py\n- Swiss-Prot parser bug fixes\n- GenBank parser bug fixes\n- Can now output GenBank format\n- can now download many sequences at a time from GenBank\n- kMeans clustering algorithm\n- Kabat format now supported\n- FSSP format now supported\n- more functionality for alignment code\n- SubsMat bug fixes and updates\n- fixed memory leak in listfns bug fixes\n- Martel bundled and part of the install procedure\n- Medline.Parser bug fixes\n- PubMed.download_many handles broken IDs better\n\n\nMar 3, 2001: Biopython 1.00a1\n=============================\n\n- Refactoring of modules.  X/X.py moved to X/__init__.py.\n- Can search sequences for Prosite patterns at ExPASy\n- Can do BLAST searches against stable URL at NCBI\n- Prosite Pattern bug fixes\n- GenBank parser\n- Complete Seq and SeqFeatures framework\n- distutils cleanup\n- compile warning cleanups\n- support for UniGene\n- code for working with substitution matrices\n- Tools.MultiProc package for rudimentary multiprocessing stuff\n\n\nNov 10, 2000: Biopython 0.90d04\n===============================\n\n- Added support for multiple alignments, ClustalW\n- BLAST updates, bug fixes, and BlastErrorParser\n- Fixes for PSI-BLAST in master-slave mode\n- Minor update in stringfns, split separators can be negated\n- Added download_many function to PubMed\n- xbbtools updates\n- Prodoc parser now accepts a copyright at the end of a record\n- Swiss-Prot parser now handles taxonomy ID tag\n\n\nSept 6, 2000: Biopython 0.90d03\n===============================\n\n- Blast updates:\n\n  - bug fixes in NCBIStandalone, NCBIWWW\n  - some __str__ methods in Record.py implemented (incomplete)\n\n- Tests:\n\n  - new BLAST regression tests\n  - prosite tests fixed\n\n- New parsers for Rebase, Gobase\n- pure python implementation of C-based tools\n- Thomas Sicheritz-Ponten's xbbtools\n- can now generate documentation from docstrings using HappyDoc\n\n\nAug17-18, 2000: Bioinformatics Open Source Conference 2000\n==========================================================\n\nWe had a very good Birds-of-a-Feather meeting:\nhttp://mailman.open-bio.org/pipermail/biopython/2000-August/000360.html\n\n\nAug 2, 2000: Biopython 0.90d02 is released.\n===========================================\n\n- Blast updates:\n  - now works with v2.0.14\n  - HSP.identities and HSP.positives now tuples\n  - HSP.gaps added\n- SCOP updates:\n  - Lin.Iterator now works with release 50\n- Starting a tutorial\n- New regression tests for Prodoc\n\n\nJuly 6, 2000: Biopython 0.90d01 is released.\n============================================\n\n\nFebruary 8, 2000: Anonymous CVS made available.\n===============================================\n\n\nAugust 1999: Biopython project founded.\n=======================================\n\nCall for Participation sent out to relevant mailing lists, news\ngroups.\n\nThe Biopython Project (https://www.biopython.org/) is a new open\ncollaborative effort to develop freely available Python libraries and\napplications that address the needs of current and future work in\nbioinformatics, including sequence analysis, structural biology,\npathways, expression data, etc.  When available, the source code will\nbe released as open source (https://github.com/biopython/biopython/blob/9c4785fc9eaf8a3bc436c6c0b16e7a05019cade1/LICENSE)\nunder terms similar to Python.\n\nThis is a Call for Participation for interested people to join the\nproject.  We are hoping to attract people from a diverse set of\nbackgrounds to help with code development, site maintenance,\nscientific discussion, etc.  This project is open to everyone.  If\nyou're interested, please visit the web page, join the biopython\nmailing list, and let us know what you think!\n\nJeffrey Chang <jchang@smi.stanford.edu>\nAndrew Dalke <dalke@bioreason.com>\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 11.6123046875,
          "content": ".. image:: https://img.shields.io/pypi/v/biopython.svg?logo=pypi\n   :alt: Biopython on the Python Package Index (PyPI)\n   :target: https://pypi.python.org/pypi/biopython\n.. image:: https://img.shields.io/conda/vn/conda-forge/biopython.svg?logo=conda-forge\n   :alt: Biopython on the Conda package conda-forge channel\n   :target: https://anaconda.org/conda-forge/biopython\n.. image:: https://results.pre-commit.ci/badge/github/biopython/biopython/master.svg\n   :target: https://results.pre-commit.ci/latest/github/biopython/biopython/master\n   :alt: pre-commit.ci status\n.. image:: https://img.shields.io/circleci/build/github/biopython/biopython.svg?logo=circleci\n   :alt: Linux testing with CircleCI\n   :target: https://app.circleci.com/pipelines/github/biopython/biopython\n.. image:: https://img.shields.io/appveyor/ci/biopython/biopython/master.svg?logo=appveyor\n   :alt: Windows testing with AppVeyor\n   :target: https://ci.appveyor.com/project/biopython/biopython/history\n.. image:: https://img.shields.io/github/actions/workflow/status/biopython/biopython/ci.yml?logo=github-actions\n   :alt: GitHub workflow status\n   :target: https://github.com/biopython/biopython/actions\n.. image:: https://img.shields.io/codecov/c/github/biopython/biopython/master.svg?logo=codecov\n   :alt: Test coverage on CodeCov\n   :target: https://codecov.io/github/biopython/biopython/\n.. image:: http://depsy.org/api/package/pypi/biopython/badge.svg\n   :alt: Research software impact on Depsy\n   :target: http://depsy.org/package/python/biopython\n\n.. image:: https://github.com/biopython/biopython/raw/master/Doc/images/biopython_logo_m.png\n   :alt: The Biopython Project\n   :target: http://biopython.org\n\nBiopython README file\n=====================\n\nThe Biopython Project is an international association of developers of freely\navailable Python tools for computational molecular biology.\n\nThis README file is intended primarily for people interested in working\nwith the Biopython source code, either one of the releases from the\nhttp://biopython.org website, or from our repository on GitHub\nhttps://github.com/biopython/biopython\n\nOur user-centric documentation, `The Biopython Tutorial and Cookbook, and API\ndocumentation <https://biopython.org/docs/latest/>`_, is generated from our\nrepository using Sphinx.\n\nThe `NEWS <https://github.com/biopython/biopython/blob/master/NEWS.rst>`_\nfile summarises the changes in each release of Biopython, alongside the\n`DEPRECATED\n<https://github.com/biopython/biopython/blob/master/DEPRECATED.rst>`_\nfile which notes API breakages.\n\nThe Biopython package is open source software made available under generous\nterms. Please see the `LICENSE\n<https://github.com/biopython/biopython/blob/master/LICENSE.rst>`_ file for\nfurther details.\n\nIf you use Biopython in work contributing to a scientific publication, we ask\nthat you cite our application note (below) or one of the module specific\npublications (listed on our website):\n\nCock, P.J.A. et al. Biopython: freely available Python tools for computational\nmolecular biology and bioinformatics. Bioinformatics 2009 Jun 1; 25(11) 1422-3\nhttps://doi.org/10.1093/bioinformatics/btp163 pmid:19304878\n\n\nFor the impatient\n=================\n\nPython includes the package management system \"pip\" which should allow you to\ninstall Biopython (and its dependency NumPy if needed), upgrade or uninstall\nwith just one terminal command::\n\n    pip install biopython\n    pip install --upgrade biopython\n    pip uninstall biopython\n\nSince Biopython 1.70 we have provided pre-compiled binary wheel packages on\nPyPI for Linux, macOS and Windows. This means pip install should be quick,\nand not require a compiler.\n\nAs a developer or potential contributor, you may wish to download, build and\ninstall Biopython yourself. This is described below.\n\n\nPython Requirements\n===================\n\nWe currently recommend using Python 3.11 from http://www.python.org\n\nBiopython is currently supported and tested on the following Python\nimplementations:\n\n- Python 3.9, 3.10, 3.11 and 3.12 -- see http://www.python.org\n\n- PyPy3.9 v7.3.13 -- or later, see http://www.pypy.org\n\n\nOptional Dependencies\n=====================\n\nBiopython requires NumPy (see http://www.numpy.org) which will be installed\nautomatically if you install Biopython with pip (see below for compiling\nBiopython yourself).\n\nDepending on which parts of Biopython you plan to use, there are a number of\nother optional Python dependencies, which can be installed later if needed:\n\n- ReportLab, see http://www.reportlab.com/opensource/ (optional)\n  This package is only used in ``Bio.Graphics``, so if you do not need this\n  functionality, you will not need to install this package.\n\n- matplotlib, see http://matplotlib.org/ (optional)\n  ``Bio.Phylo`` uses this package to plot phylogenetic trees.\n\n- networkx, see https://networkx.github.io/ (optional) and\n  pygraphviz or pydot, see https://pygraphviz.github.io/ and\n  http://code.google.com/p/pydot/ (optional)\n  These packages are used for certain niche functions in ``Bio.Phylo``.\n\n- rdflib, see https://github.com/RDFLib/rdflib (optional)\n  This package is used in the CDAO parser under ``Bio.Phylo``.\n\n- psycopg2, see http://initd.org/psycopg/ (optional) or\n  PyGreSQL (pgdb), see http://www.pygresql.org/ (optional)\n  These packages are used by ``BioSQL`` to access a PostgreSQL database.\n\n- MySQL Connector/Python, see http://dev.mysql.com/downloads/connector/python/\n  This package is used by ``BioSQL`` to access a MySQL database, and is\n  supported on PyPy too.\n\n- mysqlclient, see https://github.com/PyMySQL/mysqlclient-python (optional)\n  This is a fork of the older MySQLdb and is used by ``BioSQL`` to access a\n  MySQL database. It is supported by PyPy.\n\nIn addition there are a number of useful third party tools you may wish to\ninstall such as standalone NCBI BLAST, EMBOSS or ClustalW.\n\n\nInstallation From Source\n========================\n\nWe recommend using the pre-compiled binary wheels available on PyPI using::\n\n    pip install biopython\n\nHowever, if you need to compile Biopython yourself, the following are required\nat compile time:\n\n- Python including development header files like ``python.h``, which on Linux\n  are often not installed by default (trying looking for and installing a\n  package named ``python-dev`` or ``python-devel`` as well as the ``python``\n  package).\n\n- Appropriate C compiler for your version of Python, for example GCC on Linux,\n  MSVC on Windows. For Mac OS X, or as it is now branded, macOS, use Apple's\n  command line tools, which can be installed with the terminal command::\n\n      xcode-select --install\n\n  This will offer to install Apple's XCode development suite - you can, but it\n  is not needed and takes a lot of disk space.\n\nThen either download and decompress our source code, or fetch it using git.\nNow change directory to the Biopython source code folder and run::\n\n    pip install -e .\n    python setup.py test\n    sudo python setup.py install\n\nSubstitute ``python`` with your specific version if required, for example\n``python3``, or ``pypy3``.\n\nTo exclude tests that require an internet connection (and which may take a\nlong time), use the ``--offline`` option::\n\n    python setup.py test --offline\n\nIf you need to do additional configuration, e.g. changing the install\ndirectory prefix, please type ``python setup.py``.\n\n\nTesting\n=======\n\nBiopython includes a suite of regression tests to check if everything is\nrunning correctly. To run the tests, go to the biopython source code\ndirectory and type::\n\n    pip install -e .\n    python setup.py test\n\nIf you want to skip the online tests (which is recommended when doing repeated\ntesting), use::\n\n    python setup.py test --offline\n\nDo not panic if you see messages warning of skipped tests::\n\n    test_DocSQL ... skipping. Install MySQLdb if you want to use Bio.DocSQL.\n\nThis most likely means that a package is not installed.  You can\nignore this if it occurs in the tests for a module that you were not\nplanning on using.  If you did want to use that module, please install\nthe required dependency and re-run the tests.\n\nSome of the tests may fail due to network issues, this is often down to\nchance or a service outage. If the problem does not go away on\nre-running the tests, you can use the ``--offline`` option.\n\nThere is more testing information in the Biopython Tutorial & Cookbook.\n\n\nExperimental code\n=================\n\nBiopython 1.61 introduced a new warning, ``Bio.BiopythonExperimentalWarning``,\nwhich is used to mark any experimental code included in the otherwise\nstable Biopython releases. Such 'beta' level code is ready for wider\ntesting, but still likely to change, and should only be tried by early\nadopters in order to give feedback via the biopython-dev mailing list.\n\nWe'd expect such experimental code to reach stable status within one or two\nreleases, at which point our normal policies about trying to preserve\nbackwards compatibility would apply.\n\n\nBugs\n====\n\nWhile we try to ship a robust package, bugs inevitably pop up.  If you are\nhaving problems that might be caused by a bug in Biopython, it is possible\nthat it has already been identified. Update to the latest release if you are\nnot using it already, and retry. If the problem persists, please search our\nbug database and our mailing lists to see if it has already been reported\n(and hopefully fixed), and if not please do report the bug. We can't fix\nproblems we don't know about ;)\n\nIssue tracker: https://github.com/biopython/biopython/issues\n\nIf you suspect the problem lies within a parser, it is likely that the data\nformat has changed and broken the parsing code.  (The text BLAST and GenBank\nformats seem to be particularly fragile.)  Thus, the parsing code in\nBiopython is sometimes updated faster than we can build Biopython releases.\nYou can get the most recent parser by pulling the relevant files (e.g. the\nones in ``Bio.SeqIO`` or ``Bio.Blast``) from our git repository. However, be\ncareful when doing this, because the code in github is not as well-tested\nas released code, and may contain new dependencies.\n\nIn any bug report, please let us know:\n\n1. Which operating system and hardware (32 bit or 64 bit) you are using\n2. Python version\n3. Biopython version (or git commit/date)\n4. Traceback that occurs (the full error message)\n\nAnd also ideally:\n\n5. Example code that breaks\n6. A data file that causes the problem\n\n\nContributing, Bug Reports\n=========================\n\nBiopython is run by volunteers from all over the world, with many types of\nbackgrounds. We are always looking for people interested in helping with code\ndevelopment, web-site management, documentation writing, technical\nadministration, and whatever else comes up.\n\nIf you wish to contribute, please first read `CONTRIBUTING.rst\n<https://github.com/biopython/biopython/blob/master/CONTRIBUTING.rst>`_ here,\nvisit our web site http://biopython.org and join our mailing list:\nhttp://biopython.org/wiki/Mailing_lists\n\n\nDistribution Structure\n======================\n\n- ``README.rst``  -- This file.\n- ``NEWS.rst``    -- Release notes and news.\n- ``LICENSE.rst`` -- What you can do with the code.\n- ``CONTRIB.rst`` -- An (incomplete) list of people who helped Biopython in\n  one way or another.\n- ``CONTRIBUTING.rst`` -- An overview about how to contribute to Biopython.\n- ``DEPRECATED.rst`` -- Contains information about modules in Biopython that\n  were removed or no longer recommended for use, and how to update code that\n  uses those modules.\n- ``MANIFEST.in`` -- Configures which files to include in releases.\n- ``setup.py``    -- Installation file.\n- ``Bio/``        -- The main code base code.\n- ``BioSQL/``     -- Code for using Biopython with BioSQL databases.\n- ``Doc/``        -- Documentation.\n- ``Scripts/``    -- Miscellaneous, possibly useful, standalone scripts.\n- ``Tests/``      -- Regression testing code including sample data files.\n"
        },
        {
          "name": "Scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci-dependencies.txt",
          "type": "blob",
          "size": 0.416015625,
          "content": "# Dependencies for testing and development\n# File used by CI workflow\n\n## Building/Packaging\nsetuptools\nwheel\n\n# Style (for RST linting)\n# Most style dependencies are handled by pre-commit.\nblack==22.12.0\n\n## Coverage\ncoverage\n\n## Testing\nnumpy!=2.1.0\nmatplotlib\nmmtf-python\n#MySQL testing disabled due to #3834:\n#mysqlclient\n#mysql-connector-python\nnetworkx\nigraph>=0.10.0\nrdflib\nreportlab\nscipy\n\n# Static type checking\nmypy\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 8.2685546875,
          "content": "\"\"\"setuptools based setup script for Biopython.\n\nThis uses setuptools which is now the standard python mechanism for\ninstalling packages. If you have downloaded and uncompressed the\nBiopython source code, or fetched it from git, for the simplest\ninstallation just type the command::\n\n    python setup.py install\n\nHowever, you would normally install the latest Biopython release from\nthe PyPI archive with::\n\n    pip install biopython\n\nFor more in-depth instructions, see the installation section of the\nBiopython manual, linked to from:\n\nhttp://biopython.org/wiki/Documentation\n\nOr, if all else fails, feel free to write to the sign up to the Biopython\nmailing list and ask for help.  See:\n\nhttp://biopython.org/wiki/Mailing_lists\n\"\"\"\n\nimport ast\nimport os\nimport sys\n\ntry:\n    from setuptools import __version__ as setuptools_version\n    from setuptools import Command\n    from setuptools import Extension\n    from setuptools import setup\nexcept ImportError:\n    sys.exit(\n        \"We need the Python library setuptools to be installed. \"\n        \"Try running: python -m ensurepip\"\n    )\n\n\nsetuptools_version_tuple = tuple(int(x) for x in setuptools_version.split(\".\")[:2])\nif setuptools_version_tuple < (70, 1) and \"bdist_wheel\" in sys.argv:\n    # Check for presence of wheel in setuptools < 70.1\n    # Before setuptools 70.1, wheel is needed to make a bdist_wheel.\n    # Since 70.1 was released including\n    # https://github.com/pypa/setuptools/pull/4369,\n    # it is not needed.\n    try:\n        import wheel  # noqa: F401\n    except ImportError:\n        sys.exit(\n            \"We need both setuptools AND wheel packages installed \"\n            \"for bdist_wheel to work. Try running: pip install wheel\"\n        )\n\n\n# Make sure we have the right Python version.\nMIN_PY_VER = (3, 9)\nif sys.version_info[:2] < MIN_PY_VER:\n    sys.stderr.write(\n        (\"ERROR: Biopython requires Python %i.%i or later. \" % MIN_PY_VER)\n        + (\"Python %d.%d detected.\\n\" % sys.version_info[:2])\n    )\n    sys.exit(1)\nelif sys.version_info[:2] == (3, 9):\n    sys.stderr.write(\"WARNING: Biopython support for Python 3.9 is now deprecated.\\n\")\n\n\nclass test_biopython(Command):\n    \"\"\"Run all of the tests for the package.\n\n    This is a automatic test run class to make distutils kind of act like\n    perl. With this you can do:\n\n    python setup.py build\n    python setup.py install\n    python setup.py test\n\n    \"\"\"\n\n    description = \"Automatically run the test suite for Biopython.\"\n    user_options = [(\"offline\", None, \"Don't run online tests\")]\n\n    def initialize_options(self):\n        \"\"\"No-op, initialise options.\"\"\"\n        self.offline = None\n\n    def finalize_options(self):\n        \"\"\"No-op, finalise options.\"\"\"\n        pass\n\n    def run(self):\n        \"\"\"Run the tests.\"\"\"\n        this_dir = os.getcwd()\n\n        # change to the test dir and run the tests\n        os.chdir(\"Tests\")\n        sys.path.insert(0, \"\")\n        import run_tests\n\n        if self.offline:\n            run_tests.main([\"--offline\"])\n        else:\n            run_tests.main([])\n\n        # change back to the current directory\n        os.chdir(this_dir)\n\n\ndef can_import(module_name):\n    \"\"\"Check we can import the requested module.\"\"\"\n    try:\n        return __import__(module_name)\n    except ImportError:\n        return None\n\n\n# Using requirements.txt is preferred for an application\n# (and likely will pin specific version numbers), using\n# setup.py's install_requires is preferred for a library\n# (and should try not to be overly narrow with versions).\nREQUIRES = [\"numpy\"]\n\n# --- set up the packages we are going to install\n# standard biopython packages\nPACKAGES = [\n    \"Bio\",\n    \"Bio.Affy\",\n    \"Bio.Align\",\n    \"Bio.Align.Applications\",\n    \"Bio.Align.substitution_matrices\",\n    \"Bio.AlignIO\",\n    \"Bio.Alphabet\",\n    \"Bio.Application\",\n    \"Bio.Blast\",\n    \"Bio.CAPS\",\n    \"Bio.Cluster\",\n    \"Bio.codonalign\",\n    \"Bio.Compass\",\n    \"Bio.Data\",\n    \"Bio.Emboss\",\n    \"Bio.Entrez\",\n    \"Bio.ExPASy\",\n    \"Bio.GenBank\",\n    \"Bio.Geo\",\n    \"Bio.Graphics\",\n    \"Bio.Graphics.GenomeDiagram\",\n    \"Bio.HMM\",\n    \"Bio.KEGG\",\n    \"Bio.KEGG.Compound\",\n    \"Bio.KEGG.Enzyme\",\n    \"Bio.KEGG.Gene\",\n    \"Bio.KEGG.Map\",\n    \"Bio.PDB.mmtf\",\n    \"Bio.KEGG.KGML\",\n    \"Bio.Medline\",\n    \"Bio.motifs\",\n    \"Bio.motifs.applications\",\n    \"Bio.motifs.jaspar\",\n    \"Bio.Nexus\",\n    \"Bio.NMR\",\n    \"Bio.Pathway\",\n    \"Bio.Pathway.Rep\",\n    \"Bio.PDB\",\n    \"Bio.phenotype\",\n    \"Bio.PopGen\",\n    \"Bio.PopGen.GenePop\",\n    \"Bio.Restriction\",\n    \"Bio.SCOP\",\n    \"Bio.SearchIO\",\n    \"Bio.SearchIO._model\",\n    \"Bio.SearchIO.BlastIO\",\n    \"Bio.SearchIO.HHsuiteIO\",\n    \"Bio.SearchIO.HmmerIO\",\n    \"Bio.SearchIO.ExonerateIO\",\n    \"Bio.SearchIO.InterproscanIO\",\n    \"Bio.SeqIO\",\n    \"Bio.SeqUtils\",\n    \"Bio.Sequencing\",\n    \"Bio.Sequencing.Applications\",\n    \"Bio.SVDSuperimposer\",\n    \"Bio.SwissProt\",\n    \"Bio.TogoWS\",\n    \"Bio.Phylo\",\n    \"Bio.Phylo.Applications\",\n    \"Bio.Phylo.PAML\",\n    \"Bio.UniGene\",\n    \"Bio.UniProt\",\n    # Other top level packages,\n    \"BioSQL\",\n]\n\nEXTENSIONS = [\n    Extension(\"Bio.Align._codonaligner\", [\"Bio/Align/_codonaligner.c\"]),\n    Extension(\"Bio.Align._pairwisealigner\", [\"Bio/Align/_pairwisealigner.c\"]),\n    Extension(\"Bio.Align._aligncore\", [\"Bio/Align/_aligncore.c\"]),\n    Extension(\"Bio.cpairwise2\", [\"Bio/cpairwise2module.c\"]),\n    Extension(\"Bio.Nexus.cnexus\", [\"Bio/Nexus/cnexus.c\"]),\n    Extension(\"Bio.motifs._pwm\", [\"Bio/motifs/_pwm.c\"]),\n    Extension(\n        \"Bio.Cluster._cluster\",\n        [\"Bio/Cluster/cluster.c\", \"Bio/Cluster/clustermodule.c\"],\n        extra_compile_args=[\"-DCLUSTER_USE_PYTHON_MEMORY\"],\n    ),\n    Extension(\"Bio.PDB.ccealign\", [\"Bio/PDB/ccealignmodule.c\"]),\n    Extension(\"Bio.PDB.kdtrees\", [\"Bio/PDB/kdtrees.c\"]),\n    Extension(\"Bio.PDB._bcif_helper\", [\"Bio/PDB/bcifhelpermodule.c\"]),\n    Extension(\"Bio.SeqIO._twoBitIO\", [\"Bio/SeqIO/_twoBitIO.c\"]),\n]\n\n\ndef get_version():\n    \"\"\"Get version number from __init__.py.\"\"\"\n    for line in open(\"Bio/__init__.py\"):\n        if line.startswith(\"__version__ = \"):\n            return ast.literal_eval(line.split(\"=\")[1].strip())\n    return \"Undefined\"\n\n\n__version__ = get_version()\n\n# We now load in our reStructuredText README.rst file to pass explicitly in the\n# metadata, since at time of writing PyPI did not do this for us.\n#\n# Must make encoding explicit to avoid any conflict with the local default.\n# Currently keeping README as ASCII (might switch to UTF8 later if needed).\n# If any invalid character does appear in README, this will fail and alert us.\nwith open(\"README.rst\", encoding=\"ascii\") as handle:\n    readme_rst = handle.read()\n\nsetup(\n    name=\"biopython\",\n    version=__version__,\n    author=\"The Biopython Contributors\",\n    author_email=\"biopython@biopython.org\",\n    url=\"https://biopython.org/\",\n    description=\"Freely available tools for computational molecular biology.\",\n    long_description=readme_rst,\n    project_urls={\n        \"Documentation\": \"https://biopython.org/wiki/Documentation\",\n        \"Source\": \"https://github.com/biopython/biopython/\",\n        \"Tracker\": \"https://github.com/biopython/biopython/issues\",\n    },\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: Freely Distributable\",\n        # Technically the \"Biopython License Agreement\" is not OSI approved,\n        # but is almost https://opensource.org/licenses/HPND so might put:\n        # 'License :: OSI Approved',\n        # To resolve this we are moving to dual-licensing with 3-clause BSD:\n        # 'License :: OSI Approved :: BSD License',\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n        \"Topic :: Scientific/Engineering\",\n        \"Topic :: Scientific/Engineering :: Bio-Informatics\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n    cmdclass={\"test\": test_biopython},\n    packages=PACKAGES,\n    ext_modules=EXTENSIONS,\n    include_package_data=True,  # done via MANIFEST.in under setuptools\n    install_requires=REQUIRES,\n    python_requires=\">=%i.%i\" % MIN_PY_VER,\n)\n"
        }
      ]
    }
  ]
}