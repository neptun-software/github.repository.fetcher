{
  "metadata": {
    "timestamp": 1736559860934,
    "page": 615,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "atlanhq/camelot",
      "stars": 3679,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0400390625,
          "content": "[run]\nbranch = True\nomit = camelot/ext/*\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1201171875,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\n\n[*.py]\ncharset = utf-8\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": "__pycache__/\n*.py[cod]\n*.so\n\nbuild/\ndist/\n*.egg-info/\n.eggs/\n.coverage\ncoverage.xml\n\n.pytest_cache/\n_build/\n\n.venv/\nhtmlcov/\n\n# vscode\n.vscode\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.5126953125,
          "content": "sudo: true\nlanguage: python\ncache: pip\naddons:\n  apt:\n    update: true\ninstall:\n  - make install\njobs:\n  include:\n    - stage: test\n      script:\n        - make test\n      python: '2.7'\n    - stage: test\n      script:\n        - make test\n      python: '3.5'\n    - stage: test\n      script:\n        - make test\n      python: '3.6'\n    - stage: test\n      script:\n        - make test\n      python: '3.7'\n      dist: xenial\n    - stage: coverage\n      python: '3.6'\n      script:\n        - make test\n        - codecov --verbose\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.109375,
          "content": "Be cordial or be on your way. --Kenneth Reitz\n\nhttps://www.kennethreitz.org/essays/be-cordial-or-be-on-your-way\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.69140625,
          "content": "# Contributor's Guide\n\nIf you're reading this, you're probably looking to contributing to Camelot. *Time is the only real currency*, and the fact that you're considering spending some here is *very* generous of you. Thank you very much!\n\nThis document will help you get started with contributing documentation, code, testing and filing issues. If you have any questions, feel free to reach out to [Vinayak Mehta](https://vinayak-mehta.github.io), the author and maintainer.\n\n## Code Of Conduct\n\nThe following quote sums up the **Code Of Conduct**.\n\n   > Be cordial or be on your way. --Kenneth Reitz\n\nKenneth Reitz has also written an [essay](https://www.kennethreitz.org/essays/be-cordial-or-be-on-your-way) on this topic, which you should read.\n\nAs the [Requests Code Of Conduct](http://docs.python-requests.org/en/master/dev/contributing/#be-cordial) states, **all contributions are welcome**, as long as everyone involved is treated with respect.\n\n## Your first contribution\n\nA great way to start contributing to Camelot is to pick an issue tagged with the [help wanted](https://github.com/camelot-dev/camelot/labels/help%20wanted) tag or the [good first issue](https://github.com/camelot-dev/camelot/labels/good%20first%20issue) tag. If you're unable to find a good first issue, feel free to contact the maintainer.\n\n## Setting up a development environment\n\nTo install the dependencies needed for development, you can use pip:\n\n<pre>\n$ pip install camelot-py[dev]\n</pre>\n\nAlternatively, you can clone the project repository, and install using pip:\n\n<pre>\n$ pip install \".[dev]\"\n</pre>\n\n## Pull Requests\n\n### Submit a pull request\n\nThe preferred workflow for contributing to Camelot is to fork the [project repository](https://github.com/camelot-dev/camelot) on GitHub, clone, develop on a branch and then finally submit a pull request. Here are the steps:\n\n1. Fork the project repository. Click on the ‘Fork’ button near the top of the page. This creates a copy of the code under your account on the GitHub.\n\n2. Clone your fork of Camelot from your GitHub account:\n\n<pre>\n$ git clone https://www.github.com/[username]/camelot\n</pre>\n\n3. Create a branch to hold your changes:\n\n<pre>\n$ git checkout -b my-feature\n</pre>\n\nAlways branch out from `master` to work on your contribution. It's good practice to never work on the `master` branch!\n\n**Protip: `git stash` is a great way to save the work that you haven't committed yet, to move between branches.**\n\n4. Work on your contribution. Add changed files using `git add` and then `git commit` them:\n\n<pre>\n$ git add modified_files\n$ git commit\n</pre>\n\n5. Finally, push them to your GitHub fork:\n\n<pre>\n$ git push -u origin my-feature\n</pre>\n\nNow it's time to go to the your fork of Camelot and create a pull request! You can [follow these instructions](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) to do this.\n\n### Work on your pull request\n\nWe recommend that your pull request complies with the following rules:\n\n- Make sure your code follows [pep8](http://pep8.org).\n\n- In case your pull request contains function docstrings, make sure you follow the [numpydoc](https://numpydoc.readthedocs.io/en/latest/format.html) format. All function docstrings in Camelot follow this format. Moreover, following the format will make sure that the API documentation is generated flawlessly.\n\n- Make sure your commit messages follow [the seven rules of a great git commit message](https://chris.beams.io/posts/git-commit/):\n    - Separate subject from body with a blank line\n    - Limit the subject line to 50 characters\n    - Capitalize the subject line\n    - Do not end the subject line with a period\n    - Use the imperative mood in the subject line\n    - Wrap the body at 72 characters\n    - Use the body to explain what and why vs. how\n\n- Please prefix the title of your pull request with [MRG] (Ready for Merge), if the contribution is complete and ready for a detailed review. An incomplete pull request's title should be prefixed with [WIP] (to indicate a work in progress), and changed to [MRG] when it's complete. A good [task list](https://blog.github.com/2013-01-09-task-lists-in-gfm-issues-pulls-comments/) in the PR description will ensure that other people get a better idea of what it proposes to do, which will also increase collaboration.\n\n- If contributing new functionality, make sure that you add a unit test for it, while making sure that all previous tests pass. Camelot uses [pytest](https://docs.pytest.org/en/latest/) for testing. Tests can be run using:\n\n<pre>\n$ python setup.py test\n</pre>\n\n## Writing Documentation\n\nWriting documentation, function docstrings, examples and tutorials is a great way to start contributing to open-source software! The documentation is present inside the `docs/` directory of the project repository.\n\nIt is written in [reStructuredText](https://en.wikipedia.org/wiki/ReStructuredText), with [Sphinx](http://www.sphinx-doc.org/en/master/) used to generate these lovely HTML files that you're currently reading (unless you're reading this on GitHub). You can edit the documentation using any text editor and then generate the HTML output by running `make html` in the `docs/` directory.\n\nThe function docstrings are written using the [numpydoc](https://numpydoc.readthedocs.io/en/latest/format.html) extension for Sphinx. Make sure you check out its format guidelines before you start writing one.\n\n## Filing Issues\n\nWe use [GitHub issues](https://github.com/camelot-dev/camelot/issues) to keep track of all issues and pull requests. Before opening an issue (which asks a question or reports a bug), please use GitHub search to look for existing issues (both open and closed) that may be similar.\n\n### Questions\n\nPlease don't use GitHub issues for support questions. A better place for them would be [Stack Overflow](http://stackoverflow.com). Make sure you tag them using the `python-camelot` tag.\n\n### Bug Reports\n\nIn bug reports, make sure you include:\n\n- Your operating system type and Python version number, along with the version numbers of NumPy, OpenCV and Camelot. You can use the following code snippet to find this information:\n\n<pre>\nimport platform; print(platform.platform())\nimport sys; print('Python', sys.version)\nimport numpy; print('NumPy', numpy.__version__)\nimport cv2; print('OpenCV', cv2.__version__)\nimport camelot; print('Camelot', camelot.__version__)\n</pre>\n\n- The complete traceback. Just adding the exception message or a part of the traceback won't help us fix your issue sooner.\n- Steps to reproduce the bug, using code snippets. See [Creating and highlighting code blocks](https://help.github.com/articles/creating-and-highlighting-code-blocks/).\n- A link to the PDF document that you were trying to extract tables from, telling us what you expected the code to do and what actually happened.\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 11.44140625,
          "content": "Release History\n===============\n\nmaster\n------\n\n0.7.3 (2019-07-07)\n------------------\n\n**Improvements**\n\n* Camelot now follows the Black code style! [#1](https://github.com/camelot-dev/camelot/pull/1) and [#3](https://github.com/camelot-dev/camelot/pull/3).\n\n**Bugfixes**\n\n* Fix Click.HelpFormatter monkey-patch. [#5](https://github.com/camelot-dev/camelot/pull/5) by [Dimiter Naydenov](https://github.com/dimitern).\n* Fix strip_text argument getting ignored. [#4](https://github.com/camelot-dev/camelot/pull/4) by [Dimiter Naydenov](https://github.com/dimitern).\n* [#25](https://github.com/camelot-dev/camelot/issues/25) edge_tol skipped in read_pdf. [#26](https://github.com/camelot-dev/camelot/pull/26) by Vinayak Mehta.\n* Fix pytest deprecation warning. [#2](https://github.com/camelot-dev/camelot/pull/2) by Vinayak Mehta.\n* [#293](https://github.com/socialcopsdev/camelot/issues/293) Split text ignores all text to the right of last cut. [#294](https://github.com/socialcopsdev/camelot/pull/294) by Vinayak Mehta.\n* [#277](https://github.com/socialcopsdev/camelot/issues/277) Sort TableList by order of tables in PDF. [#283](https://github.com/socialcopsdev/camelot/pull/283) by [Sym Roe](https://github.com/symroe).\n* [#312](https://github.com/socialcopsdev/camelot/issues/312) `table_regions` throws `ValueError` when `flavor='stream'`. [#332](https://github.com/socialcopsdev/camelot/pull/332) by Vinayak Mehta.\n\n0.7.2 (2019-01-10)\n------------------\n\n**Bugfixes**\n\n* [#245](https://github.com/socialcopsdev/camelot/issues/245) Fix AttributeError for encrypted files. [#251](https://github.com/socialcopsdev/camelot/pull/251) by Yatin Taluja.\n\n\n0.7.1 (2019-01-06)\n------------------\n\n**Bugfixes**\n\n* Move ghostscript import to inside the function so Anaconda builds don't fail.\n\n0.7.0 (2019-01-05)\n------------------\n\n**Improvements**\n\n* [#240](https://github.com/socialcopsdev/camelot/issues/209) Add support to analyze only certain page regions to look for tables. [#243](https://github.com/socialcopsdev/camelot/pull/243) by Vinayak Mehta.\n    * You can use `table_regions` in `read_pdf()` to specify approximate page regions which may contain tables.\n    * Kwarg `line_size_scaling` is now called `line_scale`.\n* [#212](https://github.com/socialcopsdev/camelot/issues/212) Add support to export as sqlite database. [#244](https://github.com/socialcopsdev/camelot/pull/244) by Vinayak Mehta.\n* [#239](https://github.com/socialcopsdev/camelot/issues/239) Raise warning if PDF is image-based. [#240](https://github.com/socialcopsdev/camelot/pull/240) by Vinayak Mehta.\n\n**Documentation**\n\n* Remove mention of old mesh kwarg from docs. [#241](https://github.com/socialcopsdev/camelot/pull/241) by [fte10kso](https://github.com/fte10kso).\n\n**Note**: The python wrapper to Ghostscript's C API is now vendorized under the `ext` module. This was done due to unavailability of the [ghostscript](https://pypi.org/project/ghostscript/) package on Anaconda. The code should be removed after we submit a recipe for it to conda-forge. With this release, the user doesn't need to ensure that the Ghostscript executable is available on the PATH variable.\n\n0.6.0 (2018-12-24)\n------------------\n\n**Improvements**\n\n* [#91](https://github.com/socialcopsdev/camelot/issues/91) Add support to read from url. [#236](https://github.com/socialcopsdev/camelot/pull/236) by Vinayak Mehta.\n* [#229](https://github.com/socialcopsdev/camelot/issues/229), [#230](https://github.com/socialcopsdev/camelot/issues/230) and [#233](https://github.com/socialcopsdev/camelot/issues/233) New configuration parameters. [#234](https://github.com/socialcopsdev/camelot/pull/234) by Vinayak Mehta.\n    * `strip_text`: To define characters that should be stripped from each string.\n    * `edge_tol`: Tolerance parameter for extending textedges vertically.\n    * `resolution`: Resolution used for PDF to PNG conversion.\n    * Check out the [advanced docs](https://camelot-py.readthedocs.io/en/master/user/advanced.html#strip-characters-from-text) for usage details.\n* [#170](https://github.com/socialcopsdev/camelot/issues/170) Add option to pass pdfminer layout kwargs. [#232](https://github.com/socialcopsdev/camelot/pull/232) by Vinayak Mehta.\n    * Keyword arguments for [pdfminer.layout.LAParams](https://github.com/euske/pdfminer/blob/master/pdfminer/layout.py#L33) can now be passed using `layout_kwargs` in `read_pdf()`.\n    * The `margins` keyword argument in `read_pdf()` is now deprecated.\n\n0.5.0 (2018-12-13)\n------------------\n\n**Improvements**\n\n* [#207](https://github.com/socialcopsdev/camelot/issues/207) Add a plot type for Stream text edges and detected table areas. [#224](https://github.com/socialcopsdev/camelot/pull/224) by Vinayak Mehta.\n* [#204](https://github.com/socialcopsdev/camelot/issues/204) `suppress_warnings` is now called `suppress_stdout`. [#225](https://github.com/socialcopsdev/camelot/pull/225) by Vinayak Mehta.\n\n**Bugfixes**\n\n* [#217](https://github.com/socialcopsdev/camelot/issues/217) Fix IndexError when scale is large.\n* [#105](https://github.com/socialcopsdev/camelot/issues/105), [#192](https://github.com/socialcopsdev/camelot/issues/192) and [#215](https://github.com/socialcopsdev/camelot/issues/215) in [#227](https://github.com/socialcopsdev/camelot/pull/227) by Vinayak Mehta.\n\n**Documentation**\n\n* Add pdfplumber comparison and update Tabula (stream) comparison. Check out the [wiki page](https://github.com/socialcopsdev/camelot/wiki/Comparison-with-other-PDF-Table-Extraction-libraries-and-tools).\n\n0.4.1 (2018-12-05)\n------------------\n\n**Bugfixes**\n\n* Add chardet to `install_requires` to fix [#210](https://github.com/socialcopsdev/camelot/issues/210). More details in [pdfminer.six#213](https://github.com/pdfminer/pdfminer.six/issues/213).\n\n0.4.0 (2018-11-23)\n------------------\n\n**Improvements**\n\n* [#102](https://github.com/socialcopsdev/camelot/issues/102) Detect tables automatically when Stream is used. [#206](https://github.com/socialcopsdev/camelot/pull/206) Add implementation of Anssi Nurminen's table detection algorithm by Vinayak Mehta.\n\n0.3.2 (2018-11-04)\n------------------\n\n**Improvements**\n\n* [#186](https://github.com/socialcopsdev/camelot/issues/186) Add `_bbox` attribute to table. [#193](https://github.com/socialcopsdev/camelot/pull/193) by Vinayak Mehta.\n    * You can use `table._bbox` to get coordinates of the detected table.\n\n0.3.1 (2018-11-02)\n------------------\n\n**Improvements**\n\n* Matplotlib is now an optional requirement. [#190](https://github.com/socialcopsdev/camelot/pull/190) by Vinayak Mehta.\n    * You can install it using `$ pip install camelot-py[plot]`.\n* [#127](https://github.com/socialcopsdev/camelot/issues/127) Add tests for plotting. Coverage is now at 87%! [#179](https://github.com/socialcopsdev/camelot/pull/179) by [Suyash Behera](https://github.com/Suyash458).\n\n0.3.0 (2018-10-28)\n------------------\n\n**Improvements**\n\n* [#162](https://github.com/socialcopsdev/camelot/issues/162) Add password keyword argument. [#180](https://github.com/socialcopsdev/camelot/pull/180) by [rbares](https://github.com/rbares).\n    * An encrypted PDF can now be decrypted by passing `password='<PASSWORD>'` to `read_pdf` or `--password <PASSWORD>` to the command-line interface. (Limited encryption algorithm support from PyPDF2.)\n* [#139](https://github.com/socialcopsdev/camelot/issues/139) Add suppress_warnings keyword argument. [#155](https://github.com/socialcopsdev/camelot/pull/155) by [Jonathan Lloyd](https://github.com/jonathanlloyd).\n    * Warnings raised by Camelot can now be suppressed by passing `suppress_warnings=True` to `read_pdf` or `--quiet` to the command-line interface.\n* [#154](https://github.com/socialcopsdev/camelot/issues/154) The CLI can now be run using `python -m`. Try `python -m camelot --help`. [#159](https://github.com/socialcopsdev/camelot/pull/159) by [Parth P Panchal](https://github.com/pqrth).\n* [#165](https://github.com/socialcopsdev/camelot/issues/165) Rename `table_area` to `table_areas`. [#171](https://github.com/socialcopsdev/camelot/pull/171) by [Parth P Panchal](https://github.com/pqrth).\n\n**Bugfixes**\n\n* Raise error if the ghostscript executable is not on the PATH variable. [#166](https://github.com/socialcopsdev/camelot/pull/166) by Vinayak Mehta.\n* Convert filename to lowercase to check for PDF extension. [#169](https://github.com/socialcopsdev/camelot/pull/169) by [Vinicius Mesel](https://github.com/vmesel).\n\n**Files**\n\n* [#114](https://github.com/socialcopsdev/camelot/issues/114) Add Makefile and make codecov run only once. [#132](https://github.com/socialcopsdev/camelot/pull/132) by [Vaibhav Mule](https://github.com/vaibhavmule).\n* Add .editorconfig. [#151](https://github.com/socialcopsdev/camelot/pull/151) by [KOLANICH](https://github.com/KOLANICH).\n* Downgrade numpy version from 1.15.2 to 1.13.3.\n* Add requirements.txt for readthedocs.\n\n**Documentation**\n\n* Add \"Using conda\" section to installation instructions.\n* Add readthedocs badge.\n\n0.2.3 (2018-10-08)\n------------------\n\n* Remove hard dependencies on requirements versions.\n\n0.2.2 (2018-10-08)\n------------------\n\n**Bugfixes**\n\n* Move opencv-python to extra\\_requires. [#134](https://github.com/socialcopsdev/camelot/pull/134) by Vinayak Mehta.\n\n0.2.1 (2018-10-05)\n------------------\n\n**Bugfixes**\n\n* [#121](https://github.com/socialcopsdev/camelot/issues/121) Fix ghostscript subprocess call for Windows. [#124](https://github.com/socialcopsdev/camelot/pull/124) by Vinayak Mehta.\n\n**Improvements**\n\n* [#123](https://github.com/socialcopsdev/camelot/issues/123) Make PEP8 compatible. [#125](https://github.com/socialcopsdev/camelot/pull/125) by [Oshawk](https://github.com/Oshawk).\n* [#110](https://github.com/socialcopsdev/camelot/issues/110) Add more tests. Coverage is now at 84%!\n    * Add tests for `__repr__`. [#128](https://github.com/socialcopsdev/camelot/pull/128) by [Vaibhav Mule](https://github.com/vaibhavmule).\n    * Add tests for CLI. [#122](https://github.com/socialcopsdev/camelot/pull/122) by [Vaibhav Mule](https://github.com/vaibhavmule) and [#117](https://github.com/socialcopsdev/camelot/pull/117) by Vinayak Mehta.\n    * Add tests for errors/warnings. [#113](https://github.com/socialcopsdev/camelot/pull/113) by Vinayak Mehta.\n    * Add tests for output formats and parser kwargs. [#126](https://github.com/socialcopsdev/camelot/pull/126) by Vinayak Mehta.\n* Add Python 3.5 and 3.7 support. [#119](https://github.com/socialcopsdev/camelot/pull/119) by Vinayak Mehta.\n* Add logging and warnings.\n\n**Documentation**\n\n* Copyedit all documentation. [#112](https://github.com/socialcopsdev/camelot/pull/112) by [Christine Garcia](https://github.com/christinegarcia).\n* [#115](https://github.com/socialcopsdev/camelot/issues/115) Update issue labels in contributor's guide. [#116](https://github.com/socialcopsdev/camelot/pull/116) by [Johnny Metz](https://github.com/johnnymetz).\n* Update installation instructions for Windows. [#124](https://github.com/socialcopsdev/camelot/pull/124) by Vinayak Mehta.\n\n**Note**: This release also bumps the version for numpy from 1.13.3 to 1.15.2 and adds a MANIFEST.in. Also, openpyxl==2.5.8 is a new requirement and pytest-cov==2.6.0 is a new dev requirement.\n\n0.2.0 (2018-09-28)\n------------------\n\n**Improvements**\n\n* [#81](https://github.com/socialcopsdev/camelot/issues/81) Add Python 3.6 support. [#109](https://github.com/socialcopsdev/camelot/pull/109) by Vinayak Mehta.\n\n0.1.2 (2018-09-25)\n------------------\n\n**Improvements**\n\n* [#85](https://github.com/socialcopsdev/camelot/issues/85) Add Travis and Codecov.\n\n0.1.1 (2018-09-24)\n------------------\n\n**Documentation**\n\n* Add documentation fixes.\n\n0.1.0 (2018-09-24)\n------------------\n\n* Rebirth!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1337890625,
          "content": "MIT License\n\nModifications:\n\nCopyright (c) 2019 Camelot Developers\n\nOriginal project:\n\nCopyright (c) 2018 Peeply Private Ltd (Singapore)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.06640625,
          "content": "include MANIFEST.in README.md HISTORY.md LICENSE setup.py setup.cfg\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.6884765625,
          "content": ".PHONY: docs\nINSTALL :=\nUNAME_S := $(shell uname -s)\nifeq ($(UNAME_S),Linux)\n\tINSTALL := @sudo apt install python-tk python3-tk ghostscript\nelse ifeq ($(UNAME_S),Darwin)\n\tINSTALL := @brew install tcl-tk ghostscript\nelse\n\tINSTALL := @echo \"Please install tk and ghostscript\"\nendif\n\ninstall:\n\t$(INSTALL)\n\tpip install --upgrade pip\n\tpip install \".[dev]\"\n\ntest:\n\tpytest --verbose --cov-config .coveragerc --cov-report term --cov-report xml --cov=camelot --mpl\n\ndocs:\n\tcd docs && make html\n\t@echo \"\\033[95m\\n\\nBuild successful! View the docs homepage at docs/_build/html/index.html.\\n\\033[0m\"\n\npublish:\n\tpip install twine\n\tpython setup.py sdist\n\ttwine upload dist/*\n\trm -fr build dist .egg camelot_py.egg-info\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2080078125,
          "content": "<p align=\"center\">\n   <img src=\"https://raw.githubusercontent.com/camelot-dev/camelot/master/docs/_static/camelot.png\" width=\"200\">\n</p>\n\n# Camelot: PDF Table Extraction for Humans\n\n[![Build Status](https://travis-ci.org/camelot-dev/camelot.svg?branch=master)](https://travis-ci.org/camelot-dev/camelot) [![Documentation Status](https://readthedocs.org/projects/camelot-py/badge/?version=master)](https://camelot-py.readthedocs.io/en/master/)\n [![codecov.io](https://codecov.io/github/camelot-dev/camelot/badge.svg?branch=master&service=github)](https://codecov.io/github/camelot-dev/camelot?branch=master)\n [![image](https://img.shields.io/pypi/v/camelot-py.svg)](https://pypi.org/project/camelot-py/) [![image](https://img.shields.io/pypi/l/camelot-py.svg)](https://pypi.org/project/camelot-py/) [![image](https://img.shields.io/pypi/pyversions/camelot-py.svg)](https://pypi.org/project/camelot-py/) [![Gitter chat](https://badges.gitter.im/camelot-dev/Lobby.png)](https://gitter.im/camelot-dev/Lobby)\n[![image](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\n\n**Camelot** is a Python library that makes it easy for *anyone* to extract tables from PDF files!\n\n**Note:** You can also check out [Excalibur](https://github.com/camelot-dev/excalibur), which is a web interface for Camelot!\n\n---\n\n**Here's how you can extract tables from PDF files.** Check out the PDF used in this example [here](https://github.com/camelot-dev/camelot/blob/master/docs/_static/pdf/foo.pdf).\n\n<pre>\n>>> import camelot\n>>> tables = camelot.read_pdf('foo.pdf')\n>>> tables\n&lt;TableList n=1&gt;\n>>> tables.export('foo.csv', f='csv', compress=True) # json, excel, html, sqlite\n>>> tables[0]\n&lt;Table shape=(7, 7)&gt;\n>>> tables[0].parsing_report\n{\n    'accuracy': 99.02,\n    'whitespace': 12.24,\n    'order': 1,\n    'page': 1\n}\n>>> tables[0].to_csv('foo.csv') # to_json, to_excel, to_html, to_sqlite\n>>> tables[0].df # get a pandas DataFrame!\n</pre>\n\n| Cycle Name | KI (1/km) | Distance (mi) | Percent Fuel Savings |                 |                 |                |\n|------------|-----------|---------------|----------------------|-----------------|-----------------|----------------|\n|            |           |               | Improved Speed       | Decreased Accel | Eliminate Stops | Decreased Idle |\n| 2012_2     | 3.30      | 1.3           | 5.9%                 | 9.5%            | 29.2%           | 17.4%          |\n| 2145_1     | 0.68      | 11.2          | 2.4%                 | 0.1%            | 9.5%            | 2.7%           |\n| 4234_1     | 0.59      | 58.7          | 8.5%                 | 1.3%            | 8.5%            | 3.3%           |\n| 2032_2     | 0.17      | 57.8          | 21.7%                | 0.3%            | 2.7%            | 1.2%           |\n| 4171_1     | 0.07      | 173.9         | 58.1%                | 1.6%            | 2.1%            | 0.5%           |\n\nThere's a [command-line interface](https://camelot-py.readthedocs.io/en/master/user/cli.html) too!\n\n**Note:** Camelot only works with text-based PDFs and not scanned documents. (As Tabula [explains](https://github.com/tabulapdf/tabula#why-tabula), \"If you can click and drag to select text in your table in a PDF viewer, then your PDF is text-based\".)\n\n## Why Camelot?\n\n- **You are in control.**: Unlike other libraries and tools which either give a nice output or fail miserably (with no in-between), Camelot gives you the power to tweak table extraction. (This is important since everything in the real world, including PDF table extraction, is fuzzy.)\n- *Bad* tables can be discarded based on **metrics** like accuracy and whitespace, without ever having to manually look at each table.\n- Each table is a **pandas DataFrame**, which seamlessly integrates into [ETL and data analysis workflows](https://gist.github.com/vinayak-mehta/e5949f7c2410a0e12f25d3682dc9e873).\n- **Export** to multiple formats, including JSON, Excel, HTML and Sqlite.\n\nSee [comparison with other PDF table extraction libraries and tools](https://github.com/camelot-dev/camelot/wiki/Comparison-with-other-PDF-Table-Extraction-libraries-and-tools).\n\n## Installation\n\n### Using conda\n\nThe easiest way to install Camelot is to install it with [conda](https://conda.io/docs/), which is a package manager and  environment management system for the [Anaconda](http://docs.continuum.io/anaconda/) distribution.\n\n<pre>\n$ conda install -c conda-forge camelot-py\n</pre>\n\n### Using pip\n\nAfter [installing the dependencies](https://camelot-py.readthedocs.io/en/master/user/install-deps.html) ([tk](https://packages.ubuntu.com/trusty/python-tk) and [ghostscript](https://www.ghostscript.com/)), you can simply use pip to install Camelot:\n\n<pre>\n$ pip install camelot-py[cv]\n</pre>\n\n### From the source code\n\nAfter [installing the dependencies](https://camelot-py.readthedocs.io/en/master/user/install.html#using-pip), clone the repo using:\n\n<pre>\n$ git clone https://www.github.com/camelot-dev/camelot\n</pre>\n\nand install Camelot using pip:\n\n<pre>\n$ cd camelot\n$ pip install \".[cv]\"\n</pre>\n\n## Documentation\n\nGreat documentation is available at [http://camelot-py.readthedocs.io/](http://camelot-py.readthedocs.io/).\n\n## Development\n\nThe [Contributor's Guide](https://camelot-py.readthedocs.io/en/master/dev/contributing.html) has detailed information about contributing code, documentation, tests and more. We've included some basic information in this README.\n\n### Source code\n\nYou can check the latest sources with:\n\n<pre>\n$ git clone https://www.github.com/camelot-dev/camelot\n</pre>\n\n### Setting up a development environment\n\nYou can install the development dependencies easily, using pip:\n\n<pre>\n$ pip install camelot-py[dev]\n</pre>\n\n### Testing\n\nAfter installation, you can run tests using:\n\n<pre>\n$ python setup.py test\n</pre>\n\n## Versioning\n\nCamelot uses [Semantic Versioning](https://semver.org/). For the available versions, see the tags on this repository. For the changelog, you can check out [HISTORY.md](https://github.com/camelot-dev/camelot/blob/master/HISTORY.md).\n\n## License\n\nThis project is licensed under the MIT License, see the [LICENSE](https://github.com/camelot-dev/camelot/blob/master/LICENSE) file for details.\n\n<img src=\"https://user-images.githubusercontent.com/408863/66741678-a78ab780-ee93-11e9-8d90-b274af222339.png\" align=\"centre\" />\n"
        },
        {
          "name": "camelot",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1328125,
          "content": "click>=6.7\nmatplotlib>=2.2.3\nnumpy>=1.13.3\nopencv-python>=3.4.2.17\nopenpyxl>=2.5.8\npandas>=0.23.4\npdfminer.six>=20170720\nPyPDF2>=1.26.0\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1640625,
          "content": "[aliases]\ntest=pytest\n\n[tool:pytest]\naddopts = --verbose --cov-config .coveragerc --cov-report term --cov-report xml --cov=camelot --mpl\npython_files = tests/test_*.py\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.4716796875,
          "content": "# -*- coding: utf-8 -*-\n\nimport os\nfrom setuptools import find_packages\n\n\nhere = os.path.abspath(os.path.dirname(__file__))\nabout = {}\nwith open(os.path.join(here, 'camelot', '__version__.py'), 'r') as f:\n    exec(f.read(), about)\n\nwith open('README.md', 'r') as f:\n    readme = f.read()\n\n\nrequires = [\n    'chardet>=3.0.4',\n    'click>=6.7',\n    'numpy>=1.13.3',\n    'openpyxl>=2.5.8',\n    'pandas>=0.23.4',\n    'pdfminer.six>=20170720',\n    'PyPDF2>=1.26.0'\n]\n\ncv_requires = [\n    'opencv-python>=3.4.2.17'\n]\n\nplot_requires = [\n    'matplotlib>=2.2.3',\n]\n\ndev_requires = [\n    'codecov>=2.0.15',\n    'pytest>=3.8.0',\n    'pytest-cov>=2.6.0',\n    'pytest-mpl>=0.10',\n    'pytest-runner>=4.2',\n    'Sphinx>=1.7.9'\n]\n\nall_requires = cv_requires + plot_requires\ndev_requires = dev_requires + all_requires\n\n\ndef setup_package():\n    metadata = dict(name=about['__title__'],\n                    version=about['__version__'],\n                    description=about['__description__'],\n                    long_description=readme,\n                    long_description_content_type=\"text/markdown\",\n                    url=about['__url__'],\n                    author=about['__author__'],\n                    author_email=about['__author_email__'],\n                    license=about['__license__'],\n                    packages=find_packages(exclude=('tests',)),\n                    install_requires=requires,\n                    extras_require={\n                        'all': all_requires,\n                        'cv': cv_requires,\n                        'dev': dev_requires,\n                        'plot': plot_requires\n                    },\n                    entry_points={\n                        'console_scripts': [\n                            'camelot = camelot.cli:cli',\n                        ],\n                    },\n                    classifiers=[\n                        # Trove classifiers\n                        # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers\n                        'License :: OSI Approved :: MIT License',\n                        'Programming Language :: Python :: 2.7',\n                        'Programming Language :: Python :: 3.5',\n                        'Programming Language :: Python :: 3.6',\n                        'Programming Language :: Python :: 3.7'\n                    ])\n\n    try:\n        from setuptools import setup\n    except ImportError:\n        from distutils.core import setup\n\n    setup(**metadata)\n\n\nif __name__ == '__main__':\n    setup_package()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}