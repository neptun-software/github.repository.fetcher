{
  "metadata": {
    "timestamp": 1736560405062,
    "page": 961,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Nixtla/neuralforecast",
      "stars": 3233,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 2.9716796875,
          "content": "{\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": false,\n  \"contributors\": [\n    {\n      \"login\": \"AzulGarza\",\n      \"name\": \"azul\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/10517170?v=4\",\n      \"profile\": \"https://github.com/AzulGarza\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"cchallu\",\n      \"name\": \"Cristian Challu\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/31133398?v=4\",\n      \"profile\": \"https://github.com/cchallu\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"jmoralez\",\n      \"name\": \"Jos√© Morales\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/8473587?v=4\",\n      \"profile\": \"https://github.com/jmoralez\",\n      \"contributions\": [\n        \"code\",\n        \"maintenance\"\n      ]\n    },\n    {\n      \"login\": \"mergenthaler\",\n      \"name\": \"mergenthaler\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/4086186?v=4\",\n      \"profile\": \"https://github.com/mergenthaler\",\n      \"contributions\": [\n        \"doc\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"kdgutier\",\n      \"name\": \"Kin\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19935241?v=4\",\n      \"profile\": \"https://github.com/kdgutier\",\n      \"contributions\": [\n        \"code\",\n        \"bug\",\n        \"data\"\n      ]\n    },\n    {\n      \"login\": \"gdevos010\",\n      \"name\": \"Greg DeVos\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/15316026?v=4\",\n      \"profile\": \"https://github.com/gdevos010\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"alejandroxag\",\n      \"name\": \"Alejandro\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/64334543?v=4\",\n      \"profile\": \"https://github.com/alejandroxag\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"stefanialvs\",\n      \"name\": \"stefanialvs\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/48966177?v=4\",\n      \"profile\": \"http://lavattiata.com\",\n      \"contributions\": [\n        \"design\"\n      ]\n    },\n    {\n      \"login\": \"eltociear\",\n      \"name\": \"Ikko Ashimine\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/22633385?v=4\",\n      \"profile\": \"https://bandism.net/\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"vglaucus\",\n      \"name\": \"vglaucus\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/75549033?v=4\",\n      \"profile\": \"https://github.com/vglaucus\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"pitmonticone\",\n      \"name\": \"Pietro Monticone\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/38562595?v=4\",\n      \"profile\": \"https://github.com/pitmonticone\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7,\n  \"projectName\": \"neuralforecast\",\n  \"projectOwner\": \"Nixtla\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"skipCi\": true\n}\n"
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0546875,
          "content": "*.ipynb merge=nbdev-merge\nnbs/** linguist-documentation\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3056640625,
          "content": ".ipynb_checkpoints\n__pycache__\n*.egg-info\nGemfile*\nGemfile.lock\ndocs/_site\nbuild\ndist\n.vscode\n*.gif\n*.csv\n*/data/*\n*.parquet\ntmp\n_docs/\nsidebar.yml\n.DS_Store\n.gitattributes\n.gitconfig\nnbs/.last_checked\n_proc\nlightning_logs/\n/**/data/\ndebug_run\n\nlonghorizon/\n_old/\ndata\nmlruns\ncheckpoints\nnbs/_extensions/mintlify\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5732421875,
          "content": "fail_fast: true\n\nrepos:\n  - repo: local\n    hooks:\n      - id: imports_with_code\n        name: Cells with imports and code\n        entry: python action_files/imports_with_code.py\n        language: system\n  - repo: https://github.com/fastai/nbdev\n    rev: 2.2.10\n    hooks:\n      - id: nbdev_clean\n      - id: nbdev_export\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.2.1\n    hooks:\n      - id: ruff\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.8.0\n    hooks:\n      - id: mypy\n        args: [--ignore-missing-imports]\n        exclude: 'setup.py'\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.0927734375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nops@nixtla.io.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.9306640625,
          "content": "# How to contribute\n\n## Did you find a bug?\n\n* Ensure the bug was not already reported by searching on GitHub under Issues.\n* If you're unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\n* Be sure to add the complete error messages.\n\n## Do you have a feature request?\n\n* Ensure that it hasn't been yet implemented in the `main` branch of the repository and that there's not an Issue requesting it yet.\n* Open a new issue and make sure to describe it clearly, mention how it improves the project and why its useful.\n\n## Do you want to fix a bug or implement a feature?\n\nBug fixes and features are added through pull requests (PRs).\n\n##  PR submission guidelines\n\n* Keep each PR focused. While it's more convenient, do not combine several unrelated fixes together. Create as many branches as needing to keep each PR focused.\n* Ensure that your PR includes a test that fails without your patch, and passes with it.\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n* Do not mix style changes/fixes with \"functional\" changes. It's very difficult to review such PRs and it most likely get rejected.\n* Do not add/remove vertical whitespace. Preserve the original style of the file you edit as much as you can.\n* Do not turn an already submitted PR into your development playground. If after you submitted PR, you discovered that more work is needed - close the PR, do the required work and then submit a new PR. Otherwise each of your commits requires attention from maintainers of the project.\n* If, however, you submitted a PR and received a request for changes, you should proceed with commits inside that PR, so that the maintainer can see the incremental fixes and won't need to review the whole PR again. In the exception case where you realize it'll take many many commits to complete the requests, then it's probably best to close the PR, do the work and then submit it again. Use common sense where you'd choose one way over another.\n\n### Local setup for working on a PR\n\n#### Clone the repository\n* HTTPS: `git clone https://github.com/Nixtla/neuralforecast.git`\n* SSH: `git clone git@github.com:Nixtla/neuralforecast.git`\n* GitHub CLI: `gh repo clone Nixtla/neuralforecast`\n\n#### Set up a conda environment\nThe repo comes with an `environment.yml` file which contains the libraries needed to run all the tests. In order to set up the environment you must have `conda` installed, we recommend [miniconda](https://docs.conda.io/en/latest/miniconda.html).\n\nOnce you have `conda` go to the top level directory of the repository and run the following lines:\n```\nconda create -n neuralforecast python=3.10\nconda activate neuralforecast\n```\nThen, run one of the following commands:\n```\nconda env update -f environment-cpu.yml  # choose this if you want to install the CPU-only version of neuralforecast\nconda env update -f environment-cuda.yml # choose this if you want to install the CUDA-enabled version of neuralforecast\n```\n\n#### Install the library\nOnce you have your environment setup, activate it using `conda activate neuralforecast` and then install the library in editable mode using `pip install -e \".[dev]\"`\n\n#### Install git hooks\nBefore doing any changes to the code, please install the git hooks that run automatic scripts during each commit and merge to strip the notebooks of superfluous metadata (and avoid merge conflicts).\n```\nnbdev_install_hooks\npre-commit install\n```\n\n### Preview Changes\nYou can preview changes in your local browser before pushing by using the `nbdev_preview`.\n\n### Building the library\nThe library is built using the notebooks contained in the `nbs` folder. If you want to make any changes to the library you have to find the relevant notebook, make your changes and then call:\n```\nnbdev_export\n```\n\n### Running tests\nIf you're working on the local interface you can just use `nbdev_test --n_workers 1 --do_print --timing`. \n\n### Cleaning notebooks\nSince the notebooks output cells can vary from run to run (even if they produce the same outputs) the notebooks are cleaned before committing them. Please make sure to run `nbdev_clean --clear_all` before committing your changes. If you clean the library's notebooks with this command please backtrack the changes you make to the example notebooks `git checkout nbs/examples`, unless you intend to change the examples.\n\n## Do you want to contribute to the documentation?\n\n* Docs are automatically created from the notebooks in the `nbs` folder.\n* In order to modify the documentation:\n    1. Find the relevant notebook.\n    2. Make your changes.\n    3. Run all cells.\n    4. If you are modifying library notebooks (not in `nbs/examples`), clean all outputs using `Edit > Clear All Outputs`.\n    5. Run `nbdev_preview`.\n    6. Clean the notebook metadata using `nbdev_clean`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2024 Nixtla\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.380859375,
          "content": "## Include List\n\ninclude README.md\ninclude LICENSE\ninclude settings.ini\n\nrecursive-include neuralforecast *\n\n\n## Exclude List\n\nexclude CONTRIBUTING.md\nexclude Makefile\nexclude environment.yml\n\nexclude .gitconfig\nexclude .gitignore\nexclude .gitmodules\n\nrecursive-exclude .github *\nrecursive-exclude docs *\nrecursive-exclude examples *\nrecursive-exclude experiments *\nrecursive-exclude nbs *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.5771484375,
          "content": "# Nixtla &nbsp; [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Statistical%20Forecasting%20Algorithms%20by%20Nixtla%20&url=https://github.com/Nixtla/neuralforecast&via=nixtlainc&hashtags=StatisticalModels,TimeSeries,Forecasting) &nbsp;[![Slack](https://img.shields.io/badge/Slack-4A154B?&logo=slack&logoColor=white)](https://join.slack.com/t/nixtlacommunity/shared_invite/zt-1pmhan9j5-F54XR20edHk0UtYAPcW4KQ)\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/Nixtla/neuralforecast/main/nbs/imgs_indx/logo_new.png\">\n<h1 align=\"center\">Neural üß† Forecast</h1>\n<h3 align=\"center\">User friendly state-of-the-art neural forecasting models</h3>\n\n[![CI](https://github.com/Nixtla/neuralforecast/actions/workflows/ci.yaml/badge.svg?branch=main)](https://github.com/Nixtla/neuralforecast/actions/workflows/ci.yaml)\n[![Python](https://img.shields.io/pypi/pyversions/neuralforecast)](https://pypi.org/project/neuralforecast/)\n[![PyPi](https://img.shields.io/pypi/v/neuralforecast?color=blue)](https://pypi.org/project/neuralforecast/)\n[![conda-nixtla](https://img.shields.io/conda/vn/conda-forge/neuralforecast?color=seagreen&label=conda)](https://anaconda.org/conda-forge/neuralforecast)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://github.com/Nixtla/neuralforecast/blob/main/LICENSE)\n[![docs](https://img.shields.io/website-up-down-green-red/http/nixtla.github.io/neuralforecast.svg?label=docs)](https://nixtla.github.io/neuralforecast/)  \n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-11-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n**NeuralForecast** offers a large collection of neural forecasting models focusing on their performance, usability, and robustness. The models range from classic networks like RNNs to the latest transformers: `MLP`, `LSTM`, `GRU`, `RNN`, `TCN`, `TimesNet`, `BiTCN`, `DeepAR`, `NBEATS`, `NBEATSx`, `NHITS`, `TiDE`, `DeepNPTS`, `TSMixer`, `TSMixerx`, `MLPMultivariate`, `DLinear`, `NLinear`, `TFT`, `Informer`, `AutoFormer`, `FedFormer`, `PatchTST`, `iTransformer`, `StemGNN`, and `TimeLLM`.\n</div>\n\n## Installation\n\nYou can install `NeuralForecast` with:\n\n```python\npip install neuralforecast\n```\n\nor \n\n```python\nconda install -c conda-forge neuralforecast\n``` \nVist our [Installation Guide](https://nixtlaverse.nixtla.io/neuralforecast/docs/getting-started/installation.html) for further details.\n\n## Quick Start\n\n**Minimal Example**\n\n```python\nfrom neuralforecast import NeuralForecast\nfrom neuralforecast.models import NBEATS\nfrom neuralforecast.utils import AirPassengersDF\n\nnf = NeuralForecast(\n    models = [NBEATS(input_size=24, h=12, max_steps=100)],\n    freq = 'M'\n)\n\nnf.fit(df=AirPassengersDF)\nnf.predict()\n```\n\n**Get Started with this [quick guide](https://nixtlaverse.nixtla.io/neuralforecast/docs/getting-started/quickstart.html).**\n\n## Why? \n\nThere is a shared belief in Neural forecasting methods' capacity to improve forecasting pipeline's accuracy and efficiency.\n\nUnfortunately, available implementations and published research are yet to realize neural networks' potential. They are hard to use and continuously fail to improve over statistical methods while being computationally prohibitive. For this reason, we created `NeuralForecast`, a library favoring proven accurate and efficient models focusing on their usability.\n\n## Features \n\n* Fast and accurate implementations of more than 30 state-of-the-art models. See the entire [collection here](https://nixtlaverse.nixtla.io/neuralforecast/docs/capabilities/overview.html).\n* Support for exogenous variables and static covariates.\n* Interpretability methods for trend, seasonality and exogenous components.\n* Probabilistic Forecasting with adapters for quantile losses and parametric distributions.\n* Train and Evaluation Losses with scale-dependent, percentage and scale independent errors, and parametric likelihoods.\n* Automatic Model Selection with distributed automatic hyperparameter tuning.\n* Familiar sklearn syntax: `.fit` and `.predict`.\n\n## Highlights\n\n* Official `NHITS` implementation, published at AAAI 2023. See [paper](https://ojs.aaai.org/index.php/AAAI/article/view/25854) and [experiments](./experiments/).\n* Official `NBEATSx` implementation, published at the International Journal of Forecasting. See [paper](https://www.sciencedirect.com/science/article/pii/S0169207022000413).\n* Unified with`StatsForecast`, `MLForecast`, and `HierarchicalForecast` interface `NeuralForecast().fit(Y_df).predict()`, inputs and outputs.\n* Built-in integrations with `utilsforecast` and `coreforecast` for visualization and data-wrangling efficient methods.\n* Integrations with `Ray` and `Optuna` for automatic hyperparameter optimization.\n* Predict with little to no history using Transfer learning. Check the experiments [here](https://github.com/Nixtla/transfer-learning-time-series).\n\nMissing something? Please open an issue or write us in [![Slack](https://img.shields.io/badge/Slack-4A154B?&logo=slack&logoColor=white)](https://join.slack.com/t/nixtlaworkspace/shared_invite/zt-135dssye9-fWTzMpv2WBthq8NK0Yvu6A)\n\n## Examples and Guides\n\nThe [documentation page](https://nixtlaverse.nixtla.io/neuralforecast/docs/getting-started/introduction.html) contains all the examples and tutorials.\n\nüìà [Automatic Hyperparameter Optimization](https://nixtlaverse.nixtla.io/neuralforecast/docs/capabilities/hyperparameter_tuning.html): Easy and Scalable Automatic Hyperparameter Optimization with `Auto` models on `Ray` or `Optuna`.\n\nüå°Ô∏è [Exogenous Regressors](https://nixtlaverse.nixtla.io/neuralforecast/docs/capabilities/exogenous_variables.html): How to incorporate static or temporal exogenous covariates like weather or prices.\n\nüîå [Transformer Models](https://nixtlaverse.nixtla.io/neuralforecast/docs/tutorials/longhorizon_transformers.html): Learn how to forecast with many state-of-the-art Transformers models.\n\nüëë [Hierarchical Forecasting](https://nixtlaverse.nixtla.io/neuralforecast/docs/tutorials/hierarchical_forecasting.html): forecast series with very few non-zero observations. \n\nüë©‚Äçüî¨ [Add Your Own Model](https://nixtlaverse.nixtla.io/neuralforecast/docs/tutorials/adding_models.html): Learn how to add a new model to the library.\n\n## Models\n\nSee the entire [collection here](https://nixtlaverse.nixtla.io/neuralforecast/docs/capabilities/overview.html).\n\nMissing a model? Please open an issue or write us in [![Slack](https://img.shields.io/badge/Slack-4A154B?&logo=slack&logoColor=white)](https://join.slack.com/t/nixtlaworkspace/shared_invite/zt-135dssye9-fWTzMpv2WBthq8NK0Yvu6A)\n\n## How to contribute\nIf you wish to contribute to the project, please refer to our [contribution guidelines](https://github.com/Nixtla/neuralforecast/blob/main/CONTRIBUTING.md).\n\n## References\nThis work is highly influenced by the fantastic work of previous contributors and other scholars on the neural forecasting methods presented here. We want to highlight the work of [Boris Oreshkin](https://arxiv.org/abs/1905.10437), [Slawek Smyl](https://www.sciencedirect.com/science/article/pii/S0169207019301153), [Bryan Lim](https://www.sciencedirect.com/science/article/pii/S0169207021000637), and [David Salinas](https://arxiv.org/abs/1704.04110). We refer to [Benidis et al.](https://arxiv.org/abs/2004.10240) for a comprehensive survey of neural forecasting methods.\n\n## üôè How to cite\nIf you enjoy or benefit from using these Python implementations, a citation to the repository will be greatly appreciated.\n\n```bibtex\n@misc{olivares2022library_neuralforecast,\n    author={Kin G. Olivares and\n            Cristian Chall√∫ and\n            Federico Garza and\n            Max Mergenthaler Canseco and\n            Artur Dubrawski},\n    title = {{NeuralForecast}: User friendly state-of-the-art neural forecasting models.},\n    year={2022},\n    howpublished={{PyCon} Salt Lake City, Utah, US 2022},\n    url={https://github.com/Nixtla/neuralforecast}\n}\n```\n\n## Contributors ‚ú®\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AzulGarza\"><img src=\"https://avatars.githubusercontent.com/u/10517170?v=4?s=100\" width=\"100px;\" alt=\"azul\"/><br /><sub><b>azul</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/commits?author=AzulGarza\" title=\"Code\">üíª</a> <a href=\"#maintenance-AzulGarza\" title=\"Maintenance\">üöß</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cchallu\"><img src=\"https://avatars.githubusercontent.com/u/31133398?v=4?s=100\" width=\"100px;\" alt=\"Cristian Challu\"/><br /><sub><b>Cristian Challu</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/commits?author=cchallu\" title=\"Code\">üíª</a> <a href=\"#maintenance-cchallu\" title=\"Maintenance\">üöß</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jmoralez\"><img src=\"https://avatars.githubusercontent.com/u/8473587?v=4?s=100\" width=\"100px;\" alt=\"Jos√© Morales\"/><br /><sub><b>Jos√© Morales</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/commits?author=jmoralez\" title=\"Code\">üíª</a> <a href=\"#maintenance-jmoralez\" title=\"Maintenance\">üöß</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mergenthaler\"><img src=\"https://avatars.githubusercontent.com/u/4086186?v=4?s=100\" width=\"100px;\" alt=\"mergenthaler\"/><br /><sub><b>mergenthaler</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/commits?author=mergenthaler\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/Nixtla/neuralforecast/commits?author=mergenthaler\" title=\"Code\">üíª</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdgutier\"><img src=\"https://avatars.githubusercontent.com/u/19935241?v=4?s=100\" width=\"100px;\" alt=\"Kin\"/><br /><sub><b>Kin</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/commits?author=kdgutier\" title=\"Code\">üíª</a> <a href=\"https://github.com/Nixtla/neuralforecast/issues?q=author%3Akdgutier\" title=\"Bug reports\">üêõ</a> <a href=\"#data-kdgutier\" title=\"Data\">üî£</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gdevos010\"><img src=\"https://avatars.githubusercontent.com/u/15316026?v=4?s=100\" width=\"100px;\" alt=\"Greg DeVos\"/><br /><sub><b>Greg DeVos</b></sub></a><br /><a href=\"#ideas-gdevos010\" title=\"Ideas, Planning, & Feedback\">ü§î</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alejandroxag\"><img src=\"https://avatars.githubusercontent.com/u/64334543?v=4?s=100\" width=\"100px;\" alt=\"Alejandro\"/><br /><sub><b>Alejandro</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/commits?author=alejandroxag\" title=\"Code\">üíª</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lavattiata.com\"><img src=\"https://avatars.githubusercontent.com/u/48966177?v=4?s=100\" width=\"100px;\" alt=\"stefanialvs\"/><br /><sub><b>stefanialvs</b></sub></a><br /><a href=\"#design-stefanialvs\" title=\"Design\">üé®</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bandism.net/\"><img src=\"https://avatars.githubusercontent.com/u/22633385?v=4?s=100\" width=\"100px;\" alt=\"Ikko Ashimine\"/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/issues?q=author%3Aeltociear\" title=\"Bug reports\">üêõ</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vglaucus\"><img src=\"https://avatars.githubusercontent.com/u/75549033?v=4?s=100\" width=\"100px;\" alt=\"vglaucus\"/><br /><sub><b>vglaucus</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/issues?q=author%3Avglaucus\" title=\"Bug reports\">üêõ</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pitmonticone\"><img src=\"https://avatars.githubusercontent.com/u/38562595?v=4?s=100\" width=\"100px;\" alt=\"Pietro Monticone\"/><br /><sub><b>Pietro Monticone</b></sub></a><br /><a href=\"https://github.com/Nixtla/neuralforecast/issues?q=author%3Apitmonticone\" title=\"Bug reports\">üêõ</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
        },
        {
          "name": "action_files",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment-cpu.yml",
          "type": "blob",
          "size": 0.4150390625,
          "content": "name: neuralforecast\nchannels:\n  - pytorch\n  - conda-forge\ndependencies:\n  - coreforecast>=0.0.6\n  - cpuonly\n  - fsspec\n  - gitpython\n  - hyperopt\n  - jupyterlab\n  - matplotlib\n  - numba\n  - numpy>=1.21.6\n  - optuna\n  - pandas>=1.3.5\n  - pyarrow\n  - pytorch>=2.0.0\n  - pytorch-lightning>=2.0.0\n  - pip\n  - s3fs\n  - snappy<1.2.0\n  - pip:\n    - nbdev\n    - black\n    - polars\n    - ray[tune]>=2.2.0\n    - utilsforecast>=0.0.25\n"
        },
        {
          "name": "environment-cuda.yml",
          "type": "blob",
          "size": 0.421875,
          "content": "name: neuralforecast\nchannels:\n  - pytorch\n  - nvidia\n  - conda-forge\ndependencies:\n  - coreforecast>=0.0.6\n  - fsspec\n  - gitpython\n  - hyperopt\n  - jupyterlab\n  - matplotlib\n  - numba\n  - numpy>=1.21.6\n  - optuna\n  - pandas>=1.3.5\n  - pyarrow\n  - pytorch>=2.0.0\n  - pytorch-cuda>=11.8\n  - pytorch-lightning>=2.0.0\n  - pip\n  - s3fs\n  - pip:\n    - nbdev\n    - black\n    - polars\n    - \"ray[tune]>=2.2.0\"\n    - utilsforecast>=0.0.24\n"
        },
        {
          "name": "experiments",
          "type": "tree",
          "content": null
        },
        {
          "name": "nbs",
          "type": "tree",
          "content": null
        },
        {
          "name": "neuralforecast",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.552734375,
          "content": "[tool.ruff]\ntarget-version = \"py38\"\nline-length = 88\n# Enable Pyflakes `E` and `F` codes by default.\nlint.select = [\n#    \"E\",\n#    \"W\", # see: https://pypi.org/project/pycodestyle\n    \"F\", # see: https://pypi.org/project/pyflakes\n#    \"I\", #see: https://pypi.org/project/isort/\n#    \"D\", # see: https://pypi.org/project/pydocstyle\n#    \"N\", # see: https://pypi.org/project/pep8-naming\n#    \"S\", # see: https://pypi.org/project/flake8-bandit\n]\n\n\n[tool.mypy]\nignore_missing_imports = true\n[[tool.mypy.overrides]]\nmodule = 'neuralforecast.compat'\nignore_errors = true\n"
        },
        {
          "name": "settings.ini",
          "type": "blob",
          "size": 1.142578125,
          "content": "[DEFAULT]\nhost = github\nlib_name = neuralforecast\nuser = Nixtla\ndescription = Time series forecasting suite using deep learning models\nkeywords = time-series forecasting deep-learning\nauthor = Nixtla\nauthor_email = business@nixtla.io\ncopyright = Nixtla Inc.\nbranch = main\nversion = 2.0.0\nmin_python = 3.8\naudience = Developers\nlanguage = English\ncustom_sidebar = True\nlicense = apache2\nstatus = 2\nrequirements = coreforecast>=0.0.6 fsspec numpy>=1.21.6 pandas>=1.3.5 torch>=2.0.0 pytorch-lightning>=2.0.0 ray[tune]>=2.2.0 optuna utilsforecast>=0.2.3\nspark_requirements = fugue pyspark>=3.5\naws_requirements = fsspec[s3]\ndev_requirements = black gitpython hyperopt matplotlib mypy nbdev==2.3.25 polars pre-commit pyarrow ruff s3fs transformers\nnbs_path = nbs\ndoc_path = _docs\nrecursive = True\ndoc_host = https://nixtlaverse.nixtla.io\ndoc_baseurl = /neuralforecast/\ngit_url = https://github.com/Nixtla/neuralforecast/\nlib_path = neuralforecast\ntitle = neuralforecast\nblack_formatting = True\njupyter_hooks = True\nclean_ids = True\ntst_flags = polars\nreadme_nb = index.ipynb\nallowed_metadata_keys = \nallowed_cell_metadata_keys = \nclear_all = False\nput_version_in_init = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.6806640625,
          "content": "from pkg_resources import parse_version\nfrom configparser import ConfigParser\nimport setuptools\nassert parse_version(setuptools.__version__)>=parse_version('36.2')\n\n# note: all settings are in settings.ini; edit there, not here\nconfig = ConfigParser(delimiters=['='])\nconfig.read('settings.ini')\ncfg = config['DEFAULT']\n\ncfg_keys = 'version description keywords author author_email'.split()\nexpected = cfg_keys + \"lib_name user branch license status min_python audience language\".split()\nfor o in expected: assert o in cfg, \"missing expected setting: {}\".format(o)\nsetup_cfg = {o:cfg[o] for o in cfg_keys}\n\nlicenses = {\n    'apache2': ('Apache Software License 2.0','OSI Approved :: Apache Software License'),\n    'mit': ('MIT License', 'OSI Approved :: MIT License'),\n    'gpl2': ('GNU General Public License v2', 'OSI Approved :: GNU General Public License v2 (GPLv2)'),\n    'gpl3': ('GNU General Public License v3', 'OSI Approved :: GNU General Public License v3 (GPLv3)'),\n    'bsd3': ('BSD License', 'OSI Approved :: BSD License'),\n}\nstatuses = [ '1 - Planning', '2 - Pre-Alpha', '3 - Alpha',\n    '4 - Beta', '5 - Production/Stable', '6 - Mature', '7 - Inactive' ]\npy_versions = '3.8 3.9 3.10 3.11'.split()\n\nrequirements = cfg.get('requirements','').split()\naws_requirements = cfg['aws_requirements'].split()\nspark_requirements = cfg['spark_requirements'].split()\nif cfg.get('pip_requirements'): requirements += cfg.get('pip_requirements','').split()\nmin_python = cfg['min_python']\nlic = licenses.get(cfg['license'].lower(), (cfg['license'], None))\ndev_requirements = (cfg.get('dev_requirements') or '').split()\n\nsetuptools.setup(\n    name = 'neuralforecast',\n    license = lic[0],\n    classifiers = [\n        'Development Status :: ' + statuses[int(cfg['status'])],\n        'Intended Audience :: ' + cfg['audience'].title(),\n        'Natural Language :: ' + cfg['language'].title(),\n    ] + ['Programming Language :: Python :: '+o for o in py_versions[py_versions.index(min_python):]] + (['License :: ' + lic[1] ] if lic[1] else []),\n    url = cfg['git_url'],\n    packages = setuptools.find_packages(),\n    include_package_data = True,\n    install_requires = requirements,\n    extras_require={\n        'aws': aws_requirements,\n        'spark': spark_requirements,\n        'dev': dev_requirements,\n    },\n    dependency_links = cfg.get('dep_links','').split(),\n    python_requires  = '>=' + cfg['min_python'],\n    long_description = open('README.md', encoding='utf8').read(),\n    long_description_content_type = 'text/markdown',\n    zip_safe = False,\n    entry_points = {\n        'console_scripts': cfg.get('console_scripts','').split(),\n        'nbdev': [f'{cfg.get(\"lib_path\")}={cfg.get(\"lib_path\")}._modidx:d']\n    },\n    **setup_cfg)\n\n\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}