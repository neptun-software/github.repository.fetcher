{
  "metadata": {
    "timestamp": 1736559597513,
    "page": 231,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cubiq/ComfyUI_IPAdapter_plus",
      "stars": 4444,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "/__pycache__/\n/models/*.bin\n/models/*.safetensors\n.directory"
        },
        {
          "name": "CrossAttentionPatch.py",
          "type": "blob",
          "size": 9.0625,
          "content": "import torch\nimport math\nimport torch.nn.functional as F\nfrom comfy.ldm.modules.attention import optimized_attention\nfrom .utils import tensor_to_size\n\nclass Attn2Replace:\n    def __init__(self, callback=None, **kwargs):\n        self.callback = [callback]\n        self.kwargs = [kwargs]\n\n    def add(self, callback, **kwargs):\n        self.callback.append(callback)\n        self.kwargs.append(kwargs)\n\n        for key, value in kwargs.items():\n            setattr(self, key, value)\n\n    def __call__(self, q, k, v, extra_options):\n        dtype = q.dtype\n        out = optimized_attention(q, k, v, extra_options[\"n_heads\"])\n        sigma = extra_options[\"sigmas\"].detach().cpu()[0].item() if 'sigmas' in extra_options else 999999999.9\n\n        for i, callback in enumerate(self.callback):\n            if sigma <= self.kwargs[i][\"sigma_start\"] and sigma >= self.kwargs[i][\"sigma_end\"]:\n                out = out + callback(out, q, k, v, extra_options, **self.kwargs[i])\n\n        return out.to(dtype=dtype)\n\ndef ipadapter_attention(out, q, k, v, extra_options, module_key='', ipadapter=None, weight=1.0, cond=None, cond_alt=None, uncond=None, weight_type=\"linear\", mask=None, sigma_start=0.0, sigma_end=1.0, unfold_batch=False, embeds_scaling='V only', **kwargs):\n    dtype = q.dtype\n    cond_or_uncond = extra_options[\"cond_or_uncond\"]\n    block_type = extra_options[\"block\"][0]\n    #block_id = extra_options[\"block\"][1]\n    t_idx = extra_options[\"transformer_index\"]\n    layers = 11 if '101_to_k_ip' in ipadapter.ip_layers.to_kvs else 16\n    k_key = module_key + \"_to_k_ip\"\n    v_key = module_key + \"_to_v_ip\"\n\n    # extra options for AnimateDiff\n    ad_params = extra_options['ad_params'] if \"ad_params\" in extra_options else None\n\n    b = q.shape[0]\n    seq_len = q.shape[1]\n    batch_prompt = b // len(cond_or_uncond)\n    _, _, oh, ow = extra_options[\"original_shape\"]\n\n    if weight_type == 'ease in':\n        weight = weight * (0.05 + 0.95 * (1 - t_idx / layers))\n    elif weight_type == 'ease out':\n        weight = weight * (0.05 + 0.95 * (t_idx / layers))\n    elif weight_type == 'ease in-out':\n        weight = weight * (0.05 + 0.95 * (1 - abs(t_idx - (layers/2)) / (layers/2)))\n    elif weight_type == 'reverse in-out':\n        weight = weight * (0.05 + 0.95 * (abs(t_idx - (layers/2)) / (layers/2)))\n    elif weight_type == 'weak input' and block_type == 'input':\n        weight = weight * 0.2\n    elif weight_type == 'weak middle' and block_type == 'middle':\n        weight = weight * 0.2\n    elif weight_type == 'weak output' and block_type == 'output':\n        weight = weight * 0.2\n    elif weight_type == 'strong middle' and (block_type == 'input' or block_type == 'output'):\n        weight = weight * 0.2\n    elif isinstance(weight, dict):\n        if t_idx not in weight:\n            return 0\n\n        if weight_type == \"style transfer precise\":\n            if layers == 11 and t_idx == 3:\n                uncond = cond\n                cond = cond * 0\n            elif layers == 16 and (t_idx == 4 or t_idx == 5):\n                uncond = cond\n                cond = cond * 0\n        elif weight_type == \"composition precise\":\n            if layers == 11 and t_idx != 3:\n                uncond = cond\n                cond = cond * 0\n            elif layers == 16 and (t_idx != 4 and t_idx != 5):\n                uncond = cond\n                cond = cond * 0\n\n        weight = weight[t_idx]\n\n        if cond_alt is not None and t_idx in cond_alt:\n            cond = cond_alt[t_idx]\n            del cond_alt\n\n    if unfold_batch:\n        # Check AnimateDiff context window\n        if ad_params is not None and ad_params[\"sub_idxs\"] is not None:\n            if isinstance(weight, torch.Tensor):\n                weight = tensor_to_size(weight, ad_params[\"full_length\"])\n                weight = torch.Tensor(weight[ad_params[\"sub_idxs\"]])\n                if torch.all(weight == 0):\n                    return 0\n                weight = weight.repeat(len(cond_or_uncond), 1, 1) # repeat for cond and uncond\n            elif weight == 0:\n                return 0\n\n            # if image length matches or exceeds full_length get sub_idx images\n            if cond.shape[0] >= ad_params[\"full_length\"]:\n                cond = torch.Tensor(cond[ad_params[\"sub_idxs\"]])\n                uncond = torch.Tensor(uncond[ad_params[\"sub_idxs\"]])\n            # otherwise get sub_idxs images\n            else:\n                cond = tensor_to_size(cond, ad_params[\"full_length\"])\n                uncond = tensor_to_size(uncond, ad_params[\"full_length\"])\n                cond = cond[ad_params[\"sub_idxs\"]]\n                uncond = uncond[ad_params[\"sub_idxs\"]]\n        else:\n            if isinstance(weight, torch.Tensor):\n                weight = tensor_to_size(weight, batch_prompt)\n                if torch.all(weight == 0):\n                    return 0\n                weight = weight.repeat(len(cond_or_uncond), 1, 1) # repeat for cond and uncond\n            elif weight == 0:\n                return 0\n\n            cond = tensor_to_size(cond, batch_prompt)\n            uncond = tensor_to_size(uncond, batch_prompt)\n\n        k_cond = ipadapter.ip_layers.to_kvs[k_key](cond)\n        k_uncond = ipadapter.ip_layers.to_kvs[k_key](uncond)\n        v_cond = ipadapter.ip_layers.to_kvs[v_key](cond)\n        v_uncond = ipadapter.ip_layers.to_kvs[v_key](uncond)\n    else:\n        # TODO: should we always convert the weights to a tensor?\n        if isinstance(weight, torch.Tensor):\n            weight = tensor_to_size(weight, batch_prompt)\n            if torch.all(weight == 0):\n                return 0\n            weight = weight.repeat(len(cond_or_uncond), 1, 1) # repeat for cond and uncond\n        elif weight == 0:\n            return 0\n        \n        k_cond = ipadapter.ip_layers.to_kvs[k_key](cond).repeat(batch_prompt, 1, 1)\n        k_uncond = ipadapter.ip_layers.to_kvs[k_key](uncond).repeat(batch_prompt, 1, 1)\n        v_cond = ipadapter.ip_layers.to_kvs[v_key](cond).repeat(batch_prompt, 1, 1)\n        v_uncond = ipadapter.ip_layers.to_kvs[v_key](uncond).repeat(batch_prompt, 1, 1)\n\n    if len(cond_or_uncond) == 3: # TODO: cosxl, I need to check this\n        ip_k = torch.cat([(k_cond, k_uncond, k_cond)[i] for i in cond_or_uncond], dim=0)\n        ip_v = torch.cat([(v_cond, v_uncond, v_cond)[i] for i in cond_or_uncond], dim=0)\n    else:\n        ip_k = torch.cat([(k_cond, k_uncond)[i] for i in cond_or_uncond], dim=0)\n        ip_v = torch.cat([(v_cond, v_uncond)[i] for i in cond_or_uncond], dim=0)\n\n    if embeds_scaling == 'K+mean(V) w/ C penalty':\n        scaling = float(ip_k.shape[2]) / 1280.0\n        weight = weight * scaling\n        ip_k = ip_k * weight\n        ip_v_mean = torch.mean(ip_v, dim=1, keepdim=True)\n        ip_v = (ip_v - ip_v_mean) + ip_v_mean * weight\n        out_ip = optimized_attention(q, ip_k, ip_v, extra_options[\"n_heads\"])\n        del ip_v_mean\n    elif embeds_scaling == 'K+V w/ C penalty':\n        scaling = float(ip_k.shape[2]) / 1280.0\n        weight = weight * scaling\n        ip_k = ip_k * weight\n        ip_v = ip_v * weight\n        out_ip = optimized_attention(q, ip_k, ip_v, extra_options[\"n_heads\"])\n    elif embeds_scaling == 'K+V':\n        ip_k = ip_k * weight\n        ip_v = ip_v * weight\n        out_ip = optimized_attention(q, ip_k, ip_v, extra_options[\"n_heads\"])\n    else:\n        #ip_v = ip_v * weight\n        out_ip = optimized_attention(q, ip_k, ip_v, extra_options[\"n_heads\"])\n        out_ip = out_ip * weight # I'm doing this to get the same results as before\n\n    if mask is not None:\n        mask_h = oh / math.sqrt(oh * ow / seq_len)\n        mask_h = int(mask_h) + int((seq_len % int(mask_h)) != 0)\n        mask_w = seq_len // mask_h\n\n        # check if using AnimateDiff and sliding context window\n        if (mask.shape[0] > 1 and ad_params is not None and ad_params[\"sub_idxs\"] is not None):\n            # if mask length matches or exceeds full_length, get sub_idx masks\n            if mask.shape[0] >= ad_params[\"full_length\"]:\n                mask = torch.Tensor(mask[ad_params[\"sub_idxs\"]])\n                mask = F.interpolate(mask.unsqueeze(1), size=(mask_h, mask_w), mode=\"bilinear\").squeeze(1)\n            else:\n                mask = F.interpolate(mask.unsqueeze(1), size=(mask_h, mask_w), mode=\"bilinear\").squeeze(1)\n                mask = tensor_to_size(mask, ad_params[\"full_length\"])\n                mask = mask[ad_params[\"sub_idxs\"]]\n        else:\n            mask = F.interpolate(mask.unsqueeze(1), size=(mask_h, mask_w), mode=\"bilinear\").squeeze(1)\n            mask = tensor_to_size(mask, batch_prompt)\n\n        mask = mask.repeat(len(cond_or_uncond), 1, 1)\n        mask = mask.view(mask.shape[0], -1, 1).repeat(1, 1, out.shape[2])\n\n        # covers cases where extreme aspect ratios can cause the mask to have a wrong size\n        mask_len = mask_h * mask_w\n        if mask_len < seq_len:\n            pad_len = seq_len - mask_len\n            pad1 = pad_len // 2\n            pad2 = pad_len - pad1\n            mask = F.pad(mask, (0, 0, pad1, pad2), value=0.0)\n        elif mask_len > seq_len:\n            crop_start = (mask_len - seq_len) // 2\n            mask = mask[:, crop_start:crop_start+seq_len, :]\n\n        out_ip = out_ip * mask\n\n    #out = out + out_ip\n\n    return out_ip.to(dtype=dtype)\n"
        },
        {
          "name": "IPAdapterPlus.py",
          "type": "blob",
          "size": 87.2119140625,
          "content": "import torch\nimport os\nimport math\nimport folder_paths\n\nimport comfy.model_management as model_management\nfrom node_helpers import conditioning_set_values\nfrom comfy.clip_vision import load as load_clip_vision\nfrom comfy.sd import load_lora_for_models\nimport comfy.utils\n\nimport torch.nn as nn\nfrom PIL import Image\ntry:\n    import torchvision.transforms.v2 as T\nexcept ImportError:\n    import torchvision.transforms as T\n\nfrom .image_proj_models import MLPProjModel, MLPProjModelFaceId, ProjModelFaceIdPlus, Resampler, ImageProjModel\nfrom .CrossAttentionPatch import Attn2Replace, ipadapter_attention\nfrom .utils import (\n    encode_image_masked,\n    tensor_to_size,\n    contrast_adaptive_sharpening,\n    tensor_to_image,\n    image_to_tensor,\n    ipadapter_model_loader,\n    insightface_loader,\n    get_clipvision_file,\n    get_ipadapter_file,\n    get_lora_file,\n)\n\n# set the models directory\nif \"ipadapter\" not in folder_paths.folder_names_and_paths:\n    current_paths = [os.path.join(folder_paths.models_dir, \"ipadapter\")]\nelse:\n    current_paths, _ = folder_paths.folder_names_and_paths[\"ipadapter\"]\nfolder_paths.folder_names_and_paths[\"ipadapter\"] = (current_paths, folder_paths.supported_pt_extensions)\n\nWEIGHT_TYPES = [\"linear\", \"ease in\", \"ease out\", 'ease in-out', 'reverse in-out', 'weak input', 'weak output', 'weak middle', 'strong middle', 'style transfer', 'composition', 'strong style transfer', 'style and composition', 'style transfer precise', 'composition precise']\n\n\"\"\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Main IPAdapter Class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\"\"\"\nclass IPAdapter(nn.Module):\n    def __init__(self, ipadapter_model, cross_attention_dim=1024, output_cross_attention_dim=1024, clip_embeddings_dim=1024, clip_extra_context_tokens=4, is_sdxl=False, is_plus=False, is_full=False, is_faceid=False, is_portrait_unnorm=False, is_kwai_kolors=False, encoder_hid_proj=None, weight_kolors=1.0):\n        super().__init__()\n\n        self.clip_embeddings_dim = clip_embeddings_dim\n        self.cross_attention_dim = cross_attention_dim\n        self.output_cross_attention_dim = output_cross_attention_dim\n        self.clip_extra_context_tokens = clip_extra_context_tokens\n        self.is_sdxl = is_sdxl\n        self.is_full = is_full\n        self.is_plus = is_plus\n        self.is_portrait_unnorm = is_portrait_unnorm\n        self.is_kwai_kolors = is_kwai_kolors\n\n        if is_faceid and not is_portrait_unnorm:\n            self.image_proj_model = self.init_proj_faceid()\n        elif is_full:\n            self.image_proj_model = self.init_proj_full()\n        elif is_plus or is_portrait_unnorm:\n            self.image_proj_model = self.init_proj_plus()\n        else:\n            self.image_proj_model = self.init_proj()\n\n        self.image_proj_model.load_state_dict(ipadapter_model[\"image_proj\"])\n        self.ip_layers = To_KV(ipadapter_model[\"ip_adapter\"], encoder_hid_proj=encoder_hid_proj, weight_kolors=weight_kolors)\n\n    def init_proj(self):\n        image_proj_model = ImageProjModel(\n            cross_attention_dim=self.cross_attention_dim,\n            clip_embeddings_dim=self.clip_embeddings_dim,\n            clip_extra_context_tokens=self.clip_extra_context_tokens\n        )\n        return image_proj_model\n\n    def init_proj_plus(self):\n        image_proj_model = Resampler(\n            dim=self.cross_attention_dim,\n            depth=4,\n            dim_head=64,\n            heads=20 if self.is_sdxl and not self.is_kwai_kolors else 12,\n            num_queries=self.clip_extra_context_tokens,\n            embedding_dim=self.clip_embeddings_dim,\n            output_dim=self.output_cross_attention_dim,\n            ff_mult=4\n        )\n        return image_proj_model\n\n    def init_proj_full(self):\n        image_proj_model = MLPProjModel(\n            cross_attention_dim=self.cross_attention_dim,\n            clip_embeddings_dim=self.clip_embeddings_dim\n        )\n        return image_proj_model\n\n    def init_proj_faceid(self):\n        if self.is_plus:\n            image_proj_model = ProjModelFaceIdPlus(\n                cross_attention_dim=self.cross_attention_dim,\n                id_embeddings_dim=512,\n                clip_embeddings_dim=self.clip_embeddings_dim,\n                num_tokens=self.clip_extra_context_tokens,\n            )\n        else:\n            image_proj_model = MLPProjModelFaceId(\n                cross_attention_dim=self.cross_attention_dim,\n                id_embeddings_dim=512,\n                num_tokens=self.clip_extra_context_tokens,\n            )\n        return image_proj_model\n\n    @torch.inference_mode()\n    def get_image_embeds(self, clip_embed, clip_embed_zeroed, batch_size):\n        torch_device = model_management.get_torch_device()\n        intermediate_device = model_management.intermediate_device()\n\n        if batch_size == 0:\n            batch_size = clip_embed.shape[0]\n            intermediate_device = torch_device\n        elif batch_size > clip_embed.shape[0]:\n            batch_size = clip_embed.shape[0]\n\n        clip_embed = torch.split(clip_embed, batch_size, dim=0)\n        clip_embed_zeroed = torch.split(clip_embed_zeroed, batch_size, dim=0)\n        \n        image_prompt_embeds = []\n        uncond_image_prompt_embeds = []\n\n        for ce, cez in zip(clip_embed, clip_embed_zeroed):\n            image_prompt_embeds.append(self.image_proj_model(ce.to(torch_device)).to(intermediate_device))\n            uncond_image_prompt_embeds.append(self.image_proj_model(cez.to(torch_device)).to(intermediate_device))\n\n        del clip_embed, clip_embed_zeroed\n\n        image_prompt_embeds = torch.cat(image_prompt_embeds, dim=0)\n        uncond_image_prompt_embeds = torch.cat(uncond_image_prompt_embeds, dim=0)\n\n        torch.cuda.empty_cache()\n\n        #image_prompt_embeds = self.image_proj_model(clip_embed)\n        #uncond_image_prompt_embeds = self.image_proj_model(clip_embed_zeroed)\n        return image_prompt_embeds, uncond_image_prompt_embeds\n\n    @torch.inference_mode()\n    def get_image_embeds_faceid_plus(self, face_embed, clip_embed, s_scale, shortcut, batch_size):\n        torch_device = model_management.get_torch_device()\n        intermediate_device = model_management.intermediate_device()\n\n        if batch_size == 0:\n            batch_size = clip_embed.shape[0]\n            intermediate_device = torch_device\n        elif batch_size > clip_embed.shape[0]:\n            batch_size = clip_embed.shape[0]\n\n        face_embed_batch = torch.split(face_embed, batch_size, dim=0)\n        clip_embed_batch = torch.split(clip_embed, batch_size, dim=0)\n\n        embeds = []\n        for face_embed, clip_embed in zip(face_embed_batch, clip_embed_batch):\n            embeds.append(self.image_proj_model(face_embed.to(torch_device), clip_embed.to(torch_device), scale=s_scale, shortcut=shortcut).to(intermediate_device))\n\n        embeds = torch.cat(embeds, dim=0)\n        del face_embed_batch, clip_embed_batch\n        torch.cuda.empty_cache()\n        #embeds = self.image_proj_model(face_embed, clip_embed, scale=s_scale, shortcut=shortcut)\n        return embeds\n\nclass To_KV(nn.Module):\n    def __init__(self, state_dict, encoder_hid_proj=None, weight_kolors=1.0):\n        super().__init__()\n\n        if encoder_hid_proj is not None:\n            hid_proj = nn.Linear(encoder_hid_proj[\"weight\"].shape[1], encoder_hid_proj[\"weight\"].shape[0], bias=True)\n            hid_proj.weight.data = encoder_hid_proj[\"weight\"] * weight_kolors\n            hid_proj.bias.data = encoder_hid_proj[\"bias\"] * weight_kolors\n\n        self.to_kvs = nn.ModuleDict()\n        for key, value in state_dict.items():\n            if encoder_hid_proj is not None:\n                linear_proj = nn.Linear(value.shape[1], value.shape[0], bias=False)\n                linear_proj.weight.data = value\n                self.to_kvs[key.replace(\".weight\", \"\").replace(\".\", \"_\")] = nn.Sequential(hid_proj, linear_proj)\n            else:\n                self.to_kvs[key.replace(\".weight\", \"\").replace(\".\", \"_\")] = nn.Linear(value.shape[1], value.shape[0], bias=False)\n                self.to_kvs[key.replace(\".weight\", \"\").replace(\".\", \"_\")].weight.data = value\n\ndef set_model_patch_replace(model, patch_kwargs, key):\n    to = model.model_options[\"transformer_options\"].copy()\n    if \"patches_replace\" not in to:\n        to[\"patches_replace\"] = {}\n    else:\n        to[\"patches_replace\"] = to[\"patches_replace\"].copy()\n\n    if \"attn2\" not in to[\"patches_replace\"]:\n        to[\"patches_replace\"][\"attn2\"] = {}\n    else:\n        to[\"patches_replace\"][\"attn2\"] = to[\"patches_replace\"][\"attn2\"].copy()\n\n    if key not in to[\"patches_replace\"][\"attn2\"]:\n        to[\"patches_replace\"][\"attn2\"][key] = Attn2Replace(ipadapter_attention, **patch_kwargs)\n        model.model_options[\"transformer_options\"] = to\n    else:\n        to[\"patches_replace\"][\"attn2\"][key].add(ipadapter_attention, **patch_kwargs)\n\ndef ipadapter_execute(model,\n                      ipadapter,\n                      clipvision,\n                      insightface=None,\n                      image=None,\n                      image_composition=None,\n                      image_negative=None,\n                      weight=1.0,\n                      weight_composition=1.0,\n                      weight_faceidv2=None,\n                      weight_kolors=1.0,\n                      weight_type=\"linear\",\n                      combine_embeds=\"concat\",\n                      start_at=0.0,\n                      end_at=1.0,\n                      attn_mask=None,\n                      pos_embed=None,\n                      neg_embed=None,\n                      unfold_batch=False,\n                      embeds_scaling='V only',\n                      layer_weights=None,\n                      encode_batch_size=0,\n                      style_boost=None,\n                      composition_boost=None,\n                      enhance_tiles=1,\n                      enhance_ratio=1.0,):\n    device = model_management.get_torch_device()\n    dtype = model_management.unet_dtype()\n    if dtype not in [torch.float32, torch.float16, torch.bfloat16]:\n        dtype = torch.float16 if model_management.should_use_fp16() else torch.float32\n\n    is_full = \"proj.3.weight\" in ipadapter[\"image_proj\"]\n    is_portrait_unnorm = \"portraitunnorm\" in ipadapter\n    is_plus = (is_full or \"latents\" in ipadapter[\"image_proj\"] or \"perceiver_resampler.proj_in.weight\" in ipadapter[\"image_proj\"]) and not is_portrait_unnorm\n    output_cross_attention_dim = ipadapter[\"ip_adapter\"][\"1.to_k_ip.weight\"].shape[1]\n    is_sdxl = output_cross_attention_dim == 2048\n    is_kwai_kolors_faceid = \"perceiver_resampler.layers.0.0.to_out.weight\" in ipadapter[\"image_proj\"] and ipadapter[\"image_proj\"][\"perceiver_resampler.layers.0.0.to_out.weight\"].shape[0] == 4096\n    is_faceidv2 = \"faceidplusv2\" in ipadapter or is_kwai_kolors_faceid\n    is_kwai_kolors = (is_sdxl and \"layers.0.0.to_out.weight\" in ipadapter[\"image_proj\"] and ipadapter[\"image_proj\"][\"layers.0.0.to_out.weight\"].shape[0] == 2048) or is_kwai_kolors_faceid\n    is_portrait = \"proj.2.weight\" in ipadapter[\"image_proj\"] and not \"proj.3.weight\" in ipadapter[\"image_proj\"] and not \"0.to_q_lora.down.weight\" in ipadapter[\"ip_adapter\"] and not is_kwai_kolors_faceid\n    is_faceid = is_portrait or \"0.to_q_lora.down.weight\" in ipadapter[\"ip_adapter\"] or is_portrait_unnorm or is_kwai_kolors_faceid\n\n    if is_faceid and not insightface:\n        raise Exception(\"insightface model is required for FaceID models\")\n\n    if is_faceidv2:\n        weight_faceidv2 = weight_faceidv2 if weight_faceidv2 is not None else weight*2\n\n    if is_kwai_kolors_faceid:\n        cross_attention_dim = 4096\n    elif is_kwai_kolors:\n        cross_attention_dim = 2048\n    elif (is_plus and is_sdxl and not is_faceid) or is_portrait_unnorm:\n        cross_attention_dim = 1280\n    else:\n        cross_attention_dim = output_cross_attention_dim\n    \n    if is_kwai_kolors_faceid:\n        clip_extra_context_tokens = 6\n    elif (is_plus and not is_faceid) or is_portrait or is_portrait_unnorm:\n        clip_extra_context_tokens = 16\n    else:\n        clip_extra_context_tokens = 4\n\n    if image is not None and image.shape[1] != image.shape[2]:\n        print(\"\\033[33mINFO: the IPAdapter reference image is not a square, CLIPImageProcessor will resize and crop it at the center. If the main focus of the picture is not in the middle the result might not be what you are expecting.\\033[0m\")\n\n    if isinstance(weight, list):\n        weight = torch.tensor(weight).unsqueeze(-1).unsqueeze(-1).to(device, dtype=dtype) if unfold_batch else weight[0]\n\n    if style_boost is not None:\n        weight_type = \"style transfer precise\"\n    elif composition_boost is not None:\n        weight_type = \"composition precise\"\n\n    # special weight types\n    if layer_weights is not None and layer_weights != '':\n        weight = { int(k): float(v)*weight for k, v in [x.split(\":\") for x in layer_weights.split(\",\")] }\n        weight_type = weight_type if weight_type == \"style transfer precise\" or weight_type == \"composition precise\" else \"linear\"\n    elif weight_type == \"style transfer\":\n        weight = { 6:weight } if is_sdxl else { 0:weight, 1:weight, 2:weight, 3:weight, 9:weight, 10:weight, 11:weight, 12:weight, 13:weight, 14:weight, 15:weight }\n    elif weight_type == \"composition\":\n        weight = { 3:weight } if is_sdxl else { 4:weight*0.25, 5:weight }\n    elif weight_type == \"strong style transfer\":\n        if is_sdxl:\n            weight = { 0:weight, 1:weight, 2:weight, 4:weight, 5:weight, 6:weight, 7:weight, 8:weight, 9:weight, 10:weight }\n        else:\n            weight = { 0:weight, 1:weight, 2:weight, 3:weight, 6:weight, 7:weight, 8:weight, 9:weight, 10:weight, 11:weight, 12:weight, 13:weight, 14:weight, 15:weight }\n    elif weight_type == \"style and composition\":\n        if is_sdxl:\n            weight = { 3:weight_composition, 6:weight }\n        else:\n            weight = { 0:weight, 1:weight, 2:weight, 3:weight, 4:weight_composition*0.25, 5:weight_composition, 9:weight, 10:weight, 11:weight, 12:weight, 13:weight, 14:weight, 15:weight }\n    elif weight_type == \"strong style and composition\":\n        if is_sdxl:\n            weight = { 0:weight, 1:weight, 2:weight, 3:weight_composition, 4:weight, 5:weight, 6:weight, 7:weight, 8:weight, 9:weight, 10:weight }\n        else:\n            weight = { 0:weight, 1:weight, 2:weight, 3:weight, 4:weight_composition, 5:weight_composition, 6:weight, 7:weight, 8:weight, 9:weight, 10:weight, 11:weight, 12:weight, 13:weight, 14:weight, 15:weight }\n    elif weight_type == \"style transfer precise\":\n        weight_composition = style_boost if style_boost is not None else weight\n        if is_sdxl:\n            weight = { 3:weight_composition, 6:weight }\n        else:\n            weight = { 0:weight, 1:weight, 2:weight, 3:weight, 4:weight_composition*0.25, 5:weight_composition, 9:weight, 10:weight, 11:weight, 12:weight, 13:weight, 14:weight, 15:weight }\n    elif weight_type == \"composition precise\":\n        weight_composition = weight\n        weight = composition_boost if composition_boost is not None else weight\n        if is_sdxl:\n            weight = { 0:weight*.1, 1:weight*.1, 2:weight*.1, 3:weight_composition, 4:weight*.1, 5:weight*.1, 6:weight, 7:weight*.1, 8:weight*.1, 9:weight*.1, 10:weight*.1 }\n        else:\n            weight = { 0:weight, 1:weight, 2:weight, 3:weight, 4:weight_composition*0.25, 5:weight_composition, 6:weight*.1, 7:weight*.1, 8:weight*.1, 9:weight, 10:weight, 11:weight, 12:weight, 13:weight, 14:weight, 15:weight }\n\n    clipvision_size = 224 if not is_kwai_kolors else 336\n\n    img_comp_cond_embeds = None\n    face_cond_embeds = None\n    if is_faceid:\n        if insightface is None:\n            raise Exception(\"Insightface model is required for FaceID models\")\n\n        from insightface.utils import face_align\n\n        insightface.det_model.input_size = (640,640) # reset the detection size\n        image_iface = tensor_to_image(image)\n        face_cond_embeds = []\n        image = []\n\n        for i in range(image_iface.shape[0]):\n            for size in [(size, size) for size in range(640, 256, -64)]:\n                insightface.det_model.input_size = size # TODO: hacky but seems to be working\n                face = insightface.get(image_iface[i])\n                if face:\n                    if not is_portrait_unnorm:\n                        face_cond_embeds.append(torch.from_numpy(face[0].normed_embedding).unsqueeze(0))\n                    else:\n                        face_cond_embeds.append(torch.from_numpy(face[0].embedding).unsqueeze(0))\n                    image.append(image_to_tensor(face_align.norm_crop(image_iface[i], landmark=face[0].kps, image_size=336 if is_kwai_kolors_faceid else 256 if is_sdxl else 224)))\n\n                    if 640 not in size:\n                        print(f\"\\033[33mINFO: InsightFace detection resolution lowered to {size}.\\033[0m\")\n                    break\n            else:\n                raise Exception('InsightFace: No face detected.')\n        face_cond_embeds = torch.stack(face_cond_embeds).to(device, dtype=dtype)\n        image = torch.stack(image)\n        del image_iface, face\n\n    if image is not None:\n        img_cond_embeds = encode_image_masked(clipvision, image, batch_size=encode_batch_size, tiles=enhance_tiles, ratio=enhance_ratio, clipvision_size=clipvision_size)\n        if image_composition is not None:\n            img_comp_cond_embeds = encode_image_masked(clipvision, image_composition, batch_size=encode_batch_size, tiles=enhance_tiles, ratio=enhance_ratio, clipvision_size=clipvision_size)\n\n        if is_plus:\n            img_cond_embeds = img_cond_embeds.penultimate_hidden_states\n            image_negative = image_negative if image_negative is not None else torch.zeros([1, clipvision_size, clipvision_size, 3])\n            img_uncond_embeds = encode_image_masked(clipvision, image_negative, batch_size=encode_batch_size, clipvision_size=clipvision_size).penultimate_hidden_states\n            if image_composition is not None:\n                img_comp_cond_embeds = img_comp_cond_embeds.penultimate_hidden_states\n        else:\n            img_cond_embeds = img_cond_embeds.image_embeds if not is_faceid else face_cond_embeds\n            if image_negative is not None and not is_faceid:\n                img_uncond_embeds = encode_image_masked(clipvision, image_negative, batch_size=encode_batch_size, clipvision_size=clipvision_size).image_embeds\n            else:\n                img_uncond_embeds = torch.zeros_like(img_cond_embeds)\n            if image_composition is not None:\n                img_comp_cond_embeds = img_comp_cond_embeds.image_embeds\n        del image_negative, image_composition\n\n        image = None if not is_faceid else image # if it's face_id we need the cropped face for later\n    elif pos_embed is not None:\n        img_cond_embeds = pos_embed\n\n        if neg_embed is not None:\n            img_uncond_embeds = neg_embed\n        else:\n            if is_plus:\n                img_uncond_embeds = encode_image_masked(clipvision, torch.zeros([1, clipvision_size, clipvision_size, 3]), clipvision_size=clipvision_size).penultimate_hidden_states\n            else:\n                img_uncond_embeds = torch.zeros_like(img_cond_embeds)\n        del pos_embed, neg_embed\n    else:\n        raise Exception(\"Images or Embeds are required\")\n\n    # ensure that cond and uncond have the same batch size\n    img_uncond_embeds = tensor_to_size(img_uncond_embeds, img_cond_embeds.shape[0])\n\n    img_cond_embeds = img_cond_embeds.to(device, dtype=dtype)\n    img_uncond_embeds = img_uncond_embeds.to(device, dtype=dtype)\n    if img_comp_cond_embeds is not None:\n        img_comp_cond_embeds = img_comp_cond_embeds.to(device, dtype=dtype)\n\n    # combine the embeddings if needed\n    if combine_embeds != \"concat\" and img_cond_embeds.shape[0] > 1 and not unfold_batch:\n        if combine_embeds == \"add\":\n            img_cond_embeds = torch.sum(img_cond_embeds, dim=0).unsqueeze(0)\n            if face_cond_embeds is not None:\n                face_cond_embeds = torch.sum(face_cond_embeds, dim=0).unsqueeze(0)\n            if img_comp_cond_embeds is not None:\n                img_comp_cond_embeds = torch.sum(img_comp_cond_embeds, dim=0).unsqueeze(0)\n        elif combine_embeds == \"subtract\":\n            img_cond_embeds = img_cond_embeds[0] - torch.mean(img_cond_embeds[1:], dim=0)\n            img_cond_embeds = img_cond_embeds.unsqueeze(0)\n            if face_cond_embeds is not None:\n                face_cond_embeds = face_cond_embeds[0] - torch.mean(face_cond_embeds[1:], dim=0)\n                face_cond_embeds = face_cond_embeds.unsqueeze(0)\n            if img_comp_cond_embeds is not None:\n                img_comp_cond_embeds = img_comp_cond_embeds[0] - torch.mean(img_comp_cond_embeds[1:], dim=0)\n                img_comp_cond_embeds = img_comp_cond_embeds.unsqueeze(0)\n        elif combine_embeds == \"average\":\n            img_cond_embeds = torch.mean(img_cond_embeds, dim=0).unsqueeze(0)\n            if face_cond_embeds is not None:\n                face_cond_embeds = torch.mean(face_cond_embeds, dim=0).unsqueeze(0)\n            if img_comp_cond_embeds is not None:\n                img_comp_cond_embeds = torch.mean(img_comp_cond_embeds, dim=0).unsqueeze(0)\n        elif combine_embeds == \"norm average\":\n            img_cond_embeds = torch.mean(img_cond_embeds / torch.norm(img_cond_embeds, dim=0, keepdim=True), dim=0).unsqueeze(0)\n            if face_cond_embeds is not None:\n                face_cond_embeds = torch.mean(face_cond_embeds / torch.norm(face_cond_embeds, dim=0, keepdim=True), dim=0).unsqueeze(0)\n            if img_comp_cond_embeds is not None:\n                img_comp_cond_embeds = torch.mean(img_comp_cond_embeds / torch.norm(img_comp_cond_embeds, dim=0, keepdim=True), dim=0).unsqueeze(0)\n        img_uncond_embeds = img_uncond_embeds[0].unsqueeze(0) # TODO: better strategy for uncond could be to average them\n\n    if attn_mask is not None:\n        attn_mask = attn_mask.to(device, dtype=dtype)\n\n    encoder_hid_proj = None\n\n    if is_kwai_kolors_faceid and hasattr(model.model, \"diffusion_model\") and hasattr(model.model.diffusion_model, \"encoder_hid_proj\"):\n        encoder_hid_proj = model.model.diffusion_model.encoder_hid_proj.state_dict()\n\n    ipa = IPAdapter(\n        ipadapter,\n        cross_attention_dim=cross_attention_dim,\n        output_cross_attention_dim=output_cross_attention_dim,\n        clip_embeddings_dim=img_cond_embeds.shape[-1],\n        clip_extra_context_tokens=clip_extra_context_tokens,\n        is_sdxl=is_sdxl,\n        is_plus=is_plus,\n        is_full=is_full,\n        is_faceid=is_faceid,\n        is_portrait_unnorm=is_portrait_unnorm,\n        is_kwai_kolors=is_kwai_kolors,\n        encoder_hid_proj=encoder_hid_proj,\n        weight_kolors=weight_kolors\n    ).to(device, dtype=dtype)\n\n    if is_faceid and is_plus:\n        cond = ipa.get_image_embeds_faceid_plus(face_cond_embeds, img_cond_embeds, weight_faceidv2, is_faceidv2, encode_batch_size)\n        # TODO: check if noise helps with the uncond face embeds\n        uncond = ipa.get_image_embeds_faceid_plus(torch.zeros_like(face_cond_embeds), img_uncond_embeds, weight_faceidv2, is_faceidv2, encode_batch_size)\n    else:\n        cond, uncond = ipa.get_image_embeds(img_cond_embeds, img_uncond_embeds, encode_batch_size)\n        if img_comp_cond_embeds is not None:\n            cond_comp = ipa.get_image_embeds(img_comp_cond_embeds, img_uncond_embeds, encode_batch_size)[0]\n\n    cond = cond.to(device, dtype=dtype)\n    uncond = uncond.to(device, dtype=dtype)\n\n    cond_alt = None\n    if img_comp_cond_embeds is not None:\n        cond_alt = { 3: cond_comp.to(device, dtype=dtype) }\n\n    del img_cond_embeds, img_uncond_embeds, img_comp_cond_embeds, face_cond_embeds\n\n    sigma_start = model.get_model_object(\"model_sampling\").percent_to_sigma(start_at)\n    sigma_end = model.get_model_object(\"model_sampling\").percent_to_sigma(end_at)\n\n    patch_kwargs = {\n        \"ipadapter\": ipa,\n        \"weight\": weight,\n        \"cond\": cond,\n        \"cond_alt\": cond_alt,\n        \"uncond\": uncond,\n        \"weight_type\": weight_type,\n        \"mask\": attn_mask,\n        \"sigma_start\": sigma_start,\n        \"sigma_end\": sigma_end,\n        \"unfold_batch\": unfold_batch,\n        \"embeds_scaling\": embeds_scaling,\n    }\n\n    number = 0\n    if not is_sdxl:\n        for id in [1,2,4,5,7,8]: # id of input_blocks that have cross attention\n            patch_kwargs[\"module_key\"] = str(number*2+1)\n            set_model_patch_replace(model, patch_kwargs, (\"input\", id))\n            number += 1\n        for id in [3,4,5,6,7,8,9,10,11]: # id of output_blocks that have cross attention\n            patch_kwargs[\"module_key\"] = str(number*2+1)\n            set_model_patch_replace(model, patch_kwargs, (\"output\", id))\n            number += 1\n        patch_kwargs[\"module_key\"] = str(number*2+1)\n        set_model_patch_replace(model, patch_kwargs, (\"middle\", 1))\n    else:\n        for id in [4,5,7,8]: # id of input_blocks that have cross attention\n            block_indices = range(2) if id in [4, 5] else range(10) # transformer_depth\n            for index in block_indices:\n                patch_kwargs[\"module_key\"] = str(number*2+1)\n                set_model_patch_replace(model, patch_kwargs, (\"input\", id, index))\n                number += 1\n        for id in range(6): # id of output_blocks that have cross attention\n            block_indices = range(2) if id in [3, 4, 5] else range(10) # transformer_depth\n            for index in block_indices:\n                patch_kwargs[\"module_key\"] = str(number*2+1)\n                set_model_patch_replace(model, patch_kwargs, (\"output\", id, index))\n                number += 1\n        for index in range(10):\n            patch_kwargs[\"module_key\"] = str(number*2+1)\n            set_model_patch_replace(model, patch_kwargs, (\"middle\", 1, index))\n            number += 1\n\n    return (model, image)\n\n\"\"\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Loaders\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\"\"\"\nclass IPAdapterUnifiedLoader:\n    def __init__(self):\n        self.lora = None\n        self.clipvision = { \"file\": None, \"model\": None }\n        self.ipadapter = { \"file\": None, \"model\": None }\n        self.insightface = { \"provider\": None, \"model\": None }\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"model\": (\"MODEL\", ),\n            \"preset\": (['LIGHT - SD1.5 only (low strength)', 'STANDARD (medium strength)', 'VIT-G (medium strength)', 'PLUS (high strength)', 'PLUS FACE (portraits)', 'FULL FACE - SD1.5 only (portraits stronger)'], ),\n        },\n        \"optional\": {\n            \"ipadapter\": (\"IPADAPTER\", ),\n        }}\n\n    RETURN_TYPES = (\"MODEL\", \"IPADAPTER\", )\n    RETURN_NAMES = (\"model\", \"ipadapter\", )\n    FUNCTION = \"load_models\"\n    CATEGORY = \"ipadapter\"\n\n    def load_models(self, model, preset, lora_strength=0.0, provider=\"CPU\", ipadapter=None):\n        pipeline = { \"clipvision\": { 'file': None, 'model': None }, \"ipadapter\": { 'file': None, 'model': None }, \"insightface\": { 'provider': None, 'model': None } }\n        if ipadapter is not None:\n            pipeline = ipadapter\n\n        # 1. Load the clipvision model\n        clipvision_file = get_clipvision_file(preset)\n        if clipvision_file is None:\n            raise Exception(\"ClipVision model not found.\")\n\n        if clipvision_file != self.clipvision['file']:\n            if clipvision_file != pipeline['clipvision']['file']:\n                self.clipvision['file'] = clipvision_file\n                self.clipvision['model'] = load_clip_vision(clipvision_file)\n                print(f\"\\033[33mINFO: Clip Vision model loaded from {clipvision_file}\\033[0m\")\n            else:\n                self.clipvision = pipeline['clipvision']\n\n        # 2. Load the ipadapter model\n        is_sdxl = isinstance(model.model, (comfy.model_base.SDXL, comfy.model_base.SDXLRefiner, comfy.model_base.SDXL_instructpix2pix))\n        ipadapter_file, is_insightface, lora_pattern = get_ipadapter_file(preset, is_sdxl)\n        if ipadapter_file is None:\n            raise Exception(\"IPAdapter model not found.\")\n\n        if ipadapter_file != self.ipadapter['file']:\n            if pipeline['ipadapter']['file'] != ipadapter_file:\n                self.ipadapter['file'] = ipadapter_file\n                self.ipadapter['model'] = ipadapter_model_loader(ipadapter_file)\n                print(f\"\\033[33mINFO: IPAdapter model loaded from {ipadapter_file}\\033[0m\")\n            else:\n                self.ipadapter = pipeline['ipadapter']\n\n        # 3. Load the lora model if needed\n        if lora_pattern is not None:\n            lora_file = get_lora_file(lora_pattern)\n            lora_model = None\n            if lora_file is None:\n                raise Exception(\"LoRA model not found.\")\n\n            if self.lora is not None:\n                if lora_file == self.lora['file']:\n                    lora_model = self.lora['model']\n                else:\n                    self.lora = None\n                    torch.cuda.empty_cache()\n\n            if lora_model is None:\n                lora_model = comfy.utils.load_torch_file(lora_file, safe_load=True)\n                self.lora = { 'file': lora_file, 'model': lora_model }\n                print(f\"\\033[33mINFO: LoRA model loaded from {lora_file}\\033[0m\")\n\n            if lora_strength > 0:\n                model, _ = load_lora_for_models(model, None, lora_model, lora_strength, 0)\n\n        # 4. Load the insightface model if needed\n        if is_insightface:\n            if provider != self.insightface['provider']:\n                if pipeline['insightface']['provider'] != provider:\n                    self.insightface['provider'] = provider\n                    self.insightface['model'] = insightface_loader(provider)\n                    print(f\"\\033[33mINFO: InsightFace model loaded with {provider} provider\\033[0m\")\n                else:\n                    self.insightface = pipeline['insightface']\n\n        return (model, { 'clipvision': self.clipvision, 'ipadapter': self.ipadapter, 'insightface': self.insightface }, )\n\nclass IPAdapterUnifiedLoaderFaceID(IPAdapterUnifiedLoader):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"model\": (\"MODEL\", ),\n            \"preset\": (['FACEID', 'FACEID PLUS - SD1.5 only', 'FACEID PLUS V2', 'FACEID PORTRAIT (style transfer)', 'FACEID PORTRAIT UNNORM - SDXL only (strong)'], ),\n            \"lora_strength\": (\"FLOAT\", { \"default\": 0.6, \"min\": 0, \"max\": 1, \"step\": 0.01 }),\n            \"provider\": ([\"CPU\", \"CUDA\", \"ROCM\", \"DirectML\", \"OpenVINO\", \"CoreML\"], ),\n        },\n        \"optional\": {\n            \"ipadapter\": (\"IPADAPTER\", ),\n        }}\n\n    RETURN_NAMES = (\"MODEL\", \"ipadapter\", )\n    CATEGORY = \"ipadapter/faceid\"\n\nclass IPAdapterUnifiedLoaderCommunity(IPAdapterUnifiedLoader):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"model\": (\"MODEL\", ),\n            \"preset\": (['Composition', 'Kolors'], ),\n        },\n        \"optional\": {\n            \"ipadapter\": (\"IPADAPTER\", ),\n        }}\n\n    CATEGORY = \"ipadapter/loaders\"\n\nclass IPAdapterModelLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": { \"ipadapter_file\": (folder_paths.get_filename_list(\"ipadapter\"), )}}\n\n    RETURN_TYPES = (\"IPADAPTER\",)\n    FUNCTION = \"load_ipadapter_model\"\n    CATEGORY = \"ipadapter/loaders\"\n\n    def load_ipadapter_model(self, ipadapter_file):\n        ipadapter_file = folder_paths.get_full_path(\"ipadapter\", ipadapter_file)\n        return (ipadapter_model_loader(ipadapter_file),)\n\nclass IPAdapterInsightFaceLoader:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"provider\": ([\"CPU\", \"CUDA\", \"ROCM\"], ),\n                \"model_name\": (['buffalo_l', 'antelopev2'], )\n            },\n        }\n\n    RETURN_TYPES = (\"INSIGHTFACE\",)\n    FUNCTION = \"load_insightface\"\n    CATEGORY = \"ipadapter/loaders\"\n\n    def load_insightface(self, provider, model_name):\n        return (insightface_loader(provider, model_name=model_name),)\n\n\"\"\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Main Apply Nodes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\"\"\"\nclass IPAdapterSimple:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 3, \"step\": 0.05 }),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"weight_type\": (['standard', 'prompt is more important', 'style transfer'], ),\n            },\n            \"optional\": {\n                \"attn_mask\": (\"MASK\",),\n            }\n        }\n\n    RETURN_TYPES = (\"MODEL\",)\n    FUNCTION = \"apply_ipadapter\"\n    CATEGORY = \"ipadapter\"\n\n    def apply_ipadapter(self, model, ipadapter, image, weight, start_at, end_at, weight_type, attn_mask=None):\n        if weight_type.startswith(\"style\"):\n            weight_type = \"style transfer\"\n        elif weight_type == \"prompt is more important\":\n            weight_type = \"ease out\"\n        else:\n            weight_type = \"linear\"\n\n        ipa_args = {\n            \"image\": image,\n            \"weight\": weight,\n            \"start_at\": start_at,\n            \"end_at\": end_at,\n            \"attn_mask\": attn_mask,\n            \"weight_type\": weight_type,\n            \"insightface\": ipadapter['insightface']['model'] if 'insightface' in ipadapter else None,\n        }\n\n        if 'ipadapter' not in ipadapter:\n            raise Exception(\"IPAdapter model not present in the pipeline. Please load the models with the IPAdapterUnifiedLoader node.\")\n        if 'clipvision' not in ipadapter:\n            raise Exception(\"CLIPVision model not present in the pipeline. Please load the models with the IPAdapterUnifiedLoader node.\")\n\n        return ipadapter_execute(model.clone(), ipadapter['ipadapter']['model'], ipadapter['clipvision']['model'], **ipa_args)\n\nclass IPAdapterAdvanced:\n    def __init__(self):\n        self.unfold_batch = False\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    RETURN_TYPES = (\"MODEL\",)\n    FUNCTION = \"apply_ipadapter\"\n    CATEGORY = \"ipadapter\"\n\n    def apply_ipadapter(self, model, ipadapter, start_at=0.0, end_at=1.0, weight=1.0, weight_style=1.0, weight_composition=1.0, expand_style=False, weight_type=\"linear\", combine_embeds=\"concat\", weight_faceidv2=None, image=None, image_style=None, image_composition=None, image_negative=None, clip_vision=None, attn_mask=None, insightface=None, embeds_scaling='V only', layer_weights=None, ipadapter_params=None, encode_batch_size=0, style_boost=None, composition_boost=None, enhance_tiles=1, enhance_ratio=1.0, weight_kolors=1.0):\n        is_sdxl = isinstance(model.model, (comfy.model_base.SDXL, comfy.model_base.SDXLRefiner, comfy.model_base.SDXL_instructpix2pix))\n\n        if 'ipadapter' in ipadapter:\n            ipadapter_model = ipadapter['ipadapter']['model']\n            clip_vision = clip_vision if clip_vision is not None else ipadapter['clipvision']['model']\n        else:\n            ipadapter_model = ipadapter\n\n        if clip_vision is None:\n            raise Exception(\"Missing CLIPVision model.\")\n\n        if image_style is not None: # we are doing style + composition transfer\n            if not is_sdxl:\n                raise Exception(\"Style + Composition transfer is only available for SDXL models at the moment.\") # TODO: check feasibility for SD1.5 models\n\n            image = image_style\n            weight = weight_style\n            if image_composition is None:\n                image_composition = image_style\n\n            weight_type = \"strong style and composition\" if expand_style else \"style and composition\"\n        if ipadapter_params is not None: # we are doing batch processing\n            image = ipadapter_params['image']\n            attn_mask = ipadapter_params['attn_mask']\n            weight = ipadapter_params['weight']\n            weight_type = ipadapter_params['weight_type']\n            start_at = ipadapter_params['start_at']\n            end_at = ipadapter_params['end_at']\n        else:\n            # at this point weight can be a list from the batch-weight or a single float\n            weight = [weight]\n\n        image = image if isinstance(image, list) else [image]\n\n        work_model = model.clone()\n\n        for i in range(len(image)):\n            if image[i] is None:\n                continue\n\n            ipa_args = {\n                \"image\": image[i],\n                \"image_composition\": image_composition,\n                \"image_negative\": image_negative,\n                \"weight\": weight[i],\n                \"weight_composition\": weight_composition,\n                \"weight_faceidv2\": weight_faceidv2,\n                \"weight_type\": weight_type if not isinstance(weight_type, list) else weight_type[i],\n                \"combine_embeds\": combine_embeds,\n                \"start_at\": start_at if not isinstance(start_at, list) else start_at[i],\n                \"end_at\": end_at if not isinstance(end_at, list) else end_at[i],\n                \"attn_mask\": attn_mask if not isinstance(attn_mask, list) else attn_mask[i],\n                \"unfold_batch\": self.unfold_batch,\n                \"embeds_scaling\": embeds_scaling,\n                \"insightface\": insightface if insightface is not None else ipadapter['insightface']['model'] if 'insightface' in ipadapter else None,\n                \"layer_weights\": layer_weights,\n                \"encode_batch_size\": encode_batch_size,\n                \"style_boost\": style_boost,\n                \"composition_boost\": composition_boost,\n                \"enhance_tiles\": enhance_tiles,\n                \"enhance_ratio\": enhance_ratio,\n                \"weight_kolors\": weight_kolors,\n            }\n\n            work_model, face_image = ipadapter_execute(work_model, ipadapter_model, clip_vision, **ipa_args)\n\n        del ipadapter\n        return (work_model, face_image, )\n\nclass IPAdapterBatch(IPAdapterAdvanced):\n    def __init__(self):\n        self.unfold_batch = True\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n                \"encode_batch_size\": (\"INT\", { \"default\": 0, \"min\": 0, \"max\": 4096 }),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\nclass IPAdapterStyleComposition(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image_style\": (\"IMAGE\",),\n                \"image_composition\": (\"IMAGE\",),\n                \"weight_style\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_composition\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"expand_style\": (\"BOOLEAN\", { \"default\": False }),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"], {\"default\": \"average\"}),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    CATEGORY = \"ipadapter/style_composition\"\n\nclass IPAdapterStyleCompositionBatch(IPAdapterStyleComposition):\n    def __init__(self):\n        self.unfold_batch = True\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image_style\": (\"IMAGE\",),\n                \"image_composition\": (\"IMAGE\",),\n                \"weight_style\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_composition\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"expand_style\": (\"BOOLEAN\", { \"default\": False }),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\nclass IPAdapterFaceID(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 3, \"step\": 0.05 }),\n                \"weight_faceidv2\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5.0, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n                \"insightface\": (\"INSIGHTFACE\",),\n            }\n        }\n\n    CATEGORY = \"ipadapter/faceid\"\n    RETURN_TYPES = (\"MODEL\",\"IMAGE\",)\n    RETURN_NAMES = (\"MODEL\", \"face_image\", )\n\nclass IPAAdapterFaceIDBatch(IPAdapterFaceID):\n    def __init__(self):\n        self.unfold_batch = True\n\nclass IPAdapterFaceIDKolors(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 3, \"step\": 0.05 }),\n                \"weight_faceidv2\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5.0, \"step\": 0.05 }),\n                \"weight_kolors\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5.0, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n                \"insightface\": (\"INSIGHTFACE\",),\n            }\n        }\n\n    CATEGORY = \"ipadapter/faceid\"\n    RETURN_TYPES = (\"MODEL\",\"IMAGE\",)\n    RETURN_NAMES = (\"MODEL\", \"face_image\", )\n\nclass IPAdapterTiled:\n    def __init__(self):\n        self.unfold_batch = False\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 3, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"sharpening\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.05 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    RETURN_TYPES = (\"MODEL\", \"IMAGE\", \"MASK\", )\n    RETURN_NAMES = (\"MODEL\", \"tiles\", \"masks\", )\n    FUNCTION = \"apply_tiled\"\n    CATEGORY = \"ipadapter/tiled\"\n\n    def apply_tiled(self, model, ipadapter, image, weight, weight_type, start_at, end_at, sharpening, combine_embeds=\"concat\", image_negative=None, attn_mask=None, clip_vision=None, embeds_scaling='V only', encode_batch_size=0):\n        # 1. Select the models\n        if 'ipadapter' in ipadapter:\n            ipadapter_model = ipadapter['ipadapter']['model']\n            clip_vision = clip_vision if clip_vision is not None else ipadapter['clipvision']['model']\n        else:\n            ipadapter_model = ipadapter\n            clip_vision = clip_vision\n\n        if clip_vision is None:\n            raise Exception(\"Missing CLIPVision model.\")\n\n        del ipadapter\n\n        # 2. Extract the tiles\n        tile_size = 256     # I'm using 256 instead of 224 as it is more likely divisible by the latent size, it will be downscaled to 224 by the clip vision encoder\n        _, oh, ow, _ = image.shape\n        if attn_mask is None:\n            attn_mask = torch.ones([1, oh, ow], dtype=image.dtype, device=image.device)\n\n        image = image.permute([0,3,1,2])\n        attn_mask = attn_mask.unsqueeze(1)\n        # the mask should have the same proportions as the reference image and the latent\n        attn_mask = T.Resize((oh, ow), interpolation=T.InterpolationMode.BICUBIC, antialias=True)(attn_mask)\n\n        # if the image is almost a square, we crop it to a square\n        if oh / ow > 0.75 and oh / ow < 1.33:\n            # crop the image to a square\n            image = T.CenterCrop(min(oh, ow))(image)\n            resize = (tile_size*2, tile_size*2)\n\n            attn_mask = T.CenterCrop(min(oh, ow))(attn_mask)\n        # otherwise resize the smallest side and the other proportionally\n        else:\n            resize = (int(tile_size * ow / oh), tile_size) if oh < ow else (tile_size, int(tile_size * oh / ow))\n\n         # using PIL for better results\n        imgs = []\n        for img in image:\n            img = T.ToPILImage()(img)\n            img = img.resize(resize, resample=Image.Resampling['LANCZOS'])\n            imgs.append(T.ToTensor()(img))\n        image = torch.stack(imgs)\n        del imgs, img\n\n        # we don't need a high quality resize for the mask\n        attn_mask = T.Resize(resize[::-1], interpolation=T.InterpolationMode.BICUBIC, antialias=True)(attn_mask)\n\n        # we allow a maximum of 4 tiles\n        if oh / ow > 4 or oh / ow < 0.25:\n            crop = (tile_size, tile_size*4) if oh < ow else (tile_size*4, tile_size)\n            image = T.CenterCrop(crop)(image)\n            attn_mask = T.CenterCrop(crop)(attn_mask)\n\n        attn_mask = attn_mask.squeeze(1)\n\n        if sharpening > 0:\n            image = contrast_adaptive_sharpening(image, sharpening)\n\n        image = image.permute([0,2,3,1])\n\n        _, oh, ow, _ = image.shape\n\n        # find the number of tiles for each side\n        tiles_x = math.ceil(ow / tile_size)\n        tiles_y = math.ceil(oh / tile_size)\n        overlap_x = max(0, (tiles_x * tile_size - ow) / (tiles_x - 1 if tiles_x > 1 else 1))\n        overlap_y = max(0, (tiles_y * tile_size - oh) / (tiles_y - 1 if tiles_y > 1 else 1))\n\n        base_mask = torch.zeros([attn_mask.shape[0], oh, ow], dtype=image.dtype, device=image.device)\n\n        # extract all the tiles from the image and create the masks\n        tiles = []\n        masks = []\n        for y in range(tiles_y):\n            for x in range(tiles_x):\n                start_x = int(x * (tile_size - overlap_x))\n                start_y = int(y * (tile_size - overlap_y))\n                tiles.append(image[:, start_y:start_y+tile_size, start_x:start_x+tile_size, :])\n                mask = base_mask.clone()\n                mask[:, start_y:start_y+tile_size, start_x:start_x+tile_size] = attn_mask[:, start_y:start_y+tile_size, start_x:start_x+tile_size]\n                masks.append(mask)\n        del mask\n\n        # 3. Apply the ipadapter to each group of tiles\n        model = model.clone()\n        for i in range(len(tiles)):\n            ipa_args = {\n                \"image\": tiles[i],\n                \"image_negative\": image_negative,\n                \"weight\": weight,\n                \"weight_type\": weight_type,\n                \"combine_embeds\": combine_embeds,\n                \"start_at\": start_at,\n                \"end_at\": end_at,\n                \"attn_mask\": masks[i],\n                \"unfold_batch\": self.unfold_batch,\n                \"embeds_scaling\": embeds_scaling,\n                \"encode_batch_size\": encode_batch_size,\n            }\n            # apply the ipadapter to the model without cloning it\n            model, _ = ipadapter_execute(model, ipadapter_model, clip_vision, **ipa_args)\n\n        return (model, torch.cat(tiles), torch.cat(masks), )\n\nclass IPAdapterTiledBatch(IPAdapterTiled):\n    def __init__(self):\n        self.unfold_batch = True\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 3, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"sharpening\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.05 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n                \"encode_batch_size\": (\"INT\", { \"default\": 0, \"min\": 0, \"max\": 4096 }),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\nclass IPAdapterEmbeds:\n    def __init__(self):\n        self.unfold_batch = False\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"pos_embed\": (\"EMBEDS\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 3, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"neg_embed\": (\"EMBEDS\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    RETURN_TYPES = (\"MODEL\",)\n    FUNCTION = \"apply_ipadapter\"\n    CATEGORY = \"ipadapter/embeds\"\n\n    def apply_ipadapter(self, model, ipadapter, pos_embed, weight, weight_type, start_at, end_at, neg_embed=None, attn_mask=None, clip_vision=None, embeds_scaling='V only'):\n        ipa_args = {\n            \"pos_embed\": pos_embed,\n            \"neg_embed\": neg_embed,\n            \"weight\": weight,\n            \"weight_type\": weight_type,\n            \"start_at\": start_at,\n            \"end_at\": end_at,\n            \"attn_mask\": attn_mask,\n            \"embeds_scaling\": embeds_scaling,\n            \"unfold_batch\": self.unfold_batch,\n        }\n\n        if 'ipadapter' in ipadapter:\n            ipadapter_model = ipadapter['ipadapter']['model']\n            clip_vision = clip_vision if clip_vision is not None else ipadapter['clipvision']['model']\n        else:\n            ipadapter_model = ipadapter\n            clip_vision = clip_vision\n\n        if clip_vision is None and neg_embed is None:\n            raise Exception(\"Missing CLIPVision model.\")\n\n        del ipadapter\n\n        return ipadapter_execute(model.clone(), ipadapter_model, clip_vision, **ipa_args)\n\nclass IPAdapterEmbedsBatch(IPAdapterEmbeds):\n    def __init__(self):\n        self.unfold_batch = True\n\nclass IPAdapterMS(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_faceidv2\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5.0, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n                \"layer_weights\": (\"STRING\", { \"default\": \"\", \"multiline\": True }),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n                \"insightface\": (\"INSIGHTFACE\",),\n            }\n        }\n\n    CATEGORY = \"ipadapter/dev\"\n\nclass IPAdapterClipVisionEnhancer(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n                \"enhance_tiles\": (\"INT\", { \"default\": 2, \"min\": 1, \"max\": 16 }),\n                \"enhance_ratio\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.05 }),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    CATEGORY = \"ipadapter/dev\"\n\nclass IPAdapterClipVisionEnhancerBatch(IPAdapterClipVisionEnhancer):\n    def __init__(self):\n        self.unfold_batch = True\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"weight_type\": (WEIGHT_TYPES, ),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n                \"enhance_tiles\": (\"INT\", { \"default\": 2, \"min\": 1, \"max\": 16 }),\n                \"enhance_ratio\": (\"FLOAT\", { \"default\": 0.5, \"min\": 0.0, \"max\": 1.0, \"step\": 0.05 }),\n                \"encode_batch_size\": (\"INT\", { \"default\": 0, \"min\": 0, \"max\": 4096 }),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\nclass IPAdapterFromParams(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"ipadapter_params\": (\"IPADAPTER_PARAMS\", ),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    CATEGORY = \"ipadapter/params\"\n\nclass IPAdapterPreciseStyleTransfer(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"style_boost\": (\"FLOAT\", { \"default\": 1.0, \"min\": -5, \"max\": 5, \"step\": 0.05 }),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\nclass IPAdapterPreciseStyleTransferBatch(IPAdapterPreciseStyleTransfer):\n    def __init__(self):\n        self.unfold_batch = True\n\nclass IPAdapterPreciseComposition(IPAdapterAdvanced):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"model\": (\"MODEL\", ),\n                \"ipadapter\": (\"IPADAPTER\", ),\n                \"image\": (\"IMAGE\",),\n                \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1, \"max\": 5, \"step\": 0.05 }),\n                \"composition_boost\": (\"FLOAT\", { \"default\": 0.0, \"min\": -5, \"max\": 5, \"step\": 0.05 }),\n                \"combine_embeds\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\"],),\n                \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n                \"embeds_scaling\": (['V only', 'K+V', 'K+V w/ C penalty', 'K+mean(V) w/ C penalty'], ),\n            },\n            \"optional\": {\n                \"image_negative\": (\"IMAGE\",),\n                \"attn_mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\nclass IPAdapterPreciseCompositionBatch(IPAdapterPreciseComposition):\n    def __init__(self):\n        self.unfold_batch = True\n\n\"\"\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Helpers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\"\"\"\nclass IPAdapterEncoder:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"ipadapter\": (\"IPADAPTER\",),\n            \"image\": (\"IMAGE\",),\n            \"weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1.0, \"max\": 3.0, \"step\": 0.01 }),\n            },\n            \"optional\": {\n                \"mask\": (\"MASK\",),\n                \"clip_vision\": (\"CLIP_VISION\",),\n            }\n        }\n\n    RETURN_TYPES = (\"EMBEDS\", \"EMBEDS\",)\n    RETURN_NAMES = (\"pos_embed\", \"neg_embed\",)\n    FUNCTION = \"encode\"\n    CATEGORY = \"ipadapter/embeds\"\n\n    def encode(self, ipadapter, image, weight, mask=None, clip_vision=None):\n        if 'ipadapter' in ipadapter:\n            ipadapter_model = ipadapter['ipadapter']['model']\n            clip_vision = clip_vision if clip_vision is not None else ipadapter['clipvision']['model']\n        else:\n            ipadapter_model = ipadapter\n            clip_vision = clip_vision\n\n        if clip_vision is None:\n            raise Exception(\"Missing CLIPVision model.\")\n\n        is_plus = \"proj.3.weight\" in ipadapter_model[\"image_proj\"] or \"latents\" in ipadapter_model[\"image_proj\"] or \"perceiver_resampler.proj_in.weight\" in ipadapter_model[\"image_proj\"]\n        is_kwai_kolors = is_plus and \"layers.0.0.to_out.weight\" in ipadapter_model[\"image_proj\"] and ipadapter_model[\"image_proj\"][\"layers.0.0.to_out.weight\"].shape[0] == 2048\n\n        clipvision_size = 224 if not is_kwai_kolors else 336\n\n        # resize and crop the mask to 224x224\n        if mask is not None and mask.shape[1:3] != torch.Size([clipvision_size, clipvision_size]):\n            mask = mask.unsqueeze(1)\n            transforms = T.Compose([\n                T.CenterCrop(min(mask.shape[2], mask.shape[3])),\n                T.Resize((clipvision_size, clipvision_size), interpolation=T.InterpolationMode.BICUBIC, antialias=True),\n            ])\n            mask = transforms(mask).squeeze(1)\n            #mask = T.Resize((image.shape[1], image.shape[2]), interpolation=T.InterpolationMode.BICUBIC, antialias=True)(mask.unsqueeze(1)).squeeze(1)\n\n        img_cond_embeds = encode_image_masked(clip_vision, image, mask, clipvision_size=clipvision_size)\n\n        if is_plus:\n            img_cond_embeds = img_cond_embeds.penultimate_hidden_states\n            img_uncond_embeds = encode_image_masked(clip_vision, torch.zeros([1, clipvision_size, clipvision_size, 3]), clipvision_size=clipvision_size).penultimate_hidden_states\n        else:\n            img_cond_embeds = img_cond_embeds.image_embeds\n            img_uncond_embeds = torch.zeros_like(img_cond_embeds)\n\n        if weight != 1:\n            img_cond_embeds = img_cond_embeds * weight\n\n        return (img_cond_embeds, img_uncond_embeds, )\n\nclass IPAdapterCombineEmbeds:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"embed1\": (\"EMBEDS\",),\n            \"method\": ([\"concat\", \"add\", \"subtract\", \"average\", \"norm average\", \"max\", \"min\"], ),\n        },\n        \"optional\": {\n            \"embed2\": (\"EMBEDS\",),\n            \"embed3\": (\"EMBEDS\",),\n            \"embed4\": (\"EMBEDS\",),\n            \"embed5\": (\"EMBEDS\",),\n        }}\n\n    RETURN_TYPES = (\"EMBEDS\",)\n    FUNCTION = \"batch\"\n    CATEGORY = \"ipadapter/embeds\"\n\n    def batch(self, embed1, method, embed2=None, embed3=None, embed4=None, embed5=None):\n        if method=='concat' and embed2 is None and embed3 is None and embed4 is None and embed5 is None:\n            return (embed1, )\n\n        embeds = [embed1, embed2, embed3, embed4, embed5]\n        embeds = [embed for embed in embeds if embed is not None]\n        embeds = torch.cat(embeds, dim=0)\n\n        if method == \"add\":\n            embeds = torch.sum(embeds, dim=0).unsqueeze(0)\n        elif method == \"subtract\":\n            embeds = embeds[0] - torch.mean(embeds[1:], dim=0)\n            embeds = embeds.unsqueeze(0)\n        elif method == \"average\":\n            embeds = torch.mean(embeds, dim=0).unsqueeze(0)\n        elif method == \"norm average\":\n            embeds = torch.mean(embeds / torch.norm(embeds, dim=0, keepdim=True), dim=0).unsqueeze(0)\n        elif method == \"max\":\n            embeds = torch.max(embeds, dim=0).values.unsqueeze(0)\n        elif method == \"min\":\n            embeds = torch.min(embeds, dim=0).values.unsqueeze(0)\n\n        return (embeds, )\n\nclass IPAdapterNoise:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"type\": ([\"fade\", \"dissolve\", \"gaussian\", \"shuffle\"], ),\n                \"strength\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0, \"max\": 1, \"step\": 0.05 }),\n                \"blur\": (\"INT\", { \"default\": 0, \"min\": 0, \"max\": 32, \"step\": 1 }),\n            },\n            \"optional\": {\n                \"image_optional\": (\"IMAGE\",),\n            }\n        }\n\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"make_noise\"\n    CATEGORY = \"ipadapter/utils\"\n\n    def make_noise(self, type, strength, blur, image_optional=None):\n        if image_optional is None:\n            image = torch.zeros([1, 224, 224, 3])\n        else:\n            transforms = T.Compose([\n                T.CenterCrop(min(image_optional.shape[1], image_optional.shape[2])),\n                T.Resize((224, 224), interpolation=T.InterpolationMode.BICUBIC, antialias=True),\n            ])\n            image = transforms(image_optional.permute([0,3,1,2])).permute([0,2,3,1])\n\n        seed = int(torch.sum(image).item()) % 1000000007 # hash the image to get a seed, grants predictability\n        torch.manual_seed(seed)\n\n        if type == \"fade\":\n            noise = torch.rand_like(image)\n            noise = image * (1 - strength) + noise * strength\n        elif type == \"dissolve\":\n            mask = (torch.rand_like(image) < strength).float()\n            noise = torch.rand_like(image)\n            noise = image * (1-mask) + noise * mask\n        elif type == \"gaussian\":\n            noise = torch.randn_like(image) * strength\n            noise = image + noise\n        elif type == \"shuffle\":\n            transforms = T.Compose([\n                T.ElasticTransform(alpha=75.0, sigma=(1-strength)*3.5),\n                T.RandomVerticalFlip(p=1.0),\n                T.RandomHorizontalFlip(p=1.0),\n            ])\n            image = transforms(image.permute([0,3,1,2])).permute([0,2,3,1])\n            noise = torch.randn_like(image) * (strength*0.75)\n            noise = image * (1-noise) + noise\n\n        del image\n        noise = torch.clamp(noise, 0, 1)\n\n        if blur > 0:\n            if blur % 2 == 0:\n                blur += 1\n            noise = T.functional.gaussian_blur(noise.permute([0,3,1,2]), blur).permute([0,2,3,1])\n\n        return (noise, )\n\nclass PrepImageForClipVision:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"image\": (\"IMAGE\",),\n            \"interpolation\": ([\"LANCZOS\", \"BICUBIC\", \"HAMMING\", \"BILINEAR\", \"BOX\", \"NEAREST\"],),\n            \"crop_position\": ([\"top\", \"bottom\", \"left\", \"right\", \"center\", \"pad\"],),\n            \"sharpening\": (\"FLOAT\", {\"default\": 0.0, \"min\": 0, \"max\": 1, \"step\": 0.05}),\n            },\n        }\n\n    RETURN_TYPES = (\"IMAGE\",)\n    FUNCTION = \"prep_image\"\n\n    CATEGORY = \"ipadapter/utils\"\n\n    def prep_image(self, image, interpolation=\"LANCZOS\", crop_position=\"center\", sharpening=0.0):\n        size = (224, 224)\n        _, oh, ow, _ = image.shape\n        output = image.permute([0,3,1,2])\n\n        if crop_position == \"pad\":\n            if oh != ow:\n                if oh > ow:\n                    pad = (oh - ow) // 2\n                    pad = (pad, 0, pad, 0)\n                elif ow > oh:\n                    pad = (ow - oh) // 2\n                    pad = (0, pad, 0, pad)\n                output = T.functional.pad(output, pad, fill=0)\n        else:\n            crop_size = min(oh, ow)\n            x = (ow-crop_size) // 2\n            y = (oh-crop_size) // 2\n            if \"top\" in crop_position:\n                y = 0\n            elif \"bottom\" in crop_position:\n                y = oh-crop_size\n            elif \"left\" in crop_position:\n                x = 0\n            elif \"right\" in crop_position:\n                x = ow-crop_size\n\n            x2 = x+crop_size\n            y2 = y+crop_size\n\n            output = output[:, :, y:y2, x:x2]\n\n        imgs = []\n        for img in output:\n            img = T.ToPILImage()(img) # using PIL for better results\n            img = img.resize(size, resample=Image.Resampling[interpolation])\n            imgs.append(T.ToTensor()(img))\n        output = torch.stack(imgs, dim=0)\n        del imgs, img\n\n        if sharpening > 0:\n            output = contrast_adaptive_sharpening(output, sharpening)\n\n        output = output.permute([0,2,3,1])\n\n        return (output, )\n\nclass IPAdapterSaveEmbeds:\n    def __init__(self):\n        self.output_dir = folder_paths.get_output_directory()\n\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"embeds\": (\"EMBEDS\",),\n            \"filename_prefix\": (\"STRING\", {\"default\": \"IP_embeds\"})\n            },\n        }\n\n    RETURN_TYPES = ()\n    FUNCTION = \"save\"\n    OUTPUT_NODE = True\n    CATEGORY = \"ipadapter/embeds\"\n\n    def save(self, embeds, filename_prefix):\n        full_output_folder, filename, counter, subfolder, filename_prefix = folder_paths.get_save_image_path(filename_prefix, self.output_dir)\n        file = f\"{filename}_{counter:05}.ipadpt\"\n        file = os.path.join(full_output_folder, file)\n\n        torch.save(embeds, file)\n        return (None, )\n\nclass IPAdapterLoadEmbeds:\n    @classmethod\n    def INPUT_TYPES(s):\n        input_dir = folder_paths.get_input_directory()\n        files = [os.path.relpath(os.path.join(root, file), input_dir) for root, dirs, files in os.walk(input_dir) for file in files if file.endswith('.ipadpt')]\n        return {\"required\": {\"embeds\": [sorted(files), ]}, }\n\n    RETURN_TYPES = (\"EMBEDS\", )\n    FUNCTION = \"load\"\n    CATEGORY = \"ipadapter/embeds\"\n\n    def load(self, embeds):\n        path = folder_paths.get_annotated_filepath(embeds)\n        return (torch.load(path).cpu(), )\n\nclass IPAdapterWeights:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"weights\": (\"STRING\", {\"default\": '1.0, 0.0', \"multiline\": True }),\n            \"timing\": ([\"custom\", \"linear\", \"ease_in_out\", \"ease_in\", \"ease_out\", \"random\"], { \"default\": \"linear\" } ),\n            \"frames\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 9999, \"step\": 1 }),\n            \"start_frame\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 9999, \"step\": 1 }),\n            \"end_frame\": (\"INT\", {\"default\": 9999, \"min\": 0, \"max\": 9999, \"step\": 1 }),\n            \"add_starting_frames\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 9999, \"step\": 1 }),\n            \"add_ending_frames\": (\"INT\", {\"default\": 0, \"min\": 0, \"max\": 9999, \"step\": 1 }),\n            \"method\": ([\"full batch\", \"shift batches\", \"alternate batches\"], { \"default\": \"full batch\" }),\n            }, \"optional\": {\n                \"image\": (\"IMAGE\",),\n            }\n        }\n\n    RETURN_TYPES = (\"FLOAT\", \"FLOAT\", \"INT\", \"IMAGE\", \"IMAGE\", \"WEIGHTS_STRATEGY\")\n    RETURN_NAMES = (\"weights\", \"weights_invert\", \"total_frames\", \"image_1\", \"image_2\", \"weights_strategy\")\n    FUNCTION = \"weights\"\n    CATEGORY = \"ipadapter/weights\"\n\n    def weights(self, weights='', timing='custom', frames=0, start_frame=0, end_frame=9999, add_starting_frames=0, add_ending_frames=0, method='full batch', weights_strategy=None, image=None):\n        import random\n\n        frame_count = image.shape[0] if image is not None else 0\n        if weights_strategy is not None:\n            weights = weights_strategy[\"weights\"]\n            timing = weights_strategy[\"timing\"]\n            frames = weights_strategy[\"frames\"]\n            start_frame = weights_strategy[\"start_frame\"]\n            end_frame = weights_strategy[\"end_frame\"]\n            add_starting_frames = weights_strategy[\"add_starting_frames\"]\n            add_ending_frames = weights_strategy[\"add_ending_frames\"]\n            method = weights_strategy[\"method\"]\n            frame_count = weights_strategy[\"frame_count\"]\n        else:\n            weights_strategy = {\n                \"weights\": weights,\n                \"timing\": timing,\n                \"frames\": frames,\n                \"start_frame\": start_frame,\n                \"end_frame\": end_frame,\n                \"add_starting_frames\": add_starting_frames,\n                \"add_ending_frames\": add_ending_frames,\n                \"method\": method,\n                \"frame_count\": frame_count,\n            }\n\n        # convert the string to a list of floats separated by commas or newlines\n        weights = weights.replace(\"\\n\", \",\")\n        weights = [float(weight) for weight in weights.split(\",\") if weight.strip() != \"\"]\n\n        if timing != \"custom\":\n            frames = max(frames, 2)\n            start = 0.0\n            end = 1.0\n\n            if len(weights) > 0:\n                start = weights[0]\n                end = weights[-1]\n\n            weights = []\n\n            end_frame = min(end_frame, frames)\n            duration = end_frame - start_frame\n            if start_frame > 0:\n                weights.extend([start] * start_frame)\n\n            for i in range(duration):\n                n = duration - 1\n                if timing == \"linear\":\n                    weights.append(start + (end - start) * i / n)\n                elif timing == \"ease_in_out\":\n                    weights.append(start + (end - start) * (1 - math.cos(i / n * math.pi)) / 2)\n                elif timing == \"ease_in\":\n                    weights.append(start + (end - start) * math.sin(i / n * math.pi / 2))\n                elif timing == \"ease_out\":\n                    weights.append(start + (end - start) * (1 - math.cos(i / n * math.pi / 2)))\n                elif timing == \"random\":\n                    weights.append(random.uniform(start, end))\n\n            weights[-1] = end if timing != \"random\" else weights[-1]\n            if end_frame < frames:\n                weights.extend([end] * (frames - end_frame))\n\n        if len(weights) == 0:\n            weights = [0.0]\n\n        frames = len(weights)\n\n        # repeat the images for cross fade\n        image_1 = None\n        image_2 = None\n\n        # Calculate the min and max of the weights\n        min_weight = min(weights)\n        max_weight = max(weights)\n\n        if image is not None:\n\n            if \"shift\" in method:\n                image_1 = image[:-1]\n                image_2 = image[1:]\n\n                weights = weights * image_1.shape[0]\n                image_1 = image_1.repeat_interleave(frames, 0)\n                image_2 = image_2.repeat_interleave(frames, 0)\n            elif \"alternate\" in method:\n                image_1 = image[::2].repeat_interleave(2, 0)\n                image_1 = image_1[1:]\n                image_2 = image[1::2].repeat_interleave(2, 0)\n\n                # Invert the weights relative to their own range\n                mew_weights = weights + [max_weight - (w - min_weight) for w in weights]\n\n                mew_weights = mew_weights * (image_1.shape[0] // 2)\n                if image.shape[0] % 2:\n                    image_1 = image_1[:-1]\n                else:\n                    image_2 = image_2[:-1]\n                    mew_weights = mew_weights + weights\n\n                weights = mew_weights\n                image_1 = image_1.repeat_interleave(frames, 0)\n                image_2 = image_2.repeat_interleave(frames, 0)\n            else:\n                weights = weights * image.shape[0]\n                image_1 = image.repeat_interleave(frames, 0)\n\n            # add starting and ending frames\n            if add_starting_frames > 0:\n                weights = [weights[0]] * add_starting_frames + weights\n                image_1 = torch.cat([image[:1].repeat(add_starting_frames, 1, 1, 1), image_1], dim=0)\n                if image_2 is not None:\n                    image_2 = torch.cat([image[:1].repeat(add_starting_frames, 1, 1, 1), image_2], dim=0)\n            if add_ending_frames > 0:\n                weights = weights + [weights[-1]] * add_ending_frames\n                image_1 = torch.cat([image_1, image[-1:].repeat(add_ending_frames, 1, 1, 1)], dim=0)\n                if image_2 is not None:\n                    image_2 = torch.cat([image_2, image[-1:].repeat(add_ending_frames, 1, 1, 1)], dim=0)\n\n        # reverse the weights array\n        weights_invert = weights[::-1]\n\n        frame_count = len(weights)\n\n        return (weights, weights_invert, frame_count, image_1, image_2, weights_strategy,)\n\nclass IPAdapterWeightsFromStrategy(IPAdapterWeights):\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"weights_strategy\": (\"WEIGHTS_STRATEGY\",),\n            }, \"optional\": {\n                \"image\": (\"IMAGE\",),\n            }\n        }\n\nclass IPAdapterPromptScheduleFromWeightsStrategy():\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"weights_strategy\": (\"WEIGHTS_STRATEGY\",),\n            \"prompt\": (\"STRING\", {\"default\": \"\", \"multiline\": True }),\n            }}\n\n    RETURN_TYPES = (\"STRING\",)\n    RETURN_NAMES = (\"prompt_schedule\", )\n    FUNCTION = \"prompt_schedule\"\n    CATEGORY = \"ipadapter/weights\"\n\n    def prompt_schedule(self, weights_strategy, prompt=\"\"):\n        frames = weights_strategy[\"frames\"]\n        add_starting_frames = weights_strategy[\"add_starting_frames\"]\n        add_ending_frames = weights_strategy[\"add_ending_frames\"]\n        frame_count = weights_strategy[\"frame_count\"]\n\n        out = \"\"\n\n        prompt = [p for p in prompt.split(\"\\n\") if p.strip() != \"\"]\n\n        if len(prompt) > 0 and frame_count > 0:\n            # prompt_pos must be the same size as the image batch\n            if len(prompt) > frame_count:\n                prompt = prompt[:frame_count]\n            elif len(prompt) < frame_count:\n                prompt += [prompt[-1]] * (frame_count - len(prompt))\n\n            if add_starting_frames > 0:\n                out += f\"\\\"0\\\": \\\"{prompt[0]}\\\",\\n\"\n            for i in range(frame_count):\n                out += f\"\\\"{i * frames + add_starting_frames}\\\": \\\"{prompt[i]}\\\",\\n\"\n            if add_ending_frames > 0:\n                out += f\"\\\"{frame_count * frames + add_starting_frames}\\\": \\\"{prompt[-1]}\\\",\\n\"\n\n        return (out, )\n\nclass IPAdapterCombineWeights:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n        \"required\": {\n            \"weights_1\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.05 }),\n            \"weights_2\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.05 }),\n        }}\n    RETURN_TYPES = (\"FLOAT\", \"INT\")\n    RETURN_NAMES = (\"weights\", \"count\")\n    FUNCTION = \"combine\"\n    CATEGORY = \"ipadapter/utils\"\n\n    def combine(self, weights_1, weights_2):\n        if not isinstance(weights_1, list):\n            weights_1 = [weights_1]\n        if not isinstance(weights_2, list):\n            weights_2 = [weights_2]\n        weights = weights_1 + weights_2\n\n        return (weights, len(weights), )\n\nclass IPAdapterRegionalConditioning:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            #\"set_cond_area\": ([\"default\", \"mask bounds\"],),\n            \"image\": (\"IMAGE\",),\n            \"image_weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": -1.0, \"max\": 3.0, \"step\": 0.05 }),\n            \"prompt_weight\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 10.0, \"step\": 0.05 }),\n            \"weight_type\": (WEIGHT_TYPES, ),\n            \"start_at\": (\"FLOAT\", { \"default\": 0.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n            \"end_at\": (\"FLOAT\", { \"default\": 1.0, \"min\": 0.0, \"max\": 1.0, \"step\": 0.001 }),\n        }, \"optional\": {\n            \"mask\": (\"MASK\",),\n            \"positive\": (\"CONDITIONING\",),\n            \"negative\": (\"CONDITIONING\",),\n        }}\n\n    RETURN_TYPES = (\"IPADAPTER_PARAMS\", \"CONDITIONING\", \"CONDITIONING\", )\n    RETURN_NAMES = (\"IPADAPTER_PARAMS\", \"POSITIVE\", \"NEGATIVE\")\n    FUNCTION = \"conditioning\"\n\n    CATEGORY = \"ipadapter/params\"\n\n    def conditioning(self, image, image_weight, prompt_weight, weight_type, start_at, end_at, mask=None, positive=None, negative=None):\n        set_area_to_bounds = False #if set_cond_area == \"default\" else True\n\n        if mask is not None:\n            if positive is not None:\n                positive = conditioning_set_values(positive, {\"mask\": mask, \"set_area_to_bounds\": set_area_to_bounds, \"mask_strength\": prompt_weight})\n            if negative is not None:\n                negative = conditioning_set_values(negative, {\"mask\": mask, \"set_area_to_bounds\": set_area_to_bounds, \"mask_strength\": prompt_weight})\n\n        ipadapter_params = {\n            \"image\": [image],\n            \"attn_mask\": [mask],\n            \"weight\": [image_weight],\n            \"weight_type\": [weight_type],\n            \"start_at\": [start_at],\n            \"end_at\": [end_at],\n        }\n\n        return (ipadapter_params, positive, negative, )\n\nclass IPAdapterCombineParams:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\"required\": {\n            \"params_1\": (\"IPADAPTER_PARAMS\",),\n            \"params_2\": (\"IPADAPTER_PARAMS\",),\n        }, \"optional\": {\n            \"params_3\": (\"IPADAPTER_PARAMS\",),\n            \"params_4\": (\"IPADAPTER_PARAMS\",),\n            \"params_5\": (\"IPADAPTER_PARAMS\",),\n        }}\n\n    RETURN_TYPES = (\"IPADAPTER_PARAMS\",)\n    FUNCTION = \"combine\"\n    CATEGORY = \"ipadapter/params\"\n\n    def combine(self, params_1, params_2, params_3=None, params_4=None, params_5=None):\n        ipadapter_params = {\n            \"image\": params_1[\"image\"] + params_2[\"image\"],\n            \"attn_mask\": params_1[\"attn_mask\"] + params_2[\"attn_mask\"],\n            \"weight\": params_1[\"weight\"] + params_2[\"weight\"],\n            \"weight_type\": params_1[\"weight_type\"] + params_2[\"weight_type\"],\n            \"start_at\": params_1[\"start_at\"] + params_2[\"start_at\"],\n            \"end_at\": params_1[\"end_at\"] + params_2[\"end_at\"],\n        }\n\n        if params_3 is not None:\n            ipadapter_params[\"image\"] += params_3[\"image\"]\n            ipadapter_params[\"attn_mask\"] += params_3[\"attn_mask\"]\n            ipadapter_params[\"weight\"] += params_3[\"weight\"]\n            ipadapter_params[\"weight_type\"] += params_3[\"weight_type\"]\n            ipadapter_params[\"start_at\"] += params_3[\"start_at\"]\n            ipadapter_params[\"end_at\"] += params_3[\"end_at\"]\n        if params_4 is not None:\n            ipadapter_params[\"image\"] += params_4[\"image\"]\n            ipadapter_params[\"attn_mask\"] += params_4[\"attn_mask\"]\n            ipadapter_params[\"weight\"] += params_4[\"weight\"]\n            ipadapter_params[\"weight_type\"] += params_4[\"weight_type\"]\n            ipadapter_params[\"start_at\"] += params_4[\"start_at\"]\n            ipadapter_params[\"end_at\"] += params_4[\"end_at\"]\n        if params_5 is not None:\n            ipadapter_params[\"image\"] += params_5[\"image\"]\n            ipadapter_params[\"attn_mask\"] += params_5[\"attn_mask\"]\n            ipadapter_params[\"weight\"] += params_5[\"weight\"]\n            ipadapter_params[\"weight_type\"] += params_5[\"weight_type\"]\n            ipadapter_params[\"start_at\"] += params_5[\"start_at\"]\n            ipadapter_params[\"end_at\"] += params_5[\"end_at\"]\n\n        return (ipadapter_params, )\n\n\"\"\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n Register\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\"\"\"\nNODE_CLASS_MAPPINGS = {\n    # Main Apply Nodes\n    \"IPAdapter\": IPAdapterSimple,\n    \"IPAdapterAdvanced\": IPAdapterAdvanced,\n    \"IPAdapterBatch\": IPAdapterBatch,\n    \"IPAdapterFaceID\": IPAdapterFaceID,\n    \"IPAdapterFaceIDKolors\": IPAdapterFaceIDKolors,\n    \"IPAAdapterFaceIDBatch\": IPAAdapterFaceIDBatch,\n    \"IPAdapterTiled\": IPAdapterTiled,\n    \"IPAdapterTiledBatch\": IPAdapterTiledBatch,\n    \"IPAdapterEmbeds\": IPAdapterEmbeds,\n    \"IPAdapterEmbedsBatch\": IPAdapterEmbedsBatch,\n    \"IPAdapterStyleComposition\": IPAdapterStyleComposition,\n    \"IPAdapterStyleCompositionBatch\": IPAdapterStyleCompositionBatch,\n    \"IPAdapterMS\": IPAdapterMS,\n    \"IPAdapterClipVisionEnhancer\": IPAdapterClipVisionEnhancer,\n    \"IPAdapterClipVisionEnhancerBatch\": IPAdapterClipVisionEnhancerBatch,\n    \"IPAdapterFromParams\": IPAdapterFromParams,\n    \"IPAdapterPreciseStyleTransfer\": IPAdapterPreciseStyleTransfer,\n    \"IPAdapterPreciseStyleTransferBatch\": IPAdapterPreciseStyleTransferBatch,\n    \"IPAdapterPreciseComposition\": IPAdapterPreciseComposition,\n    \"IPAdapterPreciseCompositionBatch\": IPAdapterPreciseCompositionBatch,\n\n    # Loaders\n    \"IPAdapterUnifiedLoader\": IPAdapterUnifiedLoader,\n    \"IPAdapterUnifiedLoaderFaceID\": IPAdapterUnifiedLoaderFaceID,\n    \"IPAdapterModelLoader\": IPAdapterModelLoader,\n    \"IPAdapterInsightFaceLoader\": IPAdapterInsightFaceLoader,\n    \"IPAdapterUnifiedLoaderCommunity\": IPAdapterUnifiedLoaderCommunity,\n\n    # Helpers\n    \"IPAdapterEncoder\": IPAdapterEncoder,\n    \"IPAdapterCombineEmbeds\": IPAdapterCombineEmbeds,\n    \"IPAdapterNoise\": IPAdapterNoise,\n    \"PrepImageForClipVision\": PrepImageForClipVision,\n    \"IPAdapterSaveEmbeds\": IPAdapterSaveEmbeds,\n    \"IPAdapterLoadEmbeds\": IPAdapterLoadEmbeds,\n    \"IPAdapterWeights\": IPAdapterWeights,\n    \"IPAdapterCombineWeights\": IPAdapterCombineWeights,\n    \"IPAdapterWeightsFromStrategy\": IPAdapterWeightsFromStrategy,\n    \"IPAdapterPromptScheduleFromWeightsStrategy\": IPAdapterPromptScheduleFromWeightsStrategy,\n    \"IPAdapterRegionalConditioning\": IPAdapterRegionalConditioning,\n    \"IPAdapterCombineParams\": IPAdapterCombineParams,\n}\n\nNODE_DISPLAY_NAME_MAPPINGS = {\n    # Main Apply Nodes\n    \"IPAdapter\": \"IPAdapter\",\n    \"IPAdapterAdvanced\": \"IPAdapter Advanced\",\n    \"IPAdapterBatch\": \"IPAdapter Batch (Adv.)\",\n    \"IPAdapterFaceID\": \"IPAdapter FaceID\",\n    \"IPAdapterFaceIDKolors\": \"IPAdapter FaceID Kolors\",\n    \"IPAAdapterFaceIDBatch\": \"IPAdapter FaceID Batch\",\n    \"IPAdapterTiled\": \"IPAdapter Tiled\",\n    \"IPAdapterTiledBatch\": \"IPAdapter Tiled Batch\",\n    \"IPAdapterEmbeds\": \"IPAdapter Embeds\",\n    \"IPAdapterEmbedsBatch\": \"IPAdapter Embeds Batch\",\n    \"IPAdapterStyleComposition\": \"IPAdapter Style & Composition SDXL\",\n    \"IPAdapterStyleCompositionBatch\": \"IPAdapter Style & Composition Batch SDXL\",\n    \"IPAdapterMS\": \"IPAdapter Mad Scientist\",\n    \"IPAdapterClipVisionEnhancer\": \"IPAdapter ClipVision Enhancer\",\n    \"IPAdapterClipVisionEnhancerBatch\": \"IPAdapter ClipVision Enhancer Batch\",\n    \"IPAdapterFromParams\": \"IPAdapter from Params\",\n    \"IPAdapterPreciseStyleTransfer\": \"IPAdapter Precise Style Transfer\",\n    \"IPAdapterPreciseStyleTransferBatch\": \"IPAdapter Precise Style Transfer Batch\",\n    \"IPAdapterPreciseComposition\": \"IPAdapter Precise Composition\",\n    \"IPAdapterPreciseCompositionBatch\": \"IPAdapter Precise Composition Batch\",\n\n    # Loaders\n    \"IPAdapterUnifiedLoader\": \"IPAdapter Unified Loader\",\n    \"IPAdapterUnifiedLoaderFaceID\": \"IPAdapter Unified Loader FaceID\",\n    \"IPAdapterModelLoader\": \"IPAdapter Model Loader\",\n    \"IPAdapterInsightFaceLoader\": \"IPAdapter InsightFace Loader\",\n    \"IPAdapterUnifiedLoaderCommunity\": \"IPAdapter Unified Loader Community\",\n\n    # Helpers\n    \"IPAdapterEncoder\": \"IPAdapter Encoder\",\n    \"IPAdapterCombineEmbeds\": \"IPAdapter Combine Embeds\",\n    \"IPAdapterNoise\": \"IPAdapter Noise\",\n    \"PrepImageForClipVision\": \"Prep Image For ClipVision\",\n    \"IPAdapterSaveEmbeds\": \"IPAdapter Save Embeds\",\n    \"IPAdapterLoadEmbeds\": \"IPAdapter Load Embeds\",\n    \"IPAdapterWeights\": \"IPAdapter Weights\",\n    \"IPAdapterWeightsFromStrategy\": \"IPAdapter Weights From Strategy\",\n    \"IPAdapterPromptScheduleFromWeightsStrategy\": \"Prompt Schedule From Weights Strategy\",\n    \"IPAdapterCombineWeights\": \"IPAdapter Combine Weights\",\n    \"IPAdapterRegionalConditioning\": \"IPAdapter Regional Conditioning\",\n    \"IPAdapterCombineParams\": \"IPAdapter Combine Params\",\n}"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "NODES.md",
          "type": "blob",
          "size": 5.12109375,
          "content": "# Nodes reference\n\nBelow I'm trying to document all the nodes. It's still very incomplete, be sure to check back later.\n\n## Loaders\n\n### :knot: IPAdapter Unified Loader\n\nLoads the full stack of models needed for IPAdapter to function. The returned object will contain information regarding the **ipadapter** and **clip vision models**.\n\nMultiple unified loaders should always be daisy chained through the `ipadapter` in/out. **Failing to do so will cause all models to be loaded twice.** For **the first** unified loader the `ipadapter` input **should never be connected**.\n\n#### Inputs\n- **model**, main ComfyUI model pipeline\n\n#### Optional Inputs\n- **ipadapter**, it's important to note that this is optional and used exclusively to daisy chain unified loaders. **The `ipadapter` input is never connected in the first `IPAdapter Unified Loader` of the chain.**\n\n#### Outputs\n- **model**, the model pipeline is used exclusively for configuration, the model comes out of this node untouched and it can be considered a reroute. Note that this is different  from the Unified Loader FaceID that actually alters the model with a LoRA.\n- **ipadapter**, connect this to any ipadater node. Each node will automatically detect if the `ipadapter` object contains the full stack of models or just one (like in the case [IPAdapter Model Loader](#ipadapter-model-loader)).\n\n### :knot: IPAdapter Model Loader\n\nLoads the IPAdapter model only. The returned object will be the IPAdapter model contrary to the [Unified loader](#ipadapter-unified-loader) that contains the full stack of models.\n\n#### Configuration parameters\n- **ipadapter_file**, the main IPAdapter model. It must be located into `ComfyUI/models/ipadapter` or in any path specified in the `extra_model_paths.yaml` configuration file.\n\n#### Outputs\n- **IPADAPTER**, contains the loaded model only. Note that `IPADAPTER` will have a different structure when loaded by the [Unified Loader](#ipadapter-unified-loader).\n\n## Main IPAdapter Apply Nodes\n\n### :knot: IPAdapter Advanced\n\nThis node contains all the options to fine tune the IPAdapter models. It is a drop in replacement for the old `IPAdapter Apply` that is no longer available. If you have an old workflow, delete the existing `IPadapter Apply` node, add `IPAdapter Advanced` and connect all the pipes as before.\n\n#### Inputs\n- **model**, main model pipeline.\n- **ipadapter**, the IPAdapter model. It can be connected to the [IPAdapter Model Loader](#ipadapter-model-loader) or any of the Unified Loaders. If a Unified loader is used anywhere in the workflow and you don't need a different model, it's always adviced to reuse the previous `ipadapter` pipeline.\n- **image**, the reference image used to generate the positive conditioning. It should be a square image, other aspect ratios are automatically cropped in the center.\n\n#### Optional inputs\n- **image_negative**, image used to generate the negative conditioning. This is optional and normally handled by the code. It is possible to send noise or actually any image to instruct the model about what we don't want to see in the composition.\n- **attn_mask**, a mask that will be applied during the image generation. **The mask should have the same size or at least the same aspect ratio of the latent**. The mask will define the area of influence of the IPAdapter models on the final image. Black zones won't be affected, white zones will get maximum influence. It can be a grayscale mask.\n- **clip_vision**, this is optional if using any of the Unified loaders. If using the [IPAdapter Model Loader](#knot-ipadapter-model-loader) you also have to provide the clip vision model with a `Load CLIP Vision` node.\n\n#### Configuration parameters\n- **weight**, weight of the IPAdapter model. For `linear` `weight_type` (the default), a good starting point is 0.8. If you use other weight types you can experiment with higher values.\n- **weight_type**, this is how the IPAdapter is applied to the UNet block. For example `ease-in` means that the input blocks have higher weight than the output ones. `week input` means that the whole input block has lower weight. `style transfer (SDXL)` only works with SDXL and it's a very powerful tool to tranfer only the style of an image but not its content. This parameter hugely impacts how the composition reacts to the text prompting.\n- **combine_embeds**, when sending more than one reference image the embeddings can be sent one after the other (`concat`) or combined in various ways. For low spec GPUs it is adviced to `average` the embeds if you send multiple images. `subtract` subtracts the embeddings of the second image to the first; in case of 3 or more images they are averaged and subtracted to the first.\n- **start_at/end_at**, this is the timestepping. Defines at what percentage point of the generation to start applying the IPAdapter model. The initial steps are the most important so if you start later (eg: `start_at=0.3`) the generated image will have a very light conditioning.\n- **embeds_scaling**, the way the IPAdapter models are applied to the K,V. This parameter has a small impact on how the model reacts to text prompting. `K+mean(V) w/ C penalty` grants good quality at high weights (>1.0) without burning the image.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.5751953125,
          "content": "# ComfyUI IPAdapter plus\n[ComfyUI](https://github.com/comfyanonymous/ComfyUI) reference implementation for [IPAdapter](https://github.com/tencent-ailab/IP-Adapter/) models.\n\nThe IPAdapter are very powerful models for image-to-image conditioning. The subject or even just the style of the reference image(s) can be easily transferred to a generation. Think of it as a 1-image lora.\n\n# Sponsorship\n\n<div align=\"center\">\n\n**[:heart: Github Sponsor](https://github.com/sponsors/cubiq) | [:coin: Paypal](https://paypal.me/matt3o)**\n\n</div>\n\nIf you like my work and wish to see updates and new features please consider sponsoring my projects.\n\n- [ComfyUI IPAdapter Plus](https://github.com/cubiq/ComfyUI_IPAdapter_plus)\n- [ComfyUI InstantID (Native)](https://github.com/cubiq/ComfyUI_InstantID)\n- [ComfyUI Essentials](https://github.com/cubiq/ComfyUI_essentials)\n- [ComfyUI FaceAnalysis](https://github.com/cubiq/ComfyUI_FaceAnalysis)\n\nNot to mention the documentation and videos tutorials. Check my **ComfyUI Advanced Understanding** videos on YouTube for example, [part 1](https://www.youtube.com/watch?v=_C7kR2TFIX0) and [part 2](https://www.youtube.com/watch?v=ijqXnW_9gzc)\n\nThe only way to keep the code open and free is by sponsoring its development. The more sponsorships the more time I can dedicate to my open source projects.\n\nPlease consider a [Github Sponsorship](https://github.com/sponsors/cubiq) or [PayPal donation](https://paypal.me/matt3o) (Matteo \"matt3o\" Spinelli). For sponsorships of $50+, let me know if you'd like to be mentioned in this readme file, you can find me on [Discord](https://latent.vision/discord) or _matt3o :snail: gmail.com_.\n\n## Important updates\n\n**2024/09/13**: Fixed a nasty bug in the middle block patching that we are carrying around since the beginning. Unfortunately the generated images won't be exactly the same as before. Anyway the middle block doesn't have a huge impact, so it shouldn't be a big deal. It does **not** impact Style or Composition transfer, only linear generations. I do not generally report on small bug fixes but this one may cause different results so I thought it's worth mentioning.\n\n**2024/08/02**: Support for Kolors FaceIDv2. Please check the [example workflow](./examples/IPAdapter_FaceIDv2_Kolors.json) for best practices.\n\n**2024/07/26**: Added support for image batches and animation to the ClipVision Enhancer.\n\n**2024/07/18**: Support for Kolors.\n\n**2024/07/17**: Added experimental ClipVision Enhancer node. It was somehow inspired by the [Scaling on Scales](https://arxiv.org/pdf/2403.13043) paper but the implementation is a bit different. The new IPAdapterClipVisionEnhancer tries to catch small details by tiling the embeds (instead of the image in the pixel space), the result is a slightly higher resolution visual embedding with no cost of performance.\n\n**2024/07/11**: Added experimental Precise composition (layout) transfer. It's not as good as style. `embeds_scaling` has a huge impact. Start with strength 0.8 and boost 0.3 in SDXL and 0.6 boost 0.35 in SD1.5.\n\n**2024/06/28**: Added the `IPAdapter Precise Style Transfer` node. Increase the `style_boost` option to lower the bleeding of the composition layer. **Important:** works better in SDXL, start with a style_boost of 2; for SD1.5 try to increase the weight a little over 1.0 and set the style_boost to a value between -1 and +1, starting with 0.\n\n**2024/06/22**: Added `style transfer precise`, offers less bleeding of the embeds between the style and composition layers. It is sometimes better than the standard style transfer especially if the reference image is very different from the generated image. Works better in SDXL than SD1.5.\n\n**2024/05/21**: Improved memory allocation when `encode_batch_size`. Useful mostly for very long animations.\n\n**2024/05/02**: Add `encode_batch_size` to the Advanced batch node. This can be useful for animations with a lot of frames to reduce the VRAM usage during the image encoding. Please note that results will be slightly different based on the batch size.\n\n**2024/04/27**: Refactored the IPAdapterWeights mostly useful for AnimateDiff animations.\n\n**2024/04/21**: Added Regional Conditioning nodes to simplify attention masking and masked text conditioning.\n\n**2024/04/16**: Added support for the new SDXL portrait unnorm model (link below). It's very strong and tends to ignore the text conditioning. Lower the CFG to 3-4 or use a RescaleCFG node.\n\n*(Older updates removed for readability)*\n\n## Example workflows\n\nThe [examples directory](./examples/) has many workflows that cover all IPAdapter functionalities.\n\n![IPAdapter Example workflow](./examples/demo_workflow.jpg)\n\n## Video Tutorials\n\n<a href=\"https://youtu.be/_JzDcgKgghY\" target=\"_blank\">\n <img src=\"https://img.youtube.com/vi/_JzDcgKgghY/hqdefault.jpg\" alt=\"Watch the video\" />\n</a>\n\n- **:star: [New IPAdapter features](https://youtu.be/_JzDcgKgghY)**\n- **:art: [IPAdapter Style and Composition](https://www.youtube.com/watch?v=czcgJnoDVd4)**\n\nThe following videos are about the previous version of IPAdapter, but they still contain valuable information.\n\n:nerd_face: [Basic usage video](https://youtu.be/7m9ZZFU3HWo), :rocket: [Advanced features video](https://www.youtube.com/watch?v=mJQ62ly7jrg), :japanese_goblin: [Attention Masking video](https://www.youtube.com/watch?v=vqG1VXKteQg), :movie_camera: [Animation Features video](https://www.youtube.com/watch?v=ddYbhv3WgWw)\n\n## Installation\n\nDownload or git clone this repository inside `ComfyUI/custom_nodes/` directory or use the Manager. IPAdapter always requires the latest version of ComfyUI. If something doesn't work be sure to upgrade. Beware that the automatic update of the manager sometimes doesn't work and you may need to upgrade manually.\n\nThere's now a *Unified Model Loader*, for it to work you need to name the files exactly as described below. The legacy loaders work with any file name but you have to select them manually. The models can be placed into sub-directories.\n\nRemember you can also use any custom location setting an `ipadapter` entry in the `extra_model_paths.yaml` file.\n\n- `/ComfyUI/models/clip_vision`\n    - [CLIP-ViT-H-14-laion2B-s32B-b79K.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/image_encoder/model.safetensors), download and rename\n    - [CLIP-ViT-bigG-14-laion2B-39B-b160k.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/image_encoder/model.safetensors), download and rename\n    - [clip-vit-large-patch14-336.bin](https://huggingface.co/Kwai-Kolors/Kolors-IP-Adapter-Plus/resolve/main/image_encoder/pytorch_model.bin), download and rename only for Kolors models\n- `/ComfyUI/models/ipadapter`, create it if not present\n    - [ip-adapter_sd15.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15.safetensors), Basic model, average strength\n    - [ip-adapter_sd15_light_v11.bin](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15_light_v11.bin), Light impact model\n    - [ip-adapter-plus_sd15.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter-plus_sd15.safetensors), Plus model, very strong\n    - [ip-adapter-plus-face_sd15.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter-plus-face_sd15.safetensors), Face model, portraits\n    - [ip-adapter-full-face_sd15.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter-full-face_sd15.safetensors), Stronger face model, not necessarily better\n    - [ip-adapter_sd15_vit-G.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15_vit-G.safetensors), Base model, **requires bigG clip vision encoder**\n    - [ip-adapter_sdxl_vit-h.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter_sdxl_vit-h.safetensors), SDXL model\n    - [ip-adapter-plus_sdxl_vit-h.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter-plus_sdxl_vit-h.safetensors), SDXL plus model\n    - [ip-adapter-plus-face_sdxl_vit-h.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter-plus-face_sdxl_vit-h.safetensors), SDXL face model\n    - [ip-adapter_sdxl.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/sdxl_models/ip-adapter_sdxl.safetensors), vit-G SDXL model, **requires bigG clip vision encoder**\n    - **Deprecated** [ip-adapter_sd15_light.safetensors](https://huggingface.co/h94/IP-Adapter/resolve/main/models/ip-adapter_sd15_light.safetensors), v1.0 Light impact model\n\n**FaceID** models require `insightface`, you need to install it in your ComfyUI environment. Check [this issue](https://github.com/cubiq/ComfyUI_IPAdapter_plus/issues/162) for help. Remember that most FaceID models also need a LoRA.\n\nFor the Unified Loader to work the files need to be named exactly as shown in the list below.\n\n- `/ComfyUI/models/ipadapter`\n    - [ip-adapter-faceid_sd15.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid_sd15.bin), base FaceID model\n    - [ip-adapter-faceid-plusv2_sd15.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plusv2_sd15.bin), FaceID plus v2\n    - [ip-adapter-faceid-portrait-v11_sd15.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-portrait-v11_sd15.bin), text prompt style transfer for portraits\n    - [ip-adapter-faceid_sdxl.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid_sdxl.bin), SDXL base FaceID\n    - [ip-adapter-faceid-plusv2_sdxl.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plusv2_sdxl.bin), SDXL plus v2\n    - [ip-adapter-faceid-portrait_sdxl.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-portrait_sdxl.bin), SDXL text prompt style transfer\n    - [ip-adapter-faceid-portrait_sdxl_unnorm.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-portrait_sdxl_unnorm.bin), very strong style transfer SDXL only\n    - **Deprecated** [ip-adapter-faceid-plus_sd15.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plus_sd15.bin), FaceID plus v1 \n    - **Deprecated** [ip-adapter-faceid-portrait_sd15.bin](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-portrait_sd15.bin), v1 of the portrait model\n\nMost FaceID models require a LoRA. If you use the `IPAdapter Unified Loader FaceID` it will be loaded automatically if you follow the naming convention. Otherwise you have to load them manually, be careful each FaceID model has to be paired with its own specific LoRA.\n\n- `/ComfyUI/models/loras`\n    - [ip-adapter-faceid_sd15_lora.safetensors](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid_sd15_lora.safetensors)\n    - [ip-adapter-faceid-plusv2_sd15_lora.safetensors](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plusv2_sd15_lora.safetensors)\n    - [ip-adapter-faceid_sdxl_lora.safetensors](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid_sdxl_lora.safetensors), SDXL FaceID LoRA\n    - [ip-adapter-faceid-plusv2_sdxl_lora.safetensors](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plusv2_sdxl_lora.safetensors), SDXL plus v2 LoRA\n    - **Deprecated** [ip-adapter-faceid-plus_sd15_lora.safetensors](https://huggingface.co/h94/IP-Adapter-FaceID/resolve/main/ip-adapter-faceid-plus_sd15_lora.safetensors), LoRA for the deprecated FaceID plus v1 model\n\nAll models can be found on [huggingface](https://huggingface.co/h94).\n\n### Community's models\n\nThe community has baked some interesting IPAdapter models.\n\n- `/ComfyUI/models/ipadapter`\n    - [ip_plus_composition_sd15.safetensors](https://huggingface.co/ostris/ip-composition-adapter/resolve/main/ip_plus_composition_sd15.safetensors), general composition ignoring style and content, more about it [here](https://huggingface.co/ostris/ip-composition-adapter)\n    - [ip_plus_composition_sdxl.safetensors](https://huggingface.co/ostris/ip-composition-adapter/resolve/main/ip_plus_composition_sdxl.safetensors), SDXL version\n    - [Kolors-IP-Adapter-Plus.bin](https://huggingface.co/Kwai-Kolors/Kolors-IP-Adapter-Plus/resolve/main/ip_adapter_plus_general.bin?download=true), IPAdapter Plus for Kolors model\n    - [Kolors-IP-Adapter-FaceID-Plus.bin](https://huggingface.co/Kwai-Kolors/Kolors-IP-Adapter-FaceID-Plus/resolve/main/ipa-faceid-plus.bin?download=true), IPAdapter FaceIDv2 for Kolors model. **Note:** Kolors is trained on InsightFace  **antelopev2** model, you need to [manually download it](https://huggingface.co/MonsterMMORPG/tools/tree/main) and place it inside the `models/inisghtface` directory.\n\nif you know of other models please let me know and I will add them to the unified loader.\n\n## Generic suggestions\n\nThere are many workflows included in the [examples](./examples/) directory. Please check them before asking for support.\n\nUsually it's a good idea to lower the `weight` to at least `0.8` and increase the number steps. To increase adherece to the prompt you may try to change the **weight type** in the `IPAdapter Advanced` node.\n\n## Nodes reference\n\nI'm (slowly) documenting all nodes. Please check the [Nodes reference](./NODES.md).\n\n## Troubleshooting\n\nPlease check the [troubleshooting](https://github.com/cubiq/ComfyUI_IPAdapter_plus/issues/108) before posting a new issue. Also remember to check the previous closed issues.\n\n## Current sponsors\n\nIt's only thanks to generous sponsors that **the whole community** can enjoy open and free software. Please join me in thanking the following companies and individuals!\n\n### :trophy: Gold sponsors\n\n[![Kaiber.ai](https://f.latent.vision/imgs/kaiber.png)](https://kaiber.ai/)&nbsp; &nbsp;[![InstaSD](https://f.latent.vision/imgs/instasd.png)](https://www.instasd.com/)\n\n### :tada: Silver sponsors\n\n[![OperArt.ai](https://f.latent.vision/imgs/openart.png?r=1)](https://openart.ai/workflows)&nbsp; &nbsp;[![Finetuners](https://f.latent.vision/imgs/finetuners.png)](https://www.finetuners.ai/)&nbsp; &nbsp;[![Comfy.ICU](https://f.latent.vision/imgs/comfyicu.png?r=1)](https://comfy.icu/)\n\n### Other companies supporting my projects\n\n- [RunComfy](https://www.runcomfy.com/) (ComfyUI Cloud)\n\n### Esteemed individuals\n\n- [Øystein Ø. Olsen](https://github.com/FireNeslo)\n- [Jack Gane](https://github.com/ganeJackS)\n- [Nathan Shipley](https://www.nathanshipley.com/)\n- [Dkdnzia](https://github.com/Dkdnzia)\n\n[And all my public and private sponsors!](https://github.com/sponsors/cubiq)\n\n## Credits\n\n- [IPAdapter](https://github.com/tencent-ailab/IP-Adapter/)\n- [InstantStyle](https://github.com/InstantStyle/InstantStyle)\n- [B-Lora](https://github.com/yardenfren1996/B-LoRA/)\n- [ComfyUI](https://github.com/comfyanonymous/ComfyUI)\n- [laksjdjf](https://github.com/laksjdjf/)\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 1.7451171875,
          "content": "\"\"\"\n ██▓ ██▓███   ▄▄▄      ▓█████▄  ▄▄▄       ██▓███  ▄▄▄█████▓▓█████  ██▀███\n▓██▒▓██░  ██▒▒████▄    ▒██▀ ██▌▒████▄    ▓██░  ██▒▓  ██▒ ▓▒▓█   ▀ ▓██ ▒ ██▒\n▒██▒▓██░ ██▓▒▒██  ▀█▄  ░██   █▌▒██  ▀█▄  ▓██░ ██▓▒▒ ▓██░ ▒░▒███   ▓██ ░▄█ ▒\n░██░▒██▄█▓▒ ▒░██▄▄▄▄██ ░▓█▄   ▌░██▄▄▄▄██ ▒██▄█▓▒ ▒░ ▓██▓ ░ ▒▓█  ▄ ▒██▀▀█▄\n░██░▒██▒ ░  ░ ▓█   ▓██▒░▒████▓  ▓█   ▓██▒▒██▒ ░  ░  ▒██▒ ░ ░▒████▒░██▓ ▒██▒\n░▓  ▒▓▒░ ░  ░ ▒▒   ▓▒█░ ▒▒▓  ▒  ▒▒   ▓▒█░▒▓▒░ ░  ░  ▒ ░░   ░░ ▒░ ░░ ▒▓ ░▒▓░\n ▒ ░░▒ ░       ▒   ▒▒ ░ ░ ▒  ▒   ▒   ▒▒ ░░▒ ░         ░     ░ ░  ░  ░▒ ░ ▒░\n ▒ ░░░         ░   ▒    ░ ░  ░   ░   ▒   ░░         ░         ░     ░░   ░\n ░                 ░  ░   ░          ░  ░                     ░  ░   ░\n                        ░\n             · -—+ IPAdapter Plus Extension for ComfyUI +—- ·\n             Brought to you by Matteo \"Matt3o/Cubiq\" Spinelli\n             https://github.com/cubiq/ComfyUI_IPAdapter_plus/\n\"\"\"\n\nfrom .IPAdapterPlus import NODE_CLASS_MAPPINGS, NODE_DISPLAY_NAME_MAPPINGS\n\n__all__ = ['NODE_CLASS_MAPPINGS', 'NODE_DISPLAY_NAME_MAPPINGS']\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "image_proj_models.py",
          "type": "blob",
          "size": 8.736328125,
          "content": "import math\nimport torch\nimport torch.nn as nn\nfrom einops import rearrange\nfrom einops.layers.torch import Rearrange\n\n\n# FFN\ndef FeedForward(dim, mult=4):\n    inner_dim = int(dim * mult)\n    return nn.Sequential(\n        nn.LayerNorm(dim),\n        nn.Linear(dim, inner_dim, bias=False),\n        nn.GELU(),\n        nn.Linear(inner_dim, dim, bias=False),\n    )\n\n\ndef reshape_tensor(x, heads):\n    bs, length, width = x.shape\n    # (bs, length, width) --> (bs, length, n_heads, dim_per_head)\n    x = x.view(bs, length, heads, -1)\n    # (bs, length, n_heads, dim_per_head) --> (bs, n_heads, length, dim_per_head)\n    x = x.transpose(1, 2)\n    # (bs, n_heads, length, dim_per_head) --> (bs*n_heads, length, dim_per_head)\n    x = x.reshape(bs, heads, length, -1)\n    return x\n\n\nclass PerceiverAttention(nn.Module):\n    def __init__(self, *, dim, dim_head=64, heads=8):\n        super().__init__()\n        self.scale = dim_head**-0.5\n        self.dim_head = dim_head\n        self.heads = heads\n        inner_dim = dim_head * heads\n\n        self.norm1 = nn.LayerNorm(dim)\n        self.norm2 = nn.LayerNorm(dim)\n\n        self.to_q = nn.Linear(dim, inner_dim, bias=False)\n        self.to_kv = nn.Linear(dim, inner_dim * 2, bias=False)\n        self.to_out = nn.Linear(inner_dim, dim, bias=False)\n\n    def forward(self, x, latents):\n        \"\"\"\n        Args:\n            x (torch.Tensor): image features\n                shape (b, n1, D)\n            latent (torch.Tensor): latent features\n                shape (b, n2, D)\n        \"\"\"\n        x = self.norm1(x)\n        latents = self.norm2(latents)\n\n        b, l, _ = latents.shape\n\n        q = self.to_q(latents)\n        kv_input = torch.cat((x, latents), dim=-2)\n        k, v = self.to_kv(kv_input).chunk(2, dim=-1)\n\n        q = reshape_tensor(q, self.heads)\n        k = reshape_tensor(k, self.heads)\n        v = reshape_tensor(v, self.heads)\n\n        # attention\n        scale = 1 / math.sqrt(math.sqrt(self.dim_head))\n        weight = (q * scale) @ (k * scale).transpose(-2, -1)  # More stable with f16 than dividing afterwards\n        weight = torch.softmax(weight.float(), dim=-1).type(weight.dtype)\n        out = weight @ v\n\n        out = out.permute(0, 2, 1, 3).reshape(b, l, -1)\n\n        return self.to_out(out)\n\n\nclass Resampler(nn.Module):\n    def __init__(\n        self,\n        dim=1024,\n        depth=8,\n        dim_head=64,\n        heads=16,\n        num_queries=8,\n        embedding_dim=768,\n        output_dim=1024,\n        ff_mult=4,\n        max_seq_len: int = 257,  # CLIP tokens + CLS token\n        apply_pos_emb: bool = False,\n        num_latents_mean_pooled: int = 0,  # number of latents derived from mean pooled representation of the sequence\n    ):\n        super().__init__()\n        self.pos_emb = nn.Embedding(max_seq_len, embedding_dim) if apply_pos_emb else None\n\n        self.latents = nn.Parameter(torch.randn(1, num_queries, dim) / dim**0.5)\n\n        self.proj_in = nn.Linear(embedding_dim, dim)\n\n        self.proj_out = nn.Linear(dim, output_dim)\n        self.norm_out = nn.LayerNorm(output_dim)\n\n        self.to_latents_from_mean_pooled_seq = (\n            nn.Sequential(\n                nn.LayerNorm(dim),\n                nn.Linear(dim, dim * num_latents_mean_pooled),\n                Rearrange(\"b (n d) -> b n d\", n=num_latents_mean_pooled),\n            )\n            if num_latents_mean_pooled > 0\n            else None\n        )\n\n        self.layers = nn.ModuleList([])\n        for _ in range(depth):\n            self.layers.append(\n                nn.ModuleList(\n                    [\n                        PerceiverAttention(dim=dim, dim_head=dim_head, heads=heads),\n                        FeedForward(dim=dim, mult=ff_mult),\n                    ]\n                )\n            )\n\n    def forward(self, x):\n        if self.pos_emb is not None:\n            n, device = x.shape[1], x.device\n            pos_emb = self.pos_emb(torch.arange(n, device=device))\n            x = x + pos_emb\n\n        latents = self.latents.repeat(x.size(0), 1, 1)\n\n        x = self.proj_in(x)\n\n        if self.to_latents_from_mean_pooled_seq:\n            meanpooled_seq = masked_mean(x, dim=1, mask=torch.ones(x.shape[:2], device=x.device, dtype=torch.bool))\n            meanpooled_latents = self.to_latents_from_mean_pooled_seq(meanpooled_seq)\n            latents = torch.cat((meanpooled_latents, latents), dim=-2)\n\n        for attn, ff in self.layers:\n            latents = attn(x, latents) + latents\n            latents = ff(latents) + latents\n\n        latents = self.proj_out(latents)\n        return self.norm_out(latents)\n\n\ndef masked_mean(t, *, dim, mask=None):\n    if mask is None:\n        return t.mean(dim=dim)\n\n    denom = mask.sum(dim=dim, keepdim=True)\n    mask = rearrange(mask, \"b n -> b n 1\")\n    masked_t = t.masked_fill(~mask, 0.0)\n\n    return masked_t.sum(dim=dim) / denom.clamp(min=1e-5)\n\n\nclass FacePerceiverResampler(nn.Module):\n    def __init__(\n        self,\n        *,\n        dim=768,\n        depth=4,\n        dim_head=64,\n        heads=16,\n        embedding_dim=1280,\n        output_dim=768,\n        ff_mult=4,\n    ):\n        super().__init__()\n\n        self.proj_in = nn.Linear(embedding_dim, dim)\n        self.proj_out = nn.Linear(dim, output_dim)\n        self.norm_out = nn.LayerNorm(output_dim)\n        self.layers = nn.ModuleList([])\n        for _ in range(depth):\n            self.layers.append(\n                nn.ModuleList(\n                    [\n                        PerceiverAttention(dim=dim, dim_head=dim_head, heads=heads),\n                        FeedForward(dim=dim, mult=ff_mult),\n                    ]\n                )\n            )\n\n    def forward(self, latents, x):\n        x = self.proj_in(x)\n        for attn, ff in self.layers:\n            latents = attn(x, latents) + latents\n            latents = ff(latents) + latents\n        latents = self.proj_out(latents)\n        return self.norm_out(latents)\n\n\nclass MLPProjModel(nn.Module):\n    def __init__(self, cross_attention_dim=1024, clip_embeddings_dim=1024):\n        super().__init__()\n\n        self.proj = nn.Sequential(\n            nn.Linear(clip_embeddings_dim, clip_embeddings_dim),\n            nn.GELU(),\n            nn.Linear(clip_embeddings_dim, cross_attention_dim),\n            nn.LayerNorm(cross_attention_dim)\n        )\n\n    def forward(self, image_embeds):\n        clip_extra_context_tokens = self.proj(image_embeds)\n        return clip_extra_context_tokens\n\nclass MLPProjModelFaceId(nn.Module):\n    def __init__(self, cross_attention_dim=768, id_embeddings_dim=512, num_tokens=4):\n        super().__init__()\n\n        self.cross_attention_dim = cross_attention_dim\n        self.num_tokens = num_tokens\n\n        self.proj = nn.Sequential(\n            nn.Linear(id_embeddings_dim, id_embeddings_dim*2),\n            nn.GELU(),\n            nn.Linear(id_embeddings_dim*2, cross_attention_dim*num_tokens),\n        )\n        self.norm = nn.LayerNorm(cross_attention_dim)\n\n    def forward(self, id_embeds):\n        x = self.proj(id_embeds)\n        x = x.reshape(-1, self.num_tokens, self.cross_attention_dim)\n        x = self.norm(x)\n        return x\n\nclass ProjModelFaceIdPlus(nn.Module):\n    def __init__(self, cross_attention_dim=768, id_embeddings_dim=512, clip_embeddings_dim=1280, num_tokens=4):\n        super().__init__()\n\n        self.cross_attention_dim = cross_attention_dim\n        self.num_tokens = num_tokens\n\n        self.proj = nn.Sequential(\n            nn.Linear(id_embeddings_dim, id_embeddings_dim*2),\n            nn.GELU(),\n            nn.Linear(id_embeddings_dim*2, cross_attention_dim*num_tokens),\n        )\n        self.norm = nn.LayerNorm(cross_attention_dim)\n\n        self.perceiver_resampler = FacePerceiverResampler(\n            dim=cross_attention_dim,\n            depth=4,\n            dim_head=64,\n            heads=cross_attention_dim // 64,\n            embedding_dim=clip_embeddings_dim,\n            output_dim=cross_attention_dim,\n            ff_mult=4,\n        )\n\n    def forward(self, id_embeds, clip_embeds, scale=1.0, shortcut=False):\n        x = self.proj(id_embeds)\n        x = x.reshape(-1, self.num_tokens, self.cross_attention_dim)\n        x = self.norm(x)\n        out = self.perceiver_resampler(x, clip_embeds)\n        if shortcut:\n            out = x + scale * out\n        return out\n\nclass ImageProjModel(nn.Module):\n    def __init__(self, cross_attention_dim=1024, clip_embeddings_dim=1024, clip_extra_context_tokens=4):\n        super().__init__()\n\n        self.cross_attention_dim = cross_attention_dim\n        self.clip_extra_context_tokens = clip_extra_context_tokens\n        self.proj = nn.Linear(clip_embeddings_dim, self.clip_extra_context_tokens * cross_attention_dim)\n        self.norm = nn.LayerNorm(cross_attention_dim)\n\n    def forward(self, image_embeds):\n        embeds = image_embeds\n        x = self.proj(embeds).reshape(-1, self.clip_extra_context_tokens, self.cross_attention_dim)\n        x = self.norm(x)\n        return x\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.546875,
          "content": "[project]\nname = \"comfyui_ipadapter_plus\"\ndescription = \"ComfyUI reference implementation for the IPAdapter models. The IPAdapter are very powerful models for image conditioning. The style and composition of a reference can be easily transferred to the generation. Think of it as a 1-image lora.\"\nversion = \"2.0.0\"\nlicense = \"GPL-3.0 license\"\n\n[project.urls]\nRepository = \"https://github.com/cubiq/ComfyUI_IPAdapter_plus\"\n#  Used by Comfy Registry https://comfyregistry.org\n\n[tool.comfy]\nPublisherId = \"matteo\"\nDisplayName = \"ComfyUI_IPAdapter_plus\"\nIcon = \"\"\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 15.591796875,
          "content": "import re\nimport torch\nimport os\nimport folder_paths\nfrom comfy.clip_vision import clip_preprocess, Output\nimport comfy.utils\nimport comfy.model_management as model_management\ntry:\n    import torchvision.transforms.v2 as T\nexcept ImportError:\n    import torchvision.transforms as T\n\ndef get_clipvision_file(preset):\n    preset = preset.lower()\n    clipvision_list = folder_paths.get_filename_list(\"clip_vision\")\n\n    if preset.startswith(\"vit-g\"):\n        pattern = r'(ViT.bigG.14.*39B.b160k|ipadapter.*sdxl|sdxl.*model)\\.(bin|safetensors)'\n    elif preset.startswith(\"kolors\"):\n        pattern = r'clip.vit.large.patch14.336\\.(bin|safetensors)'\n    else:\n        pattern = r'(ViT.H.14.*s32B.b79K|ipadapter.*sd15|sd1.?5.*model)\\.(bin|safetensors)'\n    clipvision_file = [e for e in clipvision_list if re.search(pattern, e, re.IGNORECASE)]\n\n    clipvision_file = folder_paths.get_full_path(\"clip_vision\", clipvision_file[0]) if clipvision_file else None\n\n    return clipvision_file\n\ndef get_ipadapter_file(preset, is_sdxl):\n    preset = preset.lower()\n    ipadapter_list = folder_paths.get_filename_list(\"ipadapter\")\n    is_insightface = False\n    lora_pattern = None\n\n    if preset.startswith(\"light\"):\n        if is_sdxl:\n            raise Exception(\"light model is not supported for SDXL\")\n        pattern = r'sd15.light.v11\\.(safetensors|bin)$'\n        # if v11 is not found, try with the old version\n        if not [e for e in ipadapter_list if re.search(pattern, e, re.IGNORECASE)]:\n            pattern = r'sd15.light\\.(safetensors|bin)$'\n    elif preset.startswith(\"standard\"):\n        if is_sdxl:\n            pattern = r'ip.adapter.sdxl.vit.h\\.(safetensors|bin)$'\n        else:\n            pattern = r'ip.adapter.sd15\\.(safetensors|bin)$'\n    elif preset.startswith(\"vit-g\"):\n        if is_sdxl:\n            pattern = r'ip.adapter.sdxl\\.(safetensors|bin)$'\n        else:\n            pattern = r'sd15.vit.g\\.(safetensors|bin)$'\n    elif preset.startswith(\"plus (\"):\n        if is_sdxl:\n            pattern = r'plus.sdxl.vit.h\\.(safetensors|bin)$'\n        else:\n            pattern = r'ip.adapter.plus.sd15\\.(safetensors|bin)$'\n    elif preset.startswith(\"plus face\"):\n        if is_sdxl:\n            pattern = r'plus.face.sdxl.vit.h\\.(safetensors|bin)$'\n        else:\n            pattern = r'plus.face.sd15\\.(safetensors|bin)$'\n    elif preset.startswith(\"full\"):\n        if is_sdxl:\n            raise Exception(\"full face model is not supported for SDXL\")\n        pattern = r'full.face.sd15\\.(safetensors|bin)$'\n    elif preset.startswith(\"faceid portrait (\"):\n        if is_sdxl:\n            pattern = r'portrait.sdxl\\.(safetensors|bin)$'\n        else:\n            pattern = r'portrait.v11.sd15\\.(safetensors|bin)$'\n            # if v11 is not found, try with the old version\n            if not [e for e in ipadapter_list if re.search(pattern, e, re.IGNORECASE)]:\n                pattern = r'portrait.sd15\\.(safetensors|bin)$'\n        is_insightface = True\n    elif preset.startswith(\"faceid portrait unnorm\"):\n        if is_sdxl:\n            pattern = r'portrait.sdxl.unnorm\\.(safetensors|bin)$'\n        else:\n            raise Exception(\"portrait unnorm model is not supported for SD1.5\")\n        is_insightface = True\n    elif preset == \"faceid\":\n        if is_sdxl:\n            pattern = r'faceid.sdxl\\.(safetensors|bin)$'\n            lora_pattern = r'faceid.sdxl.lora\\.safetensors$'\n        else:\n            pattern = r'faceid.sd15\\.(safetensors|bin)$'\n            lora_pattern = r'faceid.sd15.lora\\.safetensors$'\n        is_insightface = True\n    elif preset.startswith(\"faceid plus -\"):\n        if is_sdxl:\n            raise Exception(\"faceid plus model is not supported for SDXL\")\n        pattern = r'faceid.plus.sd15\\.(safetensors|bin)$'\n        lora_pattern = r'faceid.plus.sd15.lora\\.safetensors$'\n        is_insightface = True\n    elif preset.startswith(\"faceid plus v2\"):\n        if is_sdxl:\n            pattern = r'faceid.plusv2.sdxl\\.(safetensors|bin)$'\n            lora_pattern = r'faceid.plusv2.sdxl.lora\\.safetensors$'\n        else:\n            pattern = r'faceid.plusv2.sd15\\.(safetensors|bin)$'\n            lora_pattern = r'faceid.plusv2.sd15.lora\\.safetensors$'\n        is_insightface = True\n    # Community's models\n    elif preset.startswith(\"composition\"):\n        if is_sdxl:\n            pattern = r'plus.composition.sdxl\\.safetensors$'\n        else:\n            pattern = r'plus.composition.sd15\\.safetensors$'\n    elif preset.startswith(\"kolors\"):\n        if is_sdxl:\n            pattern = r'(ip_adapter_plus_general|kolors.ip.adapter.plus)\\.(safetensors|bin)$'\n        else:\n            raise Exception(\"Only supported for Kolors model\")\n    else:\n        raise Exception(f\"invalid type '{preset}'\")\n\n    ipadapter_file = [e for e in ipadapter_list if re.search(pattern, e, re.IGNORECASE)]\n    ipadapter_file = folder_paths.get_full_path(\"ipadapter\", ipadapter_file[0]) if ipadapter_file else None\n\n    return ipadapter_file, is_insightface, lora_pattern\n\ndef get_lora_file(pattern):\n    lora_list = folder_paths.get_filename_list(\"loras\")\n    lora_file = [e for e in lora_list if re.search(pattern, e, re.IGNORECASE)]\n    lora_file = folder_paths.get_full_path(\"loras\", lora_file[0]) if lora_file else None\n\n    return lora_file\n\ndef ipadapter_model_loader(file):\n    model = comfy.utils.load_torch_file(file, safe_load=True)\n\n    if file.lower().endswith(\".safetensors\"):\n        st_model = {\"image_proj\": {}, \"ip_adapter\": {}}\n        for key in model.keys():\n            if key.startswith(\"image_proj.\"):\n                st_model[\"image_proj\"][key.replace(\"image_proj.\", \"\")] = model[key]\n            elif key.startswith(\"ip_adapter.\"):\n                st_model[\"ip_adapter\"][key.replace(\"ip_adapter.\", \"\")] = model[key]\n            elif key.startswith(\"adapter_modules.\"):\n                st_model[\"ip_adapter\"][key.replace(\"adapter_modules.\", \"\")] = model[key]\n        model = st_model\n        del st_model\n    elif \"adapter_modules\" in model.keys():\n        model[\"ip_adapter\"] = model.pop(\"adapter_modules\")\n\n    if not \"ip_adapter\" in model.keys() or not model[\"ip_adapter\"]:\n        raise Exception(\"invalid IPAdapter model {}\".format(file))\n\n    if 'plusv2' in file.lower():\n        model[\"faceidplusv2\"] = True\n    \n    if 'unnorm' in file.lower():\n        model[\"portraitunnorm\"] = True\n\n    return model\n\ndef insightface_loader(provider, model_name='buffalo_l'):\n    try:\n        from insightface.app import FaceAnalysis\n    except ImportError as e:\n        raise Exception(e)\n\n    path = os.path.join(folder_paths.models_dir, \"insightface\")\n    model = FaceAnalysis(name=model_name, root=path, providers=[provider + 'ExecutionProvider',])\n    model.prepare(ctx_id=0, det_size=(640, 640))\n    return model\n\ndef split_tiles(embeds, num_split):\n    _, H, W, _ = embeds.shape\n    out = []\n    for x in embeds:\n        x = x.unsqueeze(0)\n        h, w = H // num_split, W // num_split\n        x_split = torch.cat([x[:, i*h:(i+1)*h, j*w:(j+1)*w, :] for i in range(num_split) for j in range(num_split)], dim=0)    \n        out.append(x_split)\n    \n    x_split = torch.stack(out, dim=0)\n    \n    return x_split\n\ndef merge_hiddenstates(x, tiles):\n    chunk_size = tiles*tiles\n    x = x.split(chunk_size)\n\n    out = []\n    for embeds in x:\n        num_tiles = embeds.shape[0]\n        tile_size = int((embeds.shape[1]-1) ** 0.5)\n        grid_size = int(num_tiles ** 0.5)\n\n        # Extract class tokens\n        class_tokens = embeds[:, 0, :]  # Save class tokens: [num_tiles, embeds[-1]]\n        avg_class_token = class_tokens.mean(dim=0, keepdim=True).unsqueeze(0)  # Average token, shape: [1, 1, embeds[-1]]\n\n        patch_embeds = embeds[:, 1:, :]  # Shape: [num_tiles, tile_size^2, embeds[-1]]\n        reshaped = patch_embeds.reshape(grid_size, grid_size, tile_size, tile_size, embeds.shape[-1])\n\n        merged = torch.cat([torch.cat([reshaped[i, j] for j in range(grid_size)], dim=1) \n                            for i in range(grid_size)], dim=0)\n        \n        merged = merged.unsqueeze(0)  # Shape: [1, grid_size*tile_size, grid_size*tile_size, embeds[-1]]\n        \n        # Pool to original size\n        pooled = torch.nn.functional.adaptive_avg_pool2d(merged.permute(0, 3, 1, 2), (tile_size, tile_size)).permute(0, 2, 3, 1)\n        flattened = pooled.reshape(1, tile_size*tile_size, embeds.shape[-1])\n        \n        # Add back the class token\n        with_class = torch.cat([avg_class_token, flattened], dim=1)  # Shape: original shape\n        out.append(with_class)\n    \n    out = torch.cat(out, dim=0)\n\n    return out\n\ndef merge_embeddings(x, tiles): # TODO: this needs so much testing that I don't even\n    chunk_size = tiles*tiles\n    x = x.split(chunk_size)\n\n    out = []\n    for embeds in x:\n        num_tiles = embeds.shape[0]\n        grid_size = int(num_tiles ** 0.5)\n        tile_size = int(embeds.shape[1] ** 0.5)\n        reshaped = embeds.reshape(grid_size, grid_size, tile_size, tile_size)\n        \n        # Merge the tiles\n        merged = torch.cat([torch.cat([reshaped[i, j] for j in range(grid_size)], dim=1) \n                            for i in range(grid_size)], dim=0)\n        \n        merged = merged.unsqueeze(0)  # Shape: [1, grid_size*tile_size, grid_size*tile_size]\n        \n        # Pool to original size\n        pooled = torch.nn.functional.adaptive_avg_pool2d(merged, (tile_size, tile_size))  # pool to [1, tile_size, tile_size]\n        pooled = pooled.flatten(1)  # flatten to [1, tile_size^2]\n        out.append(pooled)\n    out = torch.cat(out, dim=0)\n    \n    return out\n\ndef encode_image_masked(clip_vision, image, mask=None, batch_size=0, tiles=1, ratio=1.0, clipvision_size=224):\n    # full image embeds\n    embeds = encode_image_masked_(clip_vision, image, mask, batch_size, clipvision_size=clipvision_size)\n    tiles = min(tiles, 16)\n\n    if tiles > 1:\n        # split in tiles\n        image_split = split_tiles(image, tiles)\n\n        # get the embeds for each tile\n        embeds_split = Output()\n        for i in image_split:\n            encoded = encode_image_masked_(clip_vision, i, mask, batch_size, clipvision_size=clipvision_size)\n            if not hasattr(embeds_split, \"image_embeds\"):\n                #embeds_split[\"last_hidden_state\"] = encoded[\"last_hidden_state\"]\n                embeds_split[\"image_embeds\"] = encoded[\"image_embeds\"]\n                embeds_split[\"penultimate_hidden_states\"] = encoded[\"penultimate_hidden_states\"]\n            else:\n                #embeds_split[\"last_hidden_state\"] = torch.cat((embeds_split[\"last_hidden_state\"], encoded[\"last_hidden_state\"]), dim=0)\n                embeds_split[\"image_embeds\"] = torch.cat((embeds_split[\"image_embeds\"], encoded[\"image_embeds\"]), dim=0)\n                embeds_split[\"penultimate_hidden_states\"] = torch.cat((embeds_split[\"penultimate_hidden_states\"], encoded[\"penultimate_hidden_states\"]), dim=0)\n\n        #embeds_split['last_hidden_state'] = merge_hiddenstates(embeds_split['last_hidden_state'])\n        embeds_split[\"image_embeds\"] = merge_embeddings(embeds_split[\"image_embeds\"], tiles)\n        embeds_split[\"penultimate_hidden_states\"] = merge_hiddenstates(embeds_split[\"penultimate_hidden_states\"], tiles)\n\n        #embeds['last_hidden_state'] = torch.cat([embeds_split['last_hidden_state'], embeds['last_hidden_state']])\n        if embeds['image_embeds'].shape[0] > 1: # if we have more than one image we need to average the embeddings for consistency\n            embeds['image_embeds'] = embeds['image_embeds']*ratio + embeds_split['image_embeds']*(1-ratio)\n            embeds['penultimate_hidden_states'] = embeds['penultimate_hidden_states']*ratio + embeds_split['penultimate_hidden_states']*(1-ratio)\n            #embeds['image_embeds'] = (embeds['image_embeds']*ratio + embeds_split['image_embeds']) / 2\n            #embeds['penultimate_hidden_states'] = (embeds['penultimate_hidden_states']*ratio + embeds_split['penultimate_hidden_states']) / 2\n        else: # otherwise we can concatenate them, they can be averaged later\n            embeds['image_embeds'] = torch.cat([embeds['image_embeds']*ratio, embeds_split['image_embeds']])\n            embeds['penultimate_hidden_states'] = torch.cat([embeds['penultimate_hidden_states']*ratio, embeds_split['penultimate_hidden_states']])\n\n    #del embeds_split\n\n    return embeds\n\ndef encode_image_masked_(clip_vision, image, mask=None, batch_size=0, clipvision_size=224):\n    model_management.load_model_gpu(clip_vision.patcher)\n    outputs = Output()\n\n    if batch_size == 0:\n        batch_size = image.shape[0]\n    elif batch_size > image.shape[0]:\n        batch_size = image.shape[0]\n\n    image_batch = torch.split(image, batch_size, dim=0)\n\n    for img in image_batch:\n        img = img.to(clip_vision.load_device)\n        pixel_values = clip_preprocess(img, size=clipvision_size).float()\n\n        # TODO: support for multiple masks\n        if mask is not None:\n            pixel_values = pixel_values * mask.to(clip_vision.load_device)\n\n        out = clip_vision.model(pixel_values=pixel_values, intermediate_output=-2)\n\n        if not hasattr(outputs, \"last_hidden_state\"):\n            outputs[\"last_hidden_state\"] = out[0].to(model_management.intermediate_device())\n            outputs[\"image_embeds\"] = out[2].to(model_management.intermediate_device())\n            outputs[\"penultimate_hidden_states\"] = out[1].to(model_management.intermediate_device())\n        else:\n            outputs[\"last_hidden_state\"] = torch.cat((outputs[\"last_hidden_state\"], out[0].to(model_management.intermediate_device())), dim=0)\n            outputs[\"image_embeds\"] = torch.cat((outputs[\"image_embeds\"], out[2].to(model_management.intermediate_device())), dim=0)\n            outputs[\"penultimate_hidden_states\"] = torch.cat((outputs[\"penultimate_hidden_states\"], out[1].to(model_management.intermediate_device())), dim=0)\n\n    del img, pixel_values, out\n    torch.cuda.empty_cache()\n\n    return outputs\n\ndef tensor_to_size(source, dest_size):\n    if isinstance(dest_size, torch.Tensor):\n        dest_size = dest_size.shape[0]\n    source_size = source.shape[0]\n\n    if source_size < dest_size:\n        shape = [dest_size - source_size] + [1]*(source.dim()-1)\n        source = torch.cat((source, source[-1:].repeat(shape)), dim=0)\n    elif source_size > dest_size:\n        source = source[:dest_size]\n\n    return source\n\ndef min_(tensor_list):\n    # return the element-wise min of the tensor list.\n    x = torch.stack(tensor_list)\n    mn = x.min(axis=0)[0]\n    return torch.clamp(mn, min=0)\n\ndef max_(tensor_list):\n    # return the element-wise max of the tensor list.\n    x = torch.stack(tensor_list)\n    mx = x.max(axis=0)[0]\n    return torch.clamp(mx, max=1)\n\n# From https://github.com/Jamy-L/Pytorch-Contrast-Adaptive-Sharpening/\ndef contrast_adaptive_sharpening(image, amount):\n    img = T.functional.pad(image, (1, 1, 1, 1)).cpu()\n\n    a = img[..., :-2, :-2]\n    b = img[..., :-2, 1:-1]\n    c = img[..., :-2, 2:]\n    d = img[..., 1:-1, :-2]\n    e = img[..., 1:-1, 1:-1]\n    f = img[..., 1:-1, 2:]\n    g = img[..., 2:, :-2]\n    h = img[..., 2:, 1:-1]\n    i = img[..., 2:, 2:]\n\n    # Computing contrast\n    cross = (b, d, e, f, h)\n    mn = min_(cross)\n    mx = max_(cross)\n\n    diag = (a, c, g, i)\n    mn2 = min_(diag)\n    mx2 = max_(diag)\n    mx = mx + mx2\n    mn = mn + mn2\n\n    # Computing local weight\n    inv_mx = torch.reciprocal(mx)\n    amp = inv_mx * torch.minimum(mn, (2 - mx))\n\n    # scaling\n    amp = torch.sqrt(amp)\n    w = - amp * (amount * (1/5 - 1/8) + 1/8)\n    div = torch.reciprocal(1 + 4*w)\n\n    output = ((b + d + f + h)*w + e) * div\n    output = torch.nan_to_num(output)\n    output = output.clamp(0, 1)\n\n    return output\n\ndef tensor_to_image(tensor):\n    image = tensor.mul(255).clamp(0, 255).byte().cpu()\n    image = image[..., [2, 1, 0]].numpy()\n    return image\n\ndef image_to_tensor(image):\n    tensor = torch.clamp(torch.from_numpy(image).float() / 255., 0, 1)\n    tensor = tensor[..., [2, 1, 0]]\n    return tensor\n"
        }
      ]
    }
  ]
}