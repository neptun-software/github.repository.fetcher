{
  "metadata": {
    "timestamp": 1736559811921,
    "page": 544,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "boppreh/keyboard",
      "stars": 3830,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.2490234375,
          "content": "[run]\nbranch = True\n\n[report]\nexclude_lines =\n    pragma: no cover\n\n    pass\n\n    def __repr__\n\n    raise NotImplementedError\n\n    if __name__ == .__main__.:\n\n    from. import\n\n    import \n\n    except ImportError:\n\n[html]\ndirectory = coverage_html_report\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4716796875,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.966796875,
          "content": "coverage_html_report/\ndocs/_build/\ntest.py\n\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Build results\n[Dd]ebug/\n[Rr]elease/\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.vspscc\n.builds\n*.dotCover\n\n## TODO: If you have NuGet Package Restore enabled, uncomment this\n#packages/\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n\n# Visual Studio profiler\n*.psess\n*.vsp\n\n# ReSharper is a .NET coding add-in\n_ReSharper*\n\n# Installshield output folder\n[Ee]xpress\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish\n\n# Others\n[Bb]in\n[Oo]bj\nsql\nTestResults\n*.Cache\nClientBin\nstylecop.*\n~$*\n*.dbmdl\nGenerated_Code #added for RIA/Silverlight projects\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\n\n\n\n############\n## Windows\n############\n\n# Windows image file caches\nThumbs.db\n\n# Folder config file\nDesktop.ini\n\n\n#############\n## Python\n#############\n\n*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n# Mac crap\n.DS_Store\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 6.0107421875,
          "content": "# 0.13.5\n\n- Added LICENSE.txt file to PyPI packages.\n- Fixed typos in docstrings.\n- Merged #281 and #259 (thanks @luizeldorado and @schldwcht !).\n\n\n# 0.13.4\n\n- [All] Improve release process, fixing #233 and #269.\n\n\n# 0.13.3\n\n- [Windows] Fix overflow error on Python 3.7.\n- [Mac] Added alt gr -> alt mapping.\n- [Mac] Added support for right shift.\n- [All] Fixed numlock alias.\n- [All] Fixed example code.\n\n\n# 0.13.2\n\n- [Mac] Fixed \"map_name\" error (i.e. implement new backend API).\n- [Win] Improve detection of \"right alt\" key.\n- [All] Misc fixes for edge cases.\n\n\n# 0.13.1\n\n- [Windows/Linux] Fixed installation.\n\n\n# 0.13.0\n\n- [All] New `remap_` and `block_` functions.\n- [All] New high-level functions for parsing and converting hotkey names.\n- [All] Added `.modifiers` and `.is_keymap` attribute to events.\n- [All] Event name now matches character typed (e.g. now event from key `1` reports as `!` if shift is pressed). This gives `get_typed_strings` more precision.\n- [Windows] New key suppression system should fix most bugs with `suppress=True`.\n- [Linux] Added `.device` attribute to events.\n- [All] Many, many bugfixes.\n\n\n# 0.11.0\n\n- [Windows] Used explicit WinDLL to fix \"expected CFunctionType instance instead of CFunctionType\".\n- [Windows] Added more Windows virtual key codes for key name mapping (should fix .e.g \"?\").\n- [All] Fixed canonicalization removing too much space (thanks @iliazeus).\n- [All] Added `start_recording` and `stop_recording` for more flexible macros (thanks @softuser25 for the suggestion).\n- [All] Added `read_hotkey` function.\n- [All] Added `get_hotkey_name` function.\n- [All] Cleaned up `examples` folder and added more examples.\n\n\n# 0.10.4\n\n- [Mac] Added aliases for modifiers (control->ctrl, option->alt, command->windows).\n- [All] Add reference to mouse project.\n- [All] Use WinDLL for mouse part instead of raw ctypes.windll.user32.\n\n\n# 0.10.3\n\n- [All] Fix PyPI readme (https://github.com/pypa/setuptools/issues/1126).\n- [All] Remove bdist from release (PEP 527).\n\n\n# 0.10.2\n\n- [All] Removed ctypes type-hints to avoid runtime errors in unusual systems.\n- [All] Add mention of new `mouse` project.\n- [All] Add mention of experimental OS X support.\n- [All] Fixes to release process.\n\n\n# 0.10.0\n\n- [OS X] Added experimental OS X support (thanks @glitchassassin!).\n- [Windows] Fixed error on fractional `mouse.wheel()` (thanks @bobonthenet!).\n- [Windows] Fixed name for arrow keys` virtual key codes.\n- [Windows] Make backend easier to use in other projects (e.g. `_winkeyboard.prepare_intercept`).\n- [Linux] Fixed mouse support in Mint VirtualBox guest (thanks @foodforarabbit!).\n- [All] Added mouse alias `hold = press` (thanks @DanMossa!).\n- [All] Added `mouse.drag`.\n- [All] Added examples on how to use the library.\n- [All] Update docs to mention how to differentiate key presses and releases (thanks @TrakJohnson!).\n- [All] Change the default value of `add_abbreviation(..., match_suffix)`.\n\n\n# 0.9.13\n\n- [Windows] Fix bug when listening to alt-gr.\n- [All] Add `trigger_on_release` parameter to `add_hotkey`.\n- [All] Make `wait` and `read_key` interruptible by ctrl+c.\n- [All] Small fixes on code/name mapping.\n\nThanks glitchassassin and BladeMight for the pull requests.\n\n\n# 0.9.12\n\n- [Windows] Fixed some incorrect key names (e.g. enter as '\\r', and left keys reported as 'right ...')\n- [Python2] `long` scan codes no longer crash the `matches` function.\n- [All] add `read_key` function, which blocks and returns the next event.\n- [All] Added makefile.\n\n\n# 0.9.11\n\n- [All] Fixed Python2 compatbility.\n- [All] Updated release process to always run both Python2 and Python3 tests before publishing.\n\n\n# 0.9.10\n\n- [Windows] Add `suppress` parameter to hotkeys to block the combination from being sent to other programs.\n- [Windows] Better key mapping for common keys (now using Virtual Key Codes when possible).\n- [Windows] Normalize numpad and key code names.\n- [Linux] Errors about requiring sudo are now thrown in the main thread, making them catchable.\n- [All] `wheel` method in mouse module.\n\n\n# 0.9.9\n\n- [Windows] Include scan codes in generated events, instead of only Virtual Key Codes. This allows software like Citrix to receive the events correctly.\n- [Windows] Fix bugs that prevented keys without associated Virtual Key Codes from beign processed.\n\n\n# 0.9.8\n\n- Allow sending of keypad events on both Windows and Linux.\n- Fixed bug where key sending was failing on Linux notebooks.\n\n\n# 0.9.7\n\n- [Windows] Fixed a bug where the `windows` key name failed to map to a scan code.\n\n\n# 0.9.6\n\n- [Windows] Modifier keys now report 'left' or 'right' on their names.\n- [Windows] Keypad attribute should be much more accurate even with NumLock.\n- [Windows] Media keys are now fully supported for both report and playback.\n\n\n# 0.9.5\n\n- [Windows] Add aliases to correct page down/page up names.\n- [Windows] Fixed a bug where left and right key events were being created without names.\n- [Windows] Prefer to report home/page up/page down/end keys as such instead of their keypad names.\n\n\n# 0.9.4\n\n- Distinguish events from numeric pad keys (`event.is_keypad`).\n- [Linux] Annotate event with device id (`event.device`).\n\n\n# 0.9.3\n\n- [Linux] Create fake keyboard with uinput if none is available.\n- [Linux] Avoid errors when an unknown key is pressed.\n\n\n# 0.9.2\n\n- Streamline release process\n\n\n# 0.9.1\n\n- Add `add_abbreviation` and `register_word_listener` functions.\n- Add functions for low level hooks (`hook`, `hook_key`).\n- Add `on_press` and `on_release` functions.\n- Add alternative names (aliases) for many functions.\n- Add large number of alternative key names, especially for accents.\n- Make module produce and consume JSON if ran as script (`python -m keyboard`).\n- 100% test coverage.\n\n- [Linux] Add support for writing arbitrary Unicode.\n- [Linux] Look for Linux keyboard devices in /proc/bus/input/devices.\n- [Linux] Aggregate as many devices as possibles (e.g. USB keyboard on notebook).\n- [Linux] Improved support for internationalized keys.\n\n- [Windows] Process keys asynchronously to reduce key delay.\n\n- [All] Too many bugfixes to count.\n- [All] Major backend refactor.\n\n# 0.7.1\n\n- Alpha version.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2016 BoppreH\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0546875,
          "content": "include CHANGES.md\ninclude README.md\ninclude LICENSE.txt"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.693359375,
          "content": "test: tests\ntests:\n\tpython2 -m coverage run -m keyboard._keyboard_tests\n\tpython2 -m coverage run -am keyboard._mouse_tests\n\tpython -m coverage run -am keyboard._keyboard_tests\n\tpython -m coverage run -am keyboard._mouse_tests\n\tpython -m coverage report && coverage3 html\n\nbuild: tests keyboard setup.py README.md CHANGES.md MANIFEST.in\n\tpython ../docstring2markdown/docstring2markdown.py keyboard \"https://github.com/boppreh/keyboard/blob/master\" > README.md\n\tfind . \\( -name \"*.py\" -o -name \"*.sh\" -o -name \"* .md\" \\) -exec dos2unix {} \\;\n\tpython setup.py sdist --format=zip bdist_wheel && twine check dist/*\n\nrelease:\n\tpython make_release.py\n\nclean:\n\trm -rfv dist build coverage_html_report keyboard.egg-info"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 28.7568359375,
          "content": "**This project is currently unmaintained. It works for many cases, and I wish to pick it up again in the future, but you might encounter some friction and limited features using it.**\n\n---\n\n---\n\nkeyboard\n========\n\nTake full control of your keyboard with this small Python library. Hook global events, register hotkeys, simulate key presses and much more.\n\n## Features\n\n- **Global event hook** on all keyboards (captures keys regardless of focus).\n- **Listen** and **send** keyboard events.\n- Works with **Windows** and **Linux** (requires sudo), with experimental **OS X** support (thanks @glitchassassin!).\n- **Pure Python**, no C modules to be compiled.\n- **Zero dependencies**. Trivial to install and deploy, just copy the files.\n- **Python 2 and 3**.\n- Complex hotkey support (e.g. `ctrl+shift+m, ctrl+space`) with controllable timeout.\n- Includes **high level API** (e.g. [record](#keyboard.record) and [play](#keyboard.play), [add_abbreviation](#keyboard.add_abbreviation)).\n- Maps keys as they actually are in your layout, with **full internationalization support** (e.g. `Ctrl+ç`).\n- Events automatically captured in separate thread, doesn't block main program.\n- Tested and documented.\n- Doesn't break accented dead keys (I'm looking at you, pyHook).\n- Mouse support available via project [mouse](https://github.com/boppreh/mouse) (`pip install mouse`).\n\n## Usage\n\nInstall the [PyPI package](https://pypi.python.org/pypi/keyboard/):\n\n    pip install keyboard\n\nor clone the repository (no installation required, source files are sufficient):\n\n    git clone https://github.com/boppreh/keyboard\n\nor [download and extract the zip](https://github.com/boppreh/keyboard/archive/master.zip) into your project folder.\n\nThen check the [API docs below](https://github.com/boppreh/keyboard#api) to see what features are available.\n\n\n## Example\n\nUse as library:\n\n```py\nimport keyboard\n\nkeyboard.press_and_release('shift+s, space')\n\nkeyboard.write('The quick brown fox jumps over the lazy dog.')\n\nkeyboard.add_hotkey('ctrl+shift+a', print, args=('triggered', 'hotkey'))\n\n# Press PAGE UP then PAGE DOWN to type \"foobar\".\nkeyboard.add_hotkey('page up, page down', lambda: keyboard.write('foobar'))\n\n# Blocks until you press esc.\nkeyboard.wait('esc')\n\n# Record events until 'esc' is pressed.\nrecorded = keyboard.record(until='esc')\n# Then replay back at three times the speed.\nkeyboard.play(recorded, speed_factor=3)\n\n# Type @@ then press space to replace with abbreviation.\nkeyboard.add_abbreviation('@@', 'my.long.email@example.com')\n\n# Block forever, like `while True`.\nkeyboard.wait()\n```\n\nUse as standalone module:\n\n```bash\n# Save JSON events to a file until interrupted:\npython -m keyboard > events.txt\n\ncat events.txt\n# {\"event_type\": \"down\", \"scan_code\": 25, \"name\": \"p\", \"time\": 1622447562.2994788, \"is_keypad\": false}\n# {\"event_type\": \"up\", \"scan_code\": 25, \"name\": \"p\", \"time\": 1622447562.431007, \"is_keypad\": false}\n# ...\n\n# Replay events\npython -m keyboard < events.txt\n```\n\n## Known limitations:\n\n- Events generated under Windows don't report device id (`event.device == None`). [#21](https://github.com/boppreh/keyboard/issues/21)\n- Media keys on Linux may appear nameless (scan-code only) or not at all. [#20](https://github.com/boppreh/keyboard/issues/20)\n- Key suppression/blocking only available on Windows. [#22](https://github.com/boppreh/keyboard/issues/22)\n- To avoid depending on X, the Linux parts reads raw device files (`/dev/input/input*`) but this requires root.\n- Other applications, such as some games, may register hooks that swallow all key events. In this case `keyboard` will be unable to report events.\n- This program makes no attempt to hide itself, so don't use it for keyloggers or online gaming bots. Be responsible.\n- SSH connections forward only the text typed, not keyboard events. Therefore if you connect to a server or Raspberry PI that is running `keyboard` via SSH, the server will not detect your key events.\n\n## Common patterns and mistakes\n\n### Preventing the program from closing\n\n```py\nimport keyboard\nkeyboard.add_hotkey('space', lambda: print('space was pressed!'))\n# If the program finishes, the hotkey is not in effect anymore.\n\n# Don't do this! This will use 100% of your CPU.\n#while True: pass\n\n# Use this instead\nkeyboard.wait()\n\n# or this\nimport time\nwhile True:\n    time.sleep(1000000)\n```\n\n### Waiting for a key press one time\n\n```py\nimport keyboard\n\n# Don't do this! This will use 100% of your CPU until you press the key.\n#\n#while not keyboard.is_pressed('space'):\n#    continue\n#print('space was pressed, continuing...')\n\n# Do this instead\nkeyboard.wait('space')\nprint('space was pressed, continuing...')\n```\n\n### Repeatedly waiting for a key press\n\n```py\nimport keyboard\n\n# Don't do this!\n#\n#while True:\n#    if keyboard.is_pressed('space'):\n#        print('space was pressed!')\n#\n# This will use 100% of your CPU and print the message many times.\n\n# Do this instead\nwhile True:\n    keyboard.wait('space')\n    print('space was pressed! Waiting on it again...')\n\n# or this\nkeyboard.add_hotkey('space', lambda: print('space was pressed!'))\nkeyboard.wait()\n```\n\n### Invoking code when an event happens\n\n```py\nimport keyboard\n\n# Don't do this! This will call `print('space')` immediately then fail when the key is actually pressed.\n#keyboard.add_hotkey('space', print('space was pressed'))\n\n# Do this instead\nkeyboard.add_hotkey('space', lambda: print('space was pressed'))\n\n# or this\ndef on_space():\n    print('space was pressed')\nkeyboard.add_hotkey('space', on_space)\n\n# or this\nwhile True:\n    # Wait for the next event.\n    event = keyboard.read_event()\n    if event.event_type == keyboard.KEY_DOWN and event.name == 'space':\n        print('space was pressed')\n```\n\n### 'Press any key to continue'\n\n```py\n# Don't do this! The `keyboard` module is meant for global events, even when your program is not in focus.\n#import keyboard\n#print('Press any key to continue...')\n#keyboard.get_event()\n\n# Do this instead\ninput('Press enter to continue...')\n\n# Or one of the suggestions from here\n# https://stackoverflow.com/questions/983354/how-to-make-a-script-wait-for-a-pressed-key\n```\n\n\n\n# API\n#### Table of Contents\n\n- [keyboard.**KEY\\_DOWN**](#keyboard.KEY_DOWN)\n- [keyboard.**KEY\\_UP**](#keyboard.KEY_UP)\n- [keyboard.**KeyboardEvent**](#keyboard.KeyboardEvent)\n- [keyboard.**all\\_modifiers**](#keyboard.all_modifiers)\n- [keyboard.**sided\\_modifiers**](#keyboard.sided_modifiers)\n- [keyboard.**version**](#keyboard.version)\n- [keyboard.**is\\_modifier**](#keyboard.is_modifier)\n- [keyboard.**key\\_to\\_scan\\_codes**](#keyboard.key_to_scan_codes)\n- [keyboard.**parse\\_hotkey**](#keyboard.parse_hotkey)\n- [keyboard.**send**](#keyboard.send) *(aliases: `press_and_release`)*\n- [keyboard.**press**](#keyboard.press)\n- [keyboard.**release**](#keyboard.release)\n- [keyboard.**is\\_pressed**](#keyboard.is_pressed)\n- [keyboard.**call\\_later**](#keyboard.call_later)\n- [keyboard.**hook**](#keyboard.hook)\n- [keyboard.**on\\_press**](#keyboard.on_press)\n- [keyboard.**on\\_release**](#keyboard.on_release)\n- [keyboard.**hook\\_key**](#keyboard.hook_key)\n- [keyboard.**on\\_press\\_key**](#keyboard.on_press_key)\n- [keyboard.**on\\_release\\_key**](#keyboard.on_release_key)\n- [keyboard.**unhook**](#keyboard.unhook) *(aliases: `unblock_key`, `unhook_key`, `unremap_key`)*\n- [keyboard.**unhook\\_all**](#keyboard.unhook_all)\n- [keyboard.**block\\_key**](#keyboard.block_key)\n- [keyboard.**remap\\_key**](#keyboard.remap_key)\n- [keyboard.**parse\\_hotkey\\_combinations**](#keyboard.parse_hotkey_combinations)\n- [keyboard.**add\\_hotkey**](#keyboard.add_hotkey) *(aliases: `register_hotkey`)*\n- [keyboard.**remove\\_hotkey**](#keyboard.remove_hotkey) *(aliases: `clear_hotkey`, `unregister_hotkey`, `unremap_hotkey`)*\n- [keyboard.**unhook\\_all\\_hotkeys**](#keyboard.unhook_all_hotkeys) *(aliases: `clear_all_hotkeys`, `remove_all_hotkeys`, `unregister_all_hotkeys`)*\n- [keyboard.**remap\\_hotkey**](#keyboard.remap_hotkey)\n- [keyboard.**stash\\_state**](#keyboard.stash_state)\n- [keyboard.**restore\\_state**](#keyboard.restore_state)\n- [keyboard.**restore\\_modifiers**](#keyboard.restore_modifiers)\n- [keyboard.**write**](#keyboard.write)\n- [keyboard.**wait**](#keyboard.wait)\n- [keyboard.**get\\_hotkey\\_name**](#keyboard.get_hotkey_name)\n- [keyboard.**read\\_event**](#keyboard.read_event)\n- [keyboard.**read\\_key**](#keyboard.read_key)\n- [keyboard.**read\\_hotkey**](#keyboard.read_hotkey)\n- [keyboard.**get\\_typed\\_strings**](#keyboard.get_typed_strings)\n- [keyboard.**start\\_recording**](#keyboard.start_recording)\n- [keyboard.**stop\\_recording**](#keyboard.stop_recording)\n- [keyboard.**record**](#keyboard.record)\n- [keyboard.**play**](#keyboard.play) *(aliases: `replay`)*\n- [keyboard.**add\\_word\\_listener**](#keyboard.add_word_listener) *(aliases: `register_word_listener`)*\n- [keyboard.**remove\\_word\\_listener**](#keyboard.remove_word_listener) *(aliases: `remove_abbreviation`)*\n- [keyboard.**add\\_abbreviation**](#keyboard.add_abbreviation) *(aliases: `register_abbreviation`)*\n- [keyboard.**normalize\\_name**](#keyboard.normalize_name)\n\n\n<a name=\"keyboard.KEY_DOWN\"/>\n\n## keyboard.**KEY\\_DOWN**\n```py\n= 'down'\n```\n\n<a name=\"keyboard.KEY_UP\"/>\n\n## keyboard.**KEY\\_UP**\n```py\n= 'up'\n```\n\n<a name=\"keyboard.KeyboardEvent\"/>\n\n## class keyboard.**KeyboardEvent**\n\n\n\n\n<a name=\"KeyboardEvent.device\"/>\n\n### KeyboardEvent.**device**\n\n\n<a name=\"KeyboardEvent.event_type\"/>\n\n### KeyboardEvent.**event\\_type**\n\n\n<a name=\"KeyboardEvent.is_keypad\"/>\n\n### KeyboardEvent.**is\\_keypad**\n\n\n<a name=\"KeyboardEvent.modifiers\"/>\n\n### KeyboardEvent.**modifiers**\n\n\n<a name=\"KeyboardEvent.name\"/>\n\n### KeyboardEvent.**name**\n\n\n<a name=\"KeyboardEvent.scan_code\"/>\n\n### KeyboardEvent.**scan\\_code**\n\n\n<a name=\"KeyboardEvent.time\"/>\n\n### KeyboardEvent.**time**\n\n\n<a name=\"KeyboardEvent.to_json\"/>\n\n### KeyboardEvent.**to\\_json**(self, ensure\\_ascii=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/_keyboard_event.py#L34)\n\n\n\n\n\n\n<a name=\"keyboard.all_modifiers\"/>\n\n## keyboard.**all\\_modifiers**\n```py\n= {'alt', 'alt gr', 'ctrl', 'left alt', 'left ctrl', 'left shift', 'left windows', 'right alt', 'right ctrl', 'right shift', 'right windows', 'shift', 'windows'}\n```\n\n<a name=\"keyboard.sided_modifiers\"/>\n\n## keyboard.**sided\\_modifiers**\n```py\n= {'alt', 'ctrl', 'shift', 'windows'}\n```\n\n<a name=\"keyboard.version\"/>\n\n## keyboard.**version**\n```py\n= '0.13.5'\n```\n\n<a name=\"keyboard.is_modifier\"/>\n\n## keyboard.**is\\_modifier**(key)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L242)\n\n\nReturns True if `key` is a scan code or name of a modifier key.\n\n\n\n<a name=\"keyboard.key_to_scan_codes\"/>\n\n## keyboard.**key\\_to\\_scan\\_codes**(key, error\\_if\\_missing=True)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L405)\n\n\nReturns a list of scan codes associated with this key (name or scan code).\n\n\n\n<a name=\"keyboard.parse_hotkey\"/>\n\n## keyboard.**parse\\_hotkey**(hotkey)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L435)\n\n\nParses a user-provided hotkey into nested tuples representing the\nparsed structure, with the bottom values being lists of scan codes.\nAlso accepts raw scan codes, which are then wrapped in the required\nnumber of nestings.\n\nExample:\n\n```py\n\nparse_hotkey(\"alt+shift+a, alt+b, c\")\n#    Keys:    ^~^ ^~~~^ ^  ^~^ ^  ^\n#    Steps:   ^~~~~~~~~~^  ^~~~^  ^\n\n# ((alt_codes, shift_codes, a_codes), (alt_codes, b_codes), (c_codes,))\n```\n\n\n\n<a name=\"keyboard.send\"/>\n\n## keyboard.**send**(hotkey, do\\_press=True, do\\_release=True)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L468)\n\n\nSends OS events that perform the given *hotkey* hotkey.\n\n- `hotkey` can be either a scan code (e.g. 57 for space), single key\n(e.g. 'space') or multi-key, multi-step hotkey (e.g. 'alt+F4, enter').\n- `do_press` if true then press events are sent. Defaults to True.\n- `do_release` if true then release events are sent. Defaults to True.\n\n```py\n\nsend(57)\nsend('ctrl+alt+del')\nsend('alt+F4, enter')\nsend('shift+s')\n```\n\nNote: keys are released in the opposite order they were pressed.\n\n\n\n<a name=\"keyboard.press\"/>\n\n## keyboard.**press**(hotkey)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L501)\n\nPresses and holds down a hotkey (see [`send`](#keyboard.send)). \n\n\n<a name=\"keyboard.release\"/>\n\n## keyboard.**release**(hotkey)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L505)\n\nReleases a hotkey (see [`send`](#keyboard.send)). \n\n\n<a name=\"keyboard.is_pressed\"/>\n\n## keyboard.**is\\_pressed**(hotkey)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L509)\n\n\nReturns True if the key is pressed.\n\n```py\n\nis_pressed(57) #-> True\nis_pressed('space') #-> True\nis_pressed('ctrl+space') #-> True\n```\n\n\n\n<a name=\"keyboard.call_later\"/>\n\n## keyboard.**call\\_later**(fn, args=(), delay=0.001)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L536)\n\n\nCalls the provided function in a new thread after waiting some time.\nUseful for giving the system some time to process an event, without blocking\nthe current execution flow.\n\n\n\n<a name=\"keyboard.hook\"/>\n\n## keyboard.**hook**(callback, suppress=False, on\\_remove=&lt;lambda&gt;)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L546)\n\n\nInstalls a global listener on all available keyboards, invoking `callback`\neach time a key is pressed or released.\n\nThe event passed to the callback is of type `keyboard.KeyboardEvent`,\nwith the following attributes:\n\n- `name`: an Unicode representation of the character (e.g. \"&\") or\ndescription (e.g.  \"space\"). The name is always lower-case.\n- `scan_code`: number representing the physical key, e.g. 55.\n- `time`: timestamp of the time the event occurred, with as much precision\nas given by the OS.\n\nReturns the given callback for easier development.\n\n\n\n<a name=\"keyboard.on_press\"/>\n\n## keyboard.**on\\_press**(callback, suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L577)\n\n\nInvokes `callback` for every KEY_DOWN event. For details see [`hook`](#keyboard.hook).\n\n\n\n<a name=\"keyboard.on_release\"/>\n\n## keyboard.**on\\_release**(callback, suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L583)\n\n\nInvokes `callback` for every KEY_UP event. For details see [`hook`](#keyboard.hook).\n\n\n\n<a name=\"keyboard.hook_key\"/>\n\n## keyboard.**hook\\_key**(key, callback, suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L589)\n\n\nHooks key up and key down events for a single key. Returns the event handler\ncreated. To remove a hooked key use [`unhook_key(key)`](#keyboard.unhook_key) or\n[`unhook_key(handler)`](#keyboard.unhook_key).\n\nNote: this function shares state with hotkeys, so [`clear_all_hotkeys`](#keyboard.clear_all_hotkeys)\naffects it as well.\n\n\n\n<a name=\"keyboard.on_press_key\"/>\n\n## keyboard.**on\\_press\\_key**(key, callback, suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L613)\n\n\nInvokes `callback` for KEY_DOWN event related to the given key. For details see [`hook`](#keyboard.hook).\n\n\n\n<a name=\"keyboard.on_release_key\"/>\n\n## keyboard.**on\\_release\\_key**(key, callback, suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L619)\n\n\nInvokes `callback` for KEY_UP event related to the given key. For details see [`hook`](#keyboard.hook).\n\n\n\n<a name=\"keyboard.unhook\"/>\n\n## keyboard.**unhook**(remove)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L625)\n\n\nRemoves a previously added hook, either by callback or by the return value\nof [`hook`](#keyboard.hook).\n\n\n\n<a name=\"keyboard.unhook_all\"/>\n\n## keyboard.**unhook\\_all**()\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L633)\n\n\nRemoves all keyboard hooks in use, including hotkeys, abbreviations, word\nlisteners, [`record`](#keyboard.record)ers and [`wait`](#keyboard.wait)s.\n\n\n\n<a name=\"keyboard.block_key\"/>\n\n## keyboard.**block\\_key**(key)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L645)\n\n\nSuppresses all key events of the given key, regardless of modifiers.\n\n\n\n<a name=\"keyboard.remap_key\"/>\n\n## keyboard.**remap\\_key**(src, dst)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L652)\n\n\nWhenever the key `src` is pressed or released, regardless of modifiers,\npress or release the hotkey `dst` instead.\n\n\n\n<a name=\"keyboard.parse_hotkey_combinations\"/>\n\n## keyboard.**parse\\_hotkey\\_combinations**(hotkey)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L666)\n\n\nParses a user-provided hotkey. Differently from [`parse_hotkey`](#keyboard.parse_hotkey),\ninstead of each step being a list of the different scan codes for each key,\neach step is a list of all possible combinations of those scan codes.\n\n\n\n<a name=\"keyboard.add_hotkey\"/>\n\n## keyboard.**add\\_hotkey**(hotkey, callback, args=(), suppress=False, timeout=1, trigger\\_on\\_release=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L706)\n\n\nInvokes a callback every time a hotkey is pressed. The hotkey must\nbe in the format `ctrl+shift+a, s`. This would trigger when the user holds\nctrl, shift and \"a\" at once, releases, and then presses \"s\". To represent\nliteral commas, pluses, and spaces, use their names ('comma', 'plus',\n'space').\n\n- `args` is an optional list of arguments to passed to the callback during\neach invocation.\n- `suppress` defines if successful triggers should block the keys from being\nsent to other programs.\n- `timeout` is the amount of seconds allowed to pass between key presses.\n- `trigger_on_release` if true, the callback is invoked on key release instead\nof key press.\n\nThe event handler function is returned. To remove a hotkey call\n[`remove_hotkey(hotkey)`](#keyboard.remove_hotkey) or [`remove_hotkey(handler)`](#keyboard.remove_hotkey).\nbefore the hotkey state is reset.\n\nNote: hotkeys are activated when the last key is *pressed*, not released.\nNote: the callback is executed in a separate thread, asynchronously. For an\nexample of how to use a callback synchronously, see [`wait`](#keyboard.wait).\n\nExamples:\n\n```py\n\n# Different but equivalent ways to listen for a spacebar key press.\nadd_hotkey(' ', print, args=['space was pressed'])\nadd_hotkey('space', print, args=['space was pressed'])\nadd_hotkey('Space', print, args=['space was pressed'])\n# Here 57 represents the keyboard code for spacebar; so you will be\n# pressing 'spacebar', not '57' to activate the print function.\nadd_hotkey(57, print, args=['space was pressed'])\n\nadd_hotkey('ctrl+q', quit)\nadd_hotkey('ctrl+alt+enter, space', some_callback)\n```\n\n\n\n<a name=\"keyboard.remove_hotkey\"/>\n\n## keyboard.**remove\\_hotkey**(hotkey\\_or\\_callback)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L852)\n\n\nRemoves a previously hooked hotkey. Must be called with the value returned\nby [`add_hotkey`](#keyboard.add_hotkey).\n\n\n\n<a name=\"keyboard.unhook_all_hotkeys\"/>\n\n## keyboard.**unhook\\_all\\_hotkeys**()\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L860)\n\n\nRemoves all keyboard hotkeys in use, including abbreviations, word listeners,\n[`record`](#keyboard.record)ers and [`wait`](#keyboard.wait)s.\n\n\n\n<a name=\"keyboard.remap_hotkey\"/>\n\n## keyboard.**remap\\_hotkey**(src, dst, suppress=True, trigger\\_on\\_release=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L871)\n\n\nWhenever the hotkey `src` is pressed, suppress it and send\n`dst` instead.\n\nExample:\n\n```py\n\nremap('alt+w', 'ctrl+up')\n```\n\n\n\n<a name=\"keyboard.stash_state\"/>\n\n## keyboard.**stash\\_state**()\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L891)\n\n\nBuilds a list of all currently pressed scan codes, releases them and returns\nthe list. Pairs well with [`restore_state`](#keyboard.restore_state) and [`restore_modifiers`](#keyboard.restore_modifiers).\n\n\n\n<a name=\"keyboard.restore_state\"/>\n\n## keyboard.**restore\\_state**(scan\\_codes)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L903)\n\n\nGiven a list of scan_codes ensures these keys, and only these keys, are\npressed. Pairs well with [`stash_state`](#keyboard.stash_state), alternative to [`restore_modifiers`](#keyboard.restore_modifiers).\n\n\n\n<a name=\"keyboard.restore_modifiers\"/>\n\n## keyboard.**restore\\_modifiers**(scan\\_codes)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L920)\n\n\nLike [`restore_state`](#keyboard.restore_state), but only restores modifier keys.\n\n\n\n<a name=\"keyboard.write\"/>\n\n## keyboard.**write**(text, delay=0, restore\\_state\\_after=True, exact=None)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L926)\n\n\nSends artificial keyboard events to the OS, simulating the typing of a given\ntext. Characters not available on the keyboard are typed as explicit unicode\ncharacters using OS-specific functionality, such as alt+codepoint.\n\nTo ensure text integrity, all currently pressed keys are released before\nthe text is typed, and modifiers are restored afterwards.\n\n- `delay` is the number of seconds to wait between keypresses, defaults to\nno delay.\n- `restore_state_after` can be used to restore the state of pressed keys\nafter the text is typed, i.e. presses the keys that were released at the\nbeginning. Defaults to True.\n- `exact` forces typing all characters as explicit unicode (e.g.\nalt+codepoint or special events). If None, uses platform-specific suggested\nvalue.\n\n\n\n<a name=\"keyboard.wait\"/>\n\n## keyboard.**wait**(hotkey=None, suppress=False, trigger\\_on\\_release=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L981)\n\n\nBlocks the program execution until the given hotkey is pressed or,\nif given no parameters, blocks forever.\n\n\n\n<a name=\"keyboard.get_hotkey_name\"/>\n\n## keyboard.**get\\_hotkey\\_name**(names=None)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L995)\n\n\nReturns a string representation of hotkey from the given key names, or\nthe currently pressed keys if not given.  This function:\n\n- normalizes names;\n- removes \"left\" and \"right\" prefixes;\n- replaces the \"+\" key name with \"plus\" to avoid ambiguity;\n- puts modifier keys first, in a standardized order;\n- sort remaining keys;\n- finally, joins everything with \"+\".\n\nExample:\n\n```py\n\nget_hotkey_name(['+', 'left ctrl', 'shift'])\n# \"ctrl+shift+plus\"\n```\n\n\n\n<a name=\"keyboard.read_event\"/>\n\n## keyboard.**read\\_event**(suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1026)\n\n\nBlocks until a keyboard event happens, then returns that event.\n\n\n\n<a name=\"keyboard.read_key\"/>\n\n## keyboard.**read\\_key**(suppress=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1037)\n\n\nBlocks until a keyboard event happens, then returns that event's name or,\nif missing, its scan code.\n\n\n\n<a name=\"keyboard.read_hotkey\"/>\n\n## keyboard.**read\\_hotkey**(suppress=True)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1045)\n\n\nSimilar to [`read_key()`](#keyboard.read_key), but blocks until the user presses and releases a\nhotkey (or single key), then returns a string representing the hotkey\npressed.\n\nExample:\n\n```py\n\nread_hotkey()\n# \"ctrl+shift+p\"\n```\n\n\n\n<a name=\"keyboard.get_typed_strings\"/>\n\n## keyboard.**get\\_typed\\_strings**(events, allow\\_backspace=True)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1067)\n\n\nGiven a sequence of events, tries to deduce what strings were typed.\nStrings are separated when a non-textual key is pressed (such as tab or\nenter). Characters are converted to uppercase according to shift and\ncapslock status. If `allow_backspace` is True, backspaces remove the last\ncharacter typed.\n\nThis function is a generator, so you can pass an infinite stream of events\nand convert them to strings in real time.\n\nNote this functions is merely an heuristic. Windows for example keeps per-\nprocess keyboard state such as keyboard layout, and this information is not\navailable for our hooks.\n\n```py\n\nget_type_strings(record()) #-> ['This is what', 'I recorded', '']\n```\n\n\n\n<a name=\"keyboard.start_recording\"/>\n\n## keyboard.**start\\_recording**(recorded\\_events\\_queue=None)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1114)\n\n\nStarts recording all keyboard events into a global variable, or the given\nqueue if any. Returns the queue of events and the hooked function.\n\nUse [`stop_recording()`](#keyboard.stop_recording) or [`unhook(hooked_function)`](#keyboard.unhook) to stop.\n\n\n\n<a name=\"keyboard.stop_recording\"/>\n\n## keyboard.**stop\\_recording**()\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1126)\n\n\nStops the global recording of events and returns a list of the events\ncaptured.\n\n\n\n<a name=\"keyboard.record\"/>\n\n## keyboard.**record**(until=&#x27;escape&#x27;, suppress=False, trigger\\_on\\_release=False)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1138)\n\n\nRecords all keyboard events from all keyboards until the user presses the\ngiven hotkey. Then returns the list of events recorded, of type\n`keyboard.KeyboardEvent`. Pairs well with\n[`play(events)`](#keyboard.play).\n\nNote: this is a blocking function.\nNote: for more details on the keyboard hook and events see [`hook`](#keyboard.hook).\n\n\n\n<a name=\"keyboard.play\"/>\n\n## keyboard.**play**(events, speed\\_factor=1.0)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1152)\n\n\nPlays a sequence of recorded events, maintaining the relative time\nintervals. If speed_factor is <= 0 then the actions are replayed as fast\nas the OS allows. Pairs well with [`record()`](#keyboard.record).\n\nNote: the current keyboard state is cleared at the beginning and restored at\nthe end of the function.\n\n\n\n<a name=\"keyboard.add_word_listener\"/>\n\n## keyboard.**add\\_word\\_listener**(word, callback, triggers=[&#x27;space&#x27;], match\\_suffix=False, timeout=2)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1176)\n\n\nInvokes a callback every time a sequence of characters is typed (e.g. 'pet')\nand followed by a trigger key (e.g. space). Modifiers (e.g. alt, ctrl,\nshift) are ignored.\n\n- `word` the typed text to be matched. E.g. 'pet'.\n- `callback` is an argument-less function to be invoked each time the word\nis typed.\n- `triggers` is the list of keys that will cause a match to be checked. If\nthe user presses some key that is not a character (len>1) and not in\ntriggers, the characters so far will be discarded. By default the trigger\nis only `space`.\n- `match_suffix` defines if endings of words should also be checked instead\nof only whole words. E.g. if true, typing 'carpet'+space will trigger the\nlistener for 'pet'. Defaults to false, only whole words are checked.\n- `timeout` is the maximum number of seconds between typed characters before\nthe current word is discarded. Defaults to 2 seconds.\n\nReturns the event handler created. To remove a word listener use\n[`remove_word_listener(word)`](#keyboard.remove_word_listener) or [`remove_word_listener(handler)`](#keyboard.remove_word_listener).\n\nNote: all actions are performed on key down. Key up events are ignored.\nNote: word matches are **case sensitive**.\n\n\n\n<a name=\"keyboard.remove_word_listener\"/>\n\n## keyboard.**remove\\_word\\_listener**(word\\_or\\_handler)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1232)\n\n\nRemoves a previously registered word listener. Accepts either the word used\nduring registration (exact string) or the event handler returned by the\n[`add_word_listener`](#keyboard.add_word_listener) or [`add_abbreviation`](#keyboard.add_abbreviation) functions.\n\n\n\n<a name=\"keyboard.add_abbreviation\"/>\n\n## keyboard.**add\\_abbreviation**(source\\_text, replacement\\_text, match\\_suffix=False, timeout=2)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/__init__.py#L1240)\n\n\nRegisters a hotkey that replaces one typed text with another. For example\n\n```py\n\nadd_abbreviation('tm', u'™')\n```\n\nReplaces every \"tm\" followed by a space with a ™ symbol (and no space). The\nreplacement is done by sending backspace events.\n\n- `match_suffix` defines if endings of words should also be checked instead\nof only whole words. E.g. if true, typing 'carpet'+space will trigger the\nlistener for 'pet'. Defaults to false, only whole words are checked.\n- `timeout` is the maximum number of seconds between typed characters before\nthe current word is discarded. Defaults to 2 seconds.\n\nFor more details see [`add_word_listener`](#keyboard.add_word_listener).\n\n\n\n<a name=\"keyboard.normalize_name\"/>\n\n## keyboard.**normalize\\_name**(name)\n\n[\\[source\\]](https://github.com/boppreh/keyboard/blob/master/keyboard/_canonical_names.py#L1233)\n\n\nGiven a key name (e.g. \"LEFT CONTROL\"), clean up the string and convert to\nthe canonical representation (e.g. \"left ctrl\") if one is known.\n\n\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "keyboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "make_release.py",
          "type": "blob",
          "size": 3.765625,
          "content": "\"\"\"\nThis little guy streamliens the release process of Python packages.\n\nBy running `python3 make_release.py` it'll do the following tasks automatically:\n\n- Update README by calling `make_readme.sh` if this file exists.\n- Check PyPI RST long_description syntax.\n- Show the latest version from CHANGES.md and ask for a new version number.\n- Open vim to allow you to edit the list of changes for this new version, showing a list of commits since the last version.\n- Prepend your list of changes to CHANGES.md (and ask if you want to commit it now).\n- Add a git tag to the current commit.\n- Push tag to GitHub.\n- Publish a new release to GitHub, asking for the authentication token (optional).\n- Publish a new release on PyPI.\n\nSuggested way to organize your project for a smooth process:\n\n- Use Markdown everywhere.\n- Keep a description of your project in the package's docstring.\n- Generate your README from the package docstring plus API docs.\n- Convert your package docstring to RST in setup.py and use that as long_description.\n- Use raw semantic versioning for CHANGES.md and PyPI (e.g. 2.3.1), and prepend 'v' for git tags and releases (e.g. v2.3.1).\n\n\"\"\"\nimport re\nimport sys\nimport os\nfrom subprocess import run, check_output\nimport atexit\nimport requests\nimport keyboard\n\nrun(['make', 'clean', 'build'], check=True)\n\nassert re.fullmatch(r'\\d+\\.\\d+\\.\\d+', keyboard.version)\nlast_version = check_output(['git', 'describe', '--abbrev=0'], universal_newlines=True).strip('v\\n')\nassert keyboard.version != last_version, 'Must update keyboard.version first.'\n\ncommits = check_output(['git', 'log', 'v{}..HEAD'.format(last_version), '--oneline'], universal_newlines=True)\nwith open('message.txt', 'w') as message_file:\n    atexit.register(lambda: os.remove('message.txt'))\n\n    message_file.write('\\n\\n\\n')\n    message_file.write('# Enter changes one per line like this:\\n')\n    message_file.write('# - Added `foobar`.\\n\\n\\n')\n    message_file.write('# As a reminder, here\\'s the last commits since version {}:\\n\\n'.format(last_version))\n    for line in commits.strip().split('\\n'):\n        message_file.write('# {}\\n'.format(line))\n\nrun(['vim', 'message.txt'])\nwith open('message.txt') as message_file:\n    lines = [line for line in message_file.readlines() if not line.startswith('#')]\nmessage = ''.join(lines).strip()\nif not message:\n    print('Aborting release due to empty message.')\n    exit()\nwith open('message.txt', 'w') as message_file:\n    message_file.write(message)\n\nwith open('CHANGES.md') as changes_file:\n    old_changes = changes_file.read()\nwith open('CHANGES.md', 'w') as changes_file:\n    changes_file.write('# {}\\n\\n{}\\n\\n\\n{}'.format(keyboard.version, message, old_changes))\n\n\ntag_name = 'v' + keyboard.version\nif input('Commit README.md and CHANGES.md files? ').lower().startswith('y'):\n    run(['git', 'add', 'CHANGES.md', 'README.md'])\n    run(['git', 'commit', '-m', 'Update changes for {}'.format(tag_name)])\n    run(['git', 'push'])\nrun(['git', 'tag', '-a', tag_name, '--file', 'message.txt'], check=True)\nrun(['git', 'push', 'origin', tag_name], check=True)\n\ntoken = input('To make a release enter your GitHub repo authorization token: ').strip()\nif token:\n    git_remotes = check_output(['git', 'remote', '-v']).decode('utf-8')\n    repo_path = re.search(r'github.com[:/](.+?)(?:\\.git)? \\(push\\)', git_remotes).group(1)\n    releases_url = 'https://api.github.com/repos/{}/releases'.format(repo_path)\n    print(releases_url)\n    release = {\n        \"tag_name\": tag_name,\n        \"target_commitish\": \"master\",\n        \"name\": tag_name,\n        \"body\": message,\n        \"draft\": False,\n        \"prerelease\": False,\n    }\n    response = requests.post(releases_url, json=release, headers={'Authorization': 'token ' + token})\n    print(response.status_code, response.text)\n\nrun(['twine', 'upload', 'dist/*'], check=True, shell=True)\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.3017578125,
          "content": "\"\"\"\nUsage instructions:\n\n- If you are installing: `python setup.py install`\n- If you are developing: `python setup.py sdist --format=zip bdist_wheel --universal bdist_wininst && twine check dist/*`\n\"\"\"\nimport keyboard\n\nfrom setuptools import setup\nsetup(\n    name='keyboard',\n    version=keyboard.version,\n    author='BoppreH',\n    author_email='boppreh@gmail.com',\n    packages=['keyboard'],\n    url='https://github.com/boppreh/keyboard',\n    license='MIT',\n    description='Hook and simulate keyboard events on Windows and Linux',\n    keywords = 'keyboard hook simulate hotkey',\n\n    # Wheel creation breaks with Windows newlines.\n    # https://github.com/pypa/setuptools/issues/1126\n    long_description=keyboard.__doc__.replace('\\r\\n', '\\n'),\n    long_description_content_type='text/markdown',\n\n    install_requires=[\"pyobjc; sys_platform=='darwin'\"], # OSX-specific dependency\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: Unix',\n        'Operating System :: MacOS :: MacOS X',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Utilities',\n    ],\n)\n"
        }
      ]
    }
  ]
}