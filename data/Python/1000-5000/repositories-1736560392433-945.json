{
  "metadata": {
    "timestamp": 1736560392433,
    "page": 945,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jrfonseca/gprof2dot",
      "stars": 3256,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.0830078125,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": ".*.sw?\n.coverage\n*.dot\n*.egg-info\n*.orig\n*.png\n*.pyc\ndist\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 7.47265625,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.8779296875,
          "content": "# About _gprof2dot_\n\nThis is a Python script to convert the output from many profilers into a [dot graph](https://www.graphviz.org/doc/info/lang.html).\n\nIt can:\n\n  * read output from:\n    * [Linux perf](https://perf.wiki.kernel.org/)\n    * [Valgrind's callgrind tool](https://valgrind.org/docs/manual/cl-manual.html)\n    * [OProfile](https://oprofile.sourceforge.net/)\n    * [Sysprof](http://www.sysprof.com/)\n    * [Xperf](https://learn.microsoft.com/en-us/windows-hardware/test/wpt/)\n    * [VTune](https://www.intel.com/content/www/us/en/developer/tools/oneapi/vtune-profiler.html)\n    * [Very Sleepy](https://www.codersnotes.com/sleepy/)\n    * [Python profilers](https://docs.python.org/3/library/profile.html#profile-stats)\n    * [Java's HPROF](https://docs.oracle.com/javase/7/docs/technotes/samples/hprof.html)\n    * prof, [gprof](https://sourceware.org/binutils/docs/gprof/)\n    * [DTrace](https://en.wikipedia.org/wiki/DTrace)\n    * stackcollapse from [FlameGraph](https://github.com/brendangregg/FlameGraph)\n  * prune nodes and edges below a certain threshold;\n  * use an heuristic to propagate time inside mutually recursive functions;\n  * use color efficiently to draw attention to hot-spots;\n  * work on any platform where Python and Graphviz is available, i.e, virtually anywhere;\n  * compare two graphs with almost identical structures for the analysis of performance metrics such as time or function calls.\n\n**If you want an interactive viewer for the graphs generated by _gprof2dot_, check [xdot.py](https://github.com/jrfonseca/xdot.py).**\n\n\n# Status\n\n_gprof2dot_ currently fulfills my needs, and I have little or no time for its\nmaintenance.  So I'm afraid that any requested features are unlikely to be\nimplemented, and I might be slow processing issue reports or pull requests.\n\n[![Build Status](https://github.com/jrfonseca/gprof2dot/actions/workflows/build.yml/badge.svg?branch=master)](https://github.com/jrfonseca/gprof2dot/actions/workflows/build.yml)\n[![codecov](https://codecov.io/gh/jrfonseca/gprof2dot/branch/master/graph/badge.svg?token=pBvnAuazx0)](https://codecov.io/gh/jrfonseca/gprof2dot)\n\n\n# Example\n\nThis is the result from the [example data](https://linuxgazette.net/100/misc/vinayak/overall-profile.txt) in the [Linux Gazette article](https://linuxgazette.net/100/vinayak.html) with the default settings:\n\n![Sample](./sample.svg)\n\n# Requirements\n\n  * [Python](https://www.python.org/download/): known to work with version >=3.8; it will most likely _not_ work with earlier releases.\n  * [Graphviz](https://www.graphviz.org/Download.php): tested with version 2.26.3, but should work fine with other versions.\n\n## Windows users\n\n  * Download and install [Python for Windows](https://www.python.org/download/)\n  * Download and install [Graphviz for Windows](https://www.graphviz.org/Download_windows.php)\n\n## Linux users\n\nOn Debian/Ubuntu run:\n\n    apt-get install python3 graphviz\n\nOn RedHat/Fedora run\n\n    yum install python3 graphviz\n\n\n# Download\n\n  * [PyPI](https://pypi.python.org/pypi/gprof2dot/)\n\n        pip install gprof2dot\n\n  * [Standalone script](https://raw.githubusercontent.com/jrfonseca/gprof2dot/master/gprof2dot.py)\n\n  * [Git repository](https://github.com/jrfonseca/gprof2dot)\n\n\n# Documentation\n\n## Usage\n\n```\nUsage: \n\tgprof2dot.py [options] [file] ...\n\nOptions:\n  -h, --help            show this help message and exit\n  -o FILE, --output=FILE\n                        output filename [stdout]\n  -n PERCENTAGE, --node-thres=PERCENTAGE\n                        eliminate nodes below this threshold [default: 0.5]\n  -e PERCENTAGE, --edge-thres=PERCENTAGE\n                        eliminate edges below this threshold [default: 0.1]\n  -f FORMAT, --format=FORMAT\n                        profile format: axe, callgrind, collapse, dtrace,\n                        hprof, json, oprofile, perf, prof, pstats, sleepy,\n                        sysprof or xperf [default: prof]\n  --total=TOTALMETHOD   preferred method of calculating total time: callratios\n                        or callstacks (currently affects only perf format)\n                        [default: callratios]\n  -c THEME, --colormap=THEME\n                        color map: bw, color, gray, pink or print [default:\n                        color]\n  -s, --strip           strip function parameters, template parameters, and\n                        const modifiers from demangled C++ function names\n  --color-nodes-by-selftime\n                        color nodes by self time, rather than by total time\n                        (sum of self and descendants)\n  -w, --wrap            wrap function names\n  --show-samples        show function samples\n  --node-label=MEASURE  measurements to on show the node (can be specified\n                        multiple times): self-time, self-time-percentage,\n                        total-time or total-time-percentage [default: total-\n                        time-percentage, self-time-percentage]\n  --list-functions=LIST_FUNCTIONS\n                        list functions available for selection in -z or -l,\n                        requires selector argument ( use '+' to select all).\n                        Recall that the selector argument is used with\n                        Unix/Bash globbing/pattern matching, and that entries\n                        are formatted '<pkg>:<linenum>:<function>'. When\n                        argument starts with '%', a dump of all available\n                        information is performed for selected entries,  after\n                        removal of leading '%'.\n  -z ROOT, --root=ROOT  prune call graph to show only descendants of specified\n                        root function\n  -l LEAF, --leaf=LEAF  prune call graph to show only ancestors of specified\n                        leaf function\n  --depth=DEPTH         prune call graph to show only descendants or ancestors\n                        until specified depth\n  --skew=THEME_SKEW     skew the colorization curve.  Values < 1.0 give more\n                        variety to lower percentages.  Values > 1.0 give less\n                        variety to lower percentages\n  -p FILTER_PATHS, --path=FILTER_PATHS\n                       Filter all modules not in a specified path\n  --compare             Compare two graphs with almost identical structure. With this\n                        option two files should be provided.gprof2dot.py\n                        [options] --compare [file1] [file2] ...\n  --compare-tolerance=TOLERANCE\n                        Tolerance threshold for node difference\n                        (default=0.001%).If the difference is below this value\n                        the nodes are considered identical.\n  --compare-only-slower\n                        Display comparison only for function which are slower\n                        in second graph.\n  --compare-only-faster\n                        Display comparison only for function which are faster\n                        in second graph.\n  --compare-color-by-difference\n                        Color nodes based on the value of the difference.\n                        Nodes with the largest differences represent the hot\n                        spots.\n```\n\n## Examples\n\n### Linux perf\n\n    perf record -g -- /path/to/your/executable\n    perf script | c++filt | gprof2dot.py -f perf | dot -Tpng -o output.png\n\n### oprofile\n\n    opcontrol --callgraph=16\n    opcontrol --start\n    /path/to/your/executable arg1 arg2\n    opcontrol --stop\n    opcontrol --dump\n    opreport -cgf | gprof2dot.py -f oprofile | dot -Tpng -o output.png\n\n### xperf\n\nIf you're not familiar with xperf then read [this excellent article](https://blogs.msdn.com/b/pigscanfly/archive/2009/08/06/stack-walking-in-xperf.aspx) first. Then do:\n\n  * Start xperf as\n\n        xperf -on Latency -stackwalk profile\n\n  * Run your application.\n\n  * Save the data.\n`\n        xperf -d output.etl\n\n  * Start the visualizer:\n\n        xperf output.etl\n\n  * In _Trace_ menu, select _Load Symbols_. _Configure Symbol Paths_ if necessary.\n\n  * Select an area of interest on the _CPU sampling graph_, right-click, and select _Summary Table_.\n\n  * In the _Columns_ menu, make sure the _Stack_ column is enabled and visible.\n\n  * Right click on a row, choose _Export Full Table_, and save to _output.csv_.\n\n  * Then invoke gprof2dot as\n\n        gprof2dot.py -f xperf output.csv | dot -Tpng -o output.png\n\n### VTune Amplifier XE\n\n  * Collect profile data as (also can be done from GUI):\n\n        amplxe-cl -collect hotspots -result-dir output -- your-app\n\n  * Visualize profile data as:\n\n        amplxe-cl -report gprof-cc -result-dir output -format text -report-output output.txt\n        gprof2dot.py -f axe output.txt | dot -Tpng -o output.png\n\nSee also [Kirill Rogozhin's blog post](http://web.archive.org/web/20130506045856/http://software.intel.com:80/en-us/blogs/2013/04/05/making-visualized-call-graph-from-intel-vtune-amplifier-xe-results).\n\n### gprof\n\n    /path/to/your/executable arg1 arg2\n    gprof path/to/your/executable | gprof2dot.py | dot -Tpng -o output.png\n\n### python profile\n\n    python -m profile -o output.pstats path/to/your/script arg1 arg2\n    gprof2dot.py -f pstats output.pstats | dot -Tpng -o output.png\n\n### python cProfile (formerly known as lsprof)\n\n    python -m cProfile -o output.pstats path/to/your/script arg1 arg2\n    gprof2dot.py -f pstats output.pstats | dot -Tpng -o output.png\n\n### Java HPROF\n\n    java -agentlib:hprof=cpu=samples ...\n    gprof2dot.py -f hprof java.hprof.txt | dot -Tpng -o output.png\n\nSee [Russell Power's blog post](http://web.archive.org/web/20220122110828/http://rjp.io/2012/07/03/java-profiling/) for details.\n\n### DTrace\n\n    dtrace -x ustackframes=100 -n 'profile-97 /pid == 12345/ { @[ustack()] = count(); } tick-60s { exit(0); }' -o out.user_stacks\n    gprof2dot.py -f dtrace out.user_stacks | dot -Tpng -o output.png\n\n    # Notice: sometimes, the dtrace outputs format may be latin-1, and gprof2dot will fail to parse it.\n    # To solve this problem, you should use iconv to convert to UTF-8 explicitly.\n    # TODO: add an encoding flag to tell gprof2dot how to decode the profile file.\n    iconv -f ISO-8859-1 -t UTF-8 out.user_stacks | gprof2dot.py -f dtrace\n\n### stackcollapse\n\nBrendan Gregg's FlameGraph tool takes as its input a text file containing one\nline per sample. This format can be generated from various other inputs using\nthe `stackcollapse` scripts in the [FlameGraph\nrepository](https://github.com/brendangregg/FlameGraph). It can also be\ngenerated by tools such as [py-spy](https://github.com/benfred/py-spy).\n\nExample usage:\n\n  * Perf\n\n        perf record -g -- /path/to/your/executable\n        perf script | FlameGraph/stackcollapse-perf.pl > out.collapse\n        gprof2dot.py -f collapse out.collapse | dot -Tpng -o output.png\n\n  * Py-spy\n\n        py-spy record -p <pidfile> -f raw -o out.collapse\n        gprof2dot.py -f collapse out.collapse | dot -Tpng -o output.png\n\n## Compare Example\n\nThis image illustrates an example usage of the `--compare` and `--compare-color-by-difference` options.\n\n![Compare](./images/compare_diff.png)\n\nArrow pointing to the right indicate node where the function performed faster\nin the profile provided as the second one (second profile), while arrow\npointing to the left indicate node where the function was faster in the profile\nprovided as the first one (first profile).\n\n### Node\n\n    +-----------------------------+\n    |        function name          \\\n    | total time %  -/+ total_diff   \\\n    | ( self time % ) -/+ self_diff  /\n    | total calls1 / total calls2   /\n    +-----------------------------+\n\nWhere\n- `total time %` and `self time %` come from the first profile\n- `diff` is calculated as the absolute value of `time in the first profile - time in the second profile`.\n\n> **Note** The compare option has been tested for pstats, axe and callgrind profiles.\n\n## Output\n\nA node in the output graph represents a function and has the following layout:\n\n    +------------------------------+\n    |        function name         |\n    | total time % ( self time % ) |\n    |         total calls          |\n    +------------------------------+\n\nwhere:\n\n  * _total time %_ is the percentage of the running time spent in this function and all its children;\n  * _self time %_ is the percentage of the running time spent in this function alone;\n  * _total calls_ is the total number of times this function was called (including recursive calls).\n\nAn edge represents the calls between two functions and has the following layout:\n\n               total time %\n                  calls\n    parent --------------------> children\n\nWhere:\n\n  * _total time %_ is the percentage of the running time transferred from the children to this parent (if available);\n  * _calls_ is the number of calls the parent function called the children.\n\nNote that in recursive cycles, the _total time %_ in the node is the same for the whole functions in the cycle, and there is no _total time %_ figure in the edges inside the cycle, since such figure would make no sense.\n\nThe color of the nodes and edges varies according to the _total time %_ value. In the default _temperature-like_ color-map, functions where most time is spent (hot-spots) are marked as saturated red, and functions where little time is spent are marked as dark blue. Note that functions where negligible or no time is spent do not appear in the graph by default.\n\n## Listing functions\n\nThe flag `--list-functions` permits listing the function entries found in the `gprof` input.\nThis is intended as a tool to prepare for utilisations with the `--leaf` (`-l`) \nor `--root` (`-z`) flags.\n\n  ~~~\n  prof2dot.py -f pstats /tmp/myLog.profile  --list-functions \"test_segments:*:*\" \n    \n  test_segments:5:<module>,\n  test_segments:206:TestSegments,\n  test_segments:46:<lambda>\n  ~~~\n\n  - The selector argument is used with Unix/Bash globbing/pattern matching, in the same\n    fashion as performed by the `-l` and `-z` flags.\n\t  \n  - Entries are formatted '\\<pkg\\>:\\<linenum\\>:\\<function\\>'. \n\t\n  - When selector argument starts with '%', a dump of all available information is \n\tperformed for selected entries,   after removal of selector's leading '%'. If \n\tselector is \"+\" or \"*\", the full list of functions is printed.\n\n\n## Frequently Asked Questions\n\n### How can I generate a complete call graph?\n\nBy default `gprof2dot.py` generates a _partial_ call graph, excluding nodes and edges with little or no impact in the total computation time. If you want the full call graph then set a zero threshold for nodes and edges via the `-n` / `--node-thres`  and `-e` / `--edge-thres` options, as:\n\n    gprof2dot.py -n0 -e0\n\n### The node labels are too wide. How can I narrow them?\n\nThe node labels can get very wide when profiling C++ code, due to inclusion of scope, function arguments, and template arguments in demangled C++ function names.\n\nIf you do not need function and template arguments information, then pass the `-s` / `--strip` option to strip them.\n\nIf you want to keep all that information, or if the labels are still too wide, then you can pass the `-w` / `--wrap`, to wrap the labels. Note that because `dot` does not wrap labels automatically the label margins will not be perfectly aligned.\n\n### Why there is no output, or it is all in the same color?\n\nLikely, the total execution time is too short, so there is not enough precision in the profile to determine where time is being spent.\n\nYou can still force displaying the whole graph by setting a zero threshold for nodes and edges via the `-n` / `--node-thres`  and `-e` / `--edge-thres` options, as:\n\n    gprof2dot.py -n0 -e0\n\nBut to get meaningful results you will need to find a way to run the program for a longer time period (aggregate results from multiple runs).\n\n### Why don't the percentages add up?\n\nYou likely have an execution time too short, causing the round-off errors to be large.\n\nSee question above for ways to increase execution time.\n\n### Which options should I pass to gcc when compiling for profiling?\n\nOptions which are _essential_ to produce suitable results are:\n\n  * **`-g`** : produce debugging information\n  * **`-fno-omit-frame-pointer`** : use the frame pointer (frame pointer usage is disabled by default in some architectures like x86\\_64 and for some optimization levels; it is impossible to walk the call stack without it)\n\n_If_ you're using gprof you will also need `-pg` option, but nowadays you can get much better results with other profiling tools, most of which require no special code instrumentation when compiling.\n\nYou want the code you are profiling to be as close as possible as the code that you will\nbe releasing. So you _should_ include all options that you use in your release code, typically:\n\n  * **`-O2`** : optimizations that do not involve a space-speed tradeoff\n  * **`-DNDEBUG`** : disable debugging code in the standard library (such as the assert macro)\n\nHowever many of the optimizations performed by gcc interfere with the accuracy/granularity of the profiling results.  You _should_ pass these options to disable those particular optimizations:\n\n  * **`-fno-inline-functions`** : do not inline functions into their parents (otherwise the time spent on these functions will be attributed to the caller)\n  * **`-fno-inline-functions-called-once`** : similar to above\n  * **`-fno-optimize-sibling-calls`** : do not optimize sibling and tail recursive calls (otherwise tail calls may be attributed to the parent function)\n\nIf the granularity is still too low, you _may_ pass these options to achieve finer granularity:\n\n  * **`-fno-default-inline`** : do not make member functions inline by default merely because they are defined inside the class scope\n  * **`-fno-inline`** : do not pay attention to the inline keyword\nNote however that with these last options the timings of functions called many times will be distorted due to the function call overhead. This is particularly true for typical C++ code which _expects_ that these optimizations to be done for decent performance.\n\nSee the [full list of gcc optimization options](https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html) for more information.\n\n# Links\n\nSee the [wiki](https://github.com/jrfonseca/gprof2dot/wiki) for external resources, including complementary/alternative tools.\n"
        },
        {
          "name": "gprof2dot.py",
          "type": "blob",
          "size": 126.7529296875,
          "content": "#!/usr/bin/env python3\n#\n# Copyright 2008-2023 Jose Fonseca\n#\n# This program is free software: you can redistribute it and/or modify it\n# under the terms of the GNU Lesser General Public License as published\n# by the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n\"\"\"Generate a dot graph from the output of several profilers.\"\"\"\n\n__author__ = \"Jose Fonseca et al\"\n\n\nimport sys\nimport math\nimport os.path\nimport re\nimport textwrap\nimport optparse\nimport xml.parsers.expat\nimport collections\nimport locale\nimport json\nimport fnmatch\nimport codecs\nimport io\nimport hashlib\n\nassert sys.version_info[0] >= 3\n\n\n########################################################################\n# Model\n\n\nMULTIPLICATION_SIGN = chr(0xd7)\ntimeFormat = \"%.7g\"\n\n\ndef times(x):\n    return \"%u%s\" % (x, MULTIPLICATION_SIGN)\n\ndef percentage(p):\n    return \"%.02f%%\" % (p*100.0,)\n\ndef fmttime(t):\n    return timeFormat % t\n\ndef add(a, b):\n    return a + b\n\ndef fail(a, b):\n    assert False\n\n# To enhance readability, labels are rounded to the number of decimal\n# places corresponding to the tolerance value.\ndef round_difference(difference, tolerance):\n    n = -math.floor(math.log10(tolerance))\n    return round(difference, n)\n\n\ndef rescale_difference(x, min_val, max_val):\n    return (x - min_val) / (max_val - min_val)\n\n\ndef min_max_difference(profile1, profile2):\n    f1_events = [f1[TOTAL_TIME_RATIO] for _, f1 in sorted_iteritems(profile1.functions)]\n    f2_events = [f2[TOTAL_TIME_RATIO] for _, f2 in sorted_iteritems(profile2.functions)]\n    differences = []\n    for i in range(len(f1_events)):\n        try:\n            differences.append(abs(f1_events[i] - f2_events[i]) * 100)\n        except IndexError:\n            differences.append(0)\n\n    return min(differences), max(differences)\n\n\ntol = 2 ** -23\n\ndef ratio(numerator, denominator):\n    try:\n        ratio = float(numerator)/float(denominator)\n    except ZeroDivisionError:\n        # 0/0 is undefined, but 1.0 yields more useful results\n        return 1.0\n    if ratio < 0.0:\n        if ratio < -tol:\n            sys.stderr.write('warning: negative ratio (%s/%s)\\n' % (numerator, denominator))\n        return 0.0\n    if ratio > 1.0:\n        if ratio > 1.0 + tol:\n            sys.stderr.write('warning: ratio greater than one (%s/%s)\\n' % (numerator, denominator))\n        return 1.0\n    return ratio\n\n\nclass UndefinedEvent(Exception):\n    \"\"\"Raised when attempting to get an event which is undefined.\"\"\"\n\n    def __init__(self, event):\n        Exception.__init__(self)\n        self.event = event\n\n    def __str__(self):\n        return 'unspecified event %s' % self.event.name\n\n\nclass Event:\n    \"\"\"Describe a kind of event, and its basic operations.\"\"\"\n\n    def __init__(self, name, null, aggregator, formatter = str):\n        self.name = name\n        self._null = null\n        self._aggregator = aggregator\n        self._formatter = formatter\n\n    def __repr__(self):\n        return self.name\n\n    def null(self):\n        return self._null\n\n    def aggregate(self, val1, val2):\n        \"\"\"Aggregate two event values.\"\"\"\n        assert val1 is not None\n        assert val2 is not None\n        return self._aggregator(val1, val2)\n\n    def format(self, val):\n        \"\"\"Format an event value.\"\"\"\n        assert val is not None\n        return self._formatter(val)\n\n\nCALLS = Event(\"Calls\", 0, add, times)\nSAMPLES = Event(\"Samples\", 0, add, times)\nSAMPLES2 = Event(\"Samples\", 0, add, times)\n\n# Count of samples where a given function was either executing or on the stack.\n# This is used to calculate the total time ratio according to the\n# straightforward method described in Mike Dunlavey's answer to\n# stackoverflow.com/questions/1777556/alternatives-to-gprof, item 4 (the myth\n# \"that recursion is a tricky confusing issue\"), last edited 2012-08-30: it's\n# just the ratio of TOTAL_SAMPLES over the number of samples in the profile.\n#\n# Used only when totalMethod == callstacks\nTOTAL_SAMPLES = Event(\"Samples\", 0, add, times)\n\nTIME = Event(\"Time\", 0.0, add, lambda x: '(' + fmttime(x) + ')')\nTIME_RATIO = Event(\"Time ratio\", 0.0, add, lambda x: '(' + percentage(x) + ')')\nTOTAL_TIME = Event(\"Total time\", 0.0, fail, fmttime)\nTOTAL_TIME_RATIO = Event(\"Total time ratio\", 0.0, fail, percentage)\n\nlabels = {\n    'self-time': TIME,\n    'self-time-percentage': TIME_RATIO,\n    'total-time': TOTAL_TIME,\n    'total-time-percentage': TOTAL_TIME_RATIO,\n}\ndefaultLabelNames = ['total-time-percentage', 'self-time-percentage']\n\ntotalMethod = 'callratios'\n\n\nclass Object:\n    \"\"\"Base class for all objects in profile which can store events.\"\"\"\n\n    def __init__(self, events=None):\n        if events is None:\n            self.events = {}\n        else:\n            self.events = events\n\n    def __lt__(self, other):\n        return id(self) < id(other)\n\n    def __contains__(self, event):\n        return event in self.events\n\n    def __getitem__(self, event):\n        try:\n            return self.events[event]\n        except KeyError:\n            raise UndefinedEvent(event)\n\n    def __setitem__(self, event, value):\n        if value is None:\n            if event in self.events:\n                del self.events[event]\n        else:\n            self.events[event] = value\n\n\nclass Call(Object):\n    \"\"\"A call between functions.\n\n    There should be at most one call object for every pair of functions.\n    \"\"\"\n\n    def __init__(self, callee_id):\n        Object.__init__(self)\n        self.callee_id = callee_id\n        self.ratio = None\n        self.weight = None\n\n\nclass Function(Object):\n    \"\"\"A function.\"\"\"\n\n    def __init__(self, id, name):\n        Object.__init__(self)\n        self.id = id\n        self.name = name\n        self.module = None\n        self.process = None\n        self.calls = {}\n        self.called = None\n        self.weight = None\n        self.cycle = None\n        self.filename = None\n\n    def add_call(self, call):\n        if call.callee_id in self.calls:\n            sys.stderr.write('warning: overwriting call from function %s to %s\\n' % (str(self.id), str(call.callee_id)))\n        self.calls[call.callee_id] = call\n\n    def get_call(self, callee_id):\n        if not callee_id in self.calls:\n            call = Call(callee_id)\n            call[SAMPLES] = 0\n            call[SAMPLES2] = 0\n            call[CALLS] = 0\n            self.calls[callee_id] = call\n        return self.calls[callee_id]\n\n    _parenthesis_re = re.compile(r'\\([^()]*\\)')\n    _angles_re = re.compile(r'<[^<>]*>')\n    _const_re = re.compile(r'\\s+const$')\n\n    def stripped_name(self):\n        \"\"\"Remove extraneous information from C++ demangled function names.\"\"\"\n\n        name = self.name\n\n        # Strip function parameters from name by recursively removing paired parenthesis\n        while True:\n            name, n = self._parenthesis_re.subn('', name)\n            if not n:\n                break\n\n        # Strip const qualifier\n        name = self._const_re.sub('', name)\n\n        # Strip template parameters from name by recursively removing paired angles\n        while True:\n            name, n = self._angles_re.subn('', name)\n            if not n:\n                break\n\n        return name\n\n    # TODO: write utility functions\n\n    def __repr__(self):\n        return self.name\n\n    def dump(self, sep1=\",\\n\\t\", sep2=\":=\", sep3=\"\\n\"):\n        \"\"\" Returns as a string all information available in this Function object\n            separators sep1:between entries\n                       sep2:between attribute name and value,\n                       sep3: inserted at end\n        \"\"\"\n        return sep1.join(sep2.join([k,str(v)]) for (k,v) in sorted(self.__dict__.items())) + sep3\n\n\nclass Cycle(Object):\n    \"\"\"A cycle made from recursive function calls.\"\"\"\n\n    def __init__(self):\n        Object.__init__(self)\n        self.functions = set()\n\n    def add_function(self, function):\n        assert function not in self.functions\n        self.functions.add(function)\n        if function.cycle is not None:\n            for other in function.cycle.functions:\n                if function not in self.functions:\n                    self.add_function(other)\n        function.cycle = self\n\n\nclass Profile(Object):\n    \"\"\"The whole profile.\"\"\"\n\n    def __init__(self):\n        Object.__init__(self)\n        self.functions = {}\n        self.cycles = []\n\n    def add_function(self, function):\n        if function.id in self.functions:\n            sys.stderr.write('warning: overwriting function %s (id %s)\\n' % (function.name, str(function.id)))\n        self.functions[function.id] = function\n\n    def add_cycle(self, cycle):\n        self.cycles.append(cycle)\n\n    def validate(self):\n        \"\"\"Validate the edges.\"\"\"\n\n        for function in self.functions.values():\n            for callee_id in list(function.calls.keys()):\n                assert function.calls[callee_id].callee_id == callee_id\n                if callee_id not in self.functions:\n                    sys.stderr.write('warning: call to undefined function %s from function %s\\n' % (str(callee_id), function.name))\n                    del function.calls[callee_id]\n\n    def find_cycles(self):\n        \"\"\"Find cycles using Tarjan's strongly connected components algorithm.\"\"\"\n\n        # Apply the Tarjan's algorithm successively until all functions are visited\n        stack = []\n        data = {}\n        order = 0\n        for function in self.functions.values():\n            order = self._tarjan(function, order, stack, data)\n        cycles = []\n        for function in self.functions.values():\n            if function.cycle is not None and function.cycle not in cycles:\n                cycles.append(function.cycle)\n        self.cycles = cycles\n        if 0:\n            for cycle in cycles:\n                sys.stderr.write(\"Cycle:\\n\")\n                for member in cycle.functions:\n                    sys.stderr.write(\"\\tFunction %s\\n\" % member.name)\n\n    def prune_root(self, roots, depth=-1):\n        visited = set()\n        frontier = set([(root_node, depth) for root_node in roots])\n        while len(frontier) > 0:\n            node, node_depth = frontier.pop()\n            visited.add(node)\n            if node_depth == 0:\n                continue\n            f = self.functions[node]\n            newNodes = set(f.calls.keys()) - visited\n            frontier = frontier.union({(new_node, node_depth - 1) for new_node in newNodes})\n        subtreeFunctions = {}\n        for n in visited:\n            f = self.functions[n]\n            newCalls = {}\n            for c in f.calls.keys():\n                if c in visited:\n                    newCalls[c] = f.calls[c]\n            f.calls = newCalls\n            subtreeFunctions[n] = f\n        self.functions = subtreeFunctions\n\n    def prune_leaf(self, leafs, depth=-1):\n        edgesUp = collections.defaultdict(set)\n        for f in self.functions.keys():\n            for n in self.functions[f].calls.keys():\n                edgesUp[n].add(f)\n        # build the tree up\n        visited = set()\n        frontier = set([(leaf_node, depth) for leaf_node in leafs])\n        while len(frontier) > 0:\n            node, node_depth = frontier.pop()\n            visited.add(node)\n            if node_depth == 0:\n                continue\n            newNodes = edgesUp[node] - visited\n            frontier = frontier.union({(new_node, node_depth - 1) for new_node in newNodes})\n        downTree = set(self.functions.keys())\n        upTree = visited\n        path = downTree.intersection(upTree)\n        pathFunctions = {}\n        for n in path:\n            f = self.functions[n]\n            newCalls = {}\n            for c in f.calls.keys():\n                if c in path:\n                    newCalls[c] = f.calls[c]\n            f.calls = newCalls\n            pathFunctions[n] = f\n        self.functions = pathFunctions\n\n    def getFunctionIds(self, funcName):\n        function_names = {v.name: k for (k, v) in self.functions.items()}\n        return [function_names[name] for name in fnmatch.filter(function_names.keys(), funcName)]\n\n    def getFunctionId(self, funcName):\n        for f in self.functions:\n            if self.functions[f].name == funcName:\n                return f\n        return False\n\n    def printFunctionIds(self, selector=None, file=sys.stderr):\n        \"\"\" Print to file function entries selected by fnmatch.fnmatch like in\n            method getFunctionIds, with following extensions:\n             - selector starts with \"%\": dump all information available\n             - selector is '+' or '-': select all function entries\n        \"\"\"\n        if selector is None or selector in (\"+\", \"*\"):\n            v = \",\\n\".join((\"%s:\\t%s\" % (kf,self.functions[kf].name)\n                            for kf in self.functions.keys()))\n        else:\n            if selector[0]==\"%\":\n                selector=selector[1:]\n                function_info={k:v for (k,v)\n                               in self.functions.items()\n                               if fnmatch.fnmatch(v.name,selector)}\n                v = \",\\n\".join( (\"%s\\t({k})\\t(%s)::\\n\\t%s\" % (v.name,type(v),v.dump())\n                                 for (k,v) in function_info.items()\n                                  ))\n\n            else:\n                function_names = (v.name for v in self.functions.values())\n                v = \",\\n\".join( ( nm for nm in fnmatch.filter(function_names,selector )))\n\n        file.write(v+\"\\n\")\n        file.flush()\n\n    class _TarjanData:\n        def __init__(self, order):\n            self.order = order\n            self.lowlink = order\n            self.onstack = False\n\n    def _tarjan(self, function, order, stack, data):\n        \"\"\"Tarjan's strongly connected components algorithm.\n\n        See also:\n        - http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm\n        \"\"\"\n\n        try:\n            func_data = data[function.id]\n            return order\n        except KeyError:\n            func_data = self._TarjanData(order)\n            data[function.id] = func_data\n        order += 1\n        pos = len(stack)\n        stack.append(function)\n        func_data.onstack = True\n        for call in function.calls.values():\n            try:\n                callee_data = data[call.callee_id]\n                if callee_data.onstack:\n                    func_data.lowlink = min(func_data.lowlink, callee_data.order)\n            except KeyError:\n                callee = self.functions[call.callee_id]\n                order = self._tarjan(callee, order, stack, data)\n                callee_data = data[call.callee_id]\n                func_data.lowlink = min(func_data.lowlink, callee_data.lowlink)\n        if func_data.lowlink == func_data.order:\n            # Strongly connected component found\n            members = stack[pos:]\n            del stack[pos:]\n            if len(members) > 1:\n                cycle = Cycle()\n                for member in members:\n                    cycle.add_function(member)\n                    data[member.id].onstack = False\n            else:\n                for member in members:\n                    data[member.id].onstack = False\n        return order\n\n    def call_ratios(self, event):\n        # Aggregate for incoming calls\n        cycle_totals = {}\n        for cycle in self.cycles:\n            cycle_totals[cycle] = 0.0\n        function_totals = {}\n        for function in self.functions.values():\n            function_totals[function] = 0.0\n\n        # Pass 1:  function_total gets the sum of call[event] for all\n        #          incoming arrows.  Same for cycle_total for all arrows\n        #          that are coming into the *cycle* but are not part of it.\n        for function in self.functions.values():\n            for call in function.calls.values():\n                if call.callee_id != function.id:\n                    callee = self.functions[call.callee_id]\n                    if event in call.events:\n                        function_totals[callee] += call[event]\n                        if callee.cycle is not None and callee.cycle is not function.cycle:\n                            cycle_totals[callee.cycle] += call[event]\n                    else:\n                        sys.stderr.write(\"call_ratios: No data for \" + function.name + \" call to \" + callee.name + \"\\n\")\n\n        # Pass 2:  Compute the ratios.  Each call[event] is scaled by the\n        #          function_total of the callee.  Calls into cycles use the\n        #          cycle_total, but not calls within cycles.\n        for function in self.functions.values():\n            for call in function.calls.values():\n                assert call.ratio is None\n                if call.callee_id != function.id:\n                    callee = self.functions[call.callee_id]\n                    if event in call.events:\n                        if callee.cycle is not None and callee.cycle is not function.cycle:\n                            total = cycle_totals[callee.cycle]\n                        else:\n                            total = function_totals[callee]\n                        call.ratio = ratio(call[event], total)\n                    else:\n                        # Warnings here would only repeat those issued above.\n                        call.ratio = 0.0\n\n    def integrate(self, outevent, inevent):\n        \"\"\"Propagate function time ratio along the function calls.\n\n        Must be called after finding the cycles.\n\n        See also:\n        - http://citeseer.ist.psu.edu/graham82gprof.html\n        \"\"\"\n\n        # Sanity checking\n        assert outevent not in self\n        for function in self.functions.values():\n            assert outevent not in function\n            assert inevent in function\n            for call in function.calls.values():\n                assert outevent not in call\n                if call.callee_id != function.id:\n                    assert call.ratio is not None\n\n        # Aggregate the input for each cycle\n        for cycle in self.cycles:\n            total = inevent.null()\n            for function in self.functions.values():\n                total = inevent.aggregate(total, function[inevent])\n            self[inevent] = total\n\n        # Integrate along the edges\n        total = inevent.null()\n        for function in self.functions.values():\n            total = inevent.aggregate(total, function[inevent])\n            self._integrate_function(function, outevent, inevent)\n        self[outevent] = total\n\n    def _integrate_function(self, function, outevent, inevent):\n        if function.cycle is not None:\n            return self._integrate_cycle(function.cycle, outevent, inevent)\n        else:\n            if outevent not in function:\n                total = function[inevent]\n                for call in function.calls.values():\n                    if call.callee_id != function.id:\n                        total += self._integrate_call(call, outevent, inevent)\n                function[outevent] = total\n            return function[outevent]\n\n    def _integrate_call(self, call, outevent, inevent):\n        assert outevent not in call\n        assert call.ratio is not None\n        callee = self.functions[call.callee_id]\n        subtotal = call.ratio *self._integrate_function(callee, outevent, inevent)\n        call[outevent] = subtotal\n        return subtotal\n\n    def _integrate_cycle(self, cycle, outevent, inevent):\n        if outevent not in cycle:\n\n            # Compute the outevent for the whole cycle\n            total = inevent.null()\n            for member in cycle.functions:\n                subtotal = member[inevent]\n                for call in member.calls.values():\n                    callee = self.functions[call.callee_id]\n                    if callee.cycle is not cycle:\n                        subtotal += self._integrate_call(call, outevent, inevent)\n                total += subtotal\n            cycle[outevent] = total\n\n            # Compute the time propagated to callers of this cycle\n            callees = {}\n            for function in self.functions.values():\n                if function.cycle is not cycle:\n                    for call in function.calls.values():\n                        callee = self.functions[call.callee_id]\n                        if callee.cycle is cycle:\n                            try:\n                                callees[callee] += call.ratio\n                            except KeyError:\n                                callees[callee] = call.ratio\n\n            for member in cycle.functions:\n                member[outevent] = outevent.null()\n\n            for callee, call_ratio in callees.items():\n                ranks = {}\n                call_ratios = {}\n                partials = {}\n                self._rank_cycle_function(cycle, callee, ranks)\n                self._call_ratios_cycle(cycle, callee, ranks, call_ratios, set())\n                partial = self._integrate_cycle_function(cycle, callee, call_ratio, partials, ranks, call_ratios, outevent, inevent)\n\n                # Ensure `partial == max(partials.values())`, but with round-off tolerance\n                max_partial = max(partials.values())\n                assert abs(partial - max_partial) <= 1e-7*max_partial\n\n                assert abs(call_ratio*total - partial) <= 0.001*call_ratio*total\n\n        return cycle[outevent]\n\n    def _rank_cycle_function(self, cycle, function, ranks):\n        \"\"\"Dijkstra's shortest paths algorithm.\n\n        See also:\n        - http://en.wikipedia.org/wiki/Dijkstra's_algorithm\n        \"\"\"\n\n        import heapq\n        Q = []\n        Qd = {}\n        p = {}\n        visited = set([function])\n\n        ranks[function] = 0\n        for call in function.calls.values():\n            if call.callee_id != function.id:\n                callee = self.functions[call.callee_id]\n                if callee.cycle is cycle:\n                    ranks[callee] = 1\n                    item = [ranks[callee], function, callee]\n                    heapq.heappush(Q, item)\n                    Qd[callee] = item\n\n        while Q:\n            cost, parent, member = heapq.heappop(Q)\n            if member not in visited:\n                p[member]= parent\n                visited.add(member)\n                for call in member.calls.values():\n                    if call.callee_id != member.id:\n                        callee = self.functions[call.callee_id]\n                        if callee.cycle is cycle:\n                            member_rank = ranks[member]\n                            rank = ranks.get(callee)\n                            if rank is not None:\n                                if rank > 1 + member_rank:\n                                    rank = 1 + member_rank\n                                    ranks[callee] = rank\n                                    Qd_callee = Qd[callee]\n                                    Qd_callee[0] = rank\n                                    Qd_callee[1] = member\n                                    heapq._siftdown(Q, 0, Q.index(Qd_callee))\n                            else:\n                                rank = 1 + member_rank\n                                ranks[callee] = rank\n                                item = [rank, member, callee]\n                                heapq.heappush(Q, item)\n                                Qd[callee] = item\n\n    def _call_ratios_cycle(self, cycle, function, ranks, call_ratios, visited):\n        if function not in visited:\n            visited.add(function)\n            for call in function.calls.values():\n                if call.callee_id != function.id:\n                    callee = self.functions[call.callee_id]\n                    if callee.cycle is cycle:\n                        if ranks[callee] > ranks[function]:\n                            call_ratios[callee] = call_ratios.get(callee, 0.0) + call.ratio\n                            self._call_ratios_cycle(cycle, callee, ranks, call_ratios, visited)\n\n    def _integrate_cycle_function(self, cycle, function, partial_ratio, partials, ranks, call_ratios, outevent, inevent):\n        if function not in partials:\n            partial = partial_ratio*function[inevent]\n            for call in function.calls.values():\n                if call.callee_id != function.id:\n                    callee = self.functions[call.callee_id]\n                    if callee.cycle is not cycle:\n                        assert outevent in call\n                        partial += partial_ratio*call[outevent]\n                    else:\n                        if ranks[callee] > ranks[function]:\n                            callee_partial = self._integrate_cycle_function(cycle, callee, partial_ratio, partials, ranks, call_ratios, outevent, inevent)\n                            call_ratio = ratio(call.ratio, call_ratios[callee])\n                            call_partial = call_ratio*callee_partial\n                            try:\n                                call[outevent] += call_partial\n                            except UndefinedEvent:\n                                call[outevent] = call_partial\n                            partial += call_partial\n            partials[function] = partial\n            try:\n                function[outevent] += partial\n            except UndefinedEvent:\n                function[outevent] = partial\n        return partials[function]\n\n    def aggregate(self, event):\n        \"\"\"Aggregate an event for the whole profile.\"\"\"\n\n        total = event.null()\n        for function in self.functions.values():\n            try:\n                total = event.aggregate(total, function[event])\n            except UndefinedEvent:\n                return\n        self[event] = total\n\n    def ratio(self, outevent, inevent):\n        assert outevent not in self\n        assert inevent in self\n        for function in self.functions.values():\n            assert outevent not in function\n            assert inevent in function\n            function[outevent] = ratio(function[inevent], self[inevent])\n            for call in function.calls.values():\n                assert outevent not in call\n                if inevent in call:\n                    call[outevent] = ratio(call[inevent], self[inevent])\n        self[outevent] = 1.0\n\n    def prune(self, node_thres, edge_thres, paths, color_nodes_by_selftime):\n        \"\"\"Prune the profile\"\"\"\n\n        # compute the prune ratios\n        for function in self.functions.values():\n            try:\n                function.weight = function[TOTAL_TIME_RATIO]\n            except UndefinedEvent:\n                pass\n\n            for call in function.calls.values():\n                callee = self.functions[call.callee_id]\n\n                if TOTAL_TIME_RATIO in call:\n                    # handle exact cases first\n                    call.weight = call[TOTAL_TIME_RATIO]\n                else:\n                    try:\n                        # make a safe estimate\n                        call.weight = min(function[TOTAL_TIME_RATIO], callee[TOTAL_TIME_RATIO])\n                    except UndefinedEvent:\n                        pass\n\n        # prune the nodes\n        for function_id in list(self.functions.keys()):\n            function = self.functions[function_id]\n            if function.weight is not None:\n                if function.weight < node_thres:\n                    del self.functions[function_id]\n\n        # prune file paths\n        for function_id in list(self.functions.keys()):\n            function = self.functions[function_id]\n            if paths and function.filename and not any(function.filename.startswith(path) for path in paths):\n                del self.functions[function_id]\n            elif paths and function.module and not any((function.module.find(path)>-1) for path in paths):\n                del self.functions[function_id]\n\n        # prune the edges\n        for function in self.functions.values():\n            for callee_id in list(function.calls.keys()):\n                call = function.calls[callee_id]\n                if callee_id not in self.functions or call.weight is not None and call.weight < edge_thres:\n                    del function.calls[callee_id]\n\n        if color_nodes_by_selftime:\n            weights = []\n            for function in self.functions.values():\n                try:\n                    weights.append(function[TIME_RATIO])\n                except UndefinedEvent:\n                    pass\n            max_ratio = max(weights or [1])\n\n            # apply rescaled weights for coloriung\n            for function in self.functions.values():\n                try:\n                    function.weight = function[TIME_RATIO] / max_ratio\n                except (ZeroDivisionError, UndefinedEvent):\n                    pass\n\n    def dump(self):\n        for function in self.functions.values():\n            sys.stderr.write('Function %s:\\n' % (function.name,))\n            self._dump_events(function.events)\n            for call in function.calls.values():\n                callee = self.functions[call.callee_id]\n                sys.stderr.write('  Call %s:\\n' % (callee.name,))\n                self._dump_events(call.events)\n        for cycle in self.cycles:\n            sys.stderr.write('Cycle:\\n')\n            self._dump_events(cycle.events)\n            for function in cycle.functions:\n                sys.stderr.write('  Function %s\\n' % (function.name,))\n\n    def _dump_events(self, events):\n        for event, value in events.items():\n            sys.stderr.write('    %s: %s\\n' % (event.name, event.format(value)))\n\n\n\n########################################################################\n# Parsers\n\n\nclass Struct:\n    \"\"\"Masquerade a dictionary with a structure-like behavior.\"\"\"\n\n    def __init__(self, attrs = None):\n        if attrs is None:\n            attrs = {}\n        self.__dict__['_attrs'] = attrs\n\n    def __getattr__(self, name):\n        try:\n            return self._attrs[name]\n        except KeyError:\n            raise AttributeError(name)\n\n    def __setattr__(self, name, value):\n        self._attrs[name] = value\n\n    def __str__(self):\n        return str(self._attrs)\n\n    def __repr__(self):\n        return repr(self._attrs)\n\n\nclass ParseError(Exception):\n    \"\"\"Raised when parsing to signal mismatches.\"\"\"\n\n    def __init__(self, msg, line):\n        Exception.__init__(self)\n        self.msg = msg\n        # TODO: store more source line information\n        self.line = line\n\n    def __str__(self):\n        return '%s: %r' % (self.msg, self.line)\n\n\nclass Parser:\n    \"\"\"Parser interface.\"\"\"\n\n    stdinInput = True\n    multipleInput = False\n\n    def __init__(self):\n        pass\n\n    def parse(self):\n        raise NotImplementedError\n\n\nclass JsonParser(Parser):\n    \"\"\"Parser for a custom JSON representation of profile data.\n\n    See schema.json for details.\n    \"\"\"\n\n\n    def __init__(self, stream):\n        Parser.__init__(self)\n        self.stream = stream\n\n    def parse(self):\n\n        obj = json.load(self.stream)\n\n        assert obj['version'] == 0\n\n        profile = Profile()\n        profile[SAMPLES] = 0\n\n        fns = obj['functions']\n\n        for functionIndex in range(len(fns)):\n            fn = fns[functionIndex]\n            function = Function(functionIndex, fn['name'])\n            try:\n                function.module = fn['module']\n            except KeyError:\n                pass\n            try:\n                function.process = fn['process']\n            except KeyError:\n                pass\n            function[SAMPLES] = 0\n            function.called = 0\n            profile.add_function(function)\n\n        for event in obj['events']:\n            callchain = []\n\n            for functionIndex in event['callchain']:\n                function = profile.functions[functionIndex]\n                callchain.append(function)\n\n            # increment the call count of the first in the callchain\n            function = profile.functions[event['callchain'][0]]\n            function.called = function.called + 1\n\n            cost = event['cost'][0]\n\n            callee = callchain[0]\n            callee[SAMPLES] += cost\n            profile[SAMPLES] += cost\n\n            for caller in callchain[1:]:\n                try:\n                    call = caller.calls[callee.id]\n                except KeyError:\n                    call = Call(callee.id)\n                    call[SAMPLES2] = cost\n                    caller.add_call(call)\n                else:\n                    call[SAMPLES2] += cost\n\n                callee = caller\n\n        if False:\n            profile.dump()\n\n        # compute derived data\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return profile\n\n\nclass LineParser(Parser):\n    \"\"\"Base class for parsers that read line-based formats.\"\"\"\n\n    def __init__(self, stream):\n        Parser.__init__(self)\n        self._stream = stream\n        self.__line = None\n        self.__eof = False\n        self.line_no = 0\n\n    def readline(self):\n        line = self._stream.readline()\n        if not line:\n            self.__line = ''\n            self.__eof = True\n        else:\n            self.line_no += 1\n        line = line.rstrip('\\r\\n')\n        self.__line = line\n\n    def lookahead(self):\n        assert self.__line is not None\n        return self.__line\n\n    def consume(self):\n        assert self.__line is not None\n        line = self.__line\n        self.readline()\n        return line\n\n    def eof(self):\n        assert self.__line is not None\n        return self.__eof\n\n\nXML_ELEMENT_START, XML_ELEMENT_END, XML_CHARACTER_DATA, XML_EOF = range(4)\n\n\nclass XmlToken:\n\n    def __init__(self, type, name_or_data, attrs = None, line = None, column = None):\n        assert type in (XML_ELEMENT_START, XML_ELEMENT_END, XML_CHARACTER_DATA, XML_EOF)\n        self.type = type\n        self.name_or_data = name_or_data\n        self.attrs = attrs\n        self.line = line\n        self.column = column\n\n    def __str__(self):\n        if self.type == XML_ELEMENT_START:\n            return '<' + self.name_or_data + ' ...>'\n        if self.type == XML_ELEMENT_END:\n            return '</' + self.name_or_data + '>'\n        if self.type == XML_CHARACTER_DATA:\n            return self.name_or_data\n        if self.type == XML_EOF:\n            return 'end of file'\n        assert 0\n\n\nclass XmlTokenizer:\n    \"\"\"Expat based XML tokenizer.\"\"\"\n\n    def __init__(self, fp, skip_ws = True):\n        self.fp = fp\n        self.tokens = []\n        self.index = 0\n        self.final = False\n        self.skip_ws = skip_ws\n\n        self.character_pos = 0, 0\n        self.character_data = ''\n\n        self.parser = xml.parsers.expat.ParserCreate()\n        self.parser.StartElementHandler  = self.handle_element_start\n        self.parser.EndElementHandler    = self.handle_element_end\n        self.parser.CharacterDataHandler = self.handle_character_data\n\n    def handle_element_start(self, name, attributes):\n        self.finish_character_data()\n        line, column = self.pos()\n        token = XmlToken(XML_ELEMENT_START, name, attributes, line, column)\n        self.tokens.append(token)\n\n    def handle_element_end(self, name):\n        self.finish_character_data()\n        line, column = self.pos()\n        token = XmlToken(XML_ELEMENT_END, name, None, line, column)\n        self.tokens.append(token)\n\n    def handle_character_data(self, data):\n        if not self.character_data:\n            self.character_pos = self.pos()\n        self.character_data += data\n\n    def finish_character_data(self):\n        if self.character_data:\n            if not self.skip_ws or not self.character_data.isspace():\n                line, column = self.character_pos\n                token = XmlToken(XML_CHARACTER_DATA, self.character_data, None, line, column)\n                self.tokens.append(token)\n            self.character_data = ''\n\n    def next(self):\n        size = 16*1024\n        while self.index >= len(self.tokens) and not self.final:\n            self.tokens = []\n            self.index = 0\n            data = self.fp.read(size)\n            self.final = len(data) < size\n            self.parser.Parse(data, self.final)\n        if self.index >= len(self.tokens):\n            line, column = self.pos()\n            token = XmlToken(XML_EOF, None, None, line, column)\n        else:\n            token = self.tokens[self.index]\n            self.index += 1\n        return token\n\n    def pos(self):\n        return self.parser.CurrentLineNumber, self.parser.CurrentColumnNumber\n\n\nclass XmlTokenMismatch(Exception):\n\n    def __init__(self, expected, found):\n        Exception.__init__(self)\n        self.expected = expected\n        self.found = found\n\n    def __str__(self):\n        return '%u:%u: %s expected, %s found' % (self.found.line, self.found.column, str(self.expected), str(self.found))\n\n\nclass XmlParser(Parser):\n    \"\"\"Base XML document parser.\"\"\"\n\n    def __init__(self, fp):\n        Parser.__init__(self)\n        self.tokenizer = XmlTokenizer(fp)\n        self.consume()\n\n    def consume(self):\n        self.token = self.tokenizer.next()\n\n    def match_element_start(self, name):\n        return self.token.type == XML_ELEMENT_START and self.token.name_or_data == name\n\n    def match_element_end(self, name):\n        return self.token.type == XML_ELEMENT_END and self.token.name_or_data == name\n\n    def element_start(self, name):\n        while self.token.type == XML_CHARACTER_DATA:\n            self.consume()\n        if self.token.type != XML_ELEMENT_START:\n            raise XmlTokenMismatch(XmlToken(XML_ELEMENT_START, name), self.token)\n        if self.token.name_or_data != name:\n            raise XmlTokenMismatch(XmlToken(XML_ELEMENT_START, name), self.token)\n        attrs = self.token.attrs\n        self.consume()\n        return attrs\n\n    def element_end(self, name):\n        while self.token.type == XML_CHARACTER_DATA:\n            self.consume()\n        if self.token.type != XML_ELEMENT_END:\n            raise XmlTokenMismatch(XmlToken(XML_ELEMENT_END, name), self.token)\n        if self.token.name_or_data != name:\n            raise XmlTokenMismatch(XmlToken(XML_ELEMENT_END, name), self.token)\n        self.consume()\n\n    def character_data(self, strip = True):\n        data = ''\n        while self.token.type == XML_CHARACTER_DATA:\n            data += self.token.name_or_data\n            self.consume()\n        if strip:\n            data = data.strip()\n        return data\n\n\nclass GprofParser(Parser):\n    \"\"\"Parser for GNU gprof output.\n\n    See also:\n    - Chapter \"Interpreting gprof's Output\" from the GNU gprof manual\n      http://sourceware.org/binutils/docs-2.18/gprof/Call-Graph.html#Call-Graph\n    - File \"cg_print.c\" from the GNU gprof source code\n      http://sourceware.org/cgi-bin/cvsweb.cgi/~checkout~/src/gprof/cg_print.c?rev=1.12&cvsroot=src\n    \"\"\"\n\n    def __init__(self, fp):\n        Parser.__init__(self)\n        self.fp = fp\n        self.functions = {}\n        self.cycles = {}\n\n    def readline(self):\n        line = self.fp.readline()\n        if not line:\n            sys.stderr.write('error: unexpected end of file\\n')\n            sys.exit(1)\n        line = line.rstrip('\\r\\n')\n        return line\n\n    _int_re = re.compile(r'^\\d+$')\n    _float_re = re.compile(r'^\\d+\\.\\d+$')\n\n    def translate(self, mo):\n        \"\"\"Extract a structure from a match object, while translating the types in the process.\"\"\"\n        attrs = {}\n        groupdict = mo.groupdict()\n        for name, value in groupdict.items():\n            if value is None:\n                value = None\n            elif self._int_re.match(value):\n                value = int(value)\n            elif self._float_re.match(value):\n                value = float(value)\n            attrs[name] = (value)\n        return Struct(attrs)\n\n    _cg_header_re = re.compile(\n        # original gprof header\n        r'^\\s+called/total\\s+parents\\s*$|' +\n        r'^index\\s+%time\\s+self\\s+descendents\\s+called\\+self\\s+name\\s+index\\s*$|' +\n        r'^\\s+called/total\\s+children\\s*$|' +\n        # GNU gprof header\n        r'^index\\s+%\\s+(time\\s+)?self\\s+children\\s+called\\s+name\\s*$'\n    )\n\n    _cg_ignore_re = re.compile(\n        # spontaneous\n        r'^\\s+<spontaneous>\\s*$|'\n        # internal calls (such as \"mcount\")\n        r'^.*\\((\\d+)\\)$'\n    )\n\n    _cg_primary_re = re.compile(\n        r'^\\[(?P<index>\\d+)\\]?' +\n        r'\\s+(?P<percentage_time>\\d+\\.\\d+)' +\n        r'\\s+(?P<self>\\d+\\.\\d+)' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)' +\n        r'\\s+(?:(?P<called>\\d+)(?:\\+(?P<called_self>\\d+))?)?' +\n        r'\\s+(?P<name>\\S.*?)' +\n        r'(?:\\s+<cycle\\s(?P<cycle>\\d+)>)?' +\n        r'\\s\\[(\\d+)\\]$'\n    )\n\n    _cg_parent_re = re.compile(\n        r'^\\s+(?P<self>\\d+\\.\\d+)?' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)?' +\n        r'\\s+(?P<called>\\d+)(?:/(?P<called_total>\\d+))?' +\n        r'\\s+(?P<name>\\S.*?)' +\n        r'(?:\\s+<cycle\\s(?P<cycle>\\d+)>)?' +\n        r'\\s\\[(?P<index>\\d+)\\]$'\n    )\n\n    _cg_child_re = _cg_parent_re\n\n    _cg_cycle_header_re = re.compile(\n        r'^\\[(?P<index>\\d+)\\]?' +\n        r'\\s+(?P<percentage_time>\\d+\\.\\d+)' +\n        r'\\s+(?P<self>\\d+\\.\\d+)' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)' +\n        r'\\s+(?:(?P<called>\\d+)(?:\\+(?P<called_self>\\d+))?)?' +\n        r'\\s+<cycle\\s(?P<cycle>\\d+)\\sas\\sa\\swhole>' +\n        r'\\s\\[(\\d+)\\]$'\n    )\n\n    _cg_cycle_member_re = re.compile(\n        r'^\\s+(?P<self>\\d+\\.\\d+)?' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)?' +\n        r'\\s+(?P<called>\\d+)(?:\\+(?P<called_self>\\d+))?' +\n        r'\\s+(?P<name>\\S.*?)' +\n        r'(?:\\s+<cycle\\s(?P<cycle>\\d+)>)?' +\n        r'\\s\\[(?P<index>\\d+)\\]$'\n    )\n\n    _cg_sep_re = re.compile(r'^--+$')\n\n    def parse_function_entry(self, lines):\n        parents = []\n        children = []\n\n        while True:\n            if not lines:\n                sys.stderr.write('warning: unexpected end of entry\\n')\n            line = lines.pop(0)\n            if line.startswith('['):\n                break\n\n            # read function parent line\n            mo = self._cg_parent_re.match(line)\n            if not mo:\n                if self._cg_ignore_re.match(line):\n                    continue\n                sys.stderr.write('warning: unrecognized call graph entry: %r\\n' % line)\n            else:\n                parent = self.translate(mo)\n                parents.append(parent)\n\n        # read primary line\n        mo = self._cg_primary_re.match(line)\n        if not mo:\n            sys.stderr.write('warning: unrecognized call graph entry: %r\\n' % line)\n            return\n        else:\n            function = self.translate(mo)\n\n        while lines:\n            line = lines.pop(0)\n\n            # read function subroutine line\n            mo = self._cg_child_re.match(line)\n            if not mo:\n                if self._cg_ignore_re.match(line):\n                    continue\n                sys.stderr.write('warning: unrecognized call graph entry: %r\\n' % line)\n            else:\n                child = self.translate(mo)\n                children.append(child)\n\n        function.parents = parents\n        function.children = children\n\n        self.functions[function.index] = function\n\n    def parse_cycle_entry(self, lines):\n\n        # read cycle header line\n        line = lines[0]\n        mo = self._cg_cycle_header_re.match(line)\n        if not mo:\n            sys.stderr.write('warning: unrecognized call graph entry: %r\\n' % line)\n            return\n        cycle = self.translate(mo)\n\n        # read cycle member lines\n        cycle.functions = []\n        for line in lines[1:]:\n            mo = self._cg_cycle_member_re.match(line)\n            if not mo:\n                sys.stderr.write('warning: unrecognized call graph entry: %r\\n' % line)\n                continue\n            call = self.translate(mo)\n            cycle.functions.append(call)\n\n        self.cycles[cycle.cycle] = cycle\n\n    def parse_cg_entry(self, lines):\n        if lines[0].startswith(\"[\"):\n            self.parse_cycle_entry(lines)\n        else:\n            self.parse_function_entry(lines)\n\n    def parse_cg(self):\n        \"\"\"Parse the call graph.\"\"\"\n\n        # skip call graph header\n        while not self._cg_header_re.match(self.readline()):\n            pass\n        line = self.readline()\n        while self._cg_header_re.match(line):\n            line = self.readline()\n\n        # process call graph entries\n        entry_lines = []\n        while line != '\\014': # form feed\n            if line and not line.isspace():\n                if self._cg_sep_re.match(line):\n                    self.parse_cg_entry(entry_lines)\n                    entry_lines = []\n                else:\n                    entry_lines.append(line)\n            line = self.readline()\n\n    def parse(self):\n        self.parse_cg()\n        self.fp.close()\n\n        profile = Profile()\n        profile[TIME] = 0.0\n\n        cycles = {}\n        for index in self.cycles:\n            cycles[index] = Cycle()\n\n        for entry in self.functions.values():\n            # populate the function\n            function = Function(entry.index, entry.name)\n            function[TIME] = entry.self\n            if entry.called is not None:\n                function.called = entry.called\n            if entry.called_self is not None:\n                call = Call(entry.index)\n                call[CALLS] = entry.called_self\n                function.called += entry.called_self\n\n            # populate the function calls\n            for child in entry.children:\n                call = Call(child.index)\n\n                assert child.called is not None\n                call[CALLS] = child.called\n\n                if child.index not in self.functions:\n                    # NOTE: functions that were never called but were discovered by gprof's\n                    # static call graph analysis dont have a call graph entry so we need\n                    # to add them here\n                    missing = Function(child.index, child.name)\n                    function[TIME] = 0.0\n                    function.called = 0\n                    profile.add_function(missing)\n\n                function.add_call(call)\n\n            profile.add_function(function)\n\n            if entry.cycle is not None:\n                try:\n                    cycle = cycles[entry.cycle]\n                except KeyError:\n                    sys.stderr.write('warning: <cycle %u as a whole> entry missing\\n' % entry.cycle)\n                    cycle = Cycle()\n                    cycles[entry.cycle] = cycle\n                cycle.add_function(function)\n\n            profile[TIME] = profile[TIME] + function[TIME]\n\n        for cycle in cycles.values():\n            profile.add_cycle(cycle)\n\n        # Compute derived events\n        profile.validate()\n        profile.ratio(TIME_RATIO, TIME)\n        profile.call_ratios(CALLS)\n        profile.integrate(TOTAL_TIME, TIME)\n        profile.ratio(TOTAL_TIME_RATIO, TOTAL_TIME)\n\n        return profile\n\n\n# Clone&hack of GprofParser for VTune Amplifier XE 2013 gprof-cc output.\n# Tested only with AXE 2013 for Windows.\n#   - Use total times as reported by AXE.\n#   - In the absence of call counts, call ratios are faked from the relative\n#     proportions of total time.  This affects only the weighting of the calls.\n#   - Different header, separator, and end marker.\n#   - Extra whitespace after function names.\n#   - You get a full entry for <spontaneous>, which does not have parents.\n#   - Cycles do have parents.  These are saved but unused (as they are\n#     for functions).\n#   - Disambiguated \"unrecognized call graph entry\" error messages.\n# Notes:\n#   - Total time of functions as reported by AXE passes the val3 test.\n#   - CPU Time:Children in the input is sometimes a negative number.  This\n#     value goes to the variable descendants, which is unused.\n#   - The format of gprof-cc reports is unaffected by the use of\n#       -knob enable-call-counts=true (no call counts, ever), or\n#       -show-as=samples (results are quoted in seconds regardless).\nclass AXEParser(Parser):\n    \"Parser for VTune Amplifier XE 2013 gprof-cc report output.\"\n\n    def __init__(self, fp):\n        Parser.__init__(self)\n        self.fp = fp\n        self.functions = {}\n        self.cycles = {}\n\n    def readline(self):\n        line = self.fp.readline()\n        if not line:\n            sys.stderr.write('error: unexpected end of file\\n')\n            sys.exit(1)\n        line = line.rstrip('\\r\\n')\n        return line\n\n    _int_re = re.compile(r'^\\d+$')\n    _float_re = re.compile(r'^\\d+\\.\\d+$')\n\n    def translate(self, mo):\n        \"\"\"Extract a structure from a match object, while translating the types in the process.\"\"\"\n        attrs = {}\n        groupdict = mo.groupdict()\n        for name, value in groupdict.items():\n            if value is None:\n                value = None\n            elif self._int_re.match(value):\n                value = int(value)\n            elif self._float_re.match(value):\n                value = float(value)\n            attrs[name] = (value)\n        return Struct(attrs)\n\n    _cg_header_re = re.compile(\n        '^Index |'\n        '^-----+ '\n    )\n\n    _cg_footer_re = re.compile(r'^Index\\s+Function\\s*$')\n\n    _cg_primary_re = re.compile(\n        r'^\\[(?P<index>\\d+)\\]?' +\n        r'\\s+(?P<percentage_time>\\d+\\.\\d+)' +\n        r'\\s+(?P<self>\\d+\\.\\d+)' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)' +\n        r'\\s+(?P<name>\\S.*?)' +\n        r'(?:\\s+<cycle\\s(?P<cycle>\\d+)>)?' +\n        r'\\s+\\[(\\d+)\\]' +\n        r'\\s*$'\n    )\n\n    _cg_parent_re = re.compile(\n        r'^\\s+(?P<self>\\d+\\.\\d+)?' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)?' +\n        r'\\s+(?P<name>\\S.*?)' +\n        r'(?:\\s+<cycle\\s(?P<cycle>\\d+)>)?' +\n        r'(?:\\s+\\[(?P<index>\\d+)\\]\\s*)?' +\n        r'\\s*$'\n    )\n\n    _cg_child_re = _cg_parent_re\n\n    _cg_cycle_header_re = re.compile(\n        r'^\\[(?P<index>\\d+)\\]?' +\n        r'\\s+(?P<percentage_time>\\d+\\.\\d+)' +\n        r'\\s+(?P<self>\\d+\\.\\d+)' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)' +\n        r'\\s+<cycle\\s(?P<cycle>\\d+)\\sas\\sa\\swhole>' +\n        r'\\s+\\[(\\d+)\\]' +\n        r'\\s*$'\n    )\n\n    _cg_cycle_member_re = re.compile(\n        r'^\\s+(?P<self>\\d+\\.\\d+)?' +\n        r'\\s+(?P<descendants>\\d+\\.\\d+)?' +\n        r'\\s+(?P<name>\\S.*?)' +\n        r'(?:\\s+<cycle\\s(?P<cycle>\\d+)>)?' +\n        r'\\s+\\[(?P<index>\\d+)\\]' +\n        r'\\s*$'\n    )\n\n    def parse_function_entry(self, lines):\n        parents = []\n        children = []\n\n        while True:\n            if not lines:\n                sys.stderr.write('warning: unexpected end of entry\\n')\n                return\n            line = lines.pop(0)\n            if line.startswith('['):\n                break\n\n            # read function parent line\n            mo = self._cg_parent_re.match(line)\n            if not mo:\n                sys.stderr.write('warning: unrecognized call graph entry (1): %r\\n' % line)\n            else:\n                parent = self.translate(mo)\n                if parent.name != '<spontaneous>':\n                    parents.append(parent)\n\n        # read primary line\n        mo = self._cg_primary_re.match(line)\n        if not mo:\n            sys.stderr.write('warning: unrecognized call graph entry (2): %r\\n' % line)\n            return\n        else:\n            function = self.translate(mo)\n\n        while lines:\n            line = lines.pop(0)\n\n            # read function subroutine line\n            mo = self._cg_child_re.match(line)\n            if not mo:\n                sys.stderr.write('warning: unrecognized call graph entry (3): %r\\n' % line)\n            else:\n                child = self.translate(mo)\n                if child.name != '<spontaneous>':\n                    children.append(child)\n\n        if function.name != '<spontaneous>':\n            function.parents = parents\n            function.children = children\n\n            self.functions[function.index] = function\n\n    def parse_cycle_entry(self, lines):\n\n        # Process the parents that were not there in gprof format.\n        parents = []\n        while True:\n            if not lines:\n                sys.stderr.write('warning: unexpected end of cycle entry\\n')\n                return\n            line = lines.pop(0)\n            if line.startswith('['):\n                break\n            mo = self._cg_parent_re.match(line)\n            if not mo:\n                sys.stderr.write('warning: unrecognized call graph entry (6): %r\\n' % line)\n            else:\n                parent = self.translate(mo)\n                if parent.name != '<spontaneous>':\n                    parents.append(parent)\n\n        # read cycle header line\n        mo = self._cg_cycle_header_re.match(line)\n        if not mo:\n            sys.stderr.write('warning: unrecognized call graph entry (4): %r\\n' % line)\n            return\n        cycle = self.translate(mo)\n\n        # read cycle member lines\n        cycle.functions = []\n        for line in lines[1:]:\n            mo = self._cg_cycle_member_re.match(line)\n            if not mo:\n                sys.stderr.write('warning: unrecognized call graph entry (5): %r\\n' % line)\n                continue\n            call = self.translate(mo)\n            cycle.functions.append(call)\n\n        cycle.parents = parents\n        self.cycles[cycle.cycle] = cycle\n\n    def parse_cg_entry(self, lines):\n        if any(\"as a whole\" in linelooper for linelooper in lines):\n            self.parse_cycle_entry(lines)\n        else:\n            self.parse_function_entry(lines)\n\n    def parse_cg(self):\n        \"\"\"Parse the call graph.\"\"\"\n\n        # skip call graph header\n        line = self.readline()\n        while self._cg_header_re.match(line):\n            line = self.readline()\n\n        # process call graph entries\n        entry_lines = []\n        # An EOF in readline terminates the program without returning.\n        while not self._cg_footer_re.match(line):\n            if line.isspace():\n                self.parse_cg_entry(entry_lines)\n                entry_lines = []\n            else:\n                entry_lines.append(line)\n            line = self.readline()\n\n    def parse(self):\n        sys.stderr.write('warning: for axe format, edge weights are unreliable estimates derived from function total times.\\n')\n        self.parse_cg()\n        self.fp.close()\n\n        profile = Profile()\n        profile[TIME] = 0.0\n\n        cycles = {}\n        for index in self.cycles:\n            cycles[index] = Cycle()\n\n        for entry in self.functions.values():\n            # populate the function\n            function = Function(entry.index, entry.name)\n            function[TIME] = entry.self\n            function[TOTAL_TIME_RATIO] = entry.percentage_time / 100.0\n\n            # populate the function calls\n            for child in entry.children:\n                call = Call(child.index)\n                # The following bogus value affects only the weighting of\n                # the calls.\n                call[TOTAL_TIME_RATIO] = function[TOTAL_TIME_RATIO]\n\n                if child.index not in self.functions:\n                    # NOTE: functions that were never called but were discovered by gprof's\n                    # static call graph analysis dont have a call graph entry so we need\n                    # to add them here\n                    # FIXME: Is this applicable?\n                    missing = Function(child.index, child.name)\n                    function[TIME] = 0.0\n                    profile.add_function(missing)\n\n                function.add_call(call)\n\n            profile.add_function(function)\n\n            if entry.cycle is not None:\n                try:\n                    cycle = cycles[entry.cycle]\n                except KeyError:\n                    sys.stderr.write('warning: <cycle %u as a whole> entry missing\\n' % entry.cycle)\n                    cycle = Cycle()\n                    cycles[entry.cycle] = cycle\n                cycle.add_function(function)\n\n            profile[TIME] = profile[TIME] + function[TIME]\n\n        for cycle in cycles.values():\n            profile.add_cycle(cycle)\n\n        # Compute derived events.\n        profile.validate()\n        profile.ratio(TIME_RATIO, TIME)\n        # Lacking call counts, fake call ratios based on total times.\n        profile.call_ratios(TOTAL_TIME_RATIO)\n        # The TOTAL_TIME_RATIO of functions is already set.  Propagate that\n        # total time to the calls.  (TOTAL_TIME is neither set nor used.)\n        for function in profile.functions.values():\n            for call in function.calls.values():\n                if call.ratio is not None:\n                    callee = profile.functions[call.callee_id]\n                    call[TOTAL_TIME_RATIO] = call.ratio * callee[TOTAL_TIME_RATIO]\n\n        return profile\n\n\nclass CallgrindParser(LineParser):\n    \"\"\"Parser for valgrind's callgrind tool.\n\n    See also:\n    - https://valgrind.org/docs/manual/cl-format.html\n    \"\"\"\n\n    _call_re = re.compile(r'^calls=\\s*(\\d+)\\s+((\\d+|\\+\\d+|-\\d+|\\*)\\s+)+$')\n\n    def __init__(self, infile):\n        LineParser.__init__(self, infile)\n\n        # Textual positions\n        self.position_ids = {}\n        self.positions = {}\n\n        # Numeric positions\n        self.num_positions = 1\n        self.cost_positions = ['line']\n        self.last_positions = [0]\n\n        # Events\n        self.num_events = 0\n        self.cost_events = []\n\n        self.profile = Profile()\n        self.profile[SAMPLES] = 0\n\n    def parse(self):\n        # read lookahead\n        self.readline()\n\n        self.parse_key('version')\n        self.parse_key('creator')\n        while self.parse_part():\n            pass\n        if not self.eof():\n            sys.stderr.write('warning: line %u: unexpected line\\n' % self.line_no)\n            sys.stderr.write('%s\\n' % self.lookahead())\n\n        # compute derived data\n        self.profile.validate()\n        self.profile.find_cycles()\n        self.profile.ratio(TIME_RATIO, SAMPLES)\n        self.profile.call_ratios(SAMPLES2)\n        self.profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return self.profile\n\n    def parse_part(self):\n        if not self.parse_header_line():\n            return False\n        while self.parse_header_line():\n            pass\n        if not self.parse_body_line():\n            return False\n        while self.parse_body_line():\n            pass\n        return True\n\n    def parse_header_line(self):\n        return \\\n            self.parse_empty() or \\\n            self.parse_comment() or \\\n            self.parse_part_detail() or \\\n            self.parse_description() or \\\n            self.parse_event_specification() or \\\n            self.parse_cost_line_def() or \\\n            self.parse_cost_summary()\n\n    _detail_keys = set(('cmd', 'pid', 'thread', 'part'))\n\n    def parse_part_detail(self):\n        return self.parse_keys(self._detail_keys)\n\n    def parse_description(self):\n        return self.parse_key('desc') is not None\n\n    def parse_event_specification(self):\n        event = self.parse_key('event')\n        if event is None:\n            return False\n        return True\n\n    def parse_cost_line_def(self):\n        pair = self.parse_keys(('events', 'positions'))\n        if pair is None:\n            return False\n        key, value = pair\n        items = value.split()\n        if key == 'events':\n            self.num_events = len(items)\n            self.cost_events = items\n        if key == 'positions':\n            self.num_positions = len(items)\n            self.cost_positions = items\n            self.last_positions = [0]*self.num_positions\n        return True\n\n    def parse_cost_summary(self):\n        pair = self.parse_keys(('summary', 'totals'))\n        if pair is None:\n            return False\n        return True\n\n    def parse_body_line(self):\n        return \\\n            self.parse_empty() or \\\n            self.parse_comment() or \\\n            self.parse_cost_line() or \\\n            self.parse_position_spec() or \\\n            self.parse_association_spec()\n\n    __subpos_re = r'(0x[0-9a-fA-F]+|\\d+|\\+\\d+|-\\d+|\\*)'\n    _cost_re = re.compile(r'^' +\n        __subpos_re + r'( +' + __subpos_re + r')*' +\n        r'( +\\d+)*' +\n    '$')\n\n    def parse_cost_line(self, calls=None):\n        line = self.lookahead().rstrip()\n        mo = self._cost_re.match(line)\n        if not mo:\n            return False\n\n        function = self.get_function()\n\n        if calls is None:\n            # Unlike other aspects, call object (cob) is relative not to the\n            # last call object, but to the caller's object (ob), so try to\n            # update it when processing a functions cost line\n            try:\n                self.positions['cob'] = self.positions['ob']\n            except KeyError:\n                pass\n\n        values = line.split()\n        assert len(values) <= self.num_positions + self.num_events\n\n        positions = values[0 : self.num_positions]\n        events = values[self.num_positions : ]\n        events += ['0']*(self.num_events - len(events))\n\n        for i in range(self.num_positions):\n            position = positions[i]\n            if position == '*':\n                position = self.last_positions[i]\n            elif position[0] in '-+':\n                position = self.last_positions[i] + int(position)\n            elif position.startswith('0x'):\n                position = int(position, 16)\n            else:\n                position = int(position)\n            self.last_positions[i] = position\n\n        events = [float(event) for event in events]\n\n        if calls is None:\n            function[SAMPLES] += events[0]\n            self.profile[SAMPLES] += events[0]\n        else:\n            callee = self.get_callee()\n            callee.called += calls\n\n            try:\n                call = function.calls[callee.id]\n            except KeyError:\n                call = Call(callee.id)\n                call[CALLS] = calls\n                call[SAMPLES2] = events[0]\n                function.add_call(call)\n            else:\n                call[CALLS] += calls\n                call[SAMPLES2] += events[0]\n\n        self.consume()\n        return True\n\n    def parse_association_spec(self):\n        line = self.lookahead()\n        if not line.startswith('calls='):\n            return False\n\n        _, values = line.split('=', 1)\n        values = values.strip().split()\n        calls = int(values[0])\n        call_position = values[1:]\n        self.consume()\n\n        self.parse_cost_line(calls)\n\n        return True\n\n    _position_re = re.compile(r'^(?P<position>[cj]?(?:ob|fl|fi|fe|fn))=\\s*(?:\\((?P<id>\\d+)\\))?(?:\\s*(?P<name>.+))?')\n\n    _position_table_map = {\n        'ob': 'ob',\n        'fl': 'fl',\n        'fi': 'fl',\n        'fe': 'fl',\n        'fn': 'fn',\n        'cob': 'ob',\n        'cfl': 'fl',\n        'cfi': 'fl',\n        'cfe': 'fl',\n        'cfn': 'fn',\n        'jfi': 'fl',\n    }\n\n    _position_map = {\n        'ob': 'ob',\n        'fl': 'fl',\n        'fi': 'fl',\n        'fe': 'fl',\n        'fn': 'fn',\n        'cob': 'cob',\n        'cfl': 'cfl',\n        'cfi': 'cfl',\n        'cfe': 'cfl',\n        'cfn': 'cfn',\n        'jfi': 'jfi',\n    }\n\n    def parse_position_spec(self):\n        line = self.lookahead()\n\n        if line.startswith('jump=') or line.startswith('jcnd='):\n            self.consume()\n            return True\n\n        mo = self._position_re.match(line)\n        if not mo:\n            return False\n\n        position, id, name = mo.groups()\n        if id:\n            table = self._position_table_map[position]\n            if name:\n                self.position_ids[(table, id)] = name\n            else:\n                name = self.position_ids.get((table, id), '')\n        self.positions[self._position_map[position]] = name\n\n        self.consume()\n        return True\n\n    def parse_empty(self):\n        if self.eof():\n            return False\n        line = self.lookahead()\n        if line.strip():\n            return False\n        self.consume()\n        return True\n\n    def parse_comment(self):\n        line = self.lookahead()\n        if not line.startswith('#'):\n            return False\n        self.consume()\n        return True\n\n    _key_re = re.compile(r'^(\\w+):')\n\n    def parse_key(self, key):\n        pair = self.parse_keys((key,))\n        if not pair:\n            return None\n        key, value = pair\n        return value\n\n    def parse_keys(self, keys):\n        line = self.lookahead()\n        mo = self._key_re.match(line)\n        if not mo:\n            return None\n        key, value = line.split(':', 1)\n        if key not in keys:\n            return None\n        value = value.strip()\n        self.consume()\n        return key, value\n\n    def make_function(self, module, filename, name):\n        # FIXME: module and filename are not being tracked reliably\n        #id = '|'.join((module, filename, name))\n        id = name\n        try:\n            function = self.profile.functions[id]\n        except KeyError:\n            function = Function(id, name)\n            if module:\n                function.module = os.path.basename(module)\n            function[SAMPLES] = 0\n            function.called = 0\n            self.profile.add_function(function)\n        return function\n\n    def get_function(self):\n        module = self.positions.get('ob', '')\n        filename = self.positions.get('fl', '')\n        function = self.positions.get('fn', '')\n        return self.make_function(module, filename, function)\n\n    def get_callee(self):\n        module = self.positions.get('cob', '')\n        filename = self.positions.get('cfi', '')\n        function = self.positions.get('cfn', '')\n        return self.make_function(module, filename, function)\n\n    def readline(self):\n        # Override LineParser.readline to ignore comment lines\n        while True:\n            LineParser.readline(self)\n            if self.eof() or not self.lookahead().startswith('#'):\n                break\n\n\nclass PerfParser(LineParser):\n    \"\"\"Parser for linux perf callgraph output.\n\n    It expects output generated with\n\n        perf record -g\n        perf script | gprof2dot.py --format=perf\n    \"\"\"\n\n    def __init__(self, infile):\n        LineParser.__init__(self, infile)\n        self.profile = Profile()\n\n    def readline(self):\n        # Override LineParser.readline to ignore comment lines\n        while True:\n            LineParser.readline(self)\n            if self.eof() or not self.lookahead().startswith('#'):\n                break\n\n    def parse(self):\n        # read lookahead\n        self.readline()\n\n        profile = self.profile\n        profile[SAMPLES] = 0\n        while not self.eof():\n            self.parse_event()\n\n        # compute derived data\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        if totalMethod == \"callratios\":\n            # Heuristic approach.  TOTAL_SAMPLES is unused.\n            profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n        elif totalMethod == \"callstacks\":\n            # Use the actual call chains for functions.\n            profile[TOTAL_SAMPLES] = profile[SAMPLES]\n            profile.ratio(TOTAL_TIME_RATIO, TOTAL_SAMPLES)\n            # Then propagate that total time to the calls.\n            for function in profile.functions.values():\n                for call in function.calls.values():\n                    if call.ratio is not None:\n                        callee = profile.functions[call.callee_id]\n                        call[TOTAL_TIME_RATIO] = call.ratio * callee[TOTAL_TIME_RATIO]\n        else:\n            assert False\n\n        return profile\n\n    def parse_event(self):\n        if self.eof():\n            return\n\n        line = self.consume()\n        assert line\n\n        callchain = self.parse_callchain()\n        if not callchain:\n            return\n\n        callee = callchain[0]\n        callee[SAMPLES] += 1\n        self.profile[SAMPLES] += 1\n\n        for caller in callchain[1:]:\n            try:\n                call = caller.calls[callee.id]\n            except KeyError:\n                call = Call(callee.id)\n                call[SAMPLES2] = 1\n                caller.add_call(call)\n            else:\n                call[SAMPLES2] += 1\n\n            callee = caller\n\n        # Increment TOTAL_SAMPLES only once on each function.\n        stack = set(callchain)\n        for function in stack:\n            function[TOTAL_SAMPLES] += 1\n\n    def parse_callchain(self):\n        callchain = []\n        while self.lookahead():\n            function = self.parse_call()\n            if function is None:\n                break\n            callchain.append(function)\n        if self.lookahead() == '':\n            self.consume()\n        return callchain\n\n    call_re = re.compile(r'^\\s+(?P<address>[0-9a-fA-F]+)\\s+(?P<symbol>.*)\\s+\\((?P<module>.*)\\)$')\n    addr2_re = re.compile(r'\\+0x[0-9a-fA-F]+$')\n\n    def parse_call(self):\n        line = self.consume()\n        mo = self.call_re.match(line)\n        assert mo\n        if not mo:\n            return None\n\n        function_name = mo.group('symbol')\n\n        # If present, amputate program counter from function name.\n        if function_name:\n            function_name = re.sub(self.addr2_re, '', function_name)\n\n        if not function_name or function_name == '[unknown]':\n            function_name = mo.group('address')\n\n        module = mo.group('module')\n\n        function_id = function_name + ':' + module\n\n        try:\n            function = self.profile.functions[function_id]\n        except KeyError:\n            function = Function(function_id, function_name)\n            function.module = os.path.basename(module)\n            function[SAMPLES] = 0\n            function[TOTAL_SAMPLES] = 0\n            self.profile.add_function(function)\n\n        return function\n\n\nclass OprofileParser(LineParser):\n    \"\"\"Parser for oprofile callgraph output.\n\n    See also:\n    - http://oprofile.sourceforge.net/doc/opreport.html#opreport-callgraph\n    \"\"\"\n\n    _fields_re = {\n        'samples': r'(\\d+)',\n        '%': r'(\\S+)',\n        'linenr info': r'(?P<source>\\(no location information\\)|\\S+:\\d+)',\n        'image name': r'(?P<image>\\S+(?:\\s\\(tgid:[^)]*\\))?)',\n        'app name': r'(?P<application>\\S+)',\n        'symbol name': r'(?P<symbol>\\(no symbols\\)|.+?)',\n    }\n\n    def __init__(self, infile):\n        LineParser.__init__(self, infile)\n        self.entries = {}\n        self.entry_re = None\n\n    def add_entry(self, callers, function, callees):\n        try:\n            entry = self.entries[function.id]\n        except KeyError:\n            self.entries[function.id] = (callers, function, callees)\n        else:\n            callers_total, function_total, callees_total = entry\n            self.update_subentries_dict(callers_total, callers)\n            function_total.samples += function.samples\n            self.update_subentries_dict(callees_total, callees)\n\n    def update_subentries_dict(self, totals, partials):\n        for partial in partials.values():\n            try:\n                total = totals[partial.id]\n            except KeyError:\n                totals[partial.id] = partial\n            else:\n                total.samples += partial.samples\n\n    def parse(self):\n        # read lookahead\n        self.readline()\n\n        self.parse_header()\n        while self.lookahead():\n            self.parse_entry()\n\n        profile = Profile()\n\n        reverse_call_samples = {}\n\n        # populate the profile\n        profile[SAMPLES] = 0\n        for _callers, _function, _callees in self.entries.values():\n            function = Function(_function.id, _function.name)\n            function[SAMPLES] = _function.samples\n            profile.add_function(function)\n            profile[SAMPLES] += _function.samples\n\n            if _function.application:\n                function.process = os.path.basename(_function.application)\n            if _function.image:\n                function.module = os.path.basename(_function.image)\n\n            total_callee_samples = 0\n            for _callee in _callees.values():\n                total_callee_samples += _callee.samples\n\n            for _callee in _callees.values():\n                if not _callee.self:\n                    call = Call(_callee.id)\n                    call[SAMPLES2] = _callee.samples\n                    function.add_call(call)\n\n        # compute derived data\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return profile\n\n    def parse_header(self):\n        while not self.match_header():\n            self.consume()\n        line = self.lookahead()\n        fields = re.split(r'\\s\\s+', line)\n        entry_re = r'^\\s*' + r'\\s+'.join([self._fields_re[field] for field in fields]) + r'(?P<self>\\s+\\[self\\])?$'\n        self.entry_re = re.compile(entry_re)\n        self.skip_separator()\n\n    def parse_entry(self):\n        callers = self.parse_subentries()\n        if self.match_primary():\n            function = self.parse_subentry()\n            if function is not None:\n                callees = self.parse_subentries()\n                self.add_entry(callers, function, callees)\n        self.skip_separator()\n\n    def parse_subentries(self):\n        subentries = {}\n        while self.match_secondary():\n            subentry = self.parse_subentry()\n            subentries[subentry.id] = subentry\n        return subentries\n\n    def parse_subentry(self):\n        entry = Struct()\n        line = self.consume()\n        mo = self.entry_re.match(line)\n        if not mo:\n            raise ParseError('failed to parse', line)\n        fields = mo.groupdict()\n        entry.samples = int(mo.group(1))\n        if 'source' in fields and fields['source'] != '(no location information)':\n            source = fields['source']\n            filename, lineno = source.split(':')\n            entry.filename = filename\n            entry.lineno = int(lineno)\n        else:\n            source = ''\n            entry.filename = None\n            entry.lineno = None\n        entry.image = fields.get('image', '')\n        entry.application = fields.get('application', '')\n        if 'symbol' in fields and fields['symbol'] != '(no symbols)':\n            entry.symbol = fields['symbol']\n        else:\n            entry.symbol = ''\n        if entry.symbol.startswith('\"') and entry.symbol.endswith('\"'):\n            entry.symbol = entry.symbol[1:-1]\n        entry.id = ':'.join((entry.application, entry.image, source, entry.symbol))\n        entry.self = fields.get('self', None) != None\n        if entry.self:\n            entry.id += ':self'\n        if entry.symbol:\n            entry.name = entry.symbol\n        else:\n            entry.name = entry.image\n        return entry\n\n    def skip_separator(self):\n        while not self.match_separator():\n            self.consume()\n        self.consume()\n\n    def match_header(self):\n        line = self.lookahead()\n        return line.startswith('samples')\n\n    def match_separator(self):\n        line = self.lookahead()\n        return line == '-'*len(line)\n\n    def match_primary(self):\n        line = self.lookahead()\n        return not line[:1].isspace()\n\n    def match_secondary(self):\n        line = self.lookahead()\n        return line[:1].isspace()\n\n\nclass HProfParser(LineParser):\n    \"\"\"Parser for java hprof output\n\n    See also:\n    - http://java.sun.com/developer/technicalArticles/Programming/HPROF.html\n    \"\"\"\n\n    trace_re = re.compile(r'\\t(.*)\\((.*):(.*)\\)')\n    trace_id_re = re.compile(r'^TRACE (\\d+):$')\n\n    def __init__(self, infile):\n        LineParser.__init__(self, infile)\n        self.traces = {}\n        self.samples = {}\n\n    def parse(self):\n        # read lookahead\n        self.readline()\n\n        while not self.lookahead().startswith('------'): self.consume()\n        while not self.lookahead().startswith('TRACE '): self.consume()\n\n        self.parse_traces()\n\n        while not self.lookahead().startswith('CPU'):\n            self.consume()\n\n        self.parse_samples()\n\n        # populate the profile\n        profile = Profile()\n        profile[SAMPLES] = 0\n\n        functions = {}\n\n        # build up callgraph\n        for id, trace in self.traces.items():\n            if not id in self.samples: continue\n            mtime = self.samples[id][0]\n            last = None\n\n            for func, file, line in trace:\n                if not func in functions:\n                    function = Function(func, func)\n                    function[SAMPLES] = 0\n                    profile.add_function(function)\n                    functions[func] = function\n\n                function = functions[func]\n                # allocate time to the deepest method in the trace\n                if not last:\n                    function[SAMPLES] += mtime\n                    profile[SAMPLES] += mtime\n                else:\n                    c = function.get_call(last)\n                    c[SAMPLES2] += mtime\n\n                last = func\n\n        # compute derived data\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return profile\n\n    def parse_traces(self):\n        while self.lookahead().startswith('TRACE '):\n            self.parse_trace()\n\n    def parse_trace(self):\n        l = self.consume()\n        mo = self.trace_id_re.match(l)\n        tid = mo.group(1)\n        last = None\n        trace = []\n\n        while self.lookahead().startswith('\\t'):\n            l = self.consume()\n            match = self.trace_re.search(l)\n            if not match:\n                #sys.stderr.write('Invalid line: %s\\n' % l)\n                break\n            else:\n                function_name, file, line = match.groups()\n                trace += [(function_name, file, line)]\n\n        self.traces[int(tid)] = trace\n\n    def parse_samples(self):\n        self.consume()\n        self.consume()\n\n        while not self.lookahead().startswith('CPU'):\n            rank, percent_self, percent_accum, count, traceid, method = self.lookahead().split()\n            self.samples[int(traceid)] = (int(count), method)\n            self.consume()\n\n\nclass SysprofParser(XmlParser):\n\n    def __init__(self, stream):\n        XmlParser.__init__(self, stream)\n\n    def parse(self):\n        objects = {}\n        nodes = {}\n\n        self.element_start('profile')\n        while self.token.type == XML_ELEMENT_START:\n            if self.token.name_or_data == 'objects':\n                assert not objects\n                objects = self.parse_items('objects')\n            elif self.token.name_or_data == 'nodes':\n                assert not nodes\n                nodes = self.parse_items('nodes')\n            else:\n                self.parse_value(self.token.name_or_data)\n        self.element_end('profile')\n\n        return self.build_profile(objects, nodes)\n\n    def parse_items(self, name):\n        assert name[-1] == 's'\n        items = {}\n        self.element_start(name)\n        while self.token.type == XML_ELEMENT_START:\n            id, values = self.parse_item(name[:-1])\n            assert id not in items\n            items[id] = values\n        self.element_end(name)\n        return items\n\n    def parse_item(self, name):\n        attrs = self.element_start(name)\n        id = int(attrs['id'])\n        values = self.parse_values()\n        self.element_end(name)\n        return id, values\n\n    def parse_values(self):\n        values = {}\n        while self.token.type == XML_ELEMENT_START:\n            name = self.token.name_or_data\n            value = self.parse_value(name)\n            assert name not in values\n            values[name] = value\n        return values\n\n    def parse_value(self, tag):\n        self.element_start(tag)\n        value = self.character_data()\n        self.element_end(tag)\n        if value.isdigit():\n            return int(value)\n        if value.startswith('\"') and value.endswith('\"'):\n            return value[1:-1]\n        return value\n\n    def build_profile(self, objects, nodes):\n        profile = Profile()\n\n        profile[SAMPLES] = 0\n        for id, object in objects.items():\n            # Ignore fake objects (process names, modules, \"Everything\", \"kernel\", etc.)\n            if object['self'] == 0:\n                continue\n\n            function = Function(id, object['name'])\n            function[SAMPLES] = object['self']\n            profile.add_function(function)\n            profile[SAMPLES] += function[SAMPLES]\n\n        for id, node in nodes.items():\n            # Ignore fake calls\n            if node['self'] == 0:\n                continue\n\n            # Find a non-ignored parent\n            parent_id = node['parent']\n            while parent_id != 0:\n                parent = nodes[parent_id]\n                caller_id = parent['object']\n                if objects[caller_id]['self'] != 0:\n                    break\n                parent_id = parent['parent']\n            if parent_id == 0:\n                continue\n\n            callee_id = node['object']\n\n            assert objects[caller_id]['self']\n            assert objects[callee_id]['self']\n\n            function = profile.functions[caller_id]\n\n            samples = node['self']\n            try:\n                call = function.calls[callee_id]\n            except KeyError:\n                call = Call(callee_id)\n                call[SAMPLES2] = samples\n                function.add_call(call)\n            else:\n                call[SAMPLES2] += samples\n\n        # Compute derived events\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return profile\n\n\nclass XPerfParser(Parser):\n    \"\"\"Parser for CSVs generated by XPerf, from Microsoft Windows Performance Tools.\n    \"\"\"\n\n    def __init__(self, stream):\n        Parser.__init__(self)\n        self.stream = stream\n        self.profile = Profile()\n        self.profile[SAMPLES] = 0\n        self.column = {}\n\n    def parse(self):\n        import csv\n        reader = csv.reader(\n            self.stream,\n            delimiter = ',',\n            quotechar = None,\n            escapechar = None,\n            doublequote = False,\n            skipinitialspace = True,\n            lineterminator = '\\r\\n',\n            quoting = csv.QUOTE_NONE)\n        header = True\n        for row in reader:\n            if header:\n                self.parse_header(row)\n                header = False\n            else:\n                self.parse_row(row)\n\n        # compute derived data\n        self.profile.validate()\n        self.profile.find_cycles()\n        self.profile.ratio(TIME_RATIO, SAMPLES)\n        self.profile.call_ratios(SAMPLES2)\n        self.profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return self.profile\n\n    def parse_header(self, row):\n        for column in range(len(row)):\n            name = row[column]\n            assert name not in self.column\n            self.column[name] = column\n\n    def parse_row(self, row):\n        fields = {}\n        for name, column in self.column.items():\n            value = row[column]\n            for factory in int, float:\n                try:\n                    value = factory(value)\n                except ValueError:\n                    pass\n                else:\n                    break\n            fields[name] = value\n\n        process = fields['Process Name']\n        symbol = fields['Module'] + '!' + fields['Function']\n        weight = fields['Weight']\n        count = fields['Count']\n\n        if process == 'Idle':\n            return\n\n        function = self.get_function(process, symbol)\n        function[SAMPLES] += weight * count\n        self.profile[SAMPLES] += weight * count\n\n        stack = fields['Stack']\n        if stack != '?':\n            stack = stack.split('/')\n            assert stack[0] == '[Root]'\n            if stack[-1] != symbol:\n                # XXX: some cases the sampled function does not appear in the stack\n                stack.append(symbol)\n            caller = None\n            for symbol in stack[1:]:\n                callee = self.get_function(process, symbol)\n                if caller is not None:\n                    try:\n                        call = caller.calls[callee.id]\n                    except KeyError:\n                        call = Call(callee.id)\n                        call[SAMPLES2] = count\n                        caller.add_call(call)\n                    else:\n                        call[SAMPLES2] += count\n                caller = callee\n\n    def get_function(self, process, symbol):\n        function_id = process + '!' + symbol\n\n        try:\n            function = self.profile.functions[function_id]\n        except KeyError:\n            module, name = symbol.split('!', 1)\n            function = Function(function_id, name)\n            function.process = process\n            function.module = module\n            function[SAMPLES] = 0\n            self.profile.add_function(function)\n\n        return function\n\n\nclass SleepyParser(Parser):\n    \"\"\"Parser for GNU gprof output.\n\n    See also:\n    - http://www.codersnotes.com/sleepy/\n    - http://sleepygraph.sourceforge.net/\n    \"\"\"\n\n    stdinInput = False\n\n    def __init__(self, filename):\n        Parser.__init__(self)\n\n        from zipfile import ZipFile\n\n        self.database = ZipFile(filename)\n\n        self.symbols = {}\n        self.calls = {}\n\n        self.profile = Profile()\n\n    _symbol_re = re.compile(\n        r'^(?P<id>\\w+)' +\n        r'\\s+\"(?P<module>[^\"]*)\"' +\n        r'\\s+\"(?P<procname>[^\"]*)\"' +\n        r'\\s+\"(?P<sourcefile>[^\"]*)\"' +\n        r'\\s+(?P<sourceline>\\d+)$'\n    )\n\n    def openEntry(self, name):\n        # Some versions of verysleepy use lowercase filenames\n        for database_name in self.database.namelist():\n            if name.lower() == database_name.lower():\n                name = database_name\n                break\n\n        return self.database.open(name, 'r')\n\n    def parse_symbols(self):\n        for line in self.openEntry('Symbols.txt'):\n            line = line.decode('UTF-8').rstrip('\\r\\n')\n\n            mo = self._symbol_re.match(line)\n            if mo:\n                symbol_id, module, procname, sourcefile, sourceline = mo.groups()\n\n                function_id = ':'.join([module, procname])\n\n                try:\n                    function = self.profile.functions[function_id]\n                except KeyError:\n                    function = Function(function_id, procname)\n                    function.module = module\n                    function[SAMPLES] = 0\n                    self.profile.add_function(function)\n\n                self.symbols[symbol_id] = function\n\n    def parse_callstacks(self):\n        for line in self.openEntry('Callstacks.txt'):\n            line = line.decode('UTF-8').rstrip('\\r\\n')\n\n            fields = line.split()\n            samples = float(fields[0])\n            callstack = fields[1:]\n\n            callstack = [self.symbols[symbol_id] for symbol_id in callstack]\n\n            callee = callstack[0]\n\n            callee[SAMPLES] += samples\n            self.profile[SAMPLES] += samples\n\n            for caller in callstack[1:]:\n                try:\n                    call = caller.calls[callee.id]\n                except KeyError:\n                    call = Call(callee.id)\n                    call[SAMPLES2] = samples\n                    caller.add_call(call)\n                else:\n                    call[SAMPLES2] += samples\n\n                callee = caller\n\n    def parse(self):\n        profile = self.profile\n        profile[SAMPLES] = 0\n\n        self.parse_symbols()\n        self.parse_callstacks()\n\n        # Compute derived events\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n\n        return profile\n\n\nclass PstatsParser:\n    \"\"\"Parser python profiling statistics saved with te pstats module.\"\"\"\n\n    stdinInput = False\n    multipleInput = True\n\n    def __init__(self, *filename):\n        import pstats\n        try:\n            self.stats = pstats.Stats(*filename)\n        except ValueError:\n            sys.stderr.write('error: failed to load %s, maybe they are generated by different python version?\\n' % ', '.join(filename))\n            sys.exit(1)\n        self.profile = Profile()\n        self.function_ids = {}\n\n    def get_function_name(self, key):\n        filename, line, name = key\n        module = os.path.splitext(filename)[0]\n        module = os.path.basename(module)\n        return \"%s:%d:%s\" % (module, line, name)\n\n    def get_function(self, key):\n        try:\n            id = self.function_ids[key]\n        except KeyError:\n            id = len(self.function_ids)\n            name = self.get_function_name(key)\n            function = Function(id, name)\n            function.filename = key[0]\n            self.profile.functions[id] = function\n            self.function_ids[key] = id\n        else:\n            function = self.profile.functions[id]\n        return function\n\n    def parse(self):\n        self.profile[TIME] = 0.0\n        self.profile[TOTAL_TIME] = self.stats.total_tt\n        for fn, (cc, nc, tt, ct, callers) in self.stats.stats.items():\n            callee = self.get_function(fn)\n            callee.called = nc\n            callee[TOTAL_TIME] = ct\n            callee[TIME] = tt\n            self.profile[TIME] += tt\n            self.profile[TOTAL_TIME] = max(self.profile[TOTAL_TIME], ct)\n            for fn, value in callers.items():\n                caller = self.get_function(fn)\n                call = Call(callee.id)\n                if isinstance(value, tuple):\n                    for i in range(0, len(value), 4):\n                        nc, cc, tt, ct = value[i:i+4]\n                        if CALLS in call:\n                            call[CALLS] += cc\n                        else:\n                            call[CALLS] = cc\n\n                        if TOTAL_TIME in call:\n                            call[TOTAL_TIME] += ct\n                        else:\n                            call[TOTAL_TIME] = ct\n\n                else:\n                    call[CALLS] = value\n                    call[TOTAL_TIME] = ratio(value, nc)*ct\n\n                caller.add_call(call)\n\n        if False:\n            self.stats.print_stats()\n            self.stats.print_callees()\n\n        # Compute derived events\n        self.profile.validate()\n        self.profile.ratio(TIME_RATIO, TIME)\n        self.profile.ratio(TOTAL_TIME_RATIO, TOTAL_TIME)\n\n        return self.profile\n\nclass DtraceParser(LineParser):\n    \"\"\"Parser for linux perf callgraph output.\n\n    It expects output generated with\n\n        # Refer to https://github.com/brendangregg/FlameGraph#dtrace\n        # 60 seconds of user-level stacks, including time spent in-kernel, for PID 12345 at 97 Hertz\n        sudo dtrace -x ustackframes=100 -n 'profile-97 /pid == 12345/ { @[ustack()] = count(); } tick-60s { exit(0); }' -o out.user_stacks\n\n        # The dtrace output\n        gprof2dot.py -f dtrace out.user_stacks\n\n        # Notice: sometimes, the dtrace outputs format may be latin-1, and gprof2dot will fail to parse it.\n        # To solve this problem, you should use iconv to convert to UTF-8 explicitly.\n        # TODO: add an encoding flag to tell gprof2dot how to decode the profile file.\n        iconv -f ISO-8859-1 -t UTF-8 out.user_stacks | gprof2dot.py -f dtrace\n    \"\"\"\n\n    def __init__(self, infile):\n        LineParser.__init__(self, infile)\n        self.profile = Profile()\n\n    def readline(self):\n        # Override LineParser.readline to ignore comment lines\n        while True:\n            LineParser.readline(self)\n            if self.eof():\n                break\n\n            line = self.lookahead().strip()\n            if line.startswith('CPU'):\n                # The format likes:\n                # CPU     ID                    FUNCTION:NAME\n                #   1  29684                        :tick-60s\n                # Skip next line\n                LineParser.readline(self)\n            elif not line == '':\n                break\n\n\n    def parse(self):\n        # read lookahead\n        self.readline()\n\n        profile = self.profile\n        profile[SAMPLES] = 0\n        while not self.eof():\n            self.parse_event()\n\n        # compute derived data\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        if totalMethod == \"callratios\":\n            # Heuristic approach.  TOTAL_SAMPLES is unused.\n            profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n        elif totalMethod == \"callstacks\":\n            # Use the actual call chains for functions.\n            profile[TOTAL_SAMPLES] = profile[SAMPLES]\n            profile.ratio(TOTAL_TIME_RATIO, TOTAL_SAMPLES)\n            # Then propagate that total time to the calls.\n            for function in profile.functions.values():\n                for call in function.calls.values():\n                    if call.ratio is not None:\n                        callee = profile.functions[call.callee_id]\n                        call[TOTAL_TIME_RATIO] = call.ratio * callee[TOTAL_TIME_RATIO]\n        else:\n            assert False\n\n        return profile\n\n    def parse_event(self):\n        if self.eof():\n            return\n\n        callchain, count = self.parse_callchain()\n        if not callchain:\n            return\n\n        callee = callchain[0]\n        callee[SAMPLES] += count\n        self.profile[SAMPLES] += count\n\n        for caller in callchain[1:]:\n            try:\n                call = caller.calls[callee.id]\n            except KeyError:\n                call = Call(callee.id)\n                call[SAMPLES2] = count\n                caller.add_call(call)\n            else:\n                call[SAMPLES2] += count\n\n            callee = caller\n\n        # Increment TOTAL_SAMPLES only once on each function.\n        stack = set(callchain)\n        for function in stack:\n            function[TOTAL_SAMPLES] += count\n\n\n    def parse_callchain(self):\n        callchain = []\n        count = 0\n        while self.lookahead():\n            function, count = self.parse_call()\n            if function is None:\n                break\n            callchain.append(function)\n        return callchain, count\n\n    call_re = re.compile(r'^\\s+(?P<module>.*)`(?P<symbol>.*)')\n    addr2_re = re.compile(r'\\+0x[0-9a-fA-F]+$')\n\n    def parse_call(self):\n        line = self.consume()\n        mo = self.call_re.match(line)\n        if not mo:\n            # The line must be the stack count\n            return None, int(line.strip())\n\n        function_name = mo.group('symbol')\n\n        # If present, amputate program counter from function name.\n        if function_name:\n            function_name = re.sub(self.addr2_re, '', function_name)\n\n        # if not function_name or function_name == '[unknown]':\n        #     function_name = mo.group('address')\n\n        module = mo.group('module')\n\n        function_id = function_name + ':' + module\n\n        try:\n            function = self.profile.functions[function_id]\n        except KeyError:\n            function = Function(function_id, function_name)\n            function.module = os.path.basename(module)\n            function[SAMPLES] = 0\n            function[TOTAL_SAMPLES] = 0\n            self.profile.add_function(function)\n\n        return function, None\n\n\nclass CollapseParser(LineParser):\n    \"\"\"Parser for the output of stackcollapse\n\n    (from https://github.com/brendangregg/FlameGraph)\n    \"\"\"\n\n    def __init__(self, infile):\n        LineParser.__init__(self, infile)\n        self.profile = Profile()\n\n    def parse(self):\n        profile = self.profile\n        profile[SAMPLES] = 0\n\n        self.readline()\n        while not self.eof():\n            self.parse_event()\n\n        # compute derived data\n        profile.validate()\n        profile.find_cycles()\n        profile.ratio(TIME_RATIO, SAMPLES)\n        profile.call_ratios(SAMPLES2)\n        if totalMethod == \"callratios\":\n            # Heuristic approach.  TOTAL_SAMPLES is unused.\n            profile.integrate(TOTAL_TIME_RATIO, TIME_RATIO)\n        elif totalMethod == \"callstacks\":\n            # Use the actual call chains for functions.\n            profile[TOTAL_SAMPLES] = profile[SAMPLES]\n            profile.ratio(TOTAL_TIME_RATIO, TOTAL_SAMPLES)\n            # Then propagate that total time to the calls.\n            for function in compat_itervalues(profile.functions):\n                for call in compat_itervalues(function.calls):\n                    if call.ratio is not None:\n                        callee = profile.functions[call.callee_id]\n                        call[TOTAL_TIME_RATIO] = call.ratio * callee[TOTAL_TIME_RATIO]\n        else:\n            assert False\n\n        return profile\n\n    def parse_event(self):\n        line = self.consume()\n\n        stack, count = line.rsplit(' ',maxsplit=1)\n        count=int(count)\n        self.profile[SAMPLES] += count\n\n        calls = stack.split(';')\n        functions = [self._make_function(call) for call in calls]\n\n        functions[-1][SAMPLES] += count\n\n        # TOTAL_SAMPLES excludes loops\n        for func in set(functions):\n            func[TOTAL_SAMPLES] += count\n\n        # add call data\n        callee = functions[-1]\n        for caller in reversed(functions[:-1]):\n            call = caller.calls.get(callee.id)\n            if call is None:\n                call = Call(callee.id)\n                call[SAMPLES2] = 0\n                caller.add_call(call)\n            call[SAMPLES2] += count\n            callee = caller\n\n    call_re = re.compile(r'^(?P<func>[^ ]+) \\((?P<file>.*):(?P<line>[0-9]+)\\)$')\n\n    def _make_function(self, call):\n        \"\"\"turn a call str into a Function\n\n        takes a call site, as found between semicolons in the input, and returns\n        a Function definition corresponding to that call site.\n        \"\"\"\n        mo = self.call_re.match(call)\n        if mo:\n            name, module, line = mo.groups()\n            func_id = \"%s:%s\" % (module, name)\n        else:\n            name = func_id = call\n            module = None\n\n        func = self.profile.functions.get(func_id)\n        if func is None:\n            func = Function(func_id, name)\n            func.module = module\n            func[SAMPLES] = 0\n            func[TOTAL_SAMPLES] = 0\n            self.profile.add_function(func)\n        return func\n\n\nformats = {\n    \"axe\": AXEParser,\n    \"callgrind\": CallgrindParser,\n    \"collapse\": CollapseParser,\n    \"hprof\": HProfParser,\n    \"json\": JsonParser,\n    \"oprofile\": OprofileParser,\n    \"perf\": PerfParser,\n    \"prof\": GprofParser,\n    \"pstats\": PstatsParser,\n    \"sleepy\": SleepyParser,\n    \"sysprof\": SysprofParser,\n    \"xperf\": XPerfParser,\n    \"dtrace\": DtraceParser,\n}\n\n\n########################################################################\n# Output\n\n\nclass Theme:\n\n    def __init__(self,\n            bgcolor = (0.0, 0.0, 1.0),\n            mincolor = (0.0, 0.0, 0.0),\n            maxcolor = (0.0, 0.0, 1.0),\n            fontname = \"Arial\",\n            fontcolor = \"white\",\n            nodestyle = \"filled\",\n            minfontsize = 10.0,\n            maxfontsize = 10.0,\n            minpenwidth = 0.5,\n            maxpenwidth = 4.0,\n            gamma = 2.2,\n            skew = 1.0):\n        self.bgcolor = bgcolor\n        self.mincolor = mincolor\n        self.maxcolor = maxcolor\n        self.fontname = fontname\n        self.fontcolor = fontcolor\n        self.nodestyle = nodestyle\n        self.minfontsize = minfontsize\n        self.maxfontsize = maxfontsize\n        self.minpenwidth = minpenwidth\n        self.maxpenwidth = maxpenwidth\n        self.gamma = gamma\n        self.skew = skew\n\n    def graph_bgcolor(self):\n        return self.hsl_to_rgb(*self.bgcolor)\n\n    def graph_fontname(self):\n        return self.fontname\n\n    def graph_fontcolor(self):\n        return self.fontcolor\n\n    def node_bgcolor(self, weight):\n        return self.color(weight)\n\n    def node_fgcolor(self, weight):\n        if self.nodestyle == \"filled\":\n            return self.graph_bgcolor()\n        else:\n            return self.color(weight)\n\n    def node_fontsize(self, weight):\n        return self.fontsize(weight)\n\n    def node_style(self):\n        return self.nodestyle\n\n    def edge_color(self, weight):\n        return self.color(weight)\n\n    def edge_fontsize(self, weight):\n        return self.fontsize(weight)\n\n    def edge_penwidth(self, weight):\n        return max(weight*self.maxpenwidth, self.minpenwidth)\n\n    def edge_arrowsize(self, weight):\n        return 0.5 * math.sqrt(self.edge_penwidth(weight))\n\n    def fontsize(self, weight):\n        return max(weight**2 * self.maxfontsize, self.minfontsize)\n\n    def color(self, weight):\n        weight = min(max(weight, 0.0), 1.0)\n\n        hmin, smin, lmin = self.mincolor\n        hmax, smax, lmax = self.maxcolor\n\n        if self.skew < 0:\n            raise ValueError(\"Skew must be greater than 0\")\n        elif self.skew == 1.0:\n            h = hmin + weight*(hmax - hmin)\n            s = smin + weight*(smax - smin)\n            l = lmin + weight*(lmax - lmin)\n        else:\n            base = self.skew\n            h = hmin + ((hmax-hmin)*(-1.0 + (base ** weight)) / (base - 1.0))\n            s = smin + ((smax-smin)*(-1.0 + (base ** weight)) / (base - 1.0))\n            l = lmin + ((lmax-lmin)*(-1.0 + (base ** weight)) / (base - 1.0))\n\n        return self.hsl_to_rgb(h, s, l)\n\n    def hsl_to_rgb(self, h, s, l):\n        \"\"\"Convert a color from HSL color-model to RGB.\n\n        See also:\n        - http://www.w3.org/TR/css3-color/#hsl-color\n        \"\"\"\n\n        h = h % 1.0\n        s = min(max(s, 0.0), 1.0)\n        l = min(max(l, 0.0), 1.0)\n\n        if l <= 0.5:\n            m2 = l*(s + 1.0)\n        else:\n            m2 = l + s - l*s\n        m1 = l*2.0 - m2\n        r = self._hue_to_rgb(m1, m2, h + 1.0/3.0)\n        g = self._hue_to_rgb(m1, m2, h)\n        b = self._hue_to_rgb(m1, m2, h - 1.0/3.0)\n\n        # Apply gamma correction\n        r **= self.gamma\n        g **= self.gamma\n        b **= self.gamma\n\n        return (r, g, b)\n\n    def _hue_to_rgb(self, m1, m2, h):\n        if h < 0.0:\n            h += 1.0\n        elif h > 1.0:\n            h -= 1.0\n        if h*6 < 1.0:\n            return m1 + (m2 - m1)*h*6.0\n        elif h*2 < 1.0:\n            return m2\n        elif h*3 < 2.0:\n            return m1 + (m2 - m1)*(2.0/3.0 - h)*6.0\n        else:\n            return m1\n\n\nTEMPERATURE_COLORMAP = Theme(\n    mincolor = (2.0/3.0, 0.80, 0.25), # dark blue\n    maxcolor = (0.0, 1.0, 0.5), # satured red\n    gamma = 1.0\n)\n\nPINK_COLORMAP = Theme(\n    mincolor = (0.0, 1.0, 0.90), # pink\n    maxcolor = (0.0, 1.0, 0.5), # satured red\n)\n\nGRAY_COLORMAP = Theme(\n    mincolor = (0.0, 0.0, 0.85), # light gray\n    maxcolor = (0.0, 0.0, 0.0), # black\n)\n\nBW_COLORMAP = Theme(\n    minfontsize = 8.0,\n    maxfontsize = 24.0,\n    mincolor = (0.0, 0.0, 0.0), # black\n    maxcolor = (0.0, 0.0, 0.0), # black\n    minpenwidth = 0.1,\n    maxpenwidth = 8.0,\n)\n\nPRINT_COLORMAP = Theme(\n    minfontsize = 18.0,\n    maxfontsize = 30.0,\n    fontcolor = \"black\",\n    nodestyle = \"solid\",\n    mincolor = (0.0, 0.0, 0.0), # black\n    maxcolor = (0.0, 0.0, 0.0), # black\n    minpenwidth = 0.1,\n    maxpenwidth = 8.0,\n)\n\n\nthemes = {\n    \"color\": TEMPERATURE_COLORMAP,\n    \"pink\": PINK_COLORMAP,\n    \"gray\": GRAY_COLORMAP,\n    \"bw\": BW_COLORMAP,\n    \"print\": PRINT_COLORMAP,\n}\n\n\ndef sorted_iteritems(d):\n    # Used mostly for result reproducibility (while testing.)\n    keys = list(d.keys())\n    keys.sort()\n    for key in keys:\n        value = d[key]\n        yield key, value\n\n\nclass DotWriter:\n    \"\"\"Writer for the DOT language.\n\n    See also:\n    - \"The DOT Language\" specification\n      http://www.graphviz.org/doc/info/lang.html\n    \"\"\"\n\n    strip = False\n    wrap = False\n\n    def __init__(self, fp):\n        self.fp = fp\n\n    def wrap_function_name(self, name):\n        \"\"\"Split the function name on multiple lines.\"\"\"\n\n        if len(name) > 32:\n            ratio = 2.0/3.0\n            height = max(int(len(name)/(1.0 - ratio) + 0.5), 1)\n            width = max(len(name)/height, 32)\n            # TODO: break lines in symbols\n            name = textwrap.fill(name, width, break_long_words=False)\n\n        # Take away spaces\n        name = name.replace(\", \", \",\")\n        name = name.replace(\"> >\", \">>\")\n        name = name.replace(\"> >\", \">>\") # catch consecutive\n\n        return name\n\n    show_function_events = [TOTAL_TIME_RATIO, TIME_RATIO]\n    show_edge_events = [TOTAL_TIME_RATIO, CALLS]\n\n    def graphs_compare(self, profile1, profile2, theme, options):\n        self.begin_graph()\n\n        fontname = theme.graph_fontname()\n        fontcolor = theme.graph_fontcolor()\n        nodestyle = theme.node_style()\n\n        tolerance, only_slower, only_faster, color_by_difference = (\n            options.tolerance, options.only_slower, options.only_faster, options.color_by_difference)\n        self.attr('graph', fontname=fontname, ranksep=0.25, nodesep=0.125)\n        self.attr('node', fontname=fontname, style=nodestyle, fontcolor=fontcolor, width=0, height=0)\n        self.attr('edge', fontname=fontname)\n\n        functions2 = {function.name: function for _, function in sorted_iteritems(profile2.functions)}\n\n        for _, function1 in sorted_iteritems(profile1.functions):\n            labels = []\n\n            name = function1.name\n            try:\n                function2 = functions2[name]\n                if self.wrap:\n                    name = self.wrap_function_name(name)\n                if color_by_difference:\n                    min_diff, max_diff = min_max_difference(profile1, profile2)\n                labels.append(name)\n                weight_difference = 0\n                shape = 'box'\n                orientation = '0'\n                for event in self.show_function_events:\n                    if event in function1.events:\n                        event1 = function1[event]\n                        event2 = function2[event]\n\n                        difference = abs(event1 - event2) * 100\n\n                        if event == TOTAL_TIME_RATIO:\n                            weight_difference = difference\n                            if difference >= tolerance:\n                                if event2 > event1 and not only_faster:\n                                    shape = 'cds'\n                                    label = (f'{event.format(event1)} +'\n                                             f' {round_difference(difference, tolerance)}%')\n                                elif event2 < event1 and not only_slower:\n                                    orientation = \"90\"\n                                    shape = 'cds'\n                                    label = (f'{event.format(event1)} - '\n                                             f'{round_difference(difference, tolerance)}%')\n                                else:\n                                    # protection to not color by difference if we choose to show only_faster/only_slower\n                                    weight_difference = 0\n                                    label = event.format(function1[event])\n                            else:\n                                weight_difference = 0\n                                label = event.format(function1[event])\n                        else:\n                            if difference >= tolerance:\n                                if event2 > event1:\n                                    label = (f'{event.format(event1)} +'\n                                             f' {round_difference(difference, tolerance)}%')\n                                elif event2 < event1:\n                                    label = (f'{event.format(event1)} - '\n                                             f'{round_difference(difference, tolerance)}%')\n                            else:\n                                label = event.format(function1[event])\n\n                        labels.append(label)\n                        if function1.called is not None:\n                            labels.append(f\"{function1.called} {MULTIPLICATION_SIGN}/ {function2.called} {MULTIPLICATION_SIGN}\")\n\n            except KeyError:\n                shape = 'box'\n                orientation = '0'\n                weight_difference = 0\n                if function1.process is not None:\n                    labels.append(function1.process)\n                if function1.module is not None:\n                    labels.append(function1.module)\n\n                if self.strip:\n                    function_name = function1.stripped_name()\n                else:\n                    function_name = function1.name\n                if color_by_difference:\n                    min_diff, max_diff = 0, 0\n\n                # dot can't parse quoted strings longer than YY_BUF_SIZE, which\n                # defaults to 16K. But some annotated C++ functions (e.g., boost,\n                # https://github.com/jrfonseca/gprof2dot/issues/30) can exceed that\n                MAX_FUNCTION_NAME = 4096\n                if len(function_name) >= MAX_FUNCTION_NAME:\n                    sys.stderr.write('warning: truncating function name with %u chars (%s)\\n' % (len(function_name), function_name[:32] + '...'))\n                    function_name = function_name[:MAX_FUNCTION_NAME - 1] + chr(0x2026)\n\n                if self.wrap:\n                    function_name = self.wrap_function_name(function_name)\n                labels.append(function_name)\n\n                for event in self.show_function_events:\n                    if event in function1.events:\n                        label = event.format(function1[event])\n                        labels.append(label)\n                if function1.called is not None:\n                    labels.append(\"%u%s\" % (function1.called, MULTIPLICATION_SIGN))\n\n            if color_by_difference and weight_difference:\n                # min and max is calculated whe color_by_difference is true\n                weight = rescale_difference(weight_difference, min_diff, max_diff)\n\n            elif function1.weight is not None and not color_by_difference:\n                weight = function1.weight\n            else:\n                weight = 0.0\n\n            label = '\\n'.join(labels)\n\n            self.node(function1.id,\n                      label=label,\n                      orientation=orientation,\n                      color=self.color(theme.node_bgcolor(weight)),\n                      shape=shape,\n                      fontcolor=self.color(theme.node_fgcolor(weight)),\n                      fontsize=\"%f\" % theme.node_fontsize(weight),\n                      tooltip=function1.filename,\n                      )\n\n            calls2 = {call.callee_id: call for _, call in sorted_iteritems(function2.calls)}\n            functions_by_id1 = {function.id: function for _, function in sorted_iteritems(profile1.functions)}\n\n            for _, call1 in sorted_iteritems(function1.calls):\n                labels = []\n                try:\n                    # if profiles do not have identical setups, callee_id will not be identical either\n                    call_id1 = call1.callee_id\n                    call_name = functions_by_id1[call_id1].name\n                    call_id2 = functions2[call_name].id\n                    call2 = calls2[call_id2]\n                    for event in self.show_edge_events:\n                        if event in call1.events:\n                            label = f'{event.format(call1[event])} / {event.format(call2[event])}'\n                            labels.append(label)\n                except KeyError:\n                    for event in self.show_edge_events:\n                        if event in call1.events:\n                            label = f'{event.format(call1[event])}'\n                            labels.append(label)\n\n                weight = 0 if color_by_difference else call1.weight\n                label = '\\n'.join(labels)\n                self.edge(function1.id, call1.callee_id,\n                          label=label,\n                          color=self.color(theme.edge_color(weight)),\n                          fontcolor=self.color(theme.edge_color(weight)),\n                          fontsize=\"%.2f\" % theme.edge_fontsize(weight),\n                          penwidth=\"%.2f\" % theme.edge_penwidth(weight),\n                          labeldistance=\"%.2f\" % theme.edge_penwidth(weight),\n                          arrowsize=\"%.2f\" % theme.edge_arrowsize(weight),\n                          )\n        self.end_graph()\n\n    def graph(self, profile, theme):\n        self.begin_graph()\n\n        fontname = theme.graph_fontname()\n        fontcolor = theme.graph_fontcolor()\n        nodestyle = theme.node_style()\n\n        self.attr('graph', fontname=fontname, ranksep=0.25, nodesep=0.125)\n        self.attr('node', fontname=fontname, shape=\"box\", style=nodestyle, fontcolor=fontcolor, width=0, height=0)\n        self.attr('edge', fontname=fontname)\n\n        for _, function in sorted_iteritems(profile.functions):\n            labels = []\n            if function.process is not None:\n                labels.append(function.process)\n            if function.module is not None:\n                labels.append(function.module)\n\n            if self.strip:\n                function_name = function.stripped_name()\n            else:\n                function_name = function.name\n\n            # dot can't parse quoted strings longer than YY_BUF_SIZE, which\n            # defaults to 16K. But some annotated C++ functions (e.g., boost,\n            # https://github.com/jrfonseca/gprof2dot/issues/30) can exceed that\n            MAX_FUNCTION_NAME = 4096\n            if len(function_name) >= MAX_FUNCTION_NAME:\n                sys.stderr.write('warning: truncating function name with %u chars (%s)\\n' % (len(function_name), function_name[:32] + '...'))\n                function_name = function_name[:MAX_FUNCTION_NAME - 1] + chr(0x2026)\n\n            if self.wrap:\n                function_name = self.wrap_function_name(function_name)\n            labels.append(function_name)\n\n            for event in self.show_function_events:\n                if event in function.events:\n                    label = event.format(function[event])\n                    labels.append(label)\n            if function.called is not None:\n                labels.append(\"%u%s\" % (function.called, MULTIPLICATION_SIGN))\n\n            if function.weight is not None:\n                weight = function.weight\n            else:\n                weight = 0.0\n\n            label = '\\n'.join(labels)\n            self.node(function.id,\n                label = label,\n                color = self.color(theme.node_bgcolor(weight)),\n                fontcolor = self.color(theme.node_fgcolor(weight)),\n                fontsize = \"%.2f\" % theme.node_fontsize(weight),\n                tooltip = function.filename,\n            )\n\n            for _, call in sorted_iteritems(function.calls):\n                callee = profile.functions[call.callee_id]\n\n                labels = []\n                for event in self.show_edge_events:\n                    if event in call.events:\n                        label = event.format(call[event])\n                        labels.append(label)\n\n                if call.weight is not None:\n                    weight = call.weight\n                elif callee.weight is not None:\n                    weight = callee.weight\n                else:\n                    weight = 0.0\n\n                label = '\\n'.join(labels)\n\n                self.edge(function.id, call.callee_id,\n                    label = label,\n                    color = self.color(theme.edge_color(weight)),\n                    fontcolor = self.color(theme.edge_color(weight)),\n                    fontsize = \"%.2f\" % theme.edge_fontsize(weight),\n                    penwidth = \"%.2f\" % theme.edge_penwidth(weight),\n                    labeldistance = \"%.2f\" % theme.edge_penwidth(weight),\n                    arrowsize = \"%.2f\" % theme.edge_arrowsize(weight),\n                )\n\n        self.end_graph()\n\n    def begin_graph(self):\n        self.write('digraph {\\n')\n        # Work-around graphviz bug[1]: unnamed graphs have \"%3\" tooltip in SVG\n        # output. The bug was fixed upstream, but graphviz shipped in recent\n        # Linux distros (for example, Ubuntu 24.04) still has the bug.\n        # [1] https://gitlab.com/graphviz/graphviz/-/issues/1376\n        self.write('\\ttooltip=\" \"\\n')\n\n    def end_graph(self):\n        self.write('}\\n')\n\n    def attr(self, what, **attrs):\n        self.write(\"\\t\")\n        self.write(what)\n        self.attr_list(attrs)\n        self.write(\";\\n\")\n\n    def node(self, node, **attrs):\n        self.write(\"\\t\")\n        self.node_id(node)\n        self.attr_list(attrs)\n        self.write(\";\\n\")\n\n    def edge(self, src, dst, **attrs):\n        self.write(\"\\t\")\n        self.node_id(src)\n        self.write(\" -> \")\n        self.node_id(dst)\n        self.attr_list(attrs)\n        self.write(\";\\n\")\n\n    def attr_list(self, attrs):\n        if not attrs:\n            return\n        self.write(' [')\n        first = True\n        for name, value in sorted_iteritems(attrs):\n            if value is None:\n                continue\n            if first:\n                first = False\n            else:\n                self.write(\", \")\n            assert isinstance(name, str)\n            assert name.isidentifier()\n            self.write(name)\n            self.write('=')\n            self.id(value)\n        self.write(']')\n\n    def node_id(self, id):\n        # Node IDs need to be unique (can't be truncated) but dot doesn't allow\n        # IDs longer than 16384 characters, so use an hash instead for the huge\n        # C++ symbols that can arise, as seen in\n        # https://github.com/jrfonseca/gprof2dot/issues/99\n        if isinstance(id, str) and len(id) > 1024:\n            id = '_' + hashlib.sha1(id.encode('utf-8'), usedforsecurity=False).hexdigest()\n        self.id(id)\n\n    def id(self, id):\n        if isinstance(id, (int, float)):\n            s = str(id)\n        elif isinstance(id, str):\n            if id.isalnum() and not id.startswith('0x'):\n                s = id\n            else:\n                s = self.escape(id)\n        else:\n            raise TypeError\n        self.write(s)\n\n    def color(self, rgb):\n        r, g, b = rgb\n\n        def float2int(f):\n            if f <= 0.0:\n                return 0\n            if f >= 1.0:\n                return 255\n            return int(255.0*f + 0.5)\n\n        return \"#\" + \"\".join([\"%02x\" % float2int(c) for c in (r, g, b)])\n\n    def escape(self, s):\n        s = s.replace('\\\\', r'\\\\')\n        s = s.replace('\\n', r'\\n')\n        s = s.replace('\\t', r'\\t')\n        s = s.replace('\"', r'\\\"')\n        return '\"' + s + '\"'\n\n    def write(self, s):\n        self.fp.write(s)\n\n\n\n########################################################################\n# Main program\n\n\ndef naturalJoin(values):\n    if len(values) >= 2:\n        return ', '.join(values[:-1]) + ' or ' + values[-1]\n\n    else:\n        return ''.join(values)\n\n\ndef main(argv=sys.argv[1:]):\n    \"\"\"Main program.\"\"\"\n\n    global totalMethod, timeFormat\n\n    formatNames = list(formats.keys())\n    formatNames.sort()\n\n    themeNames = list(themes.keys())\n    themeNames.sort()\n\n    labelNames = list(labels.keys())\n    labelNames.sort()\n\n    optparser = optparse.OptionParser(\n        usage=\"\\n\\t%prog [options] [file] ...\")\n    optparser.add_option(\n        '-o', '--output', metavar='FILE',\n        type=\"string\", dest=\"output\",\n        help=\"output filename [stdout]\")\n    optparser.add_option(\n        '-n', '--node-thres', metavar='PERCENTAGE',\n        type=\"float\", dest=\"node_thres\", default=0.5,\n        help=\"eliminate nodes below this threshold [default: %default]\")\n    optparser.add_option(\n        '-e', '--edge-thres', metavar='PERCENTAGE',\n        type=\"float\", dest=\"edge_thres\", default=0.1,\n        help=\"eliminate edges below this threshold [default: %default]\")\n    optparser.add_option(\n        '-f', '--format',\n        type=\"choice\", choices=formatNames,\n        dest=\"format\", default=\"prof\",\n        help=\"profile format: %s [default: %%default]\" % naturalJoin(formatNames))\n    optparser.add_option(\n        '--total',\n        type=\"choice\", choices=('callratios', 'callstacks'),\n        dest=\"totalMethod\", default=totalMethod,\n        help=\"preferred method of calculating total time: callratios or callstacks (currently affects only perf format) [default: %default]\")\n    optparser.add_option(\n        '-c', '--colormap',\n        type=\"choice\", choices=themeNames,\n        dest=\"theme\", default=\"color\",\n        help=\"color map: %s [default: %%default]\" % naturalJoin(themeNames))\n    optparser.add_option(\n        '-s', '--strip',\n        action=\"store_true\",\n        dest=\"strip\", default=False,\n        help=\"strip function parameters, template parameters, and const modifiers from demangled C++ function names\")\n    optparser.add_option(\n        '--color-nodes-by-selftime',\n        action=\"store_true\",\n        dest=\"color_nodes_by_selftime\", default=False,\n        help=\"color nodes by self time, rather than by total time (sum of self and descendants)\")\n    optparser.add_option(\n        '--colour-nodes-by-selftime',\n        action=\"store_true\",\n        dest=\"color_nodes_by_selftime\",\n        help=optparse.SUPPRESS_HELP)\n    optparser.add_option(\n        '-w', '--wrap',\n        action=\"store_true\",\n        dest=\"wrap\", default=False,\n        help=\"wrap function names\")\n    optparser.add_option(\n        '--show-samples',\n        action=\"store_true\",\n        dest=\"show_samples\", default=False,\n        help=\"show function samples\")\n    optparser.add_option(\n        '--time-format',\n        default=timeFormat,\n        help=\"format to use for showing time values [default: %default]\")\n    optparser.add_option(\n        '--node-label', metavar='MEASURE',\n        type='choice', choices=labelNames,\n        action='append',\n        dest='node_labels',\n        help=\"measurements to on show the node (can be specified multiple times): %s [default: %s]\" % (\n            naturalJoin(labelNames), ', '.join(defaultLabelNames)))\n    # add option to show information on available entries ()\n    optparser.add_option(\n        '--list-functions',\n        type=\"string\",\n        dest=\"list_functions\", default=None,\n        help=\"\"\"\\\nlist functions available for selection in -z or -l, requires selector argument\n( use '+' to select all).\nRecall that the selector argument is used with Unix/Bash globbing/pattern matching,\nand that entries are formatted '<pkg>:<linenum>:<function>'. When argument starts\nwith '%', a dump of all available information is performed for selected entries,\n after removal of leading '%'.\n\"\"\")\n    # add option to create subtree or show paths\n    optparser.add_option(\n        '-z', '--root',\n        type=\"string\",\n        dest=\"root\", default=\"\",\n        help=\"prune call graph to show only descendants of specified root function\")\n    optparser.add_option(\n        '-l', '--leaf',\n        type=\"string\",\n        dest=\"leaf\", default=\"\",\n        help=\"prune call graph to show only ancestors of specified leaf function\")\n    optparser.add_option(\n        '--depth',\n        type=\"int\",\n        dest=\"depth\", default=-1,\n        help=\"prune call graph to show only descendants or ancestors until specified depth\")\n    # add a new option to control skew of the colorization curve\n    optparser.add_option(\n        '--skew',\n        type=\"float\", dest=\"theme_skew\", default=1.0,\n        help=\"skew the colorization curve.  Values < 1.0 give more variety to lower percentages.  Values > 1.0 give less variety to lower percentages\")\n    # add option for filtering by file path\n    optparser.add_option(\n        '-p', '--path', action=\"append\",\n        type=\"string\", dest=\"filter_paths\",\n        help=\"Filter all modules not in a specified path\")\n    optparser.add_option(\n        '--compare',\n        action=\"store_true\",\n        dest=\"compare\", default=False,\n        help=\"Compare two graphs with almost identical structure. With this option two files should be provided.\"\n             \"gprof2dot.py [options] --compare [file1] [file2] ...\")\n    optparser.add_option(\n        '--compare-tolerance',\n        type=\"float\", dest=\"tolerance\", default=0.001,\n        help=\"Tolerance threshold for node difference (default=0.001%).\"\n             \"If the difference is below this value the nodes are considered identical.\")\n    optparser.add_option(\n        '--compare-only-slower',\n        action=\"store_true\",\n        dest=\"only_slower\", default=False,\n        help=\"Display comparison only for function which are slower in second graph.\")\n    optparser.add_option(\n        '--compare-only-faster',\n        action=\"store_true\",\n        dest=\"only_faster\", default=False,\n        help=\"Display comparison only for function which are faster in second graph.\")\n    optparser.add_option(\n        '--compare-color-by-difference',\n        action=\"store_true\",\n        dest=\"color_by_difference\", default=False,\n        help=\"Color nodes based on the value of the difference. \"\n             \"Nodes with the largest differences represent the hot spots.\")\n    (options, args) = optparser.parse_args(argv)\n\n    if len(args) > 1 and options.format != 'pstats' and not options.compare:\n        optparser.error('incorrect number of arguments')\n\n    try:\n        theme = themes[options.theme]\n    except KeyError:\n        optparser.error('invalid colormap \\'%s\\'' % options.theme)\n\n    # set skew on the theme now that it has been picked.\n    if options.theme_skew:\n        theme.skew = options.theme_skew\n\n    totalMethod = options.totalMethod\n    timeFormat = options.time_format\n\n    try:\n        Format = formats[options.format]\n    except KeyError:\n        optparser.error('invalid format \\'%s\\'' % options.format)\n\n    if Format.stdinInput:\n        if not args:\n            fp = sys.stdin\n            parser = Format(fp)\n        elif options.compare:\n            fp1 = open(args[0], 'rt', encoding='UTF-8')\n            fp2 = open(args[1], 'rt', encoding='UTF-8')\n            parser1 = Format(fp1)\n            parser2 = Format(fp2)\n        else:\n            fp = open(args[0], 'rb')\n            bom = fp.read(2)\n            if bom == codecs.BOM_UTF16_LE:\n                # Default on Windows PowerShell (https://github.com/jrfonseca/gprof2dot/issues/88)\n                encoding = 'utf-16le'\n            else:\n                encoding = 'utf-8'\n            fp.seek(0)\n            fp = io.TextIOWrapper(fp, encoding=encoding)\n            parser = Format(fp)\n    elif Format.multipleInput:\n        if not args:\n            optparser.error('at least a file must be specified for %s input' % options.format)\n        if options.compare:\n            parser1 = Format(args[-2])\n            parser2 = Format(args[-1])\n        else:\n            parser = Format(*args)\n    else:\n        if len(args) != 1:\n            optparser.error('exactly one file must be specified for %s input' % options.format)\n        parser = Format(args[0])\n\n    if options.compare:\n        profile1 = parser1.parse()\n        profile2 = parser2.parse()\n    else:\n        profile = parser.parse()\n\n    if options.output is None:\n        output = open(sys.stdout.fileno(), mode='wt', encoding='UTF-8', closefd=False)\n    else:\n        output = open(options.output, 'wt', encoding='UTF-8')\n\n    dot = DotWriter(output)\n    dot.strip = options.strip\n    dot.wrap = options.wrap\n\n    labelNames = options.node_labels or defaultLabelNames\n    dot.show_function_events = [labels[l] for l in labelNames]\n    if options.show_samples:\n        dot.show_function_events.append(SAMPLES)\n\n    if options.compare:\n        profile1.prune(options.node_thres/100.0, options.edge_thres/100.0, options.filter_paths,\n                       options.color_nodes_by_selftime)\n        profile2.prune(options.node_thres/100.0, options.edge_thres/100.0, options.filter_paths,\n                       options.color_nodes_by_selftime)\n\n        if options.root:\n            profile1.prune_root(profile1.getFunctionIds(options.root), options.depth)\n            profile2.prune_root(profile2.getFunctionIds(options.root), options.depth)\n    else:\n        profile.prune(options.node_thres/100.0, options.edge_thres/100.0, options.filter_paths,\n                      options.color_nodes_by_selftime)\n        if options.root:\n            rootIds = profile.getFunctionIds(options.root)\n            if not rootIds:\n                sys.stderr.write('root node ' + options.root + ' not found (might already be pruned : try -e0 -n0 flags)\\n')\n                sys.exit(1)\n            profile.prune_root(rootIds, options.depth)\n\n    if options.list_functions:\n        profile.printFunctionIds(selector=options.list_functions)\n        sys.exit(0)\n\n    if options.leaf:\n        leafIds = profile.getFunctionIds(options.leaf)\n        if not leafIds:\n            sys.stderr.write('leaf node ' + options.leaf + ' not found (maybe already pruned : try -e0 -n0 flags)\\n')\n            sys.exit(1)\n        profile.prune_leaf(leafIds, options.depth)\n\n    if options.compare:\n        dot.graphs_compare(profile1, profile2, theme, options)\n    else:\n        dot.graph(profile, theme)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0791015625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n"
        },
        {
          "name": "sample.svg",
          "type": "blob",
          "size": 75.908203125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: %3 Pages: 1 -->\n<svg width=\"1111pt\" height=\"1335pt\"\n viewBox=\"0.00 0.00 1110.50 1335.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 1331)\">\n<title>%3</title>\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-1331 1106.5,-1331 1106.5,4 -4,4\"/>\n<!-- 1 -->\n<g id=\"node1\" class=\"node\">\n<title>1</title>\n<polygon fill=\"#ff0000\" stroke=\"#ff0000\" points=\"565,-1327 510,-1327 510,-1286 565,-1286 565,-1327\"/>\n<text text-anchor=\"middle\" x=\"537.5\" y=\"-1315\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">main</text>\n<text text-anchor=\"middle\" x=\"537.5\" y=\"-1304\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">100.00%</text>\n<text text-anchor=\"middle\" x=\"537.5\" y=\"-1293\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n</g>\n<!-- 2 -->\n<g id=\"node2\" class=\"node\">\n<title>2</title>\n<polygon fill=\"#21bb09\" stroke=\"#21bb09\" points=\"476.5,-1246 378.5,-1246 378.5,-1194 476.5,-1194 476.5,-1246\"/>\n<text text-anchor=\"middle\" x=\"427.5\" y=\"-1234\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">read_all_makefiles</text>\n<text text-anchor=\"middle\" x=\"427.5\" y=\"-1223\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">53.42%</text>\n<text text-anchor=\"middle\" x=\"427.5\" y=\"-1212\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"427.5\" y=\"-1201\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5×</text>\n</g>\n<!-- 1&#45;&gt;2 -->\n<g id=\"edge1\" class=\"edge\">\n<title>1&#45;&gt;2</title>\n<path fill=\"none\" stroke=\"#21bb09\" stroke-width=\"2.14\" d=\"M511.99,-1285.9C498.43,-1275.49 481.47,-1262.46 466.32,-1250.82\"/>\n<polygon fill=\"#21bb09\" stroke=\"#21bb09\" stroke-width=\"2.14\" points=\"467.74,-1248.69 460.39,-1246.27 464.62,-1252.74 467.74,-1248.69\"/>\n<text text-anchor=\"middle\" x=\"516.5\" y=\"-1269\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21bb09\">53.42%</text>\n<text text-anchor=\"middle\" x=\"516.5\" y=\"-1258\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21bb09\">5×</text>\n</g>\n<!-- 5 -->\n<g id=\"node3\" class=\"node\">\n<title>5</title>\n<polygon fill=\"#0ba74b\" stroke=\"#0ba74b\" points=\"1031.5,-1002 933.5,-1002 933.5,-950 1031.5,-950 1031.5,-1002\"/>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-990\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">update_goal_chain</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-979\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">39.73%</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-968\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-957\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">10×</text>\n</g>\n<!-- 1&#45;&gt;5 -->\n<g id=\"edge2\" class=\"edge\">\n<title>1&#45;&gt;5</title>\n<path fill=\"none\" stroke=\"#0ba74b\" stroke-width=\"1.59\" d=\"M565.02,-1305.05C614.85,-1303.03 721.66,-1293.07 795.5,-1246 887.59,-1187.3 946.73,-1065.33 970.55,-1008.02\"/>\n<polygon fill=\"#0ba74b\" stroke=\"#0ba74b\" stroke-width=\"1.59\" points=\"972.66,-1008.69 973.01,-1002.02 968.58,-1007.01 972.66,-1008.69\"/>\n<text text-anchor=\"middle\" x=\"920.5\" y=\"-1162\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0ba74b\">39.73%</text>\n<text text-anchor=\"middle\" x=\"920.5\" y=\"-1151\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0ba74b\">10×</text>\n</g>\n<!-- 36 -->\n<g id=\"node4\" class=\"node\">\n<title>36</title>\n<polygon fill=\"#0d1876\" stroke=\"#0d1876\" points=\"790.5,-1246 692.5,-1246 692.5,-1194 790.5,-1194 790.5,-1246\"/>\n<text text-anchor=\"middle\" x=\"741.5\" y=\"-1234\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">convert_to_pattern</text>\n<text text-anchor=\"middle\" x=\"741.5\" y=\"-1223\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.77%</text>\n<text text-anchor=\"middle\" x=\"741.5\" y=\"-1212\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"741.5\" y=\"-1201\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5×</text>\n</g>\n<!-- 1&#45;&gt;36 -->\n<g id=\"edge3\" class=\"edge\">\n<title>1&#45;&gt;36</title>\n<path fill=\"none\" stroke=\"#0d1876\" stroke-width=\"0.5\" d=\"M565.01,-1294.1C596.64,-1281 649.28,-1259.2 688.86,-1242.81\"/>\n<polygon fill=\"#0d1876\" stroke=\"#0d1876\" stroke-width=\"0.5\" points=\"689.4,-1243.91 692.16,-1241.44 688.46,-1241.64 689.4,-1243.91\"/>\n<text text-anchor=\"middle\" x=\"671.5\" y=\"-1269\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1876\">2.77%</text>\n<text text-anchor=\"middle\" x=\"671.5\" y=\"-1258\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1876\">5×</text>\n</g>\n<!-- 37 -->\n<g id=\"node5\" class=\"node\">\n<title>37</title>\n<polygon fill=\"#0d1776\" stroke=\"#0d1776\" points=\"114.5,-910 50.5,-910 50.5,-858 114.5,-858 114.5,-910\"/>\n<text text-anchor=\"middle\" x=\"82.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">snap_deps</text>\n<text text-anchor=\"middle\" x=\"82.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.51%</text>\n<text text-anchor=\"middle\" x=\"82.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"82.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5×</text>\n</g>\n<!-- 1&#45;&gt;37 -->\n<g id=\"edge4\" class=\"edge\">\n<title>1&#45;&gt;37</title>\n<path fill=\"none\" stroke=\"#0d1776\" stroke-width=\"0.5\" d=\"M509.98,-1305.63C418.83,-1305.35 132.5,-1298.3 132.5,-1221 132.5,-1221 132.5,-1221 132.5,-975 132.5,-952.19 120.07,-929.76 107.61,-912.99\"/>\n<polygon fill=\"#0d1776\" stroke=\"#0d1776\" stroke-width=\"0.5\" points=\"108.54,-912.19 105.45,-910.14 106.59,-913.67 108.54,-912.19\"/>\n<text text-anchor=\"middle\" x=\"146.5\" y=\"-1101\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">2.51%</text>\n<text text-anchor=\"middle\" x=\"146.5\" y=\"-1090\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">5×</text>\n</g>\n<!-- 47 -->\n<g id=\"node6\" class=\"node\">\n<title>47</title>\n<polygon fill=\"#0d1174\" stroke=\"#0d1174\" points=\"658,-1246 519,-1246 519,-1194 658,-1194 658,-1246\"/>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-1234\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">install_default_implicit_rules</text>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-1223\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.95%</text>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-1212\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"588.5\" y=\"-1201\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5×</text>\n</g>\n<!-- 1&#45;&gt;47 -->\n<g id=\"edge5\" class=\"edge\">\n<title>1&#45;&gt;47</title>\n<path fill=\"none\" stroke=\"#0d1174\" stroke-width=\"0.5\" d=\"M549.33,-1285.9C555.89,-1275.02 564.17,-1261.3 571.43,-1249.28\"/>\n<polygon fill=\"#0d1174\" stroke=\"#0d1174\" stroke-width=\"0.5\" points=\"572.49,-1249.9 573.25,-1246.27 570.39,-1248.63 572.49,-1249.9\"/>\n<text text-anchor=\"middle\" x=\"582.5\" y=\"-1269\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">0.95%</text>\n<text text-anchor=\"middle\" x=\"582.5\" y=\"-1258\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">5×</text>\n</g>\n<!-- 48 -->\n<g id=\"node7\" class=\"node\">\n<title>48</title>\n<polygon fill=\"#0d1074\" stroke=\"#0d1074\" points=\"113,-1185 0,-1185 0,-1133 113,-1133 113,-1185\"/>\n<text text-anchor=\"middle\" x=\"56.5\" y=\"-1173\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">define_variable_in_set</text>\n<text text-anchor=\"middle\" x=\"56.5\" y=\"-1162\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.75%</text>\n<text text-anchor=\"middle\" x=\"56.5\" y=\"-1151\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"56.5\" y=\"-1140\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1420×</text>\n</g>\n<!-- 1&#45;&gt;48 -->\n<g id=\"edge6\" class=\"edge\">\n<title>1&#45;&gt;48</title>\n<path fill=\"none\" stroke=\"#0d0d73\" stroke-width=\"0.5\" d=\"M509.78,-1305.46C418.35,-1305.07 130.27,-1301.87 97.5,-1277 70.26,-1256.33 61.04,-1216.25 57.96,-1188.82\"/>\n<polygon fill=\"#0d0d73\" stroke=\"#0d0d73\" stroke-width=\"0.5\" points=\"59.17,-1188.56 57.59,-1185.21 56.73,-1188.81 59.17,-1188.56\"/>\n<text text-anchor=\"middle\" x=\"111.5\" y=\"-1269\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0d73\">0.14%</text>\n<text text-anchor=\"middle\" x=\"111.5\" y=\"-1258\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0d73\">255×</text>\n</g>\n<!-- 64 -->\n<g id=\"node8\" class=\"node\">\n<title>64</title>\n<polygon fill=\"#21ba09\" stroke=\"#21ba09\" points=\"457,-1124 380,-1124 380,-1072 457,-1072 457,-1124\"/>\n<text text-anchor=\"middle\" x=\"418.5\" y=\"-1112\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">eval_makefile</text>\n<text text-anchor=\"middle\" x=\"418.5\" y=\"-1101\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">53.39%</text>\n<text text-anchor=\"middle\" x=\"418.5\" y=\"-1090\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"418.5\" y=\"-1079\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">37×</text>\n</g>\n<!-- 2&#45;&gt;64 -->\n<g id=\"edge7\" class=\"edge\">\n<title>2&#45;&gt;64</title>\n<path fill=\"none\" stroke=\"#21ba09\" stroke-width=\"2.14\" d=\"M425.61,-1193.84C424.26,-1175.76 422.42,-1151.22 420.95,-1131.63\"/>\n<polygon fill=\"#21ba09\" stroke=\"#21ba09\" stroke-width=\"2.14\" points=\"423.48,-1131.21 420.38,-1124.12 418.38,-1131.59 423.48,-1131.21\"/>\n<text text-anchor=\"middle\" x=\"442.5\" y=\"-1162\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21ba09\">53.39%</text>\n<text text-anchor=\"middle\" x=\"442.5\" y=\"-1151\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21ba09\">5×</text>\n</g>\n<!-- 43 -->\n<g id=\"node19\" class=\"node\">\n<title>43</title>\n<polygon fill=\"#0d1375\" stroke=\"#0d1375\" points=\"1102.5,-420 1028.5,-420 1028.5,-368 1102.5,-368 1102.5,-420\"/>\n<text text-anchor=\"middle\" x=\"1065.5\" y=\"-408\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">reap_children</text>\n<text text-anchor=\"middle\" x=\"1065.5\" y=\"-397\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1.50%</text>\n<text text-anchor=\"middle\" x=\"1065.5\" y=\"-386\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"1065.5\" y=\"-375\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">56×</text>\n</g>\n<!-- 5&#45;&gt;43 -->\n<g id=\"edge18\" class=\"edge\">\n<title>5&#45;&gt;43</title>\n<path fill=\"none\" stroke=\"#0d0e73\" stroke-width=\"0.5\" d=\"M1024.97,-949.66C1045.39,-934 1065.5,-911.78 1065.5,-885 1065.5,-885 1065.5,-885 1065.5,-485 1065.5,-464.66 1065.5,-441.74 1065.5,-424.12\"/>\n<polygon fill=\"#0d0e73\" stroke=\"#0d0e73\" stroke-width=\"0.5\" points=\"1066.73,-423.72 1065.5,-420.22 1064.28,-423.72 1066.73,-423.72\"/>\n<text text-anchor=\"middle\" x=\"1079.5\" y=\"-673\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">0.27%</text>\n<text text-anchor=\"middle\" x=\"1079.5\" y=\"-662\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">10×</text>\n</g>\n<!-- 108 -->\n<g id=\"node20\" class=\"node\">\n<title>108</title>\n<polygon fill=\"#0ba74d\" stroke=\"#0ba74d\" points=\"1014.5,-910 950.5,-910 950.5,-858 1014.5,-858 1014.5,-910\"/>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">update_file</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">39.46%</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">209×</text>\n</g>\n<!-- 5&#45;&gt;108 -->\n<g id=\"edge19\" class=\"edge\">\n<title>5&#45;&gt;108</title>\n<path fill=\"none\" stroke=\"#0ba74d\" stroke-width=\"1.58\" d=\"M982.5,-949.93C982.5,-939.68 982.5,-927.7 982.5,-916.84\"/>\n<polygon fill=\"#0ba74d\" stroke=\"#0ba74d\" stroke-width=\"1.58\" points=\"984.71,-916.55 982.5,-910.25 980.3,-916.55 984.71,-916.55\"/>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0ba74d\">39.46%</text>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0ba74d\">42×</text>\n</g>\n<!-- 19 -->\n<g id=\"node26\" class=\"node\">\n<title>19</title>\n<polygon fill=\"#0d2279\" stroke=\"#0d2279\" points=\"747,-512 684,-512 684,-460 747,-460 747,-512\"/>\n<text text-anchor=\"middle\" x=\"715.5\" y=\"-500\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">lookup_file</text>\n<text text-anchor=\"middle\" x=\"715.5\" y=\"-489\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">4.93%</text>\n<text text-anchor=\"middle\" x=\"715.5\" y=\"-478\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"715.5\" y=\"-467\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">9748×</text>\n</g>\n<!-- 36&#45;&gt;19 -->\n<g id=\"edge53\" class=\"edge\">\n<title>36&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"#0d0f74\" stroke-width=\"0.5\" d=\"M741.5,-1193.72C741.5,-1169.43 741.5,-1131.71 741.5,-1099 741.5,-1099 741.5,-1099 741.5,-929 741.5,-773.06 725.17,-586.7 718.39,-516.06\"/>\n<polygon fill=\"#0d0f74\" stroke=\"#0d0f74\" stroke-width=\"0.5\" points=\"719.6,-515.75 718.04,-512.38 717.16,-515.98 719.6,-515.75\"/>\n<text text-anchor=\"middle\" x=\"753.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f74\">0.59%</text>\n<text text-anchor=\"middle\" x=\"753.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f74\">1172×</text>\n</g>\n<!-- 40 -->\n<g id=\"node47\" class=\"node\">\n<title>40</title>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" points=\"897,-1124 798,-1124 798,-1072 897,-1072 897,-1124\"/>\n<text text-anchor=\"middle\" x=\"847.5\" y=\"-1112\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">convert_suffix_rule</text>\n<text text-anchor=\"middle\" x=\"847.5\" y=\"-1101\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.18%</text>\n<text text-anchor=\"middle\" x=\"847.5\" y=\"-1090\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"847.5\" y=\"-1079\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">115×</text>\n</g>\n<!-- 36&#45;&gt;40 -->\n<g id=\"edge54\" class=\"edge\">\n<title>36&#45;&gt;40</title>\n<path fill=\"none\" stroke=\"#0d1676\" stroke-width=\"0.5\" d=\"M763.72,-1193.84C780.96,-1174.32 804.86,-1147.27 822.72,-1127.05\"/>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" stroke-width=\"0.5\" points=\"823.91,-1127.56 825.31,-1124.12 822.07,-1125.93 823.91,-1127.56\"/>\n<text text-anchor=\"middle\" x=\"829.5\" y=\"-1162\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">2.18%</text>\n<text text-anchor=\"middle\" x=\"829.5\" y=\"-1151\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">115×</text>\n</g>\n<!-- 37&#45;&gt;19 -->\n<g id=\"edge55\" class=\"edge\">\n<title>37&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"#0d1776\" stroke-width=\"0.5\" d=\"M114.83,-860.54C120.23,-856.21 124.68,-852.07 126.5,-849 152.45,-805.26 129.37,-784.55 144.5,-736 157.98,-692.73 150.62,-668.9 188.5,-644 210.34,-629.65 397.8,-639.72 423.5,-635 549.43,-611.87 605.87,-633.44 696.5,-543 703.81,-535.7 708.31,-525.49 711.08,-515.78\"/>\n<polygon fill=\"#0d1776\" stroke=\"#0d1776\" stroke-width=\"0.5\" points=\"712.31,-515.93 712.02,-512.23 709.94,-515.3 712.31,-515.93\"/>\n<text text-anchor=\"middle\" x=\"202.5\" y=\"-673\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">2.38%</text>\n<text text-anchor=\"middle\" x=\"202.5\" y=\"-662\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">4707×</text>\n</g>\n<!-- 44 -->\n<g id=\"node46\" class=\"node\">\n<title>44</title>\n<polygon fill=\"#0d1375\" stroke=\"#0d1375\" points=\"121.5,-788 65.5,-788 65.5,-736 121.5,-736 121.5,-788\"/>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-776\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">enter_file</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1.41%</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"93.5\" y=\"-743\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2736×</text>\n</g>\n<!-- 37&#45;&gt;44 -->\n<g id=\"edge56\" class=\"edge\">\n<title>37&#45;&gt;44</title>\n<path fill=\"none\" stroke=\"#0d0d73\" stroke-width=\"0.5\" d=\"M62.36,-857.9C60.8,-855.02 59.46,-852.03 58.5,-849 51.51,-826.97 49.5,-818.29 58.5,-797 59.69,-794.2 61.23,-791.51 63,-788.96\"/>\n<polygon fill=\"#0d0d73\" stroke=\"#0d0d73\" stroke-width=\"0.5\" points=\"64.07,-789.57 65.19,-786.04 62.11,-788.11 64.07,-789.57\"/>\n<text text-anchor=\"middle\" x=\"72.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0d73\">0.13%</text>\n<text text-anchor=\"middle\" x=\"72.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0d73\">247×</text>\n</g>\n<!-- 46 -->\n<g id=\"node49\" class=\"node\">\n<title>46</title>\n<polygon fill=\"#0d1174\" stroke=\"#0d1174\" points=\"849.5,-1063 751.5,-1063 751.5,-1011 849.5,-1011 849.5,-1063\"/>\n<text text-anchor=\"middle\" x=\"800.5\" y=\"-1051\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">install_pattern_rule</text>\n<text text-anchor=\"middle\" x=\"800.5\" y=\"-1040\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.95%</text>\n<text text-anchor=\"middle\" x=\"800.5\" y=\"-1029\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"800.5\" y=\"-1018\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">45×</text>\n</g>\n<!-- 47&#45;&gt;46 -->\n<g id=\"edge67\" class=\"edge\">\n<title>47&#45;&gt;46</title>\n<path fill=\"none\" stroke=\"#0d1174\" stroke-width=\"0.5\" d=\"M617.98,-1193.83C657.42,-1160.16 727.13,-1100.64 768.04,-1065.72\"/>\n<polygon fill=\"#0d1174\" stroke=\"#0d1174\" stroke-width=\"0.5\" points=\"769.07,-1066.45 770.93,-1063.24 767.47,-1064.59 769.07,-1066.45\"/>\n<text text-anchor=\"middle\" x=\"698.5\" y=\"-1162\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">0.95%</text>\n<text text-anchor=\"middle\" x=\"698.5\" y=\"-1151\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">45×</text>\n</g>\n<!-- 11 -->\n<g id=\"node29\" class=\"node\">\n<title>11</title>\n<polygon fill=\"#0c5686\" stroke=\"#0c5686\" points=\"751.5,-144 671.5,-144 671.5,-92 751.5,-92 751.5,-144\"/>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-132\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">hash_find_slot</text>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-121\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">15.15%</text>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-110\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-99\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">29981×</text>\n</g>\n<!-- 48&#45;&gt;11 -->\n<g id=\"edge68\" class=\"edge\">\n<title>48&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0d1074\" stroke-width=\"0.5\" d=\"M49.84,-1132.92C44.02,-1108.78 36.5,-1071.16 36.5,-1038 36.5,-1038 36.5,-1038 36.5,-209 36.5,-142.4 110.55,-167.74 175.5,-153 268.83,-131.82 557.11,-122.75 667.69,-119.98\"/>\n<polygon fill=\"#0d1074\" stroke=\"#0d1074\" stroke-width=\"0.5\" points=\"667.76,-121.2 671.23,-119.89 667.7,-118.76 667.76,-121.2\"/>\n<text text-anchor=\"middle\" x=\"50.5\" y=\"-627\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1074\">0.72%</text>\n<text text-anchor=\"middle\" x=\"50.5\" y=\"-616\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1074\">1420×</text>\n</g>\n<!-- 4 -->\n<g id=\"node9\" class=\"node\">\n<title>4</title>\n<polygon fill=\"#21ba09\" stroke=\"#21ba09\" points=\"395.5,-1002 345.5,-1002 345.5,-950 395.5,-950 395.5,-1002\"/>\n<text text-anchor=\"middle\" x=\"370.5\" y=\"-990\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">eval</text>\n<text text-anchor=\"middle\" x=\"370.5\" y=\"-979\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">53.33%</text>\n<text text-anchor=\"middle\" x=\"370.5\" y=\"-968\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(9.09%)</text>\n<text text-anchor=\"middle\" x=\"370.5\" y=\"-957\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">37×</text>\n</g>\n<!-- 64&#45;&gt;4 -->\n<g id=\"edge71\" class=\"edge\">\n<title>64&#45;&gt;4</title>\n<path fill=\"none\" stroke=\"#21ba09\" stroke-width=\"2.13\" d=\"M379.96,-1076.15C375.77,-1072.33 372.09,-1067.95 369.5,-1063 361.04,-1046.82 360.88,-1026.48 363.04,-1009.64\"/>\n<polygon fill=\"#21ba09\" stroke=\"#21ba09\" stroke-width=\"2.13\" points=\"365.6,-1009.78 364.17,-1002.18 360.55,-1009.01 365.6,-1009.78\"/>\n<text text-anchor=\"middle\" x=\"386.5\" y=\"-1040\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21ba09\">53.33%</text>\n<text text-anchor=\"middle\" x=\"386.5\" y=\"-1029\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21ba09\">37×</text>\n</g>\n<!-- 4&#45;&gt;64 -->\n<g id=\"edge17\" class=\"edge\">\n<title>4&#45;&gt;64</title>\n<path fill=\"none\" stroke=\"#21ba09\" stroke-width=\"2.13\" d=\"M395.85,-997.55C399.59,-1001.64 403.02,-1006.18 405.5,-1011 413.94,-1027.42 417.29,-1047.77 418.48,-1064.56\"/>\n<polygon fill=\"#21ba09\" stroke=\"#21ba09\" stroke-width=\"2.13\" points=\"415.93,-1064.84 418.88,-1071.99 421.03,-1064.56 415.93,-1064.84\"/>\n<text text-anchor=\"middle\" x=\"427\" y=\"-1034.5\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#21ba09\">32×</text>\n</g>\n<!-- 10 -->\n<g id=\"node10\" class=\"node\">\n<title>10</title>\n<polygon fill=\"#0c688a\" stroke=\"#0c688a\" points=\"478.5,-696 382.5,-696 382.5,-644 478.5,-644 478.5,-696\"/>\n<text text-anchor=\"middle\" x=\"430.5\" y=\"-684\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">find_char_unquote</text>\n<text text-anchor=\"middle\" x=\"430.5\" y=\"-673\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">18.18%</text>\n<text text-anchor=\"middle\" x=\"430.5\" y=\"-662\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(18.18%)</text>\n<text text-anchor=\"middle\" x=\"430.5\" y=\"-651\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">23480×</text>\n</g>\n<!-- 4&#45;&gt;10 -->\n<g id=\"edge8\" class=\"edge\">\n<title>4&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#0d3b80\" stroke-width=\"0.5\" d=\"M358.33,-949.69C357.24,-946.8 356.27,-943.87 355.5,-941 347.2,-910.02 323.86,-820.68 345.5,-797 360.55,-780.53 430.45,-804.47 445.5,-788 467.05,-764.42 456.77,-726.13 445.45,-699.82\"/>\n<polygon fill=\"#0d3b80\" stroke=\"#0d3b80\" stroke-width=\"0.5\" points=\"446.45,-699.06 443.92,-696.35 444.21,-700.05 446.45,-699.06\"/>\n<text text-anchor=\"middle\" x=\"362.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d3b80\">10.05%</text>\n<text text-anchor=\"middle\" x=\"362.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d3b80\">12980×</text>\n</g>\n<!-- 12 -->\n<g id=\"node11\" class=\"node\">\n<title>12</title>\n<polygon fill=\"#0d387f\" stroke=\"#0d387f\" points=\"521.5,-910 405.5,-910 405.5,-858 521.5,-858 521.5,-910\"/>\n<text text-anchor=\"middle\" x=\"463.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">collapse_continuations</text>\n<text text-anchor=\"middle\" x=\"463.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">9.46%</text>\n<text text-anchor=\"middle\" x=\"463.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(9.09%)</text>\n<text text-anchor=\"middle\" x=\"463.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5120×</text>\n</g>\n<!-- 4&#45;&gt;12 -->\n<g id=\"edge9\" class=\"edge\">\n<title>4&#45;&gt;12</title>\n<path fill=\"none\" stroke=\"#0d387f\" stroke-width=\"0.5\" d=\"M395.91,-950.41C407.91,-938.79 422.29,-924.88 434.69,-912.88\"/>\n<polygon fill=\"#0d387f\" stroke=\"#0d387f\" stroke-width=\"0.5\" points=\"435.81,-913.5 437.47,-910.19 434.1,-911.74 435.81,-913.5\"/>\n<text text-anchor=\"middle\" x=\"442.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d387f\">9.46%</text>\n<text text-anchor=\"middle\" x=\"442.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d387f\">5120×</text>\n</g>\n<!-- 14 -->\n<g id=\"node12\" class=\"node\">\n<title>14</title>\n<polygon fill=\"#0d277b\" stroke=\"#0d277b\" points=\"709,-910 620,-910 620,-858 709,-858 709,-910\"/>\n<text text-anchor=\"middle\" x=\"664.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">get_next_mword</text>\n<text text-anchor=\"middle\" x=\"664.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">6.06%</text>\n<text text-anchor=\"middle\" x=\"664.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(6.06%)</text>\n<text text-anchor=\"middle\" x=\"664.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">6596×</text>\n</g>\n<!-- 4&#45;&gt;14 -->\n<g id=\"edge10\" class=\"edge\">\n<title>4&#45;&gt;14</title>\n<path fill=\"none\" stroke=\"#0d277b\" stroke-width=\"0.5\" d=\"M395.62,-971.39C428.77,-966.29 488.76,-955.91 538.5,-941 573.84,-930.41 581.92,-925.29 615.5,-910 615.87,-909.83 616.24,-909.66 616.61,-909.49\"/>\n<polygon fill=\"#0d277b\" stroke=\"#0d277b\" stroke-width=\"0.5\" points=\"617.33,-910.51 619.98,-907.92 616.29,-908.29 617.33,-910.51\"/>\n<text text-anchor=\"middle\" x=\"608.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d277b\">6.06%</text>\n<text text-anchor=\"middle\" x=\"608.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d277b\">6596×</text>\n</g>\n<!-- 17 -->\n<g id=\"node13\" class=\"node\">\n<title>17</title>\n<polygon fill=\"#0d277a\" stroke=\"#0d277a\" points=\"610.5,-910 530.5,-910 530.5,-858 610.5,-858 610.5,-910\"/>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">parse_file_seq</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">6.01%</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">4296×</text>\n</g>\n<!-- 4&#45;&gt;17 -->\n<g id=\"edge11\" class=\"edge\">\n<title>4&#45;&gt;17</title>\n<path fill=\"none\" stroke=\"#0d277a\" stroke-width=\"0.5\" d=\"M395.71,-965.75C413.4,-959.15 437.54,-949.89 458.5,-941 488.71,-928.19 496.25,-924.87 525.5,-910 526,-909.75 526.5,-909.49 527,-909.23\"/>\n<polygon fill=\"#0d277a\" stroke=\"#0d277a\" stroke-width=\"0.5\" points=\"527.8,-910.2 530.34,-907.5 526.67,-908.02 527.8,-910.2\"/>\n<text text-anchor=\"middle\" x=\"522.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d277a\">5.94%</text>\n<text text-anchor=\"middle\" x=\"522.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d277a\">4246×</text>\n</g>\n<!-- 20 -->\n<g id=\"node14\" class=\"node\">\n<title>20</title>\n<polygon fill=\"#0d1e78\" stroke=\"#0d1e78\" points=\"331,-910 220,-910 220,-858 331,-858 331,-910\"/>\n<text text-anchor=\"middle\" x=\"275.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">try_variable_definition</text>\n<text text-anchor=\"middle\" x=\"275.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.93%</text>\n<text text-anchor=\"middle\" x=\"275.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"275.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2621×</text>\n</g>\n<!-- 4&#45;&gt;20 -->\n<g id=\"edge12\" class=\"edge\">\n<title>4&#45;&gt;20</title>\n<path fill=\"none\" stroke=\"#0d1e78\" stroke-width=\"0.5\" d=\"M345.29,-964.24C333.79,-958.49 320.53,-950.61 310.5,-941 302.31,-933.16 295.23,-923.02 289.62,-913.53\"/>\n<polygon fill=\"#0d1e78\" stroke=\"#0d1e78\" stroke-width=\"0.5\" points=\"290.43,-912.49 287.62,-910.07 288.31,-913.72 290.43,-912.49\"/>\n<text text-anchor=\"middle\" x=\"324.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1e78\">3.93%</text>\n<text text-anchor=\"middle\" x=\"324.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1e78\">2620×</text>\n</g>\n<!-- 30 -->\n<g id=\"node15\" class=\"node\">\n<title>30</title>\n<polygon fill=\"#0d1d77\" stroke=\"#0d1d77\" points=\"628.5,-512 512.5,-512 512.5,-460 628.5,-460 628.5,-512\"/>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-500\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">variable_expand_string</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-489\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.70%</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-478\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-467\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5800×</text>\n</g>\n<!-- 4&#45;&gt;30 -->\n<g id=\"edge13\" class=\"edge\">\n<title>4&#45;&gt;30</title>\n<path fill=\"none\" stroke=\"#0d1a77\" stroke-width=\"0.5\" d=\"M395.65,-974.5C468.46,-972.43 676.55,-962 713.5,-910 760.83,-843.39 633.22,-599.6 586.71,-515.64\"/>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" stroke-width=\"0.5\" points=\"587.59,-514.71 584.82,-512.24 585.45,-515.9 587.59,-514.71\"/>\n<text text-anchor=\"middle\" x=\"701.5\" y=\"-719\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3.16%</text>\n<text text-anchor=\"middle\" x=\"701.5\" y=\"-708\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">4489×</text>\n</g>\n<!-- 32 -->\n<g id=\"node16\" class=\"node\">\n<title>32</title>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" points=\"534,-788 469,-788 469,-736 534,-736 534,-788\"/>\n<text text-anchor=\"middle\" x=\"501.5\" y=\"-776\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">next_token</text>\n<text text-anchor=\"middle\" x=\"501.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.03%</text>\n<text text-anchor=\"middle\" x=\"501.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"501.5\" y=\"-743\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">14769×</text>\n</g>\n<!-- 4&#45;&gt;32 -->\n<g id=\"edge14\" class=\"edge\">\n<title>4&#45;&gt;32</title>\n<path fill=\"none\" stroke=\"#0d0f73\" stroke-width=\"0.5\" d=\"M362.59,-949.87C356.07,-923.73 351,-883.19 372.5,-858 387.44,-840.49 403.89,-861.05 423.5,-849 448.11,-833.88 442.84,-818.16 462.5,-797 464.35,-795.01 466.31,-793.01 468.32,-791.04\"/>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" stroke-width=\"0.5\" points=\"469.42,-791.68 471.09,-788.37 467.72,-789.92 469.42,-791.68\"/>\n<text text-anchor=\"middle\" x=\"386.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">0.43%</text>\n<text text-anchor=\"middle\" x=\"386.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">2107×</text>\n</g>\n<!-- 35 -->\n<g id=\"node17\" class=\"node\">\n<title>35</title>\n<polygon fill=\"#0d1976\" stroke=\"#0d1976\" points=\"191,-910 124,-910 124,-858 191,-858 191,-910\"/>\n<text text-anchor=\"middle\" x=\"157.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">record_files</text>\n<text text-anchor=\"middle\" x=\"157.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.86%</text>\n<text text-anchor=\"middle\" x=\"157.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"157.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2107×</text>\n</g>\n<!-- 4&#45;&gt;35 -->\n<g id=\"edge15\" class=\"edge\">\n<title>4&#45;&gt;35</title>\n<path fill=\"none\" stroke=\"#0d1976\" stroke-width=\"0.5\" d=\"M345.48,-974.36C296.63,-972.56 191.18,-965.83 166.5,-941 159.45,-933.91 156.58,-923.64 155.68,-913.82\"/>\n<polygon fill=\"#0d1976\" stroke=\"#0d1976\" stroke-width=\"0.5\" points=\"156.89,-913.64 155.43,-910.23 154.45,-913.8 156.89,-913.64\"/>\n<text text-anchor=\"middle\" x=\"180.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1976\">2.86%</text>\n<text text-anchor=\"middle\" x=\"180.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1976\">2107×</text>\n</g>\n<!-- 38 -->\n<g id=\"node18\" class=\"node\">\n<title>38</title>\n<polygon fill=\"#0d1776\" stroke=\"#0d1776\" points=\"332.5,-849 232.5,-849 232.5,-797 332.5,-797 332.5,-849\"/>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-837\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">remove_comments</text>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.33%</text>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-804\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3013×</text>\n</g>\n<!-- 4&#45;&gt;38 -->\n<g id=\"edge16\" class=\"edge\">\n<title>4&#45;&gt;38</title>\n<path fill=\"none\" stroke=\"#0d1776\" stroke-width=\"0.5\" d=\"M345.25,-973.48C308.28,-969.67 241.05,-956.39 215.5,-910 204.35,-889.76 203.41,-877.7 215.5,-858 216.66,-856.1 221.97,-852.8 229.13,-848.98\"/>\n<polygon fill=\"#0d1776\" stroke=\"#0d1776\" stroke-width=\"0.5\" points=\"229.77,-850.02 232.3,-847.31 228.63,-847.85 229.77,-850.02\"/>\n<text text-anchor=\"middle\" x=\"257.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">2.33%</text>\n<text text-anchor=\"middle\" x=\"257.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">3013×</text>\n</g>\n<!-- 12&#45;&gt;32 -->\n<g id=\"edge31\" class=\"edge\">\n<title>12&#45;&gt;32</title>\n<path fill=\"none\" stroke=\"#0d0e73\" stroke-width=\"0.5\" d=\"M463.67,-857.65C464.58,-840.03 467.42,-816.33 475.5,-797 476.29,-795.11 477.21,-793.24 478.22,-791.4\"/>\n<polygon fill=\"#0d0e73\" stroke=\"#0d0e73\" stroke-width=\"0.5\" points=\"479.42,-791.77 480.13,-788.13 477.31,-790.53 479.42,-791.77\"/>\n<text text-anchor=\"middle\" x=\"489.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">0.37%</text>\n<text text-anchor=\"middle\" x=\"489.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">1801×</text>\n</g>\n<!-- 17&#45;&gt;10 -->\n<g id=\"edge35\" class=\"edge\">\n<title>17&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#0d1e78\" stroke-width=\"0.5\" d=\"M570.95,-857.93C570.28,-826.54 564.95,-772.48 538.5,-736 524.36,-716.49 502.4,-701.74 481.97,-691.26\"/>\n<polygon fill=\"#0d1e78\" stroke=\"#0d1e78\" stroke-width=\"0.5\" points=\"482.38,-690.1 478.7,-689.62 481.28,-692.29 482.38,-690.1\"/>\n<text text-anchor=\"middle\" x=\"576.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1e78\">4.05%</text>\n<text text-anchor=\"middle\" x=\"576.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1e78\">5232×</text>\n</g>\n<!-- 17&#45;&gt;32 -->\n<g id=\"edge36\" class=\"edge\">\n<title>17&#45;&gt;32</title>\n<path fill=\"none\" stroke=\"#0d1575\" stroke-width=\"0.5\" d=\"M533.61,-857.62C530.99,-854.91 528.57,-852.03 526.5,-849 514.85,-831.89 508.55,-809.32 505.2,-791.59\"/>\n<polygon fill=\"#0d1575\" stroke=\"#0d1575\" stroke-width=\"0.5\" points=\"506.4,-791.34 504.56,-788.12 503.99,-791.78 506.4,-791.34\"/>\n<text text-anchor=\"middle\" x=\"540.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1575\">1.95%</text>\n<text text-anchor=\"middle\" x=\"540.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1575\">9528×</text>\n</g>\n<!-- 20&#45;&gt;32 -->\n<g id=\"edge39\" class=\"edge\">\n<title>20&#45;&gt;32</title>\n<path fill=\"none\" stroke=\"#0d0e73\" stroke-width=\"0.5\" d=\"M331.07,-865.76C356.14,-857.88 380.46,-850.05 381.5,-849 398.5,-831.8 379.56,-813.21 397.5,-797 412.63,-783.32 423.01,-794.01 442.5,-788 449.99,-785.69 457.83,-782.76 465.25,-779.72\"/>\n<polygon fill=\"#0d0e73\" stroke=\"#0d0e73\" stroke-width=\"0.5\" points=\"466.1,-780.7 468.86,-778.22 465.16,-778.43 466.1,-780.7\"/>\n<text text-anchor=\"middle\" x=\"411.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">0.21%</text>\n<text text-anchor=\"middle\" x=\"411.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">1026×</text>\n</g>\n<!-- 101 -->\n<g id=\"node37\" class=\"node\">\n<title>101</title>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" points=\"315.5,-788 149.5,-788 149.5,-736 315.5,-736 315.5,-788\"/>\n<text text-anchor=\"middle\" x=\"232.5\" y=\"-776\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">allocated_variable_expand_for_file</text>\n<text text-anchor=\"middle\" x=\"232.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.53%</text>\n<text text-anchor=\"middle\" x=\"232.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"232.5\" y=\"-743\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1291×</text>\n</g>\n<!-- 20&#45;&gt;101 -->\n<g id=\"edge40\" class=\"edge\">\n<title>20&#45;&gt;101</title>\n<path fill=\"none\" stroke=\"#0d0e73\" stroke-width=\"0.5\" d=\"M219.87,-867.41C211.8,-862.77 204.53,-856.76 199.5,-849 186.93,-829.61 190.82,-818.42 199.5,-797 200.27,-795.09 201.21,-793.24 202.27,-791.44\"/>\n<polygon fill=\"#0d0e73\" stroke=\"#0d0e73\" stroke-width=\"0.5\" points=\"203.45,-791.86 204.31,-788.26 201.39,-790.54 203.45,-791.86\"/>\n<text text-anchor=\"middle\" x=\"213.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">0.36%</text>\n<text text-anchor=\"middle\" x=\"213.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">513×</text>\n</g>\n<!-- 50 -->\n<g id=\"node43\" class=\"node\">\n<title>50</title>\n<polygon fill=\"#0d0f74\" stroke=\"#0d0f74\" points=\"618.5,-420 522.5,-420 522.5,-368 618.5,-368 618.5,-420\"/>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-408\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">reference_variable</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-397\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.66%</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-386\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"570.5\" y=\"-375\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">693×</text>\n</g>\n<!-- 30&#45;&gt;50 -->\n<g id=\"edge50\" class=\"edge\">\n<title>30&#45;&gt;50</title>\n<path fill=\"none\" stroke=\"#0d0f74\" stroke-width=\"0.5\" d=\"M570.5,-459.93C570.5,-448.71 570.5,-435.42 570.5,-423.8\"/>\n<polygon fill=\"#0d0f74\" stroke=\"#0d0f74\" stroke-width=\"0.5\" points=\"571.73,-423.75 570.5,-420.25 569.28,-423.75 571.73,-423.75\"/>\n<text text-anchor=\"middle\" x=\"584.5\" y=\"-443\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f74\">0.66%</text>\n<text text-anchor=\"middle\" x=\"584.5\" y=\"-432\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f74\">693×</text>\n</g>\n<!-- 42 -->\n<g id=\"node45\" class=\"node\">\n<title>42</title>\n<polygon fill=\"#0d1475\" stroke=\"#0d1475\" points=\"394.5,-788 324.5,-788 324.5,-736 394.5,-736 394.5,-788\"/>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-776\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">find_percent</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1.75%</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"359.5\" y=\"-743\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2255×</text>\n</g>\n<!-- 35&#45;&gt;42 -->\n<g id=\"edge51\" class=\"edge\">\n<title>35&#45;&gt;42</title>\n<path fill=\"none\" stroke=\"#0d1475\" stroke-width=\"0.5\" d=\"M150.65,-858C147.02,-838.66 146.04,-812.62 161.5,-797 173.87,-784.5 302.74,-793.33 319.5,-788 319.89,-787.88 320.28,-787.75 320.67,-787.61\"/>\n<polygon fill=\"#0d1475\" stroke=\"#0d1475\" stroke-width=\"0.5\" points=\"321.33,-788.68 324.17,-786.3 320.47,-786.38 321.33,-788.68\"/>\n<text text-anchor=\"middle\" x=\"175.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1475\">1.71%</text>\n<text text-anchor=\"middle\" x=\"175.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1475\">2208×</text>\n</g>\n<!-- 35&#45;&gt;44 -->\n<g id=\"edge52\" class=\"edge\">\n<title>35&#45;&gt;44</title>\n<path fill=\"none\" stroke=\"#0d1174\" stroke-width=\"0.5\" d=\"M125.19,-857.7C122.72,-854.94 120.43,-852.03 118.5,-849 107.44,-831.68 101.13,-809.31 97.62,-791.74\"/>\n<polygon fill=\"#0d1174\" stroke=\"#0d1174\" stroke-width=\"0.5\" points=\"98.82,-791.49 96.96,-788.29 96.42,-791.95 98.82,-791.49\"/>\n<text text-anchor=\"middle\" x=\"132.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">1.14%</text>\n<text text-anchor=\"middle\" x=\"132.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">2208×</text>\n</g>\n<!-- 38&#45;&gt;10 -->\n<g id=\"edge57\" class=\"edge\">\n<title>38&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#0d1776\" stroke-width=\"0.5\" d=\"M332.62,-798.22C333.92,-797.79 335.21,-797.38 336.5,-797 363.19,-789.07 377.64,-806.44 398.5,-788 411.61,-776.41 421.19,-730.53 426.29,-699.79\"/>\n<polygon fill=\"#0d1776\" stroke=\"#0d1776\" stroke-width=\"0.5\" points=\"427.54,-699.77 426.89,-696.12 425.12,-699.37 427.54,-699.77\"/>\n<text text-anchor=\"middle\" x=\"433.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">2.33%</text>\n<text text-anchor=\"middle\" x=\"433.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1776\">3013×</text>\n</g>\n<!-- 22 -->\n<g id=\"node38\" class=\"node\">\n<title>22</title>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" points=\"1025.5,-328 923.5,-328 923.5,-276 1025.5,-276 1025.5,-328\"/>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-316\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">start_job_command</text>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-305\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.80%</text>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-294\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-283\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">38×</text>\n</g>\n<!-- 43&#45;&gt;22 -->\n<g id=\"edge62\" class=\"edge\">\n<title>43&#45;&gt;22</title>\n<path fill=\"none\" stroke=\"#0d1375\" stroke-width=\"0.5\" d=\"M1040.15,-367.93C1028.52,-356.42 1014.68,-342.73 1002.71,-330.9\"/>\n<polygon fill=\"#0d1375\" stroke=\"#0d1375\" stroke-width=\"0.5\" points=\"1003.38,-329.84 1000.03,-328.25 1001.66,-331.58 1003.38,-329.84\"/>\n<text text-anchor=\"middle\" x=\"1044.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1375\">1.50%</text>\n<text text-anchor=\"middle\" x=\"1044.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1375\">15×</text>\n</g>\n<!-- 7 -->\n<g id=\"node21\" class=\"node\">\n<title>7</title>\n<polygon fill=\"#0ba74d\" stroke=\"#0ba74d\" points=\"1019.5,-788 945.5,-788 945.5,-736 1019.5,-736 1019.5,-788\"/>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-776\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">update_file_1</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-765\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">39.46%</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-754\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(9.09%)</text>\n<text text-anchor=\"middle\" x=\"982.5\" y=\"-743\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">148×</text>\n</g>\n<!-- 108&#45;&gt;7 -->\n<g id=\"edge75\" class=\"edge\">\n<title>108&#45;&gt;7</title>\n<path fill=\"none\" stroke=\"#0ba74d\" stroke-width=\"1.58\" d=\"M982.5,-857.84C982.5,-839.44 982.5,-814.35 982.5,-794.6\"/>\n<polygon fill=\"#0ba74d\" stroke=\"#0ba74d\" stroke-width=\"1.58\" points=\"984.71,-794.42 982.5,-788.12 980.3,-794.42 984.71,-794.42\"/>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-826\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0ba74d\">39.46%</text>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-815\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0ba74d\">148×</text>\n</g>\n<!-- 9 -->\n<g id=\"node22\" class=\"node\">\n<title>9</title>\n<polygon fill=\"#0c968d\" stroke=\"#0c968d\" points=\"912,-696 827,-696 827,-644 912,-644 912,-696\"/>\n<text text-anchor=\"middle\" x=\"869.5\" y=\"-684\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">try_implicit_rule</text>\n<text text-anchor=\"middle\" x=\"869.5\" y=\"-673\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">26.64%</text>\n<text text-anchor=\"middle\" x=\"869.5\" y=\"-662\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"869.5\" y=\"-651\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">120×</text>\n</g>\n<!-- 7&#45;&gt;9 -->\n<g id=\"edge20\" class=\"edge\">\n<title>7&#45;&gt;9</title>\n<path fill=\"none\" stroke=\"#0c968d\" stroke-width=\"1.07\" d=\"M951.02,-735.93C936.82,-724.61 919.96,-711.19 905.28,-699.5\"/>\n<polygon fill=\"#0c968d\" stroke=\"#0c968d\" stroke-width=\"1.07\" points=\"906.4,-698.06 901.2,-696.25 904.13,-700.91 906.4,-698.06\"/>\n<text text-anchor=\"middle\" x=\"955.5\" y=\"-719\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0c968d\">26.64%</text>\n<text text-anchor=\"middle\" x=\"955.5\" y=\"-708\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0c968d\">120×</text>\n</g>\n<!-- 23 -->\n<g id=\"node23\" class=\"node\">\n<title>23</title>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" points=\"1021,-696 954,-696 954,-644 1021,-644 1021,-696\"/>\n<text text-anchor=\"middle\" x=\"987.5\" y=\"-684\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">remake_file</text>\n<text text-anchor=\"middle\" x=\"987.5\" y=\"-673\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.72%</text>\n<text text-anchor=\"middle\" x=\"987.5\" y=\"-662\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"987.5\" y=\"-651\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">26×</text>\n</g>\n<!-- 7&#45;&gt;23 -->\n<g id=\"edge21\" class=\"edge\">\n<title>7&#45;&gt;23</title>\n<path fill=\"none\" stroke=\"#0d1d78\" stroke-width=\"0.5\" d=\"M983.89,-735.93C984.52,-724.71 985.25,-711.42 985.9,-699.8\"/>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" stroke-width=\"0.5\" points=\"987.13,-699.81 986.1,-696.25 984.68,-699.67 987.13,-699.81\"/>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-719\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1d78\">3.72%</text>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-708\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1d78\">26×</text>\n</g>\n<!-- 8 -->\n<g id=\"node24\" class=\"node\">\n<title>8</title>\n<polygon fill=\"#0c968d\" stroke=\"#0c968d\" points=\"880,-604 799,-604 799,-552 880,-552 880,-604\"/>\n<text text-anchor=\"middle\" x=\"839.5\" y=\"-592\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">pattern_search</text>\n<text text-anchor=\"middle\" x=\"839.5\" y=\"-581\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">26.64%</text>\n<text text-anchor=\"middle\" x=\"839.5\" y=\"-570\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(12.12%)</text>\n<text text-anchor=\"middle\" x=\"839.5\" y=\"-559\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">541×</text>\n</g>\n<!-- 9&#45;&gt;8 -->\n<g id=\"edge27\" class=\"edge\">\n<title>9&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#0c968d\" stroke-width=\"1.07\" d=\"M861.14,-643.93C857.57,-633.2 853.35,-620.56 849.6,-609.31\"/>\n<polygon fill=\"#0c968d\" stroke=\"#0c968d\" stroke-width=\"1.07\" points=\"851.29,-608.61 847.92,-604.25 847.83,-609.76 851.29,-608.61\"/>\n<text text-anchor=\"middle\" x=\"874.5\" y=\"-627\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0c968d\">26.64%</text>\n<text text-anchor=\"middle\" x=\"874.5\" y=\"-616\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0c968d\">120×</text>\n</g>\n<!-- 24 -->\n<g id=\"node40\" class=\"node\">\n<title>24</title>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" points=\"1051.5,-604 929.5,-604 929.5,-552 1051.5,-552 1051.5,-604\"/>\n<text text-anchor=\"middle\" x=\"990.5\" y=\"-592\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">execute_file_commands</text>\n<text text-anchor=\"middle\" x=\"990.5\" y=\"-581\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.72%</text>\n<text text-anchor=\"middle\" x=\"990.5\" y=\"-570\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"990.5\" y=\"-559\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">23×</text>\n</g>\n<!-- 23&#45;&gt;24 -->\n<g id=\"edge43\" class=\"edge\">\n<title>23&#45;&gt;24</title>\n<path fill=\"none\" stroke=\"#0d1d78\" stroke-width=\"0.5\" d=\"M988.34,-643.93C988.71,-632.71 989.15,-619.42 989.54,-607.8\"/>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" stroke-width=\"0.5\" points=\"990.77,-607.79 989.66,-604.25 988.32,-607.7 990.77,-607.79\"/>\n<text text-anchor=\"middle\" x=\"1002.5\" y=\"-627\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1d78\">3.72%</text>\n<text text-anchor=\"middle\" x=\"1002.5\" y=\"-616\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1d78\">23×</text>\n</g>\n<!-- 8&#45;&gt;8 -->\n<g id=\"edge22\" class=\"edge\">\n<title>8&#45;&gt;8</title>\n<path fill=\"none\" stroke=\"#0c968d\" stroke-width=\"1.07\" d=\"M880.09,-585.61C885.45,-584.31 889,-581.77 889,-578 889,-575.64 887.61,-573.77 885.26,-572.38\"/>\n<polygon fill=\"#0c968d\" stroke=\"#0c968d\" stroke-width=\"1.07\" points=\"885.6,-570.55 880.09,-570.39 884.29,-573.95 885.6,-570.55\"/>\n<text text-anchor=\"middle\" x=\"900\" y=\"-575.5\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0c968d\">421×</text>\n</g>\n<!-- 18 -->\n<g id=\"node25\" class=\"node\">\n<title>18</title>\n<polygon fill=\"#0d267a\" stroke=\"#0d267a\" points=\"966,-512 895,-512 895,-460 966,-460 966,-512\"/>\n<text text-anchor=\"middle\" x=\"930.5\" y=\"-500\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">file_exists_p</text>\n<text text-anchor=\"middle\" x=\"930.5\" y=\"-489\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">5.86%</text>\n<text text-anchor=\"middle\" x=\"930.5\" y=\"-478\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"930.5\" y=\"-467\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3192×</text>\n</g>\n<!-- 8&#45;&gt;18 -->\n<g id=\"edge23\" class=\"edge\">\n<title>8&#45;&gt;18</title>\n<path fill=\"none\" stroke=\"#0d267a\" stroke-width=\"0.5\" d=\"M865.53,-551.79C868.56,-548.83 871.6,-545.85 874.5,-543 883.73,-533.9 893.75,-523.91 902.74,-514.92\"/>\n<polygon fill=\"#0d267a\" stroke=\"#0d267a\" stroke-width=\"0.5\" points=\"903.88,-515.51 905.49,-512.17 902.15,-513.78 903.88,-515.51\"/>\n<text text-anchor=\"middle\" x=\"909.5\" y=\"-535\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d267a\">5.84%</text>\n<text text-anchor=\"middle\" x=\"909.5\" y=\"-524\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d267a\">3178×</text>\n</g>\n<!-- 8&#45;&gt;19 -->\n<g id=\"edge24\" class=\"edge\">\n<title>8&#45;&gt;19</title>\n<path fill=\"none\" stroke=\"#0d1575\" stroke-width=\"0.5\" d=\"M798.73,-568.53C781.48,-563.38 762.05,-555.33 747.5,-543 742.58,-538.83 735.61,-527.08 729.43,-515.41\"/>\n<polygon fill=\"#0d1575\" stroke=\"#0d1575\" stroke-width=\"0.5\" points=\"730.42,-514.66 727.71,-512.13 728.25,-515.8 730.42,-514.66\"/>\n<text text-anchor=\"middle\" x=\"761.5\" y=\"-535\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1575\">1.86%</text>\n<text text-anchor=\"middle\" x=\"761.5\" y=\"-524\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1575\">3688×</text>\n</g>\n<!-- 28 -->\n<g id=\"node27\" class=\"node\">\n<title>28</title>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" points=\"886,-512 811,-512 811,-460 886,-460 886,-512\"/>\n<text text-anchor=\"middle\" x=\"848.5\" y=\"-500\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">vpath_search</text>\n<text text-anchor=\"middle\" x=\"848.5\" y=\"-489\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.21%</text>\n<text text-anchor=\"middle\" x=\"848.5\" y=\"-478\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"848.5\" y=\"-467\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3680×</text>\n</g>\n<!-- 8&#45;&gt;28 -->\n<g id=\"edge25\" class=\"edge\">\n<title>8&#45;&gt;28</title>\n<path fill=\"none\" stroke=\"#0d1a77\" stroke-width=\"0.5\" d=\"M842.01,-551.93C843.13,-540.71 844.46,-527.42 845.62,-515.8\"/>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" stroke-width=\"0.5\" points=\"846.85,-515.85 845.98,-512.25 844.41,-515.61 846.85,-515.85\"/>\n<text text-anchor=\"middle\" x=\"858.5\" y=\"-535\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3.19%</text>\n<text text-anchor=\"middle\" x=\"858.5\" y=\"-524\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3658×</text>\n</g>\n<!-- 29 -->\n<g id=\"node28\" class=\"node\">\n<title>29</title>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" points=\"819.5,-420 727.5,-420 727.5,-368 819.5,-368 819.5,-420\"/>\n<text text-anchor=\"middle\" x=\"773.5\" y=\"-408\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">file_impossible_p</text>\n<text text-anchor=\"middle\" x=\"773.5\" y=\"-397\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.19%</text>\n<text text-anchor=\"middle\" x=\"773.5\" y=\"-386\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"773.5\" y=\"-375\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3941×</text>\n</g>\n<!-- 8&#45;&gt;29 -->\n<g id=\"edge26\" class=\"edge\">\n<title>8&#45;&gt;29</title>\n<path fill=\"none\" stroke=\"#0d1a77\" stroke-width=\"0.5\" d=\"M807.77,-551.78C796.41,-540.86 784.86,-527.12 778.5,-512 766.63,-483.78 766.99,-448.27 769.31,-423.82\"/>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" stroke-width=\"0.5\" points=\"770.53,-423.9 769.66,-420.29 768.09,-423.65 770.53,-423.9\"/>\n<text text-anchor=\"middle\" x=\"792.5\" y=\"-489\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3.19%</text>\n<text text-anchor=\"middle\" x=\"792.5\" y=\"-478\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3941×</text>\n</g>\n<!-- 16 -->\n<g id=\"node34\" class=\"node\">\n<title>16</title>\n<polygon fill=\"#0d277a\" stroke=\"#0d277a\" points=\"920,-420 833,-420 833,-368 920,-368 920,-420\"/>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-408\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">dir_file_exists_p</text>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-397\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">6.01%</text>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-386\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-375\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3270×</text>\n</g>\n<!-- 18&#45;&gt;16 -->\n<g id=\"edge37\" class=\"edge\">\n<title>18&#45;&gt;16</title>\n<path fill=\"none\" stroke=\"#0d267a\" stroke-width=\"0.5\" d=\"M915.46,-459.93C908.67,-448.61 900.62,-435.19 893.6,-423.5\"/>\n<polygon fill=\"#0d267a\" stroke=\"#0d267a\" stroke-width=\"0.5\" points=\"894.5,-422.62 891.65,-420.25 892.4,-423.88 894.5,-422.62\"/>\n<text text-anchor=\"middle\" x=\"923.5\" y=\"-443\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d267a\">5.86%</text>\n<text text-anchor=\"middle\" x=\"923.5\" y=\"-432\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d267a\">3192×</text>\n</g>\n<!-- 13 -->\n<g id=\"node33\" class=\"node\">\n<title>13</title>\n<polygon fill=\"#0d307d\" stroke=\"#0d307d\" points=\"704,-236 621,-236 621,-184 704,-184 704,-236\"/>\n<text text-anchor=\"middle\" x=\"662.5\" y=\"-224\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">hash_find_item</text>\n<text text-anchor=\"middle\" x=\"662.5\" y=\"-213\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">7.90%</text>\n<text text-anchor=\"middle\" x=\"662.5\" y=\"-202\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"662.5\" y=\"-191\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">15633×</text>\n</g>\n<!-- 19&#45;&gt;13 -->\n<g id=\"edge38\" class=\"edge\">\n<title>19&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#0d2279\" stroke-width=\"0.5\" d=\"M695.74,-459.73C678.12,-435.47 653.59,-396.99 643.5,-359 632.7,-318.34 643.25,-269.71 652.41,-239.58\"/>\n<polygon fill=\"#0d2279\" stroke=\"#0d2279\" stroke-width=\"0.5\" points=\"653.65,-239.71 653.51,-236 651.31,-238.98 653.65,-239.71\"/>\n<text text-anchor=\"middle\" x=\"657.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d2279\">4.93%</text>\n<text text-anchor=\"middle\" x=\"657.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d2279\">9748×</text>\n</g>\n<!-- 29&#45;&gt;13 -->\n<g id=\"edge48\" class=\"edge\">\n<title>29&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#0d1274\" stroke-width=\"0.5\" d=\"M727.48,-376.75C705.35,-366.4 680.8,-350.61 667.5,-328 651.78,-301.28 653.01,-264.87 656.58,-239.8\"/>\n<polygon fill=\"#0d1274\" stroke=\"#0d1274\" stroke-width=\"0.5\" points=\"657.82,-239.83 657.12,-236.19 655.39,-239.47 657.82,-239.83\"/>\n<text text-anchor=\"middle\" x=\"681.5\" y=\"-305\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1274\">1.19%</text>\n<text text-anchor=\"middle\" x=\"681.5\" y=\"-294\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1274\">2363×</text>\n</g>\n<!-- 21 -->\n<g id=\"node35\" class=\"node\">\n<title>21</title>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" points=\"914,-328 839,-328 839,-276 914,-276 914,-328\"/>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-316\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">find_directory</text>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-305\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.86%</text>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-294\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"876.5\" y=\"-283\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">7633×</text>\n</g>\n<!-- 29&#45;&gt;21 -->\n<g id=\"edge49\" class=\"edge\">\n<title>29&#45;&gt;21</title>\n<path fill=\"none\" stroke=\"#0d1575\" stroke-width=\"0.5\" d=\"M802.19,-367.93C815.47,-356.32 831.29,-342.5 844.91,-330.6\"/>\n<polygon fill=\"#0d1575\" stroke=\"#0d1575\" stroke-width=\"0.5\" points=\"845.78,-331.47 847.61,-328.25 844.16,-329.63 845.78,-331.47\"/>\n<text text-anchor=\"middle\" x=\"850.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1575\">2.00%</text>\n<text text-anchor=\"middle\" x=\"850.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1575\">3941×</text>\n</g>\n<!-- 15 -->\n<g id=\"node30\" class=\"node\">\n<title>15</title>\n<polygon fill=\"#0d277b\" stroke=\"#0d277b\" points=\"663.5,-52 597.5,-52 597.5,0 663.5,0 663.5,-52\"/>\n<text text-anchor=\"middle\" x=\"630.5\" y=\"-40\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">file_hash_1</text>\n<text text-anchor=\"middle\" x=\"630.5\" y=\"-29\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">6.06%</text>\n<text text-anchor=\"middle\" x=\"630.5\" y=\"-18\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(6.06%)</text>\n<text text-anchor=\"middle\" x=\"630.5\" y=\"-7\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">12484×</text>\n</g>\n<!-- 11&#45;&gt;15 -->\n<g id=\"edge28\" class=\"edge\">\n<title>11&#45;&gt;15</title>\n<path fill=\"none\" stroke=\"#0d277b\" stroke-width=\"0.5\" d=\"M684.81,-91.69C681.96,-88.8 679.14,-85.87 676.5,-83 668.32,-74.11 659.8,-64 652.35,-54.85\"/>\n<polygon fill=\"#0d277b\" stroke=\"#0d277b\" stroke-width=\"0.5\" points=\"653.23,-53.99 650.07,-52.04 651.32,-55.53 653.23,-53.99\"/>\n<text text-anchor=\"middle\" x=\"693\" y=\"-75\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d277b\">6.06%</text>\n<text text-anchor=\"middle\" x=\"693\" y=\"-64\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d277b\">12484×</text>\n</g>\n<!-- 33 -->\n<g id=\"node31\" class=\"node\">\n<title>33</title>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" points=\"750,-52 673,-52 673,0 750,0 750,-52\"/>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-40\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">dirfile_hash_2</text>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-29\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.03%</text>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-18\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"711.5\" y=\"-7\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2962×</text>\n</g>\n<!-- 11&#45;&gt;33 -->\n<g id=\"edge29\" class=\"edge\">\n<title>11&#45;&gt;33</title>\n<path fill=\"none\" stroke=\"#0d1a77\" stroke-width=\"0.5\" d=\"M711.5,-91.93C711.5,-80.71 711.5,-67.42 711.5,-55.8\"/>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" stroke-width=\"0.5\" points=\"712.73,-55.75 711.5,-52.25 710.28,-55.75 712.73,-55.75\"/>\n<text text-anchor=\"middle\" x=\"725.5\" y=\"-75\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3.03%</text>\n<text text-anchor=\"middle\" x=\"725.5\" y=\"-64\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">2962×</text>\n</g>\n<!-- 34 -->\n<g id=\"node32\" class=\"node\">\n<title>34</title>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" points=\"825.5,-52 759.5,-52 759.5,0 825.5,0 825.5,-52\"/>\n<text text-anchor=\"middle\" x=\"792.5\" y=\"-40\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">file_hash_2</text>\n<text text-anchor=\"middle\" x=\"792.5\" y=\"-29\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.03%</text>\n<text text-anchor=\"middle\" x=\"792.5\" y=\"-18\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"792.5\" y=\"-7\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2537×</text>\n</g>\n<!-- 11&#45;&gt;34 -->\n<g id=\"edge30\" class=\"edge\">\n<title>11&#45;&gt;34</title>\n<path fill=\"none\" stroke=\"#0d1a77\" stroke-width=\"0.5\" d=\"M734.06,-91.93C744.42,-80.42 756.74,-66.73 767.39,-54.9\"/>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" stroke-width=\"0.5\" points=\"768.35,-55.67 769.78,-52.25 766.53,-54.03 768.35,-55.67\"/>\n<text text-anchor=\"middle\" x=\"775.5\" y=\"-75\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">3.03%</text>\n<text text-anchor=\"middle\" x=\"775.5\" y=\"-64\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1a77\">2537×</text>\n</g>\n<!-- 13&#45;&gt;11 -->\n<g id=\"edge32\" class=\"edge\">\n<title>13&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0d307d\" stroke-width=\"0.5\" d=\"M676.15,-183.93C682.31,-172.61 689.62,-159.19 695.98,-147.5\"/>\n<polygon fill=\"#0d307d\" stroke=\"#0d307d\" stroke-width=\"0.5\" points=\"697.16,-147.91 697.75,-144.25 695,-146.74 697.16,-147.91\"/>\n<text text-anchor=\"middle\" x=\"709\" y=\"-167\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d307d\">7.90%</text>\n<text text-anchor=\"middle\" x=\"709\" y=\"-156\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d307d\">15633×</text>\n</g>\n<!-- 16&#45;&gt;21 -->\n<g id=\"edge33\" class=\"edge\">\n<title>16&#45;&gt;21</title>\n<path fill=\"none\" stroke=\"#0d1475\" stroke-width=\"0.5\" d=\"M876.5,-367.93C876.5,-356.71 876.5,-343.42 876.5,-331.8\"/>\n<polygon fill=\"#0d1475\" stroke=\"#0d1475\" stroke-width=\"0.5\" points=\"877.73,-331.75 876.5,-328.25 875.28,-331.75 877.73,-331.75\"/>\n<text text-anchor=\"middle\" x=\"890.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1475\">1.66%</text>\n<text text-anchor=\"middle\" x=\"890.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1475\">3270×</text>\n</g>\n<!-- 45 -->\n<g id=\"node36\" class=\"node\">\n<title>45</title>\n<polygon fill=\"#0d1274\" stroke=\"#0d1274\" points=\"829.5,-328 699.5,-328 699.5,-276 829.5,-276 829.5,-328\"/>\n<text text-anchor=\"middle\" x=\"764.5\" y=\"-316\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">dir_contents_file_exists_p</text>\n<text text-anchor=\"middle\" x=\"764.5\" y=\"-305\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1.32%</text>\n<text text-anchor=\"middle\" x=\"764.5\" y=\"-294\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"764.5\" y=\"-283\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3270×</text>\n</g>\n<!-- 16&#45;&gt;45 -->\n<g id=\"edge34\" class=\"edge\">\n<title>16&#45;&gt;45</title>\n<path fill=\"none\" stroke=\"#0d1274\" stroke-width=\"0.5\" d=\"M832.83,-371.11C830.04,-369.99 827.25,-368.94 824.5,-368 806.44,-361.82 796.66,-371.81 782.5,-359 774.74,-351.98 770.31,-341.62 767.79,-331.7\"/>\n<polygon fill=\"#0d1274\" stroke=\"#0d1274\" stroke-width=\"0.5\" points=\"768.93,-331.21 766.94,-328.08 766.54,-331.77 768.93,-331.21\"/>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1274\">1.32%</text>\n<text text-anchor=\"middle\" x=\"796.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1274\">3270×</text>\n</g>\n<!-- 21&#45;&gt;11 -->\n<g id=\"edge41\" class=\"edge\">\n<title>21&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0d1d78\" stroke-width=\"0.5\" d=\"M857.17,-275.57C838.38,-251.32 808.65,-214.15 780.5,-184 768.6,-171.25 754.72,-157.92 742.55,-146.67\"/>\n<polygon fill=\"#0d1d78\" stroke=\"#0d1d78\" stroke-width=\"0.5\" points=\"743.22,-145.62 739.82,-144.15 741.56,-147.43 743.22,-145.62\"/>\n<text text-anchor=\"middle\" x=\"837.5\" y=\"-213\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1d78\">3.86%</text>\n<text text-anchor=\"middle\" x=\"837.5\" y=\"-202\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1d78\">7645×</text>\n</g>\n<!-- 45&#45;&gt;11 -->\n<g id=\"edge64\" class=\"edge\">\n<title>45&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0d0e73\" stroke-width=\"0.5\" d=\"M759.79,-275.95C753.84,-246.16 742.53,-195.16 727.5,-153 726.84,-151.16 726.12,-149.28 725.36,-147.4\"/>\n<polygon fill=\"#0d0e73\" stroke=\"#0d0e73\" stroke-width=\"0.5\" points=\"726.42,-146.78 723.94,-144.02 724.16,-147.72 726.42,-146.78\"/>\n<text text-anchor=\"middle\" x=\"764.5\" y=\"-213\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">0.23%</text>\n<text text-anchor=\"middle\" x=\"764.5\" y=\"-202\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0e73\">461×</text>\n</g>\n<!-- 45&#45;&gt;13 -->\n<g id=\"edge65\" class=\"edge\">\n<title>45&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#0d1174\" stroke-width=\"0.5\" d=\"M719.8,-275.8C715.85,-273 712.02,-270.06 708.5,-267 699.02,-258.78 689.95,-248.47 682.41,-238.95\"/>\n<polygon fill=\"#0d1174\" stroke=\"#0d1174\" stroke-width=\"0.5\" points=\"683.24,-238.02 680.12,-236.02 681.31,-239.53 683.24,-238.02\"/>\n<text text-anchor=\"middle\" x=\"722.5\" y=\"-259\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">1.08%</text>\n<text text-anchor=\"middle\" x=\"722.5\" y=\"-248\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1174\">2129×</text>\n</g>\n<!-- 102 -->\n<g id=\"node52\" class=\"node\">\n<title>102</title>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" points=\"343.5,-696 221.5,-696 221.5,-644 343.5,-644 343.5,-696\"/>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-684\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">variable_expand_for_file</text>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-673\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.53%</text>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-662\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"282.5\" y=\"-651\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1291×</text>\n</g>\n<!-- 101&#45;&gt;102 -->\n<g id=\"edge73\" class=\"edge\">\n<title>101&#45;&gt;102</title>\n<path fill=\"none\" stroke=\"#0d0f73\" stroke-width=\"0.5\" d=\"M246.43,-735.93C252.71,-724.61 260.17,-711.19 266.67,-699.5\"/>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" stroke-width=\"0.5\" points=\"267.84,-699.9 268.47,-696.25 265.7,-698.71 267.84,-699.9\"/>\n<text text-anchor=\"middle\" x=\"277.5\" y=\"-719\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">0.53%</text>\n<text text-anchor=\"middle\" x=\"277.5\" y=\"-708\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">1291×</text>\n</g>\n<!-- 26 -->\n<g id=\"node39\" class=\"node\">\n<title>26</title>\n<polygon fill=\"#0d1c77\" stroke=\"#0d1c77\" points=\"996.5,-236 896.5,-236 896.5,-184 996.5,-184 996.5,-236\"/>\n<text text-anchor=\"middle\" x=\"946.5\" y=\"-224\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">target_environment</text>\n<text text-anchor=\"middle\" x=\"946.5\" y=\"-213\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.69%</text>\n<text text-anchor=\"middle\" x=\"946.5\" y=\"-202\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"946.5\" y=\"-191\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">23×</text>\n</g>\n<!-- 22&#45;&gt;26 -->\n<g id=\"edge42\" class=\"edge\">\n<title>22&#45;&gt;26</title>\n<path fill=\"none\" stroke=\"#0d1c77\" stroke-width=\"0.5\" d=\"M966.7,-275.93C963.21,-264.71 959.08,-251.42 955.46,-239.8\"/>\n<polygon fill=\"#0d1c77\" stroke=\"#0d1c77\" stroke-width=\"0.5\" points=\"956.56,-239.23 954.35,-236.25 954.22,-239.95 956.56,-239.23\"/>\n<text text-anchor=\"middle\" x=\"977.5\" y=\"-259\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1c77\">3.69%</text>\n<text text-anchor=\"middle\" x=\"977.5\" y=\"-248\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1c77\">23×</text>\n</g>\n<!-- 26&#45;&gt;11 -->\n<g id=\"edge45\" class=\"edge\">\n<title>26&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0d0f73\" stroke-width=\"0.5\" d=\"M904.05,-184C884.81,-173.4 861.48,-161.55 839.5,-153 812.23,-142.4 780.45,-133.93 755.38,-128.1\"/>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" stroke-width=\"0.5\" points=\"755.41,-126.85 751.73,-127.26 754.86,-129.24 755.41,-126.85\"/>\n<text text-anchor=\"middle\" x=\"898.5\" y=\"-167\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">0.58%</text>\n<text text-anchor=\"middle\" x=\"898.5\" y=\"-156\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">1150×</text>\n</g>\n<!-- 27 -->\n<g id=\"node41\" class=\"node\">\n<title>27</title>\n<polygon fill=\"#0d1c77\" stroke=\"#0d1c77\" points=\"1028,-512 975,-512 975,-460 1028,-460 1028,-512\"/>\n<text text-anchor=\"middle\" x=\"1001.5\" y=\"-500\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">new_job</text>\n<text text-anchor=\"middle\" x=\"1001.5\" y=\"-489\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.56%</text>\n<text text-anchor=\"middle\" x=\"1001.5\" y=\"-478\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"1001.5\" y=\"-467\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">23×</text>\n</g>\n<!-- 24&#45;&gt;27 -->\n<g id=\"edge44\" class=\"edge\">\n<title>24&#45;&gt;27</title>\n<path fill=\"none\" stroke=\"#0d1c77\" stroke-width=\"0.5\" d=\"M993.56,-551.93C994.94,-540.71 996.56,-527.42 997.98,-515.8\"/>\n<polygon fill=\"#0d1c77\" stroke=\"#0d1c77\" stroke-width=\"0.5\" points=\"999.21,-515.87 998.41,-512.25 996.77,-515.57 999.21,-515.87\"/>\n<text text-anchor=\"middle\" x=\"1010.5\" y=\"-535\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1c77\">3.56%</text>\n<text text-anchor=\"middle\" x=\"1010.5\" y=\"-524\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1c77\">23×</text>\n</g>\n<!-- 27&#45;&gt;43 -->\n<g id=\"edge47\" class=\"edge\">\n<title>27&#45;&gt;43</title>\n<path fill=\"none\" stroke=\"#0d1274\" stroke-width=\"0.5\" d=\"M1012.44,-459.73C1017.3,-449.73 1023.51,-438.4 1030.5,-429 1032.03,-426.94 1033.68,-424.9 1035.42,-422.89\"/>\n<polygon fill=\"#0d1274\" stroke=\"#0d1274\" stroke-width=\"0.5\" points=\"1036.41,-423.61 1037.82,-420.18 1034.58,-421.98 1036.41,-423.61\"/>\n<text text-anchor=\"middle\" x=\"1044.5\" y=\"-443\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1274\">1.23%</text>\n<text text-anchor=\"middle\" x=\"1044.5\" y=\"-432\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1274\">46×</text>\n</g>\n<!-- 39 -->\n<g id=\"node42\" class=\"node\">\n<title>39</title>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" points=\"1019.5,-420 929.5,-420 929.5,-368 1019.5,-368 1019.5,-420\"/>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-408\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">start_waiting_job</text>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-397\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.30%</text>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-386\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"974.5\" y=\"-375\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">23×</text>\n</g>\n<!-- 27&#45;&gt;39 -->\n<g id=\"edge46\" class=\"edge\">\n<title>27&#45;&gt;39</title>\n<path fill=\"none\" stroke=\"#0d1676\" stroke-width=\"0.5\" d=\"M988.75,-459.66C987.55,-456.78 986.44,-453.85 985.5,-451 982.66,-442.35 980.45,-432.7 978.77,-423.87\"/>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" stroke-width=\"0.5\" points=\"979.92,-423.37 978.08,-420.15 977.51,-423.81 979.92,-423.37\"/>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-443\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">2.30%</text>\n<text text-anchor=\"middle\" x=\"999.5\" y=\"-432\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">23×</text>\n</g>\n<!-- 39&#45;&gt;22 -->\n<g id=\"edge58\" class=\"edge\">\n<title>39&#45;&gt;22</title>\n<path fill=\"none\" stroke=\"#0d1676\" stroke-width=\"0.5\" d=\"M974.5,-367.93C974.5,-356.71 974.5,-343.42 974.5,-331.8\"/>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" stroke-width=\"0.5\" points=\"975.73,-331.75 974.5,-328.25 973.28,-331.75 975.73,-331.75\"/>\n<text text-anchor=\"middle\" x=\"988.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">2.30%</text>\n<text text-anchor=\"middle\" x=\"988.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">23×</text>\n</g>\n<!-- 49 -->\n<g id=\"node50\" class=\"node\">\n<title>49</title>\n<polygon fill=\"#0d1074\" stroke=\"#0d1074\" points=\"616.5,-328 532.5,-328 532.5,-276 616.5,-276 616.5,-328\"/>\n<text text-anchor=\"middle\" x=\"574.5\" y=\"-316\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">lookup_variable</text>\n<text text-anchor=\"middle\" x=\"574.5\" y=\"-305\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.70%</text>\n<text text-anchor=\"middle\" x=\"574.5\" y=\"-294\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"574.5\" y=\"-283\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">737×</text>\n</g>\n<!-- 50&#45;&gt;49 -->\n<g id=\"edge70\" class=\"edge\">\n<title>50&#45;&gt;49</title>\n<path fill=\"none\" stroke=\"#0d0f74\" stroke-width=\"0.5\" d=\"M571.61,-367.93C572.11,-356.71 572.7,-343.42 573.22,-331.8\"/>\n<polygon fill=\"#0d0f74\" stroke=\"#0d0f74\" stroke-width=\"0.5\" points=\"574.45,-331.8 573.38,-328.25 572,-331.69 574.45,-331.8\"/>\n<text text-anchor=\"middle\" x=\"587.5\" y=\"-351\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f74\">0.66%</text>\n<text text-anchor=\"middle\" x=\"587.5\" y=\"-340\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f74\">693×</text>\n</g>\n<!-- 31 -->\n<g id=\"node44\" class=\"node\">\n<title>31</title>\n<polygon fill=\"#0d1a77\" stroke=\"#0d1a77\" points=\"866,-910 775,-910 775,-858 866,-858 866,-910\"/>\n<text text-anchor=\"middle\" x=\"820.5\" y=\"-898\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">new_pattern_rule</text>\n<text text-anchor=\"middle\" x=\"820.5\" y=\"-887\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">3.03%</text>\n<text text-anchor=\"middle\" x=\"820.5\" y=\"-876\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(3.03%)</text>\n<text text-anchor=\"middle\" x=\"820.5\" y=\"-865\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">160×</text>\n</g>\n<!-- 42&#45;&gt;10 -->\n<g id=\"edge61\" class=\"edge\">\n<title>42&#45;&gt;10</title>\n<path fill=\"none\" stroke=\"#0d1475\" stroke-width=\"0.5\" d=\"M363.7,-735.82C366.36,-725.5 370.65,-713.9 377.5,-705 379.2,-702.8 381.08,-700.69 383.09,-698.7\"/>\n<polygon fill=\"#0d1475\" stroke=\"#0d1475\" stroke-width=\"0.5\" points=\"384.21,-699.33 385.92,-696.04 382.53,-697.54 384.21,-699.33\"/>\n<text text-anchor=\"middle\" x=\"391.5\" y=\"-719\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1475\">1.75%</text>\n<text text-anchor=\"middle\" x=\"391.5\" y=\"-708\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1475\">2255×</text>\n</g>\n<!-- 44&#45;&gt;11 -->\n<g id=\"edge63\" class=\"edge\">\n<title>44&#45;&gt;11</title>\n<path fill=\"none\" stroke=\"#0d1275\" stroke-width=\"0.5\" d=\"M102.65,-735.76C108.31,-717.92 114.5,-693.3 114.5,-671 114.5,-671 114.5,-671 114.5,-209 114.5,-153.03 530.14,-127.8 667.81,-120.98\"/>\n<polygon fill=\"#0d1275\" stroke=\"#0d1275\" stroke-width=\"0.5\" points=\"667.97,-122.2 671.4,-120.8 667.85,-119.75 667.97,-122.2\"/>\n<text text-anchor=\"middle\" x=\"128.5\" y=\"-443\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1275\">1.38%</text>\n<text text-anchor=\"middle\" x=\"128.5\" y=\"-432\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1275\">2736×</text>\n</g>\n<!-- 41 -->\n<g id=\"node48\" class=\"node\">\n<title>41</title>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" points=\"922.5,-1002 822.5,-1002 822.5,-950 922.5,-950 922.5,-1002\"/>\n<text text-anchor=\"middle\" x=\"872.5\" y=\"-990\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">create_pattern_rule</text>\n<text text-anchor=\"middle\" x=\"872.5\" y=\"-979\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">2.18%</text>\n<text text-anchor=\"middle\" x=\"872.5\" y=\"-968\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"872.5\" y=\"-957\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">115×</text>\n</g>\n<!-- 40&#45;&gt;41 -->\n<g id=\"edge59\" class=\"edge\">\n<title>40&#45;&gt;41</title>\n<path fill=\"none\" stroke=\"#0d1676\" stroke-width=\"0.5\" d=\"M852.74,-1071.84C856.77,-1052.48 862.35,-1025.72 866.55,-1005.55\"/>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" stroke-width=\"0.5\" points=\"867.75,-1005.8 867.27,-1002.12 865.35,-1005.3 867.75,-1005.8\"/>\n<text text-anchor=\"middle\" x=\"878.5\" y=\"-1040\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">2.18%</text>\n<text text-anchor=\"middle\" x=\"878.5\" y=\"-1029\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">115×</text>\n</g>\n<!-- 41&#45;&gt;31 -->\n<g id=\"edge60\" class=\"edge\">\n<title>41&#45;&gt;31</title>\n<path fill=\"none\" stroke=\"#0d1676\" stroke-width=\"0.5\" d=\"M858.02,-949.93C851.48,-938.61 843.72,-925.19 836.97,-913.5\"/>\n<polygon fill=\"#0d1676\" stroke=\"#0d1676\" stroke-width=\"0.5\" points=\"837.9,-912.67 835.09,-910.25 835.78,-913.89 837.9,-912.67\"/>\n<text text-anchor=\"middle\" x=\"866.5\" y=\"-933\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">2.18%</text>\n<text text-anchor=\"middle\" x=\"866.5\" y=\"-922\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1676\">115×</text>\n</g>\n<!-- 46&#45;&gt;31 -->\n<g id=\"edge66\" class=\"edge\">\n<title>46&#45;&gt;31</title>\n<path fill=\"none\" stroke=\"#0d1074\" stroke-width=\"0.5\" d=\"M792.26,-1010.93C791.54,-1007.95 790.92,-1004.92 790.5,-1002 787.21,-979.12 785.54,-972.57 790.5,-950 793.25,-937.46 798.67,-924.45 804.15,-913.4\"/>\n<polygon fill=\"#0d1074\" stroke=\"#0d1074\" stroke-width=\"0.5\" points=\"805.37,-913.71 805.85,-910.04 803.18,-912.61 805.37,-913.71\"/>\n<text text-anchor=\"middle\" x=\"804.5\" y=\"-979\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1074\">0.85%</text>\n<text text-anchor=\"middle\" x=\"804.5\" y=\"-968\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1074\">45×</text>\n</g>\n<!-- 49&#45;&gt;13 -->\n<g id=\"edge69\" class=\"edge\">\n<title>49&#45;&gt;13</title>\n<path fill=\"none\" stroke=\"#0d1074\" stroke-width=\"0.5\" d=\"M580.71,-275.75C584.27,-265.29 589.64,-253.62 597.5,-245 603.21,-238.74 610.33,-233.44 617.76,-229.02\"/>\n<polygon fill=\"#0d1074\" stroke=\"#0d1074\" stroke-width=\"0.5\" points=\"618.53,-229.99 620.96,-227.18 617.31,-227.87 618.53,-229.99\"/>\n<text text-anchor=\"middle\" x=\"611.5\" y=\"-259\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1074\">0.70%</text>\n<text text-anchor=\"middle\" x=\"611.5\" y=\"-248\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d1074\">1383×</text>\n</g>\n<!-- 100 -->\n<g id=\"node51\" class=\"node\">\n<title>100</title>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" points=\"505,-604 418,-604 418,-552 505,-552 505,-604\"/>\n<text text-anchor=\"middle\" x=\"461.5\" y=\"-592\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">variable_expand</text>\n<text text-anchor=\"middle\" x=\"461.5\" y=\"-581\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">0.54%</text>\n<text text-anchor=\"middle\" x=\"461.5\" y=\"-570\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">(0.00%)</text>\n<text text-anchor=\"middle\" x=\"461.5\" y=\"-559\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#ffffff\">1311×</text>\n</g>\n<!-- 100&#45;&gt;30 -->\n<g id=\"edge72\" class=\"edge\">\n<title>100&#45;&gt;30</title>\n<path fill=\"none\" stroke=\"#0d0f73\" stroke-width=\"0.5\" d=\"M491.86,-551.93C505.92,-540.32 522.66,-526.5 537.07,-514.6\"/>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" stroke-width=\"0.5\" points=\"538,-515.42 539.92,-512.25 536.44,-513.53 538,-515.42\"/>\n<text text-anchor=\"middle\" x=\"543.5\" y=\"-535\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">0.54%</text>\n<text text-anchor=\"middle\" x=\"543.5\" y=\"-524\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">1311×</text>\n</g>\n<!-- 102&#45;&gt;100 -->\n<g id=\"edge74\" class=\"edge\">\n<title>102&#45;&gt;100</title>\n<path fill=\"none\" stroke=\"#0d0f73\" stroke-width=\"0.5\" d=\"M332.36,-643.93C358.1,-630.99 389.32,-615.29 414.62,-602.57\"/>\n<polygon fill=\"#0d0f73\" stroke=\"#0d0f73\" stroke-width=\"0.5\" points=\"415.41,-603.54 417.99,-600.88 414.31,-601.35 415.41,-603.54\"/>\n<text text-anchor=\"middle\" x=\"407.5\" y=\"-627\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">0.53%</text>\n<text text-anchor=\"middle\" x=\"407.5\" y=\"-616\" font-family=\"Arial\" font-size=\"10.00\" fill=\"#0d0f73\">1291×</text>\n</g>\n</g>\n</svg>\n"
        },
        {
          "name": "schema.json",
          "type": "blob",
          "size": 1.2509765625,
          "content": "{\n\t\"title\": \"Schema for JSON profiles.\",\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"version\": {\n\t\t\t\"type\": \"integer\",\n\t\t\t\"minimum\": 0\n\t\t},\n\t\t\"costs\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"description\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"unit\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"additionalProperties\": false\n\t\t\t},\n\t\t\t\"minItems\": 1\n\t\t},\n\t\t\"functions\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"name\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"module\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"process\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\"required\": [\"name\"]\n\t\t\t}\n\t\t},\n\t\t\"events\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"properties\": {\n\t\t\t\t\t\"callchain\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"description\": \"function index, callee to caller ordering\",\n\t\t\t\t\t\t\t\"type\": \"integer\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"minItems\": 1\n\t\t\t\t\t},\n\t\t\t\t\t\"cost\": {\n\t\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\t\"type\": \"number\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"minItems\": 1\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"additionalProperties\": false,\n\t\t\t\t\"required\": [\"callchain\", \"cost\"]\n\t\t\t}\n\t\t}\n\t},\n\t\"additionalProperties\": false,\n\t\"required\": [\"version\", \"costs\", \"functions\", \"events\"]\n}\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.751953125,
          "content": "[metadata]\nname = gprof2dot\nversion = 2024.06.06\nauthor = Jose Fonseca\nauthor_email = jose.r.fonseca@gmail.com\nurl = https://github.com/jrfonseca/gprof2dot\ndescription = Generate a dot graph from the output of several profilers.\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nlicense = LGPL\nclassifiers =\n    Development Status :: 6 - Mature\n    Environment :: Console\n    Intended Audience :: Developers\n    Operating System :: OS Independent\n    License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)\n    Programming Language :: Python :: 3\n    Topic :: Software Development\n\n[options]\npy_modules = gprof2dot\npython_requires = >=3.8\n\n[options.entry_points]\nconsole_scripts =\n    gprof2dot = gprof2dot:main\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.060546875,
          "content": "#!/usr/bin/env python3\n\nfrom setuptools import setup\n\nsetup()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}