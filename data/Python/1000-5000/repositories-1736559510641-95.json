{
  "metadata": {
    "timestamp": 1736559510641,
    "page": 95,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "VAST-AI-Research/TripoSR",
      "stars": 4746,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0498046875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# default output directory\noutput/\noutputs/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "MIT License\n\nCopyright (c) 2024 Tripo AI & Stability AI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.4814453125,
          "content": "# TripoSR <a href=\"https://huggingface.co/stabilityai/TripoSR\"><img src=\"https://img.shields.io/badge/%F0%9F%A4%97%20Model_Card-Huggingface-orange\"></a> <a href=\"https://huggingface.co/spaces/stabilityai/TripoSR\"><img src=\"https://img.shields.io/badge/%F0%9F%A4%97%20Gradio%20Demo-Huggingface-orange\"></a> <a href=\"https://huggingface.co/papers/2403.02151\"><img src=\"https://img.shields.io/badge/%F0%9F%A4%97%20Paper-Huggingface-orange\"></a> <a href=\"https://arxiv.org/abs/2403.02151\"><img src=\"https://img.shields.io/badge/Arxiv-2403.02151-B31B1B.svg\"></a> <a href=\"https://discord.gg/mvS9mCfMnQ\"><img src=\"https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&logoColor=white\"></a>\n\n<div align=\"center\">\n  <img src=\"figures/teaser800.gif\" alt=\"Teaser Video\">\n</div>\n\nThis is the official codebase for **TripoSR**, a state-of-the-art open-source model for **fast** feedforward 3D reconstruction from a single image, collaboratively developed by [Tripo AI](https://www.tripo3d.ai/) and [Stability AI](https://stability.ai/).\n<br><br>\nLeveraging the principles of the [Large Reconstruction Model (LRM)](https://yiconghong.me/LRM/), TripoSR brings to the table key advancements that significantly boost both the speed and quality of 3D reconstruction. Our model is distinguished by its ability to rapidly process inputs, generating high-quality 3D models in less than 0.5 seconds on an NVIDIA A100 GPU. TripoSR has exhibited superior performance in both qualitative and quantitative evaluations, outperforming other open-source alternatives across multiple public datasets. The figures below illustrate visual comparisons and metrics showcasing TripoSR's performance relative to other leading models. Details about the model architecture, training process, and comparisons can be found in this [technical report](https://arxiv.org/abs/2403.02151).\n\n<!--\n<div align=\"center\">\n  <img src=\"figures/comparison800.gif\" alt=\"Teaser Video\">\n</div>\n-->\n<p align=\"center\">\n    <img width=\"800\" src=\"figures/visual_comparisons.jpg\"/>\n</p>\n\n<p align=\"center\">\n    <img width=\"450\" src=\"figures/scatter-comparison.png\"/>\n</p>\n\n\nThe model is released under the MIT license, which includes the source code, pretrained models, and an interactive online demo. Our goal is to empower researchers, developers, and creatives to push the boundaries of what's possible in 3D generative AI and 3D content creation.\n\n## Getting Started\n### Installation\n- Python >= 3.8\n- Install CUDA if available\n- Install PyTorch according to your platform: [https://pytorch.org/get-started/locally/](https://pytorch.org/get-started/locally/) **[Please make sure that the locally-installed CUDA major version matches the PyTorch-shipped CUDA major version. For example if you have CUDA 11.x installed, make sure to install PyTorch compiled with CUDA 11.x.]**\n- Update setuptools by `pip install --upgrade setuptools`\n- Install other dependencies by `pip install -r requirements.txt`\n\n### Manual Inference\n```sh\npython run.py examples/chair.png --output-dir output/\n```\nThis will save the reconstructed 3D model to `output/`. You can also specify more than one image path separated by spaces. The default options takes about **6GB VRAM** for a single image input.\n\nIf you would like to output a texture instead of vertex colors, use the `--bake-texture` option. You may also use `--texture-resolution` to specify the resolution in pixels of the output texture.\n\nFor detailed usage of this script, use `python run.py --help`.\n\n### Local Gradio App\n```sh\npython gradio_app.py\n```\n\n## Troubleshooting\n> AttributeError: module 'torchmcubes_module' has no attribute 'mcubes_cuda'\n\nor\n\n> torchmcubes was not compiled with CUDA support, use CPU version instead.\n\nThis is because `torchmcubes` is compiled without CUDA support. Please make sure that \n\n- The locally-installed CUDA major version matches the PyTorch-shipped CUDA major version. For example if you have CUDA 11.x installed, make sure to install PyTorch compiled with CUDA 11.x.\n- `setuptools>=49.6.0`. If not, upgrade by `pip install --upgrade setuptools`.\n\nThen re-install `torchmcubes` by:\n\n```sh\npip uninstall torchmcubes\npip install git+https://github.com/tatsy/torchmcubes.git\n```\n\n## Citation\n```BibTeX\n@article{TripoSR2024,\n  title={TripoSR: Fast 3D Object Reconstruction from a Single Image},\n  author={Tochilkin, Dmitry and Pankratz, David and Liu, Zexiang and Huang, Zixuan and and Letts, Adam and Li, Yangguang and Liang, Ding and Laforte, Christian and Jampani, Varun and Cao, Yan-Pei},\n  journal={arXiv preprint arXiv:2403.02151},\n  year={2024}\n}\n```\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "figures",
          "type": "tree",
          "content": null
        },
        {
          "name": "gradio_app.py",
          "type": "blob",
          "size": 6.9794921875,
          "content": "import logging\nimport os\nimport tempfile\nimport time\n\nimport gradio as gr\nimport numpy as np\nimport rembg\nimport torch\nfrom PIL import Image\nfrom functools import partial\n\nfrom tsr.system import TSR\nfrom tsr.utils import remove_background, resize_foreground, to_gradio_3d_orientation\n\nimport argparse\n\n\nif torch.cuda.is_available():\n    device = \"cuda:0\"\nelse:\n    device = \"cpu\"\n\nmodel = TSR.from_pretrained(\n    \"stabilityai/TripoSR\",\n    config_name=\"config.yaml\",\n    weight_name=\"model.ckpt\",\n)\n\n# adjust the chunk size to balance between speed and memory usage\nmodel.renderer.set_chunk_size(8192)\nmodel.to(device)\n\nrembg_session = rembg.new_session()\n\n\ndef check_input_image(input_image):\n    if input_image is None:\n        raise gr.Error(\"No image uploaded!\")\n\n\ndef preprocess(input_image, do_remove_background, foreground_ratio):\n    def fill_background(image):\n        image = np.array(image).astype(np.float32) / 255.0\n        image = image[:, :, :3] * image[:, :, 3:4] + (1 - image[:, :, 3:4]) * 0.5\n        image = Image.fromarray((image * 255.0).astype(np.uint8))\n        return image\n\n    if do_remove_background:\n        image = input_image.convert(\"RGB\")\n        image = remove_background(image, rembg_session)\n        image = resize_foreground(image, foreground_ratio)\n        image = fill_background(image)\n    else:\n        image = input_image\n        if image.mode == \"RGBA\":\n            image = fill_background(image)\n    return image\n\n\ndef generate(image, mc_resolution, formats=[\"obj\", \"glb\"]):\n    scene_codes = model(image, device=device)\n    mesh = model.extract_mesh(scene_codes, True, resolution=mc_resolution)[0]\n    mesh = to_gradio_3d_orientation(mesh)\n    rv = []\n    for format in formats:\n        mesh_path = tempfile.NamedTemporaryFile(suffix=f\".{format}\", delete=False)\n        mesh.export(mesh_path.name)\n        rv.append(mesh_path.name)\n    return rv\n\n\ndef run_example(image_pil):\n    preprocessed = preprocess(image_pil, False, 0.9)\n    mesh_name_obj, mesh_name_glb = generate(preprocessed, 256, [\"obj\", \"glb\"])\n    return preprocessed, mesh_name_obj, mesh_name_glb\n\n\nwith gr.Blocks(title=\"TripoSR\") as interface:\n    gr.Markdown(\n        \"\"\"\n    # TripoSR Demo\n    [TripoSR](https://github.com/VAST-AI-Research/TripoSR) is a state-of-the-art open-source model for **fast** feedforward 3D reconstruction from a single image, collaboratively developed by [Tripo AI](https://www.tripo3d.ai/) and [Stability AI](https://stability.ai/).\n    \n    **Tips:**\n    1. If you find the result is unsatisfied, please try to change the foreground ratio. It might improve the results.\n    2. It's better to disable \"Remove Background\" for the provided examples (except fot the last one) since they have been already preprocessed.\n    3. Otherwise, please disable \"Remove Background\" option only if your input image is RGBA with transparent background, image contents are centered and occupy more than 70% of image width or height.\n    \"\"\"\n    )\n    with gr.Row(variant=\"panel\"):\n        with gr.Column():\n            with gr.Row():\n                input_image = gr.Image(\n                    label=\"Input Image\",\n                    image_mode=\"RGBA\",\n                    sources=\"upload\",\n                    type=\"pil\",\n                    elem_id=\"content_image\",\n                )\n                processed_image = gr.Image(label=\"Processed Image\", interactive=False)\n            with gr.Row():\n                with gr.Group():\n                    do_remove_background = gr.Checkbox(\n                        label=\"Remove Background\", value=True\n                    )\n                    foreground_ratio = gr.Slider(\n                        label=\"Foreground Ratio\",\n                        minimum=0.5,\n                        maximum=1.0,\n                        value=0.85,\n                        step=0.05,\n                    )\n                    mc_resolution = gr.Slider(\n                        label=\"Marching Cubes Resolution\",\n                        minimum=32,\n                        maximum=320,\n                        value=256,\n                        step=32\n                    )\n            with gr.Row():\n                submit = gr.Button(\"Generate\", elem_id=\"generate\", variant=\"primary\")\n        with gr.Column():\n            with gr.Tab(\"OBJ\"):\n                output_model_obj = gr.Model3D(\n                    label=\"Output Model (OBJ Format)\",\n                    interactive=False,\n                )\n                gr.Markdown(\"Note: The model shown here is flipped. Download to get correct results.\")\n            with gr.Tab(\"GLB\"):\n                output_model_glb = gr.Model3D(\n                    label=\"Output Model (GLB Format)\",\n                    interactive=False,\n                )\n                gr.Markdown(\"Note: The model shown here has a darker appearance. Download to get correct results.\")\n    with gr.Row(variant=\"panel\"):\n        gr.Examples(\n            examples=[\n                \"examples/hamburger.png\",\n                \"examples/poly_fox.png\",\n                \"examples/robot.png\",\n                \"examples/teapot.png\",\n                \"examples/tiger_girl.png\",\n                \"examples/horse.png\",\n                \"examples/flamingo.png\",\n                \"examples/unicorn.png\",\n                \"examples/chair.png\",\n                \"examples/iso_house.png\",\n                \"examples/marble.png\",\n                \"examples/police_woman.png\",\n                \"examples/captured.jpeg\",\n            ],\n            inputs=[input_image],\n            outputs=[processed_image, output_model_obj, output_model_glb],\n            cache_examples=False,\n            fn=partial(run_example),\n            label=\"Examples\",\n            examples_per_page=20,\n        )\n    submit.click(fn=check_input_image, inputs=[input_image]).success(\n        fn=preprocess,\n        inputs=[input_image, do_remove_background, foreground_ratio],\n        outputs=[processed_image],\n    ).success(\n        fn=generate,\n        inputs=[processed_image, mc_resolution],\n        outputs=[output_model_obj, output_model_glb],\n    )\n\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--username', type=str, default=None, help='Username for authentication')\n    parser.add_argument('--password', type=str, default=None, help='Password for authentication')\n    parser.add_argument('--port', type=int, default=7860, help='Port to run the server listener on')\n    parser.add_argument(\"--listen\", action='store_true', help=\"launch gradio with 0.0.0.0 as server name, allowing to respond to network requests\")\n    parser.add_argument(\"--share\", action='store_true', help=\"use share=True for gradio and make the UI accessible through their site\")\n    parser.add_argument(\"--queuesize\", type=int, default=1, help=\"launch gradio queue max_size\")\n    args = parser.parse_args()\n    interface.queue(max_size=args.queuesize)\n    interface.launch(\n        auth=(args.username, args.password) if (args.username and args.password) else None,\n        share=args.share,\n        server_name=\"0.0.0.0\" if args.listen else None, \n        server_port=args.port\n    )"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1982421875,
          "content": "omegaconf==2.3.0\nPillow==10.1.0\neinops==0.7.0\ngit+https://github.com/tatsy/torchmcubes.git\ntransformers==4.35.0\ntrimesh==4.0.5\nrembg\nhuggingface-hub\nimageio[ffmpeg]\ngradio\nxatlas==0.0.9\nmoderngl==5.10.0\n"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 6.14453125,
          "content": "import argparse\nimport logging\nimport os\nimport time\n\nimport numpy as np\nimport rembg\nimport torch\nimport xatlas\nfrom PIL import Image\n\nfrom tsr.system import TSR\nfrom tsr.utils import remove_background, resize_foreground, save_video\nfrom tsr.bake_texture import bake_texture\n\n\nclass Timer:\n    def __init__(self):\n        self.items = {}\n        self.time_scale = 1000.0  # ms\n        self.time_unit = \"ms\"\n\n    def start(self, name: str) -> None:\n        if torch.cuda.is_available():\n            torch.cuda.synchronize()\n        self.items[name] = time.time()\n        logging.info(f\"{name} ...\")\n\n    def end(self, name: str) -> float:\n        if name not in self.items:\n            return\n        if torch.cuda.is_available():\n            torch.cuda.synchronize()\n        start_time = self.items.pop(name)\n        delta = time.time() - start_time\n        t = delta * self.time_scale\n        logging.info(f\"{name} finished in {t:.2f}{self.time_unit}.\")\n\n\ntimer = Timer()\n\n\nlogging.basicConfig(\n    format=\"%(asctime)s - %(levelname)s - %(message)s\", level=logging.INFO\n)\nparser = argparse.ArgumentParser()\nparser.add_argument(\"image\", type=str, nargs=\"+\", help=\"Path to input image(s).\")\nparser.add_argument(\n    \"--device\",\n    default=\"cuda:0\",\n    type=str,\n    help=\"Device to use. If no CUDA-compatible device is found, will fallback to 'cpu'. Default: 'cuda:0'\",\n)\nparser.add_argument(\n    \"--pretrained-model-name-or-path\",\n    default=\"stabilityai/TripoSR\",\n    type=str,\n    help=\"Path to the pretrained model. Could be either a huggingface model id is or a local path. Default: 'stabilityai/TripoSR'\",\n)\nparser.add_argument(\n    \"--chunk-size\",\n    default=8192,\n    type=int,\n    help=\"Evaluation chunk size for surface extraction and rendering. Smaller chunk size reduces VRAM usage but increases computation time. 0 for no chunking. Default: 8192\",\n)\nparser.add_argument(\n    \"--mc-resolution\",\n    default=256,\n    type=int,\n    help=\"Marching cubes grid resolution. Default: 256\"\n)\nparser.add_argument(\n    \"--no-remove-bg\",\n    action=\"store_true\",\n    help=\"If specified, the background will NOT be automatically removed from the input image, and the input image should be an RGB image with gray background and properly-sized foreground. Default: false\",\n)\nparser.add_argument(\n    \"--foreground-ratio\",\n    default=0.85,\n    type=float,\n    help=\"Ratio of the foreground size to the image size. Only used when --no-remove-bg is not specified. Default: 0.85\",\n)\nparser.add_argument(\n    \"--output-dir\",\n    default=\"output/\",\n    type=str,\n    help=\"Output directory to save the results. Default: 'output/'\",\n)\nparser.add_argument(\n    \"--model-save-format\",\n    default=\"obj\",\n    type=str,\n    choices=[\"obj\", \"glb\"],\n    help=\"Format to save the extracted mesh. Default: 'obj'\",\n)\nparser.add_argument(\n    \"--bake-texture\",\n    action=\"store_true\",\n    help=\"Bake a texture atlas for the extracted mesh, instead of vertex colors\",\n)\nparser.add_argument(\n    \"--texture-resolution\",\n    default=2048,\n    type=int,\n    help=\"Texture atlas resolution, only useful with --bake-texture. Default: 2048\"\n)\nparser.add_argument(\n    \"--render\",\n    action=\"store_true\",\n    help=\"If specified, save a NeRF-rendered video. Default: false\",\n)\nargs = parser.parse_args()\n\noutput_dir = args.output_dir\nos.makedirs(output_dir, exist_ok=True)\n\ndevice = args.device\nif not torch.cuda.is_available():\n    device = \"cpu\"\n\ntimer.start(\"Initializing model\")\nmodel = TSR.from_pretrained(\n    args.pretrained_model_name_or_path,\n    config_name=\"config.yaml\",\n    weight_name=\"model.ckpt\",\n)\nmodel.renderer.set_chunk_size(args.chunk_size)\nmodel.to(device)\ntimer.end(\"Initializing model\")\n\ntimer.start(\"Processing images\")\nimages = []\n\nif args.no_remove_bg:\n    rembg_session = None\nelse:\n    rembg_session = rembg.new_session()\n\nfor i, image_path in enumerate(args.image):\n    if args.no_remove_bg:\n        image = np.array(Image.open(image_path).convert(\"RGB\"))\n    else:\n        image = remove_background(Image.open(image_path), rembg_session)\n        image = resize_foreground(image, args.foreground_ratio)\n        image = np.array(image).astype(np.float32) / 255.0\n        image = image[:, :, :3] * image[:, :, 3:4] + (1 - image[:, :, 3:4]) * 0.5\n        image = Image.fromarray((image * 255.0).astype(np.uint8))\n        if not os.path.exists(os.path.join(output_dir, str(i))):\n            os.makedirs(os.path.join(output_dir, str(i)))\n        image.save(os.path.join(output_dir, str(i), f\"input.png\"))\n    images.append(image)\ntimer.end(\"Processing images\")\n\nfor i, image in enumerate(images):\n    logging.info(f\"Running image {i + 1}/{len(images)} ...\")\n\n    timer.start(\"Running model\")\n    with torch.no_grad():\n        scene_codes = model([image], device=device)\n    timer.end(\"Running model\")\n\n    if args.render:\n        timer.start(\"Rendering\")\n        render_images = model.render(scene_codes, n_views=30, return_type=\"pil\")\n        for ri, render_image in enumerate(render_images[0]):\n            render_image.save(os.path.join(output_dir, str(i), f\"render_{ri:03d}.png\"))\n        save_video(\n            render_images[0], os.path.join(output_dir, str(i), f\"render.mp4\"), fps=30\n        )\n        timer.end(\"Rendering\")\n\n    timer.start(\"Extracting mesh\")\n    meshes = model.extract_mesh(scene_codes, not args.bake_texture, resolution=args.mc_resolution)\n    timer.end(\"Extracting mesh\")\n\n    out_mesh_path = os.path.join(output_dir, str(i), f\"mesh.{args.model_save_format}\")\n    if args.bake_texture:\n        out_texture_path = os.path.join(output_dir, str(i), \"texture.png\")\n\n        timer.start(\"Baking texture\")\n        bake_output = bake_texture(meshes[0], model, scene_codes[0], args.texture_resolution)\n        timer.end(\"Baking texture\")\n\n        timer.start(\"Exporting mesh and texture\")\n        xatlas.export(out_mesh_path, meshes[0].vertices[bake_output[\"vmapping\"]], bake_output[\"indices\"], bake_output[\"uvs\"], meshes[0].vertex_normals[bake_output[\"vmapping\"]])\n        Image.fromarray((bake_output[\"colors\"] * 255.0).astype(np.uint8)).transpose(Image.FLIP_TOP_BOTTOM).save(out_texture_path)\n        timer.end(\"Exporting mesh and texture\")\n    else:\n        timer.start(\"Exporting mesh\")\n        meshes[0].export(out_mesh_path)\n        timer.end(\"Exporting mesh\")\n"
        },
        {
          "name": "tsr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}