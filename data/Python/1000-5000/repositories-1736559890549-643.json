{
  "metadata": {
    "timestamp": 1736559890549,
    "page": 643,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "innnky/so-vits-svc",
      "stars": 3643,
      "defaultBranch": "32k",
      "files": [
        {
          "name": "Eng_docs.md",
          "type": "blob",
          "size": 6.4638671875,
          "content": "# SoftVC VITS Singing Voice Conversion\n\n## Updates\n> According to incomplete statistics, it seems that training with multiple speakers may lead to **worsened leaking of voice timbre**. It is not recommended to train models with more than 5 speakers. The current suggestion is to try to train models with only a single speaker if you want to achieve a voice timbre that is more similar to the target.\n> Fixed the issue with unwanted staccato, improving audio quality by a decent amount.\\\n> The 2.0 version has been moved to the 2.0 branch.\\\n> Version 3.0 uses the code structure of FreeVC, which isn't compatible with older versions.\\\n> Compared to [DiffSVC](https://github.com/prophesier/diff-svc) , diffsvc performs much better when the training data is of extremely high quality, but this repository may perform better on datasets with lower quality. Additionally, this repository is much faster in terms of inference speed compared to diffsvc.\n\n## Model Overview\nA singing voice conversion (SVC) model, using the SoftVC encoder to extract features from the input audio, sent into VITS along with the F0 to replace the original input to achieve a voice conversion effect. Additionally, changing the vocoder to [NSF HiFiGAN](https://github.com/openvpi/DiffSinger/tree/refactor/modules/nsf_hifigan) to fix the issue with unwanted staccato.\n\n## Notice\n+ The current branch is the 32kHz version, which requires less vram during inferencing, as well as faster inferencing speeds, and datasets for said branch take up less disk space. Thus the 32 kHz branch is recommended for use.\n+ If you want to train 48 kHz variant models, switch to the [main branch](https://github.com/innnky/so-vits-svc/tree/main).\n\n\n## Required models\n+ soft vc hubert：[hubert-soft-0d54a1f4.pt](https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt)\n  + Place under `hubert`.\n+ Pretrained models [G_0.pth](https://huggingface.co/innnky/sovits_pretrained/resolve/main/G_0.pth) and [D_0.pth](https://huggingface.co/innnky/sovits_pretrained/resolve/main/D_0.pth)\n  + Place under `logs/32k`.\n  + Pretrained models are required, because from experiments, training from scratch can be rather unpredictable to say the least, and training with a pretrained model can greatly improve training speeds.\n  + The pretrained model includes云灏, 即霜, 辉宇·星AI, 派蒙, and 绫地宁宁, covering the common ranges of both male and female voices, and so it can be seen as a rather universal pretrained model.\n  + The pretrained model exludes the `optimizer speaker_embedding` section, rendering it only usable for pretraining and incapable of inferencing with.\n```shell\n# For simple downloading.\n# hubert\nwget -P hubert/ https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt\n# G&D pretrained models\nwget -P logs/32k/ https://huggingface.co/innnky/sovits_pretrained/resolve/main/G_0.pth\nwget -P logs/32k/ https://huggingface.co/innnky/sovits_pretrained/resolve/main/D_0.pth\n\n```\n\n## Colab notebook script for dataset creation and training.\n[colab training notebook](https://colab.research.google.com/drive/1rCUOOVG7-XQlVZuWRAj5IpGrMM8t07pE?usp=sharing)\n\n## Dataset preparation\nAll that is required is that the data be put under the `dataset_raw` folder in the structure format provided below.\n```shell\ndataset_raw\n├───speaker0\n│   ├───xxx1-xxx1.wav\n│   ├───...\n│   └───Lxx-0xx8.wav\n└───speaker1\n    ├───xx2-0xxx2.wav\n    ├───...\n    └───xxx7-xxx007.wav\n```\n\n## Data pre-processing.\n1. Resample to 32khz\n\n```shell\npython resample.py\n ```\n2. Automatically sort out training set, validation set, test set, and automatically generate configuration files.\n```shell\npython preprocess_flist_config.py\n# Notice.\n# The n_speakers value in the config will be set automatically according to the amount of speakers in the dataset.\n# To reserve space for additionally added speakers in the dataset, the n_speakers value will be be set to twice the actual amount.\n# If you want even more space for adding more data, you can edit the n_speakers value in the config after runing this step.\n# This can not be changed after training starts.\n```\n3. Generate hubert and F0 features/\n```shell\npython preprocess_hubert_f0.py\n```\nAfter running the step above, the `dataset` folder will contain all the pre-processed data, you can delete the `dataset_raw` folder after that.\n\n## Training.\n```shell\npython train.py -c configs/config.json -m 32k\n```\n\n## Inferencing.\n\nUse [inference_main.py](inference_main.py)\n+ Edit `model_path` to your newest checkpoint.\n+ Place the input audio under the `raw` folder.\n+ Change `clean_names` to the output file name.\n+ Use `trans` to edit the pitch shifting amount (semitones). \n+ Change `spk_list` to the speaker name.\n\n## Onnx Exporting.\n### **When exporting Onnx, please make sure you re-clone the whole repository!!!**\nUse [onnx_export.py](onnx_export.py)\n+ Create a new folder called `checkpoints`.\n+ Create a project folder in `checkpoints` folder with the desired name for your project, let's use `myproject` as example. Folder structure looks like `./checkpoints/myproject`.\n+ Rename your model to `model.pth`, rename your config file to `config.json` then move them into `myproject` folder.\n+ Modify [onnx_export.py](onnx_export.py) where `path = \"NyaruTaffy\"`, change `NyaruTaffy` to your project name, here it will be `path = \"myproject\"`.\n+ Run [onnx_export.py](onnx_export.py)\n+ Once it finished, a `model.onnx` will be generated in `myproject` folder, that's the model you just exported.\n+ Notice: if you want to export a 48K model, please follow the instruction below or use `model_onnx_48k.py` directly.\n    + Open [model_onnx.py](model_onnx.py) and change `hps={\"sampling_rate\": 32000...}` to `hps={\"sampling_rate\": 48000}` in class `SynthesizerTrn`.\n    + Open [nvSTFT](/vdecoder/hifigan/nvSTFT.py) and replace all `32000` with `48000`\n    ### Onnx Model UI Support\n    + [MoeSS](https://github.com/NaruseMioShirakana/MoeSS)\n+ All training function and transformation are removed, only if they are all removed you are actually using Onnx.\n\n## Gradio (WebUI)\nUse [sovits_gradio.py](sovits_gradio.py) to run Gradio WebUI\n+ Create a new folder called `checkpoints`.\n+ Create a project folder in `checkpoints` folder with the desired name for your project, let's use `myproject` as example. Folder structure looks like `./checkpoints/myproject`.\n+ Rename your model to `model.pth`, rename your config file to `config.json` then move them into `myproject` folder.\n+ Run [sovits_gradio.py](sovits_gradio.py)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.732421875,
          "content": "# SoftVC VITS Singing Voice Conversion\n\n## SoVITS已停止更新并正式Archive\n后续维护等工作的一些其他相关仓库： \n+ [so-vits-svc](https://github.com/svc-develop-team/so-vits-svc) ：svc社区准备接手维护sovits，如果有pr和issue可以往这里提交 \n+ [SoftVitsResearch](https://github.com/NaruseMioShirakana/SoftVitsResearch) ：用于制作一些比较花里胡哨的功能（主要面向Onnx端-MoeSS）\n\n## 声明\n\n本项目为开源、离线的项目，SvcDevelopTeam 的所有成员与本项目的所有开发者以及维护者（以下简称贡献者）对本项目没有控制力。本项目的贡献者从未向任何组织或个人提供包括但不限于数据集提取、数据集加工、算力支持、训练支持、推理等一切形式的帮助；本项目的贡献者不知晓也无法知晓使用者使用该项目的用途。故一切基于本项目训练的 AI 模型和合成的音频都与本项目贡献者无关。一切由此造成的问题由使用者自行承担。\n\n此项目完全离线运行，不能收集任何用户信息或获取用户输入数据。因此，这个项目的贡献者不知道所有的用户输入和模型，因此不负责任何用户输入。\n\n本项目只是一个框架项目，本身并没有语音合成的功能，所有的功能都需要用户自己训练模型。同时，这个项目没有任何模型，任何二次分发的项目都与这个项目的贡献者无关。\n\n## 📏 使用规约\n\n# Warning：请自行解决数据集授权问题，禁止使用非授权数据集进行训练！任何由于使用非授权数据集进行训练造成的问题，需自行承担全部责任和后果！与仓库、仓库维护者、svc develop team 无关！\n\n1. 本项目是基于学术交流目的建立，仅供交流与学习使用，并非为生产环境准备。\n2. 任何发布到视频平台的基于 sovits 制作的视频，都必须要在简介明确指明用于变声器转换的输入源歌声、音频，例如：使用他人发布的视频 / 音频，通过分离的人声作为输入源进行转换的，必须要给出明确的原视频、音乐链接；若使用是自己的人声，或是使用其他歌声合成引擎合成的声音作为输入源进行转换的，也必须在简介加以说明。\n3. 由输入源造成的侵权问题需自行承担全部责任和一切后果。使用其他商用歌声合成软件作为输入源时，请确保遵守该软件的使用条例，注意，许多歌声合成引擎使用条例中明确指明不可用于输入源进行转换！\n4. 禁止使用该项目从事违法行为与宗教、政治等活动，该项目维护者坚决抵制上述行为，不同意此条则禁止使用该项目。\n5. 继续使用视为已同意本仓库 README 所述相关条例，本仓库 README 已进行劝导义务，不对后续可能存在问题负责。\n6. 如果将此项目用于任何其他企划，请提前联系并告知本仓库作者，十分感谢。\n\n## English docs\n[Check here](Eng_docs.md)\n\n\n## Updates\n> 诈尸一下，4.0-v2不少人炼出来效果很烂，那我就把这分支直接删了 \\\n> 更新了4.0-v2模型，全部流程同4.0，在[4.0-v2分支](https://github.com/innnky/so-vits-svc/tree/4.0-v2) 这是sovits最后一次更新 \\\n> **4.0模型及colab脚本已更新**：在[4.0分支](https://github.com/innnky/so-vits-svc/tree/4.0) 统一采样率使用44100hz（但推理显存占用比3.0的32khz还小），更换特征提取为contentvec， 目前稳定性还没有经过广泛测试\n> \n> 据不完全统计，多说话人似乎会导致**音色泄漏加重**，不建议训练超过5人的模型，目前的建议是如果想炼出来更像目标音色，**尽可能炼单说话人的**\\\n> 断音问题已解决，音质提升了不少\\\n> 2.0版本已经移至 sovits_2.0分支\\\n> 3.0版本使用FreeVC的代码结构，与旧版本不通用\\\n> 与[DiffSVC](https://github.com/prophesier/diff-svc) 相比，在训练数据质量非常高时diffsvc有着更好的表现，对于质量差一些的数据集，本仓库可能会有更好的表现，此外，本仓库推理速度上比diffsvc快很多\n\n\n## 模型简介\n歌声音色转换模型，通过SoftVC内容编码器提取源音频语音特征，与F0同时输入VITS替换原本的文本输入达到歌声转换的效果。同时，更换声码器为 [NSF HiFiGAN](https://github.com/openvpi/DiffSinger/tree/refactor/modules/nsf_hifigan) 解决断音问题\n\n\n## 注意\n+ 当前分支是32khz版本的分支，32khz模型推理更快，显存占用大幅减小，数据集所占硬盘空间也大幅降低，推荐训练该版本模型\n+ 如果要训练48khz的模型请切换到[main分支](https://github.com/innnky/so-vits-svc/tree/main) \n\n\n## 预先下载的模型文件\n+ soft vc hubert：[hubert-soft-0d54a1f4.pt](https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt)\n  + 放在`hubert`目录下\n+ 预训练底模文件 [G_0.pth](https://huggingface.co/innnky/sovits_pretrained/resolve/main/G_0.pth) 与 [D_0.pth](https://huggingface.co/innnky/sovits_pretrained/resolve/main/D_0.pth)\n  + 放在`logs/32k`目录下\n  + 预训练底模为必选项，因为据测试从零开始训练有概率不收敛，同时底模也能加快训练速度\n  + 预训练底模训练数据集包含云灏 即霜 辉宇·星AI 派蒙 绫地宁宁，覆盖男女生常见音域，可以认为是相对通用的底模\n  + 底模删除了`optimizer speaker_embedding`等无关权重, 只可以用于初始化训练，无法用于推理\n  + 该底模和48khz底模通用\n```shell\n# 一键下载\n# hubert\nwget -P hubert/ https://github.com/bshall/hubert/releases/download/v0.1/hubert-soft-0d54a1f4.pt\n# G与D预训练模型\nwget -P logs/32k/ https://huggingface.co/innnky/sovits_pretrained/resolve/main/G_0.pth\nwget -P logs/32k/ https://huggingface.co/innnky/sovits_pretrained/resolve/main/D_0.pth\n\n```\n\n\n## colab一键数据集制作、训练脚本\n[一键colab](https://colab.research.google.com/drive/1_-gh9i-wCPNlRZw6pYF-9UufetcVrGBX?usp=sharing)\n\n\n## 数据集准备\n仅需要以以下文件结构将数据集放入dataset_raw目录即可\n```shell\ndataset_raw\n├───speaker0\n│   ├───xxx1-xxx1.wav\n│   ├───...\n│   └───Lxx-0xx8.wav\n└───speaker1\n    ├───xx2-0xxx2.wav\n    ├───...\n    └───xxx7-xxx007.wav\n```\n\n\n## 数据预处理\n1. 重采样至 32khz\n\n```shell\npython resample.py\n ```\n2. 自动划分训练集 验证集 测试集 以及自动生成配置文件\n```shell\npython preprocess_flist_config.py\n# 注意\n# 自动生成的配置文件中，说话人数量n_speakers会自动按照数据集中的人数而定\n# 为了给之后添加说话人留下一定空间，n_speakers自动设置为 当前数据集人数乘2\n# 如果想多留一些空位可以在此步骤后 自行修改生成的config.json中n_speakers数量\n# 一旦模型开始训练后此项不可再更改\n```\n3. 生成hubert与f0\n```shell\npython preprocess_hubert_f0.py\n```\n执行完以上步骤后 dataset 目录便是预处理完成的数据，可以删除dataset_raw文件夹了\n\n\n## 训练\n```shell\npython train.py -c configs/config.json -m 32k\n```\n\n\n## 推理\n\n使用 [inference_main.py](inference_main.py)\n+ 更改`model_path`为你自己训练的最新模型记录点\n+ 将待转换的音频放在`raw`文件夹下\n+ `clean_names` 写待转换的音频名称\n+ `trans` 填写变调半音数量\n+ `spk_list` 填写合成的说话人名称\n\n\n## Onnx导出\n### 重要的事情说三遍：导出Onnx时，请重新克隆整个仓库！！！导出Onnx时，请重新克隆整个仓库！！！导出Onnx时，请重新克隆整个仓库！！！\n使用 [onnx_export.py](onnx_export.py)\n+ 新建文件夹：`checkpoints` 并打开\n+ 在`checkpoints`文件夹中新建一个文件夹作为项目文件夹，文件夹名为你的项目名称，比如`aziplayer`\n+ 将你的模型更名为`model.pth`，配置文件更名为`config.json`，并放置到刚才创建的`aziplayer`文件夹下\n+ 将 [onnx_export.py](onnx_export.py) 中`path = \"NyaruTaffy\"` 的 `\"NyaruTaffy\"` 修改为你的项目名称，`path = \"aziplayer\"`\n+ 运行 [onnx_export.py](onnx_export.py) \n+ 等待执行完毕，在你的项目文件夹下会生成一个`model.onnx`，即为导出的模型\n+ 注意：若想导出48K模型，请按照以下步骤修改文件，或者直接使用`model_onnx_48k.py`\n   + 请打开[model_onnx.py](model_onnx.py)，将其中最后一个class`SynthesizerTrn`的hps中`sampling_rate`32000改为48000\n   + 请打开[nvSTFT](/vdecoder/hifigan/nvSTFT.py)，将其中所有32000改为48000\n   ### Onnx模型支持的UI\n   + [MoeSS](https://github.com/NaruseMioShirakana/MoeSS)\n+ 我去除了所有的训练用函数和一切复杂的转置，一行都没有保留，因为我认为只有去除了这些东西，才知道你用的是Onnx\n\n## Gradio（WebUI）\n使用 [sovits_gradio.py](sovits_gradio.py)\n+ 新建文件夹：checkpoints 并打开\n+ 在checkpoints文件夹中新建一个文件夹作为项目文件夹，文件夹名为你的项目名称\n+ 将你的模型更名为model.pth，配置文件更名为config.json，并放置到刚才创建的文件夹下\n+ 运行 [sovits_gradio.py](sovits_gradio.py) \n\n## 📚 一些法律条例参考\n\n#### 任何国家，地区，组织和个人使用此项目必须遵守以下法律\n\n#### 《民法典》\n\n##### 第一千零一十九条\n\n任何组织或者个人不得以丑化、污损，或者利用信息技术手段伪造等方式侵害他人的肖像权。未经肖像权人同意，不得制作、使用、公开肖像权人的肖像，但是法律另有规定的除外。未经肖像权人同意，肖像作品权利人不得以发表、复制、发行、出租、展览等方式使用或者公开肖像权人的肖像。对自然人声音的保护，参照适用肖像权保护的有关规定。\n\n##### 第一千零二十四条\n\n【名誉权】民事主体享有名誉权。任何组织或者个人不得以侮辱、诽谤等方式侵害他人的名誉权。\n\n##### 第一千零二十七条\n\n【作品侵害名誉权】行为人发表的文学、艺术作品以真人真事或者特定人为描述对象，含有侮辱、诽谤内容，侵害他人名誉权的，受害人有权依法请求该行为人承担民事责任。行为人发表的文学、艺术作品不以特定人为描述对象，仅其中的情节与该特定人的情况相似的，不承担民事责任。\n\n#### 《[中华人民共和国宪法](http://www.gov.cn/guoqing/2018-03/22/content_5276318.htm)》\n\n#### 《[中华人民共和国刑法](http://gongbao.court.gov.cn/Details/f8e30d0689b23f57bfc782d21035c3.html?sw=中华人民共和国刑法)》\n\n#### 《[中华人民共和国民法典](http://gongbao.court.gov.cn/Details/51eb6750b8361f79be8f90d09bc202.html)》\n\n#### 《[中华人民共和国合同法](http://www.npc.gov.cn/zgrdw/npc/lfzt/rlyw/2016-07/01/content_1992739.htm)》\n"
        },
        {
          "name": "add_speaker.py",
          "type": "blob",
          "size": 2.072265625,
          "content": "import os\nimport argparse\nfrom tqdm import tqdm\nfrom random import shuffle\nimport json\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--train_list\", type=str, default=\"./filelists/train.txt\", help=\"path to train list\")\n    parser.add_argument(\"--val_list\", type=str, default=\"./filelists/val.txt\", help=\"path to val list\")\n    parser.add_argument(\"--test_list\", type=str, default=\"./filelists/test.txt\", help=\"path to test list\")\n    parser.add_argument(\"--source_dir\", type=str, default=\"./dataset/32k\", help=\"path to source dir\")\n    args = parser.parse_args()\n\n    previous_config = json.load(open(\"configs/config.json\", \"rb\"))\n\n    train = []\n    val = []\n    test = []\n    idx = 0\n    spk_dict = previous_config[\"spk\"]\n    spk_id = max([i for i in spk_dict.values()]) + 1\n    for speaker in tqdm(os.listdir(args.source_dir)):\n        if speaker not in spk_dict.keys():\n            spk_dict[speaker] = spk_id\n            spk_id += 1\n        wavs = [os.path.join(args.source_dir, speaker, i)for i in os.listdir(os.path.join(args.source_dir, speaker))]\n        wavs = [i for i in wavs if i.endswith(\"wav\")]\n        shuffle(wavs)\n        train += wavs[2:-10]\n        val += wavs[:2]\n        test += wavs[-10:]\n\n    assert previous_config[\"model\"][\"n_speakers\"] > len(spk_dict.keys())\n    shuffle(train)\n    shuffle(val)\n    shuffle(test)\n            \n    print(\"Writing\", args.train_list)\n    with open(args.train_list, \"w\") as f:\n        for fname in tqdm(train):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n        \n    print(\"Writing\", args.val_list)\n    with open(args.val_list, \"w\") as f:\n        for fname in tqdm(val):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n            \n    print(\"Writing\", args.test_list)\n    with open(args.test_list, \"w\") as f:\n        for fname in tqdm(test):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n\n    previous_config[\"spk\"] = spk_dict\n\n    print(\"Writing configs/config.json\")\n    with open(\"configs/config.json\", \"w\") as f:\n        json.dump(previous_config, f, indent=2)\n"
        },
        {
          "name": "attentions.py",
          "type": "blob",
          "size": 11.50390625,
          "content": "import copy\nimport math\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport commons\nimport modules\nfrom modules import LayerNorm\n   \n\nclass Encoder(nn.Module):\n  def __init__(self, hidden_channels, filter_channels, n_heads, n_layers, kernel_size=1, p_dropout=0., window_size=4, **kwargs):\n    super().__init__()\n    self.hidden_channels = hidden_channels\n    self.filter_channels = filter_channels\n    self.n_heads = n_heads\n    self.n_layers = n_layers\n    self.kernel_size = kernel_size\n    self.p_dropout = p_dropout\n    self.window_size = window_size\n\n    self.drop = nn.Dropout(p_dropout)\n    self.attn_layers = nn.ModuleList()\n    self.norm_layers_1 = nn.ModuleList()\n    self.ffn_layers = nn.ModuleList()\n    self.norm_layers_2 = nn.ModuleList()\n    for i in range(self.n_layers):\n      self.attn_layers.append(MultiHeadAttention(hidden_channels, hidden_channels, n_heads, p_dropout=p_dropout, window_size=window_size))\n      self.norm_layers_1.append(LayerNorm(hidden_channels))\n      self.ffn_layers.append(FFN(hidden_channels, hidden_channels, filter_channels, kernel_size, p_dropout=p_dropout))\n      self.norm_layers_2.append(LayerNorm(hidden_channels))\n\n  def forward(self, x, x_mask):\n    attn_mask = x_mask.unsqueeze(2) * x_mask.unsqueeze(-1)\n    x = x * x_mask\n    for i in range(self.n_layers):\n      y = self.attn_layers[i](x, x, attn_mask)\n      y = self.drop(y)\n      x = self.norm_layers_1[i](x + y)\n\n      y = self.ffn_layers[i](x, x_mask)\n      y = self.drop(y)\n      x = self.norm_layers_2[i](x + y)\n    x = x * x_mask\n    return x\n\n\nclass Decoder(nn.Module):\n  def __init__(self, hidden_channels, filter_channels, n_heads, n_layers, kernel_size=1, p_dropout=0., proximal_bias=False, proximal_init=True, **kwargs):\n    super().__init__()\n    self.hidden_channels = hidden_channels\n    self.filter_channels = filter_channels\n    self.n_heads = n_heads\n    self.n_layers = n_layers\n    self.kernel_size = kernel_size\n    self.p_dropout = p_dropout\n    self.proximal_bias = proximal_bias\n    self.proximal_init = proximal_init\n\n    self.drop = nn.Dropout(p_dropout)\n    self.self_attn_layers = nn.ModuleList()\n    self.norm_layers_0 = nn.ModuleList()\n    self.encdec_attn_layers = nn.ModuleList()\n    self.norm_layers_1 = nn.ModuleList()\n    self.ffn_layers = nn.ModuleList()\n    self.norm_layers_2 = nn.ModuleList()\n    for i in range(self.n_layers):\n      self.self_attn_layers.append(MultiHeadAttention(hidden_channels, hidden_channels, n_heads, p_dropout=p_dropout, proximal_bias=proximal_bias, proximal_init=proximal_init))\n      self.norm_layers_0.append(LayerNorm(hidden_channels))\n      self.encdec_attn_layers.append(MultiHeadAttention(hidden_channels, hidden_channels, n_heads, p_dropout=p_dropout))\n      self.norm_layers_1.append(LayerNorm(hidden_channels))\n      self.ffn_layers.append(FFN(hidden_channels, hidden_channels, filter_channels, kernel_size, p_dropout=p_dropout, causal=True))\n      self.norm_layers_2.append(LayerNorm(hidden_channels))\n\n  def forward(self, x, x_mask, h, h_mask):\n    \"\"\"\n    x: decoder input\n    h: encoder output\n    \"\"\"\n    self_attn_mask = commons.subsequent_mask(x_mask.size(2)).to(device=x.device, dtype=x.dtype)\n    encdec_attn_mask = h_mask.unsqueeze(2) * x_mask.unsqueeze(-1)\n    x = x * x_mask\n    for i in range(self.n_layers):\n      y = self.self_attn_layers[i](x, x, self_attn_mask)\n      y = self.drop(y)\n      x = self.norm_layers_0[i](x + y)\n\n      y = self.encdec_attn_layers[i](x, h, encdec_attn_mask)\n      y = self.drop(y)\n      x = self.norm_layers_1[i](x + y)\n      \n      y = self.ffn_layers[i](x, x_mask)\n      y = self.drop(y)\n      x = self.norm_layers_2[i](x + y)\n    x = x * x_mask\n    return x\n\n\nclass MultiHeadAttention(nn.Module):\n  def __init__(self, channels, out_channels, n_heads, p_dropout=0., window_size=None, heads_share=True, block_length=None, proximal_bias=False, proximal_init=False):\n    super().__init__()\n    assert channels % n_heads == 0\n\n    self.channels = channels\n    self.out_channels = out_channels\n    self.n_heads = n_heads\n    self.p_dropout = p_dropout\n    self.window_size = window_size\n    self.heads_share = heads_share\n    self.block_length = block_length\n    self.proximal_bias = proximal_bias\n    self.proximal_init = proximal_init\n    self.attn = None\n\n    self.k_channels = channels // n_heads\n    self.conv_q = nn.Conv1d(channels, channels, 1)\n    self.conv_k = nn.Conv1d(channels, channels, 1)\n    self.conv_v = nn.Conv1d(channels, channels, 1)\n    self.conv_o = nn.Conv1d(channels, out_channels, 1)\n    self.drop = nn.Dropout(p_dropout)\n\n    if window_size is not None:\n      n_heads_rel = 1 if heads_share else n_heads\n      rel_stddev = self.k_channels**-0.5\n      self.emb_rel_k = nn.Parameter(torch.randn(n_heads_rel, window_size * 2 + 1, self.k_channels) * rel_stddev)\n      self.emb_rel_v = nn.Parameter(torch.randn(n_heads_rel, window_size * 2 + 1, self.k_channels) * rel_stddev)\n\n    nn.init.xavier_uniform_(self.conv_q.weight)\n    nn.init.xavier_uniform_(self.conv_k.weight)\n    nn.init.xavier_uniform_(self.conv_v.weight)\n    if proximal_init:\n      with torch.no_grad():\n        self.conv_k.weight.copy_(self.conv_q.weight)\n        self.conv_k.bias.copy_(self.conv_q.bias)\n      \n  def forward(self, x, c, attn_mask=None):\n    q = self.conv_q(x)\n    k = self.conv_k(c)\n    v = self.conv_v(c)\n    \n    x, self.attn = self.attention(q, k, v, mask=attn_mask)\n\n    x = self.conv_o(x)\n    return x\n\n  def attention(self, query, key, value, mask=None):\n    # reshape [b, d, t] -> [b, n_h, t, d_k]\n    b, d, t_s, t_t = (*key.size(), query.size(2))\n    query = query.view(b, self.n_heads, self.k_channels, t_t).transpose(2, 3)\n    key = key.view(b, self.n_heads, self.k_channels, t_s).transpose(2, 3)\n    value = value.view(b, self.n_heads, self.k_channels, t_s).transpose(2, 3)\n\n    scores = torch.matmul(query / math.sqrt(self.k_channels), key.transpose(-2, -1))\n    if self.window_size is not None:\n      assert t_s == t_t, \"Relative attention is only available for self-attention.\"\n      key_relative_embeddings = self._get_relative_embeddings(self.emb_rel_k, t_s)\n      rel_logits = self._matmul_with_relative_keys(query /math.sqrt(self.k_channels), key_relative_embeddings)\n      scores_local = self._relative_position_to_absolute_position(rel_logits)\n      scores = scores + scores_local\n    if self.proximal_bias:\n      assert t_s == t_t, \"Proximal bias is only available for self-attention.\"\n      scores = scores + self._attention_bias_proximal(t_s).to(device=scores.device, dtype=scores.dtype)\n    if mask is not None:\n      scores = scores.masked_fill(mask == 0, -1e4)\n      if self.block_length is not None:\n        assert t_s == t_t, \"Local attention is only available for self-attention.\"\n        block_mask = torch.ones_like(scores).triu(-self.block_length).tril(self.block_length)\n        scores = scores.masked_fill(block_mask == 0, -1e4)\n    p_attn = F.softmax(scores, dim=-1) # [b, n_h, t_t, t_s]\n    p_attn = self.drop(p_attn)\n    output = torch.matmul(p_attn, value)\n    if self.window_size is not None:\n      relative_weights = self._absolute_position_to_relative_position(p_attn)\n      value_relative_embeddings = self._get_relative_embeddings(self.emb_rel_v, t_s)\n      output = output + self._matmul_with_relative_values(relative_weights, value_relative_embeddings)\n    output = output.transpose(2, 3).contiguous().view(b, d, t_t) # [b, n_h, t_t, d_k] -> [b, d, t_t]\n    return output, p_attn\n\n  def _matmul_with_relative_values(self, x, y):\n    \"\"\"\n    x: [b, h, l, m]\n    y: [h or 1, m, d]\n    ret: [b, h, l, d]\n    \"\"\"\n    ret = torch.matmul(x, y.unsqueeze(0))\n    return ret\n\n  def _matmul_with_relative_keys(self, x, y):\n    \"\"\"\n    x: [b, h, l, d]\n    y: [h or 1, m, d]\n    ret: [b, h, l, m]\n    \"\"\"\n    ret = torch.matmul(x, y.unsqueeze(0).transpose(-2, -1))\n    return ret\n\n  def _get_relative_embeddings(self, relative_embeddings, length):\n    max_relative_position = 2 * self.window_size + 1\n    # Pad first before slice to avoid using cond ops.\n    pad_length = max(length - (self.window_size + 1), 0)\n    slice_start_position = max((self.window_size + 1) - length, 0)\n    slice_end_position = slice_start_position + 2 * length - 1\n    if pad_length > 0:\n      padded_relative_embeddings = F.pad(\n          relative_embeddings,\n          commons.convert_pad_shape([[0, 0], [pad_length, pad_length], [0, 0]]))\n    else:\n      padded_relative_embeddings = relative_embeddings\n    used_relative_embeddings = padded_relative_embeddings[:,slice_start_position:slice_end_position]\n    return used_relative_embeddings\n\n  def _relative_position_to_absolute_position(self, x):\n    \"\"\"\n    x: [b, h, l, 2*l-1]\n    ret: [b, h, l, l]\n    \"\"\"\n    batch, heads, length, _ = x.size()\n    # Concat columns of pad to shift from relative to absolute indexing.\n    x = F.pad(x, commons.convert_pad_shape([[0,0],[0,0],[0,0],[0,1]]))\n\n    # Concat extra elements so to add up to shape (len+1, 2*len-1).\n    x_flat = x.view([batch, heads, length * 2 * length])\n    x_flat = F.pad(x_flat, commons.convert_pad_shape([[0,0],[0,0],[0,length-1]]))\n\n    # Reshape and slice out the padded elements.\n    x_final = x_flat.view([batch, heads, length+1, 2*length-1])[:, :, :length, length-1:]\n    return x_final\n\n  def _absolute_position_to_relative_position(self, x):\n    \"\"\"\n    x: [b, h, l, l]\n    ret: [b, h, l, 2*l-1]\n    \"\"\"\n    batch, heads, length, _ = x.size()\n    # padd along column\n    x = F.pad(x, commons.convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length-1]]))\n    x_flat = x.view([batch, heads, length**2 + length*(length -1)])\n    # add 0's in the beginning that will skew the elements after reshape\n    x_flat = F.pad(x_flat, commons.convert_pad_shape([[0, 0], [0, 0], [length, 0]]))\n    x_final = x_flat.view([batch, heads, length, 2*length])[:,:,:,1:]\n    return x_final\n\n  def _attention_bias_proximal(self, length):\n    \"\"\"Bias for self-attention to encourage attention to close positions.\n    Args:\n      length: an integer scalar.\n    Returns:\n      a Tensor with shape [1, 1, length, length]\n    \"\"\"\n    r = torch.arange(length, dtype=torch.float32)\n    diff = torch.unsqueeze(r, 0) - torch.unsqueeze(r, 1)\n    return torch.unsqueeze(torch.unsqueeze(-torch.log1p(torch.abs(diff)), 0), 0)\n\n\nclass FFN(nn.Module):\n  def __init__(self, in_channels, out_channels, filter_channels, kernel_size, p_dropout=0., activation=None, causal=False):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.filter_channels = filter_channels\n    self.kernel_size = kernel_size\n    self.p_dropout = p_dropout\n    self.activation = activation\n    self.causal = causal\n\n    if causal:\n      self.padding = self._causal_padding\n    else:\n      self.padding = self._same_padding\n\n    self.conv_1 = nn.Conv1d(in_channels, filter_channels, kernel_size)\n    self.conv_2 = nn.Conv1d(filter_channels, out_channels, kernel_size)\n    self.drop = nn.Dropout(p_dropout)\n\n  def forward(self, x, x_mask):\n    x = self.conv_1(self.padding(x * x_mask))\n    if self.activation == \"gelu\":\n      x = x * torch.sigmoid(1.702 * x)\n    else:\n      x = torch.relu(x)\n    x = self.drop(x)\n    x = self.conv_2(self.padding(x * x_mask))\n    return x * x_mask\n  \n  def _causal_padding(self, x):\n    if self.kernel_size == 1:\n      return x\n    pad_l = self.kernel_size - 1\n    pad_r = 0\n    padding = [[0, 0], [0, 0], [pad_l, pad_r]]\n    x = F.pad(x, commons.convert_pad_shape(padding))\n    return x\n\n  def _same_padding(self, x):\n    if self.kernel_size == 1:\n      return x\n    pad_l = (self.kernel_size - 1) // 2\n    pad_r = self.kernel_size // 2\n    padding = [[0, 0], [0, 0], [pad_l, pad_r]]\n    x = F.pad(x, commons.convert_pad_shape(padding))\n    return x\n"
        },
        {
          "name": "commons.py",
          "type": "blob",
          "size": 5.6220703125,
          "content": "import math\nimport numpy as np\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\ndef slice_pitch_segments(x, ids_str, segment_size=4):\n  ret = torch.zeros_like(x[:, :segment_size])\n  for i in range(x.size(0)):\n    idx_str = ids_str[i]\n    idx_end = idx_str + segment_size\n    ret[i] = x[i, idx_str:idx_end]\n  return ret\n\ndef rand_slice_segments_with_pitch(x, pitch, x_lengths=None, segment_size=4):\n  b, d, t = x.size()\n  if x_lengths is None:\n    x_lengths = t\n  ids_str_max = x_lengths - segment_size + 1\n  ids_str = (torch.rand([b]).to(device=x.device) * ids_str_max).to(dtype=torch.long)\n  ret = slice_segments(x, ids_str, segment_size)\n  ret_pitch = slice_pitch_segments(pitch, ids_str, segment_size)\n  return ret, ret_pitch, ids_str\n\ndef init_weights(m, mean=0.0, std=0.01):\n  classname = m.__class__.__name__\n  if classname.find(\"Conv\") != -1:\n    m.weight.data.normal_(mean, std)\n\n\ndef get_padding(kernel_size, dilation=1):\n  return int((kernel_size*dilation - dilation)/2)\n\n\ndef convert_pad_shape(pad_shape):\n  l = pad_shape[::-1]\n  pad_shape = [item for sublist in l for item in sublist]\n  return pad_shape\n\n\ndef intersperse(lst, item):\n  result = [item] * (len(lst) * 2 + 1)\n  result[1::2] = lst\n  return result\n\n\ndef kl_divergence(m_p, logs_p, m_q, logs_q):\n  \"\"\"KL(P||Q)\"\"\"\n  kl = (logs_q - logs_p) - 0.5\n  kl += 0.5 * (torch.exp(2. * logs_p) + ((m_p - m_q)**2)) * torch.exp(-2. * logs_q)\n  return kl\n\n\ndef rand_gumbel(shape):\n  \"\"\"Sample from the Gumbel distribution, protect from overflows.\"\"\"\n  uniform_samples = torch.rand(shape) * 0.99998 + 0.00001\n  return -torch.log(-torch.log(uniform_samples))\n\n\ndef rand_gumbel_like(x):\n  g = rand_gumbel(x.size()).to(dtype=x.dtype, device=x.device)\n  return g\n\n\ndef slice_segments(x, ids_str, segment_size=4):\n  ret = torch.zeros_like(x[:, :, :segment_size])\n  for i in range(x.size(0)):\n    idx_str = ids_str[i]\n    idx_end = idx_str + segment_size\n    ret[i] = x[i, :, idx_str:idx_end]\n  return ret\n\n\ndef rand_slice_segments(x, x_lengths=None, segment_size=4):\n  b, d, t = x.size()\n  if x_lengths is None:\n    x_lengths = t\n  ids_str_max = x_lengths - segment_size + 1\n  ids_str = (torch.rand([b]).to(device=x.device) * ids_str_max).to(dtype=torch.long)\n  ret = slice_segments(x, ids_str, segment_size)\n  return ret, ids_str\n\n\ndef rand_spec_segments(x, x_lengths=None, segment_size=4):\n  b, d, t = x.size()\n  if x_lengths is None:\n    x_lengths = t\n  ids_str_max = x_lengths - segment_size\n  ids_str = (torch.rand([b]).to(device=x.device) * ids_str_max).to(dtype=torch.long)\n  ret = slice_segments(x, ids_str, segment_size)\n  return ret, ids_str\n\n\ndef get_timing_signal_1d(\n    length, channels, min_timescale=1.0, max_timescale=1.0e4):\n  position = torch.arange(length, dtype=torch.float)\n  num_timescales = channels // 2\n  log_timescale_increment = (\n      math.log(float(max_timescale) / float(min_timescale)) /\n      (num_timescales - 1))\n  inv_timescales = min_timescale * torch.exp(\n      torch.arange(num_timescales, dtype=torch.float) * -log_timescale_increment)\n  scaled_time = position.unsqueeze(0) * inv_timescales.unsqueeze(1)\n  signal = torch.cat([torch.sin(scaled_time), torch.cos(scaled_time)], 0)\n  signal = F.pad(signal, [0, 0, 0, channels % 2])\n  signal = signal.view(1, channels, length)\n  return signal\n\n\ndef add_timing_signal_1d(x, min_timescale=1.0, max_timescale=1.0e4):\n  b, channels, length = x.size()\n  signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale)\n  return x + signal.to(dtype=x.dtype, device=x.device)\n\n\ndef cat_timing_signal_1d(x, min_timescale=1.0, max_timescale=1.0e4, axis=1):\n  b, channels, length = x.size()\n  signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale)\n  return torch.cat([x, signal.to(dtype=x.dtype, device=x.device)], axis)\n\n\ndef subsequent_mask(length):\n  mask = torch.tril(torch.ones(length, length)).unsqueeze(0).unsqueeze(0)\n  return mask\n\n\n@torch.jit.script\ndef fused_add_tanh_sigmoid_multiply(input_a, input_b, n_channels):\n  n_channels_int = n_channels[0]\n  in_act = input_a + input_b\n  t_act = torch.tanh(in_act[:, :n_channels_int, :])\n  s_act = torch.sigmoid(in_act[:, n_channels_int:, :])\n  acts = t_act * s_act\n  return acts\n\n\ndef convert_pad_shape(pad_shape):\n  l = pad_shape[::-1]\n  pad_shape = [item for sublist in l for item in sublist]\n  return pad_shape\n\n\ndef shift_1d(x):\n  x = F.pad(x, convert_pad_shape([[0, 0], [0, 0], [1, 0]]))[:, :, :-1]\n  return x\n\n\ndef sequence_mask(length, max_length=None):\n  if max_length is None:\n    max_length = length.max()\n  x = torch.arange(max_length, dtype=length.dtype, device=length.device)\n  return x.unsqueeze(0) < length.unsqueeze(1)\n\n\ndef generate_path(duration, mask):\n  \"\"\"\n  duration: [b, 1, t_x]\n  mask: [b, 1, t_y, t_x]\n  \"\"\"\n  device = duration.device\n  \n  b, _, t_y, t_x = mask.shape\n  cum_duration = torch.cumsum(duration, -1)\n  \n  cum_duration_flat = cum_duration.view(b * t_x)\n  path = sequence_mask(cum_duration_flat, t_y).to(mask.dtype)\n  path = path.view(b, t_x, t_y)\n  path = path - F.pad(path, convert_pad_shape([[0, 0], [1, 0], [0, 0]]))[:, :-1]\n  path = path.unsqueeze(1).transpose(2,3) * mask\n  return path\n\n\ndef clip_grad_value_(parameters, clip_value, norm_type=2):\n  if isinstance(parameters, torch.Tensor):\n    parameters = [parameters]\n  parameters = list(filter(lambda p: p.grad is not None, parameters))\n  norm_type = float(norm_type)\n  if clip_value is not None:\n    clip_value = float(clip_value)\n\n  total_norm = 0\n  for p in parameters:\n    param_norm = p.grad.data.norm(norm_type)\n    total_norm += param_norm.item() ** norm_type\n    if clip_value is not None:\n      p.grad.data.clamp_(min=-clip_value, max=clip_value)\n  total_norm = total_norm ** (1. / norm_type)\n  return total_norm\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_utils.py",
          "type": "blob",
          "size": 5.88671875,
          "content": "import time\nimport os\nimport random\nimport numpy as np\nimport torch\nimport torch.utils.data\n\nimport commons\nfrom mel_processing import spectrogram_torch, spec_to_mel_torch\nfrom utils import load_wav_to_torch, load_filepaths_and_text, transform\n\n# import h5py\n\n\n\"\"\"Multi speaker version\"\"\"\n\n\nclass TextAudioSpeakerLoader(torch.utils.data.Dataset):\n    \"\"\"\n        1) loads audio, speaker_id, text pairs\n        2) normalizes text and converts them to sequences of integers\n        3) computes spectrograms from audio files.\n    \"\"\"\n\n    def __init__(self, audiopaths, hparams):\n        self.audiopaths = load_filepaths_and_text(audiopaths)\n        self.max_wav_value = hparams.data.max_wav_value\n        self.sampling_rate = hparams.data.sampling_rate\n        self.filter_length = hparams.data.filter_length\n        self.hop_length = hparams.data.hop_length\n        self.win_length = hparams.data.win_length\n        self.sampling_rate = hparams.data.sampling_rate\n        self.use_sr = hparams.train.use_sr\n        self.spec_len = hparams.train.max_speclen\n        self.spk_map = hparams.spk\n\n        random.seed(1234)\n        random.shuffle(self.audiopaths)\n\n    def get_audio(self, filename):\n        filename = filename.replace(\"\\\\\", \"/\")\n        audio, sampling_rate = load_wav_to_torch(filename)\n        if sampling_rate != self.sampling_rate:\n            raise ValueError(\"{} SR doesn't match target {} SR\".format(\n                sampling_rate, self.sampling_rate))\n        audio_norm = audio / self.max_wav_value\n        audio_norm = audio_norm.unsqueeze(0)\n        spec_filename = filename.replace(\".wav\", \".spec.pt\")\n        if os.path.exists(spec_filename):\n            spec = torch.load(spec_filename)\n        else:\n            spec = spectrogram_torch(audio_norm, self.filter_length,\n                                     self.sampling_rate, self.hop_length, self.win_length,\n                                     center=False)\n            spec = torch.squeeze(spec, 0)\n            torch.save(spec, spec_filename)\n\n        spk = filename.split(\"/\")[-2]\n        spk = torch.LongTensor([self.spk_map[spk]])\n\n        c = torch.load(filename + \".soft.pt\").squeeze(0)\n        c = torch.repeat_interleave(c, repeats=2, dim=1)\n\n        f0 = np.load(filename + \".f0.npy\")\n        f0 = torch.FloatTensor(f0)\n        lmin = min(c.size(-1), spec.size(-1), f0.shape[0])\n        assert abs(c.size(-1) - spec.size(-1)) < 4, (c.size(-1), spec.size(-1), f0.shape, filename)\n        assert abs(lmin - spec.size(-1)) < 4, (c.size(-1), spec.size(-1), f0.shape)\n        assert abs(lmin - c.size(-1)) < 4, (c.size(-1), spec.size(-1), f0.shape)\n        spec, c, f0 = spec[:, :lmin], c[:, :lmin], f0[:lmin]\n        audio_norm = audio_norm[:, :lmin * self.hop_length]\n        _spec, _c, _audio_norm, _f0 = spec, c, audio_norm, f0\n        while spec.size(-1) < self.spec_len:\n            spec = torch.cat((spec, _spec), -1)\n            c = torch.cat((c, _c), -1)\n            f0 = torch.cat((f0, _f0), -1)\n            audio_norm = torch.cat((audio_norm, _audio_norm), -1)\n        start = random.randint(0, spec.size(-1) - self.spec_len)\n        end = start + self.spec_len\n        spec = spec[:, start:end]\n        c = c[:, start:end]\n        f0 = f0[start:end]\n        audio_norm = audio_norm[:, start * self.hop_length:end * self.hop_length]\n\n        return c, f0, spec, audio_norm, spk\n\n    def __getitem__(self, index):\n        return self.get_audio(self.audiopaths[index][0])\n\n    def __len__(self):\n        return len(self.audiopaths)\n\n\nclass EvalDataLoader(torch.utils.data.Dataset):\n    \"\"\"\n        1) loads audio, speaker_id, text pairs\n        2) normalizes text and converts them to sequences of integers\n        3) computes spectrograms from audio files.\n    \"\"\"\n\n    def __init__(self, audiopaths, hparams):\n        self.audiopaths = load_filepaths_and_text(audiopaths)\n        self.max_wav_value = hparams.data.max_wav_value\n        self.sampling_rate = hparams.data.sampling_rate\n        self.filter_length = hparams.data.filter_length\n        self.hop_length = hparams.data.hop_length\n        self.win_length = hparams.data.win_length\n        self.sampling_rate = hparams.data.sampling_rate\n        self.use_sr = hparams.train.use_sr\n        self.audiopaths = self.audiopaths[:5]\n        self.spk_map = hparams.spk\n\n\n    def get_audio(self, filename):\n        filename = filename.replace(\"\\\\\", \"/\")\n        audio, sampling_rate = load_wav_to_torch(filename)\n        if sampling_rate != self.sampling_rate:\n            raise ValueError(\"{} SR doesn't match target {} SR\".format(\n                sampling_rate, self.sampling_rate))\n        audio_norm = audio / self.max_wav_value\n        audio_norm = audio_norm.unsqueeze(0)\n        spec_filename = filename.replace(\".wav\", \".spec.pt\")\n        if os.path.exists(spec_filename):\n            spec = torch.load(spec_filename)\n        else:\n            spec = spectrogram_torch(audio_norm, self.filter_length,\n                                     self.sampling_rate, self.hop_length, self.win_length,\n                                     center=False)\n            spec = torch.squeeze(spec, 0)\n            torch.save(spec, spec_filename)\n\n        spk = filename.split(\"/\")[-2]\n        spk = torch.LongTensor([self.spk_map[spk]])\n\n        c = torch.load(filename + \".soft.pt\").squeeze(0)\n\n        c = torch.repeat_interleave(c, repeats=2, dim=1)\n\n        f0 = np.load(filename + \".f0.npy\")\n        f0 = torch.FloatTensor(f0)\n        lmin = min(c.size(-1), spec.size(-1), f0.shape[0])\n        assert abs(c.size(-1) - spec.size(-1)) < 4, (c.size(-1), spec.size(-1), f0.shape)\n        assert abs(f0.shape[0] - spec.shape[-1]) < 4, (c.size(-1), spec.size(-1), f0.shape)\n        spec, c, f0 = spec[:, :lmin], c[:, :lmin], f0[:lmin]\n        audio_norm = audio_norm[:, :lmin * self.hop_length]\n\n        return c, f0, spec, audio_norm, spk\n\n    def __getitem__(self, index):\n        return self.get_audio(self.audiopaths[index][0])\n\n    def __len__(self):\n        return len(self.audiopaths)\n\n"
        },
        {
          "name": "dataset_raw",
          "type": "tree",
          "content": null
        },
        {
          "name": "filelists",
          "type": "tree",
          "content": null
        },
        {
          "name": "flask_api.py",
          "type": "blob",
          "size": 2.0966796875,
          "content": "import io\nimport logging\n\nimport soundfile\nimport torch\nimport torchaudio\nfrom flask import Flask, request, send_file\nfrom flask_cors import CORS\n\nfrom inference.infer_tool import Svc, RealTimeVC\n\napp = Flask(__name__)\n\nCORS(app)\n\nlogging.getLogger('numba').setLevel(logging.WARNING)\n\n\n@app.route(\"/voiceChangeModel\", methods=[\"POST\"])\ndef voice_change_model():\n    request_form = request.form\n    wave_file = request.files.get(\"sample\", None)\n    # 变调信息\n    f_pitch_change = float(request_form.get(\"fPitchChange\", 0))\n    # DAW所需的采样率\n    daw_sample = int(float(request_form.get(\"sampleRate\", 0)))\n    speaker_id = int(float(request_form.get(\"sSpeakId\", 0)))\n    # http获得wav文件并转换\n    input_wav_path = io.BytesIO(wave_file.read())\n\n    # 模型推理\n    if raw_infer:\n        out_audio, out_sr = svc_model.infer(speaker_id, f_pitch_change, input_wav_path)\n        tar_audio = torchaudio.functional.resample(out_audio, svc_model.target_sample, daw_sample)\n    else:\n        out_audio = svc.process(svc_model, speaker_id, f_pitch_change, input_wav_path)\n        tar_audio = torchaudio.functional.resample(torch.from_numpy(out_audio), svc_model.target_sample, daw_sample)\n    # 返回音频\n    out_wav_path = io.BytesIO()\n    soundfile.write(out_wav_path, tar_audio.cpu().numpy(), daw_sample, format=\"wav\")\n    out_wav_path.seek(0)\n    return send_file(out_wav_path, download_name=\"temp.wav\", as_attachment=True)\n\n\nif __name__ == '__main__':\n    # 启用则为直接切片合成，False为交叉淡化方式\n    # vst插件调整0.3-0.5s切片时间可以降低延迟，直接切片方法会有连接处爆音、交叉淡化会有轻微重叠声音\n    # 自行选择能接受的方法，或将vst最大切片时间调整为1s，此处设为Ture，延迟大音质稳定一些\n    raw_infer = True\n    # 每个模型和config是唯一对应的\n    model_name = \"logs/32k/G_174000-Copy1.pth\"\n    config_name = \"configs/config.json\"\n    svc_model = Svc(model_name, config_name)\n    svc = RealTimeVC()\n    # 此处与vst插件对应，不建议更改\n    app.run(port=6842, host=\"0.0.0.0\", debug=False, threaded=False)\n"
        },
        {
          "name": "hubert",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference_main.py",
          "type": "blob",
          "size": 2.037109375,
          "content": "import io\nimport logging\nimport time\nfrom pathlib import Path\n\nimport librosa\nimport numpy as np\nimport soundfile\n\nfrom inference import infer_tool\nfrom inference import slicer\nfrom inference.infer_tool import Svc\n\nlogging.getLogger('numba').setLevel(logging.WARNING)\nchunks_dict = infer_tool.read_temp(\"inference/chunks_temp.json\")\n\nmodel_path = \"logs/32k/G_174000-Copy1.pth\"\nconfig_path = \"configs/config.json\"\nsvc_model = Svc(model_path, config_path)\ninfer_tool.mkdir([\"raw\", \"results\"])\n\n# 支持多个wav文件，放在raw文件夹下\nclean_names = [\"君の知らない物語-src\"]\ntrans = [-5]  # 音高调整，支持正负（半音）\nspk_list = ['yunhao']  # 每次同时合成多语者音色\nslice_db = -40  # 默认-40，嘈杂的音频可以-30，干声保留呼吸可以-50\nwav_format = 'flac'  # 音频输出格式\n\ninfer_tool.fill_a_to_b(trans, clean_names)\nfor clean_name, tran in zip(clean_names, trans):\n    raw_audio_path = f\"raw/{clean_name}\"\n    if \".\" not in raw_audio_path:\n        raw_audio_path += \".wav\"\n    infer_tool.format_wav(raw_audio_path)\n    wav_path = Path(raw_audio_path).with_suffix('.wav')\n    chunks = slicer.cut(wav_path, db_thresh=slice_db)\n    audio_data, audio_sr = slicer.chunks2audio(wav_path, chunks)\n\n    for spk in spk_list:\n        audio = []\n        for (slice_tag, data) in audio_data:\n            print(f'#=====segment start, {round(len(data) / audio_sr, 3)}s======')\n            length = int(np.ceil(len(data) / audio_sr * svc_model.target_sample))\n            raw_path = io.BytesIO()\n            soundfile.write(raw_path, data, audio_sr, format=\"wav\")\n            raw_path.seek(0)\n            if slice_tag:\n                print('jump empty segment')\n                _audio = np.zeros(length)\n            else:\n                out_audio, out_sr = svc_model.infer(spk, tran, raw_path)\n                _audio = out_audio.cpu().numpy()\n            audio.extend(list(_audio))\n\n        res_path = f'./results/{clean_name}_{tran}key_{spk}.{wav_format}'\n        soundfile.write(res_path, audio, svc_model.target_sample, format=wav_format)\n"
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "losses.py",
          "type": "blob",
          "size": 1.298828125,
          "content": "import torch \nfrom torch.nn import functional as F\n\nimport commons\n\n\ndef feature_loss(fmap_r, fmap_g):\n  loss = 0\n  for dr, dg in zip(fmap_r, fmap_g):\n    for rl, gl in zip(dr, dg):\n      rl = rl.float().detach()\n      gl = gl.float()\n      loss += torch.mean(torch.abs(rl - gl))\n\n  return loss * 2 \n\n\ndef discriminator_loss(disc_real_outputs, disc_generated_outputs):\n  loss = 0\n  r_losses = []\n  g_losses = []\n  for dr, dg in zip(disc_real_outputs, disc_generated_outputs):\n    dr = dr.float()\n    dg = dg.float()\n    r_loss = torch.mean((1-dr)**2)\n    g_loss = torch.mean(dg**2)\n    loss += (r_loss + g_loss)\n    r_losses.append(r_loss.item())\n    g_losses.append(g_loss.item())\n\n  return loss, r_losses, g_losses\n\n\ndef generator_loss(disc_outputs):\n  loss = 0\n  gen_losses = []\n  for dg in disc_outputs:\n    dg = dg.float()\n    l = torch.mean((1-dg)**2)\n    gen_losses.append(l)\n    loss += l\n\n  return loss, gen_losses\n\n\ndef kl_loss(z_p, logs_q, m_p, logs_p, z_mask):\n  \"\"\"\n  z_p, logs_q: [b, h, t_t]\n  m_p, logs_p: [b, h, t_t]\n  \"\"\"\n  z_p = z_p.float()\n  logs_q = logs_q.float()\n  m_p = m_p.float()\n  logs_p = logs_p.float()\n  z_mask = z_mask.float()\n  #print(logs_p)\n  kl = logs_p - logs_q - 0.5\n  kl += 0.5 * ((z_p - m_p)**2) * torch.exp(-2. * logs_p)\n  kl = torch.sum(kl * z_mask)\n  l = kl / torch.sum(z_mask)\n  return l\n"
        },
        {
          "name": "mel_processing.py",
          "type": "blob",
          "size": 3.8291015625,
          "content": "import math\nimport os\nimport random\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nimport torch.utils.data\nimport numpy as np\nimport librosa\nimport librosa.util as librosa_util\nfrom librosa.util import normalize, pad_center, tiny\nfrom scipy.signal import get_window\nfrom scipy.io.wavfile import read\nfrom librosa.filters import mel as librosa_mel_fn\n\nMAX_WAV_VALUE = 32768.0\n\n\ndef dynamic_range_compression_torch(x, C=1, clip_val=1e-5):\n    \"\"\"\n    PARAMS\n    ------\n    C: compression factor\n    \"\"\"\n    return torch.log(torch.clamp(x, min=clip_val) * C)\n\n\ndef dynamic_range_decompression_torch(x, C=1):\n    \"\"\"\n    PARAMS\n    ------\n    C: compression factor used to compress\n    \"\"\"\n    return torch.exp(x) / C\n\n\ndef spectral_normalize_torch(magnitudes):\n    output = dynamic_range_compression_torch(magnitudes)\n    return output\n\n\ndef spectral_de_normalize_torch(magnitudes):\n    output = dynamic_range_decompression_torch(magnitudes)\n    return output\n\n\nmel_basis = {}\nhann_window = {}\n\n\ndef spectrogram_torch(y, n_fft, sampling_rate, hop_size, win_size, center=False):\n    if torch.min(y) < -1.:\n        print('min value is ', torch.min(y))\n    if torch.max(y) > 1.:\n        print('max value is ', torch.max(y))\n\n    global hann_window\n    dtype_device = str(y.dtype) + '_' + str(y.device)\n    wnsize_dtype_device = str(win_size) + '_' + dtype_device\n    if wnsize_dtype_device not in hann_window:\n        hann_window[wnsize_dtype_device] = torch.hann_window(win_size).to(dtype=y.dtype, device=y.device)\n\n    y = torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft-hop_size)/2), int((n_fft-hop_size)/2)), mode='reflect')\n    y = y.squeeze(1)\n\n    spec = torch.stft(y, n_fft, hop_length=hop_size, win_length=win_size, window=hann_window[wnsize_dtype_device],\n                      center=center, pad_mode='reflect', normalized=False, onesided=True, return_complex=False)\n\n    spec = torch.sqrt(spec.pow(2).sum(-1) + 1e-6)\n    return spec\n\n\ndef spec_to_mel_torch(spec, n_fft, num_mels, sampling_rate, fmin, fmax):\n    global mel_basis\n    dtype_device = str(spec.dtype) + '_' + str(spec.device)\n    fmax_dtype_device = str(fmax) + '_' + dtype_device\n    if fmax_dtype_device not in mel_basis:\n        mel = librosa_mel_fn(sr=sampling_rate, n_fft=n_fft, n_mels=num_mels, fmin=fmin, fmax=fmax)\n        mel_basis[fmax_dtype_device] = torch.from_numpy(mel).to(dtype=spec.dtype, device=spec.device)\n    spec = torch.matmul(mel_basis[fmax_dtype_device], spec)\n    spec = spectral_normalize_torch(spec)\n    return spec\n\n\ndef mel_spectrogram_torch(y, n_fft, num_mels, sampling_rate, hop_size, win_size, fmin, fmax, center=False):\n    if torch.min(y) < -1.:\n        print('min value is ', torch.min(y))\n    if torch.max(y) > 1.:\n        print('max value is ', torch.max(y))\n\n    global mel_basis, hann_window\n    dtype_device = str(y.dtype) + '_' + str(y.device)\n    fmax_dtype_device = str(fmax) + '_' + dtype_device\n    wnsize_dtype_device = str(win_size) + '_' + dtype_device\n    if fmax_dtype_device not in mel_basis:\n        mel = librosa_mel_fn(sr=sampling_rate, n_fft=n_fft, n_mels=num_mels, fmin=fmin, fmax=fmax)\n        mel_basis[fmax_dtype_device] = torch.from_numpy(mel).to(dtype=y.dtype, device=y.device)\n    if wnsize_dtype_device not in hann_window:\n        hann_window[wnsize_dtype_device] = torch.hann_window(win_size).to(dtype=y.dtype, device=y.device)\n\n    y = torch.nn.functional.pad(y.unsqueeze(1), (int((n_fft-hop_size)/2), int((n_fft-hop_size)/2)), mode='reflect')\n    y = y.squeeze(1)\n\n    spec = torch.stft(y, n_fft, hop_length=hop_size, win_length=win_size, window=hann_window[wnsize_dtype_device],\n                      center=center, pad_mode='reflect', normalized=False, onesided=True, return_complex=False)\n\n    spec = torch.sqrt(spec.pow(2).sum(-1) + 1e-6)\n\n    spec = torch.matmul(mel_basis[fmax_dtype_device], spec)\n    spec = spectral_normalize_torch(spec)\n\n    return spec\n"
        },
        {
          "name": "model_onnx.py",
          "type": "blob",
          "size": 10.9970703125,
          "content": "import copy\nimport math\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport attentions\nimport commons\nimport modules\n\nfrom torch.nn import Conv1d, ConvTranspose1d, AvgPool1d, Conv2d\nfrom torch.nn.utils import weight_norm, remove_weight_norm, spectral_norm\nfrom commons import init_weights, get_padding\nfrom vdecoder.hifigan.models import Generator\nfrom utils import f0_to_coarse\n\nclass ResidualCouplingBlock(nn.Module):\n  def __init__(self,\n      channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      n_flows=4,\n      gin_channels=0):\n    super().__init__()\n    self.channels = channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.n_flows = n_flows\n    self.gin_channels = gin_channels\n\n    self.flows = nn.ModuleList()\n    for i in range(n_flows):\n      self.flows.append(modules.ResidualCouplingLayer(channels, hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels, mean_only=True))\n      self.flows.append(modules.Flip())\n\n  def forward(self, x, x_mask, g=None, reverse=False):\n    if not reverse:\n      for flow in self.flows:\n        x, _ = flow(x, x_mask, g=g, reverse=reverse)\n    else:\n      for flow in reversed(self.flows):\n        x = flow(x, x_mask, g=g, reverse=reverse)\n    return x\n\n\nclass Encoder(nn.Module):\n  def __init__(self,\n      in_channels,\n      out_channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      gin_channels=0):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n\n    self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n    self.enc = modules.WN(hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels)\n    self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n\n  def forward(self, x, x_lengths, g=None):\n    # print(x.shape,x_lengths.shape)\n    x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n    x = self.pre(x) * x_mask\n    x = self.enc(x, x_mask, g=g)\n    stats = self.proj(x) * x_mask\n    m, logs = torch.split(stats, self.out_channels, dim=1)\n    z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n    return z, m, logs, x_mask\n\n\nclass TextEncoder(nn.Module):\n  def __init__(self,\n      in_channels,\n      out_channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      gin_channels=0,\n      filter_channels=None,\n      n_heads=None,\n      p_dropout=None):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n    self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n    self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n    self.f0_emb = nn.Embedding(256, hidden_channels)\n\n    self.enc_ =  attentions.Encoder(\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size,\n        p_dropout)\n\n  def forward(self, x, x_lengths, f0=None):\n    x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n    x = self.pre(x) * x_mask\n    x = x + self.f0_emb(f0.long()).transpose(1,2)\n    x = self.enc_(x * x_mask, x_mask)\n    stats = self.proj(x) * x_mask\n    m, logs = torch.split(stats, self.out_channels, dim=1)\n    z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n\n    return z, m, logs, x_mask\n\n\n\nclass DiscriminatorP(torch.nn.Module):\n    def __init__(self, period, kernel_size=5, stride=3, use_spectral_norm=False):\n        super(DiscriminatorP, self).__init__()\n        self.period = period\n        self.use_spectral_norm = use_spectral_norm\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv2d(1, 32, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(32, 128, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(128, 512, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(512, 1024, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(1024, 1024, (kernel_size, 1), 1, padding=(get_padding(kernel_size, 1), 0))),\n        ])\n        self.conv_post = norm_f(Conv2d(1024, 1, (3, 1), 1, padding=(1, 0)))\n\n    def forward(self, x):\n        fmap = []\n\n        # 1d to 2d\n        b, c, t = x.shape\n        if t % self.period != 0: # pad first\n            n_pad = self.period - (t % self.period)\n            x = F.pad(x, (0, n_pad), \"reflect\")\n            t = t + n_pad\n        x = x.view(b, c, t // self.period, self.period)\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass DiscriminatorS(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(DiscriminatorS, self).__init__()\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv1d(1, 16, 15, 1, padding=7)),\n            norm_f(Conv1d(16, 64, 41, 4, groups=4, padding=20)),\n            norm_f(Conv1d(64, 256, 41, 4, groups=16, padding=20)),\n            norm_f(Conv1d(256, 1024, 41, 4, groups=64, padding=20)),\n            norm_f(Conv1d(1024, 1024, 41, 4, groups=256, padding=20)),\n            norm_f(Conv1d(1024, 1024, 5, 1, padding=2)),\n        ])\n        self.conv_post = norm_f(Conv1d(1024, 1, 3, 1, padding=1))\n\n    def forward(self, x):\n        fmap = []\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass MultiPeriodDiscriminator(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(MultiPeriodDiscriminator, self).__init__()\n        periods = [2,3,5,7,11]\n\n        discs = [DiscriminatorS(use_spectral_norm=use_spectral_norm)]\n        discs = discs + [DiscriminatorP(i, use_spectral_norm=use_spectral_norm) for i in periods]\n        self.discriminators = nn.ModuleList(discs)\n\n    def forward(self, y, y_hat):\n        y_d_rs = []\n        y_d_gs = []\n        fmap_rs = []\n        fmap_gs = []\n        for i, d in enumerate(self.discriminators):\n            y_d_r, fmap_r = d(y)\n            y_d_g, fmap_g = d(y_hat)\n            y_d_rs.append(y_d_r)\n            y_d_gs.append(y_d_g)\n            fmap_rs.append(fmap_r)\n            fmap_gs.append(fmap_g)\n\n        return y_d_rs, y_d_gs, fmap_rs, fmap_gs\n        \n        \nclass SpeakerEncoder(torch.nn.Module):\n    def __init__(self, mel_n_channels=80, model_num_layers=3, model_hidden_size=256, model_embedding_size=256):\n        super(SpeakerEncoder, self).__init__()\n        self.lstm = nn.LSTM(mel_n_channels, model_hidden_size, model_num_layers, batch_first=True)\n        self.linear = nn.Linear(model_hidden_size, model_embedding_size)\n        self.relu = nn.ReLU()\n\n    def forward(self, mels):\n        self.lstm.flatten_parameters()\n        _, (hidden, _) = self.lstm(mels)\n        embeds_raw = self.relu(self.linear(hidden[-1]))\n        return embeds_raw / torch.norm(embeds_raw, dim=1, keepdim=True)\n        \n    def compute_partial_slices(self, total_frames, partial_frames, partial_hop):\n        mel_slices = []\n        for i in range(0, total_frames-partial_frames, partial_hop):\n            mel_range = torch.arange(i, i+partial_frames)\n            mel_slices.append(mel_range)\n            \n        return mel_slices\n    \n    def embed_utterance(self, mel, partial_frames=128, partial_hop=64):\n        mel_len = mel.size(1)\n        last_mel = mel[:,-partial_frames:]\n        \n        if mel_len > partial_frames:\n            mel_slices = self.compute_partial_slices(mel_len, partial_frames, partial_hop)\n            mels = list(mel[:,s] for s in mel_slices)\n            mels.append(last_mel)\n            mels = torch.stack(tuple(mels), 0).squeeze(1)\n        \n            with torch.no_grad():\n                partial_embeds = self(mels)\n            embed = torch.mean(partial_embeds, axis=0).unsqueeze(0)\n            #embed = embed / torch.linalg.norm(embed, 2)\n        else:\n            with torch.no_grad():\n                embed = self(last_mel)\n        \n        return embed\n\n\nclass SynthesizerTrn(nn.Module):\n  \"\"\"\n  Synthesizer for Training\n  \"\"\"\n\n  def __init__(self, \n    spec_channels,\n    segment_size,\n    inter_channels,\n    hidden_channels,\n    filter_channels,\n    n_heads,\n    n_layers,\n    kernel_size,\n    p_dropout,\n    resblock, \n    resblock_kernel_sizes, \n    resblock_dilation_sizes, \n    upsample_rates, \n    upsample_initial_channel, \n    upsample_kernel_sizes,\n    gin_channels,\n    ssl_dim,\n    n_speakers,\n    **kwargs):\n\n    super().__init__()\n    self.spec_channels = spec_channels\n    self.inter_channels = inter_channels\n    self.hidden_channels = hidden_channels\n    self.filter_channels = filter_channels\n    self.n_heads = n_heads\n    self.n_layers = n_layers\n    self.kernel_size = kernel_size\n    self.p_dropout = p_dropout\n    self.resblock = resblock\n    self.resblock_kernel_sizes = resblock_kernel_sizes\n    self.resblock_dilation_sizes = resblock_dilation_sizes\n    self.upsample_rates = upsample_rates\n    self.upsample_initial_channel = upsample_initial_channel\n    self.upsample_kernel_sizes = upsample_kernel_sizes\n    self.segment_size = segment_size\n    self.gin_channels = gin_channels\n    self.ssl_dim = ssl_dim\n    self.emb_g = nn.Embedding(n_speakers, gin_channels)\n\n    self.enc_p_ = TextEncoder(ssl_dim, inter_channels, hidden_channels, 5, 1, 16,0, filter_channels, n_heads, p_dropout)\n    hps = {\n        \"sampling_rate\": 32000,\n        \"inter_channels\": 192,\n        \"resblock\": \"1\",\n        \"resblock_kernel_sizes\": [3, 7, 11],\n        \"resblock_dilation_sizes\": [[1, 3, 5], [1, 3, 5], [1, 3, 5]],\n        \"upsample_rates\": [10, 8, 2, 2],\n        \"upsample_initial_channel\": 512,\n        \"upsample_kernel_sizes\": [16, 16, 4, 4],\n        \"gin_channels\": 256,\n    }\n    self.dec = Generator(h=hps)\n    self.enc_q = Encoder(spec_channels, inter_channels, hidden_channels, 5, 1, 16, gin_channels=gin_channels)\n    self.flow = ResidualCouplingBlock(inter_channels, hidden_channels, 5, 1, 4, gin_channels=gin_channels)\n\n  def forward(self, c, c_lengths, f0, g=None):\n    g = self.emb_g(g.unsqueeze(0)).transpose(1,2)\n    z_p, m_p, logs_p, c_mask = self.enc_p_(c.transpose(1,2), c_lengths, f0=f0_to_coarse(f0))\n    z = self.flow(z_p, c_mask, g=g, reverse=True)\n    o = self.dec(z * c_mask, g=g, f0=f0.float())\n    return o\n    \n"
        },
        {
          "name": "model_onnx_48k.py",
          "type": "blob",
          "size": 10.9970703125,
          "content": "import copy\nimport math\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport attentions\nimport commons\nimport modules\n\nfrom torch.nn import Conv1d, ConvTranspose1d, AvgPool1d, Conv2d\nfrom torch.nn.utils import weight_norm, remove_weight_norm, spectral_norm\nfrom commons import init_weights, get_padding\nfrom vdecoder.hifigan.models import Generator\nfrom utils import f0_to_coarse\n\nclass ResidualCouplingBlock(nn.Module):\n  def __init__(self,\n      channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      n_flows=4,\n      gin_channels=0):\n    super().__init__()\n    self.channels = channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.n_flows = n_flows\n    self.gin_channels = gin_channels\n\n    self.flows = nn.ModuleList()\n    for i in range(n_flows):\n      self.flows.append(modules.ResidualCouplingLayer(channels, hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels, mean_only=True))\n      self.flows.append(modules.Flip())\n\n  def forward(self, x, x_mask, g=None, reverse=False):\n    if not reverse:\n      for flow in self.flows:\n        x, _ = flow(x, x_mask, g=g, reverse=reverse)\n    else:\n      for flow in reversed(self.flows):\n        x = flow(x, x_mask, g=g, reverse=reverse)\n    return x\n\n\nclass Encoder(nn.Module):\n  def __init__(self,\n      in_channels,\n      out_channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      gin_channels=0):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n\n    self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n    self.enc = modules.WN(hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels)\n    self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n\n  def forward(self, x, x_lengths, g=None):\n    # print(x.shape,x_lengths.shape)\n    x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n    x = self.pre(x) * x_mask\n    x = self.enc(x, x_mask, g=g)\n    stats = self.proj(x) * x_mask\n    m, logs = torch.split(stats, self.out_channels, dim=1)\n    z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n    return z, m, logs, x_mask\n\n\nclass TextEncoder(nn.Module):\n  def __init__(self,\n      in_channels,\n      out_channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      gin_channels=0,\n      filter_channels=None,\n      n_heads=None,\n      p_dropout=None):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n    self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n    self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n    self.f0_emb = nn.Embedding(256, hidden_channels)\n\n    self.enc_ =  attentions.Encoder(\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size,\n        p_dropout)\n\n  def forward(self, x, x_lengths, f0=None):\n    x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n    x = self.pre(x) * x_mask\n    x = x + self.f0_emb(f0.long()).transpose(1,2)\n    x = self.enc_(x * x_mask, x_mask)\n    stats = self.proj(x) * x_mask\n    m, logs = torch.split(stats, self.out_channels, dim=1)\n    z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n\n    return z, m, logs, x_mask\n\n\n\nclass DiscriminatorP(torch.nn.Module):\n    def __init__(self, period, kernel_size=5, stride=3, use_spectral_norm=False):\n        super(DiscriminatorP, self).__init__()\n        self.period = period\n        self.use_spectral_norm = use_spectral_norm\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv2d(1, 32, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(32, 128, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(128, 512, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(512, 1024, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(1024, 1024, (kernel_size, 1), 1, padding=(get_padding(kernel_size, 1), 0))),\n        ])\n        self.conv_post = norm_f(Conv2d(1024, 1, (3, 1), 1, padding=(1, 0)))\n\n    def forward(self, x):\n        fmap = []\n\n        # 1d to 2d\n        b, c, t = x.shape\n        if t % self.period != 0: # pad first\n            n_pad = self.period - (t % self.period)\n            x = F.pad(x, (0, n_pad), \"reflect\")\n            t = t + n_pad\n        x = x.view(b, c, t // self.period, self.period)\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass DiscriminatorS(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(DiscriminatorS, self).__init__()\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv1d(1, 16, 15, 1, padding=7)),\n            norm_f(Conv1d(16, 64, 41, 4, groups=4, padding=20)),\n            norm_f(Conv1d(64, 256, 41, 4, groups=16, padding=20)),\n            norm_f(Conv1d(256, 1024, 41, 4, groups=64, padding=20)),\n            norm_f(Conv1d(1024, 1024, 41, 4, groups=256, padding=20)),\n            norm_f(Conv1d(1024, 1024, 5, 1, padding=2)),\n        ])\n        self.conv_post = norm_f(Conv1d(1024, 1, 3, 1, padding=1))\n\n    def forward(self, x):\n        fmap = []\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass MultiPeriodDiscriminator(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(MultiPeriodDiscriminator, self).__init__()\n        periods = [2,3,5,7,11]\n\n        discs = [DiscriminatorS(use_spectral_norm=use_spectral_norm)]\n        discs = discs + [DiscriminatorP(i, use_spectral_norm=use_spectral_norm) for i in periods]\n        self.discriminators = nn.ModuleList(discs)\n\n    def forward(self, y, y_hat):\n        y_d_rs = []\n        y_d_gs = []\n        fmap_rs = []\n        fmap_gs = []\n        for i, d in enumerate(self.discriminators):\n            y_d_r, fmap_r = d(y)\n            y_d_g, fmap_g = d(y_hat)\n            y_d_rs.append(y_d_r)\n            y_d_gs.append(y_d_g)\n            fmap_rs.append(fmap_r)\n            fmap_gs.append(fmap_g)\n\n        return y_d_rs, y_d_gs, fmap_rs, fmap_gs\n        \n        \nclass SpeakerEncoder(torch.nn.Module):\n    def __init__(self, mel_n_channels=80, model_num_layers=3, model_hidden_size=256, model_embedding_size=256):\n        super(SpeakerEncoder, self).__init__()\n        self.lstm = nn.LSTM(mel_n_channels, model_hidden_size, model_num_layers, batch_first=True)\n        self.linear = nn.Linear(model_hidden_size, model_embedding_size)\n        self.relu = nn.ReLU()\n\n    def forward(self, mels):\n        self.lstm.flatten_parameters()\n        _, (hidden, _) = self.lstm(mels)\n        embeds_raw = self.relu(self.linear(hidden[-1]))\n        return embeds_raw / torch.norm(embeds_raw, dim=1, keepdim=True)\n        \n    def compute_partial_slices(self, total_frames, partial_frames, partial_hop):\n        mel_slices = []\n        for i in range(0, total_frames-partial_frames, partial_hop):\n            mel_range = torch.arange(i, i+partial_frames)\n            mel_slices.append(mel_range)\n            \n        return mel_slices\n    \n    def embed_utterance(self, mel, partial_frames=128, partial_hop=64):\n        mel_len = mel.size(1)\n        last_mel = mel[:,-partial_frames:]\n        \n        if mel_len > partial_frames:\n            mel_slices = self.compute_partial_slices(mel_len, partial_frames, partial_hop)\n            mels = list(mel[:,s] for s in mel_slices)\n            mels.append(last_mel)\n            mels = torch.stack(tuple(mels), 0).squeeze(1)\n        \n            with torch.no_grad():\n                partial_embeds = self(mels)\n            embed = torch.mean(partial_embeds, axis=0).unsqueeze(0)\n            #embed = embed / torch.linalg.norm(embed, 2)\n        else:\n            with torch.no_grad():\n                embed = self(last_mel)\n        \n        return embed\n\n\nclass SynthesizerTrn(nn.Module):\n  \"\"\"\n  Synthesizer for Training\n  \"\"\"\n\n  def __init__(self, \n    spec_channels,\n    segment_size,\n    inter_channels,\n    hidden_channels,\n    filter_channels,\n    n_heads,\n    n_layers,\n    kernel_size,\n    p_dropout,\n    resblock, \n    resblock_kernel_sizes, \n    resblock_dilation_sizes, \n    upsample_rates, \n    upsample_initial_channel, \n    upsample_kernel_sizes,\n    gin_channels,\n    ssl_dim,\n    n_speakers,\n    **kwargs):\n\n    super().__init__()\n    self.spec_channels = spec_channels\n    self.inter_channels = inter_channels\n    self.hidden_channels = hidden_channels\n    self.filter_channels = filter_channels\n    self.n_heads = n_heads\n    self.n_layers = n_layers\n    self.kernel_size = kernel_size\n    self.p_dropout = p_dropout\n    self.resblock = resblock\n    self.resblock_kernel_sizes = resblock_kernel_sizes\n    self.resblock_dilation_sizes = resblock_dilation_sizes\n    self.upsample_rates = upsample_rates\n    self.upsample_initial_channel = upsample_initial_channel\n    self.upsample_kernel_sizes = upsample_kernel_sizes\n    self.segment_size = segment_size\n    self.gin_channels = gin_channels\n    self.ssl_dim = ssl_dim\n    self.emb_g = nn.Embedding(n_speakers, gin_channels)\n\n    self.enc_p_ = TextEncoder(ssl_dim, inter_channels, hidden_channels, 5, 1, 16,0, filter_channels, n_heads, p_dropout)\n    hps = {\n        \"sampling_rate\": 48000,\n        \"inter_channels\": 192,\n        \"resblock\": \"1\",\n        \"resblock_kernel_sizes\": [3, 7, 11],\n        \"resblock_dilation_sizes\": [[1, 3, 5], [1, 3, 5], [1, 3, 5]],\n        \"upsample_rates\": [10, 8, 2, 2],\n        \"upsample_initial_channel\": 512,\n        \"upsample_kernel_sizes\": [16, 16, 4, 4],\n        \"gin_channels\": 256,\n    }\n    self.dec = Generator(h=hps)\n    self.enc_q = Encoder(spec_channels, inter_channels, hidden_channels, 5, 1, 16, gin_channels=gin_channels)\n    self.flow = ResidualCouplingBlock(inter_channels, hidden_channels, 5, 1, 4, gin_channels=gin_channels)\n\n  def forward(self, c, c_lengths, f0, g=None):\n    g = self.emb_g(g.unsqueeze(0)).transpose(1,2)\n    z_p, m_p, logs_p, c_mask = self.enc_p_(c.transpose(1,2), c_lengths, f0=f0_to_coarse(f0))\n    z = self.flow(z_p, c_mask, g=g, reverse=True)\n    o = self.dec(z * c_mask, g=g, f0=f0.float())\n    return o\n    \n"
        },
        {
          "name": "models.py",
          "type": "blob",
          "size": 11.8251953125,
          "content": "import copy\nimport math\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport attentions\nimport commons\nimport modules\n\nfrom torch.nn import Conv1d, ConvTranspose1d, AvgPool1d, Conv2d\nfrom torch.nn.utils import weight_norm, remove_weight_norm, spectral_norm\nfrom commons import init_weights, get_padding\nfrom vdecoder.hifigan.models import Generator\nfrom utils import f0_to_coarse\n\nclass ResidualCouplingBlock(nn.Module):\n  def __init__(self,\n      channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      n_flows=4,\n      gin_channels=0):\n    super().__init__()\n    self.channels = channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.n_flows = n_flows\n    self.gin_channels = gin_channels\n\n    self.flows = nn.ModuleList()\n    for i in range(n_flows):\n      self.flows.append(modules.ResidualCouplingLayer(channels, hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels, mean_only=True))\n      self.flows.append(modules.Flip())\n\n  def forward(self, x, x_mask, g=None, reverse=False):\n    if not reverse:\n      for flow in self.flows:\n        x, _ = flow(x, x_mask, g=g, reverse=reverse)\n    else:\n      for flow in reversed(self.flows):\n        x = flow(x, x_mask, g=g, reverse=reverse)\n    return x\n\n\nclass Encoder(nn.Module):\n  def __init__(self,\n      in_channels,\n      out_channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      gin_channels=0):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n\n    self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n    self.enc = modules.WN(hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=gin_channels)\n    self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n\n  def forward(self, x, x_lengths, g=None):\n    # print(x.shape,x_lengths.shape)\n    x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n    x = self.pre(x) * x_mask\n    x = self.enc(x, x_mask, g=g)\n    stats = self.proj(x) * x_mask\n    m, logs = torch.split(stats, self.out_channels, dim=1)\n    z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n    return z, m, logs, x_mask\n\n\nclass TextEncoder(nn.Module):\n  def __init__(self,\n      in_channels,\n      out_channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      gin_channels=0,\n      filter_channels=None,\n      n_heads=None,\n      p_dropout=None):\n    super().__init__()\n    self.in_channels = in_channels\n    self.out_channels = out_channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n    self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n    self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n    self.f0_emb = nn.Embedding(256, hidden_channels)\n\n    self.enc_ =  attentions.Encoder(\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size,\n        p_dropout)\n\n  def forward(self, x, x_lengths, f0=None):\n    x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(x.dtype)\n    x = self.pre(x) * x_mask\n    x = x + self.f0_emb(f0).transpose(1,2)\n    x = self.enc_(x * x_mask, x_mask)\n    stats = self.proj(x) * x_mask\n    m, logs = torch.split(stats, self.out_channels, dim=1)\n    z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n\n    return z, m, logs, x_mask\n\n\n\nclass DiscriminatorP(torch.nn.Module):\n    def __init__(self, period, kernel_size=5, stride=3, use_spectral_norm=False):\n        super(DiscriminatorP, self).__init__()\n        self.period = period\n        self.use_spectral_norm = use_spectral_norm\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv2d(1, 32, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(32, 128, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(128, 512, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(512, 1024, (kernel_size, 1), (stride, 1), padding=(get_padding(kernel_size, 1), 0))),\n            norm_f(Conv2d(1024, 1024, (kernel_size, 1), 1, padding=(get_padding(kernel_size, 1), 0))),\n        ])\n        self.conv_post = norm_f(Conv2d(1024, 1, (3, 1), 1, padding=(1, 0)))\n\n    def forward(self, x):\n        fmap = []\n\n        # 1d to 2d\n        b, c, t = x.shape\n        if t % self.period != 0: # pad first\n            n_pad = self.period - (t % self.period)\n            x = F.pad(x, (0, n_pad), \"reflect\")\n            t = t + n_pad\n        x = x.view(b, c, t // self.period, self.period)\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass DiscriminatorS(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(DiscriminatorS, self).__init__()\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.convs = nn.ModuleList([\n            norm_f(Conv1d(1, 16, 15, 1, padding=7)),\n            norm_f(Conv1d(16, 64, 41, 4, groups=4, padding=20)),\n            norm_f(Conv1d(64, 256, 41, 4, groups=16, padding=20)),\n            norm_f(Conv1d(256, 1024, 41, 4, groups=64, padding=20)),\n            norm_f(Conv1d(1024, 1024, 41, 4, groups=256, padding=20)),\n            norm_f(Conv1d(1024, 1024, 5, 1, padding=2)),\n        ])\n        self.conv_post = norm_f(Conv1d(1024, 1, 3, 1, padding=1))\n\n    def forward(self, x):\n        fmap = []\n\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass MultiPeriodDiscriminator(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(MultiPeriodDiscriminator, self).__init__()\n        periods = [2,3,5,7,11]\n\n        discs = [DiscriminatorS(use_spectral_norm=use_spectral_norm)]\n        discs = discs + [DiscriminatorP(i, use_spectral_norm=use_spectral_norm) for i in periods]\n        self.discriminators = nn.ModuleList(discs)\n\n    def forward(self, y, y_hat):\n        y_d_rs = []\n        y_d_gs = []\n        fmap_rs = []\n        fmap_gs = []\n        for i, d in enumerate(self.discriminators):\n            y_d_r, fmap_r = d(y)\n            y_d_g, fmap_g = d(y_hat)\n            y_d_rs.append(y_d_r)\n            y_d_gs.append(y_d_g)\n            fmap_rs.append(fmap_r)\n            fmap_gs.append(fmap_g)\n\n        return y_d_rs, y_d_gs, fmap_rs, fmap_gs\n        \n        \nclass SpeakerEncoder(torch.nn.Module):\n    def __init__(self, mel_n_channels=80, model_num_layers=3, model_hidden_size=256, model_embedding_size=256):\n        super(SpeakerEncoder, self).__init__()\n        self.lstm = nn.LSTM(mel_n_channels, model_hidden_size, model_num_layers, batch_first=True)\n        self.linear = nn.Linear(model_hidden_size, model_embedding_size)\n        self.relu = nn.ReLU()\n\n    def forward(self, mels):\n        self.lstm.flatten_parameters()\n        _, (hidden, _) = self.lstm(mels)\n        embeds_raw = self.relu(self.linear(hidden[-1]))\n        return embeds_raw / torch.norm(embeds_raw, dim=1, keepdim=True)\n        \n    def compute_partial_slices(self, total_frames, partial_frames, partial_hop):\n        mel_slices = []\n        for i in range(0, total_frames-partial_frames, partial_hop):\n            mel_range = torch.arange(i, i+partial_frames)\n            mel_slices.append(mel_range)\n            \n        return mel_slices\n    \n    def embed_utterance(self, mel, partial_frames=128, partial_hop=64):\n        mel_len = mel.size(1)\n        last_mel = mel[:,-partial_frames:]\n        \n        if mel_len > partial_frames:\n            mel_slices = self.compute_partial_slices(mel_len, partial_frames, partial_hop)\n            mels = list(mel[:,s] for s in mel_slices)\n            mels.append(last_mel)\n            mels = torch.stack(tuple(mels), 0).squeeze(1)\n        \n            with torch.no_grad():\n                partial_embeds = self(mels)\n            embed = torch.mean(partial_embeds, axis=0).unsqueeze(0)\n            #embed = embed / torch.linalg.norm(embed, 2)\n        else:\n            with torch.no_grad():\n                embed = self(last_mel)\n        \n        return embed\n\n\nclass SynthesizerTrn(nn.Module):\n  \"\"\"\n  Synthesizer for Training\n  \"\"\"\n\n  def __init__(self, \n    spec_channels,\n    segment_size,\n    inter_channels,\n    hidden_channels,\n    filter_channels,\n    n_heads,\n    n_layers,\n    kernel_size,\n    p_dropout,\n    resblock, \n    resblock_kernel_sizes, \n    resblock_dilation_sizes, \n    upsample_rates, \n    upsample_initial_channel, \n    upsample_kernel_sizes,\n    gin_channels,\n    ssl_dim,\n    n_speakers,\n    **kwargs):\n\n    super().__init__()\n    self.spec_channels = spec_channels\n    self.inter_channels = inter_channels\n    self.hidden_channels = hidden_channels\n    self.filter_channels = filter_channels\n    self.n_heads = n_heads\n    self.n_layers = n_layers\n    self.kernel_size = kernel_size\n    self.p_dropout = p_dropout\n    self.resblock = resblock\n    self.resblock_kernel_sizes = resblock_kernel_sizes\n    self.resblock_dilation_sizes = resblock_dilation_sizes\n    self.upsample_rates = upsample_rates\n    self.upsample_initial_channel = upsample_initial_channel\n    self.upsample_kernel_sizes = upsample_kernel_sizes\n    self.segment_size = segment_size\n    self.gin_channels = gin_channels\n    self.ssl_dim = ssl_dim\n    self.emb_g = nn.Embedding(n_speakers, gin_channels)\n\n    self.enc_p_ = TextEncoder(ssl_dim, inter_channels, hidden_channels, 5, 1, 16,0, filter_channels, n_heads, p_dropout)\n    hps = {\n        \"sampling_rate\": 32000,\n        \"inter_channels\": 192,\n        \"resblock\": \"1\",\n        \"resblock_kernel_sizes\": [3, 7, 11],\n        \"resblock_dilation_sizes\": [[1, 3, 5], [1, 3, 5], [1, 3, 5]],\n        \"upsample_rates\": [10, 8, 2, 2],\n        \"upsample_initial_channel\": 512,\n        \"upsample_kernel_sizes\": [16, 16, 4, 4],\n        \"gin_channels\": 256,\n    }\n    self.dec = Generator(h=hps)\n    self.enc_q = Encoder(spec_channels, inter_channels, hidden_channels, 5, 1, 16, gin_channels=gin_channels)\n    self.flow = ResidualCouplingBlock(inter_channels, hidden_channels, 5, 1, 4, gin_channels=gin_channels)\n\n  def forward(self, c, f0, spec, g=None, mel=None, c_lengths=None, spec_lengths=None):\n    if c_lengths == None:\n      c_lengths = (torch.ones(c.size(0)) * c.size(-1)).to(c.device)\n    if spec_lengths == None:\n      spec_lengths = (torch.ones(spec.size(0)) * spec.size(-1)).to(spec.device)\n\n    g = self.emb_g(g).transpose(1,2)\n\n    z_ptemp, m_p, logs_p, _ = self.enc_p_(c, c_lengths, f0=f0_to_coarse(f0))\n    z, m_q, logs_q, spec_mask = self.enc_q(spec, spec_lengths, g=g) \n\n    z_p = self.flow(z, spec_mask, g=g)\n    z_slice, pitch_slice, ids_slice = commons.rand_slice_segments_with_pitch(z, f0, spec_lengths, self.segment_size)\n\n    # o = self.dec(z_slice, g=g)\n    o = self.dec(z_slice, g=g, f0=pitch_slice)\n\n    return o, ids_slice, spec_mask, (z, z_p, m_p, logs_p, m_q, logs_q)\n\n  def infer(self, c, f0, g=None, mel=None, c_lengths=None):\n    if c_lengths == None:\n      c_lengths = (torch.ones(c.size(0)) * c.size(-1)).to(c.device)\n    g = self.emb_g(g).transpose(1,2)\n\n    z_p, m_p, logs_p, c_mask = self.enc_p_(c, c_lengths, f0=f0_to_coarse(f0))\n    z = self.flow(z_p, c_mask, g=g, reverse=True)\n\n    o = self.dec(z * c_mask, g=g, f0=f0)\n\n    return o\n"
        },
        {
          "name": "modules.py",
          "type": "blob",
          "size": 11.1826171875,
          "content": "import copy\nimport math\nimport numpy as np\nimport scipy\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nfrom torch.nn import Conv1d, ConvTranspose1d, AvgPool1d, Conv2d\nfrom torch.nn.utils import weight_norm, remove_weight_norm\n\nimport commons\nfrom commons import init_weights, get_padding\n\n\nLRELU_SLOPE = 0.1\n\n\nclass LayerNorm(nn.Module):\n  def __init__(self, channels, eps=1e-5):\n    super().__init__()\n    self.channels = channels\n    self.eps = eps\n\n    self.gamma = nn.Parameter(torch.ones(channels))\n    self.beta = nn.Parameter(torch.zeros(channels))\n\n  def forward(self, x):\n    x = x.transpose(1, -1)\n    x = F.layer_norm(x, (self.channels,), self.gamma, self.beta, self.eps)\n    return x.transpose(1, -1)\n\n \nclass ConvReluNorm(nn.Module):\n  def __init__(self, in_channels, hidden_channels, out_channels, kernel_size, n_layers, p_dropout):\n    super().__init__()\n    self.in_channels = in_channels\n    self.hidden_channels = hidden_channels\n    self.out_channels = out_channels\n    self.kernel_size = kernel_size\n    self.n_layers = n_layers\n    self.p_dropout = p_dropout\n    assert n_layers > 1, \"Number of layers should be larger than 0.\"\n\n    self.conv_layers = nn.ModuleList()\n    self.norm_layers = nn.ModuleList()\n    self.conv_layers.append(nn.Conv1d(in_channels, hidden_channels, kernel_size, padding=kernel_size//2))\n    self.norm_layers.append(LayerNorm(hidden_channels))\n    self.relu_drop = nn.Sequential(\n        nn.ReLU(),\n        nn.Dropout(p_dropout))\n    for _ in range(n_layers-1):\n      self.conv_layers.append(nn.Conv1d(hidden_channels, hidden_channels, kernel_size, padding=kernel_size//2))\n      self.norm_layers.append(LayerNorm(hidden_channels))\n    self.proj = nn.Conv1d(hidden_channels, out_channels, 1)\n    self.proj.weight.data.zero_()\n    self.proj.bias.data.zero_()\n\n  def forward(self, x, x_mask):\n    x_org = x\n    for i in range(self.n_layers):\n      x = self.conv_layers[i](x * x_mask)\n      x = self.norm_layers[i](x)\n      x = self.relu_drop(x)\n    x = x_org + self.proj(x)\n    return x * x_mask\n\n\nclass DDSConv(nn.Module):\n  \"\"\"\n  Dialted and Depth-Separable Convolution\n  \"\"\"\n  def __init__(self, channels, kernel_size, n_layers, p_dropout=0.):\n    super().__init__()\n    self.channels = channels\n    self.kernel_size = kernel_size\n    self.n_layers = n_layers\n    self.p_dropout = p_dropout\n\n    self.drop = nn.Dropout(p_dropout)\n    self.convs_sep = nn.ModuleList()\n    self.convs_1x1 = nn.ModuleList()\n    self.norms_1 = nn.ModuleList()\n    self.norms_2 = nn.ModuleList()\n    for i in range(n_layers):\n      dilation = kernel_size ** i\n      padding = (kernel_size * dilation - dilation) // 2\n      self.convs_sep.append(nn.Conv1d(channels, channels, kernel_size, \n          groups=channels, dilation=dilation, padding=padding\n      ))\n      self.convs_1x1.append(nn.Conv1d(channels, channels, 1))\n      self.norms_1.append(LayerNorm(channels))\n      self.norms_2.append(LayerNorm(channels))\n\n  def forward(self, x, x_mask, g=None):\n    if g is not None:\n      x = x + g\n    for i in range(self.n_layers):\n      y = self.convs_sep[i](x * x_mask)\n      y = self.norms_1[i](y)\n      y = F.gelu(y)\n      y = self.convs_1x1[i](y)\n      y = self.norms_2[i](y)\n      y = F.gelu(y)\n      y = self.drop(y)\n      x = x + y\n    return x * x_mask\n\n\nclass WN(torch.nn.Module):\n  def __init__(self, hidden_channels, kernel_size, dilation_rate, n_layers, gin_channels=0, p_dropout=0):\n    super(WN, self).__init__()\n    assert(kernel_size % 2 == 1)\n    self.hidden_channels =hidden_channels\n    self.kernel_size = kernel_size,\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.gin_channels = gin_channels\n    self.p_dropout = p_dropout\n\n    self.in_layers = torch.nn.ModuleList()\n    self.res_skip_layers = torch.nn.ModuleList()\n    self.drop = nn.Dropout(p_dropout)\n\n    if gin_channels != 0:\n      cond_layer = torch.nn.Conv1d(gin_channels, 2*hidden_channels*n_layers, 1)\n      self.cond_layer = torch.nn.utils.weight_norm(cond_layer, name='weight')\n\n    for i in range(n_layers):\n      dilation = dilation_rate ** i\n      padding = int((kernel_size * dilation - dilation) / 2)\n      in_layer = torch.nn.Conv1d(hidden_channels, 2*hidden_channels, kernel_size,\n                                 dilation=dilation, padding=padding)\n      in_layer = torch.nn.utils.weight_norm(in_layer, name='weight')\n      self.in_layers.append(in_layer)\n\n      # last one is not necessary\n      if i < n_layers - 1:\n        res_skip_channels = 2 * hidden_channels\n      else:\n        res_skip_channels = hidden_channels\n\n      res_skip_layer = torch.nn.Conv1d(hidden_channels, res_skip_channels, 1)\n      res_skip_layer = torch.nn.utils.weight_norm(res_skip_layer, name='weight')\n      self.res_skip_layers.append(res_skip_layer)\n\n  def forward(self, x, x_mask, g=None, **kwargs):\n    output = torch.zeros_like(x)\n    n_channels_tensor = torch.IntTensor([self.hidden_channels])\n\n    if g is not None:\n      g = self.cond_layer(g)\n\n    for i in range(self.n_layers):\n      x_in = self.in_layers[i](x)\n      if g is not None:\n        cond_offset = i * 2 * self.hidden_channels\n        g_l = g[:,cond_offset:cond_offset+2*self.hidden_channels,:]\n      else:\n        g_l = torch.zeros_like(x_in)\n\n      acts = commons.fused_add_tanh_sigmoid_multiply(\n          x_in,\n          g_l,\n          n_channels_tensor)\n      acts = self.drop(acts)\n\n      res_skip_acts = self.res_skip_layers[i](acts)\n      if i < self.n_layers - 1:\n        res_acts = res_skip_acts[:,:self.hidden_channels,:]\n        x = (x + res_acts) * x_mask\n        output = output + res_skip_acts[:,self.hidden_channels:,:]\n      else:\n        output = output + res_skip_acts\n    return output * x_mask\n\n  def remove_weight_norm(self):\n    if self.gin_channels != 0:\n      torch.nn.utils.remove_weight_norm(self.cond_layer)\n    for l in self.in_layers:\n      torch.nn.utils.remove_weight_norm(l)\n    for l in self.res_skip_layers:\n     torch.nn.utils.remove_weight_norm(l)\n\n\nclass ResBlock1(torch.nn.Module):\n    def __init__(self, channels, kernel_size=3, dilation=(1, 3, 5)):\n        super(ResBlock1, self).__init__()\n        self.convs1 = nn.ModuleList([\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0],\n                               padding=get_padding(kernel_size, dilation[0]))),\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1],\n                               padding=get_padding(kernel_size, dilation[1]))),\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[2],\n                               padding=get_padding(kernel_size, dilation[2])))\n        ])\n        self.convs1.apply(init_weights)\n\n        self.convs2 = nn.ModuleList([\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1,\n                               padding=get_padding(kernel_size, 1))),\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1,\n                               padding=get_padding(kernel_size, 1))),\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=1,\n                               padding=get_padding(kernel_size, 1)))\n        ])\n        self.convs2.apply(init_weights)\n\n    def forward(self, x, x_mask=None):\n        for c1, c2 in zip(self.convs1, self.convs2):\n            xt = F.leaky_relu(x, LRELU_SLOPE)\n            if x_mask is not None:\n                xt = xt * x_mask\n            xt = c1(xt)\n            xt = F.leaky_relu(xt, LRELU_SLOPE)\n            if x_mask is not None:\n                xt = xt * x_mask\n            xt = c2(xt)\n            x = xt + x\n        if x_mask is not None:\n            x = x * x_mask\n        return x\n\n    def remove_weight_norm(self):\n        for l in self.convs1:\n            remove_weight_norm(l)\n        for l in self.convs2:\n            remove_weight_norm(l)\n\n\nclass ResBlock2(torch.nn.Module):\n    def __init__(self, channels, kernel_size=3, dilation=(1, 3)):\n        super(ResBlock2, self).__init__()\n        self.convs = nn.ModuleList([\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[0],\n                               padding=get_padding(kernel_size, dilation[0]))),\n            weight_norm(Conv1d(channels, channels, kernel_size, 1, dilation=dilation[1],\n                               padding=get_padding(kernel_size, dilation[1])))\n        ])\n        self.convs.apply(init_weights)\n\n    def forward(self, x, x_mask=None):\n        for c in self.convs:\n            xt = F.leaky_relu(x, LRELU_SLOPE)\n            if x_mask is not None:\n                xt = xt * x_mask\n            xt = c(xt)\n            x = xt + x\n        if x_mask is not None:\n            x = x * x_mask\n        return x\n\n    def remove_weight_norm(self):\n        for l in self.convs:\n            remove_weight_norm(l)\n\n\nclass Log(nn.Module):\n  def forward(self, x, x_mask, reverse=False, **kwargs):\n    if not reverse:\n      y = torch.log(torch.clamp_min(x, 1e-5)) * x_mask\n      logdet = torch.sum(-y, [1, 2])\n      return y, logdet\n    else:\n      x = torch.exp(x) * x_mask\n      return x\n    \n\nclass Flip(nn.Module):\n  def forward(self, x, *args, reverse=False, **kwargs):\n    x = torch.flip(x, [1])\n    if not reverse:\n      logdet = torch.zeros(x.size(0)).to(dtype=x.dtype, device=x.device)\n      return x, logdet\n    else:\n      return x\n\n\nclass ElementwiseAffine(nn.Module):\n  def __init__(self, channels):\n    super().__init__()\n    self.channels = channels\n    self.m = nn.Parameter(torch.zeros(channels,1))\n    self.logs = nn.Parameter(torch.zeros(channels,1))\n\n  def forward(self, x, x_mask, reverse=False, **kwargs):\n    if not reverse:\n      y = self.m + torch.exp(self.logs) * x\n      y = y * x_mask\n      logdet = torch.sum(self.logs * x_mask, [1,2])\n      return y, logdet\n    else:\n      x = (x - self.m) * torch.exp(-self.logs) * x_mask\n      return x\n\n\nclass ResidualCouplingLayer(nn.Module):\n  def __init__(self,\n      channels,\n      hidden_channels,\n      kernel_size,\n      dilation_rate,\n      n_layers,\n      p_dropout=0,\n      gin_channels=0,\n      mean_only=False):\n    assert channels % 2 == 0, \"channels should be divisible by 2\"\n    super().__init__()\n    self.channels = channels\n    self.hidden_channels = hidden_channels\n    self.kernel_size = kernel_size\n    self.dilation_rate = dilation_rate\n    self.n_layers = n_layers\n    self.half_channels = channels // 2\n    self.mean_only = mean_only\n\n    self.pre = nn.Conv1d(self.half_channels, hidden_channels, 1)\n    self.enc = WN(hidden_channels, kernel_size, dilation_rate, n_layers, p_dropout=p_dropout, gin_channels=gin_channels)\n    self.post = nn.Conv1d(hidden_channels, self.half_channels * (2 - mean_only), 1)\n    self.post.weight.data.zero_()\n    self.post.bias.data.zero_()\n\n  def forward(self, x, x_mask, g=None, reverse=False):\n    x0, x1 = torch.split(x, [self.half_channels]*2, 1)\n    h = self.pre(x0) * x_mask\n    h = self.enc(h, x_mask, g=g)\n    stats = self.post(h) * x_mask\n    if not self.mean_only:\n      m, logs = torch.split(stats, [self.half_channels]*2, 1)\n    else:\n      m = stats\n      logs = torch.zeros_like(m)\n\n    if not reverse:\n      x1 = m + x1 * torch.exp(logs) * x_mask\n      x = torch.cat([x0, x1], 1)\n      logdet = torch.sum(logs, [1,2])\n      return x, logdet\n    else:\n      x1 = (x1 - m) * torch.exp(-logs) * x_mask\n      x = torch.cat([x0, x1], 1)\n      return x\n"
        },
        {
          "name": "onnx_export.py",
          "type": "blob",
          "size": 2.546875,
          "content": "import argparse\nimport time\nimport numpy as np\nimport onnx\nfrom onnxsim import simplify\nimport onnxruntime as ort\nimport onnxoptimizer\nimport torch\nfrom model_onnx import SynthesizerTrn\nimport utils\nfrom hubert import hubert_model_onnx\n\ndef main(HubertExport,NetExport):\n\n    path = \"NyaruTaffy\"\n\n    if(HubertExport):\n        device = torch.device(\"cuda\")\n        hubert_soft = utils.get_hubert_model()\n        test_input = torch.rand(1, 1, 16000)\n        input_names = [\"source\"]\n        output_names = [\"embed\"]\n        torch.onnx.export(hubert_soft.to(device),\n                        test_input.to(device),\n                        \"hubert3.0.onnx\",\n                        dynamic_axes={\n                            \"source\": {\n                                2: \"sample_length\"\n                            }\n                        },\n                        verbose=False,\n                        opset_version=13,\n                        input_names=input_names,\n                        output_names=output_names)\n    if(NetExport):\n        device = torch.device(\"cuda\")\n        hps = utils.get_hparams_from_file(f\"checkpoints/{path}/config.json\")\n        SVCVITS = SynthesizerTrn(\n            hps.data.filter_length // 2 + 1,\n            hps.train.segment_size // hps.data.hop_length,\n            **hps.model)\n        _ = utils.load_checkpoint(f\"checkpoints/{path}/model.pth\", SVCVITS, None)\n        _ = SVCVITS.eval().to(device)\n        for i in SVCVITS.parameters():\n            i.requires_grad = False\n        test_hidden_unit = torch.rand(1, 50, 256)\n        test_lengths = torch.LongTensor([50])\n        test_pitch = torch.rand(1, 50)\n        test_sid = torch.LongTensor([0])\n        input_names = [\"hidden_unit\", \"lengths\", \"pitch\", \"sid\"]\n        output_names = [\"audio\", ]\n        SVCVITS.eval()\n        torch.onnx.export(SVCVITS,\n                        (\n                            test_hidden_unit.to(device),\n                            test_lengths.to(device),\n                            test_pitch.to(device),\n                            test_sid.to(device)\n                        ),\n                        f\"checkpoints/{path}/model.onnx\",\n                        dynamic_axes={\n                            \"hidden_unit\": [0, 1],\n                            \"pitch\": [1]\n                        },\n                        do_constant_folding=False,\n                        opset_version=16,\n                        verbose=False,\n                        input_names=input_names,\n                        output_names=output_names)\n\n\nif __name__ == '__main__':\n    main(False,True)\n"
        },
        {
          "name": "onnx_export_48k.py",
          "type": "blob",
          "size": 2.57421875,
          "content": "import argparse\nimport time\nimport numpy as np\nimport onnx\nfrom onnxsim import simplify\nimport onnxruntime as ort\nimport onnxoptimizer\nimport torch\nfrom model_onnx_48k import SynthesizerTrn\nimport utils\nfrom hubert import hubert_model_onnx\n\ndef main(HubertExport,NetExport):\n\n    path = \"NyaruTaffy\"\n\n    if(HubertExport):\n        device = torch.device(\"cuda\")\n        hubert_soft = hubert_model_onnx.hubert_soft(\"hubert/model.pt\")\n        test_input = torch.rand(1, 1, 16000)\n        input_names = [\"source\"]\n        output_names = [\"embed\"]\n        torch.onnx.export(hubert_soft.to(device),\n                        test_input.to(device),\n                        \"hubert3.0.onnx\",\n                        dynamic_axes={\n                            \"source\": {\n                                2: \"sample_length\"\n                            }\n                        },\n                        verbose=False,\n                        opset_version=13,\n                        input_names=input_names,\n                        output_names=output_names)\n    if(NetExport):\n        device = torch.device(\"cuda\")\n        hps = utils.get_hparams_from_file(f\"checkpoints/{path}/config.json\")\n        SVCVITS = SynthesizerTrn(\n            hps.data.filter_length // 2 + 1,\n            hps.train.segment_size // hps.data.hop_length,\n            **hps.model)\n        _ = utils.load_checkpoint(f\"checkpoints/{path}/model.pth\", SVCVITS, None)\n        _ = SVCVITS.eval().to(device)\n        for i in SVCVITS.parameters():\n            i.requires_grad = False\n        test_hidden_unit = torch.rand(1, 50, 256)\n        test_lengths = torch.LongTensor([50])\n        test_pitch = torch.rand(1, 50)\n        test_sid = torch.LongTensor([0])\n        input_names = [\"hidden_unit\", \"lengths\", \"pitch\", \"sid\"]\n        output_names = [\"audio\", ]\n        SVCVITS.eval()\n        torch.onnx.export(SVCVITS,\n                        (\n                            test_hidden_unit.to(device),\n                            test_lengths.to(device),\n                            test_pitch.to(device),\n                            test_sid.to(device)\n                        ),\n                        f\"checkpoints/{path}/model.onnx\",\n                        dynamic_axes={\n                            \"hidden_unit\": [0, 1],\n                            \"pitch\": [1]\n                        },\n                        do_constant_folding=False,\n                        opset_version=16,\n                        verbose=False,\n                        input_names=input_names,\n                        output_names=output_names)\n\n\nif __name__ == '__main__':\n    main(False,True)\n"
        },
        {
          "name": "preprocess_flist_config.py",
          "type": "blob",
          "size": 3.6650390625,
          "content": "import os\nimport argparse\nimport re\n\nfrom tqdm import tqdm\nfrom random import shuffle\nimport json\nconfig_template = {\n  \"train\": {\n    \"log_interval\": 200,\n    \"eval_interval\": 1000,\n    \"seed\": 1234,\n    \"epochs\": 10000,\n    \"learning_rate\": 1e-4,\n    \"betas\": [0.8, 0.99],\n    \"eps\": 1e-9,\n    \"batch_size\": 12,\n    \"fp16_run\": False,\n    \"lr_decay\": 0.999875,\n    \"segment_size\": 17920,\n    \"init_lr_ratio\": 1,\n    \"warmup_epochs\": 0,\n    \"c_mel\": 45,\n    \"c_kl\": 1.0,\n    \"use_sr\": True,\n    \"max_speclen\": 384,\n    \"port\": \"8001\",\n    \"keep_ckpts\": 5,  # Number of ckpts to keep, if 0, keep all\n  },\n  \"data\": {\n    \"training_files\":\"filelists/train.txt\",\n    \"validation_files\":\"filelists/val.txt\",\n    \"max_wav_value\": 32768.0,\n    \"sampling_rate\": 32000,\n    \"filter_length\": 1280,\n    \"hop_length\": 320,\n    \"win_length\": 1280,\n    \"n_mel_channels\": 80,\n    \"mel_fmin\": 0.0,\n    \"mel_fmax\": None\n  },\n  \"model\": {\n    \"inter_channels\": 192,\n    \"hidden_channels\": 192,\n    \"filter_channels\": 768,\n    \"n_heads\": 2,\n    \"n_layers\": 6,\n    \"kernel_size\": 3,\n    \"p_dropout\": 0.1,\n    \"resblock\": \"1\",\n    \"resblock_kernel_sizes\": [3,7,11],\n    \"resblock_dilation_sizes\": [[1,3,5], [1,3,5], [1,3,5]],\n    \"upsample_rates\": [10,8,2,2],\n    \"upsample_initial_channel\": 512,\n    \"upsample_kernel_sizes\": [16,16,4,4],\n    \"n_layers_q\": 3,\n    \"use_spectral_norm\": False,\n    \"gin_channels\": 256,\n    \"ssl_dim\": 256,\n    \"n_speakers\": 0,\n  },\n  \"spk\":{\n    \"nen\": 0,\n    \"paimon\": 1,\n    \"yunhao\": 2\n  }\n}\n\npattern = re.compile(r'^[\\.a-zA-Z0-9_\\/]+$')\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--train_list\", type=str, default=\"./filelists/train.txt\", help=\"path to train list\")\n    parser.add_argument(\"--val_list\", type=str, default=\"./filelists/val.txt\", help=\"path to val list\")\n    parser.add_argument(\"--test_list\", type=str, default=\"./filelists/test.txt\", help=\"path to test list\")\n    parser.add_argument(\"--source_dir\", type=str, default=\"./dataset/32k\", help=\"path to source dir\")\n    args = parser.parse_args()\n    \n    train = []\n    val = []\n    test = []\n    idx = 0\n    spk_dict = {}\n    spk_id = 0\n    for speaker in tqdm(os.listdir(args.source_dir)):\n        spk_dict[speaker] = spk_id\n        spk_id += 1\n        wavs = [\"/\".join([args.source_dir, speaker, i]) for i in os.listdir(os.path.join(args.source_dir, speaker))]\n        for wavpath in wavs:\n            if not pattern.match(wavpath):\n                print(f\"warning：文件名{wavpath}中包含非字母数字下划线，可能会导致错误。（也可能不会）\")\n        if len(wavs) < 10:\n            print(f\"warning：{speaker}数据集数量小于10条，请补充数据\")\n        wavs = [i for i in wavs if i.endswith(\"wav\")]\n        shuffle(wavs)\n        train += wavs[2:-2]\n        val += wavs[:2]\n        test += wavs[-2:]\n    n_speakers = len(spk_dict.keys())*2\n    shuffle(train)\n    shuffle(val)\n    shuffle(test)\n            \n    print(\"Writing\", args.train_list)\n    with open(args.train_list, \"w\") as f:\n        for fname in tqdm(train):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n        \n    print(\"Writing\", args.val_list)\n    with open(args.val_list, \"w\") as f:\n        for fname in tqdm(val):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n            \n    print(\"Writing\", args.test_list)\n    with open(args.test_list, \"w\") as f:\n        for fname in tqdm(test):\n            wavpath = fname\n            f.write(wavpath + \"\\n\")\n\n    config_template[\"model\"][\"n_speakers\"] = n_speakers\n    config_template[\"spk\"] = spk_dict\n    print(\"Writing configs/config.json\")\n    with open(\"configs/config.json\", \"w\") as f:\n        json.dump(config_template, f, indent=2)\n"
        },
        {
          "name": "preprocess_hubert_f0.py",
          "type": "blob",
          "size": 3.126953125,
          "content": "import os\nimport argparse\n\nimport torch\nimport json\nfrom glob import glob\n\nfrom pyworld import pyworld\nfrom tqdm import tqdm\nfrom scipy.io import wavfile\n\nimport utils\nfrom mel_processing import mel_spectrogram_torch\n#import h5py\nimport logging\nlogging.getLogger('numba').setLevel(logging.WARNING)\n\nimport parselmouth\nimport librosa\nimport numpy as np\n\n\ndef get_f0(path,p_len=None, f0_up_key=0):\n    x, _ = librosa.load(path, 32000)\n    if p_len is None:\n        p_len = x.shape[0]//320\n    else:\n        assert abs(p_len-x.shape[0]//320) < 3, (path, p_len, x.shape)\n    time_step = 320 / 32000 * 1000\n    f0_min = 50\n    f0_max = 1100\n    f0_mel_min = 1127 * np.log(1 + f0_min / 700)\n    f0_mel_max = 1127 * np.log(1 + f0_max / 700)\n\n    f0 = parselmouth.Sound(x, 32000).to_pitch_ac(\n        time_step=time_step / 1000, voicing_threshold=0.6,\n        pitch_floor=f0_min, pitch_ceiling=f0_max).selected_array['frequency']\n\n    pad_size=(p_len - len(f0) + 1) // 2\n    if(pad_size>0 or p_len - len(f0) - pad_size>0):\n        f0 = np.pad(f0,[[pad_size,p_len - len(f0) - pad_size]], mode='constant')\n\n    f0bak = f0.copy()\n    f0 *= pow(2, f0_up_key / 12)\n    f0_mel = 1127 * np.log(1 + f0 / 700)\n    f0_mel[f0_mel > 0] = (f0_mel[f0_mel > 0] - f0_mel_min) * 254 / (f0_mel_max - f0_mel_min) + 1\n    f0_mel[f0_mel <= 1] = 1\n    f0_mel[f0_mel > 255] = 255\n    f0_coarse = np.rint(f0_mel).astype(np.int)\n    return f0_coarse, f0bak\n\ndef resize2d(x, target_len):\n    source = np.array(x)\n    source[source<0.001] = np.nan\n    target = np.interp(np.arange(0, len(source)*target_len, len(source))/ target_len, np.arange(0, len(source)), source)\n    res = np.nan_to_num(target)\n    return res\n\ndef compute_f0(path, c_len):\n    x, sr = librosa.load(path, sr=32000)\n    f0, t = pyworld.dio(\n        x.astype(np.double),\n        fs=sr,\n        f0_ceil=800,\n        frame_period=1000 * 320 / sr,\n    )\n    f0 = pyworld.stonemask(x.astype(np.double), f0, t, 32000)\n    for index, pitch in enumerate(f0):\n        f0[index] = round(pitch, 1)\n    assert abs(c_len - x.shape[0]//320) < 3, (c_len, f0.shape)\n\n    return None, resize2d(f0, c_len)\n\n\ndef process(filename):\n    print(filename)\n    save_name = filename+\".soft.pt\"\n    if not os.path.exists(save_name):\n        devive = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n        wav, _ = librosa.load(filename, sr=16000)\n        wav = torch.from_numpy(wav).unsqueeze(0).to(devive)\n        c = utils.get_hubert_content(hmodel, wav)\n        torch.save(c.cpu(), save_name)\n    else:\n        c = torch.load(save_name)\n    f0path = filename+\".f0.npy\"\n    if not os.path.exists(f0path):\n        cf0, f0 = compute_f0(filename, c.shape[-1] * 2)\n        np.save(f0path, f0)\n\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--in_dir\", type=str, default=\"dataset/32k\", help=\"path to input dir\")\n    args = parser.parse_args()\n\n    print(\"Loading hubert for content...\")\n    hmodel = utils.get_hubert_model(0 if torch.cuda.is_available() else None)\n    print(\"Loaded hubert.\")\n\n    filenames = glob(f'{args.in_dir}/*/*.wav', recursive=True)#[:10]\n    \n    for filename in tqdm(filenames):\n        process(filename)\n    "
        },
        {
          "name": "raw",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3203125,
          "content": "Flask==2.1.2\nFlask_Cors==3.0.10\ngradio==3.4.1\nnumpy==1.19.2\nplaysound==1.3.0\nPyAudio==0.2.12\npydub==0.25.1\npyworld==0.3.0\nrequests==2.28.1\nscipy==1.7.3\nsounddevice==0.4.5\nSoundFile==0.10.3.post1\nstarlette==0.19.1\ntorch==1.10.0+cu113\ntorchaudio==0.10.0+cu113\ntqdm==4.63.0\nscikit-maad\npraat-parselmouth\nonnx\nonnxsim\nonnxoptimizer\n"
        },
        {
          "name": "resample.py",
          "type": "blob",
          "size": 1.783203125,
          "content": "import os\nimport argparse\nimport librosa\nimport numpy as np\nfrom multiprocessing import Pool, cpu_count\nfrom scipy.io import wavfile\nfrom tqdm import tqdm\n\n\ndef process(item):\n    spkdir, wav_name, args = item\n    # speaker 's5', 'p280', 'p315' are excluded,\n    speaker = spkdir.replace(\"\\\\\", \"/\").split(\"/\")[-1]\n    wav_path = os.path.join(args.in_dir, speaker, wav_name)\n    if os.path.exists(wav_path) and '.wav' in wav_path:\n        os.makedirs(os.path.join(args.out_dir2, speaker), exist_ok=True)\n        wav, sr = librosa.load(wav_path, None)\n        wav, _ = librosa.effects.trim(wav, top_db=20)\n        peak = np.abs(wav).max()\n        if peak > 1.0:\n            wav = 0.98 * wav / peak\n        wav2 = librosa.resample(wav, orig_sr=sr, target_sr=args.sr2)\n        wav2 /= max(wav2.max(), -wav2.min())\n        save_name = wav_name\n        save_path2 = os.path.join(args.out_dir2, speaker, save_name)\n        wavfile.write(\n            save_path2,\n            args.sr2,\n            (wav2 * np.iinfo(np.int16).max).astype(np.int16)\n        )\n\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--sr2\", type=int, default=32000, help=\"sampling rate\")\n    parser.add_argument(\"--in_dir\", type=str, default=\"./dataset_raw\", help=\"path to source dir\")\n    parser.add_argument(\"--out_dir2\", type=str, default=\"./dataset/32k\", help=\"path to target dir\")\n    args = parser.parse_args()\n    processs = cpu_count()-2 if cpu_count() >4 else 1\n    pool = Pool(processes=processs)\n\n    for speaker in os.listdir(args.in_dir):\n        spk_dir = os.path.join(args.in_dir, speaker)\n        if os.path.isdir(spk_dir):\n            print(spk_dir)\n            for _ in tqdm(pool.imap_unordered(process, [(spk_dir, i, args) for i in os.listdir(spk_dir) if i.endswith(\"wav\")])):\n                pass\n"
        },
        {
          "name": "sovits_gradio.py",
          "type": "blob",
          "size": 2.2978515625,
          "content": "from inference.infer_tool_grad import VitsSvc\r\nimport gradio as gr\r\nimport os\r\n\r\nclass VitsGradio:\r\n    def __init__(self):\r\n        self.so = VitsSvc()\r\n        self.lspk = []\r\n        self.modelPaths = []\r\n        for root,dirs,files in os.walk(\"checkpoints\"):\r\n            for dir in dirs:\r\n                self.modelPaths.append(dir)\r\n        with gr.Blocks() as self.Vits:\r\n            with gr.Tab(\"VoiceConversion\"):\r\n                with gr.Row(visible=False) as self.VoiceConversion:\r\n                    with gr.Column():\r\n                        with gr.Row():\r\n                            with gr.Column():\r\n                                self.srcaudio = gr.Audio(label = \"输入音频\")\r\n                                self.btnVC = gr.Button(\"说话人转换\")\r\n                            with gr.Column():\r\n                                self.dsid = gr.Dropdown(label = \"目标角色\", choices = self.lspk)\r\n                                self.tran = gr.Slider(label = \"升降调\", maximum = 60, minimum = -60, step = 1, value = 0)\r\n                                self.th = gr.Slider(label = \"切片阈值\", maximum = 32767, minimum = -32768, step = 0.1, value = -40)\r\n                        with gr.Row():\r\n                            self.VCOutputs = gr.Audio()\r\n                self.btnVC.click(self.so.inference, inputs=[self.srcaudio,self.dsid,self.tran,self.th], outputs=[self.VCOutputs])\r\n            with gr.Tab(\"SelectModel\"):\r\n                with gr.Column():\r\n                    modelstrs = gr.Dropdown(label = \"模型\", choices = self.modelPaths, value = self.modelPaths[0], type = \"value\")\r\n                    devicestrs = gr.Dropdown(label = \"设备\", choices = [\"cpu\",\"cuda\"], value = \"cpu\", type = \"value\")\r\n                    btnMod = gr.Button(\"载入模型\")\r\n                    btnMod.click(self.loadModel, inputs=[modelstrs,devicestrs], outputs = [self.dsid,self.VoiceConversion])\r\n\r\n    def loadModel(self, path, device):\r\n        self.lspk = []\r\n        self.so.set_device(device)\r\n        self.so.loadCheckpoint(path)\r\n        for spk, sid in self.so.hps.spk.items():\r\n            self.lspk.append(spk)\r\n        VChange = gr.update(visible = True)\r\n        SDChange = gr.update(choices = self.lspk, value = self.lspk[0])\r\n        return [SDChange,VChange]\r\n\r\ngrVits = VitsGradio()\r\n\r\ngrVits.Vits.launch()"
        },
        {
          "name": "spec_gen.py",
          "type": "blob",
          "size": 0.5625,
          "content": "from data_utils import TextAudioSpeakerLoader, EvalDataLoader\nimport json\nfrom tqdm import tqdm\n\nfrom utils import HParams\n\nconfig_path = 'configs/config.json'\nwith open(config_path, \"r\") as f:\n    data = f.read()\nconfig = json.loads(data)\nhps = HParams(**config)\n\ntrain_dataset = TextAudioSpeakerLoader(\"filelists/train.txt\", hps)\ntest_dataset = TextAudioSpeakerLoader(\"filelists/test.txt\", hps)\neval_dataset = TextAudioSpeakerLoader(\"filelists/val.txt\", hps)\n\nfor _ in tqdm(train_dataset):\n    pass\nfor _ in tqdm(eval_dataset):\n    pass\nfor _ in tqdm(test_dataset):\n    pass"
        },
        {
          "name": "train.py",
          "type": "blob",
          "size": 11.0791015625,
          "content": "import logging\nlogging.getLogger('matplotlib').setLevel(logging.WARNING)\nimport os\nimport json\nimport argparse\nimport itertools\nimport math\nimport torch\nfrom torch import nn, optim\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader\nfrom torch.utils.tensorboard import SummaryWriter\nimport torch.multiprocessing as mp\nimport torch.distributed as dist\nfrom torch.nn.parallel import DistributedDataParallel as DDP\nfrom torch.cuda.amp import autocast, GradScaler\n\nimport commons\nimport utils\nfrom data_utils import TextAudioSpeakerLoader, EvalDataLoader\nfrom models import (\n    SynthesizerTrn,\n    MultiPeriodDiscriminator,\n)\nfrom losses import (\n    kl_loss,\n    generator_loss, discriminator_loss, feature_loss\n)\n\nfrom mel_processing import mel_spectrogram_torch, spec_to_mel_torch\n\ntorch.backends.cudnn.benchmark = True\nglobal_step = 0\n\n\n# os.environ['TORCH_DISTRIBUTED_DEBUG'] = 'INFO'\n\n\ndef main():\n    \"\"\"Assume Single Node Multi GPUs Training Only\"\"\"\n    assert torch.cuda.is_available(), \"CPU training is not allowed.\"\n    hps = utils.get_hparams()\n\n    n_gpus = torch.cuda.device_count()\n    os.environ['MASTER_ADDR'] = 'localhost'\n    os.environ['MASTER_PORT'] = hps.train.port\n\n    mp.spawn(run, nprocs=n_gpus, args=(n_gpus, hps,))\n\n\ndef run(rank, n_gpus, hps):\n    global global_step\n    if rank == 0:\n        logger = utils.get_logger(hps.model_dir)\n        logger.info(hps)\n        utils.check_git_hash(hps.model_dir)\n        writer = SummaryWriter(log_dir=hps.model_dir)\n        writer_eval = SummaryWriter(log_dir=os.path.join(hps.model_dir, \"eval\"))\n\n    # for pytorch on win, backend use gloo    \n    dist.init_process_group(backend=  'gloo' if os.name == 'nt' else 'nccl', init_method='env://', world_size=n_gpus, rank=rank)\n    torch.manual_seed(hps.train.seed)\n    torch.cuda.set_device(rank)\n\n    train_dataset = TextAudioSpeakerLoader(hps.data.training_files, hps)\n    train_loader = DataLoader(train_dataset, num_workers=8, shuffle=False, pin_memory=True,\n                              batch_size=hps.train.batch_size)\n    if rank == 0:\n        eval_dataset = EvalDataLoader(hps.data.validation_files, hps)\n        eval_loader = DataLoader(eval_dataset, num_workers=1, shuffle=False,\n                                 batch_size=1, pin_memory=False,\n                                 drop_last=False)\n\n    net_g = SynthesizerTrn(\n        hps.data.filter_length // 2 + 1,\n        hps.train.segment_size // hps.data.hop_length,\n        **hps.model).cuda(rank)\n    net_d = MultiPeriodDiscriminator(hps.model.use_spectral_norm).cuda(rank)\n    optim_g = torch.optim.AdamW(\n        net_g.parameters(),\n        hps.train.learning_rate,\n        betas=hps.train.betas,\n        eps=hps.train.eps)\n    optim_d = torch.optim.AdamW(\n        net_d.parameters(),\n        hps.train.learning_rate,\n        betas=hps.train.betas,\n        eps=hps.train.eps)\n    net_g = DDP(net_g, device_ids=[rank])  # , find_unused_parameters=True)\n    net_d = DDP(net_d, device_ids=[rank])\n\n    try:\n        _, _, _, epoch_str = utils.load_checkpoint(utils.latest_checkpoint_path(hps.model_dir, \"G_*.pth\"), net_g,\n                                                   optim_g)\n        _, _, _, epoch_str = utils.load_checkpoint(utils.latest_checkpoint_path(hps.model_dir, \"D_*.pth\"), net_d,\n                                                   optim_d)\n        global_step = (epoch_str - 1) * len(train_loader)\n    except:\n        epoch_str = 1\n        global_step = 0\n\n    scheduler_g = torch.optim.lr_scheduler.ExponentialLR(optim_g, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2)\n    scheduler_d = torch.optim.lr_scheduler.ExponentialLR(optim_d, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2)\n\n    scaler = GradScaler(enabled=hps.train.fp16_run)\n\n    for epoch in range(epoch_str, hps.train.epochs + 1):\n        if rank == 0:\n            train_and_evaluate(rank, epoch, hps, [net_g, net_d], [optim_g, optim_d], [scheduler_g, scheduler_d], scaler,\n                               [train_loader, eval_loader], logger, [writer, writer_eval])\n        else:\n            train_and_evaluate(rank, epoch, hps, [net_g, net_d], [optim_g, optim_d], [scheduler_g, scheduler_d], scaler,\n                               [train_loader, None], None, None)\n        scheduler_g.step()\n        scheduler_d.step()\n\n\ndef train_and_evaluate(rank, epoch, hps, nets, optims, schedulers, scaler, loaders, logger, writers):\n    net_g, net_d = nets\n    optim_g, optim_d = optims\n    scheduler_g, scheduler_d = schedulers\n    train_loader, eval_loader = loaders\n    if writers is not None:\n        writer, writer_eval = writers\n\n    # train_loader.batch_sampler.set_epoch(epoch)\n    global global_step\n\n    net_g.train()\n    net_d.train()\n    for batch_idx, items in enumerate(train_loader):\n        c, f0, spec, y, spk = items\n        g = spk.cuda(rank, non_blocking=True)\n        spec, y = spec.cuda(rank, non_blocking=True), y.cuda(rank, non_blocking=True)\n        c = c.cuda(rank, non_blocking=True)\n        f0 = f0.cuda(rank, non_blocking=True)\n        mel = spec_to_mel_torch(\n            spec,\n            hps.data.filter_length,\n            hps.data.n_mel_channels,\n            hps.data.sampling_rate,\n            hps.data.mel_fmin,\n            hps.data.mel_fmax)\n\n        with autocast(enabled=hps.train.fp16_run):\n            y_hat, ids_slice, z_mask, \\\n            (z, z_p, m_p, logs_p, m_q, logs_q) = net_g(c, f0, spec, g=g, mel=mel)\n\n            y_mel = commons.slice_segments(mel, ids_slice, hps.train.segment_size // hps.data.hop_length)\n            y_hat_mel = mel_spectrogram_torch(\n                y_hat.squeeze(1),\n                hps.data.filter_length,\n                hps.data.n_mel_channels,\n                hps.data.sampling_rate,\n                hps.data.hop_length,\n                hps.data.win_length,\n                hps.data.mel_fmin,\n                hps.data.mel_fmax\n            )\n            y = commons.slice_segments(y, ids_slice * hps.data.hop_length, hps.train.segment_size)  # slice\n\n            # Discriminator\n            y_d_hat_r, y_d_hat_g, _, _ = net_d(y, y_hat.detach())\n\n            with autocast(enabled=False):\n                loss_disc, losses_disc_r, losses_disc_g = discriminator_loss(y_d_hat_r, y_d_hat_g)\n                loss_disc_all = loss_disc\n\n        optim_d.zero_grad()\n        scaler.scale(loss_disc_all).backward()\n        scaler.unscale_(optim_d)\n        grad_norm_d = commons.clip_grad_value_(net_d.parameters(), None)\n        scaler.step(optim_d)\n\n        with autocast(enabled=hps.train.fp16_run):\n            # Generator\n            y_d_hat_r, y_d_hat_g, fmap_r, fmap_g = net_d(y, y_hat)\n            with autocast(enabled=False):\n                loss_mel = F.l1_loss(y_mel, y_hat_mel) * hps.train.c_mel\n                loss_kl = kl_loss(z_p, logs_q, m_p, logs_p, z_mask) * hps.train.c_kl\n                loss_fm = feature_loss(fmap_r, fmap_g)\n                loss_gen, losses_gen = generator_loss(y_d_hat_g)\n                loss_gen_all = loss_gen + loss_fm + loss_mel + loss_kl\n        optim_g.zero_grad()\n        scaler.scale(loss_gen_all).backward()\n        scaler.unscale_(optim_g)\n        grad_norm_g = commons.clip_grad_value_(net_g.parameters(), None)\n        scaler.step(optim_g)\n        scaler.update()\n\n        if rank == 0:\n            if global_step % hps.train.log_interval == 0:\n                lr = optim_g.param_groups[0]['lr']\n                losses = [loss_disc, loss_gen, loss_fm, loss_mel, loss_kl]\n                logger.info('Train Epoch: {} [{:.0f}%]'.format(\n                    epoch,\n                    100. * batch_idx / len(train_loader)))\n                logger.info([x.item() for x in losses] + [global_step, lr])\n\n                scalar_dict = {\"loss/g/total\": loss_gen_all, \"loss/d/total\": loss_disc_all, \"learning_rate\": lr,\n                               \"grad_norm_d\": grad_norm_d, \"grad_norm_g\": grad_norm_g}\n                scalar_dict.update({\"loss/g/fm\": loss_fm, \"loss/g/mel\": loss_mel, \"loss/g/kl\": loss_kl})\n\n                scalar_dict.update({\"loss/g/{}\".format(i): v for i, v in enumerate(losses_gen)})\n                scalar_dict.update({\"loss/d_r/{}\".format(i): v for i, v in enumerate(losses_disc_r)})\n                scalar_dict.update({\"loss/d_g/{}\".format(i): v for i, v in enumerate(losses_disc_g)})\n                image_dict = {\n                    \"slice/mel_org\": utils.plot_spectrogram_to_numpy(y_mel[0].data.cpu().numpy()),\n                    \"slice/mel_gen\": utils.plot_spectrogram_to_numpy(y_hat_mel[0].data.cpu().numpy()),\n                    \"all/mel\": utils.plot_spectrogram_to_numpy(mel[0].data.cpu().numpy()),\n                }\n\n                utils.summarize(\n                    writer=writer,\n                    global_step=global_step,\n                    images=image_dict,\n                    scalars=scalar_dict\n                )\n\n            if global_step % hps.train.eval_interval == 0:\n                evaluate(hps, net_g, eval_loader, writer_eval)\n                utils.save_checkpoint(net_g, optim_g, hps.train.learning_rate, epoch,\n                                      os.path.join(hps.model_dir, \"G_{}.pth\".format(global_step)))\n                utils.save_checkpoint(net_d, optim_d, hps.train.learning_rate, epoch,\n                                      os.path.join(hps.model_dir, \"D_{}.pth\".format(global_step)))\n\n                keep_ckpts = getattr(hps.train, 'keep_ckpts', 0)\n                if keep_ckpts > 0:\n                    utils.clean_checkpoints(path_to_models='logs/32k/', n_ckpts_to_keep=keep_ckpts, sort_by_time=True)\n\n\n        global_step += 1\n\n    if rank == 0:\n        logger.info('====> Epoch: {}'.format(epoch))\n\n\ndef evaluate(hps, generator, eval_loader, writer_eval):\n    generator.eval()\n    image_dict = {}\n    audio_dict = {}\n    with torch.no_grad():\n        for batch_idx, items in enumerate(eval_loader):\n            c, f0, spec, y, spk = items\n            g = spk[:1].cuda(0)\n            spec, y = spec[:1].cuda(0), y[:1].cuda(0)\n            c = c[:1].cuda(0)\n            f0 = f0[:1].cuda(0)\n            mel = spec_to_mel_torch(\n                spec,\n                hps.data.filter_length,\n                hps.data.n_mel_channels,\n                hps.data.sampling_rate,\n                hps.data.mel_fmin,\n                hps.data.mel_fmax)\n            y_hat = generator.module.infer(c, f0, g=g, mel=mel)\n\n            y_hat_mel = mel_spectrogram_torch(\n                y_hat.squeeze(1).float(),\n                hps.data.filter_length,\n                hps.data.n_mel_channels,\n                hps.data.sampling_rate,\n                hps.data.hop_length,\n                hps.data.win_length,\n                hps.data.mel_fmin,\n                hps.data.mel_fmax\n            )\n\n            audio_dict.update({\n                f\"gen/audio_{batch_idx}\": y_hat[0],\n                f\"gt/audio_{batch_idx}\": y[0]\n            })\n        image_dict.update({\n            f\"gen/mel\": utils.plot_spectrogram_to_numpy(y_hat_mel[0].cpu().numpy()),\n            \"gt/mel\": utils.plot_spectrogram_to_numpy(mel[0].cpu().numpy())\n        })\n    utils.summarize(\n        writer=writer_eval,\n        global_step=global_step,\n        images=image_dict,\n        audios=audio_dict,\n        audio_sampling_rate=hps.data.sampling_rate\n    )\n    generator.train()\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 10.7353515625,
          "content": "import os\nimport glob\nimport re\nimport sys\nimport argparse\nimport logging\nimport json\nimport subprocess\n\nimport librosa\nimport numpy as np\nimport torchaudio\nfrom scipy.io.wavfile import read\nimport torch\nimport torchvision\nfrom torch.nn import functional as F\nfrom commons import sequence_mask\nfrom hubert import hubert_model\nMATPLOTLIB_FLAG = False\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\nlogger = logging\n\nf0_bin = 256\nf0_max = 1100.0\nf0_min = 50.0\nf0_mel_min = 1127 * np.log(1 + f0_min / 700)\nf0_mel_max = 1127 * np.log(1 + f0_max / 700)\n\ndef f0_to_coarse(f0):\n  is_torch = isinstance(f0, torch.Tensor)\n  f0_mel = 1127 * (1 + f0 / 700).log() if is_torch else 1127 * np.log(1 + f0 / 700)\n  f0_mel[f0_mel > 0] = (f0_mel[f0_mel > 0] - f0_mel_min) * (f0_bin - 2) / (f0_mel_max - f0_mel_min) + 1\n\n  f0_mel[f0_mel <= 1] = 1\n  f0_mel[f0_mel > f0_bin - 1] = f0_bin - 1\n  f0_coarse = (f0_mel + 0.5).long() if is_torch else np.rint(f0_mel).astype(np.int)\n  assert f0_coarse.max() <= 255 and f0_coarse.min() >= 1, (f0_coarse.max(), f0_coarse.min())\n  return f0_coarse\n\n\ndef get_hubert_model(rank=None):\n\n  hubert_soft = hubert_model.hubert_soft(\"hubert/hubert-soft-0d54a1f4.pt\")\n  if rank is not None:\n    hubert_soft = hubert_soft.cuda(rank)\n  return hubert_soft\n\ndef get_hubert_content(hmodel, y=None, path=None):\n  if path is not None:\n    source, sr = torchaudio.load(path)\n    source = torchaudio.functional.resample(source, sr, 16000)\n    if len(source.shape) == 2 and source.shape[1] >= 2:\n      source = torch.mean(source, dim=0).unsqueeze(0)\n  else:\n    source = y\n  source = source.unsqueeze(0)\n  with torch.inference_mode():\n    units = hmodel.units(source)\n    return units.transpose(1,2)\n\n\ndef get_content(cmodel, y):\n    with torch.no_grad():\n        c = cmodel.extract_features(y.squeeze(1))[0]\n    c = c.transpose(1, 2)\n    return c\n\n\n\ndef transform(mel, height): # 68-92\n    #r = np.random.random()\n    #rate = r * 0.3 + 0.85 # 0.85-1.15\n    #height = int(mel.size(-2) * rate)\n    tgt = torchvision.transforms.functional.resize(mel, (height, mel.size(-1)))\n    if height >= mel.size(-2):\n        return tgt[:, :mel.size(-2), :]\n    else:\n        silence = tgt[:,-1:,:].repeat(1,mel.size(-2)-height,1)\n        silence += torch.randn_like(silence) / 10\n        return torch.cat((tgt, silence), 1)\n\n\ndef stretch(mel, width): # 0.5-2\n    return torchvision.transforms.functional.resize(mel, (mel.size(-2), width))\n\n\ndef load_checkpoint(checkpoint_path, model, optimizer=None):\n  assert os.path.isfile(checkpoint_path)\n  checkpoint_dict = torch.load(checkpoint_path, map_location='cpu')\n  iteration = checkpoint_dict['iteration']\n  learning_rate = checkpoint_dict['learning_rate']\n  if iteration is None:\n    iteration = 1\n  if learning_rate is None:\n    learning_rate = 0.0002\n  if optimizer is not None and checkpoint_dict['optimizer'] is not None:\n    optimizer.load_state_dict(checkpoint_dict['optimizer'])\n  saved_state_dict = checkpoint_dict['model']\n  if hasattr(model, 'module'):\n    state_dict = model.module.state_dict()\n  else:\n    state_dict = model.state_dict()\n  new_state_dict= {}\n  for k, v in state_dict.items():\n    try:\n      new_state_dict[k] = saved_state_dict[k]\n    except:\n      logger.info(\"%s is not in the checkpoint\" % k)\n      new_state_dict[k] = v\n  if hasattr(model, 'module'):\n    model.module.load_state_dict(new_state_dict)\n  else:\n    model.load_state_dict(new_state_dict)\n  logger.info(\"Loaded checkpoint '{}' (iteration {})\" .format(\n    checkpoint_path, iteration))\n  return model, optimizer, learning_rate, iteration\n\n\ndef save_checkpoint(model, optimizer, learning_rate, iteration, checkpoint_path):\n  logger.info(\"Saving model and optimizer state at iteration {} to {}\".format(\n    iteration, checkpoint_path))\n  if hasattr(model, 'module'):\n    state_dict = model.module.state_dict()\n  else:\n    state_dict = model.state_dict()\n  torch.save({'model': state_dict,\n              'iteration': iteration,\n              'optimizer': optimizer.state_dict(),\n              'learning_rate': learning_rate}, checkpoint_path)\n  # clean_ckpt = False\n  # if clean_ckpt:\n  #   clean_checkpoints(path_to_models='logs/32k/', n_ckpts_to_keep=3, sort_by_time=True)\n\ndef clean_checkpoints(path_to_models='logs/48k/', n_ckpts_to_keep=2, sort_by_time=True):\n  \"\"\"Freeing up space by deleting saved ckpts\n\n  Arguments:\n  path_to_models    --  Path to the model directory\n  n_ckpts_to_keep   --  Number of ckpts to keep, excluding G_0.pth and D_0.pth\n  sort_by_time      --  True -> chronologically delete ckpts\n                        False -> lexicographically delete ckpts\n  \"\"\"\n  ckpts_files = [f for f in os.listdir(path_to_models) if os.path.isfile(os.path.join(path_to_models, f))]\n  name_key = (lambda _f: int(re.compile('._(\\d+)\\.pth').match(_f).group(1)))\n  time_key = (lambda _f: os.path.getmtime(os.path.join(path_to_models, _f)))\n  sort_key = time_key if sort_by_time else name_key\n  x_sorted = lambda _x: sorted([f for f in ckpts_files if f.startswith(_x) and not f.endswith('_0.pth')], key=sort_key)\n  to_del = [os.path.join(path_to_models, fn) for fn in\n            (x_sorted('G')[:-n_ckpts_to_keep] + x_sorted('D')[:-n_ckpts_to_keep])]\n  del_info = lambda fn: logger.info(f\".. Free up space by deleting ckpt {fn}\")\n  del_routine = lambda x: [os.remove(x), del_info(x)]\n  rs = [del_routine(fn) for fn in to_del]\n\ndef summarize(writer, global_step, scalars={}, histograms={}, images={}, audios={}, audio_sampling_rate=22050):\n  for k, v in scalars.items():\n    writer.add_scalar(k, v, global_step)\n  for k, v in histograms.items():\n    writer.add_histogram(k, v, global_step)\n  for k, v in images.items():\n    writer.add_image(k, v, global_step, dataformats='HWC')\n  for k, v in audios.items():\n    writer.add_audio(k, v, global_step, audio_sampling_rate)\n\n\ndef latest_checkpoint_path(dir_path, regex=\"G_*.pth\"):\n  f_list = glob.glob(os.path.join(dir_path, regex))\n  f_list.sort(key=lambda f: int(\"\".join(filter(str.isdigit, f))))\n  x = f_list[-1]\n  print(x)\n  return x\n\n\ndef plot_spectrogram_to_numpy(spectrogram):\n  global MATPLOTLIB_FLAG\n  if not MATPLOTLIB_FLAG:\n    import matplotlib\n    matplotlib.use(\"Agg\")\n    MATPLOTLIB_FLAG = True\n    mpl_logger = logging.getLogger('matplotlib')\n    mpl_logger.setLevel(logging.WARNING)\n  import matplotlib.pylab as plt\n  import numpy as np\n\n  fig, ax = plt.subplots(figsize=(10,2))\n  im = ax.imshow(spectrogram, aspect=\"auto\", origin=\"lower\",\n                  interpolation='none')\n  plt.colorbar(im, ax=ax)\n  plt.xlabel(\"Frames\")\n  plt.ylabel(\"Channels\")\n  plt.tight_layout()\n\n  fig.canvas.draw()\n  data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n  data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n  plt.close()\n  return data\n\n\ndef plot_alignment_to_numpy(alignment, info=None):\n  global MATPLOTLIB_FLAG\n  if not MATPLOTLIB_FLAG:\n    import matplotlib\n    matplotlib.use(\"Agg\")\n    MATPLOTLIB_FLAG = True\n    mpl_logger = logging.getLogger('matplotlib')\n    mpl_logger.setLevel(logging.WARNING)\n  import matplotlib.pylab as plt\n  import numpy as np\n\n  fig, ax = plt.subplots(figsize=(6, 4))\n  im = ax.imshow(alignment.transpose(), aspect='auto', origin='lower',\n                  interpolation='none')\n  fig.colorbar(im, ax=ax)\n  xlabel = 'Decoder timestep'\n  if info is not None:\n      xlabel += '\\n\\n' + info\n  plt.xlabel(xlabel)\n  plt.ylabel('Encoder timestep')\n  plt.tight_layout()\n\n  fig.canvas.draw()\n  data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep='')\n  data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n  plt.close()\n  return data\n\n\ndef load_wav_to_torch(full_path):\n  sampling_rate, data = read(full_path)\n  return torch.FloatTensor(data.astype(np.float32)), sampling_rate\n\n\ndef load_filepaths_and_text(filename, split=\"|\"):\n  with open(filename, encoding='utf-8') as f:\n    filepaths_and_text = [line.strip().split(split) for line in f]\n  return filepaths_and_text\n\n\ndef get_hparams(init=True):\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-c', '--config', type=str, default=\"./configs/base.json\",\n                      help='JSON file for configuration')\n  parser.add_argument('-m', '--model', type=str, required=True,\n                      help='Model name')\n\n  args = parser.parse_args()\n  model_dir = os.path.join(\"./logs\", args.model)\n\n  if not os.path.exists(model_dir):\n    os.makedirs(model_dir)\n\n  config_path = args.config\n  config_save_path = os.path.join(model_dir, \"config.json\")\n  if init:\n    with open(config_path, \"r\") as f:\n      data = f.read()\n    with open(config_save_path, \"w\") as f:\n      f.write(data)\n  else:\n    with open(config_save_path, \"r\") as f:\n      data = f.read()\n  config = json.loads(data)\n\n  hparams = HParams(**config)\n  hparams.model_dir = model_dir\n  return hparams\n\n\ndef get_hparams_from_dir(model_dir):\n  config_save_path = os.path.join(model_dir, \"config.json\")\n  with open(config_save_path, \"r\") as f:\n    data = f.read()\n  config = json.loads(data)\n\n  hparams =HParams(**config)\n  hparams.model_dir = model_dir\n  return hparams\n\n\ndef get_hparams_from_file(config_path):\n  with open(config_path, \"r\") as f:\n    data = f.read()\n  config = json.loads(data)\n\n  hparams =HParams(**config)\n  return hparams\n\n\ndef check_git_hash(model_dir):\n  source_dir = os.path.dirname(os.path.realpath(__file__))\n  if not os.path.exists(os.path.join(source_dir, \".git\")):\n    logger.warn(\"{} is not a git repository, therefore hash value comparison will be ignored.\".format(\n      source_dir\n    ))\n    return\n\n  cur_hash = subprocess.getoutput(\"git rev-parse HEAD\")\n\n  path = os.path.join(model_dir, \"githash\")\n  if os.path.exists(path):\n    saved_hash = open(path).read()\n    if saved_hash != cur_hash:\n      logger.warn(\"git hash values are different. {}(saved) != {}(current)\".format(\n        saved_hash[:8], cur_hash[:8]))\n  else:\n    open(path, \"w\").write(cur_hash)\n\n\ndef get_logger(model_dir, filename=\"train.log\"):\n  global logger\n  logger = logging.getLogger(os.path.basename(model_dir))\n  logger.setLevel(logging.DEBUG)\n\n  formatter = logging.Formatter(\"%(asctime)s\\t%(name)s\\t%(levelname)s\\t%(message)s\")\n  if not os.path.exists(model_dir):\n    os.makedirs(model_dir)\n  h = logging.FileHandler(os.path.join(model_dir, filename))\n  h.setLevel(logging.DEBUG)\n  h.setFormatter(formatter)\n  logger.addHandler(h)\n  return logger\n\n\nclass HParams():\n  def __init__(self, **kwargs):\n    for k, v in kwargs.items():\n      if type(v) == dict:\n        v = HParams(**v)\n      self[k] = v\n\n  def keys(self):\n    return self.__dict__.keys()\n\n  def items(self):\n    return self.__dict__.items()\n\n  def values(self):\n    return self.__dict__.values()\n\n  def __len__(self):\n    return len(self.__dict__)\n\n  def __getitem__(self, key):\n    return getattr(self, key)\n\n  def __setitem__(self, key, value):\n    return setattr(self, key, value)\n\n  def __contains__(self, key):\n    return key in self.__dict__\n\n  def __repr__(self):\n    return self.__dict__.__repr__()\n\n"
        },
        {
          "name": "vdecoder",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}