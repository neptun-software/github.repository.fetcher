{
  "metadata": {
    "timestamp": 1736559950314,
    "page": 726,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thuml/Transfer-Learning-Library",
      "stars": 3524,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.837890625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndocs/build/*\ndocs/pytorch_sphinx_theme/*\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n.idea/\n\nexp/*\ntrash/*\nexamples/domain_adaptation/digits/logs/*\nexamples/domain_adaptation/digits/data/*\n+.DS_Store\n*/.DS_Store\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.505859375,
          "content": "## Contributing to Transfer-Learning-Library\n\nAll kinds of contributions are welcome, including but not limited to the following.\n\n- Fix typo or bugs\n- Add documentation\n- Add new features and components\n\n### Workflow\n\n1. fork and pull the latest Transfer-Learning-Library repository\n2. checkout a new branch (do not use master branch for PRs)\n3. commit your changes\n4. create a PR\n\n```{note}\nIf you plan to add some new features that involve large changes, it is encouraged to open an issue for discussion first.\n```\n"
        },
        {
          "name": "DATASETS.md",
          "type": "blob",
          "size": 3.6376953125,
          "content": "## Notice (2023-08-01)\n\n### Transfer-Learning-Library Dataset Link Failure Issue\nDear users,\n\nWe sincerely apologize to inform you that the dataset links of Transfer-Learning-Library have become invalid due to a cloud storage failure, resulting in many users being unable to download the datasets properly recently.\n\nWe are working diligently to resolve this issue and plan to restore the links as soon as possible. Currently, we have already restored some dataset links, and they have been updated on the master branch. You can obtain the latest version by running \"git pull.\"\n\nAs the version on PyPI has not been updated yet, please temporarily uninstall the old version by running \"pip uninstall tllib\" before installing the new one.\n\nIn the future, we are planning to store the datasets on both Baidu Cloud and Google Cloud to provide more stable download links.\n\nAdditionally, a small portion of datasets that were backed up on our local server have also been lost due to a hard disk failure. For these datasets, we need to re-download and verify them, which might take longer to restore the links.\n\nWithin this week, we will release the updated dataset and confirm the list of datasets without backup. For datasets without backup, if you have previously downloaded them locally, please contact us via email. Your support is highly appreciated.\n\nOnce again, we apologize for any inconvenience caused and thank you for your understanding.\n\nSincerely,\n\nThe Transfer-Learning-Library Team\n\n## Update (2023-08-09)\n\nMost of the dataset links have been restored at present. The confirmed datasets without backups are as follows:\n\n- Classification\n  - COCO70\n  - EuroSAT\n  - PACS\n  - PatchCamelyon\n  - [Partial Domain Adaptation]\n    - CaltechImageNet\n\n- Keypoint Detection\n  - Hand3DStudio\n  - LSP\n  - SURREAL\n\n- Object Detection\n  - Comic\n\n- Re-Identification\n  - PersonX\n  - UnrealPerson\n\n**For these datasets, if you had previously downloaded them locally, please contact us via email. We greatly appreciate everyone's support.**\n\n## Notice (2023-08-01)\n\n### Transfer-Learning-Library数据集链接失效问题\n\n各位使用者，我们很抱歉通知大家，最近Transfer-Learning-Library的数据集链接因为云盘故障而失效，导致很多使用者无法正常下载数据集。\n\n我们正在全力以赴解决这一问题，并计划在最短的时间内恢复链接。目前我们已经恢复了部分数据集链接，更新在master分支上，您可以通过git pull来获取最新的版本。\n\n由于pypi上的版本还未更新，暂时请首先通过pip uninstall tllib卸载旧版本。\n\n日后我们计划将数据集存储在百度云和谷歌云上，提供更加稳定的下载链接。\n\n另外，小部分数据集在我们本地服务器上的备份也由于硬盘故障而丢失，对于这些数据集我们需要重新下载并验证，可能需要更长的时间来恢复链接。\n\n我们会在本周内发布已经更新的数据集和确认无备份的数据集列表，对于无备份的数据集，如果您之前有下载到本地，请通过邮件联系我们，非常感谢大家的支持。\n\n再次向您表达我们的歉意，并感谢您的理解。\n\nTransfer-Learning-Library团队\n\n## Update (2023-08-09)\n\n目前大部分数据集的链接已经恢复，确认无备份的数据集如下：\n\n- Classification\n  - COCO70\n  - EuroSAT\n  - PACS\n  - PatchCamelyon\n  - [Partial Domain Adaptation]\n    - CaltechImageNet\n\n- Keypoint Detection\n  - Hand3DStudio\n  - LSP\n  - SURREAL\n\n- Object Detection\n  - Comic\n\n- Re-Identification\n  - PersonX\n  - UnrealPerson\n\n**对于这些数据集，如果您之前有下载到本地，请通过邮件联系我们，非常感谢大家的支持。**\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "Copyright (c) 2018 The Python Packaging Authority\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.46484375,
          "content": "<div align='center' margin-bottom:40px> <img src=\"logo.png\" width=200/> </div>\n\n# Transfer Learning Library\n\n- [Introduction](#introduction)\n- [Updates](#updates)\n- [Supported Methods](#supported-methods)\n- [Installation](#installation)\n- [Documentation](#documentation)\n- [Contact](#contact)\n- [Citation](#citation)\n\n## Update (2024-03-15)\n\nWe upload an offline version of documentation [here](/docs/html.zip). You can download and unzip it to view the documentation.\n\n## Notice (2023-08-09)\n\nA note on broken dataset links can be found here: [DATASETS.md](DATASETS.md).\n\n## Introduction\n*TLlib* is an open-source and well-documented library for Transfer Learning. It is based on pure PyTorch with high performance and friendly API. Our code is pythonic, and the design is consistent with torchvision. You can easily develop new algorithms, or readily apply existing algorithms.\n\nOur _API_ is divided by methods, which include: \n- domain alignment methods (tllib.aligment)\n- domain translation methods (tllib.translation)\n- self-training methods (tllib.self_training)\n- regularization methods (tllib.regularization)\n- data reweighting/resampling methods (tllib.reweight)\n- model ranking/selection methods (tllib.ranking)\n- normalization-based methods (tllib.normalization)\n\n<img src=\"Tllib.png\">\n\nWe provide many example codes in the directory _examples_, which is divided by learning setups. Currently, the supported learning setups include:\n- DA (domain adaptation)\n- TA (task adaptation, also known as finetune)\n- OOD (out-of-distribution generalization, also known as DG / domain generalization)\n- SSL (semi-supervised learning)\n- Model Selection \n\nOur supported tasks include: classification, regression, object detection, segmentation, keypoint detection, and so on.\n\n## Updates \n\n### 2022.9\n\nWe support installing *TLlib* via `pip`, which is experimental currently.\n\n```shell\npip install -i https://test.pypi.org/simple/ tllib==0.4\n```\n\n### 2022.8\nWe release `v0.4` of *TLlib*. Previous versions of *TLlib* can be found [here](https://github.com/thuml/Transfer-Learning-Library/releases). In `v0.4`, we add implementations of \nthe following methods:\n- Domain Adaptation for Object Detection [[Code]](/examples/domain_adaptation/object_detection) [[API]](/tllib/alignment/d_adapt)\n- Pre-trained Model Selection [[Code]](/examples/model_selection) [[API]](/tllib/ranking)\n- Semi-supervised Learning for Classification [[Code]](/examples/semi_supervised_learning/image_classification/) [[API]](/tllib/self_training)\n\nBesides, we maintain a collection of **_awesome papers in Transfer Learning_** in another repo [_A Roadmap for Transfer Learning_](https://github.com/thuml/A-Roadmap-for-Transfer-Learning).\n\n### 2022.2\nWe adjusted our API following our survey [Transferablity in Deep Learning](https://arxiv.org/abs/2201.05867).\n\n## Supported Methods\nThe currently supported algorithms include:\n\n##### Domain Adaptation for Classification [[Code]](/examples/domain_adaptation/image_classification)\n- **DANN** - Unsupervised Domain Adaptation by Backpropagation [[ICML 2015]](http://proceedings.mlr.press/v37/ganin15.pdf) [[Code]](/examples/domain_adaptation/image_classification/dann.py)\n- **DAN** - Learning Transferable Features with Deep Adaptation Networks [[ICML 2015]](http://ise.thss.tsinghua.edu.cn/~mlong/doc/deep-adaptation-networks-icml15.pdf) [[Code]](/examples/domain_adaptation/image_classification/dan.py)\n- **JAN** - Deep Transfer Learning with Joint Adaptation Networks [[ICML 2017]](http://ise.thss.tsinghua.edu.cn/~mlong/doc/joint-adaptation-networks-icml17.pdf) [[Code]](/examples/domain_adaptation/image_classification/jan.py)\n- **ADDA** - Adversarial Discriminative Domain Adaptation [[CVPR 2017]](http://openaccess.thecvf.com/content_cvpr_2017/papers/Tzeng_Adversarial_Discriminative_Domain_CVPR_2017_paper.pdf) [[Code]](/examples/domain_adaptation/image_classification/adda.py)\n- **CDAN** - Conditional Adversarial Domain Adaptation [[NIPS 2018]](http://papers.nips.cc/paper/7436-conditional-adversarial-domain-adaptation) [[Code]](/examples/domain_adaptation/image_classification/cdan.py) \n- **MCD** - Maximum Classifier Discrepancy for Unsupervised Domain Adaptation [[CVPR 2018]](http://openaccess.thecvf.com/content_cvpr_2018/papers/Saito_Maximum_Classifier_Discrepancy_CVPR_2018_paper.pdf) [[Code]](/examples/domain_adaptation/image_classification/mcd.py)\n- **MDD** - Bridging Theory and Algorithm for Domain Adaptation [[ICML 2019]](http://proceedings.mlr.press/v97/zhang19i/zhang19i.pdf) [[Code]](/examples/domain_adaptation/image_classification/mdd.py) \n- **BSP** - Transferability vs. Discriminability: Batch Spectral Penalization for Adversarial Domain Adaptation [[ICML 2019]](http://proceedings.mlr.press/v97/chen19i/chen19i.pdf) [[Code]](/examples/domain_adaptation/image_classification/bsp.py) \n- **MCC** - Minimum Class Confusion for Versatile Domain Adaptation [[ECCV 2020]](http://www.ecva.net/papers/eccv_2020/papers_ECCV/papers/123660460.pdf) [[Code]](/examples/domain_adaptation/image_classification/mcc.py)\n\n##### Domain Adaptation for Object Detection [[Code]](/examples/domain_adaptation/object_detection)\n- **CycleGAN** - Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks [[ICCV 2017]](https://openaccess.thecvf.com/content_ICCV_2017/papers/Zhu_Unpaired_Image-To-Image_Translation_ICCV_2017_paper.pdf) [[Code]](/examples/domain_adaptation/object_detection/cycle_gan.py)\n- **D-adapt** - Decoupled Adaptation for Cross-Domain Object Detection [[ICLR 2022]](https://openreview.net/pdf?id=VNqaB1g9393) [[Code]](/examples/domain_adaptation/object_detection/d_adapt)\n\n##### Domain Adaptation for Semantic Segmentation [[Code]](/examples/domain_adaptation/semantic_segmentation/)\n- **CycleGAN** - Unpaired Image-to-Image Translation using Cycle-Consistent Adversarial Networks [[ICCV 2017]](https://openaccess.thecvf.com/content_ICCV_2017/papers/Zhu_Unpaired_Image-To-Image_Translation_ICCV_2017_paper.pdf) [[Code]](/examples/domain_adaptation/semantic_segmentation/cycle_gan.py)\n- **CyCADA** - Cycle-Consistent Adversarial Domain Adaptation [[ICML 2018]](http://proceedings.mlr.press/v80/hoffman18a.html) [[Code]](/examples/domain_adaptation/semantic_segmentation/cycada.py)\n- **ADVENT** - Adversarial Entropy Minimization for Domain Adaptation in Semantic Segmentation [[CVPR 2019]](http://openaccess.thecvf.com/content_CVPR_2019/papers/Vu_ADVENT_Adversarial_Entropy_Minimization_for_Domain_Adaptation_in_Semantic_Segmentation_CVPR_2019_paper.pdf) [[Code]](/examples/domain_adaptation/semantic_segmentation/advent.py)\n- **FDA** - Fourier Domain Adaptation for Semantic Segmentation [[CVPR 2020]](https://arxiv.org/abs/2004.05498) [[Code]](/examples/domain_adaptation/semantic_segmentation/fda.py)\n\n##### Domain Adaptation for Keypoint Detection [[Code]](/examples/domain_adaptation/keypoint_detection)\n- **RegDA** - Regressive Domain Adaptation for Unsupervised Keypoint Detection [[CVPR 2021]](http://ise.thss.tsinghua.edu.cn/~mlong/doc/regressive-domain-adaptation-cvpr21.pdf) [[Code]](/examples/domain_adaptation/keypoint_detection)\n\n##### Domain Adaptation for Person Re-identification [[Code]](/examples/domain_adaptation/re_identification/)\n- **IBN-Net** - Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net [[ECCV 2018]](https://openaccess.thecvf.com/content_ECCV_2018/papers/Xingang_Pan_Two_at_Once_ECCV_2018_paper.pdf)\n- **MMT** - Mutual Mean-Teaching: Pseudo Label Refinery for Unsupervised Domain Adaptation on Person Re-identification [[ICLR 2020]](https://arxiv.org/abs/2001.01526) [[Code]](/examples/domain_adaptation/re_identification/mmt.py)\n- **SPGAN** - Similarity Preserving Generative Adversarial Network [[CVPR 2018]](https://arxiv.org/pdf/1811.10551.pdf) [[Code]](/examples/domain_adaptation/re_identification/spgan.py)\n\n##### Partial Domain Adaptation [[Code]](/examples/domain_adaptation/partial_domain_adaptation)\n- **IWAN** - Importance Weighted Adversarial Nets for Partial Domain Adaptation[[CVPR 2018]](https://arxiv.org/abs/1803.09210) [[Code]](/examples/domain_adaptation/partial_domain_adaptation/iwan.py)\n- **AFN** - Larger Norm More Transferable: An Adaptive Feature Norm Approach for\nUnsupervised Domain Adaptation [[ICCV 2019]](https://arxiv.org/pdf/1811.07456v2.pdf) [[Code]](/examples/domain_adaptation/partial_domain_adaptation/afn.py)\n\n##### Open-set Domain Adaptation [[Code]](/examples/domain_adaptation/openset_domain_adaptation)\n- **OSBP** - Open Set Domain Adaptation by Backpropagation [[ECCV 2018]](https://arxiv.org/abs/1804.10427) [[Code]](/examples/domain_adaptation/openset_domain_adaptation/osbp.py)\n\n##### Domain Generalization for Classification [[Code]](/examples/domain_generalization/image_classification/)\n- **IBN-Net** - Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net [[ECCV 2018]](https://openaccess.thecvf.com/content_ECCV_2018/papers/Xingang_Pan_Two_at_Once_ECCV_2018_paper.pdf)\n- **MixStyle** - Domain Generalization with MixStyle [[ICLR 2021]](https://arxiv.org/abs/2104.02008) [[Code]](/examples/domain_generalization/image_classification/mixstyle.py)\n- **MLDG** - Learning to Generalize: Meta-Learning for Domain Generalization [[AAAI 2018]](https://arxiv.org/pdf/1710.03463.pdf) [[Code]](/examples/domain_generalization/image_classification/mldg.py)\n- **IRM** - Invariant Risk Minimization [[ArXiv]](https://arxiv.org/abs/1907.02893) [[Code]](/examples/domain_generalization/image_classification/irm.py)\n- **VREx** - Out-of-Distribution Generalization via Risk Extrapolation [[ICML 2021]](https://arxiv.org/abs/2003.00688) [[Code]](/examples/domain_generalization/image_classification/vrex.py)\n- **GroupDRO** - Distributionally Robust Neural Networks for Group Shifts: On the Importance of Regularization for Worst-Case Generalization [[ArXiv]](https://arxiv.org/abs/1911.08731) [[Code]](/examples/domain_generalization/image_classification/groupdro.py)\n- **Deep CORAL** - Correlation Alignment for Deep Domain Adaptation [[ECCV 2016]](https://arxiv.org/abs/1607.01719) [[Code]](/examples/domain_generalization/image_classification/coral.py)\n\n##### Domain Generalization for Person Re-identification [[Code]](/examples/domain_generalization/re_identification/)\n- **IBN-Net** - Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net [[ECCV 2018]](https://openaccess.thecvf.com/content_ECCV_2018/papers/Xingang_Pan_Two_at_Once_ECCV_2018_paper.pdf)\n- **MixStyle** - Domain Generalization with MixStyle [[ICLR 2021]](https://arxiv.org/abs/2104.02008) [[Code]](/examples/domain_generalization/re_identification/mixstyle.py)\n\n##### Task Adaptation (Fine-Tuning) for Image Classification [[Code]](/examples/task_adaptation/image_classification/)\n- **L2-SP** - Explicit inductive bias for transfer learning with convolutional networks [[ICML 2018]]((https://arxiv.org/abs/1802.01483)) [[Code]](/examples/task_adaptation/image_classification/delta.py)\n- **BSS** - Catastrophic Forgetting Meets Negative Transfer: Batch Spectral Shrinkage for Safe Transfer Learning [[NIPS 2019]](https://proceedings.neurips.cc/paper/2019/file/c6bff625bdb0393992c9d4db0c6bbe45-Paper.pdf) [[Code]](/examples/task_adaptation/image_classification/bss.py)\n- **DELTA** - DEep Learning Transfer using Fea- ture Map with Attention for convolutional networks [[ICLR 2019]](https://openreview.net/pdf?id=rkgbwsAcYm) [[Code]](/examples/task_adaptation/image_classification/delta.py)\n- **Co-Tuning** - Co-Tuning for Transfer Learning [[NIPS 2020]](http://ise.thss.tsinghua.edu.cn/~mlong/doc/co-tuning-for-transfer-learning-nips20.pdf) [[Code]](/examples/task_adaptation/image_classification/co_tuning.py)\n- **StochNorm** - Stochastic Normalization [[NIPS 2020]](https://papers.nips.cc/paper/2020/file/bc573864331a9e42e4511de6f678aa83-Paper.pdf) [[Code]](/examples/task_adaptation/image_classification/stochnorm.py)\n- **LWF** - Learning Without Forgetting [[ECCV 2016]](https://arxiv.org/abs/1606.09282) [[Code]](/examples/task_adaptation/image_classification/lwf.py)\n- **Bi-Tuning** - Bi-tuning of Pre-trained Representations [[ArXiv]](https://arxiv.org/abs/2011.06182?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+arxiv%2FQSXk+%28ExcitingAds%21+cs+updates+on+arXiv.org%29) [[Code]](/examples/task_adaptation/image_classification/bi_tuning.py)\n\n##### Pre-trained Model Selection [[Code]](/examples/model_selection)\n\n- **H-Score** - An Information-theoretic Approach to Transferability in Task Transfer Learning [[ICIP 2019]](http://yangli-feasibility.com/home/media/icip-19.pdf) [[Code]](/examples/model_selection/hscore.py)\n- **NCE** - Negative Conditional Entropy in `Transferability and Hardness of Supervised Classification Tasks [[ICCV 2019]](https://arxiv.org/pdf/1908.08142v1.pdf) [[Code]](/examples/model_selection/nce.py)\n- **LEEP** - LEEP: A New Measure to Evaluate Transferability of Learned Representations [[ICML 2020]](http://proceedings.mlr.press/v119/nguyen20b/nguyen20b.pdf) [[Code]](/examples/model_selection/leep.py)\n- **LogME** - Log Maximum Evidence in `LogME: Practical Assessment of Pre-trained Models for Transfer Learning [[ICML 2021]](https://arxiv.org/pdf/2102.11005.pdf) [[Code]](/examples/model_selection/logme.py)\n\n##### Semi-Supervised Learning for Classification [[Code]](/examples/semi_supervised_learning/image_classification/)\n- **Pseudo Label** - Pseudo-Label : The Simple and Efficient Semi-Supervised Learning Method for Deep Neural Networks [[ICML 2013]](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.664.3543&rep=rep1&type=pdf) [[Code]](/examples/semi_supervised_learning/image_classification/pseudo_label.py)\n- **Pi Model** - Temporal Ensembling for Semi-Supervised Learning [[ICLR 2017]](https://arxiv.org/abs/1610.02242) [[Code]](/examples/semi_supervised_learning/image_classification/pi_model.py)\n- **Mean Teacher** - Mean teachers are better role models: Weight-averaged consistency targets improve semi-supervised deep learning results [[NIPS 2017]](https://arxiv.org/abs/1703.01780) [[Code]](/examples/semi_supervised_learning/image_classification/mean_teacher.py)\n- **Noisy Student** - Self-Training With Noisy Student Improves ImageNet Classification [[CVPR 2020]](https://openaccess.thecvf.com/content_CVPR_2020/papers/Xie_Self-Training_With_Noisy_Student_Improves_ImageNet_Classification_CVPR_2020_paper.pdf) [[Code]](/examples/semi_supervised_learning/image_classification/noisy_student.py)\n- **UDA** - Unsupervised Data Augmentation for Consistency Training [[NIPS 2020]](https://arxiv.org/pdf/1904.12848v4.pdf) [[Code]](/examples/semi_supervised_learning/image_classification/uda.py)\n- **FixMatch** - Simplifying Semi-Supervised Learning with Consistency and Confidence [[NIPS 2020]](https://arxiv.org/abs/2001.07685) [[Code]](/examples/semi_supervised_learning/image_classification/fixmatch.py)\n- **Self-Tuning** - Self-Tuning for Data-Efficient Deep Learning [[ICML 2021]](http://ise.thss.tsinghua.edu.cn/~mlong/doc/Self-Tuning-for-Data-Efficient-Deep-Learning-icml21.pdf) [[Code]](/examples/semi_supervised_learning/image_classification/self_tuning.py)\n- **FlexMatch** - FlexMatch: Boosting Semi-Supervised Learning with Curriculum Pseudo Labeling [[NIPS 2021]](https://arxiv.org/abs/2110.08263) [[Code]](/examples/semi_supervised_learning/image_classification/flexmatch.py)\n- **DebiasMatch** - Debiased Learning From Naturally Imbalanced Pseudo-Labels [[CVPR 2022]](https://openaccess.thecvf.com/content/CVPR2022/papers/Wang_Debiased_Learning_From_Naturally_Imbalanced_Pseudo-Labels_CVPR_2022_paper.pdf) [[Code]](/examples/semi_supervised_learning/image_classification/debiasmatch.py)\n- **DST** - Debiased Self-Training for Semi-Supervised Learning [[NIPS 2022 Oral]](https://arxiv.org/abs/2202.07136) [[Code]](/examples/semi_supervised_learning/image_classification/dst.py)\n\n## Installation\n\n##### Install from Source Code\n\n- Please git clone the library first. Then, run the following commands to install `tllib` and all the dependency.\n```shell\npython setup.py install\npip install -r requirements.txt\n```\n##### Install via `pip`\n\n- Installing via `pip` is currently experimental.\n\n```shell\npip install -i https://test.pypi.org/simple/ tllib==0.4\n```\n\n\n## Documentation\nYou can find the API documentation on the website: [Documentation](http://tl.thuml.ai/).\n\n## Usage\nYou can find examples in the directory `examples`. A typical usage is \n```shell script\n# Train a DANN on Office-31 Amazon -> Webcam task using ResNet 50.\n# Assume you have put the datasets under the path `data/office-31`, \n# or you are glad to download the datasets automatically from the Internet to this path\npython dann.py data/office31 -d Office31 -s A -t W -a resnet50  --epochs 20\n```\n\n## Contributing\nWe appreciate all contributions. If you are planning to contribute back bug-fixes, please do so without any further discussion. If you plan to contribute new features, utility functions or extensions, please first open an issue and discuss the feature with us. \n\n## Disclaimer on Datasets\n\nThis is a utility library that downloads and prepares public datasets. We do not host or distribute these datasets, vouch for their quality or fairness, or claim that you have licenses to use the dataset. It is your responsibility to determine whether you have permission to use the dataset under the dataset's license.\n\nIf you're a dataset owner and wish to update any part of it (description, citation, etc.), or do not want your dataset to be included in this library, please get in touch through a GitHub issue. Thanks for your contribution to the ML community!\n\n\n## Contact\nIf you have any problem with our code or have some suggestions, including the future feature, feel free to contact \n- Baixu Chen (cbx_99_hasta@outlook.com)\n- Junguang Jiang (JiangJunguang1123@outlook.com)\n- Mingsheng Long (longmingsheng@gmail.com)\n\nor describe it in Issues.\n\nFor Q&A in Chinese, you can choose to ask questions here before sending an email. [迁移学习算法库答疑专区](https://zhuanlan.zhihu.com/p/248104070)\n\n## Citation\n\nIf you use this toolbox or benchmark in your research, please cite this project. \n\n```latex\n@misc{jiang2022transferability,\n      title={Transferability in Deep Learning: A Survey}, \n      author={Junguang Jiang and Yang Shu and Jianmin Wang and Mingsheng Long},\n      year={2022},\n      eprint={2201.05867},\n      archivePrefix={arXiv},\n      primaryClass={cs.LG}\n}\n\n@misc{tllib,\n    author = {Junguang Jiang, Baixu Chen, Bo Fu, Mingsheng Long},\n    title = {Transfer-Learning-library},\n    year = {2020},\n    publisher = {GitHub},\n    journal = {GitHub repository},\n    howpublished = {\\url{https://github.com/thuml/Transfer-Learning-Library}},\n}\n```\n\n## Acknowledgment\n\nWe would like to thank School of Software, Tsinghua University and The National Engineering Laboratory for Big Data Software for providing such an excellent ML research platform.\n\n"
        },
        {
          "name": "Tllib.png",
          "type": "blob",
          "size": 388.1865234375,
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 24.91015625,
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1064453125,
          "content": "torch>=1.7.0\ntorchvision>=0.5.0\nnumpy\nprettytable\ntqdm\nscikit-learn\nwebcolors\nmatplotlib\nopencv-python\nnumba\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.26953125,
          "content": "from setuptools import setup, find_packages\nimport re\nfrom os import path\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the version string\nwith open(path.join(here, 'tllib', '__init__.py')) as f:\n    version = re.search(r'__version__ = \\'(.*?)\\'', f.read()).group(1)\n\n# Get all runtime requirements\nREQUIRES = []\nwith open('requirements.txt') as f:\n    for line in f:\n        line, _, _ = line.partition('#')\n        line = line.strip()\n        REQUIRES.append(line)\n\nif __name__ == '__main__':\n    setup(\n        name=\"tllib\", # Replace with your own username\n        version=version,\n        author=\"THUML\",\n        author_email=\"JiangJunguang1123@outlook.com\",\n        keywords=\"domain adaptation, task adaptation, domain generalization, \"\n                 \"transfer learning, deep learning, pytorch\",\n        description=\"A Transfer Learning Library for Domain Adaptation, Task Adaptation, and Domain Generalization\",\n        long_description=open('README.md', encoding='utf8').read(),\n        long_description_content_type=\"text/markdown\",\n        url=\"https://github.com/thuml/Transfer-Learning-Library\",\n        packages=find_packages(exclude=['docs', 'examples']),\n        classifiers=[\n            # How mature is this project? Common values are\n            #   3 - Alpha\n            #   4 - Beta\n            #   5 - Production/Stable\n            'Development Status :: 3 - Alpha',\n            # Indicate who your project is intended for\n            'Intended Audience :: Science/Research',\n            'Topic :: Scientific/Engineering :: Artificial Intelligence',\n            'Topic :: Software Development :: Libraries :: Python Modules',\n            # Pick your license as you wish (should match \"license\" above)\n            'License :: OSI Approved :: MIT License',\n            # Specify the Python versions you support here. In particular, ensure\n            # that you indicate whether you support Python 2, Python 3 or both.\n            'Programming Language :: Python :: 3.6',\n            'Programming Language :: Python :: 3.7',\n            'Programming Language :: Python :: 3.8',\n        ],\n        python_requires='>=3.6',\n        install_requires=REQUIRES,\n        extras_require={\n            'dev': [\n                'Sphinx',\n                'sphinx_rtd_theme',\n            ]\n        },\n    )\n"
        },
        {
          "name": "tllib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}