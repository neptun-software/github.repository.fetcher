{
  "metadata": {
    "timestamp": 1736560003260,
    "page": 806,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kennethreitz/maya",
      "stars": 3414,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1142578125,
          "content": "[run]\nbranch = True\nsource =\n    maya\n\n[paths]\nsource =\n   src\n   .tox/*/site-packages\n\n[report]\nshow_missing = True\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0654296875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nPipfile.lock\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\n.venv/\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# PyCharm\n.idea/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7578125,
          "content": "repos:\n  - repo: https://github.com/ambv/black\n    rev: 19.3b0\n    hooks:\n      - id: black\n        language_version: python3.7\n        # override until resolved: https://github.com/ambv/black/issues/402\n        files: \\.pyi?$\n        types: []\n\n  - repo: https://gitlab.com/pycqa/flake8\n    rev: 3.7.7\n    hooks:\n      - id: flake8\n        language_version: python3.7\n\n  #- repo: https://github.com/asottile/seed-isort-config\n    #rev: v1.9.1\n    #hooks:\n      #- id: seed-isort-config\n\n  #- repo: https://github.com/pre-commit/mirrors-isort\n    #rev: v4.3.20\n    #hooks:\n      #- id: isort\n        #language_version: python3.7\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.2.3\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n"
        },
        {
          "name": "DEMO.ipynb",
          "type": "blob",
          "size": 9.5458984375,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"# Maya: Datetimes for Humansâ„¢\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Datetimes are very frustrating to work with in Python, especially when dealing with different locales on different systems. This library exists to make the simple things much easier, while admitting that time is an illusion (timezones doubly so).\\n\",\n    \"\\n\",\n    \"Datetimes should be interacted with via an API written for humans.\\n\",\n    \"\\n\",\n    \"Maya is mostly built around the headaches and use-cases around parsing datetime data from websites.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Basic Usage of Maya\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 33,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import maya\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 34,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<MayaDT epoch=1544809514.491009>\"\n      ]\n     },\n     \"execution_count\": 34,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"maya.now()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 35,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<MayaDT epoch=1544895914.872356>\"\n      ]\n     },\n     \"execution_count\": 35,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tomorrow = maya.when('tomorrow')\\n\",\n    \"tomorrow\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 36,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'tomorrow'\"\n      ]\n     },\n     \"execution_count\": 36,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tomorrow.slang_date()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 37,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'in 23 hours'\"\n      ]\n     },\n     \"execution_count\": 37,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tomorrow.slang_time()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 38,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'2018-12-15T17:45:14.872356Z'\"\n      ]\n     },\n     \"execution_count\": 38,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Also: MayaDT.from_iso8601(...)\\n\",\n    \"tomorrow.iso8601()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 39,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'Sat, 15 Dec 2018 17:45:14 GMT'\"\n      ]\n     },\n     \"execution_count\": 39,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Also: MayaDT.from_rfc2822(...)\\n\",\n    \"tomorrow.rfc2822()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 40,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'2018-12-15T17:45:14.8Z'\"\n      ]\n     },\n     \"execution_count\": 40,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Also: MayaDT.from_rfc3339(...)\\n\",\n    \"tomorrow.rfc3339()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 41,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"datetime.datetime(2018, 12, 15, 17, 45, 14, 872356, tzinfo=<UTC>)\"\n      ]\n     },\n     \"execution_count\": 41,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"tomorrow.datetime()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 42,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"datetime.datetime(2016, 12, 16, 13, 23, 45, 423992)\"\n      ]\n     },\n     \"execution_count\": 42,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Automatically parse datetime strings and generate naive datetimes.\\n\",\n    \"scraped = '2016-12-16 18:23:45.423992+00:00'\\n\",\n    \"maya.parse(scraped).datetime(to_timezone='US/Eastern', naive=True)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 43,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"rand_day = maya.when('2011-02-07', timezone='US/Eastern')\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 44,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<MayaDT epoch=1544809518.275386>\"\n      ]\n     },\n     \"execution_count\": 44,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Maya speaks Python.\\n\",\n    \"from datetime import datetime\\n\",\n    \"\\n\",\n    \"maya.MayaDT.from_datetime(datetime.utcnow())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 45,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<MayaDT epoch=1544809518.0>\"\n      ]\n     },\n     \"execution_count\": 45,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"import time\\n\",\n    \"\\n\",\n    \"maya.MayaDT.from_struct(time.gmtime())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 46,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<MayaDT epoch=1544809520.426774>\"\n      ]\n     },\n     \"execution_count\": 46,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"maya.MayaDT(time.time())\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 47,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"7\"\n      ]\n     },\n     \"execution_count\": 47,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"rand_day.day\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 48,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"17\"\n      ]\n     },\n     \"execution_count\": 48,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"rand_day.add(days=10).day\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 49,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'UTC'\"\n      ]\n     },\n     \"execution_count\": 49,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Always.\\n\",\n    \"rand_day.timezone\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 50,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<generator object intervals at 0x10c54a308>\"\n      ]\n     },\n     \"execution_count\": 50,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# Range of hours in a day:\\n\",\n    \"maya.intervals(start=maya.now(), end=maya.now().add(days=1), interval=60*60)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 51,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"'Mon, 21 Feb 1994 03:00:00 GMT'\"\n      ]\n     },\n     \"execution_count\": 51,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"# snap modifiers\\n\",\n    \"dt = maya.when('Mon, 21 Feb 1994 21:21:42 GMT')\\n\",\n    \"dt.snap('@d+3h').rfc2822()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Advanced Usage of Maya\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"In addition to timestamps, Maya also includes a wonderfully powerful MayaInterval class, which represents a range of time (e.g. an event). With this class, you can perform a multitude of advanced calendar calculations with finesse and ease.\\n\",\n    \"\\n\",\n    \"For example:\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 52,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"from maya import MayaInterval\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 53,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Create an event that is one hour long, starting now.\\n\",\n    \"event_start = maya.now()\\n\",\n    \"event_end = event_start.add(hours=1)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 54,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"data\": {\n      \"text/plain\": [\n       \"<MayaInterval start=<MayaDT epoch=1544809524.395196> end=<MayaDT epoch=1544813124.395196>>\"\n      ]\n     },\n     \"execution_count\": 54,\n     \"metadata\": {},\n     \"output_type\": \"execute_result\"\n    }\n   ],\n   \"source\": [\n    \"MayaInterval(start=event_start, end=event_end)\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"From here, there are a number of methods available to you, which you can use to compare this event to another event.\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Do your own experiments here...\\n\",\n    \"\\n\",\n    \"Try `maya` youself by adding your code below and running your own experiments ðŸ‘‡\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"import maya\\n\",\n    \"\\n\",\n    \"# your code here\\n\",\n    \"maya.\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.6.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Kenneth Reitz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.6435546875,
          "content": "# Additional package data\n\n# Metadata\ninclude LICENSE *.md *.rst *.toml *.yml *.yaml\ngraft .github\n\n# Jupyter Notebooks\ninclude *.ipynb\n\n# Stubs\nrecursive-include src *.pyi\n\n# Tests\ninclude tox.ini .coveragerc conftest.py\nrecursive-include tests *.py\n\n# Documentation\ninclude docs/Makefile docs/docutils.conf\nrecursive-include docs *.bat\nrecursive-include docs *.png\nrecursive-include docs *.svg\nrecursive-include docs *.py\nrecursive-include docs *.rst\nrecursive-include docs *.ico\nprune docs/_build\n\n# Just to keep check-manifest happy; on releases those files are gone.\n# Last rule wins!\nexclude changelog.d/*.rst\ninclude changelog.d/towncrier_template.rst\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.4736328125,
          "content": "Maya: Datetimes for Humansâ„¢\n===========================\n\n.. image:: https://img.shields.io/pypi/v/maya.svg\n    :target: https://pypi.python.org/pypi/maya\n\n.. image:: https://github.com/timofurrer/maya/workflows/Continuous%20Integration%20and%20Deployment/badge.svg\n    :target: https://github.com/timofurrer/maya/actions\n\n\nDatetimes are very frustrating to work with in Python, especially when dealing\nwith different locales on different systems. This library exists to make the\nsimple things **much** easier, while admitting that time is an illusion\n(timezones doubly so).\n\nDatetimes should be interacted with via an API written for humans.\n\nMaya is mostly built around the headaches and use-cases around parsing datetime data from websites.\n\n\nâ˜¤ Basic Usage of Maya\n---------------------\n\nBehold, datetimes for humans!\n\n.. code-block:: pycon\n\n    >>> now = maya.now()\n    <MayaDT epoch=1481850660.9>\n\n    >>> tomorrow = maya.when('tomorrow')\n    <MayaDT epoch=1481919067.23>\n\n    >>> tomorrow.slang_date()\n    'tomorrow'\n\n    >>> tomorrow.slang_time()\n    '23 hours from now'\n\n    # Also: MayaDT.from_iso8601(...)\n    >>> tomorrow.iso8601()\n    '2017-02-10T22:17:01.445418Z'\n\n    # Also: MayaDT.from_rfc2822(...)\n    >>> tomorrow.rfc2822()\n    'Fri, 10 Feb 2017 22:17:01 GMT'\n\n    # Also: MayaDT.from_rfc3339(...)\n    >>> tomorrow.rfc3339()\n    '2017-02-10T22:17:01.44Z'\n\n    >>> tomorrow.datetime()\n    datetime.datetime(2016, 12, 16, 15, 11, 30, 263350, tzinfo=<UTC>)\n\n    # Automatically parse datetime strings and generate naive datetimes.\n    >>> scraped = '2016-12-16 18:23:45.423992+00:00'\n    >>> maya.parse(scraped).datetime(to_timezone='US/Eastern', naive=True)\n    datetime.datetime(2016, 12, 16, 13, 23, 45, 423992)\n\n    >>> rand_day = maya.when('2011-02-07', timezone='US/Eastern')\n    <MayaDT epoch=1297036800.0>\n\n    # Maya speaks Python.\n    >>> m = maya.MayaDT.from_datetime(datetime.utcnow())\n    >>> print(m)\n    Wed, 20 Sep 2017 17:24:32 GMT\n\n    >>> m = maya.MayaDT.from_struct(time.gmtime())\n    >>> print(m)\n    Wed, 20 Sep 2017 17:24:32 GMT\n\n    >>> m = maya.MayaDT(time.time())\n    >>> print(m)\n    Wed, 20 Sep 2017 17:24:32 GMT\n\n    >>> rand_day.day\n    7\n\n    >>> rand_day.add(days=10).day\n    17\n\n    # Always.\n    >>> rand_day.timezone\n    UTC\n\n    # Range of hours in a day:\n    >>> maya.intervals(start=maya.now(), end=maya.now().add(days=1), interval=60*60)\n    <generator object intervals at 0x105ba5820>\n\n    # snap modifiers\n    >>> dt = maya.when('Mon, 21 Feb 1994 21:21:42 GMT')\n    >>> dt.snap('@d+3h').rfc2822()\n    'Mon, 21 Feb 1994 03:00:00 GMT'\n\n\t# snap modifiers within a timezone\n    >>> dt = maya.when('Mon, 21 Feb 1994 21:21:42 GMT')\n    >>> dt.snap_tz('+3h@d', 'Australia/Perth').rfc2822()\n\t'Mon, 21 Feb 1994 16:00:00 GMT'\n\nâ˜¤ Advanced Usage of Maya\n------------------------\n\nIn addition to timestamps, Maya also includes a wonderfully powerful ``MayaInterval`` class, which represents a range of time (e.g. an event). With this class, you can perform a multitude of advanced calendar calculations with finesse and ease.\n\nFor example:\n\n.. code-block:: pycon\n\n    >>> from maya import MayaInterval\n\n    # Create an event that is one hour long, starting now.\n    >>> event_start = maya.now()\n    >>> event_end = event_start.add(hours=1)\n\n    >>> event = MayaInterval(start=event_start, end=event_end)\n\nFrom here, there are a number of methods available to you, which you can use to compare this event to another event.\n\n\n\nâ˜¤ Why is this useful?\n---------------------\n\n- All timezone algebra will behave identically on all machines, regardless of system locale.\n- Complete symmetric import and export of both ISO 8601 and RFC 2822 datetime stamps.\n- Fantastic parsing of both dates written for/by humans and machines (``maya.when()`` vs ``maya.parse()``).\n- Support for human slang, both import and export (e.g. `an hour ago`).\n- Datetimes can very easily be generated, with or without tzinfo attached.\n- This library is based around epoch time, but dates before Jan 1 1970 are indeed supported, via negative integers.\n- Maya never panics, and always carries a towel.\n\n\nâ˜¤ What about Delorean_, Arrow_, & Pendulum_?\n--------------------------------------------\n\nAll these projects complement each other, and are friends. Pendulum, for example, helps power Maya's parsing.\n\nArrow, for example, is a fantastic library, but isn't what I wanted in a datetime library. In many ways, it's better than Maya for certain things. In some ways, in my opinion, it's not.\n\nI simply desire a sane API for datetimes that made sense to me for all the things I'd ever want to doâ€”especially when dealing with timezone algebra. Arrow doesn't do all of the things I need (but it does a lot more!). Maya does do exactly what I need.\n\nI think these projects complement each-other, personally. Maya is great for parsing websites, and dealing with calendar events!\n\n.. _Delorean: https://delorean.readthedocs.io/\n.. _Arrow: https://arrow.readthedocs.io/\n.. _Pendulum: https://pendulum.eustace.io/\n\n\nâ˜¤ Installing Maya\n-----------------\n\nInstallation is easy, with:\n\n    $ pip install maya\n\n\nHow to Contribute\n-----------------\n\n#. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n#. Fork `the repository`_ on GitHub to start making your changes to the **master** branch (or branch off of it).\n#. Write a test which shows that the bug was fixed or that the feature works as expected.\n#. Send a pull request and bug the maintainer until it gets merged and published. :)\n\n.. _`the repository`: http://github.com/timofurrer/maya\n"
        },
        {
          "name": "demo.yml",
          "type": "blob",
          "size": 0.03125,
          "content": "requirements:\n    - maya==0.6.0\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3037109375,
          "content": "[bdist_wheel]\nuniversal = 1\n\n[metadata]\n# ensure LICENSE is included in wheel metadata\nlicense_file = LICENSE\n\n[flake8]\nmax-line-length = 100\nignore = E203\n\n[tool:pytest]\ntestpaths = tests/\n\n[isort]\nknown_first_party=maya\nknown_third_party=humanize,pytz,dateparser,tzlocal,pendulum,snaptime\nmulti_line_output=3\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.828125,
          "content": "import codecs\nimport os\nimport re\n\nfrom setuptools import find_packages, setup\n\n#: Holds a list of packages to install with the binary distribution\nPACKAGES = find_packages(where=\"src\")\nMETA_FILE = os.path.abspath(\"src/maya/__init__.py\")\nKEYWORDS = [\"datetime\", \"timezone\", \"scrape\", \"web\"]\nCLASSIFIERS = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: Implementation\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n]\n\n#: Holds the runtime requirements for the end user\nINSTALL_REQUIRES = [\n    \"humanize\",\n    \"pytz\",\n    \"dateparser>=0.7.0\",\n    \"tzlocal\",\n    \"pendulum>=2.0.2\",\n    \"snaptime\",\n]\n#: Holds runtime requirements and development requirements\nEXTRAS_REQUIRES = {\n    # extras for contributors\n    \"docs\": [\"sphinx\"],\n    \"tests\": [\"freezegun\", \"coverage\", \"pytest\", \"pytest-mock\"],\n}\nEXTRAS_REQUIRES[\"dev\"] = (\n    EXTRAS_REQUIRES[\"tests\"] + EXTRAS_REQUIRES[\"docs\"] + [\"pre-commit\"]\n)\n\n#: Holds the contents of the README file\nwith codecs.open(\"README.rst\", encoding=\"utf-8\") as readme:\n    __README_CONTENTS__ = readme.read()\n\n\ndef read(metafile):\n    \"\"\"\n    Return the contents of the given meta data file assuming UTF-8 encoding.\n    \"\"\"\n    with codecs.open(str(metafile), encoding=\"utf-8\") as f:\n        return f.read()\n\n\ndef get_meta(meta, metafile):\n    \"\"\"\n    Extract __*meta*__ from the given metafile.\n    \"\"\"\n    contents = read(metafile)\n    meta_match = re.search(\n        r\"^__{meta}__ = ['\\\"]([^'\\\"]*)['\\\"]\".format(meta=meta), contents, re.M\n    )\n    if meta_match:\n        return meta_match.group(1)\n    raise RuntimeError(\"Unable to find __{meta}__ string.\".format(meta=meta))\n\n\nsetup(\n    name=\"maya\",\n    version=get_meta(\"version\", META_FILE),\n    license=get_meta(\"license\", META_FILE),\n    description=get_meta(\"description\", META_FILE),\n    long_description=__README_CONTENTS__,\n    author=get_meta(\"author\", META_FILE),\n    author_email=get_meta(\"author_email\", META_FILE),\n    maintainer=get_meta(\"author\", META_FILE),\n    maintainer_email=get_meta(\"author_email\", META_FILE),\n    platforms=[\"Linux\", \"Windows\", \"MAC OS X\"],\n    url=get_meta(\"url\", META_FILE),\n    download_url=get_meta(\"download_url\", META_FILE),\n    bugtrack_url=get_meta(\"bugtrack_url\", META_FILE),\n    packages=PACKAGES,\n    package_dir={\"\": \"src\"},\n    include_package_data=True,\n    install_requires=INSTALL_REQUIRES,\n    extras_require=EXTRAS_REQUIRES,\n    keywords=KEYWORDS,\n    classifiers=CLASSIFIERS,\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.953125,
          "content": "[tox]\nenvlist = lint,manifest,py27,py35,py36,py37,docs,coverage-report\n\n\n[testenv]\n# Prevent random setuptools/pip breakages like\n# https://github.com/pypa/setuptools/issues/1042 from breaking our builds.\nsetenv =\n    VIRTUALENV_NO_DOWNLOAD=1\nextras = {env:TOX_AP_TEST_EXTRAS:tests}\ncommands = coverage run --parallel -m pytest {posargs}\n\n\n[testenv:coverage-report]\nbasepython = python3.7\nskip_install = true\ndeps = coverage\ncommands =\n    coverage combine\n    coverage report\n\n\n[testenv:lint]\nbasepython = python3.7\nskip_install = true\ndeps = pre-commit\npassenv = HOMEPATH  # needed on Windows\ncommands = pre-commit run --all-files\n\n\n[testenv:docs]\nbasepython = python3.7\nextras = docs\ncommands =\n    sphinx-build -W -b html -d {envtmpdir}/doctrees docs/source docs/_build/html\n    ;sphinx-build -W -b doctest -d {envtmpdir}/doctrees docs/source docs/_build/html\n\n\n[testenv:manifest]\nbasepython = python3.7\ndeps = check-manifest\nskip_install = true\ncommands = check-manifest\n"
        }
      ]
    }
  ]
}