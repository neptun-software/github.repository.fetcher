{
  "metadata": {
    "timestamp": 1736559469775,
    "page": 32,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenBMB/ToolBench",
      "stars": 4925,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0673828125,
          "content": "data/\ndata.zip\n*.DS_store\n\n__MACOSX/\n\nrun.bash\n\n*.pyc\n**/__pycache__\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 32.1025390625,
          "content": "<div align= \"center\">\n    <h1> 🛠️ToolBench🤖</h1>\n</div>\n\n<div align=\"center\">\n\n![Dialogues](https://img.shields.io/badge/Tool\\_Num-3451-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/API\\_Num-16464-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Current\\_Dataset\\_Size-126K-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Total\\_API\\_Call-469K-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Average\\_Reasoning\\_Traces-4.0-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Tool\\_LLaMA-Released-green?style=flat-square)\n\n</div>\n\n<p align=\"center\">\n  <a href=\"#model\">Model</a> •\n  <a href=\"#data\">Data Release</a> •\n  <a href=\"#web-ui\">Web Demo</a> •\n  <a href=\"#tooleval\">Tool Eval</a> •\n  <a href=\"https://arxiv.org/pdf/2307.16789.pdf\">Paper</a> •\n  <a href=\"#citation\">Citation</a>\n\n</p>\n\n</div>\n\n<div align=\"center\">\n<img src=\"assets/ToolLLaMA-logo.png\" width=\"350px\">\n</div>\n\n🔨This project (ToolLLM) aims to construct **open-source, large-scale, high-quality** instruction tuning SFT data to facilitate the construction of powerful LLMs with general **tool-use** capability. We aim to empower open-source LLMs to master thousands of diverse real-world APIs. We achieve this by collecting a high-quality instruction-tuning dataset. It is constructed automatically using the latest ChatGPT (gpt-3.5-turbo-16k), which is upgraded with enhanced [function call](https://openai.com/blog/function-calling-and-other-api-updates) capabilities. We provide the dataset, the corresponding training and evaluation scripts, and a capable model ToolLLaMA fine-tuned on ToolBench.\n\n**2024.8 Update** We have updated the RapidAPI server with a new IP, please make sure you get the latest code. You can also build it locally using codes [here](https://drive.google.com/file/d/1JdbHkL2D8as1docfHyfLWhrhlSP9rZhf/view?usp=sharing).\n\n**💁‍♂️💁💁‍♀️ Join Us on [Discord](https://discord.gg/NScFnpMuRQ)!**\n\n*Read this in [中文](README_ZH.md).*\n\n## What's New\n- **[2024/3/17]** Welcome to **[StableToolBench](https://github.com/zhichengg/StableToolBench)**:\nA **stable and reliable** local toolbench server based on API response simulation. Dive deeper into the tech behind StableToolBench with [paper here](https://arxiv.org/pdf/2403.07714.pdf) and explore more on the [project homepage](https://zhichengg.github.io/stb.github.io/). Codes are available [here](https://github.com/zhichengg/StableToolBench).\n\n- **[2023/9/29]** A new version ToolEval which is more stable and covers more models including GPT4! Please refer to [**ToolEval**](https://github.com/OpenBMB/ToolBench/tree/master/toolbench/tooleval) for more details. Besides, [**ToolLLaMA-2-7b-v2**](https://huggingface.co/ToolBench/ToolLLaMA-2-7b-v2) is released with stronger tool-use capabilities. Please use the ToolLLaMA-2-7b-v2 model to reproduce our latest experimental results with the new version ToolEval.\n\n- **[2023/8/30]** Data updation, with more than **120,000** solution path annotations and **intact reasoning thoughts**! Please find `data.zip` on [Google Drive](https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J).\n\n- **[2023/8/8]** No more hallucination! [**ToolLLaMA-2-7b-v1**](https://huggingface.co/ToolBench/ToolLLaMA-2-7b-v1) (fine-tuned from LLaMA-2-7b) is released with lower API hallucination than ChatGPT.\n\n- **[2023/8/4]** We provide **RapidAPI backend service** to free you from using your own RapidAPI key and subscribing the APIs. Please fill out our [form](https://forms.gle/S4hqVLtnqeXcNTCJA). We will review it as soon as possible and send you the ToolBench key to get start on it! \n\n- **[2023/8/1]** Our [**paper**](https://arxiv.org/abs/2307.16789) is released.\n\n- **[2023/7/27]** **New version** ToolBench is released.\n\n✨Here is an overview of the dataset construction, training, and evaluation.\n\n<br>\n<div align=\"center\">\n<img src=\"assets/overview.png\" width=\"800px\">\n</div>\n<br>\n\n✨✨Features:\n - **API Collection**: we gather **16464** representational state transfer (REST) APIs from [RapidAPI](https://rapidapi.com/hub), a platform that hosts massive real-world APIs provided by developers.\n - **Instruction Generation**: we curate instructions that involve both **single-tool** and **multi-tool** scenarios.\n - **Answer Annotation**: we develop a novel **depth-first search based decision tree** (DFSDT) to bolster the planning and reasoning ability of LLMs, which significantly improves the annotation efficiency and successfully annotates those complex instructions that cannot be answered with CoT or ReACT. We provide responses that not only include the final answer but also incorporate the model's **reasoning process, tool execution, and tool execution results**. \n - **API Retriver**: we incorporate API retrieval to equip ToolLLaMA with open-domain tool-using abilities.\n - All the data is automatically generated by OpenAI API and filtered by us, the whole data creation process is easy to scale up.\n\n<br>\n<div align=\"center\">\n<img src=\"assets/comparison.png\" width=\"800px\">\n</div>\n<br>\n\nWe also provide **A demo of using ToolLLaMA**\n\n<div align=\"center\">\n\nhttps://github.com/OpenBMB/ToolBench/assets/25274507/f1151d85-747b-4fac-92ff-6c790d8d9a31\n\n</div>\n\nCurrently, our ToolLLaMA has reached the performance of ChatGPT (turbo-16k) in tool use, in the future, *we will continually improve the data quality and increase the coverage of real-world tools.*\n\n<div align=\"center\">\n<img src=\"assets/performance.png\" width=\"300px\">\n</div>\n\nHere is the *[Old version](https://github.com/OpenBMB/ToolBench/tree/legacy)* of ToolBench.\n\n## Data\n\n👐ToolBench is intended solely for research and educational purposes and should not be construed as reflecting the opinions or views of the creators, owners, or contributors of this dataset. It is distributed under Apache License 2.0. Below is the statistics of the data :\n\n| Tool Nums | API Nums | Instance Nums | Real API Call | Reasoning Traces |\n|-----------|----------|---------------|---------------|------------------|\n| 3451      | 16464    | 126486         | 469585         | 4.0              |\n\nWe crawl 16000+ real-world APIs from [RapidAPI](https://rapidapi.com/hub), and curate realistic human instructions that involve them. Below we present a hierarchy of RapidAPI and our instruction generation process.\n\n<br>\n<div align=\"center\">\n<img src=\"assets/instructiongeneration.png\" width=\"800px\">\n</div>\n<br>\n\nToolBench contains both single-tool and multi-tool scenarios. The multi-tool scenarios can be further categorized into intra-category multi-tool and intra-collection multi-tool. We utilize DFSDT method for all scenarios to our data creation. Here is an illustration for the data creation process using DFSDT method:\n\n<div align=\"center\">\n\n<img src=\"assets/answer_anno.png\" width=\"800px\">\n\n</div>\n\n### Data Release\n\n Please download our dataset using the following link: [Google Drive](https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J) or [Tsinghua Cloud](https://cloud.tsinghua.edu.cn/f/c9e50625743b40bfbe10/). *Notice that `data_0801` is the old version data.*\nThe file structure is as follows:\n```\n├── /data/\n│  ├── /instruction/\n│  ├── /answer/\n│  ├── /toolenv/\n│  ├── /retrieval/\n│  ├── /test_instruction/\n│  ├── /test_query_ids/\n│  ├── /retrieval_test_query_ids/\n│  ├── toolllama_G123_dfs_train.json\n│  └── toolllama_G123_dfs_eval.json\n├── /reproduction_data/\n│  ├── /chatgpt_cot/\n│  ├── /chatgpt_dfs/\n│  ├── ...\n│  └── /toolllama_dfs/\n```\nHere are some descriptions for the `data` directory:\n- `instruction` and `answer`: The instruction data and solution path annotation data. `G1`,`G2`, `G3` refers to single-tool, intra-category multi-tool and intra-collection multi-tool data respectively. We also have an [Atlas Explorer](https://atlas.nomic.ai/map/58aca169-c29a-447a-8f01-0d418fc4d341/030ddad7-5305-461c-ba86-27e1ca79d899) for visualization.\n- `toolenv`: The tool environment related data, containing API jsons, API codes and API example responses.\n- `retrieval`: The data used for tool retrieval is included in this directory.\n- `test_instruction` and `test_query_ids`: We sample 200 instances from every test set. The `test_instruction` directory contains test queries for each test set, and the `test_query_ids` contains query ids of the test instances in each test set.\n- `retrieval_test_query_ids`: This directory contains query ids of the test instances for retriever.\n- `toolllama_G123_dfs_train.json` and `toolllama_G123_dfs_eval.json`: Preprocessed data that can be used to train toolllama directly and reproduce our results. For preprocessing details, we split the G1, G2 and G3 data into train, eval and test parts respectively and combine the train data for training in our main experiments.\n\n*Please make sure you have downloaded the necessary data and put the directory (e.g. `data/`) under `ToolBench/`, so that the following bash scripts can navigate to the related data.*\n\n## 🤖Model\n\nWe release the [ToolLLaMA-2-7b-v2](https://huggingface.co/ToolBench/ToolLLaMA-2-7b-v2) which is trained on the latest version data, and [ToolLLaMA-7b-v1](https://huggingface.co/ToolBench/ToolLLaMA-7b-v1), [ToolLLaMA-7b-LoRA-v1](https://huggingface.co/ToolBench/ToolLLaMA-7b-LoRA-v1) which are trained on the 0801 version data. All models are trained on the released dataset in a multi-task fashion. We also release the [tool retriever](https://huggingface.co/ToolBench/ToolBench_IR_bert_based_uncased) trained under our experimental setting.\n\n## 🚀Fine-tuning\n### Install\nClone this repository and navigate to the ToolBench folder.\n```bash\ngit clone git@github.com:OpenBMB/ToolBench.git\ncd ToolBench\n```\nInstall Package (python>=3.9)\n```bash\npip install -r requirements.txt\n```\nor for ToolEval only\n```bash\npip install -r toolbench/tooleval/requirements.txt\n```\n\nPrepare the data and tool environment:\n```bash\nwget --no-check-certificate 'https://drive.google.com/uc?export=download&id=1XFjDxVZdUY7TXYF2yvzx3pJlS2fy78jk&confirm=yes' -O data.zip\nunzip data.zip\n```\nhttps://drive.google.com/file/d/1XFjDxVZdUY7TXYF2yvzx3pJlS2fy78jk/view?usp=drive_link\n\n### Training Retriever\n- Data preprocessing:\n```bash\nexport PYTHONPATH=./\npython preprocess/preprocess_retriever_data.py \\\n    --query_file data/instruction/G1_query.json \\\n    --index_file data/test_query_ids/G1_instruction_test_query_ids.json \\\n    --dataset_name G1 \\\n    --output_dir data/retrieval/G1\n```\n- Then run the following command to train the tool retriever:\n```bash\nexport PYTHONPATH=./\npython toolbench/retrieval/train.py \\\n    --data_path data/retrieval/G1/ \\\n    --model_name bert-base-uncased \\\n    --output_path retrieval_model \\\n    --num_epochs 5 \\\n    --train_batch_size 32 \\\n    --learning_rate 2e-5 \\\n    --warmup_steps 500 \\\n    --max_seq_length 256\n```\n\n### Training ToolLLaMA\n- Data preprocessing, for G1_answer as an example:\n```bash\nexport PYTHONPATH=./\npython preprocess/preprocess_toolllama_data.py \\\n    --tool_data_dir data/answer/G1_answer \\\n    --method DFS_woFilter_w2 \\\n    --output_file data/answer/toolllama_G1_dfs.json\n```\n- Our training code is based on [FastChat](https://github.com/lm-sys/FastChat). You can use the following command to train ToolLLaMA-7b with 2 x A100 (80GB), with our preprocessed data `data/toolllama_G123_dfs_train.json`. For preprocessing details, we split the G1, G2 and G3 data into train, eval and test parts respectively and combine the train data for training in our main experiments:\n```bash\nexport PYTHONPATH=./\ntorchrun --nproc_per_node=2 --master_port=20001 toolbench/train/train_mem.py \\\n    --model_name_or_path huggyllama/llama-7b  \\\n    --data_path  data/toolllama_G123_dfs_train.json \\\n    --eval_data_path  data/toolllama_G123_dfs_eval.json \\\n    --conv_template tool-llama-single-round \\\n    --bf16 True \\\n    --output_dir toolllama \\\n    --num_train_epochs 2 \\\n    --per_device_train_batch_size 2 \\\n    --per_device_eval_batch_size 2 \\\n    --gradient_accumulation_steps 8 \\\n    --evaluation_strategy \"epoch\" \\\n    --prediction_loss_only \\\n    --save_strategy \"epoch\" \\\n    --save_total_limit 8 \\\n    --learning_rate 5e-5 \\\n    --weight_decay 0. \\\n    --warmup_ratio 0.04 \\\n    --lr_scheduler_type \"cosine\" \\\n    --logging_steps 1 \\\n    --fsdp \"full_shard auto_wrap\" \\\n    --fsdp_transformer_layer_cls_to_wrap 'LlamaDecoderLayer' \\\n    --tf32 True \\\n    --source_model_max_length 2048 \\\n    --model_max_length 8192 \\\n    --gradient_checkpointing True \\\n    --lazy_preprocess True \\\n    --report_to none\n```\n\nTo train lora version:\n```bash\nexport PYTHONPATH=./\ndeepspeed --master_port=20001 toolbench/train/train_lora.py \\\n    --model_name_or_path huggyllama/llama-7b  \\\n    --data_path  data/toolllama_G123_dfs_train.json \\\n    --eval_data_path  data/toolllama_G123_dfs_eval.json \\\n    --conv_template tool-llama-single-round \\\n    --bf16 True \\\n    --output_dir toolllama_lora \\\n    --num_train_epochs 5 \\\n    --per_device_train_batch_size 4 \\\n    --per_device_eval_batch_size 2 \\\n    --gradient_accumulation_steps 2 \\\n    --evaluation_strategy \"epoch\" \\\n    --prediction_loss_only \\\n    --save_strategy \"epoch\" \\\n    --save_total_limit 8 \\\n    --learning_rate 5e-5 \\\n    --weight_decay 0. \\\n    --warmup_ratio 0.04 \\\n    --lr_scheduler_type \"cosine\" \\\n    --logging_steps 1 \\\n    --source_model_max_length 2048 \\\n    --model_max_length 8192 \\\n    --gradient_checkpointing True \\\n    --lazy_preprocess True \\\n    --deepspeed ds_configs/stage2.json \\\n    --report_to none\n```\n\n\n## Inference With Our RapidAPI Server\nPlease fill out the [form](https://forms.gle/S4hqVLtnqeXcNTCJA) first and after reviewing we will send you the toolbench key. Then prepare your toolbench key by:\n```bash\nexport TOOLBENCH_KEY=\"your_toolbench_key\"\n```\n\n### For ToolLLaMA\n\nTo inference with ToolLLaMA, run the following commands:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model toolllama \\\n    --model_path ToolBench/ToolLLaMA-7b \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\nFor **ToolLLaMA-LoRA**:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model toolllama \\\n    --model_path huggyllama/llama-7b \\\n    --lora \\\n    --lora_path /path/to/your/downloaded/ToolLLaMA-7b-LoRA \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_lora_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\nFor ToolLLaMA-LoRA under **open-domain** setting, run:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline_open_domain.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --corpus_tsv_path data/retrieval/G1/corpus.tsv \\\n    --retrieval_model_path /path/to/your/retrival_model \\\n    --retrieved_api_nums 5 \\\n    --backbone_model toolllama \\\n    --model_path huggyllama/llama-7b \\\n    --lora \\\n    --lora_path /path/to/your/toolllama_lora \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_lora_dfs_open_domain_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\n### For OpenAI Models\nTo use ChatGPT, run:\n```bash\nexport TOOLBENCH_KEY=\"\"\nexport OPENAI_KEY=\"\"\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model chatgpt_function \\\n    --openai_key $OPENAI_KEY \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file chatgpt_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\nTo use Text-Davinci-003, run:\n```bash\nexport TOOLBENCH_KEY=\"\"\nexport OPENAI_KEY=\"\"\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model davinci \\\n    --openai_key $OPENAI_KEY \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file davinci_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\n## Inference With Your Own RapidAPI Account\nTo do inference with customized RapidAPI account, pass your **rapidapi key** through `rapidapi_key` and specify the `use_rapidapi_key` argument in the script:\n```bash\nexport RAPIDAPI_KEY=\"\"\nexport OPENAI_KEY=\"\"\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model chatgpt_function \\\n    --openai_key $OPENAI_KEY \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file chatgpt_dfs_inference_result \\\n    --rapidapi_key $RAPIDAPI_KEY \\\n    --use_rapidapi_key\n```\n\n## API Customization\nTo do inference with customized API(s), you should prepare the API documentation and code, then modify your query. For example, to add an API **hello_world** which returns a \"hello world\" string:\n- API documentation: First generate the API documentation `hello_world.json`, which should follow this format:\n```\n{\n    \"tool_description\": \"Return hello world.\",\n    \"tool_name\": \"hello world\",\n    \"title\": \"hello world\",\n    \"api_list\": [\n        {\n            \"name\": \"get_hello_world\",\n            \"url\": \"\",\n            \"description\": \"To get 'hello world'.\",\n            \"method\": \"GET\",\n            \"required_parameters\": [],\n            \"optional_parameters\": []\n        }\n    ],\n    \"standardized_name\": \"hello_world\"\n}\n```\nThen put it under a specific category in `data/toolenv/tools/`, either one of the 49 existing categories or a new category, e.g. `Customized`. \n- API code: Create a directory naming the `hello_world` under `Customized` directory. Then write a code `api.py` to realize the function of the API and put it under `Customized/hello_world/`. The API code can be written in this format:\n```python\ndef get_hello_world():\n    \"\"\"\n    To get hello world \n    \"\"\"\n    observation = \"hello world\"\n    return observation\n```\nNow the file structure under `data/toolenv/` should be:\n```\n├── /tools/\n│  ├── /Sports/\n│  │  ├── basketball.json\n│  │  ├── /basketball/\n│  │  │  └── api.py\n│  │  └── ...\n│  ├── ...\n│  ├── /Customized/\n│  │  ├── hello_world.json\n│  │  ├── /hello_world/\n│  │  │  └── api.py\n└── response_examples\n```\n- Modify your query file, and the query file should follow the following format:\n```\n[\n    {\n        \"query\": \"I want to get a 'hello world' string.\",\n        \"query_id\": 200001,\n        \"api_list\": [\n            {\n                \"category_name\": \"Customized\",\n                \"tool_name\": \"hello world\",\n                \"api_name\": \"get_hello_world\"\n            }\n        ]\n    }\n]\n```\n- Finally we are free to inference with the **hello_world** API by running the following commands:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model toolllama \\\n    --model_path ToolBench/ToolLLaMA-7b \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file /path/to/your/query/file \\\n    --output_answer_file /path/to/your/output/file \\\n    --api_customization\n```\n*Currently we only support customized API usage under close-domain setting. We plan to support open-domain soon.*\n\n\n## Setting up and running the interface\nToolBench contains a Web UI based on [Chatbot UI](https://github.com/mckaywrigley/chatbot-ui), forked to include the use of tools in the interface. It comes in two parts: the backend server, and [chatbot-ui-toolllama](https://github.com/lilbillybiscuit/chatbot-ui-toolllama). Here is a [video demo](assets/toolbench-demo.mp4).\n\n\n### Web UI\n```bash\ngit clone https://github.com/lilbillybiscuit/chatbot-ui-toolllama\ncd chatbot-ui-toolllama\nnpm install\nnpm run dev\n```\n\nThe app will be available on `http://localhost:3000/`\n\n### Backend server\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/toolbench_server.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --corpus_tsv_path data/retrieval/G1/corpus.tsv \\\n    --retrieval_model_path /path/to/your/retrival_model \\\n    --retrieved_api_nums 5 \\\n    --backbone_model toolllama \\\n    --model_path huggyllama/llama-7b \\\n    --lora \\\n    --lora_path /path/to/your/toolllama_lora \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_lora_dfs_open_domain_result \\\n    --rapidapi_key $RAPIDAPIKEY\n```\n\nThis server will be available on `http://localhost:5000/`. To start a request, call `http://localhost:5000/stream` with a GET or POST request containing a JSON object with the following fields:\n```json\n{\n    \"text\": \"What is the weather in New York today?\",\n    \"top_k\": 5,\n    \"method\": \"DFS_woFilter_w2\"\n}\n```\n\n## ToolEval\n\nBy fine-tuning LLaMA on ToolBench, we obtain **ToolLLaMA**. Considering that human evaluation can be time-consuming, we follow [AlpacaEval](https://tatsu-lab.github.io/alpaca_eval/) to develop an efficient machine evaluator **ToolEval**, which incorporates two evaluation metrics:\n - **Pass Rate**: Calculates the proportion of successfully completing an instruction within limited OpenAI API calls. \n - **Preference**: Measured by comparing two answers (action sequences) for a given instruction. We pre-define a set of criteria for a better answer, which are organized as prompts for ChatGPT. We provide the test instruction and two candidate answers to the evaluator and obtain its preference. We evaluate each answer pair multiple times to improve the reliability of our system. Then we calculate the **Win Rate** (percentage of being preferred by the evaluator). More details can be found in our paper.\n\nTo validate the reliability of ChatGPT evaluator in both pass rate and win rate, we sample among four different methods (ChatGPT+ReACT, ChatGPT+DFSDT, ToolLLaMA+DFSDT and GPT4+DFSDT) to obtain solution pairs for 300 test instructions for each method. Then we engage humans to annotate the pass rate for ChatGPT+DFSDT, ToolLLaMA+DFSDT and GPT4+DFSDT, and the win rate among ChatGPT+ReACT and ChatGPT+DFSDT.\nOur ChatGPT evaluator demonstrates a high agreement of **87.1%** in pass rate and **80.3%** in win rate with human annotators. This result shows that our evaluator generates highly similar evaluation results to humans and can be viewed as a credible evaluator who simulates human evaluation on pass rate and win rate.\n\nMore details about ToolEval can be found in our paper.\n\n### Evaluation with ToolEval\n#### Install\nInstall Package (python>=3.9)\n```bash\npip install -r requirements.txt\n```\n\n#### Evaluation\n*If you want to reproduce the official results, download the reproduction data `reproduction_data.zip` through [Google Drive](https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J), unzip it and put the `reproduction_data` under `ToolBench/data/`, and skip the data preparation process.*\n- Data preparation. To evaluate your own model and method using ToolEval, first you need to prepare all the model predictions for the six test subsets. Create a directory naming with your model and method, e.g. `chatgpt_cot` then put each test set's predictions under the directory. The file sturcture of the directory should be:\n```\n├── /chatgpt_cot/\n│  ├── /G1_instruction/\n│  │  ├── /10160_CoT@1.json\n│  │  └── ...\n│  ├── /G1_tool/\n│  │  ├── /10221_CoT@1.json\n│  │  └── ...\n│  ├── ...\n│  ├── /G3_instruction/\n│  │  ├── /10221_CoT@1.json\n│  │  └── ...\n```\n\nThen preprocess the predictions by running the following commands:\n```bash\nexport RAW_ANSWER_PATH=../../data/reproduction_data/model_predictions/\nexport CONVERTED_ANSWER_PATH=../../data/reproduction_data/model_predictions_converted/\nexport MODEL_NAME=chatgpt_cot\nexport METHOD=CoT\nmkdir ${CONVERTED_ANSWER_PATH}/${MODEL_NAME}\nfor test_set in G1_instruction G1_category G1_tool G2_category G2_instruction G3_instruction\ndo\n    answer_dir=${RAW_ANSWER_PATH}/${MODEL_NAME}/${test_set}\n    output_file=${CONVERTED_ANSWER_PATH}/${MODEL_NAME}/${test_set}.json\n    python convert_to_answer_format.py\\\n        --answer_dir ${answer_dir} \\\n        --method ${METHOD} \\\n        --output ${output_file}\ndone\n```\nAfter that, check if there are preprocessed json files for the test sets under `${CONVERTED_ANSWER_PATH}/${MODEL_NAME}`. If so, you're ready to run the following evaluate process. If not, check if there is anything wrong with the model's predictions.\n\n- OpenAI Key. Prepare your openai key to use our evaluator. The key(s) should be stored in a json file, e.g. `path/to/your/openai_key_json_file.json`:\n```bash\n[\n    {\n        \"username\": \"your_user_name\",\n        \"passwd\": \"your_password\",\n        \"api_key\": \"your_openai_key\",\n        \"organization\": \"your_organization\"\n    },\n    ...\n]\n```\n\n- Pass rate:\n```bash\nexport CONVERTED_ANSWER_PATH=../../data/reproduction_data/model_predictions_converted/\nexport SAVE_PATH=pass_rate_results\nexport CANDIDATE_MODEL=chatgpt_cot\nexport API_POOL_FILE=path/to/your/openai_key_json_file.json\n\npython eval_pass_rate.py \\\n    --converted_answer_path ${CONVERTED_ANSWER_PATH} \\\n    --save_path ${SAVE_PATH} \\\n    --reference_model ${CANDIDATE_MODEL} \\\n    --test_ids ../../data/test_ids/ \\\n    --max_eval_threads 20 \\\n    --evaluate_times 7\n\n```\nThe result files will be stored under the ${SAVE_PATH}.\n\n- Win rate. The below example take ChatGPT-ReACT as reference model and GPT4-ReACT as candidate model. Notice that you need to get both model's pass rate results first, then run the following commands to evaluate the preference result of GPT4-ReACT:\n```bash\nexport CONVERTED_ANSWER_PATH=../../data/reproduction_data/model_predictions_converted/\nexport SAVE_PATH=preference_results\nexport PASS_TARE_PATH=pass_rate_results\nexport REFERENCE_MODEL=chatgpt_cot\nexport CANDIDATE_MODEL=gpt-4-0613_cot\nexport API_POOL_FILE=path/to/your/openai_key_json_file.json\n\npython eval_preference.py \\\n    --converted_answer_path ${CONVERTED_ANSWER_PATH} \\\n    --reference_model ${REFERENCE_MODEL} \\\n    --output_model ${CANDIDATE_MODEL} \\\n    --test_ids ../../data/test_ids/ \\\n    --save_path ${SAVE_PATH} \\\n    --pass_rate_result_path ${PASS_TARE_PATH} \\\n    --max_eval_threads 20 \\\n    --use_pass_rate true \\\n    --evaluate_times 7\n```\nThe result files will be stored under the ${SAVE_PATH}.\n\nPlease refer to [ToolEval](https://github.com/OpenBMB/ToolBench/tree/master/toolbench/tooleval) for more details.\n\n### 📊 Model Experiments Results\n\n\nIn our main experiments, ToolLLaMA(v2) demonstrates a compelling capability to handle both single-tool and complex multi-tool instructions, which on a par with ChatGPT.\nBelow are the main results. Win rate for each model is compared with ChatGPT-ReACT.\n\n\n**Pass Rate:**\n| Method | Model               | I1-Inst. | I1-Tool | I1-Cate. | I2-Inst. | I2-Cate. | I3-Inst. | Average |\n|--------|---------------------|----------|---------|----------|----------|----------|----------|---------|\n| ReACT  | Claude-2            | 5.5      | 3.5     | 5.5      | 6        | 6        | 14       | 6.8     |\n|        | Text-Davinci-003    | 12       | 20      | 20       | 8.5      | 14.5     | 24       | 16.5    |\n|        | ChatGPT             | 41.5     | 44      | 44.5     | 42.5     | 46.5     | 22       | 40.2    |\n|        | ToolLLaMA           | 25       | 29      | 33       | 30.5     | 31.5     | 25       | 29      |\n|        | GPT4                | 53.5       | 50.0    | 53.5       | 67.0     | 72.0     | 47.0       | 57.2    |\n| DFSDT  | Claude-2            | 20.5     | 31      | 18.5     | 17       | 20.5     | 28       | 22.6    |\n|        | Text-Davinci-003    | 43.5     | 44      | 46       | 37       | 42       | 46       | 43.1    |\n|        | ChatGPT             | 54.5     | 65      | 60.5     | 75       | 71.5     | 62       | 64.8    |\n|        | ToolLLaMA           | 57       | 61      | 62       | 77       | 77       | 66       | 66.7    |\n|        | ToolLLaMA-Retreiver | **64**       | 64      | 60.5     | **81.5**     | 68.5     | 65       | 67.3    |\n|        | GPT4                | 60       | **71.5**    | **67**       | 79.5     | **77.5**     | **71**       | **71.1**    |\n\n\n**Win Rate:** (Reference model: ChatGPT-ReACT)\n| Method | Model               | I1-Inst. | I1-Tool | I1-Cate. | I2-Inst. | I2-Cate. | I3-Inst. | Average |\n|--------|---------------------|----------|---------|----------|----------|----------|----------|---------|\n| ReACT  | Claude-2            | 31       | 27.8    | 33.8     | 35       | 31.5     | 47.5     | 34.4    |\n|        | Text-Davinci-003    | 28.5     | 35.3    | 31       | 29.8     | 29.8     | 45       | 33.2    |\n|        | ToolLLaMA           | 45       | 42      | 47.5     | 50.8     | 41.8     | 55       | 47      |\n|        | GPT4                | 60       | 58.8    | 63.5     | 65.8     | 60.3     | 78       | 64.4    |\n| DFSDT  | Claude-2            | 38       | 44.3    | 43.3     | 36.8     | 33.5     | 65       | 43.5    |\n|        | Text-Davinci-003    | 40.3     | 43.8    | 46.8     | 40.5     | 43.3     | 63       | 46.3    |\n|        | ChatGPT             | 60.5     | 62      | 57.3     | 72       | **64.8**     | 69       | 64.3    |\n|        | ToolLLaMA           | 55       | 55.3    | 54.5     | 68.5     | 58       | 69       | 60      |\n|        | ToolLLaMA-Retreiver | 62.3     | 59      | 55       | 68.5     | 60.8     | 73       | 63.1    |\n|        | GPT4                | **67.5**     | **67.8**    | **66.5**     | **73.3**     | 63.3     | **84**       | **70.4**    |\n\n\n## TODO\n- [ ] ToolLLaMA will reach GPT-4's tool-use capability.\n\n## Resources of Tool Learning\n\nWith the powerful capabilities of foundation models, we are eager to see their applications in manipulating various tools. For more resources, please refer to the following:\n\n- **BMTools**. [[Project](https://github.com/OpenBMB/BMTools)]\n\n- **Tool Learning Survey**. [[Paper](https://arxiv.org/abs/2304.08354)]\n  \n- **Tool Learning Paper List**. [[Project](https://github.com/thunlp/ToolLearningPapers)]\n\n- **WebCPM**. [[Paper](https://github.com/thunlp/WebCPM)]\n\n\n## Citation\nFeel free to cite us if you like ToolBench.\n```bibtex\n@misc{qin2023toolllm,\n      title={ToolLLM: Facilitating Large Language Models to Master 16000+ Real-world APIs}, \n      author={Yujia Qin and Shihao Liang and Yining Ye and Kunlun Zhu and Lan Yan and Yaxi Lu and Yankai Lin and Xin Cong and Xiangru Tang and Bill Qian and Sihan Zhao and Runchu Tian and Ruobing Xie and Jie Zhou and Mark Gerstein and Dahai Li and Zhiyuan Liu and Maosong Sun},\n      year={2023},\n      eprint={2307.16789},\n      archivePrefix={arXiv},\n      primaryClass={cs.AI}\n}\n```\n\n```bibtex\n@misc{qin2023tool,\n      title={Tool Learning with Foundation Models}, \n      author={Yujia Qin and Shengding Hu and Yankai Lin and Weize Chen and Ning Ding and Ganqu Cui and Zheni Zeng and Yufei Huang and Chaojun Xiao and Chi Han and Yi Ren Fung and Yusheng Su and Huadong Wang and Cheng Qian and Runchu Tian and Kunlun Zhu and Shihao Liang and Xingyu Shen and Bokai Xu and Zhen Zhang and Yining Ye and Bowen Li and Ziwei Tang and Jing Yi and Yuzhang Zhu and Zhenning Dai and Lan Yan and Xin Cong and Yaxi Lu and Weilin Zhao and Yuxiang Huang and Junxi Yan and Xu Han and Xian Sun and Dahai Li and Jason Phang and Cheng Yang and Tongshuang Wu and Heng Ji and Zhiyuan Liu and Maosong Sun},\n      year={2023},\n      eprint={2304.08354},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n\n```bibtex\n@misc{guo2024stabletoolbench,\n      title={StableToolBench: Towards Stable Large-Scale Benchmarking on Tool Learning of Large Language Models},\n      author={Guo, Zhicheng and Cheng, Sijie and Wang, Hao and Liang, Shihao and Qin, Yujia and Li, Peng and Liu, Zhiyuan and Sun, Maosong and Liu, Yang},\n      year={2024},\n      eprint={2403.07714},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n"
        },
        {
          "name": "README_ZH.md",
          "type": "blob",
          "size": 30.0947265625,
          "content": "<div align= \"center\">\n    <h1> 🛠️ToolBench🤖</h1>\n</div>\n\n<div align=\"center\">\n\n![Dialogues](https://img.shields.io/badge/Tool\\_Num-3451-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/API\\_Num-16464-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Current\\_Dataset\\_Size-126K-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Total\\_API\\_Call-469K-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Average\\_Reasoning\\_Traces-4.0-red?style=flat-square)\n![Dialogues](https://img.shields.io/badge/Tool\\_LLaMA-Released-green?style=flat-square)\n\n</div>\n\n<p align=\"center\">\n  <a href=\"#model\">Model</a> •\n  <a href=\"#data\">Data Release</a> •\n  <a href=\"#web-ui\">Web Demo</a> •\n  <a href=\"#tool-eval\">Tool Eval</a> •\n  <a href=\"assets/paper.pdf\">Paper</a> •\n  <a href=\"#citation\">Citation</a>\n\n</p>\n\n</div>\n\n<div align=\"center\">\n<img src=\"https://cdn.discordapp.com/attachments/941582479117127680/1111543600879259749/20230526075532.png\" width=\"350px\">\n</div>\n\n🔨这个项目(ToolLLM)旨在构建**开源、大规模、高质量**的指令调整 SFT 数据，以促进构建具有通用工具使用能力的强大LLMs。我们的目标是赋予开源 LLMs 掌握成千上万多样的真实世界API能力。我们通过收集高质量的指令调整数据集来实现这一目标。该数据集使用最新的ChatGPT（gpt-3.5-turbo-16k）自动构建，该版本升级了增强的函数调用功能。我们提供数据集、相应的训练和评估脚本，以及在ToolBench上经过微调的强大模型ToolLLaMA。\n\n**💁‍♂️💁💁‍♀️在 [Discord](https://discord.gg/NScFnpMuRQ) 加入我们!**\n\n*英文[README](README.md)链接.*\n\n## 最新支持\n- **[2023/9/29]** 更稳定的更新版本**ToolEval**， 加上更多模型比如GPT4的结果！更多细节请参考[ToolEval](https://github.com/OpenBMB/ToolBench/tree/master/toolbench/tooleval). 除此之外，工具使用能力更强的[**ToolLLaMA-2-7b-v2**](https://huggingface.co/ToolBench/ToolLLaMA-2-7b-v2)模型已经开放，请使用这版模型和更新的tooleval来复现最新的实验结果。\n\n- **[2023/8/30]** 数据更新，拥有超过**12万**解路径标注和**完整的推理thoughts**！请在 [Google Drive](https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J) 上找到`data.zip`。\n\n- **[2023/8/8]** 告别幻觉！[**ToolLLaMA-2-7b-v1**](https://huggingface.co/ToolBench/ToolLLaMA-2-7b-v1) (从LLaMA-2-7b微调而来)模型已发布，比ChatGPT有着更少的API幻觉现象.\n\n- **[2023/8/4]** 我们提供RapidAPI后端服务，以免您使用自己的RapidAPI私钥去订阅API。填写[表单](https://forms.gle/S4hqVLtnqeXcNTCJA)后，我们会尽快审核并给您发送ToolBench key去请求该后端服务! \n\n- **[2023/8/1]** 我们的[论文](https://arxiv.org/abs/2307.16789)正式发布.\n\n- **[2023/7/27]** 新版本ToolBench更新.\n\n✨以下是数据集构建方法、模型训练、评测的整体概览\n\n<br>\n<div align=\"center\">\n<img src=\"assets/overview.png\" width=\"800px\">\n</div>\n<br>\n\n✨✨特点:\n - API收集: 我们从 RapidAPI 收集了 16464 个API。RapidAPI 是一个托管开发者提供的大规模真实世界API的平台。\n\n - 指令生成: 我们生成了涉及单工具和多工具场景的指令。\n\n - 答案标注: 我们设计了一种新颖的深度优先搜索决策树方法（DFSDT），以增强LLMs的规划和推理能力。这显著提高了标注效率，并成功地对那些不能用CoT或ReACT回答的复杂指令进行了标注。我们提供的回答不仅包括最终答案，还包括模型的推理过程、工具执行和工具执行结果。\n\n - API Retriever: 我们整合了API检索模块，为ToolLLaMA提供了开放域的工具使用能力。\n\n - 所有数据均由OpenAI API自动生成并由我们筛选，整个数据创建过程易于扩展。\n\n<br>\n<div align=\"center\">\n<img src=\"assets/comparison.png\" width=\"800px\">\n</div>\n<br>\n\n以下是**ToolLLaMA的demo展示**\n\n<div align=\"center\">\n\nhttps://github.com/OpenBMB/ToolBench/assets/25274507/f1151d85-747b-4fac-92ff-6c790d8d9a31\n\n</div>\n\n目前，我们的ToolLLaMA已经达到了和ChatGPT（turbo-16k）接近的工具使用能力，未来*我们将不断进行数据的后处理与清洗，以提高数据质量并增加真实世界工具的覆盖范围。*\n\n<div align=\"center\">\n<img src=\"assets/performance.png\" width=\"300px\">\n</div>\n\n这是*[老版本](https://github.com/OpenBMB/ToolBench/tree/legacy)*的ToolBench。\n<!-- 💁‍♂️💁💁‍♀️**We need your help!** Curating large-scale real-world APIs and their corresponding tool-use SFT data is not easy, we sincerely invite you to join us in building and refining ToolBench. We will list all participants as co-authors in the final paper. Please contact and join [us](mailto:yujiaqin16@gmail.com) if you're interested. -->\n\n## 🗒️数据\n\n👐ToolBench仅用于研究和教育目的，不应被视为反映此数据集的创作者、所有者或贡献者的观点或意见。该数据集以 Apache License 2.0 许可证 进行分发。以下是数据集的统计信息:\n\n| 工具数量 | API数量 | 实例数量 | 真实API调用数量 | 平均Reasoning步数 |\n|-----------|----------|---------------|---------------|------------------|\n| 3451      | 16464    | 126486         | 469585         | 4.0              |\n\n我们从[RapidAPI](https://rapidapi.com/hub)爬取了超过16000个API，并且为之构造了真实的人类指令。以下是RapidAPI的架构信息与指令构造的方式。\n\n<br>\n<div align=\"center\">\n<img src=\"assets/instructiongeneration.png\" width=\"800px\">\n</div>\n<br>\n\n\nToolBench包含单工具和多工具场景。多工具场景可以进一步分为类别内多工具和集合内多工具。我们在数据创建过程中使用DFSDT方法。以下是使用DFSDT方法进行数据创建的说明：\n\n<div align=\"center\">\n\n<img src=\"assets/answer_anno.png\" width=\"800px\">\n\n</div>\n\n### 数据发布\n\n 请使用以下链接下载我们的数据集：[Google Drive](https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J)或者[清华云盘](https://cloud.tsinghua.edu.cn/f/c9e50625743b40bfbe10/).*请注意：`data_0801.zip`是老版本数据。*\n文件结构如下:\n```\n├── /data/\n│  ├── /instruction/\n│  ├── /answer/\n│  ├── /toolenv/\n│  ├── /retrieval/\n│  ├── /test_instruction/\n│  ├── /test_query_ids/\n│  ├── /retrieval_test_query_ids/\n│  ├── toolllama_G123_dfs_train.json\n│  └── toolllama_G123_dfs_eval.json\n├── /reproduction_data/\n│  ├── /chatgpt_cot/\n│  ├── /chatgpt_dfs/\n│  ├── ...\n│  └── /toolllama_dfs/\n```\n以下是`data`目录的一些描述：\n- `instruction` 和 `answer`：指令数据和解决方案路径标注数据。 `G1`、`G2`、`G3`分别指单工具、类内多工具和集合内多工具数据。我们还有一个用于可视化的 [Atlas Explorer](https://atlas.nomic.ai/map/58aca169-c29a-447a-8f01-0d418fc4d341/030ddad7-5305-461c-ba86-27e1ca79d899)。\n- `toolenv`：工具环境相关数据，包含API json、API代码和API示例返回。\n- `retrieval`：用于工具检索的数据包含在此目录中。\n- `test_instruction` and `test_query_ids`：我们从每个测试集中抽取 200 个实例。该目录包含每个测试集中测试实例的queries和query id。\n- `retrieval_test_query_ids`：该目录包含检索器测试实例的query id。\n- `toolllama_G123_dfs_train.json` 和 `toolllama_G123_dfs_eval.json`：预处理数据，可用于直接训练 toolllama 并复现我们的结果。对于预处理细节，我们将 G1、G2 和 G3 数据分别分为训练、评估和测试部分，合并各数据集的训练数据进行训练。\n\n## 🤖模型\n我们发布了在最新数据上全参数微调的[ToolLLaMA-2-7b-v2](https://huggingface.co/ToolBench/ToolLLaMA-2-7b-v2)，还有在0801版本数据上全参数微调的[ToolLLaMA-7b-v1](https://huggingface.co/ToolBench/ToolLLaMA-7b-v1)和lora版本[ToolLLaMA-7b-LoRA-v1](https://huggingface.co/ToolBench/ToolLLaMA-7b-LoRA-v1)，所有模型都是以多任务方式训练的。我们也发布在实验设置下训练的[tool retriever](https://huggingface.co/ToolBench/ToolBench_IR_bert_based_uncased).\n## 🚀精调\n### 安装\n克隆这个仓库并进入ToolBench文件夹。\n```bash\ngit clone git@github.com:OpenBMB/ToolBench.git\ncd ToolBench\n```\n安装包 (python>=3.9)\n```bash\npip install -r requirements.txt\n```\n或者仅安装ToolEval需要的包\n```bash\npip install -r toolbench/tooleval/requirements.txt\n```\n\n准备数据和工具环境:\n```bash\nwget --no-check-certificate 'https://drive.google.com/uc?export=download&id=1XFjDxVZdUY7TXYF2yvzx3pJlS2fy78jk&confirm=yes' -O data.zip\nunzip data.zip\n```\n\n\n### 训练Retriever\n- 数据预处理:\n```bash\nexport PYTHONPATH=./\npython preprocess/preprocess_retriever_data.py \\\n    --query_file data/instruction/G1_query.json \\\n    --index_file data/test_query_ids/G1_instruction_test_query_ids.json \\\n    --dataset_name G1 \\\n    --output_dir data/retrieval/G1\n```\n- 使用以下命令训练Retriever:\n```bash\nexport PYTHONPATH=./\npython toolbench/retrieval/train.py \\\n    --data_path data/retrieval/G1/ \\\n    --model_name bert-base-uncased \\\n    --output_path retrieval_model \\\n    --num_epochs 5 \\\n    --train_batch_size 32 \\\n    --learning_rate 2e-5 \\\n    --warmup_steps 500 \\\n    --max_seq_length 256\n```\n\n### 训练ToolLLaMA\n- 数据预处理（G1_answer为例子）:\n```bash\nexport PYTHONPATH=./\npython preprocess/preprocess_toolllama_data.py \\\n    --tool_data_dir data/answer/G1_answer \\\n    --method DFS_woFilter_w2 \\\n    --output_file data/answer/toolllama_G1_dfs.json\n```\n- 我们的训练代码基于[FastChat](https://github.com/lm-sys/FastChat)开发.您可以使用以下命令用两张A100（80G）以及我们预处理好的数据`data/toolllama_G123_dfs_train.json`或data_0830版本`data_0830/toolllama_G123_dfs_train_0830.json`来训练 ToolLLaMA-7b。对于预处理细节，我们将 G1、G2 和 G3 数据分别分为训练、评估和测试部分，合并各数据集中的训练数据进行训练:\n```bash\nexport PYTHONPATH=./\ntorchrun --nproc_per_node=2 --master_port=20001 toolbench/train/train_mem.py \\\n    --model_name_or_path huggyllama/llama-7b  \\\n    --data_path  data/toolllama_G123_dfs_train.json \\\n    --eval_data_path  data/toolllama_G123_dfs_eval.json \\\n    --conv_template tool-llama-single-round \\\n    --bf16 True \\\n    --output_dir toolllama \\\n    --num_train_epochs 2 \\\n    --per_device_train_batch_size 2 \\\n    --per_device_eval_batch_size 2 \\\n    --gradient_accumulation_steps 8 \\\n    --evaluation_strategy \"epoch\" \\\n    --prediction_loss_only \\\n    --save_strategy \"epoch\" \\\n    --save_total_limit 8 \\\n    --learning_rate 5e-5 \\\n    --weight_decay 0. \\\n    --warmup_ratio 0.04 \\\n    --lr_scheduler_type \"cosine\" \\\n    --logging_steps 1 \\\n    --fsdp \"full_shard auto_wrap\" \\\n    --fsdp_transformer_layer_cls_to_wrap 'LlamaDecoderLayer' \\\n    --tf32 True \\\n    --source_model_max_length 2048 \\\n    --model_max_length 8192 \\\n    --gradient_checkpointing True \\\n    --lazy_preprocess True \\\n    --report_to none\n```\n\n您也可以用以下命令用您自己的方式去预处理并划分数据:\n```bash\nexport PYTHONPATH=./\npython preprocess/preprocess_toolllama_data.py \\\n    --tool_data_dir data/answer/G1_answer \\\n    --method DFS_woFilter_w2 \\\n    --output_file data/answer/toolllama_G1_dfs.json\n```\n\n\n训练lora版本:\n```bash\nexport PYTHONPATH=./\ndeepspeed --master_port=20001 toolbench/train/train_lora.py \\\n    --model_name_or_path huggyllama/llama-7b  \\\n    --data_path  data/toolllama_G123_dfs_train.json \\\n    --eval_data_path  data/toolllama_G123_dfs_eval.json \\\n    --conv_template tool-llama-single-round \\\n    --bf16 True \\\n    --output_dir toolllama_lora \\\n    --num_train_epochs 5 \\\n    --per_device_train_batch_size 4 \\\n    --per_device_eval_batch_size 2 \\\n    --gradient_accumulation_steps 2 \\\n    --evaluation_strategy \"epoch\" \\\n    --prediction_loss_only \\\n    --save_strategy \"epoch\" \\\n    --save_total_limit 8 \\\n    --learning_rate 5e-5 \\\n    --weight_decay 0. \\\n    --warmup_ratio 0.04 \\\n    --lr_scheduler_type \"cosine\" \\\n    --logging_steps 1 \\\n    --source_model_max_length 2048 \\\n    --model_max_length 8192 \\\n    --gradient_checkpointing True \\\n    --lazy_preprocess True \\\n    --deepspeed ds_configs/stage2.json \\\n    --report_to none\n```\n\n\n## 用我们的RapidAPI服务进行推理\n请先填写[问卷](https://forms.gle/S4hqVLtnqeXcNTCJA)，我们会尽快审核然后给您发送toolbench key。然后初始化您的toolbench key:\n```bash\nexport TOOLBENCH_KEY=\"your_toolbench_key\"\n```\n### ToolLLaMA\n用以下命令用ToolLLaMA做推理:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model toolllama \\\n    --model_path /path/to/your/toolllama \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\n**lora**版本的inference:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model toolllama \\\n    --model_path huggyllama/llama-7b \\\n    --lora \\\n    --lora_path /path/to/your/toolllama_lora \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_lora_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\nlora版本的**开放域**, 用以下命令:\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline_open_domain.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --corpus_tsv_path data/retrieval/G1/corpus.tsv \\\n    --retrieval_model_path /path/to/your/retrival_model \\\n    --retrieved_api_nums 5 \\\n    --backbone_model toolllama \\\n    --model_path huggyllama/llama-7b \\\n    --lora \\\n    --lora_path /path/to/your/toolllama_lora \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file toolllama_lora_dfs_open_domain_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n### OpenAI模型\n用ChatGPT:\n```bash\nexport TOOLBENCH_KEY=\"\"\nexport OPENAI_KEY=\"\"\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model chatgpt_function \\\n    --openai_key $OPENAI_KEY \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file chatgpt_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\n用Text-Davinci-003:\n```bash\nexport TOOLBENCH_KEY=\"\"\nexport OPENAI_KEY=\"\"\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model davinci \\\n    --openai_key $OPENAI_KEY \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file davinci_dfs_inference_result \\\n    --toolbench_key $TOOLBENCH_KEY\n```\n\n## 用您自己的RapidAPI账号做推理\n要用定制化的RapidAPI账号进行推理，请在脚本中传入您的**rapidapi key**并指定`use_rapidapi_key`参数:\n```bash\nexport RAPIDAPI_KEY=\"\"\nexport OPENAI_KEY=\"\"\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model chatgpt_function \\\n    --openai_key $OPENAI_KEY \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file chatgpt_dfs_inference_result \\\n    --rapidapi_key $RAPIDAPI_KEY \\\n    --use_rapidapi_key\n```\n\n\n## 自定义API做推理\n要使用自定义API进行推理，您需要准备API文档和代码，然后修改您的query文件。例如，要添加**hello_world** API，该API的功能为返回“hello world”字符串：\n- API文档：首先生成API文档json文件（`hello_world.json`），该文件应遵循以下格式：\n```\n{\n    \"tool_description\": \"Return hello world.\",\n    \"tool_name\": \"hello world\",\n    \"title\": \"hello world\",\n    \"api_list\": [\n        {\n            \"name\": \"get_hello_world\",\n            \"url\": \"\",\n            \"description\": \"To get 'hello world'.\",\n            \"method\": \"GET\",\n            \"required_parameters\": [],\n            \"optional_parameters\": []\n        }\n    ],\n    \"standardized_name\": \"hello_world\"\n}\n```\n然后将其放在“data/toolenv/tools/”中的某个category下，可以是已有的49个现有类别之一，也可以新创建一个类别，例如`Customized`。\n- API代码：在`Customized`文件夹下创建一个名为`hello_world`的文件夹，然后编写实现API功能的代码`api.py`并将其放在`Customized/hello_world/`下。 API代码可以写成这样的格式：\n```python\ndef get_hello_world():\n    \"\"\"\n    To get hello world \n    \"\"\"\n    observation = \"hello world\"\n    return observation\n```\n现在 `data/toolenv/` 下的文件结构应该是：\n```\n├── /tools/\n│  ├── /Sports/\n│  │  ├── basketball.json\n│  │  ├── /basketball/\n│  │  │  └── api.py\n│  │  └── ...\n│  ├── ...\n│  ├── /Customized/\n│  │  ├── hello_world.json\n│  │  ├── /hello_world/\n│  │  │  └── api.py\n└── response_examples\n```\n- 修改您的query文件，查询文件应遵循以下格式：\n```\n[\n    {\n        \"query\": \"I want to get a 'hello world' string.\",\n        \"query_id\": 200001,\n        \"api_list\": [\n            {\n                \"category_name\": \"Customized\",\n                \"tool_name\": \"hello world\",\n                \"api_name\": \"get_hello_world\"\n            }\n        ]\n    }\n]\n```\n- 最后，我们可以通过运行以下命令来使用自定义的**hello_world**API进行推理：\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/qa_pipeline.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --backbone_model toolllama \\\n    --model_path ToolBench/ToolLLaMA-7b \\\n    --max_observation_length 1024 \\\n    --observ_compress_method truncate \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file /path/to/your/query/file \\\n    --output_answer_file /path/to/your/output/file \\\n    --api_customization\n```\n*Currently we only support customized API usage under close-domain setting. We plan to support open-domain soon.*\n\n## Setting up and running the interface\n\nToolBench包含一个基于[Chatbot UI](https://github.com/mckaywrigley/chatbot-ui)的Web UI，经过修改以包含在界面中使用工具的功能。它包含两个部分：后端服务器和[chatbot-ui-toolllama](https://github.com/lilbillybiscuit/chatbot-ui-toolllama)。这是一个[视频演示](assets/toolbench-demo.mp4)。\n\n### Web UI\n```bash\ngit clone https://github.com/lilbillybiscuit/chatbot-ui-toolllama\ncd chatbot-ui-toolllama\nnpm install\nnpm run dev\n```\n\n应用将在 http://localhost:3000/ 上可用\n\n### Backend server\n```bash\nexport PYTHONPATH=./\npython toolbench/inference/toolbench_server.py \\\n    --tool_root_dir data/toolenv/tools/ \\\n    --corpus_tsv_path data/retrieval/G1/corpus.tsv \\\n    --retrieval_model_path /path/to/your/retrival_model \\\n    --retrieved_api_nums 5 \\\n    --backbone_model toolllama \\\n    --model_path huggyllama/llama-7b \\\n    --lora \\\n    --lora_path /path/to/your/toolllama_lora \\\n    --max_observation_length 1024 \\\n    --method DFS_woFilter_w2 \\\n    --input_query_file data/test_instruction/G1_instruction.json \\\n    --output_answer_file data/answer/toolllama_lora_dfs_open_domain \\\n    --rapidapi_key $RAPIDAPIKEY\n```\n\nThis server will be available on `http://localhost:5000/`. To start a request, call `http://localhost:5000/stream` with a GET or POST request containing a JSON object with the following fields:\n```json\n{\n    \"text\": \"What is the weather in New York today?\",\n    \"top_k\": 5,\n    \"method\": \"DFS_woFilter_w2\"\n}\n```\n\n\n## ToolEval\n\n通过在ToolBench上对LLaMA进行微调，我们得到了**ToolLLaMA**。考虑到人工评估非常耗时，我们借鉴[AlpacaEval](https://tatsu-lab.github.io/alpaca_eval/)开发了一个高效的机器自动评估**ToolEval**，其中包含两个评估指标：\n\n- **通过率**：计算在有限的OpenAI API调用次数内成功完成指令的比例。\n\n- **偏好**：通过比较给定指令的两个答案（动作序列）来衡量。我们预先定义了一组更好答案的标准，这些标准被组织成ChatGPT的提示。我们向评估器提供测试指令和两个候选答案，并获得其偏好。我们对每个答案对进行多次评估以提高系统的可靠性。然后，我们计算**优胜率**（被评估器选择为更优的百分比）。有关详细信息，请参阅我们的论文。\n\n为了验证ChatGPT评估器在通过率和胜率方面的可靠性，我们从四种不同的方法（ChatGPT+ReACT，ChatGPT+DFSDT，ToolLLaMA+DFSDT和GPT4+DFSDT）中进行采样，为每种方法的300个测试指令获取解决方案对。然后，我们请人类标注ChatGPT+DFSDT，ToolLLaMA+DFSDT和GPT4+DFSDT的通过率，以及ChatGPT+ReACT和ChatGPT+DFSDT之间的胜率。\n\n我们的ChatGPT评估器在通过率方面与人类标注者具有高达**87.1%**的一致性，在胜率方面具有**80.3%**的一致性。这个结果表明，我们的评估器生成的评估结果与人类非常相似，并且可以视为在通过率和胜率上模拟人类评估的可靠评估器。\n\n有关ToolEval的更多细节，请参阅我们的论文。\n\n\n### Evaluation with ToolEval\n*若要复现结果，直接通过[Google Drive](https://drive.google.com/drive/folders/1yBUQ732mPu-KclJnuQELEhtKakdXFc3J)下载我们的`reproduction_data.zip`，解压后置`reproduction_data`于`ToolBench/data/`下即可，可以跳过数据准备流程。*\n- 数据准备。若要使用 ToolEval 评估您自己的模型和方法，首先需要为六个测试子集准备所有的模型预测。创建一个以您的模型和方法命名的目录，例如 `chatgpt_cot`，然后将每个测试集的预测放在该目录下。目录的文件结构应如下：\n```\n├── /chatgpt_cot/\n│  ├── /G1_instruction/\n│  │  ├── /10160_CoT@1.json\n│  │  └── ...\n│  ├── /G1_tool/\n│  │  ├── /10221_CoT@1.json\n│  │  └── ...\n│  ├── ...\n│  ├── /G3_instruction/\n│  │  ├── /10221_CoT@1.json\n│  │  └── ...\n```\n\n然后对模型预测进行预处理:\n\n```bash\nexport RAW_ANSWER_PATH=../../data/reproduction_data/model_predictions/\nexport CONVERTED_ANSWER_PATH=../../data/reproduction_data/model_predictions_converted/\nexport MODEL_NAME=chatgpt_cot\nexport METHOD=CoT\nmkdir ${CONVERTED_ANSWER_PATH}/${MODEL_NAME}\nfor test_set in G1_instruction G1_category G1_tool G2_category G2_instruction G3_instruction\ndo\n    answer_dir=${RAW_ANSWER_PATH}/${MODEL_NAME}/${test_set}\n    output_file=${CONVERTED_ANSWER_PATH}/${MODEL_NAME}/${test_set}.json\n    python convert_to_answer_format.py\\\n        --answer_dir ${answer_dir} \\\n        --method ${METHOD} \\\n        --output ${output_file}\ndone\n```\n之后，检查`${CONVERTED_ANSWER_PATH}/${MODEL_NAME}`下是否有测试集的预处理JSON文件。如果有，你就可以准备运行以下评估过程了。如果没有，请检查模型的预测是否有问题。\n\n- OpenAI Key\n准备您的OpenAI Key来搭建我们的evaluator。Key需要被存储到一个json file中，如`path/to/your/openai_key_json_file.json`：\n```bash\n[\n    {\n        \"username\": \"your_user_name\",\n        \"passwd\": \"your_password\",\n        \"api_key\": \"your_openai_key\",\n        \"organization\": \"your_organization\"\n    },\n    ...\n]\n```\n- Pass rate.\n```bash\nexport CONVERTED_ANSWER_PATH=../../data/reproduction_data/model_predictions_converted/\nexport SAVE_PATH=pass_rate_results\nexport CANDIDATE_MODEL=chatgpt_cot\nexport API_POOL_FILE=path/to/your/openai_key_json_file.json\n\npython eval_pass_rate.py \\\n    --converted_answer_path ${CONVERTED_ANSWER_PATH} \\\n    --save_path ${SAVE_PATH} \\\n    --reference_model ${CANDIDATE_MODEL} \\\n    --test_ids ../../data/test_query_ids/ \\\n    --max_eval_threads 20 \\\n    --evaluate_times 7\n\n```\n\n结果文件会被存储至${SAVE_PATH}中。\n\n- Win rate. 以下示例以ChatGPT-ReACT作为参考模型，GPT4-ReACT作为候选模型。请注意，您首先需要获取两个模型的pass rate结果，然后运行以下命令来评估GPT4-ReACT的win rate结果:\n```bash\nexport CONVERTED_ANSWER_PATH=../../data/reproduction_data/model_predictions_converted/\nexport SAVE_PATH=preference_results\nexport PASS_TARE_PATH=pass_rate_results\nexport REFERENCE_MODEL=chatgpt_cot\nexport CANDIDATE_MODEL=gpt-4-0613_cot\nexport API_POOL_FILE=path/to/your/openai_key_json_file.json\n\npython eval_preference.py \\\n    --converted_answer_path ${CONVERTED_ANSWER_PATH} \\\n    --reference_model ${REFERENCE_MODEL} \\\n    --output_model ${CANDIDATE_MODEL} \\\n    --test_ids ../../data/test_query_ids/ \\\n    --save_path ${SAVE_PATH} \\\n    --pass_rate_result_path ${PASS_TARE_PATH} \\\n    --max_eval_threads 20 \\\n    --use_pass_rate true \\\n    --evaluate_times 7\n```\n\n结果文件会被存储至${SAVE_PATH}中。\n\n更多细节请参考 [ToolEval](https://github.com/OpenBMB/ToolBench/blob/master/toolbench/tooleval/README_ZH.md).\n\n\n### Model Experiment\n\n在我们的主要实验中，ToolLLaMA展现了处理单一工具和复杂多工具指令的引人注目的能力，与ChatGPT的能力相当。以下是主要的实验结果，其中win rate的参考模型是ChatGPT-ReACT.\n\n**Pass Rate:**\n| Method | Model               | I1-Inst. | I1-Tool | I1-Cate. | I2-Inst. | I2-Cate. | I3-Inst. | Average |\n|--------|---------------------|----------|---------|----------|----------|----------|----------|---------|\n| ReACT  | Claude-2            | 5.5      | 3.5     | 5.5      | 6        | 6        | 14       | 6.8     |\n|        | Text-Davinci-003    | 12       | 20      | 20       | 8.5      | 14.5     | 24       | 16.5    |\n|        | ChatGPT             | 41.5     | 44      | 44.5     | 42.5     | 46.5     | 22       | 40.2    |\n|        | ToolLLaMA           | 25       | 29      | 33       | 30.5     | 31.5     | 25       | 29      |\n|        | GPT4                | 53.5       | 50.0    | 53.5       | 67.0     | 72.0     | 47.0       | 57.2    |\n| DFSDT  | Claude-2            | 20.5     | 31      | 18.5     | 17       | 20.5     | 28       | 22.6    |\n|        | Text-Davinci-003    | 43.5     | 44      | 46       | 37       | 42       | 46       | 43.1    |\n|        | ChatGPT             | 54.5     | 65      | 60.5     | 75       | 71.5     | 62       | 64.8    |\n|        | ToolLLaMA           | 57       | 61      | 62       | 77       | 77       | 66       | 66.7    |\n|        | ToolLLaMA-Retreiver | **64**       | 64      | 60.5     | **81.5**     | 68.5     | 65       | 67.3    |\n|        | GPT4                | 60       | **71.5**    | **67**       | 79.5     | **77.5**     | **71**       | **71.1**    |\n\n\n**Win Rate:** (Reference model: ChatGPT-ReACT)\n| Method | Model               | I1-Inst. | I1-Tool | I1-Cate. | I2-Inst. | I2-Cate. | I3-Inst. | Average |\n|--------|---------------------|----------|---------|----------|----------|----------|----------|---------|\n| ReACT  | Claude-2            | 31       | 27.8    | 33.8     | 35       | 31.5     | 47.5     | 34.4    |\n|        | Text-Davinci-003    | 28.5     | 35.3    | 31       | 29.8     | 29.8     | 45       | 33.2    |\n|        | ToolLLaMA           | 45       | 42      | 47.5     | 50.8     | 41.8     | 55       | 47      |\n|        | GPT4                | 60       | 58.8    | 63.5     | 65.8     | 60.3     | 78       | 64.4    |\n| DFSDT  | Claude-2            | 38       | 44.3    | 43.3     | 36.8     | 33.5     | 65       | 43.5    |\n|        | Text-Davinci-003    | 40.3     | 43.8    | 46.8     | 40.5     | 43.3     | 63       | 46.3    |\n|        | ChatGPT             | 60.5     | 62      | 57.3     | 72       | **64.8**     | 69       | 64.3    |\n|        | ToolLLaMA           | 55       | 55.3    | 54.5     | 68.5     | 58       | 69       | 60      |\n|        | ToolLLaMA-Retreiver | 62.3     | 59      | 55       | 68.5     | 60.8     | 73       | 63.1    |\n|        | GPT4                | **67.5**     | **67.8**    | **66.5**     | **73.3**     | 63.3     | **84**       | **70.4**    |\n\n## TODO\n- [ ] 更新使用更新数据（data-0830 版本）训练的 ToolLLaMA 结果。\n- [ ] ToolLLaMA将达到GPT-4的工具使用能力。\n\n## 工具学习相关链接\n\n鉴于基础模型的强大能力，我们期待看到它们在操纵各种工具中的应用。更多的资源，请参考以下内容：\n\n- **BMTools**. [[Project](https://github.com/OpenBMB/BMTools)]\n\n- **Tool Learning Survey**. [[Paper](https://arxiv.org/abs/2304.08354)]\n  \n- **Tool Learning Paper List**. [[Project](https://github.com/thunlp/ToolLearningPapers)]\n\n- **WebCPM**. [[Paper](https://github.com/thunlp/WebCPM)]\n\n## Citation\n如果您对ToolBench感兴趣，欢迎引用我们的工作。\n```bibtex\n@misc{qin2023toolllm,\n      title={ToolLLM: Facilitating Large Language Models to Master 16000+ Real-world APIs}, \n      author={Yujia Qin and Shihao Liang and Yining Ye and Kunlun Zhu and Lan Yan and Yaxi Lu and Yankai Lin and Xin Cong and Xiangru Tang and Bill Qian and Sihan Zhao and Runchu Tian and Ruobing Xie and Jie Zhou and Mark Gerstein and Dahai Li and Zhiyuan Liu and Maosong Sun},\n      year={2023},\n      eprint={2307.16789},\n      archivePrefix={arXiv},\n      primaryClass={cs.AI}\n}\n```\n\n```bibtex\n@misc{qin2023tool,\n      title={Tool Learning with Foundation Models}, \n      author={Yujia Qin and Shengding Hu and Yankai Lin and Weize Chen and Ning Ding and Ganqu Cui and Zheni Zeng and Yufei Huang and Chaojun Xiao and Chi Han and Yi Ren Fung and Yusheng Su and Huadong Wang and Cheng Qian and Runchu Tian and Kunlun Zhu and Shihao Liang and Xingyu Shen and Bokai Xu and Zhen Zhang and Yining Ye and Bowen Li and Ziwei Tang and Jing Yi and Yuzhang Zhu and Zhenning Dai and Lan Yan and Xin Cong and Yaxi Lu and Weilin Zhao and Yuxiang Huang and Junxi Yan and Xu Han and Xian Sun and Dahai Li and Jason Phang and Cheng Yang and Tongshuang Wu and Heng Ji and Zhiyuan Liu and Maosong Sun},\n      year={2023},\n      eprint={2304.08354},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ds_configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "preprocess",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.46875,
          "content": "accelerate==0.20.3\nfastapi==0.95.1\ngradio==3.23.0\nhttpx==0.24.0\nmarkdown-it-py==2.2.0\nnumpy==1.24.3\nprompt-toolkit==3.0.38\npydantic==1.10.7\nrequests==2.30.0\nrich==13.3.5\nrouge==1.0.1\nsentencepiece==0.1.99\nshortuuid==1.0.11\ntiktoken==0.4.0\ntokenizers==0.13.3\ntorch>=1.12.0\ntransformers==4.28.1\nuvicorn==0.22.0\nbitsandbytes==0.38.1\npeft==0.3.0\nlangchain==0.0.229\ndeepspeed==0.9.2\nsentence_transformers==2.2.2\ntensorboard\nopenai\nscipy\ntermcolor\nflask\nflask_cors\nsentence_transformers"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolbench",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}