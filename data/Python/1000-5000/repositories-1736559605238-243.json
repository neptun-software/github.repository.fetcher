{
  "metadata": {
    "timestamp": 1736559605238,
    "page": 243,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NewFuture/DDNS",
      "stars": 4408,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".build",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7509765625,
          "content": "config.*.json\n\n.vscode\n*.temp\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n!.build/ddns.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask instance folder\ninstance/\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n# =========================\n# Operating System Files\n# =========================\n\n# OSX\n# =========================\n\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n# Windows\n# =========================\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\nconfig.json\n\n.venv"
        },
        {
          "name": ".release",
          "type": "tree",
          "content": null
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0166015625,
          "content": "ddns.newfuture.cc"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2900390625,
          "content": "FROM six8/pyinstaller-alpine:alpine-3.6-pyinstaller-v3.4\r\nWORKDIR /app\r\nCOPY . .\r\nRUN pyinstaller --onefile --noconfirm --clean ./.build/ddns.spec\r\n\r\nFROM alpine:latest\r\nLABEL maintainer=\"NN708\"\r\nCOPY --from=0 /app/entrypoint.sh /\r\nCOPY --from=0 /app/dist/ddns /\r\nENTRYPOINT [ \"/entrypoint.sh\" ]\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0849609375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 - 2019 New Future, https://ddns.newfuture.cc/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.1337890625,
          "content": "# [DDNS](https://github.com/NewFuture/DDNS)\n\n> 自动更新 DNS 解析 到本机 IP 地址,支持 ipv4 和 ipv6 以 本地(内网)IP 和 公网 IP。\n> 代理模式,支持自动创建域名记录。\n\n[![PyPI](https://img.shields.io/pypi/v/ddns.svg?label=DDNS&style=social)](https://pypi.org/project/ddns/)\n[![Build Status](https://github.com/NewFuture/DDNS/actions/workflows/build.yml/badge.svg?event=push)](https://github.com/NewFuture/DDNS/actions/workflows/build.yml)\n[![Publish Status](https://github.com/NewFuture/DDNS/actions/workflows/publish.yml/badge.svg)](https://github.com/NewFuture/DDNS/releases/latest)\n\n---\n\n## Features\n\n- 兼容和跨平台:\n  - [x] 可执行文件(无需 python 环境)\n  - [x] 多系统兼容 ![cross platform](https://img.shields.io/badge/platform-windows_%7C%20linux_%7C%20osx-success.svg?style=social)\n  - [x] python3 支持 ![PyPI - Python Version](https://img.shields.io/pypi/pyversions/ddns.svg?style=social)(2.x支持python2和python3)\n  - [x] PIP 安装 ![PyPI - Wheel](https://img.shields.io/pypi/wheel/ddns.svg?style=social)\n  - [x] Docker 支持(@NN708)\n- 域名支持:\n  - [x] 多个域名支持\n  - [x] 多级域名解析\n  - [x] 自动创建新记录\n- IP 类型:\n  - [x] 内网 IPv4 / IPv6\n  - [x] 公网 IPv4 / IPv6 (支持自定义 API)\n  - [x] 自定义命令(shell)\n  - [x] 正则选取支持(@rufengsuixing)\n- 网络代理:\n  - [x] http 代理支持\n  - [x] 多代理自动切换\n- 服务商支持:\n  - [x] [DNSPOD](https://www.dnspod.cn/)\n  - [x] [阿里 DNS](http://www.alidns.com/)\n  - [x] [DNS.COM](https://www.dns.com/)(@loftor-git)\n  - [x] [DNSPOD 国际版](https://www.dnspod.com/)\n  - [x] [CloudFlare](https://www.cloudflare.com/)(@tongyifan)\n  - [x] [HE.net](https://dns.he.net/)(@NN708) (不支持自动创建记录)\n  - [x] [华为云](https://huaweicloud.com/)(@cybmp3)\n- 其他:\n  - [x] 可设置定时任务\n  - [x] TTL 配置支持\n  - [x] 本地文件缓存(减少 API 请求)\n  - [x] 地址变更时触发自定义回调API(与 DDNS 功能互斥)\n\n## 使用\n\n### ① 安装\n\n根据需要选择一种方式: `二进制`版,`pip`版,`源码`运行,或者`Docker`\n\n- #### pip 安装(需要 pip 或 easy_install)\n  1. 安装 ddns: `pip install ddns` 或 `easy_install ddns`\n  2. 运行: `ddns`\n- #### 二进制版(单文件,无需 python)\n  - Windows [ddns.exe](https://github.com/NewFuture/DDNS/releases/latest)\n  - Linux (仅 Ubuntu 测试) [ddns](https://github.com/NewFuture/DDNS/releases/latest)\n  - Mac OSX [ddns-osx](https://github.com/NewFuture/DDNS/releases/latest)\n- #### 源码运行(无任何依赖, 需 python 环境)\n  1. clone 或者[下载此仓库](https://github.com/NewFuture/DDNS/archive/master.zip)并解压\n  2. 运行./run.py (widnows 双击`run.bat`或者运行`python run.py`)\n- #### Docker(需要安装 Docker)\n  - 使用环境变量：\n    ```\n    docker run -d \\\n      -e DDNS_DNS=dnspod \\\n      -e DDNS_ID=12345 \\\n      -e DDNS_TOKEN=mytokenkey \\\n      -e DDNS_IPV4=ddns.newfuture.cc \\\n      -e DDNS_IPV6=ddns.newfuture.cc \\\n      --network host \\\n      newfuture/ddns\n    ```\n  - 使用配置文件：\n    ```\n    docker run -d \\\n      -v /path/to/config.json:/config.json \\\n      --network host \\\n      newfuture/ddns\n    ```\n\n### ② 快速配置\n\n1. 申请 api `token`,填写到对应的`id`和`token`字段:\n\n   - [DNSPOD(国内版)创建 token](https://support.dnspod.cn/Kb/showarticle/tsid/227/)\n   - [阿里云 accesskey](https://help.aliyun.com/document_detail/87745.htm)\n   - [DNS.COM API Key/Secret](https://www.dns.com/member/apiSet)\n   - [DNSPOD(国际版)](https://www.dnspod.com/docs/info.html#get-the-user-token)\n   - [CloudFlare API Key](https://support.cloudflare.com/hc/en-us/articles/200167836-Where-do-I-find-my-Cloudflare-API-key-) (除了`email + API KEY`,也可使用`Token`需要列出 Zone 权限)\n   - [HE.net DDNS 文档](https://dns.he.net/docs.html)（仅需将设置的密码填入`token`字段，`id`字段可留空）\n   - [华为 APIKEY 申请](https://console.huaweicloud.com/iam/)（点左边访问密钥，然后点新增访问密钥）\n   - 自定义回调的参数填写方式请查看下方的自定义回调配置说明\n\n2. 修改配置文件,`ipv4`和`ipv6`字段，为待更新的域名,详细参照配置说明\n\n## 详细配置\n\n所有字段可通过三种方式进行配置\n\n1. 命令行参数 `ddns --key=value` (`ddns -h` 查看详情)，优先级最高\n2. JSON配置文件(值为null认为是有效值，会覆盖环境变量的设置，如果没有对应的key则会尝试试用环境变量)\n3. 环境变量DDNS_前缀加上key 全大写或者全小写 (`${ddns_key}` 或 `${DDNS_KEY}`)\n\n<details open>\n\n<summary markdown=\"span\">config.json 配置文件\n</summary>\n\n- 首次运行会自动生成一个模板配置文件\n- 可以使用 `-c`使用指定的配置文件 (默认读取当前目录的 config.json)\n- 推荐使用 vscode 等支持 JsonSchema 的编辑器编辑配置文件\n\n```bash\nddns -c path/to/config.json\n# 或者源码运行\npython run.py -c /path/to/config.json\n```\n\n#### 配置参数表\n\n|  key   |        type        | required |   default   |    description    | tips                                                                                                        |\n| :----: | :----------------: | :------: | :---------: | :---------------: | ----------------------------------------------------------------------------------------------------------- |\n|   id   |       string       |    √     |     无      |    api 访问 ID    | Cloudflare 为邮箱(使用 Token 时留空)<br>HE.net 可留空<br>华为云为 Access Key ID (AK)                                                       |\n| token  |       string       |    √     |     无      |  api 授权 token   | 部分平台叫 secret key , **反馈粘贴时删除**                                                                  |\n|  dns   |       string       |    No    | `\"dnspod\"`  |    dns 服务商     | 阿里 DNS 为`alidns`,<br>Cloudflare 为 `cloudflare`,<br>dns.com 为 `dnscom`,<br>DNSPOD 国内为 `dnspod`,<br>DNSPOD 国际版为 `dnspod_com`,<br>HE.net 为`he`,<br>华为 DNS 为`huaweidns`,<br>自定义回调为`callback` |\n|  ipv4  |       array        |    No    |    `[]`     |   ipv4 域名列表   | 为`[]`时,不会获取和更新 IPv4 地址                                                                           |\n|  ipv6  |       array        |    No    |    `[]`     |   ipv6 域名列表   | 为`[]`时,不会获取和更新 IPv6 地址                                                                           |\n| index4 | string\\|int\\|array |    No    | `\"default\"` |   ipv4 获取方式   | 可设置`网卡`,`内网`,`公网`,`正则`等方式                                                                     |\n| index6 | string\\|int\\|array |    No    | `\"default\"` |   ipv6 获取方式   | 可设置`网卡`,`内网`,`公网`,`正则`等方式                                                                     |\n|  ttl   |       number       |    No    |   `null`    | DNS 解析 TTL 时间 | 不设置采用 DNS 默认策略                                                                                     |\n| proxy  |       string       |    No    |     无      | http 代理`;`分割  | 多代理逐个尝试直到成功,`DIRECT`为直连                                                                       |\n| debug  |        bool        |    No    |   `false`   |   是否开启调试    | 运行异常时,打开调试输出,方便诊断错误                                                                        |\n| cache  |    string\\|bool    |    No    |   `true`    |   是否缓存记录    | 正常情况打开避免频繁更新,默认位置为临时目录下`ddns.cache`,<br>也可以指定一个具体文件实现自定义文件缓存位置         |\n\n#### index4 和 index6 参数说明\n\n- 数字(`0`,`1`,`2`,`3`等): 第 i 个网卡 ip\n- 字符串`\"default\"`(或者无此项): 系统访问外网默认 IP\n- 字符串`\"public\"`: 使用公网 ip(使用公网 API 查询,url 的简化模式)\n- 字符串`\"url:xxx\"`: 打开 URL `xxx`(如:`\"url:http://ip.sb\"`),从返回的数据提取 IP 地址\n- 字符串`\"regex:xxx\"` 正则表达(如`\"regex:192.*\"`): 提取`ifconfig`/`ipconfig`中与之匹配的首个 IP 地址,**注意 json 转义**(`\\`要写成`\\\\`)\n  - `\"192.*\"`表示 192 开头的所有 ip\n  - 如果想匹配`10.00.xxxx`应该写成`\"regex:10\\\\.00\\\\..\\*\"`(`\"\\\\\"`json 转义成`\\`)\n- 字符串`\"cmd:xxxx\"`: 执行命令`xxxx`的 stdout 输出结果作为目标 IP\n- 字符串`\"shell:xxx\"`: 使用系统 shell 运行`xxx`,并把结果 stdout 作为目标 IP\n- `false`: 强制禁止更新 ipv4 或 ipv6 的 DNS 解析\n- 列表：依次执行列表中的index规则，并将最先获得的结果作为目标 IP\n  - 例如`[\"public\", \"172.*\"]`将先查询公网API，未获取到IP后再从本地寻找172开头的IP\n\n#### 自定义回调配置说明\n\n- `id` 字段填写回调地址，以 HTTP 或 HTTPS 开头，推荐采用 HTTPS 方式的回调 API ，当 `token` 字段非空且 URL 参数包含下表所示的常量字符串时，常量会被程序替换为实际值\n- `token` 字段为 POST 参数，本字段为空或不存在则使用 GET 方式发起回调，回调参数采用 JSON 格式编码，当 JSON 的首层参数值包含下表所示的常量字符串时，常量会被程序替换为实际值\n\n| 常量名称          | 常量内容               | 说明      |\n| ---------------- | ---------------------- | -------- |\n| `__DOMAIN__`     | DDNS 域名              |          |\n| `__RECORDTYPE__` | DDNS 记录类型           |          |\n| `__TTL__`        | DDNS TTL               |          |\n| `__TIMESTAMP__`  | 请求发起时间戳          | 包含小数 |\n| `__IP__`         | 获取的对应类型的IP地址   |          |\n\n#### 配置示例\n\n```json\n{\n  \"$schema\": \"https://ddns.newfuture.cc/schema/v2.8.json\",\n  \"id\": \"12345\",\n  \"token\": \"mytokenkey\",\n  \"dns\": \"dnspod 或 dnspod_com 或 alidns 或 dnscom 或 cloudflare 或 he 或 huaweidns 或 callback\",\n  \"ipv4\": [\"ddns.newfuture.cc\", \"ipv4.ddns.newfuture.cc\"],\n  \"ipv6\": [\"ddns.newfuture.cc\", \"ipv6.ddns.newfuture.cc\"],\n  \"index4\": 0,\n  \"index6\": \"public\",\n  \"ttl\": 600,\n  \"proxy\": \"127.0.0.1:1080;DIRECT\",\n  \"debug\": false\n}\n```\n\n</details>\n\n## 定时任务\n\n<details>\n\n<summary markdown=\"span\">可以通过脚本设置定时任务(默认每5分钟检查一次ip,自动更新)\n</summary>\n\n#### Windows\n\n- [推荐]以系统身份运行,右键\"以管理员身份运行\"`task.bat`(或者在管理员命令行中运行)\n- 以当前用户身份运行定时任务,双击或者运行`task.bat` (执行时会闪黑框)\n\n#### Linux\n\n- 使用init.d和crontab:\n`sudo ./task.sh`\n- 使用systemd:\n    ```bash\n    安装:\n    sudo ./systemd.sh install\n    卸载:\n    sudo ./systemd.sh uninstall\n    ```\n  该脚本安装的文件符合 [Filesystem Hierarchy Standard (FHS)](https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard)：\n  可执行文件所在目录为 `/usr/share/DDNS`\n  配置文件所在目录为 `/etc/DDNS`\n\n#### Docker\n\nDocker镜像在无额外参数的情况下，已默认启用每5分钟执行一次的定时任务\n</details>\n\n## FAQ\n\n<details>\n\n<summary markdown=\"span\"> Windows Server [SSL: CERTIFICATE_VERIFY_FAILED]\n</summary>\n\n> Windows Server 默认安全策略会禁止任何未添加的信任 ssl 证书,可手动添加一下对应的证书 [#56](https://github.com/NewFuture/DDNS/issues/56#issuecomment-487371078)\n\n使用系统自带的 IE 浏览器访问一次对应的 API 即可\n\n- alidns 打开: <https://alidns.aliyuncs.com>\n- cloudflare 打开: <https://api.cloudflare.com>\n- dns.com 打开: <https://www.dns.com>\n- dnspod.cn 打开: <https://dnsapi.cn>\n- dnspod 国际版: <https://api.dnspod.com>\n- 华为 DNS <https://dns.myhuaweicloud.com>\n  </details>\n\n<details>\n\n<summary markdown=\"span\"> 问题排查反馈\n</summary>\n\n1. 先确认排查是否是系统/网络环境问题\n2. 在[issues](https://github.com/NewFuture/DDNS/issues)中搜索是否有类似问题\n3. 前两者均无法解决或者确定是 bug,[在此新建 issue](https://github.com/NewFuture/DDNS/issues/new)\n   - [ ] 开启 debug 配置\n   - [ ] 附上这些内容 **运行版本和方式**,**系统环境**, **出错日志**,**去掉 id/token**的配置文件\n   - [ ] 源码运行注明使用的 python 环境\n\n</details>\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.08203125,
          "content": "markdown: kramdown\nkramdown:\n  parse_block_html: true\n\nplugins:\n  - jekyll-mentions\n"
        },
        {
          "name": "dns",
          "type": "tree",
          "content": null
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.2470703125,
          "content": "#!/bin/sh\n\nif [ $# -eq 0 ]; then\n  printenv > /etc/environment\n  echo \"*/5 * * * *   /ddns -c /config.json\" > /etc/crontabs/root\n  exec crond -f\nelse\n  first=`echo $1 | cut -c1`\n  if [ \"$first\" = \"-\" ]; then\n    exec /ddns $@\n  else\n    exec $@\n  fi\nfi\n"
        },
        {
          "name": "run.bat",
          "type": "blob",
          "size": 0.146484375,
          "content": "@ECHO OFF\n\nIF \"%1\" EQU \"\" (\n    python \"%~dp0run.py\" -c \"%~dp0config.json\"\n    PAUSE\n) ELSE (\n    python \"%~dp0run.py\" -c \"%~dp0config.json\" >> \"%1\"\n)"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 5.8154296875,
          "content": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\"\"\"\nDDNS\n@author: New Future\n@modified: rufengsuixing\n\"\"\"\nfrom __future__ import print_function\nfrom time import ctime, asctime\nfrom os import path, environ, name as os_name\nfrom tempfile import gettempdir\nfrom logging import DEBUG, basicConfig, info, warning, error, debug\nfrom subprocess import check_output\n\nimport sys\n\nfrom util import ip\nfrom util.cache import Cache\nfrom util.config import init_config, get_config\n\n__version__ = \"${BUILD_VERSION}@${BUILD_DATE}\"  # CI 时会被Tag替换\n__description__ = \"automatically update DNS records to dynamic local IP [自动更新DNS记录指向本地IP]\"\n__doc__ = \"\"\"\nddns[%s]\n(i) homepage or docs [文档主页]: https://ddns.newfuture.cc/\n(?) issues or bugs [问题和帮助]: https://github.com/NewFuture/DDNS/issues\nCopyright (c) New Future (MIT License)\n\"\"\" % (__version__)\n\nenviron[\"DDNS_VERSION\"] = \"${BUILD_VERSION}\"\n\nif getattr(sys, 'frozen', False):\n    # https://github.com/pyinstaller/pyinstaller/wiki/Recipe-OpenSSL-Certificate\n    environ['SSL_CERT_FILE'] = path.join(\n        getattr(sys, '_MEIPASS'), 'lib', 'cert.pem')\n\n\ndef get_ip(ip_type, index=\"default\"):\n    \"\"\"\n    get IP address\n    \"\"\"\n    if index is False:  # disabled\n        return False\n    elif type(index) is list:  # 如果获取到的规则是列表，则依次判断列表中每一个规则，直到找到一个可以正确获取到的IP\n        value = None\n        for i in index:\n            value = get_ip(ip_type, i)\n            if value:\n                break\n    elif str(index).isdigit():  # 数字 local eth\n        value = getattr(ip, \"local_v\" + ip_type)(index)\n    elif index.startswith('cmd:'):  # cmd\n        value = str(check_output(index[4:]).strip().decode('utf-8'))\n    elif index.startswith('shell:'):  # shell\n        value = str(check_output(\n            index[6:], shell=True).strip().decode('utf-8'))\n    elif index.startswith('url:'):  # 自定义 url\n        value = getattr(ip, \"public_v\" + ip_type)(index[4:])\n    elif index.startswith('regex:'):  # 正则 regex\n        value = getattr(ip, \"regex_v\" + ip_type)(index[6:])\n    elif any((c in index) for c in '*.:'):  # 兼容 regex\n        value = getattr(ip, \"regex_v\" + ip_type)(index)\n    else:\n        value = getattr(ip, index + \"_v\" + ip_type)()\n\n    return value\n\n\ndef change_dns_record(dns, proxy_list, **kw):\n    for proxy in proxy_list:\n        if not proxy or (proxy.upper() in ['DIRECT', 'NONE']):\n            dns.Config.PROXY = None\n        else:\n            dns.Config.PROXY = proxy\n        record_type, domain = kw['record_type'], kw['domain']\n        print('\\n%s %s(%s) ==> %s [via %s]' %\n              (asctime(), domain, record_type, kw['ip'], proxy))\n        try:\n            return dns.update_record(domain, kw['ip'], record_type=record_type)\n        except Exception as e:\n            error(e)\n    return False\n\n\ndef update_ip(ip_type, cache, dns, proxy_list):\n    \"\"\"\n    更新IP\n    \"\"\"\n    ipname = 'ipv' + ip_type\n    domains = get_config(ipname)\n    if not domains:\n        return None\n    if not isinstance(domains, list):\n        domains = domains.strip('; ').replace(\n            ',', ';').replace(' ', ';').split(';')\n    index_rule = get_config('index' + ip_type, \"default\")  # 从配置中获取index配置\n    address = get_ip(ip_type, index_rule)\n    if not address:\n        error('Fail to get %s address!', ipname)\n        return False\n    elif cache and (address == cache[ipname]):\n        print('.', end=\" \")  # 缓存命中\n        return True\n    record_type = (ip_type == '4') and 'A' or 'AAAA'\n    update_fail = False  # https://github.com/NewFuture/DDNS/issues/16\n    for domain in domains:\n        domain = domain.lower()  # https://github.com/NewFuture/DDNS/issues/431\n        if change_dns_record(dns, proxy_list, domain=domain, ip=address, record_type=record_type):\n            update_fail = True\n    if cache is not False:\n        # 如果更新失败删除缓存\n        cache[ipname] = update_fail and address\n\n\ndef main():\n    \"\"\"\n    更新\n    \"\"\"\n    init_config(__description__, __doc__, __version__)\n    # Dynamicly import the dns module as configuration\n    dns_provider = str(get_config('dns', 'dnspod').lower())\n    dns = getattr(__import__('dns', fromlist=[dns_provider]), dns_provider)\n    dns.Config.ID = get_config('id')\n    dns.Config.TOKEN = get_config('token')\n    dns.Config.TTL = get_config('ttl')\n    if get_config('debug'):\n        ip.DEBUG = get_config('debug')\n        basicConfig(\n            level=DEBUG,\n            format='%(asctime)s <%(module)s.%(funcName)s> %(lineno)d@%(pathname)s \\n[%(levelname)s] %(message)s')\n        print(\"DDNS[\", __version__, \"] run:\", os_name, sys.platform)\n        if get_config(\"config\"):\n            print(\"Configuration was loaded from <==\",\n                  path.abspath(get_config(\"config\")))\n        print(\"=\" * 25, ctime(), \"=\" * 25, sep=' ')\n\n    proxy = get_config('proxy') or 'DIRECT'\n    proxy_list = proxy if isinstance(\n        proxy, list) else proxy.strip('; ').replace(',', ';').split(';')\n\n    cache_config = get_config('cache', True)\n    if cache_config is False:\n        cache = cache_config\n    elif cache_config is True:\n        cache = Cache(path.join(gettempdir(), 'ddns.cache'))\n    else:\n        cache = Cache(cache_config)\n\n    if cache is False:\n        info(\"Cache is disabled!\")\n    elif get_config(\"config_modified_time\") is None or get_config(\"config_modified_time\") >= cache.time:\n        warning(\"Cache file is out of dated.\")\n        cache.clear()\n    else:\n        debug(\"Cache is empty.\")\n    update_ip('4', cache, dns, proxy_list)\n    update_ip('6', cache, dns, proxy_list)\n\n\nif __name__ == '__main__':\n    if sys.version_info.major == 3 and os_name == 'nt':\n        from io import TextIOWrapper\n        sys.stdout = TextIOWrapper(sys.stdout.detach(), encoding='utf-8')\n        sys.stderr = TextIOWrapper(sys.stderr.detach(), encoding='utf-8')\n    main()\n"
        },
        {
          "name": "schema.json",
          "type": "blob",
          "size": 4.0595703125,
          "content": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema\",\n  \"$id\": \"https://ddns.newfuture.cc/schema.json\",\n  \"description\": \"[Deprecated] 已弃用,请使用 https://ddns.newfuture.cc/schema/v2.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"$schema\": {\n      \"type\": \"string\",\n      \"title\": \"please use https://ddns.newfuture.cc/schema/v2.json\",\n      \"description\": \"请更换为 https://ddns.newfuture.cc/schema/v2.json\",\n      \"enum\": [\n        \"https://ddns.newfuture.cc/schema/v2.json\",\n        \"http://ddns.newfuture.cc/schema/v2.json\"\n      ]\n    },\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"string\",\n      \"title\": \"ID or Email\",\n      \"description\": \"DNS服务API认证的ID或者邮箱\"\n    },\n    \"token\": {\n      \"$id\": \"/properties/token\",\n      \"type\": \"string\",\n      \"title\": \"API Token\",\n      \"description\": \"DNS服务商的访问Token或者Key\"\n    },\n    \"dns\": {\n      \"$id\": \"/properties/dns\",\n      \"type\": \"string\",\n      \"title\": \"DNS Provider\",\n      \"description\": \"dns服务商:阿里为alidns,DNS.COM为dnscom,DNSPOD国际版为(dnspod_com),cloudflare,HE.net为he\",\n      \"default\": \"dnspod\",\n      \"examples\": [\n        \"dnspod\",\n        \"alidns\",\n        \"cloudflare\"\n      ],\n      \"enum\": [\n        \"dnspod\",\n        \"alidns\",\n        \"cloudflare\",\n        \"dnspod_com\",\n        \"dnscom\",\n        \"he\"\n      ]\n    },\n    \"ipv4\": {\n      \"$id\": \"/properties/ipv4\",\n      \"title\": \"IPv4 domain list\",\n      \"description\": \"待更新的IPv4 域名列表\",\n      \"type\": \"array\",\n      \"uniqueItems\": true,\n      \"items\": {\n        \"$id\": \"/properties/ipv4/items\",\n        \"title\": \"ipv4 domain for DDNS\",\n        \"type\": \"string\",\n        \"pattern\": \"^([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,18}$\",\n        \"examples\": [\n          \"newfuture.cc\",\n          \"ipv4.example.newfuture.cc\"\n        ]\n      }\n    },\n    \"ipv6\": {\n      \"$id\": \"/properties/ipv6\",\n      \"type\": \"array\",\n      \"title\": \"IPv6 domain list\",\n      \"description\": \"待更新的IPv6 域名列表\",\n      \"uniqueItems\": true,\n      \"items\": {\n        \"$id\": \"/properties/ipv6/items\",\n        \"title\": \"The ipv6 domain for DDNS\",\n        \"type\": \"string\",\n        \"pattern\": \"^([a-zA-Z0-9]([a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])?\\\\.)+[a-zA-Z]{2,6}$\",\n        \"examples\": [\n          \"newfuture.cc\",\n          \"ipv6.example.newfuture.cc\"\n        ]\n      }\n    },\n    \"index4\": {\n      \"$id\": \"/properties/index4\",\n      \"type\": [\n        \"string\",\n        \"integer\",\n        \"boolean\"\n      ],\n      \"title\": \"IPv4 address Setting\",\n      \"description\": \"本机 IPv4 获取方式设置\",\n      \"default\": \"default\",\n      \"examples\": [\n        \"default\",\n        \"public\",\n        0,\n        1,\n        \"192\\\\\\\\.168\\\\\\\\..*\",\n        false\n      ]\n    },\n    \"index6\": {\n      \"$id\": \"/properties/index6\",\n      \"type\": [\n        \"string\",\n        \"integer\",\n        \"boolean\"\n      ],\n      \"title\": \"IPv6 address Setting\",\n      \"description\": \"本机 IPv6 获取方式设置\",\n      \"default\": \"default\",\n      \"examples\": [\n        \"default\",\n        \"public\",\n        0,\n        1,\n        \"2404:f801:10:.*\",\n        false\n      ]\n    },\n    \"ttl\": {\n      \"$id\": \"/properties/ttl\",\n      \"type\": [\n        \"number\",\n        \"null\"\n      ],\n      \"title\": \"TTL\",\n      \"description\": \"设置DNS TTL,默认不填读取DNS服务商的配置\",\n      \"default\": null,\n      \"examples\": [\n        600,\n        null\n      ]\n    },\n    \"proxy\": {\n      \"$id\": \"/properties/proxy\",\n      \"type\": [\n        \"string\",\n        \"null\"\n      ],\n      \"title\": \"HTTP Proxy Setting\",\n      \"description\": \"DIRECT表示直连,多个代理分号(;)分割逐个尝试直到成功\",\n      \"pattern\": \"^[a-zA-Z0-9\\\\-;_:\\\\.]*$\",\n      \"examples\": [\n        \"127.0.0.1:1080;DIRECT\"\n      ]\n    },\n    \"debug\": {\n      \"$id\": \"/properties/debug\",\n      \"type\": \"boolean\",\n      \"title\": \"Enable Debug Mode\",\n      \"description\": \"是否启用调试模式显示更多信息\",\n      \"default\": false,\n      \"examples\": [\n        false,\n        true\n      ]\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"token\"\n  ],\n  \"additionalProperties\": false\n}"
        },
        {
          "name": "schema",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.6435546875,
          "content": "[metadata]\n# This includes the license file(s) in the wheel.\n# https://wheel.readthedocs.io/en/stable/user_guide.html#including-license-files-in-the-generated-wheel-file\nlicense_files = LICENSE\n\n[bdist_wheel]\n# This flag says to generate wheels that support both Python 2 and Python\n# 3. If your code will not run unchanged on both Python 2 and 3, you will\n# need to generate separate wheels for each Python version that you\n# support. Removing this line (or setting universal to 0) will prevent\n# bdist_wheel from trying to make a universal wheel. For more see:\n# https://packaging.python.org/guides/distributing-packages-using-setuptools/#wheels\nuniversal=1"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 9.275390625,
          "content": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\n\"\"\"A setuptools based setup module.\n\nSee:\nhttps://packaging.python.org/guides/distributing-packages-using-setuptools/\nhttps://github.com/pypa/sampleproject\n\"\"\"\n\nfrom time import time\nfrom os import path, environ\n# io.open is needed for projects that support Python 2.7\n# It ensures open() defaults to text mode with universal newlines,\n# and accepts an argument to specify the text encoding\n# Python 3 only projects can skip this import\nfrom io import open\n# Always prefer setuptools over distutils\nfrom setuptools import setup, find_packages\nfrom run import __description__\n\nhere = path.abspath(path.dirname(__file__))\n\n# Clean dist after binary build\nif path.isfile('dist/ddns') or path.isfile('dist/ddns.exe') or path.isfile('dist/ddns-osx'):\n    from shutil import rmtree\n    rmtree('dist/')\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Get version from environment vars\nif 'TRAVIS_TAG' in environ:\n    version = environ['TRAVIS_TAG']  # `TRAVIS_TAG` from Travis\nelif 'BUILD_SOURCEBRANCHNAME' in environ:\n    version = environ['BUILD_SOURCEBRANCHNAME']  # from azure pipelines\nelif 'GITHUB_REF_NAME' in environ:  # github actions\n    ref = environ['GITHUB_REF_NAME']\n    if ref == 'master' or ref == 'main':  # CI\n        version = '0.0.b' + str(int(time()))\n    elif ref.startswith('v') or ref.startswith('V'):  # Tag\n        version = ref\n    else:  # PR\n        version = '0.0.a1'\nelse:\n    raise Exception(\"setup.py should be run in CI (Travis or AzurePipelines)\")\nversion = version.strip('v').strip('V')\n\n# Arguments marked as \"Required\" below must be included for upload to PyPI.\n# Fields marked as \"Optional\" may be commented out.\n\nsetup(\n    # This is the name of your project. The first time you publish this\n    # package, this name will be registered for you. It will determine how\n    # users can install this project, e.g.:\n    #\n    # $ pip install sampleproject\n    #\n    # And where it will live on PyPI: https://pypi.org/project/sampleproject/\n    #\n    # There are some restrictions on what makes a valid project name\n    # specification here:\n    # https://packaging.python.org/specifications/core-metadata/#name\n    name='ddns',  # Required\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    #\n    # For a discussion on single-sourcing the version across setup.py and the\n    # project code, see\n    # https://packaging.python.org/en/latest/single_source_version.html\n    version=version,  # Required\n\n    # This is a one-line description or tagline of what your project does. This\n    # corresponds to the \"Summary\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#summary\n    # Optional\n    description=__description__,\n\n    # This is an optional longer description of your project that represents\n    # the body of text which users will see when they visit PyPI.\n    #\n    # Often, this is the same as your README, so you can just read it in from\n    # that file directly (as we have already done above)\n    #\n    # This field corresponds to the \"Description\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-optional\n    long_description=long_description,  # Optional\n\n    # Denotes that our long_description is in Markdown; valid values are\n    # text/plain, text/x-rst, and text/markdown\n    #\n    # Optional if long_description is written in reStructuredText (rst) but\n    # required for plain-text or Markdown; if unspecified, \"applications should\n    # attempt to render [the long_description] as text/x-rst; charset=UTF-8 and\n    # fall back to text/plain if it is not valid rst\" (see link below)\n    #\n    # This field corresponds to the \"Description-Content-Type\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#description-content-type-optional\n    long_description_content_type='text/markdown',  # Optional (see note above)\n\n    # This should be a valid link to your project's main homepage.\n    #\n    # This field corresponds to the \"Home-Page\" metadata field:\n    # https://packaging.python.org/specifications/core-metadata/#home-page-optional\n    url='https://ddns.newfuture.cc',  # Optional\n\n    # This should be your name or the name of the organization which owns the\n    # project.\n    author='NewFuture',  # Optional\n\n    # This should be a valid email address corresponding to the author listed\n    # above.\n    author_email='python@newfuture.cc',  # Optional\n\n    # Classifiers help users find your project by categorizing it.\n    #\n    # For a list of valid classifiers, see https://pypi.org/classifiers/\n    classifiers=[  # Optional\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 5 - Production/Stable',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        # These classifiers are *not* checked by 'pip install'. See instead\n        # 'python_requires' below.\n        # 'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a string of words separated by whitespace, not a list.\n    keywords='ddns ipv6 ipv4 dns dnspod alidns cloudflare',  # Optional\n\n    # You can just specify package directories manually here if your project is\n    # simple. Or you can use find_packages().\n    #\n    # Alternatively, if you just want to distribute a single Python file, use\n    # the `py_modules` argument instead as follows, which will expect a file\n    # called `my_module.py` to exist:\n    #\n    py_modules=[\"run\"],\n    #\n    packages=find_packages(\n        exclude=['contrib', 'docs', 'tests', 'dist']),  # Required\n\n    # Specify which Python versions you support. In contrast to the\n    # 'Programming Language' classifiers above, 'pip install' will check this\n    # and refuse to install the project if the version does not match. If you\n    # do not support Python 2, you can simplify this to '>=3.5' or similar, see\n    # https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires\n    python_requires='>=2.5, <4',\n\n    # This field lists other packages that your project depends on to run.\n    # Any package you put here will be installed by pip when your project is\n    # installed, so they must be valid existing projects.\n    #\n    # For an analysis of \"install_requires\" vs pip's requirements files see:\n    # https://packaging.python.org/en/latest/requirements.html\n    # install_requires=[],  # Optional\n\n    # List additional groups of dependencies here (e.g. development\n    # dependencies). Users will be able to install these using the \"extras\"\n    # syntax, for example:\n    #\n    #   $ pip install sampleproject[dev]\n    #\n    # Similar to `install_requires` above, these must be valid existing\n    # projects.\n    # extras_require={  # Optional\n    #     'dev': ['check-manifest'],\n    #     'test': ['coverage'],\n    # },\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.\n    #\n    # If using Python 2.6 or earlier, then these have to be included in\n    # MANIFEST.in as well.\n    # package_data={  # Optional\n    #     'sample': ['package_data.dat'],\n    # },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages. See:\n    # http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files\n    #\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    # data_files=[('my_data', ['data/data_file'])],  # Optional//\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # `pip` to create the appropriate form of executable for the target\n    # platform.\n    #\n    # For example, the following would provide a command called `sample` which\n    # executes the function `main` from this package when invoked:\n    entry_points={  # Optional\n        'console_scripts': [\n            'ddns=run:main',\n        ],\n    },\n\n    # List additional URLs that are relevant to your project as a dict.\n    #\n    # This field corresponds to the \"Project-URL\" metadata fields:\n    # https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use\n    #\n    # Examples listed include a pattern for specifying where the package tracks\n    # issues, where the source is hosted, where to say thanks to the package\n    # maintainers, and where to support the project financially. The key is\n    # what's used to render the link text on PyPI.\n    project_urls={  # Optional\n        'Bug Reports': 'https://github.com/NewFuture/DDNS/issues',\n        'Source': 'https://github.com/NewFuture/DDNS',\n    },\n    license=\"MIT\",\n    platforms=['any'],\n)\n"
        },
        {
          "name": "systemd.sh",
          "type": "blob",
          "size": 1.388671875,
          "content": "#!/bin/bash\nservice='[Unit]\nDescription=NewFuture ddns\nAfter=network.target\n \n[Service]\nType=simple\nWorkingDirectory=/usr/share/DDNS\nExecStart=/usr/bin/env python /usr/share/DDNS/run.py -c /etc/DDNS/config.json\n \n[Install]\nWantedBy=multi-user.target'\n\ntimer='[Unit]\nDescription=NewFuture ddns timer\n \n[Timer]\nOnUnitActiveSec=5m\nUnit=ddns.service\n\n[Install]\nWantedBy=multi-user.target'\n\nif [[ \"install\" == $1 ]]; then\n    echo \"$service\" > /usr/lib/systemd/system/ddns.service\n    echo \"$timer\" > /usr/lib/systemd/system/ddns.timer\n    cp -r `pwd` /usr/share/\n    mkdir -p /etc/DDNS\n    if [ ! -f \"/etc/DDNS/config.json\" ];then\n        if [ -f \"config.json\" ];then\n            cp config.json /etc/DDNS/config.json\n        fi\n    fi\n    systemctl enable ddns.timer\n    systemctl start ddns.timer\n    echo \"installed\"\n    echo \"useful commands:\"\n    echo \"  systemctl status ddns       view service status.\"\n    echo \"  journalctl -u ddns.timer    view the logs.\"\n    echo \"config file: /etc/DDNS/config.json\"\n                \nelif [[ \"uninstall\" == $1 ]]; then\n    systemctl disable ddns.timer\n    rm /usr/lib/systemd/system/ddns.service\n    rm /usr/lib/systemd/system/ddns.timer\n    rm -rf /etc/DDNS\n    rm -rf /usr/share/DDNS\n    systemctl daemon-reload\n    echo \"uninstalled\"\nelse\n    echo \"Tips:\"\n    echo \"  $0 install      install the ddns systemd service.\"\n    echo \"  $0 uninstall    uninstall the ddns service.\"\nfi\n"
        },
        {
          "name": "task.bat",
          "type": "blob",
          "size": 0.3369140625,
          "content": "@ECHO OFF\nREM https://msdn.microsoft.com/zh-cn/library/windows/desktop/bb736357(v=vs.85).aspx\n\nSET RUNCMD=\"%~dp0run.bat\" \"%~dp0run.log\"\n\nSET RUN_USER=%USERNAME%\nWHOAMI /GROUPS | FIND \"12288\" > NUL && SET RUN_USER=\"SYSTEM\"\n\nECHO Create task run as %RUN_USER%\nschtasks /Create /SC MINUTE /MO 5 /TR \"%RUNCMD%\" /TN \"DDNS\" /F /RU \"%RUN_USER%\"\n\nPAUSE\n"
        },
        {
          "name": "task.sh",
          "type": "blob",
          "size": 0.234375,
          "content": "#!/usr/bin/env bash\nRUN_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\";\n\nCMD=\"\\\"$RUN_DIR/run.py\\\" -c \\\"$RUN_DIR/config.json\\\" >> \\\"$RUN_DIR/run.log\\\"\"\n\necho \"*/5 * * * *   root    $CMD\" > /etc/cron.d/ddns;\n/etc/init.d/cron reload;\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}