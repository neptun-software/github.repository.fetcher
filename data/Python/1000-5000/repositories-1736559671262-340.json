{
  "metadata": {
    "timestamp": 1736559671262,
    "page": 340,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mongodb/mongo-python-driver",
      "stars": 4171,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".evergreen",
          "type": "tree",
          "content": null
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.1298828125,
          "content": "# Initial pre-commit reformat\n5578999a90e439fbca06fc0ffc98f4d04e96f7b4\n# pyupgrade and ruff\n0092b0af79378abf35b6db73a082ecb91af1d973\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4697265625,
          "content": "*~\n*#*\n.DS*\n*.cm\n*.class\n*.pyc\n*.pyd\nbuild/\ndoc/_build/\ndist/\ntools/settings.py\ndrivers-evergreen-tools\npymongo.egg-info/\n*.so\n*.egg*\n.tox\nmongocryptd.pid\n.idea/\n.vscode/\n.nova/\nvenv/\nsecrets-export.sh\nlibmongocrypt.tar.gz\nlibmongocrypt/\nlibmongocrypt_git/\nhatch_config.toml\n.venv\n\n# Lambda temp files\ntest/lambda/.aws-sam\ntest/lambda/env.json\ntest/lambda/mongodb/pymongo/*\ntest/lambda/mongodb/gridfs/*\ntest/lambda/mongodb/bson/*\n\n# test results and logs\nxunit-results/\nserver.log\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.9619140625,
          "content": "\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.5.0\n  hooks:\n  - id: check-added-large-files\n  - id: check-case-conflict\n  - id: check-toml\n  - id: check-yaml\n    exclude: template.yaml\n  - id: debug-statements\n  - id: end-of-file-fixer\n    exclude: WHEEL\n    exclude_types: [json]\n  - id: forbid-new-submodules\n  - id: trailing-whitespace\n    exclude: .patch\n    exclude_types: [json]\n\n- repo: local\n  hooks:\n    - id: synchro\n      name: synchro\n      entry: bash ./tools/synchro.sh\n      language: python\n      require_serial: true\n      fail_fast: true\n      additional_dependencies:\n        - ruff==0.1.3\n        - unasync\n\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # Ruff version.\n  rev: v0.1.3\n  hooks:\n    - id: ruff\n      args: [\"--fix\", \"--show-fixes\"]\n    - id: ruff-format\n\n- repo: https://github.com/adamchainz/blacken-docs\n  rev: \"1.16.0\"\n  hooks:\n  - id: blacken-docs\n    additional_dependencies:\n    - black==22.3.0\n\n- repo: https://github.com/pre-commit/pygrep-hooks\n  rev: \"v1.10.0\"\n  hooks:\n    - id: rst-backticks\n    - id: rst-directive-colons\n    - id: rst-inline-touching-normal\n\n- repo: https://github.com/rstcheck/rstcheck\n  rev: v6.2.0\n  hooks:\n  - id: rstcheck\n    additional_dependencies: [sphinx]\n    args: [\"--ignore-directives=doctest,testsetup,todo,automodule\",\"--ignore-substitutions=release\", \"--report-level=error\"]\n\n# We use the Python version instead of the original version which seems to require Docker\n# https://github.com/koalaman/shellcheck-precommit\n- repo: https://github.com/shellcheck-py/shellcheck-py\n  rev: v0.9.0.6\n  hooks:\n    - id: shellcheck\n      name: shellcheck\n      args: [\"--severity=warning\"]\n      stages: [manual]\n\n- repo: https://github.com/PyCQA/doc8\n  rev: v1.1.1\n  hooks:\n    - id: doc8\n      args: [\"--ignore=D001\"]  # ignore line length\n      stages: [manual]\n\n- repo: https://github.com/sirosen/check-jsonschema\n  rev: 0.29.0\n  hooks:\n    - id: check-github-workflows\n    - id: check-github-actions\n    - id: check-dependabot\n\n- repo: https://github.com/ariebovenberg/slotscheck\n  rev: v0.19.0\n  hooks:\n  - id: slotscheck\n    files: \\.py$\n    exclude: \"^(test|tools)/\"\n    stages: [manual]\n    args: [\"--no-strict-imports\"]\n\n- repo: https://github.com/codespell-project/codespell\n  rev: \"v2.2.6\"\n  hooks:\n  - id: codespell\n    # Examples of errors or updates to justify the exceptions:\n    # - test/test_on_demand_csfle.py:44: FLE ==> FILE\n    # - test/test_bson.py:1043: fo ==> of, for, to, do, go\n    # - test/bson_corpus/decimal128-4.json:98: Infinit ==> Infinite\n    # - test/test_bson.py:267: isnt ==> isn't\n    # - test/versioned-api/crud-api-version-1-strict.json:514: nin ==> inn, min, bin, nine\n    # - test/test_client.py:188: te ==> the, be, we, to\n    args: [\"-L\", \"fle,fo,infinit,isnt,nin,te,aks\"]\n\n- repo: local\n  hooks:\n  - id: executable-shell\n    name: executable-shell\n    entry: chmod +x\n    language: system\n    types: [shell]\n    exclude: |\n      (?x)(\n          .evergreen/retry-with-backoff.sh\n        )\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.5224609375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Build documentation in the doc/ directory with Sphinx\nsphinx:\n   configuration: doc/conf.py\n   fail_on_warning: true\n\n# Set the version of Python and requirements required to build the docs.\npython:\n   install:\n      # Install pymongo itself.\n      - method: pip\n        path: .\n      - requirements: requirements/docs.txt\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.3798828125,
          "content": "# Contributing to PyMongo\n\nPyMongo has a large\n[community](https://pymongo.readthedocs.io/en/stable/contributors.html)\nand contributions are always encouraged. Contributions can be as simple\nas minor tweaks to the documentation. Please read these guidelines\nbefore sending a pull request.\n\n## Bugfixes and New Features\n\nBefore starting to write code, look for existing\n[tickets](https://jira.mongodb.org/browse/PYTHON) or [create\none](https://jira.mongodb.org/browse/PYTHON) for your specific issue or\nfeature request. That way you avoid working on something that might not\nbe of interest or that has already been addressed.\n\n## Supported Interpreters\n\nPyMongo supports CPython 3.9+ and PyPy3.9+. Language features not\nsupported by all interpreters can not be used.\n\n## Style Guide\n\nPyMongo follows [PEP8](http://www.python.org/dev/peps/pep-0008/)\nincluding 4 space indents and 79 character line limits.\n\n## General Guidelines\n\n-   Avoid backward breaking changes if at all possible.\n-   Write inline documentation for new classes and methods.\n-   We use [hatch](https://hatch.pypa.io/dev/) for our script runner and packaging tool.\n-   Write tests and make sure they pass (make sure you have a mongod\n    running on the default port, then execute `hatch run test:test` from the cmd\n    line to run the test suite).\n-   Add yourself to doc/contributors.rst `:)`\n\n## Authoring a Pull Request\n\n**Our Pull Request Policy is based on this** [Code Review Developer\nGuide](https://google.github.io/eng-practices/review)\n\nThe expectation for any code author is to provide all the context needed\nin the space of a pull request for any engineer to feel equipped to\nreview the code. Depending on the type of change, do your best to\nhighlight important new functions or objects you've introduced in the\ncode; think complex functions or new abstractions. Whilst it may seem\nlike more work for you to adjust your pull request, the reality is your\nlikelihood for getting review sooner shoots up.\n\n**Self Review Guidelines to follow**\n\n-   If the PR is too large, split it if possible.\n\n    - Use 250 LoC (excluding test data and config changes) as a\n            rule-of-thumb.\n\n     - Moving and changing code should be in separate PRs or commits.\n\n        -   Moving: Taking large code blobs and transplanting\n            them to another file. There\\'s generally no (or very\n            little) actual code changed other than a cut and\n            paste. It can even be extended to large deletions.\n        -   Changing: Adding code changes (be that refactors or\n            functionality additions/subtractions).\n        -   These two, when mixed, can muddy understanding and\n            sometimes make it harder for reviewers to keep track\n            of things.\n\n-   Prefer explaining with code comments instead of PR comments.\n\n**Provide background**\n\n-   The PR description and linked tickets should answer the \"what\" and\n    \"why\" of the change. The code change explains the \"how\".\n\n**Follow the Template**\n\n-   Please do not deviate from the template we make; it is there for a\n    lot of reasons. If it is a one line fix, we still need to have\n    context on what and why it is needed.\n\n-   If making a versioning change, please let that be known. See examples below:\n\n    -   `versionadded:: 3.11`\n    -   `versionchanged:: 3.5`\n\n**Pull Request Template Breakdown**\n\n-  **Github PR Title**\n\n    -   The PR Title format should always be\n            `[JIRA-ID] : Jira Title or Blurb Summary`.\n\n-  **JIRA LINK**\n\n-   Convenient link to the associated JIRA ticket.\n\n-   **Summary**\n\n     -   Small blurb on why this is needed. The JIRA task should have\n            the more in-depth description, but this should still, at a\n            high level, give anyone looking an understanding of why the\n            PR has been checked in.\n\n-    **Changes in this PR**\n\n     -   The explicit code changes that this PR is introducing. This\n            should be more specific than just the task name. (Unless the\n            task name is very clear).\n\n-   **Test Plan**\n\n    -   Everything needs a test description. Describe what you did\n            to validate your changes actually worked; if you did\n            nothing, then document you did not test it. Aim to make\n            these steps reproducible by other engineers, specifically\n            with your primary reviewer in mind.\n\n-   **Screenshots**\n\n    -   Any images that provide more context to the PR. Usually,\n            these just coincide with the test plan.\n\n-   **Callouts or follow-up items**\n\n    -   This is a good place for identifying \"to-dos\" that you've\n            placed in the code (Must have an accompanying JIRA Ticket).\n    -   Potential bugs that you are unsure how to test in the code.\n    -   Opinions you want to receive about your code.\n\n## Running Linters\n\nPyMongo uses [pre-commit](https://pypi.org/project/pre-commit/) for\nmanaging linting of the codebase. `pre-commit` performs various checks\non all files in PyMongo and uses tools that help follow a consistent\ncode style within the codebase.\n\nTo set up `pre-commit` locally, run:\n\n```bash\nbrew install pre-commit\npre-commit install\n```\n\nTo run `pre-commit` manually, run:\n\n```bash\npre-commit run --all-files\n```\n\nTo run a manual hook like `mypy` manually, run:\n\n```bash\npre-commit run --all-files --hook-stage manual mypy\n```\n\nTypically we use `hatch` to run the linters, e.g.\n\n```bash\nhatch run typing:check-mypy\nhatch run lint:build-manual\n```\n\n## Documentation\n\nTo contribute to the [API documentation](https://pymongo.readthedocs.io/en/stable/) just make your\nchanges to the inline documentation of the appropriate [source code](https://github.com/mongodb/mongo-python-driver) or\n[rst file](https://github.com/mongodb/mongo-python-driver/tree/master/doc) in\na branch and submit a [pull request](https://help.github.com/articles/using-pull-requests). You\nmight also use the GitHub\n[Edit](https://github.com/blog/844-forking-with-the-edit-button) button.\n\nWe use [reStructuredText](https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html) for all\ndocumentation including narrative docs, and the [Sphinx docstring format](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html).\n\nYou can build the documentation locally by running:\n\n```bash\nhatch run doc:build\n```\n\nWhen updating docs, it can be helpful to run the live docs server as:\n\n```bash\nhatch run doc:serve\n```\n\nBrowse to the link provided, and then as you make changes to docstrings or narrative docs,\nthe pages will re-render and the browser will automatically refresh.\n\n\n## Running Tests Locally\n\n-   Ensure you have started the appropriate Mongo Server(s).\n-   Run `pip install hatch` to use `hatch` for testing or run\n    `pip install -e \".[test]\"` to run `pytest` directly.\n-   Run `hatch run test:test` or `pytest` to run all of the tests.\n-   Append `test/<mod_name>.py::<class_name>::<test_name>` to run\n    specific tests. You can omit the `<test_name>` to test a full class\n    and the `<class_name>` to test a full module. For example:\n    `hatch run test:test -- test/test_change_stream.py::TestUnifiedChangeStreamsErrors::test_change_stream_errors_on_ElectionInProgress`.\n-   Use the `-k` argument to select tests by pattern.\n\n## Running Load Balancer Tests Locally\n\n-   Install `haproxy` (available as `brew install haproxy` on macOS).\n-   Clone `drivers-evergreen-tools`:\n    `git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git`.\n-   Start the servers using\n    `LOAD_BALANCER=true TOPOLOGY=sharded_cluster AUTH=noauth SSL=nossl MONGODB_VERSION=6.0 DRIVERS_TOOLS=$PWD/drivers-evergreen-tools MONGO_ORCHESTRATION_HOME=$PWD/drivers-evergreen-tools/.evergreen/orchestration $PWD/drivers-evergreen-tools/.evergreen/run-orchestration.sh`.\n-   Start the load balancer using:\n    `MONGODB_URI='mongodb://localhost:27017,localhost:27018/' $PWD/drivers-evergreen-tools/.evergreen/run-load-balancer.sh start`.\n-   Run the tests from the `pymongo` checkout directory using:\n    `TEST_LOADBALANCER=1 hatch run test:test-eg`.\n\n## Running Encryption Tests Locally\n- Clone `drivers-evergreen-tools`:\n  `git clone git@github.com:mongodb-labs/drivers-evergreen-tools.git`.\n- Run `export DRIVERS_TOOLS=$PWD/drivers-evergreen-tools`\n- Run `AWS_PROFILE=<profile> hatch run encryption:setup` after setting up your AWS profile with `aws configure sso`.\n- Run the tests with `TEST_ENCRYPTION=1 hatch run test:test-eg`.\n- When done, run `hatch run encryption:teardown` to clean up.\n\n## Re-sync Spec Tests\n\nIf you would like to re-sync the copy of the specification tests in the\nPyMongo repository with that which is inside the [specifications\nrepo](https://github.com/mongodb/specifications), please use the script\nprovided in `.evergreen/resync-specs.sh`.:\n\n```bash\ngit clone git@github.com:mongodb/specifications.git\nexport MDB_SPECS=~/specifications\ncd ~/mongo-python-driver/.evergreen\n./resync-specs.sh -b \"<regex>\" spec1 spec2 ...\n./resync-specs.sh -b \"connection-string*\" crud bson-corpus # Updates crud and bson-corpus specs while ignoring all files with the regex \"connection-string*\"\ncd ..\n```\n\nThe `-b` flag adds as a regex pattern to block files you do not wish to\nupdate in PyMongo. This is primarily helpful if you are implementing a\nnew feature in PyMongo that has spec tests already implemented, or if\nyou are attempting to validate new spec tests in PyMongo.\n\n## Making a Release\n\nFollow the [Python Driver Release Process Wiki](https://wiki.corp.mongodb.com/display/DRIVERS/Python+Driver+Release+Process).\n\n## Asyncio considerations\n\nPyMongo adds asyncio capability by modifying the source files in `*/asynchronous` to `*/synchronous` using\n[unasync](https://github.com/python-trio/unasync/) and some custom transforms.\n\nWhere possible, edit the code in `*/asynchronous/*.py` and not the synchronous files.\nYou can run `pre-commit run --all-files synchro` before running tests if you are testing synchronous code.\n\nTo prevent the `synchro` hook from accidentally overwriting code, it first checks to see whether a sync version\nof a file is changing and not its async counterpart, and will fail.\nIn the unlikely scenario that you want to override this behavior, first export `OVERRIDE_SYNCHRO_CHECK=1`.\n\n## Converting a test to async\nThe `tools/convert_test_to_async.py` script takes in an existing synchronous test file and outputs a\npartially-converted asynchronous version of the same name to the `test/asynchronous` directory.\nUse this generated file as a starting point for the completed conversion.\n\nThe script is used like so: `python tools/convert_test_to_async.py [test_file.py]`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.48828125,
          "content": "# PyMongo\n\n[![PyPI Version](https://img.shields.io/pypi/v/pymongo)](https://pypi.org/project/pymongo)\n[![Python Versions](https://img.shields.io/pypi/pyversions/pymongo)](https://pypi.org/project/pymongo)\n[![Monthly Downloads](https://static.pepy.tech/badge/pymongo/month)](https://pepy.tech/project/pymongo)\n[![API Documentation Status](https://readthedocs.org/projects/pymongo/badge/?version=stable)](http://pymongo.readthedocs.io/en/stable/api?badge=stable)\n\n## About\n\nThe PyMongo distribution contains tools for interacting with MongoDB\ndatabase from Python. The `bson` package is an implementation of the\n[BSON format](http://bsonspec.org) for Python. The `pymongo` package is\na native Python driver for MongoDB. The `gridfs` package is a\n[gridfs](https://github.com/mongodb/specifications/blob/master/source/gridfs/gridfs-spec.md/)\nimplementation on top of `pymongo`.\n\nPyMongo supports MongoDB 4.0, 4.2, 4.4, 5.0, 6.0, 7.0, and 8.0.\n\n## Support / Feedback\n\nFor issues with, questions about, or feedback for PyMongo, please look\ninto our [support channels](https://support.mongodb.com/welcome). Please\ndo not email any of the PyMongo developers directly with issues or\nquestions - you're more likely to get an answer on\n[StackOverflow](https://stackoverflow.com/questions/tagged/mongodb)\n(using a \"mongodb\" tag).\n\n## Bugs / Feature Requests\n\nThink you've found a bug? Want to see a new feature in PyMongo? Please\nopen a case in our issue management tool, JIRA:\n\n-   [Create an account and login](https://jira.mongodb.org).\n-   Navigate to [the PYTHON\n    project](https://jira.mongodb.org/browse/PYTHON).\n-   Click **Create Issue** - Please provide as much information as\n    possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. PYTHON, CSHARP, JAVA)\nand the Core Server (i.e. SERVER) project are **public**.\n\n### How To Ask For Help\n\nPlease include all of the following information when opening an issue:\n\n-   Detailed steps to reproduce the problem, including full traceback,\n    if possible.\n\n-   The exact python version used, with patch level:\n\n```bash\npython -c \"import sys; print(sys.version)\"\n```\n\n-   The exact version of PyMongo used, with patch level:\n\n```bash\npython -c \"import pymongo; print(pymongo.version); print(pymongo.has_c())\"\n```\n\n-   The operating system and version (e.g. Windows 7, OSX 10.8, ...)\n\n-   Web framework or asynchronous network library used, if any, with\n    version (e.g. Django 1.7, mod_wsgi 4.3.0, gevent 1.0.1, Tornado\n    4.0.2, ...)\n\n### Security Vulnerabilities\n\nIf you've identified a security vulnerability in a driver or any other\nMongoDB project, please report it according to the [instructions\nhere](https://www.mongodb.com/docs/manual/tutorial/create-a-vulnerability-report/).\n\n## Installation\n\nPyMongo can be installed with [pip](http://pypi.python.org/pypi/pip):\n\n```bash\npython -m pip install pymongo\n```\n\nYou can also download the project source and do:\n\n```bash\npip install .\n```\n\nDo **not** install the \"bson\" package from pypi. PyMongo comes with\nits own bson package; running \"pip install bson\" installs a third-party\npackage that is incompatible with PyMongo.\n\n## Dependencies\n\nPyMongo supports CPython 3.9+ and PyPy3.9+.\n\nRequired dependencies:\n\nSupport for `mongodb+srv://` URIs requires [dnspython](https://pypi.python.org/pypi/dnspython)\n\nOptional dependencies:\n\nGSSAPI authentication requires\n[pykerberos](https://pypi.python.org/pypi/pykerberos) on Unix or\n[WinKerberos](https://pypi.python.org/pypi/winkerberos) on Windows. The\ncorrect dependency can be installed automatically along with PyMongo:\n\n```bash\npython -m pip install \"pymongo[gssapi]\"\n```\n\nMONGODB-AWS authentication requires\n[pymongo-auth-aws](https://pypi.org/project/pymongo-auth-aws/):\n\n```bash\npython -m pip install \"pymongo[aws]\"\n```\n\nOCSP (Online Certificate Status Protocol) requires\n[PyOpenSSL](https://pypi.org/project/pyOpenSSL/),\n[requests](https://pypi.org/project/requests/),\n[service_identity](https://pypi.org/project/service_identity/) and may\nrequire [certifi](https://pypi.python.org/pypi/certifi):\n\n```bash\npython -m pip install \"pymongo[ocsp]\"\n```\n\nWire protocol compression with snappy requires\n[python-snappy](https://pypi.org/project/python-snappy):\n\n```bash\npython -m pip install \"pymongo[snappy]\"\n```\n\nWire protocol compression with zstandard requires\n[zstandard](https://pypi.org/project/zstandard):\n\n```bash\npython -m pip install \"pymongo[zstd]\"\n```\n\nClient-Side Field Level Encryption requires\n[pymongocrypt](https://pypi.org/project/pymongocrypt/) and\n[pymongo-auth-aws](https://pypi.org/project/pymongo-auth-aws/):\n\n```bash\npython -m pip install \"pymongo[encryption]\"\n```\nYou can install all dependencies automatically with the following\ncommand:\n\n```bash\npython -m pip install \"pymongo[gssapi,aws,ocsp,snappy,zstd,encryption]\"\n```\n\nAdditional dependencies are:\n\n-   (to generate documentation or run tests)\n    [hatch](https://hatch.pypa.io/dev/)\n\n## Examples\n\nHere's a basic example (for more see the *examples* section of the\ndocs):\n\n```pycon\n>>> import pymongo\n>>> client = pymongo.MongoClient(\"localhost\", 27017)\n>>> db = client.test\n>>> db.name\n'test'\n>>> db.my_collection\nCollection(Database(MongoClient('localhost', 27017), 'test'), 'my_collection')\n>>> db.my_collection.insert_one({\"x\": 10}).inserted_id\nObjectId('4aba15ebe23f6b53b0000000')\n>>> db.my_collection.insert_one({\"x\": 8}).inserted_id\nObjectId('4aba160ee23f6b543e000000')\n>>> db.my_collection.insert_one({\"x\": 11}).inserted_id\nObjectId('4aba160ee23f6b543e000002')\n>>> db.my_collection.find_one()\n{'x': 10, '_id': ObjectId('4aba15ebe23f6b53b0000000')}\n>>> for item in db.my_collection.find():\n...     print(item[\"x\"])\n...\n10\n8\n11\n>>> db.my_collection.create_index(\"x\")\n'x_1'\n>>> for item in db.my_collection.find().sort(\"x\", pymongo.ASCENDING):\n...     print(item[\"x\"])\n...\n8\n10\n11\n>>> [item[\"x\"] for item in db.my_collection.find().limit(2).skip(1)]\n[8, 11]\n```\n\n## Documentation\n\nDocumentation is available at\n[pymongo.readthedocs.io](https://pymongo.readthedocs.io/en/stable/).\n\nDocumentation can be generated by running **pip install hatch; hatch run doc:build**. Generated\ndocumentation can be found in the `doc/build/html/` directory.\n\n## Learning Resources\n\n- MongoDB Learn - [Python\ncourses](https://learn.mongodb.com/catalog?labels=%5B%22Language%22%5D&values=%5B%22Python%22%5D).\n- [Python Articles on Developer\nCenter](https://www.mongodb.com/developer/languages/python/).\n\n## Testing\n\nThe easiest way to run the tests is to run *hatch run test:test** in the root\nof the distribution. For example,\n\n```bash\npip install hatch\nhatch run test:test\n```\n"
        },
        {
          "name": "THIRD-PARTY-NOTICES",
          "type": "blob",
          "size": 4.587890625,
          "content": "PyMongo uses third-party libraries or other resources that may\nbe distributed under licenses different than the PyMongo software.\n\nIn the event that we accidentally failed to list a required notice,\nplease bring it to our attention through any of the ways detailed here:\n\n           https://jira.mongodb.org/projects/PYTHON\n\nThe attached notices are provided for information only.\n\nFor any licenses that require disclosure of source, sources are available at\nhttps://github.com/mongodb/mongo-python-driver.\n\n\n1) License Notice for time64.c\n------------------------------\n\nCopyright (c) 2007-2010  Michael G Schwern\n\nThis software originally derived from Paul Sheer's pivotal_gmtime_r.c.\n\nThe MIT License:\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n2) License Notice for _asyncio_lock.py\n-----------------------------------------\n\n1. This LICENSE AGREEMENT is between the Python Software Foundation\n(\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and\notherwise using this software (\"Python\") in source or binary form and\nits associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\ngrants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\nanalyze, test, perform and/or display publicly, prepare derivative works,\ndistribute, and otherwise use Python alone or in any derivative version,\nprovided, however, that PSF's License Agreement and PSF's notice of copyright,\ni.e., \"Copyright (c) 2001-2024 Python Software Foundation; All Rights Reserved\"\nare retained in Python alone or in any derivative version prepared by Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on\nor incorporates Python or any part thereof, and wants to make\nthe derivative work available to others as provided herein, then\nLicensee hereby agrees to include in any such work a brief summary of\nthe changes made to Python.\n\n4. PSF is making Python available to Licensee on an \"AS IS\"\nbasis.  PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR\nIMPLIED.  BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND\nDISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS\nFOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON WILL NOT\nINFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON\nFOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS\nA RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON,\nOR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material\nbreach of its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any\nrelationship of agency, partnership, or joint venture between PSF and\nLicensee.  This License Agreement does not grant permission to use PSF\ntrademarks or trade name in a trademark sense to endorse or promote\nproducts or services of Licensee, or any third party.\n\n8. By copying, installing or otherwise using Python, Licensee\nagrees to be bound by the terms and conditions of this License\nAgreement.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "_setup.py",
          "type": "blob",
          "size": 4.5283203125,
          "content": "from __future__ import annotations\n\nimport os\nimport sys\nimport warnings\n\n# Hack to silence atexit traceback in some Python versions\ntry:\n    import multiprocessing  # noqa: F401\nexcept ImportError:\n    pass\n\nfrom setuptools import setup\nfrom setuptools.command.build_ext import build_ext\nfrom setuptools.extension import Extension\n\n\nclass custom_build_ext(build_ext):\n    \"\"\"Allow C extension building to fail.\n\n    The C extension speeds up BSON encoding, but is not essential.\n    \"\"\"\n\n    warning_message = \"\"\"\n********************************************************************\nWARNING: %s could not\nbe compiled. No C extensions are essential for PyMongo to run,\nalthough they do result in significant speed improvements.\n%s\n\nPlease see the installation docs for solutions to build issues:\n\nhttps://pymongo.readthedocs.io/en/stable/installation.html\n\nHere are some hints for popular operating systems:\n\nIf you are seeing this message on Linux you probably need to\ninstall GCC and/or the Python development package for your\nversion of Python.\n\nDebian and Ubuntu users should issue the following command:\n\n    $ sudo apt-get install build-essential python-dev\n\nUsers of Red Hat based distributions (RHEL, CentOS, Amazon Linux,\nOracle Linux, Fedora, etc.) should issue the following command:\n\n    $ sudo yum install gcc python-devel\n\nIf you are seeing this message on Microsoft Windows please install\nPyMongo using pip. Modern versions of pip will install PyMongo\nfrom binary wheels available on pypi. If you must install from\nsource read the documentation here:\n\nhttps://pymongo.readthedocs.io/en/stable/installation.html#installing-from-source-on-windows\n\nIf you are seeing this message on macOS / OSX please install PyMongo\nusing pip. Modern versions of pip will install PyMongo from binary\nwheels available on pypi. If wheels are not available for your version\nof macOS / OSX, or you must install from source read the documentation\nhere:\n\nhttps://pymongo.readthedocs.io/en/stable/installation.html#osx\n********************************************************************\n\"\"\"\n\n    def run(self):\n        try:\n            build_ext.run(self)\n        except Exception:\n            if os.environ.get(\"PYMONGO_C_EXT_MUST_BUILD\"):\n                raise\n            e = sys.exc_info()[1]\n            sys.stdout.write(\"%s\\n\" % str(e))\n            warnings.warn(\n                self.warning_message\n                % (\n                    \"Extension modules\",\n                    \"There was an issue with your platform configuration - see above.\",\n                ),\n                stacklevel=2,\n            )\n\n    def build_extension(self, ext):\n        # \"ProgramFiles(x86)\" is not a valid environment variable in Cygwin but is needed for\n        # the MSVCCompiler in distutils.\n        if os.name == \"nt\":\n            if \"ProgramFiles\" in os.environ and \"ProgramFiles(x86)\" not in os.environ:\n                os.environ[\"ProgramFiles(x86)\"] = os.environ[\"ProgramFiles\"] + \" (x86)\"\n        name = ext.name\n        try:\n            build_ext.build_extension(self, ext)\n        except Exception:\n            if os.environ.get(\"PYMONGO_C_EXT_MUST_BUILD\"):\n                raise\n            e = sys.exc_info()[1]\n            sys.stdout.write(\"%s\\n\" % str(e))\n            warnings.warn(\n                self.warning_message\n                % (\n                    \"The %s extension module\" % (name,),  # noqa: UP031\n                    \"The output above this warning shows how the compilation failed.\",\n                ),\n                stacklevel=2,\n            )\n\n\next_modules = [\n    Extension(\n        \"bson._cbson\",\n        include_dirs=[\"bson\"],\n        sources=[\"bson/_cbsonmodule.c\", \"bson/time64.c\", \"bson/buffer.c\"],\n    ),\n    Extension(\n        \"pymongo._cmessage\",\n        include_dirs=[\"bson\"],\n        sources=[\n            \"pymongo/_cmessagemodule.c\",\n            \"bson/_cbsonmodule.c\",\n            \"bson/time64.c\",\n            \"bson/buffer.c\",\n        ],\n    ),\n]\n\n\nif \"--no_ext\" in sys.argv or os.environ.get(\"NO_EXT\"):\n    try:\n        sys.argv.remove(\"--no_ext\")\n    except ValueError:\n        pass\n    ext_modules = []\nelif sys.platform.startswith(\"java\") or sys.platform == \"cli\" or \"PyPy\" in sys.version:\n    sys.stdout.write(\n        \"\"\"\n*****************************************************\\n\nThe optional C extensions are currently not supported\\n\nby this python implementation.\\n\n*****************************************************\\n\n\"\"\"\n    )\n    ext_modules = []\n\nsetup(\n    cmdclass={\"build_ext\": custom_build_ext},\n    ext_modules=ext_modules,\n    packages=[\"bson\", \"pymongo\", \"gridfs\"],\n)  # type:ignore\n"
        },
        {
          "name": "bson",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "green_framework_test.py",
          "type": "blob",
          "size": 3.048828125,
          "content": "# Copyright 2015-present MongoDB, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Test PyMongo with a variety of greenlet-based monkey-patching frameworks.\"\"\"\nfrom __future__ import annotations\n\nimport getopt\nimport sys\n\nimport pytest\n\n\ndef run_gevent():\n    \"\"\"Prepare to run tests with Gevent. Can raise ImportError.\"\"\"\n    from gevent import monkey\n\n    monkey.patch_all()\n\n\ndef run_eventlet():\n    \"\"\"Prepare to run tests with Eventlet. Can raise ImportError.\"\"\"\n    import eventlet\n\n    # https://github.com/eventlet/eventlet/issues/401\n    eventlet.sleep()\n    eventlet.monkey_patch()\n\n\nFRAMEWORKS = {\n    \"gevent\": run_gevent,\n    \"eventlet\": run_eventlet,\n}\n\n\ndef list_frameworks():\n    \"\"\"Tell the user what framework names are valid.\"\"\"\n    sys.stdout.write(\n        \"\"\"Testable frameworks: %s\n\nNote that membership in this list means the framework can be tested with\nPyMongo, not necessarily that it is officially supported.\n\"\"\"\n        % \", \".join(sorted(FRAMEWORKS))\n    )\n\n\ndef run(framework_name, *args):\n    \"\"\"Run tests with monkey-patching enabled. Can raise ImportError.\"\"\"\n    # Monkey-patch.\n    FRAMEWORKS[framework_name]()\n\n    arg_list = list(args)\n\n    # Never run async tests with a framework\n    if len(arg_list) <= 1:\n        arg_list.extend([\"-m\", \"not default_async and default\"])\n    else:\n        for i in range(len(arg_list) - 1):\n            if \"-m\" in arg_list[i]:\n                arg_list[i + 1] = f\"not default_async and {arg_list[i + 1]}\"\n\n    # Run the tests.\n    sys.exit(pytest.main(arg_list))\n\n\ndef main():\n    \"\"\"Parse options and run tests.\"\"\"\n    usage = f\"\"\"python {sys.argv[0]} FRAMEWORK_NAME\n\nTest PyMongo with a variety of greenlet-based monkey-patching frameworks. See\npython {sys.argv[0]} --help-frameworks.\"\"\"\n\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], \"h\", [\"help\", \"help-frameworks\"])\n    except getopt.GetoptError as err:\n        print(str(err))\n        print(usage)\n        sys.exit(2)\n\n    for option_name, _ in opts:\n        if option_name in (\"-h\", \"--help\"):\n            print(usage)\n            sys.exit()\n        elif option_name == \"--help-frameworks\":\n            list_frameworks()\n            sys.exit()\n        else:\n            raise AssertionError(\"unhandled option\")\n\n    if not args:\n        print(usage)\n        sys.exit(1)\n\n    if args[0] not in FRAMEWORKS:\n        print(\"%r is not a testable framework.\\n\" % args[0])\n        list_frameworks()\n        sys.exit(1)\n\n    run(\n        args[0],\n        *args[1:],  # Framework name.\n    )  # Command line args to pytest, like what test to run.\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "gridfs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hatch.toml",
          "type": "blob",
          "size": 1.84375,
          "content": "# See https://hatch.pypa.io/dev/config/environment/overview/\n\n[envs.doc]\nfeatures = [\"docs\"]\n[envs.doc.scripts]\nbuild = \"sphinx-build -W -b html doc ./doc/_build/html\"\nserve = \"sphinx-autobuild -W -b html doc --watch ./pymongo --watch ./bson --watch ./gridfs ./doc/_build/serve\"\nlinkcheck = \"sphinx-build -E -b linkcheck doc ./doc/_build/linkcheck\"\n\n[envs.doctest]\nfeatures = [\"docs\",\"test\"]\n[envs.doctest.scripts]\ntest = \"sphinx-build -E -b doctest doc ./doc/_build/doctest\"\n\n[envs.typing]\npre-install-commands = [\n  \"pip install -q -r requirements/typing.txt\",\n]\n[envs.typing.scripts]\ncheck-mypy = [\n    \"mypy --install-types --non-interactive bson gridfs tools pymongo\",\n    \"mypy --install-types --non-interactive --config-file mypy_test.ini test\",\n    \"mypy --install-types --non-interactive test/test_typing.py test/test_typing_strict.py\"\n]\ncheck-pyright = [\"rm -f pyrightconfig.json\", \"pyright test/test_typing.py test/test_typing_strict.py\"]\ncheck-strict-pyright = [\n    \"echo '{{\\\"strict\\\": [\\\"tests/test_typing_strict.py\\\"]}}' > pyrightconfig.json\",\n    \"pyright test/test_typing_strict.py\",\n    \"rm -f pyrightconfig.json\"\n]\ncheck = [\"check-mypy\", \"check-pyright\", \"check-strict-pyright\"]\n\n[envs.lint]\nskip-install = true\ndependencies = [\"pre-commit\"]\n[envs.lint.scripts]\nrun = \"pre-commit run --all-files\"\nrun-manual = \"pre-commit run --all-files --hook-stage manual\"\n\n[envs.test]\nfeatures = [\"test\"]\n[envs.test.scripts]\ntest = \"pytest -v --durations=5 --maxfail=10 {args}\"\ntest-eg = \"bash ./.evergreen/run-tests.sh {args}\"\ntest-async = \"pytest -v --durations=5 --maxfail=10 -m default_async {args}\"\ntest-mockupdb = [\"pip install -U git+https://github.com/mongodb-labs/mongo-mockup-db@master\", \"test -m mockupdb\"]\n\n[envs.encryption]\nskip-install = true\n[envs.encryption.scripts]\nsetup = \"bash .evergreen/setup-encryption.sh\"\nteardown = \"bash .evergreen/teardown-encryption.sh\"\n"
        },
        {
          "name": "hatch_build.py",
          "type": "blob",
          "size": 1.1171875,
          "content": "\"\"\"A custom hatch build hook for pymongo.\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\n\nfrom hatchling.builders.hooks.plugin.interface import BuildHookInterface\n\n\nclass CustomHook(BuildHookInterface):\n    \"\"\"The pymongo build hook.\"\"\"\n\n    def initialize(self, version, build_data):\n        \"\"\"Initialize the hook.\"\"\"\n        if self.target_name == \"sdist\":\n            return\n        here = Path(__file__).parent.resolve()\n        sys.path.insert(0, str(here))\n\n        subprocess.check_call([sys.executable, \"_setup.py\", \"build_ext\", \"-i\"])\n\n        # Ensure wheel is marked as binary and contains the binary files.\n        build_data[\"infer_tag\"] = True\n        build_data[\"pure_python\"] = False\n        if os.name == \"nt\":\n            patt = \".pyd\"\n        else:\n            patt = \".so\"\n        for pkg in [\"bson\", \"pymongo\"]:\n            dpath = here / pkg\n            for fpath in dpath.glob(f\"*{patt}\"):\n                relpath = os.path.relpath(fpath, here)\n                build_data[\"artifacts\"].append(relpath)\n                build_data[\"force_include\"][relpath] = relpath\n"
        },
        {
          "name": "mypy_test.ini",
          "type": "blob",
          "size": 0.4697265625,
          "content": "[mypy]\nstrict = true\nshow_error_codes = true\ndisable_error_code = attr-defined, union-attr, var-annotated, assignment, no-redef, type-arg, import, no-untyped-call, no-untyped-def, index, no-any-return, misc\nexclude = (?x)(\n    ^test/mypy_fails/*.*$\n    | ^test/conftest.py$\n  )\n\n[mypy-pymongo.synchronous.*,gridfs.synchronous.*,test.*]\nwarn_unused_ignores = false\ndisable_error_code = unused-coroutine\n\n[mypy-pymongo.asynchronous.*,test.asynchronous.*]\nwarn_unused_ignores = false\n"
        },
        {
          "name": "pymongo",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 8.3720703125,
          "content": "[build-system]\nrequires = [\"hatchling>1.24\",\"setuptools>=65.0\",\"hatch-requirements-txt>=0.4.1\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"pymongo\"\ndynamic = [\"version\", \"dependencies\", \"optional-dependencies\"]\ndescription = \"Python driver for MongoDB <http://www.mongodb.org>\"\nreadme = \"README.md\"\nlicense = {file=\"LICENSE\"}\nrequires-python = \">=3.9\"\nauthors = [\n    { name = \"The MongoDB Python Team\" },\n]\nkeywords = [\n    \"bson\",\n    \"gridfs\",\n    \"mongo\",\n    \"mongodb\",\n    \"pymongo\",\n]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Operating System :: MacOS :: MacOS X\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3 :: Only\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Topic :: Database\",\n    \"Typing :: Typed\",\n]\n\n[project.urls]\nHomepage = \"https://www.mongodb.org\"\nDocumentation = \"https://www.mongodb.com/docs/languages/python/pymongo-driver/current/\"\nSource = \"https://github.com/mongodb/mongo-python-driver\"\nTracker = \"https://jira.mongodb.org/projects/PYTHON/issues\"\n\n# Used to call hatch_build.py\n[tool.hatch.build.hooks.custom]\n\n[tool.hatch.version]\npath = \"pymongo/_version.py\"\nvalidate-bump = false\n\n[tool.hatch.build.targets.wheel]\npackages = [\"bson\",\"gridfs\", \"pymongo\"]\n\n[tool.hatch.metadata.hooks.requirements_txt]\nfiles = [\"requirements.txt\"]\n\n[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]\naws = [\"requirements/aws.txt\"]\ndocs = [\"requirements/docs.txt\"]\nencryption = [\"requirements/encryption.txt\"]\ngssapi = [\"requirements/gssapi.txt\"]\nocsp = [\"requirements/ocsp.txt\"]\nsnappy = [\"requirements/snappy.txt\"]\ntest = [\"requirements/test.txt\"]\nzstd = [\"requirements/zstd.txt\"]\n\n[tool.pytest.ini_options]\nminversion = \"7\"\naddopts = [\"-ra\", \"--strict-config\", \"--strict-markers\", \"--junitxml=xunit-results/TEST-results.xml\", \"-m default or default_async\"]\ntestpaths = [\"test\"]\nlog_cli_level = \"INFO\"\nfaulthandler_timeout = 1500\nasyncio_default_fixture_loop_scope = \"session\"\nxfail_strict = true\nfilterwarnings = [\n    \"error\",\n    # Internal warnings raised during tests.\n    \"module:use an explicit session with no_cursor_timeout=True:UserWarning\",\n    \"module:serverselectiontimeoutms must be:UserWarning\",\n    \"module:Unsupported compressor:UserWarning\",\n    \"module:zlibcompressionlevel must be:UserWarning\",\n    \"module:Wire protocol compression with:UserWarning\",\n    \"module:GridIn property:DeprecationWarning\",\n    \"module:GridOut property:DeprecationWarning\",\n    # TODO: Remove as part of PYTHON-3923.\n    \"module:unclosed <eventlet.green.ssl.GreenSSLSocket:ResourceWarning\",\n    \"module:unclosed <socket.socket:ResourceWarning\",\n    \"module:unclosed <ssl.SSLSocket:ResourceWarning\",\n    \"module:unclosed <socket object:ResourceWarning\",\n    # https://github.com/eventlet/eventlet/issues/818\n    \"module:please use dns.resolver.Resolver.resolve:DeprecationWarning\",\n    # https://github.com/dateutil/dateutil/issues/1314\n    \"module:datetime.datetime.utc:DeprecationWarning:dateutil\",\n]\nmarkers = [\n    \"auth_aws: tests that rely on pymongo-auth-aws\",\n    \"auth_oidc: tests that rely on oidc auth\",\n    \"auth: tests that rely on authentication\",\n    \"ocsp: tests that rely on ocsp\",\n    \"atlas: tests that rely on atlas\",\n    \"data_lake: tests that rely on atlas data lake\",\n    \"perf: benchmark tests\",\n    \"index_management: index management tests\",\n    \"csfle: client-side field-level encryption tests\",\n    \"encryption: encryption tests\",\n    \"load_balancer: load balancer tests\",\n    \"mockupdb: tests that rely on mockupdb\",\n    \"default: default test suite\",\n    \"default_async: default async test suite\",\n]\n\n[tool.mypy]\nstrict = true\nshow_error_codes = true\npretty = true\ndisable_error_code = [\"type-arg\", \"no-any-return\"]\n\n[[tool.mypy.overrides]]\nmodule = [\"test.*\"]\ndisable_error_code = [\"no-untyped-def\", \"no-untyped-call\"]\n\n[[tool.mypy.overrides]]\nmodule = [\"service_identity.*\"]\nignore_missing_imports = true\n\n[[tool.mypy.overrides]]\nmodule = [\"pymongo.synchronous.*\"]\nwarn_unused_ignores = false\ndisable_error_code = [\"unused-coroutine\"]\n\n[[tool.mypy.overrides]]\nmodule = [\"pymongo.asynchronous.*\"]\nwarn_unused_ignores = false\n\n[[tool.mypy.overrides]]\nmodule = [\"gridfs.synchronous.*\"]\nwarn_unused_ignores = false\ndisable_error_code = [\"unused-coroutine\", \"no-redef\"]\n\n[tool.ruff]\ntarget-version = \"py37\"\nline-length = 100\n\n[tool.ruff.lint]\nselect = [\n  \"E\", \"F\", \"W\", # flake8\n  \"B\",           # flake8-bugbear\n  \"I\",           # isort\n  \"ARG\",         # flake8-unused-arguments\n  \"C4\",          # flake8-comprehensions\n  \"EM\",          # flake8-errmsg\n  \"ICN\",         # flake8-import-conventions\n  \"G\",           # flake8-logging-format\n  \"PGH\",         # pygrep-hooks\n  \"PIE\",         # flake8-pie\n  \"PL\",          # pylint\n  \"PT\",          # flake8-pytest-style\n  \"PTH\",         # flake8-use-pathlib\n  \"RET\",         # flake8-return\n  \"RUF\",         # Ruff-specific\n  \"S\",           # flake8-bandit\n  \"SIM\",         # flake8-simplify\n  \"T20\",         # flake8-print\n  \"UP\",          # pyupgrade\n  \"YTT\",         # flake8-2020\n  \"EXE\",         # flake8-executable\n  \"ASYNC\",       # flake8-async\n]\nignore = [\n  \"PLR\",    # Design related pylint codes\n  \"E501\",   # Line too long\n  \"PT004\",  # Use underscore for non-returning fixture (use usefixture instead)\n  \"UP007\",  # Use `X | Y` for type annotation\n  \"EM101\",  # Exception must not use a string literal, assign to variable first\n  \"EM102\",  # Exception must not use an f-string literal, assign to variable first\n  \"G004\",   # Logging statement uses f-string\"\n  \"UP006\",  # Use `type` instead of `Type` for type annotation\"\n  \"RET505\", # Unnecessary `elif` after `return` statement\"\n  \"RET506\", # Unnecessary `elif` after `raise` statement\n  \"SIM108\", # Use ternary operator\"\n  \"PTH123\", # `open()` should be replaced by `Path.open()`\"\n  \"SIM102\", # Use a single `if` statement instead of nested `if` statements\n  \"SIM105\", # Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`\n  \"ARG002\", # Unused method argument:\n  \"S101\",   # Use of `assert` detected\n  \"SIM114\", # Combine `if` branches using logical `or` operator\n  \"PGH003\", # Use specific rule codes when ignoring type issues\n  \"RUF012\", # Mutable class attributes should be annotated with `typing.ClassVar`\n  \"EM103\",  # Exception must not use a `.format()` string directly, assign to variable first\n  \"C408\",   # Unnecessary `dict` call (rewrite as a literal)\n  \"SIM117\", # Use a single `with` statement with multiple contexts instead of nested `with` statements\n]\nunfixable = [\n  \"RUF100\", # Unused noqa\n  \"T20\",  # Removes print statements\n  \"F841\", # Removes unused variables\n]\nexclude = []\nflake8-unused-arguments.ignore-variadic-names = true\nisort.required-imports = [\"from __future__ import annotations\"]\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?)|dummy.*)$\"\n\n[tool.ruff.lint.per-file-ignores]\n\"pymongo/__init__.py\" = [\"E402\"]\n\"test/*.py\" = [\"PT\", \"E402\", \"PLW\", \"SIM\", \"E741\", \"PTH\", \"S\", \"B904\", \"E722\", \"T201\",\n    \"RET\", \"ARG\", \"F405\", \"B028\", \"PGH001\", \"B018\", \"F403\", \"RUF015\", \"E731\", \"B007\",\n    \"UP031\", \"F401\", \"B023\", \"F811\"]\n\"tools/*.py\" = [\"T201\"]\n\"green_framework_test.py\" = [\"T201\"]\n\"hatch_build.py\" = [\"S\"]\n\"_setup.py\" = [\"SIM112\"]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"pymongo\", \"bson\", \"gridfs\" ]\nrelative_files = true\n\n[tool.coverage.report]\nexclude_lines = [\n    \"if (.*and +)*_use_c( and.*)*:\",\n    \"def has_c\",\n    \"def get_version_string\",\n    \"^except AttributeError:\",\n    \"except ImportError:\",\n    \"raise NotImplementedError\",\n    \"return NotImplemented\",\n    \"_use_c = true\",\n    \"if __name__ == '__main__':\",\n    \"if TYPE_CHECKING:\"\n    ]\npartial_branches = [\"if (.*and +)*not _use_c( and.*)*:\"]\n\n[tool.coverage.html]\ndirectory = \"htmlcov\"\n\n[tool.cibuildwheel]\n# Enable free-threaded support\nfree-threaded-support = true\nskip = \"pp* *-musllinux*\"\nbuild-frontend = \"build\"\ntest-command = \"python {project}/tools/fail_if_no_c.py\"\n\n[tool.cibuildwheel.linux]\narchs = \"x86_64 aarch64 ppc64le s390x i686\"\n[tool.cibuildwheel.macos]\narchs = \"x86_64 arm64\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0244140625,
          "content": "dnspython>=1.16.0,<3.0.0\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbom.json",
          "type": "blob",
          "size": 0.306640625,
          "content": "{\n    \"metadata\": {\n      \"timestamp\": \"2024-05-02T17:36:12.698229+00:00\"\n    },\n    \"components\": [],\n    \"serialNumber\": \"urn:uuid:9876a8a6-060e-486f-b128-910aecf0fe7b\",\n    \"version\": 1,\n    \"$schema\": \"http://cyclonedx.org/schema/bom-1.5.schema.json\",\n    \"bomFormat\": \"CycloneDX\",\n    \"specVersion\": \"1.5\"\n  }"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.2919921875,
          "content": "from __future__ import annotations\n\nmsg = (\n    \"PyMongo>=4.8 no longer supports building via setup.py, use python -m pip install <path/to/pymongo> instead. If \"\n    \"this is an editable install (-e) please upgrade to pip>=21.3 first: python -m pip install --upgrade pip\"\n)\n\nraise RuntimeError(msg)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}