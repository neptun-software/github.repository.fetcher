{
  "metadata": {
    "timestamp": 1736559814492,
    "page": 548,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenSPG/KAG",
      "stars": 3815,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1279296875,
          "content": "/*.whl\n/*.egg-info/\n/build/\n# *.json\n*.jsonl\n# *.csv\n#*.txt\n*.log\n*.out\n*.key\n*.jc\n*.pyc\n/dist\n.vscode/\n.idea/\n.venv/\n__pycache__/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.4150390625,
          "content": "repos:\n  - repo: https://github.com/psf/black\n    rev: 22.3.0\n    hooks:\n      - id: black\n        files: ^kag/.*\\.py$\n        exclude: |\n          (?x)^(\n            kag/solver/logic/core_modules/rule_runner/rule_runner.py |\n            kag/solver/logic/core_modules/parser/logic_node_parser.py\n          )$\n\n  - repo: https://github.com/pycqa/flake8\n    rev: 4.0.1\n    hooks:\n      - id: flake8\n        files: ^kag/.*\\.py$\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.751953125,
          "content": "cff-version: 1.2.0\nmessage: \"If you use this software, please cite it as below.\"\nauthors:\n- family-names: \"Liang\"\n  given-names: \"Lei\"\n- family-names: \"Sun\"\n  given-names: \"Mengshu\"\n- family-names: \"Gui\"\n  given-names: \"Zhengke\"\n- family-names: \"Zhu\"\n  given-names: \"Zhongshu\"\n- family-names: \"Jiang\"\n  given-names: \"Zhouyu\"\n- family-names: \"Zhong\"\n  given-names: \"Ling\"\n- family-names: \"Qu\"\n  given-names: \"Yuan\"\n- family-names: \"Zhao\"\n  given-names: \"Peilong\"\n- family-names: \"Bo\"\n  given-names: \"Zhongpu\"\n- family-names: \"Yang\"\n  given-names: \"Jin\"\ntitle: \"KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation\"\nversion: 1.0.1\npublication: arXiv preprint arXiv:2409.13731\nyear: 2024\nurl: https://arxiv.org/abs/2409.13731\ndoi: arXiv:2409.13731\n"
        },
        {
          "name": "KAG_VERSION",
          "type": "blob",
          "size": 0.00390625,
          "content": "0.6\n"
        },
        {
          "name": "LEGAL.md",
          "type": "blob",
          "size": 0.55859375,
          "content": "Legal Disclaimer\n\nWithin this source code, the comments in Chinese shall be the original, governing version. Any comment in other languages are for reference only. In the event of any conflict between the Chinese language version comments and other language version comments, the Chinese language version shall prevail.\n\n法律免责声明\n\n关于代码注释部分，中文注释为官方版本，其它语言注释仅做参考。中文注释可能与其它语言注释存在不一致，当中文注释与其它语言注释存在不一致时，请以中文注释为准。"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.142578125,
          "content": "recursive-include kag *\nrecursive-exclude kag/examples *\nglobal-exclude *.pyc\nglobal-exclude *.pyo\nglobal-exclude *.pyd\nglobal-exclude __pycache__"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.5986328125,
          "content": "# KAG: Knowledge Augmented Generation\n\n<div align=\"center\">\n<a href=\"https://spg.openkg.cn/en-US\">\n<img src=\"./_static/images/OpenSPG-1.png\" width=\"520\" alt=\"openspg logo\">\n</a>\n</div>\n\n<p align=\"center\">\n  <a href=\"./README.md\">English</a> |\n  <a href=\"./README_cn.md\">简体中文</a> |\n  <a href=\"./README_ja.md\">日本語版ドキュメント</a>\n</p>\n\n<p align=\"center\">\n    <a href='https://arxiv.org/pdf/2409.13731'><img src='https://img.shields.io/badge/arXiv-2409.13731-b31b1b'></a>\n    <a href=\"https://github.com/OpenSPG/KAG/releases/latest\">\n        <img src=\"https://img.shields.io/github/v/release/OpenSPG/KAG?color=blue&label=Latest%20Release\" alt=\"Latest Release\">\n    </a>\n    <a href=\"https://github.com/OpenSPG/KAG/blob/main/LICENSE\">\n        <img height=\"21\" src=\"https://img.shields.io/badge/License-Apache--2.0-ffffff?labelColor=d4eaf7&color=2e6cc4\" alt=\"license\">\n    </a>\n</p>\n\n# 1. What is KAG?\n\nKAG is a logical reasoning and Q&A framework based on the [OpenSPG](https://github.com/OpenSPG/openspg) engine and large language models, which is used to build logical reasoning and Q&A solutions for vertical domain knowledge bases.  KAG can effectively overcome the ambiguity of traditional RAG vector similarity calculation and the noise problem of GraphRAG introduced by OpenIE.  KAG supports logical reasoning and multi-hop fact Q&A, etc., and is significantly better than the current SOTA method.\n\nThe goal of KAG is to build a knowledge-enhanced LLM service framework in professional domains, supporting logical reasoning, factual Q&A, etc. KAG fully integrates the logical and factual characteristics of the KGs. Its core features include:\n\n- Knowledge and Chunk Mutual Indexing structure to integrate more complete contextual text information\n- Knowledge alignment using conceptual semantic reasoning to alleviate the noise problem caused by OpenIE\n- Schema-constrained knowledge construction to support the representation and construction of domain expert knowledge\n- Logical form-guided hybrid reasoning and retrieval to support logical reasoning and multi-hop reasoning Q&A\n\n⭐️ Star our repository to stay up-to-date with exciting new features and improvements! Get instant notifications for new releases! 🌟\n\n![Star KAG](./_static/images/star-kag.gif)\n\n# 2. Core Features\n\n## 2.1 Knowledge Representation\n\nIn the context of private knowledge bases, unstructured data, structured information, and business expert experience often coexist. KAG references the DIKW hierarchy to upgrade SPG to a version that is friendly to LLMs. \n\nFor unstructured data such as news, events, logs, and books, as well as structured data like transactions, statistics, and approvals, along with business experience and domain knowledge rules, KAG employs techniques such as layout analysis, knowledge extraction, property normalization, and semantic alignment to integrate raw business data and expert rules into a unified business knowledge graph.\n\n![KAG Diagram](./_static/images/kag-diag.jpg)\n\nThis makes it compatible with schema-free information extraction and schema-constrained expertise construction on the same knowledge type (e. G., entity type, event type), and supports the cross-index representation between the graph structure and the original text block. \n\nThis mutual index representation is helpful to the construction of inverted index based on graph structure, and promotes the unified representation and reasoning of logical forms.\n\n## 2.2 Mixed Reasoning Guided by Logic Forms\n\n![Logical Form Solver](./_static/images/kag-lf-solver.png)\n\nKAG proposes a logically formal guided hybrid solution and inference engine. \n\nThe engine includes three types of operators: planning, reasoning, and retrieval, which transform natural language problems into problem solving processes that combine language and notation. \n\nIn this process, each step can use different operators, such as exact match retrieval, text retrieval, numerical calculation or semantic reasoning, so as to realize the integration of four different problem solving processes: Retrieval, Knowledge Graph reasoning, language reasoning and numerical calculation.\n\n# 3. Release Notes\n\n## 3.1 Latest Updates\n\n* 2025.01.07 : Support domain knowledge injection, domain schema customization, QFS tasks support, Visual query analysis, enables schema-constraint mode for extraction, etc.\n* 2024.11.21 : Support Word docs upload, model invoke concurrency setting, User experience optimization, etc.\n* 2024.10.25 : KAG initial release\n\n## 3.2 Future Plans\n\n* Logical reasoning optimization, conversational tasks support\n* kag-model release, kag solution for event reasoning knowledge graph and medical knowledge graph\n* kag front-end open source, distributed build support, mathematical reasoning optimization\n\n# 4. Quick Start\n\n## 4.1 product-based (for ordinary users)\n\n### 4.1.1 Engine & Dependent Image Installation\n\n* **Recommend System Version:**\n\n  ```text\n  macOS User：macOS Monterey 12.6 or later\n  Linux User：CentOS 7 / Ubuntu 20.04 or later\n  Windows User：Windows 10 LTSC 2021 or later\n  ```\n\n* **Software Requirements:**\n\n  ```text\n  macOS / Linux User：Docker，Docker Compose\n  Windows User：WSL 2 / Hyper-V，Docker，Docker Compose\n  ```\n\nUse the following commands to download the docker-compose.yml file and launch the services with Docker Compose.\n\n```bash\n# set the HOME environment variable (only Windows users need to execute this command)\n# set HOME=%USERPROFILE%\n\ncurl -sSL https://raw.githubusercontent.com/OpenSPG/openspg/refs/heads/master/dev/release/docker-compose-west.yml -o docker-compose-west.yml\ndocker compose -f docker-compose-west.yml up -d\n```\n\n### 4.1.2 Use the product\n\nNavigate to the default url of the KAG product with your browser: <http://127.0.0.1:8887>\n```text\nDefault Username: openspg\nDefault password: openspg@kag\n```\nSee [KAG usage (product mode)](https://openspg.yuque.com/ndx6g9/cwh47i/rs7gr8g4s538b1n7#rtOlA) for detailed introduction.\n\n## 4.2 toolkit-based (for developers)\n\n### 4.2.1 Engine & Dependent Image Installation\n\nRefer to the 3.1 section to complete the installation of the engine & dependent image.\n\n### 4.2.2 Installation of KAG\n\n\n**macOS / Linux developers**\n\n```text\n# Create conda env: conda create -n kag-demo python=3.10 && conda activate kag-demo\n\n# Clone code: git clone https://github.com/OpenSPG/KAG.git\n\n# Install KAG: cd KAG && pip install -e .\n```\n\n**Windows developers**\n\n```text\n# Install the official Python 3.8.10 or later, install Git.\n\n# Create and activate Python venv: py -m venv kag-demo && kag-demo\\Scripts\\activate\n\n# Clone code: git clone https://github.com/OpenSPG/KAG.git\n\n# Install KAG: cd KAG && pip install -e .\n```\n\n### 4.2.3 Use the toolkit\n\nPlease refer to [KAG usage (developer mode)](https://openspg.yuque.com/ndx6g9/cwh47i/rs7gr8g4s538b1n7#cikso) guide for detailed introduction of the toolkit. Then you can use the built-in components to reproduce the performance results of the built-in datasets, and apply those components to new busineness scenarios.\n\n# 5. Technical Architecture\n\n![KAG technical architecture](./_static/images/kag-arch.png)\n\nThe KAG framework includes three parts: kg-builder, kg-solver, and kag-model. This release only involves the first two parts, kag-model will be gradually open source release in the future.\n\nkg-builder implements a knowledge representation that is friendly to large-scale language models (LLM). Based on the hierarchical structure of DIKW (data, information, knowledge and wisdom), IT upgrades SPG knowledge representation ability, and is compatible with information extraction without schema constraints and professional knowledge construction with schema constraints on the same knowledge type (such as entity type and event type), it also supports the mutual index representation between the graph structure and the original text block, which supports the efficient retrieval of the reasoning question and answer stage.\n\nkg-solver uses a logical symbol-guided hybrid solving and reasoning engine that includes three types of operators: planning, reasoning, and retrieval, to transform natural language problems into a problem-solving process that combines language and symbols. In this process, each step can use different operators, such as exact match retrieval, text retrieval, numerical calculation or semantic reasoning, so as to realize the integration of four different problem solving processes: Retrieval, Knowledge Graph reasoning, language reasoning and numerical calculation.\n\n# 6. Contact us\n\n**GitHub**: <https://github.com/OpenSPG/KAG>\n\n**OpenSPG**: <https://spg.openkg.cn/>\n\n<img src=\"./_static/images/openspg-qr.png\" alt=\"Contact Us: OpenSPG QR-code\" width=\"200\">\n\n# 7. Differences between KAG, RAG, and GraphRAG\n\n**KAG introduction and applications**: <https://github.com/orgs/OpenSPG/discussions/52>\n\n# 8. Citation\n\nIf you use this software, please cite it as below:\n\n* [KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation](https://arxiv.org/abs/2409.13731)\n\n* KGFabric: A Scalable Knowledge Graph Warehouse for Enterprise Data Interconnection\n\n```bibtex\n@article{liang2024kag,\n  title={KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation},\n  author={Liang, Lei and Sun, Mengshu and Gui, Zhengke and Zhu, Zhongshu and Jiang, Zhouyu and Zhong, Ling and Qu, Yuan and Zhao, Peilong and Bo, Zhongpu and Yang, Jin and others},\n  journal={arXiv preprint arXiv:2409.13731},\n  year={2024}\n}\n\n@article{yikgfabric,\n  title={KGFabric: A Scalable Knowledge Graph Warehouse for Enterprise Data Interconnection},\n  author={Yi, Peng and Liang, Lei and Da Zhang, Yong Chen and Zhu, Jinye and Liu, Xiangyu and Tang, Kun and Chen, Jialin and Lin, Hao and Qiu, Leijie and Zhou, Jun}\n}\n```\n\n# License\n\n[Apache License 2.0](LICENSE)\n"
        },
        {
          "name": "README_cn.md",
          "type": "blob",
          "size": 8.251953125,
          "content": "# 大模型知识服务框架 KAG\n\n<div align=\"center\">\n<a href=\"https://spg.openkg.cn/en-US\">\n<img src=\"./_static/images/OpenSPG-1.png\" width=\"520\" alt=\"openspg logo\">\n</a>\n</div>\n\n<p align=\"center\">\n  <a href=\"./README.md\">English</a> |\n  <a href=\"./README_cn.md\">简体中文</a> |\n  <a href=\"./README_ja.md\">日本語版ドキュメント</a>\n</p>\n\n<p align=\"center\">\n    <a href='https://arxiv.org/pdf/2409.13731'><img src='https://img.shields.io/badge/arXiv-2409.13731-b31b1b'></a>\n    <a href=\"https://github.com/OpenSPG/KAG/releases/latest\">\n        <img src=\"https://img.shields.io/github/v/release/OpenSPG/KAG?color=blue&label=Latest%20Release\" alt=\"Latest Release\">\n    </a>\n    <a href=\"https://github.com/OpenSPG/KAG/blob/main/LICENSE\">\n        <img height=\"21\" src=\"https://img.shields.io/badge/License-Apache--2.0-ffffff?labelColor=d4eaf7&color=2e6cc4\" alt=\"license\">\n    </a>\n</p>\n\n# 1. KAG 是什么\n\nKAG 是基于 [OpenSPG](https://github.com/OpenSPG/openspg) 引擎和大型语言模型的逻辑推理问答框架，用于构建垂直领域知识库的逻辑推理问答解决方案。KAG 可以有效克服传统 RAG 向量相似度计算的歧义性和 OpenIE 引入的 GraphRAG 的噪声问题。KAG 支持逻辑推理、多跳事实问答等，并且明显优于目前的 SOTA 方法。\n\nKAG 的目标是在专业领域构建知识增强的 LLM 服务框架，支持逻辑推理、事实问答等。KAG 充分融合了 KG 的逻辑性和事实性特点，其核心功能包括：\n\n* 知识与 Chunk 互索引结构，以整合更丰富的上下文文本信息\n* 利用概念语义推理进行知识对齐，缓解 OpenIE 引入的噪音问题\n* 支持 Schema-Constraint 知识构建，支持领域专家知识的表示与构建\n* 逻辑符号引导的混合推理与检索，实现逻辑推理和多跳推理问答\n\n⭐️点击右上角的 Star 关注 KAG，可以获取最新发布的实时通知！🌟\n\n![Star KAG](./_static/images/star-kag.gif)\n\n# 2. KAG 核心功能\n\n## 2.1 LLM 友好的语义化知识管理\n\n私域知识库场景，非结构化数据、结构化信息、业务专家经验 往往三者共存，KAG 提出了一种对大型语言模型（LLM）友好的知识表示框架，在 DIKW（数据、信息、知识和智慧）的层次结构基础上，将 SPG 升级为对 LLM 友好的版本，命名为 LLMFriSPG。\n\n这使得它能够在同一知识类型（如实体类型、事件类型）上兼容无 schema 约束的信息提取和有 schema 约束的专业知识构建，并支持图结构与原始文本块之间的互索引表示。\n\n这种互索引表示有助于基于图结构的倒排索引的构建，并促进了逻辑形式的统一表示、推理和检索。同时通过知识理解、语义对齐等进一步降低信息抽取的噪声，提升知识的准确率和一致性。\n\n![KAG 示意图](./_static/images/kag-diag.jpg)\n\n## 2.2 逻辑符号引导的混合推理引擎\n\nKAG 提出了一种逻辑符号引导的混合求解和推理引擎。该引擎包括三种类型的运算符：规划、推理和检索，将自然语言问题转化为结合语言和符号的问题求解过程。\n\n在这个过程中，每一步都可以利用不同的运算符，如精确匹配检索、文本检索、数值计算或语义推理，从而实现四种不同问题求解过程的集成：图谱推理、逻辑计算、Chunk 检索和 LLM 推理。\n\n![Logical Form Solver](./_static/images/kag-lf-solver.png)\n\n# 3. 版本发布\n\n## 3.1 最近更新\n\n* 2025.01.07 : 支持 领域知识注入、领域 schema 自定义、摘要生成类任务支持、可视化图分析查询、schema-constraint模式抽取等\n* 2024.11.21 : 支持 Word 文档上传、知识库删除、模型调用并发度设置、用户体验优化等\n* 2024.10.25 : KAG 首次发布\n\n## 3.2 后续计划\n\n* 逻辑推理 优化、对话式任务支持\n* kag-model 发布、事理图谱 和 医疗图谱的 kag 解决方案发布\n* kag 前端开源、分布式构建支持、数学推理 优化\n\n# 4. 快速开始\n\n## 4.1 基于产品（面向普通用户）\n\n### 4.1.1 引擎&依赖 镜像安装\n\n* **推荐系统版本：**\n\n  ```text\n  macOS 用户：macOS Monterey 12.6 或更新版本\n  Linux 用户：CentOS 7 / Ubuntu 20.04 或更新版本\n  Windows 用户：Windows 10 LTSC 2021 或更新版本\n  ```\n\n* **软件要求：**\n\n  ```text\n  macOS / Linux 用户：Docker，Docker Compose\n  Windows 用户：WSL 2 / Hyper-V，Docker，Docker Compose\n  ```\n\n使用以下命令下载 docker-compose.yml 并用 Docker Compose 启动服务。\n\n```bash\n# 设置 HOME 环境变量（仅 Windows 用户需要执行）\n# set HOME=%USERPROFILE%\n\ncurl -sSL https://raw.githubusercontent.com/OpenSPG/openspg/refs/heads/master/dev/release/docker-compose.yml -o docker-compose.yml\ndocker compose -f docker-compose.yml up -d\n```\n\n### 4.1.2 使用\n\n浏览器打开 KAG 产品默认链接：<http://127.0.0.1:8887> 。\n```text\nDefault Username: openspg\nDefault password: openspg@kag\n```\n具体使用请参考 [KAG使用(产品模式)](https://openspg.yuque.com/ndx6g9/0.6/quzq24g4esal7q17#JQH6Y)。\n\n## 4.2 基于工具包（面向开发者）\n\n### 4.2.1 引擎&依赖 镜像安装\n\n参考 4.1 部分完成引擎&依赖的镜像安装。\n\n### 4.2.2 KAG 安装\n\n**macOS / Linux 开发者**\n\n```text\n# 安装 Python 虚拟环境：conda create -n kag-demo python=3.10 && conda activate kag-demo\n\n# 代码 clone：git clone https://github.com/OpenSPG/KAG.git\n\n# KAG 安装: cd KAG && pip install -e .\n```\n\n**Windows 开发者**\n\n```\n# 安装官方 Python 3.8.10 或更新版本，安装 Git。\n\n# 创建、激活 Python 虚拟环境：py -m venv kag-demo && kag-demo\\Scripts\\activate\n\n# 代码 clone：git clone https://github.com/OpenSPG/KAG.git\n\n# KAG 安装: cd KAG && pip install -e .\n```\n\n### 4.2.3 使用\n\n开发者可以参考 [KAG使用(开发者模式)](https://openspg.yuque.com/ndx6g9/0.6/quzq24g4esal7q17#MRgKi)，基于 KAG 内置的各种组件，实现内置数据集的效果复现 + 新场景的落地。\n\n\n# 5. 技术架构\n\n![KAG 技术架构](./_static/images/kag-arch.png)\n\nKAG 框架包括 kg-builder、kg-solver、kag-model 三部分。本次发布只涉及前两部分，kag-model 将在后续逐步开源发布。\n\nkg-builder 实现了一种对大型语言模型（LLM）友好的知识表示，在 DIKW（数据、信息、知识和智慧）的层次结构基础上，升级 SPG 知识表示能力，在同一知识类型（如实体类型、事件类型）上兼容无 schema 约束的信息提取和有 schema 约束的专业知识构建，并支持图结构与原始文本块之间的互索引表示，为推理问答阶段的高效检索提供支持。\n\nkg-solver 采用逻辑形式引导的混合求解和推理引擎，该引擎包括三种类型的运算符：规划、推理和检索，将自然语言问题转化为结合语言和符号的问题求解过程。在这个过程中，每一步都可以利用不同的运算符，如精确匹配检索、文本检索、数值计算或语义推理，从而实现四种不同问题求解过程的集成：检索、知识图谱推理、语言推理和数值计算。\n\n# 6. 联系我们\n\n**GitHub**: <https://github.com/OpenSPG/KAG>\n\n**OpenSPG**: <https://spg.openkg.cn/>\n\n<img src=\"./_static/images/openspg-qr.png\" alt=\"联系我们：OpenSPG 二维码\" width=\"200\">\n\n# 7. KAG 与 RAG、GraphRAG 差异\n\n**KAG introduction and applications**: <https://github.com/orgs/OpenSPG/discussions/52>\n\n# 8. 引用\n\n如果您使用本软件，请以下面的方式引用：\n\n* [KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation](https://arxiv.org/abs/2409.13731)\n* KGFabric: A Scalable Knowledge Graph Warehouse for Enterprise Data Interconnection\n\n```bibtex\n@article{liang2024kag,\n  title={KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation},\n  author={Liang, Lei and Sun, Mengshu and Gui, Zhengke and Zhu, Zhongshu and Jiang, Zhouyu and Zhong, Ling and Qu, Yuan and Zhao, Peilong and Bo, Zhongpu and Yang, Jin and others},\n  journal={arXiv preprint arXiv:2409.13731},\n  year={2024}\n}\n\n@article{yikgfabric,\n  title={KGFabric: A Scalable Knowledge Graph Warehouse for Enterprise Data Interconnection},\n  author={Yi, Peng and Liang, Lei and Da Zhang, Yong Chen and Zhu, Jinye and Liu, Xiangyu and Tang, Kun and Chen, Jialin and Lin, Hao and Qiu, Leijie and Zhou, Jun}\n}\n```\n\n# 许可协议\n\n[Apache License 2.0](LICENSE)\n"
        },
        {
          "name": "README_ja.md",
          "type": "blob",
          "size": 16.3388671875,
          "content": "# KAG: 知識強化生成\n\n[English version](./README.md)\n[中文版文档](./README_cn.md)\n\n## 1. KAGとは\n\n検索強化生成（RAG）技術は、ドメインアプリケーションと大規模言語モデルの統合を促進します。しかし、RAGには、ベクトル類似性と知識推論の相関性のギャップが大きいことや、数値、時間関係、専門家のルールなどの知識ロジックに対して鈍感であるという問題があり、これが専門知識サービスの実装を妨げています。\n\n2024年10月24日、OpenSPGはv0.5をリリースし、知識強化生成（KAG）の専門ドメイン知識サービスフレームワークを正式にリリースしました。KAGは、知識グラフとベクトル検索の利点を最大限に活用し、RAGの課題を解決するために、4つの側面から大規模言語モデルと知識グラフを双方向に強化することを目的としています：（1）LLMに優しい知識表現、（2）知識グラフと元のテキストフラグメントの相互インデックス、（3）論理形式に基づくハイブリッド推論エンジン、（4）意味推論との知識整合。\n\nKAGは、NaiveRAG、HippoRAGなどの方法に比べて、マルチホップ質問応答タスクで顕著に優れています。hotpotQAでのF1スコアは19.6％相対的に向上し、2wikiでのF1スコアは33.5％相対的に向上しました。私たちは、KAGをAnt Groupの2つの専門知識質問応答タスク（電子政府質問応答と電子健康質問応答）に成功裏に適用し、RAG方法に比べて専門性が大幅に向上しました。\n\n⭐️ リポジトリをスター登録して、エキサイティングな新機能やアップデートを最新の状態に保ちましょう！すべての新しいリリースに関する即時通知を受け取れます！🌟\n\n![Star KAG](./_static/images/star-kag.gif)\n\n### 1.1 技術アーキテクチャ\n\n![図1 KAG技術アーキテクチャ](./_static/images/kag-arch.png)\n\nKAGフレームワークは、kg-builder、kg-solver、kag-modelの3つの部分で構成されています。このリリースでは最初の2つの部分のみが含まれており、kag-modelは今後段階的にオープンソースリリースされる予定です。\n\nkg-builderは、大規模言語モデル（LLM）に優しい知識表現を実装しています。DIKW（データ、情報、知識、知恵）の階層構造に基づいて、SPGの知識表現能力を向上させ、同じ知識タイプ（例えば、エンティティタイプ、イベントタイプ）でスキーマ制約のない情報抽出とスキーマ制約のある専門知識構築の両方に対応し、グラフ構造と元のテキストブロックの相互インデックス表現をサポートし、推論質問応答段階の効率的な検索をサポートします。\n\nkg-solverは、論理形式に基づくハイブリッド推論エンジンを使用しており、計画、推論、検索の3種類のオペレーターを含み、自然言語の問題を言語と記号を組み合わせた問題解決プロセスに変換します。このプロセスでは、各ステップで異なるオペレーター（例えば、正確な一致検索、テキスト検索、数値計算、または意味推論）を使用することができ、検索、知識グラフ推論、言語推論、数値計算の4つの異なる問題解決プロセスの統合を実現します。\n\n### 1.2 知識表現\n\nプライベートナレッジベースのコンテキストでは、非構造化データ、構造化情報、ビジネスエキスパートの経験が共存することがよくあります。KAGはDIKW階層を参照して、SPGをLLMに優しいバージョンにアップグレードします。ニュース、イベント、ログ、書籍などの非構造化データ、および取引、統計、承認などの構造化データ、ビジネス経験、ドメイン知識ルールに対して、KAGはレイアウト分析、知識抽出、プロパティ正規化、意味整合などの技術を使用して、元のビジネスデータと専門家のルールを統一されたビジネス知識グラフに統合します。\n\n![KAG図](./_static/images/kag-diag.jpg)\n\nこれにより、同じ知識タイプ（例えば、エンティティタイプ、イベントタイプ）でスキーマ制約のない情報抽出とスキーマ制約のある専門知識構築の両方に対応し、グラフ構造と元のテキストブロックの相互インデックス表現をサポートします。この相互インデックス表現は、グラフ構造に基づく逆インデックスの構築に役立ち、論理形式の統一表現と推論を促進します。\n\n### 1.3 論理形式に基づくハイブリッド推論\n\n![論理形式ソルバー](./_static/images/kag-lf-solver.png)\n\nKAGは、論理形式に基づくハイブリッド推論エンジンを提案しています。このエンジンは、計画、推論、検索の3種類のオペレーターを含み、自然言語の問題を言語と記号を組み合わせた問題解決プロセスに変換します。このプロセスでは、各ステップで異なるオペレーター（例えば、正確な一致検索、テキスト検索、数値計算、または意味推論）を使用することができ、検索、知識グラフ推論、言語推論、数値計算の4つの異なる問題解決プロセスの統合を実現します。\n\n## 2. 効果はどうですか？\n\n### 2.1 公開データセットの効果（マルチホップ推論）\n\n![KAGパフォーマンス](./_static/images/kag-perf.webp)\n\n最適化後、KAGの垂直分野での適応性を検証しただけでなく、一般的なデータセットのマルチホップ質問応答で既存のRAG方法と比較しました。その結果、SOTA方法よりも明らかに優れており、2wikiでのF1スコアが33.5％、hotpotQAでのF1スコアが19.6％向上しました。このフレームワークを引き続き最適化しており、エンドツーエンドの実験とアブレーション実験の指標を通じてその有効性を実証しています。論理記号駆動の推論と概念整合の手法により、このフレームワークの有効性を実証しました。\n\n### 2.2 ドメイン知識シナリオの効果（リスクマイニング）\n\n#### 2.2.1 専門家ルールの定義\n\n* 「ギャンブルAPP」識別ルールの定義\n\n  **define riskAppTaxo rule**\n\n  ```text\n  Define (s:App)-[p:belongTo]->(o:`TaxOfRiskApp`/`GamblingApp`) {\n      Structure {\n          (s)\n      }\n      Constraint {\n          R1(\"risk label marked as gambling\") s.riskMark like \"%Gambling%\"\n    }\n  }\n  ```\n\n* 「App開発者」識別ルールの定義\n\n  **define app developper rule**\n\n  ```text\n  Define (s:Person)-[p:developed]->(o:App) {\n      Structure {\n          (s)-[:hasDevice]->(d:Device)-[:install]->(o)\n      }\n      Constraint {\n          deviceNum = group(s,o).count(d)\n          R1(\"device installed same app\"): deviceNum > 5\n      }\n  }\n  ```\n\n* 「ギャンブルApp開発者」識別ルールの定義\n\n  **define a RiskUser of gambling app rule**\n\n  ```text\n  Define (s:Person)-[p:belongTo]->(o:`TaxOfRiskUser`/`DeveloperOfGamblingApp`) {\n      Structure {\n          (s)-[:developed]->(app:`TaxOfRiskApp`/`GamblingApp`)\n      }\n      Constraint {\n      }\n  }\n  ```\n\n#### 2.2.2 ビジネスデータ\n\n![KAGビジネスデータ](./_static/images/kag-biz-data.png)\n\n#### 2.2.3 推論プロセス\n\n![KAG推論プロセス](./_static/images/kag-reason.png)\n\n推論プロセスの重要なステップは次のとおりです。\n\n* 自然言語の問題を実行可能な論理式に変換します。これはプロジェクトの概念モデリングに依存しており、ブラックプロダクトマイニングドキュメントを参照してください。\n\n* 変換された論理式をOpenSPGリゾルバーに提出して実行し、ユーザーの分類結果を取得します。\n\n* ユーザーの分類結果に基づいて回答を生成します。\n\nOpenSPGの概念モデリングと組み合わせることで、KAGは自然言語変換グラフクエリの難易度を下げ、データ指向の変換を分類概念指向の変換に変え、元のOpenSPGプロジェクトで自然言語質問応答の分野アプリケーションを迅速に実現できます。\n\n## 3. どうやって使うの？\n\n### 3.1 製品ベース（一般ユーザー向け）\n\n#### 3.1.1 エンジン＆依存関係のイメージインストール\n\n* **推奨システムバージョン：**\n\n  ```text\n  macOSユーザー：macOS Monterey 12.6以降\n  Linuxユーザー：CentOS 7 / Ubuntu 20.04以降\n  Windowsユーザー：Windows 10 LTSC 2021以降\n  ```\n\n* **ソフトウェア要件：**\n\n  ```text\n  macOS / Linuxユーザー：Docker、Docker Compose\n  Windowsユーザー：WSL 2 / Hyper-V、Docker、Docker Compose\n  ```\n\n以下のコマンドを使用してdocker-compose.ymlファイルをダウンロードし、Docker Composeでサービスを起動します。\n\n```bash\n# HOME環境変数を設定（Windowsユーザーのみ実行が必要）\n# set HOME=%USERPROFILE%\n\ncurl -sSL https://raw.githubusercontent.com/OpenSPG/openspg/refs/heads/master/dev/release/docker-compose.yml -o docker-compose.yml\ndocker compose -f docker-compose.yml up -d\n```\n\n#### 3.1.2 製品の使用\n\nブラウザでKAG製品のデフォルトURLを開きます：<http://127.0.0.1:8887>\n\n詳細な紹介については、[製品使用](https://openspg.yuque.com/ndx6g9/cwh47i/rs7gr8g4s538b1n7#rtOlA)ガイドを参照してください。\n\n### 3.2 ツールキットベース（開発者向け）\n\n#### 3.2.1 エンジン＆依存関係のイメージインストール\n\n3.1セクションを参照して、エンジン＆依存関係のイメージインストールを完了します。\n\n#### 3.2.2 KAGのインストール\n\n**macOS / Linux開発者**\n\n```text\n# conda環境の作成：conda create -n kag-demo python=3.10 && conda activate kag-demo\n\n# コードのクローン：git clone https://github.com/OpenSPG/KAG.git\n\n# KAGのインストール: cd KAG && pip install -e .\n```\n\n**Windows開発者**\n\n```text\n# 公式のPython 3.8.10以降をインストールし、Gitをインストールします。\n\n# Python仮想環境の作成とアクティベート：py -m venv kag-demo && kag-demo\\Scripts\\activate\n\n# コードのクローン：git clone https://github.com/OpenSPG/KAG.git\n\n# KAGのインストール: cd KAG && pip install -e .\n```\n\n#### 3.2.3 ツールキットの使用\n\n詳細な紹介については、[クイックスタート](https://openspg.yuque.com/ndx6g9/cwh47i/rs7gr8g4s538b1n7#cikso)ガイドを参照してください。その後、組み込みのコンポーネントを使用して、組み込みデータセットのパフォーマンス結果を再現し、新しいビジネスシナリオにこれらのコンポーネントを適用できます。\n\n## 4. どのように拡張するの？\n\n### 4.1 KAGの能力を拡張する\n\nKAGが提供する組み込みコンポーネントが要件を満たさない場合、開発者はkag-builderおよびkag-solverの実装を独自に拡張できます。[KAG-Builder拡張](https://openspg.yuque.com/ndx6g9/cwh47i/ephl8hgth3gcgucn)および[KAG-Solver拡張](https://openspg.yuque.com/ndx6g9/cwh47i/rqdwk204izit2hsm)を参照してください。\n\n#### 4.1.1 kag-builder拡張\n\n![KAGチェーン図](./_static/images/kag-chain.png)\n\nKAGは、BuilderChainを使用して、リーダー、スプリッター、マッピング、エクストラクター、アライナー、ベクトライザーなどのコンポーネントを連結します。開発者は、kagが事前定義したBuilderChainを使用してグラフ構築を完了することも、事前定義されたコンポーネントを組み合わせてBuilderChainを取得することもできます。\n\n同時に、開発者はビルダー内のコンポーネントをカスタマイズし、BuilderChainに埋め込んで実行することができます。\n\n```text\nkag\n├──interface\n│  ├── builder\n│  │   ├── aligner_abc.py\n│  │   ├── extractor_abc.py\n│  │   ├── mapping_abc.py\n│  │   ├── reader_abc.py\n│  │   ├── splitter_abc.py\n│  │   ├── vectorizer_abc.py\n│  │   └── writer_abc.py\n```\n\n#### 4.1.2 kag-solver拡張\n\nkag-solverは、リゾルバー、ジェネレーター、リフレクターコンポーネントで構成されるsolver-pipelineを実行します。KAGはデフォルトのリゾルバー、ジェネレーター、リフレクターを提供します。開発者は、次のAPIに基づいてカスタム実装を提供することもできます。\n\n```text\nkag\n├── solver\n│   ├── logic\n│   │   └── solver_pipeline.py\n├── interface\n    ├── retriever\n    │   ├── chunk_retriever_abc.py\n    │   └── kg_retriever_abc.py\n    └── solver\n        ├── kag_generator_abc.py\n        ├── kag_memory_abc.py\n        ├── kag_reasoner_abc.py\n        ├── kag_reflector_abc.py\n        └── lf_planner_abc.py\n```\n\n### 4.2 KAGをカスタムモデルに適応させる\n\n#### 4.2.1 生成モデルの適応\n\nKAGは、Qwen / DeepSeek / GPTなどのOpenAIサービスと互換性のあるMaaS APIとの接続をサポートし、vLLM / Ollamaによってデプロイされたローカルモデルとの接続もサポートします。開発者は、llm_clientインターフェースに基づいてカスタムモデルサービスのサポートを追加できます。\n\n```text\nkag\n├── common\n  ├── llm\n    ├── client\n    │   ├── llm_client.py\n    │   ├── ollama_client.py\n    │   ├── openai_client.py\n    │   ├── vllm_client.py\n```\n\n#### 4.2.2 表示モデルの適応\n\nKAGは、OpenAIの表示モデルなどの呼び出しをサポートしており、OpenAIの埋め込みサービス、Ollamaによってデプロイされたbge-m3モデルを含みます。また、ローカルの埋め込みモデルのロードと使用もサポートしています。\n\n```text\nkag\n├── common\n  ├── vectorizer\n  │   ├── vectorizer.py\n  │   ├── openai_vectorizer.py\n  │   ├── local_bge_m3_vectorizer.py\n  │   ├── local_bge_vectorizer.py\n```\n\n### 4.3 KAGを他のフレームワークと統合する\n\n他のフレームワークと統合する際には、外部のビジネスデータと専門知識を入力として使用し、kag-builderパイプラインを呼び出して知識グラフの構築を完了します。また、kag-solverを呼び出してQ&A推論プロセスを完了し、推論結果と中間プロセスをビジネスシステムに公開します。\n\n他のフレームワークがkagを統合する方法は、次のように簡単に説明できます。\n\n![KAGと他のフレームワークの統合](./_static/images/kag-integrate.png)\n\n## 5. 今後の計画\n\n* ドメイン知識の注入、ドメイン概念グラフとエンティティグラフの融合を実現\n\n* kag-modelの最適化、KG構築とQ&Aの効率向上\n\n* 知識ロジック制約の幻覚抑制\n\n## 6. お問い合わせ\n\n**GitHub**: <https://github.com/OpenSPG/KAG>\n\n**OpenSPG**: <https://spg.openkg.cn/>\n\n<img src=\"./_static/images/openspg-qr.png\" alt=\"お問い合わせ：OpenSPG QRコード\" width=\"200\">\n\n# 引用\n\nこのソフトウェアを使用する場合は、以下の方法で引用してください：\n\n* [KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation](https://arxiv.org/abs/2409.13731)\n\n* KGFabric: A Scalable Knowledge Graph Warehouse for Enterprise Data Interconnection\n\n```bibtex\n@article{liang2024kag,\n  title={KAG: Boosting LLMs in Professional Domains via Knowledge Augmented Generation},\n  author={Liang, Lei and Sun, Mengshu and Gui, Zhengke and Zhu, Zhongshu and Jiang, Zhouyu and Zhong, Ling and Qu, Yuan and Zhao, Peilong and Bo, Zhongpu and Yang, Jin and others},\n  journal={arXiv preprint arXiv:2409.13731},\n  year={2024}\n}\n\n@article{yikgfabric,\n  title={KGFabric: A Scalable Knowledge Graph Warehouse for Enterprise Data Interconnection},\n  author={Yi, Peng and Liang, Lei and Da Zhang, Yong Chen and Zhu, Jinye and Liu, Xiangyu and Tang, Kun and Chen, Jialin and Lin, Hao and Qiu, Leijie and Zhou, Jun}\n}\n```\n\n# ライセンス\n\n[Apache License 2.0](LICENSE)\n"
        },
        {
          "name": "_static",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.0595703125,
          "content": "rm -rf build\n\nrm -rf dist\n\npython setup.py sdist bdist_wheel\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "kag",
          "type": "tree",
          "content": null
        },
        {
          "name": "knext",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.716796875,
          "content": "[pytest]\n# 添加命令行选项\naddopts = --verbose --tb=short --cov=kag --cov-report=term-missing -rs\n\n# 忽略某些目录\nnorecursedirs = tests/unit/solver\n\n# 指定测试文件名模式\npython_files = test_*.py *_test.py\n\n# 指定测试类名模式\npython_classes = Test* *Test\n\n# 指定测试函数名模式\npython_functions = test_*\n\n# 指定测试模块名模式\npython_modules = test_*\n\n# 指定测试文件路径\ntestpaths = tests\n\n# 指定日志配置\nlog_level = INFO\nlog_format = %(asctime)s %(levelname)s %(message)s\nlog_date_format = %Y-%m-%d %H:%M:%S\n\n# 指定自定义标记\nmarkers =\n    slow: marks tests as slow (deselect with '-m \"not slow\"')\n    smoke: marks tests as smoke tests (deselect with '-m \"not smoke\"')"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.607421875,
          "content": "wget==3.2\npytest==7.4.2\njson5\nretrying==1.3.4\ntabulate==0.9.0\njieba==0.42.1\nnltk==3.8.1\ntqdm==4.66.1\nelasticsearch==8.10.0\nsix==1.16.0\nclick==8.1.7\ndateutils==0.6.12\ncertifi==2023.11.17\nurllib3==1.26.16\npython-dateutil==2.8.2\nnetworkx==3.1\npydantic==2.5.2\nrequests==2.31.0\nsetuptools==60.2.0\npsutil\nJinja2>=3.0.3\ncachetools==5.3.2\nnumpy>=1.23.1\nlangchain-text-splitters\nlangchain-community\npypdf\npandas\npycryptodome\nmarkdown\nbs4\nprotobuf==3.20.1\nneo4j\ndashscope\ndeprecated\nschedule\nopenai\npython-docx\ncharset_normalizer==3.3.2\npdfminer.six==20231228\nollama\ntenacity\npyhocon\nscikit-learn\nzodb\nmatplotlib\nPyPDF2\nruamel.yaml\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.3193359375,
          "content": "[flake8]\nmax-line-length = 120\nignore = E203, E266, E501, W503, W291, C901, E722\nselect = C,E,F,W,B,B950\nexclude =\n    .git,\n    __pycache__,\n    setup.py,\n    build,\n    dist,\n    kag/examples/*.py,\n    kag/common/arks_pb2.py,\n    kag/solver/*.py,\nper-file-ignores =\n    __init__.py: F401\n    tests/*: F811\nmax-complexity = 10"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.94140625,
          "content": "# -*- coding: utf-8 -*-\n# Copyright 2023 OpenSPG Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n# in compliance with the License. You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software distributed under the License\n# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied.\n\nimport os\n\nfrom setuptools import setup, find_packages\n\npackage_name = \"openspg-kag\"\n\n# version\ncwd = os.path.abspath(os.path.dirname(__file__))\nwith open(os.path.join(cwd, \"KAG_VERSION\"), \"r\") as rf:\n    version = rf.readline().strip(\"\\n\").strip()\n\n# license\nlicense = \"\"\nwith open(os.path.join(cwd, \"LICENSE\"), \"r\") as rf:\n    line = rf.readline()\n    while line:\n        line = line.strip()\n        if line:\n            license += \"# \" + line + \"\\n\"\n        else:\n            license += \"#\\n\"\n        line = rf.readline()\n\nsetup(\n    name=package_name,\n    version=version,\n    description=\"kag\",\n    url=\"https://github.com/OpenSPG/openspg\",\n    packages=find_packages(\n        where=\".\",\n        exclude=[\n            \".*test.py\",\n            \"*_test.py\",\n            \"*_debug.py\",\n            \"*.txt\",\n            \"tests\",\n            \"tests.*\",\n            \"configs\",\n            \"configs.*\",\n            \"test\",\n            \"test.*\",\n            \"*.tests\",\n            \"*.tests.*\",\n            \"*.pyc\",\n            \"__pycache__\",\n            \"*/__pycache__/*\",\n        ],\n    ),\n    python_requires=\">=3.8\",\n    install_requires=[\n        r.strip()\n        for r in open(\"requirements.txt\", \"r\")\n        if not r.strip().startswith(\"#\")\n    ],\n    include_package_data=True,\n    package_data={\n        \"bin\": [\"*\"],\n    },\n    entry_points={\n        \"console_scripts\": [\n            \"kag = kag.bin.kag_cmds:main\",\n            \"knext=knext.command.knext_cli:_main\",\n        ]\n    },\n)\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "upload_dev.sh",
          "type": "blob",
          "size": 0.0791015625,
          "content": "rm -rf build\n\nrm -rf dist\n\npython setup.py sdist bdist_wheel\n\ntwine upload dist/*"
        }
      ]
    }
  ]
}