{
  "metadata": {
    "timestamp": 1736559577605,
    "page": 198,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenShot/openshot-qt",
      "stars": 4504,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".bzrignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "*.DS_Store\n.idea\n.settings\nidea/*"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2548828125,
          "content": "root = true\n[*]\ninsert_final_newline = true\nend_of_line = 'lf'\n[*.py]\ncharset = 'utf8'\ntrim_trailing_whitespace = true\nindent_style = 'space'\nindent_size = 4\n[{*.js,*.css}]\ncharset = 'utf8'\ntrim_trailing_whitespace = true\nindent_style = 'space'\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2734375,
          "content": "# Exclude common editor config\n.vscode/\n*.DS_Store\n.idea\n.settings\nidea/*\n# Exclude results of the build process\ndoc/_build\n**/__pycache__/\nbuild\ndist\nopenshot_qt.egg-info\n\nprotobuf_data/\nopenshot_qt/\n/src/images/cache/objectdetection.png\n/src/images/cache/objectdetection@2x.png\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 10.8583984375,
          "content": "stages:\n  - build\n  - deploy\n  - publish\n\nlinux-builder:\n  stage: build\n  artifacts:\n    expire_in: 4 weeks\n    paths:\n    - build/*.AppImage\n    - build/*.torrent\n    - build/install-x64/share/*.env\n    - build/install-x64/share/*.log\n    - build/build-server.log\n  script:\n    - \"curl -O -J -L --header PRIVATE-TOKEN:$ACCESS_TOKEN http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=linux-builder\"\n    - if [ ! -f artifacts.zip ]; then\n    -    \"curl -O -J -L --header PRIVATE-TOKEN:$ACCESS_TOKEN http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/develop/download?job=linux-builder\"\n    - fi\n    - unzip artifacts.zip\n    - cp -r \"$CI_PROJECT_DIR/build/install-x64/python/.\" \"$CI_PROJECT_DIR\"\n    - export LD_LIBRARY_PATH=$CI_PROJECT_DIR/build/install-x64/lib:$LD_LIBRARY_PATH\n    - VERSION=$(python3 src/launch.py -V)\n    - echo -e \"CI_PROJECT_NAME:$CI_PROJECT_NAME\\nCI_COMMIT_REF_NAME:$CI_COMMIT_REF_NAME\\nCI_COMMIT_SHA:$CI_COMMIT_SHA\\nCI_JOB_ID:$CI_JOB_ID\\nCI_PIPELINE_ID:$CI_PIPELINE_ID\\nVERSION:$VERSION\" > \"build/install-x64/share/$CI_PROJECT_NAME.env\"\n    - git log $(git describe --tags --abbrev=0 @^)..@ --oneline --pretty=format:\"- %C(auto,yellow)%h%C(auto,magenta)% %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(25,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D\" --date=short > \"build/install-x64/share/$CI_PROJECT_NAME.log\"\n    - cd doc; make html SPHINXOPTS=\"-D html_theme_options.analytics_id=UA-4381101-5\"; make latexpdf; cd ..;\n    - ~/auto-update-sphinx \"$CI_PROJECT_DIR/build\" \"$CI_COMMIT_REF_NAME\"\n    - python3 -u freeze.py build --git-branch=$CI_COMMIT_REF_NAME\n    - for dir in \"build/*/\"; do /bin/sh ./installer/mangle-hw-libs.sh $(realpath \"${dir}\"); done \n    - python3 -u installer/build_server.py \"$SLACK_TOKEN\" \"$WINDOWS_KEY\" \"$WINDOWS_PASSWORD\" \"$GITHUB_USER\" \"$GITHUB_PASS\" \"False\" \"$CI_COMMIT_REF_NAME\" \"$MAC_PASSWORD\"\n  when: always\n  except:\n  - tags\n  tags:\n    - linux-focal\n\nmac-builder:\n  stage: build\n  artifacts:\n    expire_in: 4 weeks\n    paths:\n    - build/*.dmg\n    - build/*.torrent\n    - build/install-x64/share/*.env\n    - build/install-x64/share/*.log\n    - build/build-server.log\n  script:\n    - \"curl -O -J -L --header PRIVATE-TOKEN:$ACCESS_TOKEN http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=mac-builder\"\n    - if [ ! -f artifacts.zip ]; then\n    -    \"curl -O -J -L --header PRIVATE-TOKEN:$ACCESS_TOKEN http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/develop/download?job=mac-builder\"\n    - fi\n    - unzip artifacts.zip\n    - echo \"Update extracted dependencies using install_name_tool (for Mac only)\"\n    - libraries=$( find ./build/install-x64 -type f \\( -name *.dylib -or -name *.so \\) | sed 's/\\.\\/*//' )\n    - for f in $libraries; do\n    -   echo \"file f = $f\"\n    -   dependencies=$(oTool -L $f | grep libopenshot | sed 's/ .*//' | xargs)\n    -   for d in $dependencies; do\n    -     echo \"dependency d = $d\"\n    -     dname=\"$(basename $d)\"\n    -     echo \"dependency fullpath = $CI_PROJECT_DIR/build/install-x64/lib/$dname\"\n    -     install_name_tool -change \"$d\" \"$CI_PROJECT_DIR/build/install-x64/lib/$dname\" \"$f\"\n    -   done\n    - done\n    - cp -r \"$CI_PROJECT_DIR/build/install-x64/python/.\" \"$CI_PROJECT_DIR\"\n    - export LD_LIBRARY_PATH=$CI_PROJECT_DIR/build/install-x64/lib:$LD_LIBRARY_PATH\n    - export DYLD_LIBRARY_PATH=$CI_PROJECT_DIR/build/install-x64/lib:DYLD_LIBRARY_PATH\n    - VERSION=$(python3 src/launch.py -V)\n    - echo -e \"CI_PROJECT_NAME:$CI_PROJECT_NAME\\nCI_COMMIT_REF_NAME:$CI_COMMIT_REF_NAME\\nCI_COMMIT_SHA:$CI_COMMIT_SHA\\nCI_JOB_ID:$CI_JOB_ID\\nCI_PIPELINE_ID:$CI_PIPELINE_ID\\nVERSION:$VERSION\" > \"build/install-x64/share/$CI_PROJECT_NAME.env\"\n    - git log $(git describe --tags --abbrev=0 @^)..@ --oneline --pretty=format:\"- %C(auto,yellow)%h%C(auto,magenta)% %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(25,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D\" --date=short > \"build/install-x64/share/$CI_PROJECT_NAME.log\"\n    - python3 -u freeze.py bdist_mac --git-branch=$CI_COMMIT_REF_NAME --iconfile=installer/openshot.icns --custom-info-plist=installer/Info.plist --bundle-name=\"OpenShot Video Editor\"\n    - python3 -u installer/build_server.py \"$SLACK_TOKEN\" \"$WINDOWS_KEY\" \"$WINDOWS_PASSWORD\" \"$GITHUB_USER\" \"$GITHUB_PASS\" \"False\" \"$CI_COMMIT_REF_NAME\" \"$MAC_PASSWORD\"\n  when: always\n  except:\n  - tags\n  tags:\n    - mac\n\nwindows-builder-x64:\n  stage: build\n  artifacts:\n    expire_in: 4 weeks\n    paths:\n    - build\\*.exe\n    - build\\*.torrent\n    - build\\install-x64\\share\\*.env\n    - build\\install-x64\\share\\*.log\n    - build\\build-server.log\n  script:\n    - $PSVersionTable\n    - $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'\n    - try { Invoke-WebRequest -Uri \"http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=windows-builder-x64\" -Headers @{\"PRIVATE-TOKEN\"=\"$ACCESS_TOKEN\"} -OutFile \"artifacts.zip\" } catch { $_.Exception.Response.StatusCode.Value__ }\n    - if (-not (Test-Path \"artifacts.zip\")) { Invoke-WebRequest -Uri \"http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/develop/download?job=windows-builder-x64\" -Headers @{\"PRIVATE-TOKEN\"=\"$ACCESS_TOKEN\"} -OutFile \"artifacts.zip\" }\n    - Expand-Archive -Path artifacts.zip -DestinationPath .\n    - Copy-Item \"$CI_PROJECT_DIR/build/install-x64/python/*\" -Destination \"$CI_PROJECT_DIR\"\n    - $env:MSYSTEM = \"MINGW64\"\n    - $originalPath = $env:Path\n    - $NewPath = \"$CI_PROJECT_DIR\\build\\install-x64\\bin;$CI_PROJECT_DIR\\build\\install-x64\\python;C:\\msys64\\mingw64\\bin;\"\n    - $env:Path = $NewPath + $env:Path\n    - $PY_ABI = (python3 -c \"import sysconfig; print(sysconfig.get_config_var('py_version_short'))\")\n    - $NewPath = $NewPath + \"C:\\msys64\\mingw64\\lib\\python\" + $PY_ABI + \"\\;C:\\msys64\\mingw64\\lib\\python\" + $PY_ABI + \"\\site-packages\\;C:\\msys64\\mingw64\\lib\\python\" + $PY_ABI + \"\\site-packages\\PyQt5;\";\n    - $env:Path = $NewPath + $originalPath\n    - $env:PYTHONPATH = \"$CI_PROJECT_DIR\\build\\install-x64\\python;C:\\msys64\\mingw64\\lib\\python\" + $PY_ABI + \"\\site-packages\\PyQt5;\"\n    - $VERSION=(python3 src/launch.py -V)\n    - New-Item -path \"build/install-x64/share/\" -Name \"$CI_PROJECT_NAME.env\" -Value \"CI_PROJECT_NAME:$CI_PROJECT_NAME`nCI_COMMIT_REF_NAME:$CI_COMMIT_REF_NAME`nCI_COMMIT_SHA:$CI_COMMIT_SHA`nCI_JOB_ID:$CI_JOB_ID`nCI_PIPELINE_ID:$env:CI_PIPELINE_ID`nVERSION:$VERSION\" -ItemType file -force\n    - $PREV_GIT_LABEL=(git describe --tags --abbrev=0 '@^')\n    - git log \"$PREV_GIT_LABEL..@\" --oneline --pretty=format:\"- %C(auto,yellow)%h%C(auto,magenta)% %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(25,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D\" --date=short > \"build/install-x64/share/$CI_PROJECT_NAME.log\"\n    - python3 -u freeze.py build --git-branch=$CI_COMMIT_REF_NAME\n    - $EXE_PATH = \"$CI_PROJECT_DIR\\build\\exe.mingw-\" + $PY_ABI + \"\\openshot-qt.exe\"\n    - $manifestPath = \"installer/windows.manifest\"\n    - (Get-Content $manifestPath) -creplace \"ARCHITECTURE\", \"amd64\" | Set-Content $manifestPath\n    - mt.exe -manifest installer/windows.manifest -validate_manifest\n    - mt.exe  -manifest installer/windows.manifest -outputresource:$EXE_PATH;1\n    - python3 -u installer/build_server.py \"$SLACK_TOKEN\" \"$WINDOWS_KEY\" \"$WINDOWS_PASSWORD\" \"$GITHUB_USER\" \"$GITHUB_PASS\" \"False\" \"$CI_COMMIT_REF_NAME\" \"$MAC_PASSWORD\"\n  when: always\n  except:\n  - tags\n  tags:\n    - windows\n\nwindows-builder-x86:\n  stage: build\n  artifacts:\n    expire_in: 4 weeks\n    paths:\n    - build\\*.exe\n    - build\\*.torrent\n    - build\\install-x86\\share\\*.env\n    - build\\install-x86\\share\\*.log\n    - build\\build-server.log\n  script:\n    - $PSVersionTable\n    - $PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'\n    - try { Invoke-WebRequest -Uri \"http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=windows-builder-x86\" -Headers @{\"PRIVATE-TOKEN\"=\"$ACCESS_TOKEN\"} -OutFile \"artifacts.zip\" } catch { $_.Exception.Response.StatusCode.Value__ }\n    - if (-not (Test-Path \"artifacts.zip\")) { Invoke-WebRequest -Uri \"http://gitlab.openshot.org/OpenShot/libopenshot/-/jobs/artifacts/develop/download?job=windows-builder-x86\" -Headers @{\"PRIVATE-TOKEN\"=\"$ACCESS_TOKEN\"} -OutFile \"artifacts.zip\" }\n    - Expand-Archive -Path artifacts.zip -DestinationPath .\n    - Copy-Item \"$CI_PROJECT_DIR/build/install-x86/python/*\" -Destination \"$CI_PROJECT_DIR\"\n    - $env:MSYSTEM = \"MINGW32\"\n    - $originalPath = $env:Path\n    - $NewPath = \"$CI_PROJECT_DIR\\build\\install-x86\\bin;$CI_PROJECT_DIR\\build\\install-x86\\python;C:\\msys64\\mingw32\\bin;\"\n    - $env:Path = $NewPath + $env:Path\n    - $PY_ABI = (python3 -c \"import sysconfig; print(sysconfig.get_config_var('py_version_short'))\")\n    - $NewPath = $NewPath + \"C:\\msys64\\mingw32\\lib\\python\" + $PY_ABI + \"\\;C:\\msys64\\mingw32\\lib\\python\" + $PY_ABI + \"\\site-packages\\;C:\\msys64\\mingw32\\lib\\python \" + $PY_ABI+ \"\\site-packages\\PyQt5;\";\n    - $env:Path = $NewPath + $originalPath\n    - $env:PYTHONPATH = \"$CI_PROJECT_DIR\\build\\install-x86\\python;C:\\msys64\\mingw32\\lib\\python\" + $PY_ABI + \"\\site-packages\\PyQt5;\"\n    - $VERSION=(python3 src/launch.py -V)\n    - New-Item -path \"build/install-x86/share/\" -Name \"$CI_PROJECT_NAME.env\" -Value \"CI_PROJECT_NAME:$CI_PROJECT_NAME`nCI_COMMIT_REF_NAME:$CI_COMMIT_REF_NAME`nCI_COMMIT_SHA:$CI_COMMIT_SHA`nCI_JOB_ID:$CI_JOB_ID`nCI_PIPELINE_ID:$env:CI_PIPELINE_ID`nVERSION:$VERSION\" -ItemType file -force\n    - $PREV_GIT_LABEL=(git describe --tags --abbrev=0 '@^')\n    - git log \"$PREV_GIT_LABEL..@\" --oneline --pretty=format:\"- %C(auto,yellow)%h%C(auto,magenta)% %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(25,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D\" --date=short > \"build/install-x86/share/$CI_PROJECT_NAME.log\"\n    - python3 -u freeze.py build --git-branch=$CI_COMMIT_REF_NAME\n    - $EXE_PATH = \"$CI_PROJECT_DIR\\build\\exe.mingw-\" + $PY_ABI + \"\\openshot-qt.exe\"\n    - editbin /LARGEADDRESSAWARE \"$EXE_PATH\"\n    - $manifestPath = \"installer/windows.manifest\"\n    - (Get-Content $manifestPath) -creplace \"ARCHITECTURE\", \"x86\" | Set-Content $manifestPath\n    - mt.exe -manifest installer/windows.manifest -validate_manifest\n    - mt.exe  -manifest installer/windows.manifest -outputresource:$EXE_PATH;1\n    - python3 -u installer/build_server.py \"$SLACK_TOKEN\" \"$WINDOWS_KEY\" \"$WINDOWS_PASSWORD\" \"$GITHUB_USER\" \"$GITHUB_PASS\" \"True\" \"$CI_COMMIT_REF_NAME\" \"$MAC_PASSWORD\"\n  when: always\n  except:\n  - tags\n  tags:\n    - windows\n\ndeployer:\n  stage: deploy\n  artifacts:\n    expire_in: 4 weeks\n    paths:\n    - build/*.log\n    - build/*.sha256sum\n    - build/*.verify\n    - build/*.torrent\n  script:\n    - python3 -u installer/deploy.py \"$SLACK_TOKEN\" \"$GITHUB_USER\" \"$GITHUB_PASS\" \"False\"\n  when: manual\n  except:\n    - tags\n  only:\n    - /^release.*$/\n  tags:\n    - linux\n\npublisher:\n  stage: publish\n  artifacts:\n    expire_in: 4 weeks\n    paths:\n    - build/*.log\n  script:\n    - python3 -u installer/deploy.py \"$SLACK_TOKEN\" \"$GITHUB_USER\" \"$GITHUB_PASS\" \"True\"\n  when: manual\n  except:\n    - tags\n  only:\n    - /^release.*$/\n  tags:\n    - linux\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 1.767578125,
          "content": "# Authors\n\n*OpenShot Video Editor* is authored by **Jonathan Thomas** <jonathan@openshot.org> and many\nopen-source developers, artists, translators, testers, and contributors. OpenShot is\nmanaged by OpenShot Studios, LLC.\n\n## Developers / Contributors:\n\n**Creator & Lead Developer**: Jonathan Thomas <jonathan@openshot.org>. See \n`src/resources/contributors.json` for details on **all** developers & contributors. \nThese are also available in the `About->Credits` dialog.\n\n## Translators:\n\nSee `src/language/` folder for details on translation credits. Each\ntranslation contains a `translator-credits` key containing the\ndetails of each translator that contributed to that language. These are also \navailable in the `About->Credits` dialog.\n\n## Artists:\n\nSee `src/resources/contributors.json` for details on **all** the amazing artists \nwho contributed Creative Commons & open-source licensed images for our transitions, \nicons, emojis, logos, and UI. These are also available in the `About->Credits` dialog.\n\n## Fonts:\n\nCanonical / Ubuntu (Ubuntu-R.ttf font)\n\n## Emojis:\n\nOpenMoji (http://openmoji.org/). All emojis designed by OpenMoji,\nthe open-source emoji and icon project. License: CC BY-SA 4.0\n\n## Supporters:\n\nA huge thanks to all the financial backers and supporters from PayPay,\nKickstarter, and Patreon! Details can be found in `src/resources/supporters.json`.\nThese are also available in the `About->Credits` dialog.\n\n## GitHub & Launchpad Contributors:\n\nFor the full list of **developers** and **technical contributors**, please visit:\n\nhttps://github.com/OpenShot/openshot-qt/graphs/contributors\nhttps://github.com/OpenShot/libopenshot/graphs/contributors\nhttps://github.com/OpenShot/libopenshot-audio/graphs/contributors\nhttp://openshot.org/developers\nhttps://launchpad.net/~openshot.developers\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.1357421875,
          "content": "## How to contribute to OpenShot Video Editor\n\n### Submitting an Issue (bug report)\n\n* **Please check if this bug was already reported** by searching on GitHub under [Issues](https://github.com/OpenShot/openshot-qt/issues?q=+).\n\n* If you're unable to find an existing report about the problem, [open a new issue](https://github.com/OpenShot/openshot-qt/issues/new?template=bug-report.md). Be sure to include a **title and clear description**, and fill in as much relevant information as possible. Include the steps to reproduce the crash or issue, and please note what operating system(s) you tried them on. (Some bugs only occur when using OpenShot on a particular OS.)\n\n* Please **attach log files** if you are reporting a crash. Otherwise, we will not be able to determine the cause of the crash.\n\n#### Reproducing a bug & collecting logs\n\n1.  _Please download our latest daily installer:_\n    <openshot.org/download#daily> - the latest builds are at the top of the list.\n    (Use the buttons below the list to download installers for a different Operating System.)\n2.  **Only if the bug involves video playback or Export**,\n    or if you were asked to by the OpenShot developers, enable 'Debug Mode (Verbose)' in the Preferences.\n    Debug Mode adds no additional information for user interface or project-editing bugs.\n3.  Quit OpenShot and delete your log files, to ensure the files you submit contain only necessary information.\n    (See below for logfile paths.)\n4.  Re-launch OpenShot and trigger the problem as quickly as possible, then immediately quit the program.\n    This helps keeps the log files small and relevant.\n5.  Attach both log files to your issue.\n    Github issue comments permit attaching `.log` files up to 2MB in size.\n    You can insert the file(s) either by drag-and-drop, or using the link at the bottom of the comment edit field.\n  \n#### OpenShot log file locations  \n\n##### Windows\n*   OpenShot stores its logs in your user profile directory (`%USERPROFILE%`, e.g. `C:\\Users\\username\\`)\n    *   **<code><var>%USERPROFILE%</var>\\\\.openshot_qt\\openshot-qt.log</code>**\n    *   **<code><var>%USERPROFILE%</var>\\\\.openshot_qt\\libopenshot.log</code>**\n\n##### Linux/MacOS\n*   OpenShot stores its logs in your home directory (`$HOME`, e.g. `/home/username/`)\n    *   **<code><var>$HOME</var>/.openshot_qt/openshot-qt.log</code>**\n    *   **<code><var>$HOME</var>/.openshot_qt/libopenshot.log</code>**\n\n### Submitting a Pull Request (source code patch / bug fix)\n\n1.  First, prepare your changes to submit as a Pull Request:\n\n    1.  If necessary, register for a Github user account, and sign in.\n    2.  Fork the project repository. (This will be done automatically if you use the web interface's \"Edit file\" links.)\n    3.  Make your changes in a new branch based on `develop`. (If you edit on the website, you'll have the option to create and name a branch when you save your changes.)\n    4.  Finally, open a new GitHub Pull Request from that branch.\n\n2.  Ensure the PR description clearly describes the problem and your solution. If the patch is related to an existing issue report, include the issue number in your description. Github recognizes trigger phrases such as \"fixes #1234\" or \"closes #9999\", and will automatically link your PR with the referenced issue(s).\n\n3.  After you submit your PR, a test build and various code-quality and style checks will be run on your branch, with the results displayed at the bottom of the page. Try to address any issues flagged by these checks, especially any issues with the test build. If OpenShot cannot be built successfully with your changes, the PR is blocked from being merged until the problem is resolved.\n\n    Submitting \"in-progress\" code is fine, and can often be a good way to solicit feedback from other developers. Consider marking PRs that are unfinished or still under development with \"WIP\" at the start of the title, or convert the PR to draft status. This will indicate to the developers that your changes are not quite ready for inclusion in OpenShot.\n\nOpenShot Video Editor is a volunteer effort, and a labor of love. Please be patient with any issues you find, and feel free to get involved and help us fix them!\n\nThanks!\n\nOpenShot Team\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 32.529296875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n\n  18. Exceptions\n\n  The OpenShot Video Editor project hereby grants permission for non-GPL \ncompatible GStreamer, FFMPEG, and libopenshot to be used and distributed\ntogether with GStreamer, FFMPEG, MLT, and OpenShot Video Editor. This\npermission is above and beyond the permissions granted by the GPL license\nby which OpenShot Video Editor is covered. If you modify this code, you\nmay extend this exception to your version of the code, but you are not\nobligated to do so. If you do not wish to do so, delete this exception\nstatement from your version.\n\n  OpenShot Video Editor does not contain or use any proprietary codecs.\nWe support free and open-source codecs, such as Ogg Vorbis and Theora.\nHowever, since we use the ffmpeg library, it is possible to use any\nffmpeg supported codec, assuming you have legal permission to do so.\n  \n\n                     END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2353515625,
          "content": "include AUTHORS\ninclude COPYING\ninclude README\nrecursive-include bin *\nrecursive-include doc *\nrecursive-include openshot_qt *\nrecursive-include xdg *\n\nglobal-exclude *__pycache__*\nglobal-exclude *pyc\nglobal-exclude .idea\nglobal-exclude .git"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.26953125,
          "content": "# OpenShot Video Editor\n\nOpenShot Video Editor is an award-winning free and open-source video editor \nfor Linux, Mac, and Windows, and is dedicated to delivering high quality \nvideo editing and animation solutions to the world.\n\n## Build Status\n\n[![openshot-qt CI Build](https://github.com/OpenShot/openshot-qt/actions/workflows/ci.yml/badge.svg)](https://github.com/OpenShot/openshot-qt/actions/workflows/ci.yml) \n[![libopenshot CI Build](https://github.com/OpenShot/libopenshot/actions/workflows/ci.yml/badge.svg)](https://github.com/OpenShot/libopenshot/actions/workflows/ci.yml) \n[![libopenshot-audio CI Build](https://github.com/OpenShot/libopenshot-audio/actions/workflows/ci.yml/badge.svg)](https://github.com/OpenShot/libopenshot-audio/actions/workflows/ci.yml)\n![Discord](https://img.shields.io/discord/1143390791507644496?style=flat)\n\n## Features\n\n* Cross-platform (Linux, Mac, and Windows)\n* Support for many video, audio, and image formats (based on FFmpeg)\n* Powerful curve-based Key frame animations\n* Desktop integration (drag and drop support)\n* Unlimited tracks / layers\n* Clip resizing, scaling, trimming, snapping, rotation, and cutting\n* Video transitions with real-time previews\n* Compositing, image overlays, watermarks\n* Title templates, title creation, sub-titles\n* 2D animation support (image sequences)\n* 3D animated titles (and effects)\n* SVG friendly, to create and include vector titles and credits\n* Scrolling motion picture credits\n* Advanced Timeline (including Drag & drop, scrolling, panning, zooming, and snapping)\n* Frame accuracy (step through each frame of video)\n* Time-mapping and speed changes on clips (slow/fast, forward/backward, etc...)\n* Audio mixing and editing\n* Digital video effects, including brightness, gamma, hue, greyscale, chroma key, and many more!\n* Experimental hardware encoding and decoding (VA-API, NVDEC, D3D9, D3D11, VTB)\n* Import & Export widely supported formats (EDL, XML)\n* Render videos in many codecs and formats (based on FFmpeg)\n\n## Getting Started\n\nThe quickest way to get started using OpenShot is to download one of \nour pre-built installers. On our download page, click the **Daily Builds** \nbutton to view the latest, experimental builds, which are created for each \nnew commit to this repo.\n\nhttps://www.openshot.org/download/\n\n## Tutorial\n\nWatch the official [step-by-step video tutorial](https://www.youtube.com/watch?list=PLymupH2aoNQNezYzv2lhSwvoyZgLp1Q0T&v=1k-ISfd-YBE), or read the official [user-guide](https://www.openshot.org/user-guide/):\n\n## Developers\n\nAre you interested in becoming more involved in the development of \nOpenShot? Build exciting new features, fix bugs, make friends, and become a hero! \nPlease read the [step-by-step](https://github.com/OpenShot/openshot-qt/wiki/Become-a-Developer) \ninstructions for getting source code, configuring dependencies, and building OpenShot.\n\n## Documentation\n\nBeautiful HTML documentation can be generated using Sphinx.\n\n```sh\ncd doc\nmake html\n```\n\nThe documentation for the most recent release can be viewed online at [openshot.org/user-guide](https://www.openshot.org/user-guide/).\n\n## Report a bug\n\nPlease report bugs using the official [Report a Bug](https://www.openshot.org/issues/new/) \nfeature on our website. This walks you through the bug reporting process, and helps \nto create a high-quality bug report for the OpenShot community.\n\nOr you can report a new issue directly on GitHub:\n\nhttps://github.com/OpenShot/openshot-qt/issues\n\n## Translations\n\nTranslating OpenShot into other languages is very easy! Please read the [step-by-step](https://github.com/OpenShot/openshot-qt/wiki/Become-a-Translator) instructions or login to LaunchPad and get started.\nAll you need is a web browser.\n\n* Application Translations: https://translations.launchpad.net/openshot/2.0/+translations\n* Website Translations: https://translations.launchpad.net/openshot/website/+pots/django\n\n## Dependencies\n\nAlthough installers are much easier to use, if you must build from \nsource, here are some tips: \n\nOpenShot is programmed in Python (version 3+), and thus does not need\nto be compiled to run. However, be sure you have the following \ndependencies in order to run OpenShot successfully: \n\n*  Python 3.0+ (http://www.python.org)\n*  PyQt5 (http://www.riverbankcomputing.co.uk/software/pyqt/download5)\n*  libopenshot: OpenShot Library (https://github.com/OpenShot/libopenshot)\n*  libopenshot-audio: OpenShot Audio Library (https://github.com/OpenShot/libopenshot-audio)\n*  FFmpeg or Libav (http://www.ffmpeg.org/ or http://libav.org/)\n*  GCC build tools (or MinGW on Windows)\n\n## Launch\n\nTo run OpenShot from the command line with an installed `libopenshot`,\nuse the following syntax:\n(be sure the change the path to match the install or repo location \nof openshot-qt)\n\n```sh\ncd [openshot-qt folder]\npython3 src/launch.py\n```\n    \nTo run with a version of `libopenshot` built from source but not installed,\nset `PYTHONPATH` to the location of the compiled Python bindings. e.g.:\n\n```sh\ncd [libopenshot folder]\ncmake -B build -S . [options]\ncmake --build build\n    \ncd [openshot-qt folder]\nPYTHONPATH=[libopenshot folder]/build/bindings/python \\\npython3 src/launch.py\n```\n\n## Websites\n\n- https://www.openshot.org/  (Official website and blog)\n- https://github.com/OpenShot/openshot-qt (source code and issue tracker)\n- https://github.com/OpenShot/libopenshot-audio (source code for audio library)\n- https://github.com/OpenShot/libopenshot (source code for video library)\n- https://launchpad.net/openshot/\n\n### Copyright & License\n\nCopyright (c) 2008-2022 OpenShot Studios, LLC. This file is part of\nOpenShot Video Editor (https://www.openshot.org), an open-source project\ndedicated to delivering high quality video editing and animation solutions\nto the world.\n\nOpenShot Video Editor is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nOpenShot Video Editor is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with OpenShot Library.  If not, see <http://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "freeze.py",
          "type": "blob",
          "size": 23.9658203125,
          "content": "\"\"\"\n @file\n @brief cx_Freeze script to build OpenShot package with dependencies (for Mac and Windows)\n @author Jonathan Thomas <jonathan@openshot.org>\n\n @section LICENSE\n\n Copyright (c) 2008-2016 OpenShot Studios, LLC\n (http://www.openshotstudios.com). This file is part of\n OpenShot Video Editor (http://www.openshot.org), an open-source project\n dedicated to delivering high quality video editing and animation solutions\n to the world.\n\n OpenShot Video Editor is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n OpenShot Video Editor is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with OpenShot Library.  If not, see <http://www.gnu.org/licenses/>.\n \"\"\"\n\n# Syntax to build redistributable package:  python3 freeze.py build\n#\n# Troubleshooting: If you encounter an error while attempting to freeze\n# the PyQt5/uic/port_v2, remove the __init__.py in that folder. And if\n# you are manually compiling PyQt5 on Windows, remove the -strip line\n# from the Makefile. On Mac, just delete the port_v2 folder. Also, you\n# might need to remove the QtTest.so from /usr/local/lib/python3.3/site-packages/PyQt5,\n# if you get errors while freezing.\n#\n# Mac Syntax to Build App Bundle:\n# 1) python3 freeze.py bdist_mac --qt-menu-nib=\"/usr/local/Cellar/qt5/5.4.2/plugins/platforms/\" --iconfile=installer/openshot.icns --custom-info-plist=installer/Info.plist --bundle-name=\"OpenShot Video Editor\"\n# 2) change Contents/Info.plist to use launch-mac.sh as the Executable name\n# 3) manually fix rsvg executable:\n#    sudo dylibbundler -od -of -b -x ~/apps/rsvg/rsvg-convert -d ./rsvg-libs/ -p @executable_path/rsvg-libs/\n# 4) Code sign and create the DMG (disk image)\n#    a) cd ~/apps/openshot-qt-git/\n#    b) bash installer/build-mac-dmg.sh\n#\n# Windows Syntax to Build MSI Installer\n# NOTE: Python3.5 requires custom build of cx_Freeze (https://github.com/sekrause/cx_Freeze-wheels). Download, python setup.py build, python setup.py install\n# 1) python3 freeze.py bdist_msi\n# NOTE: Requires a tweak to cx_freeze: http://stackoverflow.com/questions/24195311/how-to-set-shortcut-working-directory-in-cx-freeze-msi-bundle\n# 2) Sign MSI with private code signing key (optional)\n#  NOTE: Install Windows 10 SDK first\n#  signtool sign /v /f OSStudiosSPC.pfx \"OpenShot Video Editor-2.0.0-win32.msi\"\n\nimport inspect\nimport glob\nimport os\nimport sys\nimport fnmatch\nimport json\nfrom shutil import copytree, rmtree, copy\nfrom cx_Freeze import setup, Executable\nimport cx_Freeze\nfrom PyQt5.QtCore import QLibraryInfo\nimport shutil\nfrom installer.version_parser import parse_version_info, parse_build_name\n\n\nprint (str(cx_Freeze))\n\n# Set '${ARCHLIB}' envvar to override system library path\nARCHLIB = os.getenv('ARCHLIB', \"/usr/lib/x86_64-linux-gnu/\")\nif not ARCHLIB.endswith('/'):\n    ARCHLIB += '/'\n\n# Packages to include\npython_packages = [\"os\",\n                   \"sys\",\n                   \"PyQt5\",\n                   \"openshot\",\n                   \"time\",\n                   \"uuid\",\n                   \"idna\",\n                   \"sentry_sdk\",\n                   \"shutil\",\n                   \"threading\",\n                   \"subprocess\",\n                   \"re\",\n                   \"math\",\n                   \"xml\",\n                   \"logging\",\n                   \"urllib\",\n                   \"requests\",\n                   \"zmq\",\n                   \"webbrowser\",\n                   \"json\",\n                   ]\n\n# Modules to include\npython_modules = [\"idna.idnadata\",\n                  \"sentry_sdk.integrations.stdlib\",\n                  \"sentry_sdk.integrations.excepthook\",\n                  \"sentry_sdk.integrations.dedupe\",\n                  \"sentry_sdk.integrations.atexit\",\n                  \"sentry_sdk.integrations.modules\",\n                  \"sentry_sdk.integrations.argv\",\n                  \"sentry_sdk.integrations.logging\",\n                  \"sentry_sdk.integrations.threading\",\n                  ]\n\n# Determine absolute PATH of OpenShot folder\nPATH = os.path.dirname(os.path.realpath(__file__))  # Primary openshot folder\n\n# Look for optional --git-branch arg, and remove it\ngit_branch_name = \"develop\"\nfor arg in sys.argv:\n    if arg.startswith(\"--git-branch\"):\n        sys.argv.remove(arg)\n        git_branch_name = arg.split(\"=\")[-1].strip()\n\n# Make a copy of the src tree (temporary for naming reasons only)\nopenshot_copy_path = os.path.join(PATH, \"openshot_qt\")\nif os.path.exists(os.path.join(PATH, \"src\")):\n    print(\"Copying modules to openshot_qt directory: %s\" % openshot_copy_path)\n    # Only make a copy if the SRC directory is present (otherwise ignore this)\n    copytree(os.path.join(PATH, \"src\"), openshot_copy_path)\n\n    # Make a copy of the launch.py script (to name it more appropriately)\n    copy(os.path.join(PATH, \"src\", \"launch.py\"), os.path.join(PATH, \"openshot_qt\", \"launch-openshot\"))\n\nif os.path.exists(openshot_copy_path):\n    # Append path to system path\n    sys.path.append(openshot_copy_path)\n    print(\"Loaded modules from openshot_qt directory: %s\" % openshot_copy_path)\n\n# Detect artifact folder (if any)\nartifact_path = os.path.join(PATH, \"build\", \"install-x64\")\nif not os.path.exists(artifact_path):\n    artifact_path = os.path.join(PATH, \"build\", \"install-x86\")\nif not os.path.exists(artifact_path):\n    # Default to user install path\n    artifact_path = \"\"\n\n# Append possible build server paths\nif artifact_path:\n    sys.path.insert(0, os.path.join(artifact_path, \"lib\"))\n    sys.path.insert(0, os.path.join(artifact_path, \"bin\"))\n\nfrom classes import info\nfrom classes.logger import log\nlog.info(\"Execution path: %s\" % os.path.abspath(__file__))\nlog.info(\"Artifact path detected and added to sys.path: %s\" % artifact_path)\n\n# Find files matching patterns\ndef find_files(directory, patterns):\n    \"\"\" Recursively find all files in a folder tree \"\"\"\n    for root, dirs, files in os.walk(directory):\n        for basename in files:\n            if \".pyc\" not in basename and \"__pycache__\" not in basename:\n                for pattern in patterns:\n                    if fnmatch.fnmatch(basename, pattern):\n                        filename = os.path.join(root, basename)\n                        yield filename\n\n\n# GUI applications require a different base on Windows\niconFile = \"openshot-qt\"\nbase = None\nsrc_files = []\nexternal_so_files = []\nbuild_options = {}\nbuild_exe_options = {}\nexe_name = info.NAME\n\n# Copy QT translations to local folder (to be packaged)\nqt_local_path = os.path.join(PATH, \"openshot_qt\", \"language\")\nqt_system_path = QLibraryInfo.location(QLibraryInfo.TranslationsPath)\nlog.info(\"Qt local translation files path: %s\" % qt_local_path)\nlog.info(\"Qt system translation files path: %s\" % qt_system_path)\nif os.path.exists(qt_system_path):\n    # Create local QT translation folder (if needed)\n    if not os.path.exists(qt_local_path):\n        os.mkdir(qt_local_path)\n    # Loop through QT translation files and copy them\n    for file in os.listdir(qt_system_path):\n        # Copy QT translation files\n        if (file.startswith(\"qt_\") or file.startswith(\"qtbase_\")) and file.endswith(\".qm\"):\n            log.info(\"Qt system translation, copied: %s\" % file)\n            shutil.copyfile(os.path.join(qt_system_path, file), os.path.join(qt_local_path, file))\n\n# Copy git log files into src/settings files (if found)\nversion_info = {}\nif artifact_path:\n    share_path = os.path.join(artifact_path, \"share\")\n    log.info(\"Copy share path to settings: %s\" % share_path)\n    if os.path.exists(share_path):\n        for git_log_filename in os.listdir(share_path):\n            git_log_filepath = os.path.join(share_path, git_log_filename)\n            if os.path.isfile(git_log_filepath):\n                src_files.append((git_log_filepath, \"settings/%s\" % git_log_filename))\n                if os.path.splitext(git_log_filepath)[1] == \".env\":\n                    # No extension, parse version info\n                    version_info.update(parse_version_info(git_log_filepath))\n\n# If version info found (create src/settings/version.json file)\nif version_info:\n    # Calculate build name from version info\n    version_info[\"build_name\"] = parse_build_name(version_info, git_branch_name)\n    version_path = os.path.join(openshot_copy_path, \"settings\", \"version.json\")\n    with open(version_path, \"w\") as f:\n        f.write(json.dumps(version_info, indent=4))\n\nif sys.platform == \"win32\":\n    # Define alternate terminal-based executable\n    extra_exe = {\"base\": None, \"name\": exe_name + \"-cli.exe\"}\n\n    # Standard graphical Win32 launcher\n    base = \"Win32GUI\"\n    build_exe_options[\"include_msvcr\"] = True\n    exe_name += \".exe\"\n\n    # Append Windows ICON file\n    iconFile += \".ico\"\n\n    # Append some additional files for Windows (this is a debug launcher)\n    src_files.append((os.path.join(PATH, \"installer\", \"launch-win.bat\"), \"launch-win.bat\"))\n\n    # Add additional package\n    python_packages.extend([\n        \"idna\",\n        \"OpenGL\",\n        \"OpenGL_accelerate\",\n    ])\n\n    # Manually add BABL extensions (used in ChromaKey effect) - these are loaded at runtime,\n    # and thus cx_freeze is not able to detect them\n    MSYSTEM = os.getenv('MSYSTEM', \"MINGW64\").lower()\n    babl_ext_path = \"c:/msys64/%s/lib/babl-0.1/\" % MSYSTEM\n    for filename in find_files(babl_ext_path, [\"*.dll\"]):\n        src_files.append((filename, os.path.join(\"lib\", \"babl-ext\", os.path.relpath(filename, start=babl_ext_path))))\n\n    # Append all source files\n    src_files.append((os.path.join(PATH, \"installer\", \"qt.conf\"), \"qt.conf\"))\n    for filename in find_files(\"openshot_qt\", [\"*\"]):\n        src_files.append((filename, os.path.join(os.path.relpath(filename, start=openshot_copy_path))))\n\nelif sys.platform == \"linux\":\n    # Find libopenshot.so path (GitLab copies artifacts into local build/install folder)\n    libopenshot_path = os.path.join(PATH, \"build\", \"install-x64\", \"lib\")\n    if not os.path.exists(libopenshot_path):\n        libopenshot_path = os.path.join(PATH, \"build\", \"install-x86\", \"lib\")\n    if not os.path.exists(libopenshot_path):\n        # Default to user install path\n        libopenshot_path = \"/usr/local/lib\"\n\n    # Find all related SO files\n    for filename in find_files(libopenshot_path, [\"*openshot*.so*\"]):\n        if '_' in filename or filename.count(\".\") == 2:\n            external_so_files.append((filename, os.path.relpath(filename, start=libopenshot_path)))\n\n    # Add libresvg (if found)\n    resvg_path = \"/usr/lib/libresvg.so\"\n    if os.path.exists(resvg_path):\n        external_so_files.append((resvg_path, os.path.basename(resvg_path)))\n\n    # Add QtWebEngineProcess (if found)\n    web_process_path = ARCHLIB + \"qt5/libexec/QtWebEngineProcess\"\n    if os.path.exists(web_process_path):\n        external_so_files.append(\n            (web_process_path, os.path.basename(web_process_path)))\n\n    # Add QtWebEngineProcess Resources & Local\n    qt5_path = \"/usr/share/qt5/\"\n    for filename in find_files(os.path.join(qt5_path, \"resources\"), [\"*\"]):\n        external_so_files.append((filename, os.path.relpath(filename, start=qt5_path)))\n    for filename in find_files(os.path.join(qt5_path, \"translations\", \"qtwebengine_locales\"), [\"*\"]):\n        external_so_files.append((filename, os.path.relpath(filename, start=qt5_path)))\n\n    # Add Qt xcbglintegrations plugin\n    xcbgl_path = ARCHLIB + \"qt5/\"\n    for filename in find_files(os.path.join(xcbgl_path, \"plugins\", \"xcbglintegrations\"), [\"*\"]):\n        external_so_files.append((filename, os.path.relpath(filename, start=xcbgl_path)))\n\n    # Add libsoftokn3\n    nss_path = ARCHLIB + \"nss/\"\n    for filename in find_files(nss_path, [\"*\"]):\n        external_so_files.append((filename, os.path.basename(filename)))\n\n    # Manually add BABL extensions (used in ChromaKey effect) - these are loaded at runtime,\n    # and thus cx_freeze is not able to detect them\n    babl_ext_path = ARCHLIB + \"babl-0.1/\"\n    for filename in find_files(babl_ext_path, [\"*.so\"]):\n        src_files.append((filename, os.path.join(\"lib\", \"babl-ext\", os.path.relpath(filename, start=babl_ext_path))))\n\n    # Append Linux ICON file\n    iconFile += \".svg\"\n    src_files.append((os.path.join(PATH, \"xdg\", iconFile), iconFile))\n\n    # Shorten name (since RPM can't have spaces)\n    info.PRODUCT_NAME = \"openshot-qt\"\n\n    # Add custom launcher script for frozen linux version\n    src_files.append((os.path.join(PATH, \"installer\", \"launch-linux.sh\"), \"launch-linux.sh\"))\n\n    # Get a list of all openshot.so dependencies (scan these libraries for their dependencies)\n    pyqt5_mod_files = []\n    from importlib import import_module\n    for submod in ['Qt', 'QtSvg', 'QtWidgets', 'QtCore', 'QtGui', 'QtDBus']:\n        mod_name = \"PyQt5.{}\".format(submod)\n        mod = import_module(mod_name)\n        pyqt5_mod_files.append(inspect.getfile(mod))\n    # Optional additions\n    for mod_name in [\n            'PyQt5.QtWebEngine',\n            'PyQt5.QtWebEngineWidgets',\n            'PyQt5.QtWebKit',\n            'PyQt5.QtWebKitWidgets',\n            ]:\n        try:\n            mod = import_module(mod_name)\n            pyqt5_mod_files.append(inspect.getfile(mod))\n        except ImportError as ex:\n            log.warning(\"Skipping {}: {}\".format(mod_name, ex))\n\n    lib_list = pyqt5_mod_files\n    for lib_name in [\n            os.path.join(libopenshot_path, \"libopenshot.so\"),\n            \"/usr/local/lib/libresvg.so\",\n            ARCHLIB + \"qt5/plugins/platforms/libqxcb.so\"\n            ]:\n        if os.path.exists(lib_name):\n            lib_list.append(lib_name)\n\n    import subprocess\n    for library in lib_list:\n        p = subprocess.Popen([\"ldd\", library], stdout=subprocess.PIPE)\n        out, err = p.communicate()\n        depends = str(out).replace(\"\\\\t\", \"\").replace(\"\\\\n\", \"\\n\").replace(\"\\'\", \"\").split(\"\\n\")\n\n        # Loop through each line of output (which outputs dependencies - one per line)\n        for line in depends:\n            log.info(\"ldd raw line: %s\" % line)\n            lineparts = line.split(\"=>\")\n            libname = lineparts[0].strip()\n\n            if len(lineparts) <= 1:\n                continue\n\n            libdetails = lineparts[1].strip()\n            libdetailsparts = libdetails.split(\"(\")\n\n            if len(libdetailsparts) <= 1:\n                continue\n\n            # Determine if dependency is usr installed (or system installed)\n            # Or if the dependency matches one of the following exceptions\n            # And ignore paths that start with /lib\n            libpath = libdetailsparts[0].strip()\n            libpath_file = os.path.basename(libpath)\n            log.info(\"libpath: %s, libpath_file: %s\" % (libpath, libpath_file))\n\n            if (libpath\n                and os.path.exists(libpath)\n                and \"libnvidia-glcore.so\" not in libpath\n                and libpath_file not in [\n                    \"libdl.so.2\",\n                    \"librt.so.1\",\n                    \"libpthread.so.0\",\n                    \"libc.so.6\",\n                    \"libstdc++.so.6\",\n                    \"libGL.so.1\",\n                    \"libxcb.so.1\",\n                    \"libX11.so.6\",\n                    \"libX11-xcb.so.1\",\n                    \"libasound.so.2\",\n                    \"libgcc_s.so.1 \",\n                    \"libICE.so.6\",\n                    \"libp11-kit.so.0\",\n                    \"libSM.so.6\",\n                    # Next libs are all part of glib2\n                    # Adding these back in, for experimental RHEL 84 support (which has a custom version of glib\n                    # that breaks our AppImages).\n                    #\"libglib-2.0.so.0\",\n                    #\"libgobject-2.0.so.0\",\n                    #\"libgio-2.0.so.0\",\n                    #\"libgmodule-2.0.so.0\",\n                    #\"libgthread-2.0.so.0\",\n                    #\"libpango-1.0.so.0\",\n                    #\"libpangocairo-1.0.so.0\",\n                    #\"libpangoft2-1.0.so.0\",\n                    \"libm.so.6\",\n                    \"libdrm.so.2\",\n                    \"libfreetype.so.6\",\n                    \"libfontconfig.so.1\",\n                    \"libharfbuzz.so.0\",\n                    #\"libthai.so.0\",\n                    ]\n               ) or libpath_file in [\n                    \"libgcrypt.so.11\",\n                    \"libQt5DBus.so.5\",\n                    \"libpng12.so.0\",\n                    \"libbz2.so.1.0\",\n                    \"libqxcb.so\",\n                    \"libxcb-xinerama.so.0\",\n                    \"libpcre.so.3\",\n                    \"libselinux.so.1\",\n                    ]:\n                external_so_files.append((libpath, libpath_file))\n            else:\n                log.info(\"Skipping external library: %s\" % libpath)\n\n    # Append all source files\n    src_files.append((os.path.join(PATH, \"installer\", \"qt.conf\"), \"qt.conf\"))\n    for filename in find_files(\"openshot_qt\", [\"*\"]):\n        src_files.append((filename, os.path.join(os.path.relpath(filename, start=openshot_copy_path))))\n\nelif sys.platform == \"darwin\":\n    # Copy Mac specific files that cx_Freeze misses\n   # Add libresvg (if found)\n    resvg_path = \"/usr/local/lib/librsvg-2.dylib\"\n    if os.path.exists(resvg_path):\n        external_so_files.append((resvg_path, resvg_path.replace(\"/usr/local/lib/\", \"\")))\n\n    # Copy openshot.py Python bindings\n    src_files.append((os.path.join(PATH, \"installer\", \"launch-mac\"), \"launch-mac\"))\n\n    # Append Mac ICON file\n    iconFile += \".hqx\"\n    src_files.append((os.path.join(PATH, \"xdg\", iconFile), iconFile))\n\n    # Add QtWebEngineProcess (if found)\n    qt_install_path = \"/usr/local/qt5.15.X/qt5.15/5.15.0/clang_64/\"\n    qt_webengine_path = os.path.join(qt_install_path, \"lib\", \"QtWebEngineCore.framework\", \"Versions\", \"5\")\n    web_process_path = os.path.join(qt_webengine_path, \"Helpers\", \"QtWebEngineProcess.app\", \"Contents\", \"MacOS\", \"QtWebEngineProcess\")\n    web_core_path = os.path.join(qt_webengine_path, \"QtWebEngineCore\")\n    external_so_files.append((web_process_path, os.path.basename(web_process_path)))\n    external_so_files.append((web_core_path, os.path.basename(web_core_path)))\n\n    # Manually add BABL extensions (used in ChromaKey effect) - these are loaded at runtime,\n    # and thus cx_freeze is not able to detect them\n    babl_ext_path = \"/usr/local/lib/babl-0.1\"\n    for filename in find_files(babl_ext_path, [\"*.dylib\"]):\n        src_files.append((filename, os.path.join(\"lib\", \"babl-ext\", os.path.relpath(filename, start=babl_ext_path))))\n\n    # Add QtWebEngineProcess Resources & Local\n    for filename in find_files(os.path.join(qt_webengine_path, \"Resources\"), [\"*\"]):\n        external_so_files.append((filename, os.path.relpath(filename, start=os.path.join(qt_webengine_path, \"Resources\"))))\n    for filename in find_files(os.path.join(qt_webengine_path, \"Resources\", \"qtwebengine_locales\"), [\"*\"]):\n        external_so_files.append((filename, os.path.relpath(filename, start=os.path.join(qt_webengine_path, \"Resources\"))))\n    for filename in find_files(os.path.join(qt_install_path, \"plugins\"), [\"*\"]):\n        relative_filepath = os.path.relpath(filename, start=os.path.join(qt_install_path, \"plugins\"))\n        plugin_name = os.path.dirname(relative_filepath)\n        if plugin_name in [\"imageformats\", \"platforms\"]:\n            external_so_files.append((filename, relative_filepath))\n\n    # Append all source files\n    src_files.append((os.path.join(PATH, \"installer\", \"qt.conf\"), \"qt.conf\"))\n    for filename in find_files(\"openshot_qt\", [\"*\"]):\n        src_files.append((filename, os.path.join(\"lib\", os.path.relpath(filename, start=openshot_copy_path))))\n\n    # Exclude gif library which crashes on Mac\n    build_exe_options[\"bin_excludes\"] = [\"/System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib\",\n                                         \"/usr/local/opt/giflib/lib/libgif.dylib\",\n                                         \"/usr/local/opt/tesseract/lib/libtesseract.4.dylib\",\n                                         \"/usr/local/opt/leptonica/lib/liblept.5.dylib\"]\n\n# Dependencies are automatically detected, but it might need fine tuning.\nbuild_exe_options[\"packages\"] = python_packages\nbuild_exe_options[\"include_files\"] = src_files + external_so_files\nbuild_exe_options[\"includes\"] = python_modules\nbuild_exe_options[\"excludes\"] = [\"distutils\",\n                                 \"numpy\",\n                                 \"setuptools\",\n                                 \"tkinter\",\n                                 \"pydoc_data\",\n                                 \"pycparser\",\n                                 \"pkg_resources\"]\nif sys.platform == \"darwin\":\n    build_exe_options[\"excludes\"].append(\"sentry_sdk.integrations.django\")\n\n# Set options\nbuild_options[\"build_exe\"] = build_exe_options\n\n# Define launcher executable to create\nexes = [Executable(\"openshot_qt/launch.py\",\n                   base=base,\n                   icon=os.path.join(PATH, \"xdg\", iconFile),\n                   shortcutName=\"%s\" % info.PRODUCT_NAME,\n                   shortcutDir=\"ProgramMenuFolder\",\n                   targetName=exe_name,\n                   copyright=info.COPYRIGHT)]\n\ntry:\n    # Include extra launcher configuration, if defined\n    exes.append(Executable(\"openshot_qt/launch.py\",\n                base=extra_exe['base'],\n                icon=os.path.join(PATH, \"xdg\", iconFile),\n                targetName=extra_exe['name'],\n                copyright=info.COPYRIGHT))\nexcept NameError:\n    pass\n\n# Create distutils setup object\nsetup(name=info.PRODUCT_NAME,\n      version=info.VERSION,\n      description=info.DESCRIPTION,\n      author=info.COMPANY_NAME,\n      options=build_options,\n      executables=exes)\n\n\n# Remove temporary folder (if SRC folder present)\nif os.path.exists(os.path.join(PATH, \"src\")):\n    rmtree(openshot_copy_path, True)\n\n# Fix a few things on the frozen folder(s)\nbuild_path = os.path.join(PATH, \"build\")\nif sys.platform == \"darwin\":\n    # Mac issues with frozen folder and *.app folder\n    # We need to rewrite many dependency paths and library IDs\n    from installer.fix_qt5_rpath import *\n    for frozen_path in os.listdir(build_path):\n            if frozen_path.startswith(\"exe\"):\n                fix_rpath(os.path.join(build_path, frozen_path))\n            elif frozen_path.endswith(\".app\"):\n                fix_rpath(os.path.join(build_path, frozen_path, \"Contents\", \"MacOS\"))\n                print_min_versions(os.path.join(build_path, frozen_path, \"Contents\", \"MacOS\"))\n\nelif sys.platform == \"linux\":\n    # Linux issues with frozen folder\n    # We need to remove some excess folders/files that are unneeded bloat\n    for frozen_path in os.listdir(build_path):\n            if frozen_path.startswith(\"exe\"):\n                paths = [\"lib/openshot_qt/\",\n                         \"lib/*opencv*\",\n                         \"lib/libopenshot*\",\n                         \"translations/\",\n                         \"locales/\",\n                         \"libQt5WebKit.so.5\"]\n                for path in paths:\n                    full_path = os.path.join(build_path, frozen_path, path)\n                    for remove_path in glob.glob(full_path):\n                        if os.path.isfile(remove_path):\n                            log.info(\"Removing unneeded file: %s\" % remove_path)\n                            os.unlink(remove_path)\n                        elif os.path.isdir(remove_path):\n                            log.info(\"Removing unneeded folder: %s\" % remove_path)\n                            rmtree(remove_path)\n\n# We need to remove some excess folders/files that are unneeded bloat\n# All 3 OSes\nfor frozen_path in os.listdir(build_path):\n        if frozen_path.startswith(\"exe\"):\n            paths = [\"lib/babl-ext/libbabl-0.1-0.*\",\n                     \"lib/babl-ext/libgcc_s_seh-1.*\",\n                     \"lib/babl-ext/liblcms2-2.*\",\n                     \"lib/babl-ext/libwinpthread-1.*\",\n                     \"lib/babl-ext/msvcrt.*\"]\n            for path in paths:\n                full_path = os.path.join(build_path, frozen_path, path)\n                for remove_path in glob.glob(full_path):\n                    if os.path.isfile(remove_path):\n                        log.info(\"Removing unneeded file: %s\" % remove_path)\n                        os.unlink(remove_path)\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.494140625,
          "content": "\"\"\"\n @file\n @brief Setup script to install OpenShot (on Linux and without any dependencies such as libopenshot)\n @author Jonathan Thomas <jonathan@openshot.org>\n\n @section LICENSE\n\n Copyright (c) 2008-2016 OpenShot Studios, LLC\n (http://www.openshotstudios.com). This file is part of\n OpenShot Video Editor (http://www.openshot.org), an open-source project\n dedicated to delivering high quality video editing and animation solutions\n to the world.\n\n OpenShot Video Editor is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n OpenShot Video Editor is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with OpenShot Library.  If not, see <http://www.gnu.org/licenses/>.\n \"\"\"\n\nimport os\nimport sys\nimport fnmatch\nimport subprocess\nfrom setuptools import setup\nfrom shutil import copytree, rmtree, copy\n\n\n# Determine absolute PATH of OpenShot folder\nPATH = os.path.dirname(os.path.realpath(__file__))  # Primary openshot folder\n\n# Make a copy of the src tree (temporary for naming reasons only)\nif os.path.exists(os.path.join(PATH, \"src\")):\n    print(\"Copying modules to openshot_qt directory: %s\" % os.path.join(PATH, \"openshot_qt\"))\n    # Only make a copy if the SRC directory is present (otherwise ignore this)\n    copytree(os.path.join(PATH, \"src\"), os.path.join(PATH, \"openshot_qt\"))\n\nif os.path.exists(os.path.join(PATH, \"openshot_qt\")):\n    # Append path to system path\n    sys.path.append(os.path.join(PATH, \"openshot_qt\"))\n    print(\"Loaded modules from openshot_qt directory: %s\" % os.path.join(PATH, \"openshot_qt\"))\n\n\nfrom classes import info\nfrom classes.logger import log\n\nlog.info(\"Execution path: %s\" % os.path.abspath(__file__))\n\n# Boolean: running as root?\nROOT = os.geteuid() == 0\n# For Debian packaging it could be a fakeroot so reset flag to prevent execution of\n# system update services for Mime and Desktop registrations.\n# The debian/openshot.postinst script must do those.\nif os.getenv(\"FAKEROOTKEY\") is not None:\n    log.info(\"NOTICE: Detected execution in a FakeRoot so disabling calls to system update services.\")\n    ROOT = False\n\nos_files = [\n    # XDG application description\n    ('share/applications', ['xdg/org.openshot.OpenShot.desktop']),\n    # AppStream metadata\n    ('share/metainfo', ['xdg/org.openshot.OpenShot.appdata.xml']),\n    # Debian menu system application icon\n    ('share/pixmaps', ['xdg/openshot-qt.svg']),\n    # XDG Freedesktop icon paths\n    ('share/icons/hicolor/scalable/apps', ['xdg/openshot-qt.svg']),\n    ('share/icons/hicolor/scalable/mimetypes', ['xdg/openshot-qt-doc.svg']),\n    ('share/icons/hicolor/64x64/apps', ['xdg/icon/64/openshot-qt.png']),\n    ('share/icons/hicolor/128x128/apps', ['xdg/icon/128/openshot-qt.png']),\n    ('share/icons/hicolor/256x256/apps', ['xdg/icon/256/openshot-qt.png']),\n    ('share/icons/hicolor/512x512/apps', ['xdg/icon/512/openshot-qt.png']),\n    # XDG desktop mime types cache\n    ('share/mime/packages', ['xdg/org.openshot.OpenShot.xml']),\n    # launcher (mime.types)\n    ('lib/mime/packages', ['xdg/openshot-qt']),\n]\n\n# Find files matching patterns\ndef find_files(directory, patterns):\n    \"\"\" Recursively find all files in a folder tree \"\"\"\n    for root, dirs, files in os.walk(directory):\n        for basename in files:\n            if \".pyc\" not in basename and \"__pycache__\" not in basename:\n                for pattern in patterns:\n                    if fnmatch.fnmatch(basename, pattern):\n                        filename = os.path.join(root, basename)\n                        yield filename\n\n\npackage_data = {}\n\n# Find all project files\nsrc_files = []\nfor filename in find_files(os.path.join(PATH, \"openshot_qt\"), [\"*\"]):\n    src_files.append(filename.replace(os.path.join(PATH, \"openshot_qt\"), \"\"))\npackage_data[\"openshot_qt\"] = src_files\n\n# Call the main Distutils setup command\n# -------------------------------------\ndist = setup(\n    packages=[('openshot_qt')],\n    package_data=package_data,\n    data_files=os_files,\n    include_package_data=True,\n    **info.SETUP\n)\n# -------------------------------------\n\n# Remove temporary folder (if SRC folder present)\nif os.path.exists(os.path.join(PATH, \"src\")):\n    rmtree(os.path.join(PATH, \"openshot_qt\"), True)\n\nFAILED = 'Failed to update.\\n'\n\nif ROOT and dist != None:\n    # update the XDG Shared MIME-Info database cache\n    try:\n        sys.stdout.write('Updating the Shared MIME-Info database cache.\\n')\n        subprocess.call([\"update-mime-database\", os.path.join(sys.prefix, \"share/mime/\")])\n    except:\n        sys.stderr.write(FAILED)\n\n    # update the mime.types database\n    try:\n        sys.stdout.write('Updating the mime.types database\\n')\n        subprocess.call(\"update-mime\")\n    except:\n        sys.stderr.write(FAILED)\n\n    # update the XDG .desktop file database\n    try:\n        sys.stdout.write('Updating the .desktop file database.\\n')\n        subprocess.call([\"update-desktop-database\"])\n    except:\n        sys.stderr.write(FAILED)\n    sys.stdout.write(\"\\n-----------------------------------------------\")\n    sys.stdout.write(\"\\nInstallation Finished!\")\n    sys.stdout.write(\"\\nRun OpenShot by typing 'openshot-qt' or through the Applications menu.\")\n    sys.stdout.write(\"\\n-----------------------------------------------\\n\")\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "xdg",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}