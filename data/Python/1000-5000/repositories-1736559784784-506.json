{
  "metadata": {
    "timestamp": 1736559784784,
    "page": 506,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "moshstudio/TAICHI-flet",
      "stars": 3873,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.6982421875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2022 cuifengcn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.044921875,
          "content": "<p align=\"center\">\n  <a href=\"https://github.com/cuifengcn/wechat-video-generate\">\n    <img width=\"200\" height=\"200\" src=\"https://github.com/cuifengcn/TAICHI-flet/blob/main/taiji.png\" alt=\"TAICHI-flet\">\n  </a>\n</p>\n\n<h1 align=\"center\">TAICHI-flet</h1>\n\n<p align=\"center\">\n  <a href=\"#下载\">\n    <img src=\"https://img.shields.io/github/downloads/cuifengcn/TAICHI-flet/total?style=flat-square\" alt=\"forks\">\n  </a>\n  <img src=\"https://img.shields.io/github/stars/cuifengcn/TAICHI-flet?style=flat-square\" alt=\"stars\">\n  <img src=\"https://img.shields.io/github/forks/cuifengcn/TAICHI-flet?style=flat-square\" alt=\"forks\">\n</p>\n\n---\n\n\n 基于flet的一款windows桌面应用，实现了浏览图片、音乐、小说、各种资源的功能，还有gpt、ai绘画等高级功能。\n\n 特点：多功能娱乐软件，界面美观、简洁。\n \n （开源代码已不更新，软件包持续更新中）\n \n会持续更新\n\n## 最新版本(2025年01月07日)\n\n为保证太极正常使用，请【安装3.0.0版本】\n\n电脑版《太极》3.0.0版本下载地址\n\nhttps://wwtn.lanzout.com/iQEvH2k79v3i\n\n---\n\n## 功能介绍\n\n1. 首页\n\n![首页](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/5969c1f1-c3c9-414b-a842-722df471fadb)\n\n右上角可切换主题、进行全局个性化设置、显示热搜榜，点击左上角时间可使用默认壁纸。\n\n2. 观山——图片浏览，风景图、妹子图、二次元图等\n   \n![观山](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/75c6da1f-27ef-4497-b78f-fa2f8a8a33a9)\n\n右下角可选择下载、设为壁纸、调整壁纸模糊度等。\n\n3. 听雨——音乐收藏、试听\n\n![听雨](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/dfb3de06-ea51-4474-a1e7-a314b888e7f8)\n\n点击底部头像进入沉浸页，点击歌词打开桌面歌词。\n\n4. 修仙——小说搜索、阅读\n\n![修仙](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/a6b1aa65-64c3-436d-bc72-1bf0d47bfe07)\n\n可选择加入书架，可选择听小说模式。\n\n5. 抚琴——云盘资源、软件资源搜索\n\n![抚琴](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/fd5431cd-6dec-4305-97fb-c75257a07aca)\n\n6. 小站——资源、影视查找\n\n![小站](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/5ddeff61-9af0-45d2-9c00-e159dfbeb295)\n\n7. 览竹——动漫搜索、观看\n\n![览竹](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/51112fa4-4bd3-41e5-b3a1-22390554f8b9)\n\n8. 论道——ChatGPT、AI绘画(高级功能)\n\n![论道](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/72cb7309-6db8-4e8e-bee1-9ec61adbcc73)\n\n![论道2](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/f7d15b42-d45a-4683-b057-7b9966940e50)\n\n\n9. 宝库——几十种工具\n\n![宝库](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/535bb4a8-8992-4751-969a-089e8eae44df)\n\n## 关注公众号了解更多功能\n\n![image](https://github.com/cuifengcn/TAICHI-flet/assets/38805177/861e963c-4374-4232-921a-7d182c22729d)\n\n## Star历史\n\n![Star History Chart](https://api.star-history.com/svg?repos=moshstudio/TAICHI-flet&type=Date)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "methods",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 1.421875,
          "content": "﻿aiohttp==3.8.3\r\naiosignal==1.3.1\r\naltgraph==0.17.3\r\nappdirs==1.4.4\r\nasync-timeout==4.0.2\r\nattrs==22.1.0\r\nauto-py-to-exe==2.24.1\r\nbeartype==0.11.0\r\nbeautifulsoup4==4.11.1\r\nblack==22.10.0\r\nbottle==0.12.23\r\nbottle-websocket==0.2.9\r\nbs4==0.0.1\r\ncertifi==2022.9.24\r\ncffi==1.15.1\r\ncharset-normalizer==2.1.1\r\nclick==8.1.3\r\ncolorama==0.4.6\r\ncssselect==1.2.0\r\nEel==0.14.0\r\nfake-useragent==1.0.1\r\nfire==0.4.0\r\nflet==0.2.0.dev859\r\nfonttools==4.38.0\r\nfrozenlist==1.3.3\r\nfuture==0.18.2\r\ngevent==22.10.2\r\ngevent-websocket==0.10.1\r\ngreenlet==2.0.1\r\nidna==3.4\r\nimportlib-metadata==5.0.0\r\nimportlib-resources==5.10.0\r\niso8601==1.1.0\r\nlxml==4.9.1\r\nm3u8==3.3.0\r\nmultidict==6.0.2\r\nmypy-extensions==0.4.3\r\nnumpy==1.23.5\r\noauthlib==3.2.2\r\nopencv-python==4.6.0.66\r\nparse==1.19.0\r\npathspec==0.10.2\r\npdf2docx==0.5.6\r\npefile==2022.5.30\r\nPillow==9.3.0\r\nplatformdirs==2.5.4\r\npycparser==2.21\r\npycryptodome==3.16.0\r\npyee==8.2.2\r\npyinstaller==5.6.2\r\npyinstaller-hooks-contrib==2022.13\r\nPyMuPDF==1.21.0\r\npyparsing==3.0.9\r\npyppeteer==1.0.2\r\npyquery==1.4.3\r\npython-docx==0.8.11\r\npywin32-ctypes==0.2.0\r\nrepath==0.9.0\r\nrequests==2.28.1\r\nrequests-html==0.10.0\r\nsix==1.16.0\r\nsoupsieve==2.3.2.post1\r\ntermcolor==2.1.1\r\ntomli==2.0.1\r\ntqdm==4.64.1\r\ntyping_extensions==4.4.0\r\nurllib3==1.26.12\r\nw3lib==2.0.1\r\nwatchdog==2.1.9\r\nwebsocket-client==1.4.2\r\nwebsockets==10.4\r\nwhichcraft==0.6.1\r\nyarl==1.8.1\r\nzipp==3.10.0\r\nzope.event==4.5.0\r\nzope.interface==5.5.2\r\nrequests_html==0.10.0\r\npdf2docx==0.5.6\r\n"
        },
        {
          "name": "settings.py",
          "type": "blob",
          "size": 0.4912109375,
          "content": "from flet import icons\n\nnavigation_tabs = [\n    [icons.HOME_OUTLINED, \"首页\", \"main\"],\n    [icons.TERRAIN_OUTLINED, \"观山\", \"mountain\"],\n    [icons.WATER_DROP_OUTLINED, \"听雨\", \"rain\"],\n    [icons.FAVORITE_BORDER, \"修仙\", \"immortality\"],\n    # [icons.LOCAL_FIRE_DEPARTMENT_OUTLINED, \"焚香\", \"cense\"],  # 这个功能没有用\n    [icons.LYRICS_OUTLINED, \"抚琴\", \"lyra\"],\n    [icons.ALL_INBOX_ROUNDED, \"百宝囊\", \"treasure\"],\n    [icons.TEMPLE_BUDDHIST_ROUNDED, \"藏经阁\", \"buddhist\"],\n]\n"
        },
        {
          "name": "statics.py",
          "type": "blob",
          "size": 0.267578125,
          "content": "import flet\nfrom flet import Image, Container\n\nTAICHI = Image(src=\"imgs/taichi.svg\", width=40, height=40, fit=\"cover\")\nBIG_TAICHI = Image(src=\"imgs/taichi.svg\", width=200, height=200, fit=\"cover\")\nCLOUD = Image(src=\"imgs/cloud.svg\", fit=\"cover\")\n\nGONGZHONGHAO = Container()\n"
        },
        {
          "name": "taiji.png",
          "type": "blob",
          "size": 8.349609375,
          "content": null
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 1.2470703125,
          "content": "import flet as ft\n\n\ndef main(page: ft.Page):\n    page.add(ft.ListView(\n        [ft.DataTable(\n            columns=[\n                ft.DataColumn(ft.Text(\"First name\")),\n                ft.DataColumn(ft.Text(\"Last name\")),\n                ft.DataColumn(ft.Text(\"Age\"), numeric=True),\n            ],\n            rows=[\n                     ft.DataRow(\n                         cells=[\n                             ft.DataCell(ft.Text(\"John\")),\n                             ft.DataCell(ft.Text(\"Smith\")),\n                             ft.DataCell(ft.Text(\"43\")),\n                         ],\n                     ),\n                     ft.DataRow(\n                         cells=[\n                             ft.DataCell(ft.Text(\"Jack\")),\n                             ft.DataCell(ft.Text(\"Brown\")),\n                             ft.DataCell(ft.Text(\"19\")),\n                         ],\n                     ),\n                     ft.DataRow(\n                         cells=[\n                             ft.DataCell(ft.Text(\"Alice\")),\n                             ft.DataCell(ft.Text(\"Wong\")),\n                             ft.DataCell(ft.Text(\"25\")),\n                         ],\n                     ),\n                 ] * 20,\n\n        )],height=200)\n    )\n\n\nft.app(target=main)\n"
        },
        {
          "name": "ui.py",
          "type": "blob",
          "size": 1.544921875,
          "content": "from importlib import import_module\n\nimport flet\n\ntry:\n    from views import cense, immortality, lyra, main, mountain, rain, treasure, buddhist\n    from views.treasure_dialogs import pdf2word\nexcept:\n    pass\nfrom flet import Tabs, Tab, Page, Stack, ProgressBar\n\nfrom settings import navigation_tabs\n\n\nclass NavigationBar(Stack):\n    def __init__(self, page: Page):\n        self.page = page\n        self.tabs = Tabs(expand=1)\n        self.tabs_list = []\n        for navigation in navigation_tabs:\n            content = self.get_page(navigation[2])\n            if not content:\n                continue\n            icon = navigation[0]\n            text = navigation[1]\n            self.tabs_list.append(Tab(content=content, icon=icon, text=text))\n        self.tabs.tabs.extend(self.tabs_list)\n        self.tabs.on_change = lambda e: self.tab_init_event(e.data)\n        super(NavigationBar, self).__init__(controls=[self.tabs], expand=True)\n\n    def tab_init_event(self, index):\n        index = int(index)\n        if hasattr(self.tabs_list[index].content, \"init_event\"):\n            getattr(self.tabs_list[index].content, \"init_event\")()\n\n    def get_page(self, module_name):\n        try:\n            module_file = import_module(\"views.\" + module_name)\n            return module_file.ViewPage(self.page)\n        except Exception as e:\n            print(\"getpage\", e)\n\n\ndef main(page: Page):\n    page.title = \"太·极\"\n    progress_bar = ProgressBar(visible=False)\n    page.splash = progress_bar\n    t = NavigationBar(page)\n    page.add(t)\n\n\nflet.app(target=main, assets_dir=\"assets\")\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 2.99609375,
          "content": "# coding:utf-8\nimport base64\nimport os\nimport re\nimport time\nfrom pathlib import Path\nfrom threading import Thread\nfrom typing import Optional\n\nfrom flet import SnackBar, Text, Image as _Image\nfrom requests_html import HTMLSession as _HTMLSession, HTMLResponse\n\n\"\"\"\"\"\"\nCURR_PATH = Path(__file__).absolute().parent\nDESKTOP = os.path.join(os.path.expanduser(\"~\"), \"Desktop\")\nPICTURE = os.path.join(os.path.expanduser(\"~\"), \"Pictures\")\nCACHE = CURR_PATH.joinpath(\"Cache\")\nCACHE.mkdir(parents=True, exist_ok=True)\n\n\nclass CORSImage(_Image):\n    cors_url = \"https://pc-cors.elitb.com/proxy?url=\"\n\n    def __init__(self, *args, **kwargs):\n        if \"src\" in kwargs:\n            kwargs[\"src\"] = self.cors_url + kwargs[\"src\"]\n        else:\n            if args:\n                args = (self.cors_url + args[0],) + args[1:]\n        super(CORSImage, self).__init__(*args, **kwargs)\n\n\ndef snack_bar(page, message):\n    page.snack_bar = SnackBar(content=Text(message), action=\"好的\")\n    page.snack_bar.open = True\n    page.update()\n\n\ndef one_shot_thread(func, timeout=0.0):\n    def run(func, timeout):\n        time.sleep(timeout)\n        try:\n            func()\n        except Exception as e:\n            print(f\"one_shot_thread:{func} {e}\")\n\n    Thread(target=run, args=(func, timeout), daemon=True).start()\n\n\nThreads = []\n\n\ndef cycle_thread(func, timeout=None):\n    def run(func, timeout):\n        if timeout is not None:\n            time.sleep(timeout)\n        func()\n\n    thread = Thread(target=run, args=(func, timeout), daemon=True)\n    Threads.append(thread)\n    thread.start()\n\n\nclass HTMLSession(_HTMLSession):\n    def __init__(self, headers: Optional[dict] = None, **kwargs):\n        super(HTMLSession, self).__init__(**kwargs)\n        if headers:\n            self.headers.update(headers)\n\n\ndef ms_to_time(ms):\n    # 毫秒转换为时间格式\n    ms = int(ms)\n    minute, second = divmod(ms / 1000, 60)\n    minute = min(99, minute)\n    return \"%02d:%02d\" % (minute, second)\n\n\ndef handle_redirect(url, session=None):\n    if session is None:\n        session = HTMLSession()\n    resp = session.get(url, stream=True)\n    return resp.url\n\n\ndef download_url_content(url) -> HTMLResponse:\n    session = HTMLSession()\n    resp = session.get(url)\n    return resp\n\n\ndef download_named_image(url):\n    regx = re.compile(r'/([\\w\\-]*\\.[a-zA-Z]*)\\??')\n    file_name = regx.findall(url)[-1]\n    session = HTMLSession()\n    p = Path(PICTURE).joinpath(\"taichi\")\n    p.mkdir(exist_ok=True)\n    resp = session.get(url)\n    f = p.joinpath(file_name)\n    f.write_bytes(resp.content)\n    return f\n\n\nclass SRCImage(_Image):\n    session = HTMLSession()\n\n    def __init__(self, *args, **kwargs):\n        if \"src\" not in kwargs:\n            kwargs[\"src\"] = args[0]\n            args = args[1:]\n        try:\n            session = HTMLSession()\n            resp = session.get(kwargs[\"src\"])\n            kwargs[\"src_base64\"] = base64.b64encode(resp.content).decode()\n            kwargs.pop(\"src\")\n        except:\n            pass\n        super(SRCImage, self).__init__(*args, **kwargs)\n\n\n\"\"\"\"\"\"\n"
        },
        {
          "name": "views",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}