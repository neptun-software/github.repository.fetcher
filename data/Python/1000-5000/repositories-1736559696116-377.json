{
  "metadata": {
    "timestamp": 1736559696116,
    "page": 377,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Picsart-AI-Research/Text2Video-Zero",
      "stars": 4099,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "__pycache__/\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 14.1396484375,
          "content": "Copyright (c) 2023 Levon Khachatryan and Andranik Movsisyan and Vahram Tadevosyan and Roberto Henschel and Zhangyang Wang and Shant Navasardyan and Humphrey Shi  \n\n\nCreativeML Open RAIL-M\ndated March 28, 2023\n\nSection I: PREAMBLE\n\nMultimodal generative models are being widely adopted and used, and have the potential to transform the way artists, among other individuals, conceive and benefit from AI or ML technologies as a tool for content creation.\n\nNotwithstanding the current and potential benefits that these artifacts can bring to society at large, there are also concerns about potential misuses of them, either due to their technical limitations or ethical considerations.\n\nIn short, this license strives for both the open and responsible downstream use of the accompanying model. When it comes to the open character, we took inspiration from open source permissive licenses regarding the grant of IP rights. Referring to the downstream responsible use, we added use-based restrictions not permitting the use of the Model in very specific scenarios, in order for the licensor to be able to enforce the license in case potential misuses of the Model may occur. At the same time, we strive to promote open and responsible research on generative models for art and content generation.\n\nEven though downstream derivative versions of the model could be released under different licensing terms, the latter will always have to include - at minimum - the same use-based restrictions as the ones in the original license (this license). We believe in the intersection between open and responsible AI development; thus, this License aims to strike a balance between both in order to enable responsible open-science in the field of AI.\n\nThis License governs the use of the model (and its derivatives) and is informed by the model card associated with the model.\n\nNOW THEREFORE, You and Licensor agree as follows:\n\n1. Definitions\n\n- \"License\" means the terms and conditions for use, reproduction, and Distribution as defined in this document.\n- \"Data\" means a collection of information and/or content extracted from the dataset used with the Model, including to train, pretrain, or otherwise evaluate the Model. The Data is not licensed under this License.\n- \"Output\" means the results of operating a Model as embodied in informational content resulting therefrom.\n- \"Model\" means any accompanying machine-learning based assemblies (including checkpoints), consisting of learnt weights, parameters (including optimizer states), corresponding to the model architecture as embodied in the Complementary Material, that have been trained or tuned, in whole or in part on the Data, using the Complementary Material.\n- \"Derivatives of the Model\" means all modifications to the Model, works based on the Model, or any other model which is created or initialized by transfer of patterns of the weights, parameters, activations or output of the Model, to the other model, in order to cause the other model to perform similarly to the Model, including - but not limited to - distillation methods entailing the use of intermediate data representations or methods based on the generation of synthetic data by the Model for training the other model.\n- \"Complementary Material\" means the accompanying source code and scripts used to define, run, load, benchmark or evaluate the Model, and used to prepare data for training or evaluation, if any. This includes any accompanying documentation, tutorials, examples, etc, if any.\n- \"Distribution\" means any transmission, reproduction, publication or other sharing of the Model or Derivatives of the Model to a third party, including providing the Model as a hosted service made available by electronic or other remote means - e.g. API-based or web access.\n- \"Licensor\" means the copyright owner or entity authorized by the copyright owner that is granting the License, including the persons or entities that may have rights in the Model and/or distributing the Model.\n- \"You\" (or \"Your\") means an individual or Legal Entity exercising permissions granted by this License and/or making use of the Model for whichever purpose and in any field of use, including usage of the Model in an end-use application - e.g. chatbot, translator, image generator.\n- \"Third Parties\" means individuals or legal entities that are not under common control with Licensor or You.\n- \"Contribution\" means any work of authorship, including the original version of the Model and any modifications or additions to that Model or Derivatives of the Model thereof, that is intentionally submitted to Licensor for inclusion in the Model by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Model, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n- \"Contributor\" means Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Model.\n\nSection II: INTELLECTUAL PROPERTY RIGHTS\n\nBoth copyright and patent grants apply to the Model, Derivatives of the Model and Complementary Material. The Model and Derivatives of the Model are subject to additional terms as described in Section III.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare, publicly display, publicly perform, sublicense, and distribute the Complementary Material, the Model, and Derivatives of the Model.\n3. Grant of Patent License. Subject to the terms and conditions of this License and where and as applicable, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this paragraph) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Model and the Complementary Material, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Model to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Model and/or Complementary Material or a Contribution incorporated within the Model and/or Complementary Material constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for the Model and/or Work shall terminate as of the date such litigation is asserted or filed.\n\nSection III: CONDITIONS OF USAGE, DISTRIBUTION AND REDISTRIBUTION\n\n4. Distribution and Redistribution. You may host for Third Party remote access purposes (e.g. software-as-a-service), reproduce and distribute copies of the Model or Derivatives of the Model thereof in any medium, with or without modifications, provided that You meet the following conditions:\nUse-based restrictions as referenced in paragraph 5 MUST be included as an enforceable provision by You in any type of legal agreement (e.g. a license) governing the use and/or distribution of the Model or Derivatives of the Model, and You shall give notice to subsequent users You Distribute to, that the Model or Derivatives of the Model are subject to paragraph 5. This provision does not apply to the use of Complementary Material.\nYou must give any Third Party recipients of the Model or Derivatives of the Model a copy of this License;\nYou must cause any modified files to carry prominent notices stating that You changed the files;\nYou must retain all copyright, patent, trademark, and attribution notices excluding those notices that do not pertain to any part of the Model, Derivatives of the Model.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions - respecting paragraph 4.a. - for use, reproduction, or Distribution of Your modifications, or for any such Derivatives of the Model as a whole, provided Your use, reproduction, and Distribution of the Model otherwise complies with the conditions stated in this License.\n5. Use-based restrictions. The restrictions set forth in Attachment A are considered Use-based restrictions. Therefore You cannot use the Model and the Derivatives of the Model for the specified restricted uses. You may use the Model subject to this License, including only for lawful purposes and in accordance with the License. Use may include creating any content with, finetuning, updating, running, training, evaluating and/or reparametrizing the Model. You shall require all of Your users who use the Model or a Derivative of the Model to comply with the terms of this paragraph (paragraph 5).\n6. The Output You Generate. Except as set forth herein, Licensor claims no rights in the Output You generate using the Model. You are accountable for the Output you generate and its subsequent uses. No use of the output can contravene any provision as stated in the License.\n\nSection IV: OTHER PROVISIONS\n\n7. Updates and Runtime Restrictions. To the maximum extent permitted by law, Licensor reserves the right to restrict (remotely or otherwise) usage of the Model in violation of this License, update the Model through electronic means, or modify the Output of the Model based on updates. You shall undertake reasonable efforts to use the latest version of the Model.\n8. Trademarks and related. Nothing in this License permits You to make use of Licensors’ trademarks, trade names, logos or to otherwise suggest endorsement or misrepresent the relationship between the parties; and any rights not expressly granted herein are reserved by the Licensors.\n9. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Model and the Complementary Material (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Model, Derivatives of the Model, and the Complementary Material and assume any risks associated with Your exercise of permissions under this License.\n10. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Model and the Complementary Material (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n11. Accepting Warranty or Additional Liability. While redistributing the Model, Derivatives of the Model and the Complementary Material thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n12. If any provision of this License is held to be invalid, illegal or unenforceable, the remaining provisions shall be unaffected thereby and remain valid as if such provision had not been set forth herein.\n\nEND OF TERMS AND CONDITIONS\n\n\n\n\nAttachment A\n\nUse Restrictions\n\nYou agree not to use the Model or Derivatives of the Model:\n- In any way that violates any applicable national, federal, state, local or international law or regulation;\n- For the purpose of exploiting, harming or attempting to exploit or harm minors in any way;\n- To generate or disseminate verifiably false information and/or content with the purpose of harming others;\n- To generate or disseminate personal identifiable information that can be used to harm an individual;\n- To defame, disparage or otherwise harass others;\n- For fully automated decision making that adversely impacts an individual’s legal rights or otherwise creates or modifies a binding, enforceable obligation;\n- For any use intended to or which has the effect of discriminating against or harming individuals or groups based on online or offline social behavior or known or predicted personal or personality characteristics;\n- To exploit any of the vulnerabilities of a specific group of persons based on their age, social, physical or mental characteristics, in order to materially distort the behavior of a person pertaining to that group in a manner that causes or is likely to cause that person or another person physical or psychological harm;\n- For any use intended to or which has the effect of discriminating against individuals or groups based on legally protected characteristics or categories;\n- To provide medical advice and medical results interpretation;\n- To generate or disseminate information for the purpose to be used for administration of justice, law enforcement, immigration or asylum processes, such as predicting an individual will commit fraud/crime commitment (e.g. by text profiling, drawing causal relationships between assertions made in documents, indiscriminate and arbitrarily-targeted use)."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.478515625,
          "content": "\n\n\n# Text2Video-Zero\n\nThis repository is the official implementation of [Text2Video-Zero](https://arxiv.org/abs/2303.13439).\n\n\n**[Text2Video-Zero: Text-to-Image Diffusion Models are Zero-Shot Video Generators](https://arxiv.org/abs/2303.13439)**\n</br>\nLevon Khachatryan,\nAndranik Movsisyan,\nVahram Tadevosyan,\nRoberto Henschel,\n[Zhangyang Wang](https://www.ece.utexas.edu/people/faculty/atlas-wang), Shant Navasardyan, [Humphrey Shi](https://www.humphreyshi.com)\n</br>\n\n[Paper](https://arxiv.org/abs/2303.13439) | [Video](https://www.dropbox.com/s/uv90mi2z598olsq/Text2Video-Zero.MP4?dl=0) | [![Hugging Face Spaces](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Spaces-blue)](https://huggingface.co/spaces/PAIR/Text2Video-Zero) | [Project](https://text2video-zero.github.io/)\n\n\n<p align=\"center\">\n<img src=\"__assets__/github/teaser/teaser_final.png\" width=\"800px\"/>  \n<br>\n<em>Our method Text2Video-Zero enables zero-shot video generation using (i) a textual prompt (see rows 1, 2),  (ii) a prompt combined with guidance from poses or edges (see lower right), and  (iii)  Video Instruct-Pix2Pix, i.e., instruction-guided video editing (see lower left). \n    Results are temporally consistent and follow closely the guidance and textual prompts.</em>\n</p>\n\n## News\n\n* [03/23/2023] Paper [Text2Video-Zero](https://arxiv.org/abs/2303.13439) released!\n* [03/25/2023] The [first version](https://huggingface.co/spaces/PAIR/Text2Video-Zero) of our huggingface demo (containing `zero-shot text-to-video generation` and  `Video Instruct Pix2Pix`) released!\n* [03/27/2023] The [full version](https://huggingface.co/spaces/PAIR/Text2Video-Zero) of our huggingface demo released! Now also included: `text and pose conditional video generation`, `text and edge conditional video generation`, and \n`text, edge and dreambooth conditional video generation`.\n* [03/28/2023] Code for all our generation methods released! We added a new low-memory setup. Minimum required GPU VRAM is currently **12 GB**. It will be further reduced in the upcoming releases. \n* [03/29/2023] Improved [Huggingface demo](https://huggingface.co/spaces/PAIR/Text2Video-Zero)! (i) For text-to-video generation, **any base model for stable diffusion** and **any dreambooth model** hosted on huggingface can now be loaded! (ii) We improved the quality of Video Instruct-Pix2Pix. (iii) We added two longer examples for Video Instruct-Pix2Pix.   \n* [03/30/2023] New code released! It includes all improvements of our latest huggingface iteration. See the news update from `03/29/2023`. In addition, generated videos (text-to-video) can have **arbitrary length**. \n* [04/06/2023] We integrated [Token Merging](https://github.com/dbolya/tomesd) into our code. When the highest compression is used and chunk size set to `2`, our code can run with **less than 7 GB VRAM**.  \n* [04/11/2023] New code and Huggingface demo released! We integrated **depth control**, based on [MiDaS](https://arxiv.org/pdf/1907.01341.pdf).\n* [04/13/2023] Our method has been integrad into 🧨 [Diffusers](https://huggingface.co/docs/diffusers/api/pipelines/text_to_video_zero)!\n\n## Contribute\nWe are on a journey to democratize AI and empower the creativity of everyone, and we believe Text2Video-Zero is a great research direction to unleash the zero-shot video generation and editing capacity of the amazing text-to-image models!\n\nTo achieve this goal, all contributions are welcome. Please check out these external implementations and extensions of Text2Video-Zero. We thank the authors for their efforts and contributions:\n* https://github.com/JiauZhang/Text2Video-Zero\n* https://github.com/camenduru/text2video-zero-colab\n* https://github.com/SHI-Labs/Text2Video-Zero-sd-webui\n\n\n\n\n\n\n## Setup\n\n\n\n1. Clone this repository and enter:\n\n``` shell\ngit clone https://github.com/Picsart-AI-Research/Text2Video-Zero.git\ncd Text2Video-Zero/\n```\n2. Install requirements using Python 3.9 and CUDA >= 11.6\n``` shell\nvirtualenv --system-site-packages -p python3.9 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\n\n\n\n--- \n\n\n\n## Inference API\n\n\nTo run inferences create an instance of `Model` class\n\n``` python\nimport torch\nfrom model import Model\n\nmodel = Model(device = \"cuda\", dtype = torch.float16)\n```\n\n\n---\n\n\n### Text-To-Video\nTo directly call our text-to-video generator, run this python command which stores the result in `tmp/text2video/A_horse_galloping_on_a_street.mp4` :\n``` python\nprompt = \"A horse galloping on a street\"\nparams = {\"t0\": 44, \"t1\": 47 , \"motion_field_strength_x\" : 12, \"motion_field_strength_y\" : 12, \"video_length\": 8}\n\nout_path, fps = f\"./text2video_{prompt.replace(' ','_')}.mp4\", 4\nmodel.process_text2video(prompt, fps = fps, path = out_path, **params)\n```\n\nTo use a different stable diffusion base model run this python command:\n``` python\nfrom hf_utils import get_model_list\nmodel_list = get_model_list()\nfor idx, name in enumerate(model_list):\n  print(idx, name)\nidx = int(input(\"Select the model by the listed number: \")) # select the model of your choice\nmodel.process_text2video(prompt, model_name = model_list[idx], fps = fps, path = out_path, **params)\n```\n\n\n#### Hyperparameters (Optional)\n\nYou can define the following hyperparameters:\n* **Motion field strength**:   `motion_field_strength_x` = $\\delta_x$  and `motion_field_strength_y` = $\\delta_y$ (see our paper, Sect. 3.3.1). Default: `motion_field_strength_x=motion_field_strength_y= 12`.\n* $T$ and $T'$ (see our paper, Sect. 3.3.1). Define values `t0` and `t1` in the range `{0,...,50}`. Default: `t0=44`, `t1=47` (DDIM steps). Corresponds to timesteps `881` and `941`, respectively. \n* **Video length**: Define the number of frames `video_length` to be generated. Default: `video_length=8`.\n\n\n---\n\n\n### Text-To-Video with Pose Control\nTo directly call our text-to-video generator with pose control, run this python command:\n``` python\nprompt = 'an astronaut dancing in outer space'\nmotion_path = '__assets__/poses_skeleton_gifs/dance1_corr.mp4'\nout_path = f\"./text2video_pose_guidance_{prompt.replace(' ','_')}.gif\"\nmodel.process_controlnet_pose(motion_path, prompt=prompt, save_path=out_path)\n```\n\n\n---\n\n\n\n### Text-To-Video with Edge Control\nTo directly call our text-to-video generator with edge control, run this python command:\n``` python\nprompt = 'oil painting of a deer, a high-quality, detailed, and professional photo'\nvideo_path = '__assets__/canny_videos_mp4/deer.mp4'\nout_path = f'./text2video_edge_guidance_{prompt}.mp4'\nmodel.process_controlnet_canny(video_path, prompt=prompt, save_path=out_path)\n```\n\n#### Hyperparameters\n\nYou can define the following hyperparameters for Canny edge detection:\n* **low threshold**. Define value `low_threshold` in the range $(0, 255)$. Default: `low_threshold=100`.\n* **high threshold**. Define value `high_threshold` in the range $(0, 255)$. Default: `high_threshold=200`. Make sure that `high_threshold` > `low_threshold`.\n\nYou can give hyperparameters as arguments to `model.process_controlnet_canny`\n\n\n---\n\n\n### Text-To-Video with Edge Guidance and Dreambooth specialization\nLoad a dreambooth model then proceed as described in `Text-To-Video with Edge Guidance`\n``` python\n\nprompt = 'your prompt'\nvideo_path = 'path/to/your/video'\ndreambooth_model_path = 'path/to/your/dreambooth/model'\nout_path = f'./text2video_edge_db_{prompt}.gif'\nmodel.process_controlnet_canny_db(dreambooth_model_path, video_path, prompt=prompt, save_path=out_path)\n```\n\nThe value `video_path` can be the path to a `mp4` file. To use one of the example videos provided, set `video_path=\"woman1\"`, `video_path=\"woman2\"`, `video_path=\"woman3\"`, or `video_path=\"man1\"`. \n \n\nThe value `dreambooth_model_path` can either be a link to a diffuser model file, or the name of one of the dreambooth models provided. To this end, set `dreambooth_model_path = \"Anime DB\"`, `dreambooth_model_path = \"Avatar DB\"`, `dreambooth_model_path = \"GTA-5 DB\"`, or `dreambooth_model_path = \"Arcane DB\"`.  The corresponding keywords are: `1girl` (for `Anime DB`), `arcane style` (for `Arcane DB`) `avatar style` (for `Avatar DB`) and `gtav style`  (for `GTA-5 DB`).\n\n\n#### Custom Dreambooth Models\n\n\nTo load custom Dreambooth models, [transfer](https://github.com/lllyasviel/ControlNet/discussions/12) control to the custom model and  [convert](https://github.com/huggingface/diffusers/blob/main/scripts/convert_original_stable_diffusion_to_diffusers.py) it to diffuser format. Then, the value of `dreambooth_model_path` must link to the folder containing the diffuser file. Dreambooth models can be obtained, for instance, from [CIVITAI](https://civitai.com). \n\n\n\n---\n\n\n\n### Video Instruct-Pix2Pix\n\nTo perform pix2pix video editing, run this python command:\n``` python\nprompt = 'make it Van Gogh Starry Night'\nvideo_path = '__assets__/pix2pix video/camel.mp4'\nout_path = f'./video_instruct_pix2pix_{prompt}.mp4'\nmodel.process_pix2pix(video_path, prompt=prompt, save_path=out_path)\n```\n\n\n---\n\n\n### Text-To-Video with Depth Control\n\nTo directly call our text-to-video generator with depth control, run this python command:\n``` python\nprompt = 'oil painting of a deer, a high-quality, detailed, and professional photo'\nvideo_path = '__assets__/depth_videos/deer.mp4'\nout_path = f'./text2video_depth_control_{prompt}.mp4'\nmodel.process_controlnet_depth(video_path, prompt=prompt, save_path=out_path)\n```\n\n\n\n---\n\n\n\n\n### Low Memory Inference\nEach of the above introduced interface can be run in a low memory setup. In the minimal setup, a GPU with **12 GB VRAM** is sufficient. \n\nTo reduce the memory usage, add `chunk_size=k` as additional parameter when calling one of the above defined inference APIs. The integer value `k` must be in the range `{2,...,video_length}`. It defines the number of frames that are processed at once (without any loss in quality). The lower the value the less memory is needed.\n\nWhen using the gradio app, set `chunk_size` in the `Advanced options`. \n\nThanks to the great work of [Token Merging](https://arxiv.org/abs/2303.17604), the memory usage can be further reduced. It can be configured using the  `merging_ratio` parameter with values in `[0,1]`. The higher the value, the more compression is applied (leading to faster inference and less memory requirements). Be aware that too high values will decrease the image quality. \n\n \nWe plan to continue optimizing our code to enable even lower memory consumption.\n\n---\n\n\n### Ablation Study\nTo replicate the ablation study, add additional parameters when calling the above defined inference APIs.\n*  To deactivate `cross-frame attention`: Add `use_cf_attn=False` to the parameter list.\n* To deactivate enriching latent codes with `motion dynamics`: Add `use_motion_field=False` to the parameter list.\n\n\nNote: Adding `smooth_bg=True` activates background smoothing. However, our  code does not include the salient object detector necessary to run that code.\n\n\n\n\n---\n\n\n\n## Inference using Gradio\n\n\n<details closed>\n<summary>Click to see details.</summary>\n\nFrom the project root folder, run this shell command:\n``` shell\npython app.py\n```\n\nThen access the app [locally](http://127.0.0.1:7860) with a browser.\n\nTo access the app remotely, run this shell command:\n``` shell\npython app.py --public_access\n```\nFor security information about public access we refer to the documentation of [gradio](https://gradio.app/sharing-your-app/#security-and-file-access).\n\n</details>\n\n\n\n---  \n\n\n\n## Results\n\n### Text-To-Video\n<table class=\"center\">\n<tr>\n  <td><img src=\"__assets__/github/results/t2v/cat_running.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/t2v/playing.gif\"></td>\n  <td><img src=\"__assets__/github/results/t2v/running.gif\"></td>              \n  <td><img src=\"__assets__/github/results/t2v/skii.gif\"></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"A cat is running on the grass\"</td>\n  <td width=25% align=\"center\">\"A panda is playing guitar on times square\"</td>\n  <td width=25% align=\"center\">\"A man is running in the snow\"</td>\n  <td width=25% align=\"center\">\"An astronaut is skiing down the hill\"</td>\n</tr>\n\n<tr>\n  <td><img src=\"__assets__/github/results/t2v/panda_surfing.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/t2v/bear_dancing.gif\"></td>\n  <td><img src=\"__assets__/github/results/t2v/bicycle.gif\"></td>              \n  <td><img src=\"__assets__/github/results/t2v/horse_galloping.gif\"></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"A panda surfing on a wakeboard\"</td>\n  <td width=25% align=\"center\">\"A bear dancing on times square\"</td>\n  <td width=25% align=\"center\">\"A man is riding a bicycle in the sunshine\"</td>\n  <td width=25% align=\"center\">\"A horse galloping on a street\"</td>\n</tr>\n\n<tr>\n  <td><img src=\"__assets__/github/results/t2v/tiger_walking.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/t2v/panda_surfing_2.gif\"></td>\n  <td><img src=\"__assets__/github/results/t2v/horse_galloping_2.gif\"></td>              \n  <td><img src=\"__assets__/github/results/t2v/cat_walking.gif\"></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"A tiger walking alone down the street\"</td>\n  <td width=25% align=\"center\">\"A panda surfing on a wakeboard\"</td>\n  <td width=25% align=\"center\">\"A horse galloping on a street\"</td>\n  <td width=25% align=\"center\">\"A cute cat running in a beautiful meadow\"</td>\n</tr>\n\n\n<tr>\n  <td><img src=\"__assets__/github/results/t2v/horse_galloping_3.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/t2v/panda_walking.gif\"></td>\n  <td><img src=\"__assets__/github/results/t2v/dog_walking.gif\"></td>              \n  <td><img src=\"__assets__/github/results/t2v/astronaut.gif\"></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"A horse galloping on a street\"</td>\n  <td width=25% align=\"center\">\"A panda walking alone down the street\"</td>\n  <td width=25% align=\"center\">\"A dog is walking down the street\"</td>\n  <td width=25% align=\"center\">\"An astronaut is waving his hands on the moon\"</td>\n</tr>\n\n\n</table>\n\n### Text-To-Video with Pose Guidance\n\n\n<table class=\"center\">\n<tr>\n  <td><img src=\"__assets__/github/results/pose2v/img_bot_left_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/pose2v/img_bot_right_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/pose2v/img_top_left_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/pose2v/img_top_right_merged_with_input.gif\" raw=true></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"A bear dancing on the concrete\"</td>\n  <td width=25% align=\"center\">\"An alien dancing under a flying saucer\"</td>\n  <td width=25% align=\"center\">\"A panda dancing in Antarctica\"</td>\n  <td width=25% align=\"center\">\"An astronaut dancing in the outer space\"</td>\n\n</tr>\n</table>\n\n### Text-To-Video with Edge Guidance\n\n\n\n<table class=\"center\">\n<tr>\n  <td><img src=\"__assets__/github/results/edge2v/butterfly_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/edge2v/head_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/edge2v/jelly_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/edge2v/mask_merged_with_input.gif\" raw=true></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"White butterfly\"</td>\n  <td width=25% align=\"center\">\"Beautiful girl\"</td>\n    <td width=25% align=\"center\">\"A jellyfish\"</td>\n  <td width=25% align=\"center\">\"beautiful girl halloween style\"</td>\n</tr>\n\n<tr>\n  <td><img src=\"__assets__/github/results/edge2v/fox_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/edge2v/head_2_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/edge2v/santa_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/edge2v/dear_merged_with_input.gif\" raw=true></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"Wild fox is walking\"</td>\n  <td width=25% align=\"center\">\"Oil painting of a beautiful girl close-up\"</td>\n    <td width=25% align=\"center\">\"A santa claus\"</td>\n  <td width=25% align=\"center\">\"A deer\"</td>\n</tr>\n\n</table>\n\n\n### Text-To-Video with Edge Guidance and Dreambooth specialization\n\n\n\n\n<table class=\"center\">\n<tr>\n  <td><img src=\"__assets__/github/results/canny_db/anime_style_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/canny_db/arcane_style_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/canny_db/gta-5_man_style_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/canny_db/img_bot_right_merged_with_input.gif\" raw=true></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"anime style\"</td>\n  <td width=25% align=\"center\">\"arcane style\"</td>\n    <td width=25% align=\"center\">\"gta-5 man\"</td>\n  <td width=25% align=\"center\">\"avatar style\"</td>\n</tr>\n\n</table>\n\n\n## Video Instruct Pix2Pix\n\n<table class=\"center\">\n<tr>\n  <td><img src=\"__assets__/github/results/Video_InstructPix2Pix/frame_1/up_left_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/Video_InstructPix2Pix/frame_1/up_mid_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/Video_InstructPix2Pix/frame_1/up_right_merged_with_input.gif\" raw=true></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"Replace man with chimpanze\"</td>\n  <td width=25% align=\"center\">\"Make it Van Gogh Starry Night style\"</td>\n    <td width=25% align=\"center\">\"Make it Picasso style\"</td>\n</tr>\n\n<tr>\n  <td><img src=\"__assets__/github/results/Video_InstructPix2Pix/frame_2/up_left_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/Video_InstructPix2Pix/frame_2/up_mid_merged_with_input.gif\" raw=true></td>\n  <td><img src=\"__assets__/github/results/Video_InstructPix2Pix/frame_2/up_right_merged_with_input.gif\" raw=true></td>\n</tr>\n<tr>\n  <td width=25% align=\"center\">\"Make it Expressionism style\"</td>\n  <td width=25% align=\"center\">\"Make it night\"</td>\n    <td width=25% align=\"center\">\"Make it autumn\"</td>\n</tr>\n</table>\n\n\n## Related Links \n\n* [High-Resolution Image Synthesis with Latent Diffusion Models (a.k.a. LDM & Stable Diffusion)](https://ommer-lab.com/research/latent-diffusion-models/)\n* [InstructPix2Pix: Learning to Follow Image Editing Instructions](https://www.timothybrooks.com/instruct-pix2pix/)\n* [Adding Conditional Control to Text-to-Image Diffusion Models (a.k.a ControlNet)](https://github.com/lllyasviel/ControlNet)\n* [Diffusers](https://github.com/huggingface/diffusers)\n* [Token Merging for Stable Diffusion](https://github.com/dbolya/tomesd)\n\n## License\nOur code is published under the CreativeML Open RAIL-M license. The license provided in this repository applies to all additions and contributions we make upon the original stable diffusion code. The original stable diffusion code is under the CreativeML Open RAIL-M license, which can found [here](https://github.com/CompVis/stable-diffusion/blob/main/LICENSE).\n\n\n## BibTeX\nIf you use our work in your research, please cite our publication:\n```\n@article{text2video-zero,\n    title={Text2Video-Zero: Text-to-Image Diffusion Models are Zero-Shot Video Generators},\n    author={Khachatryan, Levon and Movsisyan, Andranik and Tadevosyan, Vahram and Henschel, Roberto and Wang, Zhangyang and Navasardyan, Shant and Shi, Humphrey},\n    journal={arXiv preprint arXiv:2303.13439},\n    year={2023}\n}\n```\n\n\n\n## Alternative ways to use Text2Video-Zero\n\nText2Video-Zero can alternatively used via \n\n* 🧨 [Diffusers](https://github.com/huggingface/diffusers) Library.\n\n<details closed>\n<summary>Click to see details.</summary>\n\n\n\n### Text2Video-Zero in 🧨 Diffusers Library\n\nText2Video-Zero is [available](https://huggingface.co/docs/diffusers/api/pipelines/text_to_video_zero) in 🧨 Diffusers, starting from version `0.15.0`! \n\n\n\n[Diffusers](https://github.com/huggingface/diffusers) can be installed using the following command:\n\n\n``` shell\nvirtualenv --system-site-packages -p python3.9 venv\nsource venv/bin/activate\npip install diffusers torch imageio\n```\n\n\nTo generate a video from a text prompt, run the following command:\n\n``` python\nimport torch\nimport imageio\nfrom diffusers import TextToVideoZeroPipeline\n\n# load stable diffusion model weights\nmodel_id = \"runwayml/stable-diffusion-v1-5\"\n\n# create a TextToVideoZero pipeline\npipe = TextToVideoZeroPipeline.from_pretrained(model_id, torch_dtype=torch.float16).to(\"cuda\")\n\n# define the text prompt\nprompt = \"A panda is playing guitar on times square\"\n\n# generate the video using our pipeline\nresult = pipe(prompt=prompt).images\nresult = [(r * 255).astype(\"uint8\") for r in result]\n\n# save the resulting image\nimageio.mimsave(\"video.mp4\", result, fps=4)\n```\n\n\nFor more information, including how to run `text and pose conditional video generation`, `text and edge conditional video generation` and `text and edge and dreambooth conditional video generation`, please check the [documentation](https://huggingface.co/docs/diffusers/api/pipelines/text_to_video_zero).  \n\n\n\n</details>\n\n"
        },
        {
          "name": "__assets__",
          "type": "tree",
          "content": null
        },
        {
          "name": "annotator",
          "type": "tree",
          "content": null
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 5.28515625,
          "content": "import gradio as gr\nimport torch\n\nfrom model import Model, ModelType\nfrom app_canny import create_demo as create_demo_canny\nfrom app_pose import create_demo as create_demo_pose\nfrom app_text_to_video import create_demo as create_demo_text_to_video\nfrom app_pix2pix_video import create_demo as create_demo_pix2pix_video\nfrom app_canny_db import create_demo as create_demo_canny_db\nfrom app_depth import create_demo as create_demo_depth\nimport argparse\nimport os\n\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\nmodel = Model(device='cuda', dtype=torch.float16)\nparser = argparse.ArgumentParser()\nparser.add_argument('--public_access', action='store_true',\n                    help=\"if enabled, the app can be access from a public url\", default=False)\nargs = parser.parse_args()\n\n\nwith gr.Blocks(css='style.css') as demo:\n\n    gr.HTML(\n        \"\"\"\n        <div style=\"text-align: center; max-width: 1200px; margin: 20px auto;\">\n        <h1 style=\"font-weight: 900; font-size: 3rem; margin: 0rem\">\n            <a href=\"https://github.com/Picsart-AI-Research/Text2Video-Zero\" style=\"color:blue;\">Text2Video-Zero</a> \n        </h1>\n        <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n        Levon Khachatryan<sup>1*</sup>, Andranik Movsisyan<sup>1*</sup>, Vahram Tadevosyan<sup>1*</sup>, Roberto Henschel<sup>1*</sup>, Zhangyang Wang<sup>1,2</sup>, Shant Navasardyan<sup>1</sup>\n        and <a href=\"https://www.humphreyshi.com/home\">Humphrey Shi</a><sup>1,3,4</sup>\n        </h2>\n        <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n        <sup>1</sup>Picsart AI Resarch (PAIR), <sup>2</sup>UT Austin, <sup>3</sup>U of Oregon, <sup>4</sup>UIUC\n        </h2>\n        <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n        [<a href=\"https://arxiv.org/abs/2303.13439\" style=\"color:blue;\">arXiv</a>] \n        [<a href=\"https://github.com/Picsart-AI-Research/Text2Video-Zero\" style=\"color:blue;\">GitHub</a>]\n        </h2>\n        <h2 style=\"font-weight: 450; font-size: 1rem; margin-top: 0.5rem; margin-bottom: 0.5rem\">\n        We built <b>Text2Video-Zero</b>,  a first zero-shot text-to-video synthesis diffusion framework, that enables low cost yet high-quality and consistent video generation with only pre-trained text-to-image diffusion models without any training on videos or optimization!\n        Text2Video-Zero also naturally supports cool extension works of pre-trained text-to-image models such as Instruct Pix2Pix, ControlNet and DreamBooth, and based on which we present Video Instruct Pix2Pix, Pose Conditional, Edge Conditional and, Edge Conditional and DreamBooth Specialized applications.\n        We hope our Text2Video-Zero will further democratize AI and empower the creativity of everyone by unleashing the zero-shot video generation and editing capacity of the amazing text-to-image models and encourage future research!\n        </h2>\n        </div>\n        \"\"\")\n\n    if on_huggingspace:\n        gr.HTML(\"\"\"\n        <p>For faster inference without waiting in queue, you may duplicate the space and upgrade to GPU in settings.\n        <br/>\n        <a href=\"https://huggingface.co/spaces/PAIR/Text2Video-Zero?duplicate=true\">\n        <img style=\"margin-top: 0em; margin-bottom: 0em\" src=\"https://bit.ly/3gLdBN6\" alt=\"Duplicate Space\"></a>\n        </p>\"\"\")\n\n    with gr.Tab('Zero-Shot Text2Video'):\n        create_demo_text_to_video(model)\n    with gr.Tab('Video Instruct Pix2Pix'):\n        create_demo_pix2pix_video(model)\n    with gr.Tab('Pose Conditional'):\n        create_demo_pose(model)\n    with gr.Tab('Edge Conditional'):\n        create_demo_canny(model)\n    with gr.Tab('Edge Conditional and Dreambooth Specialized'):\n        create_demo_canny_db(model)\n    with gr.Tab('Depth Conditional'):\n        create_demo_depth(model)\n    '''\n    '''\n    gr.HTML(\n        \"\"\"\n        <div style=\"text-align: justify; max-width: 1200px; margin: 20px auto;\">\n        <h3 style=\"font-weight: 450; font-size: 0.8rem; margin: 0rem\">\n        <b>Version: v1.0</b>\n        </h3>\n        <h3 style=\"font-weight: 450; font-size: 0.8rem; margin: 0rem\">\n        <b>Caution</b>: \n        We would like the raise the awareness of users of this demo of its potential issues and concerns.\n        Like previous large foundation models, Text2Video-Zero could be problematic in some cases, partially we use pretrained Stable Diffusion, therefore Text2Video-Zero can Inherit Its Imperfections.\n        So far, we keep all features available for research testing both to show the great potential of the Text2Video-Zero framework and to collect important feedback to improve the model in the future.\n        We welcome researchers and users to report issues with the HuggingFace community discussion feature or email the authors.\n        </h3>\n        <h3 style=\"font-weight: 450; font-size: 0.8rem; margin: 0rem\">\n        <b>Biases and content acknowledgement</b>:\n        Beware that Text2Video-Zero may output content that reinforces or exacerbates societal biases, as well as realistic faces, pornography, and violence. \n        Text2Video-Zero in this demo is meant only for research purposes.\n        </h3>\n        </div>\n        \"\"\")\n\n\nif on_huggingspace:\n    demo.queue(max_size=20)\n    demo.launch(debug=True)\nelse:\n    _, _, link = demo.queue(api_open=False).launch(\n        file_directories=['temporal'], share=args.public_access)\n    print(link)\n"
        },
        {
          "name": "app_canny.py",
          "type": "blob",
          "size": 3.5810546875,
          "content": "import gradio as gr\nfrom model import Model\nimport os\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\n\ndef create_demo(model: Model):\n\n    examples = [\n        [\"__assets__/canny_videos_edge/butterfly.mp4\",\n            \"white butterfly, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/canny_videos_edge/deer.mp4\",\n            \"oil painting of a deer, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/canny_videos_edge/fox.mp4\",\n            \"wild red fox is walking on the grass, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/canny_videos_edge/girl_dancing.mp4\",\n            \"oil painting of a girl dancing close-up, masterpiece, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/canny_videos_edge/girl_turning.mp4\",\n            \"oil painting of a beautiful girl, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/canny_videos_edge/halloween.mp4\",\n            \"beautiful girl halloween style, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/canny_videos_edge/santa.mp4\",\n            \"a santa claus, a high-quality, detailed, and professional photo\"],\n    ]\n\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Text and Canny-Edge Conditional Video Generation')\n        with gr.Row():\n            gr.HTML(\n                \"\"\"\n                <div style=\"text-align: left; auto;\">\n                <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n                    Description: For performance purposes, our current preview release supports any input videos but caps output videos after 80 frames and the input videos are scaled down before processing.\n                </h3>\n                </div>\n                \"\"\")\n\n        with gr.Row():\n            with gr.Column():\n                input_video = gr.Video(\n                    label=\"Input Video\", source='upload', format=\"mp4\", visible=True).style(height=\"auto\")\n            with gr.Column():\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    watermark = gr.Radio([\"Picsart AI Research\", \"Text2Video-Zero\",\n                                         \"None\"], label=\"Watermark\", value='Picsart AI Research')\n                    chunk_size = gr.Slider(\n                        label=\"Chunk size\", minimum=2, maximum=16, value=8, step=1, visible=not on_huggingspace,\n                        info=\"Number of frames processed at once. Reduce for lower memory usage.\")\n                    merging_ratio = gr.Slider(\n                        label=\"Merging ratio\", minimum=0.0, maximum=0.9, step=0.1, value=0.0, visible=not on_huggingspace,\n                        info=\"Ratio of how many tokens are merged. The higher the more compression (less memory and faster inference).\")\n            with gr.Column():\n                result = gr.Video(label=\"Generated Video\").style(height=\"auto\")\n\n        inputs = [\n            input_video,\n            prompt,\n            chunk_size,\n            watermark,\n            merging_ratio,\n        ]\n\n        gr.Examples(examples=examples,\n                    inputs=inputs,\n                    outputs=result,\n                    fn=model.process_controlnet_canny,\n                    cache_examples=on_huggingspace,\n                    run_on_click=False,\n                    )\n\n        run_button.click(fn=model.process_controlnet_canny,\n                         inputs=inputs,\n                         outputs=result,)\n    return demo\n"
        },
        {
          "name": "app_canny_db.py",
          "type": "blob",
          "size": 4.8525390625,
          "content": "import gradio as gr\nfrom model import Model\nimport gradio_utils\nimport os\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\n\nexamples = [\n    ['Anime DB', \"woman1\", \"Portrait of detailed 1girl, feminine, soldier cinematic shot on canon 5d ultra realistic skin intricate clothes accurate hands Rory Lewis Artgerm WLOP Jeremy Lipking Jane Ansell studio lighting\"],\n    ['Arcane DB', \"woman1\", \"Oil painting of a beautiful girl arcane style, masterpiece, a high-quality, detailed, and professional photo\"],\n    ['GTA-5 DB', \"man1\", \"gtav style\"],\n    ['GTA-5 DB', \"woman3\", \"gtav style\"],\n    ['Avatar DB', \"woman2\", \"oil painting of a beautiful girl avatar style\"],\n]\n\n\ndef load_db_model(evt: gr.SelectData):\n    db_name = gradio_utils.get_db_name_from_id(evt.index)\n    return db_name\n\n\ndef canny_select(evt: gr.SelectData):\n    canny_name = gradio_utils.get_canny_name_from_id(evt.index)\n    return canny_name\n\n\ndef create_demo(model: Model):\n\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown(\n                '## Text, Canny-Edge and DreamBooth Conditional Video Generation')\n        with gr.Row():\n            gr.HTML(\n                \"\"\"\n                <div style=\"text-align: left; auto;\">\n                <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n                    Description: Our current release supports only four predefined DreamBooth models and four \"motion edges\". So you must choose one DreamBooth model and one \"motion edges\" shown below, or use the examples. The keywords <b>1girl</b>, <b>arcane style</b>, <b>gtav</b>, and <b>avatar style</b> correspond to the models from left to right.\n                </h3>\n                </div>\n                \"\"\")\n        with gr.Row():\n            with gr.Column():\n                # input_video_path = gr.Video(source='upload', format=\"mp4\", visible=False)\n                gr.Markdown(\"## Selection\")\n                db_text_field = gr.Markdown('DB Model: **Anime DB** ')\n                canny_text_field = gr.Markdown('Motion: **woman1**')\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    watermark = gr.Radio([\"Picsart AI Research\", \"Text2Video-Zero\",\n                                         \"None\"], label=\"Watermark\", value='Picsart AI Research')\n                    chunk_size = gr.Slider(\n                        label=\"Chunk size\", minimum=2, maximum=16, value=8, step=1, visible=not on_huggingspace,\n                        info=\"Number of frames processed at once. Reduce for lower memory usage.\")\n                    merging_ratio = gr.Slider(\n                        label=\"Merging ratio\", minimum=0.0, maximum=0.9, step=0.1, value=0.0, visible=not on_huggingspace,\n                        info=\"Ratio of how many tokens are merged. The higher the more compression (less memory and faster inference).\")\n            with gr.Column():\n                result = gr.Image(label=\"Generated Video\").style(height=400)\n\n        with gr.Row():\n            gallery_db = gr.Gallery(label=\"Db models\", value=[('__assets__/db_files/anime.jpg', \"anime\"), ('__assets__/db_files/arcane.jpg', \"Arcane\"), (\n                '__assets__/db_files/gta.jpg', \"GTA-5 (Man)\"), ('__assets__/db_files/avatar.jpg', \"Avatar DB\")]).style(grid=[4], height=50)\n        with gr.Row():\n            gallery_canny = gr.Gallery(label=\"Motions\", value=[('__assets__/db_files/woman1.gif', \"woman1\"), ('__assets__/db_files/woman2.gif', \"woman2\"), (\n                '__assets__/db_files/man1.gif', \"man1\"), ('__assets__/db_files/woman3.gif', \"woman3\")]).style(grid=[4], height=50)\n\n        db_selection = gr.Textbox(label=\"DB Model\", visible=False)\n        canny_selection = gr.Textbox(\n            label=\"One of the above defined motions\", visible=False)\n\n        gallery_db.select(load_db_model, None, db_selection)\n        gallery_canny.select(canny_select, None, canny_selection)\n\n        db_selection.change(on_db_selection_update, None, db_text_field)\n        canny_selection.change(on_canny_selection_update,\n                               None, canny_text_field)\n\n        inputs = [\n            db_selection,\n            canny_selection,\n            prompt,\n            chunk_size,\n            watermark,\n            merging_ratio,\n        ]\n\n        gr.Examples(examples=examples,\n                    inputs=inputs,\n                    outputs=result,\n                    fn=model.process_controlnet_canny_db,\n                    cache_examples=on_huggingspace,\n                    )\n\n        run_button.click(fn=model.process_controlnet_canny_db,\n                         inputs=inputs,\n                         outputs=result,)\n    return demo\n\n\ndef on_db_selection_update(evt: gr.EventData):\n\n    return f\"DB model: **{evt._data}**\"\n\n\ndef on_canny_selection_update(evt: gr.EventData):\n    return f\"Motion: **{evt._data}**\"\n"
        },
        {
          "name": "app_depth.py",
          "type": "blob",
          "size": 3.5419921875,
          "content": "import gradio as gr\nfrom model import Model\nimport os\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\n\ndef create_demo(model: Model):\n\n    examples = [\n        [\"__assets__/depth_videos/butterfly.mp4\",\n            \"white butterfly, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/depth_videos/deer.mp4\",\n            \"oil painting of a deer, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/depth_videos/fox.mp4\",\n            \"wild red fox is walking on the grass, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/depth_videos/girl_dancing.mp4\",\n            \"oil painting of a girl dancing close-up, masterpiece, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/depth_videos/girl_turning.mp4\",\n            \"oil painting of a beautiful girl, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/depth_videos/halloween.mp4\",\n            \"beautiful girl halloween style, a high-quality, detailed, and professional photo\"],\n        [\"__assets__/depth_videos/santa.mp4\",\n            \"a santa claus, a high-quality, detailed, and professional photo\"],\n    ]\n\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Text and Depth Conditional Video Generation')\n        with gr.Row():\n            gr.HTML(\n                \"\"\"\n                <div style=\"text-align: left; auto;\">\n                <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n                    Description: For performance purposes, our current preview release supports any input videos but caps output videos after 80 frames and the input videos are scaled down before processing.\n                </h3>\n                </div>\n                \"\"\")\n\n        with gr.Row():\n            with gr.Column():\n                input_video = gr.Video(\n                    label=\"Input Video\", source='upload', format=\"mp4\", visible=True).style(height=\"auto\")\n            with gr.Column():\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    watermark = gr.Radio([\"Picsart AI Research\", \"Text2Video-Zero\",\n                                         \"None\"], label=\"Watermark\", value='Picsart AI Research')\n                    chunk_size = gr.Slider(\n                        label=\"Chunk size\", minimum=2, maximum=16, value=8, step=1, visible=not on_huggingspace,\n                        info=\"Number of frames processed at once. Reduce for lower memory usage.\")\n                    merging_ratio = gr.Slider(\n                        label=\"Merging ratio\", minimum=0.0, maximum=0.9, step=0.1, value=0.0, visible=not on_huggingspace,\n                        info=\"Ratio of how many tokens are merged. The higher the more compression (less memory and faster inference).\")\n            with gr.Column():\n                result = gr.Video(label=\"Generated Video\").style(height=\"auto\")\n\n        inputs = [\n            input_video,\n            prompt,\n            chunk_size,\n            watermark,\n            merging_ratio,\n        ]\n\n        gr.Examples(examples=examples,\n                    inputs=inputs,\n                    outputs=result,\n                    fn=model.process_controlnet_depth,\n                    cache_examples=on_huggingspace,\n                    run_on_click=False,\n                    )\n\n        run_button.click(fn=model.process_controlnet_depth,\n                         inputs=inputs,\n                         outputs=result,)\n    return demo\n"
        },
        {
          "name": "app_pix2pix_video.py",
          "type": "blob",
          "size": 5.23046875,
          "content": "import gradio as gr\nfrom model import Model\nimport os\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\n\ndef create_demo(model: Model):\n    examples = [\n        ['__assets__/pix2pix_video_2fps/camel.mp4',\n            'make it Van Gogh Starry Night style', 512, 0, 1.0],\n        ['__assets__/pix2pix_video_2fps/mini-cooper.mp4',\n            'make it Picasso style', 512, 0, 1.5],\n        ['__assets__/pix2pix_video_2fps/snowboard.mp4',\n            'replace man with robot', 512, 0, 1.0],\n        ['__assets__/pix2pix_video_2fps/white-swan.mp4',\n            'replace swan with mallard', 512, 0, 1.5],\n        ['__assets__/pix2pix_video_2fps/boat.mp4',\n            'add city skyline in the background', 512, 0, 1.5],\n        ['__assets__/pix2pix_video_2fps/ballet.mp4',\n            'make her a golden sculpture', 512, 0, 1.0],\n    ]\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Video Instruct Pix2Pix')\n        with gr.Row():\n            gr.HTML(\n                \"\"\"\n                <div style=\"text-align: left; auto;\">\n                <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n                    Description: For performance purposes, our current preview release supports any input videos but caps output videos after 80 frames and the input videos are scaled down before processing. For faster inference you can choose lower output frames per seconds from Advanced Options.\n                </h3>\n                </div>\n                \"\"\")\n\n        with gr.Row():\n            with gr.Column():\n                input_image = gr.Video(label=\"Input Video\", source='upload',\n                                       type='numpy', format=\"mp4\", visible=True).style(height=\"auto\")\n            with gr.Column():\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    watermark = gr.Radio([\"Picsart AI Research\", \"Text2Video-Zero\",\n                                         \"None\"], label=\"Watermark\", value='Picsart AI Research')\n                    image_resolution = gr.Slider(label='Image Resolution',\n                                                 minimum=256,\n                                                 maximum=1024,\n                                                 value=512,\n                                                 step=64)\n                    seed = gr.Slider(label='Seed',\n                                     minimum=-1,\n                                     maximum=65536,\n                                     value=0,\n                                     info=\"-1 for random seed on each run. Otherwise the seed will be fixed\",\n                                     step=1)\n                    image_guidance = gr.Slider(label='Image guidance scale',\n                                               minimum=0.5,\n                                               maximum=2,\n                                               value=1.0,\n                                               step=0.1)\n                    start_t = gr.Slider(label='Starting time in seconds',\n                                        minimum=0,\n                                        maximum=10,\n                                        value=0,\n                                        step=1)\n                    end_t = gr.Slider(label='End time in seconds (-1 corresponds to uploaded video duration)',\n                                      minimum=0,\n                                      maximum=10,\n                                      value=-1,\n                                      step=1)\n                    out_fps = gr.Slider(label='Output video fps (-1 corresponds to uploaded video fps)',\n                                        minimum=1,\n                                        maximum=30,\n                                        value=-1,\n                                        step=1)\n                    chunk_size = gr.Slider(\n                        label=\"Chunk size\", minimum=2, maximum=16, value=8, step=1, visible=not on_huggingspace,\n                        info=\"Number of frames processed at once. Reduce for lower memory usage.\")\n                    merging_ratio = gr.Slider(\n                        label=\"Merging ratio\", minimum=0.0, maximum=0.9, step=0.1, value=0.0, visible=not on_huggingspace,\n                        info=\"Ratio of how many tokens are merged. The higher the more compression (less memory and faster inference).\")\n            with gr.Column():\n                result = gr.Video(label='Output', show_label=True)\n        inputs = [\n            input_image,\n            prompt,\n            image_resolution,\n            seed,\n            image_guidance,\n            start_t,\n            end_t,\n            out_fps,\n            chunk_size,\n            watermark,\n            merging_ratio\n        ]\n\n        gr.Examples(examples=examples,\n                    inputs=inputs,\n                    outputs=result,\n                    fn=model.process_pix2pix,\n                    cache_examples=on_huggingspace,\n                    run_on_click=False,\n                    )\n\n        run_button.click(fn=model.process_pix2pix,\n                         inputs=inputs,\n                         outputs=result)\n    return demo\n"
        },
        {
          "name": "app_pose.py",
          "type": "blob",
          "size": 3.3984375,
          "content": "from model import Model\nimport gradio as gr\nimport os\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\nexamples = [\n    ['Motion 1', \"An astronaut dancing in the outer space\"],\n    ['Motion 2', \"An astronaut dancing in the outer space\"],\n    ['Motion 3', \"An astronaut dancing in the outer space\"],\n    ['Motion 4', \"An astronaut dancing in the outer space\"],\n    ['Motion 5', \"An astronaut dancing in the outer space\"],\n]\n\n\ndef create_demo(model: Model):\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Text and Pose Conditional Video Generation')\n\n        with gr.Row():\n            gr.Markdown(\n                'Selection: **one motion** and a **prompt**, or use the examples below.')\n            with gr.Column():\n                gallery_pose_sequence = gr.Gallery(label=\"Pose Sequence\", value=[('__assets__/poses_skeleton_gifs/dance1.gif', \"Motion 1\"), ('__assets__/poses_skeleton_gifs/dance2.gif', \"Motion 2\"), (\n                    '__assets__/poses_skeleton_gifs/dance3.gif', \"Motion 3\"), ('__assets__/poses_skeleton_gifs/dance4.gif', \"Motion 4\"), ('__assets__/poses_skeleton_gifs/dance5.gif', \"Motion 5\")]).style(grid=[2], height=\"auto\")\n                input_video_path = gr.Textbox(\n                    label=\"Pose Sequence\", visible=False, value=\"Motion 1\")\n                gr.Markdown(\"## Selection\")\n                pose_sequence_selector = gr.Markdown(\n                    'Pose Sequence: **Motion 1**')\n            with gr.Column():\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    watermark = gr.Radio([\"Picsart AI Research\", \"Text2Video-Zero\",\n                                         \"None\"], label=\"Watermark\", value='Picsart AI Research')\n                    chunk_size = gr.Slider(\n                        label=\"Chunk size\", minimum=2, maximum=16, value=8, step=1, visible=not on_huggingspace,\n                        info=\"Number of frames processed at once. Reduce for lower memory usage.\")\n                    merging_ratio = gr.Slider(\n                        label=\"Merging ratio\", minimum=0.0, maximum=0.9, step=0.1, value=0.0, visible=not on_huggingspace,\n                        info=\"Ratio of how many tokens are merged. The higher the more compression (less memory and faster inference).\")\n            with gr.Column():\n                result = gr.Image(label=\"Generated Video\")\n\n        input_video_path.change(on_video_path_update,\n                                None, pose_sequence_selector)\n        gallery_pose_sequence.select(\n            pose_gallery_callback, None, input_video_path)\n        inputs = [\n            input_video_path,\n            prompt,\n            chunk_size,\n            watermark,\n            merging_ratio,\n        ]\n\n        gr.Examples(examples=examples,\n                    inputs=inputs,\n                    outputs=result,\n                    fn=model.process_controlnet_pose,\n                    cache_examples=on_huggingspace,\n                    run_on_click=False,\n                    )\n\n        run_button.click(fn=model.process_controlnet_pose,\n                         inputs=inputs,\n                         outputs=result,)\n\n    return demo\n\n\ndef on_video_path_update(evt: gr.EventData):\n    return f'Selection: **{evt._data}**'\n\n\ndef pose_gallery_callback(evt: gr.SelectData):\n    return f\"Motion {evt.index+1}\"\n"
        },
        {
          "name": "app_text_to_video.py",
          "type": "blob",
          "size": 5.1123046875,
          "content": "import gradio as gr\nfrom model import Model\nimport os\nfrom hf_utils import get_model_list\n\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\nexamples = [\n    [\"an astronaut waving the arm on the moon\"],\n    [\"a sloth surfing on a wakeboard\"],\n    [\"an astronaut walking on a street\"],\n    [\"a cute cat walking on grass\"],\n    [\"a horse is galloping on a street\"],\n    [\"an astronaut is skiing down the hill\"],\n    [\"a gorilla walking alone down the street\"],\n    [\"a gorilla dancing on times square\"],\n    [\"A panda dancing dancing like crazy on Times Square\"],\n]\n\n\ndef create_demo(model: Model):\n\n    with gr.Blocks() as demo:\n        with gr.Row():\n            gr.Markdown('## Text2Video-Zero: Video Generation')\n        with gr.Row():\n            gr.HTML(\n                \"\"\"\n                <div style=\"text-align: left; auto;\">\n                <h2 style=\"font-weight: 450; font-size: 1rem; margin: 0rem\">\n                    Description: Simply input <b>any textual prompt</b> to generate videos right away and unleash your creativity and imagination! You can also select from the examples below. For performance purposes, our current preview release allows to generate up to 16 frames, which can be configured in the Advanced Options.\n                </h3>\n                </div>\n                \"\"\")\n\n        with gr.Row():\n            with gr.Column():\n                model_name = gr.Dropdown(\n                    label=\"Model\",\n                    choices=get_model_list(),\n                    value=\"dreamlike-art/dreamlike-photoreal-2.0\",\n\n                )\n                prompt = gr.Textbox(label='Prompt')\n                run_button = gr.Button(label='Run')\n                with gr.Accordion('Advanced options', open=False):\n                    watermark = gr.Radio([\"Picsart AI Research\", \"Text2Video-Zero\",\n                                         \"None\"], label=\"Watermark\", value='Picsart AI Research')\n\n                    if on_huggingspace:\n                        video_length = gr.Slider(\n                            label=\"Video length\", minimum=8, maximum=16, step=1)\n                    else:\n                        video_length = gr.Number(\n                            label=\"Video length\", value=8, precision=0)\n\n                    n_prompt = gr.Textbox(\n                        label=\"Optional Negative Prompt\", value='')\n                    seed = gr.Slider(label='Seed',\n                                     info=\"-1 for random seed on each run. Otherwise, the seed will be fixed.\",\n                                     minimum=-1,\n                                     maximum=65536,\n                                     value=0,\n                                     step=1)\n\n                    motion_field_strength_x = gr.Slider(\n                        label='Global Translation $\\\\delta_{x}$', minimum=-20, maximum=20,\n                        value=12,\n                        step=1)\n                    motion_field_strength_y = gr.Slider(\n                        label='Global Translation $\\\\delta_{y}$', minimum=-20, maximum=20,\n                        value=12,\n                        step=1)\n\n                    t0 = gr.Slider(label=\"Timestep t0\", minimum=0,\n                                   maximum=47, value=44, step=1,\n                                   info=\"Perform DDPM steps from t0 to t1. The larger the gap between t0 and t1, the more variance between the frames. Ensure t0 < t1 \",\n                                   )\n                    t1 = gr.Slider(label=\"Timestep t1\", minimum=1,\n                                   info=\"Perform DDPM steps from t0 to t1. The larger the gap between t0 and t1, the more variance between the frames. Ensure t0 < t1\",\n                                   maximum=48, value=47, step=1)\n                    chunk_size = gr.Slider(\n                        label=\"Chunk size\", minimum=2, maximum=16, value=8, step=1, visible=not on_huggingspace,\n                        info=\"Number of frames processed at once. Reduce for lower memory usage.\"\n                    )\n                    merging_ratio = gr.Slider(\n                        label=\"Merging ratio\", minimum=0.0, maximum=0.9, step=0.1, value=0.0, visible=not on_huggingspace,\n                        info=\"Ratio of how many tokens are merged. The higher the more compression (less memory and faster inference).\"\n                    )\n\n            with gr.Column():\n                result = gr.Video(label=\"Generated Video\")\n\n        inputs = [\n            prompt,\n            model_name,\n            motion_field_strength_x,\n            motion_field_strength_y,\n            t0,\n            t1,\n            n_prompt,\n            chunk_size,\n            video_length,\n            watermark,\n            merging_ratio,\n            seed,\n        ]\n\n        gr.Examples(examples=examples,\n                    inputs=inputs,\n                    outputs=result,\n                    fn=model.process_text2video,\n                    run_on_click=False,\n                    cache_examples=on_huggingspace,\n                    )\n\n        run_button.click(fn=model.process_text2video,\n                         inputs=inputs,\n                         outputs=result,)\n    return demo\n"
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 0.01953125,
          "content": "save_memory = False\n"
        },
        {
          "name": "environment.yaml",
          "type": "blob",
          "size": 1.0458984375,
          "content": "name: T2VZeroNew\nchannels:\n  - pytorch\n  - defaults\ndependencies:\n  - python=3.8.5\n  - pip=22.3.1\n  - cudatoolkit=11.3\n  - pytorch=1.12.1\n  - torchvision=0.13.1\n  - pip:\n      - gradio==3.22.1\n      - albumentations==1.3.0\n      - opencv-contrib-python==4.3.0.36\n      - imageio==2.9.0\n      - imageio-ffmpeg==0.4.2\n      - pytorch-lightning==1.5.0\n      - omegaconf==2.3.0\n      - test-tube>=0.7.5\n      - streamlit==1.12.1\n      - einops==0.6.0\n      - transformers==4.26.0\n      - webdataset==0.2.5\n      - kornia==0.6\n      - open_clip_torch==2.16.0\n      - invisible-watermark>=0.1.5\n      - streamlit-drawable-canvas==0.8.0\n      - torchmetrics==0.6.0\n      - timm==0.6.12\n      - addict==2.4.0\n      - yapf==0.32.0\n      - prettytable==3.6.0\n      - safetensors==0.2.7\n      - basicsr==1.4.2\n      - accelerate==0.16.0\n      - decord==0.6.0\n      - diffusers==0.14.0\n      - moviepy==1.0.3\n      - opencv_python==4.7.0.68\n      - Pillow==9.4.0\n      - scikit_image==0.19.3\n      - scipy==1.10.1\n      - tensorboardX==2.6\n      - tqdm==4.64.1\n      - numpy==1.24.1\n"
        },
        {
          "name": "gradio_utils.py",
          "type": "blob",
          "size": 3.0673828125,
          "content": "import os\n\n# App Canny utils\n\n\ndef edge_path_to_video_path(edge_path):\n    video_path = edge_path\n\n    vid_name = edge_path.split(\"/\")[-1]\n    if vid_name == \"butterfly.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/butterfly.mp4\"\n    elif vid_name == \"deer.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/deer.mp4\"\n    elif vid_name == \"fox.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/fox.mp4\"\n    elif vid_name == \"girl_dancing.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/girl_dancing.mp4\"\n    elif vid_name == \"girl_turning.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/girl_turning.mp4\"\n    elif vid_name == \"halloween.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/halloween.mp4\"\n    elif vid_name == \"santa.mp4\":\n        video_path = \"__assets__/canny_videos_mp4/santa.mp4\"\n\n    assert os.path.isfile(video_path)\n    return video_path\n\n\n# App Pose utils\ndef motion_to_video_path(motion):\n    videos = [\n        \"__assets__/poses_skeleton_gifs/dance1_corr.mp4\",\n        \"__assets__/poses_skeleton_gifs/dance2_corr.mp4\",\n        \"__assets__/poses_skeleton_gifs/dance3_corr.mp4\",\n        \"__assets__/poses_skeleton_gifs/dance4_corr.mp4\",\n        \"__assets__/poses_skeleton_gifs/dance5_corr.mp4\"\n    ]\n    if len(motion.split(\" \")) > 1 and motion.split(\" \")[1].isnumeric():\n        id = int(motion.split(\" \")[1]) - 1\n        return videos[id]\n    else:\n        return motion\n\n\n# App Canny Dreambooth utils\ndef get_video_from_canny_selection(canny_selection):\n    if canny_selection == \"woman1\":\n        input_video_path = \"__assets__/db_files_2fps/woman1.mp4\"\n\n    elif canny_selection == \"woman2\":\n        input_video_path = \"__assets__/db_files_2fps/woman2.mp4\"\n\n    elif canny_selection == \"man1\":\n        input_video_path = \"__assets__/db_files_2fps/man1.mp4\"\n\n    elif canny_selection == \"woman3\":\n        input_video_path = \"__assets__/db_files_2fps/woman3.mp4\"\n    else:\n        input_video_path = canny_selection\n\n    assert os.path.isfile(input_video_path)\n    return input_video_path\n\n\ndef get_model_from_db_selection(db_selection):\n    if db_selection == \"Anime DB\":\n        input_video_path = 'PAIR/text2video-zero-controlnet-canny-anime'\n    elif db_selection == \"Avatar DB\":\n        input_video_path = 'PAIR/text2video-zero-controlnet-canny-avatar'\n    elif db_selection == \"GTA-5 DB\":\n        input_video_path = 'PAIR/text2video-zero-controlnet-canny-gta5'\n    elif db_selection == \"Arcane DB\":\n        input_video_path = 'PAIR/text2video-zero-controlnet-canny-arcane'\n    else:\n        input_video_path = db_selection\n\n    return input_video_path\n\n\ndef get_db_name_from_id(id):\n    db_names = [\"Anime DB\", \"Arcane DB\", \"GTA-5 DB\", \"Avatar DB\"]\n    return db_names[id]\n\n\ndef get_canny_name_from_id(id):\n    canny_names = [\"woman1\", \"woman2\", \"man1\", \"woman3\"]\n    return canny_names[id]\n\n\ndef logo_name_to_path(name):\n    logo_paths = {\n        'Picsart AI Research': '__assets__/pair_watermark.png',\n        'Text2Video-Zero': '__assets__/t2v-z_watermark.png',\n        'None': None\n    }\n    if name in logo_paths:\n        return logo_paths[name]\n    return name\n"
        },
        {
          "name": "hf_utils.py",
          "type": "blob",
          "size": 1.0810546875,
          "content": "from bs4 import BeautifulSoup\nimport requests\n\n\ndef model_url_list():\n    url_list = []\n    for i in range(0, 5):\n        url_list.append(\n            f\"https://huggingface.co/models?p={i}&sort=downloads&search=dreambooth\")\n    return url_list\n\n\ndef data_scraping(url_list):\n    model_list = []\n    for url in url_list:\n        response = requests.get(url)\n        soup = BeautifulSoup(response.text, \"html.parser\")\n        div_class = 'grid grid-cols-1 gap-5 2xl:grid-cols-2'\n        div = soup.find('div', {'class': div_class})\n        for a in div.find_all('a', href=True):\n            model_list.append(a['href'])\n    return model_list\n\n\ndef get_model_list():\n    model_list = data_scraping(model_url_list())\n    for i in range(len(model_list)):\n        model_list[i] = model_list[i][1:]\n\n    best_model_list = [\n        \"dreamlike-art/dreamlike-photoreal-2.0\",\n        \"dreamlike-art/dreamlike-diffusion-1.0\",\n        \"runwayml/stable-diffusion-v1-5\",\n        \"CompVis/stable-diffusion-v1-4\",\n        \"prompthero/openjourney\",\n    ]\n\n    model_list = best_model_list + model_list\n    return model_list\n"
        },
        {
          "name": "model.py",
          "type": "blob",
          "size": 23.5068359375,
          "content": "from enum import Enum\nimport gc\nimport numpy as np\nimport tomesd\nimport torch\n\nfrom diffusers import StableDiffusionInstructPix2PixPipeline, StableDiffusionControlNetPipeline, ControlNetModel, UNet2DConditionModel\nfrom diffusers.schedulers import EulerAncestralDiscreteScheduler, DDIMScheduler\nfrom text_to_video_pipeline import TextToVideoPipeline\n\nimport utils\nimport gradio_utils\nimport os\non_huggingspace = os.environ.get(\"SPACE_AUTHOR_NAME\") == \"PAIR\"\n\n\nclass ModelType(Enum):\n    Pix2Pix_Video = 1,\n    Text2Video = 2,\n    ControlNetCanny = 3,\n    ControlNetCannyDB = 4,\n    ControlNetPose = 5,\n    ControlNetDepth = 6,\n\n\nclass Model:\n    def __init__(self, device, dtype, **kwargs):\n        self.device = device\n        self.dtype = dtype\n        self.generator = torch.Generator(device=device)\n        self.pipe_dict = {\n            ModelType.Pix2Pix_Video: StableDiffusionInstructPix2PixPipeline,\n            ModelType.Text2Video: TextToVideoPipeline,\n            ModelType.ControlNetCanny: StableDiffusionControlNetPipeline,\n            ModelType.ControlNetCannyDB: StableDiffusionControlNetPipeline,\n            ModelType.ControlNetPose: StableDiffusionControlNetPipeline,\n            ModelType.ControlNetDepth: StableDiffusionControlNetPipeline,\n        }\n        self.controlnet_attn_proc = utils.CrossFrameAttnProcessor(\n            unet_chunk_size=2)\n        self.pix2pix_attn_proc = utils.CrossFrameAttnProcessor(\n            unet_chunk_size=3)\n        self.text2video_attn_proc = utils.CrossFrameAttnProcessor(\n            unet_chunk_size=2)\n\n        self.pipe = None\n        self.model_type = None\n\n        self.states = {}\n        self.model_name = \"\"\n\n    def set_model(self, model_type: ModelType, model_id: str, **kwargs):\n        if hasattr(self, \"pipe\") and self.pipe is not None:\n            del self.pipe\n            self.pipe = None\n        torch.cuda.empty_cache()\n        gc.collect()\n        safety_checker = kwargs.pop('safety_checker', None)\n        self.pipe = self.pipe_dict[model_type].from_pretrained(\n            model_id, safety_checker=safety_checker, **kwargs).to(self.device).to(self.dtype)\n        self.model_type = model_type\n        self.model_name = model_id\n\n    def inference_chunk(self, frame_ids, **kwargs):\n        if not hasattr(self, \"pipe\") or self.pipe is None:\n            return\n\n        prompt = np.array(kwargs.pop('prompt'))\n        negative_prompt = np.array(kwargs.pop('negative_prompt', ''))\n        latents = None\n        if 'latents' in kwargs:\n            latents = kwargs.pop('latents')[frame_ids]\n        if 'image' in kwargs:\n            kwargs['image'] = kwargs['image'][frame_ids]\n        if 'video_length' in kwargs:\n            kwargs['video_length'] = len(frame_ids)\n        if self.model_type == ModelType.Text2Video:\n            kwargs[\"frame_ids\"] = frame_ids\n        return self.pipe(prompt=prompt[frame_ids].tolist(),\n                         negative_prompt=negative_prompt[frame_ids].tolist(),\n                         latents=latents,\n                         generator=self.generator,\n                         **kwargs)\n\n    def inference(self, split_to_chunks=False, chunk_size=8, **kwargs):\n        if not hasattr(self, \"pipe\") or self.pipe is None:\n            return\n\n        if \"merging_ratio\" in kwargs:\n            merging_ratio = kwargs.pop(\"merging_ratio\")\n\n            # if merging_ratio > 0:\n            tomesd.apply_patch(self.pipe, ratio=merging_ratio)\n        seed = kwargs.pop('seed', 0)\n        if seed < 0:\n            seed = self.generator.seed()\n        kwargs.pop('generator', '')\n\n        if 'image' in kwargs:\n            f = kwargs['image'].shape[0]\n        else:\n            f = kwargs['video_length']\n\n        assert 'prompt' in kwargs\n        prompt = [kwargs.pop('prompt')] * f\n        negative_prompt = [kwargs.pop('negative_prompt', '')] * f\n\n        frames_counter = 0\n\n        # Processing chunk-by-chunk\n        if split_to_chunks:\n            chunk_ids = np.arange(0, f, chunk_size - 1)\n            result = []\n            for i in range(len(chunk_ids)):\n                ch_start = chunk_ids[i]\n                ch_end = f if i == len(chunk_ids) - 1 else chunk_ids[i + 1]\n                frame_ids = [0] + list(range(ch_start, ch_end))\n                self.generator.manual_seed(seed)\n                print(f'Processing chunk {i + 1} / {len(chunk_ids)}')\n                result.append(self.inference_chunk(frame_ids=frame_ids,\n                                                   prompt=prompt,\n                                                   negative_prompt=negative_prompt,\n                                                   **kwargs).images[1:])\n                frames_counter += len(chunk_ids)-1\n                if on_huggingspace and frames_counter >= 80:\n                    break\n            result = np.concatenate(result)\n            return result\n        else:\n            self.generator.manual_seed(seed)\n            return self.pipe(prompt=prompt, negative_prompt=negative_prompt, generator=self.generator, **kwargs).images\n\n    def process_controlnet_canny(self,\n                                 video_path,\n                                 prompt,\n                                 chunk_size=8,\n                                 watermark='Picsart AI Research',\n                                 merging_ratio=0.0,\n                                 num_inference_steps=20,\n                                 controlnet_conditioning_scale=1.0,\n                                 guidance_scale=9.0,\n                                 seed=42,\n                                 eta=0.0,\n                                 low_threshold=100,\n                                 high_threshold=200,\n                                 resolution=512,\n                                 use_cf_attn=True,\n                                 save_path=None):\n        print(\"Module Canny\")\n        video_path = gradio_utils.edge_path_to_video_path(video_path)\n        if self.model_type != ModelType.ControlNetCanny:\n            controlnet = ControlNetModel.from_pretrained(\n                \"lllyasviel/sd-controlnet-canny\")\n            self.set_model(ModelType.ControlNetCanny,\n                           model_id=\"runwayml/stable-diffusion-v1-5\", controlnet=controlnet)\n            self.pipe.scheduler = DDIMScheduler.from_config(\n                self.pipe.scheduler.config)\n            if use_cf_attn:\n                self.pipe.unet.set_attn_processor(\n                    processor=self.controlnet_attn_proc)\n                self.pipe.controlnet.set_attn_processor(\n                    processor=self.controlnet_attn_proc)\n\n        added_prompt = 'best quality, extremely detailed'\n        negative_prompts = 'longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality'\n\n        video, fps = utils.prepare_video(\n            video_path, resolution, self.device, self.dtype, False)\n        control = utils.pre_process_canny(\n            video, low_threshold, high_threshold).to(self.device).to(self.dtype)\n\n        # canny_to_save = list(rearrange(control, 'f c w h -> f w h c').cpu().detach().numpy())\n        # _ = utils.create_video(canny_to_save, 4, path=\"ddxk.mp4\", watermark=None)\n\n        f, _, h, w = video.shape\n        self.generator.manual_seed(seed)\n        latents = torch.randn((1, 4, h//8, w//8), dtype=self.dtype,\n                              device=self.device, generator=self.generator)\n        latents = latents.repeat(f, 1, 1, 1)\n        result = self.inference(image=control,\n                                prompt=prompt + ', ' + added_prompt,\n                                height=h,\n                                width=w,\n                                negative_prompt=negative_prompts,\n                                num_inference_steps=num_inference_steps,\n                                guidance_scale=guidance_scale,\n                                controlnet_conditioning_scale=controlnet_conditioning_scale,\n                                eta=eta,\n                                latents=latents,\n                                seed=seed,\n                                output_type='numpy',\n                                split_to_chunks=True,\n                                chunk_size=chunk_size,\n                                merging_ratio=merging_ratio,\n                                )\n        return utils.create_video(result, fps, path=save_path, watermark=gradio_utils.logo_name_to_path(watermark))\n\n    def process_controlnet_depth(self,\n                                 video_path,\n                                 prompt,\n                                 chunk_size=8,\n                                 watermark='Picsart AI Research',\n                                 merging_ratio=0.0,\n                                 num_inference_steps=20,\n                                 controlnet_conditioning_scale=1.0,\n                                 guidance_scale=9.0,\n                                 seed=42,\n                                 eta=0.0,\n                                 resolution=512,\n                                 use_cf_attn=True,\n                                 save_path=None):\n        print(\"Module Depth\")\n        video_path = gradio_utils.edge_path_to_video_path(video_path)\n        if self.model_type != ModelType.ControlNetDepth:\n            controlnet = ControlNetModel.from_pretrained(\n                \"lllyasviel/sd-controlnet-depth\")\n            self.set_model(ModelType.ControlNetDepth,\n                           model_id=\"runwayml/stable-diffusion-v1-5\", controlnet=controlnet)\n            self.pipe.scheduler = DDIMScheduler.from_config(\n                self.pipe.scheduler.config)\n            if use_cf_attn:\n                self.pipe.unet.set_attn_processor(\n                    processor=self.controlnet_attn_proc)\n                self.pipe.controlnet.set_attn_processor(\n                    processor=self.controlnet_attn_proc)\n\n        added_prompt = 'best quality, extremely detailed'\n        negative_prompts = 'longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality'\n\n        video, fps = utils.prepare_video(\n            video_path, resolution, self.device, self.dtype, False)\n        control = utils.pre_process_depth(\n            video).to(self.device).to(self.dtype)\n\n        # depth_map_to_save = list(rearrange(control, 'f c w h -> f w h c').cpu().detach().numpy())\n        # _ = utils.create_video(depth_map_to_save, 4, path=\"ddxk.mp4\", watermark=None)\n\n        f, _, h, w = video.shape\n        self.generator.manual_seed(seed)\n        latents = torch.randn((1, 4, h//8, w//8), dtype=self.dtype,\n                              device=self.device, generator=self.generator)\n        latents = latents.repeat(f, 1, 1, 1)\n        result = self.inference(image=control,\n                                prompt=prompt + ', ' + added_prompt,\n                                height=h,\n                                width=w,\n                                negative_prompt=negative_prompts,\n                                num_inference_steps=num_inference_steps,\n                                guidance_scale=guidance_scale,\n                                controlnet_conditioning_scale=controlnet_conditioning_scale,\n                                eta=eta,\n                                latents=latents,\n                                seed=seed,\n                                output_type='numpy',\n                                split_to_chunks=True,\n                                chunk_size=chunk_size,\n                                merging_ratio=merging_ratio,\n                                )\n        return utils.create_video(result, fps, path=save_path, watermark=gradio_utils.logo_name_to_path(watermark))\n\n    def process_controlnet_pose(self,\n                                video_path,\n                                prompt,\n                                chunk_size=8,\n                                watermark='Picsart AI Research',\n                                merging_ratio=0.0,\n                                num_inference_steps=20,\n                                controlnet_conditioning_scale=1.0,\n                                guidance_scale=9.0,\n                                seed=42,\n                                eta=0.0,\n                                resolution=512,\n                                use_cf_attn=True,\n                                save_path=None):\n        print(\"Module Pose\")\n        video_path = gradio_utils.motion_to_video_path(video_path)\n        if self.model_type != ModelType.ControlNetPose:\n            controlnet = ControlNetModel.from_pretrained(\n                \"fusing/stable-diffusion-v1-5-controlnet-openpose\")\n            self.set_model(ModelType.ControlNetPose,\n                           model_id=\"runwayml/stable-diffusion-v1-5\", controlnet=controlnet)\n            self.pipe.scheduler = DDIMScheduler.from_config(\n                self.pipe.scheduler.config)\n            if use_cf_attn:\n                self.pipe.unet.set_attn_processor(\n                    processor=self.controlnet_attn_proc)\n                self.pipe.controlnet.set_attn_processor(\n                    processor=self.controlnet_attn_proc)\n\n        video_path = gradio_utils.motion_to_video_path(\n            video_path) if 'Motion' in video_path else video_path\n\n        added_prompt = 'best quality, extremely detailed, HD, ultra-realistic, 8K, HQ, masterpiece, trending on artstation, art, smooth'\n        negative_prompts = 'longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer difits, cropped, worst quality, low quality, deformed body, bloated, ugly, unrealistic'\n\n        video, fps = utils.prepare_video(\n            video_path, resolution, self.device, self.dtype, False, output_fps=4)\n        control = utils.pre_process_pose(\n            video, apply_pose_detect=False).to(self.device).to(self.dtype)\n        f, _, h, w = video.shape\n        self.generator.manual_seed(seed)\n        latents = torch.randn((1, 4, h//8, w//8), dtype=self.dtype,\n                              device=self.device, generator=self.generator)\n        latents = latents.repeat(f, 1, 1, 1)\n        result = self.inference(image=control,\n                                prompt=prompt + ', ' + added_prompt,\n                                height=h,\n                                width=w,\n                                negative_prompt=negative_prompts,\n                                num_inference_steps=num_inference_steps,\n                                guidance_scale=guidance_scale,\n                                controlnet_conditioning_scale=controlnet_conditioning_scale,\n                                eta=eta,\n                                latents=latents,\n                                seed=seed,\n                                output_type='numpy',\n                                split_to_chunks=True,\n                                chunk_size=chunk_size,\n                                merging_ratio=merging_ratio,\n                                )\n        return utils.create_gif(result, fps, path=save_path, watermark=gradio_utils.logo_name_to_path(watermark))\n\n    def process_controlnet_canny_db(self,\n                                    db_path,\n                                    video_path,\n                                    prompt,\n                                    chunk_size=8,\n                                    watermark='Picsart AI Research',\n                                    merging_ratio=0.0,\n                                    num_inference_steps=20,\n                                    controlnet_conditioning_scale=1.0,\n                                    guidance_scale=9.0,\n                                    seed=42,\n                                    eta=0.0,\n                                    low_threshold=100,\n                                    high_threshold=200,\n                                    resolution=512,\n                                    use_cf_attn=True,\n                                    save_path=None):\n        print(\"Module Canny_DB\")\n        db_path = gradio_utils.get_model_from_db_selection(db_path)\n        video_path = gradio_utils.get_video_from_canny_selection(video_path)\n        # Load db and controlnet weights\n        if 'db_path' not in self.states or db_path != self.states['db_path']:\n            controlnet = ControlNetModel.from_pretrained(\n                \"lllyasviel/sd-controlnet-canny\")\n            self.set_model(ModelType.ControlNetCannyDB,\n                           model_id=db_path, controlnet=controlnet)\n            self.pipe.scheduler = DDIMScheduler.from_config(\n                self.pipe.scheduler.config)\n            self.states['db_path'] = db_path\n\n        if use_cf_attn:\n            self.pipe.unet.set_attn_processor(\n                processor=self.controlnet_attn_proc)\n            self.pipe.controlnet.set_attn_processor(\n                processor=self.controlnet_attn_proc)\n\n        added_prompt = 'best quality, extremely detailed'\n        negative_prompts = 'longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer digits, cropped, worst quality, low quality'\n\n        video, fps = utils.prepare_video(\n            video_path, resolution, self.device, self.dtype, False)\n        control = utils.pre_process_canny(\n            video, low_threshold, high_threshold).to(self.device).to(self.dtype)\n        f, _, h, w = video.shape\n        self.generator.manual_seed(seed)\n        latents = torch.randn((1, 4, h//8, w//8), dtype=self.dtype,\n                              device=self.device, generator=self.generator)\n        latents = latents.repeat(f, 1, 1, 1)\n        result = self.inference(image=control,\n                                prompt=prompt + ', ' + added_prompt,\n                                height=h,\n                                width=w,\n                                negative_prompt=negative_prompts,\n                                num_inference_steps=num_inference_steps,\n                                guidance_scale=guidance_scale,\n                                controlnet_conditioning_scale=controlnet_conditioning_scale,\n                                eta=eta,\n                                latents=latents,\n                                seed=seed,\n                                output_type='numpy',\n                                split_to_chunks=True,\n                                chunk_size=chunk_size,\n                                merging_ratio=merging_ratio,\n                                )\n        return utils.create_gif(result, fps, path=save_path, watermark=gradio_utils.logo_name_to_path(watermark))\n\n    def process_pix2pix(self,\n                        video,\n                        prompt,\n                        resolution=512,\n                        seed=0,\n                        image_guidance_scale=1.0,\n                        start_t=0,\n                        end_t=-1,\n                        out_fps=-1,\n                        chunk_size=8,\n                        watermark='Picsart AI Research',\n                        merging_ratio=0.0,\n                        use_cf_attn=True,\n                        save_path=None,):\n        print(\"Module Pix2Pix\")\n        if self.model_type != ModelType.Pix2Pix_Video:\n            self.set_model(ModelType.Pix2Pix_Video,\n                           model_id=\"timbrooks/instruct-pix2pix\")\n            self.pipe.scheduler = EulerAncestralDiscreteScheduler.from_config(\n                self.pipe.scheduler.config)\n            if use_cf_attn:\n                self.pipe.unet.set_attn_processor(\n                    processor=self.pix2pix_attn_proc)\n        video, fps = utils.prepare_video(\n            video, resolution, self.device, self.dtype, True, start_t, end_t, out_fps)\n        self.generator.manual_seed(seed)\n        result = self.inference(image=video,\n                                prompt=prompt,\n                                seed=seed,\n                                output_type='numpy',\n                                num_inference_steps=50,\n                                image_guidance_scale=image_guidance_scale,\n                                split_to_chunks=True,\n                                chunk_size=chunk_size,\n                                merging_ratio=merging_ratio\n                                )\n        return utils.create_video(result, fps, path=save_path, watermark=gradio_utils.logo_name_to_path(watermark))\n\n    def process_text2video(self,\n                           prompt,\n                           model_name=\"dreamlike-art/dreamlike-photoreal-2.0\",\n                           motion_field_strength_x=12,\n                           motion_field_strength_y=12,\n                           t0=44,\n                           t1=47,\n                           n_prompt=\"\",\n                           chunk_size=8,\n                           video_length=8,\n                           watermark='Picsart AI Research',\n                           merging_ratio=0.0,\n                           seed=0,\n                           resolution=512,\n                           fps=2,\n                           use_cf_attn=True,\n                           use_motion_field=True,\n                           smooth_bg=False,\n                           smooth_bg_strength=0.4,\n                           path=None):\n        print(\"Module Text2Video\")\n        if self.model_type != ModelType.Text2Video or model_name != self.model_name:\n            print(\"Model update\")\n            unet = UNet2DConditionModel.from_pretrained(\n                model_name, subfolder=\"unet\")\n            self.set_model(ModelType.Text2Video,\n                           model_id=model_name, unet=unet)\n            self.pipe.scheduler = DDIMScheduler.from_config(\n                self.pipe.scheduler.config)\n            if use_cf_attn:\n                self.pipe.unet.set_attn_processor(\n                    processor=self.text2video_attn_proc)\n        self.generator.manual_seed(seed)\n\n        added_prompt = \"high quality, HD, 8K, trending on artstation, high focus, dramatic lighting\"\n        negative_prompts = 'longbody, lowres, bad anatomy, bad hands, missing fingers, extra digit, fewer difits, cropped, worst quality, low quality, deformed body, bloated, ugly, unrealistic'\n\n        prompt = prompt.rstrip()\n        if len(prompt) > 0 and (prompt[-1] == \",\" or prompt[-1] == \".\"):\n            prompt = prompt.rstrip()[:-1]\n        prompt = prompt.rstrip()\n        prompt = prompt + \", \"+added_prompt\n        if len(n_prompt) > 0:\n            negative_prompt = n_prompt\n        else:\n            negative_prompt = None\n\n        result = self.inference(prompt=prompt,\n                                video_length=video_length,\n                                height=resolution,\n                                width=resolution,\n                                num_inference_steps=50,\n                                guidance_scale=7.5,\n                                guidance_stop_step=1.0,\n                                t0=t0,\n                                t1=t1,\n                                motion_field_strength_x=motion_field_strength_x,\n                                motion_field_strength_y=motion_field_strength_y,\n                                use_motion_field=use_motion_field,\n                                smooth_bg=smooth_bg,\n                                smooth_bg_strength=smooth_bg_strength,\n                                seed=seed,\n                                output_type='numpy',\n                                negative_prompt=negative_prompt,\n                                merging_ratio=merging_ratio,\n                                split_to_chunks=True,\n                                chunk_size=chunk_size,\n                                )\n        return utils.create_video(result, fps, path=path, watermark=gradio_utils.logo_name_to_path(watermark))\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.623046875,
          "content": "accelerate==0.16.0\naddict==2.4.0\nalbumentations==1.3.0\nbasicsr==1.4.2\ndecord==0.6.0\ndiffusers==0.14.0\neinops==0.6.0\ngradio==3.23.0\nkornia==0.6\nimageio==2.9.0\nimageio-ffmpeg==0.4.2\ninvisible-watermark>=0.1.5\nmoviepy==1.0.3\nnumpy==1.24.1\nomegaconf==2.3.0\nopen_clip_torch==2.16.0\nopencv_python==4.7.0.72\nopencv-contrib-python==4.7.0.72\nPillow==9.4.0\npytorch_lightning==1.5.0\nprettytable==3.6.0\nscikit_image==0.19.3\nscipy==1.10.1\ntensorboardX==2.6\ntorch==1.13.1\ntorchvision==0.14.1\ntorchmetrics==0.6.0\ntqdm==4.64.1\ntimm==0.6.12\ntransformers==4.26.0\ntest-tube>=0.7.5\nwebdataset==0.2.5\nyapf==0.32.0\nsafetensors==0.2.7\nbeautifulsoup4\nbs4\ntomesd\n"
        },
        {
          "name": "share.py",
          "type": "blob",
          "size": 0.1513671875,
          "content": "import config\nfrom cldm.hack import disable_verbosity, enable_sliced_attention\n\n\ndisable_verbosity()\n\nif config.save_memory:\n    enable_sliced_attention()\n"
        },
        {
          "name": "style.css",
          "type": "blob",
          "size": 0.0283203125,
          "content": "h1 {\n  text-align: center;\n}\n"
        },
        {
          "name": "text_to_video_pipeline.py",
          "type": "blob",
          "size": 21.7822265625,
          "content": "from diffusers import StableDiffusionPipeline\nimport torch\nfrom dataclasses import dataclass\nfrom typing import Callable, List, Optional, Union\nimport numpy as np\nfrom diffusers.utils import deprecate, logging, BaseOutput\nfrom einops import rearrange, repeat\nfrom torch.nn.functional import grid_sample\nimport torchvision.transforms as T\nfrom transformers import CLIPFeatureExtractor, CLIPTextModel, CLIPTokenizer\nfrom diffusers.models import AutoencoderKL, UNet2DConditionModel\nfrom diffusers.schedulers import KarrasDiffusionSchedulers\nfrom diffusers.pipelines.stable_diffusion import StableDiffusionSafetyChecker\nimport PIL\nfrom PIL import Image\nfrom kornia.morphology import dilation\n\n\n@dataclass\nclass TextToVideoPipelineOutput(BaseOutput):\n    # videos: Union[torch.Tensor, np.ndarray]\n    # code: Union[torch.Tensor, np.ndarray]\n    images: Union[List[PIL.Image.Image], np.ndarray]\n    nsfw_content_detected: Optional[List[bool]]\n\n\ndef coords_grid(batch, ht, wd, device):\n    # Adapted from https://github.com/princeton-vl/RAFT/blob/master/core/utils/utils.py\n    coords = torch.meshgrid(torch.arange(\n        ht, device=device), torch.arange(wd, device=device))\n    coords = torch.stack(coords[::-1], dim=0).float()\n    return coords[None].repeat(batch, 1, 1, 1)\n\n\nclass TextToVideoPipeline(StableDiffusionPipeline):\n    def __init__(\n        self,\n        vae: AutoencoderKL,\n        text_encoder: CLIPTextModel,\n        tokenizer: CLIPTokenizer,\n        unet: UNet2DConditionModel,\n        scheduler: KarrasDiffusionSchedulers,\n        safety_checker: StableDiffusionSafetyChecker,\n        feature_extractor: CLIPFeatureExtractor,\n        requires_safety_checker: bool = True,\n    ):\n        super().__init__(vae, text_encoder, tokenizer, unet, scheduler,\n                         safety_checker, feature_extractor, requires_safety_checker)\n\n    def DDPM_forward(self, x0, t0, tMax, generator, device, shape, text_embeddings):\n        rand_device = \"cpu\" if device.type == \"mps\" else device\n\n        if x0 is None:\n            return torch.randn(shape, generator=generator, device=rand_device, dtype=text_embeddings.dtype).to(device)\n        else:\n            eps = torch.randn(x0.shape, dtype=text_embeddings.dtype, generator=generator,\n                              device=rand_device)\n            alpha_vec = torch.prod(self.scheduler.alphas[t0:tMax])\n\n            xt = torch.sqrt(alpha_vec) * x0 + \\\n                torch.sqrt(1-alpha_vec) * eps\n            return xt\n\n    def prepare_latents(self, batch_size, num_channels_latents, video_length, height, width, dtype, device, generator, latents=None):\n        shape = (batch_size, num_channels_latents, video_length, height //\n                 self.vae_scale_factor, width // self.vae_scale_factor)\n        if isinstance(generator, list) and len(generator) != batch_size:\n            raise ValueError(\n                f\"You have passed a list of generators of length {len(generator)}, but requested an effective batch\"\n                f\" size of {batch_size}. Make sure the batch size matches the length of the generators.\"\n            )\n\n        if latents is None:\n            rand_device = \"cpu\" if device.type == \"mps\" else device\n\n            if isinstance(generator, list):\n                shape = (1,) + shape[1:]\n                latents = [\n                    torch.randn(\n                        shape, generator=generator[i], device=rand_device, dtype=dtype)\n                    for i in range(batch_size)\n                ]\n                latents = torch.cat(latents, dim=0).to(device)\n            else:\n                latents = torch.randn(\n                    shape, generator=generator, device=rand_device, dtype=dtype).to(device)\n        else:\n            latents = latents.to(device)\n\n        # scale the initial noise by the standard deviation required by the scheduler\n        latents = latents * self.scheduler.init_noise_sigma\n        return latents\n\n    def warp_latents_independently(self, latents, reference_flow):\n        _, _, H, W = reference_flow.size()\n        b, _, f, h, w = latents.size()\n        assert b == 1\n        coords0 = coords_grid(f, H, W, device=latents.device).to(latents.dtype)\n\n        coords_t0 = coords0 + reference_flow\n        coords_t0[:, 0] /= W\n        coords_t0[:, 1] /= H\n\n        coords_t0 = coords_t0 * 2.0 - 1.0\n\n        coords_t0 = T.Resize((h, w))(coords_t0)\n\n        coords_t0 = rearrange(coords_t0, 'f c h w -> f h w c')\n\n        latents_0 = rearrange(latents[0], 'c f h w -> f  c  h w')\n        warped = grid_sample(latents_0, coords_t0,\n                             mode='nearest', padding_mode='reflection')\n\n        warped = rearrange(warped, '(b f) c h w -> b c f h w', f=f)\n        return warped\n\n    def DDIM_backward(self, num_inference_steps, timesteps, skip_t, t0, t1, do_classifier_free_guidance, null_embs, text_embeddings, latents_local,\n                      latents_dtype, guidance_scale, guidance_stop_step, callback, callback_steps, extra_step_kwargs, num_warmup_steps):\n        entered = False\n\n        f = latents_local.shape[2]\n\n        latents_local = rearrange(latents_local, \"b c f w h -> (b f) c w h\")\n\n        latents = latents_local.detach().clone()\n        x_t0_1 = None\n        x_t1_1 = None\n\n        with self.progress_bar(total=num_inference_steps) as progress_bar:\n            for i, t in enumerate(timesteps):\n                if t > skip_t:\n                    continue\n                else:\n                    if not entered:\n                        print(\n                            f\"Continue DDIM with i = {i}, t = {t}, latent = {latents.shape}, device = {latents.device}, type = {latents.dtype}\")\n                        entered = True\n\n                latents = latents.detach()\n                # expand the latents if we are doing classifier free guidance\n                latent_model_input = torch.cat(\n                    [latents] * 2) if do_classifier_free_guidance else latents\n                latent_model_input = self.scheduler.scale_model_input(\n                    latent_model_input, t)\n\n                # predict the noise residual\n                with torch.no_grad():\n                    if null_embs is not None:\n                        text_embeddings[0] = null_embs[i][0]\n                    te = torch.cat([repeat(text_embeddings[0, :, :], \"c k -> f c k\", f=f),\n                                   repeat(text_embeddings[1, :, :], \"c k -> f c k\", f=f)])\n                    noise_pred = self.unet(\n                        latent_model_input, t, encoder_hidden_states=te).sample.to(dtype=latents_dtype)\n\n                # perform guidance\n                if do_classifier_free_guidance:\n                    noise_pred_uncond, noise_pred_text = noise_pred.chunk(\n                        2)\n                    noise_pred = noise_pred_uncond + guidance_scale * \\\n                        (noise_pred_text - noise_pred_uncond)\n\n                if i >= guidance_stop_step * len(timesteps):\n                    alpha = 0\n                # compute the previous noisy sample x_t -> x_t-1\n                latents = self.scheduler.step(\n                    noise_pred, t, latents, **extra_step_kwargs).prev_sample\n                # latents = latents - alpha * grads / (torch.norm(grads) + 1e-10)\n                # call the callback, if provided\n\n                if i < len(timesteps)-1 and timesteps[i+1] == t0:\n                    x_t0_1 = latents.detach().clone()\n                    print(f\"latent t0 found at i = {i}, t = {t}\")\n                elif i < len(timesteps)-1 and timesteps[i+1] == t1:\n                    x_t1_1 = latents.detach().clone()\n                    print(f\"latent t1 found at i={i}, t = {t}\")\n\n                if i == len(timesteps) - 1 or ((i + 1) > num_warmup_steps and (i + 1) % self.scheduler.order == 0):\n                    progress_bar.update()\n                    if callback is not None and i % callback_steps == 0:\n                        callback(i, t, latents)\n\n        latents = rearrange(latents, \"(b f) c w h -> b c f  w h\", f=f)\n\n        res = {\"x0\": latents.detach().clone()}\n        if x_t0_1 is not None:\n            x_t0_1 = rearrange(x_t0_1, \"(b f) c w h -> b c f  w h\", f=f)\n            res[\"x_t0_1\"] = x_t0_1.detach().clone()\n        if x_t1_1 is not None:\n            x_t1_1 = rearrange(x_t1_1, \"(b f) c w h -> b c f  w h\", f=f)\n            res[\"x_t1_1\"] = x_t1_1.detach().clone()\n        return res\n\n    def decode_latents(self, latents):\n        video_length = latents.shape[2]\n        latents = 1 / 0.18215 * latents\n        latents = rearrange(latents, \"b c f h w -> (b f) c h w\")\n        video = self.vae.decode(latents).sample\n        video = rearrange(video, \"(b f) c h w -> b c f h w\", f=video_length)\n        video = (video / 2 + 0.5).clamp(0, 1)\n        # we always cast to float32 as this does not cause significant overhead and is compatible with bfloa16\n        video = video.detach().cpu()\n        return video\n\n    def create_motion_field(self, motion_field_strength_x, motion_field_strength_y, frame_ids, video_length, latents):\n\n        reference_flow = torch.zeros(\n            (video_length-1, 2, 512, 512), device=latents.device, dtype=latents.dtype)\n        for fr_idx, frame_id in enumerate(frame_ids):\n            reference_flow[fr_idx, 0, :,\n                           :] = motion_field_strength_x*(frame_id)\n            reference_flow[fr_idx, 1, :,\n                           :] = motion_field_strength_y*(frame_id)\n        return reference_flow\n\n    def create_motion_field_and_warp_latents(self, motion_field_strength_x, motion_field_strength_y, frame_ids, video_length, latents):\n\n        motion_field = self.create_motion_field(motion_field_strength_x=motion_field_strength_x,\n                                                motion_field_strength_y=motion_field_strength_y, latents=latents, video_length=video_length, frame_ids=frame_ids)\n        for idx, latent in enumerate(latents):\n            latents[idx] = self.warp_latents_independently(\n                latent[None], motion_field)\n        return motion_field, latents\n\n    @torch.no_grad()\n    def __call__(\n        self,\n        prompt: Union[str, List[str]],\n        video_length: Optional[int],\n        height: Optional[int] = None,\n        width: Optional[int] = None,\n        num_inference_steps: int = 50,\n        guidance_scale: float = 7.5,\n        guidance_stop_step: float = 0.5,\n        negative_prompt: Optional[Union[str, List[str]]] = None,\n        num_videos_per_prompt: Optional[int] = 1,\n        eta: float = 0.0,\n        generator: Optional[Union[torch.Generator,\n                                  List[torch.Generator]]] = None,\n        xT: Optional[torch.FloatTensor] = None,\n        null_embs: Optional[torch.FloatTensor] = None,\n        motion_field_strength_x: float = 12,\n        motion_field_strength_y: float = 12,\n        output_type: Optional[str] = \"tensor\",\n        return_dict: bool = True,\n        callback: Optional[Callable[[\n            int, int, torch.FloatTensor], None]] = None,\n        callback_steps: Optional[int] = 1,\n        use_motion_field: bool = True,\n        smooth_bg: bool = False,\n        smooth_bg_strength: float = 0.4,\n        t0: int = 44,\n        t1: int = 47,\n        **kwargs,\n    ):\n        frame_ids = kwargs.pop(\"frame_ids\", list(range(video_length)))\n        assert t0 < t1\n        assert num_videos_per_prompt == 1\n        assert isinstance(prompt, list) and len(prompt) > 0\n        assert isinstance(negative_prompt, list) or negative_prompt is None\n\n        prompt_types = [prompt, negative_prompt]\n\n        for idx, prompt_type in enumerate(prompt_types):\n            prompt_template = None\n            for prompt in prompt_type:\n                if prompt_template is None:\n                    prompt_template = prompt\n                else:\n                    assert prompt == prompt_template\n            if prompt_types[idx] is not None:\n                prompt_types[idx] = prompt_types[idx][0]\n        prompt = prompt_types[0]\n        negative_prompt = prompt_types[1]\n\n        # Default height and width to unet\n        height = height or self.unet.config.sample_size * self.vae_scale_factor\n        width = width or self.unet.config.sample_size * self.vae_scale_factor\n\n        # Check inputs. Raise error if not correct\n        self.check_inputs(prompt, height, width, callback_steps)\n\n        # Define call parameters\n        batch_size = 1 if isinstance(prompt, str) else len(prompt)\n        device = self._execution_device\n        # here `guidance_scale` is defined analog to the guidance weight `w` of equation (2)\n        # of the Imagen paper: https://arxiv.org/pdf/2205.11487.pdf . `guidance_scale = 1`\n        # corresponds to doing no classifier free guidance.\n        do_classifier_free_guidance = guidance_scale > 1.0\n\n        # Encode input prompt\n        text_embeddings = self._encode_prompt(\n            prompt, device, num_videos_per_prompt, do_classifier_free_guidance, negative_prompt\n        )\n\n        # Prepare timesteps\n        self.scheduler.set_timesteps(num_inference_steps, device=device)\n        timesteps = self.scheduler.timesteps\n\n        # print(f\" Latent shape = {latents.shape}\")\n\n        # Prepare latent variables\n        num_channels_latents = self.unet.in_channels\n\n        xT = self.prepare_latents(\n            batch_size * num_videos_per_prompt,\n            num_channels_latents,\n            1,\n            height,\n            width,\n            text_embeddings.dtype,\n            device,\n            generator,\n            xT,\n        )\n        dtype = xT.dtype\n\n        # when motion field is not used, augment with random latent codes\n        if use_motion_field:\n            xT = xT[:, :, :1]\n        else:\n            if xT.shape[2] < video_length:\n                xT_missing = self.prepare_latents(\n                    batch_size * num_videos_per_prompt,\n                    num_channels_latents,\n                    video_length-xT.shape[2],\n                    height,\n                    width,\n                    text_embeddings.dtype,\n                    device,\n                    generator,\n                    None,\n                )\n                xT = torch.cat([xT, xT_missing], dim=2)\n\n        xInit = xT.clone()\n\n        timesteps_ddpm = [981, 961, 941, 921, 901, 881, 861, 841, 821, 801, 781, 761, 741, 721,\n                          701, 681, 661, 641, 621, 601, 581, 561, 541, 521, 501, 481, 461, 441,\n                          421, 401, 381, 361, 341, 321, 301, 281, 261, 241, 221, 201, 181, 161,\n                          141, 121, 101,  81,  61,  41,  21,   1]\n        timesteps_ddpm.reverse()\n\n        t0 = timesteps_ddpm[t0]\n        t1 = timesteps_ddpm[t1]\n\n        print(f\"t0 = {t0} t1 = {t1}\")\n        x_t1_1 = None\n\n        # Prepare extra step kwargs.\n        extra_step_kwargs = self.prepare_extra_step_kwargs(generator, eta)\n        # Denoising loop\n        num_warmup_steps = len(timesteps) - \\\n            num_inference_steps * self.scheduler.order\n\n        shape = (batch_size, num_channels_latents, 1, height //\n                 self.vae_scale_factor, width // self.vae_scale_factor)\n\n        ddim_res = self.DDIM_backward(num_inference_steps=num_inference_steps, timesteps=timesteps, skip_t=1000, t0=t0, t1=t1, do_classifier_free_guidance=do_classifier_free_guidance,\n                                      null_embs=null_embs, text_embeddings=text_embeddings, latents_local=xT, latents_dtype=dtype, guidance_scale=guidance_scale, guidance_stop_step=guidance_stop_step,\n                                      callback=callback, callback_steps=callback_steps, extra_step_kwargs=extra_step_kwargs, num_warmup_steps=num_warmup_steps)\n\n        x0 = ddim_res[\"x0\"].detach()\n\n        if \"x_t0_1\" in ddim_res:\n            x_t0_1 = ddim_res[\"x_t0_1\"].detach()\n        if \"x_t1_1\" in ddim_res:\n            x_t1_1 = ddim_res[\"x_t1_1\"].detach()\n        del ddim_res\n        del xT\n        if use_motion_field:\n            del x0\n\n            x_t0_k = x_t0_1[:, :, :1, :, :].repeat(1, 1, video_length-1, 1, 1)\n\n            reference_flow, x_t0_k = self.create_motion_field_and_warp_latents(\n                motion_field_strength_x=motion_field_strength_x, motion_field_strength_y=motion_field_strength_y, latents=x_t0_k, video_length=video_length, frame_ids=frame_ids[1:])\n\n            # assuming t0=t1=1000, if t0 = 1000\n            if t1 > t0:\n                x_t1_k = self.DDPM_forward(\n                    x0=x_t0_k, t0=t0, tMax=t1, device=device, shape=shape, text_embeddings=text_embeddings, generator=generator)\n            else:\n                x_t1_k = x_t0_k\n\n            if x_t1_1 is None:\n                raise Exception\n\n            x_t1 = torch.cat([x_t1_1, x_t1_k], dim=2).clone().detach()\n\n            ddim_res = self.DDIM_backward(num_inference_steps=num_inference_steps, timesteps=timesteps, skip_t=t1, t0=-1, t1=-1, do_classifier_free_guidance=do_classifier_free_guidance,\n                                          null_embs=null_embs, text_embeddings=text_embeddings, latents_local=x_t1, latents_dtype=dtype, guidance_scale=guidance_scale,\n                                          guidance_stop_step=guidance_stop_step, callback=callback, callback_steps=callback_steps, extra_step_kwargs=extra_step_kwargs, num_warmup_steps=num_warmup_steps)\n\n            x0 = ddim_res[\"x0\"].detach()\n            del ddim_res\n            del x_t1\n            del x_t1_1\n            del x_t1_k\n        else:\n            x_t1 = x_t1_1.clone()\n            x_t1_1 = x_t1_1[:, :, :1, :, :].clone()\n            x_t1_k = x_t1_1[:, :, 1:, :, :].clone()\n            x_t0_k = x_t0_1[:, :, 1:, :, :].clone()\n            x_t0_1 = x_t0_1[:, :, :1, :, :].clone()\n\n        # smooth background\n        if smooth_bg:\n            h, w = x0.shape[3], x0.shape[4]\n            M_FG = torch.zeros((batch_size, video_length, h, w),\n                               device=x0.device).to(x0.dtype)\n            for batch_idx, x0_b in enumerate(x0):\n                z0_b = self.decode_latents(x0_b[None]).detach()\n                z0_b = rearrange(z0_b[0], \"c f h w -> f h w c\")\n                for frame_idx, z0_f in enumerate(z0_b):\n                    z0_f = torch.round(\n                        z0_f * 255).cpu().numpy().astype(np.uint8)\n                    # apply SOD detection\n                    m_f = torch.tensor(self.sod_model.process_data(\n                        z0_f), device=x0.device).to(x0.dtype)\n                    mask = T.Resize(\n                        size=(h, w), interpolation=T.InterpolationMode.NEAREST)(m_f[None])\n                    kernel = torch.ones(5, 5, device=x0.device, dtype=x0.dtype)\n                    mask = dilation(mask[None].to(x0.device), kernel)[0]\n                    M_FG[batch_idx, frame_idx, :, :] = mask\n\n            x_t1_1_fg_masked = x_t1_1 * \\\n                (1 - repeat(M_FG[:, 0, :, :],\n                            \"b w h -> b c 1 w h\", c=x_t1_1.shape[1]))\n\n            x_t1_1_fg_masked_moved = []\n            for batch_idx, x_t1_1_fg_masked_b in enumerate(x_t1_1_fg_masked):\n                x_t1_fg_masked_b = x_t1_1_fg_masked_b.clone()\n\n                x_t1_fg_masked_b = x_t1_fg_masked_b.repeat(\n                    1, video_length-1, 1, 1)\n                if use_motion_field:\n                    x_t1_fg_masked_b = x_t1_fg_masked_b[None]\n                    x_t1_fg_masked_b = self.warp_latents_independently(\n                        x_t1_fg_masked_b, reference_flow)\n                else:\n                    x_t1_fg_masked_b = x_t1_fg_masked_b[None]\n\n                x_t1_fg_masked_b = torch.cat(\n                    [x_t1_1_fg_masked_b[None], x_t1_fg_masked_b], dim=2)\n                x_t1_1_fg_masked_moved.append(x_t1_fg_masked_b)\n\n            x_t1_1_fg_masked_moved = torch.cat(x_t1_1_fg_masked_moved, dim=0)\n\n            M_FG_1 = M_FG[:, :1, :, :]\n\n            M_FG_warped = []\n            for batch_idx, m_fg_1_b in enumerate(M_FG_1):\n                m_fg_1_b = m_fg_1_b[None, None]\n                m_fg_b = m_fg_1_b.repeat(1, 1, video_length-1, 1, 1)\n                if use_motion_field:\n                    m_fg_b = self.warp_latents_independently(\n                        m_fg_b.clone(), reference_flow)\n                M_FG_warped.append(\n                    torch.cat([m_fg_1_b[:1, 0], m_fg_b[:1, 0]], dim=1))\n\n            M_FG_warped = torch.cat(M_FG_warped, dim=0)\n\n            channels = x0.shape[1]\n\n            M_BG = (1-M_FG) * (1 - M_FG_warped)\n            M_BG = repeat(M_BG, \"b f h w -> b c f h w\", c=channels)\n            a_convex = smooth_bg_strength\n\n            latents = (1-M_BG) * x_t1 + M_BG * (a_convex *\n                                                x_t1 + (1-a_convex) * x_t1_1_fg_masked_moved)\n\n            ddim_res = self.DDIM_backward(num_inference_steps=num_inference_steps, timesteps=timesteps, skip_t=t1, t0=-1, t1=-1, do_classifier_free_guidance=do_classifier_free_guidance,\n                                          null_embs=null_embs, text_embeddings=text_embeddings, latents_local=latents, latents_dtype=dtype, guidance_scale=guidance_scale,\n                                          guidance_stop_step=guidance_stop_step, callback=callback, callback_steps=callback_steps, extra_step_kwargs=extra_step_kwargs, num_warmup_steps=num_warmup_steps)\n            x0 = ddim_res[\"x0\"].detach()\n            del ddim_res\n            del latents\n\n        latents = x0\n\n        # manually for max memory savings\n        if hasattr(self, \"final_offload_hook\") and self.final_offload_hook is not None:\n            self.unet.to(\"cpu\")\n        torch.cuda.empty_cache()\n\n        if output_type == \"latent\":\n            image = latents\n            has_nsfw_concept = None\n        else:\n            image = self.decode_latents(latents)\n\n            # Run safety checker\n            image, has_nsfw_concept = self.run_safety_checker(\n                image, device, text_embeddings.dtype)\n            image = rearrange(image, \"b c f h w -> (b f) h w c\")\n\n        # Offload last model to CPU\n        if hasattr(self, \"final_offload_hook\") and self.final_offload_hook is not None:\n            self.final_offload_hook.offload()\n\n        if not return_dict:\n            return (image, has_nsfw_concept)\n\n        return TextToVideoPipelineOutput(images=image, nsfw_content_detected=has_nsfw_concept)\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 8.1201171875,
          "content": "import os\n\nimport PIL.Image\nimport numpy as np\nimport torch\nimport torchvision\nfrom torchvision.transforms import Resize, InterpolationMode\nimport imageio\nfrom einops import rearrange\nimport cv2\nfrom PIL import Image\nfrom annotator.util import resize_image, HWC3\nfrom annotator.canny import CannyDetector\nfrom annotator.openpose import OpenposeDetector\nfrom annotator.midas import MidasDetector\nimport decord\n\napply_canny = CannyDetector()\napply_openpose = OpenposeDetector()\napply_midas = MidasDetector()\n\n\ndef add_watermark(image, watermark_path, wm_rel_size=1/16, boundary=5):\n    '''\n    Creates a watermark on the saved inference image.\n    We request that you do not remove this to properly assign credit to\n    Shi-Lab's work.\n    '''\n    watermark = Image.open(watermark_path)\n    w_0, h_0 = watermark.size\n    H, W, _ = image.shape\n    wmsize = int(max(H, W) * wm_rel_size)\n    aspect = h_0 / w_0\n    if aspect > 1.0:\n        watermark = watermark.resize((wmsize, int(aspect * wmsize)), Image.LANCZOS)\n    else:\n        watermark = watermark.resize((int(wmsize / aspect), wmsize), Image.LANCZOS)\n    w, h = watermark.size\n    loc_h = H - h - boundary\n    loc_w = W - w - boundary\n    image = Image.fromarray(image)\n    mask = watermark if watermark.mode in ('RGBA', 'LA') else None\n    image.paste(watermark, (loc_w, loc_h), mask)\n    return image\n\n\ndef pre_process_canny(input_video, low_threshold=100, high_threshold=200):\n    detected_maps = []\n    for frame in input_video:\n        img = rearrange(frame, 'c h w -> h w c').cpu().numpy().astype(np.uint8)\n        detected_map = apply_canny(img, low_threshold, high_threshold)\n        detected_map = HWC3(detected_map)\n        detected_maps.append(detected_map[None])\n    detected_maps = np.concatenate(detected_maps)\n    control = torch.from_numpy(detected_maps.copy()).float() / 255.0\n    return rearrange(control, 'f h w c -> f c h w')\n\n\ndef pre_process_depth(input_video, apply_depth_detect: bool = True):\n    detected_maps = []\n    for frame in input_video:\n        img = rearrange(frame, 'c h w -> h w c').cpu().numpy().astype(np.uint8)\n        img = HWC3(img)\n        if apply_depth_detect:\n            detected_map, _ = apply_midas(img)\n        else:\n            detected_map = img\n        detected_map = HWC3(detected_map)\n        H, W, C = img.shape\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_NEAREST)\n        detected_maps.append(detected_map[None])\n    detected_maps = np.concatenate(detected_maps)\n    control = torch.from_numpy(detected_maps.copy()).float() / 255.0\n    return rearrange(control, 'f h w c -> f c h w')\n\n\ndef pre_process_pose(input_video, apply_pose_detect: bool = True):\n    detected_maps = []\n    for frame in input_video:\n        img = rearrange(frame, 'c h w -> h w c').cpu().numpy().astype(np.uint8)\n        img = HWC3(img)\n        if apply_pose_detect:\n            detected_map, _ = apply_openpose(img)\n        else:\n            detected_map = img\n        detected_map = HWC3(detected_map)\n        H, W, C = img.shape\n        detected_map = cv2.resize(detected_map, (W, H), interpolation=cv2.INTER_NEAREST)\n        detected_maps.append(detected_map[None])\n    detected_maps = np.concatenate(detected_maps)\n    control = torch.from_numpy(detected_maps.copy()).float() / 255.0\n    return rearrange(control, 'f h w c -> f c h w')\n\n\ndef create_video(frames, fps, rescale=False, path=None, watermark=None):\n    if path is None:\n        dir = \"temporal\"\n        os.makedirs(dir, exist_ok=True)\n        path = os.path.join(dir, 'movie.mp4')\n\n    outputs = []\n    for i, x in enumerate(frames):\n        x = torchvision.utils.make_grid(torch.Tensor(x), nrow=4)\n        if rescale:\n            x = (x + 1.0) / 2.0  # -1,1 -> 0,1\n        x = (x * 255).numpy().astype(np.uint8)\n\n        if watermark is not None:\n            x = add_watermark(x, watermark)\n        outputs.append(x)\n        # imageio.imsave(os.path.join(dir, os.path.splitext(name)[0] + f'_{i}.jpg'), x)\n\n    imageio.mimsave(path, outputs, fps=fps)\n    return path\n\ndef create_gif(frames, fps, rescale=False, path=None, watermark=None):\n    if path is None:\n        dir = \"temporal\"\n        os.makedirs(dir, exist_ok=True)\n        path = os.path.join(dir, 'canny_db.gif')\n\n    outputs = []\n    for i, x in enumerate(frames):\n        x = torchvision.utils.make_grid(torch.Tensor(x), nrow=4)\n        if rescale:\n            x = (x + 1.0) / 2.0  # -1,1 -> 0,1\n        x = (x * 255).numpy().astype(np.uint8)\n        if watermark is not None:\n            x = add_watermark(x, watermark)\n        outputs.append(x)\n        # imageio.imsave(os.path.join(dir, os.path.splitext(name)[0] + f'_{i}.jpg'), x)\n\n    imageio.mimsave(path, outputs, fps=fps)\n    return path\n\ndef prepare_video(video_path:str, resolution:int, device, dtype, normalize=True, start_t:float=0, end_t:float=-1, output_fps:int=-1):\n    vr = decord.VideoReader(video_path)\n    initial_fps = vr.get_avg_fps()\n    if output_fps == -1:\n        output_fps = int(initial_fps)\n    if end_t == -1:\n        end_t = len(vr) / initial_fps\n    else:\n        end_t = min(len(vr) / initial_fps, end_t)\n    assert 0 <= start_t < end_t\n    assert output_fps > 0\n    start_f_ind = int(start_t * initial_fps)\n    end_f_ind = int(end_t * initial_fps)\n    num_f = int((end_t - start_t) * output_fps)\n    sample_idx = np.linspace(start_f_ind, end_f_ind, num_f, endpoint=False).astype(int)\n    video = vr.get_batch(sample_idx)\n    if torch.is_tensor(video):\n        video = video.detach().cpu().numpy()\n    else:\n        video = video.asnumpy()\n    _, h, w, _ = video.shape\n    video = rearrange(video, \"f h w c -> f c h w\")\n    video = torch.Tensor(video).to(device).to(dtype)\n\n    # Use max if you want the larger side to be equal to resolution (e.g. 512)\n    # k = float(resolution) / min(h, w)\n    k = float(resolution) / max(h, w)\n    h *= k\n    w *= k\n    h = int(np.round(h / 64.0)) * 64\n    w = int(np.round(w / 64.0)) * 64\n\n    video = Resize((h, w), interpolation=InterpolationMode.BILINEAR, antialias=True)(video)\n    if normalize:\n        video = video / 127.5 - 1.0\n    return video, output_fps\n\n\ndef post_process_gif(list_of_results, image_resolution):\n    output_file = \"/tmp/ddxk.gif\"\n    imageio.mimsave(output_file, list_of_results, fps=4)\n    return output_file\n\n\nclass CrossFrameAttnProcessor:\n    def __init__(self, unet_chunk_size=2):\n        self.unet_chunk_size = unet_chunk_size\n\n    def __call__(\n            self,\n            attn,\n            hidden_states,\n            encoder_hidden_states=None,\n            attention_mask=None):\n        batch_size, sequence_length, _ = hidden_states.shape\n        attention_mask = attn.prepare_attention_mask(attention_mask, sequence_length, batch_size)\n        query = attn.to_q(hidden_states)\n\n        is_cross_attention = encoder_hidden_states is not None\n        if encoder_hidden_states is None:\n            encoder_hidden_states = hidden_states\n        elif attn.cross_attention_norm:\n            encoder_hidden_states = attn.norm_cross(encoder_hidden_states)\n        key = attn.to_k(encoder_hidden_states)\n        value = attn.to_v(encoder_hidden_states)\n        # Sparse Attention\n        if not is_cross_attention:\n            video_length = key.size()[0] // self.unet_chunk_size\n            # former_frame_index = torch.arange(video_length) - 1\n            # former_frame_index[0] = 0\n            former_frame_index = [0] * video_length\n            key = rearrange(key, \"(b f) d c -> b f d c\", f=video_length)\n            key = key[:, former_frame_index]\n            key = rearrange(key, \"b f d c -> (b f) d c\")\n            value = rearrange(value, \"(b f) d c -> b f d c\", f=video_length)\n            value = value[:, former_frame_index]\n            value = rearrange(value, \"b f d c -> (b f) d c\")\n\n        query = attn.head_to_batch_dim(query)\n        key = attn.head_to_batch_dim(key)\n        value = attn.head_to_batch_dim(value)\n\n        attention_probs = attn.get_attention_scores(query, key, attention_mask)\n        hidden_states = torch.bmm(attention_probs, value)\n        hidden_states = attn.batch_to_head_dim(hidden_states)\n\n        # linear proj\n        hidden_states = attn.to_out[0](hidden_states)\n        # dropout\n        hidden_states = attn.to_out[1](hidden_states)\n\n        return hidden_states\n"
        }
      ]
    }
  ]
}