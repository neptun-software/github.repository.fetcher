{
  "metadata": {
    "timestamp": 1736559668694,
    "page": 336,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zas023/JdBuyer",
      "stars": 4181,
      "defaultBranch": "main",
      "files": [
        {
          "name": "JdBuyer.py",
          "type": "blob",
          "size": 3.6591796875,
          "content": "# -*- coding: utf-8 -*-\nimport time\n\nfrom config import global_config\nfrom log import logger\nfrom exception import JDException\nfrom JdSession import Session\nfrom timer import Timer\nfrom utils import (\n    save_image,\n    open_image,\n    send_wechat\n)\n\n\nclass Buyer(object):\n    \"\"\"\n    京东买手\n    \"\"\"\n\n    # 初始化\n    def __init__(self):\n        self.session = Session()\n        # 微信推送\n        self.enableWx = global_config.getboolean('messenger', 'enable')\n        self.scKey = global_config.get('messenger', 'sckey')\n\n    ############## 登录相关 #############\n    # 二维码登录\n    def loginByQrCode(self):\n        if self.session.isLogin:\n            logger.info('登录成功')\n            return\n\n        # download QR code\n        qrCode = self.session.getQRcode()\n        if not qrCode:\n            raise JDException('二维码下载失败')\n\n        fileName = 'QRcode.png'\n        save_image(qrCode, fileName)\n        logger.info('二维码获取成功，请打开京东APP扫描')\n        open_image(fileName)\n\n        # get QR code ticket\n        ticket = None\n        retryTimes = 85\n        for i in range(retryTimes):\n            ticket = self.session.getQRcodeTicket()\n            if ticket:\n                break\n            time.sleep(2)\n        else:\n            raise JDException('二维码过期，请重新获取扫描')\n\n        # validate QR code ticket\n        if not self.session.validateQRcodeTicket(ticket):\n            raise JDException('二维码信息校验失败')\n\n        logger.info('二维码登录成功')\n        self.session.isLogin = True\n        self.session.saveCookies()\n\n    ############## 外部方法 #############\n    def buyItemInStock(self, skuId, areaId, skuNum=1, stockInterval=3, submitRetry=3, submitInterval=5, buyTime='2022-08-06 00:00:00'):\n        \"\"\"根据库存自动下单商品\n        :skuId 商品sku\n        :areaId 下单区域id\n        :skuNum 购买数量\n        :stockInterval 库存查询间隔（单位秒）\n        :submitRetry 下单尝试次数\n        :submitInterval 下单尝试间隔（单位秒）\n        :buyTime 定时执行\n        \"\"\"\n        self.session.fetchItemDetail(skuId)\n        timer = Timer(buyTime)\n        timer.start()\n\n        while True:\n            try:\n                if not self.session.getItemStock(skuId, skuNum, areaId):\n                    logger.info('不满足下单条件，{0}s后进行下一次查询'.format(stockInterval))\n                else:\n                    logger.info('{0} 满足下单条件，开始执行'.format(skuId))\n                    if self.session.trySubmitOrder(skuId, skuNum, areaId, submitRetry, submitInterval):\n                        logger.info('下单成功')\n                        if self.enableWx:\n                            send_wechat(\n                                message='JdBuyerApp', desp='您的商品已下单成功，请及时支付订单', sckey=self.scKey)\n                        return\n            except Exception as e:\n                logger.error(e)\n            time.sleep(stockInterval)\n\n\nif __name__ == '__main__':\n\n    # 商品sku\n    skuId = '100015253059'\n    # 区域id(可根据工程 area_id 目录查找)\n    areaId = '1_2901_55554_0'\n    # 购买数量\n    skuNum = 1\n    # 库存查询间隔(秒)\n    stockInterval = 3\n    # 监听库存后尝试下单次数\n    submitRetry = 3\n    # 下单尝试间隔(秒)\n    submitInterval = 5\n    # 程序开始执行时间(晚于当前时间立即执行，适用于定时抢购类)\n    buyTime = '2022-10-10 00:00:00'\n\n    buyer = Buyer()  # 初始化\n    buyer.loginByQrCode()\n    buyer.buyItemInStock(skuId, areaId, skuNum, stockInterval,\n                         submitRetry, submitInterval, buyTime)\n"
        },
        {
          "name": "JdBuyerApp.py",
          "type": "blob",
          "size": 10.2255859375,
          "content": "# -*- coding:utf-8 -*-\nimport sys\nimport os\nimport time\nimport json\n\nfrom PySide6.QtCore import Qt, QThread, Signal, QDateTime\nfrom PySide6.QtGui import QImage, QPixmap\nfrom PySide6.QtWidgets import (\n    QWidget,\n    QApplication,\n    QLabel,\n    QLineEdit,\n    QSlider,\n    QPushButton,\n    QGridLayout,\n    QDateTimeEdit\n)\n\nfrom timer import Timer\nfrom JdSession import Session\n\nNUM_LABEL_FORMAT = '商品购买数量[{0}]个'\nSTOCK_LABEL_FORMAT = '库存查询间隔[{0}]秒'\nDATA_FORMAT = '%H:%M:%S'\n\nif getattr(sys, 'frozen', False):\n    absPath = os.path.dirname(os.path.abspath(sys.executable))\nelif __file__:\n    absPath = os.path.dirname(os.path.abspath(__file__))\n\n\nclass JdBuyerUI(QWidget):\n\n    def __init__(self):\n        super().__init__()\n        self.session = Session()\n        self.ticketThread = TicketThread(self.session)\n        self.ticketThread.ticketSignal.connect(self.ticketSignal)\n        self.initUI()\n        self.loadData()\n\n    def loadData(self):\n        with open(os.path.join(absPath, 'config.json'), \"rb\") as f:\n            self.config = json.load(f)\n        self.skuEdit.setText(self.config.get('skuId'))\n        self.areaEdit.setText(self.config.get('areaId'))\n        self.passwordEdit.setText(self.config.get('password'))\n        self.numSlider.setValue(self.config.get('count'))\n        self.stockSlider.setValue(self.config.get('stockInterval'))\n        self.numLabel.setText(\n            NUM_LABEL_FORMAT.format(self.config.get('count')))\n        self.stockLabel.setText(STOCK_LABEL_FORMAT.format(\n            self.config.get('stockInterval')))\n\n    def saveData(self):\n        with open(os.path.join(absPath, 'config.json'), 'w', encoding='utf-8') as f:\n            # json.dump(my_list,f)\n            # 直接显示中文,不以ASCII的方式显示\n            # json.dump(my_list,f,ensure_ascii=False)\n            # 显示缩进\n            json.dump(self.config, f, ensure_ascii=False, indent=2)\n\n    def initUI(self):\n        grid = QGridLayout()\n        grid.setSpacing(10)\n\n        # 商品SKU\n        skuLabel = QLabel('商品SKU')\n        self.skuEdit = QLineEdit()\n        grid.addWidget(skuLabel, 1, 0)\n        grid.addWidget(self.skuEdit, 1, 1)\n\n        # 区域ID\n        areaLabel = QLabel('地区ID')\n        self.areaEdit = QLineEdit()\n        grid.addWidget(areaLabel, 2, 0)\n        grid.addWidget(self.areaEdit, 2, 1)\n\n        # 购买数量\n        self.numLabel = QLabel(NUM_LABEL_FORMAT.format(1))\n        self.numSlider = QSlider(Qt.Orientation.Horizontal, self)\n        self.numSlider.setTickPosition(QSlider.TicksBelow)\n        self.numSlider.setMinimum(1)\n        self.numSlider.setMaximum(9)\n        self.numSlider.valueChanged.connect(self.valuechange)\n        grid.addWidget(self.numLabel, 1, 3)\n        grid.addWidget(self.numSlider, 1, 4)\n\n        # 商品查询间隔\n        self.stockLabel = QLabel(STOCK_LABEL_FORMAT.format(3))\n        self.stockSlider = QSlider(Qt.Orientation.Horizontal, self)\n        self.stockSlider.setTickPosition(QSlider.TicksBelow)\n        self.stockSlider.setMinimum(1)\n        self.stockSlider.setMaximum(9)\n        self.stockSlider.valueChanged.connect(self.stockValuechange)\n        grid.addWidget(self.stockLabel, 2, 3)\n        grid.addWidget(self.stockSlider, 2, 4)\n\n        # 支付密码\n        passwordLabel = QLabel('支付密码')\n        self.passwordEdit = QLineEdit()\n        self.passwordEdit.setEchoMode(QLineEdit.Password)\n        self.passwordEdit.setPlaceholderText('使用虚拟资产时填写')\n        self.passwordEdit.textChanged[str].connect(self.textChanged)\n        grid.addWidget(passwordLabel, 3, 0)\n        grid.addWidget(self.passwordEdit, 3, 1)\n\n        # 开始时间\n        buyTimeLabel = QLabel('定时开始执行时间')\n        self.buyTimeEdit = QDateTimeEdit(QDateTime.currentDateTime(), self)\n        self.buyTimeEdit.setDisplayFormat(\"yyyy-MM-dd HH:mm:ss\")\n        grid.addWidget(buyTimeLabel, 3, 3)\n        grid.addWidget(self.buyTimeEdit, 3, 4)\n\n        # 二维码\n        self.qrLabel = QLabel()\n        grid.addWidget(self.qrLabel, 4, 0, 1, 2)\n        self.qrLabel.hide()\n\n        # 控制按钮\n        self.endButton = QPushButton(\"结束\")\n        self.endButton.clicked[bool].connect(self.onClick)\n        self.startButton = QPushButton(\"开始\")\n        self.startButton.clicked[bool].connect(self.onClick)\n        grid.addWidget(self.endButton, 5, 0, 1, 2)\n        grid.addWidget(self.startButton, 5, 3, 1, 2)\n\n        self.endButton.setDisabled(True)\n\n        # 信息展示\n        self.infoLabel = QLabel()\n        self.infoLabel.setText(\"当前登录状态是: {0}\".format(\n            '已登录' if self.session.isLogin else '未登录'))\n        grid.addWidget(self.infoLabel, 6, 0, 2, 4)\n\n        self.setLayout(grid)\n\n        # self.setGeometry(300, 300, 350, 300)\n        self.setWindowTitle('京东小猪手')\n        self.show()\n\n    # 开启下单任务\n    def startTask(self):\n        if not self.session.isLogin:\n            self.qrLogin()\n            self.infoLabel.setText('请使用京东扫码登录')\n            return\n        self.config['buyTime'] = self.buyTimeEdit.text()\n        self.config['skuId'] = self.skuEdit.text()\n        self.config['areaId'] = self.areaEdit.text()\n        self.saveData()\n        self.buyerThread = BuyerThread(self.session, self.config)\n        self.buyerThread.infoSignal.connect(self.infoSignal)\n        self.buyerThread.start()\n\n    # 扫码登录\n    def qrLogin(self):\n        res = self.session.getQRcode()\n        img = QImage.fromData(res)\n        self.qrLabel.setPixmap(QPixmap.fromImage(img))\n        self.qrLabel.show()\n        self.ticketThread.start()\n\n    # 异步线程信号\n    def ticketSignal(self, sec):\n        self.qrLabel.hide()\n        if sec == '成功':\n            self.startTask()\n        else:\n            # 失败\n            self.infoLabel.setText(sec)\n            self.resumeSatrtBtn()\n\n    def infoSignal(self, sec):\n        self.qrLabel.hide()\n        self.infoLabel.setText(sec)\n\n    # 按钮监听\n    def onClick(self, pressed):\n        source = self.sender()\n        if source.text() == '开始':\n            self.startTask()\n            self.disableStartBtn()\n        if source.text() == '结束':\n            self.handleStopBrn()\n\n    def handleStopBrn(self):\n        if self.session.isLogin:\n            self.buyerThread.pause()\n        else:\n            self.ticketThread.pause()\n        self.resumeSatrtBtn()\n\n    def disableStartBtn(self):\n        self.endButton.setDisabled(False)\n        self.startButton.setDisabled(True)\n\n    def resumeSatrtBtn(self):\n        self.endButton.setDisabled(True)\n        self.startButton.setDisabled(False)\n\n    # 输入框监听\n    def textChanged(self, text):\n        password = self.passwordEdit.text()\n        self.config['password'] = password\n        self.session.password = password\n\n    # 滑块监控\n    def valuechange(self):\n        num = self.numSlider.value()\n        self.config['count'] = num\n        self.numLabel.setText(NUM_LABEL_FORMAT.format(num))\n\n    def stockValuechange(self):\n        stock = self.stockSlider.value()\n        self.config['stockInterval'] = stock\n        self.stockLabel.setText(STOCK_LABEL_FORMAT.format(stock))\n\n# 登录监控线程\n\n\nclass TicketThread(QThread):\n    \"\"\" check ticket\n    \"\"\"\n    ticketSignal = Signal(str)\n\n    def __init__(self, session):\n        super().__init__()\n        self.session = session\n        self._isPause = False\n\n    def pause(self):\n        self._isPause = True\n\n    def run(self):\n        self._isPause = False\n        ticket = None\n        retry_times = 85\n        for i in range(retry_times):\n            if self._isPause:\n                self.ticketSignal.emit('已取消登录')\n                return\n            ticket = self.session.getQRcodeTicket()\n            if ticket:\n                break\n            time.sleep(2)\n        else:\n            self.ticketSignal.emit('二维码过期，请重新获取扫描')\n            return\n\n        # validate QR code ticket\n        if not self.session.validateQRcodeTicket(ticket):\n            self.ticketSignal.emit('二维码信息校验失败')\n            return\n\n        self.ticketSignal.emit('成功')\n        self.session.isLogin = True\n        self.session.saveCookies()\n\n# 商品监控线程\n\n\nclass BuyerThread(QThread):\n\n    infoSignal = Signal(str)\n\n    def __init__(self, session, taskParam):\n        super().__init__()\n        self.session = session\n        self.taskParam = taskParam\n        self._isPause = False\n\n    def pause(self):\n        self._isPause = True\n\n    def run(self):\n        sku_id = self.taskParam.get('skuId')\n        area_id = self.taskParam.get('areaId')\n        count = self.taskParam.get('count')\n        stock_interval = self.taskParam.get('stockInterval')\n        buyTime = self.taskParam.get('buyTime')\n\n        self.session.fetchItemDetail(sku_id)\n        submitRetry = 3\n        submitInterval = 5\n\n        timer = Timer(buyTime)\n        self.infoSignal.emit('定时中，将于 {0} 开始执行'.format(buyTime))\n        timer.start()\n\n        while True:\n            if self._isPause:\n                self.infoSignal.emit('{0} 已取消下单'.format(\n                    time.strftime(DATA_FORMAT, time.localtime())))\n                return\n            try:\n                if not self.session.getItemStock(skuId=sku_id, num=1, areaId=area_id):\n                    self.infoSignal.emit('{0} 不满足下单条件，{1}s后进行下一次查询'.format(\n                        time.strftime(DATA_FORMAT, time.localtime()), stock_interval))\n                else:\n                    self.infoSignal.emit('{0} 满足下单条件，开始执行'.format(sku_id))\n                    if not self.session.prepareCart(sku_id, count, area_id):\n                        self.infoSignal.emit('{0} 加入购物车失败，{1}s后进行下一次查询'.format(\n                            time.strftime(DATA_FORMAT, time.localtime()), stock_interval))\n                    else:\n                        if self.session.submitOrderWitchTry(submitRetry, submitInterval):\n                            self.infoSignal.emit('下单成功')\n                            return\n            except Exception as e:\n                self.infoSignal.emit(e)\n            time.sleep(stock_interval)\n\n\ndef main():\n\n    app = QApplication(sys.argv)\n    ui = JdBuyerUI()\n    sys.exit(app.exec())\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "JdSession.py",
          "type": "blob",
          "size": 18.8984375,
          "content": "# -*- coding:utf-8 -*-\nimport json\nimport os\nimport sys\nimport pickle\nimport random\nimport time\nimport requests\n\nfrom lxml import etree\n\nDEFAULT_TIMEOUT = 10\nDEFAULT_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'\n\nif getattr(sys, 'frozen', False):\n    absPath = os.path.dirname(os.path.abspath(sys.executable))\nelif __file__:\n    absPath = os.path.dirname(os.path.abspath(__file__))\n\n\nclass Session(object):\n    \"\"\"\n    京东买手\n    \"\"\"\n\n    # 初始化\n    def __init__(self):\n        self.userAgent = DEFAULT_USER_AGENT\n        self.headers = {'User-Agent': self.userAgent}\n        self.timeout = DEFAULT_TIMEOUT\n        self.itemDetails = dict()  # 商品信息：分类id、商家id\n        self.username = 'jd'\n        self.isLogin = False\n        self.password = None\n        self.sess = requests.session()\n        try:\n            self.loadCookies()\n        except Exception:\n            pass\n\n    ############## 登录相关 #############\n    # 保存 cookie\n    def saveCookies(self):\n        cookiesFile = os.path.join(\n            absPath, './cookies/{0}.cookies'.format(self.username))\n        directory = os.path.dirname(cookiesFile)\n        if not os.path.exists(directory):\n            os.makedirs(directory)\n        with open(cookiesFile, 'wb') as f:\n            pickle.dump(self.sess.cookies, f)\n\n    # 加载 cookie\n    def loadCookies(self):\n        cookiesFile = os.path.join(\n            absPath, './cookies/{0}.cookies'.format(self.username))\n        with open(cookiesFile, 'rb') as f:\n            local_cookies = pickle.load(f)\n        self.sess.cookies.update(local_cookies)\n        self.isLogin = self._validateCookies()\n\n    # 验证 cookie\n    def _validateCookies(self):\n        \"\"\"\n        通过访问用户订单列表页进行判断：若未登录，将会重定向到登陆页面。\n        :return: cookies是否有效 True/False\n        \"\"\"\n        url = 'https://order.jd.com/center/list.action'\n        payload = {\n            'rid': str(int(time.time() * 1000)),\n        }\n        try:\n            resp = self.sess.get(url=url, params=payload,\n                                 allow_redirects=False)\n            if self.respStatus(resp):\n                return True\n        except Exception as e:\n            return False\n\n        self.sess = requests.session()\n        return False\n\n    # 获取登录页\n    def getLoginPage(self):\n        url = \"https://passport.jd.com/new/login.aspx\"\n        page = self.sess.get(url, headers=self.headers)\n        return page\n\n    # 获取登录二维码\n    def getQRcode(self):\n        url = 'https://qr.m.jd.com/show'\n        payload = {\n            'appid': 133,\n            'size': 147,\n            't': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.userAgent,\n            'Referer': 'https://passport.jd.com/new/login.aspx',\n        }\n        resp = self.sess.get(url=url, headers=headers, params=payload)\n\n        if not self.respStatus(resp):\n            return None\n\n        return resp.content\n\n    # 获取Ticket\n    def getQRcodeTicket(self):\n        url = 'https://qr.m.jd.com/check'\n        payload = {\n            'appid': '133',\n            'callback': 'jQuery{}'.format(random.randint(1000000, 9999999)),\n            'token': self.sess.cookies.get('wlfstk_smdl'),\n            '_': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.userAgent,\n            'Referer': 'https://passport.jd.com/new/login.aspx',\n        }\n        resp = self.sess.get(url=url, headers=headers, params=payload)\n\n        if not self.respStatus(resp):\n            return False\n\n        respJson = self.parseJson(resp.text)\n        if respJson['code'] != 200:\n            return None\n        else:\n            return respJson['ticket']\n\n    # 验证Ticket\n    def validateQRcodeTicket(self, ticket):\n        url = 'https://passport.jd.com/uc/qrCodeTicketValidation'\n        headers = {\n            'User-Agent': self.userAgent,\n            'Referer': 'https://passport.jd.com/uc/login?ltype=logout',\n        }\n        resp = self.sess.get(url=url, headers=headers, params={'t': ticket})\n\n        if not self.respStatus(resp):\n            return False\n\n        respJson = json.loads(resp.text)\n        if respJson['returnCode'] == 0:\n            return True\n        else:\n            return False\n\n    ############## 商品方法 #############\n    # 获取商品详情信息\n    def getItemDetail(self, skuId, skuNum=1, areaId=1):\n        \"\"\" 查询商品详情\n        :param skuId\n        :return 商品信息（下单模式、库存）\n        \"\"\"\n        url = 'https://item-soa.jd.com/getWareBusiness'\n        payload = {\n            'skuId': skuId,\n            'area': areaId,\n            'num': skuNum\n        }\n        resp = requests.get(url=url, params=payload, headers=self.headers)\n        return resp\n\n    def fetchItemDetail(self, skuId):\n        \"\"\" 解析商品信息\n        :param skuId\n        \"\"\"\n        resp = self.getItemDetail(skuId).json()\n        shopId = resp['shopInfo']['shop']['shopId']\n        detail = dict(venderId=shopId)\n        if 'YuShouInfo' in resp:\n            detail['yushouUrl'] = resp['YuShouInfo']['url']\n        if 'miaoshaInfo' in resp:\n            detail['startTime'] = resp['miaoshaInfo']['startTime']\n            detail['endTime'] = resp['miaoshaInfo']['endTime']\n        self.itemDetails[skuId] = detail\n\n    ############## 库存方法 #############\n    def getItemStock(self, skuId, skuNum, areaId):\n        \"\"\"获取单个商品库存状态\n        :param skuId: 商品id\n        :param num: 商品数量\n        :param areadId: 地区id\n        :return: 商品是否有货 True/False\n        \"\"\"\n        resp = self.getItemDetail(skuId, skuNum, areaId).json()\n        return 'stockInfo' in resp and resp['stockInfo']['isStock']\n\n    ############## 购物车相关 #############\n\n    def uncheckCartAll(self):\n        \"\"\" 取消所有选中商品\n        return 购物车信息\n        \"\"\"\n        url = 'https://api.m.jd.com/api'\n\n        headers = {\n            'User-Agent': self.userAgent,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'origin': 'https://cart.jd.com',\n            'referer': 'https://cart.jd.com'\n        }\n\n        data = {\n            'functionId': 'pcCart_jc_cartUnCheckAll',\n            'appid': 'JDC_mall_cart',\n            'body': '{\"serInfo\":{\"area\":\"\",\"user-key\":\"\"}}',\n            'loginType': 3\n        }\n\n        resp = self.sess.post(url=url, headers=headers, data=data)\n\n        # return self.respStatus(resp) and resp.json()['success']\n        return resp\n\n    def addCartSku(self, skuId, skuNum):\n        \"\"\" 加入购入车\n        skuId 商品sku\n        skuNum 购买数量\n        retrun 是否成功\n        \"\"\"\n        url = 'https://api.m.jd.com/api'\n\n        headers = {\n            'User-Agent': self.userAgent,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'origin': 'https://cart.jd.com',\n            'referer': 'https://cart.jd.com'\n        }\n\n        data = {\n            'functionId': 'pcCart_jc_cartAdd',\n            'appid': 'JDC_mall_cart',\n            'body': '{\\\"operations\\\":[{\\\"carttype\\\":1,\\\"TheSkus\\\":[{\\\"Id\\\":\\\"' + skuId + '\\\",\\\"num\\\":' + str(skuNum) + '}]}]}',\n            'loginType': 3\n        }\n\n        resp = self.sess.post(url=url, headers=headers, data=data)\n\n        return self.respStatus(resp) and resp.json()['success']\n\n    def changeCartSkuCount(self, skuId, skuUid, skuNum, areaId):\n        \"\"\" 修改购物车商品数量\n        skuId 商品sku\n        skuUid 商品用户关系\n        skuNum 购买数量\n        retrun 是否成功\n        \"\"\"\n        url = 'https://api.m.jd.com/api'\n\n        headers = {\n            'User-Agent': self.userAgent,\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'origin': 'https://cart.jd.com',\n            'referer': 'https://cart.jd.com'\n        }\n\n        body = '{\\\"operations\\\":[{\\\"TheSkus\\\":[{\\\"Id\\\":\\\"'+skuId+'\\\",\\\"num\\\":'+str(\n            skuNum)+',\\\"skuUuid\\\":\\\"'+skuUid+'\\\",\\\"useUuid\\\":false}]}],\\\"serInfo\\\":{\\\"area\\\":\\\"'+areaId+'\\\"}}'\n        data = {\n            'functionId': 'pcCart_jc_changeSkuNum',\n            'appid': 'JDC_mall_cart',\n            'body': body,\n            'loginType': 3\n        }\n\n        resp = self.sess.post(url=url, headers=headers, data=data)\n\n        return self.respStatus(resp) and resp.json()['success']\n\n    def prepareCart(self, skuId, skuNum, areaId):\n        \"\"\" 下单前准备购物车\n        1 取消全部勾选（返回购物车信息）\n        2 已在购物车则修改商品数量\n        3 不在购物车则加入购物车\n        skuId 商品sku\n        skuNum 商品数量\n        return True/False\n        \"\"\"\n        resp = self.uncheckCartAll()\n        respObj = resp.json()\n        if not self.respStatus(resp) or not respObj['success']:\n            raise Exception('购物车取消勾选失败')\n\n        # 检查商品是否已在购物车\n        cartInfo = respObj['resultData']['cartInfo']\n        if not cartInfo:\n            # 购物车为空 直接加入\n            return self.addCartSku(skuId, skuNum)\n\n        venders = cartInfo['vendors']\n\n        for vender in venders:\n            # if str(vender['vendorId']) != self.itemDetails[skuId]['vender_id']:\n            #     continue\n            items = vender['sorted']\n            for item in items:\n                if str(item['item']['Id']) == skuId:\n                    # 在购物车中 修改数量\n                    return self.changeCartSkuCount(skuId, item['item']['skuUuid'], skuNum, areaId)\n        # 不在购物车中\n        return self.addCartSku(skuId, skuNum)\n\n    ############## 订单相关 #############\n\n    def trySubmitOrder(self, skuId, skuNum, areaId, retry=3, interval=5):\n        \"\"\"提交订单\n        :return: 订单提交结果 True/False\n        \"\"\"\n        itemDetail = self.itemDetails[skuId]\n        isYushou = False\n        if 'yushouUrl' in itemDetail:\n            self.getPreSallCheckoutPage(skuId, skuNum)\n            isYushou = True\n        else:\n            self.prepareCart(skuId, skuNum, areaId)\n            self.getCheckoutPage()\n\n        for i in range(1, retry + 1):\n            ret, msg = self.submitOrder(isYushou)\n            if ret:\n                return True\n            else:\n                time.sleep(interval)\n        return False\n\n    def submitOrderWitchTry(self, retry=3, interval=4):\n        \"\"\"提交订单，并且带有重试功能\n        :param retry: 重试次数\n        :param interval: 重试间隔\n        :return: 订单提交结果 True/False\n        \"\"\"\n        for i in range(1, retry + 1):\n            self.getCheckoutPage()\n            sumbmitSuccess, msg = self.submitOrder()\n            if sumbmitSuccess:\n                return True\n            else:\n                if i < retry:\n                    time.sleep(interval)\n        return False\n\n    def getCheckoutPage(self):\n        \"\"\"获取订单结算页面信息\n        :return: 结算信息 dict\n        \"\"\"\n        url = 'http://trade.jd.com/shopping/order/getOrderInfo.action'\n        # url = 'https://cart.jd.com/gotoOrder.action'\n        payload = {\n            'rid': str(int(time.time() * 1000)),\n        }\n        headers = {\n            'User-Agent': self.userAgent,\n            'Referer': 'https://cart.jd.com/cart',\n        }\n        try:\n            resp = self.sess.get(url=url, params=payload, headers=headers)\n            if not self.respStatus(resp):\n                return\n\n            html = etree.HTML(resp.text)\n            self.eid = html.xpath(\"//input[@id='eid']/@value\")\n            self.fp = html.xpath(\"//input[@id='fp']/@value\")\n            self.risk_control = html.xpath(\"//input[@id='riskControl']/@value\")\n            self.track_id = html.xpath(\"//input[@id='TrackID']/@value\")\n\n            order_detail = {\n                # remove '寄送至： ' from the begin\n                'address': html.xpath(\"//span[@id='sendAddr']\")[0].text[5:],\n                # remove '收件人:' from the begin\n                'receiver':  html.xpath(\"//span[@id='sendMobile']\")[0].text[4:],\n                # remove '￥' from the begin\n                'total_price':  html.xpath(\"//span[@id='sumPayPriceId']\")[0].text[1:],\n                'items': []\n            }\n            return order_detail\n        except Exception as e:\n            return\n\n    def getPreSallCheckoutPage(self, skuId, skuNum=1):\n        \"\"\"获取预售商品结算页面信息\n        :return: 结算信息 dict\n        \"\"\"\n        url = 'https://cart.jd.com/cart/dynamic/gateForSubFlow.action'\n        # url = 'https://cart.jd.com/gotoOrder.action'\n        payload = {\n            'wids': skuId,\n            'nums': skuNum,\n            'subType': 32\n        }\n        headers = {\n            'User-Agent': self.userAgent,\n            'Referer': 'https://cart.jd.com/cart',\n        }\n        try:\n            resp = self.sess.get(url=url, params=payload, headers=headers)\n            if not self.respStatus(resp):\n                return\n\n            html = etree.HTML(resp.text)\n            self.eid = html.xpath(\"//input[@id='eid']/@value\")\n            self.fp = html.xpath(\"//input[@id='fp']/@value\")\n            self.risk_control = html.xpath(\"//input[@id='riskControl']/@value\")\n            self.track_id = html.xpath(\"//input[@id='TrackID']/@value\")\n            order_detail = {\n                # remove '寄送至： ' from the begin\n                'address': html.xpath(\"//span[@class='addr-info']\")[0].text,\n                # remove '收件人:' from the begin\n                'receiver':  html.xpath(\"//span[@class='addr-name']\")[0].text,\n            }\n            return order_detail\n        except Exception as e:\n            return\n\n    def submitOrder(self, isYushou=False):\n        \"\"\"提交订单\n        :return: True/False 订单提交结果\n        \"\"\"\n        url = 'https://trade.jd.com/shopping/order/submitOrder.action'\n        # js function of submit order is included in https://trade.jd.com/shopping/misc/js/order.js?r=2018070403091\n\n        data = {\n            'overseaPurchaseCookies': '',\n            'vendorRemarks': '[]',\n            'submitOrderParam.sopNotPutInvoice': 'false',\n            'submitOrderParam.trackID': 'TestTrackId',\n            'submitOrderParam.ignorePriceChange': '0',\n            'submitOrderParam.btSupport': '0',\n            'riskControl': self.risk_control,\n            'submitOrderParam.isBestCoupon': 1,\n            'submitOrderParam.jxj': 1,\n            'submitOrderParam.trackId': self.track_id,\n            'submitOrderParam.eid': self.eid,\n            'submitOrderParam.fp': self.fp,\n            'submitOrderParam.needCheck': 1,\n        }\n\n        if isYushou:\n            data['submitOrderParam.needCheck'] = 1\n            data['preSalePaymentTypeInOptional'] = 2\n            data['submitOrderParam.payType4YuShou'] = 2\n\n        # add payment password when necessary\n        paymentPwd = self.password\n        if paymentPwd:\n            data['submitOrderParam.payPassword'] = ''.join(\n                ['u3' + x for x in paymentPwd])\n\n        headers = {\n            'User-Agent': self.userAgent,\n            'Host': 'trade.jd.com',\n            'Referer': 'http://trade.jd.com/shopping/order/getOrderInfo.action',\n        }\n\n        try:\n            resp = self.sess.post(url=url, data=data, headers=headers)\n            respJson = json.loads(resp.text)\n\n            if respJson.get('success'):\n                orderId = respJson.get('orderId')\n                return True, orderId\n            else:\n                message, result_code = respJson.get(\n                    'message'), respJson.get('resultCode')\n                if result_code == 0:\n                    self._saveInvoice()\n                    message = message + '(下单商品可能为第三方商品，将切换为普通发票进行尝试)'\n                elif result_code == 60077:\n                    message = message + '(可能是购物车为空 或 未勾选购物车中商品)'\n                elif result_code == 60123:\n                    message = message + '(需要在config.ini文件中配置支付密码)'\n                return False, message\n        except Exception as e:\n            return False, e\n\n    def _saveInvoice(self):\n        \"\"\"下单第三方商品时如果未设置发票，将从电子发票切换为普通发票\n        http://jos.jd.com/api/complexTemplate.htm?webPamer=invoice&groupName=%E5%BC%80%E6%99%AE%E5%8B%92%E5%85%A5%E9%A9%BB%E6%A8%A1%E5%BC%8FAPI&id=566&restName=jd.kepler.trade.submit&isMulti=true\n        :return:\n        \"\"\"\n        url = 'https://trade.jd.com/shopping/dynamic/invoice/saveInvoice.action'\n        data = {\n            \"invoiceParam.selectedInvoiceType\": 1,\n            \"invoiceParam.companyName\": \"个人\",\n            \"invoiceParam.invoicePutType\": 0,\n            \"invoiceParam.selectInvoiceTitle\": 4,\n            \"invoiceParam.selectBookInvoiceContent\": \"\",\n            \"invoiceParam.selectNormalInvoiceContent\": 1,\n            \"invoiceParam.vatCompanyName\": \"\",\n            \"invoiceParam.code\": \"\",\n            \"invoiceParam.regAddr\": \"\",\n            \"invoiceParam.regPhone\": \"\",\n            \"invoiceParam.regBank\": \"\",\n            \"invoiceParam.regBankAccount\": \"\",\n            \"invoiceParam.hasCommon\": \"true\",\n            \"invoiceParam.hasBook\": \"false\",\n            \"invoiceParam.consigneeName\": \"\",\n            \"invoiceParam.consigneePhone\": \"\",\n            \"invoiceParam.consigneeAddress\": \"\",\n            \"invoiceParam.consigneeProvince\": \"请选择：\",\n            \"invoiceParam.consigneeProvinceId\": \"NaN\",\n            \"invoiceParam.consigneeCity\": \"请选择\",\n            \"invoiceParam.consigneeCityId\": \"NaN\",\n            \"invoiceParam.consigneeCounty\": \"请选择\",\n            \"invoiceParam.consigneeCountyId\": \"NaN\",\n            \"invoiceParam.consigneeTown\": \"请选择\",\n            \"invoiceParam.consigneeTownId\": 0,\n            \"invoiceParam.sendSeparate\": \"false\",\n            \"invoiceParam.usualInvoiceId\": \"\",\n            \"invoiceParam.selectElectroTitle\": 4,\n            \"invoiceParam.electroCompanyName\": \"undefined\",\n            \"invoiceParam.electroInvoiceEmail\": \"\",\n            \"invoiceParam.electroInvoicePhone\": \"\",\n            \"invokeInvoiceBasicService\": \"true\",\n            \"invoice_ceshi1\": \"\",\n            \"invoiceParam.showInvoiceSeparate\": \"false\",\n            \"invoiceParam.invoiceSeparateSwitch\": 1,\n            \"invoiceParam.invoiceCode\": \"\",\n            \"invoiceParam.saveInvoiceFlag\": 1\n        }\n        headers = {\n            'User-Agent': self.userAgent,\n            'Referer': 'https://trade.jd.com/shopping/dynamic/invoice/saveInvoice.action',\n        }\n        self.sess.post(url=url, data=data, headers=headers)\n\n    def parseJson(self, s):\n        begin = s.find('{')\n        end = s.rfind('}') + 1\n        return json.loads(s[begin:end])\n\n    def respStatus(self, resp):\n        if resp.status_code != requests.codes.OK:\n            return False\n        return True\n\n\nif __name__ == '__main__':\n\n    skuId = '100015253059'\n    areaId = '1_2901_55554_0'\n    skuNum = 1\n\n    session = Session()\n    print(session.getItemDetail(skuId, skuNum, areaId).text)\n"
        },
        {
          "name": "QRcode.png",
          "type": "blob",
          "size": 0.755859375,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.908203125,
          "content": "<div id=\"top\"></div>\n\n<h1 align=\"center\">\n<img src=\"https://img.shields.io/github/contributors/zas023/Jdbuyer.svg?style=for-the-badge\" />\n<img src=\"https://img.shields.io/github/stars/zas023/Jdbuyer.svg?style=for-the-badge\" />\n<img src=\"https://img.shields.io/github/issues/zas023/Jdbuyer.svg?style=for-the-badge\" />\n<img src=\"https://img.shields.io/badge/platform-windows%20%7C%20macos-green?style=for-the-badge\" />\n<img src=\"https://img.shields.io/badge/license-GLP-important?style=for-the-badge\" />\n</h1>\n\n\n<!-- PROJECT LOGO -->\n<br />\n<div align=\"center\">\n  <a href=\"https://github.com/PlayCover/PlayCover\">\n    <img src=\"logo.ico\" alt=\"Logo\" width=\"100\" height=\"100\">\n  </a>\n\n  <h3 align=\"center\">Jd小猪手</h3>\n\n  <p align=\"center\">\n    一款支持京东自动下单的小工具。\n    <br />\n    <br />\n  </p>\n</div>\n\n## 1 关于项目\n\n欢迎使用京东小猪手，当您在京东上想要购买的商品无货时，小助手可以帮助您全天候监听商品库存，并在有货时第一时间自动尝试下单，且下单成功后支持微信通知触达。\n\n![](./assest/shootscreen.mac.png)\n\n📢**注意**：由于货源有限，监听到货源后并不能保证一定下单成功，只能保证让你和全国黄牛站在同一起跑线上，剩下的交给奇迹。\n\n### 1.1 ChangeList\n\n- 2022-10-29\n\n1. 新增预售商品定金下单模式\n2. 切换库存查询方式（注意控制速度）\n\n## 2 食用教程\n\n目前该项目支持两种 **Shell 脚本** 和 **GUI 图形界面** 两种运行模式，目前 Shell 模式支持日志和微信通知，但还需一些额外配置，可根据自身条件选择启动方式。\n\n### 2.1 Shell 脚本\n\n1. 安装运行环境\n\n- [Python](https://www.python.org/)\n\n2. 安装第三方库\n\n``` shell\npip install -r requirements.txt\n# or \npip3 install -r requirements.txt\n```\n\n3. 修改配置\n\n进入项目目录，找到 `config.ini` 文件，按照其中说明修改对于配置。\n\n4. 运行脚本\n\n修改项目主文件 `JdBuyer.py` 最后部分中 `skuId` 和 `areaId`。\n*其余参数字请按注释自行选择修改*\n\n然后运行程序：\n``` python \npython JdBuyer.py\n# or\npython JdBuyer.py\n```\n\n### 2.2 GUI 图形界面\n\n目前可支持 windows 和 macos，请到 [release](https://github.com/zas023/JdBuyer/releases) 下载对于文件：\n\n- windwos 下载 JdBuyerApp.zip，解压后双击运行其中可执行文件即可；\n\n- macos 下载 JdBuyerApp.app，下载后直接双击运行即可。\n\n**1. 如何配置**\n\n运行程序后，可以看到一共有一下五个配置：\n\n|参数名称|是否必填|说明|\n|--|--|--|\n|商品SKU|是|京东商品详情页链接中可以找到,<br>如 https://item.jd.com/100015253061.html|\n|地区ID|是|下单地址所在的地区,<br>可以在工程 [area_id](./area_id) 文件夹中找到|\n|购买商品数量|是|默认1|\n|库存查询间隔|是|监听库存的时间间隔，默认3秒|\n|支付密码|否|如需使用虚拟资产，如京豆、E卡等|\n\n*注：所有配置均只会保存本地。*\n\n**2. 如何运行**\n\n当完成以上配置后，点击【开始】按钮即可，如果当前是未登陆状态，会自动弹出登陆二维码等待你打开京东APP扫码登录，登陆成功后会自动开始执行任务。\n\n*注：如长时间未登录提示二维码过期，点击【结束】按钮，重新【开始】即可。*\n\n### 2.3 视频教程\n\n[B站传送门，记得一键三连哦！](https://www.bilibili.com/video/BV1pe4y1e7ty)\n\n## 3 Todo\n- [x] 支持扫码登陆\n- [ ] 登陆状态保活\n- [x] 开发图形界面\n\n# 免责声明\n\n本项目所用资源均源自网络，如有侵犯您的权益，请来信告知，将立即予以处理。\n\n任何以任何方式查看此项目的人或直接或间接使用该项目任何使用者都应仔细阅读此声明。一旦使用并复制了任何相关脚本或Script项目的规则，则视为您已接受此免责声明。\n\n您必须在下载后的24小时内从计算机或手机中完全删除以上内容。\n\n"
        },
        {
          "name": "area_id",
          "type": "tree",
          "content": null
        },
        {
          "name": "assest",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.ini",
          "type": "blob",
          "size": 0.9443359375,
          "content": "[account]\n# 账号名称，默认为 jd\n# 随意，用于本地保存账号信息，方便多用户登录\nusername = ''\n\n# 支付密码\n# 如果你的账户中有可用的京券（注意不是东券）或 在上次购买订单中使用了京豆，\n# 那么京东可能会在下单时自动选择京券支付 或 自动勾选京豆支付。\n# 此时下单会要求输入六位数字的支付密码。请在下方配置你的支付密码，如 123456 。\n# 如果没有上述情况，下方请留空。\npayment_pwd = \n\n[config]\n# 查询库存请求超时(秒)，可选配置，默认10秒\ntimeout =\n\n# 是否使用随机 useragent，默认为 false\nrandom_useragent = false\n\n[messenger]\n# 使用了Server酱的推送服务\n# 如果想开启下单成功后消息推送，则将 enable 设置为 true，默认为 false 不开启推送\n# 开启消息推送必须填入 sckey，如何获取请参考 http://sc.ftqq.com/3.version。感谢Server酱～\nenable = false\nsckey = "
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.09765625,
          "content": "{\n    \"skuId\": \"100015253061\",\n    \"areaId\": \"1_2901_4135\",\n    \"count\": 1,\n    \"stockInterval\": 3\n}"
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 0.755859375,
          "content": "# -*- coding: utf-8 -*-\nimport os\n\nimport configparser\n\n\nclass Config(object):\n\n    def __init__(self, config_file='config.ini'):\n        self._path = os.path.join(os.getcwd(), config_file)\n        if not os.path.exists(self._path):\n            raise FileNotFoundError(\"No such file: config.ini\")\n        self._config = configparser.ConfigParser()\n        self._config.read(self._path, encoding='utf-8')\n\n    def get(self, section, name, strip_blank=True, strip_quote=True):\n        s = self._config.get(section, name)\n        if strip_blank:\n            s = s.strip()\n        if strip_quote:\n            s = s.strip('\"').strip(\"'\")\n\n        return s\n\n    def getboolean(self, section, name):\n        return self._config.getboolean(section, name)\n\n\nglobal_config = Config()\n"
        },
        {
          "name": "exception.py",
          "type": "blob",
          "size": 0.1943359375,
          "content": "#!/usr/bin/env python\n# -*- encoding=utf8 -*-\nfrom log import logger\n\n\nclass JDException(Exception):\n\n    def __init__(self, message):\n        super().__init__(message)\n        logger.error(message)\n"
        },
        {
          "name": "log.py",
          "type": "blob",
          "size": 0.8056640625,
          "content": "#!/usr/bin/env python\n# -*- encoding=utf8 -*-\nimport logging\nimport logging.handlers\nimport os\nfrom time import strftime\n\nLOG_FILENAME = strftime(\"logs\\jd-buyer_%Y_%m_%d_%H.log\")\n\nlogger = logging.getLogger()\n\n\ndef set_logger():\n    path = os.path.dirname(os.getcwd()+ '\\\\logs\\\\') # 判断日志目录\n    if not os.path.exists(path):\n        os.makedirs(path)\n    logger.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')\n\n    console_handler = logging.StreamHandler()\n    console_handler.setFormatter(formatter)\n    logger.addHandler(console_handler)\n\n    file_handler = logging.handlers.RotatingFileHandler(\n        LOG_FILENAME, maxBytes=10485760, backupCount=5, encoding=\"utf-8\")\n    file_handler.setFormatter(formatter)\n    logger.addHandler(file_handler)\n\n\nset_logger()\n"
        },
        {
          "name": "logo.ico",
          "type": "blob",
          "size": 272.060546875,
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.048828125,
          "content": "lxml==4.9.1\npycryptodome==3.15.0\nrequests==2.28.0\n"
        },
        {
          "name": "testSession.py",
          "type": "blob",
          "size": 0.25,
          "content": "from JdSession import Session\n\nif __name__ == '__main__':\n\n    skuId = '10032192754328'\n    skuNum = 1\n    areaId = '1_2901_4135'\n\n    sess = Session()\n    sess.item_details[skuId] = sess._get_item_detail(skuId)\n\n    sess.prepareCart(skuId, skuNum, areaId)"
        },
        {
          "name": "timer.py",
          "type": "blob",
          "size": 0.482421875,
          "content": "# -*- coding:utf-8 -*-\nimport time\nfrom datetime import datetime\n\n\nclass Timer(object):\n\n    def __init__(self, buyTime, sleepInterval=0.5):\n\n        # '2018-09-28 22:45:50'\n        self.buy_time = datetime.strptime(buyTime, \"%Y-%m-%d %H:%M:%S\")\n        self.sleepInterval = sleepInterval\n\n    def start(self):\n        now_time = datetime.now\n        while True:\n            if now_time() >= self.buy_time:\n                break\n            else:\n                time.sleep(self.sleepInterval)\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 10.7958984375,
          "content": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport datetime\nimport json\nimport os\nimport random\nimport re\nfrom base64 import b64encode\n\nimport requests\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5\n\nfrom log import logger\n\nRSA_PUBLIC_KEY = \"\"\"-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDC7kw8r6tq43pwApYvkJ5lalja\nN9BZb21TAIfT/vexbobzH7Q8SUdP5uDPXEBKzOjx2L28y7Xs1d9v3tdPfKI2LR7P\nAzWBmDMn8riHrDDNpUpJnlAGUqJG9ooPn8j7YNpcxCa1iybOlc2kEhmJn5uwoanQ\nq+CA6agNkqly2H4j6wIDAQAB\n-----END PUBLIC KEY-----\"\"\"\n\nDEFAULT_TIMEOUT = 10\n\nDEFAULT_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'\n\nUSER_AGENTS = [\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.4; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2225.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2224.3 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.93 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 4.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.67 Safari/537.36\",\n    \"Mozilla/5.0 (X11; OpenBSD i386) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1944.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.3319.102 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2309.372 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.2117.157 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.137 Safari/4E423F\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.116 Safari/537.36 Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10\",\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.517 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1664.3 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1664.3 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1623.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.17 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.62 Safari/537.36\",\n    \"Mozilla/5.0 (X11; CrOS i686 4319.74.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.2 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1468.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1467.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1464.0 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1500.55 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.93 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.90 Safari/537.36\",\n    \"Mozilla/5.0 (X11; NetBSD) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36\",\n    \"Mozilla/5.0 (X11; CrOS i686 3912.101.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.60 Safari/537.17\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1309.0 Safari/537.17\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.14 (KHTML, like Gecko) Chrome/24.0.1292.0 Safari/537.14\"\n]\n\ndef send_wechat(message, desp, sckey):\n    if not message.strip():\n        logger.error('Text of message is empty!')\n        return\n\n    now_time = str(datetime.datetime.now())\n    desp = '[{0}]'.format(now_time) if not desp else '{0} [{1}]'.format(desp, now_time)\n\n    try:\n        resp = requests.get(\n            'https://sc.ftqq.com/{}.send?text={}&desp={}'.format(sckey, message, desp)\n        )\n        resp_json = json.loads(resp.text)\n        if resp_json['data']['errno'] == 0:\n            logger.info('Message sent successfully [text: %s, desp: %s]', message, desp)\n        else:\n            logger.error('Fail to send message, reason: %s', resp.text)\n    except requests.exceptions.RequestException as req_error:\n        logger.error('Request error: %s', req_error)\n    except Exception as e:\n        logger.error('Fail to send message [text: %s, desp: %s]: %s', message, desp, e)\n\n\n\ndef encrypt_pwd(password, public_key=RSA_PUBLIC_KEY):\n    rsa_key = RSA.importKey(public_key)\n    encryptor = Cipher_pkcs1_v1_5.new(rsa_key)\n    cipher = b64encode(encryptor.encrypt(password.encode('utf-8')))\n    return cipher.decode('utf-8')\n\n\ndef encrypt_payment_pwd(payment_pwd):\n    return ''.join(['u3' + x for x in payment_pwd])\n\n\ndef response_status(resp):\n    if resp.status_code != requests.codes.OK:\n        print('Status: %u, Url: %s' % (resp.status_code, resp.url))\n        return False\n    return True\n\n\ndef open_image(image_file):\n    if os.name == \"nt\":\n        os.system('start ' + image_file)  # for Windows\n    else:\n        if os.uname()[0] == \"Linux\":\n            if \"deepin\" in os.uname()[2]:\n                os.system(\"deepin-image-viewer \" + image_file)  # for deepin\n            else:\n                os.system(\"eog \" + image_file)  # for Linux\n        else:\n            os.system(\"open \" + image_file)  # for Mac\n\n\ndef save_image(resp, image_file):\n    with open(image_file, 'wb') as f:\n        f.write(resp)\n\n\ndef parse_json(s):\n    begin = s.find('{')\n    end = s.rfind('}') + 1\n    return json.loads(s[begin:end])\n\n\ndef get_tag_value(tag, key='', index=0):\n    if key:\n        value = tag[index].get(key)\n    else:\n        value = tag[index].text\n    return value.strip(' \\t\\r\\n')\n\n\ndef parse_items_dict(d):\n    result = ''\n    for index, key in enumerate(d):\n        if index < len(d) - 1:\n            result = result + '{0} x {1}, '.format(key, d[key])\n        else:\n            result = result + '{0} x {1}'.format(key, d[key])\n    return result\n\n\ndef parse_sku_id(sku_ids):\n    \"\"\"将商品id字符串解析为字典\n\n    商品id字符串采用英文逗号进行分割。\n    可以在每个id后面用冒号加上数字，代表该商品的数量，如果不加数量则默认为1。\n\n    例如：\n    输入  -->  解析结果\n    '123456' --> {'123456': '1'}\n    '123456,123789' --> {'123456': '1', '123789': '1'}\n    '123456:1,123789:3' --> {'123456': '1', '123789': '3'}\n    '123456:2,123789' --> {'123456': '2', '123789': '1'}\n\n    :param sku_ids: 商品id字符串\n    :return: dict\n    \"\"\"\n    if isinstance(sku_ids, dict):  # 防止重复解析\n        return sku_ids\n\n    sku_id_list = list(filter(bool, map(lambda x: x.strip(), sku_ids.split(','))))\n    result = dict()\n    for item in sku_id_list:\n        if ':' in item:\n            sku_id, count = map(lambda x: x.strip(), item.split(':'))\n            result[sku_id] = count\n        else:\n            result[item] = '1'\n    return result\n\n\ndef parse_area_id(area):\n    \"\"\"解析地区id字符串：将分隔符替换为下划线 _\n    :param area: 地区id字符串（使用 _ 或 - 进行分割），如 12_904_3375 或 12-904-3375\n    :return: 解析后字符串\n    \"\"\"\n    area_id_list = list(map(lambda x: x.strip(), re.split('_|-', area)))\n    area_id_list.extend((4 - len(area_id_list)) * ['0'])\n    return '_'.join(area_id_list)\n\n\ndef split_area_id(area):\n    \"\"\"将地区id字符串按照下划线进行切割，构成数组。数组长度不满4位则用'0'进行填充。\n    :param area: 地区id字符串（使用 _ 或 - 进行分割），如 12_904_3375 或 12-904-3375\n    :return: list\n    \"\"\"\n    area_id_list = list(map(lambda x: x.strip(), re.split('_|-', area)))\n    area_id_list.extend((4 - len(area_id_list)) * ['0'])\n    return area_id_list\n\n\ndef get_random_useragent():\n    \"\"\"生成随机的UserAgent\n    :return: UserAgent字符串\n    \"\"\"\n    return random.choice(USER_AGENTS)\n"
        }
      ]
    }
  ]
}