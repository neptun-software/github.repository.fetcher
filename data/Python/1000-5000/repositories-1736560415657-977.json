{
  "metadata": {
    "timestamp": 1736560415657,
    "page": 977,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "python-twitter-tools/twitter",
      "stars": 3218,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1123046875,
          "content": "[run]\nrelative_files = True\n\n[report]\nomit =\n    */python?.?/*\n    */pypy/*\n    */site-packages/nose/*\n    tests/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7314453125,
          "content": "## Python\ntwitter.egg-info\ntwitter3.egg-info\n*.bak\n*.orig\n*.rej\n*~\n.idea\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.8955078125,
          "content": "Developers:\nMike Verdone <mike.verdone@gmail.com>\nHatem Nassrat <hnassrat@gmail.com>\nWes Devauld <wes@devauld.ca>\n\nContributors:\nHoracio Duran <horacio.duran@gmail.com> (utf-8 patch for IRC bot)\nRainer Michael Schmid (bugfix: crash when redirecting output to a file in 1.1)\nAnders Sandvig (cmdline -l, -d, and -t flags)\nMark Hammond (OAuth support in API)\nPrashant Pawar (IRC bot multi-channel support)\nDavid Bittencourt (python 2.3 support)\nBryan Clark (HTTP encoding bugfix, improved exception logging)\nIrfan Ahmad <http://twitter.com/erfaan> (Fixed #91 rate limit headers and #99 twitter API timeouts)\nStalkR (archiver, follow)\nMatthew Cengia <mattcen> (DM support, ISO timezone support, more API 1.1 support)\nAndrew <adonoho> (Fixed streams support for HTTP1.1 chunked answers)\nBenjamin Ooghe-Tabanou <RouxRC> (Helped fix streams support for HTTP1.1 chunked answers, added image support and more API 1.1 support)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2008 Mike Verdone\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.119140625,
          "content": "prune .github\ninclude tests/*.py\ninclude tests/*.png\nprune utils\nexclude .coveragerc\nexclude .gitignore\nexclude README.md\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 12.126953125,
          "content": "Python Twitter Tools\n====================\n\n[![Tests](https://github.com/python-twitter-tools/twitter/workflows/Tests/badge.svg)](https://github.com/python-twitter-tools/twitter/actions)\n[![Coverage Status](https://coveralls.io/repos/github/python-twitter-tools/twitter/badge.svg?branch=master)](https://coveralls.io/github/python-twitter-tools/twitter?branch=master)\n\nThe Minimalist Twitter API for Python is a Python API for Twitter,\neveryone's favorite Web 2.0 Facebook-style status updater for people\non the go.\n\nAlso included is a Twitter command-line tool for getting your friends'\ntweets and setting your own tweet from the safety and security of your\nfavorite shell and an IRC bot that can announce Twitter updates to an\nIRC channel.\n\nFor more information:\n\n * install the [package](https://pypi.org/project/twitter/) `pip install twitter`\n * import the `twitter` package and run `help()` on it\n * run `twitter -h` for command-line tool help\n\ntwitter - The Command-Line Tool\n-------------------------------\n\nThe command-line tool lets you do some awesome things:\n\n * view your tweets, recent replies, and tweets in lists\n * view the public timeline\n * follow and unfollow (leave) friends\n * various output formats for tweet information\n\nThe bottom line: type `twitter`, receive tweets.\n\ntwitterbot - The IRC Bot\n------------------------\n\nThe IRC bot is associated with a Twitter account (either your own account or an\naccount you create for the bot). The bot announces all tweets from friends\nit is following. It can be made to follow or leave friends through IRC /msg\ncommands.\n\n\n`twitter-log`\n-------------\n\n`twitter-log` is a simple command-line tool that dumps all public\ntweets from a given user in a simple text format. It is useful to get\na complete offsite backup of all your tweets. Run `twitter-log` and\nread the instructions.\n\n`twitter-archiver` and `twitter-follow`\n---------------------------------------\n\ntwitter-archiver will log all the tweets posted by any user since they\nstarted posting. twitter-follow will print a list of all of all the\nfollowers of a user (or all the users that user follows).\n\n\nProgramming with the Twitter API classes\n========================================\n\nThe `Twitter` and `TwitterStream` classes are the key to building your own\nTwitter-enabled applications.\n\n\nThe `Twitter` class\n-------------------\n\nThe minimalist yet fully featured Twitter API class.\n\nGet RESTful data by accessing members of this class. The result\nis decoded python objects (lists and dicts).\n\nThe Twitter API is documented at:\n\n**[https://developer.twitter.com/en/docs](https://developer.twitter.com/en/docs)**\n\nThe list of most accessible functions is listed at:\n\n**[https://developer.twitter.com/en/docs/api-reference-index](https://developer.twitter.com/en/docs/api-reference-index)**\n\nExamples:\n\n```python\nfrom twitter import *\n\nt = Twitter(\n    auth=OAuth(token, token_secret, consumer_key, consumer_secret))\n\n# Get your \"home\" timeline\nt.statuses.home_timeline()\n\n# Get a particular friend's timeline\nt.statuses.user_timeline(screen_name=\"boogheta\")\n\n# to pass in GET/POST parameters, such as `count`\nt.statuses.home_timeline(count=5)\n\n# to pass in the GET/POST parameter `id` you need to use `_id`\nt.statuses.show(_id=1234567890)\n\n# Update your status\nt.statuses.update(\n    status=\"Using @boogheta's sweet Python Twitter Tools.\")\n\n# Send a direct message\nt.direct_messages.events.new(\n    _json={\n        \"event\": {\n            \"type\": \"message_create\",\n            \"message_create\": {\n                \"target\": {\n                    \"recipient_id\": t.users.show(screen_name=\"boogheta\")[\"id\"]},\n                \"message_data\": {\n                    \"text\": \"I think yer swell!\"}}}})\n\n# Get the members of maxmunnecke's list \"network analysis tools\" (grab the list_id within the url) https://twitter.com/i/lists/1130857490764091392\nt.lists.members(owner_screen_name=\"maxmunnecke\", list_id=\"1130857490764091392\")\n\n# Favorite/like a status\nstatus = t.statuses.home_timeline()[0]\nif not status['favorited']:\n    t.favorites.create(_id=status['id'])\n\n# An *optional* `_timeout` parameter can also be used for API\n# calls which take much more time than normal or twitter stops\n# responding for some reason:\nt.users.lookup(\n    screen_name=','.join(A_LIST_OF_100_SCREEN_NAMES), _timeout=1)\n\n# Overriding Method: GET/POST\n# you should not need to use this method as this library properly\n# detects whether GET or POST should be used, Nevertheless\n# to force a particular method, use `_method`\nt.statuses.oembed(_id=1234567890, _method='GET')\n\n# Send images along with your tweets:\n# - first just read images from the web or from files the regular way:\nwith open(\"example.png\", \"rb\") as imagefile:\n    imagedata = imagefile.read()\n# - then upload medias one by one on Twitter's dedicated server\n#   and collect each one's id:\nt_upload = Twitter(domain='upload.twitter.com',\n    auth=OAuth(token, token_secret, consumer_key, consumer_secret))\nid_img1 = t_upload.media.upload(media=imagedata)[\"media_id_string\"]\nid_img2 = t_upload.media.upload(media=imagedata)[\"media_id_string\"]\n# - finally send your tweet with the list of media ids:\nt.statuses.update(status=\"PTT ★\", media_ids=\",\".join([id_img1, id_img2]))\n\n# Or send a tweet with an image (or set a logo/banner similarly)\n# using the old deprecated method that will probably disappear some day\nparams = {\"media[]\": imagedata, \"status\": \"PTT ★\"}\n# Or for an image encoded as base64:\nparams = {\"media[]\": base64_image, \"status\": \"PTT ★\", \"_base64\": True}\nt.statuses.update_with_media(**params)\n\n# Attach text metadata to medias sent, using the upload.twitter.com route\n# using the _json workaround to send json arguments as POST body\n# (warning: to be done before attaching the media to a tweet)\nt_upload.media.metadata.create(_json={\n  \"media_id\": id_img1,\n  \"alt_text\": { \"text\": \"metadata generated via PTT!\" }\n})\n# or with the shortcut arguments (\"alt_text\" and \"text\" work):\nt_upload.media.metadata.create(media_id=id_img1, text=\"metadata generated via PTT!\")\n\n# Alternatively, you can reuse the originally instantiated object, \n# changing the domain, that is:\nt.domain = 'upload.twitter.com'\n\n# Now you can upload the image (or images).\nid_img1 = t.media.upload(media=imagedata)['media_id_string']\nid_img2 = t.media.upload(media=imagedata)[\"media_id_string\"]\n\n# You now can reset the domain to the original one:\nt.domain = 'api.twitter.com'\n\n# And you can send the update:\nt.statuses.update(status=\"PTT ★\", media_ids=\",\".join([id_img1, id_img2]))\n\n\n```\n\nSearching Twitter:\n```python\n# Search for the latest tweets about #pycon\nt.search.tweets(q=\"#pycon\")\n\n# Search for the latest tweets about #pycon, using [extended mode](https://developer.twitter.com/en/docs/tweets/tweet-updates)\nt.search.tweets(q=\"#pycon\", tweet_mode='extended')\n```\n\n\nRetrying after reaching the API rate limit\n------------------------------------------\n\nSimply create the `Twitter` instance with the argument `retry=True`, then the\nHTTP error codes `429`, `502`, `503`, and `504` will cause a retry of the last\nrequest.\n\nIf `retry` is an integer, it defines the maximum number of retry attempts.\n\n\nUsing the data returned\n-----------------------\n\nTwitter API calls return decoded JSON. This is converted into\na bunch of Python lists, dicts, ints, and strings. For example:\n\n```python\nx = twitter.statuses.home_timeline()\n\n# The first 'tweet' in the timeline\nx[0]\n\n# The screen name of the user who wrote the first 'tweet'\nx[0]['user']['screen_name']\n```\n\nGetting raw XML data\n--------------------\n\nIf you prefer to get your Twitter data in XML format, pass\n`format=\"xml\"` to the `Twitter` object when you instantiate it:\n\n```python\ntwitter = Twitter(format=\"xml\")\n```\n\nThe output will not be parsed in any way. It will be a raw string\nof XML.\n\nThe `TwitterStream` class\n-------------------------\n\nThe `TwitterStream` object is an interface to the Twitter Stream\nAPI. This can be used pretty much the same as the `Twitter` class,\nexcept the result of calling a method will be an iterator that\nyields objects decoded from the stream. For example::\n\n```python\ntwitter_stream = TwitterStream(auth=OAuth(...))\niterator = twitter_stream.statuses.sample()\n\nfor tweet in iterator:\n    ...do something with this tweet...\n```\n\nPer default the `TwitterStream` object uses\n[public streams](https://dev.twitter.com/docs/streaming-apis/streams/public).\nIf you want to use one of the other\n[streaming APIs](https://dev.twitter.com/docs/streaming-apis), specify the URL\nmanually.\n\nThe iterator will `yield` until the TCP connection breaks. When the\nconnection breaks, the iterator yields `{'hangup': True}` (and\nraises `StopIteration` if iterated again).\n\nSimilarly, if the stream does not produce heartbeats for more than\n90 seconds, the iterator yields `{'hangup': True,\n'heartbeat_timeout': True}` (and raises `StopIteration` if\niterated again).\n\nThe `timeout` parameter controls the maximum time between\nyields. If it is nonzero, then the iterator will yield either\nstream data or `{'timeout': True}` within the timeout period. This\nis useful if you want your program to do other stuff in between\nwaiting for tweets.\n\nThe `block` parameter sets the stream to be fully non-blocking.\nIn this mode, the iterator always yields immediately. It returns\nstream data, or `None`.\n\nNote that `timeout` supercedes this argument, so it should also be\nset `None` to use this mode, and non-blocking can potentially lead\nto 100% CPU usage.\n\nTwitter `Response` Objects\n--------------------------\n\nResponse from a Twitter request. Behaves like a list or a string\n(depending on requested format), but it has a few other interesting\nattributes.\n\n`headers` gives you access to the response headers as an\n`httplib.HTTPHeaders` instance. Use `response.headers.get('h')`\nto retrieve a header.\n\nAuthentication\n--------------\n\nYou can authenticate with Twitter in three ways: NoAuth, OAuth, or\nOAuth2 (app-only). Get `help()` on these classes to learn how to use them.\n\nOAuth and OAuth2 are probably the most useful.\n\n\nWorking with OAuth\n------------------\n\nVisit the Twitter developer page and create a new application:\n\n**[https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)**\n\nThis will get you a `CONSUMER_KEY` and `CONSUMER_SECRET`.\n\nWhen users run your application they have to authenticate your app\nwith their Twitter account. A few HTTP calls to Twitter are required\nto do this. Please see the `twitter.oauth_dance` module to see how this\nis done. If you are making a command-line app, you can use the\n`oauth_dance()` function directly.\n\nPerforming the \"oauth dance\" gets you an oauth token and oauth secret\nthat authenticate the user with Twitter. You should save these for\nlater, so that the user doesn't have to do the oauth dance again.\n\n`read_token_file` and `write_token_file` are utility methods to read and\nwrite OAuth `token` and `secret` key values. The values are stored as\nstrings in the file. Not terribly exciting.\n\nFinally, you can use the `OAuth` authenticator to connect to Twitter. In\ncode it all goes like this:\n\n```python\nfrom twitter import *\n\nMY_TWITTER_CREDS = os.path.expanduser('~/.my_app_credentials')\nif not os.path.exists(MY_TWITTER_CREDS):\n    oauth_dance(\"My App Name\", CONSUMER_KEY, CONSUMER_SECRET,\n                MY_TWITTER_CREDS)\n\noauth_token, oauth_secret = read_token_file(MY_TWITTER_CREDS)\n\ntwitter = Twitter(auth=OAuth(\n    oauth_token, oauth_secret, CONSUMER_KEY, CONSUMER_SECRET))\n\n# Now work with Twitter\ntwitter.statuses.update(status='Hello, world!')\n```\n\nWorking with `OAuth2`\n---------------------\n\nTwitter only supports the application-only flow of OAuth2 for certain\nAPI endpoints. This OAuth2 authenticator only supports the application-only\nflow right now.\n\nTo authenticate with OAuth2, visit the Twitter developer page and create a new\napplication:\n\n**[https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)**\n\nThis will get you a `CONSUMER_KEY` and `CONSUMER_SECRET`.\n\nExchange your `CONSUMER_KEY` and `CONSUMER_SECRET` for a bearer token using the\n`oauth2_dance` function.\n\nFinally, you can use the `OAuth2` authenticator and your bearer token to connect\nto Twitter. In code it goes like this::\n\n```python\ntwitter = Twitter(auth=OAuth2(bearer_token=BEARER_TOKEN))\n\n# Now work with Twitter\ntwitter.search.tweets(q='keyword')\n```\n\nLicense\n=======\n\nPython Twitter Tools are released under an MIT License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.005859375,
          "content": "README"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 0.3984375,
          "content": "# Release Checklist\n\n- [ ] Get master to the appropriate code release state.\n\n- [ ] Publish release with new tag like `twitter-x.y.z`:\n      https://github.com/python-twitter-tools/twitter/releases/new\n\n- [ ] Check the tagged\n      [GitHub Actions build](https://github.com/python-twitter-tools/twitter/actions?query=workflow%3ADeploy)\n      has deployed to [PyPI](https://pypi.org/project/twitter/#history)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0078125,
          "content": "certifi\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.021484375,
          "content": "[wheel]\nuniversal = 1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.4423828125,
          "content": "from setuptools import setup, find_packages\n\nwith open(\"README\") as f:\n    long_description = f.read()\n\n\ndef local_scheme(version):\n    \"\"\"Skip the local version (eg. +xyz of 0.6.1.dev4+gdf99fe2)\n    to be able to upload to Test PyPI\"\"\"\n    return \"\"\n\nsetup(name='twitter',\n      description=\"An API and command-line toolset for Twitter (twitter.com)\",\n      long_description=long_description,\n      long_description_content_type=\"text/markdown\",\n      python_requires=\">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\",\n      # Get strings from http://pypi.python.org/pypi?%3Aaction=list_classifiers\n      classifiers=[\n          \"Development Status :: 5 - Production/Stable\",\n          \"Environment :: Console\",\n          \"Intended Audience :: End Users/Desktop\",\n          \"Natural Language :: English\",\n          \"Operating System :: OS Independent\",\n          \"Programming Language :: Python :: 2\",\n          \"Programming Language :: Python :: 2.7\",\n          \"Programming Language :: Python :: 3\",\n          \"Programming Language :: Python :: 3.7\",\n          \"Programming Language :: Python :: 3.8\",\n          \"Programming Language :: Python :: 3.9\",\n          \"Programming Language :: Python :: 3.10\",\n          \"Programming Language :: Python :: 3.11\",\n          \"Programming Language :: Python :: Implementation :: CPython\",\n          \"Programming Language :: Python :: Implementation :: PyPy\",\n          \"Topic :: Communications :: Chat :: Internet Relay Chat\",\n          \"Topic :: Internet :: WWW/HTTP :: Dynamic Content :: CGI Tools/Libraries\",\n          \"Topic :: Utilities\",\n          \"License :: OSI Approved :: MIT License\",\n          ],\n      keywords='twitter, IRC, command-line tools, web 2.0',\n      author='Mike Verdone',\n      author_email='mike.verdone+twitterapi@gmail.com',\n      url='https://mike.verdone.ca/twitter/',\n      license='MIT License',\n      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),\n      include_package_data=True,\n      zip_safe=True,\n      use_scm_version={\"local_scheme\": local_scheme},\n      setup_requires=[\"setuptools_scm\"],\n      install_requires=[\"certifi\"],\n      entry_points=\"\"\"\n      # -*- Entry points: -*-\n      [console_scripts]\n      twitter=twitter.cmdline:main\n      twitterbot=twitter.ircbot:main\n      twitter-log=twitter.logger:main\n      twitter-archiver=twitter.archiver:main\n      twitter-follow=twitter.follow:main\n      twitter-stream-example=twitter.stream_example:main\n      \"\"\",\n      )\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "twitter",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}