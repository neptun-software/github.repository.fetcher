{
  "metadata": {
    "timestamp": 1736559751696,
    "page": 460,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bulletmark/libinput-gestures",
      "stars": 3957,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0478515625,
          "content": ".idea/\n.vscode/\nREADME.html\n*.pyc\n__pycache__\n*~\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1318359375,
          "content": "# Copyright (C) 2015 Mark Blakeney. This program is distributed under\n# the terms of the GNU General Public License.\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or any\n# later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License at <http://www.gnu.org/licenses/> for more\n# details.\n\nSHELLCHECK_OPTS = -eSC2053,SC2064,SC2086,SC1117,SC2162,SC2181,SC2034,SC1090,SC2115\n\nall:\n\t@echo \"Type sudo make install|uninstall\"\n\ninstall:\n\t@./libinput-gestures-setup -d \"$(DESTDIR)\" install\n\nuninstall:\n\t@./libinput-gestures-setup -d \"$(DESTDIR)\" uninstall\n\ncheck:\n\truff check libinput-gestures internal internal-test\n\tshellcheck $(SHELLCHECK_OPTS) libinput-gestures-setup list-version-hashes libinput-dummy\n\tvermin -vv --no-tips -i libinput-gestures internal internal-test\n\ntest:\n\t@./internal-test\n\nclean:\n\trm -rf __pycache__\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.419921875,
          "content": "### LIBINPUT-GESTURES\n[![AUR](https://img.shields.io/aur/version/libinput-gestures)](https://aur.archlinux.org/packages/libinput-gestures/)\n\n[Libinput-gestures][REPO] is a utility which reads [libinput\ngestures](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html)\nfrom your touchpad and maps them to gestures you configure in a\nconfiguration file. Each gesture can be configured to activate a shell\ncommand which is typically an [_xdotool_][XDOTOOL] command to action\ndesktop/window/application keyboard combinations and commands. See the\nexamples in the provided `libinput-gestures.conf` file. My motivation\nfor creating this is to use triple swipe up/down to switch workspaces,\nand triple swipe right/left to go backwards/forwards in my browser, as\nper the default configuration.\n\nNote that [libinput does not interpret gestures for\ntouchscreens](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html#touchscreen-gestures)\nso this utility can only be used for a touchpad, not a touchscreen.\n\nThis small and simple utility is only intended to be used temporarily\nuntil GNOME and other DE's action libinput gestures natively. It parses\nthe output of the _libinput list-devices_ and _libinput debug-events_\nutilities so is a little fragile to any version changes in their output\nformat.\n\nThis utility is developed and tested on Arch linux using the GNOME 3 DE\non Xorg and Wayland. It works somewhat incompletely on Wayland (via\nXWayland). See the WAYLAND section below and the comments in the default\n`libinput-gestures.conf` file. It has been [reported to work with\nKDE](http://www.lorenzobettini.it/2017/02/touchpad-gestures-in-linux-kde-with-libinput-gestures/).\nI am not sure how well this will work on all Linux systems and DE's etc.\n\nThe latest version and documentation is available at\nhttps://github.com/bulletmark/libinput-gestures.\n\n### INSTALLATION\n\nYou need _python_ 3.7 or later, _python2_ is not supported. You also need\n_libinput_ release 1.0 or later.\n\nYou **must be a member of the _input_ group** to have permission\nto read the touchpad device:\n\n    sudo gpasswd -a $USER input\n\nAfter executing the above command, reboot your system.\n\nMost/many users will require to install the following although neither are\nactual dependencies because some custom configurations will not require\nthem. If you are unsure initially, install both of them.\n\n|Prerequisite|Required for |\n|------------|-------------|\n|`wmctrl`    |Necessary for `_internal` command, as per default configuration|\n|`xdotool`   |Simulates keyboard and mouse actions for Xorg or XWayland based apps|\n\n    # E.g. On Arch:\n    sudo pacman -S wmctrl xdotool\n\n    # E.g. On Debian based systems, e.g. Ubuntu:\n    sudo apt-get install wmctrl xdotool\n\n    # E.g. On Fedora:\n    sudo dnf install wmctrl xdotool\n\nNOTE: Arch users can now just install [_libinput-gestures from the\nAUR_][AUR]. Then skip to the next CONFIGURATION section.\n\nDebian and Ubuntu users may also need to install `libinput-tools` if\nthat package exists in your release:\n\n    sudo apt-get install libinput-tools\n\nInstall this software:\n\n    git clone https://github.com/bulletmark/libinput-gestures.git\n    cd libinput-gestures\n    sudo ./libinput-gestures-setup install\n\n### CONFIGURATION\n\nIt is helpful to start by reading the documentation about [what libinput\ncalls gestures](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html).\nMany users will be happy with the default configuration in which case\nyou can just type the following and you are ready to go:\n\n    libinput-gestures-setup autostart start\n\nOtherwise, if you want to create your own custom gestures etc, keep\nreading ..\n\nThe default gestures are in `/etc/libinput-gestures.conf`. If you want\nto create your own custom gestures then copy that file to\n`~/.config/libinput-gestures.conf` and edit it. There are many examples\nand options described in that file. The available gestures are:\n\n|Gesture               |Example Mapping |\n|-------               |--------------- |\n|`swipe up`            |GNOME/KDE/etc move to next workspace |\n|`swipe down`          |GNOME/KDE/etc move to prev workspace |\n|`swipe left`          |Web browser go forward |\n|`swipe right`         |Web browser go back |\n|`swipe left_up`       |Jump to next open web browser tab |\n|`swipe left_down`     |Jump to previous open web browser tab |\n|`swipe right_up`      |Close current web browser tab |\n|`swipe right_down`    |Reopen and jump to last closed web browser tab |\n|`pinch in`            |GNOME open/close overview |\n|`pinch out`           |GNOME open/close overview |\n|`pinch clockwise`     ||\n|`pinch anticlockwise` ||\n|`hold on`             |Open new web browser tab. See description of [hold gestures](#hold-gestures). |\n|`hold on+N` (for `N` seconds, e.g. 1.5) |After extra hold time delay, close browser tab. See description of [hold gestures](#hold-gestures). |\n\nNOTE: If you don't use \"natural\" scrolling direction for your touchpad\nthen you may want to swap the default left/right and up/down\nconfigurations.\n\nYou can choose to specify a specific finger count, typically [3 or more\nfingers for swipe](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html#swipe-gestures),\nand [2 or more for pinch](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html#pinch-gestures).\nIf a finger count is specified then the command is executed when exactly that\nnumber of fingers is used in the gesture. If not specified then the\ncommand is executed when that gesture is invoked with any number of\nfingers. Gestures specified with finger count have priority over the\nsame gesture specified without any finger count.\n\nOf course, 2 finger swipes and taps are already interpreted by your DE\nand apps [for scrolling](https://wayland.freedesktop.org/libinput/doc/latest/scrolling.html#two-finger-scrolling) etc.\n\nIMPORTANT: Test the program. Check for reported errors in your custom\ngestures, missing packages, etc:\n\n    # Ensure the program is stopped\n    libinput-gestures-setup stop\n\n    # Test to print out commands that would be executed:\n    libinput-gestures -d\n    (<ctrl-c> to stop)\n\nConfirm that the correct commands are reported for your 3 finger\nswipe up/down/left/right gestures, and your 2 or 3 finger pinch\nin/out gestures. Some touchpads can also support 4 finger gestures.\nIf you have problems then follow the TROUBLESHOOTING steps below.\n\nApart from simple environment variable and `~` substitutions within the\nconfigured command name, `libinput-gestures` does not run the configured\ncommand under a shell so shell argument substitutions and expansions etc\nwill not be parsed. This is for efficiency and because most don't need\nit. This also means your `PATH` is not respected of course so you must\nspecify the full path to any command. If you need something more\ncomplicated, you can add your commands in an executable personal script,\ne.g. `~/bin/libinput-gestures.sh` with a `#!/bin/sh` shebang. Optionally\nthat script can take arguments. Run that script by hand until you get it\nworking then configure the script path as your command in your\n`libinput-gestures.conf`.\n\nIn most cases, `libinput-gestures` automatically determines your\ntouchpad device. However, you can specify it in your configuration file\nif needed. If you have multiple touchpads you can also specify\n`libinput-gestures` to use all devices. See the notes in the default\n`libinput-gestures.conf` file about the `device` configuration command.\n\n### STARTING AND STOPPING\n\nTo [re-]start the app immediately and also to enable it to start\nautomatically at login, just type the following:\n\n    libinput-gestures-setup stop desktop autostart start\n\nThe following commands are available:\n\nEnable the app to start automatically in the background when you\nlog in with:\n\n    libinput-gestures-setup autostart\n\nDisable the app from starting automatically with:\n\n    libinput-gestures-setup autostop\n\nStart the app immediately in the background:\n\n    libinput-gestures-setup start\n\nStop the background app immediately with:\n\n    libinput-gestures-setup stop\n\nRestart the app, e.g. to reload the configuration file, with:\n\n    libinput-gestures-setup restart\n\nCheck the status of the app with:\n\n    libinput-gestures-setup status\n\nYou can specify multiple user commands to `libinput-gestures-setup` to\naction in sequence.\n\nNote that on some uncommon systems then `libinput-gestures-setup start`\nmay fail to start the application returning you a message _Don't know\nhow to invoke libinput-gestures.desktop_. If you get this error message,\ninstall the dex package, preferably from your system packages\nrepository, and try again.\n\n### SYSTEMD USER SERVICE\n\nBy default, `libinput-gestures` is started with your DE as a desktop\napplication. There is also an option to start as a [systemd user\nservice](https://wiki.archlinux.org/title/Systemd/User). However, on\nsome systems this can be unreliable (on system restart, the application\nwill get started but occasionally will be unable to receive commands).\nIf you want to try it, type:\n\n    libinput-gestures-setup stop service autostart start\n\nYou can switch back to the desktop option with the command:\n\n    libinput-gestures-setup stop desktop autostart start\n\n### UPGRADE\n\n    # cd to source dir, as above\n    git pull\n    sudo ./libinput-gestures-setup install\n    libinput-gestures-setup restart\n\n### REMOVAL\n\n    libinput-gestures-setup stop autostop\n    sudo libinput-gestures-setup uninstall\n\n### WAYLAND AND OTHER NOTES\n\nThis utility exploits `xdotool` for many use cases which unfortunately\nonly works with X11/Xorg based applications. So `xdotool` shortcuts for\nthe desktop do not work under GNOME on Wayland which is the default\nsince GNOME 3.22. However, it is found that `wmctrl` desktop selection\ncommands do work under GNOME on Wayland (via XWayland) so this utility\nadds a built-in `_internal` command which can be used to switch\nworkspaces using the swipe commands. The `_internal` `ws_up` and\n`ws_down` commands use `wmctrl` to work out the current workspace and\nselect the next one. Since this works on both Wayland and Xorg, and with\nGNOME, KDE, and other EWMH compliant desktops, it is the default\nconfiguration command for swipe up and down commands in\n`libinput-gestures.conf`. See the comments in that file about other\noptions you can do with the `_internal` command. Unfortunately\n`_internal` does not work with Compiz for Ubuntu Unity desktop so also\nsee the explicit example there for Unity.\n\nOf course, `xdotool` commands do work via XWayland for Xorg based apps\nso, for example, page forward/back swipe gestures do work for Firefox\nand Chrome browsers when running on Wayland as per the default\nconfiguration.\n\nNote if you run `libinput-gestures` on GNOME with Wayland, be sure to\nchange or disable the your `libinput-gestures.conf` configured gestures\nto not clash with the native gestures.\n\nGNOME 3.38 and earlier on Wayland natively implements the following\ngestures:\n\n- 3 finger pinch opens/close the GNOME overview.\n- 4 finger swipe up/down changes workspaces\n\nGNOME 40->46 on Wayland natively implements the following\ngestures:\n\n- 3 finger swipe up/down opens the GNOME overview.\n- 3 finger swipe left/right changes workspaces\n\nNote that GNOME 40->46 does not use 4 finger gestures so you can freely\nassign them using `libinput-gestures`.\n\nGNOME 47 and above implements the same gestures as GNOME 40->46 but also\nduplicates those gestures to 4 finger gestures so you can't use them for\nlibinput-gestures unless you do one of the following to disable 3 finger\ngestures in GNOME.\n\n1. Install the [_Disable 3 Finger\n   Gestures_](https://extensions.gnome.org/extension/7403/disable-3-finger-gestures/)\n   GNOME shell extension (recommended).\n\n2. Patch `gnome-shell` to stop it using 3 finger gestures using this\n   [patch script](https://gist.github.com/bulletmark/0630478f98363adf584bbcfe8e527cb1).\n\nGNOME on Xorg does not natively implement any gestures.\n\n### EXTENDED GESTURES\n\nThey are not enabled in the default `libinput-gestures.conf`\nconfiguration file but you can enable extended gestures which augment\nthe gestures listed above in CONFIGURATION. See the commented out\nexamples in `libinput-gestures.conf`.\n\n- `swipe right_up` (e.g. jump to next open browser tab)\n- `swipe left_up` (e.g. jump to previous open browser tab)\n- `swipe left_down` (e.g. close current browser tab)\n- `swipe right_down` (e.g. reopen and jump to last closed browser tab)\n- `pinch clockwise`\n- `pinch anticlockwise`\n\nSo instead of just configuring the usual swipe up/down and left/right\neach at 90 degrees separation, you can add the above extra 4 swipes to\ngive a total of 8 swipe gestures each at 45 degrees separation. It works\nbetter than you may expect, at least after some practice. It means you\ncan completely manage browser tabs from your touchpad.\n\n### HOLD GESTURES\n\nLibinput version 1.19.0 added [HOLD\ngestures](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html#hold-gestures)\nto augment the standard SWIPE and PINCH gestures. They are actioned with\n1 or more fingers after holding them for a small time period and are\nsimply set ON as a trigger.\n`libinput-gestures` interprets them to commands you can\nconfigure in your `libinput-gestures.conf`, e.g:\n\n    gesture hold on 4 xdotool key control+t\n\nThe above gesture will open a new tab in your browser if you rest 4\nfingers statically on the touchpad. If you don't specify a finger count\nthen the command is executed when any number of fingers are used for the\nhold.\n\nOptionally, you can configure a time delay on hold gestures to map\nlonger hold times to different commands. Any extra hold time can be\nspecified, as an integer or float value in decimal seconds. E.g. `on+1`\nis a hold + 1 extra second, `on+3.5` is a hold + 3.5 extra seconds, etc.\nThese can be configured in addition to `on` (which is effectively the\nsame as `on+0`), and also with different (or no specific) finger counts,\ne.g:\n\n    gesture hold on 4 xdotool key control+t\n    gesture hold on+2.2 4 xdotool key control+w\n\nThe above will configure a second 4 finger hold gesture which, after 2.2\nextra seconds to a normal hold, will close the current tab in your\nbrowser. You can configure as many hold gestures, with different times\nand finger counts (or no specific finger count), as you like but it will\nquickly get unworkable if you add too many, or with close delays.\n\nTo get an idea of suitable hold times to configure, comment out all hold\ngestures in your configuration file `libinput-gestures.conf` and run\nwith debug output. I.e. run `libinput-gestures -d` in a terminal window\n(you may have to temporarily disable `libinput-gestures` first by\nrunning `libinput-gestures-setup stop`). Then experiment with different\nholds which will print the times to the screen so you can choose what to\nconfigure for your hold gestures. Run `libinput-gestures-setup restart`\nto restart `libinput-gestures` after updating your configuration.\n\n### AUTOMATIC STOP/RESTART ON D-BUS EVENTS SUCH AS SUSPEND\n\nThere are some situations where you may want to automatically stop,\nstart, or restart `libinput-gestures`. E.g. some touchpads have a\nproblem which causes `libinput-gestures` (actually the underlying\n`libinput debug-events`) to hang after resuming from a system suspend so\nthose users want to stop `libinput-gestures` when a system goes into\nsuspend and then start it again with resuming. You can use a companion\nprogram [`dbus-action`][DBUS] to\ndo this. See the example configuration for `libinput-gestures` in the\ndefault [`dbus-action`][DBUS] [configuration\nfile](https://github.com/bulletmark/dbus-action/blob/master/dbus-action.conf).\n\nThe [`dbus-action`][DBUS] utility can also be used any similar\nsituation, e.g. when you remove/insert a detachable touchpad. It can be\nused to stop, start, or restart `libinput-gestures` on any D-Bus event.\n\n### TROUBLESHOOTING\n\nPlease don't raise a github issue but provide little information about\nyour problem, and please don't raise an issue until you have considered\nall the following steps. **If you raise an issue ALWAYS include the\noutput of `libinput-gestures -l` to show the environment and\nconfiguration you are using, regardless of what the issue is about**.\n\n1. Ensure you are running the latest version from the\n   [libinput-gestures github repository][REPO] or from the [Arch AUR][AUR].\n\n2. Ensure you have followed the installation instructions here\n   carefully. The most common mistake is that you have not added your\n   user to the _input_ group and rebooted your system as described\n   above.\n\n3. Perhaps temporarily remove your custom configuration to try with the\n   default configuration.\n\n4. Run `libinput-gestures-setup status` and confirm it reports the set\n   up that you expect.\n\n5. Run `libinput-gestures` on the command line in debug mode while\n   performing some 3 and 4 finger left/right/up/down swipes, and some\n   pinch in/outs. In debug mode, configured commands are not executed,\n   they are merely output to the screen:\n   ````\n\tlibinput-gestures-setup stop\n\tlibinput-gestures -d\n\t(<ctrl-c> to stop)\n   ````\n\n6. Run `libinput-gestures` in raw mode by repeating the same commands as\n   above step but use the `-r` (`--raw`) switch instead of `-d`\n   (`--debug`). Raw mode does nothing more than echo the raw gesture\n   events received from `libinput debug-events`. You should see the\n   following types of events when you move your fingers:\n\n   - 1 and 2 finger movements should output `POINTER_*` type events\n   - 3 (and above) finger movements should output `GESTURE_*` type events.\n\n   If you do not see any `GESTURE_*` events then unfortunately your\n   touchpad and/or libinput does not report multi-finger gestures so\n   `libinput-gestures` can not work. The discrimination of\n   gestures is done completely within libinput, before they get passed\n   to `libinput-gestures`.\n\n7. Search the web for Linux kernel and/or libinput issues relating to\n   your specific touchpad device and/or laptop/pc. Update your BIOS if\n   possible.\n\n8. Be sure that a configured external command works exactly how you want\n   when you run it directly on the command line, **before** you configure\n   it for `libinput-gestures`. E.g. run `xdotool` manually and\n   experiment with various arguments to work out exactly what arguments\n   it requires to do what you want, and only then add that command +\n   arguments to your custom configuration in\n   `~/.config/libinput-gestures.conf`. Clearly, if the your manual\n   `xdotool` command does not work correctly then there is no point\n   raising an `libinput-gestures` issue about it!\n\n9. **If you raise an issue, always include the output of\n   `libinput-gestures -l` to show the environment and configuration you\n   are using**. If appropriate, also paste the output from steps 4 and 5\n   above. If your device is not being recognised by `libinput-gestures`\n   at all, paste the complete output of `libinput list-devices`\n   (`libinput-list-devices` on libinput < v1.8).\n\n### LICENSE\n\nCopyright (C) 2015 Mark Blakeney. This program is distributed under the\nterms of the GNU General Public License.\nThis program is free software: you can redistribute it and/or modify it\nunder the terms of the GNU General Public License as published by the\nFree Software Foundation, either version 3 of the License, or any later\nversion.\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\nPublic License at <https://www.gnu.org/licenses/> for more details.\n\n[REPO]: https://github.com/bulletmark/libinput-gestures/\n[DBUS]: https://github.com/bulletmark/dbus-action/\n[AUR]: https://aur.archlinux.org/packages/libinput-gestures/\n[XDOTOOL]: https://www.semicomplete.com/projects/xdotool/\n\n<!-- vim: se ai syn=markdown: -->\n"
        },
        {
          "name": "internal",
          "type": "blob",
          "size": 3.1943359375,
          "content": "#!/usr/bin/env python3\n'Command line program to exercise/test/debug the _internal command.'\n# Mark Blakeney, Oct 2019\nimport sys\nimport importlib\nimport argparse\nfrom pathlib import Path\n\nCMD = '_internal'\nGESTURE = 'swipe'\nPROG = Path(sys.argv[0]).resolve()\nNAME = Path.cwd().name\nCACHE = Path.home() / '.cache' / PROG.name\n\ndef import_path(path, add_to_path=False):\n    'Import given module path'\n    modname = Path(path).stem.replace('-', '_')\n    spec = importlib.util.spec_from_loader(modname,\n            importlib.machinery.SourceFileLoader(modname, path))\n    module = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(module)\n    if add_to_path:\n        sys.modules[modname] = module\n    return module\n\nopt = argparse.ArgumentParser(description=__doc__)\nopt.add_argument('-c', '--conffile',\n        help='alternative configuration file')\nopt.add_argument('-i', '--initial', type=int,\n        help='initial desktop')\nopt.add_argument('-C', '--cols', type=int, default=1,\n        help='number of columns')\nopt.add_argument('-t', '--text', action='store_true',\n        help='output desktop change in text')\nopt.add_argument('-n', '--nocache', action='store_true',\n        help='do not use cache')\nopt.add_argument('num', type=int,\n        help='number of desktops')\nopt.add_argument('action', nargs='?',\n        help='action to perform')\nopt.add_argument('-d', '--display', type=int,\n        help=argparse.SUPPRESS)\nopt.add_argument('-s', '--set', type=int, help=argparse.SUPPRESS)\nargs = opt.parse_args()\n\ndef showgrid(pos, num, cols):\n    print()\n    for i in range(num):\n        end = '\\n' if (i % cols) == (cols - 1) else ''\n        if i == pos:\n            print(f' {i:02} ', end=end)\n        else:\n            print(' ** ', end=end)\n    if end != '\\n':\n        print()\n\nif args.set is not None:\n    print(args.set)\n    sys.exit(0)\n\nif args.display is not None:\n    for i in range(args.num):\n        ds = '*' if i == args.display else '-'\n        print(f'{i} {ds} -')\n    sys.exit(0)\n\nif args.initial is None:\n    if args.nocache:\n        opt.error('Initial value must be specified')\n    if not CACHE.exists():\n        opt.error('Need initial desktop specified')\n    start = int(CACHE.read_text().strip())\nelse:\n    start = args.initial\n\nlg = import_path(NAME)\nicmd = lg.internal_commands[CMD]\n\nicmd.CMDLIST = f'{PROG} -d {start} {args.num}'.split()\nicmd.CMDSET = f'{PROG} {args.num} -s'.split()\n\nlg.read_conf(args.conffile, NAME + '.conf')\nmotions = lg.handlers[GESTURE.upper()].motions\nactions = {k: v for k, v in motions.items() if isinstance(v, icmd)}\n\nif not args.action or args.action not in actions:\n    opt.error(f'action must be one of {list(actions.keys())}')\n\ncmd = motions[args.action]\nprint(f'Command \"{GESTURE} {args.action} is \"{cmd}\"')\nres = cmd.run(block=True)\n\nif res:\n    end = int(res.strip())\n    if not args.nocache:\n        CACHE.write_text(str(end))\nelse:\n    end = start\n\nif end < 0 or end >= args.num:\n    sys.exit(f'Desktop change from {start} to {end}, '\n            f'out of range 0 to <{args.num}!')\n\nif args.text:\n    if start != end:\n        print(f'Desktop change from {start} to {end}')\n    else:\n        print('No change')\nelse:\n    showgrid(start, args.num, args.cols)\n    showgrid(end, args.num, args.cols)\n"
        },
        {
          "name": "internal-test",
          "type": "blob",
          "size": 10.0458984375,
          "content": "#!/usr/bin/env python3\n'Command line utility to run test suite for internal command.'\n# Mark Blakeney, Oct 2019\nimport argparse\nimport subprocess\nimport sys\nimport tempfile\n\n# flake8: noqa: E122\nTESTS = (\n#####\n(\n'1 column, up/down, no wrap',\n'''\ngesture swipe up\t\t_internal ws_up\ngesture swipe down\t\t_internal ws_down\n''', (\n    '3 desktops',\n    ('up',   1, 3),\n    ('up',   2),\n    ('up',   2),\n    ('down', 1),\n    ('down', 0),\n    ('down', 0),\n),\n),\n#####\n(\n'1 column, up/down, with wrap',\n'''\ngesture swipe up\t\t_internal -w ws_up\ngesture swipe down\t\t_internal -w ws_down\n''', (\n    '3 desktops',\n    ('up',   1, 3),\n    ('up',   2),\n    ('up',   0),\n    ('up',   1),\n    ('up',   2),\n    ('up',   0),\n    ('down', 2),\n    ('down', 1),\n    ('down', 0),\n    ('down', 2),\n),\n),\n#####\n(\n'1 row, left/right, no wrap',\n'''\ngesture swipe left\t\t_internal ws_left\ngesture swipe right\t\t_internal ws_right\n''', (\n    '3 desktops',\n    ('left',  1, 3),\n    ('left',  2),\n    ('left',  2),\n    ('right', 1),\n    ('right', 0),\n    ('right', 0),\n),\n),\n#####\n(\n'1 row, left/right, no wrap, configured as columns',\n'''\ngesture swipe left\t\t_internal -c 3 ws_left\ngesture swipe right\t\t_internal -c 3 ws_right\n''', (\n    '3 desktops',\n    ('left',  1, 3),\n    ('left',  2),\n    ('left',  2),\n    ('right', 1),\n    ('right', 0),\n    ('right', 0),\n),\n),\n#####\n(\n'1 row, left/right, with wrap',\n'''\ngesture swipe left\t\t_internal -w ws_left\ngesture swipe right\t\t_internal -w ws_right\n''', (\n    '3 desktops',\n    ('left',  1, 3),\n    ('left',  2),\n    ('left',  0),\n    ('left',  1),\n    ('left',  2),\n    ('left',  0),\n    ('right', 2),\n    ('right', 1),\n    ('right', 0),\n    ('right', 2),\n),\n),\n#####\n(\n'1 row, left/right, with wrap, configured as columns',\n'''\ngesture swipe left\t\t_internal -w -c 3 ws_left\ngesture swipe right\t\t_internal -w -c 3 ws_right\n''', (\n    '3 desktops',\n    ('left',  1, 3),\n    ('left',  2),\n    ('left',  0),\n    ('left',  1),\n    ('left',  2),\n    ('left',  0),\n    ('right', 2),\n    ('right', 1),\n    ('right', 0),\n    ('right', 2),\n),\n),\n#####\n(\n'4 column, up/down/left/right, no wrap',\n'''\ngesture swipe up\t\t_internal -c 4 ws_up\ngesture swipe down\t\t_internal -c 4 ws_down\ngesture swipe left\t\t_internal -c 4 ws_left\ngesture swipe right\t\t_internal -c 4 ws_right\n''', (\n    '12 desktops',\n    ('up',    4, 12),\n    ('up',    8),\n    ('up',    8),\n    ('down',  4),\n    ('down',  0),\n    ('down',  0),\n    ('left',  1),\n    ('left',  2),\n    ('left',  3),\n    ('left',  3),\n    ('right', 2),\n    ('right', 1),\n    ('right', 0),\n    ('right', 0),\n    ('left',  1),\n    ('up',    5),\n    ('up',    9),\n    ('up',    9),\n    ('left',  10),\n    ('up',    10),\n    ('down',  6),\n    ('down',  2),\n    ('down',  2),\n    ('left',  3),\n    ('up',    7),\n    ('up',    11),\n    ('up',    11),\n    '10 desktops',\n    ('up',    4, 10),\n    ('up',    8),\n    ('up',    8),\n    ('left',  9),\n    ('left',  9),\n    ('down',  5),\n    ('left',  6),\n    ('up',    6),\n    ('left',  7),\n    ('left',  7),\n    ('up',    7),\n    ('down',  3),\n    ('down',  3),\n),\n),\n#####\n(\n'4 column, up/down/left/right, no wrap, legacy config',\n'''\ngesture swipe up\t\t_internal --col=3 ws_up\ngesture swipe down\t\t_internal --col=3 ws_down\ngesture swipe left\t\t_internal --row=4 ws_up\ngesture swipe right\t\t_internal --row=4 ws_down\n''', (\n    '12 desktops',\n    ('up',    4, 12),\n    ('up',    8),\n    ('up',    8),\n    ('down',  4),\n    ('down',  0),\n    ('down',  0),\n    ('left',  1),\n    ('left',  2),\n    ('left',  3),\n    ('left',  3),\n    ('right', 2),\n    ('right', 1),\n    ('right', 0),\n    ('right', 0),\n    ('left',  1),\n    ('up',    5),\n    ('up',    9),\n    ('up',    9),\n    ('left',  10),\n    ('up',    10),\n    ('down',  6),\n    ('down',  2),\n    ('down',  2),\n    ('left',  3),\n    ('up',    7),\n    ('up',    11),\n    ('up',    11),\n),\n),\n#####\n(\n'4 column, up/down/left/right, with wrap',\n'''\ngesture swipe up\t\t_internal -w -c 4 ws_up\ngesture swipe down\t\t_internal -w -c 4 ws_down\ngesture swipe left\t\t_internal -w -c 4 ws_left\ngesture swipe right\t\t_internal -w -c 4 ws_right\n''', (\n    '12 desktops',\n    ('up',    4, 12),\n    ('up',    8),\n    ('up',    0),\n    ('down',  8),\n    ('down',  4),\n    ('down',  0),\n    ('down',  8),\n    ('up'  ,  0),\n    ('right', 3),\n    ('left',  0),\n    ('left',  1),\n    ('left',  2),\n    ('left',  3),\n    ('left',  0),\n    ('right', 3),\n    ('up',    7),\n    ('up',    11),\n    ('up',    3),\n    '10 desktops',\n    ('up',    4, 10),\n    ('up',    8),\n    ('up',    0),\n    ('down',  8),\n    ('left',  9),\n    ('left',  8),\n    ('left',  9),\n    ('up',    1),\n    ('up',    5),\n    ('up',    9),\n    ('down',  5),\n    ('left',  6),\n    ('left',  7),\n    ('left',  4),\n    ('right', 7),\n    ('right', 6),\n    ('up',    2),\n    ('down', 6),\n),\n),\n#####\n(\n'4 column, up/down/left/right, with wrap, legacy config',\n'''\ngesture swipe up\t\t_internal -w --col=3 ws_up\ngesture swipe down\t\t_internal -w --col=3 ws_down\ngesture swipe left\t\t_internal -w --row=4 ws_up\ngesture swipe right\t\t_internal -w --row=4 ws_down\n''', (\n    '12 desktops',\n    ('up',    4, 12),\n    ('up',    8),\n    ('up',    0),\n    ('down',  8),\n    ('down',  4),\n    ('down',  0),\n    ('down',  8),\n    ('up'  ,  0),\n    ('right', 3),\n    ('left',  0),\n    ('left',  1),\n    ('left',  2),\n    ('left',  3),\n    ('left',  0),\n    ('right', 3),\n    ('up',    7),\n    ('up',    11),\n    ('up',    3),\n    ('down',  11),\n),\n),\n#####\n(\n'4 column, up/down/left/right & diagonal, no wrap',\n'''\ngesture swipe up\t\t_internal -c 4 ws_up\ngesture swipe down\t\t_internal -c 4 ws_down\ngesture swipe left\t\t_internal -c 4 ws_left\ngesture swipe right\t\t_internal -c 4 ws_right\ngesture swipe left_up\t\t_internal -c 4 ws_left_up\ngesture swipe left_down\t\t_internal -c 4 ws_left_down\ngesture swipe right_up\t\t_internal -c 4 ws_right_up\ngesture swipe right_down\t_internal -c 4 ws_right_down\n''', (\n    '12 desktops',\n    ('left_up',    5, 12),\n    ('left_up',    10),\n    ('right_down', 5),\n    ('right_down', 0),\n    ('left',       1),\n    ('left_up',    6),\n    ('left_up',    11),\n    ('down',       7),\n    ('right_down', 2),\n    ('left',       3),\n    ('left',       3),\n    ('right_up',   6),\n    ('right_up',   9),\n    ('right_up',   9),\n    '10 desktops',\n    ('left_up',    5, 10),\n    ('left_up',    5),\n    ('right_down', 0),\n    ('left',       1),\n    ('left_up',    6),\n    ('left_up',    6),\n    ('left_down',  3),\n    ('up',         7),\n    ('right_up',   7),\n    ('right_down', 2),\n    ('right_up',   5),\n    ('right_up',   8),\n    ('right_up',   8),\n    '16 desktops',\n    ('left_up',    5, 16),\n    ('left_up',    10),\n    ('left_up',    15),\n    ('left_up',    15),\n    ('right_down', 10),\n    ('right_down', 5),\n    ('right_down', 0),\n    ('right_down', 0),\n    ('up',         4),\n    ('up',         8),\n    ('up',         12),\n    ('right_down', 12),\n    ('left_down',  9),\n    ('left_down',  6),\n    ('left_down',  3),\n    ('left_down',  3),\n    ('right_up',   6),\n    ('right_up',   9),\n    ('right_up',   12),\n),\n),\n#####\n(\n'4 column, up/down/left/right & diagonal, with wrap',\n'''\ngesture swipe up\t\t_internal -w -c 4 ws_up\ngesture swipe down\t\t_internal -w -c 4 ws_down\ngesture swipe left\t\t_internal -w -c 4 ws_left\ngesture swipe right\t\t_internal -w -c 4 ws_right\ngesture swipe left_up\t\t_internal -w -c 4 ws_left_up\ngesture swipe left_down\t\t_internal -w -c 4 ws_left_down\ngesture swipe right_up\t\t_internal -w -c 4 ws_right_up\ngesture swipe right_down\t_internal -w -c 4 ws_right_down\n''', (\n    '12 desktops',\n    ('left_up',    5, 12),\n    ('left_up',    10),\n    ('left_up',    3),\n    ('left_up',    4),\n    ('left_up',    9),\n    ('left_up',    2),\n    ('left_up',    7),\n    ('down',       3),\n    ('right_up',   6),\n    ('right_up',   9),\n    ('right_up',   0),\n    '10 desktops',\n    ('left_up',    5, 10),\n    ('left_up',    2),\n    ('left',       3),\n    ('right_up',   6),\n    ('right_up',   9),\n    ('right_up',   0),\n    '16 desktops',\n    ('left_up',    5, 16),\n    ('left_up',    10),\n    ('left_up',    15),\n    ('left_up',    0),\n    ('right_down', 15),\n    ('right_down', 10),\n    ('right_down', 5),\n    ('right_down', 0),\n    ('right_down', 15),\n    ('left_up',    0),\n    ('up',         4),\n    ('up',         8),\n    ('up',         12),\n    ('right_up',   3),\n    ('right_up',   6),\n    ('right_up',   9),\n    ('right_up',   12),\n),\n),\n)\n\nPROG = 'internal'\n\nopt = argparse.ArgumentParser(description=__doc__)\nopt.add_argument('-q', '--quiet', action='store_true',\n        help='quiet output')\nopt.add_argument('-l', '--list', action='store_true',\n        help='list test sets')\nopt.add_argument('testset', nargs='*', type=int,\n        help=f'test sets to execute, default all {len(TESTS)}')\nargs = opt.parse_args()\n\nlastnum = 0\nlastpos = 0\n\ndef test(fname, action, end, num=-1, start=-1):\n    global lastnum, lastpos\n    if num < 0:\n        num = lastnum\n    else:\n        lastpos = 0\n\n    if start < 0:\n        start = lastpos\n\n    lastnum = num\n    lastpos = end\n\n    cmd = f'./{PROG} -n -t -c {fname} -i {start} {num} {action}'\n    res = subprocess.run(cmd.split(), universal_newlines=True,\n            stdout=subprocess.PIPE)\n    if res.returncode != 0:\n        return 'Command failed'\n    out = res.stdout.strip().splitlines()[-1].split()[-1]\n    res_end = int(out) if out.isdigit() else start\n    return f'should be {res_end}' if res_end != end else None\n\ntmpfile = tempfile.NamedTemporaryFile('r+t')\nsets = 0\ntotal = 0\nbad = 0\n\nfor testset, (title, confstr, tests) in enumerate(TESTS, 1):\n    if args.testset and testset not in args.testset:\n        continue\n    sets += 1\n    confstr = confstr.strip()\n    tmpfile.seek(0)\n    tmpfile.write(confstr + '\\n')\n    tmpfile.truncate()\n    tmpfile.flush()\n    lastpos = 0\n    lastnum = 0\n    print(f'======= Set {testset}: {title}:\\n{confstr}')\n    for fargs in tests:\n        if isinstance(fargs, str):\n            print(f' ###### Subset {fargs}:')\n            continue\n        total += 1\n\n        if args.list:\n            continue\n\n        res = test(tmpfile.name, *fargs)\n        if res:\n            print(f' FAILED: {fargs}: {res}')\n            bad += 1\n        elif not args.quiet:\n            print(f' ok    : {fargs}')\n\nprint(f'\\nTotal sets = {sets}, tests = {total}, failed = {bad}')\nsys.exit(0 if bad == 0 else 1)\n"
        },
        {
          "name": "libinput-dummy",
          "type": "blob",
          "size": 0.4833984375,
          "content": "#!/bin/bash\n# Hack stub to dummy output from libinput debug-events from a file.\n# Used to help diagnose issues. M.Blakeney, Jul 2021.\n\nif [[ $1 == 'install' ]]; then\n    ln -sfv $PWD/$0 $HOME/bin/libinput\n    exit\nelif [[ $1 == 'rm' || $1 == 'remove' || $1 == uninstall ]]; then\n    rm -fv $HOME/bin/libinput\n    exit\nelif [[ $1 == '--version' ]]; then\n    exec /usr/bin/libinput --version\nelif [[ $1 == 'list-devices' ]]; then\n    exec /usr/bin/libinput list-devices\nfi\n\ncat libinput-dummy.txt\n"
        },
        {
          "name": "libinput-gestures",
          "type": "blob",
          "size": 30.171875,
          "content": "#!/usr/bin/env python3\n'Read gestures from libinput touchpad and action shell commands.'\n# Mark Blakeney, Sep 2015.\nimport argparse\nimport fcntl\nimport getpass\nimport hashlib\nimport math\nimport os\nimport platform\nimport re\nimport shlex\nimport subprocess\nimport sys\nimport threading\nfrom pathlib import Path\nfrom time import monotonic\n\ndbus_imported = True\ntry:\n    import dbus\n    from dbus.mainloop.glib import DBusGMainLoop\n    from gi.repository import GLib\nexcept ImportError:\n    dbus_imported = False\n\nsession_locked = False\n\nPROGPATH = Path(sys.argv[0])\nPROGNAME = PROGPATH.stem\nHOME = Path('~').expanduser()\n\n# Conf file containing gesture commands.\n# Search first for user file then system file.\nCONFNAME = f'{PROGNAME}.conf'\nUSERDIR = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))\nCONFDIRS = (USERDIR, '/etc')\n\n# Ratio of X/Y (or Y/X) at which we consider an oblique swipe gesture.\n# The number is the trigger angle in degrees and set to 360/8/2.\nOBLIQUE_RATIO = math.tan(math.radians(22.5))\n\n# Default minimum significant distance to move for swipes, in dots.\n# Can be changed using configuration command.\nswipe_min_threshold = 0\n\nargs = None\nabzsquare = None\n\n# Timeout on gesture action from start to end. 0 = no timeout. In secs.\n# Can be changed using configuration command.\nDEFAULT_TIMEOUT = 1.5\ntimeoutv = DEFAULT_TIMEOUT\n\n# Rotation threshold in degrees to discriminate pinch rotate from in/out\nROTATE_ANGLE = 15.0\n\ndef open_lock(user):\n    'Create and return lock and pid files for given user'\n    # We use exclusive assess to a file for this\n    flock = Path(f'/tmp/{PROGNAME}-{user}.lock')\n    flock_fp = flock.open('w')\n    try:\n        fcntl.lockf(flock_fp, fcntl.LOCK_EX | fcntl.LOCK_NB)\n    except IOError:\n        return None, None\n\n    # Return lock file and pid file handles\n    return flock_fp, flock.with_suffix('.pid').open('w')\n\ndef run(cmd, *, check=True, block=True):\n    'Run function and return standard output, Popen() handle, or None'\n    try:\n        if block:\n            result = subprocess.check_output(cmd, universal_newlines=True,\n                    stderr=(None if check else subprocess.DEVNULL))\n        else:\n            result = bool(subprocess.Popen(cmd))\n    except Exception as e:\n        result = None\n        if check:\n            print(str(e), file=sys.stderr)\n\n    return result\n\ndef get_libinput_vers():\n    'Return the libinput installed version number string'\n    # Try to use newer libinput interface then fall back to old\n    # (depreciated) interface.\n    res = run(('libinput', '--version'), check=False)\n    if res:\n        return res.strip(), True\n\n    res = run(('libinput-list-devices', '--version'), check=False)\n    return res and res.strip(), False\n\ndef get_devices_list(cmd_list_devices, device_list):\n    'Get list of devices and their attributes (as a dict) from libinput'\n    if device_list:\n        with open(device_list) as fd:\n            stdout = fd.read()\n    else:\n        stdout = run(cmd_list_devices.split())\n\n    if stdout:\n        dev = {}\n        for line in stdout.splitlines():\n            line = line.strip()\n            if line and ':' in line:\n                key, value = line.split(':', maxsplit=1)\n                dev[key.strip().lower()] = value.strip()\n            elif dev:\n                yield dev\n                dev = {}\n\n        # Ensure we include last device\n        if dev:\n            yield dev\n\ndef get_device_info(name, cmd_list_devices, device_list):\n    'Determine libinput touchpad device and return device info'\n    devices = list(get_devices_list(cmd_list_devices, device_list))\n\n    if not devices:\n        print('Can not see any devices, did you add yourself to the '\n                'input group and reboot?', file=sys.stderr)\n        return None\n\n    # If a specific device name was asked for then return that device\n    # This is the \"Device\" name from libinput list-devices command.\n    if name:\n        kdev = str(Path(name).resolve()) if name[0] == '/' else None\n        for d in devices:\n            # If the device name starts with a '/' then it is instead\n            # considered as the explicit device path although since\n            # device paths can change through reboots this is best to be\n            # a symlink. E.g. users should use the corresponding full\n            # path link under /dev/input/by-path/ or /dev/input/by-id/.\n            if kdev:\n                if d.get('kernel') == kdev:\n                    return d\n            elif d.get('device') == name:\n                return d\n        return None\n\n    # Otherwise look for 1st device with touchpad capabilities\n    for d in devices:\n        if 'size' in d and 'pointer' in d.get('capabilities'):\n            return d\n    # Otherwise look for 1st device with touchpad in it's name\n    # or, failing that, 1st device with trackpad in it's name\n    for txt in ('touch ?pad', 'track ?pad'):\n        for d in devices:\n            if re.search(txt, d.get('device', ''), re.I):\n                return d\n\n    # Give up\n    return None\n\ndef get_device(name, cmd_list_devices, device_list):\n    'Determine libinput touchpad device and add fixed path info'\n    dev = get_device_info(name, cmd_list_devices, device_list)\n    if dev:\n        devname = dev.get('kernel')\n        evname = ''\n        if devname:\n            devpath = Path(devname)\n\n            # Also determine and prefer a non-volatile path merely\n            # because it is more identifying for users.\n            for dirstr in ('/dev/input/by-path', '/dev/input/by-id'):\n                dirpath = Path(dirstr)\n                if dirpath.exists():\n                    for path in dirpath.iterdir():\n                        if path.resolve() == devpath:\n                            devname = str(path)\n                            evname = f'({devpath.name})'\n                            break\n                    if evname:\n                        break\n\n        dev['_path'] = devname\n        dev['_diag'] = f\"{devname}{evname}: {dev.get('device', '?')}\"\n    return dev\n\nclass COMMAND:\n    'Generic command handler'\n    def __init__(self, args):\n        self.reprstr = ' '.join(args)\n\n        # Expand '~' and env vars in executable command name\n        args[0] = os.path.expandvars(os.path.expanduser(args[0]))\n        self.argslist = args\n\n    def run(self):\n        'Run this command + arguments'\n        run(self.argslist, block=False)\n\n    def __str__(self):\n        'Return string representation'\n        return self.reprstr\n\n# Table of internal commands\ninternal_commands = {}\n\ndef add_internal_command(cls):\n    'Add configuration command to command lookup table based on name'\n    internal_commands[re.sub('^COMMAND', '', cls.__name__)] = cls\n\nclass ArgumentParser(argparse.ArgumentParser):\n    'Custom ArgumentParser to return error text'\n    def error(self, msg):\n        raise Exception(msg)\n\n@add_internal_command\nclass COMMAND_internal(COMMAND):\n    'Internal command handler.'\n    # Commands currently supported follow. Each is configured with the\n    # (X,Y) translation to be applied to the desktop grid.\n    commands = (\n        ('ws_up',         ( 0,  1)),  # noqa: E241,E201\n        ('ws_down',       ( 0, -1)),  # noqa: E241,E201\n        ('ws_left',       ( 1,  0)),  # noqa: E241,E201\n        ('ws_right',      (-1,  0)),  # noqa: E241,E201\n        ('ws_left_up',    ( 1,  1)),  # noqa: E241,E201\n        ('ws_left_down',  ( 1, -1)),  # noqa: E241,E201\n        ('ws_right_up',   (-1,  1)),  # noqa: E241,E201\n        ('ws_right_down', (-1, -1)),  # noqa: E241,E201\n    )\n\n    commands_list = [c[0] for c in commands]\n\n    CMDTEST = 'wmctrl -m'.split()\n    CMDLIST = 'wmctrl -d'.split()\n    CMDSET = 'wmctrl -s'.split()\n\n    def __init__(self, args):\n        'Action internal swipe commands'\n        super().__init__(args)\n\n        # Set up command line arguments\n        opt = ArgumentParser(prog=self.argslist[0], description=self.__doc__)\n        opt.add_argument('-w', '--wrap', action='store_true',\n                help='wrap workspaces when switching to/from start/end')\n        opt.add_argument('-c', '--cols', type=int,\n                help='number of columns in virtual desktop grid, default=1')\n        opt.add_argument('--row', type=int, default=0, help=argparse.SUPPRESS)\n        opt.add_argument('--col', type=int, default=0, help=argparse.SUPPRESS)\n        opt.add_argument('action', choices=self.commands_list,\n                help='Internal command to action')\n        args = opt.parse_args(self.argslist[1:])\n        self.nowrap = not args.wrap\n        self.rows = 0\n        self.cols = 0\n        cmdi = self.commands_list.index(args.action)\n\n        if self.CMDTEST[0] and not run(self.CMDTEST, check=False):\n            print(f'Warning: must install {self.CMDTEST[0]} '\n                    'to use _internal command.', file=sys.stderr)\n\n        # Only do above check once\n        self.CMDTEST[0] = ''\n\n        if cmdi >= 2:\n            if args.row or args.col:\n                opt.error('Legacy \"--row\" and \"--col\" not supported')\n            if args.cols is None:\n                if cmdi < 4:\n                    self.cols = 1\n                    cmdi -= 2\n                else:\n                    opt.error('\"--cols\" must be specified')\n            elif args.cols < 1:\n                opt.error('\"--cols\" must be >= 1')\n            else:\n                self.cols = args.cols\n        else:\n            # Convert old legacy/depreciated arguments to new arguments\n            if args.cols is not None:\n                if args.cols < 1:\n                    opt.error('\"--cols\" must be >= 1')\n                self.cols = args.cols\n            elif args.row:\n                cmdi += 2\n                self.cols = args.row\n            elif args.col:\n                self.rows = args.col\n            else:\n                self.cols = 1\n\n        # Save the translations appropriate to this command\n        self.xmove, self.ymove = self.commands[cmdi][1]\n\n    def run(self, block=False):\n        'Get list of current workspaces and select next one'\n        stdout = run(self.CMDLIST, check=False)\n        if not stdout:\n            # This command can fail on GNOME when you have only a single\n            # dynamic workspace (probably a GNOME bug) so let's just\n            # fudge that default case.\n            stdout = '0 *\\n1 -'\n\n        # Parse the output of above command\n        lines = [ln.split(maxsplit=2)[1] for ln in stdout.strip().splitlines()]\n        start = index = lines.index('*')\n        num = len(lines)\n        cols = self.cols or num // self.rows\n        numv = ((num - 1) // cols + 1) * cols\n\n        # Calculate new workspace X direction index\n        count = self.xmove\n        if count < 0:\n            if index % cols == 0:\n                if self.nowrap:\n                    return\n                index += cols - 1\n                if index >= num:\n                    if self.ymove == 0:\n                        if self.nowrap:\n                            return\n                        index = num - 1\n            else:\n                index += count\n        elif count > 0:\n            index += count\n            if index % cols == 0:\n                if self.nowrap:\n                    return\n                index -= cols\n            elif index >= num:\n                if self.ymove == 0:\n                    if self.nowrap:\n                        return\n                    index -= numv - index\n\n        # Calculate new workspace Y direction index\n        count = self.ymove * cols\n        if count < 0:\n            if index < cols and self.nowrap:\n                return\n            index = (index + count) % numv\n            if index >= num:\n                index += count\n        elif count > 0:\n            index += count\n            if index >= numv:\n                if self.nowrap:\n                    return\n                index = index % numv\n            elif index >= num:\n                if self.nowrap:\n                    return\n                index = (index + count) % numv\n\n        # Switch to desired workspace\n        return run(self.CMDSET + [str(index)], block=block) \\\n                if index != start else None\n\n# Table of gesture handlers\nhandlers = {}\n\ndef add_gesture_handler(cls):\n    'Create gesture handler instance and add to lookup table based on name'\n    handlers[cls.__name__] = cls()\n\nclass GESTURE:\n    'Abstract base class for handling for gestures'\n    extended_text = ''\n    option_text = ''\n\n    def __init__(self):\n        'Initialise this gesture at program start'\n        self.name = type(self).__name__\n        self.motions = {}\n        self.options = {}\n        self.has_extended = False\n\n    def add(self, motion, fingers, command):\n        'Add a configured motion command for this gesture'\n        motion_key = motion\n\n        if self.option_text:\n            if self.option_text in motion:\n                motion_key, option = motion.split(self.option_text, maxsplit=1)\n                err = self.check_option(option)\n                if err:\n                    return err\n\n        if motion_key not in self.SUPPORTED_MOTIONS:\n            opts = '\" or \"'.join(self.SUPPORTED_MOTIONS)\n            if self.option_text:\n                opts += '\" or \"' + \\\n                        '\" or \"'.join(f'{i}{self.option_text}option' for\n                                      i in self.SUPPORTED_MOTIONS)\n            return f'Gesture {self.name.lower()} does not support '\\\n                    f'motion \"{motion_key}\".\\nMust be \"{opts}\"'\n        if not command:\n            return 'No command configured'\n\n        # If any extended gestures configured then set flag to enable\n        # their discrimination\n        if self.extended_text and self.extended_text in motion_key:\n            self.has_extended = True\n\n        try:\n            cmds = shlex.split(command)\n        except Exception as e:\n            return str(e)\n\n        cls = internal_commands.get(cmds[0], COMMAND)\n        key = (motion, fingers) if fingers else motion\n\n        try:\n            self.motions[key] = cls(cmds)\n        except Exception as e:\n            return str(e)\n\n        return None\n\n    def begin(self, fingers):\n        'Initialise this gesture at the start of motion'\n        self.fingers = fingers\n        self.data = [0.0, 0.0]\n        self.starttime = monotonic()\n\n    def update(self, coords):\n        return True\n\n    def action(self, motion, *, command=None):\n        'Action a motion command for this gesture'\n        if command is None:\n            command = self.motions.get((motion, self.fingers)) or \\\n                    self.motions.get(motion)\n\n        if args.verbose:\n            print(f'{PROGNAME}: {self.name} {motion} '\n                    f'{self.fingers} {self.data}')\n            if command:\n                print('  ', command)\n\n        if self.timeout > 0 and (self.starttime + self.timeout) < monotonic():\n            if args.verbose:\n                print('  ', 'timeout - no action')\n            return\n\n        if command and not args.debug:\n            command.run()\n\n    def complete_setup(self):\n        'Complete setup of this gesture'\n        self.timeout = timeoutv\n\n@add_gesture_handler\nclass SWIPE(GESTURE):\n    'Class to handle this type of gesture'\n    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down',\n            'left_up', 'right_up', 'left_down', 'right_down')\n    extended_text = '_'\n\n    def update(self, coords):\n        'Update this gesture for a motion'\n        # Ignore this update if we can not parse the numbers we expect\n        try:\n            x = float(coords[2])\n            y = float(coords[3])\n        except (ValueError, IndexError):\n            return False\n\n        self.data[0] += x\n        self.data[1] += y\n        return True\n\n    def end(self):\n        'Action this gesture at the end of a motion sequence'\n        x, y = self.data\n        abx = abs(x)\n        aby = abs(y)\n\n        # Require absolute distance movement beyond a small thresh-hold.\n        if abx**2 + aby**2 < abzsquare:\n            return\n\n        # Discriminate left/right or up/down.\n        # If significant movement in both planes the consider it a\n        # oblique swipe (but only if any are configured)\n        if abx > aby:\n            motion = 'left' if x < 0 else 'right'\n            if self.has_extended and abx > 0 and aby / abx > OBLIQUE_RATIO:\n                motion += '_up' if y < 0 else '_down'\n        else:\n            motion = 'up' if y < 0 else 'down'\n            if self.has_extended and aby > 0 and abx / aby > OBLIQUE_RATIO:\n                motion = ('left_' if x < 0 else 'right_') + motion\n\n        self.action(motion)\n\n@add_gesture_handler\nclass PINCH(GESTURE):\n    'Class to handle this type of gesture'\n    SUPPORTED_MOTIONS = ('in', 'out', 'clockwise', 'anticlockwise')\n    extended_text = 'clock'\n\n    def update(self, coords):\n        'Update this gesture for a motion'\n        # Ignore this update if we can not parse the numbers we expect\n        try:\n            x = float(coords[4])\n            y = float(coords[5])\n        except (ValueError, IndexError):\n            return False\n\n        self.data[0] += x - 1.0\n        self.data[1] += y\n        return True\n\n    def end(self):\n        'Action this gesture at the end of a motion sequence'\n        ratio, angle = self.data\n\n        if self.has_extended and abs(angle) > ROTATE_ANGLE:\n            self.action('clockwise' if angle >= 0.0 else 'anticlockwise')\n        elif ratio != 0.0:\n            self.action('in' if ratio <= 0.0 else 'out')\n\n@add_gesture_handler\nclass HOLD(GESTURE):\n    'Class to handle this type of gesture'\n    SUPPORTED_MOTIONS = ('on',)\n    option_text = '+'\n\n    def check_option(self, option):\n        try:\n            _ = float(option)\n        except Exception:\n            return f'Hold delay \"{option}\" must be an integer or float value.'\n        return None\n\n    def complete_setup(self):\n        'Complete setup of this gesture'\n        # No timeout on HOLD gestures\n        self.timeout = 0\n        self.delays = {}\n\n        # We parse the motions table to set up a table of delays for efficient\n        # lookup at run time.\n        for finger in range(0, 6):\n            fstr = str(finger)\n\n            # Explicit finger count delays inherit from 0 finger count delays\n            delays = self.delays.get('0', {}).copy()\n\n            for key in self.motions:\n                motion, finger = key if isinstance(key, tuple) else (key, '0')\n                if finger != fstr:\n                    continue\n\n                delay = motion.split('+', maxsplit=1)[1] \\\n                        if '+' in motion else '0'\n                delays[float(delay)] = key\n\n            # Delays are sorted by highest numeric value so we can\n            # search for the largest delay first at run time.\n            if delays:\n                self.delays[fstr] = dict(sorted(delays.items(), reverse=True))\n\n    def end(self):\n        'Action this gesture at the end of a motion sequence'\n        delay = monotonic() - self.starttime\n        motion, command = 'on', ''\n        delays = self.delays.get(self.fingers or '0')\n        if delays:\n            # Work out which command to run based on delay. Action the\n            # largest configured delay that is less than or equal to the\n            # actual delay.\n            for dvalue in delays:\n                if delay >= dvalue:\n                    motion = delays[dvalue]\n                    command = self.motions.get(motion)\n                    break\n        elif delay > 0:\n            # Define which time hold was released for debug monitoring\n            motion = f'on-{delay:.2f}'\n\n        self.action(motion, command=command)\n\n# Table of configuration commands\nconf_commands = {}\n\ndef add_conf_command(func):\n    'Add configuration command to command lookup table based on name'\n    conf_commands[re.sub('^conf_', '', func.__name__)] = func\n\n@add_conf_command\ndef conf_gesture(lineargs):\n    'Process a single gesture line in conf file'\n    fields = lineargs.split(maxsplit=2)\n\n    # Look for configured gesture. Sanity check the line.\n    if len(fields) < 3:\n        return 'Invalid gesture line - not enough fields'\n\n    gesture, motion, command = fields\n    handler = handlers.get(gesture.upper())\n\n    if not handler:\n        opts = '\" or \"'.join([h.lower() for h in handlers])\n        return f'Gesture \"{gesture}\" is not supported.\\nMust be \"{opts}\"'\n\n    # Gesture command can be configured with optional specific finger\n    # count so look for that\n    fingers, *fcommand = command.split(maxsplit=1)\n    if fingers.isdigit() and len(fingers) == 1:\n        command = fcommand[0] if fcommand else ''\n    else:\n        fingers = None\n\n    # Add the configured gesture\n    return handler.add(motion.lower(), fingers, command)\n\n@add_conf_command\ndef conf_device(lineargs):\n    'Process a single device line in conf file'\n    # Command line overrides configuration file\n    if not args.device:\n        args.device = lineargs\n\n    return None if args.device else 'No device specified'\n\n@add_conf_command\ndef swipe_threshold(lineargs):\n    'Change swipe threshold'\n    global swipe_min_threshold\n    try:\n        swipe_min_threshold = int(lineargs)\n    except Exception:\n        return 'Must be integer value'\n\n    return None if swipe_min_threshold >= 0 else 'Must be >= 0'\n\n@add_conf_command\ndef timeout(lineargs):\n    'Change gesture timeout'\n    global timeoutv\n    try:\n        timeoutv = float(lineargs)\n    except Exception:\n        return 'Must be float value'\n\n    return None if timeoutv >= 0 else 'Must be >= 0'\n\ndef get_conf_line(line):\n    'Process a single line in conf file'\n    key, *argslist = line.split(maxsplit=1)\n\n    # Old format conf files may have a \":\" appended to the key\n    key = key.rstrip(':')\n    conf_func = conf_commands.get(key)\n\n    if not conf_func:\n        opts = '\" or \"'.join(conf_commands)\n        return f'Configuration command \"{key}\" is not supported.\\n' \\\n                f'Must be \"{opts}\"'\n\n    return conf_func(argslist[0] if argslist else '')\n\ndef get_conf(conffile, confname):\n    'Read given configuration file and store internal actions etc'\n    with conffile.open() as fp:\n        for num, line in enumerate(fp, 1):\n            line = line.strip()\n            if not line or line[0] == '#':\n                continue\n\n            errmsg = get_conf_line(line)\n            if errmsg:\n                sys.exit(f'Error at line {num} in file {confname}:\\n'\n                        f'>> {line} <<\\n{errmsg}.')\n\ndef unexpanduser(cfile):\n    'Return absolute path name, with $HOME replaced by ~'\n    cfile_abs = cfile.resolve()\n\n    if cfile_abs.parts[:len(HOME.parts)] != HOME.parts:\n        return str(cfile_abs)\n\n    return str(Path('~', *cfile_abs.parts[len(HOME.parts):]))\n\n# Search for configuration file. Use file given as command line\n# argument, else look for file in search dir order.\ndef read_conf(conffile, defname):\n    if conffile:\n        confpath = Path(conffile)\n        if not confpath.is_file():\n            sys.exit(f'Conf file \"{conffile}\" is not a file or does not exist.')\n    else:\n        for confdir in CONFDIRS:\n            confpath = Path(confdir, defname)\n            if confpath.is_file():\n                break\n        else:\n            opts = ' or '.join([unexpanduser(Path(c)) for c in CONFDIRS])\n            sys.exit(f'No file {defname} in {opts}.')\n\n    # Hide any personal user dir/names from diag output\n    confname = unexpanduser(confpath)\n\n    # Read and process the conf file\n    get_conf(confpath, confname)\n\n    # Complete any final configuration required\n    for h in handlers.values():\n        h.complete_setup()\n\n    return confname\n\ndef dbus_listener():\n    'Listen on DBus'\n    DBusGMainLoop(set_as_default=True)\n\n    def proc(busname, vals, _):\n        global session_locked\n        if busname == 'org.freedesktop.login1.Session':\n            val = vals.get('LockedHint')\n            if val is not None:\n                session_locked = bool(val)\n\n    # Listen to get session locked state\n    dbus.SystemBus().add_signal_receiver(\n        proc,\n        'PropertiesChanged',\n        'org.freedesktop.DBus.Properties',\n        'org.freedesktop.login1',\n    )\n\n    GLib.MainLoop().run()\n\ndef gethash():\n    'Return a crude hash identifier for this software version'\n    progs = (PROGPATH, PROGPATH.with_name(PROGNAME + '-setup'))\n    return hashlib.md5(b''.join(p.read_bytes() for p in progs if\n        p.exists())).hexdigest()\n\ndef main():\n    global args, abzsquare\n\n    # Set up command line arguments\n    opt = argparse.ArgumentParser(description=__doc__)\n    opt.add_argument('-c', '--conffile',\n            help='alternative configuration file')\n    opt.add_argument('-v', '--verbose', action='store_true',\n            help='output diagnostic messages')\n    opt.add_argument('-d', '--debug', action='store_true',\n            help='output diagnostic messages only, do not action gestures')\n    opt.add_argument('-r', '--raw', action='store_true',\n            help='output raw libinput debug-event messages only, '\n            'do not action gestures')\n    opt.add_argument('-l', '--list', action='store_true',\n            help='just list out environment and configuration')\n    opt.add_argument('--device',\n            help='explicit device name to use (or path if starts with /)')\n    # Test/diag hidden option to specify a file containing libinput list\n    # device output to parse\n    opt.add_argument('--device-list', help=argparse.SUPPRESS)\n    args = opt.parse_args()\n\n    if args.debug or args.raw or args.list:\n        args.verbose = True\n\n    # Libinput changed the way in which it's utilities are called\n    libvers, has_subcmd = get_libinput_vers()\n    if not libvers:\n        sys.exit('libinput helper tools do not seem to be installed?')\n\n    if has_subcmd:\n        cmd_debug_events = 'libinput debug-events'\n        cmd_list_devices = 'libinput list-devices'\n    else:\n        cmd_debug_events = 'libinput-debug-events'\n        cmd_list_devices = 'libinput-list-devices'\n\n    if args.verbose:\n        # Output various info/version info\n        xsession = os.getenv('XDG_SESSION_DESKTOP') or \\\n                os.getenv('DESKTOP_SESSION') or 'unknown'\n        xtype = os.getenv('XDG_SESSION_TYPE') or 'unknown'\n        xstr = f'session {xsession}+{xtype}'\n        pf = platform.platform()\n        pfpy = f'python {platform.python_version()}'\n        lstr = f'libinput {libvers}'\n        print(f'{PROGNAME}: {xstr} on {pf}, {pfpy}, {lstr}')\n\n        # Output hash version/checksum of this program\n        print(f'Hash: {gethash()}')\n\n    # Read and process the conf file\n    confname = read_conf(args.conffile, CONFNAME)\n\n    # List out available gestures if that is asked for\n    if args.verbose:\n        if not args.raw:\n            print(f'Gestures configured in {confname}:')\n            for h in handlers.values():\n                for mpair, cmd in h.motions.items():\n                    motion, fingers = (mpair, '') \\\n                            if isinstance(mpair, str) else mpair\n                    print(f'{h.name.lower()} {motion:10}{fingers:>2} {cmd}')\n\n            if swipe_min_threshold:\n                print(f'swipe_threshold {swipe_min_threshold}')\n            if timeoutv != DEFAULT_TIMEOUT:\n                print(f'timeout {timeoutv}')\n\n        if args.device:\n            print(f'device {args.device}')\n\n    # Get touchpad device\n    if not args.device or args.device.lower() != \"all\":\n        device = get_device(args.device, cmd_list_devices, args.device_list)\n        if not device:\n            sys.exit('Could not determine touchpad device.')\n    else:\n        device = None\n\n    if args.verbose:\n        if device:\n            print(f\"{PROGNAME}: device {device.get('_diag')}\")\n        else:\n            print(f'{PROGNAME}: monitoring all devices')\n\n    # If just called to list out above environment info then exit now\n    if args.list:\n        status = run((PROGNAME + '-setup', 'status'), check=False)\n        if status:\n            print(status.strip())\n        sys.exit()\n\n    # Make sure only one instance running for current user\n    user = getpass.getuser()\n    lockfile, pidfile = open_lock(user)\n\n    # Note we get the lockfile back merely to keep it held open for this\n    # running instance\n    if not lockfile:\n        sys.exit(f'{PROGNAME} is already running for {user}, terminating ..')\n\n    # Set up square of swipe threshold\n    abzsquare = swipe_min_threshold**2\n\n    # Note your must \"sudo gpasswd -a $USER input\" then reboot for\n    # permission to access the device.\n    devstr = f\" --device {device.get('_path')}\" if device else ''\n    command = f'stdbuf -oL -- {cmd_debug_events}{devstr}'\n\n    if dbus_imported:\n        t = threading.Thread(target=dbus_listener)\n        t.daemon = True\n        t.start()\n\n    cmd = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE,\n            bufsize=1, universal_newlines=True)\n\n    # Store PIDs for potential kill\n    pidfile.write(f'{os.getpid()}\\n{cmd.pid}\\n')\n    pidfile.flush()\n    os.fsync(pidfile.fileno())\n\n    # Sit in a loop forever reading the libinput messages ..\n    handler = None\n    for line in cmd.stdout:\n\n        # Ignore gestures if this session is locked\n        if session_locked:\n            continue\n\n        # Just output raw messages if in that mode\n        if args.raw:\n            print(line.strip())\n            continue\n\n        # Only interested in gestures\n        if 'GESTURE_' not in line or ' +' not in line:\n            continue\n\n        # Split received message line into relevant fields\n        split1, split2 = line.split(' +', maxsplit=1)\n\n        gevent = split1.split(maxsplit=2)[1]\n        try:\n            gesture, event = gevent[8:].split('_')\n        except Exception:\n            continue\n\n        _, fingers, *argslist = split2.split(maxsplit=2)\n        params = argslist[0] if argslist else ''\n\n        # Action each type of event\n        if event == 'UPDATE':\n            if handler:\n                # Split parameters into list of clean numbers\n                if not handler.update(re.split(r'[^-.\\d]+', params)):\n                    print('Could not parse {gesture} {event}: {params}',\n                            file=sys.stderr)\n\n        elif event == 'BEGIN':\n            handler = handlers.get(gesture)\n            if handler:\n                handler.begin(fingers)\n            else:\n                print(f'Unknown gesture received: {gesture}.',\n                        file=sys.stderr)\n        elif event == 'END':\n            # Ignore gesture if final action is cancelled\n            if handler:\n                if params != 'cancelled':\n                    handler.end()\n                handler = None\n        else:\n            print(f'Unknown gesture {gesture} + event {event} received.',\n                    file=sys.stderr)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "libinput-gestures-setup",
          "type": "blob",
          "size": 9.2666015625,
          "content": "#!/bin/bash\n# User setup script.\n# (C) Mark Blakeney, Aug 2016.\n\nPROG=\"$(basename $0)\"\nNAME=${PROG%-*}\n\nBINDIR=\"/usr/bin\"\nSYSDIR=\"/usr/lib/systemd/user\"\nAPPDIR=\"/usr/share/applications\"\nICOBAS=\"/usr/share/icons/hicolor\"\nICODIR=\"$ICOBAS/128x128/apps\"\nOCODIR=\"/usr/share/pixmaps\"\nDOCDIR=\"/usr/share/doc/$NAME\"\nCNFDIR=\"/etc\"\nHCFDIR=\"${XDG_CONFIG_HOME:-$HOME/.config}\"\nAUTDIR=\"$HCFDIR/autostart\"\nSVCFLG=\"$HCFDIR/.$NAME-is-service\"\nCHECKSECS=6\n\nusage() {\n    echo \"Usage:\"\n    echo\n    echo \"As root:\"\n    echo \"  $ sudo $PROG install|uninstall\"\n    echo \"  -d <dir> (option sets DESTDIR for install/uninstall)\"\n    echo\n    echo \"As user:\"\n    echo \"  $ $PROG command [command ..]\"\n    echo \"  where command is any of:\"\n    echo \"  start|stop|restart|autostart|autostop|status|desktop|service\"\n    echo \"  default command = status.\"\n    echo\n    exit 1\n}\n\n# Process command line options\nDESTDIR=\"\"\nwhile getopts d: c; do\n    case $c in\n    d) DESTDIR=\"$OPTARG\";;\n    \\?) usage;;\n    esac\ndone\n\nshift $((OPTIND - 1))\n\n# Test if given systemd property is set for given unit\nsysd_prop() {\n    if systemctl --user show -p \"$2\" \"$1\" 2>/dev/null | grep -q \"=$3$\"; then\n\techo 1\n    else\n\techo 0\n    fi\n}\n\n# Launch given desktop app. First work out most suitable launcher.\n# Pretty crude at present but should work for at least GNOME and KDE.\nde_start() {\n    local app=\"$1\"\n    local fullpath=\"$APPDIR/$app.desktop\"\n    local binpath=\"$BINDIR/$app\"\n\n    # All the commands we will potentially try ..\n    local cmds=(\n\t\"kde kioclient5 exec $fullpath\"\n\t\"kde kioclient exec $fullpath\"\n\t\"all gtk-launch $app\"\n\t\"all i3-msg exec $binpath\"\n\t\"all exo-open $fullpath\"\n\t\"all dex $fullpath\"\n    )\n\n    local cmdline\n    for cmdline in \"${cmds[@]}\" ; do\n\tIFS=' ' read de cmd args <<< \"$cmdline\"\n\n        # Skip if the command does not exist\n\tif ! hash $cmd &>/dev/null; then\n\t    continue\n\tfi\n\n\t# Only try KDE commands on KDE\n\tif ! echo $XDG_CURRENT_DESKTOP | grep -q KDE; then\n\t    if [[ $de == kde ]]; then\n\t\tcontinue\n\t    fi\n\tfi\n\n\t# Execute this command\n\t$cmd $args &>/dev/null\n\treturn $?\n    done\n\n    echo \"Don't know how to invoke $app.desktop\" >&2\n    return 1\n}\n\n# Set up desktop entry link for auto start of app, if it doesn't already\n# exist\nde_auto_start() {\n    if [[ ! -f $APPDIR/$NAME.desktop ]]; then\n\tif [[ -e $AUTDIR/$NAME.desktop ]]; then\n\t    echo \"Removed old $AUTDIR/$NAME.desktop\"\n\t    rm -f $AUTDIR/$NAME.desktop\n\tfi\n\treturn 1\n    fi\n\n    if ! cmp -s $APPDIR/$NAME.desktop $AUTDIR/$NAME.desktop; then\n\tif mkdir -p $AUTDIR && cp $APPDIR/$NAME.desktop $AUTDIR; then\n\t    echo \"installed or updated $AUTDIR/$NAME.desktop\"\n\tfi\n    fi\n    return 0\n}\n\n# Action given user command\nuser_action() {\n    local cmd=\"$1\"\n    local pidfile=/tmp/$NAME-$USER.pid\n\n    # Test if systemd is enabled/running\n    if [[ $HAS_SYSD -eq 1 ]]; then\n\tsvc_enabled=$(sysd_prop $NAME.service UnitFileState enabled)\n\tsvc_running=$(sysd_prop $NAME.service SubState running)\n    else\n\tsvc_enabled=0\n\tsvc_running=0\n    fi\n\n    if [[ $cmd == service ]]; then\n\tif [[ $HAS_SYSD -eq 0 ]]; then\n\t    echo \"Systemd not available, can not run as service.\"\n\t    exit 1\n\tfi\n\tmkdir -p \"$(dirname $SVCFLG)\"\n\techo \"# This file created by \\\"$NAME-setup $cmd\\\" command.\" >$SVCFLG\n\trm -fv $AUTDIR/$NAME.desktop\n    elif [[ $cmd == desktop ]]; then\n\trm -f $SVCFLG\n\tif [[ $HAS_SYSD -eq 1 ]]; then\n\t    systemctl --user disable $NAME.service &>/dev/null\n\tfi\n    elif [[ $cmd == start ]]; then\n\tSTARTAS=\"\"\n\tif [[ -f $SVCFLG ]]; then\n\t    if [[ $HAS_SYSD -eq 0 ]]; then\n\t\techo \"Systemd service is not available.\"\n\t\texit 1\n\t    fi\n\t    if systemctl --user start $NAME.service; then\n\t\tSTARTAS=\"user service\"\n\t    fi\n\telse\n\t    if [[ ! -f $APPDIR/$NAME.desktop ]]; then\n\t\techo \"$NAME is not installed.\"\n\t\texit 1\n\t    fi\n\t    if de_start \"$NAME\"; then\n\t\tSTARTAS=\"desktop application\"\n\t    fi\n\tfi\n\n\tif [[ -n $STARTAS ]]; then\n\t    # Wait some time to start ..\n\t    done=0\n\t    for _ in $(seq $CHECKSECS); do\n\t\tsleep 1\n\t\tif ps \"$(head -1 $pidfile 2>/dev/null)\" &>/dev/null; then\n\t\t    done=1\n\t\t    break\n\t\tfi\n\t    done\n\n\t    if [[ $done -eq 1 ]]; then\n\t\techo \"$NAME started as a $STARTAS\".\n\t    else\n\t\techo \"$NAME failed to start as a $STARTAS\". >&2\n\t    fi\n\tfi\n    elif [[ $cmd == stop ]]; then\n\tSTARTAS=\"\"\n\tif [[ $svc_running -eq 1 ]]; then\n\t    systemctl --user stop $NAME.service\n\t    STARTAS=\"user service\"\n\telse\n\t    if [[ -f $pidfile ]]; then\n\t\tlocal killed=0\n\t\twhile read pid; do\n\t\t    if kill $pid &>/dev/null; then\n\t\t\tkilled=1\n\t\t    fi\n\t\tdone <$pidfile\n\t\tif [[ $killed -ne 0 ]]; then\n\t\t    STARTAS=\"desktop application\"\n\t\tfi\n\t    fi\n\tfi\n\n\tif [[ -n $STARTAS ]]; then\n\t    # Wait some time to stop ..\n\t    done=0\n\t    for _ in $(seq $CHECKSECS); do\n\t\tsleep 1\n\t\tif ! ps \"$(head -1 $pidfile 2>/dev/null)\" &>/dev/null; then\n\t\t    done=1\n\t\t    break\n\t\tfi\n\t    done\n\n\t    if [[ $done -eq 1 ]]; then\n\t\techo \"$NAME stopped $STARTAS\".\n\t    else\n\t\techo \"$NAME failed to stop $STARTAS\". >&2\n\t    fi\n\tfi\n    elif [[ $cmd == autostart ]]; then\n\tif [[ $HAS_SYSD -eq 1 ]]; then\n\t    # Be sure to remove any old systemd links ..\n\t    systemctl --user disable $NAME.service &>/dev/null\n\tfi\n\tif [[ -f $SVCFLG ]]; then\n\t    if [[ $HAS_SYSD -eq 0 ]]; then\n\t\techo \"Systemd service is not available.\"\n\t\texit 1\n\t    fi\n\n\t    if systemctl --user enable $NAME.service; then\n\t\techo \"$NAME enabled as a user service.\"\n\t    fi\n\t    rm -fv $AUTDIR/$NAME.desktop\n\telif ! de_auto_start; then\n\t    echo \"$NAME is not installed.\"\n\t    exit 1\n\tfi\n    elif [[ $cmd == autostop ]]; then\n\tif [[ $HAS_SYSD -eq 1 ]]; then\n\t    systemctl --user disable $NAME.service &>/dev/null\n\tfi\n\trm -fv $AUTDIR/$NAME.desktop\n    elif [[ $cmd == status ]]; then\n\tif [[ -f $BINDIR/$NAME ]]; then\n\t    echo \"$NAME is installed.\"\n\telse\n\t    echo \"$NAME is not installed.\"\n\tfi\n\n\tif [[ -f $SVCFLG ]]; then\n\t    echo \"$NAME is set up as a user service.\"\n\telse\n\t    echo \"$NAME is set up as a desktop application.\"\n\tfi\n\n\tif [[ $svc_running -eq 1 ]]; then\n\t    echo \"$NAME is currently running as a user service.\"\n\telif ps \"$(head -1 $pidfile 2>/dev/null)\" &>/dev/null; then\n\t    echo \"$NAME is currently running as a desktop application.\"\n\telse\n\t    echo \"$NAME is not currently running.\"\n\tfi\n\n\tif [[ $svc_enabled -eq 1 ]]; then\n\t    echo \"$NAME is set to autostart as a user service.\"\n\t    rm -fv $AUTDIR/$NAME.desktop\n\telse\n\t    if [[ -f $AUTDIR/$NAME.desktop ]]; then\n\t\techo \"$NAME is set to autostart as a desktop application.\"\n\t    else\n\t\techo \"$NAME is not set to autostart.\"\n\t    fi\n\tfi\n\n\tif [[ -f $HCFDIR/$NAME.conf ]]; then\n\t    echo \"$NAME is using custom configuration file.\"\n\telse\n\t    echo \"$NAME is using default configuration file.\"\n\tfi\n    else\n\techo \"ERROR: \\\"$cmd\\\" is not a valid user command\" >&2\n    fi\n}\n\ncmd=\"$1\"\nif [[ $cmd == install || $cmd == uninstall ]]; then\n    DESTDIR=\"${DESTDIR%%+(/)}\"\n    if [[ -z $DESTDIR && $(id -un) != root ]]; then\n\techo \"Install or uninstall must be run as sudo/root.\"\n\texit 1\n    fi\n\n    if [[ $# -ne 1 ]]; then\n\tusage\n    fi\n\n    # Remove any old files from earlier versions of program\n    rm -f $DESTDIR$OCODIR/$NAME.png\n    rm -f $DESTDIR$ICODIR/$NAME.png\n\n    if [[ $cmd == install ]]; then\n\tinstall -CDv -m 755 -t $DESTDIR$BINDIR $NAME-setup\n\tinstall -CDv -m 755 -t $DESTDIR$BINDIR $NAME\n\tinstall -CDv -m 644 -t $DESTDIR$SYSDIR $NAME.service\n\tinstall -CDv -m 644 -t $DESTDIR$APPDIR $NAME.desktop\n\tinstall -CDv -m 644 -t $DESTDIR$ICODIR $NAME.svg\n\tinstall -CDv -m 644 -t $DESTDIR$CNFDIR $NAME.conf\n\tinstall -CDv -m 644 -t $DESTDIR$DOCDIR README.md\n    else\n\trm -rfv $DESTDIR$BINDIR/$NAME\n\trm -rfv $DESTDIR$SYSDIR/$NAME.service\n\trm -rfv $DESTDIR$APPDIR/$NAME.desktop\n\trm -rfv $DESTDIR$ICODIR/$NAME.svg\n\trm -rfv $DESTDIR$CNFDIR/$NAME.conf\n\trm -rfv $DESTDIR$DOCDIR\n\trm -rfv $DESTDIR$BINDIR/$NAME-setup\n    fi\n\n    if [[ -z $DESTDIR ]]; then\n\tif [[ -x /usr/bin/update-desktop-database ]]; then\n\t    /usr/bin/update-desktop-database -q\n\tfi\n\tif [[ -x /usr/bin/gtk-update-icon-cache ]]; then\n\t    /usr/bin/gtk-update-icon-cache $ICOBAS\n\tfi\n    fi\nelse\n    if [[ $(id -un) == root ]]; then\n\techo \"Non-installation commands must be run as your own user.\"\n\texit 1\n    fi\n\n    # Test if systemd is installed\n    if type systemctl &>/dev/null; then\n\tHAS_SYSD=$(sysd_prop graphical-session.target ActiveState active)\n    else\n\tHAS_SYSD=0\n    fi\n\n    if [[ $HAS_SYSD -eq 1 ]]; then\n\t# Reload systemd if service file has been updated\n\tif systemctl --user status $NAME.service 2>&1 |\n\t    grep -q ' changed on disk'; then\n\t    echo \"$NAME.service has changed, reloading systemd user daemon ..\"\n\t    systemctl --user daemon-reload\n\t    sleep 2\n\tfi\n    fi\n\n    # Remove any old configuration from earlier versions of program\n    rm -fv ~/bin/$NAME 2>/dev/null\n    rm -fv ~/.local/bin/$NAME 2>/dev/null\n    rm -fv ~/.local/share/applications/$NAME.desktop 2>/dev/null\n    rm -fv ~/.local/share/icons/$NAME.png 2>/dev/null\n\n    # Look for and update any autostart file if it is a link or not\n    # pointing to the latest desktop entry. Apparently user autostart\n    # files should not be symlinks to system dir files.\n    if [[ -e $AUTDIR/$NAME.desktop ]]; then\n\tif [[ -L $AUTDIR/$NAME.desktop ]]; then\n\t    echo \"Removed old $AUTDIR/$NAME.desktop link\"\n\t    rm -f $AUTDIR/$NAME.desktop\n\tfi\n\tde_auto_start\n    fi\n\n    # Execute each command given on command line ..\n    if [[ $# -lt 1 ]]; then\n\tset -- status\n    fi\n    for cmd in \"$@\"; do\n\tif [[ $cmd == restart ]]; then\n\t    user_action \"stop\"\n\t    cmd=start\n\tfi\n\n\tuser_action \"$cmd\"\n    done\nfi\n\nexit 0\n"
        },
        {
          "name": "libinput-gestures.conf",
          "type": "blob",
          "size": 8.6591796875,
          "content": "# Configuration file for libinput-gestures.\n# Mark Blakeney, Sep 2015\n#\n# The default configuration file exists at /etc/libinput-gestures.conf\n# but a user can create a personal custom configuration file at\n# ~/.config/libinput-gestures.conf.\n#\n# Lines starting with '#' and blank lines are ignored. Currently\n# \"gesture\" and \"device\" configuration keywords are supported as\n# described below. The keyword can optionally be appended with a \":\" (to\n# maintain compatibility with original format configuration files).\n#\n# Each gesture line has 3 [or 4] arguments separated by whitespace:\n#\n# action motion [finger_count] command\n#\n# where action and motion is either:\n#     swipe up\n#     swipe down\n#     swipe left\n#     swipe right\n#     swipe left_up\n#     swipe left_down\n#     swipe right_up\n#     swipe right_down\n#     pinch in\n#     pinch out\n#     pinch clockwise\n#     pinch anticlockwise\n#     hold on (hold gesture available since libinput 1.19)\n#     hold on+1.5 (another hold gesture, invoked after delay)\n#\n# command is the remainder of the line and is any valid shell command +\n# arguments. NOTE that the command is run directly and is not parsed by\n# your shell. If you want shell parsing and substitutions etc then use a\n# script as described in the CONFIGURATION section of the main README.\n#\n# finger_count is a single numeric digit and is optional (and is\n# typically 3 or 4). If specified then the command is executed when\n# exactly that number of fingers is used in the gesture. If not\n# specified then the command is executed when that gesture is executed\n# with any number of fingers. Gesture lines specified with finger_count\n# have priority over the same gesture specified without any\n# finger_count.\n#\n# Typically command will be _internal, or xdotool. See \"man xdotool\" for\n# the many things you can action with that tool. Note that unfortunately\n# xdotool does not work with native Wayland clients.\n\n###############################################################################\n# SWIPE GESTURES:\n###############################################################################\n\n# Note the default is an \"internal\" command that uses wmctrl to switch\n# workspaces and, unlike xdotool, works on both Xorg and Wayland (via\n# XWayland). It also can be configured for vertical and horizontal\n# switching over tabular workspaces, as per the example below. You can\n# also add \"-w\" to the internal command to allow wrapping workspaces.\n# Ensure you install wmctrl if you use _internal.\n\n# Move to next workspace (works for GNOME/KDE/etc on Wayland and Xorg)\ngesture swipe up\t_internal ws_up\n\n# NOTE ABOUT FINGER COUNT:\n# The above command will configure this command for all fingers (i.e. 3\n# for 4) but to configure it for 3 fingers only, change it to:\n# gesture swipe up\t3 _internal ws_up\n# Then you can configure something else for 4 fingers or leave 4 fingers\n# unconfigured. You can configure an explicit finger count like this for\n# all example commands in this configuration file.\n#\n# gesture swipe up\txdotool key super+Page_Down\n\n# Move to prev workspace (works for GNOME/KDE/etc on Wayland and Xorg)\ngesture swipe down\t_internal ws_down\n# gesture swipe down\txdotool key super+Page_Up\n\n# Browser go forward (works only for Xorg, and Xwayland clients)\ngesture swipe left\txdotool key alt+Right\n\n# Browser go back (works only for Xorg, and Xwayland clients)\ngesture swipe right\txdotool key alt+Left\n\n# Open new browser tag (\"hold on\" available since libinput 1.19)\n# gesture hold on 4 xdotool key control+t\n\n# NOTE: If you don't use \"natural\" scrolling direction for your touchpad\n# then you may want to swap the above default left/right and up/down\n# configurations.\n\n# Optional extended swipe gestures, e.g. for browser tab navigation:\n#\n# Jump to next open browser tab\n# gesture swipe right_up xdotool key control+Tab\n#\n# Jump to previous open browser tab\n# gesture swipe left_up xdotool key control+shift+Tab\n#\n# Close current browser tab\n# gesture swipe left_down xdotool key control+w\n#\n# Reopen and jump to last closed browser tab\n# gesture swipe right_down xdotool key control+shift+t\n\n# Example of 8 static workspaces, e.g. using KDE virtual-desktops,\n# arranged in 2 rows of 4 columns across using swipe up/down/left/right\n# to navigate in fixed planes. You can also add the \"-w/--wrap\" option\n# to allow wrapping in any direction. You must configure your virtual\n# desktops with the same column dimension.\n# gesture swipe up\t_internal --cols 4 ws_up\n# gesture swipe down\t_internal --cols 4 ws_down\n# gesture swipe left\t_internal --cols 4 ws_left\n# gesture swipe right\t_internal --cols 4 ws_right\n#\n# Example of 16 static workspaces, e.g. using KDE virtual-desktops,\n# arranged in 4 rows of 4 columns across using swipe up/down/left/right\n# to navigate in fixed planes, and also using swipe\n# left_up/left_down/right_up/right_down to navigate diagonally. You can\n# also add the \"-w/--wrap\" option to allow wrapping in any direction\n# and/or diagonally. You must configure your virtual desktops with the\n# same column dimension.\n# gesture swipe up\t\t_internal --cols 4 ws_up\n# gesture swipe down\t\t_internal --cols 4 ws_down\n# gesture swipe left\t\t_internal --cols 4 ws_left\n# gesture swipe right\t\t_internal --cols 4 ws_right\n# gesture swipe left_up\t\t_internal --cols 4 ws_left_up\n# gesture swipe left_down\t_internal --cols 4 ws_left_down\n# gesture swipe right_up\t_internal --cols 4 ws_right_up\n# gesture swipe right_down\t_internal --cols 4 ws_right_down\n\n# Example virtual desktop switching for Ubuntu Unity/Compiz. The\n# _internal command does not work for Compiz but you can explicitly\n# configure the swipe commands to work for a Compiz virtual 2\n# dimensional desktop as follows:\n# gesture swipe up\txdotool key ctrl+alt+Up\n# gesture swipe down\txdotool key ctrl+alt+Down\n# gesture swipe left\txdotool key ctrl+alt+Left\n# gesture swipe right\txdotool key ctrl+alt+Right\n\n# Example to change audio volume (this works on both Wayland and Xorg):\n# Note each swipe only steps volume once.\n# swipe up   4 amixer set Master \"8%+\"\n# swipe down 4 amixer set Master \"8%-\"\n\n###############################################################################\n# PINCH GESTURES:\n###############################################################################\n\n# GNOME SHELL open/close overview (works for GNOME on Xorg only)\ngesture pinch in\txdotool key super+s\ngesture pinch out\txdotool key super+s\n\n# KDE Plasma open/close overview\n# gesture pinch in\txdotool key ctrl+F9\n# gesture pinch out\txdotool key ctrl+F9\n\n# GNOME SHELL open/close overview (works for GNOME on Wayland and Xorg)\n# Note since GNOME 3.24 on Wayland this is implemented natively so no\n# real point configuring for Wayland.\n# gesture pinch in dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.toggle();'\n# gesture pinch out dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'Main.overview.toggle();'\n\n# Optional extended pinch gestures:\n# gesture pinch clockwise <whatever command>\n# gesture pinch anticlockwise <whatever command>\n\n###############################################################################\n# This application normally determines your touchpad device\n# automatically. Some users may have multiple touchpads but by default\n# we use only the first one found. However, you can choose to specify\n# the explicit device name to use. Run \"libinput list-devices\" to work\n# out the name of your device (from the \"Device:\" field). Then add a\n# device line specifying that name, e.g:\n#\n# device DLL0665:01 06CB:76AD Touchpad\n#\n# If the device name starts with a '/' then it is instead considered as\n# the explicit device path although since device paths can change\n# through reboots this is best to be a symlink. E.g. instead of specifying\n# /dev/input/event12, you should use the corresponding full path link\n# under /dev/input/by-path/ or /dev/input/by-id/.\n#\n# You can choose to use ALL touchpad devices by setting the device name\n# to \"all\". E.g. Do this if you have multiple touchpads which you want\n# to use in parallel. This reduces performance slightly so only set this\n# if you have to.\n#\n# device all\n\n###############################################################################\n# You can set a minimum travel distance threshold before swipe gestures\n# are actioned using the swipe_threshold configuration command.\n# Specify this value in dots. The default is 0.\n# E.g. set it to 100 dots with \"swipe_threshold 100\".\n# swipe_threshold 0\n\n###############################################################################\n# You can set a timeout on gestures from start to end. The default is\n# the value commented below. It can be any value in float secs >= 0.\n# 0 = no timeout. E.g. set it to 2 secs with \"timeout 2\".\n# timeout 1.5\n"
        },
        {
          "name": "libinput-gestures.desktop",
          "type": "blob",
          "size": 0.2421875,
          "content": "[Desktop Entry]\nType=Application\nNoDisplay=true\nTerminal=false\nName=Libinput Gestures\nExec=/usr/bin/libinput-gestures\nIcon=libinput-gestures\nComment=Background application to intercept and action libinput gestures from touchpad.\nCategories=System;\n"
        },
        {
          "name": "libinput-gestures.service",
          "type": "blob",
          "size": 0.291015625,
          "content": "[Unit]\nDescription=Actions gestures on your touchpad using libinput\nDocumentation=https://github.com/bulletmark/libinput-gestures\nPartOf=graphical-session.target\nAfter=graphical-session.target\n\n[Service]\nType=simple\nExecStart=/usr/bin/libinput-gestures\n\n[Install]\nWantedBy=graphical-session.target\n"
        },
        {
          "name": "libinput-gestures.svg",
          "type": "blob",
          "size": 16.294921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   inkscape:export-ydpi=\"90\"\n   inkscape:export-xdpi=\"90\"\n   inkscape:export-filename=\"/home/fatih/Documents/Github Stuff/libinput-gestures/libinput-gestures.png\"\n   width=\"128\"\n   height=\"128\"\n   viewBox=\"0 0 33.866666 33.866668\"\n   version=\"1.1\"\n   id=\"svg8\"\n   inkscape:version=\"1.1-dev (05e9e8ed4a, 2020-04-03)\"\n   sodipodi:docname=\"libinput-gestures.svg\">\n  <defs\n     id=\"defs2\">\n    <linearGradient\n       id=\"linearGradient887\"\n       inkscape:collect=\"always\">\n      <stop\n         id=\"stop883\"\n         offset=\"0\"\n         style=\"stop-color:#3d3846;stop-opacity:1\" />\n      <stop\n         id=\"stop885\"\n         offset=\"1\"\n         style=\"stop-color:#f6f5f4;stop-opacity:1\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient4099\">\n      <stop\n         id=\"stop1001\"\n         style=\"stop-color:#a7a7a7;stop-opacity:1\"\n         offset=\"0\" />\n      <stop\n         id=\"stop1003\"\n         style=\"stop-color:#d1d1d1;stop-opacity:1\"\n         offset=\"1\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient4633\">\n      <stop\n         offset=\"0\"\n         style=\"stop-color:#333333;stop-opacity:0.43529412\"\n         id=\"stop4635\" />\n      <stop\n         offset=\"1\"\n         style=\"stop-color:#444444;stop-opacity:0.54901963\"\n         id=\"stop4637\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient4455\">\n      <stop\n         id=\"stop4457\"\n         style=\"stop-color:#000000;stop-opacity:0.11728395\"\n         offset=\"0\" />\n      <stop\n         id=\"stop4459\"\n         style=\"stop-color:#ffffff;stop-opacity:0\"\n         offset=\"0.05203352\" />\n      <stop\n         id=\"stop4461\"\n         style=\"stop-color:#ffffff;stop-opacity:0.15686275\"\n         offset=\"0.96417594\" />\n      <stop\n         id=\"stop4463\"\n         style=\"stop-color:#ffffff;stop-opacity:0.39215687\"\n         offset=\"1\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient5048\">\n      <stop\n         id=\"stop5050\"\n         style=\"stop-color:#000000;stop-opacity:0\"\n         offset=\"0\" />\n      <stop\n         id=\"stop5056\"\n         style=\"stop-color:#000000;stop-opacity:1\"\n         offset=\"0.5\" />\n      <stop\n         id=\"stop5052\"\n         style=\"stop-color:#000000;stop-opacity:0\"\n         offset=\"1\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient5060\">\n      <stop\n         id=\"stop5062\"\n         style=\"stop-color:#000000;stop-opacity:1\"\n         offset=\"0\" />\n      <stop\n         id=\"stop5064\"\n         style=\"stop-color:#000000;stop-opacity:0\"\n         offset=\"1\" />\n    </linearGradient>\n    <linearGradient\n       id=\"linearGradient4099-7\">\n      <stop\n         offset=\"0\"\n         style=\"stop-color:#c0bfbc;stop-opacity:1\"\n         id=\"stop4101\" />\n      <stop\n         offset=\"1\"\n         style=\"stop-color:#f6f5f4;stop-opacity:1\"\n         id=\"stop4103\" />\n    </linearGradient>\n    <linearGradient\n       gradientTransform=\"matrix(0.03692506,0,0,0.03051161,0.4309538,289.04493)\"\n       gradientUnits=\"userSpaceOnUse\"\n       xlink:href=\"#linearGradient4633\"\n       id=\"linearGradient3102-8\"\n       y2=\"29.022623\"\n       x2=\"30.643436\"\n       y1=\"-17.850489\"\n       x1=\"30.643436\" />\n    <linearGradient\n       x1=\"23.99999\"\n       y1=\"5.9748311\"\n       x2=\"23.99999\"\n       y2=\"41.781448\"\n       id=\"linearGradient3095-0-5\"\n       xlink:href=\"#linearGradient4455\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.04230545,0,0,0.03689171,0.11728308,288.34991)\" />\n    <linearGradient\n       gradientTransform=\"matrix(1.4281595,0,0,1.5273373,-8.3434514,-9.7827539)\"\n       x1=\"18.927025\"\n       y1=\"43.996307\"\n       x2=\"18.387106\"\n       y2=\"8.4976816\"\n       id=\"linearGradient4097-5-3\"\n       xlink:href=\"#linearGradient4099-7\"\n       gradientUnits=\"userSpaceOnUse\" />\n    <radialGradient\n       cx=\"605.71429\"\n       cy=\"486.64789\"\n       r=\"117.14286\"\n       fx=\"605.71429\"\n       fy=\"486.64789\"\n       id=\"radialGradient19613-0\"\n       xlink:href=\"#linearGradient5060\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(9.6716257e-4,0,0,4.9593175e-4,0.98238363,290.04092)\" />\n    <radialGradient\n       cx=\"605.71429\"\n       cy=\"486.64789\"\n       r=\"117.14286\"\n       fx=\"605.71429\"\n       fy=\"486.64789\"\n       id=\"radialGradient19616-8\"\n       xlink:href=\"#linearGradient5060\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(-9.6716257e-4,0,0,4.9593175e-4,0.70323122,290.04092)\" />\n    <linearGradient\n       x1=\"302.85715\"\n       y1=\"366.64789\"\n       x2=\"302.85715\"\n       y2=\"609.50507\"\n       id=\"linearGradient19619-1\"\n       xlink:href=\"#linearGradient5048\"\n       gradientUnits=\"userSpaceOnUse\"\n       gradientTransform=\"matrix(0.00299238,0,0,4.9593175e-4,-0.23872549,290.04095)\" />\n    <linearGradient\n       gradientTransform=\"matrix(18.866877,0,0,28.265013,52.0008,-8160.5329)\"\n       gradientUnits=\"userSpaceOnUse\"\n       y2=\"289.43668\"\n       x2=\"-1.8258322\"\n       y1=\"290.25775\"\n       x1=\"-1.8256922\"\n       id=\"linearGradient889\"\n       xlink:href=\"#linearGradient887\"\n       inkscape:collect=\"always\" />\n  </defs>\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"2.102295\"\n     inkscape:cx=\"-38.730492\"\n     inkscape:cy=\"36.643361\"\n     inkscape:document-units=\"mm\"\n     inkscape:current-layer=\"layer3\"\n     showgrid=\"false\"\n     units=\"px\" />\n  <metadata\n     id=\"metadata5\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <rect\n       width=\"31.419514\"\n       height=\"27.492069\"\n       rx=\"0.67524314\"\n       ry=\"0.6752432\"\n       x=\"1.5027969\"\n       y=\"3.96417\"\n       id=\"rect1006\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:url(#linearGradient4097-5-3);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;marker:none;enable-background:accumulate\" />\n    <path\n       d=\"m 1.5029651,24.923143 v 5.833516 c 0,0.386314 0.3113714,0.697916 0.6985774,0.697916 H 32.223193 c 0.38722,0 0.699107,-0.311602 0.699107,-0.697916 v -5.833516 z\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#b0afad;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;marker:none;enable-background:accumulate\"\n       id=\"rect1008\" />\n    <path\n       d=\"m 1.5029698,23.110385 v 1.813122 H 32.922304 v -1.813122 z\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:url(#linearGradient889);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;marker:none;enable-background:accumulate\"\n       id=\"rect972\" />\n    <path\n       d=\"m 1.5029651,24.923143 v 0.287913 H 32.922304 v -0.287913 z\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#deddda;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;marker:none;enable-background:accumulate\"\n       id=\"path967\" />\n    <path\n       id=\"path1019\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#3d3846;stroke-width:0.264584;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker:none;enable-background:accumulate\"\n       d=\"m 1.5029651,24.923143 v 5.833516 c 0,0.386314 0.3113714,0.697916 0.6985774,0.697916 H 32.223193 c 0.38722,0 0.699107,-0.311602 0.699107,-0.697916 v -5.833516 z\" />\n    <path\n       id=\"path891\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#77767b;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;marker:none;enable-background:accumulate\"\n       d=\"m 1.5029651,30.38219 v 0.37538 c 0,0.386314 0.3113677,0.697916 0.6985774,0.697916 H 32.223193 c 0.38722,0 0.699107,-0.311602 0.699107,-0.697916 v -0.37538 c 0,0.386314 -0.311887,0.697916 -0.699107,0.697916 H 2.2015434 c -0.3872243,0 -0.6985774,-0.311602 -0.6985783,-0.697916 z\" />\n    <path\n       id=\"rect907\"\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;marker:none;enable-background:accumulate\"\n       d=\"m 2.2015434,3.964723 c -0.3872243,0 -0.6985774,0.311602 -0.6985774,0.6979155 v 0.5503146 c 0,-0.3863136 0.311355,-0.6997377 0.6985774,-0.6997377 H 32.223193 c 0.387202,0 0.699107,0.3116019 0.699107,0.6997377 V 4.6626385 c 0,-0.3863135 -0.311905,-0.6979155 -0.699107,-0.6979155 z\" />\n    <rect\n       style=\"color:#000000;display:inline;overflow:visible;visibility:visible;fill:none;fill-opacity:1;fill-rule:nonzero;stroke:#3d3846;stroke-width:0.264582;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;marker:none;enable-background:accumulate\"\n       id=\"rect1017\"\n       y=\"3.96417\"\n       x=\"1.5027969\"\n       ry=\"0.6752432\"\n       rx=\"0.67524314\"\n       height=\"27.492069\"\n       width=\"31.419514\" />\n    <g\n       id=\"g921\"\n       transform=\"matrix(19.74871,0,0,18.861745,0.56819342,-5443.6074)\"\n       style=\"stroke-width:0.212278\">\n      <rect\n         style=\"display:inline;overflow:visible;visibility:visible;opacity:0.3;fill:url(#linearGradient19619-1);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.0137089;marker:none\"\n         id=\"rect2879\"\n         y=\"290.22278\"\n         x=\"0.12036061\"\n         height=\"0.12044057\"\n         width=\"1.4448938\" />\n      <path\n         style=\"display:inline;overflow:visible;visibility:visible;opacity:0.3;fill:url(#radialGradient19616-8);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.0137089;marker:none\"\n         id=\"path2881\"\n         d=\"m 0.12036056,290.22276 c 0,0 0,0.12043 0,0.12043 -0.0498065,2.3e-4 -0.120407817963,-0.027 -0.120407817963,-0.0602 0,-0.0332 0.05558029796,-0.0602 0.120407817963,-0.0602 z\" />\n      <path\n         style=\"display:inline;overflow:visible;visibility:visible;opacity:0.3;fill:url(#radialGradient19613-0);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0.0137089;marker:none\"\n         id=\"path2883\"\n         d=\"m 1.5652544,290.22276 c 0,0 0,0.12043 0,0.12043 0.049806,2.3e-4 0.1204078,-0.027 0.1204078,-0.0602 0,-0.0332 -0.05558,-0.0602 -0.1204078,-0.0602 z\" />\n    </g>\n    <path\n       id=\"path1021\"\n       d=\"M 17.212638,31.457857 V 24.917831\"\n       style=\"fill:#3d3846;stroke:#3d3846;stroke-width:0.264584;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n  </g>\n  <g\n     inkscape:label=\"Layer 2\"\n     id=\"layer3\"\n     inkscape:groupmode=\"layer\">\n    <g\n       transform=\"translate(7.9047907,1.4666454)\"\n       id=\"g1025\">\n      <path\n         sodipodi:nodetypes=\"ccsscsscssscccsscccsssscc\"\n         id=\"path833\"\n         d=\"m 22.312587,9.1409407 c -1.056418,0 -1.913796,0.85645 -1.913796,1.9135283 V 9.7789047 c 0,-1.0568953 -0.857376,-1.915714 -1.913798,-1.915714 -1.05642,0 -1.913798,0.858272 -1.913798,1.915714 V 8.5033414 c 0,-1.0568955 -0.857376,-1.9157142 -1.913798,-1.9157142 -1.056419,0 -1.913798,0.8564498 -1.913798,1.9157142 V 6.9252871 c 0,-1.0568955 -0.857375,-1.915532 -1.913798,-1.915532 -1.0564186,0 -1.9137966,0.8564498 -1.9137966,1.915532 V 16.552876 L 4.1737922,14.53457 h -0.00397 c -0.2805783,-0.189512 -0.6251617,-0.280624 -0.995214,-0.280624 -1.0589894,0 -1.9137977,0.854628 -1.9137977,1.913528 0,0.371736 0.1020911,0.727071 0.2934248,1.020451 l -0.00234,-0.0049 5.8638081,8.561218 c 0.934003,1.490587 2.566993,2.39241 4.3237996,2.39241 h 6.107704 c 3.522491,0 6.379169,-2.856898 6.379169,-6.380004 V 11.057384 c 0,-1.0587173 -0.857376,-1.9137093 -1.91381,-1.9137093 z\"\n         inkscape:connector-curvature=\"0\"\n         style=\"fill:#b5835a;stroke-width:0.352298\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path870\"\n         d=\"m 1.5797803,15.110396 c -0.2001102,0.302491 -0.3199911,0.665116 -0.3199911,1.055074 0,0.371735 0.1022187,0.727071 0.2935451,1.02045 l 5.8629615,8.55484 c 0.9340026,1.490588 2.5670286,2.392593 4.3238342,2.392593 h 6.10626 c 3.522491,0 6.381293,-2.856169 6.381293,-6.379275 v -2.114885 c 0,3.523107 -2.858802,6.379276 -6.381293,6.379276 h -6.106259 c -1.7568046,0 -3.3898306,-0.903828 -4.3238347,-2.392593 z\"\n         style=\"fill:#986a44;stroke-width:0.352298\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path875\"\n         d=\"m 20.398813,10.618408 v 4.138111\"\n         style=\"fill:none;stroke:#63452c;stroke-width:0.264584px;stroke-linecap:round;stroke-linejoin:miter;stroke-opacity:1\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path877\"\n         d=\"M 16.571216,9.5223347 V 14.259778\"\n         style=\"fill:none;stroke:#63452c;stroke-width:0.264584px;stroke-linecap:round;stroke-linejoin:miter;stroke-opacity:1\" />\n      <path\n         inkscape:connector-curvature=\"0\"\n         id=\"path879\"\n         d=\"M 12.74362,8.4745501 V 13.599218\"\n         style=\"fill:none;stroke:#63452c;stroke-width:0.264584px;stroke-linecap:round;stroke-linejoin:miter;stroke-opacity:1\" />\n      <path\n         id=\"path853\"\n         style=\"fill:#cdab8f;stroke-width:0.352298\"\n         d=\"m 10.830361,5.0101196 c -1.0564186,0 -1.9140946,0.8564498 -1.9140946,1.9149853 v 0.5794703 c 0,-1.0587178 0.857676,-1.9149853 1.9140946,-1.9149853 1.056423,0 1.913579,0.858272 1.913579,1.9149853 V 6.9251049 c 0,-1.0568955 -0.857157,-1.9149853 -1.913579,-1.9149853 z m 3.827674,1.5780543 c -1.056419,0 -1.914095,0.8564498 -1.914095,1.9155319 v 0.5794699 c 0,-1.0587173 0.857676,-1.9155315 1.914095,-1.9155315 1.056423,0 1.913579,0.858272 1.913579,1.9155315 V 8.5037058 c 0,-1.0568955 -0.857157,-1.9155319 -1.913579,-1.9155319 z m 3.827675,1.2755635 c -1.05642,0 -1.914096,0.858272 -1.914096,1.9155323 V 10.35874 c 0,-1.0568963 0.857676,-1.9155323 1.914096,-1.9155323 1.056421,0 1.913578,0.858272 1.913578,1.9155323 V 9.7792697 c 0,-1.0568958 -0.857156,-1.9155323 -1.913578,-1.9155323 z m 3.827157,1.2773853 c -1.056417,0 -1.913579,0.85645 -1.913579,1.9135283 v 0.57947 c 0,-1.056895 0.857157,-1.9135273 1.913579,-1.9135273 v 0.0026 c 1.056436,0 1.914094,0.8546273 1.914094,1.9135273 v -0.57947 c 0,-1.0587183 -0.857667,-1.9135273 -1.914094,-1.9135273 z M 3.1750136,14.253946 c -1.0589894,0 -1.9135788,0.854628 -1.9135788,1.913528 0,0.109334 0.00862,0.198623 0.023258,0.297024 0.1367958,-0.923872 0.9279242,-1.630899 1.8903244,-1.630899 0.3700523,0 0.7147122,0.09111 0.9952886,0.280624 h 0.00414 l 4.7418306,2.018488 v -0.57947 L 4.1744394,14.53457 h -0.00414 C 3.8897294,14.345058 3.5450695,14.253946 3.1750136,14.253946 Z\" />\n      <path\n         style=\"fill:none;stroke:#63452c;stroke-width:0.264584;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n         inkscape:connector-curvature=\"0\"\n         d=\"m 22.312585,9.1409407 c -1.056418,0 -1.913794,0.85645 -1.913794,1.9135283 V 9.7789047 c 0,-1.0568953 -0.857376,-1.915714 -1.913799,-1.915714 -1.056419,0 -1.913797,0.858272 -1.913797,1.915714 V 8.5033414 c 0,-1.0568955 -0.857376,-1.9157142 -1.913798,-1.9157142 -1.05642,0 -1.913798,0.8564498 -1.913798,1.9157142 V 6.9252871 c 0,-1.0568955 -0.857375,-1.915532 -1.913798,-1.915532 -1.0564186,0 -1.9137976,0.8564498 -1.9137976,1.915532 V 16.552876 L 4.173792,14.53457 H 4.169822 C 3.8892437,14.345058 3.5446603,14.253946 3.174608,14.253946 c -1.0589894,0 -1.9137977,0.854628 -1.9137977,1.913528 0,0.371736 0.1020911,0.727071 0.2934248,1.020451 l -0.00234,-0.0049 5.8638081,8.561218 c 0.9340032,1.490587 2.5669932,2.39241 4.3237988,2.39241 h 6.107705 c 3.52249,0 6.379169,-2.856898 6.379169,-6.380004 V 11.057384 c 0.04411,-1.4596093 -1.233441,-1.9073323 -1.91379,-1.9137093 z\"\n         id=\"path820\"\n         sodipodi:nodetypes=\"ccsscsscssscccsscccssscc\" />\n    </g>\n  </g>\n</svg>\n"
        },
        {
          "name": "list-version-hashes",
          "type": "blob",
          "size": 1.63671875,
          "content": "#!/bin/bash\n# M.Blakeney, Oct 2018.\n\nPROG=\"$(basename $0)\"\nPROGDIR=\"$(dirname $0)\"\nSUMPROG=\"md5sum\"\nMAINPROG=\"libinput-gestures\"\n\nusage() {\n    echo \"Usage: $PROG [-options] [hashsum]\"\n    echo \"Development utility to list version and hash sums, and flag those that\"\n    echo \"match given hash sum. Must be run from the $MAINPROG git repo dir.\"\n    echo \"Options:\"\n    echo \"-o (use old hash calc)\"\n    exit 1\n}\n\n# Process command line options\nOLDCALC=0\nwhile getopts o\\? c; do\n    case $c in\n    o) OLDCALC=1;;\n    \\?) usage;;\n    esac\ndone\n\nshift $((OPTIND - 1))\n\nif [[ $# -eq 1 ]]; then\n    HASHSUM=\"$1\"\nelif [[ $# -ne 0 ]]; then\n    usage\nelse\n    HASHSUM=\"\"\nfi\n\noutput() {\n    local tag=$1\n    local hashsum=${2/ */}\n\n    if [[ -n $HASHSUM && $HASHSUM == $hashsum ]]; then\n\tfound=\" *\"\n    else\n\tfound=\"\"\n    fi\n\n    printf \"%-24s %s%s\\n\" $tag $hashsum \"$found\"\n}\n\ncd ${PROGDIR:-.} || exit 1\n\n# Iterate through all tags and output the md5 hash for each version\ntag=\"\"\nwhile read hashc; do\n    tag=$(git describe --tags --always $hashc)\n\n    filelist=\"$hashc:$MAINPROG\"\n    if [[ $OLDCALC -eq 0 ]]; then\n\tfilelist2=\"$hashc:$MAINPROG-setup\"\n\t# Check the setup file exists in this (potentially old) commit\n\tif git cat-file -t \"$filelist2\" &>/dev/null; then\n\t    filelist=\"$filelist $filelist2\"\n\tfi\n    fi\n\n    output $tag \"$(git show $filelist | $SUMPROG)\"\ndone <<< \"$(git rev-list --all --reverse)\"\n\n# Output a version for the working tree as well\ntagw=$(git describe --tags --always --dirty)\nif [[ $tagw != $tag ]]; then\n    if [[ $OLDCALC -eq 0 ]]; then\n\toutput $tagw \"$(cat $MAINPROG $MAINPROG-setup | $SUMPROG)\"\n    else\n\toutput $tagw \"$($SUMPROG <$MAINPROG)\"\n    fi\nfi\n"
        }
      ]
    }
  ]
}