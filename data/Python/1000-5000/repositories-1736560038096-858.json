{
  "metadata": {
    "timestamp": 1736560038096,
    "page": 858,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "CadQuery/cadquery",
      "stars": 3354,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1474609375,
          "content": "[run]\nbranch = True\nomit = \n    cadquery/utils.py\n    cadquery/cq_directive.py\n    tests/*\n\n[report]\nexclude_lines =\n    # Ignore stub body\n    \\.\\.\\.\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.2646484375,
          "content": "# Don't display text diffs for files that are not human readable\n# Git should not modify line endings in these test files\ntests/testdata/* -diff -text\n*.svg -diff -text\n\n# Jupyter notebooks should be classified as documentation\n*.ipynb linguist-documentation -diff -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3916015625,
          "content": "build/\n*.pyc\ndoc/_build/*\ndist/*\n.idea/*\ncadquery.egg-info/\ntarget/*\n.eggs/\n.vscode\nMANIFEST\nout.*\nres?.dxf\nlimit?.dxf\n.~*\n.*.swp\nassy.wrl\nassy.xml\nassy.zip\nnested.step\nsimple.caf\nsimple.step\nsimple.stp\nsimple.xml\ntest.brep\nnested.caf\nnested.glb\nnested.stp\nnested.wrl\nnested.xml\nnested.zip\nnested.stl\nnested.bin\nnested_*.bin\nnested_*.gltf\nnested_*.glb\nnested_*.stl\nout1.3mf\nout2.3mf\nout3.3mf\norig.dxf\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.12890625,
          "content": "version: 2\n\nbuild:\n  os: \"ubuntu-20.04\"\n  tools:\n    python: \"mambaforge-4.10\"\n\nconda:\n  environment: environment.yml\n\nformats: all\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.2412109375,
          "content": "cff-version: 1.2.0\ndoi: 10.5281/zenodo.10513848\nlicense: \"Apache 2.0\"\nurl: https://github.com/CadQuery/cadquery\ntitle: \"CadQuery\"\nmessage: \"If you use this software, please cite it using these metadata.\"\nauthors:\n  - name: \"CadQuery contributors\"\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2158203125,
          "content": "CadQuery\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the Apache Public License, v 2.0\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright CadQuery Development Team\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.04296875,
          "content": "include README.md\ninclude cadquery/py.typed\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.7880859375,
          "content": "![CadQuery logo](./doc/_static/logo/cadquery_logo_dark.svg)\n# CadQuery\n\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/79ox42i6smelx7n8/branch/master?svg=true)](https://ci.appveyor.com/project/jmwright/cadquery-o18bh/branch/master)\n[![Build Status](https://dev.azure.com/cadquery/conda-packages/_apis/build/status/CadQuery.cadquery?branchName=master)](https://dev.azure.com/cadquery/conda-packages/_build/latest?definitionId=2&branchName=master)\n[![codecov](https://codecov.io/gh/CadQuery/cadquery/branch/master/graph/badge.svg)](https://codecov.io/gh/CadQuery/cadquery)\n[![Documentation Status](https://readthedocs.org/projects/cadquery/badge/?version=latest)](https://cadquery.readthedocs.io/en/latest/?badge=latest)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.4498634.svg)](https://doi.org/10.5281/zenodo.3955118)\n\n---\n\n### Quick Links\n[***Documentation***](https://cadquery.readthedocs.io/en/latest/) | [***Cheatsheet***](https://cadquery.readthedocs.io/en/latest/_static/cadquery_cheatsheet.html) | [***Discord***](https://discord.com/invite/Bj9AQPsCfx) | [***Google Group***](https://groups.google.com/g/cadquery) | [***GUI Editor***](https://github.com/CadQuery/CQ-editor)\n\n---\n\n## What is CadQuery\n\nCadQuery is an intuitive, easy-to-use Python module for building parametric 3D CAD models. Using CadQuery, you can write short, simple scripts that produce high quality CAD models. It is easy to make many different objects using a single script that can be customized.\n\nCadQuery is often compared to [OpenSCAD](http://www.openscad.org/). Like OpenSCAD, CadQuery is an open-source, script based, parametric model generator. However, CadQuery stands out in many ways and has several key advantages:\n\n1. The scripts use a standard programming language, Python, and thus can benefit from the associated infrastructure. This includes many standard libraries and IDEs.\n2. CadQuery's CAD kernel Open CASCADE Technology ([OCCT](https://en.wikipedia.org/wiki/Open_Cascade_Technology)) is much more powerful than the [CGAL](https://en.wikipedia.org/wiki/CGAL) used by OpenSCAD. Features supported natively by OCCT include NURBS, splines, surface sewing, STL repair, STEP import/export, and other complex operations, in addition to the standard CSG operations supported by CGAL\n3. Ability to import/export [STEP](https://en.wikipedia.org/wiki/ISO_10303) and the ability to begin with a STEP model, created in a CAD package, and then add parametric features. This is possible in OpenSCAD using STL, but STL is a lossy format.\n4. CadQuery scripts require less code to create most objects, because it is possible to locate features based on the position of other features, workplanes, vertices, etc.\n5. CadQuery scripts can build STL, STEP, AMF and 3MF faster than OpenSCAD.\n\nCadQuery was built to be used as a Python library without any GUI. This makes it great for use cases such as integration into servers, or creating scientific and engineering scripts.  Options for visualization are also available including CQ-Editor and JupyterLab.\n\nFor those who are interested, the [OCP repository](https://github.com/CadQuery/OCP) contains the current OCCT wrapper used by CQ.\n\n### Key features\n* Build 3D models with scripts that are as close as possible to how you would describe the object to a human.\n* Create parametric models that can be very easily customized by end users.\n* Output high quality (loss-less) CAD formats like STEP and DXF in addition to STL, VRML, AMF and 3MF.\n* Provide a non-proprietary, plain text model format that can be edited and executed with only a web browser.\n* Offer advanced modeling capabilities such as fillets, curvilinear extrudes, parametric curves and lofts.\n* Build nested assemblies out of individual parts and other assemblies.\n\n### Why this fork\n\nThe original version of CadQuery was built on the FreeCAD API. This was great because it allowed for fast development and easy cross-platform capability. However, we eventually started reaching the limits of the API for some advanced operations and selectors. This 2.0 version of CadQuery is based directly on a Python wrapper of the OCCT kernel. This gives us a great deal more control and flexibility, at the expense of some simplicity and having to handle the cross-platform aspects of deployment ourselves. We believe this is a worthwhile trade-off to allow CadQuery to continue to grow and expand in the future.\n\n## Getting started\n\nTo learn more about designing with CadQuery, visit the [documentation](https://cadquery.readthedocs.io/en/latest/intro.html), [examples](https://cadquery.readthedocs.io/en/latest/examples.html), and [cheatsheet](https://cadquery.readthedocs.io/en/latest/_static/cadquery_cheatsheet.html).\n\nTo get started playing around with CadQuery and see its capabilities, take a look at the [CQ-editor GUI](https://github.com/CadQuery/CQ-editor). This easy-to-use IDE is a great way to get started desiging with CadQuery.  The CQ-editor installer bundles both CQ-editor and CadQuery (recommended).  See the [CQ-editor installation instructions](https://cadquery.readthedocs.io/en/latest/installation.html#adding-a-nicer-gui-via-cq-editor).\n\n\nThe CadQuery library (with or without CQ-editor) and its dependencies may be installed using conda, or pip.  Note that conda (or the CQ-editor installer) is the better supported option.\n\nSee the documentation for detailed CadQuery [installation instructions](https://cadquery.readthedocs.io/en/latest/installation.html).\n\nThere are also videos covering installation:\n\n* Linux [installation video](https://youtu.be/sjLTePOq8bQ)\n* Windows [installation video](https://youtu.be/3Tg_RJhqZRg)\n\n### CadQuery Installation Via Conda\n\nTo first install the Conda package manager see [Install the Conda Package Manager](https://cadquery.readthedocs.io/en/latest/installation.html#install-the-conda-package-manager), and [Miniforge](https://github.com/conda-forge/miniforge) for a minimal installer.\n\n``mamba install`` is recommended over ``conda install`` for faster and less memory intensive cadquery installation.\n\n```\n# Set up a new environment\nconda create -n cadquery\n\n# Activate the new environment\nconda activate cadquery\n\n# Install the latest released version\nmamba install -c conda-forge cadquery\n\n# Or install the dev version to get the latest changes\nmamba install -c conda-forge -c cadquery cadquery=master\n```\n\n### CadQuery Installation Via Pip\n\nCadQuery has a complex set of dependencies including OCP, which is our set of bindings to the OpenCASCADE CAD kernel. OCP is distributed as binary wheels for Linux, MacOS and Windows. However, there are some limitations. Only Python 3.9 through 3.12 are currently supported, and some older Linux distributions such as Ubuntu 18.04 are not supported. If the pip installation method does not work for your system, you can try the conda installation method.\n\nIt is highly recommended that a virtual environment is used when installing CadQuery, although it is not strictly required. Installing CadQuery via pip requires a up-to-date version of pip, which can be obtained with the following command line (or a slight variation thereof).\n```\npython3 -m pip install --upgrade pip\n```\nOnce a current version of pip is installed, CadQuery can be installed using the following command line.\n```\npip install cadquery\n```\n\nIt is also possible to install the very latest changes directly from CadQuery's GitHub repository, with the understanding that sometimes breaking changes can occur. To install from the git repository, run the following command line.\n```\npip install git+https://github.com/CadQuery/cadquery.git\n```\n\n\n### CQ-editor GUI\n\nCQ-editor is an IDE that allows users to edit CadQuery model scripts in a GUI environment. It includes features such as:\n\n* A graphical debugger that allows you to step through your scripts.\n* A CadQuery stack inspector.\n* Export to various formats, including STEP and STL, directly from the menu.\n\nMore on CQ-editor:\n* [CQ-editor README](https://github.com/CadQuery/CQ-editor/blob/master/README.md)\n* [Installation](https://cadquery.readthedocs.io/en/latest/installation.html#adding-a-nicer-gui-via-cq-editor)\n\n\n<img src=\"https://raw.githubusercontent.com/CadQuery/CQ-editor/master/screenshots/screenshot3.png\" alt=\"CQ editor screenshot\" width=\"800\"/>\n\n### Jupyter\n\nCadQuery supports Jupyter out-of-the-box.  Run your CadQuery code in the notebook and visualize the model by calling ```display(<CadQuery object>)```.\n\n * [JupyterLab installation](https://cadquery.readthedocs.io/en/latest/installation.html#jupyter).\n\n\n## Getting help\n\nYou can find the full CadQuery documentation at [cadquery.readthedocs.io](https://cadquery.readthedocs.io/).\n\nWe also have a [Google Group](https://groups.google.com/forum/#!forum/cadquery) to make it easy to get help from other CadQuery users. We want you to feel welcome and encourage you to join the group and introduce yourself. We would also love to hear what you are doing with CadQuery.\n\nThere is a [Discord server](https://discord.gg/Bj9AQPsCfx) as well. You can ask for help in the _general_ channel.\n\n## Projects using CadQuery\n\nHere are just a few examples of how CadQuery is being used.\n\n### FxBricks Lego Train System\n\n[FxBricks](https://fxbricks.com/) uses CadQuery in the product development pipeline for their Lego train system. FxBricks has also given back to the community by creating [documentation for their CAD pipeline](https://github.com/fx-bricks/fx-cad-notes). They have also assembled [cq-kit](https://github.com/michaelgale/cq-kit), a library containing utility classes and functions to extend the capabilities of CadQuery. Thanks to @michaelgale and @fx-bricks for this example.\n\n![FxBricks Pipeline Diagram](https://raw.githubusercontent.com/fx-bricks/fx-cad-notes/master/images/model_overview.png)\n\n### Hexidor Board Game Development\n\nHexidor is an expanded take on the Quoridor board game, and the development process has been chronicled [here](https://bruceisonfire.net/2020/04/23/my-adventure-with-flosscad-the-birth-of-hexidor/). CadQuery was used to generate the game board. Thanks to Bruce for this example.\n\n<img src=\"https://bruceisonfire.net/wp-content/uploads/2020/04/16-945x709.jpg\" alt=\"Hexidor Board Game\" width=\"400\"/>\n\n### Spindle assembly\n\nThanks to @marcus7070 for this example from [here](https://github.com/marcus7070/spindle-assy-example).\n\n<img src=\"./doc/_static/assy.png\" width=\"400\">\n\n### 3D Printed Resin Mold\n\nThanks to @eddieliberato for sharing [this example](https://jungletools.blogspot.com/2017/06/an-anti-kink-device-for-novel-high-tech.html) of an anti-kink resin mold for a cable.\n\n<img src=\"https://3.bp.blogspot.com/-2FiHOGUhtxo/WTRsViGdOXI/AAAAAAAAA-E/sb5ehwPVr-EncYC8RM2-v21M3AAmbjUjQCLcB/s1600/Screenshot%2Bfrom%2B2017-06-04%2B22-05-07.png\" alt=\"3D printed resin mold\" height=\"250\"/>\n\n## License\n\nCadQuery is licensed under the terms of the [Apache Public License, version 2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n## Contributing\n\nContributions from the community are welcome and appreciated.\n\nYou do not need to be a software developer to have a big impact on this project. Contributions can take many forms including, but not limited to, the following:\n\n* Writing and improving documentation\n* Triaging bugs\n* Submitting bugs and feature requests\n* Creating tutorial videos and blog posts\n* Helping other users get started and solve problems\n* Telling others about this project\n* Helping with translations and internationalization\n* Helping with accessibility\n* Contributing bug fixes and new features\n\nIt is asked that all contributions to this project be made in a respectful and considerate way. Please use the [Python Community Code of Conduct's](https://www.python.org/psf/codeofconduct/) guidelines as a reference.\n\n### Contributing code\n\nIf you are going to contribute code, make sure to follow this steps:\n\n- Consider opening an issue first to discuss what you have in mind\n- Try to keep it as short and simple as possible (if you want to change several\n  things, start with just one!)\n- Fork the CadQuery repository, clone your fork and create a new branch to\n  start working on your changes\n- Create a conda development environment with something like:\n  - `mamba env create -n cq-dev -f environment.yml`\n- Activate the new conda environment:\n  - `conda activate cq-dev`\n- If desired, install the master branch of cq-editor (Note; a release version may not be compatible with the master branch of cadquery):\n  - `mamba install -c cadquery -c conda-forge cq-editor=master`\n    Installing cq-editor adds another instance of cadquery which overrides the clone just added. Fix this by reinstalling cadquery using pip:\n  - `pip install -e .`\n- Before making any changes verify that the current tests pass. Run `pytest` from the root of your cadquery clone, there should be no failures and the output will look similar to this:\n  - ======= 215 passed, 57 warnings in 13.95s =======\n- Start with the tests! How should CadQuery behave after your changes? Make\n  sure to add some tests to the test suite to ensure proper behavior\n- Make sure your tests have assertions checking all the expected results\n- Add a nice docstring to the test indicating what the test is doing; if there\n  is too much to explain, consider splitting the test in two!\n- Go ahead and implement the changes\n- Add a nice docstring to the functions/methods/classes you implement\n  describing what they do, what the expected parameters are and what it returns\n  (if anything)\n- Update the documentation if there is any change to the public API\n- Consider adding an example to the documentation showing your cool new\n  feature!\n- Make sure nothing is broken (run the complete test suite with `pytest`)\n- Run `black` from [our fork](https://github.com/CadQuery/black) to autoformat your code and make sure your code style complies\n  with CadQuery's\n- Push the changes to your fork and open a pull-request upstream\n- Keep an eye on the automated feedback you will receive from the CI pipelines;\n  if there is a test failing or some code is not properly formatted, you will\n  be notified without human intervention\n- Be prepared for constructive feedback and criticism!\n- Be patient and respectful, remember that those reviewing your code are also\n  working hard (sometimes reviewing changes is harder than implementing them!)\n\n### How to Report a Bug\nWhen filing a bug report [issue](https://github.com/CadQuery/cadquery/issues), please be sure to answer these questions:\n\n1. What version of the software are you running?\n2. What operating system are you running the software on?\n3. What are the steps to reproduce the bug?\n\n### How to Suggest a Feature or Enhancement\n\nIf you find yourself wishing for a feature that does not exist, you are probably not alone. There are bound to be others out there with similar needs. Open an [issue](https://github.com/CadQuery/cadquery/issues) which describes the feature you would like to see, why you need it, and how it should work.\n\n## Citing\n\nPlease use our Zenodo DOI if you use CadQuery for scientific research: https://doi.org/10.5281/zenodo.3955118.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.703125,
          "content": "shallow_clone: true\n\nplatform:\n    - x64\n\nenvironment:\n    matrix:\n        - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\n          MINICONDA_DIRNAME: C:\\Miniforge\n        - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2204\n          OS: Linux\n        - APPVEYOR_BUILD_WORKER_IMAGE: macOS\n          OS: MacOSX\n\n    ANACONDA_TOKEN:\n        secure: $(anaconda_token)\n\ninit:\n    - cmd: curl -fsSLo Miniforge.exe https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe\n    - cmd: Miniforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%MINICONDA_DIRNAME%\n    - cmd: set \"PATH=%MINICONDA_DIRNAME%;%MINICONDA_DIRNAME%\\\\Scripts;%PATH%\"\n    - cmd: activate\n    - cmd: set MAMBA_ROOT_PREFIX=C:/Miniforge/Library\n    - sh: curl -sL https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$OS-x86_64.sh > miniconda.sh\n    - sh: bash miniconda.sh -b -p $HOME/miniconda;\n    - sh: export PATH=\"$HOME/miniconda/bin:$HOME/miniconda/lib:$PATH\";\n    - sh: source $HOME/miniconda/bin/activate\n    - sh: export MAMBA_ROOT_PREFIX=$HOME/miniconda\n\ninstall:\n    - conda config --set always_yes yes\n    - mamba env create -f environment.yml\n    - mamba list -n cadquery\n\nbuild: false\n\ntest_script:\n    - mamba run -n cadquery black . --diff --check\n    - mamba run -n cadquery mypy cadquery\n    - mamba run -n cadquery pytest -v --cov\n\non_success:\n    - mamba run -n cadquery codecov\n\n#on_finish:\n#    - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n#   - sh: export APPVEYOR_SSH_BLOCK=true\n#   - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 0.498046875,
          "content": "trigger:\n  branches:\n    include:\n      - master\n      - refs/tags/*\n\npr:\n- master\n\nresources:\n  repositories:\n    - repository: templates\n      type: github\n      name: CadQuery/conda-packages\n      endpoint: CadQuery\n\nparameters:\n  - name: minor\n    type: object\n    default:\n      - 12\n\njobs:\n- ${{ each minor in parameters.minor }}:\n  - template: conda-build.yml@templates\n    parameters:\n      name: Windows\n      vmImage: 'windows-latest'\n      py_maj: 3\n      py_min: ${{minor}}\n      conda_bld: 3.21.6\n"
        },
        {
          "name": "build-docs.sh",
          "type": "blob",
          "size": 0.05859375,
          "content": "#!/bin/sh\n(cd doc && sphinx-build -b html . ../target/docs)\n"
        },
        {
          "name": "cadquery",
          "type": "tree",
          "content": null
        },
        {
          "name": "changes.md",
          "type": "blob",
          "size": 37.078125,
          "content": "Changes\n=======\n\n2.5.2\n-----\n\nFixing pip package dependency issue.\n\n2.5.1\n-----\n\nFixing pip package uploading issue.\n\n2.5.0 \n------\n\n## Highlights\n* Free-function API https://github.com/CadQuery/cadquery/pull/1731, https://github.com/CadQuery/cadquery/pull/1469, https://github.com/CadQuery/cadquery/pull/1622,\n  https://github.com/CadQuery/cadquery/pull/1672, https://github.com/CadQuery/cadquery/pull/1692, https://github.com/CadQuery/cadquery/pull/1700\n* filter/map/apply/sort/[]/invoke https://github.com/CadQuery/cadquery/pull/1514\n* cq.vis.show improvements https://github.com/CadQuery/cadquery/pull/1726\n\n## Other changes\n* Getting set up for the new 2.5 dev cycle https://github.com/CadQuery/cadquery/pull/1496\n* Fix documentation hole, to many parameter https://github.com/CadQuery/cadquery/pull/1492\n* Add Brep to supported importShape functions https://github.com/CadQuery/cadquery/pull/1467\n* Fixed spelling error of 'visualziation' to 'visualization' https://github.com/CadQuery/cadquery/pull/1510\n* Fix Python version info in pip installation instructions https://github.com/CadQuery/cadquery/pull/1498\n* Updated setup.py for CQ black fork https://github.com/CadQuery/cadquery/pull/1513\n* Fixed gltf export instructions per #1508 https://github.com/CadQuery/cadquery/pull/1523\n* Fix VTK assembly render apply gp_Intrinsic_ZXY rotation https://github.com/CadQuery/cadquery/pull/1540\n* Add cubic and quadratic Bézier curves to Workplane and Sketch https://github.com/CadQuery/cadquery/pull/1529\n* Move DEFAULT_COLOR to vis https://github.com/CadQuery/cadquery/pull/1548\n* radiusArc: due to float looseness the length computation can be sligh… https://github.com/CadQuery/cadquery/pull/1528\n* Add support for 2D and 3D Wire fillet https://github.com/CadQuery/cadquery/pull/1549\n* Fix union with None https://github.com/CadQuery/cadquery/pull/1560\n* Describing the units of the result https://github.com/CadQuery/cadquery/pull/1570\n* Read global element variable at creation time of the promise,… https://github.com/CadQuery/cadquery/pull/1566\n* Fix units in toJSON https://github.com/CadQuery/cadquery/pull/1587\n* Add shape and workplane support to the Workplane.eachpoint() function. Issue #1395 https://github.com/CadQuery/cadquery/pull/1578\n* Fix crash on invalid faces https://github.com/CadQuery/cadquery/pull/1541\n* Fixed font-related test error on some platforms https://github.com/CadQuery/cadquery/pull/1577\n* Add support for closed path fillet to Wire.fillet() https://github.com/CadQuery/cadquery/pull/1573\n* Return False on Vector comparison with non-Vector https://github.com/CadQuery/cadquery/pull/1610\n* Get rid of nptyping https://github.com/CadQuery/cadquery/pull/1617\n* Call SetLocation to set top Assembly Location https://github.com/CadQuery/cadquery/pull/1623\n* sketch offset docs update https://github.com/CadQuery/cadquery/pull/1631\n* fix: Transform order in subassembly https://github.com/CadQuery/cadquery/pull/1629\n* Change Python REPL prompt from \"$\" to \">>>\" https://github.com/CadQuery/cadquery/pull/1647\n* Sketch and Workplane improvements  https://github.com/CadQuery/cadquery/pull/1633\n* Update Wire fillet docstring https://github.com/CadQuery/cadquery/pull/1630\n* Make CadQuery examples browsable in PartCAD https://github.com/CadQuery/cadquery/pull/1669\n* docs: Update install docs to Miniforge https://github.com/CadQuery/cadquery/pull/1682\n* fix: Deduplicate objects with same color on step export https://github.com/CadQuery/cadquery/pull/1690\n* Updated version specification for nlopt to try to resolve issues https://github.com/CadQuery/cadquery/pull/1718\n* doc/quickstart.rst: Emphasis the right lines https://github.com/CadQuery/cadquery/pull/1724\n* Set version in docs automatically from metadata https://github.com/CadQuery/cadquery/pull/1713\n* Fix workplane cylinder center when generated using a custom direction https://github.com/CadQuery/cadquery/pull/1593\n* Header cleanup https://github.com/CadQuery/cadquery/pull/1732\n* Add TypeVar to deprecate_kwarg_name to preserve type information https://github.com/CadQuery/cadquery/pull/1733\n* Docs cleanup https://github.com/CadQuery/cadquery/pull/1736\n\n2.4.0 \n------\n\n### Highlights\n* Updated to OCP and OpenCASCADE 7.7.2 [#1440](https://github.com/CadQuery/cadquery/pull/1440)\n* Python 3.12 support [#1468](https://github.com/CadQuery/cadquery/pull/1468)\n* VTK-based `show` function for showing models from the command line [#1366](https://github.com/CadQuery/cadquery/pull/1366) [#1394](https://github.com/CadQuery/cadquery/pull/1394)\n\n### Other changes\n* Documentation fixes and improvements [#1360](https://github.com/CadQuery/cadquery/pull/1360) [#1362](https://github.com/CadQuery/cadquery/pull/1362) [#1367](https://github.com/CadQuery/cadquery/pull/1367) [#1368](https://github.com/CadQuery/cadquery/pull/1368) [#1380](https://github.com/CadQuery/cadquery/pull/1380) [#1400](https://github.com/CadQuery/cadquery/pull/1400) [#1423](https://github.com/CadQuery/cadquery/pull/1423) [#1424](https://github.com/CadQuery/cadquery/pull/1424) [#1458](https://github.com/CadQuery/cadquery/pull/1458) [#1474](https://github.com/CadQuery/cadquery/pull/1474)\n* Added an `enlarge` method to BoundBox object [#1356](https://github.com/CadQuery/cadquery/pull/1356)\n* Added parallel operation support to `_bool_op()` [#1357](https://github.com/CadQuery/cadquery/pull/1357)\n* Added typing for `importStep()` and `importShape()` [#1372](https://github.com/CadQuery/cadquery/pull/1372)\n* Added tuple parameter support to CQGI [#1373](https://github.com/CadQuery/cadquery/pull/1373)\n* Improved the shape iterator [#1376](https://github.com/CadQuery/cadquery/pull/1376)\n* Added all other formats to ReadTheDocs downloads [#1377](https://github.com/CadQuery/cadquery/pull/1377)\n* Improved segment naming in constraint solver test [#1379](https://github.com/CadQuery/cadquery/pull/1379)\n* Fixed ellipse arc normal with DXF import and export [#1384](https://github.com/CadQuery/cadquery/pull/1384)\n* Fixed bug in tapered extrude height [#1388](https://github.com/CadQuery/cadquery/pull/1388)\n* Implementation of cq.Shape selectors [#1406](https://github.com/CadQuery/cadquery/pull/1406)\n* Fix bug in multisection sweep for sketches [#1408](https://github.com/CadQuery/cadquery/pull/1408)\n* Added ASCII option for GLTF and STL exports of assemblies [#1418](https://github.com/CadQuery/cadquery/pull/1418)\n* Added non-relative tolerancing to STL export [#1432](https://github.com/CadQuery/cadquery/pull/1432)\n* Fixed redundant call to `TopTools_IndexedDataMapOfShapeListOfShape()` [#1439](https://github.com/CadQuery/cadquery/pull/1439)\n* Fixed parenthesis bug in `_isCoPlanar()` [#1451](https://github.com/CadQuery/cadquery/pull/1451)\n* Improved 3D text alignment [#1455](https://github.com/CadQuery/cadquery/pull/1455)\n* Added matrix of intertia functionality [#1460](https://github.com/CadQuery/cadquery/pull/1460)\n\n2.3.1\n------\n\nThis was an incremental release to fix a broken PyPI package.\n\n2.3.0\n------\n\n### Highlights\n   * Explicit Python 3.11 support [#1247](https://github.com/CadQuery/cadquery/pull/1247) [#1280](https://github.com/CadQuery/cadquery/pull/1280)\n\n ### Experimental Features\n   * Constraint-based sketches are still being worked on and improved, and are not production ready. There have been fixes, but multiple issues are still open including [#959](https://github.com/CadQuery/cadquery/issues/959), [#968](https://github.com/CadQuery/cadquery/issues/968) and [#960](https://github.com/CadQuery/cadquery/issues/960).\n   * The Convex Hull feature should also be considered experimental. Issues open for that feature include [#931](https://github.com/CadQuery/cadquery/issues/931), [#1190](https://github.com/CadQuery/cadquery/issues/1190), [#1224](https://github.com/CadQuery/cadquery/issues/1224) and [#943](https://github.com/CadQuery/cadquery/issues/943).\n\n ### Other changes\n   * Various documentation fixes and updates [#1250](https://github.com/CadQuery/cadquery/pull/1250) [#1251](https://github.com/CadQuery/cadquery/pull/1251) [#1256](https://github.com/CadQuery/cadquery/pull/1256) [#1262](https://github.com/CadQuery/cadquery/pull/1262) [#1305](https://github.com/CadQuery/cadquery/pull/1305) [#1306](https://github.com/CadQuery/cadquery/pull/1306) [#1309](https://github.com/CadQuery/cadquery/pull/1309) [#1240](https://github.com/CadQuery/cadquery/pull/1340)\n   * Added a `close` option to `Wire.makePolygon()` [#1257](https://github.com/CadQuery/cadquery/pull/1257)\n   * Fixed iteration over entities and avoid hash collisions to help solve intermittent test failures [#1260](https://github.com/CadQuery/cadquery/pull/1260)\n   * Added fused export for assemblies that preserves face colors [#1261](https://github.com/CadQuery/cadquery/pull/1261)\n   * Added multilayer support to DXF export [#1267](https://github.com/CadQuery/cadquery/pull/1267)\n   * Removed one unneeded layer of hierarchy from STEP export [#1270](https://github.com/CadQuery/cadquery/pull/1270)\n   * Fixed a bug where `Workplane.close()` would not work with a set of 3D points [#1271](https://github.com/CadQuery/cadquery/pull/1271)\n   * Fixed a missing `distance` parameter in an extrude example [#1275](https://github.com/CadQuery/cadquery/pull/1275)\n   * Started building noarch packages in Azure Pipelines [#1293](https://github.com/CadQuery/cadquery/pull/1293)\n   * Added a better version string to identify conda master builds [#1315](https://github.com/CadQuery/cadquery/pull/1315)\n   * Fixed metadata being lost when adding a subassembly to an assembly [#1327](https://github.com/CadQuery/cadquery/pull/1327)\n   * Added tolerance (`tol`) to enable fuzzy `cut()` and `intersect()` operations [#1332](https://github.com/CadQuery/cadquery/pull/1332)\n   * Fixed relative/absolute bug in `line_point` sketch solver method [#1336](https://github.com/CadQuery/cadquery/pull/1336)\n\n2.2.0\n------\n   ### Highlights\n   * Introduced a new Sketch API dedicated to 2D planar operations.\n   * New constraint types were added to use with the Assembly solver.\n\n   ### Breaking changes\n   * Renamed the argument for `Workplane.extrude` from `distance` to `until` and `Workplane.cutBlind`'s `distanceToCut` also to `until`. This is only a breaking change if you use the named parameters, i.e. `extrude(distance = 10.0)` or `cutBlind(distanceToCut)` instead of using them as positional parameters.\n   * Fixed a bug in `Mixin1DProtocol.tangentAt()` where `paramAt()` was being called twice. This should only break scripts that relied on the incorrect behavior. [#641](https://github.com/CadQuery/cadquery/pull/641)\n   * `each` and `eachpoint` accept now `combine` argument defaulted to `True` [#954](https://github.com/CadQuery/cadquery/pull/954). This only affects use cases involving solids.\n\n   ### Experimental Features\n   * Constraint-based sketches are still being worked on and improved, and are not production ready. There are multiple issues open including [#1127](https://github.com/CadQuery/cadquery/issues/1127), [#959](https://github.com/CadQuery/cadquery/issues/959), [#968](https://github.com/CadQuery/cadquery/issues/968) and [#960](https://github.com/CadQuery/cadquery/issues/960).\n   * The Convex Hull feature should also be considered experimental. Issues open for that feature include [#931](https://github.com/CadQuery/cadquery/issues/931), [#1190](https://github.com/CadQuery/cadquery/issues/1190), [#1224](https://github.com/CadQuery/cadquery/issues/1224) and [#943](https://github.com/CadQuery/cadquery/issues/943).\n\n   ### Other changes\n   * Combine option can be set to \"cut\" (or \"s\") resulting in a subtractive operation [#954](https://github.com/CadQuery/cadquery/pull/954)\n   * Documentation updates [#648](https://github.com/CadQuery/cadquery/pull/648) [#654](https://github.com/CadQuery/cadquery/pull/654) [#656](https://github.com/CadQuery/cadquery/pull/656) [#659](https://github.com/CadQuery/cadquery/pull/659) [#668](https://github.com/CadQuery/cadquery/pull/668) [#689](https://github.com/CadQuery/cadquery/pull/689) [#695](https://github.com/CadQuery/cadquery/pull/695) [#699](https://github.com/CadQuery/cadquery/pull/699) [#711](https://github.com/CadQuery/cadquery/pull/711) [#727](https://github.com/CadQuery/cadquery/pull/727) [#733](https://github.com/CadQuery/cadquery/pull/733) [#734](https://github.com/CadQuery/cadquery/pull/734) [#737](https://github.com/CadQuery/cadquery/pull/737) [#738](https://github.com/CadQuery/cadquery/pull/738) [#748](https://github.com/CadQuery/cadquery/pull/748) [#757](https://github.com/CadQuery/cadquery/pull/757) [#774](https://github.com/CadQuery/cadquery/pull/774) [#775](https://github.com/CadQuery/cadquery/pull/775) [#805](https://github.com/CadQuery/cadquery/pull/805) [#813](https://github.com/CadQuery/cadquery/pull/813) [#837](https://github.com/CadQuery/cadquery/pull/837) [#839](https://github.com/CadQuery/cadquery/pull/839) [#843](https://github.com/CadQuery/cadquery/pull/843) [#845](https://github.com/CadQuery/cadquery/pull/845) [#846](https://github.com/CadQuery/cadquery/pull/846) [#847](https://github.com/CadQuery/cadquery/pull/847) [#848](https://github.com/CadQuery/cadquery/pull/848) [#852](https://github.com/CadQuery/cadquery/pull/852) [#863](https://github.com/CadQuery/cadquery/pull/863) [#866](https://github.com/CadQuery/cadquery/pull/866) [#867](https://github.com/CadQuery/cadquery/pull/867) [#887](https://github.com/CadQuery/cadquery/pull/887) [#908](https://github.com/CadQuery/cadquery/pull/908) [#910](https://github.com/CadQuery/cadquery/pull/910) [#912](https://github.com/CadQuery/cadquery/pull/912) [#921](https://github.com/CadQuery/cadquery/pull/921)\n   * Added better documentation on the internals of CadQuery [#821](https://github.com/CadQuery/cadquery/pull/821)\n   * Added documentation for assembly constraints [#850](https://github.com/CadQuery/cadquery/pull/850)\n   * Bugfix for center option of functions such as box and rect [#617](https://github.com/CadQuery/cadquery/pull/617)\n   * Fixes for DXF import [#630](https://github.com/CadQuery/cadquery/pull/630)\n   * Updated to OCCT 7.5 [#633](https://github.com/CadQuery/cadquery/pull/633) [#818](https://github.com/CadQuery/cadquery/pull/818)\n   * Added ability to specify arbitrary tangents in `spline()` [#636](https://github.com/CadQuery/cadquery/pull/636)\n   * Added `forConstruction` option to `offset2D()` [#639](https://github.com/CadQuery/cadquery/pull/639)\n   * Fixed errors related to `findSolid()` returning `None` [#655](https://github.com/CadQuery/cadquery/pull/655)\n   * Simplified the API interface for `findSolid()` [#662](https://github.com/CadQuery/cadquery/pull/662)\n   * Updated for Python 3.9 [#672](https://github.com/CadQuery/cadquery/pull/672)\n   * Improved inheritance handling for Workplane fluent methods [#677](https://github.com/CadQuery/cadquery/pull/677)\n   * Improved interface to pop pending wires and edges off the stack [#678](https://github.com/CadQuery/cadquery/pull/678)\n   * Added deprecation warning for `Workplane.findFace()` [#679](https://github.com/CadQuery/cadquery/pull/679)\n   * Wrapped `TopoDS_CompSolid` from the OCCT/OCP layer so that it could be used in the fluent API. [#681](https://github.com/CadQuery/cadquery/pull/681)\n   * Added 2D fillet and chamfer functions [#683](https://github.com/CadQuery/cadquery/pull/683)\n   * Created GitHub issue templates [#687](https://github.com/CadQuery/cadquery/pull/687)\n   * Added `AreaNthSelector` and length selector [#688](https://github.com/CadQuery/cadquery/pull/688)\n   * Implemented makeSplineApprox for edges and faces [#694](https://github.com/CadQuery/cadquery/pull/694)\n   * Started using expression grammar for assembly selectors [#704](https://github.com/CadQuery/cadquery/pull/704)\n   * Added a coplanar check on wires before allowing operations like `extrude()` [#710](https://github.com/CadQuery/cadquery/pull/710)\n   * Added an InPlane constraint for assemblies [#712](https://github.com/CadQuery/cadquery/pull/712)\n   * Raise a `TypeError` now when the Location parameter is a tuple [#723](https://github.com/CadQuery/cadquery/pull/723)\n   * Added `Assembly.toCompound()` to enable proper assembly export to formats like STL [#726](https://github.com/CadQuery/cadquery/pull/726)\n   * Implemented BRep import and vtkPolyData export [#735](https://github.com/CadQuery/cadquery/pull/735) [#865](https://github.com/CadQuery/cadquery/pull/865)\n   * Started converting text sizes to float instead of integer [#764](https://github.com/CadQuery/cadquery/pull/764)\n   * Improved performance of `makeFromWires()` [#768](https://github.com/CadQuery/cadquery/pull/768)\n   * Added `__repr__` and `__str__` methods to `Matrix` class to improve print output.\n   * Fixed ability to handle assembly constraints for infinite faces [#797](https://github.com/CadQuery/cadquery/pull/797)\n   * Fixed an issue with the assembly solver that would cause it to hang in some cases [#806](https://github.com/CadQuery/cadquery/pull/806)\n   * Fixed the default camera position for VTK.js [#822](https://github.com/CadQuery/cadquery/pull/822)\n   * Removed deprecated OCCT `BRepOffsetAPI_MakeThickSolid` reference from `Mixin3d.shell`. [#829](https://github.com/CadQuery/cadquery/pull/829)\n   * Implemented `projectToLine()` method for `Vector` [](https://github.com/CadQuery/cadquery/pull/835)\n   * Added a 3D `cylinder` primitive [#858](https://github.com/CadQuery/cadquery/pull/858)\n   * Fixed a typo in the error message of `close()` [#871](https://github.com/CadQuery/cadquery/pull/871)\n   * Added `extrude` and `cutBlind` until variations, which allows having an operation continue until the next face is reached. See the breaking change involved above. [#875](https://github.com/CadQuery/cadquery/pull/875) [#894](https://github.com/CadQuery/cadquery/pull/894)\n   * Fixed bug that made the selectors `#Z` and `not |Z` work the same [#882](https://github.com/CadQuery/cadquery/pull/882)\n   * Updated `paramAt` to handle trimmed curves [#901](https://github.com/CadQuery/cadquery/pull/901)\n   * Update to support pyparsing 3 [#907](https://github.com/CadQuery/cadquery/pull/907)\n   * Added documentation about the layers of the CadQuery API [#917](https://github.com/CadQuery/cadquery/pull/917)\n   * Made the loading of the VTK modules more efficient and less error prone [#918](https://github.com/CadQuery/cadquery/pull/918)\n   * Changes to allow any cq.Shape to be a sweep path [#919](https://github.com/CadQuery/cadquery/pull/919)\n   * Improved edge rendering quality in the documentation [#920](https://github.com/CadQuery/cadquery/pull/920)\n   * Properly initialized metadata in Assembly instances [#928](https://github.com/CadQuery/cadquery/pull/928)\n   * Fixed bug in ArcAngle Sketch constraint [#932](https://github.com/CadQuery/cadquery/pull/932)\n   * Implemented tag merging when performing boolean operations [#934](https://github.com/CadQuery/cadquery/pull/934)\n   * Fixed a bug where the height and width were switched in the Sketch rect call [#939](https://github.com/CadQuery/cadquery/pull/939)\n   * Made Face.makeFromWires check that wires are closed to prevent a certain class of segfault [#946](https://github.com/CadQuery/cadquery/pull/946)\n   * Added __repr__ to plane object to get nicer output when converted to a string [#952](https://github.com/CadQuery/cadquery/pull/952)\n   * Added `cut` option to `combine` parameter which removes material from the context solid [#954](https://github.com/CadQuery/cadquery/pull/954)\n   * Updated the dependencies for OCP 7.5.3 [#956](https://github.com/CadQuery/cadquery/pull/956)\n   * Added a fixed arc length cost to the sketch solver [#962](https://github.com/CadQuery/cadquery/pull/962)\n   * Fixed installation doc to use rst instead of markdown [#974](https://github.com/CadQuery/cadquery/pull/974)\n   * Reworked the assembly solder and added PointOnLine, FixedPoint, FixedAxis and FixedRotation assembly constraints [#975](https://github.com/CadQuery/cadquery/pull/975)\n   * Implemented Python 3.10 support [#978](https://github.com/CadQuery/cadquery/pull/978)\n   * Updated conda related sections in the README and docs [#980](https://github.com/CadQuery/cadquery/pull/980)\n   * Added rotateAboutCenter regression test [#982](https://github.com/CadQuery/cadquery/pull/982)\n   * Use `TopTools_ListOfShape` in `assembleEdges()` to prevent some classes of invalid surfaces due to unclosed wires [#986](https://github.com/CadQuery/cadquery/pull/986)\n   * Removed the pinned hdf dependency [#992](https://github.com/CadQuery/cadquery/pull/992)\n   * Fixed bug with extra translation being applied when `rarray` is used with `push` [#994](https://github.com/CadQuery/cadquery/pull/994)\n   * Added a conda web installer for Windows and Linux [#1000](https://github.com/CadQuery/cadquery/pull/1000)\n   * Multiple parray Sketch fixes [#1005](https://github.com/CadQuery/cadquery/pull/1005)\n   * Additional surface modelling functionality [#1007](https://github.com/CadQuery/cadquery/pull/1007)\n   * Fixed a bug with `polarArray` start angle and rotation [#1016](https://github.com/CadQuery/cadquery/pull/1016)\n   * Fixed a bug where Sketch.distribute was creating an extra location [#1018](https://github.com/CadQuery/cadquery/pull/1018)\n   * Fixed the screw holes in the parametric enclosure example [#1023](https://github.com/CadQuery/cadquery/pull/1023)\n   * Switched to nptyping 2.x [#1050](https://github.com/CadQuery/cadquery/pull/1050)\n   * Ability to specify DXF layer names [#1061](https://github.com/CadQuery/cadquery/pull/1061)\n   * Switch to Casadi and iPOPT for assembly solver [#1063](https://github.com/CadQuery/cadquery/pull/1063)\n   * Added adjustment parameters for linear and angular tolerances in VRML tessellation [#1066](https://github.com/CadQuery/cadquery/pull/1066)\n   * Pinned VTK to 9.0.1 for OCP 7.5.3 [#1075](https://github.com/CadQuery/cadquery/pull/1075)\n   * Fixed VTK-based assembly export rotation issue [#1078](https://github.com/CadQuery/cadquery/pull/1078)\n   * Added quality controls to STEP export for shapes and assemblies [#1083](https://github.com/CadQuery/cadquery/pull/1083)\n   * Updated setup.py for OCP being available on PyPI [#1085](https://github.com/CadQuery/cadquery/pull/1085)\n   * Added Sphinx customization for multimethod handling [#1088](https://github.com/CadQuery/cadquery/pull/1088) [#1123](https://github.com/CadQuery/cadquery/pull/1123)\n   * Pinned the nptyping version [#1095](https://github.com/CadQuery/cadquery/pull/1095) [#1096](https://github.com/CadQuery/cadquery/pull/1096)\n   * Added STL to Assembly export formats [#1101](https://github.com/CadQuery/cadquery/pull/1101)\n   * Updated the mutlimethod version pin [#1118](https://github.com/CadQuery/cadquery/pull/1118)\n   * Reworked the cheatsheet [#1129](https://github.com/CadQuery/cadquery/pull/1129)\n   * Pass clean to eachpoint in box, cylinder, interpPlate, sphere and wedge [#1145](https://github.com/CadQuery/cadquery/pull/1145)\n   * Moved to OCCT 7.6 [#1156](https://github.com/CadQuery/cadquery/pull/1156)\n   * Do not add a leaf component when assembly shapes are empty [#993](https://github.com/CadQuery/cadquery/pull/1157)\n   * Fixed an indexing bug in tessellation [#1163](https://github.com/CadQuery/cadquery/pull/1163)\n   * Pinned cadquery-ocp version to 7.6.* [#1164](https://github.com/CadQuery/cadquery/pull/1164)\n   * Disabled recompute of normals when converting to VTK [#1167](https://github.com/CadQuery/cadquery/pull/1167)\n   * Added Fixed to ConstraintKinds type definition [#1177](https://github.com/CadQuery/cadquery/pull/1177)\n   * Added option to control the verbosity of the assembly solver [#1198](https://github.com/CadQuery/cadquery/pull/1198)\n   * Only show deprecation warning when required [#1201](https://github.com/CadQuery/cadquery/pull/1201)\n   * Untangled indirect exports [#1204](https://github.com/CadQuery/cadquery/pull/1204)\n   * Added parameter and return types to `importDXF` [#1205](https://github.com/CadQuery/cadquery/pull/1205)\n   * Fixed incorrect coordinate system in glTF exports [#1211](https://github.com/CadQuery/cadquery/pull/1211)\n   * Updated to allow OCP 7.7.0 to be used [#1215](https://github.com/CadQuery/cadquery/pull/1215)\n   * Fixed VTK HTML template [#1216](https://github.com/CadQuery/cadquery/pull/1216) [#1217](https://github.com/CadQuery/cadquery/pull/1217)\n   * Cleaned up environment.yml file [#1233](https://github.com/CadQuery/cadquery/pull/1233)\n   * Various documentation fixes [#1033](https://github.com/CadQuery/cadquery/pull/1033) [#1041](https://github.com/CadQuery/cadquery/pull/1041) [#1044](https://github.com/CadQuery/cadquery/pull/1044) [#1049](https://github.com/CadQuery/cadquery/pull/1049) [#1056](https://github.com/CadQuery/cadquery/pull/1056) [#1058](https://github.com/CadQuery/cadquery/pull/1058) [#1059](https://github.com/CadQuery/cadquery/pull/1059) [#1060](https://github.com/CadQuery/cadquery/pull/1060) [#1062](https://github.com/CadQuery/cadquery/pull/1062) [#1079](https://github.com/CadQuery/cadquery/pull/1079) [#1089](https://github.com/CadQuery/cadquery/pull/1089) [#1116](https://github.com/CadQuery/cadquery/pull/1116) [#1140](https://github.com/CadQuery/cadquery/pull/1140) [#1143](https://github.com/CadQuery/cadquery/pull/1143) [#1151](https://github.com/CadQuery/cadquery/pull/1151) [#1166](https://github.com/CadQuery/cadquery/pull/1166) [#1176](https://github.com/CadQuery/cadquery/pull/1176) [#1207](https://github.com/CadQuery/cadquery/pull/1207) [#1210](https://github.com/CadQuery/cadquery/pull/1210) [#1241](https://github.com/CadQuery/cadquery/pull/1241)\n\n\n2.1\n------\n   ### Breaking changes\n   * Fixed bug in ParallelDirSelector where non-planar faces could be selected. Note this will be breaking if you've used DirectionNthSelector and a non-planar face made it into your object list. In that case eg. \">X[2]\" will have to become \">X[1]\".\n\n   ### Other changes\n   * Refactored selectors and added CenterNthSelector [#549](https://github.com/CadQuery/cadquery/pull/549)\n   * Added new installation video links to the readme [#550](https://github.com/CadQuery/cadquery/pull/550)\n   * Exposed `makeWire` in `parametricCurve()` [#555](https://github.com/CadQuery/cadquery/pull/555)\n   * Fixed a `centerOption` bug in the assembly tutorial [#556](https://github.com/CadQuery/cadquery/pull/556)\n   * Added `hLineTo`, `polarLine` and `polarLineTo` to autosummary [#561](https://github.com/CadQuery/cadquery/pull/561)\n   * Updated workplane docstring for recent center option changes [#563](https://github.com/CadQuery/cadquery/pull/563)\n   * Fixed indentation in CQContext docs [#571](https://github.com/CadQuery/cadquery/pull/571)\n   * Indicated breaking changes and made docstring fixes [#573](https://github.com/CadQuery/cadquery/pull/573)\n   * Fixed `split()` docstring [#574](https://github.com/CadQuery/cadquery/pull/574)\n   * Updated the readthedocs CQ logo [#581](https://github.com/CadQuery/cadquery/pull/581)\n   * Removed unused variable from counter-bore example [#584](https://github.com/CadQuery/cadquery/pull/584)\n   * Fixed unconstrained `assembly.solve()` [#592](https://github.com/CadQuery/cadquery/pull/592)\n   * Added an example for `cq.Wire.makeHelix()` [#594](https://github.com/CadQuery/cadquery/pull/594)\n   * Exposed additional SVG options to exporters interface [#596](https://github.com/CadQuery/cadquery/pull/596)\n   * Fixed `ellipse()` documentation formatting [#597](https://github.com/CadQuery/cadquery/pull/597)\n   * Fixed `cutThruAll()` when working with non-planar faces [#604](https://github.com/CadQuery/cadquery/pull/604)\n   * Fixed `center` option in `rect()` call in tests [#607](https://github.com/CadQuery/cadquery/pull/607)\n   * Fixed examples and enabled them in the test suite [#609](https://github.com/CadQuery/cadquery/pull/609)\n   * Fixed wedge centering [#611](https://github.com/CadQuery/cadquery/pull/611) and [#613](https://github.com/CadQuery/cadquery/pull/613)\n   * Updated assembly documentation [#614](https://github.com/CadQuery/cadquery/pull/614)\n\n2.1RC1 (release candidate)\n------\n   ### Breaking changes\n   * `centerOption` default value changed from `CenterOfMass` to `ProjectedOrigin` [#532](https://github.com/CadQuery/cadquery/pull/532)\n   * `Wire.combine` interface changed - now it returns `List[Wire]` [#397](https://github.com/CadQuery/cadquery/pull/397)\n   * `Workplane.each` interface changed - callable of the `Callable[[Union[cadquery.occ_impl.geom.Vector, cadquery.occ_impl.geom.Location, cadquery.occ_impl.shapes.Shape]], cadquery.occ_impl.shapes.Shape]` type is required [#391](https://github.com/CadQuery/cadquery/pull/391)\n\n   ### Other changes\n\n   * Simplified `largestDimension()` bounding box check [#317](https://github.com/CadQuery/cadquery/pull/317)\n   * Added `FontPath` to `makeText()` [#337](https://github.com/CadQuery/cadquery/issues/337)\n   * Support for slicing (`section()`) of models [#339](https://github.com/CadQuery/cadquery/pull/339) [#349](https://github.com/CadQuery/cadquery/pull/349)\n   * Added DXF import (relies on ezdxf) [#351](https://github.com/CadQuery/cadquery/pull/351) [#372](https://github.com/CadQuery/cadquery/pull/372) [#406](https://github.com/CadQuery/cadquery/pull/406) [#442](https://github.com/CadQuery/cadquery/pull/442)\n   * Added DXF export [#415](https://github.com/CadQuery/cadquery/pull/415) [#419](https://github.com/CadQuery/cadquery/pull/419) [#455](https://github.com/CadQuery/cadquery/pull/455)\n   * Exposed `angularPrecision` parameter in `exportStl()` [#329](https://github.com/CadQuery/cadquery/pull/329)\n   * Fixed bug in `makeRuled()` [#329](https://github.com/CadQuery/cadquery/pull/329)\n   * Made solid construction from `shell()` more robust [#329](https://github.com/CadQuery/cadquery/pull/329)\n   * Added CadQuery logos to docs [#329](https://github.com/CadQuery/cadquery/pull/329)\n   * Added `toPending()` to allow adding wires/edges to `pendingWires`/`pendingEdges` [#351](https://github.com/CadQuery/cadquery/pull/351)\n   * Implemented `glue` parameter for `fuse()` [#375](https://github.com/CadQuery/cadquery/pull/375)\n   * Exposed parameters for fuzzy bool operations [#375](https://github.com/CadQuery/cadquery/pull/375)\n   * Started using MyPy in CI and type annotations [#378](https://github.com/CadQuery/cadquery/pull/378) [#380](https://github.com/CadQuery/cadquery/pull/380) [#391](https://github.com/CadQuery/cadquery/pull/391)\n   * Implemented a `Location` class [#380](https://github.com/CadQuery/cadquery/pull/380)\n   * Merged `CQ` class into `Workplane` to eliminate duplicated code [#380](https://github.com/CadQuery/cadquery/pull/380)\n   * Added additional parameters for `BuildCurves3d_s` method [#387](https://github.com/CadQuery/cadquery/pull/387)\n   * Implemented fully closed shelling [#394](https://github.com/CadQuery/cadquery/pull/394)\n   * Refactored `polarArray()` [#395](https://github.com/CadQuery/cadquery/pull/395)\n   * Improved local rotation handling [#395](https://github.com/CadQuery/cadquery/pull/395)\n   * Implemented 2D offset in `offset2D` [#397](https://github.com/CadQuery/cadquery/pull/397)\n   * Added `locationAt()` to generate locations along a curve [#404](https://github.com/CadQuery/cadquery/pull/404)\n   * Added DOI to README for references in research papers [#410](https://github.com/CadQuery/cadquery/pull/410)\n   * Changed `shell()` to set `Intersection` parameter to `True` [#411](https://github.com/CadQuery/cadquery/pull/411)\n   * Exposed joint type (`kind`) for `shell()` [#413](https://github.com/CadQuery/cadquery/pull/413)\n   * Refactored exporters [#415](https://github.com/CadQuery/cadquery/pull/415)\n   * Started using `find_packages()` in setup.py [#418](https://github.com/CadQuery/cadquery/pull/418)\n   * Tessellation winding fix [#420](https://github.com/CadQuery/cadquery/pull/420)\n   * Added `angularPrecision` to `export`, `exportShape` and `toString` [#424](https://github.com/CadQuery/cadquery/pull/424)\n   * Added py.typed file for PEP-561 compatibility [#435](https://github.com/CadQuery/cadquery/pull/435)\n   * Added assembly API with constraint solver [#440](https://github.com/CadQuery/cadquery/pull/440) [#482](https://github.com/CadQuery/cadquery/pull/482) [#545](https://github.com/CadQuery/cadquery/pull/545) [#556](https://github.com/CadQuery/cadquery/pull/556)\n   * Integrated sphinxcadquery to add 3D visualization of parts to docs [#111](https://github.com/CadQuery/cadquery/pull/111)\n   * Allow spaces in Vector literal [#445](https://github.com/CadQuery/cadquery/pull/445)\n   * Added export to OCCT native CAF format [#440](https://github.com/CadQuery/cadquery/pull/440)\n   * Implemented color export in STEP generated from assemblies [#440](https://github.com/CadQuery/cadquery/pull/440)\n   * Added ability to set `fontPath` parameter for `text()` [#453](https://github.com/CadQuery/cadquery/pull/453)\n   * Now protect against `rarray()` spacings of 0 [#454](https://github.com/CadQuery/cadquery/pull/454)\n   * Changed Nth selector rounding `self.TOLERANCE` calculation to produce 4 decimal places [#461](https://github.com/CadQuery/cadquery/pull/461)\n   * Fixed `parametricCurve()` to use correct stop point [#477](https://github.com/CadQuery/cadquery/pull/477)\n   * Excluded tests from installation in setup.py [#478](https://github.com/CadQuery/cadquery/pull/478)\n   * Added `mesh()` method to shapes.py [#482](https://github.com/CadQuery/cadquery/pull/482)\n   * Added VRML export [#482](https://github.com/CadQuery/cadquery/pull/482)\n   * Implemented ability to create a child workplane on the vertex [#480](https://github.com/CadQuery/cadquery/pull/480)\n   * Improved consistency in handling of BoundaryBox tolerance [#490](https://github.com/CadQuery/cadquery/pull/490)\n   * Implemented `locations()` for Wires [#475](https://github.com/CadQuery/cadquery/pull/475)\n   * Exposed mode for sweep operations [#496](https://github.com/CadQuery/cadquery/pull/496)\n   * Added 'RadiusNthSelector()` [#504](https://github.com/CadQuery/cadquery/pull/504)\n   * Added tag-based constraint definition for assemblies [#514](https://github.com/CadQuery/cadquery/pull/514)\n   * Implemented ability to mirror from a selected face [#527](https://github.com/CadQuery/cadquery/pull/527)\n   * Improved edge selector tests [#541](https://github.com/CadQuery/cadquery/pull/541)\n   * Added `glue` parameter to `combine()` [#535](https://github.com/CadQuery/cadquery/pull/535)\n   * Finally fixed github-linguist statistics [#547](https://github.com/CadQuery/cadquery/pull/547)\n   * Updated for Python 3.8\n   * Numerous documentation updates and example additions\n\n2.0 (stable release)\n------\n\n### Deprecations and breaking changes\n   * `centerOption` default value will change from `CenterOfMass` to `ProjectedOrigin` in the 2.1 release #313\n\n### Non-breaking changes\n\n   * Numerous commits to move from FreeCAD as the underlying API to PythonOCC - thanks @adam-urbanczyk for all the effort that required\n   * Updated for Python 3.6 and 3.7\n   * Made sure solids were fused when extrude both=True #321 - thanks @adam-urbanczyk\n   * Improved boolean operations #312 - thanks @adam-urbanczyk\n   * Fixed a bug in helix creation #311 - thanks @adam-urbanczyk\n   * Improved MacOS support\n   * Updated CQGI counters for Python 3.8 compatibility #305 - thanks @jwhevans\n   * Added tangent arc operation #284 - thanks @marcus7070\n   * Added ellipse creation #265 - thanks @bernhard-42\n   * Added ability to produce a plate surface with a thickness (optional), enclosed by edge points, polylines or splines, and going through interpolation points (optional) #253 - thanks @bragostin\n   * Fix plane rotation method #243 - thanks @Peque\n   * Added ability to tag a particular object in the chain to be referred to later #252 - thanks @marcus7070\n   * Added Black formatting check to CI #255 - thanks @Peque\n   * Added ability to accept unordered edges when constructing a wire #237 - thanks @bragostin\n   * Updated to using pytest #236 - thanks @Peque\n   * Fixed wedge primitive and made wedge act consistent with other primitives #228\n   * Fix to correctly support anisotropic scaling #225 - thanks @adam-urbanczyk\n   * Documentation fixes #215 - thanks @Renha\n   * Fixed a spline example in the docs #200 - thanks @adam-urbanczyk\n   * Added 2D slot feature #186 - thanks @bweissinger\n   * Fixed a segmentation fault when trying to loft with one wire #161 - thanks @HLevering\n   * Fixed a bug where the tolerance parameter of BoundingBox had no effect #167 - thanks @mgreminger\n   * Fixed a bug when calling findSolid with multiple solids on stack #163 - thanks @adam-urbanczyk\n   * Documentation fixes #144 and #162 - thanks @westurner\n   * Fixed a feature/bug that prevented a polyline or spline from closing properly in some instances #156 - thanks @adam-urbanczyk\n   * Added ability to determine if an arbitrary point is inside a solid #138 - thanks @mgreminger\n   * Fixed bug where combine=True kept union from working properly #143 - thanks @adam-urbanczyk\n   * Fixed bug where string selectors \"-X\" and \"+X\" returned the same thing #141 - thanks @gebner\n   * Removed unused 'positive' argument from 'cutThruAll' #135 - thanks @mgreminger\n   * Increased the HASH_CODE_MAX to prevent hash collisions during face selection #140 - thanks @mgreminger\n   * Added option to center workplane on projected origin #132 - thanks @mgreminger\n   * Improved sweep along multisection wires #128 - thanks @adam-urbanczyk\n   * Fixed version number that was missed during update to 2.x #129 - thanks @asukiaaa\n   * Numerous CI and documentation improvements\n   * Support for text rendering #106\n\n2.0RC2 (release candidate)\n------\n   * Changes included in v2.0 release\n\n2.0RC1 (release candidate)\n------\n   * Changes included in v2.0 release\n\n2.0RC0 (release candidate)\n------\n   * Changes included in v2.0 release\n\nThe changelog for older CadQuery 1.x releases can be found [here](https://github.com/dcowden/cadquery/blob/master/changes.md).\n"
        },
        {
          "name": "conda",
          "type": "tree",
          "content": null
        },
        {
          "name": "conda_build.bat",
          "type": "blob",
          "size": 0.0712890625,
          "content": "conda build -c cadquery -c conda-forge --output-folder . conda/meta.yaml\n"
        },
        {
          "name": "conda_build.sh",
          "type": "blob",
          "size": 0.0712890625,
          "content": "conda build conda/meta.yaml -c cadquery -c conda-forge --croot /tmp/cbld\n"
        },
        {
          "name": "conda_build_config.yaml",
          "type": "blob",
          "size": 0.0166015625,
          "content": "python:\n    - 3.6"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "environment.yml",
          "type": "blob",
          "size": 0.466796875,
          "content": "name: cadquery\nchannels:\n  - conda-forge\ndependencies:\n  - python>=3.9,<=3.12\n  - ipython\n  - ocp=7.7.2\n  - vtk=*=qt*\n  - pyparsing>=2.1.9\n  - sphinx=8.1.3\n  - sphinx_rtd_theme\n  - mypy\n  - codecov\n  - pytest\n  - pytest-cov\n  - ezdxf>=1.3.0\n  - typing_extensions\n  - nlopt\n  - path\n  - casadi\n  - typish\n  - multimethod >=1.11,<2.0\n  - typed-ast\n  - regex\n  - pathspec\n  - click\n  - appdirs\n  - pip\n  - pip:\n    - --editable=.\n    - git+https://github.com/cadquery/black.git@cq\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.6416015625,
          "content": "[mypy]\nignore_missing_imports = False\ndisable_error_code = no-redef\nplugins = mypy/cadquery-plugin.py\n\n[mypy-ezdxf.*]\nignore_missing_imports = True\nno_implicit_optional = False\n\n[mypy-pyparsing.*]\nignore_missing_imports = True\n\n[mypy-IPython.*]\nignore_missing_imports = True\n\n[mypy-scipy.*]\nignore_missing_imports = True\n\n[mypy-numpy.*]\nignore_missing_imports = True\n\n[mypy-nptyping.*]\nignore_missing_imports = True\n\n[mypy-nlopt.*]\nignore_missing_imports = True\n\n[mypy-vtkmodules.*]\nignore_missing_imports = True\n\n[mypy-docutils.*]\nignore_missing_imports = True\n\n[mypy-typish.*]\nignore_missing_imports = True\n\n[mypy-casadi.*]\nignore_missing_imports = True\n\n"
        },
        {
          "name": "mypy",
          "type": "tree",
          "content": null
        },
        {
          "name": "partcad.yaml",
          "type": "blob",
          "size": 1.81640625,
          "content": "name: /pub/examples/script/cadquery\ndesc: CadQuery examples\nurl: https://github.com/CadQuery/cadquery\n\nparts:\n  examples/Ex001_Simple_Block:\n    type: cadquery\n  examples/Ex002_Block_With_Bored_Center_Hole:\n    type: cadquery\n  examples/Ex003_Pillow_Block_With_Counterbored_Holes:\n    type: cadquery\n  examples/Ex004_Extruded_Cylindrical_Plate:\n    type: cadquery\n  examples/Ex005_Extruded_Lines_and_Arcs:\n    type: cadquery\n  examples/Ex006_Moving_the_Current_Working_Point:\n    type: cadquery\n  examples/Ex007_Using_Point_Lists:\n    type: cadquery\n  examples/Ex008_Polygon_Creation:\n    type: cadquery\n  examples/Ex009_Polylines:\n    type: cadquery\n  examples/Ex010_Defining_an_Edge_with_a_Spline:\n    type: cadquery\n  examples/Ex011_Mirroring_Symmetric_Geometry:\n    type: cadquery\n  examples/Ex012_Creating_Workplanes_on_Faces:\n    type: cadquery\n  examples/Ex013_Locating_a_Workplane_on_a_Vertex:\n    type: cadquery\n  examples/Ex014_Offset_Workplanes:\n    type: cadquery\n  examples/Ex015_Rotated_Workplanes:\n    type: cadquery\n  examples/Ex016_Using_Construction_Geometry:\n    type: cadquery\n  examples/Ex017_Shelling_to_Create_Thin_Features:\n    type: cadquery\n  examples/Ex018_Making_Lofts:\n    type: cadquery\n  examples/Ex019_Counter_Sunk_Holes:\n    type: cadquery\n  examples/Ex020_Rounding_Corners_with_Fillets:\n    type: cadquery\n  examples/Ex021_Splitting_an_Object:\n    type: cadquery\n  examples/Ex022_Revolution:\n    type: cadquery\n  examples/Ex023_Sweep:\n    type: cadquery\n  examples/Ex024_Sweep_With_Multiple_Sections:\n    type: cadquery\n  examples/Ex025_Swept_Helix:\n    type: cadquery\n  examples/Ex026_Case_Seam_Lip:\n    type: cadquery\n  examples/Ex100_Lego_Brick:\n    type: cadquery\n  # examples/Ex101_InterpPlate uses `show_object()` multiple times which is not supported by PartCAD yet\n  #examples/Ex101_InterpPlate:\n  #    type: cadquery\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.9072265625,
          "content": "# Copyright (c) CadQuery Development Team.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport os\nfrom setuptools import setup, find_packages\n\nreqs = []\nsetup_reqs = []\n\n# ReadTheDocs, AppVeyor and Azure builds will break when trying to instal pip deps in a conda env\nis_rtd = \"READTHEDOCS\" in os.environ\nis_appveyor = \"APPVEYOR\" in os.environ\nis_azure = \"CONDA_PY\" in os.environ\nis_conda = \"CONDA_PREFIX\" in os.environ\n\n# Only include the installation dependencies if we are not running on RTD or AppVeyor or in a conda env\nif not is_rtd and not is_appveyor and not is_azure and not is_conda:\n    reqs = [\n        \"cadquery-ocp>=7.7.0,<7.8\",\n        \"ezdxf>=1.3.0\",\n        \"multimethod>=1.11,<2.0\",\n        \"nlopt>=2.9.0,<3.0\",\n        \"typish\",\n        \"casadi\",\n        \"path\",\n    ]\n\n\nsetup(\n    name=\"cadquery\",\n    version=\"2.6-dev\",  # Update this for the next release\n    url=\"https://github.com/CadQuery/cadquery\",\n    license=\"Apache Public License 2.0\",\n    author=\"David Cowden\",\n    author_email=\"dave.cowden@gmail.com\",\n    description=\"CadQuery is a parametric  scripting language for creating and traversing CAD models\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(exclude=(\"tests\",)),\n    python_requires=\">=3.9\",\n    setup_requires=setup_reqs,\n    install_requires=reqs,\n    extras_require={\n        \"dev\": [\n            \"docutils\",\n            \"ipython\",\n            \"pytest\",\n            # \"black@git+https://github.com/cadquery/black.git@cq\",\n        ],\n        \"ipython\": [\"ipython\",],\n    },\n    include_package_data=True,\n    zip_safe=False,\n    platforms=\"any\",\n    test_suite=\"tests\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        #'Development Status :: 6 - Mature',\n        #'Development Status :: 7 - Inactive',\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: End Users/Desktop\",\n        \"Intended Audience :: Information Technology\",\n        \"Intended Audience :: Science/Research\",\n        \"Intended Audience :: System Administrators\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: MacOS\",\n        \"Operating System :: Unix\",\n        \"Programming Language :: Python\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Topic :: Internet\",\n        \"Topic :: Scientific/Engineering\",\n    ],\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}