{
  "metadata": {
    "timestamp": 1736560024365,
    "page": 838,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/hummingbird",
      "stars": 3371,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.0673828125,
          "content": "[run]\nbranch = True\nsource = hummingbird\nomit =\n  *tests*\n  *website*"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.123046875,
          "content": "[flake8]\nignore = E203, E266, E501, W503, F403, F401, C901\nmax-line-length = 127\nmax-complexity = 10\nselect = B,C,E,F,W,T4,B9\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0048828125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\nwebsite/sphinx/_build/\nwebsite/public/\nwebsite/sphinx/api/\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# Environments\n.env\n.venv\nenv\nenv/\nvenv\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n\n# project specific\n.vscode/*\nconfigs/db/*.config\nconfigs/github/*.token\n\n# MAC\n**.DS_STORE\n\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.419921875,
          "content": "repos:\n  - repo: https://github.com/psf/black\n    rev: stable\n    hooks:\n    - id: black\n      language_version: python3\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.2.3\n    hooks:\n    - id: flake8\n    - id: check-added-large-files\n    - id: check-ast\n    - id: check-byte-order-marker\n    - id: check-merge-conflict\n    - id: detect-private-key\n    - id: trailing-whitespace\n    - id: no-commit-to-branch\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.4423828125,
          "content": "# Microsoft Open Source Code of Conduct\r\n\r\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\r\n\r\nResources:\r\n\r\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\r\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\r\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\r\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.142578125,
          "content": "# Contributing\n\n## Welcome\n\nIf you are here, it means you are interested in helping us out. A hearty welcome and thank you! There are many ways you can contribute to Hummingbird:\n\n* Offer PR's to fix bugs or implement new features;\n* Give us feedback and bug reports regarding the software or the documentation;\n* Improve our examples, and documentation.\nThis project welcomes contributions and suggestions.\n\n## Getting Started\n\nPlease join the community on Gitter *gitter badge*. Also please make sure to take a look at the project [roadmap](../../wiki/Roadmap-for-Upcoming-Features-and-Support).\n\n\n### Pull requests\nIf you are new to GitHub [here](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/) is a detailed help source on getting involved with development on GitHub.\n\nAs a first time contributor, you will be invited to sign the Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com. You will only need to do this once across all repos using our CLA.\n\nYour pull request needs to reference a filed issue. Please fill in the template that is populated for the pull request. Only pull requests addressing small typos can have no issues associated with them.\n\nAll commits in a pull request will be [squashed](https://github.blog/2016-04-01-squash-your-commits/) to a single commit with the original creator as author.\n\n### Code of Conduct\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Developing\nThe simplest setup (assuming you have PyTorch already installed) is:\n```\nmkdir hummingbird\ncd hummingbird\ngit clone https://github.com/microsoft/hummingbird.git .\npython -m pip install -e .[tests,extra]\n```\n\nIf you do not have pytorch installed, please [install it](https://pytorch.org/get-started/locally/) first.\n\n### Docker\nWe provide a simple [Dockerfile](https://github.com/microsoft/hummingbird/blob/master/Dockerfile) that you can customize to your preferred development environment.\n```\ndocker build git://github.com/microsoft/hummingbird -t hb-jupy\ndocker run -it hb-dev\n```\n### Codespaces\nFor a light-weight, web-based experience, we provide the configuration ([.devcontainer](https://github.com/microsoft/hummingbird/tree/master/.devcontainer)) for [Codespaces](https://online.visualstudio.com/environments).  More information on this setup can be found [here]( https://docs.microsoft.com/en-us/visualstudio/online/reference/configuring).\n\n### Tools\n#### Pre-commit\nThis project uses [pre-commit](https://pre-commit.com/) hooks. Run  `python -m pip install pre-commit` if you don't already have this in your machine. Afterward, run `pre-commit install` to install pre-commit into your git hooks.\n\nAnd before you commit, you can run it like this `pre-commit run --all-files` and should see output such as:\n\n```\nblack............................Passed\nFlake8...........................Passed\n...\nDon't commit to branch...........Passed\n```\n\nIf you have installed your pre-commit hooks successfully, you should see something like this if you try to commit something non-conformant:\n```\n$ git commit -m \"testing\"\nblack............................Failed\n- hook id: black\n- files were modified by this hook\n\nreformatted hummingbird/convert.py\nAll done!\n1 file reformatted.\n```\n\n#### Formatting\nWe generally use all pep8 checks, with the exception of line length 127.\n\nTo do a quick check-up before commit, try:\n```\nflake8 . --count  --max-complexity=10 --max-line-length=127 --statistics\n```\n\n#### Coverage\n\nFor coverage, we use [coverage.py](https://coverage.readthedocs.io/en/coverage-5.0.4/) in our Github Actions.  Run  `python -m pip install coverage` if you don't already have this, and any code you commit should generally not significantly impact coverage.\n\nWe strive to not let check-ins decrease coverage.  To run all unit tests:\n```\ncoverage run -m pytest tests\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.69140625,
          "content": "# basic setup\nFROM mcr.microsoft.com/mirror/docker/library/python:3.8-buster\nRUN apt-get update && apt-get -y update\nRUN apt-get install -y sudo git\n\n# Setup user to not run as root\nRUN adduser --disabled-password --gecos '' hb-dev\nRUN adduser hb-dev sudo\nRUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\nUSER hb-dev\n\n# Pull repo\nRUN cd /home/hb-dev && git clone https://github.com/microsoft/hummingbird.git\nWORKDIR /home/hb-dev/hummingbird\n\n# Install HB  (Note: you may not need all of these packages and can remove some)\nRUN sudo python -m pip install -e .[docs,tests,extra,onnx]\n\n# Install precommit hooks\nRUN pre-commit install\n\n# override default image starting point\nCMD /bin/bash\nENTRYPOINT []\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.134765625,
          "content": "    MIT License\r\n\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE\r\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 3.2724609375,
          "content": "NOTICES\n\nThis repository incorporates material as listed below or described in the code.\n\nNVIDIA/gbm-bench - BSD\n\n# Copyright (c) 2018, NVIDIA CORPORATION. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n#  * Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#  * Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#  * Neither the name of NVIDIA CORPORATION nor the names of its\n#    contributors may be used to endorse or promote products derived\n#    from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n----------------------------------------------------------------------\n----------------------------------------------------------------------\n\nmiguelgfierro/codebase - BSD\n\nBSD License\n\nCopyright (c) 2016-present, Miguel González-Fierro. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Miguel González-Fierro nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.78515625,
          "content": "# Hummingbird\n\n[![PyPI version](https://badge.fury.io/py/hummingbird-ml.svg)](https://badge.fury.io/py/hummingbird-ml)\n[![](https://github.com/microsoft/hummingbird/workflows/Build/badge.svg?branch=main)](https://github.com/microsoft/hummingbird/actions)\n![](https://img.shields.io/badge/python-3.9%20%7C%203.10%20%7C%203.11-blue)\n[![coverage](https://codecov.io/gh/microsoft/hummingbird/branch/main/graph/badge.svg)](https://codecov.io/github/microsoft/hummingbird?branch=main)\n[![Gitter](https://badges.gitter.im/hummingbird-ml/community.svg)](https://gitter.im/hummingbird-ml/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Downloads](https://pepy.tech/badge/hummingbird-ml)](https://pepy.tech/project/hummingbird-ml)\n\n<p>\n    <img src=\"https://github.com/microsoft/hummingbird/raw/main/website/images/hb-logo-notext.png\"  width=200  >\n    <br>\n</p>\n\n## Introduction\n*Hummingbird* is a library for compiling trained traditional ML models into tensor computations. *Hummingbird* allows users to seamlessly leverage neural network frameworks (such as [PyTorch](https://pytorch.org/)) to accelerate traditional ML models. Thanks to *Hummingbird*, users can benefit from: (1) all the current and future optimizations implemented in neural network frameworks; (2) native hardware acceleration; (3) having a unique platform to support for both traditional and neural network models; and have all of this (4) without having to re-engineer their models.\n\nCurrently, you can use *Hummingbird* to convert your trained traditional ML models into [PyTorch](https://pytorch.org/), [TorchScript](https://pytorch.org/docs/stable/jit.html), [ONNX](https://onnx.ai/), and [TVM](https://docs.tvm.ai/)). *Hummingbird* [supports](https://github.com/microsoft/hummingbird/wiki/Supported-Operators) a variety of ML models and featurizers.  These models include\n[scikit-learn](https://scikit-learn.org/stable/) Decision Trees and Random Forest, and also [LightGBM](https://github.com/Microsoft/LightGBM) and [XGBoost](https://github.com/dmlc/xgboost) Classifiers/Regressors. Support for other neural network backends and models is on our [roadmap](https://github.com/microsoft/hummingbird/wiki/Roadmap-for-Upcoming-Features-and-Support).\n\nHummingbird also provides a convenient uniform \"inference\" API following the Sklearn API. This allows swapping Sklearn models with Hummingbird-generated ones without having to change the inference code. By converting the models to PyTorch and TorchScript it also becomes possible to serve them using [TorchServe](https://github.com/pytorch/serve).\n\n## How Hummingbird Works\n\nHummingbird works by reconfiguring algorithmic operators such that we can perform more regular computations which are amenable to vectorized and GPU execution. Each operator is slightly different, and we incorporate multiple strategies. This example explains one of Hummingbird's strategies for translating a decision tree into tensors involving GEMM  (GEneric Matrix Multiplication), where we implement the traversal of the tree using matrix multiplications.  (GEMM is one of the three tree conversion strategies we currently support.)\n\n\n<p align=\"center\">\n    <img src=\"https://github.com/microsoft/hummingbird/raw/main/website/images/1-simple-reg-tree.png\" width=600 >\n    <br>\n    <em>Simple decision tree</em>\n</p>\n\n\nIn this example, the decision tree has four decision nodes (orange), and five leaf nodes (blue). The tree takes a feature vector with five elements as input. For example, assume that we want to calculate the output of this observation:\n\n\n<p align=\"center\">\n    <img src=\"https://github.com/microsoft/hummingbird/raw/main/website/images/2-calc-output.png\" width=400 >\n</p>\n\n**Step 1:** Multiply the `input tensor` with tensor `A` (computed from the decision tree model above) that captures the relationship between input features and internal nodes. Then compare it with tensor `B` which is set to the value of each internal node (orange) to create the tensor `input path` that represents the path from input to node. In this case, the tree model has 4 conditions and the input vector is 5, therefore, the shape of tensor `A` is 5x4 and tensor B is 1x4.\n\n<p align=\"center\">\n<img src=\"https://github.com/microsoft/hummingbird/raw/main/website/images/3-matrix.png\" width=450 >\n</p>\n\n**Step 2:** The `input path` tensor will be multiplied with tensor `C` that captures whether the internal node is a parent of that internal node, and if so, whether it is in the left or right sub-tree (left = 1, right =-1, otherwise =0) and then check the equals with tensor `D` that captures the count of the left child of its parent in the path from a leaf node to the tree root to create the tensor output path that represents the path from node to output. In this case, this tree model has 5 outputs with 4 conditions, therefore, the shape of tensor `C` is 4x5 and tensor `D` is 1x5.\n\n<p align=\"center\">\n<img src=\"https://github.com/microsoft/hummingbird/raw/main/website/images/4-matrixnext.png\" width=450 >\n</p>\n\n**Step 3:** The `output path` will be multiplied with tensor `E` that captures the mapping between leaf nodes to infer the final prediction. In this case, tree model has 5 outputs, therefore, shape of tensor `E` is 5x1.\n\n<p align=\"center\">\n<img src=\"https://github.com/microsoft/hummingbird/raw/main/website/images/5-singletensor.png\" width=450>\n</p>\n\nAnd now Hummingbird has compiled a tree-based model using the GEMM strategy!  For more details, please see [Figure 3](https://scnakandala.github.io/papers/TR_2020_Hummingbird.pdf) of our paper.\n\n\n_Thank you to [Chien Vu](https://www.linkedin.com/in/vumichien/) for contributing the graphics and descriptions in his [blog](https://towardsdatascience.com/standardizing-traditional-machine-learning-pipelines-to-tensor-computation-using-hummingbird-7a0b3168670) for this example!_\n\n## Installation\n\nHummingbird was tested on Python 3.9, 3.10 and 3.11 on Linux, Windows and MacOS machines. (TVM only works through Python3.10.) It is recommended to use a virtual environment (See: [python3 venv doc](https://docs.python.org/3/tutorial/venv.html) or [Using Python environments in VS Code](https://code.visualstudio.com/docs/python/environments).)\n\nHummingbird requires PyTorch >= 1.6.0. Please go [here](https://pytorch.org/) for instructions on how to install PyTorch based on your platform and hardware.\n\nOnce PyTorch is installed, you can get Hummingbird from pip with:\n```\npython -m pip install hummingbird-ml\n```\n\nIf you require the optional dependencies lightgbm and xgboost, you can use:\n```\npython -m pip install hummingbird-ml[extra]\n```\n\n\nSee also [Troubleshooting](TROUBLESHOOTING.md) for common problems.\n\n## Examples\n\nSee the [notebooks](notebooks) section for examples that demonstrate use and speedups.\n\nIn general, Hummingbird syntax is very intuitive and minimal. To run your traditional ML model on DNN frameworks, you only need to `import hummingbird.ml` and add `convert(model, 'dnn_framework')` to your code. Below is an example using a [scikit-learn random forest](https://scikit-learn.org/stable/modules/ensemble.html#forest) model and [PyTorch](https://pytorch.org/) as target framework.\n\n```python\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom hummingbird.ml import convert, load\n\n# Create some random data for binary classification\nnum_classes = 2\nX = np.random.rand(100000, 28)\ny = np.random.randint(num_classes, size=100000)\n\n# Create and train a model (scikit-learn RandomForestClassifier in this case)\nskl_model = RandomForestClassifier(n_estimators=10, max_depth=10)\nskl_model.fit(X, y)\n\n# Use Hummingbird to convert the model to PyTorch\nmodel = convert(skl_model, 'pytorch')\n\n# Run predictions on CPU\nmodel.predict(X)\n\n# Run predictions on GPU\nmodel.to('cuda')\nmodel.predict(X)\n\n# Save the model\nmodel.save('hb_model')\n\n# Load the model back\nmodel = load('hb_model')\n```\n\n# Documentation\n\nThe API documentation is [here](https://microsoft.github.io/hummingbird/).\n\nYou can also read about Hummingbird in our blog post [here](https://www.microsoft.com/en-us/research/group/gray-systems-lab/articles/announcing-hummingbird-a-library-for-accelerating-inference-with-traditional-machine-learning-models/).\n\nFor more details on the vision and on the technical details related to Hummingbird, please check our papers:\n\n* [Tensors: An abstraction for general data processing](http://www.vldb.org/pvldb/vol14/p1797-koutsoukos.pdf). Dimitrios Koutsoukos, Supun Nakandala, Konstantinos Karanasos, Karla Saur, Gustavo Alonso, Matteo Interlandi. PVLDB 2021.\n\n* [A Tensor Compiler for Unified Machine Learning Prediction Serving](https://www.usenix.org/system/files/osdi20-nakandala.pdf). Supun Nakandala, Karla Saur, Gyeong-In Yu, Konstantinos Karanasos, Carlo Curino, Markus Weimer, Matteo Interlandi. OSDI 2020.\n* [Compiling Classical ML Pipelines into Tensor Computations for One-size-fits-all Prediction Serving](http://learningsys.org/neurips19/assets/papers/27_CameraReadySubmission_Hummingbird%20(5).pdf). Supun Nakandala, Gyeong-In Yu, Markus Weimer, Matteo Interlandi. System for ML Workshop. NeurIPS 2019\n\n# Contributing\n\nWe welcome contributions! Please see the guide on [Contributing](CONTRIBUTING.md).\n\nAlso, see our [roadmap](https://github.com/microsoft/hummingbird/wiki/Roadmap-for-Upcoming-Features-and-Support) of planned features.\n\n# Community\n\nJoin our community! [![Gitter](https://badges.gitter.im/hummingbird-ml/community.svg)](https://gitter.im/hummingbird-ml/community?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# Authors\n\n* Supun Nakandala ([@scnakandala](https://github.com/scnakandala))\n* Matteo Interlandi ([@interesaaat](https://github.com/interesaaat))\n* Karla Saur ([@ksaur](https://github.com/ksaur))\n\n# Special Thanks\n\n* Masahiro Hiramori ([@mshr-h](https://github.com/mshr-h)) for the ongoing contributions\n* Masahiro Masuda ([@masahi](https://github.com/masahi)) for the TVM and batching contributions\n\n# License\n[MIT License](LICENSE)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.7978515625,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.3 BLOCK -->\r\n\r\n## Security\r\n\r\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\r\n\r\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets Microsoft's [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)) of a security vulnerability, please report it to us as described below.\r\n\r\n## Reporting Security Issues\r\n\r\n**Please do not report security vulnerabilities through public GitHub issues.**\r\n\r\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\r\n\r\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\r\n\r\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\r\n\r\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\r\n\r\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\r\n  * Full paths of source file(s) related to the manifestation of the issue\r\n  * The location of the affected source code (tag/branch/commit or direct URL)\r\n  * Any special configuration required to reproduce the issue\r\n  * Step-by-step instructions to reproduce the issue\r\n  * Proof-of-concept or exploit code (if possible)\r\n  * Impact of the issue, including how an attacker might exploit the issue\r\n\r\nThis information will help us triage your report more quickly.\r\n\r\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\r\n\r\n## Preferred Languages\r\n\r\nWe prefer all communications to be in English.\r\n\r\n## Policy\r\n\r\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\r\n\r\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\r\n"
        },
        {
          "name": "TROUBLESHOOTING.md",
          "type": "blob",
          "size": 1.21484375,
          "content": "# Troubleshooting Common Problems:\n\n### Running PyTorch on GPU:\n\nIn order to run Hummingbird on PyTorch with GPU, you will need to `python -m pip uninstall torch` and re-install pytorch using the CUDA version of your machine.\n\n### Installation Issues with External Libraries:\n\n\n#### MacOS\n* *xgboost installation:*  Ex:  `./xgboost/build-python.sh: line 21: cmake: command not found`\n  * Install `cmake` (Ex: `brew install cmake`).\n\n\n* *lightgbm installation:* `OSError: dlopen(lib_lightgbm.so, 6): Library not loaded: ...libomp.dylib`\n    * There is a fixed issue with lgbm and MacOS.  See [LightGBM#1369](https://github.com/Microsoft/LightGBM/issues/1369).\n    * see also our [build file](https://github.com/microsoft/hummingbird/blob/main/.github/workflows/pythonapp.yml) with `brew install libomp`\n\n#### Linux\n * With Yum-based Linux systems, there is an issue installing LightGBM: `OSError: libgomp.so.1: cannot open shared object file: No such file or directory`\n   * Install `libgomp` with `yum install libgomp`\n\n#### Windows\n* *Pytorch installation:* ` ERROR: Could not find a version that satisfies the requirement torch>=1.4.0`).\n    * Install PyTorch manually by following the instructions on PyTorch [website](https://pytorch.org/)."
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "hummingbird",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.2509765625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.black]\nline-length = 127\ninclude = '\\.pyi?$'\nexclude = '''\n/(\n    \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | _build\n  | buck-out\n  | build\n  | dist\n)/\n'''\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1669921875,
          "content": "[bumpversion]\ncurrent_version = 0.4.12\n\n[bumpversion:file:hummingbird/__init__.py]\n[bumpversion:file:website/sphinx/conf.py]\n\n\n[bdist_wheel]\nuniversal = 1\n\n[easy_install]\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1787109375,
          "content": "from setuptools import find_packages, setup\nimport os\n\nthis = os.path.dirname(__file__)\n\npackages = find_packages()\nassert packages\n\n# read version from the package file.\nwith (open(os.path.join(this, \"hummingbird/__init__.py\"), \"r\")) as f:\n    line = [_ for _ in [_.strip(\"\\r\\n \") for _ in f.readlines()] if _.startswith(\"__version__\")]\n    if len(line) > 0:\n        version_str = line[0].split(\"=\")[1].strip('\" ')\n\nREADME = os.path.join(os.getcwd(), \"README.md\")\nwith open(README) as f:\n    long_description = f.read()\n    start_pos = long_description.find(\"## Introduction\")\n    if start_pos >= 0:\n        long_description = long_description[start_pos:]\n\ninstall_requires = [\n    \"numpy>=1.15\",\n    \"onnxconverter-common>=1.6.0\",\n    \"onnx<=1.16.1\",\n    \"scipy\",\n    \"scikit-learn\",\n    \"torch>1.7.0\",\n    \"psutil\",\n    \"dill\",\n    \"protobuf>=3.20.2\",\n]\nonnx_requires = [\n    \"onnxruntime>=1.0.0,<1.18.0\",\n    \"onnxmltools>=1.6.0,<=1.12.0\",\n    \"skl2onnx>=1.7.0,<=1.16.0\",\n]\nextra_requires = [\n    # The need each for these depends on which libraries you plan to convert from\n    \"xgboost>=0.90,<2.0.0\",\n    \"lightgbm>=2.2\",\n    \"holidays\",\n    \"prophet\",\n]\nsetup(\n    name=\"hummingbird-ml\",\n    version=version_str,\n    description=\"Convert trained traditional machine learning models into tensor computations\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    license=\"MIT License\",\n    author=\"Microsoft Corporation\",\n    author_email=\"hummingbird-dev@microsoft.com\",\n    url=\"https://github.com/microsoft/hummingbird\",\n    packages=packages,\n    include_package_data=True,\n    install_requires=install_requires,\n    extras_require={\n        \"tests\": [\"flake8\", \"pytest\", \"coverage\", \"pre-commit\"],\n        \"sparkml\": [\"pyspark>=2.4.4\", \"pyarrow>1.0\"],\n        \"onnx\": onnx_requires,\n        \"extra\": extra_requires,\n        \"benchmark\": onnx_requires + extra_requires + [\"memory-profiler\", \"psutil\"],\n    },\n    classifiers=[\n        \"Environment :: Console\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        \"Operating System :: OS Independent\",\n        \"License :: OSI Approved :: MIT License\",\n    ],\n    python_requires=\">=3.8\",\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}