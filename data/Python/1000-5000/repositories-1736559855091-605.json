{
  "metadata": {
    "timestamp": 1736559855091,
    "page": 605,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ab77/netflix-proxy",
      "stars": 3689,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".git\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08203125,
          "content": "*~\n.DS_Store\n*.py[cod]\nsessions/\nauth/db/auth.db\nid_rsa.travis\nChromeProfile/\nvenv*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.7578125,
          "content": "dist: xenial\nsudo: required\nlanguage: python\ncache: pip\npython:\n- 3.7\nenv:\n  global:\n  - secure: kDAI818hwV0MF87EI0PANbIsX/AIiNrsI0+hdiOd4bmH7VGM71/qjaaoZVyDmfkkEvA/qrn4LUuH3YQ7VTtrgZm/ggDLxi03XIvJwez9knSc9x/XLdd/Xj/Q36KYrccuZwJsDUAtjiL6oWp84wbuvESeuFdp9ufn5mSMRAcaQbIdYudxGbU7AQrP0CC5huJvF8aoaIZFwhV2d+n9YLqxpZ9Etax5BV+cWAu9AXGu+gt4xF1dKcYxqsdSvUahrq8Z2IbCcy/KSBbZLjmwP8ze4nFl0yocW++sNqr0oEa0KNBEgwO6vvolmkPm93dz7AewMxkWSeDFCSZKHmZWuqVVllUuJfKOUOeF18NjYSKUayuHzml7CBQZgMBjPYdaa8jIgp/uHwMwPYYP/a6zSkevZ0Dqkq/qREF3NCVXs8BLgM8c9XcI1r6D9U80sMVj4829/tEikK9QqO6W0Q7qf0+V9j48PR5qZXbIthj+pon7Q6k3dNUvaAKWOalOT5IS5bBp9gLrGDakhnB+iRTZ8MnFXMT59XI9pvTsoFYxBsWcY0zTaxiivKJ25eCeESNVnqBWR01/TotsdeIcyF9dbsAT/hmp8hMtmi009eIPdVkyMoKHQXEYN3z4B7Ux11clVLDIsY9BX91XVaagXKEUppaIadlEnRb5heZRzXBENgRa/XI=\nbefore_install:\n- tests/__isfork.sh || travis_terminate 0\n- openssl aes-256-cbc -K $encrypted_45757fbb12c0_key -iv $encrypted_45757fbb12c0_iv\n  -in id_rsa.travis.enc -out id_rsa.travis -d\n- sudo apt-get -y install build-essential python-dev libffi-dev libssl-dev\ninstall:\n- tests/__isfork.sh || travis_terminate 0\n- export PATH=$HOME/.local/bin:$PATH\n- pip install pip setuptools --upgrade\n- $(which pip) install virtualenv\n- $(which virtualenv) venv\n- source venv/bin/activate\n- $(which pip) install -r tests/requirements.txt\nbefore_script:\n- tests/__isfork.sh || travis_terminate 0\n- chmod 600 id_rsa.travis && chmod 644 id_rsa.travis.pub\n- export NAME=$(uuidgen)\n- export RESOLVER=$(grep nameserver /etc/resolv.conf)\n- $(which python) tests/testbuild.py digitalocean --create --name ${NAME} --api_token=$do_api_v2_token\n  --branch=$TRAVIS_BRANCH --region=$do_region || ($(which python) tests/testbuild.py digitalocean\n  --destroy --name ${NAME} --api_token=$do_api_v2_token && false)\nscript:\n- tests/__isfork.sh || travis_terminate 0\n- true\nafter_script:\n- tests/__isfork.sh || travis_terminate 0\n- printf \"${RESOLVER}\\n\" | sudo tee /etc/resolv.conf\n- $(which python) tests/testbuild.py digitalocean --destroy --name ${NAME} --api_token=$do_api_v2_token\nafter_success:\n- tests/__isfork.sh || travis_terminate 0\n- true\nnotifications:\n  slack:\n    secure: onMIdghH50Z0UKQ3/zmQ4fNGtBnW8Mumkvq6CvoYuPB35UzrBd3bA0jVnmkyRFStb7Y19IV4ABx2/9f+zgtrXfV0wk2KgbNkg/NTbLZPZ4Y9gQK2cxrVYQLFQk/UNjT3SzReYnkK02CqBXZy2jVmOIk/EIPchb1FAk2fvC4mAlFdu4eziG6dqZgukcqwxVdZPqap12rIFxTPa489HHR6TRvWf/wdQtbh9CwQwXhhqZa8Dadytb9kr2UVh4wTZ83thohRyO/oLZjFhYFQ0Sxd1QXZs+1z70bUC3Q6cgsg3tW7KB9Z84EvvrQFv6Jp8bfzecWwqiGHLcVc6ZIfZueQM+ceWBKf/4QN7Nt+Njv/PZtNUuvKg4XTLfrvL0m39HAHYr5rnSvxY3+MByQ/e45VPBvXBr+hFiEpyAvNXgDVr17kC+FzzemHnzH24806eaOgouRkrYV+rXEoGfVQe1TGVdeHUeumLyis4YYmlf20pR8xhuhEr383+9q0fzCvqdqHhH/sC3F3xOCAvVHqdNGPm9zOpxDASLCyMf40NB1s+dEOzYfr1sKQFa1ZzkGqwKDI1myKoLppgMlEz8ewwZn6RIv+mh5WBobrBg5Ebu/U/iZn5S6qeighb9Ph0Fk57Dn/jJRm8utYhahmB0nfopFAiucUgl0btrmKuqCaagtS92Q=\n"
        },
        {
          "name": ".versionbot",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.2666015625,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file\nautomatically by Versionist. DO NOT EDIT THIS FILE MANUALLY!\nThis project adheres to [Semantic Versioning](http://semver.org/).\n\n# v0.0.2\n## (2022-12-03)\n\n* Integrate Flowzone CI [belodetek]\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.0283203125,
          "content": "netflix-proxy.belodedenko.me\n"
        },
        {
          "name": "Caddyfile.template",
          "type": "blob",
          "size": 0.1357421875,
          "content": "0.0.0.0:8080, [::]:8080\ngzip\nheader / Cache-Control \"no-cache, no-store, must-revalidate\"\nheader / Pragma \"no-cache\"\nheader / Expires \"0\"\n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0908203125,
          "content": "The MIT License (MIT)\n=====================\n\nCopyright © `2014` `Anton Belodedenko`\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the “Software”), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.3955078125,
          "content": "[![Build Status](https://travis-ci.org/ab77/netflix-proxy.svg?branch=master)](https://travis-ci.org/ab77/netflix-proxy) [![Docker Pulls](https://img.shields.io/docker/pulls/ab77/sniproxy.svg?maxAge=2592000)](https://hub.docker.com/r/ab77/sniproxy/) [![Docker Stars](https://img.shields.io/docker/stars/ab77/sniproxy.svg?maxAge=2592000)](https://hub.docker.com/r/ab77/sniproxy/)\n\n> `TL;DR`\n\nfind a (recent)[n19](https://github.com/ab77/netflix-proxy#footnotes) Debian or Ubuntu box with root on a clean public IP and run:\n\n    apt-get update\\\n\t  && apt-get -y install vim dnsutils curl sudo\\\n\t  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n\t  && mkdir -p ~/netflix-proxy\\\n\t  && cd ~/netflix-proxy\\\n\t  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n\t  && ./build.sh\n\nSee the [**Wiki**](https://github.com/ab77/netflix-proxy/wiki) page(s) for some common troubleshooting ideas.\n\n... or subscribe to [Unzoner](http://unzoner.com) VPN service to un-block:\n\n<a href=\"https://dashboard.unzoner.com/sub\"><img align=\"left\" src=\"https://api.unzoner.com/api/v1.0/countries/available/flags.png\"></a><br><br>\n\n# about\n`netflix-proxy` is a smart DNS proxy to stream `Netflix`, `Hulu`[[n2]](#footnotes), `HBO Now` and others out of region. It is deployed using Docker containers and uses `dnsmasq`[[n18]](#footnotes) and `sniproxy`[[n1]](#footnotes) to provide SmartDNS services. It works for some blocked sites, such as [PornHub](http://www.pornhub.com/) and [YouTube](https://en.wikipedia.org/wiki/Blocking_of_YouTube_videos_in_Germany). [Subscribe](http://eepurl.com/cb4rUv) to the mailing list and be notified of new features, updates, etc.\n\n# supported services\nThe following are supported out of the box, however adding additional services is trivial and is done by updating `dnsmasq.conf` file and running `docker restart dnsmasq`:\n* Netflix\n* Hulu[[n2]](#footnotes)\n* HBO Now\n* Amazon Instant Video\n* Crackle\n* Pandora\n* Vudu\n* blinkbox\n* BBC iPlayer[[n5]](#footnotes)\n* NBC Sports and potentially many [more](https://github.com/ab77/netflix-proxy/blob/master/proxy-domains.txt)\n\n# license\nThis project is **free**, covered by the [MIT License](https://github.com/ab77/netflix-proxy/blob/master/LICENSE.md). It is provided without any warranty and can be used for any purpose, including private and commercial. However, if you are planning to use it for commercial purposes (i.e make money off it), please do not expect free support, as it would be unfair. A commercial support model can always be negotiated, if required. Please [contact](https://www.upwork.com/freelancers/~016da2a2dc195af5ec) me if this is something that interests you.\n\n# instructions\nThe following paragraphs show how to get this solution up and running with a few different Cloud providers I've tried so far. If you prefer a video tutorial, [here](https://www.youtube.com/watch?v=8DrNgnq_cdM) is one prapared by one of the users. Note, OpenVZ **won't work**[[n15]](#footnotes), make sure to get a proper virtual machine using KVM or Xen.\n\n[![](https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg)](https://www.digitalocean.com/?refcode=937b01397c94&utm_campaign=Referral_Invite&utm_medium=Referral_Program&utm_source=badge)\n\n(Netflix is **blocked**[[n16]](#footnotes)) The following is based on a standard Ubuntu Docker image provided by `DigitalOcean`, but should in theory work on any Linux distribution **with** Docker pre-installed.\n\n1. Head over to [Digital Ocean](https://m.do.co/c/937b01397c94) to get **$10 USD credit**\n2. Create a Droplet in a geographic location of interest using the latest Docker image (find in under `One-click Apps` tab).\n3. SSH to your server and run:\n\n```\nmkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n4. Make sure to **record the URL and credentials** for the `netflix-proxy` admin site.\n5. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n6. Finally, enjoy `Netflix` and others out of region.\n7. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n### authorising additional IPs\nIf you want to share your system with friends and family, you can authorise their home IP address(s) using the `netflix-proxy` admin site, located at `http://<ipaddr>:8080/`, where `ipaddr` is the public IP address of your VPS. Login using `admin` account with the password you recorded during the build. If you've forgotten your admin credentials, [reset](https://github.com/ab77/netflix-proxy/wiki/Change-admin-password).\n\n[![](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/admin.png)](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/admin.png)\n\nThe `admin` account does not restrict the entry or removal of IPs. If you want to restrict the entry of IPs to the current client IP using an automatically populated drop-down, create a standard user account using the `account-creator.sh` script located in the `auth` directory, which will prompt you for the input and create the user account.\n\n#### dynamic IPs\nYou can also use the `netflix-proxy` admin site to update your IP address, should your ISP assign you a new one (e.g. via DHCP). If your IP address does change, all HTTP/HTTPS requests will automatically be redirected to the admin site on port `8080`. All DNS requests will be redirected to `dnsmasq` instance running on port `5353`. You will most likely need to purge your browser and system DNS caches after this. On Windows, run `ipconfig /flushdns`. On OS X, run:\n\n```\nsudo killall -HUP mDNSResponder\\\n && sudo dscacheutil -flushcache`\n```\n\nThen restart the browser (e.g `chrome://restart`) and/or reboot the relevant devices. This mechanism should work on browsers, but will most likely cause errors on other devices, such as Apple TVs and smart TVs. If you Internet stops working all of a sudden, try loading a browser and going to `netflix.com`.\n\n#### scripted authorization of IPs\n* to automatically authorise client IP using a script (where `ipaddr` is the public IP address of your VPS), substitute admin credentials and run:\n\n```\ncurl -L http://<ipaddr>:8080/autoadd?username=<admin-username>&password=<admin-password>\n```\n\n* to manually authorise a specific IP, substitute admin credentials and run:\n\n```\ncurl -L http://<ipaddr>:8080/autoadd?ip=<your-public-ipaddr>&username=<admin-username>&password=<admin-password>\n```\n\n#### automatic IP authorization\n**WARNING**: do not do enable this unless you know what you are doing.\n\nTo enable automatic authorization of every IP that hits your proxy, set `AUTO_AUTH = True` in `auth/settings.py` and run `service netflix-proxy-admin restart`. This setting will effectively authorize any IP hitting your proxy IP with a web browser for the first time, including bots, hackers, spammers, etc. Upon successful authorization, the browser will be redirected to [Google](http://google.com/).\n\nThe DNS service is configured with recursion turned on by [default](https://github.com/ab77/netflix-proxy#security), so after a successful authorization, anyone can use your VPS in DNS amplification attacks, which will probably put you in breach of contract with the VPS provider. You have been **WARNED**.\n\n### security\nThe build script automatically configures the system with **DNS recursion turned on**. This has security implications, since it potentially opens your DNS server to a DNS amplification attack, a kind of a [DDoS attack](https://en.wikipedia.org/wiki/Denial-of-service_attack). This should not be a concern however, as long as the `iptables` firewall rules configured automatically by the build script for you remain in place. However if you ever decide to turn the firewall off, please be aware of this.\n\n### command line options\nThe following command line options can be optionaly passed to `build.sh` for additional control:\n\n```\nUsage: ./build.sh [-b 0|1] [-c <ip>]\n        -b      grab docker images from repository (0) or build locally (1) (default: 0)\n        -c      specify client-ip instead of being taken from ssh_connection\n```\n\n### updates\nIn order to update your existing database schema, please run the provided `update.sh` script. Alternatively you can run the schema updates manually (e.g. if you skipped a version).\n\n## other cloud providers\n\n### locale issues\n\nThe build script has been designed to work on Ubuntu and Debian. It will most likely fail on all other distributions. Some pre-requisites require the locale to be set correctly and some provider OS images need extra help. If you get `locale` issues reported by `Python` and/or `pip` during the build, try running the following first:\n\n```\nexport LANGUAGE=en_US.UTF-8\\\n  && export LANG=en_US.UTF-8\\\n  && export LC_ALL=en_US.UTF-8\\\n  && export LC_CTYPE=\"en_US.UTF-8\"\\\n  && locale-gen en_US.UTF-8\\\n  && sudo apt-get -y install language-pack-en-base\\\n  && sudo dpkg-reconfigure locales\n```\n\n[![](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/vultr.png)](http://www.vultr.com/?ref=6871746)\n\n(Netflix is **blocked**[[n16]](#footnotes)) The following is based on a Debian image provided by `Vultr`, but should in theory work on any Debian distribution.\n\n1. For a limited time, head over to [Vultr](http://www.vultr.com/?ref=6962933-3B) to create and account and get **$20 USD credit**.\n2. Create a compute instance in a geographic location of interest using Debian or Ubuntu image.\n3. SSH to your server and run:\n\n```\napt-get update\\\n  && apt-get -y install vim dnsutils curl sudo\\\n  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n  && mkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n4. Make sure to **record the credentials** for the `netflix-proxy` admin site.\n5. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n6. Finally, enjoy `Netflix` and others out of region.\n7. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n[![](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/kamatera.png)](https://www.kamatera.com/express/compute/?tcampaign=antonbelodedenko&HT=17)\n\n(Netflix is **blocked**[[n16]](#footnotes)) The following is based on a standard Ubuntu image provided by `Kamatera`.\n\n1. Head over to [Kamatera](https://www.kamatera.com/express/compute/?tcampaign=antonbelodedenko&HT=17) to start your **30 Day Free Trial**.\n2. Create a new server in a geographic location of interest using Ubuntu or Debian image.\n3. SSH to your server and run:\n\n```\napt-get update\\\n  && apt-get -y install vim dnsutils curl sudo\\\n  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n  && mkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n4. Make sure to **record the URL and credentials** for the `netflix-proxy` admin site.\n5. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n6. Finally, enjoy `Netflix` and others out of region.\n7. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n[![](http://www.ramnode.com/images/banners/affbannerdarknewlogo.png)](https://clientarea.ramnode.com/aff.php?aff=3079)\n\n(Netflix is blocked[[n16]](#footnotes)) The following is based on a Debian or Ubuntu images provided by `RamNode`.\n\n1. Head over to [RamNode](https://clientarea.ramnode.com/aff.php?aff=3079) to create an account and buy a **KVM** VPS in a geographic location of interest (OpenVZ won't work).\n2. Log into the `VPS Control Panel` and (re)install the OS using Ubuntu or Debian image.\n3. SSH to your server and run:\n\n```\napt-get update\\\n  && apt-get -y install vim dnsutils curl sudo\\\n  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n  && mkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n4. Make sure to **record the credentials** for the `netflix-proxy` admin site.\n5. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n6. Finally, enjoy `Netflix` and others out of region.\n7. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n[![](https://www.linode.com/media/images/logos/standard/light/linode-logo_standard_light_small.png)](https://www.linode.com/?r=ceb35af7bad520f1e2f4232b3b4d49136dcfe9d9)\n\n(Netflix is **blocked**[[n16]](#footnotes)) The following is based on a standard Ubuntu image provided by `Linode`, but should work on any Linux distribution **without** Docker installed.\n\n1. Head over to [Linode](https://www.linode.com/?r=ceb35af7bad520f1e2f4232b3b4d49136dcfe9d9) and sign-up for an account.\n2. Create a new `Linode` in a geographic location of interest and deploy an Ubuntu image into it.\n3. SSH to your server and run:\n\n```\napt-get update\\\n  && apt-get -y install vim dnsutils curl sudo\\\n  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n  && mkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n4. Make sure to **record the credentials** for the `netflix-proxy` admin site.\n5. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n6. Finally, enjoy `Netflix` and others out of region.\n7. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n[![](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/dreamhost.png)](http://www.dreamhost.com/r.cgi?2124700)\n\n**(untested)** The following is based on a standard Ubuntu image provided by `DreamHost`, but should work on any Linux distribution **without** Docker installed and running under **non-root** user (e.g. `Amazon Web Services`[[n13]](#footnotes)).\n\n1. Head over to [DreamHost](http://www.dreamhost.com/r.cgi?2124700) and sign-up for an account.\n2. Find the `DreamCompute` or `Public Cloud Computing` section and launch an Ubuntu instance in a geographic location of interest.\n3. Make sure to add an additional firewall rule to allow DNS: `Ingress - IPv4 - UDP - 53 - 0.0.0.0/0 (CIDR)`\n4. Also add a `Floating IP` to your instance.\n5. SSH to your server and run:\n\n```\nsudo apt-get update\\\n  && sudo apt-get -y install vim dnsutils curl\\\n  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n  && sudo usermod -aG docker $(whoami | awk '{print $1}')\\\n  && mkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n6. Make sure to **record the credentials** for the `netflix-proxy` admin site.\n7. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n8. Finally, enjoy `Netflix` and others out of region.\n9. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n[![](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/gandi.png)](https://www.gandi.net/hosting/iaas/buy)\n\nThe following is based on Ubuntu image provided by `Gandi` using` root` login with SSH key only (no password). For default non-root `admin` login, adjust step 6 to use `sudo` where necessary.\n\n1. Head over to [Gandi](https://www.gandi.net/hosting/iaas/buy) to create a virtual server in a geographic location of interest.\n2. SSH to your server and run:\n\n```\napt-get update\\\n  && apt-get -y install vim dnsutils curl sudo\\\n  && curl -fsSL https://get.docker.com/ | sh || apt-get -y install docker.io\\\n  && mkdir -p ~/netflix-proxy\\\n  && cd ~/netflix-proxy\\\n  && curl -fsSL https://github.com/ab77/netflix-proxy/archive/latest.tar.gz | gunzip - | tar x --strip-components=1\\\n  && ./build.sh\n```\n\n3. Make sure to **record the credentials** for the `netflix-proxy` admin site.\n4. Set your DNS server to the IP given at the end of the script, then go to [this](http://ifconfig.co/) site to make sure the same IP is displayed.\n5. Finally, enjoy `Netflix` and others out of region.\n6. Enjoy or try `#netflix-proxy` on [freenode](https://webchat.freenode.net/?channels=netflix-proxy) for help.\n\n### Microsoft Azure (advanced)\nThe following **has not been tested** and is based on a standard Ubuntu image provided by `Microsoft Azure` using `cloud-harness` automation tool I wrote a while back and assumes an empty `Microsoft Azure` subscription. Also, because Azure [block ICMP](https://blogs.msdn.microsoft.com/mast/2014/06/22/use-port-pings-instead-of-icmp-to-test-azure-vm-connectivity/) thorough the load-balancer and don't offer native IPv6 support, IPv6 isn't going to work.\n\n1. Head over to [Microsoft Azure](https://azure.microsoft.com/en-gb/) and sign-up for an account.\n2. Get [Python](https://www.python.org/downloads/).\n3. On your workstation, run `git clone https://github.com/ab77/cloud-harness.git ~/cloud-harness`.\n4. Follow `cloud-harness` [Installation and Configuration](https://github.com/ab77/cloud-harness#installation-and-configuration) section to set it up.\n5. [Create](https://github.com/ab77/cloud-harness#create-storage-account-name-must-be-unique-as-it-forms-part-of-the-storage-url-check-with---action-check_storage_account_name_availability) a storage account.\n6. [Create](https://github.com/ab77/cloud-harness#create-a-new-hosted-service-name-must-be-unique-within-cloudappnet-domain-check-with---action-check_storage_account_name_availability) a new hosted service.\n7. [Add](https://github.com/ab77/cloud-harness#add-x509-certificate-containing-rsa-public-key-for-ssh-authentication-to-the-hosted-service) a hosted service certificate for SSH public key authentication\n8. [Create](https://github.com/ab77/cloud-harness#create-a-reserved-ip-address-for-the-hosted-service) a reserved ip address.\n9. [Create](https://github.com/ab77/cloud-harness#create-virtual-network) a virtual network.\n10. [Create](https://github.com/ab77/cloud-harness#create-a-new-linux-virtual-machine-deployment-and-role-with-reserved-ip-ssh-authentication-and-customscript-resource-extensionn3) a Ubuntu virtual machine as follows:\n\n```\n    ./cloud-harness.py azure --action create_virtual_machine_deployment \\\n    --service <your hosted service name> \\\n    --deployment <your hosted service name> \\\n    --name <your virtual machine name> \\\n    --label 'Netflix proxy' \\\n    --account <your storage account name> \\\n    --blob b39f27a8b8c64d52b05eac6a62ebad85__Ubuntu-14_04-LTS-amd64-server-20140414-en-us-30GB \\\n    --os Linux \\\n    --network VNet1 \\\n    --subnet Subnet-1 \\\n    --ipaddr <your reserved ipaddr name> \\\n    --size Medium \\\n    --ssh_auth \\\n    --disable_pwd_auth \\\n    --verbose\n```\n\n11. Use the [Azure Management Portal](https://manage.windowsazure.com/) to add `DNS (UDP)`, `HTTP (TCP)` and `HTTPS (TCP)` endpoints and secure them to your home/work/whatever IPs using the Azure `ACL` feature.\n12. SSH to your VM as `azureuser` using custom public TCP port (not `22`) and use any non-root user Ubuntu instructions to build/install `netflix-proxy`.\n\n### automated tests\n\n#### test build\nThis project is linked with `Travis CI` to deploy and test the project automatically. The Python script `testbuild.py` is used to deploy and test `netflix-proxy`. This script deploys a test `Droplet` and then runs a serious of tests to verify (a) that all `Docker` containers start; (b) the `built.sh` script outputs the correct message at the end; (c) all the relevant services survive a reboot; and (d) proxy is able to comunicate with Netflix over SSL.\n\nThe `testbuild.py` script can also be used to programatically deploy `Droplets` from the command line:\n\n```\nusage: testbuild.py digitalocean [-h] --api_token API_TOKEN\n                                 [--client_ip CLIENT_IP]\n                                 [--fingerprint FINGERPRINT [FINGERPRINT ...]]\n                                 [--region REGION] [--branch BRANCH]\n                                 [--create] [--destroy] [--list_regions]\n                                 [--name NAME]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --api_token API_TOKEN\n                        DigitalOcean API v2 secret token\n  --client_ip CLIENT_IP\n                        client IP to secure Droplet\n  --fingerprint FINGERPRINT [FINGERPRINT ...]\n                        SSH key fingerprint\n  --region REGION       region to deploy into; use --list_regions for a list\n  --branch BRANCH       netflix-proxy branch to deploy (default: master)\n  --create              Create droplet\n  --destroy             Destroy droplet\n  --list_regions        list all available regions\n  --name NAME           Droplet name\n```\n\nNote, you will need a working `Python 2.7` environment and the modules listed in `tests/requirements.txt` (run `pip install -r tests/requirements.txt`).\n\n#### test video playback\nVideo playback tests are **currently disabled** due to provider blocking.\n\n##### Netflix\nAfter a successful build deployment, `testvideo.py` is executed to test Netflix video playback. This is done by playing back 60 seconds of a title known to only be available in the US region (e.g. [1,000 Times Good Night](https://www.netflix.com/title/80001898)).\n\n```\nusage: testvideo.py netflix [-h] --email EMAIL --password PASSWORD\n                            [--seconds SECONDS] [--titleid TITLEID]\n                            [--tries TRIES]\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --email EMAIL        Netflix username\n  --password PASSWORD  Netflix password\n  --seconds SECONDS    playback time per title in seconds (default: 60)\n  --titleid TITLEID    Netflix title_id to play (default: 80001898)\n  --tries TRIES        Playback restart attempts (default: 4)\n```\n\nA screenshot is saved at the end of the test and uploaded to the `gh-pages` branch.\n\n![Netflix VideoPlaybackTest screenshot](https://raw.githubusercontent.com/ab77/netflix-proxy/gh-pages/artifacts/VideoPlaybackTestNflx.png)\n\n##### Hulu\nSimilarly, `testvideo.py` is executed to test Hulu video playback using one of the free titles (e.g. [South Park S01E01: Cartman Gets an Anal Probe](http://www.hulu.com/watch/249837)). The build is configured not to fail in the event of Hulu test failing. This is because Hulu is almost cetrtainly blocked from Digital Ocean.\n\n![Hulu VideoPlaybackTest screenshot](https://raw.githubusercontent.com/ab77/netflix-proxy/gh-pages/artifacts/waitForPlayer.png)\n\n### IPv6\nThis solution uses IPv6 downstream from the proxy to unblock IPv6 enabled providers, such as Netflix. No IPv6 support on the client is required for this to work, only the VPS must have public IPv6 connectivity. You may also need to turn off IPv6 on your local network (and/or relevant devices).[[n6]](#footnotes)\n\n```\n+----------+                  +-----------+                 +-----------------+\n|          |                  |           |                 |                 |\n|  client  | +--------------> |   proxy   | +-------------> |  Netflix, etc.  |\n|          |      (ipv4)      |           |      (ipv6)     |                 |\n+----------+                  +-----------+                 +-----------------+\n```\n\n### contributing\nIf you have any idea, feel free to fork it and submit your changes back to me.\n\n### donate\nIf you find this useful, please feel free to make a small donation with [PayPal](https://www.paypal.me/belodetech) or Bitcoin.\n\n| Paypal | Bitcoin |\n| ------ | ------- |\n|[![](https://www.paypalobjects.com/en_GB/i/btn/btn_donateCC_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5UUCDR8YXWERQ)|![1GUrKgkaCkdsrCzb4pq3bJwkmjTVv9X7eG](https://raw.githubusercontent.com/ab77/netflix-proxy/master/static/bitcoin_qr.png)1GUrKgkaCkdsrCzb4pq3bJwkmjTVv9X7eG|\n\n#### footnotes\n1. [SNIProxy](https://github.com/dlundquist/sniproxy) by Dustin Lundquist `dustin@null-ptr.net`; this solution will only on devices supporting Server Name Indication (SNI)[[n7]](#footnotes) and only if they use DNS to resolve names.\n2. `Hulu` is heavily geo-restricted from most non-residential IP ranges and doesn't support IPv6.\n3. You can now specify your home/office/etc. IP manually using `-c <ip>` option to `build.sh`.\n4. See, serverfault [post](http://serverfault.com/questions/396958/configure-dns-server-to-return-same-ip-for-all-domains).\n5. See, [this](https://daniel.haxx.se/blog/2016/08/18/http2-connection-coalescing/) and [this](https://github.com/dlundquist/sniproxy/issues/178). The following [four](https://github.com/ab77/netflix-proxy/blob/master/proxy-domains.txt#L66-L69) hosts all need to resolve to different public IPs.\n6. If you have a working IPv6 stack, then your device may be preferring it over IPv4, see this [issue](https://forums.he.net/index.php?topic=3056).\n7. See, [article](https://en.wikipedia.org/wiki/Server_Name_Indication).\n8. See, [post](https://www.reddit.com/r/VPN/comments/48v03v/netflix_begins_geo_checks_on_cdn/).\n9. See, [Using NDP proxying](https://docs.docker.com/engine/userguide/networking/default_network/ipv6/). Both the caching resolver and Docker dual-stack support are disabled by default due to differences in IPv6 configurations provided by various hosting providers (i.e. RamNode).\n10. See, [post](http://www.webhostingtalk.com/showthread.php?t=1262537&p=9157381#post9157381).\n11. See, [https://www.facebook.com/GetflixAU/posts/650132888457824](https://www.facebook.com/GetflixAU/posts/650132888457824), [Netflix Geoblocking - Part 2](http://forums.whirlpool.net.au/forum-replies.cfm?t=2508180#r5) and read [How Netflix is blocking VPNs](http://www.techcentral.co.za/how-netflix-is-blocking-vpns/63882/) and [Wiki](https://github.com/ab77/netflix-proxy/wiki/On-how-Netflix-enforces-geographical-boundaries-in-the-Information-Age..).\n12. [Bypass Netflix Geoblocks with IPv6](https://www.ubermotive.com/?p=344).\n13. See, [IPv6 on Amazon AWS EC2](http://blog.iphoting.com/blog/2012/06/02/ipv6-on-amazon-aws-ec2/).\n14. If Netflix still thinks you are in a wrong country, try a different tunnel server (e.g. in a US location).\n15. See, [article](https://openvz.org/Docker_inside_CT).\n16. Netflix have most definitely blocked this service provider network ranges, so following the process is unlikely to yield an unblocking solution. If you own a compatible device, you could try `black.box` [unzoner](http://unzoner.com).\n17. GFW is probably re-writing DNS responses for certain very sensitive domains (i.e. facebook.com), so unfortunately a simple proxy solution like this won't work. VPN technology is required to bypass, try `black.box` [unzoner](http://unzoner.com).\n18. [dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html) by `simon@thekelleys.org.uk`.\n19. Python3 (latest) release won't work on Ubuntu16/Debian9, upgrade to a more recent distribution (Python2 EOL Jan/2020).\n\n<hr>\n<p align=\"center\">&copy; 2016-2019 <a href=\"http://ab77.github.io/\">ab1</a></p>\n<p align=\"center\"><a href=\"http://anton.belodedenko.me/\"><img src=\"https://avatars2.githubusercontent.com/u/2033996?v=3&s=50\"></a></p>\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.060546875,
          "content": "theme: jekyll-theme-modernist\ngoogle_analytics: UA-43603082-4\n"
        },
        {
          "name": "auth",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 17.3154296875,
          "content": "#!/usr/bin/env bash\n\n# bomb on any error\nset -e\n\n# globals\nCWD=$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\n[ -e \"${CWD}/scripts/globals\" ] && . ${CWD}/scripts/globals\n\n# import functions\n[ -e \"/lib/lsb/init-functions\" ] && . /lib/lsb/init-functions\n[ -e \"${CWD}/scripts/functions\" ] && . ${CWD}/scripts/functions\n\n# display usage\nusage() {\n    echo \"Usage: $0 [-b 0|1] [-c <ip>]\" 1>&2;\\\n    printf \"\\t-b\\tgrab docker images from repository (0) or build locally (1) (default: 0)\\n\";\\\n    printf \"\\t-c\\tspecify client-ip instead of being taken from ssh_connection\\n\";\\\n    exit 1;\n}\n\n# fix terminfo\n# http://ashberlin.co.uk/blog/2010/08/24/color-in-ubuntu-init-scripts/\nif [[ $(infocmp | grep 'hpa=') == \"\" ]]; then\n  (infocmp; printf '\\thpa=\\\\E[%sG,\\n' %i%p1%d) > tmp-${$}.tic\\\n    && tic -s tmp-$$.tic -o /etc/terminfo\\\n    && rm tmp-$$.tic\\\n    && exec $0 $*\nfi\n\n# process options\nprintf \"$0: $*\\n\"\nwhile getopts \"b:c:\" o; do\n    case \"${o}\" in\n        b)\n            b=${OPTARG}\n            ((b == 0|| b == 1)) || usage\n            ;;\n        c)\n            c=${OPTARG}\n            ;;\n        *)\n            usage\n            ;;\n    esac\ndone\nshift $((OPTIND-1))\n\nif [ ${b} ]; then DOCKER_BUILD=${b}; fi\nif [ ${c} ]; then CLIENTIP=${c}; fi\n\nlog_action_begin_msg \"checking OS compatibility\"\nif [[ $(cat /etc/os-release | grep '^ID=') =~ ubuntu ]]\\\n  || [[ $(cat /etc/os-release | grep '^ID=') =~ debian ]]; then\n    true\n    log_action_end_msg $?\nelse\n    false\n    log_action_end_msg $?\n    exit 1\nfi\n\nlog_action_begin_msg \"checking if cURL is installed\"\nwhich curl > /dev/null\nlog_action_end_msg $?\n\nlog_action_begin_msg \"checking if Docker is installed\"\nwhich docker > /dev/null\nlog_action_end_msg $?\n\nlog_action_begin_msg \"checking if sudo is installed\"\nwhich sudo > /dev/null\nlog_action_end_msg $?\n\nlog_action_begin_msg \"checking if dig is installed\"\nwhich dig > /dev/null\nlog_action_end_msg $?\n\nlog_action_begin_msg \"checking if netstat is installed\"\nwhich netstat > /dev/null\nlog_action_end_msg $?\n\nlog_action_begin_msg \"testing available ports\"\nfor port in 80 443 53; do\n    ! netstat -a -n -p | grep LISTEN | grep -P '\\d+\\.\\d+\\.\\d+\\.\\d+::${port}' > /dev/null\\\n      || (printf \"required port ${port} already in use\\n\" && exit 1)\ndone\nlog_action_end_msg $?\n\nlog_action_begin_msg \"disabling ufw\"\nif which ufw > /dev/null; then ufw disable &>> ${CWD}/netflix-proxy.log; fi\nlog_action_end_msg $?\n\nif [[ $(cat /proc/swaps | wc -l) -le 1 ]]; then\n    log_action_begin_msg \"setting up swapfile\"\n    fallocate -l 2G /swapfile && \\\n      chmod 600 /swapfile && \\\n      mkswap /swapfile && \\\n      swapon /swapfile && \\\n      printf \"/swapfile   none    swap    sw    0   0\\n\" >> /etc/fstab\n    log_action_end_msg $?\nfi\n\nlog_action_begin_msg \"installing net-tools\"\nsudo apt-get -y update &>> ${CWD}/netflix-proxy.log\\\n  && sudo apt-get -y install net-tools &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\n# obtain the interface with the default gateway\nIFACE=$(get_iface 4)\n\n# obtain IP address of the Internet facing interface\nIPADDR=$(get_ipaddr)\nEXTIP=$(get_ext_ipaddr 4)\n\nIPV6=0\nif cat /proc/net/if_inet6 | grep -v lo | grep -v fe80 > /dev/null\\\n  && $(which curl) mgmt.unzoner.com --fail --silent -6 > /dev/null; then\n    IPV6=1\n    IPADDR6=$(get_ipaddr6)\n    EXTIP6=$(get_ext_ipaddr 6)\nfi\n\n# obtain client (home) ip address and address family\nif ! [ ${CLIENTIP} ]; then\n    CLIENTIP=$(get_client_ipaddr)\nfi\n\nIS_CLIENT_IPV4=0\nif ! is_ipv4 ${CLIENTIP}; then IS_CLIENT_IPV4=1; fi\n\nIS_CLIENT_IPV6=1\nif [[ \"${IPV6}\" == '1' ]]; then\n    if is_ipv6 ${CLIENTIP}; then\n        IS_CLIENT_IPV6=0\n    fi\nfi\n\n# diagnostics info\ndebug=\"$0: build=${DOCKER_BUILD} client=${CLIENTIP} is_client_ipv4=${IS_CLIENT_IPV4} ipaddr=${IPADDR} extip=${EXTIP}\"\n\nif [[ \"${IPV6}\" == '1' ]]; then\n    debug_v6=\"$0: is_client_ipv6=${IS_CLIENT_IPV6} ipaddr6=${IPADDR6} extip6=${EXTIP6}\"\nfi\n\nsudo touch ${CWD}/netflix-proxy.log\n\nlog_action_begin_msg \"log diagnostics info\"\nprintf \"build=${DOCKER_BUILD} client=${CLIENTIP} local=${IPADDR} public=${EXTIP}\\n\"\nprintf \"${debug}\\n\" &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nif [[ ${debug_v6} ]]; then\n    log_action_begin_msg \"log diagnostics info (IPv6)\"\n    printf \"local6=${IPADDR6} public6=${EXTIP6}\\n\"\n    printf \"${debug_v6}\\n\" &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\n# switch to working directory\npushd ${CWD} &>> ${CWD}/netflix-proxy.log\n\n# configure iptables\nif [[ -n \"${CLIENTIP}\" ]]; then\n    log_action_begin_msg \"authorising clientip=${CLIENTIP} on iface=${IFACE}\"\n    if [[ \"${IS_CLIENT_IPV4}\" == '0' ]]; then\n        sudo iptables -t nat -A PREROUTING -s ${CLIENTIP}/32 -i ${IFACE} -j ACCEPT\n    fi\n    if [[ \"${IS_CLIENT_IPV6}\" == '0' ]]; then\n        sudo ip6tables -t nat -A PREROUTING -s ${CLIENTIP}/128 -i ${IFACE} -j ACCEPT\n    fi\n    log_action_end_msg $?\nelse\n    log_action_cont_msg \"unable to resolve and authorise client ip\"\nfi\n\nlog_action_begin_msg \"adding IPv4 iptables rules\"\nsudo iptables -t nat -A PREROUTING -i ${IFACE} -p tcp --dport 80 -j REDIRECT --to-port 8080\\\n  && sudo iptables -t nat -A PREROUTING -i ${IFACE} -p tcp --dport 443 -j REDIRECT --to-port 8080\\\n  && sudo iptables -t nat -A PREROUTING -i ${IFACE} -p udp --dport 53 -j REDIRECT --to-port 5353\\\n  && sudo iptables -t nat -A POSTROUTING -o ${IFACE} -j MASQUERADE\\\n  && sudo iptables -A INPUT -p icmp -j ACCEPT\\\n  && sudo iptables -A INPUT -i lo -j ACCEPT\\\n  && sudo iptables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\\\n  && sudo iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\\\n  && sudo iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT\\\n  && sudo iptables -A INPUT -p udp -m udp --dport 5353 -j ACCEPT\\\n  && sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\\\n  && sudo iptables -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT\\\n  && sudo iptables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT\\\n  && sudo iptables -A INPUT -j REJECT --reject-with icmp-host-prohibited\nlog_action_end_msg $?\n\nlog_action_begin_msg \"adding IPv6 iptables rules\"\nsudo ip6tables -t nat -A PREROUTING -i ${IFACE} -p tcp --dport 80 -j REDIRECT --to-port 8080\\\n  && sudo ip6tables -t nat -A PREROUTING -i ${IFACE} -p tcp --dport 443 -j REDIRECT --to-port 8080\\\n  && sudo ip6tables -t nat -A PREROUTING -i ${IFACE} -p udp --dport 53 -j REDIRECT --to-port 5353\\\n  && sudo iptables -t nat -A POSTROUTING -o ${IFACE} -j MASQUERADE\\\n  && sudo ip6tables -A INPUT -p ipv6-icmp -j ACCEPT\\\n  && sudo ip6tables -A INPUT -i lo -j ACCEPT\\\n  && sudo ip6tables -A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\\\n  && sudo ip6tables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\\\n  && sudo ip6tables -A INPUT -p udp -m udp --dport 53 -j ACCEPT\\\n  && sudo ip6tables -A INPUT -p udp -m udp --dport 5353 -j ACCEPT\\\n  && sudo ip6tables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT\\\n  && sudo ip6tables -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT\\\n  && sudo ip6tables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT\\\n  && sudo ip6tables -A INPUT -j REJECT --reject-with icmp6-adm-prohibited\nlog_action_end_msg $?\n\n# check if public IPv6 access is available\nlog_action_begin_msg \"creating Docker and sniproxy configuration templates\"\nsudo cp ${CWD}/docker-sniproxy/sniproxy.conf.template ${CWD}/docker-sniproxy/sniproxy.conf &>> ${CWD}/netflix-proxy.log\\\n  && sudo cp ${CWD}/docker-compose.yml.template ${CWD}/docker-compose.yml &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nlog_action_begin_msg \"disabling Docker iptables control\"\ncp ${CWD}/daemon.json /etc/docker/\nlog_action_end_msg $?\n\nif [[ \"${IPV6}\" == '1' ]]; then\n    log_action_begin_msg \"enabling sniproxy IPv6 priority\"\n    printf \"\\nresolver {\\n  nameserver ${RESOLVER_PRI}\\n  nameserver ${RESOLVER_SEC}\\n  mode ipv6_first\\n}\\n\"\\\n      | sudo tee -a ${CWD}/docker-sniproxy/sniproxy.conf &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nelse\n    log_action_begin_msg \"configuring sniproxy and Docker\"\n    printf \"\\nresolver {\\n  nameserver ${RESOLVER_PRI}\\n  nameserver ${RESOLVER_SEC}\\n  mode ipv4_only\\n}\\n\"\\\n      | sudo tee -a ${CWD}/docker-sniproxy/sniproxy.conf &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\nlog_action_begin_msg \"installing iptables|netfilter-persistent service\"\necho iptables-persistent iptables-persistent/autosave_v4 boolean true\\\n  | sudo debconf-set-selections &>> ${CWD}/netflix-proxy.log\\\n  && echo iptables-persistent iptables-persistent/autosave_v6 boolean true\\\n  | sudo debconf-set-selections &>> ${CWD}/netflix-proxy.log\\\n  && sudo apt-get -y install iptables-persistent &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\n# Ubuntu and Debian have different service names for iptables-persistent service\nif [ -f \"/etc/init.d/iptables-persistent\" ]; then\n    SERVICE=iptables\nelif [ -f \"/etc/init.d/netfilter-persistent\" ]; then\n    SERVICE=netfilter\nfi\n\n# socialise Docker with iptables-persistent\n# https://groups.google.com/forum/#!topic/docker-dev/4SfOwCOmw-E\nif [ ! -f \"/etc/init/docker.conf.bak\" ] && [ -f \"/etc/init/docker.conf\" ]; then\n    log_action_begin_msg \"socialising Docker with iptables-persistent service\"\n    sudo $(which sed) -i.bak \"s/ and net-device-up IFACE!=lo)/ and net-device-up IFACE!=lo and started ${SERVICE}-persistent)/\" /etc/init/docker.conf || true &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\nif [[ ${SERVICE} == \"iptables\" ]]; then\n    if [ ! -f \"/etc/init.d/iptables-persistent.bak\" ] && [ -f \"/etc/init.d/iptables-persistent\" ]; then\n        log_action_begin_msg \"updating iptables-persistent init script\"\n        sudo $(which sed) -i.bak '/load_rules$/{N;s/load_rules\\n\\t;;/load_rules\\n\\tinitctl emit -n started JOB=iptables-persistent\\n\\t;;/}' /etc/init.d/iptables-persistent || true &>> ${CWD}/netflix-proxy.log\\\n          && sudo $(which sed) -i'' 's/stop)/stop)\\n\\tinitctl emit stopping JOB=iptables-persistent/' /etc/init.d/iptables-persistent &>> ${CWD}/netflix-proxy.log\n        log_action_end_msg $?\n    fi\nfi\n\nlog_action_begin_msg \"saving iptables rules\"\nsudo service ${SERVICE}-persistent save &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nlog_action_begin_msg \"creating dnsmasq.conf from template\"\nsudo cp ${CWD}/dnsmasq.conf.template ${CWD}/dnsmasq.conf &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nif [[ \"${IPV6}\" == '1' ]] && [[ ${EXTIP6} ]]; then\n    log_action_begin_msg \"updating dnsmasq.conf extip=${EXTIP} extip6=${EXTIP6}\"\nelse\n    log_action_begin_msg \"updating dnsmasq.conf extip=${EXTIP}\"\nfi\n\nif [[ -n \"${EXTIP}\" ]]; then\n    for domain in $(cat ${CWD}/proxy-domains.txt); do\n        printf \"address=/${domain}/${EXTIP}\\n\"\\\n          | sudo tee -a ${CWD}/dnsmasq.conf &>> ${CWD}/netflix-proxy.log\n    done\nfi\n\nfor domain in $(cat ${CWD}/bypass-domains.txt); do\n    printf \"server=/${domain}/${RESOLVER_PRI}\\n\"\\\n      | sudo tee -a ${CWD}/dnsmasq.conf &>> ${CWD}/netflix-proxy.log\n    printf \"server=/${domain}/${RESOLVER_SEC}\\n\"\\\n      | sudo tee -a ${CWD}/dnsmasq.conf &>> ${CWD}/netflix-proxy.log\ndone\n\nif [[ \"${IPV6}\" == '1' ]] && [[ -n \"${EXTIP6}\" ]]; then\n    for domain in $(cat ${CWD}/proxy-domains.txt); do\n        printf \"address=/${domain}/${EXTIP6}\\n\"\\\n          | sudo tee -a ${CWD}/dnsmasq.conf &>> ${CWD}/netflix-proxy.log\n    done\nfi\nlog_action_end_msg $?\n\nlog_action_begin_msg \"installing Python3 and requirements\"\nsudo apt-get -y update &>> ${CWD}/netflix-proxy.log\\\n  && sudo apt-get -y install git python3.6 python3-venv python3-pip sqlite3 &>> ${CWD}/netflix-proxy.log\\\n  && python3 -m venv venv &>> ${CWD}/netflix-proxy.log\\\n  && source venv/bin/activate &>> ${CWD}/netflix-proxy.log\\\n  && pip3 install pip --upgrade &>> ${CWD}/netflix-proxy.log\\\n  && pip3 install -r requirements.txt &>> ${CWD}/netflix-proxy.log\\\n  && pip3 install -r ${CWD}/auth/requirements.txt &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nlog_action_begin_msg \"configuring admin backend\"\nPLAINTEXT=$(${CWD}/auth/pbkdf2_sha256_hash.py | awk '{print $1}')\\\n  && HASH=$(${CWD}/auth/pbkdf2_sha256_hash.py ${PLAINTEXT} | awk '{print $2}')\\\n  && sudo cp ${CWD}/auth/db/auth.default.db ${CWD}/auth/db/auth.db &>> ${CWD}/netflix-proxy.log\\\n  && sudo $(which sqlite3) ${CWD}/auth/db/auth.db \"UPDATE users SET password = '${HASH}' WHERE ID = 1;\" &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nlog_action_begin_msg \"configuring admin frontend\"\nsudo cp ${CWD}/Caddyfile.template ${CWD}/Caddyfile &>> ${CWD}/netflix-proxy.log\\\n  && printf \"proxy / localhost:${SDNS_ADMIN_PORT} {\\n    except /static\\n    header_upstream Host {host}\\n    header_upstream X-Forwarded-For {remote}\\n    header_upstream X-Real-IP {remote}\\n    header_upstream X-Forwarded-Proto {scheme}\\n}\\n\"\\\n  | sudo tee -a ${CWD}/Caddyfile &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nlog_action_begin_msg \"creating cron scripts\"\nsudo cp ${CWD}/crond.template /etc/cron.d/netflix-proxy &>> ${CWD}/netflix-proxy.log\\\n  && sudo $(which sed) -i'' \"s#{{CWD}}#${CWD}#g\" /etc/cron.d/netflix-proxy &>> ${CWD}/netflix-proxy.log\\\n  && sudo service cron restart &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nif [[ \"${DOCKER_BUILD}\" == '1' ]]; then\n    log_action_begin_msg \"pulling and building docker containers from source\"\n    sudo $(which docker-compose) build &>> ${CWD}/netflix-proxy.log\n    for service in dnsmasq-service dnsmasq-bogus-service caddy-service; do\n        sudo $(which docker-compose) pull ${service} &>> ${CWD}/netflix-proxy.log\n    done\n    log_action_end_msg $?\nelse\n    log_action_begin_msg \"pulling Docker containers\"\n    sudo $(which docker-compose) pull &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\nlog_action_begin_msg \"creating and starting Docker containers\"\n  EXTIP=${EXTIP} EXTIP6=${EXTIP6}\\\n  $(which docker-compose) up -d &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\n# configure appropriate init system\nlog_action_begin_msg \"configuring init system\"\nif [[ `/sbin/init --version` =~ upstart ]]; then\n    sudo cp ${CWD}/init/*.conf /etc/init/ &>> ${CWD}/netflix-proxy.log\\\n      && sudo $(which sed) -i'' \"s#{{CWD}}#${CWD}#g\" /etc/init/netflix-proxy-admin.conf &>> ${CWD}/netflix-proxy.log\\\n      && sudo service netflix-proxy-admin restart &>> ${CWD}/netflix-proxy.log\nfi\n\nif [[ `systemctl` =~ -\\.mount ]]; then\n      sudo cp ${CWD}/init/*.service /lib/systemd/system/ &>> ${CWD}/netflix-proxy.log\\\n        && sudo $(which sed) -i'' \"s#{{CWD}}#${CWD}#g\" /lib/systemd/system/netflix-proxy-admin.service &>> ${CWD}/netflix-proxy.log\\\n        && sudo systemctl daemon-reload &>> ${CWD}/netflix-proxy.log\\\n        && sudo systemctl enable netflix-proxy-admin &>> ${CWD}/netflix-proxy.log\\\n        && sudo systemctl enable systemd-networkd &>> ${CWD}/netflix-proxy.log\\\n        && sudo systemctl enable systemd-networkd-wait-online &>> ${CWD}/netflix-proxy.log\\\n        && sudo systemctl restart netflix-proxy-admin &>> ${CWD}/netflix-proxy.log\nfi\nlog_action_end_msg $?\n\nlog_action_begin_msg \"reloading ipables rules\"\nsudo service ${SERVICE}-persistent reload &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nlog_action_begin_msg \"testing DNS\"\nwith_backoff $(which dig) -4\\\n  +time=${TIMEOUT} ${NETFLIX_HOST} @${EXTIP} &>> ${CWD}/netflix-proxy.log\\\n  || with_backoff $(which dig) -4\\\n  +time=${TIMEOUT} ${NETFLIX_HOST} @${IPADDR} &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nif [[ -n \"${EXTIP6}\" ]] && [[ -n \"${IPADDR6}\" ]]; then\n    log_action_begin_msg \"testing DNS ipv6\"\n    with_backoff $(which dig) -6\\\n      +time=${TIMEOUT} ${NETFLIX_HOST} @${EXTIP6} &>> ${CWD}/netflix-proxy.log\\\n      || with_backoff $(which dig) -6\\\n      +time=${TIMEOUT} ${NETFLIX_HOST} @${IPADDR6} &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\nlog_action_begin_msg \"testing proxy (cURL)\"\nwith_backoff $(which curl) -v -4 -L --fail -o /dev/null https://${NETFLIX_HOST}\\\n  --resolve ${NETFLIX_HOST}:443:${EXTIP} &>> ${CWD}/netflix-proxy.log\\\n  || with_backoff $(which curl) -v -4 -L --fail -o /dev/null https://${NETFLIX_HOST}\\\n  --resolve ${NETFLIX_HOST}:443:${IPADDR} &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nif [[ -n \"${EXTIP6}\" ]] || [[ -n \"${IPADDR6}\" ]]; then\n    log_action_begin_msg \"testing proxy (cURL) ipv6\"\n    with_backoff $(which curl) -v -6 -L --fail -o /dev/null https://${NETFLIX_HOST}\\\n      --resolve ${NETFLIX_HOST}:443:::1 &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\nprintf \"\\nnetflix-proxy-admin site=http://${EXTIP}:8080/ credentials=\\e[1madmin:${PLAINTEXT}\\033[0m\\n\"\nlog_action_begin_msg \"testing netflix-proxy admin site\"\n(with_backoff $(which curl) --silent -4\\\n  --fail http://${EXTIP}:8080/ &>> ${CWD}/netflix-proxy.log\\\n  || with_backoff $(which curl) --silent -4\\\n  --fail http://${IPADDR}:8080/) &>> ${CWD}/netflix-proxy.log\\\n  && with_backoff $(which curl) --silent -4\\\n  --fail http://localhost:${SDNS_ADMIN_PORT}/ &>> ${CWD}/netflix-proxy.log\nlog_action_end_msg $?\n\nif [[ -n \"${EXTIP6}\" ]] && [[ -n \"${IPADDR6}\" ]]; then\n    printf \"\\nnetflix-proxy-admin site=http://${EXTIP6}:8080/ credentials=\\e[1madmin:${PLAINTEXT}\\033[0m\\n\"\n    log_action_begin_msg \"testing netflix-proxy admin site ipv6\"\n    with_backoff $(which curl) --silent -6\\\n      --fail http://ip6-localhost:8080/ &>> ${CWD}/netflix-proxy.log\n    log_action_end_msg $?\nfi\n\n# change back to original directory\npopd &>> ${CWD}/netflix-proxy.log\n\nif [[ \"${IPV6}\" == '1' ]]; then\n    printf \"IPv6=\\e[32mEnabled\\033[0m\\n\"\nelse\n    printf \"\\e[1mWARNING:\\033[0m IPv6=\\e[31mDisabled\\033[0m\\n\"\nfi\n\n# DO NOT change the text between these lines\nprintf \"Change your DNS to ${EXTIP} and start watching Netflix out of region.\\n\"\n# DO NOT change the text between these lines\n\nprintf \"\\e[33mNote\\033[0m: get \\e[1mhttp://unzoner.com\\033[0m if your app/service no longer works with DNS based solutions.\\n\"\nprintf \"\\e[32mDone.\\033[0m\\n\"\n"
        },
        {
          "name": "bypass-domains.txt",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "crond.template",
          "type": "blob",
          "size": 0.255859375,
          "content": "#\n# cron.d/netflix-proxy -- schedules periodic updates for DDNs IPs for the netflix proxy\n#\n# Copyright © Patrice Brend'amour <patrice@brendamour.net>\n# distributed under the terms of the Artistic Licence 2.0\n#\n\n*/5 * * * * root {{CWD}}/scripts/ddns_updater.sh\n"
        },
        {
          "name": "daemon.json",
          "type": "blob",
          "size": 0.0537109375,
          "content": "{\n    \"iptables\": false,\n    \"userland-proxy\": false\n}\n"
        },
        {
          "name": "dnsmasq.conf.template",
          "type": "blob",
          "size": 0.064453125,
          "content": "bind-dynamic\nbogus-priv\ndomain-needed\nlog-facility=-\nlocal-ttl=60\n"
        },
        {
          "name": "docker-compose.yml.template",
          "type": "blob",
          "size": 1.0341796875,
          "content": "version: '2'\n\nservices:\n  dnsmasq-service:\n    image: andyshinn/dnsmasq:latest\n    container_name: dnsmasq\n    privileged: true\n    network_mode: host\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - ./dnsmasq.conf:/etc/dnsmasq.conf:ro\n    restart: always\n\n  dnsmasq-bogus-service:\n    image: andyshinn/dnsmasq:latest\n    container_name: dnsmasq-bogus\n    privileged: true\n    network_mode: host\n    cap_add:\n      - NET_ADMIN\n    command: --port=5353 --log-facility=- -A /#/${EXTIP} -A /#/${EXTIP6}\n    restart: always\n\n  caddy-service:\n    image: abiosoft/caddy:latest\n    container_name: caddy\n    privileged: true\n    network_mode: host\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - ./Caddyfile:/etc/Caddyfile\n      - ./wwwroot:/srv\n    restart: always\n  \n  sniproxy-service:\n    image: ab77/sniproxy:latest\n    container_name: sniproxy\n    build:\n      context: docker-sniproxy\n    privileged: true\n    network_mode: host\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - ./docker-sniproxy/sniproxy.conf:/etc/sniproxy.conf\n    restart: always\n"
        },
        {
          "name": "docker-sniproxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 18.9130859375,
          "content": null
        },
        {
          "name": "id_rsa.travis.enc",
          "type": "blob",
          "size": 3.171875,
          "content": null
        },
        {
          "name": "id_rsa.travis.pub",
          "type": "blob",
          "size": 0.7177734375,
          "content": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCS5Qgl0GgyqxTOip9J27+1MPYjUP+2sL47tVcySyTLhND73F5zPLR3vAkxcBUQLxTVyj7z8tbnb5nxI8/TtXfL6+3L669ecfQeterSbwe7C6XTpQP5Iey/6ux7kq5dE/P4NIZd/sbnKXpBwKWohbWDMWARgp307WjV1wLP5+aajumRXcaaPnIj2FVZh/FKWWhzDwoqh+NUmRl2LBOyMNOayJqRYfWxNfe7SjzaNQxIdaW0xsMbSv0b80FIHpfhgQyJYYWAQaYju9K7Uk+QIskjOM+DqNtdBdI4wfQ/nD5Ws+bE2V8QgA68uRLJPYEw+Mm5nnRti2AOv87N98pqO4kEiTFkSi/ifbHkQYtChzYPGWc+w6B24xJ35NtUiU5a4M2v45oD/j0LL+LekyRyqMr6vh3awbrxxOwryNQKnrDndsyok+ni55kqYdpFWYg/At+ts5s0G/Y/qbHwUEp2VDCaBxyQccMJrhxPG4Urer8lCn842hkEKAkq6RpvMvRUQPnn5jSkBX+9vywklTAH7zBwarD3tIJavaqork8bV6Rb9puA9P59PcgChyLD5G5DSjpkzgoNeqP+N9PivVNq1aUprwB0l0YQ/blJZl0sOpv/lZH/6GurplOzt4TQRNXKViFyC1Agmjllau0dGxyCnfJtre6cgukYrbWclP+AjfeyWw== Travis CI\n"
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy-domains.txt",
          "type": "blob",
          "size": 0.9638671875,
          "content": "akadns.net\nakam.net\nakamai.com\nakamai.net\nakamaiedge.net\nakamaihd.net\nakamaistream.net\nakamaitech.net\nakamaitechnologies.com\nakamaitechnologies.fr\nakamaized.net\nedgekey.net\nedgesuite.net\nsrip.net\nfootprint.net\nlevel3.net\nllnwd.net\nedgecastcdn.net\ncloudfront.net\nnetflix.com\nnetflix.net\nnflximg.net\nnflxvideo.net\nnflxso.net\nnflxext.com\nhulu.com\nhuluim.com\nhbonow.com\nhbogo.com\nhbo.com\namazon.com\namazon.co.uk\namazonvideo.com\ncrackle.com\npandora.com\nvudu.com\nblinkbox.com\nabc.com\nfox.com\ntheplatform.com\nnbc.com\nnbcuni.com\nip2location.com\npbs.org\nwarnerbros.com\nsouthpark.cc.com\ncbs.com\nbrightcove.com\ncwtv.com\nspike.com\ngo.com\nmtv.com\nmtvnservices.com\nplaystation.net\nuplynk.com\nmaxmind.com\ndisney.com\ndisneyjunior.com\nxboxlive.com\nlovefilm.com\nturner.com\namctv.com\nsho.com\nmog.com\nwdtvlive.com\nbeinsportsconnect.tv\nbeinsportsconnect.net\nfig.bbc.co.uk\nopen.live.bbc.co.uk\nsa.bbc.co.uk\nwww.bbc.co.uk\ncrunchyroll.com\nifconfig.co\nomtrdc.net\nsling.com\nmovetv.com\noptus.com.au\noptusnet.com.au\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0146484375,
          "content": "docker-compose\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 1.0673828125,
          "content": "#!/usr/bin/env bash\n\n# bomb on any error\nset -e\n\n# fix terminfo\n# http://ashberlin.co.uk/blog/2010/08/24/color-in-ubuntu-init-scripts/\nif [[ $(infocmp | grep 'hpa=') == \"\" ]]; then\n  (infocmp; printf '\\thpa=\\\\E[%sG,\\n' %i%p1%d) > tmp-${$}.tic && \\\n    tic -s tmp-$$.tic -o /etc/terminfo && \\\n    rm tmp-$$.tic && \\\n    exec ${0} $@\nfi\n\n# gobals\nCWD=$(cd -P -- \"$(dirname -- \"$0\")\" && pwd -P)\n[ -e \"${CWD}/scripts/globals\" ] && . ${CWD}/scripts/globals\n\n# import functions\n[ -e \"/lib/lsb/init-functions\" ] && . /lib/lsb/init-functions\n[ -e \"${CWD}/scripts/functions\" ] && . ${CWD}/scripts/functions\n\n\nCURRENT_VERSION=$(sudo $(which sqlite3) ${CWD}/auth/db/auth.db \"PRAGMA user_version\")\nprintf \"Current database schema version is ${CURRENT_VERSION}\\n\"\n\nUPDATE_SCRIPT=\"${CWD}/auth/db/updates/${CURRENT_VERSION}-to-${SCHEMA_VERSION}.sql\"\nif [ -e \"${UPDATE_SCRIPT}\" ]; then\n\tlog_action_begin_msg \"Updating database schema from  ${CURRENT_VERSION} to ${SCHEMA_VERSION}\"\n\tsudo $(which sqlite3) ${CWD}/auth/db/auth.db < $UPDATE_SCRIPT &>> ${CWD}/update.log\n\tlog_action_end_msg $?\nfi\nprintf \"Done!\\n\"\n"
        },
        {
          "name": "wwwroot",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}