{
  "metadata": {
    "timestamp": 1736559834604,
    "page": 577,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shenweichen/GraphEmbedding",
      "stars": 3756,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.275390625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2019 Weichen Shen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.73046875,
          "content": "# GraphEmbedding\n\n[![GitHub Issues](https://img.shields.io/github/issues/shenweichen/graphembedding.svg\n)](https://github.com/shenweichen/graphembedding/issues)\n![CI status](https://github.com/shenweichen/graphembedding/workflows/CI/badge.svg)\n[![codecov](https://codecov.io/gh/shenweichen/graphembedding/branch/master/graph/badge.svg)](https://codecov.io/gh/shenweichen/graphembedding)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/c46407f5931f40048e28860dccf7dabc)](https://www.codacy.com/gh/shenweichen/GraphEmbedding/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=shenweichen/GraphEmbedding&amp;utm_campaign=Badge_Grade)\n[![Disscussion](https://img.shields.io/badge/chat-wechat-brightgreen?style=flat)](./README.md#disscussiongroup--related-projects)\n\n[comment]: <> ([![License]&#40;https://img.shields.io/github/license/shenweichen/graphembedding.svg&#41;]&#40;https://github.com/shenweichen/graphembedding/blob/master/LICENSE&#41;)\n\n# Method\n\n\n|   Model   | Paper                                                                                                                      | Note                                                                                        |\n| :-------: | :------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------ |\n| DeepWalk  | [KDD 2014][DeepWalk: Online Learning of Social Representations](http://www.perozzi.net/publications/14_kdd_deepwalk.pdf)   | [【Graph Embedding】DeepWalk：算法原理，实现和应用](https://zhuanlan.zhihu.com/p/56380812)  |\n|   LINE    | [WWW 2015][LINE: Large-scale Information Network Embedding](https://arxiv.org/pdf/1503.03578.pdf)                          | [【Graph Embedding】LINE：算法原理，实现和应用](https://zhuanlan.zhihu.com/p/56478167)      |\n| Node2Vec  | [KDD 2016][node2vec: Scalable Feature Learning for Networks](https://www.kdd.org/kdd2016/papers/files/rfp0218-groverA.pdf) | [【Graph Embedding】Node2Vec：算法原理，实现和应用](https://zhuanlan.zhihu.com/p/56542707)  |\n|   SDNE    | [KDD 2016][Structural Deep Network Embedding](https://www.kdd.org/kdd2016/papers/files/rfp0191-wangAemb.pdf)               | [【Graph Embedding】SDNE：算法原理，实现和应用](https://zhuanlan.zhihu.com/p/56637181)      |\n| Struc2Vec | [KDD 2017][struc2vec: Learning Node Representations from Structural Identity](https://arxiv.org/pdf/1704.03165.pdf)        | [【Graph Embedding】Struc2Vec：算法原理，实现和应用](https://zhuanlan.zhihu.com/p/56733145) |\n\n\n# How to run examples\n1. clone the repo and make sure you have installed `tensorflow` or `tensorflow-gpu` on your local machine. \n2. run following commands\n```bash\npython setup.py install\ncd examples\npython deepwalk_wiki.py\n```\n\n## DisscussionGroup & Related Projects\n\n<html>\n    <table style=\"margin-left: 20px; margin-right: auto;\">\n        <tr>\n            <td>\n                公众号：<b>浅梦学习笔记</b><br><br>\n                <a href=\"https://github.com/shenweichen/GraphEmbedding\">\n  <img align=\"center\" src=\"./pics/code.png\" />\n</a>\n            </td>\n            <td>\n                微信：<b>deepctrbot</b><br><br>\n <a href=\"https://github.com/shenweichen/GraphEmbedding\">\n  <img align=\"center\" src=\"./pics/deepctrbot.png\" />\n</a>\n            </td>\n            <td>\n<ul>\n<li><a href=\"https://github.com/shenweichen/AlgoNotes\">AlgoNotes</a></li>\n<li><a href=\"https://github.com/shenweichen/DeepCTR\">DeepCTR</a></li>\n<li><a href=\"https://github.com/shenweichen/DeepMatch\">DeepMatch</a></li>\n<li><a href=\"https://github.com/shenweichen/DeepCTR-Torch\">DeepCTR-Torch</a></li>\n</ul>\n            </td>\n        </tr>\n    </table>\n</html>\n\n# Usage\nThe design and implementation follows simple principles(**graph in,embedding out**) as much as possible.\n## Input format\nwe use `networkx`to create graphs.The input of networkx graph is as follows:\n`node1 node2 <edge_weight>`\n\n![](./pics/edge_list.png)\n## DeepWalk\n\n```python\nG = nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])# Read graph\n\nmodel = DeepWalk(G,walk_length=10,num_walks=80,workers=1)#init model\nmodel.train(window_size=5,iter=3)# train model\nembeddings = model.get_embeddings()# get embedding vectors\n```\n\n## LINE\n\n```python\nG = nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])#read graph\n\nmodel = LINE(G,embedding_size=128,order='second') #init model,order can be ['first','second','all']\nmodel.train(batch_size=1024,epochs=50,verbose=2)# train model\nembeddings = model.get_embeddings()# get embedding vectors\n```\n## Node2Vec\n```python\nG=nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',\n                        create_using = nx.DiGraph(), nodetype = None, data = [('weight', int)])#read graph\n\nmodel = Node2Vec(G, walk_length = 10, num_walks = 80,p = 0.25, q = 4, workers = 1)#init model\nmodel.train(window_size = 5, iter = 3)# train model\nembeddings = model.get_embeddings()# get embedding vectors\n```\n## SDNE\n\n```python\nG = nx.read_edgelist('../data/wiki/Wiki_edgelist.txt',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])#read graph\n\nmodel = SDNE(G,hidden_size=[256,128]) #init model\nmodel.train(batch_size=3000,epochs=40,verbose=2)# train model\nembeddings = model.get_embeddings()# get embedding vectors\n```\n\n## Struc2Vec\n\n\n```python\nG = nx.read_edgelist('../data/flight/brazil-airports.edgelist',create_using=nx.DiGraph(),nodetype=None,data=[('weight',int)])#read graph\n\nmodel = Struc2Vec(G, 10, 80, workers=4, verbose=40, ) #init model\nmodel.train(window_size = 5, iter = 3)# train model\nembeddings = model.get_embeddings()# get embedding vectors\n```\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ge",
          "type": "tree",
          "content": null
        },
        {
          "name": "pics",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.798828125,
          "content": "import setuptools\n\n\nwith open(\"README.md\", \"r\") as fh:\n\n    long_description = fh.read()\n\n\nREQUIRED_PACKAGES = [\n    # 'tensorflow>=1.4.0',\n    'gensim>=4.0.0',\n    'networkx',\n    'joblib',\n    'fastdtw',\n    'tqdm',\n    'numpy',\n    'scikit-learn',\n    'pandas',\n    'matplotlib',\n    'deepctr'\n]\n\n\nsetuptools.setup(\n\n    name=\"ge\",\n\n    version=\"0.0.0\",\n\n    author=\"Weichen Shen\",\n\n    author_email=\"weichenswc@163.com\",\n\n    url=\"https://github.com/shenweichen/GraphEmbedding\",\n\n    packages=setuptools.find_packages(exclude=[]),\n\n    python_requires='>=3.5',  # 3.4.6\n\n    install_requires=REQUIRED_PACKAGES,\n\n    extras_require={\n\n        \"cpu\": ['tensorflow>=1.4.0,!=1.7.*,!=1.8.*'],\n\n        \"gpu\": ['tensorflow-gpu>=1.4.0,!=1.7.*,!=1.8.*'],\n\n    },\n\n    entry_points={\n\n    },\n    license=\"MIT license\",\n\n\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}