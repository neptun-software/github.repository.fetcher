{
  "metadata": {
    "timestamp": 1736559635573,
    "page": 287,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DistrictDataLabs/yellowbrick",
      "stars": 4305,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3740234375,
          "content": "# Set the default behavior, in case contributors don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files\n*.py text\n*.rst text\n*.md text\n*.json text\n*.ipynb text\n*.cfg text\n\n# Baseline images are binary and should not be modified\n*.png binary\n*.jpg binary\n*.pdf binary\n\n# Compressed files are binary and should not be modified\n*.gz binary\n*.npz binary\n*.zip binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6103515625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# IDE/editor droppings\n*.swp\n*.swo\n.vscode/settings.json\n\n# OS droppings\n.DS_Store\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# PyTest\n.pytest_cache\n\n# PyCharm\n.idea/workspace.xml\n.idea/tasks.xml\n.idea/dictionaries\n.idea/vcs.xml\n.idea/jsLibraryMappings.xml\n.idea/dataSources.ids\n.idea/dataSources.xml\n.idea/dataSources.local.xml\n.idea/sqlDataSources.xml\n.idea/dynamic.xml\n.idea/uiDesigner.xml\n.idea/gradle.xml\n.idea/libraries\n.idea/mongoSettings.xml\n*.iws\n/out/\n.idea_modules/\n.idea\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Data downloaded from Yellowbrick\ndata/\nyellowbrick/datasets/fixtures"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.705078125,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n    -   id: check-json\n    -   id: check-merge-conflict\n-   repo: https://github.com/psf/black\n    rev: 22.6.0\n    hooks:\n    -   id: black\n-   repo: https://github.com/PyCQA/flake8\n    rev: 5.0.4\n    hooks:\n    -   id: flake8\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.9.0\n    hooks:\n    -   id: rst-backticks\n    -   id: rst-directive-colons\n    -   id: rst-inline-touching-normal\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 18.92578125,
          "content": "# Contributing to Yellowbrick\n\n**NOTE: This document is a \"getting started\" summary for contributing to the Yellowbrick project.** To read the full contributor's guide, please visit the [contributing page](http://www.scikit-yb.org/en/latest/contributing/index.html) in the documentation. Please make sure to read this page carefully to ensure the review process is as smooth as possible and to ensure the greatest likelihood of having your contribution be merged.\n\nFor more on the development path, goals, and motivations behind Yellowbrick, check out our developer presentation: [Visualizing Model Selection with Scikit-Yellowbrick: An Introduction to Developing Visualizers](http://www.slideshare.net/BenjaminBengfort/visualizing-model-selection-with-scikityellowbrick-an-introduction-to-developing-visualizers).\n\n## How to Contribute\n\nYellowbrick is an open source project that is supported by a community who will gratefully and humbly accept any contributions you might make to the project. Large or small, any contribution makes a big difference; and if you've never contributed to an open source project before, we hope you will start with Yellowbrick!\n\nPrincipally, Yellowbrick development is about the addition and creation of *visualizers* &mdash; objects that learn from data and create a visual representation of the data or model. Visualizers integrate with scikit-learn estimators, transformers, and pipelines for specific purposes and as a result, can be simple to build and deploy. The most common contribution is therefore a new visualizer for a specific model or model family. We'll discuss in detail how to build visualizers later.\n\nBeyond creating visualizers, there are many ways to contribute:\n\n- Submit a bug report or feature request on [GitHub Issues](https://github.com/DistrictDataLabs/yellowbrick/issues).\n- Contribute a Jupyter notebook to our examples[ gallery](https://github.com/DistrictDataLabs/yellowbrick/tree/develop/examples).\n- Assist us with [user testing](http://www.scikit-yb.org/en/latest/evaluation.html).\n- Add to the documentation or help with our website, [scikit-yb.org](http://www.scikit-yb.org).\n- Write [unit or integration tests](https://www.scikit-yb.org/en/latest/contributing/developing_visualizers.html#integration-tests) for our project.\n- Answer questions on our issues, mailing list, Stack Overflow, and elsewhere.\n- Translate our documentation into another language.\n- Write a blog post, tweet, or share our project with others.\n- [Teach](https://www.scikit-yb.org/en/latest/teaching.html) someone how to use Yellowbrick.\n\nAs you can see, there are lots of ways to get involved and we would be very happy for you to join us! The only thing we ask is that you abide by the principles of openness, respect, and consideration of others as described in the [Python Software Foundation Code of Conduct](https://www.python.org/psf/codeofconduct/).\n\n## Getting Started on GitHub\n\nYellowbrick is hosted on GitHub at https://github.com/DistrictDataLabs/yellowbrick.\n\nThe typical workflow for a contributor to the codebase is as follows:\n\n1. **Discover** a bug or a feature by using Yellowbrick.\n2. **Discuss** with the core contributes by [adding an issue](https://github.com/DistrictDataLabs/yellowbrick/issues).\n3. **Fork** the repository into your own GitHub account.\n4. Create a **Pull Request** first thing to [connect with us](https://github.com/DistrictDataLabs/yellowbrick/pulls) about your task.\n5. **Code** the feature, write the documentation, add your contribution.\n6. **Review** the code with core contributors who will guide you to a high quality submission.\n7. **Merge** your contribution into the Yellowbrick codebase.\n\nWe believe that *contribution is collaboration* and therefore emphasize *communication* throughout the open source process. We rely heavily on GitHub's social coding tools to allow us to do this. For instance, we use GitHub's [milestone](https://help.github.com/en/articles/about-milestones) feature to focus our development efforts for each Yellowbrick semester, so be sure to check out the issues associated with our [current milestone](https://github.com/districtdatalabs/yellowbrick/milestones)!\n\nOnce you have a good sense of how you are going to implement the new feature (or fix the bug!), you can reach out for feedback from the maintainers by creating a [pull request](https://github.com/DistrictDataLabs/yellowbrick/pulls). Please note that if we feel your solution has not been thought out in earnest, or if the PR is not aligned with our [current milestone](https://github.com/districtdatalabs/yellowbrick/milestones) goals, we may reach out to ask that you close the PR so that we can prioritize reviewing the most critical feature requests and bug fixes.\n\nIdeally, any pull request should be capable of resolution within 6 weeks of being opened. This timeline helps to keep our pull request queue small and allows Yellowbrick to maintain a robust release schedule to give our users the best experience possible. However, the most important thing is to keep the dialogue going! And if you're unsure whether you can complete your idea within 6 weeks, you should still go ahead and open a PR and we will be happy to help you scope it down as needed.\n\nIf we have comments or questions when we evaluate your pull request and receive no response, we will also close the PR after this period of time. Please know that this does not mean we don't value your contribution, just that things go stale. If in the future you want to pick it back up, feel free to address our original feedback and to reference the original PR in a new pull request.\n\n### Forking the Repository\n\nThe first step is to fork the repository into your own account. This will create a copy of the codebase that you can edit and write to. Do so by clicking the **\"fork\"** button in the upper right corner of the Yellowbrick GitHub page.\n\nOnce forked, use the following steps to get your development environment set up on your computer:\n\n1. Clone the repository.\n\n    After clicking the fork button, you should be redirected to the GitHub page of the repository in your user account. You can then clone a copy of the code to your local machine.\n\n    ```\n    $ git clone https://github.com/[YOURUSERNAME]/yellowbrick\n    $ cd yellowbrick\n    ```\n\n    Optionally, you can also [add the upstream remote](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to synchronize with changes made by other contributors:\n\n    ```\n    $ git remote add upstream https://github.com/DistrictDataLabs/yellowbrick\n    ```\n\n    See \"Branching Conventions\" below for more on this topic.\n\n2. Create a virtual environment.\n\n    Yellowbrick developers typically use [virtualenv](https://virtualenv.pypa.io/en/stable/) (and [virtualenvwrapper](https://virtualenvwrapper.readthedocs.io/en/latest/), [pyenv](https://github.com/pyenv/pyenv-virtualenv) or [conda envs](https://conda.io/docs/using/envs.html) in order to manage their Python version and dependencies. Using the virtual environment tool of your choice, create one for Yellowbrick. Here's how with virtualenv:\n\n    ```\n    $ virtualenv venv\n    ```\n\n3. Install dependencies.\n\n    Yellowbrick's dependencies are in the `requirements.txt` document at the root of the repository. Open this file and uncomment the dependencies that are for development only. Then install the dependencies with `pip`:\n\n    ```\n    $ pip install -r requirements.txt\n    ```\n\n    Note that there may be other dependencies required for development and testing, you can simply install them with `pip`. For example to install\n    the additional dependencies for building the documentation or to run the\n    test suite, use the `requirements.txt` files in those directories:\n\n    ```\n    $ pip install -r tests/requirements.txt\n    $ pip install -r docs/requirements.txt\n    ```\n\n4. (Optional) Set up pre-commit hooks.\n\n    When opening a PR in the Yellowbrick repository, a series of checks will be run on your contribution, some of which lint and look at the formatting of your code. These may indicate some changes that need to be made before your contribution can be reviewed. You can set up pre-commit hooks to run these checks locally upon running `git commit` to ensure your contribution will pass formatting and linting checks. To set this up, you will need to uncomment the pre-commit line in `requirements.txt` and then run the following commands:\n\n    ```\n    $ pip install -r requirements.txt\n    $ pre-commit install\n    ```\n\n    The next time you run `git commit` in the Yellowbrick repository, the checks will automatically run.\n\n5. Switch to the develop branch.\n\n    The Yellowbrick repository has a `develop` branch that is the primary working branch for contributions. It is probably already the branch you're on, but you can make sure and switch to it as follows::\n\n    ```\n    $ git fetch\n    $ git checkout develop\n    ```\n\nAt this point you're ready to get started writing code!\n\n### Branching Conventions\n\nThe Yellowbrick repository is set up in a typical production/release/development cycle as described in \"[A Successful Git Branching Model](http://nvie.com/posts/a-successful-git-branching-model/).\" The primary working branch is the `develop` branch. This should be the branch that you are working on and from, since this has all the latest code. The `master` branch contains the latest stable version and release, _which is pushed to PyPI_. No one but maintainers will push to master.\n\n**NOTE:** All pull requests should be into the `yellowbrick/develop` branch from your forked repository.\n\nYou should work directly in your fork and create a pull request from your fork's develop branch into ours. We also recommend setting up an `upstream` remote so that you can easily pull the latest development changes from the main Yellowbrick repository (see [configuring a remote for a fork](https://help.github.com/articles/configuring-a-remote-for-a-fork/)). You can do that as follows:\n\n```\n$ git remote add upstream https://github.com/DistrictDataLabs/yellowbrick.git\n$ git remote -v\norigin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\norigin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\nupstream  https://github.com/DistrictDataLabs/yellowbrick.git (fetch)\nupstream  https://github.com/DistrictDataLabs/yellowbrick.git (push)\n```\n\nWhen you're ready, request a code review for your pull request. Then, when reviewed and approved, you can merge your fork into our main branch. Make sure to use the \"Squash and Merge\" option in order to create a Git history that is understandable.\n\n**NOTE to maintainers**: When merging a pull request, use the \"squash and merge\" option and make sure to edit the both the subject and the body of the commit message so that when we're putting the changelog together, we know what happened in the PR. I recommend reading [Chris Beams' _How to Write a Git Commit Message_](https://chris.beams.io/posts/git-commit/) so we're all on the same page!\n\nCore contributors and those who are planning on contributing multiple PRs might want to consider using feature branches to reduce the number of merges (and merge conflicts). Create a feature branch as follows:\n\n```\n$ git checkout -b feature-myfeature develop\n$ git push --set-upstream origin feature-myfeature\n```\n\nOnce you are done working (and everything is tested) you can submit a PR from your feature branch. Synchronize with `upstream` once the PR has been merged and delete the feature branch:\n\n```\n$ git checkout develop\n$ git pull upstream develop\n$ git push origin develop\n$ git branch -d feature-myfeature\n$ git push origin --delete feature-myfeature\n```\n\nHead back to Github and checkout another issue!\n\n## Developing Visualizers\n\nIn this section, we'll discuss the basics of developing visualizers. This of course is a big topic, but hopefully these simple tips and tricks will help make sense.\n\nOne thing that is necessary is a good understanding of scikit-learn and Matplotlib. Because our API is intended to integrate with scikit-learn, a good start is to review [\"APIs of scikit-learn objects\"](http://scikit-learn.org/stable/developers/contributing.html#apis-of-scikit-learn-objects) and [\"rolling your own estimator\"](http://scikit-learn.org/stable/developers/contributing.html#rolling-your-own-estimator). In terms of matplotlib, check out [Nicolas P. Rougier's Matplotlib tutorial](https://www.labri.fr/perso/nrougier/teaching/matplotlib/).\n\n### Visualizer API\n\nThere are two basic types of Visualizers:\n\n- **Feature Visualizers** are high dimensional data visualizations that are essentially transformers.\n- **Score Visualizers** wrap a scikit-learn regressor, classifier, or clusterer and visualize the behavior or performance of the model on test data.\n\nThese two basic types of visualizers map well to the two basic estimator objects in scikit-learn:\n\n- **Transformers** take input data and return a new data set.\n- **Models** are fit to training data and can make predictions.\n\nThe scikit-learn API is object oriented, and estimators are initialized with parameters by instantiating their class. Hyperparameters can also be set using the `set_attrs()` method and retrieved with the corresponding `get_attrs()` method. All scikit-learn estimators have a `fit(X, y=None)` method that accepts a two dimensional data array, `X`, and optionally a vector `y` of target values. The `fit()` method trains the estimator, making it ready to transform data or make predictions. Transformers have an associated `transform(X)` method that returns a new dataset, `Xprime` and models have a `predict(X)` method that returns a vector of predictions, `yhat`. Models may also have a `score(X, y)` method that evaluate the performance of the model.\n\nVisualizers interact with scikit-learn objects by intersecting with them at the methods defined above. Specifically, visualizers perform actions related to `fit()`, `transform()`, `predict()`, and `score()` then call a `draw()` method which initializes the underlying figure associated with the visualizer. The user calls the visualizer's `show()` method, which in turn calls a `finalize()` method on the visualizer to draw legends, titles, etc. and then `show()` renders the figure. The Visualizer API is therefore:\n\n- `draw()`: add visual elements to the underlying axes object\n- `finalize()`: prepare the figure for rendering, adding final touches such as legends, titles, axis labels, etc.\n- `show()`: render the figure for the user.\n\nCreating a visualizer means defining a class that extends `Visualizer` or one of its subclasses, then implementing several of the methods described above. A barebones implementation is as follows::\n\n```python\nimport matplotlib.pyplot as plot\n\nfrom yellowbrick.base import Visualizer\n\nclass MyVisualizer(Visualizer):\n\n    def __init__(self, ax=None, **kwargs):\n        super(MyVisualizer, self).__init__(ax, **kwargs)\n\n    def fit(self, X, y=None):\n        super(MyVisualizer, self).fit(X, y)\n        self.draw(X)\n        return self\n\n    def draw(self, X):\n        self.ax.plot(X)\n        return self.ax\n\n    def finalize(self):\n        self.set_title(\"My Visualizer\")\n```\n\nThis simple visualizer simply draws a line graph for some input dataset X, intersecting with the scikit-learn API at the `fit()` method. A user would use this visualizer in the typical style::\n\n```python\nvisualizer = MyVisualizer()\nvisualizer.fit(X)\nvisualizer.show()\n```\n\nScore visualizers work on the same principle but accept an additional required `model` argument. Score visualizers wrap the model (which can be either instantiated or uninstantiated) and then pass through all attributes and methods through to the underlying model, drawing where necessary.\n\n### Testing\n\nThe test package mirrors the `yellowbrick` package in structure and also contains several helper methods and base functionality. To add a test to your visualizer, find the corresponding file to add the test case, or create a new test file in the same place you added your code.\n\nVisual tests are notoriously difficult to create --- how do you test a visualization or figure? Moreover, testing scikit-learn models with real data can consume a lot of memory. Therefore the primary test you should create is simply to test your visualizer from end to end and make sure that no exceptions occur. To assist with this, we have a helper, `VisualTestCase`. Create your unit test as follows::\n\n```python\nimport pytest\n\nfrom yellowbrick.datasets import load_occupancy\n\nfrom tests.base import VisualTestCase\n\nclass MyVisualizerTests(VisualTestCase):\n\n    def test_my_visualizer(self):\n        \"\"\"\n        Test MyVisualizer on a real dataset\n        \"\"\"\n        # Load the data\n        X,y = load_occupancy()\n\n        try:\n            visualizer = MyVisualizer()\n            visualizer.fit(X)\n            visualizer.show()\n        except Exception as e:\n            pytest.fail(\"my visualizer didn't work\")\n```\n\nThe entire test suite can be run as follows::\n\n```\n$ pytest\n```\n\nYou can also run your own test file as follows::\n\n```\n$ pytest tests/test_your_visualizer.py\n```\n\nThe Makefile uses the pytest runner and testing suite as well as the coverage library, so make sure you have those dependencies installed!\n\n**Note**: Advanced developers can use our _image comparison tests_ to assert that an image generated matches a baseline image. Read more about this in our [testing documentation](https://www.scikit-yb.org/en/latest/contributing/developing_visualizers.html#image-comparison-tests).\n\n### Documentation\n\nThe initial documentation for your visualizer will be a well structured docstring. Yellowbrick uses Sphinx to build documentation, therefore docstrings should be written in reStructuredText in numpydoc format (similar to scikit-learn). The primary location of your docstring should be right under the class definition, here is an example::\n\n```python\nclass MyVisualizer(Visualizer):\n    \"\"\"\n    This initial section should describe the visualizer and what\n    it's about, including how to use it. Take as many paragraphs\n    as needed to get as much detail as possible.\n\n    In the next section describe the parameters to __init__.\n\n    Parameters\n    ----------\n\n    model : a scikit-learn regressor\n        Should be an instance of a regressor, and specifically one whose name\n        ends with \"CV\" otherwise a will raise a YellowbrickTypeError exception\n        on instantiation. To use non-CV regressors see:\n        ``ManualAlphaSelection``.\n\n    ax : matplotlib Axes, default: None\n        The axes to plot the figure on. If None is passed in the current axes\n        will be used (or generated if required).\n\n    kwargs : dict\n        Keyword arguments that are passed to the base class and may influence\n        the visualization as defined in other Visualizers.\n\n    Examples\n    --------\n\n    >>> model = MyVisualizer()\n    >>> model.fit(X)\n    >>> model.show()\n\n    Notes\n    -----\n\n    In the notes section specify any gotchas or other info.\n    \"\"\"\n```\n\nThis is a very good start to producing a high quality visualizer, but unless it is part of the documentation on our website, it will not be visible. For details on including documentation in the `docs` directory see the [Contributing Documentation](https://www.scikit-yb.org/en/latest/contributing/index.html) section in the larger contributing guide.\n"
        },
        {
          "name": "DESCRIPTION.md",
          "type": "blob",
          "size": 5.701171875,
          "content": "# Yellowbrick\n\n[![Visualizers](https://github.com/DistrictDataLabs/yellowbrick/raw/develop/docs/images/readme/banner.png)](https://www.scikit-yb.org/)\n\nYellowbrick is a suite of visual analysis and diagnostic tools designed to facilitate machine learning with scikit-learn. The library implements a new core API object, the `Visualizer` that is an scikit-learn estimator &mdash; an object that learns from data. Similar to transformers or models, visualizers learn from data by creating a visual representation of the model selection workflow.\n\nVisualizer allow users to steer the model selection process, building intuition around feature engineering, algorithm selection and hyperparameter tuning. For instance, they can help diagnose common problems surrounding model complexity and bias, heteroscedasticity, underfit and overtraining, or class balance issues. By applying visualizers to the model selection workflow, Yellowbrick allows you to steer predictive models toward more successful results, faster.\n\nThe full documentation can be found at [scikit-yb.org](https://scikit-yb.org/) and includes a [Quick Start Guide](https://www.scikit-yb.org/en/latest/quickstart.html) for new users.\n\n## Visualizers\n\nVisualizers are estimators &mdash; objects that learn from data &mdash; whose primary objective is to create visualizations that allow insight into the model selection process. In scikit-learn terms, they can be similar to transformers when visualizing the data space or wrap a model estimator similar to how the `ModelCV` (e.g. [`RidgeCV`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeCV.html), [`LassoCV`](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LassoCV.html)) methods work. The primary goal of Yellowbrick is to create a sensical API similar to scikit-learn. Some of our most popular visualizers include:\n\n### Classification Visualization\n\n- **Classification Report**: a visual classification report that displays a model's precision, recall, and F1 per-class scores as a heatmap\n- **Confusion Matrix**: a heatmap view of the confusion matrix of pairs of classes in multi-class classification\n- **Discrimination Threshold**: a visualization of the precision, recall, F1-score, and queue rate with respect to the discrimination threshold of a binary classifier\n- **Precision-Recall Curve**: plot the precision vs recall scores for different probability thresholds\n- **ROCAUC**: graph the receiver operator characteristic (ROC) and area under the curve (AUC)\n\n### Clustering Visualization\n\n- **Intercluster Distance Maps**: visualize the relative distance and size of clusters\n- **KElbow Visualizer**: visualize cluster according to the specified scoring function, looking for the \"elbow\" in the curve.\n- **Silhouette Visualizer**: select `k` by visualizing the silhouette coefficient scores of each cluster in a single model\n\n### Feature Visualization\n\n- **Manifold Visualization**: high-dimensional visualization with manifold learning\n- **Parallel Coordinates**: horizontal visualization of instances\n- **PCA Projection**: projection of instances based on principal components\n- **RadViz Visualizer**: separation of instances around a circular plot\n- **Rank Features**: single or pairwise ranking of features to detect relationships\n\n### Model Selection Visualization\n\n- **Cross Validation Scores**: display the cross-validated scores as a bar chart with the average score plotted as a horizontal line\n- **Feature Importances**: rank features based on their in-model performance\n- **Learning Curve**: show if a model might benefit from more data or less complexity\n- **Recursive Feature Elimination**: find the best subset of features based on importance\n- **Validation Curve**: tune a model with respect to a single hyperparameter\n\n### Regression Visualization\n\n- **Alpha Selection**: show how the choice of alpha influences regularization\n- **Cook's Distance**: show the influence of instances on linear regression\n- **Prediction Error Plots**: find model breakdowns along the domain of the target\n- **Residuals Plot**: show the difference in residuals of training and test data\n\n### Target Visualization\n\n- **Balanced Binning Reference**: generate a histogram with vertical lines showing the recommended value point to the bin data into evenly distributed bins\n- **Class Balance**: show the relationship of the support for each class in both the training and test data by displaying how frequently each class occurs as a bar graph the frequency of the classes' representation in the dataset\n- **Feature Correlation**: visualize the correlation between the dependent variables and the target\n\n### Text Visualization\n\n- **Dispersion Plot**: visualize how key terms are dispersed throughout a corpus\n- **PosTag Visualizer**: plot the counts of different parts-of-speech throughout a tagged corpus\n- **Token Frequency Distribution**: visualize the frequency distribution of terms in the corpus\n- **t-SNE Corpus Visualization**: uses stochastic neighbor embedding to project documents\n- **UMAP Corpus Visualization**: plot similar documents closer together to discover clusters\n\n... and more! Yellowbrick is adding new visualizers all the time so be sure to check out our [examples gallery]https://github.com/DistrictDataLabs/yellowbrick/tree/develop/examples) &mdash; or even the [develop](https://github.com/districtdatalabs/yellowbrick/tree/develop) branch &mdash; and feel free to contribute your ideas for new Visualizers!\n\n## Affiliations\n[![District Data Labs](https://github.com/DistrictDataLabs/yellowbrick/raw/develop/docs/images/readme/affiliates_ddl.png)](https://www.districtdatalabs.com/) [![NumFOCUS Affiliated Project](https://github.com/DistrictDataLabs/yellowbrick/raw/develop/docs/images/readme/affiliates_numfocus.png)](https://numfocus.org/)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.0927734375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2016-2020 The scikit-yb developers\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 2.5,
          "content": "# Maintainers and Contributors\n\nThis file describes how the Yellowbrick project is maintained and provides contact information for key folks in the project.\n\nWhen creating a pull request, your contribution will be reviewed by one or probably two maintainers who will give you the :+1: when your extension is ready to be merged. Maintainers work hard to ensure that Yellowbrick is a high quality project and that contributors are successful.\n\nFor more about how to develop visualizers and contribute features to Yellowbrick, see our [contributor's guide](CONTRIBUTING.md) and the [documentation](https://www.scikit-yb.org/en/latest/contributing/index.html).\n\nFor everyone who has [contributed](https://github.com/DistrictDataLabs/yellowbrick/graphs/contributors) in big and in small ways, **thank you!**. Yellowbrick is intended to be a community project, welcoming to new and experienced developers alike. If you would like to become a core contributor you must simply submit a pull request that shows core knowledge of the Yellowbrick library. Usually new Visualizers meet this standard; let the maintainers know you'd like to join the team, and they'll help you work toward it!\n\n## Maintainers\n\nThis is a list of the primary project maintainers. Feel free to @ message them in issues and converse with them directly.\n\n- [bbengfort](https://github.com/bbengfort)\n- [rebeccabilbro](https://github.com/rebeccabilbro)\n- [lwgray](https://github.com/lwgray)\n- [pdamodaran](https://github.com/pdamodaran)\n\n## Core Contributors\n\nThis is a list of the core-contributors of the project. Core contributors set the road map and vision of the project. Keep an eye out for them in issues and check out their work to use as inspiration! Most likely they would also be happy to chat and answer questions.\n\n- [pdeziel](https://github.com/pdeziel)\n- [ndanielsen](https://github.com/ndanielsen)\n- [NealHumphrey](https://github.com/NealHumphrey)\n- [jkeung](https://github.com/jkeung)\n- [mattandahalfew](https://github.com/mattandahalfew)\n- [tuulihill](https://github.com/tuulihill)\n- [balavenkatesan](https://github.com/balavenkatesan)\n- [morganmendis](https://github.com/morganmendis)\n- [yzyzy](https://github.com/yzyzy)\n- [wagner2010](https://github.com/wagner2010)\n- [Juan0001](https://github.com/Juan0001)\n- [ccjolley](https://github.com/ccjolley)\n- [justjess](https://github.com/justjess)\n- [kbelita](https://github.com/kbelita)\n- [sanemkabaca](https://github.com/sanemkabaca)\n- [Kautumn06](https://github.com/Kautumn06)\n- [Zeynepelabiad](https://github.com/Zeynepelabiad)\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.466796875,
          "content": "include *.md\ninclude *.rst\ninclude *.txt\ninclude *.yml\ninclude *.cfg\ninclude Makefile\ninclude MANIFEST.in\n\ninclude examples/*.ipynb\ninclude examples/*.md\n\ninclude LICENSE.txt\n\ngraft docs\nprune docs/_build\n\ngraft tests\nprune tests/fixtures\nprune tests/actual_images\n\ngraft yellowbrick\nprune yellowbrick/datasets/fixtures\n\nglobal-exclude __pycache__\nglobal-exclude *.py[co]\nglobal-exclude .ipynb_checkpoints\nglobal-exclude .DS_Store\nglobal-exclude .env\nglobal-exclude .coverage.*\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.0439453125,
          "content": "# Shell to use with Make\nSHELL := /bin/bash\n\n# Set important Paths\nPROJECT := yellowbrick\nLOCALPATH := $(CURDIR)/$(PROJECT)\n\n# Export targets not associated with files\n.PHONY: test coverage pip clean publish uml build deploy install\n\n# Clean build files\nclean:\n\tfind . -name \"*.pyc\" -print0 | xargs -0 rm -rf\n\tfind . -name \"__pycache__\" -print0 | xargs -0 rm -rf\n\tfind . -name \"*-failed-diff.png\" -print0 | xargs -0 rm -rf\n\t-rm -rf htmlcov\n\t-rm -rf .coverage\n\t-rm -rf build\n\t-rm -rf dist\n\t-rm -rf $(PROJECT).egg-info\n\t-rm -rf .eggs\n\t-rm -rf site\n\t-rm -rf classes_$(PROJECT).png\n\t-rm -rf packages_$(PROJECT).png\n\t-rm -rf docs/_build\n\n# Targets for testing\ntest:\n\tpytest\n\n# Publish to gh-pages\npublish:\n\tgit subtree push --prefix=deploy origin gh-pages\n\n# Draw UML diagrams\numl:\n\tpyreverse -ASmy -k -o png -p $(PROJECT) $(LOCALPATH)\n\n# Build the universal wheel and source distribution\nbuild:\n\tpython setup.py sdist bdist_wheel\n\n# Install the package from source\ninstall:\n\tpython setup.py install\n\n# Deploy to PyPI\ndeploy:\n\tpython setup.py register\n\ttwine upload dist/*\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.3447265625,
          "content": "# Yellowbrick\n\n\n[![Build Status](https://github.com/DistrictDataLabs/yellowbrick/actions/workflows/ci.yml/badge.svg?branch=develop)](https://github.com/DistrictDataLabs/yellowbrick/actions/workflows/ci.yml)\n[![Coverage Status](https://codecov.io/gh/DistrictDataLabs/yellowbrick/branch/develop/graph/badge.svg?token=BnaSECZz2r)](https://codecov.io/gh/DistrictDataLabs/yellowbrick)\n[![Total Alerts](https://img.shields.io/lgtm/alerts/g/DistrictDataLabs/yellowbrick.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/DistrictDataLabs/yellowbrick/alerts/)\n[![Language Grade: Python](https://img.shields.io/lgtm/grade/python/g/DistrictDataLabs/yellowbrick.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/DistrictDataLabs/yellowbrick/context:python)\n[![PyPI version](https://badge.fury.io/py/yellowbrick.svg)](https://badge.fury.io/py/yellowbrick)\n[![Documentation Status](https://readthedocs.org/projects/yellowbrick/badge/?version=latest)](http://yellowbrick.readthedocs.io/en/latest/?badge=latest)\n[![Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.1206239.svg)](https://doi.org/10.5281/zenodo.1206239)\n[![JOSS](http://joss.theoj.org/papers/10.21105/joss.01075/status.svg)](https://doi.org/10.21105/joss.01075)\n[![Binder](https://mybinder.org/badge.svg)](https://mybinder.org/v2/gh/DistrictDataLabs/yellowbrick/develop?filepath=examples%2Fexamples.ipynb)\n\n\n**Visual analysis and diagnostic tools to facilitate machine learning model selection.**\n\n[![Banner](docs/images/readme/banner.png)](https://www.scikit-yb.org/en/latest/gallery.html)\n\n## What is Yellowbrick?\n\nYellowbrick is a suite of visual diagnostic tools called \"Visualizers\" that extend the scikit-learn API to allow human steering of the model selection process. In a nutshell, Yellowbrick combines scikit-learn with matplotlib in the best tradition of the scikit-learn documentation, but to produce visualizations for _your_ machine learning workflow!\n\nFor complete documentation on the Yellowbrick API, a gallery of available visualizers, the contributor's guide, tutorials and teaching resources, frequently asked questions, and more, please visit our documentation at [www.scikit-yb.org](https://www.scikit-yb.org/).\n\n## Installing Yellowbrick\n\nYellowbrick is compatible with Python 3.4 or later and also depends on scikit-learn and matplotlib. The simplest way to install Yellowbrick and its dependencies is from PyPI with pip, Python's preferred package installer.\n\n    $ pip install yellowbrick\n\nNote that Yellowbrick is an active project and routinely publishes new releases with more visualizers and updates. In order to upgrade Yellowbrick to the latest version, use pip as follows.\n\n    $ pip install -U yellowbrick\n\nYou can also use the `-U` flag to update scikit-learn, matplotlib, or any other third party utilities that work well with Yellowbrick to their latest versions.\n\nIf you're using Anaconda (recommended for Windows users), you can take advantage of the conda utility to install Yellowbrick:\n\n    conda install -c districtdatalabs yellowbrick\n\n## Using Yellowbrick\n\nThe Yellowbrick API is specifically designed to play nicely with scikit-learn. Here is an example of a typical workflow sequence with scikit-learn and Yellowbrick:\n\n### Feature Visualization\n\nIn this example, we see how Rank2D performs pairwise comparisons of each feature in the data set with a specific metric or algorithm and then returns them ranked as a lower left triangle diagram.\n\n```python\nfrom yellowbrick.features import Rank2D\n\nvisualizer = Rank2D(\n    features=features, algorithm='covariance'\n)\nvisualizer.fit(X, y)                # Fit the data to the visualizer\nvisualizer.transform(X)             # Transform the data\nvisualizer.show()                   # Finalize and render the figure\n```\n\n### Model Visualization\n\nIn this example, we instantiate a scikit-learn classifier and then use Yellowbrick's ROCAUC class to visualize the tradeoff between the classifier's sensitivity and specificity.\n\n```python\nfrom sklearn.svm import LinearSVC\nfrom yellowbrick.classifier import ROCAUC\n\nmodel = LinearSVC()\nvisualizer = ROCAUC(model)\nvisualizer.fit(X,y)\nvisualizer.score(X,y)\nvisualizer.show()\n```\n\nFor additional information on getting started with Yellowbrick, view the [Quick Start Guide](https://www.scikit-yb.org/en/latest/quickstart.html) in the [documentation](https://www.scikit-yb.org/en/latest/) and check out our [examples notebook](https://github.com/DistrictDataLabs/yellowbrick/blob/develop/examples/examples.ipynb).\n\n## Contributing to Yellowbrick\n\nYellowbrick is an open source project that is supported by a community who will gratefully and humbly accept any contributions you might make to the project. Large or small, any contribution makes a big difference; and if you've never contributed to an open source project before, we hope you will start with Yellowbrick!\n\nIf you are interested in contributing, check out our [contributor's guide](https://www.scikit-yb.org/en/latest/contributing/index.html). Beyond creating visualizers, there are many ways to contribute:\n\n- Submit a bug report or feature request on [GitHub Issues](https://github.com/DistrictDataLabs/yellowbrick/issues).\n- Contribute a Jupyter notebook to our examples [gallery](https://github.com/DistrictDataLabs/yellowbrick/tree/develop/examples).\n- Assist us with [user testing](https://www.scikit-yb.org/en/latest/evaluation.html).\n- Add to the documentation or help with our website, [scikit-yb.org](https://www.scikit-yb.org).\n- Write [unit or integration tests](https://www.scikit-yb.org/en/latest/contributing/developing_visualizers.html#integration-tests) for our project.\n- Answer questions on our issues, mailing list, Stack Overflow, and elsewhere.\n- Translate our documentation into another language.\n- Write a blog post, tweet, or share our project with others.\n- [Teach](https://www.scikit-yb.org/en/latest/teaching.html) someone how to use Yellowbrick.\n\nAs you can see, there are lots of ways to get involved and we would be very happy for you to join us! The only thing we ask is that you abide by the principles of openness, respect, and consideration of others as described in the [Python Software Foundation Code of Conduct](https://www.python.org/psf/codeofconduct/).\n\nFor more information, checkout the `CONTRIBUTING.md` file in the root of the repository or the detailed documentation at [Contributing to Yellowbrick](https://www.scikit-yb.org/en/latest/contributing/index.html)\n\n## Yellowbrick Datasets\n\nYellowbrick gives easy access to several datasets that are used for the examples in the documentation and testing. These datasets are hosted in our CDN and must be downloaded for use. Typically, when a user calls one of the data loader functions, e.g. `load_bikeshare()` the data is automatically downloaded if it's not already on the user's computer. However, for development and testing, or if you know you will be working without internet access, it might be easier to simply download all the data at once.\n\nThe data downloader script can be run as follows:\n\n    $ python -m yellowbrick.download\n\nThis will download the data to the fixtures directory inside of the Yellowbrick site packages. You can specify the location of the download either as an argument to the downloader script (use `--help` for more details) or by setting the `$YELLOWBRICK_DATA` environment variable. This is the preferred mechanism because this will also influence how data is loaded in Yellowbrick.\n\n_Note: Developers who have downloaded data from Yellowbrick versions earlier than v1.0 may experience some problems with the older data format. If this occurs, you can clear out your data cache as follows:_\n\n    $ python -m yellowbrick.download --cleanup\n\n_This will remove old datasets and download the new ones. You can also use the `--no-download` flag to simply clear the cache without re-downloading data. Users who are having difficulty with datasets can also use this or they can uninstall and reinstall Yellowbrick using `pip`._\n\n## Citing Yellowbrick\n\nWe would be glad if you used Yellowbrick in your scientific publications! If you do, please cite us using the [citation guidelines](https://www.scikit-yb.org/en/latest/about.html#citing-yellowbrick).\n\n## Affiliations\n\n[![District Data Labs](docs/images/readme/affiliates_ddl.png)](https://districtdatalabs.com/) [![NumFOCUS Affiliated Project](docs/images/readme/affiliates_numfocus.png)](https://numfocus.org)\n"
        },
        {
          "name": "binder",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "paper",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.611328125,
          "content": "## Dependencies\nmatplotlib>=2.0.2,!=3.0.0\nscipy>=1.0.0\nscikit-learn>=1.0.2\nnumpy>=1.16.0\ncycler>=0.10.0\n\n## Optional Dependencies (uncomment to use)\n# nltk>=3.2\n# pandas>=1.0.4\n# umap-learn>=0.5\n\n## Testing Requirements (pip install -r tests/requirements.txt)\n# pytest>=6.1\n# pytest-cov>=2.10\n# pytest-flakes>=4.0.0\n# pytest-spec>=3.0\n# coverage>=5.3\n\n## Documentation (pip install -r docs/requirements.txt)\n# Sphinx>=3.4\n# sphinx-rtd-theme>=0.5.1\n# numpydoc>=1.1\n\n## Build Requirements (uncomment for deployment)\n# wheel>=0.35\n# twine>=3.3\n\n## Pre-Commit Requirements (uncomment to use pre-commit hooks)\n# pre-commit>=2.20.0\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.873046875,
          "content": "[metadata]\ndescription-file = DESCRIPTION.txt\nlicense_file = LICENSE.txt\n\n[test]\nlocal_freetype = True\ntests = True\n\n[aliases]\ntest=pytest\n\n[tool:pytest]\naddopts = --verbose --cov=yellowbrick --flakes --spec --cov-report=xml --cov-report term\npython_files = tests/*\nflakes-ignore =\n    __init__.py UnusedImport\n    __init__.py ImportStarUsed\n    test_*.py ImportStarUsed\n    test_*.py ImportStarUsage\n    conftest.py UnusedVariable\n    examples/* ALL\n    tests/checks.py ALL\n    docs/_build ALL\nspec_header_format = {class_name} ({path})\nfilterwarnings =\n    once::UserWarning\n    once::DeprecationWarning\n    once::PendingDeprecationWarning\n    ignore::sklearn.exceptions.ConvergenceWarning\n    ignore::FutureWarning\n\n[flake8]\n# match black maximum line length\nmax-line-length = 88\nextend-ignore = E203,E266\nper-file-ignores =\n    __init__.py:F401\n    test_*.py:F405,F403\n    conftest.py:F841\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.404296875,
          "content": "#!/usr/bin/env python\n# setup\n# Setup script for installing yellowbrick\n#\n# Author:   Benjamin Bengfort\n# Created:  Wed May 18 14:33:26 2016 -0400\n#\n# Copyright (C) 2016 The scikit-yb developers\n# For license information, see LICENSE.txt and NOTICE.md\n#\n# ID: setup.py [c4f3ba7] benjamin@bengfort.com $\n\n\"\"\"\nSetup script for installing yellowbrick.\nSee http://bbengfort.github.io/programmer/2016/01/20/packaging-with-pypi.html\n\"\"\"\n\n##########################################################################\n## Imports\n##########################################################################\n\nimport os\nimport codecs\n\nfrom setuptools import setup\nfrom setuptools import find_packages\n\n##########################################################################\n## Package Information\n##########################################################################\n\n## Basic information\n## Basic information\nNAME         = \"yellowbrick\"\nDESCRIPTION  = \"A suite of visual analysis and diagnostic tools for machine learning.\"\nAUTHOR       = \"The scikit-yb developers\"\nEMAIL        = \"yellowbrick@googlegroups.com\"\nMAINTAINER   = \"The scikit-yb developers\"\nLICENSE      = \"Apache 2\"\nREPOSITORY   = \"https://github.com/DistrictDataLabs/yellowbrick\"\nPACKAGE      = \"yellowbrick\"\nURL          = \"http://scikit-yb.org/\"\n\n## Define the keywords\nKEYWORDS = (\n    \"visualization\",\n    \"machine learning\",\n    \"scikit-learn\",\n    \"matplotlib\",\n    \"data science\",\n)\n\n## Define the classifiers\n## See https://pypi.python.org/pypi?%3Aaction=list_classifiers\nCLASSIFIERS  = (\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Natural Language :: English\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3.5\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Topic :: Software Development\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Scientific/Engineering :: Visualization\",\n)\n\n## Important Paths\nPROJECT = os.path.abspath(os.path.dirname(__file__))\nREQUIRE_PATH = \"requirements.txt\"\nVERSION_PATH = os.path.join(PACKAGE, \"version.py\")\nPKG_DESCRIBE = \"DESCRIPTION.md\"\n\n## Directories to ignore in find_packages\nEXCLUDES = (\n    \"tests\", \"tests.*\",\n    \"bin\",\n    \"docs\", \"docs.*\",\n    \"fixtures\",\n    \"register\",\n    \"notebooks\", \"notebooks.*\",\n    \"examples\", \"examples.*\",\n    \"binder\", \"binder.*\",\n    \"paper\",\n)\n\n##########################################################################\n## Helper Functions\n##########################################################################\n\n\ndef read(*parts):\n    \"\"\"\n    Assume UTF-8 encoding and return the contents of the file located at the\n    absolute path from the REPOSITORY joined with *parts.\n    \"\"\"\n    with codecs.open(os.path.join(PROJECT, *parts), \"rb\", \"utf-8\") as f:\n        return f.read()\n\n\ndef get_version(path=VERSION_PATH):\n    \"\"\"\n    Reads the python file defined in the VERSION_PATH to find the get_version\n    function, and executes it to ensure that it is loaded correctly. Separating\n    the version in this way ensures no additional code is executed.\n    \"\"\"\n    namespace = {}\n    exec(read(path), namespace)\n    return namespace[\"get_version\"](short=True)\n\n\ndef get_requires(path=REQUIRE_PATH):\n    \"\"\"\n    Yields a generator of requirements as defined by the REQUIRE_PATH which\n    should point to a requirements.txt output by `pip freeze`.\n    \"\"\"\n    for line in read(path).splitlines():\n        line = line.strip()\n        if line and not line.startswith(\"#\"):\n            yield line\n\n\ndef get_description_type(path=PKG_DESCRIBE):\n    \"\"\"\n    Returns the long_description_content_type based on the extension of the\n    package describe path (e.g. .txt, .rst, or .md).\n    \"\"\"\n    _, ext = os.path.splitext(path)\n    return {\".rst\": \"text/x-rst\", \".txt\": \"text/plain\", \".md\": \"text/markdown\"}[ext]\n\n\n##########################################################################\n## Define the configuration\n##########################################################################\n\nconfig = {\n    \"name\": NAME,\n    \"version\": get_version(),\n    \"description\": DESCRIPTION,\n    \"long_description\": read(PKG_DESCRIBE),\n    \"long_description_content_type\": get_description_type(PKG_DESCRIBE),\n    \"classifiers\": CLASSIFIERS,\n    \"keywords\": KEYWORDS,\n    \"license\": LICENSE,\n    \"author\": AUTHOR,\n    \"author_email\": EMAIL,\n    \"url\": URL,\n    \"maintainer\": MAINTAINER,\n    \"maintainer_email\": EMAIL,\n    \"project_urls\": {\n        \"Documentation\": URL,\n        \"Download\": \"{}/tarball/v{}\".format(REPOSITORY, get_version()),\n        \"Source\": REPOSITORY,\n        \"Tracker\": \"{}/issues\".format(REPOSITORY),\n    },\n    \"download_url\": \"{}/tarball/v{}\".format(REPOSITORY, get_version()),\n    \"packages\": find_packages(where=PROJECT, exclude=EXCLUDES),\n    \"package_data\": {\"yellowbrick\": [\"datasets/manifest.json\"]},\n    \"zip_safe\": False,\n    \"entry_points\": {\"console_scripts\": []},\n    \"install_requires\": list(get_requires()),\n    \"python_requires\": \">=3.4, <4\"\n}\n\n\n##########################################################################\n## Run setup script\n##########################################################################\n\nif __name__ == \"__main__\":\n    setup(**config)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "yellowbrick",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}