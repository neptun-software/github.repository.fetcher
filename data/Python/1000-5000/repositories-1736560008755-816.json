{
  "metadata": {
    "timestamp": 1736560008755,
    "page": 816,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Suor/funcy",
      "stars": 3396,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0888671875,
          "content": "*.pyc\ndist\n*.egg-info\nbuild\ndocs/_build\n.tags*\n.tox\n.coverage\nhtmlcov\n.cache\n.pytest_cache\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.1650390625,
          "content": "version: 2\n\nbuild:\n  os: \"ubuntu-20.04\"\n  tools:\n    python: \"3.11\"\n\nsphinx:\n  configuration: docs/conf.py\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 12.2626953125,
          "content": "2.0\n- support Python 3.11 officially\n- added get_lax()\n- added lzip(strict) param\n- made autocurry() and friends support kw-only and pos-only arguments\n- improved call._whatever_ arg introspection: pos-only, kw-only, kwargs and varargs are supported\nBackwards incompatible changes:\n- dropped Python 2 support\n- dropped namespace helper class\n- dropped old SkipMemoization alias for SkipMemory exception\n- @cache(key_func) param is now keyword only\n- @decorator's call won't access args capturesd by **kwargs individually anymore\n\n1.18\n- added join_with(strict=)\n- use more precise timer `timeit.default_timer` for log*durations (Saugat Pachhai)\n- preserve metadata when using autocurry as a decorator (#117) (Kale Kundert)\n- doc improvements (thx to Tim Gates)\n\n1.17\n- support Python 3.10 officially\n- added del_in()\n- made throttle() and limit_error_rate() work on methods\n- added str and repr to Call objects\n- migrated CI to Github actions (thx to Bruno Alla)\n- fixed doc[string] for zip_dicts (Tal Einat)\n- fixed some inspect issues\n- minor doc fixes\n\n1.16\n- support Python 3.9 officially\n- unify @memoize() and @cache(): both have .skip/.memory/.invalidate/.invalidate_all now\n- support dynamic resulting exception in @reraise() (Laurens Duijvesteijn)\n- made () optional for @decorator-made decorators with kw-only args\n- added @throttle()\n- added has_path() (Denys Zorinets)\n- fixed autocurry kwargs handling\n\n1.15\n- made rpartial accept keyworded arguments (Ruan Comelli)\n- made `@cache.invalidate()` idempotent (Dmitry Vasilyanov)\n- made raiser() accept a string as a shortcut\n- fixed cheatsheat description for 'distinct' helper (tsouvarev)\n- fixed some seqs docstrings\n- fixed some typos (Tim Gates)\n\n1.14\n- stated Python 3.7 and 3.8 support\n- dropped Python 2.6\n- added @wrap_prop()\n- added filter_errors param to @retry()\n- published nullcontext properly\n\n1.13\n- added @wrap_with()\n- added nullcontext\n\n1.12\n- added @cached_readonly\n- more introspection in @decorator decorators\n- documented @cached_property inheritance limitations\n- included tests in pypi sdist tarball (Tomáš Chvátal)\n\n1.11\n- switched docs and internals to Python 3\n- improved docs: better texts and examples here and there\n- support Python 3.7 officially\n- added popups over functions everywhere in docs\n- accept any iterables of errors in flow utils\n- fixed walk_values() for defaultdicts with empty factory\n- fixed xmap() signature introspection\n- documented lzip()\n\n1.10.3\n- added repr_len param to various debug utils\n- dropped testing in Python 3.3\n\n1.10.2\n- support extended function semantics in iffy (Eric Prykhodko)\n- distribute as a universal wheel.\n\n1.10.1\n- use raise from in reraise()\n- fix @cache with mixed positional and keywords args (thx to adrian-dankiv)\n\n1.10\n- added @reraise()\n- added unit and threshold params to *_durations() utils\n- published and documented LazyObject\n- fixed iffy() default argument when action is not present (Dmytro Kabakchei)\n\n1.9.1\n- make where() skip nonexistent keys (Aleksei Voronov)\n- fixed r?curry() on funcy i?map(), i?mapcat() and merge_with()\n\n1.9\n- filled in docstrings and some names\n- better currying:\n    - all *curry() now work with builtins and classes\n    - autocurry() is robust in deciding when to call\n    - deprecated autocurry() n arg\n- @memoize now exposes its memory and accepts key_func arg\n- @cache also accepts key_func and supports funcs with **kwargs\n- added omit() (Petr Melnikov)\n- fixed/hacked PyCharm import introspection\n- optimized i?reductions() in Python 3\n- backported accumulate() to Python 2\n\n1.8\n- added count_reps()\n- published namespace class\n- added LazyObject (simplistic, experimental and not documented)\n- support class dicts in walk*(), select*(), compact(), project() and empty()\n- support Python 3 dict.keys(), .values() and .items() in walk*() and friends\n- fixed empty() on iterators\n- optimized chunking range() in Python 3\n\n1.7.5\n- fixed defaults in double @decorated function\n- fixed @decorator with more than one default\n\n1.7.4\n- better error message on call.missed_arg access\n- optimized call.arg access in @decorator\n\n1.7.3\n- support Python 3.6 officially\n- fix deprecation warnings in Python 3.5 and 3.6\n\n1.7.2\n- added cheatsheet\n- many fixes in docs\n- documented @post_processing()\n- fixed (print|log)_* on non-function callables\n\n1.7.1\n- fixed 3+ argument map() in Python 3\n\n1.7\n- support Python 3.5 officially\n- added group_values()\n- fixed i?partition_by() for non-boolean extended mapper\n- cleanups and optimizations in colls and seqs\n\n1.6\n- added i?tree_nodes()\n- added (log|print)_iter_durations() to debug utils\n- added lists support to get_in(), set_in() and update_in()\n- single argument takewhile() and dropwhile()\n- published iwhere(), ipluck(), ipluck_attr() and iinvoke()\n- support @retry() with list (not tuple) of errors (Zakhar Zibarov)\n- changed µs to mks in time messages\n- optimized update_in()\n\n1.5\n- added rcompose()\n- added i?tree_leaves()\n- added pluck_attr() (Marcus McCurdy)\n- added set_in() and update_in()\n- added get_in() (Swaroop)\n- fixed bug with flatten() follow not passed deep\n\n1.4\n- added rpartial() and rcurry()\n- support arguments in print_(calls|exits)\n- made print_(errors|durations) work both with and without arguments\n- made (log|print)_errors() work as context manager\n- made (log|print)_durations() work as context managers\n- pass func docstring to @cached_property\n\n1.3\n- added with_next()\n- added timeout argument to @retry() (rocco66)\n- support kwargs in @memoize'd functions (Lukasz Dobrzanski)\n- do not cut result repr in @(log|print)_calls() and @(log|print)_exits\n\n1.2\n- support pypy3\n- added @contextmanager, ContextDecorator\n- added @(log|print)_(enters|exits)\n- print stack trace in @(log|print)_(calls|errors)\n- added label argument for tap()\n- better formatted call signatures in debug utilities\n- added itervalues()\n- exposed empty(), iteritems()\n- exposed @wraps and unwrap()\n- slightly optimized last() and nth()\n- fixed signatures of functions wrapped with @wrap_(mapper|selector)\n\n1.1\n- added merge_with() and join_with()\n- added @once, @once_per_args and @once_per()\n- added suppress() context manager\n- added is_set()\n- added name argument to @monkey\n- decorators created with @decorator now set __original__ attribute\n- optimized @decorator\n- optimized nth() and last()\n- lzip() is now exported by default from/for py3\nBackward incompatible fixes:\n- made pluck(), where() and invoke() return interators in python 3\n- __wrapped__ attribute added by decorators now correctly refers to immediate wrapped not innermost\n\n1.0.0\n- @silent, @ignore() and decorators created with @decorator will now work\n  with method_descriptors and other non-wrappable callables.\n- chained decorators now have access to arguments by name\n- exposed cut_prefix() and cut_suffix()\n- optimized re_tester()\n- fixed @retry in python 3\nBackward incompatible changes:\n- function made from dict will now use __getitem__ instead of get.\n  Means possible KeyErrors for dicts and factory function calls for defaultdict.\n  Use `a_dict.get` instead of just `a_dict` for old behaviour.\n- reverted imap(None, seq) to default strange behaviour.\n\n0.10.1\n- optimized @decorator\n\n0.10\n- added is_tuple()\n- raiser() can now be called without arguments, defaults to Exception\n- support del @cached_property\n- optimized and cleaned up @cached_property\n- optimized i?split(), split_at() and split_by()\n- optimized @memoize\n- optimized zipdict()\nBackward incompatible changes:\n- split(), split_at() and split_by() now return a tuple of two lists instead of list of them\n- @cached_property no longer uses _name to store cached value\n- partial() is now an alias to functools.partial, use func_partial() for old behaviour\n\n0.9\n- added experimental python 3 support\n- added python 2.6 support\n- added autocurry()\n- published idistinct(), isplit(), isplit_at(), isplit_by()\n- some optimizations\n\n0.8\n- added raiser()\n- added idistinct()\n- added key argument to i?distinct()\n- added key argument to is_distinct()\n- added group_by_keys()\nBackward incompatible changes:\n- walk_values() now updates defaultdict item factory to composition of mapper and old one\n- izip_dicts() now packs values in tuple separate from key\n- @decorator raises AttributeError not NameError when non-existent argument is accessed by name\n\n0.7\n- added i?flatten()\n- added pairwise()\n- added nth()\n- added is_seqcont()\n- greatly optimized @decorator\n- added @log_durations and @print_durations\n- @logs_calls and @print_calls now provide call signature on return\n- @logs_calls and @print_calls now log errors, optional for @log_calls\n- better call signature stringification for @(log|print)_(calls|errors)\n- fixed i?partition() and i?chunks() with xrange()\nBackward incompatible changes:\n- is_iter() now returns False given xrange() object\n\n0.6.0\n- added izip_values() and izip_dicts()\n- added last() and butlast()\n- added isnone() and notnone() primitives\n- added extended fn semantics to group_by(), count_by() and i?partition_by()\n- added fill argument to with_prev()\n- optimized ilen()\n\n0.5.6\n- fixed installation issue\n\n0.5.5\n- added count_by()\n- added i?partition_by()\n\n0.5.4\n- added @post_processing() flow utility\n- partition() and chunks() can handle iterators now\n- added ipartition() and ichunks()\n\n0.5.3\n- fixed decorators produced with @decorator over non-functions\n- optimized @ignore and @silent\n\n0.5.2\n- added i?without()\n- more and better docs\nBackward incompatible changes:\n- compact() now strips all falsy values not just None\n\n0.5.1\n- added ints and slices to extended fn semantics\n- added extended semantics to *_fn(), compose(), complement and i?juxt()\n- can now @monkey() patch modules\n- cached properties can now be set\n\n0.5.0\n- added type testing utilities\n- added @monkey\n- added cut_prefix() and cut_suffix() privately\n- added @silent_lookuper\n- exported @retry directly from from funcy\n- better support for arg introspection in @decorator\nBackward incompatible changes:\n- removed defaults for log_calls() and log_errors()\n- @make_lookuper decorated functions now will raise LookupError on memory miss,\n  use @silent_lookuper for old behavior\n- call object in @decorator access to func, args and kwargs\n  is now done through _func, _args and _kwargs\n\n0.4.1\n- decorators created with @decorator are now able to pass additional args and kwargs\n- @collecting, @joining() and @limit_error_rate() now exported directly from funcy\n- @tap(), @log_calls and @log_errors() now exported directly from funcy\n- added @print_calls and @print_errors\n- better handling passing None to optional parameter\n- docs for debugging utilities\nBackward incompatible changes:\n- @log renamed to @log_calls\n\n0.4.0\n- extended predicate/mapping semantics for seq and coll utils\n- added str_join()\n- added @collecting and @joining()\n- added sums() and isums()\n- better docs\n\n0.3.4\n- added with_prev()\n- added iterable()\n- support iterators in walk*(), select*(), empty() and project()\n- reexport itertools.chain()\n- faster curry\n- more docs\n\n0.3.3\n- added compact(), i?reductions()\n- added default argument to @ignore()\n- added tap() experimental debug utility\n- @make_lookuper() now works on functions with arguments\n- exposed ilen() publicly\n- added default argument to @ignore()\n- fix: join() and merge() now correctly fail when receive [None, ...]\n- better docs\nBackward incompatible changes:\n- renamed @memoize.lookup() to @make_lookuper()\n\n0.3.2\n- added ilen()\n- added some object helpers: namespace base class and @cached_property\n- more docs\n\n0.3.1\n- added @memoize.lookup()\n- more and better docs\nBackward incompatible changes:\n- removed generator based @decorator version\n- pluck() now accepts key as first parameter\n\n0.3.0\n- partial docs\n- added where(), pluck() and invoke() inspired by underscore\n- added split_by()\n- second() made public\n- reexport itertools.cycle()\n- walk() and select() work with strings now\nBackward incompatible changes:\n- renamed groupby() to group_by()\n- separated split_at() from split()\n- automatically unpack one-element tuples returned from re_*()\n- join() now returns None on empty input instead of TypeError\n- made fallback() accept multiple arguments\nBugfixes:\n- fixed join() swallowing first coll from iterator of colls\n\n0.2.1\n- one argument keep()\n- fallback() flow\n\n0.2\n- added curry() to funcs\n- added re_test(), re_tester() and re_finder() to strings\n- added second() to seqs\n- added one() and one_fn() to colls and funcolls\n- support defaultdicts in walk*(), select*(), project(), empty()\n- one argument and uncallable default in iffy()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.494140625,
          "content": "Copyright (c) 2012-2020, Alexander Schepanovski.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of funcy nor the names of its contributors may\n       be used to endorse or promote products derived from this software\n       without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0927734375,
          "content": "include LICENSE\ninclude CHANGELOG\ninclude README.rst\ninclude VERSION\nrecursive-include tests *\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 4.70703125,
          "content": "Funcy |Build Status|\n=====\n\nA collection of fancy functional tools focused on practicality.\n\nInspired by clojure, underscore and my own abstractions. Keep reading to get an overview\nor `read the docs <http://funcy.readthedocs.org/>`_.\nOr jump directly to `cheatsheet <http://funcy.readthedocs.io/en/stable/cheatsheet.html>`_.\n\nWorks with Python 3.4+ and pypy3.\n\n\nInstallation\n-------------\n\n::\n\n    pip install funcy\n\n\nOverview\n--------------\n\nImport stuff from funcy to make things happen:\n\n.. code:: python\n\n    from funcy import whatever, you, need\n\n\nMerge collections of same type\n(works for dicts, sets, lists, tuples, iterators and even strings):\n\n.. code:: python\n\n    merge(coll1, coll2, coll3, ...)\n    join(colls)\n    merge_with(sum, dict1, dict2, ...)\n\n\nWalk through collection, creating its transform (like map but preserves type):\n\n.. code:: python\n\n    walk(str.upper, {'a', 'b'})            # {'A', 'B'}\n    walk(reversed, {'a': 1, 'b': 2})       # {1: 'a', 2: 'b'}\n    walk_keys(double, {'a': 1, 'b': 2})    # {'aa': 1, 'bb': 2}\n    walk_values(inc, {'a': 1, 'b': 2})     # {'a': 2, 'b': 3}\n\n\nSelect a part of collection:\n\n.. code:: python\n\n    select(even, {1,2,3,10,20})                  # {2,10,20}\n    select(r'^a', ('a','b','ab','ba'))           # ('a','ab')\n    select_keys(callable, {str: '', None: None}) # {str: ''}\n    compact({2, None, 1, 0})                     # {1,2}\n\n\nManipulate sequences:\n\n.. code:: python\n\n    take(4, iterate(double, 1)) # [1, 2, 4, 8]\n    first(drop(3, count(10)))   # 13\n\n    lremove(even, [1, 2, 3])    # [1, 3]\n    lconcat([1, 2], [5, 6])     # [1, 2, 5, 6]\n    lcat(map(range, range(4)))  # [0, 0, 1, 0, 1, 2]\n    lmapcat(range, range(4))    # same\n    flatten(nested_structure)   # flat iter\n    distinct('abacbdd')         # iter('abcd')\n\n    lsplit(odd, range(5))       # ([1, 3], [0, 2, 4])\n    lsplit_at(2, range(5))      # ([0, 1], [2, 3, 4])\n    group_by(mod3, range(5))    # {0: [0, 3], 1: [1, 4], 2: [2]}\n\n    lpartition(2, range(5))     # [[0, 1], [2, 3]]\n    chunks(2, range(5))         # iter: [0, 1], [2, 3], [4]\n    pairwise(range(5))          # iter: [0, 1], [1, 2], ...\n\n\nAnd functions:\n\n.. code:: python\n\n    partial(add, 1)             # inc\n    curry(add)(1)(2)            # 3\n    compose(inc, double)(10)    # 21\n    complement(even)            # odd\n    all_fn(isa(int), even)      # is_even_int\n\n    one_third = rpartial(operator.div, 3.0)\n    has_suffix = rcurry(str.endswith, 2)\n\n\nCreate decorators easily:\n\n.. code:: python\n\n    @decorator\n    def log(call):\n        print(call._func.__name__, call._args)\n        return call()\n\n\nAbstract control flow:\n\n.. code:: python\n\n    walk_values(silent(int), {'a': '1', 'b': 'no'})\n    # => {'a': 1, 'b': None}\n\n    @once\n    def initialize():\n        \"...\"\n\n    with suppress(OSError):\n        os.remove('some.file')\n\n    @ignore(ErrorRateExceeded)\n    @limit_error_rate(fails=5, timeout=60)\n    @retry(tries=2, errors=(HttpError, ServiceDown))\n    def some_unreliable_action(...):\n        \"...\"\n\n    class MyUser(AbstractBaseUser):\n        @cached_property\n        def public_phones(self):\n            return self.phones.filter(public=True)\n\n\nEase debugging:\n\n.. code:: python\n\n    squares = {tap(x, 'x'): tap(x * x, 'x^2') for x in [3, 4]}\n    # x: 3\n    # x^2: 9\n    # ...\n\n    @print_exits\n    def some_func(...):\n        \"...\"\n\n    @log_calls(log.info, errors=False)\n    @log_errors(log.exception)\n    def some_suspicious_function(...):\n        \"...\"\n\n    with print_durations('Creating models'):\n        Model.objects.create(...)\n        # ...\n    # 10.2 ms in Creating models\n\n\nAnd `much more <http://funcy.readthedocs.org/>`_.\n\n\nDive in\n-------\n\nFuncy is an embodiment of ideas I explain in several essays:\n\n- `Why Every Language Needs Its Underscore <https://suor.github.io/blog/2014/06/22/why-every-language-needs-its-underscore/>`_\n- `Functional Python Made Easy <https://suor.github.io/blog/2013/10/13/functional-python-made-easy/>`_\n- `Abstracting Control Flow <https://suor.github.io/blog/2013/10/08/abstracting-control-flow/>`_\n- `Painless Decorators <https://suor.github.io/blog/2013/11/03/painless-decorators/>`_\n\nRelated Projects\n----------------\n\n- https://pypi.org/project/funcy-chain/\n- https://pypi.org/project/funcy-pipe/\n\nRunning tests\n--------------\n\nTo run the tests using your default python:\n\n::\n\n    pip install -r test_requirements.txt\n    py.test\n\nTo fully run ``tox`` you need all the supported pythons to be installed. These are\n3.4+ and PyPy3. You can run it for particular environment even in absense\nof all of the above::\n\n    tox -e py310\n    tox -e pypy3\n    tox -e lint\n\n\n.. |Build Status| image:: https://github.com/Suor/funcy/actions/workflows/test.yml/badge.svg\n   :target: https://github.com/Suor/funcy/actions/workflows/test.yml?query=branch%3Amaster\n"
        },
        {
          "name": "TODO.rst",
          "type": "blob",
          "size": 0.681640625,
          "content": "TODO\n====\n\n- public xfunc/xfn, xpred\n- where_not?\n- invalidate/invalidate_all() to (make|silent)_lookuper?\n- decorators with optional arguments?\n\nOr not TODO\n-----------\n\n- pre_walk, post_walk\n- tree-seq\n- (log|print)_errors to optionally hide causing call\n- log_* and print_* to optionally hide args\n- padding to chunks\n- partial.func interface or (func, arg1, arg2) extended fns\n- reject*(), disjoint*() collections\n- zip_with = map(f, zip(seqs))\n- starfilter()\n- one argument select*()? other name?\n- reversed() to work with iterators\n- vector chained boolean test (like perl 6 [<])\n\n\nUnknown future\n--------------\n\n- cython implementation? separate - cyfuncy? fallback transparently?\n- funcyx?\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.00390625,
          "content": "2.0\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "funcy",
          "type": "tree",
          "content": null
        },
        {
          "name": "publish.sh",
          "type": "blob",
          "size": 0.1796875,
          "content": "#!/usr/bin/bash\n\nset -ex\n\nNAME=funcy\nVERSION=`cat VERSION`\n\npython setup.py sdist bdist_wheel\ntwine check dist/$NAME-$VERSION*\ntwine upload --skip-existing -uSuor dist/$NAME-$VERSION*\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0615234375,
          "content": "[bdist_wheel]\nuniversal = 1\n\n[metadata]\nlicense_file = LICENSE\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.419921875,
          "content": "from setuptools import setup\n\n\n# Remove build status\nREADME = open('README.rst').read().replace('|Build Status|', '', 1)\n\n\nsetup(\n    name='funcy',\n    version=open('VERSION').read().strip(),\n    author='Alexander Schepanovski',\n    author_email='suor.web@gmail.com',\n\n    description='A fancy and practical functional tools',\n    long_description=README,\n    long_description_content_type=\"text/x-rst\",\n    url='http://github.com/Suor/funcy',\n    license='BSD',\n\n    packages=['funcy'],\n\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Programming Language :: Python :: Implementation :: CPython',\n        'Programming Language :: Python :: Implementation :: PyPy',\n\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Intended Audience :: Developers',\n    ]\n)\n"
        },
        {
          "name": "test_requirements.txt",
          "type": "blob",
          "size": 0.1953125,
          "content": "pytest==7.4.3; python_version>='3.7'\npytest==6.2.5; python_version=='3.6'\npytest==3.9.3; python_version<='3.5'\nmore-itertools==4.0.0; python_version=='3.5'\nwhatever==0.7\ntyping; python_version=='3.4'\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.6318359375,
          "content": "[tox]\nenvlist = py34, py35, py36, py37, py38, py39, py310, py311, py312, pypy3, docs, lint\n\n[testenv]\ndeps = -r test_requirements.txt\ncommands = py.test -W error {posargs}\n\n\n[testenv:docs]\ndeps = -r docs/requirements.txt\nchangedir = docs\ncommands = sphinx-build -b html -W . _build/html\n\n\n; TODO: get rid of flakes\n[flake8]\nmax-line-length = 100\nignore = E127,E128,E302,F403,E126,E272,E226,E301,E261,E265,E251,E303,E305,E306,E266,E731,E402,F405,W503\nexclude = docs/conf.py, .tox\n\n[testenv:lint]\nbasepython = python3.10\npassenv = PYTHONPATH\ndeps =\n    flake8>=3.8.3\ncommands =\n    python --version\n    flake8 funcy\n    flake8 --select=F,E5,W tests\n"
        }
      ]
    }
  ]
}