{
  "metadata": {
    "timestamp": 1736559860328,
    "page": 614,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "django-guardian/django-guardian",
      "stars": 3679,
      "defaultBranch": "devel",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.287109375,
          "content": "guardian/version.py\n*.pyc\n*.log\n*.egg\n*.egg-info\n*.swp\n*.bak\n*.db\n*.orig\nbuild\n_build\ndist\n.DS_Store\n.coverage\n.hgignore\n.tox\n.ropeproject\n\nexample_project/media\nexample_project/conf/*.py\n.idea/\n.eggs/\n.cache/\n.mypy_cache/\n.pytest_cache/\n\n# WebDAV remote filesystem\n.DAV\n.project\n.pydevproject\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.078125,
          "content": "[settings]\nline_length=120\nforce_single_line=False\nforce_alphabetical_sort=True\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 2.4755859375,
          "content": "Authors ordered by first contribution\n\n- Lukasz Balcerzak <lukaszbalcerzak@gmail.com>\n- Cesar Canassa <cesar.canassa@gmail.com>\n- Vincent Driessen <vincent@datafox.nl>\n- John Hensley <john@fairviewcomputing.com>\n- Ramanan Sivaranjan <ramanan@funkaoshi.com>\n- Woosuk Suh <pipoket88@gmail.com>\n- Bojan Mihelac <bmihelac@mihelac.org>\n- Rafael Ponieman <rafadev@gmail.com>\n- Daniel Sokolowski <daniel.sokolowski@danols.com>\n- Ali Lozano <alilozanoc@gmail.com>\n- BJ Dierkes <derks@bjdierkes.com>\n- Rach Belaid <rachid.belaid@gmail.com>\n- Michael Crosby <crosby.michael@gmail.com>\n- Greg Hinch <greg@greghinch.com>\n- Aram Dulyan <aram@dulyan.com>\n- Florian Hahn <flo@fhahn.com>\n- Piotr Kilczuk <piotr@tymaszweb.pl>\n- Reavis Sutphin-Gray <reavis@sutphin-gray.com>\n- Adrián López <adrianlopezcalvo@hotmail.com>\n- Jameel Al-Aziz <me@jalaziz.net>\n- John P. Neumann <arrantsquid@gmail.com>\n- Andreas Madsack <andreas@madflex.de>\n- Ivan Kharlamov <the.paper.men@gmail.com>\n- Miguel de Val-Borro <miguel.deval@gmail.com>\n- Jan Nakladal <mojeto1@gmail.com>\n- Yonel Ceruto <yceruto@abalt.org>\n- Luke Faraone <lfaraone@humbughq.com>\n- John Wegis <john@presencelearning.com>\n- Florentin Sardan <florentin.sardan@gmail.com>\n- Geoff Greer <geoff@greer.fm>\n- Hans Larsen <hans@hansl.ca>\n- Fabio C. Barrionuevo da Luz <bnafta@gmail.com> @luzfcb\n- Tomasz Wsuł <2nickers@gmail.com>\n- Xavier Ordoquy <xordoquy@linovia.com>\n- Joshua Bonnett <joshua.bonnett@gmail.com>\n- Jernej Kos <jernej@kos.mx>\n- Bruno Ribeiro da Silva <bruno@e3c.com.br>\n- Cezar Jenkins <emperorcezar@gmail.com>\n- Warren Volz <warren@warrenvolz.com>\n- Omer Katz <omer.drow@gmail.com>\n- Vishal Lal <vish61@gmail.com>\n- Steven DeMartini <sjd@yelp.com>\n- zauddelig <zauddelig@gmail.com>\n- Remco Wendt <remco.wendt@gmail.com>\n- Kevin London <kevinlondon@gmail.com>\n- Kouhei Maeda <mkouhei@gmail.com>\n- Samuel Sutch <sam@sutch.net>\n- Morgan Aubert <morgan.aubert@zoho.com>\n- Brian May <brian@microcomaustralia.com.au>\n- Troy Grosfield <troy.grosfield@gmail.com>\n- Michael Drescher <kaesemeister@gmail.com>\n- Verena Jaspersen <verena.jaspersen@gmail.com>\n- Bertrand Svetchine <bertrand.svetchine@gmail.com>\n- Frank Wickström <frank@bambuser.com>\n- George Karakostas <gckarakostas@gmail.com>\n- Adam Dobrawy <guardian@jawnosc.tk>\n- Jeff Hackshaw <intrepidevio@gmail.com>\n- Chase Bennett <ch@se.gd>\n- Jonny Arnold <jonny.arnold89@gmail.com>\n- Davis Raymond Muro <davisraymondmuro@gmail.com>\n- Richard de Wit <henk.exe@gmail.com>\n- Pedro Rojas Gavidia <pedrorojas.gavidia@gmail.com> @pedrorojasg\n"
        },
        {
          "name": "CHANGES",
          "type": "blob",
          "size": 14.1103515625,
          "content": "Unreleased\n==========\n\n* Add support for Django 4.1, 4.2 & 5.0\n* Add support for Python 3.10, 3.11 & 3.12\n* Drop support for Django 2.2, 3.0, 3.1 & 4.0\n* Drop support for Python 3.5, 3.6 & 3.7\n\nRelease 2.4.0 (May 24, 2021)\n============================\n\n* Add support for Python 3.9\n* Add support for Django 3.1, Django 3.2\n* Add parameter `any_perm` to `PermissionRequiredMixin`\n* Switch from Travis CI to `GitHub Actions`_\n\nRelease 2.3.0 (June 6, 2020)\n===============================\n\n* Drop support for Django 2.1\n* Fix compatibility with UUIDField primary keys\n* Fix formatting for pyupgrade\n* Fix error with get_objects_for_user on PostgreSQL\n* Modify 'assign_perm' shortcut to treat lists as a queryset\n* Updated links to Django documentation and django-authority repository\n* Removed reference to \"easy_install\" in the documentation\n* Run migrations check only if required version of django is installed\n\nRelease 2.2.0 (January 3, 2020)\n===============================\n\n* Add support for Django 3.0 and Python 3.8.\n* Add support for custom generic object permission models.\n* Don't initialise anonymous user on DB where it's not migrated.\n* Allow object permissions with dots.\n* Several performance improvements\n    * Improve performance of ``get_objects_for_user``\n    * Update ``get_users_with_perms`` to avoid a large join\n\n.. important::\n\t\tThe 2.2.x release line will be the last one that has support for Django 2.1.\n\nRelease 2.1.0 (September 9, 2019)\n=================================\n\n* Upgrade to use ```django.urls.path``` in routing\n    *  Add admin support for user primary key as UUID\n* Auto pre-fetching permission via ```GUARDIAN_AUTO_PREFETCH```\n* Add tests for missing migrations\n\nRelease 2.0.0 (June 11, 2019)\n=============================\n\n* Drop support for Python 2.7 & 3.4 and Django 1.11 & 2.0\n\nRelease 1.5.1 (May 2, 2019)\n===========================\n\n* Restore compatibility with Python 2.7\n\n.. important::\n\t\tThe 1.5.x release line will be the last one that has support for Python 2.7.\n\nRelease 1.5.0 (Jan 31, 2019)\n==========================\n\n* Updates for compatibility with latest Python and Django versions.\n\nRelease 1.4.9 (Jul 01, 2017)\n============================\n\n* Drop ``django_guardian.compat.OrderedDict`` as a consequence of drop Python 1.6\n  earlier.\n* Fix django admin 1.11 not showing selected permissions\n* Add a optional checker variable to get_obj_perms\n* Add missing classifiers in setup.py\n\n\nRelease 1.4.8 (Apr 04, 2017)\n============================\n\n* Improved performance of `clean_orphan_obj_perms` management command\n* Use bumpversion for versioning.\n* Enable Python 3.6 testing\n* Python 2.7, 3.4, 3.5, 3.6 are only supported Python versions\n* Django 1.8, 1.10, and 1.11 are only supported Django versions\n* Added explicity on_delete to all ForeignKeys\n\nRelease 1.4.6 (Sep 09, 2016)\n============================\n\n* Improved performance of get_objects_for_user\n* Added test-covered and documented guardian.mixins.PermissionListMixin\n* Allow content type retrieval to be overridden fg. for django-polymorphic support\n* Added support CreateView-like (no object) view in PermissionRequiredMixin\n* Added django 1.10 to TravisCI and tox\n* Run tests for example_project in TravisCI\n* Require django 1.9+ for example_project (django-guardian core support django 1.7+)\n* Fix django versions compatibility in example_project\n* Drop django in install_requires of setuptools\n\nRelease 1.4.5 (Aug 09, 2016)\n============================\n\n* Fix caching issue with prefetch_perms.\n* Convert readthedocs link for their .org -> .io migration for hosted projects\n* Added example CRUD CBV project\n* Added TEMPLATES in example_project settings\n* Added Queryset support to assign_perm\n* Added QuerySet support to remove_perm\n* Updated assign_perm and remove_perm docstrings\n* Moved queryset support in assign_perms to its own function\n* Moved queryset support in remove_perms to its own function\n* Consolidated {User,Group}ObjectPermissionManager, move logic of bulk_*_perm\n  to managers\n* `assign_perm` and `remove_perm` shortcuts accept `Permission`\n  instance as `perm` and `QuerySet` as `obj` too.\n* Consolidated bulk_assign_perm to assign_perm and bulk_remove_perm to remove_perm\n* Upgraded Grappelli templates breadcrumbs block to new Django 1.9 and\n  Grappelli 2.8 standards, including proper URLs and support for\n  preserved_filters. Removed the duplicated field.errors in the field.html\n  template file.\n* Made UserManage/GroupManage forms overridable\n* Fixed GuardedModelAdminMixin views render for Django 1.10\n\n\nRelease 1.4.4 (Apr 04, 2016)\n============================\n\n* Don't install support example_project.\n* Direct ForeignKey perms in prefetch_perms.\n\n\nRelease 1.4.3 (Apr 03, 2016)\n============================\n\n* guardian.VERSION should be a tuple, not a list. Fixes #411.\n* Support for prefetching permissions.\n* Fixed union between queries.\n* Allow specifying an empty list of permissions for get_objects_for_group.\n* Mixed group and user direction relations broken. Fixes #271.\n* Lookup anonymous user using custom username field.\n* Fix up processing of ANONYMOUS_USER_NAME where set to None. Fixes #409.\n* Require TEMPLATE_403 to exist if RENDER_403 set.\n\n\nRelease 1.4.2 (Mar 09, 2016)\n============================\n\n* Test against django-master (Django 1.10 - not released).\n* Django 1.10 fixes.\n* Fixes for documentation.\n* PEP8 fixes.\n* Fix distributed files in MANIFEST.in\n* Use pytest for tests.\n* Add dependancy on django-environ.\n* Don't use ANONYMOUS_USER_ID. Uses ANONYMOUS_DEFAULT_USERNAME\n  and USERNAME_FIELD instead.\n* Use setuptools_scm for versioning.\n* Initialise admin context using each_context for Django >= 1.8.\n* Add missing with_superusers parameter to get_users_with_perms().\n* Use setuptools scm for versioning.\n* Fixes for example_project.\n* Only display permissions if permission actually assigned.\n* When using `attach_perms` with `get_users_with_perms`, and `with_group_users`\n  and `with_superusers` set to `False`, only directly assigned permissions are\n  now returned, and not effective (infered) permissions.\n\n\nRelease 1.4.1 (Jan 10, 2016)\n============================\n\n* Fix broken documentation.\n* Fix setup.py errors (#387).\n* Fix tox tests.\n* Fix travis tests.\n\n\nRelease 1.4.0 (Jan 8, 2016)\n===========================\n\n* Drop support for Django < 1.7\n* Drop support for django south migrations.\n* Remove depreciated code.\n* Fix many Django depreciated warnings.\n* Fix tests and example_project.\n* Work around for postgresql specific Django bug (#366). This is a regression\n  that was introduced in version 1.3.2.\n* Updates to documentation.\n* Require can_change permission to change object perms in admin.\n* Fixes broke admin URLS (#376 and #381).\n* Tests now work with Mysql and Postgresql as well as sqlite.\n* Uses django-environ for tests.\n\n\nRelease 1.3.2 (Nov 14, 2015)\n============================\n\n* Fixes tests for all versions of Django.\n* Tests pass for Django 1.9b1.\n* Drops support for Django < 1.5\n* Add Russian translation.\n* Various bug fixes.\n* Ensure password for anonymous user is set to unusable, not None.\n\n\nRelease 1.3.1 (Oct 20, 2015)\n============================\n\n* Fixes for 1.8 compat\n\n\nRelease 1.3 (Jun 3, 2015)\n=========================\n\n* Official Django 1.8 support (thanks to multiple contributors)\n\n\nRelease 1.2.5 (Dec 28, 2014)\n============================\n\n* Official Django 1.7 support (thanks Troy Grosfield and Brian May)\n* Allow to override ``PermissionRequiredMixin.get_permission_object``, part\n  of ``PermissionRequiredMixin.check_permissions`` method, responsible for\n  retrieving single object (Thanks zauddelig)\n* French translations (Thanks Morgan Aubert)\n* Added support for ``User.get_all_permissions`` (thanks Michael Drescher)\n\nRelease 1.2.4 (Jul 14, 2014)\n============================\n\n* Fixed another issue with custom primary keys at admin extensions (Thanks Omer\n  Katz)\n\n\nRelease 1.2.3 (Jul 14, 2014)\n============================\n\nUnfortunately this was broken release not including any important changes.\n\n\nRelease 1.2.2 (Jul 2, 2014)\n===========================\n\n* Fixed issue with custom primary keys at admin extensions (Thanks Omer Katz)\n* ``get_403_or_None`` now accepts Python path to the view function, for example\n  ``'django.contrib.auth.views.login'`` (Thanks Warren Volz)\n* Added ``with_superuser`` flag to ``guardian.shortcuts.get_objects_for_user``\n  (Thanks Bruno Ribeiro da Silva)\n* Added possibility to disable monkey patching of the ``User`` model.\n  (Thanks Cezar Jenkins)\n\n\nRelease 1.2 (Mar 7, 2014)\n=========================\n\n* Removed ``get_for_object`` methods from managers (#188)\n* Extended documentation\n* GuardedModelAdmin has been splitted into mixins\n* Faster queries in get_objects_for_user when use_groups=False or any_perm=True\n  (#148)\n* Improved speed of get_objects_for_user shortcut\n* Support for custom User model with not default username field\n* Added GUARDIAN_GET_INIT_ANONYMOUS_USER setting (#179)\n* Added ``accept_global_perms`` to ``PermissionRequiredMixin``\n* Added brazilian portuguese translations\n* Added polish translations\n* Added ``wheel`` support\n* Fixed wrong anonymous user checks\n* Support for Django 1.6\n* Support for Django 1.7 alpha\n\n.. important::\n    In this release we have removed undocumented ``get_for_object`` method\n    from both ``UserObjectPermissionManager`` and\n    ``GroupObjectPermissionManager``. Not deprecated, removed. Those methods\n    were not used within ``django-guardian`` and their odd names could lead to\n    issues if user would believe they would return object level permissions\n    associated with user/group and object passed as the input. If you depend\n    on those methods, you'd need to stick with version 1.1 and make sure you\n    do not misuse them.\n\n\nRelease 1.1 (May 26, 2013)\n==========================\n\n* Support for Django 1.5 (including Python 3 combination)\n* Support for custom user models (introduced by Django 1.5)\n* Ability to create permissions using Foreign Keys\n* Added ``user_can_access_owned_by_group_objects_only`` option to\n  ``GuardedModelAdmin.``\n* Minor documentation fixups\n* Spanish translations\n* Better support for grappelli_\n* Updated examples project\n* Speed up ``get_perms`` shortcut function\n\n\nRelease 1.0.4 (Jul 15, 2012)\n============================\n\n* Added ``GUARDIAN_RENDER_403`` and ``GUARDIAN_RAISE_403`` settings (#40)\n* Updated docstring for ``get_obj_perms`` (#43)\n* Updated codes to run with newest django-grappelli (#51)\n* Fixed problem with building a RPM package (#50)\n* Updated caveats docs related with oprhaned object permissions (#47)\n* Updated ``permission_required`` docstring (#49)\n* Added ``accept_global_perms`` for decorators (#49)\n* Fixed problem with MySQL and booleans (#56)\n* Added flag to check for *any* permission in ``get_objects_for_user`` and\n  ``get_objects_for_group`` (#65)\n* Added missing *tag closing* at template (#63)\n* Added view mixins related with authorization and authentication (#73)\n* Added tox_ support\n* Added Travis_ support\n\n\nRelease 1.0.3 (Jul 25, 2011)\n============================\n\n* Added ``get_objects_for_group`` shortcut (thanks to Rafael Ponieman)\n* Added ``user_can_access_owned_objects_only`` flag to ``GuardedModelAdmin``\n* Updated and fixed issues with example app (thanks to Bojan Mihelac)\n* Minor typo fixed at documentation\n* Included ADC theme for documentation\n\nRelease 1.0.2 (Apr 12, 2011)\n============================\n\n* ``get_users_with_perms`` now accepts ``with_group_users`` flag\n* Fixed ``group_id`` issue at admin templates\n* Small fix for documentation building process\n* It's 2011 (updated dates within this file)\n\n\nRelease 1.0.1 (Mar 25, 2011)\n============================\n\n* ``get_users_with_perms`` now accepts ``with_superusers`` flag\n* Small fix for documentation building process\n\n\nRelease 1.0.0 (Jan 27, 2011)\n============================\n\n* A final v1.0 release!\n\n\nRelease 1.0.0.beta2 (Jan 14, 2011)\n==================================\n\n* Added ``get_objects_for_user`` shortcut function\n* Added few tests\n* Fixed issues related with ``django.contrib.auth`` tests\n* Removed example project from source distribution\n\n\nRelease 1.0.0.beta1 (Jan 11, 2011)\n==================================\n\n* Simplified example project\n* Fixed issues related with test suite\n* Added ability to clear orphaned object permissions\n* Added ``clean_orphan_obj_perms`` management command\n* Documentation cleanup\n* Added grappelli_ admin templates\n\n\nRelease 1.0.0.alpha2 (Dec 2, 2010)\n==================================\n\n* Added possibility to operate with global permissions for assign and\n  ``remove_perm`` shortcut functions\n* Added possibility to generate PDF documentation\n* Fixed some tests\n\n\nRelease 1.0.0.alpha1 (Nov 23, 2010)\n===================================\n\n* Fixed admin templates not included in ``MANIFEST.in``\n* Fixed admin integration codes\n\n\nRelease 1.0.0.pre (Nov 23, 2010)\n================================\n\n* Added admin integration\n* Added reusable forms for object permissions management\n\n\nRelease 0.2.3 (Nov 17, 2010)\n============================\n\n* Added ``guardian.shortcuts.get_users_with_perms`` function\n* Added ``AUTHORS`` file\n\n\nRelease 0.2.2 (Oct 19, 2010)\n============================\n\n* Fixed migrations order (thanks to Daniel Rech)\n\n\nRelease 0.2.1 (Oct 3, 2010)\n===========================\n\n* Fixed migration (it wasn't actually updating object_pk field)\n\n\nRelease 0.2.0 (Oct 3, 2010)\n===========================\n\nFixes\n~~~~~\n\n* #4: guardian now supports models with not-integer primary keys and\n  they don't need to be called \"id\".\n\n  .. important::\n     For 0.1.X users: it is required to *migrate* guardian in your projects.\n     Add ``south`` to ``INSTALLED_APPS`` and run::\n\n        python manage.py syncdb\n        python manage.py migrate guardian 0001 --fake\n        python manage.py migrate guardian\n\nImprovements\n~~~~~~~~~~~~\n\n* Added South_ migrations support\n\n\nRelease 0.1.1 (Sep 27, 2010)\n============================\n\nImprovements\n~~~~~~~~~~~~\n\n* Added view decorators: ``permission_required`` and\n  ``permission_required_403``\n\n\nRelease 0.1.0 (Jun 6, 2010)\n===========================\n\n* Initial public release\n\n\n.. _south: http://south.aeracode.org/\n.. _grappelli: https://github.com/sehmaschine/django-grappelli\n.. _tox: http://tox.testrun.org/\n.. _travis: http://travis-ci.org/\n.. _GitHub Actions: https://github.com/django-guardian/django-guardian/actions\n\n\n.. vim: ft=rst\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.546875,
          "content": "Copyright (c) 2010-2016 Lukasz Balcerzak <lukaszbalcerzak@gmail.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nThe SVG icons in guardian/static/guardian/img are copied from Django.\n\nSVG icons source: https://github.com/encharm/Font-Awesome-SVG-PNG\nFont-Awesome-SVG-PNG is licensed under the MIT license:\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Code Charm Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.93359375,
          "content": "include CHANGES\ninclude LICENSE\ninclude README.rst\ninclude MANIFEST.in\ninclude *.py\ninclude *.ini\ninclude run_test_and_report.sh\ninclude *.txt\ninclude AUTHORS\nrecursive-include guardian *.py\nrecursive-include guardian/locale *.po *.mo\nrecursive-include docs *.bat\nrecursive-include docs *.css\nrecursive-include docs *.eot\nrecursive-include docs *.html\nrecursive-include docs *.js\nrecursive-include docs *.py\nrecursive-include docs *.rst\nrecursive-include docs *.sh\nrecursive-include docs *.svg\nrecursive-include docs *.ttf\nrecursive-include docs *.woff\nrecursive-include docs Makefile\nrecursive-include example_project *.css\nrecursive-include example_project *.html\nrecursive-include example_project *.js\nrecursive-include example_project *.png\nrecursive-include example_project *.txt\nrecursive-include example_project *.py\nrecursive-exclude docs/build *\nrecursive-include guardian *.html\nrecursive-include guardian *.svg\nrecursive-include benchmarks *.py\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.048828125,
          "content": "===============\ndjango-guardian\n===============\n\n.. image:: https://github.com/django-guardian/django-guardian/workflows/Tests/badge.svg?branch=devel\n  :target: https://github.com/django-guardian/django-guardian/actions/workflows/tests.yml\n\n.. image:: https://img.shields.io/pypi/v/django-guardian.svg\n    :target: https://pypi.python.org/pypi/django-guardian\n\n.. image:: https://img.shields.io/pypi/pyversions/django-guardian.svg\n    :target: https://pypi.python.org/pypi/django-guardian\n\n``django-guardian`` is an implementation of per object permissions [1]_ on top\nof Django's authorization backend\n\nDocumentation\n-------------\n\nOnline documentation is available at https://django-guardian.readthedocs.io/.\n\nRequirements\n------------\n\n* Python 3.8+\n* A supported version of Django (currently 3.2+)\n\nGitHub Actions run tests against Django versions 3.2, 4.1, 4.2, 5.0 and main.\n\nInstallation\n------------\n\nTo install ``django-guardian`` simply run::\n\n    pip install django-guardian\n\nConfiguration\n-------------\n\nWe need to hook ``django-guardian`` into our project.\n\n1. Put ``guardian`` into your ``INSTALLED_APPS`` at settings module:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n     ...\n     'guardian',\n    )\n\n2. Add extra authorization backend to your ``settings.py``:\n\n.. code:: python\n\n    AUTHENTICATION_BACKENDS = (\n        'django.contrib.auth.backends.ModelBackend', # default\n        'guardian.backends.ObjectPermissionBackend',\n    )\n\n3. Create ``guardian`` database tables by running::\n\n     python manage.py migrate\n\nUsage\n-----\n\nAfter installation and project hooks we can finally use object permissions\nwith Django_.\n\nLets start really quickly:\n\n.. code:: python\n\n      >>> from django.contrib.auth.models import User, Group\n      >>> jack = User.objects.create_user('jack', 'jack@example.com', 'topsecretagentjack')\n      >>> admins = Group.objects.create(name='admins')\n      >>> jack.has_perm('change_group', admins)\n      False\n      >>> from guardian.models import UserObjectPermission\n      >>> UserObjectPermission.objects.assign_perm('change_group', jack, obj=admins)\n      <UserObjectPermission: admins | jack | change_group>\n      >>> jack.has_perm('change_group', admins)\n      True\n\nOf course our agent jack here would not be able to *change_group* globally:\n\n.. code:: python\n\n    >>> jack.has_perm('change_group')\n    False\n\nAdmin integration\n-----------------\n\nReplace ``admin.ModelAdmin`` with ``GuardedModelAdmin`` for those models\nwhich should have object permissions support within admin panel.\n\nFor example:\n\n.. code:: python\n\n    from django.contrib import admin\n    from myapp.models import Author\n    from guardian.admin import GuardedModelAdmin\n\n    # Old way:\n    #class AuthorAdmin(admin.ModelAdmin):\n    #    pass\n\n    # With object permissions support\n    class AuthorAdmin(GuardedModelAdmin):\n        pass\n\n    admin.site.register(Author, AuthorAdmin)\n\n\n.. [1] Great paper about this feature is available at `djangoadvent articles <https://github.com/djangoadvent/djangoadvent-articles/blob/master/1.2/06_object-permissions.rst>`_.\n\n.. _Django: http://www.djangoproject.com/\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.744140625,
          "content": "# Security Policy\n\n## Supported Versions\n\nDue to limited resources, only the latest version of django-guardian will be supported with security updates (ie we won't do patch updates to prior minor versions).\n\n## Reporting a Vulnerability\n\nPlease do NOT describe issues which may indicate vulnerabilities or demonstrate possible exploits in an issue, which will be public.\n\nInstead, please prepare a demo and description of the explout and visit the [security tab on the repository](https://github.com/django-guardian/django-guardian/security) to report an issue confidentially.\n\n## How we manage vulnerabilities\n\nTh emaintainers will review the vulnerability, and use GitHub's security settings to publish an advisory whilst issuing a release to fix the problem.\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_project",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras.py",
          "type": "blob",
          "size": 2.923828125,
          "content": "import _ast\nimport os\nimport sys\nfrom setuptools import Command\n#from pyflakes.scripts import pyflakes as flakes\n\n\ndef check(filename):\n    from pyflakes import reporter as mod_reporter\n    from pyflakes.checker import Checker\n    codeString = open(filename).read()\n    reporter = mod_reporter._makeDefaultReporter()\n    # First, compile into an AST and handle syntax errors.\n    try:\n        tree = compile(codeString, filename, \"exec\", _ast.PyCF_ONLY_AST)\n    except SyntaxError:\n        value = sys.exc_info()[1]\n        msg = value.args[0]\n\n        (lineno, offset, text) = value.lineno, value.offset, value.text\n\n        # If there's an encoding problem with the file, the text is None.\n        if text is None:\n            # Avoid using msg, since for the only known case, it contains a\n            # bogus message that claims the encoding the file declared was\n            # unknown.\n            reporter.unexpectedError(filename, 'problem decoding source')\n        else:\n            reporter.syntaxError(filename, msg, lineno, offset, text)\n        return 1\n    except Exception:\n        reporter.unexpectedError(filename, 'problem decoding source')\n        return 1\n    else:\n        # Okay, it's syntactically valid.  Now check it.\n        lines = codeString.splitlines()\n        warnings = Checker(tree, filename)\n        warnings.messages.sort(key=lambda m: m.lineno)\n        real_messages = []\n        for m in warnings.messages:\n            line = lines[m.lineno - 1]\n            if 'pyflakes:ignore' in line.rsplit('#', 1)[-1]:\n                # ignore lines with pyflakes:ignore\n                pass\n            else:\n                real_messages.append(m)\n                reporter.flake(m)\n        return len(real_messages)\n\n\nclass RunFlakesCommand(Command):\n    \"\"\"\n    Runs pyflakes against guardian codebase.\n    \"\"\"\n    description = \"Check sources with pyflakes\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        try:\n            import pyflakes  # pyflakes:ignore\n        except ImportError:\n            sys.stderr.write(\"No pyflakes installed!\\n\")\n            sys.exit(-1)\n        thisdir = os.path.dirname(__file__)\n        guardiandir = os.path.join(thisdir, 'guardian')\n        warns = 0\n        # Define top-level directories\n        for topdir, dirnames, filenames in os.walk(guardiandir):\n            paths = (os.path.join(topdir, f)\n                     for f in filenames if f .endswith('.py'))\n            for path in paths:\n                if path.endswith('tests/__init__.py'):\n                    # ignore that module (it should only gather test cases with\n                    # *)\n                    continue\n                warns += check(path)\n        if warns > 0:\n            sys.stderr.write(\n                \"ERROR: Finished with total %d warnings.\\n\" % warns)\n            sys.exit(1)\n        else:\n            print(\"No problems found in source codes.\")\n"
        },
        {
          "name": "guardian",
          "type": "tree",
          "content": null
        },
        {
          "name": "manage.py",
          "type": "blob",
          "size": 0.2822265625,
          "content": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\",\n                          \"guardian.testapp.testsettings\")\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.1416015625,
          "content": "[pytest]\nDJANGO_SETTINGS_MODULE=guardian.testapp.testsettings\n\nfilterwarnings =\n    once::DeprecationWarning\n    once::PendingDeprecationWarning\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.04296875,
          "content": "Django>=3.2\ndjango-environ\nbumpversion\nmock\n"
        },
        {
          "name": "run_test_and_report.sh",
          "type": "blob",
          "size": 0.2626953125,
          "content": "#!/bin/bash\n\necho \"Running test suite with coverage report at the end\"\necho -e \"( would require coverage python package to be installed )\\n\"\n\nOMIT=\"guardian/testsettings.py,guardian/compat.py\"\ncoverage run setup.py test\ncoverage report --omit \"$OMIT\" -m guardian/*.py\n\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.4365234375,
          "content": "[bumpversion]\ncurrent_version = 2.4.0\n\n[build_sphinx]\nsource-dir = docs/\nbuild-dir = docs/build\nall_files = 1\n\n[upload_sphinx]\nupload-dir = docs/build/html\n\n[bdist_rpm]\nrequires = Django >= 3.2\n\n[aliases]\ntest = pytest\n\n[bumpversion:file:setup.py]\nsearch = version = '{current_version}'\nreplace = version = '{new_version}'\n\n[bumpversion:file:guardian/__init__.py]\nsearch = __version__ = '{current_version}'\nreplace = __version__ = '{new_version}'\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.1328125,
          "content": "import os\nfrom setuptools import setup\nfrom extras import RunFlakesCommand\n\n\nversion = '2.4.0'\n\nreadme_file = os.path.join(os.path.dirname(__file__), 'README.rst')\nwith open(readme_file) as f:\n    long_description = f.read()\n\nsetup(\n    name='django-guardian',\n    version=version,\n    python_requires='>=3.8',\n    url='http://github.com/django-guardian/django-guardian',\n    author='Lukasz Balcerzak',\n    author_email='lukaszbalcerzak@gmail.com',\n    download_url='https://github.com/django-guardian/django-guardian/tags',\n    description=\"Implementation of per object permissions for Django.\",\n    long_description=long_description,\n    zip_safe=False,\n    packages=[\n        'guardian', 'guardian.conf', 'guardian.management',\n        'guardian.migrations', 'guardian.templatetags', 'guardian.testapp',\n        'guardian.management.commands', 'guardian.testapp.migrations',\n        'guardian.testapp.tests'\n    ],\n    include_package_data=True,\n    license='BSD',\n    install_requires=[\"Django>=3.2\"],\n    tests_require=['mock', 'django-environ', 'pytest', 'pytest-django'],\n    classifiers=['Development Status :: 5 - Production/Stable',\n                 'Environment :: Web Environment',\n                 'Framework :: Django',\n                 'Framework :: Django :: 3.2',\n                 'Framework :: Django :: 4.1',\n                 'Framework :: Django :: 4.2',\n                 'Framework :: Django :: 5.0',\n                 'Intended Audience :: Developers',\n                 'License :: OSI Approved :: BSD License',\n                 'Operating System :: OS Independent',\n                 'Programming Language :: Python',\n                 'Topic :: Security',\n                 'Programming Language :: Python :: 3',\n                 'Programming Language :: Python :: 3 :: Only',\n                 'Programming Language :: Python :: 3.8',\n                 'Programming Language :: Python :: 3.9',\n                 'Programming Language :: Python :: 3.10',\n                 'Programming Language :: Python :: 3.11',\n                 'Programming Language :: Python :: 3.12',\n                 ],\n    test_suite='tests.main',\n    cmdclass={'flakes': RunFlakesCommand},\n)\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.4609375,
          "content": "[tox]\nenvlist = # sort by django version, next by python version\n    {core,example,docs}-py{38,39,310}-django32,\n    {core,example,docs}-py{38,39,310,311}-django41,\n    {core,example,docs}-py{38,39,310,311}-django42,\n    {core,example,docs}-py{310,311,312}-django50,\n    {core,example,docs}-py{310,311,312}-djangomain,\n\n[testenv]\npassenv = DATABASE_URL\nbasepython =\n    py38: python3.8\n    py39: python3.9\n    py310: python3.10\n    py311: python3.11\n    py312: python3.12\nchangedir =\n    example: example_project\n    docs: docs\ncommands =\n    django32: python {toxinidir}/manage.py makemigrations --check --dry-run\n    django41: python {toxinidir}/manage.py makemigrations --check --dry-run\n    django42: python {toxinidir}/manage.py makemigrations --check --dry-run\n    django50: python {toxinidir}/manage.py makemigrations --check --dry-run\n    djangomain: python {toxinidir}/manage.py makemigrations --check --dry-run\n    core: py.test --cov=guardian\n    docs: sphinx-build -b html -d {envtmpdir}/doctrees . {envtmpdir}/html\n    example: python manage.py test\ndeps =\n    django-environ\n    core: mock>=0.7.2\n    core: setuptools>=17.1\n    core: pyflakes\n    core: pytest\n    core: pytest-django\n    core: pytest-cov\n    example: .\n    docs: sphinx\n    docs: sphinx_rtd_theme\n    docs: setuptools_scm\n    django32: Django>=3.2,<3.3\n    django41: Django>=4.1,<4.2\n    django42: Django>=4.2,<4.3\n    django50: Django>=5.0,<5.1\n    djangomain: https://github.com/django/django/archive/main.tar.gz\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 0.91796875,
          "content": "def show_settings(settings, action):\n    import guardian\n    from django.utils.termcolors import colorize\n\n    guardian_path = guardian.__path__[0]\n    msg = \"django-guardian module's path: %r\" % guardian_path\n    print(colorize(msg, fg='magenta'))\n    db_conf = settings.DATABASES['default']\n    output = []\n    msg = \"Starting {} for db backend: {}\".format(action, db_conf['ENGINE'])\n    embracer = '=' * len(msg)\n    output.append(msg)\n    for key in sorted(db_conf.keys()):\n        if key == 'PASSWORD':\n            value = '****************'\n        else:\n            value = db_conf[key]\n        line = '    {}: \"{}\"'.format(key, value)\n        output.append(line)\n    embracer = colorize('=' * len(max(output, key=lambda s: len(s))),\n                        fg='green', opts=['bold'])\n    output = [colorize(line, fg='blue') for line in output]\n    output.insert(0, embracer)\n    output.append(embracer)\n    print('\\n'.join(output))\n"
        }
      ]
    }
  ]
}