{
  "metadata": {
    "timestamp": 1736559883517,
    "page": 632,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AsahiLinux/m1n1",
      "stars": 3658,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.9052734375,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 4\nUseTab: Never\nBreakBeforeBraces: Linux\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortFunctionsOnASingleLine: false\nAlignConsecutiveMacros: true\nIndentCaseLabels: true\nColumnLimit: 100\nIncludeBlocks: Regroup\nIncludeIsMainRegex: '(_.*)?$'\n\n# Include block order goes like this\n# - config.h style files, including ../config.h\n# - system headers (<>)\n# - All m1n1 headers, starting with the \"this file\" header, rest sorted\n# - 3rd party code headers\n# - build artifact headers (stuff outside of src/)\nIncludeCategories:\n  - Regex:           '^\"(\\.\\./)*build/build_.*\\.h\"$'\n    Priority:        -3\n  - Regex:           '^\"(\\.\\./)*config\\.h\"$'\n    Priority:        -2\n  - Regex:           '^<'\n    Priority:        -1\n  - Regex:           '^\"\\.\\./'\n    Priority:        3\n  - Regex:           '/'\n    Priority:        2\n  - Regex:           '.*'\n    Priority:        0\n    SortPriority:    1\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2333984375,
          "content": "root = true\n\n# Defaults\n[*]\nindent_style = space\nindent_size = 4\ntab_width = 4\ncharset = utf-8\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nmax_line_length = 100\n\n[Makefile*]\nindent_style = tab\ntab_width = 8\nindent_size = 8\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "!build/.keep\nbuild/\n__pycache__\n*.pyc\n*.macho\n*.swp\n*.orig\n*.rej\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.587890625,
          "content": "[submodule \"artwork\"]\n\tpath = artwork\n\turl = https://github.com/AsahiLinux/artwork.git\n[submodule \"rust/vendor/rust-fatfs\"]\n\tpath = rust/vendor/rust-fatfs\n\turl = https://github.com/rafalh/rust-fatfs\n[submodule \"rust/vendor/bitflags\"]\n\tpath = rust/vendor/bitflags\n\turl = https://github.com/bitflags/bitflags\n[submodule \"rust/vendor/cfg-if\"]\n\tpath = rust/vendor/cfg-if\n\turl = https://github.com/alexcrichton/cfg-if\n[submodule \"rust/vendor/uuid\"]\n\tpath = rust/vendor/uuid\n\turl = https://github.com/uuid-rs/uuid\n[submodule \"rust/vendor/log\"]\n\tpath = rust/vendor/log\n\turl = https://github.com/rust-lang/log\n"
        },
        {
          "name": "3rdparty_licenses",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5048828125,
          "content": "FROM debian:buster-slim\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && apt-get install -y build-essential bash curl git locales gcc-aarch64-linux-gnu libc6-dev-arm64-cross device-tree-compiler \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8\n\nRUN curl -s https://sh.rustup.rs | bash -s -- -y --target aarch64-unknown-none-softfloat\n\nENV LANG en_US.utf8\nENV PATH \"/root/.cargo/bin:${PATH}\"\n\nWORKDIR /m1n1\nCOPY . .\n\nCMD [\"/bin/bash\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "MIT License\n\nCopyright The Asahi Linux Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.5908203125,
          "content": "RUSTARCH ?= aarch64-unknown-none-softfloat\n\nifeq ($(shell uname),Darwin)\nUSE_CLANG ?= 1\n$(info INFO: Building on Darwin)\nifeq ($(shell uname -p),arm)\nTOOLCHAIN ?= /opt/homebrew/opt/llvm/bin/\nelse\nTOOLCHAIN ?= /usr/local/opt/llvm/bin/\nendif\n$(info INFO: Toolchain path: $(TOOLCHAIN))\nendif\n\nifeq ($(shell uname -m),aarch64)\nARCH ?=\nelse\nARCH ?= aarch64-linux-gnu-\nendif\n\nifeq ($(USE_CLANG),1)\nCC := $(TOOLCHAIN)clang --target=$(ARCH)\nAS := $(TOOLCHAIN)clang --target=$(ARCH)\nLD := $(TOOLCHAIN)ld.lld\nOBJCOPY := $(TOOLCHAIN)llvm-objcopy\nCLANG_FORMAT ?= $(TOOLCHAIN)clang-format\nEXTRA_CFLAGS ?=\nelse\nCC := $(TOOLCHAIN)$(ARCH)gcc\nAS := $(TOOLCHAIN)$(ARCH)gcc\nLD := $(TOOLCHAIN)$(ARCH)ld\nOBJCOPY := $(TOOLCHAIN)$(ARCH)objcopy\nCLANG_FORMAT ?= clang-format\nEXTRA_CFLAGS ?= -Wstack-usage=2048\nendif\n\nifeq ($(V),)\nQUIET := @\nelse\nifeq ($(V),0)\nQUIET := @\nelse\nQUIET :=\nendif\nendif\n\nBASE_CFLAGS := -O2 -Wall -g -Wundef -Werror=strict-prototypes -fno-common -fno-PIE \\\n\t-Werror=implicit-function-declaration -Werror=implicit-int \\\n\t-Wsign-compare -Wunused-parameter -Wno-multichar \\\n\t-ffreestanding -fpic -ffunction-sections -fdata-sections \\\n\t-nostdinc -isystem $(shell $(CC) -print-file-name=include) -isystem sysinc \\\n\t-fno-stack-protector -mstrict-align -march=armv8.2-a \\\n\t$(EXTRA_CFLAGS)\n\nCFLAGS := $(BASE_CFLAGS) -mgeneral-regs-only\n\nCFG :=\nifeq ($(RELEASE),1)\nCFG += RELEASE\nendif\n\n# Required for no_std + alloc for now\nexport RUSTC_BOOTSTRAP=1\nRUST_LIB := librust.a\nRUST_LIBS :=\nifeq ($(CHAINLOADING),1)\nCFG += CHAINLOADING\nRUST_LIBS += $(RUST_LIB)\nendif\n\nLDFLAGS := -EL -maarch64elf --no-undefined -X -Bsymbolic \\\n\t-z notext --no-apply-dynamic-relocs --orphan-handling=warn \\\n\t-z nocopyreloc --gc-sections -pie\n\nMINILZLIB_OBJECTS := $(patsubst %,minilzlib/%, \\\n\tdictbuf.o inputbuf.o lzma2dec.o lzmadec.o rangedec.o xzstream.o)\n\nTINF_OBJECTS := $(patsubst %,tinf/%, \\\n\tadler32.o crc32.o tinfgzip.o tinflate.o tinfzlib.o)\n\nDLMALLOC_OBJECTS := dlmalloc/malloc.o\n\nLIBFDT_OBJECTS := $(patsubst %,libfdt/%, \\\n\tfdt_addresses.o fdt_empty_tree.o fdt_ro.o fdt_rw.o fdt_strerror.o fdt_sw.o \\\n\tfdt_wip.o fdt.o)\n\nDCP_OBJECTS := $(patsubst %,dcp/%, \\\n\tdpav_ep.o \\\n\tdptx_phy.o \\\n\tdptx_port_ep.o \\\n\tparser.o \\\n\tsystem_ep.o)\n\nOBJECTS := \\\n\tadt.o \\\n\tafk.o \\\n\taic.o \\\n\tasc.o \\\n\tbootlogo_128.o bootlogo_256.o \\\n\tchainload.o \\\n\tchainload_asm.o \\\n\tchickens.o \\\n\tchickens_avalanche.o \\\n\tchickens_blizzard.o \\\n\tchickens_cyclone_typhoon.o \\\n\tchickens_everest.o \\\n\tchickens_firestorm.o \\\n\tchickens_hurricane_zephyr.o \\\n\tchickens_monsoon_mistral.o \\\n\tchickens_icestorm.o \\\n\tchickens_sawtooth.o \\\n\tchickens_twister.o \\\n\tclk.o \\\n\tcpufreq.o \\\n\tdapf.o \\\n\tdart.o \\\n\tdcp.o \\\n\tdcp_iboot.o \\\n\tdevicetree.o \\\n\tdisplay.o \\\n\texception.o exception_asm.o \\\n\tfb.o font.o font_retina.o \\\n\tfirmware.o \\\n\tgxf.o gxf_asm.o \\\n\theapblock.o \\\n\thv.o hv_vm.o hv_exc.o hv_vuart.o hv_wdt.o hv_asm.o hv_aic.o hv_virtio.o \\\n\ti2c.o \\\n\tiodev.o \\\n\tiova.o \\\n\tisp.o \\\n\tkboot.o \\\n\tmain.o \\\n\tmcc.o \\\n\tmemory.o memory_asm.o \\\n\tnvme.o \\\n\tpayload.o \\\n\tpcie.o \\\n\tpmgr.o \\\n\tproxy.o \\\n\tringbuffer.o \\\n\trtkit.o \\\n\tsart.o \\\n\tsep.o \\\n\tsio.o \\\n\tsmc.o \\\n\tsmp.o \\\n\tstart.o \\\n\tstartup.o \\\n\tstring.o \\\n\ttunables.o tunables_static.o \\\n\ttps6598x.o \\\n\tuart.o \\\n\tuartproxy.o \\\n\tusb.o usb_dwc3.o \\\n\tutils.o utils_asm.o \\\n\tvsprintf.o \\\n\twdt.o \\\n\t$(DCP_OBJECTS) \\\n\t$(MINILZLIB_OBJECTS) $(TINF_OBJECTS) $(DLMALLOC_OBJECTS) $(LIBFDT_OBJECTS) $(RUST_LIBS)\n\nFP_OBJECTS := \\\n\tkboot_gpu.o \\\n\tmath/expf.o \\\n\tmath/exp2f_data.o \\\n\tmath/powf.o \\\n\tmath/powf_data.o\n\nBUILD_OBJS := $(patsubst %,build/%,$(OBJECTS))\nBUILD_FP_OBJS := $(patsubst %,build/%,$(FP_OBJECTS))\nBUILD_ALL_OBJS := $(BUILD_OBJS) $(BUILD_FP_OBJS)\nNAME := m1n1\nTARGET := m1n1.macho\nTARGET_RAW := m1n1.bin\n\nDEPDIR := build/.deps\n\n.PHONY: all clean format update_tag update_cfg invoke_cc\nall: update_tag update_cfg build/$(TARGET) build/$(TARGET_RAW)\nclean:\n\trm -rf build/*\nformat:\n\t$(CLANG_FORMAT) -i src/*.c src/dcp/*.c src/math/*.c src/*.h src/dcp/*.h src/math/*.h sysinc/*.h\nformat-check:\n\t$(CLANG_FORMAT) --dry-run --Werror src/*.c src/dcp/*.c src/math/*.c src/*.h src/dcp/*.h src/math/*.h sysinc/*.h\nrustfmt:\n\tcd rust && cargo fmt\nrustfmt-check:\n\tcd rust && cargo fmt --check\n\nbuild/$(RUST_LIB): rust/src/* rust/*\n\t$(QUIET)echo \"  RS    $@\"\n\t$(QUIET)mkdir -p $(DEPDIR)\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)cargo build --target $(RUSTARCH) --lib --release --manifest-path rust/Cargo.toml --target-dir build\n\t$(QUIET)cp \"build/$(RUSTARCH)/release/${RUST_LIB}\" \"$@\"\n\nbuild/%.o: src/%.S\n\t$(QUIET)echo \"  AS    $@\"\n\t$(QUIET)mkdir -p $(DEPDIR)\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)$(AS) -c $(BASE_CFLAGS) -MMD -MF $(DEPDIR)/$(*F).d -MQ \"$@\" -MP -o $@ $<\n\n$(BUILD_FP_OBJS): build/%.o: src/%.c\n\t$(QUIET)echo \"  CC FP $@\"\n\t$(QUIET)mkdir -p $(DEPDIR)\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)$(CC) -c $(BASE_CFLAGS) -MMD -MF $(DEPDIR)/$(*F).d -MQ \"$@\" -MP -o $@ $<\n\nbuild/%.o: src/%.c\n\t$(QUIET)echo \"  CC    $@\"\n\t$(QUIET)mkdir -p $(DEPDIR)\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)$(CC) -c $(CFLAGS) -MMD -MF $(DEPDIR)/$(*F).d -MQ \"$@\" -MP -o $@ $<\n\n# special target for usage by m1n1.loadobjs\ninvoke_cc:\n\t$(QUIET)$(CC) -c $(CFLAGS) -Isrc -o $(OBJFILE) $(CFILE)\n\nbuild/$(NAME).elf: $(BUILD_ALL_OBJS) m1n1.ld\n\t$(QUIET)echo \"  LD    $@\"\n\t$(QUIET)$(LD) -T m1n1.ld $(LDFLAGS) -o $@ $(BUILD_ALL_OBJS)\n\nbuild/$(NAME)-raw.elf: $(BUILD_ALL_OBJS) m1n1-raw.ld\n\t$(QUIET)echo \"  LDRAW $@\"\n\t$(QUIET)$(LD) -T m1n1-raw.ld $(LDFLAGS) -o $@ $(BUILD_ALL_OBJS)\n\nbuild/$(NAME).macho: build/$(NAME).elf\n\t$(QUIET)echo \"  MACHO $@\"\n\t$(QUIET)$(OBJCOPY) -O binary --strip-debug $< $@\n\nbuild/$(NAME).bin: build/$(NAME)-raw.elf\n\t$(QUIET)echo \"  RAW   $@\"\n\t$(QUIET)$(OBJCOPY) -O binary --strip-debug $< $@\n\nupdate_tag:\n\t$(QUIET)mkdir -p build\n\t$(QUIET)./version.sh > build/build_tag.tmp\n\t$(QUIET)cmp -s build/build_tag.h build/build_tag.tmp 2>/dev/null || \\\n\t( mv -f build/build_tag.tmp build/build_tag.h && echo \"  TAG   build/build_tag.h\" )\n\nupdate_cfg:\n\t$(QUIET)mkdir -p build\n\t$(QUIET)for i in $(CFG); do echo \"#define $$i\"; done > build/build_cfg.tmp\n\t$(QUIET)cmp -s build/build_cfg.h build/build_cfg.tmp 2>/dev/null || \\\n\t( mv -f build/build_cfg.tmp build/build_cfg.h && echo \"  CFG   build/build_cfg.h\" )\n\nbuild/build_tag.h: update_tag\nbuild/build_cfg.h: update_cfg\n\nbuild/%.bin: data/%.bin\n\t$(QUIET)echo \"  IMG   $@\"\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)cp $< $@\n\nbuild/%.o: build/%.bin\n\t$(QUIET)echo \"  BIN   $@\"\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)$(OBJCOPY) -I binary -B aarch64 -O elf64-littleaarch64 $< $@\n\nbuild/%.bin: font/%.bin\n\t$(QUIET)echo \"  CP    $@\"\n\t$(QUIET)mkdir -p \"$(dir $@)\"\n\t$(QUIET)cp $< $@\n\nbuild/main.o: build/build_tag.h build/build_cfg.h src/main.c\nbuild/usb_dwc3.o: build/build_tag.h src/usb_dwc3.c\nbuild/chainload.o: build/build_cfg.h src/usb_dwc3.c\n\n-include $(DEPDIR)/*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8408203125,
          "content": "# m1n1: an experimentation playground for Apple Silicon\n\n(And to some extent a Linux bootloader)\n\n## Building\n\nYou need an `aarch64-linux-gnu-gcc` cross-compiler toolchain (or a native one, if running on ARM64).\n\n```shell\n$ git clone --recursive https://github.com/AsahiLinux/m1n1.git\n$ cd m1n1\n$ make\n```\n\nThe output will be in build/m1n1.macho.\n\nTo build on a native arm64 machine, use `make ARCH=`.\n\nTo build verbosely, use `make V=1`.\n\nBuilding on ARM64 macOS is supported with clang and LLVM; you need to use Homebrew to\ninstall the required dependencies:\n\n```shell\n$ brew install llvm\n```\n\nAfter that, just type `make`.\n\n### Building using the container setup\n\nIf you have a container runtime installed, like Podman or Docker, you can make use of the compose setup, which contains all build dependencies.\n\n```shell\n$ git clone --recursive https://github.com/AsahiLinux/m1n1.git\n$ cd m1n1\n$ podman-compose run m1n1 make\n$ # or\n$ docker-compose run m1n1 make\n```\n\n## Usage\n\nOur [wiki](https://github.com/AsahiLinux/docs/wiki/m1n1%3AUser-Guide) has more information on how to\nuse m1n1.\n\nTo install on an OS container based on macOS <12.1, use `m1n1.macho`:\n\n```shell\nkmutil configure-boot -c m1n1.macho -v <path to your OS volume>\n```\n\nTo install on an OS container based on macOS >=12.1, use `m1n1.bin`:\n\n```shell\nkmutil configure-boot -c m1n1.bin --raw --entry-point 2048 --lowest-virtual-address 0 -v <path to your OS volume>\n```\n\n## Payloads\n\nm1n1 supports running payloads by simple concatenation:\n\n```shell\n$ cat build/m1n1.macho Image.gz build/dtb/apple-j274.dtb initramfs.cpio.gz > m1n1-payload.macho\n$ cat build/m1n1.bin Image.gz build/dtb/apple-j274.dtb initramfs.cpio.gz > m1n1-payload.bin\n```\n\nSupported payload file formats:\n\n* Kernel images (or compatible). Must be compressed or last payload.\n* Devicetree blobs (FDT). May be uncompressed or compressed.\n* Initramfs cpio images. Must be compressed.\n\nSupported compression formats:\n\n* gzip\n* xz\n\n## License\n\nm1n1 is licensed under the MIT license, as included in the [LICENSE](LICENSE) file.\n\n* Copyright The Asahi Linux Contributors\n\nPlease see the Git history for authorship information.\n\nPortions of m1n1 are based on mini:\n\n* Copyright (C) 2008-2010 Hector Martin \"marcan\" <marcan@marcan.st>\n* Copyright (C) 2008-2010 Sven Peter <sven@svenpeter.dev>\n* Copyright (C) 2008-2010 Andre Heider <a.heider@gmail.com>\n\nm1n1 embeds libfdt, which is dual [BSD](3rdparty_licenses/LICENSE.BSD-2.libfdt) and\n[GPL-2](3rdparty_licenses/LICENSE.GPL-2) licensed and copyright:\n\n* Copyright (C) 2014 David Gibson <david@gibson.dropbear.id.au>\n* Copyright (C) 2018 embedded brains GmbH\n* Copyright (C) 2006-2012 David Gibson, IBM Corporation.\n* Copyright (C) 2012 David Gibson, IBM Corporation.\n* Copyright 2012 Kim Phillips, Freescale Semiconductor.\n* Copyright (C) 2016 Free Electrons\n* Copyright (C) 2016 NextThing Co.\n\nThe ADT code in mini is also based on libfdt and subject to the same license.\n\nm1n1 embeds [minlzma](https://github.com/ionescu007/minlzma), which is\n[MIT](3rdparty_licenses/LICENSE.minlzma) licensed and copyright:\n\n* Copyright (c) 2020 Alex Ionescu\n\nm1n1 embeds a slightly modified version of [tinf](https://github.com/jibsen/tinf), which is\n[ZLIB](3rdparty_licenses/LICENSE.tinf) licensed and copyright:\n\n* Copyright (c) 2003-2019 Joergen Ibsen\n\nm1n1 embeds portions taken from\n[arm-trusted-firmware](https://github.com/ARM-software/arm-trusted-firmware), which is\n[BSD](3rdparty_licenses/LICENSE.BSD-3.arm) licensed and copyright:\n\n* Copyright (c) 2013-2020, ARM Limited and Contributors. All rights reserved.\n\nm1n1 embeds [Doug Lea's malloc](ftp://gee.cs.oswego.edu/pub/misc/malloc.c) (dlmalloc), which is in\nthe public domain ([CC0](3rdparty_licenses/LICENSE.CC0)).\n\nm1n1 embeds portions of [PDCLib](https://github.com/DevSolar/pdclib), which is in the public\ndomain ([CC0](3rdparty_licenses/LICENSE.CC0)).\n\nm1n1 embeds the [Source Code Pro](https://github.com/adobe-fonts/source-code-pro) font, which is\nlicensed under the [OFL-1.1](3rdparty_licenses/LICENSE.OFL-1.1) license and copyright:\n\n* Copyright 2010-2019 Adobe (http://www.adobe.com/), with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark of Adobe in the United States and/or other countries.\n* This Font Software is licensed under the SIL Open Font License, Version 1.1.\n\nm1n1 embeds portions of the [dwc3 usb linux driver](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/usb/dwc3/core.h?id=7bc5a6ba369217e0137833f5955cf0b0f08b0712), which was [BSD-or-GPLv2 dual-licensed](3rdparty_licenses/LICENSE.BSD-3.dwc3) and copyright\n* Copyright (C) 2010-2011 Texas Instruments Incorporated - http://www.ti.com\n\nm1n1 embeds portions of [musl-libc](https://musl.libc.org/)'s floating point library, which are MIT licensed and copyright\n* Copyright (c) 2017-2018, Arm Limited.\n\nm1n1 embeds some rust crates. Licenses can be found in the vendor directory for every crate.\n"
        },
        {
          "name": "artwork",
          "type": "commit",
          "content": null
        },
        {
          "name": "config.h",
          "type": "blob",
          "size": 0.7734375,
          "content": "/* SPDX-License-Identifier: MIT */\n\n#ifndef CONFIG_H\n#define CONFIG_H\n\n// Enable framebuffer console\n#define USE_FB\n// Disable framebuffer console unless verbose boot is enabled\n//#define FB_SILENT_MODE\n// Initialize USB early and break into proxy if device is opened within this time (sec)\n//#define EARLY_PROXY_TIMEOUT 5\n\n// Minimal build for bring-up\n//#define BRINGUP\n// Disable display configuration / bringup on desktop devices\n//#define NO_DISPLAY\n\n// Print RTKit logs to the console\n//#define RTKIT_SYSLOG\n\n// Target for device-specific debug builds\n//#define TARGET T8103\n// Some devices like Apple TV HD use other uarts for debug console\n//#define TARGET_BOARD 0x34\n\n#ifdef RELEASE\n# define FB_SILENT_MODE\n# ifdef CHAINLOADING\n#  define EARLY_PROXY_TIMEOUT 5\n# endif\n#endif\n\n#endif\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.05859375,
          "content": "services:\n  m1n1:\n    build: .\n    volumes:\n      - .:/m1n1\n"
        },
        {
          "name": "font",
          "type": "tree",
          "content": null
        },
        {
          "name": "m1n1-raw.ld",
          "type": "blob",
          "size": 4.0234375,
          "content": "ENTRY(_start)\n\n_stack_size = 0x20000;\n_stack_size_el3 = 0x8000;\n\n/* We are actually relocatable */\n. = 0;\n\nPHDRS\n{\n  hdr PT_LOAD;\n  text PT_LOAD;\n  rodata PT_LOAD;\n  data PT_LOAD;\n}\n\nSECTIONS {\n    _base = .;\n\n    _text_start = .;\n    .init : ALIGN(0x4000) {\n        *(.init)\n        *(.init.*)\n    } :text\n    .text : ALIGN(0x4000) {\n        *(.text)\n        *(.text.*)\n        . = ALIGN(8);\n        *(.got.plt)\n        . = ALIGN(0x4000);\n    } :text\n    _text_size = . - _text_start;\n    .rodata : ALIGN(0x4000) {\n        *(.rodata)\n        *(.rodata.*)\n        . = ALIGN(8);\n    } :rodata\n    .rela.dyn : {\n        _rela_start = .;\n        *(.rela)\n        *(.rela.text)\n        *(.rela.got)\n        *(.rela.plt)\n        *(.rela.bss)\n        *(.rela.ifunc)\n        *(.rela.text.*)\n        *(.rela.data)\n        *(.rela.data.*)\n        *(.rela.rodata)\n        *(.rela.rodata*)\n        *(.rela.dyn)\n        _rela_end = .;\n        . = ALIGN(0x4000);\n    } :rodata\n    _rodata_end = .;\n    _data_start = .;\n    .data : ALIGN(0x4000) {\n        *(.data)\n        *(.data.*)\n        . = ALIGN(8);\n        _got_start = .;\n        *(.got)\n        _got_end = .;\n        . = ALIGN(0x4000);\n        _file_end = .;\n    } :data\n    .bss : ALIGN(0x4000) {\n        _bss_start = .;\n        *(.bss)\n        *(.bss.*)\n        *(.dynbss)\n        *(COMMON)\n        _bss_end = .;\n    } : data\n    .stack_el3 : ALIGN(0x4000) {\n        PROVIDE(_stack_top_el3 = .);\n        . += _stack_size_el3 - 8;\n        QUAD(0x5176694b43415453);\n        PROVIDE(_stack_bot_el3 = .);\n    }\n    .stack : ALIGN(0x4000) {\n        PROVIDE(_stack_top = .);\n        . += _stack_size - 8;\n        QUAD(0x544f424b43415453);\n        PROVIDE(_stack_bot = .);\n    } :data\n    ASSERT(ALIGN(0x4000) == ., \"Stack size is not aligned!\")\n    _data_size = . - _data_start;\n    _end = .;\n    _payload_start = .;\n\n    .symtab 0 : { *(.symtab) }\n    .strtab 0 : { *(.strtab) }\n    .shstrtab 0 : { *(.shstrtab) }\n\n    /DISCARD/ : {\n        *(.discard)\n        *(.discard.*)\n        *(.interp .dynamic)\n        *(.dynsym .dynstr .hash .gnu.hash)\n        *(.eh_frame)\n        *(.gnu.version*)\n        *(.note*)\n        *(.comment*)\n    }\n\n    .empty (NOLOAD) : {\n        *(.plt) *(.plt.*) *(.iplt) *(.igot)\n        *(.data.rel.ro)\n    }\n    ASSERT(SIZEOF(.empty) == 0, \"Unexpected sections detected!\")\n\n    .got.plt (NOLOAD) : {\n        *(.got.plt)\n    }\n    ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0x18, \"Unexpected GOT PLT detected!\")\n\n    .stab          0 : { *(.stab) }\n    .stabstr       0 : { *(.stabstr) }\n    .stab.excl     0 : { *(.stab.excl) }\n    .stab.exclstr  0 : { *(.stab.exclstr) }\n    .stab.index    0 : { *(.stab.index) }\n    .stab.indexstr 0 : { *(.stab.indexstr) }\n    .comment       0 : { *(.comment) }\n    .debug          0 : { *(.debug) }\n    .line           0 : { *(.line) }\n    .debug_srcinfo  0 : { *(.debug_srcinfo) }\n    .debug_sfnames  0 : { *(.debug_sfnames) }\n    .debug_aranges  0 : { *(.debug_aranges) }\n    .debug_pubnames 0 : { *(.debug_pubnames) }\n    .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }\n    .debug_abbrev   0 : { *(.debug_abbrev) }\n    .debug_line     0 : { *(.debug_line) }\n    .debug_frame    0 : { *(.debug_frame) }\n    .debug_str      0 : { *(.debug_str) }\n    .debug_loc      0 : { *(.debug_loc) }\n    .debug_macinfo  0 : { *(.debug_macinfo) }\n    .debug_weaknames 0 : { *(.debug_weaknames) }\n    .debug_funcnames 0 : { *(.debug_funcnames) }\n    .debug_typenames 0 : { *(.debug_typenames) }\n    .debug_varnames  0 : { *(.debug_varnames) }\n    .debug_pubtypes 0 : { *(.debug_pubtypes) }\n    .debug_ranges   0 : { *(.debug_ranges) }\n    .debug_types    0 : { *(.debug_types) }\n    .debug_addr     0 : { *(.debug_addr) }\n    .debug_line_str 0 : { *(.debug_line_str) }\n    .debug_loclists 0 : { *(.debug_loclists) }\n    .debug_macro    0 : { *(.debug_macro) }\n    .debug_names    0 : { *(.debug_names) }\n    .debug_rnglists 0 : { *(.debug_rnglists) }\n    .debug_str_offsets 0 : { *(.debug_str_offsets) }\n    .debug_sup      0 : { *(.debug_sup) }\n}\n\nPROT_READ = 0x01;\nPROT_WRITE = 0x02;\nPROT_EXECUTE = 0x04;\n"
        },
        {
          "name": "m1n1.ld",
          "type": "blob",
          "size": 7.4541015625,
          "content": "ENTRY(_start)\n\n/* Fake virtual load address for the mach-o */\n_va_base = 0xFFFFFE0007004000;\n\n_stack_size = 0x20000;\n_stack_size_el3 = 0x8000;\n\n_max_payload_size = 64*1024*1024;\n\n/* We are actually relocatable */\n. = 0;\n\nPHDRS\n{\n  hdr PT_LOAD;\n  text PT_LOAD;\n  rodata PT_LOAD;\n  data PT_LOAD;\n}\n\nSECTIONS {\n    _base = .;\n\n    .header : {\n        _mach_header = .;\n        /* mach-o header */\n        LONG(0xfeedfacf); /* magic */\n        LONG(0x100000c); /* cputype */\n        LONG(0x02); /* cputype */\n        LONG(0x0c); /* filetype */\n        LONG(6); /* ncmds */\n        LONG(_cmd_end - _cmd_start); /* sizeofcmds */\n        LONG(4); /* flags */\n        LONG(0); /* reserved */\n\n        _cmd_start = .;\n\n        /* unix_thread (entrypoint) */\n        LONG(0x5); /* type = UNIX_THREAD */\n        LONG(0x120); /* cmdsize */\n        LONG(6); /* ARM_THREAD64 */\n        LONG(0x44); /* length */\n        . += 32 * 8; /* useless registers */\n        QUAD(_start + _va_off) /* pc */\n        . += 8; /* useless registers */\n\n        ASSERT(. - _cmd_start == 0x120, \"Bad unix_thread structure\");\n\n        /* segment: mach-o structures */\n        LONG(0x19); /* type = SEGMENT_64 */\n        LONG(0x48); /* cmdsize */\n        LONG(0x5244485f); /* segname = \"_HDR\" */\n        . += 12;\n        QUAD(ADDR(.header) + _va_off); /* vmaddr */\n        QUAD(SIZEOF(.header)); /* vmsize */\n        QUAD(ADDR(.header) - _base); /* fileoff */\n        QUAD(SIZEOF(.header)); /* filesize */\n        LONG(PROT_READ); /* maxprot */\n        LONG(PROT_READ); /* initprot */\n        LONG(0); /* nsects */\n        LONG(0); /* flags */\n\n        /* segment: text */\n        LONG(0x19); /* type = SEGMENT_64 */\n        LONG(0x48); /* cmdsize */\n        LONG(0x54584554); /* segname = \"TEXT\" */\n        . += 12;\n        QUAD(ADDR(.init) + _va_off); /* vmaddr */\n        QUAD(_text_size); /* vmsize */\n        QUAD(ADDR(.init) - _base); /* fileoff */\n        QUAD(_text_size); /* filesize */\n        LONG(PROT_READ | PROT_EXECUTE); /* maxprot */\n        LONG(PROT_READ | PROT_EXECUTE); /* initprot */\n        LONG(0); /* nsects */\n        LONG(0); /* flags */\n\n        /* segment: rodata */\n        LONG(0x19); /* type = SEGMENT_64 */\n        LONG(0x48); /* cmdsize */\n        LONG(0x41444F52); /* segname = \"RODA\" */\n        . += 12;\n        QUAD(ADDR(.rodata) + _va_off); /* vmaddr */\n        QUAD(_rodata_end - ADDR(.rodata)); /* vmsize */\n        QUAD(ADDR(.rodata) - _base); /* fileoff */\n        QUAD(_rodata_end - ADDR(.rodata)); /* filesize */\n        LONG(PROT_READ); /* maxprot */\n        LONG(PROT_READ); /* initprot */\n        LONG(0); /* nsects */\n        LONG(0); /* flags */\n\n        /* segment: data */\n        LONG(0x19); /* type = SEGMENT_64 */\n        LONG(0x48); /* cmdsize */\n        LONG(0x41544144); /* segmname = \"DATA\" */\n        . += 12;\n        QUAD(ADDR(.data) + _va_off); /* vmaddr */\n        QUAD(_data_size); /* vmsize */\n        QUAD(ADDR(.data) - _base); /* fileoff */\n        QUAD(SIZEOF(.data)); /* filesize */\n        LONG(PROT_READ | PROT_WRITE); /* maxprot */\n        LONG(PROT_READ | PROT_WRITE); /* initprot */\n        LONG(0); /* nsects */\n        LONG(0); /* flags */\n\n        /* segment: payload */\n        LONG(0x19); /* type = SEGMENT_64 */\n        LONG(0x48); /* cmdsize */\n        LONG(0x444C5950); /* segmname = \"PYLD\" */\n        . += 12;\n        QUAD(_end + _va_off); /* vmaddr */\n        QUAD(_max_payload_size); /* vmsize */\n        QUAD(_file_end - _base); /* fileoff */\n        QUAD(_max_payload_size); /* filesize */\n        LONG(PROT_READ | PROT_WRITE); /* maxprot */\n        LONG(PROT_READ | PROT_WRITE); /* initprot */\n        LONG(0); /* nsects */\n        LONG(0); /* flags */\n\n        _cmd_end = .;\n\n        . = ALIGN(0x4000);\n        _hdr_end = .;\n    } :hdr\n    _text_start = .;\n    .init : ALIGN(0x4000) {\n        *(.init)\n        *(.init.*)\n    } :text\n    .text : ALIGN(0x4000) {\n        *(.text)\n        *(.text.*)\n        . = ALIGN(8);\n        *(.got.plt)\n        . = ALIGN(0x4000);\n    } :text\n    _text_size = . - _text_start;\n    .rodata : ALIGN(0x4000) {\n        *(.rodata)\n        *(.rodata.*)\n        . = ALIGN(8);\n    } :rodata\n    .rela.dyn : {\n        _rela_start = .;\n        *(.rela)\n        *(.rela.text)\n        *(.rela.got)\n        *(.rela.plt)\n        *(.rela.bss)\n        *(.rela.ifunc)\n        *(.rela.text.*)\n        *(.rela.data)\n        *(.rela.data.*)\n        *(.rela.rodata)\n        *(.rela.rodata*)\n        *(.rela.dyn)\n        _rela_end = .;\n        . = ALIGN(0x4000);\n    } :rodata\n    _rodata_end = .;\n    _data_start = .;\n    .data : ALIGN(0x4000) {\n        *(.data)\n        *(.data.*)\n        . = ALIGN(8);\n        _got_start = .;\n        *(.got)\n        _got_end = .;\n        . = ALIGN(0x4000);\n        _file_end = .;\n    } :data\n    .bss : ALIGN(0x4000) {\n        _bss_start = .;\n        *(.bss)\n        *(.bss.*)\n        *(.dynbss)\n        *(COMMON)\n        . = ALIGN(0x4000);\n        _bss_end = .;\n        PROVIDE(_stack_top_el3 = .);\n        . += _stack_size_el3;\n        PROVIDE(_stack_bot_el3 = .);\n        . = ALIGN(0x4000);\n        PROVIDE(_stack_top = .);\n        . += _stack_size;\n        PROVIDE(_stack_bot = .);\n        . = ALIGN(0x4000);\n    } :data\n    _data_size = . - _data_start;\n    _end = .;\n    _payload_start = .;\n    _payload_end = . + _max_payload_size;\n\n    .symtab 0 : { *(.symtab) }\n    .strtab 0 : { *(.strtab) }\n    .shstrtab 0 : { *(.shstrtab) }\n\n    /DISCARD/ : {\n        *(.discard)\n        *(.discard.*)\n        *(.interp .dynamic)\n        *(.dynsym .dynstr .hash .gnu.hash)\n        *(.eh_frame)\n        *(.gnu.version*)\n        *(.note*)\n        *(.comment*)\n    }\n\n    .empty (NOLOAD) : {\n        *(.plt) *(.plt.*) *(.iplt) *(.igot)\n        *(.data.rel.ro)\n    }\n    ASSERT(SIZEOF(.empty) == 0, \"Unexpected sections detected!\")\n\n    .got.plt (NOLOAD) : {\n        *(.got.plt)\n    }\n    ASSERT(SIZEOF(.got.plt) == 0 || SIZEOF(.got.plt) == 0x18, \"Unexpected GOT PLT detected!\")\n\n    .stab          0 : { *(.stab) }\n    .stabstr       0 : { *(.stabstr) }\n    .stab.excl     0 : { *(.stab.excl) }\n    .stab.exclstr  0 : { *(.stab.exclstr) }\n    .stab.index    0 : { *(.stab.index) }\n    .stab.indexstr 0 : { *(.stab.indexstr) }\n    .comment       0 : { *(.comment) }\n    .debug          0 : { *(.debug) }\n    .line           0 : { *(.line) }\n    .debug_srcinfo  0 : { *(.debug_srcinfo) }\n    .debug_sfnames  0 : { *(.debug_sfnames) }\n    .debug_aranges  0 : { *(.debug_aranges) }\n    .debug_pubnames 0 : { *(.debug_pubnames) }\n    .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }\n    .debug_abbrev   0 : { *(.debug_abbrev) }\n    .debug_line     0 : { *(.debug_line) }\n    .debug_frame    0 : { *(.debug_frame) }\n    .debug_str      0 : { *(.debug_str) }\n    .debug_loc      0 : { *(.debug_loc) }\n    .debug_macinfo  0 : { *(.debug_macinfo) }\n    .debug_weaknames 0 : { *(.debug_weaknames) }\n    .debug_funcnames 0 : { *(.debug_funcnames) }\n    .debug_typenames 0 : { *(.debug_typenames) }\n    .debug_varnames  0 : { *(.debug_varnames) }\n    .debug_pubtypes 0 : { *(.debug_pubtypes) }\n    .debug_ranges   0 : { *(.debug_ranges) }\n    .debug_types    0 : { *(.debug_types) }\n    .debug_addr     0 : { *(.debug_addr) }\n    .debug_line_str 0 : { *(.debug_line_str) }\n    .debug_loclists 0 : { *(.debug_loclists) }\n    .debug_macro    0 : { *(.debug_macro) }\n    .debug_names    0 : { *(.debug_names) }\n    .debug_rnglists 0 : { *(.debug_rnglists) }\n    .debug_str_offsets 0 : { *(.debug_str_offsets) }\n    .debug_sup      0 : { *(.debug_sup) }\n}\n\nPROT_READ = 0x01;\nPROT_WRITE = 0x02;\nPROT_EXECUTE = 0x04;\n\n_va_off = _va_base - _base;\n"
        },
        {
          "name": "proxyclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "sysinc",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "udev",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 0.4033203125,
          "content": "#!/bin/sh\ncd \"$(dirname \"$0\")\"\n\ndirbase=\"$(basename \"$(pwd)\")\"\n\nif [ -n \"$M1N1_VERSION_TAG\" ]; then\n    version=\"$M1N1_VERSION_TAG\"\nelif [ -e \".git\" ]; then\n    version=\"$(git describe --tags --always --dirty)\"\nelif [ \"$(echo \"${dirbase}\" | cut -c1-5)\" = \"m1n1-\" ]; then\n    version=$(echo \"${dirbase}\" | cut -c6-)\n    version=\"v${version##v}\"\nelse\n    version=\"unknown\"\nfi\n\necho \"#define BUILD_TAG \\\"$version\\\"\"\n"
        }
      ]
    }
  ]
}