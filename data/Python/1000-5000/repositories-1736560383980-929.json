{
  "metadata": {
    "timestamp": 1736560383980,
    "page": 929,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "linyqh/NarratoAI",
      "stars": 3276,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.25390625,
          "content": "# Exclude common Python files and directories\nvenv/\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n*.pyz\n*.pyw\n*.pyi\n*.egg-info/\n\n# Exclude development and local files\n.env\n.env.*\n*.log\n*.db\n\n# Exclude version control system files\n.git/\n.gitignore\n.svn/\n\nstorage/\nconfig.toml\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6767578125,
          "content": ".DS_Store\n/config.toml\n/storage/\n/.idea/\n/app/services/__pycache__\n/app/__pycache__/\n/app/config/__pycache__/\n/app/models/__pycache__/\n/app/utils/__pycache__/\n/*/__pycache__/*\n.vscode\n/**/.streamlit\n__pycache__\nlogs/\n\nnode_modules\n# VuePress 默认临时文件目录\n/sites/docs/.vuepress/.temp\n# VuePress 默认缓存目录\n/sites/docs/.vuepress/.cache\n# VuePress 默认构建生成的静态文件目录\n/sites/docs/.vuepress/dist\n# 模型目录\n/models/\n./models/*\nresource/scripts/*.json\nresource/videos/*.mp4\nresource/songs/*.mp3\nresource/songs/*.flac\nresource/fonts/*.ttc\nresource/fonts/*.ttf\nresource/fonts/*.otf\nresource/srt/*.srt\napp/models/faster-whisper-large-v2/*\napp/models/bert/*\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.357421875,
          "content": "# 构建阶段\nFROM python:3.10-slim-bullseye as builder\n\n# 设置工作目录\nWORKDIR /build\n\n# 安装构建依赖\nRUN apt-get update && apt-get install -y \\\n    git \\\n    git-lfs \\\n    && rm -rf /var/lib/apt/lists/*\n\n# 创建虚拟环境\nRUN python -m venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# 首先安装 PyTorch（因为它是最大的依赖）\nRUN pip install --no-cache-dir torch torchvision torchaudio\n\n# 然后安装其他依赖\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# 运行阶段\nFROM python:3.10-slim-bullseye\n\n# 设置工作目录\nWORKDIR /NarratoAI\n\n# 从builder阶段复制虚拟环境\nCOPY --from=builder /opt/venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\n# 安装运行时依赖\nRUN apt-get update && apt-get install -y \\\n    imagemagick \\\n    ffmpeg \\\n    wget \\\n    git-lfs \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && sed -i '/<policy domain=\"path\" rights=\"none\" pattern=\"@\\*\"/d' /etc/ImageMagick-6/policy.xml\n\n# 设置环境变量\nENV PYTHONPATH=\"/NarratoAI\" \\\n    PYTHONUNBUFFERED=1 \\\n    PYTHONDONTWRITEBYTECODE=1\n\n# 设置目录权限\nRUN chmod 777 /NarratoAI\n\n# 安装git lfs\nRUN git lfs install\n\n# 复制应用代码\nCOPY . .\n\n# 暴露端口\nEXPOSE 8501 8080\n\n# 使用脚本作为入口点\nCOPY docker-entrypoint.sh /usr/local/bin/\nRUN chmod +x /usr/local/bin/docker-entrypoint.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2024 linyq\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README-cn.md",
          "type": "blob",
          "size": 7.400390625,
          "content": "\n<div align=\"center\">\n<h1 align=\"center\" style=\"font-size: 2cm;\"> NarratoAI 😎📽️ </h1>\n<h3 align=\"center\">An all-in-one AI-powered tool for film commentary and automated video editing.🎬🎞️ </h3>\n\n\n<h3>📖 English | <a href=\"README.md\">简体中文</a> | <a href=\"README-ja.md\">日本語</a> </h3>\n<div align=\"center\">\n\n[//]: # (  <a href=\"https://trendshift.io/repositories/8731\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/8731\" alt=\"harry0703%2FNarratoAI | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>)\n</div>\n<br>\nNarratoAI is an automated video narration tool that provides an all-in-one solution for script writing, automated video editing, voice-over, and subtitle generation, powered by LLM to enhance efficient content creation.\n<br>\n\n[![madewithlove](https://img.shields.io/badge/made_with-%E2%9D%A4-red?style=for-the-badge&labelColor=orange)](https://github.com/linyqh/NarratoAI)\n[![GitHub license](https://img.shields.io/github/license/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/blob/main/LICENSE)\n[![GitHub issues](https://img.shields.io/github/issues/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/issues)\n[![GitHub stars](https://img.shields.io/github/stars/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/stargazers)\n\n<a href=\"https://github.com/linyqh/NarratoAI/wiki\" target=\"_blank\">💬 Join the open source community to get project updates and the latest news.</a>\n\n<h3>Home</h3>\n\n![](docs/index-en.png)\n\n<h3>Video Review Interface</h3>\n\n![](docs/check-en.png)\n\n</div>\n\n## Future Plans 🥳 \n- [x] Windows Integration Pack Release\n- [ ] Optimized the story generation process and improved the generation effect \n- [ ] Support local large model MiniCPM-V \n- [ ] Support local large model Qwen2-VL \n- [ ] ...\n\n## System Requirements 📦\n\n- Recommended minimum: CPU with 4 cores or more, 8GB RAM or more, GPU is not required\n- Windows 10 or MacOS 11.0 or above\n\n## Quick Start 🚀\n### 1. Apply for Google AI Studio Account\n1. Visit https://aistudio.google.com/app/prompts/new_chat to apply for an account.\n2. Click `Get API Key` to request an API Key.\n3. Enter the obtained API Key into the `gemini_api_key` setting in the `config.example.toml` file.\n\n### 2. Configure Proxy VPN\n> The method to configure VPN is not restricted, as long as you can access Google's network. Here, `clash` is used as an example.\n1. Note the port of the clash service, usually `http://127.0.0.1:7890`.\n2. If the port is not `7890`, modify the `VPN_PROXY_URL` in the `docker-compose.yml` file to your proxy address.\n   ```yaml\n   environment:\n     - \"VPN_PROXY_URL=http://host.docker.internal:7890\" # Change to your proxy port; host.docker.internal represents the IP of the physical machine.\n    ```\n\n3. (Optional) Or modify the `proxy` settings in the `config.example.toml` file.\n   ```toml\n   [proxy]\n    ### Use a proxy to access the Pexels API\n    ### Format: \"http://<username>:<password>@<proxy>:<port>\"\n    ### Example: \"http://user:pass@proxy:1234\"\n    ### Doc: https://requests.readthedocs.io/en/latest/user/advanced/#proxies\n\n    http = \"http://xx.xx.xx.xx:7890\"\n    https = \"http://xx.xx.xx.xx:7890\"\n   ```\n\n\n### 3. Get Started 📥 with the Modpack (for Windows users)\nNarratoAI Modpack v0.1.2 is released 🚀 \n\nHurry up and follow the WeChat public account [NarratoAI助手] and reply to the keyword [整合包] to get the latest download link! Give it a try! \n\nNote: \n- Currently only available for Windows, Mac version is in development, Linux version will be available in a future release.\n\n\n\n### 4. Get started 🐳 with docker (for Mac and Linux users)\n#### ① clone project, Start Docker\n```shell\ngit clone https://github.com/linyqh/NarratoAI.git\ncd NarratoAI\ndocker-compose up\n```\n#### ② Access the Web Interface\n\nOpen your browser and go to http://127.0.0.1:8501\n\n#### ③ Access the API Documentation\n\nOpen your browser and go to http://127.0.0.1:8080/docs or http://127.0.0.1:8080/redoc\n\n## Usage\n#### 1. Basic Configuration, Select Model, Enter API Key, and Choose Model\n> Currently, only the `Gemini` model is supported. Other modes will be added in future updates. Contributions are welcome via [PR](https://github.com/linyqh/NarratoAI/pulls) to join in the development 🎉🎉🎉\n<div align=\"center\">\n  <img src=\"docs/img001-en.png\" alt=\"001\" width=\"1000\"/>\n</div>\n\n#### 2. Select the Video for Narration and Click to Generate Video Script\n> A demo video is included in the platform. To use your own video, place the mp4 file in the `resource/videos` directory and refresh your browser.\n> Note: The filename can be anything, but it must not contain Chinese characters, special characters, spaces, backslashes, etc.\n<div align=\"center\">\n  <img src=\"docs/img002-en.png\" alt=\"002\" width=\"400\"/>\n</div>\n\n#### 3. Save the Script and Start Editing\n> After saving the script, refresh the browser, and the newly generated `.json` script file will appear in the script file dropdown. Select the json file and video to start editing.\n<div align=\"center\">\n  <img src=\"docs/img003-en.png\" alt=\"003\" width=\"400\"/>\n</div>\n\n#### 4. Review the Video; if there are segments that don't meet the rules, click to regenerate or manually edit them.\n<div align=\"center\">\n  <img src=\"docs/img004-en.png\" alt=\"003\" width=\"1000\"/>\n</div>\n\n#### 5. Configure Basic Video Parameters\n<div align=\"center\">\n  <img src=\"docs/img005-en.png\" alt=\"003\" width=\"700\"/>\n</div>\n\n#### 6. Start Generating\n<div align=\"center\">\n  <img src=\"docs/img006-en.png\" alt=\"003\" width=\"1000\"/>\n</div>\n\n#### 7. Video Generation Complete\n<div align=\"center\">\n  <img src=\"docs/img007-en.png\" alt=\"003\" width=\"1000\"/>\n</div>\n\n## Development 💻\n1. Install Dependencies\n```shell\nconda create -n narratoai python=3.10\nconda activate narratoai\ncd narratoai\npip install -r requirements.txt\n```\n2. Install ImageMagick\n###### Windows:\n\n- Download https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-38-Q16-x64-static.exe\n- Install the downloaded ImageMagick, ensuring you do not change the installation path\n- Update `imagemagick_path` in the `config.toml` file to your actual installation path (typically `C:\\Program Files\\ImageMagick-7.1.1-Q16\\magick.exe`)\n\n###### MacOS:\n\n```shell\nbrew install imagemagick\n````\n\n###### Ubuntu\n\n```shell\nsudo apt-get install imagemagick\n```\n\n###### CentOS\n\n```shell\nsudo yum install ImageMagick\n```\n\n3. initiate webui\n```shell\nstreamlit run ./webui/Main.py --browser.serverAddress=127.0.0.1 --server.enableCORS=True --browser.gatherUsageStats=False\n```\n4. Access http://127.0.0.1:8501\n\n## Feedback & Suggestions 📢\n\n### 👏 1. You can submit [issues](https://github.com/linyqh/NarratoAI/issues) or [pull requests](https://github.com/linyqh/NarratoAI/pulls) \n\n### 💬 2. [Join the open source community exchange group]((https://github.com/linyqh/NarratoAI/wiki))\n\n### 👉 3. [frequently asked questions](https://thread-marsupial-df8.notion.site/105866888dab80988650fa063b1df4eb)\n\n## Reference Projects 📚\n- https://github.com/FujiwaraChoki/MoneyPrinter\n- https://github.com/harry0703/MoneyPrinterTurbo\n\nThis project was refactored based on the above projects with the addition of video narration features. Thanks to the original authors for their open-source spirit 🥳🥳🥳 \n\n## License 📝\n\nClick to view the [`LICENSE`](LICENSE) file\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=linyqh/NarratoAI&type=Date)](https://star-history.com/#linyqh/NarratoAI&Date)\n"
        },
        {
          "name": "README-ja.md",
          "type": "blob",
          "size": 4.1748046875,
          "content": "<div align=\"center\">\n<h1 align=\"center\" style=\"font-size: 2cm;\"> NarratoAI 😎📽️ </h1>\n<h3 align=\"center\">一体型AI映画解説および自動ビデオ編集ツール🎬🎞️ </h3>\n\n<h3>📖 <a href=\"README-cn.md\">简体中文</a> | <a href=\"README.md\">English</a> | 日本語 </h3>\n<div align=\"center\">\n\n[//]: # (  <a href=\"https://trendshift.io/repositories/8731\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/8731\" alt=\"harry0703%2FNarratoAI | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>)\n</div>\n<br>\nNarratoAIは、LLMを活用してスクリプト作成、自動ビデオ編集、ナレーション、字幕生成の一体型ソリューションを提供する自動化ビデオナレーションツールです。\n<br>\n\n[![madewithlove](https://img.shields.io/badge/made_with-%E2%9D%A4-red?style=for-the-badge&labelColor=orange)](https://github.com/linyqh/NarratoAI)\n[![GitHub license](https://img.shields.io/github/license/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/blob/main/LICENSE)\n[![GitHub issues](https://img.shields.io/github/issues/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/issues)\n[![GitHub stars](https://img.shields.io/github/stars/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/stargazers)\n\n<a href=\"https://discord.gg/uVAJftcm\" target=\"_blank\">💬 Discordオープンソースコミュニティに参加して、プロジェクトの最新情報を入手しましょう。</a>\n\n<h2><a href=\"https://p9mf6rjv3c.feishu.cn/wiki/SP8swLLZki5WRWkhuFvc2CyInDg?from=from_copylink\" target=\"_blank\">🎉🎉🎉 公式ドキュメント 🎉🎉🎉</a> </h2>\n<h3>ホーム</h3>\n\n![](docs/index-zh.png)\n\n<h3>ビデオレビューインターフェース</h3>\n\n![](docs/check-zh.png)\n\n</div>\n\n## 最新情報\n- 2024.11.24 Discordコミュニティ開設：https://discord.gg/uVAJftcm\n- 2024.11.11 オープンソースコミュニティに移行、参加を歓迎します！ [公式コミュニティに参加](https://github.com/linyqh/NarratoAI/wiki)\n- 2024.11.10 公式ドキュメント公開、詳細は [公式ドキュメント](https://p9mf6rjv3c.feishu.cn/wiki/SP8swLLZki5WRWkhuFvc2CyInDg) を参照\n- 2024.11.10 新バージョンv0.3.5リリース；ビデオ編集プロセスの最適化\n\n## 今後の計画 🥳\n- [x] Windows統合パックリリース\n- [x] ストーリー生成プロセスの最適化、生成効果の向上\n- [x] バージョン0.3.5統合パックリリース\n- [ ] アリババQwen2-VL大規模モデルのビデオ理解サポート\n- [ ] 短編ドラマの解説サポート\n- [ ] ...\n\n## システム要件 📦\n\n- 推奨最低：CPU 4コア以上、メモリ8GB以上、GPUは必須ではありません\n- Windows 10またはMacOS 11.0以上\n\n## フィードバックと提案 📢\n\n👏 1. [issue](https://github.com/linyqh/NarratoAI/issues)または[pull request](https://github.com/linyqh/NarratoAI/pulls)を提出できます\n\n💬 2. [オープンソースコミュニティ交流グループに参加](https://github.com/linyqh/NarratoAI/wiki)\n\n📷 3. 公式アカウント【NarratoAI助手】をフォローして最新情報を入手\n\n## 参考プロジェクト 📚\n- https://github.com/FujiwaraChoki/MoneyPrinter\n- https://github.com/harry0703/MoneyPrinterTurbo\n\nこのプロジェクトは上記のプロジェクトを基にリファクタリングされ、映画解説機能が追加されました。オリジナルの作者に感謝します 🥳🥳🥳 \n\n## 作者にコーヒーを一杯おごる ☕️\n<div style=\"display: flex; justify-content: space-between;\">\n  <img src=\"https://github.com/user-attachments/assets/5038ccfb-addf-4db1-9966-99415989fd0c\" alt=\"Image 1\" style=\"width: 350px; height: 350px; margin: auto;\"/>\n  <img src=\"https://github.com/user-attachments/assets/07d4fd58-02f0-425c-8b59-2ab94b4f09f8\" alt=\"Image 2\" style=\"width: 350px; height: 350px; margin: auto;\"/>\n</div>\n\n## ライセンス 📝\n\n[`LICENSE`](LICENSE) ファイルをクリックして表示\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=linyqh/NarratoAI&type=Date)](https://star-history.com/#linyqh/NarratoAI&Date)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.33984375,
          "content": "\n<div align=\"center\">\n<h1 align=\"center\" style=\"font-size: 2cm;\"> NarratoAI 😎📽️ </h1>\n<h3 align=\"center\">一站式 AI 影视解说+自动化剪辑工具🎬🎞️ </h3>\n\n\n<h3>📖 <a href=\"README-cn.md\">English</a> | 简体中文 | <a href=\"README-ja.md\">日本語</a> </h3>\n<div align=\"center\">\n\n[//]: # (  <a href=\"https://trendshift.io/repositories/8731\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/8731\" alt=\"harry0703%2FNarratoAI | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>)\n</div>\n<br>\nNarratoAI 是一个自动化影视解说工具，基于LLM实现文案撰写、自动化视频剪辑、配音和字幕生成的一站式流程，助力高效内容创作。\n<br>\n\n[![madewithlove](https://img.shields.io/badge/made_with-%E2%9D%A4-red?style=for-the-badge&labelColor=orange)](https://github.com/linyqh/NarratoAI)\n[![GitHub license](https://img.shields.io/github/license/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/blob/main/LICENSE)\n[![GitHub issues](https://img.shields.io/github/issues/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/issues)\n[![GitHub stars](https://img.shields.io/github/stars/linyqh/NarratoAI?style=for-the-badge)](https://github.com/linyqh/NarratoAI/stargazers)\n\n<a href=\"https://discord.com/invite/V2pbAqqQNb\" target=\"_blank\">💬 加入 discord 开源社区，获取项目动态和最新资讯。</a>\n\n<h2><a href=\"https://p9mf6rjv3c.feishu.cn/wiki/SP8swLLZki5WRWkhuFvc2CyInDg?from=from_copylink\" target=\"_blank\">🎉🎉🎉 官方文档 🎉🎉🎉</a> </h2>\n<h3>首页</h3>\n\n![](docs/index-zh.png)\n\n<h3>视频审查界面</h3>\n\n![](docs/check-zh.png)\n\n</div>\n\n## 最新资讯\n- 2024.12.16 发布新版本 0.3.9， 支持阿里 Qwen2-VL 模型理解视频；支持短剧混剪\n- 2024.11.24 开通 discord 社群：https://discord.com/invite/V2pbAqqQNb\n- 2024.11.11 迁移开源社群，欢迎加入！ [加入官方社群](https://github.com/linyqh/NarratoAI/wiki)\n- 2024.11.10 发布官方文档，详情参见 [官方文档](https://p9mf6rjv3c.feishu.cn/wiki/SP8swLLZki5WRWkhuFvc2CyInDg)\n- 2024.11.10 发布新版本 v0.3.5；优化视频剪辑流程，\n\n## 公告 📢\n_**注意⚠️：近期在 x (推特) 上发现有人冒充作者在 pump.fun 平台上发行代币！ 这是骗子！！！ 不要被割了韭菜\n！！！目前 NarratoAI 没有在 x(推特) 上做任何官方宣传，注意甄别**_\n\n下面是此人 x(推特) 首页截图\n\n<img src=\"https://github.com/user-attachments/assets/c492ab99-52cd-4ba2-8695-1bd2073ecf12\" alt=\"Screenshot_20250109_114131_Samsung Internet\" style=\"width:30%; height:auto;\">\n\n## 未来计划 🥳\n- [x] windows 整合包发布\n- [x] 优化剧情生成流程，提升生成效果\n- [x] 发布 0.3.5 整合包\n- [x] 支持阿里 Qwen2-VL 大模型理解视频\n- [x] 支持短剧混剪\n  - [x] 一键合并素材\n  - [x] 一键转录\n  - [x] 一键清理缓存\n- [ ] 支持导出剪映草稿\n- [ ] 支持短剧解说\n- [ ] 主角人脸匹配\n- [ ] 支持根据口播，文案，视频素材自动匹配\n- [ ] ...\n\n## 配置要求 📦\n\n- 建议最低 CPU 4核或以上，内存 8G 或以上，显卡非必须\n- Windows 10 或 MacOS 11.0 以上系统\n\n## 反馈建议 📢\n\n👏 1. 可以提交 [issue](https://github.com/linyqh/NarratoAI/issues)或者 [pull request](https://github.com/linyqh/NarratoAI/pulls)\n\n💬 2. [加入开源社区交流群](https://github.com/linyqh/NarratoAI/wiki)\n\n📷 3. 关注公众号【NarratoAI助手】，掌握最新资讯\n\n## 参考项目 📚\n- https://github.com/FujiwaraChoki/MoneyPrinter\n- https://github.com/harry0703/MoneyPrinterTurbo\n\n该项目基于以上项目重构而来，增加了影视解说功能，感谢大佬的开源精神 🥳🥳🥳 \n\n## 请作者喝一杯咖啡 ☕️\n<div style=\"display: flex; justify-content: space-between;\">\n  <img src=\"https://github.com/user-attachments/assets/5038ccfb-addf-4db1-9966-99415989fd0c\" alt=\"Image 1\" style=\"width: 350px; height: 350px; margin: auto;\"/>\n  <img src=\"https://github.com/user-attachments/assets/07d4fd58-02f0-425c-8b59-2ab94b4f09f8\" alt=\"Image 2\" style=\"width: 350px; height: 350px; margin: auto;\"/>\n</div>\n\n## 许可证 📝\n\n点击查看 [`LICENSE`](LICENSE) 文件\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=linyqh/NarratoAI&type=Date)](https://star-history.com/#linyqh/NarratoAI&Date)\n\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog.py",
          "type": "blob",
          "size": 0.4248046875,
          "content": "from git_changelog.cli import build_and_render\n\n# 运行这段脚本自动生成CHANGELOG.md文件\n\nbuild_and_render(\n    repository=\".\",\n    output=\"CHANGELOG.md\",\n    convention=\"angular\",\n    provider=\"github\",\n    template=\"keepachangelog\",\n    parse_trailers=True,\n    parse_refs=False,\n    sections=[\"build\", \"deps\", \"feat\", \"fix\", \"refactor\"],\n    versioning=\"pep440\",\n    bump=\"1.1.2\",  # 指定bump版本\n    in_place=True,\n)\n"
        },
        {
          "name": "config.example.toml",
          "type": "blob",
          "size": 8.1513671875,
          "content": "[app]\n    project_version=\"0.3.9\"\n    # 支持视频理解的大模型提供商\n    #   gemini\n    #   NarratoAPI\n    #   qwen2-vl (待增加)\n    vision_llm_provider=\"gemini\"\n    vision_analysis_prompt = \"你是资深视频内容分析专家，擅长分析视频画面信息，分析下面视频画面内容，只输出客观的画面描述不要给任何总结或评价\"\n\n    ########## Vision Gemini API Key\n    vision_gemini_api_key = \"\"\n    vision_gemini_model_name = \"gemini-1.5-flash\"\n\n    ########## Vision Qwen API Key\n    vision_qwenvl_api_key = \"\"\n    vision_qwenvl_model_name = \"qwen-vl-max-latest\"\n    vision_qwenvl_base_url = \"https://dashscope.aliyuncs.com/compatible-mode/v1\"\n\n    ########### Vision NarratoAPI Key\n    narrato_api_key = \"0N0iEjU77aTqPW4d9YHCmTW2mPrfgWjDmaWAz1lTVTM\"\n    narrato_api_url = \"https://narratoinsight.scsmtech.cn/api/v1\"\n    narrato_vision_model = \"gemini-1.5-flash\"\n    narrato_vision_key = \"\"\n    narrato_llm_model = \"gpt-4o\"\n    narrato_llm_key = \"\"\n\n    # 用于生成文案的大模型支持的提供商 (Supported providers):\n    #   openai (默认)\n    #   moonshot (月之暗面)\n    #   oneapi\n    #   g4f\n    #   azure\n    #   qwen (通义千问)\n    #   gemini\n    text_llm_provider=\"openai\"\n\n    ########## OpenAI API Key\n    # Get your API key at https://platform.openai.com/api-keys\n    text_openai_api_key = \"\"\n    text_openai_base_url = \"https://api.openai.com/v1\"\n    text_openai_model_name = \"gpt-4o-mini\"\n\n    ########## Moonshot API Key\n    # Visit https://platform.moonshot.cn/console/api-keys to get your API key.\n    text_moonshot_api_key=\"\"\n    text_moonshot_base_url = \"https://api.moonshot.cn/v1\"\n    text_moonshot_model_name = \"moonshot-v1-8k\"\n\n    ########## G4F\n    # Visit https://github.com/xtekky/gpt4free to get more details\n    # Supported model list: https://github.com/xtekky/gpt4free/blob/main/g4f/models.py\n    text_g4f_model_name = \"gpt-3.5-turbo\"\n\n    ########## Azure API Key\n    # Visit https://learn.microsoft.com/zh-cn/azure/ai-services/openai/ to get more details\n    # API documentation: https://learn.microsoft.com/zh-cn/azure/ai-services/openai/reference\n    text_azure_api_key = \"\"\n    text_azure_base_url=\"\"\n    text_azure_model_name=\"gpt-35-turbo\" # replace with your model deployment name\n    text_azure_api_version = \"2024-02-15-preview\"\n\n    ########## Gemini API Key\n    text_gemini_api_key=\"\"\n    text_gemini_model_name = \"gemini-1.5-flash\"\n\n    ########## Qwen API Key\n    # Visit https://dashscope.console.aliyun.com/apiKey to get your API key\n    # Visit below links to get more details\n    # https://tongyi.aliyun.com/qianwen/\n    # https://help.aliyun.com/zh/dashscope/developer-reference/model-introduction\n    text_qwen_api_key = \"\"\n    text_qwen_model_name = \"qwen-plus-1127\"\n    text_qwen_base_url = \"https://dashscope.aliyuncs.com/compatible-mode/v1\"\n\n    ########## DeepSeek API Key\n    # Visit https://platform.deepseek.com/api_keys to get your API key\n    text_deepseek_api_key = \"\"\n    text_deepseek_base_url = \"https://api.deepseek.com\"\n    text_deepseek_model_name = \"deepseek-chat\"\n\n    # 字幕提供商、可选，支持 whisper 和 faster-whisper-large-v2\"whisper\"\n    # 默认为 faster-whisper-large-v2 模型地址：https://huggingface.co/guillaumekln/faster-whisper-large-v2\n    subtitle_provider = \"faster-whisper-large-v2\"\n    subtitle_enabled = true\n\n    # ImageMagick\n    # 安装后，将自动检测到 ImageMagick，Windows 除外！\n    # 例如，在 Windows 上 \"C:\\Program Files (x86)\\ImageMagick-7.1.1-Q16-HDRI\\magick.exe\"\n    # 下载位置 https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-29-Q16-x64-static.exe\n    # imagemagick_path = \"C:\\\\Program Files (x86)\\\\ImageMagick-7.1.1-Q16\\\\magick.exe\"\n\n    # FFMPEG\n    #\n    # 通常情况下，ffmpeg 会被自动下载，并且会被自动检测到。\n    # 但是如果你的环境有问题，无法自动下载，可能会遇到如下错误：\n    #   RuntimeError: No ffmpeg exe could be found.\n    #   Install ffmpeg on your system, or set the IMAGEIO_FFMPEG_EXE environment variable.\n    # 此时你可以手动下载 ffmpeg 并设置 ffmpeg_path，下载地址：https://www.gyan.dev/ffmpeg/builds/\n\n    # ffmpeg_path = \"C:\\\\Users\\\\harry\\\\Downloads\\\\ffmpeg.exe\"\n    #########################################################################################\n\n    # 当视频生成成功后，API服务提供的视频下载接入点，默认为当前服务的地址和监听端口\n    # 比如 http://127.0.0.1:8080/tasks/6357f542-a4e1-46a1-b4c9-bf3bd0df5285/final-1.mp4\n    # 如果你需要使用域名对外提供服务（一般会用nginx做代理），则可以设置为你的域名\n    # 比如 https://xxxx.com/tasks/6357f542-a4e1-46a1-b4c9-bf3bd0df5285/final-1.mp4\n    # endpoint=\"https://xxxx.com\"\n\n    # When the video is successfully generated, the API service provides a download endpoint for the video, defaulting to the service's current address and listening port.\n    # For example, http://127.0.0.1:8080/tasks/6357f542-a4e1-46a1-b4c9-bf3bd0df5285/final-1.mp4\n    # If you need to provide the service externally using a domain name (usually done with nginx as a proxy), you can set it to your domain name.\n    # For example, https://xxxx.com/tasks/6357f542-a4e1-46a1-b4c9-bf3bd0df5285/final-1.mp4\n    # endpoint=\"https://xxxx.com\"\n    endpoint=\"\"\n\n\n    # Video material storage location\n    # material_directory = \"\"                    # Indicates that video materials will be downloaded to the default folder, the default folder is ./storage/cache_videos under the current project\n    # material_directory = \"/user/harry/videos\"  # Indicates that video materials will be downloaded to a specified folder\n    # material_directory = \"task\"                # Indicates that video materials will be downloaded to the current task's folder, this method does not allow sharing of already downloaded video materials\n\n    # 视频素材存放位置\n    # material_directory = \"\"                    #表示将视频素材下载到默认的文件夹，默认文件夹为当前项目下的 ./storage/cache_videos\n    # material_directory = \"/user/harry/videos\"  #表示将视频素材下载到指定的文件夹中\n    # material_directory = \"task\"                #表示将视频素材下载到当前任务的文件夹中，这种方式无法共享已经下载的视频素材\n\n    material_directory = \"\"\n\n    # 用于任务的状态管理\n    enable_redis = false\n    redis_host = \"localhost\"\n    redis_port = 6379\n    redis_db = 0\n    redis_password = \"\"\n\n    # 文生视频时的最大并发任务数\n    max_concurrent_tasks = 5\n\n    # webui界面是否显示配置项\n    hide_config = false\n\n\n[whisper]\n    # Only effective when subtitle_provider is \"whisper\"\n\n    # Run on GPU with FP16\n    # model = WhisperModel(model_size, device=\"cuda\", compute_type=\"float16\")\n\n    # Run on GPU with INT8\n    # model = WhisperModel(model_size, device=\"cuda\", compute_type=\"int8_float16\")\n\n    # Run on CPU with INT8\n    # model = WhisperModel(model_size, device=\"cpu\", compute_type=\"int8\")\n\n    # recommended model_size: \"large-v3\"\n    model_size=\"faster-whisper-large-v2\"\n    # 如果要使用 GPU，请设置 device=“cuda”\n    device=\"CPU\"\n    compute_type=\"int8\"\n\n\n[proxy]\n    ### Use a proxy to access the Pexels API\n    ### Format: \"http://<username>:<password>@<proxy>:<port>\"\n    ### Example: \"http://user:pass@proxy:1234\"\n    ### Doc: https://requests.readthedocs.io/en/latest/user/advanced/#proxies\n\n    http = \"http://127.0.0.1:7890\"\n    https = \"http://127.0.0.1:7890\"\n\n[azure]\n    # Azure Speech API Key\n    # Get your API key at https://portal.azure.com/#view/Microsoft_Azure_ProjectOxford/CognitiveServicesHub/~/SpeechServices\n    speech_key=\"\"\n    speech_region=\"\"\n\n[frames]\n    skip_seconds = 0\n    # threshold（差异阈值）用于判断两个连续帧之间是否发生了场景切换\n    # 较小的阈值（如 20）：更敏感，能捕捉到细微的场景变化，但可能会误判，关键帧图片更多\n    # 较大的阈值（如 40）：更保守，只捕捉明显的场景切换，但可能会漏掉渐变场景，关键帧图片更少\n    # 默认值 30：在实践中是一个比较平衡的选择\n    threshold = 30\n    version = \"v2\"\n    # 大模型单次处理的关键帧数量\n    vision_batch_size = 5\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.7216796875,
          "content": "x-common: &common\n  build:\n    context: .\n    dockerfile: Dockerfile\n  image: linyq1/narratoai:latest\n  volumes:\n    - ./:/NarratoAI\n  environment:\n    - VPN_PROXY_URL=http://host.docker.internal:7890\n    - PYTHONUNBUFFERED=1\n    - PYTHONMALLOC=malloc\n    - OPENCV_OPENCL_RUNTIME=disabled\n    - OPENCV_CPU_DISABLE=0\n  restart: always\n  mem_limit: 4g\n  mem_reservation: 2g\n  memswap_limit: 6g\n  cpus: 2.0\n  cpu_shares: 1024\n\nservices:\n  webui:\n    <<: *common\n    container_name: webui\n    ports:\n      - \"8501:8501\"\n    command: [\"webui\"]\n    logging:\n      driver: \"json-file\"\n      options:\n        max-size: \"200m\"\n        max-file: \"3\"\n    tmpfs:\n      - /tmp:size=1G\n    ulimits:\n      nofile:\n        soft: 65536\n        hard: 65536\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 0.189453125,
          "content": "#!/bin/bash\nset -e\n\nif [ \"$1\" = \"webui\" ]; then\n    exec streamlit run webui.py --browser.serverAddress=127.0.0.1 --server.enableCORS=True --browser.gatherUsageStats=False\nelse\n    exec \"$@\"\nfi "
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 0.5009765625,
          "content": "import os\nimport uvicorn\nfrom loguru import logger\n\nfrom app.config import config\n\nif __name__ == \"__main__\":\n    logger.info(\n        \"start server, docs: http://127.0.0.1:\" + str(config.listen_port) + \"/docs\"\n    )\n    os.environ[\"HTTP_PROXY\"] = config.proxy.get(\"http\")\n    os.environ[\"HTTPS_PROXY\"] = config.proxy.get(\"https\")\n    uvicorn.run(\n        app=\"app.asgi:app\",\n        host=config.listen_host,\n        port=config.listen_port,\n        reload=config.reload_debug,\n        log_level=\"warning\",\n    )\n"
        },
        {
          "name": "release-notes.md",
          "type": "blob",
          "size": 1.166015625,
          "content": "# Release Notes\n\n## Latest Changes\n\n* Dev-0.3.9. PR [#73](https://github.com/linyqh/NarratoAI/pull/73) by [@linyqh](https://github.com/linyqh).\n* 0.3.9 版本发布. PR [#71](https://github.com/linyqh/NarratoAI/pull/71) by [@linyqh](https://github.com/linyqh).\n* docs: add Japanese README. PR [#66](https://github.com/linyqh/NarratoAI/pull/66) by [@eltociear](https://github.com/eltociear).\n* docs: 测试 release 2. PR [#62](https://github.com/linyqh/NarratoAI/pull/62) by [@linyqh](https://github.com/linyqh).\n* docs: 测试 release. PR [#61](https://github.com/linyqh/NarratoAI/pull/61) by [@linyqh](https://github.com/linyqh).\n* docs: 测试commit. PR [#60](https://github.com/linyqh/NarratoAI/pull/60) by [@linyqh](https://github.com/linyqh).\n* Dev. PR [#59](https://github.com/linyqh/NarratoAI/pull/59) by [@linyqh](https://github.com/linyqh).\n* 0.2.0新版预发布. PR [#37](https://github.com/linyqh/NarratoAI/pull/37) by [@linyqh](https://github.com/linyqh).\n* v0.3.6. PR [#58](https://github.com/linyqh/NarratoAI/pull/58) by [@linyqh](https://github.com/linyqh).\n* 0.3.4 修改各种bug. PR [#49](https://github.com/linyqh/NarratoAI/pull/49) by [@linyqh](https://github.com/linyqh).\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.7998046875,
          "content": "requests~=2.31.0\nmoviepy==2.0.0.dev2\nfaster-whisper~=1.0.1\nuvicorn~=0.27.1\nfastapi~=0.115.4\ntomli~=2.0.1\nstreamlit~=1.40.0\nloguru~=0.7.2\naiohttp~=3.10.10\nurllib3~=2.2.1\npydantic~=2.6.3\ng4f~=0.3.0.4\ndashscope~=1.15.0\ngoogle.generativeai>=0.8.3\npython-multipart~=0.0.9\nredis==5.0.3\nopencv-python~=4.10.0.84\n# for azure speech\n# https://techcommunity.microsoft.com/t5/ai-azure-ai-services-blog/9-more-realistic-ai-voices-for-conversations-now-generally/ba-p/4099471\nazure-cognitiveservices-speech~=1.37.0\ngit-changelog~=2.5.2\nwatchdog==5.0.2\npydub==0.25.1\npsutil>=5.9.0\nopencv-python~=4.10.0.84\nscikit-learn~=1.5.2\ngoogle-generativeai~=0.8.3\npillow==10.3.0\npython-dotenv~=1.0.1\nopenai~=1.53.0\ntqdm>=4.66.6\ntenacity>=9.0.0\ntiktoken==0.8.0\nyt-dlp==2024.11.18\npysrt==1.1.2\nhttpx==0.27.2\ntransformers==4.47.0\nedge-tts==6.1.19\n"
        },
        {
          "name": "resource",
          "type": "tree",
          "content": null
        },
        {
          "name": "video_pipeline.py",
          "type": "blob",
          "size": 6.9462890625,
          "content": "import requests\nimport json\nimport os\nimport time\nfrom typing import Dict, Any\n\nclass VideoPipeline:\n    def __init__(self, base_url: str = \"http://127.0.0.1:8080\"):\n        self.base_url = base_url\n        \n    def download_video(self, url: str, resolution: str = \"1080p\", \n                      output_format: str = \"mp4\", rename: str = None) -> Dict[str, Any]:\n        \"\"\"下载视频的第一步\"\"\"\n        endpoint = f\"{self.base_url}/api/v2/youtube/download\"\n        payload = {\n            \"url\": url,\n            \"resolution\": resolution,\n            \"output_format\": output_format,\n            \"rename\": rename or time.strftime(\"%Y-%m-%d\")\n        }\n        \n        response = requests.post(endpoint, json=payload)\n        response.raise_for_status()\n        return response.json()\n    \n    def generate_script(self, video_path: str, skip_seconds: int = 0,\n                       threshold: int = 30, vision_batch_size: int = 10,\n                       vision_llm_provider: str = \"gemini\") -> Dict[str, Any]:\n        \"\"\"生成脚本的第二步\"\"\"\n        endpoint = f\"{self.base_url}/api/v2/scripts/generate\"\n        payload = {\n            \"video_path\": video_path,\n            \"skip_seconds\": skip_seconds,\n            \"threshold\": threshold,\n            \"vision_batch_size\": vision_batch_size,\n            \"vision_llm_provider\": vision_llm_provider\n        }\n        \n        response = requests.post(endpoint, json=payload)\n        response.raise_for_status()\n        return response.json()\n    \n    def crop_video(self, video_path: str, script: list) -> Dict[str, Any]:\n        \"\"\"剪辑视频的第三步\"\"\"\n        endpoint = f\"{self.base_url}/api/v2/scripts/crop\"\n        payload = {\n            \"video_origin_path\": video_path,\n            \"video_script\": script\n        }\n        \n        response = requests.post(endpoint, json=payload)\n        response.raise_for_status()\n        return response.json()\n    \n    def generate_final_video(self, task_id: str, video_path: str, \n                           script_path: str, script: list, subclip_videos: Dict[str, str], voice_name: str) -> Dict[str, Any]:\n        \"\"\"生成最终视频的第四步\"\"\"\n        endpoint = f\"{self.base_url}/api/v2/scripts/start-subclip\"\n        \n        request_data = {\n            \"video_clip_json\": script,\n            \"video_clip_json_path\": script_path,\n            \"video_origin_path\": video_path,\n            \"video_aspect\": \"16:9\",\n            \"video_language\": \"zh-CN\",\n            \"voice_name\": voice_name,\n            \"voice_volume\": 1,\n            \"voice_rate\": 1.2,\n            \"voice_pitch\": 1,\n            \"bgm_name\": \"random\",\n            \"bgm_type\": \"random\",\n            \"bgm_file\": \"\",\n            \"bgm_volume\": 0.3,\n            \"subtitle_enabled\": True,\n            \"subtitle_position\": \"bottom\",\n            \"font_name\": \"STHeitiMedium.ttc\",\n            \"text_fore_color\": \"#FFFFFF\",\n            \"text_background_color\": \"transparent\",\n            \"font_size\": 75,\n            \"stroke_color\": \"#000000\",\n            \"stroke_width\": 1.5,\n            \"custom_position\": 70,\n            \"n_threads\": 8\n        }\n        \n        payload = {\n            \"request\": request_data,\n            \"subclip_videos\": subclip_videos\n        }\n        \n        params = {\"task_id\": task_id}\n        response = requests.post(endpoint, params=params, json=payload)\n        response.raise_for_status()\n        return response.json()\n    \n    def save_script_to_json(self, script: list, script_path: str) -> str:\n        \"\"\"保存脚本到json文件\"\"\"        \n        try:\n            with open(script_path, 'w', encoding='utf-8') as f:\n                json.dump(script, f, ensure_ascii=False, indent=2)\n            print(f\"脚本已保存到: {script_path}\")\n            return script_path\n        except Exception as e:\n            print(f\"保存脚本失败: {str(e)}\")\n            raise\n    \n    def run_pipeline(self, task_id: str, script_name: str, youtube_url: str, video_name: str=\"null\", skip_seconds: int = 0, threshold: int = 30, vision_batch_size: int = 10, vision_llm_provider: str = \"gemini\", voice_name: str = \"zh-CN-YunjianNeural\") -> Dict[str, Any]:\n        \"\"\"运行完整的pipeline\"\"\"\n        try:\n            current_path = os.path.dirname(os.path.abspath(__file__))\n            video_path = os.path.join(current_path, \"resource\", \"videos\", f\"{video_name}.mp4\")\n            # 判断视频是否存在\n            if not os.path.exists(video_path):\n                # 1. 下载视频\n                print(f\"视频不存在, 开始下载视频: {video_path}\")\n                download_result = self.download_video(url=youtube_url, resolution=\"1080p\", output_format=\"mp4\", rename=video_name)\n                video_path = download_result[\"output_path\"]\n            else:\n                print(f\"视频已存在: {video_path}\")\n            \n            # 2. 判断script_name是否存在\n            # 2.1.1 拼接脚本路径 NarratoAI/resource/scripts\n            script_path = os.path.join(current_path, \"resource\", \"scripts\", script_name)\n            if os.path.exists(script_path):\n                script = json.load(open(script_path, \"r\", encoding=\"utf-8\"))\n            else:\n                # 2.1.2 生成脚本\n                print(\"开始生成脚本...\")\n                script_result = self.generate_script(video_path=video_path, skip_seconds=skip_seconds, threshold=threshold, vision_batch_size=vision_batch_size, vision_llm_provider=vision_llm_provider)\n                script = script_result[\"script\"]\n            \n            # 2.2 保存脚本到json文件\n            print(\"保存脚本到json文件...\")\n            self.save_script_to_json(script=script, script_path=script_path)\n            \n            # 3. 剪辑视频\n            print(\"开始剪辑视频...\")\n            crop_result = self.crop_video(video_path=video_path, script=script)\n            subclip_videos = crop_result[\"subclip_videos\"]\n            \n            # 4. 生成最终视频\n            print(\"开始生成最终视频...\")\n            self.generate_final_video(\n                task_id=task_id,\n                video_path=video_path,\n                script_path=script_path,\n                script=script,\n                subclip_videos=subclip_videos,\n                voice_name=voice_name\n            )\n            \n            return {\n                \"status\": \"等待异步生成视频\",\n                \"path\": os.path.join(current_path, \"storage\", \"tasks\", task_id)\n            }\n            \n        except Exception as e:\n            return {\n                \"status\": \"error\",\n                \"error\": str(e)\n            }\n\n\n# 使用示例\nif __name__ == \"__main__\":\n    pipeline = VideoPipeline()\n    result = pipeline.run_pipeline(\n        task_id=\"test_111901\",\n        script_name=\"test.json\",\n        youtube_url=\"https://www.youtube.com/watch?v=vLJ7Yed6FQ4\",\n        video_name=\"2024-11-19-01\",\n        skip_seconds=50,\n        threshold=35,\n        vision_batch_size=10,\n        vision_llm_provider=\"gemini\",\n        voice_name=\"zh-CN-YunjianNeural\",\n    )\n    print(result)\n"
        },
        {
          "name": "webui.py",
          "type": "blob",
          "size": 6.6865234375,
          "content": "import streamlit as st\nimport os\nimport sys\nfrom uuid import uuid4\nfrom app.config import config\nfrom webui.components import basic_settings, video_settings, audio_settings, subtitle_settings, script_settings, review_settings, merge_settings, system_settings\nfrom webui.utils import cache, file_utils\nfrom app.utils import utils\nfrom app.models.schema import VideoClipParams, VideoAspect\nfrom webui.utils.performance import PerformanceMonitor\n\n# 初始化配置 - 必须是第一个 Streamlit 命令\nst.set_page_config(\n    page_title=\"NarratoAI\",\n    page_icon=\"📽️\",\n    layout=\"wide\",\n    initial_sidebar_state=\"auto\",\n    menu_items={\n        \"Report a bug\": \"https://github.com/linyqh/NarratoAI/issues\",\n        'About': f\"# NarratoAI:sunglasses: 📽️ \\n #### Version: v{config.project_version} \\n \"\n                 f\"自动化影视解说视频详情请移步：https://github.com/linyqh/NarratoAI\"\n    },\n)\n\n# 设置页面样式\nhide_streamlit_style = \"\"\"\n<style>#root > div:nth-child(1) > div > div > div > div > section > div {padding-top: 6px; padding-bottom: 10px; padding-left: 20px; padding-right: 20px;}</style>\n\"\"\"\nst.markdown(hide_streamlit_style, unsafe_allow_html=True)\n\ndef init_log():\n    \"\"\"初始化日志配置\"\"\"\n    from loguru import logger\n    logger.remove()\n    _lvl = \"DEBUG\"\n\n    def format_record(record):\n        # 增加更多需要过滤的警告消息\n        ignore_messages = [\n            \"Examining the path of torch.classes raised\",\n            \"torch.cuda.is_available()\",\n            \"CUDA initialization\"\n        ]\n        \n        for msg in ignore_messages:\n            if msg in record[\"message\"]:\n                return \"\"\n            \n        file_path = record[\"file\"].path\n        relative_path = os.path.relpath(file_path, config.root_dir)\n        record[\"file\"].path = f\"./{relative_path}\"\n        record['message'] = record['message'].replace(config.root_dir, \".\")\n\n        _format = '<green>{time:%Y-%m-%d %H:%M:%S}</> | ' + \\\n                  '<level>{level}</> | ' + \\\n                  '\"{file.path}:{line}\":<blue> {function}</> ' + \\\n                  '- <level>{message}</>' + \"\\n\"\n        return _format\n\n    # 优化日志过滤器\n    def log_filter(record):\n        ignore_messages = [\n            \"Examining the path of torch.classes raised\",\n            \"torch.cuda.is_available()\",\n            \"CUDA initialization\"\n        ]\n        return not any(msg in record[\"message\"] for msg in ignore_messages)\n\n    logger.add(\n        sys.stdout,\n        level=_lvl,\n        format=format_record,\n        colorize=True,\n        filter=log_filter\n    )\n\ndef init_global_state():\n    \"\"\"初始化全局状态\"\"\"\n    if 'video_clip_json' not in st.session_state:\n        st.session_state['video_clip_json'] = []\n    if 'video_plot' not in st.session_state:\n        st.session_state['video_plot'] = ''\n    if 'ui_language' not in st.session_state:\n        st.session_state['ui_language'] = config.ui.get(\"language\", utils.get_system_locale())\n    if 'subclip_videos' not in st.session_state:\n        st.session_state['subclip_videos'] = {}\n\ndef tr(key):\n    \"\"\"翻译函数\"\"\"\n    i18n_dir = os.path.join(os.path.dirname(__file__), \"webui\", \"i18n\")\n    locales = utils.load_locales(i18n_dir)\n    loc = locales.get(st.session_state['ui_language'], {})\n    return loc.get(\"Translation\", {}).get(key, key)\n\ndef render_generate_button():\n    \"\"\"渲染生成按钮和处理逻辑\"\"\"\n    if st.button(tr(\"Generate Video\"), use_container_width=True, type=\"primary\"):\n        try:\n            from app.services import task as tm\n            import torch\n            \n            # 重置日志容器和记录\n            log_container = st.empty()\n            log_records = []\n\n            def log_received(msg):\n                with log_container:\n                    log_records.append(msg)\n                    st.code(\"\\n\".join(log_records))\n\n            from loguru import logger\n            logger.add(log_received)\n\n            config.save_config()\n            task_id = st.session_state.get('task_id')\n\n            if not task_id:\n                st.error(tr(\"请先裁剪视频\"))\n                return\n            if not st.session_state.get('video_clip_json_path'):\n                st.error(tr(\"脚本文件不能为空\"))\n                return\n            if not st.session_state.get('video_origin_path'):\n                st.error(tr(\"视频文件不能为空\"))\n                return\n\n            st.toast(tr(\"生成视频\"))\n            logger.info(tr(\"开始生成视频\"))\n\n            # 获取所有参数\n            script_params = script_settings.get_script_params()\n            video_params = video_settings.get_video_params()\n            audio_params = audio_settings.get_audio_params()\n            subtitle_params = subtitle_settings.get_subtitle_params()\n\n            # 合并所有参数\n            all_params = {\n                **script_params,\n                **video_params,\n                **audio_params,\n                **subtitle_params\n            }\n\n            # 创建参数对象\n            params = VideoClipParams(**all_params)\n\n            result = tm.start_subclip(\n                task_id=task_id,\n                params=params,\n                subclip_path_videos=st.session_state['subclip_videos']\n            )\n\n            video_files = result.get(\"videos\", [])\n            st.success(tr(\"视生成完成\"))\n            \n            try:\n                if video_files:\n                    player_cols = st.columns(len(video_files) * 2 + 1)\n                    for i, url in enumerate(video_files):\n                        player_cols[i * 2 + 1].video(url)\n            except Exception as e:\n                logger.error(f\"播放视频失败: {e}\")\n\n            file_utils.open_task_folder(config.root_dir, task_id)\n            logger.info(tr(\"视频生成完成\"))\n\n        finally:\n            PerformanceMonitor.cleanup_resources()\n\ndef main():\n    \"\"\"主函数\"\"\"\n    init_log()\n    init_global_state()\n    utils.init_resources()\n    \n    st.title(f\"NarratoAI :sunglasses:📽️\")\n    st.write(tr(\"Get Help\"))\n    \n    # 渲染基础设置面板\n    basic_settings.render_basic_settings(tr)\n    # 渲染合并设置\n    merge_settings.render_merge_settings(tr)\n\n    # 渲染主面板\n    panel = st.columns(3)\n    with panel[0]:\n        script_settings.render_script_panel(tr)\n    with panel[1]:\n        video_settings.render_video_panel(tr)\n        audio_settings.render_audio_panel(tr)\n    with panel[2]:\n        subtitle_settings.render_subtitle_panel(tr)\n        # 渲染系统设置面板\n        system_settings.render_system_panel(tr)\n    \n    # 渲染视频审查面板\n    review_settings.render_review_panel(tr)\n    \n    # 渲染生成按钮和处理逻辑\n    render_generate_button()\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "webui.txt",
          "type": "blob",
          "size": 30.255859375,
          "content": "@echo off\nset CURRENT_DIR=%CD%\necho ***** Current directory: %CURRENT_DIR% *****\nset PYTHONPATH=%CURRENT_DIR%\n\nset \"vpn_proxy_url=%http://127.0.0.1:7890%\"\n\n:: 使用VPN代理进行一些操作，例如通过代理下载文件\nset \"http_proxy=%vpn_proxy_url%\"\nset \"https_proxy=%vpn_proxy_url%\"\n\n@echo off\nsetlocal enabledelayedexpansion\n\nrem 创建链接和路径的数组\nset \"urls_paths[0]=https://zenodo.org/records/13293144/files/MicrosoftYaHeiBold.ttc|.\\resource\\fonts\"\nset \"urls_paths[1]=https://zenodo.org/records/13293144/files/MicrosoftYaHeiNormal.ttc|.\\resource\\fonts\"\nset \"urls_paths[2]=https://zenodo.org/records/13293144/files/STHeitiLight.ttc|.\\resource\\fonts\"\nset \"urls_paths[3]=https://zenodo.org/records/13293144/files/STHeitiMedium.ttc|.\\resource\\fonts\"\nset \"urls_paths[4]=https://zenodo.org/records/13293144/files/UTM%20Kabel%20KT.ttf|.\\resource\\fonts\"\nset \"urls_paths[5]=https://zenodo.org/records/14167125/files/test.mp4|.\\resource\\videos\"\nset \"urls_paths[6]=https://zenodo.org/records/13293150/files/output000.mp3|.\\resource\\songs\"\nset \"urls_paths[7]=https://zenodo.org/records/13293150/files/output001.mp3|.\\resource\\songs\"\nset \"urls_paths[8]=https://zenodo.org/records/13293150/files/output002.mp3|.\\resource\\songs\"\nset \"urls_paths[9]=https://zenodo.org/records/13293150/files/output003.mp3|.\\resource\\songs\"\nset \"urls_paths[10]=https://zenodo.org/records/13293150/files/output004.mp3|.\\resource\\songs\"\nset \"urls_paths[11]=https://zenodo.org/records/13293150/files/output005.mp3|.\\resource\\songs\"\nset \"urls_paths[12]=https://zenodo.org/records/13293150/files/output006.mp3|.\\resource\\songs\"\nset \"urls_paths[13]=https://zenodo.org/records/13293150/files/output007.mp3|.\\resource\\songs\"\nset \"urls_paths[14]=https://zenodo.org/records/13293150/files/output008.mp3|.\\resource\\songs\"\nset \"urls_paths[15]=https://zenodo.org/records/13293150/files/output009.mp3|.\\resource\\songs\"\nset \"urls_paths[16]=https://zenodo.org/records/13293150/files/output010.mp3|.\\resource\\songs\"\n\nrem 循环下载所有文件并保存到指定路径\nfor /L %%i in (0,1,16) do (\n    for /f \"tokens=1,2 delims=|\" %%a in (\"!urls_paths[%%i]!\") do (\n        if not exist \"%%b\" mkdir \"%%b\"\n        echo 正在下载 %%a 到 %%b\n        curl -o \"%%b\\%%~nxa\" %%a\n    )\n)\n\necho 所有文件已成功下载到指定目录\nendlocal\npause\n\n\nrem set HF_ENDPOINT=https://hf-mirror.com\nstreamlit run webui.py --browser.serverAddress=\"127.0.0.1\" --server.enableCORS=True  --server.maxUploadSize=2048 --browser.gatherUsageStats=False\n\n请求0：\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/youtube/download' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"url\": \"https://www.youtube.com/watch?v=Kenm35gdqtk\",\n  \"resolution\": \"1080p\",\n  \"output_format\": \"mp4\",\n  \"rename\": \"2024-11-19\"\n}'\n{\n  \"url\": \"https://www.youtube.com/watch?v=Kenm35gdqtk\",\n  \"resolution\": \"1080p\",\n  \"output_format\": \"mp4\",\n  \"rename\": \"2024-11-19\"\n}\n\n请求1：\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/scripts/generate' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"video_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"skip_seconds\": 0,\n  \"threshold\": 30,\n  \"vision_batch_size\": 10,\n  \"vision_llm_provider\": \"gemini\"\n}'\n{\n  \"video_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"skip_seconds\": 0,\n  \"threshold\": 30,\n  \"vision_batch_size\": 10,\n  \"vision_llm_provider\": \"gemini\"\n}\n\n请求2：\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/scripts/crop' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"video_origin_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"video_script\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频展现一名留着胡须的男子在森林里挖掘。\\n\\n画面首先展现男子从后方视角，背着军绿色背包，穿着卡其色长裤和深色T恤，走向一个泥土斜坡。背包上似乎有一个镐头。\\n\\n下一个镜头特写展现了该背包，一个镐头从背包里伸出来，包里还有一些其他工具。\\n\\n然后，视频显示该男子用镐头挖掘泥土斜坡。\\n\\n接下来是一些近景镜头，展现男子的靴子在泥土中行走，以及男子用手清理泥土。\\n\\n其他镜头从不同角度展现该男子在挖掘，包括从侧面和上方。\\n\\n可以看到他用工具挖掘，清理泥土，并检查挖出的土壤。\\n\\n最后，一个镜头展现了挖出的土壤的质地和颜色。\",\n      \"narration\": \"好的，接下来就是我们这位“胡须大侠”的精彩冒险了！只见他背着军绿色的背包，迈着比我上班还不情愿的步伐走向那泥土斜坡。哎呀，这个背包可真是个宝贝，里面藏着一把镐头和一些工具，简直像是个随身携带的“建筑工具箱”！ \\n\\n看他挥舞着镐头，挖掘泥土的姿势，仿佛在进行一场“挖土大赛”，结果却比我做饭还要糟糕。泥土飞扬中，他的靴子也成了“泥巴艺术家”。最后，那堆色泽各异的土壤就像他心情的写照——五彩斑斓又略显混乱！真是一次让人捧腹的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频以一系列森林环境的镜头开头。\\n\\n第一个镜头是一个特写镜头，镜头中显示的是一些带有水滴的绿色叶子。\\n\\n第二个镜头显示一个留着胡须的男子在森林中挖掘一个洞。 他跪在地上，用工具挖土。\\n\\n第三个镜头是一个中等镜头，显示同一个人坐在他挖好的洞边休息。\\n\\n第四个镜头显示该洞的内部结构，该洞在树根和地面之间。\\n\\n第五个镜头显示该男子用斧头砍树枝。\\n\\n第六个镜头显示一堆树枝横跨一个泥泞的小水坑。\\n\\n第七个镜头显示更多茂盛的树叶和树枝在阳光下。\\n\\n第八个镜头显示更多茂盛的树叶和树枝。\\n\\n\\n\",\n      \"narration\": \"接下来，我们的“挖土大师”又开始了他的森林探险。看这镜头，水滴在叶子上闪烁，仿佛在说：“快来，快来，这里有故事！”他一边挖洞，一边像个新手厨师试图切洋葱——每一下都小心翼翼，生怕自己不小心挖出个“历史遗址”。坐下休息的时候，脸上的表情就像发现新大陆一样！然后，他拿起斧头砍树枝，简直是现代版的“神雕侠侣”，只不过对象是树木。最后，那堆树枝架过泥泞的小水坑，仿佛在说：“我就是不怕湿脚的勇士！”这就是我们的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ]\n}'\n{\n  \"video_origin_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"video_script\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频展现一名留着胡须的男子在森林里挖掘。\\n\\n画面首先展现男子从后方视角，背着军绿色背包，穿着卡其色长裤和深色T恤，走向一个泥土斜坡。背包上似乎有一个镐头。\\n\\n下一个镜头特写展现了该背包，一个镐头从背包里伸出来，包里还有一些其他工具。\\n\\n然后，视频显示该男子用镐头挖掘泥土斜坡。\\n\\n接下来是一些近景镜头，展现男子的靴子在泥土中行走，以及男子用手清理泥土。\\n\\n其他镜头从不同角度展现该男子在挖掘，包括从侧面和上方。\\n\\n可以看到他用工具挖掘，清理泥土，并检查挖出的土壤。\\n\\n最后，一个镜头展现了挖出的土壤的质地和颜色。\",\n      \"narration\": \"好的，接下来就是我们这位“胡须大侠”的精彩冒险了！只见他背着军绿色的背包，迈着比我上班还不情愿的步伐走向那泥土斜坡。哎呀，这个背包可真是个宝贝，里面藏着一把镐头和一些工具，简直像是个随身携带的“建筑工具箱”！ \\n\\n看他挥舞着镐头，挖掘泥土的姿势，仿佛在进行一场“挖土大赛”，结果却比我做饭还要糟糕。泥土飞扬中，他的靴子也成了“泥巴艺术家”。最后，那堆色泽各异的土壤就像他心情的写照——五彩斑斓又略显混乱！真是一次让人捧腹的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频以一系列森林环境的镜头开头。\\n\\n第一个镜头是一个特写镜头，镜头中显示的是一些带有水滴的绿色叶子。\\n\\n第二个镜头显示一个留着胡须的男子在森林中挖掘一个洞。 他跪在地上，用工具挖土。\\n\\n第三个镜头是一个中等镜头，显示同一个人坐在他挖好的洞边休息。\\n\\n第四个镜头显示该洞的内部结构，该洞在树根和地面之间。\\n\\n第五个镜头显示该男子用斧头砍树枝。\\n\\n第六个镜头显示一堆树枝横跨一个泥泞的小水坑。\\n\\n第七个镜头显示更多茂盛的树叶和树枝在阳光下。\\n\\n第八个镜头显示更多茂盛的树叶和树枝。\\n\\n\\n\",\n      \"narration\": \"接下来，我们的“挖土大师”又开始了他的森林探险。看这镜头，水滴在叶子上闪烁，仿佛在说：“快来，快来，这里有故事！”他一边挖洞，一边像个新手厨师试图切洋葱——每一下都小心翼翼，生怕自己不小心挖出个“历史遗址”。坐下休息的时候，脸上的表情就像发现新大陆一样！然后，他拿起斧头砍树枝，简直是现代版的“神雕侠侣”，只不过对象是树木。最后，那堆树枝架过泥泞的小水坑，仿佛在说：“我就是不怕湿脚的勇士！”这就是我们的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ]\n}\n\n请求3：\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/scripts/start-subclip?task_id=12121' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"request\": {\n  \"video_clip_json\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频展现一名留着胡须的男子在森林里挖掘。\\n\\n画面首先展现男子从后方视角，背着军绿色背包，穿着卡其色长裤和深色T恤，走向一个泥土斜坡。背包上似乎有一个镐头。\\n\\n下一个镜头特写展现了该背包，一个镐头从背包里伸出来，包里还有一些其他工具。\\n\\n然后，视频显示该男子用镐头挖掘泥土斜坡。\\n\\n接下来是一些近景镜头，展现男子的靴子在泥土中行走，以及男子用手清理泥土。\\n\\n其他镜头从不同角度展现该男子在挖掘，包括从侧面和上方。\\n\\n可以看到他用工具挖掘，清理泥土，并检查挖出的土壤。\\n\\n最后，一个镜头展现了挖出的土壤的质地和颜色。\",\n      \"narration\": \"好的，接下来就是我们这位“胡须大侠”的精彩冒险了！只见他背着军绿色的背包，迈着比我上班还不情愿的步伐走向那泥土斜坡。哎呀，这个背包可真是个宝贝，里面藏着一把镐头和一些工具，简直像是个随身携带的“建筑工具箱”！ \\n\\n看他挥舞着镐头，挖掘泥土的姿势，仿佛在进行一场“挖土大赛”，结果却比我做饭还要糟糕。泥土飞扬中，他的靴子也成了“泥巴艺术家”。最后，那堆色泽各异的土壤就像他心情的写照——五彩斑斓又略显混乱！真是一次让人捧腹的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频以一系列森林环境的镜头开头。\\n\\n第一个镜头是一个特写镜头，镜头中显示的是一些带有水滴的绿色叶子。\\n\\n第二个镜头显示一个留着胡须的男子在森林中挖掘一个洞。 他跪在地上，用工具挖土。\\n\\n第三个镜头是一个中等镜头，显示同一个人坐在他挖好的洞边休息。\\n\\n第四个镜头显示该洞的内部结构，该洞在树根和地面之间。\\n\\n第五个镜头显示该男子用斧头砍树枝。\\n\\n第六个镜头显示一堆树枝横跨一个泥泞的小水坑。\\n\\n第七个镜头显示更多茂盛的树叶和树枝在阳光下。\\n\\n第八个镜头显示更多茂盛的树叶和树枝。\\n\\n\\n\",\n      \"narration\": \"接下来，我们的“挖土大师”又开始了他的森林探险。看这镜头，水滴在叶子上闪烁，仿佛在说：“快来，快来，这里有故事！”他一边挖洞，一边像个新手厨师试图切洋葱——每一下都小心翼翼，生怕自己不小心挖出个“历史遗址”。坐下休息的时候，脸上的表情就像发现新大陆一样！然后，他拿起斧头砍树枝，简直是现代版的“神雕侠侣”，只不过对象是树木。最后，那堆树枝架过泥泞的小水坑，仿佛在说：“我就是不怕湿脚的勇士！”这就是我们的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ],\n  \"video_clip_json_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\scripts\\\\2024-1118-230421.json\",\n  \"video_origin_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"video_aspect\": \"16:9\",\n  \"video_language\": \"zh-CN\",\n  \"voice_name\": \"zh-CN-YunjianNeural\",\n  \"voice_volume\": 1,\n  \"voice_rate\": 1.2,\n  \"voice_pitch\": 1,\n  \"bgm_name\": \"random\",\n  \"bgm_type\": \"random\",\n  \"bgm_file\": \"\",\n  \"bgm_volume\": 0.3,\n  \"subtitle_enabled\": true,\n  \"subtitle_position\": \"bottom\",\n  \"font_name\": \"STHeitiMedium.ttc\",\n  \"text_fore_color\": \"#FFFFFF\",\n  \"text_background_color\": \"transparent\",\n  \"font_size\": 75,\n  \"stroke_color\": \"#000000\",\n  \"stroke_width\": 1.5,\n  \"custom_position\": 70,\n  \"n_threads\": 8\n  },\n  \"subclip_videos\": {\n    \"00:10-01:01\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-00_10-01_01.mp4\",\n    \"01:07-01:53\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-01_07-01_53.mp4\"\n  }\n}'\n{\n  \"request\": {\n  \"video_clip_json\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频展现一名留着胡须的男子在森林里挖掘。\\n\\n画面首先展现男子从后方视角，背着军绿色背包，穿着卡其色长裤和深色T恤，走向一个泥土斜坡。背包上似乎有一个镐头。\\n\\n下一个镜头特写展现了该背包，一个镐头从背包里伸出来，包里还有一些其他工具。\\n\\n然后，视频显示该男子用镐头挖掘泥土斜坡。\\n\\n接下来是一些近景镜头，展现男子的靴子在泥土中行走，以及男子用手清理泥土。\\n\\n其他镜头从不同角度展现该男子在挖掘，包括从侧面和上方。\\n\\n可以看到他用工具挖掘，清理泥土，并检查挖出的土壤。\\n\\n最后，一个镜头展现了挖出的土壤的质地和颜色。\",\n      \"narration\": \"好的，接下来就是我们这位“胡须大侠”的精彩冒险了！只见他背着军绿色的背包，迈着比我上班还不情愿的步伐走向那泥土斜坡。哎呀，这个背包可真是个宝贝，里面藏着一把镐头和一些工具，简直像是个随身携带的“建筑工具箱”！ \\n\\n看他挥舞着镐头，挖掘泥土的姿势，仿佛在进行一场“挖土大赛”，结果却比我做饭还要糟糕。泥土飞扬中，他的靴子也成了“泥巴艺术家”。最后，那堆色泽各异的土壤就像他心情的写照——五彩斑斓又略显混乱！真是一次让人捧腹的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频以一系列森林环境的镜头开头。\\n\\n第一个镜头是一个特写镜头，镜头中显示的是一些带有水滴的绿色叶子。\\n\\n第二个镜头显示一个留着胡须的男子在森林中挖掘一个洞。 他跪在地上，用工具挖土。\\n\\n第三个镜头是一个中等镜头，显示同一个人坐在他挖好的洞边休息。\\n\\n第四个镜头显示该洞的内部结构，该洞在树根和地面之间。\\n\\n第五个镜头显示该男子用斧头砍树枝。\\n\\n第六个镜头显示一堆树枝横跨一个泥泞的小水坑。\\n\\n第七个镜头显示更多茂盛的树叶和树枝在阳光下。\\n\\n第八个镜头显示更多茂盛的树叶和树枝。\\n\\n\\n\",\n      \"narration\": \"接下来，我们的“挖土大师”又开始了他的森林探险。看这镜头，水滴在叶子上闪烁，仿佛在说：“快来，快来，这里有故事！”他一边挖洞，一边像个新手厨师试图切洋葱——每一下都小心翼翼，生怕自己不小心挖出个“历史遗址”。坐下休息的时候，脸上的表情就像发现新大陆一样！然后，他拿起斧头砍树枝，简直是现代版的“神雕侠侣”，只不过对象是树木。最后，那堆树枝架过泥泞的小水坑，仿佛在说：“我就是不怕湿脚的勇士！”这就是我们的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ],\n  \"video_clip_json_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\scripts\\\\2024-1118-230421.json\",\n  \"video_origin_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"video_aspect\": \"16:9\",\n  \"video_language\": \"zh-CN\",\n  \"voice_name\": \"zh-CN-YunjianNeural\",\n  \"voice_volume\": 1,\n  \"voice_rate\": 1.2,\n  \"voice_pitch\": 1,\n  \"bgm_name\": \"random\",\n  \"bgm_type\": \"random\",\n  \"bgm_file\": \"\",\n  \"bgm_volume\": 0.3,\n  \"subtitle_enabled\": true,\n  \"subtitle_position\": \"bottom\",\n  \"font_name\": \"STHeitiMedium.ttc\",\n  \"text_fore_color\": \"#FFFFFF\",\n  \"text_background_color\": \"transparent\",\n  \"font_size\": 75,\n  \"stroke_color\": \"#000000\",\n  \"stroke_width\": 1.5,\n  \"custom_position\": 70,\n  \"n_threads\": 8\n  },\n  \"subclip_videos\": {\n    \"00:10-01:01\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-00_10-01_01.mp4\",\n    \"01:07-01:53\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-01_07-01_53.mp4\"\n  }\n}\n\n\n请在最外层新建一个pipeline 工作流执行逻辑的代码；\n他会按照下面的顺序请求接口\n1.下载视频\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/youtube/download' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"url\": \"https://www.youtube.com/watch?v=Kenm35gdqtk\",\n  \"resolution\": \"1080p\",\n  \"output_format\": \"mp4\",\n  \"rename\": \"2024-11-19\"\n}'\n2.生成脚本\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/scripts/generate' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"video_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"skip_seconds\": 0,\n  \"threshold\": 30,\n  \"vision_batch_size\": 10,\n  \"vision_llm_provider\": \"gemini\"\n}'\n3. 剪辑视频\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/scripts/crop' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"video_origin_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"video_script\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频展现一名留着胡须的男子在森林里挖掘。\\n\\n画面首先展现男子从后方视角，背着军绿色背包，穿着卡其色长裤和深色T恤，走向一个泥土斜坡。背包上似乎有一个镐头。\\n\\n下一个镜头特写展现了该背包，一个镐头从背包里伸出来，包里还有一些其他工具。\\n\\n然后，视频显示该男子用镐头挖掘泥土斜坡。\\n\\n接下来是一些近景镜头，展现男子的靴子在泥土中行走，以及男子用手清理泥土。\\n\\n其他镜头从不同角度展现该男子在挖掘，包括从侧面和上方。\\n\\n可以看到他用工具挖掘，清理泥土，并检查挖出的土壤。\\n\\n最后，一个镜头展现了挖出的土壤的质地和颜色。\",\n      \"narration\": \"好的，接下来就是我们这位“胡须大侠”的精彩冒险了！只见他背着军绿色的背包，迈着比我上班还不情愿的步伐走向那泥土斜坡。哎呀，这个背包可真是个宝贝，里面藏着一把镐头和一些工具，简直像是个随身携带的“建筑工具箱”！ \\n\\n看他挥舞着镐头，挖掘泥土的姿势，仿佛在进行一场“挖土大赛”，结果却比我做饭还要糟糕。泥土飞扬中，他的靴子也成了“泥巴艺术家”。最后，那堆色泽各异的土壤就像他心情的写照——五彩斑斓又略显混乱！真是一次让人捧腹的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频以一系列森林环境的镜头开头。\\n\\n第一个镜头是一个特写镜头，镜头中显示的是一些带有水滴的绿色叶子。\\n\\n第二个镜头显示一个留着胡须的男子在森林中挖掘一个洞。 他跪在地上，用工具挖土。\\n\\n第三个镜头是一个中等镜头，显示同一个人坐在他挖好的洞边休息。\\n\\n第四个镜头显示该洞的内部结构，该洞在树根和地面之间。\\n\\n第五个镜头显示该男子用斧头砍树枝。\\n\\n第六个镜头显示一堆树枝横跨一个泥泞的小水坑。\\n\\n第七个镜头显示更多茂盛的树叶和树枝在阳光下。\\n\\n第八个镜头显示更多茂盛的树叶和树枝。\\n\\n\\n\",\n      \"narration\": \"接下来，我们的“挖土大师”又开始了他的森林探险。看这镜头，水滴在叶子上闪烁，仿佛在说：“快来，快来，这里有故事！”他一边挖洞，一边像个新手厨师试图切洋葱——每一下都小心翼翼，生怕自己不小心挖出个“历史遗址”。坐下休息的时候，脸上的表情就像发现新大陆一样！然后，他拿起斧头砍树枝，简直是现代版的“神雕侠侣”，只不过对象是树木。最后，那堆树枝架过泥泞的小水坑，仿佛在说：“我就是不怕湿脚的勇士！”这就是我们的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ]\n}'\n4.生成视频\ncurl -X 'POST' \\\n  'http://127.0.0.1:8080/api/v2/scripts/start-subclip?task_id=12121' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"request\": {\n  \"video_clip_json\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频展现一名留着胡须的男子在森林里挖掘。\\n\\n画面首先展现男子从后方视角，背着军绿色背包，穿着卡其色长裤和深色T恤，走向一个泥土斜坡。背包上似乎有一个镐头。\\n\\n下一个镜头特写展现了该背包，一个镐头从背包里伸出来，包里还有一些其他工具。\\n\\n然后，视频显示该男子用镐头挖掘泥土斜坡。\\n\\n接下来是一些近景镜头，展现男子的靴子在泥土中行走，以及男子用手清理泥土。\\n\\n其他镜头从不同角度展现该男子在挖掘，包括从侧面和上方。\\n\\n可以看到他用工具挖掘，清理泥土，并检查挖出的土壤。\\n\\n最后，一个镜头展现了挖出的土壤的质地和颜色。\",\n      \"narration\": \"好的，接下来就是我们这位“胡须大侠”的精彩冒险了！只见他背着军绿色的背包，迈着比我上班还不情愿的步伐走向那泥土斜坡。哎呀，这个背包可真是个宝贝，里面藏着一把镐头和一些工具，简直像是个随身携带的“建筑工具箱”！ \\n\\n看他挥舞着镐头，挖掘泥土的姿势，仿佛在进行一场“挖土大赛”，结果却比我做饭还要糟糕。泥土飞扬中，他的靴子也成了“泥巴艺术家”。最后，那堆色泽各异的土壤就像他心情的写照——五彩斑斓又略显混乱！真是一次让人捧腹的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是视频画面的客观描述：\\n\\n视频以一系列森林环境的镜头开头。\\n\\n第一个镜头是一个特写镜头，镜头中显示的是一些带有水滴的绿色叶子。\\n\\n第二个镜头显示一个留着胡须的男子在森林中挖掘一个洞。 他跪在地上，用工具挖土。\\n\\n第三个镜头是一个中等镜头，显示同一个人坐在他挖好的洞边休息。\\n\\n第四个镜头显示该洞的内部结构，该洞在树根和地面之间。\\n\\n第五个镜头显示该男子用斧头砍树枝。\\n\\n第六个镜头显示一堆树枝横跨一个泥泞的小水坑。\\n\\n第七个镜头显示更多茂盛的树叶和树枝在阳光下。\\n\\n第八个镜头显示更多茂盛的树叶和树枝。\\n\\n\\n\",\n      \"narration\": \"接下来，我们的“挖土大师”又开始了他的森林探险。看这镜头，水滴在叶子上闪烁，仿佛在说：“快来，快来，这里有故事！”他一边挖洞，一边像个新手厨师试图切洋葱——每一下都小心翼翼，生怕自己不小心挖出个“历史遗址”。坐下休息的时候，脸上的表情就像发现新大陆一样！然后，他拿起斧头砍树枝，简直是现代版的“神雕侠侣”，只不过对象是树木。最后，那堆树枝架过泥泞的小水坑，仿佛在说：“我就是不怕湿脚的勇士！”这就是我们的建造之旅！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ],\n  \"video_clip_json_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\scripts\\\\2024-1118-230421.json\",\n  \"video_origin_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\test.mp4\",\n  \"video_aspect\": \"16:9\",\n  \"video_language\": \"zh-CN\",\n  \"voice_name\": \"zh-CN-YunjianNeural\",\n  \"voice_volume\": 1,\n  \"voice_rate\": 1.2,\n  \"voice_pitch\": 1,\n  \"bgm_name\": \"random\",\n  \"bgm_type\": \"random\",\n  \"bgm_file\": \"\",\n  \"bgm_volume\": 0.3,\n  \"subtitle_enabled\": true,\n  \"subtitle_position\": \"bottom\",\n  \"font_name\": \"STHeitiMedium.ttc\",\n  \"text_fore_color\": \"#FFFFFF\",\n  \"text_background_color\": \"transparent\",\n  \"font_size\": 75,\n  \"stroke_color\": \"#000000\",\n  \"stroke_width\": 1.5,\n  \"custom_position\": 70,\n  \"n_threads\": 8\n  },\n  \"subclip_videos\": {\n    \"00:10-01:01\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-00_10-01_01.mp4\",\n    \"01:07-01:53\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-01_07-01_53.mp4\"\n  }\n}'\n\n请求1，返回的参数是：\n{\n  \"task_id\": \"4e9b575f-68c0-4ae1-b218-db42b67993d0\",\n  \"output_path\": \"E:\\\\projects\\\\NarratoAI\\\\resource\\\\videos\\\\2024-11-19.mp4\",\n  \"resolution\": \"1080p\",\n  \"format\": \"mp4\",\n  \"filename\": \"2024-11-19.mp4\"\n}\noutput_path需要传递给请求2\n请求2，返回数据为：\n{\n  \"task_id\": \"04497017-953c-44b4-bf1d-9d8ed3ebbbce\",\n  \"script\": [\n    {\n      \"timestamp\": \"00:10-01:01\",\n      \"picture\": \"好的，以下是對影片畫面的客觀描述：\\n\\n影片顯示一名留著鬍鬚的男子在一處樹林茂密的斜坡上挖掘。\\n\\n畫面一：男子從後方出現，背著一個軍綠色的背包，背包裡似乎裝有工具。他穿著卡其色的長褲和深色的登山鞋。\\n\\n畫面二：特寫鏡頭顯示男子的背包，一個舊的鎬頭從包裡露出來，包裡還有其他工具，包括一個鏟子。\\n\\n畫面三：男子用鎬頭在斜坡上挖土，背包放在他旁邊。\\n\\n畫面四：特寫鏡頭顯示男子的登山鞋在泥土中。\\n\\n畫面五：男子坐在斜坡上，用手清理樹根和泥土。\\n\\n畫面六：地上有一些鬆動的泥土和落葉。\\n\\n畫面七：男子的背包近景鏡頭，他正在挖掘。\\n\\n畫面八：男子在斜坡上挖掘，揚起一陣塵土。\\n\\n畫面九：特寫鏡頭顯示男子用手清理泥土。\\n\\n畫面十：特寫鏡頭顯示挖出的泥土剖面，可以看到土壤的層次。\",\n      \"narration\": \"上一个画面是我在绝美的自然中，准备开启我的“土豪”挖掘之旅。现在，你们看到这位留着胡子的“大哥”，他背着个军绿色的包，里面装的可不仅仅是工具，还有我对生活的无限热爱（以及一丝不安）。看！这把旧镐头就像我的前任——用起来费劲，但又舍不得扔掉。\\n\\n他在斜坡上挖土，泥土飞扬，仿佛在跟大地进行一场“泥巴大战”。每一铲下去，都能听到大地微微的呻吟：哎呀，我这颗小树根可比我当年的情感纠葛还难处理呢！别担心，这些泥土层次分明，简直可以开个“泥土博物馆”。所以，朋友们，跟着我一起享受这场泥泞中的乐趣吧！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:00-00:51\"\n    },\n    {\n      \"timestamp\": \"01:07-01:53\",\n      \"picture\": \"好的，以下是對影片畫面內容的客觀描述：\\n\\n影片以一系列森林環境的鏡頭開始。第一個鏡頭展示了綠葉植物的特寫鏡頭，葉子上有一些水珠。接下來的鏡頭是一個男人在森林裡挖掘一個小坑，他跪在地上，用鏟子挖土。\\n\\n接下來的鏡頭是同一個男人坐在他挖的坑旁邊，望著前方。然後，鏡頭顯示該坑的廣角鏡頭，顯示其結構和大小。\\n\\n之後的鏡頭，同一個男人在樹林裡劈柴。鏡頭最後呈現出一潭渾濁的水，周圍環繞著樹枝。然後鏡頭又回到了森林裡生長茂盛的植物特寫鏡頭。\",\n      \"narration\": \"好嘞，朋友们，我们已经在泥土博物馆里捣鼓了一阵子，现在是时候跟大自然亲密接触了！看看这片森林，绿叶上水珠闪闪发光，就像我曾经的爱情，虽然短暂，却美得让人心碎。\\n\\n现在，我在这里挖个小坑，感觉自己就像是一位新晋“挖土大王”，不过说实话，这手艺真不敢恭维，连铲子都快对我崩溃了。再说劈柴，这动作简直比我前任的情绪波动还要激烈！最后这一潭浑浊的水，别担心，它只是告诉我：生活就像这水，总有些杂质，但也别忘了，要勇敢面对哦！\",\n      \"OST\": 2,\n      \"new_timestamp\": \"00:51-01:37\"\n    }\n  ]\n}\noutput_path和script参数需要传递给请求3\n请求3返回参数是\n{\n  \"task_id\": \"b6f5a98a-b2e0-4e3d-89c5-64fb90db2ec1\",\n  \"subclip_videos\": {\n    \"00:10-01:01\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-00_10-01_01.mp4\",\n    \"01:07-01:53\": \"E:\\\\projects\\\\NarratoAI\\\\storage\\\\cache_videos/vid-01_07-01_53.mp4\"\n  }\n}\nsubclip_videos和 output_path和script参数需要传递给请求4\n最后完成工作流\n\n0代表只播放文案音频，禁用视频原声；1代表只播放视频原声，不需要播放文案音频和字幕；2代表即播放文案音频也要播放视频原声；"
        },
        {
          "name": "webui",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}