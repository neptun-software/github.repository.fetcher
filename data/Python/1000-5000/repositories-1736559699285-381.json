{
  "metadata": {
    "timestamp": 1736559699285,
    "page": 381,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cloudflare/flan",
      "stars": 4095,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".git\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "__pycache__\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.44921875,
          "content": "FROM python:3.9-alpine\n\nCOPY aws_push.py gcp_push.py output_report.py requirements.txt run.sh /\nCOPY contrib /contrib\nCOPY shared /shared\n\nRUN apk add --no-cache nmap nmap-scripts git && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    git clone https://github.com/vulnersCom/nmap-vulners \\\n      /usr/share/nmap/scripts/vulners && \\\n    nmap --script-updatedb && \\\n    apk del git && \\\n    chmod +x /run.sh\n\nENTRYPOINT [\"/bin/sh\",\"-c\",\"/run.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.482421875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2019, Cloudflare\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.630859375,
          "content": "build :\n\tdocker build --no-cache -t flan_scan -f Dockerfile .\n\ncontainer_name = flan_$(shell date +'%s')\nstart :\n\tdocker run --rm --cap-drop=all --cap-add=NET_RAW --name $(container_name) -v \"$(CURDIR)/shared:/shared:Z\" flan_scan\n\nmd :\n\tdocker run --rm --cap-drop=all --cap-add=NET_RAW --name $(container_name) -v \"$(CURDIR)/shared:/shared:Z\" -e format=md flan_scan\n\nhtml :\n\tdocker run --rm --cap-drop=all --cap-add=NET_RAW --name $(container_name) -v \"$(CURDIR)/shared:/shared:Z\" -e format=html flan_scan\n\njson :\n\tdocker run --rm --cap-drop=all --cap-add=NET_RAW --name $(container_name) -v \"$(CURDIR)/shared:/shared:Z\" -e format=json flan_scan\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4658203125,
          "content": "<img src=\"https://cfsecuritycdn.infosec.workers.dev/img/flan_scan.png\"/>\n\nFlan Scan is a lightweight network vulnerability scanner. With Flan Scan you can easily find open ports on your network, identify services and their version, and get a list of relevant CVEs affecting your network.\n\nFlan Scan is a wrapper over Nmap and the vulners script which turns Nmap into a full-fledged network vulnerability scanner. Flan Scan makes it easy to deploy Nmap locally within a container, push results to the cloud, and deploy the scanner on Kubernetes.\n\n\nGetting Started\n------\n1. Clone this repository\n\n2. Make sure you have docker setup:\n```bash\n$ docker --version\n```\n\n3. Add the list of IP addresses or CIDRS you wish to scan to `shared/ips.txt`.\n\n4. Build the container:\n```bash\n$ make build\n```\n\n5. Start scanning!\n```bash\n$ make start\n```\nBy default flan creates Latex reports, to get other formats run:\n```\n$ make html\n```\nAdditional supported formats are *md* (markdown), *html* and *json*.\n\nWhen the scan finishes you will find the reports summarizing the scan in `shared/reports`. You can also see the raw XML output from Nmap in `shared/xml_files`.\n\n<div>\n  <img style=\"display: inline-block\" src=\"https://cfsecuritycdn.infosec.workers.dev/img/flan_scan_report1.png\" width=\"49%\"/>\n  <img style=\"display: inline-block\" src=\"https://cfsecuritycdn.infosec.workers.dev/img/flan_scan_report2.png\" width=\"49%\"/>\n</div>\n\nCustom Nmap Configuration\n-------------------------\nBy default Flan Scan runs the following Nmap command:\n\n```bash\n$ nmap -sV -oX /shared/xml_files -oN - -v1 $@ --script=vulners/vulners.nse <ip-address>\n```\nThe `-oX` flag adds an XML version of the scan results to the `/shared/xml_files` directory and the `-oN -` flag outputs \"normal\" Nmap results to the console. The `-v1` flag increases the verbosity to 1 and the `-sV` flag runs a service detection scan (aside from Nmap's default port and SYN scans). The `--script=vulners/vulners.nse` is the script that matches the services detected with relevant CVEs.\n\nNmap also allows you to run UDP scans and to scan IPv6 addresses. To add these and other flags to Flan Scan's Nmap command after running `make build` run the container and pass in your Nmap flags like so:\n\n```bash\n$ docker run -v $(CURDIR)/shared:/shared flan_scan <Nmap-flags>\n```\n\nPushing Results to the Cloud\n----------------------------\n\nFlan Scan currently supports pushing Latex reports and raw XML Nmap output files to a GCS Bucket or to an AWS S3 Bucket. Flan Scan requires 2 environment variables to push results to the cloud. The first is `upload` which takes one of two values `gcp` or `aws`. The second is `bucket` and the value is the name of the S3 or GCS Bucket to upload the results to. To set the environment variables, after running `make build` run the container setting the environment variables like so:\n```bash\n$ docker run --name <container-name> \\\n             -v $(CURDIR)/shared:/shared \\\n             -e upload=<gcp or aws> \\\n             -e bucket=<bucket-name> \\\n             -e format=<optional, one of: md, html or json> \\\n             flan_scan\n```\n\nBelow are some examples for adding the necessary AWS or GCP authentication keys as environment variables in container. However, this can also be accomplished with a secret in Kubernetes that exposes the necessary environment variables or with other secrets management tools.\n\n\n### Example GCS Bucket Configuration\n\nCopy your GCS private key for a service account to the `/shared` file\n```bash\n$ cp <path-to-local-gcs-key>/key.json shared/\n```\n\nRun the container setting the `GOOGLE_APPLICATION_CREDENTIALS` environment variable as the path to the GCS Key\n\n```bash\n$ docker run --name <container-name> \\\n             -v $(CURDIR)/shared:/shared \\\n             -e upload=gcp \\\n             -e bucket=<bucket-name> \\\n             -e GOOGLE_APPLICATION_CREDENTIALS=/shared/key.json\n             -e format=<optional, one of: md, html or json> \\\n             flan_scan\n```\n\n### Example AWS S3 Bucket Configuration\n\nSet the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables to the corresponding variables for your S3 service account.\n\n```bash\ndocker run --name <container-name> \\\n           -v $(CURDIR)/shared:/shared \\\n           -e upload=aws \\\n           -e bucket=<s3-bucket-name> \\\n           -e AWS_ACCESS_KEY_ID=<your-aws-access-key-id> \\\n           -e AWS_SECRET_ACCESS_KEY=<your-aws-secret-access-key> \\\n           -e format=<optional, one of: md, html or json> \\\n           flan_scan\n\n\n```\n\nDeploying on Kubernetes\n-----------------------\n\nWhen deploying Flan Scan to a container orchestration system, such as Kubernetes, you must ensure that the container has access to a file called `ips.txt` at the directory `/`. In Kubernetes, this can be done with a ConfigMap which will mount a file on your local filesystem as a volume that the container can access once deployed. The `kustomization.yaml` file has an example of how to create a ConfigMap called `shared-files`. This ConfigMap is then mounted as a volume in the `deployment.yaml` file.\n\nHere are some easy steps to deploy Flan Scan on Kubernetes:\n1. To create the ConfigMap add a path to a local `ips.txt` file in `kustomization.yaml` and then run `kubectl apply -k .`.\n2. Now run `kubectl get configmap` to make sure the ConfigMap was created properly.\n3. Set the necessary environment variables and secrets for your cloud provider within `deployment.yaml`.\n4. Now run `kubectl apply -f deployment.yaml` to launch a deployment running Flan Scan.\n\nFlan Scan should be running on Kubernetes successfully!\n"
        },
        {
          "name": "aws_push.py",
          "type": "blob",
          "size": 0.2802734375,
          "content": "import boto3\nimport sys\nimport os\n\nfilename = sys.argv[1]\n\ns3_client = boto3.client('s3')\ntry:\n    response = s3_client.upload_file(\"/\" + filename, os.getenv('bucket'),\n                                     filename)\nexcept Exception as e:\n    print('Error uploading to s3')\n    print(e)\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "gcp_push.py",
          "type": "blob",
          "size": 0.208984375,
          "content": "from google.cloud import storage\nimport sys\nimport os\n\nfilename = sys.argv[1]\n\nclient = storage.Client()\nbucket = client.bucket(os.getenv('bucket'))\nblob = bucket.blob(filename)\nblob.upload_from_filename(filename)\n"
        },
        {
          "name": "kubernetes_templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "output_report.py",
          "type": "blob",
          "size": 2.5986328125,
          "content": "import os\nimport sys\nfrom typing import IO\n\nfrom requests import Session\n\nfrom contrib.descriptions import CveProjectProvider, VulnDescriptionProvider\nfrom contrib.parsers import FlanXmlParser\nfrom contrib.report_builders import ReportBuilder, LatexReportBuilder, MarkdownReportBuilder, JinjaHtmlReportBuilder, \\\n    JsonReportBuilder\n\n\ndef create_report(parser: FlanXmlParser, builder: ReportBuilder, nmap_command: str, start_date: str, output_writer: IO,\n                  ip_reader: IO):\n\n    builder.init_report(start_date, nmap_command)\n\n    if parser.vulnerable_services:\n        builder.add_vulnerable_section()\n        builder.initialize_section()\n        builder.add_vulnerable_services(parser.vulnerable_dict)\n\n    if parser.non_vuln_services:\n        builder.add_non_vulnerable_section()\n        builder.initialize_section()\n        builder.add_non_vulnerable_services(parser.non_vulnerable_dict)\n\n    builder.add_ips_section()\n    for ip in ip_reader:\n        builder.add_ip_address(ip.strip())\n\n    builder.finalize()\n    output_writer.write(builder.build())\n\n\ndef parse_nmap_command(raw_command: str) -> str:\n    nmap_split = raw_command.split()[:-1]  # remove last element, ip address\n    nmap_split[3] = '<output-file>'\n    return ' '.join(nmap_split)\n\n\ndef create_default_provider() -> VulnDescriptionProvider:\n    return CveProjectProvider(Session())\n\n\ndef create_report_builder(report_type: str) -> ReportBuilder:\n    builder_map = {\n        'tex': lambda p: LatexReportBuilder(p),\n        'md': lambda p: MarkdownReportBuilder(p),\n        'html': lambda p: JinjaHtmlReportBuilder(p),\n        'json': lambda p: JsonReportBuilder(p)\n    }\n\n    if report_type not in builder_map:\n        raise NotImplementedError(report_type)\n\n    provider = create_default_provider()\n    return builder_map[report_type](provider)\n\n\ndef main(dirname: str, output_file: str, ip_file: str, report_type: str = 'tex'):\n    nmap_command = ''\n    start_date = ''\n    builder = create_report_builder(report_type)\n    parser = FlanXmlParser()\n\n    for entry in os.scandir(dirname):  # type: os.DirEntry\n        if not (entry.is_file() and entry.name.endswith('.xml')):\n            continue\n        data = parser.read_xml_file(entry.path)\n        parser.parse(data)\n        nmap_command = parse_nmap_command(data['nmaprun']['@args'])\n        start_date = data['nmaprun']['@startstr']\n\n    with open(output_file, 'w+') as output, open(ip_file) as ip_source:\n        create_report(parser, builder, nmap_command, start_date, output, ip_source)\n\n\nif __name__ == '__main__':\n    report_format = os.getenv('format', 'tex')\n    main(*sys.argv[1:4], report_type=report_format)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.091796875,
          "content": "xmltodict==0.12.0\ngoogle-cloud-storage==1.23.0\nboto3==1.12.15\nJinja2==2.11.3\nmarkupsafe==2.0.1"
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 1.1748046875,
          "content": "#!/bin/sh\n\ncurrent_time=$(date \"+%Y.%m.%d-%H.%M\")\nif [[ -z $upload ]]\nthen\n    root_dir=/shared/\nelse\n    root_dir=/\n    mkdir /xml_files\n    mkdir /reports\nfi\n\nreport_extension=\"tex\"\n\nif [[ ! -z $format ]]\nthen\n    report_extension=$format\nfi\n\nxml_dir=xml_files/$current_time\nreport_file=reports/report_$current_time.$report_extension\n\nfunction upload {\n    if [[ -z $upload ]]\n    then\n        return\n    elif [ $upload = \"aws\" ]\n    then\n        python /aws_push.py $1\n    elif [ $upload = \"gcp\" ]\n    then\n        python /gcp_push.py $1\n    fi\n}\n\nfunction get_filename(){\n    echo $1 | tr / -\n}\n\nmkdir $root_dir$xml_dir\nwhile IFS= read -r line\ndo\n  current_time=$(date \"+%Y.%m.%d-%H.%M.%S\")\n  filename=$(get_filename $line)\".xml\"\n  nmap -sV -oX $root_dir$xml_dir/$filename -oN - -v1 $@ --script=vulners/vulners.nse $line\n  upload $xml_dir/$filename\ndone < /shared/ips.txt\n\npython /output_report.py $root_dir$xml_dir $root_dir$report_file /shared/ips.txt\nif [[ $report_extension = \"tex\" ]]\nthen\n    sed -i 's/_/\\\\_/g' $root_dir$report_file\n    sed -i 's/\\$/\\\\\\$/g' $root_dir$report_file\n    sed -i 's/#/\\\\#/g' $root_dir$report_file\n    sed -i 's/%/\\\\%/g' $root_dir$report_file\nfi\nupload $report_file\n"
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}