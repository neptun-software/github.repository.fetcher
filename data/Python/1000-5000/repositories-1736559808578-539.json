{
  "metadata": {
    "timestamp": 1736559808578,
    "page": 539,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dashingsoft/pyarmor",
      "stars": 3842,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1669921875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# dotenv\n.env\n\n# virtualenv\n.venv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n# pip\n.pypirc\nscripts/pypi-upload.sh\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.150390625,
          "content": "version: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.7\"\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n\nformats:\n  - pdf\n  - epub\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.5595703125,
          "content": "Pyarmor 8.0 End User License Agreement\n\nThe following agreement regarding Pyarmor is made between Jondy Zhao -\nreferred to as \"licensor\" - and anyone or organization who is installing,\naccessing or in any other way using Pyarmor - referred to as \"user\" or\n\"you\".\n\n1. Definitions\n--------------\n\n1.1. \"This Software\"\n\n    means Pyarmor 8.0+, it doesn't include Pyarmor prior to 8.0. Pyarmor 8.0 is\n    rewritten, and provides new features. For compatibility, Pyarmor 8.0 also\n    includes most of the old features, this license doesn't apply to those old\n    features. It's only for new features.\n\n1.2. \"Product\"\n    means any application or software for sale.\n\n1.3. \"One Product\"\n    means a product name and everything that makes up this name. It includes\n    all the devices to develop, build, debug, test product. It also includes\n    product current version, history versions and all the future versions.\n\n    One product may has several variants, each variant name is composed of\n    product name plus feature name. As long as the proportion of the\n    variable part is far less than that of the common part, they're\n    considered as \"one product\".\n\n1.4. \"Customer\"\n    means anyone who uses user's product.\n\n1.5  \"Script\"\n    means Python script.\n\n1.6  \"User Script\"\n    means user owns this script.\n\n1.7  \"Other Script\"\n    means user doesn't own this script.\n\n1.8  \"Mix Str\"\n    means a feature of this software to obfuscate string constant in script\n\n1.9  \"BCC Mode\"\n    means an irreversible obfuscation method, a feature of this software\n\n1.10 \"RFT Mode\"\n    means an irreversible obfuscation method, a feature of this software\n\n1.11 \"Big Script\"\n    means script size exceeds a certain value\n\n1.12 \"Pyarmor License\"\n    means a file issued by licensor to unlock this software limitations\n\n1.13 \"Basic License\"\n    means a kind of Pyarmor License\n\n1.13 \"Pro License\"\n    means a kind of Pyarmor License\n\n1.14 \"Group License\"\n    means a kind of Pyarmor License\n\n1.15 \"License No.\"\n    means a string with format \"pyarmor-vax-xxxxxx\", \"x\" stands for a\n    digital, each Pyarmor License has an unique License No.\n\n1.16 \"Licensed Product\"\n    means product has been registered to one Pyarmor License.\n\n2. License Grants and Conditions\n--------------------------------\n\nInstalling and using this software signifies acceptance of these terms and\nconditions of the license. If you do not agree with the terms of this\nlicense, you must remove all of this software files from your storage\ndevices and cease to use this software.\n\n2.1. Trial Version Limitations\n\nThis software is published as shareware, free trial version never expires,\nbut there are some limitations.\n\n2.1.1 Can not obfuscate big script\n2.1.2 Can not use feature Mix Str\n2.1.3 Can not use feature RFT Mode, BCC Mode\n2.1.4 Can not be used to obfuscate any commercial product. If the total sale\n      income of this product is less than 100 x license fees, this software\n      could be used temporarily.\n2.1.5 Can not be used to provide obfuscation service in any form, in short\n      this software can't be used to obfuscate the scripts of others\n\n2.2. Grants\n\nUser purchases Pyarmor License to unlock these limitations except 2.1.5.\n\nLicensor issues 3 kind of Pyarmor License.\n\n2.2.1 Pyarmor Basic, unlock limitations 2.1.1, 2.1.2, 2.1.4\n2.2.2 Pyarmor Pro, unlock limitations 2.1.1, 2.1.2, 2.1.3, 2.1.4\n2.2.3 Pyarmor Group, unlock limitations 2.1.1, 2.1.2, 2.1.3, 2.1.4\n\nPyarmor Basic and Pyarmor Pro need internet connection to verify, it doesn't\nwork in the device without internet connection.\n\nPyarmor Pro can not be used in CI/CD pipeline.\n\nPyarmor Group need not internet connection.\n\nEach Pyarmor License only need pay once, not periodically.\n\n2.3 Conditions\n\n2.3.1 Each Pyarmor License can only be used to register One Product. Each\n      Licensed Product has an unique License No. in global. If user has many\n      products, each product need purchase one Pyarmor License. Except 2.6.1\n\n2.3.2 Pyarmor License could be installed in limited machines and devices which\n      used to develop, build, debug, test and support Licensed Product.\n\n2.3.3 Pyarmor Basic and Pro License can only be used in no more than 100\n      devices. Pyarmor License be used means use any feature of Pyarmor in\n      one machine. Running obfuscated scripts generated by Pyarmor is not\n      considered as Pyarmor License be used.\n\n2.3.4 Pyarmor Basic and Pro License need internet connection to verify.\n\n2.3.5 Pyarmor License could not be installed in customer's devices.\n\n2.3.6 Pyarmor License could not be used to obfuscate any other scripts.\n\n2.3.7 Pyarmor License could not be transferred to other product.\n\n2.4 Special Cases\n\n2.4.1 When product name is changed, but the product features are same,\n      Pyarmor License could be used without changing registration product\n      name.\n\n2.4.2 When organization user is renamed, or acquired by others, only product\n      name is not changed, Pyarmor License need change nothing, and still\n      could be used. But if product name is changed, even product functions\n      are same, Pyarmor License can't be used again.\n\n2.4.3 When product in developing and its name is not defined, the initial\n      registration could use \"TBD\" as the product name. In this case,\n      product name can be changed once. Before this product is sold, user\n      must change registration name to real product name.\n\n2.5 Modifying Software\n\nUser could modify Python scripts of this software to meet needs. But this\nmodified software could only be used in Licensed Product, it could not be\ndistributed to others.\n\n2.6 Fair Use\n\nThis License is not intended to limit any rights users have under applicable\ncopyright doctrines of fair use, fair dealing, or other equivalents.\n\n2.6.1 If user has many products, and has purchased one license for the first\n      product. The second product could use first product license only if sale\n      income of the second product less than 100x license fees. Once greater\n      than 100x license fees, the second product need purchase its own license.\n      It's same to user's other products.\n\n3. Responsibilities and Commitments\n-----------------------------------\n\n3.1 This software does nothing except the features described in the software\n    documentation.\n\n3.2 Using Pyarmor Basic and Pro License, this software need internet\n    connection to request authorization. And only the related files of\n    Pyarmor License, serial number of hard disk, Ethernet address, IPv4/IPv6\n    address, hostname will be sent to remote server for verification.\n\n3.3 Except 3.2, this software does not record and collect any other device\n    information, and need not connect to internet.\n\n3.4 Regarding to obfuscated scripts generated by this software\n\n3.4.1 this software has no any control or limitation to obfuscated scripts,\n      the behaviors of obfuscated scripts are totally defined by user.\n\n3.4.2 License No. and product name will be embedded into obfuscated scripts,\n      user's regname, email and other information are not.\n\n4. Termination\n--------------\n\nThe rights granted under this License will terminate automatically if You\nfail to comply with any of its terms.\n\n4.1 You issue chargeback after purchased Pyarmor License has been registered\n    to one product. Even chargeback is rejected by bank or user cancels\n    chargeback, this Pyarmor License can't be used again.\n\n4.2 You let others got Pyarmor License intentionally or unintentionally\n\n4.3 You lost Pyarmor License by hacker\n\n4.4 In any cases include 4.2, 4.3, once licensor find too many machines use\n    one Pyarmor License exceeds permission, this Pyarmor License will be\n    ceased, and never could be used again.\n\n4.5 In any cases if licensor finds one Pyarmor License is used to other\n    product, even it's caused by 4.3, this Pyarmor License will be ceased. A\n    notify email will be sent to registration email of this Pyarmor License.\n\n4.6 Pyarmor license must be installed in your build enviornments, you can't\n    install Pyarmor License in customer's device to obfuscate your customer's\n    scripts\n\n5. Restrictions\n---------------\n\nYou shall not (and shall not allow any third party to):\n\n5.1 decompile, disassemble, or otherwise reverse engineer any binary files\n    of this software;\n\n5.2 distribute, sell, sublicense, rent, lease, or use this software (or any\n    portion thereof) for time sharing, hosting, service provider, or like\n    purposes;\n\n5.3 remove any product identification, proprietary, copyright, or other\n    notices contained in this software;\n\n5.4 copy, modify (except as expressly permitted in this Agreement) or\n    translate any part of this software, create a derivative work of any\n    part of this software, or incorporate this software into or with other\n    software, except to the extent expressly authorized in writing by\n    licensor;\n\n5.5 attempt to circumvent or disable the security key mechanism that\n    protects this software against unauthorized use (except and only to the\n    extent that applicable law prohibits or restricts such restrictions);\n\n6. Disclaimer of Warranty\n-------------------------\n\nThis Software is provided under this License on an \"as is\" basis, without\nwarranty of any kind, either expressed, implied, or statutory, including,\nwithout limitation, warranties that this software is free of defects, fit\nfor a particular purpose or non-infringing. The entire risk as to the\nquality and performance of this software is with users. Neither the licensor\nnor the agents of the licensor will be liable for data loss, damages, loss\nof profits or any other kind of loss while using or misusing this\nsoftware. This disclaimer of warranty constitutes an essential part of this\nLicense. No use of this software is authorized under this License except\nunder this disclaimer.\n\n7. Changes to this Agreement\n----------------------------\n\nLicensor reserves the right, at its sole discretion, to modify or replace\nthis Agreement at any time. If a revision is material licensor will provide\nat least 30 days' notice prior to any new terms taking effect. What\nconstitutes a material change will be determined at the sole discretion of\nthe licensor.\n\nBy continuing to access or use this software after any revisions become\neffective, You agree to be bound by the revised terms. If You do not agree\nto the new terms, You are no longer authorized to use this software.\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the courts of\na jurisdiction where the defendant maintains its principal place of business\nand such litigation shall be governed by laws of that jurisdiction, without\nreference to its conflict-of-law provisions.  Nothing in this Section shall\nprevent a party's ability to bring cross-claims or counter-claims.\n"
        },
        {
          "name": "LICENSE-ZH",
          "type": "blob",
          "size": 13.0078125,
          "content": "﻿Pyarmor 8.0 最终用户许可协议\n\n重要！请仔细阅读本协议。下载、安装或使用整个软件或其任何部分，即表示您接受本协议\n的所有条款和条件。您同意本协议与任何书面协议一样具有法律效力。\n\n如果您不同意所有这些条款和条件，请不要使用或访问该软件。如果您已经支付了使用该软\n件的许可费，但不同意这些条款，您可以退还该软件以获得全额退款，但前提是您 (A) 未\n使用该软件，并且 (B) 在初次购买该软件的三十 (30) 天内退还该软件。\n\n如果您同意这些条款和条件，即表示您确认自己已年满或超过 18 岁并且具有足够的民事行\n为能力签订在法律上有约束力的协议。\n\n以下协议在 Pyarmor 开发者 赵俊德（下称“许可人”）和任何安装、访问或以其它方式使用\n本软件的自然人或者团体机构（下称“用户”）之间订立。\n\n1. 概念和定义\n\n本软件\n下文中特指 Pyarmor 8.0 之后的版本，不包含 Pyarmor 8.0 之前的版本。虽然为了兼\n容性，Pyarmor 8.0 中包含老版本中功能，但是本协议中的许可协议并不适用于部分功能。\n\n产品\n下文中特指的是部分或者全部使用 Python 脚本实现功能的软件，该软件同时还通过销售进\n行盈利，除非特别说明，下文中的产品不包含非盈利的任何软件。\n\n一种产品\n一种产品在本协议中指的是独立销售的一个软件的所有组成部分，包括开发需要的各种设备，\n以及提供支持的服务器，云服务器等。一种产品也包括产品的当前版本，历史版本，以及将\n来的升级版本。一种产品也包括基础功能相同，组合不同特殊功能而形成的不同版本的产品，\n这种产品的特征是不同版本对外销售名称一样，只是通过辅助名称等来进行区分。\n\n用户\n使用本软件的个人或者组织机构。\n\n客户\n在本文中特指的是使用用户产品的个人或者组织机构。\n\n用户产品\n用户拥有完全或者部分产权的产品。\n\n其它产品\n产权不属于用户的产品。\n\n脚本\n下文中特指的 Python 脚本文件。\n\n加密脚本\n下文中指的是使用本软件加密之后输出的脚本。\n\n用户脚本\n用户拥有完全或者部分产权的脚本。\n\n其它脚本\n用户不具备任何产权的脚本\n\n许可证\n下文中指的是由许可人生成并发送给用户的特殊格式的文件，本软件会根据该文件来决定某\n些功能是否可用\n\n激活许可证\n指的是用户第一次使用许可证运行本软件，称之为激活许可证。激活之后的状态称之为许可\n证已经激活；如果许可证从来没有被用来运行本软件，那么称之为许可证没有被激活。\n\n停用许可证\n指的是许可人在认证服务器对某一个许可证取消授权，取消授权之后的许可证等同于没有许\n可证，该许可证授予的相关功能无法在继续使用。\n\n1.1 本软件的功能定义\n\n基本加密功能\n是指没有使用任何选项的加密功能。\n\nJIT 保护\n是指使用动态代码生成机制对加密脚本进行保护的功能。\n\nThemedia 保护\n是指使用第三方工具 Themedia 对 Widnows 动态库进行保护的功能。\n\nAssert 保护\n是指保护加密脚本不会被替换或者非法注入的保护功能。\n\n设置脚本有效期\n是指能够限制加密脚本运行有效期的功能。\n\n绑定加密脚本到设备\n是指能够限制加密脚本运行在指定设备的功能。\n\n混淆字符串功能\n是指对脚本中的字符串常量进行混淆保护的功能。\n\nRFT 加密模式\n是指通过重命名脚本中的函数，类，方法和变量的名称来保护脚本的功能。\n\nBCC 加密模式\n是指把 Python 脚本中部分函数转换成为对应的 C 函数，通过编译直接生成机器指令代码，\n从而对脚本进行保护的功能。\n\n2. 本软件的许可模式\n\n2.1 试用版本\n\n下载和安装本软件表示自动接受试用许可协议，试用版本有如下的限制\n\n(1) 加密功能对脚本大小有限制，不能加密超过限制的大脚本。\n(2) 混淆字符串功能在试用版中无法使用。\n(3) RFT 加密模式，BCC 加密模式在试用版无法使用。\n(4) 不可以应用于加密商用产品。特别的，如果商用产品的累计销售额小于基础版许\n    可证费用乘以 100，可以暂时使用；但是一旦累计销售额超过阀值，就不可以在\n    继续使用。\n(5) 运行辅助包的名称 \"pyarmor_runtime_000000\" 不可以被设置和修改\n(6) 不可以使用本软件提供任何形式的加密服务，不管是通过应用程序还是网络服务。\n    总之在任何情况下都不允许使用本软件加密其他人的脚本。\n(7) 不支持 obf-code 大于 1 的任何加密模式\n\n试用版本中功能限制，需要通过许可授权来解锁相关功能。\n\n2.2 许可授权\n\n许可授权需要通过购买相应的许可证来获取，购买许可证可以通过指定的网站购买。\n\n每一个许可证都有一个 18 位字符长度唯一的编号，并授权给有且只有一种产品使用。也就\n是说，任何一种使用本软件进行保护的产品都有自己唯一的许可证编号，不允许两种不同产\n品使用相同的许可证编号。\n\n本软件提供三种许可证，分别解锁不同的功能\n\n2.2.1 基础版许可证\n\n基础版许可证解锁限制 2.1 中的 (1) (2) (4) (5) (7).\n\n基础版许可证加密脚本的时候需要在线验证许可证\n\n2.2.2 专家版许可证\n\n专家版许可证解锁限制 2.1 中的 (1) (2) (3) (4) (5) (7).\n\n专家版许可证加密脚本的时候需要在线验证许可证\n\n2.2.3 集团版许可证\n\n集团版许可证解锁限制 2.1 中的 (1) (2) (3) (4) (5) (7).\n\n集团版许可证加密脚本的时候不需要在线验证许可证\n\n不管哪一种许可证，运行加密脚本的时候都无需验证许可证，本软件对于加密脚本的运行没\n有任何控制和限制。\n\n2.3 购买和退款\n\n除了购买软件许可的费用之外，没有其它任何费用。获得许可的用户可以使用本软件在许可\n的范围之内加密任何脚本并自由发布，不需要在向许可人支付任何费用。\n\n购买软件许可的费用是一次性收费，可以永久在购买本软件时候的版本中使用，但是许可证\n可能在任何一个升级版本中失效，许可人不承诺许可证可以在今后所有的升级版本中使用。\n\n一旦激活许可证之后，不在支持退款，购买之后没有激活许可证，在三十天之内支持取消许\n可证并退款。但是如果购买时间超过三十天，没有激活的许可证也不再支持退款。\n\n2.4 合理使用原则\n\n如果用户有多个产品并且已经为第一个产品购买许可证，其他产品满足下列条件可以使用第\n一个产品的许可证：\n\n(1) 如果该产品的销售收入在当前许可证费用的 100 倍之内，那么该产品可以使用第一个\n    产品的许可证。\n\n(2) 如果该产品的销售输入超过当前许可证费用的 100 倍，那么该产品不可以继续使用\n    第一个产品的许可证，需要单独购买新的许可证。\n\n本许可证并不旨在限制用户根据适用条款享有的任何权利、公平交易或其他等效的合理使用。\n\n3. 许可人的承诺\n\n3.1 对于在开发设备运行本软件进行加密\n\n本软件没有任何后门以及和加密无关的功能代码，本软件在加密过程中不会记录和访问无关\n的设备数据和信息，下面列出的资源除外：\n\n(1) 基础版和专家版许可模式下使用本软件需要通过互联网进行许可认证\n(2) 本软件会访问设备名称，硬盘序列号，以太网卡地址，IPv4/IPv6 地址，并且仅用于\n    许可认证\n\n3.2 对于在客户设备运行的加密脚本\n\n(1) 本软件对于加密脚本的运行没有任何控制和限制，加密脚本的运行限制完全由用户控制\n(2) 除非加密脚本设置了网络时间的有效期，否则本软件不会访问互联网\n(3) 除非加密脚本设置了绑定到设备，否则本软件不会访问任何设备和系统信息\n(4) 许可证编号和被授权的产品名称会嵌入到加密脚本中，除此之外，加密脚本中没有任何用\n    户相关的注册信息，例如注册名称和邮箱等。\n\n4. 使用本软件的限制和约束\n\n4.1 本软件只能用于加密用户脚本，不能以任何方式加密其它脚本，包含但不限于如下方式是\n    许可禁止的行为\n\n    (1) 在用户发布的产品中包含本软件自身去加密其他人的脚本\n    (2) 在服务器上运行本软件，通过网络向其它人提供基于本软件的加密脚本服务\n    (3) 接受其它人的请求，在自己的设备上加密其他人的脚本\n\n4.2 用户可以修改本软件相关的 Python 脚本以满足使用方面的额外需求，但是修改后的脚\n    本只能在许可证范围内使用，不得分发给其它人\n\n4.3 同一个许可下面，使用本软件的设备数目有限制。这里的设备是指安装本软件并使用本\n    软件对脚本进行加密的设备，不是指运行加密脚本的客户机器。\n\n4.4 每一个许可证绑定到一种产品，不可以转移给其它产品。\n\n4.5 用户注册信箱被盗用视同用户自己使用。\n\n4.6 本软件只能安装在用户的开发环境，只能用于加密客户的脚本，不能安装在客户设备或者\n    生产环境去加密客户的脚本\n\n5. 导致许可证被停用的行为\n\n5.1 使用 Paypal，信用卡等网络支付的用户，一旦在激活许可证之后进行撤单，该许可证\n    会被永久停用。即便撤单行为失败或者用户主动取消撤单，该许可证也无法在重新使用。\n\n5.2 用户丢失许可，许可人在发现使用设备数量显著超过许可之后，可以在不通知用户的情\n    况下停用该许可证。包含但不限于下列方式\n\n    (1) 用户主动把许可文件提供给其他用户\n    (2) 用户保管不妥造成许可文件无意被其它人获取\n    (3) 用户数据被黑客窃取\n\n5.3 当许可人发现许可证的注册产品和实际的用户产品不一致的时候，可以在不通知用户的\n    情况下停用该许可证。\n\n    但是在下列情况下，即便实际的产品名称和许可证绑定的产品名称不一致，该许可证可\n    以继续合法使用，不会被停用：\n\n    (1) 公司被收购或者更改名称，只要产品名称不发生变化，无需修改注册名称，可以继\n        续合法使用在原来的产品\n\n    (2) 产品名称发生变化，只要产品能很明显的证明和原来的产品是同一个，可以继续合\n        法使用许可证在修改名称后的产品。如果不能很明显的证明，需要购买新的许可证。\n\n    (3) 对于开发早期产品名称没有确定的情况，本软件允许在第一次许可登记的时候使用\n        三个英文字符 “TBD“ 来指定产品名称，允许在其后修改为真正的产品名称。对于产\n        品名称为 “TBD“ 的许可证，一旦开始销售，必须修改为真正的产品名称，否则也会\n        被认为是非授权使用。\n\n6. 许可限制\n\n用户不得（且不得允许任何第三方）：\n\n6.1 以任何方式对本软件的二进制文件进行反编译、反汇编或逆向工程；\n\n6.2 分发、出售、转让许可、出租、租赁该软件（或其任何部分），也不得将其用于分时、\n    托管、服务提供商等目的；\n\n6.3 去除软件中包含的任何产品标识、专有权、版权或其他通知；\n\n6.4 复制、修改（本协议中明确允许的除外），创建软件任何部分的衍生作品，或者将该软\n    件并入其他软件或与之合并，有许可人以书面形式明确授权的除外；\n\n6.5 尝试规避或禁用防止擅自使用该软件的安全密钥机制（除非且仅当适用的法律禁止或限\n    制此类限制）。\n\n7. 担保免责声明\n\n本软件和所有服务均“按原样”提供。许可人不做任何其他保证、条件或承诺（无论是明示还\n是默示的，是法定还是其他形式的），包括但不限于有关所有权、适销性、针对特定目的的\n适用性或不侵权的保证。许可人不提供以下保证：\n\n(1) 该软件符合您的要求；\n(2) 该软件不含错误或缺陷；\n(3) 该软件的安全性、可靠性、及时性或性能达到特定水平；\n(4) 该软件中的任何错误都将得到纠正；\n(5) 该软件可产生特定结果或输出。\n\n8. 对高风险活动的免责声明\n\n本软件不具有容错性，其设计、制造或预定用途并非为了生命援助、医疗、急救、关键任务\n或其他严格责任或危险活动（以下简称“高风险活动”）。许可人特此否认对高风险活动的适\n用性的任何明示或默示的保证。\n\n9. 遵守法律\n\n在使用该软件以及从软件产生的任何结果时，用户有责任遵守所有适用的法律、法规和业务\n守则。\n\n10. 协议的修订和解释\n\n本协议由许可人负责解释。任何时候许可人对本协议做出任何修改，修改版本自动适用于用\n户。\n"
        },
        {
          "name": "LICENSE-ZH.7",
          "type": "blob",
          "size": 5.669921875,
          "content": "﻿     PyArmor 最终用户许可协议\n\n     以下关于 PyArmor（下称“本软件”）的协议在 赵俊德（下称“许可人”）和任何安装、\n     访问或以其它方式使用本软件的自然人（下称“用户”）之间订立。\n\n  1. 本软件的作者及版权持有人为 赵俊德。\n\n  2. 本软件可以自由试用但是功能上有一定限制:\n\n     a. 试用版本可以加密的脚本大小有限制，超过限制的脚本无法进行加密。\n\n     b. 在试用版中中生成的加密脚本不是私有的，也就是说，其他任何人也可以为这些加\n        密脚本生成新的许可文件。\n\n     c. 试用版本不能下载其他平台最新版本的动态库，以前版本的动态库依旧可以使用。\n\n     d. 终极加密模式（SPP）在试用版本中不可用。\n\n     e. 任何人都可以使用本软件加密非商业用途的Python脚本，未经许可不得用于商业用\n        途。\n\n  3. 本软件有两种基本类型的许可方式:\n\n     a. 个人用户许可，适用于产品的所有权为个人所有。个人用户购买一个许可证可以在\n        自己所有的计算机和相关硬件设备上使用。购买这种类型的许可证的时候，注册名\n        称填写个人的真实姓名，本产品只授权于注册名称对应的个人使用。\n\n        个人用户许可证允许使用本软件加密任何属于自己的 Python 脚本，为加密脚本生\n        成私有许可文件，发布加密后的脚本和必要的辅助文件到任何其他设备。\n\n        个人用户许可证不允许加密产权属于法人（公司）的 Python 脚本。\n\n     b. 企业用户许可，适用于产品的所有权为法人（公司）所有。企业用户购买一个软件\n        许可证可以在同一个产品的各个项目中使用。购买这种类型的许可证的时候，注册\n        名称填写机构名称以及产品名称，例如，“西安德新软件的易科系统”，本软件只授\n        权于注册名称对应的产品使用。\n\n        同一个产品包括产品升级之后的所有版本。\n\n        企业用户许可证允许使用本软件在任何设备上，加密属于该产品系列的 Python 脚\n        本，为加密脚本生成私有许可文件，发布加密后的脚本和必要的辅助文件到任何其\n        他设备。\n\n        除非有许可人的许可，否则企业用户许可证不可以用于其他的产品。如果需要在其\n        他产品中使用，必须为其他产品单独购买软件许可。\n\n     不管那一种许可方式，本软件都只可用于保护产品本身，不允许应用于产权不属于被\n     授权人的 Python 脚本。\n\n  4. 除了购买软件许可的费用之外，没有其他任何费用。获得软件许可的用户可以使用本软\n     件在许可的范围之内加密任何Python脚本并自由发布，不需要在向许可人支付任何费用。\n\n  5. 购买软件许可，可以通过下面任意一个链接的电子商务网站\n\n         https://order.shareit.com/cart/add?vendorid=200089125&PRODUCT[300871197]=1\n         https://pyarmor.dashingsoft.com/cart/order.html\n\n     对于类型为个人用户的许可，注册名称需要填写正确的姓名。\n\n     对于类型为企业用户的许可，除了注册名称需要填写正确的企业名称之外，还需要填\n     写被授权的产品名称，如果仅在企业内部使用，不会用于任何被销售的产品，可以填\n     写“内部使用”。\n\n     支付成功之后一个名为 \"pyarmor-regcode-xxxx.txt\" 的注册文件会自动通过电子邮\n     件发送过去，把注册文件保存到磁盘，然后使用下面的命令进行注册\n\n         pyarmor register pyarmor-regcode-xxxx.txt\n\n     运行下面的命令查看注册信息\n\n         pyarmor register\n\n     注册成功之后，请彻底删除使用试用版本生成的所有文件，然后重新进行加密。\n\n     软件注册码永久有效，可以一直使用，但是不能转接或者租用。\n\n  6. 本软件可免费分发（除下列例外），分发前提为分发包未以任何形式被修改：\n\n     a) 任何人未经书面许可的情况下，不得再分发软件包的任何单独部分。\n\n     b) 在未经书面许可的情况下，本软件不得在任何其它软件包中发布。本软件必须保持\n        以未经修改的原始安装文件而供下载，而不得对用户附带任何障碍或条件，例如收\n        取下载费用，或以用户提供联系信息为前提来提供下载。\n\n     c) 本软件未经修改的安装文件必须以纯净而独立的形式提供。禁止任何形式的捆绑。\n        尤其禁止使用任何安装或下载软件来提供任何下载捆绑，除非获得书面形式同意。\n\n     d) 本软件的分发者不得包含、指向或引用黑客/破解、注册文件及注册文件生成器。\n\n     e) 违反上述条件的情况下，许可自动立即失效。\n\n  7. 本软件“按原样”发布。不提供任何明示或暗示的担保。您的使用需要自己承担风险。无\n     论作者、许可人或许可人的经销商，均不对使用或误用本软件时发生的数据丢失、损坏、\n     利润损失或其它任何形式的损失而负责。\n\n  8. 本软件的二进制代码不得被进行反向工程来重新创建本软件专用的加密算法。\n\n  9. 本协议由许可人负责解释。任何时候许可人对本协议做出任何修改，修改版本自动适用\n     于用户。\n\n 10. 安装并使用本软件意味着接受本许可的这些条款和条件。如果您不同意本许可的条款，您必\n     须从您的存储设备中删除本软件全部文件并终止使用本软件。\n"
        },
        {
          "name": "LICENSE.7",
          "type": "blob",
          "size": 6.5234375,
          "content": "     END USER LICENSE AGREEMENT\n\n     The following agreement regarding PyArmor - referred to as \"software\" - is\n     made between Jondy Zhao - referred to as \"licensor\" - and anyone who is\n     installing, accessing or in any other way using the software - referred to\n     as \"user\".\n\n  1. The author and holder of the copyright of the software is Jondy Zhao.\n\n  2. The software is distributed as Free To Use But Restricted:\n\n     a. The trial version could not obfuscate the big scripts.\n\n     b. The scripts obfuscated by trial version are not private. It\n        means anyone could generate the license file which works for\n        these obfuscated scripts.\n\n     c. The trial version could not download the latest dynamic library\n        of extra platforms, the old versions still are available.\n\n     d. The super plus mode is not availaible in the trial version.\n\n     e. Without permission the trial version may not be used for the Python\n        scripts of any commercial product.\n\n  3. There are 2 basic types of licenses issued for the software. These are:\n\n     a. A personal license for home users. The user purchases one license to use\n        the software on his own computer. When placing an order of this kind of\n        license, please fill real name as registration name, this software is\n        only authorized to this registration name.\n\n        Home users may use their personal license to obfuscate all the python\n        scripts which are property of the license owner, to generate private\n        license files for the obfuscated scripts and distribute them and all the\n        required files to any other machine or device.\n\n        Home users could NOT obfuscate any python script which is NOT property\n        of the license owner.\n\n     b. A enterprise license for business users. The user purchases one license\n        to use the software for one product of an organization. When placing an\n        order of this kind of license, please fill orginization name plus\n        product name, this software is only authorized to this registration\n        name.\n\n        One product include the current version and any other latter versions of\n        the same product.\n\n        Business users may use their enterprise license on all computers and\n        embedded devices to obfuscate all the python scripts of this product, to\n        generate private license files for these obfuscated scripts and\n        distribute them and all the required files to any other machine and\n        device.\n\n        Without permission of \"licensor\" the license purchased for one product\n        should not be used for other product. Business users should purchase new\n        license for different product.\n\n     A user who purchased a license, is granted a non-exclusive right to use\n     the software on as many computers as defined by the licensing terms above\n     according to the number of licenses purchased, for any legal purpose.\n\n     In any case, the software is only used to obfuscate the Python scripts\n     owned by the authorized person or enterprise.\n\n  4. There are no additional license fees, apart from the cost of the license,\n     associated with the creation and distribution of obfuscated python scripts.\n     Owners of a license may use their copies of the software to produce\n     obfuscated python scripts and to distribute those files free of any\n     additional royalties.\n\n  5. To buy a license, please run command\n\n         pyarmor register --buy\n\n     Or open the following url in any web browser\n\n         https://order.shareit.com/cart/add?vendorid=200089125&PRODUCT[300871197]=1\n\n     For personal license, please fill the registeration name with real name\n     when placing an order.\n\n     For enterprise license, please fill the registeration name with enterprise\n     name, and also fill \"License To Product\" with the product name which will\n     use this software.\n\n     A registration file generally named \"pyarmor-regcode-xxxx.txt\" will be sent\n     by email immediately after payment is completed successfully.\n\n     Save it to disk, then run the following command to register PyArmor\n\n         pyarmor register /path/to/pyarmor-regcode-xxxx.txt\n\n     Check the registration information:\n\n         pyarmor register\n\n     After registration successfully, remove all the obfuscated scripts by trial\n     version, then obfuscate them again.\n\n     The registration code is valid forever, it can be used permanently. But it\n     may not be rented or leased.\n\n  6. The software's free version may be freely distributed, with exceptions\n     noted below, provided the distribution package is not modified in any way.\n\n     a. Nobody may distribute separate parts of the package, without written\n        permission.\n\n     b. The software's unlicensed free version may not be distributed inside of\n        any other software package without written permission.  The software\n        must remain in the original unmodified installation file for download\n        without any barrier and conditions to the user such as collecting fees\n        for the download or making the download conditional on the user giving\n        his contact data.\n\n     c. The unmodified installation file of PyArmor must be provided pure and\n        unpaired. Any bundling is interdicted. In particular the use of any\n        install or download software which is providing any kind of download\n        bundles is prohibited unless granted by Jondy Zhao written form.\n\n     d. Hacks/cracks, keys or key generators may not be included, pointed to\n        or referred to by the distributor of the free version.\n\n     e. In case of violation of the precedent conditions the allowance\n        lapses immediately and automatically.\n\n  7. The software is distributed \"as is\". No warranty of any kind is expressed\n     or implied. You use at your own risk. Neither the author, the licensor\n     nor the agents of the licensor will be liable for data loss, damages,\n     loss of profits or any other kind of loss while using or misusing\n     this software.\n\n  8. The dynamic library of the software may not be used for reverse engineer to\n     re-create the PyArmor obfuscated algorithm.\n\n  9. The licensor shall be responsible for interpretation of the\n     agreement. Anytime the licensor made any modifications to the agreement,\n     the modified version shall be applicable to the user automatically.\n\n 10. Installing and using the software signifies acceptance of these terms\n     and conditions of the license. If you do not agree with the terms of this\n     license, you must remove all software files from your storage devices\n     and cease to use the software.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1865234375,
          "content": "# recursive-include docs/examples *.py *.xml README* LICENSE\n# include docs/user-guide.html docs/rationale.html\n# include LICENSE LICENSE-ZH\nexclude src/pyarmor-deprecated.py src/pyimcore.py\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3232421875,
          "content": "# Pyarmor\n\nPyarmor is a command-line tool designed for obfuscating Python scripts, binding obfuscated scripts to specific machines, and setting expiration dates for obfuscated scripts.\n\n## Key Features\n\n- **Seamless Replacement**: Obfuscated scripts remain as standard `.py` files, allowing them to seamlessly replace the original Python scripts in most cases.\n- **Balanced Obfuscation**: Offers multiple ways to obfuscate scripts to balance security and performance.\n- **Irreversible Obfuscation**: Renames functions, methods, classes, variables, and arguments.\n- **C Function Conversion**: Converts some Python functions to C functions and compiles them into machine instructions using high optimization options for irreversible obfuscation.\n- **Script Binding**: Binds obfuscated scripts to specific machines or sets expiration dates for obfuscated scripts.\n- **Themida Protection**: Protects obfuscated scripts using Themida (Windows only).\n\n## Supported Platforms\n\n- Python 2 and Python 3[^1]\n- Windows\n- Various Linux distributions, including embedded systems and Raspberry Pi\n- Apple Intel and Apple Silicon\n- Supported architectures: x86_64, aarch64, armv7, etc.[^2]\n\nFor more information, check out the [Pyarmor Environments][encironments].\n\n[^1]: Some features may be exclusive to Python 3.\n[^2]: Some features may be exclusive to specific architectures.\n\n[encironments]: https://pyarmor.readthedocs.io/en/stable/reference/environments.html\n\n## Quick start\n\n1. **Install Pyarmor**:\n```shell\npip install pyarmor\n```\n\n2. **Obfuscate the `foo.py` script**:\n```shell\npyarmor gen foo.py\n```\n\nThis command generates an obfuscated script like this at `dist/foo.py`:\n\n```python\nfrom pyarmor_runtime import __pyarmor__\n__pyarmor__(__name__, __file__, b'\\x28\\x83\\x20\\x58....')\n```\n\n3. **Run the obfuscated script**:\n```shell\npython dist/foo.py\n```\n\nFor more information, check out the [getting started tutorial][tutorial].\n\n[tutorial]: https://pyarmor.readthedocs.io/en/stable/tutorial/getting-started.html\n\n## License\n\nPyarmor is published as shareware. The free trial version never expires, but has some limitations.\n\nRefer to [Pyarmor licenses][licenses] for information on license types, features, limitations, and purchasing a Pyarmor license.\n\nPlease read the [Pyarmor EULA](LICENSE).\n\n[licenses]: https://pyarmor.readthedocs.io/en/latest/licenses.html\n\n## Getting Help\n\n1. **Consult the [Pyarmor Documentation][doc].**\n2. **Check the [FAQ][faq] for answers to common questions.**\n3. **Try the documentation [index][genindex] or the [detailed table of contents][mastertoc].**\n4. **If you still can't find the information you need, see [asking questions on GitHub][asking].**\n5. **[Report bugs][issues] following the issue template.**\n6. **For business and security inquiries, send an email to <pyarmor@163.com>.**\n\nThere are also some third-party learn platforms (not Pyarmor offical)\n\n- **[Ask Pyarmor Guru][gurubase], it is a Pyarmor-focused AI to answer your questions**\n\n[faq]: https://pyarmor.readthedocs.io/en/latest/questions.html\n[issues]: https://github.com/dashingsoft/pyarmor/issues\n[genindex]: https://pyarmor.readthedocs.io/en/stable/genindex.html\n[mastertoc]: https://pyarmor.readthedocs.io/en/stable/index.html#table-of-contents\n[asking]: https://pyarmor.readthedocs.io/en/latest/questions.html#asking-questions-in-github\n[doc]: https://pyarmor.readthedocs.io/\n[gurubase]: https://gurubase.io/g/pyarmor\n\n## Resources\n\n* [Website](https://pyarmor.dashingsoft.com)\n* [Documentation][doc]\n* [Documentation 8.x](https://pyarmor.readthedocs.io/en/v8.5.12/)\n* [Documentation 7.x](https://pyarmor.readthedocs.io/en/v7.7/)\n\n中文资源\n\n* [Pyarmor 网站](https://pyarmor.dashingsoft.com/index-zh.html)\n* [Pyarmor 在线文档](https://pyarmor.readthedocs.io/zh/latest/)\n* [Pyarmor 8.x 在线文档](https://pyarmor.readthedocs.io/zh/v8.5.12/)\n* [Pyarmor 7.x 在线文档](https://pyarmor.readthedocs.io/zh/v7.x/)\n\n## Changelog\n\nEach major version comes with a separate changelog file, detailing fixed issues, new features, and compatibility issues between different versions.\n\nMake sure to read the changelog carefully before upgrading Pyarmor:\n\n- [Pyarmor 8.x Changelog](docs/ChangeLogs.8)\n- [Pyarmor 9.x Changelog](docs/ChangeLogs.9)\n\n**Full changelogs** at [releases][releases]\n\n**Upcoming features** at [Pyarmor Release Plan](docs/ReleasePlan.md)\n\n[releases]: https://github.com/dashingsoft/pyarmor/releases\n"
        },
        {
          "name": "docs.7",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gh.py",
          "type": "blob",
          "size": 12.67578125,
          "content": "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#  @File: gh.py\n#\n#  @Author: Jondy Zhao (pyarmor@163.com)\n#\n#  @Create Date: Thu Aug 24 09:45:00 CST 2023\n#\n#  Question:\n#\n#      How to list pin issues? Now #980\n#\nimport configparser\nimport cmd\nimport json\nimport shlex\n\nfrom subprocess import Popen, check_output\nfrom string import Template\n\ncmd_query_discussions = Template('''\ngh api graphql -F owner='{owner}' -F name='{repo}' -f query='\n  query($$name: String!, $$owner: String!) {\n    repository(owner: $$owner, name: $$name) {\n      discussions(first: $nd) {\n        nodes {\n          id\n          number\n          title\n          updatedAt\n          bodyText\n          comments (last: $nc) {\n            nodes {\n              id\n              publishedAt\n              lastEditedAt\n              body\n              replies (last: $nc) {\n                nodes {\n                  id\n                  publishedAt\n                  body\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }'\n''')\n\ndiscussion_list_template = Template('''\n$num $updatedAt $discussionId\n$title\n''')\n\ndiscussion_template = Template('''\n$num $updatedAt $discussionId\n$title\n==========================================\n$body\n$comments\n''')\n\ndiscussion_comment_template = Template('''\n------------------------------------------\n$publishedAt $commentId\n$body\n$replies''')\n\nreply_comment_template = Template('''\n$publishedAt $commentId\n$body''')\n\ncmd_list_discussions = Template('''\ngh api graphql -F owner='{owner}' -F name='{repo}' -f query='\n  query($$name: String!, $$owner: String!) {\n    repository(owner: $$owner, name: $$name) {\n      discussions(first: $nd) {\n        nodes {\n          id\n          number\n          title\n          updatedAt\n        }\n      }\n    }\n  }' --template '{{range .data.repository.discussions.nodes}}\n{{.number}} {{.updatedAt}} {{.id}}\n{{.title}}\n{{end}}\n'\n''')\n\ncmd_view_discussion = Template('''\ngh api graphql -F owner='{owner}' -F name='{repo}' -f query='\n  query($$name: String!, $$owner: String!) {\n    repository(owner: $$owner, name: $$name) {\n      discussions(first: $nd) {\n        nodes {\n          id\n          number\n          title\n          updatedAt\n          bodyText\n          comments (last: $nc) {\n            nodes {\n              id\n              publishedAt\n              lastEditedAt\n              body\n            }\n          }\n        }\n      }\n    }\n  }' --template '{{range .data.repository.discussions.nodes}}\n{{\"============================\"}}\n{{.number}} {{.updatedAt}} {{.id}}\n{{.title}}\n{{.bodyText}}\n{{range .comments.nodes}}\n{{\"----------------------------\"}}\n{{.publishedAt}} {{.id}}\n{{.body}}\n{{end}}\n{{end}}\n'\n''')\n\ncmd_add_discussion_comment = Template('''\ngh api graphql -f query='\n  mutation {\n    addDiscussionComment(input: {\n      discussionId: \"$discussionId\",\n      body: \"$body\"\n    }) {\n      clientMutationId\n      comment {\n        id\n      }\n    }\n  }'\n''')\n\ncmd_discussion_graphql = 'gh api graphql'\n\nquery_add_discussion_comment = Template('''\n  mutation {\n    addDiscussionComment(input: {\n      discussionId: \"$discussionId\",\n      body: \"$body\"\n    }) {\n      clientMutationId\n      comment {\n        id\n      }\n    }\n  }\n''')\n\nquery_update_discussion_comment = Template('''\n  mutation {\n    updateDiscussionComment(input: {\n      commentId: \"$commentId\",\n      body: \"$body\"\n    }) {\n      clientMutationId\n      comment {\n        id\n      }\n    }\n  }\n''')\n\ncmd_delete_discussion_comment = Template('''\ngh api graphql -f query='\n  mutation {\n    deleteDiscussionComment(input: {\n      id: \"$commentId\"\n    }) {\n      clientMutationId\n      comment {\n        id\n        bodyText\n      }\n    }\n  }'\n''')\n\ncmd_delete_discussion = Template('''\ngh api graphql -f query='\n  mutation {\n    deleteDiscussion(input: {\n      id: \"$nodeId\"\n    }) {\n      clientMutationId\n      discussion {\n        id\n        title\n      }\n    }\n  }'\n''')\n\ncmd_list_issues = Template('''\ngh issue list --search \"sort:updated\"\n''')\n\ncmd_view_issue = Template('''\ngh issue view $issueId $options\n''')\n\ncmd_close_issue = Template('''\ngh issue close $issueId\n''')\n\ncmd_label_issue = Template('''\ngh issue edit $issueId --add-label \"$label\" --remove-label bug\n''')\n\ncmd_comment_issue = Template('''\ngh issue comment $issueId -e\n''')\n\ncmd_last_comment_issue = Template('''\ngh issue comment $issueId --edit-last\n''')\n\ncmd_list_notifications = Template('''\ngh api notifications --template '{{range .}}\n{{.id}} {{.reason}} {{.subject.type}} {{.updated_at}}\n{{.subject.url}}\n{{.subject.title}}\n{{end}}\n'\n''')\n\ncmd_mark_notification = Template('''\ngh api --method PATCH /notifications/threads/$threadId\n''')\n\ncmd_mark_all_notification = Template('''\ngh api --method PUT /repos/dashingsoft/pyarmor/notifications \\\n  -f last_read_at='$timestamp'\n''')\n\ncmd_view_issue_raw_body = Template('''\ngh issue view $issueId --json title,body --template \"\n{{.title}}\n{{.body}}\"\n''')\n\ncmd_view_issue_raw_comments = Template('''\ngh issue view $issueId -c --json title,body,comments --template \"\n{{.title}}\n{{.body}}\n{{.comments}}\n\"\n''')\n\n\ndef call_cmd(cmd):\n    Popen(cmd.strip(), shell=True).wait()\n    # args = shlex.split(cmd)\n    # Popen(args).wait()\n\n\ndef call_query(cmd, query):\n    args = shlex.split(cmd)\n    args.extend(['-f', \"query='%s'\" % shlex.quote(query).strip(\"'\")])\n    Popen(' '.join(args), shell=True).wait()\n\n\ndef read_body(prompt):\n    lines = []\n\n    try:\n        s = input(prompt + '\\n')\n        while s not in ('EOF', 'e'):\n            if not s:\n                print()\n            lines.append(s)\n            s = input()\n    except KeyboardInterrupt:\n        lines.clear()\n        print('Abort by user, there is nothing to do')\n\n    return '\\n'.join(lines)\n\n\nclass Github(cmd.Cmd):\n\n    intro = 'Welcome to Github cli shell. Type help or ? to list commands.\\n'\n    prompt = '(github) '\n\n    n_discussion = 5\n    n_discussion_comment = 3\n\n    def __init__(self):\n        super().__init__()\n        self.cfg = configparser.ConfigParser(\n            empty_lines_in_values=False,\n            interpolation=configparser.ExtendedInterpolation(),\n        )\n\n        self.discussions = None\n        self.issueId = None\n        self.discussionId = None\n\n    def do_exit(self, arg):\n        'Finish and exit'\n        print('Thank you for using Github cli')\n        return True\n    do_EOF = do_q = do_exit\n\n    def do_close(self, arg):\n        'Close issues'\n        call_cmd(cmd_close_issue.substitute(issueId=arg))\n\n    def do_rn(self, arg):\n        'Mark notification readed'\n        if arg in ('all', '*'):\n            from datetime import datetime\n            now = datetime.now().isoformat()\n            call_cmd(cmd_mark_all_notification.substitute(timestamp=now))\n        else:\n            for tid in arg.split():\n                print('mark thread %s as readed' % tid)\n                call_cmd(cmd_mark_notification.substitute(threadId=tid))\n\n    def do_li(self, arg):\n        '''List issues'''\n        call_cmd(cmd_list_issues.substitute())\n    do_l = do_li\n\n    def do_ld(self, arg):\n        '''List discussions'''\n        nd = int(arg) if arg else self.n_discussion\n        # call_cmd(cmd_list_discussions.substitute(nd=nd))\n        nc = self.n_discussion_comment\n        cmd = cmd_query_discussions.substitute(nd=nd, nc=nc)\n        res = check_output(shlex.split(cmd))\n        try:\n            self.discussions = json.loads(res)['data']['repository']\n        except Exception as e:\n            print('error:', e)\n        else:\n            lines = []\n            for node in self.discussions['discussions']['nodes']:\n                lines.append(discussion_list_template.substitute(\n                    num=node['number'],\n                    discussionId=node['id'],\n                    title=node['title'],\n                    updatedAt=node['updatedAt']))\n            print(''.join(lines))\n\n    def do_ln(self, arg):\n        '''List notifitions'''\n        call_cmd(cmd_list_notifications.substitute())\n\n    def do_vi(self, arg):\n        'View issue'\n        paras = arg.split(' ', 1)\n        issueId = int(paras[0])\n        options = ' '.join(paras[1:])\n        call_cmd(cmd_view_issue.substitute(issueId=issueId, options=options))\n        self.issueId = issueId\n    do_v = do_vi\n\n    def do_vd(self, arg):\n        'View discussion'\n        lines = []\n        for node in self.discussions['discussions']['nodes']:\n            if arg and int(arg) != node['number']:\n                continue\n            self.discussionId = node['id']\n            comments = []\n            for cnode in node['comments']['nodes']:\n                replies = []\n                for rnode in cnode['replies']['nodes']:\n                    replies.append(reply_comment_template.substitute(\n                        commentId=rnode['id'],\n                        publishedAt=rnode['publishedAt'],\n                        body=rnode['body']))\n                comments.append(discussion_comment_template.substitute(\n                    commentId=cnode['id'],\n                    publishedAt=cnode['publishedAt'],\n                    body=cnode['body'],\n                    replies=''.join(replies)))\n            lines.append(discussion_template.substitute(\n                num=node['number'],\n                discussionId=node['id'],\n                title=node['title'],\n                updatedAt=node['updatedAt'],\n                body=node['bodyText'],\n                comments=''.join(comments)))\n        print(''.join(lines))\n\n    def do_ac(self, arg):\n        'Add issue comment'\n        issueId = arg if arg else self.issueId\n        call_cmd(cmd_comment_issue.substitute(issueId=issueId))\n        self.issueId = issueId\n\n    def do_uc(self, arg):\n        'Update issue last comment'\n        issueId = arg if arg else self.issueId\n        call_cmd(cmd_last_comment_issue.substitute(issueId=issueId))\n        self.issueId = issueId\n\n    def _find_discussion(self, arg):\n        for node in self.discussions['discussions']['nodes']:\n            if arg:\n                if int(arg) == node['number']:\n                    self.discussionId = node['id']\n                    return node\n            elif self.discussionId == node['id']:\n                return node\n\n    def do_ad(self, arg):\n        'Add discussion comment'\n        node = self._find_discussion(arg)\n        if node:\n            print(node['number'], node['title'])\n            discussionId = node['id']\n\n            body = read_body('Add discussion comment:')\n            if body:\n                query = query_add_discussion_comment.substitute(\n                    discussionId=discussionId,\n                    body=body.replace('\"', r'\\\"'))\n                call_query(cmd_discussion_graphql, query)\n\n    def do_dd(self, arg):\n        'Delete discussion comment'\n        call_cmd(cmd_delete_discussion_comment.substitute(commentId=arg))\n\n    def do_ud(self, arg):\n        'Update discussion comment'\n        oldBody = None\n        for node in self.discussions['discussions']['nodes']:\n            for cnode in node['comments']['nodes']:\n                if cnode['id'] == arg:\n                    oldBody = cnode['body']\n                    break\n            if oldBody:\n                break\n        else:\n            print('No comment found, do nothing')\n\n        print('Original issue comment:')\n        print()\n        print(oldBody)\n        print()\n\n        body = oldBody\n        while True:\n            pat = input('Replace: ')\n            if not pat:\n                break\n            s = input('with : ')\n            body = body.replace(pat, s)\n\n        print()\n        if body == oldBody:\n            print('There is no changes, do thing')\n        else:\n            print('Updated comment:')\n            print()\n            print(body)\n            print()\n            if input('Are you sure (y/n) : ') in ('', 'y', 'Y'):\n                query = query_update_discussion_comment.substitute(\n                    commentId=arg,\n                    body=body.replace('\"', r'\\\"'))\n                call_query(cmd_discussion_graphql, query)\n\n    def do_cii(self, arg):\n        'Quickly close issue by marked as documented or invalid'\n        if arg.find(' ') == -1:\n            issueId, label = arg, 'invalid'\n        else:\n            issueId, label = arg.split()\n            if label in ('d', 'doc'):\n                label = 'documented'\n            elif label in ('w', 'wrong'):\n                label = 'wrong usage'\n        if label not in ('documented', 'invalid', 'wrong usage'):\n            print('invalid label \"%s\"' % label)\n            return\n        call_cmd(cmd_label_issue.substitute(issueId=issueId, label=label))\n        call_cmd(cmd_close_issue.substitute(issueId=issueId))\n\n    def do_shell(self, arg):\n        'Execute shell command'\n        call_cmd(arg)\n\n\ndef parse(arg):\n    'Convert a series of zero or more numbers to an argument tuple'\n    return tuple(map(int, arg.split()))\n\n\nif __name__ == '__main__':\n    Github().cmdloop()\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.26953125,
          "content": "# Always prefer setuptools over distutils\ntry:\n    from setuptools import setup\nexcept ImportError:\n    from distutils.core import setup\n\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\nfrom sys import argv\n\nfrom pyarmor.config import version\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the README file\nwith open(path.join(here, 'pyarmor', 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\npyarmor_data_files = [\n    'LICENSE', 'LICENSE-ZH',\n    'pyshield.key', 'pyshield.lic', 'public.key',\n    'product.key', 'license.tri', 'README.rst',\n    'protect_code.pt', 'protect_code2.pt', 'public_capsule.zip',\n    'plugins/README.md', 'plugins/check_ntp_time.py',\n    'examples/README.md', 'examples/README-ZH.md',\n    'examples/*.sh', 'examples/*.bat',\n    'examples/simple/*.py', 'examples/testmod/*.py',\n    'examples/testpkg/*.py', 'examples/testpkg/mypkg/*.py',\n    'examples/pybench/*.py', 'examples/pybench/package/*.py',\n    'examples/py2exe/*.py', 'examples/cx_Freeze/*.py',\n    'examples/helloworld/*.py',\n]\n\nplatform_data_files = [\n    'platforms/windows/x86/_pytransform.dll',\n    'platforms/windows/x86_64/_pytransform.dll',\n    'platforms/linux/x86/_pytransform.so',\n    'platforms/linux/x86_64/_pytransform.so',\n    'platforms/darwin/x86_64/_pytransform.dylib',\n]\n\nif argv[1] == 'bdist_wheel':\n    for opt in argv[1:]:\n        if opt.startswith('--plat-name'):\n            name = opt.split('=')[1]\n            name = 'macosx_x86_64' if name.startswith('macosx_') else \\\n                'linux_x86_64' if name == 'manylinux1_x86_64' else \\\n                name\n            for i in range(len(platform_data_files)):\n                if platform_data_files[i].find(name) > -1:\n                    platform_data_files[i] = \\\n                        platform_data_files[i].split('/')[-1]\n                    break\n            break\n\nsetup(\n    name='pyarmor',\n\n    # Versions should comply with PEP 440:\n    # https://www.python.org/dev/peps/pep-0440/\n    version=version,\n    description='A tool used to obfuscate python scripts, bind obfuscated' \\\n                ' scripts to fixed machine or expire obfuscated scripts.',\n    long_description=long_description,\n\n    license='Free To Use But Restricted',\n\n    url='https://github.com/dashingsoft/pyarmor',\n    author='Jondy Zhao',\n    author_email='pyarmor@163.com',\n\n    # For a list of valid classifiers, see\n    # https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 4 - Beta',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n        'Topic :: Utilities',\n        'Topic :: Security',\n        'Topic :: System :: Software Distribution',\n\n        # Pick your license as you wish\n        'License :: Free To Use But Restricted',\n\n        # Support platforms\n        'Operating System :: MacOS',\n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 3',\n    ],\n\n    # This field adds keywords for your project which will appear on the\n    # project page. What does your project relate to?\n    #\n    # Note that this is a string of words separated by whitespace, not a list.\n    keywords='protect obfuscate encrypt obfuscation distribute',\n\n    packages=['pyarmor', 'pyarmor.polyfills', 'pyarmor.helper', 'pyarmor.cli'],\n    package_dir={'pyarmor': 'pyarmor'},\n    package_data={\n        'pyarmor': pyarmor_data_files + platform_data_files,\n        'pyarmor.cli': ['default.cfg', 'public_capsule.zip', 'core.data.*'],\n    },\n\n    install_requires=[\n        'pyarmor.cli.core~=7.6.2'\n    ],\n\n    entry_points={\n        'console_scripts': [\n            'pyarmor=pyarmor.pyarmor:main_entry_8',\n            'pyarmor-auth=pyarmor.cli.docker:main',\n            'pyarmor-7=pyarmor.pyarmor:main_entry',\n            'pyarmor-8=pyarmor.cli.__main__:main',\n        ],\n    },\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests.8",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}