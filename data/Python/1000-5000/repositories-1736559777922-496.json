{
  "metadata": {
    "timestamp": 1736559777922,
    "page": 496,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "slackapi/python-slack-sdk",
      "stars": 3881,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.029296875,
          "content": "[flake8]\nmax-line-length = 125"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.0634765625,
          "content": "# change black settings\n108955b601e768fd56696be903fc8b471c73ebf7\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.35546875,
          "content": "# general things to ignore\nbuild/\ndist/\n.eggs/\n*.egg-info/\n*.egg\n*.py[cod]\n__pycache__/\n*.so\n*~\n\n# virtualenv\nenv*/\nvenv*/\n.venv*/\n.env*/\n\n# codecov / coverage\n.coverage*\ncov_*\ncoverage.xml\n\n# due to using tox and pytest\n.tox\n.cache\n.pytest_cache/\n.python-version\npip\n.mypy_cache/\n\n# JetBrains PyCharm settings\n.idea/\n\ntmp.txt\n.DS_Store\nlogs/\n\n.pytype/\n*.db\n.env*\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015- Slack Technologies, LLC\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.05859375,
          "content": "include README.md LICENSE slack/py.typed slack_sdk/py.typed\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.173828125,
          "content": "<h1 align=\"center\">Python Slack SDK</h1>\n\n<p align=\"center\">\n    <a href=\"https://github.com/slackapi/python-slack-sdk/actions/workflows/ci-build.yml\">\n        <img alt=\"CI Build\" src=\"https://img.shields.io/github/actions/workflow/status/slackapi/python-slack-sdk/ci-build.yml\"></a>\n    <a href=\"https://codecov.io/gh/slackapi/python-slack-sdk\">\n        <img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/gh/slackapi/python-slack-sdk\"></a>\n    <a href=\"https://pepy.tech/project/slack-sdk\">\n        <img alt=\"Pepy Total Downloads\" src=\"https://img.shields.io/pepy/dt/slack-sdk\"></a>\n    <br>\n    <a href=\"https://pypi.org/project/slack-sdk/\">\n        <img alt=\"PyPI - Version\" src=\"https://img.shields.io/pypi/v/slack-sdk\"></a>\n    <a href=\"https://pypi.org/project/slack-sdk/\">\n        <img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/slack-sdk.svg\"></a>\n    <a href=\"https://tools.slack.dev/python-slack-sdk/\">\n        <img alt=\"Documentation\" src=\"https://img.shields.io/badge/dev-docs-yellow\"></a>\n</p>\n\nThe Slack platform offers several APIs to build apps. Each Slack API delivers part of the capabilities from the platform, so that you can pick just those that fit for your needs. This SDK offers a corresponding package for each of Slackâ€™s APIs. They are small and powerful when used independently, and work seamlessly when used together, too.\n\n**Comprehensive documentation on using the Slack Python can be found at [https://tools.slack.dev/python-slack-sdk/](https://tools.slack.dev/python-slack-sdk/)**\n\n---\n\nWhether you're building a custom app for your team, or integrating a third party service into your Slack workflows, Slack Developer Kit for Python allows you to leverage the flexibility of Python to get your project up and running as quickly as possible.\n\nThe **Python Slack SDK** allows interaction with:\n\n- `slack_sdk.web`: for calling the [Web API methods][api-methods]\n- `slack_sdk.webhook`: for utilizing the [Incoming Webhooks](https://api.slack.com/messaging/webhooks) and [`response_url`s in payloads](https://api.slack.com/interactivity/handling#message_responses)\n- `slack_sdk.signature`: for [verifying incoming requests from the Slack API server](https://api.slack.com/authentication/verifying-requests-from-slack)\n- `slack_sdk.socket_mode`: for receiving and sending messages over [Socket Mode](https://api.slack.com/socket-mode) connections\n- `slack_sdk.audit_logs`: for utilizing [Audit Logs APIs](https://api.slack.com/admins/audit-logs)\n- `slack_sdk.scim`: for utilizing [SCIM APIs](https://api.slack.com/admins/scim)\n- `slack_sdk.oauth`: for implementing the [Slack OAuth flow](https://api.slack.com/authentication/oauth-v2)\n- `slack_sdk.models`: for constructing [Block Kit](https://api.slack.com/block-kit) UI components using easy-to-use builders\n- `slack_sdk.rtm`: for utilizing the [RTM API][rtm-docs]\n\nIf you want to use our [Events API][events-docs] and Interactivity features, please check the [Bolt for Python][bolt-python] library. Details on the Tokens and Authentication can be found in our [Auth Guide](https://tools.slack.dev/python-slack-sdk/installation/).\n\n## slackclient is in maintenance mode\n\nAre you looking for [slackclient](https://pypi.org/project/slackclient/)? The website is live [here](https://tools.slack.dev/python-slackclient/) just like before. However, the slackclient project is in maintenance mode now and this [`slack_sdk`](https://pypi.org/project/slack-sdk/) is the successor. If you have time to make a migration to slack_sdk v3, please follow [our migration guide](https://tools.slack.dev/python-slack-sdk/v3-migration/) to ensure your app continues working after updating.\n\n## Table of contents\n\n* [Requirements](#requirements)\n* [Installation](#installation)\n* [Getting started tutorial](#getting-started-tutorial)\n* [Basic Usage of the Web Client](#basic-usage-of-the-web-client)\n  * [Sending a message to Slack](#sending-a-message-to-slack)\n  * [Uploading files to Slack](#uploading-files-to-slack)\n* [Async usage](#async-usage)\n  * [WebClient as a script](#asyncwebclient-in-a-script)\n  * [WebClient in a framework](#asyncwebclient-in-a-framework)\n* [Advanced Options](#advanced-options)\n  * [SSL](#ssl)\n  * [Proxy](#proxy)\n  * [DNS performance](#dns-performance)\n  * [Example](#example)\n* [Migrating from v1](#migrating-from-v1)\n* [Support](#support)\n* [Development](#development)\n\n### Requirements\n\n---\n\nThis library requires Python 3.6 and above. If you require Python 2, please use our [SlackClient - v1.x][slackclientv1]. If you're unsure how to check what version of Python you're on, you can check it using the following:\n\n> **Note:** You may need to use `python3` before your commands to ensure you use the correct Python path. e.g. `python3 --version`\n\n```bash\npython --version\n\n-- or --\n\npython3 --version\n```\n\n### Installation\n\nWe recommend using [PyPI][pypi] to install the Slack Developer Kit for Python.\n\n```bash\n$ pip install slack_sdk\n```\n\n### Getting started tutorial\n\n---\n\nWe've created this [tutorial](https://github.com/slackapi/python-slack-sdk/tree/main/tutorial) to build a basic Slack app in less than 10 minutes. It requires some general programming knowledge, and Python basics. It focuses on the interacting with the Slack Web API and RTM API. Use it to give you an idea of how to use this SDK.\n\n**[Read the tutorial to get started!](https://github.com/slackapi/python-slack-sdk/tree/main/tutorial)**\n\n### Basic Usage of the Web Client\n\n---\n\nSlack provide a Web API that gives you the ability to build applications that interact with Slack in a variety of ways. This Development Kit is a module based wrapper that makes interaction with that API easier. We have a basic example here with some of the more common uses but a full list of the available methods are available [here][api-methods]. More detailed examples can be found in [our guide](https://tools.slack.dev/python-slack-sdk/web/).\n\n#### Sending a message to Slack\n\nOne of the most common use-cases is sending a message to Slack. If you want to send a message as your app, or as a user, this method can do both. In our examples, we specify the channel name, however it is recommended to use the `channel_id` where possible. Also, if your app's bot user is not in a channel yet, invite the bot user before running the code snippet (or add `chat:write.public` to Bot Token Scopes for posting in any public channels).\n\n```python\nimport os\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = WebClient(token=os.environ['SLACK_BOT_TOKEN'])\n\ntry:\n    response = client.chat_postMessage(channel='#random', text=\"Hello world!\")\n    assert response[\"message\"][\"text\"] == \"Hello world!\"\nexcept SlackApiError as e:\n    # You will get a SlackApiError if \"ok\" is False\n    assert e.response[\"ok\"] is False\n    assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n    print(f\"Got an error: {e.response['error']}\")\n    # Also receive a corresponding status_code\n    assert isinstance(e.response.status_code, int)\n    print(f\"Received a response status_code: {e.response.status_code}\")\n```\n\nHere we also ensure that the response back from Slack is a successful one and that the message is the one we sent by using the `assert` statement.\n\n#### Uploading files to Slack\n\nWe've changed the process for uploading files to Slack to be much easier and straight forward. You can now just include a path to the file directly in the API call and upload it that way.\n\n```python\nimport os\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = WebClient(token=os.environ['SLACK_BOT_TOKEN'])\n\ntry:\n    filepath=\"./tmp.txt\"\n    response = client.files_upload_v2(channel='C0123456789', file=filepath)\n    assert response[\"file\"]  # the uploaded file\nexcept SlackApiError as e:\n    # You will get a SlackApiError if \"ok\" is False\n    assert e.response[\"ok\"] is False\n    assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n    print(f\"Got an error: {e.response['error']}\")\n```\n\nMore details on the `files_upload_v2` method can be found [here][files_upload_v2].\n\n### Async usage\n\n`AsyncWebClient` in this SDK requires [AIOHttp][aiohttp] under the hood for asynchronous requests.\n\n#### AsyncWebClient in a script\n\n```python\nimport asyncio\nimport os\nfrom slack_sdk.web.async_client import AsyncWebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = AsyncWebClient(token=os.environ['SLACK_BOT_TOKEN'])\n\nasync def post_message():\n    try:\n        response = await client.chat_postMessage(channel='#random', text=\"Hello world!\")\n        assert response[\"message\"][\"text\"] == \"Hello world!\"\n    except SlackApiError as e:\n        assert e.response[\"ok\"] is False\n        assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n        print(f\"Got an error: {e.response['error']}\")\n\nasyncio.run(post_message())\n```\n\n#### AsyncWebClient in a framework\n\nIf you are using a framework invoking the asyncio event loop like : sanic/jupyter notebook/etc.\n\n```python\nimport os\nfrom slack_sdk.web.async_client import AsyncWebClient\nfrom slack_sdk.errors import SlackApiError\n\nclient = AsyncWebClient(token=os.environ['SLACK_BOT_TOKEN'])\n# Define this as an async function\nasync def send_to_slack(channel, text):\n    try:\n        # Don't forget to have await as the client returns asyncio.Future\n        response = await client.chat_postMessage(channel=channel, text=text)\n        assert response[\"message\"][\"text\"] == text\n    except SlackApiError as e:\n        assert e.response[\"ok\"] is False\n        assert e.response[\"error\"]  # str like 'invalid_auth', 'channel_not_found'\n        raise e\n\nfrom aiohttp import web\n\nasync def handle_requests(request: web.Request) -> web.Response:\n    text = 'Hello World!'\n    if 'text' in request.query:\n        text = \"\\t\".join(request.query.getall(\"text\"))\n    try:\n        await send_to_slack(channel=\"#random\", text=text)\n        return web.json_response(data={'message': 'Done!'})\n    except SlackApiError as e:\n        return web.json_response(data={'message': f\"Failed due to {e.response['error']}\"})\n\n\nif __name__ == \"__main__\":\n    app = web.Application()\n    app.add_routes([web.get(\"/\", handle_requests)])\n    # e.g., http://localhost:3000/?text=foo&text=bar\n    web.run_app(app, host=\"0.0.0.0\", port=3000)\n```\n\n### Advanced Options\n\n#### SSL\n\nYou can provide a custom SSL context or disable verification by passing the `ssl` option, supported by both the RTM and the Web client.\n\nFor async requests, see the [AIOHttp SSL documentation](https://docs.aiohttp.org/en/stable/client_advanced.html#ssl-control-for-tcp-sockets).\n\nFor sync requests, see the [urllib SSL documentation](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen).\n\n#### Proxy\n\nA proxy is supported when making async requests, pass the `proxy` option, supported by both the RTM and the Web client.\n\nFor async requests, see [AIOHttp Proxy documentation](https://docs.aiohttp.org/en/stable/client_advanced.html#proxy-support).\n\nFor sync requests, setting either `HTTPS_PROXY` env variable or the `proxy` option works.\n\n#### DNS performance\n\nUsing the async client and looking for a performance boost? Installing the optional dependencies (aiodns) may help speed up DNS resolving by the client. We've included it as an extra called \"optional\":\n```bash\n$ pip install slack_sdk[optional]\n```\n\n#### Example\n\n```python\nimport os\nfrom slack_sdk import WebClient\nfrom ssl import SSLContext\n\nsslcert = SSLContext()\n# pip3 install proxy.py\n# proxy --port 9000 --log-level d\nproxyinfo = \"http://localhost:9000\"\n\nclient = WebClient(\n    token=os.environ['SLACK_BOT_TOKEN'],\n    ssl=sslcert,\n    proxy=proxyinfo\n)\nresponse = client.chat_postMessage(channel=\"#random\", text=\"Hello World!\")\nprint(response)\n```\n\n### Migrating from v2\n\nIf you're migrating from slackclient v2.x of slack_sdk to v3.x, Please follow our migration guide to ensure your app continues working after updating.\n\n**[Check out the Migration Guide here!](https://tools.slack.dev/python-slack-sdk/v3-migration/)**\n\n### Migrating from v1\n\nIf you're migrating from v1.x of slackclient to v2.x, Please follow our migration guide to ensure your app continues working after updating.\n\n**[Check out the Migration Guide here!](https://github.com/slackapi/python-slack-sdk/wiki/Migrating-to-2.x)**\n\n### Support\n\n---\n\nIf you get stuck, weâ€™re here to help. The following are the best ways to get assistance working through your issue:\n\nUse our [Github Issue Tracker][gh-issues] for reporting bugs or requesting features.\nVisit the [Slack Community][slack-community] for getting help using Slack Developer Kit for Python or just generally bond with your fellow Slack developers.\n\n### Contributing\n\nWe welcome contributions from everyone! Please check out our\n[Contributor's Guide](.github/contributing.md) for how to contribute in a\nhelpful and collaborative way.\n\n<!-- Markdown links -->\n\n[slackclientv1]: https://github.com/slackapi/python-slackclient/tree/v1\n[api-methods]: https://api.slack.com/methods\n[rtm-docs]: https://api.slack.com/rtm\n[events-docs]: https://api.slack.com/events-api\n[bolt-python]: https://github.com/slackapi/bolt-python\n[pypi]: https://pypi.org/\n[gh-issues]: https://github.com/slackapi/python-slack-sdk/issues\n[slack-community]: https://slackcommunity.com/\n[files_upload_v2]: https://github.com/slackapi/python-slack-sdk/releases/tag/v3.19.0\n[aiohttp]: https://aiohttp.readthedocs.io/\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.115234375,
          "content": "coverage:\n  status:\n    project:\n      default:\n        threshold: 2.0%\n    patch:\n      default:\n        target: 50%\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.33203125,
          "content": "[build-system]\nrequires = [\"setuptools\", \"pytest-runner\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"slack_sdk\"\ndynamic = [\"version\", \"readme\", \"authors\", \"optional-dependencies\"]\ndescription = \"The Slack API Platform SDK for Python\"\nlicense = { text = \"MIT\" }\nrequires-python = \">=3.6\"\nkeywords = [\n\t\"slack\",\n\t\"slack-api\",\n\t\"web-api\",\n\t\"slack-rtm\",\n\t\"websocket\",\n\t\"chat\",\n\t\"chatbot\",\n\t\"chatops\",\n]\nclassifiers = [\n\t\"Development Status :: 5 - Production/Stable\",\n\t\"Intended Audience :: Developers\",\n\t\"Topic :: Communications :: Chat\",\n\t\"Topic :: System :: Networking\",\n\t\"Topic :: Office/Business\",\n\t\"License :: OSI Approved :: MIT License\",\n\t\"Programming Language :: Python\",\n\t\"Programming Language :: Python :: 3 :: Only\",\n\t\"Programming Language :: Python :: 3.6\",\n\t\"Programming Language :: Python :: 3.7\",\n\t\"Programming Language :: Python :: 3.8\",\n\t\"Programming Language :: Python :: 3.9\",\n\t\"Programming Language :: Python :: 3.10\",\n\t\"Programming Language :: Python :: 3.11\",\n\t\"Programming Language :: Python :: 3.12\",\n\t\"Programming Language :: Python :: 3.13\",\n\t\"Programming Language :: Python :: Implementation :: CPython\",\n\t\"Programming Language :: Python :: Implementation :: PyPy\",\n]\n\n\n[project.urls]\nDocumentation = \"https://slack.dev/python-slack-sdk/\"\n\n[tool.setuptools.packages.find]\ninclude = [\"slack*\", \"slack_sdk*\"]\n\n[tool.setuptools.dynamic]\nversion = { attr = \"slack_sdk.version.__version__\" }\nreadme = { file = [\"README.md\"], content-type = \"text/markdown\" }\noptional-dependencies.optional = { file = [\"requirements/optional.txt\"] }\n\n[tool.distutils.bdist_wheel]\nuniversal = true\n\n[tool.black]\nline-length = 125\n\n[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\nlog_file = \"logs/pytest.log\"\nlog_file_level = \"DEBUG\"\nlog_format = \"%(asctime)s %(levelname)s %(message)s\"\nlog_date_format = \"%Y-%m-%d %H:%M:%S\"\nfilterwarnings = [\n\t\"ignore:\\\"@coroutine\\\" decorator is deprecated since Python 3.8, use \\\"async def\\\" instead:DeprecationWarning\",\n\t\"ignore:The loop argument is deprecated since Python 3.8, and scheduled for removal in Python 3.10.:DeprecationWarning\",\n\t\"ignore:slack.* package is deprecated. Please use slack_sdk.* package instead.*:UserWarning\",\n]\nasyncio_mode = \"auto\"\n\n\n[tool.mypy]\nfiles = \"slack_sdk/\"\nexclude = [\"slack_sdk/scim\", \"slack_sdk/rtm\"]\nforce_union_syntax = true\nwarn_unused_ignores = true\nenable_error_code = \"ignore-without-code\"\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.201171875,
          "content": "; Legacy package configuration, prefer pyproject.toml over setup.cfg or setup.py\n[metadata]\nurl=https://github.com/slackapi/python-slack-sdk\nauthor=Slack Technologies, LLC\nauthor_email=opensource@slack.com\n"
        },
        {
          "name": "slack",
          "type": "tree",
          "content": null
        },
        {
          "name": "slack_sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tutorial",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}