{
  "metadata": {
    "timestamp": 1736559521898,
    "page": 111,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "awslabs/gluonts",
      "stars": 4718,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".devtools",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.173828125,
          "content": "# .git/\n.mypy_cache/\n\nbuild\ndist\ndocs\ntest\n\n**/*.egg-info\n**/*.eggs/\n**/*.pyc\n**/*.swp\n\n.tox\n.coverage\ncodecov.yml\n**/html/*\n**/__pycache__\n\n# Compiled Documentation\ndocs/_build\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.041015625,
          "content": "src/gluonts/meta/_version.py export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.796875,
          "content": "*.pyc\n*.pyo\n*.class\n*~\n*#\n/docs/_build\n/runpy\n/build\n.coverage*\n**/.idea\n**/.history\n**/.cache\n**/.eggs\n*.egg\n*.egg-info\n.*.swp\n.mypy_cache\n.pytest_cache\ntags\n__pycache__\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\npip-wheel-metadata/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndocs/api/gluonts\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pycharm\n.idea\n\n# test data\ntests/data/\ntests/externaldata/\n\n# docs\ndocs/html\n.DS_Store\n\n# release\ndocs/tutorials/**/*.zip\ndocs/tutorials/**/*.ipynb\n\nconda\n\n# temp files\n*.swp\n\n# vscode\n.vscode\n\n# not to be tracked\nsrc/gluonts/version.py\n\n# makefiles with own credentials\nMakefile.own\n\nlightning_logs/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3017578125,
          "content": "## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.791015625,
          "content": "# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional\ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary\ninformation to effectively respond to your bug report or contribution.\n\n## Questions and discussion topics\n\nQuestions and discussion topics can be proposed using [discussions](https://github.com/awslabs/gluonts/discussions).\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub [issue tracker](https://github.com/awslabs/gluonts/issues/new/choose) to report bugs or suggest features.\n\nWhen filing an issue, please check [existing open](https://github.com/awslabs/gluonts/issues), or [recently closed](https://github.com/awslabs/gluonts/issues?utf8=%E2%9C%93&q=is%3Aissue%20is%3Aclosed%20), issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n## Contributing via Pull Requests\n\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the `dev` branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass by executing `pytest`.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and\n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n## Development setup\n\nPlease refer to the [documentation](https://ts.gluon.ai/dev/community/devsetup.html) on how to set up your development environment.\n\n## Finding contributions to work on\n\nLooking at the existing issues is a great way to find something to contribute on: issues labeled with\n['good first issue'](https://github.com/awslabs/gluonts/labels/good%20first%20issue) or\n['help wanted'](https://github.com/awslabs/gluonts/labels/help%20wanted)\nare a great place to start.\n\n## Code of Conduct\n\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n## Security issue notifications\n\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\n## Licensing\n\nSee the [LICENSE](https://github.com/awslabs/gluonts/blob/dev/LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n\nWe may ask you to sign a [Contributor License Agreement (CLA)](http://en.wikipedia.org/wiki/Contributor_License_Agreement) for larger changes.\n"
        },
        {
          "name": "Justfile",
          "type": "blob",
          "size": 1.3955078125,
          "content": "# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\nROOTDIR := justfile_directory()\nMD2IPYNB := ROOTDIR + \"/docs/md2ipynb.py\"\n\nmode := \"release\"\n\ndocs: compile_notebooks\n  make -C docs html # SPHINXOPTS=-W\n\nclean:\n  git clean -ff -d -x --exclude=\"{{ROOTDIR}}/tests/externaldata/*\" --exclude=\"{{ROOTDIR}}/tests/data/*\" --exclude=\"{{ROOTDIR}}/conda/\"\n\ncompile_notebooks:\n    python -m ipykernel install --user --name docsbuild\n    python {{MD2IPYNB}} --kernel docsbuild docs/tutorials/**/*.md.template --mode {{mode}}\n\nrelease:\n  python setup.py sdist\n\nblack:\n  black --check --diff --color src test examples\n\nmypy:\n  python setup.py type_check\n\nlicense:\n  python .devtools/license check src test\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.904296875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.3427734375,
          "content": "\n# include all of gluonts\ngraft src/gluonts\n\n# except the nursery\nprune src/gluonts/nursery\n\ngraft docs\ngraft requirements\ngraft test\n\ninclude NOTICE\n\nprune .devtools\nprune .gitattributes\nprune .github\nprune examples\nprune evaluations\n\nexclude .dockerignore\nexclude .gitignore\nexclude dev_setup.sh\n\nglobal-exclude */__pycache__/*\nglobal-exclude *.pyc\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.09375,
          "content": "Gluon Time Series\nCopyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved. \n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6220703125,
          "content": "<img class=\"hide-on-website\" height=\"100px\" src=\"https://ts.gluon.ai/dev/_static/gluonts.svg\">\n\n# GluonTS - Probabilistic Time Series Modeling in Python\n\n[![PyPI](https://img.shields.io/pypi/v/gluonts.svg?style=flat-square&color=b75347)](https://pypi.org/project/gluonts/)\n[![GitHub](https://img.shields.io/github/license/awslabs/gluonts.svg?style=flat-square&color=df7e66)](./LICENSE)\n[![Static](https://img.shields.io/static/v1?label=docs&message=stable&color=edc775&style=flat-square)](https://ts.gluon.ai/)\n[![Static](https://img.shields.io/static/v1?label=docs&message=dev&color=edc775&style=flat-square)](https://ts.gluon.ai/dev/)\n[![PyPI Downloads](https://img.shields.io/pypi/dm/gluonts?style=flat-square&color=94b594)](https://pepy.tech/project/gluonts)\n\n**📢 BREAKING NEWS**: We released **Chronos**, a suite of pretrained models for zero-shot time series forecasting. Chronos can generate accurate probabilistic predictions for new time series not seen during training. Check it out [here](https://github.com/amazon-science/chronos-forecasting)!\n\nGluonTS is a Python package for probabilistic time series modeling, focusing on deep learning based models,\nbased on [PyTorch](https://pytorch.org) and [MXNet](https://mxnet.apache.org).\n\n\n## Installation\n\nGluonTS requires Python 3.7 or newer, and the easiest way to install it is via\n`pip`:\n\n```bash\n# install with support for torch models\npip install \"gluonts[torch]\"\n\n# install with support for mxnet models\npip install \"gluonts[mxnet]\"\n```\n\nSee the [documentation](https://ts.gluon.ai/stable/getting_started/install.html)\nfor more info on how GluonTS can be installed.\n\n## Simple Example\n\nTo illustrate how to use GluonTS, we train a DeepAR-model and make predictions\nusing the airpassengers dataset. The dataset consists of a single time\nseries of monthly passenger numbers between 1949 and 1960. We train the model\non the first nine years and make predictions for the remaining three years.\n\n```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom gluonts.dataset.pandas import PandasDataset\nfrom gluonts.dataset.split import split\nfrom gluonts.torch import DeepAREstimator\n\n# Load data from a CSV file into a PandasDataset\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/AileenNielsen/\"\n    \"TimeSeriesAnalysisWithPython/master/data/AirPassengers.csv\",\n    index_col=0,\n    parse_dates=True,\n)\ndataset = PandasDataset(df, target=\"#Passengers\")\n\n# Split the data for training and testing\ntraining_data, test_gen = split(dataset, offset=-36)\ntest_data = test_gen.generate_instances(prediction_length=12, windows=3)\n\n# Train the model and make predictions\nmodel = DeepAREstimator(\n    prediction_length=12, freq=\"M\", trainer_kwargs={\"max_epochs\": 5}\n).train(training_data)\n\nforecasts = list(model.predict(test_data.input))\n\n# Plot predictions\nplt.plot(df[\"1954\":], color=\"black\")\nfor forecast in forecasts:\n  forecast.plot()\nplt.legend([\"True values\"], loc=\"upper left\", fontsize=\"xx-large\")\nplt.show()\n```\n\n![[train-test]](https://ts.gluon.ai/static/README/forecasts.png)\n\nNote, the forecasts are displayed in terms of a probability distribution and\nthe shaded areas represent the 50% and 90% prediction intervals.\n\n\n## Contributing\n\nIf you wish to contribute to the project, please refer to our\n[contribution guidelines](https://github.com/awslabs/gluonts/tree/dev/CONTRIBUTING.md).\n\n## Citing\n\nIf you use GluonTS in a scientific publication, we encourage you to add the following references to the related papers,\nin addition to any model-specific references that are relevant for your work:\n\n```bibtex\n@article{gluonts_jmlr,\n  author  = {Alexander Alexandrov and Konstantinos Benidis and Michael Bohlke-Schneider\n    and Valentin Flunkert and Jan Gasthaus and Tim Januschowski and Danielle C. Maddix\n    and Syama Rangapuram and David Salinas and Jasper Schulz and Lorenzo Stella and\n    Ali Caner Türkmen and Yuyang Wang},\n  title   = {{GluonTS: Probabilistic and Neural Time Series Modeling in Python}},\n  journal = {Journal of Machine Learning Research},\n  year    = {2020},\n  volume  = {21},\n  number  = {116},\n  pages   = {1-6},\n  url     = {http://jmlr.org/papers/v21/19-820.html}\n}\n```\n\n```bibtex\n@article{gluonts_arxiv,\n  author  = {Alexandrov, A. and Benidis, K. and Bohlke-Schneider, M. and\n    Flunkert, V. and Gasthaus, J. and Januschowski, T. and Maddix, D. C.\n    and Rangapuram, S. and Salinas, D. and Schulz, J. and Stella, L. and\n    Türkmen, A. C. and Wang, Y.},\n  title   = {{GluonTS: Probabilistic Time Series Modeling in Python}},\n  journal = {arXiv preprint arXiv:1906.05264},\n  year    = {2019}\n}\n```\n\n## Links\n\n### Documentation\n\n* [Documentation (stable)](https://ts.gluon.ai/stable/)\n* [Documentation (development)](https://ts.gluon.ai/dev/)\n\n### References\n\n* [JMLR MLOSS Paper](http://www.jmlr.org/papers/v21/19-820.html)\n* [ArXiv Paper](https://arxiv.org/abs/1906.05264)\n* [Collected Papers from the group behind GluonTS](https://github.com/awslabs/gluonts/tree/dev/REFERENCES.md): a bibliography.\n\n### Tutorials and Workshops\n\n* [Tutorial at IJCAI 2021 (with videos)](https://lovvge.github.io/Forecasting-Tutorial-IJCAI-2021/) with [YouTube link](https://youtu.be/AB3I9pdT46c). \n* [Tutorial at WWW 2020 (with videos)](https://lovvge.github.io/Forecasting-Tutorial-WWW-2020/)\n* [Tutorial at SIGMOD 2019](https://lovvge.github.io/Forecasting-Tutorials/SIGMOD-2019/)\n* [Tutorial at KDD 2019](https://lovvge.github.io/Forecasting-Tutorial-KDD-2019/)\n* [Tutorial at VLDB 2018](https://lovvge.github.io/Forecasting-Tutorial-VLDB-2018/)\n* [Neural Time Series with GluonTS](https://youtu.be/beEJMIt9xJ8)\n* [International Symposium of Forecasting: Deep Learning for Forecasting workshop](https://lostella.github.io/ISF-2020-Deep-Learning-Workshop/)\n"
        },
        {
          "name": "REFERENCES.md",
          "type": "blob",
          "size": 13.478515625,
          "content": "# Scientific Articles\nWe encourage you to also check out the time series work by the group behind GluonTS, ordered chronographically.\n\n# 2023\n* [Predict, Refine, Synthesize: Self-Guiding Diffusion Models for Probabilistic Time Series Forecasting](https://arxiv.org/abs/2307.11494), *Marcel Kollovieh, Abdul Fatir Ansari, Michael Bohlke-Schneider, Jasper Zschiegner, Hao Wang, Yuyang Wang*, NeurIPS 2023\n* [Learning Physical Models that Can Respect Conservation Laws](https://arxiv.org/pdf/2302.11002.pdf), *Derek Hansen, Danielle C. Maddix, Shima Alizadeh, Gaurav Gupta, Michael W. Mahoney*, ICML 2023\n* Theoretical Guarantees of Learning Ensembling Strategies with Applications to Time Series Forecasting, *Hilaf Hasson, Danielle C. Maddix, Yuyang Wang, Gaurav Gupta, Youngsuk Park*, ICML 2023\n* [Guiding continuous operator learning through Physics-based boundary constraints](https://arxiv.org/pdf/2212.07477.pdf), *Nadim Saad, Gaurav Gupta, Shima Alizadeh, Danielle C. Maddix*, ICLR 2023\n* [Towards Robust Multivariate Time-Series Forecasting: Adversarial Attacks and Defense Mechanisms](https://arxiv.org/abs/2207.09572), *Linbo Liu, Youngsuk Park, Trong Nghia Hoang, Hilaf Hasson, Jun Huan*, ICLR 2023\n* [Coherent Probabilistic Forecasting of Temporal Hierarchies](https://www.amazon.science/publications/coherent-probabilistic-forecasting-of-temporal-hierarchies), *Syama Sundar Rangapuram, Shubham Kapoor, Rajbir Singh Nirwan, Pedro Mercado, Yuyang Wang, Tim Januschowski, Michael Bohlke-Schneider*, AISTATS 2023\n* [But are you sure? An uncertainty-aware perspective on explainable AI](https://www.amazon.science/publications/but-are-you-sure-an-uncertainty-aware-perspective-on-explainable-ai), *Charlie Marx, Youngsuk Park, Hilaf Hasson, Yuyang Wang, Stefano Ermon, Jun Huan*, AISTATS 2023\n# 2022\n* [Domain Adaptation for Time Series Forecasting via Attention Sharing](https://proceedings.mlr.press/v162/jin22d/jin22d.pdf), *Xiaoyong Jin, Youngsuk Park, Danielle C. Maddix, Hao Wang, Yuyang Wang*, ICML 2022\n* [Robust Probabilistic Time Series Forecasting](https://proceedings.mlr.press/v151/yoon22a/yoon22a.pdf), *TaeHo Yoon, Youngsuk Park, Ernest Ryu, Yuyang Wang*, AISTATS 2022\n* [Learning Quantile Functions without Quantile Crossing for Distribution-free Time Series Forecasting](https://proceedings.mlr.press/v151/park22a/park22a.pdf), *Youngsuk Park, Danielle C. Maddix, Francois-Xavier Aubet, Kelvin Kan, Jan Gasthaus, Yuyang Wang*, AISTATS 2022\n* [Multivariate Quantile Function Forecaster](https://proceedings.mlr.press/v151/kan22a/kan22a.pdf), *Kelvin Kan , François-Xavier Aubet , Tim Januschowski, Youngsuk Park, Konstantinos Benidis, Lars Ruthotto, Jan Gasthaus*, AISTATS 2022\n* [Deep Generative model with Hierarchical Latent Factors for Time Series Anomaly Detection](https://proceedings.mlr.press/v151/challu22a/challu22a.pdf), *Cristian Challu, Peihong Jiang, Ying Nian Wu, Laurent Callot*, AISTATS 2022\n* [Testing Granger Non-Causality in Panels with Cross-Sectional Dependencies](https://proceedings.mlr.press/v151/minorics22a/minorics22a.pdf), *Lenon Minorics, Caner Turkmen, Patrick Bloebaum, David Kernert, Laurent Callot, Dominik Janzing*, AISTATS 2022\n* [PSA-GAN: Progressive Self Attention GANs for Synthetic Time Series](https://arxiv.org/abs/2108.00981), *Paul Jeha, Michael Bohlke-Schneider, Pedro Mercado, Shubham Kapoor, Rajbir Singh Nirwan, Valentin Flunkert, Jan Gasthaus, Tim Januschowski*, ICLR 2022\n* [Not All Domains Are Created Equal: Graph-Relational Domain Adaptation](https://arxiv.org/abs/2202.03628), *Zihao Xu, Hao He, Guang-He Lee, Yuyang Wang, Hao Wang*, ICLR 2022\n\n# 2021\n\n* [Forecasting with trees](https://www.sciencedirect.com/science/article/pii/S0169207021001679), *Tim Januschowski, Yuyang Wang, Kari Torkkola, Timo Erkkilä, Hilaf Hasson, Jan Gasthaus*, IJF 2021\n* [Probabilistic Forecasting: A Level-Set Approach](https://proceedings.neurips.cc/paper/2021/file/32b127307a606effdcc8e51f60a45922-Paper.pdf), *Hilaf Hasson, Yuyang Wang, Tim Januschowski, and Jan Gasthaus*, NeurIPS 2021.\n* [Deep Explicit Duration Switching Models for Time Series](https://papers.nips.cc/paper/2021/file/fb4c835feb0a65cc39739320d7a51c02-Paper.pdf), *Abdul Fatir Ansari, Konstantinos Benidis, Richard Kurle, Ali Caner Turkmen, Harold Soh, Alex Smola, Tim Januschowski*, NeurIPS 2021\n* [Neural Flows: Efficient Alternative to Neural ODEs](https://papers.nips.cc/paper/2021/file/b21f9f98829dea9a48fd8aaddc1f159d-Paper.pdf), *Marin Biloš, Johanna Sommer, Syama Sundar Rangapuram, Tim Januschowski, Stephan Günnemann*, NeurIPS 2021\n* [Detecting Anomalous Event Sequences with Temporal Point Processes](https://proceedings.neurips.cc/paper/2021/file/6faa8040da20ef399b63a72d0e4ab575-Paper.pdf), *Oleksandr Shchur, Ali Caner Turkmen, Tim Januschowski, Jan Gasthaus, Stephan Günnemann*, NeurIPS 2021\n* [Online false discovery rate control for anomaly detection in time series](https://proceedings.neurips.cc/paper/2021/file/def130d0b67eb38b7a8f4e7121ed432c-Paper.pdf), *Quentin Rebjock, Baris Kurt, Tim Januschowski, Laurent Callot*, NeurIPS 2021\n* Symmetry-breaking for Variational Bayesian Neural Networks, *Richard Kurle, Yuyang Wang, Tim Januschowski, Jan Gasthaus*, NeurIPS 2021 Workshop on Bayesian Deep Learning\n* [GOPHER: Categorical probabilistic forecasting with graph structure via local continuous-time dynamics](https://proceedings.mlr.press/v163/wang22a/wang22a.pdf), *Alex Wang, Danielle C. Maddix, Yuyang Wang*, NeurIPS 2021 Workshop on ICBINB\n* [Modeling Advection on Directed Graphs using Graph Matern Gaussian Processes for Traffic Flow](https://ml4physicalsciences.github.io/2021/files/NeurIPS_ML4PS_2021_13.pdf), *Danielle C. Maddix, Nadim Saad, Yuyang Wang*, NeurIPS 2021 Workshop on Machine Learning and The Physical Sciences\n* Deep Generative model with Hierarchical Latent Factors for Timeseries Anomaly Detection, *Cristian Challu, Peihong Jiang, Ying Nian Wu, Laurent Callot*, NeurIPS 2021 Workshop on Deep Generative Models\n* [Neural Temporal Point Processes: A Review](https://arxiv.org/abs/2104.03528), *Oleksandr Shchur, Ali Caner Türkmen, Tim Januschowski, Stephan Günnemann*, IJCAI 2021\n* [Learning Quantile Functions without Quantile Crossing for Distribution-free Time Series Forecasting](https://arxiv.org/pdf/2111.06581), *Youngsuk Park, Danielle C. Maddix, François-Xavier Aubet, Kelvin Kan, Jan Gasthaus, Yuyang Wang*, ICML 2021 Workshop on Distribution-Free Uncertainty Quantification\n* [Revisiting Dynamic Regret of Strongly Adaptive Methods](http://roseyu.com/time-series-workshop/submissions/2021/TSW-ICML2021_paper_41.pdf), *Dheeraj Baby, Hilaf Hasson, Yuyang Wang*, ICML Workshop on Time Series, 2021\n* [A Study of Joint Graph Inference and Forecasting](https://arxiv.org/pdf/2109.04979), *Daniel Zügner, François-Xavier Aubet, Victor Garcia Satorras, Tim Januschowski, Stephan Günnemann, Jan Gasthaus*, ICML Workshop on Time Series, 2021\n* [PSA-GAN: Progressive Self Attention GANs for Synthetic Time Series](https://arxiv.org/abs/2108.00981), *Jeha Paul, Bohlke-Schneider Michael, Mercado Pedro, Singh Nirwan Rajbir, Kapoor Shubham, Flunkert Valentin, Gasthaus Jan, Januschowski Tim*, ICML Workshop on Time Series, 2021\n* [Variance Reduced Training with Stratified Sampling for Forecasting Models](http://proceedings.mlr.press/v139/lu21d/lu21d.pdf), *Yucheng Lu, Youngsuk Park, Lifan Chen, Yuyang Wang, Christopher De Sa, Dean Foster*, ICML 2021\n* [End-to-end learning of coherent probabilistic forecasts for hierarchical time series](http://proceedings.mlr.press/v139/rangapuram21a/rangapuram21a.pdf), *Syama Sundar Rangapuram, Lucien D Werner, Konstantinos Benidis, Pedro Mercado, Jan Gasthaus, Tim Januschowski*, ICML 2021\n* [Bridging Physics-based and Data-driven modeling for Learning Dynamical Systems](http://proceedings.mlr.press/v144/wang21a/wang21a.pdf), *Ray Wang, Danielle C. Maddix, Christos Faloutsos, Yuyang Wang, Rose Yu*, L4DC 2021\n* Forecasting with Trees, *Tim Januschowski, Yuyang Wang, Kari Torkkola, Timo Erkkila, Hilaf Hasson, Jan Gasthaus*, International Journal of Forecasting (IJF) 2021\n* [Forecasting: Theory and Practice](https://arxiv.org/abs/2012.03854), *Fotios Petroupolos et al and Tim Januschowski*, International Journal of Forecasting (IJF) 2021\n* The M5 Competition: A Critial Appraisal, *Tim Januschowski, Jan Gasthaus, Yuyang Wang*, Foresight, 2021\n* [Forecasting of intermittent and sparse time series: a unified probabilistic framework via deep renewal processes](https://journals.plos.org/plosone/article/authors?id=10.1371/journal.pone.0259764), *Caner Turkmen, Tim Januschowski, Yuyang Wang, Ali Taylan Cemgil*, PlosOne, 2021\n\n# 2020\n* [Deep Rao-Blackwellised Particle Filters for Time Series Forecasting](https://proceedings.neurips.cc/paper/2020/hash/afb0b97df87090596ae7c503f60bb23f-Abstract.html), *Richard Kurle, Syama Rangapuram, Emmanuel de Bezenac, Stepuhan Günnemann, Jan Gasthaus*, NeurIPS 2020\n* [Normalizing Kalman Filters for Multivariate Time Series Analysis](https://papers.nips.cc/paper/2020/hash/1f47cef5e38c952f94c5d61726027439-Abstract.html), *Emmanuel de B\\'{e}zenac, Syama S. Rangapuram, Konstantinos Benidis, Michael Bohlke-Schneider, Richard Kurle, Lorenzo Stella, Hilaf Hasson, Patrick Gallinari, Tim Januschowski*, NeurIPS 2020\n* [Physics-based vs. Data-driven: A Benchmark Study on COVID-19 Forecasting](https://arxiv.org/pdf/2011.10616.pdf), *Ray Wang, Danielle C. Maddix, Christos Faloutsos, Yuyang Wang, Rose Yu*, **Best Paper Award**, NeurIPS 2020 Machine Learning in Public Health (MLPH) Workshop\n* [Criteria for classifying forecasting methods](https://www.sciencedirect.com/science/article/pii/S0169207019301529), *Tim Januschowski, Jan Gasthaus, Yuyang Wang, David Salinas, Valentin Flunkert, Michael Bohlke-Schneider, Laurent Callot*, International Journal of Forecasting, 2020\n* [DeepAR: Probabilistic forecasting with autoregressive recurrent networks](https://www.sciencedirect.com/science/article/pii/S0169207019301888), *David Salinas, Valentin Flunkert, Jan Gasthaus, Tim Januschowski*, International Journal of Forecasting, 2020\n* [Anomaly Detection at Scale: The Case for Deep Distributional Time Series Models](https://arxiv.org/abs/2007.15541), \n*Fadhel Ayed, Lorenzo Stella, Tim Januschowski, Jan Gasthaus*, International Conference on Service-Oriented Computing, 2020\n* [Forecasting Big Time Series: Theory and Practice](https://dl.acm.org/doi/10.1145/3366424.3383118), *Christos Faloutsos, Valentin Flunkert, Jan Gasthaus, Tim Januschowski, Yuyang Wang*, WWW 2020\n* [Resilient neural forecasting systems](https://dl.acm.org/doi/pdf/10.1145/3399579.3399869), *Michael Bohlke-Schneider, Shubham Kapoor, Tim Januschowski*, DEEM 2020\n* [Elastic machine learning algorithms in amazon sagemaker](https://dl.acm.org/doi/abs/10.1145/3318464.3386126), *Edo Liberty et al.*, SIGMOD 2020\n\n# 2019 and Earlier\n* [High-Dimensional Multivariate Forecasting with Low-Rank Gaussian Copula Processes](https://arxiv.org/abs/1910.03002), *David Salinas, Michael Bohlke-Schneider, Laurent Callot, Roberto Medico, Jan Gasthaus*, NeurIPS 2019\n* [FastPoint: Scalable Deep Point Processes](https://ecmlpkdd2019.org/downloads/paper/861.pdf), *Ali Caner Turkmen, Yuyang Wang, Alex Smola*, **Best Paper Award**, ECML 2019\n* [Forecasting Big Time Series: Theory and Practice](https://dl.acm.org/citation.cfm?id=3332289), *Christos Faloutsos, Jan Gasthaus, Tim Januschowski, Yuyang Wang*, KDD 2019\n* [Classical and Contemporary Approaches to Big Time Series Forecasting](https://dl.acm.org/citation.cfm?id=3314033&dl=ACM&coll=DL), *Christos Faloutsos, Jan Gasthaus, Tim Januschowski, Yuyang Wang*, SIGMOD 2019\n* [Deep factors for forecasting](http://proceedings.mlr.press/v97/wang19k.html), *Yuyang Wang, Alex Smola, Danielle C. Maddix, Jan Gasthaus, Dean Foster, Tim Januschowski*, ICML 2019\n* [Probabilistic Forecasting with Spline Quantile Function RNNs](http://proceedings.mlr.press/v89/gasthaus19a.html), *Jan Gasthaus, Konstantinos Benidis, Yuyang Wang, Syama Sundar Rangapuram, David Salinas, Valentin Flunkert, Tim Januschowski*, AISTATS 2019\n* Open-Source Forecasting Tools in Python, *Tim Januschowski, Jan Gasthaus, Yuyang Wang*, Foresight: The International Journal of Applied Forecasting, 2019\n* [Deep state space models for time series forecasting](https://papers.nips.cc/paper/8004-deep-state-space-models-for-time-series-forecasting), *Syama Sundar Rangapuram, Matthias W. Seeger, Jan Gasthaus, Lorenzo Stella, Yuyang Wang, Tim Januschowski*, NeurIPS 2018\n* [Forecasting big time series: old and new](http://www.vldb.org/pvldb/vol11/p2102-faloutsos.pdf), *Christos Faloutsos, Jan Gasthaus, Tim Januschowski, Yuyang Wang*, VLDB 2018\n* Deep Learning for Forecasting: Current Trends and Challenges, *Januschowski, Tim and Gasthaus, Jan and Wang, Yuyang and Rangapuram, Syama Sundar and Callot, Laurent*, Foresight: The International Journal of Applied Forecasting, 2018\n* Deep Learning for Forecasting, *Januschowski, Tim and Gasthaus, Jan and Wang, Yuyang and Rangapuram, Syama Sundar and Callot, Laurent*, Foresight: The International Journal of Applied Forecasting, 2018\n* A Classification of Business Forecasting Problems, *Januschowski, Tim and Kolassa, Stephan*, Foresight: The International Journal of Applied Forecasting, 2018 \n* [Probabilistic demand forecasting at scale](http://www.vldb.org/pvldb/vol10/p1694-schelter.pdf), *Joos-Hendrik Boese, Valentin Flunkert, Jan Gasthaus, Tim Januschowski, Dustin Lange, David Salinas, Sebastian Schelter, Matthias Seeger, Yuyang Wang*, VLDB 2017\n* [Bayesian intermittent demand forecasting for large inventories](https://papers.nips.cc/paper/6313-bayesian-intermittent-demand-forecasting-for-large-inventories), *Matthias W. Seeger, David Salinas, Valentin Flunkert*, NeurIPS 2016\n"
        },
        {
          "name": "dev_setup.sh",
          "type": "blob",
          "size": 1.3818359375,
          "content": "#!/usr/bin/env bash\n\nACT_GIT_VERSION=$(git --version | cut -d' ' -f3)\nREQ_GIT_VERSION=\"2.9\"\n\nACT_PYTHON_VERSION=$(python --version | cut -d' ' -f2)\nREQ_PYTHON_VERSION=\"3.6\"\n\n#!/bin/bash\nvercomp () {\n    if [[ $1 == $2 ]]\n    then\n        return 1\n    fi\n    local IFS=.\n    local i ver1=($1) ver2=($2)\n    # fill empty fields in ver1 with zeros\n    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))\n    do\n        ver1[i]=0\n    done\n    for ((i=0; i<${#ver1[@]}; i++))\n    do\n        if [[ -z ${ver2[i]} ]]\n        then\n            # fill empty fields in ver2 with zeros\n            ver2[i]=0\n        fi\n        if ((10#${ver1[i]} > 10#${ver2[i]}))\n        then\n            return 0\n        fi\n        if ((10#${ver1[i]} < 10#${ver2[i]}))\n        then\n            return 2\n        fi\n    done\n    return 1\n}\n\nvercomp ${ACT_GIT_VERSION} ${REQ_GIT_VERSION}\nif [[ $? -gt 1 ]]; then\n    echo \"Git version ${ACT_GIT_VERSION} detected,\" \\\n         \"but >= ${REQ_GIT_VERSION} needed in order to set the 'core.hooksPath' configuration variable.\"\n    exit 1\nfi\n\nvercomp ${ACT_PYTHON_VERSION} ${REQ_PYTHON_VERSION}\nif [[ $? -gt 1 ]]; then\n    echo \"Python version ${ACT_PYTHON_VERSION} detected,\" \\\n         \"but >= ${REQ_PYTHON_VERSION} needed in order to run GluonTS.\"\n    exit 1\nfi\n\n# update location of Git hooks from default (.git/hooks) to the versioned folder .devtools/githooks\ngit config core.hooksPath \".devtools/githooks\"\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0205078125,
          "content": "[tool.black]\ntarget-version = ['py38']\nline-length = 79\n\n[tool.pytest.ini_options]\nminversion = \"6.0\"\ntimeout = 60\naddopts = \"\"\"\n    --color=yes\n    --doctest-modules\n    --ignore src/gluonts/block.py\n    --ignore src/gluonts/distribution.py\n    --ignore src/gluonts/kernels.py\n    --ignore src/gluonts/representation.py\n    --ignore src/gluonts/trainer.py\n\"\"\"\ndoctest_optionflags = \"NORMALIZE_WHITESPACE\"\ntestpaths = \"test\"\nfilterwarnings = \"ignore\"\n\n[tool.ruff]\nline-length = 79\n\nlint.ignore = [\n    \"E501\",  # line-length is handled by black\n    \"E741\"  # TODO: remove usage of `l`\n]\n\nexclude = [\"src/gluonts/nursery\"]\n\n\n[tool.docformatter]\nblack = true\npre-summary-newline = true\nmake-summary-multi-line = true\nwrap-descriptions = 79\n\n[tool.mypy]\nignore_missing_imports = true\nallow_redefinition = true\nfollow_imports = \"silent\"\n\n[tool.isort]\nknown_first_party = \"gluonts\"\nknown_third_party = [\n    \"mxnet\",\n    \"numpy\",\n    \"pandas\",\n    \"pytest\",\n    \"scipy\",\n    \"tqdm\",\n    \"torch\",\n    \"lightning\",\n]\nline_length = 79\nprofile = \"black\"\n"
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.94140625,
          "content": "[metadata]\nname = gluonts\nversion = attr: gluonts.__version__\nurl = https://github.com/awslabs/gluonts/\nproject_urls =\n    Documentation = https://ts.gluon.ai/stable/\n    Source Code = https://github.com/awslabs/gluonts/\nlicense = Apache License 2.0\nlicense_file = LICENSE\nauthor = Amazon\nauthor_email = gluon-ts-dev@amazon.com\nmaintainer_email = gluon-ts-dev@amazon.com\ndescription = Probabilistic time series modeling in Python.\nlong_description = file: README.md\nlong_description_content_type = text/markdown\n\n[options]\npython_requires = >= 3.7\npackages = find_namespace:\npackage_dir = = src\ninclude_package_data = True\n\n[options.packages.find]\nwhere = src\ninclude = gluonts*\n\n[options.entry_points]\npygments.styles =\n    gluonts-dark = gluonts.meta.style:Dark\n\n[aliases]\ntest = pytest --addopts --cov=src/gluonts\ntests = pytest --addopts --cov=src/gluonts\n\n[build_sphinx]\nsource-dir = docs\nbuild-dir = docs/_build\nall_files = 1\n\n[mypy]\nplugins = pydantic.mypy\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.5341796875,
          "content": "import distutils.cmd\nimport sys\nfrom pathlib import Path\nfrom textwrap import dedent\n\nfrom setuptools import setup\n\nROOT = Path(__file__).parent\n\n# Note: In GluonTS we use git tags to manage versions. A new release is created\n# by creating a new tag on GitHub through their release mechanism. Thus,\n# `gluonts.__version__` uses the latest available git tag. If there are\n# additional commits on top of the tagged commit, we extend the version\n# information and append a `.dev0+g{commit_id}` to the version. If there are\n# uncommitted changes, an additional `.dirty` is appended to the version.\n# Since we always rely on the latest available tag, it is important to ensure\n# that the latest tag in the `dev` branch is `v0` and not a more specific\n# version like `v0.x`, since the `dev` branch should be independent from a\n# more specific version. This means that we can't tag a commit on `dev` when\n# doing a new release. If git is not available, we fallback to version\n# `0.0.0`. When doing releases, the version gets frozen, by overwriting\n# `meta/_version.py` with the static version information. For this to work, we\n# need to adapt the `sdist` and `build_py` command classes to also handle\n# freezing of the versions.\n\n\ndef get_version_cmdclass(version_file) -> dict:\n    with open(version_file) as fobj:\n        code = fobj.read()\n\n    globals_ = {\"__file__\": str(version_file)}\n    exec(code, globals_)\n\n    # When `_version.py` is replaced, it should still contain `__version__`,\n    # but no longer \"cmdclass\".\n    if \"cmdclass\" not in globals_:\n        assert \"__version__\" in globals_\n        return {}\n\n    return globals_[\"cmdclass\"]()\n\n\nclass TypeCheckCommand(distutils.cmd.Command):\n    \"\"\"\n    A custom command to run MyPy on the project sources.\n    \"\"\"\n\n    description = \"run MyPy on Python source files\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        # import here (after the setup_requires list is loaded),\n        # otherwise a module-not-found error is thrown\n        import mypy.api\n\n        excluded_folders = [\n            str(p.parent.relative_to(ROOT)) for p in ROOT.glob(\"src/**/.typeunsafe\")\n        ]\n\n        if len(excluded_folders) > 0:\n            print(\n                \"The following folders contain a `.typeunsafe` marker file \"\n                \"and will *not* be type-checked with `mypy`:\"\n            )\n        for folder in excluded_folders:\n            print(f\"  {folder}\")\n\n        args = [str(ROOT / \"src\")]\n        for folder in excluded_folders:\n            args.append(\"--exclude\")\n            args.append(folder)\n\n        std_out, std_err, exit_code = mypy.api.run(args)\n\n        print(std_out, file=sys.stdout)\n        print(std_err, file=sys.stderr)\n\n        if exit_code:\n            error_msg = dedent(\n                f\"\"\"\n                Mypy command\n\n                    mypy {\" \".join(args)}\n\n                returned a non-zero exit code. Fix the type errors listed above\n                and then run\n\n                    python setup.py type_check\n\n                in order to validate your fixes.\n                \"\"\"\n            ).lstrip()\n\n            print(error_msg, file=sys.stderr)\n            sys.exit(exit_code)\n\n\ndef find_requirements(filename):\n    with open(ROOT / \"requirements\" / filename) as fobj:\n        return [line.rstrip() for line in fobj if not line.startswith(\"#\")]\n\n\narrow_require = find_requirements(\"requirements-arrow.txt\")\ndocs_require = find_requirements(\"requirements-docs.txt\")\ntests_require = find_requirements(\"requirements-test.txt\")\nsagemaker_api_require = find_requirements(\n    \"requirements-extras-sagemaker-sdk.txt\"\n)\nshell_require = find_requirements(\"requirements-extras-shell.txt\")\nmxnet_require = find_requirements(\"requirements-mxnet.txt\")\ntorch_require = find_requirements(\"requirements-pytorch.txt\")\n\ndev_require = (\n    arrow_require\n    + docs_require\n    + tests_require\n    + shell_require\n    + sagemaker_api_require\n)\n\nsetup(\n    install_requires=find_requirements(\"requirements.txt\"),\n    tests_require=tests_require,\n    extras_require={\n        \"arrow\": arrow_require,\n        \"dev\": dev_require,\n        \"docs\": docs_require,\n        \"mxnet\": mxnet_require,\n        \"R\": find_requirements(\"requirements-extras-r.txt\"),\n        \"Prophet\": find_requirements(\"requirements-extras-prophet.txt\"),\n        \"pro\": arrow_require + [\"orjson\"],\n        \"shell\": shell_require,\n        \"torch\": torch_require,\n    },\n    cmdclass={\n        \"type_check\": TypeCheckCommand,\n        **get_version_cmdclass(\"src/gluonts/meta/_version.py\"),\n    },\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}