{
  "metadata": {
    "timestamp": 1736559912505,
    "page": 672,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tartley/colorama",
      "stars": 3590,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.099609375,
          "content": "*.pyc\n*.egg-info\n.coverage\n.tox/\n/MANIFEST\n/build/\n/dist/\n/sandbox/\n/tags\nvirtualenv\n\n# PyCharm\n.idea\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 10.4384765625,
          "content": "0.4.6 Current release\n  * https://github.com/tartley/colorama/pull/139 Add alternative to 'init()',\n    called 'just_fix_windows_console'. This fixes many longstanding problems\n    with 'init', such as working incorrectly on modern Windows terminals, and\n    wonkiness when init gets called multiple times. The intention is that it\n    just makes all Windows terminals treat ANSI the same way as other terminals\n    do. Many thanks the njsmith for fixing our messes. \n  * https://github.com/tartley/colorama/pull/352 Support Windows 10's ANSI/VT\n    console. This didn't exist when Colorama was created, and avoiding us\n    causing havok there is long overdue. Thanks to segeviner for the initial\n    approach, and to njsmith for getting it merged.\n  * https://github.com/tartley/colorama/pull/338 Internal overhaul of package\n    metadata declaration, which abolishes our use of the now heavily\n    discouraged setuptools (and hence setup.py, setup.cfg and MANIFEST.in), in\n    favor of hatchling (and hence pyproject.toml), generously contributed by\n    ofek (author of hatchling). This includes dropping support Python3.5 and\n    3.6, which are EOL, and were already dropped from setuptools, so this\n    should not affect our users.\n  * https://github.com/tartley/colorama/pull/353 Attention to detail award to\n    LqdBcnAtWork for a spelling fix in demo06\n0.4.5\n  * Catch a racy ValueError that could occur on exit.\n  * Create README-hacking.md, for Colorama contributors.\n  * Tweak some README unicode characters that don't render correctly on PyPI.\n  * Fix some tests that were failing on some operating systems.\n  * Add support for Python 3.9.\n  * Add support for PyPy3.\n  * Add support for pickling with the ``dill`` module.\n0.4.4\n  * Re-org of README, to put the most insteresting parts near the top.\n  * Added Linux makefile targets and Windows powershell scripts to automate\n    bootstrapping a development environment, and automate the process of\n    testing wheels before they are uploaded to PyPI.\n  * Use stdlib unittest.mock where available\n  * Travis CI now also builds on arm64\n  * Demo06 demonstrates existing cursor positioning feature\n  * Fix OSC regex & handling to prevent hang or crash\n  * Document enterprise support by Tidelift\n0.4.3\n  * Fix release 0.4.2 which was uploaded with missing files.\n0.4.2 BROKEN DO NOT USE\n  * #228: Drop support for EOL Python 3.4, and add 3.7 and 3.8. Thanks to\n    hugovk.\n  * Several additions and fixes to documentation and metadata.\n  * Added Tidelift subscription information.\n0.4.1\n  * Fix issue #196: prevent exponential number of calls when calling 'init'\n    multiple times. Reported by bbayles and fixed by Delgan.\n0.4.0\n  * Fix issue #142: reset LIGHT_EX colors with RESET_ALL. Reported by Delgan\n  * Fix issue #147: ignore invalid \"erase\" ANSI codes. Reported by shin-\n  * Fix issues #163 and #164: fix stream wrapping under PyCharm. Contributed by\n    veleek and Delgan.\n  * Thanks to jdufresne for various code cleanup and updates to documentation\n    and project metadata. (pull requests #171, #172, #173, #174, #176, #177,\n    #189, #190, #192)\n  * #186: added contextlib magic methods to ansitowin32.StreamWrapper.\n    Contributed by hoefling.\n  * Fix issue #131: don't cache stdio handles, since they might be\n    closed/changed by fd redirection. This fixes an issue with pytest.\n    Contributed by segevfiner.\n  * #146, #157: Drop support for EOL Python 2.5, 2.6, 3.1, 3.2 and 3.3, and add\n    3.6. Thanks to hugovk.\n0.3.9\n  * Revert fix for issue #103 which causes problems for dependent applications\n0.3.8\n  * Fix issue #121: \"invalid escape sequence\" deprecation fixes on Python 3.6+\n  * Fix issue #110: fix \"set console title\" when working with unicode strings\n  * Fix issue #103: enable color when using \"input\" function on Python 3.5+\n  * Fix issue #95: enable color when stderr is a tty but stdout is not\n0.3.7\n  * Fix issue #84: check if stream has 'closed' attribute before testing it\n  * Fix issue #74: objects might become None at exit\n0.3.6\n  * Fix issue #81: fix ValueError when a closed stream was used\n0.3.5\n  * Bumping version to re-upload a wheel distribution\n0.3.4\n  * Fix issue #47 and #80 - stream redirection now strips ANSI codes on Linux\n  * Fix issue #53 - strip readline markers\n  * Fix issue #32 - assign orig_stdout and orig_stderr when initialising\n  * Fix issue #57 - Fore.RESET did not reset style of LIGHT_EX colors. Fixed by\n    Andy Neff\n  * Fix issue #51 - add context manager syntax. Thanks to Matt Olsen.\n  * Fix issue #48 - colorama didn't work on Windows when environment variable\n    'TERM' was set.\n  * Fix issue #54 - fix pylint errors in client code.\n  * Changes to readme and other improvements by Marc Abramowitz and Zearin\n0.3.3\n  * Fix Google Code issue #13 - support changing the console title with OSC\n    escape sequence\n  * Fix Google Code issue #16 - Add support for Windows xterm emulators\n  * Fix Google Code issue #30 - implement \\033[nK (clear line)\n  * Fix Google Code issue #49 - no need to adjust for scroll when new position\n    is already relative (CSI n A\\B\\C\\D)\n  * Fix Google Code issue #55 - erase_data fails on Python 3.x\n  * Fix Google Code issue #46 - win32.COORD definition missing\n  * Implement \\033[0J and \\033[1J (clear screen options)\n  * Fix default ANSI parameters\n  * Fix position after \\033[2J (clear screen)\n  * Add command shortcuts: colorama.Cursor, colorama.ansi.set_title,\n    colorama.ansi.clear_line, colorama.ansi.clear_screen\n  * Fix issue #22 - Importing fails for python3 on Windows\n  * Thanks to John Szakmeister for adding support for light colors\n  * Thanks to Charles Merriam for adding documentation to demos\n0.3.2\n  * Thanks to Marc Schlaich (schlamar) for a setup.py fix for Python2.5\n  * Thanks to Jurko for fix on 64-bit Windows CPython2.5 w/o ctypes (Google\n    Code issue #56)\n  * Thanks to Remi Rampin for:\n    * better github integration, incl rendered README and Travis config.\n    * fixed forward slashes in README\n  * Thanks to Florian Bruhin for fix when stdout or stderr are None\n  * Thanks to Simeon Visser for:\n    * closing a file handle using 'with'\n    * updating classifiers to include Python 3.3 and 3.4\n  * Thanks to Thomas Weininger for fix ValueError on Windows (Google Code issue\n    #50)\n0.3.1\n  * Fixed crash on exit with closed stdout, with thanks to Marc Abramowitz.\n  * Now uses setuptools if available, and falls back to distutils if not.\n  * setup.py no longer imports anything from colorama source.\n0.3.0\n  * Move repository to Git, https://github.com/tartley/colorama. (My Mercurial\n    repo seemed to be corrupted, I couldn't commit nor view patches of old\n    commits, even on fresh checkouts.)\n  * Fix always-crash on non-Windows platforms, reported by Matt McCormick.\n  * Fix Google Code issue #47, incompatible with pyreadline.\n0.2.7\n  * Fix problem under 64-bit windows due to ctypes HANDLE size. Submitted by\n    the rather magnificent Ben Hoyt. This fixes Google Code issue #43\n0.2.6\n  * Add copyright & licensing info to every file, as requested by a large\n    downstream project which has problems making sure that all 3rd party\n    contributions have appropriate license.\n0.2.5\n  * Several documentation & demo fixes.\n0.2.4\n  * Fix to work on Windows 7.\n  * Python 3 compatibility in docs and demos.\n  * Add handling for 'cursor up' and 'get position' ANSI codes.\n0.2.3\n  * Split changelog out into separate file.\n0.2.2\n  * Fix bug which caused init() to raise, introduced in 0.2.1.\n  * Remove asserts which cause problems in various circumstances. At least some\n    users saw asserts fail on 'success' returned from win32 functions, even\n    though the win32 functions appear to have worked correctly.\n0.2.1\n  * Completely broken: I added a bug which caused init() to raise.\n  * Added some documentation for cursor positioning and clear screen to README.\n  * Add 'reinit' and 'deinit' functions, as suggested by Charles FOL and\n    Romanov DA.\n0.2\n  * Merge in changes from Daniel Griffith: Add ANSI cursor positioning &\n    partial support for clear screen. Patch submitted by Oscar Lester, don't\n    send RESET_ALL to non-tty.\n  * Demos split into separate files and moved into their own directory.\n  * Tweak sys.path in demos so they run against local source, not installed\n    version of Colorama.\n0.1.18\n  * Fix README (no such attr as Fore.DEFAULT, etc), kindly reported by nodakai.\n0.1.17\n  * Prevent printing of garbage ANSI codes upon installing with pip\n0.1.16\n  * Re-upload to fix previous error. Make clean now removes old MANIFEST.\n0.1.15\n  * Completely broken. Distribution was empty due to leftover invalid MANIFEST\n    file from building on a different platform.\n  * Fix python3 incompatibility kindly reported by G |uumlaut| nter Kolousek\n0.1.14\n  * Fix hard-coded reset to white-on-black colors. Fore.RESET, Back.RESET and\n    Style.RESET_ALL now revert to the colors as they were when init() was\n    called. Some lessons hopefully learned about testing prior to release.\n0.1.13\n  * Completely broken: barfed when installed using pip.\n0.1.12\n  * Completely broken: contained no source code. double oops.\n0.1.11\n  * Completely broken: fatal import errors on Ubuntu. oops.\n0.1.10\n  * Stop emulating 'bright' text with bright backgrounds.\n  * Display 'normal' text using win32 normal foreground instead of bright.\n  * Drop support for 'dim' text.\n0.1.9\n  * Fix incompatibility with Python 2.5 and earlier.\n  * Remove setup.py dependency on setuptools, now uses stdlib distutils.\n0.1.8\n  * Fix ghastly errors all over the place on Ubuntu.\n  * Add init kwargs 'convert' and 'strip', which supersede the old 'wrap'.\n0.1.7\n  * Python 3 compatible.\n  * Fix: Now strips ansi on windows without necessarily converting it to win32\n    calls (eg. if output is not a tty.)\n  * Fix: Flaky interaction of interleaved ansi sent to stdout and stderr.\n  * Improved demo.sh (hg checkout only.)\n0.1.6\n  * Fix ansi sequences with no params now default to parmlist of [0].\n  * Fix flaky behaviour of autoreset and reset_all atexit.\n  * Fix stacking of repeated atexit calls - now just called once.\n  * Fix ghastly import problems while running tests.\n  * 'demo.py' (hg checkout only) now demonstrates autoreset and reset atexit.\n  * Provide colorama.VERSION, used by setup.py.\n  * Tests defanged so they no longer actually change terminal color when run.\n0.1.5\n  * Now works on Ubuntu.\n0.1.4\n  * Implemented RESET_ALL on application exit\n0.1.3\n  * Implemented init(wrap=False)\n0.1.2\n  * Implemented init(autoreset=True)\n0.1.1\n  * Minor tidy\n0.1\n  * Works on Windows for foreground color, background color, bright or dim\n\n\n.. |uumlaut| unicode:: U+00FC .. u with umlaut\n   :trim:\n"
        },
        {
          "name": "ENTERPRISE.md",
          "type": "blob",
          "size": 2.8515625,
          "content": "# Colorama for enterprise.\n\n*Available as part of the Tidelift Subscription.*\n\nTidelift is working with the maintainers of Colorama and thousands of other\nopen source projects to deliver commercial support and maintenance for the open\nsource dependencies you use to build your applications. Save time, reduce risk,\nand improve code health, while paying the maintainers of the exact dependencies\nyou use.\n\n[\\[Learn More\\]](https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=enterprise) [\\[Request a demo\\]](https://tidelift.com/subscription/request-a-demo?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=enterprise)\n\n### Enterprise-ready open source software—managed for you\n\nThe Tidelift Subscription is a managed open source subscription for application dependencies covering millions of open source projects across JavaScript, Python, Java, PHP, Ruby, .NET, and more.\n\nYour subscription includes:\n\n**Security updates:**\nTidelift’s security response team coordinates patches for new breaking security\nvulnerabilities and alerts immediately through a private channel, so your\nsoftware supply chain is always secure. \n\n**Licensing verification and indemnification:**\nTidelift verifies license information to enable easy policy enforcement and\nadds intellectual property indemnification to cover creators and users in case\nsomething goes wrong. You always have a 100% up-to-date bill of materials for\nyour dependencies to share with your legal team, customers, or partners.\n\n**Maintenance and code improvement:**\nTidelift ensures the software you rely on keeps working as long as you need it\nto work. Your managed dependencies are actively maintained and we recruit\nadditional maintainers where required.\n\n**Package selection and version guidance:**\nWe help you choose the best open source packages from the start—and then guide\nyou through updates to stay on the best releases as new issues arise.\n\n**Roadmap input:**\nTake a seat at the table with the creators behind the software you use.\nTidelift’s participating maintainers earn more income as their software is used\nby more subscribers, so they’re interested in knowing what you need.\n\n**Tooling and cloud integration:**\nTidelift works with GitHub, GitLab, BitBucket, and more. We support every cloud\nplatform (and other deployment targets, too).\n\nThe end result? All of the capabilities you expect from commercial-grade software, for the full breadth of open source you use. That means less time grappling with esoteric open source trivia, and more time building your own applications—and your business.\n\n[\\[Learn More\\]](https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=enterprise) [\\[Request a demo\\]](https://tidelift.com/subscription/request-a-demo?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=enterprise)\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4560546875,
          "content": "Copyright (c) 2010 Jonathan Hartley\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holders, nor those of its contributors\n  may be used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.5419921875,
          "content": "# Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE.txt file.\n\n# This makefile is just a cheatsheet to remind me of some commonly used\n# commands. I generally am executing these commands on Ubuntu, or on WindowsXP\n# with Cygwin binaries at the start of the PATH.\n\nNAME=colorama\n\nhelp: ## Display help for documented make targets.\n\t@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \\\n\t\tawk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-7s\\033[0m %s\\n\", $$1, $$2}'\n\n\n# bootstrap environment\n\nvirtualenv=~/.virtualenvs/colorama\npip=$(virtualenv)/bin/pip\nsyspython=python3\npython=$(virtualenv)/bin/python\ntwine=$(virtualenv)/bin/twine\n\nclean: ## Remove build artifacts, .pyc files, virtualenv\n\t-rm -rf build dist MANIFEST colorama.egg-info $(virtualenv)\n\t-find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete\n.PHONY: clean\n\n$(virtualenv):\n\t$(syspython) -m venv --clear $(virtualenv)\n\t$(pip) install --upgrade pip\n\nvenv: $(virtualenv) ## Create or clear a virtualenv\n.PHONY: venv\n\nbootstrap: venv ## Populate the virtualenv\n\t$(pip) install -r requirements.txt -r requirements-dev.txt\n.PHONY: bootstrap\n\n\n# development\n\ntags: ## Create tags file\n\tctags -R ${NAME}\n.PHONY: tags\n\ntest: ## Run tests\n\t$(python) -m unittest discover -p *_test.py\n.PHONY: test\n\n\n# build packages\n\nbuild: ## Build a release (sdist and wheel)\n\t$(python) -m build\n.PHONY: build\n\ntest-release: build ## Test a built release\n\t./test-release\n.PHONY: test-release\n\nrelease: ## Upload a built release\n\t$(twine) upload --repository=colorama dist/colorama-*\n.PHONY: release\n"
        },
        {
          "name": "README-hacking.md",
          "type": "blob",
          "size": 5.5830078125,
          "content": "# Colorama Development\n\nHelp and fixes are welcome!\n\nAlthough Colorama has no requirements other than the Python standard library,\ndevelopment requires some Python packages, which are captured in\nrequirements-dev.txt.\n\nThroughout, if you're on a Mac, you can probably do something similar to the\nLinux instructions. Either use the makefile directly, or look in it to see\nwhat commands it executes, and manually execute something similar. PRs to\nautomate for Mac appreciated! Especially if they just made the existing Linux\nMakefile targets work on Mac too.\n\n## Desired changes\n\nColorama is unexpectedly popular, and is now a transitive dependency of many\npopular and high profile projects. If we break backwards compatibility, even in a\nsubtle way, we can break applications - or pip installs - for lots of people.\n\nIn addition, the project already takes more time & energy to maintain than\nthe maintainers currently have available - for example the original author\nis now a parent, and no longer uses Windows, so time and motivation for this\nproject are both much lower than they used to be.\n\nAs a result of both the above, we are very conservative in what sorts of\nchanges we can accept. Generally, we are not keen on new features. Even if\nthey are small, they still add to the future maintenance burden, increasing\nthe surface area into which future bugs or compatibility breaks could be\nintroduced.\n\nThis is especially true if they are new ways to generate ANSI codes (e.g.\ncontext managers for handling Fore, Back or Style changes.), since it has\nalways been Colorama's stance that if you want to print ANSI codes, then yes\nwe can help out with that in a rudimentary way, but if you want to do advanced\nthings, then you should be using a different library that specializes in that,\nsuch as Termcolor, Blessings, or Rich. These libraries are much better than\nColorama at generating ANSI codes for colors and the like, and probably\nalready include the feature you are trying to add to Colorama, plus many\nmore.\n\nIn addition to using those libraries, if you call colorama.init(), then your\nfancy new colors, etc, will also work on Windows. This is the main purpose\nof Colorama.\n\nThe kinds of submissions we would encourage work towards that goal, or fix\nbugs, or improve compatibility across operating systems or environments.\n\n## Makefile and PowerShell scripts\n\nSome common commands are captured as Linux makefile targets (which could\nperhaps be coaxed into running on OSX in Bash), and as Windows PowerShell\nscripts.\n\n| Task                            | Linux               | Windows              |\n|---------------------------------|---------------------|----------------------|\n| Create & populate virtualenv.   | `make bootstrap`    | `.\\bootstrap.ps1`    |\n| Run tests.                      | `make test`         | `.\\test.ps1`         |\n| Build a wheel.                  | `make build`        | `.\\build.ps1`        |\n| Test the wheel.                 | `make test-release` | `.\\test-release.ps1` |\n| Release the wheel on PyPI       | `make release`      | `.\\release.ps1`      |\n| Clean generated files & builds. | `make clean`        | `.\\clean.ps1`        |\n\nThe Makefile is self-documenting, so 'make' with no args will describe each\ntarget.\n\n## Release checklist\n\n1. Check the CHANGELOG.rst is updated with everything since the last release,\n   including links to merged PRs. Move the \"Current release\" comment from the\n   previous version number.\n\n2. First we'll make a candidate release. Ensure  the '.rc1' suffix is\n   present on `__version__` in `colorama/__init.py__.py`, eg:\n\n        __version__ = '0.4.6rc1'\n\n3. Run the tests locally on your preferred OS, just to save you from doing\n   the subsequent time-consuming steps while there are still obvious problems\n   in the code:\n\n   * Windows:\n     * First allow powershell to execute scripts, see:\n       https://stackoverflow.com/a/32328091\n     * `powershell bootstrap.ps1`\n     * `powershell test.ps1`\n   * Linux:\n     * `make bootstrap`\n     * `make test`\n\n4. Verify you're all committed, merged to master.\n\n5. Tag the current commit with the `__version__` from `colorama/__init__.py`.\n   We should start using\n   [annotated tags for releases](https://www.tartley.com/posts/git-annotated-tags), so:\n\n       git tag -a -m \"\" $version\n       git push --follow-tags\n\n6. Build the distributables (sdist and wheel), on either OS:\n\n    * Windows: `.\\build.ps1`\n    * Linux: `make build`\n\n7. Test the distributables on both OS. Whichever one you do 2nd will get an\n   HTTP 400 response on uploading to test.pypi.org, but outputs a message\n   saying this is expected and carries on:\n\n   * Windows: `.\\test-release.ps1`\n   * Linux: `make test-release`\n\n   (This currently only tests the wheel, but\n   [should soon test the sdist too](https://github.com/tartley/colorama/issues/286).)\n\n8. Check the [CI builds](https://github.com/tartley/colorama/actions/)\n   are complete and all passing.\n\n9. Upload the distributables to PyPI:\n\n   * On Windows: `.\\release.ps1`\n   * On Linux: `make release`\n\n10. Test by installing the candidate version from PyPI, and sanity check it with\n    'demo.sh', making sure this is running against the PyPI installation, not\n    local source.\n\n11. Maybe wait a day for anyone using pre-release installs to report any\n    problems?\n\n12. Remove the '.rcX' suffix from `__version__` in\n    `colorama/__init__.py`.\n\n13. Repeat steps 4 to 9, for the actual (non-candidate) release.\n\n14. Bump the version number in `colorama/__init__.py`, and add a 'dev1'\n    suffix, eg:\n\n    `0.4.5dev1`\n\n    so that any build artifacts created are clearly labelled as not a real\n    release. Commit and push this (directly to master is fine.)\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 15.5732421875,
          "content": ".. image:: https://img.shields.io/pypi/v/colorama.svg\n    :target: https://pypi.org/project/colorama/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/pyversions/colorama.svg\n    :target: https://pypi.org/project/colorama/\n    :alt: Supported Python versions\n\n.. image:: https://github.com/tartley/colorama/actions/workflows/test.yml/badge.svg\n    :target: https://github.com/tartley/colorama/actions/workflows/test.yml\n    :alt: Build Status\n\nColorama\n========\n\nMakes ANSI escape character sequences (for producing colored terminal text and\ncursor positioning) work under MS Windows.\n\n.. |donate| image:: https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif\n  :target: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=2MZ9D2GMLYCUJ&item_name=Colorama&currency_code=USD\n  :alt: Donate with Paypal\n\n`PyPI for releases <https://pypi.org/project/colorama/>`_ |\n`Github for source <https://github.com/tartley/colorama>`_ |\n`Colorama for enterprise on Tidelift <https://github.com/tartley/colorama/blob/master/ENTERPRISE.md>`_\n\nIf you find Colorama useful, please |donate| to the authors. Thank you!\n\nInstallation\n------------\n\nTested on CPython 2.7, 3.7, 3.8, 3.9, 3.10, 3.11 and 3.12 and PyPy 2.7 and 3.8.\n\nNo requirements other than the standard library.\n\n.. code-block:: bash\n\n    pip install colorama\n    # or\n    conda install -c anaconda colorama\n\nDescription\n-----------\n\nANSI escape character sequences have long been used to produce colored terminal\ntext and cursor positioning on Unix and Macs. Colorama makes this work on\nWindows, too, by wrapping ``stdout``, stripping ANSI sequences it finds (which\nwould appear as gobbledygook in the output), and converting them into the\nappropriate win32 calls to modify the state of the terminal. On other platforms,\nColorama does nothing.\n\nThis has the upshot of providing a simple cross-platform API for printing\ncolored terminal text from Python, and has the happy side-effect that existing\napplications or libraries which use ANSI sequences to produce colored output on\nLinux or Macs can now also work on Windows, simply by calling\n``colorama.just_fix_windows_console()`` (since v0.4.6) or ``colorama.init()``\n(all versions, but may have other side-effects – see below).\n\nAn alternative approach is to install ``ansi.sys`` on Windows machines, which\nprovides the same behaviour for all applications running in terminals. Colorama\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\nhave an installer.)\n\nDemo scripts in the source code repository print some colored text using\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\nhandling, versus on Windows Command-Prompt using Colorama:\n\n.. image:: https://github.com/tartley/colorama/raw/master/screenshots/ubuntu-demo.png\n    :width: 661\n    :height: 357\n    :alt: ANSI sequences on Ubuntu under gnome-terminal.\n\n.. image:: https://github.com/tartley/colorama/raw/master/screenshots/windows-demo.png\n    :width: 668\n    :height: 325\n    :alt: Same ANSI sequences on Windows, using Colorama.\n\nThese screenshots show that, on Windows, Colorama does not support ANSI 'dim\ntext'; it looks the same as 'normal text'.\n\nUsage\n-----\n\nInitialisation\n..............\n\nIf the only thing you want from Colorama is to get ANSI escapes to work on\nWindows, then run:\n\n.. code-block:: python\n\n    from colorama import just_fix_windows_console\n    just_fix_windows_console()\n\nIf you're on a recent version of Windows 10 or better, and your stdout/stderr\nare pointing to a Windows console, then this will flip the magic configuration\nswitch to enable Windows' built-in ANSI support.\n\nIf you're on an older version of Windows, and your stdout/stderr are pointing to\na Windows console, then this will wrap ``sys.stdout`` and/or ``sys.stderr`` in a\nmagic file object that intercepts ANSI escape sequences and issues the\nappropriate Win32 calls to emulate them.\n\nIn all other circumstances, it does nothing whatsoever. Basically the idea is\nthat this makes Windows act like Unix with respect to ANSI escape handling.\n\nIt's safe to call this function multiple times. It's safe to call this function\non non-Windows platforms, but it won't do anything. It's safe to call this\nfunction when one or both of your stdout/stderr are redirected to a file – it\nwon't do anything to those streams.\n\nAlternatively, you can use the older interface with more features (but also more\npotential footguns):\n\n.. code-block:: python\n\n    from colorama import init\n    init()\n\nThis does the same thing as ``just_fix_windows_console``, except for the\nfollowing differences:\n\n- It's not safe to call ``init`` multiple times; you can end up with multiple\n  layers of wrapping and broken ANSI support.\n\n- Colorama will apply a heuristic to guess whether stdout/stderr support ANSI,\n  and if it thinks they don't, then it will wrap ``sys.stdout`` and\n  ``sys.stderr`` in a magic file object that strips out ANSI escape sequences\n  before printing them. This happens on all platforms, and can be convenient if\n  you want to write your code to emit ANSI escape sequences unconditionally, and\n  let Colorama decide whether they should actually be output. But note that\n  Colorama's heuristic is not particularly clever.\n\n- ``init`` also accepts explicit keyword args to enable/disable various\n  functionality – see below.\n\nTo stop using Colorama before your program exits, simply call ``deinit()``.\nThis will restore ``stdout`` and ``stderr`` to their original values, so that\nColorama is disabled. To resume using Colorama again, call ``reinit()``; it is\ncheaper than calling ``init()`` again (but does the same thing).\n\nMost users should depend on ``colorama >= 0.4.6``, and use\n``just_fix_windows_console``. The old ``init`` interface will be supported\nindefinitely for backwards compatibility, but we don't plan to fix any issues\nwith it, also for backwards compatibility.\n\nColored Output\n..............\n\nCross-platform printing of colored text can then be done using Colorama's\nconstant shorthand for ANSI escape sequences. These are deliberately\nrudimentary, see below.\n\n.. code-block:: python\n\n    from colorama import Fore, Back, Style\n    print(Fore.RED + 'some red text')\n    print(Back.GREEN + 'and with a green background')\n    print(Style.DIM + 'and in dim text')\n    print(Style.RESET_ALL)\n    print('back to normal now')\n\n...or simply by manually printing ANSI sequences from your own code:\n\n.. code-block:: python\n\n    print('\\033[31m' + 'some red text')\n    print('\\033[39m') # and reset to default color\n\n...or, Colorama can be used in conjunction with existing ANSI libraries\nsuch as the venerable `Termcolor <https://pypi.org/project/termcolor/>`_\nthe fabulous `Blessings <https://pypi.org/project/blessings/>`_,\nor the incredible `_Rich <https://pypi.org/project/rich/>`_.\n\nIf you wish Colorama's Fore, Back and Style constants were more capable,\nthen consider using one of the above highly capable libraries to generate\ncolors, etc, and use Colorama just for its primary purpose: to convert\nthose ANSI sequences to also work on Windows:\n\nSIMILARLY, do not send PRs adding the generation of new ANSI types to Colorama.\nWe are only interested in converting ANSI codes to win32 API calls, not\nshortcuts like the above to generate ANSI characters.\n\n.. code-block:: python\n\n    from colorama import just_fix_windows_console\n    from termcolor import colored\n\n    # use Colorama to make Termcolor work on Windows too\n    just_fix_windows_console()\n\n    # then use Termcolor for all colored text output\n    print(colored('Hello, World!', 'green', 'on_red'))\n\nAvailable formatting constants are::\n\n    Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Style: DIM, NORMAL, BRIGHT, RESET_ALL\n\n``Style.RESET_ALL`` resets foreground, background, and brightness. Colorama will\nperform this reset automatically on program exit.\n\nThese are fairly well supported, but not part of the standard::\n\n    Fore: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\n    Back: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX\n\nCursor Positioning\n..................\n\nANSI codes to reposition the cursor are supported. See ``demos/demo06.py`` for\nan example of how to generate them.\n\nInit Keyword Args\n.................\n\n``init()`` accepts some ``**kwargs`` to override default behaviour.\n\ninit(autoreset=False):\n    If you find yourself repeatedly sending reset sequences to turn off color\n    changes at the end of every print, then ``init(autoreset=True)`` will\n    automate that:\n\n    .. code-block:: python\n\n        from colorama import init\n        init(autoreset=True)\n        print(Fore.RED + 'some red text')\n        print('automatically back to default color again')\n\ninit(strip=None):\n    Pass ``True`` or ``False`` to override whether ANSI codes should be\n    stripped from the output. The default behaviour is to strip if on Windows\n    or if output is redirected (not a tty).\n\ninit(convert=None):\n    Pass ``True`` or ``False`` to override whether to convert ANSI codes in the\n    output into win32 calls. The default behaviour is to convert if on Windows\n    and output is to a tty (terminal).\n\ninit(wrap=True):\n    On Windows, Colorama works by replacing ``sys.stdout`` and ``sys.stderr``\n    with proxy objects, which override the ``.write()`` method to do their work.\n    If this wrapping causes you problems, then this can be disabled by passing\n    ``init(wrap=False)``. The default behaviour is to wrap if ``autoreset`` or\n    ``strip`` or ``convert`` are True.\n\n    When wrapping is disabled, colored printing on non-Windows platforms will\n    continue to work as normal. To do cross-platform colored output, you can\n    use Colorama's ``AnsiToWin32`` proxy directly:\n\n    .. code-block:: python\n\n        import sys\n        from colorama import init, AnsiToWin32\n        init(wrap=False)\n        stream = AnsiToWin32(sys.stderr).stream\n\n        # Python 2\n        print >>stream, Fore.BLUE + 'blue text on stderr'\n\n        # Python 3\n        print(Fore.BLUE + 'blue text on stderr', file=stream)\n\nRecognised ANSI Sequences\n.........................\n\nANSI sequences generally take the form::\n\n    ESC [ <param> ; <param> ... <command>\n\nWhere ``<param>`` is an integer, and ``<command>`` is a single letter. Zero or\nmore params are passed to a ``<command>``. If no params are passed, it is\ngenerally synonymous with passing a single zero. No spaces exist in the\nsequence; they have been inserted here simply to read more easily.\n\nThe only ANSI sequences that Colorama converts into win32 calls are::\n\n    ESC [ 0 m       # reset all (colors and brightness)\n    ESC [ 1 m       # bright\n    ESC [ 2 m       # dim (looks same as normal brightness)\n    ESC [ 22 m      # normal brightness\n\n    # FOREGROUND:\n    ESC [ 30 m      # black\n    ESC [ 31 m      # red\n    ESC [ 32 m      # green\n    ESC [ 33 m      # yellow\n    ESC [ 34 m      # blue\n    ESC [ 35 m      # magenta\n    ESC [ 36 m      # cyan\n    ESC [ 37 m      # white\n    ESC [ 39 m      # reset\n\n    # BACKGROUND\n    ESC [ 40 m      # black\n    ESC [ 41 m      # red\n    ESC [ 42 m      # green\n    ESC [ 43 m      # yellow\n    ESC [ 44 m      # blue\n    ESC [ 45 m      # magenta\n    ESC [ 46 m      # cyan\n    ESC [ 47 m      # white\n    ESC [ 49 m      # reset\n\n    # cursor positioning\n    ESC [ y;x H     # position cursor at x across, y down\n    ESC [ y;x f     # position cursor at x across, y down\n    ESC [ n A       # move cursor n lines up\n    ESC [ n B       # move cursor n lines down\n    ESC [ n C       # move cursor n characters forward\n    ESC [ n D       # move cursor n characters backward\n\n    # clear the screen\n    ESC [ mode J    # clear the screen\n\n    # clear the line\n    ESC [ mode K    # clear the line\n\nMultiple numeric params to the ``'m'`` command can be combined into a single\nsequence::\n\n    ESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background\n\nAll other ANSI sequences of the form ``ESC [ <param> ; <param> ... <command>``\nare silently stripped from the output on Windows.\n\nAny other form of ANSI sequence, such as single-character codes or alternative\ninitial characters, are not recognised or stripped. It would be cool to add\nthem though. Let me know if it would be useful for you, via the Issues on\nGitHub.\n\nStatus & Known Problems\n-----------------------\n\nI've personally only tested it on Windows XP (CMD, Console2), Ubuntu\n(gnome-terminal, xterm), and OS X.\n\nSome valid ANSI sequences aren't recognised.\n\nIf you're hacking on the code, see `README-hacking.md`_. ESPECIALLY, see the\nexplanation there of why we do not want PRs that allow Colorama to generate new\ntypes of ANSI codes.\n\nSee outstanding issues and wish-list:\nhttps://github.com/tartley/colorama/issues\n\nIf anything doesn't work for you, or doesn't do what you expected or hoped for,\nI'd love to hear about it on that issues list, would be delighted by patches,\nand would be happy to grant commit access to anyone who submits a working patch\nor two.\n\n.. _README-hacking.md: README-hacking.md\n\nLicense\n-------\n\nCopyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause license; see\nLICENSE file.\n\nProfessional support\n--------------------\n\n.. |tideliftlogo| image:: https://cdn2.hubspot.net/hubfs/4008838/website/logos/logos_for_download/Tidelift_primary-shorthand-logo.png\n   :alt: Tidelift\n   :target: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\n\n.. list-table::\n   :widths: 10 100\n\n   * - |tideliftlogo|\n     - Professional support for colorama is available as part of the\n       `Tidelift Subscription`_.\n       Tidelift gives software development teams a single source for purchasing\n       and maintaining their software, with professional grade assurances from\n       the experts who know it best, while seamlessly integrating with existing\n       tools.\n\n.. _Tidelift Subscription: https://tidelift.com/subscription/pkg/pypi-colorama?utm_source=pypi-colorama&utm_medium=referral&utm_campaign=readme\n\nThanks\n------\n\nSee the CHANGELOG for more thanks!\n\n* Marc Schlaich (schlamar) for a ``setup.py`` fix for Python2.5.\n* Marc Abramowitz, reported & fixed a crash on exit with closed ``stdout``,\n  providing a solution to issue #7's setuptools/distutils debate,\n  and other fixes.\n* User 'eryksun', for guidance on correctly instantiating ``ctypes.windll``.\n* Matthew McCormick for politely pointing out a longstanding crash on non-Win.\n* Ben Hoyt, for a magnificent fix under 64-bit Windows.\n* Jesse at Empty Square for submitting a fix for examples in the README.\n* User 'jamessp', an observant documentation fix for cursor positioning.\n* User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\n  fix.\n* Julien Stuyck, for wisely suggesting Python3 compatible updates to README.\n* Daniel Griffith for multiple fabulous patches.\n* Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\n  output.\n* Roger Binns, for many suggestions, valuable feedback, & bug reports.\n* Tim Golden for thought and much appreciated feedback on the initial idea.\n* User 'Zearin' for updates to the README file.\n* John Szakmeister for adding support for light colors\n* Charles Merriam for adding documentation to demos\n* Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes\n* Florian Bruhin for a fix when stdout or stderr are None\n* Thomas Weininger for fixing ValueError on Windows\n* Remi Rampin for better Github integration and fixes to the README file\n* Simeon Visser for closing a file handle using 'with' and updating classifiers\n  to include Python 3.3 and 3.4\n* Andy Neff for fixing RESET of LIGHT_EX colors.\n* Jonathan Hartley for the initial idea and implementation.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Security policy\n\nTo report sensitive vulnerability information, please use the [Tidelift security contact](https://tidelift.com/security). Tidelift will coordinate the fix and disclosure.\n"
        },
        {
          "name": "bootstrap.ps1",
          "type": "blob",
          "size": 0.271484375,
          "content": "$syspython=\"python.exe\"\n$ve=\"$HOME\\.virtualenvs\\colorama\"\n$bin=\"$ve\\Scripts\"\n\necho \"Create $syspython virtualenv $ve\"\n& $syspython -m venv --clear \"$ve\"\n& $bin\\python.exe -m pip install --upgrade pip\n& $bin\\python.exe -m pip install -r requirements.txt -r requirements-dev.txt\n\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 0.126953125,
          "content": "$ve=\"$HOME\\.virtualenvs\\colorama\"\n$bin=\"$ve\\Scripts\"\n\n& $bin\\python.exe -m pip install --upgrade build\n& $bin\\python.exe -m build\n"
        },
        {
          "name": "clean.ps1",
          "type": "blob",
          "size": 0.23828125,
          "content": "$syspython=\"python.exe\"\n$ve=\"$HOME\\.virtualenvs\\colorama\"\n\nremove-item -r -fo * -I build,dist,MANIFEST,colorama.egg-info,$ve,sandbox\n& $syspython -Bc \"import pathlib, shutil; [shutil.rmtree(p) for p in pathlib.Path('.').rglob('__pycache__')]\"\n\n"
        },
        {
          "name": "colorama",
          "type": "tree",
          "content": null
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.623046875,
          "content": "[build-system]\nrequires = [\n    \"hatchling>=0.25.1\",\n]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"colorama\"\ndescription = \"Cross-platform colored terminal text.\"\nreadme = \"README.rst\"\nlicense = \"BSD-3-Clause\"\nrequires-python = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"\nauthors = [\n    { name = \"Jonathan Hartley\", email = \"tartley@tartley.com\" },\n]\nkeywords = [\n    \"ansi\",\n    \"color\",\n    \"colour\",\n    \"crossplatform\",\n    \"terminal\",\n    \"text\",\n    \"windows\",\n    \"xplatform\",\n]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: Console\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: BSD License\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Topic :: Terminals\",\n]\ndynamic = [\n    \"version\",\n]\n\n[project.urls]\nHomepage = \"https://github.com/tartley/colorama\"\n\n[tool.hatch.version]\npath = \"colorama/__init__.py\"\n\n[tool.hatch.build.targets.sdist]\ninclude = [\n    \"/colorama\",\n    \"/demos\",\n    \"/CHANGELOG.rst\",\n]\n\n[tool.hatch.build.targets.wheel]\ninclude = [\n    \"/colorama/*\",\n]\n"
        },
        {
          "name": "release.ps1",
          "type": "blob",
          "size": 0.1357421875,
          "content": "$ve=\"$HOME\\.virtualenvs\\colorama\"\n$bin=\"$ve\\Scripts\"\n\n# Upload to PyPI.\n& $bin\\twine.exe upload dist\\colorama-*.tar.gz dist\\colorama-*.whl\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0859375,
          "content": "mock>=1.0.1;python_version<\"3.3\"\ntwine>=3.1.1\ncontextlib2;python_version<\"3\"\nbuild\n-e .\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "# none\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-release",
          "type": "blob",
          "size": 1.6591796875,
          "content": "#!/usr/bin/env bash\n\n# Test the currently built release of Colorama from the dist/ dir.\n# Run this before making a release.\n#\n# This should be run on Windows, because Colorama is mostly a no-op elsewhere.\n# Hmmm, this script should probably be a .bat file then? Nah, WSL FTW.\n#\n# Uploads package from the dist/ directory to the *test* PyPI.\n# Create a fresh virtualenvironment and install colorama from test PyPI.\n# Import Colorama and make trivial use of it.\n\n# Exit on error\nset -eu -o pipefail\n\nsyspython=python3\nbin=\"$HOME/.virtualenvs/colorama/bin\"\nsandbox=test-release-playground\n\n# Upload to the test PyPI.\n$bin/twine upload --repository colorama-test dist/colorama-* \\\n    || echo \"  > Expect a 400 if package was already uploaded.\"\n\n# cd elsewhere so we cannot import from local source.\nmkdir -p $sandbox\n(\n    # Create a temporary disposable virtualenv.\n    $syspython -m venv --clear $sandbox/venv\n\n    # voodoo sleep. I saw the following install fail, due to expected version\n    # not being listed at test.pypi.org, but then a few seconds later, re-run\n    # manually, it worked fine.\n    sleep 5\n\n    version=$(grep __version__ colorama/__init__.py | cut -d' ' -f3 | tr -d \"'\")\n\n    cd $sandbox\n\n    # Install the package we just uploaded.\n    # (--extra-index-url for this project's requirements)\n    venv/bin/python -m pip --quiet install --index-url https://test.pypi.org/simple --extra-index-url https://pypi.org/simple colorama==$version\n\n    # Import and use Colorama from the temp virtualenv.\n    venv/bin/python -c \"import colorama; colorama.init(); print(colorama.Fore.GREEN + \\\"OK: Colorama\\\", colorama.__version__, \\\"from test pypi install.\\\")\"\n)\n\n# Tidy up\nrm -rf $sandbox\n"
        },
        {
          "name": "test-release.ps1",
          "type": "blob",
          "size": 1.005859375,
          "content": "$syspython=\"python.exe\"\n$ve=\"$HOME\\.virtualenvs\\colorama\"\n$bin=\"$ve\\Scripts\"\n\n# Upload to the test PyPI.\n& $bin\\twine.exe upload --repository testpypi dist\\colorama-*\nif(!$?) {\n    write-host \"  > Expect a 400 if package was already uploaded\"\n}\n\n# cd elsewhere so we cannot import from local source.\nmkdir -force sandbox | out-null\ncd sandbox\n\n# Create a temporary disposable virtualenv.\n& $syspython -m venv --clear venv\n\n# TODO: What is the windows/powershell equivalent of this:\n#    version=$(grep __version__ colorama/__init__.py | cut -d' ' -f3 | tr -d \"'\")\n\n# Install the package we just uploaded.\n# (--extra-index-url for this project's requirements)\nvenv\\Scripts\\python -m pip --quiet install --index-url https://test.pypi.org/simple --extra-index-url https://pypi.org/simple colorama==$version\n# Import and use colorama from the temp virtualenv.\nvenv\\Scripts\\python.exe -c @\"\nimport colorama;\ncolorama.init();\nprint(colorama.Fore.GREEN + \"\"OK Colorama \"\" + colorama.__version__ + \"\" from test pypi install.\"\")\n\"@\n\ncd ..\n"
        },
        {
          "name": "test.ps1",
          "type": "blob",
          "size": 0.1044921875,
          "content": "$ve=\"$HOME\\.virtualenvs\\colorama\"\n$bin=\"$ve\\Scripts\"\n\n& $bin\\python.exe -m unittest discover -p *_test.py\n\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.189453125,
          "content": "[tox]\nisolated_build = true\nenvlist = py{27, 37, 38, 39, 310, 311, 312, py, py3}\n\n[testenv]\ndeps =\n  py27,pypy: mock\n  py27,pypy: contextlib2\ncommands = python -m unittest discover -p *_test.py\n"
        }
      ]
    }
  ]
}