{
  "metadata": {
    "timestamp": 1736559779112,
    "page": 498,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Yelp/detect-secrets",
      "stars": 3880,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".activate.sh",
          "type": "blob",
          "size": 0.0166015625,
          "content": "venv/bin/activate"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.60546875,
          "content": "[run]\nbranch = True\nsource = .\nomit =\n    .tox/*\n    setup.py\n\n[report]\nskip_covered = True\nexclude_lines =\n    # Don't complain if non-runnable code isn't run:\n    ^if __name__ == ['\"]__main__['\"]:$\n\n    # Don't complain if performing logic for cross-version functionality\n    ^\\s*except ImportError:\\b\n\n    # Don't complain if tests don't hit defensive assertion code:\n    ^\\s*raise AssertionError\\b\n    ^\\s*raise NotImplementedError\\b\n    ^\\s*return NotImplemented\\b\n    ^\\s*raise$\n\n    # Need to redefine this, as per documentation\n    pragma: no cover\n\n    # Don't complain for skipped tests\n    ^@pytest.mark.skip\n"
        },
        {
          "name": ".deactivate.sh",
          "type": "blob",
          "size": 0.0107421875,
          "content": "deactivate\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1171875,
          "content": "*.egg-info\n*.py[co]\n*.sw[op]\n\n/.coverage\n/.pytest_cache\n/.tox\n/venv*\n/tmp\n\n.*ignore\n!.gitignore\n.python-version\n.vscode\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.146484375,
          "content": "repos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: check-builtin-literals\n        args: ['--no-allow-dict-kwargs']\n        exclude: bumpity.py$\n    -   id: check-docstring-first\n    -   id: debug-statements\n        exclude: bumpity.py$\n    -   id: double-quote-string-fixer\n    -   id: end-of-file-fixer\n    -   id: name-tests-test\n    -   id: trailing-whitespace\n-   repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n    -   id: flake8\n        args: ['--max-line-length', '100']\n        exclude: ^test_data/|bumpity.py$\n-   repo: https://github.com/asottile/reorder_python_imports\n    rev: v1.6.1\n    hooks:\n    -   id: reorder-python-imports\n        language_version: python3\n        exclude: bumpity.py$\n-   repo: https://github.com/asottile/add-trailing-comma\n    rev: v1.4.1\n    hooks:\n    -   id: add-trailing-comma\n-   repo: https://github.com/hhatto/autopep8\n    rev: v2.3.1\n    hooks:\n    -   id: autopep8\n-   repo: local\n    hooks:\n    -   id: detect-secrets\n        name: Detect secrets\n        language: python\n        entry: detect-secrets-hook\n        args: ['--baseline', '.secrets.baseline']\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.220703125,
          "content": "-   id: detect-secrets\n    name: Detect secrets\n    description: Detects high entropy strings that are likely to be passwords.\n    entry: detect-secrets-hook\n    language: python\n    # for backward compatibility\n    files: .*\n"
        },
        {
          "name": ".secrets.baseline",
          "type": "blob",
          "size": 6.033203125,
          "content": "{\n  \"version\": \"1.5.0\",\n  \"plugins_used\": [\n    {\n      \"name\": \"ArtifactoryDetector\"\n    },\n    {\n      \"name\": \"AWSKeyDetector\"\n    },\n    {\n      \"name\": \"AzureStorageKeyDetector\"\n    },\n    {\n      \"name\": \"Base64HighEntropyString\",\n      \"limit\": 4.5\n    },\n    {\n      \"name\": \"BasicAuthDetector\"\n    },\n    {\n      \"name\": \"CloudantDetector\"\n    },\n    {\n      \"name\": \"HexHighEntropyString\",\n      \"limit\": 3.0\n    },\n    {\n      \"name\": \"IbmCloudIamDetector\"\n    },\n    {\n      \"name\": \"IbmCosHmacDetector\"\n    },\n    {\n      \"name\": \"JwtTokenDetector\"\n    },\n    {\n      \"name\": \"KeywordDetector\",\n      \"keyword_exclude\": \"\"\n    },\n    {\n      \"name\": \"MailchimpDetector\"\n    },\n    {\n      \"name\": \"NpmDetector\"\n    },\n    {\n      \"name\": \"PrivateKeyDetector\"\n    },\n    {\n      \"name\": \"SlackDetector\"\n    },\n    {\n      \"name\": \"SoftlayerDetector\"\n    },\n    {\n      \"name\": \"SquareOAuthDetector\"\n    },\n    {\n      \"name\": \"StripeDetector\"\n    },\n    {\n      \"name\": \"TwilioKeyDetector\"\n    }\n  ],\n  \"filters_used\": [\n    {\n      \"path\": \"detect_secrets.filters.allowlist.is_line_allowlisted\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.common.is_baseline_file\",\n      \"filename\": \".secrets.baseline\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.common.is_ignored_due_to_verification_policies\",\n      \"min_level\": 2\n    },\n    {\n      \"path\": \"detect_secrets.filters.gibberish.should_exclude_secret\",\n      \"limit\": 3.7\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_indirect_reference\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_likely_id_string\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_lock_file\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_not_alphanumeric_string\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_potential_uuid\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_sequential_string\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_swagger_file\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.heuristic.is_templated_secret\"\n    },\n    {\n      \"path\": \"detect_secrets.filters.regex.should_exclude_file\",\n      \"pattern\": [\n        \"test*\"\n      ]\n    }\n  ],\n  \"results\": {\n    \"detect_secrets/plugins/private_key.py\": [\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"daefe0b4345a654580dcad25c7c11ff4c944a8c0\",\n        \"is_verified\": false,\n        \"line_number\": 45\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"f0778f3e140a61d5bbbed5430773e52af2f5fba4\",\n        \"is_verified\": false,\n        \"line_number\": 46\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"27c6929aef41ae2bcadac15ca6abcaff72cda9cd\",\n        \"is_verified\": false,\n        \"line_number\": 47\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"4ada9713ec27066b2ffe0b7bd9c9c8d635dc4ab2\",\n        \"is_verified\": false,\n        \"line_number\": 48\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"1348b145fa1a555461c1b790a2f66614781091e9\",\n        \"is_verified\": false,\n        \"line_number\": 49\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"be4fc4886bd949b369d5e092eb87494f12e57e5b\",\n        \"is_verified\": false,\n        \"line_number\": 50\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"9279619d0c9a9529b0b223e3b809f4df24b8ba8b\",\n        \"is_verified\": false,\n        \"line_number\": 51\n      },\n      {\n        \"type\": \"Private Key\",\n        \"filename\": \"detect_secrets/plugins/private_key.py\",\n        \"hashed_secret\": \"11200d1bf5e1eb358b5d823c443347d97e982a85\",\n        \"is_verified\": false,\n        \"line_number\": 52\n      }\n    ],\n    \"detect_secrets/plugins/twilio.py\": [\n      {\n        \"type\": \"Twilio API Key\",\n        \"filename\": \"detect_secrets/plugins/twilio.py\",\n        \"hashed_secret\": \"34c2246140bc39b1fce81d9be2124f713a06bdaf\",\n        \"is_verified\": false,\n        \"line_number\": 17\n      }\n    ],\n    \"docs/audit.md\": [\n      {\n        \"type\": \"Hex High Entropy String\",\n        \"filename\": \"docs/audit.md\",\n        \"hashed_secret\": \"63e1b8ad9e948f948bc19035801e8529c4c94b13\",\n        \"is_verified\": false,\n        \"line_number\": 25\n      },\n      {\n        \"type\": \"Secret Keyword\",\n        \"filename\": \"docs/audit.md\",\n        \"hashed_secret\": \"63e1b8ad9e948f948bc19035801e8529c4c94b13\",\n        \"is_verified\": false,\n        \"line_number\": 25\n      },\n      {\n        \"type\": \"JSON Web Token\",\n        \"filename\": \"docs/audit.md\",\n        \"hashed_secret\": \"d6b66ddd9ea7dbe760114bfe9a97352a5e139134\",\n        \"is_verified\": false,\n        \"line_number\": 180\n      },\n      {\n        \"type\": \"Secret Keyword\",\n        \"filename\": \"docs/audit.md\",\n        \"hashed_secret\": \"d6b66ddd9ea7dbe760114bfe9a97352a5e139134\",\n        \"is_verified\": false,\n        \"line_number\": 183\n      }\n    ],\n    \"docs/design.md\": [\n      {\n        \"type\": \"Hex High Entropy String\",\n        \"filename\": \"docs/design.md\",\n        \"hashed_secret\": \"2785b2a1c217669b3bd8fbcb4516006e61181237\",\n        \"is_verified\": false,\n        \"line_number\": 53\n      },\n      {\n        \"type\": \"Secret Keyword\",\n        \"filename\": \"docs/design.md\",\n        \"hashed_secret\": \"2785b2a1c217669b3bd8fbcb4516006e61181237\",\n        \"is_verified\": false,\n        \"line_number\": 53\n      },\n      {\n        \"type\": \"Base64 High Entropy String\",\n        \"filename\": \"docs/design.md\",\n        \"hashed_secret\": \"513e0a36963ae1e8431c041b744679ee578b7c44\",\n        \"is_verified\": false,\n        \"line_number\": 200\n      }\n    ]\n  },\n  \"generated_at\": \"2021-04-15T17:02:50Z\"\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 38.5458984375,
          "content": "# What's New\n\nThanks to all our contributors, users, and the many people that make `detect-secrets` possible!\n:heart:\n\nIf you love `detect-secrets`, please star our project on GitHub to show your support! :star:\n\n<!--\n# A.B.C\n##### MMM DDth, YYYY\n\n#### :newspaper: News\n#### :mega: Release Highlights\n#### :boom: Breaking Changes\n#### :tada: New Features\n#### :sparkles: Usability\n#### :mortar_board: Walkthrough / Help\n#### :performing_arts: Performance\n#### :telescope: Accuracy\n#### :bug: Bugfixes\n#### :snake: Miscellaneous\n#### :art: Display Changes\n\n[#xxxx]: https://github.com/Yelp/detect-secrets/pull/xxxx\n[@xxxx]: https://github.com/xxxx\n-->\n\n### v1.5.0\n##### May 6th, 2024\n\nWe apologise for the extreme delay in publishing a new release for our beloved `detect-secrets`. We at Yelp appreciate your continued support and your contributions to this valuable project!\n\n#### :newspaper: News\n- We're adding support for Python 3.10, 3.11 and 3.12 and we dropped support for Python 3.6 and 3.7! We hope this won't be too disruptive for you all. Be aware that in a next release, we'll remove support for Python 3.8 too, as it'll reach EOL in October 2024.\n\n#### :mega: Release Highlights\n- Added support for OS-agnostic baseline files ([#586])\n\n#### :tada: New Features\n- Added a detector for IP addresses ([#692])\n- Added a detector for GitLab tokens ([#782])\n- Added a detector for Telegram tokens ([#808])\n- Added a detector for Pypi and TestPypi tokens ([#819])\n- Added a detector for OpenAI tokens ([#823])\n\n#### :sparkles: Usability\n- Added filenames in errors thrown when a plugin file specified in the `.secrets.baseline` is not found. ([#719])\n- Changed the wording of the audit prompt ([#738])\n\n#### :telescope: Accuracy\n- Improved DiscordBotTokenDetector to reduce false negatives ([#628])\n- Improved KeywordDetector to reduce false positive for Golang ([#675])\n- Improved AWSKeyDetector by adding more access key formats ([#796])\n\n#### :bug: Bugfixes\n- Fixed `NotImplementedError` in StatisticsAggregator ([#678])\n- Fixed bug in YAMLTransformer related to parsing YAML files with achors and tags ([#679])\n- Fixed `IndexError` in `is_prefixed_with_dollar_sign` caused by passing empty strings ([#712])\n\n#### :snake: Miscellaneous\n- Dropped support for Python 3.6 ([#672])\n- Dropped support for Python 3.7 ([#724])\n- Added support for Python 3.10 ([#724])\n- Added support for Python 3.11 ([#730])\n- Added support for Python 3.12 ([#810])\n- Multiple dependency updates\n\n[#586]: https://github.com/Yelp/detect-secrets/pull/586\n[#628]: https://github.com/Yelp/detect-secrets/pull/628\n[#672]: https://github.com/Yelp/detect-secrets/pull/672\n[#675]: https://github.com/Yelp/detect-secrets/pull/675\n[#678]: https://github.com/Yelp/detect-secrets/pull/678\n[#679]: https://github.com/Yelp/detect-secrets/pull/679\n[#692]: https://github.com/Yelp/detect-secrets/pull/692\n[#712]: https://github.com/Yelp/detect-secrets/pull/712\n[#719]: https://github.com/Yelp/detect-secrets/pull/719\n[#724]: https://github.com/Yelp/detect-secrets/pull/724\n[#730]: https://github.com/Yelp/detect-secrets/pull/730\n[#738]: https://github.com/Yelp/detect-secrets/pull/738\n[#782]: https://github.com/Yelp/detect-secrets/pull/782\n[#796]: https://github.com/Yelp/detect-secrets/pull/796\n[#808]: https://github.com/Yelp/detect-secrets/pull/808\n[#810]: https://github.com/Yelp/detect-secrets/pull/810\n[#819]: https://github.com/Yelp/detect-secrets/pull/819\n[#823]: https://github.com/Yelp/detect-secrets/pull/823\n\n### v1.4.0\n##### October 4th, 2022\n\n#### :newspaper: News\n- We're dropping support for Python 3.6 starting v1.5.0! Python 3.6 reached EOL on December 23, 2021 and, therefore, is currently unsupported. We hope this announcement gives you plenty of time to upgrade your project, if needed.\n\n#### :mega: Release Highlights\n- Improved filtering by excluding secrets that have already been detected by a regex-based detector ([#612])\n#### :tada: New Features\n- Added a detector for Discord bot tokens ([#614])\n\n#### :sparkles: Usability\n- Improved the audit report to make it easier to parse programmatically ([#619])\n#### :telescope: Accuracy\n- Improve ArtifactoryDetector plugin to reduce false positives ([#499])\n\n#### :bug: Bugfixes\n- Fixed the verify flow in audit report by adding the code snippet of the verified secret ([#620])\n- Fixed deploy process to be environment configuration independent ([#625])\n\n#### :snake: Miscellaneous\n- Added support for .NET packages.lock.json files in the heuristic filter ([#593])\n- Multiple dependency updates\n\n[#499]: https://github.com/Yelp/detect-secrets/pull/499\n[#556]: https://github.com/Yelp/detect-secrets/pull/556\n[#589]: https://github.com/Yelp/detect-secrets/pull/589\n[#593]: https://github.com/Yelp/detect-secrets/pull/593\n[#598]: https://github.com/Yelp/detect-secrets/pull/598\n[#612]: https://github.com/Yelp/detect-secrets/pull/612\n[#614]: https://github.com/Yelp/detect-secrets/pull/614\n[#615]: https://github.com/Yelp/detect-secrets/pull/615\n[#616]: https://github.com/Yelp/detect-secrets/pull/616\n[#619]: https://github.com/Yelp/detect-secrets/pull/619\n[#620]: https://github.com/Yelp/detect-secrets/pull/620\n[#625]: https://github.com/Yelp/detect-secrets/pull/625\n\n### v1.3.0\n##### July 22nd, 2022\n\n#### :mega: Release Highlights\n- Add Windows operating system to Github CI Action ([#528])\n- Enable dependabot for automated dependency updates built into GitHub ([#531])\n- Improve performance for array slice ([#555])\n\n#### :tada: New Features\n- Improve keyword plugin to detect arrow key assignment ([#567])\n- Add command line argument for `detect-secrets-hook` to return output as json ([#569])\n\n#### :bug: Bugfixes\n- Fix regex matching for `npm` plugin ([#551])\n- Fix `audit` crashing when secret is not found on specified line ([#568])\n- Fix `# pragma: allowlist nextline secret` secrets not filtered out of result set ([#575])\n- Fix `is_verified` flag not stored in `PotentialSecret` ([#578])\n\n#### :snake: Miscellaneous\n- Only use ANSI color code in environments that support it ([#523])\n- Multiple dependency updates\n- Make `is_likely_id_string` heuristic filter more strict to avoid eliminating true positives ([#526])\n- Refactor AWS access key regex to minimize false positives ([#571])\n- Correct spelling errors in code repository ([#574])\n- Add `py.typed` to enable type hints for package consumers ([#579])\n\n[#523]: https://github.com/Yelp/detect-secrets/pull/523\n[#526]: https://github.com/Yelp/detect-secrets/pull/526\n[#528]: https://github.com/Yelp/detect-secrets/pull/528\n[#529]: https://github.com/Yelp/detect-secrets/pull/529\n[#530]: https://github.com/Yelp/detect-secrets/pull/530\n[#531]: https://github.com/Yelp/detect-secrets/pull/531\n[#532]: https://github.com/Yelp/detect-secrets/pull/532\n[#533]: https://github.com/Yelp/detect-secrets/pull/533\n[#535]: https://github.com/Yelp/detect-secrets/pull/535\n[#537]: https://github.com/Yelp/detect-secrets/pull/537\n[#538]: https://github.com/Yelp/detect-secrets/pull/538\n[#542]: https://github.com/Yelp/detect-secrets/pull/542\n[#543]: https://github.com/Yelp/detect-secrets/pull/543\n[#545]: https://github.com/Yelp/detect-secrets/pull/545\n[#546]: https://github.com/Yelp/detect-secrets/pull/546\n[#551]: https://github.com/Yelp/detect-secrets/pull/551\n[#555]: https://github.com/Yelp/detect-secrets/pull/555\n[#567]: https://github.com/Yelp/detect-secrets/pull/567\n[#568]: https://github.com/Yelp/detect-secrets/pull/568\n[#569]: https://github.com/Yelp/detect-secrets/pull/569\n[#571]: https://github.com/Yelp/detect-secrets/pull/571\n[#574]: https://github.com/Yelp/detect-secrets/pull/574\n[#575]: https://github.com/Yelp/detect-secrets/pull/575\n[#576]: https://github.com/Yelp/detect-secrets/pull/576\n[#578]: https://github.com/Yelp/detect-secrets/pull/578\n[#579]: https://github.com/Yelp/detect-secrets/pull/579\n\n### v1.2.0\n##### February 16th, 2022\n\n#### :mega: Release Highlights\n- Continuous integration github action added ([#506])\n- Release pipeline github action added ([#513])\n\n#### :tada: New Features\n\n- New GitHub token plugin added ([#465])\n- New SendGrid plugin added ([#463])\n- More new ignored file extensions\n\n#### :bug: Bugfixes\n- Fixes catastrophic backtracking for indirect reference heuristic ([#509])\n- Fixes pre-commit hook secret equality checking causing updates to baseline with no real changes - only a timestamp update ([#507])\n- Fixes python 3.8 failing to load plugins on windows and macos ([#505])\n- Fixes yaml transformer inline dictionary index out of bounds exceptions ([#501])\n- Fixes regex for slack url ([#477])\n- Fixes `AttributeError: 'PotentialSecret' object has no attribute 'line_number'` by safely falling back to 0 if line_number isn't present. ([#476])([#472])\n- Fixes gibberish-detector current version\n- Fixes filtering ordering in .secrets.baseline\n\n#### :snake: Miscellaneous\n\n- Updated README due hook failing to interpret filenames with spaces ([#470])\n- Add CI github action badge to README\n- Development dependency bumps ([#519])\n\n[#463]: https://github.com/Yelp/detect-secrets/pull/463\n[#465]: https://github.com/Yelp/detect-secrets/pull/465\n[#470]: https://github.com/Yelp/detect-secrets/pull/470\n[#472]: https://github.com/Yelp/detect-secrets/pull/472\n[#476]: https://github.com/Yelp/detect-secrets/pull/476\n[#477]: https://github.com/Yelp/detect-secrets/pull/477\n[#501]: https://github.com/Yelp/detect-secrets/pull/501\n[#505]: https://github.com/Yelp/detect-secrets/pull/505\n[#506]: https://github.com/Yelp/detect-secrets/pull/506\n[#507]: https://github.com/Yelp/detect-secrets/pull/507\n[#509]: https://github.com/Yelp/detect-secrets/pull/509\n[#513]: https://github.com/Yelp/detect-secrets/pull/513\n[#519]: https://github.com/Yelp/detect-secrets/pull/519\n\n### v1.1.0\n##### April 14th, 2021\n\n#### :mega: Release Highlights\n\n- New gibberish filter added ([#416])\n- Multiprocessing support, for faster scans! ([#441])\n- Support for scanning different directories (rather than the current directory) ([#440])\n\n#### :tada: New Features\n\n- `KeywordDetector` supports whitespace secrets ([#414])\n- `KeywordDetector` now supports prefix/suffixed keywords, and accuracy updates\n- Adding alphanumerical filter to ensure secrets have at least one letter/number in them ([#428])\n- New filter added for ignoring common lock files ([#417])\n- More new ignored file extensions\n- Adding filter to ignore swagger files\n- Added `audit --report` to extract secret values with a baseline\n  ([#387], thanks [@pablosantiagolopez], [@syn-4ck])\n\n#### :telescope: Accuracy\n\n- `KeywordDetector` now defaults to requiring quotes around secrets ([#448])\n- `KeywordDetector` now searches for more keywords ([#430])\n\n#### :bug: Bugfixes\n\n- Filter caches are cleared when swapping between different `Settings` objects ([#444])\n- Upgrading baselines from <0.12 migrates `exclude` to `exclude-files` rather than `exclude-lines`\n  ([#446])\n\n#### :snake: Miscellaneous\n\n- More verbose logging, to help with debugging issues ([#432])\n- YAMLTransformer handles binary entries differently\n\n[#387]: https://github.com/Yelp/detect-secrets/pull/387\n[#414]: https://github.com/Yelp/detect-secrets/pull/414\n[#416]: https://github.com/Yelp/detect-secrets/pull/416\n[#417]: https://github.com/Yelp/detect-secrets/pull/417\n[#428]: https://github.com/Yelp/detect-secrets/pull/428\n[#430]: https://github.com/Yelp/detect-secrets/pull/430\n[#432]: https://github.com/Yelp/detect-secrets/pull/432\n[#440]: https://github.com/Yelp/detect-secrets/pull/440\n[#441]: https://github.com/Yelp/detect-secrets/pull/441\n[#444]: https://github.com/Yelp/detect-secrets/pull/444\n[#446]: https://github.com/Yelp/detect-secrets/pull/446\n[#448]: https://github.com/Yelp/detect-secrets/pull/448\n[@syn-4ck]: https://github.com/syn-4ck\n\n### v1.0.3\n##### February 26th, 2021\n\n#### :bug: Bugfixes\n\n- Fixes `SecretsCollection` subtraction method, to handle non-overlapping files.\n- Fixes installation for Windows environments ([#412], thanks [@pablosantiagolopez])\n\n[#412]: https://github.com/Yelp/detect-secrets/pull/412\n[@pablosantiagolopez]: https://github.com/pablosantiagolopez\n\n### v1.0.2\n##### February 25th, 2021\n\n#### :bug: Bugfixes\n\n- `KeywordDetector` is no longer case-sensitive.\n\n### v1.0.1\n##### February 25th, 2021\n\n#### :bug: Bugfixes\n\n- Fixes recursive loop with installation ([#408], thanks [@cbows])\n\n[#408]: https://github.com/Yelp/detect-secrets/pull/408\n[@cbows]: https://github.com/cbows\n\n### v1.0.0\n##### February 24th, 2021\n\n#### :mega: Release Highlights\n\n- Added a concept of [\"filters\"](./docs/filters.md), to weed out false positives\n- Introduce the concept of [\"transformers\"](./docs/design.md#Transformers), to standardize file\n  parsing across plugins\n- Designed an upgrade system for easy migrations of older baseline versions\n- Core engine redesigned to support module usage (rather than just interacting with it through\n  the command line)\n- Added a global [`Settings`](./docs/design.md#Settings) object for repeatable, serializable,\n  configurations\n- Introduced dependency injection framework for easy-to-design filters.\n\n#### :boom: Breaking Changes\n\nHonestly, too many to list out. Check out the original pull request\n([#355](https://github.com/Yelp/detect-secrets/pull/355)) for more details. It's safe to assume\nthat if you interacted with `detect-secrets` as a module (rather than solely a pre-commit hook\nor CLI tool), the APIs have changed (for the better).\n\n**However**, with the new upgrade infrastructure in place, the baseline files will auto upgrade\nby themselves. Users that have used it solely as a pre-commit hook or CLI tool may need to consult\nthe [\"User Facing Changes\"](https://github.com/Yelp/detect-secrets/pull/355) for flag renaming.\n\n#### :tada: New Features\n\n- Added `NpmDetector` ([#347], thanks [@ninoseki])\n- Added `AzureStorageKeyDetector` ([#359], thanks [@DariuszPorowski])\n- Added `SquareOauthDetector` ([#398], thanks [@pablosantiagolopez])\n- Added `--only-allowlisted` flag to scan for inline ignores\n- Added `--list-all-plugins` to show a list of all plugins available to the engine\n- Added `--exclude-secrets` flag to ignore secrets that match specific regexes\n  ([#391], thanks [@pablosantiagolopez])\n- Added `--slim` flag to generate baselines that minimize git diffs\n- Added `--disable-filter` to disable specific filters\n- Added `--disable-plugin` to disable specific plugins\n- Added support for `# pragma: allowlist nextline secret` to ignore the following line\n  ([#367], thanks [@nickiaconis])\n\n[#347]: https://github.com/Yelp/detect-secrets/pull/347\n[#359]: https://github.com/Yelp/detect-secrets/pull/359\n[#367]: https://github.com/Yelp/detect-secrets/pull/367\n[#391]: https://github.com/Yelp/detect-secrets/pull/391\n[#398]: https://github.com/Yelp/detect-secrets/pull/398\n[@DariuszPorowski]: https://github.com/DariuszPorowski\n[@nickiaconis]: https://github.com/nickiaconis\n[@ninoseki]: https://github.com/ninoseki\n[@pablosantiagolopez]: https://github.com/pablosantiagolopez\n\n#### :telescope: Accuracy\n\n- AWS Plugin now scans for secret tokens as well ([#397], thanks [@pablosantiagolopez])\n\n[#397]: https://github.com/Yelp/detect-secrets/pull/397\n[@pablosantiagolopez]: https://github.com/pablosantiagolopez\n\n#### :mortar_board: Walkthrough / Help\n\n- The README now includes examples of common usages, features, and an FAQ section for\n  the common questions we often receive as GitHub issues.\n- So much better [technical documentation](./docs)!\n- Type support added\n\n#### :bug: Bugfixes\n\n- Inline allowlisting is respected by regular scans, rather than only pre-commit hook\n- `audit` functionality improved on Windows machines\n- git operations now handle file paths with spaces\n- fix KeywordDetector hanging on very long lines ([#373], thanks [@gpflaum])\n\n[#373]: https://github.com/Yelp/detect-secrets/pull/373\n[@gpflaum]: https://github.com/gpflaum\n\n### v0.14.3\n##### August 27th, 2020\n\n#### :telescope: Accuracy\n\n- Verify Slack secrets more accurately ([#325], thanks [@dryoni])\n\n#### :bug: Bugfixes\n\n- Fix a `TypeError` exception in adhoc string scanning ([#336])\n\n#### :snake: Miscellaneous\n\n- Fix an XML comment in documentation ([#322], thanks [@cilefen])\n\n[#322]: https://github.com/Yelp/detect-secrets/pull/322\n[#325]: https://github.com/Yelp/detect-secrets/pull/325\n[#336]: https://github.com/Yelp/detect-secrets/pull/336\n[@dryoni]: https://github.com/dryoni\n[@cilefen]: https://github.com/cilefen\n\n### v0.14.2\n##### July 25th, 2020\n\n#### :bug: Bugfixes\n\n- Fixed an `AttributeError` exception in the pre-commit hook, when on Windows ([#321], thanks [@JohnNeville])\n\n[#321]: https://github.com/Yelp/detect-secrets/pull/321\n[@JohnNeville]: https://github.com/JohnNeville\n\n### v0.14.1\n##### July 13th, 2020\n\n#### :bug: Bugfixes\n\n- Add missing `tuple()` conversion that raised a `TypeError` when using `scan --update` ([#317], thanks [@shaikmanu797])\n\n[#317]: https://github.com/Yelp/detect-secrets/pull/317\n[@shaikmanu797]: https://github.com/shaikmanu797\n\n### v0.14.0\n##### July 9th, 2020\n\n#### :mega: Release Highlights\n\n- Remove support for Python 2 ([#292], big thanks to [@KevinHock]!)\n\n#### :tada: New Features\n\n- Add support for custom plugins ([#308], big thanks to [@KevinHock]!)\n\n#### :performing_arts: Performance\n\n- Check the allowlist after a secret is found, instead of before ([#293], [#244])\n\n#### :telescope: Accuracy\n\n- Make IBM plugins less noisy ([#289], thanks to [@killuazhu])\n\n#### :bug: Bugfixes\n\n- Display helpful error message when scanning a baseline from a newer `detect-secrets` version ([#293], [#269])\n\n#### :snake: Miscellaneous\n\n- Pin coverage version used in testing ([#290])\n\n[#244]: https://github.com/Yelp/detect-secrets/issues/244\n[#269]: https://github.com/Yelp/detect-secrets/issues/269\n[#289]: https://github.com/Yelp/detect-secrets/pull/289\n[#290]: https://github.com/Yelp/detect-secrets/pull/290\n[#292]: https://github.com/Yelp/detect-secrets/pull/292\n[#293]: https://github.com/Yelp/detect-secrets/pull/293\n[#308]: https://github.com/Yelp/detect-secrets/pull/308\n\n### v0.13.1\n##### March 26th, 2020\n\n#### :tada: New Features\n\n- Adding plugin for IBM's Cloudant ([#261], thanks [@killuazhu])\n- Adding plugin for IBM Cloud Object Storage HMAC ([#263], thanks [@killuazhu])\n- Adding Twilio plugin ([#267], thanks [@EdOverflow])\n\n[#261]: https://github.com/Yelp/detect-secrets/pull/261\n[#263]: https://github.com/Yelp/detect-secrets/pull/263\n[#267]: https://github.com/Yelp/detect-secrets/pull/267\n\n#### :sparkles: Usability\n\n- Support for `DETECT_SECRETS_SECURITY_TEAM` environment variable to customize\n  the pre-commit hook error message ([#283], thanks [@0atman])\n\n[#283]: https://github.com/Yelp/detect-secrets/pull/283\n\n#### :bug: Bugfixes\n\n- Adhoc `HighEntropyString` scanning supports multiple words ([#287])\n\n[#287]: https://github.com/Yelp/detect-secrets/pull/287\n\n### v0.13.0\n##### October 28th, 2019\n\n#### :newspaper: News\n\n- Rationale for the minor version bump:\n    - Some accuracy changes that might change baselines significantly\n    - @OiCMudkips' first release increases spookiness\n    - It being almost Halloween increases spookiness\n\n#### :tada: New Features\n\n- Added a Softlayer plugin ([#254], thanks [@killuazhu] and [@justineyster])\n- Support URL-safe base64 strings in the base64 plugin ([#245])\n\n#### :sparkles: Usability\n\n- Make it easier to add new plugins to detect-secrets ([#248])\n\n#### :telescope: Accuracy\n\n- Exclude NOPASSWD from the keyword detector ([#247], thanks [@security-architecture])\n- Ignore lines with `id` in them in the high-entropy plugins ([#245])\n- Ignore UUIDs detected by the base64 plugin ([#245])\n\n#### :bug: Bugfixes\n\n- Fix the signal metric in the audit results view ([#251])\n\n[#245]: https://github.com/Yelp/detect-secrets/pull/245\n[#247]: https://github.com/Yelp/detect-secrets/pull/247\n[#248]: https://github.com/Yelp/detect-secrets/pull/248\n[#251]: https://github.com/Yelp/detect-secrets/pull/251\n[#254]: https://github.com/Yelp/detect-secrets/pull/254\n\n\n\n### v0.12.7\n##### September 23rd, 2019\n\n#### :tada: New Features\n\n- Added a `JwtTokenDetector` plugin ([#239], thanks [@gdemarcsek])\n- [Added verification for Mailchimp API keys](https://github.com/Yelp/detect-secrets/pull/241/commits/977c4fb5606b42a9c73dfb598fa0a6cd0ab77c90)\n- [Added verification for Stripe secret API keys](https://github.com/Yelp/detect-secrets/pull/241/commits/9cabbe078c16ce476400859ebbdf160c82f6ea80)\n\n#### :telescope: Accuracy\n\n- Added a `--word-list` option for filtering secrets with words in them ([#241], do `pip install detect-secrets[word_list]` to use this feature)\n\n#### :bug: Bugfixes\n\n- [Fixed a bug where we were not skipping ignored file extensions](https://github.com/Yelp/detect-secrets/pull/241/commits/bb543c5b20372f507ae0f99f7d01872f66db3a83)\n- [Fixed a bug in the `audit` functionality where we crashed if the baseline had a Mailchimp secret in it](https://github.com/Yelp/detect-secrets/pull/241/commits/ef5d0006cc953784631f19f7de72ba3ab5972def)\n\n[#239]: https://github.com/Yelp/detect-secrets/pull/239\n[#241]: https://github.com/Yelp/detect-secrets/pull/241\n\n\n\n### v0.12.6\n##### September 16th, 2019\n\n#### :tada: New Features\n\n- Added a `MailchimpDetector` plugin ([#217], thanks [@dgzlopes])\n- Added verification for Slack webhooks ([#233], thanks [@Patil2099])\n\n#### :telescope: Accuracy\n\n- Added handling of binary secrets in YAML files ([#223])\n- Added various accuracy improvements to the `KeywordDetector` plugin ([#229])\n\n#### :bug: Bugfixes\n\n- Fixed a bug in the `audit` functionality where we crashed when the highlighter failed ([#228])\n- Fixed a bug in the `audit` functionality where there was no (b)ack audit functionality when a secret was not found ([#215], thanks [@dgzlopes])\n- Fixed a bug where we were not excluding SVG files ([#219])\n\n#### :snake: Miscellaneous\n\n- Added a unique exit code to identify baseline changes ([#214], thanks [@lirantal])\n- Updated and ran our pre-commit hooks ([#221], thanks [@killuazhu])\n\n\n[#214]: https://github.com/Yelp/detect-secrets/pull/214\n[#215]: https://github.com/Yelp/detect-secrets/pull/215\n[#217]: https://github.com/Yelp/detect-secrets/pull/217\n[#219]: https://github.com/Yelp/detect-secrets/pull/219\n[#221]: https://github.com/Yelp/detect-secrets/pull/221\n[#223]: https://github.com/Yelp/detect-secrets/pull/223\n[#228]: https://github.com/Yelp/detect-secrets/pull/228\n[#229]: https://github.com/Yelp/detect-secrets/pull/229\n[#233]: https://github.com/Yelp/detect-secrets/pull/233\n\n\n\n### v0.12.5\n##### July 23rd, 2019\n\n#### :tada: New Features\n\n- Added webhook detection to our `SlackDetector` plugin ([#195], thanks [@adrianbn])\n- Added support for scanning multiple files ([#188], thanks [@dgzlopes])\n- Added support for scanning multiple repositories ([#193])\n- Added verification for AWS access keys and Slack tokens ([#194])\n- Added an `audit --display-results` feature to aid plugin development ([#205])\n\n#### :telescope: Accuracy\n\n- Improved our Artifactory regex ([#195], thanks [@adrianbn])\n- Improved sequential string detection to catch the Base64 character set ([#207])\n- Moved our sequential string detection so it is used by all plugins ([#196])\n\n#### :performing_arts: Performance\n\n- Added performance testing benchmarks ([#181], [#186], [#187], thanks [@dgzlopes])\n\n[#181]: https://github.com/Yelp/detect-secrets/pull/181\n[#186]: https://github.com/Yelp/detect-secrets/pull/186\n[#187]: https://github.com/Yelp/detect-secrets/pull/187\n[#188]: https://github.com/Yelp/detect-secrets/pull/188\n[#193]: https://github.com/Yelp/detect-secrets/pull/193\n[#194]: https://github.com/Yelp/detect-secrets/pull/194\n[#195]: https://github.com/Yelp/detect-secrets/pull/195\n[#196]: https://github.com/Yelp/detect-secrets/pull/196\n[#205]: https://github.com/Yelp/detect-secrets/pull/205\n[#207]: https://github.com/Yelp/detect-secrets/pull/207\n\n\n\n### v0.12.4\n##### May 22nd, 2019\n\n#### :newspaper: News\n\n- `whitelist`/`blacklist` have been replaced with `allowlist`/`denylist` ([#178], thanks [@richo]).\nThis includes using `# pragma: allowlist secret` now for inline allowlisting.\n`# pragma: whitelist secret` compatibility will be removed in a later major version bump.\n\n#### :tada: New Features\n\n- Added a `StripeDetector` plugin ([#169], thanks [@dgzlopes])\n- Improved handling of un-scannable files ([#176], thanks [@dgzlopes])\n\n#### :snake: Miscellaneous\n\n- Improved documentation of regex based detector's in the README ([#177], thanks [@dgzlopes])\n\n[#169]: https://github.com/Yelp/detect-secrets/pull/169\n[#176]: https://github.com/Yelp/detect-secrets/pull/176\n[#177]: https://github.com/Yelp/detect-secrets/pull/177\n[#178]: https://github.com/Yelp/detect-secrets/pull/178\n\n\n\n### v0.12.3\n##### May 13th, 2019\n\n#### :tada: New Features\n\n- Added an `ArtifactoryDetector` plugin ([#157] and [#163], thanks [@justineyster])\n- Added support for Golang string assignments in the `KeywordDetector` plugin ([#162], thanks [@baboateng])\n- Added support for XML inline whitelisting comments ([#152], thanks [@killuazhu])\n- Added support for text after inline whitelisting comments ([#168], thanks [@dgzlopes])\n\n#### :bug: Bugfixes\n\n- Fixed a bug where filetype detection failed due to an inconsistent `configparser` import ([#155], thanks [@Namburgesas])\n\n#### :snake: Miscellaneous\n- **Greatly** improved the readability of regular expressions in the `KeywordDetector` plugin, and the maintainability of the corresponding test ([#160] and [#161], thanks [@baboateng])\n- Added a contribution guide ([#166], thanks [@zioalex])\n- Documented all of our inline whitelisting directives ([#165] and [#172], thanks [@dgzlopes])\n\n[#152]: https://github.com/Yelp/detect-secrets/pull/152\n[#155]: https://github.com/Yelp/detect-secrets/pull/155\n[#157]: https://github.com/Yelp/detect-secrets/pull/157\n[#160]: https://github.com/Yelp/detect-secrets/pull/160\n[#161]: https://github.com/Yelp/detect-secrets/pull/161\n[#162]: https://github.com/Yelp/detect-secrets/pull/162\n[#163]: https://github.com/Yelp/detect-secrets/pull/163\n[#165]: https://github.com/Yelp/detect-secrets/pull/165\n[#166]: https://github.com/Yelp/detect-secrets/pull/166\n[#168]: https://github.com/Yelp/detect-secrets/pull/168\n[#172]: https://github.com/Yelp/detect-secrets/pull/172\n\n\n\n### v0.12.2\n##### March 21st, 2019\n\n#### :bug: Bugfixes\n\n- Fixed a bug where the improved performance for high-entropy strings ([#144]) did not work on Python 2 ([#147])\n\n[#147]: https://github.com/Yelp/detect-secrets/pull/147\n\n\n\n### v0.12.1\n##### March 21st, 2019\n\n#### :tada: New Features\n\n- Added a `--keyword-exclude` argument to `scan` ([#132], thanks [@hpandeycodeit])\n\n#### :telescope: Accuracy\n\n- For the `KeywordDetector` plugin: made quotes required for secrets in `.cls` and `.java` files, and skipped `{{secrets like this}}` in YAML files ([#133]/[#145])\n\n#### :performing_arts: Performance\n\n- Improved performance when scanning for high-entropy strings ([#144], thanks [@killuazhu])\n\n#### :bug: Bugfixes\n\n- Fixed an uncaught `UnicodeEncodeError` exception in our `ini` file parser, when using Python 2 ([#143])\n\n#### :snake: Miscellaneous\n\n- Fixed the example pre-commit configuration in the README ([#135], thanks [@nymous]) ([#138], thanks [@neunkasulle])\n- Refactored some `audit` code into `CodeSnippet` and `CodeSnippetHighlighter` classes ([#137])\n\n[#132]: https://github.com/Yelp/detect-secrets/pull/132\n[#133]: https://github.com/Yelp/detect-secrets/pull/133\n[#135]: https://github.com/Yelp/detect-secrets/pull/135\n[#137]: https://github.com/Yelp/detect-secrets/pull/137\n[#138]: https://github.com/Yelp/detect-secrets/pull/138\n[#143]: https://github.com/Yelp/detect-secrets/pull/143\n[#144]: https://github.com/Yelp/detect-secrets/pull/144\n[#145]: https://github.com/Yelp/detect-secrets/pull/145\n\n\n\n### v0.12.0\n##### February 11th, 2019\n\n#### :tada: New Features\n\n- Added a `SlackDetector` plugin ([#122], thanks [@killuazhu])\n- Added a `--use-all-plugins` argument to `--update` that adds all plugins to the baseline ([#124], thanks [@killuazhu])\n- Added `--exclude-files` and `--exclude-lines` arguments to `scan` ([#127])\n\n#### :boom: Breaking Changes\n\n- Removed the `--exclude` CLI scan argument ([#127])\n\n#### :telescope: Accuracy\n\n- Reduced false-positives by excluding more characters (`!$&\\';`) in the `BasicAuthDetector` regex ([#126], [#123], thanks [@killuazhu])\n- Added more to the `FALSE_POSITIVES` dict for the `KeywordDetector` plugin, **including** `password` ([#118])\n\n#### :bug: Bugfixes\n\n- Fixed a bug where `--update` was adding all plugins to the baseline, instead of respecting the plugins used in the baseline ([#124], thanks [@killuazhu])\n- Fixed an uncaught `UnicodeEncodeError` exception when scanning non-ini files (e.g. markdown) containing unicode, when using Python 2 ([#128], thanks [@killuazhu])\n- Fixed a bug where non-ini files (e.g. markdown) containing unicode caused a `UnicodeEncodeError` exception in the `audit` functionality, when using Python 2 ([#129], thanks [@killuazhu])\n- Fixed a bug where non-posix end of line characters caused a \"Secret not found on line....\" error in the `audit` functionality ([#120], thanks [@killuazhu])\n- Fixed a bug where `scan_diff`, called by [`detect-secrets-server`](https://github.com/Yelp/detect-secrets-server), was ignoring inline `pragma: whitelist secret` comments ([#127])\n\n#### :snake: Miscellaneous\n\n- Relaxed the number of spaces before inline `pragma: whitelist secret` comment ([#125], thanks [@killuazhu]]\n- Added Python 3.7 to Travis CI and `tox.ini` testing ([#114], thanks [@cclauss])\n- [Increased minimum test coverage from 97% to 98%](https://github.com/Yelp/detect-secrets/commit/876b523366057f8c0da14a36e3c972c3e74dfb77)\n\n[#114]: https://github.com/Yelp/detect-secrets/pull/114\n[#118]: https://github.com/Yelp/detect-secrets/pull/118\n[#120]: https://github.com/Yelp/detect-secrets/pull/120\n[#122]: https://github.com/Yelp/detect-secrets/pull/122\n[#123]: https://github.com/Yelp/detect-secrets/pull/123\n[#124]: https://github.com/Yelp/detect-secrets/pull/124\n[#125]: https://github.com/Yelp/detect-secrets/pull/125\n[#126]: https://github.com/Yelp/detect-secrets/pull/126\n[#127]: https://github.com/Yelp/detect-secrets/pull/127\n[#128]: https://github.com/Yelp/detect-secrets/pull/128\n[#129]: https://github.com/Yelp/detect-secrets/pull/129\n\n\n\n### v0.11.4\n##### January 7th, 2019\n\n#### :bug: Bugfixes\n- Fixed a `TypeError` bug introduced in [#111]  ([#116])\n\n[#116]: https://github.com/Yelp/detect-secrets/pull/116\n\n\n\n### v0.11.3\n##### January 4th, 2019\n\n#### :bug: Bugfixes\n- Fixed a bug where we were adding an extra-newline in `detect-secrets scan` output ([#111])\n\n#### :snake: Miscellaneous\n\n- Reorganized the code, mainly creating a `common/` directory ([#113])\n\n[#111]: https://github.com/Yelp/detect-secrets/pull/111\n[#113]: https://github.com/Yelp/detect-secrets/pull/113\n\n\n\n### v0.11.2\n##### January 4th, 2019\n\n#### :telescope: Accuracy\n\n- [Added `null` to the `FALSE_POSITIVES` tuple for the `KeywordDetector` plugin, so we don't alert off of it](https://github.com/Yelp/detect-secrets/commit/58df82ce37d64f22cb885960c2031b5f8ebe4b75)\n\n\n\n### v0.11.1\n##### January 4th, 2019\n\n#### :tada: New Features\n\n- Turned the `KeywordDetector` plugin back on, with new regexes and accuracy improvements ([#86])\n- Added an `AWSAccessKeyDetector` plugin ([#100])\n- Added the ability to scan `.ini` types files that don't have a header ([#106])\n\n[#86]: https://github.com/Yelp/detect-secrets/pull/86\n[#100]: https://github.com/Yelp/detect-secrets/pull/100\n[#106]: https://github.com/Yelp/detect-secrets/pull/106\n\n#### :telescope: Accuracy\n\n- Add blacklisting of PGP private key headers in `PrivateKeyDetector` plugin ([#104])\n- Reduced false-positives by improving `BasicAuthDetector` plugin regex ([#98])\n\n[#104]: https://github.com/Yelp/detect-secrets/pull/104\n\n#### :bug: Bugfixes\n- Fixed a bug where we were not showing removed lines in the `audit` functionality ([#98])\n\n[#98]: https://github.com/Yelp/detect-secrets/pull/98\n\n#### :snake: Miscellaneous\n\n- Added whitelist directive regexes to match against inline comment syntaxes in more languages ([#105])\n- Refactored various detectors to use `RegexBasedDetector` ([#103])\n- Refactored the `BashColor` singleton into the `colorize` function ([#109])\n- Small improvements to existing file parsers ([#107])\n- Refactored the `BasePlugin` to use the `WHITELIST_REGEX` ([#99])\n- Removed `unidiff` from standard dependencies ([#101])\n\n[#99]: https://github.com/Yelp/detect-secrets/pull/99\n[#101]: https://github.com/Yelp/detect-secrets/pull/101\n[#103]: https://github.com/Yelp/detect-secrets/pull/103\n[#105]: https://github.com/Yelp/detect-secrets/pull/105\n[#107]: https://github.com/Yelp/detect-secrets/pull/107\n[#109]: https://github.com/Yelp/detect-secrets/pull/109\n\n\n\n### v0.11.0\n##### November 26th, 2018\n\n#### :tada: New Features\n\n- Made the pre-commit hook automatically update the baseline ([#96])\n- Added the `audit --diff` functionality ([#95])\n\n[#95]: https://github.com/Yelp/detect-secrets/pull/95\n[#96]: https://github.com/Yelp/detect-secrets/pull/96\n\n#### :art: Display Changes\n\n- Added display of secret type in audit functionality ([#94])\n\n[#94]: https://github.com/Yelp/detect-secrets/pull/94\n\n\n\n### v0.10.5\n##### October 30th, 2018\n\n#### :art: Display Changes\n\n- Added a \"Please git add the baseline\" message ([#89])\n- Improved the \"Unable to open baseline file\" message ([#91])\n\n[#91]: https://github.com/Yelp/detect-secrets/pull/91\n\n#### :bug: Bugfixes\n\n- Update `scan --update` results to only propagate `is_secret` of new secrets  ([#90])\n\n[#90]: https://github.com/Yelp/detect-secrets/pull/90\n\n\n\n### 0.10.4\n##### October 23rd, 2018\n\n#### :boom: Breaking Changes\n- Disabled `KeywordDetector` plugin temporarily ([#89])\n\n#### :art: Display Changes\n\n- Ordered baseline hashes, for better diffs ([#84])\n- Added a \"Please git add the baseline\" message ([#89])\n- Improved error messages for pre-commit hook ([#85])\n\n[#84]: https://github.com/Yelp/detect-secrets/pull/84\n[#89]: https://github.com/Yelp/detect-secrets/pull/89\n[#85]: https://github.com/Yelp/detect-secrets/pull/85\n\n#### :bug: Bugfixes\n\n- Fixed a couple bugs in the `audit` functionality, one for small files and the other case-sensitivity in the `KeywordDetector` plugin ([#83], thanks [@jkozera])\n\n[#83]: https://github.com/Yelp/detect-secrets/pull/83\n\n\n\n### 0.10.3\n##### October 4th, 2018\n\n#### :tada: New Features\n\n- Added a `KeywordDetector` plugin, that was horrible and regretful ([#76])\n\n#### :bug: Bugfixes\n\n- Fixed a bug in `scan --update` where we would append the baseline exclude regex to itself ([#78])\n- Fixed the regular expression in the `BasicAuthDetector` plugin so that it didn't run forever ([#80])\n- Removed trailing whitespace from `scan` output ([#78])\n\n#### :snake: Miscellaneous\n\n- Added command line hints and baseline clarification in the README ([#81], thanks [@JoshuaRLi])\n\n[#76]: https://github.com/Yelp/detect-secrets/pull/76\n[#78]: https://github.com/Yelp/detect-secrets/pull/78\n[#80]: https://github.com/Yelp/detect-secrets/pull/80\n[#81]: https://github.com/Yelp/detect-secrets/pull/81\n\n\n\n### 0.10.2\n##### September 12th, 2018\n\n#### :tada: New Features\n\n- Added a (b)ack option to 'Is this a valid secret?' ([#72], thanks [@cleborys])\n- Added a `BasicAuthDetector` plugin ([#74])\n- Added CLI functionality to check strings in an adhoc manner ([#73])\n\n#### :bug: Bugfixes\n\n- Added a check to only load json from stdin if it exists ([#69], thanks [@guykisel])\n\n#### :snake: Miscellaneous\n\n- Fixed a typo in the README ([#68], thanks [@whathejoe])\n\n\n[#68]: https://github.com/Yelp/detect-secrets/pull/68\n[#69]: https://github.com/Yelp/detect-secrets/pull/69\n[#72]: https://github.com/Yelp/detect-secrets/pull/72\n[#73]: https://github.com/Yelp/detect-secrets/pull/73\n[#74]: https://github.com/Yelp/detect-secrets/pull/74\n\n\n\n### 0.10.1\n##### August 1st, 2018\n\n#### :bug: Bugfixes\n\n- Fixed a bug where we didn't skip sequential strings when we should have ([#67])\n\n[#67]: https://github.com/Yelp/detect-secrets/pull/67\n\n\n\n### 0.10.0\n##### August 1st, 2018\n\n#### :tada: New Features\n\n- Scan `--all-files` option ([#57])\n- YAML inline whitelisting support ([#50])\n\n#### :boom: Breaking Changes\n\n- Changed `--audit` and `--scan` to `audit` and `scan` ([#51])\n- Changed `scan --import <baseline>` to `scan --update <baseline>` ([#58])\n\n#### :telescope: Accuracy\n\n- Reduced false-positives caused by sequential strings, e.g. `ABCDEF` ([#64])\n\n#### :bug: Bugfixes\n\n- Fixed a bug where the pre-commit code would remove the `is_secret` attribute from\n  audited baselines ([#65])\n- Fixed an `audit` bug where we would crash if a file in the baseline did not exist\n  ([#56])\n- Improved the `audit` functionality to handle short files better ([#48])\n\n\n[#48]: https://github.com/Yelp/detect-secrets/pull/48\n[#50]: https://github.com/Yelp/detect-secrets/pull/50\n[#51]: https://github.com/Yelp/detect-secrets/pull/51\n[#56]: https://github.com/Yelp/detect-secrets/pull/56\n[#57]: https://github.com/Yelp/detect-secrets/pull/57\n[#58]: https://github.com/Yelp/detect-secrets/pull/58\n[#64]: https://github.com/Yelp/detect-secrets/pull/64\n[#65]: https://github.com/Yelp/detect-secrets/pull/65\n\n\n\n### 0.9.1\n##### June 28th, 2018\n\n#### :bug: Bugfixes\n\n- Fixed numbering system with interactive audit\n- Fixed \"leapfrog\" edge case for audit functionality ([#47])\n\n\n[#47]: https://github.com/Yelp/detect-secrets/pull/47\n\n\n\n### 0.9.0\n##### June 27th, 2018\n\n#### :tada: New Features\n\n- Added ability to migrate baselines from an older version to a newer version\n- Added functionality to audit baseline, to distinguish difference between\n  false and true positives in the baseline file ([#44])\n- Upgraded `PrivateKeyPlugin`: more search parameters, more lines searched,\n  and secret hash created using payload (rather than the entire line content)\n\n#### :boom: Breaking Changes\n\n- Differentiate between `Base64HighEntropyStrings` and `HexHighEntropyStrings` through\n  `secret_type` ([#26])\n- Got rid of `SensitivityValues` as a means to store plugin configs\n\n#### :telescope: Accuracy\n\n- Improved the heuristic for `HexHighEntropyStrings`, reducing the false positive rates\n  for large numbers identified in code\n\n#### :bug: Bugfixes\n\n- Baseline always outputs in sorted order now, to prevent unnecessary diffs ([#25])\n- Escape exclude regex statements before compilation ([#39])\n- Fixed case where details of plugins used were not included in the baseline,\n  when the pre-commit hook updated it ([#40])\n\n#### :snake: Miscellaneous\n\n- Simplified logging by removing `CustomLog` ([#46])\n\n\n[#25]: https://github.com/Yelp/detect-secrets/pull/25\n[#26]: https://github.com/Yelp/detect-secrets/pull/26\n[#39]: https://github.com/Yelp/detect-secrets/pull/39\n[#40]: https://github.com/Yelp/detect-secrets/pull/40\n[#44]: https://github.com/Yelp/detect-secrets/pull/44\n[#46]: https://github.com/Yelp/detect-secrets/pull/46\n\n\n\n### Before 0.9.0\n\n#### :tada: New Features\n\n- Allow scanning of non-git files ([#18])\n\n#### :telescope: Accuracy\n\n- Improved scanning of INI config files with `HighEntropyString` ([#13] and [#17])\n- Improved scanning of YAML files with `HighEntropyString` ([#16])\n\n#### :bug: Bugfixes\n\n- Fixed `PrivateKeyDetector` plugin analyze results' representation ([#15])\n\n[#13]: https://github.com/Yelp/detect-secrets/pull/13\n[#15]: https://github.com/Yelp/detect-secrets/pull/15\n[#16]: https://github.com/Yelp/detect-secrets/pull/16\n[#17]: https://github.com/Yelp/detect-secrets/pull/17\n[#18]: https://github.com/Yelp/detect-secrets/pull/18\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.849609375,
          "content": "# Contributing\n\nThanks for your interest in helping to grow this repository, and make it better\nfor developers everywhere! This document serves as a guide to help you quickly\ngain familarity with the repository, and start your development environment so\nthat you can quickly hit the ground running.\n\n## 1. Learn the Overall Layout of the Code\n\nBe sure to read through the [overview of `detect-secrets`' design](/docs/design.md) before\nstarting to work on it! This will give you a better idea of the different components to the\nsystem, and how they interact together to find secrets.\n\n## 2. Building Your Development Environment\n\nThere are several ways to spin up your virtual environment:\n\n**Casual Python Developers**:\n\n```bash\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements-dev.txt\n```\n\n**Regular Python Developers:**\n\n```bash\nvirtualenv --python=python3 venv\nsource venv/bin/activate\npip install -r requirements-dev.txt\n```\n\n> **Developer Note**: The main difference between this method and the former one (using Python's\n  in-built virtual environment) is that Python's `venv` module pins the `pip` version. However,\n  it doesn't matter too much if you're working on this repository alone, since `detect-secrets`\n  doesn't ship with many dependency requirements.\n\nor\n\n```bash\ntox -e venv\nsource venv/bin/activate\n```\n\n> **Developer Note**: The benefit of this is that `tox` sets up a common development environment\n  for you. The downside is that you'll need to install `tox` first -- which if you already have,\n  you wouldn't be reading this section :)\n\n\nWhichever way you choose, you can check to see whether you're successful by executing:\n\n```bash\npython -m detect_secrets --version\n```\n\n## 3. Run tests\n\nTests should succeed on master. Any code additions you contribute will also need testing\nso it's good to run tests first to make sure you have a working copy. Don't worry -- the tests\ndon't take long!\n\n```bash\n$ time python -m pytest tests\n...\nreal    0m10.113s\nuser    0m6.848s\nsys     0m2.486s\n```\n\n### Running the Entire Test Suite\n\nYou can run the test suite in the interpreter of your choice (in this example, `py37`) by doing:\n\n```bash\ntox -e py37\n```\n\nThis will also run the code through our series of coverage tests, `mypy` rules and other linting\nchecks to enforce a consistent coding style.\n\nFor a list of supported interpreters, check out `envlist` in `tox.ini`.\n\nIf you wanted to run **all** interpreters (might take a while), you can also just run:\n\n```bash\nmake test\n```\n\n### Running a Specific Test\n\nWith `pytest`, you can specify tests you want to run in multiple granularity\nlevels. Here are a couple of examples:\n\n- Running all tests related to `core/baseline.py`\n\n  ```bash\n  pytest tests/core/baseline_test.py\n  ```\n\n- Running a single test class\n\n  ```bash\n  pytest tests/core/baseline_test.py::TestCreate\n  ```\n\n- Running a single test function, inside test class\n\n  ```bash\n  pytest tests/core/baseline_test.py::TestCreate::test_basic_usage\n  ```\n\n- Running a single root level test function\n\n  ```bash\n  pytest tests/plugins/baseline_test.py::test_upgrade_succeeds\n  ```\n\nGenerally speaking, we use test classes to group a series of related test cases together (e.g.\n`TestCreate` tests the `detect_secrets.core.baseline.create` functionality), but root test\nfunctions otherwise. If you're writing tests for your plugins, you should probably just use\nroot test functions.\n\n## 4. Make Your Change\n\nWant to contribute a new plugin? Check out more details here:\n[Writing Your Own Plugin](/docs/plugins.md#Writing%20Your%20Own%20Plugin)\n\nWhat about contributing better false positive filters? Check out more details here:\n[Writing Your Own Filter](/docs/filters.md#Writing%20Your%20Own%20Filter)\n\n## 5. Deploying Changes\n\nCheck out [more detailed upgrade instructions here](/docs/upgrades.md), and how to write\nbackwards-compatible changes using the built-in upgrade infrastructure.\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 1.5625,
          "content": "# Contributors\n\nThanks to all our contributors who has helped this project so far (in alphabetical order):\n\n- [@0atman](https://github.com/0atman)\n- [@adrianbn](https://github.com/adrianbn)\n- [@baboateng](https://github.com/baboateng)\n- [@cbows](https://github.com/cbows)\n- [@cclauss](https://github.com/cclauss)\n- [@cleborys](https://github.com/cleborys)\n- [@DariuszPorowski](https://github.com/DariuszPorowski)\n- [@dgzlopes](https://github.com/dgzlopes)\n- [@EdOverflow](https://github.com/EdOverflow)\n- [@gdemarcsek](https://github.com/gdemarcsek)\n- [@gpflaum](https://github.com/gpflaum)\n- [@guykisel](https://github.com/guykisel)\n- [@hpandeycodeit](https://github.com/hpandeycodeit)\n- [@jkozera](https://github.com/jkozera)\n- [@JoshuaRLi](https://github.com/JoshuaRLi)\n- [@justineyster](https://github.com/justineyster)\n- [@KevinHock](https://github.com/KevinHock)\n- [@killuazhu](https://github.com/killuazhu)\n- [@lirantal](https://github.com/lirantal)\n- [@Namburgesas](https://github.com/Namburgesas)\n- [@neunkasulle](https://github.com/neunkasulle)\n- [@nickiaconis](https://github.com/nickiaconis)\n- [@ninoseki](https://github.com/ninoseki)\n- [@nymous](https://github.com/nymous)\n- [@pablosantiagolopez](https://github.com/pablosantiagolopez)\n- [@Patil2099](https://github.com/Patil2099)\n- [@richo](https://github.com/richo)\n- [@security-architecture](https://github.com/security-architecture)\n- [@whathejoe](https://github.com/whathejoe)\n- [@zioalex](https://github.com/zioalex)\n\nHave an idea that you want to contribute to this project? Check out our\n[CONTRIBUTING](./CONTRIBUTING.md) guide!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.580078125,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that don't pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that don't\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       don't modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2017-2018 Yelp Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0498046875,
          "content": "include detect_secrets/filters/gibberish/rfc.model\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3203125,
          "content": ".PHONY: minimal\nminimal: setup\n\n.PHONY: setup\nsetup:\n\ttox -e venv\n\n.PHONY: install-hooks\ninstall-hooks:\n\ttox -e pre-commit -- install -f --install-hooks\n\n.PHONY: test\ntest:\n\ttox\n\n.PHONY: clean\nclean:\n\tfind -name '*.pyc' -delete\n\tfind -name '__pycache__' -delete\n\n.PHONY: super-clean\nsuper-clean: clean\n\trm -rf .tox\n\trm -rf venv\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.236328125,
          "content": "[![Build Status](https://github.com/Yelp/detect-secrets/actions/workflows/ci.yml/badge.svg)](https://github.com/Yelp/detect-secrets/actions/workflows/ci.yml?query=branch%3Amaster++)\n[![PyPI version](https://badge.fury.io/py/detect-secrets.svg)](https://badge.fury.io/py/detect-secrets)\n[![Homebrew](https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/detect-secrets.json&query=$.versions.stable&label=homebrew)](https://formulae.brew.sh/formula/detect-secrets)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-ff69b4.svg)](https://github.com/Yelp/detect-secrets/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22+)\n[![AMF](https://img.shields.io/badge/Donate-Charity-orange.svg)](https://www.againstmalaria.com/donation.aspx)\n\n# detect-secrets\n\n## About\n\n`detect-secrets` is an aptly named module for (surprise, surprise) **detecting secrets** within a\ncode base.\n\nHowever, unlike other similar packages that solely focus on finding secrets, this package is\ndesigned with the enterprise client in mind: providing a **backwards compatible**, systematic\nmeans of:\n\n1. Preventing new secrets from entering the code base,\n2. Detecting if such preventions are explicitly bypassed, and\n3. Providing a checklist of secrets to roll, and migrate off to a more secure storage.\n\nThis way, you create a\n[separation of concern](https://en.wikipedia.org/wiki/Separation_of_concerns):\naccepting that there may *currently* be secrets hiding in your large repository\n(this is what we refer to as a _baseline_), but preventing this issue from getting any larger,\nwithout dealing with the potentially gargantuan effort of moving existing secrets away.\n\nIt does this by running periodic diff outputs against heuristically crafted regex statements,\nto identify whether any *new* secret has been committed. This way, it avoids the overhead of\ndigging through all git history, as well as the need to scan the entire repository every time.\n\nFor a look at recent changes, please see [CHANGELOG.md](CHANGELOG.md).\n\nIf you are looking to contribute, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n\nFor more detailed documentation, check out our other [documentation](docs/).\n\n## Examples\n\n### Quickstart:\n\nCreate a baseline of potential secrets currently found in your git repository.\n\n```bash\n$ detect-secrets scan > .secrets.baseline\n```\n\nor, to run it from a different directory:\n\n```bash\n$ detect-secrets -C /path/to/directory scan > /path/to/directory/.secrets.baseline\n```\n\n**Scanning non-git tracked files:**\n\n```bash\n$ detect-secrets scan test_data/ --all-files > .secrets.baseline\n```\n\n### Adding New Secrets to Baseline:\n\nThis will rescan your codebase, and:\n\n1. Update/upgrade your baseline to be compatible with the latest version,\n2. Add any new secrets it finds to your baseline,\n3. Remove any secrets no longer in your codebase\n\nThis will also preserve any labelled secrets you have.\n\n```bash\n$ detect-secrets scan --baseline .secrets.baseline\n```\n\nFor baselines older than version 0.9, just recreate it.\n\n### Alerting off newly added secrets:\n\n**Scanning Staged Files Only:**\n\n```bash\n$ git diff --staged --name-only -z | xargs -0 detect-secrets-hook --baseline .secrets.baseline\n```\n\n**Scanning All Tracked Files:**\n\n```bash\n$ git ls-files -z | xargs -0 detect-secrets-hook --baseline .secrets.baseline\n```\n\n### Viewing All Enabled Plugins:\n\n```bash\n$ detect-secrets scan --list-all-plugins\nArtifactoryDetector\nAWSKeyDetector\nAzureStorageKeyDetector\nBasicAuthDetector\nCloudantDetector\nDiscordBotTokenDetector\nGitHubTokenDetector\nGitLabTokenDetector\nBase64HighEntropyString\nHexHighEntropyString\nIbmCloudIamDetector\nIbmCosHmacDetector\nIPPublicDetector\nJwtTokenDetector\nKeywordDetector\nMailchimpDetector\nNpmDetector\nOpenAIDetector\nPrivateKeyDetector\nPypiTokenDetector\nSendGridDetector\nSlackDetector\nSoftlayerDetector\nSquareOAuthDetector\nStripeDetector\nTelegramBotTokenDetector\nTwilioKeyDetector\n```\n\n### Disabling Plugins:\n\n```bash\n$ detect-secrets scan --disable-plugin KeywordDetector --disable-plugin AWSKeyDetector\n```\n\nIf you want to **only** run a specific plugin, you can do:\n\n```bash\n$ detect-secrets scan --list-all-plugins | \\\n    grep -v 'BasicAuthDetector' | \\\n    sed \"s#^#--disable-plugin #g\" | \\\n    xargs detect-secrets scan test_data\n```\n\n### Auditing a Baseline:\n\nThis is an optional step to label the results in your baseline. It can be used to narrow down your\nchecklist of secrets to migrate, or to better configure your plugins to improve its signal-to-noise\nratio.\n\n```bash\n$ detect-secrets audit .secrets.baseline\n```\n\n### Usage in Other Python Scripts\n\n**Basic Use:**\n\n```python\nfrom detect_secrets import SecretsCollection\nfrom detect_secrets.settings import default_settings\n\nsecrets = SecretsCollection()\nwith default_settings():\n    secrets.scan_file('test_data/config.ini')\n\n\nimport json\nprint(json.dumps(secrets.json(), indent=2))\n```\n\n**More Advanced Configuration:**\n\n```python\nfrom detect_secrets import SecretsCollection\nfrom detect_secrets.settings import transient_settings\n\nsecrets = SecretsCollection()\nwith transient_settings({\n    # Only run scans with only these plugins.\n    # This format is the same as the one that is saved in the generated baseline.\n    'plugins_used': [\n        # Example of configuring a built-in plugin\n        {\n            'name': 'Base64HighEntropyString',\n            'limit': 5.0,\n        },\n\n        # Example of using a custom plugin\n        {\n            'name': 'HippoDetector',\n            'path': 'file:///Users/aaronloo/Documents/github/detect-secrets/testing/plugins.py',\n        },\n    ],\n\n    # We can also specify whichever additional filters we want.\n    # This is an example of using the function `is_identified_by_ML_model` within the\n    # local file `./private-filters/example.py`.\n    'filters_used': [\n        {\n            'path': 'file://private-filters/example.py::is_identified_by_ML_model',\n        },\n    ]\n}) as settings:\n    # If we want to make any further adjustments to the created settings object (e.g.\n    # disabling default filters), we can do so as such.\n    settings.disable_filters(\n        'detect_secrets.filters.heuristic.is_prefixed_with_dollar_sign',\n        'detect_secrets.filters.heuristic.is_likely_id_string',\n    )\n\n    secrets.scan_file('test_data/config.ini')\n```\n\n## Installation\n\n```bash\n$ pip install detect-secrets\n✨🍰✨\n```\n\nInstall via [brew](https://brew.sh/):\n\n```bash\n$ brew install detect-secrets\n```\n\n## Usage\n\n`detect-secrets` comes with three different tools, and there is often confusion around which one\nto use. Use this handy checklist to help you decide:\n\n1. Do you want to add secrets to your baseline? If so, use **`detect-secrets scan`**.\n2. Do you want to alert off new secrets not in the baseline? If so, use **`detect-secrets-hook`**.\n3. Are you analyzing the baseline itself? If so, use **`detect-secrets audit`**.\n\n### Adding Secrets to Baseline\n\n```\n$ detect-secrets scan --help\nusage: detect-secrets scan [-h] [--string [STRING]] [--only-allowlisted]\n                           [--all-files] [--baseline FILENAME]\n                           [--force-use-all-plugins] [--slim]\n                           [--list-all-plugins] [-p PLUGIN]\n                           [--base64-limit [BASE64_LIMIT]]\n                           [--hex-limit [HEX_LIMIT]]\n                           [--disable-plugin DISABLE_PLUGIN]\n                           [-n | --only-verified]\n                           [--exclude-lines EXCLUDE_LINES]\n                           [--exclude-files EXCLUDE_FILES]\n                           [--exclude-secrets EXCLUDE_SECRETS]\n                           [--word-list WORD_LIST_FILE] [-f FILTER]\n                           [--disable-filter DISABLE_FILTER]\n                           [path [path ...]]\n\nScans a repository for secrets in code. The generated output is compatible\nwith `detect-secrets-hook --baseline`.\n\npositional arguments:\n  path                  Scans the entire codebase and outputs a snapshot of\n                        currently identified secrets.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --string [STRING]     Scans an individual string, and displays configured\n                        plugins' verdict.\n  --only-allowlisted    Only scans the lines that are flagged with `allowlist\n                        secret`. This helps verify that individual exceptions\n                        are indeed non-secrets.\n\nscan options:\n  --all-files           Scan all files recursively (as compared to only\n                        scanning git tracked files).\n  --baseline FILENAME   If provided, will update existing baseline by\n                        importing settings from it.\n  --force-use-all-plugins\n                        If a baseline is provided, detect-secrets will default\n                        to loading the plugins specified by that baseline.\n                        However, this may also mean it doesn't perform the\n                        scan with the latest plugins. If this flag is\n                        provided, it will always use the latest plugins\n  --slim                Slim baselines are created with the intention of\n                        minimizing differences between commits. However, they\n                        are not compatible with the `audit` functionality, and\n                        slim baselines will need to be remade to be audited.\n\nplugin options:\n  Configure settings for each secret scanning ruleset. By default, all\n  plugins are enabled unless explicitly disabled.\n\n  --list-all-plugins    Lists all plugins that will be used for the scan.\n  -p PLUGIN, --plugin PLUGIN\n                        Specify path to custom secret detector plugin.\n  --base64-limit [BASE64_LIMIT]\n                        Sets the entropy limit for high entropy strings. Value\n                        must be between 0.0 and 8.0, defaults to 4.5.\n  --hex-limit [HEX_LIMIT]\n                        Sets the entropy limit for high entropy strings. Value\n                        must be between 0.0 and 8.0, defaults to 3.0.\n  --disable-plugin DISABLE_PLUGIN\n                        Plugin class names to disable. e.g.\n                        Base64HighEntropyString\n\nfilter options:\n  Configure settings for filtering out secrets after they are flagged by the\n  engine.\n\n  -n, --no-verify       Disables additional verification of secrets via\n                        network call.\n  --only-verified       Only flags secrets that can be verified.\n  --exclude-lines EXCLUDE_LINES\n                        If lines match this regex, it will be ignored.\n  --exclude-files EXCLUDE_FILES\n                        If filenames match this regex, it will be ignored.\n  --exclude-secrets EXCLUDE_SECRETS\n                        If secrets match this regex, it will be ignored.\n  --word-list WORD_LIST_FILE\n                        Text file with a list of words, if a secret contains a\n                        word in the list we ignore it.\n  -f FILTER, --filter FILTER\n                        Specify path to custom filter. May be a python module\n                        path (e.g.\n                        detect_secrets.filters.common.is_invalid_file) or a\n                        local file path (e.g.\n                        file://path/to/file.py::function_name).\n  --disable-filter DISABLE_FILTER\n                        Specify filter to disable. e.g.\n                        detect_secrets.filters.common.is_invalid_file\n```\n\n### Blocking Secrets not in Baseline\n\n```\n$ detect-secrets-hook --help\nusage: detect-secrets-hook [-h] [-v] [--version] [--baseline FILENAME]\n                           [--list-all-plugins] [-p PLUGIN]\n                           [--base64-limit [BASE64_LIMIT]]\n                           [--hex-limit [HEX_LIMIT]]\n                           [--disable-plugin DISABLE_PLUGIN]\n                           [-n | --only-verified]\n                           [--exclude-lines EXCLUDE_LINES]\n                           [--exclude-files EXCLUDE_FILES]\n                           [--exclude-secrets EXCLUDE_SECRETS]\n                           [--word-list WORD_LIST_FILE] [-f FILTER]\n                           [--disable-filter DISABLE_FILTER]\n                           [filenames [filenames ...]]\n\npositional arguments:\n  filenames             Filenames to check.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --verbose         Verbose mode.\n  --version             Display version information.\n  --json                Print detect-secrets-hook output as JSON\n  --baseline FILENAME   Explicitly ignore secrets through a baseline generated\n                        by `detect-secrets scan`\n\nplugin options:\n  Configure settings for each secret scanning ruleset. By default, all\n  plugins are enabled unless explicitly disabled.\n\n  --list-all-plugins    Lists all plugins that will be used for the scan.\n  -p PLUGIN, --plugin PLUGIN\n                        Specify path to custom secret detector plugin.\n  --base64-limit [BASE64_LIMIT]\n                        Sets the entropy limit for high entropy strings. Value\n                        must be between 0.0 and 8.0, defaults to 4.5.\n  --hex-limit [HEX_LIMIT]\n                        Sets the entropy limit for high entropy strings. Value\n                        must be between 0.0 and 8.0, defaults to 3.0.\n  --disable-plugin DISABLE_PLUGIN\n                        Plugin class names to disable. e.g.\n                        Base64HighEntropyString\n\nfilter options:\n  Configure settings for filtering out secrets after they are flagged by the\n  engine.\n\n  -n, --no-verify       Disables additional verification of secrets via\n                        network call.\n  --only-verified       Only flags secrets that can be verified.\n  --exclude-lines EXCLUDE_LINES\n                        If lines match this regex, it will be ignored.\n  --exclude-files EXCLUDE_FILES\n                        If filenames match this regex, it will be ignored.\n  --exclude-secrets EXCLUDE_SECRETS\n                        If secrets match this regex, it will be ignored.\n  -f FILTER, --filter FILTER\n                        Specify path to custom filter. May be a python module\n                        path (e.g.\n                        detect_secrets.filters.common.is_invalid_file) or a\n                        local file path (e.g.\n                        file://path/to/file.py::function_name).\n  --disable-filter DISABLE_FILTER\n                        Specify filter to disable. e.g.\n                        detect_secrets.filters.common.is_invalid_file\n```\n\nWe recommend setting this up as a pre-commit hook. One way to do this is by using the\n[pre-commit](https://github.com/pre-commit/pre-commit) framework:\n\n```yaml\n# .pre-commit-config.yaml\nrepos:\n-   repo: https://github.com/Yelp/detect-secrets\n    rev: v1.5.0\n    hooks:\n    -   id: detect-secrets\n        args: ['--baseline', '.secrets.baseline']\n        exclude: package.lock.json\n```\n\n#### Inline Allowlisting\n\nThere are times when we want to exclude a false positive from blocking a commit, without creating\na baseline to do so. You can do so by adding a comment as such:\n\n```python\nsecret = \"hunter2\"      # pragma: allowlist secret\n```\n\nor\n\n```javascript\n//  pragma: allowlist nextline secret\nconst secret = \"hunter2\";\n```\n\n### Auditing Secrets in Baseline\n\n```bash\n$ detect-secrets audit --help\nusage: detect-secrets audit [-h] [--diff] [--stats]\n                      [--report] [--only-real | --only-false]\n                      [--json]\n                      filename [filename ...]\n\nAuditing a baseline allows analysts to label results, and optimize plugins for\nthe highest signal-to-noise ratio for their environment.\n\npositional arguments:\n  filename      Audit a given baseline file to distinguish the difference\n                between false and true positives.\n\noptional arguments:\n  -h, --help    show this help message and exit\n  --diff        Allows the comparison of two baseline files, in order to\n                effectively distinguish the difference between various plugin\n                configurations.\n  --stats       Displays the results of an interactive auditing session which\n                have been saved to a baseline file.\n  --report      Displays a report with the secrets detected\n\nreporting:\n  Display a summary with all the findings and the made decisions. To be used with the report mode (--report).\n\n  --only-real   Only includes real secrets in the report\n  --only-false  Only includes false positives in the report\n\nanalytics:\n  Quantify the success of your plugins based on the labelled results in your\n  baseline. To be used with the statistics mode (--stats).\n\n  --json        Outputs results in a machine-readable format.\n```\n\n## Configuration\n\nThis tool operates through a system of **plugins** and **filters**.\n\n- **Plugins** find secrets in code\n- **Filters** ignore false positives to increase scanning precision\n\nYou can adjust both to suit your precision/recall needs.\n\n### Plugins\n\nThere are three different strategies we employ to try and find secrets in code:\n\n1. Regex-based Rules\n\n   These are the most common type of plugin, and work well with well-structured secrets.\n   These secrets can optionally be [verified](docs/plugins.md#Verified-Secrets), which increases\n   scanning precision. However, solely depending on these may negatively affect the recall of your\n   scan.\n\n2. Entropy Detector\n\n   This searches for \"secret-looking\" strings through a variety of heuristic approaches. This\n   is great for non-structured secrets, but may require tuning to adjust the scanning precision.\n\n3. Keyword Detector\n\n   This ignores the secret value, and searches for variable names that are often associated with\n   assigning secrets with hard-coded values. This is great for \"non-secret-looking\" strings (e.g.\n   le3tc0de passwords), but may require tuning filters to adjust the scanning precision.\n\nWant to find a secret that we don't currently catch? You can also (easily) develop your own\nplugin, and use it with the engine! For more information, check out the\n[plugin documentation](docs/plugins.md#Using-Your-Own-Plugin).\n\n### Filters\n\n`detect-secrets` comes with several different in-built filters that may suit your needs.\n\n#### --exclude-lines\n\nSometimes, you want to be able to globally allow certain lines in your scan, if they match a\nspecific pattern. You can specify a regex rule as such:\n\n```bash\n$ detect-secrets scan --exclude-lines 'password = (blah|fake)'\n```\n\nOr you can specify multiple regex rules as such:\n\n```bash\n$ detect-secrets scan --exclude-lines 'password = blah' --exclude-lines 'password = fake'\n```\n\n#### --exclude-files\n\nSometimes, you want to be able to ignore certain files in your scan. You can specify a regex\npattern to do so, and if the filename meets this regex pattern, it will not be scanned:\n\n```bash\n$ detect-secrets scan --exclude-files '.*\\.signature$'\n```\n\nOr you can specify multiple regex patterns as such:\n\n```bash\n$ detect-secrets scan --exclude-files '.*\\.signature$' --exclude-files '.*/i18n/.*'\n```\n\n#### --exclude-secrets\n\nSometimes, you want to be able to ignore certain secret values in your scan. You can specify\na regex rule as such:\n\n```bash\n$ detect-secrets scan --exclude-secrets '(fakesecret|\\${.*})'\n```\n\nOr you can specify multiple regex rules as such:\n\n```bash\n$ detect-secrets scan --exclude-secrets 'fakesecret' --exclude-secrets '\\${.*})'\n```\n\n#### Inline Allowlisting\n\nSometimes, you want to apply an exclusion to a specific line, rather than globally excluding it.\nYou can do so with inline allowlisting as such:\n\n```python\nAPI_KEY = 'this-will-ordinarily-be-detected-by-a-plugin'    # pragma: allowlist secret\n```\n\nThese comments are supported in multiple languages. e.g.\n\n```java\nconst GoogleCredentialPassword = \"something-secret-here\";     //  pragma: allowlist secret\n```\n\nYou can also use:\n\n```python\n# pragma: allowlist nextline secret\nAPI_KEY = 'WillAlsoBeIgnored'\n```\n\nThis may be a convenient way for you to ignore secrets, without needing to regenerate the entire\nbaseline again. If you need to explicitly search for these allowlisted secrets, you can also do:\n\n```bash\n$ detect-secrets scan --only-allowlisted\n```\n\nWant to write more custom logic to filter out false positives? Check out how to do this in\nour [filters documentation](docs/filters.md#Using-Your-Own-Filters).\n\n## Extensions\n\n### wordlist\n\nThe `--exclude-secrets` flag allows you to specify regex rules to exclude secret values. However,\nif you want to specify a large list of words instead, you can use the `--word-list` flag.\n\nTo use this feature, be sure to install the `pyahocorasick` package, or simply use:\n\n```bash\n$ pip install detect-secrets[word_list]\n```\n\nThen, you can use it as such:\n\n```bash\n$ cat wordlist.txt\nnot-a-real-secret\n$ cat sample.ini\npassword = not-a-real-secret\n\n# Will show results\n$ detect-secrets scan sample.ini\n\n# No results found\n$ detect-secrets scan --word-list wordlist.txt\n```\n\n### Gibberish Detector\n\nThe Gibberish Detector is a simple ML model, that attempts to determine whether a secret value\nis actually gibberish, with the assumption that **real** secret values are not word-like.\n\nTo use this feature, be sure to install the `gibberish-detector` package, or use:\n\n```bash\n$ pip install detect-secrets[gibberish]\n```\n\nCheck out the [gibberish-detector](https://github.com/domanchi/gibberish-detector) package for\nmore information on how to train the model. A pre-trained model (seeded by processing RFCs) will\nbe included for easy use.\n\nYou can also specify your own model as such:\n\n```bash\n$ detect-secrets scan --gibberish-model custom.model\n```\n\nThis is not a default plugin, given that this will ignore secrets such as `password`.\n\n## Caveats\n\nThis is not meant to be a sure-fire solution to prevent secrets from entering the codebase. Only\nproper developer education can truly do that. This pre-commit hook merely implements several\nheuristics to try and prevent obvious cases of committing secrets.\n\n**Things That Won't Be Prevented:**\n\n- Multi-line secrets\n- Default passwords that don't trigger the `KeywordDetector` (e.g. `login = \"hunter2\"`)\n\n## FAQ\n\n### General\n\n- **\"Did not detect git repository.\" warning encountered, even though I'm in a git repo.**\n\n  Check to see whether your `git` version is >= 1.8.5. If not, please upgrade it then try again.\n  [More details here](https://github.com/Yelp/detect-secrets/issues/220).\n\n### Windows\n\n- **`detect-secrets audit` displays \"Not a valid baseline file!\" after creating baseline.**\n\n  Ensure the file encoding of your baseline file is UTF-8.\n  [More details here](https://github.com/Yelp/detect-secrets/issues/272#issuecomment-619187136).\n"
        },
        {
          "name": "detect_secrets",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.3125,
          "content": "[mypy]\nwarn_return_any = True\nwarn_unused_configs = True\n\n# Functions should be typed\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\ndisallow_untyped_decorators = True\n\nwarn_redundant_casts = True\nwarn_unreachable = True\nwarn_unused_ignores = True\n\nshow_column_numbers = True\nignore_missing_imports = True\n"
        },
        {
          "name": "requirements-dev-minimal.txt",
          "type": "blob",
          "size": 0.140625,
          "content": "coverage\nflake8==7.1.1\ngibberish-detector>=0.1.1\nmonotonic\nmypy\npre-commit\npyahocorasick\npytest\npyyaml\nresponses\ntox-pip-extensions\ntox\nunidiff\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.728515625,
          "content": "attrs==23.2.0\nbackports.entry-points-selectable==1.3.0\ncertifi==2024.7.4\ncfgv==3.4.0\ncharset-normalizer==3.3.2\ncoverage==7.5.3\ndistlib==0.3.8\nfilelock==3.16.1\nflake8==7.1.1\ngibberish-detector==0.1.1\nidentify==2.5.36\nidna==3.7\niniconfig==2.0.0\nmccabe==0.7.0\nmonotonic==1.6\nmypy==0.971\nmypy-extensions==1.0.0\nnodeenv==1.9.1\npackaging==24.1\nplatformdirs==4.3.6\npluggy==1.5.0\npre-commit==4.0.1\npy==1.11.0\npyahocorasick==2.1.0\npycodestyle==2.12.1\npyflakes==3.2.0\npyparsing==3.1.2\npytest==7.4.3\nPyYAML==6.0.1\nrequests==2.32.3\nresponses==0.25.3\nsix==1.16.0\ntoml==0.10.2\ntox==4.23.2\ntox-pip-extensions==1.6.0\ntypes-PyYAML==6.0.12.12\ntypes-requests==2.31.0.20240106\ntyping-extensions==4.12.2\nunidiff==0.7.5\nurllib3==2.2.2\nvirtualenv==20.26.6\nzipp==3.19.2\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.4267578125,
          "content": "[bumpversion]\ncurrent_version = 1.5.0\ncommit = True\ntag = True\n\n[metadata]\ndescription_file = README.md\n\n[bumpversion:file:detect_secrets/__version__.py]\nsearch = VERSION = '{current_version}'\nreplace = VERSION = '{new_version}'\n\n[bumpversion:file:.secrets.baseline]\nsearch = \"version\": \"{current_version}\"\nreplace = \"version\": \"{new_version}\"\n\n[bumpversion:file:README.md]\nsearch = rev: v{current_version}\nreplace = rev: v{new_version}\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.8466796875,
          "content": "from pathlib import Path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\n\ndef get_version():\n    \"\"\"Parse package __version__.py to get version.\"\"\"\n    versionpy = (Path('detect_secrets') / '__version__.py').read_text()\n    return versionpy.split(\"'\")[1]\n\n\nVERSION = get_version()\n\n\nwith open('README.md', encoding='utf-8') as f:\n    long_description = f.read()\n\n\nsetup(\n    name='detect_secrets',\n    packages=find_packages(exclude=(['test*', 'tmp*'])),\n    version=VERSION,\n    description='Tool for detecting secrets in the codebase',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author='Yelp, Inc.',\n    author_email='opensource@yelp.com',\n    url='https://github.com/Yelp/detect-secrets',\n    download_url='https://github.com/Yelp/detect-secrets/archive/{}.tar.gz'.format(VERSION),\n    keywords=['secret-management', 'pre-commit', 'security', 'entropy-checks'],\n    install_requires=[\n        'pyyaml',\n        'requests',\n    ],\n    include_package_data=True,\n    package_data={\n        'detect_secrets': [\n            'py.typed',\n        ],\n    },\n    extras_require={\n        'word_list': [\n            'pyahocorasick',\n        ],\n        'gibberish': [\n            'gibberish-detector',\n        ],\n    },\n    entry_points={\n        'console_scripts': [\n            'detect-secrets = detect_secrets.main:main',\n            'detect-secrets-hook = detect_secrets.pre_commit_hook:main',\n        ],\n    },\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: Apache Software License',\n        'Intended Audience :: Developers',\n        'Topic :: Software Development',\n        'Topic :: Utilities',\n        'Environment :: Console',\n        'Operating System :: OS Independent',\n        'Development Status :: 5 - Production/Stable',\n        'Typing :: Typed',\n    ],\n)\n"
        },
        {
          "name": "test_data",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.1396484375,
          "content": "[tox]\nproject = detect_secrets\n# These should match the ci python env list\nenvlist = py{39,310,311,312,313},mypy\nskip_missing_interpreters = true\n\n[testenv]\npassenv = SSH_AUTH_SOCK\n# NO_PROXY is needed to call requests API within a forked process\n# when using macOS and python version 3.7\nsetenv =\n    NO_PROXY = '*'\ndeps = -rrequirements-dev.txt\nwhitelist_externals = coverage\ncommands =\n    coverage erase\n    coverage run -m pytest --strict {posargs:tests}\n\n    # I don't want to write `pragma: no cover` for `for` loops that don't have\n    # a case that doesn't enter the `for` loop. -_-\"\n    coverage report --show-missing --include=tests/* --fail-under 99\n    coverage report --show-missing --include=testing/* --fail-under 100\n    coverage report --show-missing --skip-covered --include=detect_secrets/* --fail-under 95\n    pre-commit run --all-files\n\n[testenv:mypy]\npassenv = SSH_AUTH_SOCK\ndeps = -rrequirements-dev.txt\ncommands =\n    mypy detect_secrets\n    mypy testing\n\n[testenv:venv]\nenvdir = venv\ncommands =\n    pre-commit install -f --install-hooks\n\n[testenv:pre-commit]\ndeps = pre-commit >= 1.16.1\ncommands = pre-commit {posargs}\n\n[pep8]\nignore = E501\n"
        }
      ]
    }
  ]
}