{
  "metadata": {
    "timestamp": 1736559567444,
    "page": 183,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "geopy/geopy",
      "stars": 4543,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.3525390625,
          "content": "[run]\nsource =\n    geopy\n    test\n\n[report]\nshow_missing = True\n; Remember that tests run from forks and locally don't have access to\n; geocoders' credentials, that means that a significant amount of the code\n; (which requires these creds) cannot be tested. So coverage in CI differs\n; significantly between the builds for forks and for master.\nfail_under = 50\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.353515625,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.py]\nindent_size = 4\n# Docstrings and comments should have max_line_length = 80.\nmax_line_length = 90\n\n[*.{md,rst}]\ntrim_trailing_whitespace = false\nmax_line_length = 80\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.13671875,
          "content": "*.pyc\n.coverage\n.venv*\nvenv\nbuild\ndist\n*.egg\n*.egg-info\ndocs/_build\n.test_keys\n.tox\n*.config\n.DS_Store\n.idea/\n.python-version\n.pytest_cache\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2080078125,
          "content": "version: 2\n\nsphinx:\n  configuration: docs/conf.py\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3\"\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - dev-docs\n\nformats: all\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 4.8115234375,
          "content": "Adam Tygart <mozes@ksu.edu>\nAdrián López <alopez@smartvel.com>\nAfonso Queiros <afonso.queiros@deliveryhero.com>\nAlbina <aalmukhametova@gmail.com>\nAlessandro Pasotti <apasotti@gmail.com>\nÁlvaro Mondéjar <mondejar1994@gmail.com>\nAndrea Tosatto <andrea.tosy@gmail.com>\nAnn Paul <ann@coffeemeetsbagel.com>\nAntonis Kanouras <antonis@metadosis.eu>\nArmin Leuprecht <mir@mur.at>\nArsen Mamikonyan <arsen@locu.com>\nArsen Mamikonyan <arsen@mamikonyan.am>\nArthur Pemberton <pembo13@gmail.com>\nArtur <atnartur@users.noreply.github.com>\navdd <Adrian Dries avdd@modernnoise.com>\nAzimjon Pulatov <35038240+azimjohn@users.noreply.github.com>\nBenjamin Henne <henne@dcsec.uni-hannover.de>\nBenjamin Trigona-Harany <bosth@alumni.sfu.ca>\nBenjamin Trigona-Harany <bosth@boundlessgeo.com>\nBenoit Grégoire <benoitg@coeus.ca>\nBernd Schlapsi <brot@users.noreply.github.com>\nBrian Beck\nCharles Karney <charles@karney.com>\nchilfing <chilfing@hsr.ch>\ncrccheck <c@crccheck.com>\nDale <dale@puredistortion.com>\nDaniel Thul <daniel.thul@gmail.com>\nDanny Finkelstein <danfinkelstein@cfl.rr.com>\nDave Arter <dave@minus-zero.org>\nDavid Gilman <davidgilman1@gmail.com>\nDavid Hotham <david.hotham@microsoft.com>\nDavid Mueller <quanterium@users.noreply.github.com>\ndeeplook <gherman@darwin.in-berlin.de>\nDemeter Sztanko <Demeter Sztanko>\nDennis Stritzke <dennis@stritzke.me>\nDmitrii K <winston.smith.spb@gmail.com>\nDody Suria Wijaya <dodysw@gmail.com>\ndutko.adam\nEdward Betts <edward@4angle.com>\nElliot Ford <elliot.ford@astrazeneca.com>\nEmile Aben <emileaben@gmail.com>\nenrique a <13837490+enriqueav@users.noreply.github.com>\nEric Palakovich Carr <carreric@gmail.com>\nexogen\nFabien Reboia <srounet@gmail.com>\nFeanil Patel <feanil@gmail.com>\ngalela <gsimon@webgeoservices.com>\ngary.bernhardt\nGeokeo <88278634+Geokeo@users.noreply.github.com>\nGregory Nicholas <nicholas.g.gregory@gmail.com>\ngroovecoder <luke.crouch@gmail.com>\nHannes <kannes@users.noreply.github.com>\nHanno Schlichting <hanno@hannosch.eu>\nHolger Bruch <holger.bruch@systect.de>\nIan Edwards <isedwards@users.noreply.github.com>\nIan Wilson <ian.owings@gmail.com>\nijl <uijllji@gmail.com>\nironfroggy <ironfroggy@gmail.com>\nIsaac Sijaranamual <isaacsijaranamual@gmail.com>\nJames Maddox <jhmaddox@gmail.com>\nJames Mills <j.mills@griffith.edu.au>\njhmaddox <jhmaddox@gmail.com>\nJoel Natividad <jnatividad@opengov.com>\nJohn.L.Clark\nJon Duckworth <duckontheweb@gmail.com>\nJonathan Batchelor <jmb@thebatchelors.net>\nJordan Bouvier <jbouvier@gmail.com>\nJose Martin <j.martin.bejarano@gmail.com>\njqnatividad <joel.natividad@ontodia.com>\nJulian Simioni <orangejulius@users.noreply.github.com>\nKarimov Dmitriy <karimov_dm@tgt72.ru>\nKostya Esmukov <kostya@esmukov.net>\nLuca Marra <ldm.marra@gmail.com>\nLuke Hubbard <luke@codegent.com>\nMagnus Hiie <magnus.hiie@gmail.com>\nMarc-Olivier Titeux <marcoliviertiteux@gmail.com>\nMarco Milanesi <kpanic@gmail.com>\nMariana Georgieva <mariana.georgieva@valkfleet.com>\nMartin <spatialbits@posteo.net>\nMateusz Konieczny <matkoniecz@gmail.com>\nMesut Öncel <mesutoncel91@gmail.com>\nMicah Cochran <micahcochran@users.noreply.github.com>\nmichal\nMichal Migurski <mike@teczno.com>\nMike Hansen <mhansen@gmail.com>\nMike Taves <mwtoews@gmail.com>\nMike Tigas <mike@tig.as>\nMike Toews <mwtoews@gmail.com>\nMiltos <miltos@allamanis.com>\nmtmail <mtmail@gmx.net>\nmz <mattgeoc@autistici.org>\nnavidata <kontakt@navidata.pl>\nnickpcrogers <nickpcrogers@gmail.com>\nnucflash <tsagias@gmail.com>\nOleg <izhyk.oleh@gmail.com>\nOskar Hollmann <oskarhollmann@gmail.com>\nPavel <pppessoas@gmail.com>\nPaweł Mandera <pawel.mandera@ugent.be>\nPedro Rodrigues <medecau@gmail.com>\nPeter Gullekson <peter11235@gmail.com>\nPhilip Kahn <tigerhawkvok@gmail.com>\nPhilip Kimmey <philip.kimmey@gmail.com>\nPratheek Rebala <pratheekrebala@gmail.com>\nPrzemek Malolepszy <39582596+szogoon@users.noreply.github.com>\nRisent Zhang <shengqi542@gmail.com>\nRocky Meza <rocky@fusionbox.com>\nRyan Nagle <rnagle@tribune.com>\nSaïd Tezel <saidtezel@gmail.com>\nSarah Hoffmann <lonvia@denofr.de>\nscottessner <scott.essner@gmail.com>\nSebastian Illing <sebastian@alpaca.casa>\nSebastian Neubauer <sebineubauer@gmail.com>\nSébastien Barré <sheub@users.noreply.github.com>\nSemiNormal <bbengels@gmail.com>\nSergey Lyapustin <s.lyapustin@gmail.com>\nSergio Martín Morillas <smartinmorillas@gmail.com>\nSerphentas <Serphentas@users.noreply.github.com>\nsvalee <triksrimer@gmail.com>\nSvetlana Konovalova <vetkansk@users.noreply.github.com>\nTaras Dubrava <metro-taras@ukr.net>\nTheRealZeljko <bekciczeljko@gmail.com>\nThomas <thomas_gratier@yahoo.fr>\nTim Gates <tim.gates@iress.com>\nTom Wallroth <tomwallroth@gmail.com>\ntony <jinzc1@lenovo.com>\ntristan <tristanhomsi@gmail.com>\nVladimir Kalinkin <vova.kalinkin@gmail.com>\nWilliam Hammond <william.t.hammond@gmail.com>\nwillr <willr@plotwatt.com>\nYorick Holkamp <github@nextpulse.nl>\nyrafalin <31785347+yrafalin@users.noreply.github.com>\nzhongjun-ma <58385923+zhongjun-ma@users.noreply.github.com>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.9541015625,
          "content": "# Contributing to geopy\n\n## Reporting issues\n\nIf you caught an exception from geopy please try to Google the error first.\nThere is a great chance that it has already been discussed somewhere\nand solutions have been provided (usually on GitHub or on Stack Overflow).\n\nBefore reporting an issue please ensure that you have tried\nto get the answer from the doc: https://geopy.readthedocs.io/.\n\nKeep in mind that if a specific geocoding service's API is not behaving\ncorrectly then it probably won't be helpful to report that issue\nhere, see https://geopy.readthedocs.io/en/latest/#geopy-is-not-a-service\n\nThe following resources are available for your input:\n\n1. Stack Overflow with [geopy tag](https://stackoverflow.com/questions/tagged/geopy).\n   There's a somewhat active community here so you will probably get\n   a solution quicker. And also there is a large amount of already\n   resolved questions which can help too! Just remember to put the `geopy`\n   tag if you'd decide to open a question.\n1. [GitHub Discussions](https://github.com/geopy/geopy/discussions) is\n   a good place to start if Stack Overflow didn't help or you have\n   some idea or a feature request you'd like to bring up, or if you\n   just have trouble and not sure you're doing everything right.\n   Solutions and helpful snippets/patterns are also very welcome here.\n1. [GitHub Issues](https://github.com/geopy/geopy/issues) should only\n   be used for definite bug reports and specific tasks. If you're not sure\n   whether your issue fits this then please start with Discussions\n   first.\n\n\n## Submitting patches\n\nIf you contribute code to geopy, you agree to license your code under the MIT.\n\nThe new code should follow [PEP8](https://pep8.org/) coding style (except\nthe line length limit, which is 90) and adhere to the style of \nthe surrounding code.\n\nYou must document any functionality using Sphinx-compatible RST, and\nimplement tests for any functionality in the `test` directory.\n\nIn your Pull Requests there's no need to fill the changelog or AUTHORS,\nthis is a maintainer's responsibility.\n\nFor your convenience the contributing-friendly issues are marked with\n`help wanted` label, and the beginner-friendly ones with\n`good first issue`.\n\nIf your PR remains unreviewed for a while, feel free to bug the maintainer.\n\n\n### Setup\n\n1.  Create a virtualenv\n2.  Install `geopy` in editable mode along with dev dependencies:\n\n        pip install -e \".[dev]\"\n\n3.  Ensure that tests pass\n\n        make test\n\n\n### Running tests\n\nTo quickly run the test suite without Internet access:\n\n    make test-local\n\nTo run the full test suite (makes queries to the geocoding services):\n\n    make test\n\nOr simply:\n\n    pytest\n\nTo run a specific test module, pass a path as an argument to pytest.\nFor example:\n\n    pytest test/geocoders/nominatim.py\n\nBefore pushing your code, make sure that linting passes, otherwise a CI\nbuild would fail:\n\n    make lint\n\n\n### Geocoder credentials\n\nSome geocoders require credentials (like API keys) for testing. They must\nremain secret, so if you need to test a code which requires them, you should\nobtain your own valid credentials.\n\nTests in CI from forks and PRs run in `test-local` mode only, i.e. no network\nrequests are performed. Full test suite with network requests is run only\nfor pushes to branches by maintainers. This\nhelps to reduce load on the geocoding services and save some quotas associated\nwith the credentials used by geopy. It means that PR builds won't actually test\nnetwork requests. Code changing a geocoder should be tested locally.\nBut it's acceptable to not test such code if obtaining the required credentials \nseems problematic: just leave a note\nso the maintainers would be aware that the code hasn't been tested.\n\nYou may wonder: why not commit captured data and run mocked tests?\nBecause there are copyright constraints on the data returned by services.\nAnother reason is that this data goes obsolete quite fast, and maintaining\nit is cumbersome.\n\nTo ease local testing the credentials can be stored in a json format\nin a file called `.test_keys` located at the root of the project\ninstead of env variables.\n\nExample contents of `.test_keys`:\n\n    {\n        \"BING_KEY\": \"...secret key...\",\n        \"OPENCAGE_KEY\": \"...secret key...\"\n    }\n\n\n### Building docs\n\n    make docs\n\nOpen `docs/_build/html/index.html` with a browser to see the docs. On macOS you \ncan use the following command for that:\n\n    open docs/_build/html/index.html\n\n\n### Adding a new geocoder\n\nPatches for adding new geocoding services are very welcome! It doesn't matter\nhow popular the target service is or whether its territorial coverage is\nglobal or local.\n\nA checklist for adding a new geocoder:\n\n1.  Create a new geocoding class in its own Python module in the\n    `geopy/geocoders` package. Please look around to make sure that you're\n    not reimplementing something that's already there! For example, if you're\n    adding a Nominatim-based service, then your new geocoder class should\n    probably extend the `geopy.geocoders.Nominatim` class.\n\n2.  Follow the instructions in the `geopy/geocoders/__init__.py` module for\n    adding the required imports.\n\n3.  Create a test module in the `test/geocoders` directory. If your geocoder\n    class requires credentials, make sure to access them via\n    the `test.geocoders.util.env` object\n    (see `test/geocoders/what3words.py` for example).\n    Refer to the [Geocoder credentials](#geocoder-credentials) section\n    above for info on how to work with credentials locally.\n\n4.  Complete your implementation and tests! Give TDD a try if you aren't used\n    to it yet! 🎉 Please note that it's possible to run a single test module\n    instead of running the full suite, which is much slower. Refer to the\n    [Running tests](#running-tests) section above for a command example.\n\n5.  Make sure to document the `geocode` and `reverse` methods with all their\n    parameters. The class doc should contain a URI to the Terms of Service.\n\n6.  Add a reference to that class in the `docs/index.rst` file. Please keep\n    them ordered alphabetically by their module file names. Build the docs\n    ([Building docs](#building-docs) section above) to make sure that you've\n    done them right!\n\n7.  If your tests use credentials, add their names to\n    the end of the `.github/workflows/ci.yml` file.\n\nThat's all!\n\n### Improving a geocoder\n\nIf you want to add additional parameters to a `geocode` or `reverse`\nmethod, the additional parameters must be explicitly specified and documented\nin the method signature. Validation may be done for type, but values should\nprobably not be checked against an enumerated list because the service could\nchange. The additional parameters should go to the end of the method signature.\n\nPlease avoid simply passing through arbitrary parameters\n(e.g. with `**kwargs`) to the params of a request to the target service.\nThe target service parameters might change, as well as the service's API,\nbut the geocoder class's public API should stay the same. It's almost\nimpossible to achieve that when a pass-through of arbitrary parameters is\nallowed.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright (c) 2006-2018 geopy authors (see AUTHORS)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1669921875,
          "content": "recursive-include test *\nglobal-exclude *.py[co]\nglobal-exclude .DS_Store\nglobal-exclude __pycache__\ninclude AUTHORS\ninclude LICENSE\ninclude README.rst\ninclude pytest.ini\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.537109375,
          "content": "version := $(shell python -c 'from geopy import __version__; print(__version__)')\n\n.PHONY: venv\nvenv:\n\t[ -d .venv ] || python3 -m venv .venv\n\t# Activate: `. .venv/bin/activate`\n\n.PHONY: develop\ndevelop:\n\tpip install wheel\n\tpip install -e '.[dev]'\n\n.PHONY: lint lint-flake8 lint-isort\nlint-flake8:\n\tflake8 geopy test *.py\nlint-isort:\n\tisort --check-only geopy test *.py\nlint: lint-flake8 lint-isort\n\n.PHONY: format\nformat:\n\tisort geopy test *.py\n\n.PHONY: test-local\ntest-local:\n\t@# Run tests without Internet. These are fast and help to avoid\n\t@# spending geocoders quota for test runs which would fail anyway.\n\tpython -m pytest --skip-tests-requiring-internet\n\n.PHONY: test\ntest: test-local\n\t# Run tests with Internet:\n\tcoverage run -m pytest\n\tcoverage report\n\n.PHONY: readme_check\nreadme_check:\n\t./setup.py check --restructuredtext --strict\n\n.PHONY: rst_check\nrst_check:\n\tmake readme_check\n\t# Doesn't generate any output but prints out errors and warnings.\n\tmake -C docs dummy\n\n.PHONY: clean\nclean:\n\tfind . -name \"*.pyc\" -print0 | xargs -0 rm -f\n\trm -Rf dist\n\trm -Rf *.egg-info\n\n.PHONY: docs\ndocs:\n\tcd docs && make html\n\n.PHONY: authors\nauthors:\n\tgit log --format='%aN <%aE>' `git describe --abbrev=0 --tags`..@ | sort | uniq >> AUTHORS\n\tcat AUTHORS | sort --ignore-case | uniq >> AUTHORS_\n\tmv AUTHORS_ AUTHORS\n\n.PHONY: dist\ndist:\n\tmake clean\n\t./setup.py sdist --format=gztar bdist_wheel\n\n.PHONY: pypi-release\npypi-release:\n\ttwine --version\n\ttwine upload -s dist/*\n\n.PHONY: release\nrelease:\n\tmake dist\n\tgit tag -s $(version)\n\tgit push origin $(version)\n\tmake pypi-release\n\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.953125,
          "content": "geopy\n=====\n\n.. image:: https://img.shields.io/pypi/v/geopy.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/geopy/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/github/actions/workflow/status/geopy/geopy/ci.yml?branch=master&style=flat-square\n    :target: https://github.com/geopy/geopy/actions/workflows/ci.yml?query=branch%3Amaster\n    :alt: Build Status\n\n.. image:: https://img.shields.io/github/license/geopy/geopy.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/geopy/\n    :alt: License\n\n\ngeopy is a Python client for several popular geocoding web\nservices.\n\ngeopy makes it easy for Python developers to locate the coordinates of\naddresses, cities, countries, and landmarks across the globe using\nthird-party geocoders and other data sources.\n\ngeopy includes geocoder classes for the `OpenStreetMap Nominatim`_,\n`Google Geocoding API (V3)`_, and many other geocoding services.\nThe full list is available on the `Geocoders doc section`_.\nGeocoder classes are located in `geopy.geocoders`_.\n\n.. _OpenStreetMap Nominatim: https://nominatim.org\n.. _Google Geocoding API (V3): https://developers.google.com/maps/documentation/geocoding/\n.. _Geocoders doc section: https://geopy.readthedocs.io/en/latest/#geocoders\n.. _geopy.geocoders: https://github.com/geopy/geopy/tree/master/geopy/geocoders\n\ngeopy is tested against CPython (versions 3.7, 3.8, 3.9, 3.10, 3.11, 3.12)\nand PyPy3. geopy 1.x line also supported CPython 2.7, 3.4 and PyPy2.\n\n© geopy contributors 2006-2018 (see AUTHORS) under the `MIT\nLicense <https://github.com/geopy/geopy/blob/master/LICENSE>`__.\n\nInstallation\n------------\n\nInstall using `pip <http://www.pip-installer.org/en/latest/>`__ with:\n\n::\n\n    pip install geopy\n\nOr, `download a wheel or source archive from\nPyPI <https://pypi.python.org/pypi/geopy>`__.\n\nGeocoding\n---------\n\nTo geolocate a query to an address and coordinates:\n\n.. code:: pycon\n\n    >>> from geopy.geocoders import Nominatim\n    >>> geolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\n    >>> location = geolocator.geocode(\"175 5th Avenue NYC\")\n    >>> print(location.address)\n    Flatiron Building, 175, 5th Avenue, Flatiron, New York, NYC, New York, ...\n    >>> print((location.latitude, location.longitude))\n    (40.7410861, -73.9896297241625)\n    >>> print(location.raw)\n    {'place_id': '9167009604', 'type': 'attraction', ...}\n\nTo find the address corresponding to a set of coordinates:\n\n.. code:: pycon\n\n    >>> from geopy.geocoders import Nominatim\n    >>> geolocator = Nominatim(user_agent=\"specify_your_app_name_here\")\n    >>> location = geolocator.reverse(\"52.509669, 13.376294\")\n    >>> print(location.address)\n    Potsdamer Platz, Mitte, Berlin, 10117, Deutschland, European Union\n    >>> print((location.latitude, location.longitude))\n    (52.5094982, 13.3765983)\n    >>> print(location.raw)\n    {'place_id': '654513', 'osm_type': 'node', ...}\n\nMeasuring Distance\n------------------\n\nGeopy can calculate geodesic distance between two points using the\n`geodesic distance\n<https://en.wikipedia.org/wiki/Geodesics_on_an_ellipsoid>`_ or the\n`great-circle distance\n<https://en.wikipedia.org/wiki/Great-circle_distance>`_,\nwith a default of the geodesic distance available as the function\n`geopy.distance.distance`.\n\nHere's an example usage of the geodesic distance, taking pair\nof :code:`(lat, lon)` tuples:\n\n.. code:: pycon\n\n    >>> from geopy.distance import geodesic\n    >>> newport_ri = (41.49008, -71.312796)\n    >>> cleveland_oh = (41.499498, -81.695391)\n    >>> print(geodesic(newport_ri, cleveland_oh).miles)\n    538.390445368\n\nUsing great-circle distance, also taking pair of :code:`(lat, lon)` tuples:\n\n.. code:: pycon\n\n    >>> from geopy.distance import great_circle\n    >>> newport_ri = (41.49008, -71.312796)\n    >>> cleveland_oh = (41.499498, -81.695391)\n    >>> print(great_circle(newport_ri, cleveland_oh).miles)\n    536.997990696\n\nDocumentation\n-------------\n\nMore documentation and examples can be found at\n`Read the Docs <http://geopy.readthedocs.io/en/latest/>`__.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 1.158203125,
          "content": "# Release process\n\n## Prepare\n\n1. Ensure that all issues in the target milestone are\n   closed: https://github.com/geopy/geopy/milestones\n1. Add missing `.. versionadded`/`.. versionchanged` directives\n   where appropriate.\n1. `make authors`, review the changes, `git commit -m \"Pull up AUTHORS\"`\n1. Write changelog in docs.\n1. Push the changes, ensure that the CI build is green and all tests pass.\n\n## Release\n\n1. Change version in `geopy/util.py`, commit and push.\n1. `make release`. When prompted add the same changelog to the git tag,\n   but in markdown instead of rst.\n1. Create a new release for the pushed tag at https://github.com/geopy/geopy/releases\n1. Upload a GPG signature of the tarball to the just created GitHub release,\n   see https://wiki.debian.org/Creating%20signed%20GitHub%20releases\n1. Close the milestone, add a new one.\n\n## Check\n\n1. Ensure that the uploaded version works in a clean environment\n   (e.g. `docker run -it --rm python:3.7 bash`)\n   and execute the examples in README.\n1. Ensure that RTD builds have passed and the `stable` version has updated:\n   https://readthedocs.org/projects/geopy/builds/\n1. Ensure that the CI build for the tag is green.\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "geopy",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.3271484375,
          "content": "[pytest]\npython_files =\n    test/test_*.py\n    test/adapters/*.py\n    test/extra/*.py\n    test/geocoders/*.py\n\n; Bodies of HTTP errors are logged with INFO level\nlog_level = INFO\n\n; Show warnings. Similar to `python -Wd`.\nfilterwarnings = d\n\n; Show skip reasons\n; Print shorter tracebacks\naddopts = -ra --tb=short\n\nasyncio_mode = auto\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.38671875,
          "content": "[flake8]\nmax-complexity = 24\nmax-line-length = 90\n\n[isort]\nknown_first_party = test\nmulti_line_output = 3\nprofile = black\n\n[metadata]\nclassifier =\n    Development Status :: 5 - Production/Stable\n    Intended Audience :: Developers\n    Intended Audience :: Science/Research\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n    Programming Language :: Python\n    Topic :: Scientific/Engineering :: GIS\n    Topic :: Software Development :: Libraries :: Python Modules\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: Implementation :: CPython\n    Programming Language :: Python :: Implementation :: PyPy\ndescription = Python Geocoding Toolbox\nkeywords = geocode, geocoding, gis, geographical, maps, earth, distance\nlicense = MIT\nlong_description = file: README.rst\nmaintainer = Kostya Esmukov\nmaintainer_email = kostya@esmukov.net\nname = geopy\nurl = https://github.com/geopy/geopy\nversion = attr: geopy.__version__\n\n[options]\ninstall_requires =\n    geographiclib<3,>=1.52\npackages = find:\npython_requires = >=3.7\n\n[options.packages.find]\nexclude =\n    test*\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.2744140625,
          "content": "#!/usr/bin/env python\n\nfrom setuptools import setup\n\nfrom geopy import __version__ as version\n\nEXTRAS_DEV_LINT = [\n    \"flake8>=5.0,<5.1\",\n    \"isort>=5.10.0,<5.11.0\",\n]\n\nEXTRAS_DEV_TEST = [\n    \"coverage\",\n    \"pytest-asyncio>=0.17\",\n    \"pytest>=3.10\",\n    \"sphinx<=4.3.2\",  # `docutils` from sphinx is used in tests\n]\n\nEXTRAS_DEV_DOCS = [\n    \"readme_renderer\",\n    \"sphinx<=4.3.2\",\n    \"sphinx-issues\",\n    \"sphinx_rtd_theme>=0.5.0\",\n]\n\nsetup(\n    download_url=(\n        'https://github.com/geopy/geopy/archive/%s.tar.gz' % version\n    ),\n    extras_require={\n        \"dev\": sorted(set(\n            EXTRAS_DEV_LINT +\n            EXTRAS_DEV_TEST +\n            EXTRAS_DEV_DOCS\n        )),\n        \"dev-lint\": EXTRAS_DEV_LINT,\n        \"dev-test\": EXTRAS_DEV_TEST,\n        \"dev-docs\": EXTRAS_DEV_DOCS,\n        \"aiohttp\": [\"aiohttp\"],\n        \"requests\": [\n            \"urllib3>=1.24.2\",\n            # ^^^ earlier versions would work, but a custom ssl\n            # context would silently have system certificates be loaded as\n            # trusted: https://github.com/urllib3/urllib3/pull/1566\n\n            \"requests>=2.16.2\",\n            # ^^^ earlier versions would work, but they use an older\n            # vendored version of urllib3 (see note above)\n        ],\n        \"timezone\": [\"pytz\"],\n    },\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.8740234375,
          "content": "[tox]\nenvlist=\n    py37{-async,-noextras},\n    py{38,39,310,311,312,313,py3},\n    lint,\n    rst,\n\n[testenv]\nextras =\n    dev-test\n    aiohttp\n    requests\n    timezone\npassenv = *\nallowlist_externals = make\ncommands = make {env:GEOPY_TOX_TARGET:test}\n\n[testenv:py37-async]\n# Run a single job with asyncio adapter:\n# (not the whole matrix, to avoid spending extra quota)\nsetenv = GEOPY_TEST_ADAPTER=geopy.adapters.AioHTTPAdapter\n\n[testenv:py37-noextras]\n# Ensure `pip install geopy` without any non-test extras doesn't break.\nextras =\n    dev-test\n\n[gh-actions]\npython =\n    3.7: py37\n    3.8: py38\n    3.9: py39\n    3.10: py310\n    3.11: py311\n    3.12: py312\n    3.13: py313\n    pypy3: pypy3\n    pypy-3.7: pypy3\n\n[testenv:lint]\nbasepython = python3\nextras =\n    dev-lint\nusedevelop = True\ncommands = make lint\n\n[testenv:rst]\nbasepython = python3\nextras =\n    dev-docs\ncommands = make rst_check\n"
        }
      ]
    }
  ]
}