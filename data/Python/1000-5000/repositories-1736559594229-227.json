{
  "metadata": {
    "timestamp": 1736559594229,
    "page": 227,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "python/typeshed",
      "stars": 4452,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2490234375,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nend_of_line = lf\nindent_size = 2\n\n[*.md]\nmax_line_length = 79\ntrim_trailing_whitespace = false\n\n[*.{py,pyi,toml,json}]\nmax_line_length = 130\nindent_size = 4\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.6484375,
          "content": "[flake8]\n# NQA: Ruff won't warn about redundant `# noqa: Y`\n# Y: Flake8 is only used to run flake8-pyi, everything else is in Ruff\n# F821: Typeshed is a testing ground for flake8-pyi, which monkeypatches F821\nselect = NQA, Y, F821\n# Ignore rules normally excluded by default\nextend-ignore = Y090\nper-file-ignores =\n  # We should only need to noqa Y and F821 codes in .pyi files\n  *.py: NQA\n  # Generated protobuf files:\n  # Y021: Include docstrings\n  # Y023: Alias typing as typing_extensions\n  # Y026: Have implicit type aliases\n  # Y053: have literals >50 characters long\n  stubs/*_pb2.pyi: Y021, Y023, Y026, Y053\n\nexclude = .venv*,.git\nnoqa_require_code = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.330078125,
          "content": "# Normalize EOF\n* autocrlf=false\n* eol=lf\n# Set linguist-language to support comments syntax highlight\n**/stubtest_allowlist*.txt linguist-language=ini\n**/stubtest_allowlists/*.txt linguist-language=ini\ntests/pytype_exclude_list.txt linguist-language=ini\npyrightconfig*.json linguist-language=jsonc\n.vscode/*.json linguist-language=jsonc\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.9892578125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\n/env/\n/lib/build/\n/develop-eggs/\n/dist/\n/downloads/\n/eggs/\n/lib64/\n/parts/\n/sdist/\n/var/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\nstubtest-output*\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Local utility scripts\nanalyze.py\n\n# Editor backup files\n*~\n.*.sw?\n.vscode/*\n!.vscode/settings.default.json\n!.vscode/extensions.json\n.idea/\n.venv*/\n\n# Mypy cache\n.mypy_cache/\n\n# pyenv local python version\n.python-version\n\n# deliberately local test configuration files\nstdlib/@tests/stubtest_allowlists/*.local\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.5048828125,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: check-toml\n      - id: check-merge-conflict\n      - id: mixed-line-ending\n        args: [--fix=lf]\n      - id: check-case-conflict\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6 # must match requirements-tests.txt\n    hooks:\n      - id: ruff\n        name: Run ruff on stubs, tests and scripts\n        args: [\"--exit-non-zero-on-fix\"]\n      - id: ruff\n        # Very few rules are useful to run on our test cases;\n        # we explicitly enumerate them here:\n        name: Run ruff on the test cases\n        args:\n          - \"--exit-non-zero-on-fix\"\n          - \"--select=FA,I,RUF100\"\n          - \"--no-force-exclude\"\n          - \"--unsafe-fixes\"\n        files: '.*test_cases/.+\\.py$'\n  - repo: https://github.com/psf/black-pre-commit-mirror\n    rev: 24.10.0\n    hooks:\n      - id: black\n  - repo: https://github.com/pycqa/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n        language: python\n        additional_dependencies:\n          - \"flake8-noqa==1.4.0\"\n          - \"flake8-pyi==24.9.0\"\n        types: [file]\n        types_or: [python, pyi]\n  - repo: meta\n    hooks:\n      - id: check-hooks-apply\n\nci:\n  autofix_commit_msg: \"[pre-commit.ci] auto fixes from pre-commit.com hooks\"\n  autofix_prs: true\n  autoupdate_commit_msg: \"[pre-commit.ci] pre-commit autoupdate\"\n  autoupdate_schedule: quarterly\n  submodules: false\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 31.7900390625,
          "content": "# Contributing to typeshed\n\nWelcome! typeshed is a community project that aims to work for a wide\nrange of Python users and Python codebases. If you're trying a type\nchecker on your Python code, your experience and what you can contribute\nare important to the project's success.\n\n## The contribution process at a glance\n\n1. [Prepare your environment](#preparing-the-environment).\n2. Find out [where to make your changes](#where-to-make-changes).\n3. [Prepare your changes](#preparing-changes):\n    * Small fixes and additions can be submitted directly as pull requests,\n      but [contact us](README.md#discussion) before starting significant work.\n    * Create your stubs, considering [what to include](#what-to-include) and\n      conforming to the [coding style](#stub-file-coding-style).\n4. Optionally [format and check your stubs](#code-formatting).\n5. Optionally [run the tests](tests/README.md).\n6. [Submit your changes](#submitting-changes) by opening a pull request.\n7. Make sure that all tests in CI are passing.\n\nYou can expect a reply within a few days, but please be patient when\nit takes a bit longer. For more details, read below.\n\n## Preparing the environment\n\n### Code away!\n\nTypeshed runs continuous integration (CI) on all pull requests. This means that\nif you file a pull request (PR), our full test suite\n-- including our linter, [Flake8](https://github.com/PyCQA/flake8) --\nis run on your PR. It also means that bots will automatically apply\nchanges to your PR (using [Black](https://github.com/psf/black) and\n[Ruff](https://github.com/astral-sh/ruff)) to fix any formatting issues.\nThis frees you up to ignore all local setup on your side, focus on the\ncode and rely on the CI to fix everything, or point you to the places that\nneed fixing.\n\n### ... Or create a local development environment\n\nIf you prefer to run the tests and formatting locally, it's\npossible too. Follow platform-specific instructions below.\nFor more information about our available tests, see\n[tests/README.md](tests/README.md).\n\nWhichever platform you're using, you will need a\nvirtual environment. If you're not familiar with what it is and how it works,\nplease refer to this\n[documentation](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/).\n\nNote that some tests require extra setup steps to install the required dependencies.\n\n### Linux/Mac OS/WSL\n\nOn Linux and Mac OS, you will be able to run the full test suite on Python\n3.9-3.12.\nTo install the necessary requirements, run the following commands from a\nterminal window:\n\n```bash\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n(.venv)$ pip install -U pip\n(.venv)$ pip install -r requirements-tests.txt\n```\n\n### Windows\n\nRun the following commands from a Windows terminal to install all requirements:\n\n```powershell\n> python -m venv .venv\n> .venv\\Scripts\\activate\n(.venv) > pip install -U pip\n(.venv) > pip install -r \"requirements-tests.txt\"\n```\n\nTo be able to run pytype tests, you'll also need to install it manually\nas it's currently excluded from the requirements file:\n\n```powershell\n(.venv) > pip install -U pytype\n```\n\n## Code formatting\n\nThe code is formatted using [`Black`](https://github.com/psf/black).\nVarious other autofixes and lint rules are\nalso performed by [`Ruff`](https://github.com/astral-sh/ruff) and\n[`Flake8`](https://github.com/pycqa/flake8),\nwith plugins [`flake8-pyi`](https://github.com/pycqa/flake8-pyi),\nand [`flake8-noqa`](https://github.com/plinss/flake8-noqa).\n\nThe repository is equipped with a [pre-commit.ci](https://pre-commit.ci/)\nconfiguration file. This means that you don't *need* to do anything yourself to\nrun the code formatters or linters. When you push a commit, a bot will run\nthose for you right away and add any autofixes to your PR. Anything\nthat can't be autofixed will show up as a CI failure, hopefully with an error\nmessage that will make it clear what's gone wrong.\n\nThat being said, if you *want* to run the formatters and linters locally\nwhen you commit, you're free to do so. To use the same configuration as we use\nin CI, we recommend doing this via pre-commit:\n\n```bash\n(.venv)$ pre-commit run --all-files\n```\n\n## Where to make changes\n\n### Standard library stubs\n\nThe `stdlib` directory contains stubs for modules in the\nPython standard library — which\nincludes pure Python modules, dynamically loaded extension modules,\nhard-linked extension modules, and the builtins. The `VERSIONS` file lists\nthe versions of Python where the module is available.\n\nWe accept changes for future versions of Python after the first beta for that\nversion was released. We drop support for a Python version three months\nafter it reaches [end-of-life](https://devguide.python.org/versions/). This\nmeans that we will no longer actively test the stubs against that version.\nAfter six months, we will remove the stubs for that version and start\nto use syntax and typing features not supported by that version.\n\n### Third-party library stubs\n\nWe accept stubs for third-party packages into typeshed as long as:\n* the package is publicly available on the [Python Package Index](https://pypi.org/);\n* the package supports any Python version supported by typeshed; and\n* the package does not ship with its own stubs or type annotations.\n\nThe fastest way to generate new stubs is to use `scripts/create_baseline_stubs.py` (see below).\n\nStubs for third-party packages go into the `stubs` directory. Each subdirectory\nthere represents a PyPI distribution, and contains the following:\n* `METADATA.toml`, describing the package. See below for details.\n* Stubs (i.e. `*.pyi` files) for packages and modules that are shipped in the\n  source distribution.\n* (Rarely) some docs specific to a given type stub package in `README` file.\n\nWhen a third party stub is added or\nmodified, an updated version of the corresponding distribution will be\nautomatically uploaded to PyPI within a few hours.\nEach time this happens the least significant\nversion level is incremented. For example, if `stubs/foo/METADATA.toml` has\n`version = \"x.y\"` the package on PyPI will be updated from `types-foo-x.y.n`\nto `types-foo-x.y.n+1`.\n\n*Note:* In its current implementation, typeshed cannot contain stubs for\nmultiple versions of the same third-party library.  Prefer to generate\nstubs for the latest version released on PyPI at the time of your\nstubbing.\n\n#### The `METADATA.toml` file\n\nThe metadata file describes the stubs package using the\n[TOML file format](https://toml.io/en/). Currently, the following keys are\nsupported:\n\n* `version`: The versions of the library that the stubs support. Two\n  formats are supported:\n    - A concrete version. This is especially suited for libraries that\n      use [Calendar Versioning](https://calver.org/).\n    - A version range ending in `.*`. This is suited for libraries that\n      reflect API changes in the version number only, where the API-independent\n      part is represented by the asterisk. In the case\n      of [Semantic Versioning](https://semver.org/), this version could look\n      like this: `2.7.*`.\n  When the stubs are updated to a newer version\n  of the library, the version of the stub should be bumped (note that\n  previous versions are still available on PyPI).\n* `requires` (optional): A list of other stub packages or packages with type\n  information that are imported by the stubs in this package. Only packages\n  generated by typeshed or required by the upstream package are allowed to\n  be listed here, for security reasons. See\n  [this issue](https://github.com/typeshed-internal/stub_uploader/issues/90)\n  for more information about what external dependencies are allowed.\n* `extra_description` (optional): Can be used to add a custom description to\n  the package's long description. It should be a multi-line string in\n  Markdown format.\n* `stub_distribution` (optional): Distribution name to be uploaded to PyPI.\n  This defaults to `types-<distribution>` and should only be set in special\n  cases.\n* `upstream_repository` (recommended): The URL of the upstream repository.\n* `obsolete_since` (optional): This field is part of our process for\n  [removing obsolete third-party libraries](#third-party-library-removal-policy).\n  It contains the first version of the corresponding library that ships\n  its own `py.typed` file.\n* `no_longer_updated` (optional): This field is set to `true` before removing\n  stubs for other reasons than the upstream library shipping with type\n  information.\n* `upload` (optional): This field is set to `false` to prevent automatic\n  uploads to PyPI. This should only used in special cases, e.g. when the stubs\n  break the upload.\n* `partial_stub` (optional): This field marks the type stub package as\n  [partial](https://peps.python.org/pep-0561/#partial-stub-packages). This is for\n  3rd-party stubs that don't cover the entirety of the package's public API.\n* `requires_python` (optional): The minimum version of Python required to install\n  the type stub package. It must be in the form `>=3.*`. If omitted, the oldest\n  Python version supported by typeshed is used.\n\nIn addition, we specify configuration for stubtest in the `tool.stubtest` table.\nThis has the following keys:\n* `skip` (default: `false`): Whether stubtest should be run against this\n  package. Please avoid setting this to `true`, and add a comment if you have\n  to.\n* `ignore_missing_stub`: When set to `true`, this will add the\n  `--ignore_missing_stub` option to the stubtest call. See\n  [tests/README.md](./tests/README.md) for more information. In most cases,\n  this field should be identical to `partial_stub`.\n* `stubtest_requirements` (default: `[]`): A list of Python packages that need\n  to be installed for stubtest to run successfully. These packages are installed\n  in addition to the requirements in the `requires` field.\n* `apt_dependencies` (default: `[]`): A list of Ubuntu APT packages\n  that need to be installed for stubtest to run successfully.\n* `brew_dependencies` (default: `[]`): A list of MacOS Homebrew packages\n  that need to be installed for stubtest to run successfully\n* `choco_dependencies` (default: `[]`): A list of Windows Chocolatey packages\n  that need to be installed for stubtest to run successfully\n* `platforms` (default: `[\"linux\"]`): A list of OSes on which to run stubtest.\n  Can contain `win32`, `linux`, and `darwin` values.\n  If not specified, stubtest is run only on `linux`.\n  Only add extra OSes to the test\n  if there are platform-specific branches in a stubs package.\n\n`*_dependencies` are usually packages needed to `pip install` the implementation\ndistribution.\n\nThe format of all `METADATA.toml` files can be checked by running\n`python3 ./tests/check_typeshed_structure.py`.\n\n\n## Preparing Changes\n\n### Before you begin\n\nIf your change will be a significant amount of work to write, we highly\nrecommend starting by opening an issue laying out what you want to do.\nThat lets a conversation happen early in case other contributors disagree\nwith what you'd like to do or have ideas that will help you do it.\n\n### Format\n\nEach Python module is represented by a `.pyi` \"stub file\".  This is a\nsyntactically valid Python file, although it usually cannot be run by\nPython (since forward references don't require string quotes).  All\nthe methods are empty.\n\nPython function annotations ([PEP 3107](https://www.python.org/dev/peps/pep-3107/))\nare used to describe the signature of each function or method.\n\nSee [PEP 484](http://www.python.org/dev/peps/pep-0484/) for the exact\nsyntax of the stub files and [below](#stub-file-coding-style) for the\ncoding style used in typeshed.\n\n### Auto-generating stub files\n\nTypeshed includes `scripts/create_baseline_stubs.py`.\nIt generates stubs automatically using a tool called\n[stubgen](https://mypy.readthedocs.io/en/latest/stubgen.html) that comes with mypy.\n\nTo get started, fork typeshed, clone your fork, and then\n[create a virtualenv](#-or-create-a-local-development-environment).\nYou can then install the library with `pip` into the virtualenv and run the script below,\nreplacing `$INSERT_LIBRARY_NAME_HERE` with the name of the library:\n\n```bash\n(.venv)$ pip install $INSERT_LIBRARY_NAME_HERE\n(.venv)$ python3 scripts/create_baseline_stubs.py $INSERT_LIBRARY_NAME_HERE\n```\n\nWhen the script has finished running, it will print instructions telling you what to do next.\n\nIf it has been a while since you set up the virtualenv, make sure you have\nthe latest mypy (`pip install -r requirements-tests.txt`) before running the script.\n\n### Supported type system features\n\nSince PEP 484 was accepted, there have been many other PEPs that added\nnew features to the Python type system. In general, new features can\nbe used in typeshed as soon as the PEP has been accepted and implemented\nand most type checkers support the new feature.\n\nSupported features include:\n- [PEP 544](https://peps.python.org/pep-0544/) (Protocol)\n- [PEP 585](https://peps.python.org/pep-0585/) (builtin generics)\n- [PEP 586](https://peps.python.org/pep-0586/) (Literal)\n- [PEP 591](https://peps.python.org/pep-0591/) (Final/@final)\n- [PEP 589](https://peps.python.org/pep-0589/) (TypedDict)\n- [PEP 604](https://peps.python.org/pep-0604/) (`Foo | Bar` union syntax)\n- [PEP 612](https://peps.python.org/pep-0612/) (ParamSpec)\n- [PEP 647](https://peps.python.org/pep-0647/) (TypeGuard):\n  see [#5406](https://github.com/python/typeshed/issues/5406)\n- [PEP 655](https://peps.python.org/pep-0655/) (`Required` and `NotRequired`)\n- [PEP 673](https://peps.python.org/pep-0673/) (`Self`)\n- [PEP 675](https://peps.python.org/pep-0675/) (`LiteralString`)\n- [PEP 702](https://peps.python.org/pep-0702/) (`@deprecated()`)\n\nFeatures from the `typing` module that are not present in all\nsupported Python versions must be imported from `typing_extensions`\ninstead in typeshed stubs. This currently affects:\n\n- `TypeAlias` (new in Python 3.10)\n- `Concatenate` (new in Python 3.10)\n- `ParamSpec` (new in Python 3.10)\n- `TypeGuard` (new in Python 3.10)\n- `Self` (new in Python 3.11)\n- `Never` (new in Python 3.11)\n- `LiteralString` (new in Python 3.11)\n- `TypeVarTuple` and `Unpack` (new in Python 3.11)\n- `Required` and `NotRequired` (new in Python 3.11)\n- `Buffer` (new in Python 3.12; in the `collections.abc` module)\n- `@deprecated` (new in Python 3.13; in the `warnings` module)\n\nSome type checkers implicitly promote the `bytearray` and\n`memoryview` types to `bytes`.\n[PEP 688](https://www.python.org/dev/peps/pep-0688/) removes\nthis implicit promotion.\nTypeshed stubs should be written assuming that these promotions\ndo not happen, so a parameter that accepts either `bytes` or\n`bytearray` should be typed as `bytes | bytearray`.\nOften one of the aliases from `_typeshed`, such as\n`_typeshed.ReadableBuffer`, can be used instead.\n\n### What to include\n\nStubs should include the complete interface (classes, functions,\nconstants, etc.) of the module they cover, but it is not always\nclear exactly what is part of the interface.\n\nThe following should always be included:\n- All objects listed in the module's documentation.\n- All objects included in ``__all__`` (if present).\n\nOther objects may be included if they are being used in practice\nor if they are not prefixed with an underscore. This means\nthat typeshed will generally accept contributions that add missing\nobjects, even if they are undocumented. Undocumented objects should\nbe marked with a comment of the form ``# undocumented``.\nExample:\n\n```python\ndef list2cmdline(seq: Sequence[str]) -> str: ...  # undocumented\n```\n\nWe accept such undocumented objects because omitting objects can confuse\nusers. Users who see an error like \"module X has no attribute Y\" will\nnot know whether the error appeared because their code had a bug or\nbecause the stub is wrong. Although it may also be helpful for a type\nchecker to point out usage of private objects, we usually prefer false\nnegatives (no errors for wrong code) over false positives (type errors\nfor correct code). In addition, even for private objects a type checker\ncan be helpful in pointing out that an incorrect type was used.\n\n### What to do when a project's documentation and implementation disagree\n\nType stubs are meant to be external type annotations for a given\nlibrary.  While they are useful documentation in its own merit, they\naugment the project's concrete implementation, not the project's\ndocumentation.  Whenever you find them disagreeing, model the type\ninformation after the actual implementation and file an issue on the\nproject's tracker to fix their documentation.\n\n### Stub versioning\n\nYou can use checks\nlike `if sys.version_info >= (3, 12):` to denote new functionality introduced\nin a given Python version or solve type differences.  When doing so, only use\ntwo-tuples. Because of this, if a given functionality was\nintroduced in, say, Python 3.11.4, your check:\n\n* should be expressed as `if sys.version_info >= (3, 11):`\n* should NOT be expressed as `if sys.version_info >= (3, 11, 4):`\n* should NOT be expressed as `if sys.version_info >= (3, 12):`\n\nWhen your stub contains if statements for different Python versions,\nalways put the code for the most recent Python version first.\n\n## Stub file coding style\n\n### Syntax example\n\nThe below is an excerpt from the types for the `datetime` module.\n\n```python\nMAXYEAR: int\nMINYEAR: int\n\nclass date:\n    def __new__(cls, year: SupportsIndex, month: SupportsIndex, day: SupportsIndex) -> Self: ...\n    @classmethod\n    def fromtimestamp(cls, timestamp: float, /) -> Self: ...\n    @classmethod\n    def today(cls) -> Self: ...\n    @classmethod\n    def fromordinal(cls, n: int, /) -> Self: ...\n    @property\n    def year(self) -> int: ...\n    def replace(self, year: SupportsIndex = ..., month: SupportsIndex = ..., day: SupportsIndex = ...) -> Self: ...\n    def ctime(self) -> str: ...\n    def weekday(self) -> int: ...\n```\n\n### Conventions\n\nStub files are *like* Python files and you should generally expect them\nto look the same.  Your tools should be able to successfully treat them\nas regular Python files.  However, there are a few important differences\nyou should know about.\n\nStyle conventions for stub files are different from PEP 8. The general\nrule is that they should be as concise as possible.  Specifically:\n* all function bodies should be empty;\n* prefer ``...`` over ``pass``;\n* prefer ``...`` on the same line as the class/function signature;\n* avoid vertical whitespace between consecutive module-level functions,\n  names, or methods and fields within a single class;\n* use a single blank line between top-level class definitions, or none\n  if the classes are very small;\n* do not use docstrings;\n* use variable annotations instead of type comments, even for stubs\n  that target older versions of Python.\n\nThe primary users for stub files are type checkers,\nso stub files should generally only contain information necessary for the type\nchecker, and leave out unnecessary detail.\nHowever, stubs also have other use cases:\n* stub files are often used as a data source for IDEs,\n  which will often use the signature in a stub to provide information\n  on functions or classes in tooltip messages.\n* stubs can serve as useful documentation to human readers,\n  as well as machine-readable sources of data.\n\nAs such, we recommend that default values be retained for \"simple\" default values\n(e.g. bools, ints, bytes, strings, and floats are all permitted).\nUse `= ...` for more complex default values,\nrather than trying to exactly reproduce the default at runtime.\n\nSome further tips for good type hints:\n* for arguments that default to `None`, use `Foo | None` explicitly for the type annotation;\n* use `float` instead of `int | float` for parameter annotations\n  (see [PEP 484](https://peps.python.org/pep-0484/#the-numeric-tower) for motivation).\n* use built-in generics (`list`, `dict`, `tuple`, `set`), instead\n  of importing them from `typing`.\n* use `X | Y` instead of `Union[X, Y]` and `X | None`, instead of\n  `Optional[X]`;\n* import collections (`Mapping`, `Iterable`, etc.)\n  from `collections.abc` instead of `typing`;\n* avoid invariant collection types (`list`, `dict`) for function\n  parameters, in favor of covariant types like `Mapping` or `Sequence`;\n* avoid union return types: https://github.com/python/mypy/issues/1693;\n* use platform checks like `if sys.platform == 'win32'` to denote\n  platform-dependent APIs;\n* use mypy error codes for mypy-specific `# type: ignore` annotations,\n  e.g. `# type: ignore[override]` for Liskov Substitution Principle violations.\n* use pyright error codes for pyright-specific suppressions,\n  e.g. `# pyright: ignore[reportGeneralTypeIssues]`.\n  - pyright is configured to discard `# type: ignore` annotations.\n  If you need both on the same line, mypy's annotation needs to go first,\n  e.g. `# type: ignore[override]  # pyright: ignore[reportGeneralTypeIssues]`.\n\nImports in stubs are considered private (not part of the exported API)\nunless:\n* they use the form ``from library import name as name`` (sic, using\n  explicit ``as`` even if the name stays the same); or\n* they use the form ``from library import *`` which means all names\n  from that library are exported.\n\nStub files support forward references natively.  In other words, the\norder of class declarations and type aliases does not matter in\na stub file.  You can also use the name of the class within its own\nbody.  Focus on making your stubs clear to the reader.  Avoid using\nstring literals in type annotations.\n\n### Using `Any` and `object`\n\nWhen adding type hints, avoid using the `Any` type when possible. Reserve\nthe use of `Any` for when:\n* the correct type cannot be expressed in the current type system; and\n* to avoid union returns (see above).\n\nNote that `Any` is not the correct type to use if you want to indicate\nthat some function can accept literally anything: in those cases use\n`object` instead.\n\nWhen using `Any`, document the reason for using it in a comment. Ideally,\ndocument what types could be used. The `_typeshed` module also provides\na few aliases to `Any` — like `Incomplete` and `MaybeNone` (see below) —\nthat should be used instead of `Any` in appropriate situations and double\nas documentation.\n\n### Context managers\n\nWhen adding type annotations for context manager classes, annotate\nthe return type of `__exit__` as bool only if the context manager\nsometimes suppresses exceptions -- if it sometimes returns `True`\nat runtime. If the context manager never suppresses exceptions,\nhave the return type be either `None` or `bool | None`. If you\nare not sure whether exceptions are suppressed or not or if the\ncontext manager is meant to be subclassed, pick `bool | None`.\nSee https://github.com/python/mypy/issues/7214 for more details.\n\n`__enter__` methods and other methods that return instances of the\ncurrent class should be annotated with `typing_extensions.Self`\n([example](https://github.com/python/typeshed/blob/3581846/stdlib/contextlib.pyi#L151)).\n\n### Naming\n\nType variables and aliases you introduce purely for legibility reasons\nshould be prefixed with an underscore to make it obvious to the reader\nthey are not part of the stubbed API.\n\nA few guidelines for protocol names below. In cases that don't fall\ninto any of those categories, use your best judgement.\n\n* Use plain names for protocols that represent a clear concept\n  (e.g. `Iterator`, `Container`).\n* Use `SupportsX` for protocols that provide callable methods (e.g.\n  `SupportsInt`, `SupportsRead`, `SupportsReadSeek`).\n* Use `HasX` for protocols that have readable and/or writable attributes\n  or getter/setter methods (e.g. `HasItems`, `HasFileno`).\n\n### `@deprecated`\n\nTypeshed uses the `@typing_extensions.deprecated` decorator\n(`@warnings.deprecated` since Python 3.13) to mark deprecated\nfunctionality; see [PEP 702](https://peps.python.org/pep-0702/).\n\nA few guidelines for how to use it:\n\n* In the standard library, apply the decorator only in Python versions\n  where an appropriate replacement for the deprecated functionality\n  exists. If in doubt, apply the decorator only on versions where the\n  functionality has been explicitly deprecated, either through runtime\n  warnings or in the documentation. Use `if sys.version_info` checks to\n  apply the decorator only to some versions.\n* Keep the deprecation message concise, but try to mention the projected\n  version when the functionality is to be removed, and a suggested\n  replacement.\n\n### Incomplete annotations\n\nWhen submitting new stubs, it is not necessary to annotate all arguments,\nreturn types, and fields. Such items should either be left unannotated or\nuse `_typeshed.Incomplete` if this is not possible:\n\n```python\nfrom _typeshed import Incomplete\n\nfield: Incomplete  # unannotated\n\ndef foo(x): ...  # unannotated argument and return type\n```\n\n`Incomplete` can also be used for partially known types:\n\n```python\ndef foo(x: Incomplete | None = None) -> list[Incomplete]: ...\n```\n\n### `Any` vs. `Incomplete`\n\nWhile `Incomplete` is a type alias of `Any`, they serve difference purposes:\n`Incomplete` is a placeholder where a proper type might be substituted.\nIt's a \"to do\" item and should be replaced if possible. `Any` is used when\nit's not possible to accurately type an item using the current type system.\nIt should be used sparingly.\n\n### \"The `Any` trick\"\n\nIn cases where a function or method can return `None`, but where forcing the\nuser to explicitly check for `None` can be detrimental, use\n`_typeshed.MaybeNone` (an alias to `Any`), instead of `None`.\n\nConsider the following (simplified) signature of `re.Match[str].group`:\n\n```python\nclass Match:\n    def group(self, group: str | int, /) -> str | MaybeNone: ...\n```\n\nThis avoid forcing the user to check for `None`:\n\n```python\nmatch = re.fullmatch(r\"\\d+_(.*)\", some_string)\nassert match is not None\nname_group = match.group(1)  # The user knows that this will never be None\nreturn name_group.uper()  # This typo will be flagged by the type checker\n```\n\nIn this case, the user of `match.group()` must be prepared to handle a `str`,\nbut type checkers are happy with `if name_group is None` checks, because we're\nsaying it can also be something else than an `str`.\n\nThis is sometimes called \"the Any trick\".\n\n## Submitting Changes\n\nEven more excellent than a good bug report is a fix for a bug, or the\nimplementation of a much-needed stub. We'd love to have\nyour contributions.\n\nWe use the usual GitHub pull-request flow, which may be familiar to\nyou if you've contributed to other projects on GitHub.  For the\nmechanics, see [Mypy's git and GitHub workflow help page](https://github.com/python/mypy/wiki/Using-Git-And-GitHub),\nor [GitHub's own documentation](https://help.github.com/articles/using-pull-requests/).\n\nAnyone interested in type stubs may review your code.  One of the\nmaintainers will merge your pull request when they think it's ready.\nFor every pull request, we aim to promptly either merge it or say why\nit's not yet ready; if you go a few days without a reply, please feel\nfree to ping the thread by adding a new comment.\n\nTo get your pull request merged sooner, you should explain why you are\nmaking the change. For example, you can point to a code sample that is\nprocessed incorrectly by a type checker. It is also helpful to add\nlinks to online documentation or to the implementation of the code\nyou are changing.\n\nAs the author of the pull request, it is your responsibility to make\nsure all CI tests pass and that any feedback is addressed. The typeshed\nmaintainers will probably provide some help and may even push changes\nto your PR to fix any minor issues, but this is not always possible.\nIf a PR lingers with unresolved problems for too long, we may close it\n([see below](#closing-stale-prs)).\n\nAlso, do not squash your commits or use `git commit --amend` after you have submitted a pull request, as this\nerases context during review. We will squash commits when the pull request is merged.\nThis way, your pull request will appear as a single commit in our git history, even\nif it consisted of several smaller commits.\n\n## Third-party library removal policy\n\nThird-party stubs are generally removed from typeshed when one of the\nfollowing criteria is met:\n\n* The upstream package ships a `py.typed` file for at least six months,\n  and the upstream type annotations are of a comparable standard to those in\n  typeshed, or\n* the upstream package was declared or appears to be unmaintained, and\n  retaining the stubs causes maintenance issues in typeshed.\n\nIf a package ships its own `py.typed` file, please follow these steps:\n\n1. Open an issue with the earliest month of removal in the subject.\n2. A maintainer will add the\n   [\"stubs: removal\" label](https://github.com/python/typeshed/labels/stubs%3A%20removal).\n3. Open a PR that sets the `obsolete_since` field in the `METADATA.toml`\n   file to the first version of the package that shipped `py.typed`.\n4. After at least six months, open a PR to remove the stubs.\n\nIf third-party stubs should be removed for other reasons, please follow these\nsteps:\n\n1. Open an issue explaining why the stubs should be removed.\n2. A maintainer will add the\n   [\"stubs: removal\" label](https://github.com/python/typeshed/labels/stubs%3A%20removal).\n3. Open a PR that sets the `no_longer_updated` field in the `METADATA.toml`\n   file to `true`.\n4. When a new version of the package was automatically uploaded to PyPI\n   (which can take up to a day), open a PR to remove the stubs.\n\nIf feeling kindly, please update [mypy](https://github.com/python/mypy/blob/master/mypy/stubinfo.py)\nfor any stub obsoletions or removals.\n\n## Maintainer guidelines\n\nThe process for preparing and submitting changes also applies to\nmaintainers.  This ensures high quality contributions and keeps\neverybody on the same page.  Avoid direct pushes to the repository.\n\nWhen reviewing pull requests, follow these guidelines:\n\n* Typing is hard. Try to be helpful and explain issues with the PR,\n  especially to new contributors.\n* When reviewing auto-generated stubs, just scan for red flags and obvious\n  errors. Leave possible manual improvements for separate PRs.\n* When reviewing large, hand-crafted PRs, you only need to look for red flags\n  and general issues, and do a few spot checks.\n* Review smaller, hand-crafted PRs thoroughly.\n\nWhen merging pull requests, follow these guidelines:\n\n* Always wait for tests to pass before merging PRs.\n* Use \"[Squash and merge](https://github.com/blog/2141-squash-your-commits)\" to merge PRs.\n* Make sure the commit message is meaningful. For example, remove irrelevant\n  intermediate commit messages.\n* The commit message for third-party stubs is used to generate the changelog.\n  It should be valid Markdown, be comprehensive, read like a changelog entry,\n  and assume that the reader has no access to the diff.\n* Delete branches for merged PRs (by maintainers pushing to the main repo).\n\n### Marking PRs as \"deferred\"\n\nWe sometimes use the [\"status: deferred\" label](https://github.com/python/typeshed/labels/status%3A%20deferred)\nto mark PRs and issues that we'd like to accept, but that are blocked by some\nexternal factor. Blockers can include:\n\n- An unambiguous bug in a type checker (i.e., a case where the\n  type checker is not implementing [the typing spec](https://typing.readthedocs.io/en/latest/spec/index.html)).\n- A dependency on a typing PEP that is still under consideration.\n- A pending change in a related project, such as stub-uploader.\n\nPRs should only be marked as \"deferred\" if there is a clear path towards getting\nthe blocking issue resolved within a reasonable time frame. If a PR depends on\na more amorphous change, such as a type system change that has not yet reached\nthe PEP stage, it should instead be closed.\n\nMaintainers who add the \"deferred\" label should state clearly what exactly the\nblocker is, usually with a link to an open issue in another project.\n\n### Closing stale PRs\n\nTo keep the number of open PRs manageable, we may close PRs when they have been\nopen for too long. Specifically, we close open PRs that either have failures in CI,\nserious merge conflicts or unaddressed feedback, and that have not seen any\nactivity in three months.\n\nWe want to maintain a welcoming atmosphere for contributors, so use a friendly\nmessage when closing the PR. Example message:\n\n    Thanks for contributing! I'm closing this PR for now, because it still\n    <fails some tests OR has unresolved review feedback OR has a merge conflict>\n    after three months of inactivity. If you are still interested, please feel free to open\n    a new PR (or ping us to reopen this one).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 12.3603515625,
          "content": "The \"typeshed\" project is licensed under the terms of the Apache license, as\nreproduced below.\n\n= = = = =\n\nApache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n= = = = =\n\nParts of typeshed are licensed under different licenses (like the MIT\nlicense), reproduced below.\n\n= = = = =\n\nThe MIT License\n\nCopyright (c) 2015 Jukka Lehtosalo and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n= = = = =\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 0.9345703125,
          "content": "At present the active maintainers are (alphabetically):\n\n* Rebecca Chen (@rchen152)\n* Jukka Lehtosalo (@JukkaL)\n* Ivan Levkivskyi (@ilevkivskyi)\n* Sebastian Rittau (@srittau)\n* Guido van Rossum (@gvanrossum)\n* Shantanu (@hauntsaninja)\n* Nikita Sobolev (@sobolevn)\n* Samuel Therrien (@Avasam)\n* Aku Viljanen (@Akuli)\n* Alex Waygood (@AlexWaygood)\n* Jelle Zijlstra (@JelleZijlstra)\n\nFormer maintainers include:\n\n* David Fisher (@ddfisher)\n* Matthias Kramm (@matthiaskramm)\n* Łukasz Langa (@ambv)\n* Greg Price (@gnprice)\n* Rune Tynan (@CraftSpider)\n\nFor security reasons, maintainers who haven't been active for twelve months\n(no PR reviews or merges, no opened PRs, no significant participation in\nissues or typing-related discussion) will have their access rights removed.\nThey will also be moved to the \"former maintainers\" section here.\n\nFormer maintainers who want their access rights restored should open\nan issue or mail one of the active maintainers.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2509765625,
          "content": "# typeshed\n\n[![Tests](https://github.com/python/typeshed/actions/workflows/tests.yml/badge.svg)](https://github.com/python/typeshed/actions/workflows/tests.yml)\n[![Chat at https://gitter.im/python/typing](https://badges.gitter.im/python/typing.svg)](https://gitter.im/python/typing?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Pull Requests Welcome](https://img.shields.io/badge/pull%20requests-welcome-brightgreen.svg)](https://github.com/python/typeshed/blob/main/CONTRIBUTING.md)\n\n## About\n\nTypeshed contains external type annotations for the Python standard library\nand Python builtins, as well as third party packages as contributed by\npeople external to those projects.\n\nThis data can e.g. be used for static analysis, type checking, type inference,\nand autocompletion.\n\nFor information on how to use typeshed, read below.  Information for\ncontributors can be found in [CONTRIBUTING.md](CONTRIBUTING.md).  **Please read\nit before submitting pull requests; do not report issues with annotations to\nthe project the stubs are for, but instead report them here to typeshed.**\n\nFurther documentation on stub files, typeshed, and Python's typing system in\ngeneral, can also be found at https://typing.readthedocs.io/en/latest/.\n\nTypeshed supports Python versions 3.9 to 3.13.\n\n## Using\n\nIf you're just using a type checker ([mypy](https://github.com/python/mypy/),\n[pyright](https://github.com/microsoft/pyright),\n[pytype](https://github.com/google/pytype/), PyCharm, ...), as opposed to\ndeveloping it, you don't need to interact with the typeshed repo at\nall: a copy of standard library part of typeshed is bundled with type checkers.\nAnd type stubs for third party packages and modules you are using can\nbe installed from PyPI. For example, if you are using `html5lib` and `requests`,\nyou can install the type stubs using\n\n```bash\n$ pip install types-html5lib types-requests\n```\n\nThese PyPI packages follow [PEP 561](http://www.python.org/dev/peps/pep-0561/)\nand are automatically released (up to once a day) by\n[typeshed internal machinery](https://github.com/typeshed-internal/stub_uploader).\n\nType checkers should be able to use these stub packages when installed. For more\ndetails, see the documentation for your type checker.\n\n### Package versioning for third-party stubs\n\nVersion numbers of third-party stub packages consist of at least four parts.\nAll parts of the stub version, except for the last part, correspond to the\nversion of the runtime package being stubbed. For example, if the `types-foo`\npackage has version `1.2.0.20240309`, this guarantees that the `types-foo` package\ncontains stubs targeted against `foo==1.2.*` and tested against the latest\nversion of `foo` matching that specifier. In this example, the final element\nof the version number (20240309) indicates that the stub package was pushed on\nMarch 9, 2024.\n\nAt typeshed, we try to keep breaking changes to a minimum. However, due to the\nnature of stubs, any version bump can introduce changes that might make your\ncode fail to type check.\n\nThere are several strategies available for specifying the version of a stubs\npackage you're using, each with its own tradeoffs:\n\n1. Use the same bounds that you use for the package being stubbed. For example,\n   if you use `requests>=2.30.0,<2.32`, you can use\n   `types-requests>=2.30.0,<2.32`. This ensures that the stubs are compatible\n   with the package you are using, but it carries a small risk of breaking\n   type checking due to changes in the stubs.\n\n   Another risk of this strategy is that stubs often lag behind\n   the package being stubbed. You might want to force the package being stubbed\n   to a certain minimum version because it fixes a critical bug, but if\n   correspondingly updated stubs have not been released, your type\n   checking results may not be fully accurate.\n2. Pin the stubs to a known good version and update the pin from time to time\n   (either manually, or using a tool such as dependabot or renovate).\n\n   For example, if you use `types-requests==2.31.0.1`, you can have confidence\n   that upgrading dependencies will not break type checking. However, you will\n   miss out on improvements in the stubs that could potentially improve type\n   checking until you update the pin. This strategy also has the risk that the\n   stubs you are using might become incompatible with the package being stubbed.\n3. Don't pin the stubs. This is the option that demands the least work from\n   you when it comes to updating version pins, and has the advantage that you\n   will automatically benefit from improved stubs whenever a new version of the\n   stubs package is released. However, it carries the risk that the stubs\n   become incompatible with the package being stubbed.\n\n   For example, if a new major version of the package is released, there's a\n   chance the stubs might be updated to reflect the new version of the runtime\n   package before you update the package being stubbed.\n\nYou can also switch between the different strategies as needed. For example,\nyou could default to strategy (1), but fall back to strategy (2) when\na problem arises that can't easily be fixed.\n\n### The `_typeshed` package\n\ntypeshed includes a package `_typeshed` as part of the standard library.\nThis package and its submodules contain utility types, but are not\navailable at runtime. For more information about how to use this package,\n[see the `stdlib/_typeshed` directory](https://github.com/python/typeshed/tree/main/stdlib/_typeshed).\n\n## Discussion\n\nIf you've run into behavior in the type checker that suggests the type\nstubs for a given library are incorrect or incomplete,\nwe want to hear from you!\n\nOur main forum for discussion is the project's [GitHub issue\ntracker](https://github.com/python/typeshed/issues).  This is the right\nplace to start a discussion of any of the above or most any other\ntopic concerning the project.\n\nIf you have general questions about typing with Python, or you need\na review of your type annotations or stubs outside of typeshed, head over to\n[our discussion forum](https://github.com/python/typing/discussions).\nFor less formal discussion, try the typing chat room on\n[gitter.im](https://gitter.im/python/typing).  Some typeshed maintainers\nare almost always present; feel free to find us there and we're happy\nto chat.  Substantive technical discussion will be directed to the\nissue tracker.\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 7.6142578125,
          "content": "[tool.black]\nline-length = 130\ntarget-version = [\"py310\"]\nskip-magic-trailing-comma = true\n# Exclude protobuf files because they have long line lengths\n# that can't be autofixed. Like docstrings and import aliases.\n# Ideally, we could configure Black to allow longer line lengths\n# for just these files, but doesn't seem possible yet.\nforce-exclude = \".*_pb2.pyi\"\n\n[tool.ruff]\nline-length = 130\n# Oldest supported Python version\ntarget-version = \"py38\"\nfix = true\nexclude = [\n    # virtual environment\n    \".env\",\n    \".venv\",\n    \"env\",\n    # cache directories, etc.:\n    \".git\",\n    \".mypy_cache\",\n    \".pytype\",\n]\n\n[tool.ruff.lint]\n# Disable all rules on test cases by default:\n# test cases often deliberately contain code\n# that might not be considered idiomatic or modern.\n#\n# Note: some rules that are specifically useful to the test cases\n# are invoked via separate runs of ruff in pre-commit:\n# see our .pre-commit-config.yaml file for details\nexclude = [\"**/test_cases/**/*.py\"]\n# We still use flake8-pyi and flake8-noqa to check these (see .flake8 config file);\n# tell ruff not to flag these as e.g. \"unused noqa comments\"\nexternal = [\"F821\", \"NQA\", \"Y\"]\nselect = [\n    \"ARG\", # flake8-unused-arguments\n    \"B\", # flake8-bugbear\n    \"D\", # pydocstyle\n    \"EXE\", # flake8-executable\n    \"FA\", # flake8-future-annotations\n    \"I\", # isort\n    \"N\", # pep8-naming\n    \"PGH\", # pygrep-hooks\n    \"RUF\", # Ruff-specific and unused-noqa\n    \"TRY\", # tryceratops\n    \"UP\", # pyupgrade\n    \"YTT\", # flake8-2020\n    # Flake8 base rules\n    \"E\", # pycodestyle Error\n    \"F\", # Pyflakes\n    \"W\", # pycodestyle Warning\n    # Only include flake8-annotations rules that are autofixable. Otherwise leave this to mypy+pyright\n    \"ANN2\",\n    # Don't include TC rules that create a TYPE_CHECKING block or stringifies annotations\n    \"TC004\", # Move import `{qualified_name}` out of type-checking block. Import is used for more than type hinting.\n    \"TC005\", # Found empty type-checking block\n    # \"TC008\", # TODO: Enable when out of preview\n    \"TC010\", # Invalid string member in `X | Y`-style union type\n    # Most refurb rules are in preview and can be opinionated,\n    # consider them individually as they come out of preview (last check: 0.8.4)\n    \"FURB105\", # Unnecessary empty string passed to `print`\n    \"FURB129\", # Instead of calling `readlines()`, iterate over file object directly\n    \"FURB136\", # Replace `if` expression with `{min_max}` call\n    \"FURB167\", # Use of regular expression alias `re.{}`\n    \"FURB168\", # Prefer `is` operator over `isinstance` to check if an object is `None`\n    \"FURB169\", # Compare the identities of `{object}` and None instead of their respective types\n    \"FURB177\", # Prefer `Path.cwd()` over `Path().resolve()` for current-directory lookups\n    \"FURB187\", # Use of assignment of `reversed` on list `{name}`\n    # PYI: only enable rules that have autofixes and that we always want to fix (even manually),\n    # avoids duplicate # noqa with flake8-pyi and flake8-noqa flagging `PYI` codes\n    # See https://github.com/plinss/flake8-noqa/issues/22\n    \"PYI009\", # Empty body should contain `...`, not pass\n    \"PYI010\", # Function body must contain only `...`\n    \"PYI012\", # Class bodies must not contain `pass`\n    \"PYI013\", # Non-empty class bodies must not contain `...`\n    \"PYI014\", # Only simple default values allowed for arguments\n    \"PYI015\", # Only simple default values allowed for assignments\n    \"PYI016\", # Duplicate union member `{}`\n    \"PYI019\", # Methods like `{method_name}` should return `Self` instead of a custom `TypeVar`\n    \"PYI020\", # Quoted annotations should not be included in stubs\n    \"PYI025\", # Use `from collections.abc import Set as AbstractSet` to avoid confusion with the `set` builtin\n    # \"PYI026\", Waiting for this mypy bug to be fixed: https://github.com/python/mypy/issues/16581\n    \"PYI030\", # Multiple literal members in a union. Use a single literal, e.g. `Literal[{}]`\n    \"PYI032\", # Prefer `object` to `Any` for the second parameter to `{method_name}`\n    \"PYI034\", # `__new__` methods usually return self at runtime\n    \"PYI036\", # Star-args in `{method_name}` should be annotated with `object`\n    \"PYI044\", # `from __future__ import annotations` has no effect in stub files, since type checkers automatically treat stubs as having those semantics\n    \"PYI055\", # Multiple `type[T]` usages in a union. Combine them into one, e.g., `type[{union_str}]`.\n    \"PYI058\", # Use `{return_type}` as the return value for simple `{method}` methods\n    # \"PYI061\", # TODO: Enable when out of preview\n    \"PYI062\", # Duplicate literal member `{}`\n    \"PYI064\", # `Final[Literal[{literal}]]` can be replaced with a bare Final\n]\nextend-safe-fixes = [\n    \"UP036\", # Remove unnecessary `sys.version_info` blocks\n]\nignore = [\n    ###\n    # Rules that can conflict with the formatter (Black)\n    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules\n    ###\n    \"E111\", # indentation-with-invalid-multiple\n    \"E114\", # indentation-with-invalid-multiple-comment\n    \"E117\", # over-indented\n    \"W191\", # tab-indentation\n    ###\n    # Rules we don't want or don't agree with\n    ###\n    # We're not a library, no need to document everything\n    \"D1\", # Missing docstring in ...\n    # Doesn't support split \"summary line\"\n    \"D205\", # 1 blank line required between summary line and description\n    # Used for direct, non-subclass type comparison, for example: `type(val) is str`\n    # see https://github.com/astral-sh/ruff/issues/6465\n    \"E721\", # Do not compare types, use `isinstance()`\n    # Mostly from scripts and tests, it's ok to have messages passed directly to exceptions\n    \"TRY003\", # Avoid specifying long messages outside the exception class\n    # Slower and more verbose https://github.com/astral-sh/ruff/issues/7871\n    \"UP038\", # Use `X | Y` in `isinstance` call instead of `(X, Y)`\n    ###\n    # False-positives, but already checked by type-checkers\n    ###\n    # Ruff doesn't support multi-file analysis yet: https://github.com/astral-sh/ruff/issues/5295\n    \"RUF013\", # PEP 484 prohibits implicit `Optional`\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"*.pyi\" = [\n    # A lot of stubs are incomplete on purpose, and that's configured through pyright\n    # Some ANN204 (special method) are autofixable in stubs, but not all.\n    \"ANN2\", # Missing return type annotation for ...\n    # Most pep8-naming rules don't apply for third-party stubs like typeshed.\n    # N811 to N814 could apply, but we often use them to disambiguate a name whilst making it look like a more common one\n    \"N8\",\n    # Rules that are out of the control of stub authors:\n    \"F403\", # `from . import *` used; unable to detect undefined names\n    # Stubs can sometimes re-export entire modules.\n    # Issues with using a star-imported name will be caught by type-checkers.\n    \"F405\", # may be undefined, or defined from star imports\n    # Ruff 0.8.0 added sorting of __all__ and __slots_.\n    # There is no consensus on whether we want to apply this to stubs, so keeping the status quo.\n    # See https://github.com/python/typeshed/pull/13108\n    \"RUF022\",\n    \"RUF023\",\n]\n\"*_pb2.pyi\" = [\n    # Leave the docstrings as-is, matching source\n    \"D\", # pydocstyle\n    # See comment on black's force-exclude config above\n    \"E501\", # Line too long\n]\n\n[tool.ruff.lint.pydocstyle]\nconvention = \"pep257\" # https://docs.astral.sh/ruff/settings/#lint_pydocstyle_convention\n\n[tool.ruff.lint.isort]\nsplit-on-trailing-comma = false\ncombine-as-imports = true\nextra-standard-library = [\n    # Group these with stdlib\n    \"_typeshed\",\n    \"typing_extensions\",\n    # Extra modules not recognized by Ruff\n    # Added in Python 3.9\n    \"zoneinfo\",\n]\nknown-first-party = [\"_utils\", \"ts_utils\"]\n\n[tool.typeshed]\noldest_supported_python = \"3.9\"\n"
        },
        {
          "name": "pyrightconfig.json",
          "type": "blob",
          "size": 2.0166015625,
          "content": "{\n    \"$schema\": \"https://raw.githubusercontent.com/microsoft/pyright/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json\",\n    \"typeshedPath\": \".\",\n    \"include\": [\n        \"stdlib\",\n        \"stubs\",\n    ],\n    \"exclude\": [\n        // Stubs that don't work in all Python versions\n        \"stubs/seaborn\",\n        \"stubs/shapely\",\n        // test cases use a custom config file\n        \"**/@tests/test_cases\",\n    ],\n    \"typeCheckingMode\": \"strict\",\n    // Allowed in base settings for incomplete stubs, checked in stricter settings\n    \"reportIncompleteStub\": \"none\",\n    \"reportMissingParameterType\": \"none\",\n    \"reportUnknownMemberType\": \"none\",\n    \"reportUnknownParameterType\": \"none\",\n    \"reportUnknownVariableType\": \"none\",\n    // Extra strict settings\n    \"reportCallInDefaultInitializer\": \"error\",\n    \"reportUnnecessaryTypeIgnoreComment\": \"error\",\n    // Leave \"type: ignore\" comments to mypy\n    \"enableTypeIgnoreComments\": false,\n    // No effect in stubs\n    \"reportMissingSuperCall\": \"none\",\n    \"reportUninitializedInstanceVariable\": \"none\",\n    // stdlib stubs trigger reportShadowedImports\n    \"reportShadowedImports\": \"none\",\n    // Stubs are allowed to use private variables\n    \"reportPrivateUsage\": \"none\",\n    // Stubs don't need the actual modules to be installed\n    \"reportMissingModuleSource\": \"none\",\n    // Incompatible overrides and property type mismatches are out of typeshed's control\n    // as they are inherited from the implementation.\n    \"reportIncompatibleMethodOverride\": \"none\",\n    \"reportIncompatibleVariableOverride\": \"none\",\n    \"reportPropertyTypeMismatch\": \"none\",\n    // Overlapping overloads are often necessary in a stub, meaning pyright's check\n    // (which is stricter than mypy's; see mypy issue #10143 and #10157)\n    // would cause many false positives and catch few bugs.\n    \"reportOverlappingOverload\": \"none\",\n    // The name of the self/cls parameter is out of typeshed's control.\n    \"reportSelfClsParameterName\": \"none\",\n    // Not actionable in typeshed\n    \"reportDeprecated\": \"none\",\n}\n"
        },
        {
          "name": "pyrightconfig.scripts_and_tests.json",
          "type": "blob",
          "size": 0.8408203125,
          "content": "{\n    \"$schema\": \"https://raw.githubusercontent.com/microsoft/pyright/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json\",\n    \"typeshedPath\": \".\",\n    \"include\": [\n        \"lib\",\n        \"scripts\",\n        \"tests\",\n    ],\n    \"extraPaths\": [\n        \"lib\",\n    ],\n    \"typeCheckingMode\": \"strict\",\n    // More of a lint. Unwanted for typeshed's own code.\n    \"reportImplicitStringConcatenation\": \"none\",\n    // Extra strict settings\n    \"reportMissingModuleSource\": \"error\",\n    \"reportShadowedImports\": \"error\",\n    \"reportCallInDefaultInitializer\": \"error\",\n    \"reportPropertyTypeMismatch\": \"error\",\n    \"reportUninitializedInstanceVariable\": \"error\",\n    \"reportUnnecessaryTypeIgnoreComment\": \"error\",\n    // Leave \"type: ignore\" comments to mypy\n    \"enableTypeIgnoreComments\": false,\n    // Too strict\n    \"reportMissingSuperCall\": \"none\",\n}\n"
        },
        {
          "name": "pyrightconfig.stricter.json",
          "type": "blob",
          "size": 4.6962890625,
          "content": "{\n    \"$schema\": \"https://raw.githubusercontent.com/microsoft/pyright/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json\",\n    \"typeshedPath\": \".\",\n    \"include\": [\n        \"stdlib\",\n        \"stubs\",\n    ],\n    \"exclude\": [\n        // test cases use a custom pyrightconfig file\n        \"**/@tests/test_cases\",\n        \"stdlib/distutils/command\",\n        \"stdlib/distutils/dist.pyi\",\n        \"stdlib/importlib/readers.pyi\",\n        \"stdlib/lib2to3/fixes/*.pyi\",\n        \"stdlib/numbers.pyi\",\n        \"stdlib/optparse.pyi\",\n        \"stdlib/_tkinter.pyi\",\n        \"stdlib/tkinter/__init__.pyi\",\n        \"stdlib/tkinter/commondialog.pyi\",\n        \"stdlib/tkinter/filedialog.pyi\",\n        \"stdlib/tkinter/dialog.pyi\",\n        \"stdlib/tkinter/messagebox.pyi\",\n        \"stdlib/tkinter/scrolledtext.pyi\",\n        \"stdlib/tkinter/tix.pyi\",\n        \"stdlib/tkinter/ttk.pyi\",\n        \"stdlib/xml/dom/NodeFilter.pyi\",\n        \"stdlib/xml/dom/expatbuilder.pyi\",\n        \"stdlib/xml/dom/minidom.pyi\",\n        \"stdlib/xml/dom/pulldom.pyi\",\n        \"stdlib/xml/sax\",\n        \"stubs/aiofiles/aiofiles/tempfile/temptypes.pyi\",\n        \"stubs/antlr4-python3-runtime\",\n        \"stubs/Authlib\",\n        \"stubs/aws-xray-sdk\",\n        \"stubs/beautifulsoup4\",\n        \"stubs/bleach/bleach/sanitizer.pyi\",\n        \"stubs/boltons\",\n        \"stubs/braintree\",\n        \"stubs/caldav\",\n        \"stubs/cffi\",\n        \"stubs/click-default-group\",\n        \"stubs/click-web\",\n        \"stubs/commonmark\",\n        \"stubs/corus\",\n        \"stubs/dateparser\",\n        \"stubs/defusedxml\",\n        \"stubs/django-import-export\",\n        \"stubs/docker\",\n        \"stubs/docutils\",\n        \"stubs/Flask-SocketIO\",\n        \"stubs/fpdf2\",\n        \"stubs/gdb\",\n        \"stubs/google-cloud-ndb\",\n        \"stubs/hdbcli/hdbcli/dbapi.pyi\",\n        \"stubs/html5lib\",\n        \"stubs/httplib2\",\n        \"stubs/humanfriendly\",\n        \"stubs/hvac\",\n        \"stubs/icalendar\",\n        \"stubs/influxdb-client\",\n        \"stubs/jmespath\",\n        \"stubs/jsonschema\",\n        \"stubs/jwcrypto\",\n        \"stubs/ldap3\",\n        \"stubs/m3u8\",\n        \"stubs/Markdown\",\n        \"stubs/mysqlclient\",\n        \"stubs/netaddr/netaddr/core.pyi\",\n        \"stubs/netaddr/netaddr/ip/__init__.pyi\",\n        \"stubs/netaddr/netaddr/ip/iana.pyi\",\n        \"stubs/networkx\",\n        \"stubs/oauthlib\",\n        \"stubs/openpyxl\",\n        \"stubs/parsimonious/parsimonious/nodes.pyi\",\n        \"stubs/passlib\",\n        \"stubs/peewee\",\n        \"stubs/pexpect\",\n        \"stubs/pika\",\n        \"stubs/protobuf\",\n        \"stubs/psutil\",\n        \"stubs/psycopg2\",\n        \"stubs/pyasn1\",\n        \"stubs/pycurl\",\n        \"stubs/pyflakes\",\n        \"stubs/Pygments\",\n        \"stubs/PyMySQL\",\n        \"stubs/python-crontab\",\n        \"stubs/python-dateutil\",\n        \"stubs/python-http-client\",\n        \"stubs/python-jose\",\n        \"stubs/pywin32\",\n        \"stubs/pyxdg\",\n        \"stubs/PyYAML\",\n        \"stubs/reportlab\",\n        \"stubs/requests\",\n        \"stubs/requests-oauthlib\",\n        \"stubs/seaborn\",\n        \"stubs/setuptools/setuptools\",\n        \"stubs/shapely\",\n        \"stubs/tensorflow\",\n        \"stubs/tqdm\",\n        \"stubs/ttkthemes\",\n        \"stubs/vobject\",\n        \"stubs/workalendar\",\n        \"stubs/wurlitzer\",\n    ],\n    \"typeCheckingMode\": \"strict\",\n    // TODO: Complete incomplete stubs\n    \"reportIncompleteStub\": \"none\",\n    // Extra strict settings\n    \"reportCallInDefaultInitializer\": \"error\",\n    // implicit string concatenation is useful for long deprecation messages\n    \"reportImplicitStringConcatenation\": \"none\",\n    \"reportUnnecessaryTypeIgnoreComment\": \"error\",\n    // Leave \"type: ignore\" comments to mypy\n    \"enableTypeIgnoreComments\": false,\n    // No effect in stubs\n    \"reportMissingSuperCall\": \"none\",\n    \"reportUninitializedInstanceVariable\": \"none\",\n    // stdlib stubs trigger reportShadowedImports\n    \"reportShadowedImports\": \"none\",\n    // Stubs are allowed to use private variables\n    \"reportPrivateUsage\": \"none\",\n    // Stubs don't need the actual modules to be installed\n    \"reportMissingModuleSource\": \"none\",\n    // Incompatible overrides and property type mismatches are out of typeshed's control\n    // as they are inherited from the implementation.\n    \"reportIncompatibleMethodOverride\": \"none\",\n    \"reportIncompatibleVariableOverride\": \"none\",\n    \"reportPropertyTypeMismatch\": \"none\",\n    // Overlapping overloads are often necessary in a stub, meaning pyright's check\n    // (which is stricter than mypy's; see mypy issue #10143 and #10157)\n    // would cause many false positives and catch few bugs.\n    \"reportOverlappingOverload\": \"none\",\n    // The name of the self/cls parameter is out of typeshed's control.\n    \"reportSelfClsParameterName\": \"none\",\n    // Not actionable in typeshed\n    \"reportDeprecated\": \"none\",\n}\n"
        },
        {
          "name": "pyrightconfig.testcases.json",
          "type": "blob",
          "size": 1.5625,
          "content": "{\n    \"$schema\": \"https://raw.githubusercontent.com/microsoft/pyright/main/packages/vscode-pyright/schemas/pyrightconfig.schema.json\",\n    \"typeshedPath\": \".\",\n    \"include\": [\n        \"**/@tests/test_cases\",\n    ],\n    \"typeCheckingMode\": \"strict\",\n    // Extra strict settings\n    \"reportShadowedImports\": \"error\", // Don't accidentally name a file something that shadows stdlib\n    \"reportImplicitStringConcatenation\": \"error\",\n    \"reportUninitializedInstanceVariable\": \"error\",\n    \"reportUnnecessaryTypeIgnoreComment\": \"error\",\n    // Using unspecific `type: ignore` comments in test_cases.\n    // See https://github.com/python/typeshed/pull/8083\n    \"enableTypeIgnoreComments\": true,\n    // If a test case uses this anti-pattern, there's likely a reason and annoying to `type: ignore`.\n    // Let Ruff flag it (B006)\n    \"reportCallInDefaultInitializer\": \"none\",\n    // Too strict and not needed for type testing\n    \"reportMissingSuperCall\": \"none\",\n    // Stubs are allowed to use private variables. We may want to test those.\n    \"reportPrivateUsage\": \"none\",\n    // Stubs don't need the actual modules to be installed\n    \"reportMissingModuleSource\": \"none\",\n    // Incompatible property type mismatches may be out of typeshed's control\n    // when they are inherited from the implementation.\n    \"reportPropertyTypeMismatch\": \"none\",\n    // isinstance checks are still needed when validating inputs outside of typeshed's control\n    \"reportUnnecessaryIsInstance\": \"none\",\n    // The name of the self/cls parameter is out of typeshed's control.\n    \"reportSelfClsParameterName\": \"none\",\n}\n"
        },
        {
          "name": "requirements-tests.txt",
          "type": "blob",
          "size": 0.77734375,
          "content": "# Type checkers that we test our stubs against. These should always\n# be pinned to a specific version to make failure reproducible.\nmypy==1.14.1\npyright==1.1.389\n# pytype can be installed on Windows, but requires building wheels, let's not do that on the CI\npytype==2024.10.11; platform_system != \"Windows\" and python_version >= \"3.10\" and python_version < \"3.13\"\n\n# Libraries used by our various scripts.\naiohttp==3.10.11\ngrpcio-tools>=1.66.2 # For grpc_tools.protoc\nmypy-protobuf==3.6.0\npackaging==24.2\npathspec>=0.11.1\npre-commit\n# Required by create_baseline_stubs.py. Must match .pre-commit-config.yaml.\nruff==0.8.5\nstubdefaulter==0.1.0\ntermcolor>=2.3\ntomli==2.2.1\ntomlkit==0.13.2\ntyping_extensions>=4.12.0rc1\nuv==0.5.14\n\n# Utilities for typeshed infrastructure scripts.\nts_utils @ file:lib\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "stubs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}