{
  "metadata": {
    "timestamp": 1736559793202,
    "page": 518,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "leon-thomm/Ryven",
      "stars": 3857,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1318359375,
          "content": ".idea/\n.vscode/\n.qt_for_python/\n__pycache__/\nvenv/\ntemp/\ncode_gen/\n__own__/\nbuild/\ndist/\n*.egg-info\ntests/data\n\nryvencore-drawio.xml\n\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1474609375,
          "content": "# Philosophy :cyclone:\n\nRyven is meant to be a **simple** and **transparent** tool for visual scripting in Python.\nIt does not intend to replace textual source code in general by the diagram representation, rather to enhance it.\nThe idea is to provide a simple but powerful system for nodes and node packages with virtually no restrictions, so even fairly advanced mechanisms can be built on top of it.\n\n# Contributions In General :rocket:\n\nThere are many ways you can contribute to the Ryven project. Particularly effective options include improvement of\n\n- docstrings\n- online documentation\n- example content: nodes and projects\n- modularity improvements\n\n# Creating Good Issues :mega:\n\n- you might want to check\n  - the [information on the website](https://ryven.org/)\n  - the [wiki](https://github.com/leon-thomm/Ryven/wiki)\n  - the [ryvencore documentation](https://leon-thomm.github.io/ryvencore/)\n- be precise and **include a minimal procedure to reproduce the problem**\n- notice there's also a [discussions section](https://github.com/leon-thomm/ryven/discussions), but you can also use the issue tracker for questions\n\nThanks for hanging around and have a nice day!\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 1.005859375,
          "content": "*This is the list of the Ryven project's significant contributors. It does not list everyone who has contributed but only those who have substantially impacted the project. To see the full list of contributors, look at the revision history in source control. To request change you may contact one of the maintainers directly.*\n\n**Advisors**\n\n- [dumblob](https://github.com/dumblob)\n- [Moritz Mussgnug](https://www.linkedin.com/in/moritz-mussgnug-053b7b198/)\n- [Yannick Reich](https://github.com/yannick-reich)\n\n_Code_\n\n- [Jan Janssen](https://github.com/jan-janssen)\n    - conda port\n- [Marcin Morys](https://github.com/mmorys)\n    - pip packaging\n- [sphh](https://github.com/sphh)\n    - command line arguments\n- [Tanneguy de Villemagne](https://github.com/Tanneguydv)\n    - CAD integration\n\n_Design_\n\n- [Samuel Wölfl](https://github.com/samuelwoelfl)\n    - incredible UI design for Ryven 3\n    - a lot of design work for the websites\n\n**Special Thanks**\n\n- [ETH Student Project House](https://sph.ethz.ch) and everyone involved\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2022 Leon Thomm\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.0048828125,
          "content": "> This project is not receiving substantial updates, and I'll have limited time for it in the future. With the latest release the project became quite accurately what I want it to be: an easy and flexible editor and framework to explore use cases of flow-based visual scripting in Python. If you have questions or further ideas feel free to open issues or fork the project and try it yourself.\n\n<p align=\"center\">\n  <img src=\"./docs/img/logo.png\" alt=\"drawing\" width=\"70%\"/>\n</p>\n\nRyven is an experimental node editor written in Python. It implements a Qt-based visual interface for flow-based visual scripting in Python. It provides a powerful system for developing nodes executing any Python code, and an editor for building graphs using those nodes. Ryven features a bunch of configuration options and a headless mode for running graphs without any GUI. Some relevant GitHub repos:\n\n* [ryvencore](https://github.com/leon-thomm/ryvencore): backend / core library\n* [ryven-blender](https://github.com/leon-thomm/ryven-blender), [ryven-unreal](https://github.com/leon-thomm/ryven-unreal): Ryven plugins for Blender and UE4 (_deprecated_)\n* [PythonOCC nodes for Ryven](https://github.com/Tanneguydv/Pythonocc-nodes-for-Ryven): WIP Ryven nodes for PythonOCC (3D CAD) (_deprecated_)\n* [ironflow](https://github.com/pyiron/ironflow): WIP node interface in jupyter for [pyiron](https://github.com/pyiron) based on ryvencore\n\nThe `ryvencore-qt` library adds Qt-based GUI classes for ryvencore (`./ryvencore-qt/`), and the Ryven editor assembles them into a fully-featured cross-platform application (`./ryven-editor/`).\n\n## Installation and Configuration\n\nOnce you have Python and pip installed, Ryven is available on PyPI via\n\n```\npip install ryven\n```\n\nThere is also a [conda-forge package](https://anaconda.org/conda-forge/ryven) (`conda install -c conda-forge ryven`).\n\nRyven can be launched from the command line by typing `ryven`. If you installed Ryven into a Python virtual environment (or a conda environment), the environment needs to be activated first.\n\nRyven itself only comes with some small example nodes. You should use Ryven either to develop nodes, or use a third-party nodes package for your use case if there is one. The example nodes are - indeed - just examples, and not stable in any way, so you should not depend on them.\n\nWhen installed, ryven will create a directory `~/.ryven/` in your user home with the following structure:\n\n```\n~/.ryven\n├── nodes\n│   ├── your_nodes_pkg_1\n│       ├── nodes.py\n│       └── gui.py\n│   └── ...\n├── saves\n│   ├── your_project_1.json\n│   └── ...\n└── ryven.cfg\n```\n\nThe `ryven.cfg` file contains global configurations for Ryven.\n\nRyven can be configured in four ways:\n1. from the command line, e.g. `ryven --nodes your_nodes_pkg_1 --no-animations`\n2. from a configuration file, e.g. in `~/.ryven/ryven.cfg`:\n   > ```\n   > nodes = your_nodes_pkg_1\n   > no_animations = True\n   > ``` \n3. through arguments when it's integrated in another Python application, e.g.\n   > ```python\n   > import ryven\n   > ryven.run_ryven(nodes=['your_nodes_pkg_1'], no_animations=True)\n   > ```\n4. using a GUI in the startup dialog\n   * you can also convert the manual configuration to cmd line args (or a config file) in the dialog\n\nType `ryven --help` for a list of available options.\n\nTo deploy a Ryven project headless (without any GUI) use the `ryven-console` command.\n\n<details>\n<summary>Example: headless deployment with REPL access</summary>\n\n```bash\n> ryven-console /home/leon/.ryven/saves/basics.json\nWelcome to the Ryven Console! Your project has been loaded.\nYou can access the ryvencore session by typing `session`.\nFor more information, visit https://leon-thomm.github.io/ryvencore/\n\n>>> f = session.flows[0]\n>>> ctr_var_result_node = f.nodes[2]\n>>> ctr_set_var_node = f.nodes[8]\n>>> ctr_var_result_node.val\n3738\n>>> ctr_set_var_node.update(0)\n>>> ctr_var_result_node.val\n3739\n```\n\n</details>\n\n## Editor Usage\n<details>\n<summary>quick start guide</summary>\n\n* open Ryven by running `ryven` from the command line\n* you should see the startup dialog\n* create a new project\n* import some example nodes\n  * `File -> Import Example Nodes` and select `<installation_dir>/example_nodes/std/nodes.py`\n* you should now see a list of nodes on the left\n* drag and drop them into the scene and connect them with your mouse\n* everything is being executed at runtime; try this:\n  * drag two `val` nodes into the scene\n  * wire them together with a `+` node\n  * display the result in a `result` node \n  * now replace one of them with a slider node generating real numbers\n* by right-clicking, you can also get an interactive nodes list preview inside the scene\n* you can pan around also with the right mouse button (hold and drag)\n* and zoom via `ctrl + scroll`\n\n</details>\n\n## Developing Nodes\n\n<details>\n<summary>quick start into to developing node packages</summary>\n\nA Ryven nodes package is simply a typical Python package which contains at least a `nodes.py` file, and calls the Ryven node API to expose node definitions.\n\nNavigate to `~/.ryven/nodes/` and create a sub-directory of the following structure\n\n```\n~/.ryven/nodes\n└── your_nodes_pkg_1\n    ├── __init__.py\n    ├── nodes.py\n    └── gui.py\n```\n\nwith the following contents:\n\n`nodes.py`:\n\n```python\nfrom ryven.node_env import *\n\n# your node definitions go here\n\nexport_nodes([\n    # list your node classes here\n])\n\n\n@on_gui_load\ndef load_gui():\n    # import gui sources here only\n    from . import gui\n```\n\nand `gui.py`:\n\n```python\nfrom ryven.gui_env import *\n\nfrom . import nodes\n\n# your node gui definitions go here\n```\n\nYou can now start defining your own nodes. Let's define two basic nodes. One which generates random numbers...\n\n```python\nfrom random import random\n\nclass RandNode(Node):\n    \"\"\"Generates scaled random float values\"\"\"\n\n    title = 'Rand'\n    tags = ['random', 'numbers']\n    init_inputs = [NodeInputType()]\n    init_outputs = [NodeOutputType()]\n\n    def update_event(self, inp=-1):\n        self.set_output_val(0, \n            Data(random() * self.input(0).payload)\n        )\n```\n\n...and another one which prints them\n\n```python\nclass PrintNode(Node):\n    title = 'Print'\n    init_inputs = [NodeInputType()]\n\n    def update_event(self, inp=-1):\n        print(self.input(0))\n```\n\nand expose them to Ryven\n\n```python\nexport_nodes([\n    RandNode,\n    PrintNode,\n])\n```\n\nThat's it! You can import your nodes package in Ryven (`File -> Import Nodes`), place the nodes in the graph, and wire them up. Add a `val` node and connect it to the `Rand` node, to feed its input with data. If you type a number into the widget of the `val` node and hit enter, it will send the number to the `Rand` node, which will send a scaled random number to the `Print` node, which will print it to the standard output.\n\nNotice that the standard output is by default the in-editor console, which you can access at the very bottom of the editor window (drag the blue handle up to make it visible).\n\n### Adding GUI\n\nYou can now spice up your nodes with some GUI. Ryven runs on Qt, using either PySide2 or PySide6 (through the [qtpy](https://github.com/spyder-ide/qtpy) library). You can configure the GUI of your nodes in a separate file, and add custom Qt widgets to your nodes. Make sure to always clearly separate the node logic from the GUI components. One of the central features of Ryven is to run projects headless (on ryvencore) without any GUI dependencies. In order for this to work, your `nodes.py` files should never depend on Qt directly. Instead, you can attach custom GUI to your nodes from the GUI files as shown below.\n\nLet's give them some color and add a slider to the `Rand` node, in `gui.py`:\n\n```python\nfrom qtpy.QtWidgets import QSlider\nfrom qtpy.QtCore import Qt\n\nfrom ryven.gui_env import *\n\nfrom . import nodes\n\n\nclass RandSliderWidget(NodeInputWidget, QSlider):\n    \"\"\"a standard Qt slider widget, which updates the node\n    input it is attached to, every time the slider value changes\"\"\"\n    \n    def __init__(self, params):\n        NodeInputWidget.__init__(self, params)\n        QSlider.__init__(self)\n        \n        self.setOrientation(Qt.Horizontal)\n        self.setMinimumWidth(100)\n        self.setMinimum(0)\n        self.setMaximum(100)\n        self.setValue(50)\n        self.valueChanged.connect(self.value_changed)\n    \n    def value_changed(self, val):\n        # updates the node input this widget is attached to\n        self.update_node_input(Data(val))\n    \n    def get_state(self) -> dict:\n        # return the state of the widget\n        return {'value': self.value()}\n    \n    def set_state(self, state: dict):\n        # set the state of the widget\n        self.setValue(state['value'])\n    \n\n@node_gui(nodes.RandNode)\nclass RandNodeGui(NodeGUI):\n    color = '#fcba03'\n    \n    # register the input widget class\n    input_widget_classes = { 'slider': RandSliderWidget }\n    \n    # attach the slider widget to the first node input\n    # display it _below_ the input pin\n    init_input_widgets = {\n        0: {'name': 'slider', 'pos': 'below'}\n    }\n```\n\nand this is it! Ryven will now register `RandNodeGui` as \"GUI class\" of the `RandNode` class, which serves as a container for all UI things. Your can add custom primary (\"main\") widgets to your nodes, input widgets, and further customize the look of the nodes.\n\nThe value provided by an input widget (e.g. `self.update_node_input(val)` above) will be returned in the node, when calling `input()` (e.g. `self.input(0)` in the `RandNode`), but only when the corresponding input is _not connected_. Otherwise, the value of the connected output will be returned.\n\n</details>\n\nPlease find further resources on the GitHub wiki page in this repository.\n\n## Features\n\n- **headless mode** to run projects without GUI dependencies at high performance\n- **sophisticated nodes system** allowing for stateful nodes and widgets\n- **cross-platform**; running anywhere where Qt runs (for GUI), or simply Python (headless)\n- **rendering flow images** into PNGs\n- built-in **exec flow support** (like [UE BluePrints](https://docs.unrealengine.com/5.0/en-US/blueprints-visual-scripting-in-unreal-engine/)) unlike most other node editors\n- **custom Qt widgets support**\n- various **themes**, including light\n- **right-click operations system for nodes**\n- **variables system** with observer mechanism, to build nodes that automatically adapt to change of data\n- basic Python **logging support**\n<!-- - primitive, very experimental **stylus support** for adding handwritten notes on touch devices -->\n\n## License\n\n* This repository is licensed under the MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\n* The underlying library ryvencore is licensed under LGPL-2.1 (LICENSE-LGPL-2.1 or https://www.gnu.org/licenses/lgpl-2.1.html)\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you shall be licensed as above, without any additional terms or conditions.\n\n## Credits\n\nContributions are highly appreciated. This project does not exist without the open-source community. I want to particularly thank the people listed in the `CREDITS.md` file."
        },
        {
          "name": "debug.py",
          "type": "blob",
          "size": 0.7060546875,
          "content": "#!/usr/bin/env python3\n\n# manually debug ryven; ensure that the following packages are \n# not installed in the current environment:\n#   * ryven\n#   * ryvencore-qt'\n#   * ryvencore\n\nRYVEN_PATH = './ryven-editor'\nRYVEN_QT_PATH = './ryvencore-qt'\nRYVENCORE_PATH = '../ryvencore'\n\nimport sys\n\nsys.path.insert(0, RYVEN_PATH)\nsys.path.insert(0, RYVEN_QT_PATH)\nsys.path.insert(0, RYVENCORE_PATH)\n\nfrom ryven import run_ryven\n\nif __name__ == '__main__':\n    run_ryven(\n        f\"{RYVEN_PATH}/ryven/example_projects/matrices.json\",\n        nodes=[\n            f\"{RYVEN_PATH}/ryven/example_nodes/examples\",\n            f\"{RYVEN_PATH}/ryven/example_nodes/linalg\",\n        ],\n        qt_api='pyside6',\n        show_dialog=False,\n    )\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mypy.ini",
          "type": "blob",
          "size": 0.529296875,
          "content": "# mypy configuration, type-checking both the Ryven editor, and the\n# ryvencore-qt library. ryvencore must be installed for this to work.\n# Simply run `mypy` in the Ryven root directory to check the code.\n\n[mypy]\nwarn_return_any = True\nwarn_unused_configs = True\nwarn_unused_ignores = True\nfiles = ryven-editor/ryven, ryvencore-qt/ryvencore_qt\n\n[mypy-ryven.*]\ncheck_untyped_defs = False\n\n[mypy-ryven.example_nodes.*]\nignore_errors = True\n\n[mypy-ryven.main.packages.built_in.*]\nignore_errors = True\n\n[mypy-ryven.gui.uic.*]\nignore_errors = True\n"
        },
        {
          "name": "ryven-editor",
          "type": "tree",
          "content": null
        },
        {
          "name": "ryvencore-qt",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}