{
  "metadata": {
    "timestamp": 1736559784193,
    "page": 505,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TensorSpeech/TensorFlowTTS",
      "stars": 3873,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03125,
          "content": "*.ipynb linguist-language=Python"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.458984375,
          "content": " \n# general\n*~\n*.pyc\n\\#*\\#\n.\\#*\n*DS_Store\nout.txt\nTensorFlowTTS.egg-info/\ndoc/_build\nslurm-*.out\ntmp*\n.eggs/\n.hypothesis/\n.idea\n.backup/\n.pytest_cache/\n__pycache__/\n.coverage*\ncoverage.xml*\n.vscode*\n.nfs*\n.ipynb_checkpoints\nljspeech\n*.h5\n*.npy\n./*.wav\n!docker-compose.yml\n/Pipfile\n/Pipfile.lock\n/datasets\n/examples/tacotron2/exp/\n/temp/\nLibriTTS/\ndataset/\nmfa/\nkss/\nbaker/\nlibritts/\ndump_baker/\ndump_ljspeech/\ndump_kss/\ndump_libritts/\n/notebooks/test_saved/\nbuild/\ndist/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08984375,
          "content": "                                Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.80078125,
          "content": "<h2 align=\"center\">\n<p> :yum: TensorFlowTTS\n<p align=\"center\">\n    <a href=\"https://github.com/tensorspeech/TensorFlowTTS/actions\">\n        <img alt=\"Build\" src=\"https://github.com/tensorspeech/TensorFlowTTS/workflows/CI/badge.svg?branch=master\">\n    </a>\n    <a href=\"https://github.com/tensorspeech/TensorFlowTTS/blob/master/LICENSE\">\n        <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/tensorspeech/TensorflowTTS?color=red\">\n    </a>\n    <a href=\"https://colab.research.google.com/drive/1akxtrLZHKuMiQup00tzO2olCaN-y3KiD?usp=sharing\">\n        <img alt=\"Colab\" src=\"https://colab.research.google.com/assets/colab-badge.svg\">\n    </a>\n</p>\n</h2>\n<h2 align=\"center\">\n<p>Real-Time State-of-the-art Speech Synthesis for Tensorflow 2\n</h2>\n\n:zany_face: TensorFlowTTS provides real-time state-of-the-art speech synthesis architectures such as Tacotron-2, Melgan, Multiband-Melgan, FastSpeech, FastSpeech2 based-on TensorFlow 2. With Tensorflow 2, we can speed-up training/inference progress, optimizer further by using [fake-quantize aware](https://www.tensorflow.org/model_optimization/guide/quantization/training_comprehensive_guide) and [pruning](https://www.tensorflow.org/model_optimization/guide/pruning/pruning_with_keras), make TTS models can be run faster than real-time and be able to deploy on mobile devices or embedded systems.\n\n## What's new\n- 2021/08/18 (**NEW!**) Integrated to [Huggingface Spaces](https://huggingface.co/spaces) with [Gradio](https://github.com/gradio-app/gradio). See [Gradio Web Demo](https://huggingface.co/spaces/akhaliq/TensorFlowTTS).\n- 2021/08/12 (**NEW!**) Support French TTS (Tacotron2, Multiband MelGAN). Pls see the [colab](https://colab.research.google.com/drive/1jd3u46g-fGQw0rre8fIwWM9heJvrV1c0?usp=sharing). Many Thanks [Samuel Delalez](https://github.com/samuel-lunii)\n- 2021/06/01 Integrated with [Huggingface Hub](https://huggingface.co/tensorspeech). See the [PR](https://github.com/TensorSpeech/TensorFlowTTS/pull/555). Thanks [patrickvonplaten](https://github.com/patrickvonplaten) and [osanseviero](https://github.com/osanseviero)\n- 2021/03/18  Support IOS for FastSpeech2 and MB MelGAN. Thanks [kewlbear](https://github.com/kewlbear). See [here](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/examples/ios)\n- 2021/01/18 Support TFLite C++ inference. Thanks [luan78zaoha](https://github.com/luan78zaoha). See [here](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/examples/cpptflite)\n- 2020/12/02 Support German TTS with [Thorsten dataset](https://github.com/thorstenMueller/deep-learning-german-tts). See the [Colab](https://colab.research.google.com/drive/1W0nSFpsz32M0OcIkY9uMOiGrLTPKVhTy?usp=sharing). Thanks [thorstenMueller](https://github.com/thorstenMueller) and [monatis](https://github.com/monatis)\n- 2020/11/24 Add HiFi-GAN vocoder. See [here](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/examples/hifigan)\n- 2020/11/19 Add Multi-GPU gradient accumulator. See [here](https://github.com/TensorSpeech/TensorFlowTTS/pull/377)\n- 2020/08/23 Add Parallel WaveGAN tensorflow implementation. See [here](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/examples/parallel_wavegan)\n- 2020/08/20 Add C++ inference code. Thank [@ZDisket](https://github.com/ZDisket). See [here](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/examples/cppwin)\n- 2020/08/18 Update [new base processor](https://github.com/TensorSpeech/TensorFlowTTS/blob/master/tensorflow_tts/processor/base_processor.py). Add [AutoProcessor](https://github.com/TensorSpeech/TensorFlowTTS/blob/master/tensorflow_tts/inference/auto_processor.py) and [pretrained processor](https://github.com/TensorSpeech/TensorFlowTTS/blob/master/tensorflow_tts/processor/pretrained/) json file\n- 2020/08/14 Support Chinese TTS. Pls see the [colab](https://colab.research.google.com/drive/1YpSHRBRPBI7cnTkQn1UcVTWEQVbsUm1S?usp=sharing). Thank [@azraelkuan](https://github.com/azraelkuan)\n- 2020/08/05 Support Korean TTS. Pls see the [colab](https://colab.research.google.com/drive/1ybWwOS5tipgPFttNulp77P6DAB5MtiuN?usp=sharing). Thank [@crux153](https://github.com/crux153)\n- 2020/07/17 Support MultiGPU for all Trainer\n- 2020/07/05 Support Convert Tacotron-2, FastSpeech to Tflite. Pls see the [colab](https://colab.research.google.com/drive/1HudLLpT9CQdh2k04c06bHUwLubhGTWxA?usp=sharing). Thank @jaeyoo from the TFlite team for his support\n- 2020/06/20 [FastSpeech2](https://arxiv.org/abs/2006.04558) implementation with Tensorflow is supported.\n- 2020/06/07 [Multi-band MelGAN (MB MelGAN)](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/multiband_melgan/) implementation with Tensorflow is supported\n\n\n## Features\n- High performance on Speech Synthesis.\n- Be able to fine-tune on other languages.\n- Fast, Scalable, and Reliable.\n- Suitable for deployment.\n- Easy to implement a new model, based-on abstract class.\n- Mixed precision to speed-up training if possible.\n- Support Single/Multi GPU gradient Accumulate.\n- Support both Single/Multi GPU in base trainer class.\n- TFlite conversion for all supported models.\n- Android example.\n- Support many languages (currently, we support Chinese, Korean, English, French and German)\n- Support C++ inference.\n- Support Convert weight for some models from PyTorch to TensorFlow to accelerate speed.\n\n## Requirements\nThis repository is tested on Ubuntu 18.04 with:\n\n- Python 3.7+\n- Cuda 10.1\n- CuDNN 7.6.5\n- Tensorflow 2.2/2.3/2.4/2.5/2.6\n- [Tensorflow Addons](https://github.com/tensorflow/addons) >= 0.10.0\n\nDifferent Tensorflow version should be working but not tested yet. This repo will try to work with the latest stable TensorFlow version. **We recommend you install TensorFlow 2.6.0 to training in case you want to use MultiGPU.**\n\n## Installation\n### With pip\n```bash\n$ pip install TensorFlowTTS\n```\n### From source\nExamples are included in the repository but are not shipped with the framework. Therefore, to run the latest version of examples, you need to install the source below.\n```bash\n$ git clone https://github.com/TensorSpeech/TensorFlowTTS.git\n$ cd TensorFlowTTS\n$ pip install .\n```\nIf you want to upgrade the repository and its dependencies:\n```bash\n$ git pull\n$ pip install --upgrade .\n```\n\n# Supported Model architectures\nTensorFlowTTS currently  provides the following architectures:\n\n1. **MelGAN** released with the paper [MelGAN: Generative Adversarial Networks for Conditional Waveform Synthesis](https://arxiv.org/abs/1910.06711) by Kundan Kumar, Rithesh Kumar, Thibault de Boissiere, Lucas Gestin, Wei Zhen Teoh, Jose Sotelo, Alexandre de Brebisson, Yoshua Bengio, Aaron Courville.\n2. **Tacotron-2** released with the paper [Natural TTS Synthesis by Conditioning WaveNet on Mel Spectrogram Predictions](https://arxiv.org/abs/1712.05884) by Jonathan Shen, Ruoming Pang, Ron J. Weiss, Mike Schuster, Navdeep Jaitly, Zongheng Yang, Zhifeng Chen, Yu Zhang, Yuxuan Wang, RJ Skerry-Ryan, Rif A. Saurous, Yannis Agiomyrgiannakis, Yonghui Wu.\n3. **FastSpeech** released with the paper [FastSpeech: Fast, Robust, and Controllable Text to Speech](https://arxiv.org/abs/1905.09263) by Yi Ren, Yangjun Ruan, Xu Tan, Tao Qin, Sheng Zhao, Zhou Zhao, Tie-Yan Liu.\n4. **Multi-band MelGAN** released with the paper [Multi-band MelGAN: Faster Waveform Generation for High-Quality Text-to-Speech](https://arxiv.org/abs/2005.05106) by Geng Yang, Shan Yang, Kai Liu, Peng Fang, Wei Chen, Lei Xie.\n5. **FastSpeech2** released with the paper [FastSpeech 2: Fast and High-Quality End-to-End Text to Speech](https://arxiv.org/abs/2006.04558) by Yi Ren, Chenxu Hu, Xu Tan, Tao Qin, Sheng Zhao, Zhou Zhao, Tie-Yan Liu.\n6. **Parallel WaveGAN** released with the paper [Parallel WaveGAN: A fast waveform generation model based on generative adversarial networks with multi-resolution spectrogram](https://arxiv.org/abs/1910.11480) by Ryuichi Yamamoto, Eunwoo Song, Jae-Min Kim.\n7. **HiFi-GAN** released with the paper [HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis](https://arxiv.org/abs/2010.05646) by Jungil Kong, Jaehyeon Kim, Jaekyoung Bae.\n\nWe are also implementing some techniques to improve quality and convergence speed from the following papers:\n\n2. **Guided Attention Loss** released with the paper [Efficiently Trainable Text-to-Speech System Based on Deep Convolutional Networks with Guided Attention\n](https://arxiv.org/abs/1710.08969) by Hideyuki Tachibana, Katsuya Uenoyama, Shunsuke Aihara.\n\n\n# Audio Samples\nHere in an audio samples on valid set. [tacotron-2](https://drive.google.com/open?id=1kaPXRdLg9gZrll9KtvH3-feOBMM8sn3_), [fastspeech](https://drive.google.com/open?id=1f69ujszFeGnIy7PMwc8AkUckhIaT2OD0), [melgan](https://drive.google.com/open?id=1mBwGVchwtNkgFsURl7g4nMiqx4gquAC2), [melgan.stft](https://drive.google.com/open?id=1xUkDjbciupEkM3N4obiJAYySTo6J9z6b), [fastspeech2](https://drive.google.com/drive/u/1/folders/1NG7oOfNuXSh7WyAoM1hI8P5BxDALY_mU), [multiband_melgan](https://drive.google.com/drive/folders/1DCV3sa6VTyoJzZmKATYvYVDUAFXlQ_Zp)\n\n# Tutorial End-to-End\n\n## Prepare Dataset\n\nPrepare a dataset in the following format:\n```\n|- [NAME_DATASET]/\n|   |- metadata.csv\n|   |- wavs/\n|       |- file1.wav\n|       |- ...\n```\n\nWhere `metadata.csv` has the following format: `id|transcription`. This is a ljspeech-like format; you can ignore preprocessing steps if you have other format datasets.\n\nNote that `NAME_DATASET` should be `[ljspeech/kss/baker/libritts/synpaflex]` for example.\n\n## Preprocessing\n\nThe preprocessing has two steps:\n\n1. Preprocess audio features\n    - Convert characters to IDs\n    - Compute mel spectrograms\n    - Normalize mel spectrograms to [-1, 1] range\n    - Split the dataset into train and validation\n    - Compute the mean and standard deviation of multiple features from the **training** split\n2. Standardize mel spectrogram based on computed statistics\n\nTo reproduce the steps above:\n```\ntensorflow-tts-preprocess --rootdir ./[ljspeech/kss/baker/libritts/thorsten/synpaflex] --outdir ./dump_[ljspeech/kss/baker/libritts/thorsten/synpaflex] --config preprocess/[ljspeech/kss/baker/thorsten/synpaflex]_preprocess.yaml --dataset [ljspeech/kss/baker/libritts/thorsten/synpaflex]\ntensorflow-tts-normalize --rootdir ./dump_[ljspeech/kss/baker/libritts/thorsten/synpaflex] --outdir ./dump_[ljspeech/kss/baker/libritts/thorsten/synpaflex] --config preprocess/[ljspeech/kss/baker/libritts/thorsten/synpaflex]_preprocess.yaml --dataset [ljspeech/kss/baker/libritts/thorsten/synpaflex]\n```\n\nRight now we only support [`ljspeech`](https://keithito.com/LJ-Speech-Dataset/), [`kss`](https://www.kaggle.com/bryanpark/korean-single-speaker-speech-dataset), [`baker`](https://weixinxcxdb.oss-cn-beijing.aliyuncs.com/gwYinPinKu/BZNSYP.rar), [`libritts`](http://www.openslr.org/60/), [`thorsten`](https://github.com/thorstenMueller/deep-learning-german-tts) and\n[`synpaflex`](https://www.ortolang.fr/market/corpora/synpaflex-corpus/) for dataset argument. In the future, we intend to support more datasets.\n\n**Note**: To run `libritts` preprocessing, please first read the instruction in [examples/fastspeech2_libritts](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/examples/fastspeech2_libritts). We need to reformat it first before run preprocessing.\n\n**Note**: To run `synpaflex` preprocessing, please first run the notebook [notebooks/prepare_synpaflex.ipynb](https://github.com/TensorSpeech/TensorFlowTTS/tree/master/notebooks/prepare_synpaflex.ipynb). We need to reformat it first before run preprocessing.\n\nAfter preprocessing, the structure of the project folder should be:\n```\n|- [NAME_DATASET]/\n|   |- metadata.csv\n|   |- wav/\n|       |- file1.wav\n|       |- ...\n|- dump_[ljspeech/kss/baker/libritts/thorsten]/\n|   |- train/\n|       |- ids/\n|           |- LJ001-0001-ids.npy\n|           |- ...\n|       |- raw-feats/\n|           |- LJ001-0001-raw-feats.npy\n|           |- ...\n|       |- raw-f0/\n|           |- LJ001-0001-raw-f0.npy\n|           |- ...\n|       |- raw-energies/\n|           |- LJ001-0001-raw-energy.npy\n|           |- ...\n|       |- norm-feats/\n|           |- LJ001-0001-norm-feats.npy\n|           |- ...\n|       |- wavs/\n|           |- LJ001-0001-wave.npy\n|           |- ...\n|   |- valid/\n|       |- ids/\n|           |- LJ001-0009-ids.npy\n|           |- ...\n|       |- raw-feats/\n|           |- LJ001-0009-raw-feats.npy\n|           |- ...\n|       |- raw-f0/\n|           |- LJ001-0001-raw-f0.npy\n|           |- ...\n|       |- raw-energies/\n|           |- LJ001-0001-raw-energy.npy\n|           |- ...\n|       |- norm-feats/\n|           |- LJ001-0009-norm-feats.npy\n|           |- ...\n|       |- wavs/\n|           |- LJ001-0009-wave.npy\n|           |- ...\n|   |- stats.npy\n|   |- stats_f0.npy\n|   |- stats_energy.npy\n|   |- train_utt_ids.npy\n|   |- valid_utt_ids.npy\n|- examples/\n|   |- melgan/\n|   |- fastspeech/\n|   |- tacotron2/\n|   ...\n```\n\n- `stats.npy` contains the mean and std from the training split mel spectrograms\n- `stats_energy.npy` contains the mean and std of energy values from the training split\n- `stats_f0.npy` contains the mean and std of F0 values in the training split\n- `train_utt_ids.npy` / `valid_utt_ids.npy` contains training and validation utterances IDs respectively\n\nWe use suffix (`ids`, `raw-feats`, `raw-energy`, `raw-f0`, `norm-feats`, and `wave`) for each input type.\n\n\n**IMPORTANT NOTES**:\n- This preprocessing step is based on [ESPnet](https://github.com/espnet/espnet) so you can combine all models here with other models from ESPnet repository.\n- Regardless of how your dataset is formatted, the final structure of the `dump` folder **SHOULD** follow the above structure to be able to use the training script, or you can modify it by yourself 😄.\n\n## Training models\n\nTo know how to train model from scratch or fine-tune with other datasets/languages, please see detail at example directory.\n\n- For Tacotron-2 tutorial, pls see [examples/tacotron2](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/tacotron2)\n- For FastSpeech tutorial, pls see [examples/fastspeech](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/fastspeech)\n- For FastSpeech2 tutorial, pls see [examples/fastspeech2](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/fastspeech2)\n- For FastSpeech2 + MFA tutorial, pls see [examples/fastspeech2_libritts](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/fastspeech2_libritts)\n- For MelGAN tutorial, pls see [examples/melgan](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/melgan)\n- For MelGAN + STFT Loss tutorial, pls see [examples/melgan.stft](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/melgan.stft)\n- For Multiband-MelGAN tutorial, pls see [examples/multiband_melgan](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/multiband_melgan)\n- For Parallel WaveGAN tutorial, pls see [examples/parallel_wavegan](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/parallel_wavegan)\n- For Multiband-MelGAN Generator + HiFi-GAN tutorial, pls see [examples/multiband_melgan_hf](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/multiband_melgan_hf)\n- For HiFi-GAN tutorial, pls see [examples/hifigan](https://github.com/tensorspeech/TensorFlowTTS/tree/master/examples/hifigan)\n# Abstract Class Explaination\n\n## Abstract DataLoader Tensorflow-based dataset\n\nA detail implementation of abstract dataset class from [tensorflow_tts/dataset/abstract_dataset](https://github.com/tensorspeech/TensorFlowTTS/blob/master/tensorflow_tts/datasets/abstract_dataset.py). There are some functions you need overide and understand:\n\n1. **get_args**: This function return argumentation for **generator** class, normally is utt_ids.\n2. **generator**: This function have an inputs from **get_args** function and return a inputs for models. **Note that we return a dictionary for all generator functions with the keys that exactly match with the model's parameters because base_trainer will use model(\\*\\*batch) to do forward step.**\n3. **get_output_dtypes**: This function need return dtypes for each element from **generator** function.\n4. **get_len_dataset**: Return len of datasets, normaly is len(utt_ids).\n\n**IMPORTANT NOTES**:\n\n- A pipeline of creating dataset should be: cache -> shuffle -> map_fn -> get_batch -> prefetch.\n- If you do shuffle before cache, the dataset won't shuffle when it re-iterate over datasets.\n- You should apply map_fn to make each element return from **generator** function have the same length before getting batch and feed it into a model.\n\nSome examples to use this **abstract_dataset** are [tacotron_dataset.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/tacotron2/tacotron_dataset.py), [fastspeech_dataset.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/fastspeech/fastspeech_dataset.py), [melgan_dataset.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/melgan/audio_mel_dataset.py), [fastspeech2_dataset.py](https://github.com/TensorSpeech/TensorFlowTTS/blob/master/examples/fastspeech2/fastspeech2_dataset.py)\n\n\n## Abstract Trainer Class\n\nA detail implementation of base_trainer from [tensorflow_tts/trainer/base_trainer.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/tensorflow_tts/trainers/base_trainer.py). It include [Seq2SeqBasedTrainer](https://github.com/tensorspeech/TensorFlowTTS/blob/master/tensorflow_tts/trainers/base_trainer.py#L265) and [GanBasedTrainer](https://github.com/tensorspeech/TensorFlowTTS/blob/master/tensorflow_tts/trainers/base_trainer.py#L149) inherit from [BasedTrainer](https://github.com/tensorspeech/TensorFlowTTS/blob/master/tensorflow_tts/trainers/base_trainer.py#L16). All trainer support both single/multi GPU. There a some functions you **MUST** overide when implement new_trainer:\n\n- **compile**: This function aim to define a models, and losses.\n- **generate_and_save_intermediate_result**: This function will save intermediate result such as: plot alignment, save audio generated, plot mel-spectrogram ...\n- **compute_per_example_losses**: This function will compute per_example_loss for model, note that all element of the loss **MUST** has shape [batch_size].\n\nAll models on this repo are trained based-on **GanBasedTrainer** (see [train_melgan.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/melgan/train_melgan.py), [train_melgan_stft.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/melgan.stft/train_melgan_stft.py), [train_multiband_melgan.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/multiband_melgan/train_multiband_melgan.py)) and **Seq2SeqBasedTrainer** (see [train_tacotron2.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/tacotron2/train_tacotron2.py), [train_fastspeech.py](https://github.com/tensorspeech/TensorFlowTTS/blob/master/examples/fastspeech/train_fastspeech.py)).\n\n# End-to-End Examples\nYou can know how to inference each model at [notebooks](https://github.com/tensorspeech/TensorFlowTTS/tree/master/notebooks) or see a [colab](https://colab.research.google.com/drive/1akxtrLZHKuMiQup00tzO2olCaN-y3KiD?usp=sharing) (for English), [colab](https://colab.research.google.com/drive/1ybWwOS5tipgPFttNulp77P6DAB5MtiuN?usp=sharing) (for Korean), [colab](https://colab.research.google.com/drive/1YpSHRBRPBI7cnTkQn1UcVTWEQVbsUm1S?usp=sharing) (for Chinese), [colab](https://colab.research.google.com/drive/1jd3u46g-fGQw0rre8fIwWM9heJvrV1c0?usp=sharing) (for French), [colab](https://colab.research.google.com/drive/1W0nSFpsz32M0OcIkY9uMOiGrLTPKVhTy?usp=sharing) (for German). Here is an example code for end2end inference with fastspeech2 and multi-band melgan. We uploaded all our pretrained in [HuggingFace Hub](https://huggingface.co/tensorspeech).\n\n```python\nimport numpy as np\nimport soundfile as sf\nimport yaml\n\nimport tensorflow as tf\n\nfrom tensorflow_tts.inference import TFAutoModel\nfrom tensorflow_tts.inference import AutoProcessor\n\n# initialize fastspeech2 model.\nfastspeech2 = TFAutoModel.from_pretrained(\"tensorspeech/tts-fastspeech2-ljspeech-en\")\n\n\n# initialize mb_melgan model\nmb_melgan = TFAutoModel.from_pretrained(\"tensorspeech/tts-mb_melgan-ljspeech-en\")\n\n\n# inference\nprocessor = AutoProcessor.from_pretrained(\"tensorspeech/tts-fastspeech2-ljspeech-en\")\n\ninput_ids = processor.text_to_sequence(\"Recent research at Harvard has shown meditating for as little as 8 weeks, can actually increase the grey matter in the parts of the brain responsible for emotional regulation, and learning.\")\n# fastspeech inference\n\nmel_before, mel_after, duration_outputs, _, _ = fastspeech2.inference(\n    input_ids=tf.expand_dims(tf.convert_to_tensor(input_ids, dtype=tf.int32), 0),\n    speaker_ids=tf.convert_to_tensor([0], dtype=tf.int32),\n    speed_ratios=tf.convert_to_tensor([1.0], dtype=tf.float32),\n    f0_ratios =tf.convert_to_tensor([1.0], dtype=tf.float32),\n    energy_ratios =tf.convert_to_tensor([1.0], dtype=tf.float32),\n)\n\n# melgan inference\naudio_before = mb_melgan.inference(mel_before)[0, :, 0]\naudio_after = mb_melgan.inference(mel_after)[0, :, 0]\n\n# save to file\nsf.write('./audio_before.wav', audio_before, 22050, \"PCM_16\")\nsf.write('./audio_after.wav', audio_after, 22050, \"PCM_16\")\n```\n\n# Contact\n- [Minh Nguyen Quan Anh](https://github.com/tensorspeech): nguyenquananhminh@gmail.com\n- [erogol](https://github.com/erogol): erengolge@gmail.com\n- [Kuan Chen](https://github.com/azraelkuan): azraelkuan@gmail.com\n- [Dawid Kobus](https://github.com/machineko): machineko@protonmail.com\n- [Takuya Ebata](https://github.com/MokkeMeguru): meguru.mokke@gmail.com\n- [Trinh Le Quang](https://github.com/l4zyf9x): trinhle.cse@gmail.com\n- [Yunchao He](https://github.com/candlewill): yunchaohe@gmail.com\n- [Alejandro Miguel Velasquez](https://github.com/ZDisket): xml506ok@gmail.com\n\n# License\nAll models here are licensed under the [Apache 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\n# Acknowledgement\nWe want to thank [Tomoki Hayashi](https://github.com/kan-bayashi), who discussed with us much about Melgan, Multi-band melgan, Fastspeech, and Tacotron. This framework based-on his great open-source [ParallelWaveGan](https://github.com/kan-bayashi/ParallelWaveGAN) project.\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1875,
          "content": "version: '2.6'\nservices:\n  tensorflowtts:\n    build: .\n    volumes:\n      - .:/workspace\n    runtime: nvidia\n    tty: true\n    command: /bin/bash\n    environment:\n      - CUDA_VISIBLE_DEVICES\n"
        },
        {
          "name": "dockerfile",
          "type": "blob",
          "size": 0.3427734375,
          "content": "FROM tensorflow/tensorflow:2.6.0-gpu\nRUN apt-get update\nRUN apt-get install -y zsh tmux wget git libsndfile1\nRUN pip install ipython && \\\n    pip install git+https://github.com/TensorSpeech/TensorflowTTS.git && \\\n    pip install git+https://github.com/repodiac/german_transliterate.git#egg=german_transliterate\nRUN mkdir /workspace\nWORKDIR /workspace\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "preprocess",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.193359375,
          "content": "[aliases]\ntest=pytest\n\n[tool:pytest]\naddopts = --verbose --durations=0\ntestpaths = test\n\n[flake8]\nignore = H102,W504,H238,D104,H306,H405,D205\n# 120 is a workaround, 79 is good\nmax-line-length = 120\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.125,
          "content": "\"\"\"Setup Tensorflow TTS libarary.\"\"\"\n\nimport os\nimport sys\nfrom distutils.version import LooseVersion\n\nimport pip\nfrom setuptools import find_packages, setup\n\nif LooseVersion(sys.version) < LooseVersion(\"3.6\"):\n    raise RuntimeError(\n        \"TensorFlow TTS requires python >= 3.6, \"\n        \"but your Python version is {}\".format(sys.version)\n    )\n\nif LooseVersion(pip.__version__) < LooseVersion(\"19\"):\n    raise RuntimeError(\n        \"pip>=19.0.0 is required, but your pip version is {}. \"\n        'Try again after \"pip install -U pip\"'.format(pip.__version__)\n    )\n\n# TODO(@dathudeptrai) update requirement if needed.\nrequirements = {\n    \"install\": [\n        \"tensorflow-gpu==2.7.0\",\n        \"tensorflow-addons>=0.10.0\",\n        \"setuptools>=38.5.1\",\n        \"huggingface_hub==0.0.8\",\n        \"librosa>=0.7.0\",\n        \"soundfile>=0.10.2\",\n        \"matplotlib>=3.1.0\",\n        \"PyYAML>=3.12\",\n        \"tqdm>=4.26.1\",\n        \"h5py>=2.10.0\",\n        \"unidecode>=1.1.1\",\n        \"inflect>=4.1.0\",\n        \"scikit-learn>=0.22.0\",\n        \"pyworld>=0.2.10\",\n        \"numba>=0.48\",  # Fix No module named \"numba.decorators\"\n        \"jamo>=0.4.1\",\n        \"pypinyin\",\n        \"g2pM\",\n        \"textgrid\",\n        \"click\",\n        \"g2p_en\",\n        \"dataclasses\",\n        \"pyopenjtalk\",\n    ],\n    \"setup\": [\"numpy\", \"pytest-runner\",],\n    \"test\": [\n        \"pytest>=3.3.0\",\n        \"hacking>=1.1.0\",\n    ],\n}\n\n# TODO(@dathudeptrai) update console_scripts.\nentry_points = {\n    \"console_scripts\": [\n        \"tensorflow-tts-preprocess=tensorflow_tts.bin.preprocess:preprocess\",\n        \"tensorflow-tts-compute-statistics=tensorflow_tts.bin.preprocess:compute_statistics\",\n        \"tensorflow-tts-normalize=tensorflow_tts.bin.preprocess:normalize\",\n    ]\n}\n\ninstall_requires = requirements[\"install\"]\nsetup_requires = requirements[\"setup\"]\ntests_require = requirements[\"test\"]\nextras_require = {\n    k: v for k, v in requirements.items() if k not in [\"install\", \"setup\"]\n}\n\ndirname = os.path.dirname(__file__)\nsetup(\n    name=\"TensorFlowTTS\",\n    version=\"0.0\",\n    url=\"https://github.com/tensorspeech/TensorFlowTTS\",\n    author=\"Minh Nguyen Quan Anh, Alejandro Miguel Velasquez, Dawid Kobus, Eren Gölge, Kuan Chen, Takuya Ebata, Trinh Le Quang, Yunchao He\",\n    author_email=\"nguyenquananhminh@gmail.com\",\n    description=\"TensorFlowTTS: Real-Time State-of-the-art Speech Synthesis for TensorFlow 2\",\n    long_description=open(os.path.join(dirname, \"README.md\"), encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    license=\"Apache-2.0\",\n    packages=find_packages(include=[\"tensorflow_tts*\"]),\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    tests_require=tests_require,\n    extras_require=extras_require,\n    entry_points=entry_points,\n    classifiers=[\n        \"Programming Language :: Python :: 3.6\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Intended Audience :: Science/Research\",\n        \"Operating System :: POSIX :: Linux\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n    ],\n)\n"
        },
        {
          "name": "tensorflow_tts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}