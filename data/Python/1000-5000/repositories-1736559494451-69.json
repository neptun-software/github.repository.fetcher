{
  "metadata": {
    "timestamp": 1736559494451,
    "page": 69,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lyst/lightfm",
      "stars": 4809,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0986328125,
          "content": "*.zip\n*.7z\n*.xml\nexamples/crossvalidated/*.7z\nexamples/crossvalidated/*.xml\nexamples/movielens/*.zip\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.328125,
          "content": "venv/\n*.pyc\n*.egg*\n*~\n*.zip\n*.so\nexamples/movielens/.ipynb_checkpoints/\nexamples/quickstart/.ipynb_checkpoints/\nexamples/stackexchange/.ipynb_checkpoints/\nbuild/\ndist/\nbench/\n*#*\n*.7z\n*.xml\ndoc/_build/*\nlightfm/_lightfm_fast_openmp.pyx\nlightfm/_lightfm_fast_no_openmp.pyx\n*.*-checkpoint\n\n# Editor specific\n.vscode/\n.idea/\n.devcontainer/"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.498046875,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n-   repo: \"https://github.com/psf/black\"\n    rev: \"22.1.0\"\n    hooks:\n    -   id: black\n-   repo: https://gitlab.com/pycqa/flake8\n    rev: \"4.0.1\"\n    hooks:\n    -   id: flake8\n        types: [file, python]\n        exclude: doc/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.173828125,
          "content": "os:\n  - osx\nbefore_install:\n  - python3 -m venv venv\n  - venv/bin/pip install -r test-requirements.txt\ninstall:\n  - venv/bin/pip install -e .\nscript: venv/bin/py.test -xv tests/\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.07421875,
          "content": "Oliver Grisel\nJong Wook Kim\nMaciej Kula\nPaolo Rais\nKent Shikama\nMice PÃ¡pai\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5244140625,
          "content": "FROM ubuntu:16.04\n\nRUN apt-get update\nRUN apt-get install -y libxml2 libxslt-dev wget bzip2 gcc\n\nRUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh && \\\n    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \\\n    /bin/bash ~/miniconda.sh -b -p /opt/conda && \\\n    rm ~/miniconda.sh\n\nENV PATH /opt/conda/bin:$PATH\n\nRUN conda install pytest jupyter scikit-learn\n\nENV PYTHONDONTWRITEBYTECODE 1\n\nADD . /home/lightfm/\nWORKDIR /home/\n\nRUN cd lightfm && pip install -e .\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.068359375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Lyst\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.1611328125,
          "content": ".PHONY: examples\nexamples:\n\tjupyter nbconvert --to rst examples/quickstart/quickstart.ipynb\n\tmv examples/quickstart/quickstart.rst doc/\n\tjupyter nbconvert --to rst examples/movielens/example.ipynb\n\tmv examples/movielens/example.rst doc/examples/movielens_implicit.rst\n\tjupyter nbconvert --to rst examples/movielens/learning_schedules.ipynb\n\tmv examples/movielens/learning_schedules.rst doc/examples/\n\tcp -r examples/movielens/learning_schedules_files doc/examples/\n\trm -rf examples/movielens/learning_schedules_files\n\tjupyter nbconvert --to rst examples/stackexchange/hybrid_crossvalidated.ipynb\n\tmv examples/stackexchange/hybrid_crossvalidated.rst doc/examples/\n\tjupyter nbconvert --to rst examples/movielens/warp_loss.ipynb\n\tmv examples/movielens/warp_loss.rst doc/examples/\n\tcp -r examples/movielens/warp_loss_files doc/examples/\n\trm -rf examples/movielens/warp_loss_files\n.PHONY: update-docs\nupdate-docs:\n\tpip install -e . \\\n\t&& cd doc && make html && cd .. \\\n\t&& git fetch origin gh-pages && git checkout gh-pages \\\n\t&& rm -rf ./docs/ \\\n\t&& mkdir ./docs/ \\\n\t&& cp -r ./doc/_build/html/* ./docs/ \\\n\t&& git add -A ./docs/* \\\n\t&& git commit -m 'Update docs.' && git push origin gh-pages\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5478515625,
          "content": "# LightFM\n\n![LightFM logo](lightfm.png)\n\n| Build status | |\n|---|---|\n| Linux |[![Circle CI](https://circleci.com/gh/lyst/lightfm.svg?style=svg)](https://circleci.com/gh/lyst/lightfm)|\n| OSX (OpenMP disabled)|[![Travis CI](https://travis-ci.org/lyst/lightfm.svg?branch=master)](https://travis-ci.org/lyst/lightfm)|\n| Windows (OpenMP disabled) |[![Appveyor](https://ci.appveyor.com/api/projects/status/6cqpqb6969i1h4p7/branch/master?svg=true)](https://ci.appveyor.com/project/maciejkula/lightfm/branch/master)|\n\n[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/lightfm-rec/Lobby) [![PyPI](https://img.shields.io/pypi/v/lightfm.svg)](https://pypi.python.org/pypi/lightfm/)\n[![Anaconda-Server Badge](https://anaconda.org/conda-forge/lightfm/badges/version.svg)](https://anaconda.org/conda-forge/lightfm)\n\nLightFM is a Python implementation of a number of popular recommendation algorithms for both implicit and explicit feedback, including efficient implementation of BPR and WARP ranking losses. It's easy to use, fast (via multithreaded model estimation), and produces high quality results.\n\nIt also makes it possible to incorporate both item and user metadata into the traditional matrix factorization algorithms. It represents each user and item as the sum of the latent representations of their features, thus allowing recommendations to generalise to new items (via item features) and to new users (via user features).\n\nFor more details, see the [Documentation](http://lyst.github.io/lightfm/docs/home.html).\n\nNeed help? Contact me via [email](mailto:lightfm@zoho.com), [Twitter](https://twitter.com/Maciej_Kula), or [Gitter](https://gitter.im/lightfm-rec/Lobby).\n\n## Installation\nInstall from `pip`:\n```\npip install lightfm\n```\nor Conda:\n```\nconda install -c conda-forge lightfm\n```\n\n## Quickstart\nFitting an implicit feedback model on the MovieLens 100k dataset is very easy:\n```python\nfrom lightfm import LightFM\nfrom lightfm.datasets import fetch_movielens\nfrom lightfm.evaluation import precision_at_k\n\n# Load the MovieLens 100k dataset. Only five\n# star ratings are treated as positive.\ndata = fetch_movielens(min_rating=5.0)\n\n# Instantiate and train the model\nmodel = LightFM(loss='warp')\nmodel.fit(data['train'], epochs=30, num_threads=2)\n\n# Evaluate the trained model\ntest_precision = precision_at_k(model, data['test'], k=5).mean()\n```\n\n## Articles and tutorials on using LightFM\n1. [Learning to Rank Sketchfab Models with LightFM](http://blog.ethanrosenthal.com/2016/11/07/implicit-mf-part-2/)\n2. [Metadata Embeddings for User and Item Cold-start Recommendations](http://building-babylon.net/2016/01/26/metadata-embeddings-for-user-and-item-cold-start-recommendations/)\n3. [Recommendation Systems - Learn Python for Data Science](https://www.youtube.com/watch?v=9gBC9R-msAk)\n4. [Using LightFM to Recommend Projects to Consultants](https://medium.com/product-at-catalant-technologies/using-lightfm-to-recommend-projects-to-consultants-44084df7321c#.gu887ky51)\n\n## How to cite\nPlease cite LightFM if it helps your research. You can use the following BibTeX entry:\n```\n@inproceedings{DBLP:conf/recsys/Kula15,\n  author    = {Maciej Kula},\n  editor    = {Toine Bogers and\n               Marijn Koolen},\n  title     = {Metadata Embeddings for User and Item Cold-start Recommendations},\n  booktitle = {Proceedings of the 2nd Workshop on New Trends on Content-Based Recommender\n               Systems co-located with 9th {ACM} Conference on Recommender Systems\n               (RecSys 2015), Vienna, Austria, September 16-20, 2015.},\n  series    = {{CEUR} Workshop Proceedings},\n  volume    = {1448},\n  pages     = {14--21},\n  publisher = {CEUR-WS.org},\n  year      = {2015},\n  url       = {http://ceur-ws.org/Vol-1448/paper4.pdf},\n}\n```\n\n## Development\nPull requests are welcome. To install for development:\n\n1. Clone the repository: `git clone git@github.com:lyst/lightfm.git`\n2. Setup a virtual environment: `cd lightfm && python3 -m venv venv && source ./venv/bin/activate`\n3. Install it for development using pip: `pip install -e . && pip install -r test-requirements.txt`\n4. You can run tests by running `./venv/bin/py.test tests`.\n5. LightFM uses [black](https://github.com/ambv/black) to enforce code formatting and flake8 for linting, see `lint-requirements.txt`.\n6. [Optional]: You can install pre-commit to locally enfore formatting and linting. Install with:\n    ```bash\n    pip install pre-commit\n    pre-commit install\n    ```\n\nWhen making changes to the `.pyx` extension files, you'll need to run `python setup.py cythonize` in order to produce the extension `.c` files before running `pip install -e .`.\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 4.7880859375,
          "content": "# Changelog\n\n## [1.17][2023-03-19]\n\n### Fixed\n\n- Re-Cythonized cython files to fix compilation errors with newer compilers.\n- Fixed `np.object` usage in tests.\n\n## [1.16][2020-11-27]\n\n### Addded\n- Set the `LIGHTFM_NO_CFLAGS` environment variable when building LightFM to prevent it from setting\n  `-ffast-math` or `-march=native` compiler flags.\n\n### Changed\n- `predict` now returns float32 predictions.\n\n## [1.15][2018-05-26]\n### Added\n- Added a check that there is no overlap between test and train in `predict_ranks` (thanks to [@artdgn](https://github.com/artdgn)).\n- Added dataset builder functionality.\n### Fixed\n- Fixed error message when item features have the wrong dimensions.\n- Predict now checks for overflow in inputs to predict.\n- WARP fitting is now numerically stable when there are very few items to\n  draw negative samples from (< max_sampled).\n\n## [1.14][2017-11-18]\n### Added\n- added additional input checks for non-normal inputs (NaNs, infinites) for features\n- added additional input checks for non-normal inputs (NaNs, infinites) for interactions\n- cross validation module with dataset splitting utilities\n### Changed\n- LightFM model now raises a ValueError (instead of assertion) when the number of supplied\n  features exceeds the number of estimated feature embeddings.\n- Warn and delete downloaded file when Movielens download is corrputed. This happens in the wild\n  cofuses users terribly.\n\n## [1.13][2017-05-20]\n### Added\n- added get_{user/item}_representations functions to facilitate extracting the latent representations out of the model.\n### Fixed\n- recall_at_k and precision_at_k now work correctly at k=1 (thanks to Zank Bennett).\n- Moved Movielens data to data release to prevent grouplens server flakiness from affecting users.\n- Fix segfault when trying to predict from a model that has not been fitted.\n\n## [1.12][2017-01-26]\n### Changed\n- Ranks are now computed pessimistically: when two items are tied, the positive item is assumed to have higher rank. This will lead to zero precision scores for models that predict all zeros, for example.\n- The model will raise a ValueError if, during fitting, any of the parameters become non-finite (NaN or +/- infinity).\n- Added mid-epoch regularization when a lot of regularization is used. This reduces the likelihood of numerical instability at high regularization rates.\n\n\n## [1.11][2016-12-26]\n### Changed\n- negative samples in BPR are now drawn from the empirical distributions of positives. This improves accuracy slightly on the Movielens 100k dataset.\n\n### Fixed\n- incorrect calculation of BPR loss (thanks to @TimonVS for reporting this).\n\n\n## [1.10][2016-11-25]\n### Added\n- added recall@k evaluation function\n### Fixed\n- added >=0.17.0 scipy depdendency to setup.py\n- fixed segfaults on when duplicate entries are present in input COO matrices (thanks to Florian\n  Wilhelm for the bug report).\n\n## [1.9][2016-05-25]\n### Fixed\n- fixed gradient accumulation in adagrad (the feature value is now correctly used when accumulating gradient).\n  Thanks to Benjamin Wilson for the bug report.\n- all interaction values greater than 0.0 are now treated as positives for ranking losses.\n### Added\n- max_sampled hyperparameter for WARP losses. This allows trading off accuracy for WARP training time: a smaller value\n  will mean less negative sampling and faster training when the model is near the optimum.\n- Added a sample_weight argument to fit and fit_partial functions. A high value will now increase the size of the SGD step taken for that interaction.\n- Added an evaluation module for more efficient evaluation of learning-to-rank models.\n- Added a random_state keyword argument to LightFM to allow repeatable model runs.\n### Changed\n- By default, an OpenMP-less version will be built on OSX. This allows much easier installation at the expense of\nperformance.\n- The default value of the max_sampled argument is now 10. This represents a decent default value that allows fast training.\n\n## [1.8][2016-01-14]\n### Changed\n- fix scipy missing from requirements in setup.py\n- remove dependency on glibc by including a translation of the musl rand_r implementation\n\n## [1.7][2015-10-14]\n### Changed\n- fixed bug where item momentum would be incorrectly used in adadelta training for user features (thanks to Jong Wook Kim @jongwook for the bug report).\n- user and item features are now floats (instead of ints), allowing fractional feature weights to be used when fitting models.\n\n## [1.6][2015-09-29]\n### Changed\n- when installing into an Anaconda distribution, drop -march=native compiler flag\n  due to assembler issues.\n- when installing on OSX, search macports and homebrew install location for gcc\n  version 5.x\n\n## [1.5][2015-09-24]\n### Changed\n- when installing on OSX, search macports install location for gcc\n\n## [1.4][2015-09-18]\n### Changed\n- input matrices automatically converted to correct dtype if necessary\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.1767578125,
          "content": "services:\n  lightfm:\n    build: .\n    # Uncomment this to mount your local version\n    # of the LightFM code.\n    # volumes:\n    #   - .:/home/lightfm/\n    ports:\n    - \"8888:8888\"\n"
        },
        {
          "name": "docs-requirements.txt",
          "type": "blob",
          "size": 0.0322265625,
          "content": "sphinx>=4.0\nsphinx_rtd_theme>=1.0"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lightfm.png",
          "type": "blob",
          "size": 34.9287109375,
          "content": null
        },
        {
          "name": "lightfm",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint-requirements.txt",
          "type": "blob",
          "size": 0.0458984375,
          "content": "pre-commit==2.17.0\nblack==22.1.0\nflake8==4.0.1\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.1650390625,
          "content": "[metadata]\ndescription-file = README.md\n\n[flake8]\nignore = I100, W503, E203\nmax-line-length = 100\nexclude = .git,__pycache__,docs/source/conf.py,old,build,dist,docs,doc\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 5.333984375,
          "content": "# coding=utf-8\nimport os\nimport pathlib\nimport subprocess\nimport sys\nimport textwrap\n\nfrom setuptools import Command, Extension, setup\n\n\ndef define_extensions(use_openmp):\n    compile_args = []\n    if not os.environ.get(\"LIGHTFM_NO_CFLAGS\"):\n        compile_args += [\"-ffast-math\"]\n\n        if sys.platform.startswith(\"darwin\"):\n            compile_args += []\n        else:\n            compile_args += [\"-march=native\"]\n\n    if not use_openmp:\n        print(\"Compiling without OpenMP support.\")\n        return [\n            Extension(\n                \"lightfm._lightfm_fast_no_openmp\",\n                [\"lightfm/_lightfm_fast_no_openmp.c\"],\n                extra_compile_args=compile_args,\n            )\n        ]\n    else:\n        return [\n            Extension(\n                \"lightfm._lightfm_fast_openmp\",\n                [\"lightfm/_lightfm_fast_openmp.c\"],\n                extra_link_args=[\"-fopenmp\"],\n                extra_compile_args=compile_args + [\"-fopenmp\"],\n            )\n        ]\n\n\nclass Cythonize(Command):\n    \"\"\"\n    Compile the extension .pyx files.\n    \"\"\"\n\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def generate_pyx(self):\n        openmp_import = textwrap.dedent(\n            \"\"\"\n             from cython.parallel import parallel, prange\n             cimport openmp\n        \"\"\"\n        )\n\n        lock_init = textwrap.dedent(\n            \"\"\"\n             cdef openmp.omp_lock_t THREAD_LOCK\n             openmp.omp_init_lock(&THREAD_LOCK)\n        \"\"\"\n        )\n\n        params = (\n            (\n                \"no_openmp\",\n                dict(\n                    openmp_import=\"\",\n                    nogil_block=\"with nogil:\",\n                    range_block=\"range\",\n                    thread_num=\"0\",\n                    lock_init=\"\",\n                    lock_acquire=\"\",\n                    lock_release=\"\",\n                ),\n            ),\n            (\n                \"openmp\",\n                dict(\n                    openmp_import=openmp_import,\n                    nogil_block=\"with nogil, parallel(num_threads=num_threads):\",\n                    range_block=\"prange\",\n                    thread_num=\"openmp.omp_get_thread_num()\",\n                    lock_init=lock_init,\n                    lock_acquire=\"openmp.omp_set_lock(&THREAD_LOCK)\",\n                    lock_release=\"openmp.omp_unset_lock(&THREAD_LOCK)\",\n                ),\n            ),\n        )\n\n        file_dir = os.path.join(os.path.dirname(__file__), \"lightfm\")\n\n        with open(os.path.join(file_dir, \"_lightfm_fast.pyx.template\"), \"r\") as fl:\n            template = fl.read()\n\n        for variant, template_params in params:\n            with open(\n                os.path.join(file_dir, \"_lightfm_fast_{}.pyx\".format(variant)), \"w\"\n            ) as fl:\n                fl.write(template.format(**template_params))\n\n    def run(self):\n        from Cython.Build import cythonize\n\n        self.generate_pyx()\n\n        cythonize(\n            [\n                Extension(\n                    \"lightfm._lightfm_fast_no_openmp\",\n                    [\"lightfm/_lightfm_fast_no_openmp.pyx\"],\n                ),\n                Extension(\n                    \"lightfm._lightfm_fast_openmp\",\n                    [\"lightfm/_lightfm_fast_openmp.pyx\"],\n                    extra_link_args=[\"-fopenmp\"],\n                ),\n            ],\n            compiler_directives={'language_level' : \"3\"}\n        )\n\n\nclass Clean(Command):\n    \"\"\"\n    Clean build files.\n    \"\"\"\n\n    user_options = [(\"all\", None, \"(Compatibility with original clean command)\")]\n\n    def initialize_options(self):\n        self.all = False\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        pth = os.path.dirname(os.path.abspath(__file__))\n\n        subprocess.call([\"rm\", \"-rf\", os.path.join(pth, \"build\")])\n        subprocess.call([\"rm\", \"-rf\", os.path.join(pth, \"lightfm.egg-info\")])\n        subprocess.call([\"find\", pth, \"-name\", \"lightfm*.pyc\", \"-type\", \"f\", \"-delete\"])\n        subprocess.call([\"rm\", os.path.join(pth, \"lightfm\", \"_lightfm_fast.so\")])\n\n\ndef read_version():\n    mod = {}\n    path = os.path.join(\n        os.path.dirname(__file__),\n        \"lightfm\",\n        \"version.py\",\n    )\n    with open(path) as fd:\n        exec(fd.read(), mod)\n    return mod[\"__version__\"]\n\n\nuse_openmp = not sys.platform.startswith(\"darwin\") and not sys.platform.startswith(\n    \"win\"\n)\n\nlong_description = pathlib.Path(__file__).parent.joinpath(\"README.md\").read_text()\n\nsetup(\n    name=\"lightfm\",\n    version=read_version(),\n    description=\"LightFM recommendation model\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/lyst/lightfm\",\n    download_url=\"https://github.com/lyst/lightfm/tarball/{}\".format(read_version()),\n    packages=[\"lightfm\", \"lightfm.datasets\"],\n    package_data={\"\": [\"*.c\"]},\n    install_requires=[\"numpy\", \"scipy>=0.17.0\", \"requests\", \"scikit-learn\"],\n    tests_require=[\"pytest\", \"requests\", \"scikit-learn\"],\n    cmdclass={\"cythonize\": Cythonize, \"clean\": Clean},\n    author=\"Lyst Ltd (Maciej Kula)\",\n    author_email=\"data@ly.st\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    ext_modules=define_extensions(use_openmp),\n)\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.0068359375,
          "content": "pytest\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}