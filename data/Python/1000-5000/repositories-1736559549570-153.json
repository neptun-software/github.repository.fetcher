{
  "metadata": {
    "timestamp": 1736559549570,
    "page": 153,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cookiecutter-flask/cookiecutter-flask",
      "stars": 4615,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.42578125,
          "content": "*.py[cod]\n.DS_Store\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# si\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Complexity\noutput/*.html\noutput/*/index.html\n\n# Sphinx\ndocs/_build\nREADME.html\n\n# Cookiecutter\noutput/\n\nmy_flask_app/\nbower_components\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.21484375,
          "content": "FROM python:3.13-slim-bullseye\n\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY cookiecutter_spec.py /cookiecutter_spec.py\nENTRYPOINT [ \"python\", \"/cookiecutter_spec.py\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "Copyright 2019 Steven Loria and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.5927734375,
          "content": "# cookiecutter-flask\n\nA Flask template for [cookiecutter](https://github.com/audreyr/cookiecutter). (Supports Python ≥ 3.8)\n\n![Build Status](https://github.com/cookiecutter-flask/cookiecutter-flask/workflows/Build%20Status/badge.svg)\n![CodeQL](https://github.com/cookiecutter-flask/cookiecutter-flask/workflows/CodeQL/badge.svg)\n[![CalVer](https://img.shields.io/badge/calver-YY.MINOR.MICRO-22bfda.svg)](http://calver.org)\n\nSee [this repo](https://github.com/jamescurtin/demo-cookiecutter-flask) for an example project generated from the most recent version of the template.\n\n## Use it now\n\n### Docker **(This is the preferred method for creating a new project)**\n\n```bash\n$ git clone https://github.com/cookiecutter-flask/cookiecutter-flask.git\n$ cd cookiecutter-flask\n\n# Basic usage (You will be prompted to provide basic information about your application)\n$ ./cookiecutter-docker.sh\n    full_name [Steven Loria]:\n    ...\n# The repository for your flask app will be created in a directory with the name\n# chosen in \"package import name\" question (default ./my_flask_app/)\n\n# Additional arguments are available\n$ ./cookiecutter-docker.sh --help\n    Usage: ./cookiecutter-docker.sh [OPTIONS]\n\nOptions:\n    -b, --build    Build Docker image before running cookiecutter\n    -h, --help     Show this message and exit\n```\n\n### Standard\n\nIf using standard instructions, Python ≥ 3.8 is required. A virtual environment is recommended (like `virtualenv`).\n\n```bash\npip3 install cookiecutter\ncookiecutter https://github.com/cookiecutter-flask/cookiecutter-flask.git\n```\n\nYou will be asked about your basic info (name, project name, app name, etc.). This info will be used in your new project.\n\n## Configure and Run\n\nAfter you have generated the project code, a few more steps must be taken before your new app will run. The README of the generated project shows you how to configure and run the application. (You can see the [template README here](https://github.com/cookiecutter-flask/cookiecutter-flask/blob/master/%7B%7Bcookiecutter.app_name%7D%7D/README.md)).\n\n## Features\n\n- Bootstrap 5 and Font Awesome 6 with starter templates\n- Flask-SQLAlchemy with basic User model\n- Easy database migrations with Flask-Migrate\n- Configuration in environment variables, as per [The Twelve-Factor App](https://12factor.net/config)\n- Flask-WTForms with login and registration forms\n- Flask-Login for authentication\n- Flask-Bcrypt for password hashing\n- Procfile for deploying to a PaaS (e.g. Heroku)\n- pytest and Factory-Boy for testing (example tests included)\n- Flask's Click CLI configured with simple commands\n- CSS and JS minification using webpack\n- npm support for frontend package management\n- Caching using Flask-Cache\n- Useful debug toolbar\n- Utilizes best practices: [Blueprints](http://flask.pocoo.org/docs/blueprints/) and [Application Factory](http://flask.pocoo.org/docs/patterns/appfactories/) patterns\n\n## Screenshots\n\n![Home page](https://user-images.githubusercontent.com/2379650/45271508-917f1c00-b475-11e8-9153-7f7385707a8b.png \"Home page\")\n\n![Home page](https://user-images.githubusercontent.com/2379650/45271517-a9ef3680-b475-11e8-8de6-fbf3d9cab199.png \"Registration form\")\n\n## Inspiration\n\n- [Structuring Flask Apps](http://charlesleifer.com/blog/structuring-flask-apps-a-how-to-for-those-coming-from-django/)\n- [Flask-Foundation](https://github.com/JackStouffer/Flask-Foundation) by [@JackStouffer](https://github.com/JackStouffer)\n- [flask-bones](https://github.com/cburmeister/flask-bones) by [@cburmeister](https://github.com/cburmeister)\n- [flask-basic-registration](https://github.com/mjhea0/flask-basic-registration) by [@mjhea0](https://github.com/mjhea0)\n- [Flask Official Documentation](http://flask.pocoo.org/docs/)\n\n## License\n\nMIT licensed.\n\n## Changelog\n\n### Unreleased\n\n- Update all node dependencies to latest versions\n- Switch to using Github Actions for template CI\n- Remove support for Node 10 as a Cookiecutter option\n- Refactored Docker image to use multistage builds more efficiently\n- Projects generated with the template use Github actions for CI\n- Upgrade Webpack to 5.x\n- Dropped Python 3.6 through 3.10 support\n- Added Python 3.12, and 3.13 support\n- Added Node 20 and 22 LTS\n- Removed Node 12, 14, 16, and 18 LTS\n\n### 18.0.0 (09/09/2018)\n\n- Use CalVer (`YY.MINOR.MICRO`).\n- Upgrade to Bootstrap 4. Thanks [@adawalli](https://github.com/adawalli) and [@Hiyorim](https://github.com/Hiyorimi).\n- Use environment variables for configuration.\n- Add support for Pipenv.\n- Upgrade Python and Node dependencies.\n\n### 0.13.0 (06/25/2017)\n\n- Use webpack for building front-end assets. Front-end dependencies are\n  installed with NPM. Remove Flask-Assets and bower.json. Thanks\n  [@wroberts](https://github.com/wroberts).\n\n### 0.12.0 (11/06/2016)\n\n- Update Python dependencies.\n\n### 0.11.1 (11/06/2016)\n\n- Correctly pass first parameter to `Flask` according to the 0.11 [docs](http://flask.pocoo.org/docs/0.11/api/#application-object). Thanks [@aliavni](https://github.com/aliavni).\n- Remove setuptools and wheel as dependencies to fix deployment on Heroku. Thanks [@Cabalist](https://github.com/Cabalist).\n- Make User.password a Binary field for compatibility with new versions of bcrypt. Thanks again [@Cabalist](https://github.com/Cabalist).\n\n### 0.11.0 (09/10/2016)\n\n- Use the FLASK_DEBUG system environment variable, instead of MYFLASKAPP_ENV, to control different configs for development and production environments\n\n### 0.10.1 (08/28/2016)\n\n- Fix `invoke test` command.\n\n### 0.10.0 (08/28/2016)\n\n- Update to Flask 0.11.\n- Use Click instead of Flask-Script for CLI commands.\n\n### 0.9.0 (03/06/2016)\n\n- Update stale requirements.\n- Add CSRF protection.\n- Run `lint` command on Travis builds.\n- Test against Python 3.5.\n\n### 0.8.0 (11/09/2015)\n\n- Update stale requirements.\n- Add `lint`, `clean`, and `urls` management commands.\n- Add isort.\n\nThanks @andreoliw for these contributions.\n\n### 0.7.0 (04/14/2015)\n\n- Update extension import style to flask_* as per [mitsuhiko/flask#1135](https://github.com/mitsuhiko/flask/issues/1135).\n- Update stale requirements (Werkzeug, Flask-WTF, WTForms, Flask-Bcrypt, Flask-DebugToolbar, Flask-Migrate, Bootstrap, jQuery). Thanks @bsmithgall for notifying me of the critical patch to Flask-Migrate.\n\n### 0.6.0 (12/01/2014)\n\n- Test the cookiecutter on Travis. Thanks @joshfriend.\n- Update stale requirements (Flask-WTF, Flask-Migrate, Flask-DebugToolbar)\n\n### 0.5.0 (09/29/2014)\n\n- Fix .travis.yml.\n- Update stale requirements (Flask-WTF, WTForms, Flask-SQLAlchemy, jquery, Bootstrap)\n\n### 0.4.3 (07/27/2014)\n\n- Add `BaseFactory` class.\n- Add compat.py module.\n- Tests pass on Python 3.\n\n### 0.4.2 (07/27/2014)\n\n- Update factories to factory-boy >= 2.4.0 syntax.\n- Update stale requirements.\n\n### 0.4.1 (06/07/2014)\n\n- Update stale requirements (Werkzeug 0.9.6, WTForms 2.0)\n- Fix unmatched div tag in home.html (thanks [@level09](https://github.com/level09))\n\n### 0.4.0 (04/19/2014)\n\n- Add ReferenceCol for less verbose foreign key columns.\n- Add SurrogatePK mixin for adding integer primary key to a model.\n- Add base Model class that has CRUD convenience methods.\n- Fix setting BCrypt encryption complexity. Tests are much faster.\n- Add Role model to show ReferenceCol usage.\n- Switch to pytest.\n- Upgrade all out-of-date requirements.\n- More test examples.\n- Remove \"year\" from cookiecutter.json (just change LICENSE if necessary).\n\n### 0.3.2 (02/26/2014)\n\n- Fix static assets.\n\n### 0.3.1 (02/20/2014)\n\n- Update default year in cookiecutter.json. Thanks @Omeryl\n- Correct testing of redirects in webtests. Thanks @Widdershin\n- Fix POST action in nav form. Thanks @Widdershin.\n- Update Bootstrap (3.1.1) and jQuery (2.1.0)\n- Optional support for bower.\n- Minified assets aren't used in dev environment.\n\n### 0.3.0 (12/08/2013)\n\n- More modular organization: each blueprint contains its own view, models, and forms in a directory. There is still a single directory for templates and static assets.\n- Use Flask-Bcrypt for password hashing.\n- Flask-Login for authentication.\n- Simple test setup. Just create a subclass of `DbTestCase`.\n- Flask-Testing support.\n- Use Factory-Boy for test factories.\n- Use WebTest for functional testing.\n- Add Flask-Debugtoolbar.\n- Migrations using Flask-Migrate.\n- Caching using Flask-Cache.\n- Add error page templates (404, 401, 500)\n- Add Font Awesome 4.0.3 for icons.\n\n### 0.2.0 (09/21/2013)\n\n- Add manage.py script\n- Add Flask-Assets for CSS and JS bundling+minification\n- Use different configs for development and production environments, controlled by the MYFLASKAPP_ENV system environment variable\n- Use Blueprints and application factory pattern. The `simple` branch does not use these.\n\n### 0.1.0 (08/20/2013)\n\n- First iteration\n- Bootstrap 3 final\n- Working User model and registration\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.130859375,
          "content": "If you believe you have found a security vulnerability in this project please contact a [maintainer](https://github.com/jamescurtin).\n"
        },
        {
          "name": "cookiecutter-docker.sh",
          "type": "blob",
          "size": 0.95703125,
          "content": "#!/usr/bin/env bash\nset -e\n\nPROGNAME=$0\nBUILD_IMAGE=false\nCOOKIECUTTER_TEMPLATE='.'\n\n\nusage() {\n  cat << EOF >&2\nUsage: $PROGNAME [OPTIONS]\n\nOptions:\n-b, --build    Build Docker image before running cookiecutter\n-h, --help     Show this message and exit\n\nEOF\n    exit 1\n    }\n\n\nprocess_args() {\n    while test $# -gt 0\n    do\n      case \"$1\" in\n          -h) usage\n              ;;\n          --help) usage\n              ;;\n          -b) BUILD_IMAGE=true\n              ;;\n          --build) BUILD_IMAGE=true\n              ;;\n          --*) usage;\n              exit 1;\n              ;;\n          *) usage;\n              exit 1;\n              ;;\n      esac\n      shift\n  done\n}\n\n\nrun_cookiecutter() {\n    if [[ \"$(docker images -q cookiecutter-docker 2> /dev/null)\" == \"\" ]] || $BUILD_IMAGE ; then\n    docker build . --tag=cookiecutter-docker\n    fi\n\n    docker run -i -t -v ${PWD}:/build -w /build cookiecutter-docker ${COOKIECUTTER_TEMPLATE}\n}\n\nprocess_args \"$@\"\nrun_cookiecutter\n"
        },
        {
          "name": "cookiecutter.json",
          "type": "blob",
          "size": 0.2177734375,
          "content": "{\n  \"full_name\": \"\",\n  \"email\": \"\",\n  \"github_username\": \"\",\n  \"project_name\": \"\",\n  \"app_name\": \"\",\n  \"project_short_description\": \"\",\n  \"use_pipenv\": \"\",\n  \"python_version\": \"\",\n  \"node_version\": \"\",\n  \"use_heroku\": \"\"\n}\n"
        },
        {
          "name": "cookiecutter_spec.py",
          "type": "blob",
          "size": 3.2041015625,
          "content": "import argparse\nfrom typing import List\n\nimport columbo\nfrom cookiecutter.main import cookiecutter\nfrom packaging.utils import canonicalize_name\n\n\ndef handle_cli_input():\n    parser = argparse.ArgumentParser(description=\"Generate a cookiecutter project\")\n    parser.add_argument(\"template\")\n    parser.add_argument(\"--no-input\", default=False, action=\"store_true\")\n    return parser.parse_args()\n\n\ndef _normalize_application_name(answers: columbo.Answers) -> str:\n    application_name = str(answers.get(\"project_name\", \"example_project\"))\n    return application_name.lower().replace(\"-\", \"_\").replace(\" \", \"_\")\n\n\ndef validate_package_import_name(\n    answer: str, _: columbo.Answers\n) -> columbo.ValidationResponse:\n    canonical_name = canonicalize_name(answer).replace(\"-\", \"_\")\n    if not canonical_name == answer:\n        error_message = (\n            \"Import names should follow PEP-8 naming conventions.\"\n            f\" Did you mean {canonical_name}?\"\n        )\n        return columbo.ValidationFailure(error=error_message)\n    if not answer.replace(\"_\", \"\").isalpha():\n        error_message = (\n            \"Import names may only contain alphabetical characters and underscores. \"\n            \"They may not contain spaces, numbers, or other characters.\"\n        )\n        return columbo.ValidationFailure(error=error_message)\n    return columbo.ValidationSuccess()\n\n\ninteractions: List[columbo.Interaction] = [\n    columbo.Echo(\"Please answer the following questions!\"),\n    columbo.BasicQuestion(\n        \"full_name\",\n        \"What is your name?\",\n        default=\"First Last\",\n    ),\n    columbo.BasicQuestion(\n        \"email\",\n        lambda answers: f\"What is {answers['full_name']}'s email address?\",\n        default=\"example@gmail.com\",\n    ),\n    columbo.BasicQuestion(\n        \"github_username\",\n        lambda answers: f\"What is {answers['full_name']}'s github username?\",\n        default=\"yourGithubUsername\",\n    ),\n    columbo.BasicQuestion(\n        \"project_name\",\n        \"What is the name of your project?\",\n        default=\"My Flask App\",\n    ),\n    columbo.BasicQuestion(\n        \"app_name\",\n        \"What will the package import name be?\\nThis will be the name used in python code to import from the module\",\n        default=_normalize_application_name,\n        validator=validate_package_import_name,\n    ),\n    columbo.BasicQuestion(\n        \"project_short_description\",\n        \"Provide a short description for the project.\",\n        default=\"A flasky app.\",\n    ),\n    columbo.Confirm(\n        \"use_pipenv\",\n        \"Should this project use pipenv?\",\n        default=False,\n    ),\n    columbo.Choice(\n        \"python_version\",\n        \"Which version of Python will this application use?\",\n        options=[\"3.13\", \"3.12\"],\n        default=\"3.13\",\n    ),\n    columbo.Choice(\n        \"node_version\",\n        \"Which version of Node will this application use?\",\n        options=[\"22\", \"20\"],\n        default=\"22\",\n    ),\n    columbo.Confirm(\n        \"use_heroku\",\n        \"Will this project be deployed using heroku?\",\n        default=False,\n    ),\n]\n\nif __name__ == \"__main__\":\n    args = handle_cli_input()\n    answers = columbo.get_answers(interactions, no_user_input=args.no_input)\n    cookiecutter(args.template, no_input=True, extra_context=answers)\n"
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.064453125,
          "content": "columbo==0.14.0\ncookiecutter==2.6.0\ninvoke==2.2.0\npackaging==24.2\n"
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 2.6279296875,
          "content": "\"\"\"Invoke tasks.\"\"\"\nimport os\nimport shutil\nfrom typing import Iterator\n\n# isort: off\n# Temporary monkeypatch; see https://github.com/pyinvoke/invoke/issues/833\nimport inspect\n\nif not hasattr(inspect, \"getargspec\"):\n    inspect.getargspec = inspect.getfullargspec\n\nfrom invoke import task\n\n# isort: on\n\nHERE = os.path.abspath(os.path.dirname(__file__))\nDEFAULT_APP_NAME = \"my_flask_app\"\nCOOKIE = os.path.join(HERE, DEFAULT_APP_NAME)\nREQUIREMENTS = os.path.join(COOKIE, \"requirements\", \"dev.txt\")\n\n\ndef _run_npm_command(ctx, command):\n    os.chdir(COOKIE)\n    ctx.run(f\"npm {command}\", echo=True)\n    os.chdir(HERE)\n\n\ndef _run_flask_command(ctx, command, *args):\n    os.chdir(COOKIE)\n    flask_command = f\"flask {command}\"\n    if args:\n        flask_command += f\" {' '.join(args)}\"\n    ctx.run(flask_command, echo=True)\n\n\n@task\ndef build(ctx):\n    \"\"\"Build the cookiecutter.\"\"\"\n    ctx.run(f\"python cookiecutter_spec.py {HERE} --no-input\")\n\n\n@task(pre=[build])\ndef build_install(ctx):\n    \"\"\"Build the cookiecutter.\"\"\"\n    _run_npm_command(ctx, \"install\")\n    ctx.run(f\"pip install -r {REQUIREMENTS} --ignore-installed\", echo=True)\n\n\n@task\ndef clean(ctx):\n    \"\"\"Clean out generated cookiecutter.\"\"\"\n    if os.path.exists(COOKIE):\n        shutil.rmtree(COOKIE)\n\n\n@task(pre=[clean, build_install])\ndef lint(ctx):\n    \"\"\"Run lint commands.\"\"\"\n    _run_npm_command(ctx, \"run lint\")\n    os.chdir(COOKIE)\n    os.environ[\"FLASK_ENV\"] = \"production\"\n    os.environ[\"FLASK_DEBUG\"] = \"0\"\n    _run_flask_command(ctx, \"lint\", \"--check\")\n\n\n@task(pre=[clean, build_install])\ndef test(ctx):\n    \"\"\"Run tests.\"\"\"\n    os.chdir(COOKIE)\n    os.environ[\"FLASK_ENV\"] = \"production\"\n    os.environ[\"FLASK_DEBUG\"] = \"0\"\n    _run_flask_command(ctx, \"test\")\n\n\ndef _walk_template_files() -> Iterator[str]:\n    template_dir = os.path.join(HERE, \"{{cookiecutter.app_name}}\")\n    for root, _, template_files in os.walk(template_dir):\n        for template_file in template_files:\n            yield os.path.join(root, template_file)\n\n\n@task\ndef no_placeholders(ctx):\n    \"\"\"Check that default project name hasn't been committed to template dir\"\"\"\n    for template_file in _walk_template_files():\n        try:\n            with open(template_file, \"r\") as f:\n                if DEFAULT_APP_NAME in f.read():\n                    raise ValueError(\n                        f\"Template cannot contain default app name, but {DEFAULT_APP_NAME} found in {f.name}\"\n                    )\n        except UnicodeDecodeError:\n            pass\n\n\n@task(pre=[clean, build])\ndef test_image_build(ctx):\n    \"\"\"Run tests.\"\"\"\n    os.chdir(COOKIE)\n    os.environ[\"DOCKER_BUILDKIT\"] = \"1\"\n    ctx.run(\"docker compose build flask-dev\", echo=True)\n"
        },
        {
          "name": "{{cookiecutter.app_name}}",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}