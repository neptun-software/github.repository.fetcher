{
  "metadata": {
    "timestamp": 1736559865455,
    "page": 622,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ponyorm/pony",
      "stars": 3670,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.134765625,
          "content": "*.pyc\n*.sqlite\n.idea\npony/orm/tests/.coverage\npony/orm/tests/coverage.bat\npony/orm/tests/htmlcov/*.*\nMANIFEST\ndocs/_build/\npony.egg-info/\n"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 0.4833984375,
          "content": "# Sponsors & Backers\n\nPony ORM is Apache 2.0 licensed open source project. If you would like to support Pony ORM development, please consider:\n\n[Become a backer or sponsor](https://ponyorm.org/donation.html)\n\n## Backers\n\n- [Vincere](https://vince.re)\n- Sergio Aguilar Guerrero\n- David ROUBLOT\n- Elijas DapÅ¡auskas\n- Dan Swain\n- Christian Macht\n- Johnathan Nader\n- Andrei Rachalouski\n- Juan Pablo Scaletti\n- Marcus Birkenkrahe\n- Vincent Le Goff\n- Niklas Rosenstein\n- Xucong Zhan\n- Christian Does\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 30.8359375,
          "content": "# PonyORM release 0.7.19 (2024-08-27)\n\n## Bugfixes\n\n* Add missed Python 3.12 classifier\n\n\n# PonyORM release 0.7.18 (2024-08-26)\n\n## Features\n\n* Add Python 3.12 support\n\n## Bugfixes\n\n* Fix #704 JSON handling in SQLite >= 3.45\n\n\n# PonyORM release 0.7.17 (2023-09-25)\n\n## Features\n\n* Add Python 3.11 support, drop support for Python < 3.8\n\n## Bugfixes\n\n* Fix #636 nullable IntArray and StrArray \n* Fix quoting table alias in MySQL DELETE queries\n* Fix handling of default argument values in hybrid methods and functions\n\n\n# PonyORM release 0.7.16 (2022-01-28)\n\n## Bugfixes\n\n* Fixes #628: DBAPIProvider.__init__() got multiple values for argument 'database'\n\n\n# PonyORM release 0.7.15 (2022-01-27)\n\n## Features\n\n* Add Python 3.10 support, drop support of Python < 3.6\n* You can create an in-memory SQLite database accessible from multiple threads by specifying \":sharedmemory:\" as a file name\n\n## Bugfixes\n\n* Do not perform optimistic checks when deleting an object (it is OK if it was already deleted by concurrent transaction)\n* Validation of int fields should take into account field size and check that the value is fit into the range\n* More tests for hybrid methods added\n* Fix incorrect assertion check `assert t is translator.`\n* Fix aggregated query `sum(x.field for x in previous_query)`\n* #594: Use a clearly synthetic filename when compiling dynamic code to not confuse coverage.py\n* Use DecompileError exception instead of AssertionError when a function cannot be decompiled\n\n\n# PonyORM release 0.7.14 (2020-11-23)\n\n## Features\n\n* Add Python 3.9 support\n* Allow to use kwargs in select: Entity.select(**kwargs) and obj.collection.select(**kwargs), a feature that was announced but actually missed from 0.7.7\n* Add support for volatile collection attributes that don't throw \"Phantom object appeared/disappeared\" exceptions\n\n## Bugfixes\n\n* Fix negative timedelta conversions\n* Pony should reconnect to PostgreSQL when receiving 57P01 error (AdminShutdown)\n* Allow mixing compatible types (like int and float) in coalesce() arguments\n* Support of subqueries in coalesce() arguments\n* Fix using aggregated subqueries in ORDER BY section\n* Fix queries with expressions like `(x, y) in ((a, b), (c, d))`\n* #451: KeyError for seeds with unique attributes in SessionCache.update_simple_index()\n\n\n# PonyORM release 0.7.13 (2020-03-03)\n\nThis release contains no new features or bugfixes. The only reason for this release is to test our CI/CD process.\n\n\n# PonyORM release 0.7.12 (2020-02-04)\n\n## Features\n\n* CockroachDB support added\n* CI testing for SQLite, PostgreSQL & CockroachDB\n\n## Bugfixes\n\n* Fix translation of getting array items with negative indexes\n* Fix string getitem translation for slices and negative indexes\n* PostgreSQL DISTINCT bug fixed for queries with ORDER BY clause\n* Fix date difference syntax in PostgreSQL\n* Fix casting json to double in PostgreSQL\n* Fix count by several columns in PostgreSQL\n* Fix PostgreSQL MIN and MAX expressions on boolean columns\n* Fix determination of interactive mode in PyCharm\n* Fix column definition when `sql_default` is specified: DEFAULT should be before NOT NULL\n* Relax checks on updating in-memory cache indexes (don't throw CacheIndexError on valid cases)\n* Fix deduplication logic for attribute values\n\n\n# PonyORM release 0.7.11 (2019-10-23)\n\n## Features\n\n* #472: Python 3.8 support\n* Support of hybrid functions (inlining simple Python functions into query)\n* #438: support datetime-datetime, datetime-timedelta, datetime+timedelta in queries\n\n## Bugfixes\n\n* #430: add ON DELETE CASCADE for many-to-many relationships\n* #465: Should reconnect to MySQL on OperationalError 2013 'Lost connection to MySQL server during query'\n* #468: Tuple-value comparisons generate incorrect queries\n* #470 fix PendingDeprecationWarning of imp module\n* Fix incorrect unpickling of objects with Json attributes\n* Check value of discriminator column on object creation if set explicitly\n* Correctly handle Flask current_user proxy when adding new items to collections\n* Some bugs in syntax of aggregated queries were fixed\n* Fix syntax of bulk delete queries\n* Bulk delete queries should clear query results cache so next select will get correct result from the database\n* Fix error message when hybrid method is too complex to decompile\n\n\n# PonyORM release 0.7.10 (2019-04-20)\n\n## Bugfixes\n\n* Python3.7 and PyPy decompiling fixes\n* Fix reading NULL from Optional nullable array column\n* Fix handling of empty arrays in queries\n* #415: error message typo\n* #432: PonyFlask - request object can trigger teardown_request without real request\n* Fix GROUP CONCAT separator for MySQL\n\n\n# PonyORM release 0.7.9 (2019-01-21)\n\n## Bugfixes\n\n* Fix handling of empty arrays and empty lists in queries\n* Fix reading optional nullable array columns from database\n\n\n# PonyORM release 0.7.8 (2019-01-19)\n\n## Bugfixes\n\n* #414: prefetching Optional relationships fails on 0.7.7\n* Fix a bug caused by incorrect deduplication of column values\n\n\n# PonyORM release 0.7.7 (2019-01-17)\n\n## Major features\n\n* Array type support for PostgreSQL and SQLite\n* isinstance() support in queries\n* Support of queries based on collections: select(x for x in y.items)\n\n## Other features\n\n* Support of Entity.select(**kwargs)\n* Support of SKIP LOCKED option in 'SELECT ... FOR UPDATE'\n* New function make_proxy(obj) to make cross-db_session proxy objects\n* Specify ON DELETE CASCADE/SET NULL in foreign keys\n* Support of LIMIT in `SELECT FROM (SELECT ...)` type of queries\n* Support for negative JSON array indexes in SQLite\n\n## Improvements\n\n* Improved query prefetching: use fewer number of SQL queries\n* Memory optimization: deduplication of values received from the database in the same session\n* increase DBAPIProvider.max_params_count value\n\n## Bugfixes\n\n* #405: breaking change with cx_Oracle 7.0: DML RETURNING now returns a list\n* #380: db_session should work with async functions\n* #385: test fails with python3.6\n* #386: release unlocked lock error in SQLite\n* #390: TypeError: writable buffers are not hashable\n* #398: add auto conversion of numpy numeric types\n* #404: GAE local run detection\n* Fix Flask compatibility: add support of LocalProxy object\n* db_session(sql_debug=True) should log SQL commands also during db_session.__exit__()\n* Fix duplicated table join in FROM clause\n* Fix accessing global variables from hybrid methods and properties\n* Fix m2m collection loading bug\n* Fix composite index bug: stackoverflow.com/questions/53147694\n* Fix MyEntity[obj.get_pk()] if pk is composite\n* MySQL group_concat_max_len option set to max of 32bit platforms to avoid truncation\n* Show all attribute options in show(Entity) call\n* For nested db_session retry option should be ignored\n* Fix py_json_unwrap\n* Other minor fixes\n\n\n# Pony ORM Release 0.7.6 (2018-08-10)\n\n## Bugfixes\n\n* Fixed a bug with hybrid properties that use external functions\n\n\n# Pony ORM Release 0.7.6rc1 (2018-08-08)\n\n## New features\n\n* f-strings support in queries: `select(f'{s.name} - {s.age}' for s in Student)`\n* #344: It is now possible to specify offset without limit: `query.limit(offset=10)`\n* #371: Support of explicit casting of JSON expressions to `str`, `int` or `float`\n* `@db.on_connect` decorator added\n\n## Bugfixes\n\n* Fix bulk delete bug introduced in 0.7.4\n* #370 Fix memory leak introduced in 0.7.4\n* Now `exists()` in query does not throw away condition in generator expression: `exists(s.gpa > 3 for s in Student)`\n* #373: 0.7.4/0.7.5 breaks queries using the `in` operator to test membership of another query result\n* #374: `auto=True` can be used with all PrimaryKey types, not only `int`\n* #369: Make QueryResult looks like a list object again: add concatenation with lists, `.shuffle()` and `.to_list()` methods\n* #355: Fix binary primary keys `PrimaryKey(buffer)` in Python2\n* Interactive mode support for PyCharm console\n* Fix wrong table aliases in complex queries\n* Fix query optimization code for complex queries\n\n\n# Pony ORM Release 0.7.5 (2018-07-24)\n\n## Bugfixes\n\n* `query.where` and `query.filter` method bug introduced in 0.7.4 was fixed\n\n\n# Pony ORM Release 0.7.4 (2018-07-23)\n\n## Major features\n\n* Hybrid methods and properties added: https://docs.ponyorm.com/entities.html#hybrid-methods-and-properties\n* Allow to base queries on another queries: `select(x.a for x in prev_query if x.b)`\n* Added support of Python 3.7\n* Added support of PyPy\n* `group_concat()` aggregate function added\n* pony.flask subpackage added for integration with Flask\n\n## Other features\n\n* `distinct` option added to aggregate functions\n* Support of explicit casting to `float` and `bool` in queries\n\n## Improvements\n\n* Apply @cut_traceback decorator only when pony.MODE is 'INTERACTIVE'\n\n## Bugfixes\n\n* In SQLite3 `LIKE` is case sensitive now\n* #249: Fix incorrect mixin used for Timedelta\n* #251: correct dealing with qualified table names\n* #301: Fix aggregation over JSON Column\n* #306: Support of frozenset constants added\n* #308: Fixed an error when assigning JSON attribute value to the same attribute: obj.json_attr = obj.json_attr\n* #313: Fix missed retry on exception raised during db_session.__exit__\n* #314: Fix AttributeError: 'NoneType' object has no attribute 'seeds'\n* #315: Fix attribute lifting for JSON attributes\n* #321: Fix KeyError on obj.delete()\n* #325: duplicating percentage sign in raw SQL queries without parameters\n* #331: Overriding __len__ in entity fails\n* #336: entity declaration serialization\n* #357: reconnect after PostgreSQL server closed the connection unexpectedly\n* Fix Python implementation of between() function and rename arguments: between(a, x, y) -> between(x, a, b)\n* Fix retry handling: in PostgreSQL and Oracle an error can be raised during commit\n* Fix optimistic update checks for composite foreign keys\n* Don't raise OptimisticCheckError if db_session is not optimistic\n* Handling incorrect datetime values in MySQL\n* Improved ImportError exception messages when MySQLdb, pymysql, psycopg2 or psycopg2cffi driver was not found\n* desc() function fixed to allow reverse its effect by calling desc(desc(x))\n* __contains__ method should check if objects belong to the same db_session\n* Fix pony.MODE detection; mod_wsgi detection according to official doc\n* A lot of inner fixes\n\n\n# Pony ORM Release 0.7.3 (2017-10-23)\n\n## New features\n\n* `where()` method added to query\n* `coalesce()` function added\n* `between(x, a, b)` function added\n* #295: Add `_table_options_` for entity class to specify engine, tablespace, etc.\n* Make debug flag thread-local\n* `sql_debugging` context manager added\n* `sql_debug` and show_values arguments to db_session added\n* `set_sql_debug` function added as alias to (to be deprecated) `sql_debug` function\n* Allow `db_session` to accept `ddl` parameter when used as context manager\n* Add `optimistic=True` option to db_session\n* Skip optimistic checks for queries in `db_session` with `serializable=True`\n* `fk_name` option added for attributes in order to specify foreign key name\n* #280: Now it's possible to specify `timeout` option, as well as pass other keyword arguments for `sqlite3.connect` function\n* Add support of explicit casting to int in queries using `int()` function\n* Added modulo division % native support in queries\n\n## Bugfixes\n\n* Fix bugs with composite table names\n* Fix invalid foreign key & index names for tables which names include schema name\n* For queries like `select(x for x in MyObject if not x.description)` add \"OR x.info IS NULL\" for nullable string columns\n* Add optimistic checking for `delete()` method\n* Show updated attributes when `OptimisticCheckError` is being raised\n* Fix incorrect aliases in nested queries\n* Correctly pass exception from user-defined functions in SQLite\n* More clear error messages for `UnrepeatableReadError`\n* Fix `db_session(strict=True)` which was broken in 2d3afb24\n* Fixes #170: Problem with a primary key column used as a part of another key\n* Fixes #223: incorrect result of `getattr(entity, attrname)` when the same lambda applies to different entities\n* Fixes #266: Add handler to `\"pony.orm\"` logger does not work\n* Fixes #278: Cascade delete error: FOREIGN KEY constraint failed, with complex entity relationships\n* Fixes #283: Lost Json update immediately after object creation\n* Fixes #284: `query.order_by()` orders Json numbers like strings\n* Fixes #288: Expression text parsing issue in Python 3\n* Fixes #293: translation of if-expressions in expression\n* Fixes #294: Real stack traces swallowed within IPython shell\n* `Collection.count()` method should check if session is alive\n* Set `obj._session_cache_` to None after exiting from db session for better garbage collection\n* Unload collections which are not fully loaded after exiting from db session for better garbage collection\n* Raise on unknown options for attributes that are part of relationship\n\n\n# Pony ORM Release 0.7.2 (2017-07-17)\n\n## New features\n\n* All arguments of db.bind() can be specified as keyword arguments. Previously Pony required the first positional argument which specified the database provider. Now you can pass all the database parameters using the dict: db.bind(**db_params). See https://docs.ponyorm.com/api_reference.html#Database.bind\n* The `optimistic` attribute option is added https://docs.ponyorm.com/api_reference.html#cmdoption-arg-optimistic\n\n## Bugfixes\n\n* Fixes #219: when a database driver raises an error, sometimes this error was masked by the 'RollbackException: InterfaceError: connection already closed' exception. This happened because on error, Pony tried to rollback transaction, but the connection to the database was already closed and it masked the initial error. Now Pony displays the original error which helps to understand the cause of the problem.\n* Fixes #276: Memory leak\n* Fixes the __all__ declaration. Previously IDEs, such as PyCharm, could not understand what is going to be imported by 'from pony.orm import *'. Now it works fine.\n* Fixes #232: negate check for numeric expressions now checks if value is zero or NULL\n* Fixes #238, fixes #133: raise TransactionIntegrityError exception instead of AssertionError if obj.collection.create(**kwargs) creates a duplicate object\n* Fixes #221: issue with unicode json path keys\n* Fixes bug when discriminator column is used as a part of a primary key\n* Handle situation when SQLite blob column contains non-binary value\n\n\n# Pony ORM Release 0.7.1 (2017-01-10)\n\n## New features\n\n* New warning DatabaseContainsIncorrectEmptyValue added, it is raised when the required attribute is empty during loading an entity from the database\n\n## Bugfixes\n\n* Fixes #216: Added Python 3.6 support\n* Fixes #203: subtranslator should use argnames from parent translator\n* Change a way aliases in SQL query are generated in order to fix a problem when a subquery alias masks a base query alias\n* Volatile attribute bug fixed\n* Fix creation of self-referenced foreign keys - before this Pony didn't create the foreign key for self-referenced attributes\n* Bug fixed: when required attribute is empty the loading from the database shouldn't raise the validation error. Now Pony raises the warning DatabaseContainsIncorrectEmptyValue\n* Throw an error with more clear explanation when a list comprehension is used inside a query instead of a generator expression: \"Use generator expression (... for ... in ...) instead of list comprehension [... for ... in ...] inside query\"\n\n\n# Pony ORM Release 0.7 (2016-10-11)\n\nStarting with this release Pony ORM is release under the Apache License, Version 2.0.\n\n## New features\n\n* Added getattr() support in queries: https://docs.ponyorm.com/api_reference.html#getattr\n\n## Backward incompatible changes\n\n* #159: exceptions happened during flush() should not be wrapped with CommitException\n\nBefore this release an exception that happened in a hook(https://docs.ponyorm.com/api_reference.html#entity-hooks), could be raised in two ways - either wrapped into the CommitException or without wrapping. It depended if the exception happened during the execution of flush() or commit() function on the db_session exit. Now the exception happened inside the hook never will be wrapped into the CommitException.\n\n## Bugfixes\n\n* #190: Timedelta is not supported when using pymysql\n\n\n# Pony ORM Release 0.6.6 (2016-08-22)\n\n## New features\n\n* Added native JSON data type support in all supported databases: https://docs.ponyorm.com/json.html\n\n## Backward incompatible changes\n\n* Dropped Python 2.6 support\n\n## Improvements\n\n* #179 Added the compatibility with PYPY using psycopg2cffi\n* Added an experimental @db_session `strict` parameter: https://docs.ponyorm.com/transactions.html#strict\n\n## Bugfixes\n\n* #182 - LEFT JOIN doesn't work as expected for inherited entities when foreign key is None\n* Some small bugs were fixed\n\n\n# Pony ORM Release 0.6.5 (2016-04-04)\n\n## Improvements\n\n* Fixes #172: Query prefetch() method should load specified lazy attributes right in the main query if possible\n\n## Bugfixes\n\n* Fixes #168: Incorrect caching when slicing the same query multiple times\n* Fixes #169: When py_check() returns False, Pony should truncate too large values in resulting ValueError message\n* Fixes #171: AssertionError when saving changes of multiple objects\n* Fixes #176: Autostripped strings are not validated correctly for Required attributes\n\nSee blog post for more detailed information: https://blog.ponyorm.com/2016/04/04/pony-orm-release-0-6-5/\n\n\n# Pony ORM Release 0.6.4 (2016-02-10)\n\nThis release brings no new features, has no backward incompatible changes, only bug fixes.\nIf you are using obj.flush() method in your code we recommend you to upgrade to 0.6.4 release.\n\n## Bugfixes\n\n* #161: 0.6.3 + obj.flush(): after_insert, after_update & after_delete hooks do not work\n\n# Pony ORM Release 0.6.3 (2016-02-05)\n\nThis release was intended to fix the behavior of obj.flush(), but failed to do it in a proper way.\nPlease skip this release and update to 0.6.4 if you are using obj.flush() method.\n\n## Bugfixes\n\n* Fixes #138 Incorrect behavior of obj.flush(): assertion failed after exception\n* Fixes #157 Incorrect transaction state after obj.flush() caused \"release unlocked lock\" error in SQLite\n* Fixes #151 SQLite + upper() or lower() does not work as expected\n\n\n# Pony ORM Release 0.6.2 (2016-01-11)\n\nThe documentation was moved from this repo to a separate one at https://github.com/ponyorm/pony-doc\nThe compiled version can be found at https://docs.ponyorm.com\n\n## New features\n\n* Python 3.5 support\n* #132, #145: raw_sql() function was added\n* #126: Ability to use @db_session with generator functions\n* #116: Add support to select by UUID\n* Ability to get string SQL statement using the Query.get_sql() method\n* New function delete(gen) and Query.delete(bulk=False)\n* Now it is possible to override Entity.__init__() and declare custom entity methods\n\n## Backward incompatible changes\n\n* Normalizing table names for symmetric relationships\n* Autostrip - automatically remove leading and trailing characters\n\n## Bugfixes\n\n* #87: Pony fails with pymysql installed as MySQLdb\n* #118: Pony should reconnect if previous connection was created before process was forked\n* #121: Unable to update value of unique attribute\n* #122: AssertionError when changing part of a composite key\n* #127: a workaround for incorrect pysqlite locking behavior\n* #136: Cascade delete does not work correctly for one-to-one relationships\n* #141, #143: remove restriction on adding new methods to entities\n* #142: Entity.select_random() AssertionError\n* #147: Add 'atom_expr' symbol handling for Python 3.5 grammar\n\n\n# Pony ORM Release 0.6.1 (2015-02-20)\n\n* Closed #65: Now the select(), filter(), order_by(), page(), limit(), random() methods can be applied to collection attributes\n* Closed #105: Now you can pass globals and locals to the select() function\n* Improved inheritance support in queries: select(x for x in BaseClass if x.subclass_attr == y)\n* Now it is possible to do db.insert(SomeEntity, column1=x, column2=y) instead of db.insert(SomeEntity._table_, column1=x, column2=y)\n* Discriminator attribute can be part of the composite index\n* Now it is possible to specify the attribute name instead of the attribute itself in composite index\n* Query statistics: global_stats_lock is deprecated, just use global_stats property without any locking\n* New load() method for entity instances which retrieves all unloaded attributes except collections\n* New load() method for collections, e.g. customer.orders.load()\n* Enhanced error message when descendant classes declare attributes with the same name\n* Fixed #98: Composite index can include attributes of base entity\n* Fixed #106: incorrect loading of object which consists of primary key only\n* Fixed pony.converting.check_email()\n* Prefetching bug fixed: if collection is already fully loaded it shouldn't be loaded again\n* Deprecated Entity.order_by(..) method was removed. Use Entity.select().order_by(...) instead\n* Various performance enhancements\n* Multiple bugs were fixed\n\n\n# Pony ORM Release 0.6 (2014-11-05)\n\n* Fixed #94: Aggregated subquery bug fixed\n\n# Pony ORM Release Candidate 0.6rc3 (2014-10-30)\n\n## Bugfixes\n\n* Fixed #18: Allow to specify `size` and `unsigned` for int type\n* Fixed #77: Discriminate Pony-generated fields in entities: Attribute.is_implicit field added\n* Fixed #83: Entity.get() should issue LIMIT 2 when non-unique criteria used for search\n* Fixed #84: executing db.insert() should turn off autocommit and begin transaction\n* Fixed #88: composite_index(*attrs) added to support non-unique composite indexes\n* Fixed #89: IN / NOT IN clauses works different with empty sequence\n* Fixed #90: Do not automatically add \"distinct\" if query.first() used\n* Fixed #91: document automatic \"distinct\" behaviour and also .without_distinct()\n* Fixed #92: without_distinct() and first() do not work together correctly\n\n## New features\n\n* `size` and `unsigned` options for `int` attributes [`link`](http://doc.ponyorm.com/entities.html#max-integer-number-size)\n\nSince the `long` type has gone in Python 3, the `long` type is deprecated in Pony now. Instead of `long` you should use the `int` type and specify the `size` option:\n\n```python\n    class MyEntity(db.Entity):\n        attr1 = Required(long) # deprecated\n        attr2 = Required(int, size=64) # new way for using BIGINT type in the database\n```\n\n# Pony ORM Release Candidate 0.6rc2 (2014-10-10)\n\n## Bugfixes\n\n* Fixes #81: python3.3: syntax error during installation in ubuntu 14.04\n\n\n# Pony ORM Release Candidate 0.6rc1 (2014-10-08)\n\n## New features:\n\n* Python 3 support\n* pymysql adapter support for MySQL databases\n\n## Backward incompatible changes\n\nNow Pony treats both `str` and `unicode` attribute types as they are unicode strings in both Python 2 and 3. So, the attribute declaration `attr = Required(str)` is equal to `attr = Required(unicode)` in Python 2 and 3. The same thing is with `LongStr` and `LongUnicode` - both of them are represented as unicode strings now.\n\nFor the sake of backward compatibility Pony adds `unicode` as an alias to `str` and `buffer` as an alias to `bytes` in Python 3.\n\n## Other changes and bug fixes\n\n* Fixes #74: Wrong FK column type when using sql_type on foreign ID column\n* Fixes #75: MappingError for self-referenced entities in a many-to-many relationship\n* Fixes #80: âEntity NoneType does not belong to databaseâ when using to_dict\n\n\n# Pony ORM Release 0.5.4 (2014-09-22)\n\n## New functions and methods:\n\n* `pony.orm.serialization` module with the `to_dict()` and `to_json()` functions was added. Before this release you could use the `to_dict()` method of an entity instance in order to get a key-value dictionary structure for a specific entity instance. Sometimes you might need to serialize not only the instance itself, but also the instance's related objects. In this case you can use the `to_dict()` function from the pony.orm.serialization module.\n\n  * [`to_dict()`](http://doc.ponyorm.com/working_with_entity_instances.html#to_dict) - receives an entity instance or a list of instances and returns a dictionary structure which keeps the passed object(s) and immediate related objects\n\n  * [`to_json()`](http://doc.ponyorm.com/working_with_entity_instances.html#to_json) â uses `to_dict()` and returns JSON representation of the `to_dict()` result\n\n* [`Query.prefetch()`](http://doc.ponyorm.com/queries.html#Query.prefetch) â allows to specify which related objects or attributes should be loaded from the database along with the query result . Example:\n\n```python\n      select(s for s in Student).prefetch(Group, Department, Student.courses)\n```\n\n* [`obj.flush()`](http://doc.ponyorm.com/working_with_entity_instances.html#Entity.flush) â allows flush a specific entity to the database\n\n* [`obj.get_pk()`](http://doc.ponyorm.com/working_with_entity_instances.html#Entity.get_pk) â return the primary key value for an entity instance\n\n* [`py_check`](http://doc.ponyorm.com/entities.html#py_check) parameter for attributes added. This parameter allows you to specify a function which will be used for checking the value before it is assigned to the attribute. The function should return `True`/`False` or can raise `ValueError` exception if the check failed. Example:\n\n```python\n    class Student(db.Entity):\n        name = Required(unicode)\n        gpa = Required(float, py_check=lambda val: val >= 0 and val <= 5)\n```\n\n## New types:\n\n* `time` and `timedelta` â now you can use these types for attribute declaration. Also you can use `timedelta` and a combination of `datetime` + `timedelta` types inside queries.\n\n## New hooks:\n\n* `after_insert`, `after_update`, `after_delete` - these hooks are called when an object was inserted, updated or deleted in the database respectively ([link](http://doc.ponyorm.com/working_with_entity_instances.html#entity-hooks))\n\n## New features:\n\n* Added support for pymysql â pure Python MySQL client. Currently it is used as a fallback for MySQLdb interface\n\n## Other changes and bug fixes\n\n* `obj.order_by()` method is deprecated, use `Entity.select().order_by()` instead\n* `obj.describe()` now displays composite primary keys\n* Fixes #50: PonyORM does not escape _ and % in LIKE queries\n* Fixes #51: Handling of one-to-one relations in declarative queries\n* Fixes #52: An attribute without a column should not have rbits & wbits\n* Fixes #53: Column generated at the wrong side of \"one-to-one\" relationship\n* Fixes #55: `obj.to_dict()` should do flush at first if the session cache is modified\n* Fixes #57: Error in `to_dict()` when to-one attribute value is None\n* Fixes #70: EntitySet allows to add and remove None\n* Check that the entity name starts with a capital letter and throw exception if it is not then raise the `ERDiagramError: Entity class name should start with a capital letter` exception\n\n\n# Pony ORM Release 0.5.3 (2014-08-12)\n\nThis release fixes the setup.py problem that was found after the previous release was uploaded to PyPI.\n\n\n# Pony ORM Release 0.5.2 (2014-08-11)\n\nThis release is a step forward to Python 3 support. While the external API wasn't changed, the internals were significantly refactored to provide forward compatibility with Python 3.\n\n## Changes/features:\n\n* New to_dict() method can be used to convert entity instance to dictionary. This method can be useful when you need to serialize an object to JSON or other format ([link](http://blog.ponyorm.com/2014/08/11/pony-orm-release-0-5-2/))\n\n## Bugfixes:\n\n* Now select() function and filter() method of the query object can accept lambdas with closures\n* Some minor bugs were fixed\n\n\n# Pony ORM Release 0.5.1 (2014-07-11)\n\n## Changes/features:\n\nBefore this release, if a text attribute was defined without the max length specified (e.g. `name = Required(unicode)`), Pony set the maximum length equal to 200 and used SQL type `VARCHAR(200)`. Actually, PostgreSQL and SQLite do not require specifying the maximum length for strings. Starting with this release such text attributes are declared as `TEXT` in SQLite and PostgreSQL. In these DBMSes, the `TEXT` datatype has the same performance as `VARCHAR(N)` and doesn't have arbitrary length restrictions.\n\nFor other DBMSes default varchar limit was increased up to 255 in MySQL and to 1000 in Oracle.\n\n## Bugfixes:\n\n* Correct parsing of datetime values with T separator between date and time\n* Entity.delete() bug fixed\n* Lazy attribute loading bug fixed\n\n\n# Pony ORM Release 0.5 (2014-05-31)\n\n* New transaction model ([link](http://blog.ponyorm.com/2014/02/14/pony-orm-release-0-5-beta/))\n* New method `Query.filter()` allows step-by-step query construction ([link](http://doc.ponyorm.com/queries.html?highlight=filter#Query.filter))\n* New method `Database.bind()` simplifies testing and allows using different settings for development and production ([link](http://doc.ponyorm.com/database.html#binding-the-database-object-to-a-specific-database))\n* New method `Query.page()` simplifies pagination ([link](http://doc.ponyorm.com/queries.html?highlight=filter#Query.page))\n* New method `MyEntity.select_random(N)` is effective for large tables ([link](http://doc.ponyorm.com/queries.html#Entity.select_random))\n* New method `Query.random(N)` for selecting random instances ([link](http://doc.ponyorm.com/queries.html#Query.random))\n* Support of new `concat()` function inside declarative queries\n* New `before_insert()`, `before_update()`, `before_delete()` entity instance hooks which can be overridden\n* Ability to specify `sequence_name='seq_name'` for PrimaryKey attributes for Oracle database\n* Ability to create new entity instances specifying the value of the primary key instead of the object\n* Ability to read entity object attributes outside of the db_session\n* Ability to use lambdas as a reference to an entity in relationship attribute declarations ([link](http://doc.ponyorm.com/entities.html?highlight=lambda#relationships))\n* The names of tables, indexes and constraints in the database creation script now are sorted in the alphabetical order\n* In MySQL and PostgreSQL Pony converts the table names to the lower case. In Oracle â to the upper case. In SQLite leaves as is.\n* The option `options.MAX_FETCH_COUNT` is set to `None` by default now\n* The support of PyGreSQL is discontinued, using psycopg2 instead\n* Added `pony.__version__` attribute\n* Multiple bugs were fixed\n* Stability and performance improvements\n\n\n# Pony ORM Release 0.4.9 (2013-10-25)\n\n* Database `create_tables()`/`drop_all_tables()` methods\n* `Database.drop_table(name)`, `Entity.drop_table()`, `Set.drop_table()` methods\n* `Database.disconnect()` methods (allows SQLite files deletion after disconnection)\n* Pony now automatically enables foreign key checks in SQLite\n* `Entity.exists(...)` method added\n* `distinct()` function added: `select((s.group, sum(distinct(s.gpa))) for s in Student)`\n* Refactoring & bugfixes\n\n\n# Pony ORM Release 0.4.8 (2013-08-27)\n\n* Use standard transaction mode by default instead of optimistic mode\n* `SELECT ... FOR UPDATE` support added: `select(...).for_update()[:]`\n* `UUID` datatype support added\n* Automatic foreign key indexes generation\n* MySQL foreign key bug workaround added\n* Check_tables parameter of `generate_mapping()` is deprecated\n* Bug fixes\n\n\n# Pony ORM Release 0.4.7 (2013-06-19)\n\n* `@db_session` decorator is required for any database interaction;\n* support of pickling/unpickling (queries and objects can be stored in memcached);\n* lazy collections - don't load all the items if only one is needed;\n* datetime precision now can be specified;\n* multiple bugs were fixed.\n\n\n# Pony ORM Release 0.4.6 (2013-05-17)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.994140625,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2016 Alexander Kozlovsky, Alexey Malashkevich\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0927734375,
          "content": "include pony/orm/tests/queries.txt\ninclude pony/flask/example/templates *.html\ninclude LICENSE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.1533203125,
          "content": "# Downloads\n[![Downloads](https://pepy.tech/badge/pony)](https://pepy.tech/project/pony) [![Downloads](https://pepy.tech/badge/pony/month)](https://pepy.tech/project/pony/month) [![Downloads](https://pepy.tech/badge/pony/week)](https://pepy.tech/project/pony/week)\n\n\nPony Object-Relational Mapper\n=============================\n\nPony is an advanced object-relational mapper. The most interesting feature of Pony is its ability to write queries to the database using Python generator expressions and lambdas. Pony analyzes the abstract syntax tree of the expression and translates it into a SQL query.\n\nHere is an example query in Pony:\n\n```python\nselect(p for p in Product if p.name.startswith('A') and p.cost <= 1000)\n```\n\nPony translates queries to SQL using a specific database dialect. Currently Pony works with SQLite, MySQL, PostgreSQL and Oracle databases.\n\nBy providing a Pythonic API, Pony facilitates fast app development. Pony is an easy-to-learn and easy-to-use library. It makes your work more productive and helps to save resources. Pony achieves this ease of use through the following:\n\n* Compact entity definitions\n* The concise query language\n* Ability to work with Pony interactively in a Python interpreter\n* Comprehensive error messages, showing the exact part where an error occurred in the query\n* Displaying of the generated SQL in a readable format with indentation\n\nAll this helps the developer to focus on implementing the business logic of an application, instead of struggling with a mapper trying to understand how to get the data from the database.\n\nSee the example [here](https://github.com/ponyorm/pony/blob/orm/pony/orm/examples/estore.py)\n\n\nSupport Pony ORM Development\n----------------------------\n\nPony ORM is Apache 2.0 licensed open source project. If you would like to support Pony ORM development, please consider:\n\n[Become a backer or sponsor](https://ponyorm.org/donation.html)\n\n\nOnline tool for database design\n-------------------------------\n\nPony ORM also has the Entity-Relationship Diagram Editor which is a great tool for prototyping. You can create your database diagram online at [https://editor.ponyorm.com](https://editor.ponyorm.com), generate the database schema based on the diagram and start working with the database using declarative queries in seconds.\n\n\nDocumentation\n-------------\n\nDocumentation is available at [https://docs.ponyorm.org](https://docs.ponyorm.org)\nThe documentation source is available at [https://github.com/ponyorm/pony-doc](https://github.com/ponyorm/pony-doc).\nPlease create new documentation related issues [here](https://github.com/ponyorm/pony-doc/issues) or make a pull request with your improvements.\n\n\nLicense\n-------\n\nPony ORM is released under the Apache 2.0 license.\n\n\nPonyORM community\n-----------------\n\nPlease post your questions on [Stack Overflow](http://stackoverflow.com/questions/tagged/ponyorm).\nMeet the PonyORM team, chat with the community members, and get your questions answered on our community [Telegram group](https://t.me/ponyorm).\nJoin our newsletter at [ponyorm.org](https://ponyorm.org).\nReach us on [Twitter](https://twitter.com/ponyorm).\n\nCopyright (c) 2013-2022 Pony ORM. All rights reserved. info (at) ponyorm.org\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pony",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.2216796875,
          "content": "from __future__ import print_function\r\n\r\nfrom setuptools import setup\r\nimport sys\r\n\r\nimport unittest\r\n\r\ndef test_suite():\r\n    test_loader = unittest.TestLoader()\r\n    test_suite = test_loader.discover('pony.orm.tests', pattern='test_*.py')\r\n    return test_suite\r\n\r\nname = \"pony\"\r\nversion = __import__('pony').__version__\r\ndescription = \"Pony Object-Relational Mapper\"\r\nlong_description = \"\"\"\r\nAbout\r\n=========\r\nPony ORM is easy to use and powerful object-relational mapper for Python.\r\nUsing Pony, developers can create and maintain database-oriented software applications\r\nfaster and with less effort. One of the most interesting features of Pony is\r\nits ability to write queries to the database using generator expressions.\r\nPony then analyzes the abstract syntax tree of a generator and translates it\r\nto its SQL equivalent.\r\n\r\nFollowing is an example of a query in Pony::\r\n\r\n    select(p for p in Product if p.name.startswith('A') and p.cost <= 1000)\r\n\r\nSuch approach simplify the code and allows a programmer to concentrate\r\non the business logic of the application.\r\n\r\nPony translates queries to SQL using a specific database dialect.\r\nCurrently Pony works with SQLite, MySQL, PostgreSQL and Oracle databases.\r\n\r\nThe package `pony.orm.examples <https://github.com/ponyorm/pony/tree/orm/pony/orm/examples>`_\r\ncontains several examples.\r\n\r\nInstallation\r\n=================\r\n::\r\n\r\n    pip install pony\r\n\r\nEntity-Relationship Diagram Editor\r\n=============================================\r\n`Pony online ER Diagram Editor <https://editor.ponyorm.com>`_ is a great tool for prototyping.\r\nYou can draw your ER diagram online, generate  Pony entity declarations or SQL script for\r\ncreating database schema based on the diagram and start working with the database in seconds.\r\n\r\nPony ORM Links:\r\n=================\r\n- Main site: https://ponyorm.com\r\n- Documentation: https://docs.ponyorm.com\r\n- GitHub: https://github.com/ponyorm/pony\r\n- Mailing list:  http://ponyorm-list.ponyorm.com\r\n- ER Diagram Editor: https://editor.ponyorm.com\r\n- Blog: https://blog.ponyorm.com\r\n\"\"\"\r\n\r\nclassifiers = [\r\n    'Development Status :: 4 - Beta',\r\n    'Intended Audience :: Developers',\r\n    'License :: OSI Approved :: Apache Software License',\r\n    'Operating System :: OS Independent',\r\n    'Programming Language :: Python',\r\n    'Programming Language :: Python :: 3',\r\n    'Programming Language :: Python :: 3.8',\r\n    'Programming Language :: Python :: 3.9',\r\n    'Programming Language :: Python :: 3.10',\r\n    'Programming Language :: Python :: 3.11',\r\n    'Programming Language :: Python :: 3.12',\r\n    'Programming Language :: Python :: Implementation :: PyPy',\r\n    'Topic :: Software Development :: Libraries',\r\n    'Topic :: Database'\r\n]\r\n\r\nauthor = ', '.join([\r\n    'Alexander Kozlovsky <alexander.kozlovsky@gmail.com>',\r\n    'Alexey Malashkevich <alexey@ponyorm.org>',\r\n    'Alexander Tischenko <sashaaero@yandex.ru>'\r\n])\r\nauthor_email = \"team@ponyorm.com\"\r\nurl = \"https://ponyorm.com\"\r\nproject_urls = {\r\n    \"Documentation\": \"https://docs.ponyorm.org\",\r\n    \"Source\": \"https://github.com/ponyorm/pony\",\r\n}\r\nlicence = \"Apache License Version 2.0\"\r\n\r\npackages = [\r\n    \"pony\",\r\n    \"pony.flask\",\r\n    \"pony.flask.example\",\r\n    \"pony.orm\",\r\n    \"pony.orm.dbproviders\",\r\n    \"pony.orm.examples\",\r\n    \"pony.orm.integration\",\r\n    \"pony.orm.tests\",\r\n    \"pony.thirdparty\",\r\n    \"pony.utils\"\r\n]\r\n\r\npackage_data = {\r\n    'pony.flask.example': ['templates/*.html'],\r\n    'pony.orm.tests': ['queries.txt']\r\n}\r\n\r\ndownload_url = \"http://pypi.python.org/pypi/pony/\"\r\n\r\nif __name__ == \"__main__\":\r\n    pv = sys.version_info[:2]\r\n    if pv < (3, 8) or pv > (3, 12):\r\n        s = \"Sorry, but %s %s requires Python of one of the following versions: 3.8-3.12.\" \\\r\n            \" You have version %s\"\r\n        print(s % (name, version, sys.version.split(' ', 1)[0]))\r\n        sys.exit(1)\r\n\r\n    setup(\r\n        name=name,\r\n        version=version,\r\n        description=description,\r\n        long_description=long_description,\r\n        classifiers=classifiers,\r\n        author=author,\r\n        author_email=author_email,\r\n        url=url,\r\n        project_urls=project_urls,\r\n        license=licence,\r\n        packages=packages,\r\n        package_data=package_data,\r\n        download_url=download_url,\r\n        test_suite='setup.test_suite'\r\n    )\r\n"
        }
      ]
    }
  ]
}