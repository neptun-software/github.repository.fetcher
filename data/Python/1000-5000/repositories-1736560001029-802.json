{
  "metadata": {
    "timestamp": 1736560001029,
    "page": 802,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rlabbe/filterpy",
      "stars": 3419,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.22265625,
          "content": "# Auto detect text files and perform LF normalization\n* text eol=lf\n\n\n# Standard to msysgit\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n\n*.py eol=lf\n*.txt eol=lf\n*.cfg eol=lf\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2177734375,
          "content": "*.pyc\n*.tex\n*.toc\n*.aux\n*.out\nbook_files/\ndist/\n*egg-info*\n_build/\n_static\n_templatesq\nquadrature.py\n.settings/\n.cache/\nwin-32/\nwin-64/\nlinux-32/\nlinux-64/\nosx-64/\nfilterpy/kalman/i.py\nfilterpy/inprogress.py\n.pytest_cache\n\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 15.970703125,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint.\njobs=1\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=print-statement,\n        parameter-unpacking,\n        unpacking-in-except,\n        old-raise-syntax,\n        backtick,\n        long-suffix,\n        old-ne-operator,\n        old-octal-literal,\n        import-star-module-level,\n        non-ascii-bytes-literal,\n        raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        locally-enabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        duplicate-code,\n        apply-builtin,\n        basestring-builtin,\n        buffer-builtin,\n        cmp-builtin,\n        coerce-builtin,\n        execfile-builtin,\n        file-builtin,\n        long-builtin,\n        raw_input-builtin,\n        reduce-builtin,\n        standarderror-builtin,\n        unicode-builtin,\n        xrange-builtin,\n        coerce-method,\n        delslice-method,\n        getslice-method,\n        setslice-method,\n        no-absolute-import,\n        old-division,\n        dict-iter-method,\n        dict-view-method,\n        next-method-called,\n        metaclass-assignment,\n        indexing-exception,\n        raising-string,\n        reload-builtin,\n        oct-method,\n        hex-method,\n        nonzero-method,\n        cmp-method,\n        input-builtin,\n        round-builtin,\n        intern-builtin,\n        unichr-builtin,\n        map-builtin-not-iterating,\n        zip-builtin-not-iterating,\n        range-builtin-not-iterating,\n        filter-builtin-not-iterating,\n        using-cmp-argument,\n        eq-without-hash,\n        div-method,\n        idiv-method,\n        rdiv-method,\n        exception-message-attribute,\n        invalid-str-codec,\n        sys-max-int,\n        bad-python3-import,\n        deprecated-string-function,\n        deprecated-str-translate-call,\n        deprecated-itertools-function,\n        deprecated-types-field,\n        next-method-defined,\n        dict-items-not-iterating,\n        dict-keys-not-iterating,\n        dict-values-not-iterating\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=c-extension-no-member\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio).You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=optparse.Values,sys.exit\n\n\n[BASIC]\n\n# Naming style matching correct argument names\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style\n#argument-rgx=\n\n# Naming style matching correct attribute names\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Naming style matching correct class attribute names\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style\n#class-attribute-rgx=\n\n# Naming style matching correct class names\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-style\n#class-rgx=\n\n# Naming style matching correct constant names\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style\n#inlinevar-rgx=\n\n# Naming style matching correct method names\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style\n#method-rgx=\n\n# Naming style matching correct module names\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty\n\n# Naming style matching correct variable names\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style\n#variable-rgx=\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,\n               dict-separator\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in a if statement\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=optparse,tkinter.tix\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Roger R. Labbe Jr\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.453125,
          "content": "include filterpy/changelog.txt\ninclude LICENSE\nrecursive-include filterpy/common/tests *.py\nrecursive-include filterpy/discrete_bayes/tests *.py\nrecursive-include filterpy/gh/tests *.py\nrecursive-include filterpy/hinfinity/tests *.py\nrecursive-include filterpy/kalman/tests *.py\nrecursive-include filterpy/leastsq/tests *.py\nrecursive-include filterpy/memory/tests *.py\nrecursive-include filterpy/monte_carlo/tests *.py\nrecursive-include filterpy/stats/tests *.py\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 10.55078125,
          "content": "FilterPy - Kalman filters and other optimal and non-optimal estimation filters in Python.\n-----------------------------------------------------------------------------------------\n\n.. image:: https://img.shields.io/pypi/v/filterpy.svg\n        :target: https://pypi.python.org/pypi/filterpy\n        \n.. image:: https://readthedocs.org/projects/pip/badge/?version=latest&style=flat\n        :target: https://filterpy.readthedocs.io/en/latest/        \n     \n\n**NOTE**: Imminent drop of support of Python 2.7, 3.4. See section below for details.\n\nThis library provides Kalman filtering and various related optimal and\nnon-optimal filtering software written in Python. It contains Kalman\nfilters, Extended Kalman filters, Unscented Kalman filters, Kalman\nsmoothers, Least Squares filters, fading memory filters, g-h filters,\ndiscrete Bayes, and more.\n\nThis is code I am developing in conjunction with my book Kalman and\nBayesian Filter in Python, which you can read/download at\nhttps://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/\n\nMy aim is largely pedalogical - I opt for clear code that matches the\nequations in the relevant texts on a 1-to-1 basis, even when that has a\nperformance cost. There are places where this tradeoff is unclear - for\nexample, I find it somewhat clearer to write a small set of equations\nusing linear algebra, but numpy's overhead on small matrices makes it\nrun slower than writing each equation out by hand. Furthermore, books\nsuch Zarchan present the written out form, not the linear algebra form.\nIt is hard for me to choose which presentation is 'clearer' - it depends\non the audience. In that case I usually opt for the faster implementation.\n\nI use NumPy and SciPy for all of the computations. I have experimented\nwith Numba and it yields impressive speed ups with minimal costs, but I \nam not convinced that I want to add that requirement to my project. It \nis still on my list of things to figure out, however.\n\nSphinx generated documentation lives at http://filterpy.readthedocs.org/.\nGeneration is triggered by git when I do a check in, so this will always\nbe bleeding edge development version - it will often be ahead of the\nreleased version. \n\n\nPlan for dropping Python 2.7 support\n------------------------------------\n\nI haven't finalized my decision on this, but NumPy is dropping\nPython 2.7 support in December 2018. I will certainly drop Python\n2.7 support by then; I will probably do it much sooner.\n\nAt the moment FilterPy is on version 1.x. I plan to fork the project\nto version 2.0, and support only Python 3.5+. The 1.x version \nwill still be available, but I will not support it. If I add something\namazing to 2.0 and someone really begs, I might backport it; more\nlikely I would accept a pull request with the feature backported\nto 1.x. But to be honest I don't forsee this happening.\n\nWhy 3.5+, and not 3.4+? 3.5 introduced the matrix multiply symbol,\nand I want my code to take advantage of it. Plus, to be honest,\nI'm being selfish. I don't want to spend my life supporting this\npackage, and moving as far into the present as possible means\na few extra years before the Python version I choose becomes\nhopelessly dated and a liability. I recognize this makes people\nrunning the default Python in their linux distribution more\npainful. All I can say is I did not decide to do the Python\n3 fork, and I don't have the time to support the bifurcation\nany longer.\n\nI am making edits to the package now in support of my book;\nonce those are done I'll probably create the 2.0 branch. \nI'm contemplating a SLAM addition to the book, and am not\nsure if I will do this in 3.5+ only or not.\n\n\nInstallation\n------------\n\nThe most general installation is just to use pip, which should come with\nany modern Python distribution.\n\n.. image:: https://img.shields.io/pypi/v/filterpy.svg\n        :target: https://pypi.python.org/pypi/filterpy\n        \n::\n\n    pip install filterpy\n\nIf you prefer to download the source yourself\n\n::\n\n    cd <directory you want to install to>\n    git clone http://github.com/rlabbe/filterpy\n    python setup.py install\n\nIf you use Anaconda, you can install from the conda-forge channel. You\nwill need to add the conda-forge channel if you haven't already done so:\n\n::\n    conda config --add channels conda-forge\n    \nand then install with:\n\n::\n    conda install filterpy\n    \n    \nAnd, if you want to install from the bleeding edge git version\n\n::\n\n    pip install git+https://github.com/rlabbe/filterpy.git\n\nNote: I make no guarantees that everything works if you install from here.\nI'm the only developer, and so I don't worry about dev/release branches and\nthe like. Unless I fix a bug for you and tell you to get this version because\nI haven't made a new release yet, I strongly advise not installing from git.\n\n\n    \n\nBasic use\n---------\n\nFull documentation is at\nhttps://filterpy.readthedocs.io/en/latest/\n\n\nFirst, import the filters and helper functions.\n\n.. code-block:: python\n\n    import numpy as np\n    from filterpy.kalman import KalmanFilter\n    from filterpy.common import Q_discrete_white_noise\n\nNow, create the filter\n\n.. code-block:: python\n\n    my_filter = KalmanFilter(dim_x=2, dim_z=1)\n\n\nInitialize the filter's matrices.\n\n.. code-block:: python\n\n    my_filter.x = np.array([[2.],\n                    [0.]])       # initial state (location and velocity)\n\n    my_filter.F = np.array([[1.,1.],\n                    [0.,1.]])    # state transition matrix\n\n    my_filter.H = np.array([[1.,0.]])    # Measurement function\n    my_filter.P *= 1000.                 # covariance matrix\n    my_filter.R = 5                      # state uncertainty\n    my_filter.Q = Q_discrete_white_noise(dim=2, dt=0.1, var=0.1) # process uncertainty\n\n\nFinally, run the filter.\n\n.. code-block:: python\n\n    while True:\n        my_filter.predict()\n        my_filter.update(get_some_measurement())\n\n        # do something with the output\n        x = my_filter.x\n        do_something_amazing(x)\n\nSorry, that is the extent of the documentation here. However, the library\nis broken up into subdirectories: gh, kalman, memory, leastsq, and so on.\nEach subdirectory contains python files relating to that form of filter.\nThe functions and methods contain pretty good docstrings on use.\n\nMy book https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python/\nuses this library, and is the place to go if you are trying to learn\nabout Kalman filtering and/or this library. These two are not exactly in \nsync - my normal development cycle is to add files here, test them, figure \nout how to present them pedalogically, then write the appropriate section\nor chapter in the book. So there is code here that is not discussed\nyet in the book.\n\n\nRequirements\n------------\n\nThis library uses NumPy, SciPy, Matplotlib, and Python. \n\nI haven't extensively tested backwards compatibility - I use the\nAnaconda distribution, and so I am on Python 3.6 and 2.7.14, along with\nwhatever version of NumPy, SciPy, and matplotlib they provide. But I am\nusing pretty basic Python - numpy.array, maybe a list comprehension in\nmy tests.\n\nI import from **__future__** to ensure the code works in Python 2 and 3.\n\n\nTesting\n-------\n\nAll tests are written to work with py.test. Just type ``py.test`` at the\ncommand line.\n\nAs explained above, the tests are not robust. I'm still at the stage\nwhere visual plots are the best way to see how things are working.\nApologies, but I think it is a sound choice for development. It is easy\nfor a filter to perform within theoretical limits (which we can write a\nnon-visual test for) yet be 'off' in some way. The code itself contains\ntests in the form of asserts and properties that ensure that arrays are\nof the proper dimension, etc.\n\nReferences\n----------\n\nI use three main texts as my refererence, though I do own the majority\nof the Kalman filtering literature. First is Paul Zarchan's\n'Fundamentals of Kalman Filtering: A Practical Approach'. I think it by\nfar the best Kalman filtering book out there if you are interested in\npractical applications more than writing a thesis. The second book I use\nis Eli Brookner's 'Tracking and Kalman Filtering Made Easy'. This is an\nastonishingly good book; its first chapter is actually readable by the\nlayperson! Brookner starts from the g-h filter, and shows how all other\nfilters - the Kalman filter, least squares, fading memory, etc., all\nderive from the g-h filter. It greatly simplifies many aspects of\nanalysis and/or intuitive understanding of your problem. In contrast,\nZarchan starts from least squares, and then moves on to Kalman\nfiltering. I find that he downplays the predict-update aspect of the\nalgorithms, but he has a wealth of worked examples and comparisons\nbetween different methods. I think both viewpoints are needed, and so I\ncan't imagine discarding one book. Brookner also focuses on issues that\nare ignored in other books - track initialization, detecting and\ndiscarding noise, tracking multiple objects, an so on.\n\nI said three books. I also like and use Bar-Shalom's Estimation with\nApplications to Tracking and Navigation. Much more mathematical than the\nprevious two books, I would not recommend it as a first text unless you\nalready have a background in control theory or optimal estimation. Once\nyou have that experience, this book is a gem. Every sentence is crystal\nclear, his language is precise, but each abstract mathematical statement\nis followed with something like \"and this means...\".\n\n\nLicense\n-------\n.. image:: https://anaconda.org/rlabbe/filterpy/badges/license.svg   :target: https://anaconda.org/rlabbe/filterpy\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Roger R. Labbe Jr\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.TION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "conda",
          "type": "tree",
          "content": null
        },
        {
          "name": "creating_a_release.rst",
          "type": "blob",
          "size": 1.3369140625,
          "content": "Steps to Create Release\n=======================\n\n* run pytest\n\n* run pylint --disable=similarities --disable=R0205 filterpy\n  R0205 turns off warning about deriving from object. We still support 2.7, so it is needed\n\n* update filterpy/filterpy/__init__.py with the version number.\n\n* update filterpy/filterpy/changelog.txt with the changes for this release.\n\n* 'rm *' in dist\n\n* If necessary, edit filterpy/docs/index.rst to add any classes. Add .rst file for those new classes to the /docs subdirectories.\n\n* In /docs, run 'make html'. Inspect docs/_build/html/index.html for correctness.\n\n* Once docs are good, commit to git.\n\n* tag with 'git tag -a 0.1.23 -m \"version 0.1.23\"\n\n* push to origin. That automatically triggers a build on readthedocs.org.\n\n* push tags to origin with git push origin --tags\n\n* Update pypi.org with 'bash pypi-install.sh'\n\n* You need to manually update the documentation code at pythonhosted, PyPi's documentation server.\n\n    cd /docs/_build/html\n    zip -r filterpy.zip *.*\n    \n    add all files to a zip file (index.html must be at base)\n    go to https://pypi.python.org/pypi?%3Aaction=pkg_edit&name=filterpy\n    scroll to bottom, add the zip file you just made\n    click 'Upload Documentation button'\n\n    it usually takes several minutes for the documentation to show up here:\n    https://pythonhosted.org/filterpy/\n    \n    \n    \n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "filterpy",
          "type": "tree",
          "content": null
        },
        {
          "name": "pypi-install.sh",
          "type": "blob",
          "size": 0.09375,
          "content": "python setup.py sdist --formats=zip\npython setup.py register -r pypi\ntwine upload dist/* -r pypi"
        },
        {
          "name": "pypi-test-install.sh",
          "type": "blob",
          "size": 0.13671875,
          "content": "python setup.py sdist --formats=gztar,zip\npython setup.py register -r test\n#python setup.py sdist upload -r test\ntwine upload dist/* -r test"
        },
        {
          "name": "requirements.readthedocs..txt",
          "type": "blob",
          "size": 0.01953125,
          "content": "numpy\nscipy\nnumpydoc"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.01171875,
          "content": "numpy\nscipy\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.rst"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.9072265625,
          "content": "from setuptools import setup, find_packages  # Always prefer setuptools over distutils\nfrom codecs import open  # To use a consistent encoding\nfrom os import path\nimport filterpy\n\nhere = path.abspath(path.dirname(__file__))\n\n# Get the long description from the relevant file\nwith open(path.join(here, 'README.rst'), encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='filterpy',\n\n    # Versions should comply with PEP440.  For a discussion on single-sourcing\n    # the version across setup.py and the project code, see\n    # http://packaging.python.org/en/latest/tutorial.html#version\n    version=filterpy.__version__,\n\n    description='Kalman filtering and optimal estimation library',\n    long_description=long_description,\n\n    # The project's main homepage.\n    url='https://github.com/rlabbe/filterpy',\n\n    # Author details\n    author='Roger Labbe',\n    author_email='rlabbejr@gmail.com',\n\n    # Choose your license\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   4 - Beta\n        #   5 - Production/Stable\n        'Development Status :: 5 - Production/Stable',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Intended Audience :: Education',\n        'Intended Audience :: Science/Research',\n        'Topic :: Scientific/Engineering',\n        'Topic :: Scientific/Engineering :: Mathematics',\n        'Topic :: Scientific/Engineering :: Physics',\n        'Topic :: Utilities',\n\n\n        # Pick your license as you wish (should match \"license\" above)\n        'License :: OSI Approved :: MIT License',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        \n        'Operating System :: Microsoft :: Windows',\n        'Operating System :: POSIX',\n        'Operating System :: Unix',\n        'Operating System :: MacOS'\n    ],\n\n    # What does your project relate to?\n    keywords='Kalman filters filtering optimal estimation tracking',\n\n    # You can just specify the packages manually here if your project is\n    # simple. Or you can use find_packages().\n    packages=find_packages(exclude=['contrib']),\n\n    # List run-time dependencies here.  These will be installed by pip when your\n    # project is installed. For an analysis of \"install_requires\" vs pip's\n    # requirements files see:\n    # https://packaging.python.org/en/latest/technical.html#install-requires-vs-requirements-files\n    install_requires=['numpy', 'scipy', 'matplotlib'],\n\n    # If there are data files included in your packages that need to be\n    # installed, specify them here.  If using Python 2.6 or less, then these\n    # have to be included in MANIFEST.in as well.\n    package_data={\n        'filterpy': ['README.rst', 'filterpy/changelog.txt', 'LICENSE', 'filterpy/kalman/tests/*.py'],\n    },\n\n    # Although 'package_data' is the preferred approach, in some case you may\n    # need to place data files outside of your packages.\n    # see http://docs.python.org/3.4/distutils/setupscript.html#installing-additional-files\n    # In this case, 'data_file' will be installed into '<sys.prefix>/my_data'\n    #data_files=[('my_data', ['data/data_file'])],\n\n    # To provide executable scripts, use entry points in preference to the\n    # \"scripts\" keyword. Entry points provide cross-platform support and allow\n    # pip to create the appropriate form of executable for the target platform.\n    #entry_points={\n    #    'console_scripts': [\n    #        'sample=sample:main',\n    #    ],\n    #},\n)\n"
        }
      ]
    }
  ]
}