{
  "metadata": {
    "timestamp": 1736559891295,
    "page": 644,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flasgger/flasgger",
      "stars": 3641,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.2548828125,
          "content": "[run]\ninclude =\n  flasgger/*.py\n\n[report]\nexclude_lines =\n    pragma: no cover\n    raise NotImplementedError.*\n    raise RuntimeError.*\n    warnings\\.warn.*\n    def __repr__\n    def __str__\n    def main()\n    if __name__ == .__main__.:\n    except ImportError.*\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.015625,
          "content": "Dockerfile\n.git\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.078125,
          "content": "flasgger/ui2/static/* linguist-vendored\nflasgger/ui3/static/* linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7138671875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n.idea\n*.idea\n*.swp\n.eggs/\nvenv/\n.activate.sh\n.deactivate.sh\n"
        },
        {
          "name": ".landscape.yaml",
          "type": "blob",
          "size": 0.296875,
          "content": "pylint:\n  disable:\n    - bare-except\n    - unused-argument\n    - pointless-string-statement\n    - too-many-locals\n    - too-many-arguments\n    - protected-access\n    - unused-variable\n    - super-on-old-class\n\npep8:\n  disable:\n    - E1002\n\nrequirements:\n    - requirements.txt\n    - requirements-dev.txt\n"
        },
        {
          "name": ".python-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "3.6.1\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.01953125,
          "content": "language: python\n\nmatrix:\n  include:\n    - python: 3.6\n      env: TOXENV=py36-flask010\n    - python: 3.6\n      env: TOXENV=py36-flask10\n    - python: 3.6\n      env: TOXENV=py36-flask104\n#    - python: 3.7\n#      env: TOXENV=py37-flask010\n#      dist: xenial\n#      sudo: true\n#    - python: 3.7\n#      env: TOXENV=py37-flask10\n#      dist: xenial\n#      sudo: true\n    - python: 3.7\n      env: TOXENV=py37-flask104\n      dist: xenial\n      sudo: true\n    - python: 3.7\n      env: TOXENV=py37-flask104-marshmallow-apispec\n    - python: 3.8-dev\n      env: TOXENV=py38-dev-flasklatest\n      dist: xenial\n      sudo: true\n    - python: 3.9\n      env: TOXENV=py39-flask104\n      dist: jammy\n    - python: 3.11\n      env: TOXENV=py311-flasklatest\n      dist: jammy\n    - python: 3.11\n      env: TOXENV=py311-marshmallow-apispec\n      dist: jammy\n  allow_failures:\n    - env: TOXENV=py38-dev-flasklatest\n    - env: TOXENV=py36-flask010\n    - env: TOXENV=py36-flask10\n\nbefore_install:\n  - pip install tox\n\nscript:\n  - tox\n\nafter_success:\n  - coveralls\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.142578125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at rochacbruno@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.341796875,
          "content": "FROM python:3.6\n\nADD . /flasgger\nWORKDIR /flasgger\n\nRUN pip install -U --no-cache-dir pip && \\\n    pip install --no-cache-dir -r requirements.txt -r requirements-dev.txt && \\\n    pip install --no-cache-dir etc/flasgger_package && \\\n    make test && \\\n    python setup.py sdist bdist_wheel --universal\n\nEXPOSE 5000\n\nCMD [\"python3\", \"demo_app/app.py\"]\n"
        },
        {
          "name": "HISTORY",
          "type": "blob",
          "size": 9.263671875,
          "content": "Changelog\n=========\n\nThese are all the changes in Flasgger since the 0.6.0 release\n\n0.9.7b2\n-----\n- chore: noqa for APISpecsView.get bare exception with json.dumps fallback (exception logging preserved)\n- fix: flask >== 2.3 json encoder change\n- chore: python 3.11 and flasklatest travis config\n- removed usage of safe_str_cmp of werkzeug. using hmac.compare_digest instead (#532)\n- Resolve #562 - Incompatibility with flask 2.3 (#564)\n- Fix the wrong code block separation in README (#516)\n- Fix openapi3 request parse validation (#505)\n- Remove top level definitions, move #/definitions to #/components/schemas if configured to openapi3 (#504)\n- Fix required body if one parameter is required (#476)\n- change cian -> cyan (#502)\n- Implemented the SwaggerUI urls config parameter which displays a dropdown of API specs instead of an editable textbox (#473)\n- Fix indentation in readme example (#480)\n- fix path parameter bug for integers (#485)\n- Wrapping APISpecsView get response in a try except (#420)\n- Merge branch 'master' into generate-schema-command\n- Trivial flake issue resolved for docker build of flasgger (#452)\n- Deprecate imp [Breaks py2.7 compatibility] (#413) Resolves #434\n- Fix line too long error\n- Remove python2\n- Add command to generate the specs\n- Fix error format and add regression tests\n- Extract is_openapi3 in utils and test it\n- Add flask_mongorest\n- Set displayOperationId to true\n- Pep8\n- Fix chinese table of contents\n- Fix for apispec 4\n- Add chinese docs\n- Fix definition docstring splitting\n- Add use func validate from utils\n- add test case for post request\n- Change test for swag_schema\n- Easy usage Marshmallow and flasgger\n- PEP 8 compliance for oauth static html default\n- Add Swagger UI auth config to ui.inioauth\n- Make available oauth2 redirect html\n\nNOTE: python2 is deprecated and no longer supported in flasgger\n\n0.9.5\n-----\n- 'swag_from' supports 'pathlib.Path'\n- Added support for OpenAPI3 parameter schema parsing [#390](https://github.com/flasgger/flasgger/pull/390)\n- Enable optional OpenAPI3 fields [#366](https://github.com/flasgger/flasgger/issues/366)\n- Fix access to local $ref definition #367\n- Add support for custom validation_function and error_handler\n- Accept pathlib.Path objects as path specification for swag_from\n- Delay RuntimeError for not installing apispec marshmallow in Schema #384\n- Ensure downward compatibility for werkzeug #391\n- Support default configuration merging #383\n- Update `swagger-ui` to `3.28.0` (improves safety)\n\n0.9.4\n-----\n- Changed apispec version supported to 2.0.2\n- Added support for OpenAPI3 callback field\n- Changed jsonschema version supported to jsonschema>=3.0.1\n- Changed json data to be parsed from request directly\n- Changed swagger-ui 3 version to 3.23.1\n- Added support for JWT_AUTH_HEADER_NAME\n- Changed to yaml.safe_load\n- Added support for docExpansion in swagger-ui 2\n- Fixed bug for apispec_to_template definition [#301](https://github.com/flasgger/flasgger/commit/0ee67a755121000dad5b4405f2dd2bcb50c8ad51)\n- Added support for using external yml file to specify parameter [commit by @isaacfi](https://github.com/flasgger/flasgger/commit/5ee9586febd931cbdce54527f40c53def4d747d1)\n- Changed flask-restful abort call to abort(code, e.message)\n- Added definitions to parsed_data validation [#330] (https://github.com/flasgger/flasgger/commit/8310196821ed61374581bb99d2be7739661b3afa)\n- Added support for Marshmallow Schema in Function Based View [#341] (https://github.com/flasgger/flasgger/commit/fbaa7a12859823137c485f9f6fb5591325dc90da)\n- Changed status code for no data to validate from 500 to 400\n- Added require_data kwarg to validate() to make data optional [#340](https://github.com/flasgger/flasgger/commit/b8e6b4fc7390d4f8f7ddcd113d70a54acd54da1d)\n- Added support for importing OpenAPI3 spec components from config\n- Enable \"import:\" syntax in template.yml\n- Forward validation_error_handler in Marshmallow APIspec [#352](https://github.com/flasgger/flasgger/commit/c5b36a7eee8958a77cbc4b3b4629416b5d9a987e)\n\n0.9.2\n-----\n\n- Fixed packaging issue caused by the inclusion of examples [#242](https://github.com/rochacbruno/flasgger/issues/242)\n- Enhancement allowing swagger-ui and static js to be loaded from external URLs [#245](https://github.com/rochacbruno/flasgger/pull/245)\n- Added ui_params_text to allow raw text to be added to ui_params [#244](https://github.com/rochacbruno/flasgger/pull/244)\n- Auto-disable Flasgger caching when running Flask in debug mode [#250](https://github.com/rochacbruno/flasgger/pull/250)\n\n0.9.1\n-----\n\n- Updated support for apispec >=0.39.0 [#205](https://github.com/rochacbruno/flasgger/pull/205)\n- Added install of etc/flasgger_package in requirements-dev.txt [#208](https://github.com/rochacbruno/flasgger/pull/208)\n- repaired key error thrown when a path is given instead of in the func [#210](https://github.com/rochacbruno/flasgger/pull/210)\n- fixed static file paths in demo app [#213](https://github.com/rochacbruno/flasgger/pull/213)\n- removed pre-compile/cache *.pyc files from dist [#137](https://github.com/rochacbruno/flasgger/issues/137)\n- auto-detect unicode charset-encoding in YAML files [#156](https://github.com/rochacbruno/flasgger/issues/156)\n- bug fix, use getattr instead of dict get [#226](https://github.com/rochacbruno/flasgger/pull/226)\n- added dev support for Docker (for demo app)\n- added support for parsed MethodView (flask_restful) [#222](https://github.com/rochacbruno/flasgger/pull/222)\n\n0.9.0\n-----\n\n- Updated Swagger UI 3.x\n- uiversion now defaults to 3\n- 'hide_top_bar' config option to remove the green top bar\n- 'fotter_text' added to customize the footer text (allows html and <script>)\n- templates/flasgger/footer.html added and can be replaced to customization\n  this footer.html is the right place for custom <script>\n- 'top_text' added to customize the header text (allows html)\n- templates/flasgger/top.html added and can be replaced to customization\n- 'head_text' added to customize the <head> (allows html)\n- templates/flasgger/head.html added and can be replaced to customization\n- added 'doc_expansion' config to control the collapse\n- added 'ui_params' to allow override of any swagger.ui values\n- See examples/changelog_090.py\n- schemes are now pulled from config when present [#201](https://github.com/rochacbruno/flasgger/pull/201)\n- UI template refactoring/separation\n\n0.8.3\n-----\n\n- Small update to release target (using twine)\n\n0.8.2\n-----\n\n- Update index.html \n- Update index.html \n- Merge pull request #180 from anilpai/anilpai-patch-1 \n- Update jwt_auth.py \n- Merge pull request #182 from anilpai/patch-1 \n- Avoid inclusion of empty definition dict \n- Merge pull request #184 from mmichaels01/master \n- Fix README.md error \n- Merge pull request #186 from phylee/master \n- Fix get_schema exception message \n- Merge pull request #187 from boris-42/fix_get_schema_exc_message \n- Fix erroneous extra definitions objects \n- adding support for requestBody \n- fixing python 2.7 incompliant syntax \n- Merge pull request #191 from zrayn/add-requestBody-support \n- Merge pull request #190 from abstiles/fix-extra-definitions \n- Validate examples according to Swagger spec \n- Correct example's declaration as OpenAPI 3.0 \n- Correct reference of invalid type int32 \n- Make example python filter more strict \n- Fall back to simpler validation for OpenAPI 3 \n- Skip validation of intentionally invalid example \n- Merge pull request #193 from abstiles/enhance-tests \n\n0.8.1\n-----\nJWT - Flask_jwt support added\n\n0.8.0\n-----\n- Reverted the automatic set of json_encoder and allowed user to import LAzyJSONEncoder  (tks @SBillion)\n\n0.7.0\n-----\n- Added support for LazyString https://github.com/rochacbruno/flasgger/issues/158\n\n0.6.6\n-----\n\n- Support custom validation functions\n- (TODO) Allow the caller to handle validation exceptions (solves #122)\n- Swagger::get_schema method to get defined schemas as python dicts\n- Updated static UI versions from latest github distribution\n- Better test for `import` functionality\n\n0.6.5\n-----\n\n- Suporting for decorating FlasggerViews (to protect with login etc)\n- description and summary are now optional\n- specs_route fix to be customized `/specs_route` to `/anything`\n- enable/disable swagger UI (if you only need specs json)\n- attempt to fix #102 allowing `import:` from subfolders\n\n0.6.4\n-----\n\n- template_file argument added to Swagger class\n\n0.6.3\n-----\n- HOTFIX: Support views using `decorator` package (#80)\n\n0.6.2\n-----\n- introduced tests on Travis CI (examples apps as test cases)\n- Fix blueprint support (examples/blueprint_example.py)\n- Added `prefix_ids = True` for compat with <= 05.14 (see examples/compat.py)\n- Added `import: another.yml` to inherit YAML files.\n- Fix missing `lib` static folder\n- Added support for Flask RESTful (examples/restful.py)\n- Added APISpec support (examples/apispec.py)\n- Fix error in case of empty MethodViews\n\n0.6.1\n-----\n- HOTFIX: added six (missing requirement)\n\n0.6.0\n-----\n\n- Fixed support for MethodViews\n- Added swag.definition to class based definitions\n- Added support for docs in dispatch_request (for FlaskRESTful compat)\n- Upgrades Swagger UI\n- Added `uiversion = 3` to support new experimental swagger UI\n- Improved `validate` to abort with error so no need for try: validate...\n- `validate` does not require `root` argument\n- Definitions is no more prefixed with fucntion and http method names\n- Dictionary can be used as specs in `@swag_from`\n\n0.5.14\n------\n\nNo history for older versions\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Bruno Rocha\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.9990234375,
          "content": "include *.md LICENSE\n\nrecursive-include flasgger *\nrecursive-include flasgger/ui2 *\nrecursive-include flasgger/ui2/static *\nrecursive-include flasgger/ui2/static/css *\nrecursive-include flasgger/ui2/static/fonts *\nrecursive-include flasgger/ui2/static/images *\nrecursive-include flasgger/ui2/static/lang *\nrecursive-include flasgger/ui2/static/lib *\nrecursive-include flasgger/ui2/templates *\nrecursive-include flasgger/ui2/templates/flasgger *\nrecursive-include flasgger/ui3 *\nrecursive-include flasgger/ui3/static *\nrecursive-include flasgger/ui3/static/css *\nrecursive-include flasgger/ui3/static/fonts *\nrecursive-include flasgger/ui3/static/images *\nrecursive-include flasgger/ui3/static/lang *\nrecursive-include flasgger/ui3/static/lib *\nrecursive-include flasgger/ui3/templates *\nrecursive-include flasgger/ui3/templates/flasgger *\nrecursive-include demo_app *\nrecursive-include etc *\nrecursive-include examples *\nrecursive-include tests *\n\nrecursive-exclude flasgger __pycache__\nrecursive-exclude flasgger *.py[co]\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.8662109375,
          "content": ".PHONY: install\ninstall:\n\t@python setup.py develop\n\n.PHONY: pep8\npep8:\n\t@flake8 flasgger --ignore=F403\n\n.PHONY: flasgger_package\nflasgger_package:\n\t@cd etc/flasgger_package; python setup.py install\n\n.PHONY: test\ntest: pep8 flasgger_package\n\t@pip freeze\n\t@py.test tests -s -vv --cov --cov-config=.coveragerc --doctest-modules flasgger\n\n.PHONY: sdist\nsdist: test\n\t@rm -rf dist/*\n\t@python setup.py sdist bdist_wheel\n\t@twine upload dist/*\n\n.PHONY: clean\nclean:\n\t@find ./ -name '*.pyc' -exec rm -f {} \\;\n\t@find ./ -name 'Thumbs.db' -exec rm -f {} \\;\n\t@find ./ -name '*~' -exec rm -f {} \\;\n\n.PHONY: release\n\t@rm -rf dist/*\n\t@python setup.py sdist bdist_wheel\n\t@twine upload dist/*\n\n# Updates swagger_ui_dist files\n# Need to manually remove extra files added by this command\nupgrade_swagger_ui:\n\t@tar --strip-components 1 -C flasgger/ui3/static/ -xvf `npm pack swagger-ui-dist@3.28.0` package/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 27.3759765625,
          "content": "# Flasgger\n## Easy Swagger UI for your Flask API\n\n[![Build Status](https://travis-ci.com/flasgger/flasgger.svg?branch=master)](https://travis-ci.com/flasgger/flasgger)\n[![Code Health](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)\n[![Coverage Status](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)\n[![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)\n <a target=\"_blank\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest\"><img alt='Donate with Paypal' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>\n\n\n![flasgger](docs/flasgger.png)\n\nFlasgger is a Flask extension to **extract [OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)** from all Flask views registered in your API.\n\nFlasgger also comes with **[SwaggerUI](http://swagger.io/swagger-ui/) embedded** so you can access [http://localhost:5000/apidocs](localhost:5000/apidocs) and visualize and interact with your API resources.\n\nFlasgger also **provides validation** of the incoming data, using the same specification it can validates if the data received as a POST, PUT, PATCH is valid against the schema defined using **YAML**, **Python dictionaries** or **Marshmallow Schemas**.\n\nFlasgger can work with simple function views or MethodViews using docstring as specification, or using `@swag_from` decorator to get specification from **YAML** or **dict** and also provides **SwaggerView** which can use **Marshmallow Schemas**  as specification.\n\nFlasgger is compatible with `Flask-RESTful` so you can use `Resources` and `swag` specifications together, take a look at [restful example.](examples/restful.py)\n\nFlasgger also supports `Marshmallow APISpec` as base template for specification, if you are using APISPec from Marshmallow take a look at [apispec example.](examples/apispec_example.py)\n\nTable of Contents\n=================\n\n* [Top Contributors](#top-contributors)\n* [Examples and demo app](#examples-and-demo-app)\n  * [Docker](#docker)\n* [Installation](#installation)\n* [Getting started](#getting-started)\n  * [Using docstrings as specification](#using-docstrings-as-specification)\n  * [Using external YAML files](#using-external-yaml-files)\n  * [Using dictionaries as raw specs](#using-dictionaries-as-raw-specs)\n  * [Using Marshmallow Schemas](#using-marshmallow-schemas)\n  * [Using <strong>Flask RESTful</strong> Resources](#using-flask-restful-resources)\n  * [Auto-parsing external YAML docs and MethodViews](#auto-parsing-external-yaml-docs-and-methodviews)\n  * [Handling multiple http methods and routes for a single function](#handling-multiple-http-methods-and-routes-for-a-single-function)\n* [Use the same data to validate your API POST body.](#use-the-same-data-to-validate-your-api-post-body)\n     * [Custom validation](#custom-validation)\n     * [Validation Error handling](#validation-error-handling)\n* [Get defined schemas as python dictionaries](#get-defined-schemas-as-python-dictionaries)\n* [HTML sanitizer](#html-sanitizer)\n* [Swagger UI and templates](#swagger-ui-and-templates)\n* [OpenAPI 3.0 Support](#openapi-30-support)\n  * [Externally loading Swagger UI and jQuery JS/CSS](#externally-loading-swagger-ui-and-jquery-jscss)\n* [Initializing Flasgger with default data.](#initializing-flasgger-with-default-data)\n  * [Getting default data at runtime](#getting-default-data-at-runtime)\n  * [Behind a reverse proxy](#behind-a-reverse-proxy)\n* [Customize default configurations](#customize-default-configurations)\n  * [Extracting Definitions](#extracting-definitions)\n  * [Python2 Compatibility](#python2-compatibility)\n\nCreated by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)\n\n# Top Contributors\n\n[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)\n\n# Examples and demo app\n\nThere are some [example applications](examples/) and you can also play with examples in [Flasgger demo app](http://flasgger.pythonanywhere.com/)\n\n> NOTE: all the examples apps are also test cases and run automatically in Travis CI to ensure quality and coverage.\n\n## Docker\n\nThe examples and demo app can also be built and run as a Docker image/container:\n\n```\ndocker build -t flasgger .\ndocker run -it --rm -p 5000:5000 --name flasgger flasgger\n```\nThen access the Flasgger demo app at http://localhost:5000 .\n\n# Installation\n\n> under your virtualenv do:\n\nEnsure you have latest setuptools\n```\npip install -U setuptools\n```\n\nthen install beta version (recommended)\n\n```\npip install flasgger==0.9.7b2\n```\n\nor (latest stable for legacy apps)\n\n```\npip install flasgger==0.9.5\n```\n\nor (dev version)\n\n```\npip install https://github.com/flasgger/flasgger/tarball/master\n```\n\n> NOTE: If you want to use **Marshmallow Schemas** you also need to run `pip install marshmallow apispec`\n\n## How to run tests\n\n(You may see the command in [.travis.yml](./.travis.yml) for `before_install` part)\n\nIn your virtualenv:\n\n```\npip install -r requirements.txt\npip install -r requirements-dev.txt\nmake test\n```\n\n# Getting started\n\n## Using docstrings as specification\n\nCreate a file called for example `colors.py`\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    This is using docstrings for specifications.\n    ---\n    parameters:\n      - name: palette\n        in: path\n        type: string\n        enum: ['all', 'rgb', 'cmyk']\n        required: true\n        default: all\n    definitions:\n      Palette:\n        type: object\n        properties:\n          palette_name:\n            type: array\n            items:\n              $ref: '#/definitions/Color'\n      Color:\n        type: string\n    responses:\n      200:\n        description: A list of colors (may be filtered by palette)\n        schema:\n          $ref: '#/definitions/Palette'\n        examples:\n          rgb: ['red', 'green', 'blue']\n    \"\"\"\n    all_colors = {\n        'cmyk': ['cyan', 'magenta', 'yellow', 'black'],\n        'rgb': ['red', 'green', 'blue']\n    }\n    if palette == 'all':\n        result = all_colors\n    else:\n        result = {palette: all_colors.get(palette)}\n\n    return jsonify(result)\n\napp.run(debug=True)\n```\n\nNow run:\n\n```\npython colors.py\n```\n\nAnd go to: [http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)\n\nYou should get:\n\n![colors](docs/colors.png)\n\n## Using external YAML files\n\nSave a new file `colors.yml`\n\n```yaml\nExample endpoint returning a list of colors by palette\nIn this example the specification is taken from external YAML file\n---\nparameters:\n  - name: palette\n    in: path\n    type: string\n    enum: ['all', 'rgb', 'cmyk']\n    required: true\n    default: all\ndefinitions:\n  Palette:\n    type: object\n    properties:\n      palette_name:\n        type: array\n        items:\n          $ref: '#/definitions/Color'\n  Color:\n    type: string\nresponses:\n  200:\n    description: A list of colors (may be filtered by palette)\n    schema:\n      $ref: '#/definitions/Palette'\n    examples:\n      rgb: ['red', 'green', 'blue']\n```\n\n\nlets use the same example changing only the view function.\n\n```python\nfrom flasgger import swag_from\n\n@app.route('/colors/<palette>/')\n@swag_from('colors.yml')\ndef colors(palette):\n    ...\n```\n\nIf you do not want to use the decorator you can use the docstring `file:` shortcut.\n\n```python\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"\n    file: colors.yml\n    \"\"\"\n    ...\n```\n\n\n## Using dictionaries as raw specs\n\nCreate a Python dictionary as:\n\n```python\nspecs_dict = {\n  \"parameters\": [\n    {\n      \"name\": \"palette\",\n      \"in\": \"path\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"all\",\n        \"rgb\",\n        \"cmyk\"\n      ],\n      \"required\": \"true\",\n      \"default\": \"all\"\n    }\n  ],\n  \"definitions\": {\n    \"Palette\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"palette_name\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Color\"\n          }\n        }\n      }\n    },\n    \"Color\": {\n      \"type\": \"string\"\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"A list of colors (may be filtered by palette)\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Palette\"\n      },\n      \"examples\": {\n        \"rgb\": [\n          \"red\",\n          \"green\",\n          \"blue\"\n        ]\n      }\n    }\n  }\n}\n```\n\nNow take the same function and use the dict in the place of YAML file.\n\n```python\n@app.route('/colors/<palette>/')\n@swag_from(specs_dict)\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    In this example the specification is taken from specs_dict\n    \"\"\"\n    ...\n```\n\n## Using Marshmallow Schemas\n\n> FIRST: `pip install marshmallow apispec`\n\n> USAGE #1: `SwaggerView`\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger, SwaggerView, Schema, fields\n\n\nclass Color(Schema):\n    name = fields.Str()\n\nclass Palette(Schema):\n    pallete_name = fields.Str()\n    colors = fields.Nested(Color, many=True)\n\nclass PaletteView(SwaggerView):\n    parameters = [\n        {\n            \"name\": \"palette\",\n            \"in\": \"path\",\n            \"type\": \"string\",\n            \"enum\": [\"all\", \"rgb\", \"cmyk\"],\n            \"required\": True,\n            \"default\": \"all\"\n        }\n    ]\n    responses = {\n        200: {\n            \"description\": \"A list of colors (may be filtered by palette)\",\n            \"schema\": Palette\n        }\n    }\n\n    def get(self, palette):\n        \"\"\"\n        Colors API using schema\n        This example is using marshmallow schemas\n        \"\"\"\n        all_colors = {\n            'cmyk': ['cyan', 'magenta', 'yellow', 'black'],\n            'rgb': ['red', 'green', 'blue']\n        }\n        if palette == 'all':\n            result = all_colors\n        else:\n            result = {palette: all_colors.get(palette)}\n        return jsonify(result)\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\napp.add_url_rule(\n    '/colors/<palette>',\n    view_func=PaletteView.as_view('colors'),\n    methods=['GET']\n)\n\napp.run(debug=True)\n\n```\n\n> USAGE #2: `Custom Schema from flasgger`\n\n- `Body` - support all fields in marshmallow\n- `Query` - support simple fields in marshmallow (Int, String and etc)\n- `Path` - support only int and str\n\n```python\nfrom flask import Flask, abort\nfrom flasgger import Swagger, Schema, fields\nfrom marshmallow.validate import Length, OneOf\n\napp = Flask(__name__)\nSwagger(app)\n\nswag = {\"swag\": True,\n        \"tags\": [\"demo\"],\n        \"responses\": {200: {\"description\": \"Success request\"},\n                      400: {\"description\": \"Validation error\"}}}\n\n\nclass Body(Schema):\n    color = fields.List(fields.String(), required=True, validate=Length(max=5), example=[\"white\", \"blue\", \"red\"])\n\n    def swag_validation_function(self, data, main_def):\n        self.load(data)\n\n    def swag_validation_error_handler(self, err, data, main_def):\n        abort(400, err)\n\n\nclass Query(Schema):\n    color = fields.String(required=True, validate=OneOf([\"white\", \"blue\", \"red\"]))\n\n    def swag_validation_function(self, data, main_def):\n        self.load(data)\n\n    def swag_validation_error_handler(self, err, data, main_def):\n        abort(400, err)\n\n    swag_in = \"query\"\n\n\n@app.route(\"/color/<id>/<name>\", methods=[\"POST\"], **swag)\ndef index(body: Body, query: Query, id: int, name: str):\n    return {\"body\": body, \"query\": query, \"id\": id, \"name\": name}\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n\n> NOTE: take a look at `examples/validation.py` for a more complete example.\n\n\n> NOTE: when catching arguments in path rule always use explicit types, bad: ``/api/<username>`` good: ``/api/<string:username>``\n\n\n## Using **Flask RESTful** Resources\n\nFlasgger is compatible with Flask-RESTful you only need to install `pip install flask-restful` and then:\n\n```python\nfrom flask import Flask\nfrom flasgger import Swagger\nfrom flask_restful import Api, Resource\n\napp = Flask(__name__)\napi = Api(app)\nswagger = Swagger(app)\n\nclass Username(Resource):\n    def get(self, username):\n        \"\"\"\n        This examples uses FlaskRESTful Resource\n        It works also with swag_from, schemas and spec_dict\n        ---\n        parameters:\n          - in: path\n            name: username\n            type: string\n            required: true\n        responses:\n          200:\n            description: A single user item\n            schema:\n              id: User\n              properties:\n                username:\n                  type: string\n                  description: The name of the user\n                  default: Steven Wilson\n        \"\"\"\n        return {'username': username}, 200\n\n\napi.add_resource(Username, '/username/<username>')\n\napp.run(debug=True)\n```\n\n## Auto-parsing external YAML docs and `MethodView`s\n\nFlasgger can be configured to auto-parse external YAML API docs.  [Set a `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16) in your `app.config['SWAGGER']` and Swagger will load API docs by looking in `doc_dir` for YAML files stored by endpoint-name and method-name.  For example, `'doc_dir': './examples/docs/'` and a file `./examples/docs/items/get.yml` will provide a Swagger doc for `ItemsView` method `get`.\n\nAdditionally, when using **Flask RESTful** per above, by passing `parse=True` when constructing `Swagger`, Flasgger will use  `flask_restful.reqparse.RequestParser`, locate all `MethodView`s and parsed and validated data will be stored in `flask.request.parsed_data`.\n\n## Handling multiple http methods and routes for a single function\n\nYou can separate specifications by endpoint or methods\n\n```python\nfrom flasgger.utils import swag_from\n\n@app.route('/api/<string:username>', endpoint='with_user_name', methods=['PUT', 'GET'])\n@app.route('/api/', endpoint='without_user_name')\n@swag_from('path/to/external_file.yml', endpoint='with_user_name')\n@swag_from('path/to/external_file_no_user_get.yml', endpoint='without_user_name', methods=['GET'])\n@swag_from('path/to/external_file_no_user_put.yml', endpoint='without_user_name', methods=['PUT'])\ndef fromfile_decorated(username=None):\n    if not username:\n        return \"No user!\"\n    return jsonify({'username': username})\n```\n\nAnd the same can be achieved with multiple methods in a `MethodView` or `SwaggerView` by\nregistering the `url_rule` many times. Take a look at `examples/example_app`\n\n\n# Use the same data to validate your API POST body.\n\nSetting `swag_from`'s _validation_ parameter to `True` will validate incoming data automatically:\n\n```python\nfrom flasgger import swag_from\n\n@swag_from('defs.yml', validation=True)\ndef post():\n    # if not validate returns ValidationError response with status 400\n    # also returns the validation message.\n```\n\nUsing `swagger.validate` annotation is also possible:\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('UserSchema')\ndef post():\n    '''\n    file: defs.yml\n    '''\n    # if not validate returns ValidationError response with status 400\n    # also returns the validation message.\n```\n\nYet you can call `validate` manually:\n\n```python\nfrom flasgger import swag_from, validate\n\n@swag_from('defs.yml')\ndef post():\n    validate(request.json, 'UserSchema', 'defs.yml')\n    # if not validate returns ValidationError response with status 400\n    # also returns the validation message.\n```\n\nIt is also possible to define `validation=True` in `SwaggerView` and also use\n`specs_dict` for validation.\n\nTake a look at `examples/validation.py` for more information.\n\nAll validation options can be found at http://json-schema.org/latest/json-schema-validation.html\n\n### Custom validation\n\nBy default Flasgger will use [python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)\nto perform validation.\n\nCustom validation functions are supported as long as they meet the requirements:\n - take two, and only two, positional arguments:\n    - the data to be validated as the first; and\n    - the schema to validate against as the second argument\n - raise any kind of exception when validation fails.\n\nAny return value is discarded.\n\n\nProviding the function to the Swagger instance will make it the default:\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app, validation_function=my_validation_function)\n```\n\nProviding the function as parameter of `swag_from` or `swagger.validate`\nannotations or directly to the `validate` function will force it's use\nover the default validation function for Swagger:\n\n```python\nfrom flasgger import swag_from\n\n@swag_from('spec.yml', validation=True, validation_function=my_function)\n...\n```\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('Pet', validation_function=my_function)\n...\n```\n\n```python\nfrom flasgger import validate\n\n...\n\n    validate(\n        request.json, 'Pet', 'defs.yml', validation_function=my_function)\n```\n\n### Validation Error handling\n\nBy default Flasgger will handle validation errors by aborting the\nrequest with a 400 BAD REQUEST response with the error message.\n\nA custom validation error handling function can be provided to\nsupersede default behavior as long as it meets the requirements:\n - take three, and only three, positional arguments:\n    - the error raised as the first;\n    - the data which failed validation as the second; and\n    - the schema used in to validate as the third argument\n\n\nProviding the function to the Swagger instance will make it the default:\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app, validation_error_handler=my_handler)\n```\n\nProviding the function as parameter of `swag_from` or `swagger.validate`\nannotations or directly to the `validate` function will force it's use\nover the default validation function for Swagger:\n\n```python\nfrom flasgger import swag_from\n\n@swag_from(\n    'spec.yml', validation=True, validation_error_handler=my_handler)\n...\n```\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('Pet', validation_error_handler=my_handler)\n...\n```\n\n```python\nfrom flasgger import validate\n\n...\n\n    validate(\n        request.json, 'Pet', 'defs.yml',\n        validation_error_handler=my_handler)\n```\n\nExamples of use of a custom validation error handler function can be\nfound at [example validation_error_handler.py](examples/validation_error_handler.py)\n\n# Get defined schemas as python dictionaries\n\nYou may wish to use schemas you defined in your Swagger specs as dictionaries\nwithout replicating the specification. For that you can use the `get_schema`\nmethod:\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger, swag_from\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@swagger.validate('Product')\ndef post():\n    \"\"\"\n    post endpoint\n    ---\n    tags:\n      - products\n    parameters:\n      - name: body\n        in: body\n        required: true\n        schema:\n          id: Product\n          required:\n            - name\n          properties:\n            name:\n              type: string\n              description: The product's name.\n              default: \"Guarana\"\n    responses:\n      200:\n        description: The product inserted in the database\n        schema:\n          $ref: '#/definitions/Product'\n    \"\"\"\n    rv = db.insert(request.json)\n    return jsonify(rv)\n\n...\n\nproduct_schema = swagger.get_schema('product')\n```\n\nThis method returns a dictionary which contains the Flasgger schema id,\nall defined parameters and a list of required parameters.\n\n# HTML sanitizer\n\nBy default Flasgger will try to sanitize the content in YAML definitions\nreplacing every ```\\n``` with ```<br>``` but you can change this behaviour\nsetting another kind of sanitizer.\n\n```python\nfrom flasgger import Swagger, NO_SANITIZER\n\napp =Flask()\nswagger = Swagger(app, sanitizer=NO_SANITIZER)\n```\n\nYou can write your own sanitizer\n\n```python\nswagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))\n```\n\nThere is also a Markdown parser available, if you want to be able to render\nMarkdown in your specs description use **MK_SANITIZER**\n\n\n# Swagger UI and templates\n\nYou can override the `templates/flasgger/index.html` in your application and\nthis template will be the `index.html` for SwaggerUI. Use `flasgger/ui2/templates/index.html`\nas base for your customization.\n\nFlasgger supports Swagger UI versions 2 and 3, The version 3 is still experimental but you\ncan try setting `app.config['SWAGGER']['uiversion']`.\n\n```python\napp = Flask(__name__)\napp.config['SWAGGER'] = {\n    'title': 'My API',\n    'uiversion': 3\n}\nswagger = Swagger(app)\n\n```\n\n# OpenAPI 3.0 Support\n\nThere is experimental support for OpenAPI 3.0 that should work when using SwaggerUI 3. To use OpenAPI 3.0, set `app.config['SWAGGER']['openapi']` to a version that the current SwaggerUI 3 supports such as `'3.0.2'`.\n\nFor an example of this that uses `callbacks` and `requestBody`, see the [callbacks example](examples/callbacks.py).\n\n## Externally loading Swagger UI and jQuery JS/CSS\n\nStarting with Flasgger 0.9.2 you can specify external URL locations for loading the JavaScript and CSS for the Swagger and jQuery libraries loaded in the Flasgger default templates.  If the configuration properties below are omitted, Flasgger will serve static versions it includes - these versions may be older than the current Swagger UI v2 or v3 releases.\n\nThe following example loads Swagger UI and jQuery versions from unpkg.com:\n\n```\nswagger_config = Swagger.DEFAULT_CONFIG\nswagger_config['swagger_ui_bundle_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'\nswagger_config['swagger_ui_standalone_preset_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'\nswagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'\nswagger_config['swagger_ui_css'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'\nSwagger(app, config=swagger_config)\n```\n\n# Initializing Flasgger with default data.\n\nYou can start your Swagger spec with any default data providing a template:\n\n```python\ntemplate = {\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"My API\",\n    \"description\": \"API for my data\",\n    \"contact\": {\n      \"responsibleOrganization\": \"ME\",\n      \"responsibleDeveloper\": \"Me\",\n      \"email\": \"me@me.com\",\n      \"url\": \"www.me.com\",\n    },\n    \"termsOfService\": \"http://me.com/terms\",\n    \"version\": \"0.0.1\"\n  },\n  \"host\": \"mysite.com\",  # overrides localhost:500\n  \"basePath\": \"/api\",  # base bash for blueprint registration\n  \"schemes\": [\n    \"http\",\n    \"https\"\n  ],\n  \"operationId\": \"getmyData\"\n}\n\nswagger = Swagger(app, template=template)\n\n```\n\nAnd then the template is the default data unless some view changes it. You\ncan also provide all your specs as template and have no views. Or views in\nexternal APP.\n\n## Getting default data at runtime\n\nSometimes you need to get some data at runtime depending on dynamic values ex: you want to check `request.is_secure` to decide if `schemes` will be `https` you can do that by using `LazyString`.\n\n```py\nfrom flask import Flask\nfrom flasgger import, Swagger, LazyString, LazyJSONEncoder\n\napp = Flask(__init__)\n\n# Set the custom Encoder (Inherit it if you need to customize)\napp.json_encoder = LazyJSONEncoder\n\n\ntemplate = dict(\n    info={\n        'title': LazyString(lambda: 'Lazy Title'),\n        'version': LazyString(lambda: '99.9.9'),\n        'description': LazyString(lambda: 'Hello Lazy World'),\n        'termsOfService': LazyString(lambda: '/there_is_no_tos')\n    },\n    host=LazyString(lambda: request.host),\n    schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],\n    foo=LazyString(lambda: \"Bar\")\n)\nSwagger(app, template=template)\n\n```\n\nThe `LazyString` values will be evaluated only when `jsonify` encodes the value at runtime, so you have access to Flask `request, session, g, etc..` and also may want to access a database.\n\n## Behind a reverse proxy\n\nSometimes you're serving your swagger docs behind an reverse proxy (e.g. NGINX).  When following the [Flask guidance](http://flask.pocoo.org/snippets/35/),\nthe swagger docs will load correctly, but the \"Try it Out\" button points to the wrong place.  This can be fixed with the following code:\n\n```python\nfrom flask import Flask, request\nfrom flasgger import Swagger, LazyString, LazyJSONEncoder\n\napp = Flask(__name__)\napp.json_encoder = LazyJSONEncoder\n\ntemplate = dict(swaggerUiPrefix=LazyString(lambda : request.environ.get('HTTP_X_SCRIPT_NAME', '')))\nswagger = Swagger(app, template=template)\n\n```\n\n# Customize default configurations\n\nCustom configurations such as a different specs route or disabling Swagger UI can be provided to Flasgger:\n\n```python\nswagger_config = {\n    \"headers\": [\n    ],\n    \"specs\": [\n        {\n            \"endpoint\": 'apispec_1',\n            \"route\": '/apispec_1.json',\n            \"rule_filter\": lambda rule: True,  # all in\n            \"model_filter\": lambda tag: True,  # all in\n        }\n    ],\n    \"static_url_path\": \"/flasgger_static\",\n    # \"static_folder\": \"static\",  # must be set by user\n    \"swagger_ui\": True,\n    \"specs_route\": \"/apidocs/\"\n}\n\nswagger = Swagger(app, config=swagger_config)\n\n```\n\n## Extracting Definitions\n\nDefinitions can be extracted when `id` is found in spec, example:\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    ---\n    parameters:\n      - name: palette\n        in: path\n        type: string\n        enum: ['all', 'rgb', 'cmyk']\n        required: true\n        default: all\n    responses:\n      200:\n        description: A list of colors (may be filtered by palette)\n        schema:\n          id: Palette\n          type: object\n          properties:\n            palette_name:\n              type: array\n              items:\n                schema:\n                  id: Color\n                  type: string\n        examples:\n          rgb: ['red', 'green', 'blue']\n    \"\"\"\n    all_colors = {\n        'cmyk': ['cyan', 'magenta', 'yellow', 'black'],\n        'rgb': ['red', 'green', 'blue']\n    }\n    if palette == 'all':\n        result = all_colors\n    else:\n        result = {palette: all_colors.get(palette)}\n\n    return jsonify(result)\n\napp.run(debug=True)\n```\n\nIn this example you do not have to pass `definitions` but need to add `id` to\nyour schemas.\n\n## Python2 Compatibility\n\nVersion `0.9.5.*` will be the last version that supports Python2. \nPlease direct discussions to [#399](https://github.com/flasgger/flasgger/issues/399). \n"
        },
        {
          "name": "README.zh.md",
          "type": "blob",
          "size": 23.2822265625,
          "content": "# Flasgger\n## Flask API的Easy Swagger UI\n\n[![构建状态](https://travis-ci.com/flasgger/flasgger.svg?branch=master)](https://travis-ci.com/flasgger/flasgger)\n[![代码健康](https://landscape.io/github/rochacbruno/flasgger/master/landscape.svg?style=flat)](https://landscape.io/github/rochacbruno/flasgger/master)\n[![测试覆盖状态](https://coveralls.io/repos/github/rochacbruno/flasgger/badge.svg?branch=master)](https://coveralls.io/github/rochacbruno/flasgger?branch=master)\n[![PyPI](https://img.shields.io/pypi/v/flasgger.svg)](https://pypi.python.org/pypi/flasgger)\n <a target=\"_blank\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=rochacbruno%40gmail%2ecom&amp;lc=BR&amp;item_name=Flasgger&amp;no_note=0&amp;currency_code=USD&amp;bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHostedGuest\"><img alt='通过Paypal捐助' src='http://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif' /></a>\n\n\n![flasgger](docs/flasgger.png)\n\nFlasgger是一个Flask扩展，可从您的API中所有已注册的Flask视图中**提取[OpenAPI-Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operation-object)**（以下简称\"spec\"）。\n\nFlasgger还**集成 [SwaggerUI](http://swagger.io/swagger-ui/)**，因此您可以访问[http://localhost:5000/apidocs](localhost:5000/apidocs)并可视化并与您的API资源进行交互。\n\nFlasgger还使用与可以验证以POST，PUT，PATCH形式接收的数据是否与**YAML**，**Python字典**，**Marshmallow Schema**所定义的spec一致。\n\nFlasgger可以使用简单的函数视图或方法视图（使用docstring作为规范），或使用@swag_from装饰器从**YAML**或**dict**获取spec，还提供可以使用**SwaggerView**调用**Marshmallow Schemas**作为spec。\n\nFlasgger与`Flask-RESTful`兼容，因此您可以同时使用`Resources`和`swag` spec，看看[restful示例](examples/restful.py)。\n\nFlasgger还支持将`Marshmallow APISpec`作为规范的spec模板，如果您使用的是Marshmallow的APISPec，请查看[apispec示例](examples/apispec_example.py)。\n\n# 高度参与的贡献者\n\n[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/0)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/0)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/1)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/1)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/2)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/2)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/3)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/3)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/4)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/4)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/5)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/5)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/6)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/6)[![](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/images/7)](https://sourcerer.io/fame/rochacbruno/rochacbruno/flasgger/links/7)\n\n# 示例和演示应用\n\n有一些[示例应用程序](examples/) ，您也可以在[Flasgger演示应用程序](http://flasgger.pythonanywhere.com/)中使用示例。\n\n> 注意：所有示例应用程序也是测试用例，并在Travis CI中自动运行以确保质量和测试覆盖范围。\n\n## Docker\n\n示例和演示应用程序也可以作为Docker映像/容器构建和运行：\n\n```\ndocker build -t flasgger .\ndocker run -it --rm -p 5000:5000 --name flasgger flasgger\n```\n然后访问位于 http://localhost:5000 的Flasgger演示应用程序。\n\n# 安装\n\n> 在您的virtualenv下执行以下操作：\n\n确保您拥有最新的setuptools\n```\npip install -U setuptools\n```\n\n然后\n\n```\npip install flasgger\n```\n\n或（开发版本）\n\n```\npip install https://github.com/flasgger/flasgger/tarball/master\n```\n\n> 注意：如果要使用**Marshmallow Schemas**，则还需要运行`pip install marshmallow apispec`。\n\n# 入门\n\n## 使用文档字符串作为spec\n\n\n创建一个名为`colors.py`的文件\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"示例端点按调色板返回颜色列表\n    这是使用文档字符串作为spec。\n    ---\n    parameters:\n      - name: palette\n        in: path\n        type: string\n        enum: ['all', 'rgb', 'cmyk']\n        required: true\n        default: all\n    definitions:\n      Palette:\n        type: object\n        properties:\n          palette_name:\n            type: array\n            items:\n              $ref: '#/definitions/Color'\n      Color:\n        type: string\n    responses:\n      200:\n        description: 颜色列表（可被调色板过滤）\n        schema:\n          $ref: '#/definitions/Palette'\n        examples:\n          rgb: ['red', 'green', 'blue']\n    \"\"\"\n    all_colors = {\n        'cmyk': ['cyan', 'magenta', 'yellow', 'black'],\n        'rgb': ['red', 'green', 'blue']\n    }\n    if palette == 'all':\n        result = all_colors\n    else:\n        result = {palette: all_colors.get(palette)}\n\n    return jsonify(result)\n\napp.run(debug=True)\n```\n\n现在运行：\n\n```\npython colors.py\n```\n\n并转到：[http://localhost:5000/apidocs/](http://localhost:5000/apidocs/)\n\n您应该得到：\n\n![colors](docs/colors.png)\n\n## 使用外部YAML文件\n\n保存一个新文件`colors.yml`\n\n```yaml\n示例端点按调色板返回颜色列表\n在此示例中，规范取自外部YAML文件\n---\nparameters:\n  - name: palette\n    in: path\n    type: string\n    enum: ['all', 'rgb', 'cmyk']\n    required: true\n    default: all\ndefinitions:\n  Palette:\n    type: object\n    properties:\n      palette_name:\n        type: array\n        items:\n          $ref: '#/definitions/Color'\n  Color:\n    type: string\nresponses:\n  200:\n    description: 颜色列表（可被调色板过滤）\n    schema:\n      $ref: '#/definitions/Palette'\n    examples:\n      rgb: ['red', 'green', 'blue']\n```\n\n\n让我们使用相同的示例，仅更改视图功能。\n\n```python\nfrom flasgger import swag_from\n\n@app.route('/colors/<palette>/')\n@swag_from('colors.yml')\ndef colors(palette):\n    ...\n```\n\n如果您不想使用装饰器，则可以使用docstring`file:`快捷方式。\n\n```python\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"\n    file: colors.yml\n    \"\"\"\n    ...\n```\n\n\n## 使用字典作为raw spec\n\n创建一个Python字典为：\n\n```python\nspecs_dict = {\n  \"parameters\": [\n    {\n      \"name\": \"palette\",\n      \"in\": \"path\",\n      \"type\": \"string\",\n      \"enum\": [\n        \"all\",\n        \"rgb\",\n        \"cmyk\"\n      ],\n      \"required\": \"true\",\n      \"default\": \"all\"\n    }\n  ],\n  \"definitions\": {\n    \"Palette\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"palette_name\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Color\"\n          }\n        }\n      }\n    },\n    \"Color\": {\n      \"type\": \"string\"\n    }\n  },\n  \"responses\": {\n    \"200\": {\n      \"description\": \"颜色列表（可被调色板过滤）\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Palette\"\n      },\n      \"examples\": {\n        \"rgb\": [\n          \"red\",\n          \"green\",\n          \"blue\"\n        ]\n      }\n    }\n  }\n}\n```\n\n现在为同一个函数使用dict替代YAML文件。\n\n```python\n@app.route('/colors/<palette>/')\n@swag_from(specs_dict)\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    In this example the specification is taken from specs_dict\n    \"\"\"\n    ...\n```\n\n## 使用 Marshmallow Schemas\n\n> 首先： `pip install marshmallow apispec`\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger, SwaggerView, Schema, fields\n\n\nclass Color(Schema):\n    name = fields.Str()\n\nclass Palette(Schema):\n    pallete_name = fields.Str()\n    colors = fields.Nested(Color, many=True)\n\nclass PaletteView(SwaggerView):\n    parameters = [\n        {\n            \"name\": \"palette\",\n            \"in\": \"path\",\n            \"type\": \"string\",\n            \"enum\": [\"all\", \"rgb\", \"cmyk\"],\n            \"required\": True,\n            \"default\": \"all\"\n        }\n    ]\n    responses = {\n        200: {\n            \"description\": \"颜色列表（可被调色板过滤）\",\n            \"schema\": Palette\n        }\n    }\n\n    def get(self, palette):\n        \"\"\"\n        Colors API using schema\n        This example is using marshmallow schemas\n        \"\"\"\n        all_colors = {\n            'cmyk': ['cyan', 'magenta', 'yellow', 'black'],\n            'rgb': ['red', 'green', 'blue']\n        }\n        if palette == 'all':\n            result = all_colors\n        else:\n            result = {palette: all_colors.get(palette)}\n        return jsonify(result)\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\napp.add_url_rule(\n    '/colors/<palette>',\n    view_func=PaletteView.as_view('colors'),\n    methods=['GET']\n)\n\napp.run(debug=True)\n\n```\n\n> 注意：请查看`examples/validation.py`，以获得更完整的示例。\n\n\n> 注意：在路径规则(path rule)中捕获参数时，请始终使用显式类型，不可以：``/api/<username>`` 可以：``/api/<string:username>``\n\n\n## 使用 **Flask RESTful** 资源 （Resources）\n\nFlasgger与Flask-RESTful兼容，您只需要安装`pip install flask-restful`，然后：\n\n```python\n\nfrom flask import Flask\nfrom flasgger import Swagger\nfrom flask_restful import Api, Resource\n\napp = Flask(__name__)\napi = Api(app)\nswagger = Swagger(app)\n\nclass Username(Resource):\n    def get(self, username):\n       \"\"\"\n       本示例使用FlaskRESTful资源\n       它也适用于swag_from，schema和spec_dict\n       ---\n       parameters:\n         - in: path\n           name: username\n           type: string\n           required: true\n       responses:\n         200:\n           description: 单个用户项\n           schema:\n             id: User\n             properties:\n               username:\n                 type: string\n                 description: 用户名\n                 default: 匿名用户\n        \"\"\"\n        return {'username': username}, 200\n\n\napi.add_resource(Username, '/username/<username>')\n\napp.run(debug=True)\n\n```\n\n## 自动解析外部YAML文档和 `MethodView`s\n\n可以将Flasgger配置为自动解析外部YAML API文档。在您的 `app.config['SWAGGER']`中设置[Set a `doc_dir`](https://github.com/rochacbruno/flasgger/blob/aaef05c17cc559d01b7436211093463642eb6ae2/examples/parsed_view_func.py#L16)，然后Swagger将加载API文档通过在doc_dir中查找由端点名称和函数名称存储的YAML文件。例如，`'doc_dir': './examples/docs/'`和文件`./examples/docs/items/get.yml`将为`ItemsView`方法`get`提供Swagger文档。\n\n另外，当如上使用**Flask RESTful**时，通过在构造`Swagger`时传递`parse=True`，Flasgger将使用`flask_restful.reqparse.RequestParser`，找到所有`MethodView`s，然后将解析和验证的数据存储在flask.request.parsed_data中。\n\n## 为单个函数处理多个http方法和路由\n\n您可以按端点或函数分隔spec\n\n```python\nfrom flasgger.utils import swag_from\n\n@app.route('/api/<string:username>', endpoint='with_user_name', methods=['PUT', 'GET'])\n@app.route('/api/', endpoint='without_user_name')\n@swag_from('path/to/external_file.yml', endpoint='with_user_name')\n@swag_from('path/to/external_file_no_user_get.yml', endpoint='without_user_name', methods=['GET'])\n@swag_from('path/to/external_file_no_user_put.yml', endpoint='without_user_name', methods=['PUT'])\ndef fromfile_decorated(username=None):\n    if not username:\n        return \"No user!\"\n    return jsonify({'username': username})\n```\n\n同样，可以通过多次注册url_rule实现在同一个`MethodView`或`SwaggerView`中使用多个函数。`examples/example_app`\n\n\n# 使用相同的数据来验证API POST主体(body)。\n\n将`swag_from`的`_validation_`参数设置为`True`会自动验证传入的数据：\n\n```python\nfrom flasgger import swag_from\n\n@swag_from('defs.yml', validation=True)\ndef post():\n    # 如果未通过验证，则返回状态为400的ValidationError响应并还返回验证消息。\n```\n\n也可以使用`swagger.validate`注释：\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('UserSchema')\ndef post():\n    '''\n    file: defs.yml\n    '''\n    # 如果未通过验证，则返回状态为400的ValidationError响应并还返回验证消息。\n```\n\nYet you can call `validate` manually:\n\n```python\nfrom flasgger import swag_from, validate\n\n@swag_from('defs.yml')\ndef post():\n    validate(request.json, 'UserSchema', 'defs.yml')\n    # 如果未通过验证，则返回状态为400的ValidationError响应并还返回验证消息。\n```\n\n也可以在`SwaggerView`中定义`validation=True`并使用\n`specs_dict`用于验证。\n\n请查看`examples/validation.py`了解更多信息。\n\n所有验证选项均可在 http://json-schema.org/latest/json-schema-validation.html 找到\n\n### 自定义验证\n\n默认情况下，Flasgger将使用[python-jsonschema](https://python-jsonschema.readthedocs.io/en/latest/)\n执行验证。\n\n只要满足要求，就支持自定义验证功能：\n - 仅接受两个位置参数：\n    - 首先要验证的数据；和\n    - 作为第二个参数验证的schema \n - 验证失败时引发任何形式的异常。\n\n任何返回值都将被丢弃。\n\n\n向Swagger实例提供函数将使其成为默认值：\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app, validation_function=my_validation_function)\n```\n\n提供函数作为`swag_from`或`swagger.validate`的参数\n批注或直接添加到`validate`函数将强制使用它\n而不是Swagger的默认验证功能：\n```python\nfrom flasgger import swag_from\n\n@swag_from('spec.yml', validation=True, validation_function=my_function)\n...\n```\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('Pet', validation_function=my_function)\n...\n```\n\n```python\nfrom flasgger import validate\n\n...\n\n    validate(\n        request.json, 'Pet', 'defs.yml', validation_function=my_function)\n```\n\n### 验证错误处理\n\n默认情况下，Flasgger处理验证错误的方式是中止请求(abort)并返回\n带有错误消息的400 BAD REQUEST响应。\n\n可以提供自定义验证错误处理函数(custom validation error handling function) \n只要符合要求，就会取代默认行为：\n - 接受三个且仅三个位置参数：\n    - 抛出的error \n    - 造成验证失败的数据；和\n    - 用于验证的schema \n\n\n向Swagger实例提供函数将使其成为默认值：\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app, validation_error_handler=my_handler)\n```\n提供这个函数作为`swag_from`或`swagger.validate`批注的参数\n或直接添加到`validate`函数都将强制使用它\n而不是Swagger的默认验证功能：\n```python\nfrom flasgger import swag_from\n\n@swag_from(\n    'spec.yml', validation=True, validation_error_handler=my_handler)\n...\n```\n\n```python\nfrom flasgger import Swagger\n\nswagger = Swagger(app)\n\n@swagger.validate('Pet', validation_error_handler=my_handler)\n...\n```\n\n```python\nfrom flasgger import validate\n\n...\n\n    validate(\n        request.json, 'Pet', 'defs.yml',\n        validation_error_handler=my_handler)\n```\n\n使用自定义验证错误处理函数的应用示例：\n见 [example validation_error_handler.py](examples/validation_error_handler.py)\n\n# 获取已定义的schema作为python词\n\n您可能希望不复制spec而将在Swagger spec中定义schemas用作字典。\n为此，您可以使用`get_schema`\n函数：\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger, swag_from\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@swagger.validate('Product')\ndef post():\n    \"\"\"\n    post endpoint\n    ---\n    tags:\n      - products\n    parameters:\n      - name: body\n        in: body\n        required: true\n        schema:\n          id: Product\n          required:\n            - name\n          properties:\n            name:\n              type: string\n              description: The product's name.\n              default: \"Guarana\"\n    responses:\n      200:\n        description: The product inserted in the database\n        schema:\n          $ref: '#/definitions/Product'\n    \"\"\"\n    rv = db.insert(request.json)\n    return jsonify(rv)\n\n...\n\nproduct_schema = swagger.get_schema('product')\n```\n\n此方法返回包含Flasgger schema id的字典，\n所有定义的参数和所需参数的列表。\n\n# HTML清理器(HTML sanitizer)\n\n默认情况下，Flasgger将尝试清理YAML定义中的内容\n用```<br>```替换每个`\\n`，但是您可以更改此行为\n设置另一种清理器。\n\n```python\nfrom flasgger import Swagger, NO_SANITIZER\n\napp =Flask()\nswagger = Swagger(app, sanitizer=NO_SANITIZER)\n```\n\n您可以自行编写清理器\n\n```python\nswagger = Swagger(app, sanitizer=lambda text: do_anything_with(text))\n```\n\n如果您希望能够渲染您的specs description中的Markdown，还可以使用Markdown解析器**MK_SANITIZER**\n\n\n# Swagger UI和模板\n\n您可以在应用程序中重写(override) `templates/flasgger/index.html`，\n重写后的模板将为SwaggerUI的`index.html`。使用`flasgger/ui2/templates/index.html`\n作为您自定义`index.html`文件的基础。\n\nFlasgger支持Swagger UI版本2和3。版本3仍处于试验阶段，但是您\n可以尝试设置`app.config['SWAGGER']['uiversion']`.\n\n```python\napp = Flask(__name__)\napp.config['SWAGGER'] = {\n    'title': 'My API',\n    'uiversion': 3\n}\nswagger = Swagger(app)\n\n```\n\n# OpenAPI 3.0支持\n\n对OpenAPI 3.0的实验性支持应该在使用SwaggerUI 3时起作用。要使用OpenAPI 3.0，请将`app.config['SWAGGER']['openapi']` 设置为当前SwaggerUI 3支持的版本，例如`'3.0.2'`。\n\n有关使用`callbacks`和`requestBody`的示例，请参见[callbacks example](examples/callbacks.py)。\n\n## 从外部加载Swagger UI和jQuery JS/CSS\n\n从Flasgger 0.9.2开始，您可以指定外部URL位置，以为Flasgger默认模板中加载的Swagger和jQuery库加载JavaScript和CSS。如果省略以下配置属性，则Flasgger将提供它所包含的静态版本-这些版本可能比当前的Swagger UI v2或v3版本要旧。\n\n以下示例从unpkg.com加载Swagger UI和jQuery版本：\n\n```\nswagger_config = Swagger.DEFAULT_CONFIG\nswagger_config['swagger_ui_bundle_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-bundle.js'\nswagger_config['swagger_ui_standalone_preset_js'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui-standalone-preset.js'\nswagger_config['jquery_js'] = '//unpkg.com/jquery@2.2.4/dist/jquery.min.js'\nswagger_config['swagger_ui_css'] = '//unpkg.com/swagger-ui-dist@3/swagger-ui.css'\nSwagger(app, config=swagger_config)\n```\n\n# Initializing Flasgger with default data.\n\n您可以使用默认数据来启动Swagger spec或提供模板：\n\n```python\ntemplate = {\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"My API\",\n    \"description\": \"API for my data\",\n    \"contact\": {\n      \"responsibleOrganization\": \"ME\",\n      \"responsibleDeveloper\": \"Me\",\n      \"email\": \"me@me.com\",\n      \"url\": \"www.me.com\",\n    },\n    \"termsOfService\": \"http://me.com/terms\",\n    \"version\": \"0.0.1\"\n  },\n  \"host\": \"mysite.com\",  # overrides localhost:500\n  \"basePath\": \"/api\",  # base bash for blueprint registration\n  \"schemes\": [\n    \"http\",\n    \"https\"\n  ],\n  \"operationId\": \"getmyData\"\n}\n\nswagger = Swagger(app, template=template)\n\n```\n\nAnd then the template is the default data unless some view changes it. You\ncan also provide all your specs as template and have no views. Or views in\nexternal APP.\n\n然后，除非某些视图更改了模板，否则模板是默认数据。您\n也可以提供所有spec作为模板，而无需包括视图。或\n外部APP中的视图。\n\n## #在运行时获取默认数据\n\n有时您需要在运行时获取一些数据，具体取决于动态值，例如：要检查`request.is_secure`以确定`schemes`是否为`https`，您可以使用`LazyString`做到这一点。\n\n```py\nfrom flask import Flask\nfrom flasgger import, Swagger, LazyString, LazyJSONEncoder\n\napp = Flask(__init__)\n\n# 设置自定义编码器（如果需要自定义，则继承它）\napp.json_encoder = LazyJSONEncoder\n\n\ntemplate = dict(\n    info={\n        'title': LazyString(lambda: 'Lazy Title'),\n        'version': LazyString(lambda: '99.9.9'),\n        'description': LazyString(lambda: 'Hello Lazy World'),\n        'termsOfService': LazyString(lambda: '/there_is_no_tos')\n    },\n    host=LazyString(lambda: request.host),\n    schemes=[LazyString(lambda: 'https' if request.is_secure else 'http')],\n    foo=LazyString(lambda: \"Bar\")\n)\nSwagger(app, template=template)\n\n```\n\nThe `LazyString` values will be evaluated only when `jsonify` encodes the value at runtime, so you have access to Flask `request, session, g, etc..` and also may want to access a database.\n仅当`jsonify`在运行时对该值进行编码时，才会评估`LazyString`的值，因此您可以访问Flask的`request，session，g 等`，或者是访问数据库。\n\n## 经过反向代理\n\n有时，您是在反向代理（例如NGINX）后面提供庞大的文档。当遵循[Flask指南](http://flask.pocoo.org/snippets/35/)时，\nSwagger的文档将正确加载，但是“尝试一下”按钮指向错误的位置。可以使用以下代码解决此问题：\n\n```python\nfrom flask import Flask, request\nfrom flasgger import Swagger, LazyString, LazyJSONEncoder\n\napp = Flask(__name__)\napp.json_encoder = LazyJSONEncoder\n\ntemplate = dict(swaggerUiPrefix=LazyString(lambda : request.environ.get('HTTP_X_SCRIPT_NAME', '')))\nswagger = Swagger(app, template=template)\n\n``` \n\n# 自定义默认配置\n\n可以向Flasgger提供自定义配置，例如不同的spec route或禁用Swagger UI：\n\n```python\nswagger_config = {\n    \"headers\": [\n    ],\n    \"specs\": [\n        {\n            \"endpoint\": 'apispec_1',\n            \"route\": '/apispec_1.json',\n            \"rule_filter\": lambda rule: True,  # all in\n            \"model_filter\": lambda tag: True,  # all in\n        }\n    ],\n    \"static_url_path\": \"/flasgger_static\",\n    # \"static_folder\": \"static\",  # must be set by user\n    \"swagger_ui\": True,\n    \"specs_route\": \"/apidocs/\"\n}\n\nswagger = Swagger(app, config=swagger_config)\n\n```\n\n## 提取定义\n\n当在spec中找到`id`时，可以提取定义，例如：\n\n```python\nfrom flask import Flask, jsonify\nfrom flasgger import Swagger\n\napp = Flask(__name__)\nswagger = Swagger(app)\n\n@app.route('/colors/<palette>/')\ndef colors(palette):\n    \"\"\"Example endpoint returning a list of colors by palette\n    ---\n    parameters:\n      - name: palette\n        in: path\n        type: string\n        enum: ['all', 'rgb', 'cmyk']\n        required: true\n        default: all\n    responses:\n      200:\n        description: 颜色列表（可被调色板过滤）\n        schema:\n          id: Palette\n          type: object\n          properties:\n            palette_name:\n              type: array\n              items:\n                schema:\n                  id: Color\n                  type: string\n        examples:\n          rgb: ['red', 'green', 'blue']\n    \"\"\"\n    all_colors = {\n        'cmyk': ['cyan', 'magenta', 'yellow', 'black'],\n        'rgb': ['red', 'green', 'blue']\n    }\n    if palette == 'all':\n        result = all_colors\n    else:\n        result = {palette: all_colors.get(palette)}\n\n    return jsonify(result)\n\napp.run(debug=True)\n```\n\n在此示例中，您不必传递`definitions`，而是需要将`id`添加到您的schema。\n\n## Python2兼容性\n\n\n版本`0.9.5.*`将是最后一个支持Python2的版本。\n请在这里讨论[#399](https://github.com/flasgger/flasgger/issues/399)。\n\n"
        },
        {
          "name": "demo_app",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flasgger",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.552734375,
          "content": "# optional (for dev)\nmarshmallow\napispec>=1.0.0b5\napispec-webframeworks\nflask-restful\npep8==1.7.1\nflake8==3.8.4\npytest>=4.6\nflex\n# flex:  ImportError: urllib3 v2.0 only supports OpenSSL 1.1.1+,\n# currently the 'ssl' module is compiled with OpenSSL 1.0.2g  1 Mar 2016.\n# See: https://github.com/urllib3/urllib3/issues/2168\nurllib3<2.0.0\n\ncoveralls\npytest-cov\ndecorator\nwheel\nflask-jwt\ntwine>=1.11.0\n\n\n\n# for pypi markdown support\nreadme_renderer\nsetuptools>=40.4.2\n\n# install flasgger itself as editable\n-e .\n-e etc/flasgger_package\n\n# Dependency debugging\npipdeptree"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0888671875,
          "content": "# required\nFlask>=0.10\nPyYAML>=3.0\njsonschema>=3.0.1\nsix>=1.10.0\nmistune\nwerkzeug\npackaging"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0263671875,
          "content": "[bdist_wheel]\nuniversal = 1"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.5849609375,
          "content": "# Fix for older setuptools\nimport re\nimport os\n\nfrom setuptools import setup, find_packages\n\n\ndef fpath(name):\n    return os.path.join(os.path.dirname(__file__), name)\n\n\ndef read(fname):\n    return open(fpath(fname)).read()\n\n\ndef desc():\n    return read('README.md')\n\n\n# grep flasgger/__init__.py since python 3.x cannot\n# import it before using 2to3\nfile_text = read(fpath('flasgger/__init__.py'))\n\n\ndef grep(attrname):\n    pattern = r\"{0}\\W*=\\W*'([^']+)'\".format(attrname)\n    strval, = re.findall(pattern, file_text)\n    return strval\n\n\nsetup(\n    name='flasgger',\n    version=grep('__version__'),\n    url='https://github.com/flasgger/flasgger/',\n    license='MIT',\n    author=grep('__author__'),\n    author_email=grep('__email__'),\n    description='Extract swagger specs from your flask project',\n    long_description=desc(),\n    long_description_content_type=\"text/markdown\",\n    packages=find_packages(\n        exclude=[\n            'tests', 'tests.*',\n            'examples', 'examples.*',\n            'demo_app', 'demo_app.*',\n            'etc', 'etc.*'\n        ]\n    ),\n    include_package_data=True,\n    zip_safe=False,\n    platforms='any',\n    install_requires=[\n        'Flask>=0.10',\n        'PyYAML>=3.0',\n        'jsonschema>=3.0.1',\n        'mistune',\n        'six>=1.10.0',\n        'packaging',\n    ],\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.6',\n    ],\n    entry_points={\n        'flask.commands': [\n            'generate-api-schema=flasgger.commands:generate_api_schema',\n        ],\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.4169921875,
          "content": "# Tox (http://tox.testrun.org/) is a tool for running tests\n# in multiple virtualenvs. This configuration file will run the\n# test suite on all supported python versions. To use it, \"pip install tox\"\n# and then run \"tox\" from this directory.\n\n[tox]\nenvlist =\n    py36-flask{010,012,10,104},\n    py36-flasklatest,\n    py37-flask{010,012,10,104},\n    py37-flasklatest,\n    py37-flask104-marshmallow-apispec,\n    py38-dev-flasklatest,\n    py39-flask104,\n    py311-flasklatest,\n    py311-marshmallow-apispec,\ninstall_command = pip install {opts} \"{packages}\"\n\n[testenv]\n\nallowlist_externals = make\n\nsetenv =\n    PYTHONPATH = {toxinidir}:{toxinidir}/flassger\ncommands_pre =\n    python setup.py check --strict\ncommands =\n    make test\ndeps =\n    -r requirements.txt\n    -r requirements-dev.txt\n    flask010: flask==0.10\n    {flask010,flask012,flask10,flask104}: click<=8.1.3\n    {flask010,flask012,flask10,flask104}: itsdangerous<=1.1.0\n    {flask010,flask012,flask10,flask104}: Jinja2<=2.10.3\n    {flask010,flask012,flask10,flask104}: MarkupSafe<=1.1.1\n    {flask010,flask012,flask10,flask104}: Werkzeug<=2.0.3\n    {flask010,flask012,flask10,flask104}: flake8<=3.9.2\n    {flask010,flask012,flask10,flask104}: importlib_metadata<4.3\n    flask012: flask==0.12\n    flask10: flask==1.0\n    flask104: flask==1.0.4\n    flasklatest: flask\n    marshmallow: marshmallow\n    apispec: apispec\n    -r{toxinidir}/requirements.txt\n    -r{toxinidir}/requirements-dev.txt\n"
        },
        {
          "name": "trivial",
          "type": "blob",
          "size": 0.0517578125,
          "content": "- This trivial edit is used to authenticate travis CI"
        }
      ]
    }
  ]
}