{
  "metadata": {
    "timestamp": 1736559901973,
    "page": 658,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "grantjenks/python-sortedcontainers",
      "stars": 3621,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2412109375,
          "content": "# Python byte-code\n*.py[co]\n\n# Extension code\n*.c\n*.so\n\n# virutalenv directories\n/env*/\n\n# test files/directories\n.coverage\n.pytest_cache/\n/.tox/\n\n# setup and upload directories\n/build/\n/dist/\n*.egg-info/\n/docs/_build/\n\n# macOS metadata\n.DS_Store\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 15.0771484375,
          "content": "Sorted Containers Release History\n=================================\n\n.. contents::\n   :depth: 1\n   :local:\n\n.. currentmodule:: sortedcontainers\n\n2.4.0 (2021-05-16)\n------------------\n\n**API Changes**\n\n* Implement SortedDict methods: __or__, __ror__, and __ior__ per PEP 584.\n\n2.3.0 (2020-11-08)\n------------------\n\n**Bugfixes**\n\n* Make sort order stable when updating with large iterables.\n\n2.2.2 (2020-06-07)\n------------------\n\n**Miscellaneous**\n\n* Add \"small slice\" optimization to `SortedList.__getitem__`.\n* Silence warning when testing `SortedList.iloc`.\n\n2.2.1 (2020-06-06)\n------------------\n\n**Miscellaneous**\n\n* Fix a warning regarding `classifiers` in setup.py.\n\n2.2.0 (2020-06-06)\n------------------\n\n**Miscellaneous**\n\n* Change SortedDict to avoid cycles for CPython reference counting.\n\n2.1.0 (2018-11-21)\n------------------\n\n**Miscellaneous**\n\n* Small updates to docs and tests for Python 3.7.\n\n2.0.5 (2018-09-03)\n------------------\n\n**Bugfixes**\n\n* Change imports for Abstract Base Classes to `collections.abc` to avoid\n  warnings in Python 3.7.\n\n2.0.4 (2018-06-06)\n------------------\n\n**Bugfixes**\n\n* `SortedDict` methods `iterkeys`, `iteritems`, `itervalues`, `viewkeys`,\n  `viewitems`, and `viewvalues` are not implemented for Python 2. Attribute\n  lookup now raises :exc:`AttributeError`.\n\n2.0.3 (2018-05-31)\n------------------\n\n**API Changes**\n\n* Accessing `SortedDict.iloc` will emit `DeprecationWarning`.\n\n**Bugfixes**\n\n* `SortedSet.__rsub__` erroneously reversed its arguments. The method has been\n  removed in favor of the inherited `Set.__rsub__` which has a correct\n  implementation.\n* :class:`SortedKeysView` and :class:`SortedValuesView` set-operations now\n  return :class:`SortedSet` objects to better match the semantics of version 1.\n\n**Miscellaneous**\n\n* The source distribution no longer contains the `docs` and `tests`\n  directories. If you need these, then please download an archive from\n  Github. Version control is tagged with the version released to PyPI.\n\n2.0.2 (2018-05-21)\n------------------\n\n**API Changes**\n\n* Add `SortedDict.iloc` for improved backwards compatibility with version 1.\n\n2.0.1 (2018-05-18)\n------------------\n\n**Miscellaneous**\n\n* Rename Github repo from `grantjenks/sorted_containers` to\n  `grantjenks/python-sortedcontainers`.\n* Fix broken links in documentation.\n\n.. _v2:\n\n2.0.0 (2018-05-18)\n------------------\n\nVersion 2 represents a significant update to the source base. The code has been\nrefactored and modernized to embrace Python 3 semantics while also using\n`autodoc` in Sphinx for more maintainable documentation. The core design and\nalgorithms are all the same. Sorted Containers still supports and is tested on\nPython 2 but primary development is now on Python 3.6.\n\nVersion 2 is developed on the `master` branch in the source repository and\nVersion 1 of Sorted Containers will be maintained on branch `v1`.\n\nVersion 3 of Sorted Containers will be released sometime after January 1, 2020\nand will drop support for Python 2.\n\nAt a high-level, changes can be categorized in three ways:\n\n1. :class:`SortedList` methods `__setitem__`, `append`, `extend`, and `insert`\n   all now raise :exc:`NotImplementedError`. Use `add` or `update`\n   instead. Though it's possible to implement these methods, they were\n   confusing, inefficient and wrongly used by some users. Sorted list\n   implementations that need the functionality are encouraged to do so through\n   subclassing. Branch `v1` contains a reference implementation.\n2. :class:`SortedDict` now uses Python 3 semantics for dict views. The\n   `iterkeys`, `iteritems`, `itervalues`, `viewkeys`, `viewitems`, and\n   `viewvalues` methods have all been removed. Use the `keys`, `items`, or\n   `values` methods which now return sorted dict views. :class:`SortedKeysView`\n   has also replaced `SortedDict.iloc` as a better interface for indexing.\n3. Method parameter names have changed to be more consistent with Python's\n   built-in data types: `val` has changed to `value`, `idx` has changed to\n   `index`, and `that` has changed to `other`.\n\n**API Changes**\n\n* :class:`SortedListWithKey` is deprecated. Use :class:`SortedKeyList` instead.\n  The name `SortedListWithKey` remains as an alias for `SortedKeyList`. The\n  alias will be removed in Version 3.\n* `sortedcontainers.sortedlist.LOAD` has moved to\n  `SortedList.DEFAULT_LOAD_FACTOR` so that derived classes can customize the\n  value.\n* `SortedList._half` and `SortedList._dual` have been removed. Use\n  `SortedList._load` instead.\n* :func:`SortedList.add` parameter `val` renamed to `value`.\n* :func:`SortedList.__contains__` parameter `val` renamed to `value`.\n* :func:`SortedList.discard` parameter `val` renamed to `value`.\n* :func:`SortedList.remove` parameter `val` renamed to `value`.\n* :func:`SortedList.__delitem__` parameter `idx` renamed to `index`.\n* :func:`SortedList.__getitem__` parameter `idx` renamed to `index`.\n* :func:`SortedList.__setitem__` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedList.__delitem__` and :func:`SortedList.add` instead.\n* :func:`SortedList.bisect_left` parameter `val` renamed to `value`.\n* :func:`SortedList.bisect_right` parameter `val` renamed to `value`.\n* :func:`SortedList.bisect` parameter `val` renamed to `value`.\n* :func:`SortedList.count` parameter `val` renamed to `value`.\n* :func:`SortedList.append` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedList.add` instead.\n* :func:`SortedList.extend` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedList.update` instead.\n* :func:`SortedList.insert` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedList.add` instead.\n* :func:`SortedList.pop` parameter `idx` renamed to `index`.\n* :func:`SortedList.index` parameter `val` renamed to `value`.\n* :func:`SortedList.__add__` parameter `that` renamed to `other`.\n* :func:`SortedList.__iadd__` parameter `that` renamed to `other`.\n* :func:`SortedList.__mul__` parameter `that` renamed to `num`.\n* :func:`SortedList.__imul__` parameter `that` renamed to `num`.\n* `SortedList._make_cmp` renamed to `SortedList.__make_cmp`.\n* :func:`SortedKeyList.add` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.__contains__` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.discard` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.remove` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.bisect_left` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.bisect_right` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.bisect` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.count` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.append` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedKeyList.add` instead.\n* :func:`SortedKeyList.extend` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedKeyList.update` instead.\n* :func:`SortedKeyList.insert` now raises :exc:`NotImplementedError`. Use\n  :func:`SortedKeyList.add` instead.\n* :func:`SortedKeyList.index` parameter `val` renamed to `value`.\n* :func:`SortedKeyList.__add__` parameter `that` renamed to `other`.\n* :func:`SortedKeyList.__radd__` added.\n* :func:`SortedKeyList.__iadd__` parameter `that` renamed to `other`.\n* :func:`SortedKeyList.__mul__` parameter `that` renamed to `num`.\n* :func:`SortedKeyList.__rmul__` added.\n* :func:`SortedKeyList.__imul__` parameter `that` renamed to `num`.\n* Removed `SortedDict.iloc`. Use :func:`SortedDict.keys` and\n  :class:`SortedKeysView` instead.\n* :func:`SortedDict.fromkeys` parameter `seq` renamed to `iterable`.\n* :func:`SortedDict.keys` now returns :class:`SortedKeysView`.\n* :func:`SortedDict.items` now returns :class:`SortedItemsView`.\n* :func:`SortedDict.values` now returns :class:`SortedValuesView`.\n* Removed `SortedDict.viewkeys`. Use :func:`SortedDict.keys` instead.\n* Removed `SortedDict.viewitems`. Use :func:`SortedDict.items` instead.\n* Removed `SortedDict.viewvalues`. Use :func:`SortedDict.values` instead.\n* `SortedDict.iterkeys` removed. Use :func:`SortedDict.keys` instead.\n* `SortedDict.iteritems` removed. Use :func:`SortedDict.items` instead.\n* `SortedDict.itervalues` removed. Use :func:`SortedDict.values` instead.\n* `SortedDict.popitem` now accepts an optional `index` argument. Default\n  ``-1``.\n* `sorteddict.KeysView` renamed to :class:`SortedKeysView`.\n* `sorteddict.ItemsView` renamed to :class:`SortedItemsView`.\n* `sorteddict.ValuesView` renamed to :class:`SortedValuesView`.\n* Sorted dict views rely on collections abstract base classes: dict views and\n  sequence. The :func:`SortedKeysView.__getitem__`,\n  :func:`SortedItemsView.__getitem__`, and :func:`SortedValuesView.__getitem__`\n  methods are implemented and optimized. All other mixin methods use the\n  default implementation provided by the base class. Prefer :class:`SortedDict`\n  methods to view methods when possible.\n* `SortedSet._make_cmp` renamed to `SortedSet.__make_cmp`.\n* :func:`SortedSet.symmetric_difference` parameter `that` renamed to `other`.\n* :func:`SortedSet.symmetric_difference_update` parameter `that` renamed to\n  `other`.\n\n**Miscellaneous**\n\n* Sphinx `autodoc` now used for API documentation.\n* All benchmarks now run on CPython 3.6 unless otherwise noted.\n* Testing now uses `pytest` rather than `nose`.\n* AppVeyor CI testing added.\n* Updated versions of alternative implementations.\n\n1.5.10 (2018-04-21)\n-------------------\n\n**Miscellaneous**\n\n* Improved performance of irange(...) and islice(...) methods.\n\n1.5.9 (2017-12-08)\n------------------\n\n**Miscellaneous**\n\n* Dropped CPython 2.6 testing.\n\n1.5.8 (2017-12-08)\n------------------\n\n**Bugfixes**\n\n* Added ``SortedList.reverse`` to override ``MutableSequence.reverse`` and\n  raise ``NotImplementedError``.\n\n1.5.7 (2016-12-22)\n------------------\n\n**Bugfixes**\n\n* Changed ``SortedList.__setitem__`` to support slices with stop less than\n  start and step equal one.\n\n1.5.6 (2016-12-09)\n------------------\n\n**Bugfixes**\n\n* Changed ``SortedList.__setitem__`` to support slices that alias itself.\n\n\n1.5.5 (2016-12-05)\n------------------\n\n**Bugfixes**\n\n* Changed ``SortedList.extend`` to support empty iterables.\n\n1.5.4 (2016-10-16)\n------------------\n\n**Bugfixes**\n\n* Changed ``SortedList.__new__`` to call ``SortedListWithKey.__init__`` once\n  instead of twice.\n\n1.5.3 (2016-06-01)\n------------------\n\n**Miscellaneous**\n\n* Updated documentation with PyCon 2016 Talk.\n\n1.5.2 (2016-05-28)\n------------------\n\n**API Changes**\n\n* Added ``SortedDict.peekitem`` method.\n\n1.5.1 (2016-05-26)\n------------------\n\n**Miscellaneous**\n\n* Added support for PyLint and minor source changes.\n* Dropped Python 3.2 support from tox testing due to virtualenv limitations.\n\n1.5.0 (2016-05-26)\n------------------\n\n**Miscellaneous**\n\n* Added Performance at Scale documentation.\n\n1.4.3 (2015-12-03)\n------------------\n\n**Miscellaneous**\n\n* Updated documentation with SF Python 2015 Holiday Meetup Talk.\n\n1.4.2 (2015-10-20)\n------------------\n\n**API Changes**\n\n* Changed ``SortedList`` initializer to support key-argument callable and\n  automatically return ``SortedListWithKey`` when present.\n* Changed ``SortedListWithKey`` to inherit from ``SortedList``.\n* Changed ``SortedSet.__ior__`` to call `update` rather than `union`.\n* Changed SortedList comparison to match Sequence semantics as described in\n  CPython Language Reference Section 5.9.\n* Changed SortedSet comparison to raise NotImplemented on type mismatch.\n* Removed SortedList.as_list method. Use ``list(sorted_list)`` instead.\n* Removed SortedList._slice method. Use ``slice.indices`` instead.\n* Added private references to public methods for internal use to ease\n  method over-loading.\n\n**Bugfixes**\n\n* Changed sorteddict.ValuesView.count to correctly reference sorted dictionary.\n\n**Improvements**\n\n* ``SortedList.__getitem__`` now 35% faster for indexing at beginning and end.\n* ``SortedList.pop`` now 35% faster by inlining fast-paths.\n* ``del sorted_list[:]`` now calls `clear` and is much faster.\n* ``sorted_list[:] = values`` now calls `clear` and `update` and is much faster.\n\n**Miscellaneous**\n\n* Added Python 3.5 support in tox testing.\n* Added discussion of `ruamel.ordereddict.sorteddict` to performance\n  documentation.\n* Merged file ``sortedlistwithkey.py`` into ``sortedlist.py``.\n\n0.9.6 (2015-06-22)\n------------------\n\n**API Changes**\n\n* Added ``islice`` method to sorted list, dict, and set types.\n* Added ``irange`` and ``irange_key`` method to sorted list, dict, and set\n  types.\n\n0.9.5 (2015-03-16)\n------------------\n\n**API Changes**\n\n* Added ``bisect_key`` methods to sorted list, dict, and set types.\n* Added ``last=True`` argument to ``SortedDict.popitem``.\n\n0.9.4 (2014-12-04)\n------------------\n\n**Bugfixes**\n\n* Added implementation and testing for Python pickle module.\n\n0.9.3 (2014-11-30)\n------------------\n\n**API Changes**\n\n* Removed ``SortedListWithKeyPair`` type.\n\n**Improvements**\n\n* Changed type references to ``self.__class__`` as able.\n\n0.9.2 (2014-10-20)\n------------------\n\n**API Changes**\n\n* Removed ``value_orderable`` argument from ``SortedListWithKey`` initializer.\n* Added key-callable argument to ``SortedDict`` initializer.\n* Added key-callable argument to ``SortedSet`` initializer.\n\n**Improvements**\n\n* Changed ``SortedDict`` to inherit directly from ``dict``.\n\n**Miscellaneous**\n\n* Added PyPy3 support to tox testing.\n* Added ``SortedListWithKey`` to sorted list performance comparison\n  documentation.\n\n0.9.1 (2014-09-20)\n------------------\n\n**Bugfixes**\n\n* Changed ``SortedList.__setitem__`` with slices to correctly update internal\n  \"maxes\" index.\n\n0.9.0 (2014-09-17)\n------------------\n\n**API Changes**\n\n* Added ``__ior__``, ``__iand__``, ``__isub__``, and ``__ixor__`` methods to\n  ``SortedSet`` interface.\n\n**Improvements**\n\n* Changed position-based indexing to use dense tree-based index.\n\n**Miscellaneous**\n\n* Added workload-based performance comparison for sorted list: Priority Queue,\n  Multiset, etc.\n\n0.8.5 (2014-08-11)\n------------------\n\n**Bugfixes**\n\n* Changed copy methods to make shallow copies: values are not copied, only\n  references to values are copied.\n\n**Miscellaneous**\n\n* Added load-factor performance comparison documentation.\n\n0.8.4 (2014-07-29)\n------------------\n\n**API Changes**\n\n* Added ``value_orderable`` parameter to ``SortedListWithKey`` to support\n  incomparable value types.\n\n**Bugfixes**\n\n* Changed ``repr`` methods to prevent infinite recursion and allow easier\n  subclassing.\n\n0.8.3 (2014-07-07)\n------------------\n\n**Miscellaneous**\n\n* Added more testing for sorted lists with key-callable argument.\n\n0.8.2 (2014-06-13)\n------------------\n\n**API Changes**\n\n* Added ``SortedListWithKey`` type with implementation based on\n  ``(key, value)`` tuples.\n\n0.8.1 (2014-05-08)\n------------------\n\n**Bugfixes**\n\n* Added contains-key check in sorted dict equality comparisons.\n\n**Miscellaneous**\n\n* Added Python runtime comparison to documentation.\n* Added sorted dict and set comparison to benchmark documentation.\n* Added Travis-CI testing.\n\n0.8.0 (2014-04-08)\n------------------\n\n**API Changes**\n\n* Added ``bisect`` methods from ``SortedList`` to ``SortedDict`` interface.\n\n0.7.0 (2014-04-02)\n------------------\n\n**Miscellaneous**\n\n* Added Banyan module to benchmark documentation.\n\n0.6.0 (2014-03-18)\n------------------\n\n**Miscellaneous**\n\n* Added testing support for CPython 2.6, 2.7, 3.2, and 3.3 with full coverage.\n\n0.5.0 (2014-03-14)\n------------------\n\n* Initial release of sorted list, dict, and set types.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5439453125,
          "content": "Copyright 2014-2024 Grant Jenks\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0263671875,
          "content": "include README.rst LICENSE\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 9.341796875,
          "content": "Python Sorted Containers\n========================\n\n`Sorted Containers`_ is an Apache2 licensed `sorted collections library`_,\nwritten in pure-Python, and fast as C-extensions.\n\nPython's standard library is great until you need a sorted collections\ntype. Many will attest that you can get really far without one, but the moment\nyou **really need** a sorted list, sorted dict, or sorted set, you're faced\nwith a dozen different implementations, most using C-extensions without great\ndocumentation and benchmarking.\n\nIn Python, we can do better. And we can do it in pure-Python!\n\n.. code-block:: python\n\n    >>> from sortedcontainers import SortedList\n    >>> sl = SortedList(['e', 'a', 'c', 'd', 'b'])\n    >>> sl\n    SortedList(['a', 'b', 'c', 'd', 'e'])\n    >>> sl *= 10_000_000\n    >>> sl.count('c')\n    10000000\n    >>> sl[-3:]\n    ['e', 'e', 'e']\n    >>> from sortedcontainers import SortedDict\n    >>> sd = SortedDict({'c': -3, 'a': 1, 'b': 2})\n    >>> sd\n    SortedDict({'a': 1, 'b': 2, 'c': -3})\n    >>> sd.popitem(index=-1)\n    ('c', -3)\n    >>> from sortedcontainers import SortedSet\n    >>> ss = SortedSet('abracadabra')\n    >>> ss\n    SortedSet(['a', 'b', 'c', 'd', 'r'])\n    >>> ss.bisect_left('c')\n    2\n\nAll of the operations shown above run in faster than linear time. The above\ndemo also takes nearly a gigabyte of memory to run. When the sorted list is\nmultiplied by ten million, it stores ten million references to each of \"a\"\nthrough \"e\". Each reference requires eight bytes in the sorted\ncontainer. That's pretty hard to beat as it's the cost of a pointer to each\nobject. It's also 66% less overhead than a typical binary tree implementation\n(e.g. Red-Black Tree, AVL-Tree, AA-Tree, Splay-Tree, Treap, etc.) for which\nevery node must also store two pointers to children nodes.\n\n`Sorted Containers`_ takes all of the work out of Python sorted collections -\nmaking your deployment and use of Python easy. There's no need to install a C\ncompiler or pre-build and distribute custom extensions. Performance is a\nfeature and testing has 100% coverage with unit tests and hours of stress.\n\n.. _`Sorted Containers`: http://www.grantjenks.com/docs/sortedcontainers/\n.. _`sorted collections library`: http://www.grantjenks.com/docs/sortedcontainers/\n\nTestimonials\n------------\n\n**Alex Martelli**, `Fellow of the Python Software Foundation`_\n\n\"Good stuff! ... I like the `simple, effective implementation`_ idea of\nsplitting the sorted containers into smaller \"fragments\" to avoid the O(N)\ninsertion costs.\"\n\n**Jeff Knupp**, `author of Writing Idiomatic Python and Python Trainer`_\n\n\"That last part, \"fast as C-extensions,\" was difficult to believe. I would need\nsome sort of `Performance Comparison`_ to be convinced this is true. The author\nincludes this in the docs. It is.\"\n\n**Kevin Samuel**, `Python and Django Trainer`_\n\nI'm quite amazed, not just by the code quality (it's incredibly readable and\nhas more comment than code, wow), but the actual amount of work you put at\nstuff that is *not* code: documentation, benchmarking, implementation\nexplanations. Even the git log is clean and the unit tests run out of the box\non Python 2 and 3.\n\n**Mark Summerfield**, a short plea for `Python Sorted Collections`_\n\nPython's \"batteries included\" standard library seems to have a battery\nmissing. And the argument that \"we never had it before\" has worn thin. It is\ntime that Python offered a full range of collection classes out of the box,\nincluding sorted ones.\n\n`Sorted Containers`_ is used in popular open source projects such as:\n`Zipline`_, an algorithmic trading library from Quantopian; `Angr`_, a binary\nanalysis platform from UC Santa Barbara; `Trio`_, an async I/O library; and\n`Dask Distributed`_, a distributed computation library supported by Continuum\nAnalytics.\n\n.. _`Fellow of the Python Software Foundation`: https://en.wikipedia.org/wiki/Alex_Martelli\n.. _`simple, effective implementation`: http://www.grantjenks.com/docs/sortedcontainers/implementation.html\n.. _`author of Writing Idiomatic Python and Python Trainer`: https://jeffknupp.com/\n.. _`Python and Django Trainer`: https://www.elephorm.com/formateur/kevin-samuel\n.. _`Python Sorted Collections`: http://www.qtrac.eu/pysorted.html\n.. _`Zipline`: https://github.com/quantopian/zipline\n.. _`Angr`: https://github.com/angr/angr\n.. _`Trio`: https://github.com/python-trio/trio\n.. _`Dask Distributed`: https://github.com/dask/distributed\n\nFeatures\n--------\n\n- Pure-Python\n- Fully documented\n- Benchmark comparison (alternatives, runtimes, load-factors)\n- 100% test coverage\n- Hours of stress testing\n- Performance matters (often faster than C implementations)\n- Compatible API (nearly identical to older blist and bintrees modules)\n- Feature-rich (e.g. get the five largest keys in a sorted dict: d.keys()[-5:])\n- Pragmatic design (e.g. SortedSet is a Python set with a SortedList index)\n- Developed on Python 3.10\n- Tested with CPython 3.7, 3.8, 3.9, 3.10, 3.11, 3.12 and PyPy3\n- Tested on Linux, Mac OSX, and Windows\n\n.. image:: https://github.com/grantjenks/python-sortedcontainers/workflows/integration/badge.svg\n   :target: http://www.grantjenks.com/docs/sortedcontainers/\n\n.. image:: https://github.com/grantjenks/python-sortedcontainers/workflows/release/badge.svg\n   :target: http://www.grantjenks.com/docs/sortedcontainers/\n\nQuickstart\n----------\n\nInstalling `Sorted Containers`_ is simple with `pip\n<https://pypi.org/project/pip/>`_::\n\n    $ pip install sortedcontainers\n\nYou can access documentation in the interpreter with Python's built-in `help`\nfunction. The `help` works on modules, classes and methods in `Sorted\nContainers`_.\n\n.. code-block:: python\n\n    >>> import sortedcontainers\n    >>> help(sortedcontainers)\n    >>> from sortedcontainers import SortedDict\n    >>> help(SortedDict)\n    >>> help(SortedDict.popitem)\n\nDocumentation\n-------------\n\nComplete documentation for `Sorted Containers`_ is available at\nhttp://www.grantjenks.com/docs/sortedcontainers/\n\nUser Guide\n..........\n\nThe user guide provides an introduction to `Sorted Containers`_ and extensive\nperformance comparisons and analysis.\n\n- `Introduction`_\n- `Performance Comparison`_\n- `Load Factor Performance Comparison`_\n- `Runtime Performance Comparison`_\n- `Simulated Workload Performance Comparison`_\n- `Performance at Scale`_\n\n.. _`Introduction`: http://www.grantjenks.com/docs/sortedcontainers/introduction.html\n.. _`Performance Comparison`: http://www.grantjenks.com/docs/sortedcontainers/performance.html\n.. _`Load Factor Performance Comparison`: http://www.grantjenks.com/docs/sortedcontainers/performance-load.html\n.. _`Runtime Performance Comparison`: http://www.grantjenks.com/docs/sortedcontainers/performance-runtime.html\n.. _`Simulated Workload Performance Comparison`: http://www.grantjenks.com/docs/sortedcontainers/performance-workload.html\n.. _`Performance at Scale`: http://www.grantjenks.com/docs/sortedcontainers/performance-scale.html\n\nCommunity Guide\n...............\n\nThe community guide provides information on the development of `Sorted\nContainers`_ along with support, implementation, and history details.\n\n- `Development and Support`_\n- `Implementation Details`_\n- `Release History`_\n\n.. _`Development and Support`: http://www.grantjenks.com/docs/sortedcontainers/development.html\n.. _`Implementation Details`: http://www.grantjenks.com/docs/sortedcontainers/implementation.html\n.. _`Release History`: http://www.grantjenks.com/docs/sortedcontainers/history.html\n\nAPI Documentation\n.................\n\nThe API documentation provides information on specific functions, classes, and\nmodules in the `Sorted Containers`_ package.\n\n- `Sorted List`_\n- `Sorted Dict`_\n- `Sorted Set`_\n\n.. _`Sorted List`: http://www.grantjenks.com/docs/sortedcontainers/sortedlist.html\n.. _`Sorted Dict`: http://www.grantjenks.com/docs/sortedcontainers/sorteddict.html\n.. _`Sorted Set`: http://www.grantjenks.com/docs/sortedcontainers/sortedset.html\n\nTalks\n-----\n\n- `Python Sorted Collections | PyCon 2016 Talk`_\n- `SF Python Holiday Party 2015 Lightning Talk`_\n- `DjangoCon 2015 Lightning Talk`_\n\n.. _`Python Sorted Collections | PyCon 2016 Talk`: http://www.grantjenks.com/docs/sortedcontainers/pycon-2016-talk.html\n.. _`SF Python Holiday Party 2015 Lightning Talk`: http://www.grantjenks.com/docs/sortedcontainers/sf-python-2015-lightning-talk.html\n.. _`DjangoCon 2015 Lightning Talk`: http://www.grantjenks.com/docs/sortedcontainers/djangocon-2015-lightning-talk.html\n\nResources\n---------\n\n- `Sorted Containers Documentation`_\n- `Sorted Containers at PyPI`_\n- `Sorted Containers at Github`_\n- `Sorted Containers Issue Tracker`_\n\n.. _`Sorted Containers Documentation`: http://www.grantjenks.com/docs/sortedcontainers/\n.. _`Sorted Containers at PyPI`: https://pypi.org/project/sortedcontainers/\n.. _`Sorted Containers at Github`: https://github.com/grantjenks/python-sortedcontainers\n.. _`Sorted Containers Issue Tracker`: https://github.com/grantjenks/python-sortedcontainers/issues\n\nSorted Containers License\n-------------------------\n\nCopyright 2014-2024 Grant Jenks\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.384765625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"sortedcontainers\"\ndescription = \"Sorted Containers -- Sorted List, Sorted Dict, Sorted Set\"\nauthors = [\n    {\"name\" = \"Grant Jenks\", \"email\" = \"contact@grantjenks.com\"},\n]\nreadme = \"README.rst\"\nrequires-python = \">=3.2\"\nlicense = {\"text\" = \"Apache 2.0\"}\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Natural Language :: English\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n]\ndynamic = [\"version\"]\n\n[project.urls]\nDocumentation = \"https://grantjenks.com/docs/sortedcontainers/\"\nSource = \"https://github.com/grantjenks/python-sortedcontainers\"\nTracker = \"https://github.com/grantjenks/python-sortedcontainers/issues\"\n\n[tool.setuptools.dynamic]\nversion = {attr = \"sortedcontainers.__version__\"}\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n\n[tool.ruff]\nformat.quote-style = \"single\"\n\n[tool.ruff.lint]\nignore = [\n    # E501 Line too long\n    \"E501\",\n]\nselect = [\n    # pycodestyle\n    \"E\",\n    # Pyflakes\n    \"F\",\n    # pyupgrade\n    \"UP\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n]\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1484375,
          "content": "bintrees\nblist\ncoverage\ndoc8\ngj\nmatplotlib\npyannote-banyan\npylint<2.6\npytest\npytest-cov\nrstcheck\nscipy\nskiplistcollections\nsphinx\ntox\ntreap\ntwine\nwheel\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.6572265625,
          "content": "[tox]\nenvlist=rufflint,ruffformatcheck,doc8,docs,rstcheck,build-check,py{38,39,310,311,312,py3}\nskip_missing_interpreters=True\n\n[testenv]\ncommands=\n    pytest {posargs}\ndeps=\n    pytest\n    pytest-cov\nsetenv=\n    PY_IGNORE_IMPORTMISMATCH=1\n\n[pytest]\naddopts=\n    --doctest-modules\n    --doctest-glob \"*.rst\"\n    --ignore tests/benchmark.py\n    --ignore tests/benchmark_plot.py\n    --ignore tests/benchmark_sorteddict.py\n    --ignore tests/benchmark_sortedlist.py\n    --ignore tests/benchmark_sortedset.py\n    --ignore tests/plot_lengths_histogram_add.py\n    --ignore tests/plot_lengths_histogram_delitem.py\ntestpaths=docs src/sortedcontainers tests\n\n[testenv:rufflint]\ncommands=ruff check {toxinidir}/src\ndeps=ruff\nskip_install=True\n\n[testenv:rufflintfix]\ncommands=ruff check --fix {toxinidir}/src\ndeps=ruff\nskip_install=True\n\n[testenv:ruffformatcheck]\ncommands=ruff format --check {toxinidir}\ndeps=ruff\nskip_install=True\n\n[testenv:ruffformat]\ncommands=ruff format {toxinidir}\ndeps=ruff\nskip_install=True\n\n[testenv:doc8]\ncommands=doc8 docs --ignore-path docs/_build\ndeps=doc8\n\n[testenv:docs]\nallowlist_externals=make\nchangedir=docs\ncommands=make html\ndeps=\n    sphinx\n\n[testenv:rstcheck]\ncommands=rstcheck {toxinidir}/README.rst\ndeps=rstcheck\n\n[testenv:uploaddocs]\nallowlist_externals=rsync\nchangedir=docs\ncommands=\n    rsync  --rsync-path 'sudo -u herokuish rsync' -azP --stats --delete \\\n        _build/html/ \\\n        grantjenks:/srv/www/grantjenks.com/public/docs/sortedcontainers/\n\n[testenv:build-check]\ndescription=Builds source and binary packages and uses twine check to validate\nskip_install=True\ndeps=\n    build\n    twine\ncommands=\n    python -m build\n    twine check {toxinidir}/dist/*\n"
        }
      ]
    }
  ]
}