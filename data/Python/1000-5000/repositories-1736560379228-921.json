{
  "metadata": {
    "timestamp": 1736560379228,
    "page": 921,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spaceandtimelabs/SxT-Python-SDK",
      "stars": 3286,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.2880859375,
          "content": "__pycache__/\n*.py[cod]\n*$py.class\nresources/\ntables/\nusers/\nskip/\nold/\ntests/tables\ntests/views\ntests/scratchpad*\nprojects/\nlogs/\nbuild_biscuit-python/\npublish.sh\n.env_*\nvenv_*\ntests/backup_biscuits/\ntests/latest_test_log.txt\n\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos \ninto it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since \nthe code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include \nPipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific \ndependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that \ndon't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include \npoetry.lock in version control.\n#   This is especially recommended for binary packages to ensure \nreproducibility, and is more\n#   commonly ignored for libraries.\n#   \nhttps://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include \npdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is \nrecommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and \ngithub.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate \nJetBrains.gitignore that can\n#  be found at \nhttps://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For \na more nuclear\n#  option (not recommended) you can uncomment the following to ignore the \nentire idea folder.\n#.idea/\n\nsource\n\n# Extra Files\nmysdk.py\npublic-key-file.txt\nprivate-key-file.txt\ntester.py\nsession.txt\n.DS_Store\nmocktest.py\n.env"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2023 Space and Time\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0400390625,
          "content": "include src/spaceandtime/apiversions.json"
        },
        {
          "name": "README.MD",
          "type": "blob",
          "size": 7.255859375,
          "content": "\n  \n  \n\n## Python Space and Time SDK \n\n  \n\nPython SDK for Space and Time Gateway (python version >= 3.11)\n\n  \n\n## Installation Instructions\n\n  \n\n_Note: The recommended approach to storing keys is using an `.env` file. \nFor more information, please see: https://docs.spaceandtime.io/docs/dotenv_\n\n  \n\n```sh\npip install spaceandtime\n```\n\n \n  \n\n### Getting Started\n\n```python\n# Initializing the Space and Time usage.\nfrom spaceandtime import SpaceAndTime\n\nsxt = SpaceAndTime()\nsxt.authenticate()\n\nsuccess, rows = sxt.execute_query(\n\t'select * from POLYGON.BLOCKS limit 5')\nprint( rows )\n```\n\nThe authentication without arguments will seek out a default `.env` file and use credentials found there.  It also supports passing in a specific ```filepath.env``` or simply supplying ```user_id``` and ```private_key```.\n\nThe generated ``access_token`` is valid for 25 minutes and the ``refresh_token`` for 30 minutes.\n\nThere are a number of convenience features in the SDK for handling return data sets. By default, data sets are returned as a list-of-dictionaries, however can be easily turned into other formats, such as CSV.\n\n```python\n# use triple-quotes to insert more complicated sql:\nsuccess, rows = sxt.execute_query(\"\"\"\n\tSELECT \n\tsubstr(time_stamp,1,7) AS YrMth\n\t,count(*) AS block_count\n\tFROM polygon.blocks \n\tGROUP BY YrMth\n\tORDER BY 1 desc \"\"\" )\n\n# print results as CSV\nprint( sxt.json_to_csv(rows) )\n```\n\nMore data transforms will be added over time.\n\n### SXTUser Object\n\nAll SQL requests are handled by an authenticated user object.  The ```sxt``` wrapper object contains a 'default user' object for simplicity, managing and authenticating as needed.  It is however exposed if needed:\n\n```python\nprint( sxt.user )\n```\n\nYou can also manage users directly.  This allows you to load and authenticate multiple users at a time, in case your application needs to manage several accounts.\n\n_**All interaction with the network requires an authenticated user.**_\n\nThe user object owns the authenticated connection to the network, so all requests are submitted by a user object.\n\n```python\n# Multiple Users\nfrom spaceandtime import SXTUser\n\nsuzy = SXTUser('./users/suzy.env', authenticate=True)\n\nbill = SXTUser()\nbill.load()         # defaults to \"./.env\"\nbill.authenticate()\n\n# new user\npat = SXTUser(user_id='pat')\npat.new_keypair()\npat.api_url = suzy.api_url\npat.save() # <-- Important! don't lose keys!\npat.authenticate()\n```\n\nThere is also some capability to administer your subscription using the SDK.  This capability will expand more over time.\n\n```python\n# suzy invites pat to her subcription:\nif suzy.user_type in ['owner','admin']: \n\tjoincode = suzy.generate_joincode()\n\tsuccess, results = pat.join_subscription(joincode)\n\tprint( results )\n```\n\n\n\n### DISCOVERY\n\nThere are several discovery functions that allow insight to the Space and Time network metadata.\n\n\n```python\n# discovery calls provide network information\nsuccess, schemas = sxt.discovery_get_schemas()\n\nprint(f'There are {len(schemas)} schemas currently on the network.')\nprint(schemas)\n```\n\n\n### Creating Tables\n\nThe SDK abstracts away complexity from making a new table into a Table object.  This object contains all needed components to be self-sufficient _EXCEPT_ for an authenticated user object, which is required to submit the table creation to the network.\n\n```python\n# Create a table\nfrom spaceandtime import SXTTable, SXTTableAccessType\n\ntableA = SXTTable(name = \"SXTTEMP.MyTestTable\", \n\t\t\t\tnew_keypair = True, \n\t\t\t\tdefault_user = sxt.user,\n\t\t\t\tlogger = sxt.logger,\n\t\t\t\taccess_type = SXTTableAccessType.PERMISSSIONED)\n\ntableA.create_ddl = \"\"\"\n\tCREATE TABLE {table_name} \n\t( MyID         int\n\t, MyName       varchar\n\t, MyDate       date\n\t, Primary Key(MyID) \n\t) {with_statement}\n\"\"\" \n\n# create new biscuits for your table\ntableA.add_biscuit('read',  tableA.PERMISSION.SELECT )\n\ntableA.add_biscuit('write', tableA.PERMISSION.SELECT, \n\t\t\t\t\t\t\ttableA.PERMISSION.INSERT, \n\t\t\t\t\t\t\ttableA.PERMISSION.UPDATE, \n\t\t\t\t\t\t\ttableA.PERMISSION.DELETE,\n\t\t\t\t\t\t\ttableA.PERMISSION.MERGE )\n\ntableA.add_biscuit('admin', tableA.PERMISSION.ALL )\n\ntableA.save() # <-- Important!  Don't lose your keys!\n\n# create with assigned default user\nsuccess, results = tableA.create()  \n```\n\n\nThe ```table.create_ddl``` and ```table.with_statement``` property will substitute {names} to replace with class values.  In the example above, the ```{table_name}``` will be replace with ```tableA.table_name``` and the ```{with_statement}``` will be replaced with a valid WITH statement, itself with substitutions for ```{public_key}``` and ```{access_type}```.\n\nNote, if the ```{with_statement}``` placeholder is absent, the table object will attempt to add dynamically.\n\nWhen adding biscuits, they can either be added as string tokens, or as SXTBiscuit type objects, or as a list of either.\n\nThe ```tableA.save()``` function will save all keys, biscuits, and table attributes to a shell-friendly format, such that you could execute the file in shell and load all values to environment variables, for use in other scripting. For example,\n\n```sh\nStephen~$ . ./table--SXTTEMP.New_TableName.sql\nStephen~$ echo $TABLE_NAME\n  SXTTEMP.New_TableName\n```\nThis allows table files created in the python SDK to be used with the SxT CLI. \n\n\n### Insert, Deletes, and Selects\n\nThere are helper functions to assist quickly adding, removing, and selecting data in the table.  Note, these are just helper functions for the specific table object - for more general SQL interface, use the ```sxt.execute_query()``` function. \n\n```python\nfrom pprint import pprint # for better viewing of data\n\n# generate some dummy data\ndata = [{'MyID':i, 'MyName':chr(64+i), 'MyDate':f'2023-09-0{i}'} for i in list(range(1,10))]\n\n# insert into the table\ntableA.insert.with_list_of_dicts(data)\n\n# select out again, just for fun\nsuccess, rows = tableA.select()\npprint( rows )\n\ntableA.delete(where='MyID=6')\n\n# one less than last time\nsuccess, rows = tableA.select()\npprint( rows )\n```\n\n### Creating Views \n\nThe SXTView object inherits from the same base class as SXTTable, so the two are very similar.  One notable difference is a view's need for a biscuit for each table referenced.  To add clarity and remind of this requirement, a view contains a ```table_biscuit``` property. Also note that views don't need DML PERMISSIONS, like insert or delete.\n\n```python\n# create a view \nfrom spaceandtime import SXTView\n\nviewB = SXTView('SXTTEMP.MyTest_Odds',\n \t\t\t\tdefault_user=tableA.user, \n\t\t\t\tprivate_key=tableA.private_key, \n\t\t\t\tlogger=tableA.logger)\n\nviewB.add_biscuit('read', viewB.PERMISSION.SELECT)\nviewB.add_biscuit('admin', viewB.PERMISSION.ALL) \nviewB.table_biscuit = tableA.get_biscuit('admin')\n\nviewB.create_ddl = \"\"\"\n\tCREATE VIEW {view_name} \n\t{with_statement} \n\tAS\n\tSELECT *\n\tFROM \"\"\" + tableA.table_name + \"\"\"\n\tWHERE MyID in (1,3,5,7,9) \"\"\"\n\nviewB.save() # <-- Important! don't lose keys!\n\nsuccess, results = viewB.create()\n```\n\nWe've used the same private key for the table and the view.  This is NOT required, but is convenient if you are building a view atop only one table.  \n\nEach object comes with a pre-built ```recommended_filename``` which acts as the default for ```save()``` and ```load()```.  \n\n```python\nprint( tableA.recommended_filename )\nprint( viewB.recommended_filename )\nprint( suzy.recommended_filename )\n```\n\nOnce you're done, it's best practice to clean up.  \n\n```python\nviewB.drop()\ntableA.drop()\n```\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.4111328125,
          "content": "# pyproject.toml\n\n[build-system]\nrequires      = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"spaceandtime\"\nversion = \"1.1.24\"\ndescription = \"SDK for Space and Time verifiable database\"\nauthors = [{ name = \"Stephen Hilton\", email = \"stephen.hilton@spaceandtime.io\" }]\nreadme = \"README.md\"\nrequires-python = \">=3.10\"\nlicense = { file = \"LICENSE\" }\nclassifiers = [\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n]\nkeywords = [\"space and time\", \"sxt\", \"spaceandtime\", \"verifiable\", \"database\", \"web3\", \"blockchain\", \"data warehouse\", \"data\"]\ndependencies = [\n    \"PyNaCl==1.5.0\",\n    \"python-dotenv==1.0.0\",\n    \"Requests==2.31.0\",\n    \"pandas >=2.1.3\",\n    \"pyarrow >= 14.0.1\",\n    \"fastparquet >= 2023.10.1\",\n    \"biscuit-python >= 0.2.0\",\n    \"pysteve\"\n]\n\n\n[project.optional-dependencies]\ndev = [\"pip-tools\", \"pytest\"]\n\n[project.urls]\nHomepage = \"https://spaceandtime.io\"\nDocs = \"https://docs.spaceandtime.io\"\nDocumentation = \"https://docs.spaceandtime.io\"\nGithub = \"https://github.com/spaceandtimelabs/SxT-Python-SDK\"\n\n[project.scripts]\nsxtlogin = \"spaceandtime.__main__:main\"\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]  \n# include = [\"my_package*\"]  # package names should match these glob patterns ([\"*\"] by default)\n# exclude = [\"my_package.tests*\"]  # exclude packages matching these glob patterns (empty by default)"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1376953125,
          "content": "PyNaCl==1.5.0\npython-dotenv==1.0.0\nRequests==2.31.0\npandas >=2.1.3\npyarrow >= 14.0.1\nfastparquet >= 2023.10.1\nbiscuit-python >= 0.2.0\npySteve"
        },
        {
          "name": "run_test_py3x.sh",
          "type": "blob",
          "size": 0.4501953125,
          "content": "cd /Users/stephen.hilton/Dev/SxT-Python-SDK\n\n# -- py3.10.13\npython3.10 -m venv venv_310\n. ./venv_310/bin/activate\npip install --upgrade pip\npip3 install -r requirements.txt\npip3 install pytest\necho RUNNING PYTHON 3.10 TESTING\npytest --verbose\ndeactivate\n\n# -- py3.11\npython3.11 -m venv venv_311\n. ./venv_311/bin/activate\npip install --upgrade pip\npip3 install -r requirements.txt\npip3 install pytest\necho RUNNING PYTHON 3.11 TESTING\npytest --verbose\ndeactivate\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}