{
  "metadata": {
    "timestamp": 1736559539563,
    "page": 138,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gd3kr/BlenderGPT",
      "stars": 4640,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2023 Aarya Gadekar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.8740234375,
          "content": "# BlenderGPT\n![Header](https://user-images.githubusercontent.com/63528145/227160213-6862cd5e-b31f-43ea-a5e5-6cc340a95617.png)\n\n\n\n\n\n\nBlender can be controlled using program scripts written in Python. Recent Large Language Models like OpenAI's GPT-4 can generate these Python scripts from simple English and execute them. This plugin provides an easy to use interface that integrates OpenAI's GPT-4/GPT-3.5 right in the UI, allowing you to use natural language commands to control Blender.\n\n# Note\n\nAccess to GPT-4 in this addon can ONLY be obtained through the OpenAI waitlist (https://openai.com/waitlist/gpt-4-api), which in turn grants your account access to this model via the API.\n\n\n**GPT-4 access via the API is different from GPT-4 access via ChatGPT-Plus ($20/month subscription). This addon will only work with GPT-4 if you have been accepted into the waitlist (https://openai.com/waitlist/gpt-4-api) and have access to the API via your OpenAI API key**\n\n## Installation\n\n1. Clone this repository by clicking `Code > Download ZIP` on GitHub\n2. Open Blender, go to `Edit > Preferences > Add-ons > Install`\n3. Select the downloaded ZIP file and click `Install Add-on`\n4. Enable the add-on by checking the checkbox next to `GPT-4 Blender Assistant`\n5. Paste your OpenAI API key in the Addon preferences menu.\n5. To view the code generations in realtime, go to `Window > Toggle System Console`\n\n## Usage\n\n1. In the 3D View, open the sidebar (press `N` if not visible) and locate the `GPT-4 Assistant` tab\n2. Type a natural language command in the input field, e.g., \"create a cube at the origin\"\n3. Click the `Execute` button to generate and execute the Blender Python code\n\n\n## Requirements\n\n- Blender 3.1 or later\n- OpenAI API key (Accessible at https://platform.openai.com/account/api-keys)\n\n\n## Demonstration\nhttps://user-images.githubusercontent.com/63528145/227158577-d92c6e8d-df21-4461-a69b-9e7cde8c8dcf.mov\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 7.451171875,
          "content": "import sys\nimport os\nimport bpy\nimport bpy.props\nimport re\n\n# Add the 'libs' folder to the Python path\nlibs_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), \"lib\")\nif libs_path not in sys.path:\n    sys.path.append(libs_path)\n\nimport openai\n\nfrom .utilities import *\nbl_info = {\n    \"name\": \"GPT-4 Blender Assistant\",\n    \"blender\": (2, 82, 0),\n    \"category\": \"Object\",\n    \"author\": \"Aarya (@gd3kr)\",\n    \"version\": (2, 0, 0),\n    \"location\": \"3D View > UI > GPT-4 Blender Assistant\",\n    \"description\": \"Generate Blender Python code using OpenAI's GPT-4 to perform various tasks.\",\n    \"warning\": \"\",\n    \"wiki_url\": \"\",\n    \"tracker_url\": \"\",\n}\n\nsystem_prompt = \"\"\"You are an assistant made for the purposes of helping the user with Blender, the 3D software. \n- Respond with your answers in markdown (```). \n- Preferably import entire modules instead of bits. \n- Do not perform destructive operations on the meshes. \n- Do not use cap_ends. Do not do more than what is asked (setting up render settings, adding cameras, etc)\n- Do not respond with anything that is not Python code.\n\nExample:\n\nuser: create 10 cubes in random locations from -10 to 10\nassistant:\n```\nimport bpy\nimport random\nbpy.ops.mesh.primitive_cube_add()\n\n#how many cubes you want to add\ncount = 10\n\nfor c in range(0,count):\n    x = random.randint(-10,10)\n    y = random.randint(-10,10)\n    z = random.randint(-10,10)\n    bpy.ops.mesh.primitive_cube_add(location=(x,y,z))\n```\"\"\"\n\n\n\nclass GPT4_OT_DeleteMessage(bpy.types.Operator):\n    bl_idname = \"gpt4.delete_message\"\n    bl_label = \"Delete Message\"\n    bl_options = {'REGISTER', 'UNDO'}\n\n    message_index: bpy.props.IntProperty()\n\n    def execute(self, context):\n        context.scene.gpt4_chat_history.remove(self.message_index)\n        return {'FINISHED'}\n\nclass GPT4_OT_ShowCode(bpy.types.Operator):\n    bl_idname = \"gpt4.show_code\"\n    bl_label = \"Show Code\"\n    bl_options = {'REGISTER', 'UNDO'}\n\n    code: bpy.props.StringProperty(\n        name=\"Code\",\n        description=\"The generated code\",\n        default=\"\",\n    )\n\n    def execute(self, context):\n        text_name = \"GPT4_Generated_Code.py\"\n        text = bpy.data.texts.get(text_name)\n        if text is None:\n            text = bpy.data.texts.new(text_name)\n\n        text.clear()\n        text.write(self.code)\n\n        text_editor_area = None\n        for area in context.screen.areas:\n            if area.type == 'TEXT_EDITOR':\n                text_editor_area = area\n                break\n\n        if text_editor_area is None:\n            text_editor_area = split_area_to_text_editor(context)\n        \n        text_editor_area.spaces.active.text = text\n\n        return {'FINISHED'}\n\nclass GPT4_PT_Panel(bpy.types.Panel):\n    bl_label = \"GPT-4 Blender Assistant\"\n    bl_idname = \"GPT4_PT_Panel\"\n    bl_space_type = 'VIEW_3D'\n    bl_region_type = 'UI'\n    bl_category = 'GPT-4 Assistant'\n\n    def draw(self, context):\n        layout = self.layout\n        column = layout.column(align=True)\n\n        column.label(text=\"Chat history:\")\n        box = column.box()\n        for index, message in enumerate(context.scene.gpt4_chat_history):\n            if message.type == 'assistant':\n                row = box.row()\n                row.label(text=\"Assistant: \")\n                show_code_op = row.operator(\"gpt4.show_code\", text=\"Show Code\")\n                show_code_op.code = message.content\n                delete_message_op = row.operator(\"gpt4.delete_message\", text=\"\", icon=\"TRASH\", emboss=False)\n                delete_message_op.message_index = index\n            else:\n                row = box.row()\n                row.label(text=f\"User: {message.content}\")\n                delete_message_op = row.operator(\"gpt4.delete_message\", text=\"\", icon=\"TRASH\", emboss=False)\n                delete_message_op.message_index = index\n\n        column.separator()\n        \n        column.label(text=\"GPT Model:\")\n        column.prop(context.scene, \"gpt4_model\", text=\"\")\n\n        column.label(text=\"Enter your message:\")\n        column.prop(context.scene, \"gpt4_chat_input\", text=\"\")\n        button_label = \"Please wait...(this might take some time)\" if context.scene.gpt4_button_pressed else \"Execute\"\n        row = column.row(align=True)\n        row.operator(\"gpt4.send_message\", text=button_label)\n        row.operator(\"gpt4.clear_chat\", text=\"Clear Chat\")\n\n        column.separator()\n\nclass GPT4_OT_ClearChat(bpy.types.Operator):\n    bl_idname = \"gpt4.clear_chat\"\n    bl_label = \"Clear Chat\"\n    bl_options = {'REGISTER', 'UNDO'}\n\n    def execute(self, context):\n        context.scene.gpt4_chat_history.clear()\n        return {'FINISHED'}\n\nclass GPT4_OT_Execute(bpy.types.Operator):\n    bl_idname = \"gpt4.send_message\"\n    bl_label = \"Send Message\"\n    bl_options = {'REGISTER', 'UNDO'}\n\n    natural_language_input: bpy.props.StringProperty(\n        name=\"Command\",\n        description=\"Enter the natural language command\",\n        default=\"\",\n    )\n\n    def execute(self, context):\n        openai.api_key = get_api_key(context, __name__)\n        # if null then set to env key\n        if not openai.api_key:\n            openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n\n        if not openai.api_key:\n            self.report({'ERROR'}, \"No API key detected. Please set the API key in the addon preferences.\")\n            return {'CANCELLED'}\n\n        context.scene.gpt4_button_pressed = True\n        bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)\n        \n        blender_code = generate_blender_code(context.scene.gpt4_chat_input, context.scene.gpt4_chat_history, context, system_prompt)\n\n        message = context.scene.gpt4_chat_history.add()\n        message.type = 'user'\n        message.content = context.scene.gpt4_chat_input\n\n        # Clear the chat input field\n        context.scene.gpt4_chat_input = \"\"\n\n    \n        if blender_code:\n            message = context.scene.gpt4_chat_history.add()\n            message.type = 'assistant'\n            message.content = blender_code\n\n            global_namespace = globals().copy()\n    \n        try:\n            exec(blender_code, global_namespace)\n        except Exception as e:\n            self.report({'ERROR'}, f\"Error executing generated code: {e}\")\n            context.scene.gpt4_button_pressed = False\n            return {'CANCELLED'}\n\n        \n\n        context.scene.gpt4_button_pressed = False\n        return {'FINISHED'}\n\n\ndef menu_func(self, context):\n    self.layout.operator(GPT4_OT_Execute.bl_idname)\n\nclass GPT4AddonPreferences(bpy.types.AddonPreferences):\n    bl_idname = __name__\n\n    api_key: bpy.props.StringProperty(\n        name=\"API Key\",\n        description=\"Enter your OpenAI API Key\",\n        default=\"\",\n        subtype=\"PASSWORD\",\n    )\n\n    def draw(self, context):\n        layout = self.layout\n        layout.prop(self, \"api_key\")\n\ndef register():\n    bpy.utils.register_class(GPT4AddonPreferences)\n    bpy.utils.register_class(GPT4_OT_Execute)\n    bpy.utils.register_class(GPT4_PT_Panel)\n    bpy.utils.register_class(GPT4_OT_ClearChat)\n    bpy.utils.register_class(GPT4_OT_ShowCode)\n    bpy.utils.register_class(GPT4_OT_DeleteMessage)\n\n\n    bpy.types.VIEW3D_MT_mesh_add.append(menu_func)\n    init_props()\n\n\ndef unregister():\n    bpy.utils.unregister_class(GPT4AddonPreferences)\n    bpy.utils.unregister_class(GPT4_OT_Execute)\n    bpy.utils.unregister_class(GPT4_PT_Panel)\n    bpy.utils.unregister_class(GPT4_OT_ClearChat)\n    bpy.utils.unregister_class(GPT4_OT_ShowCode)\n    bpy.utils.unegister_class(GPT4_OT_DeleteMessage)\n\n    bpy.types.VIEW3D_MT_mesh_add.remove(menu_func)\n    clear_props()\n\n\nif __name__ == \"__main__\":\n    register()\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "openai==0.27.2"
        },
        {
          "name": "utilities.py",
          "type": "blob",
          "size": 3.19140625,
          "content": "import bpy\nimport openai\nimport re\nimport os\nimport sys\n\n\ndef get_api_key(context, addon_name):\n    preferences = context.preferences\n    addon_prefs = preferences.addons[addon_name].preferences\n    return addon_prefs.api_key\n\n\ndef init_props():\n    bpy.types.Scene.gpt4_chat_history = bpy.props.CollectionProperty(type=bpy.types.PropertyGroup)\n    bpy.types.Scene.gpt4_model = bpy.props.EnumProperty(\n    name=\"GPT Model\",\n    description=\"Select the GPT model to use\",\n    items=[\n        (\"gpt-4\", \"GPT-4 (powerful, expensive)\", \"Use GPT-4\"),\n        (\"gpt-3.5-turbo\", \"GPT-3.5 Turbo (less powerful, cheaper)\", \"Use GPT-3.5 Turbo\"),\n    ],\n    default=\"gpt-4\",\n)\n    bpy.types.Scene.gpt4_chat_input = bpy.props.StringProperty(\n        name=\"Message\",\n        description=\"Enter your message\",\n        default=\"\",\n    )\n    bpy.types.Scene.gpt4_button_pressed = bpy.props.BoolProperty(default=False)\n    bpy.types.PropertyGroup.type = bpy.props.StringProperty()\n    bpy.types.PropertyGroup.content = bpy.props.StringProperty()\n\ndef clear_props():\n    del bpy.types.Scene.gpt4_chat_history\n    del bpy.types.Scene.gpt4_chat_input\n    del bpy.types.Scene.gpt4_button_pressed\n\ndef generate_blender_code(prompt, chat_history, context, system_prompt):\n    messages = [{\"role\": \"system\", \"content\": system_prompt}]\n    for message in chat_history[-10:]:\n        if message.type == \"assistant\":\n            messages.append({\"role\": \"assistant\", \"content\": \"```\\n\" + message.content + \"\\n```\"})\n        else:\n            messages.append({\"role\": message.type.lower(), \"content\": message.content})\n\n    # Add the current user message\n    messages.append({\"role\": \"user\", \"content\": \"Can you please write Blender code for me that accomplishes the following task: \" + prompt + \"? \\n. Do not respond with anything that is not Python code. Do not provide explanations\"})\n\n\n    response = openai.ChatCompletion.create(\n        model=context.scene.gpt4_model,\n        messages=messages,\n        stream=True,\n        max_tokens=1500,\n    )\n\n    try:\n        collected_events = []\n        completion_text = ''\n        # iterate through the stream of events\n        for event in response:\n            if 'role' in event['choices'][0]['delta']:\n                # skip\n                continue\n            if len(event['choices'][0]['delta']) == 0:\n                # skip\n                continue\n            collected_events.append(event)  # save the event response\n            event_text = event['choices'][0]['delta']['content']\n            completion_text += event_text  # append the text\n            print(completion_text, flush=True, end='\\r')\n        completion_text = re.findall(r'```(.*?)```', completion_text, re.DOTALL)[0]\n        completion_text = re.sub(r'^python', '', completion_text, flags=re.MULTILINE)\n        \n        return completion_text\n    except IndexError:\n        return None\n\ndef split_area_to_text_editor(context):\n    area = context.area\n    for region in area.regions:\n        if region.type == 'WINDOW':\n            override = {'area': area, 'region': region}\n            bpy.ops.screen.area_split(override, direction='VERTICAL', factor=0.5)\n            break\n\n    new_area = context.screen.areas[-1]\n    new_area.type = 'TEXT_EDITOR'\n    return new_area"
        }
      ]
    }
  ]
}