{
  "metadata": {
    "timestamp": 1736559764620,
    "page": 478,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "emre/storm",
      "stars": 3928,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3359375,
          "content": "*.py[cod]\n\n# C extensions\n*.so\n\n# Packages\n*.egg\n*.egg-info\ndist\nbuild\n_build\neggs\nparts\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n.idea\n.idea/*\n\n# Vagrant \n.vagrant/*\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3173828125,
          "content": "language: python\npython:\n  - \"2.7\"\n  - \"3.2\"\n  - \"3.3\"\n  - \"3.4\"\n  - \"3.5\"\n  - \"3.6\"\n  - \"3.6-dev\"\n  - \"3.7-dev\"\n  - \"nightly\"\ninstall:\n  - if [[ $TRAVIS_PYTHON_VERSION == '2.6' ]]; then pip install unittest2; fi\n  - pip install -e .\n  - pip install -r requirements-dev.txt\nscript: nosetests -v\nnotifications:\n  email: false\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.3466796875,
          "content": "MAINTAINERS\n\nEmre Yilmaz\nBerker Peksag\nCihan Okyay\nFatih Kadir Akin\nSamed Beyribey\n\nCONTRIBUTORS\n\nbenvand  @github/benvand\nBengt Lüers @github/Bengt\nHenry Sher @github/henrysher\nIgor Davydenko @github/playpauseandstop\nAbhinav Upadhyay @github/abhinav-upadhyay\nAlexander Norström @github/aleno\nJeune Asuncion @github/jeunito\nLow Kian Seong @github/lowks\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "Copyright (C) <2013> <Emre Yilmaz>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software \nand associated documentation files (the \"Software\"), to deal in the Software without restriction, \nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, \nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is \nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, \nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE \nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.087890625,
          "content": "recursive-include storm/templates *.html\nrecursive-include storm/static *.js *.css *.png\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1904296875,
          "content": "<img src=\"https://raw.github.com/emre/storm/master/resources/logos/storm-logo.png\" height=\"80\">\n---\n\n[![Join the chat at https://gitter.im/emre/storm](https://badges.gitter.im/emre/storm.svg)](https://gitter.im/emre/storm?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/emre/storm.svg?branch=master)](https://travis-ci.org/emre/storm)\n\nstorm is a command line tool to manage your ssh connections.\n\n\n**features**\n\n- adding, editing, deleting, listing, searching across your SSHConfig.\n- command alias support for your CLI preferences.\n- support for custom SSH directives.\n- scriptable as a python library.\n- user interfaces besides cli. (web ui, wxpython, unity(ubuntu) indicator.)\n\n#### dependencies\nOn Debian systems, install header files and a static library for Python (python3.4-dev or python2.7-dev)\n\nOn Ubuntu 16.04, you need install libssl-dev and libffi-dev (sudo apt-get install libssl-dev libffi-dev)\n\n#### installation\n\n```bash\n$ [sudo] pip install stormssh\n```\nor if you like 90s:\n```bash\n$ [sudo] easy_install stormssh\n```\n\nor if you like homebrew:\n```bash\n$ brew install stormssh\n```\n\nor if prefer using a package manager in your distro:\n\n| Distro        | Package\n| ------------- |---------------|\n| Archlinux     | <a href=\"https://aur.archlinux.org/packages/python-stormssh/\">python-stormssh</a> |\n| Opensuse      | <a href=\"http://rpm.pbone.net/index.php3?stat=3&search=python-stormssh&srodzaj=3\">python-stormssh</a> |\n| Void Linux    | <a href=\"https://github.com/voidlinux/void-packages/tree/master/srcpkgs/python-stormssh\">python-stormssh</a> |\n\n#### troubleshooting installation\n\n```\nclang: error: unknown argument: '-mno-fused-madd'\n\nerror: command 'cc' failed with exit status 1\n```\n\nSee [#73](https://github.com/emre/storm/issues/73). If the issue persists, see also [#76](https://github.com/emre/storm/issues/96) .\n\n#### usage & documentation\n\n<a href='http://stormssh.readthedocs.org/en/master/'>http://stormssh.readthedocs.org/en/master/</a>\n\n#### screens\n\n<a href=\"http://i.imgur.com/qIc1mDx.png\"><img src=\"http://i.imgur.com/qIc1mDx.png\"></a>\n\n\n**web ui**\n\n<a href=\"http://i.imgur.com/wVtnWxx.png\"><img src=\"http://i.imgur.com/wVtnWxx.png\"></a>\n\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.3046875,
          "content": "# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\n# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!\nVAGRANTFILE_API_VERSION = \"2\"\n\nVagrant.configure(VAGRANTFILE_API_VERSION) do |config|\n  config.vm.box = \"hashicorp/precise32\"\n  \n  config.vm.provision \"shell\", path: \"scripts/setup.sh\"\nend\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.0380859375,
          "content": "nose==1.3.1\ncoverage==3.7.1\ntox==1.7.1\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0439453125,
          "content": "paramiko==1.13.0\ntermcolor\nFlask==0.10.1\nsix\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.076171875,
          "content": "[nosetests]\ndetailed-errors=1\nwith-coverage=1\ncover-package=storm\nnocapture=1\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.482421875,
          "content": "import sys\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='stormssh',\n    version='0.7.0',\n    packages=find_packages(),\n    package_data={'storm': ['templates/*.html', 'static/css/*.css',\n                            'static/css/themes/storm/*.css', 'static/css/themes/storm/img/*.png',\n                            'static/js/*.js', 'static/js/core/*.js', 'static/favicon.ico']},\n    include_package_data=True,\n    url='http://github.com/emre/storm',\n    license='MIT',\n    author='Emre Yilmaz',\n    author_email='mail@emreyilmaz.me',\n    description='Management commands to ssh config files.',\n    entry_points={\n        'console_scripts': [\n            'storm = storm.__main__:main',\n        ],\n    },\n    install_requires=list(filter(None, [\n        \"paramiko\",\n        \"termcolor\",\n        \"flask\",\n        \"argparse\" if sys.version_info[:2] < (2, 7) else None,\n        \"six\",\n    ])),\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.2',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n        'License :: OSI Approved :: MIT License',\n        'Topic :: System :: Systems Administration',\n    ]\n)\n"
        },
        {
          "name": "storm",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests.py",
          "type": "blob",
          "size": 17.3994140625,
          "content": "from __future__ import unicode_literals\n\nimport getpass\nimport os\nimport shlex\nimport subprocess\n\ntry:\n    import unittest2 as unittest\nexcept ImportError:\n    import unittest\n\nimport six\n\nfrom storm import Storm\nfrom storm.parsers.ssh_uri_parser import parse\nfrom storm import __version__\n\n\n# derived from http://www.cyberciti.biz/faq/create-ssh-config-file-on-linux-unix/\nFAKE_SSH_CONFIG_FOR_CLI_TESTS = \"\"\"\n    ### default for all ##\n    Host *\n         ForwardAgent no\n         ForwardX11 no\n         ForwardX11Trusted yes\n         User nixcraft\n         Port 22\n         Protocol 2\n         ServerAliveInterval 60\n         ServerAliveCountMax 30\n         LocalForward 3128 127.0.0.1:3128\n         LocalForward 3129 127.0.0.1:3128\n\n    ## override as per host ##\n    Host server1\n         HostName server1.cyberciti.biz\n         User nixcraft\n         Port 4242\n         IdentityFile /nfs/shared/users/nixcraft/keys/server1/id_rsa\n         IdentityFile /tmp/x.rsa\n\n    ## Home nas server ##\n    Host nas01\n         HostName 192.168.1.100\n         User root\n         IdentityFile ~/.ssh/nas01.key\n\n    ## Login AWS Cloud ##\n    Host aws.apache\n         HostName 1.2.3.4\n         User wwwdata\n         IdentityFile ~/.ssh/aws.apache.key\n\n    ## Login to internal lan server at 192.168.0.251 via our public uk office ssh based gateway using ##\n    ## $ ssh uk.gw.lan ##\n    Host uk.gw.lan uk.lan\n         HostName 192.168.0.251\n         User nixcraft\n         ProxyCommand  ssh nixcraft@gateway.uk.cyberciti.biz nc %h %p 2> /dev/null\n\n    ## Our Us Proxy Server ##\n    ## Forward all local port 3128 traffic to port 3128 on the remote vps1.cyberciti.biz server ##\n    ## $ ssh -f -N  proxyus ##\n    Host proxyus\n        HostName vps1.cyberciti.biz\n        User breakfree\n        IdentityFile ~/.ssh/vps1.cyberciti.biz.key\n        LocalForward 3128 127.0.0.1:3128\n\"\"\"\n\n\nclass StormCliTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.config_file = '/tmp/ssh_config_cli_tests'\n        with open(self.config_file, 'w+') as f:\n            f.write(FAKE_SSH_CONFIG_FOR_CLI_TESTS)\n\n        self.config_arg = '--config={0}'.format(self.config_file)\n\n    def run_cmd(self, cmd):\n\n        cmd = 'storm %s' % cmd\n        cmd = shlex.split(cmd.encode('utf-8') if six.PY2 else cmd)\n        _env = os.environ\n        _env[\"TESTMODE\"] = \"1\"\n\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                   stderr=subprocess.PIPE,\n                                   env=_env)\n        out, err = process.communicate()\n        rc = process.returncode\n        return out, err, rc\n\n    def test_list_command(self):\n        out, err, rc = self.run_cmd('list {0}'.format(self.config_arg))\n\n        self.assertTrue(out.startswith(b\" Listing entries:\\n\\n\"))\n\n        hosts, custom_options = [\n            \"aws.apache -> wwwdata@1.2.3.4:22\",\n            \"nas01 -> root@192.168.1.100:22\",\n            \"proxyus -> breakfree@vps1.cyberciti.biz:22\",\n            \"server1 -> nixcraft@server1.cyberciti.biz:4242\",\n            \"uk.gw.lan uk.lan -> nixcraft@192.168.0.251:22\",\n        ], [\n            \"[custom options] identityfile=~/.ssh/aws.apache.key\",\n            \"[custom options] identityfile=~/.ssh/nas01.key\",\n            \"identityfile=~/.ssh/vps1.cyberciti.biz.key\",\n            \"localforward=3128 127.0.0.1:3128\",\n            \"[custom options] identityfile=/nfs/shared/users/nixcraft/keys/server1/id_rsa,/tmp/x.rsa\",\n            \"[custom options] proxycommand=ssh nixcraft@gateway.uk.cyberciti.biz nc %h %p 2> /dev/null\",\n        ]\n\n        general_options = {\n            \"forwardx11\": \"no\",\n            \"protocol\": \"2\",\n            \"user\": \"nixcraft\",\n            \"forwardagent\": \"no\",\n            \"forwardx11trusted\": \"yes\",\n            \"serveralivecountmax\": \"30\",\n            \"serveraliveinterval\": \"60\",\n            \"port\": \"22\",\n            \"localforward\": \"3128 127.0.0.1:3128, 3129 127.0.0.1:3128\",\n        }\n\n        for host in hosts:\n            self.assertIn(host.encode('ascii'), out)\n\n        for custom_option in custom_options:\n            self.assertIn(custom_option.encode('ascii'), out)\n\n        for general_option, value in six.iteritems(general_options):\n            self.assertIn(\"{0}: {1}\".format(general_option, value).encode('ascii'), out)\n\n        self.assertEqual(err, b'')\n        self.assertEqual(rc, 0)\n\n    def test_version_command(self):\n        out, err, rc = self.run_cmd('version')\n        self.assertIn(__version__.encode('ascii'), out)\n        self.assertEqual(rc, 0)\n\n    def test_basic_add(self):\n        out, err, rc = self.run_cmd('add netscaler ns@42.42.42.42 {0}'.format(self.config_arg))\n\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n    def test_add_duplicate(self):\n        out, err, rc = self.run_cmd('add aws.apache test@test.com {0}'.format(self.config_arg))\n\n        self.assertEqual(b'', out)\n        self.assertIn(b'error', err)\n        self.assertNotEqual(rc, 0)\n\n    def test_add_invalid_host(self):\n        out, err, rc = self.run_cmd('add @_@ test.com {0}'.format(self.config_arg))\n\n        self.assertEqual(b'', out)\n        self.assertIn(b'error', err)\n        self.assertNotEqual(rc, 0)\n\n    def test_advanced_add(self):\n        out, err, rc = self.run_cmd('add postgresql-server postgres@192.168.1.1 {0} {1}{2}'.format(\n            \"--id_file=/tmp/idfilecheck.rsa \",\n            '--o \"StrictHostKeyChecking=yes\" --o \"UserKnownHostsFile=/dev/advanced_test\" ',\n            self.config_arg)\n        )\n\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n        with open(self.config_file) as f:\n            # check that property is really flushed out to the config?\n            content = f.read().encode('ascii')\n            self.assertIn(b'identityfile \"/tmp/idfilecheck.rsa\"', content)\n            self.assertIn(b\"stricthostkeychecking yes\", content)\n            self.assertIn(b\"userknownhostsfile /dev/advanced_test\", content)\n\n    def test_add_with_idfile(self):\n        out, err, rc = self.run_cmd('add postgresql-server postgres@192.168.1.1 {0} {1}'.format(\n            \"--id_file=/tmp/idfileonlycheck.rsa\",\n            self.config_arg)\n        )\n\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n        with open(self.config_file) as f:\n            content = f.read().encode('ascii')\n            self.assertIn(b'identityfile \"/tmp/idfileonlycheck.rsa\"', content)\n\n    def test_basic_edit(self):\n        out, err, rc = self.run_cmd('edit aws.apache basic_edit_check@10.20.30.40 {0}'.format(self.config_arg))\n\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n        with open(self.config_file) as f:\n            content = f.read().encode('ascii')\n            self.assertIn(b\"basic_edit_check\", content)\n            self.assertIn(b\"10.20.30.40\", content)\n\n    def test_edit_invalid_host(self):\n        out, err, rc = self.run_cmd('edit @missing_host test.com {0}'.format(self.config_arg))\n\n        self.assertEqual(b'', out)\n        self.assertIn(b'error', err)\n        self.assertNotEqual(rc, 0)\n\n    def test_edit_missing_host(self):\n        out, err, rc = self.run_cmd('edit missing_host test.com {0}'.format(self.config_arg))\n\n        self.assertEqual(b'', out)\n        self.assertIn(b'error', err)\n        self.assertNotEqual(rc, 0)\n\n    def test_update(self):\n        out, err, rc = self.run_cmd('update aws.apache --o \"user=daghan\" --o port=42000 {0}'.format(self.config_arg))\n\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n        with open(self.config_file) as f:\n            content = f.read().encode('ascii')\n            self.assertIn(b\"user daghan\", content)  # see daghan: http://instagram.com/p/lfPMW_qVja\n            self.assertIn(b\"port 42000\", content)\n\n    def test_update_regex(self):\n\n        self.run_cmd('add worker alphaworker.com {0}'.format(self.config_arg))\n\n        # add three machines -- hostnames starts with worker-N\n        self.run_cmd('add worker-1 worker1.com {0}'.format(self.config_arg))\n        self.run_cmd('add worker-2 worker2.com {0}'.format(self.config_arg))\n        self.run_cmd('add worker-4 worker4.com {0}'.format(self.config_arg))\n\n        # another one -- regex shouldn't capture that one though.\n        self.run_cmd('add worker3 worker3.com {0}'.format(self.config_arg))\n\n        out, err, rc = self.run_cmd(\"update 'worker-[1-5]' --o hostname=boss.com {0}\".format(self.config_arg))\n\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n        # edit the alphaworker\n        out, err, rc = self.run_cmd('edit worker alphauser@alphaworker.com {0}'.format(self.config_arg))\n        self.assertEqual(rc, 0)\n\n        with open(self.config_file) as f:\n            content = f.read().encode('ascii')\n            self.assertNotIn(b\"worker1.com\", content)\n            self.assertNotIn(b\"worker2.com\", content)\n            self.assertNotIn(b\"worker4.com\", content)\n            self.assertIn(b\"worker3.com\", content)\n            self.assertIn(b\"alphauser\", content)\n\n        out, err, rc = self.run_cmd(\"edit worker  {0}\".format(self.config_arg))\n\n\n    def test_update_invalid_regex(self):\n\n        out, err, rc = self.run_cmd(\"update 'drogba-[0-5]' --o hostname=boss.com {0}\".format(self.config_arg))\n\n        self.assertEqual(b'', out)\n        self.assertIn(b'error', err)\n        self.assertNotEqual(rc, 0)\n\n    def test_delete(self):\n        out, err, rc = self.run_cmd(\"delete server1 {0}\".format(self.config_arg))\n        self.assertIn(b\"success\", out)\n        self.assertEqual(rc, 0)\n\n    def test_delete_invalid_hostname(self):\n\n        out, err, rc = self.run_cmd(\"delete unknown_server\".format(self.config_arg))\n\n        self.assertEqual(b'', out)\n        self.assertIn(b'error', err)\n        self.assertNotEqual(rc, 0)\n\n    def test_search(self):\n\n        out, err, rc = self.run_cmd(\"search aws {0}\".format(self.config_arg))\n\n        self.assertTrue(out.startswith(b'Listing results for aws:'))\n        self.assertIn(b'aws.apache', out)\n        self.assertEqual(rc, 0)\n\n    def test_backup(self):\n        out, err, rc = self.run_cmd(\"backup /tmp/ssh_backup {0}\".format(\n            self.config_arg))\n\n        self.assertEqual(True, os.path.exists(\"/tmp/ssh_backup\"))\n        self.assertEqual(rc, 0)\n\n    def test_invalid_search(self):\n\n        out, err, rc = self.run_cmd(\"search THEREISNOTHINGRELATEDWITHME {0}\".format(self.config_arg))\n\n        self.assertIn(b'no results found.', out)\n        self.assertEqual(rc, 0)\n\n    def test_delete_all(self):\n        out, err, rc = self.run_cmd('delete_all {0}'.format(self.config_arg))\n\n        self.assertIn(b'all entries deleted', out)\n        self.assertEqual(rc, 0)\n\n    def tearDown(self):\n        os.unlink('/tmp/ssh_config_cli_tests')\n\n\nclass StormTests(unittest.TestCase):\n\n    def setUp(self):\n        fake_ssh_config = \"\"\"Host *\n            IdentitiesOnly yes\n\n        Host netscaler\n            hostname 1.1.1.1\n            port 3367\n\n        \"\"\"\n\n        with open('/tmp/ssh_config', 'w+') as f:\n            f.write(fake_ssh_config)\n\n        self.storm = Storm('/tmp/ssh_config')\n\n    def test_config_load(self):\n        self.assertEqual(self.storm.ssh_config.config_data[1][\"options\"][\"identitiesonly\"], 'yes')\n\n    def test_config_dump(self):\n        self.storm.ssh_config.write_to_ssh_config()\n\n        for search_str in (\"hostname 1.1.1.1\", \"Host netscaler\", \"Host *\"):\n            with open('/tmp/ssh_config') as fd:\n                self.assertIn(search_str, fd.read())\n\n    def test_update_host(self):\n        self.storm.ssh_config.update_host(\"netscaler\", {\"hostname\": \"2.2.2.2\"})\n        self.assertEqual(self.storm.ssh_config.config_data[4][\"options\"][\"hostname\"], '2.2.2.2')\n\n    def test_add_host(self):\n        self.storm.add_entry('google', 'google.com', 'root', '22', '/tmp/tmp.pub')\n        self.storm.add_entry('goog', 'google.com', 'root', '22', '/tmp/tmp.pub')\n        self.storm.ssh_config.write_to_ssh_config()\n\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'google' or item.get(\"host\") == 'goog':\n                self.assertEqual(item.get(\"options\").get(\"port\"), '22')\n                self.assertEqual(item.get(\"options\").get(\"identityfile\"), '\"/tmp/tmp.pub\"')\n\n    def test_clone_host(self):\n        self.storm.add_entry('google', 'google.com', 'ops', '24', '/tmp/tmp.pub')\n        self.storm.clone_entry('google', 'yahoo')\n\n        has_yahoo = False\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'yahoo': \n                has_yahoo = True\n                break\n\n        self.assertEqual(True, has_yahoo) \n        self.assertEqual(item.get(\"options\").get(\"port\"), '24')\n        self.assertEqual(item.get(\"options\").get(\"identityfile\"), '\"/tmp/tmp.pub\"')\n        self.assertEqual(item.get(\"options\").get(\"user\"), 'ops')\n\n    def test_move_host(self):\n        self.storm.add_entry('google', 'google.com', 'ops', '24', '/tmp/tmp.pub')\n        self.storm.clone_entry('google', 'yahoo', keep_original=False)\n\n        has_yahoo = False\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'yahoo':\n                has_yahoo = True\n                break\n\n        has_google = False\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'google':\n                has_google = True\n                break\n\n        self.assertEqual(True, has_yahoo)\n        self.assertEqual(False, has_google)\n        self.assertEqual(item.get(\"options\").get(\"port\"), '24')\n        self.assertEqual(item.get(\"options\").get(\"identityfile\"), '\"/tmp/tmp.pub\"')\n        self.assertEqual(item.get(\"options\").get(\"user\"), 'ops')\n\n    def test_backup(self):\n        self.storm.backup(\"/tmp/storm_ssh_config_backup_file\")\n        self.assertEqual(\n            True,\n            os.path.exists(\"/tmp/storm_ssh_config_backup_file\")\n        )\n\n    def test_double_clone_exception(self):\n        self.storm.add_entry('google', 'google.com', 'ops', '24', '/tmp/tmp.pub')\n        self.storm.clone_entry('google', 'yahoo')\n\n        with self.assertRaises(ValueError):\n            self.storm.clone_entry('google', 'yahoo')\n\n    def test_edit_host(self):\n\n        self.storm.add_entry('google', 'google.com', 'root', '22', '/tmp/tmp.pub')\n        self.storm.ssh_config.write_to_ssh_config()\n\n        self.storm.edit_entry('google', 'google.com', 'root', '23', '/tmp/tmp.pub')\n        self.storm.ssh_config.write_to_ssh_config()\n\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'google':\n                self.assertEqual(item.get(\"options\").get(\"port\"), '23')\n\n    def test_edit_by_hostname_regexp(self):\n        import re\n        self.storm.add_entry('google-01', 'google.com', 'root', '22', '/tmp/tmp.pub')\n        self.storm.add_entry('google-02', 'google.com', 'root', '23', '/tmp/tmp.pub')\n        self.storm.ssh_config.write_to_ssh_config()\n\n        self.storm.update_entry('google-[0-2]', port='24', identityfile='/tmp/tmp.pub1')\n\n        for item in self.storm.ssh_config.config_data:\n            if re.match(r\"google*\", item.get(\"host\")):\n                self.assertEqual(item.get(\"options\").get(\"identityfile\"), '/tmp/tmp.pub1')\n                self.assertEqual(item.get(\"options\").get(\"port\"), '24')\n\n    def test_delete_host(self):\n        self.storm.delete_entry('netscaler')\n        for host in self.storm.ssh_config.config_data:\n            self.assertEqual(False, host.get(\"host\") == 'netscaler')\n\n    def test99_delete_all(self):\n        self.storm.delete_all_entries()\n        self.assertEqual(len(self.storm.ssh_config.config_data), 0)\n\n    def test_uri_parser(self):\n        user = getpass.getuser()\n        TEST_STRINGS = [\n            ('root@emreyilmaz.me:22', ('root', 'emreyilmaz.me', 22)),\n            ('emreyilmaz.me', (user, 'emreyilmaz.me', 22)),\n            ('emreyilmaz.me:22', (user, 'emreyilmaz.me', 22)),\n            ('root@emreyilmaz.me', ('root', 'emreyilmaz.me', 22))\n        ]\n\n        for uri in TEST_STRINGS:\n            self.assertEqual(parse(uri[0]), uri[1])\n\n        # false strings\n        self.assertRaises(ValueError, parse, 'root@emreyilmaz.me:string-port')\n\n    def test_search_host(self):\n        results = self.storm.ssh_config.search_host(\"netsca\")\n        self.assertEqual(len(results), 1)\n\n    def test_custom_options(self):\n        custom_options = (\n            \"StrictHostKeyChecking=no\",\n            \"UserKnownHostsFile=/dev/null\",\n        )\n        self.storm.add_entry('host_with_custom_option',\n                             'emre.io', 'emre', 22,\n                             None, custom_options=custom_options)\n        self.storm.ssh_config.write_to_ssh_config()\n\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'host_with_custom_option':\n                self.assertEqual(item.get(\"options\").get(\"stricthostkeychecking\"), 'no')\n                self.assertEqual(item.get(\"options\").get(\"userknownhostsfile\"), '/dev/null')\n\n        custom_options = (\n            \"StrictHostKeyChecking=yes\",\n            \"UserKnownHostsFile=/home/emre/foo\",\n        )\n        self.storm.edit_entry('host_with_custom_option',\n                              'emre.io', 'emre', 22,\n                              None, custom_options=custom_options)\n        self.storm.ssh_config.write_to_ssh_config()\n\n        for item in self.storm.ssh_config.config_data:\n            if item.get(\"host\") == 'host_with_custom_option':\n                self.assertEqual(item.get(\"options\").get(\"stricthostkeychecking\"), 'yes')\n                self.assertEqual(item.get(\"options\").get(\"userknownhostsfile\"), '/home/emre/foo')\n\n    def tearDown(self):\n        os.unlink('/tmp/ssh_config')\n\nif __name__ == '__main__':\n    unittest.main()\n"
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.2021484375,
          "content": "[tox]\nenvlist = py27,py32,py33,py34\nskipsdist = True\n\n[testenv]\ncommands =\n pip install --allow-all-external -e .\n nosetests\ndeps =\n -rrequirements-dev.txt\n\n[testenv:py26]\ndeps =\n {[testenv]deps}\n unittest2\n"
        }
      ]
    }
  ]
}