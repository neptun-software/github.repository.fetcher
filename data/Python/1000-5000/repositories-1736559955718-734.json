{
  "metadata": {
    "timestamp": 1736559955718,
    "page": 734,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "autokey/autokey",
      "stars": 3508,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.7109375,
          "content": "[paths]\nsource = lib\n\n[run]\nbranch = true\nparallel = true\nsource =\n   lib\n\n[html]\ndirectory = test_coverage_report_html\nshow_contexts = true\nskip_empty = true\n\n[report]\nshow_missing = true\nprecision = 1\n; Eventually will want to fail if coverage is below this percentage.\n; fail_under = 40\n\n# Regexes for lines to exclude from consideration\nexclude_lines =\n    # Have to re-enable the standard pragma\n    pragma: no cover\n\n    # Don't complain about missing debug-only code:\n    def __repr__\n    if self\\.debug\n\n    # Don't complain if tests don't hit defensive assertion code:\n    raise AssertionError\n    raise NotImplementedError\n\n    # Don't complain if non-runnable code isn't run:\n    if 0:\n    if __name__ == .__main__.:\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1337890625,
          "content": "*.html\n*.bak\n*.swp\n__pycache__\n*.egg-info\n*.pyc\n.tox/\n\n# IDE's\n.idea\n.vscode\n\ntest_coverage_annotated_source/\ntest_coverage_report_html/\n"
        },
        {
          "name": "ACKNOWLEDGMENTS",
          "type": "blob",
          "size": 2.12890625,
          "content": "Thanks go to Sam Peterson (peabody17), the original developer of \nAutoKey, for allowing me to join his project and not objecting \nwhen I more or less took it over.\n\nMy sincerest thanks to tiheum, the designer of the Faenza icon set for\nLinux. One of his designs is the basis of AutoKey's icon and his superb\nicon set makes my desktop a joy to use. \n\nI'd like to pass my gratitude to all who have made donations to the \nAutoKey project: theoa, jschall, mfseeker, jflevi, keycombat, rkcallahan,\nbkudria, riffian, and many others.\n\nMany thanks to the developers of xdotool, from which I copied the idea\nof dynamically modifying the keyboard map to send non-mapped characters.\n\nI also want to thank the developers of Phrase Express. Their \napplication's UI was the inspiration for AutoKey's configuration window.\n\nThe below are the original acknowledgements from Sam Peterson.\n\n---------------------------------------------------------------------\n\nAbove all, I wish to thank my wife Margaret Tam.  You're always there\nwhen I need you.  You're always there to support me throughout the\ngood and bad in life.  I love you my dear.\n\nI'd like to thank Eddie Bell for his keylogger example.  It was the\nturning point in my early development of the program that gave me what\nI needed for monitoring keyboard input.\n\nI'd especially like to thank Peter Liljenberg for writing the\npython-xlib extension, without which this software wouldn't have been\npossible.\n\nI'd like to acknowledge Textpander, Texter and the Autohotkey\ndevelopers whose software was an inspiration to this software.\n\nI'd like to thank all of the people on the Ubuntu forums who have\ngiven me their feedback and/or tried the program (in no particular\norder or preference): Vadi, Scarath, jackocleebrown, ugm6hr,\nRebounD11, Bungo Pony, forrestcupp, kevdog, conehead77,\nPartisanEntity, DjBones, antisocialist, Specter043, Linuxratty,\nSanskritFritz, Martje_001, tribaal, Vitamin-Carrot.  I apologize\nprofusely if I have forgotten to mention anyone.\n\nI'd like to thank SourceForge for hosting the project.\n\nLastly I'd like to thank Guido van Rossum for authoring the Python\nprogramming language, and RMS for gcc and GNU Emacs.\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 33.890625,
          "content": "=========\nChangelog\n=========\n\nNext Version\n============================\n\nImportant misc changes\n----------------------\n- Bump action versions in pages.yml to satisfy part of issue #963.\n- Bump action versions in build.yml to satisfy part of issue #963.\n- Bump action versions in python-test.yml to satisfy part of issue #963.\n- Bump Python version in build.yml to satisfy part of issue #964.\n- Bump Python versions in python-test.yml to satisfy part of issue #964.\n- Bump Python versions in setup.cfg to satisfy issue #969.\n- Bump Python versions in setup.py to satisfy issue #970.\n- Bump to all GitHub-supported Python versions to satisfy issue #986.\n- Add `pyasyncore` dependency to `setup.py` for use in Python 3.12 to satisfy issues #946 and #964.\n\nOther\n+++++\n- Add `show_recent_script_errors_dialog` to display errors with millisecond precision.\n- Add **Environment** as an issue type in the `bug.yml` file.\n\nVersion 0.96.0\n============================\n\n\nImportant misc changes\n----------------------\n\n- Script and phrase metadata are no longer stored as hidden dotfiles. Existing scripts should be automatically converted, but if switch back to versions prior to this one, you will need to copy or symlink them back to dotfile form.\n- Scripting API files are now in Python packages, which may require adjusting imports if you have scripts that import them directly.\n- Change the default phrase send mode to `ctrl+v` (paste using clipboard) rather  than sending keys one at a time.\n- This version represents some significant refactoring since the previous update, so bug reports will be highly appreciated.\n- Add two sections to the issue template.\n- Change all **sudo apt** references in **master** to **sudo apt-get** to satisfy part of issue #772.\n- Bump Python version in **autokey.spec** AND **PKG-INFO**.\n- Update the **README.rst** file to satisfy part of issue #681 and issue #779.\n- Update the actions in the **build.yml** file to the latest versions in the GitHub Marketplace.\n- Remove extra unneeded curly bracket from line 350 of engine.py for the API documentation.\n- Update the actions in the **pages.yml** file to the latest versions in the GitHub Marketplace.\n\nFeatures\n---------\n\nScripting API\n^^^^^^^^^^^^^\n\n**engine API object**\n\n- Deprecated: Confusingly named engine.create_abbreviation() and engine.create_hotkey() are deprecated and will be removed in the future. Use engine.create_phrase() with appropriate arguments instead.\n- Extended: engine.create_phrase() now supports multiple new optional arguments, allowing to fully configure the created phrase. It can set everything the GUI can do.\n- New: Scripts can use engine.get_triggered_abbreviation() to read which abbreviation triggered it’s execution.\n  The function returns a tuple containing the abbreviation and the trigger character (the character that 'completed' or 'confirmed' the abbreviation. Both tuple elements are None if the script was not triggered by an abbreviation. The trigger character is None if the script was configured to 'trigger immediately'. The function always returns a tuple, so direct tuple unpacking like abbreviation, trigger = engine.get_triggered_abbreviation() will always work.\n- Allow creation of 'temporary' hotkeys and whole folders (which do not persist between sessions).\n- Allow overriding existing hotkeys when creating phrases with hotkeys.\n- Allow creation of folders.\n- Add `set_clipboard_image` methods for both Gtk and Qt. Takes a file path to an image to load into the clipboard.\n\n**keyboard API object**\n\n- keyboard.send_keys() got a new optional parameter send_mode, allowing to specify how the given text is sent. It basically offers the same pasting options as are available to AutoKey Phrases.\n- keyboard.send_keys() now raises a TypeError instead of a generic AssertionError, if parameters don’t match the expected types.\n\n**New clipboard API method**\n- Change the default phrase send mode to `ctrl+v` (paste using clipboard) rather than sending keys one at a time.\n\n**New mouse API object**\n\n- Add mouse drag, click and scroll options to the API.\n\nCommand line interface\n++++++++++++++++++++++\n\n- Added a --version command line switch. It prints the current AutoKey version on the standard output and then exits.\n\nGraphical user interfaces\n+++++++++++++++++++++++++\n\n- (GTK) Warn user about missing required and optional programs on startup.\n- (GTK) UI will now update when changes are detected to watched files.\n- (GTK) refresh UI if script files are modified externally\n- Use system monospace font\n- Add setting to change GtkSourceView theme, (defaults to classic).\n\nOther\n+++++\n\n- Add `wait_for_keyevent` scripting function.\n- Rewrote script error logging system, with a neat Script Error Dialog to go with it.\n- `<script>` script macros accept absolute paths.\n- Macro arguments can be quoted, allowing arguments containing spaces.\n- Macro arguments can contain angle bracket characters, if escaped.\n- Add `<system>` macro for replacing phrase contents with output of an external process.\n- Allow `autokey-run` to accept full paths to python scripts (if no full path is given, will treat as an existing Autokey script name instead).\n- Expand unicode characters using code points (hacky workaround for being unable to send actual unicode).\n- Allow disabling Capslock in settings\n- Link to script `.py` and `.json` above editor.\n- Add appropriate keywords to `.desktop` files for both UIs.\n- Build debs and update pypi on new releases\n\nBug fixes\n---------\n\n- Both QT and GTK versions will reload hotkeys after a keymap change event.\n- Fix locking issue\n- Expose Alt_GR as a hotkey modifier on GTK.\n- Fix issue with pip installation reporting a missing module\n- Add missing closing backtick to the code snippet on line 113 of the `CHANGELOG.rst` file. Fixes issue `#906`_.\n\n.. _`#906`: https://github.com/autokey/autokey/issues/906\n\nScripting API\n+++++++++++++\n\n- Fixed API call `system.exec_command()` crashing, if output capturing is active, but the executed command has empty output. Fixes issue #379\n\nPackaging\n+++++++++\n\n- Fixed AutoKey PNG icon size. Now, the icon size is 96x96 pixels, fixing Lintian warnings on Debian. Fixes issue #369\n\nOther changes\n---------\n\n- Add CI for testing\n- Update pip installation requirements\n- Add CONTRIBUTERS.rst\n- Internal Code cleanup. The configuration handling module is split into multiple modules inside a dedicated package.\n- Change clipboard wording in the AutoKey documentation.\n- Update formatting and wording in the AutoKey GTK and Qt clipboard API documentation.\n- Remove one reference to X in the AutoKey GTK clipboard API documentation.\n- Remove one reference to mouse in the AutoKey Qt clipboard API documentation.\n- AutoKey now has a working test environment again. `pytest` based unit-tests can be launched from the source checkout using `python3 setup.py test`\n- Fix typo: Replace all occurrences of \"they key\" with \"the key\" in the AutoKey documentation.\n- Rename the bug.yaml file to bug.yml.\n- Add the `config.yml` file to the `/.github/ISSUE_TEMPLATE` directory to prevent blank issues from being offered and created. Fixes `#897`_\n- Remove unnecessary white-space from the `config.yml` file.\n\n.. _`#897`: https://github.com/autokey/autokey/issues/897\n\n**New Dependencies (test-time only)**\n\nThe new unit tests introduce two new, *test-time only* dependencies. These are used for unit tests only and not during normal AutoKey execution.\n\n- `pytest`\n- `PyHamcrest`\n\nVersion 0.96.0-beta.11\n============================\n\nBug fixes\n---------\n\n- Fix crash in qt macro recording window.\n\nVersion 0.96.0-beta.10\n============================\n\nBug fixes\n---------\n\n- Beta: Fix Segfault from modifying files when open in off-screen AK window\n\nVersion 0.96.0-beta.9\n============================\n\nBug fixes\n---------\n\n- Fix qt crashing when changing a hotkey\n\nVersion 0.96.0-beta.8\n============================\n\nBug fixes\n---------\n\n- Fix installation not copying predefined user files (fix #578)\n\nVersion 0.96.0-beta.5\n============================\n\nBug fixes\n---------\n\n- Fix clear button not unsetting hotkeys\n\nVersion 0.96.0-beta.4\n============================\n\n- Fix updating of sidecar files\n\nVersion 0.96.0-beta.3\n============================\n\n- Build debs and update pypi on new releases\n- Add `set_clipboard_image` methods for both Gtk and Qt. Takes a file path to an image to load into the clipboard.\n\nVersion 0.96.0-beta.2\n============================\n\n- Fix issue with pip installation reporting a missing module\n\nVersion 0.96.0-beta.1\n============================\n\nImportant misc changes\n----------------------\n\n- Script and phrase metadata are no longer stored as hidden dotfiles. Existing scripts should be automatically converted, but if switch back to versions prior to this one, you will need to copy or symlink them back to dotfile form.\n- Scripting API files are now in Python packages, which may require adjusting imports if you have scripts that import them directly.\n- Change the default phrase send mode to `ctrl+v` (paste using clipboard) rather  than sending keys one at a time.\n- This version represents some significant refactoring since the previous update, so bug reports will be highly appreciated.\n\n\nFeatures\n---------\n\nScripting API\n^^^^^^^^^^^^^\n\n**engine API object**\n\n- Deprecated: Confusingly named engine.create_abbreviation() and engine.create_hotkey() are deprecated and will be removed in the future. Use engine.create_phrase() with appropriate arguments instead.\n- Extended: engine.create_phrase() now supports multiple new optional arguments, allowing to fully configure the created phrase. It can set everything the GUI can do.\n- New: Scripts can use engine.get_triggered_abbreviation() to read which abbreviation triggered it’s execution.\n  The function returns a tuple containing the abbreviation and the trigger character (the character that 'completed' or 'confirmed' the abbreviation. Both tuple elements are None if the script was not triggered by an abbreviation. The trigger character is None if the script was configured to 'trigger immediately'. The function always returns a tuple, so direct tuple unpacking like abbreviation, trigger = engine.get_triggered_abbreviation() will always work.\n- Allow creation of 'temporary' hotkeys and whole folders (which do not persist between sessions).\n- Allow overriding existing hotkeys when creating phrases with hotkeys.\n- Allow creation of folders.\n\n**keyboard API object**\n\n- keyboard.send_keys() got a new optional parameter send_mode, allowing to specify how the given text is sent. It basically offers the same pasting options as are available to AutoKey Phrases.\n- keyboard.send_keys() now raises a TypeError instead of a generic AssertionError, if parameters don’t match the expected types.\n\n**New clipboard API method**\n- Change the default phrase send mode to `ctrl+v` (paste using clipboard) rather than sending keys one at a time.\n\n**New mouse API object**\n\n- Add mouse drag, click and scroll options to the API.\n\nCommand line interface\n++++++++++++++++++++++\n\n- Added a --version command line switch. It prints the current AutoKey version on the standard output and then exits.\n\nGraphical user interfaces\n+++++++++++++++++++++++++\n\n- (GTK) Warn user about missing required and optional programs on startup.\n- (GTK) UI will now update when changes are detected to watched files.\n- (GTK) refresh UI if script files are modified externally\n- Use system monospace font\n- Add setting to change GtkSourceView theme, (defaults to classic).\n\nOther\n+++++\n\n- Add `wait_for_keyevent` scripting function.\n- Rewrote script error logging system, with a neat Script Error Dialog to go with it.\n- `<script>` script macros accept absolute paths.\n- Macro arguments can be quoted, allowing arguments containing spaces.\n- Macro arguments can contain angle bracket characters, if escaped.\n- Add `<system>` macro for replacing phrase contents with output of an external process.\n- Allow `autokey-run` to accept full paths to python scripts (if no full path is given, will treat as an existing Autokey script name instead).\n- Expand unicode characters using code points (hacky workaround for being unable to send actual unicode).\n- Allow disabling Capslock in settings\n- Link to script `.py` and `.json` above editor.\n- Add appropriate keywords to `.desktop` files for both UIs.\n\nBug fixes\n---------\n\n- Both QT and GTK versions will reload hotkeys after a keymap change event.\n- Fix locking issue\n- Expose Alt_GR as a hotkey modifier on GTK.\n- (GTK) Fixed GUI lock-up, if multiple script error notifications are posted in quick succession. The notifications are now rate-limited and won’t post more than one notification per second. Fixes issue #383 \n\nScripting API\n+++++++++++++\n\n- Fixed API call `system.exec_command()` crashing, if output capturing is active, but the executed command has empty output. Fixes issue #379\n\nPackaging\n+++++++++\n\n- Fixed AutoKey PNG icon size. Now, the icon size is 96x96 pixels, fixing Lintian warnings on Debian. Fixes issue #369\n\nOther changes\n---------\n\n- Add CI for testing\n- Update pip installation requirements\n- Add CONTRIBUTERS.rst\n- Internal Code cleanup. The configuration handling module is split into multiple modules inside a dedicated package.\n- AutoKey now has a working test environment again. `pytest` based unit-tests can be launched from the source checkout using `python3 setup.py test`\n\n**New Dependencies (test-time only)**\n\nThe new unit tests introduce two new, *test-time only* dependencies. These are used for unit tests only and not during normal AutoKey execution.\n\n- `pytest`\n- `PyHamcrest`\n\nVersion 0.95.10 <2019-12-16>\n============================\n\nBug fixes\n---------\n\n- Mitigate crashes when entering invalid Python regular expressions in the window filter dialogue. Fixes issue #212\n- Added option to disable the handling of the Capslock modifier key.\n  Fixes issues when that key is remapped to something else, for example Ctrl.\n  The new option can be found in the settings dialogue. Fixes issues #95, #291\n- API function `system.exec_command()` now only trims the last character in the output,\n  if it is actually a newline character. If the executed command does not output a newline at the end,\n  the full output is returned. Fixes issue #354\n- Fixed wrong optional argument in man page for `autokey-run`. Fixed by pull request #361\n- Removed unnecessarily set executable bit from several AutoKey SVG icons. Fixed by pull request #363\n\n\nVersion 0.95.9 <2019-12-07>\n===========================\n\nBug fixes\n---------\n\n- Prevent data losses when deleting or moving directories from within AutoKey. AutoKey will only delete data it knows\n  and keep unknown user data. So adding $HOME and then removing it again will not purge everything below it.\n  Affected were deleting directories and moving them via drag & drop. Fixes issues #171, #332\n\nVersion 0.95.8 <2019-11-07>\n===========================\n\nBug fixes\n---------\n\n- Qt GUI: Fix issue with Python 3.7.4 and PyQt 5.11-5.13.0 that prevented AutoKey from starting on certain\n  distributions shipping this configuration, notably Kubuntu 19.10. Fixes issues #313, #301\n- Qt GUI: Fix crash when saving the currently edited item, after deselecting it in the tree view. Fixes issue #285\n- Qt GUI: Disable Main window -> Tools -> Insert Macro when not editing a Phrase. Fixes issue #276\n- Qt GUI: Add a warning that explains possible data loss when creating top level directories at used specified\n  locations. See issue #171\n- GTK GUI: Fix application hang when setting a custom value for \"Trigger on\" in the Abbreviation settings dialogue.\n  Fixes issue #315\n\n\nVersion 0.95.7 <2019-04-29>\n===========================\n\nBug fixes\n---------\n\n- GTK GUI: Fixed system tray icon context menu entry :code:`View script error`, which was non-functional,\n  if the main window is closed. The entry now opens the main window first as a workaround,\n  because a proper fix will require a major code overhaul. Fixes #222\n- Qt GUI: Fixed the truncated GPLv3 license text shown in the About AutoKey dialogue.\n  The dialogue window now shows the full license text. Fixes #258\n- Hardened the logic to read application window titles. AutoKey now works,\n  if applications do not set the :code:`_NET_WM_VISIBLE_NAME` property of their windows. Fixes #257\n- Fixed Phrase expansion using the Keyboard method, which was broken if AutoKey was started for the first time.\n  Fixes #274\n\n\nOther fixes\n-----------\n- Improved the debug logging output: Removed unnecessary output, clarified wordings, etc. See #230\n- Qt GUI: Display the current Python version number in the About dialogue.\n\n\nVersion 0.95.6 <2019-02-09>\n===========================\n\nBug fixes\n---------\n\n- Fix the combination of phrase settings :code:`Match phrase case to typed abbreviation` and\n  :code:`Trigger immediately` to cause Scripts and Phrases to trigger on each and every key press.\n  Fixes issue #254 introduced in 0.95.5.\n\nVersion 0.95.5 <2019-02-07>\n===========================\n\nBug fixes\n---------\n\n- Fix window filter detection always returning Title: :code:`FocusProxy`, Class: `Focus-Proxy-Window.FocusProxy` on\n  Java AWT applications. It now detects the proper window title and WM_CLASS attribute for Java AWT applications.\n  Fixes issue #113\n- GTK GUI: Fix the window filter detection dialogue. On clicking OK, it hung the whole application.\n  Now the dialogue window works as intended. Fixes issue #229\n- Fix abbreviation case folding (ignore case option) with abbreviations defined as UPPER CASE in the abbreviation\n  dialogue. Options :code:`Ignore case` and :code:`Match case` now work with upper case abbreviations. Fixes issue #197\n- Prevent the keyboard from staying grabbed by AutoKey if exceptions are thrown while AutoKey performs a\n  clipboard pasting action. Fixes issues #72, #225\n- Prevent writing :code:`None` to the clipboard. This prevents autokey-gtk from deadlocking,\n  caused by an unreleased mutex. Fixes issue #226\n- Restrict Phrase Undo functionality to phrases without special keys, because phrases containing special keys cannot\n  be reliably undone. Fixes issue #196\n- Clarified autosave option wording in the settings window. The option now explicitly states what it does.\n  Fixes issue #194\n- Force AutoKey to exit, if the X server connection closes, most probably at logout or session end. Fixes issue #198\n\nQt tray icon fixes and improvements\n+++++++++++++++++++++++++++++++++++\n\n- Added »View script error« entry to the Tray icon context menu, like in the GTK GUI. Part of issue #158\n- Tray icon turns red, when scripts raise an error, like in the GTK GUI. Part of issue #158\n- If changing the tray icon theme in the settings (light or dark), instantly apply the new theme,\n  without requiring an application restart. Part of issue #158\n- The tray icon now works, after if it is disabled in the settings and then enabled again. Fixes issue #223\n\nOther fixes\n-----------\n\n- Enable :code:`setup.py` to be directly called from the system shell. Fixes issue #218\n- Cleaned up some legacy leftovers in the autokey repository\n\nVersion 0.95.4 <2018-10-14>\n===========================\n\nBug fixes\n---------\n\n- Fix grabbed hotkeys being incorrectly received by other applications.\n- Fixed crashes when processing `<code>` literals in strings.\n  It is now possible to place `<code>` and `<code/>` literals in Phrases.\n  Additionally, such literals can be typed in scripts using the keyboard.send_keys function.\n- Increased the reliability of the window filter detection dialog in autokey-qt. The dialog allows sampling windows\n  to aid writing window filters. Due to timing issues in certain cases, sometimes the window title of the previously\n  active window was returned.\n\nVersion 0.95.3 <2018-08-21>\n===========================\n\nFeatures\n--------\n\n- Phrase expansion can now always be undone using the backspace key, if the feature is enabled in the settings.\n  Previously it was only be possible if the phrase was triggered by an abbreviation.\n  Now it also works when using hotkeys or selecting phrases from menus.\n  This also prevents crashes in `certain cases`_.\n- Qt GUI: Add support for automatically starting `autokey-qt` during login. It can be configured in the settings\n  dialogue. The configuration option allows to choose which GUI is automatically started, if both `autokey-qt` and\n  `autokey-gtk` are installed simultaneously, and whether the main window should be shown automatically on launch.\n- Qt GUI: Added the notification icon theme selection to the settings dialogue. The added section in the general\n  settings allow to choose between the light and dark theme, like in the `autokey-gtk` settings dialogue. Changing\n  this setting currently requires an application restart to take effect.\n\nBug fixes\n---------\n- Scripting API: The Python `__file__` global variable is now properly set for AutoKey scripts.\n  It contains the full path to the Python script file currently running. Previously, it contained the full path to\n  the `service.py` file of the currently running AutoKey instance.\n- Crash fix: Skip import of the AT-SPI interface, if importing of `pyatspi` fails with a SyntaxError. This may happen\n  with certain versions of `pyatspi` on Python 3.7. For details see `#173`_\n- Fix serializing the store during saving, if user stores recursive data structures. It now handles/skips lists that\n  contain themselves or other circular referenced data structures.\n- GTK GUI: Fix autostart handling: Create the `$XDG_CONFIG_HOME/autostart` (`~/.config/autostart`) directory, if it is\n  not already present. Fixes `#149`_\n- Qt GUI: Create the user data directories before initializing the logger system. This prevents crashes when autokey-qt\n  is used for the first time or when the user wiped all previous data. Fixes `#170`_\n- Qt GUI: Fix saving the \"Always prompt before running this script\" checkbox content when editing scripts. This option\n  now works as intended again.\n\nPackaging\n---------\n- Stop shipping the `autokey.png` icon file inside a `scalable` icon theme directory. Moved to the appropriate raster\n  image directory.\n- Corrected broken dependency package name in setup.py. The library is called `python-xlib` and not `python3-xlib` on\n  PyPI.\n\n\n.. _certain cases: https://github.com/autokey/autokey/issues/164\n.. _`#173`: https://github.com/autokey/autokey/issues/173\n.. _`#149`: https://github.com/autokey/autokey/issues/149\n.. _`#170`: https://github.com/autokey/autokey/issues/170\n\n\nVersion 0.95.2 <2018-07-16>\n===========================\n\n- Fix broken imports in autokey-shell script\n- Skip non-json-serializable data in script storage (both script local and global) during saving. This allows putting\n  non-serializable items (like function objects) into the store without crashing autokey during saving.\n- Qt GUI: Fix minor bug when creating new items. Created items are now properly selected for renaming directly after\n  creation.\n- Minor code simplifications. Removed unnecessary functions that were obsoleted during prior changes.\n\nVersion 0.95.1 <2018-06-30>\n===========================\nThis is a small bug fixing release.\n\n- Fix a long standing bug that errors occurring during phrase parsing or script execution can lock up the user keyboard.\n  Make sure to always release the keyboard after grabbing it. See `#72`_, launchpad_1551054_\n- Qt GUI: Fix saving the content of the log view to a file using the context menu entry.\n- Some small, internal code quality improvements.\n\n.. _`#72`: https://github.com/autokey/autokey/issues/72\n.. _launchpad_1551054: https://bugs.launchpad.net/ubuntu/+source/autokey/+bug/1551054\n\nVersion 0.95.0 <2018-06-28>\n===========================\n\nRewritten the Qt GUI, ported to PyQt5\n-------------------------------------\n\nResurrected, re-written and cleaned up the `autokey-qt` Qt GUI. `autokey-qt` is now a pure `PyQt5` application, only\ndependent on currently supported libraries.\n\nAdded improvements\n++++++++++++++++++\n- The main window now keeps its complete state when closed and re-opened (excluding complete application restarts). This includes the currently selected item(s) in the tree view on the left of the main window, selected text and cursor position in the editor on the right if currently editing a script or phrase.\n- The entries in the popup menu, that is shown when a hotkey assigned to a folder is pressed, now show icons based on their type (folder, phrase or script). This also works when items are configured to be shown in the system tray icon context menu.\n- The *A* autokey application icons are now always displayed correctly, both in the main window and the system tray icon.\n- Various menu actions now have system dependent keyboard shortcuts, that should adjust to the expected default of the user’s current platform/desktop environment.\n- Added icons and descriptive tooltip texts to various buttons.\n- The `enable monitoring` checkboxes (both in the `Settings` menu and the tray icon context menu) now properly react to pressing the global hotkey for this action and thus stay in sync. (Even if the hotkey is used while the menu is shown.)\n\nRegressions\n+++++++++++\n- Customizing the main window toolbar entries and keyboard shortcuts to trigger various UI actions is no longer possible. This feature was provided by the KDE4 libraries and is currently dropped.\n- The previous, KDE4-based About dialogue is replaced with a very minimalistic one.\n- The settings dialogue heavily used the KDE4 functionalities. During the port to Qt5, the dialogue lost some visual style, but all core functionality is kept.\n\nRuntime dependencies\n++++++++++++++++++++\n- Removed dependencies on deprecated and unmaintained PyQt4 and PyKDE4 libraries.\n- Removed dependency on `dbus.mainloop.qt`, instead use the DBus support built into Qt5.\n- Now depend on PyQt5, the Qt5 SVG module and the Qt5 QScintilla2 module.\n\nBuild-time dependencies\n+++++++++++++++++++++++\nOptionally depend on `pyrcc5` command line tool to compile Qt resources into a Python module.\n\nQt UI files are no longer compiled using `pykdeuic4`, Removed the old compiler wrapper script in commit 6eeeb92f_.\n\n.. _6eeeb92f: https://github.com/autokey/autokey/commit/6eeeb92f14c694979c1367d51350c1e6509329b1\n\nKnown bugs\n++++++++++\nThe system tray icon is shown, but non-functional, after enabling it in the settings dialogue. AutoKey Qt has to be restarted for the tray icon to start working. This should have no impact on the normal daily use.\n\nChanged features\n++++++++++++++++\nThe `hide tray icon` entry in the tray icon context menu now hides the icon for the current session only. The entry does not permanently disable the tray icon any more without any confirmation. Now, the only way to permanently disable the tray icon is through using the appropriate setting in the settings dialogue.\n\nFixed the broken `Clipboard` and `Mouse selection` phrase paste modes\n---------------------------------------------------------------------\n- Pasting using both `Clipboard` and `Mouse selection` works in both the Qt and GTK GUI. See `#101`_\n- Fixed restoring the clipboard after a paste is performed. Both GUIs now restore the previous clipboard content, after a phrase is pasted.\n\n.. _`#101`: https://github.com/autokey/autokey/issues/101\n\nScripting API Changes\n---------------------\n\nAdditions\n+++++++++\n\n- Added a colour picker dialogue to the GTK dialog class, because the used `zenity` now supports it.\n- The picked colour is returned as three integers using the ColourData NamedTuple, providing both index based access and attribute  access, using the channel names (`r`, `g`, `b`). Additionally, ColourData provides some conversion methods.\n\nBreaking changes\n++++++++++++++++\n- See Pull request `#148`_. The `dialog` classes for user input in scripts now return typed NamedTuple tuples instead of plain tuples. This change is safe as long as users do not perform needlessly restrictive type checks in their scripts (e.g. `if type(returned_data) == type(tuple()): ...`). User scripts doing so will break.\n- The KDialog based colour picker now also returns a ColourData instance instead of a HTML style hex string, thus making this portable between both GTK and Qt GUIs. AutoKey users previously using the old KDE GUI and using the colour picker dialogue have to port their scripts. A simple fix is using the `html_code` property of the returned ColourData instance.\n\n.. _`#148`: https://github.com/autokey/autokey/pull/148\n\nFixes\n+++++\n- Re-introduce the newline trimming for system.exec_command() function. During the porting to Python 3, the newline trimming was removed, causing users various issues with unexpected newline characters at end of output. Now properly remove the _last_ newline at end of command output. (See issues `#75`_, `#92`_, `#145`_)\n- Applied various code style improvements to the scripting module.\n\n.. _`#75`: https://github.com/autokey/autokey/issues/75\n.. _`#92`: https://github.com/autokey/autokey/issues/92\n.. _`#145`: https://github.com/autokey/autokey/issues/145\n\nOther fixes and improvements\n----------------------------\n- Fix the KDialog based colour picker provided in the scripting API. Newer versions of KDialog require an additional parameter, which is added now.\n- Fixed crashes related to mouse pasting when using the GTK GUI.\n- Both `autokey-gtk` and `autokey-qt` are now automatically generated setuptools entry-points.\n- `autokey-gtk` can now be launched directly from the autokey source tree.\n\nFrom the shell, `cd` into the `lib` directory, then use\n\n.. code-block:: sh\n\n    <path_to_autokey_source_dir>/lib$ python3 -m autokey.gtkui [-l] [-c]\n    # Or alternatively, to launch autokey-qt use:\n    <path_to_autokey_source_dir>/lib$ python3 -m autokey.qtui [-l] [-c]\n\n\n- Various internal code style improvements at various locations, like added type hints, PEP8 style fixes, etc.\n\nVersion 0.94.0 <2018-05-12>\n===========================\n- Various README updates\n- Ported autokey-run from the legacy optparse module to the new Python 3 argparse module\n- Use $XDG_RUNTIME_DIR and $XDG_DATA_HOME directories for lock and log file\n- Added support for function keys F13 to F35\n- Refactored the iomediator modules into a package. Applied various code cleanups and fixes.\n\nVersion 0.93.10 <2017-02-17>\n============================\n- The scripting global storage now returns None if the requested key is not present.\n- Improved the error messages in autokey-run. It is now clear that autokey has to run in the background for autokey-run to work.\n- Added a LICENSE file containing the GPL v3 license terms.\n\nVersion 0.93.9 <2017-01-11>\n===========================\nFixed a regression with setup.py install_requires keyword argument.\nUpdated the GitHub issue template.\n\nVersion 0.93.8 <2017-01-09>\n===========================\n- Readme updates\n- Depend on Ubuntu appindicator\n- Leverage libappindicator completely, fix \"View script error\"\n\nVersion 0.93.7 <2016-12-21>\n===========================\nThis release contains various bug/crash fixes\n\n- Renamed repository from autokey-py3 to autokey\n- Moved the AutoKey source code out of src folder one level up.\n- Removed donate button\n- autokey-gtk script is now a setuptools generated entry point\n- Require GTK 3.0 to fix autokey-gtk startup\n- Updated various web links around the codebase\n- New feature: Return the result of wait events in the iomediator module.\n\n\nVersion 0.93.6 <2016-08-13>\n===========================\n- Ensure Compatibility with official python-xlib\n- Fixed several GTK related warnings\n- GTK GUI:  Add feature to trigger popupmenu items with letters, rather than numbers.\n- Add an AUR link\n\nVersion 0.93.4 <2015-02-17>\n===========================\nBugfix: Prevent clipboard related crashes with GTK3.\n\nVersion 0.93.3 <2015-02-20>\n===========================\nBugfix for defining abbreviations by `@kuhanalog`_\n\n.. _@kuhanalog: https://github.com/kuhanalog\n\nVersion 0.93.2 <2014-08-09>\n===========================\nRead user scripts with UTF-8 encoding.\n\nVersion 0.93.1 <2014-03-02>\n===========================\nInternal changes: Changed the data structure of the input stack.\n\n\nVersion 0.93.0 <2014-02-27 Thu>\n===============================\n\nAdded functions “acknowledge_gnome_notification” and “move_to_pat”, more details `here`_.\n\n.. _here: https://github.com/autokey/autokey/blob/master/new_features.rst\n\nVersion 0.92.0 <2014-02-21 Fri>\n===============================\nAdded an interactive shell launcher, “autokey-shell”. “autokey-shell” allows you to run some AutoKey functions interactively. Read `this`_ for more details.\n\n\nVersion 0.91.0 <2014-02-14 Fri>\n===============================\nAdded a new function “click_on_pat” for use in user scripts. See `this`_ for more details.\n\n.. _this: https://github.com/autokey/autokey/blob/master/new_features.rst\n\n\nFirst release <2014-01-31 Fri>\n==============================\nThis describes some of the changes to the original AutoKey source code.\n\nPython 3 related changes\n------------------------\nPython 3 is less tolerant of circular imports so some files were split into several files. Those pieces of the original have their file names prefixed with the original's.\n\nBug fixes\n+++++++++\nEliminate possible deadlock.\nChanged\n\n.. code-block:: python\n\n        p = subprocess.Popen([…], stdout=subprocess.PIPE)\n        retCode = p.wait()\n        output = p.stdout.read()[:-1] # Drop trailing newline\n\nto\n\n.. code:: python\n\n        p = subprocess.Popen([…], stdout=subprocess.PIPE)\n        output = p.communicate()[0].decode()[:-1] # Drop trailing newline\n        retCode = p.returncode\n\nThe former may cause a deadlock, for more information, see `Python docs`_. This pattern appears several times in the source codes.\n\n.. _Python docs: http://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait\n\nFor a “gi.repository.Notify.Notification” object, test if method “attach_to_status_icon” exists before calling. After this fix, errors in user scripts will trigger a notification.\n\nRespect XDG standard. Details `here`__.\n\n__ https://code.google.com/p/autokey/issues/detail?id=266\n\nCorrected a typo in manpage of autokey-run.\n\nFor the GTK GUI, after script error is viewed, tray icon is reverted back to original.\n\nOther changes\n+++++++++++++\nIn setup.py, the “/usr/” prefix to the directory names in the data_files argument were removed to allow for non-root install.\n\nRemoved the “WINDOWID” environment variable so that zenity is not tied to the window from which it was launched.\n\nModified the launcher and other files to allow for editable installs (“pip install -e”).\n\nAdded an “about” dialog for the Python 3 port.\n\nChanged hyperlink for bug reports.\n"
        },
        {
          "name": "CONTRIBUTORS.rst",
          "type": "blob",
          "size": 1.974609375,
          "content": "Contributing\n============\nWhen you want to contribute new features or fix things, you are free to take virtually any task you wish. Just open a PR for discussion and I’ll try to answer any questions that arise. I suggest writing new features on top of develop.\n\nPlease add a line to CHANGELOG.rst when creating PRs\n\nPlease make sure tests pass before you submit PRs. To ensure this happens automatically, I recommend adding the following lines to the file `.git/hooks/pre-push`:\n\n.. code:: sh\n\n  remote=\"$1\"\n  url=\"$2\"\n\n  tox\n  exit $?\n\nThis will stop the push if tests fail.\n\nGitHub Actions are used to run tests on pull requests to `master` and\n`develop` branches.\n\nTagged releases merged into `develop`, `beta` and `master` will\nautomatically be built.\n\nTesting\n=======\nRunning the tests is simple: Checkout `develop` (or v>0.96.0) and run `tox`\n(`tox` must be installed).\nRunning individual test files or folders, or using pytest arguments, can be\ndone with `tox -- tests/[test file] [--opt]`.\n\nTest coverage reports can be generated with\n`tox -e clean,coverage,report`\n\n\nTesting requires tox, pytest and PyHamcrest as new test-time only\ndependencies. Tox will install pytest and pyhamcrest in its virtualenv when\nrun, so you do not need to worry about it.  Tox itself does need manual\ninstallation.  Install `tox` through `pip` or `python-tox` through your\npackage manager.\n\nThe current (0.95.x) `master` tests are deprecated and won’t work. They are still on Python 2 and nobody cared to update them throughout the years, not even the original developer. They test things long gone in the project code…\nThe old tests are scheduled to be replaced by a new suite in the `develop` branch, which will be merged as 0.96.0.\n\nThe current situation is a bit unfortunate: The new suite lives in the develop branch, which accumulates new features, but which can't be backported to master without introducing merge conflicts later on. So until develop gets merged in, you’d have to switch to develop to run the tests.\n\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.544921875,
          "content": "$Id$\n\nThe full application can be installed using pip3 from the cloned repository:\npip3 install .\n\nAlternatively, you can build Debian packages using the following command:\n\ndpkg-buildpackage -us -uc # The built packages are placed in the parent directory\ncd ../\n\nThen to install the GTK version:\nsudo dpkg --install autokey-gtk_<version>.deb autokey-common_<version>.deb\n\nOr the Qt version:\nsudo dpkg --install autokey-qt_<version>.deb autokey-common_<version>.deb\n\nAfter dpkg finished, run this to install any missing dependencies:\nsudo apt-get install -f\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0146484375,
          "content": "include INSTALL"
        },
        {
          "name": "PKG-INFO",
          "type": "blob",
          "size": 0.556640625,
          "content": "Metadata-Version: 1.1\nName: autokey\nVersion: 0.96.0\nSummary: Desktop automation utility\nHome-page: http://autokey.googlecode.com/\nAuthor: Chris Dekter\nAuthor-email: cdekter@gmail.com\nLicense: GPL v3\nDescription: AutoKey is a desktop automation utility for Linux and X11. It allows the automation of virtually\n\t\t\t any task by responding to typed abbreviations and hotkeys. It offers a full-featured GUI that\n\t\t\t makes it highly accessible for novices, as well as a scripting interface offering the\n\t\t\t full flexibility and power of the Python language.\nPlatform: UNKNOWN\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 5.1787109375,
          "content": "=======\nAutoKey\n=======\n\n.. image:: https://img.shields.io/badge/IRC-%23autokey%20on%20Libera.Chat-blue.svg\n    :target: https://web.libera.chat/#autokey\n\n.. image:: https://badges.gitter.im/autokey/autokey.svg\n   :alt: Join the chat at https://gitter.im/autokey/autokey\n   :target: https://gitter.im/autokey/autokey\n\n.. image:: http://img.shields.io/badge/stackoverflow-autokey-blue.svg\n   :alt: Ask and answer questions on StackOverflow\n   :target: https://stackoverflow.com/questions/tagged/autokey\n\n.. image:: https://www.codetriage.com/autokey/autokey/badges/users.svg\n    :target: https://www.codetriage.com/autokey/autokey\n\n.. contents::\n\nAbout\n=====\n`AutoKey`_, a desktop automation utility for Linux and X11, formerly hosted on `Google`_, has been updated to run on Python 3.\n\n**Important**: This is an X11 application and, as such, will not function correctly when Wayland is in use instead of Xorg.\n\n.. _AutoKey: https://github.com/autokey/autokey\n.. _Google: https://code.google.com/archive/p/autokey/\n\nInstallation\n============\n\n**Important**: Please remove previous installations of AutoKey fully before installing!\n\nFor detailed installation instructions, please visit the `Installing`_ page in our wiki.\n\n.. _Installing: https://github.com/autokey/autokey/wiki/Installing\n\nDocumentation\n=============\nAutoKey documentation is available `here <https://autokey.github.io/index.html>`__ and, for versions prior to 0.96.0, `here <https://autokey.github.io/autokey/index.html>`__. Example code and explanations for how AutoKey works can be found in our `wiki`_ and, in particular, on the `Features`_ and `Example Scripts`_ pages. Additional information can be found by searching `Stack Overflow`_ and `GitHub`_.\n\n.. _wiki: https://github.com/autokey/autokey/wiki\n.. _Features: https://github.com/autokey/autokey/wiki/Features\n.. _Example Scripts: https://github.com/autokey/autokey/wiki/Example-Scripts\n.. _Stack Overflow: https://stackoverflow.com/questions/tagged/autokey\n.. _GitHub: https://github.com/search?l=Python&q=autokey&ref=cmdform&type=Repositories\n\nSupport\n=======\n\nPlease do not request support on the issue tracker. Instead, head over to the autokey-users `Google Groups`_ forum, `Gitter`_ web-based chat, on `IRC`_ (#autokey on `Libera.Chat`_), or `Stack Overflow`_.\n\nWe'd appreciate it if you take a look at our `Troubleshooting`_ wiki page before posting. You'll be more likely to get a good answer quickly by providing as much information as you can.\n\n.. _Google Groups: https://groups.google.com/forum/#!forum/autokey-users\n.. _Stack Overflow: https://stackoverflow.com/questions/tagged/autokey\n.. _IRC: https://web.libera.chat/#autokey\n.. _Libera.Chat: https://libera.chat/guides/\n.. _Gitter: https://gitter.im/autokey/autokey\n.. _Troubleshooting: https://github.com/autokey/autokey/wiki/Troubleshooting\n\nBug reports\n===========\nBug reports are welcome. Please use the `GitHub Issue Tracker`_ to report bugs. When reporting a suspected bug, please make sure to include as much information as possible to expedite troubleshooting and resolution.\n\nHere are some possible examples of the types of information you might need to provide:\n\n* Details on how to reproduce the issue you are experiencing are always helpful.\n* An `AutoKey error message`_ is helpful when something is wrong with your AutoKey script.\n* An `AutoKey traceback`_ is helpful when AutoKey runs without crashing, a trigger was used, and the expected event either didn't occur or something other than the expected result occurred.\n* A `Python traceback`_ is helpful when something is wrong with your AutoKey script, causing an exception to be shown in your AutoKey error message.\n\nIf you're not sure your issue is a bug or you'd like help with reporting it, you can post about it first on one of the `platforms used by our community`_ and we'll assist you.\n\n.. _GitHub Issue Tracker: https://github.com/autokey/autokey/issues\n.. _AutoKey error message: https://github.com/autokey/autokey/wiki/Troubleshooting#autokey-error-message\n.. _AutoKey traceback: https://github.com/autokey/autokey/wiki/Troubleshooting#autokey-traceback\n.. _Python traceback: https://github.com/autokey/autokey/wiki/Troubleshooting#python-traceback\n.. _platforms used by our community: https://github.com/autokey/autokey/wiki/Community\n\nContributing or modifying the source\n====================================\n\nPull requests are welcome from anyone who would like to modify or contribute to the source code. Useful tips for working with and testing the code can be found in the `CONTRIBUTORS.rst`_ file. AutoKey also participates in `CodeTriage`_, where members can sign up to receive a periodic email with a link to an open AutoKey issue that needs help.\n\n.. _CodeTriage: https://www.codetriage.com/autokey/autokey\n.. _CONTRIBUTORS.rst: https://github.com/autokey/autokey/blob/master/CONTRIBUTORS.rst\n\nChangelog\n=========\nOur `changelog`_ is the best source of information for what's new and fixed in each release.\n\n.. _changelog: https://github.com/autokey/autokey/blob/master/CHANGELOG.rst\n\nLicense\n=======\nAutoKey uses the `GNU GPL v3`_. See the `LICENSE`_ file for a plain text copy of the license.\n\n.. _GNU GPL v3: https://www.gnu.org/licenses/gpl-3.0.html\n.. _LICENSE: https://github.com/autokey/autokey/blob/master/LICENSE\n"
        },
        {
          "name": "apt-requirements.txt",
          "type": "blob",
          "size": 0.2451171875,
          "content": "dbus\npython3-dbus\nlibdbus-1-dev\nlibpython3-dev\nlibdbus-glib-1-dev\nlibgirepository1.0-dev\nwmctrl\ngir1.2-gtk-3.0\ngir1.2-gtksource-3.0\ngir1.2-appindicator3-0.1\ngir1.2-glib-2.0\ngir1.2-notify-0.7\npython3-gi\nzenity\nkdialog\npyqt5-dev-tools\nx11-xserver-utils\n"
        },
        {
          "name": "autokey-run",
          "type": "blob",
          "size": 3.0087890625,
          "content": "#!/usr/bin/env python3\n\n# -*- coding: utf-8 -*-\n# -*- mode: python -*-\n\n# Copyright (C) 2011 Chris Dekter\n# Copyright (C) 2017 Thomas Hess\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport sys\nimport dbus\nimport argparse\n\n\ndef generate_argument_parser():\n    description = \"Run an AutoKey function by sending a command to a running AutoKey instance over dbus.\"\n\n    argument_parser = argparse.ArgumentParser(description=description)\n    mode_group = argument_parser.add_mutually_exclusive_group(required=True)\n    mode_group.add_argument(\"-s\", \"--script\",\n                            action=\"store_const\",\n                            const=\"script\",\n                            dest=\"mode\",\n                            help=\"Run a script. Scripts can be autokey \\\n                                    script names, or absolute paths to \\\n                                    existing scripts.\")\n    mode_group.add_argument(\"-p\", \"--phrase\",\n                            action=\"store_const\",\n                            const=\"phrase\",\n                            dest=\"mode\",\n                            help=\"Paste a phrase\")\n    mode_group.add_argument(\"-f\", \"--folder\",\n                            action=\"store_const\",\n                            const=\"folder\",\n                            dest=\"mode\",\n                            help=\"Show a folder popup menu\")\n    argument_parser.add_argument(\"name\",\n                                 help=\"The name of the script, phrase or folder.\")\n    return argument_parser\n\n\nif __name__ == \"__main__\":\n\n    parser = generate_argument_parser()\n    arguments = parser.parse_args()\n\n    bus = dbus.SessionBus()\n    try:\n        dbus_service = bus.get_object(\"org.autokey.Service\", \"/AppService\")\n    except dbus.DBusException as e:\n        print(\"AutoKey must be running to use autokey-run.\\n\", file=sys.stderr)\n        print(str(e), file=sys.stderr)\n        sys.exit(1)\n\n    if arguments.mode == \"script\":\n        dbus_function = dbus_service.run_script\n    elif arguments.mode == \"phrase\":\n        dbus_function = dbus_service.run_phrase\n    elif arguments.mode == \"folder\":\n        dbus_function = dbus_service.run_folder\n    else:\n        print(\"BUG: Unknown run mode encountered: {}\".format(arguments.mode), file=sys.stderr)\n        sys.exit(1)\n\n    try:\n        dbus_function(arguments.name, dbus_interface=\"org.autokey.Service\")\n    except dbus.DBusException as e:\n        print(e.get_dbus_message(), file=sys.stderr)\n        sys.exit(1)\n"
        },
        {
          "name": "autokey-shell",
          "type": "blob",
          "size": 1.0341796875,
          "content": "#! /usr/bin/env python3\n\n# -*- coding: utf-8 -*-\n# -*- mode: python -*-\nimport distutils.spawn\nimport subprocess\nimport sys\n\nstart_script = '''\nimport autokey.iomediator\nimport autokey.configmanager.configmanager\nimport autokey.scripting as scripting\nimport autokey.scripting.highlevel as hl\nsystem = scripting.System()\nprint(\"\"\"\nAutoKey functions from “autokey.scripting.highlevel” (under name “hl”)\nand “autokey.scripting.System()” (under name “system”) are imported.\nYou can try the functions on the interpreter. For example:\nhelp(hl.click_on_pat)\nprint(system.exec_command('ls'))\n\"\"\")\n'''\n\nipython3_cmd = distutils.spawn.find_executable('ipython3')\nif ipython3_cmd is not None:\n    retcode = subprocess.call([ipython3_cmd, '-ic', start_script])\n    raise SystemExit(retcode)\n\npython3_path = distutils.spawn.find_executable('python3')\nif python3_path is not None:\n    retcode = subprocess.call([python3_path, '-ic', start_script])\n    raise SystemExit(retcode)\n\nprint('\\033[91m' + 'Error! No Python 3 shell found.' + '\\033[0m')\nsys.exit(1)\n"
        },
        {
          "name": "autokey.spec",
          "type": "blob",
          "size": 4.80078125,
          "content": "#\n# This file and all modifications and additions to the pristine\n# package are under the same license as the package itself.\n#\n\n#define python macros for openSUSE < 112\n%{!?python_sitelib: %global python_sitelib %(%{__python} -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\")}\n%{!?python_sitearch: %global python_sitearch %(%{__python} -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib(1))\")}\n\nName:           autokey\nVersion:        0.96.0\nRelease:        1\nLicense:        GPLv3\nSummary:        Desktop automation utility\nUrl:            http://github.com/autokey/autokey\nGroup:          System/X11/Utilities\nSource:         %{name}_%{version}.tar.gz\nBuildRequires:  python-base\nBuildRequires:  update-desktop-files\nBuildRoot:      %{_tmppath}/%{name}-%{version}-build\n%if 0%{?suse_version} > 1110\n# This works on newer version\n# on older version it dies misserably if used\nBuildArch:      noarch\n%endif\n\n%description\nAutoKey is a desktop automation utility for Linux and X11. It allows the\nautomation of virtually any task by responding to typed abbreviations\nand hotkeys. It offers a full-featured GUI that makes it highly\naccessible for novices, as well as a scripting interface offering the\nfull flexibility and power of the Python language.\n\n%package common\nLicense:        GPLv3\nSummary:        Desktop automation utility -- Common Files\nGroup:          System/X11/Utilities\nRequires:       python-simplejson\nRequires:       python-pyinotify\nRequires:       python-xlib\nRequires:       wmctrl\nRecommends:       %{name}-gtk\n%py_requires\n\n%description common\nAutoKey is a desktop automation utility for Linux and X11. It allows the\nautomation of virtually any task by responding to typed abbreviations\nand hotkeys. It offers a full-featured GUI that makes it highly\naccessible for novices, as well as a scripting interface offering the\nfull flexibility and power of the Python language.\n\n%package gtk\nLicense:        GPLv3\nSummary:        Desktop automation utility -- GTK+ Interface\nGroup:          System/X11/Utilities\nRequires:       %{name}-common = %{version}\nRequires:       python-gtk\nRequires:       python-gtksourceview\nRequires:       python-notify\nRequires:       zenity\n%py_requires\n\n%description gtk\nAutoKey is a desktop automation utility for Linux and X11. It allows the\nautomation of virtually any task by responding to typed abbreviations\nand hotkeys. It offers a full-featured GUI that makes it highly\naccessible for novices, as well as a scripting interface offering the\nfull flexibility and power of the Python language.\n\n%package qt\nLicense:        GPLv3\nSummary:        Desktop automation utility -- Qt Interface\nGroup:          System/X11/Utilities\nRequires:       %{name}-common = %{version}\nRequires:       python-qt4\nRequires:       python-qscintilla2\nRequires:       python-notify\n%py_requires\n\n%description qt\nAutoKey is a desktop automation utility for Linux and X11. It allows the\nautomation of virtually any task by responding to typed abbreviations\nand hotkeys. It offers a full-featured GUI that makes it highly\naccessible for novices, as well as a scripting interface offering the\nfull flexibility and power of the Python language.\n\n%prep\n%setup -n %{name}_%{version}\nfind src/lib -name \"*.py\" -exec sed -i '/^#!\\/usr\\/bin\\/env python$/d' {} \";\"\n\n%build\n%{__python} setup.py build\n\n%install\n%{__python} setup.py install --prefix=%{_prefix} --root=%{buildroot}\n%suse_update_desktop_file autokey-gtk DesktopSettings\n\n%files common\n%defattr(-,root,root)\n%doc ACKNOWLEDGMENTS README\n%dir %{python_sitelib}/autokey\n%{python_sitelib}/autokey/*.py*\n%exclude %{python_sitelib}/autokey/gtkapp.py*\n%{python_sitelib}/%{name}-%{version}-py%{py_ver}.egg-info\n%{_datadir}/icons/hicolor/scalable/apps/autokey-status*.svg\n%{_datadir}/icons/hicolor/scalable/apps/autokey.png\n%{_datadir}/icons/Humanity/scalable/apps/*.svg\n%{_datadir}/icons/ubuntu-mono-dark/scalable/apps/*.svg\n%{_datadir}/icons/ubuntu-mono-light/scalable/apps/*.svg\n%{_bindir}/autokey-run\n%{_mandir}/man1/autokey-run.1*\n\n%files gtk\n%defattr(-,root,root)\n%{_bindir}/autokey-gtk\n%{python_sitelib}/autokey/gtkapp.py*\n%{python_sitelib}/autokey/gtkui/\n%{_datadir}/applications/autokey-gtk.desktop\n%{_datadir}/icons/hicolor/scalable/apps/autokey.svg\n%{_mandir}/man1/autokey-gtk.1*\n\n%files qt\n%defattr(-,root,root)\n%{python_sitelib}/autokey/qtapp.py*\n%{python_sitelib}/autokey/qtui/\n%{_datadir}/applications/autokey-qt.desktop\n%{_datadir}/icons/hicolor/scalable/apps/autokey.png\n%{_mandir}/man1/autokey-qt.1*\n\n%post common\n/bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null || :\n\n%postun common\nif [ $1 -eq 0 ] ; then\n    /bin/touch --no-create %{_datadir}/icons/hicolor &>/dev/null\n    /usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :\nfi\n\n%posttrans common\n/usr/bin/gtk-update-icon-cache %{_datadir}/icons/hicolor &>/dev/null || :\n\n%changelog\n\n\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extractDoc.py",
          "type": "blob",
          "size": 1.5546875,
          "content": "# -*- coding: utf-8 -*-\n\n# Copyright (C) 2008 Chris Dekter\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n\nimport sys, inspect\nsys.path.append(\"./src/lib\")\nimport scripting\n\n\nif __name__ == \"__main__\":\n    \n    outFile = open(\"src/lib/qtui/data/api.txt\", \"w\")\n    \n    for name, attrib in inspect.getmembers(scripting):\n        \n        if inspect.isclass(attrib) and not (name.startswith(\"_\") or name.startswith(\"Gtk\")):\n            for name, attrib in inspect.getmembers(attrib):\n                if inspect.ismethod(attrib) and not name.startswith(\"_\"):\n                    doc = attrib.__doc__\n                    lines = doc.split('\\n')\n                    try:\n                        apiLine = lines[3].strip()\n                        docLine = lines[1].strip()\n                    except:\n                        continue\n                    \n                    outFile.write(apiLine[9:-1] + \" \" + docLine +  '\\n')\n            \n    outFile.close()"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "new_features.rst",
          "type": "blob",
          "size": 2.3564453125,
          "content": "============\nNew features\n============\nThis page documents new features built on top of the Python 3 port of the original AutoKey.\n\n.. contents::\n\nAcknowledge Gnome 3 notifications\n=================================\n\nMoves mouse pointer to the bottom center of the screen and clicks on it.\n\n.. code:: python\n\n   acknowledge_gnome_notification()\n\n\nClick on or move pointer to an area that can be identified with an image\n========================================================================\nRequires `xautomation`_ and `ImageMagick®`_ to be installed.\n\n.. _xautomation: http://hoopajoo.net/projects/xautomation.html\n.. _ImageMagick®: http://www.imagemagick.org/\n\n`Source code`_.\n\n.. _Source code: https://github.com/autokey/autokey/blob/master/src/lib/scripting_highlevel.py\n\n.. code:: python\n\n   # click_on_pat(pat:str, mousebutton:int=1, offset:(float,float)=None, tolerance:int=0, restore_pos:bool = False) -> None\n   # move_to_pat(pat:str, offset:(float,float)=None, tolerance:int=0)\n\n   hl = highlevel\n   LEFT = hl.LEFT; MIDDLE = hl.MIDDLE; RIGHT = hl.RIGHT\n   click_on_pat = hl.click_on_pat\n   move_to_pat = hl.move_to_pat\n   PatternNotFound = hl.PatternNotFound\n   # or use\n   # from autokey.scripting_highlevel import *\n   # to import all functions\n\n   click_on_pat(\"pattern.png\")\n\n   # left click on centre of pattern\n   click_on_pat(\"pat.png\",1)\n   click_on_pat(\"pat.png\",LEFT)\n\n   # middle click on centre of pattern\n   click_on_pat(\"pat.png\",2)\n   click_on_pat(\"pat.png\",MIDDLE)\n\n   # right click on centre of pattern\n   click_on_pat(\"pat.png\",3)\n   click_on_pat(\"pat.png\",RIGHT)\n\n   # left click of top left of the pattern and return to the original mouse position after clicking.\n   click_on_pat(\"pat.png\",LEFT,(0,0), restore_pos=True)\n\n   # left click of bottom right of the pattern, with tolerance for “fuzzy” matches set to 1.\n   click_on_pat(\"pat.png\",1,(100,100),1)\n\n   try:\n       click_on_pat(\"pat1.png\")\n   except PatternNotFound:\n       print(\"Pattern not found\")\n\n\n\nRunning AutoKey scripts interactively on a shell\n================================================\n\nStart “autokey-shell”. Currently, only functions from “system” and “highlevel” modules are exported to the shell.\n\nIn the shell you can use functions provided by AutoKey:\n\n.. code:: python\n\n   print(system.exec_command('ls'))\n   help(hl.click_on_pat)\n   help(hl.visgrep)\n   hl.click_on_pat(\"pattern.png\")\n"
        },
        {
          "name": "pip-requirements.txt",
          "type": "blob",
          "size": 0.0703125,
          "content": "dbus-python\npyinotify\npython-xlib\nPyGObject\nPyQt5\nQScintilla\npyhamcrest\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.326171875,
          "content": "[bdist_wheel]\nuniversal = 0\n[aliases]\ntest=pytest\n\n\n[tool:pytest]\nlog_cli_level=debug\ntestpaths =\n  tests\nnorecursedirs=dist build .tox scripts\naddopts =\n#   --cov-report=xml\n  --cov-report=term-missing\n#   --cov-report=html:test_coverage_report_html\n#   --cov-report=annotate:test_coverage_annotated_source\n  # Summarise failed tests at the end, including xfails and skips.\n  -r fa\n  ; -v\n\n\n[tox:tox]\n; envlist = py39,py310,py311,py312\n; Only run test environment by default, so just running `tox` is fast\n; and doesn't include the overhead of coverage or any other build\n; pathways.\n; This may not be the most effective way to do this, but it is the only way I\n; could find.\nenvlist = test\n\n[testenv]\ndeps =\n    pytest\n    pytest-cov\n    pyhamcrest>=1.8.1\n    PyQt5\n; Pass args to pytest by including them in the tox call after a `--`, eg tox\n; -- tests/test_something.py\ncommands = pytest {posargs}\n\n[testenv:test]\ndeps = {[testenv]deps}\ncommands = pytest --no-cov {posargs}\n\n[testenv:clean]\ndeps = coverage\nskip_install = true\ncommands = coverage erase\n\n[testenv:coverage]\ndeps = coverage\n    {[testenv]deps}\nsetenv = COVERAGE_FILE = .coverage.{envname}\ncommands = pytest --cov={envsitepackagesdir}/autokey --cov-append {posargs}\n\n[testenv:report]\ndeps = coverage\nskip_install = true\ncommands =\n    coverage combine\n    coverage report\n    coverage html\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 8.0009765625,
          "content": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n# Copyright (C) 2011 Chris Dekter\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport sys\nimport re\nfrom collections import namedtuple\nimport subprocess\nfrom pathlib import Path, PurePath\nimport warnings\nimport shutil\n\ntry:\n    from setuptools import setup\nexcept ImportError:\n    print(\"Autokey needs setuptools in order to build. Install it with your package\"\n          \"manager (python-setuptools) or via pip (pip install setuptools)\")\n    sys.exit(1)\nelse:\n    import setuptools.command.build_py\n\nif sys.version_info < (3, 9, 20):\n    print(\"Autokey requires Python 3.9 or later. You are using \" + \".\".join(map(str, sys.version_info[:3])))\n    sys.exit(1)\n\n\nAutoKeyData = namedtuple(\"AutoKeyData\", [\"version\", \"author\", \"author_email\", \"maintainer\", \"maintainer_email\"])\n\n\ndef extract_autokey_data() -> AutoKeyData:\n    source_file_name = \"./lib/autokey/common.py\"\n    with open(source_file_name, \"r\") as data_source_file:\n        source = data_source_file.read()\n    if not source:\n        print(\"Cannot read AutoKey source file containing required information. Unreadable: {}\".format(\n            source_file_name))\n        sys.exit(1)\n\n    def search_for(pattern: str) -> str:\n        return re.search(\n            r\"\"\"^{}\\s*=\\s*('(.*)'|\"(.*)\")\"\"\".format(pattern),  # Search for assignments: VAR = 'VALUE' or VAR = \"VALUE\"\n            source,\n            re.M\n        ).group(1)[1:-1]  # Cut off outer quotation marks\n\n    return AutoKeyData(\n        version=search_for(\"VERSION\"),\n        author=search_for(\"AUTHOR\"),\n        author_email=search_for(\"AUTHOR_EMAIL\"),\n        maintainer=search_for(\"MAINTAINER\"),\n        maintainer_email=search_for(\"MAINTAINER_EMAIL\")\n    )\n\n\nclass BuildWithQtResources(setuptools.command.build_py.build_py):\n    \"\"\"Try to build the Qt resources file for autokey-qt.\"\"\"\n    def run(self):\n        if not self.dry_run:\n            resource_dir = (Path(__file__).parent / \"lib\" / \"autokey\" / \"qtui\" / \"resources\").resolve()\n            resource_file = resource_dir / \"resources.qrc\"\n            self._copy_icon_files_into_qt_resources_directory(resource_dir)\n            compiled_qt_resources = self._compile_resource_file(resource_file)\n            if compiled_qt_resources:\n                target_directory = Path(self.build_lib) / \"autokey\" / \"qtui\"\n                self.mkpath(str(target_directory))\n                with open(str(target_directory / \"compiled_resources.py\"), \"w\") as compiled_qt_resources_file:\n                    compiled_qt_resources_file.write(compiled_qt_resources)\n            else:\n                # If here, compilation failed for a known reason, so include the resource files directly.\n                # Ok, always include this for now. setup.py seems to not like this\n                # self.package_data[\"autokey.qtui\"] += [\"resources/icons/*\", \"resources/ui/*.ui\"]\n                pass\n        super(BuildWithQtResources, self).run()\n\n    @staticmethod\n    def _compile_resource_file(resource_file: Path) -> str:\n        command = (\"pyrcc5\", str(resource_file))\n        try:\n            compiled = subprocess.check_output(command, universal_newlines=True)  # type: str\n        except (FileNotFoundError, subprocess.CalledProcessError) as e:\n            warnings.warn(\"An exception occurred during resource compilation for autokey-qt: {}\".format(e))\n            return \"\"\n        else:\n            return compiled\n\n    def _copy_icon_files_into_qt_resources_directory(self, resource_dir: Path):\n        target_directory = resource_dir / \"icons\"\n        self.mkpath(str(target_directory))\n        icon_source_path = (Path(__file__).parent / \"config\").resolve()  # type: Path\n        for icon_name in (\n                \"autokey.png\",\n                \"autokey.svg\",\n                \"autokey-status.svg\",\n                \"autokey-status-dark.svg\",\n                \"autokey-status-error.svg\"):\n            icon = icon_source_path / icon_name\n            shutil.copy(str(icon), str(target_directory))\n\n\nak_data = extract_autokey_data()\nthis_directory = PurePath(__file__).parent\nwith open(this_directory / 'README.rst', encoding='utf-8') as f:\n    long_description = f.read()\n\nsetup(\n    name='autokey',\n    version=ak_data.version,\n    description='Keyboard and GUI automation on Linux (X11)',\n    long_description=long_description,\n    long_description_content_type='text/x-rst',\n    author=ak_data.author,\n    author_email=ak_data.author_email,\n    maintainer=ak_data.maintainer,\n    maintainer_email=ak_data.maintainer_email,\n    url='https://github.com/autokey/autokey',\n    cmdclass={'build_py': BuildWithQtResources},\n    license='GPLv3',\n    python_requires=\">=3.9\",\n    # This requires autokey submodules (subdirectories) to contain their own `__init__.py` file (i.e.\n    # they advertise themselves as modules).\n    # find_namespace_packages might be a better alternative that doesn't\n    # require this.\n    # https://setuptools.readthedocs.io/en/latest/userguide/package_discovery.html#using-find-namespace-or-find-namespace-packages\n    packages=setuptools.find_packages('lib'),\n    package_dir={'': 'lib'},\n\n    package_data={'autokey': [\"configmanager/predefined_user_scripts/*\"],\n        'autokey.qtui': ['data/*', 'resources/icons/*', 'resources/ui/*.ui'],\n                  'autokey.gtkui': ['data/*']},\n    data_files=[('share/icons/hicolor/scalable/apps',\n                 ['config/autokey.svg',\n                  'config/autokey-status.svg',\n                  'config/autokey-status-dark.svg',\n                  'config/autokey-status-error.svg']),\n                ('share/icons/hicolor/96x96/apps',  # TODO: Remove later. https://github.com/autokey/autokey/issues/160\n                 ['config/autokey.png']),\n                ('share/icons/Humanity/scalable/apps',\n                 ['config/Humanity/autokey-status.svg',\n                  'config/Humanity/autokey-status-error.svg']),\n                ('share/icons/ubuntu-mono-dark/apps/48',\n                 ['config/ubuntu-mono-dark/autokey-status.svg',\n                  'config/ubuntu-mono-dark/autokey-status-error.svg']),\n                ('share/icons/ubuntu-mono-light/apps/48',\n                 ['config/ubuntu-mono-light/autokey-status.svg',\n                  'config/ubuntu-mono-light/autokey-status-error.svg']),\n                ('share/applications',\n                 ['config/autokey-qt.desktop',\n                  'config/autokey-gtk.desktop']),\n                ('share/man/man1/',\n                 ['doc/man/autokey-qt.1',\n                  'doc/man/autokey-gtk.1',\n                  'doc/man/autokey-run.1'])\n                ],\n    entry_points={\n        'console_scripts': [\n            'autokey-gtk=autokey.gtkui.__main__:main',\n            'autokey-qt=autokey.qtui.__main__:Application'\n        ]\n    },\n    scripts=['autokey-run', 'autokey-shell'],\n    # Minimal installation pre-requisite python packages.\n    # Some are not included here because they should be installed\n    # through the system package manager, not pip.\n    install_requires=[\n        'pyasyncore',\n        'pyinotify',\n        'python-xlib',\n        'packaging',\n    ],\n    test_suite=\"pytest\",\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: End Users/Desktop',\n        'License :: OSI Approved :: GNU General Public License v3 (GPLv3)',\n        'Natural Language :: English',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python :: 3.9',\n    ],\n    keywords='automation hotkey expansion expander phrase',\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}