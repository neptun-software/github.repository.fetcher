{
  "metadata": {
    "timestamp": 1736560018538,
    "page": 830,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-research/scenic",
      "stars": 3381,
      "defaultBranch": "main",
      "files": [
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2958984375,
          "content": "# How to Contribute\n\nScenic is a platform used for developing new methods and ideas by Google\nresearchers, mostly around attention-based models for computer vision or\nmulti-modal applications. We encourage forking the repository and continued\ndevelopment. We welcome suggestions and contributions to improving Scenic.\nThere are a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement (CLA). You (or your employer) retain the copyright to your\ncontribution; this simply gives us permission to use and redistribute your\ncontributions as part of the project. Head over to\n<https://cla.developers.google.com/> to see your current agreements on file or\nto sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code Reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.859375,
          "content": "# Scenic\n<div style=\"text-align: left\">\n<img align=\"right\" src=\"https://raw.githubusercontent.com/google-research/scenic/main/images/scenic_logo.png\" width=\"200\" alt=\"scenic logo\"></img>\n</div>\n\n*Scenic* is a codebase with a focus on research around attention-based models\nfor computer vision. Scenic has been successfully used to develop\nclassification, segmentation, and detection models for multiple modalities\nincluding images, video, audio, and multimodal combinations of them.\n\nMore precisely, *Scenic* is a (i) set of shared light-weight libraries solving\ntasks commonly encountered tasks when training large-scale (i.e. multi-device,\nmulti-host) vision models; and (ii) several *projects* containing fully\nfleshed out problem-specific training and evaluation loops using these\nlibraries.\n\nScenic is developed in [JAX](https://github.com/jax-ml/jax) and uses\n[Flax](https://github.com/google/flax).\n\n### Contents\n* [What we offer](#what-we-offer)\n* [SOTA models and baselines in Scenic](#sota-models-and-baselines-in-scenic)\n* [Philosophy](#philosophy)\n* [Getting started](#getting-started)\n* [Scenic component design](#scenic-component-design)\n* [Citing Scenic](#citing-scenic)\n\n## What we offer\nAmong others *Scenic* provides\n\n* Boilerplate code for launching experiments, summary writing, logging,\n  profiling, etc;\n* Optimized training and evaluation loops, losses, metrics, bi-partite matchers,\n  etc;\n* Input-pipelines for popular vision datasets;\n* [Baseline models](https://github.com/google-research/scenic/tree/main/scenic/projects/baselines#scenic-baseline-models),\nincluding strong non-attentional baselines.\n\n\n## SOTA models and baselines in *Scenic*\nThere are some SOTA models and baselines in Scenic which were either developed\nusing Scenic, or have been reimplemented in Scenic:\n\nProjects that were developed in Scenic or used it for their experiments:\n\n* [ViViT: A Video Vision Transformer](https://arxiv.org/abs/2103.15691)\n* [OmniNet: Omnidirectional Representations from Transformers](https://arxiv.org/abs/2103.01075)\n* [Attention Bottlenecks for Multimodal Fusion](https://arxiv.org/abs/2107.00135)\n* [TokenLearner: What Can 8 Learned Tokens Do for Images and Videos?](https://arxiv.org/abs/2106.11297)\n* [Exploring the Limits of Large Scale Pre-training](https://arxiv.org/abs/2110.02095)\n* [The Efficiency Misnomer](https://arxiv.org/abs/2110.12894)\n* [Discrete Representations Strengthen Vision Transformer Robustness](https://arxiv.org/abs/2111.10493)\n* [Pyramid Adversarial Training Improves ViT Performance](https://arxiv.org/abs/2111.15121)\n* [VUT: Versatile UI Transformer for Multi-Modal Multi-Task User Interface Modeling](https://arxiv.org/abs/2112.05692)\n* [CLAY: Learning to Denoise Raw Mobile UI Layouts for Improving Datasets at Scale](https://arxiv.org/abs/2201.04100)\n* [Zero-Shot Text-Guided Object Generation with Dream Fields](https://arxiv.org/abs/2112.01455)\n* [Multiview Transformers for Video Recognition](https://arxiv.org/abs/2201.04288)\n* [PolyViT: Co-training Vision Transformers on Images, Videos and Audio](https://arxiv.org/abs/2111.12993)\n* [Simple Open-Vocabulary Object Detection with Vision Transformers](https://arxiv.org/abs/2205.06230)\n* [Learning with Neighbor Consistency for Noisy Labels](https://arxiv.org/abs/2202.02200)\n* [Token Turing Machines](https://arxiv.org/pdf/2211.09119.pdf)\n* [Vid2Seq: Large-Scale Pretraining of a Visual Language Model for Dense Video Captioning](https://arxiv.org/pdf/2302.14115.pdf)\n* [AVATAR: Unconstrained Audiovisual Speech Recognition](https://arxiv.org/abs/2206.07684)\n* [Adaptive Computation with Elastic Input Sequence](https://arxiv.org/abs/2301.13195)\n* [Location-Aware Self-Supervised Transformers for Semantic Segmentation](https://arxiv.org/abs/2212.02400)\n* [How can objects help action recognition?](https://openaccess.thecvf.com/content/CVPR2023/html/Zhou_How_Can_Objects_Help_Action_Recognition_CVPR_2023_paper.html)\n* [Verbs in Action: Improving verb understanding in video-language models](https://arxiv.org/abs/2304.06708)\n* [Unified Visual Relationship Detection with Vision and Language Models](https://arxiv.org/abs/2303.08998)\n* [UnLoc: A Unified Framework for Video Localization Tasks](https://arxiv.org/abs/2308.11062)\n* [REVEAL: Retrieval-Augmented Visual-Language Pre-Training with Multi-Source Multimodal Knowledge Memory](https://arxiv.org/abs/2212.05221)\n* [Audiovisual Masked Autoencoders](https://arxiv.org/abs/2212.05922)\n* [MatFormer: Nested Transformer for Elastic Inference](https://arxiv.org/abs/2310.07707)\n* [Pixel Aligned Language Models](https://arxiv.org/abs/2312.09237)\n* [A Generative Approach for Wikipedia-Scale Visual Entity Recognition](https://arxiv.org/abs/2403.02041)\n* [Streaming Dense Video Captioning](https://arxiv.org/abs/2404.01297)\n* [Dense Video Object Captioning from Disjoint Supervision](https://arxiv.org/abs/2306.11729)\n\nMore information can be found in [projects](https://github.com/google-research/scenic/tree/main/scenic/projects#list-of-projects-hosted-in-scenic).\n\nBaselines that were reproduced in Scenic:\n\n* [(ViT) An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale](https://arxiv.org/abs/2010.11929)\n* [(DETR) End-to-End Object Detection with Transformers](https://arxiv.org/abs/2005.12872)\n* [Deformable DETR: Deformable Transformers for End-to-End Object Detection](https://arxiv.org/abs/2010.04159)\n* [(CLIP) Learning Transferable Visual Models From Natural Language Supervision](https://arxiv.org/abs/2103.00020)\n* [MLP-Mixer: An all-MLP Architecture for Vision](https://arxiv.org/abs/2105.01601)\n* [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/abs/1810.04805)\n* [How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers](https://arxiv.org/abs/2106.10270)\n* [Big Transfer (BiT): General Visual Representation Learning](https://arxiv.org/abs/1912.11370)\n* [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385)\n* [U-Net: Convolutional Networks for Biomedical Image Segmentation](https://arxiv.org/abs/1505.04597)\n* [PCT: Point Cloud Transformer](https://arxiv.org/abs/2012.09688)\n* [Universal Transformers](https://arxiv.org/abs/1807.03819)\n* [PonderNet](https://arxiv.org/abs/2107.05407)\n* [Masked Autoencoders Are Scalable Vision Learners](https://arxiv.org/abs/2111.06377)\n* [Rethinking Attention with Performers](https://arxiv.org/abs/2009.14794)\n* [(CenterNet) Objects as Points](https://arxiv.org/abs/1904.07850)\n* [(SAM) Segment Anything](https://arxiv.org/abs/2304.02643)\n\n\nMore information can be found in [baseline models](https://github.com/google-research/scenic/tree/main/scenic/projects/baselines#scenic-baseline-models).\n\n<a name=\"philosophy\"></a>\n## Philosophy\n*Scenic* aims to facilitate rapid prototyping of large-scale vision models. To\nkeep the code simple to understand and extend we prefer *forking and\ncopy-pasting over adding complexity or increasing abstraction*. Only when\nfunctionality proves to be widely useful across many models and tasks it may be\nupstreamed to Scenic's shared libraries.\n\n\n<a name=\"getting_start\"></a>\n## Getting started\n* See `projects/baselines/README.md` for a walk-through baseline models and\n  instructions on how to run the code.\n* If you would like to contribute to *Scenic*, please check out the\n  [Philisophy](#philosophy), [Code structure](#code_structure) and\n  [Contributing](CONTRIBUTING.md) sections.\n  Should your contribution be a part of the shared libraries, please send us a\n  pull request!\n\n\n### Quickstart\nYou will need Python 3.9 or later. Download the code from GitHub\n\n```shell\n$ git clone https://github.com/google-research/scenic.git\n$ cd scenic\n$ pip install .\n```\n\nand run training for ViT on ImageNet:\n\n```shell\n$ python scenic/main.py -- \\\n  --config=scenic/projects/baselines/configs/imagenet/imagenet_vit_config.py \\\n  --workdir=./\n```\n\nNote that for specific projects and baselines, you might need to install extra\npackages that are mentioned in their `README.md` or `requirements.txt` files.\n\n[Here](https://colab.research.google.com/github/google-research/scenic/blob/main/scenic/common_lib/colabs/scenic_playground.ipynb)\nis also a minimal colab to train a simple feed-forward model using Scenic.\n\n<a name=\"code_structure\"></a>\n## Scenic component design\nScenic is designed to propose different levels of abstraction, to support\nhosting projects that only require changing hyper-parameters by defining config\nfiles, to those that need customization on the input pipeline, model\narchitecture, losses and metrics, and the training loop. To make this happen,\nthe code in Scenic is organized as either _project-level_ code,\nwhich refers to customized code for specific projects or baselines or\n_library-level_ code, which refers to common functionalities and general\npatterns that are adapted by the majority of projects. The project-level\ncode lives in the `projects` directory.\n\n<div align=\"center\">\n<img src=\"https://raw.githubusercontent.com/google-research/scenic/main/images/scenic_design.jpg\" width=\"900\" alt=\"scenic design\"></img>\n</div>\n\n### Library-level code\nThe goal is to keep the library-level code minimal and well-tested and to avoid\nintroducing extra abstractions to support minor use-cases. Shared libraries\nprovided by *Scenic* are split into:\n\n*   `dataset_lib`: Implements IO pipelines for loading and pre-processing data\n    for common Computer Vision tasks and benchmarks (see \"Tasks and Datasets\"\n    section). All pipelines are designed to be scalable and support multi-host\n    and multi-device setups, taking care dividing data among multiple hosts,\n    incomplete batches, caching, pre-fetching, etc.\n*   `model_lib` : Provides\n    *   several abstract model interfaces (e.g. `ClassificationModel` or\n        `SegmentationModel` in `model_lib.base_models`) with task-specific\n        losses and metrics;\n    *   neural network layers in `model_lib.layers`, focusing on efficient\n        implementation of attention and transformer layers;\n    *   accelerator-friendly implementations of bipartite matching\n        algorithms in `model_lib.matchers`.\n*   `train_lib`: Provides tools for constructing training loops and implements\n    several optimized trainers (classification trainer and segmentation trainer)\n    that can be forked for customization.\n*   `common_lib`: General utilities, like logging and debugging modules,\n    functionalities for processing raw data, etc.\n\n### Project-level code\nScenic supports the development of customized solutions for customized tasks and\ndata via the concept of \"project\". There is no one-fits-all recipe for how much\ncode should be re-used by a project. Projects can consist of only configs and\nuse the common models, trainers, task/data that live in library-level code, or\nthey can simply fork any of the mentioned functionalities and redefine, layers,\nlosses, metrics, logging methods, tasks, architectures, as well as training and\nevaluation loops. The modularity of library-level code makes it flexible for\nprojects to fall placed on any spot in the \"run-as-is\" to \"fully customized\"\nspectrum.\n\nCommon baselines such as a ResNet and Vision Transformer (ViT) are implemented\nin the [`projects/baselines`](https://github.com/google-research/scenic/tree/main/scenic/projects/baselines)\nproject. Forking models in this directory is a good starting point for new\nprojects.\n\n\n## Citing Scenic\nIf you use Scenic, you can cite our [white paper](https://openaccess.thecvf.com/content/CVPR2022/html/Dehghani_Scenic_A_JAX_Library_for_Computer_Vision_Research_and_Beyond_CVPR_2022_paper.html).\nHere is an example BibTeX entry:\n\n```bibtex\n@InProceedings{dehghani2021scenic,\n    author    = {Dehghani, Mostafa and Gritsenko, Alexey and Arnab, Anurag and Minderer, Matthias and Tay, Yi},\n    title     = {Scenic: A JAX Library for Computer Vision Research and Beyond},\n    booktitle = {Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)},\n    year      = {2022},\n    pages     = {21393-21398}\n}\n```\n\n_Disclaimer: This is not an official Google product._\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 10.951171875,
          "content": "[MASTER]\n\n# Specify a configuration file.\n#rcfile=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Use multiple processes to speed up Pylint.\njobs=1\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time. See also the \"--disable\" option for examples.\nenable=use-symbolic-message-instead,useless-supression,fixme\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\n\ndisable=\n    attribute-defined-outside-init,\n    duplicate-code,\n    # invalid-name,\n    # missing-docstring,\n    protected-access,\n    too-few-public-methods,\n    # handled by black\n    format\n\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html. You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Put messages in a separate file for each module / package specified on the\n# command line instead of printing them on stdout. Reports (if any) will be\n# written in a file name \"pylint_global.[txt|html]\".\nfiles-output=no\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[SIMILARITIES]\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_$|dummy\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n# List of optional constructs for which whitespace checking is disabled\nno-space-check=trailing-comma,dict-separator\n\n# Maximum number of lines in a module\nmax-module-lines=2000\n\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n\n[BASIC]\n\n# List of builtins function names that should not be used, separated by a comma\nbad-functions=map,filter,input\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Regular expression matching correct function names\nfunction-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for function names\nfunction-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct variable names\nvariable-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for variable names\nvariable-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct constant names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Naming hint for constant names\nconst-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression matching correct attribute names\nattr-rgx=[a-z_][a-z0-9_]{2,}$\n\n# Naming hint for attribute names\nattr-name-hint=[a-z_][a-z0-9_]{2,}$\n\n# Regular expression matching correct argument names\nargument-rgx=[a-z_][a-z0-9_]{2,30}$\n\n# Naming hint for argument names\nargument-name-hint=[a-z_][a-z0-9_]{2,30}$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Naming hint for class attribute names\nclass-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming hint for inline iteration names\ninlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n\n# Regular expression matching correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Naming hint for class names\nclass-name-hint=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Naming hint for module names\nmodule-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression matching correct method names\nmethod-rgx=[a-z_][a-z0-9_]{2,}$\n\n# Naming hint for method names\nmethod-name-hint=[a-z_][a-z0-9_]{2,}$\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=__.*__\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# List of decorators that define properties, such as abc.abstractproperty.\nproperty-classes=abc.abstractproperty\n\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis\nignored-modules=\n\n# List of classes names for which member attributes should not be checked\n# (useful for classes with attributes dynamically set).\nignored-classes=SQLObject, optparse.Values, thread._local, _thread._local\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=REQUEST,acl_users,aq_parent\n\n# List of decorators that create context managers from functions, such as\n# contextlib.contextmanager.\ncontextmanager-decorators=contextlib.contextmanager\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=10\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=25\n\n# Maximum number of return / yield for function / method body\nmax-returns=11\n\n# Maximum number of branch for function / method body\nmax-branches=26\n\n# Maximum number of statements in function / method body\nmax-statements=100\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=11\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=25\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp,__post_init__\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n\n[IMPORTS]\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=regsub,TERMIOS,Bastion,rexec\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "scenic",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.2890625,
          "content": "# Copyright 2024 The Scenic Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"setup.py for Scenic.\n\nInstall for development:\n\n  pip intall -e . .[testing]\n\"\"\"\n\nimport os\nimport urllib.request\n\nfrom setuptools import Command\nfrom setuptools import find_packages\nfrom setuptools import setup\nfrom setuptools.command import install\n\nSIMCLR_DIR = \"simclr/tf2\"\nDATA_UTILS_URL = \"https://raw.githubusercontent.com/google-research/simclr/master/tf2/data_util.py\"\n\n\nclass DownloadSimCLRAugmentationCommand(Command):\n  \"\"\"Downloads SimCLR data_utils.py as it's not built into an egg.\"\"\"\n  description = __doc__\n  user_options = []\n\n  def initialize_options(self):\n    pass\n\n  def finalize_options(self):\n    pass\n\n  def run(self):\n    build_cmd = self.get_finalized_command(\"build\")\n    dist_root = os.path.realpath(build_cmd.build_lib)\n    output_dir = os.path.join(dist_root, SIMCLR_DIR)\n    if not os.path.exists(output_dir):\n      os.makedirs(output_dir)\n    output_path = os.path.join(output_dir, \"data_util.py\")\n    downloader = urllib.request.URLopener()\n    downloader.retrieve(DATA_UTILS_URL, output_path)\n\n\nclass InstallCommand(install.install):\n\n  def run(self):\n    self.run_command(\"simclr_download\")\n    install.install.run(self)\n\n\ninstall_requires_projects = [\n    \"ott-jax>=0.2.0\",\n    \"sklearn\",\n    \"lingvo==0.12.6\",\n    \"seaborn>=0.11.2\",\n    \"dmvr @ git+https://github.com/google-deepmind/dmvr.git\",\n]\n\ninstall_requires_core = [\n    \"absl-py>=1.0.0\",\n    \"numpy>=1.12\",\n    \"jax>=0.4.3\",\n    \"jaxlib>=0.4.3\",\n    \"flax>=0.4.0\",\n    \"ml-collections>=0.1.1\",\n    \"tensorflow>=2.7\",\n    \"immutabledict>=2.2.1\",\n    \"clu>=0.0.6\",\n    \"tensorflow-datasets\",\n    \"optax @ git+https://github.com/google-deepmind/optax.git@main\",\n]\n\ntests_require = [\n    \"pytest\",\n    \"shapely\",\n] + install_requires_projects\n\nsetup(\n    name=\"scenic\",\n    version=\"0.0.1\",\n    description=(\"A Jax Library for Computer Vision Research and Beyond.\"),\n    author=\"Scenic Authors\",\n    author_email=\"no-reply@google.com\",\n    long_description=open(\"README.md\").read(),\n    long_description_content_type=\"text/markdown\",\n    url=\"http://github.com/google-research/scenic\",\n    license=\"Apache 2.0\",\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=install_requires_core,\n    cmdclass={\n        \"simclr_download\": DownloadSimCLRAugmentationCommand,\n        \"install\": InstallCommand,\n    },\n    tests_require=tests_require,\n    extras_require={\n        \"testing\": tests_require,\n    },\n    classifiers=[\n        \"Development Status :: 1 - Beta\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: Apache Software License\",\n        \"Programming Language :: Python\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    keywords=\"Scenic\",\n)\n"
        }
      ]
    }
  ]
}