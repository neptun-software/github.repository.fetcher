{
  "metadata": {
    "timestamp": 1736559914423,
    "page": 675,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "absolute-quantum/cats-blender-plugin",
      "stars": 3588,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3955078125,
          "content": "__pycache__\ncats blender plugin_updater\ncats_updater\n.idea\n*.pyc\n.cache\ntmp\n*.blend\n*.blend1\ntests/armatures/*.png\nresources/downloads\nresources/settings.json\nresources/dictionary_google.json\nresources/google-response.txt\nresources/google-response-readable.txt\nresources/ignore_version.txt\nresources/no_auto_ver_check.txt\nresources/icons/supporters/**\nresources/supporters.json\n.coverage\nmmd_tools_local2\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.45703125,
          "content": "# MIT License\n\n# Copyright (c) 2017 GiveMeAllYourCats\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the 'Software'), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nlanguage: python\ncache:\n  apt: true\n  pip: true\n\npython:\n  # Use the Python version that comes with blender 2.79\n  - \"3.5.3\"\n\nbefore_install:\n  - sudo apt-get update -qq\n  # install blender from official sources.\n  # This will most propably install an outdated blender version,\n  # but it will resolve all system dependencies blender has to be able to run.\n  - sudo apt-get install blender\n  - sudo apt-get install unzip\n\ninstall:\n  # Then update blender\n  - mkdir tmp && cd tmp\n  - wget https://download.blender.org/release/Blender2.79/blender-2.79-linux-glibc219-x86_64.tar.bz2\n  - tar jxf blender-2.79-linux-glibc219-x86_64.tar.bz2\n  - mv blender-2.79-linux-glibc219-x86_64 blender\n\n  - cd ..\n\n  # Make sure to install mmd_tools plugin\n  - wget https://github.com/powroupi/blender_mmd_tools/archive/dev_test.zip\n  - unzip dev_test.zip\n  - cd blender_mmd_tools-dev_test\n  - mv mmd_tools/ ../tmp/blender/2.79/scripts/addons\n\n  - cd ..\n\n  # make sure to install cats plugin\n  - sudo ln -s ${PWD} ${PWD}/tmp/blender/2.79/scripts/addons/cats\n\n# Start unit testing\nscript:\n  - python tests/run.py -b ./tmp/blender/blender -c True\n\nnotifications:\n  webhooks:\n    urls:\n      - http://159.89.91.52:7778/webhook\n    on_success: always # default: always\n    on_failure: always # default: always\n    on_start: always   # default: never\n    on_cancel: always # default: always\n    on_error: always # default: always\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2017 GiveMeAllYourCats\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.3115234375,
          "content": "# Cats Blender Plugin (0.19.0)\n\nA tool designed to shorten steps needed to import and optimize models into VRChat.\nCompatible models are: MMD, XNALara, Mixamo, Source Engine, Unreal Engine, DAZ/Poser, Blender Rigify, Sims 2, Motion Builder, 3DS Max and potentially more\n\nWith Cats it takes only a few minutes to upload your model into VRChat.\nAll the hours long processes of fixing your models are compressed into a few functions!\n\nSo if you enjoy how this plugin saves you countless hours of work consider supporting us through Patreon.\nThere are a lot of perks like having your name inside the plugin!\n\n[![](https://i.imgur.com/BFIald5.png)](https://www.patreon.com/catsblenderplugin)\n\n#### Download here: [Cats Blender Plugin](https://github.com/michaeldegroot/cats-blender-plugin/archive/master.zip)\n\n## Features\n - Optimizing model with one click!\n - Creating lip syncing\n - Creating eye tracking\n - Automatic decimation (while keeping shapekeys)\n - Creating custom models easily\n - Creating texture atlas\n - Creating root bones for Dynamic Bones\n - Optimizing materials\n - Translating shape keys, bones, materials and meshes\n - Merging bone groups to reduce overall bone count\n - Auto updater\n\n*More to come!*\n\n## Discord\nJoin our Discord to report errors, suggestions and make comments!\n\n**Discord: https://discord.gg/f8yZGnv**\n\n## Requirements\n - Blender **2.79** or **2.80** or above (run as administrator is recommended)\n   - mmd_tools is **not required**! Cats comes pre-installed with it!\n - If you have custom Python installed which Blender might use, you need to have Numpy installed\n\n## Installation\n - Download the plugin: **[Cats Blender Plugin](https://github.com/michaeldegroot/cats-blender-plugin/archive/master.zip)**\n   - **Important: Do NOT extract the downloaded zip! You will need the zip file during installation!**\n - Install the addon in blender like so:\n   - *This shows Blender 2.79. In Blender 2.80+ go to Edit > Preferences > Add-ons. Also you don't need to save the user settings there.*\n\n![](https://i.imgur.com/eZV1zrs.gif)\n\n - Check your 3d view and there should be a new menu item called **CATS** ....w00t\n   - Since Blender 2.80 the CATS tab is on the right in the menu that opens when pressing 'N'\n\n![](https://i.imgur.com/pJfVsho.png)\n\n - If you need help figuring out how to use the tool (very outdated):\n\n[![VRChat - Cat's Blender Plugin Overview](https://img.youtube.com/vi/0gu0kEj2xwA/0.jpg)](https://www.youtube.com/watch?v=0gu0kEj2xwA)\n\nSkip the step where he installs \"mmd_tools\" in the video below, it's not needed anymore! (also very outdated)\n\n[![VRChat - Importing an MMD to VRChat Megatutorial!](https://img.youtube.com/vi/7P0ljQ6hU0A/0.jpg)](https://www.youtube.com/watch?v=7P0ljQ6hU0A)\n\n## Code contributors:\n - Hotox\n - Shotariya\n - Neitri\n - Kiraver\n - Jordo\n - Ruubick\n - feilen\n\n\n## Model\n![](https://i.imgur.com/dYYAfb4.png)\n\nThis tries to completely fix your model with one click.\n\n##### Import/Export Model\n- Imports a model of the selected type with the optimal settings\n- Exports a model as an .fbx with the optimal settings\n\n##### Fix Model\n- Fixes your model automatically by:\n  - Reparenting bones\n  - Removing unnecessary bones\n  - Renaming and translating objects and bones\n  - Mixing weight paints\n  - Rotating the hips\n  - Joining meshes\n  - Removing rigidbodies, joints and bone groups\n  - Removing bone constraints\n  - Deleting unused vertex groups\n  - Using the correct shading\n  - Making it compatible with Full Body Tracking\n  - Combining similar materials\n\n##### Start Pose Mode\n- Lets you test how bones will move.\n\n##### Pose to Shape Key\n- Saves your current pose as a new shape key.\n\n##### Apply as Rest Pose\n- Applies the current pose position as the new rest position. This saves the shape keys and repairs ones that were broken due to scaling\n\n\n## Model Options\n\n![](https://i.imgur.com/ZPj2VUJ.png)\n\n##### Translation\n- Translate certain entities from any japanese to english.\nThis uses an internal dictionary and Google Translate.\n\n##### Separate by material / loose parts / shapes\n- Separates a mesh by materials or loose parts or by whether or not the mesh is effected by a shape key\n\n##### Join meshes\n- Joins all/selected meshes together\n\n##### Merge Weights\n- Deletes the selected bones and adds their weight to their respective parents\n\n##### Delete Zero Weight Bones\n- Cleans up the bones hierarchy, deleting all bones that don't directly affect any vertices\n\n##### Delete Constraints\n- Removes constrains between bones causing specific bone movement as these are not used by VRChat\n\n##### Recalculate Normals\n- Makes normals point inside of the selected mesh\n- Don't use this on good looking meshes as this can screw them up\n\n##### Flip Normals\n- Flips the direction of the faces' normals of the selected mesh.\n\n##### Apply Transformations\n- Applies the position, rotation and scale to the armature and its meshes.\n\n##### Remove Doubles\n- Merges duplicated faces and vertices of the selected meshes.\n\n\n## Custom Model Creation\n\n![](https://i.imgur.com/szIWglS.png)\n![](https://i.imgur.com/04O63q1.png)\n\n**This makes creating custom avatars a breeze!**\n\n##### Merge Armatures\n- Merges the selected armature into the selected base armature.\n- **How to use:**\n  - Use \"Fix Model\" on both armatures\n    - Select the armature you want to fix in the list above the Fix Model button\n    - Ignore the \"Bones are missing\" warning if one of the armatures is incomplete (e.g hair only)\n    - If you don't want to use \"Fix Model\" make sure that the armature follows the CATS bone structure (https://i.imgur.com/F5KEt0M.png)\n    - DO NOT delete any main bones by yourself! CATS will merge them and delete all unused bones afterwards\n  - Now you have two options:\n    - Only move the mesh:\n      - Uncheck the checkbox \"Apply Transforms\"\n      - Move the mesh (and only the mesh!) of the merge armature to the desired position\n        - You can use Move, Scale and Rotate\n        - CATS will position the bones according to the mesh automatically\n    - OR move the armature (and with it the mesh):\n      - Check the checkbox \"Apply Transforms\"\n      - Move the armature to the desired position\n        - You can use Move, Scale and Rotate\n        - Make sure that both meshes and armatures are at their correct positions as they will stay exactly like this\n    - If you want to merge multiple objects from the same model it is often better to duplicate the armature for each of them and merge them individually\n  - Select the base armature and the armature you want to merge into the base armature in the panel\n  - If CATS can't detect the bone structure automatically: select a bone you want to attach the new armature to\n    - E.g.: For a hair armature select \"Head\" as the bone\n  - Press the \"Merge Armatures\" button -> Done!\n\n##### Attach Mesh to Armature\n- Attaches the selected mesh to the selected armature.\n- **How to use:**\n  - Move the mesh to the desired position\n    - You can use Move, Scale and Rotate\n    - INFO: The mesh will only be assigned to the selected bone\n    - E.g.: A jacket won't work, because it requires multiple bones.\n    - E.g.: A ring on a finger works perfectly, because the ring only needs one bone to move with (the finger bone)\n  - Select the base armature and the mesh you want to attach to the base armature in the panel\n  - Select the bone you want to attach the mesh to in the panel\n  - Press the \"Attach Mesh\" button -> Done!\n\n##### Support us:\n- We worked hard on this feature. If you like it consider supporting us, it helps a lot!\n\n[![](https://i.imgur.com/BFIald5.png)](https://www.patreon.com/catsblenderplugin)\n\n\n## Decimation\n\n![](https://i.imgur.com/5u3teLp.png)\n\n**Decimate your model automatically.**\n\n##### Smart Decimation\n- This will decimate all meshes while keeping every shapekey.\n\n##### Save Decimation\n- This will only decimate meshes with no shape keys.\n\n##### Half Decimation\n- This will only decimate meshes with less than 4 shape keys as those are often not used.\n\n##### Full Decimation\n- This will decimate your whole model deleting all shape keys in the process.\n\n##### Custom Decimation\n- This lets you choose the meshes and shape keys that should not be decimated.\n\n\n## Eye Tracking\n![](https://i.imgur.com/yw8INDO.png)\n![](https://i.imgur.com/VHw73zM.png)\n\n**Eye tracking is used to artificially track someone when they come close to you.**\nIt's a good idea to check the eye movement in the testing tab after this operation to check the validity of the automatic eye tracking creation.\n\n##### Disable Eye Blinking\n- Disables eye blinking. Useful if you only want eye movement.\n\n##### Disable Eye Movement\n- Disables eye movement. Useful if you only want blinking. **IMPORTANT:** Do your decimation first if you check this!\n\n##### Eye Movement Speed\n- Configure eye movement speed\n\n\n## Visemes (Lip Sync)\n![](https://i.imgur.com/muM2PTS.png)\n\n**Mouth visemes are used to show more realistic mouth movement in-game when talking over the microphone.**\nThe script generates 15 shape keys from the 3 shape keys you specified. It uses the mouth visemes A, OH and CH to generate this output.\n\n\n## Bone parenting\n\n![](https://i.imgur.com/mgadT4R.png)\n\n**Useful for Dynamic Bones where it is ideal to have one root bone full of child bones.**\nThis works by checking all bones and trying to figure out if they can be grouped together, which will appear in a list for you to choose from. After satisfied with the selection of this group you can then press 'Parent bones' and the child bones will be parented to a new bone named RootBone_xyz\n\n##### To parent\n- List of bones that look like they could be parented together to a root bone. Select a group of bones from the list and press \"Parent bones\"\n\n##### Refresh list\n- Clears the group bones list cache and rebuild it, useful if bones have changed or your model\n\n##### Parent bones\n- Starts the parent process\n\n\n## Texture atlas\n![](https://i.imgur.com/XcoF0Ek.png)\n\n**Texture atlas is the process of combining multiple textures into one to drastically reduce draw calls and therefore make your model much more performant**\n\n##### Create Atlas\n- Combines all selected materials into one texture. If no material list is generated it will combine all materials.\n\n##### Generate Material List\n- Lists all materials of the current model and lets you select which ones you want to combine.\n\n### Useful Tips:\n- Split transparent and non-transparent textures into separate atlases to avoid transparency issues\n- Make sure that the created textures are not too big, because Unity will downscale them to 2048x2048. \n  Split them across multiple atlases or reduce the individual texture sizes. This can be easily done in the MatCombiner tab.\n- You can tell Unity to use up to 8k textures.\n  Do so by selecting the texture and then choose a different Max Size and/or Compression in the inspector:\n  https://i.imgur.com/o01T4Gb.png\n\n\n## Bone merging\n\n![](https://i.imgur.com/FXwOvho.png)\n\n**Lets you reduce overall bone count in a group set of bones.**\nThis works by checking all bones and trying to figure out if they can be grouped together, which will appear in a list for you to choose from. After satisfied with the selection of this group you can then set a percentage value how much bones you would like to merge together in itself and press 'Merge bones'\n\n##### Refresh list\n- Clears the group bones list cache and rebuild it, useful if bones have changed or your model\n\n##### Merge bones\n- Starts the merge process\n\n\n## Bake\n\n![](https://user-images.githubusercontent.com/1109288/97830517-147d1500-1c82-11eb-8b20-feba732ad672.png)<img src=\"https://cdn.discordapp.com/attachments/790488253764730920/791146826774216744/unknown.png\" height=\"735\" />\n\n**This is a non-destructive way to instantly produce a optimized/Quest variant of (almost) any avatar!**\n\nFor more information please visit the **[Bake Panel Wiki Page](https://github.com/GiveMeAllYourCats/cats-blender-plugin/wiki/Bake)**.\n\n\n## Shape Key\n\n![](https://i.imgur.com/LgFK4KO.png)\n\n**Apply Shape Key as Basis**\n- Applies the selected shape key as the new Basis and creates a reverted shape key from the selected one.\n\n\n## Settings and Updates\n\n![](https://i.imgur.com/hYy7gD8.png)\n\n**This plugin has an auto updater.**\nIt checks for a new version automatically once every day.\n\n---\n\n## Changelog\n\n#### 0.19.0\n- **Fully compatible with Blender 2.93**\n- **Translations:**\n  - **Added Korean translation!**\n    - Cats is now translated into Korean by a large portion\n    - To use it, simply change your Blender language to Korean and then restart Blender or select it in the Cats Settings\n    - Thanks to **Siromori** for contributing the translation! <3\n  - Added Cats Ui Language setting\n    - This lets you choose in which language Cats should be displayed\n    - Setting it to \"auto\" will choose the current Blender language\n  - Added button to download the latest Cats Translations\n    - This feature is for translators to test their translations in the plugin\n    - If you want to help to translate Cats into any language, please let me (Hotox) know in our Discord\n- **Model Options:**\n  - Added \"Connect Bones\" button\n  - Added options to keep merged bones and to merge the bones of visible meshes only\n- **Custom Model Creation:**\n  - Reworked \"Attach Mesh\" feature, it is much more reliable now\n- **General:**\n  - Fixed translation errors\n  - Updated mmd_tools\n- **Bake: (by feilen)**\n  - Emission influence baking: fake realtime lighting based on your emissive channel, quest-compatible!\n  - 'Manual' reprojection mode for Bake: creating new UV maps called 'Target' will allow you to re-bake to a specific layout.\n  - 'Optimize static shapekeys' option\n    - Splits your mesh into two skinned meshes, one with all shapekey-influenced geometry, \n      one with the rest (and fixes the normals in place). Significantly improves GPU performance, especially when a lot of shapekeys are in effect. \n      Needs the lighting anchor point in Unity to be set to the armature Hips on both, or you'll get lighting artifacts.\n  - Introduce 'BakeFixer.cs', which is a run-time unity script that hopefully should do the lighting work for you.\n  - 'Ignore hidden objects' option\n    - When baking, this will ignore any objects you currently have hidden, making it easier to create different versions of your avatar.\n  - Apply Current Shapekey Mix option \n    - Sets your basis to whatever current mix of shapekeys you have. Always-on shapekeys are terrible for performance, \n      so if you have some that are only intended to customize the character without updates, this will help with that.\n  - '_bake' shapekeys: any shapekey with '_bake' at the end will be applied and completely removed, allowing the static shapekeys option to work better. \n    If you're an avatar creator distributing bases, this is recommended for character customization keys!\n  - Misc: Updated defaults to be in line with updated Quest limits.\n\n\n#### 0.18.0\n- **Added Bake Panel!**\n  - This is a non-destructive way to produce an optimized variant of (almost) any avatar!\n  - Full credit goes to **feilen**! Thanks so much for this awesome feature <3\n  - Check out the wiki for more information: https://github.com/GiveMeAllYourCats/cats-blender-plugin/wiki/Bake\n- **Added Smart Decimation!**\n  - This lets you decimate without loosing any shapekeys!\n  - Full credit goes to **feilen**! Tons of thanks for this awesome feature as well <3\n- **Added Japanese translation!**\n  - Cats is now almost fully translated into Japanese\n  - To use it simply change your Blender language to Japanese and then restart Blender\n  - Full credit goes to **Jordo** and **Ruuubick**! Thank you so much <3\n  - If you want to help translating Cats into any language, please us know!\n- **General:**\n  - Cats is now fully compatible with Blender 2.90 and 2.91\n  - Added \"Show mmd_tools tabs\" option to Settings\n    - This allows you show and hide the \"MMD\" and \"Misc\" tabs added by the mmd_tools plugin\n  - Added button to \"Start/Stop Pose Mode\" which starts/stops pose mode without resetting the current pose\n  - Changed link to a new vrm importer since the old one dropped support\n  - Fixed Google Translations no longer working\n  - Fixed bug in \"Apply as Rest Pose\" and \"Pose to Shape Key\" in Blender 2.90\n  - More fixes for Blender 2.90\n  - NOTE: Using Cats in Blender 2.90+ on Ubuntu might cause Blender to crash on load (caused by mmd_tools)\n    - To fix this use a Blender version prior to 2.90 or try updating your drivers\n\n#### 0.17.0\n- **Cats is now fully compatible with Blender 2.83!**\n  - *It was compatible with 2.82 all long*\n- **Fix Model:**\n  - Added \"Keep Twist Bones\" option to Fix Model\n    - This will keep any bone containing 'Twist'\n  - Added \"Fix MMD Twist Bones\" option to Fix Model\n    - This will apply a fix to make the MMD arm twist bones usable **(Thanks Rokk!)**\n    - You do not need to enable \"Keep Twist Bones\" for this to work\n  - Added \"Remove Rigidbodies and Joints\" option to Fix Model\n    - This is solely intended for our non-VRChat users\n  - Added compatibility to more models\n  - Disabling the option \"Remove Zero Weight Bones\" now also keeps unused vertex groups\n- **Importer:**\n  - Imported meshes from VRM files now get automatically parented to their armature\n  - Imported armatures now always show their bones in front and in wire mode\n  - Fixed export warning being empty\n  - Fixed importer error when the FBX importer was not enabled\n  - Fixed importer error when a zip file contained another zip file\n  - When importing a model, objects of a new scene now only get deleted if all three of them are present\n- **Custom Model Creation:**\n  - Added \"Remove Zero Weight Bones\" option to Merge Armatures\n- **Decimation:**\n  - Added \"Remove Doubles\" option\n- **General:**\n  - Fixed some bugs\n  - Fixed objects getting unhidden when doing any cats operation in 2.80+\n  - Updated mmd_tools\n\nRead the full changelog [here](https://github.com/michaeldegroot/cats-blender-plugin/releases).\n\n\n## Roadmap\n - MOAR updates on the armature code\n - Texture translation should have an option to rename the filename also\n - Automatic lower lid creation for eye tracking\n - Manual bone selection button for root bones\n - Full body tracking proportion adjustments\n\n\n## Feedback\nDo you love this plugin or have you found a bug?\nPost a response in this thread or send your feedback to the official discord server of the plugin for real-time communication: https://discord.gg/f8yZGnv and look for people with the developer role ;)\n\n\n## Support us\nIf you enjoy how this plugin saves you countless hours of work consider supporting us through Patreon:\n\n[![](https://i.imgur.com/BFIald5.png)](https://www.patreon.com/catsblenderplugin)\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 12.5595703125,
          "content": "# MIT License\n\n# Copyright (c) 2017 GiveMeAllYourCats\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the 'Software'), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\n# Code author: GiveMeAllYourCats\n# Repo: https://github.com/michaeldegroot/cats-blender-plugin\n# Edits by: GiveMeAllYourCats, Hotox\n\nbl_info = {\n    'name': 'Cats Blender Plugin',\n    'category': '3D View',\n    'author': 'GiveMeAllYourCats & Hotox',\n    'location': 'View 3D > Tool Shelf > CATS',\n    'description': 'A tool designed to shorten steps needed to import and optimize models into VRChat',\n    'version': (0, 19, 0),  # Has to be (x, x, x) not [x, x, x]!! Only change this version and the dev branch var right before publishing the new update!\n    'blender': (2, 80, 0),\n    'wiki_url': 'https://github.com/michaeldegroot/cats-blender-plugin',\n    'tracker_url': 'https://github.com/michaeldegroot/cats-blender-plugin/issues',\n    'warning': '',\n}\ndev_branch = False\n\nimport os\nimport sys\n\n# Append files to sys path\nfile_dir = os.path.join(os.path.dirname(__file__), 'extern_tools')\nif file_dir not in sys.path:\n    sys.path.append(file_dir)\n\nimport shutil\nimport pathlib\nimport requests\n\nfrom . import globs\n\n# Check if cats is reloading or started fresh\nif \"bpy\" not in locals():\n    import bpy\n    is_reloading = False\nelse:\n    is_reloading = True\n\n# Load or reload all cats modules\nif not is_reloading:\n    # This order is important\n    import mmd_tools_local\n    from . import updater\n    from . import tools\n    from . import ui\n    from . import extentions\nelse:\n    import importlib\n    importlib.reload(updater)\n    importlib.reload(mmd_tools_local)\n    importlib.reload(tools)\n    importlib.reload(ui)\n    importlib.reload(extentions)\n\nfrom .tools import translations\nfrom .tools.translations import t\n\n\n# How to update mmd_tools: (outdated, no longer used)\n# Delete mmd_tools_local folder\n# Paste mmd_tools folder into project\n# Refactor folder name \"mmd_tools\" to \"mmd_tools_local\"\n# Move mmd_tools_local folder into extern_tools folder\n# Search for \"show_backface_culling\" and set it to False in view.py\n# Done\n\n# How to update google_trans_new:\n# In google_trans.py comment out everything that has to do with urllib3\n# This is done because 3.5 doesn't have urllib3 by default and it is only used\n# to suppress debug logs in the console\n# Done\n\n# How to update googletrans:  (outdated since a new googletrans is used Todo remove this)\n# in the gtoken.py on line 57 update this line to include \"verify=False\":\n# r = self.session.get(self.host, verify=False)\n# In client.py on line 42 remove the Hyper part, it's not faster at all!\n# Just comment it out.\n# Also see pull request for TKK change\n# Also wm progress in client.py\n# Done\n\n# How to set up PyCharm with Blender:\n# https://b3d.interplanety.org/en/using-external-ide-pycharm-for-writing-blender-scripts/\n\n\ndef remove_corrupted_files():\n    to_remove = [\n        'googletrans',\n        'mmd_tools_local',\n        'extern_tools',\n        'resources',\n        'tests',\n        'tools',\n        'ui',\n        '.gitignore',\n        '.travis.yml',\n        'LICENSE',\n        'README.md',\n        '__init__.py',\n        'addon_updater.py',\n        'addon_updater_ops.py',\n        'extensions.py',\n        'globs.py',\n        'updater.py',\n    ]\n\n    no_perm = False\n    os_error = False\n    wrong_path = False\n    faulty_installation = False\n    main_dir = str(pathlib.Path(os.path.dirname(__file__)).resolve())\n\n    if main_dir.endswith('addons'):\n        print(os.path.dirname(__file__))\n        print(main_dir)\n        print('Wrong installation path')\n        wrong_path = True\n    else:\n        main_dir = str(pathlib.Path(os.path.dirname(__file__)).parent.resolve())\n\n    # print('Checking for CATS files in the addon directory:\\n' + main_dir)\n    files = [f for f in os.listdir(main_dir) if os.path.isfile(os.path.join(main_dir, f))]\n    folders = [f for f in os.listdir(main_dir) if os.path.isdir(os.path.join(main_dir, f))]\n\n    for file in files:\n        if file in to_remove:\n            file_path = os.path.join(main_dir, file)\n            try:\n                os.remove(file_path)\n                faulty_installation = True\n                print('REMOVED', file)\n            except PermissionError:\n                no_perm = True\n                print(\"Permissions: Failed to remove file \" + file)\n            except OSError:\n                os_error = True\n                print(\"OS: Failed to remove file \" + file)\n\n    for folder in folders:\n        if folder in to_remove:\n            folder_path = os.path.join(main_dir, folder)\n            try:\n                shutil.rmtree(folder_path)\n                faulty_installation = True\n                print('REMOVED', folder)\n            except PermissionError:\n                no_perm = True\n                print(\"Permissions: Failed to remove folder \" + folder)\n            except OSError:\n                os_error = True\n                print(\"Failed to remove folder \" + folder)\n\n    if no_perm:\n        unregister()\n        sys.tracebacklimit = 0\n        raise ImportError(t('Main.error.restartAdmin'))\n\n    if os_error:\n        unregister()\n        sys.tracebacklimit = 0\n        message = t('Main.error.deleteFollowing')\n\n        for folder in folders:\n            if folder in to_remove:\n                message += \"\\n- \" + os.path.join(main_dir, folder)\n\n        for file in files:\n            if file in to_remove:\n                message += \"\\n- \" + os.path.join(main_dir, file)\n\n        raise ImportError(message)\n\n    if wrong_path:\n        unregister()\n        sys.tracebacklimit = 0\n        raise ImportError(t('Main.error.installViaPreferences'))\n\n    if faulty_installation:\n        unregister()\n        sys.tracebacklimit = 0\n        raise ImportError(t('Main.error.restartAndEnable'))\n\n\ndef check_unsupported_blender_versions():\n    # Don't allow Blender versions older than 2.79\n    if bpy.app.version < (2, 79):\n        unregister()\n        sys.tracebacklimit = 0\n        raise ImportError(t('Main.error.unsupportedVersion'))\n\n    # Versions 2.80.0 to 2.80.74 are beta versions, stable is 2.80.75\n    if (2, 80, 0) <= bpy.app.version < (2, 80, 75):\n        unregister()\n        sys.tracebacklimit = 0\n        raise ImportError(t('Main.error.beta2.80'))\n\n\ndef set_cats_version_string():\n    version = bl_info.get('version')\n    version_temp = []\n    version_str = ''\n\n    for n in version:\n        version_temp.append(n)\n\n    if len(version_temp) > 0:\n        # if in dev version, increase version\n        if dev_branch:\n            version_temp[len(version_temp)-1] += 1\n\n        # Convert version to string\n        version_str += str(version_temp[0])\n        for index, i in enumerate(version_temp):\n            if index == 0:\n                continue\n            version_str += '.' + str(version_temp[index])\n\n    # Add -dev if in dev version\n    if dev_branch:\n        version_str += '-dev'\n\n    return version_str\n\n\ndef register():\n    print(\"\\n### Loading CATS...\")\n\n    # Check for unsupported Blender versions\n    check_unsupported_blender_versions()\n\n    # Check for faulty CATS installations\n    remove_corrupted_files()\n\n    # Set cats version string\n    version_str = set_cats_version_string()\n\n    # Register Updater and check for CATS update\n    updater.register(bl_info, dev_branch, version_str)\n\n    # Set some global settings, first allowed use of globs\n    globs.dev_branch = dev_branch\n    globs.version_str = version_str\n\n    # Load settings and show error if a faulty installation was deleted recently\n    try:\n        tools.settings.load_settings()\n    except FileNotFoundError:\n        sys.tracebacklimit = 0\n        raise ImportError(t('Main.error.restartAndEnable_alt'))\n\n    # if not tools.settings.use_custom_mmd_tools():\n    #     bpy.utils.unregister_module(\"mmd_tools\")\n\n    # Load mmd_tools\n    try:\n        mmd_tools_local.register()\n    except NameError:\n        print('Could not register local mmd_tools')\n    except AttributeError:\n        print('Could not register local mmd_tools')\n    except ValueError:\n        print('mmd_tools is already registered')\n\n    # Register all classes\n    count = 0\n    tools.register.order_classes()\n    for cls in tools.register.__bl_classes:\n        try:\n            bpy.utils.register_class(cls)\n            count += 1\n        except ValueError:\n            pass\n    # print('Registered', count, 'CATS classes.')\n    if count < len(tools.register.__bl_classes):\n        print('Skipped', len(tools.register.__bl_classes) - count, 'CATS classes.')\n\n    # Register Scene types\n    extentions.register()\n\n    # Load supporter and settings icons and buttons\n    tools.supporter.load_other_icons()\n    tools.supporter.load_supporters()\n    tools.supporter.register_dynamic_buttons()\n\n    # Load the dictionaries and check if they are found.\n    globs.dict_found = tools.translate.load_translations()\n\n    # Set preferred Blender options\n    if hasattr(tools.common.get_user_preferences(), 'system') and hasattr(tools.common.get_user_preferences().system, 'use_international_fonts'):\n        tools.common.get_user_preferences().system.use_international_fonts = True\n    elif hasattr(tools.common.get_user_preferences(), 'view') and hasattr(tools.common.get_user_preferences().view, 'use_international_fonts'):\n        tools.common.get_user_preferences().view.use_international_fonts = True\n    else:\n        pass  # From 2.83 on this is no longer needed\n    tools.common.get_user_preferences().filepaths.use_file_compression = True\n    bpy.context.window_manager.addon_support = {'OFFICIAL', 'COMMUNITY', 'TESTING'}\n\n    # Add shapekey button to shapekey menu\n    if hasattr(bpy.types, 'MESH_MT_shape_key_specials'):  # pre 2.80\n        bpy.types.MESH_MT_shape_key_specials.append(tools.shapekey.addToShapekeyMenu)\n    else:\n        bpy.types.MESH_MT_shape_key_context_menu.append(tools.shapekey.addToShapekeyMenu)\n\n    # Disable request warning when using google translate\n    requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)\n\n    # Monkey patch fbx exporter to include empty shapekeys\n    tools.fbx_patch.start_patch_fbx_exporter_timer()\n\n    # Apply the settings after a short time, because you can't change checkboxes during register process\n    tools.settings.start_apply_settings_timer()\n\n    print(\"### Loaded CATS successfully!\\n\")\n\n\ndef unregister():\n    print(\"### Unloading CATS...\")\n\n    # Unregister updater\n    updater.unregister()\n\n    # Register unloaded mmd_tools tabs if they are hidden to avoid issues when unloading mmd_tools\n    if not bpy.context.scene.show_mmd_tabs:\n        tools.common.toggle_mmd_tabs(shutdown_plugin=True)\n\n    # Unload mmd_tools\n    try:\n        mmd_tools_local.unregister()\n    except NameError:\n        print('mmd_tools was not registered')\n        pass\n    except AttributeError:\n        print('Could not unregister local mmd_tools')\n        pass\n    except ValueError:\n        print('mmd_tools was not registered')\n        pass\n\n    # Unload all classes in reverse order\n    count = 0\n    for cls in reversed(tools.register.__bl_ordered_classes):\n        try:\n            bpy.utils.unregister_class(cls)\n            count += 1\n        except ValueError:\n            pass\n        except RuntimeError:\n            pass\n    print('Unregistered', count, 'CATS classes.')\n\n    # Unregister all dynamic buttons and icons\n    tools.supporter.unregister_dynamic_buttons()\n    tools.supporter.unload_icons()\n\n    # Remove shapekey button from shapekey menu\n    try:\n        bpy.types.MESH_MT_shape_key_specials.remove(tools.shapekey.addToShapekeyMenu)\n    except AttributeError:\n        print('shapekey button was not registered')\n        pass\n\n    # Remove folder from sys path\n    if file_dir in sys.path:\n        sys.path.remove(file_dir)\n\n    print(\"### Unloaded CATS successfully!\\n\")\n\n\nif __name__ == '__main__':\n    register()\n"
        },
        {
          "name": "extentions.py",
          "type": "blob",
          "size": 25.384765625,
          "content": "from .tools import common as Common\nfrom .tools import atlas as Atlas\nfrom .tools import eyetracking as Eyetracking\nfrom .tools import rootbone as Rootbone\nfrom .tools import settings as Settings\nfrom .tools import importer as Importer\nfrom .tools import translations as Translations\nfrom .tools.translations import t\n\nfrom bpy.types import Scene, Material\nfrom bpy.props import BoolProperty, EnumProperty, FloatProperty, IntProperty, CollectionProperty\n\n\ndef register():\n    Scene.armature = EnumProperty(\n        name=t('Scene.armature.label'),\n        description=t('Scene.armature.desc'),\n        items=Common.get_armature_list,\n        update=Common.update_material_list\n    )\n\n    Scene.zip_content = EnumProperty(\n        name=t('Scene.zip_content.label'),\n        description=t('Scene.zip_content.desc'),\n        items=Importer.get_zip_content\n    )\n\n    Scene.keep_upper_chest = BoolProperty(\n        name=t('Scene.keep_upper_chest.label'),\n        description=t('Scene.keep_upper_chest.desc'),\n        default=True\n    )\n\n    Scene.combine_mats = BoolProperty(\n        name=t('Scene.combine_mats.label'),\n        description=t('Scene.combine_mats.desc'),\n        default=True\n    )\n\n    Scene.remove_zero_weight = BoolProperty(\n        name=t('Scene.remove_zero_weight.label'),\n        description=t('Scene.remove_zero_weight.desc'),\n        default=True\n    )\n\n    Scene.keep_end_bones = BoolProperty(\n        name=t('Scene.keep_end_bones.label'),\n        description=t('Scene.keep_end_bones.desc'),\n        default=False\n    )\n\n    Scene.keep_twist_bones = BoolProperty(\n        name=t('Scene.keep_twist_bones.label'),\n        description=t('Scene.keep_twist_bones.desc'),\n        default=False\n    )\n\n    Scene.fix_twist_bones = BoolProperty(\n        name=t('Scene.fix_twist_bones.label'),\n        description=t('Scene.fix_twist_bones.desc'),\n        default=True\n    )\n\n    Scene.join_meshes = BoolProperty(\n        name=t('Scene.join_meshes.label'),\n        description=t('Scene.join_meshes.desc'),\n        default=True\n    )\n\n    Scene.connect_bones = BoolProperty(\n        name=t('Scene.connect_bones.label'),\n        description=t('Scene.connect_bones.desc'),\n        default=True\n    )\n\n    Scene.fix_materials = BoolProperty(\n        name=t('Scene.fix_materials.label'),\n        description=t('Scene.fix_materials.desc'),\n        default=True\n    )\n\n    Scene.remove_rigidbodies_joints = BoolProperty(\n        name=t('Scene.remove_rigidbodies_joints.label'),\n        description=t('Scene.remove_rigidbodies_joints.desc'),\n        default=True\n    )\n\n    # Manual\n    Scene.use_google_only = BoolProperty(\n        name=t('Scene.use_google_only.label'),\n        description=t('Scene.use_google_only.desc'),\n        default=False\n    )\n\n    Scene.keep_merged_bones = BoolProperty(\n        name='Keep Merged Bones',\n        description='Select this to keep the bones after merging them to their parents or to the active bone',\n        default=False\n    )\n\n    Scene.merge_visible_meshes_only = BoolProperty(\n        name='Merge Visible Meshes Only',\n        description='Select this to only merge the weights of the visible meshes',\n        default=False\n    )\n\n    Scene.show_more_options = BoolProperty(\n        name=t('Scene.show_more_options.label'),\n        description=t('Scene.show_more_options.desc'),\n        default=False\n    )\n\n    # Custom Avatar Creation\n    Scene.merge_mode = EnumProperty(\n        name=t('Scene.merge_mode.label'),\n        description=t('Scene.merge_mode.desc'),\n        items=[\n            (\"ARMATURE\", t('Scene.merge_mode.armature.label'), t('Scene.merge_mode.armature.desc')),\n            (\"MESH\", t('Scene.merge_mode.mesh.label'), t('Scene.merge_mode.mesh.desc'))\n        ]\n    )\n\n    Scene.merge_armature_into = EnumProperty(\n        name=t('Scene.merge_armature_into.label'),\n        description=t('Scene.merge_armature_into.desc'),\n        items=Common.get_armature_list\n    )\n\n    Scene.merge_armature = EnumProperty(\n        name=t('Scene.merge_armature.label'),\n        description=t('Scene.merge_armature.desc'),\n        items=Common.get_armature_merge_list\n    )\n\n    Scene.attach_to_bone = EnumProperty(\n        name=t('Scene.attach_to_bone.label'),\n        description=t('Scene.attach_to_bone.desc'),\n        items=Common.get_bones_merge\n    )\n\n    Scene.attach_mesh = EnumProperty(\n        name=t('Scene.attach_mesh.label'),\n        description=t('Scene.attach_mesh.desc'),\n        items=Common.get_top_meshes\n    )\n\n    Scene.merge_same_bones = BoolProperty(\n        name=t('Scene.merge_same_bones.label'),\n        description=t('Scene.merge_same_bones.desc'),\n        default=False\n    )\n\n    Scene.apply_transforms = BoolProperty(\n        name=t('Scene.apply_transforms.label'),\n        description=t('Scene.apply_transforms.desc'),\n        default=False\n    )\n\n    Scene.merge_armatures_join_meshes = BoolProperty(\n        name=t('Scene.merge_armatures_join_meshes.label'),\n        description=t('Scene.merge_armatures_join_meshes.desc'),\n        default=True\n    )\n\n    Scene.merge_armatures_remove_zero_weight_bones = BoolProperty(\n        name=t('Scene.merge_armatures_remove_zero_weight_bones.label'),\n        description=t('Scene.merge_armatures_remove_zero_weight_bones.desc'),\n        default=True\n    )\n\n    # Decimation\n    Scene.decimation_mode = EnumProperty(\n        name=t('Scene.decimation_mode.label'),\n        description=t('Scene.decimation_mode.desc'),\n        items=[\n            (\"SMART\", t('Scene.decimation_mode.smart.label'), t('Scene.decimation_mode.smart.desc')),\n            (\"SAFE\", t('Scene.decimation_mode.safe.label'), t('Scene.decimation_mode.safe.desc')),\n            (\"HALF\", t('Scene.decimation_mode.half.label'), t('Scene.decimation_mode.half.desc')),\n            (\"FULL\", t('Scene.decimation_mode.full.label'), t('Scene.decimation_mode.full.desc')),\n            (\"CUSTOM\", t('Scene.decimation_mode.custom.label'), t('Scene.decimation_mode.custom.desc'))\n        ],\n        default='SMART'\n    )\n\n    Scene.decimation_animation_weighting = BoolProperty(\n        name=t('Scene.decimation_animation_weighting.label'),\n        description=t('Scene.decimation_animation_weighting.desc'),\n        default=False\n    )\n\n    Scene.decimation_animation_weighting_factor = FloatProperty(\n        name=t('Scene.decimation_animation_weighting_factor.label'),\n        description=t('Scene.decimation_animation_weighting_factor.desc'),\n        default=0.25,\n        min=0,\n        max=1,\n        step=0.05,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    Scene.bake_animation_weighting = BoolProperty(\n        name=t('Scene.decimation_animation_weighting.label'),\n        description=t('Scene.decimation_animation_weighting.desc'),\n        default=False\n    )\n\n    Scene.bake_animation_weighting_factor = FloatProperty(\n        name=t('Scene.decimation_animation_weighting_factor.label'),\n        description=t('Scene.decimation_animation_weighting_factor.desc'),\n        default=0.25,\n        min=0,\n        max=1,\n        step=0.05,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    Scene.bake_max_tris = IntProperty(\n        name=t('Scene.max_tris.label'),\n        description=t('Scene.max_tris.desc'),\n        default=7500,\n        min=1,\n        max=70000\n    )\n\n    Scene.bake_remove_doubles = BoolProperty(\n        name=t('Scene.decimation_remove_doubles.label'),\n        description=t('Scene.decimation_remove_doubles.desc'),\n        default=True\n    )\n\n    Scene.bake_optimize_static = BoolProperty(\n        name=\"Optimize Static Shapekeys\",\n        description=\"Seperate vertices unaffected by shape keys into their own mesh. This adds a drawcall, but comes with a significant GPU cost savings, especially on mobile.\",\n        default=True\n    )\n\n    Scene.bake_cleanup_shapekeys = BoolProperty(\n        name=\"Cleanup Shapekeys\",\n        description=\"Remove backup shapekeys in the final result, e.g. 'Key1 - Reverted' or 'blink_old'\",\n        default=True\n    )\n\n    Scene.bake_create_disable_shapekeys = BoolProperty(\n        name=\"Create 'Disable' Shapekeys\",\n        description=\"Create 'Disable' shapekeys for all but the largest mesh, that cause it to shrink to nothing. Lets you keep toggleable props, without the need for additional meshes.\",\n        default=False\n    )\n\n    # Bake\n    Scene.bake_resolution = IntProperty(\n        name=t('Scene.bake_resolution.label'),\n        description=t('Scene.bake_resolution.desc'),\n        default=2048,\n        min=128,\n        max=4096\n    )\n\n    Scene.bake_use_decimation = BoolProperty(\n        name=t('Scene.bake_use_decimation.label'),\n        description=t('Scene.bake_use_decimation.desc'),\n        default=True\n    )\n\n    Scene.bake_generate_uvmap = BoolProperty(\n        name=t('Scene.bake_generate_uvmap.label'),\n        description=t('Scene.bake_generate_uvmap.desc'),\n        default=True\n    )\n\n    Scene.bake_uv_overlap_correction = EnumProperty(\n        name=t('Scene.bake_uv_overlap_correction.label'),\n        description=t('Scene.bake_uv_overlap_correction.desc'),\n        items=[\n            (\"NONE\", t(\"Scene.bake_uv_overlap_correction.none.label\"), t(\"Scene.bake_uv_overlap_correction.none.desc\")),\n            (\"UNMIRROR\", t(\"Scene.bake_uv_overlap_correction.unmirror.label\"), t(\"Scene.bake_uv_overlap_correction.unmirror.desc\")),\n            (\"REPROJECT\", t(\"Scene.bake_uv_overlap_correction.reproject.label\"), t(\"Scene.bake_uv_overlap_correction.reproject.desc\")),\n            (\"MANUAL\", \"Manual\", \"Bake will take island information from any UVMap named 'Target' from your meshes, else it will default to the render-active one. Decimation works better when there's only one giant island per loose mesh!\")\n        ],\n        default=\"UNMIRROR\"\n    )\n\n    Scene.bake_device = EnumProperty(\n        name='Bake Device',\n        description='Device to bake on. GPU gives a significant speedup, but can cause issues depending on your graphics drivers.',\n        default='GPU',\n        items=[\n            ('CPU', 'CPU', 'Perform bakes on CPU (Safe)'),\n            ('GPU', 'GPU', 'Perform bakes on GPU (Fast)')\n        ]\n    )\n\n    Scene.bake_prioritize_face = BoolProperty(\n        name=t('Scene.bake_prioritize_face.label'),\n        description=t('Scene.bake_prioritize_face.desc'),\n        default=False\n    )\n\n    Scene.bake_face_scale = FloatProperty(\n        name=t('Scene.bake_face_scale.label'),\n        description=t('Scene.bake_face_scale.desc'),\n        default=2.0,\n        min=0.5,\n        max=4.0,\n        step=0.25,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    Scene.bake_quick_compare = BoolProperty(\n        name=t('Scene.bake_quick_compare.label'),\n        description=t('Scene.bake_quick_compare.desc'),\n        default=True\n    )\n\n    Scene.bake_illuminate_eyes = BoolProperty(\n        name=t('Scene.bake_illuminate_eyes.label'),\n        description=t('Scene.bake_illuminate_eyes.desc'),\n        default=True\n    )\n\n    Scene.bake_pass_smoothness = BoolProperty(\n        name=t('Scene.bake_pass_smoothness.label'),\n        description=t('Scene.bake_pass_smoothness.desc'),\n        default=True\n    )\n\n    Scene.bake_pass_diffuse = BoolProperty(\n        name=t('Scene.bake_pass_diffuse.label'),\n        description=t('Scene.bake_pass_diffuse.desc'),\n        default=True\n    )\n\n    Scene.bake_diffuse_vertex_colors = BoolProperty(\n        name=\"Bake to vertex colors\",\n        description=\"Rebake to vertex colors after initial bake. Avoids an entire extra texture, if your colors are simple enough. Incorperates AO.\",\n        default=False\n    )\n\n    Scene.bake_preserve_seams = BoolProperty(\n        name=t('Scene.bake_preserve_seams.label'),\n        description=t('Scene.bake_preserve_seams.desc'),\n        default=False\n    )\n\n    Scene.bake_pass_normal = BoolProperty(\n        name=t('Scene.bake_pass_normal.label'),\n        description=t('Scene.bake_pass_normal.desc'),\n        default=True\n    )\n\n    Scene.bake_normal_apply_trans = BoolProperty(\n        name=t('Scene.bake_normal_apply_trans.label'),\n        description=t('Scene.bake_normal_apply_trans.desc'),\n        default=True\n    )\n\n    Scene.bake_apply_keys = BoolProperty(\n        name=\"Apply current shapekey mix\",\n        description=\"When selected, currently active shape keys will be applied to the basis. This is extremely beneficial to performance if your avatar is intended to 'default' to one shapekey mix, as having active shapekeys all the time is expensive. Keys ending in '_bake' are always applied to the basis and removed completely, regardless of this option.\",\n        default=False\n    )\n\n    Scene.bake_ignore_hidden = BoolProperty(\n        name=\"Ignore hidden objects\",\n        description=\"Ignore currently hidden objects when copying\",\n        default=True\n    )\n\n    Scene.bake_pass_ao = BoolProperty(\n        name=t('Scene.bake_pass_ao.label'),\n        description=t('Scene.bake_pass_ao.desc'),\n        default=False\n    )\n\n    Scene.bake_pass_questdiffuse = BoolProperty(\n        name=t('Scene.bake_pass_questdiffuse.label'),\n        description=t('Scene.bake_pass_questdiffuse.desc'),\n        default=True\n    )\n\n    Scene.bake_pass_emit = BoolProperty(\n        name=t('Scene.bake_pass_emit.label'),\n        description=t('Scene.bake_pass_emit.desc'),\n        default=False\n    )\n\n    Scene.bake_emit_indirect = BoolProperty(\n        name=\"Bake projected light\",\n        description=\"Bake the effect of emission on nearby surfaces. Results in much more realistic lighting effects, but can animate less well.\",\n        default=False\n    )\n\n    Scene.bake_emit_exclude_eyes = BoolProperty(\n        name=\"Exclude eyes\",\n        description=\"Bakes the effect of any eye glow onto surrounding objects, but not vice-versa. Improves animation when eyes are moving around..\",\n        default=True\n    )\n\n    Scene.bake_diffuse_alpha_pack = EnumProperty(\n        name=t('Scene.bake_diffuse_alpha_pack.label'),\n        description=t('Scene.bake_diffuse_alpha_pack.desc'),\n        items=[\n            (\"NONE\", t(\"Scene.bake_diffuse_alpha_pack.none.label\"), t(\"Scene.bake_diffuse_alpha_pack.none.desc\")),\n            (\"TRANSPARENCY\", t(\"Scene.bake_diffuse_alpha_pack.transparency.label\"), t(\"Scene.bake_diffuse_alpha_pack.transparency.desc\")),\n            (\"SMOOTHNESS\", t(\"Scene.bake_diffuse_alpha_pack.smoothness.label\"), t(\"Scene.bake_diffuse_alpha_pack.smoothness.desc\")),\n        ],\n        default=\"NONE\"\n    )\n\n    Scene.bake_metallic_alpha_pack = EnumProperty(\n        name=t('Scene.bake_metallic_alpha_pack.label'),\n        description=t('Scene.bake_metallic_alpha_pack.desc'),\n        items=[\n            (\"NONE\", t(\"Scene.bake_metallic_alpha_pack.none.label\"), t(\"Scene.bake_metallic_alpha_pack.none.desc\")),\n            (\"SMOOTHNESS\", t(\"Scene.bake_metallic_alpha_pack.smoothness.label\"), t(\"Scene.bake_metallic_alpha_pack.smoothness.desc\"))\n        ],\n        default=\"NONE\"\n    )\n\n    Scene.bake_pass_alpha = BoolProperty(\n        name=t('Scene.bake_pass_alpha.label'),\n        description=t('Scene.bake_pass_alpha.desc'),\n        default=False\n    )\n\n    Scene.bake_pass_metallic = BoolProperty(\n        name=t('Scene.bake_pass_metallic.label'),\n        description=t('Scene.bake_pass_metallic.desc'),\n        default=False\n    )\n\n    Scene.bake_questdiffuse_opacity = FloatProperty(\n        name=t('Scene.bake_questdiffuse_opacity.label'),\n        description=t('Scene.bake_questdiffuse_opacity.desc'),\n        default=0.75,\n        min=0.0,\n        max=1.0,\n        step=0.05,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n\n    Scene.selection_mode = EnumProperty(\n        name=t('Scene.selection_mode.label'),\n        description=t('Scene.selection_mode.desc'),\n        items=[\n            (\"SHAPES\", t('Scene.selection_mode.shapekeys.label'), t('Scene.selection_mode.shapekeys.desc')),\n            (\"MESHES\", t('Scene.selection_mode.meshes.label'), t('Scene.selection_mode.meshes.desc'))\n        ]\n    )\n\n    Scene.add_shape_key = EnumProperty(\n        name=t('Scene.add_shape_key.label'),\n        description=t('Scene.add_shape_key.desc'),\n        items=Common.get_shapekeys_decimation\n    )\n\n    Scene.add_mesh = EnumProperty(\n        name=t('Scene.add_mesh.label'),\n        description=t('Scene.add_mesh.desc'),\n        items=Common.get_meshes_decimation\n    )\n\n    Scene.decimate_fingers = BoolProperty(\n        name=t('Scene.decimate_fingers.label'),\n        description=t('Scene.decimate_fingers.desc')\n    )\n\n    Scene.decimate_hands = BoolProperty(\n        name=t('Scene.decimate_hands.label'),\n        description=t('Scene.decimate_hands.desc')\n    )\n\n    Scene.decimation_remove_doubles = BoolProperty(\n        name=t('Scene.decimation_remove_doubles.label'),\n        description=t('Scene.decimation_remove_doubles.desc'),\n        default=True\n    )\n\n    Scene.max_tris = IntProperty(\n        name=t('Scene.max_tris.label'),\n        description=t('Scene.max_tris.desc'),\n        default=70000,\n        min=1,\n        max=500000\n    )\n\n    # Eye Tracking\n    Scene.eye_mode = EnumProperty(\n        name=t('Scene.eye_mode.label'),\n        description=t('Scene.eye_mode.desc'),\n        items=[\n            (\"CREATION\", t('Scene.eye_mode.creation.label'), t('Scene.eye_mode.creation.desc')),\n            (\"TESTING\", t('Scene.eye_mode.testing.label'), t('Scene.eye_mode.testing.desc'))\n        ],\n        update=Eyetracking.stop_testing\n    )\n\n    Scene.mesh_name_eye = EnumProperty(\n        name=t('Scene.mesh_name_eye.label'),\n        description=t('Scene.mesh_name_eye.desc'),\n        items=Common.get_meshes\n    )\n\n    Scene.head = EnumProperty(\n        name=t('Scene.head.label'),\n        description=t('Scene.head.desc'),\n        items=Common.get_bones_head\n    )\n\n    Scene.eye_left = EnumProperty(\n        name=t('Scene.eye_left.label'),\n        description=t('Scene.eye_left.desc'),\n        items=Common.get_bones_eye_l\n    )\n\n    Scene.eye_right = EnumProperty(\n        name=t('Scene.eye_right.label'),\n        description=t('Scene.eye_right.desc'),\n        items=Common.get_bones_eye_r\n    )\n\n    Scene.wink_left = EnumProperty(\n        name=t('Scene.wink_left.label'),\n        description=t('Scene.wink_left.desc'),\n        items=Common.get_shapekeys_eye_blink_l\n    )\n\n    Scene.wink_right = EnumProperty(\n        name=t('Scene.wink_right.label'),\n        description=t('Scene.wink_right.desc'),\n        items=Common.get_shapekeys_eye_blink_r\n    )\n\n    Scene.lowerlid_left = EnumProperty(\n        name=t('Scene.lowerlid_left.label'),\n        description=t('Scene.lowerlid_left.desc'),\n        items=Common.get_shapekeys_eye_low_l\n    )\n\n    Scene.lowerlid_right = EnumProperty(\n        name=t('Scene.lowerlid_right.label'),\n        description=t('Scene.lowerlid_right.desc'),\n        items=Common.get_shapekeys_eye_low_r\n    )\n\n    Scene.disable_eye_movement = BoolProperty(\n        name=t('Scene.disable_eye_movement.label'),\n        description=t('Scene.disable_eye_movement.desc'),\n        subtype='DISTANCE'\n    )\n\n    Scene.disable_eye_blinking = BoolProperty(\n        name=t('Scene.disable_eye_blinking.label'),\n        description=t('Scene.disable_eye_blinking.desc'),\n        subtype='NONE'\n    )\n\n    Scene.eye_distance = FloatProperty(\n        name=t('Scene.eye_distance.label'),\n        description=t('Scene.eye_distance.desc'),\n        default=0.8,\n        min=0.0,\n        max=2.0,\n        step=1.0,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    Scene.eye_rotation_x = IntProperty(\n        name=t('Scene.eye_rotation_x.label'),\n        description=t('Scene.eye_rotation_x.desc'),\n        default=0,\n        min=-19,\n        max=25,\n        step=1,\n        subtype='FACTOR',\n        update=Eyetracking.set_rotation\n    )\n\n    Scene.eye_rotation_y = IntProperty(\n        name=t('Scene.eye_rotation_y.label'),\n        description=t('Scene.eye_rotation_y.desc'),\n        default=0,\n        min=-19,\n        max=19,\n        step=1,\n        subtype='FACTOR',\n        update=Eyetracking.set_rotation\n    )\n\n    Scene.iris_height = IntProperty(\n        name=t('Scene.iris_height.label'),\n        description=t('Scene.iris_height.desc'),\n        default=0,\n        min=0,\n        max=100,\n        step=1,\n        subtype='FACTOR'\n    )\n\n    Scene.eye_blink_shape = FloatProperty(\n        name=t('Scene.eye_blink_shape.label'),\n        description=t('Scene.eye_blink_shape.desc'),\n        default=1.0,\n        min=0.0,\n        max=1.0,\n        step=1.0,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    Scene.eye_lowerlid_shape = FloatProperty(\n        name=t('Scene.eye_lowerlid_shape.label'),\n        description=t('Scene.eye_lowerlid_shape.desc'),\n        default=1.0,\n        min=0.0,\n        max=1.0,\n        step=1.0,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    # Visemes\n    Scene.mesh_name_viseme = EnumProperty(\n        name=t('Scene.mesh_name_viseme.label'),\n        description=t('Scene.mesh_name_viseme.desc'),\n        items=Common.get_meshes\n    )\n\n    Scene.mouth_a = EnumProperty(\n        name=t('Scene.mouth_a.label'),\n        description=t('Scene.mouth_a.desc'),\n        items=Common.get_shapekeys_mouth_ah,\n    )\n\n    Scene.mouth_o = EnumProperty(\n        name=t('Scene.mouth_o.label'),\n        description=t('Scene.mouth_o.desc'),\n        items=Common.get_shapekeys_mouth_oh,\n    )\n\n    Scene.mouth_ch = EnumProperty(\n        name=t('Scene.mouth_ch.label'),\n        description=t('Scene.mouth_ch.desc'),\n        items=Common.get_shapekeys_mouth_ch,\n    )\n\n    Scene.shape_intensity = FloatProperty(\n        name=t('Scene.shape_intensity.label'),\n        description=t('Scene.shape_intensity.desc'),\n        default=1.0,\n        min=0.0,\n        max=10.0,\n        step=0.1,\n        precision=2,\n        subtype='FACTOR'\n    )\n\n    # Bone Parenting\n    Scene.root_bone = EnumProperty(\n        name=t('Scene.root_bone.label'),\n        description=t('Scene.root_bone.desc'),\n        items=Rootbone.get_parent_root_bones,\n    )\n\n    # Optimize\n    Scene.optimize_mode = EnumProperty(\n        name=t('Scene.optimize_mode.label'),\n        description=t('Scene.optimize_mode.desc'),\n        items=[\n            (\"ATLAS\", t('Scene.optimize_mode.atlas.label'), t('Scene.optimize_mode.atlas.desc')),\n            (\"MATERIAL\", t('Scene.optimize_mode.material.label'), t('Scene.optimize_mode.material.desc')),\n            (\"BONEMERGING\", t('Scene.optimize_mode.bonemerging.label'), t('Scene.optimize_mode.bonemerging.desc')),\n        ]\n    )\n\n    # Atlas\n    # Material.add_to_atlas = BoolProperty(\n    #     description=t('Add this material to the atlas'),\n    #     default=False\n    # )\n\n    # Scene.material_list_index = IntProperty(\n    #     default=0\n    # )\n\n    # Scene.material_list = CollectionProperty(\n    #     type=Atlas.MaterialsGroup\n    # )\n\n    # Scene.clear_materials = BoolProperty(\n    #     description=t('Clear materials checkbox'),\n    #     default=True\n    # )\n\n    # Bone Merging\n    Scene.merge_ratio = FloatProperty(\n        name=t('Scene.merge_ratio.label'),\n        description=t('Scene.merge_ratio.desc'),\n        default=50,\n        min=1,\n        max=100,\n        step=1,\n        precision=0,\n        subtype='PERCENTAGE'\n    )\n\n    Scene.merge_mesh = EnumProperty(\n        name=t('Scene.merge_mesh.label'),\n        description=t('Scene.merge_mesh.desc'),\n        items=Common.get_meshes\n    )\n\n    Scene.merge_bone = EnumProperty(\n        name=t('Scene.merge_bone.label'),\n        description=t('Scene.merge_bone.desc'),\n        items=Rootbone.get_parent_root_bones,\n    )\n\n    # Settings\n    Scene.show_mmd_tabs = BoolProperty(\n        name=t('Scene.show_mmd_tabs.label'),\n        description=t('Scene.show_mmd_tabs.desc'),\n        default=True,\n        update=Common.toggle_mmd_tabs_update\n    )\n    Scene.embed_textures = BoolProperty(\n        name=t('Scene.embed_textures.label'),\n        description=t('Scene.embed_textures.desc'),\n        default=False,\n        update=Settings.update_settings\n    )\n    Scene.use_custom_mmd_tools = BoolProperty(\n        name=t('Scene.use_custom_mmd_tools.label'),\n        description=t('Scene.use_custom_mmd_tools.desc'),\n        default=False,\n        update=Settings.update_settings\n    )\n    Scene.ui_lang = EnumProperty(\n        name=t('Scene.ui_lang.label'),\n        description=t('Scene.ui_lang.desc'),\n        items=Translations.get_languages_list,\n        update=Translations.update_ui\n    )\n    Scene.debug_translations = BoolProperty(\n        name=t('Scene.debug_translations.label'),\n        description=t('Scene.debug_translations.desc'),\n        default=False\n    )\n\n    # Scene.disable_vrchat_features = BoolProperty(\n    #     name=t('Disable VRChat Only Features'),\n    #     description='This will disable features which are solely used for VRChat.'\n    #                 '\\nThe following will be disabled:'\n    #                 '\\n- Eye Tracking'\n    #                 '\\n- Visemes',\n    #     default=False,\n    #     update=Settings.update_settings\n    # )\n\n    # Copy Protection - obsolete\n    # Scene.protection_mode = EnumProperty(\n    #     name=t(\"Randomization Level\"),\n    #     description=t(\"Randomization Level\"),\n    #     items=[\n    #         (\"FULL\", \"Full\", \"This will randomize every vertex of your model and it will be completely unusable for thieves.\\n\"\n    #                          'However this method might cause problems with the Outline option from Cubed shader.\\n'\n    #                          'If you have any issues ingame try again with option \"Partial\".'),\n    #         (\"PARTIAL\", \"Partial\", 'Use this if you experience issues ingame with the Full option!\\n'\n    #                                '\\n'\n    #                                \"This will only randomize a number of vertices and therefore will have a few unprotected areas,\\n\"\n    #                                \"but it's still unusable to thieves as a whole.\\n\"\n    #                                'This method however reduces the glitches that can occur ingame by a lot.')\n    #     ],\n    #     default='FULL'\n    # )\n"
        },
        {
          "name": "extern_tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "globs.py",
          "type": "blob",
          "size": 1.1103515625,
          "content": "import bpy\n\n# for bone root parenting\nroot_bones = {}\nroot_bones_choices = {}\n\n# Keeps track of operations done for unit testing\ntesting = []\n\ndev_branch = False\ndict_found = False\nversion = None\nversion_str = ''\n\n# other\ntime_format = \"%Y-%m-%d %H:%M:%S\"\ntime_format_github = \"%Y-%m-%dT%H:%M:%SZ\"\n\n# Icons for UI\nICON_ADD, ICON_REMOVE = 'ADD', 'REMOVE'\nICON_URL = 'URL'\nICON_SETTINGS = 'SETTINGS'\nICON_ALL = 'PROP_ON'\nICON_MOD_ARMATURE = 'MOD_ARMATURE'\nICON_FIX_MODEL = 'SHADERFX'\nICON_EYE_ROTATION = 'DRIVER_ROTATIONAL_DIFFERENCE'\nICON_POSE_MODE = 'POSE_HLT'\nICON_SHADING_TEXTURE = 'SHADING_TEXTURE'\nICON_PROTECT = 'LOCKED'\nICON_UNPROTECT = 'UNLOCKED'\nICON_EXPORT = 'EXPORT'\nif bpy.app.version < (2, 79, 9):\n    ICON_ADD, ICON_REMOVE = 'ZOOMIN', 'ZOOMOUT'\n    ICON_URL = 'LOAD_FACTORY'\n    ICON_SETTINGS = 'SCRIPTPLUGINS'\n    ICON_ALL = 'META_BALL'\n    ICON_MOD_ARMATURE = 'OUTLINER_OB_ARMATURE'\n    ICON_FIX_MODEL = 'BONE_DATA'\n    ICON_EYE_ROTATION = 'MAN_ROT'\n    ICON_POSE_MODE = 'POSE_DATA'\n    ICON_SHADING_TEXTURE = 'TEXTURE_SHADED'\n    ICON_PROTECT = 'KEY_HLT'\n    ICON_UNPROTECT = 'KEY_DEHLT'\n    ICON_EXPORT = 'LOAD_FACTORY'\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui",
          "type": "tree",
          "content": null
        },
        {
          "name": "updater.py",
          "type": "blob",
          "size": 31.2392578125,
          "content": "import os\nimport ssl\nimport bpy\nimport time\nimport json\nimport urllib\nimport shutil\nimport pathlib\nimport zipfile\nimport addon_utils\nfrom threading import Thread\nfrom collections import OrderedDict\nfrom bpy.app.handlers import persistent\nfrom .tools.translations import t\n\nno_ver_check = False\nfake_update = False\n\nis_checking_for_update = False\nchecked_on_startup = False\nversion_list = None\ncurrent_version = []\ncurrent_version_str = ''\nupdate_needed = False\nlatest_version = None\nlatest_version_str = ''\nused_updater_panel = False\nupdate_finished = False\nremind_me_later = False\nis_ignored_version = False\n\nconfirm_update_to = ''\n\nshow_error = ''\n\nmain_dir = os.path.dirname(__file__)\ndownloads_dir = os.path.join(main_dir, \"downloads\")\nresources_dir = os.path.join(main_dir, \"resources\")\nignore_ver_file = os.path.join(resources_dir, \"ignore_version.txt\")\nno_auto_ver_check_file = os.path.join(resources_dir, \"no_auto_ver_check.txt\")\n\n# Get package name, important for panel in user preferences\npackage_name = ''\nfor mod in addon_utils.modules():\n    if mod.bl_info['name'] == 'Cats Blender Plugin':\n        package_name = mod.__name__\n\n# Icons for UI\nICON_URL = 'URL'\nif bpy.app.version < (2, 79, 9):\n    ICON_URL = 'LOAD_FACTORY'\n\n\nclass CheckForUpdateButton(bpy.types.Operator):\n    bl_idname = 'cats_updater.check_for_update'\n    bl_label = t('CheckForUpdateButton.label')\n    bl_description = t('CheckForUpdateButton.desc')\n    bl_options = {'INTERNAL'}\n\n    @classmethod\n    def poll(cls, context):\n        return not is_checking_for_update\n\n    def execute(self, context):\n        global used_updater_panel\n        used_updater_panel = True\n        check_for_update_background()\n        return {'FINISHED'}\n\n\nclass UpdateToLatestButton(bpy.types.Operator):\n    bl_idname = 'cats_updater.update_latest'\n    bl_label = t('UpdateToLatestButton.label')\n    bl_description = t('UpdateToLatestButton.desc')\n    bl_options = {'INTERNAL'}\n\n    @classmethod\n    def poll(cls, context):\n        return update_needed\n\n    def execute(self, context):\n        global confirm_update_to, used_updater_panel\n        confirm_update_to = 'latest'\n        used_updater_panel = True\n\n        bpy.ops.cats_updater.confirm_update_panel('INVOKE_DEFAULT')\n        return {'FINISHED'}\n\n\nclass UpdateToSelectedButton(bpy.types.Operator):\n    bl_idname = 'cats_updater.update_selected'\n    bl_label = 'Update to Selected version'\n    bl_description = 'Updates CATS to the selected version'\n    bl_options = {'INTERNAL'}\n\n    @classmethod\n    def poll(cls, context):\n        if is_checking_for_update or not version_list:\n            return False\n        return True\n\n    def execute(self, context):\n        global confirm_update_to, used_updater_panel\n        confirm_update_to = context.scene.cats_updater_version_list\n        used_updater_panel = True\n\n        bpy.ops.cats_updater.confirm_update_panel('INVOKE_DEFAULT')\n        return {'FINISHED'}\n\n\nclass UpdateToDevButton(bpy.types.Operator):\n    bl_idname = 'cats_updater.update_dev'\n    bl_label = t('UpdateToDevButton.label')\n    bl_description = t('UpdateToDevButton.desc')\n    bl_options = {'INTERNAL'}\n\n    def execute(self, context):\n        global confirm_update_to, used_updater_panel\n        confirm_update_to = 'dev'\n        used_updater_panel = True\n\n        bpy.ops.cats_updater.confirm_update_panel('INVOKE_DEFAULT')\n        return {'FINISHED'}\n\n\nclass RemindMeLaterButton(bpy.types.Operator):\n    bl_idname = 'cats_updater.remind_me_later'\n    bl_label = t('RemindMeLaterButton.label')\n    bl_description = t('RemindMeLaterButton.desc')\n    bl_options = {'INTERNAL'}\n\n    def execute(self, context):\n        global remind_me_later\n        remind_me_later = True\n        self.report({'INFO'}, t('RemindMeLaterButton.success'))\n        return {'FINISHED'}\n\n\nclass IgnoreThisVersionButton(bpy.types.Operator):\n    bl_idname = 'cats_updater.ignore_this_version'\n    bl_label = t('IgnoreThisVersionButton.label')\n    bl_description = t('IgnoreThisVersionButton.desc')\n    bl_options = {'INTERNAL'}\n\n    def execute(self, context):\n        set_ignored_version()\n        self.report({'INFO'}, t('IgnoreThisVersionButton.success', name=latest_version_str))\n        return {'FINISHED'}\n\n\nclass ShowPatchnotesPanel(bpy.types.Operator):\n    bl_idname = 'cats_updater.show_patchnotes'\n    bl_label = t('ShowPatchnotesPanel.label')\n    bl_description = t('ShowPatchnotesPanel.desc')\n    bl_options = {'INTERNAL'}\n\n    @classmethod\n    def poll(cls, context):\n        if is_checking_for_update or not version_list:\n            return False\n        return True\n\n    def execute(self, context):\n        return {'FINISHED'}\n\n    def invoke(self, context, event):\n        global used_updater_panel\n        used_updater_panel = True\n        dpi_value = get_user_preferences().system.dpi\n        return context.window_manager.invoke_props_dialog(self, width=dpi_value * 8.2)\n\n    def check(self, context):\n        # Important for changing options\n        return True\n\n    def draw(self, context):\n        layout = self.layout\n        col = layout.column(align=True)\n\n        row = col.row(align=True)\n        row.prop(context.scene, 'cats_updater_version_list')\n\n        if context.scene.cats_updater_version_list:\n            version = version_list.get(context.scene.cats_updater_version_list)\n\n            col.separator()\n            row = col.row(align=True)\n            row.label(text=t('ShowPatchnotesPanel.releaseDate', date=version[2]))\n\n            col.separator()\n            for line in version[1].replace('**', '').split('\\r\\n'):\n                row = col.row(align=True)\n                row.scale_y = 0.75\n                row.label(text=line)\n\n        col.separator()\n\n\nclass ConfirmUpdatePanel(bpy.types.Operator):\n    bl_idname = 'cats_updater.confirm_update_panel'\n    bl_label = t('ConfirmUpdatePanel.label')\n    bl_description = t('ConfirmUpdatePanel.desc')\n    bl_options = {'INTERNAL'}\n\n    show_patchnotes = False\n\n    def execute(self, context):\n        print('UPDATE TO ' + confirm_update_to)\n        if confirm_update_to == 'dev':\n            update_now(dev=True)\n        elif confirm_update_to == 'latest':\n            update_now(latest=True)\n        else:\n            update_now(version=confirm_update_to)\n        return {'FINISHED'}\n\n    def invoke(self, context, event):\n        dpi_value = get_user_preferences().system.dpi\n        return context.window_manager.invoke_props_dialog(self, width=dpi_value * 4.1)\n\n    def check(self, context):\n        # Important for changing options\n        return True\n\n    def draw(self, context):\n        layout = self.layout\n        col = layout.column(align=True)\n\n        version_str = confirm_update_to\n        if confirm_update_to == 'latest':\n            version_str = latest_version_str\n        elif confirm_update_to == 'dev':\n            version_str = 'Development'\n\n        col.separator()\n        row = col.row(align=True)\n        row.label(text='Version: ' + version_str)\n\n        if confirm_update_to == 'dev':\n            col.separator()\n            col.separator()\n            row = col.row(align=True)\n            row.scale_y = 0.75\n            row.label(text=t('ConfirmUpdatePanel.warn.dev1'))\n            row = col.row(align=True)\n            row.scale_y = 0.75\n            row.label(text=t('ConfirmUpdatePanel.warn.dev2'))\n            row = col.row(align=True)\n            row.scale_y = 0.75\n            row.label(text=t('ConfirmUpdatePanel.warn.dev3'))\n            row = col.row(align=True)\n            row.scale_y = 0.75\n            row.label(text=t('ConfirmUpdatePanel.warn.dev4'))\n            row = col.row(align=True)\n            row.scale_y = 0.75\n            row.label(text='ConfirmUpdatePanel.warn.dev5')\n\n        else:\n            row.operator(ShowPatchnotesPanel.bl_idname, text=t('ConfirmUpdatePanel.ShowPatchnotesPanel.label'))\n\n        col.separator()\n        col.separator()\n        # col.separator()\n        row = col.row(align=True)\n        row.scale_y = 0.65\n        # row.label(text='Update now to ' + version_str + ':', icon=ICON_URL)\n        row.label(text=t('ConfirmUpdatePanel.updateNow'), icon=ICON_URL)\n\n\nclass UpdateCompletePanel(bpy.types.Operator):\n    bl_idname = 'cats_updater.update_complete_panel'\n    bl_label = t('UpdateCompletePanel.label')\n    bl_description = t('UpdateCompletePanel.desc')\n    bl_options = {'INTERNAL'}\n\n    show_patchnotes = False\n\n    def execute(self, context):\n        return {'FINISHED'}\n\n    def invoke(self, context, event):\n        dpi_value = get_user_preferences().system.dpi\n        return context.window_manager.invoke_props_dialog(self, width=dpi_value * 4.1)\n\n    def check(self, context):\n        # Important for changing options\n        return True\n\n    def draw(self, context):\n        layout = self.layout\n        col = layout.column(align=True)\n\n        if update_finished:\n            row = col.row(align=True)\n            row.scale_y = 0.9\n            row.label(text=t('UpdateCompletePanel.success1'), icon='FILE_TICK')\n\n            row = col.row(align=True)\n            row.scale_y = 0.9\n            row.label(text=t('UpdateCompletePanel.success2'), icon='BLANK1')\n        else:\n            row = col.row(align=True)\n            row.scale_y = 0.9\n            row.label(text=t('UpdateCompletePanel.failure1'), icon='CANCEL')\n\n            row = col.row(align=True)\n            row.scale_y = 0.9\n            row.label(text=t('UpdateCompletePanel.failure2'), icon='BLANK1')\n\n\nclass UpdateNotificationPopup(bpy.types.Operator):\n    bl_idname = 'cats_updater.update_notification_popup'\n    bl_label = t('UpdateNotificationPopup.label')\n    bl_description = t('UpdateNotificationPopup.desc')\n    bl_options = {'INTERNAL'}\n\n    def execute(self, context):\n        action = context.scene.cats_update_action\n        if action == 'UPDATE':\n            update_now(latest=True)\n        elif action == 'IGNORE':\n            set_ignored_version()\n        else:\n            # Remind later aka defer\n            global remind_me_later\n            remind_me_later = True\n        ui_refresh()\n        return {'FINISHED'}\n\n    def invoke(self, context, event):\n        dpi_value = get_user_preferences().system.dpi\n        return context.window_manager.invoke_props_dialog(self, width=dpi_value * 4.6)\n\n    # def invoke(self, context, event):\n    #     return context.window_manager.invoke_props_dialog(self)\n\n    def check(self, context):\n        # Important for changing options\n        return True\n\n    def draw(self, context):\n        layout = self.layout\n        col = layout.column(align=True)\n\n        row = layout_split(col, factor=0.55, align=True)\n        row.scale_y = 1.05\n        row.label(text=t('UpdateNotificationPopup.newUpdate', name=latest_version_str), icon='SOLO_ON')\n        row.operator(ShowPatchnotesPanel.bl_idname, text=t('UpdateNotificationPopup.ShowPatchnotesPanel.label'))\n\n        col.separator()\n        col.separator()\n        col.separator()\n        row = col.row(align=True)\n        row.prop(context.scene, 'cats_update_action', expand=True)\n\n\ndef check_for_update_background(check_on_startup=False):\n    global is_checking_for_update, checked_on_startup\n    if check_on_startup and checked_on_startup:\n        # print('ALREADY CHECKED ON STARTUP')\n        return\n    if is_checking_for_update:\n        # print('ALREADY CHECKING')\n        return\n\n    checked_on_startup = True\n\n    if check_on_startup and os.path.isfile(no_auto_ver_check_file):\n        print('AUTO CHECK DISABLED VIA FILE')\n        return\n\n    is_checking_for_update = True\n\n    thread = Thread(target=check_for_update, args=[])\n    thread.start()\n\n\ndef check_for_update():\n    print('Checking for Cats update...')\n\n    # Get all releases from Github\n    if not get_github_releases('Darkblader24') and not get_github_releases('GiveMeAllYourCats'):\n        finish_update_checking(error=t('check_for_update.cantCheck'))\n        return\n\n    # Check if an update is needed\n    global update_needed, is_ignored_version\n    update_needed = check_for_update_available()\n    is_ignored_version = check_ignored_version()\n\n    # Update needed, show the notification popup if it wasn't checked through the UI\n    if update_needed:\n        print('Update found!')\n        if not used_updater_panel and not is_ignored_version:\n            prepare_to_show_update_notification()\n    else:\n        print('No update found.')\n\n    # Finish update checking, update the UI\n    finish_update_checking()\n\n\ndef get_github_releases(repo):\n    global version_list\n    version_list = OrderedDict()\n\n    if fake_update:\n        print('FAKE INSTALL!')\n\n        version = 'v-99-99-99'\n        version_tag = version.replace('-', '.')\n        if version_tag.startswith('v.'):\n            version_tag = version_tag[2:]\n        if version_tag.startswith('v'):\n            version_tag = version_tag[1:]\n\n        version_list[version_tag] = ['', 'Put exiting new stuff here', 'Today']\n        version_list['12.34.56.78'] = ['', 'Nothing new to see', 'A week ago probably']\n        return True\n\n    try:\n        ssl._create_default_https_context = ssl._create_unverified_context\n        with urllib.request.urlopen('https://api.github.com/repos/' + repo + '/cats-blender-plugin/releases') as url:\n            data = json.loads(url.read().decode())\n    except urllib.error.URLError:\n        print('URL ERROR')\n        return False\n    if not data:\n        return False\n\n    for version in data:\n        if 'yanked' in version.get('name').lower() or version_list.get(version.get('tag_name')):\n            continue\n\n        version_tag = version.get('tag_name').replace('-', '.')\n        if version_tag.startswith('v.'):\n            version_tag = version_tag[2:]\n        if version_tag.startswith('v'):\n            version_tag = version_tag[1:]\n\n        version_list[version_tag] = [version.get('zipball_url'), version.get('body'), version.get('published_at').split('T')[0]]\n\n    # for version, info in version_list.items():\n    #     print(version, info[0], info[2])\n\n    return True\n\n\ndef check_for_update_available():\n    if not version_list:\n        return False\n\n    global latest_version, latest_version_str\n    latest_version = []\n    for version in version_list.keys():\n        latest_version_str = version\n        for i in version.split('.'):\n            if i.isdigit():\n                latest_version.append(int(i))\n        if latest_version:\n            break\n\n    # print(latest_version, '>', current_version)\n    if latest_version > current_version:\n        return True\n\n\ndef finish_update_checking(error=''):\n    global is_checking_for_update, show_error\n    is_checking_for_update = False\n\n    # Only show error if the update panel was used before\n    if used_updater_panel:\n        show_error = error\n\n    ui_refresh()\n\n\ndef ui_refresh():\n    # A way to refresh the ui\n    refreshed = False\n    while not refreshed:\n        if hasattr(bpy.data, 'window_managers'):\n            for windowManager in bpy.data.window_managers:\n                for window in windowManager.windows:\n                    for area in window.screen.areas:\n                        area.tag_redraw()\n            refreshed = True\n            # print('Refreshed UI')\n        else:\n            time.sleep(0.5)\n\n\ndef get_update_post():\n    if hasattr(bpy.app.handlers, 'scene_update_post'):\n        return bpy.app.handlers.scene_update_post\n    else:\n        return bpy.app.handlers.depsgraph_update_post\n\n\ndef prepare_to_show_update_notification():\n    # This is necessary to show a popup directly after startup\n    # You will get a nasty error otherwise\n    # This will add the function to the scene_update_post and it will be executed every frame. that's why it needs to be removed again asap\n    # print('PREPARE TO SHOW UI')\n    if show_update_notification not in get_update_post():\n        get_update_post().append(show_update_notification)\n\n\n@persistent\ndef show_update_notification(scene):  # One argument in necessary for some reason\n    # print('SHOWING UI NOW!!!!')\n\n    # # Immediately remove this from handlers again\n    if show_update_notification in get_update_post():\n        get_update_post().remove(show_update_notification)\n\n    # Show notification popup\n    atr = UpdateNotificationPopup.bl_idname.split(\".\")\n    getattr(getattr(bpy.ops, atr[0]), atr[1])('INVOKE_DEFAULT')\n\n\ndef update_now(version=None, latest=False, dev=False):\n    if fake_update:\n        finish_update()\n        return\n    if dev:\n        print('UPDATE TO DEVELOPMENT')\n        update_link = 'https://github.com/michaeldegroot/cats-blender-plugin/archive/development.zip'\n    elif latest or not version:\n        print('UPDATE TO ' + latest_version_str)\n        update_link = version_list.get(latest_version_str)[0]\n        bpy.context.scene.cats_updater_version_list = latest_version_str\n    else:\n        print('UPDATE TO ' + version)\n        update_link = version_list[version][0]\n\n    download_file(update_link)\n\n\ndef download_file(update_url):\n    # Load all the directories and files\n    update_zip_file = os.path.join(downloads_dir, \"cats-update.zip\")\n\n    # Remove existing download folder\n    if os.path.isdir(downloads_dir):\n        print(\"DOWNLOAD FOLDER EXISTED\")\n        shutil.rmtree(downloads_dir)\n\n    # Create download folder\n    pathlib.Path(downloads_dir).mkdir(exist_ok=True)\n\n    # Download zip\n    print('DOWNLOAD FILE')\n    try:\n        ssl._create_default_https_context = ssl._create_unverified_context\n        urllib.request.urlretrieve(update_url, update_zip_file)\n    except urllib.error.URLError:\n        print(\"FILE COULD NOT BE DOWNLOADED\")\n        shutil.rmtree(downloads_dir)\n        finish_update(error=t('download_file.cantConnect'))\n        return\n    print('DOWNLOAD FINISHED')\n\n    # If zip is not downloaded, abort\n    if not os.path.isfile(update_zip_file):\n        print(\"ZIP NOT FOUND!\")\n        shutil.rmtree(downloads_dir)\n        finish_update(error=t('download_file.cantFindZip'))\n        return\n\n    # Extract the downloaded zip\n    print('EXTRACTING ZIP')\n    with zipfile.ZipFile(update_zip_file, \"r\") as zip_ref:\n        zip_ref.extractall(downloads_dir)\n    print('EXTRACTED')\n\n    # Delete the extracted zip file\n    print('REMOVING ZIP FILE')\n    os.remove(update_zip_file)\n\n    # Detect the extracted folders and files\n    print('SEARCHING FOR INIT 1')\n\n    def searchInit(path):\n        print('SEARCHING IN ' + path)\n        files = os.listdir(path)\n        if \"__init__.py\" in files:\n            print('FOUND')\n            return path\n        folders = [f for f in os.listdir(path) if os.path.isdir(os.path.join(path, f))]\n        if len(folders) != 1:\n            print(len(folders), 'FOLDERS DETECTED')\n            return None\n        print('GOING DEEPER')\n        return searchInit(os.path.join(path, folders[0]))\n\n    print('SEARCHING FOR INIT 2')\n    extracted_zip_dir = searchInit(downloads_dir)\n    if not extracted_zip_dir:\n        print(\"INIT NOT FOUND!\")\n        shutil.rmtree(downloads_dir)\n        # finish_reloading()\n        finish_update(error=t('download_file.cantFindCATS'))\n        return\n\n    # Remove old addon files\n    clean_addon_dir()\n\n    # Move the extracted files to their correct places\n    def move_files(from_dir, to_dir):\n        print('MOVE FILES TO DIR:', to_dir)\n        files = os.listdir(from_dir)\n        for file in files:\n            file_dir = os.path.join(from_dir, file)\n            target_dir = os.path.join(to_dir, file)\n            print('MOVE', file_dir)\n\n            # If file exists\n            if os.path.isfile(file_dir) and os.path.isfile(target_dir):\n                os.remove(target_dir)\n                shutil.move(file_dir, to_dir)\n                print('REMOVED AND MOVED', file)\n\n            elif os.path.isdir(file_dir) and os.path.isdir(target_dir):\n                move_files(file_dir, target_dir)\n\n            else:\n                shutil.move(file_dir, to_dir)\n                print('MOVED', file)\n\n    move_files(extracted_zip_dir, main_dir)\n\n    # Delete download folder\n    print('DELETE DOWNLOADS DIR')\n    shutil.rmtree(downloads_dir)\n\n    # Finish the update\n    finish_update()\n\n\ndef finish_update(error=''):\n    global update_finished, show_error\n    show_error = error\n\n    if not error:\n        update_finished = True\n\n    bpy.ops.cats_updater.update_complete_panel('INVOKE_DEFAULT')\n    ui_refresh()\n    print(\"UPDATE DONE!\")\n\n\ndef clean_addon_dir():\n    print(\"CLEAN ADDON FOLDER\")\n\n    # first remove root files and folders (except update folder, important folders and resource folder)\n    files = [f for f in os.listdir(main_dir) if os.path.isfile(os.path.join(main_dir, f))]\n    folders = [f for f in os.listdir(main_dir) if os.path.isdir(os.path.join(main_dir, f))]\n\n    for f in files:\n        file = os.path.join(main_dir, f)\n        try:\n            os.remove(file)\n            print(\"Clean removing file {}\".format(file))\n        except OSError:\n            print(\"Failed to pre-remove file \" + file)\n\n    for f in folders:\n        folder = os.path.join(main_dir, f)\n        if f.startswith('.') or f == 'resources' or f == 'downloads':\n            continue\n\n        try:\n            shutil.rmtree(folder)\n            print(\"Clean removing folder and contents {}\".format(folder))\n        except OSError:\n            print(\"Failed to pre-remove folder \" + folder)\n\n    # then remove resource files and folders (except settings and google dict)\n    resources_folder = os.path.join(main_dir, 'resources')\n    files = [f for f in os.listdir(resources_folder) if os.path.isfile(os.path.join(resources_folder, f))]\n    folders = [f for f in os.listdir(resources_folder) if os.path.isdir(os.path.join(resources_folder, f))]\n\n    for f in files:\n        if f == 'settings.json' or f == 'dictionary_google.json':\n            continue\n        file = os.path.join(resources_folder, f)\n        try:\n            os.remove(file)\n            print(\"Clean removing file {}\".format(file))\n        except OSError:\n            print(\"Failed to pre-remove \" + file)\n\n    for f in folders:\n        folder = os.path.join(resources_folder, f)\n        try:\n            shutil.rmtree(folder)\n            print(\"Clean removing folder and contents {}\".format(folder))\n        except OSError:\n            print(\"Failed to pre-remove folder \" + folder)\n\n\ndef set_ignored_version():\n    # Create resources folder\n    pathlib.Path(resources_dir).mkdir(exist_ok=True)\n\n    # Create ignore file\n    with open(ignore_ver_file, 'w', encoding=\"utf8\") as outfile:\n        outfile.write(latest_version_str)\n\n    # Set ignored status\n    global is_ignored_version\n    is_ignored_version = True\n    print('IGNORE VERSION ' + latest_version_str)\n\n\ndef check_ignored_version():\n    if not os.path.isfile(ignore_ver_file):\n        # print('IGNORE FILE NOT FOUND')\n        return False\n\n    # Read ignore file\n    with open(ignore_ver_file, 'r', encoding=\"utf8\") as outfile:\n        version = outfile.read()\n\n    # Check if the latest version matches the one in the ignore file\n    if latest_version_str == version:\n        print('Update ignored.')\n        return True\n\n    # Delete ignore version file if the latest version is not the version in the file\n    try:\n        os.remove(ignore_ver_file)\n    except OSError:\n        print(\"FAILED TO REMOVE IGNORE VERSION FILE\")\n\n    return False\n\n\ndef get_version_list(self, context):\n    choices = []\n    if version_list:\n        for version in version_list.keys():\n            choices.append((version, version, version))\n\n    bpy.types.Object.Enum = choices\n    return bpy.types.Object.Enum\n\n\ndef get_user_preferences():\n    return bpy.context.user_preferences if hasattr(bpy.context, 'user_preferences') else bpy.context.preferences\n\n\ndef layout_split(layout, factor=0.0, align=False):\n    if bpy.app.version < (2, 79, 9):\n        return layout.split(percentage=factor, align=align)\n    return layout.split(factor=factor, align=align)\n\n\ndef draw_update_notification_panel(layout):\n    if not update_needed or remind_me_later or is_ignored_version:\n        # pass\n        return\n\n    col = layout.column(align=True)\n\n    if update_finished:\n        col.separator()\n        row = col.row(align=True)\n        row.label(text=t('draw_update_notification_panel.success'), icon='ERROR')\n        col.separator()\n        return\n\n    row = col.row(align=True)\n    row.scale_y = 0.75\n    row.label(text=t('draw_update_notification_panel.newUpdate', name=latest_version_str), icon='SOLO_ON')\n\n    col.separator()\n    row = col.row(align=True)\n    row.scale_y = 1.3\n    row.operator(UpdateToLatestButton.bl_idname, text=t('draw_update_notification_panel.UpdateToLatestButton.label'))\n\n    row = col.row(align=True)\n    row.scale_y = 1\n    row.operator(RemindMeLaterButton.bl_idname, text=t('draw_update_notification_panel.RemindMeLaterButton.label'))\n    row.operator(IgnoreThisVersionButton.bl_idname, text=t('draw_update_notification_panel.IgnoreThisVersionButton.label'))\n\n\ndef draw_updater_panel(context, layout, user_preferences=False):\n    col = layout.column(align=True)\n\n    scale_big = 2\n    scale_small = 1.2\n\n    row = col.row(align=True)\n    row.scale_y = 0.8\n    row.label(text=t('draw_updater_panel.updateLabel') if not user_preferences else t('draw_updater_panel.updateLabel_alt'), icon=ICON_URL)\n    col.separator()\n\n    if update_finished:\n        col.separator()\n        row = col.row(align=True)\n        row.label(text=t('draw_updater_panel.success'), icon='ERROR')\n        col.separator()\n        return\n\n    if show_error:\n        row = col.row(align=True)\n        row.label(text=show_error, icon='ERROR')\n        col.separator()\n\n    if is_checking_for_update:\n        if not used_updater_panel:\n            row = col.row(align=True)\n            row.scale_y = scale_big\n            row.operator(CheckForUpdateButton.bl_idname, text=t('draw_updater_panel.CheckForUpdateButton.label'))\n        else:\n            split = col.row(align=True)\n            row = split.row(align=True)\n            row.scale_y = scale_big\n            row.operator(CheckForUpdateButton.bl_idname, text=t('draw_updater_panel.CheckForUpdateButton.label'))\n            row = split.row(align=True)\n            row.alignment = 'RIGHT'\n            row.scale_y = scale_big\n            row.operator(CheckForUpdateButton.bl_idname, text=\"\", icon='FILE_REFRESH')\n\n    elif update_needed:\n        split = col.row(align=True)\n        row = split.row(align=True)\n        row.scale_y = scale_big\n        row.operator(UpdateToLatestButton.bl_idname, text=t('draw_updater_panel.UpdateToLatestButton.label', name=latest_version_str))\n        row = split.row(align=True)\n        row.alignment = 'RIGHT'\n        row.scale_y = scale_big\n        row.operator(CheckForUpdateButton.bl_idname, text=\"\", icon='FILE_REFRESH')\n\n    elif not used_updater_panel or not version_list:\n        row = col.row(align=True)\n        row.scale_y = scale_big\n        row.operator(CheckForUpdateButton.bl_idname, text=t('draw_updater_panel.CheckForUpdateButton.label_alt'))\n\n    else:\n        split = col.row(align=True)\n        row = split.row(align=True)\n        row.scale_y = scale_big\n        row.operator(UpdateToLatestButton.bl_idname, text=t('draw_updater_panel.UpdateToLatestButton.label_alt'))\n        row = split.row(align=True)\n        row.alignment = 'RIGHT'\n        row.scale_y = scale_big\n        row.operator(CheckForUpdateButton.bl_idname, text=\"\", icon='FILE_REFRESH')\n\n    # col.separator()\n    # col.separator()\n    # col.separator()\n    # row = layout_split(col, factor=0.6, align=True)\n    # row.scale_y = 0.9\n    # row.active = True if not is_checking_for_update and version_list else False\n    # row.label(text=\"Select Version:\")\n    # row.prop(context.scene, 'cats_updater_version_list', text='')\n    #\n    # row = layout_split(col, factor=0.6, align=True)\n    # row.scale_y = scale_small\n    # row.operator(UpdateToSelectedButton.bl_idname, text='Install Selected Version')\n    # row.operator(ShowPatchnotesPanel.bl_idname, text='Show Patchnotes')\n\n    col.separator()\n    col.separator()\n    split = col.row(align=True)\n    row = layout_split(split, factor=0.55, align=True)\n    row.scale_y = scale_small\n    row.active = True if not is_checking_for_update and version_list else False\n    row.operator(UpdateToSelectedButton.bl_idname, text=t('draw_updater_panel.UpdateToSelectedButton.label'))\n    row.prop(context.scene, 'cats_updater_version_list', text='')\n    row = split.row(align=True)\n    row.scale_y = scale_small\n    row.operator(ShowPatchnotesPanel.bl_idname, text=\"\", icon='WORDWRAP_ON')\n\n    # topsplit = layout_split(col, factor=0.55, align=True)\n    #\n    # split = topsplit.row(align=True)\n    # row = split.row(align=True)\n    # row.scale_y = scale_small\n    # row.active = True if not is_checking_for_update and version_list else False\n    # row.operator(UpdateToSelectedButton.bl_idname, text='Install Version:')\n    #\n    # row = split.row(align=True)\n    # row.alignment = 'RIGHT'\n    # row.scale_y = scale_small\n    # row.operator(ShowPatchnotesPanel.bl_idname, text=\"\", icon='WORDWRAP_ON')\n    #\n    # row = topsplit.row(align=True)\n    # row.scale_y = scale_small\n    # row.prop(context.scene, 'cats_updater_version_list', text='')\n\n    row = col.row(align=True)\n    row.scale_y = scale_small\n    row.operator(UpdateToDevButton.bl_idname, text=t('draw_updater_panel.UpdateToDevButton.label'))\n\n    col.separator()\n    row = col.row(align=True)\n    row.scale_y = 0.65\n    row.label(text=t('draw_updater_panel.currentVersion', name=current_version_str))\n\n\n# demo bare-bones preferences\nclass DemoPreferences(bpy.types.AddonPreferences):\n    bl_idname = package_name\n\n    def draw(self, context):\n        layout = self.layout\n        draw_updater_panel(context, layout, user_preferences=True)\n\n\nto_register = [\n    CheckForUpdateButton,\n    UpdateToLatestButton,\n    UpdateToSelectedButton,\n    UpdateToDevButton,\n    RemindMeLaterButton,\n    IgnoreThisVersionButton,\n    ShowPatchnotesPanel,\n    ConfirmUpdatePanel,\n    UpdateCompletePanel,\n    UpdateNotificationPopup,\n    DemoPreferences,\n]\n\n\ndef register(bl_info, dev_branch, version_str):\n    # print('REGISTER CATS UPDATER')\n    global current_version, fake_update, current_version_str\n\n    # If not dev branch, always disable fake update!\n    if not dev_branch:\n        fake_update = False\n    current_version_str = version_str\n\n    # Get current version\n    current_version = []\n    for i in bl_info['version']:\n        current_version.append(i)\n\n    bpy.types.Scene.cats_updater_version_list = bpy.props.EnumProperty(\n        name=t('bpy.types.Scene.cats_updater_version_list.label'),\n        description=t('bpy.types.Scene.cats_updater_version_list.desc'),\n        items=get_version_list\n    )\n    bpy.types.Scene.cats_update_action = bpy.props.EnumProperty(\n        name=t('bpy.types.Scene.cats_update_action.label'),\n        description=t('bpy.types.Scene.cats_update_action.desc'),\n        items=[\n            (\"UPDATE\", t('bpy.types.Scene.cats_update_action.update.label'), t('bpy.types.Scene.cats_update_action.update.desc')),\n            (\"IGNORE\", t('bpy.types.Scene.cats_update_action.ignore.label'), t( 'bpy.types.Scene.cats_update_action.ignore.desc')),\n            (\"DEFER\", t('bpy.types.Scene.cats_update_action.defer.label'), t( 'bpy.types.Scene.cats_update_action.defer.desc'))\n        ]\n    )\n\n    # Register all Updater classes\n    count = 0\n    for cls in to_register:\n        try:\n            bpy.utils.register_class(cls)\n            count += 1\n        except ValueError:\n            pass\n    # print('Registered', count, 'CATS updater classes.')\n    if count < len(to_register):\n        print('Skipped', len(to_register) - count, 'CATS updater classes.')\n\n\ndef unregister():\n    # Unregister all Updater classes\n    for cls in reversed(to_register):\n        try:\n            bpy.utils.unregister_class(cls)\n        except RuntimeError:\n            pass\n\n    if hasattr(bpy.types.Scene, 'cats_updater_version_list'):\n        del bpy.types.Scene.cats_updater_version_list\n"
        }
      ]
    }
  ]
}