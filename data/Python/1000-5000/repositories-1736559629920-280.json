{
  "metadata": {
    "timestamp": 1736559629920,
    "page": 280,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ThoughtfulDev/EagleEye",
      "stars": 4318,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.126953125,
          "content": ".idea\n.vscode\n*_Report.pdf\n__pycache__\nvenv\n*.log\nknown/*.jpg\nknown/*.png\ngrabber/__pycache__\nreport/__pycache__\nutils/__pycache__"
        },
        {
          "name": "Example.pdf",
          "type": "blob",
          "size": 41.53515625,
          "content": null
        },
        {
          "name": "Example_JSON.json",
          "type": "blob",
          "size": 0.634765625,
          "content": "{\n    \"google_predictions\": [\"emeraude toubia instagram\"], \n    \"instagram_names\": [\"emeraude\"], \n    \"age\": \"27\", \n    \"social_urls\": [\n        \"https://twitter.com/emeraudetoubia/status/957383692833390593?lang=de\", \n        \"https://twitter.com/gio53613\", \n        \"https://twitter.com/onlyoulon\", \n        \"https://www.instagram.com/emeraude/?hl=de\", \n        \"https://www.instagram.com/p/BO3IpgFlVTF/?hl=de\", \n        \"https://www.pinterest.com.mx/pin/344595808982228575/\", \n        \"https://www.pinterest.com/gogreengo06/gorgeous-emeraude-toubia/\", \n        \"https://www.pinterest.com/syc_mary/e-m-e-r-a-u-d-e-toubia/\"], \n    \"name\": \"Unknown\"\n}"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.455078125,
          "content": "            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2017 ThoughtfulDev\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.94921875,
          "content": "```\r\n$$$$$$$$\\                    $$\\                 $$$$$$$$\\                    \r\n$$  _____|                   $$ |                $$  _____|                   \r\n$$ |      $$$$$$\\   $$$$$$\\  $$ | $$$$$$\\        $$ |     $$\\   $$\\  $$$$$$\\  \r\n$$$$$\\    \\____$$\\ $$  __$$\\ $$ |$$  __$$\\       $$$$$\\   $$ |  $$ |$$  __$$\\ \r\n$$  __|   $$$$$$$ |$$ /  $$ |$$ |$$$$$$$$ |      $$  __|  $$ |  $$ |$$$$$$$$ |\r\n$$ |     $$  __$$ |$$ |  $$ |$$ |$$   ____|      $$ |     $$ |  $$ |$$   ____|\r\n$$$$$$$$\\\\$$$$$$$ |\\$$$$$$$ |$$ |\\$$$$$$$\\       $$$$$$$$\\\\$$$$$$$ |\\$$$$$$$\\ \r\n\\________|\\_______| \\____$$ |\\__| \\_______|      \\________|\\____$$ | \\_______|\r\n                   $$\\   $$ |                             $$\\   $$ |          \r\n                   \\$$$$$$  |                             \\$$$$$$  |          \r\n                    \\______/                               \\______/         \r\n                                                                      \r\n```\r\n\r\n<div align=\"center\">\r\n\r\n![Python 3.5](https://img.shields.io/badge/Python-3.6%2B-blue.svg)\r\n![OS Linux](https://img.shields.io/badge/Supported%20OS-Linux-yellow.svg)\r\n![Lets stalk](https://img.shields.io/badge/Stalkermode-Activated-red.svg)\r\n\r\n</div>\r\n\r\n---\r\n\r\n<p align=\"center\"> You have at least one image of the person you are looking for and a clue about their name. \r\n<br>\r\nYou enter this data into EagleEye and it tries to find Instagram, Youtube, Facebook, and Twitter Profiles of this person.\r\n    <br> \r\n</p>\r\n\r\n## üìù Table of Contents\r\n- [Getting Started](#getting_started)\r\n- [Usage](#usage)\r\n- [Built Using](#built_using)\r\n- [TODO](#todo)\r\n- [Authors](#authors)\r\n- [Acknowledgments](#acknowledgement)\r\n\r\n\r\n## üèÅ Getting Started <a name = \"getting_started\"></a>\r\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes.\r\n\r\n### Prerequisites\r\n\r\n- A system with a x-server installed (Linux)\r\n- Firefox installed\r\n\r\n#### When using docker\r\n- Only docker is required\r\n\r\n#### When you dont use docker\r\n- Python 3.6 or higher\r\n- Pythons pip\r\n\r\n\r\n### Installing\r\n\r\n#### Docker (Preferred)\r\n**Make sure that you have docker installed**\r\n**Make sure that you use a LINUX distribution as the host**\r\n1. Clone the Repository\r\n\r\n   ``` $ git clone https://github.com/ThoughtfulDev/EagleEye ```\r\n2. ```\r\n   $ cd EagleEye\r\n   $ sudo docker build -t eagle-eye .\r\n   ```\r\n3. Now create a `known` folder and a `result` folder anywhere on your PC.\r\n4. Put the images of the known person in the known folder.\r\n5. Change the name of the person your are searching for in `entry.sh`\r\n6. Start the container. **Make sure to edit the paths**:\r\n```\r\nsudo docker run -t --net=host --env=\"DISPLAY\" \\\r\n                           --volume=\"$HOME/.Xauthority:/root/.Xauthority:rw\"  \\\r\n                           -v  /path/to/known:/EagleEye/known \\\r\n                           -v  /path/to/result:/result \\\r\n                           -v /path/to/EagleEye/Repository/entry.sh:/entry.sh \\\r\n                           eagle-eye\r\n\r\n```\r\n\r\nThe result should now be in `/path/to/result`\r\n\r\n---\r\n\r\n#### Automated Prerequisites Installation (If Docker doesn't work)\r\n```\r\nwget https://raw.githubusercontent.com/ThoughtfulDev/EagleEye/master/install.sh && chmod +x install.sh && ./install.sh\r\n```\r\n\r\n---\r\n\r\n#### Manual Prerequisites Installation (If you are hardcore)\r\n\r\nFor **Debian** based Distros\r\n```\r\n$ sudo apt update && sudo apt upgrade -y\r\n$ sudo apt install git python3 python3-pip python3-dev\r\n$ sudo apt install libgtk-3-dev libboost-all-dev build-essential cmake libffi-dev\r\n$ git clone https://github.com/ThoughtfulDev/EagleEye\r\n$ cd EagleEye && sudo pip3 install -r requirements.txt\r\n$ sudo pip3 install --upgrade beautifulsoup4 html5lib spry\r\n```\r\n\r\nFor **Arch**\r\n```\r\n$ sudo pacman -Syu\r\n$ sudo pacman -S git python python-pip gtk3 boost cmake libffi\r\n$ git clone https://github.com/ThoughtfulDev/EagleEye\r\n$ cd EagleEye && sudo pip3 install -r requirements.txt\r\n$ sudo pip3 install --upgrade beautifulsoup4 html5lib spry\r\n```\r\n\r\n\r\nIf Firefox is installed, download the [latest release](https://github.com/mozilla/geckodriver/releases/latest) of the Geckodriver for you Architecture.\r\n\r\n**If you get a `broken pipe` Error use Geckodriver Version 0.19.1.**\r\n\r\n**Note: If you are using Firefox ESR (like Kali does) please use the Geckodriver Version 0.17.**\r\n\r\nMake the Geckodriver executable:\r\n```\r\n$ chmod +x /path/to/geckodriver\r\n```\r\n\r\nNote: The `geckodriver` prefers to be in your path so wherever you do set it up you will likely need to setup a link to somewhere in your PATH (or add it to your PATH).\r\n\r\nExample:\r\n```\r\n$ sudo ln -s /path/to/geckodriver /usr/local/bin/geckodriver\r\n```\r\n\r\n\r\n## üéà Usage <a name=\"usage\"></a>\r\n\r\n### Configuration: General\r\n\r\nChange the value in `config.json` to the path of the `geckodriver` e.g\r\n```\r\n{\r\n    \"DEFAULTS\": {\r\n        ...\r\n    },\r\n    \"WEBDRIVER\": {\r\n        \"ENGINE\": \"firefox\",\r\n        \"PATH\": \"/usr/local/bin/geckodriver\"\r\n    },\r\n    \"FILTER\": [\r\n        ....\r\n    ],\r\n    ...\r\n}\r\n```\r\n\r\n### Configuration: Images\r\n\r\nPut at least one Image of the Person you want to find in the `known` folder.\r\n\r\nSupported Filetypes are: **jpg/JPG, jpeg/JPEG, png/PNG, and bmp/BMP.**\r\n\r\n### Run\r\n\r\nThen run the program ;)\r\n```\r\n$ python3 eagle-eye.py\r\n```\r\n\r\nTo see a list of all available Options just type\r\n```\r\n$ python3 eagle-eye.py -h\r\n```\r\n\r\n*The ImageRaider Reverse Image Search can take some minutes 1-15 Minutes depending on the count of Images*\r\n\r\n\r\n## TODO <a name = \"todo\"></a>\r\n* Implement the Chrome Webdriver\r\n\r\n## ‚õèÔ∏è Built Using <a name = \"built_using\"></a>\r\n- [Python](https://www.python.org/) - Language\r\n- [dlib](http://dlib.net/) - Face detection\r\n- [face_recognition](https://github.com/ageitgey/face_recognition) - dlib python api\r\n- [Selenium](https://www.seleniumhq.org/) - WebBrowser automation\r\n\r\n## ‚úçÔ∏è Authors <a name = \"authors\"></a>\r\n- [@ThoughtfulDev](https://github.com/ThoughtfulDev) - Idea & Work\r\n\r\n## üéâ Acknowledgements <a name = \"acknowledgement\"></a>\r\n- The movie Eagle Eye\r\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.3720703125,
          "content": "{\n    \"DEFAULTS\": {\n        \"SLEEP_DELAY\": \"7\",\n        \"GOOGLE_IMG_PAGES\": \"3\"\n    },\n    \"WEBDRIVER\": {\n        \"ENGINE\": \"firefox\",\n        \"PATH\": \"/usr/bin/geckodriver\"\n    },\n    \"FILTER\": [\n        \"instagram.com\",\n        \"twitter.com\",\n        \"pinterest.com\",\n        \"plus.google.com\",\n        \"url?\"\n    ],\n    \"INSTA_VALIDATION_MAX_IMAGES\": \"5\",\n    \"JITTERS\": \"70\"\n}\n"
        },
        {
          "name": "dockerfile",
          "type": "blob",
          "size": 1.2998046875,
          "content": "FROM ubuntu:16.04\n\nRUN apt-get clean && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales\nRUN locale-gen en_US.UTF-8\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\nENV TERM dumb\nENV PYTHONIOENCODING=utf-8\n\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y git curl software-properties-common unzip\nRUN apt-get update && add-apt-repository -y ppa:deadsnakes/ppa && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y python3.6 python3.6-dev\nRUN curl https://bootstrap.pypa.io/get-pip.py | python3.6\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y libgtk-3-dev libboost-all-dev build-essential cmake libffi-dev\nRUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y firefox\nRUN git clone https://github.com/ThoughtfulDev/EagleEye\nWORKDIR EagleEye\nRUN pip3.6 install -r requirements.txt\nRUN pip3.6 install --upgrade beautifulsoup4 html5lib spry\nADD https://github.com/mozilla/geckodriver/releases/download/v0.27.0/geckodriver-v0.27.0-linux64.tar.gz /EagleEye/geckodriver.tar.gz\nRUN tar -xvf geckodriver.tar.gz\nRUN mv geckodriver /usr/bin/geckodriver\nRUN chmod +x /usr/bin/geckodriver\nRUN rm -r /EagleEye/known/\nENTRYPOINT bash /entry.sh\n\n"
        },
        {
          "name": "eagle-eye.py",
          "type": "blob",
          "size": 7.4736328125,
          "content": "#!/usr/bin/env python3\n\nimport os, sys\nimport tempfile\nimport argparse\nfrom collections import Counter\nfrom pathlib import Path\nimport utils.console as console\nimport utils.config as cfg\nfrom grabber.facebook import FBGrabber, FBProfileGrabber\nfrom grabber.google import GoogleGrabber\nfrom grabber.instagram import InstagramGrabber\nfrom face_recog import FaceRecog\nimport subprocess, json, shutil\nfrom report.report import makeReport, makeJSONReport\n\n\ndef presentResult(predictions):\n    if len(predictions) > 0:\n        argmax = Counter(predictions)\n        console.section(\"Result\")\n        if len(argmax.most_common(n=1)) > 0:\n            (most_common_str, _) = argmax.most_common(n=1)[0]\n        else:\n            most_common_str = 'None'\n        console.task(\"Google says it could be: {0}\".format(most_common_str))\n    else:\n        console.failure(\"No predictions found\")\n\ndef filterInstaLinks(links):\n    r = []\n    for l in links:\n        if \"www.instagram.com\" in l:\n            r.append(l)\n    return r\n\ndef parseInstaUsername(links):\n    usernames = []\n    for l in links:\n        a = l[8:]\n        a = a.split('/')\n        if len(a) >= 2:\n            if len(a[1]) >= 4:\n                usernames.append(a[1])\n        else:\n            console.subfailure('Error parsing {0}'.format(l))\n    return usernames\n\n\ndef validateInstaUser(username, num_jitters):\n    images = getInstaLinks(username)\n    #print(images)\n    if len(images) >= cfg.instaLimit():\n        images = images[:cfg.instaLimit()]\n    r = FaceRecog(username, images, num_jitters=num_jitters)\n    r.loadKnown(username)\n    profile_links, _ = r.getValidLinksAndImg(username)\n    return len(profile_links) > 0\n\ndef getInstaLinks(username):\n    instagrabber = InstagramGrabber(username)\n    return instagrabber.getLinks()\n\ndef main(skipFB=False, FBUrls=[], jsonRep=None, dockerMode=False, dockerName=None):\n    if not skipFB:\n        # collect user input\n        if dockerMode:\n            console.section(\"Running in DOCKER MODE\")\n            name = dockerName\n        else:\n            console.prompt('Enter the persons name to find on FB: ')\n            name = input('')\n            while not name:\n                console.prompt('Enter the persons name to find on FB: ')\n                name = input('')\n    else:\n        console.task('Skipping FB Search')\n        name = \"Unknown\"\n\n    \n    if dockerMode:\n        console.task('Skipping jitters since specified in config.json')\n        num_jitters = cfg.jitters()\n    else:\n        console.prompt('How many jitters, higher is better [max 100] (default=70): ')\n        num_jitters = input('')\n    if not num_jitters:\n        console.task('Settings jitters to 70')\n        num_jitters = 70\n    num_jitters = int(num_jitters)\n    if num_jitters > 100:\n        console.subfailure('Dude wtf?!')\n        num_jitters = 100\n        console.subfailure('Using 100 jitters...')\n\n    if not skipFB:\n        # grab profile urls\n        f = FBGrabber(name)\n        f.grabData()\n        # do face recognition on those profile images\n        r = FaceRecog(f.getProfileLinks(), f.getProfileImages(), num_jitters=num_jitters)\n        r.loadKnown(name)\n        profile_links, profile_imgs = r.getValidLinksAndImg(name)\n        console.section('Result')\n        console.task('Found the following Profiles:')\n        for i in range(len(profile_links)):\n            console.subtask(profile_links[i])\n    else:\n        if len(FBUrls) > 0:\n            f = FBProfileGrabber(FBUrls)\n            img_urls = f.grabLinks()\n            #FBURLS are our profile links synchron with img_urls\n            # so FBURLS[0] <=> img_urls[0]\n            r = FaceRecog(FBUrls, img_urls, num_jitters=num_jitters)\n            r.loadKnown(name)\n            profile_links, profile_imgs = r.getValidLinksAndImg(name)\n            console.section('Result')\n            console.task('Found the following Profiles:')\n            for i in range(len(profile_links)):\n                console.subtask(profile_links[i])\n        else:\n            profile_links = []\n            profile_imgs = []\n\n    # google reverse image search on profile pics\n    g = GoogleGrabber()\n    for img in profile_imgs:\n        g.collectLinks(img)\n\n    # google reverse image search on reference pic\n    g.collectLinksLocal()\n    rev_links, predictions = g.finish()\n\n    rev_links = list(set(rev_links))\n\n    instaNames = parseInstaUsername(filterInstaLinks(rev_links))\n    validatedInstaNames = []\n    console.section(\"Validating Instagram Profiles\")\n    for un in instaNames:\n        console.task(\"Validating Profile: '{0}'\".format(un))\n        if validateInstaUser(un, num_jitters):\n            validatedInstaNames.append(un)\n    \n\n    raider_img_list = profile_imgs\n    for v in validatedInstaNames:\n        l = getInstaLinks(v)\n\n        for li in l:\n            raider_img_list.append(li)\n\n\n    rev_links = list(set(rev_links))\n    predictions = list(set(predictions))\n    console.section('Links')\n    print(rev_links)\n    console.section('Predictions')\n    try:\n        predictions = [x.lower() for x in predictions]\n    except:\n        predictions = []\n    print(predictions)\n    presentResult(predictions)\n    \n    for pl in profile_links:\n        rev_links.append(pl)\n    rev_links = list(set(rev_links))\n\n\n    if jsonRep:\n        console.section(\"Dumping JSON Report\")\n        makeJSONReport(name, rev_links, predictions, validatedInstaNames, jsonRep)\n    else:\n        console.section(\"Creating PDF Report\")\n        makeReport(name, rev_links, predictions, validatedInstaNames)\n\n\n    p = os.path.join(tempfile.gettempdir(), 'imageraider')\n    if os.path.isdir(p):\n        pathlist = Path(p).glob('**/*')\n        for path in pathlist:\n            s_p = str(path)\n            os.remove(s_p)\n    console.task(\"KTHXBYE\")\n\n\nif __name__ == \"__main__\":\n    console.banner()\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-sFB', '--skipfb', action='store_true', help='Skips the Facebook Search')\n    parser.add_argument('-d', '--docker', action='store_true', help='Set this flag if run in docker mode')\n    parser.add_argument('-n', '--name', nargs='?', help='Specify the persons name. Only active with the --docker flag')\n    parser.add_argument('-json', '--json', nargs='?', help='Generates a json report. Specify a Filename')\n    parser.add_argument('-fbList', \n                        '--facebookList', \n                        nargs='?', \n                        help=\"A file which contains Links to Facebook Profiles. '--skipfb' options must be enabled to use this\" )\n    args = parser.parse_args()\n\n    if args.docker:\n        aDocker = args.docker\n        if args.name:\n            aName = args.name\n        else:\n            console.failure(\"Please supply a name using the --name flag\")\n            sys.exit(-2)\n    else:\n        aName = None\n        aDocker = False\n\n    if args.json:\n        jsonRepFile = args.json\n        if os.path.isfile(jsonRepFile):\n            console.failure(\"File '{}' already exists\".format(jsonRepFile))\n            sys.exit(-1)\n    else:\n        jsonRepFile = None\n\n    if args.facebookList and args.skipfb:\n        if os.path.isfile(args.facebookList):\n            with open(args.facebookList, 'r') as f:\n                content = f.readlines()\n            content = [x.strip() for x in content] \n            main(skipFB=args.skipfb, FBUrls=content, jsonRep=jsonRepFile, dockerMode=aDocker, dockerName=aName)\n        else:\n            console.failure(\"File '{}' does not exist\".format(args.facebookList))\n            sys.exit(-1)\n    else:\n        main(skipFB=args.skipfb, FBUrls=[], jsonRep=jsonRepFile, dockerMode=aDocker, dockerName=aName)\n"
        },
        {
          "name": "entry.sh",
          "type": "blob",
          "size": 0.1318359375,
          "content": "#!/bin/bash\ncd /EagleEye\npython3.6 eagle-eye.py --docker --name \"Emeraude\"\n\n#now copy the result\nyes | cp -rf /EagleEye/*.pdf /result/\n"
        },
        {
          "name": "face_recog.py",
          "type": "blob",
          "size": 3.6494140625,
          "content": "import cv2\nimport face_recognition\nfrom urllib.request import urlretrieve\nfrom pathlib import Path\n\nimport os\nimport tempfile\nfrom sys import platform\nimport random\nimport string\nimport utils.console as console\n\n\nclass FaceRecog:\n    def __init__(self, profile_list, profile_img, num_jitters=10):\n        self.profile_list = profile_list\n        self.profile_img = profile_img\n        self.num_jitters = num_jitters\n        self.known_face_encodings = []\n        self.known_face_names = []\n        console.section('Starting Face Recognition')\n\n\n\n    def loadKnown(self, label):    \n        console.task('Loading known faces')\n        pa_g = Path('./known')\n        pathlist = []\n        for ext in ['.jpg', '.JPG', '.png', '.PNG', '.jpeg', '.JPEG', '.bmp', '.BMP']:\n            tmp_pl = pa_g.glob('**/*{}'.format(ext))\n            for t in tmp_pl:\n                pathlist.append(t)\n        for path in pathlist:\n            p_str = str(path)\n            delim = '/'\n            if platform == \"win32\":\n                delim = '\\\\'\n            console.subtask('Loading {0}'.format(p_str.split(delim)[1]))\n            im = face_recognition.load_image_file(p_str)\n            encoding = face_recognition.face_encodings(im, num_jitters=self.num_jitters)\n            for e in encoding:\n                self.known_face_encodings.append(e)\n                self.known_face_names.append(label)\n\n    def constructIndexes(self, label):\n        valid_links = []\n        console.section('Analyzing')\n        file_name = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))\n        file_name += '.jpg'\n        tmp_path = os.path.join(tempfile.gettempdir(), file_name)\n        console.task(\"Storing Image in {0}\".format(tmp_path))\n        for num, i in enumerate(self.profile_img):\n            console.task('Analyzing {0}...'.format(i.strip()[:90]))\n            urlretrieve(i, tmp_path)\n            frame = cv2.imread(tmp_path)\n            big_frame = cv2.resize(frame, (0, 0), fx=2.0, fy=2.0)\n            rgb_small_frame = big_frame[:, :, ::-1]\n            face_locations = face_recognition.face_locations(rgb_small_frame)\n            face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations, num_jitters=self.num_jitters)\n            face_names = []\n            for face_encoding in face_encodings:\n                # See if the face is a match for the known face(s)\n                matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)\n                name = \"Unknown\"\n                # If a match was found in known_face_encodings, just use the first one.\n                if True in matches:\n                    first_match_index = matches.index(True)\n                    name = self.known_face_names[first_match_index]\n                face_names.append(name)\n\n            for _, name in zip(face_locations, face_names):\n                if name == label:\n                    valid_links.append(num)\n        if os.path.isfile(tmp_path):\n            console.task(\"Removing {0}\".format(tmp_path))\n            os.remove(tmp_path)\n        return valid_links\n    \n    def getValidLinksAndImg(self, label):\n        if len(self.known_face_encodings) <= 0:\n            console.failure('No Face Encodings found!')\n            console.failure('Did you call `loadKnown(label)` before calling this method?')\n            return [], []\n        valid_url = []\n        valid_img = []\n        valid_indexes = self.constructIndexes(label)\n        for index in valid_indexes:\n            try:\n                valid_url.append(self.profile_list[index])\n                valid_img.append(self.profile_img[index])\n            except:\n                pass\n        return valid_url, valid_img\n"
        },
        {
          "name": "grabber",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.373046875,
          "content": "#!/bin/bash\n\necho \"\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù       ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó         ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  \n‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù         ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù    ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  \n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\nInstall Script\n\"\n\ndebian_install() {\n    sudo apt update && sudo apt upgrade -y\n    sudo apt install git python3 python3-pip python3-dev\n    sudo apt install libgtk-3-dev libboost-all-dev build-essential cmake libffi-dev\n}\n\narch_install_package() {\n    package=$1\n    if sudo pacman -Qi $package > /dev/null ; then\n        echo \"$package is already installed\"\n    else\n        echo \"Installing $package\"\n        sudo pacman -S $package\n    fi\n}\n\narch_install() {\n    sudo pacman -Syu\n    arch_install_package \"git\"\n    arch_install_package \"python\"\n    arch_install_package \"python-pip\"\n    arch_install_package \"gtk3\"\n    arch_install_package \"boost\"\n    arch_install_package \"cmake\"\n    arch_install_package \"libffi\"\n}\n\nfedora_install() {\n    sudo yum update\n}\n\npython_setup() {\n    git clone https://github.com/ThoughtfulDev/EagleEye\n    cd EagleEye && sudo pip3 install -r requirements.txt\n    sudo pip3 install --upgrade beautifulsoup4 html5lib spry\n\n    echo  \"Installation done\"\n    echo \"Now download the Geckodriver\"\n}\n\nif [ \"$(grep -Ei 'debian|ubuntu|mint' /etc/*release)\" ]; then\n    debian_install\n    python_setup\nfi\n\nif [ \"$(grep -Ei 'arch' /etc/*release)\" ]; then\n    arch_install\n    python_setup\nfi\n\nif [ \"$(grep -Ei 'fedora|redhat' /etc/*release)\" ]; then\n    echo \"yum is currently not supported.\"\nfi\n\n\n"
        },
        {
          "name": "known",
          "type": "tree",
          "content": null
        },
        {
          "name": "report",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0732421875,
          "content": "termcolor\nopencv-python\nselenium\nface_recognition\nWeasyPrint\nrequests-html\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}