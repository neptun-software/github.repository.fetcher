{
  "metadata": {
    "timestamp": 1736559920565,
    "page": 684,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "grantjenks/free-python-games",
      "stars": 3571,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1904296875,
          "content": "# Python byte-code\n*.py[co]\n\n# virutalenv directories\n/env*/\n\n# coverage files\n.coverage\n\n# setup, test and upload directories\n/.cache/\n/.tox/\n/build/\n/dist/\n/docs/_build/\n*.egg-info/\n\n.DS_Store\n"
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 15.0908203125,
          "content": "[MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code\nextension-pkg-whitelist=\n\n# Add files or directories to the blacklist. They should be base names, not\n# paths.\nignore=CVS\n\n# Add files or directories matching the regex patterns to the blacklist. The\n# regex matches against base names, not paths.\nignore-patterns=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint.\njobs=1\n\n# List of plugins (as comma separated values of python modules names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Specify a configuration file.\n#rcfile=\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED\nconfidence=\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once).You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use\"--disable=all --enable=classes\n# --disable=W\"\ndisable=\n    apply-builtin,\n    backtick,\n    bad-inline-option,\n    bad-python3-import,\n    bare-except,\n    basestring-builtin,\n    buffer-builtin,\n    cmp-builtin,\n    cmp-method,\n    coerce-builtin,\n    coerce-method,\n    consider-using-enumerate,\n    delslice-method,\n    deprecated-pragma,\n    deprecated-str-translate-call,\n    deprecated-string-function,\n    dict-iter-method,\n    dict-view-method,\n    div-method,\n    eq-without-hash,\n    exception-message-attribute,\n    execfile-builtin,\n    file-builtin,\n    file-ignored,\n    filter-builtin-not-iterating,\n    fixme,\n    getslice-method,\n    hex-method,\n    idiv-method,\n    import-star-module-level,\n    indexing-exception,\n    input-builtin,\n    intern-builtin,\n    invalid-name,\n    invalid-sequence-index,\n    invalid-str-codec,\n    invalid-unary-operand-type,\n    len-as-condition,\n    locally-disabled,\n    locally-enabled,\n    long-builtin,\n    long-suffix,\n    map-builtin-not-iterating,\n    metaclass-assignment,\n    next-method-called,\n    no-absolute-import,\n    nonzero-method,\n    oct-method,\n    old-division,\n    old-ne-operator,\n    old-octal-literal,\n    old-raise-syntax,\n    parameter-unpacking,\n    print-statement,\n    raising-string,\n    range-builtin-not-iterating,\n    raw-checker-failed,\n    raw_input-builtin,\n    rdiv-method,\n    reduce-builtin,\n    reload-builtin,\n    round-builtin,\n    setslice-method,\n    standarderror-builtin,\n    suppressed-message,\n    sys-max-int,\n    undefined-variable,\n    unichr-builtin,\n    unicode-builtin,\n    unpacking-in-except,\n    unused-argument,\n    unused-variable,\n    unused-wildcard-import,\n    useless-suppression,\n    using-cmp-argument,\n    wildcard-import,\n    xrange-builtin,\n    zip-builtin-not-iterating,\n    no-else-return,\n    assigning-non-slot,\n    unnecessary-pass,\n    consider-using-sys-exit,\n    import-outside-toplevel,\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=\n\n\n[REPORTS]\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (RP0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio).You can also give a reporter class, eg\n# mypackage.mymodule.MyReporterClass.\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n\n[BASIC]\n\n# Naming hint for argument names\nargument-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct argument names\nargument-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Naming hint for attribute names\nattr-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct attribute names\nattr-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=foo,bar,baz,toto,tutu,tata\n\n# Naming hint for class attribute names\nclass-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Regular expression matching correct class attribute names\nclass-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$\n\n# Naming hint for class names\nclass-name-hint=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression matching correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Naming hint for constant names\nconst-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression matching correct constant names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming hint for function names\nfunction-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct function names\nfunction-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,Run,_\n\n# Include a hint for the correct naming format with invalid-name\ninclude-naming-hint=no\n\n# Naming hint for inline iteration names\ninlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$\n\n# Regular expression matching correct inline iteration names\ninlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$\n\n# Naming hint for method names\nmethod-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct method names\nmethod-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Naming hint for module names\nmodule-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression matching correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\nproperty-classes=abc.abstractproperty\n\n# Naming hint for variable names\nvariable-name-hint=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n# Regular expression matching correct variable names\nvariable-rgx=(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging  or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module\nmax-module-lines=1000\n\n# List of optional constructs for which whitespace checking is disabled. `dict-\n# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\\n222: 2}.\n# `trailing-comma` allows a space between comma and closing bracket: (a, ).\n# `empty-line` allows space-only lines.\nno-space-check=trailing-comma,dict-separator\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[LOGGING]\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format\nlogging-modules=logging\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX,TODO\n\n\n[SIMILARITIES]\n\n# Ignore comments when computing similarities.\nignore-comments=yes\n\n# Ignore docstrings when computing similarities.\nignore-docstrings=yes\n\n# Ignore imports when computing similarities.\nignore-imports=no\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=8\n\n\n[SPELLING]\n\n# Spelling dictionary name. Available dictionaries: none. To make it working\n# install python-enchant package.\nspelling-dict=\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to indicated private dictionary in\n# --spelling-private-dict-file option instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis. It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid to define new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,_cb\n\n# A regular expression matching the name of dummy variables (i.e. expectedly\n# not used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,future.builtins\n\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,__new__,setUp\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,_fields,_replace,_source,_make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in a if statement\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[IMPORTS]\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Deprecated modules which should not be used, separated by a comma\ndeprecated-modules=optparse\n\n# Create a graph of external dependencies in the given file (report RP0402 must\n# not be disabled)\next-import-graph=\n\n# Create a graph of every (i.e. internal and external) dependencies in the\n# given file (report RP0402 must not be disabled)\nimport-graph=\n\n# Create a graph of internal dependencies in the given file (report RP0402 must\n# not be disabled)\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"Exception\"\novergeneral-exceptions=Exception\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5458984375,
          "content": "Copyright 2017-2023 Grant Jenks\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License.  You may obtain a copy of the\nLicense at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0576171875,
          "content": "include README.rst\ninclude LICENSE\ninclude freegames/*.gif\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 11.72265625,
          "content": "Free Python Games\n=================\n\n`Free Python Games`_ is an Apache2 licensed collection of free Python games\nintended for education and fun. The games are written in simple Python code and\ndesigned for experimentation and changes. Simplified versions of several\nclassic arcade games are included.\n\nPython is one of the top-five most popular programming languages in the world\nand available for free from `Python.org <https://www.python.org/>`_. Python\nincludes an extensive Standard Library distributed with your installation. The\nStandard Library has a module called Turtle which is a popular way to introduce\nprogramming to kids. Turtle was part of the original Logo programming language\ndeveloped by Wally Feurzig and Seymour Papert in 1966. All of the games in\n`Free Python Games`_ are implemented using Python and its Turtle module.\n\nStarting in 2012, `Free Python Games`_ began as an after school program to\nteach programming to inner-city youth. The goal was to have fun as much as it\nwas to learn. Since then the games have been improved and used in a variety of\nsettings ranging from classrooms to summer day-camps.\n\nThe games run anywhere Python can be installed which includes desktop computers\nrunning Windows, Mac OS, or Linux and older or low-power hardware such as the\nRaspberry Pi. Kids across the United States in grades 6th-12th have enjoyed\nlearning about topics such as encryption and projectile motion through games.\n\nEach game is entirely independent from the others and includes comments along\nwith a list of exercises to work through with students. Creativity and\nflexibility is important. There is no right or wrong way to implement a new\nfeature or behavior! You never know which games students will engage with best.\n\n.. _`Free Python Games`: https://grantjenks.com/docs/freegames/\n\n\nTestimonials\n------------\n\n*\"I love Free Python Games because the games are fun and they're easy to\nunderstand and change. I like making my own games now.\"*\n\n-- Luke Martin, Student\n\n*\"Free Python Games inspired and introduced a new hobby to our son. Thank you so\nmuch for exposing him to coding. He is having so much fun!\"*\n\n-- Mary Lai, Parent\n\n*\"Free Python Games are great because they really engage students and let them\nlearn at their own pace.\"*\n\n-- Rick Schertle, Teacher, Steindorf STEAM School\n\n*\"Free Python Games combines play and learning in a flexible environment that\nreduces the stress of a difficult topic like programming.\"*\n\n-- Brett Bymaster, Youth Pastor, The River Church Community\n\n*\"Free Python Games is great for students, is highly organized and flexible,\nand seeks to unleash inquiry and understanding.\"*\n\n-- Terri Furton, Principal, Downtown College Prep\n\n\nFeatures\n--------\n\n- Fun to play!\n- Simple Python code\n- Easy to install\n- Designed for education\n- Depends only on the Python Standard Library\n- Used in hundreds of hours of classroom instruction\n- Fully Documented\n- 100% Test Coverage\n- Developed on Python 3.10\n- Tested on CPython 3.6, 3.7, 3.8, 3.9, 3.10\n- Tested on Linux, Mac OS X, and Windows\n- Tested using GitHub Actions\n\n.. image:: https://github.com/grantjenks/free-python-games/workflows/integration/badge.svg\n   :target: https://grantjenks.com/docs/freegames/\n\n\nQuickstart\n----------\n\nInstalling Free Python Games is simple with `pip\n<https://pypi.python.org/pypi/pip>`_::\n\n  $ python3 -m pip install freegames\n\nFree Python Games supports a command-line interface (CLI). Help for the CLI is\navailable using::\n\n  $ python3 -m freegames --help\n\nThe CLI supports three commands: list, copy, and show. For a list of all games\nrun::\n\n  $ python3 -m freegames list\n\nAny of the listed games may be played by executing the Python module from the\ncommand-line. To reference the Python module, combine \"freegames\" with the name\nof the game. For example, to play the \"snake\" game run::\n\n  $ python3 -m freegames.snake\n\nGames can be modified by copying their source code. The copy command will\ncreate a Python file in your local directory which you can edit. For example,\nto copy and play the \"snake\" game run::\n\n  $ python3 -m freegames copy snake\n  $ python3 snake.py\n\nPython includes a built-in text editor named IDLE which can also execute Python\ncode. To launch the editor and make changes to the \"snake\" game run::\n\n  $ python3 -m idlelib.idle snake.py\n\nYou can also access documentation in the interpreter with Python's built-in\nhelp function::\n\n  >>> import freegames\n  >>> help(freegames)\n\nFree Python Games also provides an entry-point script for compatibility with\n`pipx <https://pypa.github.io/pipx/>`_::\n\n  $ pipx install freegames\n  $ freegames play life\n\n\nFree Games\n----------\n\nPaint\n.....\n\n`Paint`_ -- draw lines and shapes on the screen. Click to mark the start of a\nshape and click again to mark its end. Different shapes and colors can be\nselected using the keyboard.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/paint.gif\n   :alt: Paint Free Python Game\n\n.. _`Paint`: https://grantjenks.com/docs/freegames/paint.html\n\nSnake\n.....\n\n`Snake`_ -- classic arcade game. Use the arrow keys to navigate and eat the\ngreen food. Each time the food is consumed, the snake grows one segment\nlonger. Avoid eating yourself or going out of bounds!\n\n.. image:: https://grantjenks.com/docs/freegames/_static/snake.gif\n   :alt: Snake Free Python Game\n\n.. _`Snake`: https://grantjenks.com/docs/freegames/snake.html\n\nPacman\n......\n\n`Pacman`_ -- classic arcade game. Use the arrow keys to navigate and eat all\nthe white food. Watch out for red ghosts that roam the maze.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/pacman.gif\n   :alt: Pacman Free Python Game\n\n.. _`Pacman`: https://grantjenks.com/docs/freegames/pacman.html\n\nCannon\n......\n\n`Cannon`_ -- projectile motion. Click the screen to fire your cannnonball. The\ncannonball pops blue balloons in its path. Pop all the balloons before they can\ncross the screen.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/cannon.gif\n   :alt: Cannon Free Python Game\n\n.. _`Cannon`: https://grantjenks.com/docs/freegames/cannon.html\n\nConnect\n.......\n\n`Connect`_ -- Connect 4 game. Click a row to drop a disc. The first player to\nconnect four discs vertically, horizontally, or diagonally wins!\n\n.. image:: https://grantjenks.com/docs/freegames/_static/connect.gif\n   :alt: Connect 4 Free Python Game\n\n.. _`Connect`: https://grantjenks.com/docs/freegames/connect.html\n\nFlappy\n......\n\n`Flappy`_ -- Flappy-bird inspired game. Click the screen to flap your\nwings. Watch out for black ravens as you fly across the screen.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/flappy.gif\n   :alt: Flappy Bird Free Python Game\n\n.. _`Flappy`: https://grantjenks.com/docs/freegames/flappy.html\n\nMemory\n......\n\n`Memory`_ -- puzzle game of number pairs. Click a tile to reveal a\nnumber. Match two numbers and the tiles will disappear to reveal an image.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/memory.gif\n   :alt: Memory Free Python Game\n\n.. _`Memory`: https://grantjenks.com/docs/freegames/memory.html\n\nPong\n....\n\n`Pong`_ -- classic arcade game. Use the keyboard to move your paddle up and\ndown. The first player to miss the ball loses.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/pong.gif\n   :alt: Pong Free Python Game\n\n.. _`Pong`: https://grantjenks.com/docs/freegames/pong.html\n\nSimon Says\n..........\n\n`Simon Says`_ -- classic memory puzzle game. Click the screen to start. Watch\nthe pattern and then click the tiles in the same order. Each time you get the\nsequence right the pattern gets one step longer.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/simonsays.gif\n   :alt: Simon Says Free Python Game\n\n.. _`Simon Says`: https://grantjenks.com/docs/freegames/simonsays.html\n\nTic Tac Toe\n...........\n\n`Tic Tac Toe`_ -- classic game. Click the screen to place an X or O. Connect\nthree in a row and you win!\n\n.. image:: https://grantjenks.com/docs/freegames/_static/tictactoe.gif\n   :alt: Tic Tac Toe Free Python Game\n\n.. _`Tic Tac Toe`: https://grantjenks.com/docs/freegames/tictactoe.html\n\nTiles\n.....\n\n`Tiles`_ -- puzzle game of sliding numbers into place. Click a tile adjacent to\nthe empty square to swap positions. Can you make the tiles count one to fifteen\nfrom left to right and bottom to top?\n\n.. image:: https://grantjenks.com/docs/freegames/_static/tiles.gif\n   :alt: Tiles Free Python Game\n\n.. _`Tiles`: https://grantjenks.com/docs/freegames/tiles.html\n\nTron\n....\n\n`Tron`_ -- classic arcade game. Use the keyboard to change the direction of\nyour Tron player. Avoid touching the line drawn by your opponent.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/tron.gif\n   :alt: Tron Free Python Game\n\n.. _`Tron`: https://grantjenks.com/docs/freegames/tron.html\n\nLife\n....\n\n`Life`_ -- Conway's Game of Life. The classic, zero-player, cellular automation\ncreated in 1970 by John Conway.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/life.gif\n   :alt: Game of Life Free Python Game\n\n.. _`Life`: https://grantjenks.com/docs/freegames/life.html\n\nMaze\n....\n\n`Maze`_ -- move from one side to another. Inspired by `A Universe in One Line\nof Code with 10 PRINT`_. Tap the screen to trace a path from one side to\nanother.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/maze.gif\n   :alt: Maze Free Python Game\n\n.. _`Maze`: https://grantjenks.com/docs/freegames/maze.html\n.. _`A Universe in One Line of Code with 10 PRINT`: https://www.makeartwithpython.com/blog/10-print-in-python/\n\nFidget\n......\n\n`Fidget`_ -- fidget spinner inspired animation. Click the screen to accelerate\nthe fidget spinner.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/fidget.gif\n   :alt: Fidget Spinner Free Python Game\n\n.. _`Fidget`: https://grantjenks.com/docs/freegames/fidget.html\n\nIllusion\n........\n\n`Illusion`_ -- an optical illusion.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/illusion.gif\n   :alt: Optical Illusion Free Python Game\n\n.. _`Illusion`: https://grantjenks.com/docs/freegames/illusion.html\n\nTyping\n......\n\n`Typing`_ -- practice typing while letters fall down the screen.\n\n.. image:: https://grantjenks.com/docs/freegames/_static/typing.gif\n   :alt: Typing Free Python Game\n\n.. _`Typing`: https://grantjenks.com/docs/freegames/typing.html\n\n\nUser Guide\n----------\n\nFor those wanting more details, this part of the documentation describes\ncurriculum, API, and development.\n\n* `Talk: Give the Gift of Python`_\n* `Free Python Games Curriculum`_\n* `Free Python Games API Reference`_\n* `Free Python Games Development`_\n\n.. _`Talk: Give the Gift of Python`: https://grantjenks.com/docs/freegames/give-gift-python.html\n.. _`Free Python Games Curriculum`: https://grantjenks.com/docs/freegames/curriculum.html\n.. _`Free Python Games API Reference`: https://grantjenks.com/docs/freegames/api.html\n.. _`Free Python Games Development`: https://grantjenks.com/docs/freegames/development.html\n\n\nReferences\n----------\n\n* `Free Python Games Documentation`_\n* `Free Python Games at PyPI`_\n* `Free Python Games at GitHub`_\n* `Free Python Games Issue Tracker`_\n\n.. _`Free Python Games Documentation`: https://grantjenks.com/docs/freegames/\n.. _`Free Python Games at PyPI`: https://pypi.python.org/pypi/freegames\n.. _`Free Python Games at GitHub`: https://github.com/grantjenks/free-python-games\n.. _`Free Python Games Issue Tracker`: https://github.com/grantjenks/free-python-games/issues\n\n\nFree Python Games License\n-------------------------\n\nCopyright 2017-2023 Grant Jenks\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License.  You may obtain a copy of the\nLicense at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations under the License.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.4775390625,
          "content": "[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"freegames\"\ndescription = \"Free Python Games\"\nauthors = [\n    {\"name\" = \"Grant Jenks\", \"email\" = \"contact@grantjenks.com\"},\n]\nreadme = \"README.rst\"\nrequires-python = \">=3.7\"\nkeywords = [\"free\", \"games\"]\nlicense = {\"text\" = \"Apache 2.0\"}\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Education\",\n    \"Intended Audience :: End Users/Desktop\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"Natural Language :: English\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3\",\n    \"Topic :: Games/Entertainment\",\n    \"Topic :: Games/Entertainment :: Arcade\",\n    \"Topic :: Games/Entertainment :: Board Games\",\n    \"Topic :: Games/Entertainment :: Puzzle Games\",\n    \"Topic :: Games/Entertainment :: Side-Scrolling/Arcade Games\",\n    \"Topic :: Games/Entertainment :: Simulation\",\n    \"Topic :: Games/Entertainment :: Turn Based Strategy\",\n]\ndynamic = [\"version\"]\n\n[project.scripts]\nfreegames = \"freegames.__main__:main\"\n\n[project.urls]\nDocumentation = \"https://grantjenks.com/docs/freegames/\"\nFunding = \"https://gum.co/freegames\"\nSource = \"https://github.com/grantjenks/free-python-games\"\nTracker = \"https://github.com/grantjenks/django-codemirror6/issues\"\n\n[tool.setuptools.dynamic]\nversion = {attr = \"freegames.__version__\"}\n\n[tool.setuptools.package-data]\nfreegames = [\"*.gif\"]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n"
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.107421875,
          "content": "-r requirements.txt\nblue\nbuild\ncoverage\ndoc8\nflake8\nisort\nipython\npytest\npytest-cov\nrstcheck\nsphinx\ntox\ntwine\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0048828125,
          "content": "-e .\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.59765625,
          "content": "[tox]\nenvlist=bluecheck,doc8,docs,flake8,isortcheck,rstcheck,py37,py38,py39,py310,py311\nskip_missing_interpreters=True\n\n[testenv]\ndeps=\n    coverage\n    pytest\n    pytest-cov\ncommands=pytest tests\nsetenv=\n    PYTHONPATH={toxinidir}:{toxinidir}/tests\n\n[testenv:blue]\ncommands=blue {toxinidir}/src/freegames {toxinidir}/tests\ndeps=blue\n\n[testenv:bluecheck]\ncommands=blue --check {toxinidir}/src/freegames {toxinidir}/tests\ndeps=blue\n\n[testenv:doc8]\ndeps=doc8\ncommands=doc8 docs --ignore-path docs/_build\n\n[testenv:docs]\nallowlist_externals=make\nchangedir=docs\ncommands=make html\ndeps=\n    sphinx\n\n[testenv:flake8]\ncommands=flake8 {toxinidir}/src/freegames {toxinidir}/tests\ndeps=flake8\n\n[testenv:isort]\ncommands=isort {toxinidir}/src/freegames {toxinidir}/tests\ndeps=isort\n\n[testenv:isortcheck]\ncommands=isort --check {toxinidir}/src/freegames {toxinidir}/tests\ndeps=isort\n\n[testenv:rstcheck]\ncommands=rstcheck --report-level warning {toxinidir}/README.rst\ndeps=rstcheck\n\n[testenv:uploaddocs]\nallowlist_externals=rsync\nchangedir=docs\ncommands=rsync --rsync-path 'sudo -u herokuish rsync' -avzP --stats --delete _build/html/ grantjenks.com:/srv/www/grantjenks.com/public/docs/freegames/\n\n[isort]\nmulti_line_output = 3\ninclude_trailing_comma = True\nforce_grid_wrap = 0\nuse_parentheses = True\nensure_newline_before_comments = True\nline_length = 80\n\n[pytest]\naddopts=\n    --cov-fail-under=100\n    --cov-report=term-missing\n    --cov=freegames\n    --doctest-glob=\"*.rst\"\n    --doctest-modules\n    --import-mode append\ntestpaths=docs src/freegames tests README.rst\n\n[doc8]\n# ignore=D000\n\n[flake8]\nignore=E722,F403,F405,W503\nmax-line-length=120\n"
        }
      ]
    }
  ]
}