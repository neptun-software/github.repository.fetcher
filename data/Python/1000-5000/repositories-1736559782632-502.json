{
  "metadata": {
    "timestamp": 1736559782632,
    "page": 502,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jisaacks/GitGutter",
      "stars": 3876,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4013671875,
          "content": "## git\n.github/ export-ignore\ngh-pages/ export-ignore\n*.git export-ignore\n*.gitignore export-ignore\n*.gitattributes export-ignore\n\n## mkdocs sources\ndocs/ export-ignore\nmkdocs.yml export-ignore\n\n## release scripts\nmakefile export-ignore\nrelease.py export-ignore\nrelease.sublime-commands export-ignore\n\n## unit testing\ntests/ export-ignore\nunittesting.json export-ignore\n\n## linter setup\nsetup.cfg export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.20703125,
          "content": "# Cache folders\n.cache/\n.mypy_cache/\n.ropeproject/\n.venv/\n__pycache__/\nsite/\nvar/\n\n# Cache files\n*.pyc\n\n# Unit test / coverage reports\n.coverage\n.tox\nnosetests.xml\n\n# Sublime Text\n*.sublime-workspace\n*.vcs-cache\n"
        },
        {
          "name": ".python-version",
          "type": "blob",
          "size": 0.0029296875,
          "content": "3.8"
        },
        {
          "name": "Default (Linux).sublime-keymap",
          "type": "blob",
          "size": 1.0234375,
          "content": "[\n    { \"keys\": [\"ctrl+shift+c\"], \"command\": \"git_gutter_copy_from_commit\" },\n    { \"keys\": [\"ctrl+shift+alt+j\"], \"command\": \"git_gutter_next_change\" },\n    { \"keys\": [\"ctrl+shift+alt+k\"], \"command\": \"git_gutter_prev_change\" },\n    { \"keys\": [\"ctrl+shift+alt+z\"], \"command\": \"git_gutter_revert_change\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"ctrl+b\"], \"command\": \"git_gutter_blame\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"ctrl+d\"], \"command\": \"git_gutter_diff_popup\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"v\"], \"command\": \"git_gutter_show_compare\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"h\"], \"command\": \"git_gutter_compare_head\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"o\"], \"command\": \"git_gutter_compare_origin\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"c\"], \"command\": \"git_gutter_compare_commit\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"f\"], \"command\": \"git_gutter_compare_file_commit\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"b\"], \"command\": \"git_gutter_compare_branch\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"t\"], \"command\": \"git_gutter_compare_tag\" }\n]\n"
        },
        {
          "name": "Default (OSX).sublime-keymap",
          "type": "blob",
          "size": 1.0732421875,
          "content": "[\n    { \"keys\": [\"super+shift+c\"], \"command\": \"git_gutter_copy_from_commit\" },\n    { \"keys\": [\"super+shift+option+j\"], \"command\": \"git_gutter_next_change\" },\n    { \"keys\": [\"super+shift+option+k\"], \"command\": \"git_gutter_prev_change\" },\n    { \"keys\": [\"super+shift+option+z\"], \"command\": \"git_gutter_revert_change\" },\n    { \"keys\": [\"super+shift+option+c\", \"super+b\"], \"command\": \"git_gutter_blame\" },\n    { \"keys\": [\"super+shift+option+c\", \"super+d\"], \"command\": \"git_gutter_diff_popup\" },\n    { \"keys\": [\"super+shift+option+c\", \"v\"], \"command\": \"git_gutter_show_compare\" },\n    { \"keys\": [\"super+shift+option+c\", \"h\"], \"command\": \"git_gutter_compare_head\" },\n    { \"keys\": [\"super+shift+option+c\", \"o\"], \"command\": \"git_gutter_compare_origin\" },\n    { \"keys\": [\"super+shift+option+c\", \"c\"], \"command\": \"git_gutter_compare_commit\" },\n    { \"keys\": [\"super+shift+option+c\", \"f\"], \"command\": \"git_gutter_compare_file_commit\" },\n    { \"keys\": [\"super+shift+option+c\", \"b\"], \"command\": \"git_gutter_compare_branch\" },\n    { \"keys\": [\"super+shift+option+c\", \"t\"], \"command\": \"git_gutter_compare_tag\" }\n]\n"
        },
        {
          "name": "Default (Windows).sublime-keymap",
          "type": "blob",
          "size": 1.0234375,
          "content": "[\n    { \"keys\": [\"ctrl+shift+c\"], \"command\": \"git_gutter_copy_from_commit\" },\n    { \"keys\": [\"ctrl+shift+alt+j\"], \"command\": \"git_gutter_next_change\" },\n    { \"keys\": [\"ctrl+shift+alt+k\"], \"command\": \"git_gutter_prev_change\" },\n    { \"keys\": [\"ctrl+shift+alt+z\"], \"command\": \"git_gutter_revert_change\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"ctrl+b\"], \"command\": \"git_gutter_blame\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"ctrl+d\"], \"command\": \"git_gutter_diff_popup\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"v\"], \"command\": \"git_gutter_show_compare\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"h\"], \"command\": \"git_gutter_compare_head\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"o\"], \"command\": \"git_gutter_compare_origin\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"c\"], \"command\": \"git_gutter_compare_commit\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"f\"], \"command\": \"git_gutter_compare_file_commit\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"b\"], \"command\": \"git_gutter_compare_branch\" },\n    { \"keys\": [\"ctrl+shift+alt+c\", \"t\"], \"command\": \"git_gutter_compare_tag\" }\n]\n"
        },
        {
          "name": "Default.sublime-commands",
          "type": "blob",
          "size": 2.6435546875,
          "content": "[\n    {\n        \"caption\": \"GitGutter: Enable for View\",\n        \"command\": \"git_gutter_enable_view\",\n        \"args\": { \"enabled\": true }\n    },\n    {\n        \"caption\": \"GitGutter: Disable for View\",\n        \"command\": \"git_gutter_enable_view\",\n        \"args\": { \"enabled\": false }\n    },\n    {\n        \"caption\": \"GitGutter: Show Line Annotation\",\n        \"command\": \"git_gutter_blame\"\n    },\n    {\n        \"caption\": \"GitGutter: Show Diff Popup\",\n        \"command\": \"git_gutter_diff_popup\"\n    },\n    {\n        \"caption\": \"GitGutter: Goto Previous Change\",\n        \"command\": \"git_gutter_prev_change\"\n    },\n    {\n        \"caption\": \"GitGutter: Goto Next Change\",\n        \"command\": \"git_gutter_next_change\"\n    },\n    {\n        \"caption\": \"GitGutter: Copy Content from Commit\",\n        \"command\": \"git_gutter_copy_from_commit\"\n    },\n    {\n        \"caption\": \"GitGutter: Revert Change to Commit\",\n        \"command\": \"git_gutter_revert_change\"\n    },\n    {\n        \"caption\": \"GitGutter: Show Comparing Against\",\n        \"command\": \"git_gutter_show_compare\"\n    },\n    {\n        \"caption\": \"GitGutter: Compare Against HEAD\",\n        \"command\": \"git_gutter_compare_head\"\n    },\n    {\n        \"caption\": \"GitGutter: Compare Against Origin\",\n        \"command\": \"git_gutter_compare_origin\"\n    },\n    {\n        \"caption\": \"GitGutter: Compare Against Commit\",\n        \"command\": \"git_gutter_compare_commit\"\n    },\n    {\n        \"caption\": \"GitGutter: Compare Against File Commit\",\n        \"command\": \"git_gutter_compare_file_commit\"\n    },\n    {\n        \"caption\": \"GitGutter: Compare Against Branch\",\n        \"command\": \"git_gutter_compare_branch\"\n    },\n    {\n        \"caption\": \"GitGutter: Compare Against Tag\",\n        \"command\": \"git_gutter_compare_tag\"\n    },\n    {\n        \"caption\": \"GitGutter: Support Info\",\n        \"command\": \"git_gutter_support_info\"\n    },\n    {\n        \"caption\": \"Preferences: GitGutter Settings\",\n        \"command\": \"edit_settings\",\n        \"args\": {\n            \"base_file\": \"${packages}/GitGutter/GitGutter.sublime-settings\",\n            \"default\": \"// GitGutter Settings - User\\n{\\n\\t$0\\n}\\n\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: GitGutter Key Bindings\",\n        \"command\": \"edit_settings\",\n        \"args\": {\n            \"base_file\": \"${packages}/GitGutter/Default (${platform}).sublime-keymap\",\n            \"default\": \"// Key Bindings - User\\n[\\n\\t$0\\n]\\n\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: GitGutter Popup Stylesheet\",\n        \"command\": \"edit_settings\",\n        \"args\": {\n            \"base_file\": \"${packages}/GitGutter/gitgutter_popup.css\",\n            \"default\": \"/* GitGutter Popup Stylesheet - User */\\n\\n\"\n        }\n    }\n]\n"
        },
        {
          "name": "GitGutter.sublime-settings",
          "type": "blob",
          "size": 10.39453125,
          "content": "//\n// Default values for GitGutter.sublime-settings\n//\n{\n    // CUSTOM PATH TO GIT BINARY.\n    // An empty string will search the PATH environment for \"git\".\n    //\n    //   \"git_binary\": \"\",\n    //\n    // The setting may be a direct string to a git binary.\n    // An unix like path makes git run via Windows Subsystem for Linux\n    // on Windows 10. It fails if WSL is not available.\n    //\n    //   \"git_binary\": \"/usr/bin/git\",\n    //\n    // Or it may be a dictionary keyed off what sublime.platform() returns,\n    // so it may be customized on a per-platform basis.\n    //\n    //   \"git_binary\": {\n    //       \"default\": \"\",\n    //       \"windows\": \"C:/Program Files/Git/cmd/git.exe\",\n    //       \"linux\": \"/usr/bin/git\",\n    //       \"osx\": \"/usr/bin/git\"\n    //   },\n    \"git_binary\": \"\",\n\n    // Additional environment variables to pass to git.\n    // This list is merged with the global set of environment variables\n    // provided by Sublime Text.\n    //\n    // Note:\n    // 1. Keys with value `None` are removed from the global environment.\n    // 2. If this dictionary is defined per view or project it is used\n    //    exclusively! It won't be merged with the global settings.\n    \"env\": {\n        \"GIT_OPTIONAL_LOCKS\": 0\n    },\n\n    // The commit, branch, tag, or remote to compare against.\n    // This setting changes the initial compare target and can\n    // be temporarily overwritten by 'Compare against ...' commands\n    // Valid constants are:\n    // \"HEAD\":   Compare against most recent commit\n    // \"master\": Compare against master branch\n    // \"master@{upstream}\": Compare against remote master branch\n    \"compare_against\": \"HEAD\",\n\n    // The algorithm used by git diff to determine the differences.\n    // \"default\": let git decide (don't pass an algorithm)\n    // \"minimal\": use minimal diff algorithm\n    // \"patience\": use patience diff algorithm\n    //             see: http://bramcohen.livejournal.com/73318.html\n    // \"histogram\": use histogram diff algorithm\n    \"diff_algorithm\": \"patience\",\n\n    // Determines whether GitGutter ignores whitespace in modified files.\n    // Set \"none\" to ensure whitespace is considered in the diff\n    // Set \"cr\" to only ignore the carriage return at the end of lines (git 2.18+)\n    // Set \"eol\" to only ignore whitespace at the end of lines\n    // Set \"space\" to ignore changes in amount of white space\n    // Set \"all\" to ignore all white space\n    \"ignore_whitespace\": \"none\",\n\n    //\n    // Gutter Area\n    //\n\n    // Delay update of gutter icons by the following amount (in milliseconds).\n    \"debounce_delay\": 1000,\n\n    // Focus Change mode evaluates changes every time a view gets the focus\n    // Set false to disable evaluation when changing views\n    \"focus_change_mode\": true,\n\n    // Live mode evaluates changes every time file is modified,\n    // Set false to disable evaluation after each input\n    \"live_mode\": true,\n\n    // Determines whether the git_gutter_next_change and git_gutter_prev_change\n    // commands wrap around on reaching the beginning/ending of the file.\n    \"next_prev_change_wrap\": true,\n\n    // Do not set GitGutter icons in these regions\n    // Useful for making sure GitGutter does not override other\n    // regions, (e.g. Bookmarks, Linter/BracketHighlighter icons.)\n    \"protected_regions\": [\n        \"sublimelinter-warning-gutter-marks\",\n        \"sublimelinter-error-gutter-marks\",\n        \"sublime_linter.protected_regions\",\n        \"bookmarks\",\n        \"lsp_error\",\n        \"lsp_warning\",\n        \"lsp_info\",\n        \"ecc\"\n    ],\n\n    // Show GitGutter information in the minimap\n    // =0: hide markers\n    // >0: width of markers\n    // -1: highlight full line\n    \"show_in_minimap\": 1,\n\n    // Add a special marker on untracked files\n    \"show_markers_on_untracked_file\": true,\n\n    // The gutter theme defines the icons to show for the different events.\n    \"theme\": \"Default.gitgutter-theme\",\n\n    //\n    // Diff Popup\n    //\n\n    // (ST3, Build 3119+ only)\n    // Enable hover popup, which shows a diff of the changed lines.\n    \"enable_hover_diff_popup\": true,\n\n    // (ST3 only) The default mode to open the diff popup. This will be\n    // used for the hover popup, the command palette entry,\n    // and the default key binding.\n    // Possible modes are:\n    // \"default\": Show the previous git state in the popup\n    // \"diff\": Compare the git state to the working state and highlight\n    //         the differences in the popup\n    \"diff_popup_default_mode\": \"default\",\n\n    // Do not show the Diff Popup if a line contains these regions\n    // Useful for making sure GitGutter does not fight with other popups.\n    \"diff_popup_protected_regions\": [\n        \"sublime_linter.protected_regions\"\n    ],\n\n    //\n    // Line Annotation\n    //\n\n    // (ST3, Build 3124+ only)\n    // Display a phantom text at the end of the active line with information\n    // about who changed it using the output of `git blame`.\n    //   \"auto\"  -- show line annotation if word wrap is disabled (default)\n    //   \"true\"  -- always show line annotation\n    //   \"false\" -- never show line annotation\n    \"show_line_annotation\": \"auto\",\n\n    // (ST3, Build 3124+ only)\n    // The 1 based ruler index to align the line annotation text to.\n    //\n    // If no ruler is available the phantom is aligned to the end of line.\n    // If the selected ruler does not exist the most right one is used.\n    //\n    // Valid values are:\n    //   \"False\"  -- align to end of line (default)\n    //   \"1\"      -- align to first ruler\n    //   \"2\"      -- align of second ruler\n    //   ...\n    \"line_annotation_ruler\": false,\n\n    // (ST3, Build 3124+ only)\n    // Whether to ignore whitespace changes when showing line annotations.\n    //\n    // Valid values are:\n    //   \"false\"  -- don't ignore whitespace changes (default)\n    //   \"true\"   -- ignore whitespace changes\n    \"line_annotation_ignore_whitespace\": false,\n\n    // LINE ANNOTATION TEXT TEMPLATE\n    // If the value is an array it is joined to a single string and passed to\n    // jinja2 template engine (if available) to render the blame message text.\n    // GitGutter provides the following variables:\n    //   {{line_author}}        -- the author, who introduced the change\n    //   {{line_author_mail}}   -- the e-mail address of the author\n    //   {{line_author_age}}    -- the time elapsed since the change\n    //   {{line_author_time}}   -- the time string of the change\n    //   {{line_author_tz}}     -- the timezone string of the change\n    //   {{line_commit}}        -- the hash of the changing committing\n    //   {{line_committer}}     -- the committer, who added the change to the repo\n    //   {{line_committer_mail}}-- the e-mail address of the committer\n    //   {{line_committer_age}} -- the time elapsed since the change\n    //   {{line_committer_time} -- the time string of commit\n    //   {{line_committer_tz}   -- the timezone string of commit\n    //   {{line_summary}}       -- the first line of the commit message\n    //   {{line_previous}}      -- the hash of the previous commit\n    \"line_annotation_text\": \"{% if line_commit and line_commit[:7] != '0000000' %} {{line_commit[:7]}} | {% endif %}{{line_author}} ({{line_author_age}}) · {{line_summary}}\",\n\n    //\n    // Status Bar\n    //\n\n    // Determines whether GitGutter shows status information in the status bar.\n    // Set false to disable status information.\n    // Set true to show information using the \"status_bar_text\" template.\n    \"show_status_bar_text\": true,\n\n    // STATUS BAR TEXT TEMPLATE\n    // The array is joined to a single string and passed to jinja2 template\n    // engine to render the status message text. The template can be modified using\n    // jinja2 supported syntax. GitGutter provides the following variables:\n    //   {{st_git_status}}      -- Sublime Text git integration available and enabled\n    //   {{repo}}               -- repository name / folder name containing the .git directory\n    //   {{branch}}             -- checked out branch you are working on\n    //   {{remote}}             -- tracked remote of current branch you are working on or `None`\n    //   {{ahead}}              -- number of commits the local branch is ahead of remote\n    //   {{behind}}             -- number of commits the local branch is behind remote\n    //   {{added_files}}        -- number of untracked files added to working tree\n    //   {{deleted_files}}      -- number of files deleted from working tree\n    //   {{modified_files}}     -- number of modified files in the working tree\n    //   {{staged_files}}       -- number of files in the staging area\n    //   {{compare}}            -- commit/branch/HEAD the file is compared to\n    //   {{state}}              -- One of committed/modified/ignored/untracked\n    //   {{deleted}}            -- number of deleted regions\n    //   {{inserted}}           -- number of inserted lines\n    //   {{modified}}           -- number of modified lines\n    //   {{line_author}}        -- the author, who introduced the change\n    //   {{line_author_mail}}   -- the e-mail address of the author\n    //   {{line_author_age}}    -- the time elapsed since the change\n    //   {{line_author_time}}   -- the time string of the change\n    //   {{line_author_tz}}     -- the timezone string of the change\n    //   {{line_commit}}        -- the hash of the changing committing\n    //   {{line_committer}}     -- the committer, who added the change to the repo\n    //   {{line_committer_mail}}-- the e-mail address of the committer\n    //   {{line_committer_age}} -- the time elapsed since the change\n    //   {{line_committer_time} -- the time string of commit\n    //   {{line_committer_tz}   -- the timezone string of commit\n    //   {{line_summary}}       -- the first line of the commit message\n    //   {{line_previous}}      -- the hash of the previous commit\n    \"status_bar_text\": [\n        \"{% if repo and branch %}\",\n            \"{% if not st_git_status %}\",\n                \"{{repo}}/{{branch}}\",\n                \"{% if added_files + deleted_files + modified_files > 0 %}*{% endif %}, \",\n            \"{% endif %}\",\n            \"{% if compare not in ('HEAD', branch, None) %}Comparing against {{compare}}, {% endif %}\",\n            \"{% if state %}File is {{state}}{% endif %}\",\n            \"{% if deleted > 0 %}, {{deleted}}-{% endif %}\",\n            \"{% if inserted > 0 %}, {{inserted}}+{% endif %}\",\n            \"{% if modified > 0 %}, {{modified}}≠{% endif %}\",\n            \"{% if line_commit and line_commit[:7] != '0000000' %}, ⟢ {{line_commit[:7]}} | {{line_author}} ({{line_author_age}}){% endif %}\",\n        \"{% endif %}\"\n    ]\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright (c) 2012 John Isaacks\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "Main.sublime-menu",
          "type": "blob",
          "size": 4.9921875,
          "content": "[\n    {\n        \"caption\": \"Edit\",\n        \"mnemonic\": \"E\",\n        \"id\": \"edit\",\n        \"children\":\n        [\n            { \"caption\": \"-\" },\n            {\n                \"caption\": \"Revert Change to Commit\",\n                \"command\": \"git_gutter_revert_change\"\n            },\n            {\n                \"caption\": \"Copy Content from Commit\",\n                \"command\": \"git_gutter_copy_from_commit\"\n            },\n            { \"caption\": \"-\" }\n        ]\n    },\n    {\n        \"caption\": \"View\",\n        \"mnemonic\": \"V\",\n        \"id\": \"view\",\n        \"children\":\n        [\n            {\n                \"caption\": \"GitGutter\",\n                \"children\":\n                [\n                    {\n                        \"caption\": \"Enabled for View\",\n                        \"command\": \"git_gutter_enable_view\"\n                    },\n                    { \"caption\": \"-\" },\n                    {\n                        \"caption\": \"Show Line Annotation\",\n                        \"command\": \"git_gutter_blame\"\n                    },\n                    {\n                        \"caption\": \"Show Diff Popup\",\n                        \"command\": \"git_gutter_diff_popup\"\n                    },\n                    {\n                        \"caption\": \"Show Comparing Against\",\n                        \"command\": \"git_gutter_show_compare\"\n                    },\n                    { \"caption\": \"-\" },\n                    {\n                        \"caption\": \"Compare Against HEAD\",\n                        \"command\": \"git_gutter_compare_head\"\n                    },\n                    {\n                        \"caption\": \"Compare Against Origin\",\n                        \"command\": \"git_gutter_compare_origin\"\n                    },\n                    {\n                        \"caption\": \"Compare Against Commit\",\n                        \"command\": \"git_gutter_compare_commit\"\n                    },\n                    {\n                        \"caption\": \"Compare Against File Commit\",\n                        \"command\": \"git_gutter_compare_file_commit\"\n                    },\n                    {\n                        \"caption\": \"Compare Against Branch\",\n                        \"command\": \"git_gutter_compare_branch\"\n                    },\n                    {\n                        \"caption\": \"Compare Against Tag\",\n                        \"command\": \"git_gutter_compare_tag\"\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"caption\": \"Goto\",\n        \"mnemonic\": \"G\",\n        \"id\": \"goto\",\n        \"children\":\n        [\n            {\n                \"caption\": \"Goto Previous Git Difference\",\n                \"command\": \"git_gutter_prev_change\"\n            },\n            {\n                \"caption\": \"Goto Next Git Difference\",\n                \"command\": \"git_gutter_next_change\"\n            },\n            { \"caption\": \"-\" }\n        ]\n    },\n    {\n        \"caption\": \"Preferences\",\n        \"mnemonic\": \"n\",\n        \"id\": \"preferences\",\n        \"children\":\n        [\n            {\n                \"caption\": \"Package Settings\",\n                \"mnemonic\": \"P\",\n                \"id\": \"package-settings\",\n                \"children\":\n                [\n                    {\n                        \"caption\": \"GitGutter\",\n                        \"children\":\n                        [\n                            {\n                                \"caption\": \"Settings\",\n                                \"command\": \"edit_settings\",\n                                \"args\": {\n                                    \"base_file\": \"${packages}/GitGutter/GitGutter.sublime-settings\",\n                                    \"default\": \"// GitGutter Settings - User\\n{\\n\\t$0\\n}\\n\"\n                                }\n                            },\n                            { \"caption\": \"-\" },\n                            {\n                                \"caption\": \"Key Bindings\",\n                                \"command\": \"edit_settings\",\n                                \"args\": {\n                                    \"base_file\": \"${packages}/GitGutter/Default (${platform}).sublime-keymap\",\n                                    \"default\": \"// Key Bindings - User\\n[\\n\\t$0\\n]\\n\"\n                                }\n                            },\n                            { \"caption\": \"-\" },\n                            {\n                                \"caption\": \"Popup Stylesheet\",\n                                \"command\": \"edit_settings\",\n                                \"args\": {\n                                    \"base_file\": \"${packages}/GitGutter/gitgutter_popup.css\",\n                                    \"default\": \"/* GitGutter Popup Stylesheet - User */\\n\\n\"\n                                }\n                            },\n                            { \"caption\": \"-\" },\n                            {\n                                \"caption\": \"Support Info\",\n                                \"command\": \"git_gutter_support_info\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n"
        },
        {
          "name": "Preferences.sublime-settings",
          "type": "blob",
          "size": 0.447265625,
          "content": "//\n// Default values for Preferences.sublime-settings\n//\n// The file contains settings, which are available in user preferences,\n// project specific settings, view setting only. All settings placed here\n// can't be disabled in the Packages/User/GitGutter.sublime-settings!\n{\n    // Enable/Disable GitGutter\n    // Set false to disable evaluation of changes and hide all gutter icons,\n    // status message and minimap marker.\n    \"git_gutter_enable\": true\n}\n"
        },
        {
          "name": "Preferences.sublime-settings-hints",
          "type": "blob",
          "size": 11.0546875,
          "content": "//\n// Default values for Preferences.sublime-settings\n//\n// This file exists to support PackageDev settings completions/linting/tooltips.\n// It MUST be an exact copy of GitGutter.sublime-settings with `git_gutter_` being\n// prefixed to all settings keys except \"git_binary\". It contains all the settings\n// which can be placed into Preferences or view/project settings.\n//\n// It MUST NOT be caulled Preferences.sublime-settings as long as\n// GitGutter.sublime-settings is used to store package settings as well.\n//\n{\n    // CUSTOM PATH TO GIT BINARY.\n    // An empty string will search the PATH environment for \"git\".\n    //\n    //   \"git_binary\": \"\",\n    //\n    // The setting may be a direct string to a git binary.\n    // An unix like path makes git run via Windows Subsystem for Linux\n    // on Windows 10. It fails if WSL is not available.\n    //\n    //   \"git_binary\": \"/usr/bin/git\",\n    //\n    // Or it may be a dictionary keyed off what sublime.platform() returns,\n    // so it may be customized on a per-platform basis.\n    //\n    //   \"git_binary\": {\n    //       \"default\": \"\",\n    //       \"windows\": \"C:/Program Files/Git/cmd/git.exe\",\n    //       \"linux\": \"/usr/bin/git\",\n    //       \"osx\": \"/usr/bin/git\"\n    //   },\n    \"git_binary\": \"\",\n\n    // Additional environment variables to pass to git.\n    // This list is merged with the global set of environment variables\n    // provided by Sublime Text.\n    //\n    // Note:\n    // 1. Keys with value `None` are removed from the global environment.\n    // 2. If this dictionary is defined per view or project it is used\n    //    exclusively! It won't be merged with the global settings.\n    \"git_gutter_env\": {\n        \"GIT_OPTIONAL_LOCKS\": 0\n    },\n\n    // The commit, branch, tag, or remote to compare against.\n    // This setting changes the initial compare target and can\n    // be temporarily overwritten by 'Compare against ...' commands\n    // Valid constants are:\n    // \"HEAD\":   Compare against most recent commit\n    // \"master\": Compare against master branch\n    // \"master@{upstream}\": Compare against remote master branch\n    \"git_gutter_compare_against\": \"HEAD\",\n\n    // The algorithm used by git diff to determine the differences.\n    // \"default\": let git decide (don't pass an algorithm)\n    // \"minimal\": use minimal diff algorithm\n    // \"patience\": use patience diff algorithm\n    //             see: http://bramcohen.livejournal.com/73318.html\n    // \"histogram\": use histogram diff algorithm\n    \"git_gutter_diff_algorithm\": \"patience\",\n\n    // Determines whether GitGutter ignores whitespace in modified files.\n    // Set \"none\" to ensure whitespace is considered in the diff\n    // Set \"cr\" to only ignore the carriage return at the end of lines (git 2.18+)\n    // Set \"eol\" to only ignore whitespace at the end of lines\n    // Set \"space\" to ignore changes in amount of white space\n    // Set \"all\" to ignore all white space\n    \"git_gutter_ignore_whitespace\": \"none\",\n\n    //\n    // Gutter Area\n    //\n\n    // Delay update of gutter icons by the following amount (in milliseconds).\n    \"git_gutter_debounce_delay\": 1000,\n\n    // Focus Change mode evaluates changes every time a view gets the focus\n    // Set false to disable evaluation when changing views\n    \"git_gutter_focus_change_mode\": true,\n\n    // Live mode evaluates changes every time file is modified,\n    // Set false to disable evaluation after each input\n    \"git_gutter_live_mode\": true,\n\n    // Determines whether the git_gutter_next_change and git_gutter_prev_change\n    // commands wrap around on reaching the beginning/ending of the file.\n    \"git_gutter_next_prev_change_wrap\": true,\n\n    // Do not set GitGutter icons in these regions\n    // Useful for making sure GitGutter does not override other\n    // regions, (e.g. Bookmarks, Linter/BracketHighlighter icons.)\n    \"git_gutter_protected_regions\": [\n        \"sublimelinter-warning-gutter-marks\",\n        \"sublimelinter-error-gutter-marks\",\n        \"sublime_linter.protected_regions\",\n        \"bookmarks\",\n        \"lsp_error\",\n        \"lsp_warning\",\n        \"lsp_info\"\n    ],\n\n    // Show GitGutter information in the minimap\n    // =0: hide markers\n    // >0: width of markers\n    // -1: highlight full line\n    \"git_gutter_show_in_minimap\": 1,\n\n    // Add a special marker on untracked files\n    \"git_gutter_show_markers_on_untracked_file\": true,\n\n    // The gutter theme defines the icons to show for the different events.\n    \"git_gutter_theme\": \"Default.gitgutter-theme\",\n\n    //\n    // Diff Popup\n    //\n\n    // (ST3, Build 3119+ only)\n    // Enable hover popup, which shows a diff of the changed lines.\n    \"git_gutter_enable_hover_diff_popup\": true,\n\n    // (ST3 only) The default mode to open the diff popup. This will be\n    // used for the hover popup, the command palette entry,\n    // and the default key binding.\n    // Possible modes are:\n    // \"default\": Show the previous git state in the popup\n    // \"diff\": Compare the git state to the working state and highlight\n    //         the differences in the popup\n    \"git_gutter_diff_popup_default_mode\": \"default\",\n\n    // Do not show the Diff Popup if a line contains these regions\n    // Useful for making sure GitGutter does not fight with other popups.\n    \"git_gutter_diff_popup_protected_regions\": [\n        \"sublime_linter.protected_regions\"\n    ],\n\n    //\n    // Line Annotation\n    //\n\n    // (ST3, Build 3124+ only)\n    // Display a phantom text at the end of the active line with information\n    // about who changed it using the output of `git blame`.\n    //   \"auto\"  -- show line annotation if word wrap is disabled (default)\n    //   \"true\"  -- always show line annotation\n    //   \"false\" -- never show line annotation\n    \"git_gutter_show_line_annotation\": \"auto\",\n\n    // (ST3, Build 3124+ only)\n    // The 1 based ruler index to align the line annotation text to.\n    //\n    // If no ruler is available the phantom is aligned to the end of line.\n    // If the selected ruler does not exist the most right one is used.\n    //\n    // Valid values are:\n    //   \"False\"  -- align to end of line (default)\n    //   \"1\"      -- align to first ruler\n    //   \"2\"      -- align of second ruler\n    //   ...\n    \"git_gutter_line_annotation_ruler\": false,\n\n    // (ST3, Build 3124+ only)\n    // Whether to ignore whitespace changes when showing line annotations.\n    //\n    // Valid values are:\n    //   \"false\"  -- don't ignore whitespace changes (default)\n    //   \"true\"   -- ignore whitespace changes\n    \"git_gutter_line_annotation_ignore_whitespace\": false,\n\n    // LINE ANNOTATION TEXT TEMPLATE\n    // If the value is an array it is joined to a single string and passed to\n    // jinja2 template engine (if available) to render the blame message text.\n    // GitGutter provides the following variables:\n    //   {{line_author}}        -- the author, who introduced the change\n    //   {{line_author_mail}}   -- the e-mail address of the author\n    //   {{line_author_age}}    -- the time elapsed since the change\n    //   {{line_author_time}}   -- the time string of the change\n    //   {{line_author_tz}}     -- the timezone string of the change\n    //   {{line_commit}}        -- the hash of the changing committing\n    //   {{line_committer}}     -- the committer, who added the change to the repo\n    //   {{line_committer_mail}}-- the e-mail address of the committer\n    //   {{line_committer_age}} -- the time elapsed since the change\n    //   {{line_committer_time} -- the time string of commit\n    //   {{line_committer_tz}   -- the timezone string of commit\n    //   {{line_summary}}       -- the first line of the commit message\n    //   {{line_previous}}      -- the hash of the previous commit\n    \"git_gutter_line_annotation_text\": \"{% if line_commit and line_commit[:7] != '0000000' %} {{line_commit[:7]}} | {% endif %}{{line_author}} ({{line_author_age}}) · {{line_summary}}\",\n\n    //\n    // Status Bar\n    //\n\n    // Determines whether GitGutter shows status information in the status bar.\n    // Set false to disable status information.\n    // Set true to show information using the \"status_bar_text\" template.\n    \"git_gutter_show_status_bar_text\": true,\n\n    // STATUS BAR TEXT TEMPLATE\n    // The array is joined to a single string and passed to jinja2 template\n    // engine to render the status message text. The template can be modified using\n    // jinja2 supported syntax. GitGutter provides the following variables:\n    //   {{st_git_status}}      -- Sublime Text git integration available and enabled\n    //   {{repo}}               -- repository name / folder name containing the .git directory\n    //   {{branch}}             -- checked out branch you are working on\n    //   {{remote}}             -- tracked remote of current branch you are working on or `None`\n    //   {{ahead}}              -- number of commits the local branch is ahead of remote\n    //   {{behind}}             -- number of commits the local branch is behind remote\n    //   {{added_files}}        -- number of untracked files added to working tree\n    //   {{deleted_files}}      -- number of files deleted from working tree\n    //   {{modified_files}}     -- number of modified files in the working tree\n    //   {{staged_files}}       -- number of files in the staging area\n    //   {{compare}}            -- commit/branch/HEAD the file is compared to\n    //   {{state}}              -- One of committed/modified/ignored/untracked\n    //   {{deleted}}            -- number of deleted regions\n    //   {{inserted}}           -- number of inserted lines\n    //   {{modified}}           -- number of modified lines\n    //   {{line_author}}        -- the author, who introduced the change\n    //   {{line_author_mail}}   -- the e-mail address of the author\n    //   {{line_author_age}}    -- the time elapsed since the change\n    //   {{line_author_time}}   -- the time string of the change\n    //   {{line_author_tz}}     -- the timezone string of the change\n    //   {{line_commit}}        -- the hash of the changing committing\n    //   {{line_committer}}     -- the committer, who added the change to the repo\n    //   {{line_committer_mail}}-- the e-mail address of the committer\n    //   {{line_committer_age}} -- the time elapsed since the change\n    //   {{line_committer_time} -- the time string of commit\n    //   {{line_committer_tz}   -- the timezone string of commit\n    //   {{line_summary}}       -- the first line of the commit message\n    //   {{line_previous}}      -- the hash of the previous commit\n    \"git_gitter_status_bar_text\": [\n        \"{% if repo and branch %}\",\n            \"{% if not st_git_status %}\",\n                \"{{repo}}/{{branch}}\",\n                \"{% if added_files + deleted_files + modified_files > 0 %}*{% endif %}, \",\n            \"{% endif %}\",\n            \"{% if compare not in ('HEAD', branch, None) %}Comparing against {{compare}}, {% endif %}\",\n            \"{% if state %}File is {{state}}{% endif %}\",\n            \"{% if deleted > 0 %}, {{deleted}}-{% endif %}\",\n            \"{% if inserted > 0 %}, {{inserted}}+{% endif %}\",\n            \"{% if modified > 0 %}, {{modified}}≠{% endif %}\",\n            \"{% if line_commit and line_commit[:7] != '0000000' %}, ⟢ {{line_commit[:7]}} | {{line_author}} ({{line_author_age}}){% endif %}\",\n        \"{% endif %}\"\n    ]\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1416015625,
          "content": "# GitGutter\n\nA [Sublime Text](http://www.sublimetext.com) plug-in to show information about files in a git repository:\n\n1. _Gutter Icons_ indicating inserted, modified or deleted lines\n2. _Diff Popup_ with details about modified lines\n3. _Status Bar Text_ with information about file and repository\n\nand provides some commands like:\n\n1. _Goto Change_ to navigate between modified lines\n2. _Copy from Commit_ to copy the original content from the commit\n3. _Revert to Commit_ to revert a modified hunk to the original state in a commit\n\n\n## Gutter Icons & Status Bar Text\n\n![screenshot](docs/assets/images/gutter_and_status.gif)\n\nThe icons of the default theme have the following meaning:\n\n Icon          | Description\n:-------------:|-------------------------\n![inserted][]  | inserted line\n![changed][]   | modified line\n![deleted][]   | deleted region borders\n![ignored][]   | ignored file\n![untracked][] | untracked file\n\n[changed]: <docs/assets/images/gutter_changed.png>\n[deleted]: <docs/assets/images/gutter_deleted.png>\n[ignored]: <docs/assets/images/gutter_ignored.png>\n[inserted]: <docs/assets/images/gutter_inserted.png>\n[untracked]: <docs/assets/images/gutter_untracked.png>\n\n\n## Diff Popup\n\nThe diff popup shows the original content from the commit or the differences between it and the working content.\n\n![diff_popup_screenshot](docs/assets/images/diff_popup.gif)\n\nThe toolbar provides some commands to interact with or modify the changes.\n\n symbol | meaning of the symbol\n :-----:| ---------------------------------------\n ×      | close the popup\n ⤒      | goto to first change\n ↑      | goto to previous change\n ↓      | goto to next change\n ≈, ≉   | enable/disable difference highlighting\n ⎘      | copy the original content from the commit\n ⟲      | revert a modified hunk to the original state in a commit\n\n\n## Documentation\n\nPlease read https://jisaacks.github.io/GitGutter/ for detailed information about\n\n- [Installation](https://jisaacks.github.io/GitGutter/install)\n- [Usage](https://jisaacks.github.io/GitGutter/usage)\n- [Settings](https://jisaacks.github.io/GitGutter/settings)\n- [Troubleshooting](https://jisaacks.github.io/GitGutter/troubleshooting)\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "1.11.12"
        },
        {
          "name": "dependencies.json",
          "type": "blob",
          "size": 0.0673828125,
          "content": "{\n    \"*\": {\n        \"*\": [\n            \"mdpopups\"\n        ]\n    }\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gitgutter_popup.css",
          "type": "blob",
          "size": 4.44921875,
          "content": "/**********************************************************************\n\n    This is the default stylesheet for GitGutter diff popup.\n\n    It defines additional rules to merge with mdpopups' styleshets.\n\n    NOTE: You can use all jinja2 template variables of mdpopups.\n\n        Examples:\n          var.is_dark\n          var.is_light\n          var.sublime_version       (mdpopups 2.0.0+)\n          var.mdpopups_version      (mdpopups 2.0.0+)\n\n    The popup's HTML structure:\n\n        <div class=\"mdpopups\">\n            <div class=\"git-gutter\">\n                <div class=\"toolbar\">\n                    <a href=\"revert\"><symbol>⟲</symbol></a>\n                    ...\n                    <a href=\"revert\"><text>(revert)</text></a>\n                    ...\n                </div>\n                <div class=\"highlight\">\n                    ... the content goes in here\n                </div>\n            </div>\n        </div>\n\n    Copy the values you want to change into your user directory\n    and change them there to overwrite the stylesheet.\n\n *********************************************************************/\n\n/**\n * POPUP BACKGROUND\n *\n * Compatibility rules to fix default popup background color\n * for light and dark color schemes of Sublime Text < 3132.\n **/\nhtml.dark {\n    --mdpopups-hl-bg: color(var(--background) blend(white 95%));\n    --diffpopup-tb-bg: color(var(--mdpopups-hl-bg) blend(white 95%));\n    --diffpopup-ins-bg: color(green blend(black 60%));\n    --diffpopup-ins-fg: color(green blend(white 40%));\n    --diffpopup-del-bg: color(red blend(black 60%));\n    --diffpopup-del-fg: color(red blend(white 40%));\n    --diffpopup-chg-ins-bg: color(#769908 blend(black 95%));\n    --diffpopup-chg-ins-fg: color(#769908 blend(white 20%));\n    --diffpopup-chg-del-bg: color(orangered blend(black 80%));\n    --diffpopup-chg-del-fg: color(orangered blend(white 40%));\n}\n\nhtml.light {\n    --mdpopups-hl-bg: color(var(--background) blend(black 95%));\n    --diffpopup-tb-bg: color(var(--mdpopups-hl-bg) blend(black 91%));\n    --diffpopup-ins-bg: color(green blend(white 25%));\n    --diffpopup-ins-fg: color(green blend(black 80%));\n    --diffpopup-del-bg: color(red blend(white 25%));\n    --diffpopup-del-fg: color(red blend(black 80%));\n    --diffpopup-chg-ins-bg: color(#93921b blend(white 20%));\n    --diffpopup-chg-ins-fg: color(#93921b blend(black 85%)); /*#b3ca23*/\n    --diffpopup-chg-del-bg: color(orangered blend(white 20%));\n    --diffpopup-chg-del-fg: color(orangered blend(black 85%));\n}\n\n/**\n * POPUP BORDER\n *\n * Set padding to the desired border-width.\n **/\ndiv.git-gutter {\n    margin: 0;\n    padding: 0;\n}\n\n/**\n * TOOLBAR\n *\n * The navigation toolbar\n **/\n.git-gutter div.toolbar {\n    background-color: var(--diffpopup-tb-bg);\n    color: color(var(--foreground) blend(var(--diffpopup-tb-bg) 30%));\n    margin: 0;\n    padding: 0.0rem 0.4rem 0.2rem 0.4em;\n}\n\n/**\n * ICON BUTTONS\n *\n * <symbol>⟲</symbol>\n *\n * Unicode chars are rendered smaller than normal text and sometimes ugly\n * depending on font-family, so force fonts known to render well.\n * This rule is used to fix the font-family and font-size.\n **/\n.git-gutter div.toolbar symbol {\n    font-family: \"Roboto Mono\", \"Segoe UI Symbol\", monospace;\n    font-size: 1.2rem;\n    margin: 0;\n    padding: 0.0rem 0.1rem 0.0rem 0.1em;\n}\n\n/**\n * LINKS\n **/\n.git-gutter a {\n    color: var(--foreground);\n    text-decoration: bold;\n}\n\n/**\n * TEXT VIEW\n *\n * Shows the old content or diff.\n **/\n.git-gutter div.highlight {\n    font-family: monospace;\n    border-style: none;\n    line-height: 1.3rem;\n    margin: 0;\n    padding: 0.7rem 0.7rem 0.6rem 0.7rem;\n}\n\n/**\n * TEXT LINE\n *\n * Each line is wrapped into <p> tag.\n **/\n.git-gutter .highlight p {\n    margin: 0;\n}\n\n/**\n * DIFF HIGHLIGHTING\n *\n * The following entries apply to the \"highlight difference\"\n * mode of the popup.\n **/\n\n/* Highlight text, that has been inserted. */\n.git-gutter .hi-ins {\n    color: var(--diffpopup-ins-fg);\n    background-color: var(--diffpopup-ins-bg);\n}\n\n/* Highlight text, that has been deleted. */\n.git-gutter .hi-del {\n    color: var(--diffpopup-del-fg);\n    background-color: var(--diffpopup-del-bg);\n}\n\n/* Highlight text, that has been inserted and substitutes other text. */\n.git-gutter .hi-chg-ins {\n    color: var(--diffpopup-chg-ins-fg);\n    background-color: var(--diffpopup-chg-ins-bg);\n}\n\n/* Highlight text, that has been deleted and is substituted by other text. */\n.git-gutter .hi-chg-del {\n    color: var(--diffpopup-chg-del-fg);\n    background-color: var(--diffpopup-chg-del-bg);\n}\n"
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 0.1669921875,
          "content": "build_release:\n\t./release build\n\nrelease:\n\tbuild_release\n\t./release publish --token `cat $HOME/.github_access_token`\n\nbuild_docs:\n\tmkdocs\n\npublish_docs:\n\tmkdocs gh-deploy\n"
        },
        {
          "name": "messages.json",
          "type": "blob",
          "size": 1.8642578125,
          "content": "{\n    \"1.10.0\": \"messages/1.10.0.txt\",\n    \"1.10.1\": \"messages/1.10.1.txt\",\n    \"1.10.2\": \"messages/1.10.2.txt\",\n    \"1.10.3\": \"messages/1.10.3.txt\",\n    \"1.11.0\": \"messages/1.11.0.txt\",\n    \"1.11.1\": \"messages/1.11.1.txt\",\n    \"1.11.2\": \"messages/1.11.2.txt\",\n    \"1.11.3\": \"messages/1.11.3.txt\",\n    \"1.11.4\": \"messages/1.11.4.txt\",\n    \"1.11.5\": \"messages/1.11.5.txt\",\n    \"1.11.6\": \"messages/1.11.6.txt\",\n    \"1.11.7\": \"messages/1.11.7.txt\",\n    \"1.11.8\": \"messages/1.11.8.txt\",\n    \"1.11.9\": \"messages/1.11.9.txt\",\n    \"1.11.10\": \"messages/1.11.10.txt\",\n    \"1.2.0-pre\": \"messages/1.2.0-pre.txt\",\n    \"1.2.1\": \"messages/1.2.1.txt\",\n    \"1.2.2\": \"messages/1.2.2.txt\",\n    \"1.2.3\": \"messages/1.2.3.txt\",\n    \"1.2.4\": \"messages/1.2.4.txt\",\n    \"1.3.0\": \"messages/1.3.0.txt\",\n    \"1.4.0\": \"messages/1.4.0.txt\",\n    \"1.5.0\": \"messages/1.5.0.txt\",\n    \"1.5.1\": \"messages/1.5.1.txt\",\n    \"1.6.0\": \"messages/1.6.0.txt\",\n    \"1.6.0-rc.1\": \"messages/1.6.0-rc.1.txt\",\n    \"1.7.0\": \"messages/1.7.0.txt\",\n    \"1.7.1\": \"messages/1.7.1.txt\",\n    \"1.7.10\": \"messages/1.7.10.txt\",\n    \"1.7.11\": \"messages/1.7.11.txt\",\n    \"1.7.12\": \"messages/1.7.12.txt\",\n    \"1.7.13\": \"messages/1.7.13.txt\",\n    \"1.7.14\": \"messages/1.7.14.txt\",\n    \"1.7.15\": \"messages/1.7.15.txt\",\n    \"1.7.2\": \"messages/1.7.2.txt\",\n    \"1.7.3\": \"messages/1.7.3.txt\",\n    \"1.7.4\": \"messages/1.7.4.txt\",\n    \"1.7.5\": \"messages/1.7.5.txt\",\n    \"1.7.6\": \"messages/1.7.6.txt\",\n    \"1.7.7\": \"messages/1.7.7.txt\",\n    \"1.7.8\": \"messages/1.7.8.txt\",\n    \"1.7.9\": \"messages/1.7.9.txt\",\n    \"1.8.0\": \"messages/1.8.0.txt\",\n    \"1.8.0-rc.1\": \"messages/1.8.0-rc.1.txt\",\n    \"1.8.0-rc.2\": \"messages/1.8.0-rc.2.txt\",\n    \"1.9.0\": \"messages/1.9.0.txt\",\n    \"1.9.1\": \"messages/1.9.1.txt\",\n    \"1.9.2\": \"messages/1.9.2.txt\",\n    \"1.9.3\": \"messages/1.9.3.txt\",\n    \"1.9.4\": \"messages/1.9.4.txt\",\n    \"1.9.5\": \"messages/1.9.5.txt\",\n    \"install\": \"messages/install.txt\"\n}\n"
        },
        {
          "name": "messages",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 1.6669921875,
          "content": "%YAML 1.2\n---\nsite_name: GitGutter Documentation\nrepo_url: https://github.com/jisaacks/GitGutter\nsite_description: A Sublime Text plug-in to show information about files in a git repository.\ncopyright: |-\n  Copyright &copy; 2012 - ...\n  <a href=\"https://github.com/jisaacks\">JD Isaacks</a> &amp;\n  <a href=\"https://github.com/deathaxe\">DeathAxe</a>\n\nnav:\n  - Overview: index.md\n  - Installation: install.md\n  - Basic Usage: usage.md\n  - Settings: settings.md\n  - Coloring: coloring.md\n  - Troubleshooting: troubleshooting.md\n  - License: license.md\n\ntheme:\n  name: material\n  palette:\n    primary: indigo\n    accent: red\n\nplugins:\n  - minify:\n      minify_html: true\n\nmarkdown_extensions:\n  - markdown.extensions.admonition:\n  - markdown.extensions.footnotes:\n  - markdown.extensions.smarty:\n      smart_quotes: false\n  - pymdownx.betterem:\n  - markdown.extensions.abbr:\n  - markdown.extensions.attr_list:\n  - markdown.extensions.def_list:\n  - markdown.extensions.tables:\n  - pymdownx.superfences:\n  - pymdownx.highlight:\n      css_class: codehilite\n      extend_pygments_lang:\n        - name: php-inline\n          lang: php\n          options:\n            startinline: true\n  - pymdownx.inlinehilite:\n  - pymdownx.magiclink:\n      repo_url_shortener: true\n      repo_url_shorthand: true\n      user: jisaacks\n      repo: GitGutter\n  - pymdownx.tilde:\n  - pymdownx.caret:\n  - pymdownx.smartsymbols:\n  - pymdownx.emoji:\n      emoji_generator: !!python/name:pymdownx.emoji.to_png\n  - pymdownx.escapeall:\n      hardbreak: true\n      nbsp: true\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.striphtml:\n  - pymdownx.keys:\n      separator: \"\\uff0b\"\n  - pymdownx.details:\n  - pymdownx.saneheaders:\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin.py",
          "type": "blob",
          "size": 0.62109375,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"Load and Unload all GitGutter modules.\n\nThis module exports __all__ modules, which Sublime Text needs to know about.\nThe list of __all__ exported symbols is defined in modules/__init__.py.\n\"\"\"\nimport sublime\n\nif int(sublime.version()) < 3176:\n    print('GitGutter requires ST3 3176+')\nelse:\n    import sys\n\n    prefix = __package__ + '.'  # don't clear the base package\n    for module_name in [\n            module_name for module_name in sys.modules\n            if module_name.startswith(prefix) and module_name != __name__]:\n        del sys.modules[module_name]\n    prefix = None\n\n    from .modules import *\n"
        },
        {
          "name": "release.py",
          "type": "blob",
          "size": 5.361328125,
          "content": "# -*- coding: utf-8 -*-\n#!/usr/bin/python\n\nimport json\nimport os\nimport subprocess\n\nPACKAGE_PATH = os.path.dirname(__file__)\nMESSAGE_DIR = 'messages'\nMESSAGE_PATH = os.path.join(PACKAGE_PATH, MESSAGE_DIR)\n\n\ndef get_message(fname):\n    with open(fname, 'r', encoding='utf-8') as file:\n        message = file.read()\n    return message\n\n\ndef put_message(fname, text):\n    with open(fname, 'w', encoding='utf-8') as file:\n        file.write(text)\n\n\ndef built_messages_json(version_history):\n    \"\"\"Write the version history to the messages.json file.\"\"\"\n    output = os.path.join(PACKAGE_PATH, 'messages.json')\n    with open(output, 'w+', encoding='utf-8') as file:\n        json.dump(\n            obj={v: MESSAGE_DIR + '/' + v + '.txt' for v in version_history},\n            fp=file, indent=4, separators=(',', ': '), sort_keys=True)\n        file.write('\\n')\n\n\ndef version_history():\n    \"\"\"Return a list of all releases.\"\"\"\n    def generator():\n        for filename in os.listdir(MESSAGE_PATH):\n            basename, ext = os.path.splitext(filename)\n            if ext.lower() == '.txt':\n                yield basename\n\n    def sortkey(key):\n        \"\"\"Convert filename to version tuple (major, minor, patch).\"\"\"\n        try:\n            major, minor, patch = key.split('.', 2)\n            if '-' in patch:\n                patch, _ = patch.split('-')\n            return int(major), int(minor), int(patch)\n        except:\n            return 0, 0, 0\n\n    return sorted(tuple(generator()), key=sortkey)\n\n\ndef git(*args):\n    \"\"\"Run git command within current package path.\"\"\"\n    if os.name == 'nt':\n        startupinfo = subprocess.STARTUPINFO()\n        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    else:\n        startupinfo = None\n    proc = subprocess.Popen(\n        args=['git'] + [arg for arg in args], startupinfo=startupinfo,\n        stdout=subprocess.PIPE, stdin=subprocess.PIPE, cwd=PACKAGE_PATH)\n    stdout, _ = proc.communicate()\n    return stdout.decode('utf-8').strip() if stdout else None\n\n\ndef commit_release(version):\n    \"\"\"Create a 'Cut <version>' commit and tag.\"\"\"\n    commit_message = 'Cut %s' % version\n    git('add', '.')\n    git('commit', '-m', commit_message)\n    git('tag', '-a', '-m', commit_message, version)\n\n\ndef build_release():\n    \"\"\"Built the new release locally.\"\"\"\n    history = version_history()\n    version = history[-1]\n    put_message(os.path.join(PACKAGE_PATH, 'VERSION'), version)\n    built_messages_json(history)\n    commit_release(version)\n    print(\"Release %s created!\" % version)\n\n\ndef publish_release(token):\n    \"\"\"Publish the new release.\"\"\"\n    version = get_message(os.path.join(PACKAGE_PATH, 'VERSION'))\n\n    repo_url = 'https://github.com/jisaacks/GitGutter.git'\n    # push master branch to server\n    git('push', repo_url, 'master')\n    # push tags to server\n    git('push', repo_url, 'tag', version)\n\n    # publish the release\n    post_url = '/repos/jisaacks/GitGutter/releases?access_token=' + token\n    headers = {\n        'User-Agent': 'Sublime Text',\n        'Content-type': 'application/json',\n    }\n    # get message from /messages/<version>.txt\n    text = get_message(os.path.join(MESSAGE_PATH, version + '.txt'))\n    # strip message header (version)\n    text = text[text.find('\\n') + 1:]\n    # built the JSON request body\n    data = json.dumps({\n        \"tag_name\": version,\n        \"target_commitish\": \"master\",\n        \"name\": version,\n        \"body\": text,\n        \"draft\": False,\n        \"prerelease\": False\n    })\n    try:\n        import http.client\n        client = http.client.HTTPSConnection('api.github.com')\n        client.request('POST', post_url, body=data, headers=headers)\n        response = client.getresponse()\n        print(\"Release %s published!\" % version\n              if response.status == 201 else\n              \"Release %s failed!\" % version)\n    finally:\n        client.close()\n\n\n\"\"\"\n======================================\nCommand Line Interface\n======================================\n\"\"\"\nif __name__ == '__main__':\n    import argparse\n\n    parser = argparse.ArgumentParser(\n        description='Built and Publish GitGutter Releases')\n    parser.add_argument(\n        dest='command',\n        help='The command to perform is one of [BUILD|PUBLISH].')\n    parser.add_argument(\n        '--token',\n        nargs='?',\n        help='The GitHub access token used for authentication.')\n    args = parser.parse_args()\n    if args.command.lower() == 'build':\n        build_release()\n    elif args.command.lower() == 'publish':\n        publish_release(args.token)\n\n\n\"\"\"\n======================================\nSublime Text Command Interface\n======================================\n\"\"\"\ntry:\n    import sublime\n    import sublime_plugin\n\n    SETTINGS = \"GitGutter.sublime-settings\"\n\n    class GitGutterBuildReleaseCommand(sublime_plugin.ApplicationCommand):\n\n        def is_visible(self):\n            settings = sublime.load_settings(SETTINGS)\n            return settings.has('github_token')\n\n        def run(self):\n            \"\"\"Built a new release.\"\"\"\n            build_release()\n\n    class GitGutterPublishReleaseCommand(sublime_plugin.ApplicationCommand):\n\n        def is_visible(self):\n            settings = sublime.load_settings(SETTINGS)\n            return settings.has('github_token')\n\n        def run(self):\n            \"\"\"Publish the new release.\"\"\"\n            settings = sublime.load_settings(SETTINGS)\n            publish_release(settings.get('github_token', ''))\n\nexcept ImportError:\n    pass\n"
        },
        {
          "name": "release.sublime-commands",
          "type": "blob",
          "size": 0.2138671875,
          "content": "[\n    {\n        \"caption\": \"GitGutter: Build Release\",\n        \"command\": \"git_gutter_build_release\"\n    },\n    {\n        \"caption\": \"GitGutter: Publish Release\",\n        \"command\": \"git_gutter_publish_release\"\n    }\n]\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2841796875,
          "content": "[flake8]\nignore = D100,D101,D104,E722\nexclude = .git,__init__.py\nmax-line-length = 80\n\n[mypy]\npython_version = 3.3\nsilent_imports = True\nignore_errors = True\nstrict_optional = False\n\n[pycodestyle]\nignore = E722\nmax-line-length = 80\n\n[pydocstyle]\nignore = D100,D101,D104\nmax-line-length = 80\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittesting.json",
          "type": "blob",
          "size": 0.169921875,
          "content": "{\n    \"tests_dir\" : \"tests\",\n    \"pattern\" : \"test*.py\",\n    \"async\": true,\n    \"deferred\": false,\n    \"verbosity\": 5,\n    \"output\": \"<panel>\",\n    \"capture_console\": true\n}\n"
        }
      ]
    }
  ]
}