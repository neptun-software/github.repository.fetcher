{
  "metadata": {
    "timestamp": 1736559909823,
    "page": 669,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotify/basic-pitch",
      "stars": 3596,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.107421875,
          "content": ".git\n.tox\n**/.mypy_cache\n**/.pytest_cache\n**/__pycache__\n**/*.wav\n**/saved_models\n**/basic-pitch/saved_models\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.080078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# For macbooks...\n**/.DS_Store\n\n# pyenv\n.python-version\n\n# junit\njunit.xml\n\n# intellij\n.idea/\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 7.1923828125,
          "content": "# Code of Conduct\n\nThis code of conduct outlines our expectations for participants within the **Spotify FOSS** community, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Anyone who violates this code of conduct may be banned from the community.\n\nOur open source community strives to:\n\n* **Be friendly and patient.**\n* **Be welcoming**: We strive to be a community that welcomes and supports people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, colour, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability.\n* **Be considerate**: Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language.\n* **Be respectful**:  Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It’s important to remember that a community where people feel uncomfortable or threatened is not a productive one.\n* **Be careful in the words that we choose**: we are a community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable.\n* **Try to understand why we disagree**: Disagreements, both social and technical, happen all the time. It is important that we resolve disagreements and differing views constructively. Remember that we’re different. The strength of our community comes from its diversity, people from a wide range of backgrounds. Different people have different perspectives on issues. Being unable to understand why someone holds a viewpoint doesn’t mean that they’re wrong. Don’t forget that it is human to err and blaming each other doesn’t get us anywhere. Instead, focus on helping to resolve issues and learning from mistakes.\n\n## Definitions\n\nHarassment includes, but is not limited to:\n\n- Offensive comments related to gender, gender identity and expression, sexual orientation, disability, mental illness, neuro(a)typicality, physical appearance, body size, race, age, regional discrimination, political or religious affiliation\n- Unwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment\n- Deliberate misgendering. This includes deadnaming or persistently using a pronoun that does not correctly reflect a person's gender identity. You must address people by the name they give you when not addressing them by their username or handle\n- Physical contact and simulated physical contact (eg, textual descriptions like “*hug*” or “*backrub*”) without consent or after a request to stop\n- Threats of violence, both physical and psychological\n- Incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm\n- Deliberate intimidation\n- Stalking or following\n- Harassing photography or recording, including logging online activity for harassment purposes\n- Sustained disruption of discussion\n- Unwelcome sexual attention, including gratuitous or off-topic sexual images or behaviour\n- Pattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others\n- Continued one-on-one communication after requests to cease\n- Deliberate “outing” of any aspect of a person’s identity without their consent except as necessary to protect others from intentional abuse\n- Publication of non-harassing private communication\n\nOur open source community prioritizes marginalized people’s safety over privileged people’s comfort. We will not act on complaints regarding:\n\n- ‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’\n- Reasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you”\n- Refusal to explain or debate social justice concepts\n- Communicating in a ‘tone’ you don’t find congenial\n- Criticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions\n\n\n### Diversity Statement\n\nWe encourage everyone to participate and are committed to building a community for all. Although we will fail at times, we seek to treat everyone both as fairly and equally as possible. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.\n\nAlthough this list cannot be exhaustive, we explicitly honor diversity in age, gender, gender identity or expression, culture, ethnicity, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected\ncharacteristics above, including participants with disabilities.\n\n### Reporting Issues\n\nIf you experience or witness unacceptable behavior—or have any other concerns—please report it by contacting us via **fossboard@spotify.com**. All reports will be handled with discretion. In your report please include:\n\n- Your contact information.\n- Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please\ninclude them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link.\n- Any additional information that may be helpful.\n\nAfter filing a report, a representative will contact you personally, review the incident, follow up with any additional questions, and make a decision as to how to respond. If the person who is harassing you is part of the response team, they will recuse themselves from handling your incident. If the complaint originates from a member of the response team, it will be handled by a different member of the response team. We will respect confidentiality requests for the purpose of protecting victims of abuse.\n\n### Attribution & Acknowledgements\n\nWe all stand on the shoulders of giants across many open source communities.  We'd like to thank the communities and projects that established code of conducts and diversity statements as our inspiration:\n\n* [Django](https://www.djangoproject.com/conduct/reporting/)\n* [Python](https://www.python.org/community/diversity/)\n* [Ubuntu](http://www.ubuntu.com/about/about-ubuntu/conduct)\n* [Contributor Covenant](http://contributor-covenant.org/)\n* [Geek Feminism](http://geekfeminism.org/about/code-of-conduct/)\n* [Citizen Code of Conduct](http://citizencodeofconduct.org/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.6611328125,
          "content": "# How to Contribute\n\nBasic Pitch welcomes your contributions!\n\n## Getting Started\n\nTo get your environment set up to build `basic-pitch`, you'll need Python and Pip installed on your machine.\n\nWe recommend first installing the following non-python dependencies:\n\n- [libsndfile](http://libsndfile.github.io/libsndfile/) is a C library for reading and writing files containing sampled sound through one standard library interface.\n    - To install on MacOs, run `brew install libsndfile` using [Homebrew](https://brew.sh/)\n    - To install on Windows, run `choco install libsndfile` using [Chocolatey](https://chocolatey.org/)\n    - To install on Ubuntu, run `sudo apt-get update && sudo apt-get install --no-install-recommends -y --fix-missing pkg-config libsndfile1`\n- [ffmpeg](https://ffmpeg.org/) is a complete, cross-platform solution to record, convert and stream audio in all `basic-pitch` supported formats\n- [sox](https://sourceforge.net/projects/sox/) is a general purpose sound processing utility library used to process and transform training data used for training the `basic-pitch` model. \n\nTo compile a debug build of `basic-pitch` that allows using a debugger (like gdb or lldb), use the following command to build the package locally and install a symbolic link for debugging:\n```shell\npython3 setup.py build develop\n```\n\nThen, you can `import basic_pitch` from Python (or run the tests with `tox`) to test out your local changes.\n\n## Workflow\n\nWe follow the [GitHub Flow Workflow](https://guides.github.com/introduction/flow/):\n\n1.  Fork the project\n1.  Check out the `main` branch\n1.  Create a feature branch\n1.  Write code and tests for your change\n1.  From your branch, make a pull request against `https://github.com/spotify/basic-pitch`\n1.  Work with repo maintainers to get your change reviewed\n1.  Wait for your change to be pulled into `https://github.com/spotify/basic-pitch/main`\n1.  Delete your feature branch\n\n## Testing\n\nWe use `tox` for testing - running tests from end-to-end should be as simple as:\n\n```\ntox\n```\n\n## Style\n\nUse `black` with defaults for Python code.\n\n## Issues\n\nWhen creating an issue please try to ahere to the following format:\n\n    module-name: One line summary of the issue (less than 72 characters)\n\n    ### Expected behaviour\n\n    As concisely as possible, describe the expected behaviour.\n\n    ### Actual behaviour\n\n    As concisely as possible, describe the observed behaviour.\n\n    ### Steps to reproduce the behaviour\n\n    List all relevant steps to reproduce the observed behaviour.\n\n## Documentation\n\nWe also welcome improvements to the project documentation or to the existing\ndocs. Please file an [issue](https://github.com/spotify/basic-pitch/issues/new).\n\n## First Contributions\n\nIf you are a first time contributor to `basic-pitch`, familiarize yourself with the:\n* [Code of Conduct](CODE_OF_CONDUCT.md)\n* [GitHub Flow Workflow](https://guides.github.com/introduction/flow/)\n<!-- * Issue and pull request style guides -->\n\nWhen you're ready, navigate to [issues](https://github.com/spotify/basic-pitch/issues/new). Some issues have been identified by community members as [good first issues](https://github.com/spotify/basic-pitch/labels/good%20first%20issue).\n\nThere is a lot to learn when making your first contribution. As you gain experience, you will be able to make contributions faster. You can submit an issue using the [question](https://github.com/spotify/basic-pitch/labels/question) label if you encounter challenges.\n\n# License\n\nBy contributing your code, you agree to license your contribution under the\nterms of the [LICENSE](https://github.com/spotify/basic-pitch/blob/main/LICENSE).\n\n# Code of Conduct\n\nRead our [Code of Conduct](CODE_OF_CONDUCT.md) for the project.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4697265625,
          "content": "FROM apache/beam_python3.10_sdk:2.51.0\n\nRUN --mount=type=cache,target=/var/cache/apt \\\n  apt-get update \\\n  && apt-get install --no-install-recommends -y --fix-missing \\\n    sox \\\n    libsndfile1 \\\n    libsox-fmt-all \\\n    ffmpeg \\\n    libhdf5-dev \\\n  && rm -rf /var/lib/apt/lists/*\n\nCOPY . /basic-pitch\nWORKDIR basic-pitch\nRUN --mount=type=cache,target=/root/.cache \\\n  pip3 install --upgrade pip && \\\n  pip3 install --upgrade setuptools wheel && \\\n  pip3 install -e '.[train]' \n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1171875,
          "content": "Copyright 2022 Spotify AB\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.32421875,
          "content": "include *.txt tox.ini *.rst *.md LICENSE\ninclude catalog-info.yaml\ninclude Dockerfile .dockerignore\nrecursive-include tests *.py *.wav *.npz *.jams *.zip *.mid *.flac *.yaml *.json\nrecursive-include basic_pitch *.py *.md\nrecursive-include basic_pitch/saved_models *.index *.pb variables.data* *.mlmodel *.json *.onnx *.tflite *.bin\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 1.009765625,
          "content": "Basic Pitch\nCopyright 2022 Spotify AB\n\nThis product includes software developed at\nSpotify AB (http://www.spotify.com/).\n\nThis product includes software from Librosa (ISC).\n* Copyright (C) 2013--2017, librosa development team.\n\nThis product includes software from mir_eval (MIT)\n* Copyright (C) 2014 Colin Raffel\n\nThis product includes software from numpy (BSD)\n* Copyright (C) 2005-2022, NumPy Developers.\n\nThis product includes software from pretty-midi (MIT)\n* Copyright (C) 2014 Colin Raffel\n\nThis product includes software from resampy (ISC)\n* Copyright (C) 2016, Brian McFee\n\nThis product includes software from scipy (BSD)\n* Copyright (C) 2001-2002 Enthought, Inc. 2003-2022, SciPy Developers\n\nThis product includes software from tensorflow (Apache 2.0)\n* Copyright (C) 2019 Google, LLC <packages@tensorflow.org>\n\nThe tests for `basic-pitch` include audio files from the\nVocadito dataset liscened under Creative Commons\nAttribution 4.0 International. The dataset can be found at:\nhttps://zenodo.org/record/5578807#.YnRm5vPMKDU\n"
        },
        {
          "name": "OWNERS.md",
          "type": "blob",
          "size": 1.083984375,
          "content": "# Owners\n\n- See [CONTRIBUTING.md](CONTRIBUTING.md) for general contribution guidelines.\n\n## Core Developers\n\n- David Rubinstein (@drubinstein, Spotify)\n- Rachel Bittner (@rabitt, Spotify)\n\n## Triagers\n\n- David Rubinstein (@drubinstein, Spotify)\n- Rachel Bittner (@rabitt, Spotify)\n- Charae Tongg (@charaizlabs, Spotify)\n- Peter Sobot (@psobot, Spotify)\n- Juanjo Bosch (@juanjobosch, Spotify)\n- Vincent Degroote (@vinzentt, Spotify)\n\n## Contributors\n\n- Rachel Bittner (@rabitt, Spotify)\n- Juanjo Bosch (@juanjobosch, Spotify)\n- Vincent Degroote (@vinzentt, Spotify)\n- Simon Durand (@simondurand, Spotify)\n- David Rubinstein (@drubinstein, Spotify)\n- Gabriel Meseguer-Brocal (@gabolsgabs, Deezer)\n- Nicola Montecchio (@nicolamontecchio, Spotify)\n- Scott Sheffield (@scottsheffield, Spotify)\n- Peter Sobot (@psobot, Spotify)\n- Daniel Stoller (@f90, Spotify)\n- Ching Sung (@chingsungx, Spotify)\n- Charae Tongg (@charaizlabs, Spotify)\n- Jan Van Balen (@jvbalen, Spotify)\n\nThe research and development of this project is led by [Spotify's Audio Intelligence Lab](https://research.atspotify.com/audio-intelligence/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.86328125,
          "content": "![Basic Pitch Logo](https://user-images.githubusercontent.com/213293/167478083-de988de2-9137-4325-8a5f-ceeb51233753.png)\n\n\n\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/basic-pitch)\n![Supported Platforms](https://img.shields.io/badge/platforms-macOS%20%7C%20Windows%20%7C%20Linux-green)\n\n\nBasic Pitch is a Python library for Automatic Music Transcription (AMT), using lightweight neural network developed by [Spotify's Audio Intelligence Lab](https://research.atspotify.com/audio-intelligence/). It's small, easy-to-use, `pip install`-able and `npm install`-able via its [sibling repo](https://github.com/spotify/basic-pitch-ts).\n\nBasic Pitch may be simple, but it's is far from \"basic\"! `basic-pitch` is efficient and easy to use, and its multipitch support, its ability to generalize across instruments, and its note accuracy competes with much larger and more resource-hungry AMT systems.\n\nProvide a compatible audio file and basic-pitch will generate a MIDI file, complete with pitch bends. Basic pitch is instrument-agnostic and supports polyphonic instruments, so you can freely enjoy transcription of all your favorite music, no matter what instrument is used.  Basic pitch works best on one instrument at a time.\n\n### Research Paper\nThis library was released in conjunction with Spotify's publication at [ICASSP 2022](https://2022.ieeeicassp.org/). You can read more about this research in the paper, [A Lightweight Instrument-Agnostic Model for Polyphonic Note Transcription and Multipitch Estimation](https://arxiv.org/abs/2203.09893).\n\nIf you use this library in academic research, consider citing it:\n```bibtex\n@inproceedings{2022_BittnerBRME_LightweightNoteTranscription_ICASSP,\n  author= {Bittner, Rachel M. and Bosch, Juan Jos\\'e and Rubinstein, David and Meseguer-Brocal, Gabriel and Ewert, Sebastian},\n  title= {A Lightweight Instrument-Agnostic Model for Polyphonic Note Transcription and Multipitch Estimation},\n  booktitle= {Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing (ICASSP)},\n  address= {Singapore},\n  year= 2022,\n}\n```\n\n**Note that we have improved Basic Pitch beyond what was presented in this paper. Therefore, if you use the output of Basic Pitch in academic research,\nwe recommend that you cite the version of the code that was used.**\n\n### Demo\nIf, for whatever reason, you're not yet completely inspired, or you're just like so totally over the general vibe and stuff, checkout our snappy demo website, [basicpitch.io](https://basicpitch.io), to experiment with our model on whatever music audio you provide!\n\n\n## Installation\n\n`basic-pitch` is available via PyPI. To install the current release:\n\n    pip install basic-pitch\n\nTo update Basic Pitch to the latest version, add `--upgrade` to the above command.\n\n#### Compatible Environments:\n- MacOS, Windows and Ubuntu operating systems\n- Python versions 3.7, 3.8, 3.9, 3.10, 3.11\n- **For Mac M1 hardware, we currently only support python version 3.10. Otherwise, we suggest using a virtual machine.**\n\n\n### Model Runtime\n\nBasic Pitch comes with the original TensorFlow model and the TensorFlow model converted to [CoreML](https://developer.apple.com/documentation/coreml), [TensorFlowLite](https://www.tensorflow.org/lite), and [ONNX](https://onnx.ai/). By default, Basic Pitch will _not_ install TensorFlow as a dependency *unless you are using Python>=3.11*. Instead, by default, CoreML will be installed on MacOS, TensorFlowLite will be installed on Linux and ONNX will be installed on Windows. If you want to install TensorFlow along with the default model inference runtime, you can install TensorFlow via `pip install basic-pitch[tf]`.\n\n## Usage\n\n### Model Prediction\n\n### Model Runtime\n\nBy default, Basic Pitch will attempt to load a model in the following order:\n\n1. TensorFlow\n2. CoreML\n3. TensorFlowLite\n4. ONNX\n\nAdditionally, the module variable ICASSP_2022_MODEL_PATH will default to the first available version in the list.\n\nWe will explain how to override this priority list below. Because all other model serializations were converted from TensorFlow, we recommend using TensorFlow when possible. N.B. Basic Pitch does not install TensorFlow by default to save the user time when installing and running Basic Pitch.\n\n#### Command Line Tool\n\nThis library offers a command line tool interface. A basic prediction command will generate and save a MIDI file transcription of audio at the `<input-audio-path>` to the `<output-directory>`:\n\n```bash\nbasic-pitch <output-directory> <input-audio-path>\n```\n\nFor example: \n```\nbasic-pitch /output/directory/path /input/audio/path\n```\n\nTo process more than one audio file at a time:\n\n```bash\nbasic-pitch <output-directory> <input-audio-path-1> <input-audio-path-2> <input-audio-path-3>\n```\n\nOptionally, you may append any of the following flags to your prediction command to save additional formats of the prediction output to the `<output-directory>`:\n\n- `--sonify-midi` to additionally save a `.wav` audio rendering of the MIDI file.\n- `--save-model-outputs` to additionally save raw model outputs as an NPZ file.\n- `--save-note-events` to additionally save the predicted note events as a CSV file.\n\nIf you want to use a non-default model type (e.g., use CoreML instead of TF), use the `--model-serialization` argument. The CLI will change the loaded model to the type you prefer.\n\nTo discover more parameter control, run:\n```bash\nbasic-pitch --help\n```\n\n#### Programmatic\n\n**predict()**\n\nImport `basic-pitch` into your own Python code and run the [`predict`](basic_pitch/inference.py) functions directly, providing an `<input-audio-path>` and returning the model's prediction results:\n\n```python\nfrom basic_pitch.inference import predict\nfrom basic_pitch import ICASSP_2022_MODEL_PATH\n\nmodel_output, midi_data, note_events = predict(<input-audio-path>)\n```\n\n- `<minimum-frequency>` & `<maximum-frequency>` (*float*s) set the maximum and minimum allowed note frequency, in Hz, returned by the model. Pitch events with frequencies outside of this range will be excluded from the prediction results.\n- `model_output` is the raw model inference output\n- `midi_data` is the transcribed MIDI data derived from the `model_output`\n- `note_events` is a list of note events derived from the `model_output`\n\nNote: As mentioned previously, ICASSP_2022_MODEL_PATH will default to the runtime first supported in the list TensorFlow, CoreML, TensorFlowLite, ONNX.\n\n**predict() in a loop**\n\nTo run prediction within a loop, you'll want to load the model yourself and provide `predict()` with the loaded model object itself to be used for repeated prediction calls, in order to avoid redundant and sluggish model loading.\n\n```python\nimport tensorflow as tf\n\nfrom basic_pitch.inference import predict, Model\nfrom basic_pitch import ICASSP_2022_MODEL_PATH\n\nbasic_pitch_model = Model(ICASSP_2022_MODEL_PATH))\n\nfor x in range():\n    ...\n    model_output, midi_data, note_events = predict(\n        <loop-x-input-audio-path>,\n        basic_pitch_model,\n    )\n    ...\n```\n\n**predict_and_save()**\n\nIf you would like `basic-pitch` orchestrate the generation and saving of our various supported output file types, you may use [`predict_and_save`](basic_pitch/inference.py) instead of using [`predict`](basic_pitch/inference.py) directly:\n\n```python\nfrom basic_pitch.inference import predict_and_save\n\npredict_and_save(\n    <input-audio-path-list>,\n    <output-directory>,\n    <save-midi>,\n    <sonify-midi>,\n    <save-model-outputs>,\n    <save-notes>,\n)\n```\n\nwhere:\n   - `<input-audio-path-list>` & `<output-directory>`\n        - directory paths for `basic-pitch` to read from/write to.\n   - `<save-midi>`\n        - *bool* to control generating and saving a MIDI file to the `<output-directory>`\n   - `<sonify-midi>`\n        - *bool* to control saving a WAV audio rendering of the MIDI file to the `<output-directory>`\n   - `<save-model-outputs>`\n        - *bool* to control saving the raw model output as a NPZ file to the `<output-directory>`\n   - `<save-notes>`\n        - *bool* to control saving predicted note events as a CSV file `<output-directory>`\n\n\n\n### Model Input\n\n**Supported Audio Codecs**\n\n   `basic-pitch` accepts all sound files that are compatible with its version of [`librosa`](https://librosa.org/doc/latest/index.html), including:\n\n- `.mp3`\n- `.ogg`\n- `.wav`\n- `.flac`\n- `.m4a`\n\n**Mono Channel Audio Only**\n\nWhile you may use stereo audio as an input to our model, at prediction time, the channels of the input will be down-mixed to mono, and then analyzed and transcribed.\n\n**File Size/Audio Length**\n\nThis model can process any size or length of audio, but processing of larger/longer audio files could be limited by your machine's available disk space. To process these files, we recommend streaming the audio of the file, processing windows of audio at a time.\n\n**Sample Rate**\n\nInput audio maybe be of any sample rate, however, all audio will be resampled to 22050 Hz before processing.\n\n### VST\n\nThanks to DamRsn for developing this working VST version of basic-pitch! - https://github.com/DamRsn/NeuralNote\n\n\n## Contributing\n\nContributions to `basic-pitch` are welcomed! See [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n\n## Copyright and License\n`basic-pitch` is Copyright 2022 Spotify AB.\n\nThis software is licensed under the Apache License, Version 2.0 (the \"Apache License\"). You may choose either license to govern your use of this software only upon the condition that you accept all of the terms of either the Apache License.\n\nYou may obtain a copy of the Apache License at:\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing, software distributed under the Apache License or the GPL License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the Apache License for the specific language governing permissions and limitations under the Apache License.\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.947265625,
          "content": "# Security Policy\n\nWe're big believers in protecting your privacy and security. As a company, we not only have a vested interest, but also a deep desire to see the Internet remain as safe as possible for us all.\n\nSo, needless to say, we take security issues very seriously.\n\nIn our opinion, the practice of 'responsible disclosure' is the best way to safeguard the Internet. It allows individuals to notify companies like Spotify of any security threats before going public with the information. This gives us a fighting chance to resolve the problem before the criminally-minded become aware of it.\n\nResponsible disclosure is the industry best practice, and we recommend it as a procedure to anyone researching security vulnerabilities.\n\n## Reporting a Vulnerability\n\nIf you have discovered a vulnerability in this open source project or another serious security issue,\nplease submit it to the Spotify bounty program hosted by HackerOne.\n\nhttps://hackerone.com/spotify\n"
        },
        {
          "name": "basic_pitch",
          "type": "tree",
          "content": null
        },
        {
          "name": "catalog-info.yaml",
          "type": "blob",
          "size": 0.1123046875,
          "content": "apiVersion: backstage.io/v1alpha1\nkind: Resource\nmetadata:\n  name: basic-pitch\nspec:\n  type: resource\n  owner: MIQ\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.44921875,
          "content": "[project]\nname = \"basic-pitch\"\nversion = \"0.4.0\"\ndescription = \"Basic Pitch, a lightweight yet powerful audio-to-MIDI converter with pitch bend detection.\"\nreadme = \"README.md\"\nkeywords = []\nclassifiers = [\n\t\"Development Status :: 5 - Production/Stable\",\n\t\"Natural Language :: English\",\n\t\"Operating System :: POSIX :: Linux\",\n\t\"Operating System :: MacOS :: MacOS X\",\n\t\"Operating System :: Microsoft :: Windows\",\n\t\"Programming Language :: Python\",\n\t\"Programming Language :: Python :: 3.8\",\n\t\"Programming Language :: Python :: 3.9\",\n\t\"Programming Language :: Python :: 3.10\",\n\t\"Programming Language :: Python :: 3.11\",\n\t\"Programming Language :: Python :: Implementation :: CPython\",\n]\ndependencies = [\n\t\"coremltools; platform_system == 'Darwin'\",\n\t\"librosa>=0.8.0\",\n\t\"mir_eval>=0.6\",\n\t\"numpy>=1.18\",\n\t\"onnxruntime; platform_system == 'Windows' and python_version < '3.11'\",\n\t\"pretty_midi>=0.2.9\",\n\t\"resampy>=0.2.2,<0.4.3\",\n\t\"scikit-learn\",\n\t\"scipy>=1.4.1\",\n\t\"tensorflow>=2.4.1,<2.15.1; platform_system != 'Darwin' and python_version >= '3.11'\",\n\t\"tensorflow-macos>=2.4.1,<2.15.1; platform_system == 'Darwin' and python_version > '3.11'\",\n\t\"tflite-runtime; platform_system == 'Linux' and python_version < '3.11'\",\n\t\"typing_extensions\",\n]\n\n[metadata]\nauthor = \"Spotify\"\nauthor_email = \"basic-pitch@spotify.com\"\nmaintainer = \"Spotify\"\nmaintainer_email = \"basic-pitch@spotify.com\"\nurl = \"https://github.com/spotify/basic-pitch\"\nlong_description = \"Basic Pitch, a lightweight yet powerful audio-to-MIDI converter with pitch bend detection. See https://github.com/spotify/basic-pitch for more details.\"\nlicense = { file = \"LICENSE\" }\n\n[tool.setuptools.packages.find]\nwhere = [\".\"]\nexclude = [\"tests\"]\nnamespaces = false\n\n[project.scripts]\nbasic-pitch = \"basic_pitch.predict:main\"\nbp-download = \"basic_pitch.data.download:main\"\n\n[project.optional-dependencies]\ndata = [\n    \"basic_pitch[tf,test]\",\n    \"apache_beam\",\n    \"mirdata\",\n    \"smart_open\",\n    \"sox\",\n    \"ffmpeg-python\"\n]\ntest = [\n\t\"basic_pitch[data]\",\n\t\"coverage>=5.0.2\",\n\t\"pytest>=6.1.1\",\n\t\"pytest-mock\",\n\t\"wave\",\n\t\"mido\"\n]\ntf = [\n\t\"tensorflow>=2.4.1,<2.15.1; platform_system != 'Darwin'\",\n\t\"tensorflow-macos>=2.4.1,<2.15.1; platform_system == 'Darwin' and python_version > '3.7'\",\n]\ncoreml = [\"coremltools\"] \nonnx = [\"onnxruntime\"]\ndocs = [\"mkdocs>=1.0.4\"]\ndev = [\n\t\"basic_pitch[data,test,tf,coreml,onnx,docs]\",\n\t\"mypy\",\n\t\"tox\",\n]\n\n[tool.distutils.bdist_wheel]\nuniversal = true\n\n[build-system]\nrequires = [\n\t\"setuptools>=40.8.0\",\n\t\"wheel\",\n\t\"cython\",\n]\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.669921875,
          "content": "#!/usr/bin/env python\n# encoding: utf-8\n#\n# Copyright 2022 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import setup\n\nif __name__ == \"__main__\":\n    setup()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.552734375,
          "content": "[tox]\nenvlist = py38,py39,py310,py311,full,data,manifest,check-formatting,lint,mypy\nskipsdist = True\nusedevelop = True\nrequires =\n    setuptools>=60\n    wheel\n    pip>=24\n\n# Tests with the minimal package (either coreml/onnx/tflite)\n[testenv]\ndeps = -e .[test]\ncommands =\n    pytest tests --ignore tests/test_nn.py --ignore tests/data {posargs}\nsetenv =\n    SOURCE = {toxinidir}/basic_pitch\n    TEST_SOURCE = {toxinidir}/tests\n    LINE_LENGTH = \"120\"\n\n# Tests with TF\n[testenv:full]\ndeps = -e .[dev]\ncommands =\n    pytest tests {posargs}\nsetenv =\n    SOURCE = {toxinidir}/basic_pitch\n    TEST_SOURCE = {toxinidir}/tests\n    LINE_LENGTH = \"120\"\n\n[testenv:data]\ndeps = -e .[data]\ncommands = \n    pytest tests/data {posargs}\n\n[testenv:manifest]\ndeps = check-manifest\nskip_install = true\ncommands = check-manifest --ignore 'tests'\n\n[testenv:check-formatting]\nbasepython = python3.10\ndeps = black\nskip_install = true\ncommands =\n    black {env:SOURCE} tests --line-length {env:LINE_LENGTH} --diff --check\n\n[testenv:format]\nbasepython = python3.10\ndeps = black\nskip_install = true\ncommands =\n    black {env:SOURCE} tests --line-length {env:LINE_LENGTH}\n\n[testenv:lint]\nbasepython = python3.10\ndeps = flake8\nskip_install = true\ncommands = flake8\n\n[testenv:mypy]\nbasepython = python3.10\ndeps =\n    mypy\ncommands = mypy basic_pitch tests --strict --ignore-missing-imports --allow-subclassing-any\n\n[flake8]\nshow-source = true\nmax-line-length = 120\nexclude = .venv,.tox,.git,dist,doc,*.egg,build\nignore = E203,E731,W503,E231\nper-file-ignores = __init__.py:F401\n\n[pytest]\naddopts = -v\ntestpaths = tests\n"
        }
      ]
    }
  ]
}