{
  "metadata": {
    "timestamp": 1736559479610,
    "page": 46,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "r0oth3x49/udemy-dl",
      "stars": 4880,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.158203125,
          "content": "cookies.txt\nnew_cook.txt\nnew_cookies.txt\n.udemy-dl*.conf\npack.sublime-project\npack.sublime-workspace\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\n.venv/\nvenv/\nENV/\nbin/\ninclude/\npip-selfcheck.json\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n"
        },
        {
          "name": "AUTHOR.md",
          "type": "blob",
          "size": 0.0654296875,
          "content": "# *Nasir Khan (r0ot h3x49)*\n\n - **https://r0oth3x49.herokuapp.com**"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.9443359375,
          "content": "# Change Log\n\n## 1.0 (2020-09-12)\n\nFeatures:\n  - Added proper session management.\n  - Restructure code to make it bit nicer.\n  - Added proper logging for errors and warning which fixes (#477).\n  - Added support to download multiple courses from file.\n  - Added support to download by default just EN subtitle. (could use `--sub-lang` to download others)\n  - Added switch to keep WebVTT subtitles (option: `--keep-vtt`).\n  - Added support to fetch/skip HLS streams such as 1080p etc. (option to skip `--skip-hls`).\n  - Removed `--names`, `--save` switches.\n  - Removed `--cache` switch as proper session management is added.\n  - Removed `--unsafe` switch now unicode characters are handled properly in code.\n  - Added support to download/skip all available assets for a video (options: `--assets-only, --skip-assets`).\n\n## 0.5 (2018-05-21)\n\nFeatures:\n  - Authentication using cookies thanks to @jhonyyy90 for sharing credentials (option: `-k / --cookies`).\n  - Download/save lecture names to file thanks to @serhattsnmz (option: `--names`).\n  - Download lectures containing unsafe (`unicode`) characters in title/name thanks to @tofanelli and @Chlitzxer (option: `--unsafe`).\n\n## 0.4 (2018-02-26)\n\nFeatures:\n  - Download spacific chapter in a course (option: `-c / --chapter`) thanks to @alfari16.\n  - Download chapter(s) by providing range in a course (option: `--chapter-start, --chapter-end`).\n  - Download specific lecture in a chapter (option: `-l / --lecture`).\n  - Download lecture(s) by providing range in a chapter (option: `--lecture-start, --lecture-end`).\n  - Changed (option: `-l / --list-infos`) by (option: `--info`).\n  - Changed (option: `-c / --configs`) by (option: `--cache`).\n  - Changed (option: `-s / --save-links`) by (option: `--save`).\n  - Changed (option: `-r / --resolution`) by (option: `-q / --quality`).\n  - Removed (option: `-d / --get-default`).\n\n## 0.3 (2017-11-14)\n\nFeatures:\n  - Skip captions/subtitle and download course only (option: `--skip-sub`).\n  - Download captions/subtitle only thanks to @leo459028 (option: `--sub-only`).\n  - Edit the password by pressing backspace on command line.\n\nBugfixes:\n  - Fixed some issues & improved code quality for Python3.\n  - Fixed #13 (UnicodeEncodeError) thanks for quick patch by @jdsantiagojr.\n\n## 0.2 (2017-08-29)\n\nFeatures:\n  - Download the default quality if requested quality is not there (option: `-d / --get-default`).\n  - Cache the credentials to file and use it later for login purpose (option: `-c / --configs`).\n  - Get user input if no credentials provided using command line argument.\n\nBugfixes:\n  - Updated code for downloading captions (subtitles) if available.\n\n\n## 0.1 (2017-08-01)\n\nFeatures:\n  - Resume capability for a course video.\n  - Saves direct download links to a file, If you don't want to download.\n  - Downloads all available subtitles if any attached with video.\n  - List down all available resolution for a video in a course.\n  - Saves course to user provided path (directory), default is current directory."
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 1.091796875,
          "content": "### List of contributors who made the contribution either in form of feature request or a bugfix\n - @jdsantiagojr (fixed UnicodeEncode error)\n - @kizbitz (fixed TypeError: write() argument must be str, not bytes)\n - @SalihKARAHAN (Added Turkish character support)\n - @Stekot (Remove windows reserved characters from the title)\n - @ghost (added pep8 on udemy-dl.py)\n - @serhattsnmz (added fix for password error, suggested some great features)\n - @Nocxy (Checked with the recent version of MAC oSx)\n - @tofanelli (gave support to many users and also suggested some features)\n - @NoMoreUsernamesAvailable (Feature request for Umlauts (unicode based characters) in filenames)\n - @RuthlessRuler (Requested to add support Aria2c downloader)\n - @alfari16 (Download from specific chapter)\n - @arsenico13 (fixed KeyError if a chapter has no lectures)\n - @FaisalUmair (Special thanks for a quick help & Guide) <3.\n - @pavelnazimok (Thanks for the quick patch)\n - @brundidge (Thanks for a quick bug fixes)\n - @kaisbe (Thanks for the pull request and a suggested solution)\n\n> Thanks to all other contributors if i missed any one."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "\nCopyright (c) 2018-2025 Nasir Khan (r0ot h3x49)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR\nANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH \nTHE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7802734375,
          "content": "[![GitHub release](https://img.shields.io/badge/release-v1.1-brightgreen?style=flat-square)](https://github.com/r0oth3x49/udemy-dl/releases/tag/v1.0)\n[![GitHub stars](https://img.shields.io/github/stars/r0oth3x49/udemy-dl.svg?style=flat-square)](https://github.com/r0oth3x49/udemy-dl/stargazers)\n[![GitHub forks](https://img.shields.io/github/forks/r0oth3x49/udemy-dl.svg?style=flat-square)](https://github.com/r0oth3x49/udemy-dl/network)\n[![GitHub issues](https://img.shields.io/github/issues/r0oth3x49/udemy-dl.svg?style=flat-square)](https://github.com/r0oth3x49/udemy-dl/issues)\n[![GitHub license](https://img.shields.io/github/license/r0oth3x49/udemy-dl.svg?style=flat-square)](https://github.com/r0oth3x49/udemy-dl/blob/master/LICENSE)\n\n# udemy-dl\n**A cross-platform python based utility to download courses from udemy for personal offline use.**\n\n[![udemy-dl-v1-1.png](https://i.postimg.cc/X7QpzY8q/udemy-dl-v1-1.png)](https://postimg.cc/zVHzL54Y)\n\n### Warning\n\n**Udemy has started to encrypt many of the course videos, so downloading them may be impossible/illegal because it involves decrypting DRM'd videos which opens up the author to DMCA takedowns/lawsuits.  If you use udemy-dl and some/all videos are skipped, please don't open a new issue or comment that the issue still exists.  All requests to bypass DRM/encryption will be ignored.**\n\nIf you'd like to see the full context, then read [issue 627](https://github.com/r0oth3x49/udemy-dl/issues/627).\n\n\n### ***Important Note***:\n - Don't share your credentials until the issue is properly tagged/labeled with **account-needed**.\n - Owner of this repository is not responsible for any misuse if you share your credentials with strangers.\n\n## ***Requirements***\n\n- Python 3 only (`Now udemy-dl doesn't support python 2`)\n- Python `pip`\n- Python module `requests`\n- Python module `colorama`\n- Python module `unidecode`\n- Python module `six`\n- Python module `cloudscraper`\n- Python module `requests[security]` or `pyOpenSSL`\n- FFmpeg (to download hls based streams properly)\n\n## ***Module Installation***\n\n    pip install -r requirements.txt\n\n## ***HLS streams download requirements***\n- You would need FFmpeg to be installed and added to environment variable so that udemy-dl can access.\n- Download [FFmpeg from here](https://ffmpeg.org/download.html)\n- On ubuntu you can install it via `apt install ffmpeg`.\n- Add to environment variables then udemy-dl will be able to use it when downloading HLS streams.\n  \n## ***Tested on***\n\n- Windows 7/8/8.1/10\n- Ubuntu-LTS (tested with super user)\n\n## ***Features***\n- Added proper session management.\n- Resume capability for a course video.\n- Added proper logging errors and warnings.\n- Support multiple courses download from file.\n- Supports organization and individual udemy users both.\n- Added support to download hls based streams if available.\n- Added functionality to reset lecture number to start from 1.\n- Added switch for session caching on demand. (option: `--cache`)\n- Convert WebVTT to SRT but donot delete WebVTT. (option: `--keep-vtt`)\n- Skip fetching HLS streams, This will make the fetching fast. (option: `--skip-hls`)\n- List down course contents and video resolution, suggest the best resolution (option: `--info`).\n- Download/skip all available subtitles for a video (options: `--sub-only, --skip-sub`).\n- Download/skip all available assets for a video (options: `--assets-only, --skip-assets`).\n- Download specific chapter in a course (option: `-c / --chapter`).\n- Download specific lecture in a chapter (option: `-l / --lecture`).\n- Download specific subtitle for a lecture (option: `-s / --sub-lang`).\n- Download chapter(s) by providing range in a course (option: `--chapter-start, --chapter-end`).\n- Download lecture(s) by providing range in a chapter (option: `--lecture-start, --lecture-end`).\n- Download lecture(s) in requested resolution (option: `-q / --quality`).\n- Download course to user requested path (option: `-o / --output`).\n- Authentication using cookies (option: `-k / --cookies`).\n\n### Before creating an issue, please do the following:\n\n 1. **Use the GitHub issue search** &mdash; check if the issue is already reported.\n 2. **Check if the issue is already fixed** &mdash; try to reproduce it using the latest `master` in the repository.\n 3. Make sure, that information you are about to report is related to this repository \n   and not the one available on ***Python's repository, PyPi***, Because this repository cannot be downloaded/installed via pip command.\n 4. Follow issue reporting template properly otherwise the issue will be closed.\n\n\n## ***How to login with cookie***\n\nThe `cookies.txt` file should have the following simple format, eg:\n\n```ini\naccess_token=JKU9QNs2IQDBKoYKvOBclSPXN97baf32o1Jo2L9vX\n```\n\n### Finding your access token value\n\n - ***Firefox*** users : [guide by @01ttouch](https://github.com/r0oth3x49/udemy-dl/issues/389#issuecomment-491903900)\n - ***Chrome*** users : [guide by @01ttouch](https://github.com/r0oth3x49/udemy-dl/issues/389#issuecomment-492569372)\n\n \n## ***Download udemy-dl***\n\nYou can download the latest version of udemy-dl by cloning the GitHub repository.\n\n    git clone https://github.com/r0oth3x49/udemy-dl.git\n\n## ***Usage***\n\n***Download a course***\n\n    python udemy-dl.py COURSE_URL\n\n***Download a courses from file***\n\n    python udemy-dl.py FILE-CONTAINING-COURSE-URLs\n  \n***Download course with specific resolution***\n\n    python udemy-dl.py COURSE_URL -q 720\n  \n***Download course to a specific location***\n\n    python udemy-dl.py COURSE_URL -o \"/path/to/directory/\"\n  \n***Download course with specific resolution to a specific location***\n\n    python udemy-dl.py COURSE_URL -q 720 -o \"/path/to/directory/\"\n\n***Download specific chapter from a course***\n\n    python udemy-dl.py COURSE_URL -c NUMBER\n\n***Download specific lecture from a chapter***\n\n    python udemy-dl.py COURSE_URL -c NUMBER -l NUMBER\n\n***Download lecture(s) range from a specific chapter***\n\n    python udemy-dl.py COURSE_URL -c NUMBER --lecture-start NUMBER --lecture-end NUMBER\n\n***Download chapter(s) range from a course***\n\n    python udemy-dl.py COURSE_URL --chapter-start NUMBER --chapter-end NUMBER\n\n***Download specific lecture from chapter(s) range***\n\n    python udemy-dl.py COURSE_URL --chapter-start NUMBER --chapter-end NUMBER --lecture NUMBER\n\n***Download lecture(s) range from chapter(s) range***\n\n    python udemy-dl.py COURSE_URL --chapter-start NUMBER --chapter-end NUMBER --lecture-start NUMBER --lecture-end NUMBER\n\n***List down specific chapter from a course***\n\n    python udemy-dl.py COURSE_URL -c NUMBER --info\n\n***List down specific lecture from a chapter***\n\n    python udemy-dl.py COURSE_URL -c NUMBER -l NUMBER --info\n\n***Download specific subtite by using language code such as (en, es) if lang switch is not specified then default will be all subtitles***\n\n    python udemy-dl.py COURSE_URL --sub-lang en\n\n\n## **Advanced Usage**\n\n<pre><code>\nAuthor: Nasir khan (<a href=\"http://r0oth3x49.herokuapp.com/\">r0ot h3x49</a>)\n\nusage: udemy-dl.py [-h] [-v] [-u] [-p] [-k] [-o] [-q] [-c] [-l] [-s] [--chapter-start] [--chapter-end] [--lecture-start] [--lecture-end] [--info] [--cache]\n                   [--keep-vtt] [--sub-only] [--skip-sub] [--skip-hls] [--assets-only] [--skip-assets]\n                   course\n\nA cross-platform python based utility to download courses from udemy for personal offline use.\n\npositional arguments:\n  course            Udemy course.\n\nGeneral:\n  -h, --help        Shows the help.\n  -v, --version     Shows the version.\n\nAuthentication:\n  -u , --username   Username in udemy.\n  -p , --password   Password of your account.\n  -k , --cookies    Cookies to authenticate with.\n\nAdvance:\n  -o , --output     Download to specific directory.\n  -q , --quality    Download specific video quality.\n  -c , --chapter    Download specific chapter from course.\n  -l , --lecture    Download specific lecture from chapter(s).\n  -s , --sub-lang   Download specific subtitle/caption (e.g:- en).\n  --chapter-start   Download from specific position within course.\n  --chapter-end     Download till specific position within course.\n  --lecture-start   Download from specific position within chapter(s).\n  --lecture-end     Download till specific position within chapter(s).\n\nOthers:\n  --info            List all lectures with available resolution.\n  --cache           Cache your session to avoid providing again.\n  --keep-vtt        Keep WebVTT caption(s).\n  --sub-only        Download captions/subtitle only.\n  --skip-sub        Download course but skip captions/subtitle.\n  --skip-hls        Download course but skip hls streams. (fast fetching).\n  --assets-only     Download asset(s) only.\n  --skip-assets     Download course but skip asset(s).\n\nExample:\n  python udemy-dl.py  COURSE_URL\n  python udemy-dl.py  COURSE_URL -k cookies.txt\n  python udemy-dl.py -u user@domain.com -p p4ssw0rd COURSE_URL\n</code></pre>\n\n\n\n## ***TODO***\n - Add support to download course on a flaky connection.\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.076171875,
          "content": "six\nm3u8\ncolorama\nrequests\nunidecode\npyOpenSSL\ncloudscraper\nrequests[security]"
        },
        {
          "name": "udemy-dl.py",
          "type": "blob",
          "size": 24.4052734375,
          "content": "#!/usr/bin/python3\n# -*- coding: utf-8 -*-\n# pylint: disable=R,C0330,C0301,C0303\n\n\"\"\"\n\nAuthor  : Nasir Khan (r0ot h3x49)\nGithub  : https://github.com/r0oth3x49\nLicense : MIT\n\n\nCopyright (c) 2018-2025 Nasir Khan (r0ot h3x49)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR\nANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH \nTHE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\"\"\"\n\nimport os\nimport sys\nimport argparse\n\nimport udemy\nfrom udemy.logger import logger\nfrom udemy.getpass import getpass\nfrom udemy.vtt2srt import WebVtt2Srt\nfrom udemy.progress import ProgressBar\nfrom udemy.colorized.banner import banner\nfrom udemy.utils import (\n    to_configs,\n    to_filepath,\n    load_configs,\n    to_human_readable,\n    extract_url_or_courses,\n)\n\n\nclass Udemy(WebVtt2Srt, ProgressBar):\n    \"\"\"Udemy is class which implements downloading/lising and all\"\"\"\n\n    def __init__(\n        self, url_or_courses, username=\"\", password=\"\", cookies=\"\", cache_session=False\n    ):\n        self.username = username\n        self.password = password\n        self.cookies = cookies\n        self._cache_session = cache_session\n        self.url_or_courses = url_or_courses\n        super(Udemy, self).__init__()\n\n    def download_assets(self, assets, filepath):\n        \"\"\"This function will simply download the asstes..\"\"\"\n        if assets:\n            for asset in assets:\n                title = asset.filename\n                logger.info(msg=\"Downloading asset(s)\", new_line=True, before=True)\n                logger.info(msg=f\"Downloading ({title})\", new_line=True)\n                try:\n                    retval = asset.download(\n                        filepath=filepath,\n                        quiet=True,\n                        callback=self.show_progress,\n                    )\n                    msg = retval.get(\"msg\")\n                    if msg == \"already downloaded\":\n                        logger.already_downloaded(msg=f\"Asset : '{title}'\")\n                    elif msg == \"download\":\n                        logger.info(msg=f\"Downloaded  ({title})\", new_line=True)\n                    else:\n                        logger.download_skipped(msg=f\"Asset : '{title}' \", reason=msg)\n                except KeyboardInterrupt:\n                    logger.error(msg=\"User Interrupted..\", new_line=True)\n                    sys.exit(0)\n\n    def download_lecture(self, lecture, filepath, current, total, quality):\n        \"\"\"This function will simply download the lectures..\"\"\"\n        if quality and lecture:\n            lecture = lecture.get_quality(quality)\n        if lecture:\n            title = lecture.title\n            logger.info(\n                msg=f\"Lecture(s) : ({current} of {total})\", new_line=True, before=True\n            )\n            logger.info(msg=f\"Downloading ({title})\", new_line=True)\n            try:\n                retval = lecture.download(\n                    filepath=filepath,\n                    quiet=True,\n                    callback=self.show_progress,\n                )\n                msg = retval.get(\"msg\")\n                if msg == \"already downloaded\":\n                    logger.already_downloaded(msg=f\"Lecture : '{title}'\")\n                elif msg == \"download\":\n                    logger.info(msg=f\"Downloaded  ({title})\", new_line=True)\n                else:\n                    logger.download_skipped(msg=f\"Lecture : '{title}' \", reason=msg)\n            except KeyboardInterrupt:\n                logger.error(msg=\"User Interrupted..\", new_line=True)\n                sys.exit(0)\n\n    def download_subtitles(self, subtitles, filepath, language=\"en\", keep_vtt=False):\n        \"\"\"This function will simply download the subtitles..\"\"\"\n        if language and subtitles and language != \"all\":\n            subtitle = subtitles[0]\n            subtitles = subtitle.get_subtitle(language)\n        if subtitles:\n            for sub in subtitles:\n                title = f\"{sub.title}.{sub.language}\"\n                filename = os.path.join(filepath, sub.filename)\n                logger.info(msg=\"Downloading subtitle(s)\", new_line=True, before=True)\n                logger.info(msg=f\"Downloading ({title})\", new_line=True)\n                try:\n                    retval = sub.download(\n                        filepath=filepath,\n                        quiet=True,\n                        callback=self.show_progress,\n                    )\n                    msg = retval.get(\"msg\")\n                    if msg == \"already downloaded\":\n                        logger.already_downloaded(msg=f\"Subtitle : '{title}'\")\n                    elif msg == \"download\":\n                        logger.info(msg=f\"Downloaded  ({title})\", new_line=True)\n                        self.convert(filename=filename, keep_vtt=keep_vtt)\n                    else:\n                        logger.download_skipped(\n                            msg=f\"Subtitle : '{title}' \", reason=msg\n                        )\n                except KeyboardInterrupt:\n                    logger.error(msg=\"User Interrupted..\", new_line=True)\n                    sys.exit(0)\n\n    def course_listdown(\n        self,\n        chapter_number=None,\n        chapter_start=None,\n        chapter_end=None,\n        lecture_number=None,\n        lecture_start=None,\n        lecture_end=None,\n        skip_hls_stream=False,\n    ):\n        \"\"\"This function will listdown the course contents ..\"\"\"\n        if not self.cookies:\n            logger.info(msg=\"Trying to login as\", status=self.username)\n        if self.cookies:\n            logger.info(msg=\"Trying to login using session cookie\", new_line=True)\n        for url in self.url_or_courses:\n            course = udemy.course(\n                url=url,\n                username=self.username,\n                password=self.password,\n                cookies=self.cookies,\n                skip_hls_stream=skip_hls_stream,\n                cache_session=self._cache_session,\n            )\n            course_name = course.title\n            chapters = course.get_chapters(\n                chapter_number=chapter_number,\n                chapter_start=chapter_start,\n                chapter_end=chapter_end,\n            )\n            total_lectures = course.lectures\n            total_chapters = course.chapters\n            logger.success(msg=course_name, course=True)\n            logger.info(msg=f\"Chapter(s) ({total_chapters})\", new_line=True)\n            logger.info(msg=f\"Lecture(s) ({total_lectures})\", new_line=True)\n            for chapter in chapters:\n                chapter_id = chapter.id\n                chapter_title = chapter.title\n                lectures = chapter.get_lectures(\n                    lecture_number=lecture_number,\n                    lecture_start=lecture_start,\n                    lecture_end=lecture_end,\n                )\n                lectures_count = chapter.lectures\n                logger.info(\n                    msg=f\"Chapter ({chapter_title}-{chapter_id})\",\n                    new_line=True,\n                    before=True,\n                    cc=15,\n                    cc_msg=15,\n                )\n                logger.info(msg=f\"Lecture(s) ({lectures_count})\", new_line=True)\n                for lecture in lectures:\n                    lecture_id = lecture.id\n                    lecture_streams = lecture.streams\n                    lecture_best = lecture.getbest()\n                    lecture_assets = lecture.assets\n                    lecture_subtitles = lecture.subtitles\n                    if not lecture_streams:\n                        continue\n                    logger.info(\n                        indent=\"     - \",\n                        msg=\"duration   : \",\n                        new_line=True,\n                        cc=80,\n                        cc_msg=10,\n                        post_msg=f\"{lecture.duration}.\",\n                        cc_pmsg=80,\n                    )\n                    logger.info(\n                        indent=\"     - \",\n                        msg=\"Lecture id : \",\n                        new_line=True,\n                        cc=80,\n                        cc_msg=10,\n                        post_msg=f\"{lecture_id}.\",\n                        cc_pmsg=80,\n                    )\n                    indent = \"\\t- \"\n                    for stream in lecture_streams:\n                        post_msg = None\n                        if stream.is_hls:\n                            human_readable = \"\"\n                        if not stream.is_hls:\n                            content_length = stream.get_filesize()\n                            if content_length == 0:\n                                continue\n                            human_readable = to_human_readable(content_length)\n                            if lecture_best.quality == stream.quality:\n                                post_msg = \"(Best)\"\n                        msg = \"{:<22} {:<8}{}\".format(\n                            f\"{stream}\", f\"{stream.quality}p\", human_readable\n                        )\n                        logger.info(\n                            indent=indent,\n                            msg=msg,\n                            new_line=True,\n                            cc=15,\n                            post_msg=post_msg,\n                            cc_pmsg=30,\n                        )\n                    if lecture_assets:\n                        for asset in lecture_assets:\n                            if asset.mediatype == \"external_link\":\n                                continue\n                            content_length = asset.get_filesize()\n                            if content_length == 0:\n                                continue\n                            human_readable = to_human_readable(content_length)\n                            msg = \"{:<22} {:<8}{}\".format(\n                                f\"{asset}\", asset.extension, human_readable\n                            )\n                            logger.info(\n                                indent=indent,\n                                msg=msg,\n                                new_line=True,\n                                cc=15,\n                            )\n                    if lecture_subtitles:\n                        for sub in lecture_subtitles:\n                            content_length = sub.get_filesize()\n                            if content_length == 0:\n                                continue\n                            human_readable = to_human_readable(content_length)\n                            msg = \"{:<22} {:<8}{}\".format(\n                                f\"{sub}\", sub.extension, human_readable\n                            )\n                            logger.info(\n                                indent=indent,\n                                msg=msg,\n                                new_line=True,\n                                cc=15,\n                            )\n            print(\"\")\n\n    def course_download(\n        self,\n        path=\"\",\n        quality=\"\",\n        language=\"en\",\n        dl_assets=True,\n        dl_lecture=True,\n        dl_subtitles=True,\n        chapter_number=None,\n        chapter_start=None,\n        chapter_end=None,\n        lecture_number=None,\n        lecture_start=None,\n        lecture_end=None,\n        keep_vtt=False,\n        skip_hls_stream=False,\n    ):\n        \"\"\"This function will download the course contents ..\"\"\"\n        if not self.cookies:\n            logger.info(msg=\"Trying to login as\", status=self.username)\n        if self.cookies:\n            logger.info(msg=\"Trying to login using session cookie\", new_line=True)\n        for url in self.url_or_courses:\n            course = udemy.course(\n                url=url,\n                username=self.username,\n                password=self.password,\n                cookies=self.cookies,\n                skip_hls_stream=skip_hls_stream,\n                cache_session=self._cache_session,\n            )\n            course_name = course.title\n            if path:\n                if \"~\" in path:\n                    path = os.path.expanduser(path)\n            course_path = os.path.join(path, course_name)\n            chapters = course.get_chapters(\n                chapter_number=chapter_number,\n                chapter_start=chapter_start,\n                chapter_end=chapter_end,\n            )\n            total_lectures = course.lectures\n            total_chapters = course.chapters\n            logger.success(msg=course_name, course=True)\n            logger.info(msg=f\"Chapter(s) ({total_chapters})\", new_line=True)\n            logger.info(msg=f\"Lecture(s) ({total_lectures})\", new_line=True)\n            for chapter in chapters:\n                chapter_index = chapter.index\n                chapter_title = chapter.title\n                lectures = chapter.get_lectures(\n                    lecture_number=lecture_number,\n                    lecture_start=lecture_start,\n                    lecture_end=lecture_end,\n                )\n                lectures_count = chapter.lectures\n                filepath = to_filepath(course_path, chapter_title)\n                logger.set_log_filepath(course_path)\n                chapter_progress = (\n                    chapter_index\n                    if chapter_number\n                    else f\"{chapter_index} of {total_chapters}\"\n                )\n                logger.info(\n                    msg=f\"Downloading chapter : ({chapter_progress})\",\n                    new_line=True,\n                    before=True,\n                    cc=80,\n                    cc_msg=80,\n                )\n                logger.info(\n                    msg=f\"Chapter ({chapter_title})\", new_line=True, cc=15, cc_msg=60\n                )\n                logger.info(\n                    msg=f\"Found ({lectures_count}) lecture(s).\",\n                    new_line=True,\n                )\n                lecture_index = 0\n                if lecture_number:\n                    lecture_index = lecture_number - 1\n                if lecture_start:\n                    lecture_index = lecture_start - 1\n                if lecture_index < 0:\n                    lecture_index = 0\n                for lecture in lectures:\n                    lecture_assets = lecture.assets\n                    lecture_subtitles = lecture.subtitles\n                    lecture_best = lecture.getbest()\n                    if dl_lecture:\n                        lecture_index = lecture_index + 1\n                        if lecture.html:\n                            retval = lecture.dump(filepath=filepath)\n                            msg = retval.get(\"msg\")\n                            if msg not in [\"download\", \"already downloaded\"]:\n                                msg = f\"Lecture: '{lecture.title}.{lecture.extension}' failed to dump, reason: {msg}\"\n                                logger.warning(msg=msg, silent=True)\n                        self.download_lecture(\n                            lecture_best,\n                            filepath,\n                            lecture_index,\n                            lectures_count,\n                            quality,\n                        )\n                    if dl_assets:\n                        self.download_assets(lecture_assets, filepath)\n                    if dl_subtitles:\n                        self.download_subtitles(\n                            lecture_subtitles,\n                            filepath,\n                            language=language,\n                            keep_vtt=keep_vtt,\n                        )\n            print(\"\")\n\n\ndef main():\n    \"\"\"main function\"\"\"\n    sys.stdout.write(banner())\n    version = \"%(prog)s {version}\".format(version=udemy.__version__)\n    description = \"A cross-platform python based utility to download courses from udemy for personal offline use.\"\n    parser = argparse.ArgumentParser(\n        description=description, conflict_handler=\"resolve\"\n    )\n    parser.add_argument(\n        \"course\",\n        help=\"Udemy course or file containing list of course URL(s).\",\n        type=str,\n    )\n    general = parser.add_argument_group(\"General\")\n    general.add_argument(\"-h\", \"--help\", action=\"help\", help=\"Shows the help.\")\n    general.add_argument(\n        \"-v\", \"--version\", action=\"version\", version=version, help=\"Shows the version.\"\n    )\n\n    authentication = parser.add_argument_group(\"Authentication\")\n    authentication.add_argument(\n        \"-u\",\n        \"--username\",\n        dest=\"username\",\n        type=str,\n        help=\"Username in udemy.\",\n        metavar=\"\",\n    )\n    authentication.add_argument(\n        \"-p\",\n        \"--password\",\n        dest=\"password\",\n        type=str,\n        help=\"Password of your account.\",\n        metavar=\"\",\n    )\n    authentication.add_argument(\n        \"-k\",\n        \"--cookies\",\n        dest=\"cookies\",\n        type=str,\n        help=\"Cookies to authenticate with.\",\n        metavar=\"\",\n    )\n\n    advance = parser.add_argument_group(\"Advance\")\n    advance.add_argument(\n        \"-o\",\n        \"--output\",\n        dest=\"output\",\n        type=str,\n        default=os.getcwd(),\n        help=\"Download to specific directory.\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"-q\",\n        \"--quality\",\n        dest=\"quality\",\n        type=int,\n        help=\"Download specific video quality.\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"-c\",\n        \"--chapter\",\n        dest=\"chapter\",\n        type=int,\n        help=\"Download specific chapter from course.\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"-l\",\n        \"--lecture\",\n        dest=\"lecture\",\n        type=int,\n        help=\"Download specific lecture from chapter(s).\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"-s\",\n        \"--sub-lang\",\n        dest=\"language\",\n        type=str,\n        help=\"Download specific subtitle/caption (e.g:- en).\",\n        metavar=\"\",\n        default=\"en\",\n    )\n    advance.add_argument(\n        \"--chapter-start\",\n        dest=\"chapter_start\",\n        type=int,\n        help=\"Download from specific position within course.\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"--chapter-end\",\n        dest=\"chapter_end\",\n        type=int,\n        help=\"Download till specific position within course.\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"--lecture-start\",\n        dest=\"lecture_start\",\n        type=int,\n        help=\"Download from specific position within chapter(s).\",\n        metavar=\"\",\n    )\n    advance.add_argument(\n        \"--lecture-end\",\n        dest=\"lecture_end\",\n        type=int,\n        help=\"Download till specific position within chapter(s).\",\n        metavar=\"\",\n    )\n\n    other = parser.add_argument_group(\"Others\")\n    other.add_argument(\n        \"--info\",\n        dest=\"info\",\n        action=\"store_true\",\n        help=\"List all lectures with available resolution.\",\n    )\n    other.add_argument(\n        \"--cache\",\n        dest=\"cache_session\",\n        action=\"store_true\",\n        help=\"Cache your session to avoid providing again.\",\n    )\n    other.add_argument(\n        \"--keep-vtt\",\n        dest=\"keep_vtt\",\n        action=\"store_true\",\n        help=\"Keep WebVTT caption(s).\",\n    )\n    other.add_argument(\n        \"--sub-only\",\n        dest=\"caption_only\",\n        action=\"store_true\",\n        help=\"Download captions/subtitle only.\",\n    )\n    other.add_argument(\n        \"--skip-sub\",\n        dest=\"skip_captions\",\n        action=\"store_true\",\n        help=\"Download course but skip captions/subtitle.\",\n    )\n    other.add_argument(\n        \"--skip-hls\",\n        dest=\"skip_hls_stream\",\n        action=\"store_true\",\n        help=\"Download course but skip hls streams. (fast fetching).\",\n    )\n    other.add_argument(\n        \"--assets-only\",\n        dest=\"assets_only\",\n        action=\"store_true\",\n        help=\"Download asset(s) only.\",\n    )\n    other.add_argument(\n        \"--skip-assets\",\n        dest=\"skip_assets\",\n        action=\"store_true\",\n        help=\"Download course but skip asset(s).\",\n    )\n\n    args = parser.parse_args()\n    if args.cookies:\n        f_in = open(args.cookies)\n        with open(args.cookies) as f_in:\n            cookies = \"\\n\".join([line for line in (l.strip() for l in f_in) if line])\n        args.cookies = cookies\n    if not args.username and not args.password and not args.cookies:\n        # check if we already have a session..\n        configs = load_configs()\n        if not configs:\n            # if not ask user for user/pass or access token (cookie)\n            args.username = getpass.getuser(prompt=\"Username : \")\n            args.password = getpass.getpass(prompt=\"Password : \")\n            if args.username and args.password:\n                print(\"\\n\")\n            if not args.username and not args.password:\n                print(\"\")\n                args.cookies = getpass.get_access_token(prompt=\"Access Token : \")\n                if args.cookies:\n                    print(\"\\n\")\n        if configs:\n            cookies = configs.get(\"cookies\")\n            if not cookies:\n                args.username = configs.get(\"username\")\n                args.password = configs.get(\"password\")\n            if cookies:\n                args.cookies = cookies\n            args.quality = args.quality if args.quality else configs.get(\"quality\")\n            args.output = args.output if args.output else configs.get(\"output\")\n            args.language = args.language if args.language else configs.get(\"language\")\n    url_or_courses = extract_url_or_courses(args.course)\n    if not args.username and not args.password and not args.cookies:\n        print(\"\\n\")\n        logger.error(\n            msg=f\"You should either provide fresh access token or username/password for udemy..\"\n        )\n        sys.exit(0)\n    udemy_obj = Udemy(\n        url_or_courses=url_or_courses,\n        username=args.username,\n        password=args.password,\n        cookies=args.cookies,\n        cache_session=args.cache_session,\n    )\n    # setting the caching default so that we can avoid future login attemps.\n    if args.cache_session:\n        _ = to_configs(\n            username=args.username,\n            password=args.password,\n            cookies=args.cookies,\n            quality=args.quality,\n            output=args.output,\n            language=args.language,\n        )\n    dl_assets = dl_lecture = dl_subtitles = True\n    if args.assets_only:\n        dl_lecture = False\n        dl_subtitles = False\n        args.skip_hls_stream = True\n    if args.skip_assets:\n        dl_assets = False\n    if args.caption_only:\n        dl_lecture = False\n        dl_assets = False\n        args.skip_hls_stream = True\n    if args.skip_captions:\n        dl_subtitles = False\n    if not args.info:\n        if args.quality and args.quality > 720 and args.skip_hls_stream:\n            args.quality = \"\"\n            logger.warning(\n                msg=\"You cannot use --skip-hls and -q/--quality options togather, considering --skip-hls only..\"\n            )\n        udemy_obj.course_download(\n            path=args.output,\n            quality=args.quality,\n            language=args.language,\n            dl_assets=dl_assets,\n            dl_lecture=dl_lecture,\n            dl_subtitles=dl_subtitles,\n            chapter_number=args.chapter,\n            chapter_start=args.chapter_start,\n            chapter_end=args.chapter_end,\n            lecture_number=args.lecture,\n            lecture_start=args.lecture_start,\n            lecture_end=args.lecture_end,\n            keep_vtt=args.keep_vtt,\n            skip_hls_stream=args.skip_hls_stream,\n        )\n    if args.info:\n        udemy_obj.course_listdown(\n            chapter_number=args.chapter,\n            chapter_start=args.chapter_start,\n            chapter_end=args.chapter_end,\n            lecture_number=args.lecture,\n            lecture_start=args.lecture_start,\n            lecture_end=args.lecture_end,\n            skip_hls_stream=args.skip_hls_stream,\n        )\n\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        logger.error(msg=\"User Interrupted..\", new_line=True)\n        sys.exit(0)\n"
        },
        {
          "name": "udemy",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}