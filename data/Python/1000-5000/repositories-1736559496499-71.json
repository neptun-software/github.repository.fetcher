{
  "metadata": {
    "timestamp": 1736559496499,
    "page": 71,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/pytype",
      "stars": 4806,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.095703125,
          "content": "# Tell GitHub to use Python syntax highlighting for `.pytd` files\n*.pytd linguist-language=python\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8388671875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n!build_scripts/wheels\n*wheelhouse/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Cmake and friends\nCMakeFiles/\n\n# IDEs\n.vscode\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.25,
          "content": "[submodule \"typeshed\"]\n\tpath = typeshed\n\turl = https://github.com/python/typeshed.git\n[submodule \"googletest\"]\n\tpath = googletest\n\turl = https://github.com/google/googletest\n[submodule \"pybind11\"]\n\tpath = pybind11\n\turl = https://github.com/pybind/pybind11\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.318359375,
          "content": "- id: pytype\n  name: Pytype\n  description: A static type analyzer for Python code.\n  entry: pytype\n  # needs to run in the same virtual environment as the code being checked, therefore\n  # language = system instead of python\n  language: system\n  types: [python]\n  args:\n    - '--jobs=auto'\n    - '--keep-going'\n  files: \\.py$\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.1611328125,
          "content": "Matthias Kramm\nRebecca Chen\nTeddy Sudol\nMartin Demello\nAlvaro Caceres\nDave Baum\nArthur Peters\nPeter Ludemann\nPaul Swartz\nNed Batchelder\nAllison Kaptur\nLaura Lindzey\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 70.6279296875,
          "content": "Version 2024.10.11:\n\nUpdates:\n* Drop support for Python 3.8 and 3.9.\n\n* Make merge_pyi not to overwrite existing type annotations.\n\n* When printing types (e.g. in error messages or  `reveal_type`), print generic\n  builtin names in lowercase.\n\n  Old: `from typing import List; List[Foo]`\n  New: `list[Foo]`\n\nBug fixes:\n* Unpin dependency on networkx, which means pytype now supports >=3.3.\n* Emit all unused/duplicate files with --unused_imports_info_files option,\n  rather than only one per unique module name.\n* Change return types of AsyncGenerator's methods to coroutines. This brings\n  pytype's definition in line with the definition on typeshed and reflects the\n  fact that asynchronous generators defined using the `async def`/`yield` syntax\n  have methods returning coroutines rather than just arbitrary awaitables.\n* Fix type guards propagating invisibile bindings. Fixes some incorrect \"used\n  after deleted\" errors with Python 3.12.\n* Fix resolution of ParamSpec in files with circular imports.\n\nVersion 2024.09.13:\n\nUpdates:\n* Basic support for Python 3.12.\n\n  With this release you can run pytype with Python 3.12. But pytype has no\n  support for any new features added in Python 3.12.\n\n  Look out for type checking changes caused by different bytecode emit:\n  * dict/list/set comprehensions are type checked 1 level deeper.\n  * Errors after `if` statements can be printed differently.\n\n* Add support for pickled pyi files in merge_pyi.py.\n\n* Several performance improvements.\n\n* Stop validating imports map. Pytype used to validate that each file in an\n  import map exists. This has proved too costly, especially on network file\n  systems. Pytype now assumes import maps specified via --imports_info are\n  correct.\n\n* Add support for flag files (required for Bazel workers).\n\n* Change the format of errors printed to the console.\n\n  Errors now also include the column number and a code snippet, which highlights\n  the part that's broken.\n\n  Old:\n    File \"test.py\", line 4, in foo: unsupported operand type(s) for +: str and int [unsupported-operands]\n      Function __add__ on str expects str\n  New:\n    test.py:4:10: error: in foo: unsupported operand type(s) for +: str and int [unsupported-operands]\n      Function __add__ on str expects str\n        print(arg + 3)\n              ~~~~~~~\n\nBug fixes:\n* Add type definitions for `aiter()` and `anext()`.\n* Don't include deleted top-level variables in module types.\n* Don't crash when a Generic subtype uses a TypeVar differently.\n* Fix type inference for `iter(func, None)`.\n\nVersion 2024.04.11:\n\nUpdates:\n* Change error message hint to suggest `X | None` rather than `Optional[X]`.\n\nBug fixes:\n* Take the 'maybe_missing_members' attribute into account when setting up enum\n  classes.\n* Fix a bug in signature compatibility checking.\n* Teach main.py how to fix unescaped spaces in command-line arguments.\n* Fix return type of exit() and quit().\n* Update pytype_runner.py - change escape_ninja_path to escape all the ninja\n  path escape-needing characters\n* Modify type annotations for coroutines as soon as they are created.\n* Fully promote __init_subclass__ to a classmethod.\n\nVersion 2024.03.19:\n\nUpdates:\n* Add 'default' field to pytd.TypeParameter.\n\nBug fixes:\n* Raise an error when a non-class is passed to a class match case.\n\nVersion 2024.03.11:\n\nUpdates:\n* Split generate_pyi into separate components for ast and pyi generation.\n* Replace `pickle` with `msgspec`.\n* Support PEP 742 (TypeIs).\n* Update typeshed pin to commit c35b3bc from Mar 8.\n* Support typing_extensions.Unpack usage in typeshed.\n\nBug fixes:\n* Fix a corner case with an indefinite case in a match with concrete values.\n* Check types as well for dataclasses.replace.\n* Export enum values as Literals where possible.\n* Remove mystery 'None' from overlays/named_tuple.\n* Still do property lookups when maybe_missing_members is set.\n* Fix crash in enum_overlay.\n* Recognize __func__ attribute on methods.\n* Fix a crash when constant-folding an invalid map literal.\n\nVersion 2024.02.27:\n\nUpdates:\n* Add support for pragmas to pytype.\n* Implement the cache-return pragma.\n\nBug fixes:\n* Track the set of case lines we have encountered, not just the number of them.\n* Fix interaction between Self and overload.\n* Typo fix in cover_from_cmp.\n* Add __match_args__ to dataclasses.\n* Add missing __reduce__ method to builtins.object.\n* Fix a bug in how we resolve aliases in pyi files.\n* Don't crash when using a method as a fiddle config type constructor.\n\nVersion 2024.02.13:\n\nBug fixes:\n* Fix: pytype.single -> pytype.main.\n* Catch UnicodeDecodeError when attempting to read excluded files.\n* Add protocol overload to definition of builtins.divmod.\n\nVersion 2024.02.09:\n\nUpdates:\n* Remove 'deep' and 'store_all_calls' options.\n* Remove duplicate pytype inputs and outputs.\n\nBug fixes:\n* Fix module resolution bug in load_pytd.\n* Pattern matching:\n  * Fix a corner case in pattern matching where the first case is None.\n  * Fix a corner case when comparing to Any in a case statement.\n  * Fix a false redundant-match when matching instances of a nonexhaustive type.\n  * Do not attempt to track matching if we don't recognise a CMP as an instance.\n  * Do not attempt to track matches if the match variable contains an Any.\n  * Rework the check for an out-of-order opcode in a match block.\n* Fix a crash when calling get() on a TypedDict instance.\n* Don't crash when inferring a type for an uncalled attrs.define.\n* Handle aliased imports in type stubs better.\n* Teach pytype that zip is actually a class.\n* Catch bad external types in type annotations.\n\nVersion 2024.01.24:\n\nUpdates:\n* Stop doing suboptimal line number adjustment for 3.10/3.11 consistency.\n\nBug fixes:\n* Fix a couple of --none-is-not-bool issues.\n* --bind-decorated-methods: Don't treat SimpleFunction as a full-fledged method.\n* Fix bad matching of typing.Self against other TypeVars.\n* Don't do attr-demangling on non-attr classes.\n* Fix interaction between signature compatibility checks and typing.Self.\n* Fix [invalid-function-definition] error caused by ignoring\n  dataclasses.KW_ONLY.\n* Report an error when a TypedDict key has an ambiguous type.\n* Fix bug caused by bad ParameterizedClass hashing.\n* Make sure we consistently use the same `dict` class for types.\n* Don't raise MissingParameter on keyword-only params when **kwargs is present.\n\nVersion 2024.01.05:\n\nUpdates:\n* Support typing.Required and typing.NotRequired.\n* Detect bad calls to `dataclasses.replace`.\n\nBug fixes:\n* Do not crash if we encounter a malformed splat in a constant list.\n* Allow ParamSpecs as generic class parameters.\n* Fix crash caused by incorrect assumption about the type of an ast node.\n* Allow NoReturn to match anything in @override checks.\n* Expand the types that `dict.__ior__` accepts.\n\nVersion 2023.12.18:\n\nBug fixes:\n* Prevent `ChainMap`, `Counter` and `OrderedDict` from being dropped if they're\n  only imported.\n* Fix matching against a plain fiddle.Config in pyi signatures.\n* Remove no-longer-necessary `__getattribute__`s from enum.pytd.\n* Resolve attribute access on Any constants in pytd to just the constant.\n* Don't let `typing` be treated as a replaceable Any.\n* FIX: Only call match_fiddle_instance_against_bare_type if we have a fiddle\n  instance.\n\nVersion 2023.12.08:\n\nBug fixes:\n* Fix a crash with nested pattern matches.\n* Allow typing.Unpack to be parameterized.\n\nVersion 2023.12.07:\n\nUpdates:\n* 3.11: support ExceptionGroup.\n* Update typeshed pin to commit 0b36e65 from Nov 29.\n* Add a flag, --none-is-not-bool, to disable treatment of None as a bool.\n\nBug fixes:\n* Remove extraneous quotes around part of error message.\n* Fix pattern matching with `case None` branches.\n* Support @override for methods anywhere in the MRO.\n\nVersion 2023.11.29:\n\nUpdates:\n* Remove the --use-enum-overlay flag. It has been enabled by default since the\n  last release.\n\nBug fixes:\n* Mark typing.Required as generic.\n* Fix container mutation bug.\n\nVersion 2023.11.21:\n\nUpdates:\n* Add support for typing_extensions.override.\n* Add support for the pax fiddle library.\n* Enable --use-enum-overlay by default.\n\nBug fixes:\n* Take arguments passed by keyword into account in Unknown.to_type().\n* Don't create extra copies of `None` in convert.py.\n* Allow frame locals to be an Unsolvable (Any).\n* When making properties, check their arity against require arg count.\n* Allow arbitrary AST nodes in typing.Annotated.\n* Fix crash caused by assuming parameter names are strings.\n* Fix corner case in which decorated setUp method wasn't being analyzed.\n* Add missing buffer methods to memoryview.\n* Allow functions in pyi files to have any number of decorators.\n\nVersion 2023.10.31:\n\nUpdates:\n* Happy Halloween!\n* typing.Self: support Self in variable annotations.\n* 3.11: Implement typing features Never, clear_overloads, get_overloads,\n  assert_type, reveal_type, and assert_never.\n* Add feature flag --bind-decorated-methods to bind 'self' correctly in\n  decorated methods.\n\nBug fixes:\n* Fix some corner cases in invalidating an enum tracker.\n* Use equality check rather than identity check for recursion detection.\n\nVersion 2023.10.24:\n\nUpdates:\n* Add support for typing.Self in method type annotations.\n\nBug fixes:\n* Support pattern matching against a tuple of match variables.\n* Fix crash caused by use of a recursive type in a callable.\n* When setting a type from assertIsInstance narrow the original type if\n  possible.\n\nVersion 2023.10.17:\n\nUpdates:\n* Remove the --overriding-parameter-count-checks flag. This flag's behavior is\n  now the default.\n* Support enum.StrEnum.\n* Support type narrowing for match cases with `as` captures.\n* Add basic support for Python 3.11.\n  * Pytype can now analyze code that does not use any new 3.11 features in 3.11.\n  * Support for new features will follow over the coming months.\n\nBug fixes:\n* Improve `set` and `frozenset` methods.\n* Fix maximum recursion depth error.\n* Remove extraneous check in RenameModuleVisitor.\n\nVersion 2023.10.05:\n\nUpdates:\n* Default --overriding-parameter-count-checks to True. This flag is now a no-op.\n\nBug fixes:\n* Improve type signatures for set.union.\n* Simplify the output of assert_type and reveal_type.\n* --strict-undefined-checks: Don't propagate block locals when a block cannot be\n  exited from.\n* Fix various Python 3.11 bugs.\n\nVersion 2023.09.27:\n\nUpdates:\n* Update typeshed pin to commit 8597724 from Sep 18.\n* Python 3.11: add exception handling.\n* Support pattern matching literal sequences.\n\nBug fixes:\n* Take TypeVar substitutions into account when extracting annotations.\n* Fix a crash when pattern matching against `Callable()`.\n* Apply overlays when loading modules imported in pyi files.\n* Don't ignore decorated initializers.\n* Add object.__format__ to builtins stubs.\n* Export the type stub for attrs.cmp_using.\n\nVersion 2023.09.19:\n\nUpdates:\n* Update typeshed pin to commit ce222e5 from Jun 12.\n* pytype-single: Add --no-validate-version flag to disable Python version\n  checks. This makes testing not-yet-supported versions easier.\n* Remove max version requirement for installing pytype. This prevents accidental\n  installation of very old versions of pytype that don't have this requirement.\n  Pytype itself still emits an error upon encountering an unsupported version.\n* Use pycnite for bytecode processing.\n\nBug fixes:\n* Fix a corner case in ParamSpec matching for a class with a __call__ method.\n* Python 3.11:\n  * Fix implementations of several 3.11 opcodes.\n  * op.next should not point backwards even if the op is a backwards jump.\n* Track undecorated functions for better handling of TypeVars in signatures.\n* Fix 'TypeVar not in scope' check for imported TypeVars.\n\nVersion 2023.09.11:\n\nUpdates:\n* Preserve the line number of del statements to use in error messages.\n\nBug fixes:\n* Never discard user-provided overloads in output.py.\n\nVersion 2023.08.31:\n\nUpdates:\n* Support typing.is_typeddict.\n* Change how pytype handles `isinstance(..., Any)`.\n* Allow class-scoped TypeVars in classmethods.\n\nBug fixes:\n* Filter out non-visible bindings in vm._unpack_sequence.\n* Use the alias name for resolving property decorators.\n* Don't collapse long unions containing literals.\n* Update pytd printer's treatment of `cls` annotations to match `self`.\n* Clear out any `self` annotation before a function recursively calls itself.\n* vm: fix narrowing for unittest assertions.\n\nVersion 2023.08.22:\n\nBug fixes:\n* Report more position information for type stub parse errors.\n* Handle aliases in type stubs more consistently.\n\nVersion 2023.08.14:\n\nUpdates:\n* Add support for typing_extensions.dataclass_transform used without arguments.\n* Remove --enable-cached-property entirely.\n\nBug fixes:\n* Relax the pyi parser's duplicate identifier detection.\n* Don't crash on `[]` appearing in the parameters of a user-defined class.\n* Work around syntax errors in type stubs.\n* Allow `_HAS_DYNAMIC_ATTRIBUTES` to work for class attribute lookups.\n* Fix how pytype handles aliases to properties and overloaded methods in stubs.\n* Fix how the enum overlay logs [not-supported-yet].\n\nVersion 2023.07.28:\n\nUpdates:\n* Flip the enable-cached-property flag to True. This flag is now a no-op and\n  will be removed in the next release.\n* Add bad_unpacking error for unordered types (set and frozenset) unpacking.\n* Support assigning to `importlib.import_module(...)` in pyi files.\n\nBug fixes:\n* Raise a parser error when loading a pyi file with an invalid literal\n  annotation.\n* Use init_class instead of instantiate in MATCH_CLASS.\n\nVersion 2023.07.21:\n\nBug fixes:\n* Include ParamSpecs in CollectTypeParameters.\n* Fill in TypeVar substitutions when matching against protocols.\n* Look up TypeVar values when retrieving an attribute from a ParameterizedClass.\n* Add missing __buffer__ method to builtins.bytearray.\n* output.py: don't crash upon encountering ParamSpecMatch.\n* Add ForwardRef definition to typing stub.\n* Implement definitions of collections.UserList, collections.UserString.\n* Overload union, intersection, difference, and symmetric difference for Set\n  class.\n\nVersion 2023.07.12:\n\nUpdates:\n* Drop support for Python 3.7, which reached end-of-life last month.\n* Support the new `BINARY_OP` opcode in python 3.11.\n* Fix some stack effects for the new 3.11 opcodes.\n\nVersion 2023.06.16:\n\nUpdates:\n* Add partial typing.Self support in type stubs.\n* Make some minor improvements to pytype's type stub printer.\n\nBug fixes:\n* Flesh out definition of collections.UserDict.\n* Fix timeout in file that constructs a complicated dict of tuples.\n* Narrow the type of the matched variable in case branches with class matches.\n\nVersion 2023.06.02:\n\nUpdates:\n* Performance improvement: change Dict.set_str_item to merge nonatomic str\n  values into Dict._K.\n\nBug fixes:\n* Fix crash caused by typing.TypeVar lookup failure.\n* Do not follow aliases for \"builtins\" and \"typing\" in pyi files.\n* Check [not-instantiable] for classes inheriting directly from a protocol.\n* Do a better job of catching illegal TypedDict field names.\n* FIX: Do not match all views for a var with multiple bindings in a CLASS_MATCH.\n* Take into account __round__ implementations when analyzing round().\n* Fix timeout caused by infinite loop in LookupItemRecursive.\n* Fix some spurious [not-instantiable] errors.\n* Only store the blockgraph when compiling the main module code.\n\nVersion 2023.05.24:\n\nUpdates:\n* Performance improvements:\n  * Speed up Variable.Bindings by using the reachability analyzer.\n  * Implement literal erasure for List and Tuple.\n* Add support for analyzing python scripts.\n\nBug fixes:\n* Fix bug in pytype's handling of overloads.\n* Fix timeout caused by name clash between a module and a package.\n* Limit the scope of module aliases in load_pytd.\n* Handle generic dataclasses in fiddle configs.\n* Support referring to a class via an alias in a pyi file.\n* Fix a crash when pattern matching on collections.abc classes.\n* Handle nested classes better in the LookupExternalTypes visitor.\n* Improve matching of typing names in the pyi parser.\n\nVersion 2023.05.08:\n\nUpdates:\n* When checking for unmatched typevars in defs, use a separate message for bare\n  generic aliases.\n* If an overridden method changes the name of a posarg, check posarg count but\n  not types.\n\nBug fixes:\n* Fix for number of bindings when constant folding long lists.\n\nVersion 2023.04.27:\n\nUpdates:\n* Performance optimizations:\n  * Cache the `NestedAnnotation.formal` property.\n  * Speed up `LateAnnotation.__getattribute__`.\n  * Speed up abstract_utils._isinstance.\n* Add support for dataclasses.KW_ONLY.\n* Bump networkx version requirement to pick up a matplotlib compatibility fix.\n\nBug fixes:\n* Fix a string manipulation bug in LookupScopedNames.\n* Fix a crash in the fiddle overlay when instantiating a function-based config.\n* Allow constants as defaults in pyi files.\n\nVersion 2023.04.18:\n\nUpdates:\n* Remove pytype's copy of the _ctypes stub.\n\nBug fixes:\n* Remove expensive copy.deepcopy call from the pytd printer.\n* Track default (_) cases in match statements in the director.\n\nVersion 2023.04.11:\n\nUpdates:\n* Add a block graph visualiser.\n* Remove the --always-use-return-annotations flag. Its behavior is now enabled\n  by default.\n\nBug fixes:\n* Add pattern matching for builtins.\n* Keep track of already-seen cases when analysing the same match statement\n  twice.\n* Support `total=False` on imported TypedDicts.\n* Use SupportsIndex in some builtins.\n* Improve handling of dataclasses and attrs in pyi files.\n* Fix inferred yield type for YIELD_FROM opcode.\n\nVersion 2023.03.31:\n\nUpdates:\n* Add an overlay for the third party fiddle configuration library.\n* Add feature to not replace None with Any when it is the only value.\n\nBug fixes:\n* Fix pattern matching over imported enums.\n* Track the variable name for annotated assignments in the director.\n* Don't replace late annotations with Any in class definitions.\n* Preserve TypedDict instances in TypeVar substitutions.\n* Delegate getattr on pyi classmethods and staticmethods to underlying method.\n* Support late annotations as parameters for user-defined generic classes.\n* Fix a nondeterminism bug in pytype.\n* Fix a latent type error in the typing.TypedDict overlay.\n* Fix a crash caused by failing to catch [bad-concrete-type].\n* Update memview stubs to be closer to API.\n\nVersion 2023.03.13:\n\nUpdates:\n* Support abc.abstractclassmethod and abc.abstractstaticmethod.\n\nBug fixes:\n* Look up aliased imports when resolving imported modules.\n* Copy typeshed changes to builtins.pyi.\n* Fix a pytype crash when encountering a pyi import corner case.\n\nVersion 2023.03.08:\n\nUpdates:\n* Add basic query visualization to the CFG visualizer.\n\nBug fixes:\n* Slight fix to wording of non-iterable strings error message.\n* Allow TypeVar amd ParamSpec to be passed None for bounds and constraints.\n* Handle multiple options for a class's base classes better.\n* Don't crash on `from functools import cached_property`.\n* Support `__self__` on methods.\n\nVersion 2023.03.02:\n\nUpdates:\n* Update typeshed pin to commit 37a180e from Feb 3.\n* Make it possible to run pytype on PyPy.\n\nBug fixes:\n* Use ninja importability to determine python-ninja usability.\n* Treat `typing.Pattern` and `typing.Match` as aliases of the same-named classes\n  in the `re` module.\n* Handle callables better in protocol matching.\n\nVersion 2023.02.17:\n\nUpdates:\n* Add overlay for functools.cached_property.\n* Performance optimization: combine two expensive loops in _UniqueMatches.insert\n\nBug fixes:\n* Don't parse literal string constants as type annotations.\n* Add missing __required_keys__ and __optional_keys__ attributes to TypedDict.\n* Do not reexport `__future__` imports.\n\nVersion 2023.02.14:\n\nBug fixes:\n* Add fget, fset, fdel attributes to property.\n* Check for ignored abstract methods on nested classes.\n* Add a native TypedDict.get() implementation.\n* Remove some unnecessary CFG nodes.\n\nVersion 2023.02.09:\n\nUpdates:\n* Support isinstance(..., Union[...]).\n* analyze_project: take external dependencies of typeshed stubs into account.\n* Add support for the 3.10+ kw_only dataclass field parameter.\n\nBug fixes:\n* Fix a misfiring of the [incomplete-match] error.\n* Detect mixin override of @final-decorated attribute.\n* Always apply TypeVar substitutions to function return types.\n\nVersion 2023.01.31:\n\nUpdates:\n* PEP 612:\n  * Add support for ParamSpecs in source files.\n  * Basic support for ParamSpec args and kwargs.\n* Remove --overriding-return-type-checks (now a no-op).\n\nBug fixes:\n* Fix types of Mapping.keys(), values(), items().\n* Don't unnecessarily mutate type parameter values to Any.\n* Add missing methods from collections.abc.MutableSequence.\n\nVersion 2023.01.17:\n\nUpdates:\n* Default --overriding-return-type-checks to True.\n* Optimise literal output for class variables as well as constants.\n* Do some preliminary work for pytype Python 3.11 support.\n\nBug fixes:\n* Add missing 3.10 attributes to typing.Counter.\n* Do not parse default values as types.\n* Make `ChainMap` accept `MutableMapping`.\n\nVersion 2023.01.10:\n\nUpdates:\n* Add a new \"missing_modules\" parameter to load_pytd.create_loader.\n* Support putting pytype settings in a pyproject.toml file.\n* Add a performance optimisation for outputting the type of large collections.\n\nBug fixes:\n* Add missing int.bit_count method.\n* Improve pytype's handling of dict.update.\n* Do better matching of overloads in generic classes.\n* Show expected type in InterpreterFunction error messages with *args/**kwargs.\n* Allow 'self' as a keyword argument to str.format.\n\nVersion 2022.12.15:\n\nUpdates:\n* Remove the --overriding-default-value-checks and\n  --overriding-parameter-name-checks feature flags, which have been no-ops since\n  the last release.\n* Update typeshed pin to commit 78d96cd from July 12.\n\nVersion 2022.12.09:\n\nUpdates:\n* PEP 612: Add support for imported ParamSpec and Concatenate instances.\n* Update typeshed pin to commit 4e0aacc from July 12.\n* Feature flags:\n  * Remove --mapping-is-not-sequence, which has been a no-op since the last\n    release.\n  * Default --overriding-default-value-checks to True.\n  * Default --overriding-parameter-name-checks to True.\n\nBug fixes:\n* Fix a bug in module resolution in load_pytd.\n* Don't let one TypeVar contain another, and keep invalid TypeVars when\n  possible.\n* Support calling super() with a subclass of builtins.type.\n* Fix annotation of *args and **kwargs when constructing a SimpleFunction.\n* Don't report container errors for late types.\n* --always-use-return-annotations: handle coroutines.\n* Add missing attributes to typing.TextIO.\n\nVersion 2022.11.29:\n\nUpdates:\n* Default --mapping-is-not-sequence to True.\n\nBug fixes:\n* Fix incorrect \"Any\" count in pytd printer for Callable[nothing, X].\n\nVersion 2022.11.18:\n\nUpdates:\n* Allow NoReturn to appear anywhere.\n* Add basic TypeGuard support.\n\nBug fixes:\n* Improve imports handling in the pytd printer.\n* Do a better job of catching bad parameterized types in pyi files.\n* Fix constant folding for python-3.9+ literals compiling to LIST_EXTEND.\n* Stop accidentally converting bound to unbound functions.\n\nVersion 2022.11.10:\n\nUpdates:\n* Add an optional no-return-any flag to disallow Any as a return type.\n* Add a mechanism to allow per-file opting in to feature flags, via a file-level\n  `features` directive, for example, `# pytype: features=no-return-any`.\n\nBug fixes:\n* Do not let a kwarg in **args interfere with a posonly arg of the same name,\n  pyi edition.\n* Interpret special characters in serialized (pyi or pickle) Literal[\"\"] type\n  definitions correctly.\n\nVersion 2022.10.26:\n\nUpdates:\n* Implement basic exhaustiveness checking for pattern matches over enums.\n* Performance improvements:\n  * Avoid expensive variable filtering in a couple of places.\n  * Switch fully to argument-by-argument call matching for PyTDFunction.\n\nBug fixes:\n* Relax an overly strict TypeVar consistency check.\n* Track TypeVar unions in the matcher.\n* Emit `node/kind record` and `subkind class` facts instead of `node/kind class`\n* Add a missing parameter type to bytearray.__add__.\n\nVersion 2022.10.13:\n\nUpdates:\n* Add a flag, --mapping-is-not-sequence, to forbid matching mappings against\n  the Sequence protocol.\n* Add a library for serializing the CFG.\n* Fully support pattern matching in 3.10, aside from exhaustiveness checks.\n* Make some performance improvements around type-checking of function call\n  arguments for functions defined in the same file.\n\nBug fixes:\n* Store more information in matcher._recursive_annots_cache.\n* Fix \"appears only once\" TypeVar error on overloads in generic classes.\n* Do not let a kwarg in **args interfere with a posonly arg of the same name.\n* Re-resolve LateType instances that resolve to another LateType.\n\nVersion 2022.09.27:\n\nUpdates:\n* Slightly improve pytype's numpy stub.\n* Remove --overriding-parameter-type-checks flag that is now enabled by default.\n* Add partial support for pattern matching.\n* Add `Attrs` protocol and `__attrs_attrs__` member to attr overlay.\n\nBug fixes:\n* Fix infinite recursion caused by annotated __new__ methods.\n* Take nested classes into account when re-resolving dependencies in load_pytd.\n* Support empty generic protocols.\n* Correct type annotations for IO objects: `seek` and `truncate`.\n* Define __new__ instead of __init__ for np.ndarray.\n\nVersion 2022.09.19:\n\nUpdates:\n* Rework arg parsing to make using pytype as a library in tools easier.\n* Move typegraph and cfg graph visualisation to a separate frontend binary.\n* Add a feature flag, --always-use-return-annotations, to always use return type\n  annotations when analyzing function calls.\n* Default --overriding-parameter-type-checks to True. This flag will be removed\n  in an upcoming release.\n\nBug fixes:\n* Add an OrderedCode object to LOAD_FOLDED_CONST.\n* Treat LiteralString as str in pyi files.\n* xref:\n  * Replace `record` into `package` kind and add `childof` edge from `file`.\n  * Do not add a defines/binding edge for `a.x = ...` if `a` is not `self`.\n\nVersion 2022.09.08:\n\nUpdates:\n* Remove the --build-dict-literals-from-kwargs flag. Its behavior is now enabled\n  by default.\n\nBug fixes:\n* Parse Literal values containing quotes better.\n* Make collections.OrderedDict an alias for typing.OrderedDict.\n\nVersion 2022.08.30:\n\nUpdates:\n* Update typeshed pin to commit 7de1ed9 from Jun 14.\n* Specify option conflicts and required dependencies in @uses decorator in\n  config.Postprocessor.\n* Remove the --strict_namedtuple_checks flag. Its behavior is now enabled by\n  default.\n* Support TypedDict construction via function call in pyi files, and use\n  TypedDict functional form if a keyword is used as a field name.\n\nBug fixes:\n* Allow [signature-mismatch] disable to be put on any line of a function\n  signature.\n* Teach pytype that _typeshed.NoneType is the same as type(None).\n* Fix a check that was wrongly filtering out lambdas in function bodies.\n* Check for misuse of ellipses in Callable.\n* Add missing constants to _ctypes.\n* xref:\n  * Fix function param indexing.\n  * Index class attributes defined as classvars.\n\nVersion 2022.08.23:\n\nBug fixes:\n* Add missing attrs.validators.min_len.\n* Allow bare variable annotations at the module level.\n* Change the order of the Protocol and Generic bases when expanding\n  Protocol[_T].\n* Handle multiple substitutions better in PyTDSignature.call_with_args.\n* Improve name resolution for typeshed.\n\nVersion 2022.08.17:\n\nUpdates:\n* Use argument-by-argument call matching for some simple generic functions.\n\nBug fixes:\n* Check that @classmethod and @staticmethod are applied to callable functions.\n* Add StopIteration.value and turn type comments into annotations.\n* Fix nested class inference for TypedDict and ParameterizedClass.\n* analyze_project: fix parsing of `jobs=auto` from config files.\n* xref: link the entire span of a function call.\n\nVersion 2022.08.03:\n\nBug fixes:\n* Support aliases of module name prefixes in load_pytd.\n* Don't allow partial late annotations in | union types.\n* Fully resolve pytd aliases in LookupExternalType's duplicate aliases check.\n\nVersion 2022.07.26:\n\nUpdates:\n* Remove the --enable-bare-annotations flag. Its behavior is now the default.\n* Support generic properties.\n\nBug fixes:\n* Python 3.10:\n  * Don't assume Any | Any is a type annotation.\n  * Calculate starts of decorated functions correctly.\n* Don't crash on a nested function referenced in a closure before definition.\n* Sort classes by name in convert.merge_classes.\n\nVersion 2022.07.18:\n\nBug fixes:\n* Look up methods properly on classes with _HAS_DYNAMIC_ATTRIBUTES.\n* Handle .pyi-1 files in load_pytd.Module.is_package().\n* Adjust opcode line numbers for return statements in python 3.10+.\n* Remove optimize.Factorize, which unnecessarily flattens overloaded functions.\n* Fix coroutine signatures in overriding_checks.\n* Handle generic types correctly in signature compatibility checks.\n* Respect NoReturn annotations even when maximum depth is reached.\n\nVersion 2022.06.30:\n\nUpdates:\n* Add the option to show kythe facts in the debug indexer.\n* Add a command-line argument `pickle-metadata` to pass metadata to pytype to\n  store during serialization to a pickle file.\n\nBug fixes:\n* Make slight improvements to --overriding-default-value-checks.\n* Preserve comments when preprocessing source code.\n\nVersion 2022.06.23:\n\nUpdates:\n* Support `T1 | T2 | ...` syntax for union types in python 3.10+ (PEP604).\n* Replace libcst with ast in directors.py in Python 3.9+. This makes source code\n  parsing much faster.\n\nBug fixes:\n* Python 3.10 fixes:\n  * Convert `types.NoneType` to `builtins.NoneType`.\n  * Adjust the error line number for an implicit `return None`.\n  * Add `ParamSpecArgs` and `ParamSpecKwargs` to `typing.pytd`.\n\nVersion 2022.06.14:\n\nUpdates:\n* Add a stub and overlay for the 'attrs' module.\n\nBug fixes:\n* Fix parameterized attributes for dataclass subclasses.\n* Mark dict views as reversible in Python 3.8+.\n* Add missing memoryview.nbytes attribute.\n* Fix chained attribute traces for python 3.10.\n\nVersion 2022.06.06:\n\nUpdates:\n* Remove --enable-nested-classes, which has been a no-op since the last release.\n* Support `__all__ += [...]` in pyi files.\n* Add support for the TypedDict functional constructor.\n* Add a `--backup` option to merge_pyi to copy the source file when overwriting.\n* Add a merge_project binary to recursively merge files in a project.\n\nBug fixes:\n* Preserve precise element types when adding two fixed-length tuples.\n* Raise a meaningful exception when unpickling a pytd file fails.\n* Don't check Literals when expanding compatible builtins.\n* Fix a crash when applying a method decorator to a property.\n* Fix some off-by-one errors in sequence unpacking.\n* Fix a tuple addition crash.\n* Fix a crash in the indexer.\n\nVersion 2022.05.19:\n\nUpdates:\n* Default --enable-nested-classes to True. This flag will be removed in an\n  upcoming release.\n* Use argument-by-argument matching for PyTDFunction in simple cases.\n\nBug fixes:\n* Load symbols from typing when converting parametrised collection classes.\n* Raise an error when referencing a nonexistent pyi file in another pyi file.\n* Take `__all__` into account when importing `*` in pyi files.\n* Support `from x import y` for stdlib modules in pickled pyi files.\n* Preprocess source code to augment bare annotations in functions.\n* Slightly change the format of the [signature-mismatch] error.\n* Switch resolution order for nested and top-level classes in AddNamePrefix.\n\nVersion 2022.05.10:\n\nBug fixes:\n* Improve the collections_abc overlay.\n* Raise an exception for typed dict errors rather than logging them immediately.\n* Reset matcher errors between individual parameter matches.\n* --overriding-return-type-checks: Allow method return types to be changed when\n  the overridden type is NoReturn.\n* Resolve GenericType nodes better in LookupLocalTypes.\n\nVersion 2022.05.05:\n\nUpdates:\n* Update typeshed pin to commit 354787f from Apr 8.\n* Remove --enable-typed-dicts, which has been a no-op since the last release.\n* Add a group of feature flags for checking compatibility of signatures for\n  overriding methods:\n  * --overriding-default-value-checks\n  * --overriding-parameter-count-checks\n  * --overriding-parameter-name-checks\n  * --overriding-parameter-type-checks\n  * --overriding-return-type-checks\n* Add code structure for gradual migration to argument-by-argument call\n  matching.\n\nBug fixes:\n* Move a check out of --enable-nested-classes.\n* Fix spurious not-callable error for typing.OrderedDict.\n\nVersion 2022.04.26:\n\nUpdates:\n* Enable --enable-typed-dicts by default.\n\nBug fixes:\n* Preserve the full name of imported TypedDicts.\n* Stop dropping TypedDict annotations from local assignments.\n* Don't mark fields of anonymous namedtuple parents as ClassVars.\n* Instantiate imported TypedDicts to typed_dict.TypedDict, not Instance.\n* Fix more typeshed circular dependency issues.\n\nVersion 2022.04.22:\n\nUpdates:\n* Add support for `|` for Dicts in 3.9.\n\nBug fixes:\n* Make a collection of bug fixes needed for nested class support.\n* Handle attribute accesses on Final[...] constants from pyi files.\n* Remove collections.OrderedDict from pytype.\n* Remove duplicate NamedTuple class definition from typing.pytd.\n* Evaluate late annotations before checking for 'TypeVar not in scope' error.\n* Don't print Variable in error messages.\n* Represent namedargs as a python dict throughout.\n\nVersion 2022.04.15:\n\nUpdates:\n* Add basic Python 3.10 support.\n* Instantiate pyi namedtuples directly as interpreter classes. This is a large\n  refactoring that also made namedtuple type-checking more precise, exposing a\n  fair number of type errors in user code.\n* Remove the last traces of the no-longer-necessary --trace-all-classes flag.\n\nBug fixes:\n* Allow __match_args__ in pyi files to be assigned a tuple value.\n* Fix a bug in looking up attributes defined via variable annotation.\n* Handle Unions better in byte_STORE_ATTR.\n* Fix an [unbound-type-param] error.\n* Call abstract.Dict.setitem directly when constructing a folded dict literal.\n\nVersion 2022.04.06:\n\nUpdates:\n* Default --trace-all-classes to True.\n* Add a --platform option to pytype.\n\nBug fixes:\n* Fix for comparing recursive tuples for equality.\n* Do a better job of determining whether a typing(_extensions) import is\n  allowed.\n* Set TypedDict pyval items when instantiating a TypedDictClass.\n* Don't raise duplicate-keyword-argument for positional-only arguments.\n* Update definition of typing.get_type_hints.\n\nVersion 2022.03.29:\n\nUpdates:\n* Add support for literal enums.\n\nBug fixes:\n* Apply a couple of user-proposed fixes to merge-pyi.\n* Handle subclasses in property_get.\n* Convert type aliases in pyi files to aliases instead of constants.\n* Generate new views when instantiating a value in output.py.\n* Support partial forward references in pyi files.\n\nVersion 2022.03.21:\n\nUpdates:\n* Support typing.TypeAlias.\n\nBug fixes:\n* Fix a crash when reporting an error for an undefined value.\n* Fix TypedDictClass.instantiate(...) signature.\n* Fix matching of Final[T] against T for imported final constants.\n* Check IsVisible() before reporting errors in function.call_function.\n\nVersion 2022.03.08:\n\nUpdates:\n* New feature flags:\n  * --trace-all-classes: traces class creation for better analysis of class\n    bodies.\n  * --strict-primitive-comparisons: catches illegal types in comparisons\n    involving primitives.\n  Once these features are stable, the flags will be removed and their behavior\n  made the default.\n\nBug fixes:\n* Catch type errors when folding constants.\n* Fix Callable argument count inconsistency for decorated instance methods.\n* Fix a caching bug that caused closure variables to be reused.\n* Still look up typing and typing_extensions types when reporting\n  not-supported-yet.\n* Parse Python 3.10's new line number table format.\n* Unpack ClassVar in constant_to_var so unions are handled correctly.\n* Handle `__getitem__` correctly for typed dicts passed as function args.\n* Allow using the `python3` executable if it matches the requested version.\n\nVersion 2022.02.23:\n\nBug fixes:\n* Add mising magic methods to typing.Counter.\n* Allow `<name>: Final = <Literal value>` in pyi files.\n* Ignore some private attributes when doing pyi star imports.\n\nVersion 2022.02.17:\n\nNew features and updates:\n* Update typeshed pin to commit fc60d02 from Feb 2.\n* Support positional-only parameters.\n\nBug fixes:\n* Recognize type-annotated callables as attributes in attrs classes.\n* Python 3.9: fix crashes and bugs in directive handling.\n* Support ellipses when __future__.annotations enabled.\n* Support typed dicts in pyi files.\n* Fix an error when checking for `__getitem__` on a metaclass.\n* Remove TypedDict 'total' check that sometimes fires incorrectly.\n\nVersion 2022.02.08:\n\nNew features and updates:\n* Remove the --allow-recursive-types flag. Recursive types are now fully\n  supported and the behavior of this flag is enabled by default.\n\nBug fixes:\n* Don't raise a final-error when analysing the same method repeatedly.\n* Get rid of an overly restrictive [not-callable] check in ParameterizedClass.\n* Strip \"__init__\" from module names when checking supported versions.\n* Finish a TODO in byte_GET_YIELD_FROM_ITER.\n\nVersion 2022.01.31:\n\nNew features and updates:\n* Support typing.final and typing.Final.\n* Rework directors.py's source parsing using LibCST.\n* Show error name in red in Linux-like environments.\n\nBug fixes:\n* Add fixes for instantiating a typed dict from an annotation.\n* Prevent misfiring of \"NoReturn is not allowed as inner type\" error.\n* Defer checking of `Final` so that it can be used with `Annotated`.\n* Output typed dicts into the pyi file.\n\nVersion 2022.01.13:\n\nNew features and updates:\n* Make available an initial implementation of recursive type aliases with a\n  feature flag, --allow-recursive-types. Once this feature is stable, the flag\n  will be removed and its behavior made the default.\n* Allow using '...' as a top-level type annotation. This is an experimental\n  annotation that means \"inferred type\".\n\nBug fixes:\n* Stop replacing unsubstituted type params in generic aliases with Any in stubs.\n* Better handle type aliases with multiple options.\n\nVersion 2022.01.07:\n\nNew features and updates:\n* Drop support for Python 3.6.\n* Make classmethod and staticmethod generic.\n\nBug fixes:\n* Fix a load_pytd bug involving circular dependencies and star imports.\n\nVersion 2022.01.05:\n\nNew features and updates:\n* Add a feature flag, --enable-typed-dicts, for basic TypedDict support. Once\n  this feature is stable, the flag will be removed and its behavior made the\n  default.\n* Delete --fix-module-collisions flag. It has been a no-op since the last\n  release.\n* Add support for @attr.dataclass.\n* Add a 'recursive' attribute to pytd.LateType.\n* This is the last release that supports Python 3.6. Starting from the next\n  release, pytype will only support Python 3.7+.\n\nBug fixes:\n* Don't report an unhelpful name error when YIELD_FROM yields nothing.\n* Downgrade 'no MAKE_FUNCTION opcode found for decorator' to a warning.\n* Improve an [invalid-annotation] error message.\n* Fix a bug in parameterizing a generic type alias with a TypeVar.\n* Fix ParamSpec bugs that are blocking typeshed.\n\nVersion 2021.12.15:\n\nNew features and updates:\n* Enable --fix-module-collisions by default and make the flag a no-op. It will\n  be removed in the next release.\n\nBug fixes:\n* Fix a bug in resolving dotted name types in load_pytd.\n* Fix a Python 3.9 issue with `# pytype: disable=attribute-error` line numbers.\n* Eliminate some spurious 'TypeVar not in scope' errors.\n* Stop reporting weird name errors for \".0\".\n\nVersion 2021.12.08:\n\nNew features and updates:\n* Update typeshed pin to commit 3b6a52b from Nov 29.\n\nBug fixes:\n* Recognize typing_extensions.SupportsIndex as a protocol.\n* Allow summing anything with an __add__ method.\n* Remove pytd optimizations that broke overloads.\n* Fix a crash in --protocols mode.\n* Add object.__dir__ to builtins.pytd.\n\nVersion 2021.11.29:\n\nBug fixes:\n* Pass feature flags to the INFER command.\n\nVersion 2021.11.24:\n\nNew features and updates:\n* Update typeshed pin to commit 7cc5eb2 from Aug 8.\n* Remove pytype's ability to accept python_version=3.\n* Rename pytype \"master\" branch to \"main\".\n* Remove the --gen-stub-imports flag. This was a no-op as of version 2021.11.18.\n* Look up local names in nested class scopes when importing pyi files.\n* Consistently use \"base\" instead of \"parent\" to refer to base classes. This\n  changes the pickled representation of pytd.Class.\n\nBug fixes:\n* Check for multiple module-level `__getattr__` overloads.\n* Raise a not supported error for constructors in type annotations in pyi files.\n* Fix a [not-instantiable] false positive.\n* Add a feature flag, --fix-module-collisions, to fix a 'duplicate top-level\n  identifier' pyi issue.\n* Don't enforce @abstractmethod and @coroutine consistency on properties.\n\nVersion 2021.11.18:\n\nNew features and updates:\n* Enable --gen-stub-imports by default and make the flag a no-op. It will be\n  removed in the next release.\n* Pass more precise argument types to contextmanager __exit__ methods.\n* Add a helpful error message for use-after-delete.\n\nBug fixes:\n* Recognize \"/dev/null\" as a package path in load_pytd.\n* Remove references to the `__builtin__` module.\n* Allow disables for invalid calls in 3.9 to be put on the same lines as in 3.7.\n\nVersion 2021.11.12:\n\nNew features and updates:\n* Use the official pyi files from attrs.\n* Report a type error when comparing types (e.g. int > str) and when calling an\n  overloaded comparison method like __gt__ fails.\n* Ship Linux AArch64 wheels.\n\nBug fixes:\n* Use a homogeneous tuple as a pytd node sort key.\n* Fix crash in pytd.Lookup caused by ClassType with unfilled cls pointer.\n* Fix a pytd printer bug that was causing us to print 'Optional[import ...]'.\n* Fix a pytype bug in matching Literal against Literal.\n* Fix a bug in which classmethods weren't detected as protocol members.\n* --use-enum-overlay:\n  * Only add `__new__` to an enum if it has members to lookup.\n  * Skip potential enum members that are functions or have dunder names.\n  * Teach the enum overlay what a descriptor is.\n* --allow-recursive-types:\n  * Fix infinite recursion in vm.init_class.\n  * Support recursive types in sub_one_annotation.\n  * Add support in visitors.LookupLocalTypes.\n\nVersion 2021.11.02:\n\nNew features and updates:\n* Remove the --bind-properties flag. Its behavior has been made the default.\n* Take advantage of module aliases to print prettier stub files.\n* Add support for cross-module attr.s wrappers.\n* Add a feature flag, --gen-stub-imports, to improve pyi import handling.\n* Add a bit more support for PEP 612 in stubs.\n\nBug fixes:\n* Add remove{prefix,suffix} methods for bytes, bytearray.\n* Fix a bug where Errorlog.copy_from() duplicated error details.\n* Fix some issues with handling module aliases in stub files.\n* Support a [not-supported-yet] case in a generic class TypeVar renaming check.\n* Add `__init__` attributes to canonical enum members.\n\nVersion 2021.10.25:\n\nNew features and updates:\n* Completely remove the --preserve-union-macros flag. This was a no-op as of\n  version 2021.10.17.\n* Add a new flag, --build-dict-literals-from-kwargs, to construct dict literals\n  for `dict(k=v, ...)`. This behavior will ultimately by enabled by default and\n  the flag removed.\n* Add a new flag, --strict_namedtuple_checks, for typing.NamedTuple and\n  collections.namedtuple to inherit from fixed-length tuples. This behavior will\n  ultimately be enabled by default and the flag removed.\n\nBug fixes:\n* Fix how the enum overlay calls `base_type.__new__`.\n* Improve how the enum overlay chooses base types.\n* When an `attr.ib()` call has type errors, construct the attrib anyway.\n* Support builtin str removeprefix/removesuffix.\n\nVersion 2021.10.18\n\nNew features and updates:\n* Completely remove the --attribute-variable-annotations flag. This was a no-op\n  as of version 2021.10.11.\n* Enable --preserve-union-macros by default and make the flag a no-op. It will\n  be removed in the next release.\n\nBug fixes:\n* Enum overlay: fix crash due to loading `__new__` from a PyTDClass.\n* Enum overlay: use ClassVar to differentiate enum class attributes.\n* Fix a parser bug involving nested class name conflicts.\n* Fix a crash when lazily loading a missing submodule.\n* Change PrintVisitor to group explicit imports with the ones collected from\n  type annotations.\n\nVersion 2021.10.11\n\nNew features and updates:\n* Update pytype and typing annotation stubs for features added in attrs 21.1.0.\n* Enable --attribute-variable-annotations by default and make the flag a no-op.\n  It will be removed in the next release.\n* The --use-enum-overlay flag is ready for general use. Enable this flag for\n  precise typing of the stdlib enum library.\n\nBug fixes:\n* Support quoted types as annotations in pyi files.\n* Add precise overloads for the map function.\n* Support Ellipsis annotations in pyi files.\n* Preserve None in unions containing Any.\n* Fix a pyi import printing bug.\n* Improve ignored-abstractmethod error message.\n* Teach convert._load_late_type to handle nested classes.\n\nVersion 2021.10.04\n\nBug fixes:\n* Call init_class instead of instantiate when adding assertIsInstance bindings.\n* Use the namedtuple 'defaults' argument when generating __new__ signature.\n* Do not raise a parser error for unrecognised decorators.\n* Merge BaseValue.cls and BaseValue.get_class().\n* Check Instance.maybe_missing_members earlier during attribute access.\n* Fix a bug in matching callables with TypeVar parameters.\n\nVersion 2021.09.27\n\nNew features and updates:\n* Drop target Python 3.5 support.\n* Remove the no-op --enforce-noniterable-strings flag.\n* Support arbitrary python values for typing.Annotated in pyi files.\n* Add more extensive type support for attr converters.\n\nBug fixes:\n* Preserve named args in a function call when we have **kwargs in the arglist.\n* Allow assertIsInstance to take a tuple of classes.\n* Fix a bug in matching a Union against a TypeVar.\n* Attach a line number to function call errors caused by annotating self.\n* Add some missing namedtuple args.\n\nVersion 2021.09.09\n\nNew features and updates:\n* Enable --enforce-noniterable-strings by default and make the flag a no-op. It\n  will be removed in the next release.\n* Narrow the types of local variables based on test assertions.\n* For bad return type annotations on generators, change invalid-type-annotation\n  to bad-yield-annotation error.\n* Slightly improve pytype's performance on a trivial file.\n\nBug fixes:\n* Fix our type definition for BaseException.with_traceback().\n* Add some missing 3.8 methods to typing stubs.\n* Add `breakpoint` to the supported builtin methods.\n* Fix a bug in pytype's handling of late annotations.\n* Typeshed: fix version parsing regex.\n\nVersion 2021.08.24\n\nNew features and updates:\n* Update typeshed pin to commit 8da23e0 from July 30.\n* Remove all Python 2 compatibility code.\n* Print method signatures in the error message for a protocol type mismatch.\n* Raise an error when comparing incompatible primitive types.\n\nBug fixes:\n* Fix bugs in constant folding of f-strings.\n* Fix a bug where typing_extensions.Protocol was treated as Any.\n* Emit a pyi-error for an invalid annotation in a pyi file instead of crashing.\n* Add an extra check to forbid matching Mapping too broadly.\n\nVersion 2021.08.11\n\nNew features and updates:\n* Stop supporting target Python 2.\n* Enable constant folding, a performance optimization that significantly speeds\n  up analysis of large data structure literals.\n\nBug fixes:\n* Replace ParamSpec.{args,kwargs} with Any.\n\nVersion 2021.08.03\n\nNew features and updates:\n* This is the last release of pytype that supports analyzing code in Python 2.7.\n  From the next release onward, pytype will only support Python 3.5+.\n* Add a typing FAQ.\n* Add a pytype_extensions.Dataclass protocol for matching any dataclass.\n\nBug fixes:\n* Use [invalid-annotation] rather than [not-supported-yet] to report stray\n  TypeVars in variable annotations.\n* Fix bugs in attribute matching for Protocol.\n* Fix a bug in pytype's import resolution for relative imports.\n\nVersion 2021.07.27\n\nNew features and updates:\n* Add more detailed [name-error] messages for UnboundLocalError and the like.\n* Remove --check-parameter-types. Its behavior has been the default since\n  version 2021.07.19.\n* Support generic namedtuples.\n* Fix bugs and add features for --use-enum-overlay.\n* Add a flag, --enforce-noniterable-strings, that forbids implicit iteration\n  over strings.\n* Add support for attr converters.\n\nBug fixes:\n* Get rid of a spurious 'appear only once in signature' TypeVar error.\n* Fix a few protocol matching bugs.\n* Fix exception handling bugs by tracking the frame state within\n  try/except/finally blocks.\n\nVersion 2021.07.19\n\nNew features and updates:\n* Add a flag, --use-enum-overlay, for greatly improved support for the stdlib\n  enum library. The behavior of this flag will be enabled by default once it is\n  stable.\n* Default --check-parameter-types to True.\n* Take advantage of submodule version information in typeshed/stdlib/VERSIONS.\n* typing.Protocol: support non-method attributes and modules, make error\n  messages more detailed, and fix several bugs.\n* Remove --create-pyi-dataclasses and make its behavior the default.\n* Do not try doing dead block elimination within try/except blocks.\n\nBug fixes:\n* Handle unions correctly when dealing with exception types.\n* Support adding typing.Mapping as a chex.dataclass base class.\n* Get rid of some incorrect 'appears only once in signature' TypeVar errors.\n* Fix a pyi error caused by _PropertyToConstant not recognizing imported\n  TypeVars.\n* Allow more cases of valid typevars in variable annotations, typing.cast, and\n  attr.ib's 'type' argument.\n* Allow bound class methods to match object.\n* Allow bytearray.__contains__ to accept bytes.\n\nVersion 2021.06.17\n\nNew features and updates:\n* Open source pytype_extensions, a library of type system extensions for use\n  with pytype.\n* Add an assert_type statement to assert pytype's view of an expression type.\n* Remove the [key-error] error class: it found few real type errors and produced\n  many false positives.\n\nBug fixes:\n* Fix a bug that caused 'self' to be typed as 'Any' in @property bodies\n  (temporarily requires --bind-properties flag).\n* Add support for multiple and chained assignments in pyi files.\n* Support the 'Protocol[T, ...]' shorthand for generic protocols.\n* Typeshed: support py2-only third-party packages with no top-level stubs.\n\nVersion 2021.05.25\n\nNew features and updates:\n* Add support for referencing class-scoped TypeVars in variable annotations.\n* Add support for generic dataclasses and attrs.\n\nBug fixes:\n* Fix a performance regression in pytype/pytd/typeshed.py.\n* Generate mutations from __init__ parameter annotations in stubs.\n* Use the typeshed stub for the array module instead of a custom one.\n\nVersion 2021.05.19\n\nNew features and updates:\n* Add support for PEP 604 (Union |) in stub files.\n\nBug fixes:\n* Get rid of special_builtins.Filter.\n* Fix circular import issues in the pytd loader.\n\nVersion 2021.05.14\n\nNew features and updates:\n* Allow TypeGuard to be used in type stubs by rewriting TypeGuard[X] to bool.\n\nBug fixes:\n* Fix the order of inherited attributes for dataclasses.\n* Change the type of __path__ from Iterable to List.\n* Add a replace() method to flax dataclasses.\n\nVersion 2021.05.11\n\nBug fixes:\n* Report [not-supported-yet] instead of [import-error] for importing TypedDict.\n* Fix a bug in attribute lookup from parent classes.\n* Fix a Python 3.7 failure in typeshed/tests/pytype_test.py.\n* pytd: populated mutated_type from annotated `self` parameters.\n* Preserve kw_only attribute when inheriting attrs from a different module.\n* Add a vm state to allow recursive construction of pytd values.\n\nVersion 2021.05.06\n\nNew features and updates:\n* Update typeshed pin to commit 2c8cb60 from Apr 27.\n\nBug fixes:\n* Add typing._Alias.\n* Pin attrs to 20.3.0.\n\nVersion 2021.05.04\n\nNew features and updates:\n* Remove --check-attribute-types, --check-container-types, and\n  --check-variable-types flags. Their behaviors are now enabled by default.\n* Add a temporary --preserve-union-macros flag that preserves Union generic type\n  aliases in type stubs. This behavior will ultimately be enabled by default and\n  the flag removed.\n* Support max versions in typeshed VERSIONS file.\n\nBug fixes:\n* Add typing.GenericMeta stub.\n* Fix handling of typeshed/stdlib/@python2.\n\nVersion 2021.04.26\n\nNew features and updates:\n* Enable --check-attribute-types, --check-container-types, and\n  --check-variable-types by default. These flags will soon be removed.\n* Add a fix suggestion for [annotation-type-mismatch] with a None value.\n* Add a temporary --attribute-variable-annotations flag that applies PEP\n  526-style annotations on attribute assignments. This behavior will ultimately\n  be enabled by default and the flag removed.\n* Add a temporary --create-pyi-dataclasses flag that creates dataclasses from\n  @dataclass-annotated classes in type stubs. This behavior will ultimately be\n  enabled by default and the flag removed.\n\nBug fixes:\n* Don't lose track of attributes when @typing.final is used.\n* Fix generation of type information for nested typing.NamedTuple classes.\n* Fix some bugs in handling of generic type aliases.\n* Fix a pytype crash on a generic protocol.\n* For method aliasing in pyi files, consider base classes when doing lookup.\n\nVersion 2021.04.15\n\nNew features and updates:\n* Update typeshed pin to commit ce24720 from Jan 27, and drop support for the\n  old typeshed directory structure.\n* Delete the --check-nonnull-parameter-types flag.\n\nBug fixes:\n* Add \"from typing import overload\" statement when using @overload.\n* Add object.__delattr__ to our builtins stubs.\n* Add some more support for generic type aliases.\n\nVersion 2021.04.09\n\nNew features and updates:\n* Enable --check-parameter-types by default for non-None default values.\n* Add some minimal support for PEP 612 in type stubs.\n* Add support for typing.Annotated in pyi files.\n\nBug fixes:\n* Fix a crash when analysed code accessed an undefined closure cell.\n* Fix a minor bug in pytype's expansion of Protocol[T].\n* Check starargs and starstarargs when gathering TypeVars in function sigs.\n* Fix some bugs in pytype's handling of the new typeshed directory structure.\n* Make sure `collections.defaultdict.__init__` always accepts kwargs.\n* Filter out properties from class attributes when constructing dataclasses.\n* Add gi_* fields to Generators.\n\nVersion 2021.04.01\n\nNew features and updates:\n* Add basic Python 3.9 support.\n\nBug fixes:\n* Fully support method aliasing in stub files.\n* Improve pytype's handling of sets.\n\nVersion 2021.03.22\n\nNew features and updates:\n* Support inheritance from dataclasses defined in pyi files.\n\nBug fixes:\n* Don't check attribute values against types from pyi files.\n* Add a missing array.array.frombytes method.\n* Fix the pyi type of attributes annotated with class type parameters.\n* Allow annotation-type-mismatch directives to be put on more sensible lines.\n* Pass ninja relative paths instead of absolute ones.\n\nVersion 2021.03.10\n\nNew features and updates:\n* Basic support for defining dataclasses in pyi files.\n* Enable more of --check-attribute-types by default.\n* Get rid of the legacy pyi parser.\n\nBug fixes:\n* Fix a circular import error (#760).\n* Make NotImplementedType inherit from bool.\n* Fix a caching bug that caused incorrect function parameter defaults.\n\nVersion 2021.03.03\n\nNew features and updates:\n* Enable part of --check-attribute-types by default.\n\nBug fixes:\n* Allow callable constants to match protocol methods.\n* Allow builtins.tuple to be used for a heterogeneous tuple annotation.\n* Don't report [not-instantiable] when instantiating an abstract annotation.\n* Take a TypeVar's bound into account when instantiating it in attribute.py.\n* Use typeshed stubs in preference to empty stubs.\n* Fix a bug where multiple definitions of a TypeVar could end up in a stub.\n* Fix a caching bug in check_container_types.\n* Fix initialization of Union types in forward references.\n\nVersion 2021.02.23\n\nNew features and updates:\n* Support running pytype under Python 3.9. (Does not yet support analyzing 3.9\n  code; see details in https://github.com/google/pytype/pull/840.)\n* Update typeshed pin to commit 869238e from Jan 26.\n\nBug fixes:\n* Do stricter filtering of container_type_mismatch errors.\n* Preserve the concrete value of TYPE_CHECKING in method bodies.\n* Support using collections.abc.Callable in type stubs.\n\nVersion 2021.02.19\n\nBug fixes:\n* Fix 'nothing' parameter inference for self in custom generic classes.\n* Fix several cases of class type parameters being instantiated incorrectly.\n* Fix an if-splitting bug by (mostly) ignoring cycles in the CFG.\n* Use match_var_against_type, not match_from_mro, for check_container_types.\n\nVersion 2021.02.09\n\nNew features and updates:\n* Replace namedtuples with attrs in our PyTD representation.\n\nBug fixes:\n* Improve error messaging for typing.AnyStr.\n* Fully qualify `std::size_t` to avoid platform incompatibilities.\n* Add isascii attribute to str, bytes, and bytearray.\n* Support isinstance() checks on tuples of typing containers.\n* Improve *args and **kwargs forwarding for attrs and dataclasses.\n* Don't propagate attribute errors for deleted names.\n\nVersion 2021.01.28\n\nNew features:\n* Update typeshed pin to commit 8c20938 from Nov 13.\n* Implement basic support for PEP 593.\n* Support typeshed's new directory structure.\n\nBug fixes:\n* Support aliases attr.attrs for attr.s, and attr.attrib for attr.ib.\n* --check-container-types: fix a crash and improve the error message.\n\nVersion 2021.01.21\n* Switch to a typed_ast-based stub parser.\n* Fix matching of NamedType against LiteralType in --protocols mode.\n* Fix: super() in a list comprehension needs to look at the enclosing frame.\n\nVersion 2021.01.14\n* Fix some corner cases with unpacking and function args.\n* Add ImportError attributes name, path for Python 3.3+.\n* Unbreak annotate-ast by adding an empty pytype/ast/__init__.py file.\n\nVersion 2021.01.08\n* Automatically add a .gitignore file to the pytype output directory.\n* Do not allow python keywords in pytd files.\n* Fix: Don't infer Callable parameters when there are kwonly params.\n* Fix: Represent empty tuples as TupleType(()).\n* Fix: add __init__ and __contains__ to dict view classes.\n\nVersion 2020.12.23\n* Support using a union to filter types out of a type parameter.\n* Fix the attribute type obtained from `attr.ib(default=())`.\n\nVersion 2020.12.16\n* Support NewType in stubs.\n* Treat classes whose metaclass inherits from type(Protocol) as abstract.\n* Automatically promote __init_subclass__ to a classmethod.\n* Improve unpacking and function arg matching by tracking unpacked iterables.\n* Fix a [name-error] caused by a bad regex check for comprehensions.\n* Strip carriage returns from files read as bytes.\n* Support using an AnnotationClass in an isinstance check.\n* Support aliases to methods of classes in the same module in the pyi parser.\n\nVersion 2020.12.02\n* Update typeshed pin to commit fae6bda from October 12.\n* Improve the [bad-return-type] error message.\n\nVersion 2020.11.23\n* Treat modules as hashable.\n* Support typing_extensions.Literal in source files.\n* Take classmethods and staticmethods into account in protocols.\n\nVersion 2020.11.12\n* Support `# type: ignore[errorcode, ...]` in pyi files.\n* Always allow classes to match typing.Hashable.\n* Fix a bug in pytype's handling of Literal[<str>].\n\nVersion 2020.11.03\n* Drop support for running pytype under Python 3.5.\n* Add a dependency on pybind11 for new typegraph metrics.\n* merge-pyi support for \"import collections.abc as abc\" style imports.\n\nVersion 2020.10.08\n* Add runtime_checkable to typing.pytd.\n\nVersion 2020.09.29\n* Fix a bug in attaching function type comments to opcodes.\n* Use `py -x.y` instead of `pythonx.y` for windows.\n\nVersion 2020.09.24\n* Fix a bug involving multiple super calls.\n* Support tuple slicing.\n* Make all tests pass in Python 3.8.\n* Respect all typing re-exports in the pyi parser.\n* Create C++ metrics classes for tracking typegraph metrics.\n* Update attrs pytd files to support version 20.2.0.\n\nVersion 2020.09.16\n* Fix a parser bug when importing and re-exporting a submodule.\n* Call `python -m ninja` instead of `ninja`.\n* Don't crash when processing a pyi containing __all__.\n* Convert Bindings() to a list in cfg.py.\n\nVersion 2020.09.14\n* Drop the --python_exe option.\n* Have check_py and generate_pyi accept a source string instead of a filename.\n* Pass around an options.open_function that is used in place of builtins.open.\n* Fix some Python 3.8 bugs.\n* Fix python-incompatible syntax in pytd files.\n* Print 'leaving directory' after ninja command.\n* Support sys.version_info tuple checks that do not use slicing.\n\nVersion 2020.08.28\n* Let multiple PyTDFunction signatures match when *args/**kwargs is present.\n\nVersion 2020.08.17\n* Allow `# type: ignore` in more places in pyi files.\n* Support TypedDict function-based syntax in pyi files.\n* Add more developer documentation.\n\nVersion 2020.08.10\n* Support aliases to unions with type parameters.\n* Don't crash when a nested NamedTuple subclass hits max depth.\n* Support kw_only arg to attr.ib.\n* Add more developer documentation.\n\nVersion 2020.07.30\n* Allow typing.AnyStr to be used to parameterize custom generic classes.\n* FIX: We were occasionally reusing an exhausted generator in Union constructor.\n* Support imported type macros in pyi files.\n* When raising not-supported-yet for Alias = Union[T, ...] set the type to Any.\n\nVersion 2020.07.24\n* pyi parser: allow aliases inside a class to values outside the class.\n* Copy annotations instead of modifying them when adding a scope.\n* Make self.__class__ return Any in __init__.\n* Check object visibility before setting attributes.\n\nVersion 2020.07.20\n* pyi parser: support importing TypedDict from typing_extensions.\n\nVersion 2020.07.14\n* Populate the `cls` arg in classmethods with the class type.\n* Log [not-supported-yet] as soon as a recursive type alias is defined.\n* pyi parser: allow the 'total' keyword for subclasses of TypedDict.\n* Make collections.OrderedDict reversible.\n* Make the behavior of io.open match builtins.open.\n* Add/fix some opcodes for Python 3.8.\n\nVersion 2020.06.26\n* Treat objects as True in a boolean context, unless explicitly overridden.\n* If cls is the class argument of Foo.__new__, treat `cls is Foo` as ambiguous.\n* Add basic support for third-party flax dataclasses.\n* Autodetect number of jobs with --jobs auto.\n\nVersion 2020.06.01\n* Update typeshed pin to commit 5fe6a5b from May 18.\n* Support callback protocols.\n* Get rid of the RemoveInheritedMethods pyi optimisation.\n* (In-progress) Add partial Python 3.8 support.\n\nVersion 2020.05.13\n* Check attrs default values against annotations.\n* Add an experimental --check-variable-types mode.\n\nVersion 2020.05.07\n* Drop support for analyzing Python 3.4.\n* Add special builtins support for filter(None, xs).\n* Open-source a developer doc on minor version upgrades.\n* Improve support for @typing.overload.\n* Improve annotated decorators' handling of classes.\n\nVersion 2020.04.22\n* Drop support for running pytype under Python 2.\n* Report [not-supported-yet] when aliasing Union[T, ...].\n* Add typing.OrderedDict.\n* Improve how annotations are tracked and applied.\n* Allow functions to match types.FunctionType.\n* Don't report [invalid-typevar] when type() is called on a TypeVar.\n\nVersion 2020.04.01\n* Do some test restructuring and cleanup.\n\nVersion 2020.03.19\n* Fix a couple of pytype crashes.\n* Do not allow mixing string types in IO.write() in Python 3.\n\nVersion 2020.02.20\n* Stop rewriting (x: X = None) to (x: Optional[X] = None).\n\nVersion 2020.02.06\n* Update typeshed pin to commit d5851ec from January 24.\n\nVersion 2020.01.24\n* Don't fail on mypy-style '# type: ignore[code, ...]' comments.\n* Support separating disabled error classes by whitespace in addition to commas.\n\nVersion 2020.01.08\n* Support @typing.type_check_only on classes and functions in pyi files.\n\nVersion 2020.01.07\n* Add a 2020 Q1 roadmap.\n* Improve handling of forward references with type errors.\n\nVersion 2019.12.17\n* Improve support for forward references and function type comments.\n* Support typing.ClassVar and dataclasses.InitVar.\n* Fix some attrs and dataclasses bugs.\n\nVersion 2019.12.06\n* Update typeshed pin to commit f7f6860 from December 1.\n* Allow running pytype-single as `python -m pytype-single`.\n\nVersion 2019.11.27\n* Support using typing.Counter as a generic.\n* Handle non-utf8 string literals without crashing in host Python 3.\n* Allow running pytype as `python -m pytype`.\n* Add a `-j/--jobs` option to pytype.\n* Detect and raise errors for recursive type aliases, rather than crashing.\n\nVersion 2019.10.17\n* Make Python 2 metaclass declarations an error in Python 3.\n* Add basic support for dataclasses.\n* Open-source a partial numpy type stub.\n* Fix some bugs in the pyi parser.\n\nVersion 2019.09.17\n* Update typeshed pin to commit 668988f from September 5.\n\nVersion 2019.09.06\n* Update typeshed pin to commit ce0f5b2 from August 22.\n\nVersion 2019.08.29\n* Improve the usability of the pytype.io module.\n* Add basic callgraph generation to pytype.tools.xref.\n* Update typeshed pin to commit fab2ee0 from August 16.\n* Add an experimental --precise-return mode.\n\nVersion 2019.08.09\n* Partially support typing[_extensions].Literal in pyi files.\n* Adopt a unicode pytype logo.\n* Add a traces library for accessing pytype's inferred type information.\n* Add `annotate-ast` subtool for annotating ASTs with type information (WIP).\n\nVersion 2019.07.30\n* Allow trailing commas in lists in type stubs.\n\nVersion 2019.07.26\n* Update typeshed pin to commit 40215d1 from July 18.\n* Improve support for subprocess.Popen in Python 3.\n\nVersion 2019.07.11\n* Update typeshed pin to commit e1e5c83 from July 1.\n* Support `async def` in pyi files.\n\nVersion 2019.06.28\n* Fix attrs bugs.\n* Check exception types in `except` blocks.\n\nVersion 2019.06.21\n* Support typing.overload in source files.\n* Fix merge-pyi bugs.\n* Support basic attrs usage.\n\nVersion 2019.05.31\n* Add an xref output mode that creates a (lineno, column) -> type map.\n* Fix an AnyStr bug in the Python 2 filter() definitions.\n\nVersion 2019.05.24\n* Fix an import bug.\n* Support extracting pytype types from xref.\n\nVersion 2019.05.15\n* Update typeshed pin to commit 50d98ac from May 13.\n* Support nested classes in pyi files.\n\nVersion 2019.05.08\n* Fix a bug in pyi lookup of re-exported imports.\n\nVersion 2019.05.06\n* Update typeshed pin to commit 4e572ae from April 23.\n* Support collections.namedtuple in pyi files.\n* Support module aliases in pyi files.\n\nVersion 2019.04.26\n* Improve typegraph performance.\n\nVersion 2019.04.19\n* Support method matching for custom PEP 544 protocols.\n\nVersion 2019.04.12\n* Update typeshed pin to commit cfa65b8 from April 8.\n* Fix comparisons of primitive objects of the same type.\n* Limit the number of tracebacks shown for one error.\n\nVersion 2019.04.05\n* Improve Python 3 definitions in pytype's enum and typing stubs.\n\nVersion 2019.04.02.1\n* Require typed_ast only in Python 3.3+.\n\nVersion 2019.04.02\n* Simplify the text pytype prints to the terminal.\n* Rename the default pytype output directory from pytype_output to .pytype.\n* Add a --no-cache option to send pytype output to a temporary directory.\n* Update typeshed pin to commit 9b9ff64 from March 29.\n* Support typing.ChainMap and typing.Counter.\n\nVersion 2019.03.27\n* Support `# type: ignore` on import lines in pyi files.\n\nVersion 2019.03.21\n* Update typeshed pin to commit afe6656 from March 16.\n* Add missing Python 3 methods {bytearray,list}.{clear,copy}.\n\nVersion 2019.03.15\n* Make --parse-pyi verify that the AST has been resolved.\n* Fix pyi parsing of `typing` aliases.\n* Remove mirror of asyncio.tasks stub in favor of the canonical typeshed one.\n* Support type macros in pyi files.\n\nVersion 2019.03.08\n* Fix bad type definitions for builtins reversed and enumerate.\n\nVersion 2019.03.01\n* Make pytype's type stubs loadable in Python 3.4.\n\nVersion 2019.02.13\n* Support asynchronous generators.\n* Fix variable annotations in Python 3.7.\n* Fix a pyi circular import bug.\n\nVersion 2019.01.30\n* Support future.utils.with_metaclass.\n* Support coroutine annotation.\n\nVersion 2019.01.18\n* Add support for unittest.TestCase.setUp().\n* Open-source a user guide.\n* Open-source the FAQ.\n\nVersion 2018.12.21\n* Improve support and add testing framework for target Python 3.7.\n* Handle files that generate parse errors more gracefully.\n\nVersion 2018.12.11\n* Add rudimentary support for target Python 3.7.\n* Make error messages for Python operators friendlier.\n* Set the default target python version to the host version.\n* Change default behavior to stop at first error and add a --keep-going option.\n* Flag annotations with the wrong parameter count and invalid uses of NoReturn.\n* Improve pytype and merge-pyi status messages.\n* Support PEP-526 variable annotation syntax.\n\nVersion 2018.11.06\n* Use --imports_info to allow preserving generated type stubs between runs.\n* Handle TypeParameter inheritance more robustly with a union-find approach.\n* Get more precise deps from importlab to allow build parallelization.\n* Trim the dependencies of builtin and system files from the import graph.\n* Generate a build.ninja file and call pytype-single via ninja.\n\nVersion 2018.10.30\n* Improve the display of tracebacks in error messages.\n* Make several Python 3 fixes and improvements, including better enum support.\n* Fix evaluation of conditionals inside closures.\n* Improve handling of comparison operators.\n* Add a --strict-import option to not load submodules not explicitly imported.\n\nVersion 2018.09.26\n* Generate default type stubs for pip-installed dependencies.\n* Remove the output directory at the start of each pytype run.\n\nVersion 2018.09.25\n* Improve Python 3 varargs and kwargs support.\n* Support user-defined generic types.\n* Improve --generate-config to show a full sample config file.\n\nVersion 2018.09.19\n* Allow the command-line `inputs` option to be specified in a config file.\n* Support hidden files.\n* Make the behavior of --exclude more intuitive.\n\nVersion 2018.09.18\n* Support setting --exclude in a config file.\n* Add support for annotations in inner functions.\n* Officially support running under Python 3.7.\n\nVersion 2018.09.07.1\n* Update typeshed pin to commit c968124 from September 6.\n\nVersion 2018.09.07\n* Make typing.NamedTuple a class for Python 3.6+.\n\nVersion 2018.08.10\n* Add --exclude flag to support excluding files or directories from analysis.\n\nVersion 2018.07.13\n* Improve type checking of typing.Generator.\n* Enable logging from C++ in debug builds.\n* Expose pytype-single's return code.\n* Add the ability to record trace data during bytecode execution.\n\nVersion 2018.06.19\n* Tweak the installation instructions and add a quickstart guide.\n\nVersion 2018.06.18\n* Document pytype's platform support.\n\nVersion 2018.06.15\n* Officially support running under Python 3.5 and 3.6.\n* Expose pytype-single's --version option.\n* Optimization: skip argument parameter combinations we've already seen.\n* Bring back pytype-single's --timeout option.\n* Add --return-success to pytype-single to report errors but return success.\n\nVersion 2018.06.05\n* Print transient progress messages.\n* Rename pytype to pytype-single and pytype-all to pytype.\n* Use the system and site package dependencies found by importlab in pytype-all.\n* Make the pytype-all help message friendlier.\n* Allow pytype-single args to be specified in a config file.\n* Add a merge-pyi subtool to merge pyi files into their Python sources.\n* Expose some pytype-single options to pytype-all.\n* Add a script which runs pytype tests.\n* Allow specifying config file variables for pytype-all on the command line.\n* Add a --version option to display the pytype version.\n\nVersion 2018.05.22.1\n* Use different flags when compiling with gcc or clang.\n\nVersion 2018.05.22\n* Add flags for building with clang on Mac OS X.\n* Allow pytype-all to accept directories as input.\n* Change pytype-all's config file to INI style, and fall back to setup.cfg.\n* Make analyze_annotated a command-line option.\n* Add pythonpath guessing to pytype-all.\n\nVersion 2018.05.15\n* Make some fixes to the release packaging.\n\nVersion 2018.05.14\n* Release pytype-all.\n\nVersion 0.2\n* Release pytype.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.740234375,
          "content": "# The version in Ubuntu 20.04:\ncmake_minimum_required(VERSION 3.16)\ncmake_policy(SET CMP0148 OLD)\n\nproject(PyType)\n\nset(CMAKE_CXX_STANDARD 20)\n\nif (WIN32)\n  set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nENDIF()\n\nset(CMAKE_MODULE_PATH\n  \"${CMAKE_MODULE_PATH}\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\"\n)\ninclude(PyTypeUtils)\n\nset(PYTYPE_OUT_BIN_DIR ${PROJECT_BINARY_DIR}/bin)\nfile(MAKE_DIRECTORY ${PYTYPE_OUT_BIN_DIR})\n\nadd_subdirectory(pybind11)\nadd_subdirectory(pytype)\nadd_subdirectory(pytype_extensions)\nadd_subdirectory(third_party)\n\n# Add the \"googletest\" directory at the end as it defines its own CMake rules\n# for py_test etc. Adding it at the end avoids mixing up Pytype's definitions\n# with these definitions.\nadd_subdirectory(googletest)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.3046875,
          "content": "Want to contribute? Great! First, read this page (including the small print at\nthe end).\n\n### Before you contribute\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual?csw=1)\n(CLA), which you can do online. The CLA is necessary mainly because you own the\ncopyright to your changes, even after your contribution becomes part of our\ncodebase, so we need your permission to use and distribute your code. We also\nneed to be sure of various other things -- for instance that you'll tell us if you\nknow that your code infringes on other people's patents. You don't have to sign\nthe CLA until after you've submitted your code for review and a member has\napproved it, but you must do it before we can put your code into our codebase.\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### Code reviews\nAll submissions, including submissions by project members, require review. We\nuse Github pull requests for this purpose.\n\n### Pytype dependencies\nBefore you can build and test Pytype, you will have to install a few\ndependencies.\n\n1. __A C++20 compiler for your platform__: Pytype uses extension modules.\n   A C++20 compiler is required to build these extension modules.\n2. __[CMake](https://cmake.org) version 3.16 or higher__: To build the extension\n   modules and to run tests in parallel, Pytype makes use of a CMake-based\n   build system. NOTE: if you have a [CMake Python distribution](https://pypi.org/project/cmake/)\n   installed and active, you can skip installing the official CMake distribution.\n5. __[ninja build](https://ninja-build.org/)__: Pytype's test utility scripts\n   make use of ninja as the CMake generated build system. NOTE: if you\n   have a [ninja Python distribution](https://pypi.org/project/ninja/) installed\n   and active, you can skip installing the official ninja distribution.\n6. __Python3.x Interpreter__: You will need to install an interpreter for a\n   Python version that pytype can run under (see [Requirements](README.md#requirements)).\n   Make sure you also install the developer package (often named python3.x-dev).\n\nRequired Python packages are listed in the [requirements.in](requirements.in)\nfile in this repository. They should match and be a superset of those listed in\n[setup.cfg](setup.cfg).\n\nPinned versions of all these dependencies can be installed with the following\ncommand:\n\n```shell\npip install -r requirements.txt\n```\n\nThese dependencies should occasionally be refreshed to latest versions with this\ncommand:\n\n```shell\npip install uv\nuv pip compile --universal -U requirements.in -o requirements.txt\n```\n\nThe Pytype Git repository also contains few Git submodules. Before building\nthe `pytype` executable or running tests, one has to ensure that the submodules\nare up to date. This can be done with the following command:\n\n```shell\ngit submodule update --init\n```\n\n### Building `pytype` and other executables\nThere are two ways to build the executables like `pytype` etc. To build them the\nsame way that the continuous integration tests do, use this convenience script:\n\n```shell\npython build_scripts/build.py\n```\n\n`build.py` will build the executables in the `out/bin` directory.\n\nTo emulate the way they are built when a user downloads the source code from\nPyPI, use:\n\n```shell\npip install -e .\n```\n\n`-e` makes it so that the executables will automatically pick up code edits.\nThis second method is useful for making sure that pytype is still packaged\ncorrectly after changes to its code structure or dependencies. The downside is\nthat logging from extension modules is unavailable (see below).\n\n### Logging\nOne can pass the logging verbosity level option to `pytype-single` to see the\nlogs:\n\n```shell\nout/bin/pytype-single -v<N> <other command like arguments>\n```\n\nFor information about the logging levels, run `pytype-single --help`.\n\n#### Logging from extension modules\nThe `pytype-single` executable makes use of few a C extension modules. Logging\nfrom these extension modules is enabled only in debug builds. One can build\n`pytype-single` in debug mode by passing the `--debug` option to the build\nscript as follows:\n\n```shell\npython build_scripts/build.py --debug\n```\n\nIn a debug build of `pytype-single`, logging from extension modules follows the\nsame verbosity levels as the rest of the Python modules.\n\n### Adding tests to your Changes\nIdeally, every change should include a test. Depending on the type of your\nchange, you should either be adding a functional test or a unit test (some\nchanges might warrant both). Functional tests should be added in the\n`pytype/tests` directory. Unit tests should be added in a test module next to\nthe module that is being tested.\n\nSince Pytype already has exhaustive tests, a change will most likely need to\nadd a test method to an existing test module. In such a case, there is\nnothing special required, other than just adding a new test method. If adding a\nnew test module is more meaningful, apart from adding the new test module, your\nchange should also add a `py_test` target to the `CMakeLists.txt` file in the\ndirectory in which the test module lives. See existing `py_test` targets (in\n`CMakeLists.txt` files) for examples on how to do this.\n\nNOTE: Please see `pytype/tests/README.md` for more rules pertaining to adding\nnew functional tests.\n\n### Running tests\nThere exists a convenience script to run Pytype tests. A typical usage of this\nscript is as follows:\n\n```shell\npython build_scripts/run_tests.py <TARGET>\n```\n\n`TARGET` is the fully qualified name of the test target within the root Pytype\nsource tree. If a target name is not specified, the script runs all `py_test`\nand `cc_test` targets in the Pytype source tree.\n\nFor more information about `run_tests.py` options, run `run_test.py --help`.\n\nTo also lint and type-check the code, you can use:\n\n```shell\nbash build_scripts/ci_script.sh\n```\n\n### Resources\n\nFor more resources for contributors, check out our developer guide:\nhttps://google.github.io/pytype/developers/index.html.\n\n### The small print\nContributions made by corporations are covered by a different agreement than\nthe one mentioned above; they're covered by the Software Grant and\nCorporate Contributor License Agreement.\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 0.67578125,
          "content": "FROM python:3.7\n\n# Tests try to create /nonexistent/path directory expecting it to fail.\n# However, the directory can be created inside docker since running as root.\n# File with same name makes the directory creation fail and serves as a\n# workaround.\nRUN touch /nonexistent\n\nWORKDIR /app\nRUN apt-get update && apt-get install -y bison flex cmake\n\nCOPY requirements.txt .\nRUN pip3 install --no-cache -r requirements.txt\n\nCOPY . .\nRUN python build_scripts/build.py\n\n# Expected usage is to mount a local directory inside the container that\n# contains python files that are going to be tested against pytype.\n# Additionally the image is well suited for automated tests.\nENTRYPOINT [\"/bin/bash\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 14.4755859375,
          "content": "-------------------------------------------------------------------------\n\nThis code is based in part on \"byterun\", subject to the following license:\n\n-------------------------------------------------------------------------\n\nCopyright (c) 2013, Ned Batchelder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n-------------------------------------------------------------------------\n\nThis project contains code (\"marshal.py\") from the pypy project, subject to\nthe following license:\n\n-------------------------------------------------------------------------\n\nThe MIT License\n\nPermission is hereby granted, free of charge, to any person \nobtaining a copy of this software and associated documentation \nfiles (the \"Software\"), to deal in the Software without \nrestriction, including without limitation the rights to use, \ncopy, modify, merge, publish, distribute, sublicense, and/or \nsell copies of the Software, and to permit persons to whom the \nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included \nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS \nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL \nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER \nDEALINGS IN THE SOFTWARE.\n\n=========================================================================\n\nCopyright Google, Inc. 2015. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n=========================================================================\nThe following is a copy of http://www.apache.org/licenses/LICENSE-2.0.txt\n=========================================================================\n\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0908203125,
          "content": "include LICENSE\ninclude pyproject.toml\ninclude pytype/test_data/*\ninclude pytype/typegraph/*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.7138671875,
          "content": "[![CI](https://github.com/google/pytype/workflows/CI/badge.svg?branch=main)](https://github.com/google/pytype/actions)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/pytype)](https://pypi.org/project/pytype/#files)\n\n# pytype - 🦆✔\n\nPytype checks and infers types for your Python code - without requiring type\nannotations. Pytype can:\n\n* Lint plain Python code, flagging common mistakes such as misspelled attribute\nnames, incorrect function calls, and [much more][error-classes], even across\nfile boundaries.\n* Enforce user-provided [type annotations][pep-484]. While annotations are\noptional for pytype, it will check and apply them where present.\n* Generate type annotations in standalone files (\"[pyi files][pyi-stub-files]\"),\nwhich can be merged back into the Python source with a provided\n[merge-pyi][merge-pyi] tool.\n\nPytype is a static analyzer; it does not execute the code it runs on.\n\nThousands of projects at Google rely on pytype to keep their Python code\nwell-typed and error-free.\n\nFor more information, check out the [user guide][user-guide], [FAQ][faq], or\n[supported features][supported-features].\n\n## How is pytype different from other type checkers?\n\n1. Pytype uses **inference** instead of gradual typing. This means it will\ninfer types on code even when the code has no type hints on it. So it can\ndetect issues with code like this, which other type checkers would miss:\n\n    ```python\n    def f():\n        return \"PyCon\"\n    def g():\n        return f() + 2019\n\n    # pytype: line 4, in g: unsupported operand type(s) for +: 'str'\n    # and 'int' [unsupported-operands]\n    ```\n\n1. Pytype is **lenient** instead of strict. That means it allows all\noperations that succeed at runtime and don't contradict annotations. For\ninstance, this code will pass as safe in pytype, but fail in other type\ncheckers, which assign types to variables as soon as they are initialized:\n\n    ```python\n    from typing import List\n    def get_list() -> List[str]:\n        lst = [\"PyCon\"]\n        lst.append(2019)\n        return [str(x) for x in lst]\n\n    # mypy: line 4: error: Argument 1 to \"append\" of \"list\" has\n    # incompatible type \"int\"; expected \"str\"\n    ```\n\nAlso see the corresponding [FAQ entry][faq-diff].\n\n## Quickstart\n\nTo quickly get started with type-checking a file or directory, run the\nfollowing, replacing `file_or_directory` with your input:\n\n```shell\npip install pytype\npytype file_or_directory\n```\n\nTo set up pytype on an entire package, add the following to a `pyproject.toml`\nfile in the directory immediately above the package, replacing `package_name`\nwith the package name:\n\n```toml\n[tool.pytype]\ninputs = ['package_name']\n```\n\nNow you can run the no-argument command `pytype` to type-check the package. It's\nalso easy to add pytype to your automated testing; see this\n[example][importlab-github-actions] of a GitHub project that runs pytype on GitHub Actions.\n\nFinally, pytype generates files of inferred type information, located by default\nin `.pytype/pyi`. You can use this information to type-annotate the\ncorresponding source file:\n\n```shell\nmerge-pyi -i <filepath>.py .pytype/pyi/<filename>.pyi\n```\n\n## Requirements\n\nYou need a Python 3.8-3.12 interpreter to run pytype, as well as an\ninterpreter in `$PATH` for the Python version of the code you're analyzing\n(supported: 3.8-3.12).\n\nPlatform support:\n\n* Pytype is currently developed and tested on Linux\\*, which is the main supported\n  platform.\n* Installation on MacOSX requires OSX 10.7 or higher and Xcode v8 or higher**.\n* Windows is currently not supported unless you use [WSL][wsl].\n\n<sub>\\*\nOn Alpine Linux, installation may fail due to issues with upstream\ndependencies.  See the details of [this issue][scikit-build-issue] for a\npossible fix.\n<br />\n\\*\\*\nIf the ninja dependency fails to install, make sure cmake is installed. See\n[this issue][ninja-build-issue] for details.\n</sub>\n\n## Installing\n\nPytype can be installed via pip. Note that the installation requires `wheel`\nand `setuptools`. (If you're working in a virtualenv, these two packages should\nalready be present.)\n\n```shell\npip install pytype\n```\n\nOr from the source code [on GitHub][github].\n\n```shell\ngit clone --recurse-submodules https://github.com/google/pytype.git\ncd pytype\npip install .\n```\n\nInstead of using `--recurse-submodules`, you could also have run\n\n```shell\ngit submodule init\ngit submodule update\n```\n\nin the `pytype` directory. To edit the code and have your edits tracked live,\nreplace the pip install command with:\n\n```shell\npip install -e .\n```\n\n### Installing on WSL\n\nFollow the steps above, but make sure you have the correct libraries first:\n\n```shell\nsudo apt install build-essential python3-dev libpython3-dev\n```\n\n## Usage\n\n```\nusage: pytype [options] input [input ...]\n\npositional arguments:\n  input                 file or directory to process\n```\n\nCommon options:\n\n* `-V, --python-version`: Python version (major.minor) of the target code.\n  Defaults to the version that pytype is running under.\n* `-o, --output`: The directory into which all pytype output goes, including\n  generated .pyi files. Defaults to `.pytype`.\n* `-d, --disable`. Comma or space-separated list of error names to ignore.\n  Detailed explanations of pytype's error names are in\n  [this doc][error-classes]. Defaults to empty.\n\nFor a full list of options, run `pytype --help`.\n\nIn addition to the above, you can direct pytype to use a custom typeshed\ninstallation instead of its own bundled copy by setting `$TYPESHED_HOME`.\n\n### Config File\n\nFor convenience, you can save your pytype configuration in a file. The config\nfile can be a TOML-style file with a `[tool.pytype]` section (preferred) or an\nINI-style file with a `[pytype]` section. If an explicit config file is not\nsupplied, pytype will look for a pytype section in the first `pyproject.toml` or\n`setup.cfg` file found by walking upwards from the current working directory.\n\nStart off by generating a sample config file:\n\n```shell\n$ pytype --generate-config pytype.toml\n```\n\nNow customize the file based on your local setup, keeping only the sections you\nneed. Directories may be relative to the location of the config file, which is\nuseful if you want to check in the config file as part of your project.\n\nFor example, suppose you have the following directory structure and want to\nanalyze package `~/repo1/foo`, which depends on package `~/repo2/bar`:\n\n```\n~/\n├── repo1\n│   └── foo\n│       ├── __init__.py\n│       └── file_to_check.py\n└── repo2\n    └── bar\n        ├── __init__.py\n        └── dependency.py\n```\n\nHere is the filled-in config file, which instructs pytype to type-check\n`~/repo1/foo` as Python 3.9 code, look for packages in `~/repo1` and `~/repo2`,\nand ignore attribute errors. Notice that the path to a package does not include\nthe package itself.\n\n```toml\n$ cat ~/repo1/pytype.toml\n\n# NOTE: All relative paths are relative to the location of this file.\n\n[tool.pytype]\n\n# Space-separated list of files or directories to process.\ninputs = [\n    'foo',\n]\n\n# Python version (major.minor) of the target code.\npython_version = '3.9'\n\n# Paths to source code directories, separated by ':'.\npythonpath = .:~/repo2\n\n# Space-separated list of error names to ignore.\ndisable = [\n    'attribute-error',\n]\n```\n\nWe could've discovered that `~/repo2` needed to be added to the pythonpath by\nrunning pytype's broken dependency checker:\n\n```\n$ pytype --config=~/repo1/pytype.toml ~/repo1/foo/*.py --unresolved\n\nUnresolved dependencies:\n  bar.dependency\n```\n\n### Subtools\n\nPytype ships with a few scripts in addition to `pytype` itself:\n\n* `annotate-ast`, an in-progress type annotator for ASTs.\n* [`merge-pyi`][merge-pyi], for merging type information from a .pyi file into a\nPython file.\n* `pytd-tool`, a parser for .pyi files.\n* `pytype-single`, a debugging tool for pytype developers, which analyzes a\nsingle Python file assuming that .pyi files have already been generated for all\nof its dependencies.\n* `pyxref`, a cross-references generator.\n\n## License\n\n[Apache 2.0][license]\n\n## Disclaimer\n\nThis is not an official Google product.\n\n[error-classes]: docs/errors.md\n[faq]: docs/faq.md\n[faq-diff]: docs/faq.md#how-is-pytype-different-from-other-type-checkers\n[github]: https://github.com/google/pytype/\n[importlab-github-actions]: https://github.com/google/importlab/blob/main/.github/workflows/ci.yml\n[license]: https://github.com/google/pytype/blob/main/LICENSE\n[merge-pyi]: https://github.com/google/pytype/tree/main/pytype/tools/merge_pyi\n[ninja-build-issue]: https://github.com/google/pytype/issues/957\n[pep-484]: https://www.python.org/dev/peps/pep-0484\n[pyi-stub-files]: docs/user_guide.md#pyi-stub-files\n[scikit-build-issue]: https://github.com/scikit-build/ninja-python-distributions/issues/27\n[supported-features]: docs/support.md\n[user-guide]: docs/user_guide.md\n[wsl]: https://docs.microsoft.com/en-us/windows/wsl/faq\n"
        },
        {
          "name": "build_scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "googletest",
          "type": "commit",
          "content": null
        },
        {
          "name": "out",
          "type": "tree",
          "content": null
        },
        {
          "name": "pybind11",
          "type": "commit",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 6.2421875,
          "content": "[MASTER]\n\n# Add <file or directory> to the black list. It should be a base name, not a\n# path. You may set this option multiple times.\nignore=test_data\n\nignore-pattern=.*\\.pyi\n\n[MESSAGES CONTROL]\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\ndisable=\n  abstract-method,\n  access-member-before-definition,\n  arguments-differ,\n  arguments-out-of-order,\n  assigning-non-slot,\n  assignment-from-no-return,\n  attribute-defined-outside-init,\n  bad-mcs-classmethod-argument,\n  bad-option-value,\n  broad-exception-raised,\n  c-extension-no-member,\n  cache-max-size-none,\n  comparison-with-callable,\n  comparison-with-itself,\n  consider-using-enumerate,\n  consider-using-f-string,\n  consider-using-in,\n  consider-using-max-builtin,\n  consider-using-ternary,\n  cyclic-import,\n  deprecated-method,\n  deprecated-module,\n  duplicate-code,\n  global-statement,\n  import-error,\n  import-outside-toplevel,\n  inconsistent-return-statements,\n  invalid-name,\n  line-too-long,\n  method-hidden,\n  missing-docstring,\n  modified-iterating-dict,\n  multiple-statements,\n  no-else-break,\n  no-else-continue,\n  no-else-raise,\n  no-else-return,\n  no-member,\n  no-name-in-module,\n  no-self-use,\n  not-an-iterable,\n  protected-access,\n  relative-import,\n  self-assigning-variable,\n  signature-differs,\n  slots-on-old-class,\n  superfluous-parens,\n  too-few-public-methods,\n  too-many-ancestors,\n  too-many-arguments,\n  too-many-boolean-expressions,\n  too-many-branches,\n  too-many-instance-attributes,\n  too-many-locals,\n  too-many-nested-blocks,\n  too-many-positional-arguments,\n  too-many-public-methods,\n  too-many-return-statements,\n  too-many-statements,\n  unbalanced-dict-unpacking,\n  unbalanced-tuple-unpacking,\n  unnecessary-dunder-call,\n  unnecessary-lambda-assignment,\n  unspecified-encoding,\n  unsubscriptable-object,\n  unsupported-binary-operation,\n  unused-argument,\n  use-dict-literal,\n  useless-import-alias,\n  useless-object-inheritance,\n  useless-return,\n  useless-super-delegation,\n  wrong-import-order,\n\n[REPORTS]\n\n# Set the output format. Available formats are text, parseable, colorized, msvs\n# (visual studio) and html\noutput-format=text\n\n# Tells whether to display a full report or only the messages\nreports=no\n\n# Python expression which should return a note less than 10 (10 is the highest\n# note). You have access to the variables errors warning, statement which\n# respectively contain the number of errors / warnings messages and the total\n# number of statements analyzed. This is used by the global evaluation report\n# (R0004).\nevaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\n\n[VARIABLES]\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# A regular expression matching names used for dummy variables (i.e. not used).\ndummy-variables-rgx=\\*{0,2}(_$|unused_|dummy_)\n\n[BASIC]\n\n# Regular expression which should only match correct module names\nmodule-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$\n\n# Regular expression which should only match correct module level names\nconst-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$\n\n# Regular expression which should only match correct class names\nclass-rgx=[A-Z_][a-zA-Z0-9]+$\n\n# Regular expression which should only match correct method names\nmethod-rgx=^(?:(?P<exempt>__[a-z0-9_]+__|next)|(?P<camel_case>_{0,2}(?:test|assert)?[A-Z][a-zA-Z0-9]*)|(?:_{0,2}[a-z][a-z0-9_]*))$\n\n# Regular expression which should only match correct instance attribute names\nattr-rgx=^_{0,2}[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct argument names\nargument-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct variable names\nvariable-rgx=^[a-z][a-z0-9_]*$\n\n# Regular expression which should only match correct list comprehension /\n# generator expression variable names\ninlinevar-rgx=^[a-z][a-z0-9_]*$\n\n# Good variable names which should always be accepted, separated by a comma\ngood-names=i,j,k,ex,main,Run,_,UnpackUnion,MakeClassOrContainerType,Concat,JoinTypes,ast\n\n# Bad variable names which should always be refused, separated by a comma\nbad-names=\n\n# Regular expression which should only match functions or classes name which do\n# not require a docstring\nno-docstring-rgx=(__.*__|main|test.*|.*Test|Module)\n\n# Minimum length for a docstring\ndocstring-min-length=10\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,XXX\n\n[FORMAT]\n\n# Maximum number of characters on a single line.\nmax-line-length=80\n\n# Regexp for a line that is allowed to be longer than the limit:\n# * `# pytype: disable=...`\n# * `from typing import ...`\n# * long URLs in comments or strings\nignore-long-lines=(^.{1,80}\\s\\s# pytype:\\s)|(from\\styping\\simport\\s)|(^\\s*#?\\s+http)|(^\\s*\"[^\"]*\\s+http)|(^[^\"]*\"http)\n\n# Maximum number of lines in a module\nmax-module-lines=99999\n\n# String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='  '\n\n[TYPECHECK]\n\n# Tells whether missing members accessed in mixin class should be ignored. A\n# mixin class is detected if its name ends with \"mixin\" (case insensitive).\nignore-mixin-members=yes\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E0201 when accessed.\ngenerated-members=old_node\n\n[DESIGN]\n\n# Maximum number of arguments for function / method\nmax-args=5\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore\nignored-argument-names=_.*\n\n# Maximum number of locals for function / method body\nmax-locals=15\n\n# Maximum number of return / yield for function / method body\nmax-returns=6\n\n# Maximum number of branch for function / method body\nmax-branches=12\n\n# Maximum number of statements in function / method body\nmax-statements=50\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n[CLASSES]\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.3388671875,
          "content": "[build-system]\nrequires = [\"setuptools>=40.8.0\", \"ninja\", \"wheel\", \"pybind11>=2.10.1\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.pytype]\ninputs = [\n    \"pytype/**/*.py\",\n    \"pytype_extensions/**/*.py\",\n]\nexclude = [\n    \"**/*_test.py\",\n    \"**/test_*.py\",\n    \"**/*_test_*.py\",\n    \"**/typeshed/\",\n    \"**/test_data/\",\n    \"**/testdata/\",\n]\n"
        },
        {
          "name": "pytype",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytype_extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.in",
          "type": "blob",
          "size": 0.51953125,
          "content": "# Python dependencies for building and testing the pytype source code.\n# Make sure you also install the non-Python dependencies described in\n# https://github.com/google/pytype/blob/master/CONTRIBUTING.md#pytype-dependencies.\nattrs>=21.4.0\nimportlab>=0.8\nimmutabledict>=4.1.0\njinja2>=3.1.2\nlibcst>=1.0.1\nmsgspec>=0.18.6\nnetworkx>=2.8\nninja>=1.10.0.post2\npybind11>=2.10.1\npycnite>=2024.07.31\npydot>=1.4.2\npylint>=3.0.0,!=3.2.4  # https://github.com/pylint-dev/pylint/issues/9751\ntabulate>=0.8.10\ntoml>=0.10.2\ntyping-extensions>=4.3.0\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 1.1591796875,
          "content": "# This file was autogenerated by uv via the following command:\n#    uv pip compile --universal requirements.in -o requirements.txt\nastroid==3.2.4\n    # via pylint\nattrs==24.2.0\n    # via -r requirements.in\ncolorama==0.4.6 ; sys_platform == 'win32'\n    # via pylint\ndill==0.3.8\n    # via pylint\nimmutabledict==4.2.0\n    # via -r requirements.in\nimportlab==0.8.1\n    # via -r requirements.in\nisort==5.13.2\n    # via pylint\njinja2==3.1.4\n    # via -r requirements.in\nlibcst==1.4.0\n    # via -r requirements.in\nmarkupsafe==2.1.5\n    # via jinja2\nmccabe==0.7.0\n    # via pylint\nmsgspec==0.18.6\n    # via -r requirements.in\nnetworkx==3.3\n    # via\n    #   -r requirements.in\n    #   importlab\nninja==1.11.1.1\n    # via -r requirements.in\nplatformdirs==4.3.6\n    # via pylint\npybind11==2.13.6\n    # via -r requirements.in\npycnite==2024.7.31\n    # via -r requirements.in\npydot==3.0.1\n    # via -r requirements.in\npylint==3.2.7\n    # via -r requirements.in\npyparsing==3.1.4\n    # via pydot\npyyaml==6.0.2\n    # via libcst\ntabulate==0.9.0\n    # via -r requirements.in\ntoml==0.10.2\n    # via -r requirements.in\ntomlkit==0.13.2\n    # via pylint\ntyping-extensions==4.12.2\n    # via -r requirements.in\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.7275390625,
          "content": "[metadata]\nname = pytype\ndescription = Python type inferencer\nversion = attr:pytype.__version__.__version__\nlong_description_content_type = text/markdown\nmaintainer = Google\nmaintainer_email = pytype@googlegroups.com\nurl = https://google.github.io/pytype\nproject_urls =\n    Code = https://github.com/google/pytype\n    Issue Tracker = https://github.com/google/pytype/issues\n    Documentation = https://google.github.io/pytype\nlicense = Apache 2.0\nlicense_file = LICENSE\nclassifiers =\n    Development Status :: 5 - Production/Stable\n    Intended Audience :: Developers\n    License :: OSI Approved :: Apache Software License\n    Programming Language :: Python\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: Implementation :: CPython\n    Topic :: Software Development\n\n\n[options]\nzip_safe = False\npython_requires = >=3.10\npackages =\n    find:\ninstall_requires =\n    attrs>=21.4.0\n    importlab>=0.8\n    immutabledict>=4.1.0\n    jinja2>=3.1.2\n    libcst>=1.0.1\n    msgspec>=0.18.6\n    networkx>=2.8\n    ninja>=1.10.0.post2\n    pycnite>=2024.07.31\n    pydot>=1.4.2\n    tabulate>=0.8.10\n    toml>=0.10.2\n    typing-extensions>=4.3.0\n\n[options.packages.find]\ninclude =\n    pytype\n    pytype.*\n    pytype_extensions\n    pytype_extensions.*\n    third_party\n    third_party.*\nexclude =\n    pytype.test_data\n    pytype.tests\n    pytype.typeshed.tests\n\n[options.entry_points]\nconsole_scripts =\n    annotate-ast = pytype.tools.annotate_ast.main:main\n    merge-pyi = pytype.tools.merge_pyi.main:main\n    pytd = pytype.pytd.main:main\n    pytype = pytype.tools.analyze_project.main:main\n    pytype-single = pytype.main:main\n    pyxref = pytype.tools.xref.main:main\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.6337890625,
          "content": "#!/usr/bin/env python\n\"\"\"Pytype setup file.\"\"\"\n\n# pylint: disable=bad-indentation\n\nimport glob\nimport os\nimport re\nimport shutil\nimport sys\n\nfrom setuptools import setup\n\n# Path to directory containing setup.py\nhere = os.path.abspath(os.path.dirname(__file__))\n\n# Get the pybind11 setup helpers\n#\n# This is appended, so if already available in site-packages, that is used\n# instead\nsys.path.append(os.path.join(here, 'pybind11'))\n\nfrom pybind11.setup_helpers import Pybind11Extension  # pylint: disable=g-import-not-at-top,wrong-import-position\n\n\ndef get_typegraph_ext():\n  \"\"\"Generates the typegraph extension.\"\"\"\n  return Pybind11Extension(\n      'pytype.typegraph.cfg',\n      sources=[\n          'pytype/typegraph/cfg.cc',\n          'pytype/typegraph/cfg_logging.cc',\n          'pytype/typegraph/pylogging.cc',\n          'pytype/typegraph/reachable.cc',\n          'pytype/typegraph/solver.cc',\n          'pytype/typegraph/typegraph.cc',\n      ],\n      depends=[\n          'pytype/typegraph/cfg_logging.h',\n          'pytype/typegraph/map_util.h',\n          'pytype/typegraph/pylogging.h',\n          'pytype/typegraph/reachable.h',\n          'pytype/typegraph/solver.h',\n          'pytype/typegraph/typegraph.h',\n      ],\n      cxx_std=20,\n  )\n\n\ndef copy_typeshed():\n  \"\"\"Windows install workaround: copy typeshed if the symlink doesn't work.\"\"\"\n  internal_typeshed = os.path.join(here, 'pytype', 'typeshed')\n  if not os.path.exists(os.path.join(internal_typeshed, 'stdlib')):\n    if os.path.exists(internal_typeshed):\n      # If it is a symlink, remove it\n      try:\n        os.remove(internal_typeshed)\n      except OSError:\n        # This might be a directory that has not got a complete typeshed\n        # installation in it; delete and copy it over again.\n        shutil.rmtree(internal_typeshed)\n    shutil.copytree(os.path.join(here, 'typeshed'), internal_typeshed)\n\n\ndef scan_package_data(path, pattern, check):\n  \"\"\"Scan for files to be included in package_data.\"\"\"\n\n  # We start off in the setup.py directory, but package_data is relative to\n  # the pytype/ directory.\n  package_dir = 'pytype'\n  path = os.path.join(*path)\n  full_path = os.path.join(package_dir, path)\n  result = []\n  for subdir, _, _ in os.walk(full_path):\n    full_pattern = os.path.join(subdir, pattern)\n    if glob.glob(full_pattern):\n      # Once we know that it matches files, we store the pattern itself,\n      # stripping off the prepended pytype/\n      result.append(os.path.relpath(full_pattern, package_dir))\n  assert os.path.join(path, *check) in result\n  return result\n\n\ndef get_data_files():\n  builtins = scan_package_data(\n      ['stubs', 'builtins'], '*.pytd', check=['attr', '*.pytd']\n  )\n  stdlib = scan_package_data(['stubs', 'stdlib'], '*.pytd', check=['*.pytd'])\n  typeshed = (\n      scan_package_data(['typeshed'], '*.pyi', check=['stdlib', '*.pyi'])\n      + ['typeshed/stdlib/VERSIONS']\n      + scan_package_data(\n          ['typeshed'], 'METADATA.toml', check=['stubs', 'six', 'METADATA.toml']\n      )\n  )\n  merge_pyi_grammar = ['tools/merge_pyi/Grammar.txt']\n  return builtins + stdlib + typeshed + merge_pyi_grammar\n\n\ndef get_long_description():\n  # Read the long-description from a file.\n  with open(os.path.join(here, 'README.md'), encoding='utf-8') as f:\n    desc = '\\n' + f.read()\n  # Fix relative links to the pytype docs.\n  return re.sub(\n      r'\\[(.+)\\]: docs/',\n      r'[\\g<1>]: https://github.com/google/pytype/blob/main/docs/',\n      desc,\n  )\n\n\ncopy_typeshed()\n\n# Only options configured at build time are declared here, everything else is\n# declared in setup.cfg\nsetup(\n    long_description=get_long_description(),\n    package_data={'pytype': get_data_files()},\n    ext_modules=[get_typegraph_ext()],\n)\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "typeshed",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}