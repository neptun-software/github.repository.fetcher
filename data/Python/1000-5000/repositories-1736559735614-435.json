{
  "metadata": {
    "timestamp": 1736559735614,
    "page": 435,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Pylons/pyramid",
      "stars": 4000,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1572265625,
          "content": "[run]\nsource =\n    pyramid\n    tests\n\n[paths]\nsource =\n    src/pyramid\n    */src/pyramid\n    */site-packages/pyramid\n\n[report]\nshow_missing = true\nprecision = 2\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.439453125,
          "content": "[flake8]\nignore =\n    # E203: whitespace before ':' (black fails to be PEP8 compliant)\n    E203\n    # E731: do not assign a lambda expression, use a def\n    E731\n    # W503: line break before binary operator (flake8 is not PEP8 compliant)\n    W503\n    # W504: line break after binary operator (flake8 is not PEP8 compliant)\n    W504\nexclude =\n    tests/fixtures\n    tests/pkgs\n    tests/test_config/pkgs\n    tests/test_config/path\nshow-source = True\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.177734375,
          "content": "# Set the default behaviour, in case poeple don't have core.autocrlf set\n* text=auto\n\n# Always lf, this file size is checked in a test\ntests/fixtures/static/encoded.html text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.279296875,
          "content": "*.egg\n*.egg-info\n.eggs/\n*.pyc\n*$py.class\n*.pt.py\n*.txt.py\n*~\n.*.swp\n.coverage\n.coverage.*\n.tox/\nnosetests.xml\ncoverage.xml\nnosetests-*.xml\ncoverage-*.xml\ntutorial.db\nbuild/\ndist/\nbin/\nlib/\ninclude/\n.idea/\ndistribute-*.tar.gz\nbookenv/\njyenv/\npypyenv/\nenv*/\nvenv/\n.cache/\n.python-version\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2744140625,
          "content": "# https://docs.readthedocs.io/en/stable/config-file/v2.html\nversion: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.12'\nsphinx:\n  configuration: docs/conf.py\nformats:\n  - pdf\n  - epub\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n"
        },
        {
          "name": "BFG_HISTORY.rst",
          "type": "blob",
          "size": 241.2275390625,
          "content": "1.3b1 (2010-10-25)\n==================\n\nFeatures\n--------\n\n- The ``paster`` template named ``bfg_routesalchemy`` has been updated\n  to use SQLAlchemy declarative syntax.  Thanks to Ergo^.\n\nBug Fixes\n---------\n\n- When a renderer factory could not be found, a misleading error\n  message was raised if the renderer name was not a string.\n\nDocumentation\n-------------\n\n- The \"\"bfgwiki2\" (SQLAlchemy + url dispatch) tutorial has been\n  updated slightly.  In particular, the source packages no longer\n  attempt to use a private index, and the recommended Python version\n  is now 2.6.  It was also updated to take into account the changes to\n  the ``bfg_routesalchemy`` template used to set up an environment.\n\n- The \"bfgwiki\" (ZODB + traversal) tutorial has been updated slightly.\n  In particular, the source packages no longer attempt to use a\n  private index, and the recommended Python version is now 2.6.\n\n1.3a15 (2010-09-30)\n===================\n\nFeatures\n--------\n\n- The ``repoze.bfg.traversal.traversal_path`` API now eagerly attempts\n  to encode a Unicode ``path`` into ASCII before attempting to split\n  it and decode its segments.  This is for convenience, effectively to\n  allow a (stored-as-Unicode-in-a-database, or\n  retrieved-as-Unicode-from-a-request-parameter) Unicode path to be\n  passed to ``find_model``, which eventually internally uses the\n  ``traversal_path`` function under the hood.  In version 1.2 and\n  prior, if the ``path`` was Unicode, that Unicode was split on\n  slashes and each resulting segment value was Unicode.  An\n  inappropriate call to the ``decode()`` method of a resulting Unicode\n  path segment could cause a ``UnicodeDecodeError`` to occur even if\n  the Unicode representation of the path contained no 'high order'\n  characters (it effectively did a \"double decode\").  By converting\n  the Unicode path argument to ASCII before we attempt to decode and\n  split, genuine errors will occur in a more obvious place while also\n  allowing us to handle (for convenience) the case that it's a Unicode\n  representation formed entirely from ASCII-compatible characters.\n\n1.3a14 (2010-09-14)\n===================\n\nBug Fixes\n---------\n\n- If an exception view was registered through the legacy\n  ``set_notfound_view`` or ``set_forbidden_view`` APIs, the context\n  sent to the view was incorrect (could be ``None`` inappropriately).\n\nFeatures\n--------\n\n- Compatibility with WebOb 1.0.\n\nRequirements\n------------\n\n- Now requires WebOb >= 1.0.\n\nBackwards Incompatibilities\n---------------------------\n\n- Due to changes introduced WebOb 1.0, the\n  ``repoze.bfg.request.make_request_ascii`` event subscriber no longer\n  works, so it has been removed.  This subscriber was meant to be used\n  in a deployment so that code written before BFG 0.7.0 could run\n  unchanged.  At this point, such code will need to be rewritten to\n  expect Unicode from ``request.GET``, ``request.POST`` and\n  ``request.params`` or it will need to be changed to use\n  ``request.str_POST``, ``request.str_GET`` and/or\n  ``request.str_params`` instead of the non-``str`` versions of same,\n  as the non-``str`` versions of the same APIs always now perform\n  decoding to Unicode.\n\nErrata\n------\n\n- A prior changelog entry asserted that the ``INewResponse`` event was\n  not sent to listeners if the response was not \"valid\" (if a view or\n  renderer returned a response object that did not have a\n  status/headers/app_iter).  This is not true in this release, nor was\n  it true in 1.3a13.\n\n1.3a13 (2010-09-14)\n===================\n\nBug Fixes\n---------\n\n- The ``traverse`` route predicate could not successfully generate a\n  traversal path.\n\nFeatures\n--------\n\n- In support of making it easier to configure applications which are\n  \"secure by default\", a default permission feature was added.  If\n  supplied, the default permission is used as the permission string to\n  all view registrations which don't otherwise name a permission.\n  These APIs are in support of that:\n\n  - A new constructor argument was added to the Configurator:\n    ``default_permission``.\n\n  - A new method was added to the Configurator:\n    ``set_default_permission``.\n\n  - A new ZCML directive was added: ``default_permission``.\n\n- Add a new request API: ``request.add_finished_callback``.  Finished\n  callbacks are called by the router unconditionally near the very end\n  of request processing.  See the \"Using Finished Callbacks\" section\n  of the \"Hooks\" narrative chapter of the documentation for more\n  information.\n\n- A ``request.matched_route`` attribute is now added to the request\n  when a route has matched.  Its value is the \"route\" object that\n  matched (see the ``IRoute`` interface within\n  ``repoze.bfg.interfaces`` API documentation for the API of a route\n  object).\n\n- The ``exception`` attribute of the request is now set slightly\n  earlier and in a slightly different set of scenarios, for benefit of\n  \"finished callbacks\" and \"response callbacks\".  In previous\n  versions, the ``exception`` attribute of the request was not set at\n  all if an exception view was not found.  In this version, the\n  ``request.exception`` attribute is set immediately when an exception\n  is caught by the router, even if an exception view could not be\n  found.\n\n- The ``add_route`` method of a Configurator now accepts a\n  ``pregenerator`` argument.  The pregenerator for the resulting route\n  is called by ``route_url`` in order to adjust the set of arguments\n  passed to it by the user for special purposes, such as Pylons\n  'subdomain' support.  It will influence the URL returned by\n  ``route_url``.  See the ``repoze.bfg.interfaces.IRoutePregenerator``\n  interface for more information.\n\nBackwards Incompatibilities\n---------------------------\n\n- The router no longer sets the value ``wsgiorg.routing_args`` into\n  the environ when a route matches. The value used to be something\n  like ``((), matchdict)``.  This functionality was only ever\n  obliquely referred to in change logs; it was never documented as an\n  API.\n\n- The ``exception`` attribute of the request now defaults to ``None``.\n  In prior versions, the ``request.exception`` attribute did not exist\n  if an exception was not raised by user code during request\n  processing; it only began existence once an exception view was\n  found.\n\nDeprecations\n------------\n\n- The ``repoze.bfg.interfaces.IWSGIApplicationCreatedEvent`` event\n  interface was renamed to\n  ``repoze.bfg.interfaces.IApplicationCreated``.  Likewise, the\n  ``repoze.bfg.events.WSGIApplicationCreatedEvent`` class was renamed\n  to ``repoze.bfg.events.ApplicationCreated``.  The older aliases will\n  continue to work indefinitely.\n\n- The ``repoze.bfg.interfaces.IAfterTraversal`` event interface was\n  renamed to ``repoze.bfg.interfaces.IContextFound``.  Likewise, the\n  ``repoze.bfg.events.AfterTraversal`` class was renamed to\n  ``repoze.bfg.events.ContextFound``.  The older aliases will continue\n  to work indefinitely.\n\n- References to the WSGI environment values ``bfg.routes.matchdict``\n  and ``bfg.routes.route`` were removed from documentation.  These\n  will stick around internally for several more releases, but it is\n  ``request.matchdict`` and ``request.matched_route`` are now the\n  \"official\" way to obtain the matchdict and the route object which\n  resulted in the match.\n\nDocumentation\n-------------\n\n- Added documentation for the ``default_permission`` ZCML directive.\n\n- Added documentation for the ``default_permission`` constructor value\n  and the ``set_default_permission`` method in the Configurator API\n  documentation.\n\n- Added a new section to the \"security\" chapter named \"Setting a\n  Default Permission\".\n\n- Document ``renderer_globals_factory`` and ``request_factory``\n  arguments to Configurator constructor.\n\n- Added two sections to the \"Hooks\" chapter of the documentation:\n  \"Using Response Callbacks\" and \"Using Finished Callbacks\".\n\n- Added documentation of the ``request.exception`` attribute to the\n  ``repoze.bfg.request.Request`` API documentation.\n\n- Added glossary entries for \"response callback\" and \"finished\n  callback\".\n\n- The \"Request Processing\" narrative chapter has been updated to note\n  finished and response callback steps.\n\n- New interface in interfaces API documentation: ``IRoutePregenerator``.\n\n- Added a \"The Matched Route\" section to the URL Dispatch narrative\n  docs chapter, detailing the ``matched_route`` attribute.\n\n1.3a12 (2010-09-08)\n===================\n\nBug Fixes\n---------\n\n- Fix a bug in ``repoze.bfg.url.static_url`` URL generation: if two\n  resource specifications were used to create two separate static\n  views, but they shared a common prefix, it was possible that\n  ``static_url`` would generate an incorrect URL.\n\n- Fix another bug in ``repoze.bfg.static_url`` URL generation: too\n  many slashes in generated URL.\n\n- Prevent a race condition which could result in a ``RuntimeError``\n  when rendering a Chameleon template that has not already been\n  rendered once.  This would usually occur directly after a restart,\n  when more than one person or thread is trying to execute the same\n  view at the same time: https://bugs.launchpad.net/karl3/+bug/621364\n\nFeatures\n--------\n\n- The argument to ``repoze.bfg.configuration.Configurator.add_route``\n  which was previously called ``path`` is now called ``pattern`` for\n  better explicability.  For backwards compatibility purposes, passing\n  a keyword argument named ``path`` to ``add_route`` will still work\n  indefinitely.\n\n- The ``path`` attribute to the ZCML ``route`` directive is now named\n  ``pattern`` for better explicability.  The older ``path`` attribute\n  will continue to work indefinitely.\n\nDocumentation\n-------------\n\n- All narrative, API, and tutorial docs which referred to a route\n  pattern as a ``path`` have now been updated to refer to them as a\n  ``pattern``.\n\n- The ``repoze.bfg.interfaces`` API documentation page is now rendered\n  via ``repoze.sphinx.autointerface``.\n\n- The URL Dispatch narrative chapter now refers to the ``interfaces``\n  chapter to explain the API of an ``IRoute`` object.\n\nPaster Templates\n----------------\n\n- The routesalchemy template has been updated to use ``pattern`` in\n  its route declarations rather than ``path``.\n\nDependencies\n------------\n\n- ``tests_require`` now includes ``repoze.sphinx.autointerface`` as a\n  dependency.\n\nInternal\n--------\n\n- Add an API to the ``Configurator`` named ``get_routes_mapper``.\n  This returns an object implementing the ``IRoutesMapper`` interface.\n\n- The ``repoze.bfg.urldispatch.RoutesMapper`` object now has a\n  ``get_route`` method which returns a single Route object or\n  ``None``.\n\n- A new interface ``repoze.bfg.interfaces.IRoute`` was added.  The\n  ``repoze.bfg.urldispatch.Route`` object implements this interface.\n\n- The canonical attribute for accessing the routing pattern from a\n  route object is now ``pattern`` rather than ``path``.\n\n- Use ``hash()`` rather than ``id()`` when computing the \"phash\" of a\n  custom route/view predicate in order to allow the custom predicate\n  some control over which predicates are \"equal\".\n\n- Use ``response.headerlist.append`` instead of\n  ``response.headers.add`` in\n  ``repoze.bfg.request.add_global_response_headers`` in case the\n  response is not a WebOb response.\n\n- The ``repoze.bfg.urldispatch.Route`` constructor (not an API) now\n  accepts a different ordering of arguments.  Previously it was\n  ``(pattern, name, factory=None, predicates=())``.  It is now\n  ``(name, pattern, factory=None, predicates=())``.  This is in\n  support of consistency with ``configurator.add_route``.\n\n- The ``repoze.bfg.urldispatch.RoutesMapper.connect`` method (not an\n  API) now accepts a different ordering of arguments.  Previously it\n  was ``(pattern, name, factory=None, predicates=())``.  It is now\n  ``(name, pattern, factory=None, predicates=())``.  This is in\n  support of consistency with ``configurator.add_route``.\n\n1.3a11 (2010-09-05)\n===================\n\nBug Fixes\n---------\n\n- Process the response callbacks and the NewResponse event earlier, to\n  enable mutations to the response to take effect.\n\n1.3a10 (2010-09-05)\n===================\n\nFeatures\n--------\n\n- A new ``repoze.bfg.request.Request.add_response_callback`` API has\n  been added.  This method is documented in the new\n  ``repoze.bfg.request`` API chapter.  It can be used to influence\n  response values before a concrete response object has been created.\n\n- The ``repoze.bfg.interfaces.INewResponse`` interface now includes a\n  ``request`` attribute; as a result, a handler for INewResponse now\n  has access to the request which caused the response.\n\n- Each of the follow methods of the Configurator now allow the\n  below-named arguments to be passed as \"dotted name strings\"\n  (e.g. \"foo.bar.baz\") rather than as actual implementation objects\n  that must be imported:\n\n  setup_registry\n     root_factory, authentication_policy, authorization_policy,\n     debug_logger, locale_negotiator, request_factory,\n     renderer_globals_factory\n\n  add_subscriber\n     subscriber, iface\n\n  derive_view\n     view\n\n  add_view\n     view, ``for_``, context, request_type, containment\n\n  add_route()\n     view, view_for, factory, ``for_``, view_context\n\n  scan\n     package\n\n  add_renderer\n     factory\n\n  set_forbidden_view\n     view\n\n  set_notfound_view\n     view\n\n  set_request_factory\n     factory\n\n  set_renderer_globals_factory()\n     factory\n\n  set_locale_negotiator\n     negotiator\n\n  testing_add_subscriber\n     event_iface\n\nBug Fixes\n---------\n\n- The route pattern registered internally for a local \"static view\"\n  (either via the ``static`` ZCML directive or via the\n  ``add_static_view`` method of the configurator) was incorrect.  It\n  was registered for e.g. ``static*traverse``, while it should have\n  been registered for ``static/*traverse``.  Symptom: two static views\n  could not reliably be added to a system when they both shared the\n  same path prefix (e.g. ``/static`` and ``/static2``).\n\nBackwards Incompatibilities\n---------------------------\n\n- The INewResponse event is now not sent to listeners if the response\n  returned by view code (or a renderer) is not a \"real\" response\n  (e.g. if it does not have ``.status``, ``.headerlist`` and\n  ``.app_iter`` attribtues).\n\nDocumentation\n-------------\n\n- Add an API chapter for the ``repoze.bfg.request`` module, which\n  includes documentation for the ``repoze.bfg.request.Request`` class\n  (the \"request object\").\n\n- Modify the \"Request and Response\" narrative chapter to reference the\n  new ``repoze.bfg.request`` API chapter.  Some content was moved from\n  this chapter into the API documentation itself.\n\n- Various changes to denote that Python dotted names are now allowed\n  as input to Configurator methods.\n\nInternal\n--------\n\n- The (internal) feature which made it possible to attach a\n  ``global_response_headers`` attribute to the request (which was\n  assumed to contain a sequence of header key/value pairs which would\n  later be added to the response by the router), has been removed.\n  The functionality of\n  ``repoze.bfg.request.Request.add_response_callback`` takes its\n  place.\n\n- The ``repoze.bfg.events.NewResponse`` class's construct has changed:\n  it now must be created with ``(request, response)`` rather than\n  simply ``(response)``.\n\n1.3a9 (2010-08-22)\n==================\n\nFeatures\n--------\n\n- The Configurator now accepts a dotted name *string* to a package as\n  a ``package`` constructor argument. The ``package`` argument was\n  previously required to be a package *object* (not a dotted name\n  string).\n\n- The ``repoze.bfg.configuration.Configurator.with_package`` method\n  was added.  This method returns a new Configurator using the same\n  application registry as the configurator object it is called\n  upon. The new configurator is created afresh with its ``package``\n  constructor argument set to the value passed to ``with_package``.\n  This feature will make it easier for future BFG versions to allow\n  dotted names as arguments in places where currently only object\n  references are allowed (the work to allow dotted names instead of\n  object references everywhere has not yet been done, however).\n\n- The new ``repoze.bfg.configuration.Configurator.maybe_dotted``\n  method resolves a Python dotted name string supplied as its\n  ``dotted`` argument to a global Python object.  If the value cannot\n  be resolved, a ``repoze.bfg.configuration.ConfigurationError`` is\n  raised.  If the value supplied as ``dotted`` is not a string, the\n  value is returned unconditionally without any resolution attempted.\n\n- The new\n  ``repoze.bfg.configuration.Configurator.absolute_resource_spec``\n  method resolves a potentially relative \"resource specification\"\n  string into an absolute version.  If the value supplied as\n  ``relative_spec`` is not a string, the value is returned\n  unconditionally without any resolution attempted.\n\nBackwards Incompatibilities\n---------------------------\n\n- The functions in ``repoze.bfg.renderers`` named ``render`` and\n  ``render_to_response`` introduced in 1.3a6 previously took a set of\n  ``**values`` arguments for the values to be passed to the renderer.\n  This was wrong, as renderers don't need to accept only dictionaries\n  (they can accept any type of object).  Now, the value sent to the\n  renderer must be supplied as a positional argument named ``value``.\n  The ``request`` argument is still a keyword argument, however.\n\n- The functions in ``repoze.bfg.renderers`` named ``render`` and\n  ``render_to_response`` now accept an additional keyword argument\n  named ``package``.\n\n- The ``get_renderer`` API in ``repoze.bfg.renderers`` now accepts a\n  ``package`` argument.\n\nDocumentation\n-------------\n\n- The ZCML ``include`` directive docs were incorrect: they specified\n  ``filename`` rather than (the correct) ``file`` as an allowable\n  attribute.\n\nInternal\n--------\n\n- The ``repoze.bfg.resource.resolve_resource_spec`` function can now\n  accept a package object as its ``pname`` argument instead of just a\n  package name.\n\n- The ``_renderer_factory_from_name`` and ``_renderer_from_name``\n  methods of the Configurator were removed.  These were never APIs.\n\n- The ``_render``, ``_render_to_response`` and ``_make_response``\n  functions with ``repoze.bfg.render`` (added in 1.3a6) have been\n  removed.\n\n- A new helper class ``repoze.bfg.renderers.RendererHelper`` was\n  added.\n\n- The _map_view function of ``repoze.bfg.configuration`` now takes\n  only a renderer_name argument instead of both a ``renderer`` and\n  ``renderer``_name argument.  It also takes a ``package`` argument\n  now.\n\n- Use ``imp.get_suffixes`` indirection in\n  ``repoze.bfg.path.package_name`` instead of hardcoded ``.py``\n  ``.pyc`` and ``.pyo`` to use for comparison when attempting to\n  decide if a directory is a package.\n\n- Make tests runnable again under Jython (although they do not all\n  pass currently).\n\n- The reify decorator now maintains the docstring of the function it\n  wraps.\n\n1.3a8 (2010-08-08)\n==================\n\nFeatures\n--------\n\n- New public interface: ``repoze.bfg.exceptions.IExceptionResponse``.\n  This interface is provided by all internal exception classes (such\n  as ``repoze.bfg.exceptions.NotFound`` and\n  ``repoze.bfg.exceptions.Forbidden``), instances of which are both\n  exception objects and can behave as WSGI response objects.  This\n  interface is made public so that exception classes which are also\n  valid WSGI response factories can be configured to implement them or\n  exception instances which are also or response instances can be\n  configured to provide them.\n\n- New API class: ``repoze.bfg.view.AppendSlashNotFoundViewFactory``.\n\n  There can only be one Not Found view in any ``repoze.bfg``\n  application.  Even if you use\n  ``repoze.bfg.view.append_slash_notfound_view`` as the Not Found\n  view, ``repoze.bfg`` still must generate a ``404 Not Found``\n  response when it cannot redirect to a slash-appended URL; this not\n  found response will be visible to site users.\n\n  If you don't care what this 404 response looks like, and you only\n  need redirections to slash-appended route URLs, you may use the\n  ``repoze.bfg.view.append_slash_notfound_view`` object as the Not\n  Found view.  However, if you wish to use a *custom* notfound view\n  callable when a URL cannot be redirected to a slash-appended URL,\n  you may wish to use an instance of the\n  ``repoze.bfg.view.AppendSlashNotFoundViewFactory`` class as the Not\n  Found view, supplying the notfound view callable as the first\n  argument to its constructor.  For instance::\n\n       from repoze.bfg.exceptions import NotFound\n       from repoze.bfg.view import AppendSlashNotFoundViewFactory\n\n       def notfound_view(context, request):\n           return HTTPNotFound('It aint there, stop trying!')\n\n       custom_append_slash = AppendSlashNotFoundViewFactory(notfound_view)\n       config.add_view(custom_append_slash, context=NotFound)\n\n  The ``notfound_view`` supplied must adhere to the two-argument view\n  callable calling convention of ``(context, request)`` (``context``\n  will be the exception object).\n\nDocumentation\n-------------\n\n- Expanded the \"Cleaning Up After a Request\" section of the URL\n  Dispatch narrative chapter.\n\n- Expanded the \"Redirecting to Slash-Appended Routes\" section of the\n  URL Dispatch narrative chapter.\n\nInternal\n--------\n\n- Previously, two default view functions were registered at\n  Configurator setup (one for ``repoze.bfg.exceptions.NotFound`` named\n  ``default_notfound_view`` and one for\n  ``repoze.bfg.exceptions.Forbidden`` named\n  ``default_forbidden_view``) to render internal exception responses.\n  Those default view functions have been removed, replaced with a\n  generic default view function which is registered at Configurator\n  setup for the ``repoze.bfg.interfaces.IExceptionResponse`` interface\n  that simply returns the exception instance; the ``NotFound`` and\n  ``Forbidden`` classes are now still exception factories but they are\n  also response factories which generate instances that implement the\n  new ``repoze.bfg.interfaces.IExceptionResponse`` interface.\n\n1.3a7 (2010-08-01)\n==================\n\nFeatures\n--------\n\n- The ``repoze.bfg.configuration.Configurator.add_route`` API now\n  returns the route object that was added.\n\n- A ``repoze.bfg.events.subscriber`` decorator was added.  This\n  decorator decorates module-scope functions, which are then treated\n  as event listeners after a scan() is performed.  See the Events\n  narrative documentation chapter and the ``repoze.bfg.events`` module\n  documentation for more information.\n\nBug Fixes\n---------\n\n- When adding a view for a route which did not yet exist (\"did not yet\n  exist\" meaning, temporally, a view was added with a route name for a\n  route which had not yet been added via add_route), the value of the\n  ``custom_predicate`` argument to ``add_view`` was lost.  Symptom:\n  wrong view matches when using URL dispatch and custom view\n  predicates together.\n\n- Pattern matches for a ``:segment`` marker in a URL dispatch route\n  pattern now always match at least one character.  See \"Backwards\n  Incompatibilities\" below in this changelog.\n\nBackwards Incompatibilities\n---------------------------\n\n- A bug existed in the regular expression to do URL matching.  As an\n  example, the URL matching machinery would cause the pattern\n  ``/{foo}`` to match the root URL ``/`` resulting in a match\n  dictionary of ``{'foo':u''}`` or the pattern ``/{fud}/edit might\n  match the URL ``//edit`` resulting in a match dictionary of\n  ``{'fud':u''}``.  It was always the intent that ``:segment`` markers\n  in the pattern would need to match *at least one* character, and\n  never match the empty string.  This, however, means that in certain\n  circumstances, a routing match which your application inadvertently\n  depended upon may no longer happen.\n\nDocumentation\n-------------\n\n- Added description of the ``repoze.bfg.events.subscriber`` decorator\n  to the Events narrative chapter.\n\n- Added ``repoze.bfg.events.subscriber`` API documentation to\n  ``repoze.bfg.events`` API docs.\n\n- Added a section named \"Zope 3 Enforces 'TTW' Authorization Checks By\n  Default; BFG Does Not\" to the \"Design Defense\" chapter.\n\n1.3a6 (2010-07-25)\n==================\n\nFeatures\n--------\n\n- New argument to ``repoze.bfg.configuration.Configurator.add_route``\n  and the ``route`` ZCML directive: ``traverse``.  If you would like\n  to cause the ``context`` to be something other than the ``root``\n  object when this route matches, you can spell a traversal pattern as\n  the ``traverse`` argument.  This traversal pattern will be used as\n  the traversal path: traversal will begin at the root object implied\n  by this route (either the global root, or the object returned by the\n  ``factory`` associated with this route).\n\n  The syntax of the ``traverse`` argument is the same as it is for\n  ``path``. For example, if the ``path`` provided is\n  ``articles/:article/edit``, and the ``traverse`` argument provided\n  is ``/:article``, when a request comes in that causes the route to\n  match in such a way that the ``article`` match value is '1' (when\n  the request URI is ``/articles/1/edit``), the traversal path will be\n  generated as ``/1``.  This means that the root object's\n  ``__getitem__`` will be called with the name ``1`` during the\n  traversal phase.  If the ``1`` object exists, it will become the\n  ``context`` of the request.  The Traversal narrative has more\n  information about traversal.\n\n  If the traversal path contains segment marker names which are not\n  present in the path argument, a runtime error will occur.  The\n  ``traverse`` pattern should not contain segment markers that do not\n  exist in the ``path``.\n\n  A similar combining of routing and traversal is available when a\n  route is matched which contains a ``*traverse`` remainder marker in\n  its path.  The ``traverse`` argument allows you to associate route\n  patterns with an arbitrary traversal path without using a\n  ``*traverse`` remainder marker; instead you can use other match\n  information.\n\n  Note that the ``traverse`` argument is ignored when attached to a\n  route that has a ``*traverse`` remainder marker in its path.\n\n- A new method of the ``Configurator`` exists:\n  ``set_request_factory``.  If used, this method will set the factory\n  used by the ``repoze.bfg`` router to create all request objects.\n\n- The ``Configurator`` constructor takes an additional argument:\n  ``request_factory``.  If used, this argument will set the factory\n  used by the ``repoze.bfg`` router to create all request objects.\n\n- The ``Configurator`` constructor takes an additional argument:\n  ``request_factory``.  If used, this argument will set the factory\n  used by the ``repoze.bfg`` router to create all request objects.\n\n- A new method of the ``Configurator`` exists:\n  ``set_renderer_globals_factory``.  If used, this method will set the\n  factory used by the ``repoze.bfg`` router to create renderer\n  globals.\n\n- A new method of the ``Configurator`` exists: ``get_settings``.  If\n  used, this method will return the current settings object (performs\n  the same job as the ``repoze.bfg.settings.get_settings`` API).\n\n- The ``Configurator`` constructor takes an additional argument:\n  ``renderer_globals_factory``.  If used, this argument will set the\n  factory used by the ``repoze.bfg`` router to create renderer\n  globals.\n\n- Add ``repoze.bfg.renderers.render``,\n  ``repoze.bfg.renderers.render_to_response`` and\n  ``repoze.bfg.renderers.get_renderer`` functions.  These are\n  imperative APIs which will use the same rendering machinery used by\n  view configurations with a ``renderer=`` attribute/argument to\n  produce a rendering or renderer.  Because these APIs provide a\n  central API for all rendering, they now form the preferred way to\n  perform imperative template rendering.  Using functions named\n  ``render_*`` from modules such as ``repoze.bfg.chameleon_zpt`` and\n  ``repoze.bfg.chameleon_text`` is now discouraged (although not\n  deprecated).  The code the backing older templating-system-specific\n  APIs now calls into the newer ``repoze.bfg.renderer`` code.\n\n- The ``repoze.bfg.configuration.Configurator.testing_add_template``\n  has been renamed to ``testing_add_renderer``.  A backwards\n  compatibility alias is present using the old name.\n\nDocumentation\n-------------\n\n- The ``Hybrid`` narrative chapter now contains a description of the\n  ``traverse`` route argument.\n\n- The ``Hooks`` narrative chapter now contains sections about\n  changing the request factory and adding a renderer globals factory.\n\n- The API documentation includes a new module:\n  ``repoze.bfg.renderers``.\n\n- The ``Templates`` chapter was updated; all narrative that used\n  templating-specific APIs within examples to perform rendering (such\n  as the ``repoze.bfg.chameleon_zpt.render_template_to_response``\n  method) was changed to use ``repoze.bfg.renderers.render_*``\n  functions.\n\nBug Fixes\n---------\n\n- The ``header`` predicate (when used as either a view predicate or a\n  route predicate) had a problem when specified with a name/regex\n  pair.  When the header did not exist in the headers dictionary, the\n  regex match could be fed ``None``, causing it to throw a\n  ``TypeError: expected string or buffer`` exception.  Now, the\n  predicate returns False as intended.\n\nDeprecations\n------------\n\n- The ``repoze.bfg.renderers.rendered_response`` function was never an\n  official API, but may have been imported by extensions in the wild.\n  It is officially deprecated in this release.  Use\n  ``repoze.bfg.renderers.render_to_response`` instead.\n\n- The following APIs are *documentation* deprecated (meaning they are\n  officially deprecated in documentation but do not raise a\n  deprecation error upon their usage, and may continue to work for an\n  indefinite period of time):\n\n  In the ``repoze.bfg.chameleon_zpt`` module: ``get_renderer``,\n  ``get_template``, ``render_template``,\n  ``render_template_to_response``.  The suggested alternatives are\n  documented within the docstrings of those methods (which are still\n  present in the documentation).\n\n  In the ``repoze.bfg.chameleon_text`` module: ``get_renderer``,\n  ``get_template``, ``render_template``,\n  ``render_template_to_response``.  The suggested alternatives are\n  documented within the docstrings of those methods (which are still\n  present in the documentation).\n\n  In general, to perform template-related functions, one should now\n  use the various methods in the ``repoze.bfg.renderers`` module.\n\nBackwards Incompatibilities\n---------------------------\n\n- A new internal exception class (*not* an API) named\n  ``repoze.bfg.exceptions.PredicateMismatch`` now exists.  This\n  exception is currently raised when no constituent view of a\n  multiview can be called (due to no predicate match).  Previously, in\n  this situation, a ``repoze.bfg.exceptions.NotFound`` was raised.  We\n  provide backwards compatibility for code that expected a\n  ``NotFound`` to be raised when no predicates match by causing\n  ``repoze.bfg.exceptions.PredicateMismatch`` to inherit from\n  ``NotFound``.  This will cause any exception view registered for\n  ``NotFound`` to be called when a predicate mismatch occurs, as was\n  the previous behavior.\n\n  There is however, one perverse case that will expose a backwards\n  incompatibility.  If 1) you had a view that was registered as a\n  member of a multiview 2) this view explicitly raised a ``NotFound``\n  exception *in order to* proceed to the next predicate check in the\n  multiview, that code will now behave differently: rather than\n  skipping to the next view match, a NotFound will be raised to the\n  top-level exception handling machinery instead.  For code to be\n  depending upon the behavior of a view raising ``NotFound`` to\n  proceed to the next predicate match, would be tragic, but not\n  impossible, given that ``NotFound`` is a public interface.\n  ``repoze.bfg.exceptions.PredicateMismatch`` is not a public API and\n  cannot be depended upon by application code, so you should not\n  change your view code to raise ``PredicateMismatch``.  Instead, move\n  the logic which raised the ``NotFound`` exception in the view out\n  into a custom view predicate.\n\n- If, when you run your application's unit test suite under BFG 1.3, a\n  ``KeyError`` naming a template or a ``ValueError`` indicating that a\n  'renderer factory' is not registered may is raised\n  (e.g. ``ValueError: No factory for renderer named '.pt' when looking\n  up karl.views:templates/snippets.pt``), you may need to perform some\n  extra setup in your test code.\n\n  The best solution is to use the\n  ``repoze.bfg.configuration.Configurator.testing_add_renderer`` (or,\n  alternately the deprecated\n  ``repoze.bfg.testing.registerTemplateRenderer`` or\n  ``registerDummyRenderer``) API within the code comprising each\n  individual unit test suite to register a \"dummy\" renderer for each\n  of the templates and renderers used by code under test.  For\n  example::\n\n    config = Configurator()\n    config.testing_add_renderer('karl.views:templates/snippets.pt')\n\n  This will register a basic dummy renderer for this particular\n  missing template.  The ``testing_add_renderer`` API actually\n  *returns* the renderer, but if you don't care about how the render\n  is used, you don't care about having a reference to it either.\n\n  A more rough way to solve the issue exists.  It causes the \"real\"\n  template implementations to be used while the system is under test,\n  which is suboptimal, because tests will run slower, and unit tests\n  won't actually *be* unit tests, but it is easier.  Always ensure you\n  call the ``setup_registry()`` method of the Configurator .  Eg::\n\n    reg = MyRegistry()\n    config = Configurator(registry=reg)\n    config.setup_registry()\n\n  Calling ``setup_registry`` only has an effect if you're *passing in*\n  a ``registry`` argument to the Configurator constructor.\n  ``setup_registry`` is called by the course of normal operations\n  anyway if you do not pass in a ``registry``.\n\n  If your test suite isn't using a Configurator yet, and is still\n  using the older ``repoze.bfg.testing`` APIs name ``setUp`` or\n  ``cleanUp``, these will register the renderers on your behalf.\n\n  A variant on the symptom for this theme exists: you may already be\n  dutifully registering a dummy template or renderer for a template\n  used by the code you're testing using ``testing_register_renderer``\n  or ``registerTemplateRenderer``, but (perhaps unbeknownst to you)\n  the code under test expects to be able to use a \"real\" template\n  renderer implementation to retrieve or render *another* template\n  that you forgot was being rendered as a side effect of calling the\n  code you're testing.  This happened to work because it found the\n  *real* template while the system was under test previously, and now\n  it cannot.  The solution is the same.\n\n  It may also help reduce confusion to use a *resource specification*\n  to specify the template path in the test suite and code rather than\n  a relative path in either.  A resource specification is unambiguous,\n  while a relative path needs to be relative to \"here\", where \"here\"\n  isn't always well-defined (\"here\" in a test suite may or may not be\n  the same as \"here\" in the code under test).\n\n1.3a5 (2010-07-14)\n==================\n\nFeatures\n--------\n\n- New internal exception: ``repoze.bfg.exceptions.URLDecodeError``.\n  This URL is a subclass of the built-in Python exception named\n  ``UnicodeDecodeError``.\n\n- When decoding a URL segment to Unicode fails, the exception raised\n  is now ``repoze.bfg.exceptions.URLDecodeError`` instead of\n  ``UnicodeDecodeError``.  This makes it possible to register an\n  exception view invoked specifically when ``repoze.bfg`` cannot\n  decode a URL.\n\nBug Fixes\n---------\n\n- Fix regression in\n  ``repoze.bfg.configuration.Configurator.add_static_view``.  Before\n  1.3a4, view names that contained a slash were supported as route\n  prefixes. 1.3a4 broke this by trying to treat them as full URLs.\n\nDocumentation\n-------------\n\n- The ``repoze.bfg.exceptions.URLDecodeError`` exception was added to\n  the exceptions chapter of the API documentation.\n\nBackwards Incompatibilities\n---------------------------\n\n- in previous releases, when a URL could not be decoded from UTF-8\n  during traversal, a ``TypeError`` was raised.  Now the error which\n  is raised is a ``repoze.bfg.exceptions.URLDecodeError``.\n\n1.3a4 (2010-07-03)\n==================\n\nFeatures\n--------\n\n- Undocumented hook: make ``get_app`` and ``get_root`` of the\n  ``repoze.bfg.paster.BFGShellCommand`` hookable in cases where\n  endware may interfere with the default versions.\n\n- In earlier versions, a custom route predicate associated with a url\n  dispatch route (each of the predicate functions fed to the\n  ``custom_predicates`` argument of\n  ``repoze.bfg.configuration.Configurator.add_route``) has always\n  required a 2-positional argument signature, e.g. ``(context,\n  request)``.  Before this release, the ``context`` argument was\n  always ``None``.\n\n  As of this release, the first argument passed to a predicate is now\n  a dictionary conventionally named ``info`` consisting of ``route``,\n  and ``match``.  ``match`` is a dictionary: it represents the\n  arguments matched in the URL by the route.  ``route`` is an object\n  representing the route which was matched.\n\n  This is useful when predicates need access to the route match.  For\n  example::\n\n    def any_of(segment_name, *args):\n        def predicate(info, request):\n            if info['match'][segment_name] in args:\n                return True\n        return predicate\n\n    num_one_two_or_three = any_of('num, 'one', 'two', 'three')\n\n    add_route('num', '/:num', custom_predicates=(num_one_two_or_three,))\n\n  The ``route`` object is an object that has two useful attributes:\n  ``name`` and ``path``.  The ``name`` attribute is the route name.\n  The ``path`` attribute is the route pattern.  An example of using\n  the route in a set of route predicates::\n\n    def twenty_ten(info, request):\n        if info['route'].name in ('ymd', 'ym', 'y'):\n            return info['match']['year'] == '2010'\n\n    add_route('y', '/:year', custom_predicates=(twenty_ten,))\n    add_route('ym', '/:year/:month', custom_predicates=(twenty_ten,))\n    add_route('ymd', '/:year/:month:/day', custom_predicates=(twenty_ten,))\n\n- The ``repoze.bfg.url.route_url`` API has changed.  If a keyword\n  ``_app_url`` is present in the arguments passed to ``route_url``,\n  this value will be used as the protocol/hostname/port/leading path\n  prefix of the generated URL.  For example, using an ``_app_url`` of\n  ``http://example.com:8080/foo`` would cause the URL\n  ``http://example.com:8080/foo/fleeb/flub`` to be returned from this\n  function if the expansion of the route pattern associated with the\n  ``route_name`` expanded to ``/fleeb/flub``.\n\n- It is now possible to use a URL as the ``name`` argument fed to\n  ``repoze.bfg.configuration.Configurator.add_static_view``.  When the\n  name argument is a URL, the ``repoze.bfg.url.static_url`` API will\n  generate join this URL (as a prefix) to a path including the static\n  file name.  This makes it more possible to put static media on a\n  separate webserver for production, while keeping static media\n  package-internal and served by the development webserver during\n  development.\n\nDocumentation\n-------------\n\n- The authorization chapter of the ZODB Wiki Tutorial\n  (docs/tutorials/bfgwiki) was changed to demonstrate authorization\n  via a group rather than via a direct username (thanks to Alex\n  Marandon).\n\n- The authorization chapter of the SQLAlchemy Wiki Tutorial\n  (docs/tutorials/bfgwiki2) was changed to demonstrate authorization\n  via a group rather than via a direct username.\n\n- Redirect requests for tutorial sources to\n  https://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki/index.html and\n  https://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/index.html respectively.\n\n- A section named ``Custom Route Predicates`` was added to the URL\n  Dispatch narrative chapter.\n\n- The Static Resources chapter has been updated to mention using\n  ``static_url`` to generate URLs to external webservers.\n\nInternal\n--------\n\n- Removed ``repoze.bfg.static.StaticURLFactory`` in favor of a new\n  abstraction revolving around the (still-internal)\n  ``repoze.bfg.static.StaticURLInfo`` helper class.\n\n1.3a3 (2010-05-01)\n==================\n\nPaster Templates\n----------------\n\n- The ``bfg_alchemy`` and ``bfg_routesalchemy`` templates no longer\n  register a ``handle_teardown`` event listener which calls\n  ``DBSession.remove``.  This was found by Chris Withers to be\n  unnecessary.\n\nDocumentation\n-------------\n\n- The \"bfgwiki2\" (URL dispatch wiki) tutorial code and documentation\n  was changed to remove the ``handle_teardown`` event listener which\n  calls ``DBSession.remove``.\n\n- Any mention of the ``handle_teardown`` event listener as used by the\n  paster templates was removed from the URL Dispatch narrative chapter.\n\n- A section entitled Detecting Available Languages was added to the\n  i18n narrative docs chapter.\n\n1.3a2 (2010-04-28)\n==================\n\nFeatures\n--------\n\n- A locale negotiator no longer needs to be registered explicitly. The\n  default locale negotiator at\n  ``repoze.bfg.i18n.default_locale_negotiator`` is now used\n  unconditionally as... um, the default locale negotiator.\n\n- The default locale negotiator has become more complex.\n\n  * First, the negotiator looks for the ``_LOCALE_`` attribute of\n    the request object (possibly set by a view or an event listener).\n  \n  * Then it looks for the ``request.params['_LOCALE_']`` value.\n\n  * Then it looks for the ``request.cookies['_LOCALE_']`` value.\n\nBackwards Incompatibilities\n---------------------------\n\n- The default locale negotiator now looks for the parameter named\n  ``_LOCALE_`` rather than a parameter named ``locale`` in\n  ``request.params``.\n\nBehavior Changes\n----------------\n\n- A locale negotiator may now return ``None``, signifying that the\n  default locale should be used.\n\nDocumentation\n-------------\n\n- Documentation concerning locale negotiation in the\n  Internationalizationa and Localization chapter was updated.\n\n- Expanded portion of i18n narrative chapter docs which discuss\n  working with gettext files.\n\n1.3a1 (2010-04-26)\n==================\n\nFeatures\n--------\n\n- Added \"exception views\".  When you use an exception (anything that\n  inherits from the Python ``Exception`` builtin) as view context\n  argument, e.g.::\n\n      from repoze.bfg.view import bfg_view\n      from repoze.bfg.exceptions import NotFound\n      from webob.exc import HTTPNotFound\n\n      @bfg_view(context=NotFound)\n      def notfound_view(request):\n          return HTTPNotFound()\n\n  For the above example, when the ``repoze.bfg.exceptions.NotFound``\n  exception is raised by any view or any root factory, the\n  ``notfound_view`` view callable will be invoked and its response\n  returned.\n\n  Other normal view predicates can also be used in combination with an\n  exception view registration::\n\n      from repoze.bfg.view import bfg_view\n      from repoze.bfg.exceptions import NotFound\n      from webob.exc import HTTPNotFound\n\n      @bfg_view(context=NotFound, route_name='home')\n      def notfound_view(request):\n          return HTTPNotFound()\n\n  The above exception view names the ``route_name`` of ``home``,\n  meaning that it will only be called when the route matched has a\n  name of ``home``.  You can therefore have more than one exception\n  view for any given exception in the system: the \"most specific\" one\n  will be called when the set of request circumstances which match the\n  view registration.  The only predicate that cannot be not be used\n  successfully is ``name``.  The name used to look up an exception\n  view is always the empty string.\n\n  Existing (pre-1.3) normal views registered against objects\n  inheriting from ``Exception`` will continue to work.  Exception\n  views used for user-defined exceptions and system exceptions used as\n  contexts will also work.\n\n  The feature can be used with any view registration mechanism\n  (``@bfg_view`` decorator, ZCML, or imperative ``config.add_view``\n  styles).\n\n  This feature was kindly contributed by Andrey Popp.\n\n- Use \"Venusian\" (`https://docs.pylonsproject.org/projects/venusian/en/latest/\n  <https://docs.pylonsproject.org/projects/venusian/en/latest/>`_) to perform ``bfg_view``\n  decorator scanning rather than relying on a BFG-internal decorator\n  scanner.  (Truth be told, Venusian is really just a generalization\n  of the BFG-internal decorator scanner).\n\n- Internationalization and localization features as documented in the\n  narrative documentation chapter entitled ``Internationalization and\n  Localization``.\n\n- A new deployment setting named ``default_locale_name`` was added.\n  If this string is present as a Paster ``.ini`` file option, it will\n  be considered the default locale name.  The default locale name is\n  used during locale-related operations such as language translation.\n\n- It is now possible to turn on Chameleon template \"debugging mode\"\n  for all Chameleon BFG templates by setting a BFG-related Paster\n  ``.ini`` file setting named ``debug_templates``. The exceptions\n  raised by Chameleon templates when a rendering fails are sometimes\n  less than helpful.  ``debug_templates`` allows you to configure your\n  application development environment so that exceptions generated by\n  Chameleon during template compilation and execution will contain\n  more helpful debugging information.  This mode is on by default in\n  all new projects.\n\n- Add a new method of the Configurator named ``derive_view`` which can\n  be used to generate a BFG view callable from a user-supplied\n  function, instance, or class. This useful for external framework and\n  plugin authors wishing to wrap callables supplied by their users\n  which follow the same calling conventions and response conventions\n  as objects that can be supplied directly to BFG as a view callable.\n  See the ``derive_view`` method in the\n  ``repoze.bfg.configuration.Configurator`` docs.\n\nZCML\n----\n\n- Add a ``translationdir`` ZCML directive to support localization.\n\n- Add a ``localenegotiator`` ZCML directive to support localization.\n\nDeprecations\n------------\n\n-  The exception views feature replaces the need for the\n   ``set_notfound_view`` and ``set_forbidden_view`` methods of the\n   ``Configurator`` as well as the ``notfound`` and ``forbidden`` ZCML\n   directives.  Those methods and directives will continue to work for\n   the foreseeable future, but they are deprecated in the\n   documentation.\n\nDependencies\n------------\n\n- A new install-time dependency on the ``venusian`` distribution was\n  added.\n\n- A new install-time dependency on the ``translationstring``\n  distribution was added.\n\n- Chameleon 1.2.3 or better is now required (internationalization and\n  per-template debug settings).\n\nInternal\n--------\n\n- View registrations and lookups are now done with three \"requires\"\n  arguments instead of two to accommodate orthogonality of exception\n  views.\n\n- The ``repoze.bfg.interfaces.IForbiddenView`` and\n  ``repoze.bfg.interfaces.INotFoundView`` interfaces were removed;\n  they weren't APIs and they became vestigial with the addition of\n  exception views.\n\n- Remove ``repoze.bfg.compat.pkgutil_26.py`` and import alias\n  ``repoze.bfg.compat.walk_packages``.  These were only required by\n  internal scanning machinery; Venusian replaced the internal scanning\n  machinery, so these are no longer required.\n\nDocumentation\n-------------\n\n- Exception view documentation was added to the ``Hooks`` narrative\n  chapter.\n\n- A new narrative chapter entitled ``Internationalization and\n  Localization`` was added.\n\n- The \"Environment Variables and ``ini`` File Settings\" chapter was\n  changed: documentation about the ``default_locale_name`` setting was\n  added.\n\n- A new API chapter for the ``repoze.bfg.i18n`` module was added.\n\n- Documentation for the new ``translationdir`` and\n  ``localenegotiator`` ZCML directives were added.\n\n- A section was added to the Templates chapter entitled \"Nicer\n  Exceptions in Templates\" describing the result of setting\n  ``debug_templates = true``.\n\nPaster Templates\n----------------\n\n- All paster templates now create a ``setup.cfg`` which includes\n  commands related to nose testing and Babel message catalog\n  extraction/compilation.\n\n- A ``default_locale_name = en`` setting was added to each existing paster\n  template.\n\n- A ``debug_templates = true`` setting was added to each existing\n  paster template.\n\nLicensing\n---------\n\n- The Edgewall (BSD) license was added to the LICENSES.txt file, as\n  some code in the ``repoze.bfg.i18n`` derives from Babel source.\n\n1.2 (2010-02-10)\n================\n\n- No changes from 1.2b6.\n\n1.2b6 (2010-02-06)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- Remove magical feature of ``repoze.bfg.url.model_url`` which\n  prepended a fully-expanded urldispatch route URL before a the\n  model's path if it was noticed that the request had matched a route.\n  This feature was ill-conceived, and didn't work in all scenarios.\n\nBug Fixes\n---------\n\n- More correct conversion of provided ``renderer`` values to resource\n  specification values (internal).\n\n1.2b5 (2010-02-04)\n==================\n\nBug Fixes\n---------\n\n- 1.2b4 introduced a bug whereby views added via a route configuration\n  that named a view callable and also a ``view_attr`` became broken.\n  Symptom: ``MyViewClass is not callable`` or the ``__call__`` of a\n  class was being called instead of the method named via\n  ``view_attr``.\n\n- Fix a bug whereby a ``renderer`` argument to the ``@bfg_view``\n  decorator that provided a package-relative template filename might\n  not have been resolved properly.  Symptom: inappropriate ``Missing\n  template resource`` errors.\n\n1.2b4 (2010-02-03)\n==================\n\nDocumentation\n-------------\n\n- Update GAE tutorial to use Chameleon instead of Jinja2 (now that\n  it's possible).\n\nBug Fixes\n---------\n\n- Ensure that ``secure`` flag for AuthTktAuthenticationPolicy\n  constructor does what it's documented to do (merge Daniel Holth's\n  fancy-cookies-2 branch).\n\nFeatures\n--------\n\n- Add ``path`` and ``http_only`` options to\n  AuthTktAuthenticationPolicy constructor (merge Daniel Holth's\n  fancy-cookies-2 branch).\n\nBackwards Incompatibilities\n---------------------------\n\n- Remove ``view_header``, ``view_accept``, ``view_xhr``,\n  ``view_path_info``, ``view_request_method``, ``view_request_param``,\n  and ``view_containment`` predicate arguments from the\n  ``Configurator.add_route`` argument list.  These arguments were\n  speculative.  If you need the features exposed by these arguments,\n  add a view associated with a route using the ``route_name`` argument\n  to the ``add_view`` method instead.\n\n- Remove ``view_header``, ``view_accept``, ``view_xhr``,\n  ``view_path_info``, ``view_request_method``, ``view_request_param``,\n  and ``view_containment`` predicate arguments from the ``route`` ZCML\n  directive attribute set.  These attributes were speculative.  If you\n  need the features exposed by these attributes, add a view associated\n  with a route using the ``route_name`` attribute of the ``view`` ZCML\n  directive instead.\n\nDependencies\n------------\n\n- Remove dependency on ``sourcecodegen`` (not depended upon by\n  Chameleon 1.1.1+).\n\n1.2b3 (2010-01-24)\n==================\n\nBug Fixes\n---------\n\n- When \"hybrid mode\" (both traversal and urldispatch) is in use,\n  default to finding route-related views even if a non-route-related\n  view registration has been made with a more specific context.  The\n  default used to be to find views with a more specific context first.\n  Use the new ``use_global_views`` argument to the route definition to\n  get back the older behavior.\n\nFeatures\n--------\n\n- Add ``use_global_views`` argument to ``add_route`` method of\n  Configurator.  When this argument is true, views registered for *no*\n  route will be found if no more specific view related to the route is\n  found.\n\n- Add ``use_global_views`` attribute to ZCML ``<route>`` directive\n  (see above).\n\nInternal\n--------\n\n- When registering a view, register the view adapter with the\n  \"requires\" interfaces as ``(request_type, context_type)`` rather\n  than ``(context_type, request_type)``.  This provides for saner\n  lookup, because the registration will always be made with a specific\n  request interface, but registration may not be made with a specific\n  context interface.  In general, when creating multiadapters, you\n  want to order the requires interfaces so that the elements which\n  are more likely to be registered using specific interfaces are\n  ordered before those which are less likely.\n\n1.2b2 (2010-01-21)\n==================\n\nBug Fixes\n---------\n\n- When the ``Configurator`` is passed an instance of\n  ``zope.component.registry.Components`` as a ``registry`` constructor\n  argument, fix the instance up to have the attributes we expect of an\n  instance of ``repoze.bfg.registry.Registry`` when ``setup_registry``\n  is called.  This makes it possible to use the global Zope component\n  registry as a BFG application registry.\n\n- When WebOb 0.9.7.1 was used, a deprecation warning was issued for\n  the class attribute named ``charset`` within\n  ``repoze.bfg.request.Request``.  BFG now *requires* WebOb >= 0.9.7,\n  and code was added so that this deprecation warning has disappeared.\n\n- Fix a view lookup ordering bug whereby a view with a larger number\n  of predicates registered first (literally first, not \"earlier\") for\n  a triad would lose during view lookup to one registered with fewer.\n\n- Make sure views with exactly N custom predicates are always called\n  before views with exactly N non-custom predicates given all else is\n  equal in the view configuration.\n\nDocumentation\n-------------\n\n- Change renderings of ZCML directive documentation.\n\n- Add a narrative documentation chapter: \"Using the Zope Component\n  Architecture in repoze.bfg\".\n\nDependencies\n------------\n\n- Require WebOb >= 0.9.7\n\n1.2b1 (2010-01-18)\n==================\n\nBug Fixes\n---------\n\n- In ``bfg_routesalchemy``, ``bfg_alchemy`` paster templates and the\n  ``bfgwiki2`` tutorial, clean up the SQLAlchemy connection by\n  registering a ``repoze.tm.after_end`` callback instead of relying on\n  a ``__del__`` method of a ``Cleanup`` class added to the WSGI\n  environment.  The ``__del__`` strategy was fragile and caused\n  problems in the wild.  Thanks to Daniel Holth for testing.\n\nFeatures\n--------\n\n- Read logging configuration from PasteDeploy config file ``loggers``\n  section (and related) when ``paster bfgshell`` is invoked.\n\nDocumentation\n-------------\n\n- Major rework in preparation for book publication.\n\n1.2a11 (2010-01-05)\n===================\n\nBug Fixes\n---------\n\n- Make ``paster bfgshell`` and ``paster create -t bfg_xxx`` work on\n  Jython (fix minor incompatibility with treatment of ``__doc__`` at\n  the class level).\n\n- Updated dependency on ``WebOb`` to require a version which supports\n  features now used in tests.\n\nFeatures\n--------\n\n- Jython compatibility (at least when repoze.bfg.jinja2 is used as the\n  templating engine; Chameleon does not work under Jython).\n\n- Show the derived abspath of template resource specifications in the\n  traceback when a renderer template cannot be found.\n\n- Show the original traceback when a Chameleon template cannot be\n  rendered due to a platform incompatibility.\n\n1.2a10 (2010-01-04)\n===================\n\nFeatures\n--------\n\n- The ``Configurator.add_view`` method now accepts an argument named\n  ``context``.  This is an alias for the older argument named\n  ``for_``; it is preferred over ``for_``, but ``for_`` will continue\n  to be supported \"forever\".\n\n- The ``view`` ZCML directive now accepts an attribute named\n  ``context``.  This is an alias for the older attribute named\n  ``for``; it is preferred over ``for``, but ``for`` will continue to\n  be supported \"forever\".\n\n- The ``Configurator.add_route`` method now accepts an argument named\n  ``view_context``.  This is an alias for the older argument named\n  ``view_for``; it is preferred over ``view_for``, but ``view_for``\n  will continue to be supported \"forever\".\n\n- The ``route`` ZCML directive now accepts an attribute named\n  ``view_context``.  This is an alias for the older attribute named\n  ``view_for``; it is preferred over ``view_for``, but ``view_for``\n  will continue to be supported \"forever\".\n\nDocumentation and Paster Templates\n----------------------------------\n\n- LaTeX rendering tweaks.\n\n- All uses of the ``Configurator.add_view`` method that used its\n  ``for_`` argument now use the ``context`` argument instead.\n\n- All uses of the ``Configurator.add_route`` method that used its\n  ``view_for`` argument now use the ``view_context`` argument instead.\n\n- All uses of the ``view`` ZCML directive that used its ``for``\n  attribute now use the ``context`` attribute instead.\n\n- All uses of the ``route`` ZCML directive that used its ``view_for``\n  attribute now use the ``view_context`` attribute instead.\n\n- Add a (minimal) tutorial dealing with use of ``repoze.catalog`` in a\n  ``repoze.bfg`` application.\n\nDocumentation Licensing\n-----------------------\n\n- Loosen the documentation licensing to allow derivative works: it is\n  now offered under the `Creative Commons\n  Attribution-Noncommercial-Share Alike 3.0 United States License\n  <https://creativecommons.org/licenses/by-nc-sa/3.0/us/>`_.  This is\n  only a documentation licensing change; the ``repoze.bfg`` software\n  continues to be offered under the Repoze Public License at\n  https://web.archive.org/web/20190401024809/http://repoze.org/license.html (BSD-like).\n\n1.2a9 (2009-12-27)\n==================\n\nDocumentation Licensing\n-----------------------\n\n- The *documentation* (the result of ``make <html|latex|htmlhelp>``\n  within the ``docs`` directory) in this release is now offered under\n  the Creative Commons Attribution-Noncommercial-No Derivative Works\n  3.0 United States License as described by\n  https://creativecommons.org/licenses/by-nc-nd/3.0/us/ .  This is only\n  a licensing change for the documentation; the ``repoze.bfg``\n  software continues to be offered under the Repoze Public License\n  at https://web.archive.org/web/20190401024809/http://repoze.org/license.html (BSD-like).\n\nDocumentation\n-------------\n\n- Added manual index entries to generated index.\n\n- Document the previously existing (but non-API)\n  ``repoze.bfg.configuration.Configurator.setup_registry`` method as\n  an official API of a ``Configurator``.\n\n- Fix syntax errors in various documentation code blocks.\n\n- Created new top-level documentation section: \"ZCML Directives\".\n  This section contains detailed ZCML directive information, some of\n  which was removed from various narrative chapters.\n\n- The LaTeX rendering of the documentation has been improved.\n\n- Added a \"Fore-Matter\" section with author, copyright, and licensing\n  information.\n\n1.2a8 (2009-12-24)\n==================\n\nFeatures\n--------\n\n- Add a ``**kw`` arg to the ``Configurator.add_settings`` API.\n\n- Add ``hook_zca`` and ``unhook_zca`` methods to the ``Configurator``\n  API.\n\n- The ``repoze.bfg.testing.setUp`` method now returns a\n  ``Configurator`` instance which can be used to do further\n  configuration during unit tests.\n\nBug Fixes\n---------\n\n- The ``json`` renderer failed to set the response content type to\n  ``application/json``.  It now does, by setting\n  ``request.response_content_type`` unless this attribute is already\n  set.\n\n- The ``string`` renderer failed to set the response content type to\n  ``text/plain``.  It now does, by setting\n  ``request.response_content_type`` unless this attribute is already\n  set.\n\nDocumentation\n-------------\n\n- General documentation improvements by using better Sphinx roles such\n  as \"class\", \"func\", \"meth\", and so on.  This means that there are\n  many more hyperlinks pointing to API documentation for API\n  definitions in all narrative, tutorial, and API documentation\n  elements.\n\n- Added a description of imperative configuration in various places\n  which only described ZCML configuration.\n\n- A syntactical refreshing of various tutorials.\n\n- Added the ``repoze.bfg.authentication``,\n  ``repoze.bfg.authorization``, and ``repoze.bfg.interfaces`` modules\n  to API documentation.\n\nDeprecations\n------------\n\n- The ``repoze.bfg.testing.registerRoutesMapper`` API (added in an\n  early 1.2 alpha) was deprecated.  Its import now generates a\n  deprecation warning.\n\n1.2a7 (2009-12-20)\n==================\n\nFeatures\n--------\n\n- Add four new testing-related APIs to the\n  ``repoze.bfg.configuration.Configurator`` class:\n  ``testing_securitypolicy``, ``testing_models``,\n  ``testing_add_subscriber``, and ``testing_add_template``.  These\n  were added in order to provide more direct access to the\n  functionality of the ``repoze.bfg.testing`` APIs named\n  ``registerDummySecurityPolicy``, ``registerModels``,\n  ``registerEventListener``, and ``registerTemplateRenderer`` when a\n  configurator is used.  The ``testing`` APIs named are nominally\n  deprecated (although they will likely remain around \"forever\", as\n  they are in heavy use in the wild).\n\n- Add a new API to the ``repoze.bfg.configuration.Configurator``\n  class: ``add_settings``.  This API can be used to add \"settings\"\n  (information returned within via the\n  ``repoze.bfg.settings.get_settings`` API) after the configurator has\n  been initially set up.  This is most useful for testing purposes.\n\n- Add a ``custom_predicates`` argument to the ``Configurator``\n  ``add_view`` method, the ``bfg_view`` decorator and the attribute\n  list of the ZCML ``view`` directive.  If ``custom_predicates`` is\n  specified, it must be a sequence of predicate callables (a predicate\n  callable accepts two arguments: ``context`` and ``request`` and\n  returns ``True`` or ``False``).  The associated view callable will\n  only be invoked if all custom predicates return ``True``.  Use one\n  or more custom predicates when no existing predefined predicate is\n  useful.  Predefined and custom predicates can be mixed freely.\n\n- Add a ``custom_predicates`` argument to the ``Configurator``\n  ``add_route`` and the attribute list of the ZCML ``route``\n  directive.  If ``custom_predicates`` is specified, it must be a\n  sequence of predicate callables (a predicate callable accepts two\n  arguments: ``context`` and ``request`` and returns ``True`` or\n  ``False``).  The associated route will match will only be invoked if\n  all custom predicates return ``True``, else route matching\n  continues.  Note that the value ``context`` will always be ``None``\n  when passed to a custom route predicate.  Use one or more custom\n  predicates when no existing predefined predicate is useful.\n  Predefined and custom predicates can be mixed freely.\n\nInternal\n--------\n\n- Remove the ``repoze.bfg.testing.registerTraverser`` function.  This\n  function was never an API.\n\nDocumentation\n-------------\n\n- Doc-deprecated most helper functions in the ``repoze.bfg.testing``\n  module.  These helper functions likely won't be removed any time\n  soon, nor will they generate a warning any time soon, due to their\n  heavy use in the wild, but equivalent behavior exists in methods of\n  a Configurator.\n\n1.2a6 (2009-12-18)\n==================\n\nFeatures\n--------\n\n- The ``Configurator`` object now has two new methods: ``begin`` and\n  ``end``.  The ``begin`` method is meant to be called before any\n  \"configuration\" begins (e.g. before ``add_view``, et. al are\n  called).  The ``end`` method is meant to be called after all\n  \"configuration\" is complete.\n\n  Previously, before there was imperative configuration at all (1.1\n  and prior), configuration begin and end was invariably implied by\n  the process of loading a ZCML file.  When a ZCML load happened, the\n  threadlocal data structure containing the request and registry was\n  modified before the load, and torn down after the load, making sure\n  that all framework code that needed ``get_current_registry`` for the\n  duration of the ZCML load was satisfied.\n\n  Some API methods called during imperative configuration, (such as\n  ``Configurator.add_view`` when a renderer is involved) end up for\n  historical reasons calling ``get_current_registry``.  However, in\n  1.2a5 and below, the Configurator supplied no functionality that\n  allowed people to make sure that ``get_current_registry`` returned\n  the registry implied by the configurator being used.  ``begin`` now\n  serves this purpose.  Inversely, ``end`` pops the thread local\n  stack, undoing the actions of ``begin``.\n\n  We make this boundary explicit to reduce the potential for confusion\n  when the configurator is used in different circumstances (e.g. in\n  unit tests and app code vs. just in initial app setup).\n\n  Existing code written for 1.2a1-1.2a5 which does not call ``begin``\n  or ``end`` continues to work in the same manner it did before.  It\n  is however suggested that this code be changed to call ``begin`` and\n  ``end`` to reduce the potential for confusion in the future.\n\n- All ``paster`` templates which generate an application skeleton now\n  make use of the new ``begin`` and ``end`` methods of the\n  Configurator they use in their respective copies of ``run.py`` and\n  ``tests.py``.\n\nDocumentation\n-------------\n\n- All documentation that makes use of a ``Configurator`` object to do\n  application setup and test setup now makes use of the new ``begin``\n  and ``end`` methods of the configurator.\n\nBug Fixes\n---------\n\n- When a ``repoze.bfg.exceptions.NotFound`` or\n  ``repoze.bfg.exceptions.Forbidden`` *class* (as opposed to instance)\n  was raised as an exception within a root factory (or route root\n  factory), the exception would not be caught properly by the\n  ``repoze.bfg.`` Router and it would propagate to up the call stack,\n  as opposed to rendering the not found view or the forbidden view as\n  would have been expected.\n\n- When Chameleon page or text templates used as renderers were added\n  imperatively (via ``Configurator.add_view`` or some derivative),\n  they too-eagerly attempted to look up the ``reload_templates``\n  setting via ``get_settings``, meaning they were always registered in\n  non-auto-reload-mode (the default).  Each now waits until its\n  respective ``template`` attribute is accessed to look up the value.\n\n- When a route with the same name as a previously registered route was\n  added, the old route was not removed from the mapper's routelist.\n  Symptom: the old registered route would be used (and possibly\n  matched) during route lookup when it should not have had a chance to\n  ever be used.\n\n1.2a5 (2009-12-10)\n==================\n\nFeatures\n--------\n\n- When the ``repoze.bfg.exceptions.NotFound`` or\n  ``repoze.bfg.exceptions.Forbidden`` error is raised from within a\n  custom root factory or the ``factory`` of a route, the appropriate\n  response is now sent to the requesting user agent (the result of the\n  notfound view or the forbidden view, respectively).  When these\n  errors are raised from within a root factory, the ``context`` passed\n  to the notfound or forbidden view will be ``None``.  Also, the\n  request will not be decorated with ``view_name``, ``subpath``,\n  ``context``, etc. as would normally be the case if traversal had\n  been allowed to take place.\n\nInternals\n---------\n\n- The exception class representing the error raised by various methods\n  of a ``Configurator`` is now importable as\n  ``repoze.bfg.exceptions.ConfigurationError``.\n\nDocumentation\n-------------\n\n- General documentation freshening which takes imperative\n  configuration into account in more places and uses glossary\n  references more liberally.\n\n- Remove explanation of changing the request type in a new request\n  event subscriber, as other predicates are now usually an easier way\n  to get this done.\n\n- Added \"Thread Locals\" narrative chapter to documentation, and added\n  a API chapter documenting the ``repoze.bfg.threadlocals`` module.\n\n- Added a \"Special Exceptions\" section to the \"Views\" narrative\n  documentation chapter explaining the effect of raising\n  ``repoze.bfg.exceptions.NotFound`` and\n  ``repoze.bfg.exceptions.Forbidden`` from within view code.\n\nDependencies\n------------\n\n- A new dependency on the ``twill`` package was added to the\n  ``setup.py`` ``tests_require`` argument (Twill will only be\n  downloaded when ``repoze.bfg`` ``setup.py test`` or ``setup.py\n  nosetests`` is invoked).\n\n1.2a4 (2009-12-07)\n==================\n\nFeatures\n--------\n\n- ``repoze.bfg.testing.DummyModel`` now accepts a new constructor\n  keyword argument: ``__provides__``.  If this constructor argument is\n  provided, it should be an interface or a tuple of interfaces.  The\n  resulting model will then provide these interfaces (they will be\n  attached to the constructed model via\n  ``zope.interface.alsoProvides``).\n\nBug Fixes\n---------\n\n- Operation on GAE was broken, presumably because the\n  ``repoze.bfg.configuration`` module began to attempt to import the\n  ``repoze.bfg.chameleon_zpt`` and ``repoze.bfg.chameleon_text``\n  modules, and these cannot be used on non-CPython platforms.  It now\n  tolerates startup time import failures for these modules, and only\n  raise an import error when a template from one of these packages is\n  actually used.\n\n1.2a3 (2009-12-02)\n==================\n\nBug Fixes\n---------\n\n- The ``repoze.bfg.url.route_url`` function inappropriately passed\n  along ``_query`` and/or ``_anchor`` arguments to the\n  ``mapper.generate`` function, resulting in blowups.\n\n- When two views were registered with differering ``for`` interfaces\n  or classes, and the ``for`` of first view registered was a\n  superclass of the second, the ``repoze.bfg`` view machinery would\n  incorrectly associate the two views with the same \"multiview\".\n  Multiviews are meant to be collections of views that have *exactly*\n  the same for/request/viewname values, without taking inheritance\n  into account.  Symptom: wrong view callable found even when you had\n  correctly specified a ``for_`` interface/class during view\n  configuration for one or both view configurations.\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``repoze.bfg.templating`` module has been removed; it had been\n  deprecated in 1.1 and never actually had any APIs in it.\n\n1.2a2 (2009-11-29)\n==================\n\nBug Fixes\n---------\n\n- The long description of this package (as shown on PyPI) was not\n  valid reStructuredText, and so was not renderable.\n\n- Trying to use an HTTP method name string such as ``GET`` as a\n  ``request_type`` predicate argument caused a startup time failure\n  when it was encountered in imperative configuration or in a\n  decorator (symptom: ``Type Error: Required specification must be a\n  specification``).  This now works again, although ``request_method``\n  is now the preferred predicate argument for associating a view\n  configuration with an HTTP request method.\n\nDocumentation\n-------------\n\n- Fixed \"Startup\" narrative documentation chapter; it was explaining\n  \"the old way\" an application constructor worked.\n\n1.2a1 (2009-11-28)\n==================\n\nFeatures\n--------\n\n- An imperative configuration mode.\n\n  A ``repoze.bfg`` application can now begin its life as a single\n  Python file.  Later, the application might evolve into a set of\n  Python files in a package.  Even later, it might start making use of\n  other configuration features, such as ``ZCML``.  But neither the use\n  of a package nor the use of non-imperative configuration is required\n  to create a simple ``repoze.bfg`` application any longer.\n\n  Imperative configuration makes ``repoze.bfg`` competitive with\n  \"microframeworks\" such as `Bottle <https://bottlepy.org/docs/dev/>`_ and\n  `Tornado <https://www.tornadoweb.org/en/stable/>`_.  ``repoze.bfg`` has a good\n  deal of functionality that most microframeworks lack, so this is\n  hopefully a \"best of both worlds\" feature.\n\n  The simplest possible ``repoze.bfg`` application is now::\n\n     from webob import Response\n     from wsgiref import simple_server\n     from repoze.bfg.configuration import Configurator\n\n     def hello_world(request):\n         return Response('Hello world!')\n\n     if __name__ == '__main__':\n         config = Configurator()\n         config.add_view(hello_world)\n         app = config.make_wsgi_app()\n         simple_server.make_server('', 8080, app).serve_forever()\n\n- A new class now exists: ``repoze.bfg.configuration.Configurator``.\n  This class forms the basis for sharing machinery between\n  \"imperatively\" configured applications and traditional\n  declaratively-configured applications.\n\n- The ``repoze.bfg.testing.setUp`` function now accepts three extra\n  optional keyword arguments: ``registry``, ``request`` and\n  ``hook_zca``.\n\n  If the ``registry`` argument is not ``None``, the argument will be\n  treated as the registry that is set as the \"current registry\" (it\n  will be returned by ``repoze.bfg.threadlocal.get_current_registry``)\n  for the duration of the test.  If the ``registry`` argument is\n  ``None`` (the default), a new registry is created and used for the\n  duration of the test.\n\n  The value of the ``request`` argument is used as the \"current\n  request\" (it will be returned by\n  ``repoze.bfg.threadlocal.get_current_request``) for the duration of\n  the test; it defaults to ``None``.\n\n  If ``hook_zca`` is ``True`` (the default), the\n  ``zope.component.getSiteManager`` function will be hooked with a\n  function that returns the value of ``registry`` (or the\n  default-created registry if ``registry`` is ``None``) instead of the\n  registry returned by ``zope.component.getGlobalSiteManager``,\n  causing the Zope Component Architecture API (``getSiteManager``,\n  ``getAdapter``, ``getUtility``, and so on) to use the testing\n  registry instead of the global ZCA registry.\n\n- The ``repoze.bfg.testing.tearDown`` function now accepts an\n  ``unhook_zca`` argument.  If this argument is ``True`` (the\n  default), ``zope.component.getSiteManager.reset()`` will be called.\n  This will cause the result of the ``zope.component.getSiteManager``\n  function to be the global ZCA registry (the result of\n  ``zope.component.getGlobalSiteManager``) once again.\n\n- The ``run.py`` module in various ``repoze.bfg`` ``paster`` templates\n  now use a ``repoze.bfg.configuration.Configurator`` class instead of\n  the (now-legacy) ``repoze.bfg.router.make_app`` function to produce\n  a WSGI application.\n\nDocumentation\n-------------\n\n- The documentation now uses the \"request-only\" view calling\n  convention in most examples (as opposed to the ``context, request``\n  convention).  This is a documentation-only change; the ``context,\n  request`` convention is also supported and documented, and will be\n  \"forever\".\n\n- ``repoze.bfg.configuration`` API documentation has been added.\n\n- A narrative documentation chapter entitled \"Creating Your First\n  ``repoze.bfg`` Application\" has been added.  This chapter details\n  usage of the new ``repoze.bfg.configuration.Configurator`` class,\n  and demonstrates a simplified \"imperative-mode\" configuration; doing\n  ``repoze.bfg`` application configuration imperatively was previously\n  much more difficult.\n\n- A narrative documentation chapter entitled \"Configuration,\n  Decorations and Code Scanning\" explaining ZCML- vs. imperative-\n  vs. decorator-based configuration equivalence.\n\n- The \"ZCML Hooks\" chapter has been renamed to \"Hooks\"; it documents\n  how to override hooks now via imperative configuration and ZCML.\n\n- The explanation about how to supply an alternate \"response factory\"\n  has been removed from the \"Hooks\" chapter.  This feature may be\n  removed in a later release (it still works now, it's just not\n  documented).\n\n- Add a section entitled \"Test Set Up and Tear Down\" to the\n  unittesting chapter.\n\nBug Fixes\n----------\n\n- The ACL authorization policy debugging output when\n  ``debug_authorization`` console debugging output was turned on\n  wasn't as clear as it could have been when a view execution was\n  denied due to an authorization failure resulting from the set of\n  principals passed never having matched any ACE in any ACL in the\n  lineage.  Now in this case, we report ``<default deny>`` as the ACE\n  value and either the root ACL or ``<No ACL found on any object in\n  model lineage>`` if no ACL was found.\n\n- When two views were registered with the same ``accept`` argument,\n  but were otherwise registered with the same arguments, if a request\n  entered the application which had an ``Accept`` header that accepted\n  *either* of the media types defined by the set of views registered\n  with predicates that otherwise matched, a more or less \"random\" one\n  view would \"win\".  Now, we try harder to use the view callable\n  associated with the view configuration that has the most specific\n  ``accept`` argument.  Thanks to Alberto Valverde for an initial\n  patch.\n\nInternals\n---------\n\n- The routes mapper is no longer a root factory wrapper.  It is now\n  consulted directly by the router.\n\n- The ``repoze.bfg.registry.make_registry`` callable has been removed.\n\n- The ``repoze.bfg.view.map_view`` callable has been removed.\n\n- The ``repoze.bfg.view.owrap_view`` callable has been removed.\n\n- The ``repoze.bfg.view.predicate_wrap`` callable has been removed.\n\n- The ``repoze.bfg.view.secure_view`` callable has been removed.\n\n- The ``repoze.bfg.view.authdebug_view`` callable has been removed.\n\n- The ``repoze.bfg.view.renderer_from_name`` callable has been\n  removed.  Use ``repoze.bfg.configuration.Configurator.renderer_from_name``\n  instead (still not an API, however).\n\n- The ``repoze.bfg.view.derive_view`` callable has been removed.  Use\n  ``repoze.bfg.configuration.Configurator.derive_view`` instead (still\n  not an API, however).\n\n- The ``repoze.bfg.settings.get_options`` callable has been removed.\n  Its job has been subsumed by the ``repoze.bfg.settings.Settings``\n  class constructor.\n\n- The ``repoze.bfg.view.requestonly`` function has been moved to\n  ``repoze.bfg.configuration.requestonly``.\n\n- The ``repoze.bfg.view.rendered_response`` function has been moved to\n  ``repoze.bfg.configuration.rendered_response``.\n\n- The ``repoze.bfg.view.decorate_view`` function has been moved to\n  ``repoze.bfg.configuration.decorate_view``.\n\n- The ``repoze.bfg.view.MultiView`` class has been moved to\n  ``repoze.bfg.configuration.MultiView``.\n\n- The ``repoze.bfg.zcml.Uncacheable`` class has been removed.\n\n- The ``repoze.bfg.resource.resource_spec`` function has been removed.\n\n- All ZCML directives which deal with attributes which are paths now\n  use the ``path`` method of the ZCML context to resolve a relative\n  name to an absolute one (imperative configuration requirement).\n\n- The ``repoze.bfg.scripting.get_root`` API now uses a 'real' WebOb\n  request rather than a FakeRequest when it sets up the request as a\n  threadlocal.\n\n- The ``repoze.bfg.traversal.traverse`` API now uses a 'real' WebOb\n  request rather than a FakeRequest when it calls the traverser.\n\n- The ``repoze.bfg.request.FakeRequest`` class has been removed.\n\n- Most uses of the ZCA threadlocal API (the ``getSiteManager``,\n  ``getUtility``, ``getAdapter``, ``getMultiAdapter`` threadlocal API)\n  have been removed from the core.  Instead, when a threadlocal is\n  necessary, the core uses the\n  ``repoze.bfg.threadlocal.get_current_registry`` API to obtain the\n  registry.\n\n- The internal ILogger utility named ``repoze.bfg.debug`` is now just\n  an IDebugLogger unnamed utility.  A named utility with the old name\n  is registered for b/w compat.\n\n- The ``repoze.bfg.interfaces.ITemplateRendererFactory`` interface was\n  removed; it has become unused.\n\n- Instead of depending on the ``martian`` package to do code scanning,\n  we now just use our own scanning routines.\n\n- We now no longer have a dependency on ``repoze.zcml`` package;\n  instead, the ``repoze.bfg`` package includes implementations of the\n  ``adapter``, ``subscriber`` and ``utility`` directives.\n\n- Relating to the following functions:\n\n  ``repoze.bfg.view.render_view``\n\n  ``repoze.bfg.view.render_view_to_iterable``\n\n  ``repoze.bfg.view.render_view_to_response``\n\n  ``repoze.bfg.view.append_slash_notfound_view``\n\n  ``repoze.bfg.view.default_notfound_view``\n\n  ``repoze.bfg.view.default_forbidden_view``\n\n  ``repoze.bfg.configuration.rendered_response``\n\n  ``repoze.bfg.security.has_permission``\n\n  ``repoze.bfg.security.authenticated_userid``\n\n  ``repoze.bfg.security.effective_principals``\n\n  ``repoze.bfg.security.view_execution_permitted``\n\n  ``repoze.bfg.security.remember``\n\n  ``repoze.bfg.security.forget``\n\n  ``repoze.bfg.url.route_url``\n\n  ``repoze.bfg.url.model_url``\n\n  ``repoze.bfg.url.static_url``\n\n  ``repoze.bfg.traversal.virtual_root``\n\n  Each of these functions now expects to be called with a request\n  object that has a ``registry`` attribute which represents the\n  current ``repoze.bfg`` registry.  They fall back to obtaining the\n  registry from the threadlocal API.\n\nBackwards Incompatibilities\n---------------------------\n\n- Unit tests which use ``zope.testing.cleanup.cleanUp`` for the\n  purpose of isolating tests from one another may now begin to fail\n  due to lack of isolation between tests.\n\n  Here's why: In repoze.bfg 1.1 and prior, the registry returned by\n  ``repoze.bfg.threadlocal.get_current_registry`` when no other\n  registry had been pushed on to the threadlocal stack was the\n  ``zope.component.globalregistry.base`` global registry (aka the\n  result of ``zope.component.getGlobalSiteManager()``).  In repoze.bfg\n  1.2+, however, the registry returned in this situation is the new\n  module-scope ``repoze.bfg.registry.global_registry`` object.  The\n  ``zope.testing.cleanup.cleanUp`` function clears the\n  ``zope.component.globalregistry.base`` global registry\n  unconditionally.  However, it does not know about the\n  ``repoze.bfg.registry.global_registry`` object, so it does not clear\n  it.\n\n  If you use the ``zope.testing.cleanup.cleanUp`` function in the\n  ``setUp`` of test cases in your unit test suite instead of using the\n  (more correct as of 1.1) ``repoze.bfg.testing.setUp``, you will need\n  to replace all calls to ``zope.testing.cleanup.cleanUp`` with a call\n  to ``repoze.bfg.testing.setUp``.\n\n  If replacing all calls to ``zope.testing.cleanup.cleanUp`` with a\n  call to ``repoze.bfg.testing.setUp`` is infeasible, you can put this\n  bit of code somewhere that is executed exactly **once** (*not* for\n  each test in a test suite; in the `` __init__.py`` of your package\n  or your package's ``tests`` subpackage would be a reasonable\n  place)::\n\n    import zope.testing.cleanup\n    from repoze.bfg.testing import setUp\n    zope.testing.cleanup.addCleanUp(setUp)\n\n- When there is no \"current registry\" in the\n  ``repoze.bfg.threadlocal.manager`` threadlocal data structure (this\n  is the case when there is no \"current request\" or we're not in the\n  midst of a ``r.b.testing.setUp``-bounded unit test), the ``.get``\n  method of the manager returns a data structure containing a *global*\n  registry.  In previous releases, this function returned the global\n  Zope \"base\" registry: the result of\n  ``zope.component.getGlobalSiteManager``, which is an instance of the\n  ``zope.component.registry.Component`` class.  In this release,\n  however, the global registry returns a globally importable instance\n  of the ``repoze.bfg.registry.Registry`` class.  This registry\n  instance can always be imported as\n  ``repoze.bfg.registry.global_registry``.\n\n  Effectively, this means that when you call\n  ``repoze.bfg.threadlocal.get_current_registry`` when no request or\n  ``setUp`` bounded unit test is in effect, you will always get back\n  the global registry that lives in\n  ``repoze.bfg.registry.global_registry``.  It also means that\n  ``repoze.bfg`` APIs that *call* ``get_current_registry`` will use\n  this registry.\n\n  This change was made because ``repoze.bfg`` now expects the registry\n  it uses to have a slightly different API than a bare instance of\n  ``zope.component.registry.Components``.\n\n- View registration no longer registers a\n  ``repoze.bfg.interfaces.IViewPermission`` adapter (it is no longer\n  checked by the framework; since 1.1, views have been responsible for\n  providing their own security).\n\n- The ``repoze.bfg.router.make_app`` callable no longer accepts the\n  ``authentication_policy`` nor the ``authorization_policy``\n  arguments.  This feature was deprecated in version 1.0 and has been\n  removed.\n\n- Obscure: the machinery which configured views with a\n  ``request_type`` *and* a ``route_name`` would ignore the request\n  interface implied by ``route_name`` registering a view only for the\n  interface implied by ``request_type``.  In the unlikely event that\n  you were trying to use these two features together, the symptom\n  would have been that views that named a ``request_type`` but which\n  were also associated with routes were not found when the route\n  matched.  Now if a view is configured with both a ``request_type``\n  and a ``route_name``, an error is raised.\n\n- The ``route`` ZCML directive now no longer accepts the\n  ``request_type`` or ``view_request_type`` attributes.  These\n  attributes didn't actually work in any useful way (see entry above\n  this one).\n\n- Because the ``repoze.bfg`` package now includes implementations of\n  the ``adapter``, ``subscriber`` and ``utility`` ZCML directives, it\n  is now an error to have ``<include package=\"repoze.zcml\"\n  file=\"meta.zcml\"/>`` in the ZCML of a ``repoze.bfg`` application.  A\n  ZCML conflict error will be raised if your ZCML does so.  This\n  shouldn't be an issue for \"normal\" installations; it has always been\n  the responsibility of the ``repoze.bfg.includes`` ZCML to include\n  this file in the past; it now just doesn't.\n\n- The ``repoze.bfg.testing.zcml_configure`` API was removed.  Use\n  the ``Configurator.load_zcml`` API instead.\n\nDeprecations\n------------\n\n- The ``repoze.bfg.router.make_app`` function is now nominally\n  deprecated.  Its import and usage does not throw a warning, nor will\n  it probably ever disappear.  However, using a\n  ``repoze.bfg.configuration.Configurator`` class is now the preferred\n  way to generate a WSGI application.\n\n  Note that ``make_app`` calls\n  ``zope.component.getSiteManager.sethook(\n  repoze.bfg.threadlocal.get_current_registry)`` on the caller's\n  behalf, hooking ZCA global API lookups, for backwards compatibility\n  purposes.  If you disuse ``make_app``, your calling code will need\n  to perform this call itself, at least if your application uses the\n  ZCA global API (``getSiteManager``, ``getAdapter``, etc).\n\nDependencies\n------------\n\n- A dependency on the ``martian`` package has been removed (its\n  functionality is replaced internally).\n\n- A dependency on the ``repoze.zcml`` package has been removed (its\n  functionality is replaced internally).\n\n1.1.1 (2009-11-21)\n==================\n\nBug Fixes\n---------\n\n- \"Hybrid mode\" applications (applications which explicitly used\n  traversal *after* url dispatch via ``<route>`` paths containing the\n  ``*traverse`` element) were broken in 1.1-final and all 1.1 alpha\n  and beta releases.  Views registered without a ``route_name`` route\n  shadowed views registered with a ``route_name`` inappropriately.\n\n1.1 (2009-11-15)\n================\n\nInternals\n---------\n\n- Remove dead IRouteRequirement interface from ``repoze.bfg.zcml``\n  module.\n\nDocumentation\n-------------\n\n- Improve the \"Extending an Existing Application\" narrative chapter.\n\n- Add more sections to the \"Defending Design\" chapter.\n\n1.1b4 (2009-11-12)\n==================\n\nBug Fixes\n---------\n\n- Use ``alsoProvides`` in the urldispatch module to attach an\n  interface to the request rather than ``directlyProvides`` to avoid\n  disturbing interfaces set in a NewRequest event handler.\n\nDocumentation\n-------------\n\n- Move 1.0.1 and previous changelog to HISTORY.txt.\n\n- Add examples to ``repoze.bfg.url.model_url`` docstring.\n\n- Add \"Defending BFG Design\" chapter to frontpage docs.\n\nTemplates\n---------\n\n- Remove ``ez_setup.py`` and its import from all paster templates,\n  samples, and tutorials for ``distribute`` compatibility.  The\n  documentation already explains how to install virtualenv (which will\n  include some ``setuptools`` package), so these files, imports and\n  usages were superfluous.\n\nDeprecations\n------------\n\n- The ``options`` kw arg to the ``repoze.bfg.router.make_app``\n  function is deprecated.  In its place is the keyword argument\n  ``settings``.  The ``options`` keyword continues to work, and a\n  deprecation warning is not emitted when it is detected.  However,\n  the paster templates, code samples, and documentation now make\n  reference to ``settings`` rather than ``options``.  This\n  change/deprecation was mainly made for purposes of clarity and\n  symmetry with the ``get_settings()`` API and discussions of\n  \"settings\" in various places in the docs: we want to use the same\n  name to refer to the same thing everywhere.\n\n1.1b3 (2009-11-06)\n==================\n\nFeatures\n--------\n\n- ``repoze.bfg.testing.registerRoutesMapper`` testing facility added.\n  This testing function registers a routes \"mapper\" object in the\n  registry, for tests which require its presence.  This function is\n  documented in the ``repoze.bfg.testing`` API documentation.\n\nBug Fixes\n---------\n\n- Compound statements that used an assignment entered into in an\n  interactive IPython session invoked via ``paster bfgshell`` no\n  longer fail to mutate the shell namespace correctly.  For example,\n  this set of statements used to fail::\n\n    In [2]: def bar(x): return x\n      ...:\n    In [3]: list(bar(x) for x in 'abc')\n    Out[3]: NameError: 'bar'\n\n  In this release, the ``bar`` function is found and the correct\n  output is now sent to the console.  Thanks to Daniel Holth for the\n  patch.\n\n- The ``bfgshell`` command did not function properly; it was still\n  expecting to be able to call the root factory with a bare\n  ``environ`` rather than a request object.\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``repoze.bfg.scripting.get_root`` function now expects a\n  ``request`` object as its second argument rather than an\n  ``environ``.\n\n1.1b2 (2009-11-02)\n==================\n\nBug Fixes\n---------\n\n- Prevent PyPI installation failure due to ``easy_install`` trying way\n  too hard to guess the best version of Paste.  When ``easy_install``\n  pulls from PyPI it reads links off various pages to determine \"more\n  up to date\" versions. It incorrectly picks up a link for an ancient\n  version of a package named \"Paste-Deploy-0.1\" (note the dash) when\n  trying to find the \"Paste\" distribution and somehow believes it's\n  the latest version of \"Paste\".  It also somehow \"helpfully\" decides\n  to check out a version of this package from SVN.  We pin the Paste\n  dependency version to a version greater than 1.7 to work around\n  this ``easy_install`` bug.\n\nDocumentation\n-------------\n\n- Fix \"Hybrid\" narrative chapter: stop claiming that ``<view>``\n  statements that mention a route_name need to come afer (in XML\n  order) the ``<route>`` statement which creates the route.  This\n  hasn't been true since 1.1a1.\n\n- \"What's New in ``repoze.bfg`` 1.1\" document added to narrative\n  documentation.\n\nFeatures\n--------\n\n- Add a new event type: ``repoze.bfg.events.AfterTraversal``.  Events\n  of this type will be sent after traversal is completed, but before\n  any view code is invoked.  Like ``repoze.bfg.events.NewRequest``,\n  This event will have a single attribute: ``request`` representing\n  the current request.  Unlike the request attribute of\n  ``repoze.bfg.events.NewRequest`` however, during an AfterTraversal\n  event, the request object will possess attributes set by the\n  traverser, most notably ``context``, which will be the context used\n  when a view is found and invoked.  The interface\n  ``repoze.bfg.events.IAfterTraversal`` can be used to subscribe to\n  the event.  For example::\n\n    <subscriber for=\"repoze.bfg.interfaces.IAfterTraversal\"\n                handler=\"my.app.handle_after_traverse\"/>\n\n  Like any framework event, a subscriber function should expect one\n  parameter: ``event``.\n\nDependencies\n------------\n\n- Rather than depending on ``chameleon.core`` and ``chameleon.zpt``\n  distributions individually, depend on Malthe's repackaged\n  ``Chameleon`` distribution (which includes both ``chameleon.core``\n  and ``chameleon.zpt``).\n\n1.1b1 (2009-11-01)\n==================\n\nBug Fixes\n---------\n\n- The routes root factory called route factories and the default route\n  factory with an environ rather than a request.  One of the symptoms\n  of this bug: applications generated using the ``bfg_zodb`` paster\n  template in 1.1a9 did not work properly.\n\n- Reinstate ``renderer`` alias for ``view_renderer`` in the\n  ``<route>`` ZCML directive (in-the-wild 1.1a bw compat).\n\n- ``bfg_routesalchemy`` paster template: change ``<route>``\n  declarations: rename ``renderer`` attribute to ``view_renderer``.\n\n- Header values returned by the ``authtktauthenticationpolicy``\n  ``remember`` and ``forget`` methods would be of type ``unicode``.\n  This violated the WSGI spec, causing a ``TypeError`` to be raised\n  when these headers were used under ``mod_wsgi``.\n\n- If a BFG app that had a route matching the root URL was mounted\n  under a path in modwsgi, ala ``WSGIScriptAlias /myapp\n  /Users/chrism/projects/modwsgi/env/bfg.wsgi``, the home route (a\n  route with the path of ``'/'`` or ``''``) would not match when the\n  path ``/myapp`` was visited (only when the path ``/myapp/`` was\n  visited).  This is now fixed: if the urldispatch root factory notes\n  that the PATH_INFO is empty, it converts it to a single slash before\n  trying to do matching.\n\nDocumentation\n-------------\n\n- In ``<route>`` declarations in tutorial ZCML, rename ``renderer``\n  attribute to ``view_renderer`` (fwd compat).\n\n- Fix various tutorials broken by 1.1a9 ``<route>`` directive changes.\n\nInternal\n--------\n\n- Deal with a potential circref in the traversal module.\n\n1.1a9 (2009-10-31)\n==================\n\nBug Fixes\n---------\n\n- An incorrect ZCML conflict would be encountered when the\n  ``request_param`` predicate attribute was used on the ZCML ``view``\n  directive if any two otherwise same-predicated views had the\n  combination of a predicate value with an ``=`` sign and one without\n  (e.g. ``a`` vs. ``a=123``).\n\nFeatures\n--------\n\n- In previous versions of BFG, the \"root factory\" (the ``get_root``\n  callable passed to ``make_app`` or a function pointed to by the\n  ``factory`` attribute of a route) was called with a \"bare\" WSGI\n  environment.  In this version, and going forward, it will be called\n  with a ``request`` object.  The request object passed to the factory\n  implements dictionary-like methods in such a way that existing root\n  factory code which expects to be passed an environ will continue to\n  work.\n\n- The ``__call__`` of a plugin \"traverser\" implementation (registered\n  as an adapter for ``ITraverser`` or ``ITraverserFactory``) will now\n  receive a *request* as the single argument to its ``__call__``\n  method.  In previous versions it was passed a WSGI ``environ``\n  object.  The request object passed to the factory implements\n  dictionary-like methods in such a way that existing traverser code\n  which expects to be passed an environ will continue to work.\n\n- The ZCML ``route`` directive's attributes ``xhr``,\n  ``request_method``, ``path_info``, ``request_param``, ``header`` and\n  ``accept`` are now *route* predicates rather than *view* predicates.\n  If one or more of these predicates is specified in the route\n  configuration, all of the predicates must return true for the route\n  to match a request.  If one or more of the route predicates\n  associated with a route returns ``False`` when checked during a\n  request, the route match fails, and the next match in the routelist\n  is tried.  This differs from the previous behavior, where no route\n  predicates existed and all predicates were considered view\n  predicates, because in that scenario, the next route was not tried.\n\nDocumentation\n-------------\n\n- Various changes were made to narrative and API documentation\n  supporting the change from passing a request rather than an environ\n  to root factories and traversers.\n\nInternal\n--------\n\n- The request implements dictionary-like methods that mutate and query\n  the WSGI environ.  This is only for the purpose of backwards\n  compatibility with root factories which expect an ``environ`` rather\n  than a request.\n\n- The ``repoze.bfg.request.create_route_request_factory`` function,\n  which returned a request factory was removed in favor of a\n  ``repoze.bfg.request.route_request_interface`` function, which\n  returns an interface.\n\n- The ``repoze.bfg.request.Request`` class, which is a subclass of\n  ``webob.Request`` now defines its own ``__setattr__``,\n  ``__getattr__`` and ``__delattr__`` methods, which override the\n  default WebOb behavior.  The default WebOb behavior stores\n  attributes of the request in ``self.environ['webob.adhoc_attrs']``,\n  and retrieves them from that dictionary during a ``__getattr__``.\n  This behavior was undesirable for speed and \"expectation\" reasons.\n  Now attributes of the ``request`` are stored in ``request.__dict__``\n  (as you otherwise might expect from an object that did not override\n  these methods).\n\n- The router no longer calls ``repoze.bfg.traversal._traverse`` and\n  does its work \"inline\" (speed).\n\n- Reverse the order in which the router calls the request factory and\n  the root factory.  The request factory is now called first; the\n  resulting request is passed to the root factory.\n\n- The ``repoze.bfg.request.request_factory`` function has been\n  removed.  Its functionality is no longer required.\n\n- The \"routes root factory\" that wraps the default root factory when\n  there are routes mentioned in the configuration now attaches an\n  interface to the request via ``zope.interface.directlyProvides``.\n  This replaces logic in the (now-gone)\n  ``repoze.bfg.request.request_factory`` function.\n\n- The ``route`` and ``view`` ZCML directives now register an interface\n  as a named utility (retrieved from\n  ``repoze.bfg.request.route_request_interface``) rather than a\n  request factory (the previous return value of the now-missing \n  ``repoze.bfg.request.create_route_request_factory``.\n\n- The ``repoze.bfg.functional`` module was renamed to\n  ``repoze.bfg.compat``.\n\nBackwards Incompatibilities\n---------------------------\n\n- Explicitly revert the feature introduced in 1.1a8: where the name\n  ``root`` is available as an attribute of the request before a\n  NewRequest event is emitted.  This makes some potential future\n  features impossible, or at least awkward (such as grouping traversal\n  and view lookup into a single adapter lookup).\n\n- The ``containment``, ``attr`` and ``renderer`` attributes of the\n  ``route`` ZCML directive were removed.\n\n1.1a8 (2009-10-27)\n==================\n\nFeatures\n--------\n\n- Add ``path_info`` view configuration predicate.\n\n- ``paster bfgshell`` now supports IPython if it's available for\n  import.  Thanks to Daniel Holth for the initial patch.\n\n- Add ``repoze.bfg.testing.registerSettings`` API, which is documented\n  in the \"repoze.bfg.testing\" API chapter.  This allows for\n  registration of \"settings\" values obtained via\n  ``repoze.bfg.settings.get_settings()`` for use in unit tests.\n\n- The name ``root`` is available as an attribute of the request\n  slightly earlier now (before a NewRequest event is emitted).\n  ``root`` is the result of the application \"root factory\".\n\n- Added ``max_age`` parameter to ``authtktauthenticationpolicy`` ZCML\n  directive.  If this value is set, it must be an integer representing\n  the number of seconds which the auth tkt cookie will survive.\n  Mainly, its existence allows the auth_tkt cookie to survive across\n  browser sessions.\n\nBug Fixes\n---------\n\n- Fix bug encountered during \"scan\" (when ``<scan ..>`` directive is\n  used in ZCML) introduced in 1.1a7.  Symptom: ``AttributeError:\n  object has no attribute __provides__`` raised at startup time.\n\n- The ``reissue_time`` argument to the ``authtktauthenticationpolicy``\n  ZCML directive now actually works.  When it is set to an integer\n  value, an authticket set-cookie header is appended to the response\n  whenever a request requires authentication and 'now' minus the\n  authticket's timestamp is greater than ``reissue_time`` seconds.\n\nDocumentation\n-------------\n\n- Add a chapter titled \"Request and Response\" to the narrative\n  documentation, content cribbed from the WebOb documentation.\n\n- Call out predicate attributes of ZCML directive within \"Views\"\n  chapter.\n\n- Fix route_url documentation (``_query`` argument documented as\n  ``query`` and ``_anchor`` argument documented as ``anchor``).\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``authtkt`` authentication policy ``remember`` method now no\n  longer honors ``token`` or ``userdata`` keyword arguments.\n\nInternal\n--------\n\n- Change how ``bfg_view`` decorator works when used as a class method\n  decorator.  In 1.1a7, the``scan``directive actually tried to grope\n  every class in scanned package at startup time, calling ``dir``\n  against each found class, and subsequently invoking ``getattr``\n  against each thing found by ``dir`` to see if it was a method.  This\n  led to some strange symptoms (e.g. ``AttributeError: object has no\n  attribute __provides__``), and was generally just a bad idea.  Now,\n  instead of groping classes for methods at startup time, we just\n  cause the ``bfg_view`` decorator itself to populate the method's\n  class' ``__dict__`` when it is used as a method decorator.  This\n  also requires a nasty _getframe thing but it's slightly less nasty\n  than the startup time groping behavior.  This is essentially a\n  reversion back to 1.1a6 \"grokking\" behavior plus some special magic\n  for using the ``bfg_view`` decorator as method decorator inside the\n  ``bfg_view`` class itself.\n\n- The router now checks for a ``global_response_headers`` attribute of\n  the request object before returning a response.  If this value\n  exists, it is presumed to be a sequence of two-tuples, representing\n  a set of headers to append to the 'normal' response headers.  This\n  feature is internal, rather than exposed externally, because it's\n  unclear whether it will stay around in the long term.  It was added\n  to support the ``reissue_time`` feature of the authtkt\n  authentication policy.\n\n- The interface ITraverserFactory is now just an alias for ITraverser.\n\n1.1a7 (2009-10-18)\n==================\n\nFeatures\n--------\n\n- More than one ``@bfg_view`` decorator may now be stacked on top of\n  any number of others.  Each invocation of the decorator registers a\n  single view configuration.  For instance, the following combination\n  of decorators and a function will register two view configurations\n  for the same view callable::\n\n    from repoze.bfg.view import bfg_view\n\n    @bfg_view(name='edit')\n    @bfg_view(name='change')\n    def edit(context, request):\n        pass\n\n  This makes it possible to associate more than one view configuration\n  with a single callable without requiring any ZCML.\n\n- The ``@bfg_view`` decorator can now be used against a class method::\n\n    from webob import Response\n    from repoze.bfg.view import bfg_view\n\n    class MyView(object):\n        def __init__(self, context, request):\n            self.context = context\n            self.request = request\n\n        @bfg_view(name='hello')\n        def amethod(self):\n            return Response('hello from %s!' % self.context)\n\n  When the bfg_view decorator is used against a class method, a view\n  is registered for the *class* (it's a \"class view\" where the \"attr\"\n  happens to be the name of the method it is attached to), so the\n  class it's defined within must have a suitable constructor: one that\n  accepts ``context, request`` or just ``request``.\n\nDocumentation\n-------------\n\n- Added ``Changing the Traverser`` and ``Changing How\n  :mod:`repoze.bfg.url.model_url` Generates a URL`` to the \"Hooks\"\n  narrative chapter of the docs.\n\nInternal\n--------\n\n- Remove ``ez_setup.py`` and imports of it within ``setup.py``.  In\n  the new world, and as per virtualenv setup instructions, people will\n  already have either setuptools or distribute.\n\n1.1a6 (2009-10-15)\n==================\n\nFeatures\n--------\n\n- Add ``xhr``, ``accept``, and ``header`` view configuration\n  predicates to ZCML view declaration, ZCML route declaration, and\n  ``bfg_view`` decorator.  See the ``Views`` narrative documentation\n  chapter for more information about these predicates.\n\n- Add ``setUp`` and ``tearDown`` functions to the\n  ``repoze.bfg.testing`` module.  Using ``setUp`` in a test setup and\n  ``tearDown`` in a test teardown is now the recommended way to do\n  component registry setup and teardown.  Previously, it was\n  recommended that a single function named\n  ``repoze.bfg.testing.cleanUp`` be called in both the test setup and\n  tear down.  ``repoze.bfg.testing.cleanUp`` still exists (and will\n  exist \"forever\" due to its widespread use); it is now just an alias\n  for ``repoze.bfg.testing.setUp`` and is nominally deprecated.\n\n- The BFG component registry is now available in view and event\n  subscriber code as an attribute of the request\n  ie. ``request.registry``.  This fact is currently undocumented\n  except for this note, because BFG developers never need to interact\n  with the registry directly anywhere else.\n\n- The BFG component registry now inherits from ``dict``, meaning that\n  it can optionally be used as a simple dictionary.  *Component*\n  registrations performed against it via e.g. ``registerUtility``,\n  ``registerAdapter``, and similar API methods are kept in a\n  completely separate namespace than its dict members, so using the\n  its component API methods won't effect the keys and values in the\n  dictionary namespace.  Likewise, though the component registry\n  \"happens to be\" a dictionary, use of mutating dictionary methods\n  such as ``__setitem__`` will have no influence on any component\n  registrations made against it.  In other words, the registry object\n  you obtain via e.g. ``repoze.bfg.threadlocal.get_current_registry``\n  or ``request.registry`` happens to be both a component registry and\n  a dictionary, but using its component-registry API won't impact data\n  added to it via its dictionary API and vice versa.  This is a\n  forward compatibility move based on the goals of \"marco\".\n\n- Expose and document ``repoze.bfg.testing.zcml_configure`` API.  This\n  function populates a component registry from a ZCML file for testing\n  purposes.  It is documented in the \"Unit and Integration Testing\"\n  chapter.\n\nDocumentation\n-------------\n\n- Virtual hosting narrative docs chapter updated with info about\n  ``mod_wsgi``.\n\n- Point all index URLs at the literal 1.1 index (this alpha cycle may\n  go on a while).\n\n- Various tutorial test modules updated to use\n  ``repoze.bfg.testing.setUp`` and ``repoze.bfg.testing.tearDown``\n  methods in order to encourage this as best practice going forward.\n\n- Added \"Creating Integration Tests\" section to unit testing narrative\n  documentation chapter.  As a result, the name of the unittesting\n  chapter is now \"Unit and Integration Testing\".\n\nBackwards Incompatibilities\n---------------------------\n\n- Importing ``getSiteManager`` and ``get_registry`` from\n  ``repoze.bfg.registry`` is no longer supported.  These imports were\n  deprecated in repoze.bfg 1.0.  Import of ``getSiteManager`` should\n  be done as ``from zope.component import getSiteManager``.  Import of\n  ``get_registry`` should be done as ``from repoze.bfg.threadlocal\n  import get_current_registry``.  This was done to prevent a circular\n  import dependency.\n\n- Code bases which alternately invoke both\n  ``zope.testing.cleanup.cleanUp`` and ``repoze.bfg.testing.cleanUp``\n  (treating them equivalently, using them interchangeably) in the\n  setUp/tearDown of unit tests will begin to experience test failures\n  due to lack of test isolation.  The \"right\" mechanism is\n  ``repoze.bfg.testing.cleanUp`` (or the combination of\n  ``repoze.bfg.testing.setUp`` and\n  ``repoze.bfg.testing.tearDown``). but a good number of legacy\n  codebases will use ``zope.testing.cleanup.cleanUp`` instead.  We\n  support ``zope.testing.cleanup.cleanUp`` but not in combination with\n  ``repoze.bfg.testing.cleanUp`` in the same codebase.  You should use\n  one or the other test cleanup function in a single codebase, but not\n  both.\n\nInternal\n--------\n\n- Created new ``repoze.bfg.configuration`` module which assumes\n  responsibilities previously held by the ``repoze.bfg.registry`` and\n  ``repoze.bfg.router`` modules (avoid a circular import dependency).\n\n- The result of the ``zope.component.getSiteManager`` function in unit\n  tests set up with ``repoze.bfg.testing.cleanUp`` or\n  ``repoze.bfg.testing.setUp`` will be an instance of\n  ``repoze.bfg.registry.Registry`` instead of the global\n  ``zope.component.globalregistry.base`` registry.  This also means\n  that the threadlocal ZCA API functions such as ``getAdapter`` and\n  ``getUtility`` as well as internal BFG machinery (such as\n  ``model_url`` and ``route_url``) will consult this registry within\n  unit tests. This is a forward compatibility move based on the goals\n  of \"marco\".\n\n- Removed ``repoze.bfg.testing.addCleanUp`` function and associated\n  module-scope globals.  This was never an API.\n\n1.1a5 (2009-10-10)\n==================\n\nDocumentation\n-------------\n\n- Change \"Traversal + ZODB\" and \"URL Dispatch + SQLAlchemy\" Wiki\n  tutorials to make use of the new-to-1.1 \"renderer\" feature (return\n  dictionaries from all views).\n\n- Add tests to the \"URL Dispatch + SQLAlchemy\" tutorial after the\n  \"view\" step.\n\n- Added a diagram of model graph traversal to the \"Traversal\"\n  narrative chapter of the documentation.\n\n- An ``exceptions`` API chapter was added, documenting the new\n  ``repoze.bfg.exceptions`` module.\n\n- Describe \"request-only\" view calling conventions inside the\n  urldispatch narrative chapter, where it's most helpful.\n\n- Add a diagram which explains the operation of the BFG router to the\n  \"Router\" narrative chapter.\n\nFeatures\n--------\n\n- Add a new ``repoze.bfg.testing`` API: ``registerRoute``, for\n  registering routes to satisfy calls to\n  e.g. ``repoze.bfg.url.route_url`` in unit tests.\n\n- The ``notfound`` and ``forbidden`` ZCML directives now accept the\n  following additional attributes: ``attr``, ``renderer``, and\n  ``wrapper``.  These have the same meaning as they do in the context\n  of a ZCML ``view`` directive.\n\n- For behavior like Django's ``APPEND_SLASH=True``, use the\n  ``repoze.bfg.view.append_slash_notfound_view`` view as the Not Found\n  view in your application.  When this view is the Not Found view\n  (indicating that no view was found), and any routes have been\n  defined in the configuration of your application, if the value of\n  ``PATH_INFO`` does not already end in a slash, and if the value of\n  ``PATH_INFO`` *plus* a slash matches any route's path, do an HTTP\n  redirect to the slash-appended PATH_INFO.  Note that this will\n  *lose* ``POST`` data information (turning it into a GET), so you\n  shouldn't rely on this to redirect POST requests.\n\n- Speed up ``repoze.bfg.location.lineage`` slightly.\n\n- Speed up ``repoze.bfg.encode.urlencode`` (nee'\n  ``repoze.bfg.url.urlencode``) slightly.\n\n- Speed up ``repoze.bfg.traversal.model_path``.\n\n- Speed up ``repoze.bfg.traversal.model_path_tuple`` slightly.\n\n- Speed up ``repoze.bfg.traversal.traverse`` slightly.\n\n- Speed up ``repoze.bfg.url.model_url`` slightly.\n\n- Speed up ``repoze.bfg.url.route_url`` slightly.\n\n- Sped up ``repoze.bfg.traversal.ModelGraphTraverser:__call__``\n  slightly.\n\n- Minor speedup of ``repoze.bfg.router.Router.__call__``.\n\n- New ``repoze.bfg.exceptions`` module was created to house exceptions\n  that were previously sprinkled through various modules.\n\nInternal\n--------\n\n- Move ``repoze.bfg.traversal._url_quote`` into ``repoze.bfg.encode``\n  as ``url_quote``.\n\nDeprecations\n------------\n\n- The import of ``repoze.bfg.view.NotFound`` is deprecated in favor of\n  ``repoze.bfg.exceptions.NotFound``.  The old location still\n  functions, but emits a deprecation warning.\n\n- The import of ``repoze.bfg.security.Unauthorized`` is deprecated in\n  favor of ``repoze.bfg.exceptions.Forbidden``.  The old location\n  still functions but emits a deprecation warning.  The rename from\n  ``Unauthorized`` to ``Forbidden`` brings parity to the name of\n  the exception and the system view it invokes when raised.\n\nBackwards Incompatibilities\n---------------------------\n\n- We previously had a Unicode-aware wrapper for the\n  ``urllib.urlencode`` function named ``repoze.bfg.url.urlencode``\n  which delegated to the stdlib function, but which marshalled all\n  unicode values to utf-8 strings before calling the stdlib version.\n  A newer replacement now lives in ``repoze.bfg.encode`` The\n  replacement does not delegate to the stdlib.\n\n  The replacement diverges from the stdlib implementation and the\n  previous ``repoze.bfg.url`` url implementation inasmuch as its\n  ``doseq`` argument is now a decoy: it always behaves in the\n  ``doseq=True`` way (which is the only sane behavior) for speed\n  purposes.\n\n  The old import location (``repoze.bfg.url.urlencode``) still\n  functions and has not been deprecated.\n\n- In 0.8a7, the return value expected from an object implementing\n  ``ITraverserFactory`` was changed from a sequence of values to a\n  dictionary containing the keys ``context``, ``view_name``,\n  ``subpath``, ``traversed``, ``virtual_root``, ``virtual_root_path``,\n  and ``root``.  Until now, old-style traversers which returned a\n  sequence have continued to work but have generated a deprecation\n  warning.  In this release, traversers which return a sequence\n  instead of a dictionary will no longer work.\n\n1.1a4 (2009-09-23)\n==================\n\nBug Fixes\n---------\n\n- On 64-bit Linux systems, views that were members of a multiview\n  (orderings of views with predicates) were not evaluated in the\n  proper order.  Symptom: in a configuration that had two views with\n  the same name but one with a ``request_method=POST`` predicate and\n  one without, the one without the predicate would be called\n  unconditionally (even if the request was a POST request).  Thanks\n  much to Sebastien Douche for providing the buildbots that pointed\n  this out.\n\nDocumentation\n-------------\n\n- Added a tutorial which explains how to use ``repoze.session``\n  (ZODB-based sessions) in a ZODB-based repoze.bfg app.\n\n- Added a tutorial which explains how to add ZEO to a ZODB-based\n  ``repoze.bfg`` application.\n\n- Added a tutorial which explains how to run a ``repoze.bfg``\n  application under `mod_wsgi <https://modwsgi.readthedocs.io/en/develop/>`_.\n  See \"Running a repoze.bfg Application under mod_wsgi\" in the\n  tutorials section of the documentation.\n\nFeatures\n--------\n\n- Add a ``repoze.bfg.url.static_url`` API which is capable of\n  generating URLs to static resources defined by the ``<static>`` ZCML\n  directive.  See the \"Views\" narrative chapter's section titled\n  \"Generating Static Resource URLs\" for more information.\n\n- Add a ``string`` renderer.  This renderer converts a non-Response\n  return value of any view callble into a string.  It is documented in\n  the \"Views\" narrative chapter.\n\n- Give the ``route`` ZCML directive the ``view_attr`` and\n  ``view_renderer`` parameters (bring up to speed with 1.1a3\n  features).  These can also be spelled as ``attr`` and ``renderer``.\n\nBackwards Incompatibilities\n---------------------------\n\n- An object implementing the ``IRenderer`` interface (and\n  ``ITemplateRenderer`, which is a subclass of ``IRenderer``) must now\n  accept an extra ``system`` argument in its ``__call__`` method\n  implementation.  Values computed by the system (as opposed to by the\n  view) are passed by the system in the ``system`` parameter, which\n  will always be a dictionary.  Keys in the dictionary include:\n  ``view`` (the view object that returned the value),\n  ``renderer_name`` (the template name or simple name of the\n  renderer), ``context`` (the context object passed to the view), and\n  ``request`` (the request object passed to the view).  Previously\n  only ITemplateRenderers received system arguments as elements inside\n  the main ``value`` dictionary.\n\nInternal\n--------\n\n- The way ``bfg_view`` declarations are scanned for has been modified.\n  This should have no external effects.\n\n- Speed: do not register an ITraverserFactory in configure.zcml;\n  instead rely on queryAdapter and a manual default to\n  ModelGraphTraverser.\n\n- Speed: do not register an IContextURL in configure.zcml; instead\n  rely on queryAdapter and a manual default to TraversalContextURL.\n\n- General speed microimprovements for helloworld benchmark: replace\n  try/excepts with statements which use 'in' keyword.\n\n1.1a3 (2009-09-16)\n==================\n\nDocumentation\n-------------\n\n- The \"Views\" narrative chapter in the documentation has been updated\n  extensively to discuss \"renderers\".\n\nFeatures\n--------\n\n- A ``renderer`` attribute has been added to view configurations,\n  replacing the previous (1.1a2) version's ``template`` attribute.  A\n  \"renderer\" is an object which accepts the return value of a view and\n  converts it to a string.  This includes, but is not limited to,\n  templating systems.\n\n- A new interface named ``IRenderer`` was added.  The existing\n  interface, ``ITemplateRenderer`` now derives from this new\n  interface.  This interface is internal.\n\n- A new interface named ``IRendererFactory`` was added.  An existing\n  interface named ``ITemplateRendererFactory`` now derives from this\n  interface.  This interface is internal.\n\n- The ``view`` attribute of the ``view`` ZCML directive is no longer\n  required if the ZCML directive also has a ``renderer`` attribute.\n  This is useful when the renderer is a template renderer and no names\n  need be passed to the template at render time.\n\n- A new zcml directive ``renderer`` has been added.  It is documented\n  in the \"Views\" narrative chapter of the documentation.\n\n- A ZCML ``view`` directive (and the associated ``bfg_view``\n  decorator) can now accept a \"wrapper\" value.  If a \"wrapper\" value\n  is supplied, it is the value of a separate view's *name* attribute.\n  When a view with a ``wrapper`` attribute is rendered, the \"inner\"\n  view is first rendered normally.  Its body is then attached to the\n  request as \"wrapped_body\", and then a wrapper view name is looked up\n  and rendered (using ``repoze.bfg.render_view_to_response``), passed\n  the request and the context.  The wrapper view is assumed to do\n  something sensible with ``request.wrapped_body``, usually inserting\n  its structure into some other rendered template.  This feature makes\n  it possible to specify (potentially nested) \"owrap\" relationships\n  between views using only ZCML or decorators (as opposed always using\n  ZPT METAL and analogues to wrap view renderings in outer wrappers).\n\nDependencies\n------------\n\n- When used under Python < 2.6, BFG now has an installation time\n  dependency on the ``simplejson`` package.\n\nDeprecations\n------------\n\n- The ``repoze.bfg.testing.registerDummyRenderer`` API has been\n  deprecated in favor of\n  ``repoze.bfg.testing.registerTemplateRenderer``.  A deprecation\n  warning is *not* issued at import time for the former name; it will\n  exist \"forever\"; its existence has been removed from the\n  documentation, however.\n\n- The ``repoze.bfg.templating.renderer_from_cache`` function has been\n  moved to ``repoze.bfg.renderer.template_renderer_factory``.  This\n  was never an API, but code in the wild was spotted that used it.  A\n  deprecation warning is issued at import time for the former.\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``ITemplateRenderer`` interface has been changed.  Previously\n  its ``__call__`` method accepted ``**kw``.  It now accepts a single\n  positional parameter named ``kw`` (REVISED: it accepts two\n  positional parameters as of 1.1a4: ``value`` and ``system``).  This\n  is mostly an internal change, but it was exposed in APIs in one\n  place: if you've used the\n  ``repoze.bfg.testing.registerDummyRenderer`` API in your tests with\n  a custom \"renderer\" argument with your own renderer implementation,\n  you will need to change that renderer implementation to accept\n  ``kw`` instead of ``**kw`` in its ``__call__`` method (REVISED: make\n  it accept ``value`` and ``system`` positional arguments as of 1.1a4).\n\n- The ``ITemplateRendererFactory`` interface has been changed.\n  Previously its ``__call__`` method accepted an ``auto_reload``\n  keyword parameter.  Now its ``__call__`` method accepts no keyword\n  parameters.  Renderers are now themselves responsible for\n  determining details of auto-reload.  This is purely an internal\n  change.  This interface was never external.\n\n- The ``template_renderer`` ZCML directive introduced in 1.1a2 has\n  been removed.  It has been replaced by the ``renderer`` directive.\n\n- The previous release (1.1a2) added a view configuration attribute\n  named ``template``.  In this release, the attribute has been renamed\n  to ``renderer``.  This signifies that the attribute is more generic:\n  it can now be not just a template name but any renderer name (ala\n  ``json``).  \n\n- In the previous release (1.1a2), the Chameleon text template\n  renderer was used if the system didn't associate the ``template``\n  view configuration value with a filename with a \"known\" extension.\n  In this release, you must use a ``renderer`` attribute which is a\n  path that ends with a ``.txt`` extension\n  (e.g. ``templates/foo.txt``) to use the Chameleon text renderer.\n\n1.1a2 (2009-09-14)\n==================\n\nFeatures\n--------\n\n- A ZCML ``view`` directive (and the associated ``bfg_view``\n  decorator) can now accept an \"attr\" value.  If an \"attr\" value is\n  supplied, it is considered a method named of the view object to be\n  called when the response is required.  This is typically only good\n  for views that are classes or instances (not so useful for\n  functions, as functions typically have no methods other than\n  ``__call__``).\n\n- A ZCML ``view`` directive (and the associated ``bfg_view``\n  decorator) can now accept a \"template\" value.  If a \"template\" value\n  is supplied, and the view callable returns a dictionary, the\n  associated template is rendered with the dictionary as keyword\n  arguments.  See the section named \"Views That Have a ``template``\"\n  in the \"Views\" narrative documentation chapter for more information.\n\n1.1a1 (2009-09-06)\n==================\n\nBug Fixes\n---------\n\n- \"tests\" module removed from the bfg_alchemy paster template; these\n  tests didn't work.\n\n- Bugfix: the ``discriminator`` for the ZCML \"route\" directive was\n  incorrect.  It was possible to register two routes that collided\n  without the system spitting out a ConfigurationConflictError at\n  startup time.\n\nFeatures\n--------\n\n- Feature addition: view predicates.  These are exposed as the\n  ``request_method``, ``request_param``, and ``containment``\n  attributes of a ZCML ``view`` declaration, or the respective\n  arguments to a ``@bfg_view`` decorator.  View predicates can be used\n  to register a view for a more precise set of environment parameters\n  than was previously possible.  For example, you can register two\n  views with the same ``name`` with different ``request_param``\n  attributes.  If the ``request.params`` dict contains 'foo'\n  (request_param=\"foo\"), one view might be called; if it contains\n  'bar' (request_param=\"bar\"), another view might be called.\n  ``request_param`` can also name a key/value pair ala ``foo=123``.\n  This will match only when the ``foo`` key is in the request.params\n  dict and it has the value '123'.  This particular example makes it\n  possible to write separate view functions for different form\n  submissions.  The other predicates, ``containment`` and\n  ``request_method`` work similarly.  ``containment`` is a view\n  predicate that will match only when the context's graph lineage has\n  an object possessing a particular class or interface, for example.\n  ``request_method`` is a view predicate that will match when the HTTP\n  ``REQUEST_METHOD`` equals some string (eg. 'POST').\n\n- The ``@bfg_view`` decorator now accepts three additional arguments:\n  ``request_method``, ``request_param``, and ``containment``.\n  ``request_method`` is used when you'd like the view to match only a\n  request with a particular HTTP ``REQUEST_METHOD``; a string naming\n  the ``REQUEST_METHOD`` can also be supplied as ``request_type`` for\n  backwards compatibility.  ``request_param`` is used when you'd like\n  a view to match only a request that contains a particular\n  ``request.params`` key (with or without a value).  ``containment``\n  is used when you'd like to match a request that has a context that\n  has some class or interface in its graph lineage.  These are\n  collectively known as \"view predicates\".\n\n- The ``route`` ZCML directive now honors ``view_request_method``,\n  ``view_request_param`` and ``view_containment`` attributes, which\n  pass along these values to the associated view if any is provided.\n  Additionally, the ``request_type`` attribute can now be spelled as\n  ``view_request_type``, and ``permission`` can be spelled as\n  ``view_permission``.  Any attribute which starts with ``view_`` can\n  now be spelled without the ``view_`` prefix, so ``view_for`` can be\n  spelled as ``for`` now, etc.  Both forms are documented in the\n  urldispatch narrative documentation chapter.\n\n- The ``request_param`` ZCML view directive attribute (and its\n  ``bfg_view`` decorator cousin) can now specify both a key and a\n  value.  For example, ``request_param=\"foo=123\"`` means that the foo\n  key must have a value of ``123`` for the view to \"match\".\n\n- Allow ``repoze.bfg.traversal.find_interface`` API to use a class\n  object as the argument to compare against the ``model`` passed in.\n  This means you can now do ``find_interface(model, SomeClass)`` and\n  the first object which is found in the lineage which has\n  ``SomeClass`` as its class (or the first object found which has\n  ``SomeClass`` as any of its superclasses) will be returned.\n\n- Added ``static`` ZCML directive which registers a route for a view\n  that serves up files in a directory.  See the \"Views\" narrative\n  documentation chapter's \"Serving Static Resources Using a ZCML\n  Directive\" section for more information.\n\n- The ``repoze.bfg.view.static`` class now accepts a string as its\n  first argument (\"root_dir\") that represents a package-relative name\n  e.g. ``somepackage:foo/bar/static``.  This is now the preferred\n  mechanism for spelling package-relative static paths using this\n  class.  A ``package_name`` keyword argument has been left around for\n  backwards compatibility.  If it is supplied, it will be honored.\n\n- The API ``repoze.bfg.testing.registerView`` now takes a\n  ``permission`` argument.  Use this instead of using\n  ``repoze.bfg.testing.registerViewPermission``.\n\n- The ordering of route declarations vs. the ordering of view\n  declarations that use a \"route_name\" in ZCML no longer matters.\n  Previously it had been impossible to use a route_name from a route\n  that had not yet been defined in ZCML (order-wise) within a \"view\"\n  declaration.\n\n- The repoze.bfg router now catches both\n  ``repoze.bfg.security.Unauthorized`` and\n  ``repoze.bfg.view.NotFound`` exceptions while rendering a view.\n  When the router catches an ``Unauthorized``, it returns the\n  registered forbidden view.  When the router catches a ``NotFound``,\n  it returns the registered notfound view.\n\nInternal\n--------\n\n- Change urldispatch internals: Route object is now constructed using\n  a path, a name, and a factory instead of a name, a matcher, a\n  generator, and a factory.\n\n- Move (non-API) default_view, default_forbidden_view, and\n  default_notfound_view functions into the ``repoze.bfg.view`` module\n  (moved from ``repoze.bfg.router``).\n\n- Removed ViewPermissionFactory from ``repoze.bfg.security``.  View\n  permission checking is now done by registering and looking up an\n  ISecuredView.\n\n- The ``static`` ZCML directive now uses a custom root factory when\n  constructing a route.\n\n- The interface ``IRequestFactories`` was removed from the\n  repoze.bfg.interfaces module.  This interface was never an API.\n\n- The function named ``named_request_factories`` and the data\n  structure named ``DEFAULT_REQUEST_FACTORIES`` have been removed from\n  the ``repoze.bfg.request`` module.  These were never APIs.\n\n- The ``IViewPermissionFactory`` interface has been removed.  This was\n  never an API.\n\nDocumentation\n-------------\n\n- Request-only-convention examples in the \"Views\" narrative\n  documentation were broken.\n\n- Fixed documentation bugs related to forget and remember in security API\n  docs.\n\n- Fixed documentation for ``repoze.bfg.view.static`` (in narrative\n  ``Views`` chapter).\n\nDeprecations\n------------\n\n- The API ``repoze.bfg.testing.registerViewPermission`` has been\n  deprecated.\n\nBackwards Incompatibilities\n---------------------------\n\n- The interfaces ``IPOSTRequest``, ``IGETRequest``, ``IPUTRequest``,\n  ``IDELETERequest``, and ``IHEADRequest`` have been removed from the\n  ``repoze.bfg.interfaces`` module.  These were not documented as APIs\n  post-1.0.  Instead of using one of these, use a ``request_method``\n  ZCML attribute or ``request_method`` bfg_view decorator parameter\n  containing an HTTP method name (one of ``GET``, ``POST``, ``HEAD``,\n  ``PUT``, ``DELETE``) instead of one of these interfaces if you were\n  using one explicitly.  Passing a string in the set (``GET``,\n  ``HEAD``, ``PUT``, ``POST``, ``DELETE``) as a ``request_type``\n  argument will work too.  Rationale: instead of relying on interfaces\n  attached to the request object, BFG now uses a \"view predicate\" to\n  determine the request type.\n\n- Views registered without the help of the ZCML ``view`` directive are\n  now responsible for performing their own authorization checking.\n\n- The ``registry_manager`` backwards compatibility alias importable\n  from \"repoze.bfg.registry\", deprecated since repoze.bfg 0.9 has been\n  removed.  If you are tring to use the registry manager within a\n  debug script of your own, use a combination of the\n  \"repoze.bfg.paster.get_app\" and \"repoze.bfg.scripting.get_root\" APIs\n  instead.\n\n- The ``INotFoundAppFactory`` interface has been removed; it has\n  been deprecated since repoze.bfg 0.9.  If you have something like\n  the following in your ``configure.zcml``::\n\n   <utility provides=\"repoze.bfg.interfaces.INotFoundAppFactory\"\n            component=\"helloworld.factories.notfound_app_factory\"/>\n\n  Replace it with something like::\n\n   <notfound \n       view=\"helloworld.views.notfound_view\"/>\n\n  See \"Changing the Not Found View\" in the \"Hooks\" chapter of the\n  documentation for more information.\n\n- The ``IUnauthorizedAppFactory`` interface has been removed; it has\n  been deprecated since repoze.bfg 0.9.  If you have something like\n  the following in your ``configure.zcml``::\n\n   <utility provides=\"repoze.bfg.interfaces.IUnauthorizedAppFactory\"\n            component=\"helloworld.factories.unauthorized_app_factory\"/>\n\n  Replace it with something like::\n\n   <forbidden\n       view=\"helloworld.views.forbidden_view\"/>\n\n  See \"Changing the Forbidden View\" in the \"Hooks\" chapter of the\n  documentation for more information.\n\n- ``ISecurityPolicy``-based security policies, deprecated since\n  repoze.bfg 0.9, have been removed.  If you have something like this\n  in your ``configure.zcml``, it will no longer work::\n\n     <utility\n       provides=\"repoze.bfg.interfaces.ISecurityPolicy\"\n       factory=\"repoze.bfg.security.RemoteUserInheritingACLSecurityPolicy\"\n      />\n\n  If ZCML like the above exists in your application, you will receive\n  an error at startup time.  Instead of the above, you'll need\n  something like::\n\n     <remoteuserauthenticationpolicy/>\n     <aclauthorizationpolicy/>\n\n  This is just an example.  See the \"Security\" chapter of the\n  repoze.bfg documentation for more information about configuring\n  security policies.\n\n- Custom ZCML directives which register an authentication or\n  authorization policy (ala \"authtktauthenticationpolicy\" or\n  \"aclauthorizationpolicy\") should register the policy \"eagerly\" in\n  the ZCML directive instead of from within a ZCML action.  If an\n  authentication or authorization policy is not found in the component\n  registry by the view machinery during deferred ZCML processing, view\n  security will not work as expected.\n\n1.0.1 (2009-07-22)\n==================\n\n- Added support for ``has_resource``, ``resource_isdir``, and\n  ``resource_listdir`` to the resource \"OverrideProvider\"; this fixes\n  a bug with a symptom that a file could not be overridden in a\n  resource directory unless a file with the same name existed in the\n  original directory being overridden.\n\n- Fixed documentation bug showing invalid test for values from the\n  ``matchdict``:  they are stored as attributes of the ``Article``, rather\n  than subitems.\n\n- Fixed documentation bug showing wrong environment key for the ``matchdict``\n  produced by the matching route.\n\n- Added a workaround for a bug in Python 2.6, 2.6.1, and 2.6.2 having\n  to do with a recursion error in the mimetypes module when trying to\n  serve static files from Paste's FileApp:\n  https://bugs.python.org/issue5853.  Symptom: File\n  \"/usr/lib/python2.6/mimetypes.py\", line 244, in guess_type return\n  guess_type(url, strict) RuntimeError: maximum recursion depth\n  exceeded.  Thanks to Armin Ronacher for identifying the symptom and\n  pointing out a fix.\n\n- Minor edits to tutorials for accuracy based on feedback.\n\n- Declared Paste and PasteDeploy dependencies.\n\n1.0 (2009-07-05)\n================\n\n- Retested and added some content to GAE tutorial.\n\n- Edited \"Extending\" narrative docs chapter.\n\n- Added \"Deleting the Database\" section to the \"Defining Models\"\n  chapter of the traversal wiki tutorial.\n\n- Spell checking of narratives and tutorials.\n\n1.0b2 (2009-07-03)\n==================\n\n- ``remoteuserauthenticationpolicy`` ZCML directive didn't work\n  without an ``environ_key`` directive (didn't match docs).\n\n- Fix ``configure_zcml`` filespec check on Windows.  Previously if an\n  absolute filesystem path including a drive letter was passed as\n  ``filename`` (or as ``configure_zcml`` in the options dict) to\n  ``repoze.bfg.router.make_app``, it would be treated as a\n  package:resource_name specification.\n\n- Fix inaccuracies and import errors in bfgwiki (traversal+ZODB) and\n  bfgwiki2 (urldispatch+SA) tutorials.\n\n- Use bfgsite index for all tutorial setup.cfg files.\n\n- Full documentation grammar/style/spelling audit.\n\n1.0b1 (2009-07-02)\n==================\n\nFeatures\n--------\n\n- Allow a Paste config file (``configure_zcml``) value or an\n  environment variable (``BFG_CONFIGURE_ZCML``) to name a ZCML file\n  (optionally package-relative) that will be used to bootstrap the\n  application.  Previously, the integrator could not influence which\n  ZCML file was used to do the boostrapping (only the original\n  application developer could do so).\n\nDocumentation\n-------------\n\n- Added a \"Resources\" chapter to the narrative documentation which\n  explains how to override resources within one package from another\n  package.\n\n- Added an \"Extending\" chapter to the narrative documentation which\n  explains how to extend or modify an existing BFG application using\n  another Python package and ZCML.\n\n1.0a9 (2009-07-01)\n==================\n\nFeatures\n--------\n\n- Make it possible to pass strings in the form\n  \"package_name:relative/path\" to APIs like ``render_template``,\n  ``render_template_to_response``, and ``get_template``.  Sometimes\n  the package in which a caller lives is a direct namespace package,\n  so the module which is returned is semi-useless for navigating from.\n  In this way, the caller can control the horizontal and vertical of\n  where things get looked up from.\n\n1.0a8 (2009-07-01)\n==================\n\nDeprecations\n------------\n\n- Deprecate the ``authentication_policy`` and ``authorization_policy``\n  arguments to ``repoze.bfg.router.make_app``.  Instead, developers\n  should use the various authentication policy ZCML directives\n  (``repozewho1authenticationpolicy``,\n  ``remoteuserauthenticationpolicy`` and\n  ``authtktauthenticationpolicy``) and the `aclauthorizationpolicy``\n  authorization policy directive as described in the changes to the\n  \"Security\" narrative documentation chapter and the wiki tutorials.\n\nFeatures\n--------\n\n- Add three new ZCML directives which configure authentication\n  policies:\n\n  - ``repozewho1authenticationpolicy``\n\n  - ``remoteuserauthenticationpolicy``\n\n  - ``authtktauthenticationpolicy``\n\n- Add a new ZCML directive which configures an ACL authorization\n  policy named ``aclauthorizationpolicy``.\n\nBug Fixes\n---------\n\n- Bug fix: when a ``repoze.bfg.resource.PackageOverrides`` class was\n  instantiated, and the package it was overriding already had a\n  ``__loader__`` attribute, it would fail at startup time, even if the\n  ``__loader__`` attribute was another PackageOverrides instance.  We\n  now replace any ``__loader__`` that is also a PackageOverrides\n  instance.  Symptom: ``ConfigurationExecutionError: <type\n  'exceptions.TypeError'>: Package <module 'karl.views' from\n  '/Users/chrism/projects/osi/bfgenv/src/karl/karl/views/__init__.pyc'>\n  already has a __loader__ (probably a module in a zipped egg)``.\n\n1.0a7 (2009-06-30)\n==================\n\nFeatures\n--------\n\n- Add a ``reload_resources`` configuration file setting (aka the\n  ``BFG_RELOAD_RESOURCES`` environment variable).  When this is set to\n  true, the server never needs to be restarted when moving files\n  between directory resource overrides (esp. for templates currently).\n\n- Add a ``reload_all`` configuration file setting (aka the\n  ``BFG_RELOAD_ALL`` environment variable) that implies both\n  ``reload_resources`` and ``reload_templates``.\n\n- The ``static`` helper view class now uses a ``PackageURLParser`` in\n  order to allow for the overriding of static resources (CSS / logo\n  files, etc) using the ``resource`` ZCML directive.  The\n  ``PackageURLParser`` class was added to a (new) ``static`` module in\n  BFG; it is a subclass of the ``StaticURLParser`` class in\n  ``paste.urlparser``.\n\n- The ``repoze.bfg.templating.renderer_from_cache`` function now\n  checks for the ``reload_resources`` setting; if it's true, it does\n  not register a template renderer (it won't use the registry as a\n  template renderer cache).\n\nDocumentation\n-------------\n\n- Add ``pkg_resources`` to the glossary.\n\n- Update the \"Environment\" docs to note the existence of\n  ``reload_resources`` and ``reload_all``.\n\n- Updated the ``bfg_alchemy`` paster template to include two views:\n  the view on the root shows a list of links to records;  the view on\n  a record shows the details for that object.\n\nInternal\n--------\n\n- Use a colon instead of a tab as the separator between package name\n  and relpath to form the \"spec\" when register a ITemplateRenderer.\n\n- Register a ``repoze.bfg.resource.OverrideProvider`` as a\n  pkg_resources provider only for modules which are known to have\n  overrides, instead of globally, when a <resource> directive is used\n  (performance).\n\n1.0a6 (2009-06-29)\n==================\n\nBug Fixes\n---------\n\n- Use ``caller_package`` function instead of ``caller_module``\n  function within ``templating`` to avoid needing to name the caller\n  module in resource overrides (actually match docs).\n\n- Make it possible to override templates stored directly in a module\n  with templates in a subdirectory of the same module, stored directly\n  within another module, or stored in a subdirectory of another module\n  (actually match docs).\n\n1.0a5 (2009-06-28)\n==================\n\nFeatures\n--------\n\n- A new ZCML directive exists named \"resource\".  This ZCML directive\n  allows you to override Chameleon templates within a package (both\n  directories full of templates and individual template files) with\n  other templates in the same package or within another package.  This\n  allows you to \"fake out\" a view's use of a template, causing it to\n  retrieve a different template than the one actually named by a\n  relative path to a call like\n  ``render_template_to_response('templates/mytemplate.pt')``.  For\n  example, you can override a template file by doing::\n\n    <resource\n      to_override=\"some.package:templates/mytemplate.pt\"\n      override_with=\"another.package:othertemplates/anothertemplate.pt\"\n     />\n\n  The string passed to \"to_override\" and \"override_with\" is named a\n  \"specification\".  The colon separator in a specification separates\n  the package name from a package-relative directory name.  The colon\n  and the following relative path are optional.  If they are not\n  specified, the override attempts to resolve every lookup into a\n  package from the directory of another package.  For example::\n\n    <resource\n      to_override=\"some.package\"\n      override_with=\"another.package\"\n     />\n\n\n  Individual subdirectories within a package can also be overridden::\n\n    <resource\n      to_override=\"some.package:templates/\"\n      override_with=\"another.package:othertemplates/\"\n     />\n\n  If you wish to override a directory with another directory, you must\n  make sure to attach the slash to the end of both the ``to_override``\n  specification and the ``override_with`` specification.  If you fail\n  to attach a slash to the end of a specification that points a\n  directory, you will get unexpected results.  You cannot override a\n  directory specification with a file specification, and vice versa (a\n  startup error will occur if you try).\n\n  You cannot override a resource with itself (a startup error will\n  occur if you try).\n\n  Only individual *package* resources may be overridden.  Overrides\n  will not traverse through subpackages within an overridden package.\n  This means that if you want to override resources for both\n  ``some.package:templates``, and ``some.package.views:templates``,\n  you will need to register two overrides.\n\n  The package name in a specification may start with a dot, meaning\n  that the package is relative to the package in which the ZCML file\n  resides.  For example::\n\n    <resource\n      to_override=\".subpackage:templates/\"\n      override_with=\"another.package:templates/\"\n     />\n\n  Overrides for the same ``to_overrides`` specification can be named\n  multiple times within ZCML.  Each ``override_with`` path will be\n  consulted in the order defined within ZCML, forming an override\n  search path.\n\n  Resource overrides can actually override resources other than\n  templates.  Any software which uses the ``pkg_resources``\n  ``get_resource_filename``, ``get_resource_stream`` or\n  ``get_resource_string`` APIs will obtain an overridden file when an\n  override is used.  However, the only built-in facility which uses\n  the ``pkg_resources`` API within BFG is the templating stuff, so we\n  only call out template overrides here.\n\n- Use the ``pkg_resources`` API to locate template filenames instead\n  of dead-reckoning using the ``os.path`` module.\n\n- The ``repoze.bfg.templating`` module now uses ``pkg_resources`` to\n  locate and register template files instead of using an absolute\n  path name.\n\n1.0a4 (2009-06-25)\n==================\n\nFeatures\n--------\n\n- Cause ``:segment`` matches in route paths to put a Unicode-decoded\n  and URL-dequoted value in the matchdict for the value matched.\n  Previously a non-decoded non-URL-dequoted string was placed in the\n  matchdict as the value.\n\n- Cause ``*remainder`` matches in route paths to put a *tuple* in the\n  matchdict dictionary in order to be able to present Unicode-decoded\n  and URL-dequoted values for the traversal path.  Previously a\n  non-decoded non-URL-dequoted string was placed in the matchdict as\n  the value.\n\n- Add optional ``max_age`` keyword value to the ``remember`` method of\n  ``repoze.bfg.authentication.AuthTktAuthenticationPolicy``; if this\n  value is passed to ``remember``, the generated cookie will have a\n  corresponding Max-Age value.\n\nDocumentation\n-------------\n\n- Add information to the URL Dispatch narrative documentation about\n  path pattern matching syntax.\n\nBug Fixes\n---------\n\n- Make ``route_url`` URL-quote segment replacements during generation.\n  Remainder segments are not quoted.\n\n1.0a3 (2009-06-24)\n==================\n\nImplementation Changes\n----------------------\n\n- ``repoze.bfg`` no longer relies on the Routes package to interpret\n  URL paths.  All known existing ``path`` patterns will continue to\n  work with the reimplemented logic, which lives in\n  ``repoze.bfg.urldispatch``.  ``<route>`` ZCML directives which use\n  certain attributes (uncommon ones) may not work (see \"Backwards\n  Incompatibilities\" below).\n\nBug Fixes\n---------\n\n- ``model_url`` when passed a request that was generated as a result\n  of a route match would fail in a call to ``route.generate``.\n\n- BFG-on-GAE didn't work due to a corner case bug in the fallback\n  Python implementation of ``threading.local`` (symptom:\n  \"Initialization arguments are not supported\").  Thanks to Michael\n  Bernstein for the bug report.\n\nDocumentation\n-------------\n\n- Added a \"corner case\" explanation to the \"Hybrid Apps\" chapter\n  explaining what to do when \"the wrong\" view is matched.\n\n- Use ``repoze.bfg.url.route_url`` API in tutorials rather than Routes\n  ``url_for`` API.\n\nFeatures\n--------\n\n- Added the ``repoze.bfg.url.route_url`` API.  This API allows you to\n  generate URLs based on ``<route>`` declarations.  See the URL\n  Dispatch narrative chapter and the \"repoze.bfg.url\" module API\n  documentation for more information.\n\nBackwards Incompatibilities\n---------------------------\n\n- As a result of disusing Routes, using the Routes ``url_for`` API\n  inside a BFG application (as was suggested by previous iterations of\n  tutorials) will no longer work.  Use the\n  ``repoze.bfg.url.route_url`` method instead.\n\n- The following attributes on the ``<route>`` ZCML directive no longer\n  work: ``encoding``, ``static``, ``filter``, ``condition_method``,\n  ``condition_subdomain``, ``condition_function``, ``explicit``, or\n  ``subdomains``.  These were all Routes features.\n\n- The ``<route>`` ZCML directive no longer supports the\n  ``<requirement>`` subdirective.  This was a Routes feature.\n\n1.0a2 (2009-06-23)\n==================\n\nBug Fixes\n---------\n\n- The ``bfg_routesalchemy`` paster template app tests failed due to a\n  mismatch between test and view signatures.\n\nFeatures\n--------\n\n- Add a ``view_for`` attribute to the ``route`` ZCML directive.  This\n  attribute should refer to an interface or a class (ala the ``for``\n  attribute of the ``view`` ZCML directive).\n\nDocumentation\n-------------\n\n- Conditional documentation in installation section (\"how to install a\n  Python interpreter\").\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``callback`` argument of the ``repoze.bfg.authentication``\n  authentication policies named ``RepozeWho1AuthenticationPolicy``,\n  ``RemoteUserAuthenticationPolicy``, and\n  ``AuthTktAuthenticationPolicy`` now must accept two positional\n  arguments: the original argument accepted by each (userid or\n  identity) plus a second argument, which will be the current request.\n  Apologies, this is required to service finding groups when there is\n  no \"global\" database connection.\n\n1.0a1 (2009-06-22)\n==================\n\nFeatures\n--------\n\n- A new ZCML directive was added named ``notfound``.  This ZCML\n  directive can be used to name a view that should be invoked when the\n  request can't otherwise be resolved to a view callable.  For example::\n\n    <notfound \n        view=\"helloworld.views.notfound_view\"/>\n\n- A new ZCML directive was added named ``forbidden``.  This ZCML\n  directive can be used to name a view that should be invoked when a\n  view callable for a request is found, but cannot be invoked due to\n  an authorization failure.  For example::\n\n   <forbidden\n       view=\"helloworld.views.forbidden_view\"/>\n\n- Allow views to be *optionally* defined as callables that accept only\n  a request object, instead of both a context and a request (which\n  still works, and always will).  The following types work as views in\n  this style:\n\n  - functions that accept a single argument ``request``, e.g.::\n\n      def aview(request):\n          pass\n\n  - new and old-style classes that have an ``__init__`` method that\n    accepts ``self, request``, e.g.::\n\n      def View(object):\n          __init__(self, request):\n             pass\n\n  - Arbitrary callables that have a ``__call__`` method that accepts\n    ``self, request``, e.g.::\n\n      def AView(object):\n          def __call__(self, request):\n             pass\n      view = AView()\n\n  This likely should have been the calling convention all along, as\n  the request has ``context`` as an attribute already, and with views\n  called as a result of URL dispatch, having the context in the\n  arguments is not very useful.  C'est la vie.\n\n- Cache the absolute path in the caller's package globals within\n  ``repoze.bfg.path`` to get rid of repeated (expensive) calls to\n  os.path.abspath.\n\n- Add ``reissue_time`` and ``timeout`` parameters to\n  ``repoze.bfg.authentication.AuthTktAuthenticationPolicy``\n  constructor.  If these are passed, cookies will be reset every so\n  often (cadged from the same change to repoze.who lately).\n\n- The matchdict related to the matching of a Routes route is available\n  on the request as the ``matchdict`` attribute:\n  ``request.matchdict``.  If no route matched, this attribute will be\n  None.\n\n- Make 404 responses slightly cheaper by showing\n  ``environ[\"PATH_INFO\"]`` on the notfound result page rather than the\n  fullly computed URL.\n\n- Move LRU cache implementation into a separate package\n  (``repoze.lru``).\n\n- The concepts of traversal and URL dispatch have been unified.  It is\n  now possible to use the same sort of factory as both a traversal\n  \"root factory\" and what used to be referred to as a urldispatch\n  \"context factory\".\n\n- When the root factory argument (as a first argument) passed to\n  ``repoze.bfg.router.make_app`` is ``None``, a *default* root factory\n  is used.  This is in support of using routes as \"root finders\"; it\n  supplants the idea that there is a default\n  ``IRoutesContextFactory``.\n\n- The `view`` ZCML statement and the ``repoze.bfg.view.bfg_view``\n  decorator now accept an extra argument: ``route_name``.  If a\n  ``route_name`` is specified, it must match the name of a previously\n  defined ``route`` statement.  When it is specified, the view will\n  only be called when that route matches during a request.\n\n- It is now possible to perform traversal *after* a route has matched.\n  Use the pattern ``*traverse`` in a ``<route>`` ``path`` attribute\n  within ZCML, and the path remainder which it matches will be used as\n  a traversal path.\n\n- When any route defined matches, the WSGI environment will now\n  contain a key ``bfg.routes.route`` (the Route object which matched),\n  and a key ``bfg.routes.matchdict`` (the result of calling route.match).\n\nDeprecations\n------------\n\n- Utility registrations against\n  ``repoze.bfg.interfaces.INotFoundView`` and\n  ``repoze.bfg.interfaces.IForbiddenView`` are now deprecated.  Use\n  the ``notfound`` and ``forbidden`` ZCML directives instead (see the\n  \"Hooks\" chapter for more information).  Such registrations will\n  continue to work, but the notfound and forbidden directives do\n  \"extra work\" to ensure that the callable named by the directive can\n  be called by the router even if it's a class or\n  request-argument-only view.\n\nRemovals\n--------\n\n- The ``IRoutesContext``, ``IRoutesContextFactory``, and\n  ``IContextNotFound`` interfaces were removed from\n  ``repoze.bfg.interfaces``.  These were never APIs.\n\n- The ``repoze.bfg.urldispatch.RoutesContextNotFound``,\n  ``repoze.bfg.urldispatch.RoutesModelTraverser`` and\n  ``repoze.bfg.urldispatch.RoutesContextURL`` classes were removed.\n  These were also never APIs.\n\nBackwards Incompatibilities\n---------------------------\n\n- Moved the ``repoze.bfg.push`` module, which implemented the ``pushpage``\n  decorator, into a separate distribution, ``repoze.bfg.pushpage``.\n  Applications which used this decorator should continue to work after\n  adding that distribution to their installation requirements.\n\n- Changing the default request factory via an IRequestFactory utility\n  registration (as used to be documented in the \"Hooks\" chapter's\n  \"Changing the request factory\" section) is no longer supported.  The\n  dance to manufacture a request is complicated as a result of\n  unifying traversal and url dispatch, making it highly unlikely for\n  anyone to be able to override it properly.  For those who just want\n  to decorate or modify a request, use a NewRequestEvent subscriber\n  (see the Events chapter in the documentation).\n\n- The ``repoze.bfg.IRequestFactory`` interface was removed.  See the\n  bullet above for why.\n\n- Routes \"context factories\" (spelled as the factory argument to a\n  route statement in ZCML) must now expect the WSGI environ as a\n  single argument rather than a set of keyword arguments.  They can\n  obtain the match dictionary by asking for\n  environ['bfg.routes.matchdict'].  This is the same set of keywords\n  that used to be passed to urldispatch \"context factories\" in BFG 0.9\n  and below.\n\n- Using the ``@zope.component.adapter`` decorator on a bfg view\n  function no longer works.  Use the ``@repoze.bfg.view.bfg_view``\n  decorator instead to mark a function (or a class) as a view.\n\n- The name under which the matching route object is found in the\n  environ was changed from ``bfg.route`` to ``bfg.routes.route``.\n\n- Finding the root is now done *before* manufacturing a request object\n  (and sending a new request event) within the router (it used to be\n  performed afterwards).\n\n- Adding ``*path_info`` to a route no longer changes the PATH_INFO for\n  a request that matches using URL dispatch.  This feature was only\n  there to service the ``repoze.bfg.wsgi.wsgiapp2`` decorator and it\n  did it wrong; use ``*subpath`` instead now.\n\n- The values of ``subpath``, ``traversed``, and ``virtual_root_path``\n  attached to the request object are always now tuples instead of\n  lists (performance).\n\nBug Fixes\n---------\n\n- The ``bfg_alchemy`` Paster template named \"repoze.tm\" in its\n  pipeline rather than \"repoze.tm2\", causing the startup to fail.\n\n- Move BBB logic for registering an\n  IAuthenticationPolicy/IForbiddenView/INotFoundView based on older\n  concepts from the router module's ``make_app`` function into the\n  ``repoze.bfg.zcml.zcml_configure`` callable, to service\n  compatibility with scripts that use \"zope.configuration.xmlconfig\"\n  (replace with ``repoze.bfg.zml.zcml_configure`` as necessary to get\n  BBB logic)\n\nDocumentation\n-------------\n\n- Add interface docs related to how to create authentication policies\n  and authorization policies to the \"Security\" narrative chapter.\n\n- Added a (fairly sad) \"Combining Traversal and URL Dispatch\" chapter\n  to the narrative documentation.  This explains the usage of\n  ``*traverse`` and ``*subpath`` in routes URL patters.\n\n- A \"router\" chapter explaining the request/response lifecycle at a\n  high level was added.\n\n- Replaced all mentions and explanations of a routes \"context factory\"\n  with equivalent explanations of a \"root factory\" (context factories\n  have been disused).\n\n- Updated Routes bfgwiki2 tutorial to reflect the fact that context\n  factories are now no longer used.\n\n0.9.1 (2009-06-02)\n==================\n\nFeatures\n--------\n\n- Add API named ``repoze.bfg.settings.get_settings`` which retrieves a\n  derivation of values passed as the ``options`` value of\n  ``repoze.bfg.router.make_app``.  This API should be preferred\n  instead of using getUtility(ISettings).  I added a new\n  ``repoze.bfg.settings`` API document as well.\n\nBug Fixes\n---------\n\n- Restored missing entry point declaration for bfg_alchemy paster\n  template, which was accidentally removed in 0.9.\n\nDocumentation\n-------------\n\n- Fix a reference to ``wsgiapp`` in the ``wsgiapp2`` API documentation\n  within the ``repoze.bfg.wsgi`` module.\n\nAPI Removals\n------------\n\n- The ``repoze.bfg.location.locate`` API was removed: it didn't do\n  enough to be very helpful and had a misleading name.\n\n0.9 (2009-06-01)\n================\n\nBug Fixes\n---------\n\n- It was not possible to register a custom ``IRoutesContextFactory``\n  for use as a default context factory as documented in the \"Hooks\"\n  chapter.\n\nFeatures\n--------\n\n- The ``request_type`` argument of ZCML ``view`` declarations and\n  ``bfg_view`` decorators can now be one of the strings ``GET``,\n  ``POST``, ``PUT``, ``DELETE``, or ``HEAD`` instead of a reference to\n  the respective interface type imported from\n  ``repoze.bfg.interfaces``.\n\n- The ``route`` ZCML directive now accepts ``request_type`` as an\n  alias for its ``condition_method`` argument for symmetry with the\n  ``view`` directive.\n\n- The ``bfg_routesalchemy`` paster template now provides a unit test\n  and actually uses the database during a view rendering.\n\nRemovals\n--------\n\n- Remove ``repoze.bfg.threadlocal.setManager``.  It was only used in\n  unit tests.\n\n- Remove ``repoze.bfg.wsgi.HTTPException``,\n  ``repoze.bfg.wsgi.NotFound``, and ``repoze.bfg.wsgi.Unauthorized``.\n  These classes were disused with the introduction of the\n  ``IUnauthorizedView`` and ``INotFoundView`` machinery.\n\nDocumentation\n-------------\n\n- Add description to narrative templating chapter about how to use\n  Chameleon text templates.\n\n- Changed Views narrative chapter to use method strings rather than\n  interface types, and moved advanced interface type usage to Events\n  narrative chapter.\n\n- Added a Routes+SQLAlchemy wiki tutorial.\n\n0.9a8 (2009-05-31)\n==================\n\nFeatures\n--------\n\n- It is now possible to register a custom\n  ``repoze.bfg.interfaces.INotFoundView`` for a given application.\n  This feature replaces the\n  ``repoze.bfg.interfaces.INotFoundAppFactory`` feature previously\n  described in the Hooks chapter.  The INotFoundView will be called\n  when the framework detects that a view lookup done as a result of a\n  request fails; it should accept a context object and a request\n  object; it should return an IResponse object (a webob response,\n  basically).  See the Hooks narrative chapter of the BFG docs for\n  more info.\n\n- The error presented when a view invoked by the router returns a\n  non-response object now includes the view's name for troubleshooting\n  purposes.\n\nBug Fixes\n---------\n\n- A \"new response\" event is emitted for forbidden and notfound views.\n\nDeprecations\n------------\n\n- The ``repoze.bfg.interfaces.INotFoundAppFactory`` interface has been\n  deprecated in favor of using the new\n  ``repoze.bfg.interfaces.INotFoundView`` mechanism.\n\nRenames\n-------\n\n- Renamed ``repoze.bfg.interfaces.IForbiddenResponseFactory`` to\n  ``repoze.bfg.interfaces.IForbiddenView``.\n\n0.9a7 (2009-05-30)\n==================\n\nFeatures\n--------\n\n- Remove \"context\" argument from ``effective_principals`` and\n  ``authenticated_userid`` function APIs in ``repoze.bfg.security``,\n  effectively a doing reversion to 0.8 and before behavior.  Both\n  functions now again accept only the ``request`` parameter.\n\n0.9a6 (2009-05-29)\n==================\n\nDocumentation\n-------------\n\n- Changed \"BFG Wiki\" tutorial to use AuthTktAuthenticationPolicy\n  rather than repoze.who.\n\nFeatures\n--------\n\n- Add an AuthTktAuthenticationPolicy.  This policy retrieves\n  credentials from an auth_tkt cookie managed by the application\n  itself (instead of relying on an upstream data source for\n  authentication data).  See the Security API chapter of the\n  documentation for more info.\n\n- Allow RemoteUserAuthenticationPolicy and\n  RepozeWho1AuthenticationPolicy to accept various constructor\n  arguments.  See the Security API chapter of the documentation for\n  more info.\n\n0.9a5 (2009-05-28)\n==================\n\nFeatures\n--------\n\n- Add a ``get_app`` API functions to the ``paster`` module.  This\n  obtains a WSGI application from a config file given a config file\n  name and a section name.  See the ``repoze.bfg.paster`` API docs for\n  more information.\n\n- Add a new module named ``scripting``.  It contains a ``get_root``\n  API function, which, provided a Router instance, returns a traversal\n  root object and a \"closer\".  See the ``repoze.bfg.scripting`` API\n  docs for more info.\n\n0.9a4 (2009-05-27)\n==================\n\nBug Fixes\n---------\n\n- Try checking for an \"old style\" security policy *after* we parse\n  ZCML (thinko).\n\n0.9a3 (2009-05-27)\n==================\n\nFeatures\n--------\n\n- Allow IAuthenticationPolicy and IAuthorizationPolicy to be\n  overridden via ZCML registrations (do ZCML parsing after\n  registering these in router.py).\n\nDocumentation\n-------------\n\n- Added \"BFG Wiki\" tutorial to documentation; it describes\n  step-by-step how to create a traversal-based ZODB application with\n  authentication.\n\nDeprecations\n------------\n\n- Added deprecations for imports of ``ACLSecurityPolicy``,\n  ``InheritingACLSecurityPolicy``, ``RemoteUserACLSecurityPolicy``,\n  ``RemoteUserInheritingACLSecurityPolicy``, ``WhoACLSecurityPolicy``,\n  and ``WhoInheritingACLSecurityPolicy`` from the\n  ``repoze.bfg.security`` module; for the meantime (for backwards\n  compatibility purposes) these live in the ``repoze.bfg.secpols``\n  module.  Note however, that the entire concept of a \"security\n  policy\" is deprecated in BFG in favor of separate authentication and\n  authorization policies, so any use of a security policy will\n  generate additional deprecation warnings even if you do start using\n  ``repoze.bfg.secpols``.  ``repoze.bfg.secpols`` will disappear in a\n  future release of ``repoze.bfg``.\n\nDeprecated Import Alias Removals\n--------------------------------\n\n- Remove ``repoze.bfg.template`` module.  All imports from this\n  package have been deprecated since 0.3.8.  Instead, import\n  ``get_template``, ``render_template``, and\n  ``render_template_to_response`` from the\n  ``repoze.bfg.chameleon_zpt`` module. \n\n- Remove backwards compatibility import alias for\n  ``repoze.bfg.traversal.split_path`` (deprecated since 0.6.5).  This\n  must now be imported as ``repoze.bfg.traversal.traversal_path``).\n\n- Remove backwards compatibility import alias for\n  ``repoze.bfg.urldispatch.RoutesContext`` (deprecated since 0.6.5).\n  This must now be imported as\n  ``repoze.bfg.urldispatch.DefaultRoutesContext``.\n\n- Removed backwards compatibility import aliases for\n  ``repoze.bfg.router.get_options`` and ``repoze.bfg.router.Settings``\n  (deprecated since 0.6.2).  These both must now be imported from\n  ``repoze.bfg.settings``.\n\n- Removed backwards compatibility import alias for\n  ``repoze.bfg.interfaces.IRootPolicy`` (deprecated since 0.6.2).  It\n  must be imported as ``repoze.bfg.interfaces.IRootFactory`` now.\n\n- Removed backwards compatibility import alias for\n  ``repoze.bfg.interfaces.ITemplate`` (deprecated since 0.4.4).  It\n  must be imported as ``repoze.bfg.interfaces.ITemplateRenderer`` now.\n\n- Removed backwards compatibility import alias for\n  ``repoze.bfg.interfaces.ITemplateFactory`` (deprecated since 0.4.4).\n  It must be imported as\n  ``repoze.bfg.interfaces.ITemplateRendererFactory`` now.\n\n- Removed backwards compatibility import alias for\n  ``repoze.bfg.chameleon_zpt.ZPTTemplateFactory`` (deprecated since\n  0.4.4).  This must be imported as ``repoze.bfg.ZPTTemplateRenderer``\n  now.\n\n0.9a2 (2009-05-27)\n==================\n\nFeatures\n--------\n\n- A paster command has been added named \"bfgshell\".  This command can\n  be used to get an interactive prompt with your BFG root object in\n  the global namespace.  E.g.::\n\n    bin/paster bfgshell /path/to/myapp.ini myapp\n\n  See the ``Project`` chapter in the BFG documentation for more\n  information.\n\nDeprecations\n------------\n\n- The name ``repoze.bfg.registry.registry_manager`` was never an API,\n  but scripts in the wild were using it to set up an environment for\n  use under a debug shell.  A backwards compatibility shim has been\n  added for this purpose, but the feature is deprecated.\n\n0.9a1 (2009-5-27)\n=================\n\nFeatures\n--------\n\n- New API functions named ``forget`` and ``remember`` are available in\n  the ``security`` module.  The ``forget`` function returns headers\n  which will cause the currently authenticated user to be logged out\n  when set in a response.  The ``remember`` function (when passed the\n  proper arguments) will return headers which will cause a principal\n  to be \"logged in\" when set in a response.  See the Security API\n  chapter of the docs for more info.\n\n- New keyword arguments to the ``repoze.bfg.router.make_app`` call\n  have been added: ``authentication_policy`` and\n  ``authorization_policy``.  These should, respectively, be an\n  implementation of an authentication policy (an object implementing\n  the ``repoze.bfg.interfaces.IAuthenticationPolicy`` interface) and\n  an implementation of an authorization policy (an object implementing\n  ``repoze.bfg.interfaces.IAuthorizationPolicy)``.  Concrete\n  implementations of authentication policies exist in\n  ``repoze.bfg.authentication``.  Concrete implementations of\n  authorization policies exist in ``repoze.bfg.authorization``.\n\n  Both ``authentication_policy`` and ``authorization_policy`` default\n  to ``None``.\n\n  If ``authentication_policy`` is ``None``, but\n  ``authorization_policy`` is *not* ``None``, then\n  ``authorization_policy`` is ignored (the ability to do authorization\n  depends on authentication).\n\n  If the ``authentication_policy`` argument is *not* ``None``, and the\n  ``authorization_policy`` argument *is* ``None``, the authorization\n  policy defaults to an authorization implementation that uses ACLs\n  (``repoze.bfg.authorization.ACLAuthorizationPolicy``).\n\n  We no longer encourage configuration of \"security policies\" using\n  ZCML, as previously we did for ``ISecurityPolicy``.  This is because\n  it's not uncommon to need to configure settings for concrete\n  authorization or authentication policies using paste .ini\n  parameters; the app entry point for your application is the natural\n  place to do this.\n\n- Two new abstractions have been added in the way of adapters used by\n  the system: an ``IAuthorizationPolicy`` and an\n  ``IAuthenticationPolicy``.  A combination of these (as registered by\n  the ``securitypolicy`` ZCML directive) take the place of the\n  ``ISecurityPolicy`` abstraction in previous releases of repoze.who.\n  The API functions in ``repoze.who.security`` (such as\n  ``authentication_userid``, ``effective_principals``,\n  ``has_permission``, and so on) have been changed to try to make use\n  of these new adapters.  If you're using an older ``ISecurityPolicy``\n  adapter, the system will still work, but it will print deprecation\n  warnings when such a policy is used.\n\n- The way the (internal) IViewPermission utilities registered via ZCML\n  are invoked has changed.  They are purely adapters now, returning a\n  boolean result, rather than returning a callable. You shouldn't have\n  been using these anyway. ;-)\n\n- New concrete implementations of IAuthenticationPolicy have been\n  added to the ``repoze.bfg.authentication`` module:\n  ``RepozeWho1AuthenticationPolicy`` which uses ``repoze.who``\n  identity to retrieve authentication data from and\n  ``RemoteUserAuthenticationPolicy``, which uses the ``REMOTE_USER``\n  value in the WSGI environment to retrieve authentication data.\n\n- A new concrete implementation of IAuthorizationPolicy has been added\n  to the ``repoze.bfg.authorization`` module:\n  ``ACLAuthorizationPolicy`` which uses ACL inheritance to do\n  authorization.\n\n- It is now possible to register a custom\n  ``repoze.bfg.interfaces.IForbiddenResponseFactory`` for a given\n  application.  This feature replaces the\n  ``repoze.bfg.interfaces.IUnauthorizedAppFactory`` feature previously\n  described in the Hooks chapter.  The IForbiddenResponseFactory will\n  be called when the framework detects an authorization failure; it\n  should accept a context object and a request object; it should\n  return an IResponse object (a webob response, basically).  Read the\n  below point for more info and see the Hooks narrative chapter of the\n  BFG docs for more info.\n\nBackwards Incompatibilities\n---------------------------\n\n- Custom NotFound and Forbidden (nee' Unauthorized) WSGI applications\n  (registered as a utility for INotFoundAppFactory and\n  IUnauthorizedAppFactory) could rely on an environment key named\n  ``message`` describing the circumstance of the response.  This key\n  has been renamed to ``repoze.bfg.message`` (as per the WSGI spec,\n  which requires environment extensions to contain dots).\n\nDeprecations\n------------\n\n- The ``repoze.bfg.interfaces.IUnauthorizedAppFactory`` interface has\n  been deprecated in favor of using the new\n  ``repoze.bfg.interfaces.IForbiddenResponseFactory`` mechanism.\n\n- The ``view_execution_permitted`` API should now be imported from the\n  ``repoze.bfg.security`` module instead of the ``repoze.bfg.view``\n  module.\n\n- The ``authenticated_userid`` and ``effective_principals`` APIs in\n  ``repoze.bfg.security`` used to only take a single argument\n  (request).  They now accept two arguments (``context`` and\n  ``request``).  Calling them with a single argument is still\n  supported but issues a deprecation warning.  (NOTE: this change was\n  reverted in 0.9a7; meaning the 0.9 versions of these functions\n  again accept ``request`` only, just like 0.8 and before).\n\n- Use of \"old-style\" security policies (those base on ISecurityPolicy)\n  is now deprecated.  See the \"Security\" chapter of the docs for info\n  about activating an authorization policy and an authentication poicy.\n\n0.8.1 (2009-05-21)\n==================\n\nFeatures\n--------\n\n- Class objects may now be used as view callables (both via ZCML and\n  via use of the ``bfg_view`` decorator in Python 2.6 as a class\n  decorator).  The calling semantics when using a class as a view\n  callable is similar to that of using a class as a Zope \"browser\n  view\": the class' ``__init__`` must accept two positional parameters\n  (conventionally named ``context``, and ``request``).  The resulting\n  instance must be callable (it must have a ``__call__`` method).\n  When called, the instance should return a response.  For example::\n\n    from webob import Response\n\n    class MyView(object):\n        def __init__(self, context, request):\n            self.context = context\n            self.request = request\n\n        def __call__(self):\n            return Response('hello from %s!' % self.context)\n\n   See the \"Views\" chapter in the documentation and the\n   ``repoze.bfg.view`` API documentation for more information.\n\n- Removed the pickling of ZCML actions (the code that wrote\n  ``configure.zcml.cache`` next to ``configure.zcml`` files in\n  projects).  The code which managed writing and reading of the cache\n  file was a source of subtle bugs when users switched between\n  imperative (e.g. ``@bfg_view``) registrations and declarative\n  registrations (e.g. the ``view`` directive in ZCML) on the same\n  project. On a moderately-sized project (535 ZCML actions and 15 ZCML\n  files), executing actions read from the pickle was saving us only\n  about 200ms (2.5 sec vs 2.7 sec average). On very small projects (1\n  ZCML file and 4 actions), startup time was comparable, and sometimes\n  even slower when reading from the pickle, and both ways were so fast\n  that it really just didn't matter anyway.\n\n0.8 (2009-05-18)\n================\n\nFeatures\n--------\n\n- Added a ``traverse`` function to the ``repoze.bfg.traversal``\n  module.  This function may be used to retrieve certain values\n  computed during path resolution.  See the Traversal API chapter of\n  the documentation for more information about this function.\n\nDeprecations\n------------\n\n- Internal: ``ITraverser`` callables should now return a dictionary\n  rather than a tuple.  Up until 0.7.0, all ITraversers were assumed\n  to return a 3-tuple.  In 0.7.1, ITraversers were assumed to return a\n  6-tuple.  As (by evidence) it's likely we'll need to add further\n  information to the return value of an ITraverser callable, 0.8\n  assumes that an ITraverser return a dictionary with certain elements\n  in it.  See the ``repoze.bfg.interfaces.ITraverser`` interface for\n  the list of keys that should be present in the dictionary.\n  ``ITraversers`` which return tuples will still work, although a\n  deprecation warning will be issued.\n\nBackwards Incompatibilities\n---------------------------\n\n- If your code used the ITraverser interface directly (not via an API\n  function such as ``find_model``) via an adapter lookup, you'll need\n  to change your code to expect a dictionary rather than a 3- or\n  6-tuple if your code ever gets return values from the default\n  ModelGraphTraverser or RoutesModelTraverser adapters.\n\n0.8a7 (2009-05-16)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``RoutesMapper`` class in ``repoze.bfg.urldispatch`` has been\n  removed, as well as its documentation.  It had been deprecated since\n  0.6.3.  Code in ``repoze.bfg.urldispatch.RoutesModelTraverser``\n  which catered to it has also been removed.\n\n- The semantics of the ``route`` ZCML directive have been simplified.\n  Previously, it was assumed that to use a route, you wanted to map a\n  route to an externally registered view.  The new ``route`` directive\n  instead has a ``view`` attribute which is required, specifying the\n  dotted path to a view callable.  When a route directive is\n  processed, a view is *registered* using the name attribute of the\n  route directive as its name and the callable as its value.  The\n  ``view_name`` and ``provides`` attributes of the ``route`` directive\n  are therefore no longer used.  Effectively, if you were previously\n  using the ``route`` directive, it means you must change a pair of\n  ZCML directives that look like this::\n\n    <route\n       name=\"home\"\n       path=\"\"\n       view_name=\"login\"\n       factory=\".models.root.Root\"\n     />\n\n    <view\n       for=\".models.root.Root\"\n       name=\"login\"\n       view=\".views.login_view\"\n     />\n    \n  To a ZCML directive that looks like this::\n\n    <route\n       name=\"home\"\n       path=\"\"\n       view=\".views.login_view\"\n       factory=\".models.root.Root\"\n     />\n\n  In other words, to make old code work, remove the ``view``\n  directives that were only there to serve the purpose of backing\n  ``route`` directives, and move their ``view=`` attribute into the\n  ``route`` directive itself.\n\n  This change also necessitated that the ``name`` attribute of the\n  ``route`` directive is now required.  If you were previously using\n  ``route`` directives without a ``name`` attribute, you'll need to\n  add one (the name is arbitrary, but must be unique among all\n  ``route`` and ``view`` statements).\n\n  The ``provides`` attribute of the ``route`` directive has also been\n  removed.  This directive specified a sequence of interface types\n  that the generated context would be decorated with.  Since route\n  views are always generated now for a single interface\n  (``repoze.bfg.IRoutesContext``) as opposed to being looked up\n  arbitrarily, there is no need to decorate any context to ensure a\n  view is found.\n\nDocumentation\n-------------\n\n- Added API docs for the ``repoze.bfg.testing`` methods\n  ``registerAdapter``, ``registerUtiity``, ``registerSubscriber``, and\n  ``cleanUp``.\n\n- Added glossary entry for \"root factory\".\n\n- Noted existence of ``repoze.bfg.pagetemplate`` template bindings in\n  \"Available Add On Template System Bindings\" in Templates chapter in\n  narrative docs.\n\n- Update \"Templates\" narrative chapter in docs (expand to show a\n  sample template and correct macro example).\n\nFeatures\n--------\n\n- Courtesty Carlos de la Guardia, added an ``alchemy`` Paster\n  template.  This paster template sets up a BFG project that uses\n  SQAlchemy (with SQLite) and uses traversal to resolve URLs.  (no\n  Routes areused).  This template can be used via ``paster create -t\n  bfg_alchemy``.\n\n- The Routes ``Route`` object used to resolve the match is now put\n  into the environment as ``bfg.route`` when URL dispatch is used.\n\n- You can now change the default Routes \"context factory\" globally.\n  See the \"ZCML Hooks\" chapter of the documentation (in the \"Changing\n  the Default Routes Context Factory\" section).\n\n0.8a6 (2009-05-11)\n==================\n\nFeatures\n--------\n\n- Added a ``routesalchemy`` Paster template.  This paster template\n  sets up a BFG project that uses SQAlchemy (with SQLite) and uses\n  Routes exclusively to resolve URLs (no traversal root factory is\n  used).  This template can be used via ``paster create -t\n  bfg_routesalchemy``.\n\nDocumentation\n-------------\n\n- Added documentation to the URL Dispatch chapter about how to catch\n  the root URL using a ZCML ``route`` directive.\n\n- Added documentation to the URL Dispatch chapter about how to perform\n  a cleanup function at the end of a request (e.g. close the SQL\n  connection).\n\nBug Fixes\n---------\n\n- In version 0.6.3, passing a ``get_root`` callback (a \"root factory\")\n  to ``repoze.bfg.router.make_app`` became optional if any ``route``\n  declaration was made in ZCML.  The intent was to make it possible to\n  disuse traversal entirely, instead relying entirely on URL dispatch\n  (Routes) to resolve all contexts.  However a compound set of bugs\n  prevented usage of a Routes-based root view (a view which responds\n  to \"/\").  One bug existed in `repoze.bfg.urldispatch``, another\n  existed in Routes itself.\n\n  To resolve this issue, the urldispatch module was fixed, and a fork\n  of the Routes trunk was put into the \"dev\" index named\n  ``Routes-1.11dev-chrism-home``.  The source for the fork exists at\n  ``http://bitbucket.org/chrism/routes-home/`` (broken link);\n  its contents have been merged into the Routes trunk\n  (what will be Routes 1.11).\n\n0.8a5 (2009-05-08)\n==================\n\nFeatures\n--------\n\n- Two new security policies were added:\n  RemoteUserInheritingACLSecurityPolicy and\n  WhoInheritingACLSecurityPolicy.  These are security policies which\n  take into account *all* ACLs defined in the lineage of a context\n  rather than stopping at the first ACL found in a lineage.  See the\n  \"Security\" chapter of the API documentation for more information.\n\n- The API and narrative documentation dealing with security was\n  changed to introduce the new \"inheriting\" security policy variants.\n\n- Added glossary entry for \"lineage\".\n\nDeprecations\n------------\n\n- The security policy previously named\n  ``RepozeWhoIdentityACLSecurityPolicy`` now has the slightly saner\n  name of ``WhoACLSecurityPolicy``.  A deprecation warning is emitted\n  when this policy is imported under the \"old\" name; usually this is\n  due to its use in ZCML within your application.  If you're getting\n  this deprecation warning, change your ZCML to use the new name,\n  e.g. change::\n\n   <utility\n     provides=\"repoze.bfg.interfaces.ISecurityPolicy\"\n     factory=\"repoze.bfg.security.RepozeWhoIdentityACLSecurityPolicy\"\n     />\n\n  To::\n\n   <utility\n     provides=\"repoze.bfg.interfaces.ISecurityPolicy\"\n     factory=\"repoze.bfg.security.WhoACLSecurityPolicy\"\n     />\n\n0.8a4 (2009-05-04)\n==================\n\nFeatures\n--------\n\n- ``zope.testing`` is no longer a direct dependency, although our\n  dependencies (such as ``zope.interface``, ``repoze.zcml``, etc)\n  still depend on it.\n\n- Tested on Google App Engine.  Added a tutorial to the documentation\n  explaining how to deploy a BFG app to GAE.\n\nBackwards Incompatibilities\n---------------------------\n\n- Applications which rely on ``zope.testing.cleanup.cleanUp`` in unit\n  tests can still use that function indefinitely.  However, for\n  maximum forward compatibility, they should import ``cleanUp`` from\n  ``repoze.bfg.testing`` instead of from ``zope.testing.cleanup``.\n  The BFG paster templates and docs have been changed to use this\n  function instead of the ``zope.testing.cleanup`` version.\n\n0.8a3 (2009-05-03)\n===================\n\nFeatures\n--------\n\n- Don't require a successful import of ``zope.testing`` at BFG\n  application runtime.  This allows us to get rid of ``zope.testing``\n  on platforms like GAE which have file limits.\n\n0.8a2 (2009-05-02)\n==================\n\nFeatures\n--------\n\n- We no longer include the ``configure.zcml`` of the ``chameleon.zpt``\n  package within the ``configure.zcml`` of the \"repoze.bfg.includes\"\n  package.  This has been a no-op for some time now.\n\n- The ``repoze.bfg.chameleon_zpt`` package no longer imports from\n  ``chameleon.zpt`` at module scope, deferring the import until later\n  within a method call.  The ``chameleon.zpt`` package can't be\n  imported on platforms like GAE.\n\n0.8a1 (2009-05-02)\n==================\n\nDeprecation Warning and Import Alias Removals\n---------------------------------------------\n\n- Since version 0.6.1, a deprecation warning has been emitted when the\n  name ``model_url`` is imported from the ``repoze.bfg.traversal``\n  module.  This import alias (and the deprecation warning) has been\n  removed.  Any import of the ``model_url`` function will now need to\n  be done from ``repoze.bfg.url``; any import of the name\n  ``model_url`` from ``repoze.bfg.traversal`` will now fail.  This was\n  done to remove a dependency on zope.deferredimport.\n\n- Since version 0.6.5, a deprecation warning has been emitted when the\n  name ``RoutesModelTraverser`` is imported from the\n  ``repoze.bfg.traversal`` module.  This import alias (and the\n  deprecation warning) has been removed.  Any import of the\n  ``RoutesModelTraverser`` class will now need to be done from\n  ``repoze.bfg.urldispatch``; any import of the name\n  ``RoutesModelTraverser`` from ``repoze.bfg.traversal`` will now\n  fail.  This was done to remove a dependency on zope.deferredimport.\n\nFeatures\n--------\n\n- This release of ``repoze.bfg`` is \"C-free\".  This means it has no\n  hard dependencies on any software that must be compiled from C\n  source at installation time.  In particular, ``repoze.bfg`` no\n  longer depends on the ``lxml`` package.\n\n  This change has introduced some backwards incompatibilities,\n  described in the \"Backwards Incompatibilities\" section below.\n\n- This release was tested on Windows XP.  It appears to work fine and\n  all the tests pass.\n\nBackwards Incompatibilities\n---------------------------\n\nIncompatibilities related to making ``repoze.bfg`` \"C-free\":\n\n- Removed the ``repoze.bfg.chameleon_genshi`` module, and thus support\n  for Genshi-style chameleon templates.  Genshi-style Chameleon\n  templates depend upon ``lxml``, which is implemented in C (as\n  opposed to pure Python) and the ``repoze.bfg`` core is \"C-free\" as\n  of this release. You may get Genshi-style Chameleon support back by\n  installing the ``repoze.bfg.chameleon_genshi`` package availalable\n  from https://pypi.org/project/repoze.bfg.chameleon_genshi/.\n  All existing code that depended on the ``chameleon_genshi`` module\n  prior to this release of ``repoze.bfg`` should work without change\n  after this addon is installed.\n\n- Removed the ``repoze.bfg.xslt`` module and thus support for XSL\n  templates.  The ``repoze.bfg.xslt`` module depended upon ``lxml``,\n  which is implemented in C, and the ``repoze.bfg`` core is \"C-free\"\n  as of this release.  You bay get XSL templating back by installing\n  the ``repoze.bfg.xslt`` package available from\n  ``http://svn.repoze.org/repoze.bfg.xslt/`` (broken link)\n  (also available in the index\n  at ``http://dist.repoze.org/bfg/0.8/simple)`` (broken link).\n  All existing code that\n  depended upon the ``xslt`` module prior to this release of\n  ``repoze.bfg`` should work without modification after this addon is\n  installed.\n\n- Removed the ``repoze.bfg.interfaces.INodeTemplateRenderer``\n  interface and the an old b/w compat aliases from that interface to\n  ``repoze.bfg.interfaces.INodeTemplate``.  This interface must now be\n  imported from the ``repoze.bfg.xslt.interfaces`` package after\n  installation of the ``repoze.bfg.xslt`` addon package described\n  above as ``repoze.bfg.interfaces.INodeTemplateRenderer``.  This\n  interface was never part of any public API.\n\nOther backwards incompatibilities:\n\n- The ``render_template`` function in ``repoze.bfg.chameleon_zpt``\n  returns Unicode instead of a string.  Likewise, the individual\n  values returned by the iterable created by the\n  ``render_template_to_iterable`` function are also each Unicode.\n  This is actually a backwards incompatibility inherited from our new\n  use of the combination of ``chameleon.core`` 1.0b32 (the\n  non-lxml-depending version) and ``chameleon.zpt`` 1.0b16+ ; the\n  ``chameleon.zpt`` PageTemplateFile implementation used to return a\n  string, but now returns Unicode.\n\n0.7.1 (2009-05-01)\n==================\n\nIndex-Related\n-------------\n\n- The canonical package index location for ``repoze.bfg`` has changed.\n  The \"old\" index (``http://dist.repoze.org/lemonade/dev/simple``) (broken link)\n  has been superseded by a new index location\n  ``http://dist.repoze.org/bfg/current/simple`` (broken link).\n  The installation\n  documentation has been updated as well as the ``setup.cfg`` file in\n  this package.  The \"lemonade\" index still exists, but it is not\n  guaranteed to have the latest BFG software in it, nor will it be\n  maintained in the future.\n\nFeatures\n--------\n\n- The \"paster create\" templates have been modified to use links to the\n  new \"bfg.repoze.org\" and \"docs.repoze.org\" websites.\n\n- Added better documentation for virtual hosting at a URL prefix\n  within the virtual hosting docs chapter.\n\n- The interface for ``repoze.bfg.interfaces.ITraverser`` and the\n  built-in implementations that implement the interface\n  (``repoze.bfg.traversal.ModelGraphTraverser``, and\n  ``repoze.bfg.urldispatch.RoutesModelTraverser``) now expect the\n  ``__call__`` method of an ITraverser to return 3 additional\n  arguments: ``traversed``, ``virtual_root``, and\n  ``virtual_root_path`` (the old contract was that the ``__call__``\n  method of an ITraverser returned; three arguments, the contract new\n  is that it returns six).  ``traversed`` will be a sequence of\n  Unicode names that were traversed (including the virtual root path,\n  if any) or ``None`` if no traversal was performed, ``virtual_root``\n  will be a model object representing the virtual root (or the\n  physical root if traversal was not performed), and\n  ``virtual_root_path`` will be a sequence representing the virtual\n  root path (a sequence of Unicode names) or ``None`` if traversal was\n  not performed.\n\n  Six arguments are now returned from BFG ITraversers.  They are\n  returned in this order: ``context``, ``view_name``, ``subpath``,\n  ``traversed``, ``virtual_root``, and ``virtual_root_path``.\n\n  Places in the BFG code which called an ITraverser continue to accept\n  a 3-argument return value, although BFG will generate and log a\n  warning when one is encountered.\n\n- The request object now has the following attributes: ``traversed``\n  (the sequence of names traversed or ``None`` if traversal was not\n  performed), ``virtual_root`` (the model object representing the\n  virtual root, including the virtual root path if any), and\n  ``virtual_root_path`` (the seuquence of names representing the\n  virtual root path or ``None`` if traversal was not performed).\n\n- A new decorator named ``wsgiapp2`` was added to the\n  ``repoze.bfg.wsgi`` module.  This decorator performs the same\n  function as ``repoze.bfg.wsgi.wsgiapp`` except it fixes up the\n  ``SCRIPT_NAME``, and ``PATH_INFO`` environment values before\n  invoking the WSGI subapplication.\n\n- The ``repoze.bfg.testing.DummyRequest`` object now has default\n  attributes for ``traversed``, ``virtual_root``, and\n  ``virtual_root_path``.\n\n- The RoutesModelTraverser now behaves more like the Routes\n  \"RoutesMiddleware\" object when an element in the match dict is named\n  ``path_info`` (usually when there's a pattern like\n  ``http://foo/*path_info``).  When this is the case, the\n  ``PATH_INFO`` environment variable is set to the value in the match\n  dict, and the ``SCRIPT_NAME`` is appended to with the prefix of the\n  original ``PATH_INFO`` not including the value of the new variable.\n\n- The notfound debug now shows the traversed path, the virtual root,\n  and the virtual root path too.\n\n- Speed up / clarify 'traversal' module's 'model_path', 'model_path_tuple',\n  and '_model_path_list' functions.\n\nBackwards Incompatibilities\n---------------------------\n\n- In previous releases, the ``repoze.bfg.url.model_url``,\n  ``repoze.bfg.traversal.model_path`` and\n  ``repoze.bfg.traversal.model_path_tuple`` functions always ignored\n  the ``__name__`` argument of the root object in a model graph (\n  effectively replacing it with a leading ``/`` in the returned value)\n  when a path or URL was generated.  The code required to perform this\n  operation was not efficient.  As of this release, the root object in\n  a model graph *must* have a ``__name__`` attribute that is either\n  ``None`` or the empty string (``''``) for URLs and paths to be\n  generated properly from these APIs.  If your root model object has a\n  ``__name__`` argument that is not one of these values, you will need\n  to change your code for URLs and paths to be generated properly.  If\n  your model graph has a root node with a string ``__name__`` that is\n  not null, the value of ``__name__`` will be prepended to every path\n  and URL generated.\n\n- The ``repoze.bfg.location.LocationProxy`` class and the\n  ``repoze.bfg.location.ClassAndInstanceDescr`` class have both been\n  removed in order to be able to eventually shed a dependency on\n  ``zope.proxy``.  Neither of these classes was ever an API.\n\n- In all previous releases, the ``repoze.bfg.location.locate``\n  function worked like so: if a model did not explicitly provide the\n  ``repoze.bfg.interfaces.ILocation`` interface, ``locate`` returned a\n  ``LocationProxy`` object representing ``model`` with its\n  ``__parent__`` attribute assigned to ``parent`` and a ``__name__``\n  attribute assigned to ``__name__``.  In this release, the\n  ``repoze.bfg.location.locate`` function simply jams the ``__name__``\n  and ``__parent__`` attributes on to the supplied model\n  unconditionally, no matter if the object implements ILocation or\n  not, and it never returns a proxy.  This was done because the\n  LocationProxy behavior has now moved into an add-on package\n  (``repoze.bfg.traversalwrapper``), in order to eventually be able to\n  shed a dependency on ``zope.proxy``.\n\n- In all previous releases, by default, if traversal was used (as\n  opposed to URL-dispatch), and the root object supplied\n  the``repoze.bfg.interfaces.ILocation`` interface, but the children\n  returned via its ``__getitem__`` returned an object that did not\n  implement the same interface, ``repoze.bfg`` provided some\n  implicit help during traversal.  This traversal feature wrapped\n  subobjects from the root (and thereafter) that did not implement\n  ``ILocation`` in proxies which automatically provided them with a\n  ``__name__`` and ``__parent__`` attribute based on the name being\n  traversed and the previous object traversed.  This feature has now\n  been removed from the base ``repoze.bfg`` package for purposes of\n  eventually shedding a dependency on ``zope.proxy``.\n\n  In order to re-enable the wrapper behavior for older applications\n  which cannot be changed, register the \"traversalwrapper\"\n  ``ModelGraphTraverser`` as the traversal policy, rather than the\n  default ``ModelGraphTraverser``. To use this feature, you will need\n  to install the ``repoze.bfg.traversalwrapper`` package (an add-on\n  package, available at\n  https://pypi.org/project/repoze.bfg.traversalwrapper/) Then change your\n  application's ``configure.zcml`` to include the following stanza:\n\n    <adapter\n        factory=\"repoze.bfg.traversalwrapper.ModelGraphTraverser\"\n        provides=\"repoze.bfg.interfaces.ITraverserFactory\"\n        for=\"*\"\n        />\n\n   When this ITraverserFactory is used instead of the default, no\n   object in the graph (even the root object) must supply a\n   ``__name__`` or ``__parent__`` attribute.  Even if subobjects\n   returned from the root *do* implement the ILocation interface,\n   these will still be wrapped in proxies that override the object's\n   \"real\" ``__parent__`` and ``__name__`` attributes.\n\n   See also changes to the \"Models\" chapter of the documentation (in\n   the \"Location-Aware Model Instances\") section.\n\n0.7.0 (2009-04-11)\n==================\n\nBug Fixes\n---------\n\n- Fix a bug in ``repoze.bfg.wsgi.HTTPException``: the content length\n  was returned as an int rather than as a string.\n \n- Add explicit dependencies on ``zope.deferredimport``,\n  ``zope.deprecation``, and ``zope.proxy`` for forward compatibility\n  reasons (``zope.component`` will stop relying on\n  ``zope.deferredimport`` soon and although we use it directly, it's\n  only a transitive dependency, and ''zope.deprecation`` and\n  ``zope.proxy`` are used directly even though they're only transitive\n  dependencies as well).\n\n- Using ``model_url`` or ``model_path`` against a broken model graph\n  (one with models that had a non-root model with a ``__name__`` of\n  ``None``) caused an inscrutable error to be thrown: ( if not\n  ``_must_quote[cachekey].search(s): TypeError: expected string or\n  buffer``).  Now URLs and paths generated against graphs that have\n  None names in intermediate nodes will replace the None with the\n  empty string, and, as a result, the error won't be raised.  Of\n  course the URL or path will still be bogus.\n\nFeatures\n--------\n\n- Make it possible to have ``testing.DummyTemplateRenderer`` return\n  some nondefault string representation.\n\n- Added a new ``anchor`` keyword argument to ``model_url``.  If \n  ``anchor`` is present, its string representation will be used \n  as a named anchor in the generated URL (e.g. if ``anchor`` is \n  passed as ``foo`` and the model URL is \n  ``http://example.com/model/url``, the generated URL will be \n  ``http://example.com/model/url#foo``).\n\nBackwards Incompatibilities\n---------------------------\n\n- The default request charset encoding is now ``utf-8``.  As a result,\n  the request machinery will attempt to decode values from the utf-8\n  encoding to Unicode automatically when they are obtained via\n  ``request.params``, ``request.GET``, and ``request.POST``.  The\n  previous behavior of BFG was to return a bytestring when a value was\n  accessed in this manner.  This change will break form handling code\n  in apps that rely on values from those APIs being considered\n  bytestrings.  If you are manually decoding values from form\n  submissions in your application, you'll either need to change the\n  code that does that to expect Unicode values from\n  ``request.params``, ``request.GET`` and ``request.POST``, or you'll\n  need to explicitly reenable the previous behavior.  To reenable the\n  previous behavior, add the following to your application's\n  ``configure.zcml``::\n\n    <subscriber for=\"repoze.bfg.interfaces.INewRequest\"\n                handler=\"repoze.bfg.request.make_request_ascii\"/>\n\n  See also the documentation in the \"Views\" chapter of the BFG docs\n  entitled \"Using Views to Handle Form Submissions (Unicode and\n  Character Set Issues)\".\n\nDocumentation\n-------------\n\n- Add a section to the narrative Views chapter entitled \"Using Views\n  to Handle Form Submissions (Unicode and Character Set Issues)\"\n  explaining implicit decoding of form data values.\n\n0.6.9 (2009-02-16)\n==================\n\nBug Fixes\n---------\n\n- lru cache was unstable under concurrency (big surprise!) when it\n  tried to redelete a key in the cache that had already been deleted.\n  Symptom: line 64 in put:del data[oldkey]:KeyError: '/some/path'.\n  Now we just ignore the key error if we can't delete the key (it has\n  already been deleted).\n\n- Empty location names in model paths when generating a URL using\n  ``repoze.bfg.model_url`` based on a model obtained via traversal are\n  no longer ignored in the generated URL.  This means that if a\n  non-root model object has a ``__name__`` of ``''``, the URL will\n  reflect it (e.g. ``model_url`` will generate ``http://foo/bar//baz``\n  if an object with the ``__name__`` of ``''`` is a child of bar and\n  the parent of baz).  URLs generated with empty path segments are,\n  however, still irresolveable by the model graph traverser on request\n  ingress (the traverser strips empty path segment names).\n\nFeatures\n--------\n\n- Microspeedups of ``repoze.bfg.traversal.model_path``,\n  ``repoze.bfg.traversal.model_path_tuple``,\n  ``repoze.bfg.traversal.quote_path_segment``, and\n  ``repoze.bfg.url.urlencode``.\n\n- add zip_safe = false to setup.cfg.\n\nDocumentation\n-------------\n\n- Add a note to the ``repoze.bfg.traversal.quote_path_segment`` API\n  docs about caching of computed values.\n\nImplementation Changes\n----------------------\n\n- Simplification of\n  ``repoze.bfg.traversal.TraversalContextURL.__call__`` (it now uses\n  ``repoze.bfg.traversal.model_path`` instead of rolling its own\n  path-generation).\n\n0.6.8 (2009-02-05)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``repoze.bfg.traversal.model_path`` API now returns a *quoted*\n  string rather than a string represented by series of unquoted\n  elements joined via ``/`` characters.  Previously it returned a\n  string or unicode object representing the model path, with each\n  segment name in the path joined together via ``/`` characters,\n  e.g. ``/foo /bar``.  Now it returns a string, where each segment is\n  a UTF-8 encoded and URL-quoted element e.g. ``/foo%20/bar``.  This\n  change was (as discussed briefly on the repoze-dev maillist)\n  necessary to accommodate model objects which themselves have\n  ``__name__`` attributes that contain the ``/`` character.\n\n  For people that have no models that have high-order Unicode\n  ``__name__`` attributes or ``__name__`` attributes with values that\n  require URL-quoting with in their model graphs, this won't cause any\n  issue.  However, if you have code that currently expects\n  ``model_path`` to return an unquoted string, or you have an existing\n  application with data generated via the old method, and you're too\n  lazy to change anything, you may wish replace the BFG-imported\n  ``model_path`` in your code with this function (this is the code of\n  the \"old\" ``model_path`` implementation)::\n\n        from repoze.bfg.location import lineage\n\n        def i_am_too_lazy_to_move_to_the_new_model_path(model, *elements):\n            rpath = []\n            for location in lineage(model):\n                if location.__name__:\n                    rpath.append(location.__name__)\n            path = '/' + '/'.join(reversed(rpath))\n            if elements:\n                suffix = '/'.join(elements)\n                path = '/'.join([path, suffix])\n            return path\n\n- The ``repoze.bfg.traversal.find_model`` API no longer implicitly\n  converts unicode representations of a full path passed to it as a\n  Unicode object into a UTF-8 string.  Callers should either use\n  prequoted path strings returned by\n  ``repoze.bfg.traversal.model_path``, or tuple values returned by the\n  result of ``repoze.bfg.traversal.model_path_tuple`` or they should\n  use the guidelines about passing a string ``path`` argument\n  described in the ``find_model`` API documentation.\n\nBugfixes\n--------\n\n- Each argument contained in ``elements`` passed to\n  ``repoze.bfg.traversal.model_path`` will now have any ``/``\n  characters contained within quoted to ``%2F`` in the returned\n  string.  Previously, ``/`` characters in elements were left unquoted\n  (a bug).\n\nFeatures\n--------\n\n- A ``repoze.bfg.traversal.model_path_tuple`` API was added.  This API\n  is an alternative to ``model_path`` (which returns a string);\n  ``model_path_tuple`` returns a model path as a tuple (much like\n  Zope's ``getPhysicalPath``).\n\n- A ``repoze.bfg.traversal.quote_path_segment`` API was added.  This\n  API will quote an individual path segment (string or unicode\n  object).  See the ``repoze.bfg.traversal`` API documentation for\n  more information.\n\n- The ``repoze.bfg.traversal.find_model`` API now accepts \"path\n  tuples\" (see the above note regarding ``model_path_tuple``) as well\n  as string path representations (from\n  ``repoze.bfg.traversal.model_path``) as a ``path`` argument.\n\n- Add ` `renderer`` argument (defaulting to None) to\n  ``repoze.bfg.testing.registerDummyRenderer``.  This makes it\n  possible, for instance, to register a custom renderer that raises an\n  exception in a unit test.\n\nImplementation Changes\n----------------------\n\n- Moved _url_quote function back to ``repoze.bfg.traversal`` from\n  ``repoze.bfg.url``.  This is not an API.\n\n0.6.7 (2009-01-27)\n==================\n\nFeatures\n--------\n\n- The ``repoze.bfg.url.model_url`` API now works against contexts\n  derived from Routes URL dispatch (``Routes.util.url_for`` is called\n  under the hood).\n\n- \"Virtual root\" support for traversal-based applications has been\n  added.  Virtual root support is useful when you'd like to host some\n  model in a ``repoze.bfg`` model graph as an application under a\n  URL pathname that does not include the model path itself.  For more\n  information, see the (new) \"Virtual Hosting\" chapter in the\n  documentation.\n\n- A ``repoze.bfg.traversal.virtual_root`` API has been added.  When\n  called, it returns the virtual root object (or the physical root\n  object if no virtual root has been specified).\n\nImplementation Changes\n----------------------\n\n- ``repoze.bfg.traversal.RoutesModelTraverser`` has been moved to\n  ``repoze.bfg.urldispatch``.\n\n- ``model_url`` URL generation is now performed via an adapter lookup\n  based on the context and the request.\n\n- ZCML which registers two adapters for the ``IContextURL`` interface\n  has been added to the configure.zcml in ``repoze.bfg.includes``.\n\n0.6.6 (2009-01-26)\n==================\n\nImplementation Changes\n----------------------\n\n- There is an indirection in ``repoze.bfg.url.model_url`` now that\n  consults a utility to generate the base model url (without extra\n  elements or a query string).  Eventually this will service virtual\n  hosting; for now it's undocumented and should not be hooked.\n\n0.6.5 (2009-01-26)\n==================\n\nFeatures\n--------\n\n- You can now override the NotFound and Unauthorized responses that\n  ``repoze.bfg`` generates when a view cannot be found or cannot be\n  invoked due to lack of permission.  See the \"ZCML Hooks\" chapter in\n  the docs for more information.\n\n- Added Routes ZCML directive attribute explanations in documentation.\n\n- Added a ``traversal_path`` API to the traversal module; see the\n  \"traversal\" API chapter in the docs.  This was a function previously\n  known as ``split_path`` that was not an API but people were using it\n  anyway.  Unlike ``split_path``, it now returns a tuple instead of a\n  list (as its values are cached).\n\nBehavior Changes\n----------------\n\n- The ``repoze.bfg.view.render_view_to_response`` API will no longer\n  raise a ValueError if an object returned by a view function it calls\n  does not possess certain attributes (``headerlist``, ``app_iter``,\n  ``status``).  This API used to attempt to perform a check using the\n  ``is_response`` function in ``repoze.bfg.view``, and raised a\n  ``ValueError`` if the ``is_response`` check failed.  The\n  responsibility is now the caller's to ensure that the return value\n  from a view function is a \"real\" response.\n\n- WSGI environ dicts passed to ``repoze.bfg`` 's Router must now\n  contain a REQUEST_METHOD key/value; if they do not, a KeyError will\n  be raised (speed).  \n\n- It is no longer permissible to pass a \"nested\" list of principals to\n  ``repoze.bfg.ACLAuthorizer.permits`` (e.g. ``['fred', ['larry',\n  'bob']]``).  The principals list must be fully expanded.  This\n  feature was never documented, and was never an API, so it's not a\n  backwards incompatibility.\n\n- It is no longer permissible for a security ACE to contain a \"nested\"\n  list of permissions (e.g. ``(Allow, Everyone, ['read', ['view',\n  ['write', 'manage']]])`)`.  The list must instead be fully expanded\n  (e.g. ``(Allow, Everyone, ['read', 'view', 'write', 'manage])``).  This\n  feature was never documented, and was never an API, so it's not a\n  backwards incompatibility.\n\n- The ``repoze.bfg.urldispatch.RoutesRootFactory`` now injects the\n  ``wsgiorg.routing_args`` environment variable into the environ when\n  a route matches.  This is a tuple of ((), routing_args) where\n  routing_args is the value that comes back from the routes mapper\n  match (the \"match dict\").\n\n- The ``repoze.bfg.traversal.RoutesModelTraverser`` class now wants to\n  obtain the ``view_name`` and ``subpath`` from the\n  ``wsgiorgs.routing_args`` environment variable.  It falls back to\n  obtaining these from the context for backwards compatibility.\n\nImplementation Changes\n----------------------\n\n- Get rid of ``repoze.bfg.security.ACLAuthorizer``: the\n  ``ACLSecurityPolicy`` now does what it did inline.\n\n- Get rid of ``repoze.bfg.interfaces.NoAuthorizationInformation``\n  exception: it was used only by ``ACLAuthorizer``.\n\n- Use a homegrown NotFound error instead of ``webob.exc.HTTPNotFound``\n  (the latter is slow).\n\n- Use a homegrown Unauthorized error instead of\n  ``webob.exc.Unauthorized`` (the latter is slow).\n\n- the ``repoze.bfg.lru.lru_cached`` decorator now uses functools.wraps\n  in order to make documentation of LRU-cached functions possible.\n\n- Various speed micro-tweaks.\n\nBug Fixes\n---------\n\n- ``repoze.bfg.testing.DummyModel`` did not have a ``get`` method;\n  it now does.\n\n0.6.4 (2009-01-23)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``unicode_path_segments`` configuration variable and the\n  ``BFG_UNICODE_PATH_SEGMENTS`` configuration variable have been\n  removed.  Path segments are now always passed to model\n  ``__getitem__`` methods as unicode.  \"True\" has been the default for\n  this setting since 0.5.4, but changing this configuration setting to\n  false allowed you to go back to passing raw path element strings to\n  model ``__getitem__`` methods.  Removal of this knob services a\n  speed goal (we get about +80 req/s by removing the check), and it's\n  clearer just to always expect unicode path segments in model\n  ``__getitem__`` methods.\n\nImplementation Changes\n----------------------\n\n- ``repoze.bfg.traversal.split_path`` now also handles decoding\n  path segments to unicode (for speed, because its results are\n  cached).\n\n- ``repoze.bfg.traversal.step`` was made a method of the\n   ModelGraphTraverser.\n\n- Use \"precooked\" Request subclasses\n  (e.g. ``repoze.bfg.request.GETRequest``) that correspond to HTTP\n  request methods within ``router.py`` when constructing a request\n  object rather than using ``alsoProvides`` to attach the proper\n  interface to an unsubclassed ``webob.Request``.  This pattern is\n  purely an optimization (e.g. preventing calls to ``alsoProvides``\n  means the difference between 590 r/s and 690 r/s on a MacBook 2GHz).\n\n- Tease out an extra 4% performance boost by changing the Router;\n  instead of using imported ZCA APIs, use the same APIs directly\n  against the registry that is an attribute of the Router.\n\n- The registry used by BFG is now a subclass of\n  ``zope.component.registry.Components`` (defined as\n  ``repoze.bfg.registry.Registry``); it has a ``notify`` method, a\n  ``registerSubscriptionAdapter`` and a ``registerHandler`` method.\n  If no subscribers are registered via ``registerHandler`` or\n  ``registerSubscriptionAdapter``, ``notify`` is a noop for speed.\n\n- The Allowed and Denied classes in ``repoze.bfg.security`` now are\n  lazier about constructing the representation of a reason message for\n  speed; ``repoze.bfg.view_execution_permitted`` takes advantage of\n  this.\n\n- The ``is_response`` check was sped up by about half at the expense\n  of making its code slightly uglier.\n\nNew Modules\n-----------\n\n- ``repoze.bfg.lru`` implements an LRU cache class and a decorator for\n  internal use.\n\n0.6.3 (2009-01-19)\n==================\n\nBug Fixes\n---------\n\n- Readd ``root_policy`` attribute on Router object (as a property\n  which returns the IRootFactory utility).  It was inadvertently\n  removed in 0.6.2.  Code in the wild depended upon its presence\n  (esp. scripts and \"debug\" helpers).\n\nFeatures\n--------\n\n- URL-dispatch has been overhauled: it is no longer necessary to\n  manually create a RoutesMapper in your application's entry point\n  callable in order to use URL-dispatch (aka `Routes\n  <https://routes.readthedocs.io/en/latest/>`_).  A new ``route`` directive has been\n  added to the available list of ZCML directives.  Each ``route``\n  directive inserted into your application's ``configure.zcml``\n  establishes a Routes mapper connection.  If any ``route``\n  declarations are made via ZCML within a particular application, the\n  ``get_root`` callable passed in to ``repoze.bfg.router.make_app``\n  will automatically be wrapped in the equivalent of a RoutesMapper.\n  Additionally, the new ``route`` directive allows the specification\n  of a ``context_interfaces`` attribute for a route, this will be used\n  to tag the manufactured routes context with specific interfaces when\n  a route specifying a ``context_interfaces`` attribute is matched.\n\n- A new interface ``repoze.bfg.interfaces.IContextNotFound`` was\n  added.  This interface is attached to a \"dummy\" context generated\n  when Routes cannot find a match and there is no \"fallback\" get_root\n  callable that uses traversal.\n\n- The ``bfg_starter`` and ``bfg_zodb`` \"paster create\" templates now\n  contain images and CSS which are displayed when the default page is\n  displayed after initial project generation.\n\n- Allow the ``repoze.bfg.view.static`` helper to be passed a relative\n  ``root_path`` name; it will be considered relative to the file in\n  which it was called.\n\n- The functionality of ``repoze.bfg.convention`` has been merged into\n  the core.  Applications which make use of ``repoze.bfg.convention``\n  will continue to work indefinitely, but it is recommended that apps\n  stop depending upon it.  To do so, substitute imports of\n  ``repoze.bfg.convention.bfg_view`` with imports of\n  ``repoze.bfg.view.bfg_view``, and change the stanza in ZCML from\n  ``<convention package=\".\">`` to ``<scan package=\".\">``.  As a result\n  of the merge, bfg has grown a new dependency: ``martian``.\n\n- View functions which use the pushpage decorator are now pickleable\n  (meaning their use won't prevent a ``configure.zcml.cache`` file\n  from being written to disk).\n\n- Instead of invariably using ``webob.Request`` as the \"request\n  factory\" (e.g. in the ``Router`` class) and ``webob.Response`` and\n  the \"response factory\" (e.g. in ``render_template_to_response``),\n  allow both to be overridden via a ZCML utility hook.  See the \"Using\n  ZCML Hooks\" chapter of the documentation for more information.\n\nDeprecations\n------------\n\n- The class ``repoze.bfg.urldispatch.RoutesContext`` has been renamed\n  to ``repoze.bfg.urldispatch.DefaultRoutesContext``.  The class\n  should be imported by the new name as necessary (although in reality\n  it probably shouldn't be imported from anywhere except internally\n  within BFG, as it's not part of the API).\n\nImplementation Changes\n----------------------\n\n- The ``repoze.bfg.wsgi.wsgiapp`` decorator now uses\n  ``webob.Request.get_response`` to do its work rather than relying on\n  homegrown WSGI code.\n\n- The ``repoze.bfg.view.static`` helper now uses\n  ``webob.Request.get_response`` to do its work rather than relying on\n  homegrown WSGI code.\n\n- The ``repoze.bfg.urldispatch.RoutesModelTraverser`` class has been\n  moved to ``repoze.bfg.traversal.RoutesModelTraverser``.\n\n- The ``repoze.bfg.registry.makeRegistry`` function was renamed to\n  ``repoze.bfg.registry.populateRegistry`` and now accepts a\n  ``registry`` argument (which should be an instance of\n  ``zope.component.registry.Components``).\n\nDocumentation Additions\n-----------------------\n\n- Updated narrative urldispatch chapter with changes required by\n  ``<route..>`` ZCML directive.\n\n- Add a section on \"Using BFG Security With URL Dispatch\" into the\n  urldispatch chapter of the documentation.\n\n- Better documentation of security policy implementations that ship\n  with repoze.bfg.\n\n- Added a \"Using ZPT Macros in repoze.bfg\" section to the narrative\n  templating chapter.\n\n0.6.2 (2009-01-13)\n==================\n\nFeatures\n--------\n\n- Tests can be run with coverage output if you've got ``nose``\n  installed in the interpreter which you use to run tests.  Using an\n  interpreter with ``nose`` installed, do ``python setup.py\n  nosetests`` within a checkout of the ``repoze.bfg`` package to see\n  test coverage output.\n\n- Added a ``post`` argument to the ``repoze.bfg.testing:DummyRequest``\n  constructor.\n  \n- Added ``__len__`` and ``__nonzero__`` to ``repoze.bfg.testing:DummyModel``.\n\n- The ``repoze.bfg.registry.get_options`` callable (now renamed to\n  ``repoze.bfg.setings.get_options``) used to return only\n  framework-specific keys and values in the dictionary it returned.\n  It now returns all the keys and values in the dictionary it is\n  passed *plus* any framework-specific settings culled from the\n  environment.  As a side effect, all PasteDeploy application-specific\n  config file settings are made available as attributes of the\n  ``ISettings`` utility from within BFG.\n\n- Renamed the existing BFG paster template to ``bfg_starter``.  Added\n  another template (``bfg_zodb``) showing default ZODB setup using\n  ``repoze.zodbconn``.\n\n- Add a method named ``assert_`` to the DummyTemplateRenderer.  This\n  method accepts keyword arguments.  Each key/value pair in the\n  keyword arguments causes an assertion to be made that the renderer\n  received this key with a value equal to the asserted value.\n\n- Projects generated by the paster templates now use the\n  ``DummyTemplateRenderer.assert_`` method in their view tests.\n\n- Make the (internal) thread local registry manager maintain a stack\n  of registries in order to make it possible to call one BFG\n  application from inside another.\n\n- An interface specific to the HTTP verb (GET/PUT/POST/DELETE/HEAD) is\n  attached to each request object on ingress.  The HTTP-verb-related\n  interfaces are defined in ``repoze.bfg.interfaces`` and are\n  ``IGETRequest``, ``IPOSTRequest``, ``IPUTRequest``,\n  ``IDELETERequest`` and ``IHEADRequest``.  These interfaces can be\n  specified as the ``request_type`` attribute of a bfg view\n  declaration.  A view naming a specific HTTP-verb-matching interface\n  will be found only if the view is defined with a request_type that\n  matches the HTTP verb in the incoming request.  The more general\n  ``IRequest`` interface can be used as the request_type to catch all\n  requests (and this is indeed the default).  All requests implement\n  ``IRequest``. The HTTP-verb-matching idea was pioneered by\n  `repoze.bfg.restrequest\n  <https://pypi.org/project/repoze.bfg.restrequest/1.0.1/>`_ . That\n  package is no longer required, but still functions fine.\n\nBug Fixes\n---------\n\n- Fix a bug where the Paste configuration's ``unicode_path_segments``\n  (and os.environ's ``BFG_UNICODE_PATH_SEGMENTS``) may have been\n  defaulting to false in some circumstances.  It now always defaults\n  to true, matching the documentation and intent.\n\n- The ``repoze.bfg.traversal.find_model`` API did not work properly\n  when passed a ``path`` argument which was unicode and contained\n  high-order bytes when the ``unicode_path_segments`` or\n  ``BFG_UNICODE_PATH_SEGMENTS`` configuration variables were \"true\".\n\n- A new module was added: ``repoze.bfg.settings``.  This contains\n  deployment-settings-related code.\n\nImplementation Changes\n----------------------\n\n- The ``make_app`` callable within ``repoze.bfg.router`` now registers\n  the ``root_policy`` argument as a utility (unnamed, using the new\n  ``repoze.bfg.interfaces.IRootFactory`` as a provides interface)\n  rather than passing it as the first argument to the\n  ``repoze.bfg.router.Router`` class.  As a result, the\n  ``repoze.bfg.router.Router`` router class only accepts a single\n  argument: ``registry``.  The ``repoze.bfg.router.Router`` class\n  retrieves the root policy via a utility lookup now.  The\n  ``repoze.bfg.router.make_app`` API also now performs some important\n  application registrations that were previously handled inside\n  ``repoze.bfg.registry.makeRegistry``.\n\nNew Modules\n-----------\n\n- A ``repoze.bfg.settings`` module was added.  It contains code\n  related to deployment settings.  Most of the code it contains was\n  moved to it from the ``repoze.bfg.registry`` module.\n\nBehavior Changes\n----------------\n\n- The ``repoze.bfg.settings.Settings`` class (an instance of which is\n  registered as a utility providing\n  ``repoze.bfg.interfaces.ISettings`` when any application is started)\n  now automatically calls ``repoze.bfg.settings.get_options`` on the\n  options passed to its constructor.  This means that usage of\n  ``get_options`` within an application's ``make_app`` function is no\n  longer required (the \"raw\" ``options`` dict or None may be passed).\n\n- Remove old cold which attempts to recover from trying to unpickle a\n  ``z3c.pt`` template; Chameleon has been the templating engine for a\n  good long time now.  Running repoze.bfg against a sandbox that has\n  pickled ``z3c.pt`` templates it will now just fail with an\n  unpickling error, but can be fixed by deleting the template cache\n  files.\n\nDeprecations\n------------\n\n- Moved the ``repoze.bfg.registry.Settings`` class.  This has been\n  moved to ``repoze.bfg.settings.Settings``. A deprecation warning is\n  issued when it is imported from the older location.\n\n- Moved the ``repoze.bfg.registry.get_options`` function This has been\n  moved to ``repoze.bfg.settings.get_options``.  A deprecation warning\n  is issued when it is imported from the older location.\n\n- The ``repoze.bfg.interfaces.IRootPolicy`` interface was renamed\n  within the interfaces package.  It has been renamed to\n  ``IRootFactory``.  A deprecation warning is issued when it is\n  imported from the older location.\n\n0.6.1 (2009-01-06)\n==================\n\nNew Modules\n-----------\n\n- A new module ``repoze.bfg.url`` has been added.  It contains the\n  ``model_url`` API (moved from ``repoze.bfg.traversal``) and an\n  implementation of ``urlencode`` (like Python's\n  ``urllib.urlencode``) which can handle Unicode keys and values in\n  parameters to the ``query`` argument.\n\nDeprecations\n------------\n\n- The ``model_url`` function has been moved from\n  ``repoze.bfg.traversal`` into ``repoze.bfg.url``.  It can still\n  be imported from ``repoze.bfg.traversal`` but an import from\n  ``repoze.bfg.traversal`` will emit a DeprecationWarning.\n\nFeatures\n--------\n\n- A ``static`` helper class was added to the ``repoze.bfg.views``\n  module.  Instances of this class are willing to act as BFG views\n  which return static resources using files on disk.  See the\n  ``repoze.bfg.view`` docs for more info.\n\n- The ``repoze.bfg.url.model_url`` API (nee'\n  ``repoze.bfg.traversal.model_url``) now accepts and honors a\n  keyword argument named ``query``.  The value of this argument\n  will be used to compose a query string, which will be attached to\n  the generated URL before it is returned.  See the API docs (in\n  the docs directory or on the web\n  ``http://static.repoze.org/bfgdocs``) (broken URL) for more information.\n\n0.6 (2008-12-26)\n================\n\nBackwards Incompatibilities\n---------------------------\n\n- Rather than prepare the \"stock\" implementations of the ZCML directives\n  from the ``zope.configuration`` package for use under ``repoze.bfg``,\n  ``repoze.bfg`` now makes available the implementations of directives\n  from the ``repoze.zcml`` package (see https://pypi.org/project/repoze.zcml/).\n  As a result, the ``repoze.bfg`` package now depends on the\n  ``repoze.zcml`` package, and no longer depends directly on the\n  ``zope.component``, ``zope.configuration``, ``zope.interface``, or\n  ``zope.proxy`` packages.\n\n  The primary reason for this change is to enable us to eventually reduce\n  the number of inappropriate ``repoze.bfg`` Zope package dependencies,\n  as well as to shed features of dependent package directives that don't\n  make sense for ``repoze.bfg``.\n\n  Note that currently the set of requirements necessary to use bfg has not\n  changed.  This is due to inappropriate Zope package requirements in\n  ``chameleon.zpt``, which will hopefully be remedied soon. NOTE: in\n  lemonade index a 1.0b8-repozezcml0 package exists which does away with\n  these requirements.\n\n- BFG applications written prior to this release which expect the \"stock\"\n  ``zope.component`` ZCML directive implementations (e.g. ``adapter``,\n  ``subscriber``, or ``utility``) to function now must either 1) include\n  the ``meta.zcml`` file from ``zope.component`` manually (e.g. ``<include\n  package=\"zope.component\" file=\"meta.zcml\">``) and include the\n  ``zope.security`` package as an ``install_requires`` dependency or 2)\n  change the ZCML in their applications to use the declarations from\n  `repoze.zcml <https://pypi.org/project/repoze.zcml/>`_ instead of the stock\n  declarations.  ``repoze.zcml`` only makes available the ``adapter``,\n  ``subscriber`` and ``utility`` directives.\n\n  In short, if you've got an existing BFG application, after this\n  update, if your application won't start due to an import error for\n  \"zope.security\", the fastest way to get it working again is to add\n  ``zope.security`` to the \"install_requires\" of your BFG\n  application's ``setup.py``, then add the following ZCML anywhere\n  in your application's ``configure.zcml``::\n\n   <include package=\"zope.component\" file=\"meta.zcml\">\n\n  Then re-``setup.py develop`` or reinstall your application.\n\n- The ``http://namespaces.repoze.org/bfg`` XML namespace is now the default\n  XML namespace in ZCML for paster-generated applications.  The docs have\n  been updated to reflect this.\n\n- The copies of BFG's ``meta.zcml`` and ``configure.zcml`` were removed\n  from the root of the ``repoze.bfg`` package.  In 0.3.6, a new package\n  named ``repoze.bfg.includes`` was added, which contains the \"correct\"\n  copies of these ZCML files; the ones that were removed were for backwards\n  compatibility purposes.\n\n- The BFG ``view`` ZCML directive no longer calls\n  ``zope.component.interface.provideInterface`` for the ``for`` interface.\n  We don't support ``provideInterface`` in BFG because it mutates the\n  global registry.\n\nOther\n-----\n\n- The minimum requirement for ``chameleon.core`` is now 1.0b13.  The\n  minimum requirement for ``chameleon.zpt`` is now 1.0b8.  The minimum\n  requirement for ``chameleon.genshi`` is now 1.0b2.\n\n- Updated paster template \"ez_setup.py\" to one that requires setuptools\n  0.6c9.\n\n- Turn ``view_execution_permitted`` from the ``repoze.bfg.view`` module\n  into a documented API.\n\n- Doc cleanups.\n\n- Documented how to create a view capable of serving static resources.\n\n0.5.6 (2008-12-18)\n==================\n\n- Speed up ``traversal.model_url`` execution by using a custom url quoting\n  function instead of Python's ``urllib.quote``, by caching URL path\n  segment quoting and encoding results, by disusing Python's\n  ``urlparse.urljoin`` in favor of a simple string concatenation, and by\n  using ``ob.__class__ is unicode`` rather than ``isinstance(ob, unicode)``\n  in one strategic place.\n\n0.5.5 (2008-12-17)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- In the past, during traversal, the ModelGraphTraverser (the default\n  traverser) always passed each URL path segment to any ``__getitem__``\n  method of a model object as a byte string (a ``str`` object).  Now, by\n  default the ModelGraphTraverser attempts to decode the path segment to\n  Unicode (a ``unicode`` object) using the UTF-8 encoding before passing it\n  to the ``__getitem__`` method of a model object.  This makes it possible\n  for model objects to be dumber in ``__getitem__`` when trying to resolve\n  a subobject, as model objects themselves no longer need to try to divine\n  whether or not to try to decode the path segment passed by the\n  traverser.\n\n  Note that since 0.5.4, URLs generated by repoze.bfg's ``model_url`` API\n  will contain UTF-8 encoded path segments as necessary, so any URL\n  generated by BFG itself will be decodeable by the traverser.  If another\n  application generates URLs to a BFG application, to be resolved\n  successfully, it should generate the URL with UTF-8 encoded path segments\n  to be successfully resolved.  The decoder is not at all magical: if a\n  non-UTF-8-decodeable path segment (e.g. one encoded using UTF-16 or some\n  other insanity) is passed in the URL, BFG will raise a ``TypeError`` with\n  a message indicating it could not decode the path segment.\n\n  To turn on the older behavior, where path segments were not decoded to\n  Unicode before being passed to model object ``__getitem__`` by the\n  traverser, and were passed as a raw byte string, set the\n  ``unicode_path_segments`` configuration setting to a false value in your\n  BFG application's section of the paste .ini file, for example::\n\n    unicode_path_segments = False\n\n  Or start the application using the ``BFG_UNICODE_PATH_SEGMENT`` envvar\n  set to a false value::\n\n    BFG_UNICODE_PATH_SEGMENTS=0\n\n0.5.4 (2008-12-13)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- URL-quote \"extra\" element names passed in as ``**elements`` to the\n  ``traversal.model_url`` API.  If any of these names is a Unicode string,\n  encode it to UTF-8 before URL-quoting.  This is a slight backwards\n  incompatibility that will impact you if you were already UTF-8 encoding\n  or URL-quoting the values you passed in as ``elements`` to this API.\n\nBugfixes\n--------\n\n- UTF-8 encode each segment in the model path used to generate a URL before\n  url-quoting it within the ``traversal.model_url`` API.  This is a bugfix,\n  as Unicode cannot always be successfully URL-quoted.\n\nFeatures\n--------\n\n- Make it possible to run unit tests using a buildout-generated Python\n  \"interpreter\".  \n\n- Add ``request.root`` to ``router.Router`` in order to have easy access to\n  the application root.\n\n0.5.3 (2008-12-07)\n==================\n\n- Remove the ``ITestingTemplateRenderer`` interface.  When\n  ``testing.registerDummyRenderer`` is used, it instead registers a dummy\n  implementation using ``ITemplateRenderer`` interface, which is checked\n  for when the built-in templating facilities do rendering.  This change\n  also allows developers to make explicit named utility registrations in\n  the ZCML registry against ``ITemplateRenderer``; these will be found\n  before any on-disk template is looked up.\n\n0.5.2 (2008-12-05)\n==================\n\n- The component registration handler for views (functions or class\n  instances) now observes component adaptation annotations (see\n  ``zope.component.adaptedBy``) and uses them before the fallback values\n  for ``for_`` and ``request_type``. This change does not affect existing\n  code insomuch as the code does not rely on these defaults when an\n  annotation is set on the view (unlikely).  This means that for a\n  new-style class you can do ``zope.component.adapts(ISomeContext,\n  ISomeRequest)`` at class scope or at module scope as a decorator to a\n  bfg view function you can do ``@zope.component.adapter(ISomeContext,\n  ISomeRequest)``.  This differs from r.bfg.convention inasmuch as you\n  still need to put something in ZCML for the registrations to get done;\n  it's only the defaults that will change if these declarations exist.\n\n- Strip all slashes from end and beginning of path in clean_path within\n  traversal machinery.\n\n0.5.1 (2008-11-25)\n==================\n\n- Add ``keys``, ``items``, and ``values`` methods to\n  ``testing.DummyModel``.\n\n- Add __delitem__ method to ``testing.DummyModel``.\n\n0.5.0 (2008-11-18)\n==================\n\n- Fix ModelGraphTraverser; don't try to change the ``__name__`` or\n  ``__parent__`` of an object that claims it implements ILocation during\n  traversal even if the ``__name__`` or ``__parent__`` of the object\n  traversed does not match the name used in the traversal step or the or\n  the traversal parent .  Rationale: it was insane to do so. This bug was\n  only found due to a misconfiguration in an application that mistakenly\n  had intermediate persistent non-ILocation objects; traversal was causing\n  a persistent write on every request under this setup.\n\n- ``repoze.bfg.location.locate`` now unconditionally sets ``__name__`` and\n  ``__parent__`` on objects which provide ILocation (it previously only set\n  them conditionally if they didn't match attributes already present on the\n  object via equality).\n\n0.4.9 (2008-11-17)\n==================\n\n- Add chameleon text template API (chameleon ${name} renderings where the\n  template does not need to be wrapped in any containing XML).\n\n- Change docs to explain install in terms of a virtualenv\n  (unconditionally).\n\n- Make pushpage decorator compatible with repoze.bfg.convention's\n  ``bfg_view`` decorator when they're stacked.\n\n- Add content_length attribute to testing.DummyRequest.\n\n- Change paster template ``tests.py`` to include a true unit test.  Retain\n  old test as an integration test.  Update documentation.\n\n- Document view registrations against classes and ``repoze.bfg.convention``\n  in context.\n\n- Change the default paster template to register its single view against a\n  class rather than an interface.\n\n- Document adding a request type interface to the request via a subscriber\n  function in the events narrative documentation.\n\n0.4.8 (2008-11-12)\n==================\n\nBackwards Incompatibilities\n---------------------------\n\n- ``repoze.bfg.traversal.model_url`` now always appends a slash to all\n  generated URLs unless further elements are passed in as the third and\n  following arguments.  Rationale: views often use ``model_url`` without\n  the third-and-following arguments in order to generate a URL for a model\n  in order to point at the default view of a model.  The URL that points to\n  the default view of the *root* model is technically ``http://mysite/`` as\n  opposed to ``http://mysite`` (browsers happen to ask for '/' implicitly\n  in the GET request).  Because URLs are never automatically generated for\n  anything *except* models by ``model_url``, and because the root model is\n  not really special, we continue this pattern.  The impact of this change\n  is minimal (at most you will have too many slashes in your URL, which BFG\n  deals with gracefully anyway).\n\n0.4.7 (2008-11-11)\n==================\n\nFeatures\n--------\n\n- Allow ``testing.registerEventListener`` to be used with Zope 3 style\n  \"object events\" (subscribers accept more than a single event argument).\n  We extend the list with the arguments, rather than append.\n\n0.4.6 (2008-11-10)\n==================\n\nBug Fixes\n---------\n\n- The ``model_path`` and ``model_url`` traversal APIs returned the wrong\n  value for the root object (e.g. ``model_path`` returned ``''`` for the\n  root object, while it should have been returning ``'/'``).\n\n0.4.5 (2008-11-09)\n==================\n\nFeatures\n--------\n\n- Added a ``clone`` method and a ``__contains__`` method to the DummyModel\n  testing object.\n\n- Allow DummyModel objects to receive extra keyword arguments, which will\n  be attached as attributes.\n\n- The DummyTemplateRenderer now returns ``self`` as its implementation.\n\n0.4.4 (2008-11-08)\n==================\n\nFeatures\n--------\n\n- Added a ``repoze.bfg.testing`` module to attempt to make it slightly\n  easier to write unittest-based automated tests of BFG applications.\n  Information about this module is in the documentation.\n\n- The default template renderer now supports testing better by looking for\n  ``ITestingTemplateRenderer`` using a relative pathname.  This is exposed\n  indirectly through the API named ``registerTemplateRenderer`` in\n  ``repoze.bfg.testing``.\n\nDeprecations\n------------\n\n- The names ``repoze.bfg.interfaces.ITemplate`` ,\n  ``repoze.bfg.interfaces.ITemplateFactory`` and\n  ``repoze.bfg.interfaces.INodeTemplate`` have been deprecated.  These\n  should now be imported as ``repoze.bfg.interfaces.ITemplateRenderer`` and\n  ``repoze.bfg.interfaces.ITemplateRendererFactory``, and\n  ``INodeTemplateRenderer`` respectively.\n\n- The name ``repoze.bfg.chameleon_zpt.ZPTTemplateFactory`` is deprecated.\n  Use ``repoze.bfg.chameleon_zpt.ZPTTemplateRenderer``.\n\n- The name ``repoze.bfg.chameleon_genshi.GenshiTemplateFactory`` is\n  deprecated.  Use ``repoze.bfg.chameleon_genshi.GenshiTemplateRenderer``.\n\n- The name ``repoze.bfg.xslt.XSLTemplateFactory`` is deprecated.  Use\n  ``repoze.bfg.xslt.XSLTemplateRenderer``.\n\n0.4.3 (2008-11-02)\n==================\n\nBug Fixes\n---------\n\n- Not passing the result of \"get_options\" as the second argument of\n  make_app could cause attribute errors when attempting to look up settings\n  against the ISettings object (internal).  Fixed by giving the Settings\n  objects defaults for ``debug_authorization`` and ``debug_notfound``.\n\n- Return an instance of ``Allowed`` (rather than ``True``) from\n  ``has_permission`` when no security policy is in use.\n\n- Fix bug where default deny in authorization check would throw a TypeError\n  (use ``ACLDenied`` instead of ``Denied``).\n\n0.4.2 (2008-11-02)\n==================\n\nFeatures\n--------\n\n- Expose a single ILogger named \"repoze.bfg.debug\" as a utility; this\n  logger is registered unconditionally and is used by the authorization\n  debug machinery.  Applications may also make use of it as necessary\n  rather than inventing their own logger, for convenience.\n\n- The ``BFG_DEBUG_AUTHORIZATION`` envvar and the ``debug_authorization``\n  config file value now only imply debugging of view-invoked security\n  checks.  Previously, information was printed for every call to\n  ``has_permission`` as well, which made output confusing.  To debug\n  ``has_permission`` checks and other manual permission checks, use the\n  debugger and print statements in your own code.\n\n- Authorization debugging info is now only present in the HTTP response\n  body oif ``debug_authorization`` is true.\n\n- The format of authorization debug messages was improved.\n\n- A new ``BFG_DEBUG_NOTFOUND`` envvar was added and a symmetric\n  ``debug_notfound`` config file value was added.  When either is true, and\n  a NotFound response is returned by the BFG router (because a view could\n  not be found), debugging information is printed to stderr.  When this\n  value is set true, the body of HTTPNotFound responses will also contain\n  the same debugging information.\n\n- ``Allowed`` and ``Denied`` responses from the security machinery are now\n  specialized into two types: ACL types, and non-ACL types.  The\n  ACL-related responses are instances of ``repoze.bfg.security.ACLAllowed``\n  and ``repoze.bfg.security.ACLDenied``.  The non-ACL-related responses are\n  ``repoze.bfg.security.Allowed`` and ``repoze.bfg.security.Denied``.  The\n  allowed-type responses continue to evaluate equal to things that\n  themselves evaluate equal to the ``True`` boolean, while the denied-type\n  responses continue to evaluate equal to things that themselves evaluate\n  equal to the ``False`` boolean.  The only difference between the two\n  types is the information attached to them for debugging purposes.\n\n- Added a new ``BFG_DEBUG_ALL`` envvar and a symmetric ``debug_all`` config\n  file value.  When either is true, all other debug-related flags are set\n  true unconditionally (e.g. ``debug_notfound`` and\n  ``debug_authorization``).\n\nDocumentation\n-------------\n\n- Added info about debug flag changes.\n\n- Added a section to the security chapter named \"Debugging Imperative\n  Authorization Failures\" (for e.g. ``has_permssion``).\n\nBug Fixes\n---------\n\n- Change default paster template generator to use ``Paste#http`` server\n  rather than ``PasteScript#cherrpy`` server.  The cherrypy server has a\n  security risk in it when ``REMOTE_USER`` is trusted by the downstream\n  application.\n\n0.4.1 (2008-10-28)\n==================\n\nBug Fixes\n---------\n\n- If the ``render_view_to_response`` function was called, if the view was\n  found and called, but it returned something that did not implement\n  IResponse, the error would pass by unflagged.  This was noticed when I\n  created a view function that essentially returned None, but received a\n  NotFound error rather than a ValueError when the view was rendered.  This\n  was fixed.\n\n0.4.0 (2008-10-03)\n==================\n\nDocs \n----\n\n- An \"Environment and Configuration\" chapter was added to the narrative \n  portion of the documentation.\n\nFeatures\n--------\n\n- Ensure bfg doesn't generate warnings when running under Python\n  2.6.\n\n- The environment variable ``BFG_RELOAD_TEMPLATES`` is now available\n  (serves the same purpose as ``reload_templates`` in the config file).\n\n- A new configuration file option ``debug_authorization`` was added.\n  This turns on printing of security authorization debug statements\n  to ``sys.stderr``.  The ``BFG_DEBUG_AUTHORIZATION`` environment\n  variable was also added; this performs the same duty.\n\nBug Fixes\n---------\n\n- The environment variable ``BFG_SECURITY_DEBUG`` did not always work.\n  It has been renamed to ``BFG_DEBUG_AUTHORIZATION`` and fixed.\n\nDeprecations\n------------\n\n- A deprecation warning is now issued when old API names from the\n  ``repoze.bfg.templates`` module are imported.\n\nBackwards incompatibilities\n---------------------------\n\n- The ``BFG_SECURITY_DEBUG`` environment variable was renamed to\n  ``BFG_DEBUG_AUTHORIZATION``.\n\n0.3.9 (2008-08-27)\n==================\n\nFeatures\n--------\n\n- A ``repoze.bfg.location`` API module was added.\n\nBackwards incompatibilities\n---------------------------\n\n- Applications must now use the ``repoze.bfg.interfaces.ILocation``\n  interface rather than ``zope.location.interfaces.ILocation`` to\n  represent that a model object is \"location-aware\".  We've removed\n  a dependency on ``zope.location`` for cleanliness purposes: as\n  new versions of zope libraries are released which have improved\n  dependency information, getting rid of our dependence on\n  ``zope.location`` will prevent a newly installed repoze.bfg\n  application from requiring the ``zope.security``, egg, which not\n  truly used at all in a \"stock\" repoze.bfg setup.  These\n  dependencies are still required by the stack at this time; this\n  is purely a futureproofing move.\n\n  The security and model documentation for previous versions of\n  ``repoze.bfg`` recommended using the\n  ``zope.location.interfaces.ILocation`` interface to represent\n  that a model object is \"location-aware\".  This documentation has\n  been changed to reflect that this interface should now be\n  imported from ``repoze.bfg.interfaces.ILocation`` instead.\n\n0.3.8 (2008-08-26)\n==================\n\nDocs\n----\n\n- Documented URL dispatch better in narrative form.\n\nBug fixes\n---------\n\n- Routes URL dispatch did not have access to the WSGI environment,\n  so conditions such as method=GET did not work.\n\nFeatures\n--------\n\n- Add ``principals_allowed_by_permission`` API to security module.\n\n- Replace ``z3c.pt`` support with support for ``chameleon.zpt``.\n  Chameleon is the new name for the package that used to be named\n  ``z3c.pt``.  NOTE: If you update a ``repoze.bfg`` SVN checkout\n  that you're using for development, you will need to run \"setup.py\n  install\" or \"setup.py develop\" again in order to obtain the\n  proper Chameleon packages.  ``z3c.pt`` is no longer supported by\n  ``repoze.bfg``.  All API functions that used to render ``z3c.pt``\n  templates will work fine with the new packages, and your\n  templates should render almost identically.\n\n- Add a ``repoze.bfg.chameleon_zpt`` module.  This module provides\n  Chameleon ZPT support.\n\n- Add a ``repoze.bfg.xslt`` module.  This module provides XSLT\n  support.\n\n- Add a ``repoze.bfg.chameleon_genshi`` module.  This provides\n  direct Genshi support, which did not exist previously.\n\nDeprecations\n------------\n\n- Importing API functions directly from ``repoze.bfg.template`` is\n  now deprecated.  The ``get_template``, ``render_template``,\n  ``render_template_to_response`` functions should now be imported\n  from ``repoze.chameleon_zpt``.  The ``render_transform``, and\n  ``render_transform_to_response`` functions should now be imported\n  from ``repoze.bfg.xslt``.  The ``repoze.bfg.template`` module\n  will remain around \"forever\" to support backwards compatibility.\n\n0.3.7 (2008-09-09)\n==================\n\nFeatures\n--------\n\n- Add compatibility with z3c.pt 1.0a7+ (z3c.pt became a namespace package).\n\nBug fixes\n---------\n\n- ``repoze.bfg.traversal.find_model`` function did not function properly.\n\n0.3.6 (2008-09-04)\n==================\n\nFeatures\n--------\n\n- Add startup process docs.\n\n- Allow configuration cache to be bypassed by actions which include special\n  \"uncacheable\" discriminators (for actions that have variable results).\n\nBug Fixes\n---------\n\n- Move core repoze.bfg ZCML into a ``repoze.bfg.includes`` package so we\n  can use repoze.bfg better as a namespace package.  Adjust the code\n  generator to use it.  We've left around the ``configure.zcml`` in the\n  repoze.bfg package directly so as not to break older apps.\n\n- When a zcml application registry cache was unpickled, and it contained a\n  reference to an object that no longer existed (such as a view), bfg would\n  not start properly.\n\n0.3.5 (2008-09-01)\n==================\n\nFeatures\n--------\n\n- Event notification is issued after application is created and configured\n  (``IWSGIApplicationCreatedEvent``).\n\n- New API module: ``repoze.bfg.view``.  This module contains the functions\n  named ``render_view_to_response``, ``render_view_to_iterable``,\n  ``render_view`` and ``is_response``, which are documented in the API\n  docs.  These features aid programmatic (non-server-driven) view\n  execution.\n\n0.3.4 (2008-08-28)\n==================\n\nBackwards incompatibilities\n---------------------------\n\n- Make ``repoze.bfg`` a namespace package so we can allow folks to create\n  subpackages (e.g. ``repoze.bfg.otherthing``) within separate eggs.  This\n  is a backwards incompatible change which makes it impossible to import\n  \"make_app\" and \"get_options\" from the ``repoze.bfg`` module directly.\n  This change will break all existing apps generated by the paster code\n  generator.  Instead, you need to import these functions as\n  ``repoze.bfg.router:make_app`` and ``repoze.bfg.registry:get_options``,\n  respectively.  Sorry folks, it has to be done now or never, and\n  definitely better now.\n\nFeatures\n--------\n\n- Add ``model_path`` API function to traversal module.\n\nBugfixes\n\n- Normalize path returned by repoze.bfg.caller_path.\n\n0.3.3 (2008-08-23)\n==================\n\n- Fix generated test.py module to use project name rather than package\n  name.\n\n0.3.2 (2008-08-23)\n==================\n\n- Remove ``sampleapp`` sample application from bfg package itself.\n\n- Remove dependency on FormEncode (only needed by sampleapp).\n\n- Fix paster template generation so that case-sensitivity is preserved for\n  project vs. package name.\n\n- Depend on ``z3c.pt`` version 1.0a1 (which requires the ``[lxml]`` extra\n  currently).\n\n- Read and write a pickled ZCML actions list, stored as\n  ``configure.zcml.cache`` next to the applications's \"normal\"\n  configuration file.  A given bfg app will usually start faster if it's\n  able to read the pickle data.  It fails gracefully to reading the real\n  ZCML file if it cannot read the pickle.\n\n0.3.1 (2008-08-20)\n==================\n\n- Generated application differences: ``make_app`` entry point renamed to\n  ``app`` in order to have a different name than the bfg function of the\n  same name, to prevent confusion.\n\n- Add \"options\" processing to bfg's ``make_app`` to support runtime\n  options.  A new API function named ``get_options`` was added to the\n  registry module.  This function is typically used in an application's\n  ``app`` entry point.  The Paste config file section for the app can now\n  supply the ``reload_templates`` option, which, if true, will prevent the\n  need to restart the appserver in order for ``z3c.pt`` or XSLT template\n  changes to be detected.\n\n- Use only the module name in generated project's \"test_suite\" (run all\n  tests found in the package).\n\n- Default port for generated apps changed from 5432 to 6543 (Postgres\n  default port is 6543).\n\n0.3.0 (2008-08-16)\n==================\n\n- Add ``get_template`` API to template module.\n\n0.2.9 (2008-08-11)\n==================\n\n- 0.2.8 was \"brown bag\" release.  It didn't work at all.  Symptom:\n  ComponentLookupError when trying to render a page.\n\n0.2.8 (2008-08-11)\n==================\n\n- Add ``find_model`` and ``find_root`` traversal APIs.  In the process,\n  make ITraverser a uni-adapter (on context) rather than a multiadapter (on\n  context and request).\n\n0.2.7 (2008-08-05)\n==================\n\n- Add a ``request_type`` attribute to the available attributes of a\n  ``bfg:view`` configure.zcml element.  This attribute will have a value\n  which is a dotted Python path, pointing at an interface.  If the request\n  object implements this interface when the view lookup is performed, the\n  appropriate view will be called.  This is meant to allow for simple\n  \"skinning\" of sites based on request type.  An event subscriber should\n  attach the interface to the request on ingress to support skins.\n\n- Remove \"template only\" views.  These were just confusing and were never\n  documented.\n\n- Small url dispatch overhaul: the ``connect`` method of the\n  ``urldispatch.RoutesMapper`` object now accepts a keyword parameter named\n  ``context_factory``.  If this parameter is supplied, it must be a\n  callable which returns an instance.  This instance is used as the context\n  for the request when a route is matched.\n\n- The registration of a RoutesModelTraverser no longer needs to be\n  performed by the application; it's in the bfg ZCML now.\n\n0.2.6 (2008-07-31)\n==================\n\n- Add event sends for INewRequest and INewResponse.  See the events.rst\n  chapter in the documentation's ``api`` directory.\n\n0.2.5 (2008-07-28)\n==================\n\n- Add ``model_url`` API.\n\n0.2.4 (2008-07-27)\n==================\n\n- Added url-based dispatch.\n\n0.2.3 (2008-07-20)\n==================\n\n- Add API functions for authenticated_userid and effective_principals.\n\n0.2.2 (2008-07-20)\n==================\n\n- Add authenticated_userid and effective_principals API to security\n  policy.\n\n0.2.1 (2008-07-20)\n==================\n\n- Add find_interface API.\n\n0.2 (2008-07-19)\n================\n\n- Add wsgiapp decorator.\n\n- The concept of \"view factories\" was removed in favor of always calling a\n  view, which is a callable that returns a response directly (as opposed to\n  returning a view).  As a result, the ``factory`` attribute in the\n  bfg:view ZCML statement has been renamed to ``view``.  Various interface\n  names were changed also.\n\n- ``render_template`` and ``render_transform`` no longer return a Response\n  object.  Instead, these return strings.  The old behavior can be obtained\n  by using ``render_template_to_response`` and\n  ``render_transform_to_response``.\n\n- Added 'repoze.bfg.push:pushpage' decorator, which creates BFG views from\n  callables which take (context, request) and return a mapping of top-level\n  names.\n\n- Added ACL-based security.\n\n- Support for XSLT templates via a render_transform method\n\n0.1 (2008-07-08)\n================\n\n- Initial release.\n\n"
        },
        {
          "name": "CHANGES.rst",
          "type": "blob",
          "size": 3.2529296875,
          "content": "unreleased\n==========\n\nFeatures\n--------\n\n- Add support for Python 3.12.\n\n- Added HTTP 418 error code via `pyramid.httpexceptions.HTTPImATeapot`.\n  See https://github.com/Pylons/pyramid/pull/3667\n\n- Coverage reports in tests based on Python 3.12 instead of Python 3.8.\n\n- All scripts now pass a new option ``__script__`` when loading the WSGI app.\n  For example, ``pserve`` sets ``__script__ == 'pserve'``. This works for\n  ``pserve``, ``pshell``, ``prequest``, ``proutes``, ``ptweens``, ``pviews``,\n  as well as when using ``pyramid.paster.bootstrap`` directly.\n\n  When using ``plaster-pastedeploy`` to load an INI file, this option will\n  manifest as a new value passed into the ``global_conf`` arg of your\n  application factory, where you can use it as part of initializing your app.\n\n  See https://github.com/Pylons/pyramid/pull/3735\n\n- Replace usage of ``md5`` in the Pyramid view system with ``sha256``. This\n  is not a security-related feature and is considered an implementation detail\n  that should not impact users.\n\n  See https://github.com/Pylons/pyramid/pull/3745\n\n- Replace usage of ``pkg_resources`` in ``pyramid.path.DottedNameResolver``.\n  See https://github.com/Pylons/pyramid/pull/3748\n\n- Replace usage of ``pkg_resources`` in ``pdistreport`` and ``pshell`` CLI\n  commands. See https://github.com/Pylons/pyramid/pull/3749\n\nBug Fixes\n---------\n\n- Fix issues where permissions may be checked on exception views. This is not\n  supposed to happen in normal circumstances.\n\n  This also prevents issues where a ``request.url`` fails to be decoded when\n  logging info when ``pyramid.debug_authorization`` is enabled.\n\n  See https://github.com/Pylons/pyramid/pull/3741/files\n\n- Applications raising ``pyramid.exceptions.BadCSRFToken`` and\n  ``pyramid.exceptions.BadCSRFOrigin`` were returning invalid HTTP status\n  lines with values like ``400 Bad CSRF Origin`` instead of\n  ``400 Bad Request``.\n\n  See https://github.com/Pylons/pyramid/pull/3742\n\nBackward Incompatibilities\n--------------------------\n\n- Drop support for Python 3.6 and 3.7.\n\n- Drop support for l*gettext() methods in the i18n module.\n  These have been deprecated in Python's gettext module since 3.8, and\n  removed in Python 3.11.\n\nDeprecations\n------------\n\n- Deprecated the ability to use a non-existent package with\n  ``pyramid.config.Configurator.add_static_view`` and\n  ``pyramid.static.static_view``. This can be fixed by choosing a path\n  located within a real package as the ``root_dir`` for your static files.\n  This is almost always either a misconfig or an attempt to define an alias\n  location for use with ``pyramid.config.Configurator.override_asset``.\n  See https://github.com/Pylons/pyramid/pull/3752\n\nDocumentation Changes\n---------------------\n\n- Sync the SQLAlchemy Wiki tutorial with changes to the\n  ``pyramid-cookiecutter-starter``. Includes updates to use ``pyproject.toml``\n  to replace separate config files for ``pytest``, ``coverage``, and\n  ``setuptools``. Also upgrades patterns to support SQLAlchemy 2.0.\n  See https://github.com/Pylons/pyramid/pull/3747\n\n- Sync the ZODB Wiki tutorial with changes to the\n  ``pyramid-cookiecutter-starter``. Includes updates to use ``pyproject.toml``\n  to replace separate config files for ``pytest``, ``coverage``, and\n  ``setuptools``.\n  See https://github.com/Pylons/pyramid/pull/3751\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 8.57421875,
          "content": "Pylons Project Contributor Agreement\n====================================\n\nThe submitter agrees by adding his or her name within the section below named\n\"Contributors\" and submitting the resulting modified document to the\ncanonical shared repository location for this software project (whether\ndirectly, as a user with \"direct commit access\", or via a \"pull request\"), he\nor she is signing a contract electronically.  The submitter becomes a\nContributor after a) he or she signs this document by adding their name\nbeneath the \"Contributors\" section below, and b) the resulting document is\naccepted into the canonical version control repository.\n\nTreatment of Account\n---------------------\n\nContributor will not allow anyone other than the Contributor to use his or\nher username or source repository login to submit code to a Pylons Project\nsource repository. Should Contributor become aware of any such use,\nContributor will immediately notify Agendaless Consulting.\nNotification must be performed by sending an email to\nwebmaster@agendaless.com.  Until such notice is received, Contributor will be\npresumed to have taken all actions made through Contributor's account. If the\nContributor has direct commit access, Agendaless Consulting will have\ncomplete control and discretion over capabilities assigned to Contributor's\naccount, and may disable Contributor's account for any reason at any time.\n\nLegal Effect of Contribution\n----------------------------\n\nUpon submitting a change or new work to a Pylons Project source Repository (a\n\"Contribution\"), you agree to assign, and hereby do assign, a one-half\ninterest of all right, title and interest in and to copyright and other\nintellectual property rights with respect to your new and original portions\nof the Contribution to Agendaless Consulting. You and Agendaless Consulting\neach agree that the other shall be free to exercise any and all exclusive\nrights in and to the Contribution, without accounting to one another,\nincluding without limitation, the right to license the Contribution to others\nunder the Repoze Public License. This agreement shall run with title to the\nContribution. Agendaless Consulting does not convey to you any right, title\nor interest in or to the Program or such portions of the Contribution that\nwere taken from the Program. Your transmission of a submission to the Pylons\nProject source Repository and marks of identification concerning the\nContribution itself constitute your intent to contribute and your assignment\nof the work in accordance with the provisions of this Agreement.\n\nLicense Terms\n-------------\n\nCode committed to the Pylons Project source repository (Committed Code) must\nbe governed by the Repoze Public License (http://repoze.org/LICENSE.txt, aka\n\"the RPL\") or another license acceptable to Agendaless Consulting.  Until\nAgendaless Consulting declares in writing an acceptable license other than\nthe RPL, only the RPL shall be used.  A list of exceptions is detailed within\nthe \"Licensing Exceptions\" section of this document, if one exists.\n\nRepresentations, Warranty, and Indemnification\n----------------------------------------------\n\nContributor represents and warrants that the Committed Code does not violate\nthe rights of any person or entity, and that the Contributor has legal\nauthority to enter into this Agreement and legal authority over Contributed\nCode. Further, Contributor indemnifies Agendaless Consulting against\nviolations.\n\nCryptography\n------------\n\nContributor understands that cryptographic code may be subject to government\nregulations with which Agendaless Consulting and/or entities using Committed\nCode must comply. Any code which contains any of the items listed below must\nnot be checked-in until Agendaless Consulting staff has been notified and has\napproved such contribution in writing.\n\n- Cryptographic capabilities or features\n\n- Calls to cryptographic features\n\n- User interface elements which provide context relating to cryptography\n\n- Code which may, under casual inspection, appear to be cryptographic.\n\nNotices\n-------\n\nContributor confirms that any notices required will be included in any\nCommitted Code.\n\nLicensing Exceptions\n====================\n\nCode committed within the ``docs/`` subdirectory of the Pyramid source\ncontrol repository and \"docstrings\" which appear in the documentation\ngenerated by running \"make\" within this directory is licensed under the\nCreative Commons Attribution-Noncommercial-Share Alike 3.0 United States\nLicense (http://creativecommons.org/licenses/by-nc-sa/3.0/us/).\n\nList of Contributors\n====================\n\nThe below-signed are contributors to a code repository that is part of the\nproject named \"Pyramid\".  Each below-signed contributor has read, understand\nand agrees to the terms above in the section within this document entitled\n\"Pylons Project Contributor Agreement\" as of the date beside his or her name.\n\nContributors\n------------\n\n- Chris McDonough, 2010/11/08\n\n- Tres Seaver, 2010/11/09\n\n- Ben Bangert, 2010/11/09\n\n- Blaise Laflamme, 2010/11/09\n\n- Chris Rossi, 2010/11/10\n\n- Casey Duncan, 2010/12/27\n\n- Rob Miller, 2010/12/28\n\n- Marius Gedminas, 2010/12/31\n\n- Marcin Lulek, 2011/01/02\n\n- John Shipman, 2011/01/15\n\n- Wichert Akkerman, 2011/01/19\n\n- Christopher Lambacher, 2011/02/12\n\n- Malthe Borch, 2011/02/28\n\n- Carlos de la Guardia, 2011/03/29\n\n- Joel Bohman, 2011/04/16\n\n- Juliusz Gonera, 2011/04/17\n\n- Philip Jenvey, 2011/04/24\n\n- Michael Merickel, 2011/5/25\n\n- Christoph Zwerschke, 2011/06/07\n\n- Atsushi Odagiri, 2011/07/02\n\n- Shane Hathaway, 2011/07/22\n\n- Manuel Hermann, 2011/07/11\n\n- Richard Barrell, 2011/11/07\n\n- Chris Shenton, 2011/11/07\n\n- Ken Manheimer, 2011/11/07\n\n- Reed O'Brien, 2011/11/07\n\n- Klee Dienes, 2011/10/30\n\n- Michael Ryabushin, 2011/12/14\n\n- Mike Orr, 2012/02/14\n\n- Paul M. Winkler, 2012/02/22\n\n- Martijn Pieters, 2012/03/02\n\n- Steve Piercy, 2012/03/27\n\n- Wayne Witzel III, 2012/03/27\n\n- Marin Rukavina, 2012/05/03\n\n- Lorenzo M. Catucci, 2012/06/08\n\n- Marc Abramowitz, 2012/06/13\n\n- Brian Sutherland, 2012/06/16\n\n- Jeff Cook, 2012/06/16\n\n- Ian Wilson, 2012/06/17\n\n- Roman Kozlovskyi, 2012/08/11\n\n- Domen Kozar, 2012/09/11\n\n- David Gay, 2012/09/16\n\n- Robert Jackiewicz, 2012/11/12\n\n- John Anderson, 2012/11/14\n\n- Bert JW Regeer, 2013/02/01\n\n- Georges Dubus, 2013/03/21\n\n- Jason McKellar, 2013/03/28\n\n- Luke Cyca, 2013/05/30\n\n- Laurence Rowe, 2013/04/24\n\n- Julian P. Glass, 2013/08/10\n\n- Junaid Ali, 2013/08/10\n\n- Chris Davies, 2013/08/11\n\n- Jonathan Villemaire-Krajden, 2013/08/13\n\n- Charlie Clark, 2013/08/15\n\n- Tom Lazar, 2013/08/15\n\n- Andreas Zeidler, 2013/08/15\n\n- Matthew Wilkes, 2013/08/23\n\n- Takahiro Fujiwara, 2013/08/28\n\n- Doug Hellmann, 2013/09/06\n\n- Karl O. Pinc, 2013/09/27\n\n- Matthew Russell, 2013/10/14\n\n- Antti Haapala, 2013/11/15\n\n- Amit Mane, 2014/01/23\n\n- Fenton Travers, 2014/05/06\n\n- Randall Leeds, 2014/11/11\n\n- Hugo Branquinho, 2014/11/25\n\n- Adrian Teng, 2014/12/17\n\n- Ilja Everila, 2015/02/05\n\n- Geoffrey T. Dairiki, 2015/02/06\n\n- David Glick, 2015/02/12\n\n- Donald Stufft, 2015/03/15\n\n- Randy Topliffe, 2015/04/14\n\n- Timur Izhbulatov, 2015/04/14\n\n- Karen Dalton, 2015/06/01\n\n- Igor Stroh, 2015/06/10\n\n- Jesse Dhillon, 2015/10/07\n\n- Amos Latteier, 2015/10/22\n\n- Rami Chousein, 2015/10/28\n\n- Sri Sanketh Uppalapati, 2015/12/12\n\n- Marcin Raczyński, 2016/01/26\n\n- Arian Maykon de A. Diógenes, 2016/04/13\n\n- Vincent Férotin, 2016/05/08\n\n- Berker Peksag, 2016/05/16\n\n- Zack Brunson, 2016/06/02\n\n- Marco Martinez, 2016/06/02\n\n- Cris Ewing, 2016/06/03\n\n- Jean-Christophe Bohin, 2016/06/13\n\n- Dariusz Gorecki, 2016/07/15\n\n- Jon Davidson, 2016/07/18\n\n- Keith Yang, 2016/07/22\n\n- Hannah Krager, 2016/10/22\n\n- Moriyoshi Koizumi, 2016/11/20\n\n- Mikko Ohtamaa, 2016/12/6\n\n- Jure Cerjak, 2016/12/7\n\n- Martin Frlin, 2016/12/7\n\n- Kirill Kuzminykh, 2017/03/01\n\n- Charlie Choiniere, 2017/04/03\n\n- Aleph Melo, 2017/04/16\n\n- Jeremy(Ching-Rui) Chen, 2017/04/19\n\n- Russell Ballestrini, 2017/05/06\n\n- Fang-Pen Lin, 2017/05/22\n\n- Volker Diels-Grabsch, 2017/06/09\n\n- Denis Rykov, 2017/06/15\n\n- Tosh Lyons, 2017/06/27\n\n- Lars Blumberg, 2017/08/14\n\n- Deneys Maartens, 2017/11/03\n\n- Heron Rossi, 2018/03/08\n\n- Hunter Senft-Grupp, 2018/05/14\n\n- Junhak Lee, 2018/05/14\n\n- Alex Gaynor, 2018/05/24\n\n- Jason Williams, 2018/06/11\n\n- Benjamin Gmurczyk, 2018/06/14\n\n- Stephen Martin, 2018/09/04\n\n- Kuzma Leshakov, 2018/09/07\n\n- Colin Dunklau, 2018/09/19\n\n- Alexandre Yukio Harano, 2018/10/05\n\n- Eric Atkin, 2019/02/15\n\n- Arijit Basu, 2019/02/19\n\n- Theron Luhn, 2019/03/30\n\n- Mandar Vaze, 2019/07/20\n\n- Jonathan Vanasco, 2019/11/05\n\n- Jan Likar, 2019/11/07\n\n- Andrea Borghi, 2019/11/11\n\n- Sergey Maranchuk, 2020/04/18\n\n- Thibault Ravera, 2020/06/03\n\n- Jens Troeger, 2021/04/08\n\n- Karthikeyan Singaravelan, 2021/08/24\n\n- Camill Kaipf, 2022/08/12\n\n- Stefano Rivera, 2022/12/29"
        },
        {
          "name": "COPYRIGHT.txt",
          "type": "blob",
          "size": 0.2587890625,
          "content": "Copyright (c) 2008-2018 Agendaless Consulting and Contributors.\n(http://www.agendaless.com), All Rights Reserved\n\nPortions (c) Zope Foundation and contributors (http://www.zope.org/).\n\nPortions (c) Edgewall Software (http://edgewall.org)\n\nPortions (c) Ian Bicking.\n"
        },
        {
          "name": "HACKING.txt",
          "type": "blob",
          "size": 4.4609375,
          "content": "Hacking on Pyramid\n==================\n\nHere are some guidelines for hacking on Pyramid.\n\n\nUsing a Development Checkout\n----------------------------\n\nYou will have to create a development environment to hack on Pyramid, using a\nPyramid checkout. We use `tox` to run tests, run test coverage, and build\ndocumentation.\n\ntox docs: https://tox.readthedocs.io/en/latest/\ntox on PyPI: https://pypi.org/project/tox/\n\n- Create a new directory somewhere and `cd` to it:\n\n    $ mkdir ~/hack-on-pyramid\n    $ cd ~/hack-on-pyramid\n\n- Check out a read-only copy of the Pyramid source:\n\n    $ git clone git://github.com/Pylons/pyramid.git .\n\n  Alternatively, create a writeable fork on GitHub and clone it.\n\n- Make sure that `tox` is installed, either in your path, or locally. Examples\n  below assume that `tox` was installed with:\n\n    $ pip3 install --user tox\n    $ export TOX=$(python3 -c 'import site; print(site.USER_BASE + \"/bin\")')/tox\n\n  Feel free to use whatever is your favorite method for installation. One\n  popular method uses `pipx` (https://github.com/pipxproject/pipx).\n\n  Before you file a pull request, we recommend that you run your proposed\n  change through `tox`. `tox` will fully validate that all tests work, all\n  supported formats of documentation will build and their doctests pass, and\n  test coverage is 100%, across all supported versions of Python. `tox` will\n  only run builds for Python versions that you have installed and made\n  available to `tox`. Setting up that environment is outside the scope of this\n  document.\n\nAdding Features\n---------------\n\nIn order to add a feature to Pyramid:\n\n- The feature must be documented in both the API and narrative documentation\n  (in `docs/`).\n\n- The feature must work fully on the following CPython versions: 3.8, 3.9,\n  3.10, 3.11, and 3.12 on both UNIX and Windows.\n\n- The feature must work on the latest version of PyPy3.\n\n- The feature must not depend on any particular persistence layer (filesystem,\n  SQL, etc).\n\n- The feature must not add unnecessary dependencies (where \"unnecessary\" is of\n  course subjective, but new dependencies should be discussed).\n\n\nCoding Style\n------------\n\n- Pyramid uses Black (https://pypi.org/project/black/) and isort (https://pypi.org/project/isort/) for code formatting style.\n  To run formatters:\n\n    $ $TOX -e format\n\n- Pyramid uses flake8 (https://pypi.org/project/flake8/) to enforce PEP8 style guidelines.\n  To run flake8, as well as running checks for Black and isort:\n\n    $ $TOX -e lint\n\nBlack, isort, and flake8 versions are pinned for stability and reproducibility.\n\nRunning Tests\n-------------\n\n- The `tox.ini` uses `pytest` and `coverage`. As such `tox` may be used\n  to run groups of tests or only a specific version of Python. For example, the\n  following command will run tests on the same version of Python that `tox` is\n  installed with:\n\n    $ $TOX -e py\n\n  To run `tox` for Python 3.10 explicitly, you may use:\n\n    $ $TOX -e py310\n\n- To run individual tests (i.e., during development), you can use `pytest`\n  syntax as follows, where `$VENV` is an environment variable set to the path\n  to your virtual environment:\n\n    # run a single test\n    $ $TOX -e py -- tests/test_httpexceptions.py::TestHTTPMethodNotAllowed::test_it_with_default_body_tmpl\n\n    # run all tests in a class\n    $ $TOX -e py -- tests/test_httpexceptions.py::TestHTTPMethodNotAllowed\n\n- For more information on how to use pytest, please refer to the pytest\n  documentation for selecting tests:\n  https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests\n\n\nTest Coverage\n-------------\n\n- The codebase *must* have 100% test statement coverage after each commit. You\n  can test coverage via `tox -e py310`.\n\n\nDocumentation Coverage and Building HTML Documentation\n------------------------------------------------------\n\nIf you fix a bug, and the bug requires an API or behavior modification, all\ndocumentation in this package which references that API or behavior must be\nchanged to reflect the bug fix, ideally in the same commit that fixes the bug\nor adds the feature. To build and review docs, use the following steps.\n\n1. In the main Pyramid checkout directory, run `tox -e docs`:\n\n     $ $TOX -e docs\n\n2. Open the `.tox/docs/html/index.html` file to see the resulting HTML\n   rendering.\n\n\nChange Log\n----------\n\n- Feature additions and bugfixes must be added to the `CHANGES.rst`\n  file in the prevailing style. Changelog entries should be long and\n  descriptive, not cryptic. Other developers should be able to know\n  what your changelog entry means.\n"
        },
        {
          "name": "HISTORY.rst",
          "type": "blob",
          "size": 261.3466796875,
          "content": "2.0 (2021-02-28)\n================\n\n- No changes from 2.0b1.\n\n2.0b1 (2021-02-20)\n==================\n\n- Break potential reference cycle between ``request`` and ``context``.\n  See https://github.com/Pylons/pyramid/pull/3649\n\n- Remove ``update_wrapper`` from ``pyramid.decorator.reify``.\n  See https://github.com/Pylons/pyramid/pull/3657\n\n2.0b0 (2020-12-15)\n==================\n\n- Overhaul tutorials and update cookiecutter to de-emphasize ``request.user``\n  in favor of ``request.identity`` for common use cases.\n  See https://github.com/Pylons/pyramid/pull/3629\n\n- Improve documentation and patterns with builtin fixtures shipped in the\n  cookiecutters.\n  See https://github.com/Pylons/pyramid/pull/3629\n\n2.0a0 (2020-11-29)\n==================\n\nFeatures\n--------\n\n- Add support for Python 3.9.\n  See https://github.com/Pylons/pyramid/issues/3622\n\n- The ``aslist`` method now handles non-string objects when flattening.\n  See https://github.com/Pylons/pyramid/pull/3594\n\n- It is now possible to pass multiple values to the ``header`` predicate\n  for route and view configuration.\n  See https://github.com/Pylons/pyramid/pull/3576\n\n- Add support for Python 3.8.\n  See https://github.com/Pylons/pyramid/pull/3547\n\n- New security APIs have been added to support a massive overhaul of the\n  authentication and authorization system. Read\n  \"Upgrading Authentication/Authorization\" in the \"What's New in Pyramid 2.0\"\n  chapter of the documentation for information about using this new system.\n\n  - ``pyramid.config.Configurator.set_security_policy``.\n  - ``pyramid.interfaces.ISecurityPolicy``\n  - ``pyramid.request.Request.identity``.\n  - ``pyramid.request.Request.is_authenticated``\n  - ``pyramid.authentication.SessionAuthenticationHelper``\n  - ``pyramid.authorization.ACLHelper``\n  - ``is_authenticated=True/False`` predicate for route and view configs\n\n  See https://github.com/Pylons/pyramid/pull/3465 and\n  https://github.com/Pylons/pyramid/pull/3598\n\n- Changed the default ``serializer`` on\n  ``pyramid.session.SignedCookieSessionFactory`` to use\n  ``pyramid.session.JSONSerializer`` instead of\n  ``pyramid.session.PickleSerializer``. Read\n  \"Upgrading Session Serialization\" in the \"What's New in Pyramid 2.0\" chapter\n  of the documentation for more information about why this change was made.\n  See https://github.com/Pylons/pyramid/pull/3413\n\n- It is now possible to control whether a route pattern contains a trailing\n  slash when it is composed with a route prefix using\n  ``config.include(..., route_prefix=...)`` or\n  ``with config.route_prefix_context(...)``. This can be done by specifying\n  an empty pattern and setting the new argument\n  ``inherit_slash=True``. For example:\n\n  .. code-block:: python\n\n      with config.route_prefix_context('/users'):\n          config.add_route('users', '', inherit_slash=True)\n\n  In the example, the resulting pattern will be ``/users``. Similarly, if the\n  route prefix were ``/users/`` then the final pattern would be ``/users/``.\n  If the ``pattern`` was ``'/'``, then the final pattern would always be\n  ``/users/``. This new setting is only available if the pattern supplied\n  to ``add_route`` is the empty string (``''``).\n  See https://github.com/Pylons/pyramid/pull/3420\n\n- No longer define ``pyramid.request.Request.json_body`` which is already\n  provided by WebOb. This allows the attribute to now be settable.\n  See https://github.com/Pylons/pyramid/pull/3447\n\n- Improve debugging info from ``pyramid.view.view_config`` decorator.\n  See https://github.com/Pylons/pyramid/pull/3483\n\n- A new parameter, ``allow_no_origin``, was added to\n  ``pyramid.config.Configurator.set_default_csrf_options`` as well as\n  ``pyramid.csrf.check_csrf_origin``. This option controls whether a\n  request is rejected if it has no ``Origin`` or ``Referer`` header -\n  often the result of a user configuring their browser not to send a\n  ``Referer`` header for privacy reasons even on same-domain requests.\n  The default is to reject requests without a known origin. It is also\n  possible to allow the special ``Origin: null`` header by adding it to the\n  ``pyramid.csrf_trusted_origins`` list in the settings.\n  See https://github.com/Pylons/pyramid/pull/3512\n  and https://github.com/Pylons/pyramid/pull/3518\n\n- A new parameter, ``check_origin``, was added to\n  ``pyramid.config.Configurator.set_default_csrf_options`` which disables\n  origin checking entirely.\n  See https://github.com/Pylons/pyramid/pull/3518\n\n- Added ``pyramid.interfaces.IPredicateInfo`` which defines the object passed\n  to predicate factories as their second argument.\n  See https://github.com/Pylons/pyramid/pull/3514\n\n- Added support for serving pre-compressed static assets by using the\n  ``content_encodings`` argument of\n  ``pyramid.config.Configurator.add_static_view`` and\n  ``pyramid.static.static_view``.\n  See https://github.com/Pylons/pyramid/pull/3537\n\n- Fix ``DeprecationWarning`` emitted by using the ``imp`` module.\n  See https://github.com/Pylons/pyramid/pull/3553\n\n- Properties created via ``config.add_request_method(..., property=True)`` or\n  ``request.set_property`` used to be readonly. They can now be overridden\n  via ``request.foo = ...`` and until the value is deleted it will return\n  the overridden value. This is most useful when mocking request properties\n  in testing.\n  See https://github.com/Pylons/pyramid/pull/3559\n\n- Finished callbacks are now executed as part of the ``closer`` that is\n  invoked as part of ``pyramid.scripting.prepare`` and\n  ``pyramid.paster.bootstrap``.\n  See https://github.com/Pylons/pyramid/pull/3561\n\n- Added ``pyramid.request.RequestLocalCache`` which can be used to create\n  simple objects that are shared across requests and can be used to store\n  per-request data. This is useful when the source of data is external to\n  the request itself. Often a reified property is used on a request via\n  ``pyramid.config.Configurator.add_request_method``, or\n  ``pyramid.decorator.reify``, and these work great when the data is\n  generated on-demand when accessing the request property. However, often\n  the case is that the data is generated when accessing some other system\n  and then we want to cache the data for the duration of the request.\n  See https://github.com/Pylons/pyramid/pull/3561\n\n- Exposed ``pyramid.authorization.ALL_PERMISSIONS`` and\n  ``pyramid.authorization.DENY_ALL`` such that all of the ACL-related constants\n  are now importable from the ``pyramid.authorization`` namespace.\n  See https://github.com/Pylons/pyramid/pull/3563\n\n- ``pserve`` now outputs verbose messaging to `stderr` instead of `stdout`\n  to circumvent buffering issues that exist by default on `stdout`.\n  See https://github.com/Pylons/pyramid/pull/3593\n\nDeprecations\n------------\n\n- Deprecated the authentication and authorization interfaces and\n  principal-based support. See \"Upgrading Authentication/Authorization\" in\n  the \"What's New in Pyramid 2.0\" chapter of the documentation for information\n  on equivalent APIs and notes on upgrading. The following APIs are deprecated\n  as a result of this change:\n\n  - ``pyramid.config.Configurator.set_authentication_policy``\n  - ``pyramid.config.Configurator.set_authorization_policy``\n  - ``pyramid.interfaces.IAuthenticationPolicy``\n  - ``pyramid.interfaces.IAuthorizationPolicy``\n  - ``pyramid.request.Request.effective_principals``\n  - ``pyramid.request.Request.unauthenticated_userid``\n  - ``pyramid.authentication.AuthTktAuthenticationPolicy``\n  - ``pyramid.authentication.RemoteUserAuthenticationPolicy``\n  - ``pyramid.authentication.RepozeWho1AuthenticationPolicy``\n  - ``pyramid.authentication.SessionAuthenticationPolicy``\n  - ``pyramid.authentication.BasicAuthAuthenticationPolicy``\n  - ``pyramid.authorization.ACLAuthorizationPolicy``\n  - The ``effective_principals`` view and route predicates.\n\n  See https://github.com/Pylons/pyramid/pull/3465\n\n- Deprecated ``pyramid.security.principals_allowed_by_permission``. This\n  method continues to work with the deprecated\n  ``pyramid.interfaces.IAuthorizationPolicy`` interface but will not work with\n  the new ``pyramid.interfaces.ISecurityPolicy``.\n  See https://github.com/Pylons/pyramid/pull/3465\n\n- Deprecated several ACL-related aspects of ``pyramid.security``. Equivalent\n  objects should now be imported from the ``pyramid.authorization`` namespace.\n  This includes:\n\n  - ``pyramid.security.Everyone``\n  - ``pyramid.security.Authenticated``\n  - ``pyramid.security.ALL_PERMISSIONS``\n  - ``pyramid.security.DENY_ALL``\n  - ``pyramid.security.ACLAllowed``\n  - ``pyramid.security.ACLDenied``\n\n  See https://github.com/Pylons/pyramid/pull/3563\n\n- Deprecated ``pyramid.session.PickleSerializer``.\n  See https://github.com/pylons/pyramid/issues/2709,\n  and https://github.com/pylons/pyramid/pull/3353,\n  and https://github.com/pylons/pyramid/pull/3413\n\nBackward Incompatibilities\n--------------------------\n\n- Drop support for Python 2.7, 3.4, and 3.5.\n  See https://github.com/Pylons/pyramid/pull/3421,\n  and https://github.com/Pylons/pyramid/pull/3547,\n  and https://github.com/Pylons/pyramid/pull/3634\n\n- Removed the ``pyramid.compat`` module. Integrators should use the ``six``\n  module or vendor shims they are using into their own codebases going forward.\n  https://github.com/Pylons/pyramid/pull/3421\n\n- ``pcreate`` and the builtin scaffolds have been removed in favor of\n  using the ``cookiecutter`` tool and the ``pyramid-cookiecutter-starter``\n  cookiecutter. The script and scaffolds were deprecated in Pyramid 1.8.\n  See https://github.com/Pylons/pyramid/pull/3406\n\n- Changed the default ``hashalg`` on\n  ``pyramid.authentication.AuthTktCookieHelper`` to ``sha512``.\n  See https://github.com/Pylons/pyramid/pull/3557\n\n- Removed ``pyramid.interfaces.ITemplateRenderer``. This interface was\n  deprecated since Pyramid 1.5 and was an interface\n  used by libraries like ``pyramid_mako`` and ``pyramid_chameleon`` but\n  provided no functionality within Pyramid itself.\n  See https://github.com/Pylons/pyramid/pull/3409\n\n- Removed ``pyramid.security.has_permission``,\n  ``pyramid.security.authenticated_userid``,\n  ``pyramid.security.unauthenticated_userid``, and\n  ``pyramid.security.effective_principals``. These methods were deprecated\n  in Pyramid 1.5 and all have equivalents available as properties on the\n  request. For example, ``request.authenticated_userid``.\n  See https://github.com/Pylons/pyramid/pull/3410\n\n- Removed support for supplying a media range to the ``accept`` predicate of\n  both ``pyramid.config.Configurator.add_view`` and\n  ``pyramid.config.Configurator.add_route``. These options were deprecated\n  in Pyramid 1.10 and WebOb 1.8 because they resulted in uncontrollable\n  matching that was not compliant with the RFC.\n  See https://github.com/Pylons/pyramid/pull/3411\n\n- Removed ``pyramid.session.UnencryptedCookieSessionFactoryConfig``. This\n  session factory was replaced with\n  ``pyramid.session.SignedCookieSessionFactory`` in Pyramid 1.5 and has been\n  deprecated since then.\n  See https://github.com/Pylons/pyramid/pull/3412\n\n- Removed ``pyramid.session.signed_serialize``, and\n  ``pyramid.session.signed_deserialize``. These methods were only used by\n  the now-removed ``pyramid.session.UnencryptedCookieSessionFactoryConfig``\n  and were coupled to the vulnerable pickle serialization format which could\n  lead to remove code execution if the secret key is compromised.\n  See https://github.com/Pylons/pyramid/pull/3412\n\n- Changed the default ``serializer`` on\n  ``pyramid.session.SignedCookieSessionFactory`` to use\n  ``pyramid.session.JSONSerializer`` instead of\n  ``pyramid.session.PickleSerializer``. Read \"Upgrading Session Serialization\"\n  in the \"What's New in Pyramid 2.0\" chapter of the documentation for more\n  information about why this change was made.\n  See https://github.com/Pylons/pyramid/pull/3413\n\n- ``pyramid.request.Request.invoke_exception_view`` will no longer be called\n  by the default execution policy.\n  See https://github.com/Pylons/pyramid/pull/3496\n\n- ``pyramid.config.Configurator.scan`` will no longer, by default, execute\n  Venusian decorator callbacks registered for categories other than\n  ``'pyramid'``. To find any decorator regardless of category, specify\n  ``config.scan(..., categories=None)``.\n  See https://github.com/Pylons/pyramid/pull/3510\n\n- The second argument to predicate factories has been changed from ``config``\n  to ``info``, an instance of ``pyramid.interfaces.IPredicateInfo``. This\n  limits the data available to predicates but still provides the package,\n  registry, settings and dotted-name resolver which should cover most use\n  cases and is largely backward compatible.\n  See https://github.com/Pylons/pyramid/pull/3514\n\n- Removed the ``check_csrf`` predicate. Instead, use\n  ``pyramid.config.Configurator.set_default_csrf_options`` and the\n  ``require_csrf`` view option to enable automatic CSRF checking.\n  See https://github.com/Pylons/pyramid/pull/3521\n\n- Update the default behavior of\n  ``pyramid.authenticationAuthTktAuthenticationPolicy`` and\n  ``pyramid.authentication.AuthTktCookieHelper`` to only set a single cookie\n  without a domain parameter when no other domain constraints are specified.\n  Prior to this change, ``wild_domain=False`` (the default) was effectively\n  treated the same as ``wild_domain=True``, in which a cookie was defined\n  such that browsers would use it both for the request's domain, as well as\n  any subdomain. In the new behavior, cookies will only affect the current\n  domain, and not subdomains, by default.\n  See https://github.com/Pylons/pyramid/pull/3587\n\nDocumentation Changes\n---------------------\n\n- Restore build of PDF on Read The Docs.\n  See https://github.com/Pylons/pyramid/issues/3290\n\n- Fix docs build for Sphinx 2.0.\n  See https://github.com/Pylons/pyramid/pull/3480\n\n- Significant updates to the wiki, wiki2 tutorials to demonstrate the new\n  security policy usage as well as a much more production-ready test harness.\n  See https://github.com/Pylons/pyramid/pull/3557\n\n1.10 (2018-10-31)\n=================\n\n- No major changes from 1.10b1.\n\n1.10b1 (2018-10-28)\n===================\n\nBug Fixes\n---------\n\n- Fix the ``pyramid.testing.DummyRequest`` to support the new\n  ``request.accept`` API so that ``acceptable_offers`` is available even\n  when code sets the value to a string.\n  See https://github.com/Pylons/pyramid/pull/3396\n\n- Fix deprecated escape sequences in preparation for Python 3.8.\n  See https://github.com/Pylons/pyramid/pull/3400\n\n1.10a1 (2018-10-15)\n===================\n\nFeatures\n--------\n\n- Add a ``_depth`` and ``_category`` arguments to all of the venusian\n  decorators. The ``_category`` argument can be used to affect which actions\n  are registered when performing a ``config.scan(..., category=...)`` with a\n  specific category. The ``_depth`` argument should be used when wrapping\n  the decorator in your own. This change affects ``pyramid.view.view_config``,\n  ``pyramid.view.exception_view_config``,\n  ``pyramid.view.forbidden_view_config``, ``pyramid.view.notfound_view_config``,\n  ``pyramid.events.subscriber`` and ``pyramid.response.response_adapter``\n  decorators. See https://github.com/Pylons/pyramid/pull/3105 and\n  https://github.com/Pylons/pyramid/pull/3122\n\n- Fix the ``pyramid.request.Request`` class name after using\n  ``set_property`` or ``config.add_request_method`` such that the\n  ``str(request.__class__)`` would appear as ``pyramid.request.Request``\n  instead of ``pyramid.util.Request``.\n  See https://github.com/Pylons/pyramid/pull/3129\n\n- In ``cherrypy_server_runner``, prefer imports from the ``cheroot`` package\n  over the legacy imports from `cherrypy.wsgiserver`.\n  See https://github.com/Pylons/pyramid/pull/3235\n\n- Add a context manager ``route_prefix_context`` to the\n  ``pyramid.config.Configurator`` to allow for convenient setting of the\n  route_prefix for ``include`` and ``add_route`` calls inside the context.\n  See https://github.com/Pylons/pyramid/pull/3279\n\n- Modify the builtin session implementations to support ``SameSite`` options\n  on cookies and set the default to ``'Lax'``. This affects\n  ``pyramid.session.BaseCookieSessionFactory``,\n  ``pyramid.session.SignedCookieSessionFactory``, and\n  ``pyramid.session.UnencryptedCookieSessionFactoryConfig``.\n  See https://github.com/Pylons/pyramid/pull/3300\n\n- Modify ``pyramid.authentication.AuthTktAuthenticationPolicy`` and\n  ``pyramid.csrf.CookieCSRFStoragePolicy`` to support the ``SameSite`` option\n  on cookies and set the default to ``'Lax'``.\n  See https://github.com/Pylons/pyramid/pull/3319\n\n- Added new ``pyramid.httpexceptions.HTTPPermanentRedirect``\n  exception/response object for a HTTP 308 redirect.\n  See https://github.com/Pylons/pyramid/pull/3302\n\n- Within ``pshell``, allow the user-defined ``setup`` function to be a\n  generator, in which case it may wrap the command's lifecycle.\n  See https://github.com/Pylons/pyramid/pull/3318\n\n- Within ``pshell``, variables defined by the ``[pshell]`` settings are\n  available within the user-defined ``setup`` function.\n  See https://github.com/Pylons/pyramid/pull/3318\n\n- Add support for Python 3.7. Add testing on Python 3.8 with allowed failures.\n  See https://github.com/Pylons/pyramid/pull/3333\n\n- Added the ``pyramid.config.Configurator.add_accept_view_order`` directive,\n  allowing users to specify media type preferences in ambiguous situations\n  such as when several views match. A default ordering is defined for media\n  types that prefers human-readable html/text responses over JSON.\n  See https://github.com/Pylons/pyramid/pull/3326\n\n- Support a list of media types in the ``accept`` predicate used in\n  ``pyramid.config.Configurator.add_route``.\n  See https://github.com/Pylons/pyramid/pull/3326\n\n- Added ``pyramid.session.JSONSerializer``. See \"Upcoming Changes to ISession\n  in Pyramid 2.0\" in the \"Sessions\" chapter of the documentation for more\n  information about this feature.\n  See https://github.com/Pylons/pyramid/pull/3353\n\n- Add a ``registry`` argument to ``pyramid.renderers.get_renderer``\n  to allow users to avoid threadlocals during renderer lookup.\n  See https://github.com/Pylons/pyramid/pull/3358\n\n- Pyramid's test suite is no longer distributed with the universal wheel.\n  See https://github.com/Pylons/pyramid/pull/3387\n\n- All Python code is now formatted automatically using ``black``.\n  See https://github.com/Pylons/pyramid/pull/3388\n\nBug Fixes\n---------\n\n- Set appropriate ``code`` and ``title`` attributes on the ``HTTPClientError``\n  and ``HTTPServerError`` exception classes. This prevents inadvertently\n  returning a 520 error code.\n  See https://github.com/Pylons/pyramid/pull/3280\n\n- Replace ``webob.acceptparse.MIMEAccept`` from WebOb with\n  ``webob.acceptparse.create_accept_header`` in the HTTP exception handling\n  code. The old ``MIMEAccept`` has been deprecated. The new methods follow the\n  RFC's more closely. See https://github.com/Pylons/pyramid/pull/3251\n\n- Catch extra errors like ``AttributeError`` when unpickling \"trusted\"\n  session cookies with bad pickle data in them. This would occur when sharing\n  a secret between projects that shouldn't actually share session cookies,\n  like when reusing secrets between projects in development.\n  See https://github.com/Pylons/pyramid/pull/3325\n\nDeprecations\n------------\n\n- The ``pyramid.interfaces.ISession`` interface will move to require\n  JSON-serializable objects in Pyramid 2.0. See\n  \"Upcoming Changes to ISession in Pyramid 2.0\" in the \"Sessions\" chapter\n  of the documentation for more information about this change.\n  See https://github.com/Pylons/pyramid/pull/3353\n\n- The ``pyramid.session.signed_serialize`` and\n  ``pyramid.session.signed_deserialize`` functions will be removed in Pyramid\n  2.0, along with the removal of\n  ``pyramid.session.UnencryptedCookieSessionFactoryConfig`` which was\n  deprecated in Pyramid 1.5. Please switch to using the\n  ``SignedCookieSessionFactory``, copying the code, or another session\n  implementation if you're still using these features.\n  See https://github.com/Pylons/pyramid/pull/3353\n\n- Media ranges are deprecated in the ``accept`` argument of\n  ``pyramid.config.Configurator.add_route``. Use a list of explicit\n  media types to ``add_route`` to support multiple types.\n\n- Media ranges are deprecated in the ``accept`` argument of\n  ``pyramid.config.Configurator.add_view``.  There is no replacement for\n  ranges to ``add_view``, but after much discussion the workflow is\n  fundamentally ambiguous in the face of various client-supplied values for\n  the ``Accept`` header.\n  See https://github.com/Pylons/pyramid/pull/3326\n\nBackward Incompatibilities\n--------------------------\n\n- On Python 3.4+ the ``repoze.lru`` dependency is dropped. If you were using\n  this package directly in your apps you should make sure that you are\n  depending on it directly within your project.\n  See https://github.com/Pylons/pyramid/pull/3140\n\n- Remove the ``permission`` argument from\n  ``pyramid.config.Configurator.add_route``. This was an argument left over\n  from a feature removed in Pyramid 1.5 and has had no effect since then.\n  See https://github.com/Pylons/pyramid/pull/3299\n\n- Modify the builtin session implementations to set ``SameSite='Lax'`` on\n  cookies. This affects ``pyramid.session.BaseCookieSessionFactory``,\n  ``pyramid.session.SignedCookieSessionFactory``, and\n  ``pyramid.session.UnencryptedCookieSessionFactoryConfig``.\n  See https://github.com/Pylons/pyramid/pull/3300\n\n- Variables defined in the ``[pshell]`` section of the settings will no\n  longer override those set by the ``setup`` function.\n  See https://github.com/Pylons/pyramid/pull/3318\n\n- ``pyramid.config.Configurator.add_notfound_view`` uses default redirect\n  class exception ``pyramid.httpexceptions.HTTPTemporaryRedirect`` instead\n  of previous ``pyramid.httpexceptions.HTTPFound``.\n  See https://github.com/Pylons/pyramid/pull/3328\n\n- Removed ``pyramid.config.Configurator.set_request_property`` which had been\n  deprecated since Pyramid 1.5. Instead use\n  ``pyramid.config.Configurator.add_request_method`` with ``reify=True`` or\n  ``property=True``.\n  See https://github.com/Pylons/pyramid/pull/3368\n\n- Removed the ``principal`` keyword argument from\n  ``pyramid.security.remember`` which had been deprecated since Pyramid 1.6\n  and replaced by the ``userid`` argument.\n  See https://github.com/Pylons/pyramid/pull/3369\n\n- Removed the ``pyramid.tests`` subpackage that used to contain the Pyramid\n  test suite. These changes also changed the format of the repository to move\n  the code into a ``src`` folder.\n  See https://github.com/Pylons/pyramid/pull/3387\n\nDocumentation Changes\n---------------------\n\n- Ad support for Read The Docs Ethical Ads.\n  See https://github.com/Pylons/pyramid/pull/3360 and\n  https://docs.readthedocs.io/en/latest/advertising/ethical-advertising.html\n\n- Add support for alembic to the pyramid-cookiecutter-alchemy cookiecutter\n  and update the wiki2 tutorial to explain how it works.\n  See https://github.com/Pylons/pyramid/pull/3307 and\n  https://github.com/Pylons/pyramid-cookiecutter-alchemy/pull/7\n\n- Bump Sphinx to >= 1.7.4 in setup.py to support ``emphasize-lines`` in PDFs\n  and to pave the way for xelatex support.  See\n  https://github.com/Pylons/pyramid/pull/3271,\n  https://github.com/Pylons/pyramid/issues/667, and\n  https://github.com/Pylons/pyramid/issues/2572\n\n- Added extra tests to the quick tutorial.\n  See https://github.com/Pylons/pyramid/pull/3375\n\n1.9 (2017-06-26)\n================\n\n- No major changes from 1.9b1.\n\n- Updated documentation links for ``docs.pylonsproject.org`` to use HTTPS.\n\n1.9b1 (2017-06-19)\n==================\n\n- Add an informative error message when unknown predicates are supplied. The\n  new message suggests alternatives based on the list of known predicates.\n  See https://github.com/Pylons/pyramid/pull/3054\n\n- Added integrity attributes for JavaScripts in cookiecutters, scaffolds, and\n  resulting source files in tutorials.\n  See https://github.com/Pylons/pyramid/issues/2548\n\n- Update RELEASING.txt for updating cookiecutters. Change cookiecutter URLs to\n  use shortcut.\n  See https://github.com/Pylons/pyramid/issues/3042\n\n- Ensure the correct threadlocals are pushed during view execution when\n  invoked from ``request.invoke_exception_view``.\n  See https://github.com/Pylons/pyramid/pull/3060\n\n- Fix a bug in which ``pyramid.security.ALL_PERMISSIONS`` failed to return\n  a valid iterator in its ``__iter__`` implementation.\n  See https://github.com/Pylons/pyramid/pull/3074\n\n- Normalize the permission results to a proper class hierarchy.\n  ``pyramid.security.ACLAllowed`` is now a subclass of\n  ``pyramid.security.Allowed`` and ``pyramid.security.ACLDenied`` is now a\n  subclass of ``pyramid.security.Denied``.\n  See https://github.com/Pylons/pyramid/pull/3084\n\n- Add a ``quote_via`` argument to ``pyramid.encode.urlencode`` to follow\n  the stdlib's version and enable custom quoting functions.\n  See https://github.com/Pylons/pyramid/pull/3088\n\n- Support `_query=None` and `_anchor=None` in ``request.route_url`` as well\n  as ``query=None`` and ``anchor=None`` in ``request.resource_url``.\n  Previously this would cause an `?` and a `#`, respectively, in the url\n  with nothing after it. Now the unnecessary parts are dropped from the\n  generated URL. See https://github.com/Pylons/pyramid/pull/3034\n\n- Revamp the ``IRouter`` API used by ``IExecutionPolicy`` to force\n  pushing/popping the request threadlocals. The\n  ``IRouter.make_request(environ)`` API has been replaced by\n  ``IRouter.request_context(environ)`` which should be used as a context\n  manager. See https://github.com/Pylons/pyramid/pull/3086\n\n1.9a2 (2017-05-09)\n==================\n\nBackward Incompatibilities\n--------------------------\n\n- ``request.exception`` and ``request.exc_info`` will only be set if the\n  response was generated by the EXCVIEW tween. This is to avoid any confusion\n  where a response was generated elsewhere in the pipeline and not in\n  direct relation to the original exception. If anyone upstream wants to\n  catch and render responses for exceptions they should set\n  ``request.exception`` and ``request.exc_info`` themselves to indicate\n  the exception that was squashed when generating the response.\n\n  Similar behavior occurs with ``request.invoke_exception_view`` in which\n  the exception properties are set to reflect the exception if a response\n  is successfully generated by the method.\n\n  This is a very minor incompatibility. Most tweens right now would give\n  priority to the raised exception and ignore ``request.exception``. This\n  change just improves and clarifies that bookkeeping by trying to be\n  more clear about the relationship between the response and its squashed\n  exception. See https://github.com/Pylons/pyramid/pull/3029 and\n  https://github.com/Pylons/pyramid/pull/3031\n\n1.9a1 (2017-05-01)\n==================\n\nMajor Features\n--------------\n\n- The file format used by all ``p*`` command line scripts such as ``pserve``\n  and ``pshell``, as well as the ``pyramid.paster.bootstrap`` function\n  is now replaceable thanks to a new dependency on\n  `plaster <https://docs.pylonsproject.org/projects/plaster/en/latest/>`_.\n\n  For now, Pyramid is still shipping with integrated support for the\n  PasteDeploy INI format by depending on the\n  `plaster_pastedeploy <https://github.com/Pylons/plaster_pastedeploy>`_\n  binding library. This may change in the future.\n\n  See https://github.com/Pylons/pyramid/pull/2985\n\n- Added an execution policy hook to the request pipeline. An execution\n  policy has the ability to control creation and execution of the request\n  objects before they enter the rest of the pipeline. This means for a single\n  request environ the policy may create more than one request object.\n\n  The first library to use this feature is\n  `pyramid_retry\n  <https://docs.pylonsproject.org/projects/pyramid-retry/en/latest/>`_.\n\n  See https://github.com/Pylons/pyramid/pull/2964\n\n- CSRF support has been refactored out of sessions and into its own\n  independent API in the ``pyramid.csrf`` module. It supports a pluggable\n  ``pyramid.interfaces.ICSRFStoragePolicy`` which can be used to define your\n  own mechanism for generating and validating CSRF tokens. By default,\n  Pyramid continues to use the ``pyramid.csrf.LegacySessionCSRFStoragePolicy``\n  that uses the ``request.session.get_csrf_token`` and\n  ``request.session.new_csrf_token`` APIs under the hood to preserve\n  compatibility. Two new policies are shipped as well,\n  ``pyramid.csrf.SessionCSRFStoragePolicy`` and\n  ``pyramid.csrf.CookieCSRFStoragePolicy`` which will store the CSRF tokens\n  in the session and in a standalone cookie, respectively. The storage policy\n  can be changed by using the new\n  ``pyramid.config.Configurator.set_csrf_storage_policy`` config directive.\n\n  CSRF tokens should be used via the new ``pyramid.csrf.get_csrf_token``,\n  ``pyramid.csrf.new_csrf_token`` and ``pyramid.csrf.check_csrf_token`` APIs\n  in order to continue working if the storage policy is changed. Also, the\n  ``pyramid.csrf.get_csrf_token`` function is injected into templates to be\n  used conveniently in UI code.\n\n  See https://github.com/Pylons/pyramid/pull/2854 and\n  https://github.com/Pylons/pyramid/pull/3019\n\nMinor Features\n--------------\n\n- Support an ``open_url`` config setting in the ``pserve`` section of the\n  config file. This url is used to open a web browser when ``pserve --browser``\n  is invoked. When this setting is unavailable the ``pserve`` script will\n  attempt to guess the port the server is using from the\n  ``server:<server_name>`` section of the config file but there is no\n  requirement that the server is being run in this format so it may fail.\n  See https://github.com/Pylons/pyramid/pull/2984\n\n- The ``pyramid.config.Configurator`` can now be used as a context manager\n  which will automatically push/pop threadlocals (similar to\n  ``config.begin()`` and ``config.end()``). It will also automatically perform\n  a ``config.commit()`` and thus it is only recommended to be used at the\n  top-level of your app. See https://github.com/Pylons/pyramid/pull/2874\n\n- The threadlocals are now available inside any function invoked via\n  ``config.include``. This means the only config-time code that cannot rely\n  on threadlocals is code executed from non-actions inside the main. This\n  can be alleviated by invoking ``config.begin()`` and ``config.end()``\n  appropriately or using the new context manager feature of the configurator.\n  See https://github.com/Pylons/pyramid/pull/2989\n\nBug Fixes\n---------\n\n- HTTPException's accepts a detail kwarg that may be used to pass additional\n  details to the exception. You may now pass objects so long as they have a\n  valid __str__ method. See https://github.com/Pylons/pyramid/pull/2951\n\n- Fix a reference cycle causing memory leaks in which the registry\n  would keep a ``Configurator`` instance alive even after the configurator\n  was discarded. Another fix was also added for the ``global_registries``\n  object in which the registry was stored in a closure preventing it from\n  being deallocated. See https://github.com/Pylons/pyramid/pull/2967\n\n- Fix a bug directly invoking ``pyramid.scripts.pserve.main`` with the\n  ``--reload`` option in which ``sys.argv`` is always used in the subprocess\n  instead of the supplied ``argv``.\n  See https://github.com/Pylons/pyramid/pull/2962\n\nDeprecations\n------------\n\n- Pyramid currently depends on ``plaster_pastedeploy`` to simplify the\n  transition to ``plaster`` by maintaining integrated support for INI files.\n  This dependency on ``plaster_pastedeploy`` should be considered subject to\n  Pyramid's deprecation policy and may be removed in the future.\n  Applications should depend on the appropriate plaster binding to satisfy\n  their needs.\n\n- Retrieving CSRF token from the session has been deprecated in favor of\n  equivalent methods in the ``pyramid.csrf`` module. The CSRF methods\n  (``ISession.get_csrf_token`` and ``ISession.new_csrf_token``) are no longer\n  required on the ``ISession`` interface except when using the default\n  ``pyramid.csrf.LegacySessionCSRFStoragePolicy``.\n\n  Also, ``pyramid.session.check_csrf_token`` is now located at\n  ``pyramid.csrf.check_csrf_token``.\n\n  See https://github.com/Pylons/pyramid/pull/2854 and\n  https://github.com/Pylons/pyramid/pull/3019\n\nDocumentation Changes\n---------------------\n\n- Added the execution policy to the routing diagram in the Request Processing\n  chapter. See https://github.com/Pylons/pyramid/pull/2993\n\n1.8 (2017-01-21)\n================\n\n- No major changes from 1.8b1.\n\n1.8b1 (2017-01-17)\n==================\n\nFeatures\n--------\n\n- Added an ``override`` option to ``config.add_translation_dirs`` to allow\n  later calls to place translation directories at a higher priority than\n  earlier calls. See https://github.com/Pylons/pyramid/pull/2902\n\nDocumentation Changes\n---------------------\n\n- Improve registry documentation to discuss uses as a component registry\n  and as a dictionary. See https://github.com/Pylons/pyramid/pull/2893\n\n- Quick Tour, Quick Tutorial, and most other remaining documentation updated to\n  use cookiecutters instead of pcreate and scaffolds.\n  See https://github.com/Pylons/pyramid/pull/2888 and\n  https://github.com/Pylons/pyramid/pull/2889\n\n- Fix unittests in wiki2 to work without different dependencies between\n  py2 and py3. See https://github.com/Pylons/pyramid/pull/2899\n\n- Update Windows documentation to track newer Python 3 improvements to the\n  installer. See https://github.com/Pylons/pyramid/pull/2900\n\n- Updated the ``mod_wsgi`` tutorial to use cookiecutters and Apache 2.4+.\n  See https://github.com/Pylons/pyramid/pull/2901\n\n1.8a1 (2016-12-25)\n==================\n\nBackward Incompatibilities\n--------------------------\n\n- Support for the ``IContextURL`` interface that was deprecated in Pyramid 1.3\n  has been removed.  See https://github.com/Pylons/pyramid/pull/2822\n\n- Following the Pyramid deprecation period (1.6 -> 1.8),\n  daemon support for pserve has been removed. This includes removing the\n  daemon commands (start, stop, restart, status) as well as the following\n  arguments: ``--daemon``, ``--pid-file``, ``--log-file``,\n  ``--monitor-restart``, ``--status``, ``--user``, ``--group``,\n  ``--stop-daemon``\n\n  To run your server as a daemon you should use a process manager instead of\n  pserve.\n\n  See https://github.com/Pylons/pyramid/pull/2615\n\n- ``pcreate`` is now interactive by default. You will be prompted if a file\n  already exists with different content. Previously if there were similar\n  files it would silently skip them unless you specified ``--interactive``\n  or ``--overwrite``.\n  See https://github.com/Pylons/pyramid/pull/2775\n\n- Removed undocumented argument ``cachebust_match`` from\n  ``pyramid.static.static_view``. This argument was shipped accidentally\n  in Pyramid 1.6. See https://github.com/Pylons/pyramid/pull/2681\n\n- Change static view to avoid setting the ``Content-Encoding`` response header\n  to an encoding guessed using Python's ``mimetypes`` module. This was causing\n  clients to decode the content of gzipped files when downloading them. The\n  client would end up with a ``foo.txt.gz`` file on disk that was already\n  decoded, thus should really be ``foo.txt``. Also, the ``Content-Encoding``\n  should only have been used if the client itself broadcast support for the\n  encoding via ``Accept-Encoding`` request headers.\n  See https://github.com/Pylons/pyramid/pull/2810\n\n- Settings are no longer accessible as attributes on the settings object\n  (e.g. ``request.registry.settings.foo``). This was deprecated in Pyramid 1.2.\n  See https://github.com/Pylons/pyramid/pull/2823\n\nFeatures\n--------\n\n- Python 3.6 compatibility.\n  https://github.com/Pylons/pyramid/issues/2835\n\n- ``pcreate`` learned about ``--package-name`` to allow you to create a new\n  project in an existing folder with a different package name than the project\n  name. See https://github.com/Pylons/pyramid/pull/2783\n\n- The ``_get_credentials`` private method of ``BasicAuthAuthenticationPolicy``\n  has been extracted into standalone function ``extract_http_basic_credentials``\n  in ``pyramid.authentication`` module, this function extracts HTTP Basic\n  credentials from a ``request`` object, and returns them as a named tuple.\n  See https://github.com/Pylons/pyramid/pull/2662\n\n- Pyramid 1.4 silently dropped a feature of the configurator that has been\n  restored. It's again possible for action discriminators to conflict across\n  different action orders.\n  See https://github.com/Pylons/pyramid/pull/2757\n\n- ``pyramid.paster.bootstrap`` and its sibling ``pyramid.scripting.prepare``\n  can now be used as context managers to automatically invoke the ``closer``\n  and pop threadlocals off of the stack to prevent memory leaks.\n  See https://github.com/Pylons/pyramid/pull/2760\n\n- Added ``pyramid.config.Configurator.add_exception_view`` and the\n  ``pyramid.view.exception_view_config`` decorator. It is now possible using\n  these methods or via the new ``exception_only=True`` option to ``add_view``\n  to add a view which will only be matched when handling an exception.\n  Previously any exception views were also registered for a traversal\n  context that inherited from the exception class which prevented any\n  exception-only optimizations.\n  See https://github.com/Pylons/pyramid/pull/2660\n\n- Added the ``exception_only`` boolean to\n  ``pyramid.interfaces.IViewDeriverInfo`` which can be used by view derivers\n  to determine if they are wrapping a view which only handles exceptions.\n  This means that it is no longer necessary to perform request-time checks\n  for ``request.exception`` to determine if the view is handling an exception\n  - the pipeline can be optimized at config-time.\n  See https://github.com/Pylons/pyramid/pull/2660\n\n- ``pserve`` should now work with ``gevent`` and other workers that need\n  to monkeypatch the process, assuming the server and / or the app do so\n  as soon as possible before importing the rest of pyramid.\n  See https://github.com/Pylons/pyramid/pull/2797\n\n- Pyramid no longer copies the settings object passed to the\n  ``pyramid.config.Configurator(settings=)``. The original ``dict`` is kept.\n  See https://github.com/Pylons/pyramid/pull/2823\n\n- The csrf trusted origins setting may now be a whitespace-separated list of\n  domains. Previously only a python list was allowed. Also, it can now be set\n  using the ``PYRAMID_CSRF_TRUSTED_ORIGINS`` environment variable similar to\n  other settings. See https://github.com/Pylons/pyramid/pull/2823\n\n- ``pserve --reload`` now uses the\n  `hupper <https://docs.pylonsproject.org/projects/hupper/en/latest/>`_\n  library to monitor file changes. This comes with many improvements:\n\n  - If the `watchdog <https://pythonhosted.org/watchdog/>`_ package is\n    installed then monitoring will be done using inotify instead of\n    cpu and disk-intensive polling.\n\n  - The monitor is now a separate process that will not crash and starts up\n    before any of your code.\n\n  - The monitor will not restart the process after a crash until a file is\n    saved.\n\n  - The monitor works on windows.\n\n  - You can now trigger a reload manually from a pyramid view or any other\n    code via ``hupper.get_reloader().trigger_reload()``. Kind of neat.\n\n  - You can trigger a reload by issuing a ``SIGHUP`` to the monitor process.\n\n  See https://github.com/Pylons/pyramid/pull/2805\n\n- A new ``[pserve]`` section is supported in your config files with a\n  ``watch_files`` key that can configure ``pserve --reload`` to monitor custom\n  file paths. See https://github.com/Pylons/pyramid/pull/2827\n\n- Allow streaming responses to be made from subclasses of\n  ``pyramid.httpexceptions.HTTPException``. Previously the response would\n  be unrolled while testing for a body, making it impossible to stream\n  a response.\n  See https://github.com/Pylons/pyramid/pull/2863\n\n- Update starter, alchemy and zodb scaffolds to support IPv6 by using the\n  new ``listen`` directives in waitress.\n  See https://github.com/Pylons/pyramid/pull/2853\n\n- All p* scripts now use argparse instead of optparse. This improves their\n  ``--help`` output as well as enabling nicer documentation of their options.\n  See https://github.com/Pylons/pyramid/pull/2864\n\n- Any deferred configuration action registered via ``config.action`` may now\n  depend on threadlocal state, such as asset overrides, being active when\n  the action is executed.\n  See https://github.com/Pylons/pyramid/pull/2873\n\n- Asset specifications for directories passed to\n  ``config.add_translation_dirs`` now support overriding the entire asset\n  specification, including the folder name. Previously only the package name\n  was supported and the folder would always need to have the same name.\n  See https://github.com/Pylons/pyramid/pull/2873\n\n- ``config.begin()`` will propagate the current threadlocal request through\n  as long as the registry is the same. For example:\n\n  .. code-block:: python\n\n     request = Request.blank(...)\n     config.begin(request)  # pushes a request\n     config.begin()         # propagates the previous request through unchanged\n     assert get_current_request() is request\n\n  See https://github.com/Pylons/pyramid/pull/2873\n\n- Added a new ``callback`` option to ``config.set_default_csrf_options`` which\n  can be used to determine per-request whether CSRF checking should be enabled\n  to allow for a mix authentication methods. Only cookie-based methods\n  generally require CSRF checking.\n  See https://github.com/Pylons/pyramid/pull/2778\n\nBug Fixes\n---------\n\n- Fixed bug in ``proutes`` such that it now shows the correct view when a\n  class and ``attr`` is involved.\n  See: https://github.com/Pylons/pyramid/pull/2687\n\n- Fix a ``FutureWarning`` in Python 3.5 when using ``re.split`` on the\n  ``format`` setting to the ``proutes`` script.\n  See https://github.com/Pylons/pyramid/pull/2714\n\n- Fix a ``RuntimeWarning`` emitted by WebOb when using arbitrary objects\n  as the ``userid`` in the ``AuthTktAuthenticationPolicy``. This is now caught\n  by the policy and the object is serialized as a base64 string to avoid\n  the cryptic warning. Since the userid will be read back as a string on\n  subsequent requests a more useful warning is emitted encouraging you to\n  use a primitive type instead.\n  See https://github.com/Pylons/pyramid/pull/2715\n\n- Pyramid 1.6 introduced the ability for an action to invoke another action.\n  There was a bug in the way that ``config.add_view`` would interact with\n  custom view derivers introduced in Pyramid 1.7 because the view's\n  discriminator cannot be computed until view derivers and view predicates\n  have been created in earlier orders. Invoking an action from another action\n  would trigger an unrolling of the pipeline and would compute discriminators\n  before they were ready. The new behavior respects the ``order`` of the action\n  and ensures the discriminators are not computed until dependent actions\n  from previous orders have executed.\n  See https://github.com/Pylons/pyramid/pull/2757\n\n- Fix bug in i18n where the default domain would always use the Germanic plural\n  style, even if a different plural function is defined in the relevant\n  messages file. See https://github.com/Pylons/pyramid/pull/2859\n\n- The ``config.override_asset`` method now occurs during\n  ``pyramid.config.PHASE1_CONFIG`` such that it is ordered to execute before\n  any calls to ``config.add_translation_dirs``.\n  See https://github.com/Pylons/pyramid/pull/2873\n\nDeprecations\n------------\n\n- The ``pcreate`` script and related scaffolds have been deprecated in favor\n  of the popular\n  `cookiecutter <https://cookiecutter.readthedocs.io/en/latest/>`_ project.\n\n  All of Pyramid's official scaffolds as well as the tutorials have been\n  ported to cookiecutters:\n\n  - `pyramid-cookiecutter-starter\n    <https://github.com/Pylons/pyramid-cookiecutter-starter>`_\n\n  - `pyramid-cookiecutter-alchemy\n    <https://github.com/Pylons/pyramid-cookiecutter-alchemy>`_\n\n  - `pyramid-cookiecutter-zodb\n    <https://github.com/Pylons/pyramid-cookiecutter-zodb>`_\n\n  See https://github.com/Pylons/pyramid/pull/2780\n\nDocumentation Changes\n---------------------\n\n- Update Typographical Conventions.\n  https://github.com/Pylons/pyramid/pull/2838\n\n- Add `pyramid_nacl_session\n  <https://docs.pylonsproject.org/projects/pyramid-nacl-session/en/latest/>`_\n  to session factories. See https://github.com/Pylons/pyramid/issues/2791\n\n- Update ``HACKING.txt`` from stale branch that was never merged to master.\n  See https://github.com/Pylons/pyramid/pull/2782\n\n- Updated Windows installation instructions and related bits.\n  See https://github.com/Pylons/pyramid/issues/2661\n\n- Fix an inconsistency in the documentation between view predicates and\n  route predicates and highlight the differences in their APIs.\n  See https://github.com/Pylons/pyramid/pull/2764\n\n- Clarify a possible misuse of the ``headers`` kwarg to subclasses of\n  ``pyramid.httpexceptions.HTTPException`` in which more appropriate\n  kwargs from the parent class ``pyramid.response.Response`` should be\n  used instead. See https://github.com/Pylons/pyramid/pull/2750\n\n- The SQLAlchemy + URL Dispatch + Jinja2 (``wiki2``) and\n  ZODB + Traversal + Chameleon (``wiki``) tutorials have been updated to\n  utilize the new cookiecutters and drop support for the ``pcreate``\n  scaffolds.\n\n  See https://github.com/Pylons/pyramid/pull/2881 and\n  https://github.com/Pylons/pyramid/pull/2883.\n\n- Improve output of p* script descriptions for help.\n  See https://github.com/Pylons/pyramid/pull/2886\n\n- Quick Tour updated to use cookiecutters instead of pcreate and scaffolds.\n  See https://github.com/Pylons/pyramid/pull/2888\n\n1.7 (2016-05-19)\n================\n\n- Fix a bug in the wiki2 tutorial where bcrypt is always expecting byte\n  strings. See https://github.com/Pylons/pyramid/pull/2576\n\n- Simplify windows detection code and remove some duplicated data.\n  See https://github.com/Pylons/pyramid/pull/2585 and\n  https://github.com/Pylons/pyramid/pull/2586\n\n1.7b4 (2016-05-12)\n==================\n\n- Fixed the exception view tween to re-raise the original exception if\n  no exception view could be found to handle the exception. This better\n  allows tweens further up the chain to handle exceptions that were\n  left unhandled. Previously they would be converted into a\n  ``PredicateMismatch`` exception if predicates failed to allow the view to\n  handle the exception.\n  See https://github.com/Pylons/pyramid/pull/2567\n\n- Exposed the ``pyramid.interfaces.IRequestFactory`` interface to mirror\n  the public ``pyramid.interfaces.IResponseFactory`` interface.\n\n1.7b3 (2016-05-10)\n==================\n\n- Fix ``request.invoke_exception_view`` to raise an ``HTTPNotFound``\n  exception if no view is matched. Previously ``None`` would be returned\n  if no views were matched and a ``PredicateMismatch`` would be raised if\n  a view \"almost\" matched (a view was found matching the context).\n  See https://github.com/Pylons/pyramid/pull/2564\n\n- Add defaults for py.test configuration and coverage to all three scaffolds,\n  and update documentation accordingly.\n  See https://github.com/Pylons/pyramid/pull/2550\n\n- Add ``linkcheck`` to ``Makefile`` for Sphinx. To check the documentation for\n  broken links, use the command ``make linkcheck\n  SPHINXBUILD=$VENV/bin/sphinx-build``. Also removed and fixed dozens of broken\n  external links.\n\n- Fix the internal runner for scaffold tests to ensure they work with pip\n  and py.test.\n  See https://github.com/Pylons/pyramid/pull/2565\n\n1.7b2 (2016-05-01)\n==================\n\n- Removed inclusion of pyramid_tm in development.ini for alchemy scaffold\n  See https://github.com/Pylons/pyramid/issues/2538\n\n- A default permission set via ``config.set_default_permission`` will no\n  longer be enforced on an exception view. This has been the case for a while\n  with the default exception views (``config.add_notfound_view`` and\n  ``config.add_forbidden_view``), however for any other exception view a\n  developer had to remember to set ``permission=NO_PERMISSION_REQUIRED`` or\n  be surprised when things didn't work. It is still possible to force a\n  permission check on an exception view by setting the ``permission`` argument\n  manually to ``config.add_view``. This behavior is consistent with the new\n  CSRF features added in the 1.7 series.\n  See https://github.com/Pylons/pyramid/pull/2534\n\n1.7b1 (2016-04-25)\n==================\n\n- This release announces the beta period for 1.7.\n\n- Fix an issue where some files were being included in the alchemy scafffold\n  which had been removed from the 1.7 series.\n  See https://github.com/Pylons/pyramid/issues/2525\n\n1.7a2 (2016-04-19)\n==================\n\nFeatures\n--------\n\n- Automatic CSRF checks are now disabled by default on exception views. They\n  can be turned back on by setting the appropriate `require_csrf` option on\n  the view.\n  See https://github.com/Pylons/pyramid/pull/2517\n\n- The automatic CSRF API was reworked to use a config directive for\n  setting the options. The ``pyramid.require_default_csrf`` setting is\n  no longer supported. Instead, a new ``config.set_default_csrf_options``\n  directive has been introduced that allows the developer to specify\n  the default value for ``require_csrf`` as well as change the CSRF token,\n  header and safe request methods. The ``pyramid.csrf_trusted_origins``\n  setting is still supported.\n  See https://github.com/Pylons/pyramid/pull/2518\n\nBug fixes\n---------\n\n- CSRF origin checks had a bug causing the checks to always fail.\n  See https://github.com/Pylons/pyramid/pull/2512\n\n- Fix the test suite to pass on windows.\n  See https://github.com/Pylons/pyramid/pull/2520\n\n1.7a1 (2016-04-16)\n==================\n\nBackward Incompatibilities\n--------------------------\n\n- Following the Pyramid deprecation period (1.4 -> 1.6),\n  AuthTktAuthenticationPolicy's default hashing algorithm is changing from md5\n  to sha512. If you are using the authentication policy and need to continue\n  using md5, please explicitly set hashalg to 'md5'.\n\n  This change does mean that any existing auth tickets (and associated cookies)\n  will no longer be valid, and users will no longer be logged in, and have to\n  login to their accounts again.\n\n  See https://github.com/Pylons/pyramid/pull/2496\n\n- The ``check_csrf_token`` function no longer validates a csrf token in the\n  query string of a request. Only headers and request bodies are supported.\n  See https://github.com/Pylons/pyramid/pull/2500\n\nFeatures\n--------\n\n- Added a new setting, ``pyramid.require_default_csrf`` which may be used\n  to turn on CSRF checks globally for every POST request in the application.\n  This should be considered a good default for websites built on Pyramid.\n  It is possible to opt-out of CSRF checks on a per-view basis by setting\n  ``require_csrf=False`` on those views.\n  See https://github.com/Pylons/pyramid/pull/2413\n\n- Added a ``require_csrf`` view option which will enforce CSRF checks on any\n  request with an unsafe method as defined by RFC2616. If the CSRF check fails\n  a ``BadCSRFToken`` exception will be raised and may be caught by exception\n  views (the default response is a ``400 Bad Request``). This option should be\n  used in place of the deprecated ``check_csrf`` view predicate which would\n  normally result in unexpected ``404 Not Found`` response to the client\n  instead of a catchable exception.  See\n  https://github.com/Pylons/pyramid/pull/2413 and\n  https://github.com/Pylons/pyramid/pull/2500\n\n- Added an additional CSRF validation that checks the origin/referrer of a\n  request and makes sure it matches the current ``request.domain``. This\n  particular check is only active when accessing a site over HTTPS as otherwise\n  browsers don't always send the required information. If this additional CSRF\n  validation fails a ``BadCSRFOrigin`` exception will be raised and may be\n  caught by exception views (the default response is ``400 Bad Request``).\n  Additional allowed origins may be configured by setting\n  ``pyramid.csrf_trusted_origins`` to a list of domain names (with ports if on\n  a non standard port) to allow. Subdomains are not allowed unless the domain\n  name has been prefixed with a ``.``. See\n  https://github.com/Pylons/pyramid/pull/2501\n\n- Added a new ``pyramid.session.check_csrf_origin`` API for validating the\n  origin or referrer headers against the request's domain.\n  See https://github.com/Pylons/pyramid/pull/2501\n\n- Pyramid HTTPExceptions will now take into account the best match for the\n  clients Accept header, and depending on what is requested will return\n  text/html, application/json or text/plain. The default for */* is still\n  text/html, but if application/json is explicitly mentioned it will now\n  receive a valid JSON response. See\n  https://github.com/Pylons/pyramid/pull/2489\n\n- A new event and interface (BeforeTraversal) has been introduced that will\n  notify listeners before traversal starts in the router. See\n  https://github.com/Pylons/pyramid/pull/2469 and\n  https://github.com/Pylons/pyramid/pull/1876\n\n- Add a new \"view deriver\" concept to Pyramid to allow framework authors to\n  inject elements into the standard Pyramid view pipeline and affect all\n  views in an application. This is similar to a decorator except that it\n  has access to options passed to ``config.add_view`` and can affect other\n  stages of the pipeline such as the raw response from a view or prior to\n  security checks. See https://github.com/Pylons/pyramid/pull/2021\n\n- Allow a leading ``=`` on the key of the request param predicate.\n  For example, '=abc=1' is equivalent down to\n  ``request.params['=abc'] == '1'``.\n  See https://github.com/Pylons/pyramid/pull/1370\n\n- A new ``request.invoke_exception_view(...)`` method which can be used to\n  invoke an exception view and get back a response. This is useful for\n  rendering an exception view outside of the context of the excview tween\n  where you may need more control over the request.\n  See https://github.com/Pylons/pyramid/pull/2393\n\n- Allow using variable substitutions like ``%(LOGGING_LOGGER_ROOT_LEVEL)s``\n  for logging sections of the .ini file and populate these variables from\n  the ``pserve`` command line -- e.g.:\n  ``pserve development.ini LOGGING_LOGGER_ROOT_LEVEL=DEBUG``\n  See https://github.com/Pylons/pyramid/pull/2399\n\nDocumentation Changes\n---------------------\n\n- A complete overhaul of the docs:\n\n  - Use pip instead of easy_install.\n  - Become opinionated by preferring Python 3.4 or greater to simplify\n    installation of Python and its required packaging tools.\n  - Use venv for the tool, and virtual environment for the thing created,\n    instead of virtualenv.\n  - Use py.test and pytest-cov instead of nose and coverage.\n  - Further updates to the scaffolds as well as tutorials and their src files.\n\n  See https://github.com/Pylons/pyramid/pull/2468\n\n- A complete overhaul of the ``alchemy`` scaffold as well as the\n  Wiki2 SQLAlchemy + URLDispatch tutorial to introduce more modern features\n  into the usage of SQLAlchemy with Pyramid and provide a better starting\n  point for new projects.\n  See https://github.com/Pylons/pyramid/pull/2024\n\nBug Fixes\n---------\n\n- Fix ``pserve --browser`` to use the ``--server-name`` instead of the\n  app name when selecting a section to use. This was only working for people\n  who had server and app sections with the same name, for example\n  ``[app:main]`` and ``[server:main]``.\n  See https://github.com/Pylons/pyramid/pull/2292\n\nDeprecations\n------------\n\n- The ``check_csrf`` view predicate has been deprecated. Use the\n  new ``require_csrf`` option or the ``pyramid.require_default_csrf`` setting\n  to ensure that the ``BadCSRFToken`` exception is raised.\n  See https://github.com/Pylons/pyramid/pull/2413\n\n- Support for Python 3.3 will be removed in Pyramid 1.8.\n  https://github.com/Pylons/pyramid/issues/2477\n\n- Python 2.6 is no longer supported by Pyramid. See\n  https://github.com/Pylons/pyramid/issues/2368\n\n- Dropped Python 3.2 support.\n  See https://github.com/Pylons/pyramid/pull/2256\n\n1.6 (2016-01-03)\n================\n\nDeprecations\n------------\n\n- Continue removal of ``pserve`` daemon/process management features\n  by deprecating ``--user`` and ``--group`` options.\n  See https://github.com/Pylons/pyramid/pull/2190\n\n1.6b3 (2015-12-17)\n==================\n\nBackward Incompatibilities\n--------------------------\n\n- Remove the ``cachebust`` option from ``config.add_static_view``. See\n  ``config.add_cache_buster`` for the new way to attach cache busters to\n  static assets.\n  See https://github.com/Pylons/pyramid/pull/2186\n\n- Modify the ``pyramid.interfaces.ICacheBuster`` API to be a simple callable\n  instead of an object with ``match`` and ``pregenerate`` methods. Cache\n  busters are now focused solely on generation. Matching has been dropped.\n\n  Note this affects usage of ``pyramid.static.QueryStringCacheBuster`` and\n  ``pyramid.static.ManifestCacheBuster``.\n\n  See https://github.com/Pylons/pyramid/pull/2186\n\nFeatures\n--------\n\n- Add a new ``config.add_cache_buster`` API for attaching cache busters to\n  static assets. See https://github.com/Pylons/pyramid/pull/2186\n\nBug Fixes\n---------\n\n- Ensure that ``IAssetDescriptor.abspath`` always returns an absolute path.\n  There were cases depending on the process CWD that a relative path would\n  be returned. See https://github.com/Pylons/pyramid/pull/2188\n\n1.6b2 (2015-10-15)\n==================\n\nFeatures\n--------\n\n- Allow asset specifications to be supplied to\n  ``pyramid.static.ManifestCacheBuster`` instead of requiring a\n  filesystem path.\n\n1.6b1 (2015-10-15)\n==================\n\nBackward Incompatibilities\n--------------------------\n\n- IPython and BPython support have been removed from pshell in the core.\n  To continue using them on Pyramid 1.6+ you must install the binding\n  packages explicitly::\n\n    $ pip install pyramid_ipython\n\n    or\n\n    $ pip install pyramid_bpython\n\n- Remove default cache busters introduced in 1.6a1 including\n  ``PathSegmentCacheBuster``, ``PathSegmentMd5CacheBuster``, and\n  ``QueryStringMd5CacheBuster``.\n  See https://github.com/Pylons/pyramid/pull/2116\n\nFeatures\n--------\n\n- Additional shells for ``pshell`` can now be registered as entrypoints. See\n  https://github.com/Pylons/pyramid/pull/1891 and\n  https://github.com/Pylons/pyramid/pull/2012\n\n- The variables injected into ``pshell`` are now displayed with their\n  docstrings instead of the default ``str(obj)`` when possible.\n  See https://github.com/Pylons/pyramid/pull/1929\n\n- Add new ``pyramid.static.ManifestCacheBuster`` for use with external\n  asset pipelines as well as examples of common usages in the narrative.\n  See https://github.com/Pylons/pyramid/pull/2116\n\n- Fix ``pserve --reload`` to not crash on syntax errors!!!\n  See https://github.com/Pylons/pyramid/pull/2125\n\n- Fix an issue when user passes unparsed strings to ``pyramid.session.CookieSession``\n  and ``pyramid.authentication.AuthTktCookieHelper`` for time related parameters\n  ``timeout``, ``reissue_time``, ``max_age`` that expect an integer value.\n  See https://github.com/Pylons/pyramid/pull/2050\n\nBug Fixes\n---------\n\n- ``pyramid.httpexceptions.HTTPException`` now defaults to\n  ``520 Unknown Error`` instead of ``None None`` to conform with changes in\n  WebOb 1.5.\n  See https://github.com/Pylons/pyramid/pull/1865\n\n- ``pshell`` will now preserve the capitalization of variables in the\n  ``[pshell]`` section of the INI file. This makes exposing classes to the\n  shell a little more straightforward.\n  See https://github.com/Pylons/pyramid/pull/1883\n\n- Fixed usage of ``pserve --monitor-restart --daemon`` which would fail in\n  horrible ways. See https://github.com/Pylons/pyramid/pull/2118\n\n- Explicitly prevent ``pserve --reload --daemon`` from being used. It's never\n  been supported but would work and fail in weird ways.\n  See https://github.com/Pylons/pyramid/pull/2119\n\n- Fix an issue on Windows when running ``pserve --reload`` in which the\n  process failed to fork because it could not find the pserve script to\n  run. See https://github.com/Pylons/pyramid/pull/2138\n\nDeprecations\n------------\n\n- Deprecate ``pserve --monitor-restart`` in favor of user's using a real\n  process manager such as Systemd or Upstart as well as Python-based\n  solutions like Circus and Supervisor.\n  See https://github.com/Pylons/pyramid/pull/2120\n\n1.6a2 (2015-06-30)\n==================\n\nBug Fixes\n---------\n\n- Ensure that ``pyramid.httpexceptions.exception_response`` returns the\n  appropriate \"concrete\" class for ``400`` and ``500`` status codes.\n  See https://github.com/Pylons/pyramid/issues/1832\n\n- Fix an infinite recursion bug introduced in 1.6a1 when\n  ``pyramid.view.render_view_to_response`` was called directly or indirectly.\n  See https://github.com/Pylons/pyramid/issues/1643\n\n- Further fix the JSONP renderer by prefixing the returned content with\n  a comment. This should mitigate attacks from Flash (See CVE-2014-4671).\n  See https://github.com/Pylons/pyramid/pull/1649\n\n- Allow periods and brackets (``[]``) in the JSONP callback. The original\n  fix was overly-restrictive and broke Angular.\n  See https://github.com/Pylons/pyramid/pull/1649\n\n1.6a1 (2015-04-15)\n==================\n\nFeatures\n--------\n\n- pcreate will now ask for confirmation if invoked with\n  an argument for a project name that already exists or\n  is importable in the current environment.\n  See https://github.com/Pylons/pyramid/issues/1357 and\n  https://github.com/Pylons/pyramid/pull/1837\n\n- Make it possible to subclass ``pyramid.request.Request`` and also use\n  ``pyramid.request.Request.add_request.method``.  See\n  https://github.com/Pylons/pyramid/issues/1529\n\n- The ``pyramid.config.Configurator`` has grown the ability to allow\n  actions to call other actions during a commit-cycle. This enables much more\n  logic to be placed into actions, such as the ability to invoke other actions\n  or group them for improved conflict detection. We have also exposed and\n  documented the config phases that Pyramid uses in order to further assist\n  in building conforming addons.\n  See https://github.com/Pylons/pyramid/pull/1513\n\n- Add ``pyramid.request.apply_request_extensions`` function which can be\n  used in testing to apply any request extensions configured via\n  ``config.add_request_method``. Previously it was only possible to test\n  the extensions by going through Pyramid's router.\n  See https://github.com/Pylons/pyramid/pull/1581\n\n- pcreate when run without a scaffold argument will now print information on\n  the missing flag, as well as a list of available scaffolds.\n  See https://github.com/Pylons/pyramid/pull/1566 and\n  https://github.com/Pylons/pyramid/issues/1297\n\n- Added support / testing for 'pypy3' under Tox and Travis.\n  See https://github.com/Pylons/pyramid/pull/1469\n\n- Automate code coverage metrics across py2 and py3 instead of just py2.\n  See https://github.com/Pylons/pyramid/pull/1471\n\n- Cache busting for static resources has been added and is available via a new\n  argument to ``pyramid.config.Configurator.add_static_view``: ``cachebust``.\n  Core APIs are shipped for both cache busting via query strings and\n  path segments and may be extended to fit into custom asset pipelines.\n  See https://github.com/Pylons/pyramid/pull/1380 and\n  https://github.com/Pylons/pyramid/pull/1583\n\n- Add ``pyramid.config.Configurator.root_package`` attribute and init\n  parameter to assist with includeable packages that wish to resolve\n  resources relative to the package in which the ``Configurator`` was created.\n  This is especially useful for addons that need to load asset specs from\n  settings, in which case it is may be natural for a developer to define\n  imports or assets relative to the top-level package.\n  See https://github.com/Pylons/pyramid/pull/1337\n\n- Added line numbers to the log formatters in the scaffolds to assist with\n  debugging. See https://github.com/Pylons/pyramid/pull/1326\n\n- Add new HTTP exception objects for status codes\n  ``428 Precondition Required``, ``429 Too Many Requests`` and\n  ``431 Request Header Fields Too Large`` in ``pyramid.httpexceptions``.\n  See https://github.com/Pylons/pyramid/pull/1372/files\n\n- The ``pshell`` script will now load a ``PYTHONSTARTUP`` file if one is\n  defined in the environment prior to launching the interpreter.\n  See https://github.com/Pylons/pyramid/pull/1448\n\n- Make it simple to define notfound and forbidden views that wish to use\n  the default exception-response view but with altered predicates and other\n  configuration options. The ``view`` argument is now optional in\n  ``config.add_notfound_view`` and ``config.add_forbidden_view``..\n  See https://github.com/Pylons/pyramid/issues/494\n\n- Greatly improve the readability of the ``pcreate`` shell script output.\n  See https://github.com/Pylons/pyramid/pull/1453\n\n- Improve robustness to timing attacks in the ``AuthTktCookieHelper`` and\n  the ``SignedCookieSessionFactory`` classes by using the stdlib's\n  ``hmac.compare_digest`` if it is available (such as Python 2.7.7+ and 3.3+).\n  See https://github.com/Pylons/pyramid/pull/1457\n\n- Assets can now be overidden by an absolute path on the filesystem when using\n  the ``config.override_asset`` API. This makes it possible to fully support\n  serving up static content from a mutable directory while still being able\n  to use the ``request.static_url`` API and ``config.add_static_view``.\n  Previously it was not possible to use ``config.add_static_view`` with an\n  absolute path **and** generate urls to the content. This change replaces\n  the call, ``config.add_static_view('/abs/path', 'static')``, with\n  ``config.add_static_view('myapp:static', 'static')`` and\n  ``config.override_asset(to_override='myapp:static/',\n  override_with='/abs/path/')``. The ``myapp:static`` asset spec is completely\n  made up and does not need to exist - it is used for generating urls\n  via ``request.static_url('myapp:static/foo.png')``.\n  See https://github.com/Pylons/pyramid/pull/1252\n\n- Added ``pyramid.config.Configurator.set_response_factory`` and the\n  ``response_factory`` keyword argument to the ``Configurator`` for defining\n  a factory that will return a custom ``Response`` class.\n  See https://github.com/Pylons/pyramid/pull/1499\n\n- Allow an iterator to be returned from a renderer. Previously it was only\n  possible to return bytes or unicode.\n  See https://github.com/Pylons/pyramid/pull/1417\n\n- ``pserve`` can now take a ``-b`` or ``--browser`` option to open the server\n  URL in a web browser. See https://github.com/Pylons/pyramid/pull/1533\n\n- Overall improvements for the ``proutes`` command. Added ``--format`` and\n  ``--glob`` arguments to the command, introduced the ``method``\n  column for displaying available request methods, and improved the ``view``\n  output by showing the module instead of just ``__repr__``.\n  See https://github.com/Pylons/pyramid/pull/1488\n\n- Support keyword-only arguments and function annotations in views in\n  Python 3. See https://github.com/Pylons/pyramid/pull/1556\n\n- ``request.response`` will no longer be mutated when using the\n  ``pyramid.renderers.render_to_response()`` API.  It is now necessary to\n  pass in a ``response=`` argument to ``render_to_response`` if you wish to\n  supply the renderer with a custom response object for it to use. If you\n  do not pass one then a response object will be created using the\n  application's ``IResponseFactory``. Almost all renderers\n  mutate the ``request.response`` response object (for example, the JSON\n  renderer sets ``request.response.content_type`` to ``application/json``).\n  However, when invoking ``render_to_response`` it is not expected that the\n  response object being returned would be the same one used later in the\n  request. The response object returned from ``render_to_response`` is now\n  explicitly different from ``request.response``. This does not change the\n  API of a renderer. See https://github.com/Pylons/pyramid/pull/1563\n\n- The ``append_slash`` argument of ```Configurator().add_notfound_view()`` will\n  now accept anything that implements the ``IResponse`` interface and will use\n  that as the response class instead of the default ``HTTPFound``.  See\n  https://github.com/Pylons/pyramid/pull/1610\n\nBug Fixes\n---------\n\n- The JSONP renderer created JavaScript code in such a way that a callback\n  variable could be used to arbitrarily inject javascript into the response\n  object. https://github.com/Pylons/pyramid/pull/1627\n\n- Work around an issue where ``pserve --reload`` would leave terminal echo\n  disabled if it reloaded during a pdb session.\n  See https://github.com/Pylons/pyramid/pull/1577,\n  https://github.com/Pylons/pyramid/pull/1592\n\n- ``pyramid.wsgi.wsgiapp`` and ``pyramid.wsgi.wsgiapp2`` now raise\n  ``ValueError`` when accidentally passed ``None``.\n  See https://github.com/Pylons/pyramid/pull/1320\n\n- Fix an issue whereby predicates would be resolved as maybe_dotted in the\n  introspectable but not when passed for registration. This would mean that\n  ``add_route_predicate`` for example can not take a string and turn it into\n  the actual callable function.\n  See https://github.com/Pylons/pyramid/pull/1306\n\n- Fix ``pyramid.testing.setUp`` to return a ``Configurator`` with a proper\n  package. Previously it was not possible to do package-relative includes\n  using the returned ``Configurator`` during testing. There is now a\n  ``package`` argument that can override this behavior as well.\n  See https://github.com/Pylons/pyramid/pull/1322\n\n- Fix an issue where a ``pyramid.response.FileResponse`` may apply a charset\n  where it does not belong. See https://github.com/Pylons/pyramid/pull/1251\n\n- Work around a bug introduced in Python 2.7.7 on Windows where\n  ``mimetypes.guess_type`` returns Unicode rather than str for the content\n  type, unlike any previous version of Python.  See\n  https://github.com/Pylons/pyramid/issues/1360 for more information.\n\n- ``pcreate`` now normalizes the package name by converting hyphens to\n  underscores. See https://github.com/Pylons/pyramid/pull/1376\n\n- Fix an issue with the final response/finished callback being unable to\n  add another callback to the list. See\n  https://github.com/Pylons/pyramid/pull/1373\n\n- Fix a failing unittest caused by differing mimetypes across various OSs.\n  See https://github.com/Pylons/pyramid/issues/1405\n\n- Fix route generation for static view asset specifications having no path.\n  See https://github.com/Pylons/pyramid/pull/1377\n\n- Allow the ``pyramid.renderers.JSONP`` renderer to work even if there is no\n  valid request object. In this case it will not wrap the object in a\n  callback and thus behave just like the ``pyramid.renderers.JSON`` renderer.\n  See https://github.com/Pylons/pyramid/pull/1561\n\n- Prevent \"parameters to load are deprecated\" ``DeprecationWarning``\n  from setuptools>=11.3. See https://github.com/Pylons/pyramid/pull/1541\n\n- Avoiding sharing the ``IRenderer`` objects across threads when attached to\n  a view using the `renderer=` argument. These renderers were instantiated\n  at time of first render and shared between requests, causing potentially\n  subtle effects like `pyramid.reload_templates = true` failing to work\n  in `pyramid_mako`. See https://github.com/Pylons/pyramid/pull/1575\n  and https://github.com/Pylons/pyramid/issues/1268\n\n- Avoiding timing attacks against CSRF tokens.\n  See https://github.com/Pylons/pyramid/pull/1574\n\n- ``request.finished_callbacks`` and ``request.response_callbacks`` now\n  default to an iterable instead of ``None``. It may be checked for a length\n  of 0. This was the behavior in 1.5.\n\nDeprecations\n------------\n\n- The ``pserve`` command's daemonization features have been deprecated. This\n  includes the ``[start,stop,restart,status]`` subcommands as well as the\n  ``--daemon``, ``--stop-server``, ``--pid-file``, and ``--status`` flags.\n\n  Please use a real process manager in the future instead of relying on the\n  ``pserve`` to daemonize itself. Many options exist including your Operating\n  System's services such as Systemd or Upstart, as well as Python-based\n  solutions like Circus and Supervisor.\n\n  See https://github.com/Pylons/pyramid/pull/1641\n\n- Renamed the ``principal`` argument to ``pyramid.security.remember()`` to\n  ``userid`` in order to clarify its intended purpose.\n  See https://github.com/Pylons/pyramid/pull/1399\n\nDocs\n----\n\n- Moved the documentation for ``accept`` on ``Configurator.add_view`` to no\n  longer be part of the predicate list. See\n  https://github.com/Pylons/pyramid/issues/1391 for a bug report stating\n  ``not_`` was failing on ``accept``. Discussion with @mcdonc led to the\n  conclusion that it should not be documented as a predicate.\n  See https://github.com/Pylons/pyramid/pull/1487 for this PR\n\n- Removed logging configuration from Quick Tutorial ini files except for\n  scaffolding- and logging-related chapters to avoid needing to explain it too\n  early.\n\n- Clarify a previously-implied detail of the ``ISession.invalidate`` API\n  documentation.\n\n- Improve and clarify the documentation on what Pyramid defines as a\n  ``principal`` and a ``userid`` in its security APIs.\n  See https://github.com/Pylons/pyramid/pull/1399\n\n- Add documentation of command line programs (``p*`` scripts). See\n  https://github.com/Pylons/pyramid/pull/2191\n\nScaffolds\n---------\n\n- Update scaffold generating machinery to return the version of pyramid and\n  pyramid docs for use in scaffolds. Updated starter, alchemy and zodb\n  templates to have links to correctly versioned documentation and reflect\n  which pyramid was used to generate the scaffold.\n\n- Removed non-ascii copyright symbol from templates, as this was\n  causing the scaffolds to fail for project generation.\n\n- You can now run the scaffolding func tests via ``tox py2-scaffolds`` and\n  ``tox py3-scaffolds``.\n\n\n1.5 (2014-04-08)\n================\n\n- Python 3.4 compatibility.\n\n- Avoid crash in ``pserve --reload`` under Py3k, when iterating over possibly\n  mutated ``sys.modules``.\n\n- ``UnencryptedCookieSessionFactoryConfig`` failed if the secret contained\n  higher order characters. See https://github.com/Pylons/pyramid/issues/1246\n\n- Fixed a bug in ``UnencryptedCookieSessionFactoryConfig`` and\n  ``SignedCookieSessionFactory`` where ``timeout=None`` would cause a new\n  session to always be created. Also in ``SignedCookieSessionFactory`` a\n  ``reissue_time=None`` would cause an exception when modifying the session.\n  See https://github.com/Pylons/pyramid/issues/1247\n\n- Updated docs and scaffolds to keep in step with new 2.0 release of\n  ``Lingua``.  This included removing all ``setup.cfg`` files from scaffolds\n  and documentation environments.\n\n1.5b1 (2014-02-08)\n==================\n\nFeatures\n--------\n\n- We no longer eagerly clear ``request.exception`` and ``request.exc_info`` in\n  the exception view tween.  This makes it possible to inspect exception\n  information within a finished callback.  See\n  https://github.com/Pylons/pyramid/issues/1223.\n\n1.5a4 (2014-01-28)\n==================\n\nFeatures\n--------\n\n- Updated scaffolds with new theme, fixed documentation and sample project.\n\nBug Fixes\n---------\n\n- Depend on a newer version of WebOb so that we pull in some crucial bug-fixes\n  that were showstoppers for functionality in Pyramid.\n\n- Add a trailing semicolon to the JSONP response. This fixes JavaScript syntax\n  errors for old IE versions. See https://github.com/Pylons/pyramid/pull/1205\n\n- Fix a memory leak when the configurator's ``set_request_property`` method was\n  used or when the configurator's ``add_request_method`` method was used with\n  the ``property=True`` attribute.  See\n  https://github.com/Pylons/pyramid/issues/1212 .\n\n1.5a3 (2013-12-10)\n==================\n\nFeatures\n--------\n\n- An authorization API has been added as a method of the\n  request: ``request.has_permission``.\n\n  ``request.has_permission`` is a method-based alternative to the\n  ``pyramid.security.has_permission`` API and works exactly the same.  The\n  older API is now deprecated.\n\n- Property API attributes have been added to the request for easier access to\n  authentication data: ``request.authenticated_userid``,\n  ``request.unauthenticated_userid``, and ``request.effective_principals``.\n\n  These are analogues, respectively, of\n  ``pyramid.security.authenticated_userid``,\n  ``pyramid.security.unauthenticated_userid``, and\n  ``pyramid.security.effective_principals``.  They operate exactly the same,\n  except they are attributes of the request instead of functions accepting a\n  request.  They are properties, so they cannot be assigned to.  The older\n  function-based APIs are now deprecated.\n\n- Pyramid's console scripts (``pserve``, ``pviews``, etc) can now be run\n  directly, allowing custom arguments to be sent to the python interpreter\n  at runtime. For example::\n\n      python -3 -m pyramid.scripts.pserve development.ini\n\n- Added a specific subclass of ``HTTPBadRequest`` named\n  ``pyramid.exceptions.BadCSRFToken`` which will now be raised in response\n  to failures in ``check_csrf_token``.\n  See https://github.com/Pylons/pyramid/pull/1149\n\n- Added a new ``SignedCookieSessionFactory`` which is very similar to the\n  ``UnencryptedCookieSessionFactoryConfig`` but with a clearer focus on signing\n  content. The custom serializer arguments to this function should only focus\n  on serializing, unlike its predecessor which required the serializer to also\n  perform signing.  See https://github.com/Pylons/pyramid/pull/1142 .  Note\n  that cookies generated using ``SignedCookieSessionFactory`` are not\n  compatible with cookies generated using ``UnencryptedCookieSessionFactory``,\n  so existing user session data will be destroyed if you switch to it.\n\n- Added a new ``BaseCookieSessionFactory`` which acts as a generic cookie\n  factory that can be used by framework implementors to create their own\n  session implementations. It provides a reusable API which focuses strictly\n  on providing a dictionary-like object that properly handles renewals,\n  timeouts, and conformance with the ``ISession`` API.\n  See https://github.com/Pylons/pyramid/pull/1142\n\n- The anchor argument to ``pyramid.request.Request.route_url`` and\n  ``pyramid.request.Request.resource_url`` and their derivatives will now be\n  escaped via URL quoting to ensure minimal conformance.  See\n  https://github.com/Pylons/pyramid/pull/1183\n\n- Allow sending of ``_query`` and ``_anchor`` options to\n  ``pyramid.request.Request.static_url`` when an external URL is being\n  generated.\n  See https://github.com/Pylons/pyramid/pull/1183\n\n- You can now send a string as the ``_query`` argument to\n  ``pyramid.request.Request.route_url`` and\n  ``pyramid.request.Request.resource_url`` and their derivatives.  When a\n  string is sent instead of a list or dictionary. it is URL-quoted however it\n  does not need to be in ``k=v`` form.  This is useful if you want to be able\n  to use a different query string format than ``x-www-form-urlencoded``.  See\n  https://github.com/Pylons/pyramid/pull/1183\n\n- ``pyramid.testing.DummyRequest`` now has a ``domain`` attribute to match the\n  new WebOb 1.3 API.  Its value is ``example.com``.\n\nBug Fixes\n---------\n\n- Fix the ``pcreate`` script so that when the target directory name ends with a\n  slash it does not produce a non-working project directory structure.\n  Previously saying ``pcreate -s starter /foo/bar/`` produced different output\n  than  saying ``pcreate -s starter /foo/bar``.  The former did not work\n  properly.\n\n- Fix the ``principals_allowed_by_permission`` method of\n  ``ACLAuthorizationPolicy`` so it anticipates a callable ``__acl__``\n  on resources.  Previously it did not try to call the ``__acl__``\n  if it was callable.\n\n- The ``pviews`` script did not work when a url required custom request\n  methods in order to perform traversal. Custom methods and descriptors added\n  via ``pyramid.config.Configurator.add_request_method`` will now be present,\n  allowing traversal to continue.\n  See https://github.com/Pylons/pyramid/issues/1104\n\n- Remove unused ``renderer`` argument from ``Configurator.add_route``.\n\n- Allow the ``BasicAuthenticationPolicy`` to work with non-ASCII usernames\n  and passwords. The charset is not passed as part of the header and different\n  browsers alternate between UTF-8 and Latin-1, so the policy now attempts\n  to decode with UTF-8 first, and will fallback to Latin-1.\n  See https://github.com/Pylons/pyramid/pull/1170\n\n- The ``@view_defaults`` now apply to notfound and forbidden views\n  that are defined as methods of a decorated class.\n  See https://github.com/Pylons/pyramid/issues/1173\n\nDocumentation\n-------------\n\n- Added a \"Quick Tutorial\" to go with the Quick Tour\n\n- Removed mention of ``pyramid_beaker`` from docs.  Beaker is no longer\n  maintained.  Point people at ``pyramid_redis_sessions`` instead.\n\n- Add documentation for ``pyramid.interfaces.IRendererFactory`` and\n  ``pyramid.interfaces.IRenderer``.\n\nBackwards Incompatibilities\n---------------------------\n\n- The key/values in the ``_query`` parameter of ``request.route_url`` and the\n  ``query`` parameter of ``request.resource_url`` (and their variants), used\n  to encode a value of ``None`` as the string ``'None'``, leaving the resulting\n  query string to be ``a=b&key=None``. The value is now dropped in this\n  situation, leaving a query string of ``a=b&key=``.\n  See https://github.com/Pylons/pyramid/issues/1119\n\nDeprecations\n------------\n\n- Deprecate the ``pyramid.interfaces.ITemplateRenderer`` interface. It was\n  ill-defined and became unused when Mako and Chameleon template bindings were\n  split into their own packages.\n\n- The ``pyramid.session.UnencryptedCookieSessionFactoryConfig`` API has been\n  deprecated and is superseded by the\n  ``pyramid.session.SignedCookieSessionFactory``.  Note that while the cookies\n  generated by the ``UnencryptedCookieSessionFactoryConfig``\n  are compatible with cookies generated by old releases, cookies generated by\n  the SignedCookieSessionFactory are not. See\n  https://github.com/Pylons/pyramid/pull/1142\n\n- The ``pyramid.security.has_permission`` API is now deprecated.  Instead, use\n  the newly-added ``has_permission`` method of the request object.\n\n- The ``pyramid.security.effective_principals`` API is now deprecated.\n  Instead, use the newly-added ``effective_principals`` attribute of the\n  request object.\n\n- The ``pyramid.security.authenticated_userid`` API is now deprecated.\n  Instead, use the newly-added ``authenticated_userid`` attribute of the\n  request object.\n\n- The ``pyramid.security.unauthenticated_userid`` API is now deprecated.\n  Instead, use the newly-added ``unauthenticated_userid`` attribute of the\n  request object.\n\nDependencies\n------------\n\n- Pyramid now depends on WebOb>=1.3 (it uses ``webob.cookies.CookieProfile``\n  from 1.3+).\n\n1.5a2 (2013-09-22)\n==================\n\nFeatures\n--------\n\n- Users can now provide dotted Python names to as the ``factory`` argument\n  the Configurator methods named ``add_{view,route,subscriber}_predicate``\n  (instead of passing the predicate factory directly, you can pass a\n  dotted name which refers to the factory).\n\nBug Fixes\n---------\n\n- Fix an exception in ``pyramid.path.package_name`` when resolving the package\n  name for namespace packages that had no ``__file__`` attribute.\n\nBackwards Incompatibilities\n---------------------------\n\n- Pyramid no longer depends on or configures the Mako and Chameleon templating\n  system renderers by default.  Disincluding these templating systems by\n  default means that the Pyramid core has fewer dependencies and can run on\n  future platforms without immediate concern for the compatibility of its\n  templating add-ons.  It also makes maintenance slightly more effective, as\n  different people can maintain the templating system add-ons that they\n  understand and care about without needing commit access to the Pyramid core,\n  and it allows users who just don't want to see any packages they don't use\n  come along for the ride when they install Pyramid.\n\n  This means that upon upgrading to Pyramid 1.5a2+, projects that use either\n  of these templating systems will see a traceback that ends something like\n  this when their application attempts to render a Chameleon or Mako template::\n\n     ValueError: No such renderer factory .pt\n\n  Or::\n\n     ValueError: No such renderer factory .mako\n\n  Or::\n\n     ValueError: No such renderer factory .mak\n\n  Support for Mako templating has been moved into an add-on package named\n  ``pyramid_mako``, and support for Chameleon templating has been moved into\n  an add-on package named ``pyramid_chameleon``.  These packages are drop-in\n  replacements for the old built-in support for these templating langauges.\n  All you have to do is install them and make them active in your configuration\n  to register renderer factories for ``.pt`` and/or ``.mako`` (or ``.mak``) to\n  make your application work again.\n\n  To re-add support for Chameleon and/or Mako template renderers into your\n  existing projects, follow the below steps.\n\n  If you depend on Mako templates:\n\n  * Make sure the ``pyramid_mako`` package is installed.  One way to do this\n    is by adding ``pyramid_mako`` to the ``install_requires`` section of your\n    package's ``setup.py`` file and afterwards rerunning ``setup.py develop``::\n\n        setup(\n            #...\n            install_requires=[\n                'pyramid_mako',         # new dependency\n                'pyramid',\n                #...\n            ],\n        )\n\n  * Within the portion of your application which instantiates a Pyramid\n    ``pyramid.config.Configurator`` (often the ``main()`` function in\n    your project's ``__init__.py`` file), tell Pyramid to include the\n    ``pyramid_mako`` includeme::\n\n        config = Configurator(.....)\n        config.include('pyramid_mako')\n\n  If you depend on Chameleon templates:\n\n  * Make sure the ``pyramid_chameleon`` package is installed.  One way to do\n    this is by adding ``pyramid_chameleon`` to the ``install_requires`` section\n    of your package's ``setup.py`` file and afterwards rerunning\n    ``setup.py develop``::\n\n        setup(\n            #...\n            install_requires=[\n                'pyramid_chameleon',         # new dependency\n                'pyramid',\n                #...\n            ],\n        )\n\n  * Within the portion of your application which instantiates a Pyramid\n    ``~pyramid.config.Configurator`` (often the ``main()`` function in\n    your project's ``__init__.py`` file), tell Pyramid to include the\n    ``pyramid_chameleon`` includeme::\n\n        config = Configurator(.....)\n        config.include('pyramid_chameleon')\n\n  Note that it's also fine to install these packages into *older* Pyramids for\n  forward compatibility purposes.  Even if you don't upgrade to Pyramid 1.5\n  immediately, performing the above steps in a Pyramid 1.4 installation is\n  perfectly fine, won't cause any difference, and will give you forward\n  compatibility when you eventually do upgrade to Pyramid 1.5.\n\n  With the removal of Mako and Chameleon support from the core, some\n  unit tests that use the ``pyramid.renderers.render*`` methods may begin to\n  fail.  If any of your unit tests are invoking either\n  ``pyramid.renderers.render()``  or ``pyramid.renderers.render_to_response()``\n  with either Mako or Chameleon templates then the\n  ``pyramid.config.Configurator`` instance in effect during\n  the unit test should be also be updated to include the addons, as shown\n  above. For example::\n\n        class ATest(unittest.TestCase):\n            def setUp(self):\n                self.config = pyramid.testing.setUp()\n                self.config.include('pyramid_mako')\n\n            def test_it(self):\n                result = pyramid.renderers.render('mypkg:templates/home.mako', {})\n\n  Or::\n\n        class ATest(unittest.TestCase):\n            def setUp(self):\n                self.config = pyramid.testing.setUp()\n                self.config.include('pyramid_chameleon')\n\n            def test_it(self):\n                result = pyramid.renderers.render('mypkg:templates/home.pt', {})\n\n- If you're using the Pyramid debug toolbar, when you upgrade Pyramid to\n  1.5a2+, you'll also need to upgrade the ``pyramid_debugtoolbar`` package to\n  at least version 1.0.8, as older toolbar versions are not compatible with\n  Pyramid 1.5a2+ due to the removal of Mako support from the core.  It's\n  fine to use this newer version of the toolbar code with older Pyramids too.\n\n- Removed the ``request.response_*`` varying attributes. These attributes\n  have been deprecated since Pyramid 1.1, and as per the deprecation policy,\n  have now been removed.\n\n- ``request.response`` will no longer be mutated when using the\n  ``pyramid.renderers.render()`` API.  Almost all renderers mutate the\n  ``request.response`` response object (for example, the JSON renderer sets\n  ``request.response.content_type`` to ``application/json``), but this is\n  only necessary when the renderer is generating a response; it was a bug\n  when it was done as a side effect of calling ``pyramid.renderers.render()``.\n\n- Removed the ``bfg2pyramid`` fixer script.\n\n- The ``pyramid.events.NewResponse`` event is now sent **after** response\n  callbacks are executed.  It previously executed before response callbacks\n  were executed.  Rationale: it's more useful to be able to inspect the response\n  after response callbacks have done their jobs instead of before.\n\n- Removed the class named ``pyramid.view.static`` that had been deprecated\n  since Pyramid 1.1.  Instead use ``pyramid.static.static_view`` with\n  ``use_subpath=True`` argument.\n\n- Removed the ``pyramid.view.is_response`` function that had been deprecated\n  since Pyramid 1.1.  Use the ``pyramid.request.Request.is_response`` method\n  instead.\n\n- Removed the ability to pass the following arguments to\n  ``pyramid.config.Configurator.add_route``: ``view``, ``view_context``.\n  ``view_for``, ``view_permission``, ``view_renderer``, and ``view_attr``.\n  Using these arguments had been deprecated since Pyramid 1.1.  Instead of\n  passing view-related arguments to ``add_route``, use a separate call to\n  ``pyramid.config.Configurator.add_view`` to associate a view with a route\n  using its ``route_name`` argument.  Note that this impacts the\n  ``pyramid.config.Configurator.add_static_view`` function too, because it\n  delegates to ``add_route``.\n\n- Removed the ability to influence and query a ``pyramid.request.Request``\n  object as if it were a dictionary.  Previously it was possible to use methods\n  like ``__getitem__``, ``get``, ``items``, and other dictlike methods to\n  access values in the WSGI environment.  This behavior had been deprecated\n  since Pyramid 1.1.  Use methods of ``request.environ`` (a real dictionary)\n  instead.\n\n- Removed ancient backwards compatibility hack in\n  ``pyramid.traversal.DefaultRootFactory`` which populated the ``__dict__`` of\n  the factory with the matchdict values for compatibility with BFG 0.9.\n\n- The ``renderer_globals_factory`` argument to the\n  ``pyramid.config.Configurator` constructor and its ``setup_registry`` method\n  has been removed.  The ``set_renderer_globals_factory`` method of\n  ``pyramid.config.Configurator`` has also been removed.  The (internal)\n  ``pyramid.interfaces.IRendererGlobals`` interface was also removed.  These\n  arguments, methods and interfaces had been deprecated since 1.1.  Use a\n  ``BeforeRender`` event subscriber as documented in the \"Hooks\" chapter of the\n  Pyramid narrative documentation instead of providing renderer globals values\n  to the configurator.\n\nDeprecations\n------------\n\n- The ``pyramid.config.Configurator.set_request_property`` method now issues\n  a deprecation warning when used.  It had been docs-deprecated in 1.4\n  but did not issue a deprecation warning when used.\n\n1.5a1 (2013-08-30)\n==================\n\nFeatures\n--------\n\n- A new http exception subclass named ``pyramid.httpexceptions.HTTPSuccessful``\n  was added.  You can use this class as the ``context`` of an exception\n  view to catch all 200-series \"exceptions\" (e.g. \"raise HTTPOk\").  This\n  also allows you to catch *only* the ``HTTPOk`` exception itself; previously\n  this was impossible because a number of other exceptions\n  (such as ``HTTPNoContent``) inherited from ``HTTPOk``, but now they do not.\n\n- You can now generate \"hybrid\" urldispatch/traversal URLs more easily\n  by using the new ``route_name``, ``route_kw`` and ``route_remainder_name``\n  arguments to  ``request.resource_url`` and ``request.resource_path``.  See\n  the new section of the \"Combining Traversal and URL Dispatch\" documentation\n  chapter entitled  \"Hybrid URL Generation\".\n\n- It is now possible to escape double braces in Pyramid scaffolds (unescaped,\n  these represent replacement values).  You can use ``\\{\\{a\\}\\}`` to\n  represent a \"bare\" ``{{a}}``.  See\n  https://github.com/Pylons/pyramid/pull/862\n\n- Add ``localizer`` and ``locale_name`` properties (reified) to the request.\n  See https://github.com/Pylons/pyramid/issues/508.  Note that the\n  ``pyramid.i18n.get_localizer`` and ``pyramid.i18n.get_locale_name`` functions\n  now simply look up these properties on the request.\n\n- Add ``pdistreport`` script, which prints the Python version in use, the\n  Pyramid version in use, and the version number and location of all Python\n  distributions currently installed.\n\n- Add the ability to invert the result of any view, route, or subscriber\n  predicate using the ``not_`` class.  For example::\n\n     from pyramid.config import not_\n\n     @view_config(route_name='myroute', request_method=not_('POST'))\n     def myview(request): ...\n\n  The above example will ensure that the view is called if the request method\n  is not POST (at least if no other view is more specific).\n\n  The ``pyramid.config.not_`` class can be used against any value that is\n  a predicate value passed in any of these contexts:\n\n  - ``pyramid.config.Configurator.add_view``\n\n  - ``pyramid.config.Configurator.add_route``\n\n  - ``pyramid.config.Configurator.add_subscriber``\n\n  - ``pyramid.view.view_config``\n\n  - ``pyramid.events.subscriber``\n\n- ``scripts/prequest.py``: add support for submitting ``PUT`` and ``PATCH``\n  requests.  See https://github.com/Pylons/pyramid/pull/1033.  add support for\n  submitting ``OPTIONS`` and ``PROPFIND`` requests, and  allow users to specify\n  basic authentication credentials in the request via a ``--login`` argument to\n  the script.  See https://github.com/Pylons/pyramid/pull/1039.\n\n- ``ACLAuthorizationPolicy`` supports ``__acl__`` as a callable. This\n  removes the ambiguity between the potential ``AttributeError`` that would\n  be raised on the ``context`` when the property was not defined and the\n  ``AttributeError`` that could be raised from any user-defined code within\n  a dynamic property. It is recommended to define a dynamic ACL as a callable\n  to avoid this ambiguity. See https://github.com/Pylons/pyramid/issues/735.\n\n- Allow a protocol-relative URL (e.g. ``//example.com/images``) to be passed to\n  ``pyramid.config.Configurator.add_static_view``. This allows\n  externally-hosted static URLs to be generated based on the current protocol.\n\n- The ``AuthTktAuthenticationPolicy`` has two new options to configure its\n  domain usage:\n\n  * ``parent_domain``: if set the authentication cookie is set on\n    the parent domain. This is useful if you have multiple sites sharing the\n    same domain.\n  * ``domain``: if provided the cookie is always set for this domain, bypassing\n    all usual logic.\n\n  See https://github.com/Pylons/pyramid/pull/1028,\n  https://github.com/Pylons/pyramid/pull/1072 and\n  https://github.com/Pylons/pyramid/pull/1078.\n\n- The ``AuthTktAuthenticationPolicy`` now supports IPv6 addresses when using\n  the ``include_ip=True`` option. This is possibly incompatible with\n  alternative ``auth_tkt`` implementations, as the specification does not\n  define how to properly handle IPv6. See\n  https://github.com/Pylons/pyramid/issues/831.\n\n- Make it possible to use variable arguments via\n  ``pyramid.paster.get_appsettings``. This also allowed the generated\n  ``initialize_db`` script from the ``alchemy`` scaffold to grow support\n  for options in the form ``a=1 b=2`` so you can fill in\n  values in a parameterized ``.ini`` file, e.g.\n  ``initialize_myapp_db etc/development.ini a=1 b=2``.\n  See https://github.com/Pylons/pyramid/pull/911\n\n- The ``request.session.check_csrf_token()`` method and the ``check_csrf`` view\n  predicate now take into account the value of the HTTP header named\n  ``X-CSRF-Token`` (as well as the ``csrf_token`` form parameter, which they\n  always did).  The header is tried when the form parameter does not exist.\n\n- View lookup will now search for valid views based on the inheritance\n  hierarchy of the context. It tries to find views based on the most\n  specific context first, and upon predicate failure, will move up the\n  inheritance chain to test views found by the super-type of the context.\n  In the past, only the most specific type containing views would be checked\n  and if no matching view could be found then a PredicateMismatch would be\n  raised. Now predicate mismatches don't hide valid views registered on\n  super-types. Here's an example that now works::\n\n     class IResource(Interface):\n\n         ...\n\n     @view_config(context=IResource)\n     def get(context, request):\n\n         ...\n\n     @view_config(context=IResource, request_method='POST')\n     def post(context, request):\n\n         ...\n\n     @view_config(context=IResource, request_method='DELETE')\n     def delete(context, request):\n\n         ...\n\n     @implementer(IResource)\n     class MyResource:\n\n         ...\n\n     @view_config(context=MyResource, request_method='POST')\n     def override_post(context, request):\n\n         ...\n\n  Previously the override_post view registration would hide the get\n  and delete views in the context of MyResource -- leading to a\n  predicate mismatch error when trying to use GET or DELETE\n  methods. Now the views are found and no predicate mismatch is\n  raised.\n  See https://github.com/Pylons/pyramid/pull/786 and\n  https://github.com/Pylons/pyramid/pull/1004 and\n  https://github.com/Pylons/pyramid/pull/1046\n\n- The ``pserve`` command now takes a ``-v`` (or ``--verbose``) flag and a\n  ``-q`` (or ``--quiet``) flag.  Output from running ``pserve`` can be\n  controlled using these flags.  ``-v`` can be specified multiple times to\n  increase verbosity.  ``-q`` sets verbosity to ``0`` unconditionally.  The\n  default verbosity level is ``1``.\n\n- The ``alchemy`` scaffold tests now provide better coverage.  See\n  https://github.com/Pylons/pyramid/pull/1029\n\n- The ``pyramid.config.Configurator.add_route`` method now supports being\n  called with an external URL as pattern. See\n  https://github.com/Pylons/pyramid/issues/611 and the documentation section\n  in the \"URL Dispatch\" chapter entitled \"External Routes\" for more information.\n\nBug Fixes\n---------\n\n- It was not possible to use ``pyramid.httpexceptions.HTTPException`` as\n  the ``context`` of an exception view as very general catchall for\n  http-related exceptions when you wanted that exception view to override the\n  default exception view.  See https://github.com/Pylons/pyramid/issues/985\n\n- When the ``pyramid.reload_templates`` setting was true, and a Chameleon\n  template was reloaded, and the renderer specification named a macro\n  (e.g. ``foo#macroname.pt``), renderings of the template after the template\n  was reloaded due to a file change would produce the entire template body\n  instead of just a rendering of the macro.  See\n  https://github.com/Pylons/pyramid/issues/1013.\n\n- Fix an obscure problem when combining a virtual root with a route with a\n  ``*traverse`` in its pattern.  Now the traversal path generated in\n  such a configuration will be correct, instead of an element missing\n  a leading slash.\n\n- Fixed a Mako renderer bug returning a tuple with a previous defname value\n  in some circumstances. See https://github.com/Pylons/pyramid/issues/1037\n  for more information.\n\n- Make the ``pyramid.config.assets.PackageOverrides`` object implement the API\n  for ``__loader__`` objects specified in PEP 302.  Proxies to the\n  ``__loader__`` set by the importer, if present; otherwise, raises\n  ``NotImplementedError``.  This makes Pyramid static view overrides work\n  properly under Python 3.3 (previously they would not).  See\n  https://github.com/Pylons/pyramid/pull/1015 for more information.\n\n- ``mako_templating``: added defensive workaround for non-importability of\n  ``mako`` due to upstream ``markupsafe`` dropping Python 3.2 support.  Mako\n  templating will no longer work under the combination of MarkupSafe 0.17 and\n  Python 3.2 (although the combination of MarkupSafe 0.17 and Python 3.3 or any\n  supported Python 2 version will work OK).\n\n- Spaces and dots may now be in mako renderer template paths. This was\n  broken when support for the new makodef syntax was added in 1.4a1.\n  See https://github.com/Pylons/pyramid/issues/950\n\n- ``pyramid.debug_authorization=true`` will now correctly print out\n  ``Allowed`` for views registered with ``NO_PERMISSION_REQUIRED`` instead\n  of invoking the ``permits`` method of the authorization policy.\n  See https://github.com/Pylons/pyramid/issues/954\n\n- Pyramid failed to install on some systems due to being packaged with\n  some test files containing higher order characters in their names. These\n  files have now been removed. See\n  https://github.com/Pylons/pyramid/issues/981\n\n- ``pyramid.testing.DummyResource`` didn't define ``__bool__``, so code under\n  Python 3 would use ``__len__`` to find truthiness; this usually caused an\n  instance of DummyResource to be \"falsy\" instead of \"truthy\".  See\n  https://github.com/Pylons/pyramid/pull/1032\n\n- The ``alchemy`` scaffold would break when the database was MySQL during\n  tables creation.  See https://github.com/Pylons/pyramid/pull/1049\n\n- The ``current_route_url`` method now attaches the query string to the URL by\n  default. See\n  https://github.com/Pylons/pyramid/issues/1040\n\n- Make ``pserve.cherrypy_server_runner`` Python 3 compatible. See\n  https://github.com/Pylons/pyramid/issues/718\n\nBackwards Incompatibilities\n---------------------------\n\n- Modified the ``current_route_url`` method in pyramid.Request. The method\n  previously returned the URL without the query string by default, it now does\n  attach the query string unless it is overriden.\n\n- The ``route_url`` and ``route_path`` APIs no longer quote ``/``\n  to ``%2F`` when a replacement value contains a ``/``.  This was pointless,\n  as WSGI servers always unquote the slash anyway, and Pyramid never sees the\n  quoted value.\n\n- It is no longer possible to set a ``locale_name`` attribute of the request,\n  nor is it possible to set a ``localizer`` attribute of the request.  These\n  are now \"reified\" properties that look up a locale name and localizer\n  respectively using the machinery described in the \"Internationalization\"\n  chapter of the documentation.\n\n- If you send an ``X-Vhm-Root`` header with a value that ends with a slash (or\n  any number of slashes), the trailing slash(es) will be removed before a URL\n  is generated when you use use ``request.resource_url`` or\n  ``request.resource_path``.  Previously the virtual root path would not have\n  trailing slashes stripped, which would influence URL generation.\n\n- The ``pyramid.interfaces.IResourceURL`` interface has now grown two new\n  attributes: ``virtual_path_tuple`` and ``physical_path_tuple``.  These should\n  be the tuple form of the resource's path (physical and virtual).\n\n1.4 (2012-12-18)\n================\n\nDocs\n----\n\n- Fix functional tests in the ZODB tutorial\n\n1.4b3 (2012-12-10)\n==================\n\n- Packaging release only, no code changes.  1.4b2 was a brownbag release due to\n  missing directories in the tarball.\n\n1.4b2 (2012-12-10)\n==================\n\nDocs\n----\n\n- Scaffolding is now PEP-8 compliant (at least for a brief shining moment).\n\n- Tutorial improvements.\n\nBackwards Incompatibilities\n---------------------------\n\n- Modified the ``_depth`` argument to ``pyramid.view.view_config`` to accept\n  a value relative to the invocation of ``view_config`` itself. Thus, when it\n  was previously expecting a value of ``1`` or greater, to reflect that\n  the caller of ``view_config`` is 1 stack frame away from ``venusian.attach``,\n  this implementation detail is now hidden.\n\n- Modified the ``_backframes`` argument to ``pyramid.util.action_method`` in a\n  similar way to the changes described to ``_depth`` above.  This argument\n  remains undocumented, but might be used in the wild by some insane person.\n\n1.4b1 (2012-11-21)\n==================\n\nFeatures\n--------\n\n- Small microspeed enhancement which anticipates that a\n  ``pyramid.response.Response`` object is likely to be returned from a view.\n  Some code is shortcut if the class of the object returned by a view is this\n  class.  A similar microoptimization was done to\n  ``pyramid.request.Request.is_response``.\n\n- Make it possible to use variable arguments on ``p*`` commands (``pserve``,\n  ``pshell``, ``pviews``, etc) in the form ``a=1 b=2`` so you can fill in\n  values in parameterized ``.ini`` file, e.g. ``pshell etc/development.ini\n  http_port=8080``.  See https://github.com/Pylons/pyramid/pull/714\n\n- A somewhat advanced and obscure feature of Pyramid event handlers is their\n  ability to handle \"multi-interface\" notifications.  These notifications have\n  traditionally presented multiple objects to the subscriber callable.  For\n  instance, if an event was sent by code like this::\n\n     registry.notify(event, context)\n\n  In the past, in order to catch such an event, you were obligated to write and\n  register an event subscriber that mentioned both the event and the context in\n  its argument list::\n\n     @subscriber([SomeEvent, SomeContextType])\n     def asubscriber(event, context):\n         pass\n\n  In many subscriber callables registered this way, it was common for the logic\n  in the subscriber callable to completely ignore the second and following\n  arguments (e.g. ``context`` in the above example might be ignored), because\n  they usually existed as attributes of the event anyway.  You could usually\n  get the same value by doing ``event.context`` or similar.\n\n  The fact that you needed to put an extra argument which you usually ignored\n  in the subscriber callable body was only a minor annoyance until we added\n  \"subscriber predicates\", used to narrow the set of circumstances under which\n  a subscriber will be executed, in a prior 1.4 alpha release.  Once those were\n  added, the annoyance was escalated, because subscriber predicates needed to\n  accept the same argument list and arity as the subscriber callables that they\n  were configured against.  So, for example, if you had these two subscriber\n  registrations in your code::\n\n     @subscriber([SomeEvent, SomeContextType])\n     def asubscriber(event, context):\n         pass\n\n     @subscriber(SomeOtherEvent)\n     def asubscriber(event):\n         pass\n\n  And you wanted to use a subscriber predicate::\n\n     @subscriber([SomeEvent, SomeContextType], mypredicate=True)\n     def asubscriber1(event, context):\n         pass\n\n     @subscriber(SomeOtherEvent, mypredicate=True)\n     def asubscriber2(event):\n         pass\n\n  If an existing ``mypredicate`` subscriber predicate had been written in such\n  a way that it accepted only one argument in its ``__call__``, you could not\n  use it against a subscription which named more than one interface in its\n  subscriber interface list.  Similarly, if you had written a subscriber\n  predicate that accepted two arguments, you couldn't use it against a\n  registration that named only a single interface type.\n\n  For example, if you created this predicate::\n\n    class MyPredicate(object):\n        # portions elided...\n        def __call__(self, event):\n            return self.val == event.context.foo\n\n  It would not work against a multi-interface-registered subscription, so in\n  the above example, when you attempted to use it against ``asubscriber1``, it\n  would fail at runtime with a TypeError, claiming something was attempting to\n  call it with too many arguments.\n\n  To hack around this limitation, you were obligated to design the\n  ``mypredicate`` predicate to expect to receive in its ``__call__`` either a\n  single ``event`` argument (a SomeOtherEvent object) *or* a pair of arguments\n  (a SomeEvent object and a SomeContextType object), presumably by doing\n  something like this::\n\n    class MyPredicate(object):\n        # portions elided...\n        def __call__(self, event, context=None):\n            return self.val == event.context.foo\n\n  This was confusing and bad.\n\n  In order to allow people to ignore unused arguments to subscriber callables\n  and to normalize the relationship between event subscribers and subscriber\n  predicates, we now allow both subscribers and subscriber predicates to accept\n  only a single ``event`` argument even if they've been subscribed for\n  notifications that involve multiple interfaces.  Subscribers and subscriber\n  predicates that accept only one argument will receive the first object passed\n  to ``notify``; this is typically (but not always) the event object.  The\n  other objects involved in the subscription lookup will be discarded.  You can\n  now write an event subscriber that accepts only ``event`` even if it\n  subscribes to multiple interfaces::\n\n     @subscriber([SomeEvent, SomeContextType])\n     def asubscriber(event):\n         # this will work!\n\n  This prevents you from needing to match the subscriber callable parameters to\n  the subscription type unnecessarily, especially when you don't make use of\n  any argument in your subscribers except for the event object itself.\n\n  Note, however, that if the event object is not the first\n  object in the call to ``notify``, you'll run into trouble.  For example, if\n  notify is called with the context argument first::\n\n     registry.notify(context, event)\n\n  You won't be able to take advantage of the event-only feature.  It will\n  \"work\", but the object received by your event handler won't be the event\n  object, it will be the context object, which won't be very useful::\n\n     @subscriber([SomeContextType, SomeEvent])\n     def asubscriber(event):\n         # bzzt! you'll be getting the context here as ``event``, and it'll\n         # be useless\n\n  Existing multiple-argument subscribers continue to work without issue, so you\n  should continue use those if your system notifies using multiple interfaces\n  and the first interface is not the event interface.  For example::\n\n     @subscriber([SomeContextType, SomeEvent])\n     def asubscriber(context, event):\n         # this will still work!\n\n  The event-only feature makes it possible to use a subscriber predicate that\n  accepts only a request argument within both multiple-interface subscriber\n  registrations and single-interface subscriber registrations.  You needn't\n  make slightly different variations of predicates depending on the\n  subscription type arguments.  Instead, just write all your subscriber\n  predicates so they only accept ``event`` in their ``__call__`` and they'll be\n  useful across all registrations for subscriptions that use an event as their\n  first argument, even ones which accept more than just ``event``.\n\n  However, the same caveat applies to predicates as to subscriber callables: if\n  you're subscribing to a multi-interface event, and the first interface is not\n  the event interface, the predicate won't work properly.  In such a case,\n  you'll need to match the predicate ``__call__`` argument ordering and\n  composition to the ordering of the interfaces.  For example, if the\n  registration for the subscription uses ``[SomeContext, SomeEvent]``, you'll\n  need to reflect that in the ordering of the parameters of the predicate's\n  ``__call__`` method::\n\n        def __call__(self, context, event):\n            return event.request.path.startswith(self.val)\n\n  tl;dr: 1) When using multi-interface subscriptions, always use the event type\n  as the first subscription registration argument and 2) When 1 is true, use\n  only ``event`` in your subscriber and subscriber predicate parameter lists,\n  no matter how many interfaces the subscriber is notified with.  This\n  combination will result in the maximum amount of reusability of subscriber\n  predicates and the least amount of thought on your part.  Drink responsibly.\n\nBug Fixes\n---------\n\n- A failure when trying to locate the attribute ``__text__`` on route and view\n  predicates existed when the ``debug_routematch`` setting was true or when the\n  ``pviews`` command was used. See https://github.com/Pylons/pyramid/pull/727\n\nDocumentation\n-------------\n\n- Sync up tutorial source files with the files that are rendered by the\n  scaffold that each uses.\n\n1.4a4 (2012-11-14)\n==================\n\nFeatures\n--------\n\n- ``pyramid.authentication.AuthTktAuthenticationPolicy`` has been updated to\n  support newer hashing algorithms such as ``sha512``. Existing applications\n  should consider updating if possible for improved security over the default\n  md5 hashing.\n\n- Added an ``effective_principals`` route and view predicate.\n\n- Do not allow the userid returned from the ``authenticated_userid`` or the\n  userid that is one of the list of principals returned by\n  ``effective_principals`` to be either of the strings ``system.Everyone`` or\n  ``system.Authenticated`` when any of the built-in authorization policies that\n  live in ``pyramid.authentication`` are in use.  These two strings are\n  reserved for internal usage by Pyramid and they will not be accepted as valid\n  userids.\n\n- Slightly better debug logging from\n  ``pyramid.authentication.RepozeWho1AuthenticationPolicy``.\n\n- ``pyramid.security.view_execution_permitted`` used to return ``True`` if no\n  view could be found. It now raises a ``TypeError`` exception in that case, as\n  it doesn't make sense to assert that a nonexistent view is\n  execution-permitted. See https://github.com/Pylons/pyramid/issues/299.\n\n- Allow a ``_depth`` argument to ``pyramid.view.view_config``, which will\n  permit limited composition reuse of the decorator by other software that\n  wants to provide custom decorators that are much like view_config.\n\n- Allow an iterable of decorators to be passed to\n  ``pyramid.config.Configurator.add_view``. This allows views to be wrapped\n  by more than one decorator without requiring combining the decorators\n  yourself.\n\nBug Fixes\n---------\n\n- In the past if a renderer returned ``None``, the body of the resulting\n  response would be set explicitly to the empty string.  Instead, now, the body\n  is left unchanged, which allows the renderer to set a body itself by using\n  e.g. ``request.response.body = b'foo'``.  The body set by the renderer will\n  be unmolested on the way out.  See\n  https://github.com/Pylons/pyramid/issues/709\n\n- In uncommon cases, the ``pyramid_excview_tween_factory`` might have\n  inadvertently raised a ``KeyError`` looking for ``request_iface`` as an\n  attribute of the request.  It no longer fails in this case.  See\n  https://github.com/Pylons/pyramid/issues/700\n\n- Be more tolerant of potential error conditions in ``match_param`` and\n  ``physical_path`` predicate implementations; instead of raising an exception,\n  return False.\n\n- ``pyramid.view.render_view`` was not functioning properly under Python 3.x\n  due to a byte/unicode discrepancy. See\n  https://github.com/Pylons/pyramid/issues/721\n\nDeprecations\n------------\n\n- ``pyramid.authentication.AuthTktAuthenticationPolicy`` will emit a warning if\n  an application is using the policy without explicitly passing a ``hashalg``\n  argument. This is because the default is \"md5\" which is considered\n  theoretically subject to collision attacks. If you really want \"md5\" then you\n  must specify it explicitly to get rid of the warning.\n\nDocumentation\n-------------\n\n- All of the tutorials that use\n  ``pyramid.authentication.AuthTktAuthenticationPolicy`` now explicitly pass\n  ``sha512`` as a ``hashalg`` argument.\n\n\nInternals\n---------\n\n- Move ``TopologicalSorter`` from ``pyramid.config.util`` to ``pyramid.util``,\n  move ``CyclicDependencyError`` from ``pyramid.config.util`` to\n  ``pyramid.exceptions``, rename ``Singleton`` to ``Sentinel`` and move from\n  ``pyramid.config.util`` to ``pyramid.util``; this is in an effort to\n  move that stuff that may be an API one day out of ``pyramid.config.util``,\n  because that package should never be imported from non-Pyramid code.\n  TopologicalSorter is still not an API, but may become one.\n\n- Get rid of shady monkeypatching of ``pyramid.request.Request`` and\n  ``pyramid.response.Response`` done within the ``__init__.py`` of Pyramid.\n  Webob no longer relies on this being done.  Instead, the ResponseClass\n  attribute of the Pyramid Request class is assigned to the Pyramid response\n  class; that's enough to satisfy WebOb and behave as it did before with the\n  monkeypatching.\n\n1.4a3 (2012-10-26)\n==================\n\nBug Fixes\n---------\n\n- The match_param predicate's text method was fixed to sort its values.\n  Part of https://github.com/Pylons/pyramid/pull/705\n\n- 1.4a ``pyramid.scripting.prepare`` behaved differently than 1.3 series\n  function of same name.  In particular, if passed a request, it would not\n  set the ``registry`` attribute of the request like 1.3 did.  A symptom\n  would be that passing a request to ``pyramid.paster.bootstrap`` (which uses\n  the function) that did not have a ``registry`` attribute could assume that\n  the registry would be attached to the request by Pyramid.  This assumption\n  could be made in 1.3, but not in 1.4.  The assumption can now be made in\n  1.4 too (a registry is attached to a request passed to bootstrap or\n  prepare).\n\n- When registering a view configuration that named a Chameleon ZPT renderer\n  with a macro name in it (e.g. ``renderer='some/template#somemacro.pt``) as\n  well as a view configuration without a macro name in it that pointed to the\n  same template (e.g. ``renderer='some/template.pt'``), internal caching could\n  confuse the two, and your code might have rendered one instead of the\n  other.\n\nFeatures\n--------\n\n- Allow multiple values to be specified to the ``request_param`` view/route\n  predicate as a sequence.  Previously only a single string value was allowed.\n  See https://github.com/Pylons/pyramid/pull/705\n\n- Comments with references to documentation sections placed in scaffold\n  ``.ini`` files.\n\n- Added an HTTP Basic authentication policy\n  at ``pyramid.authentication.BasicAuthAuthenticationPolicy``.\n\n- The Configurator ``testing_securitypolicy`` method now returns the policy\n  object it creates.\n\n- The Configurator ``testing_securitypolicy`` method accepts two new\n  arguments: ``remember_result`` and ``forget_result``.  If supplied, these\n  values influence the result of the policy's ``remember`` and ``forget``\n  methods, respectively.\n\n- The DummySecurityPolicy created by ``testing_securitypolicy`` now sets a\n  ``forgotten`` value on the policy (the value ``True``) when its ``forget``\n  method is called.\n\n- The DummySecurityPolicy created by ``testing_securitypolicy`` now sets a\n  ``remembered`` value on the policy, which is the value of the ``principal``\n  argument it's called with when its ``remember`` method is called.\n\n- New ``physical_path`` view predicate.  If specified, this value should be a\n  string or a tuple representing the physical traversal path of the context\n  found via traversal for this predicate to match as true.  For example:\n  ``physical_path='/'`` or ``physical_path='/a/b/c'`` or ``physical_path=('',\n  'a', 'b', 'c')``.  This is not a path prefix match or a regex, it's a\n  whole-path match.  It's useful when you want to always potentially show a\n  view when some object is traversed to, but you can't be sure about what kind\n  of object it will be, so you can't use the ``context`` predicate.  The\n  individual path elements in between slash characters or in tuple elements\n  should be the Unicode representation of the name of the resource and should\n  not be encoded in any way.\n\n1.4a2 (2012-09-27)\n==================\n\nBug Fixes\n---------\n\n- When trying to determine Mako defnames and Chameleon macro names in asset\n  specifications, take into account that the filename may have a hyphen in\n  it.  See https://github.com/Pylons/pyramid/pull/692\n\nFeatures\n--------\n\n- A new ``pyramid.session.check_csrf_token`` convenience function was added.\n\n- A ``check_csrf`` view predicate was added.  For example, you can now do\n  ``config.add_view(someview, check_csrf=True)``.  When the predicate is\n  checked, if the ``csrf_token`` value in ``request.params`` matches the CSRF\n  token in the request's session, the view will be permitted to execute.\n  Otherwise, it will not be permitted to execute.\n\n- Add ``Base.metadata.bind = engine`` to alchemy template, so that tables\n  defined imperatively will work.\n\nDocumentation\n-------------\n\n- update wiki2 SQLA tutorial with the changes required after inserting\n  ``Base.metadata.bind = engine`` into the alchemy scaffold.\n\n1.4a1 (2012-09-16)\n==================\n\nBug Fixes\n---------\n\n- Forward port from 1.3 branch: When no authentication policy was configured,\n  a call to ``pyramid.security.effective_principals`` would unconditionally\n  return the empty list.  This was incorrect, it should have unconditionally\n  returned ``[Everyone]``, and now does.\n\n- Explicit url dispatch regexes can now contain colons.\n  https://github.com/Pylons/pyramid/issues/629\n\n- On at least one 64-bit Ubuntu system under Python 3.2, using the\n  ``view_config`` decorator caused a ``RuntimeError: dictionary changed size\n  during iteration`` exception.  It no longer does.  See\n  https://github.com/Pylons/pyramid/issues/635 for more information.\n\n- In Mako Templates lookup, check if the uri is already adjusted and bring\n  it back to an asset spec. Normally occurs with inherited templates or\n  included components.\n  https://github.com/Pylons/pyramid/issues/606\n  https://github.com/Pylons/pyramid/pull/607\n\n- In Mako Templates lookup, check for absolute uri (using mako directories)\n  when mixing up inheritance with asset specs.\n  https://github.com/Pylons/pyramid/issues/662\n\n- HTTP Accept headers were not being normalized causing potentially\n  conflicting view registrations to go unnoticed. Two views that only\n  differ in the case ('text/html' vs. 'text/HTML') will now raise an error.\n  https://github.com/Pylons/pyramid/pull/620\n\n- Forward-port from 1.3 branch: when registering multiple views with an\n  ``accept`` predicate in a Pyramid application running under Python 3, you\n  might have received a ``TypeError: unorderable types: function() <\n  function()`` exception.\n\nFeatures\n--------\n\n- Python 3.3 compatibility.\n\n- Configurator.add_directive now accepts arbitrary callables like partials or\n  objects implementing ``__call__`` which dont have ``__name__`` and\n  ``__doc__`` attributes.  See https://github.com/Pylons/pyramid/issues/621\n  and https://github.com/Pylons/pyramid/pull/647.\n\n- Third-party custom view, route, and subscriber predicates can now be added\n  for use by view authors via\n  ``pyramid.config.Configurator.add_view_predicate``,\n  ``pyramid.config.Configurator.add_route_predicate`` and\n  ``pyramid.config.Configurator.add_subscriber_predicate``.  So, for example,\n  doing this::\n\n     config.add_view_predicate('abc', my.package.ABCPredicate)\n\n  Might allow a view author to do this in an application that configured that\n  predicate::\n\n     @view_config(abc=1)\n\n  Similar features exist for ``add_route``, and ``add_subscriber``.  See\n  \"Adding A Custom View, Route, or Subscriber Predicate\" in the Hooks\n  chapter for more information.\n\n  Note that changes made to support the above feature now means that only\n  actions registered using the same \"order\" can conflict with one another.\n  It used to be the case that actions registered at different orders could\n  potentially conflict, but to my knowledge nothing ever depended on this\n  behavior (it was a bit silly).\n\n- Custom objects can be made easily JSON-serializable in Pyramid by defining\n  a ``__json__`` method on the object's class. This method should return\n  values natively serializable by ``json.dumps`` (such as ints, lists,\n  dictionaries, strings, and so forth).\n\n- The JSON renderer now allows for the definition of custom type adapters to\n  convert unknown objects to JSON serializations.\n\n- As of this release, the ``request_method`` predicate, when used, will also\n  imply that ``HEAD`` is implied when you use ``GET``.  For example, using\n  ``@view_config(request_method='GET')`` is equivalent to using\n  ``@view_config(request_method=('GET', 'HEAD'))``.  Using\n  ``@view_config(request_method=('GET', 'POST')`` is equivalent to using\n  ``@view_config(request_method=('GET', 'HEAD', 'POST')``.  This is because\n  HEAD is a variant of GET that omits the body, and WebOb has special support\n  to return an empty body when a HEAD is used.\n\n- ``config.add_request_method`` has been introduced to support extending\n  request objects with arbitrary callables. This method expands on the\n  previous ``config.set_request_property`` by supporting methods as well as\n  properties. This method now causes less code to be executed at\n  request construction time than ``config.set_request_property`` in\n  version 1.3.\n\n- Don't add a ``?`` to URLs generated by ``request.resource_url`` if the\n  ``query`` argument is provided but empty.\n\n- Don't add a ``?`` to URLs generated by ``request.route_url`` if the\n  ``_query`` argument is provided but empty.\n\n- The static view machinery now raises (rather than returns) ``HTTPNotFound``\n  and ``HTTPMovedPermanently`` exceptions, so these can be caught by the\n  Not Found View (and other exception views).\n\n- The Mako renderer now supports a def name in an asset spec.  When the def\n  name is present in the asset spec, the system will render the template def\n  within the template and will return the result. An example asset spec is\n  ``package:path/to/template#defname.mako``. This will render the def named\n  ``defname`` inside the ``template.mako`` template instead of rendering the\n  entire template.  The old way of returning a tuple in the form\n  ``('defname', {})`` from the view is supported for backward compatibility,\n\n- The Chameleon ZPT renderer now accepts a macro name in an asset spec.  When\n  the macro name is present in the asset spec, the system will render the\n  macro listed as a ``define-macro`` and return the result instead of\n  rendering the entire template.  An example asset spec:\n  ``package:path/to/template#macroname.pt``.  This will render the macro\n  defined as ``macroname`` within the ``template.pt`` template instead of the\n  entire templae.\n\n- When there is a predicate mismatch exception (seen when no view matches for\n  a given request due to predicates not working), the exception now contains\n  a textual description of the predicate which didn't match.\n\n- An ``add_permission`` directive method was added to the Configurator.  This\n  directive registers a free-standing permission introspectable into the\n  Pyramid introspection system.  Frameworks built atop Pyramid can thus use\n  the ``permissions`` introspectable category data to build a\n  comprehensive list of permissions supported by a running system.  Before\n  this method was added, permissions were already registered in this\n  introspectable category as a side effect of naming them in an ``add_view``\n  call, this method just makes it possible to arrange for a permission to be\n  put into the ``permissions`` introspectable category without naming it\n  along with an associated view.  Here's an example of usage of\n  ``add_permission``::\n\n      config = Configurator()\n      config.add_permission('view')\n\n- The ``UnencryptedCookieSessionFactoryConfig`` now accepts\n  ``signed_serialize`` and ``signed_deserialize`` hooks which may be used\n  to influence how the sessions are marshalled (by default this is done\n  with HMAC+pickle).\n\n- ``pyramid.testing.DummyRequest`` now supports methods supplied by the\n  ``pyramid.util.InstancePropertyMixin`` class such as ``set_property``.\n\n- Request properties and methods added via ``config.set_request_property`` or\n  ``config.add_request_method`` are now available to tweens.\n\n- Request properties and methods added via ``config.set_request_property`` or\n  ``config.add_request_method`` are now available in the request object\n  returned from ``pyramid.paster.bootstrap``.\n\n- ``request.context`` of environment request during ``bootstrap`` is now the\n  root object if a context isn't already set on a provided request.\n\n- The ``pyramid.decorator.reify`` function is now an API, and was added to\n  the API documentation.\n\n- Added the ``pyramid.testing.testConfig`` context manager, which can be used\n  to generate a configurator in a test, e.g. ``with testing.testConfig(...):``.\n\n- Users can now invoke a subrequest from within view code using a new\n  ``request.invoke_subrequest`` API.\n\nDeprecations\n------------\n\n- The ``pyramid.config.Configurator.set_request_property`` has been\n  documentation-deprecated.  The method remains usable but the more\n  featureful ``pyramid.config.Configurator.add_request_method`` should be\n  used in its place (it has all of the same capabilities but can also extend\n  the request object with methods).\n\nBackwards Incompatibilities\n---------------------------\n\n- The Pyramid router no longer adds the values ``bfg.routes.route`` or\n  ``bfg.routes.matchdict`` to the request's WSGI environment dictionary.\n  These values were docs-deprecated in ``repoze.bfg`` 1.0 (effectively seven\n  minor releases ago).  If your code depended on these values, use\n  request.matched_route and request.matchdict instead.\n\n- It is no longer possible to pass an environ dictionary directly to\n  ``pyramid.traversal.ResourceTreeTraverser.__call__`` (aka\n  ``ModelGraphTraverser.__call__``).  Instead, you must pass a request\n  object.  Passing an environment instead of a request has generated a\n  deprecation warning since Pyramid 1.1.\n\n- Pyramid will no longer work properly if you use the\n  ``webob.request.LegacyRequest`` as a request factory.  Instances of the\n  LegacyRequest class have a ``request.path_info`` which return a string.\n  This Pyramid release assumes that ``request.path_info`` will\n  unconditionally be Unicode.\n\n- The functions from ``pyramid.chameleon_zpt`` and ``pyramid.chameleon_text``\n  named ``get_renderer``, ``get_template``, ``render_template``, and\n  ``render_template_to_response`` have been removed.  These have issued a\n  deprecation warning upon import since Pyramid 1.0.  Use\n  ``pyramid.renderers.get_renderer()``,\n  ``pyramid.renderers.get_renderer().implementation()``,\n  ``pyramid.renderers.render()`` or ``pyramid.renderers.render_to_response``\n  respectively instead of these functions.\n\n- The ``pyramid.configuration`` module was removed.  It had been deprecated\n  since Pyramid 1.0 and printed a deprecation warning upon its use.  Use\n  ``pyramid.config`` instead.\n\n- The ``pyramid.paster.PyramidTemplate`` API was removed.  It had been\n  deprecated since Pyramid 1.1 and issued a warning on import.  If your code\n  depended on this, adjust your code to import\n  ``pyramid.scaffolds.PyramidTemplate`` instead.\n\n- The ``pyramid.settings.get_settings()`` API was removed.  It had been\n  printing a deprecation warning since Pyramid 1.0.  If your code depended on\n  this API, use ``pyramid.threadlocal.get_current_registry().settings``\n  instead or use the ``settings`` attribute of the registry available from\n  the request (``request.registry.settings``).\n\n- These APIs from the ``pyramid.testing`` module were removed.  They have\n  been printing deprecation warnings since Pyramid 1.0:\n\n  * ``registerDummySecurityPolicy``, use\n    ``pyramid.config.Configurator.testing_securitypolicy`` instead.\n\n  * ``registerResources`` (aka ``registerModels``, use\n    ``pyramid.config.Configurator.testing_resources`` instead.\n\n  * ``registerEventListener``, use\n    ``pyramid.config.Configurator.testing_add_subscriber`` instead.\n\n  * ``registerTemplateRenderer`` (aka `registerDummyRenderer``), use\n    ``pyramid.config.Configurator.testing_add_template`` instead.\n\n  * ``registerView``, use ``pyramid.config.Configurator.add_view`` instead.\n\n  * ``registerUtility``, use\n    ``pyramid.config.Configurator.registry.registerUtility`` instead.\n\n  * ``registerAdapter``, use\n    ``pyramid.config.Configurator.registry.registerAdapter`` instead.\n\n  * ``registerSubscriber``, use\n    ``pyramid.config.Configurator.add_subscriber`` instead.\n\n  * ``registerRoute``, use\n    ``pyramid.config.Configurator.add_route`` instead.\n\n  * ``registerSettings``, use\n    ``pyramid.config.Configurator.add_settings`` instead.\n\n- In Pyramid 1.3 and previous, the ``__call__`` method of a Response object\n  was invoked before any finished callbacks were executed.  As of this\n  release, the ``__call__`` method of a Response object is invoked *after*\n  finished callbacks are executed.  This is in support of the\n  ``request.invoke_subrequest`` feature.\n\n- The 200-series exception responses named ``HTTPCreated``, ``HTTPAccepted``, \n  ``HTTPNonAuthoritativeInformation``, ``HTTPNoContent``, ``HTTPResetContent``,\n  and ``HTTPPartialContent`` in ``pyramid.httpexceptions`` no longer inherit\n  from ``HTTPOk``.  Instead they inherit from a new base class named \n  ``HTTPSuccessful``.  This will have no effect on you unless you've registered\n  an exception view for ``HTTPOk`` and expect that exception view to\n  catch all the aforementioned exceptions.\n\nDocumentation\n-------------\n\n- Added an \"Upgrading Pyramid\" chapter to the narrative documentation.  It\n  describes how to cope with deprecations and removals of Pyramid APIs and\n  how to show Pyramid-generated deprecation warnings while running tests and\n  while running a server.\n\n- Added a \"Invoking a Subrequest\" chapter to the documentation.  It describes\n  how to use the new ``request.invoke_subrequest`` API.\n\nDependencies\n------------\n\n- Pyramid now requires WebOb 1.2b3+ (the prior Pyramid release only relied on\n  1.2dev+).  This is to ensure that we obtain a version of WebOb that returns\n  ``request.path_info`` as text.\n\n1.3 (2012-03-21)\n================\n\nBug Fixes\n---------\n\n- When ``pyramid.wsgi.wsgiapp2`` calls the downstream WSGI app, the app's\n  environ will no longer have (deprecated and potentially misleading)\n  ``bfg.routes.matchdict`` or ``bfg.routes.route`` keys in it.  A symptom of\n  this bug would be a ``wsgiapp2``-wrapped Pyramid app finding the wrong view\n  because it mistakenly detects that a route was matched when, in fact, it\n  was not.\n\n- The fix for issue https://github.com/Pylons/pyramid/issues/461 (which made\n  it possible for instance methods to be used as view callables) introduced a\n  backwards incompatibility when methods that declared only a request\n  argument were used.  See https://github.com/Pylons/pyramid/issues/503\n\n1.3b3 (2012-03-17)\n==================\n\nBug Fixes\n---------\n\n- ``config.add_view(<aninstancemethod>)`` raised AttributeError involving\n  ``__text__``.  See https://github.com/Pylons/pyramid/issues/461\n\n- Remove references to do-nothing ``pyramid.debug_templates`` setting in all\n  Pyramid-provided ``.ini`` files.  This setting previously told Chameleon to\n  render better exceptions; now Chameleon always renders nice exceptions\n  regardless of the value of this setting.\n\nScaffolds\n---------\n\n- The ``alchemy`` scaffold now shows an informative error message in the\n  browser if the person creating the project forgets to run the\n  initialization script.\n\n- The ``alchemy`` scaffold initialization script is now called\n  ``initialize_<projectname>_db`` instead of ``populate_<projectname>``.\n\nDocumentation\n-------------\n\n- Wiki tutorials improved due to collaboration at PyCon US 2012 sprints.\n\n1.3b2 (2012-03-02)\n==================\n\nBug Fixes\n---------\n\n- The method ``pyramid.request.Request.partial_application_url`` is no longer\n  in the API docs.  It was meant to be a private method; its publication in\n  the documentation as an API method was a mistake, and it has been renamed\n  to something private.\n\n- When a static view was registered using an absolute filesystem path on\n  Windows, the ``request.static_url`` function did not work to generate URLs\n  to its resources.  Symptom: \"No static URL definition matching\n  c:\\\\foo\\\\bar\\\\baz\".\n\n- Make all tests pass on Windows XP.\n\n- Bug in ACL authentication checking on Python 3: the ``permits`` and\n  ``principals_allowed_by_permission`` method of\n  ``pyramid.authorization.ACLAuthenticationPolicy`` could return an\n  inappropriate ``True`` value when a permission on an ACL was a string\n  rather than a sequence, and then only if the ACL permission string was a\n  substring of the ``permission`` value passed to the function.\n\n  This bug effects no Pyramid deployment under Python 2; it is a bug that\n  exists only in deployments running on Python 3.  It has existed since\n  Pyramid 1.3a1.\n\n  This bug was due to the presence of an ``__iter__`` attribute on strings\n  under Python 3 which is not present under strings in Python 2.\n\n1.3b1 (2012-02-26)\n==================\n\nBug Fixes\n---------\n\n- ``pyramid.config.Configurator.with_package`` didn't work if the\n  Configurator was an old-style ``pyramid.configuration.Configurator``\n  instance.\n\n- Pyramid authorization policies did not show up in the introspector.\n\nDeprecations\n------------\n\n- All references to the ``tmpl_context`` request variable were removed from\n  the docs.  Its existence in Pyramid is confusing for people who were never\n  Pylons users.  It was added as a porting convenience for Pylons users in\n  Pyramid 1.0, but it never caught on because the Pyramid rendering system is\n  a lot different than Pylons' was, and alternate ways exist to do what it\n  was designed to offer in Pylons.  It will continue to exist \"forever\" but\n  it will not be recommended or mentioned in the docs.\n\n1.3a9 (2012-02-22)\n==================\n\nFeatures\n--------\n\n- Add an ``introspection`` boolean to the Configurator constructor.  If this\n  is ``True``, actions registered using the Configurator will be registered\n  with the introspector.  If it is ``False``, they won't.  The default is\n  ``True``.  Setting it to ``False`` during action processing will prevent\n  introspection for any following registration statements, and setting it to\n  ``True`` will start them up again.  This addition is to service a\n  requirement that the debug toolbar's own views and methods not show up in\n  the introspector.\n\n- New API: ``pyramid.config.Configurator.add_notfound_view``.  This is a\n  wrapper for ``pyramid.Config.configurator.add_view`` which provides easy\n  append_slash support and does the right thing about permissions.  It should\n  be preferred over calling ``add_view`` directly with\n  ``context=HTTPNotFound`` as was previously recommended.\n\n- New API: ``pyramid.view.notfound_view_config``.  This is a decorator\n  constructor like ``pyramid.view.view_config`` that calls\n  ``pyramid.config.Configurator.add_notfound_view`` when scanned.  It should\n  be preferred over using ``pyramid.view.view_config`` with\n  ``context=HTTPNotFound`` as was previously recommended.\n\n- New API: ``pyramid.config.Configurator.add_forbidden_view``.  This is a\n  wrapper for ``pyramid.Config.configurator.add_view`` which does the right\n  thing about permissions.  It should be preferred over calling ``add_view``\n  directly with ``context=HTTPForbidden`` as was previously recommended.\n\n- New API: ``pyramid.view.forbidden_view_config``.  This is a decorator\n  constructor like ``pyramid.view.view_config`` that calls\n  ``pyramid.config.Configurator.add_forbidden_view`` when scanned.  It should\n  be preferred over using ``pyramid.view.view_config`` with\n  ``context=HTTPForbidden`` as was previously recommended.\n\n- New APIs: ``pyramid.response.FileResponse`` and\n  ``pyramid.response.FileIter``, for usage in views that must serve files\n  \"manually\".\n\nBackwards Incompatibilities\n---------------------------\n\n- Remove ``pyramid.config.Configurator.with_context`` class method.  It was\n  never an API, it is only used by ``pyramid_zcml`` and its functionality has\n  been moved to that package's latest release.  This means that you'll need\n  to use the 0.9.2 or later release of ``pyramid_zcml`` with this release of\n  Pyramid.\n\n- The ``introspector`` argument to the ``pyramid.config.Configurator``\n  constructor API has been removed.  It has been replaced by the boolean\n  ``introspection`` flag.\n\n- The ``pyramid.registry.noop_introspector`` API object has been removed.\n\n- The older deprecated ``set_notfound_view`` Configurator method is now an\n  alias for the new ``add_notfound_view`` Configurator method.  Likewise, the\n  older deprecated ``set_forbidden_view`` is now an alias for the new\n  ``add_forbidden_view``. This has the following impact: the ``context`` sent\n  to views with a ``(context, request)`` call signature registered via the\n  ``set_notfound_view`` or ``set_forbidden_view`` will now be an exception\n  object instead of the actual resource context found.  Use\n  ``request.context`` to get the actual resource context.  It's also\n  recommended to disuse ``set_notfound_view`` in favor of\n  ``add_notfound_view``, and disuse ``set_forbidden_view`` in favor of\n  ``add_forbidden_view`` despite the aliasing.\n\nDeprecations\n------------\n\n- The API documentation for ``pyramid.view.append_slash_notfound_view`` and\n  ``pyramid.view.AppendSlashNotFoundViewFactory`` was removed.  These names\n  still exist and are still importable, but they are no longer APIs.  Use\n  ``pyramid.config.Configurator.add_notfound_view(append_slash=True)`` or\n  ``pyramid.view.notfound_view_config(append_slash=True)`` to get the same\n  behavior.\n\n- The ``set_forbidden_view`` and ``set_notfound_view`` methods of the\n  Configurator were removed from the documentation.  They have been\n  deprecated since Pyramid 1.1.\n\nBug Fixes\n---------\n\n- The static file response object used by ``config.add_static_view`` opened\n  the static file twice, when it only needed to open it once.\n\n- The AppendSlashNotFoundViewFactory used request.path to match routes.  This\n  was wrong because request.path contains the script name, and this would\n  cause it to fail in circumstances where the script name was not empty.  It\n  should have used request.path_info, and now does.\n\nDocumentation\n-------------\n\n- Updated the \"Creating a Not Found View\" section of the \"Hooks\" chapter,\n  replacing explanations of registering a view using ``add_view`` or\n  ``view_config`` with ones using ``add_notfound_view`` or\n  ``notfound_view_config``.\n\n- Updated the \"Creating a Not Forbidden View\" section of the \"Hooks\" chapter,\n  replacing explanations of registering a view using ``add_view`` or\n  ``view_config`` with ones using ``add_forbidden_view`` or\n  ``forbidden_view_config``.\n\n- Updated the \"Redirecting to Slash-Appended Routes\" section of the \"URL\n  Dispatch\" chapter, replacing explanations of registering a view using\n  ``add_view`` or ``view_config`` with ones using ``add_notfound_view`` or\n  ``notfound_view_config``\n\n- Updated all tutorials to use ``pyramid.view.forbidden_view_config`` rather\n  than ``pyramid.view.view_config`` with an HTTPForbidden context.\n\n1.3a8 (2012-02-19)\n==================\n\nFeatures\n--------\n\n- The ``scan`` method of a ``Configurator`` can be passed an ``ignore``\n  argument, which can be a string, a callable, or a list consisting of\n  strings and/or callables.  This feature allows submodules, subpackages, and\n  global objects from being scanned.  See\n  https://venusian.readthedocs.io/en/latest/#ignore-scan-argument for\n  more information about how to use the ``ignore`` argument to ``scan``.\n\n- Better error messages when a view callable returns a value that cannot be\n  converted to a response (for example, when a view callable returns a\n  dictionary without a renderer defined, or doesn't return any value at all).\n  The error message now contains information about the view callable itself\n  as well as the result of calling it.\n\n- Better error message when a .pyc-only module is ``config.include`` -ed.\n  This is not permitted due to error reporting requirements, and a better\n  error message is shown when it is attempted.  Previously it would fail with\n  something like \"AttributeError: 'NoneType' object has no attribute\n  'rfind'\".\n\n- Add ``pyramid.config.Configurator.add_traverser`` API method.  See the\n  Hooks narrative documentation section entitled \"Changing the Traverser\" for\n  more information.  This is not a new feature, it just provides an API for\n  adding a traverser without needing to use the ZCA API.\n\n- Add ``pyramid.config.Configurator.add_resource_url_adapter`` API method.\n  See the Hooks narrative documentation section entitled \"Changing How\n  pyramid.request.Request.resource_url Generates a URL\" for more information.\n  This is not a new feature, it just provides an API for adding a resource\n  url adapter without needing to use the ZCA API.\n\n- The system value ``req`` is now supplied to renderers as an alias for\n  ``request``.  This means that you can now, for example, in a template, do\n  ``req.route_url(...)`` instead of ``request.route_url(...)``.  This is\n  purely a change to reduce the amount of typing required to use request\n  methods and attributes from within templates.  The value ``request`` is\n  still available too, this is just an alternative.\n\n- A new interface was added: ``pyramid.interfaces.IResourceURL``.  An adapter\n  implementing its interface can be used to override resource URL generation\n  when ``request.resource_url`` is called.  This interface replaces the\n  now-deprecated ``pyramid.interfaces.IContextURL`` interface.\n\n- The dictionary passed to a resource's ``__resource_url__`` method (see\n  \"Overriding Resource URL Generation\" in the \"Resources\" chapter) now\n  contains an ``app_url`` key, representing the application URL generated\n  during ``request.resource_url``.  It represents a potentially customized\n  URL prefix, containing potentially custom scheme, host and port information\n  passed by the user to ``request.resource_url``.  It should be used instead\n  of ``request.application_url`` where necessary.\n\n- The ``request.resource_url`` API now accepts these arguments: ``app_url``,\n  ``scheme``, ``host``, and ``port``.  The app_url argument can be used to\n  replace the URL prefix wholesale during url generation.  The ``scheme``,\n  ``host``, and ``port`` arguments can be used to replace the respective\n  default values of ``request.application_url`` partially.\n\n- A new API named ``request.resource_path`` now exists.  It works like\n  ``request.resource_url`` but produces a relative URL rather than an\n  absolute one.\n\n- The ``request.route_url`` API now accepts these arguments: ``_app_url``,\n  ``_scheme``, ``_host``, and ``_port``.  The ``_app_url`` argument can be\n  used to replace the URL prefix wholesale during url generation.  The\n  ``_scheme``, ``_host``, and ``_port`` arguments can be used to replace the\n  respective default values of ``request.application_url`` partially.\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``pyramid.interfaces.IContextURL`` interface has been deprecated.\n  People have been instructed to use this to register a resource url adapter\n  in the \"Hooks\" chapter to use to influence ``request.resource_url`` URL\n  generation for resources found via custom traversers since Pyramid 1.0.\n\n  The interface still exists and registering such an adapter still works, but\n  this interface will be removed from the software after a few major Pyramid\n  releases.  You should replace it with an equivalent\n  ``pyramid.interfaces.IResourceURL`` adapter, registered using the new\n  ``pyramid.config.Configurator.add_resource_url_adapter`` API.  A\n  deprecation warning is now emitted when a\n  ``pyramid.interfaces.IContextURL`` adapter is found when\n  ``request.resource_url`` is called.\n\nDocumentation\n-------------\n\n- Don't create a ``session`` instance in SQLA Wiki tutorial, use raw\n  ``DBSession`` instead (this is more common in real SQLA apps).\n\nScaffolding\n-----------\n\n- Put ``pyramid.includes`` targets within ini files in scaffolds on separate\n  lines in order to be able to tell people to comment out only the\n  ``pyramid_debugtoolbar`` line when they want to disable the toolbar.\n\nDependencies\n------------\n\n- Depend on ``venusian`` >= 1.0a3 to provide scan ``ignore`` support.\n\nInternal\n--------\n\n- Create a \"MakoRendererFactoryHelper\" that provides customizable settings\n  key prefixes.  Allows settings prefixes other than \"mako.\" to be used to\n  create different factories that don't use the global mako settings.  This\n  will be useful for the debug toolbar, which can currently be sabotaged by\n  someone using custom mako configuration settings.\n\n1.3a7 (2012-02-07)\n==================\n\nFeatures\n--------\n\n- More informative error message when a ``config.include`` cannot find an\n  ``includeme``.  See https://github.com/Pylons/pyramid/pull/392.\n\n- Internal: catch unhashable discriminators early (raise an error instead of\n  allowing them to find their way into resolveConflicts).\n\n- The `match_param` view predicate now accepts a string or a tuple.\n  This replaces the broken behavior of accepting a dict. See\n  https://github.com/Pylons/pyramid/issues/425 for more information.\n\nBug Fixes\n---------\n\n- The process will now restart when ``pserve`` is used with the ``--reload``\n  flag when the ``development.ini`` file (or any other .ini file in use) is\n  changed.  See https://github.com/Pylons/pyramid/issues/377 and\n  https://github.com/Pylons/pyramid/pull/411\n\n- The ``prequest`` script would fail when used against URLs which did not\n  return HTML or text.  See https://github.com/Pylons/pyramid/issues/381\n\nBackwards Incompatibilities\n---------------------------\n\n- The `match_param` view predicate no longer accepts a dict. This will\n  have no negative affect because the implementation was broken for\n  dict-based arguments.\n\nDocumentation\n-------------\n\n- Add a traversal hello world example to the narrative docs.\n\n1.3a6 (2012-01-20)\n==================\n\nFeatures\n--------\n\n- New API: ``pyramid.config.Configurator.set_request_property``. Add lazy\n  property descriptors to a request without changing the request factory.\n  This method provides conflict detection and is the suggested way to add\n  properties to a request.\n\n- Responses generated by Pyramid's ``static_view`` now use\n  a ``wsgi.file_wrapper`` (see\n  https://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling)\n  when one is provided by the web server.\n\nBug Fixes\n---------\n\n- Views registered with an ``accept`` could not be overridden correctly with\n  a different view that had the same predicate arguments.  See\n  https://github.com/Pylons/pyramid/pull/404 for more information.\n\n- When using a dotted name for a ``view`` argument to\n  ``Configurator.add_view`` that pointed to a class with a ``view_defaults``\n  decorator, the view defaults would not be applied.  See\n  https://github.com/Pylons/pyramid/issues/396 .\n\n- Static URL paths were URL-quoted twice.  See\n  https://github.com/Pylons/pyramid/issues/407 .\n\n1.3a5 (2012-01-09)\n==================\n\nBug Fixes\n---------\n\n- The ``pyramid.view.view_defaults`` decorator did not work properly when\n  more than one view relied on the defaults being different for configuration\n  conflict resolution.  See https://github.com/Pylons/pyramid/issues/394.\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``path_info`` route and view predicates now match against\n  ``request.upath_info`` (Unicode) rather than ``request.path_info``\n  (indeterminate value based on Python 3 vs. Python 2).  This has to be done\n  to normalize matching on Python 2 and Python 3.\n\n1.3a4 (2012-01-05)\n==================\n\nFeatures\n--------\n\n- New API: ``pyramid.request.Request.set_property``. Add lazy property\n  descriptors to a request without changing the request factory. New\n  properties may be reified, effectively caching the value for the lifetime\n  of the instance. Common use-cases for this would be to get a database\n  connection for the request or identify the current user.\n\n- Use the ``waitress`` WSGI server instead of ``wsgiref`` in scaffolding.\n\nBug Fixes\n---------\n\n- The documentation of ``pyramid.events.subscriber`` indicated that using it\n  as a decorator with no arguments like this::\n\n    @subscriber()\n    def somefunc(event):\n        pass\n\n  Would register ``somefunc`` to receive all events sent via the registry,\n  but this was untrue.  Instead, it would receive no events at all.  This has\n  now been fixed and the code matches the documentation.  See also\n  https://github.com/Pylons/pyramid/issues/386\n\n- Literal portions of route patterns were not URL-quoted when ``route_url``\n  or ``route_path`` was used to generate a URL or path.\n\n- The result of ``route_path`` or ``route_url`` might have been ``unicode``\n  or ``str`` depending on the input.  It is now guaranteed to always be\n  ``str``.\n\n- URL matching when the pattern contained non-ASCII characters in literal\n  parts was indeterminate.  Now the pattern supplied to ``add_route`` is\n  assumed to be either: a ``unicode`` value, or a ``str`` value that contains\n  only ASCII characters.  If you now want to match the path info from a URL\n  that contains high order characters, you can pass the Unicode\n  representation of the decoded path portion in the pattern.\n\n- When using a ``traverse=`` route predicate, traversal would fail with a\n  URLDecodeError if there were any high-order characters in the traversal\n  pattern or in the matched dynamic segments.\n\n- Using a dynamic segment named ``traverse`` in a route pattern like this::\n\n    config.add_route('trav_route', 'traversal/{traverse:.*}')\n\n  Would cause a ``UnicodeDecodeError`` when the route was matched and the\n  matched portion of the URL contained any high-order characters.  See\n  https://github.com/Pylons/pyramid/issues/385 .\n\n- When using a ``*traverse`` stararg in a route pattern, a URL that matched\n  that possessed a ``@@`` in its name (signifying a view name) would be\n  inappropriately quoted by the traversal machinery during traversal,\n  resulting in the view not being found properly. See\n  https://github.com/Pylons/pyramid/issues/382 and\n  https://github.com/Pylons/pyramid/issues/375 .\n\nBackwards Incompatibilities\n---------------------------\n\n- String values passed to ``route_url`` or ``route_path`` that are meant to\n  replace \"remainder\" matches will now be URL-quoted except for embedded\n  slashes. For example::\n\n     config.add_route('remain', '/foo*remainder')\n     request.route_path('remain', remainder='abc / def')\n     # -> '/foo/abc%20/%20def'\n\n  Previously string values passed as remainder replacements were tacked on\n  untouched, without any URL-quoting.  But this doesn't really work logically\n  if the value passed is Unicode (raw unicode cannot be placed in a URL or in\n  a path) and it is inconsistent with the rest of the URL generation\n  machinery if the value is a string (it won't be quoted unless by the\n  caller).\n\n  Some folks will have been relying on the older behavior to tack on query\n  string elements and anchor portions of the URL; sorry, you'll need to\n  change your code to use the ``_query`` and/or ``_anchor`` arguments to\n  ``route_path`` or ``route_url`` to do this now.\n\n- If you pass a bytestring that contains non-ASCII characters to\n  ``add_route`` as a pattern, it will now fail at startup time.  Use Unicode\n  instead.\n\n1.3a3 (2011-12-21)\n==================\n\nFeatures\n--------\n\n- Added a ``prequest`` script (along the lines of ``paster request``).  It is\n  documented in the \"Command-Line Pyramid\" chapter in the section entitled\n  \"Invoking a Request\".\n\n- Add undocumented ``__discriminator__`` API to derived view callables.\n  e.g. ``adapters.lookup(...).__discriminator__(context, request)``.  It will\n  be used by superdynamic systems that require the discriminator to be used\n  for introspection after manual view lookup.\n\nBug Fixes\n---------\n\n- Normalized exit values and ``-h`` output for all ``p*`` scripts\n  (``pviews``, ``proutes``, etc).\n\nDocumentation\n-------------\n\n- Added a section named \"Making Your Script into a Console Script\" in the\n  \"Command-Line Pyramid\" chapter.\n\n- Removed the \"Running Pyramid on Google App Engine\" tutorial from the main\n  docs.  It survives on in the Cookbook\n  (https://docs.pylonsproject.org/projects/pyramid_cookbook/en/latest/deployment/gae.html).\n  Rationale: it provides the correct info for the Python 2.5 version of GAE\n  only, and this version of Pyramid does not support Python 2.5.\n\n1.3a2 (2011-12-14)\n==================\n\nFeatures\n--------\n\n- New API: ``pyramid.view.view_defaults``. If you use a class as a view, you\n  can use the new ``view_defaults`` class decorator on the class to provide\n  defaults to the view configuration information used by every\n  ``@view_config`` decorator that decorates a method of that class.  It also\n  works against view configurations involving a class made imperatively.\n\n- Added a backwards compatibility knob to ``pcreate`` to emulate ``paster\n  create`` handling for the ``--list-templates`` option.\n\n- Changed scaffolding machinery around a bit to make it easier for people who\n  want to have extension scaffolds that can work across Pyramid 1.0.X, 1.1.X,\n  1.2.X and 1.3.X.  See the new \"Creating Pyramid Scaffolds\" chapter in the\n  narrative documentation for more info.\n\nDocumentation\n-------------\n\n- Added documentation to \"View Configuration\" narrative documentation chapter\n  about ``view_defaults`` class decorator.\n\n- Added API docs for ``view_defaults`` class decorator.\n\n- Added an API docs chapter for ``pyramid.scaffolds``.\n\n- Added a narrative docs chapter named \"Creating Pyramid Scaffolds\".\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``template_renderer`` method of ``pyramid.scaffolds.PyramidScaffold``\n  was renamed to ``render_template``.  If you were overriding it, you're a\n  bad person, because it wasn't an API before now.  But we're nice so we're\n  letting you know.\n\n1.3a1 (2011-12-09)\n==================\n\nFeatures\n--------\n\n- Python 3.2 compatibility.\n\n- New ``pyramid.compat`` module and API documentation which provides Python\n  2/3 straddling support for Pyramid add-ons and development environments.\n\n- A ``mako.directories`` setting is no longer required to use Mako templates\n  Rationale: Mako template renderers can be specified using an absolute asset\n  spec.  An entire application can be written with such asset specs,\n  requiring no ordered lookup path.\n\n- ``bpython`` interpreter compatibility in ``pshell``.  See the \"Command-Line\n  Pyramid\" narrative docs chapter for more information.\n\n- Added ``get_appsettings`` API function to the ``pyramid.paster`` module.\n  This function returns the settings defined within an ``[app:...]`` section\n  in a PasteDeploy ini file.\n\n- Added ``setup_logging`` API function to the ``pyramid.paster`` module.\n  This function sets up Python logging according to the logging configuration\n  in a PasteDeploy ini file.\n\n- Configuration conflict reporting is reported in a more understandable way\n  (\"Line 11 in file...\" vs. a repr of a tuple of similar info).\n\n- A configuration introspection system was added; see the narrative\n  documentation chapter entitled \"Pyramid Configuration Introspection\" for\n  more information.  New APIs: ``pyramid.registry.Introspectable``,\n  ``pyramid.config.Configurator.introspector``,\n  ``pyramid.config.Configurator.introspectable``,\n  ``pyramid.registry.Registry.introspector``.\n\n- Allow extra keyword arguments to be passed to the\n  ``pyramid.config.Configurator.action`` method.\n\n- New APIs: ``pyramid.path.AssetResolver`` and\n  ``pyramid.path.DottedNameResolver``.  The former can be used to resolve\n  asset specifications, the latter can be used to resolve dotted names to\n  modules or packages.\n\nBug Fixes\n---------\n\n- Make test suite pass on 32-bit systems; closes #286.  closes #306.\n  See also https://github.com/Pylons/pyramid/issues/286\n\n- The ``pyramid.view.view_config`` decorator did not accept a ``match_params``\n  predicate argument.  See https://github.com/Pylons/pyramid/pull/308\n\n- The AuthTktCookieHelper could potentially generate Unicode headers\n  inappropriately when the ``tokens`` argument to remember was used.  See \n  https://github.com/Pylons/pyramid/pull/314.\n\n- The AuthTktAuthenticationPolicy did not use a timing-attack-aware string\n  comparator.  See https://github.com/Pylons/pyramid/pull/320 for more info.\n\n- The DummySession in ``pyramid.testing`` now generates a new CSRF token if\n  one doesn't yet exist.\n\n- ``request.static_url`` now generates URL-quoted URLs when fed a ``path``\n  argument which contains characters that are unsuitable for URLs.  See\n  https://github.com/Pylons/pyramid/issues/349 for more info.\n\n- Prevent a scaffold rendering from being named ``site`` (conflicts with\n  Python internal site.py).\n\n- Support for using instances as targets of the ``pyramid.wsgi.wsgiapp`` and\n  ``pryramid.wsgi.wsgiapp2`` functions.\n  See https://github.com/Pylons/pyramid/pull/370 for more info.\n\nBackwards Incompatibilities\n---------------------------\n\n- Pyramid no longer runs on Python 2.5 (which includes the most recent\n  release of Jython and the Python 2.5 version of GAE as of this writing).\n\n- The ``paster`` command is no longer the documented way to create projects,\n  start the server, or run debugging commands.  To create projects from\n  scaffolds, ``paster create`` is replaced by the ``pcreate`` console script.\n  To serve up a project, ``paster serve`` is replaced by the ``pserve``\n  console script.  New console scripts named ``pshell``, ``pviews``,\n  ``proutes``, and ``ptweens`` do what their ``paster <commandname>``\n  equivalents used to do.  Rationale: the Paste and PasteScript packages do\n  not run under Python 3.\n\n- The default WSGI server run as the result of ``pserve`` from newly rendered\n  scaffolding is now the ``wsgiref`` WSGI server instead of the\n  ``paste.httpserver`` server.  Rationale: Rationale: the Paste and\n  PasteScript packages do not run under Python 3.\n\n- The ``pshell`` command (see \"paster pshell\") no longer accepts a\n  ``--disable-ipython`` command-line argument.  Instead, it accepts a ``-p``\n  or ``--python-shell`` argument, which can be any of the values ``python``,\n  ``ipython`` or ``bpython``.\n\n- Removed the ``pyramid.renderers.renderer_from_name`` function.  It has been\n  deprecated since Pyramid 1.0, and was never an API.\n\n- To use ZCML with versions of Pyramid >= 1.3, you will need ``pyramid_zcml``\n  version >= 0.8 and ``zope.configuration`` version >= 3.8.0.  The\n  ``pyramid_zcml`` package version 0.8 is backwards compatible all the way to\n  Pyramid 1.0, so you won't be warned if you have older versions installed\n  and upgrade Pyramid \"in-place\"; it may simply break instead.\n\nDependencies\n------------\n\n- Pyramid no longer depends on the ``zope.component`` package, except as a\n  testing dependency.\n\n- Pyramid now depends on a zope.interface>=3.8.0, WebOb>=1.2dev,\n  repoze.lru>=0.4, zope.deprecation>=3.5.0, translationstring>=0.4 (for\n  Python 3 compatibility purposes).  It also, as a testing dependency,\n  depends on WebTest>=1.3.1 for the same reason.\n\n- Pyramid no longer depends on the Paste or PasteScript packages.\n\nDocumentation\n-------------\n\n- The SQLAlchemy Wiki tutorial has been updated.  It now uses\n  ``@view_config`` decorators and an explicit database population script.\n\n- Minor updates to the ZODB Wiki tutorial.\n\n- A narrative documentation chapter named \"Extending Pyramid Configuration\"\n  was added; it describes how to add a new directive, and how use the\n  ``pyramid.config.Configurator.action`` method within custom directives.  It\n  also describes how to add introspectable objects.\n\n- A narrative documentation chapter named \"Pyramid Configuration\n  Introspection\" was added.  It describes how to query the introspection\n  system.\n\nScaffolds\n---------\n\n- Rendered scaffolds have now been changed to be more relocatable (fewer\n  mentions of the package name within files in the package).\n\n- The ``routesalchemy`` scaffold has been renamed ``alchemy``, replacing the\n  older (traversal-based) ``alchemy`` scaffold (which has been retired).\n\n- The ``starter`` scaffold now uses URL dispatch by default.\n\n1.2 (2011-09-12)\n================\n\nFeatures\n--------\n\n- Route pattern replacement marker names can now begin with an underscore.\n  See https://github.com/Pylons/pyramid/issues/276.\n\n1.2b3 (2011-09-11)\n==================\n\nBug Fixes\n---------\n\n- The route prefix was not taken into account when a static view was added in\n  an \"include\".  See https://github.com/Pylons/pyramid/issues/266 .\n\n1.2b2 (2011-09-08)\n==================\n\nBug Fixes\n---------\n\n- The 1.2b1 tarball was a brownbag (particularly for Windows users) because\n  it contained filenames with stray quotation marks in inappropriate places.\n  We depend on ``setuptools-git`` to produce release tarballs, and when it\n  was run to produce the 1.2b1 tarball, it didn't yet cope well with files\n  present in git repositories with high-order characters in their filenames.\n\nDocumentation\n-------------\n\n- Minor tweaks to the \"Introduction\" narrative chapter example app and\n  wording.\n\n1.2b1 (2011-09-08)\n==================\n\nBug Fixes\n---------\n\n- Sometimes falling back from territory translations (``de_DE``) to language\n  translations (``de``) would not work properly when using a localizer.  See\n  https://github.com/Pylons/pyramid/issues/263\n\n- The static file serving machinery could not serve files that started with a\n  ``.`` (dot) character.\n\n- Static files with high-order (super-ASCII) characters in their names could\n  not be served by a static view.  The static file serving machinery\n  inappropriately URL-quoted path segments in filenames when asking for files\n  from the filesystem.\n\n- Within ``pyramid.traversal.traversal_path`` , canonicalize URL segments\n  from UTF-8 to Unicode before checking whether a segment matches literally\n  one of ``.``, the empty string, or ``..`` in case there's some sneaky way\n  someone might tunnel those strings via UTF-8 that don't match the literals\n  before decoded.\n\nDocumentation\n-------------\n\n- Added a \"What Makes Pyramid Unique\" section to the Introduction narrative\n  chapter.\n\n1.2a6 (2011-09-06)\n==================\n\nBug Fixes\n---------\n\n- AuthTktAuthenticationPolicy with a ``reissue_time`` interfered with logout.\n  See https://github.com/Pylons/pyramid/issues/262.\n\nInternal\n--------\n\n- Internalize code previously depended upon as imports from the\n  ``paste.auth`` module (futureproof).\n\n- Replaced use of ``paste.urlparser.StaticURLParser`` with a derivative of\n  Chris Rossi's \"happy\" static file serving code (futureproof).\n\n- Fixed test suite; on some systems tests would fail due to indeterminate\n  test run ordering and a double-push-single-pop of a shared test variable.\n\nBehavior Differences\n--------------------\n\n- An ETag header is no longer set when serving a static file.  A\n  Last-Modified header is set instead.\n\n- Static file serving no longer supports the ``wsgi.file_wrapper`` extension.\n\n- Instead of returning a ``403 Forbidden`` error when a static file is served\n  that cannot be accessed by the Pyramid process' user due to file\n  permissions, an IOError (or similar) will be raised.\n\nScaffolds\n---------\n\n- All scaffolds now send the ``cache_max_age`` parameter to the\n  ``add_static_view`` method.\n\n1.2a5 (2011-09-04)\n==================\n\nBug Fixes\n---------\n\n- The ``route_prefix`` of a configurator was not properly taken into account\n  when registering routes in certain circumstances.  See\n  https://github.com/Pylons/pyramid/issues/260\n\nDependencies\n------------\n\n- The ``zope.configuration`` package is no longer a dependency.\n\n1.2a4 (2011-09-02)\n==================\n\nFeatures\n--------\n\n- Support an ``onerror`` keyword argument to\n  ``pyramid.config.Configurator.scan()``.  This onerror keyword argument is\n  passed to ``venusian.Scanner.scan()`` to influence error behavior when\n  an exception is raised during scanning.\n\n- The ``request_method`` predicate argument to\n  ``pyramid.config.Configurator.add_view`` and\n  ``pyramid.config.Configurator.add_route`` is now permitted to be a tuple of\n  HTTP method names.  Previously it was restricted to being a string\n  representing a single HTTP method name.\n\n- Undeprecated ``pyramid.traversal.find_model``,\n  ``pyramid.traversal.model_path``, ``pyramid.traversal.model_path_tuple``,\n  and ``pyramid.url.model_url``, which were all deprecated in Pyramid 1.0.\n  There's just not much cost to keeping them around forever as aliases to\n  their renamed ``resource_*`` prefixed functions.\n\n- Undeprecated ``pyramid.view.bfg_view``, which was deprecated in Pyramid\n  1.0.  This is a low-cost alias to ``pyramid.view.view_config`` which we'll\n  just keep around forever.\n\nDependencies\n------------\n\n- Pyramid now requires Venusian 1.0a1 or better to support the ``onerror``\n  keyword argument to ``pyramid.config.Configurator.scan``.\n\n1.2a3 (2011-08-29)\n==================\n\nBug Fixes\n---------\n\n- Pyramid did not properly generate static URLs using\n  ``pyramid.url.static_url`` when passed a caller-package relative path due\n  to a refactoring done in 1.2a1.\n\n- The ``settings`` object emitted a deprecation warning any time\n  ``__getattr__`` was called upon it.  However, there are legitimate\n  situations in which ``__getattr__`` is called on arbitrary objects\n  (e.g. ``hasattr``).  Now, the ``settings`` object only emits the warning\n  upon successful lookup.\n\nInternal\n--------\n\n- Use ``config.with_package`` in view_config decorator rather than\n  manufacturing a new renderer helper (cleanup).\n\n1.2a2 (2011-08-27)\n==================\n\nBug Fixes\n---------\n\n- When a ``renderers=`` argument is not specified to the Configurator\n  constructor, eagerly register and commit the default renderer set.  This\n  permits the overriding of the default renderers, which was broken in 1.2a1\n  without a commit directly after Configurator construction.\n\n- Mako rendering exceptions had the wrong value for an error message.\n\n- An include could not set a root factory successfully because the\n  Configurator constructor unconditionally registered one that would be\n  treated as if it were \"the word of the user\".\n\nFeatures\n--------\n\n- A session factory can now be passed in using the dotted name syntax.\n\n1.2a1 (2011-08-24)\n==================\n\nFeatures\n--------\n\n- The ``[pshell]`` section in an ini configuration file now treats a\n  ``setup`` key as a dotted name that points to a callable that is passed the\n  bootstrap environment.  It can mutate the environment as necessary for\n  great justice.\n\n- A new configuration setting named ``pyramid.includes`` is now available.\n  It is described in the \"Environment Variables and ``.ini`` Files Settings\"\n  narrative documentation chapter.\n\n- Added a ``route_prefix`` argument to the\n  ``pyramid.config.Configurator.include`` method.  This argument allows you\n  to compose URL dispatch applications together.  See the section entitled\n  \"Using a Route Prefix to Compose Applications\" in the \"URL Dispatch\"\n  narrative documentation chapter.\n\n- Added a ``pyramid.security.NO_PERMISSION_REQUIRED`` constant for use in\n  ``permission=`` statements to view configuration.  This constant has a\n  value of the string ``__no_permission_required__``.  This string value was\n  previously referred to in documentation; now the documentation uses the\n  constant.\n\n- Added a decorator-based way to configure a response adapter:\n  ``pyramid.response.response_adapter``.  This decorator has the same use as\n  ``pyramid.config.Configurator.add_response_adapter`` but it's declarative.\n\n- The ``pyramid.events.BeforeRender`` event now has an attribute named\n  ``rendering_val``.  This can be used to introspect the value returned by a\n  view in a BeforeRender subscriber.\n\n- New configurator directive: ``pyramid.config.Configurator.add_tween``.\n  This directive adds a \"tween\".  A \"tween\" is used to wrap the Pyramid\n  router's primary request handling function.  This is a feature may be used\n  by Pyramid framework extensions, to provide, for example, view timing\n  support and as a convenient place to hang bookkeeping code.\n\n  Tweens are further described in the narrative docs section in the Hooks\n  chapter, named \"Registering Tweens\".\n\n- New paster command ``paster ptweens``, which prints the current \"tween\"\n  configuration for an application.  See the section entitled \"Displaying\n  Tweens\" in the Command-Line Pyramid chapter of the narrative documentation\n  for more info.\n\n- The Pyramid debug logger now uses the standard logging configuration\n  (usually set up by Paste as part of startup).  This means that output from\n  e.g. ``debug_notfound``, ``debug_authorization``, etc. will go to the\n  normal logging channels.  The logger name of the debug logger will be the\n  package name of the *caller* of the Configurator's constructor.\n\n- A new attribute is available on request objects: ``exc_info``.  Its value\n  will be ``None`` until an exception is caught by the Pyramid router, after\n  which it will be the result of ``sys.exc_info()``.\n\n- ``pyramid.testing.DummyRequest`` now implements the\n  ``add_finished_callback`` and ``add_response_callback`` methods.\n\n- New methods of the ``pyramid.config.Configurator`` class:\n  ``set_authentication_policy`` and ``set_authorization_policy``.  These are\n  meant to be consumed mostly by add-on authors.\n\n- New Configurator method: ``set_root_factory``.\n\n- Pyramid no longer eagerly commits some default configuration statements at\n  Configurator construction time, which permits values passed in as\n  constructor arguments (e.g. ``authentication_policy`` and\n  ``authorization_policy``) to override the same settings obtained via an\n  \"include\".\n\n- Better Mako rendering exceptions via\n  ``pyramid.mako_templating.MakoRenderingException``\n\n- New request methods: ``current_route_url``, ``current_route_path``, and\n  ``static_path``.\n\n- New functions in ``pyramid.url``: ``current_route_path`` and\n  ``static_path``.\n\n- The ``pyramid.request.Request.static_url`` API (and its brethren\n  ``pyramid.request.Request.static_path``, ``pyramid.url.static_url``, and\n  ``pyramid.url.static_path``) now accept an asbolute filename as a \"path\"\n  argument.  This will generate a URL to an asset as long as the filename is\n  in a directory which was previously registered as a static view.\n  Previously, trying to generate a URL to an asset using an absolute file\n  path would raise a ValueError.\n\n- The ``RemoteUserAuthenticationPolicy ``, ``AuthTktAuthenticationPolicy``,\n  and ``SessionAuthenticationPolicy`` constructors now accept an additional\n  keyword argument named ``debug``.  By default, this keyword argument is\n  ``False``.  When it is ``True``, debug information will be sent to the\n  Pyramid debug logger (usually on stderr) when the ``authenticated_userid``\n  or ``effective_principals`` method is called on any of these policies.  The\n  output produced can be useful when trying to diagnose\n  authentication-related problems.\n\n- New view predicate: ``match_param``.  Example: a view added via\n  ``config.add_view(aview, match_param='action=edit')`` will be called only\n  when the ``request.matchdict`` has a value inside it named ``action`` with\n  a value of ``edit``.\n\nInternal\n--------\n\n- The Pyramid \"exception view\" machinery is now implemented as a \"tween\"\n  (``pyramid.tweens.excview_tween_factory``).\n\n- WSGIHTTPException (HTTPFound, HTTPNotFound, etc) now has a new API named\n  \"prepare\" which renders the body and content type when it is provided with\n  a WSGI environ.  Required for debug toolbar.\n\n- Once ``__call__`` or ``prepare`` is called on a WSGIHTTPException, the body\n  will be set, and subsequent calls to ``__call__`` will always return the\n  same body.  Delete the body attribute to rerender the exception body.\n\n- Previously the ``pyramid.events.BeforeRender`` event *wrapped* a dictionary\n  (it addressed it as its ``_system`` attribute).  Now it *is* a dictionary\n  (it inherits from ``dict``), and it's the value that is passed to templates\n  as a top-level dictionary.\n\n- The ``route_url``, ``route_path``, ``resource_url``, ``static_url``, and\n  ``current_route_url`` functions in the ``pyramid.url`` package now delegate\n  to a method on the request they've been passed, instead of the other way\n  around.  The pyramid.request.Request object now inherits from a mixin named\n  pyramid.url.URLMethodsMixin to make this possible, and all url/path\n  generation logic is embedded in this mixin.\n\n- Refactor ``pyramid.config`` into a package.\n\n- Removed the ``_set_security_policies`` method of the Configurator.\n\n- Moved the ``StaticURLInfo`` class from ``pyramid.static`` to\n  ``pyramid.config.views``.\n\n- Move the ``Settings`` class from ``pyramid.settings`` to\n  ``pyramid.config.settings``.\n\n- Move the ``OverrideProvider``, ``PackageOverrides``, ``DirectoryOverride``,\n  and ``FileOverride`` classes from ``pyramid.asset`` to\n  ``pyramid.config.assets``.\n\nDeprecations\n------------\n\n- All Pyramid-related deployment settings (e.g. ``debug_all``,\n  ``debug_notfound``) are now meant to be prefixed with the prefix\n  ``pyramid.``.  For example: ``debug_all`` -> ``pyramid.debug_all``.  The\n  old non-prefixed settings will continue to work indefinitely but supplying\n  them may eventually print a deprecation warning.  All scaffolds and\n  tutorials have been changed to use prefixed settings.\n\n- The ``settings`` dictionary now raises a deprecation warning when you\n  attempt to access its values via ``__getattr__`` instead of\n  via ``__getitem__``.\n\nBackwards Incompatibilities\n---------------------------\n\n- If a string is passed as the ``debug_logger`` parameter to a Configurator,\n  that string is considered to be the name of a global Python logger rather\n  than a dotted name to an instance of a logger.\n\n- The ``pyramid.config.Configurator.include`` method now accepts only a\n  single ``callable`` argument (a sequence of callables used to be\n  permitted).  If you are passing more than one ``callable`` to\n  ``pyramid.config.Configurator.include``, it will break.  You now must now\n  instead make a separate call to the method for each callable.  This change\n  was introduced to support the ``route_prefix`` feature of include.\n\n- It may be necessary to more strictly order configuration route and view\n  statements when using an \"autocommitting\" Configurator.  In the past, it\n  was possible to add a view which named a route name before adding a route\n  with that name when you used an autocommitting configurator.  For example::\n\n    config = Configurator(autocommit=True)\n    config.add_view('my.pkg.someview', route_name='foo')\n    config.add_route('foo', '/foo')\n\n  The above will raise an exception when the view attempts to add itself.\n  Now you must add the route before adding the view::\n\n    config = Configurator(autocommit=True)\n    config.add_route('foo', '/foo')\n    config.add_view('my.pkg.someview', route_name='foo')\n\n  This won't effect \"normal\" users, only people who have legacy BFG codebases\n  that used an autocommitting configurator and possibly tests that use the\n  configurator API (the configurator returned by ``pyramid.testing.setUp`` is\n  an autocommitting configurator).  The right way to get around this is to\n  use a non-autocommitting configurator (the default), which does not have\n  these directive ordering requirements.\n\n- The ``pyramid.config.Configurator.add_route`` directive no longer returns a\n  route object.  This change was required to make route vs. view\n  configuration processing work properly.\n\nDocumentation\n-------------\n\n- Narrative and API documentation which used the ``route_url``,\n  ``route_path``, ``resource_url``, ``static_url``, and ``current_route_url``\n  functions in the ``pyramid.url`` package have now been changed to use\n  eponymous methods of the request instead.\n\n- Added a section entitled \"Using a Route Prefix to Compose Applications\" to\n  the \"URL Dispatch\" narrative documentation chapter.\n\n- Added a new module to the API docs: ``pyramid.tweens``.\n\n- Added a \"Registering Tweens\" section to the \"Hooks\" narrative chapter.\n\n- Added a \"Displaying Tweens\" section to the \"Command-Line Pyramid\" narrative\n  chapter.\n\n- Added documentation for the ``pyramid.tweens`` and ``pyramid.includes``\n  configuration settings to the \"Environment Variables and ``.ini`` Files\n  Settings\" chapter.\n\n- Added a Logging chapter to the narrative docs (based on the Pylons logging\n  docs, thanks Phil).\n\n- Added a Paste chapter to the narrative docs (moved content from the Project\n  chapter).\n\n- Added the ``pyramid.interfaces.IDict`` interface representing the methods\n  of a dictionary, for documentation purposes only (IMultiDict and\n  IBeforeRender inherit from it).\n\n- All tutorials now use - The ``route_url``, ``route_path``,\n  ``resource_url``, ``static_url``, and ``current_route_url`` methods of the\n  request rather than the function variants imported from ``pyramid.url``.\n\n- The ZODB wiki tutorial now uses the ``pyramid_zodbconn`` package rather\n  than the ``repoze.zodbconn`` package to provide ZODB integration.\n\nDependency Changes\n------------------\n\n- Pyramid now relies on PasteScript >= 1.7.4.  This version contains a\n  feature important for allowing flexible logging configuration.\n\nScaffolds\n----------\n\n- All scaffolds now use the ``pyramid_tm`` package rather than the\n  ``repoze.tm2`` middleware to manage transaction management.\n\n- The ZODB scaffold now uses the ``pyramid_zodbconn`` package rather than the\n  ``repoze.zodbconn`` package to provide ZODB integration.\n\n- All scaffolds now use the ``pyramid_debugtoolbar`` package rather than the\n  ``WebError`` package to provide interactive debugging features.\n\n- Projects created via a scaffold no longer depend on the ``WebError``\n  package at all; configuration in the ``production.ini`` file which used to\n  require its ``error_catcher`` middleware has been removed.  Configuring\n  error catching / email sending is now the domain of the ``pyramid_exclog``\n  package (see https://docs.pylonsproject.org/projects/pyramid_exclog/en/latest/).\n\nBug Fixes\n---------\n\n- Fixed an issue with the default renderer not working at certain times.  See\n  https://github.com/Pylons/pyramid/issues/249\n\n\n1.1 (2011-07-22)\n================\n\nFeatures\n--------\n\n- Added the ``pyramid.renderers.null_renderer`` object as an API.  The null\n  renderer is an object that can be used in advanced integration cases as\n  input to the view configuration ``renderer=`` argument.  When the null\n  renderer is used as a view renderer argument, Pyramid avoids converting the\n  view callable result into a Response object.  This is useful if you want to\n  reuse the view configuration and lookup machinery outside the context of\n  its use by the Pyramid router.  This feature was added for consumption by\n  the ``pyramid_rpc`` package, which uses view configuration and lookup\n  outside the context of a router in exactly this way.  ``pyramid_rpc`` has\n  been broken under 1.1 since 1.1b1; adding it allows us to make it work\n  again.\n\n- Change all scaffolding templates that point to docs.pylonsproject.org to\n  use ``/projects/pyramid/current`` rather than ``/projects/pyramid/dev``.\n\nInternals\n---------\n\n- Remove ``compat`` code that served only the purpose of providing backwards\n  compatibility with Python 2.4.\n\n- Add a deprecation warning for non-API function\n  ``pyramid.renderers.renderer_from_name`` which has seen use in the wild.\n\n- Add a ``clone`` method to ``pyramid.renderers.RendererHelper`` for use by\n  the ``pyramid.view.view_config`` decorator.\n\nDocumentation\n-------------\n\n- Fixed two typos in wiki2 (SQLA + URL Dispatch) tutorial.\n\n- Reordered chapters in narrative section for better new user friendliness.\n\n- Added more indexing markers to sections in documentation.\n\n1.1b4 (2011-07-18)\n==================\n\nDocumentation\n-------------\n\n- Added a section entitled \"Writing a Script\" to the \"Command-Line Pyramid\"\n  chapter.\n\nBackwards Incompatibilities\n---------------------------\n\n- We added the ``pyramid.scripting.make_request`` API too hastily in 1.1b3.\n  It has been removed.  Sorry for any inconvenience.  Use the\n  ``pyramid.request.Request.blank`` API instead.\n\nFeatures\n--------\n\n- The ``paster pshell``, ``paster pviews``, and ``paster proutes`` commands\n  each now under the hood uses ``pyramid.paster.bootstrap``, which makes it\n  possible to supply an ``.ini`` file without naming the \"right\" section in\n  the file that points at the actual Pyramid application.  Instead, you can\n  generally just run ``paster {pshell|proutes|pviews} development.ini`` and\n  it will do mostly the right thing.\n\nBug Fixes\n---------\n\n- Omit custom environ variables when rendering a custom exception template in\n  ``pyramid.httpexceptions.WSGIHTTPException._set_default_attrs``;\n  stringifying thse may trigger code that should not be executed; see\n  https://github.com/Pylons/pyramid/issues/239\n\n1.1b3 (2011-07-15)\n==================\n\nFeatures\n--------\n\n- Fix corner case to ease semifunctional testing of views: create a new\n  rendererinfo to clear out old registry on a rescan.  See\n  https://github.com/Pylons/pyramid/pull/234.\n\n- New API class: ``pyramid.static.static_view``.  This supersedes the\n  deprecated ``pyramid.view.static`` class.  ``pyramid.static.static_view``\n  by default serves up documents as the result of the request's\n  ``path_info``, attribute rather than it's ``subpath`` attribute (the\n  inverse was true of ``pyramid.view.static``, and still is).\n  ``pyramid.static.static_view`` exposes a ``use_subpath`` flag for use when\n  you want the static view to behave like the older deprecated version.\n\n- A new API function ``pyramid.paster.bootstrap`` has been added to make\n  writing scripts that bootstrap a Pyramid environment easier, e.g.::\n\n      from pyramid.paster import bootstrap\n      info = bootstrap('/path/to/my/development.ini')\n      request = info['request']\n      print request.route_url('myroute')\n\n- A new API function ``pyramid.scripting.prepare`` has been added.  It is a\n  lower-level analogue of ``pyramid.paster.boostrap`` that accepts a request\n  and a registry instead of a config file argument, and is used for the same\n  purpose::\n\n      from pyramid.scripting import prepare\n      info = prepare(registry=myregistry)\n      request = info['request']\n      print request.route_url('myroute')\n\n- A new API function ``pyramid.scripting.make_request`` has been added.  The\n  resulting request will have a ``registry`` attribute.  It is meant to be\n  used in conjunction with ``pyramid.scripting.prepare`` and/or\n  ``pyramid.paster.bootstrap`` (both of which accept a request as an\n  argument)::\n\n      from pyramid.scripting import make_request\n      request = make_request('/')\n\n- New API attribute ``pyramid.config.global_registries`` is an iterable\n  object that contains references to every Pyramid registry loaded into the\n  current process via ``pyramid.config.Configurator.make_app``.  It also has\n  a ``last`` attribute containing the last registry loaded.  This is used by\n  the scripting machinery, and is available for introspection.\n\nDeprecations\n------------\n\n- The ``pyramid.view.static`` class has been deprecated in favor of the newer\n  ``pyramid.static.static_view`` class.  A deprecation warning is raised when\n  it is used.  You should replace it with a reference to\n  ``pyramid.static.static_view`` with the ``use_subpath=True`` argument.\n\nBug Fixes\n---------\n\n- Without a mo-file loaded for the combination of domain/locale,\n  ``pyramid.i18n.Localizer.pluralize`` run using that domain/locale\n  combination raised an inscrutable \"translations object has no attr\n  'plural'\" error.  Now, instead it \"works\" (it uses a germanic pluralization\n  by default).  It's nonsensical to try to pluralize something without\n  translations for that locale/domain available, but this behavior matches\n  the behavior of ``pyramid.i18n.Localizer.translate`` so it's at least\n  consistent; see https://github.com/Pylons/pyramid/issues/235.\n\n1.1b2 (2011-07-13)\n==================\n\nFeatures\n--------\n\n- New environment setting ``PYRAMID_PREVENT_HTTP_CACHE`` and new\n  configuration file value ``prevent_http_cache``.  These are synomymous and\n  allow you to prevent HTTP cache headers from being set by Pyramid's\n  ``http_cache`` machinery globally in a process.  see the \"Influencing HTTP\n  Caching\" section of the \"View Configuration\" narrative chapter and the\n  detailed documentation for this setting in the \"Environment Variables and\n  Configuration Settings\" narrative chapter.\n\nBehavior Changes\n----------------\n\n- Previously, If a ``BeforeRender`` event subscriber added a value via the\n  ``__setitem__`` or ``update`` methods of the event object with a key that\n  already existed in the renderer globals dictionary, a ``KeyError`` was\n  raised.  With the deprecation of the \"add_renderer_globals\" feature of the\n  configurator, there was no way to override an existing value in the\n  renderer globals dictionary that already existed.  Now, the event object\n  will overwrite an older value that is already in the globals dictionary\n  when its ``__setitem__`` or ``update`` is called (as well as the new\n  ``setdefault`` method), just like a plain old dictionary.  As a result, for\n  maximum interoperability with other third-party subscribers, if you write\n  an event subscriber meant to be used as a BeforeRender subscriber, your\n  subscriber code will now need to (using ``.get`` or ``__contains__`` of the\n  event object) ensure no value already exists in the renderer globals\n  dictionary before setting an overriding value.\n\nBug Fixes\n---------\n\n- The ``Configurator.add_route`` method allowed two routes with the same\n  route to be added without an intermediate ``config.commit()``.  If you now\n  receive a ``ConfigurationError`` at startup time that appears to be\n  ``add_route`` related, you'll need to either a) ensure that all of your\n  route names are unique or b) call ``config.commit()`` before adding a\n  second route with the name of a previously added name or c) use a\n  Configurator that works in ``autocommit`` mode.\n\n- The ``pyramid_routesalchemy`` and ``pyramid_alchemy`` scaffolds\n  inappropriately used ``DBSession.rollback()`` instead of\n  ``transaction.abort()`` in one place.\n\n- We now clear ``request.response`` before we invoke an exception view; an\n  exception view will be working with a request.response that has not been\n  touched by any code prior to the exception.\n\n- Views associated with routes with spaces in the route name may not have\n  been looked up correctly when using Pyramid with ``zope.interface`` 3.6.4\n  and better.  See https://github.com/Pylons/pyramid/issues/232.\n\nDocumentation\n-------------\n\n- Wiki2 (SQLAlchemy + URL Dispatch) tutorial ``models.initialize_sql`` didn't\n  match the ``pyramid_routesalchemy`` scaffold function of the same name; it\n  didn't get synchronized when it was changed in the scaffold.\n\n- New documentation section in View Configuration narrative chapter:\n  \"Influencing HTTP Caching\".\n\n1.1b1 (2011-07-10)\n==================\n\nFeatures\n--------\n\n- It is now possible to invoke ``paster pshell`` even if the paste ini file\n  section name pointed to in its argument is not actually a Pyramid WSGI\n  application.  The shell will work in a degraded mode, and will warn the\n  user.  See \"The Interactive Shell\" in the \"Creating a Pyramid Project\"\n  narrative documentation section.\n\n- ``paster pshell`` now offers more built-in global variables by default\n  (including ``app`` and ``settings``).  See \"The Interactive Shell\" in the\n  \"Creating a Pyramid Project\" narrative documentation section.\n\n- It is now possible to add a ``[pshell]`` section to your application's .ini\n  configuration file, which influences the global names available to a pshell\n  session.  See \"Extending the Shell\" in the \"Creating a Pyramid Project\"\n  narrative documentation chapter.\n\n- The ``config.scan`` method has grown a ``**kw`` argument.  ``kw`` argument\n  represents a set of keyword arguments to pass to the Venusian ``Scanner``\n  object created by Pyramid.  (See the Venusian documentation for more\n  information about ``Scanner``).\n\n- New request property: ``json_body``. This property will return the\n  JSON-decoded variant of the request body.  If the request body is not\n  well-formed JSON, this property will raise an exception.\n\n- A new value ``http_cache`` can be used as a view configuration\n  parameter.\n\n  When you supply an ``http_cache`` value to a view configuration, the\n  ``Expires`` and ``Cache-Control`` headers of a response generated by the\n  associated view callable are modified.  The value for ``http_cache`` may be\n  one of the following:\n\n  - A nonzero integer.  If it's a nonzero integer, it's treated as a number\n    of seconds.  This number of seconds will be used to compute the\n    ``Expires`` header and the ``Cache-Control: max-age`` parameter of\n    responses to requests which call this view.  For example:\n    ``http_cache=3600`` instructs the requesting browser to 'cache this\n    response for an hour, please'.\n\n  - A ``datetime.timedelta`` instance.  If it's a ``datetime.timedelta``\n    instance, it will be converted into a number of seconds, and that number\n    of seconds will be used to compute the ``Expires`` header and the\n    ``Cache-Control: max-age`` parameter of responses to requests which call\n    this view.  For example: ``http_cache=datetime.timedelta(days=1)``\n    instructs the requesting browser to 'cache this response for a day,\n    please'.\n\n  - Zero (``0``).  If the value is zero, the ``Cache-Control`` and\n    ``Expires`` headers present in all responses from this view will be\n    composed such that client browser cache (and any intermediate caches) are\n    instructed to never cache the response.\n\n  - A two-tuple.  If it's a two tuple (e.g. ``http_cache=(1,\n    {'public':True})``), the first value in the tuple may be a nonzero\n    integer or a ``datetime.timedelta`` instance; in either case this value\n    will be used as the number of seconds to cache the response.  The second\n    value in the tuple must be a dictionary.  The values present in the\n    dictionary will be used as input to the ``Cache-Control`` response\n    header.  For example: ``http_cache=(3600, {'public':True})`` means 'cache\n    for an hour, and add ``public`` to the Cache-Control header of the\n    response'.  All keys and values supported by the\n    ``webob.cachecontrol.CacheControl`` interface may be added to the\n    dictionary.  Supplying ``{'public':True}`` is equivalent to calling\n    ``response.cache_control.public = True``.\n\n  Providing a non-tuple value as ``http_cache`` is equivalent to calling\n  ``response.cache_expires(value)`` within your view's body.\n\n  Providing a two-tuple value as ``http_cache`` is equivalent to calling\n  ``response.cache_expires(value[0], **value[1])`` within your view's body.\n\n  If you wish to avoid influencing, the ``Expires`` header, and instead wish\n  to only influence ``Cache-Control`` headers, pass a tuple as ``http_cache``\n  with the first element of ``None``, e.g.: ``(None, {'public':True})``.\n\nBug Fixes\n---------\n\n- Framework wrappers of the original view (such as http_cached and so on)\n  relied on being able to trust that the response they were receiving was an\n  IResponse.  It wasn't always, because the response was resolved by the\n  router instead of early in the view wrapping process.  This has been fixed.\n\nDocumentation\n-------------\n\n- Added a section in the \"Webob\" chapter named \"Dealing With A JSON-Encoded\n  Request Body\" (usage of ``request.json_body``).\n\nBehavior Changes\n----------------\n\n- The ``paster pshell``, ``paster proutes``, and ``paster pviews`` commands\n  now take a single argument in the form ``/path/to/config.ini#sectionname``\n  rather than the previous 2-argument spelling ``/path/to/config.ini\n  sectionname``.  ``#sectionname`` may be omitted, in which case ``#main`` is\n  assumed.\n\n1.1a4 (2011-07-01)\n==================\n\nBug Fixes\n---------\n\n- ``pyramid.testing.DummyRequest`` now raises deprecation warnings when\n  attributes deprecated for ``pyramid.request.Request`` are accessed (like\n  ``response_content_type``).  This is for the benefit of folks running unit\n  tests which use DummyRequest instead of a \"real\" request, so they know\n  things are deprecated without necessarily needing a functional test suite.\n\n- The ``pyramid.events.subscriber`` directive behaved contrary to the\n  documentation when passed more than one interface object to its\n  constructor.  For example, when the following listener was registered::\n\n     @subscriber(IFoo, IBar)\n     def expects_ifoo_events_and_ibar_events(event):\n         print event\n\n  The Events chapter docs claimed that the listener would be registered and\n  listening for both ``IFoo`` and ``IBar`` events.  Instead, it registered an\n  \"object event\" subscriber which would only be called if an IObjectEvent was\n  emitted where the object interface was ``IFoo`` and the event interface was\n  ``IBar``.\n\n  The behavior now matches the documentation. If you were relying on the\n  buggy behavior of the 1.0 ``subscriber`` directive in order to register an\n  object event subscriber, you must now pass a sequence to indicate you'd\n  like to register a subscriber for an object event. e.g.::\n\n     @subscriber([IFoo, IBar])\n     def expects_object_event(object, event):\n         print object, event\n\nFeatures\n--------\n\n- Add JSONP renderer (see \"JSONP renderer\" in the Renderers chapter of the\n  documentation).\n\nDeprecations\n------------\n\n- Deprecated the ``set_renderer_globals_factory`` method of the Configurator\n  and the ``renderer_globals`` Configurator constructor parameter.\n\nDocumentation\n-------------\n\n- The Wiki and Wiki2 tutorial \"Tests\" chapters each had two bugs: neither did\n  told the user to depend on WebTest, and 2 tests failed in each as the\n  result of changes to Pyramid itself.  These issues have been fixed.\n\n- Move 1.0.X CHANGES.txt entries to HISTORY.txt.\n\n1.1a3 (2011-06-26)\n==================\n\nFeatures\n--------\n\n- Added ``mako.preprocessor`` config file parameter; allows for a Mako\n  preprocessor to be specified as a Python callable or Python dotted name.\n  See https://github.com/Pylons/pyramid/pull/183 for rationale.\n\nBug fixes\n---------\n\n- Pyramid would raise an AttributeError in the Configurator when attempting\n  to set a ``__text__`` attribute on a custom predicate that was actually a\n  classmethod.  See https://github.com/Pylons/pyramid/pull/217 .\n\n- Accessing or setting deprecated response_* attrs on request\n  (e.g. ``response_content_type``) now issues a deprecation warning at access\n  time rather than at rendering time.\n\n1.1a2 (2011-06-22)\n==================\n\nBug Fixes\n---------\n\n- 1.1a1 broke Akhet by not providing a backwards compatibility import shim\n  for ``pyramid.paster.PyramidTemplate``.  Now one has been added, although a\n  deprecation warning is emitted when Akhet imports it.\n\n- If multiple specs were provided in a single call to\n  ``config.add_translation_dirs``, the directories were inserted into the\n  beginning of the directory list in the wrong order: they were inserted in\n  the reverse of the order they were provided in the ``*specs`` list (items\n  later in the list were added before ones earlier in the list).  This is now\n  fixed.\n\nBackwards Incompatibilities\n---------------------------\n\n- The pyramid Router attempted to set a value into the key\n  ``environ['repoze.bfg.message']`` when it caught a view-related exception\n  for backwards compatibility with applications written for ``repoze.bfg``\n  during error handling.  It did this by using code that looked like so::\n\n                    # \"why\" is an exception object\n                    try: \n                        msg = why[0]\n                    except:\n                        msg = ''\n\n                    environ['repoze.bfg.message'] = msg\n\n  Use of the value ``environ['repoze.bfg.message']`` was docs-deprecated in\n  Pyramid 1.0.  Our standing policy is to not remove features after a\n  deprecation for two full major releases, so this code was originally slated\n  to be removed in Pyramid 1.2.  However, computing the\n  ``repoze.bfg.message`` value was the source of at least one bug found in\n  the wild (https://github.com/Pylons/pyramid/issues/199), and there isn't a\n  foolproof way to both preserve backwards compatibility and to fix the bug.\n  Therefore, the code which sets the value has been removed in this release.\n  Code in exception views which relies on this value's presence in the\n  environment should now use the ``exception`` attribute of the request\n  (e.g. ``request.exception[0]``) to retrieve the message instead of relying\n  on ``request.environ['repoze.bfg.message']``.\n\n1.1a1 (2011-06-20)\n==================\n\nDocumentation\n-------------\n\n- The term \"template\" used to refer to both \"paster templates\" and \"rendered\n  templates\" (templates created by a rendering engine.  i.e. Mako, Chameleon,\n  Jinja, etc.).  \"Paster templates\" will now be referred to as \"scaffolds\",\n  whereas the name for \"rendered templates\" will remain as \"templates.\"\n\n- The ``wiki`` (ZODB+Traversal) tutorial was updated slightly.\n\n- The ``wiki2`` (SQLA+URL Dispatch) tutorial was updated slightly.\n\n- Make ``pyramid.interfaces.IAuthenticationPolicy`` and\n  ``pyramid.interfaces.IAuthorizationPolicy`` public interfaces, and refer to\n  them within the ``pyramid.authentication`` and ``pyramid.authorization``\n  API docs.\n\n- Render the function definitions for each exposed interface in\n  ``pyramid.interfaces``.\n\n- Add missing docs reference to\n  ``pyramid.config.Configurator.set_view_mapper`` and refer to it within\n  Hooks chapter section named \"Using a View Mapper\".\n\n- Added section to the \"Environment Variables and ``.ini`` File Settings\"\n  chapter in the narrative documentation section entitled \"Adding a Custom\n  Setting\".\n\n- Added documentation for a \"multidict\" (e.g. the API of ``request.POST``) as\n  interface API documentation.\n\n- Added a section to the \"URL Dispatch\" narrative chapter regarding the new\n  \"static\" route feature.\n\n- Added \"What's New in Pyramid 1.1\" to HTML rendering of documentation.\n\n- Added API docs for ``pyramid.authentication.SessionAuthenticationPolicy``.\n\n- Added API docs for ``pyramid.httpexceptions.exception_response``.\n\n- Added \"HTTP Exceptions\" section to Views narrative chapter including a\n  description of ``pyramid.httpexceptions.exception_response``.\n\nFeatures\n--------\n\n- Add support for language fallbacks: when trying to translate for a\n  specific territory (such as ``en_GB``) fall back to translations\n  for the language (ie ``en``). This brings the translation behaviour in line\n  with GNU gettext and fixes partially translated texts when using C\n  extensions.\n\n- New authentication policy:\n  ``pyramid.authentication.SessionAuthenticationPolicy``, which uses a session\n  to store credentials.\n\n- Accessing the ``response`` attribute of a ``pyramid.request.Request``\n  object (e.g. ``request.response`` within a view) now produces a new\n  ``pyramid.response.Response`` object.  This feature is meant to be used\n  mainly when a view configured with a renderer needs to set response\n  attributes: all renderers will use the Response object implied by\n  ``request.response`` as the response object returned to the router.\n\n  ``request.response`` can also be used by code in a view that does not use a\n  renderer, however the response object that is produced by\n  ``request.response`` must be returned when a renderer is not in play (it is\n  not a \"global\" response).\n\n- Integers and longs passed as ``elements`` to ``pyramid.url.resource_url``\n  or ``pyramid.request.Request.resource_url`` e.g. ``resource_url(context,\n  request, 1, 2)`` (``1`` and ``2`` are the ``elements``) will now be\n  converted implicitly to strings in the result.  Previously passing integers\n  or longs as elements would cause a TypeError.\n\n- ``pyramid_alchemy`` paster template now uses ``query.get`` rather than\n  ``query.filter_by`` to take better advantage of identity map caching.\n\n- ``pyramid_alchemy`` paster template now has unit tests.\n\n- Added ``pyramid.i18n.make_localizer`` API (broken out from\n  ``get_localizer`` guts).\n\n- An exception raised by a NewRequest event subscriber can now be caught by\n  an exception view.\n\n- It is now possible to get information about why Pyramid raised a Forbidden\n  exception from within an exception view.  The ``ACLDenied`` object returned\n  by the ``permits`` method of each stock authorization policy\n  (``pyramid.interfaces.IAuthorizationPolicy.permits``) is now attached to\n  the Forbidden exception as its ``result`` attribute.  Therefore, if you've\n  created a Forbidden exception view, you can see the ACE, ACL, permission,\n  and principals involved in the request as\n  eg. ``context.result.permission``, ``context.result.acl``, etc within the\n  logic of the Forbidden exception view.\n\n- Don't explicitly prevent the ``timeout`` from being lower than the\n  ``reissue_time`` when setting up an ``AuthTktAuthenticationPolicy``\n  (previously such a configuration would raise a ``ValueError``, now it's\n  allowed, although typically nonsensical).  Allowing the nonsensical\n  configuration made the code more understandable and required fewer tests.\n\n- A new paster command named ``paster pviews`` was added.  This command\n  prints a summary of potentially matching views for a given path.  See the\n  section entitled \"Displaying Matching Views for a Given URL\" in the \"View\n  Configuration\" chapter of the narrative documentation for more information.\n\n- The ``add_route`` method of the Configurator now accepts a ``static``\n  argument.  If this argument is ``True``, the added route will never be\n  considered for matching when a request is handled.  Instead, it will only\n  be useful for URL generation via ``route_url`` and ``route_path``.  See the\n  section entitled \"Static Routes\" in the URL Dispatch narrative chapter for\n  more information.\n\n- A default exception view for the context\n  ``pyramid.interfaces.IExceptionResponse`` is now registered by default.\n  This means that an instance of any exception response class imported from\n  ``pyramid.httpexceptions`` (such as ``HTTPFound``) can now be raised from\n  within view code; when raised, this exception view will render the\n  exception to a response.\n\n- A function named ``pyramid.httpexceptions.exception_response`` is a\n  shortcut that can be used to create HTTP exception response objects using\n  an HTTP integer status code.\n\n- The Configurator now accepts an additional keyword argument named\n  ``exceptionresponse_view``.  By default, this argument is populated with a\n  default exception view function that will be used when a response is raised\n  as an exception. When ``None`` is passed for this value, an exception view\n  for responses will not be registered.  Passing ``None`` returns the\n  behavior of raising an HTTP exception to that of Pyramid 1.0 (the exception\n  will propagate to middleware and to the WSGI server).\n\n- The ``pyramid.request.Request`` class now has a ``ResponseClass`` interface\n  which points at ``pyramid.response.Response``.\n\n- The ``pyramid.response.Response`` class now has a ``RequestClass``\n  interface which points at ``pyramid.request.Request``.\n\n- It is now possible to return an arbitrary object from a Pyramid view\n  callable even if a renderer is not used, as long as a suitable adapter to\n  ``pyramid.interfaces.IResponse`` is registered for the type of the returned\n  object by using the new\n  ``pyramid.config.Configurator.add_response_adapter`` API.  See the section\n  in the Hooks chapter of the documentation entitled \"Changing How Pyramid\n  Treats View Responses\".\n\n- The Pyramid router will now, by default, call the ``__call__`` method of\n  WebOb response objects when returning a WSGI response.  This means that,\n  among other things, the ``conditional_response`` feature of WebOb response\n  objects will now behave properly.\n\n- New method named ``pyramid.request.Request.is_response``.  This method\n  should be used instead of the ``pyramid.view.is_response`` function, which\n  has been deprecated.\n\nBug Fixes\n---------\n\n- URL pattern markers used in URL dispatch are permitted to specify a custom\n  regex. For example, the pattern ``/{foo:\\d+}`` means to match ``/12345``\n  (foo==12345 in the match dictionary) but not ``/abc``. However, custom\n  regexes in a pattern marker which used squiggly brackets did not work. For\n  example, ``/{foo:\\d{4}}`` would fail to match ``/1234`` and\n  ``/{foo:\\d{1,2}}`` would fail to match ``/1`` or ``/11``. One level of\n  inner squiggly brackets is now recognized so that the prior two patterns\n  given as examples now work. See also\n  https://github.com/Pylons/pyramid/issues/123.\n\n- Don't send port numbers along with domain information in cookies set by\n  AuthTktCookieHelper (see https://github.com/Pylons/pyramid/issues/131).\n\n- ``pyramid.url.route_path`` (and the shortcut\n  ``pyramid.request.Request.route_url`` method) now include the WSGI\n  SCRIPT_NAME at the front of the path if it is not empty (see\n  https://github.com/Pylons/pyramid/issues/135).\n\n- ``pyramid.testing.DummyRequest`` now has a ``script_name`` attribute (the\n  empty string).\n\n- Don't quote ``:@&+$,`` symbols in ``*elements`` passed to\n  ``pyramid.url.route_url`` or ``pyramid.url.resource_url`` (see\n  https://github.com/Pylons/pyramid/pull/141).\n\n- Include SCRIPT_NAME in redirects issued by\n  ``pyramid.view.append_slash_notfound_view`` (see\n  https://github.com/Pylons/pyramid/issues/149).\n\n- Static views registered with ``config.add_static_view`` which also included\n  a ``permission`` keyword argument would not work as expected, because\n  ``add_static_view`` also registered a route factory internally.  Because a\n  route factory was registered internally, the context checked by the Pyramid\n  permission machinery never had an ACL.  ``add_static_view`` no longer\n  registers a route with a factory, so the default root factory will be used.\n\n- ``config.add_static_view`` now passes extra keyword arguments it receives\n  to ``config.add_route`` (calling add_static_view is mostly logically\n  equivalent to adding a view of the type ``pyramid.static.static_view``\n  hooked up to a route with a subpath).  This makes it possible to pass e.g.,\n  ``factory=`` to ``add_static_view`` to protect a particular static view\n  with a custom ACL.\n\n- ``testing.DummyRequest`` used the wrong registry (the global registry) as\n  ``self.registry`` if a dummy request was created *before* ``testing.setUp``\n  was executed (``testing.setUp`` pushes a local registry onto the\n  threadlocal stack). Fixed by implementing ``registry`` as a property for\n  DummyRequest instead of eagerly assigning an attribute.\n  See also https://github.com/Pylons/pyramid/issues/165\n\n- When visiting a URL that represented a static view which resolved to a\n  subdirectory, the ``index.html`` of that subdirectory would not be served\n  properly.  Instead, a redirect to ``/subdir`` would be issued.  This has\n  been fixed, and now visiting a subdirectory that contains an ``index.html``\n  within a static view returns the index.html properly.  See also\n  https://github.com/Pylons/pyramid/issues/67.\n\n- Redirects issued by a static view did not take into account any existing\n  ``SCRIPT_NAME`` (such as one set by a url mapping composite).  Now they do.\n\n- The ``pyramid.wsgi.wsgiapp2`` decorator did not take into account the\n  ``SCRIPT_NAME`` in the origin request.\n\n- The ``pyramid.wsgi.wsgiapp2`` decorator effectively only worked when it\n  decorated a view found via traversal; it ignored the ``PATH_INFO`` that was\n  part of a url-dispatch-matched view.\n\nDeprecations\n------------\n\n- Deprecated all assignments to ``request.response_*`` attributes (for\n  example ``request.response_content_type = 'foo'`` is now deprecated).\n  Assignments and mutations of assignable request attributes that were\n  considered by the framework for response influence are now deprecated:\n  ``response_content_type``, ``response_headerlist``, ``response_status``,\n  ``response_charset``, and ``response_cache_for``.  Instead of assigning\n  these to the request object for later detection by the rendering machinery,\n  users should use the appropriate API of the Response object created by\n  accessing ``request.response`` (e.g. code which does\n  ``request.response_content_type = 'abc'`` should be changed to\n  ``request.response.content_type = 'abc'``).\n\n- Passing view-related parameters to\n  ``pyramid.config.Configurator.add_route`` is now deprecated.  Previously, a\n  view was permitted to be connected to a route using a set of ``view*``\n  parameters passed to the ``add_route`` method of the Configurator.  This\n  was a shorthand which replaced the need to perform a subsequent call to\n  ``add_view``. For example, it was valid (and often recommended) to do::\n\n     config.add_route('home', '/', view='mypackage.views.myview',\n                       view_renderer='some/renderer.pt')\n\n  Passing ``view*`` arguments to ``add_route`` is now deprecated in favor of\n  connecting a view to a predefined route via ``Configurator.add_view`` using\n  the route's ``route_name`` parameter.  As a result, the above example\n  should now be spelled::\n\n     config.add_route('home', '/')\n     config.add_view('mypackage.views.myview', route_name='home')\n                     renderer='some/renderer.pt')\n\n  This deprecation was done to reduce confusion observed in IRC, as well as\n  to (eventually) reduce documentation burden (see also\n  https://github.com/Pylons/pyramid/issues/164).  A deprecation warning is\n  now issued when any view-related parameter is passed to\n  ``Configurator.add_route``.\n\n- Passing an ``environ`` dictionary to the ``__call__`` method of a\n  \"traverser\" (e.g. an object that implements\n  ``pyramid.interfaces.ITraverser`` such as an instance of\n  ``pyramid.traversal.ResourceTreeTraverser``) as its ``request`` argument\n  now causes a deprecation warning to be emitted.  Consumer code should pass a\n  ``request`` object instead.  The fact that passing an environ dict is\n  permitted has been documentation-deprecated since ``repoze.bfg`` 1.1, and\n  this capability will be removed entirely in a future version.\n\n- The following (undocumented, dictionary-like) methods of the\n  ``pyramid.request.Request`` object have been deprecated: ``__contains__``,\n  ``__delitem__``, ``__getitem__``, ``__iter__``, ``__setitem__``, ``get``,\n  ``has_key``, ``items``, ``iteritems``, ``itervalues``, ``keys``, ``pop``,\n  ``popitem``, ``setdefault``, ``update``, and ``values``.  Usage of any of\n  these methods will cause a deprecation warning to be emitted.  These\n  methods were added for internal compatibility in ``repoze.bfg`` 1.1 (code\n  that currently expects a request object expected an environ object in BFG\n  1.0 and before).  In a future version, these methods will be removed\n  entirely.\n\n- Deprecated ``pyramid.view.is_response`` function in favor of (newly-added)\n  ``pyramid.request.Request.is_response`` method.  Determining if an object\n  is truly a valid response object now requires access to the registry, which\n  is only easily available as a request attribute.  The\n  ``pyramid.view.is_response`` function will still work until it is removed,\n  but now may return an incorrect answer under some (very uncommon)\n  circumstances.\n\nBehavior Changes\n----------------\n\n- The default Mako renderer is now configured to escape all HTML in\n  expression tags. This is intended to help prevent XSS attacks caused by\n  rendering unsanitized input from users. To revert this behavior in user's\n  templates, they need to filter the expression through the 'n' filter.\n  For example, ${ myhtml | n }.\n  See https://github.com/Pylons/pyramid/issues/193.\n\n- A custom request factory is now required to return a request object that\n  has a ``response`` attribute (or \"reified\"/lazy property) if they the\n  request is meant to be used in a view that uses a renderer.  This\n  ``response`` attribute should be an instance of the class\n  ``pyramid.response.Response``.\n\n- The JSON and string renderer factories now assign to\n  ``request.response.content_type`` rather than\n  ``request.response_content_type``.\n\n- Each built-in renderer factory now determines whether it should change the\n  content type of the response by comparing the response's content type\n  against the response's default content type; if the content type is the\n  default content type (usually ``text/html``), the renderer changes the\n  content type (to ``application/json`` or ``text/plain`` for JSON and string\n  renderers respectively).\n\n- The ``pyramid.wsgi.wsgiapp2`` now uses a slightly different method of\n  figuring out how to \"fix\" ``SCRIPT_NAME`` and ``PATH_INFO`` for the\n  downstream application.  As a result, those values may differ slightly from\n  the perspective of the downstream application (for example, ``SCRIPT_NAME``\n  will now never possess a trailing slash).\n\n- Previously, ``pyramid.request.Request`` inherited from\n  ``webob.request.Request`` and implemented ``__getattr__``, ``__setattr__``\n  and ``__delattr__`` itself in order to overidde \"adhoc attr\" WebOb behavior\n  where attributes of the request are stored in the environ.  Now,\n  ``pyramid.request.Request`` object inherits from (the more recent)\n  ``webob.request.BaseRequest`` instead of ``webob.request.Request``, which\n  provides the same behavior.  ``pyramid.request.Request`` no longer\n  implements its own ``__getattr__``, ``__setattr__`` or ``__delattr__`` as a\n  result.\n\n- ``pyramid.response.Response`` is now a *subclass* of\n  ``webob.response.Response`` (in order to directly implement the\n  ``pyramid.interfaces.IResponse`` interface).\n\n- The \"exception response\" objects importable from ``pyramid.httpexceptions``\n  (e.g. ``HTTPNotFound``) are no longer just import aliases for classes that\n  actually live in ``webob.exc``.  Instead, we've defined our own exception\n  classes within the module that mirror and emulate the ``webob.exc``\n  exception response objects almost entirely.  See the \"Design Defense\" doc\n  section named \"Pyramid Uses its Own HTTP Exception Classes\" for more\n  information.\n\nBackwards Incompatibilities\n---------------------------\n\n- Pyramid no longer supports Python 2.4.  Python 2.5 or better is required to\n  run Pyramid 1.1+.\n\n- The Pyramid router now, by default, expects response objects returned from\n  view callables to implement the ``pyramid.interfaces.IResponse`` interface.\n  Unlike the Pyramid 1.0 version of this interface, objects which implement\n  IResponse now must define a ``__call__`` method that accepts ``environ``\n  and ``start_response``, and which returns an ``app_iter`` iterable, among\n  other things.  Previously, it was possible to return any object which had\n  the three WebOb ``app_iter``, ``headerlist``, and ``status`` attributes as\n  a response, so this is a backwards incompatibility.  It is possible to get\n  backwards compatibility back by registering an adapter to IResponse from\n  the type of object you're now returning from view callables.  See the\n  section in the Hooks chapter of the documentation entitled \"Changing How\n  Pyramid Treats View Responses\".\n\n- The ``pyramid.interfaces.IResponse`` interface is now much more extensive.\n  Previously it defined only ``app_iter``, ``status`` and ``headerlist``; now\n  it is basically intended to directly mirror the ``webob.Response`` API,\n  which has many methods and attributes.\n\n- The ``pyramid.httpexceptions`` classes named ``HTTPFound``,\n  ``HTTPMultipleChoices``, ``HTTPMovedPermanently``, ``HTTPSeeOther``,\n  ``HTTPUseProxy``, and ``HTTPTemporaryRedirect`` now accept ``location`` as\n  their first positional argument rather than ``detail``.  This means that\n  you can do, e.g. ``return pyramid.httpexceptions.HTTPFound('http://foo')``\n  rather than ``return\n  pyramid.httpexceptions.HTTPFound(location='http//foo')`` (the latter will\n  of course continue to work).\n\nDependencies\n------------\n\n- Pyramid now depends on WebOb >= 1.0.2 as tests depend on the bugfix in that\n  release: \"Fix handling of WSGI environs with missing ``SCRIPT_NAME``\".\n  (Note that in reality, everyone should probably be using 1.0.4 or better\n  though, as WebOb 1.0.2 and 1.0.3 were effectively brownbag releases.)\n\n1.0 (2011-01-30)\n================\n\nDocumentation\n-------------\n\n- Fixed bug in ZODB Wiki tutorial (missing dependency on ``docutils`` in\n  \"models\" step within ``setup.py``).\n\n- Removed API documentation for ``pyramid.testing`` APIs named\n  ``registerDummySecurityPolicy``, ``registerResources``, ``registerModels``,\n  ``registerEventListener``, ``registerTemplateRenderer``,\n  ``registerDummyRenderer``, ``registerView``, ``registerUtility``,\n  ``registerAdapter``, ``registerSubscriber``, ``registerRoute``,\n  and ``registerSettings``.\n\n- Moved \"Using ZODB With ZEO\" and \"Using repoze.catalog Within Pyramid\"\n  tutorials out of core documentation and into the Pyramid Tutorials site\n  (https://docs.pylonsproject.org/projects/pyramid_tutorials/en/latest/).\n\n- Changed \"Cleaning up After a Request\" section in the URL Dispatch chapter\n  to use ``request.add_finished_callback`` instead of jamming an object with\n  a ``__del__`` into the WSGI environment.\n\n- Remove duplication of ``add_route`` API documentation from URL Dispatch\n  narrative chapter.\n\n- Remove duplication of API and narrative documentation in\n  ``pyramid.view.view_config`` API docs by pointing to\n  ``pyramid.config.add_view`` documentation and narrative chapter\n  documentation.\n\n- Removed some API documentation duplicated in narrative portions of\n  documentation \n\n- Removed \"Overall Flow of Authentication\" from SQLAlchemy + URL Dispatch\n  wiki tutorial due to print space concerns (moved to Pyramid Tutorials\n  site).\n\nBug Fixes\n---------\n\n- Deprecated-since-BFG-1.2 APIs from ``pyramid.testing`` now properly emit\n  deprecation warnings.\n\n- Added ``egg:repoze.retry#retry`` middleware to the WSGI pipeline in ZODB\n  templates (retry ZODB conflict errors which occur in normal operations).\n\n- Removed duplicate implementations of ``is_response``.  Two competing\n  implementations existed: one in ``pyramid.config`` and one in\n  ``pyramid.view``.  Now the one defined in ``pyramid.view`` is used\n  internally by ``pyramid.config`` and continues to be advertised as an API.\n\n1.0b3 (2011-01-28)\n==================\n\nBug Fixes\n---------\n\n- Use &copy; instead of copyright symbol in paster templates / tutorial\n  templates for the benefit of folks who cutnpaste and save to a non-UTF8\n  format.\n\n- ``pyramid.view.append_slash_notfound_view`` now preserves GET query\n  parameters across redirects.\n\nDocumentation\n-------------\n\n- Beef up documentation related to ``set_default_permission``: explicitly\n  mention that default permissions also protect exception views.\n\n- Paster templates and tutorials now use spaces instead of tabs in their HTML\n  templates.\n\n1.0b2 (2011-01-24)\n==================\n\nBug Fixes\n---------\n\n- The ``production.ini`` generated by all paster templates now have an\n  effective logging level of WARN, which prevents e.g. SQLAlchemy statement\n  logging and other inappropriate output.\n\n- The ``production.ini`` of the ``pyramid_routesalchemy`` and\n  ``pyramid_alchemy`` paster templates did not have a ``sqlalchemy`` logger\n  section, preventing ``paster serve production.ini`` from working.\n\n- The ``pyramid_routesalchemy`` and ``pyramid_alchemy`` paster templates used\n  the ``{{package}}`` variable in a place where it should have used the\n  ``{{project}}`` variable, causing applications created with uppercase\n  letters e.g. ``paster create -t pyramid_routesalchemy Dibbus`` to fail to\n  start when ``paster serve development.ini`` was used against the result.\n  See https://github.com/Pylons/pyramid/issues/107\n\n- The ``render_view`` method of ``pyramid.renderers.RendererHelper`` passed\n  an incorrect value into the renderer for ``renderer_info``.  It now passes\n  an instance of ``RendererHelper`` instead of a dictionary, which is\n  consistent with other usages.  See\n  https://github.com/Pylons/pyramid/issues/106\n\n- A bug existed in the ``pyramid.authentication.AuthTktCookieHelper`` which\n  would break any usage of an AuthTktAuthenticationPolicy when one was\n  configured to reissue its tokens (``reissue_time`` < ``timeout`` /\n  ``max_age``). Symptom: ``ValueError: ('Invalid token %r', '')``.  See\n  https://github.com/Pylons/pyramid/issues/108.\n\n1.0b1 (2011-01-21)\n==================\n\nFeatures\n--------\n\n- The AuthTktAuthenticationPolicy now accepts a ``tokens`` parameter via\n  ``pyramid.security.remember``.  The value must be a sequence of strings.\n  Tokens are placed into the auth_tkt \"tokens\" field and returned in the\n  auth_tkt cookie.\n\n- Add ``wild_domain`` argument to AuthTktAuthenticationPolicy, which defaults\n  to ``True``.  If it is set to ``False``, the feature of the policy which\n  sets a cookie with a wildcard domain will be turned off.\n\n- Add a ``MANIFEST.in`` file to each paster template. See\n  https://github.com/Pylons/pyramid/issues/95\n\nBug Fixes\n---------\n\n- ``testing.setUp`` now adds a ``settings`` attribute to the registry (both\n  when it's passed a registry without any settings and when it creates one).\n\n- The ``testing.setUp`` function now takes a ``settings`` argument, which\n  should be a dictionary.  Its values will subsequently be available on the\n  returned ``config`` object as ``config.registry.settings``.\n\nDocumentation\n-------------\n\n- Added \"What's New in Pyramid 1.0\" chapter to HTML rendering of\n  documentation.\n\n- Merged caseman-master narrative editing branch, many wording fixes and\n  extensions.\n\n- Fix deprecated example showing ``chameleon_zpt`` API call in testing\n  narrative chapter.\n\n- Added \"Adding Methods to the Configurator via ``add_directive``\" section to\n  Advanced Configuration narrative chapter.\n\n- Add docs for ``add_finished_callback``, ``add_response_callback``,\n  ``route_path``, ``route_url``, and ``static_url`` methods to\n  ``pyramid.request.Request`` API docs.\n\n- Add (minimal) documentation about using I18N within Mako templates to\n  \"Internationalization and Localization\" narrative chapter.\n\n- Move content of \"Forms\" chapter back to \"Views\" chapter; I can't think of a\n  better place to put it.\n\n- Slightly improved interface docs for ``IAuthorizationPolicy``.\n\n- Minimally explain usage of custom regular expressions in URL dispatch\n  replacement markers within URL Dispatch chapter.\n\nDeprecations\n-------------\n\n- Using the ``pyramid.view.bfg_view`` alias for ``pyramid.view.view_config``\n  (a backwards compatibility shim) now issues a deprecation warning.\n\nBackwards Incompatibilities\n---------------------------\n\n- Using ``testing.setUp`` now registers an ISettings utility as a side\n  effect.  Some test code which queries for this utility after\n  ``testing.setUp`` via queryAdapter will expect a return value of ``None``.\n  This code will need to be changed.\n\n- When a ``pyramid.exceptions.Forbidden`` error is raised, its status code\n  now ``403 Forbidden``.  It was previously ``401 Unauthorized``, for\n  backwards compatibility purposes with ``repoze.bfg``.  This change will\n  cause problems for users of Pyramid with ``repoze.who``, which intercepts\n  ``401 Unauthorized`` by default, but allows ``403 Forbidden`` to pass\n  through.  Those deployments will need to configure ``repoze.who`` to also\n  react to ``403 Forbidden``.\n\n- The default value for the ``cookie_on_exception`` parameter to\n  ``pyramid.session.UnencryptedCookieSessionFactory`` is now ``True``.  This\n  means that when view code causes an exception to be raised, and the session\n  has been mutated, a cookie will be sent back in the response.  Previously\n  its default value was ``False``.\n\nPaster Templates\n----------------\n\n- The ``pyramid_zodb``, ``pyramid_routesalchemy`` and ``pyramid_alchemy``\n  paster templates now use a default \"commit veto\" hook when configuring the\n  ``repoze.tm2`` transaction manager in ``development.ini``.  This prevents a\n  transaction from being committed when the response status code is within\n  the 400 or 500 ranges.  See also\n  https://repozetm2.readthedocs.io/en/latest/index.html#using-a-commit-veto.\n\n1.0a10 (2011-01-18)\n===================\n\nBug Fixes\n---------\n\n- URL dispatch now properly handles a ``.*`` or ``*`` appearing in a regex\n  match when used inside brackets.  Resolves issue #90.\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``add_handler`` method of a Configurator has been removed from the\n  Pyramid core.  Handlers are now a feature of the ``pyramid_handlers``\n  package, which can be downloaded from PyPI.  Documentation for the package\n  should be available via\n  https://docs.pylonsproject.org/projects/pyramid_handlers/en/latest/,\n  which describes how\n  to add a configuration statement to your ``main`` block to reobtain this\n  method.  You will also need to add an ``install_requires`` dependency upon\n  ``pyramid_handlers`` to your ``setup.py`` file.\n\n- The ``load_zcml`` method of a Configurator has been removed from the\n  Pyramid core.  Loading ZCML is now a feature of the ``pyramid_zcml``\n  package, which can be downloaded from PyPI.  Documentation for the package\n  should be available via\n  https://docs.pylonsproject.org/projects/pyramid_zcml/en/latest/,\n  which describes how\n  to add a configuration statement to your ``main`` block to reobtain this\n  method.  You will also need to add an ``install_requires`` dependency upon\n  ``pyramid_zcml`` to your ``setup.py`` file.\n\n- The ``pyramid.includes`` subpackage has been removed.  ZCML files which use\n  include the package ``pyramid.includes`` (e.g. ``<include\n  package=\"pyramid.includes\"/>``) now must include the ``pyramid_zcml``\n  package instead (e.g. ``<include package=\"pyramid_zcml\"/>``).\n\n- The ``pyramid.view.action`` decorator has been removed from the Pyramid\n  core.  Handlers are now a feature of the ``pyramid_handlers`` package.  It\n  should now be imported from ``pyramid_handlers`` e.g. ``from\n  pyramid_handlers import action``.\n\n- The ``handler`` ZCML directive has been removed.  It is now a feature of\n  the ``pyramid_handlers`` package.\n\n- The ``pylons_minimal``, ``pylons_basic`` and ``pylons_sqla`` paster\n  templates were removed.  Use ``pyramid_sqla`` (available from PyPI) as a\n  generic replacement for Pylons-esque development.\n\n- The ``make_app`` function has been removed from the ``pyramid.router``\n  module.  It continues life within the ``pyramid_zcml`` package.  This\n  leaves the ``pyramid.router`` module without any API functions.\n\n- The ``configure_zcml`` setting within the deployment settings (within\n  ``**settings`` passed to a Pyramid ``main`` function) has ceased to have any\n  meaning.\n\nFeatures\n--------\n\n- ``pyramid.testing.setUp`` and ``pyramid.testing.tearDown`` have been\n  undeprecated.  They are now the canonical setup and teardown APIs for test\n  configuration, replacing \"direct\" creation of a Configurator.  This is a\n  change designed to provide a facade that will protect against any future\n  Configurator deprecations.\n\n- Add ``charset`` attribute to ``pyramid.testing.DummyRequest``\n  (unconditionally ``UTF-8``).\n\n- Add ``add_directive`` method to configurator, which allows framework\n  extenders to add methods to the configurator (ala ZCML directives).\n\n- When ``Configurator.include`` is passed a *module* as an argument, it\n  defaults to attempting to find and use a callable named ``includeme``\n  within that module.  This makes it possible to use\n  ``config.include('some.module')`` rather than\n  ``config.include('some.module.somefunc')`` as long as the include function\n  within ``some.module`` is named ``includeme``.\n\n- The ``bfg2pyramid`` script now converts ZCML include tags that have\n  ``repoze.bfg.includes`` as a package attribute to the value\n  ``pyramid_zcml``.  For example, ``<include package=\"repoze.bfg.includes\">``\n  will be converted to ``<include package=\"pyramid_zcml\">``.\n\nPaster Templates\n----------------\n\n- All paster templates now use ``pyramid.testing.setUp`` and\n  ``pyramid.testing.tearDown`` rather than creating a Configurator \"by hand\"\n  within their ``tests.py`` module, as per decision in features above.\n\n- The ``starter_zcml`` paster template has been moved to the ``pyramid_zcml``\n  package.\n\nDocumentation\n-------------\n\n- The wiki and wiki2 tutorials now use ``pyramid.testing.setUp`` and\n  ``pyramid.testing.tearDown`` rather than creating a Configurator \"by hand\",\n  as per decision in features above.\n\n- The \"Testing\" narrative chapter now explains ``pyramid.testing.setUp`` and\n  ``pyramid.testing.tearDown`` instead of Configurator creation and\n  ``Configurator.begin()`` and ``Configurator.end()``.\n\n- Document the ``request.override_renderer`` attribute within the narrative\n  \"Renderers\" chapter in a section named \"Overriding A Renderer at Runtime\".\n\n- The \"Declarative Configuration\" narrative chapter has been removed (it was\n  moved to the ``pyramid_zcml`` package).\n\n- Most references to ZCML in narrative chapters have been removed or\n  redirected to ``pyramid_zcml`` locations.\n\nDeprecations\n------------\n\n- Deprecation warnings related to import of the following API functions were\n  added: ``pyramid.traversal.find_model``, ``pyramid.traversal.model_path``,\n  ``pyramid.traversal.model_path_tuple``, ``pyramid.url.model_url``.  The\n  instructions emitted by the deprecation warnings instruct the developer to\n  change these method spellings to their ``resource`` equivalents.  This is a\n  consequence of the mass concept rename of \"model\" to \"resource\" performed\n  in 1.0a7.\n\n1.0a9 (2011-01-08)\n==================\n\nBug Fixes\n---------\n\n- The ``proutes`` command tried too hard to resolve the view for printing,\n  resulting in exceptions when an exceptional root factory was encountered.\n  Instead of trying to resolve the view, if it cannot, it will now just print\n  ``<unknown>``.\n\n- The `self` argument was included in new methods of the ``ISession`` interface\n  signature, causing ``pyramid_beaker`` tests to fail.\n\n- Readd ``pyramid.traversal.model_path_tuple`` as an alias for\n  ``pyramid.traversal.resource_path_tuple`` for backwards compatibility.\n\nFeatures\n--------\n\n- Add a new API ``pyramid.url.current_route_url``, which computes a URL based\n  on the \"current\" route (if any) and its matchdict values.\n\n- ``config.add_view`` now accepts a ``decorator`` keyword argument, a callable\n  which will decorate the view callable before it is added to the registry.\n\n- If a handler class provides an ``__action_decorator__`` attribute (usually\n  a classmethod or staticmethod), use that as the decorator for each view\n  registration for that handler.\n\n- The ``pyramid.interfaces.IAuthenticationPolicy`` interface now specifies an\n  ``unauthenticated_userid`` method.  This method supports an important\n  optimization required by people who are using persistent storages which do\n  not support object caching and whom want to create a \"user object\" as a\n  request attribute.\n\n- A new API has been added to the ``pyramid.security`` module named\n  ``unauthenticated_userid``.  This API function calls the\n  ``unauthenticated_userid`` method of the effective security policy.\n\n- An ``unauthenticated_userid`` method has been added to the dummy\n  authentication policy returned by\n  ``pyramid.config.Configurator.testing_securitypolicy``.  It returns the\n  same thing as that the dummy authentication policy's\n  ``authenticated_userid`` method.\n\n- The class ``pyramid.authentication.AuthTktCookieHelper`` is now an API.\n  This class can be used by third-party authentication policy developers to\n  help in the mechanics of authentication cookie-setting.\n\n- New constructor argument to Configurator: ``default_view_mapper``.  Useful\n  to create systems that have alternate view calling conventions.  A view\n  mapper allows objects that are meant to be used as view callables to have\n  an arbitrary argument list and an arbitrary result.  The object passed as\n  ``default_view_mapper`` should implement the\n  ``pyramid.interfaces.IViewMapperFactory`` interface.\n\n- add a ``set_view_mapper`` API to Configurator.  Has\n  the same result as passing ``default_view_mapper`` to the Configurator\n  constructor.\n\n- ``config.add_view`` now accepts a ``mapper`` keyword argument, which should\n  either be ``None``, a string representing a Python dotted name, or an\n  object which is an ``IViewMapperFactory``.  This feature is not useful for\n  \"civilians\", only for extension writers.\n\n- Allow static renderer provided during view registration to be overridden at\n  request time via a request attribute named ``override_renderer``, which\n  should be the name of a previously registered renderer.  Useful to provide\n  \"omnipresent\" RPC using existing rendered views.\n\n- Instances of ``pyramid.testing.DummyRequest`` now have a ``session``\n  object, which is mostly a dictionary, but also implements the other session\n  API methods for flash and CSRF.\n\nBackwards Incompatibilities\n---------------------------\n\n- Since the ``pyramid.interfaces.IAuthenticationPolicy`` interface now\n  specifies that a policy implementation must implement an\n  ``unauthenticated_userid`` method, all third-party custom authentication\n  policies now must implement this method.  It, however, will only be called\n  when the global function named ``pyramid.security.unauthenticated_userid``\n  is invoked, so if you're not invoking that, you will not notice any issues.\n\n- ``pyramid.interfaces.ISession.get_csrf_token`` now mandates that an\n  implementation should return a *new* token if one doesn't already exist in\n  the session (previously it would return None).  The internal sessioning\n  implementation has been changed.\n\nDocumentation\n-------------\n\n- The (weak) \"Converting a CMF Application to Pyramid\" tutorial has been\n  removed from the tutorials section.  It was moved to the\n  ``pyramid_tutorials`` Github repository.\n\n- The \"Resource Location and View Lookup\" chapter has been replaced with a\n  variant of Rob Miller's \"Much Ado About Traversal\" (originally published at\n  https://web.archive.org/web/20150321110754/http://blog.nonsequitarian.org/2010/much-ado-about-traversal/).\n\n- Many minor wording tweaks and refactorings (merged Casey Duncan's docs\n  fork, in which he is working on general editing).\n\n- Added (weak) description of new view mapper feature to Hooks narrative\n  chapter.\n\n- Split views chapter into 2: View Callables and View Configuration.\n\n- Reorder Renderers and Templates chapters after View Callables but before\n  View Configuration.\n\n- Merge Session Objects, Cross-Site Request Forgery, and Flash Messaging\n  chapter into a single Sessions chapter.\n\n- The Wiki and Wiki2 tutorials now have much nicer CSS and graphics.\n\nInternals\n---------\n\n- The \"view derivation\" code is now factored into a set of classes rather\n  than a large number of standalone functions (a side effect of the\n  view mapper refactoring).\n\n- The ``pyramid.renderer.RendererHelper`` class has grown a ``render_view``\n  method, which is used by the default view mapper (a side effect of the\n  view mapper refactoring).\n\n- The object passed as ``renderer`` to the \"view deriver\" is now an instance\n  of ``pyramid.renderers.RendererHelper`` rather than a dictionary (a side\n  effect of view mapper refactoring).\n\n- The class used as the \"page template\" in ``pyramid.chameleon_text`` was\n  removed, in preference to using a Chameleon-inbuilt version.\n\n- A view callable wrapper registered in the registry now contains an\n  ``__original_view__`` attribute which references the original view callable\n  (or class).\n\n- The (non-API) method of all internal authentication policy implementations\n  previously named ``_get_userid`` is now named ``unauthenticated_userid``,\n  promoted to an API method.  If you were overriding this method, you'll now\n  need to override it as ``unauthenticated_userid`` instead.\n\n- Remove (non-API) function of config.py named _map_view.\n\n1.0a8 (2010-12-27)\n==================\n\nBug Fixes\n---------\n\n- The name ``registry`` was not available in the ``paster pshell``\n  environment under IPython.\n\nFeatures\n--------\n\n- If a resource implements a ``__resource_url__`` method, it will be called\n  as the result of invoking the ``pyramid.url.resource_url`` function to\n  generate a URL, overriding the default logic.  See the new \"Generating The\n  URL Of A Resource\" section within the Resources narrative chapter.\n\n- Added flash messaging, as described in the \"Flash Messaging\" narrative\n  documentation chapter.\n\n- Added CSRF token generation, as described in the narrative chapter entitled\n  \"Preventing Cross-Site Request Forgery Attacks\".\n\n- Prevent misunderstanding of how the ``view`` and ``view_permission``\n  arguments to add_route work by raising an exception during configuration if\n  view-related arguments exist but no ``view`` argument is passed.\n\n- Add ``paster proute`` command which displays a summary of the routing\n  table.  See the narrative documentation section within the \"URL Dispatch\"\n  chapter entitled \"Displaying All Application Routes\".\n\nPaster Templates\n----------------\n\n- The ``pyramid_zodb`` Paster template no longer employs ZCML.  Instead, it\n  is based on scanning.\n\nDocumentation\n-------------\n\n- Added \"Generating The URL Of A Resource\" section to the Resources narrative\n  chapter (includes information about overriding URL generation using\n  ``__resource_url__``).\n\n- Added \"Generating the Path To a Resource\" section to the Resources\n  narrative chapter.\n\n- Added \"Finding a Resource by Path\" section to the Resources narrative\n  chapter.\n\n- Added \"Obtaining the Lineage of a Resource\" to the Resources narrative\n  chapter.\n\n- Added \"Determining if a Resource is In The Lineage of Another Resource\" to\n  Resources narrative chapter.\n\n- Added \"Finding the Root Resource\" to Resources narrative chapter.\n\n- Added \"Finding a Resource With a Class or Interface in Lineage\" to\n  Resources narrative chapter.\n\n- Added a \"Flash Messaging\" narrative documentation chapter.\n\n- Added a narrative chapter entitled \"Preventing Cross-Site Request Forgery\n  Attacks\".\n\n- Changed the \"ZODB + Traversal Wiki Tutorial\" based on changes to\n  ``pyramid_zodb`` Paster template.\n\n- Added \"Advanced Configuration\" narrative chapter which documents how to\n  deal with configuration conflicts, two-phase configuration, ``include`` and\n  ``commit``.\n\n- Fix API documentation rendering for ``pyramid.view.static``\n\n- Add \"Pyramid Provides More Than One Way to Do It\" to Design Defense\n  documentation.\n\n- Changed \"Static Assets\" narrative chapter: clarify that ``name`` represents\n  a prefix unless it's a URL, added an example of a root-relative static view\n  fallback for URL dispatch, added an example of creating a simple view that\n  returns the body of a file.\n\n- Move ZCML usage in Hooks chapter to Declarative Configuration chapter.\n\n- Merge \"Static Assets\" chapter into the \"Assets\" chapter.\n\n- Added narrative documentation section within the \"URL Dispatch\" chapter\n  entitled \"Displaying All Application Routes\" (for ``paster proutes``\n  command).\n\n1.0a7 (2010-12-20)\n==================\n\nTerminology Changes\n-------------------\n\n- The Pyramid concept previously known as \"model\" is now known as \"resource\".\n  As a result:\n\n  - The following API changes have been made::\n\n      pyramid.url.model_url -> \n                        pyramid.url.resource_url\n\n      pyramid.traversal.find_model -> \n                        pyramid.url.find_resource\n\n      pyramid.traversal.model_path ->\n                        pyramid.traversal.resource_path\n\n      pyramid.traversal.model_path_tuple ->\n                        pyramid.traversal.resource_path_tuple\n\n      pyramid.traversal.ModelGraphTraverser -> \n                        pyramid.traversal.ResourceTreeTraverser\n\n      pyramid.config.Configurator.testing_models ->\n                        pyramid.config.Configurator.testing_resources\n\n      pyramid.testing.registerModels ->\n                        pyramid.testing.registerResources\n\n      pyramid.testing.DummyModel ->\n                        pyramid.testing.DummyResource\n\n   - All documentation which previously referred to \"model\" now refers to\n     \"resource\".\n\n   - The ``starter`` and ``starter_zcml`` paster templates now have a\n     ``resources.py`` module instead of a ``models.py`` module.\n\n  - Positional argument names of various APIs have been changed from\n    ``model`` to ``resource``.\n\n  Backwards compatibility shims have been left in place in all cases.  They\n  will continue to work \"forever\".\n\n- The Pyramid concept previously known as \"resource\" is now known as \"asset\".\n  As a result:\n\n  - The (non-API) module previously known as ``pyramid.resource`` is now\n    known as ``pyramid.asset``.\n\n  - All docs that previously referred to \"resource specification\" now refer\n    to \"asset specification\".\n\n  - The following API changes were made::\n\n      pyramid.config.Configurator.absolute_resource_spec ->\n                        pyramid.config.Configurator.absolute_asset_spec\n\n      pyramid.config.Configurator.override_resource ->\n                        pyramid.config.Configurator.override_asset\n\n  - The ZCML directive previously known as ``resource`` is now known as\n    ``asset``.\n\n  - The setting previously known as ``BFG_RELOAD_RESOURCES`` (envvar) or\n    ``reload_resources`` (config file) is now known, respectively, as\n    ``PYRAMID_RELOAD_ASSETS`` and ``reload_assets``.\n\n  Backwards compatibility shims have been left in place in all cases.  They\n  will continue to work \"forever\".\n\nBug Fixes\n---------\n\n- Make it possible to successfully run all tests via ``nosetests`` command\n  directly (rather than indirectly via ``python setup.py nosetests``).\n\n- When a configuration conflict is encountered during scanning, the conflict\n  exception now shows the decorator information that caused the conflict.\n\nFeatures\n--------\n\n- Added ``debug_routematch`` configuration setting that logs matched routes\n  (including the matchdict and predicates).\n\n- The name ``registry`` is now available in a ``pshell`` environment by\n  default.  It is the application registry object.\n\nEnvironment\n-----------\n\n- All environment variables which used to be prefixed with ``BFG_`` are now\n  prefixed with ``PYRAMID_`` (e.g. ``BFG_DEBUG_NOTFOUND`` is now\n  ``PYRAMID_DEBUG_NOTFOUND``)\n\nDocumentation\n-------------\n\n- Added \"Debugging Route Matching\" section to the urldispatch narrative\n  documentation chapter.\n\n- Added reference to ``PYRAMID_DEBUG_ROUTEMATCH`` envvar and ``debug_routematch``\n  config file setting to the Environment narrative docs chapter.\n\n- Changed \"Project\" chapter slightly to expand on use of ``paster pshell``.\n\n- Direct Jython users to Mako rather than Jinja2 in \"Install\" narrative\n  chapter.\n\n- Many changes to support terminological renaming of \"model\" to \"resource\"\n  and \"resource\" to \"asset\".\n\n- Added an example of ``WebTest`` functional testing to the testing narrative\n  chapter.\n\n- Rearranged chapter ordering by popular demand (URL dispatch first, then\n  traversal).  Put hybrid chapter after views chapter.\n\n- Split off \"Renderers\" as its own chapter from \"Views\" chapter in narrative\n  documentation.\n\nPaster Templates\n----------------\n\n- Added ``debug_routematch = false`` to all paster templates.\n\nDependencies\n------------\n\n- Depend on Venusian >= 0.5 (for scanning conflict exception decoration).\n\n1.0a6 (2010-12-15)\n==================\n\nBug Fixes\n---------\n\n- 1.0a5 introduced a bug when ``pyramid.config.Configurator.scan`` was used\n  without a ``package`` argument (e.g. ``config.scan()`` as opposed to\n  ``config.scan('packagename')``.  The symptoms were: lots of deprecation\n  warnings printed to the console about imports of deprecated Pyramid\n  functions and classes and non-detection of view callables decorated with\n  ``view_config`` decorators.  This has been fixed.\n\n- Tests now pass on Windows (no bugs found, but a few tests in the test suite\n  assumed UNIX path segments in filenames).\n\nDocumentation\n-------------\n\n- If you followed it to-the-letter, the ZODB+Traversal Wiki tutorial would\n  instruct you to run a test which would fail because the view callable\n  generated by the ``pyramid_zodb`` tutorial used a one-arg view callable,\n  but the test in the sample code used a two-arg call.\n\n- Updated ZODB+Traversal tutorial setup.py of all steps to match what's\n  generated by ``pyramid_zodb``.\n\n- Fix reference to ``repoze.bfg.traversalwrapper`` in \"Models\" chapter (point\n  at ``pyramid_traversalwrapper`` instead).\n\n1.0a5 (2010-12-14)\n==================\n\nFeatures\n--------\n\n- Add a ``handler`` ZCML directive.  This directive does the same thing as\n  ``pyramid.configuration.add_handler``.\n\n- A new module named ``pyramid.config`` was added.  It subsumes the duties of\n  the older ``pyramid.configuration`` module.\n\n- The new ``pyramid.config.Configurator` class has API methods that the older\n  ``pyramid.configuration.Configurator`` class did not: ``with_context`` (a\n  classmethod), ``include``, ``action``, and ``commit``.  These methods exist\n  for imperative application extensibility purposes.\n\n- The ``pyramid.testing.setUp`` function now accepts an ``autocommit``\n  keyword argument, which defaults to ``True``.  If it is passed ``False``,\n  the Config object returned by ``setUp`` will be a non-autocommitting Config\n  object.\n\n- Add logging configuration to all paster templates.\n\n- ``pyramid_alchemy``, ``pyramid_routesalchemy``, and ``pylons_sqla`` paster\n  templates now use idiomatic SQLAlchemy configuration in their respective\n  ``.ini`` files and Python code.\n\n- ``pyramid.testing.DummyRequest`` now has a class variable,\n  ``query_string``, which defaults to the empty string.\n\n- Add support for json on GAE by catching NotImplementedError and importing\n  simplejson from django.utils.\n\n- The Mako renderer now accepts a resource specification for\n  ``mako.module_directory``.\n\n- New boolean Mako settings variable ``mako.strict_undefined``.  See `Mako\n  Context Variables\n  <https://docs.makotemplates.org/en/latest/runtime.html#context-variables>`_ for\n  its meaning.\n\nDependencies\n------------\n\n- Depend on Mako 0.3.6+ (we now require the ``strict_undefined`` feature).\n\nBug Fixes\n---------\n\n- When creating a Configurator from within a ``paster pshell`` session, you\n  were required to pass a ``package`` argument although ``package`` is not\n  actually required.  If you didn't pass ``package``, you would receive an\n  error something like ``KeyError: '__name__'`` emanating from the\n  ``pyramid.path.caller_module`` function.  This has now been fixed.\n\n- The ``pyramid_routesalchemy`` paster template's unit tests failed\n  (``AssertionError: 'SomeProject' != 'someproject'``).  This is fixed.\n\n- Make default renderer work (renderer factory registered with no name, which\n  is active for every view unless the view names a specific renderer).\n\n- The Mako renderer did not properly turn the ``mako.imports``,\n  ``mako.default_filters``, and ``mako.imports`` settings into lists.\n\n- The Mako renderer did not properly convert the ``mako.error_handler``\n  setting from a dotted name to a callable.\n\nDocumentation\n-------------\n\n- Merged many wording, readability, and correctness changes to narrative\n  documentation chapters from https://github.com/caseman/pyramid (up to and\n  including \"Models\" narrative chapter).\n\n- \"Sample Applications\" section of docs changed to note existence of Cluegun,\n  Shootout and Virginia sample applications, ported from their repoze.bfg\n  origin packages.\n\n- SQLAlchemy+URLDispatch tutorial updated to integrate changes to\n  ``pyramid_routesalchemy`` template.\n\n- Add ``pyramid.interfaces.ITemplateRenderer`` interface to Interfaces API\n  chapter (has ``implementation()`` method, required to be used when getting\n  at Chameleon macros).\n\n- Add a \"Modifying Package Structure\" section to the project narrative\n  documentation chapter (explain turning a module into a package).\n\n- Documentation was added for the new ``handler`` ZCML directive in the ZCML\n  section.\n\nDeprecations\n------------\n\n- ``pyramid.configuration.Configurator`` is now deprecated.  Use\n  ``pyramid.config.Configurator``, passing its constructor\n  ``autocommit=True`` instead.  The ``pyramid.configuration.Configurator``\n  alias will live for a long time, as every application uses it, but its\n  import now issues a deprecation warning.  The\n  ``pyramid.config.Configurator`` class has the same API as\n  ``pyramid.configuration.Configurator`` class, which it means to replace,\n  except by default it is a *non-autocommitting* configurator. The\n  now-deprecated ``pyramid.configuration.Configurator`` will autocommit every\n  time a configuration method is called.\n\n  The ``pyramid.configuration`` module remains, but it is deprecated.  Use\n  ``pyramid.config`` instead.\n\n1.0a4 (2010-11-21)\n==================\n\nFeatures\n--------\n\n- URL Dispatch now allows for replacement markers to be located anywhere\n  in the pattern, instead of immediately following a ``/``.\n\n- URL Dispatch now uses the form ``{marker}`` to denote a replace marker in\n  the route pattern instead of ``:marker``. The old colon-style marker syntax\n  is still accepted for backwards compatibility. The new format allows a\n  regular expression for that marker location to be used instead of the\n  default ``[^/]+``, for example ``{marker:\\d+}`` is now valid to require the\n  marker to be digits.\n\n- Add a ``pyramid.url.route_path`` API, allowing folks to generate relative\n  URLs.  Calling ``route_path`` is the same as calling\n  ``pyramid.url.route_url`` with the argument ``_app_url`` equal to the empty\n  string.\n\n- Add a ``pyramid.request.Request.route_path`` API.  This is a convenience\n  method of the request which calls ``pyramid.url.route_url``.\n\n- Make test suite pass on Jython (requires PasteScript trunk, presumably to\n  be 1.7.4).\n\n- Make test suite pass on PyPy (Chameleon doesn't work).\n\n- Surrounding application configuration with ``config.begin()`` and\n  ``config.end()`` is no longer necessary.  All paster templates have been\n  changed to no longer call these functions.\n\n- Fix configurator to not convert ``ImportError`` to ``ConfigurationError``\n  if the import that failed was unrelated to the import requested via a\n  dotted name when resolving dotted names (such as view dotted names).\n\nDocumentation\n-------------\n\n- SQLAlchemy+URLDispatch and ZODB+Traversal tutorials have been updated to\n  not call ``config.begin()`` or ``config.end()``.\n\nBug Fixes\n---------\n\n- Add deprecation warnings to import of ``pyramid.chameleon_text`` and\n  ``pyramid.chameleon_zpt`` of ``get_renderer``, ``get_template``,\n  ``render_template``, and ``render_template_to_response``.\n\n- Add deprecation warning for import of ``pyramid.zcml.zcml_configure`` and\n  ``pyramid.zcml.file_configure``.\n\n- The ``pyramid_alchemy`` paster template had a typo, preventing an import\n  from working.\n\n- Fix apparent failures when calling ``pyramid.traversal.find_model(root,\n  path)`` or ``pyramid.traversal.traverse(path)`` when ``path`` is\n  (erroneously) a Unicode object. The user is meant to pass these APIs a\n  string object, never a Unicode object.  In practice, however, users indeed\n  pass Unicode.  Because the string that is passed must be ASCII encodeable,\n  now, if they pass a Unicode object, its data is eagerly converted to an\n  ASCII string rather than being passed along to downstream code as a\n  convenience to the user and to prevent puzzling second-order failures from\n  cropping up (all failures will occur within ``pyramid.traversal.traverse``\n  rather than later down the line as the result of calling e.g.\n  ``traversal_path``).\n\nBackwards Incompatibilities\n---------------------------\n\n- The ``pyramid.testing.zcml_configure`` API has been removed.  It had been\n  advertised as removed since repoze.bfg 1.2a1, but hadn't actually been.\n\nDeprecations\n------------\n\n- The ``pyramid.settings.get_settings`` API is now deprecated.  Use\n  ``pyramid.threadlocals.get_current_registry().settings`` instead or use the\n  ``settings`` attribute of the registry available from the request\n  (``request.registry.settings``).\n\nDocumentation\n-------------\n\n- Removed ``zodbsessions`` tutorial chapter.  It's still useful, but we now\n  have a SessionFactory abstraction which competes with it, and maintaining\n  documentation on both ways to do it is a distraction.\n\nInternal\n--------\n\n- Replace Twill with WebTest in internal integration tests (avoid deprecation\n  warnings generated by Twill).\n\n1.0a3 (2010-11-16)\n==================\n\nFeatures\n--------\n\n- Added Mako TemplateLookup settings for ``mako.error_handler``,\n  ``mako.default_filters``, and ``mako.imports``.\n\n- Normalized all paster templates: each now uses the name ``main`` to\n  represent the function that returns a WSGI application, each now uses\n  WebError, each now has roughly the same shape of development.ini style.\n\n- Added class vars ``matchdict`` and ``matched_route`` to\n  ``pyramid.request.Request``.  Each is set to ``None``.\n\n- New API method: ``pyramid.settings.asbool``.\n\n- New API methods for ``pyramid.request.Request``: ``model_url``,\n  ``route_url``, and ``static_url``.  These are simple passthroughs for their\n  respective functions in ``pyramid.url``.\n\n- The ``settings`` object which used to be available only when\n  ``request.settings.get_settings`` was called is now available as\n  ``registry.settings`` (e.g. ``request.registry.settings`` in view code).\n\nBug Fixes\n---------\n\n- The pylons_* paster templates erroneously used the ``{squiggly}`` routing\n  syntax as the pattern supplied to ``add_route``.  This style of routing is\n  not supported.  They were replaced with ``:colon`` style route patterns.\n\n- The pylons_* paster template used the same string\n  (``your_app_secret_string``) for the ``session.secret`` setting in the\n  generated ``development.ini``.  This was a security risk if left unchanged\n  in a project that used one of the templates to produce production\n  applications.  It now uses a randomly generated string.\n\nDocumentation\n-------------\n\n- ZODB+traversal wiki (``wiki``) tutorial updated due to changes to\n  ``pyramid_zodb`` paster template.\n\n- SQLAlchemy+urldispach wiki (``wiki2``) tutorial updated due to changes to\n  ``pyramid_routesalchemy`` paster template.\n\n- Documented the ``matchdict`` and ``matched_route`` attributes of the\n  request object in the Request API documentation.\n\nDeprecations\n------------\n\n- Obtaining the ``settings`` object via\n  ``registry.{get|query}Utility(ISettings)`` is now deprecated.  Instead,\n  obtain the ``settings`` object via the ``registry.settings`` attribute.  A\n  backwards compatibility shim was added to the registry object to register\n  the settings object as an ISettings utility when ``setattr(registry,\n  'settings', foo)`` is called, but it will be removed in a later release.\n\n- Obtaining the ``settings`` object via ``pyramid.settings.get_settings`` is\n  now deprecated.  Obtain it as the ``settings`` attribute of the registry\n  now (obtain the registry via ``pyramid.threadlocal.get_registry`` or as\n  ``request.registry``).\n\nBehavior Differences\n--------------------\n\n- Internal: ZCML directives no longer call get_current_registry() if there's\n  a ``registry`` attribute on the ZCML context (kill off use of\n  threadlocals).\n\n- Internal: Chameleon template renderers now accept two arguments: ``path``\n  and ``lookup``.  ``Lookup`` will be an instance of a lookup class which\n  supplies (late-bound) arguments for debug, reload, and translate.  Any\n  third-party renderers which use (the non-API) function\n  ``pyramid.renderers.template_renderer_factory`` will need to adjust their\n  implementations to obey the new callback argument list.  This change was to\n  kill off inappropriate use of threadlocals.\n\n1.0a2 (2010-11-09)\n==================\n\nDocumentation\n-------------\n\n- All references to events by interface\n  (e.g. ``pyramid.interfaces.INewRequest``) have been changed to reference\n  their concrete classes (e.g. ``pyramid.events.NewRequest``) in\n  documentation about making subscriptions.\n\n- All references to Pyramid-the-application were changed from mod-`pyramid`\n  to app-`Pyramid`.  A custom role setting was added to ``docs/conf.py`` to\n  allow for this.  (internal)\n\n1.0a1 (2010-11-05)\n==================\n\nFeatures (delta from BFG 1.3)\n-------------------------------\n\n- Mako templating renderer supports resource specification format for\n  template lookups and within Mako templates. Absolute filenames must\n  be used in Pyramid to avoid this lookup process.\n\n- Add ``pyramid.httpexceptions`` module, which is a facade for the\n  ``webob.exc`` module.\n\n- Direct built-in support for the Mako templating language.\n\n- A new configurator method exists: ``add_handler``.  This method adds\n  a Pylons-style \"view handler\" (such a thing used to be called a\n  \"controller\" in Pylons 1.0).\n\n- New argument to configurator: ``session_factory``.\n\n- New method on configurator: ``set_session_factory``\n\n- Using ``request.session`` now returns a (dictionary-like) session\n  object if a session factory has been configured.\n\n- The request now has a new attribute: ``tmpl_context`` for benefit of\n  Pylons users.\n\n- The decorator previously known as ``pyramid.view.bfg_view`` is now\n  known most formally as ``pyramid.view.view_config`` in docs and\n  paster templates.  An import of ``pyramid.view.bfg_view``, however,\n  will continue to work \"forever\".\n\n- New API methods in ``pyramid.session``: ``signed_serialize`` and\n  ``signed_deserialize``.\n\n- New interface: ``pyramid.interfaces.IRendererInfo``.  An object of this type\n  is passed to renderer factory constructors (see \"Backwards\n  Incompatibilities\").\n\n- New event type: ``pyramid.interfaces.IBeforeRender``.  An object of this type\n  is sent as an event before a renderer is invoked (but after the\n  application-level renderer globals factory added via\n  ``pyramid.configurator.configuration.set_renderer_globals_factory``, if any,\n  has injected its own keys).  Applications may now subscribe to the\n  ``IBeforeRender`` event type in order to introspect the and modify the set of\n  renderer globals before they are passed to a renderer.  The event object\n  iself has a dictionary-like interface that can be used for this purpose.  For\n  example::\n\n    from repoze.events import subscriber\n    from pyramid.interfaces import IRendererGlobalsEvent\n\n    @subscriber(IRendererGlobalsEvent)\n    def add_global(event):\n        event['mykey'] = 'foo'\n\n  If a subscriber attempts to add a key that already exist in the renderer\n  globals dictionary, a ``KeyError`` is raised.  This limitation is due to the\n  fact that subscribers cannot be ordered relative to each other.  The set of\n  keys added to the renderer globals dictionary by all subscribers and\n  app-level globals factories must be unique.\n\n- New class: ``pyramid.response.Response``.  This is a pure facade for\n  ``webob.Response`` (old code need not change to use this facade, it's\n  existence is mostly for vanity and documentation-generation purposes).\n\n- All preexisting paster templates (except ``zodb``) now use \"imperative\"\n  configuration (``starter``, ``routesalchemy``, ``alchemy``).\n\n- A new paster template named ``pyramid_starter_zcml`` exists, which uses\n  declarative configuration.\n\nDocumentation (delta from BFG 1.3)\n-----------------------------------\n\n- Added a ``pyramid.httpexceptions`` API documentation chapter.\n\n- Added a ``pyramid.session`` API documentation chapter.\n\n- Added a ``Session Objects`` narrative documentation chapter.\n\n- Added an API chapter for the ``pyramid.personality`` module.\n\n- Added an API chapter for the ``pyramid.response`` module.\n\n- All documentation which previously referred to ``webob.Response`` now uses\n  ``pyramid.response.Response`` instead.\n\n- The documentation has been overhauled to use imperative configuration,\n  moving declarative configuration (ZCML) explanations to a separate\n  narrative chapter ``declarative.rst``.\n\n- The ZODB Wiki tutorial was updated to take into account changes to the\n  ``pyramid_zodb`` paster template.\n\n- The SQL Wiki tutorial was updated to take into account changes to the\n  ``pyramid_routesalchemy`` paster template.\n\nBackwards Incompatibilities (with BFG 1.3)\n------------------------------------------\n\n- There is no longer an ``IDebugLogger`` registered as a named utility\n  with the name ``repoze.bfg.debug``.\n\n- The logger which used to have the name of ``repoze.bfg.debug`` now\n  has the name ``pyramid.debug``.\n\n- The deprecated API ``pyramid.testing.registerViewPermission``\n  has been removed.\n\n- The deprecated API named ``pyramid.testing.registerRoutesMapper``\n  has been removed.\n\n- The deprecated API named ``pyramid.request.get_request`` was removed.\n\n- The deprecated API named ``pyramid.security.Unauthorized`` was\n  removed.\n\n- The deprecated API named ``pyramid.view.view_execution_permitted``\n  was removed.\n\n- The deprecated API named ``pyramid.view.NotFound`` was removed.\n\n- The ``bfgshell`` paster command is now named ``pshell``.\n\n- The Venusian \"category\" for all built-in Venusian decorators\n  (e.g. ``subscriber`` and ``view_config``/``bfg_view``) is now\n  ``pyramid`` instead of ``bfg``.\n\n- ``pyramid.renderers.rendered_response`` function removed; use\n  ``render_pyramid.renderers.render_to_response`` instead.\n\n- Renderer factories now accept a *renderer info object* rather than an\n  absolute resource specification or an absolute path.  The object has the\n  following attributes: ``name`` (the ``renderer=`` value), ``package`` (the\n  'current package' when the renderer configuration statement was found),\n  ``type``: the renderer type, ``registry``: the current registry, and\n  ``settings``: the deployment settings dictionary.\n\n  Third-party ``repoze.bfg`` renderer implementations that must be ported to\n  Pyramid will need to account for this.\n\n  This change was made primarily to support more flexible Mako template\n  rendering.\n\n- The presence of the key ``repoze.bfg.message`` in the WSGI environment when\n  an exception occurs is now deprecated.  Instead, code which relies on this\n  environ value should use the ``exception`` attribute of the request\n  (e.g. ``request.exception[0]``) to retrieve the message.\n\n- The values ``bfg_localizer`` and ``bfg_locale_name`` kept on the request\n  during internationalization for caching purposes were never APIs.  These\n  however have changed to ``localizer`` and ``locale_name``, respectively.\n\n- The default ``cookie_name`` value of the ``authtktauthenticationpolicy`` ZCML\n  now defaults to ``auth_tkt`` (it used to default to ``repoze.bfg.auth_tkt``).\n\n- The default ``cookie_name`` value of the\n  ``pyramid.authentication.AuthTktAuthenticationPolicy`` constructor now\n  defaults to ``auth_tkt`` (it used to default to ``repoze.bfg.auth_tkt``).\n\n- The ``request_type`` argument to the ``view`` ZCML directive, the\n  ``pyramid.configuration.Configurator.add_view`` method, or the\n  ``pyramid.view.view_config`` decorator (nee ``bfg_view``) is no longer\n  permitted to be one of the strings ``GET``, ``HEAD``, ``PUT``, ``POST`` or\n  ``DELETE``, and now must always be an interface.  Accepting the\n  method-strings as ``request_type`` was a backwards compatibility strategy\n  servicing repoze.bfg 1.0 applications.  Use the ``request_method``\n  parameter instead to specify that a view a string request-method predicate.\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 7.208984375,
          "content": "The majority of the code in Pyramid is supplied under this license:\n\n  A copyright notice accompanies this license document that identifies\n  the copyright holders.\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are\n  met:\n\n  1.  Redistributions in source code must retain the accompanying\n      copyright notice, this list of conditions, and the following\n      disclaimer.\n\n  2.  Redistributions in binary form must reproduce the accompanying\n      copyright notice, this list of conditions, and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\n  3.  Names of the copyright holders must not be used to endorse or\n      promote products derived from this software without prior\n      written permission from the copyright holders.\n\n  4.  If any files are modified, you must cause the modified files to\n      carry prominent notices stating that you changed the files and\n      the date of any change.\n\n  Disclaimer\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND\n    ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n    TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n    PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n    TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n    ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\nPortions of the code in Pyramid are supplied under the ZPL (headers\nwithin individual files indicate that these portions are licensed\nunder the ZPL):\n\n  Zope Public License (ZPL) Version 2.1\n  -------------------------------------\n\n  A copyright notice accompanies this license document that\n  identifies the copyright holders.\n\n  This license has been certified as open source. It has also\n  been designated as GPL compatible by the Free Software\n  Foundation (FSF).\n\n  Redistribution and use in source and binary forms, with or\n  without modification, are permitted provided that the\n  following conditions are met:\n\n  1. Redistributions in source code must retain the\n     accompanying copyright notice, this list of conditions,\n     and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the accompanying\n     copyright notice, this list of conditions, and the\n     following disclaimer in the documentation and/or other\n     materials provided with the distribution.\n\n  3. Names of the copyright holders must not be used to\n     endorse or promote products derived from this software\n     without prior written permission from the copyright\n     holders.\n\n  4. The right to distribute this software or to use it for\n     any purpose does not give you the right to use\n     Servicemarks (sm) or Trademarks (tm) of the copyright\n     holders. Use of them is covered by separate agreement\n     with the copyright holders.\n\n  5. If any files are modified, you must cause the modified\n     files to carry prominent notices stating that you changed\n     the files and the date of any change.\n\n  Disclaimer\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS''\n    AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT\n    NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN\n    NO EVENT SHALL THE COPYRIGHT HOLDERS BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n    OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n    DAMAGE.\n\nThe documentation portion of Pyramid (the rendered contents of the\n\"docs\" directory of a software distribution or checkout) is supplied\nunder the Creative Commons Attribution-Noncommercial-Share Alike 3.0\nUnited States License as described by\nhttp://creativecommons.org/licenses/by-nc-sa/3.0/us/\n\nInternationalization Code in ``pyramid.i18n`` is supplied under the\nfollowing license:\n\n   Copyright (C) 2007 Edgewall Software\n   All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n    1. Redistributions of source code must retain the above copyright\n       notice, this list of conditions and the following disclaimer.\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in\n       the documentation and/or other materials provided with the\n       distribution.\n    3. The name of the author may not be used to endorse or promote\n       products derived from this software without specific prior\n       written permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n   IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n   OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n   IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nPortions of the code marked as \"stolen from Paste\" are provided under the\nfollowing license:\n\n    Copyright (c) 2006-2007 Ian Bicking and Contributors\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n    \"Software\"), to deal in the Software without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Software, and to\n    permit persons to whom the Software is furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.392578125,
          "content": "graft src/pyramid\ngraft docs\nprune docs/_build\ngraft tests\n\ninclude README.rst\ninclude CHANGES.rst HISTORY.rst BFG_HISTORY.rst\ninclude CONTRIBUTORS.txt LICENSE.txt COPYRIGHT.txt\n\ninclude .coveragerc .flake8 setup.cfg pyproject.toml\ninclude tox.ini .readthedocs.yaml\ninclude contributing.md RELEASING.txt HACKING.txt TODO.txt\ngraft .github\n\nglobal-exclude __pycache__ *.py[cod]\nglobal-exclude .DS_Store\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 2.3046875,
          "content": "Pyramid\n=======\n\n.. image:: https://github.com/Pylons/Pyramid/workflows/Build%20and%20test/badge.svg?branch=main\n        :target: https://github.com/Pylons/Pyramid/actions?query=workflow%3A%22Build+and+test%22\n        :alt: main CI Status\n\n.. image:: https://readthedocs.org/projects/pyramid/badge/?version=main\n        :target: https://docs.pylonsproject.org/projects/pyramid/en/main\n        :alt: main Documentation Status\n\n.. image:: https://img.shields.io/badge/IRC-Libera.Chat-blue.svg\n        :target: https://web.libera.chat/#pyramid\n        :alt: IRC Libera.Chat\n\nPyramid is a small, fast, down-to-earth, open source Python web framework.\nIt makes real-world web application development\nand deployment more fun, more predictable, and more productive.\n`Try Pyramid <https://trypyramid.com/>`_, browse its add-ons and documentation, and get an overview.\n\n.. code-block:: python\n\n    from wsgiref.simple_server import make_server\n    from pyramid.config import Configurator\n    from pyramid.response import Response\n\n    def hello_world(request):\n        return Response('Hello World!')\n\n    if __name__ == '__main__':\n        with Configurator() as config:\n            config.add_route('hello', '/')\n            config.add_view(hello_world, route_name='hello')\n            app = config.make_wsgi_app()\n        server = make_server('0.0.0.0', 6543, app)\n        server.serve_forever()\n\nPyramid is a project of the `Pylons Project <https://pylonsproject.org>`_.\n\nSupport and Documentation\n-------------------------\n\nSee `Pyramid Support and Development\n<https://docs.pylonsproject.org/projects/pyramid/en/latest/#support-and-development>`_\nfor documentation, reporting bugs, and getting support.\n\nDeveloping and Contributing\n---------------------------\n\nSee `HACKING.txt <https://github.com/Pylons/pyramid/blob/main/HACKING.txt>`_ and\n`contributing.md <https://github.com/Pylons/pyramid/blob/main/contributing.md>`_\nfor guidelines on running tests, adding features, coding style, and updating\ndocumentation when developing in or contributing to Pyramid.\n\nLicense\n-------\n\nPyramid is offered under the BSD-derived `Repoze Public License\n<http://repoze.org/license.html>`_.\n\nAuthors\n-------\n\nPyramid is made available by `Agendaless Consulting <https://agendaless.com>`_\nand a team of `contributors\n<https://github.com/Pylons/pyramid/graphs/contributors>`_.\n"
        },
        {
          "name": "RELEASING.txt",
          "type": "blob",
          "size": 6.1630859375,
          "content": "Releasing Pyramid\n=================\n\n- For clarity, we define releases as follows.\n\n  - Alpha, beta, dev and similar statuses do not qualify whether a release is\n    major or minor. The term \"pre-release\" means alpha, beta, or dev.\n\n  - A release is final when it is no longer pre-release.\n\n  - A *major* release is where the first number either before or after the\n    first dot increases. Examples: 1.6 to 1.7a1, or 1.8 to 2.0.\n\n  - A *minor* or *bug fix* release is where the number after the second dot\n    increases. Example: 1.6 to 1.6.1.\n\nPrepare new release branch\n--------------------------\n\n- Create a new release branch, incrementing the version number.\n\n- Do any necessary branch merges (e.g., main to branch, branch to main).\n\n- On release branch:\n\n  $ git pull\n\n- Do platform test via tox:\n\n  $ tox -r\n\n  Make sure statement coverage is at 100% (the test run will fail if not).\n\n- Run tests on Windows if feasible.\n\n- For each ``pyramid-cookiecutter-*``, make a new branch off \"main\" with the\n  same name to align with the new Pyramid release branch name.\n\n- In the docs, update the ``cookiecutter`` command with the new branch name,\n  for example, ``cookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout\n  x.y-branch``. A search for ``cookiecutter gh:Pylons/pyramid-cookiecutter-``\n  should return all instances to be updated.\n\n- Ensure all features of the release are documented (audit CHANGES.rst or\n  communicate with contributors).\n\n- Change CHANGES.rst heading to reflect the new version number.\n\n- Copy relevant changes (delta bug fixes) from CHANGES.rst to\n  docs/whatsnew-X.X (if it's a major release).  Minor releases should\n  include a link under \"Bug Fix Releases\" to the minor feature\n  changes in CHANGES.rst.\n\n- Update README.rst to use correct versions of badges, URLs, and ALT option\n  according to the new release branch name.\n\n- Update whatsnew-X.X.rst in docs to point at change log entries for individual\n  releases if applicable.\n\n- For major version releases, in contributing.md, update branch descriptions.\n\n- For major version releases, in docs/conf.py, update values under\n  html_theme_options for in_progress and outdated across main, releasing\n  branch, and previously released branch. Also in the previously released\n  branch only, uncomment the sections to enable pylons_sphinx_latesturl.\n\n- Change setup.py version to the release version number.\n\n- Make sure PyPI long description renders::\n\n  $ tox -e lint\n\n- Create a release tag.\n\n  $ git tag X.X\n\n- Build the sdist and wheel.\n\n  $ tox -e build\n\n- Upload the artifacts to PyPI:\n\n  $ twine upload dist/pyramid-X.X-*\n\n- Configure RTD to publish the new release version of the docs.\n\nPrepare \"main\" for further development (major releases only)\n------------------------------------------------------------\n\n- Checkout \"main\".\n\n- In CHANGES.rst, preserve headings but clear out content. Add heading\n  \"unreleased\" for the version number.\n\n- From the release branch, forward port the changes in CHANGES.rst to\n  HISTORY.rst.\n\n- In contributing.md, forward port branch descriptions from release branch.\n\n- In docs/conf.py, add a commented line under\n  pylons_sphinx_latesturl_pagename_overrides for the release.\n\n- Change setup.py version to the next version number.\n\n- Update README.rst to use correct versions of badges, URLs, and ALT option\n  for \"main\" instead of the major release version.\n\n- In the docs, update the ``cookiecutter`` command with ``main``,\n  for example, ``cookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout\n  main``. A search for ``cookiecutter gh:Pylons/pyramid-cookiecutter-``\n  should return all instances to be updated.\n\nUpdate previous version (final releases only)\n---------------------------------------------\n\n- In docs/conf.py, update values under html_theme_options for in_progress and\n  outdated. Uncomment the sections to enable pylons_sphinx_latesturl.\n\n- Configure RTD to point the \"latest\" alias to the new release version of the\n  docs.\n\nCookiecutters\n-------------\n\n- For each cookiecutter, clone the newly released branch to \"latest\" branch.\n\nMarketing and communications\n----------------------------\n\n- Edit Pylons/trypyramid.com/layouts/page/documentation.html for major\n  releases, pre-releases, and once pre-releases are final.\n\n- Edit `https://wiki.python.org/moin/WebFrameworks\n  <https://wiki.python.org/moin/WebFrameworks>`_.\n\n- Edit `https://en.wikipedia.org/wiki/Pylons_project <https://en.wikipedia.org/wiki/Pylons_project>`_.\n\n- Edit `https://www.wikidata.org/wiki/Q2342759 <https://www.wikidata.org/wiki/Q2342759>`_.\n  Under \"software identifier version\", click \"add value\", and enter the current release version.\n  Click \"add qualifier\", select \"publication date\" from auto-complete, and enter the publication date.\n  Click \"add reference\", and add references for \"publication date\", \"reference URL\" (the most recent tag on GitHub), \"retrieved\" as the publication date, and \"title\" specifying \"Release #.#.#\" and select the language.\n  Click \"publish\".\n  The data on this page gets pulled in to `https://en.wikipedia.org/wiki/Comparison_of_server-side_web_frameworks#Python <https://en.wikipedia.org/wiki/Comparison_of_server-side_web_frameworks#Python>`_.\n\n- Announce to Twitter.\n\n```\nPyramid 2.x released.\n\nPyPI\nhttps://pypi.org/project/pyramid/2.x/\n\n=== One time only for new version, first pre-release ===\nWhat's New\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/whatsnew-2.X.html\n=== For all subsequent pre-releases ===\nChanges\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/changes.html#version-yyyy-mm-dd\n\nIssues\nhttps://github.com/Pylons/pyramid/issues\n```\n\n- Announce to maillist.\n\n```\nPyramid 2.X.X has been released.\n\nThe full changelog is here:\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/changes.html\n\nWhat's New In Pyramid 2.X:\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/whatsnew-2.X.html\n\n2.X release documentation (across all alphas and betas, as well as when it gets\nto final release):\nhttps://docs.pylonsproject.org/projects/pyramid/en/2.X-branch/\n\nYou can install it via PyPI:\n\n  pip install Pyramid==2.X\n\nEnjoy, and please report any issues you find to the issue tracker at\nhttps://github.com/Pylons/pyramid/issues\n\nThanks!\n\n- Pyramid core developers\n```\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 4.2412109375,
          "content": "Pyramid TODOs\n=============\n\nNice-to-Have\n------------\n\n- config.set_registry_attr with conflict detection... make sure the attr is\n  added before a commit, but register an action so a conflict can be detected.\n\n- Provide the presumed renderer name to the called view as an attribute of\n  the request.\n\n- Have action methods return their discriminators.\n\n- Modify view mapper narrative docs to not use pyramid_handlers.\n\n- Modify the urldispatch chapter examples to assume a scan rather than\n  ``add_view``.\n\n- Introspection:\n\n  * ``default root factory`` category (prevent folks from needing to searh\n    \"root factories\" category)?\n\n  * ``default view mapper`` category (prevent folks from needing to search\n    \"view mappers\" category)?\n\n  * get rid of \"tweens\" category (can't sort properly?)\n\n- Fix deployment recipes in cookbook (discourage proxying without changing\n  server).\n\n- Add narrative docs for wsgiapp and wsgiapp2.\n\n- Basic WSGI documentation (pipeline / app / server).\n\n- Change docs about creating a venusian decorator to not use ZCA (use\n  configurator methods instead).\n\n- Try to better explain the relationship between a renderer and a template in\n  the templates chapter and elsewhere.  Scan the documentation for reference\n  to a renderer as *only* view configuration (it's a larger concept now).\n\n- Add better docs about what-to-do-when-behind-a-proxy: rutter (\"/foo =\n  app1\" and \"domain app1.localhost = app1\"), ProxyPreserveHost and the nginx\n  proxy_params, preserving HTTPS URLs.\n\n- Debug option to print view matching decision (e.g. debug_viewlookup or so).\n\n- Non-bwcompat use of threadlocals that need to be documented or ameliorated:\n\n  security.principals_allowed_by_permission\n\n  resource.OverrideProvider._get_overrides: can't credibly be removed,\n  because it stores an overrideprovider as a module-scope global.\n\n  traversal.traverse: this API is a stepchild, and needs to be changed.\n\n  Configurator.add_translation_dirs: not passed any context but a message,\n  can't credibly be removed.\n\n- Deprecate pyramid.security.view_execution_permitted (it only works for\n  traversal).\n\n- Provide a ``has_view`` function.\n\n- Update App engine chapter with less creaky directions.\n\n- Idea from Zart:\n\n  diff --git a/pyramid/paster.py b/pyramid/paster.py\n  index b0e4d79..b3bd82a 100644\n  --- a/pyramid/paster.py\n  +++ b/pyramid/paster.py\n  @@ -8,6 +8,7 @@ from paste.deploy import (\n   from pyramid.compat import configparser\n   from logging.config import fileConfig\n   from pyramid.scripting import prepare\n  +from pyramid.config import Configurator\n   \n   def get_app(config_uri, name=None, loadapp=loadapp):\n       \"\"\" Return the WSGI application named ``name`` in the PasteDeploy\n  @@ -111,3 +112,10 @@ def bootstrap(config_uri, request=None):\n       env['app'] = app\n       return env\n   \n  +def make_pyramid_app(global_conf, app=None, **settings):\n  +    \"\"\"Return pyramid application configured with provided settings\"\"\"\n  +    config = Configurator(package='pyramid', settings=settings)\n  +    if app:\n  +        config.include(app)\n  +    app = config.make_wsgi_app()\n  +    return app\n  diff --git a/setup.py b/setup.py\n  index 03ebb42..91e0e21 100644\n  --- a/setup.py\n  +++ b/setup.py\n  @@ -118,6 +118,8 @@ setup(name='pyramid',\n           [paste.server_runner]\n           wsgiref = pyramid.scripts.pserve:wsgiref_server_runner\n           cherrypy = pyramid.scripts.pserve:cherrypy_server_runner\n  +        [paster.app_factory]\n  +        main = pyramid.paster:make_pyramid_app\n         \"\"\"\n         )\n \n\nProbably Bad Ideas\n------------------\n\n- Add functionality that mocks the behavior of ``repoze.browserid``.\n\n- Maybe add ``add_renderer_globals`` method to Configurator.\n\n- Supply ``X-Vhm-Host`` support (probably better to do what paste#prefix\n  middleware does).\n\n- Have ``remember`` and ``forget`` actually set headers on the response using\n  a response callback (and return the empty list)?\n\n- http://pythonguy.wordpress.com/2011/06/22/dynamic-variables-revisited/\n  instead of thread locals\n\n- Context manager for creating a new configurator (replacing\n  ``with_package``).  E.g.::\n\n    with config.partial(package='bar') as c:\n        c.add_view(...)\n\n  or::\n\n    with config.partial(introspection=False) as c:\n        c.add_view(..)\n\n- _fix_registry should dictify the registry being fixed.\n"
        },
        {
          "name": "contributing.md",
          "type": "blob",
          "size": 1.7744140625,
          "content": "# Contributing\n\nAll projects under the Pylons Projects, including this one, follow the guidelines established at [How to Contribute](https://pylonsproject.org/community-how-to-contribute.html), [Coding Style and Standards](https://pylonsproject.org/community-coding-style-standards.html), and [Pylons Project Documentation Style Guide](https://docs.pylonsproject.org/projects/docs-style-guide/).\n\nYou can contribute to this project in several ways.\n\n* [File an Issue on GitHub](https://github.com/Pylons/pyramid/issues)\n* Fork this project and create a branch with your suggested change. When ready, submit a pull request for consideration. [GitHub Flow](https://guides.github.com/introduction/flow/index.html) describes the workflow process and why it's a good practice. When submitting a pull request, sign [CONTRIBUTORS.txt](https://github.com/Pylons/pyramid/blob/main/CONTRIBUTORS.txt) if you have not yet done so.\n* Join the [IRC channel #pyramid on irc.libera.chat](https://web.libera.chat/#pyramid).\n\n## Git Branches\n\nGit branches and their purpose and status at the time of this writing are listed below.\n\n* [main](https://github.com/Pylons/pyramid/) - The branch on which further development takes place. The default branch on GitHub.\n* [2.0-branch](https://github.com/Pylons/pyramid/tree/2.0-branch) - The branch classified as \"stable\" or \"latest\".\n* [1.10-branch](https://github.com/Pylons/pyramid/tree/1.10-branch) - The oldest actively maintained and stable branch.\n\nOlder branches are not actively maintained. In general, two stable branches and one or two development branches are actively maintained.\n\n## Developing\n\nFollow the instructions in [HACKING.txt](https://github.com/Pylons/pyramid/blob/main/HACKING.txt) to install Pyramid and the tools needed to run its tests and build its documentation.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.79296875,
          "content": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.black]\nline-length = 79\nskip-string-normalization = true\ntarget-version = ['py38', 'py39', 'py310', 'py311', 'py312']\nexclude = '''\n/(\n    \\.git\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | \\.pytest_cache\n  | dist\n  | build\n  | docs\n)/\n'''\n\n# This next section only exists for people that have their editors\n# automatically call isort.\n[tool.isort]\nprofile = \"black\"\nmulti_line_output = 3\nsrc_paths = [\"src\", \"tests\"]\nskip_glob = [\"docs/*\"]\ninclude_trailing_comma = true\nforce_grid_wrap = false\ncombine_as_imports = true\nline_length = 79\nforce_sort_within_sections = true\nno_lines_before = \"THIRDPARTY\"\nsections = \"FUTURE,THIRDPARTY,FIRSTPARTY,LOCALFOLDER\"\ndefault_section = \"THIRDPARTY\"\nknown_first_party = \"pyramid\"\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.298828125,
          "content": "[metadata]\nlicense_file = LICENSE.txt\n\n[check-manifest]\nignore =\n    .gitignore\n    .gitattributes\n    PKG-INFO\n    *.egg-info\n    *.egg-info/*\nignore-default-rules = true\nignore-bad-ideas =\n    tests/pkgs/localeapp/**/*.mo\n\n[tool:pytest]\npython_files = test_*.py\ntestpaths =\n    tests\naddopts = -W always\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.359375,
          "content": "##############################################################################\n#\n# Copyright (c) 2008-2013 Agendaless Consulting and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the BSD-like license at\n# http://www.repoze.org/LICENSE.txt.  A copy of the license should accompany\n# this distribution.  THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL\n# EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO,\n# THE IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND\n# FITNESS FOR A PARTICULAR PURPOSE\n#\n##############################################################################\nfrom setuptools import find_packages, setup\n\n\ndef readfile(name):\n    with open(name) as f:\n        return f.read()\n\n\nREADME = readfile('README.rst')\nCHANGES = readfile('CHANGES.rst')\n\nVERSION = '2.1.dev0'\n\ninstall_requires = [\n    'hupper >= 1.5',  # ignore_files support\n    'plaster',\n    'plaster_pastedeploy',\n    'setuptools',\n    'translationstring >= 0.4',  # py3 compat\n    'venusian >= 1.0',  # ``ignore``\n    'webob >= 1.8.3',  # Accept.parse_offer\n    'zope.deprecation >= 3.5.0',  # py3 compat\n    'zope.interface >= 3.8.0',  # has zope.interface.registry\n]\n\ntests_require = [\n    'webtest >= 1.3.1',  # py3 compat\n    'zope.component >= 4.0',  # py3 compat\n]\n\ndocs_extras = [\n    'Sphinx >= 3.0.0',  # Force RTD to use >= 3.0.0\n    'docutils',\n    'pylons-sphinx-themes >= 1.0.8',  # Ethical Ads\n    'pylons_sphinx_latesturl',\n    'repoze.sphinx.autointerface',\n    'sphinx-copybutton',\n    'sphinxcontrib-autoprogram',\n]\n\ntesting_extras = tests_require + [\n    'coverage',\n    'pytest>=5.4.2',  # unittest.TestCase funkyness, see commit 77c1505ab\n    'pytest-cov',\n]\n\nbranch_version = \".\".join(VERSION.split(\".\")[:2])\n\n# black is refusing to make anything under 80 chars so just splitting it up\ndocs_fmt = 'https://docs.pylonsproject.org/projects/pyramid/en/{}-branch/'\ndocs_url = docs_fmt.format(branch_version)\n\nsetup(\n    name='pyramid',\n    version=VERSION,\n    description='The Pyramid Web Framework, a Pylons project',\n    long_description=README + '\\n\\n' + CHANGES,\n    long_description_content_type='text/x-rst',\n    classifiers=[\n        \"Development Status :: 6 - Mature\",\n        \"Intended Audience :: Developers\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: Implementation :: CPython\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Framework :: Pyramid\",\n        \"Topic :: Internet :: WWW/HTTP\",\n        \"Topic :: Internet :: WWW/HTTP :: WSGI\",\n        \"License :: Repoze Public License\",\n    ],\n    keywords=['web', 'wsgi', 'pylons', 'pyramid'],\n    author=\"Chris McDonough, Agendaless Consulting\",\n    author_email=\"pylons-discuss@googlegroups.com\",\n    url=\"https://trypyramid.com\",\n    project_urls={\n        'Documentation': docs_url,\n        'Changelog': '{}whatsnew-{}.html'.format(docs_url, branch_version),\n        'Issue Tracker': 'https://github.com/Pylons/pyramid/issues',\n    },\n    license=\"BSD-derived (Repoze)\",\n    packages=find_packages('src', exclude=['tests']),\n    package_dir={'': 'src'},\n    include_package_data=True,\n    zip_safe=False,\n    python_requires='>=3.8',\n    install_requires=install_requires,\n    extras_require={'testing': testing_extras, 'docs': docs_extras},\n    tests_require=tests_require,\n    test_suite=\"tests\",\n    entry_points={\n        'paste.server_runner': [\n            'wsgiref = pyramid.scripts.pserve:wsgiref_server_runner',\n            'cherrypy = pyramid.scripts.pserve:cherrypy_server_runner',\n        ],\n        'pyramid.pshell_runner': [\n            'python = pyramid.scripts.pshell:python_shell_runner'\n        ],\n        'console_scripts': [\n            'pserve = pyramid.scripts.pserve:main',\n            'pshell = pyramid.scripts.pshell:main',\n            'proutes = pyramid.scripts.proutes:main',\n            'pviews = pyramid.scripts.pviews:main',\n            'ptweens = pyramid.scripts.ptweens:main',\n            'prequest = pyramid.scripts.prequest:main',\n            'pdistreport = pyramid.scripts.pdistreport:main',\n        ],\n    },\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 1.7998046875,
          "content": "[tox]\nenvlist =\n    lint,\n    py38,py39,py310,py311,py312,pypy3,\n    py312-cover,coverage,\n    docs\n\nisolated_build = true\n\n[testenv]\ncommands =\n    python --version\n    pytest {posargs:}\nextras =\n    testing\nsetenv =\n    COVERAGE_FILE=.coverage.{envname}\n\n[testenv:py312-cover]\ncommands =\n    python --version\n    pytest --cov {posargs:}\n\n[testenv:lint]\nskip_install = true\ncommands =\n    flake8 src/pyramid tests setup.py\n    isort --check-only --df  src/pyramid tests setup.py\n    black --check --diff src/pyramid tests setup.py\n    check-manifest\n    # build sdist/wheel\n    python -m build .\n    twine check dist/*\ndeps =\n    flake8~=6.1.0\n    black~=24.1.0\n    isort~=5.12\n    build\n    check-manifest\n    readme_renderer\n    twine\n\n[testenv:docs]\nallowlist_externals = make\ncommands =\n    make -C docs {posargs:doctest html epub} BUILDDIR={envdir} \"SPHINXOPTS=-W -E -D suppress_warnings=ref.term\"\nextras =\n    docs\n\n[testenv:pdf]\nallowlist_externals = make\ncommands =\n    make -C docs latexpdf BUILDDIR={envdir} \"SPHINXOPTS=-W -E -D suppress_warnings=ref.term\"\nextras =\n    docs\n\n[testenv:coverage]\nskip_install = true\ncommands =\n    coverage combine\n    coverage xml\n    coverage report --fail-under=100\ndeps =\n    coverage\nsetenv =\n    COVERAGE_FILE=.coverage\ndepends = py312-cover\n\n[testenv:format]\nskip_install = true\ncommands =\n    isort src/pyramid tests setup.py\n    black src/pyramid tests setup.py\ndeps =\n    black~=24.1.0\n    isort~=5.12\n\n[testenv:build]\nskip_install = true\ncommands =\n    # clean up build/ and dist/ folders\n    python -c 'import shutil; shutil.rmtree(\"build\", ignore_errors=True)'\n    # Make sure we aren't forgetting anything\n    check-manifest\n    # build sdist/wheel\n    python -m build .\n    # Verify all is well\n    twine check dist/*\n\ndeps =\n    build\n    check-manifest\n    readme_renderer\n    twine\n"
        }
      ]
    }
  ]
}