{
  "metadata": {
    "timestamp": 1736559916941,
    "page": 679,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bchao1/bullet",
      "stars": 3581,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.376953125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n/bullet/__pycache__/\n# C extensions\n*.so\n.DS_Store\n# Tests \ntests/\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\ntest.py\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n#\ntest.py"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.208984375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## `bullet 2.2.0`\n- Add optional return indexes for `Bullet`, `Check`, and `Scrollbar`.\n- Fix `YesNo` keyhandler error (Issue #50) "
        },
        {
          "name": "DOCUMENTATION.md",
          "type": "blob",
          "size": 7.6220703125,
          "content": "# `bullet` : Documentation\n<p align=center>\n<br><br><br>\n<img src=\"./assets/icon.png\" width=\"400\"/>\n<br><br><br>\n</p>\n\n***\n> üë∑ To fully customize your prompts, you'll have to take total control of formatting and colors. Here's what you need to know.\n***\n\n## Table of Contents\n\n- General\n    - [Using `bullet` Objects](#topic_1)\n    - [Defining Choices](#topic_2)\n    - [Customize Bullets, Checks, and Hidden Characters](#topic_3)\n    - [Customize Colors](#topic_4)\n    - [Formatting](#topic_5)\n    - [Use Default Style Schemes](#topic_6)\n- `bullet` Objects\n    - [Using `Bullet` Object](#topic_7)\n    - [Using `Check` Object](#topic_8)\n    - [Using `Input` Object](#topic_9)\n    - [Using `YesNo` Object](#topic_10)\n    - [Using `Password` Object](#topic_11)\n    - [Using `Numbers` Object](#topic_12)\n    - [Using Prompt Objects](#topic_13)\n        - [Using `VerticalPrompt` Object](#topic_14)\n        - [Using `SlidePrompt` Object](#topic_15)\n    - [Using `ScrollBar` Object](#topic_16)\n- [More Customization: Extending Existing Prompts](#topic_17)\n    - [A List of Default Keyboard Events](#topic_18)\n\n# General\n\n## Using `bullet` Objects <a name=\"topic_1\"></a>\n> Always create an UI object with a prompt specified.\n```python\nfrom bullet import Bullet, Check, YesNo, Input # and etc...\ncli = Bullet(prompt = \"Choose from the items below: \")  # Create a Bullet or Check object\nresult = cli.launch()  # Launch a prompt\n```\n\n## Defining Choices<a name=\"topic_2\"></a>\n```python\ncli = Bullet(choices = [\"first item\", \"second item\", \"third item\"])\n```\n\n## Customize Bullets, Checks, and Hidden Characters<a name=\"topic_3\"></a>\n```python\ncli = Bullet(bullet = \"‚òÖ\")\ncli = Check(check = \"‚àö\")\ncli = Password(hidden = \"*\")\ncli = ScrollBar(pointer = \"‚Üí\")\n```\n> You can also use emojis! \n\n## Customize Colors<a name=\"topic_4\"></a>\n> It is recommended to EXPLICITLY specify ALL colors for an UI object.\n\n```python\nfrom bullet import colors\n```\n> üé® The following colors (both background and foreground) are supported in `bullets`. Note that `default` is the color of your default terminal.\n```\ndefault, black, red, green, yellow, blue, magenta, cyan, white\n```\n\n> üé® Remember to specify `foreground` and `background`.\n```python\nblack_foreground = colors.foreground[\"black\"]\nwhite_background = colors.background[\"white\"]\n```\n> üé® You can wrap a color with the `bright` function\n```python\nbright_cyan = colors.bright(colors.foreground[\"cyan\"])\n```\n\n> üé® Define the following colors when initializing the UI components.\n- Use foreground colors:\n    - `bullet_color`\n    - `check_color`\n    - `pointer_color`\n    - `indicator_color`\n    - `check_on_switch`\n    - `word_color`\n    - `word_on_switch`\n    - `separator_color`\n- Use background colors:\n    - `background_color`\n    - `background_on_switch`\n\n## Formatting<a name=\"topic_5\"></a>\n> üìê Define the following UI components (not all is needed for some objects).\n- `indent`: distance from left-boundary to start of prompt.\n- `pad_right`: extended background length.\n- `align`: distance between bullet (or check) and start of prompt.\n- `margin`: distance between list item and bullets (or checks).\n- `shift`: number of new lines between prompt and first item.\n\n<p align=center>\n<img src=\"./assets/formatting.png\" width=\"600\"/>\n</p>\n\n## Use Default Style Schemes<a name=\"topic_6\"></a>\n> üë∑ Currently only styles for `Bullet` is supported.\n```python\nfrom bullet import styles\nclient = Bullet(**styles.Greece)\n```\n\n# `bullet` Objects\n## ‚å®Ô∏è Using `Bullet` Object<a name=\"topic_7\"></a>\n> Single-choice prompt.\n- Define `bullet` when initializing `Bullet` object.\n- Move current position up and down using **arrow keys**. \n- Returns the chosen item after pressing **enter**.\n\n## ‚å®Ô∏è Using `Check` Object<a name=\"topic_8\"></a>\n> Multiple-choice prompt.\n- Define `check` when initializing `Check` object.\n- Move current position up and down using **arrow keys**. \n- Check/Un-check an item by pressing **space**.\n- Returns the a list of chosen items after pressing **enter**.\n\n## ‚å®Ô∏è Using `Input` Object<a name=\"topic_9\"></a>\n> Just vanilla user input.\n\n- `strip: bool`: whether to strip trailing spaces.\n- `pattern: str`: Default is `\"\"`. If defined, user input should match pattern.\n\n## ‚å®Ô∏è Using `YesNo` Object<a name=\"topic_10\"></a>\n> Guarded Yes/No question.\n- Only enter `y/Y` or `n/N`. Other invalid inputs will be guarded, and the user will be asked to re-enter.\n\n## ‚å®Ô∏è Using `Password` Object<a name=\"topic_11\"></a>\n> Enter passwords. \n- Define `hidden` when initializing `Password` object. This would be the character shown on the terminal when passwords are entered.\n- In convention, space characters `' '` are guarded and should not be in a password.\n\n## ‚å®Ô∏è Using `Numbers` Object<a name=\"topic_12\"></a>\n> Enter numeric values.\n- Non-numeric values will be guarded, and the user will be asked to re-enter.\n- Define `type` to cast return value. For example, `type = float`, will cast return value to `float`.\n\n## ‚å®Ô∏è Using `Prompt` Objects<a name=\"topic_13\"></a>\n> Wrapping it all up.\n\n### Using `VerticalPrompt` Object<a name=\"topic_14\"></a>\n- Stack `bullet` UI components into one vertically-rendered prompt.\n- Returns a list of tuples `(prompt, result)`.\n- `spacing`: number of lines between adjacent UI components.\n- Or, if `separator` is defined, each UI will be separated by a sequence of `separator` characters.\n- See `./examples/prompt.py` to get a better understanding.\n\n```python\ncli = VerticalPrompt(\n    [\n        YesNo(\"Are you a student? \"),\n        Input(\"Who are you? \"),\n        Numbers(\"How old are you? \"),\n        Bullet(\"What is your favorite programming language? \",\n              choices = [\"C++\", \"Python\", \"Javascript\", \"Not here!\"]),\n    ],\n    spacing = 1\n)\n\nresult = cli.launch()\n```\n\n### Using  `SlidePrompt` Object<a name=\"topic_15\"></a>\n- Link `bullet` UI components into a multi-stage prompt. Previous prompts will be cleared upon entering the next stage.\n- Returns a list of tuples `(prompt, result)`.\n\n> For `Prompt` ojects, call `summarize()` after launching the prompt to print out user input.\n\n## ‚å®Ô∏è Using `ScrollBar` Object<a name=\"topic_16\"></a>\n> **Enhanced `Bullet`**: Too many items? It's OK!\n- `pointer`: points to item currently selected.\n- `up_indicator`, `down_indicator`: indicators shown in first and last row of the rendered items.\n- `height`: maximum items rendered on terminal.\n    - For example, your can have 100 choices (`len(choices) = 100`) but define `height = 5`.\n\n# More Customization: Extending Existing Prompts<a name=\"topic_17\"></a>\n> See `./examples/check.py` for the big picture of what's going on.\n\nIn `bullet`, you can easily inherit a base class (existing `bullet` objects) and create your customized prompt. This is done by introducing the `keyhandler` module to register user-defined keyboard events.\n```python\nfrom bullet import keyhandler\n```\nSay you want the user to choose at least 1 and at most 3 items from a list of 5 items. You can inherit the `Check` class, and **register** a customized keyboard event as a method.\n```python\n@keyhandler.register(NEWLINE_KEY)\ndef accept(self):\n    # do some validation checks: chosen items >= 1 and <= 3.\n```\nNote that `accept()` is the method for **all** prompts to return user input. The binded keyboard event by default is `NEWLINE_KEY` pressed.\n## A List of Default Keyboard Events<a name=\"topic_18\"></a>\n> See `./bullet/charDef.py`\n- `LINE_BEGIN_KEY` : Ctrl + H\n- `LINE_END_KEY`: Ctrl + E \n- `TAB_KEY`         \n- `NEWLINE_KEY`: Enter\n- `ESC_KEY`         \n- `BACK_SPACE_KEY` \n- `ARROW_UP_KEY`    \n- `ARROW_DOWN_KEY`  \n- `ARROW_RIGHT_KEY`  \n- `ARROW_LEFT_KEY` \n- `INSERT_KEY`     \n- `DELETE_KEY`   \n- `END_KEY`         \n- `PG_UP_KEY`      \n- `PG_DOWN_KEY`    \n- `SPACE_CHAR`\n- `INTERRUPT_KEY`: Ctrl + C"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2019 Brian Chao\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.130859375,
          "content": "# `bullet` : Beautiful Python Prompts Made Simple\n<p align=center>\n<br><br><br>\n<img src=\"./assets/icon.png\" width=\"400\">\n<br><br><br>\n<a target=\"_blank\"><img src=\"https://img.shields.io/badge/platform-linux-lightgrey.svg\"></a>\n<a target=\"_blank\" href=\"https://www.python.org/downloads/\" title=\"Python version\"><img src=\"https://img.shields.io/badge/python-%3E=_3.6-green.svg\"></a>\n<a target=\"_blank\" href=\"https://opensource.org/licenses/MIT\" title=\"License: MIT\"><img src=\"https://img.shields.io/badge/License-MIT-blue.svg\"></a>\n<a target=\"_blank\" href=\"http://makeapullrequest.com\" title=\"PRs Welcome\"><img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\"></a>\n</p>\n\n***\n> üé® Customize prompts in your Python CLI tool. Extensive support for formatting, colors, background colors, styling, and etc. Also supports emojis!\n***\n\n<p align=\"center\">\n    <img src=\"./assets/gifs/demo.gif\" width=800>\n</p>\n\n> See the sample code for the above demo in `./examples/prompt.py`.\n\n## ‚ú®News: `bullet==2.2.0` is up (Finally!)\n\nYou can now download the newest version of bullet on PyPI!\n\n## Bullet-lists and checkboxes\n> üé® Robust support for user-defined styles.\n<table>\n    <tr>\n        <th>./examples/classic.py</th>\n        <th>./examples/colorful.py</th>\n        <th>./examples/star.py</th>\n    </tr>\n    <tr>\n        <td><img src=\"./assets/gifs/classic.gif\" width=\"200\"/></td>\n        <td><img src=\"./assets/gifs/colorful.gif\" width=\"200\"/></td>\n        <td><img src=\"./assets/gifs/star.gif\" width=\"200\"/></td>\n    </tr>\n    <tr>\n        <th>Vanilla checkbox</th>\n        <th>Checkbox + styles.Exam</th>\n        <th>Bullet + styles.Greece</th>\n    </tr>\n    <tr>\n        <td><img src=\"./assets/gifs/checkbox.gif\" width=\"200\"/></td>\n        <td><img src=\"./assets/gifs/exam.gif\" width=\"200\"/></td>\n        <td><img src=\"./assets/gifs/greece.gif\" width=\"200\"/></td>\n    </tr>\n    <tr>\n        <th>Bullet + styles.Ocean</th>\n        <th>Bullet + styles.Lime</th>\n        <th>Bullet + styles.Christmas</th>\n    </tr>\n    <tr>\n        <td><img src=\"./assets/gifs/ocean.gif\" width=\"200\"/></td>\n        <td><img src=\"./assets/gifs/lime.gif\" width=\"200\"/></td>\n        <td><img src=\"./assets/gifs/christmas.gif\" width=\"200\"/></td>\n    </tr>\n</table>\n\n## ScrollBar\n\n<p align=\"center\">\n    <img src=\"./assets/gifs/scrollbar.gif\" width=400>\n</p>\n\n> See the sample code for the above demo in `./examples/scrollbar.py`.\n\n## Other input prompts\n> ‚õî Passwords\n<img src=\"./assets/gifs/password.gif\" width=\"600\"/>\n\n> üëç Yes/No Questions\n<img src=\"./assets/gifs/yesno.gif\" width=\"600\"/>\n\n> üî¢ Numbers\n<img src=\"./assets/gifs/numbers.gif\" width=\"600\"/>\n\n## Setting up `bullet`\n> From PyPI\n```shell\n$ pip install bullet\n```\n> Build from Source\n```shell\n$ git clone https://github.com/bchao1/bullet.git\n$ cd bullet\n$ pip install .\n```\n## Documentation\nüìñ See <a href=\"./DOCUMENTATION.md\"> Documentation</a>.\n\n> Currently supported prompts: `Bullet`, `Check`, `Input`, `Numbers`, `Password`, `YesNo`, `VerticalPrompt`, `SlidePrompt`, `Scrollbar`.\n\n## Contributing\nüéâ Directly send PRs! Make sure development is done and tested in `Python >= 3.6`.\n\n## Todo\n- Windows Support\n- Search bar with autocomplete\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bullet",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.478515625,
          "content": "from setuptools import setup, find_packages\r\n\r\nsetup(\r\n      name='bullet',\r\n      version='2.2.0',\r\n      description='Beautiful Python prompts made simple.',\r\n      long_description=\"Extensive support for Python list prompts \\\r\n            formatting and colors\",\r\n      url='https://github.com/Mckinsey666/bullets',\r\n      keywords = \"cli list prompt customize colors\",\r\n      author='Mckinsey666',\r\n      license='MIT',\r\n      packages=find_packages(),\r\n      python_requires=\">=3.6\"\r\n)"
        }
      ]
    }
  ]
}