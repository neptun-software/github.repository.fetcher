{
  "metadata": {
    "timestamp": 1736559797477,
    "page": 523,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "amazon-science/mm-cot",
      "stars": 3852,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 6.00390625,
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0126953125,
          "content": "**/.DS_Store\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3017578125,
          "content": "## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0859375,
          "content": "# Contributing Guidelines\n\nThank you for your interest in contributing to our project. Whether it's a bug report, new feature, correction, or additional\ndocumentation, we greatly value feedback and contributions from our community.\n\nPlease read through this document before submitting any issues or pull requests to ensure we have all the necessary\ninformation to effectively respond to your bug report or contribution.\n\n\n## Reporting Bugs/Feature Requests\n\nWe welcome you to use the GitHub issue tracker to report bugs or suggest features.\n\nWhen filing an issue, please check existing open, or recently closed, issues to make sure somebody else hasn't already\nreported the issue. Please try to include as much information as you can. Details like these are incredibly useful:\n\n* A reproducible test case or series of steps\n* The version of our code being used\n* Any modifications you've made relevant to the bug\n* Anything unusual about your environment or deployment\n\n\n## Contributing via Pull Requests\nContributions via pull requests are much appreciated. Before sending us a pull request, please ensure that:\n\n1. You are working against the latest source on the *main* branch.\n2. You check existing open, and recently merged, pull requests to make sure someone else hasn't addressed the problem already.\n3. You open an issue to discuss any significant work - we would hate for your time to be wasted.\n\nTo send us a pull request, please:\n\n1. Fork the repository.\n2. Modify the source; please focus on the specific change you are contributing. If you also reformat all the code, it will be hard for us to focus on your change.\n3. Ensure local tests pass.\n4. Commit to your fork using clear commit messages.\n5. Send us a pull request, answering any default questions in the pull request interface.\n6. Pay attention to any automated CI failures reported in the pull request, and stay involved in the conversation.\n\nGitHub provides additional document on [forking a repository](https://help.github.com/articles/fork-a-repo/) and\n[creating a pull request](https://help.github.com/articles/creating-a-pull-request/).\n\n\n## Finding contributions to work on\nLooking at the existing issues is a great way to find something to contribute on. As our projects, by default, use the default GitHub issue labels (enhancement/bug/duplicate/help wanted/invalid/question/wontfix), looking at any 'help wanted' issues is a great place to start.\n\n\n## Code of Conduct\nThis project has adopted the [Amazon Open Source Code of Conduct](https://aws.github.io/code-of-conduct).\nFor more information see the [Code of Conduct FAQ](https://aws.github.io/code-of-conduct-faq) or contact\nopensource-codeofconduct@amazon.com with any additional questions or comments.\n\n\n## Security issue notifications\nIf you discover a potential security issue in this project we ask that you notify AWS/Amazon Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\n\n## Licensing\n\nSee the [LICENSE](LICENSE) file for our project's licensing. We will ask you to confirm the licensing of your contribution.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.904296875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.0654296875,
          "content": "Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.3623046875,
          "content": "# Multimodal Chain-of-Thought Reasoning in Language Models\n\n<h5 align=\"center\"><i>\"Imagine learning a textbook without figures or tables.\"</i></h5>\n\nMultimodal-CoT incorporates vision features in a decoupled training framework. The framework consists of two training stages: (i) rationale generation and (ii) answer inference. Both stages share the same model architecture but differ in the input and output.\n\n![](vision_features/mm-cot.png)\n\n\n## Requirements\n\nInstall all required python dependencies:\n\n```\npip install -r requirements.txt\n```\n\n## Datasets\n\nDownload the dataset from the following repository:\n\n```\nhttps://github.com/lupantech/ScienceQA/tree/main/data\n```\nThe vision features (detr, resnet, clip, vit) are available at https://huggingface.co/cooelf/vision_features/tree/main\n\nAlternatively, you may download the extracted vision features (detr, resnet, clip) from [vision_features](https://drive.google.com/file/d/13B0hc_F_45-UlqPLKSgRz-ALtFQ8kIJr/view?usp=share_link) and unzip the files under `vision_features`\n\n## Extract Features (optional)\n\nThe processed vision features for ScienceQA are available at https://huggingface.co/cooelf/vision_features/tree/main. \n\nThe following instructions show how we obtain those features.\n\nDownload the image files from [Google Drive](https://drive.google.com/drive/folders/1w8imCXWYn2LxajmGeGH_g5DaL2rabHev?usp=sharing) and unzip all the images (train, dev, test) in the same folder (). The structure should be:\n\n```\nimages\n├── 1\n│   └── image.png\n├── 2\n│   └── image.png\n├── 3\n│   └── image.png\n├── 5\n│   └── image.png\n├── 7\n│   └── image.png\n```\n\nRun ```extract_features.py --data_root images --output_dir vision_features --img_type vit```\n\nIf you hope to use your own images, please structure those images in the way above, or modify the script ```extract_features.py```.\n\n## Extract Captions (optional)\n\nThe processed captions for ScienceQA are available at ```data/instruct_captions.json```. \n\nThe following instructions show how we obtain those features.\n\nIntall lavis and prepare Vicuna weights to use InstructBLIP for caption extraction.\n\nhttps://github.com/salesforce/LAVIS/tree/f982acc73288408bceda2d35471a8fcf55aa04ca/projects/instructblip\n\nAssume that the images are stored in the ```images``` folder. \n\n```\npython extract_caption.py\n```\n\n## Instructions\n\n### Training \n\n```\n# rationale generation\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg rationale --img_type vit \\\n    --bs 2 --eval_bs 4 --epoch 50 --lr 5e-5 --output_len 512 \\\n    --use_caption --use_generate --prompt_format QCM-E \\\n    --output_dir experiments\n\n# answer inference\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg answer --img_type vit \\\n    --bs 4 --eval_bs 8 --epoch 50 --lr 5e-5 --output_len 64 \\\n    --use_caption --use_generate --prompt_format QCMG-A \\\n    --output_dir experiments \\\n    --eval_le experiments/rationale_declare-lab-flan-alpaca-large_vit_QCM-E_lr5e-05_bs8_op512_ep50/predictions_ans_eval.json \\\n    --test_le experiments/rationale_declare-lab-flan-alpaca-large_vit_QCM-E_lr5e-05_bs8_op512_ep50/predictions_ans_test.json\n\n```\n\n### Inference \n\nOur trained models are available at https://huggingface.co/cooelf/mm-cot/tree/main. To use our trained models, please put the them under the ```models``` folder.\n\n```\n# rationale generation\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg rationale --img_type vit \\\n    --bs 2 --eval_bs 4  --epoch 50 --lr 5e-5 --output_len 512 \\\n    --use_caption --use_generate --prompt_format QCM-E \\\n    --output_dir experiments\n    --evaluate_dir models/mm-cot-large-rationale\n\n# answer inference\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg answer --img_type vit \\\n    --bs 4 --eval_bs 8 --epoch 50 --lr 5e-5 --output_len 64  \\\n    --use_caption --use_generate --prompt_format QCMG-A \\\n    --output_dir experiments \\\n    --eval_le experiments/rationale_declare-lab-flan-alpaca-large_vit_QCM-E_lr5e-05_bs8_op512_ep50/predictions_ans_eval.json \\\n    --test_le experiments/rationale_declare-lab-flan-alpaca-large_vit_QCM-E_lr5e-05_bs8_op512_ep50/predictions_ans_test.json \\\n    --evaluate_dir models/mm-cot-large-answer\n```\n\n## Citing MM-CoT\n\n```\n@article{zhang2023multicot,\n  title={Multimodal Chain-of-Thought Reasoning in Language Models},\n  author={Zhang, Zhuosheng and Zhang, Aston and Li, Mu and Zhao, Hai and Karypis, George and Smola, Alex},\n  journal={arXiv preprint arXiv:2302.00923},\n  year={2023}\n}\n```\n\n## License\n\nThis project is licensed under the Apache-2.0 License.\n\n## Acknowledgement\n\nPart of our codes are adapted from [ScienceQA](https://github.com/lupantech/ScienceQA), [Transformers](https://github.com/huggingface/transformers), [pytorch-image-models](https://github.com/huggingface/pytorch-image-models).\n\nWe thank [Pan Lu](https://lupantech.github.io/) for providing parameter size for ScienceQA baselines.\n"
        },
        {
          "name": "__pycache__",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "evaluations.py",
          "type": "blob",
          "size": 2.673828125,
          "content": "'''\nAdapted from https://github.com/lupantech/ScienceQA\n'''\n\nimport re\nfrom rouge import Rouge\nfrom nltk.translate.bleu_score import sentence_bleu\nfrom sentence_transformers import util\n\n########################\n## BLEU\n########################\ndef tokenize(text):\n    tokens = re.split(r'\\s|\\.', text)\n    tokens = [t for t in tokens if len(t) > 0]\n    return tokens\n\n\ndef bleu_score(reference, hypothesis, gram):\n    reference_tokens = tokenize(reference)\n    hypothesis_tokens = tokenize(hypothesis)\n\n    if gram == 1:\n        bleu = sentence_bleu([reference_tokens], hypothesis_tokens, (1., ))  # BELU-1\n    elif gram == 2:\n        bleu = sentence_bleu([reference_tokens], hypothesis_tokens, (1. / 2., 1. / 2.))  # BELU-2\n    elif gram == 3:\n        bleu = sentence_bleu([reference_tokens], hypothesis_tokens, (1. / 3., 1. / 3., 1. / 3.))  # BELU-3\n    elif gram == 4:\n        bleu = sentence_bleu([reference_tokens], hypothesis_tokens, (1. / 4., 1. / 4., 1. / 4., 1. / 4.))  # BELU-4\n\n    return bleu\n\n\ndef caculate_bleu(results, data, gram):\n    bleus = []\n    for qid, output in results.items():\n        prediction = output\n        target = data[qid]\n        target = target.strip()\n        if target == \"\":\n            continue\n        bleu = bleu_score(target, prediction, gram)\n        bleus.append(bleu)\n\n    avg_bleu = sum(bleus) / len(bleus)\n\n    return avg_bleu\n\n\n########################\n## Rouge-L\n########################\ndef score_rouge(str1, str2):\n    rouge = Rouge(metrics=[\"rouge-l\"])\n    scores = rouge.get_scores(str1, str2, avg=True)\n    rouge_l = scores['rouge-l']['f']\n    return rouge_l\n\n\ndef caculate_rouge(results, data):\n    rouges = []\n    for qid, output in results.items():\n        prediction = output\n        target = data[qid]\n        target = target.strip()\n        if prediction == \"\":\n            continue\n        if target == \"\":\n            continue\n        rouge = score_rouge(target, prediction)\n        rouges.append(rouge)\n\n    avg_rouge = sum(rouges) / len(rouges)\n    return avg_rouge\n\n\n########################\n## Sentence Similarity\n########################\ndef similariry_score(str1, str2, model):\n    # compute embedding for both lists\n    embedding_1 = model.encode(str1, convert_to_tensor=True)\n    embedding_2 = model.encode(str2, convert_to_tensor=True)\n    score = util.pytorch_cos_sim(embedding_1, embedding_2).item()\n    return score\n\n\ndef caculate_similariry(results, data, model):\n    scores = []\n    for qid, output in results.items():\n        prediction = output\n        target = data[qid]\n        target = target.strip()\n\n        score = similariry_score(target, prediction, model)\n        scores.append(score)\n\n    avg_score = sum(scores) / len(scores)\n    return avg_score\n"
        },
        {
          "name": "extract_caption.py",
          "type": "blob",
          "size": 1.1025390625,
          "content": "import torch\nfrom PIL import Image\nimport os\nfrom tqdm import tqdm\nfrom lavis.models import load_model_and_preprocess\nimport json\n\n# loads InstructBLIP model\ndevice = torch.device(\"cuda\") if torch.cuda.is_available() else \"cpu\"\nmodel, vis_processors, _ = load_model_and_preprocess(name=\"blip2_vicuna_instruct\", model_type=\"vicuna7b\", is_eval=True, device=device)\n\ndata_root = \"data/images\"\noutput_dir = \"data/instruct_captions.json\"\n\nall_images = os.listdir(data_root)\nall_images.sort(key=lambda x:int(x))\n\nname_map = {}\n\nfor image in tqdm(all_images):\n    if os.path.exists(os.path.join(data_root, image, \"image.png\")):\n        curr_dir = os.path.join(data_root, image, \"image.png\")\n    else:\n        curr_dir = os.path.join(data_root, image, \"choice_0.png\")\n    raw_image = Image.open(curr_dir).convert(\"RGB\")\n    # prepare the image\n    image_features = vis_processors[\"eval\"](raw_image).unsqueeze(0).to(device)\n    output = model.generate({\"image\": image_features, \"prompt\": \"Write a detailed description.\"})\n    name_map[str(image)] = output\n\nwith open(output_dir, 'w') as outfile:\n    json.dump(name_map, outfile, indent=2)"
        },
        {
          "name": "extract_features.py",
          "type": "blob",
          "size": 2.5712890625,
          "content": "import torch\nfrom PIL import Image\nimport torchvision.transforms as T\nimport timm\nfrom timm.data import resolve_data_config\nfrom timm.data.transforms_factory import create_transform\nimport os\nimport argparse\nimport json\nfrom tqdm import tqdm\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data_root', type=str, default='images')\n    parser.add_argument('--output_dir', type=str, default='vision_features')\n    parser.add_argument('--img_type', type=str, default=\"vit\", choices=['detr', 'vit'], help='type of image features')\n    args = parser.parse_args()\n    return args\n\ndef extract_features(img_type, input_image):\n    if img_type == \"vit\":\n        config = resolve_data_config({}, model=vit_model)\n        transform = create_transform(**config)\n        with torch.no_grad():\n            img = Image.open(input_image).convert(\"RGB\")\n            input = transform(img).unsqueeze(0)\n            feature = vit_model.forward_features(input)\n        return feature\n    \n    elif img_type == \"detr\":\n        transform = T.Compose([\n            T.Resize(224),\n            T.ToTensor(),\n            T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n        ])\n        with torch.no_grad():\n            img = Image.open(input_image).convert(\"RGB\")\n            input = transform(img).unsqueeze(0)\n            feature = detr_model(input)[-1]\n        return feature\n\nif __name__ == '__main__':\n    args = parse_args()\n    print(\"args\",args)\n    all_images = os.listdir(args.data_root)\n    tmp = []\n    name_map = {}\n    all_images.sort(key=lambda x:int(x))\n    print(len(all_images))\n    if args.img_type == \"vit\":\n        vit_model = timm.create_model(\"vit_large_patch32_384\", pretrained=True, num_classes=0)\n        vit_model.eval()\n    elif args.img_type == \"detr\":\n        detr_model = torch.hub.load('cooelf/detr', 'detr_resnet101_dc5', pretrained=True)\n        detr_model.eval()\n    for idx, image in enumerate(tqdm(all_images)):\n        if idx % 100 == 0: print(idx)\n        if os.path.exists(os.path.join(args.data_root, image, \"image.png\")):\n            curr_dir = os.path.join(args.data_root, image, \"image.png\")\n        else:\n            curr_dir = os.path.join(args.data_root, image, \"choice_0.png\")\n        feature = extract_features(args.img_type, curr_dir)\n        tmp.append(feature.detach().cpu())\n        name_map[str(image)] = idx\n    \n    res = torch.cat(tmp).cpu()\n    print(res.shape)\n    torch.save(res, os.path.join(args.output_dir, args.img_type +'.pth'))\n    with open(os.path.join(args.output_dir, 'name_map.json'), 'w') as outfile:\n        json.dump(name_map, outfile)"
        },
        {
          "name": "main.py",
          "type": "blob",
          "size": 14.958984375,
          "content": "import os\nimport numpy as np\nimport torch\nimport os\nimport re\nimport json\nimport argparse\nimport random\nfrom transformers import AutoTokenizer, DataCollatorForSeq2Seq, Seq2SeqTrainingArguments, Seq2SeqTrainer, T5ForConditionalGeneration\nfrom model import T5ForMultimodalGeneration\nfrom utils_data import img_shape, load_data_std, load_data_img, ScienceQADatasetStd, ScienceQADatasetImg\nfrom utils_prompt import *\nfrom utils_evaluate import get_scores\nfrom rich.table import Column, Table\nfrom rich import box\nfrom rich.console import Console\nconsole = Console(record=True)\nimport nltk\nimport evaluate\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--data_root', type=str, default='data')\n    parser.add_argument('--output_dir', type=str, default='experiments')\n    parser.add_argument('--model', type=str, default='allenai/unifiedqa-t5-base')\n    parser.add_argument('--options', type=list, default=[\"A\", \"B\", \"C\", \"D\", \"E\"])\n    parser.add_argument('--epoch', type=int, default=20)\n    parser.add_argument('--lr', type=float, default=5e-5)\n    parser.add_argument('--bs', type=int, default=16)\n    parser.add_argument('--input_len', type=int, default=512)\n    parser.add_argument('--output_len', type=int, default=64)\n    parser.add_argument('--eval_bs', type=int, default=16)\n    parser.add_argument('--eval_acc', type=int, default=None, help='evaluate accumulation step')\n    parser.add_argument('--train_split', type=str, default='train', choices=['train', 'trainval', 'minitrain'])\n    parser.add_argument('--val_split', type=str, default='val', choices=['test', 'val', 'minival'])\n    parser.add_argument('--test_split', type=str, default='test', choices=['test', 'minitest'])\n    \n    parser.add_argument('--use_generate', action='store_true', help='only for baseline to improve inference speed')\n    parser.add_argument('--final_eval', action='store_true', help='only evaluate the model at the final epoch')\n    parser.add_argument('--user_msg', type=str, default=\"baseline\", help='experiment type in the save_dir')\n    parser.add_argument('--img_type', type=str, default=None, choices=['detr', 'clip', 'resnet','vit'], help='type of image features')\n    parser.add_argument('--eval_le', type=str, default=None, help='generated rationale for the dev set')\n    parser.add_argument('--test_le', type=str, default=None, help='generated rationale for the test set')\n    parser.add_argument('--evaluate_dir', type=str, default=None, help='the directory of model for evaluation')\n    parser.add_argument('--caption_file', type=str, default='data/captions.json')\n    parser.add_argument('--use_caption', action='store_true', help='use image captions or not')\n    parser.add_argument('--prompt_format', type=str, default='QCM-A', help='prompt format template',\n                        choices=['QCM-A', 'QCM-E', 'QCM-LE', 'QCMG-A', 'QCM-LEA', 'QCM-ALE'])\n    parser.add_argument('--seed', type=int, default=42, help='random seed')\n\n    args = parser.parse_args()\n    return args\n        \ndef T5Trainer(\n    dataframe, args,\n):\n    torch.manual_seed(args.seed)  # pytorch random seed\n    np.random.seed(args.seed)  # numpy random seed\n    torch.backends.cudnn.deterministic = True\n    \n    if args.evaluate_dir is not None:\n        args.model = args.evaluate_dir\n\n    tokenizer = AutoTokenizer.from_pretrained(args.model)\n\n    console.log(f\"\"\"[Model]: Loading {args.model}...\\n\"\"\")\n    console.log(f\"[Data]: Reading data...\\n\")\n    problems = dataframe['problems']\n    qids = dataframe['qids']\n    train_qids = qids['train']\n    test_qids = qids['test']\n    val_qids = qids['val']\n    \n    if args.evaluate_dir is not None:\n        save_dir = args.evaluate_dir\n    else:\n        model_name = args.model.replace(\"/\",\"-\")\n        gpu_count = torch.cuda.device_count()\n        save_dir = f\"{args.output_dir}/{args.user_msg}_{model_name}_{args.img_type}_{args.prompt_format}_lr{args.lr}_bs{args.bs * gpu_count}_op{args.output_len}_ep{args.epoch}\"\n        if not os.path.exists(save_dir):\n            os.mkdir(save_dir)\n    print(save_dir)\n\n    if args.img_type is not None:\n        patch_size = img_shape[args.img_type]\n        model = T5ForMultimodalGeneration.from_pretrained(args.model, patch_size=patch_size) \n        name_maps = dataframe['name_maps'] \n        image_features = dataframe['image_features']\n        train_set = ScienceQADatasetImg(\n            problems,\n            train_qids,\n            name_maps,\n            tokenizer,\n            args.input_len,\n            args.output_len,\n            args,\n            image_features,\n        )\n        eval_set = ScienceQADatasetImg(\n            problems,\n            val_qids,\n            name_maps,\n            tokenizer,\n            args.input_len,\n            args.output_len,\n            args,\n            image_features,\n            args.eval_le,\n        )\n        test_set = ScienceQADatasetImg(\n            problems,\n            test_qids,\n            name_maps,\n            tokenizer,\n            args.input_len,\n            args.output_len,\n            args,\n            image_features,\n            args.test_le,\n        )\n    else:\n        model = T5ForConditionalGeneration.from_pretrained(args.model) \n        train_set = ScienceQADatasetStd(\n            problems,\n            train_qids,\n            tokenizer,\n            args.input_len,\n            args.output_len,\n            args,\n        )\n        eval_set = ScienceQADatasetStd(\n            problems,\n            val_qids,\n            tokenizer,\n            args.input_len,\n            args.output_len,\n            args,\n            args.eval_le,\n        )\n        \n        test_set = ScienceQADatasetStd(\n            problems,\n            test_qids,\n            tokenizer,\n            args.input_len,\n            args.output_len,\n            args,\n            args.test_le,\n        )\n\n    datacollator = DataCollatorForSeq2Seq(tokenizer)\n    print(\"model parameters: \", model.num_parameters())\n    def extract_ans(ans):\n        pattern = re.compile(r'The answer is \\(([A-Z])\\)')\n        res = pattern.findall(ans)\n        \n        if len(res) == 1:\n            answer = res[0]  # 'A', 'B', ...\n        else:\n            answer = \"FAILED\" \n        return answer  \n\n    # accuracy for answer inference\n    def compute_metrics_acc(eval_preds):\n        if args.use_generate:\n            preds, targets = eval_preds\n            if isinstance(preds, tuple):\n                preds = preds[0]\n        else:\n            preds = eval_preds.predictions[0]\n            targets = eval_preds.label_ids\n            preds = preds.argmax(axis=2)\n        preds = tokenizer.batch_decode(preds, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        targets = tokenizer.batch_decode(targets, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        correct = 0\n        assert len(preds) == len(targets)\n        for idx, pred in enumerate(preds):\n            reference = targets[idx]\n            reference = extract_ans(reference)\n            extract_pred = extract_ans(pred)\n            best_option = extract_pred\n            if reference == best_option:\n                correct +=1 \n        return {'accuracy': 1.0*correct/len(targets)}\n    \n    # rougel for rationale generation\n    metric = evaluate.load(\"rouge\")\n    def postprocess_text(preds, labels):\n        preds = [pred.strip() for pred in preds]\n        labels = [label.strip() for label in labels]\n        preds = [\"\\n\".join(nltk.sent_tokenize(pred)) for pred in preds]\n        labels = [\"\\n\".join(nltk.sent_tokenize(label)) for label in labels]\n        return preds, labels\n\n    def compute_metrics_rougel(eval_preds):\n        if args.use_generate:\n            preds, targets = eval_preds\n            if isinstance(preds, tuple):\n                preds = preds[0]\n        else:\n            preds = eval_preds.predictions[0]\n            targets = eval_preds.label_ids\n            preds = preds.argmax(axis=2)\n        preds = tokenizer.batch_decode(preds, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n        targets = tokenizer.batch_decode(targets, skip_special_tokens=True, clean_up_tokenization_spaces=True)\n\n        decoded_preds, decoded_labels = postprocess_text(preds, targets)\n\n        result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)\n        result = {k: round(v * 100, 4) for k, v in result.items()}\n        prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in preds]\n        result[\"gen_len\"] = np.mean(prediction_lens)\n        return result\n\n    # only use the last model for evaluation to save time\n    if args.final_eval:\n        training_args = Seq2SeqTrainingArguments(\n            save_dir,\n            do_train=True if args.evaluate_dir is None else False,\n            do_eval=False,\n            evaluation_strategy=\"no\",\n            logging_strategy=\"steps\",\n            save_strategy=\"epoch\",\n            save_total_limit = 2,\n            learning_rate= args.lr,\n            eval_accumulation_steps=args.eval_acc,\n            per_device_train_batch_size=args.bs,\n            per_device_eval_batch_size=args.eval_bs,\n            weight_decay=0.01,\n            num_train_epochs=args.epoch,\n            predict_with_generate=args.use_generate,\n            generation_max_length=args.output_len,\n            report_to=\"none\",\n        )\n    # evaluate at each epoch\n    else:\n        training_args = Seq2SeqTrainingArguments(\n            save_dir,\n            do_train=True if args.evaluate_dir is None else False,\n            do_eval=True,\n            evaluation_strategy=\"epoch\",\n            logging_strategy=\"steps\",\n            save_strategy=\"epoch\",\n            save_total_limit = 2,\n            learning_rate= args.lr,\n            eval_accumulation_steps=args.eval_acc,\n            per_device_train_batch_size=args.bs,\n            per_device_eval_batch_size=args.eval_bs,\n            weight_decay=0.01,\n            num_train_epochs=args.epoch,\n            metric_for_best_model=\"accuracy\" if args.prompt_format == \"QCMG-A\" or args.prompt_format == \"QCM-A\" else \"rougeL\",\n            predict_with_generate=args.use_generate,\n            generation_max_length=args.output_len,\n            load_best_model_at_end=True,\n            report_to=\"none\",\n        )\n\n    trainer = Seq2SeqTrainer(\n        model=model,\n        args=training_args,\n        train_dataset=train_set,\n        eval_dataset=eval_set,\n        data_collator=datacollator,\n        tokenizer=tokenizer,\n        compute_metrics = compute_metrics_acc if args.prompt_format == \"QCMG-A\" or args.prompt_format == \"QCM-A\" else compute_metrics_rougel\n    )\n\n    if args.evaluate_dir is None:\n        trainer.train()\n        trainer.save_model(save_dir)\n        \n    metrics = trainer.evaluate(eval_dataset = test_set, max_length=args.output_len)\n    trainer.log_metrics(\"test\", metrics)\n    trainer.save_metrics(\"test\", metrics)\n\n    predict_results = trainer.predict(test_dataset=test_set, max_length=args.output_len) \n    if trainer.is_world_process_zero():\n        if args.use_generate:\n            preds, targets = predict_results.predictions, predict_results.label_ids\n        else:\n            preds = predict_results.predictions[0]\n            targets = predict_results.label_ids\n            preds = preds.argmax(axis=2)\n\n        preds = tokenizer.batch_decode(\n            preds, skip_special_tokens=True, clean_up_tokenization_spaces=True\n        )\n        targets = tokenizer.batch_decode(\n            targets, skip_special_tokens=True, clean_up_tokenization_spaces=True\n        )\n\n        results_ans = {}\n        results_rationale = {}\n        results_reference = {}\n        \n        num_fail = 0\n        for idx, qid in enumerate(test_qids):\n            pred = preds[int(idx)]\n            ref = targets[int(idx)]\n            extract_pred = extract_ans(pred)\n            if extract_pred != \"FAILED\":\n                if extract_pred in args.options:\n                    extract_pred = args.options.index(extract_pred)\n                else:\n                    extract_pred = random.choice(range(0,len(args.options)))\n            else:\n                num_fail += 1\n                extract_pred = random.choice(range(len(args.options))) # random choose one option\n            results_ans[str(qid)] = extract_pred\n            results_rationale[str(qid)] = pred\n            results_reference[str(qid)] = ref\n\n        scores = get_scores(results_ans, results_rationale, results_reference, os.path.join(args.data_root, \"scienceqa/problems.json\"))\n        preds = [pred.strip() for pred in preds]\n        output_data = {\n                \"num_fail\": num_fail,\n                \"scores\": scores,\n                \"preds\": preds,\n                 \"labels\": targets}\n        output_prediction_file = os.path.join(save_dir,\"predictions_ans_test.json\")\n        with open(output_prediction_file, \"w\") as writer:\n            writer.write(json.dumps(output_data, indent=4))\n    \n    # generate the rationale for the eval set\n    if args.prompt_format == \"QCM-LE\" or args.prompt_format == \"QCM-E\":\n        torch.cuda.empty_cache()\n        del predict_results, preds, targets\n        predict_results = trainer.predict(test_dataset=eval_set, max_length=args.output_len) \n        if trainer.is_world_process_zero():\n            if args.use_generate:\n                preds, targets = predict_results.predictions, predict_results.label_ids\n            else:\n                preds = predict_results.predictions[0]\n                targets = predict_results.label_ids\n                preds = preds.argmax(axis=2)\n\n            preds = tokenizer.batch_decode(\n                preds, skip_special_tokens=True, clean_up_tokenization_spaces=True\n            )\n            targets = tokenizer.batch_decode(\n                targets, skip_special_tokens=True, clean_up_tokenization_spaces=True\n            )\n            preds = [pred.strip() for pred in preds]\n            output_data = {\"preds\": preds,\n                 \"labels\": targets}\n            output_prediction_file = os.path.join(save_dir,\"predictions_ans_eval.json\")\n            with open(output_prediction_file, \"w\") as writer:\n                writer.write(json.dumps(output_data, indent=4))\n    \n\nif __name__ == '__main__':\n\n    # training logger to log training progress\n    training_logger = Table(\n        Column(\"Epoch\", justify=\"center\"),\n        Column(\"Steps\", justify=\"center\"),\n        Column(\"Loss\", justify=\"center\"),\n        title=\"Training Status\",\n        pad_edge=False,\n        box=box.ASCII,\n    )\n    \n    args = parse_args()\n    print(\"args\",args)\n    print('====Input Arguments====')\n    print(json.dumps(vars(args), indent=2, sort_keys=False))\n\n    random.seed(args.seed)\n    \n    if not os.path.exists(args.output_dir):\n            os.mkdir(args.output_dir)\n\n    if args.img_type is not None:\n        problems, qids, name_maps, image_features = load_data_img(args)  # probelms, test question ids, shot example ids\n        dataframe = {'problems':problems, 'qids':qids, 'name_maps': name_maps, 'image_features': image_features}\n    else:\n        problems, qids = load_data_std(args)  # probelms, test question ids, shot example ids\n        dataframe = {'problems':problems, 'qids':qids}\n\n    T5Trainer(\n        dataframe=dataframe,\n        args = args\n    )\n"
        },
        {
          "name": "model.py",
          "type": "blob",
          "size": 23.1298828125,
          "content": "'''\nAdapted from https://github.com/huggingface/transformers and https://github.com/j-min/VL-T5\n'''\n\nfrom transformers import T5Config, T5ForConditionalGeneration\nfrom transformers.models.t5.modeling_t5 import T5Stack, __HEAD_MASK_WARNING_MSG, T5Block, T5LayerNorm\nimport copy\nfrom transformers.modeling_outputs import ModelOutput, BaseModelOutput, BaseModelOutputWithPast, BaseModelOutputWithPastAndCrossAttentions, Seq2SeqLMOutput, Seq2SeqModelOutput\nfrom typing import Any, Callable, Dict, Iterable, List, Optional, Tuple\nimport math\nimport os\nimport warnings\nfrom typing import Optional, Tuple, Union\nimport torch\nfrom torch import nn\nfrom torch.nn import CrossEntropyLoss\nfrom transformers.modeling_outputs import (\n    BaseModelOutput,\n    Seq2SeqLMOutput,\n)\nfrom transformers.utils.model_parallel_utils import assert_device_map, get_device_map\nfrom torch.utils.checkpoint import checkpoint\n\nclass JointEncoder(T5Stack):\n    def __init__(self, config, embed_tokens=None, patch_size=None):\n        super().__init__(config)\n\n        self.embed_tokens = embed_tokens\n        self.is_decoder = config.is_decoder\n\n        self.patch_num, self.patch_dim = patch_size\n        self.image_dense = nn.Linear(self.patch_dim, config.d_model)\n        self.mha_layer = torch.nn.MultiheadAttention(embed_dim=config.hidden_size, kdim=config.hidden_size, vdim=config.hidden_size, num_heads=1, batch_first=True)\n        self.gate_dense = nn.Linear(2*config.hidden_size, config.hidden_size)\n        self.sigmoid = nn.Sigmoid()\n\n        self.block = nn.ModuleList(\n            [T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]\n        )\n        self.final_layer_norm = T5LayerNorm(config.d_model, eps=config.layer_norm_epsilon)\n        self.dropout = nn.Dropout(config.dropout_rate)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n        # Model parallel\n        self.model_parallel = False\n        self.device_map = None\n        self.gradient_checkpointing = False\n\n    def parallelize(self, device_map=None):\n        warnings.warn(\n            \"`T5Stack.parallelize` is deprecated and will be removed in v5 of Transformers, you should load your model\"\n            \" with `device_map='balanced'` in the call to `from_pretrained`. You can also provide your own\"\n            \" `device_map` but it needs to be a dictionary module_name to device, so for instance {'block.0': 0,\"\n            \" 'block.1': 1, ...}\",\n            FutureWarning,\n        )\n        # Check validity of device_map\n        self.device_map = (\n            get_device_map(len(self.block), range(torch.cuda.device_count())) if device_map is None else device_map\n        )\n        assert_device_map(self.device_map, len(self.block))\n        self.model_parallel = True\n        self.first_device = \"cpu\" if \"cpu\" in self.device_map.keys() else \"cuda:\" + str(min(self.device_map.keys()))\n        self.last_device = \"cuda:\" + str(max(self.device_map.keys()))\n        # Load onto devices\n        for k, v in self.device_map.items():\n            for layer in v:\n                cuda_device = \"cuda:\" + str(k)\n                self.block[layer] = self.block[layer].to(cuda_device)\n\n        # Set embed_tokens to first layer\n        self.embed_tokens = self.embed_tokens.to(self.first_device)\n        # Set final layer norm to last device\n        self.final_layer_norm = self.final_layer_norm.to(self.last_device)\n\n    def deparallelize(self):\n        warnings.warn(\n            \"Like `parallelize`, `deparallelize` is deprecated and will be removed in v5 of Transformers.\",\n            FutureWarning,\n        )\n        self.model_parallel = False\n        self.device_map = None\n        self.first_device = \"cpu\"\n        self.last_device = \"cpu\"\n        for i in range(len(self.block)):\n            self.block[i] = self.block[i].to(\"cpu\")\n        self.embed_tokens = self.embed_tokens.to(\"cpu\")\n        self.final_layer_norm = self.final_layer_norm.to(\"cpu\")\n        torch.cuda.empty_cache()\n\n    def get_input_embeddings(self):\n        return self.embed_tokens\n\n    def set_input_embeddings(self, new_embeddings):\n        self.embed_tokens = new_embeddings\n\n    def forward(\n        self,\n        input_ids=None,\n        attention_mask=None,\n        encoder_hidden_states=None,\n        encoder_attention_mask=None,\n        inputs_embeds=None,\n        image_ids=None,\n        head_mask=None,\n        cross_attn_head_mask=None,\n        past_key_values=None,\n        use_cache=None,\n        output_attentions=None,\n        output_hidden_states=None,\n        return_dict=None,\n    ):\n        # Model parallel\n        if self.model_parallel:\n            torch.cuda.set_device(self.first_device)\n            self.embed_tokens = self.embed_tokens.to(self.first_device)\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions\n        output_hidden_states = (\n            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states\n        )\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        if input_ids is not None and inputs_embeds is not None:\n            err_msg_prefix = \"decoder_\" if self.is_decoder else \"\"\n            raise ValueError(\n                f\"You cannot specify both {err_msg_prefix}input_ids and {err_msg_prefix}inputs_embeds at the same time\"\n            )\n        elif input_ids is not None:\n            input_shape = input_ids.size()\n            input_ids = input_ids.view(-1, input_shape[-1])\n        elif inputs_embeds is not None:\n            input_shape = inputs_embeds.size()[:-1]\n        else:\n            err_msg_prefix = \"decoder_\" if self.is_decoder else \"\"\n            raise ValueError(f\"You have to specify either {err_msg_prefix}input_ids or {err_msg_prefix}inputs_embeds\")\n\n        if inputs_embeds is None:\n            assert self.embed_tokens is not None, \"You have to initialize the model with valid token embeddings\"\n            inputs_embeds = self.embed_tokens(input_ids)\n\n        batch_size, seq_length = input_shape\n\n        # required mask seq length can be calculated via length of past\n        mask_seq_length = past_key_values[0][0].shape[2] + seq_length if past_key_values is not None else seq_length\n\n        if use_cache is True:\n            assert self.is_decoder, f\"`use_cache` can only be set to `True` if {self} is used as a decoder\"\n\n        if attention_mask is None:\n            attention_mask = torch.ones(batch_size, mask_seq_length, device=inputs_embeds.device)\n        if self.is_decoder and encoder_attention_mask is None and encoder_hidden_states is not None:\n            encoder_seq_length = encoder_hidden_states.shape[1]\n            encoder_attention_mask = torch.ones(\n                batch_size, encoder_seq_length, device=inputs_embeds.device, dtype=torch.long\n            )\n\n        # initialize past_key_values with `None` if past does not exist\n        if past_key_values is None:\n            past_key_values = [None] * len(self.block)\n\n        # We can provide a self-attention mask of dimensions [batch_size, from_seq_length, to_seq_length]\n        # ourselves in which case we just need to make it broadcastable to all heads.\n        extended_attention_mask = self.get_extended_attention_mask(attention_mask, input_shape)\n\n        # If a 2D or 3D attention mask is provided for the cross-attention\n        # we need to make broadcastable to [batch_size, num_heads, seq_length, seq_length]\n        if self.is_decoder and encoder_hidden_states is not None:\n            encoder_batch_size, encoder_sequence_length, _ = encoder_hidden_states.size()\n            encoder_hidden_shape = (encoder_batch_size, encoder_sequence_length)\n            if encoder_attention_mask is None:\n                encoder_attention_mask = torch.ones(encoder_hidden_shape, device=inputs_embeds.device)\n            encoder_extended_attention_mask = self.invert_attention_mask(encoder_attention_mask)\n        else:\n            encoder_extended_attention_mask = None\n\n        # Prepare head mask if needed\n        head_mask = self.get_head_mask(head_mask, self.config.num_layers)\n        cross_attn_head_mask = self.get_head_mask(cross_attn_head_mask, self.config.num_layers)\n        present_key_value_states = () if use_cache else None\n        all_hidden_states = () if output_hidden_states else None\n        all_attentions = () if output_attentions else None\n        all_cross_attentions = () if (output_attentions and self.is_decoder) else None\n        position_bias = None\n        encoder_decoder_position_bias = None\n\n        hidden_states = self.dropout(inputs_embeds)\n\n        for i, (layer_module, past_key_value) in enumerate(zip(self.block, past_key_values)):\n            layer_head_mask = head_mask[i]\n            cross_attn_layer_head_mask = cross_attn_head_mask[i]\n            # Model parallel\n            if self.model_parallel:\n                torch.cuda.set_device(hidden_states.device)\n                # Ensure that attention_mask is always on the same device as hidden_states\n                if attention_mask is not None:\n                    attention_mask = attention_mask.to(hidden_states.device)\n                if position_bias is not None:\n                    position_bias = position_bias.to(hidden_states.device)\n                if encoder_hidden_states is not None:\n                    encoder_hidden_states = encoder_hidden_states.to(hidden_states.device)\n                if encoder_extended_attention_mask is not None:\n                    encoder_extended_attention_mask = encoder_extended_attention_mask.to(hidden_states.device)\n                if encoder_decoder_position_bias is not None:\n                    encoder_decoder_position_bias = encoder_decoder_position_bias.to(hidden_states.device)\n                if layer_head_mask is not None:\n                    layer_head_mask = layer_head_mask.to(hidden_states.device)\n                if cross_attn_layer_head_mask is not None:\n                    cross_attn_layer_head_mask = cross_attn_layer_head_mask.to(hidden_states.device)\n            if output_hidden_states:\n                all_hidden_states = all_hidden_states + (hidden_states,)\n\n            if self.gradient_checkpointing and self.training:\n                if use_cache:\n                    logger.warning_once(\n                        \"`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...\"\n                    )\n                    use_cache = False\n\n                def create_custom_forward(module):\n                    def custom_forward(*inputs):\n                        return tuple(module(*inputs, use_cache, output_attentions))\n\n                    return custom_forward\n\n                layer_outputs = checkpoint(\n                    create_custom_forward(layer_module),\n                    hidden_states,\n                    extended_attention_mask,\n                    position_bias,\n                    encoder_hidden_states,\n                    encoder_extended_attention_mask,\n                    encoder_decoder_position_bias,\n                    layer_head_mask,\n                    cross_attn_layer_head_mask,\n                    None,  # past_key_value is always None with gradient checkpointing\n                )\n            else:\n                layer_outputs = layer_module(\n                    hidden_states,\n                    attention_mask=extended_attention_mask,\n                    position_bias=position_bias,\n                    encoder_hidden_states=encoder_hidden_states,\n                    encoder_attention_mask=encoder_extended_attention_mask,\n                    encoder_decoder_position_bias=encoder_decoder_position_bias,\n                    layer_head_mask=layer_head_mask,\n                    cross_attn_layer_head_mask=cross_attn_layer_head_mask,\n                    past_key_value=past_key_value,\n                    use_cache=use_cache,\n                    output_attentions=output_attentions,\n                )\n\n            # layer_outputs is a tuple with:\n            # hidden-states, key-value-states, (self-attention position bias), (self-attention weights), (cross-attention position bias), (cross-attention weights)\n            if use_cache is False:\n                layer_outputs = layer_outputs[:1] + (None,) + layer_outputs[1:]\n\n            hidden_states, present_key_value_state = layer_outputs[:2]\n\n            # We share the position biases between the layers - the first layer store them\n            # layer_outputs = hidden-states, key-value-states (self-attention position bias), (self-attention weights),\n            # (cross-attention position bias), (cross-attention weights)\n            position_bias = layer_outputs[2]\n            if self.is_decoder and encoder_hidden_states is not None:\n                encoder_decoder_position_bias = layer_outputs[4 if output_attentions else 3]\n            # append next layer key value states\n            if use_cache:\n                present_key_value_states = present_key_value_states + (present_key_value_state,)\n\n            if output_attentions:\n                all_attentions = all_attentions + (layer_outputs[3],)\n                if self.is_decoder:\n                    all_cross_attentions = all_cross_attentions + (layer_outputs[5],)\n\n            # Model Parallel: If it's the last layer for that device, put things on the next device\n            if self.model_parallel:\n                for k, v in self.device_map.items():\n                    if i == v[-1] and \"cuda:\" + str(k) != self.last_device:\n                        hidden_states = hidden_states.to(\"cuda:\" + str(k + 1))\n\n        hidden_states = self.final_layer_norm(hidden_states)\n        hidden_states = self.dropout(hidden_states)\n\n        # Add last layer\n        if output_hidden_states:\n            all_hidden_states = all_hidden_states + (hidden_states,)\n        \n        image_embedding = self.image_dense(image_ids)\n\n        image_att, _ = self.mha_layer(hidden_states, image_embedding, image_embedding)\n        \n        merge = torch.cat([hidden_states, image_att], dim=-1)\n        gate = self.sigmoid(self.gate_dense(merge))\n        hidden_states = (1 - gate) * hidden_states + gate * image_att\n\n        if not return_dict:\n            return tuple(\n                v\n                for v in [\n                    hidden_states,\n                    present_key_value_states,\n                    all_hidden_states,\n                    all_attentions,\n                    all_cross_attentions,\n                ]\n                if v is not None\n            )\n        return BaseModelOutputWithPastAndCrossAttentions(\n            last_hidden_state=hidden_states,\n            past_key_values=present_key_value_states,\n            hidden_states=all_hidden_states,\n            attentions=all_attentions,\n            cross_attentions=all_cross_attentions,\n        )\n\n\nclass T5ForMultimodalGeneration(T5ForConditionalGeneration):\n    _keys_to_ignore_on_load_missing = [\n        r\"encoder.embed_tokens.weight\",\n        r\"decoder.embed_tokens.weight\",\n        r\"lm_head.weight\",\n    ]\n    _keys_to_ignore_on_load_unexpected = [\n        r\"decoder.block.0.layer.1.EncDecAttention.relative_attention_bias.weight\",\n    ]\n\n    def __init__(self, config: T5Config, patch_size):\n        super().__init__(config)\n        self.model_dim = config.d_model\n\n        self.shared = nn.Embedding(config.vocab_size, config.d_model)\n\n        encoder_config = copy.deepcopy(config)\n        encoder_config.is_decoder = False\n        encoder_config.use_cache = False\n        encoder_config.is_encoder_decoder = False\n        # self.encoder = T5Stack(encoder_config, self.shared)\n        self.encoder = JointEncoder(encoder_config, self.shared, patch_size)\n        decoder_config = copy.deepcopy(config)\n        decoder_config.is_decoder = True\n        decoder_config.is_encoder_decoder = False\n        decoder_config.num_layers = config.num_decoder_layers\n        self.decoder = T5Stack(decoder_config, self.shared)\n\n        self.lm_head = nn.Linear(config.d_model, config.vocab_size, bias=False)\n\n        # Initialize weights and apply final processing\n        self.post_init()\n\n        # Model parallel\n        self.model_parallel = False\n        self.device_map = None\n\n    def forward(\n        self,\n        input_ids: Optional[torch.LongTensor] = None,\n        image_ids=None,\n        attention_mask: Optional[torch.FloatTensor] = None,\n        decoder_input_ids: Optional[torch.LongTensor] = None,\n        decoder_attention_mask: Optional[torch.BoolTensor] = None,\n        head_mask: Optional[torch.FloatTensor] = None,\n        decoder_head_mask: Optional[torch.FloatTensor] = None,\n        cross_attn_head_mask: Optional[torch.Tensor] = None,\n        encoder_outputs: Optional[Tuple[Tuple[torch.Tensor]]] = None,\n        past_key_values: Optional[Tuple[Tuple[torch.Tensor]]] = None,\n        inputs_embeds: Optional[torch.FloatTensor] = None,\n        decoder_inputs_embeds: Optional[torch.FloatTensor] = None,\n        labels: Optional[torch.LongTensor] = None,\n        use_cache: Optional[bool] = None,\n        output_attentions: Optional[bool] = None,\n        output_hidden_states: Optional[bool] = None,\n        return_dict: Optional[bool] = None,\n    ) -> Union[Tuple[torch.FloatTensor], Seq2SeqLMOutput]:\n        use_cache = use_cache if use_cache is not None else self.config.use_cache\n        return_dict = return_dict if return_dict is not None else self.config.use_return_dict\n\n        # FutureWarning: head_mask was separated into two input args - head_mask, decoder_head_mask\n        if head_mask is not None and decoder_head_mask is None:\n            if self.config.num_layers == self.config.num_decoder_layers:\n                warnings.warn(__HEAD_MASK_WARNING_MSG, FutureWarning)\n                decoder_head_mask = head_mask\n\n        # Encode if needed (training, first prediction pass)\n        if encoder_outputs is None:\n            # Convert encoder inputs in embeddings if needed\n            encoder_outputs = self.encoder(\n                input_ids=input_ids,\n                attention_mask=attention_mask,\n                inputs_embeds=inputs_embeds,\n                image_ids=image_ids,\n                head_mask=head_mask,\n                output_attentions=output_attentions,\n                output_hidden_states=output_hidden_states,\n                return_dict=return_dict,\n            )\n\n        elif return_dict and not isinstance(encoder_outputs, BaseModelOutput):\n            encoder_outputs = BaseModelOutput(\n                last_hidden_state=encoder_outputs[0],\n                hidden_states=encoder_outputs[1] if len(encoder_outputs) > 1 else None,\n                attentions=encoder_outputs[2] if len(encoder_outputs) > 2 else None,\n            )\n\n        hidden_states = encoder_outputs[0]\n\n        if self.model_parallel:\n            torch.cuda.set_device(self.decoder.first_device)\n\n        if labels is not None and decoder_input_ids is None and decoder_inputs_embeds is None:\n            # get decoder inputs from shifting lm labels to the right\n            decoder_input_ids = self._shift_right(labels)\n\n        # Set device for model parallelism\n        if self.model_parallel:\n            torch.cuda.set_device(self.decoder.first_device)\n            hidden_states = hidden_states.to(self.decoder.first_device)\n            if decoder_input_ids is not None:\n                decoder_input_ids = decoder_input_ids.to(self.decoder.first_device)\n            if attention_mask is not None:\n                attention_mask = attention_mask.to(self.decoder.first_device)\n            if decoder_attention_mask is not None:\n                decoder_attention_mask = decoder_attention_mask.to(self.decoder.first_device)\n\n        # Decode\n        decoder_outputs = self.decoder(\n            input_ids=decoder_input_ids,\n            attention_mask=decoder_attention_mask,\n            inputs_embeds=decoder_inputs_embeds,\n            past_key_values=past_key_values,\n            encoder_hidden_states=hidden_states,\n            encoder_attention_mask=attention_mask,\n            head_mask=decoder_head_mask,\n            cross_attn_head_mask=cross_attn_head_mask,\n            use_cache=use_cache,\n            output_attentions=output_attentions,\n            output_hidden_states=output_hidden_states,\n            return_dict=return_dict,\n        )\n\n        sequence_output = decoder_outputs[0]\n\n        # Set device for model parallelism\n        if self.model_parallel:\n            torch.cuda.set_device(self.encoder.first_device)\n            self.lm_head = self.lm_head.to(self.encoder.first_device)\n            sequence_output = sequence_output.to(self.lm_head.weight.device)\n\n        if self.config.tie_word_embeddings:\n            # Rescale output before projecting on vocab\n            # See https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/transformer/transformer.py#L586\n            sequence_output = sequence_output * (self.model_dim**-0.5)\n\n        lm_logits = self.lm_head(sequence_output)\n\n        loss = None\n        if labels is not None:\n            loss_fct = CrossEntropyLoss(ignore_index=-100)\n            loss = loss_fct(lm_logits.view(-1, lm_logits.size(-1)), labels.view(-1))\n            # TODO(thom): Add z_loss https://github.com/tensorflow/mesh/blob/fa19d69eafc9a482aff0b59ddd96b025c0cb207d/mesh_tensorflow/layers.py#L666\n\n        if not return_dict:\n            output = (lm_logits,) + decoder_outputs[1:] + encoder_outputs\n            return ((loss,) + output) if loss is not None else output\n\n        return Seq2SeqLMOutput(\n            loss=loss,\n            logits=lm_logits,\n            past_key_values=decoder_outputs.past_key_values,\n            decoder_hidden_states=decoder_outputs.hidden_states,\n            decoder_attentions=decoder_outputs.attentions,\n            cross_attentions=decoder_outputs.cross_attentions,\n            encoder_last_hidden_state=encoder_outputs.last_hidden_state,\n            encoder_hidden_states=encoder_outputs.hidden_states,\n            encoder_attentions=encoder_outputs.attentions,\n        )\n\n    def prepare_inputs_for_generation(\n        self, decoder_input_ids, past=None, attention_mask=None, use_cache=None, encoder_outputs=None, **kwargs\n    ):\n    # cut decoder_input_ids if past is used\n        if past is not None:\n            decoder_input_ids = decoder_input_ids[:, -1:]\n\n        output = {\n            \"input_ids\": None,  # encoder_outputs is defined. input_ids not needed\n            \"encoder_outputs\": encoder_outputs,\n            \"past_key_values\": past,\n            \"decoder_input_ids\": decoder_input_ids,\n            \"attention_mask\": attention_mask,\n            \"use_cache\": use_cache,  # change this to avoid caching (presumably for debugging)\n        }\n\n        if \"image_ids\" in kwargs:\n            output[\"image_ids\"] = kwargs['image_ids']\n\n        return output\n    \n    def test_step(self, tokenizer, batch, **kwargs):\n        device = next(self.parameters()).device\n        input_ids = batch['input_ids'].to(device)\n        image_ids = batch['image_ids'].to(device)\n\n        output = self.generate(\n            input_ids=input_ids,\n            image_ids=image_ids,\n            **kwargs\n        )\n\n        generated_sents = tokenizer.batch_decode(output, skip_special_tokens=True)\n        targets = tokenizer.batch_decode(batch['labels'], skip_special_tokens=True)\n\n        result = {}\n        result['preds'] = generated_sents\n        result['targets'] = targets\n\n        return result"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.197265625,
          "content": "huggingface-hub>=0.4.0\nnumpy==1.23.2\nopenai==0.23.0\npandas==1.4.3\nrouge==1.0.1\nsentence-transformers==2.2.2\ntransformers==4.30.0\nnltk==3.6.6\nevaluate==0.4.0\nrouge==1.0.1\nrouge_score==0.1.2\nrich>=13.3.2\n"
        },
        {
          "name": "run_inference.sh",
          "type": "blob",
          "size": 1.986328125,
          "content": "# base\nCUDA_VISIBLE_DEVICES=0 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-base \\\n    --user_msg rationale --img_type vit \\\n    --bs 8 --eval_bs 8 --epoch 20 --lr 8e-5 --output_len 512 \\\n    --use_caption --use_generate --final_eval --prompt_format QCM-E \\\n    --output_dir experiments \\\n    --evaluate_dir models/mm-cot-base-rationale\n\nCUDA_VISIBLE_DEVICES=0 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-base \\\n    --user_msg rationale --img_type vit \\\n    --bs 8 --eval_bs 8 --epoch 20 --lr 8e-5 --output_len 64 \\\n    --use_caption --use_generate --prompt_format QCMG-A \\\n    --output_dir experiments \\\n    --eval_le models/mm-cot-base-rationale/predictions_ans_eval.json \\\n    --test_le models/mm-cot-base-rationale/predictions_ans_test.json \\\n    --evaluate_dir models/mm-cot-base-answer\n\n# large\n# rationale generation\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg rationale --img_type vit \\\n    --bs 2 --eval_bs 4 --epoch 50 --lr 5e-5 --output_len 512 \\\n    --use_caption --use_generate --prompt_format QCM-E \\\n    --output_dir experiments \\\n    --evaluate_dir models/mm-cot-large-rationale\n\n# answer inference\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg answer --img_type vit \\\n    --bs 4 --eval_bs 8 --epoch 50 --lr 5e-5 --output_len 64 \\\n    --use_caption --use_generate --prompt_format QCMG-A \\\n    --output_dir experiments \\\n    --eval_le models/mm-cot-large-rationale/predictions_ans_eval.json \\\n    --test_le models/mm-cot-large-rationale/predictions_ans_test.json \\\n    --evaluate_dir models/mm-cot-large-answer "
        },
        {
          "name": "run_training.sh",
          "type": "blob",
          "size": 2.0166015625,
          "content": "# base\nCUDA_VISIBLE_DEVICES=0 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-base \\\n    --user_msg rationale --img_type vit \\\n    --bs 8 --eval_bs 8 --epoch 20 --lr 8e-5 --output_len 512 \\\n    --use_caption --use_generate --final_eval --prompt_format QCM-E \\\n    --output_dir experiments0620\n\nCUDA_VISIBLE_DEVICES=0 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-base \\\n    --user_msg rationale --img_type vit \\\n    --bs 8 --eval_bs 8 --epoch 20 --lr 8e-5 --output_len 64 \\\n    --use_caption --use_generate --prompt_format QCMG-A \\\n    --output_dir experiments0620 \\\n    --eval_le experiments/rationale_declare-lab-flan-alpaca-base_vit_QCM-E_lr8e-05_bs8_op512_ep20/predictions_ans_eval.json \\\n    --test_le experiments/rationale_declare-lab-flan-alpaca-base_vit_QCM-E_lr8e-05_bs8_op512_ep20/predictions_ans_test.json\n\n# large\n# rationale generation\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg rationale --img_type vit \\\n    --bs 2 --eval_bs 4 --epoch 50 --lr 5e-5 --output_len 512 \\\n    --use_caption --use_generate --prompt_format QCM-E \\\n    --output_dir experiments\n\n# answer inference\nCUDA_VISIBLE_DEVICES=0,1,2,3 python main_central.py \\\n    --data_root data/ScienceQA/data \\\n    --caption_file data/instruct_captions.json \\\n    --model declare-lab/flan-alpaca-large \\\n    --user_msg answer --img_type vit \\\n    --bs 4 --eval_bs 8 --epoch 50 --lr 5e-5 --output_len 64 \\\n    --use_caption --use_generate --prompt_format QCMG-A \\\n    --output_dir experiments \\\n    --eval_le experiments/rationale_declare-lab-flan-alpaca-large_vit_QCM-E_lr5e-05_bs8_op512_ep50/predictions_ans_eval.json \\\n    --test_le experiments/rationale_declare-lab-flan-alpaca-large_vit_QCM-E_lr5e-05_bs8_op512_ep50/predictions_ans_test.json"
        },
        {
          "name": "timm",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils_data.py",
          "type": "blob",
          "size": 7.931640625,
          "content": "import os\nfrom torch.utils.data import Dataset\nimport os\nimport json\nimport numpy as np\nimport torch\nfrom utils_prompt import *\n\nimg_shape = {\n    \"resnet\": (512, 2048),\n    \"clip\": (49, 2048),\n    \"detr\": (100, 256),\n    \"vit\": (145, 1024),\n}\n\ndef load_data_std(args):\n    problems = json.load(open(os.path.join(args.data_root, 'scienceqa/problems.json')))\n    pid_splits = json.load(open(os.path.join(args.data_root, 'scienceqa/pid_splits.json')))\n    captions = json.load(open(args.caption_file))[\"captions\"]\n\n    for qid in problems:\n        problems[qid]['caption'] = captions[qid] if qid in captions else \"\"\n\n    train_qids = pid_splits['%s' % (args.train_split)]\n    val_qids = pid_splits['%s' % (args.val_split)]\n    test_qids = pid_splits['%s' % (args.test_split)]\n    print(f\"number of train problems: {len(train_qids)}\\n\")\n    print(f\"number of val problems: {len(val_qids)}\\n\")\n    print(f\"number of test problems: {len(test_qids)}\\n\")\n\n    qids = {'train': train_qids, 'val':val_qids,'test':test_qids}\n    return problems, qids,\n\ndef load_data_img(args):\n    problems = json.load(open(os.path.join(args.data_root, 'scienceqa/problems.json')))\n    pid_splits = json.load(open(os.path.join(args.data_root, 'scienceqa/pid_splits.json')))\n    captions = json.load(open(args.caption_file))[\"captions\"]\n    name_maps = json.load(open('data/name_map.json'))\n\n    # check\n    if args.img_type == \"resnet\":\n        image_features = np.load('vision_features/resnet.npy')\n        image_features = np.expand_dims(image_features, axis=1)\n        image_features = image_features.repeat(512, axis=1)\n    elif args.img_type == \"clip\":\n        image_features = np.load('vision_features/clip.npy')\n    elif args.img_type == \"detr\":\n        image_features = np.load('vision_features/detr.npy')\n    elif args.img_type == \"vit\":\n        image_features = torch.load(\"vision_features/vit.pth\")\n    else:\n        image_features = np.load('vision_features/detr.npy')\n    print(\"img_features size: \", image_features.shape)\n\n    for qid in problems:\n        problems[qid]['caption'] = captions[qid] if qid in captions else \"\"\n\n    train_qids = pid_splits['%s' % (args.train_split)]\n    val_qids = pid_splits['%s' % (args.val_split)]\n    test_qids = pid_splits['%s' % (args.test_split)]\n    print(f\"number of train problems: {len(train_qids)}\\n\")\n    print(f\"number of val problems: {len(val_qids)}\\n\")\n    print(f\"number of test problems: {len(test_qids)}\\n\")\n\n    qids = {'train': train_qids, 'val':val_qids,'test':test_qids}\n    return problems, qids, name_maps, image_features\n\nclass ScienceQADatasetStd(Dataset):\n    \"\"\"\n    Creating a custom dataset for reading the dataset and\n    loading it into the dataloader to pass it to the\n    neural network for finetuning the model\n\n    \"\"\"\n\n    def __init__(\n        self, problems, qids, tokenizer, source_len, target_len, args, test_le=None\n    ):\n        self.tokenizer = tokenizer\n        self.data = {qid : problems[qid] for qid in qids}\n        self.source_len = source_len\n        self.summ_len = target_len\n        self.target_text = []\n        self.source_text = []\n        if test_le is not None:\n            test_le_data =json.load(open(test_le))[\"preds\"]\n        else:\n            test_le_data = None\n        idx = 0\n        for qid in self.data:\n            if test_le_data is not None:\n                curr_le_data = test_le_data[idx]\n                idx += 1\n            else:\n                curr_le_data = None\n            prompt, target = build_train_pair(problems, qid, args, curr_le_data)\n            self.target_text.append(target)\n            self.source_text.append(prompt)\n\n    def __len__(self):\n        return len(self.target_text)\n\n    def __getitem__(self, index):\n        source_text = str(self.source_text[index])\n        target_text = str(self.target_text[index])\n\n        # cleaning data so as to ensure data is in string type\n        source_text = \" \".join(source_text.split())\n        target_text = \" \".join(target_text.split())\n\n        source = self.tokenizer.batch_encode_plus(\n            [source_text],\n            max_length=self.source_len,\n            pad_to_max_length=True,\n            truncation=True,\n            padding=\"max_length\",\n            return_tensors=\"pt\",\n        )\n        target = self.tokenizer.batch_encode_plus(\n            [target_text],\n            max_length=self.summ_len,\n            pad_to_max_length=True,\n            truncation=True,\n            padding=\"max_length\",\n            return_tensors=\"pt\",\n        )\n        source_ids = source[\"input_ids\"].squeeze()\n        source_mask = source[\"attention_mask\"].squeeze()\n        target_ids = target[\"input_ids\"].squeeze().tolist()\n        \n        return {\n            \"input_ids\": source_ids,\n            \"attention_mask\": source_mask,\n            \"labels\": target_ids,\n        }\n\n\nclass ScienceQADatasetImg(Dataset):\n    \"\"\"\n    Creating a custom dataset for reading the dataset and\n    loading it into the dataloader to pass it to the\n    neural network for finetuning the model\n\n    \"\"\"\n\n    def __init__(\n        self, problems, qids, name_maps, tokenizer, source_len, target_len, args, image_features, test_le=None\n    ):\n        \"\"\"\n        Initializes a Dataset class\n\n        Args:\n            dataframe (pandas.DataFrame): Input dataframe\n            tokenizer (transformers.tokenizer): Transformers tokenizer\n            source_len (int): Max length of source text\n            target_len (int): Max length of target text\n            source_text (str): column name of source text\n            target_text (str): column name of target text\n        \"\"\"\n        self.tokenizer = tokenizer\n        self.data = {qid : problems[qid] for qid in qids}\n        self.source_len = source_len\n        self.summ_len = target_len\n        self.target_text = []\n        self.source_text = []\n        self.image_ids = []\n        if test_le is not None:\n            test_le_data =json.load(open(test_le))[\"preds\"]\n        else:\n            test_le_data = None\n        idx = 0\n        for qid in self.data:\n            if test_le_data is not None:\n                curr_le_data = test_le_data[idx]\n                idx += 1\n            else:\n                curr_le_data = None\n            prompt, target = build_train_pair(problems, qid, args, curr_le_data)\n            self.target_text.append(target)\n            self.source_text.append(prompt)\n            if str(qid) in name_maps:\n                i_vectors = image_features[int(name_maps[str(qid)])]\n                self.image_ids.append(i_vectors)\n            else:\n                shape = img_shape[args.img_type]\n                self.image_ids.append(np.zeros(shape))\n    \n    def __len__(self):\n        \"\"\"returns the length of dataframe\"\"\"\n\n        return len(self.target_text)\n\n    def __getitem__(self, index):\n        \"\"\"return the input ids, attention masks and target ids\"\"\"\n\n        source_text = str(self.source_text[index])\n        target_text = str(self.target_text[index])\n        image_ids = self.image_ids[index]\n\n        # cleaning data so as to ensure data is in string type\n        source_text = \" \".join(source_text.split())\n        target_text = \" \".join(target_text.split())\n\n        source = self.tokenizer.batch_encode_plus(\n            [source_text],\n            max_length=self.source_len,\n            pad_to_max_length=True,\n            truncation=True,\n            padding=\"max_length\",\n            return_tensors=\"pt\",\n        )\n        target = self.tokenizer.batch_encode_plus(\n            [target_text],\n            max_length=self.summ_len,\n            pad_to_max_length=True,\n            truncation=True,\n            padding=\"max_length\",\n            return_tensors=\"pt\",\n        )\n        source_ids = source[\"input_ids\"].squeeze()\n        source_mask = source[\"attention_mask\"].squeeze()\n        target_ids = target[\"input_ids\"].squeeze().tolist()\n\n        image_ids = torch.tensor(image_ids).squeeze()\n        \n        return {\n            \"input_ids\": source_ids,\n            \"attention_mask\": source_mask,\n            \"image_ids\": image_ids,\n            \"labels\": target_ids,\n        }\n"
        },
        {
          "name": "utils_evaluate.py",
          "type": "blob",
          "size": 3.6083984375,
          "content": "'''\nAdapted from https://github.com/lupantech/ScienceQA\n'''\n\nimport os\nimport json\nimport argparse\nimport warnings\nimport pandas as pd\nfrom sentence_transformers import SentenceTransformer\nfrom evaluations import caculate_bleu, caculate_rouge, caculate_similariry\n\nwarnings.filterwarnings('ignore')\n\ndef get_acc_with_contion(res_pd, key, values):\n    if isinstance(values, list):\n        total_pd = res_pd[res_pd[key].isin(values)]\n    else:\n        total_pd = res_pd[res_pd[key] == values]\n    correct_pd = total_pd[total_pd['true_false'] == True]\n    acc = \"{:.2f}\".format(len(correct_pd) / len(total_pd) * 100)\n    return acc\n\n\ndef get_scores(result_data, rationale_data, results_reference, data_file):\n    # read result file\n    results = result_data\n    num = len(results)\n    assert num == 4241\n    #print(\"number of questions:\", num)\n\n    # read data file\n    sqa_data = json.load(open(data_file))\n\n    # construct pandas data\n    sqa_pd = pd.DataFrame(sqa_data).T\n    res_pd = sqa_pd[sqa_pd['split'] == 'test']  # test set\n\n    # update data\n    for index, row in res_pd.iterrows():\n\n        res_pd.loc[index, 'no_context'] = True if (not row['hint'] and not row['image']) else False\n        res_pd.loc[index, 'has_text'] = True if row['hint'] else False\n        res_pd.loc[index, 'has_image'] = True if row['image'] else False\n        res_pd.loc[index, 'has_text_image'] = True if (row['hint'] and row['image']) else False\n\n        label = row['answer']\n        pred = int(results[index])\n        res_pd.loc[index, 'pred'] = pred\n        res_pd.loc[index, 'true_false'] = (label == pred)\n\n    # accuracy scores\n    acc_average = len(res_pd[res_pd['true_false'] == True]) / num * 100\n    #assert result_file.split('_')[-1] == \"{:.3f}.json\".format(acc_average)\n\n\n    # rationale quality\n\n    ## BLEU\n    bleu1 = caculate_bleu(rationale_data, results_reference, gram=1)\n    bleu4 = caculate_bleu(rationale_data, results_reference, gram=4)\n\n    ## Rouge-L\n    rouge = caculate_rouge(rationale_data, results_reference)\n\n    ## Similarity\n    model = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2').cuda()\n    similariry = caculate_similariry(rationale_data, results_reference, model)\n\n    scores = {\n            \"answer\":{\n                'acc_natural':\n                get_acc_with_contion(res_pd, 'subject', 'natural science'),\n                'acc_social':\n                get_acc_with_contion(res_pd, 'subject', 'social science'),\n                'acc_language':\n                get_acc_with_contion(res_pd, 'subject', 'language science'),\n                'acc_has_text':\n                get_acc_with_contion(res_pd, 'has_text', True),\n                'acc_has_image':\n                get_acc_with_contion(res_pd, 'has_image', True),\n                'acc_no_context':\n                get_acc_with_contion(res_pd, 'no_context', True),\n                'acc_grade_1_6':\n                get_acc_with_contion(res_pd, 'grade', ['grade1', 'grade2', 'grade3', 'grade4', 'grade5', 'grade6']),\n                'acc_grade_7_12':\n                get_acc_with_contion(res_pd, 'grade', ['grade7', 'grade8', 'grade9', 'grade10', 'grade11', 'grade12']),\n                'acc_average':\n                \"{:.2f}\".format(acc_average),\n            },\n            \"rationale\":{\n                'bleu1': bleu1 * 100,\n                'bleu4': bleu4 * 100,\n                'rouge': rouge * 100,\n                'similariry': similariry * 100,\n            }\n    }\n\n    return scores\n\n\ndef print_scores(scores):\n    latex_output = \"\"\n    for key, score in scores.items():\n        print(f\"{key[4:]}: \\t{score}\")\n        latex_output += f\"& {score} \"\n    latex_output += \"\\\\\\\\\"\n    print(latex_output)\n"
        },
        {
          "name": "utils_prompt.py",
          "type": "blob",
          "size": 8.8212890625,
          "content": "'''\nAdapted from https://github.com/lupantech/ScienceQA\n'''\n\nfrom dataclasses import dataclass\nfrom typing import List, Optional\n\ndef get_question_text(problem):\n    question = problem['question']\n    return question\n\n\ndef get_context_text(problem, use_caption):\n    txt_context = problem['hint']\n    img_context = problem['caption'] if use_caption else \"\"\n    context = \" \".join([txt_context, img_context]).strip()\n    if context == \"\":\n        context = \"N/A\"\n    return context\n\n\ndef get_choice_text(probelm, options):\n    choices = probelm['choices']\n    choice_list = []\n    for i, c in enumerate(choices):\n        choice_list.append(\"({}) {}\".format(options[i], c))\n    choice_txt = \" \".join(choice_list)\n    #print(choice_txt)\n    return choice_txt\n\ndef get_origin_answer(problem, options):\n    return problem['choices'][problem['answer']]\n\ndef get_answer(problem, options):\n    return options[problem['answer']]\n\n\ndef get_lecture_text(problem):\n    # \\\\n: GPT-3 can generate the lecture with more tokens.\n    lecture = problem['lecture'].replace(\"\\n\", \"\\\\n\")\n    return lecture\n\n\ndef get_solution_text(problem):\n    # \\\\n: GPT-3 can generate the solution with more tokens\n    solution = problem['solution'].replace(\"\\n\", \"\\\\n\")\n    return solution\n\n\ndef create_one_example(format, question, context, choice, answer, lecture, solution, test_example=True, WithOutput = False, curr_le_data=None):\n\n    input_format, output_format = format.split(\"-\")\n\n    ## Inputs\n    if input_format == \"CQM\":\n        input = f\"Context: {context}\\nQuestion: {question}\\nOptions: {choice}\\n\"\n    elif input_format == \"QCM\":\n        input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\n\"\n    elif input_format == \"QM\":\n        input = f\"Question: {question}\\nOptions: {choice}\\n\"\n    elif input_format == \"QC\":\n        input = f\"Question: {question}\\nContext: {context}\\n\"\n    elif input_format == \"QCMG\":\n        if curr_le_data is not None:\n            input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\n{curr_le_data}\\n\"\n        else:\n            input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\nSolution: {lecture} {solution}\\n\"\n    elif input_format == \"CQMG\":\n        if curr_le_data is not None:\n            input = f\"Context: {context}\\nQuestion: {question}\\nOptions: {choice}\\n{curr_le_data}\\n\"\n        else:\n            input = f\"Context: {context}\\nQuestion: {question}\\nOptions: {choice}\\nSolution: {lecture} {solution}\\n\"\n    # upper bound experiment\n    elif input_format == \"QCML\":\n        input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\nBECAUSE: {lecture}\\n\"\n    elif input_format == \"QCME\":\n        input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\nBECAUSE: {solution}\\n\"\n    elif input_format == \"QCMLE\":\n        input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\nBECAUSE: {lecture} {solution}\\n\"\n\n    elif input_format == \"QCLM\":\n        input = f\"Question: {question}\\nContext: {context}\\nBECAUSE: {lecture}\\nOptions: {choice}\\n\"\n    elif input_format == \"QCEM\":\n        input = f\"Question: {question}\\nContext: {context}\\nBECAUSE: {solution}\\nOptions: {choice}\\n\"\n    elif input_format == \"QCLEM\":\n        input = f\"Question: {question}\\nContext: {context}\\nBECAUSE: {lecture} {solution}\\nOptions: {choice}\\n\"\n    elif input_format == \"QCMA\":\n        input = f\"Question: {question}\\nContext: {context}\\nOptions: {choice}\\nAnswer: The answer is {answer}.\\n\"\n    elif input_format == \"QCA\":\n        input = f\"Question: {question}\\nContext: {context}\\nAnswer: The answer is {answer}. \\nBECAUSE:\"\n\n    # Outputs\n    if test_example:\n        if output_format == 'A':\n            output = \"Answer:\"\n        elif output_format == 'E':\n            output = \"Solution:\"\n        else:\n            output = \"Solution:\"\n    elif output_format == 'A':\n        output = f\"Answer: The answer is {answer}.\"\n\n    elif output_format == 'AL':\n        output = f\"Answer: The answer is {answer}. BECAUSE: {solution}\"\n    elif output_format == 'AE':\n        output = f\"Answer: The answer is {answer}. BECAUSE: {lecture}\"\n    elif output_format == 'ALE':\n        output = f\"Answer: The answer is {answer}. BECAUSE: {lecture} {solution}\"\n    elif output_format == 'AEL':\n        output = f\"Answer: The answer is {answer}. BECAUSE: {solution} {lecture}\"\n\n    elif output_format == 'LA':\n        output = f\"Answer: {lecture} The answer is {answer}.\"\n    elif output_format == 'EA':\n        output = f\"Answer: {solution} The answer is {answer}.\"\n    elif output_format == 'LEA':\n        output = f\"Answer: {lecture} {solution} The answer is {answer}.\"\n    elif output_format == 'ELA':\n        output = f\"Answer: {solution} {lecture} The answer is {answer}.\"\n\n    elif output_format == 'LE':\n        output = f\"Solution: {lecture} {solution}.\"\n\n    elif output_format == 'E':\n        output = f\"Solution: {solution}\"\n        \n    \n    if WithOutput:\n        if output.endswith(\"BECAUSE:\"):\n            output = output.replace(\"BECAUSE:\", \"\").strip()\n        if output_format == 'E':\n            text = input + f'Solution:'\n        elif output_format == 'A':\n            text = input + f'Answer:'\n        else: \n            text = input + f'Solution:'\n        text = text.replace(\"  \", \" \").strip()\n        output = output.replace(\"  \", \" \").strip()\n        return text, output\n        \n        \n    text = input + output\n    text = text.replace(\"  \", \" \").strip()\n    if text.endswith(\"BECAUSE:\"):\n        text = text.replace(\"BECAUSE:\", \"\").strip()\n    return text\n\n\ndef build_prompt(problems, shot_qids, test_qid, args):\n\n    examples = []\n\n    # n-shot training examples\n    for qid in shot_qids:\n        question = get_question_text(problems[qid])\n        context = get_context_text(problems[qid], args.use_caption)\n        choice = get_choice_text(problems[qid], args.options)\n        answer = get_answer(problems[qid], args.options)\n        lecture = get_lecture_text(problems[qid])\n        solution = get_solution_text(problems[qid])\n\n        train_example = create_one_example(args.prompt_format,\n                                           question,\n                                           context,\n                                           choice,\n                                           answer,\n                                           lecture,\n                                           solution,\n                                           test_example=False)\n        examples.append(train_example)\n\n    # test example\n    question = get_question_text(problems[test_qid])\n    context = get_context_text(problems[test_qid], args.use_caption)\n    choice = get_choice_text(problems[test_qid], args.options)\n    answer = get_answer(problems[test_qid], args.options)\n    lecture = get_lecture_text(problems[test_qid])\n    solution = get_solution_text(problems[test_qid])\n\n    test_example = create_one_example(args.prompt_format,\n                                      question,\n                                      context,\n                                      choice,\n                                      answer,\n                                      lecture,\n                                      solution,\n                                      test_example=True)\n    examples.append(test_example)\n\n    # create the prompt input\n    prompt_input = '\\n\\n'.join(examples)\n\n    return prompt_input\n\ndef build_train_pair(problems, test_qid, args, curr_le_data=None):\n\n    examples = []\n\n    # test example\n    question = get_question_text(problems[test_qid])\n    context = get_context_text(problems[test_qid], args.use_caption)\n    choice = get_choice_text(problems[test_qid], args.options)\n    \n    lecture = get_lecture_text(problems[test_qid])\n    solution = get_solution_text(problems[test_qid])\n    answer_option = get_answer(problems[test_qid], args.options)\n    answer = \"(\" + answer_option + \")\"\n    \n    test_example, target = create_one_example(args.prompt_format,\n                                      question,\n                                      context,\n                                      choice,\n                                      answer,\n                                      lecture,\n                                      solution,\n                                      test_example=False,WithOutput = True, curr_le_data=curr_le_data)\n    examples.append(test_example)\n    \n    target = target.replace(\"Answer:\", \"\").strip()\n    # create the prompt input\n    prompt_input = '\\n\\n'.join(examples)\n\n    return prompt_input, target\n\n@dataclass(frozen=True)\nclass InputFeatures:\n    \"\"\"\n    A single set of features of data.\n    Property names are the same names as the corresponding inputs to a model.\n    \"\"\"\n\n    input_ids: List[List[int]]\n    attention_mask: Optional[List[List[int]]]\n    token_type_ids: Optional[List[List[int]]]\n    le_input_ids: List[List[int]]\n    le_attention_mask: Optional[List[List[int]]]\n    le_token_type_ids: Optional[List[List[int]]]\n    label: Optional[int]"
        },
        {
          "name": "vision_features",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}