{
  "metadata": {
    "timestamp": 1736559800384,
    "page": 527,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rocky/python-uncompyle6",
      "stars": 3850,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.439453125,
          "content": "# THis is an EditorConfig file\n# https://EditorConfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = tab\nindent_size = 4\ninsert_final_newline = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\n\n[*.py]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ninsert_final_newline = true\n\n# Tab indentation (no size specified)\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.28125,
          "content": "*.pyc\n*.pyo\n*_dis\n*~\n.mypy_cache\n/.cache\n/.eggs\n/.hypothesis\n/.idea\n/.mypy_cache\n/.pytest_cache\n/.python-version\n/.tox\n/.venv*\n/README\n/__pkginfo__.pyc\n/dist\n/how-to-make-a-release.txt\n/nose-*.egg\n/pycharm-venv\n/tmp\n/uncompyle6.egg-info\n/unpyc\n/venv\nChangeLog\n__pycache__\nbuild\nnohup.out\n"
        },
        {
          "name": ".isort.cfg",
          "type": "blob",
          "size": 0.3037109375,
          "content": "[settings]\nmulti_line_output = 3\ninclude_trailing_comma = True\nforce_grid_wrap = 0\nuse_parentheses = True\nline_length = 88\nknown_crunch = cr, zz9d, zz9lib, pycrunch, silhouette\nsections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,CRUNCH,LOCALFOLDER\ndefault_section = THIRDPARTY\ncombine_as_imports = 1\nprofile = black\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5185546875,
          "content": "default_language_version:\n  python: python\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.5.0\n    hooks:\n    - id: check-merge-conflict\n    - id: debug-statements\n      stages: [pre-commit]\n    - id: end-of-file-fixer\n      stages: [pre-commit]\n-   repo: https://github.com/pycqa/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n        stages: [pre-commit]\n-   repo: https://github.com/psf/black\n    rev: 23.12.1\n    hooks:\n    - id: black\n      language_version: python3\n      stages: [pre-commit]\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.494140625,
          "content": "language: python\n\npython:\n#  - '3.5'\n#  - '2.7'\n#  - '3.4'\n  - '3.6'\n  - '3.8'\n\nmatrix:\n  include:\n    - python: '3.7'\n      dist: xenial  # required for Python >= 3.7 (travis-ci/travis-ci#9069)\n\ninstall:\n# Remove the next line when xdis 6.0.0 is released\n# - pip install git://github.com/rocky/python-xdis.git#egg=xdis\n- pip install -e .\n- pip install -r requirements-dev.txt\n\nscript:\n- python ./setup.py develop && COMPILE='--compile' make check\n\n# blacklist\nbranches:\n  except:\n    - data-driven-pytest\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "DECOMPYLE-2.4-CHANGELOG.txt",
          "type": "blob",
          "size": 5.9482421875,
          "content": "This is the changelog from *decompyle*'s release 2.4 and before\npassed on by Dan Pascu\n\n\nrelease 2.4 (Dan Pascu)\n  - Replaced the way code structures are identified by the parser.\n    Previously, the scanner introduced some COME_FROM entries in the\n    dissasembly output to mark all the destinations of jump instructions.\n    Using these COME_FROM labels the parser was then able to identify the\n    code structures (if tests, while loops, etc). Up to python-2.3 this was\n    possible because the code structures were clearly defined and jump\n    targets were always to the same points in a given strcuture making it\n    easy to identify the structure. Python 2.3 however introduced optimized\n    jumps to increase code performance. In the previous version of decompyle\n    (2.3) we used a technique to identify the code structures and then used\n    these structures to determine where the jump targets would have been if\n    not optimized. Using this information we then added COME_FROM labels at\n    the points where they would have been if not optimized, thus emulating\n    the way decompyle worked with versions before python 2.3. However with\n    the introduction of even more optimizations in python 2.4 this technique\n    no longer works. Not only the jump targets are no longer an effective\n    mean for the parser to identify the code structures, but also trying to\n    emulate the old way things were solved when it clearly no longer works\n    is not the right solution. To solve this issue, the code to identify the\n    structures that we had developed in version 2.3, was used to add real\n    start/end points for strcuture identification, instead of the COME_FROM\n    labels. Now these new start/end labels are used by the parser to more\n    precisely identify the structures and the COME_FROM labels were removed\n    completely. The scanner is responsible to identify these code structures\n    and use any knowledge of optimizations that python applies to determine\n    the start/end points of any structure and then mark them with certain\n    keywords that are understood by the parser.\n  - Correctly identify certain `while 1' structures that were not\n    recognized in the previous version.\n  - Added support for new byte code constructs used by python 2.4\n\nrelease 2.3.2\n  - tidied up copyright and changelog information for releases 2.3 and later\n\nrelease 2.3.1 (Dan Pascu)\n  - implemented a structure detection technique that fixes problems with\n    optimised jumps in Python >= 2.3. In the previous release (decompyle 2.3),\n    these problems meant that some files were incorrectly decompiled and\n    others could not be decompiled at all. With this new structure detection\n    technique, thorough testing over the standard python libraries suggests\n    that decompyle 2.3.1 can handle everything that decompyle 2.2beta1 could,\n    plus new Python 2.3 bytecodes and constructs.\n\nrelease 2.3 (Dan Pascu)\n  - support for Python 2.3 added\n  - use the marshal and disassembly code from their respective python\n    versions, so that decompyle can manipulate bytecode independently\n    of the interpreter that runs decompyle itself (for example it can\n    decompile python2.3 bytecode even when running under python2.2)\n\n——————————————————\n\nrelease 2.2beta1 (hartmut Goebel)\n  - support for Python 1.5 up to Python 2.2\n  - no longer requires to be run with the Python interpreter version\n    which generated the byte-code.\n  - requires Python 2.2\n  - pretty-prints docstrings, hashes, lists and tuples\n  - decompyle is now a script and a package\n  - added emacs mode-hint and tab-width for each file output\n  - enhanced test suite: more test patterns, .pyc/.pyo included\n  - avoids unnecessary 'global' statements\n  - still untested: EXTENDED_ARG\n\n  internal changes:\n  - major code overhoul: splitted into several modules, clean-ups\n  - use a list of valid magics instead of the single one from imp.py\n  - uses copies of 'dis.py' for every supported version. This ensures\n    correct disassemling of the byte-code.\n  - use a single Walker and a single Parser, thus saving time and memory\n  - use augmented assign and 'print >>' internally\n  - optimized 'Walker.engine', the main part of code generation\nrelease 0.6.0: (hartmut Goebel)\n  - extended print (Python 2.0)\n  - extended import (Python 2.0) (may not cover all cases)\n  - augmented assign (Python 2.0) (may not cover all cases)\n  - list comprehensions (Python 2.0)\n  - equivalent for 'apply' (Python 1.6)\n  - if .. elif .. else are now nested as expected\n  - assert test, data\n  - unpack list corrected (was the same as unpack tuple)\n  - fixed unpack tuple (trailing semicolon was missing)\n  - major speed up :-)\n  - reduced memory usage (pre-alpha-0.5 has increased it a lot)\n  - still missing: EXTENDED_ARG\n\npre-alpha-0.5: (hartmut Goebel)\n  - *args, **kwargs\n  - global\n  - formal tuple parameters (eg. def a(self, (x,y,z)) )\n  - actual lambda parameters (eg.  X(lambda z: z**2) )\n  - remove last 'return None' in procedures\n  - remove last 'return locals()' in class definitions\n  - docstrings\n\npre-alpha-0.4: (hartmut Goebel)\n  - assert\n  - try/except/finally\n  - parentheses in expressions\n  - nested expressions\n  - extracted dissassemble() from module dis and\n    removed ugly redirect of stdout, thus saved a lot of\n    ugly code and a lot of memory\n\npre-alpha-0.3: (hartmut Goebel)\n  - keyword arguments\n  - some boolean expressions\n  - and/or\n  - complex conditions in if/while\n  - read byte-code from .pyc without importing\n  - access to the body of classes and modules\n  - class and function definitions\n  - a = b = c = xxx\n\npre-alpha-0.1 -> pre-alpha-0.2:\n  -  SET_LINENO filtered out in lexer now\n  -  added support for subscripts (just for Christian Tismer :-)\n  -  fixed bug with handling of BUILD_{LIST,TUPLE} & CALL_FUNCTION\n  -  dict-building support\n  -  comparison support\n  -  exec support\n  -  del support\n  -  pass support\n  -  slice support\n  -  no more extraneous (albeit legal) commas\n  -  finally, it excepts try [sic] but not all 42 variations of it\n"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 9.3466796875,
          "content": "# Introduction\n\nThis project started around 1999 spanning back to Python 1.5\n\nIn the interest of shortening what is written here, I am going to start where we left off where [decompyle 2.4's history](https://github.com/rocky/decompile-2.4/blob/master/HISTORY.md) ends.\n\nFor the earlier history up to 2006 and the code up until Python 2.4, which I find interesting, look at that link.\n\nSometime around 2014 was the dawn of [\"uncompyle\" and PyPI](https://pypi.python.org/pypi/uncompyle/1.1) &mdash; the era of\npublic version control. Dan Pascu's code although not public used [darcs](http://darcs.net/) for version control. I converted the darcs repository to git and put this at [decompyle-2.4](https://github.com/rocky/decompile-2.4).\n\n# uncompyle, unpyc\n\nIn contrast to _decompyle_ that went up to Python 2.4, _uncompyle_, at least in its final versions, runs only on Python 2.7. However it accepts bytecode back to Python 2.5. Thomas Grainger is the package owner of this, although Hartmut is still listed as the author.\n\nThe project exists not only on [github](https://github.com/gstarnberger/uncompyle) but also on\n[bitbucket](https://bitbucket.org/gstarnberger/uncompyle) and later the defunct [google\ncode](https://code.google.com/archive/p/unpyc/) under the name _unpyc_. The git/svn history goes back to 2009. Somewhere in there the name was changed from \"decompyle\" to \"unpyc\" by Keknehv, and then to \"uncompyle\" by Guenther Starnberger.\n\nThe name Thomas Grainger isn't found in (m)any of the commits in the several years of active development. First Keknehv worked on this up to Python 2.5 or so while accepting Python bytecode back to 2.0 or so. Then \"hamled\" made a few commits earlier on, while Eike Siewertsen made a few commits later on. But mostly \"wibiti\", and Guenther Starnberger got the code to where uncompyle2 was around 2012.\n\nWhile John Aycock and Hartmut Goebel were well versed in compiler technology, those that have come afterwards don't seem to have been as facile in it.  Furthermore, documentation or guidance on how the decompiler code worked, comparison to a conventional compiler pipeline, how to add new constructs, or debug grammars was weak. Some of the grammar tracing and error reporting was a bit weak as well.\n\nGiven this, perhaps it is not surprising that subsequent changes tended to shy away from using the built-in compiler technology mechanisms and addressed problems and extensions by some other means.\n\nSpecifically, in `uncompyle`, decompilation of python bytecode 2.5 & 2.6 is done by transforming the byte code into a pseudo-2.7 Python bytecode and is based on code from Eloi Vanderbeken. A bit of this could have been easily added by modifying grammar rules.\n\n\n# uncompyle2, uncompyle3, uncompyle6\n\n`Uncompyle6`, which I started in 2015, owes its existence to the fork of [uncompyle2](https://github.com/Mysterie/uncompyle2) by Myst herie (Mysterie) whose first commit picks up at 2012. I chose this since it seemed to have been at that time the most actively, if briefly, worked on. Also starting around 2012 is Dark Fenx's [uncompyle3](https://github.com/DarkFenX/uncompyle3) which I used for inspiration for Python3 support.\n\nI started working on this late 2015, mostly to add fragment support. In that, I decided to make this runnable on Python 3.2+ and Python 2.6+ while handling Python bytecodes from Python versions 2.5+ and\n3.2+. In doing so, it was expedient to separate this into three projects:\n\n* marshaling/unmarshaling, bytecode loading and disassembly ([xdis](https://pypi.python.org/pypi/xdis)),\n* parsing and tree building ([spark_parser](https://pypi.python.org/pypi/spark_parser)),\n* this project - grammar and semantic actions for decompiling\n  ([uncompyle6](https://pypi.python.org/pypi/uncompyle6)).\n\n `uncompyle6`, abandons the idea found in some 2.7 version of `uncompyle` that support Python 2.6 and 2.5 by trying to rewrite opcodes at the bytecode level.\n\nHaving a grammar per Python version is simpler to maintain, cleaner and it scales indefinitely.\n\nOver the many years, code styles and Python features have changed. However brilliant the code was and still is, it hasn't really had a single public active maintainer. And there have been many forks of the code.\n\nThat this code has been in need of an overhaul has been recognized by the Hartmut more than two decades ago.\n\n[decompyle/uncompile__init__.py](https://github.com/gstarnberger/uncompyle/blob/master/uncompyle/__init__.py#L25-L26)\n\n    NB. This is not a masterpiece of software, but became more like a hack.\n    Probably a complete rewrite would be sensefull. hG/2000-12-27\n\nIn 2021, I created three git branches in order to allow the decompiler to run on a wide variety of Python versions from 2.4 up to 3.10. (Note this doesn't mean we decompile these versions. In fact we decompile starting from Python 1.0 up to Python 3.8 and no later than that.)\n\nUsing the separate git branches allows me to continually improve the coding style and add feature support while still supporting older Pythons. Supporting older Pythons is nice (but not strictly necessary) when you want to debug decompilation on older Pythons.\n\nI have spent a great deal of time trying to organize, modularize and even modernize the code so that it can handle more Python versions more gracefully (with still only moderate success).\n\nTests for the project have been, or are being, culled from all of the projects mentioned above or below. Quite a few have been added to improve grammar coverage and to address the numerous bugs that have been encountered.\n\n\n# unpyc3 and pydc\n\nAnother approach to decompiling, and one that doesn't use grammars is to do something like simulate execution symbolically and build expression trees off of stack results. Control flow in that approach\nstill needs to be handled somewhat ad hoc.  The two important projects that work this way are [unpyc3](https://code.google.com/p/unpyc3/) and most especially [pycdc](https://github.com/zrax/pycdc) The latter\nproject is largely by Michael Hansen and Darryl Pogue. If they supported getting source-code fragments, did a better job in supporting Python more fully, and had a way I could call it from Python, I'd probably would have ditched this and used that. The code runs blindingly fast and spans all versions of Python, although more recently Python 3 support has been lagging. The code is impressive for its smallness given that it covers many versions of Python. However, I think it has reached a scalability issue, same as all the other efforts. To handle Python versions more accurately, I think that code base will need to have a lot more code specially which specializes for Python versions. And then it will run into a modularity problem.\n\n# So you want to write a decompiler for Python?\n\nIf you think, as I am sure will happen in the future, \"hey, I can just write a decompiler from scratch and not have to deal with all of the complexity in uncompyle6\", think again. What is likely to happen is that you'll get at best a 90% solution working for a single Python release that will be obsolete in about a year, and more obsolete each subsequent year.\n\nWriting a decompiler for Python gets harder as it Python progresses. Writing decompiler for Python 3.7 isn't as easy as it was for Python 2.2. For one thing, now that Python has a well-established AST, that opens another interface by which code can be improved.\n\nIn Python 3.10 I am seeing (for the first time?) bytecode getting moved around so that it is no longer the case that line numbers have to be strictly increasing as bytecode offsets increase. And I am seeing dead code appear as well.\n\nThat said, if you still feel you want to write a single version decompiler, look at the test cases in this project and talk to me. I may have some ideas that I haven't made public yet. See also what I've written about the on how this code works and on [decompilation in dynamic runtime languages](http://rocky.github.io/Deparsing-Paper.pdf) in general.\n\n\n\n# Earley Algorithm Parser\n\nThis project deparses using an Earley-algorithm parse. But in order to do this accurately, the process of tokenization is a bit more involved in the scanner. We don't just disassemble bytecode and use the opcode name. That aspect hasn't changed from the very first decompilers. However understanding _what_ information needs to be made explicit and what pseudo instructions to add that accomplish this has taken some time to understand.\n\nEarley-algorithm parsers have gotten negative press, most notably by the dragon book. Having used this a bit, I am convinced having a system that handles ambiguous grammars is the right thing to do and matches the problem well. In practice the speed of the parser isn't a problem when one understand what's up. And this has taken a little while to understand.\nEarley-algorithm parsers for context free languages or languages that are to a large extent context free and tend to be linear and the grammar steers towards left recursive rules. There is a technique for improving LL right recursion, but our parser doesn't have that yet.\n\nThe [decompiling paper](http://rocky.github.io/Deparsing-Paper.pdf) discusses these aspects in a more detail.\n\n\nFor a little bit of the history of changes to the Earley-algorithm parser, see the file [NEW-FEATURES.rst](https://github.com/rocky/python-spark/blob/master/NEW-FEATURES.rst) in the [python-spark github repository](https://github.com/rocky/python-spark).\n\nNB. If you find mistakes, want corrections, or want your name added (or removed), please contact me.\n"
        },
        {
          "name": "HOW-TO-REPORT-A-BUG.md",
          "type": "blob",
          "size": 13.419921875,
          "content": "<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [Ethics](#ethics)\n- [The importance of your bug report](#the-importance-of-your-bug-report)\n- [The difficulty of the problem and your bug](#the-difficulty-of-the-problem-and-your-bug)\n- [Is it really a bug?](#is-it-really-a-bug)\n    - [Do you have valid bytecode?](#do-you-have-valid-bytecode)\n    - [Semantic equivalence vs. exact source code](#semantic-equivalence-vs-exact-source-code)\n- [What to send (minimum requirements)](#what-to-send-minimum-requirements)\n- [What to send (additional helpful information)](#what-to-send-additional-helpful-information)\n    - [But I don't *have* the source code!](#but-i-dont-have-the-source-code)\n        - [But I don't *have* the source code and am incapable of figuring how to do a hand disassembly!](#but-i-dont-have-the-source-code-and-am-incapable-of-figuring-how-to-do-a-hand-disassembly)\n- [Narrowing the problem](#narrowing-the-problem)\n- [Karma](#karma)\n- [Confidentiality of Bug Reports](#confidentiality-of-bug-reports)\n\n<!-- markdown-toc end -->\n\nTL;DR (too long; didn't read)\n\n* Don't do something illegal. And don't ask me to do something illegal or help you do something illegal.\n* We already have an infinite supply of decompilation bugs that need fixing, and an automated mechanism for finding more. Decompilation bugs get addressed by easiness to fix and by whim. If you expect yours to be fixed ahead of those, you need to justify why. You can ask for a hand-assisted decompilation, but that is expensive and beyond what most are willing to spend. A $100 fee is needed just to look at the bytecode.\n* When asking for help, you may be asked for what you've tried on your own first. There are plenty of sources of information about this code.\n* Bugs get fixed, slowly. Sometimes on the order of months or years. If you are looking for *timely* help or support, that is typically known as a _paid_ service.\n* Submitting a bug or issue report that is likely to get acted upon may require a bit of effort on your part to make it easy for the problem solver. If you are not willing to do that, please don't waste your or our time. Bug report may be closed with about as much thought and care as apparent in the effort to create the bug. Supporting the project however, does increase the likelihood of your issue getting noticed and acted upon.\n\n# Ethics\n\nDo not use this program for unethical or illegal purposes. More detestable, at least to me, is asking for help to assist you in something that might not legitimate.\n\nDon't use the issue tracker for such unethical or illegal solicitations. To try to stave off illegitimate behavior, you should note that the issue tracker, the code, and bugs mentioned in that are in the open: there is no\nconfidentiality. You may be asked about the authorship or claimed ownership of the bytecode. If I think something is not quite right, I may label the issue questionable which may make the it easier those who are looking for illegal activity.\n\n\n# The importance of your bug report\n\nFor many open-source projects bugs where the expectation is that bugs are rare, reporting bugs in a *thoughtful* way can be helpful. See also [How to Ask Questions the Smart Way](http://www.catb.org/~esr/faqs/smart-questions.html).\n\nIn this project though, most of the bug reports boil down to the something like: I am trying to reverse engineer some code that I am not the author/owner and that person doesn't want me to have access to. I am hitting a problem somewhere along the line which might have to do with decompilation. But it could be something else like how the bytecode was extracted, some problem in deliberately obfuscated code, or the use some kind of Python bytecode version that isn't supported by the decompiler. Gee this stuff is complicated, here's an open source project, so maybe someone there will help me figure stuff out.\n\nWhile you are free to report bugs, unless you sponsor the project, I may close them with about the same amount of effort spent that I think was used to open the report for them. And if you spent a considerable amount of time to create the bug report but didn't follow instructions given here and in the issue template, I am sorry in advance. Just go back, read, and follow instructions.\n\nThis project already has an infinite supply of bugs that have been narrowed to the most minimal form and where I have source code to compare against. And in the unlikely event this supply runs out, I have automated means for generating *another* infinite supply.\n\nThe task of justifying why addressing your bug is of use to the community, and why it should be prioritized over the others, is the bug reporter's responsibility.\n\nWhile in the abstract, I have no problem answering questions about how to read a Python traceback or install Python software, or trying to understand what is going wrong in your particular setup, I am not a paid support person and there other things I'd rather be doing with my limited volunteer time. So save us both time, effort, and aggravation: use other avenues like StackOverflow. Again, justifying why you should receive unpaid help is the help requester's responsibility.\n\n\n# The difficulty of the problem and your bug\n\nThis decompiler is a constant work in progress: Python keeps\nchanging, and so does its code generation.\n\nThere is no Python decompiler yet that I know about that will decompile everything. Overall, I think this one probably does the best job of *any* Python decompiler that handles such a wide range of versions.\n\nBut at any given time, there are a number of valid Python bytecode files that I know of that will cause problems. See, for example, the list in\n[`test/stdlib/runtests.sh`](https://github.com/rocky/python-uncompyle6/blob/master/test/stdlib/runtests.sh).\n\nThere are far more bug reporters than there are bug fixers.\n\nUnless you are a sponsor of this project, it may take a while, maybe a week or so, before the bug report is noticed, let alone acted upon. Things eventually get fixed, but it may take years. And if your bug hasn't been narrowed, it might happen as a result of some other bug fix.\n\n# Is it really a bug?\n\n\n## Do you have valid bytecode?\n\nAs mentioned in README.rst, this project doesn't handle obfuscated\ncode, release candidates, and the most recent versions of Python: version 3.9 and up. See README.rst for suggestions for how to remove some kinds of\nobfuscation.\n\nChecking if bytecode is valid is pretty simple: disassemble the code.\nPython comes with a disassembly module called `dis`. A prerequisite\nmodule for this package, `xdis` has a cross-python version\ndisassembler called `pydisasm`. Using that with the `-F extended` option, generally provides a more comprehensive disassembly than is provided by other disassemblers.\n\n## Semantic equivalence vs. exact source code\n\nConsider how Python compiles something like \"(x*y) + 5\". Early on Python creates an \"abstract syntax tree\" (AST) for this. And this is \"abstract\" in the sense that unimportant, redundant or unnecessary items have been removed. Here, this means that any notion that you wrote \"x+y\" in parenthesis is lost, since in this context they are unneeded. Also lost is the fact that the multiplication didn't have spaces around it while the addition did. It should not come as a surprise then that the bytecode which is derived from the AST also has no notion of such possible variation. Generally this kind of thing isn't noticed since the Python community has laid out a very rigid set of formatting guidelines; and it has largely beaten the community into compliance.\n\nAlmost all versions of Python can perform some sort of code\nimprovement that can't be undone. In earlier versions of Python it is\nrare; in later Python versions, it is more common.\n\nIf the code emitted is semantically equivalent, then this isn't a bug.\n\n\nFor example the code might be\n\n```python\nif a:\n  if b:\n     x = 1\n```\n\nand we might produce:\n\n```python\nif a and b:\n  x = 1\n```\n\nThese are equivalent. Sometimes\n\n```\nelse:\n   if ...\n\n```\n\nmay come out as `elif` or vice versa.\n\n\nAs mentioned in the README, It is possible that Python changes what\nyou write to be more efficient. For example, for:\n\n\n```python\nif True:\n  x = 5\n```\n\nPython will generate code like:\n\n```python\nx = 5\n```\n\nEven more extreme, if your code is:\n\n```python\nif False:\n   x = 1\n   y = 2\n   # ...\n```\n\nPython will eliminate the entire \"if\" statement.\n\nSo just because the text isn't the same, this does not necessarily mean there's a bug.\n\n# What to send (minimum requirements)\n\nThe basic requirement is pretty simple:\n\n* Python bytecode\n* Python source text\n\nPlease don't put files on download services that one has to register\nfor or can't get to by issuing a simple `curl` or `wget`. If you can't\nattach it to the issue, or create a github gist, then the code you are\nsending is too large.\n\nAlso try to narrow the bug. See below.\n\n# What to send (additional helpful information)\n\nSome kind folks also give the invocation they used and the output\nwhich usually includes an error message produced. This is\nhelpful. From this, I can figure out what OS you are running this on\nand what version of *uncompyle6* was used. Therefore, if you _don't_\nprovide the input command and the output from that, please give:\n\n* _uncompyle6_ version used\n* OS that you used this on\n* Python interpreter version used\n\n\n## But I don't *have* the source code!\n\nThere is Python assembly code on parse errors, so simply by hand decompile that. To get a full disassembly, use `pydisasm` from the [xdis](https://pypi.python.org/pypi/xdis) package. Opcodes are described in the documentation for the [dis](https://docs.python.org/3.6/library/dis.html) module.\n\n### But I don't *have* the source code and am incapable of figuring how to do a hand disassembly!\n\nWell, you could learn. No one is born into this world knowing how to disassemble Python bytecode. And as Richard Feynman once said, \"What one fool can learn, so can another.\"\n\nIf this is too difficult, or too time consuming, or not of interest to you, then you might consider [sponsoring](https://github.com/sponsors/rocky) the project. [Crazy\nCompilers](http://www.crazy-compilers.com/decompyle/) offers a byte-code decompiler service for versions of Python up to 2.6. (If there are others around let me know and I'll list them here.) Don't be surprised if I ask you to pay for work (if I think the work is ethical) when you want me to work on your problem that I think isn't of interest or benefit to anyone but yourself or a small limited number of people, or I think the need is questionable.\n\n# Narrowing the problem\n\nI don't need or want the entire source code base for the file(s) or module(s) can't be decompiled. I just need those file(s) or module(s). If there are problems in several files, file a bug report for each file.\n\nPython modules can get quite large, and usually decompilation problems\noccur in a single function or maybe the main-line code but not any of\nthe functions or classes. So please chop down the source code by\nremoving those parts that do to decompile properly.\n\nBy doing this, you'll probably have a better sense of what exactly is\nthe problem. Perhaps you can find the boundary of what decompiles, and\nwhat doesn't. That is useful. Or maybe the same file will decompile\nproperly on a neighboring version of Python. That is helpful too.\n\nIn sum, the more you can isolate or narrow the problem, the more\nlikely the problem will be fixed and fixed sooner.\n\n# Karma\n\nI realize that following the instructions given herein puts a bit of\nburden on the bug reporter. This is justified since it attempts to balance\nthe burden and effort needed to fix the bug with the amount of effort to report the problem. And it attempts\nto balance number of would-be bug reporters with the number of bug\nfixers. Better bug reporters are more likely to move in the category\nof bug fixers.\n\nThe barrier to reporting a big is pretty small: all you really need is\na github account, and the ability to type something after clicking\nsome buttons. So the reality is that many people just don't bother to\nread these instructions, let alone follow it to any simulacrum.\n\nThat said, bugs sometimes get fixed even though these instructions are not followed.\n\nI may take into consideration is the bug reporter's karma.\n\n* Have you demonstrably contributed to open source? I may look at your github profile to see what contributions you have made, how popular those contributions are, or how popular you are.\n* How appreciative are you? Have you starred this project that you are seeking help from? Have you starred _any_ github project? And the above two kind of feed into ...\n* Attitude. Some people feel that they are doing me and the world a\n  great favor by just pointing out that there is a problem whose\n  solution would greatly benefit them. (This might account partially\n  for the fact that those that have this attitude often don't read or\n  follow instructions such as those given here.)\n\n\n# Confidentiality of Bug Reports\n\nWhen you report a bug, you are giving up confidentiality to the source\ncode and the byte code. However, I would imagine that if you have\nnarrowed the problem sufficiently, confidentiality of the little that\nremains would not be an issue.\n\nHowever feel free to remove any comments, and modify variable names\nor constants in the source code.\n\nIf there is some legitimate reason to keep confidentiality, you can contact me by email to explain the extenuating circumstances. However I tend to discard without reading anonymous email.\n\nPrivate consulting available via https://calendly.com/rb3216 rates: $150 for 30 minutes; $250 for 60 minutes.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.451171875,
          "content": "include README.rst\ninclude ChangeLog\ninclude HISTORY.md\ninclude HOW-TO-REPORT-A-BUG.md\ninclude COPYING\ninclude Makefile\ninclude requirements.txt\ninclude requirements-dev.txt\ninclude DECOMPYLE-2.4-CHANGELOG.txt\ninclude __pkginfo__.py\nrecursive-include uncompyle6 *.py\ninclude bin/uncompyle6\ninclude bin/pydisassemble\ninclude pytest/Makefile\ninclude test/Makefile\nrecursive-include test *.py *.pyc\nrecursive-include pytest *.py\nrecursive-include pytest/testdata *\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.041015625,
          "content": "# Compatibility for us old-timers.\n\n# Note: This makefile include remake-style target comments.\n# These comments before the targets start with #:\n# remake --tasks to shows the targets and the comments\n\nGIT2CL ?= git2cl\nPYTHON ?= python\nPYTHON3 ?= python3\nRM      ?= rm\nLINT    = flake8\n\n#EXTRA_DIST=ipython/ipy_trepan.py trepan\nPHONY=all check check-2.7 check-3.4 \\\n     clean distcheck pytest check-long check-short \\\n     dist distclean lint flake8 test rmChangeLog clean_pyc \\\n     2.6 5.0 5.3 5.6 5.8 7.2 7.3 check-short\n\nTEST_TYPES=check-long check-short check-2.7 check-3.4\n\n#: Default target - same as \"check\"\nall: check\n\n# Run all tests\ncheck:\n\t@PYTHON_VERSION=`$(PYTHON) -V 2>&1 | cut -d ' ' -f 2 | cut -d'.' -f1,2`; \\\n\t$(MAKE) check-$$PYTHON_VERSION\n\n# Run all quick tests\ncheck-short: pytest\n\t$(MAKE) -C test check-short\n\n# Note for 2.6 use <=3.0.1 see requirements-dev.txt\n#: Tests for Python 2.7, 3.3 and 3.4\ncheck-2.6 check-2.7 check-3.3 check-3.4 check-3.5: pytest\n\t$(MAKE) -C test $@\n\n#: Tests for Python 3.2 and 3.5 - pytest doesn't work here\n# Or rather 3.5 doesn't work not on Travis\ncheck-3.0 check-3.1 check-3.2 check-3.6:\n\t$(MAKE) -C test $@\n\ncheck-3.7: pytest\n\t$(MAKE) -C test check\n\ncheck-3.8:\n\t$(MAKE) -C test check\n\n#:PyPy 2.6.1 PyPy 5.0.1, or PyPy 5.8.0-beta0\n# Skip for now\n2.6 5.0 5.3 5.6 5.8:\n\n#:PyPy pypy3-2.4.0 Python 3.6.1:\n7.1 pypy-3.2 2.4:\n\t$(MAKE) -C test $@\n\n#:PyPy versions\n7.2 7.3:\n\t$(MAKE) -C test $@\n\n#:pyston versions\n2.3:\n\t$(MAKE) -C test $@\n\n#: Run py.test tests\npytest:\n\t$(MAKE) -C pytest check\n\n#: Clean up temporary files and .pyc files\nclean: clean_pyc\n\t$(PYTHON) ./setup.py $@\n\t(cd test && $(MAKE) clean)\n\n#: Create source (tarball) and wheel distribution\ndist: distcheck\n\t$(PYTHON) ./setup.py sdist bdist_wheel\n\n# perform some checks on the package via setup.py\ndistcheck:\n\t$(PYTHON) ./setup.py check\n\n#: Remove .pyc files\nclean_pyc:\n\t( cd uncompyle6 && $(RM) -f *.pyc */*.pyc )\n\n#: Create source tarball\nsdist:\n\t$(PYTHON) ./setup.py sdist\n\n\n#: Style check. Set env var LINT to pyflakes, flake, or flake8\nlint: flake8\n\n# Check StructuredText long description formatting\ncheck-rst:\n\t$(PYTHON) setup.py --long-description | rst2html.py > python3-trepan.html\n\n#: Lint program\nflake8:\n\t$(LINT) uncompyle6\n\n#: Create binary egg distribution\nbdist_egg:\n\t$(PYTHON) ./setup.py bdist_egg\n\n\n#: Create binary wheel distribution\nwheel:\n\t$(PYTHON) ./setup.py bdist_wheel\n\n\n# It is too much work to figure out how to add a new command to distutils\n# to do the following. I'm sure distutils will someday get there.\nDISTCLEAN_FILES = build dist *.pyc\n\n#: Remove ALL derived files\ndistclean: clean\n\t-rm -fvr $(DISTCLEAN_FILES) || true\n\t-find . -name \\*.pyc -exec rm -v {} \\;\n\t-find . -name \\*.egg-info -exec rm -vr {} \\;\n\n#: Install package locally\nverbose-install:\n\t$(PYTHON) ./setup.py install\n\n#: Install package locally without the verbiage\ninstall:\n\t$(PYTHON) ./setup.py install >/dev/null\n\nrmChangeLog:\n\trm ChangeLog || true\n\n#: Create a ChangeLog from git via git log and git2cl\nChangeLog: rmChangeLog\n\tgit log --pretty --numstat --summary | $(GIT2CL) >$@\n\n.PHONY: $(PHONY)\n"
        },
        {
          "name": "NEWS.md",
          "type": "blob",
          "size": 41.8671875,
          "content": "3.9.2: 2024-07-21\n=================\n\n- track xdis API changes\n- Bug fixes and lint\n\n3.9.1: 2024-05-15\n=================\n\nLots of changes major changes. track xdis API has changes.\n\nSeparate Phases more clearly:\n* disassembly\n* tokenization\n* parsing\n* abstracting to AST (more is done in newer projects)\n* printing\n\nAlthough we do not decompile bytecode greater than 3.8, code supports running from up to 3.12.\n\nMany bugs fixed.\n\nA lot of Linting and coding style modernization.\n\nWork done in preparation for Blackhat Asia 2024\n\n3.9.0: 2022-12-22\n=================\n\n* deparse generator expressions for Python 3.0 .. 3.2\n* Python 3.0 list comprehension.\n* Fix Issues #310, #344, #377, #391, #409, #414\n* Limited support for 3.8+ f-string \"=\" specifier\n* Correct 2.5-7 relative import formatting\n* Miscellaneous bug fixing\n* remove \\n in lambda\n* Python 2.6 grammar cleanup\n* Correct some Python 2.6 chain compare decompilation\n* Ensure no parenthesis subscript slices\n* Correct 2.x formatting \"slice2\" nonterminal\n* Correct 3.7 imports\n* Improve \"async for\" parsing\n* Handle BUILD_MAP opcode\n* match Python AT better\n* Correct 3.7 positional args\n* PyPy 3.7 and PyPy 3.8 support\n* Miscellaneous linting, isorting, blacking\n\n3.8.0: 2021-10-29\n=================\n\n* Better handling of invalid bytecode magic\n* Support running from 3.9 and 3.10 although we do not support those bytecodes\n* Redo version comparisons using tuples instead of floats. This is needed for Python 3.10\n* Split out into 3 branches so that the master branch can assume Python 3.6+ conventions, especially type annotations\n* Source Fragment fixes\n* Lambda-bug fixes #360\n* Bug fixes\n\n3.7.4: 2020-8-05\n================\n\n* Fragment parsing was borked. This means deparsing in trepan2/trepan3k was broken\n* 3.7+: narrow precedence for call statement\n* del_stmt -> delete to better match Python AST\n* 3.8+ Add another `forelsestmt` (found only in a loop)\n* 3.8+ Add precedence on walrus operator\n* More files blackened\n* bump min xdis version\n\n3.7.3: 2020-7-25\n================\n\nMostly small miscellaneous bug fixes\n\n* `__doc__ = DocDescr()` from `test_descr.py` was getting confused as a docstring.\n* detect 2.7 exchandler range better\n* Add for .. else reduction checks on 2.6 and before\n* Add reduce check for 2.7 augmented assign\n* Add VERSION in a pydoc-friendly way\n\n\n3.7.2: 2020-6-27\n================\n\n* Use newer xdis\n* Docstrings (again) which were broken again on earlier Python\n* Fix 2.6 and 2.7 decompilation bug in handling \"list if\" comprehensions\n\n\n\n3.7.1: 2020-6-12 Fleetwood66\n====================================================\n\nReleased to pick up new xdis version which has fixes to read bytestrings better on 3.x\n\n* Handle 3.7+ \"else\" branch removal adAs seen in `_cmp()` of `python3.8/distutils/version.py` with optimization `-O2`\n* 3.6+ \"with\" and \"with .. as\" grammar improvements\n* ast-check for \"for\" loop was missing some grammar rules\n\n3.7.0: 2020-5-19 Primidi 1st Prairial - Alfalfa - HF\n====================================================\n\nThe main impetus for this release is to pull in the recent changes from xdis.\nWe simplify imports using xdis 4.6.0.\n\nThere were some bugfixes to Python 3.4-3.8. See the ChangeLog for details\n\n\n3.6.7: 2020-4-27 xdis again\n===========================\n\nMore upheaval in xdis which we need to track here.\n\n3.6.6: 2020-4-20 Love in the time of Cholera\n============================================\n\nThe main reason for this release is an incompatibility bump in xdis which handles\n3.7 SipHash better.\n\n* Go over \"yield\" as an expression precedence\n* Some small alignment with code in decompyle3 for \"or\" and \"and\" was done\n\n\n3.6.5: 2020-4-1 April Fool\n==========================\n\nBack port some of the changes in decompile3 here which mostly helps 3.7 and 3.8 decompilation, although this may also help 3.6ish versions too.\n\n- Handle nested `async for in for...`  and better async comprehension detection via `xdis`.  Still more work is needed.\n- include token number in listings when `-g` and there is a parser error\n- remove unneeded `Makefile`s now that remake 4.3+1.5dbg is a thing that has `-c`\n- Bug in finding annotations in functions with docstrings\n- Fix bug found by 2.4 sre_parse.py testing\n- Fix `transform` module's  `ifelseif` bugs\n- Fix bug in 3.0 name module detection\n- Fix docstring detection\n\n3.6.4: 2020-2-9 Plateau\n=======================\n\nThe main focus in this release was fix some of the more glaring problems creapt in from the last release due to that refactor.\n\n`uncompyle6` code is at a plateau where what is most needed is a code refactoring. In doing this, until everything refactored and replaced, decomplation may get worse.\nTherefore, this release largely serves as a checkpoint before more major upheaval.\n\nThe upheaval, in  started last release, I believe the pinnacle was around c90ff51 which wasn't a release. I suppose I should tag that.\n\nAfter c90ff5, I started down the road of redoing control flow in a more comprehensible, debuggable, and scalable way. See [The Control Flow Mess](https://github.com/rocky/python-uncompyle6/wiki/The-Control-Flow-Mess)\n\nThe bulk of the refactoring going on in the [decompyle3](https://github.com/rocky/python-decompil3) project, but I try to trickle down the changes.\n\nIt is tricky because the changes are large and I have to figure decompose things so that little testable pieces can be done. And there is also the problem that what is in decompyle3 is incomplete as well.\n\nOther than control flow, another change that will probably happen in the next release is to redo the grammar for lambda expressions. Right now, we treat them as Python statements, you know, things with compound statements in them. But lambda aren't that. And so there is hackery to paper over difference making a statement out of an expression the wrong thing to do. For example, a return of an \"and\" expression can be expressed as nested \"if\" statements with return inside them, but the \"if\" variant of the bytecode is not valid in a lambda.\n\nIn the decompyle3 code, I've gone down the road making the grammar goal symbol be an expression. This also offers the opportunity to split the grammar making parsing inside lambda not only more reliable because the wrong choices don't exist, but also simpler and faster because all those rules just need don't need to exist in parsing.\n\nI cringe in thinking about how the code has lived for so long without noticing such a simple stupidity, and lapse of sufficient thought.\n\nSome stats from testing. The below give numbers of decompiled tests from Python's test suite which successfully ran\n\n```\n   Version  test-suites passing\n   -------  -------------------\n   2.4.6     243\n   2.5.6     265\n   2.6.9     305\n   3.3.7     300\n   3.4.10    304\n   3.5.9     260\n   3.6.10    236\n   3.7.6     306\n   3.8.1     114\n```\n\nDecompiled bytecode files distributed with Python (syntax check only):\n\n```\n2.7.17  647 files:   0 failed\n3.2.6   900 files:   0 failed\n3.3.7  1256 files:   0 failed\n3.4.10  800 files:   0 failed\n3.5.9   900 files:   0 failed\n3.6.10 1300 files:  28 failed\n```\n\n\n3.6.3: 2020-1-26 Martin and Susanne\n===================================\n\nOf late, every release fixes major gaps and embarrassments of the last release....\n\nAnd in some cases, like this one, exposes lacuna and rot.\n\nI now have [control] flow under control, even if it isn't the most optimal way.\n\nI now have greatly expanded automated testing.\n\nOn the most recent Python versions I regularly decompile thousands of Python programs that are distributed with Python.  when it is possible, I then decompile Python's standard test suite distributed with Python and run the decompiled source code which basically checks itself. This amounts to about 250 test programs per version. This is in addition to the 3 CI testing services which do different things.\n\nDoes this mean the decompiler works perfectly? No. There are still a dozen or so failing programs, although the actual number of bugs is probably smaller though.\n\nHowever, in preparation of a more major refactoring of the parser grammar, this release was born.\n\nIn many cases, decompilation is better. But there are some cases where decompilation has gotten worse. For lack of time (and interest) 3.0 bytecode suffered a hit. Possibly some code in the 3.x range did too. In time and with cleaner refactored code, this will come back.\n\nCommit c90ff51 was a local maximum before, I started reworking the grammar to separate productions that were specific to loops versus those that are not in loops.\nIn the middle of that I added another grammar simplification to remove singleton productions of the form `sstmts-> stmts`. These were always was a bit ugly, and complicated output.\n\nAt any rate if decompilation fails, you can try c90ff51. Or another decompiler. `unpyc37` is pretty good for 3.7. wibiti `uncompyle2` is great for 2.7. `pycdc` is mediocre for Python before 3.5 or so, and not that good for the most recent Python. Generally these programs will give some sort of answer even if it isn't correct.\n\ndecompyle3 isn't that good for 3.7 and worse for 3.8, but right now it does things no other Python decompiler like `unpyc37` or `pycdc` does. For example, `decompyle3` handles variable annotations. As always, the issue trackers for the various programs will give you a sense for what needs to be done. For now, I've given up on reporting issues in the other decompilers because there are already enough issues reported, and they are just not getting fixed anyway.\n\n\n3.6.2: 2020-1-5 Samish\n======================\n\nYet again the focus has been on just fixing bugs, mostly geared in the\nlater 3.x range. To get some sense what sill needs fixing, consult\ntest/stdlib/runtests.sh. And that only has a portion of what's known.\n\n`make_function.py` has gotten so complex that it was split out into 3 parts\nto handle different version ranges: Python <3, Python 3.0..3.6 and Python 3.7+.\n\nAn important fix is that we had been dropping docstrings in Python 3 code as a result\nof a incomplete merge from the decompile3 base with respect to the transform phase.\n\nAlso important (at least to me) is that we can now handle 3.6+\nvariable type annotations.  Some of the decompile3 code uses that in\nits source code, and I now use variable annotations in conjunction\nwith mypy in some of my other Python projects\n\nCode generation for imports, especially where the import is dotted\nchanged a bit in 3.7; with this release are just now tracking that\nchange better. For this I've added pseudo instruction\n`IMPORT_NAME_ATTR`, derived from the `IMPORT_NAME` instruction, to\nindicate when an import contains a dotted import. Similarly, code for\n3.7 `import .. as ` is basically the same as `from .. import`, the\nonly difference is the target of the name changes to an \"alias\" in the\nformer. As a result, the disambiguation is now done on the semantic\naction side, rather than in parsing grammar rules.\n\nSome small specific fixes:\n\n* 3.7+ some chained compare parsing has been fixed. Other remain.\n* better if/else rule checking in the 3.4 and below range.\n* 3.4+ keyword-only parameter handling was fixed more generally\n* 3.3 .. 3.5 keyword-only parameter args in lambda was fixed\n\n\n3.6.1: 2019-12-10 Christmas Hannukah\n====================================\n\nOverall, as in the past, the focus has been on just fixing bugs, more geared\nin the later 3.x range. Handling \"async for/with\" in 3.8+ works better.\n\nNumerous bugs around handling `lambda` with keyword-only and `*` args in the\n3.0-3.8 have been fixed. However many still remain.\n\n`binary_expr` and `unary_expr` have been renamed to `bin_op` and\n`unary_op` to better correspond the Python AST names.\n\nSome work was done Python 3.7+ to handle `and` better; less was done\nalong the lines of handling `or`. Much more is needed to improve\nparsing stability of 3.7+. More of what was done with `and` needs to\nbe done with `or` and this will happen first in the \"decompyle3\"\nproject.\n\nLater this will probably be extended backwards to handle the 3.6-\nversions better. This however comes with a big decompilation speed\npenalty. When we redo control flow this should go back to normal, but\nfor now, accuracy is more important than speed.\n\nAnother `assert` transform rule was added. Parser rules to distinguish\n`try/finally` in 3.8 were added and we are more stringent about what\ncan be turned into an `assert`. There was some grammar cleanup here\ntoo.\n\nA number of small bugs were fixed, and some administrative changes to\nmake `make check-short` really be short, but check more thoroughly what\nit checks. minimum xdis version needed was bumped to include in the\nnewer 3.6-3.9 releases. See the `ChangeLog` for details.\n\n\n3.6.0: 2019-12-10 gecko gecko\n=============================\n\nThe main focus in this release was more accurate decompilation especially\nfor 3.7 and 3.8. However there are some improvements to Python 2.x as well,\nincluding one of the long-standing problems of detecting the difference between\n`try ... ` and `try else ...`.\n\nWith this release we now rebase Python 3.7 on off of a 3.7 base; This\nis also as it is (now) in decompyle3.  This facilitates removing some of the\ncruft in control-flow detection in the 2.7 uncompyle2 base.\n\nAlas, decompilation speed for 3.7 on is greatly increased. Hopefully\nthis is temporary (cough, cough) until we can do a static control flow\npass.\n\nFinally, running in 3.9-dev is tolerated. We can disassemble, but no parse tables yet.\n\n\n3.5.1 2019-11-17 JNC\n====================\n\n- Pypy 3.3, 3.5, 3.6, and 3.6.9 support\n- bump xdis version to handle newer Python releases, e.g. 2.7.17, 3.5.8, and 3.5.9\n- Improve 3.0 decompilation\n    - no parse errors on stlib bytecode. However accurate translation in\n\t  control-flow and and/or detection needs work\n- Remove extraneous iter() in \"for\" of list comprehension  Fixes #272\n- \"for\" block without a `POP_BLOCK `and confusing `JUMP_BACK` for `CONTINUE`. Fixes #293\n- Fix unmarshal incompletness detected in Pypy 3.6\n- Miscellaneous bugs fixed\n\n3.5.0 2019-10-12 Stony Brook Ride\n=================================\n\n- Fix fragment bugs\n   * missing `RETURN_LAST` introduced when adding transformation layer\n   * more parent entries on tokens\n- Preliminary support for decompiling Python 1.0, 1.1, 1.2, and 1.6\n   * Newer _xdis_ version needed\n\n3.4.1 2019-10-02\n================\n\n- Correct assert{,2} transforms Fixes #289\n- Fragment parsing fixes:\n     * Wasn't handling 3-arg `%p`\n   \t * fielding error in `code_deparse()`\n- Use newer _xdis_ to better track Python 3.8.0\n\n\n3.4.0 2019-08-24 Totoro\n=======================\n\nThe main change is to add a tree-transformation phase. This simplifies the\ncode a little and allows us to turn `if ...: raise AssertionError` into\n`assert`, and many `if ..: else if ...` into `if ... elif ..`\n\nUse options `--show=before` and `--show=after` to see the before the tree transformation phase and after the tree transformation phase.\n\nMost of the heavy lifting for this was done by x0ret.\n\nOther changes:\n\n- Fix issue #275, #283 (process to fix this bug is documented on wiki), #284\n- blacken more code\n- CircleCI adjustments for a changing CircleCi\n- Require more recent `xdis` for Python 3.8\n- Fix bugs in code using `BUILD_LIST_UNPACK` and variants\n\n3.3.5 2019-07-03 Pre Independence Day\n=====================================\n\nAgain, most of the work in this is release is thanks to x0ret.\n\n- Handle annotation arguments in Python 3.x\n- Fix _vararg_ and function signatures in 3.x\n- Some 3.x < 3.6 `while` (1)/`if` fixes &mdash; others remain\n- Start reinstating `else if` -> `elif`\n- `LOAD_CONST` -> `LOAD_CODE` where appropriate\n- option `--weak-verify` is now `--syntax-verify`\n- code cleanups, start using [black](https://github.com/python/black) to reformat text\n\n\n3.3.4 2019-06-19 Fleetwood at 65\n================================\n\nMost of the work in this is release is thanks to x0ret.\n\n- Major work was done by x0ret to correct function signatures and include annotation types\n- Handle Python 3.6 `STORE_ANNOTATION` [#58](https://github.com/rocky/python-uncompyle6/issues/58)\n- Friendlier assembly output\n- `LOAD_CONST` replaced by `LOAD_STR` where appropriate to simplify parsing and improve clarity\n- remove unneeded parenthesis in a generator expression when it is the single argument to the function [#247](https://github.com/rocky/python-uncompyle6/issues/246)\n- Bug in noting an async function [#246](https://github.com/rocky/python-uncompyle6/issues/246)\n- Handle Unicode docstrings and fix docstring bugs [#241](https://github.com/rocky/python-uncompyle6/issues/241)\n- Add short option -T as an alternate for --tree+\n- Some grammar cleanup\n\n3.3.3 2019-05-19 Henry and Lewis\n================================\n\nAs before, decomplation bugs fixed. The focus has primarily been on\nPython 3.7. But with this release, releases will be put on hold,as a\nbetter control-flow detection is worked on . This has been needed for a\nwhile, and is long overdue. It will probably also take a while to get\ndone as good as what we have now.\n\nHowever this work will be done in a new project\n[decompyle3](https://github.com/rocky/python-decompile3).  In contrast\nto _uncompyle6_ the code will be written assuming a modern Python 3,\ne.g. 3.7. It is originally intended to decompile Python version 3.7\nand greater.\n\n* A number of Python 3.7+ chained comparisons were fixed\n* Revise Python 3.6ish format string handling\n* Go over operator precedence, e.g. for AST `IfExp`\n\nReported Bug Fixes\n------------------\n\n* [#239: 3.7 handling of 4-level attribute import](https://github.com/rocky/python-uncompyle6/issues/239),\n* [#229: Inconsistent if block in python3.6](https://github.com/rocky/python-uncompyle6/issues/229),\n* [#227: Args not appearing in decompiled src when kwargs is specified explicitly (call_ex_kw)](https://github.com/rocky/python-uncompyle6/issues/227)\n2.7 confusion around \"and\" versus comprehension \"if\"\n* [#225: 2.7 confusion around \"and\" vs comprehension \"if\"](https://github.com/rocky/python-uncompyle6/issues/225)\n\n3.3.2 2019-05-03 Better Friday\n==============================\n\nAs before, lots of decomplation bugs fixed. The focus has primarily\nbeen on Python 3.6. We can now parse the entire 3.6.8 Python library\nand verify that without an error. The same is true for 3.5.8. A number\nof the bugs fixed though are not contained to these versions. In fact\nsome span back as far as 2.x\n\nBut as before, many more remain in the 3.7 and 3.8 range which will\nget addressed in future releases\n\nPypy 3.6 support was started. Pypy 3.x detection fixed (via `xdis`)\n\n3.3.1 2019-04-19 Good Friday\n==========================\n\nLots of decomplation bugs, especially in the 3.x series fixed. Don't worry though, many more remain.\n\n* Add annotation return values in 3.6+\n* Fix 3.6+ lambda parameter handling decompilation\n* Fix 3.7+ chained comparison decompilation\n* split out semantic-action customization into more separate files\n* Add 3.8 try/else\n* Fix 2.7 generator decompilation\n* Fix some parser failures fixes in 3.4+ using test_pyenvlib\n* Add more run tests\n\n3.3.0 2019-04-14 Holy Week\n==========================\n\n* First cut at Python 3.8 (many bug remain)\n* The usual smattering of bug and doc fixes\n\n3.2.6 2019-03-23 Mueller Report\n=======================================\n\nMostly more of the same: bug fixes and pull requests.\n\nBug Fixes\n-----------\n\n* [#221: Wrong grammar for nested ifelsestmt (in Python 3.7 at least)](https://github.com/rocky/python-uncompyle6/issues/221)\n* [#215: 2.7 can have two JUMP_BACKs at the end of a while loop](https://github.com/rocky/python-uncompyle6/issues/215)\n* [#209: Fix \"if\" return boundary in 3.6+](https://github.com/rocky/python-uncompyle6/issues/209),\n* [#208: Comma placement in 3.6 and 3.7 **kwargs](https://github.com/rocky/python-uncompyle6/issues/208),\n* [#200: Python 3 bug in not detecting end bounds of an \"if\" ... \"elif\"](https://github.com/rocky/python-uncompyle6/issues/200),\n* [#155: Python 3.x bytecode confusing \"try/else\" with \"try\" in a loop](https://github.com/rocky/python-uncompyle6/issues/155),\n\n\nPull Requests\n----------------\n\n* [#202: Better \"assert\" statement determination in Python 2.7](https://github.com/rocky/python-uncompyle6/pull/211)\n* [#204: Python 3.7 testing](https://github.com/rocky/python-uncompyle6/pull/204)\n* [#205: Run more f-string tests on Python 3.7](https://github.com/rocky/python-uncompyle6/pull/205)\n* [#211: support utf-8 chars in Python 3 sourcecode](https://github.com/rocky/python-uncompyle6/pull/202)\n\n\n\n3.2.5 2018-12-30 Clear-out sale\n======================================\n\n- 3.7.2 Remove deprecation warning on regexp string that isn't raw\n- main.main() parameter `codes` is not used - note that\n- Improve Python 3.6+ control flow detection\n- More complete fragment instruction annotation for `imports`\n\n3.2.4 2018-10-27 7x9 release\n===================================\n\n- Bug fixes #180, #182, #187, #192\n- Enhancements #189\n- Internal improvements\n\n3.2.3 2018-06-04 Michael Cohen flips and Fleetwood Redux\n======================================================================\n- Python 1.3 support 3.0 bug and\n- fix botched parameter ordering of 3.x in last release\n\n3.2.2 2018-06-04 When I'm 64\n===================================\n\n- Python 3.0 support and bug fixes\n\n3.2.1 2018-06-04 MF\n=======================\n\n- Python 1.4 and 1.5 bug fixes\n\n3.2.0 2018-05-19 Rocket Scientist\n=========================================\n\n- Add rudimentary 1.4 support (still a bit buggy)\n- add --tree+ option to show formatting rule, when it is constant\n- Python 2.7.15candidate1 support (via `xdis`)\n- bug fixes, especially for 3.7 (but 2.7 and 3.6 and others as well)\n\n3.1.3 2018-04-16\n====================\n\n- Add some Python 3.7 rules, such as for handling LOAD_METHOD (not complete)\n- Fix some fragment bugs\n- small doc changes\n\n3.1.2 2018-04-08 Eastern Orthodox Easter\n==================================================\n\n- Python 3.x subclass and call parsing fixes\n- Allow/note running on Python 3.1\n- improve 3.5+ BUILD_MAP_UNPACK\n- DRY instruction building code between 2.x and 3.x\n- expand testing\n\n3.1.1 2018-04-01 Easter April Fool's\n=============================================\n\nJesus on Friday's New York Times puzzle: \"I'm stuck on 2A\"\n\n- fill out 3.5+ BUILD_MAP_UNPACK (more work is needed)\n- fill out 3.4+ CALL_FUNCTION_... (more work is needed)\n- fill out 3.5 MAKE_FUNCTION  (more work is needed)\n- reduce 3.5, 3.6 control-flow bugs\n- reduce ambiguity in rules that lead to long (exponential?) parses\n- limit/isolate some 2.6/2.7,3.x grammar rules\n- more run-time testing of decompiled code\n- more removal of parenthesis around calls via setting precedence\n\n3.1.0 2018-03-21 Equinox\n==============================\n\n- Add code_deparse_with_offset() fragment function.\n- Correct parameter call fragment deparse_code()\n- Lots of 3.6, 3.x, and 2.7 bug fixes\n  About 5% of 3.6 fail parsing now. But\n  semantics still needs much to be desired.\n\n3.0.1 2018-02-17\n====================\n\n- All Python 2.6.9 standard library files weakly verify\n- Many 3.6 fixes. 84% of the first 200 standard library files weakly compile.\n  One more big push is needed to get the remaining to compile\n- Many decompilation fixes for other Python versions\n- Add more to the test framework\n- And more add tests target previous existing bugs more completely\n- sync recent license changes in metadata\n\n3.0.0 2018-02-17\n====================\n\n- deparse_code() and lookalikes from the various semantic actions are\n  now deprecated. Instead use new API code_deparse() which makes the\n  version optional and bundles debug options into a dictionary.\n- License changed to GPL3.\n- Many Python 3.6 fixes, especially around handling EXTENDED_ARGS\n  Due to the reduction in operand size for JUMP's there are many\n  more EXTENDED_ARGS instructions which can be the targets\n  of jumps, and messes up the peephole-like analysis that is\n  done for control flow since we don't have something better in place.\n- Code has been reorganized to be more instruction nametuple based where it\n  has been more bytecode array based. There was and still is code that had\n  had magic numbers to advance instructions or to pick out operands.\n- Bug fixes in numerous other Python versions\n- Instruction display improved\n- Keep global statements in fixed order (from wangym5106)\n\nA bit more work is still needed for 3.6 especially in the area of\nfunction calls and definitions.\n\n\n2.16.0 2018-02-17\n=====================\n\n- API additions:\n  - add fragments.op_at_code_loc() and\n  - fragments.deparsed_find()_\n- Better 2.7 end_if and COME_FROM determination\n- Fix up 3.6+ CALL_FUNCTION_EX\n- Misc pydisasm fixes\n- Weird comprehension bug seen via new loctraceback\n- Fix Python 3.5+ CALL_FUNCTION_VAR and BUILD_LIST_UNPACK in call; with this\n  we can handle 3.5+ f(a, b, *c, *d, *e) now\n\n2.15.1 2018-02-05\n=====================\n\n- More bug fixes and revert an improper bug fix in 2.15.0\n\n2.15.0 2018-02-05 pycon2018.co\n=====================================\n\n- Bug fixes\n- Code fragment improvements\n- Code cleanups\n- Expand testing\n\n2.15.1 2018-01-27\n=====================\n\n- Add `--linemap` option to give line correspondences\n  between original source lines and reconstructed line sources.\n  It is far from perfect, but it is a start\n- Add a new class of tests: tests which when decompiled check themselves\n- Split off Python version semantic action customizations into its own file\n- Fix 2.7 bug in `if`/`else` loop statement\n- Handle 3.6+ `EXTENDED_ARG`s for `POP_JUMP_IF..` instructions\n- Correct 3.6+ calls with `kwargs`\n- Describe the difficulty of 3.6 in README\n\n2.14.3 2018-01-19\n=====================\n\n- Fix bug in 3.5+ `await` statement\n- Better version to magic handling; handle 3.5.2 .. 3.5.4 versions\n- Improve/correct test_pyenvlib.py status messages\n- Fix some 2.7 and 2.6 parser bugs\n- Fix `whilelse` parsing bugs\n- Correct 2.5- decorator parsing\n- grammar for decorators matches AST a little more\n- better tests in setup.py for running the right version of Python\n- Fix 2.6- parsing of \"for .. try/else\" ...  with \"continue\"  inside\n\n2.14.2 2018-01-09 Samish\n==============================\n\nDecompilation bug fixes, mostly 3.6 and pre 2.7\n\n- 3.6 `FUNCTION_EX` (somewhat)\n- 3.6 `FUNCTION_EX_KW` fixes\n- 3.6 `MAKE_FUNCTION` fixes\n- correct 3.5 `CALL_FUNCTION_VAR`\n- stronger 3.x \"while 1\" testing\n- Fix bug in if's with \"pass\" bodies. Fixes #104\n- try/else and try/finally fixes on 2.6-\n- limit pypy customization to pypy\n- Add addr fields in `COME_FROM`S\n- Allow use of full instructions in parser reduction routines\n- Reduce grammar in Python 3 by specialization more to specific\n  Python versions\n- Match Python AST names more closely when possible\n\n2.14.1 2017-12-10 Dr. Gecko\n===================================\n\n- Many decompilation bug fixes\n- Grammar rule reduction and version isolation\n- Match higher-level nonterminal names more closely\n  with Python AST\n- Start automated Python _stdlib_ testing &mdash; full round trip\n\n2.14.0 2017-11-26 johnnybamazing\n=========================================\n\n- Start to isolate grammar rules between versions\n  and remove used grammar rules\n- Fix a number of bytecode decompile problems\n  (many more remain)\n- Add `stdlib/runtests.sh` for even more rigorous testing\n\n2.13.3 2017-11-13\n=====================\n\nOverall: better 3.6 decompiling and some much needed code refactoring and cleanup\n\n\n- Start noting names in for template-action names; these are\n  used to check/assert we have the right node type\n- Simplify <import_from> rule\n- Pypy 5.80-beta testing tolerance\n- Start to clean up instruction mangling phase by using 3.6-style instructions\n  rather trying to parse the bytecode array. This largely been done in for versions 3.x;\n  3.0 custom mangling code has been reduced;\n  some 2.x conversion has been done, but more is desired. This make it possible to...\n- Handle `EXTENDED_ARGS` better. While relevant to all Python versions it is most noticeable in\n  version 3.6+ where in switching to wordcodes the size of operands has been reduced from 2^16\n  to 2^8. `JUMP` instruction then often need EXTENDED_ARGS.\n- Refactor find_jump_targets() with via working of instructions rather the bytecode array.\n- use `--weak-verify` more and additional fuzzing on verify()\n- fragment parser now ignores errors in nested function definitions; an parameter was\n  added to assist here. Ignoring errors may be okay because the fragment parser often just needs,\n  well, *fragments*.\n- Distinguish `RETURN_VALUE` from `RETURN_END_IF` in exception bodies better in 3.6\n- bug in 3.x language changes: import queue via `import Queue`\n- reinstate some bytecode tests since decompiling has gotten better\n- Revise how to report a bug\n\n2.13.2 2017-10-12\n=====================\n\n- Re-release using a more automated approach\n\n2.13.1 2017-10-11\n=====================\n\n- Re-release because Python 2.4 source uploaded rather than 2.6-3.6\n\n2.13.0 2017-10-10\n=====================\n\n- Fixes in deparsing lambda expressions\n- Improve table-semantics descriptions\n- Document hacky customize arg count better (until we can remove it)\n- Update to use `xdis` 3.7.0 or greater\n\n2.12.0 2017-09-26\n=====================\n\n- Use `xdis` 3.6.0 or greater now\n- Small semantic table cleanups\n- Python 3.4's terms a little names better\n- Slightly more Python 3.7, but still failing a lot\n- Cross Python 2/3 compatibility with annotation arguments\n\n2.11.5 2017-08-31\n=====================\n\n- Skeletal support for Python 3.7\n\n2.11.4 2017-08-15\n=====================\n\n* scanner and parser now allow 3-part version string look ups,\n  e.g. 2.7.1 We allow a float here, but if passed a string like '2.7'. or\n* unpin 3.5.1. `xdis` 3.5.4 has been release and fixes the problems we had. Use that.\n* some routines here moved to `xdis`. Use the `xdis` version\n* `README.rst`: Link typo Name is _trepan2_ now not _trepan_\n* xdis-forced change adjust for `COMPARE_OP` \"is-not\" in\n  semantic routines. We need \"is not\".\n* Some PyPy tolerance in validate testing.\n* Some pyston tolerance\n\n2.11.3 2017-08-09\n=====================\n\nVery minor changes\n\n- RsT doc fixes and updates\n- use newer `xdis`, but not too new; 3.5.2 breaks uncompyle6\n- use `xdis` opcode sets\n- `xdis` \"exception match\" is now \"exception-match\"\n\n2.11.2 2017-07-09\n=====================\n\n- Start supporting Pypy 3.5 (5.7.1-beta)\n- use `xdis` 3.5.0's opcode sets and require `xdis` 3.5.0\n- Correct some Python 2.4-2.6 loop detection\n- guard against badly formatted bytecode\n\n2.11.1 2017-06-25\n=====================\n\n- Python 3.x annotation and function signature fixes\n- Bump `xdis` version\n- Small `pysource.py` bug fixes\n\n2.11.0 2017-06-18 Fleetwood\n==================================\n\n- Major improvements in fragment tracking\n  * Add nonterminal node in `extractInfo()`\n  * tag more offsets in expressions\n  * tag array subscripts\n  * set `YIELD` value offset in a _yield expr_\n  * fix a long-standing bug in not adjusting final AST when melding other deparse ASTs\n- Fixes yet again for make_function node handling; document what's up here\n- Fix bug in snowflake Python 3.5 `*args`, `kwargs`\n\n2.10.1 2017-06-3 Marylin Frankel\n========================================\n\n- fix some fragments parsing bugs\n  - was returning the wrong type sometimes in `deparse_code_around_offset()`\n  - capture function name in offsets\n  - track changes to `ifelstrmtr` node from `pysource.py` into fragments\n\n2.10.0 2017-05-30 Elaine Gordon\n=======================================\n\n- Add fuzzy offset deparse look up\n- 3.6 bug fixes\n   - fix `EXTENDED_ARGS` handling (and in 2.6 and others)\n   - semantic routine make_function fragments.py\n   - `MAKE_FUNCTION` handling\n   - `CALL_FUNCTION_EX` handling\n   - `async` property on `defs`\n   - support for `CALL_FUNCTION_KW` (moagstar)\n- 3.5+ `UNMAP_PACK` and` BUILD_UNMAP_PACK` handling\n- 3.5 FUNCTION_VAR bug\n- 3.x pass statement inside `while True`\n- Improve 3.2 decompilation\n- Fixed `-o` argument processing (grkov90)\n- Reduce scope of LOAD_ASSERT as expr to 3.4+\n- `await` statement fixes\n- 2.3, 2.4 \"if 1 ..\" fixes\n- 3.x annotation fixes\n\n2.9.11 2017-04-06\n=====================\n\n- Better support for Python 3.5+ `BUILD_MAP_UNPACK`\n- Start 3.6 `CALL_FUNCTION_EX` support\n- Many decompilation bug fixes. (Many more remain). See ChangeLog\n\n2.9.10 2017-02-25\n=====================\n\n- Python grammar rule fixes\n- Add ability to get grammar coverage on runs\n- Handle Python 3.6 opcode `BUILD_CONST_KEYMAP`\n\n2.9.9 2016-12-16\n\n- Remaining Python 3.5 ops handled\n  (this also means more Python 3.6 ops are handled)\n- Python 3.5 and 3.6 async and await handled\n- Python 3.0 decompilation improved\n- Python 3 annotations fixed\n- Better control-flow detection\n- Code cleanups and misc bug fixes\n\n2.9.8 2016-12-16\n====================\n\n- Better control-flow detection\n- pseudo instruction `THEN` in 2.x\n  to disambiguate if from and\n- fix bug in `--verify` option\n- DRY (a little) control-flow detection\n- fix syntax in tuples with one element\n- if AST rule inheritance in Python 2.5\n- `NAME_MODULE` removal for Python <= 2.4\n- verify call fixes for Python <= 2.4\n- more Python lint\n\n2.9.7 2016-12-16\n====================\n\n- Start to handle 3.5/3.6 build_map_unpack_with_call\n- Some Python 3.6 bytecode to wordcode conversion fixes\n- option -g: show start-end range when possible\n- track print_docstring move to help (used in python 3.1)\n- verify: allow `RETURN_VALUE` to match `RETURN_END_IF`\n- some 3.2 compatibility\n- Better Python 3 control flow detection by adding Pseudo `ELSE` opcodes\n\n2.9.6 2016-12-04\n====================\n\n- Shorten Python3 grammars with + and *\n  this requires spark parser 1.5.1\n- Add some AST reduction checks to improve\n  decompile accuracy. This too requires\n  spark parser 1.5.1\n\n2.9.6 2016-11-20\n====================\n\n- Correct MANIFEST.in\n- More AST grammar checking\n- `--linemapping` option or _linenumbers.line_number_mapping()_\n  Shows correspondence of lines between source\n  and decompiled source\n- Some control flow adjustments in code for 2.x.\n  This is probably an improvement in 2.6 and before.\n  For 2.7 things are just shuffled around a little. Sigh.\n  Overall I think we are getting more precise in\n  or analysis even if it is not always reflected\n  in the results.\n- better control flow debugging output\n- Python 2 and 3 detect structure code is more similar\n- Handle Docstrings with embedded triple quotes (\"\"\")\n\n2.9.5 2016-11-13\n====================\n\n- Fix Python 3 bugs:\n  * improper while 1 else\n  * docstring indent\n  * 3.3 default values in lambda expressions\n  * start 3.0 decompilation (needs newer `xdis`)\n- Start grammar misparse checking\n\n\n2.9.4 2016-11-02\n====================\n\n- Handle Python 3.x function annotations\n- track def keyword-parameter line-splitting in source code better\n- bump min xdis version to mask previous xdis bug\n\n2.9.3 2016-10-26\n====================\n\nRelease forced by incompatibility change in` xdis` 3.2.0.\n\n- Python 3.1 bugs:\n  * handle `with`... `as`\n  * handle `with`\n  * Start handling `def` (...) -> _yy_ (has bugs still)\n\n- DRY Python 3.x via inheritance\n- Python 3.6 work (from Daniel Bradburn)\n  * Handle 3.6 buildstring\n  * Handle 3.6 handle single and multiple fstring better\n\n\n2.9.2 2016-10-15\n====================\n\n- use source-code line breaks to assist in where to break\n  in tuples and maps\n- Fix Python 1.5 decompyle bugs\n- Fix some Python 2.6 and below bugs\n- DRY fragments.py code a little\n\n2.9.1 2016-10-09\n====================\n\n- Improved Python 1.5 decompiling\n- Handle old-style pre Python 2.2 classes\n\n2.9.0 2016-10-09\n====================\n\n- Use `xdis` 3.0.0 protocol `load_module`.\n  this Forces change in requirements.txt and _pkg_info_.py\n- Start Python 1.5 decompiling; another round of work is needed to\n  remove bugs\n- Simplify python 2.1 grammar\n- Fix bug with `-t` ...  Wasn't showing source text when `-t` option was given\n- Fix 2.1-2.6 bug in list comprehension\n\n2.8.4 2016-10-08\n====================\n\n- Python 3 disassembly bug fixes\n- Python 3.6 fstring bug fixes (from moagstar)\n- Python 2.1 disassembly\n- `COME_FROM` suffixes added in Python3\n- use `.py` extension in verification disassembly\n\n2.8.3 2016-09-11 live from NYC!\n=======================================\n\nNOTE: this is possibly the last release before a major reworking of\ncontrol-flow structure detection is done.\n\n- Lots of bug fixes in decompilation:\n  * 3.0 .. 3.4 whileTrue bug\n  * 3.x function declaration deparsing:\n    . 3.0 .. 3.2 *args processing\n    . 3.0 .. 3.2 call name and kwargs bug\n    . 3.0 .. getting parameter of *\n    . 3.0 .. handling variable number of args\n    . 3.0 .. \"if\" structure bugs\n  * 3.5+ if/else bugs\n  * 2.2-2.6 bugs\n    . try/except control flow\n    . a == b == c -like detection\n    . generator detection\n    . \"while .. and\" statement bugs\n    . handle \"except <cond>, <var>\"\n    . use older raise format in 2.x\n- scanner \"disassemble\" is now \"ingest\". True disassembly is done by xdis\n- Start accepting Python 3.1 bytecode\n- Add --weak-verify option on test_pyenvlib and test_pythonlib. This\n  catches more bugs more easily\n- bump xdis requirement so we can deparse dropbox 2.5 code\n- Added H. Goebel's changes before 2.4 in DECOMPYLE-2.4-CHANGELOG.txt\n\n2.8.2 2016-08-29\n====================\n\n- Handle Python 3.6 format string conversions !r, !s, !a\n- Start to handle 3.1 bytecode\n- Fix some PyPy translation bugs\n- We now only handle 3.6.0a3+ since that is incompatible with 3.6 before that\n\n2.8.1 2016-08-20\n====================\n\n- Add Python 2.2 decompilation\n\n- Fix bugs\n * PyPy `LOOKUP_METHOD` bug\n * Python 3.6 `FORMAT_VALUE` handles expressions now\n\n2.8.0 2016-08-03\n====================\n\n- Start Python 3.6 support (moagstar)\n  more work on PEP 498 needed\n- tidy bytecode/word output\n- numerous decompiling bugs fixed\n- grammar testing started\n- show magic number in deparsed output\n- better grammar and semantic action segregation based\n  on python bytecode version\n\n2.7.1 2016-07-26\n====================\n\n- PyPy bytecodes for 2.7 and 3.2 added\n- Instruction formatting improved slightly\n- 2.7 bytecode \"continue\" bug fixed\n\n2.7.0 2016-07-15\n====================\n\n- Many Syntax and verification bugs removed\n  tested on standard libraries from 2.3.7 to 3.5.1\n  and they all decompile and verify fine.\n  I'm sure there are more bugs though.\n\n2.6.2 2016-07-11 Manhattenhenge\n=======================================\n\n- Extend bytecodes back to 2.3\n- Fix bugs:\n  * 3.x and 2.7 set comprehensions,\n  * while1 loops\n  * continue statements\n- DRY and segregate grammar more\n\n2.6.1 2016-07-08\n====================\n\n- Go over Python 2.5 bytecode deparsing\n  all library programs now deparse\n- Fix a couple bugs in 2.6 deparsing\n\n2.6.0 2016-07-07\n====================\n\n- Improve Python 2.6 bytecode deparsing:\n  _stdlib_ now will deparse something\n- Better <2.6 vs. 2.7 grammar separation\n- Fix some 2.7 deparsing bugs\n- Fix bug in installing uncompyle6 script\n- Doc improvements\n\n2.5.0 2016-06-22 Summer Solstice\n========================================\n\n- Much better Python 3.2-3.5 coverage.\n  3.4.6 is probably the best;3.2 and 3.5 are weaker\n- Better AST printing with -t\n- Better error reporting\n- Better fragment offset tracking\n- Some (much-needed) code refactoring\n\n2.4.0 2016-05-18 (in memory of Lewis Bernstein)\n===========================================================\n\n- Many Python 3 bugs fixed:\n  * Python 3.2 to 3.5 libraries largely\n    uncompyle and most verify\n- pydisassembler:\n  * disassembles all code objects in a file\n  * can select showing bytecode before\n    or after uncompyle mangling, option -U\n- DRY scanner code (but more is desired)\n- Some code cleanup (but more is desired)\n- Misc Bugs fixed:\n  * handle complex number unmarshaling\n  * Running on Python 2 to works on Python 3.5 bytecodes now\n\n2.3.5 and 2.3.6 2016-05-14\n=================================\n\n- Python 2 class decorator fix (thanks to Tey)\n- Fix fragment parsing bugs\n- Fix some Python 3 parsing bugs:\n  * Handling single in * parameter\n  * \"while True\"\n  * escape from for inside if\n  * yield expressions\n- Correct history based on info from Dan Pascu\n- Fix up pip packaging, ugh.\n\n2.3.4 2016-05-5\n===================\n\n- More Python 3.5 parsing bugs addressed\n- decompiling Python 3.5 from other Python versions works\n- test from Python 3.2\n- remove \"__module__ = __name__\" in 3.0 <= Python 3.2\n\n2.3.3 2016-05-3\n===================\n\n- Fix bug in running uncompyle6 script on Python 3\n- Speed up performance on deparsing long lists by grouping in chunks of 32 and 256 items\n- DRY Python expressions between Python 2 and 3\n\n2.3.2 2016-05-1\n===================\n\n- Add `--version` option standalone scripts\n- Correct License information in package\n- expose functions `uncompyle_file()`, `load_file()`, and `load_module()`\n- Start to DRY Python2 and Python3 grammars Separate out 3.2, and 3.5+\n  specific grammar code\n- Fix bug in 3.5+ constant map parsing\n\n2.3.0, 2.3.1 2016-04-30\n=============================\n\n- Require `spark_parser` >= 1.1.0\n\n2.2.0 2016-04-30\n====================\n\n- Spark is no longer here but pulled separate package [spark_parser](https://pypi.org/project/spark_parser/)\n- Python 3 parsing fixes\n- More tests\n\n2.2.0 2016-04-02\n====================\n\n- Support single-mode (in addition to exec-mode) compilation\n- Start to DRY Python 2 and Python 3 grammars\n- Fix bug in if else ternary  construct\n- Fix bug in uncomplye6 `-d` and `-r` options (via lelicopter)\n\n\n2.1.3 2016-01-02\n====================\n\n- Limited support for decompiling Python 3.5\n- Improve Python 3 class deparsing\n- Handle `MAKE_CLOSURE` opcode\n- Start to DRY opcode code.\n- increase test coverage\n- fix misc small bugs and some improvements\n\n2.1.2 2015-12-31\n====================\n\n- Fix cross-version Marshal loading\n- Handle Python 3.3 . dotted class names\n- Limited 3.5 support: allows deparsing other versions\n- Refactor code more, misc bug fixes\n\n2.1.1 2015-12-27\n====================\n\n- packaging issues\n\n2.1.0 2015-12-27\n====================\n\n- Python 3.x deparsing much more solid\n- Better cross-version deparsing\n\nSome bugs squashed while other run rampant. Some code cleanup while\nmuch more is yet needed. More tests added, but many more are needed.\n\n\n2.0.0 2015-12-11\n====================\n\nChanges from uncompyle2\n\n- Can give code fragments given an instruction offset. See\n  https://github.com/rocky/python-uncompyle6/wiki/Deparsing-technology-and-its-use-in-exact-location-reporting\n- Runs under Python3. Decompiles Python 2.5-2.7 and some Python 3.2-3.4\n- Allows for multiple Python grammars, specifically Python2 vs Python 3\n- Add a cross-version Python disassembler command-line utility\n- Add some py.test and start reorganizing tests\n\nSPARK:\n  add option to show grammar rules applied\n  allow Python-style `#` comments in grammar\n  Runs on Python 3 and Python 2\n"
        },
        {
          "name": "NEW_FEATURES.rst",
          "type": "blob",
          "size": 9.5078125,
          "content": "Introduction\n============\n\nThe original versions of this code up until the time I started were\npretty awesome.  You can get a sense of this by running it.  For the\nmost part it was remarkably fast, and a single module with few dependencies.\n\nHere I will largely give what are the major improvements over old code.\n\nThis also serves to outline a little bit about what is in this code.\n\nSee also `How does this code work? <https://github.com/rocky/python-uncompyle6/wiki/How-does-this-code-work%3F>`_.\n\nOld Cool Features\n==================\n\nBefore getting to the new stuff, I'll describe cool things that was there before.\n\nI particularly liked the ability to show the assembly, grammar\nreduction rules as they occurred, and the resulting parse tree. It is\nneat that you could follow the process and steps that deparser takes,\nand in this not only see the result how the bytecode corresponds to\nthe resulting source. Compare this with other Python decompilers.\n\nAnd of course also neat was that this used a grammar and table-driven\napproach to decompile.\n\n\nExpanding decompilation to multiple Python Versions\n==================================================\n\nAside from ``pycdc``, most of the Python decompilers handle a small\nnumber of Python versions, if they supported more than one. And even\nwhen more than one version is supported if you have to be running the\nPython version that the bytecode was compiled for.\n\nThere main reason that you have to be running the Python bytecode\ninterpreter as the one you want to decompile largely stems from the\nfact that Python's ``dis`` module is often what is used and that has this limitation.\n\n``pycdc`` doesn't suffer this problem because it is written in C++,\nnot Python.  Hartmut Goebel's code had provisions for multiple Python\nversions running from an interpreter different from the one that was\nrunning the decompiler. That however used compiled code in the process\nwas tied a bit to the Python C headers for a particular version.\n\nYou need to not only to account for different \"marshal\" and \"unmarshal\"\nroutines for the different Python versions, but also, as the Python versions\nextend, you need a different code type as well.\n\nEnter ``xdis``\n--------------\n\nTo handle all of these problems, I split off the marshal loading\nportion and disassembly routines into a separate module,\n`xdis <https://pypi.org/project/xdis/>`_. This also allows older Pythons to have access to features\nfound in newer Pythons, such as parsing the bytecode, a uniform stream\nof bytes, into a list of structured bytecode instructions.\n\nPython 2.7's ``dis`` module doesn't has provide a instruction abstraction.\nTherefore in ``uncompyle2`` and other earlier decompilers you see code with magic numbers like 4 in::\n\n    if end > jump_back+4 and code[end] in (JF, JA):\n        if code[jump_back+4] in (JA, JF):\n            if self.get_target(jump_back+4) == self.get_target(end):\n                self.fixed_jumps[pos] = jump_back+4\n                end = jump_back+4\n    elif target < pos:\n        self.fixed_jumps[pos] = jump_back+4\n        end = jump_back+4\n\nand in other code -1 and 3 in::\n\n        if self.get_target(jmp) != start_else:\n            end_else = self.get_target(jmp)\n        if self.code[jmp] == JF:\n            self.fixed_jumps[jmp] = -1\n        self.structs.append({'type':  'except',\n                       'start': i,\n                       'end':   jmp})\n        i = jmp + 3\n\nAll of that offset arithmetic is trying to find the next instruction\noffset or the previous offset. Using a list of instructions you simply\ntake the ``offset`` field of the previous or next instruction.\n\nThe above code appears in the ``uncompyle2`` \"Scanner\" class in\nservice of trying to figure out control flow. Note also that there\nisn't a single comment in there about what specifically it is trying\nto do, the logic or that would lead one to be confident that this is\ncorrect, let alone assumptions that are needed for this to be true.\n\nWhile this might largely work for Python 2.7, and ``uncompyle2`` does\nget control flow wrong sometimes, it is impossible to adapt code for\nother versions of Python.\n\nIn addition adding an instruction structure, ``xdis`` adds various\nflags and features that assist in working with instructions. In the\nexample above this replaces code like ``... in (JF, JA)`` which is\nsome sort of unconditional jump instruction.\n\nAlthough not needed in the decompiler, ``xdis`` also has nicer\ninstruction print format. It can show you the bytes as well as the\ninterpreted instructions. It will interpret flag bits and packed\nstructures in operands so you don't have to. It can even do a limited\nform of inspection at previous instructions to give a more complete\ndescription of an operand. For example on ``LOAD_ATTR`` which loads\nthe attribute of a variable, often the variable name can be found as\nthe previous instruction. When that is the case the disassembler can\ninclude that in the disassembly display for the ``LOAD_ATTR`` operand.\n\n\nPython Grammar Isolation\n------------------------\n\nIf you want to support multiple versions of Python in a manageable way\nyou really need to provide different grammars for the different\nversions, in a grammar-based system. None of the published versions of\nthis decompiler did this.\n\nIf you look at the changes in this code, right now there are no\ngrammar changes needed between 1.0 to 1.3. (Some of this may be wrong\nthough since we haven't extensively tested these earliest Python versions\n\nFor Python 1.4 which is based off of the grammar for 1.5 though there\nare number of changes, about 6 grammar rules. Later versions of though\nwe start to see larger upheaval and at certain places, especially\nthose where new opcodes are introduced, especially those that change\nthe way calls or exceptions get handled, we have major upheaval in the\ngrammar. It is not just that some rules get added, but we also need to\n*remove* some grammar rules as well.\n\nI have been largely managing this as incremental differences between versions.\nHowever in the future I am leaning more towards totally separate grammars.\nA well constructed grammar doesn't need to be that large.\n\nWhen starting out a new version, we can just copy the grammar from the\nprior version.  Within a Python version though, I am breaking these\ninto composable pieces. In particular the grammar for handling what\ncan appear as the body of a lambda, is a subset of the full Python\nlanguage. The language allowed in an ``eval`` is also a subset of the\nfull Python language, as are what can appear in the various\ncompilation modes like \"single\" versus \"exec\".\n\nAnother nice natural self-contain grammar section is what can appear\nin list comprehensions and generators. The bodies of these are\ngenerally represented in a self-contained code block.\n\nOften in decompilation you may be interested not just in decompiling\nthe entire code but you may be interested in only focusing on a\nspecific part of the code. And if there is a problem in decompiling\nthe entire piece of code, having these smaller breaking points can be\nof assistance.\n\nOther Modularity\n----------------\n\nAbove we have mentioned the need for separate grammars or to isolate\nthese per versions. But there are other major pieces that make up this\ndecompiler. In particular there is a scanner and the source code\ngeneration part.\n\nEven though differences in version that occur in disassembly are\nhandled by ``xdis``, we still have to do conversion of that to a token\nstream for parsing. So the scanners are again broken out per version\nwith various OO mechanisms for reusing code. The same is true for\nsource code generation.\n\n\nExpanding decompiler availability to multiple Python Versions\n--------------------------------------------------------------\n\nAbove we mention decompiling multiple versions of bytecode from a\nsingle Python interpreter. We talk about having the decompiler\nrunnable from multiple versions of Python, independent of the set of\nbytecode that the decompiler supports.\n\n\nThere are slight advantages in having a decompiler that runs the same\nversion as the code you are decompiling. The most obvious one is that\nit makes it easy to test to see whether the decompilation correct\nbecause you can run the decompiled code. Python comes with a suite of\nPython programs that check themselves and that aspects of Python are\nimplemented correctly. These also make excellent programs to check\nwhether a program has decompiled correctly.\n\nAside from this, debugging can be easier as well. To assist\nunderstanding bytecode and single stepping it see `x-python\n<https://pypi.org/project/x-python/>`_ and the debugger for it\n`trepan-xpy <https://pypi.org/project/trepanxpy/>`_.\n\nHandling Language Drift\n-----------------------\n\nGiven the desirability of having this code running on logs of Python\nversions, how can we get this done?\n\nThe solution used here is to have several git branches of the\ncode. Right now there are 3 branches. Each branch handles works across\n3 or so different releases of Python. In particular one branch handles\nPython 2.4 to 2.7 Another handles Python 3.3 to 3.5, and the master\nbranch handles 3.6 to 3.10. (Again note that the 3.9 and 3.10\ndecompilers do not decompile Python 3.9 or 3.10, but they do handle\nbytecode for all earlier versions.)\n\n\nCool features of the Parser\n===========================\n\n* reduction rule checking\n* numbering tokens\n* showing a stack of completions\n\nCool features Semantic Analysis\n===============================\n\n* ``--tree++`` (``-T``) option\n* showing precedence\n* See `Adding a tree transformation phase to uncompyle6 <https://github.com/rocky/python-uncompyle6/wiki/Adding-a-tree-transformation-phase-to-uncompyle6>`_\n* following AST\n* Fragment deparsing\n"
        },
        {
          "name": "PKG-INFO",
          "type": "blob",
          "size": 18.8037109375,
          "content": "Metadata-Version: 1.1\nName: uncompyle6\nVersion: 3.9.1\nSummary: Python cross-version byte-code decompiler\nHome-page: https://github.com/rocky/python-uncompyle6/\nAuthor: Rocky Bernstein, Hartmut Goebel, John Aycock, and others\nAuthor-email: rb@dustyfeet.com\nLicense: GPL3\nDescription: |buildstatus|  |Pypi Installs| |Latest Version| |Supported Python Versions|\n        \n        |packagestatus|\n        \n        .. contents::\n        \n        uncompyle6\n        ==========\n        \n        A native Python cross-version decompiler and fragment decompiler.\n        The successor to decompyle, uncompyle, and uncompyle2.\n        \n        \n        Introduction\n        ------------\n        \n        *uncompyle6* translates Python bytecode back into equivalent Python\n        source code. It accepts bytecodes from Python version 1.0 to version\n        3.8, spanning over 24 years of Python releases. We include Dropbox's\n        Python 2.5 bytecode and some PyPy bytecodes.\n        \n        Why this?\n        ---------\n        \n        Ok, I'll say it: this software is amazing. It is more than your\n        normal hacky decompiler. Using compiler_ technology, the program\n        creates a parse tree of the program from the instructions; nodes at\n        the upper levels that look a little like what might come from a Python\n        AST. So we can really classify and understand what's going on in\n        sections of Python bytecode.\n        \n        Building on this, another thing that makes this different from other\n        CPython bytecode decompilers is the ability to deparse just\n        *fragments* of source code and give source-code information around a\n        given bytecode offset.\n        \n        I use the tree fragments to deparse fragments of code *at run time*\n        inside my trepan_ debuggers_. For that, bytecode offsets are recorded\n        and associated with fragments of the source code. This purpose,\n        although compatible with the original intention, is yet a little bit\n        different.  See this_ for more information.\n        \n        Python fragment deparsing given an instruction offset is useful in\n        showing stack traces and can be incorporated into any program that\n        wants to show a location in more detail than just a line number at\n        runtime.  This code can be also used when source-code information does\n        not exist and there is just bytecode. Again, my debuggers make use of\n        this.\n        \n        There were (and still are) a number of decompyle, uncompyle,\n        uncompyle2, uncompyle3 forks around. Many of them come basically from\n        the same code base, and (almost?) all of them are no longer actively\n        maintained. One was really good at decompiling Python 1.5-2.3, another\n        really good at Python 2.7, but that only. Another handles Python 3.2\n        only; another patched that and handled only 3.3.  You get the\n        idea. This code pulls all of these forks together and *moves\n        forward*. There is some serious refactoring and cleanup in this code\n        base over those old forks. Even more experimental refactoring is going\n        on in decompyle3_.\n        \n        This demonstrably does the best in decompiling Python across all\n        Python versions. And even when there is another project that only\n        provides decompilation for subset of Python versions, we generally do\n        demonstrably better for those as well.\n        \n        How can we tell? By taking Python bytecode that comes distributed with\n        that version of Python and decompiling these.  Among those that\n        successfully decompile, we can then make sure the resulting programs\n        are syntactically correct by running the Python interpreter for that\n        bytecode version.  Finally, in cases where the program has a test for\n        itself, we can run the check on the decompiled code.\n        \n        We use an automated processes to find bugs. In the issue trackers for\n        other decompilers, you will find a number of bugs we've found along\n        the way. Very few to none of them are fixed in the other decompilers.\n        \n        Requirements\n        ------------\n        \n        The code in the git repository can be run from Python 2.4 to the\n        latest Python version, with the exception of Python 3.0 through\n        3.2. Volunteers are welcome to address these deficiencies if there a\n        desire to do so.\n        \n        The way it does this though is by segregating consecutive Python versions into\n        git branches:\n        \n        master\n           Python 3.6 and up (uses type annotations)\n        python-3.3-to-3.5\n           Python 3.3 through 3.5 (Generic Python 3)\n        python-2.4\n           Python 2.4 through 2.7 (Generic Python 2)\n        \n        PyPy 3-2.4 and later works as well.\n        \n        The bytecode files it can read have been tested on Python\n        bytecodes from versions 1.4, 2.1-2.7, and 3.0-3.8 and later PyPy\n        versions.\n        \n        Installation\n        ------------\n        \n        You can install from PyPI using the name ``uncompyle6``::\n        \n            pip install uncompyle6\n        \n        \n        To install from source code, this project uses setup.py, so it follows the standard Python routine::\n        \n            $ pip install -e .  # set up to run from source tree\n        \n        or::\n        \n            $ python setup.py install # may need sudo\n        \n        A GNU Makefile is also provided so :code:`make install` (possibly as root or\n        sudo) will do the steps above.\n        \n        Running Tests\n        -------------\n        \n        ::\n        \n           make check\n        \n        A GNU makefile has been added to smooth over setting running the right\n        command, and running tests from fastest to slowest.\n        \n        If you have remake_ installed, you can see the list of all tasks\n        including tests via :code:`remake --tasks`\n        \n        \n        Usage\n        -----\n        \n        Run\n        \n        ::\n        \n        $ uncompyle6 *compiled-python-file-pyc-or-pyo*\n        \n        For usage help:\n        \n        ::\n        \n           $ uncompyle6 -h\n        \n        Verification\n        ------------\n        \n        In older versions of Python it was possible to verify bytecode by\n        decompiling bytecode, and then compiling using the Python interpreter\n        for that bytecode version. Having done this, the bytecode produced\n        could be compared with the original bytecode. However as Python's code\n        generation got better, this no longer was feasible.\n        \n        If you want Python syntax verification of the correctness of the\n        decompilation process, add the :code:`--syntax-verify` option. However since\n        Python syntax changes, you should use this option if the bytecode is\n        the right bytecode for the Python interpreter that will be checking\n        the syntax.\n        \n        You can also cross compare the results with another version of\n        `uncompyle6` since there are sometimes regressions in decompiling\n        specific bytecode as the overall quality improves.\n        \n        For Python 3.7 and 3.8, the code in decompyle3_ is generally\n        better.\n        \n        Or try specific another python decompiler like uncompyle2_, unpyc37_,\n        or pycdc_.  Since the later two work differently, bugs here often\n        aren't in that, and vice versa.\n        \n        There is an interesting class of these programs that is readily\n        available give stronger verification: those programs that when run\n        test themselves. Our test suite includes these.\n        \n        And Python comes with another a set of programs like this: its test\n        suite for the standard library. We have some code in :code:`test/stdlib` to\n        facilitate this kind of checking too.\n        \n        Known Bugs/Restrictions\n        -----------------------\n        \n        The biggest known and possibly fixable (but hard) problem has to do\n        with handling control flow. (Python has probably the most diverse and\n        screwy set of compound statements I've ever seen; there\n        are \"else\" clauses on loops and try blocks that I suspect many\n        programmers don't know about.)\n        \n        All of the Python decompilers that I have looked at have problems\n        decompiling Python's control flow. In some cases we can detect an\n        erroneous decompilation and report that.\n        \n        Python support is pretty good for Python 2\n        \n        On the lower end of Python versions, decompilation seems pretty good although\n        we don't have any automated testing in place for Python's distributed tests.\n        Also, we don't have a Python interpreter for versions 1.6, and 2.0.\n        \n        In the Python 3 series, Python support is strongest around 3.4 or\n        3.3 and drops off as you move further away from those versions. Python\n        3.0 is weird in that it in some ways resembles 2.6 more than it does\n        3.1 or 2.7. Python 3.6 changes things drastically by using word codes\n        rather than byte codes. As a result, the jump offset field in a jump\n        instruction argument has been reduced. This makes the :code:`EXTENDED_ARG`\n        instructions are now more prevalent in jump instruction; previously\n        they had been rare.  Perhaps to compensate for the additional\n        :code:`EXTENDED_ARG` instructions, additional jump optimization has been\n        added. So in sum handling control flow by ad hoc means as is currently\n        done is worse.\n        \n        Between Python 3.5, 3.6, 3.7 there have been major changes to the\n        :code:`MAKE_FUNCTION` and :code:`CALL_FUNCTION` instructions.\n        \n        Python 3.8 removes :code:`SETUP_LOOP`, :code:`SETUP_EXCEPT`,\n        :code:`BREAK_LOOP`, and :code:`CONTINUE_LOOP`, instructions which may\n        make control-flow detection harder, lacking the more sophisticated\n        control-flow analysis that is planned. We'll see.\n        \n        Currently not all Python magic numbers are supported. Specifically in\n        some versions of Python, notably Python 3.6, the magic number has\n        changes several times within a version.\n        \n        **We support only released versions, not candidate versions.** Note\n        however that the magic of a released version is usually the same as\n        the *last* candidate version prior to release.\n        \n        There are also customized Python interpreters, notably Dropbox,\n        which use their own magic and encrypt bytecode. With the exception of\n        the Dropbox's old Python 2.5 interpreter this kind of thing is not\n        handled.\n        \n        We also don't handle PJOrion_ or otherwise obfuscated code. For\n        PJOrion try: PJOrion Deobfuscator_ to unscramble the bytecode to get\n        valid bytecode before trying this tool; pydecipher_ might help with that.\n        \n        This program can't decompile Microsoft Windows EXE files created by\n        Py2EXE_, although we can probably decompile the code after you extract\n        the bytecode properly. `Pydeinstaller <https://github.com/charles-dyfis-net/pydeinstaller>`_ may help with unpacking Pyinstaller bundlers.\n        \n        Handling pathologically long lists of expressions or statements is\n        slow. We don't handle Cython_ or MicroPython which don't use bytecode.\n        \n        There are numerous bugs in decompilation. And that's true for every\n        other CPython decompiler I have encountered, even the ones that\n        claimed to be \"perfect\" on some particular version like 2.4.\n        \n        As Python progresses decompilation also gets harder because the\n        compilation is more sophisticated and the language itself is more\n        sophisticated. I suspect that attempts there will be fewer ad-hoc\n        attempts like unpyc37_ (which is based on a 3.3 decompiler) simply\n        because it is harder to do so. The good news, at least from my\n        standpoint, is that I think I understand what's needed to address the\n        problems in a more robust way. But right now until such time as\n        project is better funded, I do not intend to make any serious effort\n        to support Python versions 3.8 or 3.9, including bugs that might come\n        in. I imagine at some point I may be interested in it.\n        \n        You can easily find bugs by running the tests against the standard\n        test suite that Python uses to check itself. At any given time, there are\n        dozens of known problems that are pretty well isolated and that could\n        be solved if one were to put in the time to do so. The problem is that\n        there aren't that many people who have been working on bug fixing.\n        \n        Some of the bugs in 3.7 and 3.8 are simply a matter of back-porting\n        the fixes in decompyle3. Volunteers are welcome to do so.\n        \n        You may run across a bug, that you want to report. Please do so after\n        reading `How to report a bug\n        <https://github.com/rocky/python-uncompyle6/blob/master/HOW-TO-REPORT-A-BUG.md>`_ and\n        follow the `instructions when opening an issue <https://github.com/rocky/python-uncompyle6/issues/new?assignees=&labels=&template=bug-report.md>`_.\n        \n        Be aware that it might not get my attention for a while. If you\n        sponsor or support the project in some way, I'll prioritize your\n        issues above the queue of other things I might be doing instead.\n        \n        See Also\n        --------\n        \n        * https://github.com/rocky/python-decompile3 : Much smaller and more modern code, focusing on 3.7 and 3.8. Changes in that will get migrated back here.\n        * https://code.google.com/archive/p/unpyc3/ : supports Python 3.2 only. The above projects use a different decompiling technique than what is used here. Currently unmaintained.\n        * https://github.com/figment/unpyc3/ : fork of above, but supports Python 3.3 only. Includes some fixes like supporting function annotations. Currently unmaintained.\n        * https://github.com/wibiti/uncompyle2 : supports Python 2.7 only, but does that fairly well. There are situations where :code:`uncompyle6` results are incorrect while :code:`uncompyle2` results are not, but more often uncompyle6 is correct when uncompyle2 is not. Because :code:`uncompyle6` adheres to accuracy over idiomatic Python, :code:`uncompyle2` can produce more natural-looking code when it is correct. Currently :code:`uncompyle2` is lightly maintained. See its issue `tracker <https://github.com/wibiti/uncompyle2/issues>`_ for more details.\n        * `How to report a bug <https://github.com/rocky/python-uncompyle6/blob/master/HOW-TO-REPORT-A-BUG.md>`_\n        * The HISTORY_ file.\n        * https://github.com/rocky/python-xdis : Cross Python version disassembler\n        * https://github.com/rocky/python-xasm : Cross Python version assembler\n        * https://github.com/rocky/python-uncompyle6/wiki : Wiki Documents which describe the code and aspects of it in more detail\n        * https://github.com/zrax/pycdc : The README for this C++ code says it aims to support all versions of Python. You can aim your slign shot for the moon too, but I doubt you are going to hit it. This code is best for Python versions around 2.7 and 3.3 when the code was initially developed. Accuracy for current versions of Python3 and early versions of Python is lacking. Without major effort, it is unlikely it can be made to support current Python 3. See its `issue tracker <https://github.com/zrax/pycdc/issues>`_ for details. Currently lightly maintained.\n        \n        \n        .. _Cython: https://en.wikipedia.org/wiki/Cython\n        .. _trepan: https://pypi.python.org/pypi/trepan3k\n        .. _compiler: https://github.com/rocky/python-uncompyle6/wiki/How-does-this-code-work%3F\n        .. _HISTORY: https://github.com/rocky/python-uncompyle6/blob/master/HISTORY.md\n        .. _report_bug: https://github.com/rocky/python-uncompyle6/blob/master/HOW-TO-REPORT-A-BUG.md\n        .. _debuggers: https://pypi.python.org/pypi/trepan3k\n        .. _remake: https://bashdb.sf.net/remake\n        .. _pycdc: https://github.com/zrax/pycdc\n        .. _decompyle3: https://github.com/rocky/python-decompile3\n        .. _uncompyle2: https://github.com/wibiti/uncompyle2\n        .. _unpyc37: https://github.com/andrew-tavera/unpyc37\n        .. _this: https://github.com/rocky/python-uncompyle6/wiki/Deparsing-technology-and-its-use-in-exact-location-reporting\n        .. |buildstatus| image:: https://travis-ci.org/rocky/python-uncompyle6.svg\n        \t\t :target: https://travis-ci.org/rocky/python-uncompyle6\n        .. |packagestatus| image:: https://repology.org/badge/vertical-allrepos/python:uncompyle6.svg\n        \t\t :target: https://repology.org/project/python:uncompyle6/versions\n        .. _PJOrion: http://www.koreanrandom.com/forum/topic/15280-pjorion-%D1%80%D0%B5%D0%B4%D0%B0%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D0%BE%D0%B1%D1%84\n        .. _pydecipher: https://github.com/mitre/pydecipher\n        .. _Deobfuscator: https://github.com/extremecoders-re/PjOrion-Deobfuscator\n        .. _Py2EXE: https://en.wikipedia.org/wiki/Py2exe\n        .. |Supported Python Versions| image:: https://img.shields.io/pypi/pyversions/uncompyle6.svg\n        .. |Latest Version| image:: https://badge.fury.io/py/uncompyle6.svg\n        \t\t :target: https://badge.fury.io/py/uncompyle6\n        .. |Pypi Installs| image:: https://pepy.tech/badge/uncompyle6/month\n        \n        \nPlatform: UNKNOWN\nClassifier: Development Status :: 5 - Production/Stable\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 2.4\nClassifier: Programming Language :: Python :: 2.5\nClassifier: Programming Language :: Python :: 2.6\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python :: 3.0\nClassifier: Programming Language :: Python :: 3.1\nClassifier: Programming Language :: Python :: 3.2\nClassifier: Programming Language :: Python :: 3.3\nClassifier: Programming Language :: Python :: 3.4\nClassifier: Programming Language :: Python :: 3.5\nClassifier: Programming Language :: Python :: 3.6\nClassifier: Programming Language :: Python :: 3.7\nClassifier: Programming Language :: Python :: 3.8\nClassifier: Programming Language :: Python :: 3.9\nClassifier: Programming Language :: Python :: 3.10\nClassifier: Programming Language :: Python :: 3.11\nClassifier: Programming Language :: Python :: 3.12\nClassifier: Programming Language :: Python :: Implementation :: PyPy\nClassifier: Topic :: Software Development :: Debuggers\nClassifier: Topic :: Software Development :: Libraries :: Python Modules\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 15.1796875,
          "content": "|buildstatus|  |Pypi Installs| |Latest Version| |Supported Python Versions|\n\n|packagestatus|\n\n.. contents::\n\nuncompyle6\n==========\n\nA native Python cross-version decompiler and fragment decompiler.\nThe successor to decompyle, uncompyle, and uncompyle2.\n\n\nIntroduction\n------------\n\n*uncompyle6* translates Python bytecode back into equivalent Python\nsource code. It accepts bytecodes from Python version 1.0 to version\n3.8, spanning over 24 years of Python releases. We include Dropbox's\nPython 2.5 bytecode and some PyPy bytecodes.\n\nWhy this?\n---------\n\nOk, I'll say it: this software is amazing. It is more than your\nnormal hacky decompiler. Using compiler_ technology, the program\ncreates a parse tree of the program from the instructions; nodes at\nthe upper levels that look a little like what might come from a Python\nAST. So we can really classify and understand what's going on in\nsections of Python bytecode.\n\nBuilding on this, another thing that makes this different from other\nCPython bytecode decompilers is the ability to deparse just\n*fragments* of source code and give source-code information around a\ngiven bytecode offset.\n\nI use the tree fragments to deparse fragments of code *at run time*\ninside my trepan_ debuggers_. For that, bytecode offsets are recorded\nand associated with fragments of the source code. This purpose,\nalthough compatible with the original intention, is yet a little bit\ndifferent.  See this_ for more information.\n\nPython fragment deparsing given an instruction offset is useful in\nshowing stack traces and can be incorporated into any program that\nwants to show a location in more detail than just a line number at\nruntime.  This code can be also used when source-code information does\nnot exist and there is just bytecode. Again, my debuggers make use of\nthis.\n\nThere were (and still are) a number of decompyle, uncompyle,\nuncompyle2, uncompyle3 forks around. Many of them come basically from\nthe same code base, and (almost?) all of them are no longer actively\nmaintained. One was really good at decompiling Python 1.5-2.3, another\nreally good at Python 2.7, but that only. Another handles Python 3.2\nonly; another patched that and handled only 3.3.  You get the\nidea. This code pulls all of these forks together and *moves\nforward*. There is some serious refactoring and cleanup in this code\nbase over those old forks. Even more experimental refactoring is going\non in decompyle3_.\n\nThis demonstrably does the best in decompiling Python across all\nPython versions. And even when there is another project that only\nprovides decompilation for subset of Python versions, we generally do\ndemonstrably better for those as well.\n\nHow can we tell? By taking Python bytecode that comes distributed with\nthat version of Python and decompiling these.  Among those that\nsuccessfully decompile, we can then make sure the resulting programs\nare syntactically correct by running the Python interpreter for that\nbytecode version.  Finally, in cases where the program has a test for\nitself, we can run the check on the decompiled code.\n\nWe use an automated processes to find bugs. In the issue trackers for\nother decompilers, you will find a number of bugs we've found along\nthe way. Very few to none of them are fixed in the other decompilers.\n\nRequirements\n------------\n\nThe code in the git repository can be run from Python 2.4 to the\nlatest Python version, with the exception of Python 3.0 through\n3.2. Volunteers are welcome to address these deficiencies if there a\ndesire to do so.\n\nThe way it does this though is by segregating consecutive Python versions into\ngit branches:\n\nmaster\n   Python 3.6 and up (uses type annotations)\npython-3.3-to-3.5\n   Python 3.3 through 3.5 (Generic Python 3)\npython-2.4\n   Python 2.4 through 2.7 (Generic Python 2)\n\nPyPy 3-2.4 and later works as well.\n\nThe bytecode files it can read have been tested on Python\nbytecodes from versions 1.4, 2.1-2.7, and 3.0-3.8 and later PyPy\nversions.\n\nInstallation\n------------\n\nYou can install from PyPI using the name ``uncompyle6``::\n\n    pip install uncompyle6\n\n\nTo install from source code, this project uses setup.py, so it follows the standard Python routine::\n\n    $ pip install -e .  # set up to run from source tree\n\nor::\n\n    $ python setup.py install # may need sudo\n\nA GNU Makefile is also provided so :code:`make install` (possibly as root or\nsudo) will do the steps above.\n\nRunning Tests\n-------------\n\n::\n\n   make check\n\nA GNU makefile has been added to smooth over setting running the right\ncommand, and running tests from fastest to slowest.\n\nIf you have remake_ installed, you can see the list of all tasks\nincluding tests via :code:`remake --tasks`\n\n\nUsage\n-----\n\nRun\n\n::\n\n$ uncompyle6 *compiled-python-file-pyc-or-pyo*\n\nFor usage help:\n\n::\n\n   $ uncompyle6 -h\n\nVerification\n------------\n\nIn older versions of Python it was possible to verify bytecode by\ndecompiling bytecode, and then compiling using the Python interpreter\nfor that bytecode version. Having done this, the bytecode produced\ncould be compared with the original bytecode. However as Python's code\ngeneration got better, this no longer was feasible.\n\nIf you want Python syntax verification of the correctness of the\ndecompilation process, add the :code:`--syntax-verify` option. However since\nPython syntax changes, you should use this option if the bytecode is\nthe right bytecode for the Python interpreter that will be checking\nthe syntax.\n\nYou can also cross compare the results with another version of\n*uncompyle6* since there are sometimes regressions in decompiling\nspecific bytecode as the overall quality improves.\n\nFor Python 3.7 and 3.8, the code in decompyle3_ is generally\nbetter.\n\nOr try specific another python decompiler like uncompyle2_, unpyc37_,\nor pycdc_.  Since the later two work differently, bugs here often\naren't in that, and vice versa.\n\nThere is an interesting class of these programs that is readily\navailable give stronger verification: those programs that when run\ntest themselves. Our test suite includes these.\n\nAnd Python comes with another a set of programs like this: its test\nsuite for the standard library. We have some code in :code:`test/stdlib` to\nfacilitate this kind of checking too.\n\nKnown Bugs/Restrictions\n-----------------------\n\nThe biggest known and possibly fixable (but hard) problem has to do\nwith handling control flow. (Python has probably the most diverse and\nscrewy set of compound statements I've ever seen; there\nare \"else\" clauses on loops and try blocks that I suspect many\nprogrammers don't know about.)\n\nAll of the Python decompilers that I have looked at have problems\ndecompiling Python's control flow. In some cases we can detect an\nerroneous decompilation and report that.\n\nPython support is pretty good for Python 2\n\nOn the lower end of Python versions, decompilation seems pretty good although\nwe don't have any automated testing in place for Python's distributed tests.\nAlso, we don't have a Python interpreter for versions 1.6, and 2.0.\n\nIn the Python 3 series, Python support is strongest around 3.4 or\n3.3 and drops off as you move further away from those versions. Python\n3.0 is weird in that it in some ways resembles 2.6 more than it does\n3.1 or 2.7. Python 3.6 changes things drastically by using word codes\nrather than byte codes. As a result, the jump offset field in a jump\ninstruction argument has been reduced. This makes the :code:`EXTENDED_ARG`\ninstructions are now more prevalent in jump instruction; previously\nthey had been rare.  Perhaps to compensate for the additional\n:code:`EXTENDED_ARG` instructions, additional jump optimization has been\nadded. So in sum handling control flow by ad hoc means as is currently\ndone is worse.\n\nBetween Python 3.5, 3.6, 3.7 there have been major changes to the\n:code:`MAKE_FUNCTION` and :code:`CALL_FUNCTION` instructions.\n\nPython 3.8 removes :code:`SETUP_LOOP`, :code:`SETUP_EXCEPT`,\n:code:`BREAK_LOOP`, and :code:`CONTINUE_LOOP`, instructions which may\nmake control-flow detection harder, lacking the more sophisticated\ncontrol-flow analysis that is planned. We'll see.\n\nCurrently not all Python magic numbers are supported. Specifically in\nsome versions of Python, notably Python 3.6, the magic number has\nchanges several times within a version.\n\n**We support only released versions, not candidate versions.** Note\nhowever that the magic of a released version is usually the same as\nthe *last* candidate version prior to release.\n\nThere are also customized Python interpreters, notably Dropbox,\nwhich use their own magic and encrypt bytecode. With the exception of\nthe Dropbox's old Python 2.5 interpreter this kind of thing is not\nhandled.\n\nWe also don't handle PJOrion_ or otherwise obfuscated code. For\nPJOrion try: PJOrion Deobfuscator_ to unscramble the bytecode to get\nvalid bytecode before trying this tool; pydecipher_ might help with that.\n\nThis program can't decompile Microsoft Windows EXE files created by\nPy2EXE_, although we can probably decompile the code after you extract\nthe bytecode properly. `Pydeinstaller <https://github.com/charles-dyfis-net/pydeinstaller>`_ may help with unpacking Pyinstaller bundlers.\n\nHandling pathologically long lists of expressions or statements is\nslow. We don't handle Cython_ or MicroPython which don't use bytecode.\n\nThere are numerous bugs in decompilation. And that's true for every\nother CPython decompiler I have encountered, even the ones that\nclaimed to be \"perfect\" on some particular version like 2.4.\n\nAs Python progresses decompilation also gets harder because the\ncompilation is more sophisticated and the language itself is more\nsophisticated. I suspect that attempts there will be fewer ad-hoc\nattempts like unpyc37_ (which is based on a 3.3 decompiler) simply\nbecause it is harder to do so. The good news, at least from my\nstandpoint, is that I think I understand what's needed to address the\nproblems in a more robust way. But right now until such time as\nproject is better funded, I do not intend to make any serious effort\nto support Python versions 3.8 or 3.9, including bugs that might come\nin. I imagine at some point I may be interested in it.\n\nYou can easily find bugs by running the tests against the standard\ntest suite that Python uses to check itself. At any given time, there are\ndozens of known problems that are pretty well isolated and that could\nbe solved if one were to put in the time to do so. The problem is that\nthere aren't that many people who have been working on bug fixing.\n\nSome of the bugs in 3.7 and 3.8 are simply a matter of back-porting\nthe fixes in *decompyle3*. Any volunteers?\n\nYou may run across a bug, that you want to report. Please do so after\nreading `How to report a bug\n<https://github.com/rocky/python-uncompyle6/blob/master/HOW-TO-REPORT-A-BUG.md>`_ and\nfollow the `instructions when opening an issue <https://github.com/rocky/python-uncompyle6/issues/new?assignees=&labels=&template=bug-report.md>`_.\n\nBe aware that it might not get my attention for a while. If you\nsponsor or support the project in some way, I'll prioritize your\nissues above the queue of other things I might be doing instead. In\nrare situtations, I can do a hand decompilation of bytecode for a fee.\nHowever this is expansive, usually beyond what most people are willing\nto spend.\n\nSee Also\n--------\n\n* https://rocky.github.io/blackhat-asia-2024-additional/all-notes-print.html :  How to Read and Write a High-Level Bytecode Decompiler: ``uncompyle6`` ``decompyle3`` -- BlackHat 2024 Asia (`video <https://www.youtube.com/watch?v=NA77SFncppE>`_). A big thanks to the Organizers and Reviewers for letting me speak. This kind of thing encourages me to work on projects like this.\n* https://github.com/rocky/python-decompile3 : Much smaller and more modern code, focusing on 3.7 and 3.8. Changes in that will get migrated back here.\n* https://code.google.com/archive/p/unpyc3/ : supports Python 3.2 only. The above projects use a different decompiling technique than what is used here. Currently unmaintained.\n* https://github.com/figment/unpyc3/ : fork of above, but supports Python 3.3 only. Includes some fixes like supporting function annotations. Currently unmaintained.\n* https://github.com/wibiti/uncompyle2 : supports Python 2.7 only, but does that fairly well. There are situations where :code:`uncompyle6` results are incorrect while :code:`uncompyle2` results are not, but more often uncompyle6 is correct when uncompyle2 is not. Because :code:`uncompyle6` adheres to accuracy over idiomatic Python, :code:`uncompyle2` can produce more natural-looking code when it is correct. Currently :code:`uncompyle2` is lightly maintained. See its issue `tracker <https://github.com/wibiti/uncompyle2/issues>`_ for more details.\n* `How to report a bug <https://github.com/rocky/python-uncompyle6/blob/master/HOW-TO-REPORT-A-BUG.md>`_\n* The HISTORY_ file.\n* https://github.com/rocky/python-xdis : Cross Python version disassembler\n* https://github.com/rocky/python-xasm : Cross Python version assembler\n* https://github.com/rocky/python-uncompyle6/wiki : Wiki Documents which describe the code and aspects of it in more detail\n* https://github.com/zrax/pycdc : The README for this C++ code says it aims to support all versions of Python. You can aim your slign shot for the moon too, but I doubt you are going to hit it. This code is best for Python versions around 2.7 and 3.3 when the code was initially developed. Accuracy for current versions of Python3 and early versions of Python is lacking. Without major effort, it is unlikely it can be made to support current Python 3. See its `issue tracker <https://github.com/zrax/pycdc/issues>`_ for details. Currently lightly maintained.\n\n\n.. _Cython: https://en.wikipedia.org/wiki/Cython\n.. _trepan: https://pypi.python.org/pypi/trepan3k\n.. _compiler: https://github.com/rocky/python-uncompyle6/wiki/How-does-this-code-work%3F\n.. _HISTORY: https://github.com/rocky/python-uncompyle6/blob/master/HISTORY.md\n.. _report_bug: https://github.com/rocky/python-uncompyle6/blob/master/HOW-TO-REPORT-A-BUG.md\n.. _debuggers: https://pypi.python.org/pypi/trepan3k\n.. _remake: https://bashdb.sf.net/remake\n.. _pycdc: https://github.com/zrax/pycdc\n.. _decompyle3: https://github.com/rocky/python-decompile3\n.. _uncompyle2: https://github.com/wibiti/uncompyle2\n.. _unpyc37: https://github.com/andrew-tavera/unpyc37\n.. _this: https://github.com/rocky/python-uncompyle6/wiki/Deparsing-technology-and-its-use-in-exact-location-reporting\n.. |buildstatus| image:: https://circleci.com/gh/rocky/python-uncompyle6.svg?style=svg\n\t\t :target: https://app.circleci.com/pipelines/github/rocky/python-uncompyle6\n.. |packagestatus| image:: https://repology.org/badge/vertical-allrepos/python:uncompyle6.svg\n\t\t :target: https://repology.org/project/python:uncompyle6/versions\n.. _PJOrion: http://www.koreanrandom.com/forum/topic/15280-pjorion-%D1%80%D0%B5%D0%B4%D0%B0%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D0%B4%D0%B5%D0%BA%D0%BE%D0%BC%D0%BF%D0%B8%D0%BB%D1%8F%D1%86%D0%B8%D1%8F-%D0%BE%D0%B1%D1%84\n.. _pydecipher: https://github.com/mitre/pydecipher\n.. _Deobfuscator: https://github.com/extremecoders-re/PjOrion-Deobfuscator\n.. _Py2EXE: https://en.wikipedia.org/wiki/Py2exe\n.. |Supported Python Versions| image:: https://img.shields.io/pypi/pyversions/uncompyle6.svg\n.. |Latest Version| image:: https://badge.fury.io/py/uncompyle6.svg\n\t\t :target: https://badge.fury.io/py/uncompyle6\n.. |Pypi Installs| image:: https://pepy.tech/badge/uncompyle6/month\n"
        },
        {
          "name": "__pkginfo__.py",
          "type": "blob",
          "size": 3.966796875,
          "content": "# Copyright (C) 2018, 2020-2021 2024 Rocky Bernstein <rocky@gnu.org>\n#\n#  This program is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"uncompyle6 packaging information\"\"\"\n\n# To the extent possible we make this file look more like a\n# configuration file rather than code like setup.py. I find putting\n# configuration stuff in the middle of a function call in setup.py,\n# which for example requires commas in between parameters, is a little\n# less elegant than having it here with reduced code, albeit there\n# still is some room for improvement.\n\n# Python-version | package | last-version |\n# -----------------------------------------\n# 2.5            | pip     |  1.1         |\n# 2.6            | pip     |  1.5.6       |\n# 2.7            | pip     | 19.2.3       |\n# 2.7            | pip     |  1.2.1       |\n# 3.1            | pip     |  1.5.6       |\n# 3.2            | pip     |  7.1.2       |\n# 3.3            | pip     | 10.0.1       |\n# 3.4            | pip     | 19.1.1       |\n\nimport os.path as osp\n\n# Things that change more often go here.\ncopyright = \"\"\"\nCopyright (C) 2015-2021, 2024 Rocky Bernstein <rb@dustyfeet.com>.\n\"\"\"\n\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: GNU General Public License v3 (GPLv3)\",\n    \"Operating System :: OS Independent\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 2\",\n    \"Programming Language :: Python :: 2.4\",\n    \"Programming Language :: Python :: 2.5\",\n    \"Programming Language :: Python :: 2.6\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.0\",\n    \"Programming Language :: Python :: 3.1\",\n    \"Programming Language :: Python :: 3.2\",\n    \"Programming Language :: Python :: 3.3\",\n    \"Programming Language :: Python :: 3.4\",\n    \"Programming Language :: Python :: 3.5\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: Implementation :: PyPy\",\n    \"Topic :: Software Development :: Debuggers\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n]\n\n# The rest in alphabetic order\nauthor = \"Rocky Bernstein, Hartmut Goebel, John Aycock, and others\"\nauthor_email = \"rb@dustyfeet.com\"\nentry_points = {\n    \"console_scripts\": [\n        \"uncompyle6=uncompyle6.bin.uncompile:main_bin\",\n        \"pydisassemble=uncompyle6.bin.pydisassemble:main\",\n    ]\n}\nftp_url = None\ninstall_requires = [\"click\", \"spark-parser >= 1.8.9, < 1.9.2\", \"xdis >= 6.1.1, < 6.2.0\"]\n\nlicense = \"GPL3\"\nmailing_list = \"python-debugger@googlegroups.com\"\nmodname = \"uncompyle6\"\npy_modules = None\nshort_desc = \"Python cross-version byte-code decompiler\"\nweb = \"https://github.com/rocky/python-uncompyle6/\"\n\n# tracebacks in zip files are funky and not debuggable\nzip_safe = True\n\n\ndef get_srcdir():\n    filename = osp.normcase(osp.dirname(osp.abspath(__file__)))\n    return osp.realpath(filename)\n\n\nsrcdir = get_srcdir()\n\n\ndef read(*rnames):\n    return open(osp.join(srcdir, *rnames)).read()\n\n\n# Get info from files; set: long_description and VERSION\nlong_description = read(\"README.rst\") + \"\\n\"\nexec(read(\"uncompyle6/version.py\"))\n"
        },
        {
          "name": "admin-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "compile_tests",
          "type": "blob",
          "size": 0.19921875,
          "content": "#!/bin/sh\n\nfor ver in 1.4 1.5 1.6 2 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7; do\n    which python$ver > /dev/null 2>&1 && \\\n    ( python$ver    test/compile_tests\n      python$ver -O test/compile_tests\n    )\ndone\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.9326171875,
          "content": "[build-system]\nrequires = [\n    \"setuptools\",\n    # \"setuptools>=59.6.0\", # for 3.6\n]\n\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nauthors = [\n    {name = \"Rocky Bernstein\",\temail = \"rb@dustyfeet.com\"},\n]\n\nname = \"uncompyle6\"\ndescription = \"Python cross-version byte-code library and disassembler\"\ndependencies = [\n    \"click\",\n    \"spark-parser >= 1.8.9, < 1.9.2\",\n    \"xdis >= 6.1.0, < 6.2.0\",\n]\nreadme = \"README.rst\"\nlicense = {text = \"GPL\"}\nkeywords = [\"Python bytecode\", \"bytecode\", \"disassembler\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Programming Language :: Python\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Programming Language :: Python :: 2.4\",\n    \"Programming Language :: Python :: 2.5\",\n    \"Programming Language :: Python :: 2.6\",\n    \"Programming Language :: Python :: 2.7\",\n    \"Programming Language :: Python :: 3.0\",\n    \"Programming Language :: Python :: 3.1\",\n    \"Programming Language :: Python :: 3.2\",\n    \"Programming Language :: Python :: 3.3\",\n    \"Programming Language :: Python :: 3.4\",\n    \"Programming Language :: Python :: 3.5\",\n    \"Programming Language :: Python :: 3.6\",\n    \"Programming Language :: Python :: 3.7\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n]\ndynamic = [\"version\"]\n\n[project.urls]\nHomepage = \"https://github.com/rocky/python-uncompyle6\"\nDownloads = \"https://github.com/rocky/python-uncompyle6/releases\"\n\n[project.optional-dependencies]\ndev = [\n    \"pre-commit\",\n    \"pytest\",\n]\n\n[project.scripts]\nuncompyle6 = \"uncompyle6.bin.uncompile:main_bin\"\nuncompyle6-tokenize = \"uncompyle6.bin.pydisassemble:main\"\n\n[tool.setuptools.dynamic]\nversion = {attr = \"uncompyle6.version.__version__\"}\n"
        },
        {
          "name": "pytest",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.087890625,
          "content": "flake8\nsix\npytest==3.2.5 # for 2.7 < PYTHON_VERSION <= 3.2 use pytest 2.9.2; for 3.1 2.10\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1171875,
          "content": "# Pick up stuff from setup.py\nhypothesis==2.0.0\npytest\n-e .\n\nClick~=7.0\nxdis>=6.0.4\nconfigobj~=5.0.6\nsetuptools~=71.0.3\n"
        },
        {
          "name": "setup-pretoml.py",
          "type": "blob",
          "size": 1.8134765625,
          "content": "#!/usr/bin/env python\nimport sys\n\nimport setuptools\n\n\"\"\"Setup script for the 'uncompyle6' distribution.\"\"\"\n\nSYS_VERSION = sys.version_info[0:2]\nif SYS_VERSION < (3, 6):\n    mess = \"Python Release 3.6 .. 3.12 are supported in this code branch.\"\n    if (2, 4) <= SYS_VERSION <= (2, 7):\n        mess += (\n            \"\\nFor your Python, version %s, use the python-2.4 code/branch.\"\n            % sys.version[0:3]\n        )\n    if SYS_VERSION >= (3, 6):\n        mess += (\n            \"\\nFor your Python, version %s, use the master code/branch.\"\n            % sys.version[0:3]\n        )\n    if (3, 0) >= SYS_VERSION < (3, 3):\n        mess += (\n            \"\\nFor your Python, version %s, use the python-3.0-to-3.2 code/branch.\"\n            % sys.version[0:3]\n        )\n    if (3, 3) >= SYS_VERSION < (3, 6):\n        mess += (\n            \"\\nFor your Python, version %s, use the python-3.3-to-3.5 code/branch.\"\n            % sys.version[0:3]\n        )\n    elif SYS_VERSION < (2, 4):\n        mess += (\n            \"\\nThis package is not supported for Python version %s.\" % sys.version[0:3]\n        )\n    print(mess)\n    raise Exception(mess)\n\nfrom __pkginfo__ import (\n    __version__,\n    author,\n    author_email,\n    classifiers,\n    entry_points,\n    install_requires,\n    license,\n    long_description,\n    modname,\n    py_modules,\n    short_desc,\n    web,\n    zip_safe,\n)\n\nsetuptools.setup(\n    author=author,\n    author_email=author_email,\n    classifiers=classifiers,\n    description=short_desc,\n    entry_points=entry_points,\n    install_requires=install_requires,\n    license=license,\n    long_description=long_description,\n    long_description_content_type=\"text/x-rst\",\n    name=modname,\n    packages=setuptools.find_packages(),\n    py_modules=py_modules,\n    test_suite=\"nose.collector\",\n    url=web,\n    version=__version__,\n    zip_safe=zip_safe,\n)\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 2.1123046875,
          "content": "[bdist_rpm]\nrelease = 0\npackager = rocky <rb@dustyfeet.com\ndoc_files = README.rst\n\t\tChangeLog\n\t\tCOPYING\n\t\tDECOMPYLE-2.4-CHANGELOG.txt\n\t\tHISTORY.md\n\t\tHOW-TO_REPORT-A-BUG.md\n\t\tNEWS.md\n#\t\tdoc/\n#\t\texamples/\n\n[bdist_wheel]\nuniversal = no\n\n[metadata]\ndescription_file = README.rst\nlicences_files = COPYING\n\n[flake8]\n# max-line-length setting: NO we do not want everyone writing 120-character lines!\n# We are setting the maximum line length big here because there are longer\n# lines allowed by black in some cases that are forbidden by flake8. Since\n# black has the final say about code formatting issues, this setting is here to\n# make sure that flake8 doesn't fail the build on longer lines allowed by\n# black.\nmax-line-length = 120\nmax-complexity = 12\nselect = E,F,W,C,B,B9\nignore =\n    # E123 closing bracket does not match indentation of opening bracket's line\n    E123\n    # E203 whitespace before ':' (Not PEP8 compliant, Python Black)\n    E203\n    # E501 line too long (82 > 79 characters) (replaced by B950 from flake8-bugbear,\n    # https://github.com/PyCQA/flake8-bugbear)\n    E501\n    # W503 line break before binary operator (Not PEP8 compliant, Python Black)\n    W503\n    # W504 line break after binary operator (Not PEP8 compliant, Python Black)\n    W504\n    # C901 function too complex - since many of zz9 functions are too complex with a lot\n    # of if branching\n    C901\n    # module level import not at top of file. This is too restrictive. Can't even have a\n    # docstring higher.\n    E402\nper-file-ignores =\n    # These are config files. The `c` variable them is injected not defined.\n    pow/ansible/roles/jupyterhub/templates/jupyterhub_config*.py:F821\n    # Ignore some errors in files that are stolen from other projects to avoid lots\n    # of merge problems later .\n    pow/ansible/roles/webtier/files/supervisor_httpgroupok.py:E126,E128,E222,E225,E226,E261,E301,E302,E305,F841,E201,E202\n    silhouette/src/silhouette/gprof2dot.py:E711,E713,E741,F401\n    # Ignore undefined name errors in \"expectation\" test Python code.\n    # These files get exec'd in an environment that defines the variables.\n    server/tests/files/expectations/*.py:F821\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.134765625,
          "content": "#!/usr/bin/env python\n\"\"\"Setup script for the 'uncompyle6' distribution.\"\"\"\n\nfrom setuptools import setup\n\nsetup(packages=[\"uncompyle6\"])\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.501953125,
          "content": "; Settings file for flake8:\n;     http://flake8.readthedocs.org/en/latest/config.html#settings\n[flake8]\nexclude = .tox,./build,./trepan/processor/command/tmp\nfilename = *.py\nignore = C901,E113,E121,E122,E123,E124,E125,E126,E127,E128,E129,E201,E202,E203,E221,E222,E225,E226,E241,E242,E251,E261,E271,E272,E302,E401,E402,E501,F401,E701,E702,W503\n\n[tox]\nenvlist = py27, py34, pypy\n\n[testenv]\ndeps =\n    hypothesis\n    pytest\n    flake8\ncommands = python -W always make test {posargs}\n\n[testenv:py27]\ndeps =\n    flake8\n"
        },
        {
          "name": "uncompyle6",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}