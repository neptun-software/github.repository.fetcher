{
  "metadata": {
    "timestamp": 1736559478141,
    "page": 43,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huggingface/parler-tts",
      "stars": 4883,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.7880859375,
          "content": "# Adapted from https://github.com/huggingface/diffusers/blob/main/.gitignore\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# logs\nlogs/\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# vscode\n.vs\n.vscode\n\n# Pycharm\n.idea\n\n# TF code\ntensorflow_code\n\n# Models\nproc_data\n\n# examples\nruns\n/runs_old\n/wandb\n/examples/runs\n/examples/**/*.args\n/examples/rag/sweep\n\n# data\n/data\nserialization_dir\n\n# emacs\n*.*~\ndebug.env\n\n# vim\n.*.swp\n\n#ctags\ntags\n\n# pre-commit\n.pre-commit*\n\n# .lock\n*.lock\n\n# DS_Store (MacOS)\n.DS_Store\n# RL pipelines may produce mp4 outputs\n*.mp4\n\n# dependencies\n/transformers\n\n# ruff\n.ruff_cache\n\nwandb\n"
        },
        {
          "name": "INFERENCE.md",
          "type": "blob",
          "size": 10.8916015625,
          "content": "# Inference tips\n\nParler-TTS benefits from a number of optimizations that can make the model up to 4x faster. Add to this the ability to stream audio as it's being generated, and you can achieve time-to-first audio in under 500ms on a modern GPU.\n\n## ðŸ“– Quick Index\n* [Efficient Attention Implementation](#efficient-attention-implementations)\n* [Compilation](#compilation)\n* [Streaming](#streaming)\n* [Batch generation](#batch-generation)\n* [Speaker Consistency](#speaker-consistency)\n\n## Efficient Attention implementations\n\nParler-TTS supports [SDPA](https://pytorch.org/docs/master/generated/torch.nn.functional.scaled_dot_product_attention.html) and [Flash Attention 2](https://github.com/Dao-AILab/flash-attention).  \n\nSDPA is used by default and speeds up generation time by up to 1.4x compared with eager attention.\n\nTo switch between attention implementations, simply specify `attn_implementation=attn_implementation` when loading the checkpoints:\n\n```py\nfrom parler_tts import ParlerTTSForConditionalGeneration\n\ntorch_device = \"cuda:0\" # use \"mps\" for Mac\ntorch_dtype = torch.bfloat16\nmodel_name = \"parler-tts/parler-tts-mini-v1\"\n\nattn_implementation = \"eager\" # \"sdpa\" or \"flash_attention_2\"\n\nmodel = ParlerTTSForConditionalGeneration.from_pretrained(\n    model_name,\n    attn_implementation=attn_implementation\n).to(torch_device, dtype=torch_dtype)\n```\n\n## Compilation\n\n[Compiling](https://pytorch.org/docs/stable/generated/torch.compile.html) the forward method of Parler can speed up generation time by up to 4.5x.\n\nAs an indication, `mode=default` brings a speed-up of 1.4 times compared to no compilation, while `mode=\"reduce-overhead\"` brings much faster generation, at the cost of a longer compilation time and the need to generate twice to see the benefits of compilation.\n\n```py\nimport torch\nfrom parler_tts import ParlerTTSForConditionalGeneration\nfrom transformers import AutoTokenizer\n\ntorch_device = \"cuda:0\"\ntorch_dtype = torch.bfloat16\nmodel_name = \"parler-tts/parler-tts-mini-v1\"\n\n# need to set padding max length\nmax_length = 50\n\n# load model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_name) \nmodel = ParlerTTSForConditionalGeneration.from_pretrained(\n    model_name,\n    attn_implementation=\"eager\"\n).to(torch_device, dtype=torch_dtype)\n\n# compile the forward pass\ncompile_mode = \"default\" # chose \"reduce-overhead\" for 3 to 4x speed-up\nmodel.generation_config.cache_implementation = \"static\"\nmodel.forward = torch.compile(model.forward, mode=compile_mode)\n\n# warmup\ninputs = tokenizer(\"This is for compilation\", return_tensors=\"pt\", padding=\"max_length\", max_length=max_length).to(torch_device)\n\nmodel_kwargs = {**inputs, \"prompt_input_ids\": inputs.input_ids, \"prompt_attention_mask\": inputs.attention_mask, }\n\nn_steps = 1 if compile_mode == \"default\" else 2\nfor _ in range(n_steps):\n    _ = model.generate(**model_kwargs)\n\n\n# now you can benefit from compilation speed-ups\n...\n\n```\n\n\n## Streaming\n\n### How Does It Work?\n\nParler-TTS is an auto-regressive transformer-based model, meaning generates audio codes (tokens) in a causal fashion.\n\nAt each decoding step, the model generates a new set of audio codes, conditional on the text input and all previous audio codes. From the \nframe rate of the [DAC model](https://huggingface.co/parler-tts/dac_44khZ_8kbps) used to decode the generated codes to audio waveform,  each set of generated audio codes corresponds to 0.011 seconds. This means we require a total of 1720 decoding steps to generate 20 seconds of audio.\n\nRather than waiting for the entire audio sequence to be generated, which would require the full 1720 decoding steps, we can start playing the audio after a specified number of decoding steps have been reached, a techinque known as [*streaming*](https://huggingface.co/docs/transformers/main/en/generation_strategies#streaming). \nFor example, after 86 steps we have the first second of audio ready, and so can play this without waiting for the remaining decoding steps to be complete. As we continue to generate with the Parler-TTS model, we append new chunks of generated audio to our output waveform on-the-fly. After the full 1720 decoding steps, the generated audio is complete, and is composed of 20 chunks of audio, each corresponding to 86 tokens.\nThis method of playing incremental generations reduces the latency of the Parler-TTS model from the total time to generate 1720 tokens, to the time taken to play the first chunk of audio (86 tokens). This can result in significant improvements to perceived latency,  particularly when the chunk size is chosen to be small. In practice, the chunk size should be tuned to your device: using a smaller chunk size will mean that the first chunk is ready faster, but should not be chosen so small that the model generates slower than the time it takes to play the audio.\n\n\n### How Can I Use It?\n\nWe've added [ParlerTTSStreamer](https://github.com/huggingface/parler-tts/blob/main/parler_tts/streamer.py) to the library. Don't hesitate to adapt it to your use-case.\n\nHere's how to create a generator out of the streamer.\n\n```py\nimport torch\nfrom parler_tts import ParlerTTSForConditionalGeneration, ParlerTTSStreamer\nfrom transformers import AutoTokenizer\nfrom threading import Thread\n\ntorch_device = \"cuda:0\" # Use \"mps\" for Mac \ntorch_dtype = torch.bfloat16\nmodel_name = \"parler-tts/parler-tts-mini-v1\"\n\n# need to set padding max length\nmax_length = 50\n\n# load model and tokenizer\ntokenizer = AutoTokenizer.from_pretrained(model_name) \nmodel = ParlerTTSForConditionalGeneration.from_pretrained(\n    model_name,\n).to(torch_device, dtype=torch_dtype)\n\nsampling_rate = model.audio_encoder.config.sampling_rate\nframe_rate = model.audio_encoder.config.frame_rate\n\ndef generate(text, description, play_steps_in_s=0.5):\n  play_steps = int(frame_rate * play_steps_in_s)\n  streamer = ParlerTTSStreamer(model, device=torch_device, play_steps=play_steps)\n  # tokenization\n  inputs = tokenizer(description, return_tensors=\"pt\").to(torch_device)\n  prompt = tokenizer(text, return_tensors=\"pt\").to(torch_device)\n  # create generation kwargs\n  generation_kwargs = dict(\n    input_ids=inputs.input_ids,\n    prompt_input_ids=prompt.input_ids,\n    attention_mask=inputs.attention_mask,\n    prompt_attention_mask=prompt.attention_mask,\n    streamer=streamer,\n    do_sample=True,\n    temperature=1.0,\n    min_new_tokens=10,\n  )\n  # initialize Thread\n  thread = Thread(target=model.generate, kwargs=generation_kwargs)\n  thread.start()\n  # iterate over chunks of audio\n  for new_audio in streamer:\n    if new_audio.shape[0] == 0:\n      break\n    print(f\"Sample of length: {round(new_audio.shape[0] / sampling_rate, 4)} seconds\")\n    yield sampling_rate, new_audio\n\n\n# now you can do\ntext = \"This is a test of the streamer class\"\ndescription = \"Jon's talking really fast.\"\n\nchunk_size_in_s = 0.5\n\nfor (sampling_rate, audio_chunk) in generate(text, description, chunk_size_in_s):\n  # You can do everything that you need with the chunk now\n  # For example: stream it, save it, play it.\n  print(audio_chunk.shape) \n```\n\n## Batch generation\n\nBatching means combining operations for multiple samples to bring the overall time spent generating the samples lower than generating sample per sample.\n\nHere is a quick example of how you can use it:\n\n```py\nfrom parler_tts import ParlerTTSForConditionalGeneration\nfrom transformers import AutoTokenizer, AutoFeatureExtractor, set_seed\nimport scipy\n\n\nrepo_id = \"parler-tts/parler-tts-mini-v1\"\n\nmodel = ParlerTTSForConditionalGeneration.from_pretrained(repo_id).to(\"cuda\")\ntokenizer = AutoTokenizer.from_pretrained(repo_id, padding_side=\"left\")\nfeature_extractor = AutoFeatureExtractor.from_pretrained(repo_id)\n\ninput_text = [\"Hey, how are you doing?\", \"I'm not sure how to feel about it.\"]\ndescription = 2 * [\"A male speaker with a monotone and high-pitched voice is delivering his speech at a really low speed in a confined environment.\"]\n\ninputs = tokenizer(description, return_tensors=\"pt\", padding=True).to(\"cuda\")\nprompt = tokenizer(input_text, return_tensors=\"pt\", padding=True).to(\"cuda\")\n\nset_seed(0)\ngeneration = model.generate(\n    input_ids=inputs.input_ids,\n    attention_mask=inputs.attention_mask,\n    prompt_input_ids=prompt.input_ids,\n    prompt_attention_mask=prompt.attention_mask,\n    do_sample=True,\n    return_dict_in_generate=True,\n)\n\naudio_1 = generation.sequences[0, :generation.audios_length[0]]\naudio_2 = generation.sequences[1, :generation.audios_length[1]]\n\nprint(audio_1.shape, audio_2.shape)\nscipy.io.wavfile.write(\"sample_out.wav\", rate=feature_extractor.sampling_rate, data=audio_1.cpu().numpy().squeeze())\nscipy.io.wavfile.write(\"sample_out_2.wav\", rate=feature_extractor.sampling_rate, data=audio_2.cpu().numpy().squeeze())\n```\n\n## Speaker Consistency\n\nThe checkpoint was trained on 34 speakers. The full list of available speakers includes:\nLaura, Gary, Jon, Lea, Karen, Rick, Brenda, David, Eileen, Jordan, Mike, Yann, Joy, James, Eric, Lauren, Rose, Will, Jason, Aaron, Naomie, Alisa, Patrick, Jerry, Tina, Jenna, Bill, Tom, Carol, Barbara, Rebecca, Anna, Bruce, and Emily.\n\nHowever, the models performed better with certain speakers. Below are the top 20 speakers for each model variant, ranked by their average speaker similarity scores:\n\n### Large Model - Top 20 Speakers\n\n| Speaker | Similarity Score |\n|---------|------------------|\n| Will    | 0.906055         |\n| Eric    | 0.887598         |\n| Laura   | 0.877930         |\n| Alisa   | 0.877393         |\n| Patrick | 0.873682         |\n| Rose    | 0.873047         |\n| Jerry   | 0.871582         |\n| Jordan  | 0.870703         |\n| Lauren  | 0.867432         |\n| Jenna   | 0.866455         |\n| Karen   | 0.866309         |\n| Rick    | 0.863135         |\n| Bill    | 0.862207         |\n| James   | 0.856934         |\n| Yann    | 0.856787         |\n| Emily   | 0.856543         |\n| Anna    | 0.848877         |\n| Jon     | 0.848828         |\n| Brenda  | 0.848291         |\n| Barbara | 0.847998         |\n\n### Mini Model - Top 20 Speakers\n\n| Speaker | Similarity Score |\n|---------|------------------|\n| Jon     | 0.908301         |\n| Lea     | 0.904785         |\n| Gary    | 0.903516         |\n| Jenna   | 0.901807         |\n| Mike    | 0.885742         |\n| Laura   | 0.882666         |\n| Lauren  | 0.878320         |\n| Eileen  | 0.875635         |\n| Alisa   | 0.874219         |\n| Karen   | 0.872363         |\n| Barbara | 0.871509         |\n| Carol   | 0.863623         |\n| Emily   | 0.854932         |\n| Rose    | 0.852246         |\n| Will    | 0.851074         |\n| Patrick | 0.850977         |\n| Eric    | 0.845459         |\n| Rick    | 0.845020         |\n| Anna    | 0.844922         |\n| Tina    | 0.839160         |\n\nThe numbers represent the average speaker similarity between a random snippet of the person speaking and a randomly Parler-generated snippet. Higher scores indicate better model performance in maintaining voice consistency.\n\nThese scores are derived from [dataset for Mini](https://huggingface.co/datasets/ylacombe/parler-tts-mini-v1_speaker_similarity) and [dataset for Large](https://huggingface.co/datasets/ylacombe/parler-large-v1-og_speaker_similarity)."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0927734375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [2024] [The HuggingFace Inc. team]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.126953125,
          "content": "check_dirs := .\n\nquality:\n\tblack --check $(check_dirs)\n\truff $(check_dirs)\n\nstyle:\n\tblack $(check_dirs)\n\truff $(check_dirs) --fix\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4189453125,
          "content": "# Parler-TTS\n\nParler-TTS is a lightweight text-to-speech (TTS) model that can generate high-quality, natural sounding speech in the style of a given speaker (gender, pitch, speaking style, etc). It is a reproduction of work from the paper [Natural language guidance of high-fidelity text-to-speech with synthetic annotations](https://www.text-description-to-speech.com) by Dan Lyth and Simon King, from Stability AI and Edinburgh University respectively.\n\nContrarily to other TTS models, Parler-TTS is a **fully open-source** release. All of the datasets, pre-processing, training code and weights are released publicly under permissive license, enabling the community to build on our work and develop their own powerful TTS models.\n\nThis repository contains the inference and training code for Parler-TTS. It is designed to accompany the [Data-Speech](https://github.com/huggingface/dataspeech) repository for dataset annotation.\n\n> [!IMPORTANT]\n> **08/08/2024:** We are proud to release two new Parler-TTS checkpoints:\n> 1. [Parler-TTS Mini](https://huggingface.co/parler-tts/parler-tts-mini-v1), an 880M parameter model.\n> 2. [Parler-TTS Large](https://huggingface.co/parler-tts/parler-tts-large-v1), a 2.3B parameter model.\n>\n> These checkpoints have been trained on 45k hours of audiobook data.\n>\n> In addition, the code is optimized for much faster generation: we've added SDPA and Flash Attention 2 compatibility, as well as the ability to compile the model.\n\n## ðŸ“– Quick Index\n* [Installation](#installation)\n* [Usage](#usage)\n  - [ðŸŽ² Using a random voice](#-random-voice)\n  - [ðŸŽ¯ Using a specific speaker](#-using-a-specific-speaker)\n* [Training](#training)\n* [Demo](https://huggingface.co/spaces/parler-tts/parler_tts)\n* [Model weights and datasets](https://huggingface.co/parler-tts)\n* [Optimizing inference](#-optimizing-inference-speed)\n\n## Installation\n\nParler-TTS has light-weight dependencies and can be installed in one line:\n\n```sh\npip install git+https://github.com/huggingface/parler-tts.git\n```\n\nApple Silicon users will need to run a follow-up command to make use the nightly PyTorch (2.4) build for bfloat16 support:\n\n```sh\npip3 install --pre torch torchaudio --index-url https://download.pytorch.org/whl/nightly/cpu\n```\n\n## Usage\n\n> [!TIP]\n> You can directly try it out in an interactive demo [here](https://huggingface.co/spaces/parler-tts/parler_tts)!\n\nUsing Parler-TTS is as simple as \"bonjour\". Simply install the library once:\n\n```sh\npip install git+https://github.com/huggingface/parler-tts.git\n```\n\n### ðŸŽ² Random voice\n\n\n**Parler-TTS** has been trained to generate speech with features that can be controlled with a simple text prompt, for example:\n\n```py\nimport torch\nfrom parler_tts import ParlerTTSForConditionalGeneration\nfrom transformers import AutoTokenizer\nimport soundfile as sf\n\ndevice = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\n\nmodel = ParlerTTSForConditionalGeneration.from_pretrained(\"parler-tts/parler-tts-mini-v1\").to(device)\ntokenizer = AutoTokenizer.from_pretrained(\"parler-tts/parler-tts-mini-v1\")\n\nprompt = \"Hey, how are you doing today?\"\ndescription = \"A female speaker delivers a slightly expressive and animated speech with a moderate speed and pitch. The recording is of very high quality, with the speaker's voice sounding clear and very close up.\"\n\ninput_ids = tokenizer(description, return_tensors=\"pt\").input_ids.to(device)\nprompt_input_ids = tokenizer(prompt, return_tensors=\"pt\").input_ids.to(device)\n\ngeneration = model.generate(input_ids=input_ids, prompt_input_ids=prompt_input_ids)\naudio_arr = generation.cpu().numpy().squeeze()\nsf.write(\"parler_tts_out.wav\", audio_arr, model.config.sampling_rate)\n```\n\n### ðŸŽ¯ Using a specific speaker\n\nTo ensure speaker consistency across generations, this checkpoint was also trained on 34 speakers, characterized by name. The full list of available speakers includes:\nLaura, Gary, Jon, Lea, Karen, Rick, Brenda, David, Eileen, Jordan, Mike, Yann, Joy, James, Eric, Lauren, Rose, Will, Jason, Aaron, Naomie, Alisa, Patrick, Jerry, Tina, Jenna, Bill, Tom, Carol, Barbara, Rebecca, Anna, Bruce, Emily.\n\nTo take advantage of this, simply adapt your text description to specify which speaker to use: `Jon's voice is monotone yet slightly fast in delivery, with a very close recording that almost has no background noise.`\n\nYou can replace \"Jon\" with any of the names from the list above to utilize different speaker characteristics. Each speaker has unique vocal qualities that can be leveraged to suit your specific needs. For more detailed information on speaker performance with voice consistency, please refer [inference guide](INFERENCE.md#speaker-consistency).\n\n```py\nimport torch\nfrom parler_tts import ParlerTTSForConditionalGeneration\nfrom transformers import AutoTokenizer\nimport soundfile as sf\n\ndevice = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\n\nmodel = ParlerTTSForConditionalGeneration.from_pretrained(\"parler-tts/parler-tts-mini-v1\").to(device)\ntokenizer = AutoTokenizer.from_pretrained(\"parler-tts/parler-tts-mini-v1\")\n\nprompt = \"Hey, how are you doing today?\"\ndescription = \"Jon's voice is monotone yet slightly fast in delivery, with a very close recording that almost has no background noise.\"\n\ninput_ids = tokenizer(description, return_tensors=\"pt\").input_ids.to(device)\nprompt_input_ids = tokenizer(prompt, return_tensors=\"pt\").input_ids.to(device)\n\ngeneration = model.generate(input_ids=input_ids, prompt_input_ids=prompt_input_ids)\naudio_arr = generation.cpu().numpy().squeeze()\nsf.write(\"parler_tts_out.wav\", audio_arr, model.config.sampling_rate)\n```\n\n**Tips**:\n* Include the term \"very clear audio\" to generate the highest quality audio, and \"very noisy audio\" for high levels of background noise\n* Punctuation can be used to control the prosody of the generations, e.g. use commas to add small breaks in speech\n* The remaining speech features (gender, speaking rate, pitch and reverberation) can be controlled directly through the prompt\n\n### âœ¨ Optimizing Inference Speed\n\nWe've set up an [inference guide](INFERENCE.md) to make generation faster. Think SDPA, torch.compile and streaming!\n\n\nhttps://github.com/huggingface/parler-tts/assets/52246514/251e2488-fe6e-42c1-81cd-814c5b7795b0\n\n## Training\n\n<a target=\"_blank\" href=\"https://github.com/ylacombe/scripts_and_notebooks/blob/main/Finetuning_Parler_TTS_v1_on_a_single_speaker_dataset.ipynb\"> \n  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/> \n</a>\n\nThe [training folder](/training/) contains all the information to train or fine-tune your own Parler-TTS model. It consists of:\n- [1. An introduction to the Parler-TTS architecture](/training/README.md#1-architecture)\n- [2. The first steps to get started](/training/README.md#2-getting-started)\n- [3. A training guide](/training/README.md#3-training)\n\n> [!IMPORTANT]\n> **TL;DR:** After having followed the [installation steps](/training/README.md#requirements), you can reproduce the Parler-TTS Mini v1 training recipe with the following command line:\n\n```sh\naccelerate launch ./training/run_parler_tts_training.py ./helpers/training_configs/starting_point_v1.json\n```\n\n> [!IMPORTANT]\n> You can also follow [this fine-tuning guide](https://github.com/ylacombe/scripts_and_notebooks/blob/main/Finetuning_Parler_TTS_v1_on_a_single_speaker_dataset.ipynb) on a mono-speaker dataset example.\n\n## Acknowledgements\n\nThis library builds on top of a number of open-source giants, to whom we'd like to extend our warmest thanks for providing these tools!\n\nSpecial thanks to:\n- Dan Lyth and Simon King, from Stability AI and Edinburgh University respectively, for publishing such a promising and clear research paper: [Natural language guidance of high-fidelity text-to-speech with synthetic annotations](https://arxiv.org/abs/2402.01912).\n- the many libraries used, namely [ðŸ¤— datasets](https://huggingface.co/docs/datasets/v2.17.0/en/index), [ðŸ¤— accelerate](https://huggingface.co/docs/accelerate/en/index), [jiwer](https://github.com/jitsi/jiwer), [wandb](https://wandb.ai/), and [ðŸ¤— transformers](https://huggingface.co/docs/transformers/index).\n- Descript for the [DAC codec model](https://github.com/descriptinc/descript-audio-codec)\n- Hugging Face ðŸ¤— for providing compute resources and time to explore!\n\n\n## Citation\n\nIf you found this repository useful, please consider citing this work and also the original Stability AI paper:\n\n```\n@misc{lacombe-etal-2024-parler-tts,\n  author = {Yoach Lacombe and Vaibhav Srivastav and Sanchit Gandhi},\n  title = {Parler-TTS},\n  year = {2024},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  howpublished = {\\url{https://github.com/huggingface/parler-tts}}\n}\n```\n\n```\n@misc{lyth2024natural,\n      title={Natural language guidance of high-fidelity text-to-speech with synthetic annotations},\n      author={Dan Lyth and Simon King},\n      year={2024},\n      eprint={2402.01912},\n      archivePrefix={arXiv},\n      primaryClass={cs.SD}\n}\n```\n\n## Contribution\n\nContributions are welcome, as the project offers many possibilities for improvement and exploration.\n\nNamely, we're looking at ways to improve both quality and speed:\n- Datasets:\n    - Train on more data\n    - Add more features such as accents\n- Training:\n    - Add PEFT compatibility to do Lora fine-tuning.\n    - Add possibility to train without description column.\n    - Add notebook training.\n    - Explore multilingual training.\n    - Explore mono-speaker finetuning.\n    - Explore more architectures.\n- Optimization:\n    - Compilation and static cache\n    - Support to FA2 and SDPA\n- Evaluation:\n    - Add more evaluation metrics\n\n"
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "parler_tts",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.4189453125,
          "content": "[tool.black]\nline-length = 119\ntarget-version = ['py37']\n\n[tool.ruff]\n# Never enforce `E501` (line length violations).\nignore = [\"C901\", \"E501\", \"E741\", \"W605\"]\nselect = [\"C\", \"E\", \"F\", \"I\", \"W\"]\nline-length = 119\n\n# Ignore import violations in all `__init__.py` files.\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"E402\", \"F401\", \"F403\", \"F811\"]\n\n[tool.ruff.isort]\nlines-after-imports = 2\nknown-first-party = [\"distil_whisper\"]"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.9482421875,
          "content": "# Copyright 2024 The HuggingFace Team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\n\nimport setuptools\n\n\n_deps = [\n    \"transformers>=4.46.1,<=4.46.1\",\n    \"torch\",\n    \"sentencepiece\",\n    \"descript-audio-codec\",\n    \"descript-audiotools @ git+https://github.com/descriptinc/audiotools\", # temporary fix as long as 0.7.4 is not published\n    \"protobuf>=4.0.0\"\n]\n\n_extras_dev_deps = [\n    \"black~=23.1\",\n    \"isort>=5.5.4\",\n    \"ruff>=0.0.241,<=0.0.259\",\n]\n\n_extras_training_deps = [\n    \"jiwer\",\n    \"wandb\",\n    \"accelerate\",\n    \"evaluate\",\n    \"datasets[audio]>=2.14.5\",\n]\n\nhere = os.path.abspath(os.path.dirname(__file__))\n\nwith open(os.path.join(here, \"README.md\"), encoding=\"utf-8\") as f:\n    long_description = f.read()\n\n# read version\nwith open(os.path.join(here, \"parler_tts\", \"__init__.py\"), encoding=\"utf-8\") as f:\n    for line in f:\n        if line.startswith(\"__version__\"):\n            version = line.split(\"=\")[1].strip().strip('\"')\n            break\n    else:\n        raise RuntimeError(\"Unable to find version string.\")\n\nsetuptools.setup(\n    name=\"parler_tts\",\n    version=version,\n    description=\"Toolkit for using and training Parler-TTS, a high-quality text-to-speech model.\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    packages=setuptools.find_packages(),\n    install_requires=_deps,\n    extras_require={\n        \"dev\": _extras_dev_deps,\n        \"train\": _extras_training_deps,\n    },\n)\n"
        },
        {
          "name": "training",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}