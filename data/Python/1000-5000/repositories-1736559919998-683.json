{
  "metadata": {
    "timestamp": 1736559919998,
    "page": 683,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NVIDIA/garak",
      "stars": 3574,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.0859375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n\n\ngarak.*.jsonl\ngarak.log\nhitlog.*.jsonl\n.vscode\n.history/\ngarak_runs/\nruns/\nlogs/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.0888671875,
          "content": "repos:\n  - repo: https://github.com/psf/black\n    rev: 23.7.0\n    hooks:\n      - id: black\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.052734375,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/source/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#    - pdf\n#    - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n   install:\n   - requirements: docs/requirements-docs.txt\n   - requirements: requirements.txt\n"
        },
        {
          "name": "CA_DCO.md",
          "type": "blob",
          "size": 5.8759765625,
          "content": "# Contributor Agreement \n\n`garak` -- 11 October 2023\n\nThis agreement consists of two parts - a code of conduct and a developer's certificate of origin. Agreeing to the contributor agreement requires agreeing to both these parts, which constitute the entire contributor agreement.\n\n## Contributor Covenant Code of Conduct\n\n### Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n### Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n### Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n### Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n### Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at akshay.iyyadurai.balasundaram@sap.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n### Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n\n# Licensing & DCO\n\nWe require that all contributors sign this CLA and the following Developer Certificate of Origin (DCO) before contributing code. The signing process is managed by github action and authenticated by you when you try to commit code. This certifies that the contribution is your original work, or you have rights to submit it under the same license, or a compatible license.\n\n## Signing\n\nWe also require that all contributors \"sign-off\" on their commits.  Any contribution which contains commits that are not signed-off will not be accepted. To sign off on a commit you simply use the `--signoff` (or `-s`) option when committing your changes:\n\n  ```bash\n  $ git commit -s -m \"Add cool feature.\"\n  ```\n  This will append the following to your commit message:\n  ```\n  Signed-off-by: Your Name <your@email.com>\n  ```\n\n## Developer Certificate of Origin\n\nFull text of the DCO:\n\n  ```\n    Developer Certificate of Origin\n    Version 1.1\n    \n    Copyright (C) 2004, 2006 The Linux Foundation and its contributors.\n    1 Letterman Drive\n    Suite D4700\n    San Francisco, CA, 94129\n    \n    Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.\n  ```\n\n  ```\n    Developer's Certificate of Origin 1.1\n    \n    By making a contribution to this project, I certify that:\n    \n    (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or\n    \n    (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or\n    \n    (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it.\n    \n    (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.\n  ```"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.27734375,
          "content": "<!-- omit in toc -->\n# Contributing to garak\n\nFirst off, thanks for taking the time to contribute! ❤️\n\nAll types of contributions are encouraged and valued. See the [Table of Contents](#table-of-contents) for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. 🎉\n\nAnd if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:\n- Star the project\n- Post about it on LinkedIn\n- Tweet about it\n- Refer this project in your project's readme\n- Mention the project at local meetups and tell your friends/colleagues\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [I Have a Question](#i-have-a-question)\n- [I Want To Contribute](#i-want-to-contribute)\n- [Reporting Bugs](#reporting-bugs)\n- [Suggesting Enhancements](#suggesting-enhancements)\n- [Your First Code Contribution](#your-first-code-contribution)\n- [Improving The Documentation](#improving-the-documentation)\n- [Styleguides](#styleguides)\n- [Commit Messages](#commit-messages)\n- [Join The Project Team](#join-the-project-team)\n\n\n\n## I Have a Question\n\nIf you want to ask a question, good places to check first are the [garak quick start docs](https://docs.garak.ai) and, if its a coding question, the [garak reference](https://reference.garak.ai/).\n\nBefore you ask a question, it is best to search for existing [Issues](https://github.com/NVIDIA/garak/issues) that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first. You can also often find helpful people on the garak [Discord](https://discord.gg/uVch4puUCs).\n\n\nIf you then still feel the need to ask a question and need clarification, we recommend the following:\n\n- Open an [Issue](https://github.com/NVIDIA/garak/issues/new).\n- Provide as much context as you can about what you're running into.\n- Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.\n\nWe will then take care of the issue as soon as possible.\n\n## I Want To Contribute\n\nCheck out our [guide to contributing garak code](https://reference.garak.ai/en/latest/contributing.html). It's also important to make sure that your contribution is within scope of the project - it's so sad to not merge good code which does things outside of where `garak` is going. Check the [FAQ](FAQ.md) for info on what `garak` is and isn't. If you have any doubt, get in touch!\n\n### Legal Notice <!-- omit in toc -->\nWhen contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license. All contributors are asked to sign the garak CA/DCO (contributor agreement/developer certificate of origin) when sending their first pull request. The process is automated by a bot that will comment on the pull request. We use the same DCO as the Linux Foundation requires its contributors to sign.\n\n### Reporting Bugs\n\n<!-- omit in toc -->\n#### Before Submitting a Bug Report\n\nA good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.\n\n- Make sure that you are using the latest version.\n- Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the [documentation](https://reference.garak.ai/). If you are looking for support, you might want to check [this section](#i-have-a-question)).\n- To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the [bug tracker](https://github.com/NVIDIA/garak/issues?q=label%3Abug).\n- Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.\n- Collect information about the bug:\n  - Stack trace (Traceback)\n  - OS, Platform and Version (Windows, Linux, macOS, x86, ARM)\n  - Version of the runtime environment, modules, depending on what seems relevant.\n  - Possibly your input and the output\n  - Can you reliably reproduce the issue? And can you also reproduce it with older versions?\n\n<!-- omit in toc -->\n#### How Do I Submit a Good Bug Report?\n\nYou should never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to security@garak.ai.\n<!-- You may add a PGP key to allow the messages to be sent encrypted as well. -->\n\nWe use GitHub issues to track bugs and errors. If you run into an issue with the project:\n\n- Open an [Issue](https://github.com/NVIDIA/garak/issues/new). (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)\n- Explain the behavior you would expect and the actual behavior.\n- Please provide as much context as possible and describe the *reproduction steps* that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.\n- Provide the information you collected in the previous section.\n\nOnce it's filed:\n\n- The project team will label the issue accordingly.\n- A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as `needs-repro`. Bugs with the `needs-repro` tag will not be addressed until they are reproduced.\n- If the team is able to reproduce the issue, it will be marked `needs-fix`, as well as possibly other tags (such as `critical`), and the issue will be left to be [implemented by someone](#your-first-code-contribution).\n\n<!-- You might want to create an issue template for bugs and errors that can be used as a guide and that defines the structure of the information to be included. If you do so, reference it here in the description. -->\n\n\n### Suggesting Enhancements\n\nThis section guides you through submitting an enhancement suggestion for garak, **including completely new features and minor improvements to existing functionality**. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.\n\n<!-- omit in toc -->\n#### Before Submitting an Enhancement\n\n- Make sure that you are using the latest version.\n- Read the [documentation](https://reference.garak.ai/) carefully and find out if the functionality is already covered, maybe by an individual configuration.\n- Perform a [search](https://github.com/NVIDIA/garak/issues) to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.\n- Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.\n- Check out our [guide for contributors](https://reference.garak.ai/en/latest/contributing.html), which includes our coding workflow and a [guide to constructing a plugin](https://reference.garak.ai/en/latest/contributing.generator.html).\n\n<!-- omit in toc -->\n#### How Do I Submit a Good Enhancement Suggestion?\n\nEnhancement suggestions are tracked as [GitHub issues](https://github.com/NVIDIA/garak/issues).\n\n- Use a **clear and descriptive title** for the issue to identify the suggestion.\n- Provide a **step-by-step description of the suggested enhancement** in as many details as possible.\n- **Describe the current behavior** and **explain which behavior you expected to see instead** and why. At this point you can also tell which alternatives do not work for you.\n- You may want to **include screenshots and animated GIFs** which help you demonstrate the steps or point out the part which the suggestion is related to. You can use [this tool](https://www.cockos.com/licecap/) to record GIFs on macOS and Windows, and [this tool](https://github.com/colinkeenan/silentcast) or [this tool](https://github.com/GNOME/byzanz) on Linux. <!-- this should only be included if the project has a GUI -->\n- **Explain why this enhancement would be useful** to most garak users. You may also want to point out the other projects that solved it better and which could serve as inspiration.\n- Use appropriate issue labels to categorise your suggestion.\n\n<!-- You might want to create an issue template for enhancement suggestions that can be used as a guide and that defines the structure of the information to be included. If you do so, reference it here in the description. -->\n\n### Your First Code Contribution\n\nSo you'd like to send us some code? Wonderful! Check out our [guide to contributing garak code](https://reference.garak.ai/en/latest/contributing.html).\n\nPlease be mindful of the risk of harm involved in publishing exploits. Only responsibly disclosed vulnerabilities are welcome in garak. OWASP maintain a great guide to [vulnerability disclosure](https://cheatsheetseries.owasp.org/cheatsheets/Vulnerability_Disclosure_Cheat_Sheet.html), which you should check out when contributing probes or data.\n<!-- TODO\ninclude Setup of env, IDE and typical getting started instructions?\n\n-->\n\n<!-- ### Improving The Documentation -->\n<!-- TODO\nUpdating, improving and correcting the documentation\n\n-->\n\n<!-- ## Styleguides -->\n<!-- ### Commit Messages -->\n<!-- TODO\n\n-->\n\n<!-- ## Join The Project Team -->\n<!-- TODO -->\n\n<!-- omit in toc -->\n## Attribution\nThis guide is based on the **contributing-gen**. [Make your own](https://github.com/bttger/contributing-gen)!\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 11.7177734375,
          "content": "# garak LLM probe: Frequently Asked Questions\n\n\n## How do I pronounce garak?\n\nGood question! Emphasis on the first bit, GA-rak. \n\nBoth 'a's like a in English \"hat\", or à in French, or /æ/ in IPA.\n\n## What's this tool for?\n\n`garak` is designed to help discover situations where a language model generates outputs that one might not want it to. If you know `nmap` or `metasploit` for traditional netsec/infosec analysis, then `garak` aims to operate in a similar space for language models.\n\nIt's not a tool for assessing social biases in language models, or propensity of a system to produce toxic content. The focus isn't safety, it's security. `garak` might try to exploit a weakness and demonstrate that weakness by making a model generate unsafe content, but we're focused on the weakness over the content.\n\n## How does garak work?\n\n`garak` has probes that try to look for different \"vulnerabilities\". Each probs sends specific prompts to models, and gets multiple generations for each prompt. LLM output is often stochastic, so a single test isn't very informative. These generations are then processed by \"detectors\", which will look for \"hits\". If a detector registers a hit, that attempt is registered as failing. Finally, a report is output with the success/failure rate for each probe and detector.\n\n## Do these results have scientific validity?\n\nNo. The scores from any probe don't operate on any kind of normalised scale. Higher passing percentage is better, but that's it. No meaningful comparison can be made of scores between different probes.\n\n## How does it determine a pass/fail score for replies?\n\nEach detector is different. Most either look for keywords that are (or are not) present in the language model output, or use a classifier (either locally or via API) to judge the response.\n\n## Does garak allow for additional prompts ?\n\nAdditional prompts can be probed by creating a new plugin -- this isn't as tough as it sounds; take a look at the modules in the `garak/probes/` directory for inspiration.\n\n## How will a auditor know what was used in testing?\n\nThe JSONL report created for each run includes language model parameters, all the prompts sent to the mode, all the model responses, and also the mapping between these and evaluation scores. There's a JSONL report analysis script in `analyse/analyse_log.py`.\n\n## Do you have plans to setup an environment for running these tests on HuggingFace?\n\nNot immediately, but if you have the Gradio skills, get in touch!\n\n## Can you add support for vulnerability X?\n\nPerhaps - please [open an issue](https://github.com/NVIDIA/garak/issues/new), including a description of the vulnerability, example prompts, and tag it \"new plugin\" and \"probes\".\n\n## Can you add support for model X?\n\nWould love to! Please [open an issue](https://github.com/NVIDIA/garak/issues/new), tagging it \"new plugin\" and \"generators\".\n\n## How much disk space do I need to run garak?\n\nOn an average plain OS install, garak might pull in 9GB of dependencies (ML libraries are heavy). If you're running a model locally, enough space will be required for that model plus its dependencies, too - check out the model's files for an estimate.  Hugging Face gpt2 is about 5GB (https://huggingface.co/google/gemma-2-2b-it/tree/main), whereas Hugging Face Llama-3.1-405B is around half a terabyte (https://huggingface.co/meta-llama/Meta-Llama-3.1-405B/tree/main). Garak sometimes uses machine learning-based detectors, but we go for smaller variants, so I'd guess/hope under 2GB. Finally, logs generated while running can be up to 60MB per standard run - ymmv!\n\nRunning remotely-hosted models tends to be easier, if that's ever an option, and often obviates most of the local space requirement - model files are usually the heaviest bit.\n\n## Are there instructions for Hugging Face gated models?\n\nGated models simply require login and in some case acceptance of model provider license terms. [Here](https://huggingface.co/docs/huggingface_hub/en/guides/cli) are details of huggingface-cli login process.\n\n## Is it safe to build garak into toolchains? Who's supporting this?\n\nNVIDIA Corporation officially contributes to the garak open-source project and will continue to do so in the long term. Garak will continue to be licensed with Apache 2.0. Get in touch if you'd like to talk more about this.\n\n## Can an LLM have vulnerabilities?\n\nThe things garak probes for are generally not like traditional cybersec vulnerabilities. LLM model parameters don't and can't have vulnerabilities themselves; it's just data. What most of the probes in garak check for are whether or not a model can be made to behave unexpectedly at inference time, by breaking its alignment or output policy, using exploits. The DHS calls some of these behaviours \"weaknesses\"; see e.g. [CWE-1426](https://cwe.mitre.org/data/definitions/1426.html) for prompt injection. \n\nSome garak probes still check for traditional cybersecurity vulnerabilities within the scope of what can be extracted from APIs also used for inference.\n\n## I tried to scan a model from HuggingFace, but for some reason, the process got killed when loading checkpoint shards. I ran the scan in my Jupyter notebook locally, the model had already been downloaded during a previous run. I couldn't get past 75% without the process being killed. \n\nThis sounds like hitting a resource limit - something external to garak, e.g. the kernel, has taken action. Does your process have access to the required system RAM and GPU memory\n\n## How can I use garak to scan a NIM of an LLM?  What should the \"model_type\" be? And how do we pass the NIM endpoint url to garak?\n\n`model_type` should be \"nim\" for chat-type models (which is most of them - this selects the right class automatically. Then, set model_name to [organisation]/[model name] from [build.nvidia.com](https://build.nvidia.com) (the JSON example is authoritative). For example, `--model_type nim --model_name meta/llama-3.1-8b-instruct`. You will need to put the API key in the `NIM_API_KEY` environment variable, or in the config.\n\n## If I have already scanned a model on HuggingFace, and I use the same model somewhere else, say in a container, is it necessary for me to scan the container with garak as well?\n\nNo, if the model is the same, you should get the same results - though there are some probes that scan the model files themself, which work on Hugging Face but not via a container.\n\n## How can I scan a RAG pipeline with garak?\n\nCurrently the major attack we hear about in RAG systems is indirect prompt injection, and garak already scans for a few of those.\n\n## There are so many probes in garak, I was trying to scan a model for all probes, but it took hours and I eventually had to kill that scan. What is the recommended practice on scanning a model? Which typical probes are recommended?\n\nRecommended practice: it's really context dependent. The builtin \"fast\" config works pretty well (`--config fast`). It's also useful to run with `--parallel_attempts` (using a value of e.g. 20 or 40) if the model isn't local.\n\n## Once a model is scanned, there is really no need to scan it again for the same probe(s) unless the model has been customized/finetuned?\n\nWe update garak by improving existing probes or adding new ones quite frequently, and so scores will go down over time - garak isn't a benchmark, and the more we learn about failures in LLMs, the harder garak gets. But if you're looking at a short period of just a month or two, then the scores will probably stay pretty much the same. We do not recommend relying on scores over six months old.\n\n## How can I create my own generator?\n\nAdding a custom generator is fairly straight forward. One can either add a new class in the existing module, or a new module in the `generators/` directory with a class that extends garak.generators.base.Generator that will be loaded at runtime. The reference documentation has a [full guide to creating garak generators](https://reference.garak.ai/en/latest/contributing.generator.html).\n\n## How can I redirect `garak_runs/` and `garak.log` to another place instead of `~/.local/share/garak/`?\n\n* `garak_runs` is configured via top-level config param `reporting.report_dir` and also CLI argument `--report_prefix` (which currently can include directory separator characters, so an absolute path can be given)\n* An example of the location of the config param can be seen in https://github.com/NVIDIA/garak/blob/main/garak/resources/garak.core.yaml\n* If `reporting.report_dir` is set to an absolute path, you can move it anywhere\n* If it's a relative path, it will be within the garak directory under the \"data\" directory following the cross-platform [XDG base directory specification](https://specifications.freedesktop.org/basedir-spec/latest/) for local storage\n* There's no CLI or config option for moving `garak.log`, which is also stored in the XDG data directory\n* We would welcome a PR implementing configurability of logfile path\n* The Python implementation of XDG that garak uses allows overriding the data directory using the `XDG_DATA_HOME` environment variable\n* An alternative is to symlink the paths to where you want them to be\n\n## How do I configure my run in more detail?\n\nThere is a lot you can do here. In order of increasing complexity:\n\n1. Be specific about the list of probes you request, using the `-p` command line option\n1. Have a look at `garak`'s config options: run `garak --help` to see what there is\n1. Garak offers rich and detailed configuration for runs and its plugins, via YAML. You can find an intro guide here, [Configuring garak](https://reference.garak.ai/en/latest/configurable.html).\n\n## There are many static prompts in garak. How can I make these more dynamic?\n\nThis is exactly what [`buffs`](https://reference.garak.ai/en/latest/buffs.html) are for - buffs automatically\nmodify prompts in flight before they're sent to the generator/LLM. For example, `garak.buffs.paraphrase`\ndynamically converts each query prompt into a set of alternative phrasings - given a fixed inference budget, it's often great alternative to increasing generations (docs [here](https://reference.garak.ai/en/latest/garak.buffs.paraphrase.html)).\n\n## Is garak just static probes?\n\nNo, very much not. Garak has:\n\n* static probes, which are a set of fixed prompts; this can be from e.g. scientific papers that specify a fixed set of prompts, so that we get replicability\n* assembled probes, where prompts are assembled from a configurable set of pieces\n* dynamic probes, which look different each run; an example is `latentinjection.LatentWhoisSnippet`, where the list of snippet permutations is so large that it's best to shuffe and sample\n* reactive probes, that respond to LLM behavior and adapt as we go along; examples include `atkgen`, `topic`, as well as the compute-intense `tap` and `suffix` modules (excluding their cached versions)\n\n## How do I get a report according to OWASP LLM Top 10 categories?\n\nYou can invoke report analysis directly on the report.jsonl file in question,\nand give a taxonomy as a second parameter. For example:\n\n```\npython -m garak.analyze.report_digest garak.1234.report.jsonl owasp > report.html\n```\n\nThis groups the top-leve figures and findings according to the OWASP Top 10 for LLM v1.\n\n\n## How do I interpret my scores?\n\nIt's difficult to know if a 0.55 pass rate is good or terrible. That's why we calibrate\ngarak scores against a bag of state-of-the-art models regularly, and report how well the\ntarget model is performing relative to that. It's included in the HTML report as a Z-score,\nand can be given on the CLI by setting `system.show_z=True` in the config.\n\nFor more details on exactly how we do this calibration, see [data/calibration/bag.md].\n\n\n\n<!-- ## Why the name?\n\nCongrats, if you're reading this, you found a flag!\n\nIt's also a smooth-talking, manipulative, persuasive, well-written character from a nineties TV series. Because we need tools like that in order to dissect LLM behavior. -->\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1357421875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (c) 2023 Leon Derczynski\n   Copyright (c) 2023 NVIDIA CORPORATION & AFFILIATES\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.3447265625,
          "content": "garak/analyze\ngarak/buffs\ngarak/configs\ngarak/detectors\ngarak/evaluators\ngarak/generators\ngarak/harnesses\ngarak/probes\ngarak/resources\ngarak/data\n\ninclude *.md\ninclude *.txt\nrecursive-include garak *.py\nrecursive-include garak/analyze *.py *.jinja\nrecursive-include garak/configs *.yaml\nrecursive-include garak/resources *\nrecursive-include garak/data *"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.568359375,
          "content": "# garak, LLM vulnerability scanner\n\n*Generative AI Red-teaming & Assessment Kit*\n\n`garak` checks if an LLM can be made to fail in a way we don't want. `garak` probes for hallucination, data leakage, prompt injection, misinformation, toxicity generation, jailbreaks, and many other weaknesses. If you know `nmap` or `msf` / Metasploit Framework, garak does somewhat similar things to them, but for LLMs. \n\n`garak` focuses on ways of making an LLM or dialog system fail. It combines static, dynamic, and adaptive probes to explore this.\n\n`garak`'s a free tool. We love developing it and are always interested in adding functionality to support applications. \n\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Tests/Linux](https://github.com/NVIDIA/garak/actions/workflows/test_linux.yml/badge.svg)](https://github.com/NVIDIA/garak/actions/workflows/test_linux.yml)\n[![Tests/Windows](https://github.com/NVIDIA/garak/actions/workflows/test_windows.yml/badge.svg)](https://github.com/NVIDIA/garak/actions/workflows/test_windows.yml)\n[![Tests/OSX](https://github.com/NVIDIA/garak/actions/workflows/test_macos.yml/badge.svg)](https://github.com/NVIDIA/garak/actions/workflows/test_macos.yml)\n[![Documentation Status](https://readthedocs.org/projects/garak/badge/?version=latest)](http://garak.readthedocs.io/en/latest/?badge=latest)\n[![arXiv](https://img.shields.io/badge/cs.CL-arXiv%3A2406.11036-b31b1b.svg)](https://arxiv.org/abs/2406.11036)\n[![discord-img](https://img.shields.io/badge/chat-on%20discord-yellow.svg)](https://discord.gg/uVch4puUCs)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/garak)](https://pypi.org/project/garak)\n[![PyPI](https://badge.fury.io/py/garak.svg)](https://badge.fury.io/py/garak)\n[![Downloads](https://static.pepy.tech/badge/garak)](https://pepy.tech/project/garak)\n[![Downloads](https://static.pepy.tech/badge/garak/month)](https://pepy.tech/project/garak)\n\n\n## Get started\n### > See our user guide! [docs.garak.ai](https://docs.garak.ai/)\n### > Join our [Discord](https://discord.gg/uVch4puUCs)!\n### > Project links & home: [garak.ai](https://garak.ai/)\n### > Twitter: [@garak_llm](https://twitter.com/garak_llm)\n### > DEF CON [slides](https://garak.ai/garak_aiv_slides.pdf)!\n\n<hr>\n\n## LLM support\n\ncurrently supports:\n* [hugging face hub](https://huggingface.co/models) generative models\n* [replicate](https://replicate.com/) text models\n* [openai api](https://platform.openai.com/docs/introduction) chat & continuation models\n* [litellm](https://www.litellm.ai/)\n* pretty much anything accessible via REST\n* gguf models like [llama.cpp](https://github.com/ggerganov/llama.cpp) version >= 1046\n* .. and many more LLMs!\n\n## Install:\n\n`garak` is a command-line tool. It's developed in Linux and OSX.\n\n### Standard install with `pip`\n\nJust grab it from PyPI and you should be good to go:\n\n```\npython -m pip install -U garak\n```\n\n### Install development version with `pip`\n\nThe standard pip version of `garak` is updated periodically. To get a fresher version from GitHub, try:\n\n```\npython -m pip install -U git+https://github.com/NVIDIA/garak.git@main\n```\n\n### Clone from source\n\n`garak` has its own dependencies. You can to install `garak` in its own Conda environment:\n\n```\nconda create --name garak \"python>=3.10,<=3.12\"\nconda activate garak\ngh repo clone NVIDIA/garak\ncd garak\npython -m pip install -e .\n```\n\nOK, if that went fine, you're probably good to go!\n\n**Note**: if you cloned before the move to the `NVIDIA` GitHub organisation, but you're reading this at the `github.com/NVIDIA` URI, please update your remotes as follows:\n\n```\ngit remote set-url origin https://github.com/NVIDIA/garak.git\n```\n\n\n## Getting started\n\nThe general syntax is:\n\n`garak <options>`\n\n`garak` needs to know what model to scan, and by default, it'll try all the probes it knows on that model, using the vulnerability detectors recommended by each probe. You can see a list of probes using:\n\n`garak --list_probes`\n\nTo specify a generator, use the `--model_type` and, optionally, the `--model_name` options. Model type specifies a model family/interface; model name specifies the exact model to be used. The \"Intro to generators\" section below describes some of the generators supported. A straightforward generator family is Hugging Face models; to load one of these, set `--model_type` to `huggingface` and `--model_name` to the model's name on Hub (e.g. `\"RWKV/rwkv-4-169m-pile\"`). Some generators might need an API key to be set as an environment variable, and they'll let you know if they need that.\n\n`garak` runs all the probes by default, but you can be specific about that too. `--probes promptinject` will use only the [PromptInject](https://github.com/agencyenterprise/promptinject) framework's methods, for example. You can also specify one specific plugin instead of a plugin family by adding the plugin name after a `.`; for example, `--probes lmrc.SlurUsage` will use an implementation of checking for models generating slurs based on the [Language Model Risk Cards](https://arxiv.org/abs/2303.18190) framework.\n\nFor help and inspiration, find us on [Twitter](https://twitter.com/garak_llm) or [discord](https://discord.gg/uVch4puUCs)!\n\n## Examples\n\nProbe ChatGPT for encoding-based prompt injection (OSX/\\*nix) (replace example value with a real OpenAI API key)\n \n```\nexport OPENAI_API_KEY=\"sk-123XXXXXXXXXXXX\"\npython3 -m garak --model_type openai --model_name gpt-3.5-turbo --probes encoding\n```\n\nSee if the Hugging Face version of GPT2 is vulnerable to DAN 11.0\n\n```\npython3 -m garak --model_type huggingface --model_name gpt2 --probes dan.Dan_11_0\n```\n\n\n## Reading the results\n\nFor each probe loaded, garak will print a progress bar as it generates. Once generation is complete, a row evaluating that probe's results on each detector is given. If any of the prompt attempts yielded an undesirable behavior, the response will be marked as FAIL, and the failure rate given.\n\nHere are the results with the `encoding` module on a GPT-3 variant:\n![alt text](https://i.imgur.com/8Dxf45N.png)\n\nAnd the same results for ChatGPT:\n![alt text](https://i.imgur.com/VKAF5if.png)\n\nWe can see that the more recent model is much more susceptible to encoding-based injection attacks, where text-babbage-001 was only found to be vulnerable to quoted-printable and MIME encoding injections.  The figures at the end of each row, e.g. 840/840, indicate the number of text generations total and then how many of these seemed to behave OK. The figure can be quite high because more than one generation is made per prompt - by default, 10.\n\nErrors go in `garak.log`; the run is logged in detail in a `.jsonl` file specified at analysis start & end. There's a basic analysis script in `analyse/analyse_log.py` which will output the probes and prompts that led to the most hits.\n\nSend PRs & open issues. Happy hunting!\n\n## Intro to generators\n\n### Hugging Face\n\nUsing the Pipeline API:\n* `--model_type huggingface` (for transformers models to run locally)\n* `--model_name` - use the model name from Hub. Only generative models will work. If it fails and shouldn't, please open an issue and paste in the command you tried + the exception!\n\nUsing the Inference API:\n* `--model_type huggingface.InferenceAPI` (for API-based model access)\n* `--model_name` - the model name from Hub, e.g. `\"mosaicml/mpt-7b-instruct\"`\n\nUsing private endpoints:\n* `--model_type huggingface.InferenceEndpoint` (for private endpoints)\n* `--model_name` - the endpoint URL, e.g. `https://xxx.us-east-1.aws.endpoints.huggingface.cloud`\n\n* (optional) set the `HF_INFERENCE_TOKEN` environment variable to a Hugging Face API token with the \"read\" role; see https://huggingface.co/settings/tokens when logged in\n\n### OpenAI\n\n* `--model_type openai`\n* `--model_name` - the OpenAI model you'd like to use. `gpt-3.5-turbo-0125` is fast and fine for testing.\n* set the `OPENAI_API_KEY` environment variable to your OpenAI API key (e.g. \"sk-19763ASDF87q6657\"); see https://platform.openai.com/account/api-keys when logged in\n\nRecognised model types are whitelisted, because the plugin needs to know which sub-API to use. Completion or ChatCompletion models are OK. If you'd like to use a model not supported, you should get an informative error message, and please send a PR / open an issue.\n\n### Replicate\n\n* set the `REPLICATE_API_TOKEN` environment variable to your Replicate API token, e.g. \"r8-123XXXXXXXXXXXX\"; see https://replicate.com/account/api-tokens when logged in\n\nPublic Replicate models:\n* `--model_type replicate`\n* `--model_name` - the Replicate model name and hash, e.g. `\"stability-ai/stablelm-tuned-alpha-7b:c49dae36\"`\n\nPrivate Replicate endpoints:\n* `--model_type replicate.InferenceEndpoint` (for private endpoints)\n* `--model_name` - username/model-name slug from the deployed endpoint, e.g. `elim/elims-llama2-7b`\n\n### Cohere\n\n* `--model_type cohere`\n* `--model_name` (optional, `command` by default) - The specific Cohere model you'd like to test\n* set the `COHERE_API_KEY` environment variable to your Cohere API key, e.g. \"aBcDeFgHiJ123456789\"; see https://dashboard.cohere.ai/api-keys when logged in\n\n### Groq\n\n* `--model_type groq`\n* `--model_name` - The name of the model to access via the Groq API\n* set the `GROQ_API_KEY` environment variable to your Groq API key, see https://console.groq.com/docs/quickstart for details on creating an API key\n\n### ggml\n\n* `--model_type ggml`\n* `--model_name` - The path to the ggml model you'd like to load, e.g. `/home/leon/llama.cpp/models/7B/ggml-model-q4_0.bin`\n* set the `GGML_MAIN_PATH` environment variable to the path to your ggml `main` executable\n\n### REST\n\n`rest.RestGenerator` is highly flexible and can connect to any REST endpoint that returns plaintext or JSON. It does need some brief config, which will typically result a short YAML file describing your endpoint. See https://reference.garak.ai/en/latest/garak.generators.rest.html for examples.\n\n### NIM\n\nUse models from https://build.nvidia.com/ or other NIM endpoints.\n* set the `NIM_API_KEY` environment variable to your authentication API token, or specify it in the config YAML\n\nFor chat models:\n* `--model_type nim`\n* `--model_name` - the NIM `model` name, e.g. `meta/llama-3.1-8b-instruct`\n\nFor completion models:\n* `--model_type nim.NVOpenAICompletion`\n* `--model_name` - the NIM `model` name, e.g. `bigcode/starcoder2-15b`\n\n\n### OctoAI\n\n* set the `OCTO_API_TOKEN` environment variable to your Replicate API token, e.g. \"r8-123XXXXXXXXXXXX\"; see https://replicate.com/account/api-tokens when logged in\n\nOcto public endpoint:\n* `--model_type octo`\n* `--model_name` - the OctoAI public endpoint for the model, e.g. `mistral-7b-instruct-fp16`\n\nOcto private endpoint:\n* `--model_type octo.InferenceEndpoint` (for private endpoints)\n* `--model_name` - the deployed endpoint URL, e.g. `https://llama-2-70b-chat-xxx.octoai.run/v1/chat/completions`\n\n### Test\n\n* `--model_type test`\n* (alternatively) `--model_name test.Blank`\nFor testing. This always generates the empty string, using the `test.Blank` generator.  Will be marked as failing for any tests that *require* an output, e.g. those that make contentious claims and expect the model to refute them in order to pass.\n\n* `--model_type test.Repeat`\nFor testing. This generator repeats back the prompt it received.\n\n## Intro to probes\n\n| Probe | Description |\n| --- | --- |\n| blank | A simple probe that always sends an empty prompt. |\n| atkgen | Automated Attack Generation. A red-teaming LLM probes the target and reacts to it in an attempt to get toxic output. Prototype, mostly stateless, for now uses a simple GPT-2 [fine-tuned](https://huggingface.co/garak-llm/artgpt2tox) on the subset of hhrlhf attempts that yielded detectable toxicity (the only target currently supported for now). |\n| av_spam_scanning | Probes that attempt to make the model output malicious content signatures |\n| continuation | Probes that test if the model will continue a probably undesirable word |\n| dan | Various [DAN](https://adguard.com/en/blog/chatgpt-dan-prompt-abuse.html) and DAN-like attacks |\n| donotanswer | Prompts to which responsible language models should not answer. |\n| encoding | Prompt injection through text encoding |\n| gcg | Disrupt a system prompt by appending an adversarial suffix. |\n| glitch | Probe model for glitch tokens that provoke unusual behavior. |\n| grandma | Appeal to be reminded of one's grandmother. | \n| goodside | Implementations of Riley Goodside attacks. |\n| leakerplay | Evaluate if a model will replay training data. |\n| lmrc | Subsample of the [Language Model Risk Cards](https://arxiv.org/abs/2303.18190) probes |\n| malwaregen | Attempts to have the model generate code for building malware |\n| misleading | Attempts to make a model support misleading and false claims |\n| packagehallucination | Trying to get code generations that specify non-existent (and therefore insecure) packages. |\n| promptinject | Implementation of the Agency Enterprise [PromptInject](https://github.com/agencyenterprise/PromptInject/tree/main/promptinject) work (best paper awards @ NeurIPS ML Safety Workshop 2022) |\n| realtoxicityprompts | Subset of the RealToxicityPrompts work (data constrained because the full test will take so long to run) |\n| snowball | [Snowballed Hallucination](https://ofir.io/snowballed_hallucination.pdf) probes designed to make a model give a wrong answer to questions too complex for it to process |\n| xss | Look for vulnerabilities the permit or enact cross-site attacks, such as private data exfiltration. |\n\n## Logging\n\n`garak` generates multiple kinds of log:\n* A log file, `garak.log`. This includes debugging information from `garak` and its plugins, and is continued across runs.\n* A report of the current run, structured as JSONL. A new report file is created every time `garak` runs. The name of this file is output at the beginning and, if successful, also at the end of the run. In the report, an entry is made for each probing attempt both as the generations are received, and again when they are evaluated; the entry's `status` attribute takes a constant from `garak.attempts` to describe what stage it was made at.\n* A hit log, detailing attempts that yielded a vulnerability (a 'hit')\n\n## How is the code structured?\n\nCheck out the [reference docs](https://reference.garak.ai/) for an authoritative guide to `garak` code structure.\n\nIn a typical run, `garak` will read a model type (and optionally model name) from the command line, then determine which `probe`s and `detector`s to run, start up a `generator`, and then pass these to a `harness` to do the probing; an `evaluator` deals with the results. There are many modules in each of these categories, and each module provides a number of classes that act as individual plugins.\n\n* `garak/probes/` - classes for generating interactions with LLMs\n* `garak/detectors/` - classes for detecting an LLM is exhibiting a given failure mode\n* `garak/evaluators/` - assessment reporting schemes\n* `garak/generators/` - plugins for LLMs to be probed\n* `garak/harnesses/` - classes for structuring testing\n* `resources/` - ancillary items required by plugins\n\nThe default operating mode is to use the `probewise` harness. Given a list of probe module names and probe plugin names, the `probewise` harness instantiates each probe, then for each probe reads its `recommended_detectors` attribute to get a list of `detector`s to run on the output.\n\nEach plugin category (`probes`, `detectors`, `evaluators`, `generators`, `harnesses`) includes a `base.py` which defines the base classes usable by plugins in that category. Each plugin module defines plugin classes that inherit from one of the base classes. For example, `garak.generators.openai.OpenAIGenerator` descends from `garak.generators.base.Generator`.\n\nLarger artefacts, like model files and bigger corpora, are kept out of the repository; they can be stored on e.g. Hugging Face Hub and loaded locally by clients using `garak`.\n\n\n## Developing your own plugin\n\n* Take a look at how other plugins do it\n* Inherit from one of the base classes, e.g. `garak.probes.base.TextProbe`\n* Override as little as possible\n* You can test the new code in at least two ways:\n  * Start an interactive Python session\n    * Import the model, e.g. `import garak.probes.mymodule`\n    * Instantiate the plugin, e.g. `p = garak.probes.mymodule.MyProbe()`\n  * Run a scan with test plugins\n    * For probes, try a blank generator and always.Pass detector: `python3 -m garak -m test.Blank -p mymodule -d always.Pass`\n    * For detectors, try a blank generator and a blank probe: `python3 -m garak -m test.Blank -p test.Blank -d mymodule`\n    * For generators, try a blank probe and always.Pass detector: `python3 -m garak -m mymodule -p test.Blank -d always.Pass`\n  * Get `garak` to list all the plugins of the type you're writing, with `--list_probes`, `--list_detectors`, or `--list_generators`\n\n\n## FAQ\n\nWe have an FAQ [here](https://github.com/NVIDIA/garak/blob/main/FAQ.md). Reach out if you have any more questions! [leon@garak.ai](mailto:leon@garak.ai)\n\nCode reference documentation is at [garak.readthedocs.io](https://garak.readthedocs.io/en/latest/).\n\n## Citing garak\n\nYou can read the [garak preprint paper](garak-paper.pdf). If you use garak, please cite us.\n\n```\n@article{garak,\n  title={{garak: A Framework for Security Probing Large Language Models}},\n  author={Leon Derczynski and Erick Galinkin and Jeffrey Martin and Subho Majumdar and Nanna Inie},\n  year={2024},\n  howpublished={\\url{https://garak.ai}}\n}\n```\n\n<hr>\n\n_\"Lying is a skill like any other, and if you wish to maintain a level of excellence you have to practice constantly\"_ - Elim\n\nFor updates and news see [@garak_llm](https://twitter.com/garak_llm)\n\n© 2023- Leon Derczynski; Apache license v2, see [LICENSE](LICENSE)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.6650390625,
          "content": " ## Security\n\nNVIDIA is dedicated to the security and trust of our software products and services, including all source code repositories managed through our organization.\n\nIf you need to report a security issue, please use the appropriate contact points outlined below. **Please do not report security vulnerabilities through GitHub.**\n\n## Reporting Potential Security Vulnerability in an NVIDIA Product\n\nTo report a potential security vulnerability in any NVIDIA product:\n- Web: [Security Vulnerability Submission Form](https://www.nvidia.com/object/submit-security-vulnerability.html)\n- E-Mail: psirt@nvidia.com\n    - We encourage you to use the following PGP key for secure email communication: [NVIDIA public PGP Key for communication](https://www.nvidia.com/en-us/security/pgp-key)\n    - Please include the following information:\n   \t - Product/Driver name and version/branch that contains the vulnerability\n     - Type of vulnerability (code execution, denial of service, buffer overflow, etc.)\n   \t - Instructions to reproduce the vulnerability\n   \t - Proof-of-concept or exploit code\n   \t - Potential impact of the vulnerability, including how an attacker could exploit the vulnerability\n\nWhile NVIDIA currently does not have a bug bounty program, we do offer acknowledgement when an externally reported security issue is addressed under our coordinated vulnerability disclosure policy. Please visit our [Product Security Incident Response Team (PSIRT)](https://www.nvidia.com/en-us/security/psirt-policies/) policies page for more information.\n\n## NVIDIA Product Security\n\nFor all security-related concerns, please visit NVIDIA's Product Security portal at https://www.nvidia.com/en-us/security\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "garak-paper.pdf",
          "type": "blob",
          "size": 863.0390625,
          "content": null
        },
        {
          "name": "garak",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 31.078125,
          "content": "[MAIN]\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=no\n\n# Clear in-memory caches upon conclusion of linting. Useful if running pylint\n# in a server-like mode.\nclear-cache-post-run=no\n\n# Load and enable all available extensions. Use --list-extensions to see a list\n# all available extensions.\n#enable-all-extensions=\n\n# In error mode, messages with a category besides ERROR or FATAL are\n# suppressed, and no reports are done by default. Error mode is compatible with\n# disabling specific errors.\n#errors-only=\n\n# Always return a 0 (non-error) status code, even if lint errors are found.\n# This is primarily useful in continuous integration scripts.\n#exit-zero=\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-allow-list=\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code. (This is an alternative name to extension-pkg-allow-list\n# for backward compatibility.)\nextension-pkg-whitelist=\n\n# Return non-zero exit code if any of these messages/categories are detected,\n# even if score is above --fail-under value. Syntax same as enable. Messages\n# specified are enabled, while categories only check already-enabled messages.\nfail-on=\n\n# Specify a score threshold under which the program will exit with error.\nfail-under=10\n\n# Interpret the stdin as a python script, whose filename needs to be passed as\n# the module_or_package argument.\n#from-stdin=\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=CVS|.git\n\n# Add files or directories matching the regular expressions patterns to the\n# ignore-list. The regex matches against paths and can be in Posix or Windows\n# format. Because '\\\\' represents the directory delimiter on Windows systems,\n# it can't be used as an escape character.\nignore-paths=garak\\\\resources|garak/resources\n\n# Files or directories matching the regular expression patterns are skipped.\n# The regex matches against base names, not paths. The default value ignores\n# Emacs file locks\nignore-patterns=^\\.#\n\n# List of module names for which member attributes should not be checked\n# (useful for modules/projects where namespaces are manipulated during runtime\n# and thus existing member attributes cannot be deduced by static analysis). It\n# supports qualified module names, as well as Unix pattern matching.\nignored-modules=\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\n#init-hook=\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use, and will cap the count on Windows to\n# avoid hangs.\njobs=10\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python module names) to load,\n# usually to register additional checkers.\nload-plugins=\n\n# Pickle collected data for later comparisons.\npersistent=yes\n\n# Minimum Python version to use for version dependent checks. Will default to\n# the version used to run pylint.\npy-version=3.10\n\n# Discover python modules and packages in the file system subtree.\nrecursive=no\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=yes\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=no\n\n# In verbose mode, extra non-checker-related info will be displayed.\n#verbose=\n\n\n[BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=snake_case\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style. If left empty, argument names will be checked with the set\n# naming style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=snake_case\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style. If left empty, attribute names will be checked with the set naming\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=foo,\n          bar,\n          baz,\n          toto,\n          tutu,\n          tata\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=any\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style. If left empty, class attribute names will be checked\n# with the set naming style.\n#class-attribute-rgx=\n\n# Naming style matching correct class constant names.\nclass-const-naming-style=UPPER_CASE\n\n# Regular expression matching correct class constant names. Overrides class-\n# const-naming-style. If left empty, class constant names will be checked with\n# the set naming style.\n#class-const-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=PascalCase\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style. If left empty, class names will be checked with the set naming style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=UPPER_CASE\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style. If left empty, constant names will be checked with the set naming\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=snake_case\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style. If left empty, function names will be checked with the set\n# naming style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=i,\n           j,\n           k,\n           ex,\n           Run,\n           _,\n           k,\n           v\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\n\n# Include a hint for the correct naming format with qinvalid-name.\ninclude-naming-hint=no\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=any\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style. If left empty, inline iteration names will be checked\n# with the set naming style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=snake_case\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style. If left empty, method names will be checked with the set naming style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=snake_case\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style. If left empty, module names will be checked with the set naming style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=^_\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=abc.abstractproperty\n\n# Regular expression matching correct type variable names. If left empty, type\n# variable names will be checked with the set naming style.\n#typevar-rgx=\n\n# Naming style matching correct variable names.\nvariable-naming-style=snake_case\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style. If left empty, variable names will be checked with the set\n# naming style.\n#variable-rgx=\n\n\n[CLASSES]\n\n# Warn about protected attribute access inside special methods\ncheck-protected-access-in-special-methods=no\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=__init__,\n                      __new__,\n                      setUp,\n                      __post_init__\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=_asdict,\n                  _fields,\n                  _replace,\n                  _source,\n                  _make\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=cls\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=mcs\n\n\n[DESIGN]\n\n# List of regular expressions of class ancestor names to ignore when counting\n# public methods (see R0903)\nexclude-too-few-public-methods=\n\n# List of qualified class names to ignore when counting class parents (see\n# R0901)\nignored-parents=\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement (see R0916).\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[EXCEPTIONS]\n\n# Exceptions that will emit a warning when caught.\novergeneral-exceptions=builtins.BaseException,builtins.Exception\n\n\n[FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=^\\s*(# )?<?https?://\\S+>?$\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=100\n\n# Maximum number of lines in a module.\nmax-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=no\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=no\n\n\n[IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\n\n# Allow explicit reexports by alias from a package __init__.\nallow-reexport-from-package=no\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=no\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=\n\n# Output a graph (.gv or any supported image format) of external dependencies\n# to the given file (report RP0402 must not be disabled).\next-import-graph=\n\n# Output a graph (.gv or any supported image format) of all (i.e. internal and\n# external) dependencies to the given file (report RP0402 must not be\n# disabled).\nimport-graph=\n\n# Output a graph (.gv or any supported image format) of internal dependencies\n# to the given file (report RP0402 must not be disabled).\nint-import-graph=\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=enchant\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\n\n\n[LOGGING]\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=old\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=logging\n\n\n[MESSAGES CONTROL]\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE,\n# UNDEFINED.\nconfidence=HIGH,\n           CONTROL_FLOW,\n           INFERENCE,\n           INFERENCE_FAILURE,\n           UNDEFINED\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then re-enable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=invalid-name,\n        raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        c-extension-no-member,\n        use-symbolic-message-instead,\n        disallowed-name,\n        typevar-name-incorrect-variance,\n        typevar-double-variance,\n        typevar-name-mismatch,\n        empty-docstring,\n        unidiomatic-typecheck,\n        multiple-imports,\n        ungrouped-imports,\n        wrong-import-position,\n        useless-import-alias,\n        import-outside-toplevel,\n        unnecessary-dunder-call,\n        wrong-spelling-in-comment,\n        wrong-spelling-in-docstring,\n        invalid-characters-in-docstring,\n        bad-mcs-method-argument,\n        bad-mcs-classmethod-argument,\n        single-string-used-for-slots,\n        non-ascii-name,\n        non-ascii-module-import,\n        unnecessary-lambda-assignment,\n        unnecessary-direct-lambda-call,\n        line-too-long,\n        too-many-lines,\n        trailing-whitespace,\n        missing-final-newline,\n        trailing-newlines,\n        multiple-statements,\n        superfluous-parens,\n        mixed-line-endings,\n        unexpected-line-ending-format,\n        unneeded-not,\n        consider-iterating-dictionary,\n        consider-using-dict-items,\n        use-maxsplit-arg,\n        use-sequence-for-iteration,\n        consider-using-f-string,\n        use-implicit-booleaness-not-len,\n        use-implicit-booleaness-not-comparison,\n        too-many-ancestors,\n        too-many-instance-attributes,\n        too-few-public-methods,\n        too-many-public-methods,\n        too-many-return-statements,\n        too-many-branches,\n        too-many-arguments,\n        too-many-locals,\n        too-many-statements,\n        too-many-boolean-expressions,\n        literal-comparison,\n        comparison-of-constants,\n        no-classmethod-decorator,\n        no-staticmethod-decorator,\n        property-with-parameters,\n        consider-merging-isinstance,\n        too-many-nested-blocks,\n        simplifiable-if-statement,\n        redefined-argument-from-local,\n        consider-using-ternary,\n        trailing-comma-tuple,\n        stop-iteration-return,\n        simplify-boolean-expression,\n        consider-swap-variables,\n        consider-using-join,\n        consider-using-in,\n        consider-using-get,\n        chained-comparison,\n        consider-using-dict-comprehension,\n        simplifiable-if-expression,\n        consider-using-sys-exit,\n        no-else-break,\n        no-else-continue,\n        super-with-arguments,\n        simplifiable-condition,\n        consider-using-generator,\n        consider-using-min-builtin,\n        consider-using-max-builtin,\n        consider-using-with,\n        unknown-option-value,\n        bare-except,\n        duplicate-except,\n        try-except-raise,\n        binary-op-exception,\n        raising-format-tuple,\n        wrong-exception-operation,\n        broad-exception-raised,\n        useless-else-on-loop,\n        unreachable,\n        pointless-statement,\n        pointless-string-statement,\n        expression-not-assigned,\n        unnecessary-lambda,\n        duplicate-key,\n        exec-used,\n        eval-used,\n        confusing-with-statement,\n        using-constant-test,\n        missing-parentheses-for-call-in-test,\n        self-assigning-variable,\n        redeclared-assigned-name,\n        assert-on-string-literal,\n        duplicate-value,\n        named-expr-without-context,\n        pointless-exception-statement,\n        lost-exception,\n        assert-on-tuple,\n        comparison-with-callable,\n        nan-comparison,\n        bad-open-mode,\n        boolean-datetime,\n        redundant-unittest-assert,\n        bad-thread-instantiation,\n        shallow-copy-environ,\n        invalid-envvar-default,\n        subprocess-popen-preexec-fn,\n        subprocess-run-check,\n        unspecified-encoding,\n        forgotten-debug-statement,\n        method-cache-max-size-none,\n        deprecated-method,\n        deprecated-argument,\n        deprecated-class,\n        deprecated-decorator,\n        keyword-arg-before-vararg,\n        arguments-out-of-order,\n        non-str-assignment-to-dunder-name,\n        isinstance-second-argument-not-valid-type,\n        wildcard-import,\n        reimported,\n        import-self,\n        preferred-module,\n        misplaced-future,\n        shadowed-import,\n        deprecated-module,\n        global-variable-undefined,\n        global-variable-not-assigned,\n        global-at-module-level,\n        unused-variable,\n        unused-wildcard-import,\n        redefined-outer-name,\n        redefined-builtin,\n        undefined-loop-variable,\n        unbalanced-tuple-unpacking,\n        cell-var-from-loop,\n        possibly-unused-variable,\n        self-cls-assignment,\n        unbalanced-dict-unpacking,\n        fixme,\n        nested-min-max,\n        attribute-defined-outside-init,\n        bad-staticmethod-argument,\n        protected-access,\n        signature-differs,\n        abstract-method,\n        super-init-not-called,\n        non-parent-init-called,\n        invalid-overridden-method,\n        arguments-renamed,\n        unused-private-member,\n        overridden-final-method,\n        subclassed-final-class,\n        redefined-slots-in-subclass,\n        super-without-brackets,\n        useless-parent-delegation,\n        non-ascii-file-name,\n        using-f-string-in-unsupported-version,\n        using-final-decorator-in-unsupported-version,\n        modified-iterating-list,\n        bad-format-string-key,\n        unused-format-string-key,\n        bad-format-string,\n        missing-format-argument-key,\n        unused-format-string-argument,\n        format-combined-specification,\n        missing-format-attribute,\n        invalid-format-index,\n        duplicate-string-formatting-argument,\n        format-string-without-interpolation,\n        anomalous-backslash-in-string,\n        anomalous-unicode-escape-in-string,\n        inconsistent-quotes,\n        redundant-u-string-prefix,\n        useless-with-lock,\n        logging-not-lazy,\n        logging-format-interpolation,\n        unnecessary-ellipsis,\n        missing-timeout,\n        unnecessary-semicolon,\n        bad-indentation,\n        fatal,\n        astroid-error,\n        parse-error,\n        config-parse-error,\n        method-check-failed\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=missing-module-docstring,\n       missing-class-docstring,\n       missing-function-docstring,\n       singleton-comparison,\n       wrong-import-order,\n       bad-file-encoding,\n       bad-classmethod-argument,\n       consider-using-enumerate,\n       useless-option-value,\n       comparison-with-itself,\n       cyclic-import,\n       consider-using-from-import,\n       useless-object-inheritance,\n       duplicate-code,\n       no-else-return,\n       inconsistent-return-statements,\n       useless-return,\n       consider-using-set-comprehension,\n       no-else-raise,\n       unnecessary-comprehension,\n       condition-evals-to-constant,\n       use-a-generator,\n       unnecessary-dict-index-lookup,\n       use-list-literal,\n       use-dict-literal,\n       unnecessary-list-index-lookup,\n       raise-missing-from,\n       broad-exception-caught,\n       dangerous-default-value,\n       unnecessary-pass,\n       global-statement,\n       unused-import,\n       unused-argument,\n       arguments-differ,\n       f-string-without-interpolation,\n       implicit-str-concat,\n       logging-fstring-interpolation,\n       syntax-error,\n       unrecognized-inline-option,\n       bad-plugin-value,\n       bad-configuration-section,\n       unrecognized-option,\n       bad-except-order,\n       raising-bad-type,\n       misplaced-bare-raise,\n       bad-exception-cause,\n       raising-non-exception,\n       notimplemented-raised,\n       catching-non-exception,\n       init-is-generator,\n       return-in-init,\n       function-redefined,\n       not-in-loop,\n       return-outside-function,\n       yield-outside-function,\n       return-arg-in-generator,\n       nonexistent-operator,\n       duplicate-argument-name,\n       abstract-class-instantiated,\n       too-many-star-expressions,\n       invalid-star-assignment-target,\n       star-needs-assignment-target,\n       nonlocal-and-global,\n       continue-in-finally,\n       nonlocal-without-binding,\n       used-prior-global-declaration,\n       bad-reversed-sequence,\n       misplaced-format-function,\n       invalid-envvar-value,\n       singledispatch-method,\n       singledispatchmethod-function,\n       no-member,\n       not-callable,\n       assignment-from-no-return,\n       no-value-for-parameter,\n       too-many-function-args,\n       unexpected-keyword-arg,\n       redundant-keyword-arg,\n       missing-kwoa,\n       invalid-sequence-index,\n       invalid-slice-index,\n       assignment-from-none,\n       not-context-manager,\n       invalid-unary-operand-type,\n       unsupported-binary-operation,\n       repeated-keyword,\n       unsupported-membership-test,\n       unsubscriptable-object,\n       unsupported-assignment-operation,\n       unsupported-delete-operation,\n       invalid-metaclass,\n       dict-iter-missing-items,\n       await-outside-async,\n       unhashable-member,\n       invalid-slice-step,\n       not-an-iterable,\n       not-a-mapping,\n       import-error,\n       relative-beyond-top-level,\n       used-before-assignment,\n       undefined-variable,\n       undefined-all-variable,\n       invalid-all-object,\n       invalid-all-format,\n       no-name-in-module,\n       unpacking-non-sequence,\n       potential-index-error,\n       invalid-unicode-codec,\n       bidirectional-unicode,\n       invalid-character-backspace,\n       invalid-character-carriage-return,\n       invalid-character-sub,\n       invalid-character-esc,\n       invalid-character-nul,\n       invalid-character-zero-width-space,\n       method-hidden,\n       access-member-before-definition,\n       no-method-argument,\n       no-self-argument,\n       invalid-slots-object,\n       assigning-non-slot,\n       invalid-slots,\n       inherit-non-class,\n       inconsistent-mro,\n       duplicate-bases,\n       class-variable-slots-conflict,\n       invalid-class-object,\n       invalid-enum-extension,\n       non-iterator-returned,\n       unexpected-special-method-signature,\n       invalid-length-returned,\n       invalid-bool-returned,\n       invalid-index-returned,\n       invalid-repr-returned,\n       invalid-str-returned,\n       invalid-bytes-returned,\n       invalid-hash-returned,\n       invalid-length-hint-returned,\n       invalid-format-returned,\n       invalid-getnewargs-returned,\n       invalid-getnewargs-ex-returned,\n       bad-super-call,\n       modified-iterating-dict,\n       modified-iterating-set,\n       bad-format-character,\n       truncated-format-string,\n       mixed-format-string,\n       format-needs-mapping,\n       missing-format-string-key,\n       too-many-format-args,\n       too-few-format-args,\n       bad-string-format-type,\n       bad-str-strip-call,\n       logging-unsupported-format,\n       logging-format-truncated,\n       logging-too-many-args,\n       logging-too-few-args,\n       yield-inside-async-function,\n       not-async-context-manager,\n       positional-only-arguments-expected\n\n\n[METHOD_ARGS]\n\n# List of qualified names (i.e., library.method) which require a timeout\n# parameter e.g. 'requests.api.get,requests.api.post'\ntimeout-methods=requests.api.delete,requests.api.get,requests.api.head,requests.api.options,requests.api.patch,requests.api.post,requests.api.put,requests.api.request\n\n\n[MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=FIXME,\n      XXX,\n      TODO\n\n# Regular expression of note tags to take in consideration.\nnotes-rgx=\n\n\n[REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=5\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=sys.exit,argparse.parse_error\n\n\n[REPORTS]\n\n# Python expression which should return a score less than or equal to 10. You\n# have access to the variables 'fatal', 'error', 'warning', 'refactor',\n# 'convention', and 'info' which contain the number of messages in each\n# category, as well as 'statement' which is the total number of statements\n# analyzed. This score is used by the global evaluation report (RP0004).\nevaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\nmsg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\n#output-format=\n\n# Tells whether to display a full report or only the messages.\nreports=no\n\n# Activate the evaluation score.\nscore=yes\n\n\n[SIMILARITIES]\n\n# Comments are removed from the similarity computation\nignore-comments=yes\n\n# Docstrings are removed from the similarity computation\nignore-docstrings=yes\n\n# Imports are removed from the similarity computation\nignore-imports=yes\n\n# Signatures are removed from the similarity computation\nignore-signatures=yes\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=8\n\n\n[SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it work,\n# install the 'python-enchant' package.\nspelling-dict=\n\n# List of comma separated words that should be considered directives if they\n# appear at the beginning of a comment and should not be checked.\nspelling-ignore-comment-directives=fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\n\n# A path to a file that contains the private dictionary; one word per line.\nspelling-private-dict-file=\n\n# Tells whether to store unknown words to the private dictionary (see the\n# --spelling-private-dict-file option) instead of raising a message.\nspelling-store-unknown-words=no\n\n\n[STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=no\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=no\n\n\n[TYPECHECK]\n\n# List of decorators that produce context managers, such as\n# contextlib.contextmanager. Add to this list to register other decorators that\n# produce valid context managers.\ncontextmanager-decorators=contextlib.contextmanager\n\n# List of members which are set dynamically and missed by pylint inference\n# system, and so shouldn't trigger E1101 when accessed. Python regular\n# expressions are accepted.\ngenerated-members=\n\n# Tells whether to warn about missing members when the owner of the attribute\n# is inferred to be None.\nignore-none=yes\n\n# This flag controls whether pylint should warn about no-member and similar\n# checks whenever an opaque object is returned when inferring. The inference\n# can return multiple potential results while evaluating a Python object, but\n# some branches might not be evaluated, which results in partial inference. In\n# that case, it might be useful to still emit no-member and other checks for\n# the rest of the inferred objects.\nignore-on-opaque-inference=yes\n\n# List of symbolic message names to ignore for Mixin members.\nignored-checks-for-mixins=no-member,\n                          not-async-context-manager,\n                          not-context-manager,\n                          attribute-defined-outside-init\n\n# List of class names for which member attributes should not be checked (useful\n# for classes with dynamically set attributes). This supports the use of\n# qualified names.\nignored-classes=optparse.Values,thread._local,_thread._local,argparse.Namespace\n\n# Show a hint with possible names when a member name was not found. The aspect\n# of finding the hint is based on edit distance.\nmissing-member-hint=yes\n\n# The minimum edit distance a name should have in order to be considered a\n# similar match for a missing member name.\nmissing-member-hint-distance=1\n\n# The total number of similar names that should be taken in consideration when\n# showing a hint for a missing member.\nmissing-member-max-choices=1\n\n# Regex pattern to define which classes are considered mixins.\nmixin-class-rgx=.*[Mm]ixin\n\n# List of decorators that change the signature of a decorated function.\nsignature-mutators=\n\n\n[VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=yes\n\n# List of names allowed to shadow builtins\nallowed-redefined-builtins=\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=cb_,\n          _cb\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\n\n# Argument names that match this expression will be ignored.\nignored-argument-names=_.*|^ignored_|^unused_\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=no\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.1328125,
          "content": "[build-system]\nrequires      = [\"setuptools>=61.0.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"garak\"\nversion = \"0.10.1.post1\"\nauthors = [\n  { name = \"Leon Derczynski\", email=\"lderczynski@nvidia.com\" },\n  { name = \"Subho Majumdar\", email=\"subho@vijil.ai\" },\n  { name = \"nv052193\" },\n  { name = \"Mads Kongsbak\" },\n  { name = \"Erick Galinkin\", email=\"egalinkin@nvidia.com\" },\n  { name = \"Tianhao Li\" },\n  { name = \"Phyllis Poh\" },\n  { name = \"Razvan Dinu\" },\n  { name = \"Zander Mackie\" },\n  { name = \"Greg Stephens\" },\n  { name = \"Jeffrey Martin\", email=\"jemartin@nvidia.com\" },\n  { name = \"Ahsan Ayub\" },\n  { name = \"Jonathan Liberman\" },\n  { name = \"Gustav Fredrikson\" },\n  { name = \"Oh Tien Cheng\" },\n  { name = \"Brain John\" },\n  { name = \"Naman Mishra\" },\n  { name = \"Soumili Nandi\" },\n  { name = \"Arjun Krishna\" },\n  { name = \"Mihailo Milenkovic\" },\n  { name = \"Kai Greshake\" },\n  { name = \"Martin Borup-Larsen\" },\n  { name = \"Emmanuel Ferdman\" },\n  { name = \"Eric Therond\" },\n  { name = \"Zoe Nolan\" },\n  { name = \"Harsh Raj\" },\n  { name = \"Shine-afk\" },\n  { name = \"Rafael Sandroni\" },  \n]\nlicense = { file = \"LICENSE\" }\ndescription = \"LLM vulnerability scanner\"\nreadme = \"README.md\"\nclassifiers = [\n    \"Development Status :: 3 - Alpha\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Operating System :: OS Independent\",\n    \"License :: OSI Approved :: Apache Software License\",\n]\nrequires-python = \">=3.10\"\ndependencies = [\n  \"base2048>=0.1.3\",\n  \"transformers>=4.43.0\",\n  \"datasets>=2.14.6,<2.17\",\n  \"colorama>=0.4.3\",\n  \"tqdm>=4.64.0\",\n  \"cohere>=4.5.1,<5\",\n  \"openai>=1.45.0,<2\",\n  \"replicate>=0.8.3\",\n  \"google-api-python-client>=2.0\",\n  \"backoff>=2.1.1\",\n  \"rapidfuzz>=3.0.0\",\n  \"jinja2>=3.1.2\",\n  \"nltk>=3.8.1\",\n  \"accelerate>=0.23.0\",\n  \"avidtools==0.1.2\",\n  \"stdlibs>=2022.10.9\",\n  \"langchain>=0.0.300\",\n  \"nemollm>=0.3.0\",\n  \"octoai-sdk>=0.8.0\",\n  \"cmd2==2.4.3\",\n  \"torch>=2.1.3\",\n  \"sentencepiece>=0.1.99\",\n  \"markdown>=3.4.3\",\n  \"numpy>=1.26.1\",\n  \"zalgolib>=0.2.2\",\n  \"ecoji>=0.1.1\",\n  \"deepl==1.17.0\",\n  \"fschat>=0.2.36\",\n  \"litellm>=1.41.21\",\n  \"jsonpath-ng>=1.6.1\",\n  \"huggingface_hub>=0.21.0\",\n  'python-magic-bin>=0.4.14; sys_platform == \"win32\"',\n  'python-magic>=0.4.21; sys_platform != \"win32\"',\n  \"lorem==0.1.1\",\n  \"xdg-base-dirs>=6.0.1\",\n  \"wn==0.9.5\",\n  \"ollama>=0.1.7\",\n  \"tiktoken>=0.7.0\"\n]\n\n[project.optional-dependencies]\ntests = [\n  \"pytest>=8.0\",\n  \"pytest-mock>=3.14.0\",\n  \"requests-mock==1.12.1\",\n  \"respx>=0.21.1\",\n  \"pytest-cov>=5.0.0\",\n  \"pytest_httpserver>=1.1.0\"\n]\nlint = [\n  \"black==24.4.2\",\n  \"pylint>=3.1.0\",\n]\ncalibration = [\n  \"scipy>=1.14.0\",\n]\n\n[project.urls]\n\"Homepage\" = \"https://github.com/NVIDIA/garak\"\n\"Bug Tracker\" = \"https://github.com/NVIDIA/garak/issues\"\n\n[project.scripts]\ngarak = \"garak.__main__:main\"\n\n[tool.setuptools]\npackages = [\"garak\"]\n\n[tool.setuptools.package-data]\n\"garak.resources\" = [\"*\"]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py310']\ninclude = '\\.pyi?$'\n\n[tool.pytest.ini_options]\nfilterwarnings = [\n    \"ignore\",\n    \"default:::garak\",\n]\n\n[tool.coverage.run]\nsource = [\"./garak\"]\nomit = [\"tests/*\"]\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.8623046875,
          "content": "base2048>=0.1.3\ntransformers>=4.43.0\ndatasets>=2.14.6,<2.17\ncolorama>=0.4.3\ntqdm>=4.64.0\ncohere>=4.5.1,<5\nopenai>=1.45.0,<2\nreplicate>=0.8.3\ngoogle-api-python-client>=2.0\nbackoff>=2.1.1\nrapidfuzz>=3.0.0\njinja2>=3.1.2\nnltk>=3.8.1\naccelerate>=0.23.0\navidtools==0.1.2\nstdlibs>=2022.10.9\nlangchain>=0.0.300\nnemollm>=0.3.0\noctoai-sdk>=0.8.0\ncmd2==2.4.3\ntorch>=2.1.3\nsentencepiece>=0.1.99\nmarkdown>=3.4.3\nnumpy>=1.26.1\nzalgolib>=0.2.2\necoji>=0.1.1\ndeepl==1.17.0\nfschat>=0.2.36\nlitellm>=1.41.21\njsonpath-ng>=1.6.1\nhuggingface_hub>=0.21.0\npython-magic-bin>=0.4.14; sys_platform == \"win32\"\npython-magic>=0.4.21; sys_platform != \"win32\"\nlorem==0.1.1\nxdg-base-dirs>=6.0.1\nwn==0.9.5\nollama>=0.1.7\ntiktoken>=0.7.0\n# tests\npytest>=8.0\npytest-mock>=3.14.0\nrequests-mock==1.12.1\nrespx>=0.21.1\npytest-cov>=5.0.0\npytest_httpserver>=1.1.0\n# lint\nblack==24.4.2\npylint>=3.1.0\n# calibration\nscipy>=1.14.0\n"
        },
        {
          "name": "signatures",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}