{
  "metadata": {
    "timestamp": 1736559692852,
    "page": 372,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wookayin/gpustat",
      "stars": 4106,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.77734375,
          "content": "# managed by setuptools_scm\ngpustat/_version.py\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nvenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.9970703125,
          "content": "Changelog for `gpustat`\n=======================\n\n## v1.2 (Unreleased)\n\n- Non-official pynvml is no longer allowed (#153)\n- Internal refactoring for display and formatting\n- Improve CI and release workflow\n- Support Python 3.12 by running CI tests.\n\n\n## [v1.1.1] (2023/8/22)\n\n### Improvements\n\n- Show error messages when incorrect pynvml is installed (#153)\n- Make gpustat.nvml compatible with a third-party fork of pynvml (#153)\n\n\n## [v1.1][milestone-1.1] (2023/4/5)\n\n[milestone-1.1]: https://github.com/wookayin/gpustat/milestone/5\n\nBugfixes for better stability and introduces a few minor features.\nImportantly, nvidia-ml-py version requirement is relaxed to be compatible with modern NVIDIA GPUs.\n\nNote: Python minimum version is raised to 3.6+ (compatible with Ubuntu 20.04 LTS).\n\n### New Feature\n\n- Add a new flag `--no-processes` to hide process information (@doncamilom) (#133)\n- Add a new flag `--id` to query specific GPUs only (#125)\n- Add shell completion via shtab (@Freed-Wu) (#131)\n- Add error-safe APIs `gpustat.gpu_count()` and `gpustat.is_available()` (#145)\n\n### Enhancements\n\n- Relax `nvidia-ml-py` version requirement, allowing versions greater than 11.495 (#143)\n- Handle Lost GPU and Unknown Error situations (#81, #125)\n- Print a summary of the error message when an error happens (#142)\n- Use setuptools-scm to auto-generate `__version__` string.\n- Add Python 3.11 to CI.\n\n### Bugfix\n\n- Fix incorrect memory usage information on nvidia drivers 510.39 or higher (#141)\n- Fix occasional crash when psutil throws error on reading cpu_percent (#144)\n- Fix afterimage texts when the number of processes changes in the watch mode (#100)\n- Make gpustat not crash even when there are 0 number of GPUs\n\n\n## [v1.0][milestone-1.0] (2022/9/4)\n\n[milestone-1.0]: https://github.com/wookayin/gpustat/milestone/4\n\n### Breaking Changes\n\n- Retire Python 2 (#66). Add CI tests for python 3.8 and higher.\n- Use official nvidia python bindings (#107).\n    - Due to API incompatibility issues, the nvidia driver version should be **R450** or higher\n      in order for process information to be correctly displayed.\n    - NOTE: `nvidia-ml-py<=11.495.46` is required (`nvidia-ml-py3` shall not be used).\n- Use of '--gpuname-width' will truncate longer GPU names (#47).\n\n### New Feature and Enhancements\n\n- Add windows support again, by switching to `blessed` (#78, @skjerns)\n- Add '--show-codec (-e)' option: display encoder/decoder utilization (#79, @ChaoticMind)\n- Add full process information (-f) (#65, @bethune-bryant)\n- Add '--show-all (-a)' flag (#64)\n- '--debug' will show more detailed stacktrace/exception information\n- Use unicode symbols (#58, @arinbjornk)\n- Include nvidia driver version into JSON output (#10)\n\n### Bug Fixes\n\n- Fix color/highlight issues on power usage\n- Make color/highlight work correctly when TERM is not set\n- Do not list the same GPU process more than once (#84)\n- Fix a bug where querying zombie process can throw errors (#95)\n- Fix a bug where psutil may fail to get process info on Windows (#121, #123, @mattip)\n\n### Etc.\n\n- Internal improvements on code style and tests\n- CI: Use Github Actions\n\n\n## [v0.6.0][milestone-0.6] (2019/07/22)\n\n[milestone-0.6]: https://github.com/wookayin/gpustat/issues?q=milestone%3A0.6\n\n- [Feature] Add a flag for fan speed (`-F`, `--show-fan`) (#62, #63), contributed by @bethune-bryant\n- [Enhancement] Align query datetime in the header with respect to `--gpuname-width` parameter.\n- [Enhancement] Alias `gpustat --watch` to `-i`/`--interval` option.\n- [Enhancement] Display NVIDIA driver version in the header (#53)\n- [Bugfix] Minor fixes on debug mode\n- [Etc] Travis: python 3.7\n\n\n## [v0.5.0][milestone-0.5] (2018/09/09)\n\n[milestone-0.5]: https://github.com/wookayin/gpustat/issues?q=milestone%3A0.5\n\n- [Feature] Built-in watch mode (`gpustat -i`) (#7, #41).\n   - Contributed by @drons and @Stonesjtu, Thanks!\n- [Bug] Fix the problem extra character was showing (#32)\n- [Bug] Fix a bug in json mode where process information is unavailable (#45)\n- [Etc.] Refactoring of internal code structure: `gpustat` is now a package (#33)\n- [Etc.] More unit tests and better use of code styles (flake8)\n\n\n\n## v0.4.1\n\n- Fix a bug that might happen when power_draw is not available (#16)\n\n\n## v0.4.0\n\n`gpustat` is no more a zero-dependency script and now depends on some packages. Please install using pip.\n\n- Use `nvidia-ml-py` bindings and `psutil` to replace command-line call of `nvidia-smi` and `ps` (#20, Thanks to @Stonesjtu).\n- A behavior on pipe is changed; it will not be in color by default, use `--color` explicitly. (e.g. `watch --color -n1.0 gpustat --color`)\n- Fix a bug in handling stale-state or zombie process (#16)\n- Include non-CUDA graphics applications in the process list (#18, Thanks to @kapsh)\n- Support power usage (#13, #28, Thanks to @cjw85)\n- Support `--debug` option\n\n\n## v0.3.1\n\n- Experimental JSON output feature (#10)\n- Add some properties and dict-style access for `GPUStat` class\n- Fix Python3 compatibility\n\n\n## v0.2.0\n\n- Add `--gpuname-width` option\n- Display long usernames correctly\n- Support older NVIDIA cards (#6)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "The MIT License\n\nCopyright (c) 2016 Jongwook Choi\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0400390625,
          "content": "include README.md\ninclude screenshot.png\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8095703125,
          "content": "`gpustat`\n=========\n\n[![pypi](https://img.shields.io/pypi/v/gpustat.svg?maxAge=86400)][pypi_gpustat]\n[![license](https://img.shields.io/github/license/wookayin/gpustat.svg?maxAge=86400)](LICENSE)\n\nJust *less* than nvidia-smi?\n\n![Screenshot: gpustat -cp](https://github.com/wookayin/gpustat/blob/master/screenshot.png)\n\nNOTE: This works with NVIDIA Graphics Devices only, no AMD support as of now. Contributions are welcome!\n\nSelf-Promotion: A web interface of `gpustat` is available (in alpha)! Check out [gpustat-web][gpustat-web].\n\n[gpustat-web]: https://github.com/wookayin/gpustat-web\n\n\n\nQuick Installation\n------------------\n\nInstall from [PyPI][pypi_gpustat]:\n\n```\npip install gpustat\n```\n\nIf you don't have root (sudo) privilege, please try installing `gpustat` on user namespace: `pip install --user gpustat`.\n\nTo install the latest version (master branch) via pip:\n\n```\npip install git+https://github.com/wookayin/gpustat.git@master\n```\n\n\n### NVIDIA Driver and `pynvml` Requirements\n\n>[!IMPORTANT]\n> **DO NOT:** `pip install pynvml`, nor include [`pynvml`][pypi_wrong] as a dependency in your python project. This will not work.\n>\n> Instead: `pip install nvidia-ml-py`. [nvidia-ml-py][pypi_pynvml] is NVIDIA's the official python binding for NVML.\n\n- gpustat 1.2+: Requires `nvidia-ml-py >= 12.535.108` ([#161][gh-issue-161])\n- gpustat 1.0+: Requires NVIDIA Driver **450.00** or higher and `nvidia-ml-py >= 11.450.129`.\n- If your NVIDIA driver is too old, you can use older `gpustat` versions (`pip install gpustat<1.0`). See [#107][gh-issue-107] for more details.\n\n\n### Python requirements\n\n- gpustat<1.0: Compatible with python 2.7 and >=3.4\n- gpustat 1.0: [Python >= 3.4][gh-issue-66]\n- gpustat 1.1: Python >= 3.6\n\n\nUsage\n-----\n\n`$ gpustat`\n\nOptions (Please see `gpustat --help` for more details):\n\n* `--color`            : Force colored output (even when stdout is not a tty)\n* `--no-color`         : Suppress colored output\n* `-u`, `--show-user`  : Display username of the process owner\n* `-c`, `--show-cmd`   : Display the process name\n* `-f`, `--show-full-cmd`   : Display full command and cpu stats of running process\n* `-p`, `--show-pid`   : Display PID of the process\n* `-F`, `--show-fan`   : Display GPU fan speed\n* `-e`, `--show-codec` : Display encoder and/or decoder utilization\n* `-P`, `--show-power` : Display GPU power usage and/or limit (`draw` or `draw,limit`)\n* `-a`, `--show-all`   : Display all gpu properties above\n* `--id`              : Target and query specific GPUs only with the specified indices (e.g. `--id 0,1,2`)\n* `--no-processes`    : Do not display process information (user, memory) ([#133][gh-issue-133])\n* `--watch`, `-i`, `--interval`   : Run in watch mode (equivalent to `watch gpustat`) if given. Denotes interval between updates.\n* `--json`             : JSON Output ([#10][gh-issue-10])\n* `--print-completion (bash|zsh|tcsh)` : Print a shell completion script. See [#131][gh-issue-131] for usage.\n\n\n### Tips\n\n- Try `gpustat --debug` if something goes wrong.\n- To periodically watch, try `gpustat --watch` or `gpustat -i` ([#41][gh-issue-41]).\n    - For older versions, one may use `watch --color -n1.0 gpustat --color`.\n- Running `nvidia-smi daemon` (root privilege required) will make querying GPUs much **faster** and use less CPU ([#54][gh-issue-54]).\n- The GPU ID (index) shown by `gpustat` (and `nvidia-smi`) is PCI BUS ID,\n  while CUDA uses a different ordering (assigns the fastest GPU with the lowest ID) by default.\n  Therefore, in order to ensure CUDA and `gpustat` use **same GPU index**,\n  configure the `CUDA_DEVICE_ORDER` environment variable to `PCI_BUS_ID`\n  (before setting `CUDA_VISIBLE_DEVICES` for your CUDA program):\n  `export CUDA_DEVICE_ORDER=PCI_BUS_ID`.\n\n\n[pypi_gpustat]: https://pypi.org/project/gpustat/\n[pypi_pynvml]: https://pypi.org/project/nvidia-ml-py/#history\n[pypi_wrong]: https://pypi.org/project/pynvml/\n[gh-issue-10]: https://github.com/wookayin/gpustat/issues/10\n[gh-issue-41]: https://github.com/wookayin/gpustat/issues/41\n[gh-issue-54]: https://github.com/wookayin/gpustat/issues/54\n[gh-issue-66]: https://github.com/wookayin/gpustat/issues/66\n[gh-issue-107]: https://github.com/wookayin/gpustat/issues/107\n[gh-issue-131]: https://github.com/wookayin/gpustat/issues/131\n[gh-issue-133]: https://github.com/wookayin/gpustat/issues/133\n[gh-issue-161]: https://github.com/wookayin/gpustat/issues/161#issuecomment-1784007533\n\nDefault display\n---------------\n\n```\n[0] GeForce GTX Titan X | 77°C,  96 % | 11848 / 12287 MB | python/52046(11821M)\n```\n\n- `[0]`: GPU index (starts from 0) as PCI_BUS_ID\n- `GeForce GTX Titan X`: GPU name\n- `77°C`: GPU Temperature (in Celsius)\n- `96 %`: GPU Utilization\n- `11848 / 12287 MB`: GPU Memory Usage (Used / Total)\n- `python/...`: Running processes on GPU, owner/cmdline/PID (and their GPU memory usage)\n\nChangelog\n---------\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n\nLicense\n-------\n\n[MIT License](LICENSE)\n"
        },
        {
          "name": "gpustat",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.0986328125,
          "content": "# pyproject.toml\n\n[build-system]\nrequires = [\"setuptools>=45\", \"setuptools_scm[toml]>=6.2\", \"wheel\"]\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.228515625,
          "content": "# All required dependencies must be specified in setup.py, not here.\n#\n# This file lists additional packages that will be installed (BEFORE setup.py)\n# in the python environment (e.g. Travis CI; see .travis.yml).\n\n# vim: set ft=conf:\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 66.853515625,
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0576171875,
          "content": "[aliases]\ntest = pytest\n\n[tool:pytest]\naddopts = --verbose\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 4.2294921875,
          "content": "#!/usr/bin/env python\n\nimport sys\nimport os\nimport re\nfrom setuptools import setup, Command\n\n__PATH__ = os.path.abspath(os.path.dirname(__file__))\n\n\ndef read_readme():\n    with open('README.md') as f:\n        return f.read()\n\n\ndef read_version():\n    try:\n        import setuptools_scm\n    except ImportError as ex:\n        raise ImportError(\n            \"setuptools_scm not found. When running setup.py directly, \"\n            \"setuptools_scm needs to be installed manually. \"\n            \"Or consider running `pip install -e .` instead.\"\n        )\n    version = setuptools_scm.get_version()\n    setuptools_scm.dump_version(root=__PATH__, version=version,\n                                write_to='gpustat/_version.py')\n    return version\n\n\nif os.getenv(\"GPUSTAT_VERSION\"):\n    # release process, e.g. GPUSTAT_VERSION=\"1.1\" python setup.py sdist\n    __version__ = os.environ[\"GPUSTAT_VERSION\"]\nelse:\n    # Let dev version auto-generated from git tags, or\n    # grab the version information from PKG-INFO for source distribution\n    __version__ = read_version()\n\n\n# A valid version is like 1.1.0, not v1.1.0\n__version__ = __version__.lstrip('v')\n\n\n# brought from https://github.com/kennethreitz/setup.py\nclass DeployCommand(Command):\n    description = 'Build and deploy the package to PyPI.'\n    user_options = []\n\n    def initialize_options(self): pass\n    def finalize_options(self): pass\n\n    @staticmethod\n    def status(s):\n        print(s)\n\n    def run(self):\n        import twine  # we require twine locally  # noqa\n\n        assert 'dev' not in __version__, (\n            \"Only non-devel versions are allowed. \"\n            \"__version__ == {}\".format(__version__))\n\n        with os.popen(\"git status --short\") as fp:\n            git_status = fp.read().strip()\n            if git_status:\n                print(\"Error: git repository is not clean.\\n\")\n                os.system(\"git status --short\")\n                sys.exit(1)\n\n        try:\n            from shutil import rmtree\n            self.status('Removing previous builds ...')\n            rmtree(os.path.join(__PATH__, 'dist'))\n        except OSError:\n            pass\n\n        self.status('Building Source and Wheel (universal) distribution ...')\n        os.system(\"GPUSTAT_VERSION='{}' sh -c '{} setup.py sdist'\".format(\n            __version__, sys.executable))\n\n        self.status('Uploading the package to PyPI via Twine ...')\n        ret = os.system('twine upload dist/*')\n        if ret != 0:\n            sys.exit(ret)\n\n        self.status('Creating git tags ...')\n        os.system('git tag v{0}'.format(__version__))\n        os.system('git tag --list')\n        sys.exit()\n\n\ninstall_requires = [\n    'nvidia-ml-py>=12.535.108',  # see #107, #143, #161\n    'psutil>=5.6.0',    # GH-1447\n    'blessed>=1.17.1',  # GH-126\n    'typing_extensions',\n]\n\ntests_requires = [\n    'mockito>=1.2.1',\n    'pytest>=5.4.1',  # python 3.6+\n    'pytest-runner',\n]\n\nsetup(\n    name='gpustat',\n    version=__version__,\n    license='MIT',\n    description='An utility to monitor NVIDIA GPU status and usage',\n    long_description=read_readme(),\n    long_description_content_type='text/markdown',\n    url='https://github.com/wookayin/gpustat',\n    author='Jongwook Choi',\n    author_email='wookayin@gmail.com',\n    keywords='nvidia-smi gpu cuda monitoring gpustat',\n    classifiers=[\n        # https://pypi.python.org/pypi?%3Aaction=list_classifiers\n        'Development Status :: 5 - Production/Stable',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: POSIX :: Linux',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Programming Language :: Python :: 3.12',\n        'Topic :: System :: Monitoring',\n    ],\n    packages=['gpustat'],\n    install_requires=install_requires,\n    extras_require={'test': tests_requires, 'completion': ['shtab']},\n    tests_require=tests_requires,\n    entry_points={\n        'console_scripts': ['gpustat=gpustat:main'],\n    },\n    cmdclass={\n        'deploy': DeployCommand,\n    },\n    include_package_data=True,\n    zip_safe=False,\n    python_requires='>=3.6',\n)\n"
        }
      ]
    }
  ]
}