{
  "metadata": {
    "timestamp": 1736560801763,
    "page": 496,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "YaoFANGUK/video-subtitle-extractor",
      "stars": 6423,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".condarc",
          "type": "blob",
          "size": 0.390625,
          "content": "channels:\r\n  - defaults\r\nshow_channel_urls: true\r\ndefault_channels:\r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main\r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r\r\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2\r\ncustom_channels:\r\n  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\r\n  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.2470703125,
          "content": "\n# Created by https://www.toptal.com/developers/gitignore/api/intellij+all,python,pycharm+all,macos,windows\n# Edit at https://www.toptal.com/developers/gitignore?templates=intellij+all,python,pycharm+all,macos,windows\n\n### Intellij+all ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n.idea/**/workspace.xml\n.idea/**/tasks.xml\n.idea/**/usage.statistics.xml\n.idea/**/dictionaries\n.idea/**/shelf\n\n# Generated files\n.idea/**/contentModel.xml\n\n# Sensitive or high-churn files\n.idea/**/dataSources/\n.idea/**/dataSources.ids\n.idea/**/dataSources.local.xml\n.idea/**/sqlDataSources.xml\n.idea/**/dynamic.xml\n.idea/**/uiDesigner.xml\n.idea/**/dbnavigator.xml\n\n# Gradle\n.idea/**/gradle.xml\n.idea/**/libraries\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\ncmake-build-*/\n\n# Mongo Explorer plugin\n.idea/**/mongoSettings.xml\n\n# File-based project format\n*.iws\n\n# IntelliJ\nout/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Cursive Clojure plugin\n.idea/replstate.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n\n# Editor-based Rest Client\n.idea/httpRequests\n\n# Android studio 3.1+ serialized cache file\n.idea/caches/build_file_checksums.ser\n\n### Intellij+all Patch ###\n# Ignores the whole .idea folder and all .iml files\n# See https://github.com/joeblau/gitignore.io/issues/186 and https://github.com/joeblau/gitignore.io/issues/360\n\n.idea/\n\n# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023\n\n*.iml\nmodules.xml\n.idea/misc.xml\n*.ipr\n\n# Sonarlint plugin\n.idea/sonarlint\n\n### macOS ###\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n\n### PyCharm+all ###\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff\n\n# Generated files\n\n# Sensitive or high-churn files\n\n# Gradle\n\n# Gradle and Maven with auto-import\n# When using Gradle or Maven with auto-import, you should exclude module files,\n# since they will be recreated, and may cause churn.  Uncomment if using\n# auto-import.\n# .idea/artifacts\n# .idea/compiler.xml\n# .idea/jarRepositories.xml\n# .idea/modules.xml\n# .idea/*.iml\n# .idea/modules\n# *.iml\n# *.ipr\n\n# CMake\n\n# Mongo Explorer plugin\n\n# File-based project format\n\n# IntelliJ\n\n# mpeltonen/sbt-idea plugin\n\n# JIRA plugin\n\n# Cursive Clojure plugin\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\n\n# Editor-based Rest Client\n\n# Android studio 3.1+ serialized cache file\n\n### PyCharm+all Patch ###\n# Ignores the whole .idea folder and all .iml files\n# See https://github.com/joeblau/gitignore.io/issues/186 and https://github.com/joeblau/gitignore.io/issues/360\n\n\n# Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-249601023\n\n\n# Sonarlint plugin\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\npytestdebug.log\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndoc/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#poetry.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n# .env\n.env/\n.venv/\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\npythonenv*\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# operating system-related files\n*.DS_Store #file properties cache/storage on macOS\nThumbs.db #thumbnail cache on Windows\n\n# profiling data\n.prof\n\n\n### Windows ###\n# Windows thumbnail cache files\nThumbs.db\nThumbs.db:encryptable\nehthumbs.db\nehthumbs_vista.db\n\n# Dump file\n*.stackdump\n\n# Folder config file\n[Dd]esktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msix\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n*.srt\n\n# End of https://www.toptal.com/developers/gitignore/api/intellij+all,python,pycharm+all,macos,windows\n/backend/models/V2/ch_det/inference.pdiparams\n/backend/models/V4/ch_det/inference.pdiparams\n/output/\n/backend/test.py\n/dylib/\n/settings.ini\n/test.py\n/test2.py\n/subtitle.ini\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.044921875,
          "content": "简体中文 | [English](README_en.md)\n\n## 项目简介\n\n![License](https://img.shields.io/badge/License-Apache%202-red.svg)\n![python version](https://img.shields.io/badge/Python-3.12+-blue.svg)\n![support os](https://img.shields.io/badge/OS-Windows/macOS/Linux-green.svg)  \n\nVideo-subtitle-extractor (VSE) 是一款将视频中的硬字幕提取为外挂字幕文件(srt格式)的软件。\n主要实现了以下功能：\n\n- 提取视频中的关键帧\n- 检测视频帧中文本的所在位置\n- 识别视频帧中文本的内容\n- 过滤非字幕区域的文本\n- [去除水印、台标文本、原视频硬字幕，可配合：video-subtitle-remover (VSR) ](https://github.com/YaoFANGUK/video-subtitle-remover/tree/main)\n- 去除重复字幕行，生成srt字幕文件/txt文本文件\n> 若需要生成txt文本，可以在backend/config.py中设置```GENERATE_TXT=True```\n- 支持视频字幕**批量提取**\n- 多语言：支持**简体中文（中英双语）**、**繁体中文**、**英文**、**日语**、**韩语**、**越南语**、**阿拉伯语**、**法语**、**德语**、**俄语**、**西班牙语**、**葡萄牙语**、**意大利语**等**87种**语言的字幕提取\n- 多模式：\n  - **快速**：（推荐）使用轻量模型，快速提取字幕，可能丢少量字幕、存在少量错别字\n  - **自动**：（推荐）自动判断模型，CPU下使用轻量模型；GPU下使用精准模型，提取字幕速度较慢，可能丢少量字幕、几乎不存在错别字\n  - **精准**：（不推荐）使用精准模型，GPU下逐帧检测，不丢字幕，几乎不存在错别字，但速度**非常慢**\n\n> 请优先使用快速/自动模式，如果前两种模式存在较多丢字幕轴情况时，再使用精准模式\n \n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-extractor/raw/main/design/demo.png\" alt=\"demo.png\"/></p>\n\n**项目特色**：\n\n- 采用本地进行OCR识别，无需设置调用任何API，不需要接入百度、阿里等在线OCR服务即可本地完成文本识别\n- 支持GPU加速，GPU加速后可以获得更高的准确率与更快的提取速度\n\n**使用说明**：\n\n- 有使用问题请加群讨论，QQ群：210150985、816881808\n\n- 点击【打开】后选择视频文件，调整字幕区域，点击【运行】\n  - 单文件提取：打开文件的时候选择**单个**视频\n  - **批量提取**：打开文件的时候选择**多个**视频，确保每个视频的分辨率、字幕区域保持一致\n\n- 去除水印文本/替换特定文本：\n> 如果视频中出现特定的文本需要删除，或者特定的文本需要替换，可以编辑 ``backend/configs/typoMap.json``文件，加入你要替换或去除的内容\n\n```json\n{\n\t\"l'm\": \"I'm\",\n\t\"l just\": \"I just\",\n\t\"Let'sqo\": \"Let's go\",\n\t\"Iife\": \"life\",\n\t\"威筋\": \"威胁\",\n  \t\"性感荷官在线发牌\": \"\"\n}\n```\n\n> 这样就可以把文本中出现的所有“威筋”替换为“威胁”，所有的“性感荷官在线发牌”文本删除\n\n- 视频以及程序路径请**不要带中文和空格**，否则可能出现未知错误！！！\n\n > 如：以下存放视频和代码的路径都不行\n >\n > D:\\下载\\vse\\运行程序.exe（路径含中文）\n >\n > E:\\study\\kaoyan\\sanshang youya.mp4 （路径含空格） \n\n- 直接下载压缩包解压运行，如果不能运行再按照下面的教程，尝试源码安装conda环境运行\n\n**下载地址**：\n\n- Windows 绿色版本v2.0.0（CPU）： <a href=\"https://pan.baidu.com/s/1aUtZqGix1J0aqwGX4VRCWA?pwd=vse2\" target=_blank>vse_windows_cpu_v2.0.0.zip</a> 提取码：**vse2** \n\n> **推荐使用，启动速度较快**\n\n- Windows 单文件版本v2.0.0（CPU）： <a href=https://www.aliyundrive.com/s/uD5ZfoAbDcf target=_blank>vse.exe</a> 提取码：**rl02** \n\n> 双击直接运行，每次打开时会有一点慢，**若出现误报毒，使用绿色版**\n\n- Windows GPU版本v2.0.0（GPU）： <a href=\"https://pan.baidu.com/s/1omkTBFe8XMjwuDPBZbkWJQ?pwd=vse2\">vse_windows_gpu_v2.0.0.7z</a> 提取码：**vse2**\n\n> **仅供具有Nvidia显卡的用户使用(AMD的显卡不行)，提取速度非常快**\n\n- MacOS 版本v0.1.0（CPU）： <a href=\"https://pan.baidu.com/s/1WgZpr_8I3Dv7A8ThwcIPng\">vse_macOS_CPU.dmg</a> 提取码：**7gbo** \n\n> PS: 若无法下载，请前往<a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases\"> Release </a>下载\n\n> **有任何改进意见请在ISSUES和DISCUSSION中提出**\n\n\n## 演示\n\n- GUI版：\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-extractor/raw/main/design/demo.gif\" alt=\"demo.gif\"/></p>\n\n- 点击查看视频教程 👇\n\n[![GPU版本安装教程](https://s1.ax1x.com/2022/04/15/L3KzLR.png)](https://www.bilibili.com/video/bv11L4y1Y7Tj \"GUP版本安装教程\")\n\n\n\n## 在线运行\n\n- 使用**Google Colab Notebook**(免费GPU): <a href=\"https://colab.research.google.com/github/YaoFANGUK/video-subtitle-extractor/blob/main/google_colab.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a>\n\n> PS: Google Colab只能运行CLI版本\n\n\n\n## 源码使用说明\n\n#### 1. 下载安装Miniconda \n\n- Windows: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py312_24.7.1-0-Windows-x86_64.exe\">Miniconda3-py312_24.7.1-0-Windows-x86_64.exe</a>\n\n\n- MacOS：<a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py312_24.7.1-0-MacOSX-x86_64.pkg\">Miniconda3-py312_24.7.1-0-MacOSX-x86_64.pkg</a>\n\n\n- Linux: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py312_24.7.1-0-Linux-x86_64.sh\">Miniconda3-py312_24.7.1-0-Linux-x86_64.sh</a>\n\n#### 2. 创建并激活虚机环境\n\n（1）切换到源码所在目录：\n```shell\ncd <源码所在目录>\n```\n> 例如：如果你的源代码放在D盘的tools文件下，并且源代码的文件夹名为video-subtitle-extractor，就输入 ```cd D:/tools/video-subtitle-extractor-main```\n\n（2）创建激活conda环境\n```shell\nconda create -n videoEnv python=3.12\n```\n\n```shell\nconda activate videoEnv\n```\n\n#### 3. 安装依赖文件\n\n请确保你已经安装 python 3.12+，使用conda创建项目虚拟环境并激活环境 (建议创建虚拟环境运行，以免后续出现问题)\n \n- 安装依赖:\n\n  ```shell\n  pip install -r requirements.txt\n  ```\n\n- 安装CUDA和cuDNN\n\n> 请确保有拥有Nvidia的显卡，**30系列以上的显卡驱动可能不支持 cuda 11.2及以下版本的安装**\n>\n> 如果安装cuda 10.2，请对应安装7.6.5的cuDNN，并使用对应cuda版本的paddlepaddle，**请不要使用cuDNN v8.x 和 cuda 10.2的组合** \n>\n> 如果安装cuda 11.2，请对应安装8.1.1的cuDNN，并使用对应cuda版本的paddlepaddle\n>\n> 如果安装cuda 11.6，请对应安装8.4.0的cuDNN，并使用对应cuda版本的paddlepaddle\n> \n> 如果安装cuda 11.8，请对应安装8.6.0的cuDNN，并使用对应cuda版本的paddlepaddle\n> \n> 如果安装cuda 12.0，请对应安装8.9.1的cuDNN，并使用对应cuda版本的paddlepaddle  \n\n\n\n\n\n  <details>\n      <summary>Linux用户</summary>\n      <h5>(1) 下载CUDA 11.7</h5>\n      <pre><code>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run</code></pre>\n      <h5>(2) 安装CUDA 11.7</h5>\n      <pre><code>sudo sh cuda_11.7.0_515.43.04_linux.run</code></pre>\n      <p>1. 输入accept</p>\n      <img src=\"https://i.328888.xyz/2023/03/31/iwVoeH.png\" width=\"500\" alt=\"\">\n      <p>2. 选中CUDA Toolkit 11.7（如果你没有安装nvidia驱动则选中Driver，如果你已经安装了nvidia驱动请不要选中driver），之后选中install，回车</p>\n      <img src=\"https://i.328888.xyz/2023/03/31/iwVThJ.png\" width=\"500\" alt=\"\">\n      <p>3. 添加环境变量</p>\n      <p>在 ~/.bashrc 加入以下内容</p>\n      <pre><code># CUDA\n  export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}\n  export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}</code></pre>\n      <p>使其生效</p>\n      <pre><code>source ~/.bashrc</code></pre>\n      <h5>(3) 下载cuDNN 8.4.1</h5>\n      <p>国内：<a href=\"https://pan.baidu.com/s/1Gd_pSVzWfX1G7zCuqz6YYA\">cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</a> 提取码：57mg</p>\n      <p>国外：<a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\">cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</a></p>\n      <h5>(4) 安装cuDNN 8.4.1</h5>\n      <pre><code> tar -xf cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\n   mv cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive cuda\n   sudo cp ./cuda/include/* /usr/local/cuda-11.7/include/\n   sudo cp ./cuda/lib/* /usr/local/cuda-11.7/lib64/\n   sudo chmod a+r /usr/local/cuda-11.7/lib64/*\n   sudo chmod a+r /usr/local/cuda-11.7/include/*</code></pre>\n  </details>\n  \n  <details>\n        <summary>Windows用户</summary>\n        <h5>(1) 下载CUDA 11.7</h5>\n        <a href=\"https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_516.01_windows.exe\">cuda_11.7.0_516.01_windows.exe</a>\n        <h5>(2) 安装CUDA 11.7</h5>\n        <h5>(3) 下载cuDNN 8.4.0</h5>\n        <p><a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip\">cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip</a></p>\n        <h5>(4) 安装cuDNN 8.4.0</h5>\n        <p>\n           将cuDNN解压后的cuda文件夹中的bin, include, lib目录下的文件复制到C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\\对应目录下\n        </p>\n    </details>\n\n\n- 安装paddlepaddle:\n\n  - windows:\n\n      ```shell \n      python -m pip install paddlepaddle-gpu==2.6.1.post117 -f https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html\n      ```\n\n  - Linux:\n\n      ```shell\n      python -m pip install paddlepaddle-gpu==2.6.1.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html\n      ```\n  \n#### 4. 运行程序\n\n- 运行图形化界面版本(GUI)\n\n```shell\npython gui.py\n```\n\n- 运行命令行版本(CLI)\n\n```shell\npython ./backend/main.py\n```\n\n\n\n## 常见问题与解决方案\n\n#### 1. 运行不正常/没有结果/cuda及cudnn问题\n\n解决方案：根据自己的显卡型号、显卡驱动版本，安装对应的cuda与cudnn\n\n\n#### 2. CondaHTTPError\n\n将项目中的.condarc放在用户目录下(C:\\Users\\\\<你的用户名>)，如果用户目录已经存在该文件则覆盖\n\n解决方案：<a href=\"https://zhuanlan.zhihu.com/p/260034241\">https://zhuanlan.zhihu.com/p/260034241 </a>\n\n#### 3. Windows下出现geos_c.dll错误\n\n```text\n    _lgeos = CDLL(os.path.join(sys.prefix, 'Library', 'bin', 'geos_c.dll'))\n  File \"C:\\Users\\Flavi\\anaconda3\\envs\\subEnv\\lib\\ctypes\\__init__.py\", line 364, in __init__\n    self._handle = _dlopen(self._name, mode)\nOSError: [WinError 126] 找不到指定的模块。\n```\n\n解决方案：\n\n(1) 卸载Shapely\n\n```shell\npip uninstall Shapely -y\n```\n\n(2) 使用conda重新安装Shapely\n\n```shell\nconda install Shapely             \n```\n\n#### 4. 7z文件解压错误\n\n解决方案：升级7-zip解压程序到最新版本\n\n#### 5. Nuitka打包代码闪退\n\n使用Nuitka版本```0.6.19```，将conda虚拟环境Lib文件夹下site-packages的所有文件复制到dependencies文件夹中，把paddle库dataset下image.py的有关subprocess代码全部注释了，使用以下打包命令：\n\n```shell\n python -m nuitka --standalone --mingw64 --include-data-dir=D:\\vse\\backend=backend --include-data-dir=D:\\vse\\dependencies=dependencies  --nofollow-imports --windows-icon-from-ico=D:\\vse\\design\\vse.ico --plugin-enable=tk-inter,multiprocessing --output-dir=out .\\gui.py\n```\n\n编译成单个文件（pip安装zstandard可以减小体积）\n```shell\npython -m nuitka --standalone --windows-disable-console --mingw64 --lto no --include-data-dir=C:\\Users\\Yao\\Downloads\\vse\\backend=backend --include-data-dir=C:\\Users\\Yao\\Downloads\\vse\\design=design --include-data-dir=C:\\Users\\Yao\\Downloads\\vse\\dependencies=dependencies  --nofollow-imports --windows-icon-from-ico=C:\\Users\\Yao\\Downloads\\vse\\design\\vse.ico --plugin-enable=tk-inter,multiprocessing --output-dir=C:\\Users\\Yao\\Downloads\\out --onefile .\\gui.py\n```\n\n## 社区支持\n\n#### Jetbrains 全家桶支持\n本项目开发所使用的IDE由Jetbrains支持。\n<div align=center>\n  <a href=\"https://jb.gg/OpenSourceSupport\"><img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.png\" alt=\"JetBrains Logo (Main) logo.\" width=\"80\"></a>\n</div>\n\n## 赞助\n<img src=\"https://i.imgur.com/EMCP5Lv.jpeg\" width=\"600\">\n\n| 捐赠者                                    | 累计捐赠金额 | 赞助席位 |\n|----------------------------------------| --- | --- |\n| **伟                                     | 300.00 RMB | 金牌赞助席位 |\n| 周学彬                                     | 200.00 RMB | 金牌赞助席位 |\n| 爱东                                     | 100.00 RMB | 金牌赞助席位 |\n| **迪                                     | 100.00 RMB | 金牌赞助席位 |\n| ysjm                                   | 100.00 RMB | 金牌赞助席位 |\n| [ischeung](https://github.com/ischeung)    | 100.00 RMB | 金牌赞助席位 |\n| 明                                   | 88.00 RMB | 金牌赞助席位 |\n| [neoyxm](https://github.com/neoyxm)    | 50.00 RMB | 银牌赞助席位 |\n| 亦                                   | 50.00 RMB | 银牌赞助席位 |\n| 周昊                                   | 50.00 RMB | 银牌赞助席位 |\n| 玛卡巴卡                                   | 35.00 RMB | 银牌赞助席位 |\n| 净心                                   | 30.00 RMB | 银牌赞助席位 |\n| ysjm                                   | 30.00 RMB | 银牌赞助席位 |\n| 生活不止眼前的苟且                        | 30.00 RMB | 银牌赞助席位 |\n| 迷走神经病                                   | 30.00 RMB | 银牌赞助席位 |\n| [AcelXiao](https://github.com/acelxiao) | 20.00 RMB | 银牌赞助席位 |\n| 又是李啊    | 10.00 RMB | 铜牌赞助席位 |\n| 匿名    | 8.80 RMB | 铜牌赞助席位 |\n| 落墨                                   | 6.00 RMB | 铜牌赞助席位 |\n| 未闻花名                                   | 5.00 RMB | 铜牌赞助席位 |\n| sky                                    | 5.00 RMB | 铜牌赞助席位 |\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 11.3818359375,
          "content": "[简体中文](README.md) | English\n\n## Introduction\n\n![License](https://img.shields.io/badge/License-Apache%202-red.svg)\n![python version](https://img.shields.io/badge/Python-3.12+-blue.svg)\n![support os](https://img.shields.io/badge/OS-Windows/macOS/Linux-green.svg)\n\n**Video-subtitle-extractor** (VSE) is a free, open-source tool which can help you rip the hard-coded subtitles from videos and automatically generate corresponding **srt** files for each video.  It includes the following implementations:\n\n- Detect and extract subtitle frames (using traditional graphic method)\n- Detect subtitle areas (i.e., coordinates) (as well as scene text if you want) (using deep learning algorithms)\n- Converting graphic text into plain-text (using deep learning algorithms)\n- Filter non-subtitle text (e.g., Logo and watermark etc.)\n- Remove watermark, logo text and original video hard subtitles, see: [video-subtitle-remover (VSR)](https://github.com/YaoFANGUK/video-subtitle-remover/tree/main).\n- Remove duplicated subtitle line and **generate srt file** (by calculating text similarity)\n- Batch extraction. You can select multiple video files at one time and this tool can generate subtitles for each video.\n- Multiple language support. You can extract subtitles in 87 languages such as: **Simplified Chinese**, **English**, \n  **Japanese**, **Korean**, **Arabic**, **Traditional Chinese**, **French**, **German**, **Russian**, **Spanish**, \n  **Portuguese**, **Italian**\n- Multi-mode:\n  - **fast**: (Recommended) Uses a lightweight model for quick subtitle extraction, though it might miss a small amount of subtitles and contains a few typos.\n  - **auto**: (Recommended) Automatically selects the model. It uses the lightweight model under the CPU, and the precise model under the GPU. While subtitle extraction speed is slower and might miss a minor amount of subtitles, there are almost no typos.\n  - **accurate**: (Not Recommended) Uses the precise model with frame-by-frame detection under the GPU, ensuring no missed subtitles and almost non-existent typos, but the speed is **very slow**.\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-extractor/raw/main/design/demo.png\" alt=\"demo.png\"/></p>\n\n**Features**：\n\n- You don't need to do any preprocessing (e.g., binarization) and don't need to consider all aspects like subtitle fonts and size etc..\n- This is an offline project. There is no online API call and you dont need to connect to the Internet service provider in order to get results.\n\n**Usage**：\n\n- After clicking \"Open\", select video file(s), adjust the subtitle area, and then click \"Run\".\n  - Single file extraction: When opening a file, choose a single video.\n  - Batch extraction: When opening files, choose multiple videos, ensure that every video's resolution and subtitle area remain consistent.\n\n- Remove watermark text/replace specific text:\n> If specific text needs to be deleted from generated .srt file, or specific text needs to be replaced, you can edit the ``backend/configs/typoMap.json`` file and add the content you want to replace or remove.\n\n```json\n{\n    \"l'm\": \"I'm\",\n    \"l just\": \"I just\",\n    \"Let'sqo\": \"Let's go\",\n    \"Iife\": \"life\",\n    \"威筋\": \"threat\",\n    \"性感荷官在线发牌\": \"\"\n}\n```\n\n> In this way, you can replace all occurrences of \"威筋\" in the text with \"threat\" and delete all instances of the text \"性感荷官在线发牌\".\n\n\n- Directly download the compressed package, unzip it and run it. If it cannot run, follow the tutorial below and try to install the Conda environment and run it using the source code.\n\n**Download**：\n\n- Windows executable (might be slow when initial start): <a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/2.0.0/vse.exe\">vse.exe</a> \n\n- Windows GPU version：<a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/2.0.0/vse_windows_gpu_v2.0.0.7z\">vse_windows_gpu_v2.0.0.7z</a>\n\n- Windows CPU version：<a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/2.0.0/vse_windows_cpu_v2.0.0.zip\">vse_windows_cpu_v2.0.0.zip</a>\n\n- MacOS：<a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/0.1.0/vse_macOS_CPU.dmg\">vse_macOS_CPU.dmg</a>\n\n\n> **Provide your suggestions to improve this project in ISSUES & DISCUSSION**\n\n\n## Demo\n\n- Graphic User Interface (GUI):\n\n<p style=\"text-align:center;\"><img src=\"https://github.com/YaoFANGUK/video-subtitle-extractor/raw/main/design/demo.gif\" alt=\"demo.gif\"/></p>\n\n\n- Command Line Interface (CLI): \n\n[![Demo Video](https://s1.ax1x.com/2020/10/05/0JWVeJ.png)](https://www.bilibili.com/video/BV1t5411h78J \"Demo Video\")\n\n\n## Running Online\n\n- **Google Colab Notebook with free GPU**: <a href=\"https://colab.research.google.com/github/YaoFANGUK/video-subtitle-extractor/blob/main/google_colab_en.ipynb\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"></a>\n\n> PS: can only run CLI version on Google Colab\n\n\n## Getting Started with Source Code \n\n#### 1. Download and Install Miniconda \n\n\n- Windows: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py312_24.7.1-0-Windows-x86_64.exe\">Miniconda3-py312_24.7.1-0-Windows-x86_64.exe</a>\n\n\n- MacOS：<a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py312_24.7.1-0-MacOSX-x86_64.pkg\">Miniconda3-py312_24.7.1-0-MacOSX-x86_64.pkg</a>\n\n\n- Linux: <a href=\"https://repo.anaconda.com/miniconda/Miniconda3-py312_24.7.1-0-Linux-x86_64.sh\">Miniconda3-py312_24.7.1-0-Linux-x86_64.sh</a>\n\n\n#### 2. Activate Vitrual Environment\n\n(1) Switch to working directory\n```shell\ncd <your source code path>\n```\n\n(2) create and activate conda environment\n```shell\nconda create -n videoEnv python=3.12 pip\n```\n\n```shell\nconda activate videoEnv  \n```\n\n\n#### 3. Install Dependencies\n\nBefore you install dependencies, make sure your python 3.8+ has installed as well as conda virtual environment has created and activated.\n\n- Install dependencies：\n\n  ```shell\n  pip install -r requirements.txt\n  ```\n\n- Install **CUDA** and **cuDNN**\n  > make sure that you have **NVIDIA** graphic card before doing this step\n\n    <details>\n        <summary>Linux</summary>\n        <h5>(1) Download CUDA 11.7</h5>\n        <pre><code>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run</code></pre>\n        <h5>(2) Install CUDA 11.7</h5>\n        <pre><code>sudo sh cuda_11.7.0_515.43.04_linux.run</code></pre>\n        <p>1. Input accept</p>\n        <img src=\"https://i.328888.xyz/2023/03/31/iwVoeH.png\" width=\"500\" alt=\"\">\n        <p>2. make sure CUDA Toolkit 11.7 is chosen (If you have already installed driver, do not select Driver)</p>\n        <img src=\"https://i.328888.xyz/2023/03/31/iwVThJ.png\" width=\"500\" alt=\"\">\n        <p>3. Add environment variables</p>\n        <p>add the following content in  <strong>~/.bashrc</strong></p>\n        <pre><code># CUDA\n    export PATH=/usr/local/cuda-11.7/bin${PATH:+:${PATH}}\n    export LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}</code></pre>\n        <p>Make sure it works</p>\n        <pre><code>source ~/.bashrc</code></pre>\n        <h5>(3) Download cuDNN 8.4.1</h5>\n        <p><a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\">cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</a></p>\n        <h5>(4) Install cuDNN 8.4.1</h5>\n        <pre><code> tar -xf cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz\n   mv cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive cuda\n   sudo cp ./cuda/include/* /usr/local/cuda-11.7/include/\n   sudo cp ./cuda/lib/* /usr/local/cuda-11.7/lib64/\n   sudo chmod a+r /usr/local/cuda-11.7/lib64/*\n   sudo chmod a+r /usr/local/cuda-11.7/include/*</code></pre>\n    </details>\n\n    <details>\n        <summary>Windows</summary>\n        <h5>(1) Download CUDA 11.7</h5>\n        <a href=\"https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_516.01_windows.exe\">cuda_11.7.0_516.01_windows.exe</a>\n        <h5>(2) Install CUDA 11.7</h5>\n        <h5>(3) Download cuDNN 8.4.0</h5>\n        <p><a href=\"https://github.com/YaoFANGUK/video-subtitle-extractor/releases/download/1.0.0/cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip\">cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip</a></p>\n        <h5>(4) Install cuDNN 8.4.0</h5>\n        <p>\n           unzip \"cudnn-windows-x86_64-8.4.0.27_cuda11.6-archive.zip\", then move all files in \"bin, include, lib\" in cuda \n    directory to C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\\\n        </p>\n    </details>\n\n\n  - Install paddlepaddle:\n    - windows:\n\n      ```shell\n        python -m pip install paddlepaddle-gpu==2.6.1.post117 -f https://www.paddlepaddle.org.cn/whl/windows/mkl/avx/stable.html\n      ```\n\n    - Linux:\n\n      ```shell\n        python -m pip install paddlepaddle-gpu==2.6.1.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html\n      ```\n\n    > If you installed cuda 10.2，please install cuDNN 7.6.5 instead of cuDNN v8.x\n\n    > If you installed cuda 11.2, please install cuDNN 8.1.1. However, RTX 30xx might be incompatible with cuda 11.2\n    \n\n#### 3. Running the program\n\n- Run GUI version\n\n```shell\npython gui.py\n```\n\n- Run CLI version\n\n```shell    \npython ./backend/main.py\n```\n\n## Q & A\n\n#### 1. Running Failure or Environment Problem \n\nSolution: If you are using a nvidia ampere architecture graphic card such as RTX 3050/3060/3070/3080, please use the latest PaddlePaddle version and CUDA 11.6 with cuDNN 8.2.1. Otherwise, check your which cuda and cudnn works with your GPU and then install them.\n\n  \n#### 2. For Windows users, if you encounter errors related to \"geos_c.dll\"\n\n```text\n    _lgeos = CDLL(os.path.join(sys.prefix, 'Library', 'bin', 'geos_c.dll'))\n  File \"C:\\Users\\Flavi\\anaconda3\\envs\\subEnv\\lib\\ctypes\\__init__.py\", line 364, in __init__\n    self._handle = _dlopen(self._name, mode)\nOSError: [WinError 126] The specified module could not be found。\n```\n\nSolution：\n\n1) Uninstall Shapely\n\n```shell\npip uninstall Shapely -y\n```\n\n2) Reinstall Shapely via conda (make sure you have anaconda or miniconda installed)\n\n```shell\nconda install Shapely             \n```\n\n\n#### 3. How to generate executables\nUsing Nuitka version 0.6.19, copy all the files of ```site-packages``` under the Lib folder of the conda virtual environment to the ```dependencies``` folder, and comment all codes relevant to ```subprocess``` of ```image.py``` under the ```paddle``` library dataset, and use the following packaging command:\n\n```shell\n python -m nuitka --standalone --mingw64 --include-data-dir=D:\\vse\\backend=backend --include-data-dir=D:\\vse\\dependencies=dependencies  --nofollow-imports --windows-icon-from-ico=D:\\vse\\design\\vse.ico --plugin-enable=tk-inter,multiprocessing --output-dir=out .\\gui.py\n```\n\nMake a single ```.exe``` file, (pip install zstandard can compress the file):\n\n```shell\n python -m nuitka --standalone --windows-disable-console --mingw64 --lto no --include-data-dir=D:\\vse\\backend=backend --include-data-dir=D:\\vse\\dependencies=dependencies  --nofollow-imports --windows-icon-from-ico=D:\\vse\\design\\vse.ico --plugin-enable=tk-inter,multiprocessing --output-dir=out --onefile .\\gui.py\n```\n\n\n## Community Support\n\n#### Jetbrains All Products Pack\nThe IDE this project used is supported by Jetbrains\n<div align=center>\n  <a href=\"https://jb.gg/OpenSourceSupport\"><img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.png\" alt=\"JetBrains Logo (Main) logo.\" width=\"80\"></a>\n</div>\n\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "design",
          "type": "tree",
          "content": null
        },
        {
          "name": "google_colab.ipynb",
          "type": "blob",
          "size": 3.0458984375,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"WAJ7lA2wuvR8\"\n   },\n   \"source\": [\n    \"# 运行教程\\n\",\n    \"\\n\",\n    \"1. 点击“修改” -> \\\"笔记本设置\\\" -> \\\"硬件加速器GPU\\\" -> 保存\\n\",\n    \"<img src=\\\"https://z3.ax1x.com/2021/03/30/ciQWWV.png\\\">\\n\",\n    \"\\n\",\n    \"2. 点左侧文件夹图标，上传视频文件，复制上传的视频路径\\n\",\n    \"\\n\",\n    \"<img src=\\\"https://z3.ax1x.com/2021/03/30/cilvhq.png\\\">\\n\",\n    \"\\n\",\n    \"3. 运行代码， 输入粘贴的视频路径\\n\",\n    \"\\n\",\n    \"\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"_jPi_FBwyZyr\"\n   },\n   \"source\": [\n    \"查看是否有GPU\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"eHPHc_Bheo-j\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!nvidia-smi\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"TkQKKGKZkkT2\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!nvcc -V\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"_85O6zgPyhto\"\n   },\n   \"source\": [\n    \"# 安装依赖\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"ICeq0T1FeqjT\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!git clone --depth=1 https://github.com/YaoFANGUK/video-subtitle-extractor.git\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"GHutEWynkMKR\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"cd video-subtitle-extractor\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"ynJydzo1kMKR\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!pip install -r requirements_gpu.txt\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"3-GdvmaGl-aF\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"SGb0i3tPyw9Q\"\n   },\n   \"source\": [\n    \"# 运行程序\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"输入视频路径，如：/content/video-subtitle-extractor/test/test_cn2.mp4\\n\",\n    \"\\n\",\n    \"输入字幕区域，如：842 1069 72 1368\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"B2MPjMOOgGbD\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!python ./backend/main.py\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"accelerator\": \"GPU\",\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"video-subtitle-extractor.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 1\n}\n"
        },
        {
          "name": "google_colab_en.ipynb",
          "type": "blob",
          "size": 3.3486328125,
          "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"markdown\",\n   \"source\": [\n    \"# Set Up\\n\",\n    \"\\n\",\n    \"1. click “Edit” -> \\\"Notebook Settings\\\" -> \\\"Hardware accelerator, GPU\\\" -> Save\\n\",\n    \"<img src=\\\"https://z3.ax1x.com/2021/03/30/ciQWWV.png\\\">\\n\",\n    \"\\n\",\n    \"2. Click the folder icon on the left, upload your video file, and copy the uploaded video path\\n\",\n    \"\\n\",\n    \"<img src=\\\"https://z3.ax1x.com/2021/03/30/cilvhq.png\\\">\\n\",\n    \"\\n\",\n    \"3. Run the code, enter the pasted video path\\n\",\n    \"\\n\",\n    \"\\n\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false\n   }\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"_jPi_FBwyZyr\"\n   },\n   \"source\": [\n    \"check whether GPU works\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"eHPHc_Bheo-j\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!nvidia-smi\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"TkQKKGKZkkT2\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!nvcc -V\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"_85O6zgPyhto\"\n   },\n   \"source\": [\n    \"# Install Dependencies\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"ICeq0T1FeqjT\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!git clone --depth=1 https://github.com/YaoFANGUK/video-subtitle-extractor.git\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"GHutEWynkMKR\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"cd video-subtitle-extractor\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"ynJydzo1kMKR\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!pip install -r requirements_gpu.txt\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"outputs\": [],\n   \"source\": [\n    \"!echo -e '[DEFAULT]\\\\nInterface = English\\\\nLanguage = en\\\\nMode = fast' > /content/video-subtitle-extractor/settings.ini\"\n   ],\n   \"metadata\": {\n    \"collapsed\": false\n   }\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"3-GdvmaGl-aF\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!pip install paddlepaddle-gpu==2.4.2.post117 -f https://www.paddlepaddle.org.cn/whl/linux/mkl/avx/stable.html\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {\n    \"id\": \"SGb0i3tPyw9Q\"\n   },\n   \"source\": [\n    \"# Run\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"Here is an example:\\n\",\n    \"\\n\",\n    \"input video path: /content/video-subtitle-extractor/test/test_en.mp4\\n\",\n    \"\\n\",\n    \"input subtitle area: 612 717 90 1191\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {\n    \"id\": \"B2MPjMOOgGbD\"\n   },\n   \"outputs\": [],\n   \"source\": [\n    \"!python ./backend/main.py\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"accelerator\": \"GPU\",\n  \"colab\": {\n   \"collapsed_sections\": [],\n   \"name\": \"video-subtitle-extractor.ipynb\",\n   \"provenance\": []\n  },\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 1\n}\n"
        },
        {
          "name": "gui.py",
          "type": "blob",
          "size": 28.123046875,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"\n@Author  : Fang Yao\n@Time    : 2021/4/1 6:07 下午\n@FileName: gui.py\n@desc: 字幕提取器图形化界面\n\"\"\"\nimport backend.main\nimport os\nimport configparser\nimport PySimpleGUI as sg\nimport cv2\nfrom threading import Thread\nimport multiprocessing\n\n\nclass SubtitleExtractorGUI:\n    def _load_config(self):\n        self.config_file = os.path.join(os.path.dirname(__file__), 'settings.ini')\n        self.subtitle_config_file = os.path.join(os.path.dirname(__file__), 'subtitle.ini')\n        self.config = configparser.ConfigParser()\n        self.interface_config = configparser.ConfigParser()\n        if not os.path.exists(self.config_file):\n            # 如果没有配置文件，默认弹出语言选择界面\n            LanguageModeGUI(self).run()\n        self.INTERFACE_KEY_NAME_MAP = {\n            '简体中文': 'ch',\n            '繁體中文': 'chinese_cht',\n            'English': 'en',\n            '한국어': 'ko',\n            '日本語': 'japan',\n            'Tiếng Việt': 'vi',\n            'Español': 'es'\n        }\n        self.config.read(self.config_file, encoding='utf-8')\n        self.interface_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend', 'interface',\n                                           f\"{self.INTERFACE_KEY_NAME_MAP[self.config['DEFAULT']['Interface']]}.ini\")\n        self.interface_config.read(self.interface_file, encoding='utf-8')\n\n    def __init__(self):\n        # 初次运行检查运行环境是否正常\n        from paddle import utils\n        utils.run_check()\n        self.font = 'Arial 10'\n        self.theme = 'LightBrown12'\n        sg.theme(self.theme)\n        self.icon = os.path.join(os.path.dirname(__file__), 'design', 'vse.ico')\n        self._load_config()\n        self.screen_width, self.screen_height = sg.Window.get_screen_size()\n        print(self.screen_width, self.screen_height)\n        # 设置视频预览区域大小\n        self.video_preview_width = 960\n        self.video_preview_height = self.video_preview_width * 9 // 16\n        # 默认组件大小\n        self.horizontal_slider_size = (120, 20)\n        self.output_size = (100, 10)\n        self.progressbar_size = (60, 20)\n        # 分辨率低于1080\n        if self.screen_width // 2 < 960:\n            self.video_preview_width = 640\n            self.video_preview_height = self.video_preview_width * 9 // 16\n            self.horizontal_slider_size = (60, 20)\n            self.output_size = (58, 10)\n            self.progressbar_size = (28, 20)\n        # 字幕提取器布局\n        self.layout = None\n        # 字幕提取其窗口\n        self.window = None\n        # 视频路径\n        self.video_path = None\n        # 视频cap\n        self.video_cap = None\n        # 视频的帧率\n        self.fps = None\n        # 视频的帧数\n        self.frame_count = None\n        # 视频的宽\n        self.frame_width = None\n        # 视频的高\n        self.frame_height = None\n        # 设置字幕区域高宽\n        self.xmin = None\n        self.xmax = None\n        self.ymin = None\n        self.ymax = None\n        # 字幕提取器\n        self.se = None\n\n    def run(self):\n        # 创建布局\n        self._create_layout()\n        # 创建窗口\n        self.window = sg.Window(title=self.interface_config['SubtitleExtractorGUI']['Title'], layout=self.layout,\n                                icon=self.icon)\n        while True:\n            # 循环读取事件\n            event, values = self.window.read(timeout=10)\n            # 处理【打开】事件\n            self._file_event_handler(event, values)\n            # 处理【滑动】事件\n            self._slide_event_handler(event, values)\n            # 处理【识别语言】事件\n            self._language_mode_event_handler(event)\n            # 处理【运行】事件\n            self._run_event_handler(event, values)\n            # 如果关闭软件，退出\n            if event == sg.WIN_CLOSED:\n                break\n            # 更新进度条\n            if self.se is not None:\n                self.window['-PROG-'].update(self.se.progress_total)\n                if self.se.isFinished:\n                    # 1) 打开修改字幕滑块区域按钮\n                    self.window['-Y-SLIDER-'].update(disabled=False)\n                    self.window['-X-SLIDER-'].update(disabled=False)\n                    self.window['-Y-SLIDER-H-'].update(disabled=False)\n                    self.window['-X-SLIDER-W-'].update(disabled=False)\n                    # 2) 打开【运行】、【打开】和【识别语言】按钮\n                    self.window['-RUN-'].update(disabled=False)\n                    self.window['-FILE-'].update(disabled=False)\n                    self.window['-FILE_BTN-'].update(disabled=False)\n                    self.window['-LANGUAGE-MODE-'].update(disabled=False)\n                    self.se = None\n                if len(self.video_paths) >= 1:\n                    # 1) 关闭修改字幕滑块区域按钮\n                    self.window['-Y-SLIDER-'].update(disabled=True)\n                    self.window['-X-SLIDER-'].update(disabled=True)\n                    self.window['-Y-SLIDER-H-'].update(disabled=True)\n                    self.window['-X-SLIDER-W-'].update(disabled=True)\n                    # 2) 关闭【运行】、【打开】和【识别语言】按钮\n                    self.window['-RUN-'].update(disabled=True)\n                    self.window['-FILE-'].update(disabled=True)\n                    self.window['-FILE_BTN-'].update(disabled=True)\n                    self.window['-LANGUAGE-MODE-'].update(disabled=True)\n\n    def update_interface_text(self):\n        self._load_config()\n        self.window.set_title(self.interface_config['SubtitleExtractorGUI']['Title'])\n        self.window['-FILE_BTN-'].Update(self.interface_config['SubtitleExtractorGUI']['Open'])\n        self.window['-FRAME1-'].Update(self.interface_config['SubtitleExtractorGUI']['Vertical'])\n        self.window['-FRAME2-'].Update(self.interface_config['SubtitleExtractorGUI']['Horizontal'])\n        self.window['-RUN-'].Update(self.interface_config['SubtitleExtractorGUI']['Run'])\n        self.window['-LANGUAGE-MODE-'].Update(self.interface_config['SubtitleExtractorGUI']['Setting'])\n\n    def _create_layout(self):\n        \"\"\"\n        创建字幕提取器布局\n        \"\"\"\n        garbage = os.path.join(os.path.dirname(__file__), 'output')\n        if os.path.exists(garbage):\n            import shutil\n            shutil.rmtree(garbage, True)\n        self.layout = [\n            # 显示视频预览\n            [sg.Image(size=(self.video_preview_width, self.video_preview_height), background_color='black',\n                      key='-DISPLAY-')],\n            # 打开按钮 + 快进快退条\n            [sg.Input(key='-FILE-', visible=False, enable_events=True),\n             sg.FilesBrowse(button_text=self.interface_config['SubtitleExtractorGUI']['Open'], file_types=((\n                            self.interface_config['SubtitleExtractorGUI']['AllFile'], '*.*'), ('mp4', '*.mp4'),\n                                                                                              ('flv', '*.flv'),\n                                                                                              ('wmv', '*.wmv'),\n                                                                                              ('avi', '*.avi')),\n                            key='-FILE_BTN-', size=(10, 1), font=self.font),\n             sg.Slider(size=self.horizontal_slider_size, range=(1, 1), key='-SLIDER-', orientation='h',\n                       enable_events=True, font=self.font,\n                       disable_number_display=True),\n             ],\n            # 输出区域\n            [sg.Output(size=self.output_size, font=self.font),\n             sg.Frame(title=self.interface_config['SubtitleExtractorGUI']['Vertical'], font=self.font, key='-FRAME1-',\n             layout=[[\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           enable_events=True, font=self.font,\n                           pad=((10, 10), (20, 20)),\n                           default_value=0, key='-Y-SLIDER-'),\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           enable_events=True, font=self.font,\n                           pad=((10, 10), (20, 20)),\n                           default_value=0, key='-Y-SLIDER-H-'),\n             ]], pad=((15, 5), (0, 0))),\n             sg.Frame(title=self.interface_config['SubtitleExtractorGUI']['Horizontal'], font=self.font, key='-FRAME2-',\n             layout=[[\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           pad=((10, 10), (20, 20)),\n                           enable_events=True, font=self.font,\n                           default_value=0, key='-X-SLIDER-'),\n                 sg.Slider(range=(0, 0), orientation='v', size=(10, 20),\n                           disable_number_display=True,\n                           pad=((10, 10), (20, 20)),\n                           enable_events=True, font=self.font,\n                           default_value=0, key='-X-SLIDER-W-'),\n             ]], pad=((15, 5), (0, 0)))\n             ],\n\n            # 运行按钮 + 进度条\n            [sg.Button(button_text=self.interface_config['SubtitleExtractorGUI']['Run'], key='-RUN-',\n                       font=self.font, size=(20, 1)),\n             sg.Button(button_text=self.interface_config['SubtitleExtractorGUI']['Setting'], key='-LANGUAGE-MODE-',\n                       font=self.font, size=(20, 1)),\n             sg.ProgressBar(100, orientation='h', size=self.progressbar_size, key='-PROG-', auto_size_text=True)\n             ],\n        ]\n\n    def _file_event_handler(self, event, values):\n        \"\"\"\n        当点击打开按钮时：\n        1）打开视频文件，将画布显示视频帧\n        2）获取视频信息，初始化进度条滑块范围\n        \"\"\"\n        if event == '-FILE-':\n            self.video_paths = values['-FILE-'].split(';')\n            self.video_path = self.video_paths[0]\n            if self.video_path != '':\n                self.video_cap = cv2.VideoCapture(self.video_path)\n            if self.video_cap is None:\n                return\n            if self.video_cap.isOpened():\n                ret, frame = self.video_cap.read()\n                if ret:\n                    for video in self.video_paths:\n                        print(f\"{self.interface_config['SubtitleExtractorGUI']['OpenVideoSuccess']}：{video}\")\n                    # 获取视频的帧数\n                    self.frame_count = self.video_cap.get(cv2.CAP_PROP_FRAME_COUNT)\n                    # 获取视频的高度\n                    self.frame_height = self.video_cap.get(cv2.CAP_PROP_FRAME_HEIGHT)\n                    # 获取视频的宽度\n                    self.frame_width = self.video_cap.get(cv2.CAP_PROP_FRAME_WIDTH)\n                    # 获取视频的帧率\n                    self.fps = self.video_cap.get(cv2.CAP_PROP_FPS)\n                    # 调整视频帧大小，使播放器能够显示\n                    resized_frame = self._img_resize(frame)\n                    # resized_frame = cv2.resize(src=frame, dsize=(self.video_preview_width, self.video_preview_height))\n                    # 显示视频帧\n                    self.window['-DISPLAY-'].update(data=cv2.imencode('.png', resized_frame)[1].tobytes())\n                    # 更新视频进度条滑块range\n                    self.window['-SLIDER-'].update(range=(1, self.frame_count))\n                    self.window['-SLIDER-'].update(1)\n                    # 预设字幕区域位置\n                    y_p, h_p, x_p, w_p = self.parse_subtitle_config()\n                    y = self.frame_height * y_p\n                    h = self.frame_height * h_p\n                    x = self.frame_width * x_p\n                    w = self.frame_width * w_p\n                    # 更新视频字幕位置滑块range\n                    # 更新Y-SLIDER范围\n                    self.window['-Y-SLIDER-'].update(range=(0, self.frame_height), disabled=False)\n                    # 更新Y-SLIDER默认值\n                    self.window['-Y-SLIDER-'].update(y)\n                    # 更新X-SLIDER范围\n                    self.window['-X-SLIDER-'].update(range=(0, self.frame_width), disabled=False)\n                    # 更新X-SLIDER默认值\n                    self.window['-X-SLIDER-'].update(x)\n                    # 更新Y-SLIDER-H范围\n                    self.window['-Y-SLIDER-H-'].update(range=(0, self.frame_height - y))\n                    # 更新Y-SLIDER-H默认值\n                    self.window['-Y-SLIDER-H-'].update(h)\n                    # 更新X-SLIDER-W范围\n                    self.window['-X-SLIDER-W-'].update(range=(0, self.frame_width - x))\n                    # 更新X-SLIDER-W默认值\n                    self.window['-X-SLIDER-W-'].update(w)\n                    self._update_preview(frame, (y, h, x, w))\n\n    def _language_mode_event_handler(self, event):\n        if event != '-LANGUAGE-MODE-':\n            return\n        if 'OK' == LanguageModeGUI(self).run():\n            # 重新加载config\n            pass\n\n    def _run_event_handler(self, event, values):\n        \"\"\"\n        当点击运行按钮时：\n        1) 禁止修改字幕滑块区域\n        2) 禁止再次点击【运行】和【打开】按钮\n        3) 设定字幕区域位置\n        \"\"\"\n        if event == '-RUN-':\n            if self.video_cap is None:\n                print(self.interface_config['SubtitleExtractorGUI']['OpenVideoFirst'])\n            else:\n                # 1) 禁止修改字幕滑块区域\n                self.window['-Y-SLIDER-'].update(disabled=True)\n                self.window['-X-SLIDER-'].update(disabled=True)\n                self.window['-Y-SLIDER-H-'].update(disabled=True)\n                self.window['-X-SLIDER-W-'].update(disabled=True)\n                # 2) 禁止再次点击【运行】、【打开】和【识别语言】按钮\n                self.window['-RUN-'].update(disabled=True)\n                self.window['-FILE-'].update(disabled=True)\n                self.window['-FILE_BTN-'].update(disabled=True)\n                self.window['-LANGUAGE-MODE-'].update(disabled=True)\n                # 3) 设定字幕区域位置\n                self.xmin = int(values['-X-SLIDER-'])\n                self.xmax = int(values['-X-SLIDER-'] + values['-X-SLIDER-W-'])\n                self.ymin = int(values['-Y-SLIDER-'])\n                self.ymax = int(values['-Y-SLIDER-'] + values['-Y-SLIDER-H-'])\n                if self.ymax > self.frame_height:\n                    self.ymax = self.frame_height\n                if self.xmax > self.frame_width:\n                    self.xmax = self.frame_width\n                print(f\"{self.interface_config['SubtitleExtractorGUI']['SubtitleArea']}：({self.ymin},{self.ymax},{self.xmin},{self.xmax})\")\n                subtitle_area = (self.ymin, self.ymax, self.xmin, self.xmax)\n                y_p = self.ymin / self.frame_height\n                h_p = (self.ymax - self.ymin) / self.frame_height\n                x_p = self.xmin / self.frame_width\n                w_p = (self.xmax - self.xmin) / self.frame_width\n                self.set_subtitle_config(y_p, h_p, x_p, w_p)\n\n                def task():\n                    while self.video_paths:\n                        video_path = self.video_paths.pop()\n                        self.se = backend.main.SubtitleExtractor(video_path, subtitle_area)\n                        self.se.run()\n                Thread(target=task, daemon=True).start()\n                self.video_cap.release()\n                self.video_cap = None\n\n    def _slide_event_handler(self, event, values):\n        \"\"\"\n        当滑动视频进度条/滑动字幕选择区域滑块时：\n        1) 判断视频是否存在，如果存在则显示对应的视频帧\n        2) 绘制rectangle\n        \"\"\"\n        if event == '-SLIDER-' or event == '-Y-SLIDER-' or event == '-Y-SLIDER-H-' or event == '-X-SLIDER-' or event \\\n                == '-X-SLIDER-W-':\n            if self.video_cap is not None and self.video_cap.isOpened():\n                frame_no = int(values['-SLIDER-'])\n                self.video_cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)\n                ret, frame = self.video_cap.read()\n                if ret:\n                    self.window['-Y-SLIDER-H-'].update(range=(0, self.frame_height-values['-Y-SLIDER-']))\n                    self.window['-X-SLIDER-W-'].update(range=(0, self.frame_width-values['-X-SLIDER-']))\n                    # 画字幕框\n                    y = int(values['-Y-SLIDER-'])\n                    h = int(values['-Y-SLIDER-H-'])\n                    x = int(values['-X-SLIDER-'])\n                    w = int(values['-X-SLIDER-W-'])\n                    self._update_preview(frame, (y, h, x, w))\n\n    def _update_preview(self, frame, y_h_x_w):\n        y, h, x, w = y_h_x_w\n        # 画字幕框\n        draw = cv2.rectangle(img=frame, pt1=(int(x), int(y)), pt2=(int(x) + int(w), int(y) + int(h)),\n                             color=(0, 255, 0), thickness=3)\n        # 调整视频帧大小，使播放器能够显示\n        resized_frame = self._img_resize(draw)\n        # 显示视频帧\n        self.window['-DISPLAY-'].update(data=cv2.imencode('.png', resized_frame)[1].tobytes())\n\n\n    def _img_resize(self, image):\n        top, bottom, left, right = (0, 0, 0, 0)\n        height, width = image.shape[0], image.shape[1]\n        # 对长短不想等的图片，找到最长的一边\n        longest_edge = height\n        # 计算短边需要增加多少像素宽度使其与长边等长\n        if width < longest_edge:\n            dw = longest_edge - width\n            left = dw // 2\n            right = dw - left\n        else:\n            pass\n        # 给图像增加边界\n        constant = cv2.copyMakeBorder(image, top, bottom, left, right, cv2.BORDER_CONSTANT, value=[0, 0, 0])\n        return cv2.resize(constant, (self.video_preview_width, self.video_preview_height))\n\n    def set_subtitle_config(self, y, h, x, w):\n        # 写入配置文件\n        with open(self.subtitle_config_file, mode='w', encoding='utf-8') as f:\n            f.write('[AREA]\\n')\n            f.write(f'Y = {y}\\n')\n            f.write(f'H = {h}\\n')\n            f.write(f'X = {x}\\n')\n            f.write(f'W = {w}\\n')\n\n    def parse_subtitle_config(self):\n        y_p, h_p, x_p, w_p = .78, .21, .05, .9\n        # 如果配置文件不存在，则写入配置文件\n        if not os.path.exists(self.subtitle_config_file):\n            self.set_subtitle_config(y_p, h_p, x_p, w_p)\n            return y_p, h_p, x_p, w_p\n        else:\n            try:\n                config = configparser.ConfigParser()\n                config.read(self.subtitle_config_file, encoding='utf-8')\n                conf_y_p, conf_h_p, conf_x_p, conf_w_p = float(config['AREA']['Y']), float(config['AREA']['H']), float(config['AREA']['X']), float(config['AREA']['W'])\n                return conf_y_p, conf_h_p, conf_x_p, conf_w_p\n            except Exception:\n                self.set_subtitle_config(y_p, h_p, x_p, w_p)\n                return y_p, h_p, x_p, w_p\n\n\nclass LanguageModeGUI:\n    def __init__(self, subtitle_extractor_gui):\n        self.subtitle_extractor_gui = subtitle_extractor_gui\n        self.icon = os.path.join(os.path.dirname(__file__), 'design', 'vse.ico')\n        self.config_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'settings.ini')\n        # 设置界面\n        self.INTERFACE_DEF = '简体中文'\n        if not os.path.exists(self.config_file):\n            self.interface_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend', 'interface',\n                                               \"ch.ini\")\n        self.interface_config = configparser.ConfigParser()\n        # 设置语言\n        self.INTERFACE_KEY_NAME_MAP = {\n            '简体中文': 'ch',\n            '繁體中文': 'chinese_cht',\n            'English': 'en',\n            '한국어': 'ko',\n            '日本語': 'japan',\n            'Tiếng Việt': 'vi',\n            'Español': 'es'\n        }\n        # 设置语言\n        self.LANGUAGE_DEF = 'ch'\n        self.LANGUAGE_NAME_KEY_MAP = None\n        self.LANGUAGE_KEY_NAME_MAP = None\n        self.MODE_DEF = 'fast'\n        self.MODE_NAME_KEY_MAP = None\n        self.MODE_KEY_NAME_MAP = None\n        # 语言选择布局\n        self.layout = None\n        # 语言选择窗口\n        self.window = None\n\n    def run(self):\n        # 创建布局\n        title = self._create_layout()\n        # 创建窗口\n        self.window = sg.Window(title=title, layout=self.layout, icon=self.icon)\n        while True:\n            # 循环读取事件\n            event, values = self.window.read(timeout=10)\n            # 处理【OK】事件\n            self._ok_event_handler(event, values)\n            # 处理【切换界面语言】事件\n            self._interface_event_handler(event, values)\n            # 如果关闭软件，退出\n            if event == sg.WIN_CLOSED:\n                if os.path.exists(self.config_file):\n                    break\n                else:\n                    exit(0)\n            if event == 'Cancel':\n                if os.path.exists(self.config_file):\n                    self.window.close()\n                    break\n                else:\n                    exit(0)\n\n    def _load_interface_text(self):\n        self.interface_config.read(self.interface_file, encoding='utf-8')\n        config_language_mode_gui = self.interface_config[\"LanguageModeGUI\"]\n        # 设置界面\n        self.INTERFACE_DEF = config_language_mode_gui[\"InterfaceDefault\"]\n\n        self.LANGUAGE_DEF = config_language_mode_gui[\"LanguageCH\"]\n        self.LANGUAGE_NAME_KEY_MAP = {}\n        for lang in backend.main.config.MULTI_LANG:\n            self.LANGUAGE_NAME_KEY_MAP[config_language_mode_gui[f\"Language{lang.upper()}\"]] = lang\n        self.LANGUAGE_NAME_KEY_MAP = dict(sorted(self.LANGUAGE_NAME_KEY_MAP.items(), key=lambda item: item[1]))\n        self.LANGUAGE_KEY_NAME_MAP = {v: k for k, v in self.LANGUAGE_NAME_KEY_MAP.items()}\n        self.MODE_DEF = config_language_mode_gui['ModeFast']\n        self.MODE_NAME_KEY_MAP = {\n            config_language_mode_gui['ModeAuto']: 'auto',\n            config_language_mode_gui['ModeFast']: 'fast',\n            config_language_mode_gui['ModeAccurate']: 'accurate',\n        }\n        self.MODE_KEY_NAME_MAP = {v: k for k, v in self.MODE_NAME_KEY_MAP.items()}\n\n    def _create_layout(self):\n        interface_def, language_def, mode_def = self.parse_config(self.config_file)\n        # 加载界面文本\n        self._load_interface_text()\n        choose_language_text = self.interface_config[\"LanguageModeGUI\"][\"InterfaceLanguage\"]\n        choose_sub_lang_text = self.interface_config[\"LanguageModeGUI\"][\"SubtitleLanguage\"]\n        choose_mode_text = self.interface_config[\"LanguageModeGUI\"][\"Mode\"]\n        self.layout = [\n            # 显示选择界面语言\n            [sg.Text(choose_language_text),\n             sg.DropDown(values=list(self.INTERFACE_KEY_NAME_MAP.keys()), size=(30, 20),\n                         pad=(0, 20),\n                         key='-INTERFACE-', readonly=True,\n                         default_value=interface_def),\n             sg.OK(key='-INTERFACE-OK-')],\n            # 显示选择字幕语言\n            [sg.Text(choose_sub_lang_text),\n             sg.DropDown(values=list(self.LANGUAGE_NAME_KEY_MAP.keys()), size=(30, 20),\n                         pad=(0, 20),\n                         key='-LANGUAGE-', readonly=True, default_value=language_def)],\n            # 显示识别模式\n            [sg.Text(choose_mode_text),\n             sg.DropDown(values=list(self.MODE_NAME_KEY_MAP.keys()), size=(30, 20), pad=(0, 20),\n                         key='-MODE-', readonly=True, default_value=mode_def)],\n            # 显示确认关闭按钮\n            [sg.OK(), sg.Cancel()]\n        ]\n        return self.interface_config[\"LanguageModeGUI\"][\"Title\"]\n\n    def _ok_event_handler(self, event, values):\n        if event == 'OK':\n            # 设置模型语言配置\n            interface = None\n            language = None\n            mode = None\n            # 设置界面语言\n            interface_str = values['-INTERFACE-']\n            if interface_str in self.INTERFACE_KEY_NAME_MAP:\n                interface = interface_str\n            language_str = values['-LANGUAGE-']\n            # 设置字幕语言\n            print(self.interface_config[\"LanguageModeGUI\"][\"SubtitleLanguage\"], language_str)\n            if language_str in self.LANGUAGE_NAME_KEY_MAP:\n                language = self.LANGUAGE_NAME_KEY_MAP[language_str]\n            # 设置模型语言配置\n            mode_str = values['-MODE-']\n            print(self.interface_config[\"LanguageModeGUI\"][\"Mode\"], mode_str)\n            if mode_str in self.MODE_NAME_KEY_MAP:\n                mode = self.MODE_NAME_KEY_MAP[mode_str]\n            self.set_config(self.config_file, interface, language, mode)\n            if self.subtitle_extractor_gui is not None:\n                self.subtitle_extractor_gui.update_interface_text()\n            self.window.close()\n\n    def _interface_event_handler(self, event, values):\n        if event == '-INTERFACE-OK-':\n            self.interface_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend', 'interface',\n                                               f\"{self.INTERFACE_KEY_NAME_MAP[values['-INTERFACE-']]}.ini\")\n            self.interface_config.read(self.interface_file, encoding='utf-8')\n            config = configparser.ConfigParser()\n            if os.path.exists(self.config_file):\n                config.read(self.config_file, encoding='utf-8')\n                self.set_config(self.config_file, values['-INTERFACE-'], config['DEFAULT']['Language'],\n                                config['DEFAULT']['Mode'])\n            self.window.close()\n            title = self._create_layout()\n            self.window = sg.Window(title=title, layout=self.layout, icon=self.icon)\n\n    @staticmethod\n    def set_config(config_file, interface, language_code, mode):\n        # 写入配置文件\n        with open(config_file, mode='w', encoding='utf-8') as f:\n            f.write('[DEFAULT]\\n')\n            f.write(f'Interface = {interface}\\n')\n            f.write(f'Language = {language_code}\\n')\n            f.write(f'Mode = {mode}\\n')\n\n    def parse_config(self, config_file):\n        if not os.path.exists(config_file):\n            self.interface_config.read(self.interface_file, encoding='utf-8')\n            interface_def = self.interface_config['LanguageModeGUI']['InterfaceDefault']\n            language_def = self.interface_config['LanguageModeGUI']['InterfaceDefault']\n            mode_def = self.interface_config['LanguageModeGUI']['ModeFast']\n            return interface_def, language_def, mode_def\n        config = configparser.ConfigParser()\n        config.read(config_file, encoding='utf-8')\n        interface = config['DEFAULT']['Interface']\n        language = config['DEFAULT']['Language']\n        mode = config['DEFAULT']['Mode']\n        self.interface_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend', 'interface',\n                                           f\"{self.INTERFACE_KEY_NAME_MAP[interface]}.ini\")\n        self._load_interface_text()\n        interface_def = interface if interface in self.INTERFACE_KEY_NAME_MAP else \\\n            self.INTERFACE_DEF\n        language_def = self.LANGUAGE_KEY_NAME_MAP[language] if language in self.LANGUAGE_KEY_NAME_MAP else \\\n            self.LANGUAGE_DEF\n        mode_def = self.MODE_KEY_NAME_MAP[mode] if mode in self.MODE_KEY_NAME_MAP else self.MODE_DEF\n        return interface_def, language_def, mode_def\n\n\nif __name__ == '__main__':\n    try:\n        multiprocessing.set_start_method(\"spawn\")\n        # 运行图形化界面\n        subtitleExtractorGUI = SubtitleExtractorGUI()\n        subtitleExtractorGUI.run()\n    except Exception as e:\n        print(f'[{type(e)}] {e}')\n        import traceback\n        traceback.print_exc()\n        msg = traceback.format_exc()\n        err_log_path = os.path.join(os.path.expanduser('~'), 'VSE-Error-Message.log')\n        with open(err_log_path, 'w', encoding='utf-8') as f:\n            f.writelines(msg)\n        import platform\n        if platform.system() == 'Windows':\n            os.system('pause')\n        else:\n            input()\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2265625,
          "content": "opencv-python==4.10.0.84\npython-Levenshtein==0.26.0\npillow==10.4.0\ntqdm==4.66.5\nfilesplit==3.0.2\npysrt==1.1.2\nwordsegment==1.3.1\nscikit-image==0.24.0\nlmdb==1.5.1\nimgaug==0.4.0\npyclipper==1.3.0.post5\nPySimpleGUI==4.70.1\nnumpy==1.26.4"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}