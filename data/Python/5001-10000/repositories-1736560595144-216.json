{
  "metadata": {
    "timestamp": 1736560595144,
    "page": 216,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "acheong08/EdgeGPT",
      "stars": 8047,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.8134765625,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\ncookies.json\noutput/*\nREADME.md\n*.json\n\n# Pycharm\n.idea/*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.7919921875,
          "content": "repos:\n  - repo: https://github.com/asottile/reorder_python_imports\n    rev: v3.9.0\n    hooks:\n      - id: reorder-python-imports\n        args: [--py37-plus]\n  - repo: https://github.com/asottile/add-trailing-comma\n    rev: v2.3.0\n    hooks:\n      - id: add-trailing-comma\n        args: [--py36-plus]\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.3.1\n    hooks:\n      - id: pyupgrade\n        args: [--py37-plus]\n\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n      - id: check-yaml\n      - id: debug-statements\n      - id: double-quote-string-fixer\n      - id: name-tests-test\n      - id: requirements-txt-fixer\n  - repo: https://github.com/psf/black\n    rev: 22.10.0\n    hooks:\n      - id: black\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4072265625,
          "content": "FROM docker.io/library/python:3.11.3-alpine3.16@sha256:0ba61d06b14e5438aa3428ee46c7ccdc8df5b63483bc91ae050411407eb5cbf4 AS builder\n\nWORKDIR /EdgeGPT\n\nCOPY requirements.txt requirements.txt\n\nRUN pip3 install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\nRUN apk add --no-cache make && \\\nmake init && make build && make ci && apk del make && \\\nrm -Rf /root/.cache/pip\n\n\nENTRYPOINT [\"python3\", \"-m\" , \"EdgeGPT.EdgeGPT\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org>\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.39453125,
          "content": ".PHONY: docs\ninit:\n\tpython -m pip install --upgrade pip\n\tpython -m pip install -r ./requirements.txt --upgrade\n\tpython -m pip install build setuptools wheel flake8 --upgrade\nbuild:\n\tpython -m build\nci:\n\tpython -m flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n\tpython -m flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics\n\tpython setup.py install\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example.env",
          "type": "blob",
          "size": 0.0302734375,
          "content": "export BING_U=\"<COOKIE_VALUE>\"\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.06640625,
          "content": "aiohttp\nBingImageCreator\ncertifi\nhttpx\nprompt_toolkit\nrequests\nrich\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.05859375,
          "content": "[metadata]\ndescription_file=README.md\nlicense_files=LICENSE\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.66015625,
          "content": "from pathlib import Path\n\nfrom setuptools import find_packages\nfrom setuptools import setup\n\nDOCS_PATH = Path(__file__).parents[0] / \"docs/README.md\"\nPATH = Path(\"README.md\")\nif not PATH.exists():\n    with Path.open(DOCS_PATH, encoding=\"utf-8\") as f1:\n        with Path.open(PATH, \"w+\", encoding=\"utf-8\") as f2:\n            f2.write(f1.read())\n\nsetup(\n    name=\"EdgeGPT\",\n    version=\"0.13.2\",\n    license=\"The Unlicense\",\n    author=\"Antonio Cheong\",\n    author_email=\"acheong@student.dalat.org\",\n    description=\"Reverse engineered Edge Chat API\",\n    packages=find_packages(\"src\"),\n    package_dir={\"\": \"src\"},\n    url=\"https://github.com/acheong08/EdgeGPT\",\n    project_urls={\"Bug Report\": \"https://github.com/acheong08/EdgeGPT/issues/new\"},\n    entry_points={\n        \"console_scripts\": [\n            \"edge-gpt = EdgeGPT.main:main\",\n            \"edge-gpt-image = EdgeGPT.ImageGen:main\",\n        ],\n    },\n    install_requires=[\n        \"httpx[socks]>=0.24.0\",\n        \"aiohttp\",\n        \"websockets\",\n        \"rich\",\n        \"certifi\",\n        \"prompt_toolkit\",\n        \"requests\",\n        \"BingImageCreator>=0.4.4\",\n    ],\n    long_description=Path.open(PATH, encoding=\"utf-8\").read(),\n    long_description_content_type=\"text/markdown\",\n    py_modules=[\"EdgeGPT\", \"EdgeUtils\", \"ImageGen\"],\n    classifiers=[\n        \"License :: OSI Approved :: The Unlicense (Unlicense)\",\n        \"Intended Audience :: Developers\",\n        \"Topic :: Software Development :: Libraries :: Python Modules\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_base.py",
          "type": "blob",
          "size": 0.5595703125,
          "content": "import json\n\nimport pytest\nfrom EdgeGPT.EdgeGPT import Chatbot\nfrom EdgeGPT.EdgeGPT import ConversationStyle\n\npytest_plugins = (\"pytest_asyncio\",)\n\nfrom os import getenv\n\n\n@pytest.mark.asyncio()\nasync def test_ask() -> None:\n    bot = await Chatbot.create(cookies=getenv(\"EDGE_COOKIES\"))\n    response = await bot.ask(\n        prompt=\"find me some information about the new ai released by meta.\",\n        conversation_style=ConversationStyle.balanced,\n        simplify_response=True,\n    )\n    await bot.close()\n    print(json.dumps(response, indent=2))\n    assert response\n"
        }
      ]
    }
  ]
}