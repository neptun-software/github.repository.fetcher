{
  "metadata": {
    "timestamp": 1736560840446,
    "page": 539,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google-research/text-to-text-transfer-transformer",
      "stars": 6238,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0712890625,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows\n[Google's Open Source Community Guidelines](https://opensource.google/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.6015625,
          "content": "# T5: Text-To-Text Transfer Transformer\n\n\n### As of July 2022, we recommend using T5X:\n\n[T5X](https://github.com/google-research/t5x) is the new and improved implementation of T5 (and more) in JAX and Flax.\nT5 on Tensorflow with MeshTF is no longer actively developed. If you are new\nto T5, we recommend starting with [T5X](https://github.com/google-research/t5x).\n\n[![Build Status](https://github.com/google-research/text-to-text-transfer-transformer/workflows/build/badge.svg)](https://github.com/google-research/text-to-text-transfer-transformer/actions?query=workflow%3Abuild)\n\nThe `t5` library serves primarily as code for reproducing the experiments in [_Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer_][paper]. In the paper, we demonstrate how to achieve state-of-the-art results on multiple NLP tasks using a text-to-text transformer pre-trained on a large text corpus.\n\nThe bulk of the code in this repository is used for loading, preprocessing, mixing, and evaluating datasets.\nIt also provides a way to fine-tune the [pre-trained models](#released-model-checkpoints) released alongside the publication.\n\nThe `t5` library can be used for future model development by providing useful modules for training and fine-tuning (potentially *huge*) models on mixtures of text-to-text tasks.\n\n## Table of Contents\n\n* [Library](#library)\n* [Usage](#usage)\n  * [Dataset Preparation](#dataset-preparation)\n    * [C4](#c4)\n  * [Installation](#installation)\n  * [Setting up TPUs on GCP](#setting-up-tpus-on-gcp)\n  * [Training](#training)\n  * [Fine-Tuning](#fine-tuning)\n  * [Eval](#eval)\n  * [Decode](#decode)\n  * [Export](#export)\n  * [GPU Usage](#gpu-usage)\n  * [Reproducing our experiments](#reproducing-our-experiments)\n  * [Useful Options](#useful-options)\n* [Released Model Checkpoints](#released-model-checkpoints)\n* [How to Cite](#how-to-cite)\n\n## Library\n\n#### t5.data\n\n`t5.data` is a package for defining `Task` objects that provide `tf.data.Dataset`s.\n\nEach `Task` is made up of:\n\n  * a data source\n  * text preprocessor function(s)\n  * a SentencePiece model\n  * metric function(s)\n\nAdditionally, you may optionally provide:\n\n  * token preprocessor function(s)\n  * postprocess function(s)\n\nThe **data source** can be an arbitrary function that provides a `tf.data.Dataset`, but we also provide simpler wrappers for datasets available in [TensorFlow Datasets (TFDS)][tfds] (a `TfdsTask`) or stored as text files with one example per line (a `TextLineTask`).\n\nThe **text preprocessor** converts the examples in the source dataset into the appropriate format for a text-to-text model with fields for `inputs` and `targets`.  For example, the predefined `t5.data.preprocessors.translate` preprocessor converts inputs in the form\n\n```py\n{'de': 'Das ist gut.', 'en': 'That is good.'}\n```\n\nto the form\n\n```py\n{'inputs': 'translate German to English: Das ist gut.', 'targets': 'That is good.'}\n```\n\nIn addition to text preprocessing, you can also use one or more **token preprocessors** to modify the inputs post-tokenization. We implemented our unsupervised pre-training objectives using these token preprocessors.\n\nWe provide many predefined preprocessors in `t5.data.preprocessors`, but you may also define your own.\n\nThe **SentencePiece model** is used to tokenize the input strings and decode the output tokens. You can create your own model with the [google/sentencepiece](https://github.com/google/sentencepiece) library, or use our default one at `t5.data.DEFAULT_SPM_PATH`. If you create your own, you must use the flags `--pad_id=0 --eos_id=1 --unk_id=2 --bos_id=-1` with `spm_train` to be compatible with our model code.\n\nThe **metric function** returns a score given the target and prediction from the model. You may also define a **postprocess function** to convert the target and prediction text to another format before calling the metric. We provide some predefined metrics in `t5.evaluation.metrics`.\n\nFinally, `t5.data` contains a `Mixture` class that can be instantiated to combine multiple `Task` datasets for multi-task training using various functions for specifying the mixture rates.\n\n#### t5.evaluation\n\n`t5.evaluation` contains two core components:\n\n1. metrics to be used during evaluation\n2. utilities for applying these metrics at evaluation time\n\n#### t5.models\n\n`t5.models` contains shims for connecting T5 `Tasks` and `Mixtures` to a model implementation for training, evaluation, and inference.\n\nCurrently there are two shims available: One for the [Mesh TensorFlow Transformer][mtft] that we used in our paper and another for the [Hugging Face Transformers library](https://huggingface.co/transformers/).\nThe Hugging Face API is currently experimental and subject to change, but provides a simple and easy way to load, fine-tune, and evaluate our pre-trained models using PyTorch on a single GPU.\nIf you want to use our largest models on TPUs and/or reproduce the results in our paper, you should use the [MtfModel](https://github.com/google-research/text-to-text-transfer-transformer/tree/main/t5/models/mtf_model.py) API and the `t5_mesh_transformer` binary.\nIf you are interested fine-tuning our models on a GPU in PyTorch, you should try the [HfPyTorchModel](https://github.com/google-research/text-to-text-transfer-transformer/tree/main/t5/models/hf_model.py) API.\nSince the HfPyTorchModel is experimental, the remainder of this README assumes usage of the MtfModel and its associated binary.\nA usage example of HfPyTorchModel is available [here](https://github.com/google-research/text-to-text-transfer-transformer/blob/a08f0d1c4a7caa6495aec90ce769a29787c3c87c/t5/models/hf_model.py#L38).\n\n## Usage\n\nThe easiest way to try out T5 is with a free TPU in our [Colab Tutorial](https://colab.research.google.com/github/google-research/text-to-text-transfer-transformer/blob/main/notebooks/t5-trivia.ipynb).\n\nBelow we provide examples for how to pre-train, fine-tune, evaluate, and decode from a model from the command-line with our codebase. You can use these instructions to reproduce our results, fine-tune one of our released checkpoints with your own data and/or hyperparameters, or pre-train a model from scratch.\n\n### Dataset Preparation\n\nYou may either use a new or pre-existing `Task`, or you may load examples from a preprocessed TSV file.\n\n#### Using a `Task`\n\nDepending on your data source (see [above](#t5data)), you will need to prepare your data appropriately.\n\n##### `Task`\n\nIf using a vanilla task, just make sure any file(s) loaded by your `dataset_fn` are accessible to the TPU (i.e., are in a GCS bucket), and you should be good to go!\n\n##### `TfdsTask`\n\nMost of our predefined `Task`s use [TensorFlow Datasets (TFDS)][tfds] as their data source. When you run our training binary (see instructions [below](#training)) with a `TfdsTask`, the dataset will automatically be downloaded and prepared on its first use. After preparation is complete, the dataset is cached to your local storage to avoid this overhead in future runs.  If working in the cloud, we recommend you set the `--t5_tfds_data_dir` flag to point to a persistent storage location, such as a [GCS bucket][gcs]. This is a requirement when training on TPU.\n\n#### C4\n\nThe [C4][c4] dataset we created for unsupervised pre-training is available in TensorFlow Datasets, but it requires a significant amount of bandwidth for downloading the raw [Common Crawl][cc] scrapes (~7 TB) and compute for its preparation (~335 CPU-days). We suggest you take advantage of the [Apache Beam][beam] support in TFDS, which enables distributed preprocessing of the dataset and can be run on [Google Cloud Dataflow][gcd]. With 500 workers, the job should complete in ~16 hours.\n\nAfter defining `MY_PROJECT` and `MY_BUCKET` appropriately, you can build the dataset in DataFlow from GCP using the following commands:\n\n```sh\npip install tfds-nightly[c4]\necho 'tfds-nightly[c4]' > /tmp/beam_requirements.txt\npython -m tensorflow_datasets.scripts.download_and_prepare \\\n  --datasets=c4/en \\\n  --data_dir=gs://$MY_BUCKET/tensorflow_datasets \\\n  --beam_pipeline_options=\"project=$MY_PROJECT,job_name=c4,staging_location=gs://$MY_BUCKET/binaries,temp_location=gs://$MY_BUCKET/temp,runner=DataflowRunner,requirements_file=/tmp/beam_requirements.txt,experiments=shuffle_mode=service,region=$MY_REGION\"\n```\n\nRead more in the [TFDS Beam instructions][tfds_beam].\n\n##### `TextLineTask`\n\nA `TextLineTask` is useful when your data source is a text file (or files) with one example per line. You can then use a text preprocessor to convert each line into a dictionary of inputs and targets.\n\nMake sure your files are accessible to the TPU (i.e., are in a GCS bucket), and you should be good to go!\n\n#### Using a TSV File Directly\n\nInstead of defining a new `Task`, you may use a TSV file (or files) directly as your dataset where each line is formatted as `<input>\\t<target>`.\n\nHowever, there are a couple of caveats:\n\n  * There is no way to define a text processor, so the TSV will need to contain your data in a preprocessed format.\n  * There is also currently no way to set a token preprocessor, postprocess function, or metric function for evaluation when using a TSV file directly.\n\nIf you need any of these features, you must define a new `Task`, `TfdsTask`, or `TextLineTask`.\n\nSimilar to the above cases, your TSV file(s) must be accessible to the TPU (i.e., are in a GCS bucket).\n\n### Installation\n\nTo install the T5 package, simply run:\n\n```sh\npip install t5[gcp]\n```\n\n### Setting up TPUs on GCP\n\nYou will first need to launch a Virtual Machine (VM) on Google Cloud. Details about launching the VM can be found at the [Google Cloud Documentation](https://cloud.google.com/compute/docs/instances/create-start-instance).\n\nIn order to run training or eval on Cloud TPUs, you must set up the following variables based on your project, zone and GCS bucket appropriately. Please refer to the [Cloud TPU Quickstart](https://cloud.google.com/tpu/docs/quickstart) guide for more details.\n\n```sh\nexport PROJECT=your_project_name\nexport ZONE=your_project_zone\nexport BUCKET=gs://yourbucket/\nexport TPU_NAME=t5-tpu\nexport TPU_SIZE=v3-8\nexport DATA_DIR=\"${BUCKET}/your_data_dir\"\nexport MODEL_DIR=\"${BUCKET}/your_model_dir\"\n```\n\nPlease use the following command to create a TPU device in the Cloud VM.\n\n```sh\nctpu up --name=$TPU_NAME --project=$PROJECT --zone=$ZONE --tpu-size=$TPU_SIZE \\\n        --tpu-only --noconf\n```\n\n\n### Training\n\nIn the command below, we train a model on the [GLUE Benchmark](https://gluebenchmark.com/) MRPC task from scratch. You can change the `MIXTURE_NAME` gin parameter to use any of the tasks or mixtures provided in our package.\n\n```sh\nt5_mesh_transformer  \\\n  --tpu=\"${TPU_NAME}\" \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_file=\"models/bi_v1.gin\" \\\n  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\\n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\"\n```\n\nThe full list of tasks and mixtures can be obtained by running:\n\n```sh\npython -c \"import t5; print(t5.data.MixtureRegistry.names())\"\n```\n\nYou may also define additional tasks and mixtures in a new file and import it using the `--module_import` flag.\n\nAlternatively, you could train with a TSV file where each line is formatted as `<input>\\t<target>` (see [above](#using-a-tsv-file-directly)).\n\n### Fine-tuning\n\nIn order to fine-tune one of our [pre-trained models](#released-model-checkpoints), you need to pass the operative config of the pre-trained model to the training script. The operative config should be passed in as a `gin_file` flag. It specifies the model architecture and other hyperparameters. In addition, you need to specify the mixture to fine-tune on. For example, to fine-tune the T5-small model on the `glue_mrpc_v002` mixture, please run:\n\n```sh\nt5_mesh_transformer  \\\n  --tpu=\"${TPU_NAME}\" \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\\n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\nThe correct pre-trained checkpoint path is included in the operative config.\n\nYou may also define additional tasks and mixtures in a new file and import it using the `--module_import` flag.\n\nAlternatively, you could fine-tune with a TSV file where each line is formatted as `<input>\\t<target>` (see [above](#using-a-tsv-file-directly)). For example, you could try one of the paired translation datasets from WMT '19 [News Commentary 14](http://data.statmt.org/news-commentary/v14/training/) training set\n(e.g., [English-French](http://data.statmt.org/news-commentary/v14/training/news-commentary-v14.en-fr.tsv.gz)). When using a TSV file, you would replace the `MIXTURE_NAME` flag with:\n\n```sh\n--gin_param=\"utils.run.train_dataset_fn = @t5.models.mesh_transformer.tsv_dataset_fn\"\n--gin_param=\"tsv_dataset_fn.filename = 'gs:/path/to/tsv'\"\n```\n\nTo fine-tune with the same hyperparameters we used in the [paper][paper] (using a constant learning rate of 0.001), you can pass in this gin file which is included in the T5 package:\n\n```\n--gin_file=\"learning_rate_schedules/constant_0_001.gin\"\n```\n\nThe operative config for the pre-trained models are set so that there is effectively no limit on the number of train steps. If you'd like to train for a specific number of steps, you'll need to pass that in. Since the pre-trained model has already been trained for 1,000,000 steps, you should specify the total number of steps after pre-training and fine-tuning. For example, if you want to fine-tune for an additional 10,000 steps, you should pass\n\n```\n--gin_param=\"run.train_steps = 1010000\"\n```\n\nYou can also use a different batch size for fine-tuning. We set the batch size according to the total number of tokens in a batch. By default, a batch uses a sequence length of 512. To set the number of tokens in a batch, you should set\n\n```\n--gin_param = \"tokens_per_batch=1048576\"\n```\n\n### Eval\n\nIn order to evaluate a model in the T5 framework, you need to use the `eval.gin` file, specify the model directory, decoding method, and which checkpoint step(s) to evaluate. So, to evaluate on the GLUE MRPC task using beam search on *all* checkpoints, use the following command:\n\n```sh\nt5_mesh_transformer \\\n  --tpu=\"${TPU_NAME}\" \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --gin_file=\"${MODEL_DIR}/operative_config.gin\" \\\n  --t5_tfds_data_dir=${DATA_DIR} \\\n  --gin_file=\"eval.gin\" \\\n  --gin_file=\"beam_search.gin\" \\\n  --gin_param=\"run.dataset_split = 'validation'\" \\\n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_param=\"eval_checkpoint_step = 'all'\"\n```\n\nTo evaluate a specific checkpoint, simply set the `eval_checkpoint_step` parameter to appropriate checkpoint.\n\n```\n--gin_param=\"eval_checkpoint_step = 100000\"\n```\n\nYou can also use `greedy_decode.gin` or `sample_decode.gin` instead of `beam_search.gin` in the command above.\n\n\n### Decode\n\nIn order to produce predictions from a model in the T5 framework, you need to specify the model directory, decoding method, and which checkpoint step(s) to use for decoding. Assuming you have a text file of input sequences stored at `/path/to/inputs.txt`, an example command would be:\n\n```sh\nt5_mesh_transformer \\\n  --tpu=\"${TPU_NAME}\" \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --gin_file=\"${MODEL_DIR}/operative_config.gin\" \\\n  --gin_file=\"infer.gin\" \\\n  --gin_file=\"sample_decode.gin\" \\\n  --gin_param=\"input_filename = '/path/to/inputs.txt'\"\\\n  --gin_param=\"output_filename = '/tmp/outputs.txt'\"\\\n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\"\\\n  --gin_param=\"infer_checkpoint_step = 'all'\"\n```\n\nTo predict with a specific checkpoint, simply set the `infer_checkpoint_step` parameter to appropriate checkpoint.\n\n```\n--gin_param=\"infer_checkpoint_step = 100000\"\n```\n\nYou can also use `beam_search.gin` or `greedy_decode.gin` instead of `sample_decode.gin` in the command above.\n\n### Export\n\nYou may also want to export a [`SavedModel`](https://www.tensorflow.org/guide/saved_model), which is useful for serving your trained model, (e.g., when deploying with [ML Engine](https://cloud.google.com/ml-engine/docs/deploying-models) or in a [Docker](https://docs.docker.com) image).\n\n```sh\nt5_mesh_transformer \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --use_model_api \\\n  --mode=\"export_predict\" \\\n  --export_dir=\"/path/to/export/dir\"\n```\n\nThe command above exports the latest checkpoint in the model directory. To export a particular checkpoint, add the following flags:\n\n```sh\n  --checkpoint_mode=\"specific\" \\\n  --checkpoint_steps=1000000\n```\n\nThe [t5-deploy notebook](https://colab.research.google.com/github/google-research/text-to-text-transfer-transformer/blob/main/notebooks/t5-deploy.ipynb) demonstrates exporting a `SavedModel` and packaging it in a [Docker](https://docs.docker.com) image for serving.\n\n### GPU Usage\n\nIf you would like to use GPU instead of TPUs, you can modify the above commands by removing TPU-specific flags (`--tpu`, `--tpu_zone`, `--gcp_project`) and setting the gin params for `mesh_shape` and `mesh_devices` based on your desired setup.\n\nFor example, if your machine has access to 6 GPUs and you'd like to do 3-way model parallelism and 2-way data parallelism, the fine-tuning command above would become:\n\n```sh\nt5_mesh_transformer  \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.run.mesh_shape = 'model:3,batch:2'\" \\\n  --gin_param=\"utils.run.mesh_devices = ['gpu:0','gpu:1','gpu:2','gpu:3','gpu:4','gpu:5']\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\nWith a single GPU, the command is:\n\n```sh\nt5_mesh_transformer  \\\n  --model_dir=\"${MODEL_DIR}\" \\\n  --t5_tfds_data_dir=\"${DATA_DIR}\" \\\n  --gin_file=\"dataset.gin\" \\\n  --gin_param=\"utils.run.mesh_shape = 'model:1,batch:1'\" \\\n  --gin_param=\"utils.run.mesh_devices = ['gpu:0']\" \\\n  --gin_param=\"MIXTURE_NAME = 'glue_mrpc_v002'\" \\\n  --gin_file=\"gs://t5-data/pretrained_models/small/operative_config.gin\"\n```\n\n\n\n### Reproducing our experiments\n\nWe provide operative configs for all of the experiments in the [paper][paper] in [gs://t5-data/experiments](https://console.cloud.google.com/storage/browser/t5-data/experiments).\nThe `experiments` folder has different subdirectories corresponding to the different sections in our paper.\nFor example, [gs://t5-data/experiments/objectives](https://console.cloud.google.com/storage/browser/t5-data/experiments/objectives) contains the experiments from Section 3.3 (\"Unsupervised objectives\").\nEach subdirectory of the `objectives` folder contains operative configs for some particular experiment (where loosely speaking an \"experiment\" is one of the rows in one of the tables in our paper).\n\nLet's say you want to reproduce the results for the \"Prefix language modeling\" objective (the first row in Table 4).\nThe operative configs for that experiment live in [gs://t5-data/experiments/objectives/obj-prefix_lm](https://console.cloud.google.com/storage/browser/t5-data/experiments/objectives/obj-prefix_lm).\nIn the base directory, there is an operative config for pre-training the model ([gs://t5-data/experiments/objectives/obj-prefix_lm/operative_config.gin](https://console.cloud.google.com/storage/browser/t5-data/experiments/objectives/obj-prefix_lm/operative_config.gin)).\nThen, there are subdirectories for each of the downstream fine-tuning mixtures we consider, each of which has its own operative config (for example, [gs://t5-data/experiments/objectives/obj-prefix_lm/cnn_dailymail_v002/operative_config.gin](https://console.cloud.google.com/storage/browser/t5-data/experiments/objectives/obj-prefix_lm/cnn_dailymail_v002/operative_config.gin)).\nTo run this experiment, first pre-train a model with the pre-training operative config:\n\n```sh\nexport PRETRAIN_MODEL_DIR=\"${BUCKET}/obj-prefix_lm\"\nt5_mesh_transformer  \\\n  --tpu=\"${TPU_NAME}\" \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${PRETRAIN_MODEL_DIR}\" \\\n  --gin_file=\"gs://t5-data/experiments/objectives/obj-prefix_lm/operative_config.gin\" \\\n  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\\n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\"\n```\n\nThen, you can fine-tune the pre-trained model on CNN/Daily Mail like so:\n\n```sh\nexport FINETUNE_MODEL_DIR=\"${BUCKET}/obj-prefix_lm/cnn_dailymail_v002\"\nt5_mesh_transformer  \\\n  --tpu=\"${TPU_NAME}\" \\\n  --gcp_project=\"${PROJECT}\" \\\n  --tpu_zone=\"${ZONE}\" \\\n  --model_dir=\"${FINETUNE_MODEL_DIR}\" \\\n  --gin_file=\"gs://t5-data/experiments/objectives/obj-prefix_lm/cnn_dailymail_v002/operative_config.gin\" \\\n  --gin_param=\"init_checkpoint = '${PRETRAIN_MODEL_DIR}/model.ckpt-524288'\" \\\n  --gin_param=\"utils.tpu_mesh_shape.model_parallelism = 1\" \\\n  --gin_param=\"utils.tpu_mesh_shape.tpu_topology = '${TPU_SIZE}'\"\n```\n\n### Useful Options\n\nSome training variants need multiple flags to be set at the same time. For each\nof the below variants, add the group of flags to\n`./third_party/py/t5/google/scripts/run_finetune.sh`.\n\n*Deterministic training*\n\n```sh\n  --train_gin_param=\"mesh_train_dataset_fn.seed=${SEED}\" \\\n  --train_gin_param=\"utils.run.skip_seen_data = True\" \\\n```\n\n*Language model*\n\n```sh\n  --objective=\"lm\" \\\n  --train_gin_param=\"utils.run.model_type = \\\"lm\\\"\" \\\n```\n\n## Released Model Checkpoints\n\nWe have released the following checkpoints for pre-trained models described in our [paper][paper]:\n\n* **T5-Small** (60 million parameters): [gs://t5-data/pretrained_models/small](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/small/)\n* **T5-Base** (220 million parameters): [gs://t5-data/pretrained_models/base](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/base/)\n* **T5-Large** (770 million parameters): [gs://t5-data/pretrained_models/large](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/large/)\n* **T5-3B** (3 billion parameters): [gs://t5-data/pretrained_models/3B](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/3B/)\n* **T5-11B** (11 billion parameters): [gs://t5-data/pretrained_models/11B](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/11B/)\n\nSee [here][released_checkpoints] for a list of additional experimental pre-trained model checkpoints.\n\n# How to Cite\nIf you extend or use this work, please cite the [paper][paper] where it was introduced:\n\n```bibtex\n@article{2020t5,\n  author  = {Colin Raffel and Noam Shazeer and Adam Roberts and Katherine Lee and Sharan Narang and Michael Matena and Yanqi Zhou and Wei Li and Peter J. Liu},\n  title   = {Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer},\n  journal = {Journal of Machine Learning Research},\n  year    = {2020},\n  volume  = {21},\n  number  = {140},\n  pages   = {1-67},\n  url     = {http://jmlr.org/papers/v21/20-074.html}\n}\n```\n\n[paper]: https://arxiv.org/abs/1910.10683\n[released_checkpoints]: https://github.com/google-research/text-to-text-transfer-transformer/blob/main/released_checkpoints.md\n[beam]: https://beam.apache.org\n[c4]: https://www.tensorflow.org/datasets/catalog/c4\n[cc]: https://commoncrawl.org\n[dataflow]: https://cloud.google.com/dataflow/\n[gcs]: https://www.tensorflow.org/datasets/gcs\n[gcd]: https://cloud.google.com/dataflow/\n[gin]: https://github.com/google/gin-config\n[mtft]: https://github.com/tensorflow/mesh/tree/master/mesh_tensorflow/transformer\n[tfds]: https://www.tensorflow.org/datasets\n[tfds_beam]: https://www.tensorflow.org/datasets/beam_datasets\n"
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0322265625,
          "content": "[pytest]\npython_files = *_test.py"
        },
        {
          "name": "released_checkpoints.md",
          "type": "blob",
          "size": 4.724609375,
          "content": "# Experimental T5 Pre-Trained Model Checkpoints\n\nBelow are some pointers to checkpoints for experimental models we have trained after writing our [paper][paper].\nWe have found that these models can produce better performance in some cases.\nThese checkpoints are not officially supported - use at your own risk!\n\n### t5.1.1.*\n\nSimilar to the models described in our [paper][paper], with the following improvements:\n\n*  GEGLU activation in feed-forward hidden layer, rather than ReLU - see https://arxiv.org/abs/2002.05202 .\n\n* Dropout was turned off in pre-training (quality win).  Dropout should be re-enabled during fine-tuning.\n\n* Pre-trained on C4 only without mixing in the downstream tasks.\n\n* no parameter sharing between embedding and classifier layer\n\n* \"xl\" and \"xxl\" replace \"3B\" and \"11B\".  The model shapes are a bit different - larger d_model and smaller num_heads and d_ff.\n\nThe checkpoints are located here:\n\n* **t5.1.1.small** (~77 million parameters): [gs://t5-data/pretrained_models/t5.1.1.small](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.small/)\n* **t5.1.1.base** (~250 million parameters): [gs://t5-data/pretrained_models/t5.1.1.base](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.base/)\n* **t5.1.1.large** (~800 million parameters): [gs://t5-data/pretrained_models/t5.1.1.large](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.large/)\n* **t5.1.1.xl** (~3 billion parameters): [gs://t5-data/pretrained_models/t5.1.1.xl](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.xl/)\n* **t5.1.1.xxl** (~11 billion parameters): [gs://t5-data/pretrained_models/t5.1.1.xxl](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.xxl/)\n\n### LM-Adapted: t5.1.1.lm100k\n\nThese \"LM adapted\" models are initialized from t5.1.1 (above) and train for an\nadditional 100K steps on the LM objective discussed in the [T5 paper][paper].\nThis adaptation improves the ability of the model to be used for [prompt\ntuning](https://arxiv.org/abs/2104.08691).\n\n* **t5.1.1.lm100k.small** (~77 million parameters): [gs://t5-data/pretrained_models/t5.1.1.lm100k.small](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.lm100k.small/)\n* **t5.1.1.lm100k.base** (~250 million parameters): [gs://t5-data/pretrained_models/t5.1.1.lm100k.base](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.lm100k.base/)\n* **t5.1.1.lm100k.large** (~800 million parameters): [gs://t5-data/pretrained_models/t5.1.1.lm100k.large](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.lm100k.large/)\n* **t5.1.1.lm100k.xl** (~3 billion parameters): [gs://t5-data/pretrained_models/t5.1.1.lm100k.xl](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.lm100k.xl/)\n* **t5.1.1.lm100k.xxl** (~11 billion parameters): [gs://t5-data/pretrained_models/t5.1.1.lm100k.xxl](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.1.lm100k.xxl/)\n\n### Talking Heads: t5.1.th.*\n\nVariation on the t5.1.1 models using talking-heads attention (https://arxiv.org/abs/2003.02436).\n\n* **t5.1.th.base** (~250 million parameters): [gs://t5-data/pretrained_models/t5.1.th.base](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.th.base/)\n* **t5.1.th.large** (~800 million parameters): [gs://t5-data/pretrained_models/t5.1.th.large](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.th.large/)\n\n[paper]: https://arxiv.org/abs/1910.10683\n\n### First Layers Narrow: t5.1.n4w10.*\n\nVariation on the t5.1.1 models.  Each of the encoder and decoder consists of 14\nlayer groups, with the last ten twice as \"wide\" as the first four.  (double d_ff\nand num_heads). Parameter count and computation are kept similar to the\ncorresponding t5.1.1 models.  For the base model, this increases the number of\nlayers, resulting in better quality, and for the large and xl models, this\ndecreases the number of layers from 24 to 14, decreasing quality, but also\ndecreasing the amount of communication necessary for model parallelism.\n\n* **t5.1.n4w10.base** (~250 million parameters): [gs://t5-data/pretrained_models/t5.1.n4w10.base](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.n4w10.base/)\n* **t5.1.n4w10.large** (~800 million parameters): [gs://t5-data/pretrained_models/t5.1.n4w10.large](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.n4w10.large/)\n* **t5.1.n4w10.xl** (~3 billion parameters): [gs://t5-data/pretrained_models/t5.1.n4w10.xl](https://console.cloud.google.com/storage/browser/t5-data/pretrained_models/t5.1.n4w10.xl/)\n\n\n\n[paper]: https://arxiv.org/abs/1910.10683\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.1787109375,
          "content": "# Copyright 2024 The T5 Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Install T5.\"\"\"\n\nimport os\nimport sys\nimport setuptools\n\n# To enable importing version.py directly, we add its path to sys.path.\nversion_path = os.path.join(os.path.dirname(__file__), 't5')\nsys.path.append(version_path)\nfrom version import __version__  # pylint: disable=g-import-not-at-top\n\n# Get the long description from the README file.\nwith open('README.md') as fp:\n  _LONG_DESCRIPTION = fp.read()\n\nsetuptools.setup(\n    name='t5',\n    version=__version__,\n    description='Text-to-text transfer transformer',\n    long_description=_LONG_DESCRIPTION,\n    long_description_content_type='text/markdown',\n    author='Google Inc.',\n    author_email='no-reply@google.com',\n    url='http://github.com/google-research/text-to-text-transfer-transformer',\n    license='Apache 2.0',\n    packages=setuptools.find_packages(),\n    package_data={\n        '': ['*.gin'],\n    },\n    scripts=[],\n    install_requires=[\n        'absl-py',\n        'babel',\n        'editdistance',\n        'immutabledict',\n        'gin-config',\n        (\n            'mesh-tensorflow[transformer] @'\n            ' git+https://github.com/tensorflow/mesh#egg=mesh-tensorflow'\n        ),\n        'nltk',\n        'numpy',\n        # TODO(kehanghan): Remove once test_log_csv can use new pandas APIs.\n        'pandas<2.0.0',\n        'rouge-score>=0.1.2',\n        'sacrebleu',\n        'scikit-learn',\n        'scipy',\n        'sentencepiece',\n        'seqio-nightly',\n        'six>=1.14',  # TODO(adarob): Remove once rouge-score is updated.\n        'tfds-nightly',\n        'transformers>=2.7.0',\n    ],\n    extras_require={\n        'gcp': [\n            'gevent',\n            'google-api-python-client',\n            'google-compute-engine',\n            'google-cloud-storage',\n            'oauth2client',\n        ],\n        'cache-tasks': ['apache-beam'],\n        'test': ['pytest', 'torch'],\n    },\n    entry_points={\n        'console_scripts': [\n            (\n                't5_mesh_transformer ='\n                ' t5.models.mesh_transformer_main:console_entry_point'\n            ),\n            (\n                't5_cache_tasks ='\n                ' seqio.scripts.cache_tasks_main:console_entry_point'\n            ),\n            (\n                't5_inspect_tasks ='\n                ' seqio.scripts.inspect_tasks_main:console_entry_point'\n            ),\n        ],\n    },\n    classifiers=[\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: Apache Software License',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n    ],\n    keywords='text nlp machinelearning',\n)\n"
        },
        {
          "name": "t5",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}