{
  "metadata": {
    "timestamp": 1736561036151,
    "page": 808,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hylang/hy",
      "stars": 5168,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".git\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.080078125,
          "content": "ce6d23806ac4c91e678c34f24d0010829fbbfc94\n1b8d0b4d9670ecbca944decc68e08643500ad3c7\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.103515625,
          "content": "*.pyc\n.*.sw?\n*hy*egg*\n*pyreadline*egg*\n.tox\n*pycache*\ndist\n.coverage\nbuild/\n/.cache\n/.pytest_cache\n/.eggs\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.7978515625,
          "content": "Paul R. Tagliamonte <paultag@debian.org> Paul Tagliamonte <paultag@debian.org>\nPaul R. Tagliamonte <paultag@debian.org> Paul Tagliamonte <tag@pault.ag>\nPaul R. Tagliamonte <paultag@debian.org> Paul Tagliamonte <paultag@sunlightfoundation.com>\nPaul R. Tagliamonte <paultag@debian.org> Paul Tagliamonte <paultag@ubuntu.com>\nMorten Linderud <morten@linderud.pw> Foxboron <morten@linderud.pw>\nJames King <james@agentultra.com> agentultra <james@agentultra.com>\nJames King <james@agentultra.com> J Kenneth King <james@agentultra.com>\nAbhishek L <abhishek.lekshmanan@gmail.com> <abhishekl.2006@gmail.com>\nBob Tolbert <bob@tolbert.org> Bob Tolbert <bob@eyesopen.com>\nGuillermo Vaya <guivaya@gmail.com> Guillermo Vaya <guillermo.vaya@gigas.com>\nGergely Nagy <algernon@balabit.hu> Gergely Nagy <algernon@madhouse-project.org>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 4.40234375,
          "content": "* Paul Tagliamonte <paultag@gmail.com>\n* Thomas Mashek <thomas@thescoundrels.net>\n* Amrut Joshi <amrut.joshi@gmail.com>\n* Christopher Allan Webber <cwebber@dustycloud.org>\n* Will Kahn-Greene <willkg@bluesock.org>\n* James King <james@agentultra.com>\n* Julien Danjou <julien@danjou.info>\n* Nicolas Dandrimont <nicolas.dandrimont@crans.org>\n* Gergely Nagy <algernon@madhouse-project.org>\n* Konrad Hinsen <konrad.hinsen@fastmail.net>\n* Vladimir Gorbunov <vsg@suburban.me>\n* John Jacobsen <john@mail.npxdesigns.com>\n* Roger Erens <roger.erens@e-s-c.biz>\n* Thomas Ballinger <thomasballinger@gmail.com>\n* Morten Linderud <mcfoxax@gmail.com>\n* Guillermo Vayá <guivaya@gmail.com>\n* Bob Tolbert <bob@tolbert.org>\n* Ralph Möritz <ralph.moeritz@outlook.com>\n* Josh McLaughlin <josh@phear.cc>\n* Berker Peksag <berker.peksag@gmail.com>\n* Henrique Carvalho Alves <hcarvalhoalves@gmail.com>\n* Joe Hakim Rahme <joehakimrahme@gmail.com>\n* Kenan Bölükbaşı <kenanbolukbasi@gmail.com>\n* Abhishek Lekshmanan <abhishek.lekshmanan@gmail.com>\n* Christopher Browne <cbbrowne@ca.afilias.info>\n* Clinton N. Dreisbach <crnixon@gmail.com>\n* Duncan McGreggor <duncan.mcgreggor@rackspace.com>\n* E. Anders Lannerback <anders@lannerback.net>\n* Jack Laxson <jackjrabbit+github@gmail.com>\n* Johan Euphrosine <proppy@google.com>\n* Kevin Zita <kzita@kent.edu>\n* Matt Fenwick <mfenwick100@gmail.com>\n* Sean B. Palmer <sean@miscoranda.com>\n* Thom Neale <twneale@gmail.com>\n* Tuula Turto <tuula.turto@oktaeder.net>\n* Vasudev Kamath <kamathvasudev@gmail.com>\n* Yuval Langer <yuval.langer@gmail.com>\n* Fatih Kadir Akın <fka@fatihak.in>\n* Jack Hooper <contact.jhooper@gmail.com>\n* Brian McKenna <brian@brianmckenna.org>\n* Halit Alptekin <info@halitalptekin.com>\n* Richard Parsons <richard.lee.parsons@gmail.com>\n* Sangho Na <sangho.nah@gmail.com>\n* Ryan Gonzalez <rymg19@gmail.com>\n* Brendan Curran-Johnson <brendan@bcjbcj.ca>\n* Ivan Kozik <ivan@ludios.org>\n* Allison Kaptur <allison.kaptur@gmail.com>\n* Matthew Wampler-Doty <matthew.wampler.doty@gmail.com>\n* Tianon Gravi <admwiggin@gmail.com>\n* Ian Denhardt <ian@zenhack.net>\n* Ruslan Prokopiev <bismigalis@gmail.com>\n* Alexander Artemenko <svetlyak.40wt@gmail.com>\n* Ed Singleton <singletoned@gmail.com>\n* Kevin Yap <me@kevinyap.ca>\n* Matthías Páll Gissurarson <mpg@mpg.is>\n* Nathan Woodrow <woodrow.nathan@gmail.com>\n* Adam Schwalm <adamschwalm@gmail.com>\n* Ilia Choly <ilia.choly@gmail.com>\n* Shrayas Rajagopal <shrayasr@gmail.com>\n* Shenyang Zhao <dev@zsy.im>\n* Zack M. Davis <code@zackmdavis.net>\n* Nicolas Pénet <z.nicolas@gmail.com>\n* Adrià Garriga Alonso <adria@monkingme.com>\n* Antony Woods <antony@teamwoods.org>\n* Matthew Egan Odendahl <github.gilch@xoxy.net>\n* Tim Martin <tim@asymptotic.co.uk>\n* Johnathon Mlady <john@digitalvectorz.com>\n* Andrew Savchyn <dev@scorpil.com>\n* Lev Kravinsky <kravinskylev@gmail.com>\n* Luna Lunapiena <lunacodes@gmail.com>\n* Jakub Wilk <jwilk@jwilk.net>\n* Kodi Arfer <git@arfer.net>\n* Karan Sharma <karansharma1295@gmail.com>\n* Sergey Sobko <s.sobko@profitware.ru>\n* Philip Xu <pyx@xrefactor.com>\n* Charles de Lacombe <ealhad@mail.com>\n* John Patterson <john@johnppatterson.com>\n* Kai Lüke <kailueke@riseup.net>\n* Neil Lindquist <archer1mail@gmail.com\n* Hikaru Ikuta <woodrush924@gmail.com>\n* David Schaefer <david.schaefe@gmail.com>\n* Jordan Danford <jordandanford@gmail.com>\n* Andrew Silva <asilva@law.harvard.edu>\n* Zaheer Soebhan <z.soebhan@gmail.com>\n* Rob Day <rkd@rkd.me.uk>\n* Eric Kaschalk <ekaschalk@gmail.com>\n* Yoan Tournade <yoan@ytotech.com>\n* Simon Gomizelj <simon@vodik.xyz>\n* Yigong Wang <wang@yigo.ng>\n* Oskar Kvist <oskar.kvist@gmail.com>\n* Brandon T. Willard <brandonwillard@gmail.com>\n* Andrew Miller <nixy@nixy.moe>\n* Tristan de Cacqueray <tdecacqu@redhat.com>\n* Sören Tempel <soeren@soeren-tempel.net>\n* Noah Snelson <noah.snelson@protonmail.com>\n* Adam Porter <adam@alphapapa.net>\n* Gábor Lipták <gliptak@gmail.com>\n* Raymund MARTINEZ <zhaqenl@protonmail.com>\n* Zepeng Zhang <redraiment@gmail.com>\n* Joseph Egan <joseph.s.egan@gmail.com>\n* Xi Jin <xij@usc.edu>\n* Alexey Yurchenko <homonoidian@yandex.ru>\n* Allie Jo Casey <allie.jo.casey@gmail.com>\n* Joshua Munn <public@elysee-munn.family>\n* Peter Andreev <appa@gmx.co.uk>\n* Sunjay Cauligi <scauligi@eng.ucsd.edu>\n* David Tscheppen <david.tscheppen@gmail.com>\n* Dmitry Ivanov <dmitry.ivanov@divanov.eu>\n* Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\n* Joseph LaFreniere <joseph@lafreniere.xyz>\n* Daniel Tan <danieltanfh95@gmail.com>\n* Zhan Tang <tz59pk@gmail.com>\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 7.3876953125,
          "content": "Contributor guidelines\n======================\n\nContributions are welcome and greatly appreciated. Every little bit\nhelps in making Hy better. Potential contributions include:\n\n- Reporting and fixing bugs.\n- Requesting features.\n- Adding features.\n- Writing tests for outstanding bugs or untested features.\n\n  - You can mark tests that Hy can't pass yet as xfail_.\n\n- Cleaning up the code.\n- Improving the documentation.\n- Answering questions on `the Github Discussions page`_ or\n  `Stack Overflow`_.\n- Evangelizing for Hy in your organization, user group, conference, or\n  bus stop.\n\nIssues\n~~~~~~\n\nIn order to report bugs or request features, search the `issue tracker`_ to\ncheck for a duplicate. (If you're reporting a bug, make sure you can\nreproduce it with the very latest, bleeding-edge version of Hy from\nthe ``master`` branch on GitHub. Bugs in stable versions of Hy are\nfixed on ``master`` before the fix makes it into a new stable\nrelease.) If there aren't any duplicates, then you can make a new issue.\n\nIt's totally acceptable to create an issue when you're unsure whether\nsomething is a bug or not. We'll help you figure it out.\n\nUse the same issue tracker to report problems with the documentation.\n\nPull requests\n~~~~~~~~~~~~~\n\nSubmit proposed changes to the code or documentation as pull requests\n(PRs) on GitHub_. Git can be intimidating and confusing to the\nuninitiated. `This getting-started guide`_ may be helpful. However, if\nyou're overwhelmed by Git, GitHub, or the rules below, don't sweat\nit. We want to keep the barrier to contribution low, so we're happy to\nhelp you with these finicky things or do them for you if necessary.\n\nDeciding what to do\n-------------------\n\nIf you're proposing a major change to the Hy language, or you're\nunsure of the proposed change, create an issue to discuss it before\nyou write any code. This will allow others to give feedback on your\nidea, and it can avoid wasted work.\n\nCommit formatting\n-----------------\n\nMany PRs are small enough that only one commit is necessary, but\nbigger ones should be organized into logical units as separate\ncommits. PRs should be free of merge commits and commits that fix or\nrevert other commits in the same PR (``git rebase`` is your friend).\n\nAvoid committing spurious whitespace changes.\n\nDon't commit comments tagged with things like \"FIXME\", \"TODO\", or\n\"XXX\". Ideas for how the code or documentation should change go in the\nissues list, not the code or documentation itself.\n\nThe first line of a commit message should describe the overall change in 50\ncharacters or less. If you wish to add more information, separate it from the\nfirst line with a blank line.\n\nTesting\n-------\n\nTests can be run by executing ``pytest`` in the root of this repository.\n\nNew features and bug fixes should be tested. If you've caused an\nxfail_ test to start passing, remove the xfail mark. If you're\ntesting a bug that has a GitHub issue, include a comment with the URL\nof the issue.\n\nNo PR may be merged if it causes any tests to fail.\nThe byte-compiled versions of the test files can be purged using ``git clean -dfx tests/``.\nIf you want to run the tests while skipping the slow ones in ``test_bin.py``, use ``pytest --ignore=tests/test_bin.py``.\n\nDocumentation\n-------------\n\nGenerally, new features deserve coverage in the manual, either by editing the manual files directly or by changing docstrings that get included in the manual. To render the manual, install its dependencies with ``pip install -r requirements-dev.txt`` and then use the command ``cd docs; sphinx-build . _build -b html``.\n\nNEWS and AUTHORS\n----------------\n\nIf you're making user-visible changes to the code, add one or more\nitems describing them to the NEWS file.\n\nFinally, add yourself to the AUTHORS file (as a separate commit): you\ndeserve it. :)\n\nThe PR itself\n-------------\n\nPRs should ask to merge a new branch that you created for the PR into\nhylang/hy's ``master`` branch, and they should have as their origin\nthe most recent commit possible.\n\nIf the PR fulfills one or more issues, then the body text of the PR\n(or the commit message for any of its commits) should say \"Fixes\n#123\" or \"Closes #123\" for each affected issue number. Use this exact\n(case-insensitive) wording, because when a PR containing such text is\nmerged, GitHub automatically closes the mentioned issues, which is\nhandy. Conversely, avoid this exact language if you want to mention\nan issue without closing it (because e.g. you've partly but not\nentirely fixed a bug).\n\nThere are two situations in which a PR is allowed to be merged:\n\n1. When it is approved by **two** members of Hy's core team other than the PR's\n   author. Changes to the documentation, or trivial changes to code, need only\n   **one** approving member.\n2. When the PR is at least **three days** old and **no** member of the Hy core\n   team has expressed disapproval of the PR in its current state.\n\nAnybody on the Hy core team may perform the merge. Merging should create a merge\ncommit (don't squash unnecessarily, because that would remove separation between\nlogically separate commits, and don't fast-forward, because that would throw\naway the history of the commits as a separate branch), which should include the\nPR number in the commit message. The typical workflow for this is to run the\nfollowing commands on your own machine, then press the merge button on GitHub.\n\n.. code-block:: console\n\n    $ git checkout master\n    $ git pull\n    $ git checkout $PR_BRANCH\n    $ git fetch\n    $ get reset --hard $REMOTE/$PR_BRANCH\n    $ git rebase master\n    $ git push -f\n\nContributor Code of Conduct\n===========================\n\nAs contributors and maintainers of this project, we pledge to respect\nall people who contribute through reporting issues, posting feature\nrequests, updating documentation, submitting pull requests or patches,\nand other activities.\n\nWe are committed to making participation in this project a\nharassment-free experience for everyone, regardless of level of\nexperience, gender, gender identity and expression, sexual\norientation, disability, personal appearance, body size, race,\nethnicity, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of\nsexual language or imagery, derogatory comments or personal attacks,\ntrolling, public or private harassment, insults, or other\nunprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit,\nor reject comments, commits, code, wiki edits, issues, and other\ncontributions that are not aligned to this Code of Conduct. Project\nmaintainers who do not follow the Code of Conduct may be removed from\nthe project team.\n\nThis code of conduct applies both within project spaces and in public\nspaces when an individual is representing the project or its\ncommunity.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior\nmay be reported by opening an issue or contacting one or more of the\nproject maintainers.\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_,\nversion 1.1.0, available at\nhttp://contributor-covenant.org/version/1/1/0/.\n\n.. _Contributor Covenant: http://contributor-covenant.org\n.. _issue tracker: https://github.com/hylang/hy/issues\n.. _GitHub: https://github.com/hylang/hy\n.. _This getting-started guide: http://rogerdudler.github.io/git-guide/\n.. _the Github Discussions page: https://github.com/hylang/hy/discussions\n.. _Stack Overflow: https://stackoverflow.com/questions/tagged/hy\n.. _xfail: https://docs.pytest.org/en/latest/skipping.html#mark-a-test-function-as-expected-to-fail\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.169921875,
          "content": "# Base image\n#\n# VERSION   0.2\nFROM        python:3\nMAINTAINER  Paul R. Tagliamonte <paultag@hylang.org>\n\nADD . /opt/hylang/hy\nRUN pip3 install -e /opt/hylang/hy\n\nCMD [\"hy\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.23828125,
          "content": "Copyright 2025 the authors.\nPortions of setup.py, copyright 2016 Jason R Coombs <jaraco@jaraco.com>.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\nPortions of hy/contrib/pprint.hy copyright 2020 Python Software Foundation,\nlicensed under the Python Software Foundation License Version 2.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.091796875,
          "content": "include AUTHORS\ninclude LICENSE\ninclude NEWS.rst\ninclude README.md\ninclude fastentrypoints.py\n"
        },
        {
          "name": "NEWS.rst",
          "type": "blob",
          "size": 61.00390625,
          "content": ".. default-role:: code\n\nUnreleased\n======================================================================\n\nSupports Python 3.9 – Python 3.x\n\nNew Features\n------------------------------\n* New pragma `hy`.\n\n1.0.0 (\"Afternoon Review\", released 2024-09-22)\n======================================================================\n\nSupports Python 3.8 – Python 3.13\n\nSee also `the announcement post for this release\n<https://github.com/hylang/hy/discussions/2608>`_.\n\nBug Fixes\n------------------------------\n* Fixed a crash on Python 3.12.6.\n* Keyword objects can now be compared to each other with `<` etc.\n* The order of evaluation in multi-item `with`\\s now matches that of\n  nested one-item `with`\\s.\n* Fixed a bug in which the REPL misinterpreted the symbol `pass`.\n\n0.29.0 (released 2024-05-20)\n=============================\n\nRemovals\n------------------------------\n* `hy.disassemble` has been removed.\n* `(defn/a …)` is now `(defn :async …)`.\n* `(fn/a …)` is now `(fn :async …)`.\n* `(with/a […] …)` is now `(with [:async …] …)`.\n\n  * As with `for`, `:async` must precede each name to be bound\n    asynchronously, because you can mix synchronous and asynchronous\n    types.\n\n* `(yield-from …)` is now `(yield :from …)`.\n\nNew Features\n------------------------------\n* You can now set `repl-ps1` and `repl-ps2` in your `HYSTARTUP` to customize\n  `sys.ps1` and `sys.ps2` for the Hy REPL.\n\nBug Fixes\n------------------------------\n* Tracebacks now point to the correct code in more cases.\n* `help` should no longer crash when objects are missing docstrings.\n* `hy -i < script.hy` now executes `script.hy` inside the REPL environment,\n  like Python.\n\n0.28.0 (released 2024-01-05)\n=============================\n\nRemovals\n------------------------------\n* `doc` has been removed. Use `(help (get-macro foo))` or `(help\n  (get-macro :reader foo))` instead.\n* `delmacro` has been removed. Use `(eval-when-compile (del (get\n  _hy_macros (hy.mangle \"foo\"))))` instead.\n* `hy.reserved` has been removed. Use `(.keys (builtins._hy_macros))`\n  or Python's built-in `keyword` module instead.\n* The environment variables `HY_DEBUG` and `HY_FILTER_INTERNAL_ERRORS`\n  have been replaced with `HY_SHOW_INTERNAL_ERRORS`.\n\nOther Breaking Changes\n------------------------------\n* `defmacro` and `require` can now define macros locally instead of\n  only module-wide.\n* When a macro is `require`\\d from another module, that module is no\n  longer implicitly included when checking for further macros in\n  the expansion.\n* `hy.M` has been renamed to `hy.I`.\n* `hy.eval` has been overhauled to be more like Python's `eval`. It\n  also has a new parameter `macros`.\n* `hy.macroexpand` and `hy.macroexpand-1` have been overhauled and\n  generalized to include more of the features of `hy.eval`.\n* `hy` now only implicitly launches a REPL if standard input is a TTY.\n* `hy -i` has been overhauled to work as a flag like `python3 -i`.\n* `hy2py` now requires `-m` to specify modules, and uses\n  the same `sys.path` rules as Python when parsing a module\n  vs a standalone script.\n* New macro `deftype`.\n* New macro `get-macro`.\n* New macro `local-macros`.\n\nNew Features\n------------------------------\n* New syntax `(hy.R.aaa/bbb.m …)` for calling the macro `m` from the\n  module `aaa.bbb` without bringing `m` or `aaa.bbb` into scope.\n* `nonlocal` now also works for globally defined names.\n* `defn`, `defn/a`, and `defclass` now support type parameters.\n* `HyReader` now has an optional parameter to install existing\n  reader macros from the calling module.\n* New pragma `warn-on-core-shadow`.\n\nMisc. Improvements\n------------------------------\n* Some syntax errors raised by core macros now have more informative\n  messages.\n* Logical operators now compile to simpler Python code in some cases.\n\nBug Fixes\n------------------------------\n* Implicit returns are now disabled in async generators.\n* Fixed parsing of infinite and NaN imaginary literals with an\n  uppercase \"J\".\n* Double quotes inside of bracketed f-strings are now properly handled.\n* Fixed incomplete recognition of macro calls with a unary dotted\n  head like `((. defn) f [])`.\n* `~@ #*` now produces a syntax error instead of a nonsensical result.\n* `nonlocal` now works for top-level `let`-bound names.\n* `require` now warns when you shadow a core macro, like `defmacro`\n  already did.\n* Fixed `hy.eval` failing on `defreader` or `require` forms that\n  install a new reader.\n* The parameter `result-ok` that was mistakenly included in the\n  signature of `hy.macroexpand` is now gone.\n* `hy -i` with a filename now skips shebang lines.\n\n0.27.0 (released 2023-07-06)\n=============================\n\nRemovals\n------------------------------\n* Python 3.7 is no longer supported.\n\nOther Breaking Changes\n------------------------------\n* Reader macros now always read a full identifier after the initial\n  `#`. Thus, `#*foo` is now parsed as a call to the reader macro named\n  `*foo`; to unpack a variable named `foo`, say `#* foo`.\n* The names of reader macros names are no longer mangled.\n* Question marks (`?`) are no longer mangled specially, so `foo?` now\n  mangles to `hyx_fooXquestion_markX` instead of `is_foo`.\n* `hy2py`'s recursive mode now expects a module name as input, not any\n  old directory. You must be in the parent directory of the module\n  directory.\n\nNew Features\n------------------------------\n* Python 3.12 is now supported.\n* New built-in object `hy.M` for easy imports in macros.\n* `cut` now has a function version in `hy.pyops`.\n* The `py` macro now implicitly parenthesizes the input code, so\n  Python's indentation restrictions don't apply.\n* `try` no longer requires `except`, `except*`, or `finally`, and it\n  allows `else` even without `except` or `except*`.\n* `nonlocal` and `global` can now be called with no arguments, in\n  which case they're no-ops.\n* For easier reading, `hy --spy` now prints a delimiter after the\n  Python equivalent of your code, before the result of evaluating the\n  code.\n\nBug Fixes\n------------------------------\n* Fixed an installation failure in some situations when version lookup\n  fails.\n* Fixed some bugs with traceback pointing.\n* Fixed some bugs with escaping in bracket f-strings\n* The parser no longer looks for shebangs in the REPL or `hy -c`.\n* `require` with relative module names should now work correctly with\n  `hy -m`, as well as `hy2py`'s recursive mode.\n* `hy.models.Symbol` no longer allows constructing a symbol beginning\n  with `#`.\n\n0.26.0 (released 2023-02-08)\n=============================\n\nRemovals\n------------------------------\n* Coloring error messages and Python representations for models is no\n  longer supported. (Thus, Hy no longer depends on `colorama`.)\n\nOther Breaking Changes\n------------------------------\n* Various warts have been smoothed over in the syntax of `'`,\n  \\`, `~`, and `~@`:\n\n  * Whitespace is now allowed after these syntactic elements. Thus one\n    can apply `~` to a symbol whose name begins with \"@\".\n  * \\` and `~` are no longer allowed in identifiers. (This was already\n    the case for `'`.)\n  * The bitwise NOT operator `~` has been renamed to `bnot`.\n\n* Dotted identifiers like `foo.bar` and `.sqrt` now parse as\n  expressions (like `(. foo bar)` and `(. None sqrt)`) instead of\n  symbols. Some odd cases like `foo.` and `foo..bar` are now\n  syntactically illegal.\n* New macro `do-mac`.\n* New macro `pragma` (although it doesn't do anything useful yet).\n* `hy.cmdline.HyREPL` is now `hy.REPL`.\n* Redundant scripts named `hy3`, `hyc3`, and `hy2py3` are no longer\n  installed. Use `hy`, `hyc`, and `hy2py` instead.\n\nNew Features\n------------------------------\n* Pyodide is now officially supported.\n* `.`, `..`, etc. are now usable as ordinary symbols (with the\n  remaining special rule that `...` compiles to `Ellipsis`).\n* On Pythons ≥ 3.7, Hy modules can now be imported from ZIP\n  archives in the same way as Python modules, via `zipimport`_.\n* `hy2py` has a new command-line option `--output`.\n* `hy2py` can now operate recursively on a directory.\n\nBug Fixes\n------------------------------\n* `hy.REPL` now restores the global values it changes (such as\n  `sys.ps1`) after `hy.REPL.run` terminates.\n* `hy.REPL` no longer mixes up Hy's and Python's Readline histories\n  when run inside Python's REPL.\n* Fixed `hy.repr` of non-compilable uses of sugared macros, such as\n  `(quote)` and `(quote 1 2)`.\n\n.. _zipimport: https://docs.python.org/3.11/library/zipimport.html\n\n0.25.0 (released 2022-11-08)\n==============================\n\nBreaking Changes\n------------------------------\n* `dfor` no longer requires brackets around its final arguments, so\n  `(dfor x (range 5) [x (* 2 x)])` is now `(dfor x (range 5) x (* 2\n  x))`.\n* `except*` (PEP 654) is now recognized in `try`, and a placeholder\n  macro for `except*` has been added.\n\nBug Fixes\n------------------------------\n* `__file__` should now be set the same way as in Python.\n* `\\N{…}` escape sequences are now recognized in f-strings.\n* Fixed a bug with `python -O` where assertions were still partly\n  evaluated.\n* Fixed `hy.repr` of `slice` objects with non-integer arguments.\n\nNew Features\n------------------------------\n* Python 3.11 is now supported.\n\nMisc. Improvements\n------------------------------\n* `hyc` now requires a command-line argument.\n* `hyc` prints each path it writes bytecode to, and its messages now\n  go to standard error instead of standard output.\n\n0.24.0 (released 2022-06-23)\n==============================\n\nThis release is a direct successor to 1.0a4. We've returned to 0.*\nversion numbers to work around the inflexibility of PyPI and pip\nregarding the default version to install. (We skipped some version\nnumbers because this release is several major releases since 0.20.0.)\nSorry for the mess.\n\nRemovals\n------------------------------\n* Tag macros have been removed. Use reader macros instead, rewriting\n  `(defmacro \"#foo\" [arg] …)` as\n  `(defreader foo (setv arg (.parse-one-form &reader)) …)`.\n* `with-decorator` and `#@` have been removed in favor of decorator\n  lists (see below).\n* Fraction literals have been removed. Use `fractions.Fraction`\n  instead.\n* Unrecognized backslash escapes in string and byte literals are\n  no longer allowed. (They've been `deprecated in Python since 3.6\n  <https://docs.python.org/3.6/reference/lexical_analysis.html#index-23>`_.)\n* A bare `#` is no longer a legal symbol.\n* `u` is no longer allowed as a string prefix. (It had no effect,\n  anyway.)\n* `hy.read-str` has been removed. Use `hy.read`, which now accepts\n  strings, instead.\n\nOther Breaking Changes\n------------------------------\n* Tuples are now indicated with `#( … )`, as in `#(1 2 3)`, instead of\n  `(, … )`, as in `(, 1 2 3)`.\n* Tuples have their own model type, `hy.models.Tuple`, instead of\n  being represented as `Expression`\\s.\n* `if` now requires all three arguments. For the two-argument case\n  (i.e., with no else-clause), `when` is a drop-in replacement.\n* `cond` has a new unbracketed syntax::\n\n     (cond [a b] [x y z])     ; Old\n     (cond  a b  x (do y z))  ; New\n\n* `defmacro` once again requires the macro name as a symbol, not\n  a string literal.\n* Annotations are now indicated by `#^` instead of `^`.\n* `annotate` (but not `#^`) now takes the target first and the type\n  second, as in `(annotate x int)`.\n* The way f-strings are parsed has changed, such that unescaped double\n  quotes are now allowed inside replacement fields.\n* Non-ASCII whitespace is no longer ignored during tokenization like\n  ASCII whitespace.\n* The mangling rules have been refined to account for Python's\n  treatment of distinct names as referring to the same variable if\n  they're NFKC-equivalent. Very little real code should be affected.\n* `hy.cmdline.run_repl` has been replaced with\n  `hy.cmdline.HyREPL.run`.\n\nNew Features\n------------------------------\n* Added user-defined reader macros, defined with `defreader`.\n* `defn` and `defclass` now allow a decorator list as their first\n  argument.\n* `...` is now understood to refer to `Ellipsis`, as in Python.\n* Python reserved words are allowed once more as parameter names and\n  keyword arguments. Hy includes a workaround for a CPython bug that\n  prevents the generation of legal Python code for these cases\n  (`cpython#90678`_).\n* New macro `export`.\n\n  - Or you can set the variable `_hy_export_macros` to control what\n    macros are collected by `(require module *)`.\n\n* New macro `delmacro`.\n* New function `hy.read_many`.\n* New function `hy.model_patterns.parse_if`.\n* New function `hy.model_patterns.in_tuple`.\n* Added a command-line option `-u` (or `--unbuffered`) per CPython.\n* Tab-completion in the REPL now attempts to unmangle names.\n\nBug Fixes\n------------------------------\n* Fixed a crash when using keyword objects in `match`.\n* Fixed a scoping bug in comprehensions in `let` bodies.\n* Literal newlines (of all three styles) are now recognized properly\n  in string and bytes literals.\n* `defmacro` no longer allows further arguments after `#* args`.\n* `!=` with model objects is now consistent with `=`.\n* Tracebacks from code parsed with `hy.read` now show source\n  positions.\n* Elements of `builtins` such as `help` are no longer overridden until\n  the REPL actually starts.\n* Readline is now imported only when necessary, to avoid triggering a\n  CPython bug regarding the standard module `curses`\n  (`cpython#46927`_).\n* Module names supplied to `hy -m` are now mangled.\n* Hy now precompiles its own Hy code during installation.\n\n.. _cpython#46927: https://github.com/python/cpython/issues/46927#issuecomment-1093418916\n.. _cpython#90678: https://github.com/python/cpython/issues/90678\n\n1.0a4 (released 2022-01-09)\n==============================\n\nRemovals\n------------------------------\n* Python 3.6 is no longer supported.\n\nOther Breaking Changes\n------------------------------\n* `import` and `require` no longer need outer brackets.\n  `(import [foo [bar]])` is now `(import foo [bar])`\n  and `(import [foo :as baz])` is now `(import foo :as baz)`.\n  To import all names from a module, use `(import foo *)`.\n* Lots of objects (listed below) have been spun off to a new package\n  called `Hyrule`_, from which you can `import` or `require` them.\n  Thus Hy now brings only the `hy` module and a limited set of core\n  macros into scope automatically.\n\n  * Functions: `butlast`, `coll?`, `constantly`, `dec`, `destructure`, `distinct`, `drop-last`, `end-sequence`, `flatten`, `inc`, `macroexpand-all`, `parse-args`, `pformat`, `postwalk`, `pp`, `pprint`, `prewalk`, `readable?`, `recursive?`, `rest`, `saferepr`, `walk`\n  * Classes: `PrettyPrinter`, `Sequence`\n  * Macros: `#%`, `#:`, `->`, `->>`, `ap-dotimes`, `ap-each`, `ap-each-while`, `ap-filter`, `ap-first`, `ap-if`, `ap-last`, `ap-map`, `ap-map-when`, `ap-reduce`, `ap-reject`, `as->`, `assoc`, `cfor`, `comment`, `defmacro!`, `defmacro/g!`, `defmain`, `defn+`, `defn/a+`, `defseq`, `dict=:`, `do-n`, `doto`, `fn+`, `fn/a+`, `ifp`, `let+`, `lif`, `list-n`, `loop`, `ncut`, `of`, `profile/calls`, `profile/cpu`, `seq`, `setv+`, `smacrolet`, `unless`, `with-gensyms`\n\n* Functions that provide first-class Python operators, such as `+`\n  in constructs like `(reduce + xs)`, are no longer brought\n  into scope automatically. Say `(import hy.pyops *)` to get them.\n* Hy scoping rules more closely follow Python scoping in certain edge\n  cases.\n* `let` is now a core macro with somewhat different semantics. In\n  particular, definition-like core macros (`defn`, `defclass`,\n  `import`) now introduce new names that shadow corresponding\n  `let`-bound names and persist outside the body of the `let`.\n* The constructors of `String` and `FString` now check that the input\n  would be syntactically legal as a literal.\n* `hy.extra.reserved` has been renamed to `hy.reserved`.\n\nNew Features\n------------------------------\n* `hy.repr` now supports several more standard types.\n* The attribute access macro `.` now allows method calls. For example,\n  `(. x (f a))` is equivalent to `(x.f a)`.\n* `hy.as-model` checks for self-references in its argument.\n* New function `hy.model_patterns.keepsym`.\n\nBug Fixes\n------------------------------\n* In comprehension forms other than `for`, assignments (other than\n  `:setv` and loop clauses) are now always visible in the surrounding\n  scope.\n* `match` now only evaluates the subject once.\n* `let` will no longer re-evaluate the default arguments of a\n  function it's used in.\n* `hy.repr` now properly formats bracket strings.\n* The `repr` and `str` of string models now include `brackets` if\n  necessary.\n* When standard output can't accommodate Unicode, `hy2py` now crashes\n  instead of emitting incorrect Python code.\n* Fixed a bug with self-requiring files on Windows.\n* Improved error messages for illegal uses of `finally` and `else`.\n\n.. _Hyrule: https://github.com/hylang/hyrule\n\n1.0a3 (released 2021-07-09)\n==============================\n\nBug Fixes\n------------------------------\n* Fixed a dependency-management bug that prevented installation of Hy\n  from a wheel on Pythons < 3.9.\n\n1.0a2 (released 2021-07-07)\n==============================\n\nRemovals\n------------------------------\n* All reimplementations of functions in the package `Toolz`_ have been\n  removed. Import these from Toolz (or `CyToolz`_) instead. Beware that\n  the Toolz functions are not all drop-in replacements for the old Hy\n  functions; e.g., `partition` has a different order of parameters.\n\n  * `complement`, `compose` (formerly `comp` in Hy), `drop`, `first`,\n    `identity`, `interleave`, `interpose`, `iterate`, `juxt`, `last`,\n    `merge-with`, `nth`, `partition`, `second`, `take-nth`, `take`\n\n* All aliases of objects in Python's standard library have been removed.\n  Import these objects explicitly instead.\n\n  * From `itertools`: `accumulate`, `chain`,\n    `combinations-with-replacement` (formerly `multicombinations` in\n    Hy), `combinations`, `compress`, `count`, `cycle`, `dropwhile`\n    (formerly `drop-while`), `filterfalse` (formerly `remove`),\n    `groupby` (formerly `group-by`), `islice`, `permutations`,\n    `product`, `repeat`, `starmap` (formerly `*map`), `takewhile`\n    (formerly `take-while`), `tee`, `zip-longest`\n  * From `functools`: `reduce`\n  * From `fractions`: `Fraction` (formerly `fraction`)\n\n* The following core predicate functions have been removed. Use\n  `isinstance` etc. instead.\n\n  * `empty?`, `even?`, `every?`, `float?`, `integer-char?`,\n    `integer?`, `iterable?`, `iterator?`, `keyword?`, `list?`, `neg?`,\n    `none?`, `numeric?`, `odd?`, `pos?`, `some`, `string?`, `symbol?`,\n    `tuple?`, `zero?`\n\n* Several other core functions and macros have been removed:\n\n  * `keyword`: Use `(hy.models.Keyword (hy.unmangle …))` instead.\n  * `repeatedly`: Use `toolz.iterate` instead.\n  * `if-not`: Use `(if (not …) …)` instead.\n  * `lif-not`: Use `(lif (not …) …)` instead.\n  * `macro-error`: Use `raise` instead.\n  * `calling-module`: Now internal to Hy.\n  * `calling-module-name`: Now internal to Hy.\n\nOther Breaking Changes\n------------------------------\n* `if` no longer allows more than three arguments. Use `cond` instead.\n* `cut` with exactly two arguments (the object to be cut and the\n  index) now works like Python slicing syntax and the `slice`\n  function: `(cut x n)` gets the first `n` elements instead of\n  everything after the first `n`.\n* In `defn`, the return-value annotation, if any, is now placed before\n  the function name instead of after.\n* Python reserved words are no longer allowed as parameter names, nor\n  as keywords in keyword function calls.\n* Hy model objects are no longer equal to ordinary Python values.\n  For example, `(!= 1 '1)`. You can promote values to models with\n  `hy.as-model` before making such a check.\n* The following functions are now called as attributes of the `hy` module:\n\n  * `hy.disassemble`, `hy.gensym`, `hy.macroexpand`,\n    `hy.macroexpand-1`, `hy.repr` (formerly\n    `hy.contrib.hy-repr.hy-repr`), `hy.repr-register` (formerly\n    `hy.contrib.hy-repr.hy-repr-register`)\n\n* `cmp` has been renamed to `chainc`.\n* `defclass` no longer automatically adds `None` to the end of\n  `__init__` method definitions.\n* All special forms have been replaced with macros. This won't affect\n  most preexisting code, but it does mean that user-defined macros can\n  now shadow names like `setv`.\n* `hy.repr` no longer uses the registered method of a supertype.\n* The constructors of `Symbol` and `Keyword` now check that the input\n  would be syntactically legal.\n* Attempting to call a core macro not implemented on the current\n  version of Python is now an error.\n* `hy.extra.reserved.special` has been replaced with\n  `hy.extra.reserved.macros`.\n\nNew Features\n------------------------------\n* `hy-repr` is now the default REPL output function.\n* The command `python -m hy` now works the same as `hy`.\n* New function `hy.as-model`.\n* New macro `match` (Python 3.10 only).\n* `annotate` is now a user-visible macro.\n\nBug Fixes\n------------------------------\n* Fixed issues with newer prereleases of Python 3.10.\n* The REPL now properly displays `SyntaxError`\\s.\n* Fixed a bug in `pprint` in which `width` was ignored.\n* Corrected `repr` and `hy.repr` for f-strings.\n* `--spy` and `--repl-output-fn` can now overwrite `HYSTARTUP` values.\n\n.. _Toolz: https://toolz.readthedocs.io\n.. _CyToolz: https://github.com/pytoolz/cytoolz\n\n1.0a1 (released 2021-04-12)\n==============================\n\nRemovals\n------------------------------\n* The core function `name` has been removed.\n  Use `unmangle` or the `name` attribute of keyword objects instead.\n* `deftag` has been removed. Instead of `(deftag foo …)`,\n  say `(defmacro \"#foo\" …)`.\n* `#doc` has been removed. Instead of `#doc @`, say `(doc \"#@\")`.\n* `__tags__` has been removed. Tag macros are now tracked in\n  `__macros__`.\n\nOther Breaking Changes\n------------------------------\n* Lambda lists (function parameter lists) have been simplified.\n  `&optional` is gone, `&args` is `#*`, `&kwargs` is `#**`, and\n  `&kwonly` is `*`. Thus, `[a &optional b [c 3] &rest args &kwargs\n  kwargs]` is now `[a [b None] [c 3] #* args #** kwargs]`.\n* Hy models have been renamed to remove \"Hy\", and are no longer\n  automatically brought into scope. Thus, `HyList` is now\n  `hy.models.List`.\n* `eval` is no longer automatically brought into scope. Call it as\n  `hy.eval` (or import it explicitly).\n* Calling a keyword object now does a string lookup, instead of a\n  keyword-object lookup. Thus, `(:key obj)` is equivalent to `(get\n  obj (mangle (. :key name)))`.\n* To require a tag macro `foo`, instead of `(require [module [foo]])`,\n  you must now say `(require [module [\"#foo\"]])`.\n* Mangling no longer converts leading hyphens to underscores, and\n  unmangling no longer converts leading underscores to hyphens.\n* F-strings now have their own model type, and store their code parts\n  as models instead of strings.\n\nNew Features\n------------------------------\n* Python 3.10 is now supported.\n* Lambda lists now support positional-only arguments.\n* F-strings now support `=` syntax per Python.\n* `with` now supports unnamed context managers.\n* `defmacro` and `require` can now take macro names as string\n  literals.\n* New standard macros `do-n`, `list-n`, and `cfor`.\n* The location of the REPL history file can now be set with the\n  environment variable `HY_HISTORY`.\n* REPL initialization scripts are now supported with the envrionment\n  variable `HYSTARTUP`.\n* The module `hy.extra.reserved` has a new function `special`.\n* New module `hy.contrib.destructure` for Clojure-style destructuring.\n* New module `hy.contrib.slicing` for multi-index sequence slicing.\n\nBug Fixes\n------------------------------\n* Fixed the identifier `J` being incorrectly parsed as a complex\n  number.\n* Attempts to assign to constants are now more reliably detected.\n* Fixed a bug where AST nodes from macro expansion did not properly\n  receive source locations.\n* Fixed `doc` sometimes failing to find core macros.\n* `doc` now works with names that need mangling.\n* Fixed bugs with `require` of names that need mangling.\n* Fixed a compiler crash from trying to use `..` as an operator.\n* Fixed namespace pollution caused by automatic imports of Hy builtins\n  and macros.\n* `require` now works with relative imports and can name modules as\n  members, as in `(require [hy.contrib [walk]])`.\n* Fixed error handling for illegal macro names.\n* Fixed `hyc` and `hy2py` not finding relative imports.\n* Fixed `hy.contrib.walk.smacrolet` requiring a module name.\n\nMisc. Improvements\n------------------------------\n* The library `astor` is no longer required on Pythons ≥ 3.9.\n\n0.20.0 (released 2021-01-25)\n==============================\n\nRemovals\n------------------------------\n* Python 3.5 is no longer supported.\n\nNew Features\n------------------------------\n* `let` macro now supports extended iterable unpacking syntax.\n* New contrib module `pprint`, a Hy equivalent of `python.pprint`.\n\nBug Fixes\n------------------------------\n* Fixed a bug that made `hy.eval` from Python fail on `require`.\n* Fixed a bug that prevented pickling of keyword objects.\n* Fixed a compiler crash from `setv` with an odd number of arguments in\n  `defclass`.\n\n0.19.0 (released 2020-07-16)\n==============================\n\nBreaking Changes\n------------------------------\n* `parse-args` is no longer implemented with `eval`; so e.g. you should\n  now say `:type int` instead of `:type 'int`.\n\nNew Features\n------------------------------\n* Python 3.9 is now supported.\n\nBug Fixes\n------------------------------\n* Improved support for nesting anaphoric macros by only applying\n  symbol replacement where absolutely necessary.\n* Quoted f-strings are no longer evaluated prematurely.\n* Fixed a regression in the production of error messages for empty\n  expressions.\n* Fixed a scoping bug for code executed with `hy -c`.\n* Fixed a bug in the compilation of multiple `require`\\s.\n* Fixed various bugs in command-line option parsing.\n\n0.18.0 (released 2020-02-02)\n==============================\n\nRemovals\n------------------------------\n* Python 2 is no longer supported.\n* Support for attribute lists in `defclass` has been removed. Use `setv`\n  and `defn` instead.\n* Literal keywords are no longer parsed differently in calls to functions\n  with certain names.\n* `hy.contrib.multi` has been removed. Use `cond` or the PyPI package\n  `multipledispatch` instead.\n\nOther Breaking Changes\n------------------------------\n* `HySequence` is now a subclass of `tuple` instead of `list`.\n  Thus, a `HyList` will never be equal to a `list`, and you can't\n  use `.append`, `.pop`, etc. on a `HyExpression` or `HyList`.\n\nNew Features\n------------------------------\n* Added special forms `py` to `pys` that allow Hy programs to include\n  inline Python code.\n* Added a special form `cmp` for chained comparisons.\n* All augmented assignment operators (except `%=` and `^=`) now allow\n  more than two arguments.\n* Added support for function annotations (PEP 3107) and variable\n  annotations (PEP 526).\n* Added a function `parse-args` as a wrapper for Python's `argparse`.\n\nBug Fixes\n------------------------------\n* Statements in the second argument of `assert` are now executed.\n* Fixed a bug that caused the condition of a `while` to be compiled\n  twice.\n* `in` and `not-in` now allow more than two arguments, as in Python.\n* `hy2py` can now handle format strings.\n* Fixed crashes from inaccessible history files.\n* Removed an accidental import from the internal Python module `test`.\n* Fixed a swarm of bugs in `hy.extra.anaphoric`.\n\nMisc. Improvements\n------------------------------\n* Replaced the dependency `clint` with `colorama`.\n\n0.17.0 (released 2019-05-20)\n==============================\n\n**Warning**: Hy 0.17.x will be the last Hy versions to support Python 2,\nand we expect 0.17.0 to be the only release in this line. By the time\n0.18.0 is released (in 2020, after CPython 2 has ceased being developed),\nHy will only support Python 3.\n\nRemovals\n------------------------------\n* Python 3.4 is no longer supported.\n\nNew Features\n------------------------------\n* Python 3.8 is now supported.\n* Format strings with embedded Hy code (e.g., `f\"The sum is {(+ x y)}\"`)\n  are now supported, even on Pythons earlier than 3.6.\n* Added a special form `setx` to create Python 3.8 assignment expressions.\n* Added new core functions `list?` and `tuple`.\n* Gensyms now have a simpler format that's more concise when\n  mangled (e.g., `_hyx_XsemicolonXfooXvertical_lineX1235` is now\n  `_hyx_fooXUffffX1`).\n\nBug Fixes\n------------------------------\n* Fixed a crash caused by errors creating temporary files during\n  bytecode compilation.\n\n0.16.0 (released 2019-02-12)\n==============================\n\nRemovals\n------------------------------\n* Empty expressions (`()`) are no longer legal at the top level.\n\nNew Features\n------------------------------\n* `eval` / `hy_eval` and `hy_compile` now accept an optional `compiler`\n  argument that enables the use of an existing `HyASTCompiler` instance.\n* Keyword objects (not just literal keywords) can be called, as\n  shorthand for `(get obj :key)`, and they accept a default value\n  as a second argument.\n* Minimal macro expansion namespacing has been implemented. As a result,\n  external macros no longer have to `require` their own macro\n  dependencies.\n* Macros and tags now reside in module-level `__macros__` and `__tags__`\n  attributes.\n\nBug Fixes\n------------------------------\n* Cleaned up syntax and compiler errors.\n* You can now call `defmain` with an empty lambda list.\n* `require` now compiles to Python AST.\n* Fixed circular `require`\\s.\n* Fixed module reloading.\n* Fixed circular imports.\n* Fixed errors from `from __future__ import ...` statements and missing\n  Hy module docstrings caused by automatic importing of Hy builtins.\n* Fixed `__main__` file execution.\n* Fixed bugs in the handling of unpacking forms in method calls and\n  attribute access.\n* Fixed crashes on Windows when calling `hy-repr` on date and time\n  objects.\n* Fixed a crash in `mangle` for some pathological inputs.\n* Fixed incorrect mangling of some characters at low code points.\n* Fixed a crash on certain versions of Python 2 due to changes in the\n  standard module `tokenize`.\n\n0.15.0 (released 2018-07-21)\n==============================\n\nRemovals\n------------------------------\n* Dotted lists, `HyCons`, `cons`, `cons?`, and `list*` have been\n  removed. These were redundant with Python's built-in data structures\n  and Hy's most common model types (`HyExpression`, `HyList`, etc.).\n* `&key` is no longer special in lambda lists. Use `&optional` instead.\n* Lambda lists can no longer unpack tuples.\n* `ap-pipe` and `ap-compose` have been removed. Use threading macros and\n  `comp` instead.\n* `for/a` has been removed. Use `(for [:async ...] ...)` instead.\n* `(except)` is no longer allowed. Use `(except [])` instead.\n* `(import [foo])` is no longer allowed. Use `(import foo)` instead.\n\nOther Breaking Changes\n------------------------------\n* `HyExpression`, `HyDict`, and `HySet` no longer inherit from `HyList`.\n  This means you can no longer use alternative punctuation in place of\n  square brackets in special forms (e.g. `(fn (x) ...)` instead of\n  the standard `(fn [x] ...)`).\n* Mangling rules have been overhauled; now, mangled names are\n  always legal Python identifiers.\n* `_` and `-` are now equivalent, even as single-character names.\n\n  * The REPL history variable `_` is now `*1`.\n\n* Non-shadow unary `=`, `is`, `<`, etc. now evaluate their argument\n  instead of ignoring it.\n* `list-comp`, `set-comp`, `dict-comp`, and `genexpr` have been replaced\n  by `lfor`, `sfor`, `dfor`, and `gfor`, respectively, which use a new\n  syntax and have additional features. All Python comprehensions can now\n  be written in Hy.\n* `&`-parameters in lambda lists must now appear in the same order that\n  Python expects.\n* Literal keywords now evaluate to themselves, and `HyKeyword` no longer\n  inherits from a Python string type\n* `HySymbol` no longer inherits from `HyString`.\n\nNew Features\n------------------------------\n* Python 3.7 is now supported.\n* `while` and `for` are allowed to have empty bodies.\n* `for` supports the various new clause types offered by `lfor`.\n* `defclass` in Python 3 supports specifying metaclasses and other\n  keyword arguments.\n* Added `mangle` and `unmangle` as core functions.\n* Added more REPL history variables: `*2` and `*3`.\n* Added a REPL variable holding the last exception: `*e`.\n* Added a command-line option `-E` per CPython.\n* Added a new module `hy.model_patterns`.\n\nBug Fixes\n------------------------------\n* `hy2py` should now output legal Python code equivalent to the input Hy\n  code in all cases.\n* Fixed `(return)` so it can exit a Python 2 generator.\n* Fixed a case where `->` and `->>` duplicated an argument.\n* Fixed bugs that caused `defclass` to drop statements or crash.\n* Fixed a REPL crash caused by illegal backslash escapes.\n* `NaN` can no longer create an infinite loop during macro-expansion.\n* Fixed a bug that caused `try` to drop expressions.\n* The compiler now properly recognizes `unquote-splice`.\n* Trying to import a dotted name is now a syntax error, as in Python.\n* `defmacro!` now allows optional arguments.\n* Fixed handling of variables that are bound multiple times in a single\n  `let`.\n\nMisc. Improvements\n----------------------------\n* `hy-repr` uses registered functions instead of methods.\n* `hy-repr` supports more standard types.\n* `macroexpand-all` will now expand macros introduced by a `require` in the body of a macro.\n\n0.14.0 (released 2018-02-14)\n==============================\n\nRemovals\n------------------------------\n* Python 3.3 is no longer supported\n* `def` is gone; use `setv` instead\n* `apply` is gone; use the new `#*` and `#**` syntax instead\n* `yield-from` is no longer supported under Python 2\n* Periods are no longer allowed in keywords\n* Numeric literals can no longer begin with a comma or underscore\n* Literal `Inf`\\s and `NaN`\\s must now be capitalized like that\n\nOther Breaking Changes\n------------------------------\n* Single-character \"sharp macros\" are now \"tag macros\", which can have\n  longer names\n* `xi` from `hy.extra.anaphoric` is now a tag macro `#%`\n* `eval` is now a function instead of a special form\n\nNew Features\n------------------------------\n* The compiler now automatically promotes values to Hy model objects\n  as necessary, so you can write ``(eval `(+ 1 ~n))`` instead of\n  ``(eval `(+ 1 ~(HyInteger n)))``\n* `return` has been implemented as a special form\n* Added a form of string literal called \"bracket strings\" delimited by\n  `#[FOO[` and `]FOO]`, where `FOO` is customizable\n* Added support for PEP 492 (`async` and `await`) with `fn/a`, `defn/a`,\n  `with/a`, and `for/a`\n* Added Python-style unpacking operators `#*` and  `#**` (e.g.,\n  `(f #* args #** kwargs)`)\n* Added a macro `comment`\n* Added EDN `#_` syntax to discard the next term\n* `while` loops may now contain an `else` clause, like `for` loops\n* `#%` works on any expression and has a new `&kwargs` parameter `%**`\n* Added a macro `doc` and a tag macro `#doc`\n* `get` is available as a function\n* `~@` (`unquote-splice`) form now accepts any false value as empty\n\nBug Fixes\n------------------------------\n* Relative imports (PEP 328) are now allowed\n* Numeric literals are no longer parsed as symbols when followed by a dot\n  and a symbol\n* Hy now respects the environment variable `PYTHONDONTWRITEBYTECODE`\n* String literals should no longer be interpreted as special forms or macros\n* Tag macros (née sharp macros) whose names begin with `!` are no longer\n  mistaken for shebang lines\n* Fixed a bug where REPL history wasn't saved if you quit the REPL with\n  `(quit)` or `(exit)`\n* `exec` now works under Python 2\n* No TypeError from multi-arity `defn` returning values evaluating to `None`\n* `try` forms are now possible in `defmacro` and `deftag`\n* Multiple expressions are now allowed in `try`\n* Fixed a crash when `macroexpand`\\ing a macro with a named import\n* Fixed a crash when `with` suppresses an exception. `with` now returns\n  `None` in this case.\n* Fixed a crash when `--repl-output-fn` raises an exception\n* Fixed a crash when `HyTypeError` was raised with objects that had no\n  source position\n* `assoc` now evaluates its arguments only once each\n* Multiple expressions are now allowed in the `else` clause of\n  a `for` loop\n* `else` clauses in `for` and `while` are recognized more reliably\n* Statements in the condition of a `while` loop are repeated properly\n* Argument destructuring no longer interferes with function docstrings\n* Nullary `yield-from` is now a syntax error\n* `break` and `continue` now raise an error when given arguments\n  instead of silently ignoring them\n\nMisc. Improvements\n------------------------------\n* `read`, `read_str`, and `eval` are exposed and documented as top-level\n  functions in the `hy` module\n* An experimental `let` macro has been added to `hy.contrib.walk`\n\n0.13.1 (released 2017-11-03)\n==============================\n\nBug Fixes\n------------------------------\n* Changed setup.py to require astor 0.5, since 0.6 isn't\n  backwards-compatible.\n\n0.13.0 (released 2017-06-20)\n==============================\n\nLanguage Changes\n------------------------------\n* Pythons 2.6, 3.0, 3.1, and 3.2 are no longer supported\n* `let` has been removed. Python's scoping rules do not make a proper\n  implementation of it possible. Use `setv` instead.\n* `lambda` has been removed, but `fn` now does exactly what `lambda` did\n* `defreader` has been renamed to `defsharp`; what were previously called\n  \"reader macros\", which were never true reader macros, are now called\n  \"sharp macros\"\n* `try` now enforces the usual Python order for its elements (`else` must\n  follow all `except`\\s, and `finally` must come last). This is only a\n  syntactic change; the elements were already run in Python order even when\n  defined out of order.\n* `try` now requires an `except` or `finally` clause, as in Python\n* Importing or executing a Hy file automatically byte-compiles it, or loads\n  a byte-compiled version if it exists and is up to date. This brings big\n  speed boosts, even for one-liners, because Hy no longer needs to recompile\n  its standard library for every startup.\n* Added bytestring literals, which create `bytes` objects under Python 3\n  and `str` objects under Python 2\n* Commas and underscores are allowed in numeric literals\n* Many more operators (e.g., `**`, `//`, `not`, `in`) can be used\n  as first-class functions\n* The semantics of binary operators when applied to fewer or more\n  than two arguments have been made more logical\n* `(** a b c d)` is now equivalent to `(** a (** b (** c d)))`,\n  not `(** (** (** a b) c) d)`\n* `setv` always returns `None`\n* When a `try` form executes an `else` clause, the return value for the\n  `try` form is taken from `else` instead of the `try` body. For example,\n  `(try 1 (except [ValueError] 2) (else 3))` returns `3`.\n* `xor`: If exactly one argument is true, return it\n* `hy.core.reserved` is now `hy.extra.reserved`\n* `cond` now supports single argument branches\n\nBug Fixes\n------------------------------\n* All shadowed operators have the same arities as real operators\n* Shadowed comparison operators now use `and` instead of `&`\n  for chained comparisons\n* `partition` no longer prematurely exhausts input iterators\n* `read` and `read-str` no longer raise an error when the input\n  parses to a false value (e.g., the empty string)\n* A `yield` inside of a `with` statement will properly suppress implicit\n  returns\n* `setv` no longer unnecessarily tries to get attributes\n* `loop` no longer replaces string literals equal to \"recur\"\n* The REPL now prints the correct value of `do` and `try` forms\n* Fixed a crash when tokenizing a single quote followed by whitespace\n\nMisc. Improvements\n------------------------------\n* New contrib module `hy-repr`\n* Added a command-line option `--repl-output-fn`\n\n0.12.1 (released 2017-01-24)\n==============================\n\nBug Fixes\n------------------------------\n* Allow installation without Git\n\n0.12.0 (released 2017-01-17)\n==============================\n\nThis release brings some quite significant changes on the language and as a\nresult very large portions of previously written Hy programs will require\nchanges. At the same time, documentation and error messages were improved,\nhopefully making the language easier to use.\n\nLanguage Changes\n------------------------------\n* New syntax for let, with and defclass\n* defmacro will raise an error on &kwonly, &kwargs and &key arguments\n* Keyword argument labels to functions are required to be strings\n* slice replaced with cut to stop overloading the python built-in\n* removed redundant throw, catch, progn, defun, lisp-if, lisp-if-not,\n  filterfalse, true, false and nil\n* global now takes multiple arguments\n* Nonlocal keyword (Python 3 only)\n* Set literals (#{1 2 3})\n* Keyword-only arguments (Python 3 only)\n* Setv can assign multiple variables at once\n* Empty form allowed for setv, del and cond\n* One-argument division, rationals and comparison operators (=, !=, <, >, <=, >=)\n* partition form for chunking collection to n-sized tuples\n* defn-alias and demacro-alias moved into hy.contrib.alias\n* None is returned instead of the last form in --init--\n* for and cond can take a multi-expression body\n* Hex and octal support for integer literals\n* Apply now mangles strings and keywords according to Hy mangling rules\n* Variadic if\n* defreader can use strings as macro names\n* as-> macro added\n* require syntax changed and now supports same features as import\n* defmulti changed to work with dispatching function\n* old defmulti renamed to defn\n* Lazy sequences added to contrib\n* defmacro! added for once-only evaluation for parameters\n* comp, constantly, complement and juxt added\n* keyword arguments allowed in method calls before the object\n\nBug Fixes\n------------------------------\n* Better error when for doesn't have body\n* Better error detection with list comprehensions in Python 2.7\n* Setting value to callable will raise an error\n* defclass can have properties / methods with built-in names\n* Better error messages on invalid macro arguments\n* Better error messages with hy2py and hyc\n* Cmdline error to string conversion.\n* In python 3.3+, generator functions always return a value\n* &rest can be used after &optional\n\nMisc. Improvements\n------------------------------\n* Version information includes SHA1 of current commit\n* Improved Python 3.5 support\n* Allow specification of global table and module name for (eval ...)\n* General documentation improvements\n* Contrib.walk: Coerce non-list iterables into list form\n* Flow macros (case and switch)\n* ap-pipe and ap-compose macros\n* #@ reader macro for with-decorator\n* Type check `eval` parameters\n* `and` and `or` short-circuit\n* `and` and `or` accept zero or more arguments\n* read-str for tokenizing a line\n* botsbuildbots moved to contrib\n* Trailing bangs on symbols are mangled\n* xi forms (anonymous function literals)\n* if form optimizations in some cases\n* xor operator\n* Overhauled macros to allow macros to ref the Compiler\n* ap-if requires then branch\n* Parameters for numeric operations (inc, dec, odd?, even?, etc.) aren't type checked\n* import_file_to_globals added for use in emacs inferior lisp mode\n* hy.core.reserved added for querying reserved words\n* hy2py can use standard input instead of a file\n* alias, curry, flow and meth removed from contrib\n* contrib.anaphoric moved to hy.extra\n\nChanges from 0.10.1\n==============================\n\nLanguage Changes\n------------------------------\n* new keyword-argument call syntax\n* Function argument destructuring has been added.\n* Macro expansion inside of class definitions is now supported.\n* yield-from support for Python 2\n* with-decorator can now be applied to classes.\n* assert now accepts an optional assertion message.\n* Comparison operators can now be used with map, filter, and reduce.\n* new last function\n* new drop-last function\n* new lisp-if-not/lif-not macro\n* new symbol? function\n* butlast can now handle lazy sequences.\n* Python 3.2 support has been dropped.\n* Support for the @ matrix-multiplication operator (forthcoming in\n  Python 3.5) has been added.\n\nBug Fixes\n------------------------------\n* Nested decorators now work correctly.\n* Importing hy modules under Python >=3.3 has been fixed.\n* Some bugs involving macro unquoting have been fixed.\n* Misleading tracebacks when Hy programs raise IOError have been\n  corrected.\n\nMisc. Improvements\n------------------------------\n* attribute completion in REPL\n* new -m command-line flag for running a module\n* new -i command-line flag for running a file\n* improved error messaging for attempted function definitions\n  without argument lists\n* Macro expansion error messages are no longer truncated.\n* Error messaging when trying to bind to a non-list non-symbol in a\n  let form has been improved.\n\nChanges from 0.10.0\n==============================\n\nThis release took some time (sorry, all my fault) but it's got a bunch of\nreally nice features. We hope you enjoy hacking with Hy as much as we enjoy\nhacking on Hy.\n\nIn other news, we're Dockerized as an official library image!\n<https://registry.hub.docker.com/_/hylang/>\n\n$ docker run -it --rm hylang\nhy 0.10.0 using CPython(default) 3.4.1 on Linux\n=> ((lambda [] (print \"Hello, World!\")))\nHello, World!\n\n - Hy Society\n\nLanguage Changes\n------------------------------\n* Implement raise :from, Python 3 only.\n* defmain macro\n* name & keyword functions added to core\n* (read) added to core\n* shadow added to core\n* New functions interleave interpose zip_longest added to core\n* nth returns default value when out of bounds\n* merge-with added\n* doto macro added\n* keyword? to find out keywords\n* setv no longer allows \".\" in names\n\nInternals\n------------------------------\n* Builtins reimplemented in terms of python stdlib\n* gensyms (defmacro/g!) handles non-string types better\n\nTools\n------------------------------\n* Added hy2py to installed scripts\n\nMisc. Fixes\n------------------------------\n* Symbols like true, false, none can't be assigned\n* Set sys.argv default to [''] like Python does\n* REPL displays the python version and platform at startup\n* Dockerfile added for https://registry.hub.docker.com/_/hylang/\n\nContrib changes\n------------------------------\n* Fix ap-first and ap-last for failure conditions\n\n\nChanges from 0.9.12\n==============================\n\n0.10.0 - the \"oh man I'm late for PyCon\" release\n\nThanks to theanalyst (Abhi) for getting the release notes\ntogether. You're the best!\n- Hy Society\n\nBreaking Changes\n------------------------------\n\nWe're calling this release 0.10 because we broke\nAPI. Sorry about that. We've removed kwapply in\nfavor of using `apply`. Please be sure to upgrade\nall code to work with `apply`.\n\n(apply function-call args kwargs)  ; is the signature\n\nThanks\n------------------------------\n\n Major shoutout to Clinton Dreisbach for implementing loop/recur.\n As always, massive hugs to olasd for the constant reviews and for\n implementing HyCons cells. Thanks to @kenanb for redesigning the\n new Hy logo.\n\n Many thanks to algernon for working on adderall, which helped\n push Hy further this cycle. Adderall is an implementation of miniKanren\n in Hy. If you're interested in using Adderall, check out hydiomatic,\n which prettifies Hy source using Adderall rules.\n\n This release saw an increase of about 11 contributors for a point\n release, you guys rock!\n\n  -Hy Society\n\nLanguage Changes\n------------------------------\n\n* `for` revamped again (Last time, we hope!), this time using a saner\n  itertools.product when nesting\n* `lisp-if`/`lif` added for the lisp-like everything is true if, giving\n  seasoned lispers a better if check (0 is a value, etc)\n* Reader Macros are macros now!\n* yield-from is now a proper yield from on Python 3. It also now breaks on\n  Python 2.x.\n* Added if-not macro\n* We finally have a lisp like cons cells\n* Generator expressions, set & dict comprehensions are now supported\n* (.) is a mini DSL for attribute access\n* `macroexpand` & `macroexpand-1` added to core\n* `disassemble` added to core, which dumps the AST or equivalent python code\n* `coll?` added to core to check for a collection\n* `identity` function added to core\n\nMisc. Fixes\n------------------------------\n* Lots of doc fixes. Reorganization as well as better docs on Hy internals\n* Universal Wheel Support\n* Pygments > 1.6 supports Hy now. All codeblocks in  docs have been changed\n  from clojure to hy\n* Hy REPL supports invoking with --spy & -i options [reword]\n* `first` and `rest` are functions and not macros anymore\n* \"clean\" target added to Makefile\n* hy2py supports a bunch of commandline options to show AST, source etc.\n* Sub-object mangling: every identifier is split along the dots & mangled\n  separately\n\nBug Fixes\n------------------------------\n* Empty MacroExpansions work as expected\n* Python 3.4 port. Sorry this wasn't in a 3.4 release time, we forgot to do\n  a release. Whoops.\n* eg/lxml/parse-tumblr.hy works with Python 3\n* hy2py works on Windows\n* Fixed unicode encoding issue in REPL during unicode exceptions\n* Fixed handling of comments at end of input (#382)\n\nContrib changes\n------------------------------\n* Curry module added to contrib\n* Loop/recur module added which provides TCO at tail position\n* defmulti has been added - check out more in the docs -- thanks to Foxboron for this one!\n* Walk module for walking the Hy AST, features a `macroexpand-all` as well\n\n\nChanges from Hy 0.9.11\n==============================\n\ntl;dr:\n\n0.9.12 comes with some massive changes,\nWe finally took the time to implement gensym, as well as a few\nother bits that help macro writing. Check the changelog for\nwhat exactly was added.\n\nThe biggest feature, Reader Macros, landed later\nin the cycle, but were big enough to warrant a release on its\nown. A huge thanks goes to Foxboron for implementing them\nand a massive hug goes out to olasd for providing ongoing\nreviews during the development.\n\nWelcome to the new Hy contributors, Henrique Carvalho Alves,\nKevin Zita and Kenan Bölükbaşı. Thanks for your work so far,\nfolks!\n\nHope y'all enjoy the finest that 2013 has to offer, - Hy Society\n\n\n* Special thanks goes to Willyfrog, Foxboron and theanalyst for writing\n  0.9.12's NEWS. Thanks, y'all! (PT)\n\n\nLanguage Changes\n------------------------------\n* Translate foo? -> is_foo, for better Python interop. (PT)\n* Reader Macros!\n* Operators + and * now can work without arguments\n* Define kwapply as a macro\n* Added apply as a function\n* Instant symbol generation with gensym\n* Allow macros to return None\n* Add a method for casting into byte string or unicode depending on python version\n* flatten function added to language\n* Add a method for casting into byte string or unicode depending on python version\n* Added type coercing to the right integer for the platform\n\n\nMisc. Fixes\n------------------------------\n* Added information about core team members\n* Documentation fixed and extended\n* Add astor to install_requires to fix hy --spy failing on hy 0.9.11.\n* Convert stdout and stderr to UTF-8 properly in the run_cmd helper.\n* Update requirements.txt and setup.py to use rply upstream.\n* tryhy link added in documentation and README\n* Command line options documented\n* Adding support for coverage tests at coveralls.io\n* Added info about tox, so people can use it prior to a PR\n* Added the start of hacking rules\n* Halting Problem removed from example as it was nonfree\n* Fixed PyPI is now behind a CDN. The --use-mirrors option is deprecated.\n* Badges for pypi version and downloads.\n\n\nSyntax Fixes\n------------------------------\n* get allows multiple arguments\n\n\nBug Fixes\n------------------------------\n* OSX: Fixes for readline Repl problem which caused HyREPL not allowing 'b'\n* Fix REPL completions on OSX\n* Make HyObject.replace more resilient to prevent compiler breakage.\n\n\nContrib changes\n------------------------------\n* Anaphoric macros added to contrib\n* Modified eg/twisted to follow the newer hy syntax\n* Added (experimental) profile module\n\n\nChanges from Hy 0.9.10\n==============================\n\n* Many thanks to Guillermo Vayá (Willyfrog) for preparing this release's\n  release notes. Major shout-out. (PT)\n\nMisc. Fixes\n------------------------------\n\n* Many many many documentation fixes\n* Change virtualenv name to be `hy`\n* Rewrite language.hy not to require hy.core.macros\n* Rewrite the bootstrap macros in hy\n* Cleanup the hy.macros module\n* Add comments to the functions and reorder them\n* Translation of meth from Python to Hy\n* PY3 should really check for Python >= 3\n* Add hy._compat module to unify all Python 2 and 3 compatibility codes.\n* Import future.print_statement in hy code\n* Coerce the contents of unquote-splice'd things to a list\n* Various setup.py enhancements.\n* PEP8 fixes\n* Use setuptools.find_packages()\n* Update PyPI classifiers\n* Update website URL\n* Install the argparse module in Python 2.6 and before\n* Delete the duplicate rply in install_requires. With the PyPI version,\n  tests are failed.\n* Finally fixed access to hy.core.macros here. have to explicitly require\n  them.\n\nLanguage Changes\n------------------------------\n\n* Slightly cleaner version of drop-while, could use yield-from when ready\n* Added many native core functions\n* Add zero? predicate to check if an object is zero\n* Macro if-python2 for compile-time choice between Python 2 and Python 3\n  code branches\n* Added new travis make target to skip flake8 on pypy but run\n  it on all others\n* Add \"spy mode\" to REPL\n* Add CL handling to hyc\n* Add yield from via macro magic.\n* Add some machinery to avoid importing hy in setup.py\n* Add a rply-based parser and lexer\n* Allow quoting lambda list keywords.\n* Clarified rest / cdr, cleaned up require\n* Make with return the last expression from its branch\n* Fix yielding to not suck (#151)\n* Make assoc accept multiple values, also added an even/odd check for\n  checkargs\n* Added ability to parse doc strings set in defclass declarations,\n* Provide bin scripts for both Windows and \\*nix\n* Removes setf in favor of setv\n\nChanges from Hy 0.9.9\n==============================\n\nStupid Fixes\n------------------------------\n\n* I forgot to include hy.core.language in the sdist. (PT)\n\nChanges from Hy 0.9.8\n==============================\n\nSyntax Fixes\n------------------------------\n\n* Macros are now module-specific, and must be required when used. (KH)\n* Added a few more string escapes to the compiler (Thomas Ballinger)\n* Keywords are pseudo-callable again, to get the value out of a dict. (PT)\n* Empty expression is now the same as an empty vector. (Guillermo Vaya)\n\nLanguage Changes\n------------------------------\n\n* HyDicts (quoted dicts or internal HST repr) are now lists\n  that compiled down to dicts by the Compiler later on. (ND)\n* Macros can be constants as well. (KH)\n* Add eval-when-compile and eval-and-compile (KH)\n* Add break and continue to Hy (Morten Linderud)\n* Core language libraries added. As example, I've included `take` and\n  `drop` in this release. More to come (PT)\n* Importing a broken module's behavior now matches Python's more\n  closely. (Morten Linderud)\n\nMisc. Fixes\n------------------------------\n\n* Ensure compiler errors are always \"user friendly\" (JD)\n* Hy REPL quitter repr adjusted to match Hy syntax (Morten Linderud)\n* Windows will no longer break due to missing readline (Ralph Moritz)\n\n\nChanges from Hy 0.9.7\n==============================\n\nSyntax Fixes\n------------------------------\n\n* Quasi-quoting now exists long with quoting. Macros will also not\n  expand things in quotes.\n* kwapply now works with symbols as well as raw dicts. (ND)\n* Try / Except will now return properly again. (PT)\n* Bare-names sprinkled around the AST won't show up anymore (ND)\n\nLanguage Changes\n------------------------------\n\n* Added a new (require) form, to import macros for that module (PT)\n* Native macros exist and work now! (ND)\n* (fn) and (lambda) have been merged (ND)\n* New (defclass) builtin for class definitions (JD)\n* Add unquote-splicing (ND)\n\nErrata\n------------------------------\n\n* Paul was an idiot and marked the j-related bug as a JD fix, it was\n  actually ND. My bad.\n\nChanges from Hy 0.9.6\n==============================\n\nSyntax Fixes\n------------------------------\n\n* UTF-8 encoded hy symbols are now `hy_`... rather than `__hy_`..., it's\n  silly to prefex them as such. (PT)\n* `j` is no longer always interpreted as a complex number; we use it much\n  more as a symbol. (ND)\n* (decorate-with) has been moved to (with-decorate) (JD)\n* New (unless) macro (JD)\n* New (when) macro (JD)\n* New (take) macro (@eigenhombre)\n* New (drop) macro (@eigenhombre)\n* import-from and import-as finally removed. (GN)\n* Allow bodyless functions (JD)\n* Allow variable without value in `let` declaration (JD)\n* new (global) builtin (@eal)\n* new lambda-list syntax for function defs, for var-arity, kwargs. (JK)\n\nLanguage Changes\n------------------------------\n\n* *HUGE* rewrite of the compiler. Massive thanks go to olasd\n  and jd for making this happen. This solves just an insane number\n  of bugs. (ND, PT, JD)\n* Eval no longer sucks with statements (ND)\n* New magic binary flags / mis fixes with the hy interpreter\n  (WKG + @eigenhombre)\n\n\nChanges from Hy 0.9.5\n==============================\n\nSyntax Fixes\n------------------------------\n\n* .pyc generation routines now work on Python 3. (Vladimir Gorbunov)\n* Allow empty (do) forms (JD)\n* The `else` form is now supported in `try` statements. (JD)\n* Allow `(raise)`, which, like Python, will re-raise\n  the last Exception. (JD)\n* Strings, bools, symbols are now valid top-level entries. (Konrad Hinsen)\n* UTF-8 strings will no longer get punycode encoded. (ND)\n* bare (yield) is now valid. (PT)\n* (try) now supports the (finally) form. (JD)\n* Add in the missing operators and AugAssign operators. (JD)\n* (foreach) now supports the (else) form. (JD)\n\nWARNING: WARNING: READ ME: READ ME:\n-----------------------------------\n\nFrom here on out, we will only support \"future division\" as part of hy.\nThis is actually quite a pain for us, but it's going to be quite an\namazing feature.\n\nThis also normalizes behavior from Py 2 --> Py 3.\n\nThank you so much, Konrad Hinsen.\n\nLanguage Changes\n------------------------------\n\n* (pass) has been removed from the language; it's a wart that comes from\n  a need to create valid Python syntax without breaking the whitespace\n  bits. (JD)\n* We've moved to a new import style, (import-from) and (import-as) will\n  be removed before 1.0. (GN)\n* Prototypes for quoted forms (PT)\n* Prototypes for eval (PT)\n* Enhance tracebacks from language breakage coming from the compiler (JD)\n* The REPL no longer bails out if the internals break (Konrad Hinsen)\n* We now support float and complex numbers. (Konrad Hinsen)\n* Keywords (such as :foo) are now valid and loved. (GN)\n\nChanges from Hy 0.9.4\n==============================\n\nSyntax Fixes\n------------------------------\n\n* `try` now accepts `else`: (JD)\n\n  `(try BODY (except [] BODY) (else BODY))`\n\n\nChanges from Hy 0.9.4\n==============================\n\nSyntax Fixes\n------------------------------\n\n* Statements in the `fn` path early will not return anymore. (PT)\n* Added \"not\" as the inline \"not\" operator. It's advised to still\n  use \"not-in\" or \"is-not\" rather than nesting. (JD)\n* `let` macro added (PT)\n* Added \"~\" as the \"invert\" operator. (JD)\n* `catch` now accepts a new format: (JD)\n    (catch [] BODY)\n    (catch [Exception] BODY)\n    (catch [e Exception] BODY)\n    (catch [e [Exception1 Exception2]] BODY)\n* With's syntax was fixed to match the rest of the code. It's now: (PT)\n    (with [name context-managed-fn] BODY)\n    (with [context-managed-fn] BODY)\n\nLanguage Changes\n------------------------------\n\n* Added `and` and `or` (GN)\n* Added the tail threading macro (->>) (PT)\n* UTF encoded symbols are allowed, but mangled. All Hy source is now\n  presumed to be UTF-8. (JD + PT)\n* Better builtin signature checking  (JD)\n* If hoisting (for things like printing the return of an if statement)\n  have been added. '(print (if true true true))' (PT)\n\nDocumentation\n------------------------------\n\n* Initial documentation added to the source tree. (PT)\n\n\nChanges from Hy 0.9.3\n==============================\n\nSyntax Fixes\n------------------------------\n\n* Nested (do) expressions no longer break Hy (PT)\n* `progn` is now a valid alias for `do` (PT)\n* `defun` is now a valid alias for `defn` (PT)\n* Added two new escapes for \\ and \" (PT)\n\nLanguage Changes\n------------------------------\n\n* Show a traceback when a compile-error bubbles up in the Hy REPL (PT)\n* `setf` / `setv` added, the behavior of `def` may change in the future.\n* `print` no longer breaks in Python 3.x (PT)\n* Added `list-comp` list comprehensions. (PT)\n* Function hoisting (for things like inline invocation of functions,\n  e.g. '((fn [] (print \"hi!\")))' has been added. (PT)\n* `while` form added. (ND)\n    (while [CONDITIONAL] BODY)\n\nDocumentation\n------------------------------\n\n* Initial docs added. (WKG + CW)\n\n\nChanges from Hy 0.9.2\n==============================\n\nGeneral Enhancements\n------------------------------\n\n* hy.__main__ added, `python -m hy` will now allow a hy shim into existing\n  Python scripts. (PT)\n\nLanguage Changes\n------------------------------\n\n* `import-as` added to allow for importing modules. (Amrut Joshi)\n* `slice` added to slice up arrays. (PT)\n* `with-as` added to allow for context managed bits. (PT)\n* `%` added to do Modulo. (PT)\n* Tuples added with the '(, foo bar)' syntax. (PT)\n* `car` / `first` added. (PT)\n* `cdr` / `rest` added. (PT)\n* hy --> .pyc compiler added. (PT)\n* Completer added for the REPL Readline autocompletion. (PT)\n* Merge the `meth` macros into hy.contrib. (PT)\n* Changed __repr__ to match Hy source conventions. (PT)\n* 2.6 support restored. (PT)\n\n\nChanges from Hy 0.9.1\n==============================\n\nGeneral Enhancements\n------------------------------\n\n* Hy REPL added. (PT)\n* Doc templates added. (PT)\n\nLanguage Changes\n------------------------------\n\n* Add `pass` (PT)\n* Add `yield` (PT)\n* Moved `for` to a macro, and move `foreach` to old `for`. (PT)\n* Add the threading macro (`->`). (PT)\n* Add \"earmufs\" in. (tenach)\n* Add comments in (PT)\n\n\nChanges from Hy 0.9.0\n==============================\n\nLanguage Changes\n------------------------------\n\n* Add `throw` (PT)\n* Add `try` (PT)\n* add `catch` (PT)\n\n\nChanges from Hy 0.8.2\n==============================\n\nNotes\n------------------------------\n\n* Complete rewrite of old-hy. (PT)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.759765625,
          "content": "Hy\n==\n\n[![Version](https://img.shields.io/pypi/v/hy.svg)](https://pypi.python.org/pypi/hy)\n\n<a href=\"https://xkcd.com/224/\"><img title=\"We lost the documentation on quantum mechanics. You'll have to decode the regexes yourself.\" alt=\"XKCD #224\" src=\"https://raw.github.com/hylang/shyte/18f6925e08684b0e1f52b2cc2c803989cd62cd91/imgs/xkcd.png\"></a>\n\nLisp and Python should love each other. Let's make it happen.\n\nHy is a Lisp dialect that's embedded in Python. Since Hy transforms its Lisp\ncode into Python abstract syntax tree (AST) objects, you have the whole\nbeautiful world of Python at your fingertips, in Lisp form.\n\nTo install the latest release of Hy, just use the command `pip3 install\n--user hy`. Then you can start an interactive read-eval-print loop (REPL) with\nthe command `hy`, or run a Hy program with `hy myprogram.hy`.\n\n* [The Hy homepage](http://hylang.org)\n* [Try Hy with a web console](http://hylang.org/try-hy)\n\nProject\n-------\n\n* Code: https://github.com/hylang/hy\n* Documentation: http://hylang.org/hy/doc\n* Bug reports: We have no bugs! Your bugs are your own! (https://github.com/hylang/hy/issues)\n* License: MIT (Expat)\n* Community: Join us on [Github Discussions](https://github.com/hylang/hy/discussions)!\n* [Stack Overflow: The [hy] tag](https://stackoverflow.com/questions/tagged/hy)\n\nHy's current maintainer is [Kodi Arfer](https://github.com/Kodiologist). He takes responsibility for answering user questions, which should primarily be asked on Stack Overflow or GitHub Discussions, but feel free to [poke him](http://arfer.net/elsewhere) if he's missed a question or you've found a serious security issue.\n\n![Cuddles the Hacker](https://i.imgur.com/QbPMXTN.png)\n\n(fan art from the one and only [doctormo](http://doctormo.deviantart.com/art/Cuddles-the-Hacker-372184766))\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 0.4228515625,
          "content": "import os\nfrom pathlib import Path\n\nimport hy, pytest\n\nNATIVE_TESTS = Path.cwd() / \"tests/native_tests\"\n\n# https://github.com/hylang/hy/issues/2029\nos.environ.pop(\"HYSTARTUP\", None)\n\n\ndef pytest_collect_file(file_path, parent):\n    if (\n        file_path.suffix == \".hy\"\n        and NATIVE_TESTS in file_path.parents\n        and file_path.name != \"__init__.hy\"\n    ):\n        return pytest.Module.from_parent(parent, path=file_path)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fastentrypoints.py",
          "type": "blob",
          "size": 3.9443359375,
          "content": "# noqa: D300,D400\n# Copyright (c) 2016, Aaron Christianson\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n#\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n# IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n'''\nMonkey patch setuptools to write faster console_scripts with this format:\n\n    import sys\n    from mymodule import entry_function\n    sys.exit(entry_function())\n\nThis is better.\n\n(c) 2016, Aaron Christianson\nhttp://github.com/ninjaaron/fast-entry_points\n'''\nfrom setuptools.command import easy_install\nimport re\nTEMPLATE = r'''\n# -*- coding: utf-8 -*-\n# EASY-INSTALL-ENTRY-SCRIPT: '{3}','{4}','{5}'\n__requires__ = '{3}'\nimport re\nimport sys\n\nfrom {0} import {1}\n\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\n    sys.exit({2}())\n'''.lstrip()\n\n\n@classmethod\ndef get_args(cls, dist, header=None):  # noqa: D205,D400\n    \"\"\"\n    Yield write_script() argument tuples for a distribution's\n    console_scripts and gui_scripts entry points.\n    \"\"\"\n    if header is None:\n        # pylint: disable=E1101\n        header = cls.get_header()\n    spec = str(dist.as_requirement())\n    for type_ in 'console', 'gui':\n        group = type_ + '_scripts'\n        for name, ep in dist.get_entry_map(group).items():\n            # ensure_safe_name\n            if re.search(r'[\\\\/]', name):\n                raise ValueError(\"Path separators not allowed in script names\")\n            script_text = TEMPLATE.format(\n                ep.module_name, ep.attrs[0], '.'.join(ep.attrs),\n                spec, group, name)\n            # pylint: disable=E1101\n            args = cls._get_script_args(type_, name, header, script_text)\n            for res in args:\n                yield res\n\n\n# pylint: disable=E1101\neasy_install.ScriptWriter.get_args = get_args\n\n\ndef main():\n    import os\n    import shutil\n    import sys\n    dests = sys.argv[1:] or ['.']\n    filename = re.sub(r'\\.pyc$', '.py', __file__)\n\n    for dst in dests:\n        shutil.copy(filename, dst)\n        manifest_path = os.path.join(dst, 'MANIFEST.in')\n        setup_path = os.path.join(dst, 'setup.py')\n\n        # Insert the include statement to MANIFEST.in if not present\n        with open(manifest_path, 'a+') as manifest:\n            manifest.seek(0)\n            manifest_content = manifest.read()\n            if 'include fastentrypoints.py' not in manifest_content:\n                manifest.write(('\\n' if manifest_content else '') +\n                               'include fastentrypoints.py')\n\n        # Insert the import statement to setup.py if not present\n        with open(setup_path, 'a+') as setup:\n            setup.seek(0)\n            setup_content = setup.read()\n            if 'import fastentrypoints' not in setup_content:\n                setup.seek(0)\n                setup.truncate()\n                setup.write('import fastentrypoints\\n' + setup_content)\n"
        },
        {
          "name": "hy",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements-dev.txt",
          "type": "blob",
          "size": 0.1181640625,
          "content": "pytest >= 7\n\n# documentation\nPygments >= 2.18.0\nSphinx == 5.0.2\ngit+https://github.com/hylang/sphinxcontrib-hydomain.git\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.255859375,
          "content": "[tool:pytest]\n# Be sure to include Hy test functions with mangled names.\npython_functions=test_* hyx_test_*\nfilterwarnings =\n    once::DeprecationWarning\n    once::PendingDeprecationWarning\n    ignore::SyntaxWarning\n    ignore::pytest.PytestReturnNotNoneWarning\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.6064453125,
          "content": "#!/usr/bin/env python\n\n# Set both `setup_requires` and `install_requires` with our\n# dependencies, since we need to compile Hy files during setup. And\n# put this as the first statement in the file so it's easy to parse\n# out without executing the file.\nrequires = [\n    \"funcparserlib ~= 1.0\",\n]\n\nimport os\n\nimport fastentrypoints  # Monkey-patches setuptools.\nfrom setuptools import find_packages, setup\nfrom setuptools.command.install import install\n\nos.chdir(os.path.split(os.path.abspath(__file__))[0])\n\nPKG = \"hy\"\n\nlong_description = \"\"\"Hy is a Lisp dialect that's embedded in Python.\nSince Hy transforms its Lisp code into Python abstract syntax tree (AST)\nobjects, you have the whole beautiful world of Python at your fingertips,\nin Lisp form.\"\"\"\n\n\nclass install(install):\n    def run(self):\n        super().run()\n        import py_compile\n\n        import hy  # for compile hooks\n\n        for path in set(self.get_outputs()):\n            if path.endswith(\".hy\"):\n                py_compile.compile(\n                    path,\n                    invalidation_mode=py_compile.PycInvalidationMode.CHECKED_HASH,\n                )\n\nsetup(\n    name=PKG,\n    version='0.0.0',\n    setup_requires=[\"wheel\"] + requires,\n    install_requires=requires,\n    python_requires=\">= 3.9, < 3.14\",\n    entry_points={\n        \"console_scripts\": [\n            \"hy = hy.cmdline:hy_main\",\n            \"hyc = hy.cmdline:hyc_main\",\n            \"hy2py = hy.cmdline:hy2py_main\"\n        ]\n    },\n    packages=find_packages(exclude=[\"tests*\"]),\n    package_data={\n        \"\": [\"*.hy\"],\n    },\n    author=\"Paul Tagliamonte\",\n    author_email=\"tag@pault.ag\",\n    long_description=long_description,\n    description=\"A Lisp dialect embedded in Python\",\n    license=\"Expat\",\n    url=\"http://hylang.org/\",\n    platforms=[\"any\"],\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"License :: DFSG approved\",\n        \"License :: OSI Approved :: MIT License\",  # Really \"Expat\". Ugh.\n        \"Operating System :: OS Independent\",\n        \"Programming Language :: Hy\",\n        \"Programming Language :: Lisp\",\n        \"Programming Language :: Python\",\n        \"Programming Language :: Python :: Implementation :: PyPy\",\n        \"Environment :: WebAssembly :: Emscripten\",\n        \"Topic :: Software Development :: Code Generators\",\n        \"Topic :: Software Development :: Compilers\",\n        \"Topic :: Software Development :: Libraries\",\n    ],\n    project_urls={\n        \"Documentation\": \"http://hylang.org/hy/doc\",\n        \"Source\": \"https://github.com/hylang/hy\",\n    },\n    cmdclass={\n        \"install\": install,\n    },\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}