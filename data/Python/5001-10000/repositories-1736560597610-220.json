{
  "metadata": {
    "timestamp": 1736560597610,
    "page": 220,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "crazyguitar/pysheeet",
      "stars": 8021,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1455078125,
          "content": "[report]\nomit =\n    */python?.?/*\n    */site-packages/*\n    app_test.py\n\nexclude_lines =\n    if __name__ == .__main__.:\n    if .DYNO. in os.environ:\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.421875,
          "content": "_build/\n\n# Created by https://www.gitignore.io/api/vim,python\n\n### Python ###\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n\n### Vim ###\n# swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-v][a-z]\n[._]sw[a-p]\n# session\nSession.vim\n# temporary\n.netrwhist\n*~\n# auto-generated tag files\ntags\n\n# End of https://www.gitignore.io/api/vim,python\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2015-2021 Chang Ning Tsai\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.505859375,
          "content": "REQUIREMENT = requirements.txt\n\nVER  = $(word 2, $(shell python --version 2>&1))\nSRC  = app.py app_test.py\nPY36 = $(shell expr $(VER) \\>= 3.6)\n\n.PHONY: build deps test\nbuild: html\n\n%:\n\tcd docs && make $@\n\ntest: clean build\n\tpycodestyle $(SRC)\n\tpydocstyle $(SRC)\n\tbandit $(SRC)\n\tcoverage run app_test.py && coverage report --fail-under=100 -m $(SRC)\nifeq ($(PY36), 1)\n\tblack --quiet --diff --check --line-length 79 $(SRC)\nendif\n\ndeps:\n\tpip install -r requirements.txt\nifeq ($(PY36), 1)\n\tpip install black==22.3.0\nendif\n"
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.0556640625,
          "content": "web: make clean && make && gunicorn app:app --log-file -\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 3.1875,
          "content": "\n.. raw:: html\n\n    <h1 align=\"center\">\n    <br>\n      <a href=\"https://www.pythonsheets.com\"><img src=\"docs/_static/logo.svg\" alt=\"pysheeet\" width=200\"></a>\n    </h1>\n    <p align=\"center\">\n      <a href=\"https://github.com/crazyguitar/pysheeet/actions\">\n        <img src=\"https://github.com/crazyguitar/pysheeet/actions/workflows/pythonpackage.yml/badge.svg\" alt=\"Build Status\">\n      </a>\n      <a href=\"https://coveralls.io/github/crazyguitar/pysheeet?branch=master\">\n        <img src=\"https://coveralls.io/repos/github/crazyguitar/pysheeet/badge.svg?branch=master\" alt=\"Coverage\">\n      </a>\n      <a href=\"https://raw.githubusercontent.com/crazyguitar/pysheeet/master/LICENSE\">\n        <img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" alt=\"License MIT\">\n      </a>\n    </p>\n\nIntroduction\n=============\n\nPysheeet was created with intention of collecting python code snippets for\nreducing coding hours and making life easier and faster. Any contributions are welcome.\nPlease feel free to fork and send a pull request to this project.\n\n\nWhat’s New In Python 3\n======================\n\nThis part only provides a quick glance at some important features in Python 3.\nIf you're interested in all of the most important features, please read the\nofficial document, `What’s New in Python <https://docs.python.org/3/whatsnew/index.html>`_.\n\n- `New in Python3 <docs/notes/python-new-py3.rst>`_\n\n\nCheat Sheet\n===========\n\n- `Code Style <docs/notes/python-code-style.rst>`_\n- `From Scratch <docs/notes/python-basic.rst>`_\n- `Future <docs/notes/python-future.rst>`_\n- `Unicode <docs/notes/python-unicode.rst>`_\n- `List <docs/notes/python-list.rst>`_\n- `Set <docs/notes/python-set.rst>`_\n- `Dictionary <docs/notes/python-dict.rst>`_\n- `Heap <docs/notes/python-heap.rst>`_\n- `Function <docs/notes/python-func.rst>`_\n- `Class <docs/notes/python-object.rst>`_\n- `Generator <docs/notes/python-generator.rst>`_\n- `Typing <docs/notes/python-typing.rst>`_\n- `Time <docs/notes/python-date.rst>`_\n- `File <docs/notes/python-io.rst>`_\n- `Operating System <docs/notes/python-os.rst>`_\n\n\nAdvanced Cheat Sheet\n====================\n\n- `Regular expression <docs/notes/python-rexp.rst>`_\n- `Socket <docs/notes/python-socket.rst>`_\n- `Asyncio <docs/notes/python-asyncio.rst>`_\n- `Concurrency <docs/notes/python-concurrency.rst>`_\n- `Sqlalchemy <docs/notes/python-sqlalchemy.rst>`_\n- `Security <docs/notes/python-security.rst>`_\n- `SSH <docs/notes/python-ssh.rst>`_\n- `Tests <docs/notes/python-tests.rst>`_\n- `C Extensions <docs/notes/python-c-extensions.rst>`_\n\n\nAppendix\n=========\n\n- `Why does Decorator Need @wraps <docs/appendix/python-decorator.rst>`_\n- `A Hitchhikers Guide to Asynchronous Programming <docs/appendix/python-concurrent.rst>`_\n- `Asyncio behind the Scenes <docs/appendix/python-asyncio.rst>`_\n- `PEP 572 and the walrus operator <docs/appendix/python-walrus.rst>`_\n- `Python Interpreter in GNU Debugger <docs/appendix/python-gdb.rst>`_\n\nPDF Version\n============\n\n`pdf`_\n\n.. _pdf: https://media.readthedocs.org/pdf/pysheeet/latest/pysheeet.pdf\n\nHow to run the server\n=======================\n\n.. code-block:: bash\n\n    $ virtualenv venv\n    $ . venv/bin/activate\n    $ pip install -r requirements.txt\n    $ make\n    $ python app.py\n\n    # URL: localhost:5000\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 2.71484375,
          "content": "# -*- coding: utf-8 -*-\n\"\"\"This is a simple cheatsheet webapp.\"\"\"\n\nimport os\nfrom flask import Flask, abort, send_from_directory, render_template\nfrom flask_sslify import SSLify\nfrom flask_seasurf import SeaSurf\nfrom flask_talisman import Talisman\nfrom werkzeug.exceptions import NotFound\nfrom werkzeug.utils import safe_join\n\nDIR = os.path.dirname(os.path.realpath(__file__))\nROOT = os.path.join(DIR, \"docs\", \"_build\", \"html\")\n\n\ndef find_key(token):\n    \"\"\"Find the key from the environment variable.\"\"\"\n    if token == os.environ.get(\"ACME_TOKEN\"):\n        return os.environ.get(\"ACME_KEY\")\n    for k, v in os.environ.items():\n        if v == token and k.startswith(\"ACME_TOKEN_\"):\n            n = k.replace(\"ACME_TOKEN_\", \"\")\n            return os.environ.get(\"ACME_KEY_{}\".format(n))\n\n\ncsp = {\n    \"default-src\": \"'none'\",\n    \"style-src\": [\"'self'\", \"'unsafe-inline'\"],\n    \"script-src\": [\n        \"'self'\",\n        \"*.cloudflare.com\",\n        \"*.googletagmanager.com\",\n        \"*.google-analytics.com\",\n        \"*.carbonads.com\",\n        \"*.carbonads.net\",\n        \"'unsafe-inline'\",\n        \"'unsafe-eval'\",\n    ],\n    \"form-action\": \"'self'\",\n    \"base-uri\": \"'self'\",\n    \"img-src\": \"*\",\n    \"frame-src\": \"ghbtns.com\",\n    \"frame-ancestors\": \"'none'\",\n    \"object-src\": \"'none'\",\n}\n\nfeature_policy = {\"geolocation\": \"'none'\"}\n\napp = Flask(__name__, template_folder=ROOT)\napp.config[\"SECRET_KEY\"] = os.urandom(16)\napp.config[\"SESSION_COOKIE_NAME\"] = \"__Secure-session\"\napp.config[\"SESSION_COOKIE_SAMESITE\"] = \"Strict\"\napp.config[\"CSRF_COOKIE_NAME\"] = \"__Secure-csrf-token\"\napp.config[\"CSRF_COOKIE_HTTPONLY\"] = True\napp.config[\"CSRF_COOKIE_SECURE\"] = True\ncsrf = SeaSurf(app)\ntalisman = Talisman(\n    app,\n    force_https=False,\n    content_security_policy=csp,\n    feature_policy=feature_policy,\n)\n\nif \"DYNO\" in os.environ:\n    sslify = SSLify(app, permanent=True, skips=[\".well-known\"])\n\n\n@app.errorhandler(404)\ndef page_not_found(e):\n    \"\"\"Redirect to 404.html.\"\"\"\n    return render_template(\"404.html\"), 404\n\n\n@app.route(\"/<path:path>\")\ndef static_proxy(path):\n    \"\"\"Find static files safely.\"\"\"\n    try:\n        return send_from_directory(ROOT, path)\n    except NotFound:\n        # Handle file not found or directory errors\n        return render_template(\"404.html\"), 404\n\n\n@app.route(\"/\")\ndef index_redirection():\n    \"\"\"Redirecting index file.\"\"\"\n    return send_from_directory(ROOT, \"index.html\")\n\n\n@csrf.exempt\n@app.route(\"/.well-known/acme-challenge/<token>\")\ndef acme(token):\n    \"\"\"Find the acme-key from environment variable.\"\"\"\n    key = find_key(token)\n    if key is None:\n        abort(404)\n    return key\n\n\nif __name__ == \"__main__\":\n    # Only run the app in debug mode during development\n    app.run(debug=os.environ.get(\"FLASK_ENV\") == \"development\")\n"
        },
        {
          "name": "app_test.py",
          "type": "blob",
          "size": 4.591796875,
          "content": "\"\"\"Test app.py.\"\"\"\n\nimport multiprocessing\nimport platform\nimport unittest\nimport requests\nimport os\n\nfrom werkzeug.exceptions import NotFound\nfrom flask_testing import LiveServerTestCase\n\nfrom app import acme, find_key, static_proxy, index_redirection, page_not_found\n\nfrom app import ROOT\nfrom app import app\n\n\nif platform.system() == \"Darwin\":\n    multiprocessing.set_start_method(\"fork\")\n\n\nclass PysheeetTest(LiveServerTestCase):\n    \"\"\"Test app.\"\"\"\n\n    def create_app(self):\n        \"\"\"Create a app for test.\"\"\"\n        # remove env ACME_TOKEN*\n        for k, v in os.environ.items():\n            if not k.startswith(\"ACME_TOKEN\"):\n                continue\n            del os.environ[k]\n\n        self.token = \"token\"\n        self.key = \"key\"\n        os.environ[\"ACME_TOKEN\"] = self.token\n        os.environ[\"ACME_KEY\"] = self.key\n        os.environ[\"FLASK_ENV\"] = \"development\"\n        os.environ[\"FLASK_DEBUG\"] = \"1\"\n        app.config[\"TESTING\"] = True\n        app.config[\"LIVESERVER_PORT\"] = 0\n        return app\n\n    def check_security_headers(self, resp):\n        \"\"\"Check security headers.\"\"\"\n        headers = resp.headers\n        self.assertTrue(\"Content-Security-Policy\" in headers)\n        self.assertTrue(\"X-Content-Type-Options\" in headers)\n        self.assertTrue(\"Content-Security-Policy\" in headers)\n        self.assertTrue(\"Feature-Policy\" in headers)\n        self.assertEqual(headers[\"Feature-Policy\"], \"geolocation 'none'\")\n        self.assertEqual(headers[\"X-Frame-Options\"], \"SAMEORIGIN\")\n\n    def check_csrf_cookies(self, resp):\n        \"\"\"Check cookies for csrf.\"\"\"\n        cookies = resp.cookies\n        self.assertTrue(cookies.get(\"__Secure-session\"))\n        self.assertTrue(cookies.get(\"__Secure-csrf-token\"))\n\n    def test_index_redirection_req(self):\n        \"\"\"Test that send a request for the index page.\"\"\"\n        url = self.get_server_url()\n        resp = requests.get(url)\n        self.check_security_headers(resp)\n        self.check_csrf_cookies(resp)\n        self.assertEqual(resp.status_code, 200)\n\n    def test_static_proxy_req(self):\n        \"\"\"Test that send a request for notes.\"\"\"\n        htmls = os.listdir(os.path.join(ROOT, \"notes\"))\n        url = self.get_server_url()\n        for h in htmls:\n            u = url + \"/notes/\" + h\n            resp = requests.get(u)\n            self.check_security_headers(resp)\n            self.check_csrf_cookies(resp)\n            self.assertEqual(resp.status_code, 200)\n\n    def test_acme_req(self):\n        \"\"\"Test that send a request for a acme key.\"\"\"\n        url = self.get_server_url()\n        u = url + \"/.well-known/acme-challenge/token\"\n        resp = requests.get(u)\n        self.check_security_headers(resp)\n        self.assertEqual(resp.status_code, 200)\n\n        u = url + \"/.well-known/acme-challenge/foo\"\n        resp = requests.get(u)\n        self.check_security_headers(resp)\n        self.assertEqual(resp.status_code, 404)\n\n    def test_find_key(self):\n        \"\"\"Test that find a acme key from the environment.\"\"\"\n        token = self.token\n        key = self.key\n        self.assertEqual(find_key(token), key)\n\n        del os.environ[\"ACME_TOKEN\"]\n        del os.environ[\"ACME_KEY\"]\n\n        os.environ[\"ACME_TOKEN_ENV\"] = token\n        os.environ[\"ACME_KEY_ENV\"] = key\n        self.assertEqual(find_key(token), key)\n\n        del os.environ[\"ACME_TOKEN_ENV\"]\n        del os.environ[\"ACME_KEY_ENV\"]\n\n    def test_acme(self):\n        \"\"\"Test that send a request for a acme key.\"\"\"\n        token = self.token\n        key = self.key\n        self.assertEqual(acme(token), key)\n\n        token = token + \"_env\"\n        key = key + \"_env\"\n        os.environ[\"ACME_TOKEN_ENV\"] = token\n        os.environ[\"ACME_KEY_ENV\"] = key\n        self.assertEqual(find_key(token), key)\n\n        del os.environ[\"ACME_TOKEN_ENV\"]\n        del os.environ[\"ACME_KEY_ENV\"]\n\n        self.assertRaises(NotFound, acme, token)\n\n    def test_index_redirection(self):\n        \"\"\"Test index page redirection.\"\"\"\n        resp = index_redirection()\n        self.assertEqual(resp.status_code, 200)\n        resp.close()\n\n    def test_static_proxy(self):\n        \"\"\"Test that request static pages.\"\"\"\n        htmls = os.listdir(os.path.join(ROOT, \"notes\"))\n\n        for h in htmls:\n            u = \"notes/\" + h\n            resp = static_proxy(u)\n            self.assertEqual(resp.status_code, 200)\n            resp.close()\n\n        u = \"notes/../conf.py\"\n        _, code = static_proxy(u)\n        self.assertEqual(code, 404)\n\n    def test_page_not_found(self):\n        \"\"\"Test page not found.\"\"\"\n        html, status_code = page_not_found(None)\n        self.assertEqual(status_code, 404)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.5537109375,
          "content": "bandit==1.7.2\ncoverage==6.5.0\ncoveralls==3.3.1\nFlask==2.3.3\nFlask-SSLify==0.1.5\nFlask-Testing==0.8.1\nFlask-SeaSurf==1.1.1\nflask-talisman==1.1.0\ngunicorn==22.0.0\npycodestyle==2.11.1\npydocstyle==6.3.0\nrequests==2.32.0\nSphinx==7.1.2\nWerkzeug==3.0.6\nsetuptools>=65.5.1 # not directly required, pinned by Snyk to avoid a vulnerability\njinja2>=3.1.3 # not directly required, pinned by Snyk to avoid a vulnerability\nurllib3>=2.2.2 # not directly required, pinned by Snyk to avoid a vulnerability\nzipp>=3.19.1 # not directly required, pinned by Snyk to avoid a vulnerability\n"
        },
        {
          "name": "runtime.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "python-3.10.5\n"
        }
      ]
    }
  ]
}