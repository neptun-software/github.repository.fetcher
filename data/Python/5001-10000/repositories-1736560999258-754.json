{
  "metadata": {
    "timestamp": 1736560999258,
    "page": 754,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mnotgod96/AppAgent",
      "stars": 5336,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2023 Jiaxuan Liu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.8994140625,
          "content": "# AppAgent-[TencentQQGYLab](https://github.com/TencentQQGYLab)\n\n<div align=\"center\">\n\n<a href='https://arxiv.org/abs/2312.13771'><img src='https://img.shields.io/badge/arXiv-2312.13771-b31b1b.svg'></a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n <a href='https://appagent-official.github.io'><img src='https://img.shields.io/badge/Project-Page-Green'></a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n <a href='https://github.com/buaacyw/GaussianEditor/blob/master/LICENSE.txt'><img src='https://img.shields.io/badge/License-MIT-blue'></a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n <a href=\"https://twitter.com/dr_chizhang\"><img src=\"https://img.shields.io/twitter/follow/dr_chizhang?style=social\" alt=\"Twitter Follow\"></a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n <br><br>\n <!-- [![Model](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Model-blue)](https://huggingface.co/listen2you002/ChartLlama-13b) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n[![Dataset](https://img.shields.io/badge/%F0%9F%A4%97%20Hugging%20Face-Dataset-blue)](https://huggingface.co/datasets/listen2you002/ChartLlama-Dataset) -->\n\n[**Chi Zhang***‚Ä†](https://icoz69.github.io/), [**Zhao Yang***](https://github.com/yz93), [**Jiaxuan Liu***](https://www.linkedin.com/in/jiaxuan-liu-9051b7105/), [Yucheng Han](http://tingxueronghua.github.io), [Xin Chen](https://chenxin.tech/), [Zebiao Huang](),\n<br>\n[Bin Fu](https://openreview.net/profile?id=~BIN_FU2), [Gang Yu‚ú¶](https://www.skicyyu.org/)\n<br>\n(* equal contribution, ‚Ä† Project Leader, ‚ú¶ Corresponding Author )\n</div>\n\n\n![](./assets/teaser.png)\n\n‚ÑπÔ∏èShould you encounter any issues‚ö†Ô∏è while using our project, please feel free to report them on [GitHub Issues](https://github.com/mnotgod96/AppAgent/issues) or reach out to [Dr. Chi Zhang](https://icoz69.github.io/) via email at dr.zhang.chi@outlook.com.\n\n‚ÑπÔ∏èThis project will be synchronously updated on the official [TencentQQGYLab](https://github.com/TencentQQGYLab/AppAgent) Github Page.\n\n## üìù Changelog\n- __[2024.2.8]__: Added `qwen-vl-max` (ÈÄö‰πâÂçÉÈóÆ-VL) as an alternative multi-modal model. The model is currently free to use but has a relatively poorer performance compared with GPT-4V.\n- __[2024.1.31]__: Released the [evaluation benchmark](https://github.com/mnotgod96/AppAgent/blob/main/assets/testset.md) used during our testing of AppAgent\n- __[2024.1.2]__: üî•Added an optional method for the agent to bring up a grid overlay on the screen to **tap/swipe anywhere** on the screen.\n- __[2023.12.26]__: Added [Tips](#tips) section for better use experience; added instruction for using the **Android Studio emulator** for\n  users who do not have Android devices.\n- __[2023.12.21]__: üî•üî• Open-sourced the git repository, including the detailed configuration steps to implement our AppAgent!\n\n\n## üîÜ Introduction\n\nWe introduce a novel LLM-based multimodal agent framework designed to operate smartphone applications. \n\nOur framework enables the agent to operate smartphone applications through a simplified action space, mimicking human-like interactions such as tapping and swiping. This novel approach bypasses the need for system back-end access, thereby broadening its applicability across diverse apps.\n\nCentral to our agent's functionality is its innovative learning method. The agent learns to navigate and use new apps either through autonomous exploration or by observing human demonstrations. This process generates a knowledge base that the agent refers to for executing complex tasks across different applications.\n\n\n## ‚ú® Demo\n\nThe demo video shows the process of using AppAgent to follow a user on X (Twitter) in the deployment phase.\n\nhttps://github.com/mnotgod96/AppAgent/assets/40715314/db99d650-dec1-4531-b4b2-e085bfcadfb7\n\nAn interesting experiment showing AppAgent's ability to pass CAPTCHA.\n\nhttps://github.com/mnotgod96/AppAgent/assets/27103154/5cc7ba50-dbab-42a0-a411-a9a862482548\n\nAn example of using the grid overlay to locate a UI element that is not labeled with a numeric tag.\n\nhttps://github.com/mnotgod96/AppAgent/assets/27103154/71603333-274c-46ed-8381-2f9a34cdfc53\n\n## üöÄ Quick Start\n\nThis section will guide you on how to quickly use `gpt-4-vision-preview` (or `qwen-vl-max`) as an agent to complete specific tasks for you on\nyour Android app.\n\n### ‚öôÔ∏è Step 1. Prerequisites\n\n1. On your PC, download and install [Android Debug Bridge](https://developer.android.com/tools/adb) (adb) which is a\n   command-line tool that lets you communicate with your Android device from the PC.\n\n2. Get an Android device and enable the USB debugging that can be found in Developer Options in Settings.\n\n3. Connect your device to your PC using a USB cable.\n\n4. (Optional) If you do not have an Android device but still want to try AppAgent. We recommend you download\n   [Android Studio](https://developer.android.com/studio/run/emulator) and use the emulator that comes with it.\n   The emulator can be found in the device manager of Android Studio. You can install apps on an emulator by\n   downloading APK files from the internet and dragging them to the emulator.\n   AppAgent can detect the emulated device and operate apps on it just like operating a real device.\n\n   <img width=\"570\" alt=\"Screenshot 2023-12-26 at 22 25 42\" src=\"https://github.com/mnotgod96/AppAgent/assets/27103154/5d76b810-1f42-44c8-b024-d63ec7776789\">\n\n5. Clone this repo and install the dependencies. All scripts in this project are written in Python 3 so make sure you\n   have installed it.\n\n```bash\ncd AppAgent\npip install -r requirements.txt\n```\n\n### ü§ñ Step 2. Configure the Agent\n\nAppAgent needs to be powered by a multi-modal model which can receive both text and visual inputs. During our experiment\n, we used `gpt-4-vision-preview` as the model to make decisions on how to take actions to complete a task on the smartphone.\n\nTo configure your requests to GPT-4V, you should modify `config.yaml` in the root directory.\nThere are two key parameters that must be configured to try AppAgent:\n1. OpenAI API key: you must purchase an eligible API key from OpenAI so that you can have access to GPT-4V.\n2. Request interval: this is the time interval in seconds between consecutive GPT-4V requests to control the frequency \nof your requests to GPT-4V. Adjust this value according to the status of your account.\n\nOther parameters in `config.yaml` are well commented. Modify them as you need.\n\n> Be aware that GPT-4V is not free. Each request/response pair involved in this project costs around $0.03. Use it wisely.\n\nYou can also try `qwen-vl-max` (ÈÄö‰πâÂçÉÈóÆ-VL) as the alternative multi-modal model to power the AppAgent. The model is currently \nfree to use but its performance in the context of AppAgent is poorer compared with GPT-4V.\n\nTo use it, you should create an Alibaba Cloud account and [create a Dashscope API key](https://help.aliyun.com/zh/dashscope/developer-reference/activate-dashscope-and-create-an-api-key?spm=a2c4g.11186623.0.i1) to fill in the `DASHSCOPE_API_KEY` field \nin the `config.yaml` file. Change the `MODEL` field from `OpenAI` to `Qwen` as well.\n\nIf you want to test AppAgent using your own models, you should write a new model class in `scripts/model.py` accordingly.\n\n### üîç Step 3. Exploration Phase\n\nOur paper proposed a novel solution that involves two phases, exploration, and deployment, to turn GPT-4V into a capable \nagent that can help users operate their Android phones when a task is given. The exploration phase starts with a task \ngiven by you, and you can choose to let the agent either explore the app on its own or learn from your demonstration. \nIn both cases, the agent generates documentation for elements interacted during the exploration/demonstration and \nsaves them for use in the deployment phase.\n\n#### Option 1: Autonomous Exploration\n\nThis solution features a fully autonomous exploration which allows the agent to explore the use of the app by attempting\nthe given task without any intervention from humans.\n\nTo start, run `learn.py` in the root directory. Follow the prompted instructions to select `autonomous exploration` \nas the operating mode and provide the app name and task description. Then, your agent will do the job for you. Under \nthis mode, AppAgent will reflect on its previous action making sure its action adheres to the given task and generate \ndocumentation for the elements explored.\n\n```bash\npython learn.py\n```\n\n#### Option 2: Learning from Human Demonstrations\n\nThis solution requires users to demonstrate a similar task first. AppAgent will learn from the demo and generate \ndocumentations for UI elements seen during the demo.\n\nTo start human demonstration, you should run `learn.py` in the root directory. Follow the prompted instructions to select \n`human demonstration` as the operating mode and provide the app name and task description. A screenshot of your phone \nwill be captured and all interactive elements shown on the screen will be labeled with numeric tags. You need to follow \nthe prompts to determine your next action and the target of the action. When you believe the demonstration is finished, \ntype `stop` to end the demo.\n\n```bash\npython learn.py\n```\n\n![](./assets/demo.png)\n\n### üì± Step 4. Deployment Phase\n\nAfter the exploration phase finishes, you can run `run.py` in the root directory. Follow the prompted instructions to enter \nthe name of the app, select the appropriate documentation base you want the agent to use and provide the task \ndescription. Then, your agent will do the job for you. The agent will automatically detect if there is documentation \nbase generated before for the app; if there is no documentation found, you can also choose to run the agent without any \ndocumentation (success rate not guaranteed).\n\n```bash\npython run.py\n```\n\n## üí° Tips<a name=\"tips\"></a>\n- For an improved experience, you might permit AppAgent to undertake a broader range of tasks through autonomous exploration, or you can directly demonstrate more app functions to enhance the app documentation. Generally, the more extensive the documentation provided to the agent, the higher the likelihood of successful task completion.\n- It is always a good practice to inspect the documentation generated by the agent. When you find some documentation not accurately\n  describe the function of the element, manually revising the documentation is also an option.\n\n\n## üìä Evaluation\nPlease refer to  [evaluation benchmark](https://github.com/mnotgod96/AppAgent/blob/main/assets/testset.md).\n\n\n## üìñ To-Do List\n- [ ] Incorporate more LLM APIs into the project.\n- [x] Open source the Benchmark.\n- [x] Open source the configuration.\n\n## üòâ Citation\n```bib\n@misc{yang2023appagent,\n      title={AppAgent: Multimodal Agents as Smartphone Users}, \n      author={Chi Zhang and Zhao Yang and Jiaxuan Liu and Yucheng Han and Xin Chen and Zebiao Huang and Bin Fu and Gang Yu},\n      year={2023},\n      eprint={2312.13771},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n```\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=mnotgod96/AppAgent&type=Date)](https://star-history.com/#mnotgod96/AppAgent&Date)\n\n\n## License\nThe [MIT license](./assets/license.txt).\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.yaml",
          "type": "blob",
          "size": 1.5986328125,
          "content": "MODEL: \"OpenAI\"  # The type of multi-modal LLM you would like to use to power the AppAgent, must be either OpenAI or Qwen\n\nOPENAI_API_BASE: \"https://api.openai.com/v1/chat/completions\"\nOPENAI_API_KEY: \"sk-\"  # Set the value to sk-xxx if you host the openai interface for open llm model\nOPENAI_API_MODEL: \"gpt-4-vision-preview\"  # The only OpenAI model by now that accepts visual input\nMAX_TOKENS: 300  # The max token limit for the response completion\nTEMPERATURE: 0.0  # The temperature of the model: the lower the value, the more consistent the output of the model\nREQUEST_INTERVAL: 10  # Time in seconds between consecutive GPT-4V requests\n\nDASHSCOPE_API_KEY: \"sk-\"  # The dashscope API key that gives you access to Qwen-VL model\nQWEN_MODEL: \"qwen-vl-max\"\n\nANDROID_SCREENSHOT_DIR: \"/sdcard\"  # Set the directory on your Android device to store the intermediate screenshots. Make sure the directory EXISTS on your phone!\nANDROID_XML_DIR: \"/sdcard\"  # Set the directory on your Android device to store the intermediate XML files used for determining locations of UI elements on your screen. Make sure the directory EXISTS on your phone!\n\nDOC_REFINE: false  # Set this to true will make the agent refine existing documentation based on the latest demonstration; otherwise, the agent will not regenerate a new documentation for elements with the same resource ID.\nMAX_ROUNDS: 20  # Set the round limit for the agent to complete the task\nDARK_MODE: false  # Set this to true if your app is in dark mode to enhance the element labeling\nMIN_DIST: 30  # The minimum distance between elements to prevent overlapping during the labeling process"
        },
        {
          "name": "learn.py",
          "type": "blob",
          "size": 2.154296875,
          "content": "import argparse\nimport datetime\nimport os\nimport time\n\nfrom scripts.utils import print_with_color\n\narg_desc = \"AppAgent - exploration phase\"\nparser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=arg_desc)\nparser.add_argument(\"--app\")\nparser.add_argument(\"--root_dir\", default=\"./\")\nargs = vars(parser.parse_args())\n\napp = args[\"app\"]\nroot_dir = args[\"root_dir\"]\n\n\nprint_with_color(\"Welcome to the exploration phase of AppAgent!\\nThe exploration phase aims at generating \"\n                 \"documentations for UI elements through either autonomous exploration or human demonstration. \"\n                 \"Both options are task-oriented, which means you need to give a task description. During \"\n                 \"autonomous exploration, the agent will try to complete the task by interacting with possible \"\n                 \"elements on the UI within limited rounds. Documentations will be generated during the process of \"\n                 \"interacting with the correct elements to proceed with the task. Human demonstration relies on \"\n                 \"the user to show the agent how to complete the given task, and the agent will generate \"\n                 \"documentations for the elements interacted during the human demo. To start, please enter the \"\n                 \"main interface of the app on your phone.\", \"yellow\")\nprint_with_color(\"Choose from the following modes:\\n1. autonomous exploration\\n2. human demonstration\\n\"\n                 \"Type 1 or 2.\", \"blue\")\nuser_input = \"\"\nwhile user_input != \"1\" and user_input != \"2\":\n    user_input = input()\n\nif not app:\n    print_with_color(\"What is the name of the target app?\", \"blue\")\n    app = input()\n    app = app.replace(\" \", \"\")\n\nif user_input == \"1\":\n    os.system(f\"python scripts/self_explorer.py --app {app} --root_dir {root_dir}\")\nelse:\n    demo_timestamp = int(time.time())\n    demo_name = datetime.datetime.fromtimestamp(demo_timestamp).strftime(f\"demo_{app}_%Y-%m-%d_%H-%M-%S\")\n    os.system(f\"python scripts/step_recorder.py --app {app} --demo {demo_name} --root_dir {root_dir}\")\n    os.system(f\"python scripts/document_generation.py --app {app} --demo {demo_name} --root_dir {root_dir}\")\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0634765625,
          "content": "argparse\ncolorama\ndashscope\nopencv-python\npyshine\npyyaml\nrequests"
        },
        {
          "name": "run.py",
          "type": "blob",
          "size": 1.0146484375,
          "content": "import argparse\nimport os\n\nfrom scripts.utils import print_with_color\n\narg_desc = \"AppAgent - deployment phase\"\nparser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=arg_desc)\nparser.add_argument(\"--app\")\nparser.add_argument(\"--root_dir\", default=\"./\")\nargs = vars(parser.parse_args())\n\napp = args[\"app\"]\nroot_dir = args[\"root_dir\"]\n\nprint_with_color(\"Welcome to the deployment phase of AppAgent!\\nBefore giving me the task, you should first tell me \"\n                 \"the name of the app you want me to operate and what documentation base you want me to use. I will \"\n                 \"try my best to complete the task without your intervention. First, please enter the main interface \"\n                 \"of the app on your phone and provide the following information.\", \"yellow\")\n\nif not app:\n    print_with_color(\"What is the name of the target app?\", \"blue\")\n    app = input()\n    app = app.replace(\" \", \"\")\n\nos.system(f\"python scripts/task_executor.py --app {app} --root_dir {root_dir}\")\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}