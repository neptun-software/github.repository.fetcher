{
  "metadata": {
    "timestamp": 1736560804223,
    "page": 499,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "brython-dev/brython",
      "stars": 6416,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 2.1201171875,
          "content": "# Custom Useful Git configs\n# USER AUTH ###################################################################\n#[user]\n#    name = Your Real Name Here\n#    email = YourMailHere@gmail.com\n#[github]\n#    user = YourGitHubUser\n\n\n# Git Core ####################################################################\n#[core]\n#    safecrlf = warn\n#    autocrlf = input  # input on Linux, auto on Windows\n#    compression = 9\n#    loosecompression = 9\n#    askpass = ssh-askpass  # Use a GUI dialog to Ask Password on Linux\n#    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol,tab-in-indent,tabwidth=4\n\n\n# Credential Helper, dont ask password every time #############################\n[credential]\n    helper = cache\n#   helper = osxkeychain  # for Mac OsX\n\n\n# Autocorrect for mistyped git commands #######################################\n[help]\n    autocorrect = 1\n\n\n# PRETTY COLORS ###############################################################\n[color]\n    ui = auto\n    diff = auto\n    grep = auto\n    interactive = auto\n    showbranch = auto\n    status = auto\n\n\n[color \"branch\"]\n    current = yellow bold\n    local = green bold\n    remote = cyan bold\n\n\n[color \"diff\"]\n    meta = yellow bold\n    frag = magenta bold\n    old = red blink\n    new = green bold\n    whitespace = red reverse\n\n\n[color \"status\"]\n    added = green bold\n    changed = yellow bold\n    untracked = red bold\n\n\n# Security Check of SSL for HTTPS #############################################\n[http]\n    sslVerify = true\n\n\n# alias to commands ###########################################################\n[alias]\n    assume = update-index --assume-unchanged\n    unassume = update-index --no-assume-unchanged\n    assumed = \"!git ls-files -v | grep ^h | cut -c 3-\"\n    unassumeall = !git assumed | xargs git update-index --no-assume-unchanged\n    assumeall = \"!git st -s | awk {'print $2'} | xargs git assume\"\n    #\n    ours = \"!f() { git checkout --ours $@ && git add $@; }; f\"\n    theirs = \"!f() { git checkout --theirs $@ && git add $@; }; f\"\n    #\n    whois = \"!sh -c 'git log -i -1 --pretty=\\\"format:%an <%ae>\\n\\\" --author=\\\"$1\\\"' -\"\n    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0400390625,
          "content": "# Compiled source\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n*.swp\n\n\n# Packages\n# its better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n*.tar.bz2\n\n# Logs and databases\n*.log\n*.sql\n*.sqlite\n\n\n# OS generated files\n.DS_Store\n.DS_Store?\n._*\n.Trashes\nehthumbs.db\nThumbs.db\n*.py[cod]\n.directory\n*~\n\n\n# C extensions\n*.so\n\n\n# Packages\n*.egg\n*.egg-info\n.installed.cfg\n__pycache__/\n\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n\n# Unit test / coverage reports\n# .coverage\n.tox\nnosetests.xml\n\n\n# Translations\n*.mo\n\n\n# Database Sqlite3\n*.db\n\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n*.nja\n\n# Temporary QUnit folder\n#qunit/\n\n# Node modules (for testem & friends)\nnode_modules/\n\n# Files created by make_dist\nnpm/*.js\nsetup/data/*.js\nscripts/last_modifs.json\nscripts/python.gram.js_actions\nscripts/python*.gram\nwww/src/brython_no_static.js\nwww/src/full_grammar.js\nwww/static_tutorial/\n\n# Files created by make_doc\nwww/static_doc\n\n# Jetbrains IDEs\n*.iml\n.idea"
        },
        {
          "name": ".testem.json",
          "type": "blob",
          "size": 0.0693359375,
          "content": "{\n    \"browser_disconnect_timeout\": \"30\",\n    \"tap_quiet_logs\": true\n}\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.2607421875,
          "content": "os: linux\ndist: jammy\nlanguage: node_js\nnode_js: node\n\njobs:\n  include:\n    - addons:\n        chrome: \"stable\"\n        firefox: \"latest\"\n        apt:\n          sources:\n            - sourceline: 'ppa:deadsnakes/ppa'\n          packages:\n            - libnss3\n            - python3.13\n      services:\n        - xvfb\n      before_install:\n        - npm install testem\n        - ./node_modules/.bin/testem launchers\n\n      before_script:\n        - (cd scripts && python3.13 make_doc.py)\n        - (cd scripts && python3.13 make_dist.py)\n\n      script:\n        # Some day, put back Chrome or \"Headless Chrome\" as well. For some reason\n        # as of 2022 Aug 23, the testem websocket connection is sometimes reset,\n        # which prevents the browser from reporting results to the testem process\n        # when running on Chrome.\n        - ./node_modules/.bin/testem --launch Firefox -t www/tests/run_tests.html ci\n\n    - language: python\n      python: '3.13'\n      before_install: pip install --upgrade pip\n      before_script: pip install flake8\n      script:\n        - EXCLUDE=./.*,www/src/Lib,www/tests\n        # stop the build if there are Python syntax errors or undefined names\n        - flake8 --builtins=__BRYTHON__ --exclude=$EXCLUDE --select=E9,F63,F7,F82 --show-source --statistics\n"
        },
        {
          "name": ".travis.yml.tmpl",
          "type": "blob",
          "size": 1.2880859375,
          "content": "os: linux\ndist: jammy\nlanguage: node_js\nnode_js: node\n\njobs:\n  include:\n    - addons:\n        chrome: \"stable\"\n        firefox: \"latest\"\n        apt:\n          sources:\n            - sourceline: 'ppa:deadsnakes/ppa'\n          packages:\n            - libnss3\n            - python[[version]]\n      services:\n        - xvfb\n      before_install:\n        - npm install testem\n        - ./node_modules/.bin/testem launchers\n\n      before_script:\n        - (cd scripts && python[[version]] make_doc.py)\n        - (cd scripts && python[[version]] make_dist.py)\n\n      script:\n        # Some day, put back Chrome or \"Headless Chrome\" as well. For some reason\n        # as of 2022 Aug 23, the testem websocket connection is sometimes reset,\n        # which prevents the browser from reporting results to the testem process\n        # when running on Chrome.\n        - ./node_modules/.bin/testem --launch Firefox -t www/tests/run_tests.html ci\n\n    - language: python\n      python: '[[version]]'\n      before_install: pip install --upgrade pip\n      before_script: pip install flake8\n      script:\n        - EXCLUDE=./.*,www/src/Lib,www/tests\n        # stop the build if there are Python syntax errors or undefined names\n        - flake8 --builtins=__BRYTHON__ --exclude=$EXCLUDE --select=E9,F63,F7,F82 --show-source --statistics\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.337890625,
          "content": "# How to contribute\n\nIn the Brython project we welcome contributions from everyone. There are\nmany ways how you can contribute and not all of them require you to be\nproficient in Python or Javascript (though some knowledge of at least one\nof these is of course necessary). Also contributions are not limited to\ncoding. We also welcome\n\n* contributions to the documentation\n* participating in discussions on the [mailing list](https://groups.google.com/forum/#!forum/brython)\n* filing and/or triaging [issues](https://github.com/brython-dev/brython/issues) on GitHub\n* talking about Brython at conferences, blogging about it, promoting it in\n  forums\n* giving information about the applications developed with it\n\nPlease note that we do **not** welcome financial contributions. Although we\nappreciate the good intentions, in our opinion, these would ruin the fun of\nthe project and introduce a risk of tensions between the core team and\ncontributors paid for their work on Brython. Our policy is quite strict in\nthis regard and we do not accept them in any form (bounties, ...). If you like\nBrython and would like to express your appreciation for the project\nfinancially, consider donating to the\n[Python Software Foundation](https://www.python.org/psf/donations/).\n\nThe documentation included in the project and on brython.info is provided in\nEnglish and French. Translations in other languages are very much\nappreciated, but because it is important that the official documentation\nremains up-to-date, they should be developed in a fork of the project.\n\n## Getting Started\n\n* Make sure you have a [GitHub account](https://github.com/signup/free).\n* [Create an Issue](https://github.com/brython-dev/brython/issues/new) on\n  Github, assuming one does not already exist. Clearly describe the issue\n  including steps to reproduce when it is a bug.\n* Fork the repository on GitHub.\n* clone your repo using git\n* (*optionally*) install the development requirements using [pipenv](https://docs.pipenv.org/) (**strongly** recommended):\n\n```bash\n    $ pipenv install --dev\n```\n  or (not recommended)\n```bash\n    $ pip install -r requirements.txt\n```\n  If you used `pipenv`, the development requirements are installed into a separate\n  [virtual environment](https://docs.python.org/3/tutorial/venv.html) which you can activate\n  by running\n```bash\n    $ pipenv shell\n```\n  from the terminal.\n\n\n## Making Changes\n\n* Create a topic branch from where you want to base your work. To quickly\n  create a topic branch based on master, run\n```bash\n    $ git checkout -b fix/master/my_contribution master\n```\n* Make commits of logical units.\n* For Javascript code, there is a\n  [Javascript coding style](https://github.com/brython-dev/brython/wiki/Javascript-coding-style-for-Brython-scripts).\n  It is not mandatory and pull requests won't be rejected for this reason, but\n  it helps having a uniform style for all scripts.\n* Check for unnecessary whitespace with `git diff --check` before committing.\n* Make sure your commit messages are in the proper format. If the commit\n  addresses an issue on Github, start the first line of the commit with the\n  issue number in parentheses.\n* If possible, write a unit-test for your changes (see below).\n* Run _all_ the test suite (see below) to ensure nothing else was accidentally\n  broken.\n\n### Creating distribution\n\nRun `make_dist.py` script with a CPython interpreter of the same version as\nBrython (eg CPython 3.8 for Brython 3.8) to generate these files after\nchanging the source:\n\n- `www/src/brython.js`\n- `www/src/brython_stdlib.js`\n- `www/src/stdlib_paths.js`\n- `www/src/version_info.js`\n\n```bash\ncd scripts\npython3 make_dist.py\n```\n\n## Repository Layout\n\n  - `scripts`   - miscellaneous release helper scripts\n  - `www`\n    - `doc` - directory with documentation (as visible [here](http://www.brython.info/static_doc/en/intro.html?lang=en)); documentation is generated using the `scripts/make_doc.py` script.\n    - `gallery` - a directory containing example Brython programs (see [Gallery](http://www.brython.info/gallery/gallery_en.html?lang=en))\n    - `src`\n        - `Lib` - Brython implementation of the modules from Python's standard\n          library. Quite a few files here are just copies of the corresponding\n          file from the CPython distribution; The files here are written in\n          Python.\n        - `libs` - Javascript implementation of some modules from the standard\n          library (for which a Python implementation is either too slow or\n          cumbersome)\n        - `brython.js`, `brython_stdlib.js` - the Brython release files\n          (generated by `scripts/make_dist.py`)\n        - `python_tokenizer.js` the Python tokenizer (produces tokens similar\n           to those produced by the CPython __`tokenize`__ module)\n        - `py2js.js` the Python parser & compiler (see [Brython Internals](https://github.com/brython-dev/brython/wiki/How-Brython-works) for more details)\n        - `loaders.js` executes the tasks created by `py2js.js` (mostly related to imports) and runs the scripts\n        - `brython_builtins.js` - initialize attributes of the object\n          `__BRYTHON__`\n        - `py_bytes.js`, `py_complex.js`, `py_dict.js`, `py_float.js`,\n          `py_int.js`, `py_list.js`, `py_long_int.js`, `py_set.js`,\n          `py_string.js`, `py_range_slice.js` - Javascript implementations of\n          Python types\n        - `py_generator.js` - Javascript implementation of generators\n        - `py_exceptions.js` - Basic implementation of Exceptions\n        - `py_builtin_functions.js` - Implementation of Python builtins\n        - `py_object.js` - Implementation of Python Objects (see [Brython Internals](https://github.com/brython-dev/brython/wiki/How-Brython-works) for more details)\n        - `py_utils.js` - various utility functions used at compile or\n          execution time\n        - `py_import.js`- the import machinery\n        - `async.js` - conversion for async features (Python coroutines / Javascript promises)\n        - `js_objects.js` - Python <-> Javascript interface (code for\n          accessing external javascript objects from Python and vice versa)\n        - `builtin_modules.js` - implementation of some Brython specific\n          modules (html, browser, ...)\n\n\n## Testing\n\n### Testing changes in development\n\nRunning\n\n```bash\n    $ python3 server.py\n```\nor if Brython was installed by pip:\n```bash\n    $ brython-cli --server\n```\n\n\nin a terminal window opened in the checkout directory should open a browser\nwindow with a local copy of the [www.brython.info](https://www.brython.info)\nwebsite. You can use the\n[console](http://localhost:8000/tests/console.html?lang=en) and\n[editor](http://localhost:8000/tests/editor.html?lang=en) sections to try\nout your changes to Brython.\n\n### Running the test suite before committing\n\nNavigating to [localhost:8000/tests](http://localhost:8000/tests/)\nyou can run the full Brython test suite manually by clicking on \"Run all\ntests\".\n\n\n### Writing tests\n\nTo prevent regressions, it is good practice to write tests for the bugs you\nfix or the features you add. These tests live in the `www/tests` subdirectory.\nTests for bugs should go into the file `www/tests/issues.py` (just add your test\nto the end of the file, preceding it with a comment mentioning the issue number\non Github and the issue title). Tests for substantial new functionality should\ngo into their own separate file (e.g. `www/tests/test_webworkers.py`). This file\nshould then be included in `www/tests/brython_test_utils/__init__.py` by adding\na line to the `discover_brython_test_modules` method.\n\nAll tests currently use plain assert statements (no unittest/setup/teardown).\n\n\n## Submitting Changes\n\n* Push your changes to a topic branch in your fork of the repository.\n* Submit a pull request to the [Brython repository](https://github.com/brython-dev/brython)\n\n## Additional Resources\n\n* [Brython Internals](https://github.com/brython-dev/brython/wiki/How-Brython-works)\n* [Brython development](https://github.com/brython-dev/brython/wiki/Brython-development)\n* [Brython Documentation](http://www.brython.info/static_doc/en/intro.html?lang=en)\n* [Mailing List](https://groups.google.com/forum/#!forum/brython)\n* [General GitHub documentation](https://help.github.com/)\n* [GitHub pull request documentation](https://help.github.com/articles/creating-a-pull-request/)\n\n## Acknowledgements\n\nParts of the document copied from / based on [Puppet contributing guide](https://github.com/puppetlabs/puppet/blob/master/CONTRIBUTING.md).\n\n"
        },
        {
          "name": "LICENCE.txt",
          "type": "blob",
          "size": 1.4619140625,
          "content": "Copyright (c) 2012, Pierre Quentel pierre.quentel@gmail.com\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nNeither the name of the <ORGANIZATION> nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Pipfile",
          "type": "blob",
          "size": 0.142578125,
          "content": "[[source]]\nverify_ssl = true\nname = \"pypi\"\nurl = \"https://pypi.python.org/simple\"\n\n[dev-packages]\n\n[packages]\n\n[requires]\npython_version = \"3.11\"\n"
        },
        {
          "name": "Pipfile.lock",
          "type": "blob",
          "size": 0.4501953125,
          "content": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"a780878b317b63cca0caab035df0712d62485e45d0c1adbfd58b9976f1cac7b6\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.11\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.python.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {},\n    \"develop\": {}\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.734375,
          "content": "brython\n=======\n\nBrython (Browser Python) is an implementation of Python 3 running in the\nbrowser, with an interface to the DOM elements and events.\n\nHere is a simple example of an HTML page running Python:\n\n```html\n<html>\n\n    <head>\n        <script type=\"text/javascript\" src=\"/path/to/brython.js\"></script>\n    </head>\n\n    <body>\n\n        <script type=\"text/python\">\n        from browser import document, alert\n\n        def echo(event):\n            alert(document[\"zone\"].value)\n\n        document[\"mybutton\"].bind(\"click\", echo)\n        </script>\n\n        <input id=\"zone\"><button id=\"mybutton\">click !</button>\n\n    </body>\n\n</html>\n```\n\nTo use Brython, all there is to do is:\n\n1. Load the script [brython.js](http://brython.info/src/brython.js \"Brython from the site brython.info\").\n2. Write Python code inside tags `<script type=\"text/python\">`.\n\n\nMain features\n=============\nBrython supports the syntax of [Python 3](https://www.python.org \"Python Homepage\"),\nincluding comprehensions, generators, metaclasses, imports, etc.\nand many modules of the CPython distribution.\n\nSince version 3.8.0, Brython implements the Python version of the same major /\nminor version number.\n\nIt includes libraries to interact with DOM elements and events,\nand with existing Javascript libraries such as jQuery, D3, Highcharts, Raphael etc.\nIt supports the latest specs of HTML5/CSS3, and can use CSS Frameworks like\nBootstrap3, LESS, SASS etc.\n\n\nGetting started\n===============\nZero install !\n--------------\nThe most simple way to get started, without anything to install, is to use the\ndistribution available online through [jsDelivr](https://www.jsdelivr.com/).\nYou can choose the latest stable release :\n\n```html\n<script type=\"text/javascript\"\n    src=\"https://cdn.jsdelivr.net/npm/brython@3.13.0/brython.min.js\">\n</script>\n```\n\nThe previous code will allow you to use raw python code, but if you import\nmodules from the standard library you have to load a single javascript file\nwith the [available stdlib](https://github.com/brython-dev/brython/tree/master/www/src/Lib):\n\n```html\n<script type=\"text/javascript\"\n    src=\"https://cdn.jsdelivr.net/npm/brython@3.13.0/brython_stdlib.js\">\n</script>\n```\n\njsDelivr supports version ranges, so if you want the latest of the\n3.13.x versions:\n\n```html\n<script type=\"text/javascript\"\n    src=\"https://cdn.jsdelivr.net/npm/brython@3.12/brython.min.js\">\n</script>\n<script type=\"text/javascript\"\n    src=\"https://cdn.jsdelivr.net/npm/brython@3.12/brython_stdlib.js\">\n</script>\n```\n\nor the latest of the 3.x.y versions:\n\n```html\n<script type=\"text/javascript\"\n    src=\"https://cdn.jsdelivr.net/npm/brython@3/brython.min.js\">\n</script>\n<script type=\"text/javascript\"\n    src=\"https://cdn.jsdelivr.net/npm/brython@3/brython_stdlib.js\">\n</script>\n```\n\nIf you want to use the latest development version, you can load these scripts\ninstead:\n```html\n<script src=\"https://raw.githack.com/brython-dev/brython/master/www/src/brython.js\"\n        crossorigin=\"anonymous\">\n</script>\n<script src=\"https://raw.githack.com/brython-dev/brython/master/www/src/brython_stdlib.js\"\n        crossorigin=\"anonymous\">\n</script>\n```\n\nLocal install\n-------------\nTo install Brython locally, if you have a CPython distribution with `pip` :\n\n```bash\npip install brython\n```\n\nthen create a new directory and run\n\n```bash\nbrython-cli install\n```\n\nor by loading the latest version of the Brython zip file from the\n[releases page](https://github.com/brython-dev/brython/releases).\n\nIn both cases, the distribution includes __brython.js__ (the core Brython engine)\nand __brython_stdlib.js__ (a bundle of all the files in the standard distribution).\n\nIt also includes the page __demo.html__ that shows a few examples of how you\ncan interact with a web page using Python as the scripting language : create\nnew elements, access and modify existing elements, create graphics, animations,\nsend Ajax requests, etc.\n\nTest Brython online\n===================\nIf you want to test Brython online you can visit the following:\n\n- [Editor](http://brython.info/tests/editor.html \"Online Brython Editor\")\n- [Console](http://brython.info/tests/console.html \"Online Brython Console\")\n\n\nGallery of examples\n===================\nThere is a [gallery of examples](http://brython.info/gallery/gallery_en.html \"gallery of examples\")\nwhere you can see simple and advanced examples using vanilla Brython or\ninteracting with Javascript libraries.\n\n\nDocumentation\n=============\nYou can start by reading the official [Brython tutorial](https://brython.info/static_tutorial/en/index.html).\n\nFull documentation is available on the [official site](http://www.brython.info \"Brython Homepage\").\nYou can read the docs in [English](http://brython.info/static_doc/en/intro.html) and\n[French](http://brython.info/static_doc/fr/intro.html).\n\nCurious about [how Brython works](https://github.com/brython-dev/brython/wiki/How%20Brython%20works) ?\n\nA [tutorial](https://github.com/brython-dev/brython/wiki/Writing-an-Android-application)\nexplains how to build Android applications with Brython.\n\nYou can also [Ask Brython Guru](https://gurubase.io/g/brython), it is a Brython-focused AI to answer your questions.\n\nCommunity (questions, feedback, issues, new features, ...)\n==========================================================\nYou can subscribe and post to the\n[mailing list](https://groups.google.com/forum/?fromgroups=#!forum/brython \"Brython Main Mailing List\").\n\nIf you find a bug/issue or do you want to see a new feature in Brython, please,\n[open a new issue](https://github.com/brython-dev/brython/issues \"Brython GitHub Issues\").\n\nIf you want to contribute to Brython, please read the [contributing guide](https://github.com/brython-dev/brython/blob/master/CONTRIBUTING.md).\n\nThank you\n=========\n\n- [BrowserStack](http://www.browserstack.com) for providing an access\nto their online testing environment.\n"
        },
        {
          "name": "README_pt_br.md",
          "type": "blob",
          "size": 5.5263671875,
          "content": "[![Stories in Ready](https://badge.waffle.io/brython-dev/brython.svg?label=ready&title=Ready)](http://waffle.io/brython-dev/brython)\n[![Travis](https://api.travis-ci.org/brython-dev/brython.svg)](https://travis-ci.org/brython-dev/brython)\n[![CDNJS version](https://img.shields.io/cdnjs/v/brython.svg)](https://cdnjs.com/libraries/brython)\n\nbrython\n=======\n\nBrython (Browser Python) é uma implementação em Python 3 executada no navegador com interface para os elementos e eventos do DOM.\n\nA seguir, um exemplo simples de uma página HTML utilizando Python:\n\n```html\n<html>\n\n    <head>\n        <script type=\"text/javascript\" src=\"/path/to/brython.js\"></script>\n    </head>\n\n    <body onload=\"brython()\">\n\n        <script type=\"text/python\">\n        from browser import document, alert\n\n        def echo(event):\n            alert(document[\"zone\"].value)\n\n        document[\"mybutton\"].bind(\"click\", echo)\n        </script>\n\n        <input id=\"zone\"><button id=\"mybutton\">click !</button>\n\n    </body>\n\n</html>\n```\n\nPara usar o Brython, tudo o que você precisará fazer é:\n\n1. Carregar o script [brython.js](http://brython.info/src/brython.js \"Brython from the site brython.info\").\n2. Executar a função `brython()` no carregamento da página, com `<body onload=brython()>`.\n3. Escrever os códigos em Python entre as tags `<script type=\"text/python\">`.\n\n\nPrincipais características\n=============\nBrython suporta grande parte da sintaxe de [Python 3](https://www.python.org \"Python Homepage\"),\nincluso compreensões, geradores, metaclasses, importações, dentre outros muitos módulos da distribuição CPython.\n\nInclui bibliotecas para interagir com elementos e eventos DOM além de algumas das bibliotecas existentes do Javascript tais como, jQuery, D3, Highcharts, Raphael etc.\n\nSuporta as mais recentes especificações de HTML5/CSS3 podendo ser utilizado com frameworks de CSS como Bootstrap3, LESS, SASS etc.\n\n\nComeçando\n===============\nZero install !\n--------------\nA maneira mais simles para começar sem instalação é utilizar a distribuição disponível em [cdnjs](https://cdnjs.com). Você pode escolher a versão estável mais recente em:\n\n```html\n<script type=\"text/javascript\"\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.7.1/brython.min.js\">\n</script>\n```\n\nO código acima irá lhe permitir utilizar códigos python diretamente, mas, para importar módulos da biblioteca padrão é necessário carregar um único arquivo javascript com o [stdlib disponível](https://github.com/brython-dev/brython/tree/master/www/src/Lib):\n\n```html\n<script type=\"text/javascript\"\n    src=\"https://cdnjs.cloudflare.com/ajax/libs/brython/3.7.1/brython_stdlib.js\">\n</script>\n```\n\nInstalação local\n-------------\nPara instalar Brython localmente, caso você tenha uma distribuição CPython, é possível através do `pip` :\n\n```bash\npip install brython\n```\nem seguida, crie um novo diretório e execute:\n\n```bash\npython -m brython --install\n```\n\nVocê pode ainda obter a versão mais recente do Brython em formato zip através da nossa [página de lançamentos](https://github.com/brython-dev/brython/releases).\n\nEm ambos os casos, a distribuição obtida inclui __brython.js__ (o arquivo central do Brython)\ne o __brython_stdlib.js__ (um pacote com todos os arquivos na distribuição padrão).\n\nTambém inclui a página __demo.html__, a qual possui alguns exemplos de como interagir com uma página web utilizando Python como linguagem de script: como criar novos elementos, acessar e modificar elementos existentes, criar gráficos, animações, enviar requisições Ajax, etc.\n\nTeste Brython online\n===================\nSe você deseja testar o Brython online, você pode visitar algum dos sites a seguir:\n\n- [Editor](http://brython.info/tests/editor.html \"Online Brython Editor\")\n- [Console](http://brython.info/tests/console.html \"Online Brython Console\")\n\n\nGaleria de Exemplos\n===================\nEm [galeria de exemplos](http://brython.info/gallery/gallery_en.html \"gallery of examples\")\nvocê encontra exemplos desde simples até a avançados usando Brython além de interações com outras bibliotecas javascript. \n\n\nDocumentação\n=============\nDocumentação disponível no [site oficial](http://www.brython.info \"Brython Homepage\").\nDisponível em [Inglês](http://brython.info/static_doc/en/intro.html),\n[Francês](http://brython.info/static_doc/fr/intro.html) e\n[Espanhol](http://brython.info/static_doc/es/intro.html).\n\nAs documentações mais atualizadas geralmente são as versões em inglês e francês, então caso você\nprecise da versão mais recente, por favor, utilize uma dessas versões.\n\nCurioso sobre [como Brython funciona](https://github.com/brython-dev/brython/wiki/How%20Brython%20works) ?\n\nVeja neste [tutorial](https://github.com/brython-dev/brython/wiki/Writing-an-Android-application)\ncomo contruir uma aplicação Android com Brython.\n\nComunidade (perguntas, feedback, issues, novas funcionalidades, ...)\n==========================================================\nVocê pode se inscrever e postar em nossa\n[lista de e-mails](https://groups.google.com/forum/?fromgroups=#!forum/brython \"Brython Main Mailing List\").\n\nSe você encontrar um bug, possuir dúvidas ou queira conhecer mais sobre uma nova funcionalidade do Brython, por favor [abra uma issue](https://github.com/brython-dev/brython/issues \"Brython GitHub Issues\").\n\nSe você deseja contribuir para o Brython, por favor, leia o [guia de contribuição](https://github.com/brython-dev/brython/blob/master/CONTRIBUTING.md).\n\nObrigado\n=========\n\n- Utilize o [BrowserStack](http://www.browserstack.com) para obter acesso ao ambiente de testes online.\n"
        },
        {
          "name": "bihan_app.py",
          "type": "blob",
          "size": 3.140625,
          "content": "import os\nimport ast\nimport sys\nimport json\nimport html\nimport datetime\n\nfrom time import perf_counter as timer\n\nfrom bihan import application\n\nroot = application.root = os.path.join(os.getcwd(), 'www')\n\ndef dump_ast(dialog):\n    src = dialog.request.json()['py_source'].replace('\\r\\n', '\\n')\n    return ast.dump(ast.parse(src), indent=4)\n\ndef write_result(dialog):\n    dest_dir = os.path.join(root, 'tests')\n    with open(os.path.join(dest_dir, 'test_result.json'), 'w', encoding='utf-8') as out:\n        json.dump(dialog.request.fields, out)\n    return dest_dir\n\ndef time_cpython(dialog):\n    script = dialog.request.json()['script']\n    with open(os.path.join(root, 'speed', *script.split('/')),\n              encoding=\"utf-8\") as f:\n        src = f.read()\n\n    t0 = timer()\n    exec(src)\n    dt = timer() - t0\n    return dt\n\ndef store_speed(dialog):\n    cpython_version = \".\".join(str(x) for x in sys.implementation.version[:3])\n    infos = dialog.request.json()\n    results = infos['results']\n    print(results)\n    data = [\n        {\"test\": result[\"test\"],\n         \"description\": result[\"description\"],\n         \"src\": result[\"src\"].replace(\"\\r\\n\", \"\\n\"),\n         \"ratio\": round(100 * (result[\"Brython\"] / result[\"CPython\"]))\n         }\n        for result in results]\n\n    json.dump(data, open(\"speed_results.json\", \"w\", encoding=\"utf-8\"),\n        indent=4)\n\n    with open(\"speed_results.txt\", \"w\", encoding=\"utf-8\") as out:\n        for line in data:\n            out.write(f'{line[\"description\"]};{line[\"ratio\"]}\\n')\n\n    template = \"\"\"<!doctype html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>Brython speed compared to CPython</title>\n    <link rel=\"stylesheet\" href=\"/brython.css\">\n    <style>\n    body{\n        padding-left: 2em;\n    }\n    td{\n        vertical-align: top;\n        padding: 3px;\n    }\n    td, th{\n        border-style: solid;\n        border-width: 0px 0px 1px 0px;\n        border-color: #000;\n    }\n    pre{\n        margin: 0px 0px 0px 5px;\n    }\n    </style>\n    </head>\n    <body>\n    <h2>Brython {{version}} performance compared to CPython {{cpython_version}}</h2>\n    User agent: {{userAgent}}\n    <br>{{date}}\n    <p>\n    <table>\n    <tr>\n    <th>Test</th>\n    <th>Brython<br>(100 = CPython)</th>\n    <th>Code</th>\n    </tr>\n    \"\"\"\n    result_path = os.path.join(root, \"speed_results.html\")\n    with open(result_path, \"w\", encoding=\"utf-8\") as out:\n        head = template.replace(\"{{version}}\", infos['version'])\n        head = head.replace(\"{{userAgent}}\", infos['userAgent'])\n        head = head.replace(\"{{cpython_version}}\", cpython_version)\n        print('date', datetime.date.today().strftime('%d/%m/%Y'))\n        now = datetime.datetime.now()\n        head = head.replace(\"{{date}}\", now.strftime('%d/%m/%Y %H:%M'))\n        print('head', head)\n        out.write(head)\n        for record in data:\n            out.write(f'<tr><td>{record[\"description\"]}</td>' +\n                f'<td align=\"right\"><b>{record[\"ratio\"]}</b></td>' +\n                f'<td><pre>{html.escape(record[\"src\"])}</pre></td></tr>\\n')\n        out.write(\"</table>\\n</body>\\n</html>\")\n\ndef test_post(dialog):\n    return str(dialog.request.fields)\n    \napplication.run(port=8000, debug=True)"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.0888671875,
          "content": "{\n  \"name\": \"brython\",\n  \"version\": \"3.2.6\",\n  \"dependencies\":{},\n  \"devDependencies\": {}\n}"
        },
        {
          "name": "cgi-bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "manage.py",
          "type": "blob",
          "size": 0.4248046875,
          "content": "#!/usr/bin/env python3\nfrom scripts.commands.lib.cli import M\nfrom scripts.commands.lib.info import MANIFEST\nfrom scripts.commands.lib.git import latest_release, head_commit_sha\n\nif __name__ == '__main__':\n    M.PROGNAME = 'manage.py'\n    M.DESCRIPTION = \"Interface to various development tasks (think make install ...)\"\n    M.VERSION = \"0.1 (Brython \"+latest_release()+\", git sha \"+head_commit_sha()+\")\"\n    app = M()\n    app.run()\n\n\n"
        },
        {
          "name": "manifest.json",
          "type": "blob",
          "size": 0.7529296875,
          "content": "{\n    \"meta\": {\n        \"version\": [3, 3, 0, \"alpha\", 0],\n        \"implementation\": [3, 5, 2, \"dev\", 0]\n    },\n    \"sources\": {\n        \"base\": [\n            \"unicode.min\",\n            \"brython_builtins\", \"version_info\", \"py2js\",\n            \"py_object\", \"py_type\", \"py_utils\", \"py_builtin_functions\",\n            \"py_exceptions\", \"py_range_slice\", \"py_bytes\", \"js_objects\",\n            \"stdlib_paths\", \"py_import\", \"py_float\", \"py_int\", \"py_long_int\",\n            \"py_complex\", \"py_sort\", \"py_list\", \"py_string\", \"py_dict\", \"py_set\",\n            \"py_dom\", \"py_generator\", \"builtin_modules\", \"py_import_hooks\"\n        ]\n    },\n    \"setup_data\": [\n        \"README.txt\",\n        \"demo.html\",\n        \"brython.js\",\n        \"brython_stdlib.js\",\n        \"unicode.txt\"\n    ]\n}\n"
        },
        {
          "name": "npm",
          "type": "tree",
          "content": null
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.py",
          "type": "blob",
          "size": 8.9462890625,
          "content": "# -*- coding: utf-8 -*-\n#\n\n\"\"\"Simple HTTP Server for Brython Development.\nFiles are served from subdirectory www, except cgi scripts that are\nserved from subdirectory cgi-bin\n\"\"\"\n\n\nimport io\nimport os\nimport sys\nimport sysconfig\nimport time\nfrom webbrowser import open_new_tab\nimport argparse\nimport urllib.parse\nimport socketserver\n\nfrom server_modular_send_head import CGIHTTPRequestHandler, SimpleHTTPRequestHandler\n\nimport http.cookiejar\n\ncpython_site_packages = sysconfig.get_path(\"purelib\")\n\n# Python might be built without zlib\ntry:\n    import zlib\nexcept ImportError:\n    zlib = None\n\n# Generators for HTTP compression\n\ndef _zlib_producer(fileobj, wbits):\n    \"\"\"Generator that yields data read from the file object fileobj,\n    compressed with the zlib library.\n    wbits is the same argument as for zlib.compressobj.\n    \"\"\"\n    bufsize = 2 << 17\n    producer = zlib.compressobj(wbits=wbits)\n    with fileobj:\n        while True:\n            buf = fileobj.read(bufsize)\n            if not buf: # end of file\n                yield producer.flush()\n                return\n            yield producer.compress(buf)\n\ndef _gzip_producer(fileobj):\n    \"\"\"Generator for gzip compression.\"\"\"\n    return _zlib_producer(fileobj, 31)\n\ndef _deflate_producer(fileobj):\n    \"\"\"Generator for deflate compression.\"\"\"\n    return _zlib_producer(fileobj, 15)\n\nclass CompressedHandler(CGIHTTPRequestHandler):\n\n    # List of commonly compressed content types, copied from\n    # https://github.com/h5bp/server-configs-apache.\n    compressed_types = [\n        \"application/atom+xml\",\n        \"application/javascript\",\n        \"application/json\",\n        \"application/ld+json\",\n        \"application/manifest+json\",\n        \"application/rdf+xml\",\n        \"application/rss+xml\",\n        \"application/schema+json\",\n        \"application/vnd.geo+json\",\n        \"application/vnd.ms-fontobject\",\n        \"application/x-font-ttf\",\n        \"application/x-javascript\",\n        \"application/x-web-app-manifest+json\",\n        \"application/xhtml+xml\",\n        \"application/xml\",\n        \"font/eot\",\n        \"font/opentype\",\n        \"image/bmp\",\n        \"image/svg+xml\",\n        \"image/vnd.microsoft.icon\",\n        \"image/x-icon\",\n        \"text/cache-manifest\",\n        \"text/css\",\n        \"text/html\",\n        \"text/javascript\",\n        \"text/plain\",\n        \"text/vcard\",\n        \"text/vnd.rim.location.xloc\",\n        \"text/vtt\",\n        \"text/x-component\",\n        \"text/x-cross-domain-policy\",\n        \"text/xml\"\n    ]\n\n    # Dictionary mapping an encoding (in an Accept-Encoding header) to a\n    # generator of compressed data. By default, provided zlib is available,\n    # the supported encodings are gzip and deflate.\n    # Override if a subclass wants to use other compression algorithms.\n    compressions = {}\n    if zlib:\n        compressions = {\n            'deflate': _deflate_producer,\n            'gzip': _gzip_producer,\n            'x-gzip': _gzip_producer # alias for gzip\n        }\n\n    def guess_type(self, path):\n        ctype = CGIHTTPRequestHandler.guess_type(self, path)\n        # I had the case where the mimetype associated with .js in the Windows\n        # registery was text/plain...\n        ext = os.path.splitext(path)[1]\n        if ext == \".js\":\n            ctype = \"application/javascript\"\n        elif ext == '.wasm':\n            ctype = \"application/wasm\"\n        return ctype\n\n    def translate_path(self, path):\n        \"\"\"For paths starting with /cgi-bin/, serve from cgi_dir\"\"\"\n        elts = path.split('/')\n        if len(elts) > 1 and elts[0] == '':\n            if elts[1] == 'cpython_site_packages':\n                elts[-1] = elts[-1].split(\"?\")[0]\n                return os.path.join(cpython_site_packages, *elts[2:])\n        return CGIHTTPRequestHandler.translate_path(self, path)\n\n    def do_POST(self):\n        if self.path == '/time_cpython':\n            if self.client_address[0] != '127.0.0.1':\n                return self.send_error(403, \"Forbidden\")\n            data = self.rfile.read(int(self.headers.get('Content-Length')))\n            path = data.decode('utf-8')\n            path = os.path.join(os.getcwd(), \"speed\", path)\n\n            t0 = time.perf_counter()\n            with open(path, encoding=\"utf-8\") as f:\n                exec(f.read(), {})\n            t1 = time.perf_counter()\n\n            response = '%6.2f' % ((t1 - t0) * 1000.0)\n            response_data = response.encode('utf-8')\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/plain')\n            self.send_header('Content-Length', str(len(response_data)))\n            self.end_headers()\n            self.wfile.write(response_data)\n        else:\n            super(CompressedHandler, self).do_POST()\n\n    def handle_compression(self, f):\n\n        if self.ctype not in self.compressed_types:\n            return f\n\n        # Get accepted encodings ; \"encodings\" is a dictionary mapping\n        # encodings to their quality ; eg for header \"gzip; q=0.8\",\n        # encodings[\"gzip\"] is set to 0.8\n        accept_encoding = self.headers.get_all(\"Accept-Encoding\", ())\n        encodings = {}\n        for accept in http.cookiejar.split_header_words(accept_encoding):\n            params = iter(accept)\n            encoding = next(params, (\"\", \"\"))[0]\n            quality, value = next(params, (\"\", \"\"))\n            if quality == \"q\" and value:\n                try:\n                    q = float(value)\n                except ValueError:\n                    # Invalid quality : ignore encoding\n                    q = 0\n            else:\n                q = 1 # quality defaults to 1\n            if q:\n                encodings[encoding] = max(encodings.get(encoding, 0), q)\n\n        compressions = set(encodings).intersection(self.compressions)\n        compression = None\n        if compressions:\n            # Take the encoding with highest quality\n            compression = max((encodings[enc], enc)\n                for enc in compressions)[1]\n        elif '*' in encodings and self.compressions:\n            # If no specified encoding is supported but \"*\" is accepted,\n            # take one of the available compressions.\n            compression = list(self.compressions)[0]\n        if compression:\n            # If at least one encoding is accepted, send data compressed\n            # with the selected compression algorithm.\n            producer = self.compressions[compression]\n            self.send_header(\"Content-Encoding\", compression)\n            if self.content_length < 2 << 18:\n                # For small files, load content in memory\n                with f:\n                    content = b''.join(producer(f))\n                self.content_length = len(content)\n                return io.BytesIO(content)\n            else:\n                self.content_length = None\n                chunked = self.protocol_version >= \"HTTP/1.1\"\n                if chunked:\n                    # Use Chunked Transfer Encoding (RFC 7230 section 4.1)\n                    self.send_header(\"Transfer-Encoding\", \"chunked\")\n                else:\n                    # Set Expires header for cache\n                    self.send_header(\"Expires\",\n                        self.date_time_string(time.time() + 3600))\n                    self.send_header(\"Max-age\", 3600)\n                # Return a generator of pieces of compressed data\n                return producer(f)\n\n    def end_headers(self):\n        \"\"\"Add headers that make SharedArrayBuffer available in Web Workers.\n        \"\"\"\n        self.send_header('cross-origin-embedder-policy', 'require-corp')\n        self.send_header('cross-origin-opener-policy', 'same-origin')\n        super().end_headers()\n\n# port to be used when the server runs locally\nparser = argparse.ArgumentParser()\nparser.add_argument('--port', help=\"The port to be used by the local server\")\nparser.add_argument('--ip', help=\"The IP address to be used by the local server\")\n\n# generate docs?\n# when testing new code on your repo it is not necessary to generate docs all\n# the time so this option allows you to avoid this process\nparser.add_argument(\n    '--no-docs',\n    help=\"Do not generate static docs.\",\n    action=\"store_true\")\n\nargs = parser.parse_args()\n\nport = int(args.port) if args.port else 8000\nip   = str(args.ip) if args.port else \"0.0.0.0\"\n\nif not args.no_docs:\n    # generate static doc pages if not already present\n    if not os.path.exists(os.path.join(os.getcwd(),'www','static_doc')):\n        save_dir = os.getcwd()\n        os.chdir(os.path.join(os.getcwd(),'scripts'))\n        sys.path.append(os.getcwd())\n        import make_doc\n        sys.path.pop()\n        os.chdir(save_dir)\n\nos.chdir(os.path.join(os.getcwd(), 'www'))\n\ncgi_dir = os.path.join(os.path.dirname(os.getcwd()), 'cgi-bin')\n\nserver_address, handler = (ip, port), SimpleHTTPRequestHandler\nhttpd = socketserver.ThreadingTCPServer(server_address, handler)\nhttpd.server_name = \"Brython built-in server\"\nhttpd.server_port = port\nprint(__doc__)\nprint((\"Server running on port http://localhost:{}.\".format(server_address[1])))\nprint(\"Press CTRL+C to Quit.\")\nopen_new_tab(\"http://localhost:{}/\".format(server_address[1]))\nhttpd.serve_forever()\n\n"
        },
        {
          "name": "server_aiohttp.py",
          "type": "blob",
          "size": 3.482421875,
          "content": "import os\nimport sys\nimport json\nimport html\nimport datetime\nfrom time import perf_counter as timer\n\nfrom aiohttp import web\n\n\nroot = os.path.join(os.getcwd(), 'www')\n\nasync def handle_ajax_get(request):\n    return web.Response(text=str(dict(request.rel_url.query)))\n\nasync def handle_ajax_post(request):\n    text = await request.text()\n    return web.Response(text=text)\n\nasync def handle_time_cpython(request):\n    content = await request.read()\n    data = json.loads(content.decode('utf-8'))\n    script = data['script']\n    with open(os.path.join(root, 'speed', *script.split('/')),\n              encoding=\"utf-8\") as f:\n        src = f.read()\n\n    t0 = timer()\n    exec(src)\n    dt = timer() - t0\n    return web.Response(text=str(dt))\n\nasync def store_speed(request):\n    assert request.remote == '::1', request.remote\n    cpython_version = \".\".join(str(x) for x in sys.implementation.version[:3])\n    infos = json.loads((await request.read()).decode('utf-8'))\n    results = infos['results']\n    data = [\n        {\"test\": result[\"test\"],\n         \"description\": result[\"description\"],\n         \"src\": result[\"src\"].replace(\"\\r\\n\", \"\\n\"),\n         \"ratio\": round(100 * (result[\"Brython\"] / result[\"CPython\"]))\n         }\n        for result in results]\n\n    json.dump(data, open(\"speed_results.json\", \"w\", encoding=\"utf-8\"),\n        indent=4)\n\n    with open(\"speed_results.txt\", \"w\", encoding=\"utf-8\") as out:\n        for line in data:\n            out.write(f'{line[\"description\"]};{line[\"ratio\"]}\\n')\n\n    template = \"\"\"<!doctype html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>Brython speed compared to CPython</title>\n    <link rel=\"stylesheet\" href=\"/brython.css\">\n    <style>\n    body{\n        padding-left: 2em;\n    }\n    td{\n        vertical-align: top;\n        padding: 3px;\n    }\n    td, th{\n        border-style: solid;\n        border-width: 0px 0px 1px 0px;\n        border-color: #000;\n    }\n    pre{\n        margin: 0px 0px 0px 5px;\n    }\n    </style>\n    </head>\n    <body>\n    <h2>Brython {{version}} performance compared to CPython {{cpython_version}}</h2>\n    User agent: {{userAgent}}\n    <br>{{date}}\n    <p>\n    <table>\n    <tr>\n    <th>Test</th>\n    <th>Brython<br>(100 = CPython)</th>\n    <th>Code</th>\n    </tr>\n    \"\"\"\n    result_path = os.path.join(root, \"speed_results.html\")\n    with open(result_path, \"w\", encoding=\"utf-8\") as out:\n        head = template.replace(\"{{version}}\", infos['version'])\n        head = head.replace(\"{{userAgent}}\", infos['userAgent'])\n        head = head.replace(\"{{cpython_version}}\", cpython_version)\n        print('date', datetime.date.today().strftime('%d/%m/%Y'))\n        now = datetime.datetime.now()\n        head = head.replace(\"{{date}}\", now.strftime('%d/%m/%Y %H:%M'))\n        out.write(head)\n        for record in data:\n            out.write(f'<tr><td>{record[\"description\"]}</td>' +\n                f'<td align=\"right\"><b>{record[\"ratio\"]}</b></td>' +\n                f'<td><pre>{html.escape(record[\"src\"])}</pre></td></tr>\\n')\n        out.write(\"</table>\\n</body>\\n</html>\")\n\n    return web.Response(text='ok')\n\napp = web.Application()\n\nstatics = ['', 'src', 'tests', 'assets']\nstatic_routes = [web.static(f'/{s}', os.path.join(os.getcwd(), 'www', s))\n                 for s in statics]\napp.add_routes(static_routes)\n\napp.add_routes([web.get('/ajax_get', handle_ajax_get),\n                web.post('/ajax_post', handle_ajax_post),\n                web.post('/time_cpython', handle_time_cpython),\n                web.post('/store_speed', store_speed)])\n\nweb.run_app(app, port=8000)"
        },
        {
          "name": "server_modular_send_head.py",
          "type": "blob",
          "size": 47.626953125,
          "content": "\"\"\"HTTP server classes.\n\nNote: BaseHTTPRequestHandler doesn't implement any HTTP request; see\nSimpleHTTPRequestHandler for simple implementations of GET, HEAD and POST,\nand CGIHTTPRequestHandler for CGI scripts.\n\nIt does, however, optionally implement HTTP/1.1 persistent connections,\nas of version 0.3.\n\nNotes on CGIHTTPRequestHandler\n------------------------------\n\nThis class implements GET and POST requests to cgi-bin scripts.\n\nIf the os.fork() function is not present (e.g. on Windows),\nsubprocess.Popen() is used as a fallback, with slightly altered semantics.\n\nIn all cases, the implementation is intentionally naive -- all\nrequests are executed synchronously.\n\nSECURITY WARNING: DON'T USE THIS CODE UNLESS YOU ARE INSIDE A FIREWALL\n-- it may execute arbitrary Python code or external programs.\n\nNote that status code 200 is sent prior to execution of a CGI script, so\nscripts cannot send other status codes such as 302 (redirect).\n\nXXX To do:\n\n- log requests even later (to capture byte count)\n- log user-agent header and other interesting goodies\n- send error log to separate file\n\"\"\"\n\n\n# See also:\n#\n# HTTP Working Group                                        T. Berners-Lee\n# INTERNET-DRAFT                                            R. T. Fielding\n# <draft-ietf-http-v10-spec-00.txt>                     H. Frystyk Nielsen\n# Expires September 8, 1995                                  March 8, 1995\n#\n# URL: http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-v10-spec-00.txt\n#\n# and\n#\n# Network Working Group                                      R. Fielding\n# Request for Comments: 2616                                       et al\n# Obsoletes: 2068                                              June 1999\n# Category: Standards Track\n#\n# URL: http://www.faqs.org/rfcs/rfc2616.html\n\n# Log files\n# ---------\n#\n# Here's a quote from the NCSA httpd docs about log file format.\n#\n# | The logfile format is as follows. Each line consists of:\n# |\n# | host rfc931 authuser [DD/Mon/YYYY:hh:mm:ss] \"request\" ddd bbbb\n# |\n# |        host: Either the DNS name or the IP number of the remote client\n# |        rfc931: Any information returned by identd for this person,\n# |                - otherwise.\n# |        authuser: If user sent a userid for authentication, the user name,\n# |                  - otherwise.\n# |        DD: Day\n# |        Mon: Month (calendar name)\n# |        YYYY: Year\n# |        hh: hour (24-hour format, the machine's timezone)\n# |        mm: minutes\n# |        ss: seconds\n# |        request: The first line of the HTTP request as sent by the client.\n# |        ddd: the status code returned by the server, - if not available.\n# |        bbbb: the total number of bytes sent,\n# |              *not including the HTTP/1.0 header*, - if not available\n# |\n# | You can determine the name of the file accessed through request.\n#\n# (Actually, the latter is only true if you know the server configuration\n# at the time the request was made!)\n\n__version__ = \"0.6\"\n\n__all__ = [\n    \"HTTPServer\", \"ThreadingHTTPServer\", \"BaseHTTPRequestHandler\",\n    \"SimpleHTTPRequestHandler\", \"CGIHTTPRequestHandler\",\n]\n\nimport copy\nimport datetime\nimport email.utils\nimport html\nimport http.client\nimport io\nimport mimetypes\nimport os\nimport posixpath\nimport select\nimport shutil\nimport socket # For gethostbyaddr()\nimport socketserver\nimport sys\nimport time\nimport urllib.parse\nfrom functools import partial\n\nfrom http import HTTPStatus\n\n\n# Default error message template\nDEFAULT_ERROR_MESSAGE = \"\"\"\\\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n        \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\n        <title>Error response</title>\n    </head>\n    <body>\n        <h1>Error response</h1>\n        <p>Error code: %(code)d</p>\n        <p>Message: %(message)s.</p>\n        <p>Error code explanation: %(code)s - %(explain)s.</p>\n    </body>\n</html>\n\"\"\"\n\nDEFAULT_ERROR_CONTENT_TYPE = \"text/html;charset=utf-8\"\n\nclass HTTPServer(socketserver.TCPServer):\n\n    allow_reuse_address = 1    # Seems to make sense in testing environment\n\n    def server_bind(self):\n        \"\"\"Override server_bind to store the server name.\"\"\"\n        socketserver.TCPServer.server_bind(self)\n        host, port = self.server_address[:2]\n        self.server_name = socket.getfqdn(host)\n        self.server_port = port\n\n\nclass ThreadingHTTPServer(socketserver.ThreadingMixIn, HTTPServer):\n    daemon_threads = True\n\n\nclass BaseHTTPRequestHandler(socketserver.StreamRequestHandler):\n\n    \"\"\"HTTP request handler base class.\n\n    The following explanation of HTTP serves to guide you through the\n    code as well as to expose any misunderstandings I may have about\n    HTTP (so you don't need to read the code to figure out I'm wrong\n    :-).\n\n    HTTP (HyperText Transfer Protocol) is an extensible protocol on\n    top of a reliable stream transport (e.g. TCP/IP).  The protocol\n    recognizes three parts to a request:\n\n    1. One line identifying the request type and path\n    2. An optional set of RFC-822-style headers\n    3. An optional data part\n\n    The headers and data are separated by a blank line.\n\n    The first line of the request has the form\n\n    <command> <path> <version>\n\n    where <command> is a (case-sensitive) keyword such as GET or POST,\n    <path> is a string containing path information for the request,\n    and <version> should be the string \"HTTP/1.0\" or \"HTTP/1.1\".\n    <path> is encoded using the URL encoding scheme (using %xx to signify\n    the ASCII character with hex code xx).\n\n    The specification specifies that lines are separated by CRLF but\n    for compatibility with the widest range of clients recommends\n    servers also handle LF.  Similarly, whitespace in the request line\n    is treated sensibly (allowing multiple spaces between components\n    and allowing trailing whitespace).\n\n    Similarly, for output, lines ought to be separated by CRLF pairs\n    but most clients grok LF characters just fine.\n\n    If the first line of the request has the form\n\n    <command> <path>\n\n    (i.e. <version> is left out) then this is assumed to be an HTTP\n    0.9 request; this form has no optional headers and data part and\n    the reply consists of just the data.\n\n    The reply form of the HTTP 1.x protocol again has three parts:\n\n    1. One line giving the response code\n    2. An optional set of RFC-822-style headers\n    3. The data\n\n    Again, the headers and data are separated by a blank line.\n\n    The response code line has the form\n\n    <version> <responsecode> <responsestring>\n\n    where <version> is the protocol version (\"HTTP/1.0\" or \"HTTP/1.1\"),\n    <responsecode> is a 3-digit response code indicating success or\n    failure of the request, and <responsestring> is an optional\n    human-readable string explaining what the response code means.\n\n    This server parses the request and the headers, and then calls a\n    function specific to the request type (<command>).  Specifically,\n    a request SPAM will be handled by a method do_SPAM().  If no\n    such method exists the server sends an error response to the\n    client.  If it exists, it is called with no arguments:\n\n    do_SPAM()\n\n    Note that the request name is case sensitive (i.e. SPAM and spam\n    are different requests).\n\n    The various request details are stored in instance variables:\n\n    - client_address is the client IP address in the form (host,\n    port);\n\n    - command, path and version are the broken-down request line;\n\n    - headers is an instance of email.message.Message (or a derived\n    class) containing the header information;\n\n    - rfile is a file object open for reading positioned at the\n    start of the optional input data part;\n\n    - wfile is a file object open for writing.\n\n    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!\n\n    The first thing to be written must be the response line.  Then\n    follow 0 or more header lines, then a blank line, and then the\n    actual data (if any).  The meaning of the header lines depends on\n    the command executed by the server; in most cases, when data is\n    returned, there should be at least one header line of the form\n\n    Content-type: <type>/<subtype>\n\n    where <type> and <subtype> should be registered MIME types,\n    e.g. \"text/html\" or \"text/plain\".\n\n    \"\"\"\n\n    # The Python system version, truncated to its first component.\n    sys_version = \"Python/\" + sys.version.split()[0]\n\n    # The server software version.  You may want to override this.\n    # The format is multiple whitespace-separated strings,\n    # where each string is of the form name[/version].\n    server_version = \"BaseHTTP/\" + __version__\n\n    error_message_format = DEFAULT_ERROR_MESSAGE\n    error_content_type = DEFAULT_ERROR_CONTENT_TYPE\n\n    # The default request version.  This only affects responses up until\n    # the point where the request line is parsed, so it mainly decides what\n    # the client gets back when sending a malformed request line.\n    # Most web servers default to HTTP 0.9, i.e. don't send a status line.\n    default_request_version = \"HTTP/0.9\"\n\n    def parse_request(self):\n        \"\"\"Parse a request (internal).\n\n        The request should be stored in self.raw_requestline; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return True for success, False for failure; on failure, any relevant\n        error response has already been sent back.\n\n        \"\"\"\n        self.command = None  # set in case of error on the first line\n        self.request_version = version = self.default_request_version\n        self.close_connection = True\n        requestline = str(self.raw_requestline, 'iso-8859-1')\n        requestline = requestline.rstrip('\\r\\n')\n        self.requestline = requestline\n        words = requestline.split()\n        if len(words) == 0:\n            return False\n\n        if len(words) >= 3:  # Enough to determine protocol version\n            version = words[-1]\n            try:\n                if not version.startswith('HTTP/'):\n                    raise ValueError\n                base_version_number = version.split('/', 1)[1]\n                version_number = base_version_number.split(\".\")\n                # RFC 2145 section 3.1 says there can be only one \".\" and\n                #   - major and minor numbers MUST be treated as\n                #      separate integers;\n                #   - HTTP/2.4 is a lower version than HTTP/2.13, which in\n                #      turn is lower than HTTP/12.3;\n                #   - Leading zeros MUST be ignored by recipients.\n                if len(version_number) != 2:\n                    raise ValueError\n                version_number = int(version_number[0]), int(version_number[1])\n            except (ValueError, IndexError):\n                self.send_error(\n                    HTTPStatus.BAD_REQUEST,\n                    \"Bad request version (%r)\" % version)\n                return False\n            if version_number >= (1, 1) and self.protocol_version >= \"HTTP/1.1\":\n                self.close_connection = False\n            if version_number >= (2, 0):\n                self.send_error(\n                    HTTPStatus.HTTP_VERSION_NOT_SUPPORTED,\n                    \"Invalid HTTP version (%s)\" % base_version_number)\n                return False\n            self.request_version = version\n\n        if not 2 <= len(words) <= 3:\n            self.send_error(\n                HTTPStatus.BAD_REQUEST,\n                \"Bad request syntax (%r)\" % requestline)\n            return False\n        command, path = words[:2]\n        if len(words) == 2:\n            self.close_connection = True\n            if command != 'GET':\n                self.send_error(\n                    HTTPStatus.BAD_REQUEST,\n                    \"Bad HTTP/0.9 request type (%r)\" % command)\n                return False\n        self.command, self.path = command, path\n\n        # Examine the headers and look for a Connection directive.\n        try:\n            self.headers = http.client.parse_headers(self.rfile,\n                                                     _class=self.MessageClass)\n        except http.client.LineTooLong as err:\n            self.send_error(\n                HTTPStatus.REQUEST_HEADER_FIELDS_TOO_LARGE,\n                \"Line too long\",\n                str(err))\n            return False\n        except http.client.HTTPException as err:\n            self.send_error(\n                HTTPStatus.REQUEST_HEADER_FIELDS_TOO_LARGE,\n                \"Too many headers\",\n                str(err)\n            )\n            return False\n\n        conntype = self.headers.get('Connection', \"\")\n        if conntype.lower() == 'close':\n            self.close_connection = True\n        elif (conntype.lower() == 'keep-alive' and\n              self.protocol_version >= \"HTTP/1.1\"):\n            self.close_connection = False\n        # Examine the headers and look for an Expect directive\n        expect = self.headers.get('Expect', \"\")\n        if (expect.lower() == \"100-continue\" and\n                self.protocol_version >= \"HTTP/1.1\" and\n                self.request_version >= \"HTTP/1.1\"):\n            if not self.handle_expect_100():\n                return False\n        return True\n\n    def handle_expect_100(self):\n        \"\"\"Decide what to do with an \"Expect: 100-continue\" header.\n\n        If the client is expecting a 100 Continue response, we must\n        respond with either a 100 Continue or a final response before\n        waiting for the request body. The default is to always respond\n        with a 100 Continue. You can behave differently (for example,\n        reject unauthorized requests) by overriding this method.\n\n        This method should either return True (possibly after sending\n        a 100 Continue response) or send an error response and return\n        False.\n\n        \"\"\"\n        self.send_response_only(HTTPStatus.CONTINUE)\n        self.end_headers()\n        return True\n\n    def handle_one_request(self):\n        \"\"\"Handle a single HTTP request.\n\n        You normally don't need to override this method; see the class\n        __doc__ string for information on how to handle specific HTTP\n        commands such as GET and POST.\n\n        \"\"\"\n        try:\n            self.raw_requestline = self.rfile.readline(65537)\n            if len(self.raw_requestline) > 65536:\n                self.requestline = ''\n                self.request_version = ''\n                self.command = ''\n                self.send_error(HTTPStatus.REQUEST_URI_TOO_LONG)\n                return\n            if not self.raw_requestline:\n                self.close_connection = True\n                return\n            if not self.parse_request():\n                # An error code has been sent, just exit\n                return\n            mname = 'do_' + self.command\n            if not hasattr(self, mname):\n                self.send_error(\n                    HTTPStatus.NOT_IMPLEMENTED,\n                    \"Unsupported method (%r)\" % self.command)\n                return\n            method = getattr(self, mname)\n            method()\n            self.wfile.flush() #actually send the response if not already done.\n        except socket.timeout as e:\n            #a read or a write timed out.  Discard this connection\n            self.log_error(\"Request timed out: %r\", e)\n            self.close_connection = True\n            return\n\n    def handle(self):\n        \"\"\"Handle multiple requests if necessary.\"\"\"\n        self.close_connection = True\n\n        self.handle_one_request()\n        while not self.close_connection:\n            self.handle_one_request()\n\n    def send_error(self, code, message=None, explain=None):\n        \"\"\"Send and log an error reply.\n\n        Arguments are\n        * code:    an HTTP error code\n                   3 digits\n        * message: a simple optional 1 line reason phrase.\n                   *( HTAB / SP / VCHAR / %x80-FF )\n                   defaults to short entry matching the response code\n        * explain: a detailed message defaults to the long entry\n                   matching the response code.\n\n        This sends an error response (so it must be called before any\n        output has been generated), logs the error, and finally sends\n        a piece of HTML explaining the error to the user.\n\n        \"\"\"\n\n        try:\n            shortmsg, longmsg = self.responses[code]\n        except KeyError:\n            shortmsg, longmsg = '???', '???'\n        if message is None:\n            message = shortmsg\n        if explain is None:\n            explain = longmsg\n        self.log_error(\"code %d, message %s\", code, message)\n        self.send_response(code, message)\n        self.send_header('Connection', 'close')\n\n        # Message body is omitted for cases described in:\n        #  - RFC7230: 3.3. 1xx, 204(No Content), 304(Not Modified)\n        #  - RFC7231: 6.3.6. 205(Reset Content)\n        body = None\n        if (code >= 200 and\n            code not in (HTTPStatus.NO_CONTENT,\n                         HTTPStatus.RESET_CONTENT,\n                         HTTPStatus.NOT_MODIFIED)):\n            # HTML encode to prevent Cross Site Scripting attacks\n            # (see bug #1100201)\n            content = (self.error_message_format % {\n                'code': code,\n                'message': html.escape(message, quote=False),\n                'explain': html.escape(explain, quote=False)\n            })\n            body = content.encode('UTF-8', 'replace')\n            self.send_header(\"Content-Type\", self.error_content_type)\n            self.send_header('Content-Length', str(len(body)))\n        self.end_headers()\n\n        if self.command != 'HEAD' and body:\n            self.wfile.write(body)\n\n    def send_response(self, code, message=None):\n        \"\"\"Add the response header to the headers buffer and log the\n        response code.\n\n        Also send two standard headers with the server software\n        version and the current date.\n\n        \"\"\"\n        self.log_request(code)\n        self.send_response_only(code, message)\n        self.send_header('Server', self.version_string())\n        self.send_header('Date', self.date_time_string())\n\n    def send_response_only(self, code, message=None):\n        \"\"\"Send the response header only.\"\"\"\n        if self.request_version != 'HTTP/0.9':\n            if message is None:\n                if code in self.responses:\n                    message = self.responses[code][0]\n                else:\n                    message = ''\n            if not hasattr(self, '_headers_buffer'):\n                self._headers_buffer = []\n            self._headers_buffer.append((\"%s %d %s\\r\\n\" %\n                    (self.protocol_version, code, message)).encode(\n                        'latin-1', 'strict'))\n\n    def send_header(self, keyword, value):\n        \"\"\"Send a MIME header to the headers buffer.\"\"\"\n        if self.request_version != 'HTTP/0.9':\n            if not hasattr(self, '_headers_buffer'):\n                self._headers_buffer = []\n            self._headers_buffer.append(\n                (\"%s: %s\\r\\n\" % (keyword, value)).encode('latin-1', 'strict'))\n\n        if keyword.lower() == 'connection':\n            if value.lower() == 'close':\n                self.close_connection = True\n            elif value.lower() == 'keep-alive':\n                self.close_connection = False\n\n    def end_headers(self):\n        \"\"\"Send the blank line ending the MIME headers.\"\"\"\n        if self.request_version != 'HTTP/0.9':\n            self._headers_buffer.append(b\"\\r\\n\")\n            self.flush_headers()\n\n    def flush_headers(self):\n        if hasattr(self, '_headers_buffer'):\n            self.wfile.write(b\"\".join(self._headers_buffer))\n            self._headers_buffer = []\n\n    def log_request(self, code='-', size='-'):\n        \"\"\"Log an accepted request.\n\n        This is called by send_response().\n\n        \"\"\"\n        if isinstance(code, HTTPStatus):\n            code = code.value\n        self.log_message('\"%s\" %s %s',\n                         self.requestline, str(code), str(size))\n\n    def log_error(self, format, *args):\n        \"\"\"Log an error.\n\n        This is called when a request cannot be fulfilled.  By\n        default it passes the message on to log_message().\n\n        Arguments are the same as for log_message().\n\n        XXX This should go to the separate error log.\n\n        \"\"\"\n\n        self.log_message(format, *args)\n\n    def log_message(self, format, *args):\n        \"\"\"Log an arbitrary message.\n\n        This is used by all other logging functions.  Override\n        it if you have specific logging wishes.\n\n        The first argument, FORMAT, is a format string for the\n        message to be logged.  If the format string contains\n        any % escapes requiring parameters, they should be\n        specified as subsequent arguments (it's just like\n        printf!).\n\n        The client ip and current date/time are prefixed to\n        every message.\n\n        \"\"\"\n\n        sys.stderr.write(\"%s - - [%s] %s\\n\" %\n                         (self.address_string(),\n                          self.log_date_time_string(),\n                          format%args))\n\n    def version_string(self):\n        \"\"\"Return the server software version string.\"\"\"\n        return self.server_version + ' ' + self.sys_version\n\n    def date_time_string(self, timestamp=None):\n        \"\"\"Return the current date and time formatted for a message header.\"\"\"\n        if timestamp is None:\n            timestamp = time.time()\n        return email.utils.formatdate(timestamp, usegmt=True)\n\n    def log_date_time_string(self):\n        \"\"\"Return the current time formatted for logging.\"\"\"\n        now = time.time()\n        year, month, day, hh, mm, ss, x, y, z = time.localtime(now)\n        s = \"%02d/%3s/%04d %02d:%02d:%02d\" % (\n                day, self.monthname[month], year, hh, mm, ss)\n        return s\n\n    weekdayname = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n\n    monthname = [None,\n                 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n                 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\n    def address_string(self):\n        \"\"\"Return the client address.\"\"\"\n\n        return self.client_address[0]\n\n    # Essentially static class variables\n\n    # The version of the HTTP protocol we support.\n    # Set this to HTTP/1.1 to enable automatic keepalive\n    protocol_version = \"HTTP/1.0\"\n\n    # MessageClass used to parse headers\n    MessageClass = http.client.HTTPMessage\n\n    # hack to maintain backwards compatibility\n    responses = {\n        v: (v.phrase, v.description)\n        for v in HTTPStatus.__members__.values()\n    }\n\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n\n    \"\"\"Simple HTTP request handler with GET and HEAD commands.\n\n    This serves files from the current directory and any of its\n    subdirectories.  The MIME type for files is determined by\n    calling the .guess_type() method.\n\n    The GET and HEAD requests are identical except that the HEAD\n    request omits the actual contents of the file.\n\n    \"\"\"\n\n    server_version = \"SimpleHTTP/\" + __version__\n\n    def __init__(self, *args, directory=None, **kwargs):\n        if directory is None:\n            directory = os.getcwd()\n        self.directory = directory\n        super().__init__(*args, **kwargs)\n\n    def do_GET(self):\n        \"\"\"Serve a GET request.\"\"\"\n        f = self.send_head()\n        if f:\n            try:\n                if hasattr(f, \"read\"):\n                    self.copyfile(f, self.wfile)\n                else:\n                    # The object returned by send_head() can be a generator,\n                    # eg if method handle_compression() returns a generator\n                    # for compressed data\n                    if self.protocol_version >= \"HTTP/1.1\":\n                        # Chunked Transfer\n                        for data in f:\n                            if data:\n                                chunk = (f\"{len(data):X}\".encode(\"ascii\") +\n                                    b\"\\r\\n\" + data + b\"\\r\\n\")\n                                self.wfile.write(chunk)\n                        self.wfile.write(b'0\\r\\n\\r\\n')\n                    else:\n                        for data in f:\n                            self.wfile.write(data)\n            finally:\n                f.close()\n\n    def do_HEAD(self):\n        \"\"\"Serve a HEAD request.\"\"\"\n        f = self.send_head()\n        if f:\n            f.close()\n\n    def handle_browser_cache(self):\n        \"\"\"Use browser cache. If conditions are ok (file not modified since\n        the data in If-Modified-Since header), return True.\n        \"\"\"\n        if (\"If-Modified-Since\" in self.headers\n                and \"If-None-Match\" not in self.headers):\n            # compare If-Modified-Since and time of last file modification\n            try:\n                ims = email.utils.parsedate_to_datetime(\n                    self.headers[\"If-Modified-Since\"])\n            except (TypeError, IndexError, OverflowError, ValueError):\n                # ignore ill-formed values\n                pass\n            else:\n                if ims.tzinfo is None:\n                    # obsolete format with no timezone, cf.\n                    # https://tools.ietf.org/html/rfc7231#section-7.1.1.1\n                    ims = ims.replace(tzinfo=datetime.timezone.utc)\n                if ims.tzinfo is datetime.timezone.utc:\n                    # compare to UTC datetime of last modification\n                    last_modif = datetime.datetime.fromtimestamp(self.mtime,\n                        datetime.timezone.utc)\n                    # remove microseconds, like in If-Modified-Since\n                    last_modif = last_modif.replace(microsecond=0)\n                    if last_modif <= ims:\n                        return True\n\n    def handle_compression(self, f):\n        \"\"\"Entry point for HTTP compression.\n        If the content is not compressed (eg it's in an already compressed\n        format such as jpg or mp3), return the file object f.\n        Otherwise, return either:\n        - a file-like object (one that has a method read() that returns\n          bytes); the attribute self.content_length must be set to the length\n          of this file object\n        - or a generator of data chunks, in this case self.content_length must\n          be set to None\n        \"\"\"\n        # By default, don't compress\n        return f\n\n    def send_head(self):\n        \"\"\"Common code for GET and HEAD commands.\n\n        This sends the response code and MIME headers.\n\n        Return value is either a file object (which has to be copied\n        to the outputfile by the caller unless the command was HEAD,\n        and must be closed by the caller under all circumstances), or\n        a generator of data chunks, or None, in which case the caller\n        has nothing further to do.\n\n        \"\"\"\n        path = self.translate_path(self.path)\n        f = None\n        if os.path.isdir(path):\n            parts = urllib.parse.urlsplit(self.path)\n            if not parts.path.endswith('/'):\n                # redirect browser - doing basically what apache does\n                self.send_response(HTTPStatus.MOVED_PERMANENTLY)\n                new_parts = (parts[0], parts[1], parts[2] + '/',\n                             parts[3], parts[4])\n                new_url = urllib.parse.urlunsplit(new_parts)\n                self.send_header(\"Location\", new_url)\n                self.end_headers()\n                return None\n            for index in \"index.html\", \"index.htm\":\n                index = os.path.join(path, index)\n                if os.path.exists(index):\n                    path = index\n                    break\n            else:\n                return self.list_directory(path)\n\n        # check for trailing \"/\" which should return 404. See Issue17324\n        # The test for this was added in test_httpserver.py\n        # However, some OS platforms accept a trailingSlash as a filename\n        # See discussion on python-dev and Issue34711 regarding\n        # parseing and rejection of filenames with a trailing slash\n        if path.endswith(\"/\"):\n            self.send_error(HTTPStatus.NOT_FOUND, \"File not found\")\n            return None\n\n        try:\n            f = open(path, 'rb')\n        except OSError:\n            self.send_error(HTTPStatus.NOT_FOUND, \"File not found\")\n            return None\n\n        self.ctype = self.guess_type(path)\n\n        try:\n            fs = os.fstat(f.fileno())\n            self.mtime = fs.st_mtime\n            self.content_length = fs[6]\n\n            # Use browser cache if possible\n            if self.handle_browser_cache():\n                self.send_response(HTTPStatus.NOT_MODIFIED)\n                self.end_headers()\n                f.close()\n                return\n\n            self.send_response(HTTPStatus.OK)\n            self.send_header(\"Content-type\", self.ctype)\n            self.send_header(\"Last-Modified\",\n                self.date_time_string(fs.st_mtime))\n\n            # Use HTTP compression if available\n            f = self.handle_compression(f)\n\n            if self.content_length: # Not set for Chunked Transfer Encoding\n                self.send_header(\"Content-Length\", str(self.content_length))\n\n            self.end_headers()\n            return f\n        except:\n            f.close()\n            raise\n\n    def list_directory(self, path):\n        \"\"\"Helper to produce a directory listing (absent index.html).\n\n        Return value is either a file object, or None (indicating an\n        error).  In either case, the headers are sent, making the\n        interface the same as for send_head().\n\n        \"\"\"\n        try:\n            list = os.listdir(path)\n        except OSError:\n            self.send_error(\n                HTTPStatus.NOT_FOUND,\n                \"No permission to list directory\")\n            return None\n        list.sort(key=lambda a: a.lower())\n        r = []\n        try:\n            displaypath = urllib.parse.unquote(self.path,\n                                               errors='surrogatepass')\n        except UnicodeDecodeError:\n            displaypath = urllib.parse.unquote(path)\n        displaypath = html.escape(displaypath, quote=False)\n        enc = sys.getfilesystemencoding()\n        title = 'Directory listing for %s' % displaypath\n        r.append('<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" '\n                 '\"http://www.w3.org/TR/html4/strict.dtd\">')\n        r.append('<html>\\n<head>')\n        r.append('<meta http-equiv=\"Content-Type\" '\n                 'content=\"text/html; charset=%s\">' % enc)\n        r.append('<title>%s</title>\\n</head>' % title)\n        r.append('<body>\\n<h1>%s</h1>' % title)\n        r.append('<hr>\\n<ul>')\n        for name in list:\n            fullname = os.path.join(path, name)\n            displayname = linkname = name\n            # Append / for directories or @ for symbolic links\n            if os.path.isdir(fullname):\n                displayname = name + \"/\"\n                linkname = name + \"/\"\n            if os.path.islink(fullname):\n                displayname = name + \"@\"\n                # Note: a link to a directory displays with @ and links with /\n            r.append('<li><a href=\"%s\">%s</a></li>'\n                    % (urllib.parse.quote(linkname,\n                                          errors='surrogatepass'),\n                       html.escape(displayname, quote=False)))\n        r.append('</ul>\\n<hr>\\n</body>\\n</html>\\n')\n        encoded = '\\n'.join(r).encode(enc, 'surrogateescape')\n        f = io.BytesIO()\n        f.write(encoded)\n        f.seek(0)\n        self.send_response(HTTPStatus.OK)\n        self.send_header(\"Content-type\", \"text/html; charset=%s\" % enc)\n        self.send_header(\"Content-Length\", str(len(encoded)))\n        self.end_headers()\n        return f\n\n    def translate_path(self, path):\n        \"\"\"Translate a /-separated PATH to the local filename syntax.\n\n        Components that mean special things to the local file system\n        (e.g. drive or directory names) are ignored.  (XXX They should\n        probably be diagnosed.)\n\n        \"\"\"\n        # abandon query parameters\n        path = path.split('?',1)[0]\n        path = path.split('#',1)[0]\n        # Don't forget explicit trailing slash when normalizing. Issue17324\n        trailing_slash = path.rstrip().endswith('/')\n        try:\n            path = urllib.parse.unquote(path, errors='surrogatepass')\n        except UnicodeDecodeError:\n            path = urllib.parse.unquote(path)\n        path = posixpath.normpath(path)\n        words = path.split('/')\n        words = filter(None, words)\n        path = self.directory\n        for word in words:\n            if os.path.dirname(word) or word in (os.curdir, os.pardir):\n                # Ignore components that are not a simple file/directory name\n                continue\n            path = os.path.join(path, word)\n        if trailing_slash:\n            path += '/'\n        return path\n\n    def copyfile(self, source, outputfile):\n        \"\"\"Copy all data between two file objects.\n\n        The SOURCE argument is a file object open for reading\n        (or anything with a read() method) and the DESTINATION\n        argument is a file object open for writing (or\n        anything with a write() method).\n\n        The only reason for overriding this would be to change\n        the block size or perhaps to replace newlines by CRLF\n        -- note however that this the default server uses this\n        to copy binary data as well.\n\n        \"\"\"\n        shutil.copyfileobj(source, outputfile)\n\n    def guess_type(self, path):\n        \"\"\"Guess the type of a file.\n\n        Argument is a PATH (a filename).\n\n        Return value is a string of the form type/subtype,\n        usable for a MIME Content-type header.\n\n        The default implementation looks the file's extension\n        up in the table self.extensions_map, using application/octet-stream\n        as a default; however it would be permissible (if\n        slow) to look inside the data to make a better guess.\n\n        \"\"\"\n\n        base, ext = posixpath.splitext(path)\n        if ext in self.extensions_map:\n            return self.extensions_map[ext]\n        ext = ext.lower()\n        if ext in self.extensions_map:\n            return self.extensions_map[ext]\n        else:\n            return self.extensions_map['']\n\n    if not mimetypes.inited:\n        mimetypes.init() # try to read system mime.types\n    extensions_map = mimetypes.types_map.copy()\n    extensions_map.update({\n        '': 'application/octet-stream', # Default\n        '.py': 'text/plain',\n        '.c': 'text/plain',\n        '.h': 'text/plain',\n        })\n\n\n# Utilities for CGIHTTPRequestHandler\n\ndef _url_collapse_path(path):\n    \"\"\"\n    Given a URL path, remove extra '/'s and '.' path elements and collapse\n    any '..' references and returns a collapsed path.\n\n    Implements something akin to RFC-2396 5.2 step 6 to parse relative paths.\n    The utility of this function is limited to is_cgi method and helps\n    preventing some security attacks.\n\n    Returns: The reconstituted URL, which will always start with a '/'.\n\n    Raises: IndexError if too many '..' occur within the path.\n\n    \"\"\"\n    # Query component should not be involved.\n    path, _, query = path.partition('?')\n    path = urllib.parse.unquote(path)\n\n    # Similar to os.path.split(os.path.normpath(path)) but specific to URL\n    # path semantics rather than local operating system semantics.\n    path_parts = path.split('/')\n    head_parts = []\n    for part in path_parts[:-1]:\n        if part == '..':\n            head_parts.pop() # IndexError if more '..' than prior parts\n        elif part and part != '.':\n            head_parts.append( part )\n    if path_parts:\n        tail_part = path_parts.pop()\n        if tail_part:\n            if tail_part == '..':\n                head_parts.pop()\n                tail_part = ''\n            elif tail_part == '.':\n                tail_part = ''\n    else:\n        tail_part = ''\n\n    if query:\n        tail_part = '?'.join((tail_part, query))\n\n    splitpath = ('/' + '/'.join(head_parts), tail_part)\n    collapsed_path = \"/\".join(splitpath)\n\n    return collapsed_path\n\n\n\nnobody = None\n\ndef nobody_uid():\n    \"\"\"Internal routine to get nobody's uid\"\"\"\n    global nobody\n    if nobody:\n        return nobody\n    try:\n        import pwd\n    except ImportError:\n        return -1\n    try:\n        nobody = pwd.getpwnam('nobody')[2]\n    except KeyError:\n        nobody = 1 + max(x[2] for x in pwd.getpwall())\n    return nobody\n\n\ndef executable(path):\n    \"\"\"Test for executable file.\"\"\"\n    return os.access(path, os.X_OK)\n\n\nclass CGIHTTPRequestHandler(SimpleHTTPRequestHandler):\n\n    \"\"\"Complete HTTP server with GET, HEAD and POST commands.\n\n    GET and HEAD also support running CGI scripts.\n\n    The POST command is *only* implemented for CGI scripts.\n\n    \"\"\"\n\n    # Determine platform specifics\n    have_fork = hasattr(os, 'fork')\n\n    # Make rfile unbuffered -- we need to read one line and then pass\n    # the rest to a subprocess, so we can't use buffered input.\n    rbufsize = 0\n\n    def do_POST(self):\n        \"\"\"Serve a POST request.\n\n        This is only implemented for CGI scripts.\n\n        \"\"\"\n\n        if self.is_cgi():\n            self.run_cgi()\n        else:\n            self.send_error(\n                HTTPStatus.NOT_IMPLEMENTED,\n                \"Can only POST to CGI scripts\")\n\n    def send_head(self):\n        \"\"\"Version of send_head that support CGI scripts\"\"\"\n        if self.is_cgi():\n            return self.run_cgi()\n        else:\n            return SimpleHTTPRequestHandler.send_head(self)\n\n    def is_cgi(self):\n        \"\"\"Test whether self.path corresponds to a CGI script.\n\n        Returns True and updates the cgi_info attribute to the tuple\n        (dir, rest) if self.path requires running a CGI script.\n        Returns False otherwise.\n\n        If any exception is raised, the caller should assume that\n        self.path was rejected as invalid and act accordingly.\n\n        The default implementation tests whether the normalized url\n        path begins with one of the strings in self.cgi_directories\n        (and the next character is a '/' or the end of the string).\n\n        \"\"\"\n        collapsed_path = _url_collapse_path(self.path)\n        dir_sep = collapsed_path.find('/', 1)\n        head, tail = collapsed_path[:dir_sep], collapsed_path[dir_sep+1:]\n        if head in self.cgi_directories:\n            self.cgi_info = head, tail\n            return True\n        return False\n\n\n    cgi_directories = ['/cgi-bin', '/htbin']\n\n    def is_executable(self, path):\n        \"\"\"Test whether argument path is an executable file.\"\"\"\n        return executable(path)\n\n    def is_python(self, path):\n        \"\"\"Test whether argument path is a Python script.\"\"\"\n        head, tail = os.path.splitext(path)\n        return tail.lower() in (\".py\", \".pyw\")\n\n    def run_cgi(self):\n        \"\"\"Execute a CGI script.\"\"\"\n        dir, rest = self.cgi_info\n        path = dir + '/' + rest\n        i = path.find('/', len(dir)+1)\n        while i >= 0:\n            nextdir = path[:i]\n            nextrest = path[i+1:]\n\n            scriptdir = self.translate_path(nextdir)\n            if os.path.isdir(scriptdir):\n                dir, rest = nextdir, nextrest\n                i = path.find('/', len(dir)+1)\n            else:\n                break\n\n        # find an explicit query string, if present.\n        rest, _, query = rest.partition('?')\n\n        # dissect the part after the directory name into a script name &\n        # a possible additional path, to be stored in PATH_INFO.\n        i = rest.find('/')\n        if i >= 0:\n            script, rest = rest[:i], rest[i:]\n        else:\n            script, rest = rest, ''\n\n        scriptname = dir + '/' + script\n        scriptfile = self.translate_path(scriptname)\n        if not os.path.exists(scriptfile):\n            self.send_error(\n                HTTPStatus.NOT_FOUND,\n                \"No such CGI script (%r)\" % scriptname)\n            return\n        if not os.path.isfile(scriptfile):\n            self.send_error(\n                HTTPStatus.FORBIDDEN,\n                \"CGI script is not a plain file (%r)\" % scriptname)\n            return\n        ispy = self.is_python(scriptname)\n        if not ispy:\n            if not self.is_executable(scriptfile):\n                self.send_error(\n                    HTTPStatus.FORBIDDEN,\n                    \"CGI script is not executable (%r)\" % scriptname)\n                return\n\n        # Reference: http://hoohoo.ncsa.uiuc.edu/cgi/env.html\n        # XXX Much of the following could be prepared ahead of time!\n        env = copy.deepcopy(os.environ)\n        env['SERVER_SOFTWARE'] = self.version_string()\n        env['SERVER_NAME'] = self.server.server_name\n        env['GATEWAY_INTERFACE'] = 'CGI/1.1'\n        env['SERVER_PROTOCOL'] = self.protocol_version\n        env['SERVER_PORT'] = str(self.server.server_port)\n        env['REQUEST_METHOD'] = self.command\n        uqrest = urllib.parse.unquote(rest)\n        env['PATH_INFO'] = uqrest\n        env['PATH_TRANSLATED'] = self.translate_path(uqrest)\n        env['SCRIPT_NAME'] = scriptname\n        if query:\n            env['QUERY_STRING'] = query\n        env['REMOTE_ADDR'] = self.client_address[0]\n        authorization = self.headers.get(\"authorization\")\n        if authorization:\n            authorization = authorization.split()\n            if len(authorization) == 2:\n                import base64, binascii\n                env['AUTH_TYPE'] = authorization[0]\n                if authorization[0].lower() == \"basic\":\n                    try:\n                        authorization = authorization[1].encode('ascii')\n                        authorization = base64.decodebytes(authorization).\\\n                                        decode('ascii')\n                    except (binascii.Error, UnicodeError):\n                        pass\n                    else:\n                        authorization = authorization.split(':')\n                        if len(authorization) == 2:\n                            env['REMOTE_USER'] = authorization[0]\n        # XXX REMOTE_IDENT\n        if self.headers.get('content-type') is None:\n            env['CONTENT_TYPE'] = self.headers.get_content_type()\n        else:\n            env['CONTENT_TYPE'] = self.headers['content-type']\n        length = self.headers.get('content-length')\n        if length:\n            env['CONTENT_LENGTH'] = length\n        referer = self.headers.get('referer')\n        if referer:\n            env['HTTP_REFERER'] = referer\n        accept = []\n        for line in self.headers.getallmatchingheaders('accept'):\n            if line[:1] in \"\\t\\n\\r \":\n                accept.append(line.strip())\n            else:\n                accept = accept + line[7:].split(',')\n        env['HTTP_ACCEPT'] = ','.join(accept)\n        ua = self.headers.get('user-agent')\n        if ua:\n            env['HTTP_USER_AGENT'] = ua\n        co = filter(None, self.headers.get_all('cookie', []))\n        cookie_str = ', '.join(co)\n        if cookie_str:\n            env['HTTP_COOKIE'] = cookie_str\n        # XXX Other HTTP_* headers\n        # Since we're setting the env in the parent, provide empty\n        # values to override previously set values\n        for k in ('QUERY_STRING', 'REMOTE_HOST', 'CONTENT_LENGTH',\n                  'HTTP_USER_AGENT', 'HTTP_COOKIE', 'HTTP_REFERER'):\n            env.setdefault(k, \"\")\n\n        self.send_response(HTTPStatus.OK, \"Script output follows\")\n        self.flush_headers()\n\n        decoded_query = query.replace('+', ' ')\n\n        if self.have_fork:\n            # Unix -- fork as we should\n            args = [script]\n            if '=' not in decoded_query:\n                args.append(decoded_query)\n            nobody = nobody_uid()\n            self.wfile.flush() # Always flush before forking\n            pid = os.fork()\n            if pid != 0:\n                # Parent\n                pid, sts = os.waitpid(pid, 0)\n                # throw away additional data [see bug #427345]\n                while select.select([self.rfile], [], [], 0)[0]:\n                    if not self.rfile.read(1):\n                        break\n                if sts:\n                    self.log_error(\"CGI script exit status %#x\", sts)\n                return\n            # Child\n            try:\n                try:\n                    os.setuid(nobody)\n                except OSError:\n                    pass\n                if ispy:\n                \targs[0] = scriptfile\n                \targs = [\"python3\"] + args\n                \tscriptfile = sys.executable\n                os.dup2(self.rfile.fileno(), 0)\n                os.dup2(self.wfile.fileno(), 1)\n                os.execve(scriptfile, args, env)\n            except:\n                self.server.handle_error(self.request, self.client_address)\n                os._exit(127)\n\n        else:\n            # Non-Unix -- use subprocess\n            import subprocess\n            cmdline = [scriptfile]\n            if self.is_python(scriptfile):\n                interp = sys.executable\n                if interp.lower().endswith(\"w.exe\"):\n                    # On Windows, use python.exe, not pythonw.exe\n                    interp = interp[:-5] + interp[-4:]\n                cmdline = [interp, '-u'] + cmdline\n            if '=' not in query:\n                cmdline.append(query)\n            self.log_message(\"command: %s\", subprocess.list2cmdline(cmdline))\n            try:\n                nbytes = int(length)\n            except (TypeError, ValueError):\n                nbytes = 0\n            p = subprocess.Popen(cmdline,\n                                 stdin=subprocess.PIPE,\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE,\n                                 env = env\n                                 )\n            if self.command.lower() == \"post\" and nbytes > 0:\n                data = self.rfile.read(nbytes)\n            else:\n                data = None\n            # throw away additional data [see bug #427345]\n            while select.select([self.rfile._sock], [], [], 0)[0]:\n                if not self.rfile._sock.recv(1):\n                    break\n            stdout, stderr = p.communicate(data)\n            self.wfile.write(stdout)\n            if stderr:\n                self.log_error('%s', stderr)\n            p.stderr.close()\n            p.stdout.close()\n            status = p.returncode\n            if status:\n                self.log_error(\"CGI script exit status %#x\", status)\n            else:\n                self.log_message(\"CGI script exited OK\")\n\n\ndef _get_best_family(*address):\n    infos = socket.getaddrinfo(\n        *address,\n        type=socket.SOCK_STREAM,\n        flags=socket.AI_PASSIVE,\n    )\n    family, type, proto, canonname, sockaddr = next(iter(infos))\n    return family, sockaddr\n\n\ndef test(HandlerClass=BaseHTTPRequestHandler,\n         ServerClass=ThreadingHTTPServer,\n         protocol=\"HTTP/1.0\", port=8000, bind=None):\n    \"\"\"Test the HTTP request handler class.\n\n    This runs an HTTP server on port 8000 (or the port argument).\n\n    \"\"\"\n    ServerClass.address_family, addr = _get_best_family(bind, port)\n\n    HandlerClass.protocol_version = protocol\n    with ServerClass(addr, HandlerClass) as httpd:\n        host, port = httpd.socket.getsockname()[:2]\n        url_host = f'[{host}]' if ':' in host else host\n        print(\n            f\"Serving HTTP on {host} port {port} \"\n            f\"(http://{url_host}:{port}/) ...\"\n        )\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print(\"\\nKeyboard interrupt received, exiting.\")\n            sys.exit(0)\n\nif __name__ == '__main__':\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--cgi', action='store_true',\n                       help='Run as CGI Server')\n    parser.add_argument('--bind', '-b', metavar='ADDRESS',\n                        help='Specify alternate bind address '\n                             '[default: all interfaces]')\n    parser.add_argument('--directory', '-d', default=os.getcwd(),\n                        help='Specify alternative directory '\n                        '[default:current directory]')\n    parser.add_argument('port', action='store',\n                        default=8000, type=int,\n                        nargs='?',\n                        help='Specify alternate port [default: 8000]')\n    args = parser.parse_args()\n    if args.cgi:\n        handler_class = CGIHTTPRequestHandler\n    else:\n        handler_class = partial(SimpleHTTPRequestHandler,\n                                directory=args.directory)\n    test(HandlerClass=handler_class, port=args.port, bind=args.bind)\n"
        },
        {
          "name": "setup",
          "type": "tree",
          "content": null
        },
        {
          "name": "small_node_app.py",
          "type": "blob",
          "size": 0.0771484375,
          "content": "from browser import console\nimport io\nimport math\n\nprint('Hello from Node !!')\n"
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}