{
  "metadata": {
    "timestamp": 1736560699933,
    "page": 359,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EstrellaXD/Auto_Bangumi",
      "stars": 7135,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.4560546875,
          "content": "__pycache__\n*.pyc\n*.pyo\n*.pyd\n.Python\nenv\npip-log.txt\npip-delete-this-directory.txt\n.tox\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.log\n.git\n.mypy_cache\n../.pytest_cache\n.hypothesis\n\nbackend/src/module/tests\nbackend/src/module/conf/const_dev.py\nconfig/bangumi.json/config/bangumi.json\n/docs\n/.github\n/.config\n/.data\n/.cache\n/LICENSE\n/README.md\n/setup.py\ndist.zip\ndata\nconfig\n/backend/src/config\n/backend/src/data\n.pytest_cache\ntest\n.env\ntest.py"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.7333984375,
          "content": "# Don't allow people to merge changes to these generated files, because the result\r\n# may be invalid.  You need to run \"rush update\" again.\r\npnpm-lock.yaml               merge=binary\r\nshrinkwrap.yaml              merge=binary\r\nnpm-shrinkwrap.json          merge=binary\r\nyarn.lock                    merge=binary\r\n\r\n# Rush's JSON config files use JavaScript-style code comments.  The rule below prevents pedantic\r\n# syntax highlighters such as GitHub's from highlighting these comments as errors.  Your text editor\r\n# may also require a special configuration to allow comments in JSON.\r\n#\r\n# For more information, see this issue: https://github.com/microsoft/rushstack/issues/1088\r\n#\r\n*.json                       linguist-language=JSON-with-Comments\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.705078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.idea\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Custom\n#\n# backend\n/backend/src/test.py\n\n/backend/src/module/run_debug.sh\n/backend/src/module/debug_run.sh\n/backend/src/module/__version__.py\n/backend/src/data/\n\n/src/module/conf/config_dev.ini\n\n\n.run\n/backend/src/templates/\n/backend/src/config/\n/src/debuger.py\n/backend/src/dist.zip\n/pyrightconfig.json\n\n# webui\nlogs\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\npnpm-debug.log*\nlerna-debug.log*\n\nnode_modules\ndist\nwebui/.vite/deps/*\ndist.zip\ndist-ssr\n*.local\ndev-dist\n\n# Editor directories and files\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n.DS_Store\n*.suo\n*.ntvs*\n*.njsproj\n*.sln\n*.sw?\n\n\n# vitepress\n/docs/.vitepress/cache/\n\n\n# test file\ntest.*\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.564453125,
          "content": "# [3.1] - 2023-08\n\n- 合并了后端和前端仓库，优化了项目目录\n- 优化了版本发布流程。\n- Wiki 迁移至 Vitepress，地址：https://autobangumi.org\n\n## Backend\n\n### Features\n\n- 新增 `RSS Engine` 模块，从现在起，AB 可以自主对 RSS 进行更新支持 `RSS` 订阅并且发送种子给下载器。\n  - 现在支持多个聚合 RSS 订阅源，可以通过 `RSS Engine` 模块进行管理。\n  - 支持下载去重功能，重复的订阅的种子不会被下载。\n  - 增加手动刷新 API，可以手动刷新 RSS 订阅。\n  - 新增 RSS 订阅管理 API。\n- 新增 `Search Engine`模块，可以通过关键词搜索种子并解析成收集或者订阅任务。\n  - 插件化的搜索引擎，可以通过插件的方式添加新的搜索目标，目前支持 `mikan`、`dmhy` 和 `nyaa`\n- 新增对字幕组的特异性规则，可以针对不同的字幕组进行单独设置。\n- 新增 IPv6 监听支持，需要在环境变量中设置 `IPV6=1`。\n- API 新增批量操作，可以批量管理规则和 RSS 订阅。\n\n### Changes\n\n- 数据库结构变更，更换为 `sqlmodel` 管理数据库。\n- 新增版本管理，可以无缝更新软件数据。\n- 调整 API 格式，更加统一。\n- 增加 API 返回语言选项。\n- 增加数据库 mock test。\n- 优化代码。\n\n### Bugfixes\n\n- 修复了一些小问题。\n- 增加了一些大问题。\n\n## Frontend\n\n### Features\n\n- 增加 `i18n` 支持，目前支持 `zh-CN` 和 `en-US`。\n- 增加 pwa 支持。\n- 增加 RSS 管理页面。\n- 增加搜索顶栏。\n\n### Changes\n\n- 调整一些 UI 细节。"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.349609375,
          "content": "# 贡献指南 Contributing\n\n我们欢迎各位 Contributors 参与贡献帮助 AutoBangumi 更好的解决大家遇到的问题，\n\n这篇指南会指导你如何为 AutoBangumi 贡献功能修复代码，可以在你要提出 Pull Request 之前花几分钟来阅读一遍这篇指南。\n\n这篇文章包含什么？\n\n- [项目规划 Roadmap](#项目规划-roadmap)\n  - [提案寻求共识 Request for Comments](#提案寻求共识-request-for-comments)\n- [分支管理 Git Branch](#分支管理-git-branch)\n  - [版本号](#版本号)\n  - [分支开发，主干发布](#分支开发主干发布)\n  - [Branch 生命周期](#branch-生命周期)\n  - [Git Workflow 一览](#git-workflow-一览)\n- [Pull Request](#pull-request)\n- [版本发布介绍](#版本发布介绍)\n\n\n## 项目规划 Roadmap\n\nAutoBangumi 开发组使用 [GitHub Project](https://github.com/EstrellaXD/Auto_Bangumi/projects?query=is%3Aopen) 看板来管理预计开发的规划、在修复中的问题，以及它们处理的进度；\n\n这将帮助你更好的了解\n- 开发团队在做什么？\n- 有什么和你想贡献的方向一致的，可以直接参与实现与优化\n- 有什么已经在进行中的，避免自己重复不必要的工作\n\n在 [Project](https://github.com/EstrellaXD/Auto_Bangumi/projects?query=is%3Aopen) 中你可以看到除通常的 `[Feature Request]`, `[BUG]`, 一些小优化项以外，还有一类 **`[RFC]`**；\n\n### 提案寻求共识 Request for Comments\n\n> 在 issue 中通过 `RFC` label 能找到到现有的 [AutoBangumi RFCs](https://github.com/EstrellaXD/Auto_Bangumi/issues?q=is%3Aissue+label%3ARFC)\n\n对于一些小的优化项或者 bug 修复，你大可以直接帮忙调整代码然后提出 Pull Request，只需要简单阅读下 [分支管理](#分支管理-Git-Branch) 章节以基于正确的版本分支修复、以及通过 [Pull Request](#Pull-Request) 章节了解 PR 将如何被合并。\n\n<br/>\n\n而如果你打算做的是一项**较大的**功能重构，改动范围大而涉及的方面比较多，那么希望你能通过 [Issue: 功能提案](https://github.com/EstrellaXD/Auto_Bangumi/issues/new?assignees=&labels=RFC&projects=&template=rfc.yml&title=%5BRFC%5D%3A+) 先写一份 RFC 提案来简单阐述「你打算怎么做」的简短方案，来寻求开发者的讨论和共识。\n\n因为有些方案可能是开发团队原本讨论并且认为不要做的事，而上一步可以避免你浪费大量精力。\n  \n> 如果仅希望讨论是否添加或改进某功能本身，而非「要如何实现」，请使用 -> [Issue: 功能改进](https://github.com/EstrellaXD/Auto_Bangumi/issues/new?labels=feature+request&template=feature_request.yml&title=%5BFeature+Request%5D+)\n\n\n<br/>\n\n一份 [提案(RFC)](https://github.com/EstrellaXD/Auto_Bangumi/issues?q=is%3Aissue+is%3Aopen+label%3ARFC) 定位为 **「在某功能/重构的具体开发前，用于开发者间 review 技术设计/方案的文档」**，\n\n目的是让协作的开发者间清晰的知道「要做什么」和「具体会怎么做」，以及所有的开发者都能公开透明的参与讨论；\n\n以便评估和讨论产生的影响 (遗漏的考虑、向后兼容性、与现有功能的冲突)，\n\n因此提案侧重在对解决问题的 **方案、设计、步骤** 的描述上。\n\n\n## 分支管理 Git Branch\n\n### 版本号\n\nAutoBangumi 项目中的 Git 分支使用与发布版本规则密切相关，因此先介绍版本规范；\n\nAutoBangumi 发布的版本号遵循 [「语义化版本 SemVer」](https://semver.org/lang/zh-CN/) 的规范，\n\n使用 `<Major>.<Minor>.<Patch>` 三位版本的格式，每一位版本上的数字更新含义如下：\n\n- **Major**: 大版本更新，很可能有不兼容的 配置/API 修改\n- **Minor**: 向下兼容的功能性新增\n- **Patch**: 向下兼容的 Bug 修复 / 小优化修正\n\n### 分支开发，主干发布\n\nAutoBangumi 项目使用「分支开发，主干发布」的模式，\n\n[**`main`**](https://github.com/EstrellaXD/Auto_Bangumi/commits/main) 分支是稳定版本的 **「主干分支」**，只用于发布版本，不用于直接开发新功能或修复。\n\n每一个 Minor 版本都有一个对应的 **「开发分支」** 用于开发新功能、与发布后维护修复问题，\n\n开发分支的名字为 `<Major>.<Minor>-dev`，如 `3.1-dev`, `3.0-dev`, `2.6-dev`， 你可以在仓库的 [All Branches 中搜索到它们](https://github.com/EstrellaXD/Auto_Bangumi/branches/all?query=-dev)。\n\n\n### Branch 生命周期\n\n当一个 Minor 开发分支(以 `3.1-dev` 为例) 完成新功能开发，**首次**合入 main 分支后，\n- 发布 Minor 版本 (如 `3.1.0`)\n- 同时拉出**下一个** Minor 开发分支(`3.2-dev`)，用于下一个版本新功能开发\n  - 而**上一个**版本开发分支(`3.0-dev`)进入归档不再维护\n- 且这个 Minor 分支(`3.1-dev`)进入维护阶段，不再增加新功能/重构，只维护 Bugs 修复\n  - Bug 修复到维护阶段的 Minor 分支(`3.1-dev`)后，会再往 main 分支合并，并发布 `Patch` 版本\n\n根据这个流程，对于各位 Contributors 在开发贡献时选择 Git Branch 来说，则是：\n- 若「修复 Bug」，则基于**当前发布版本**的 Minor 分支开发修复，并 PR 到这个分支\n- 若「添加新功能/重构」，则基于**还未发布的下一个版本** Minor 分支开发，并 PR 到这个分支\n\n> 「当前发布版本」为 [[Releases 页面]](https://github.com/EstrellaXD/Auto_Bangumi/releases) 最新版本，这也与 [[GitHub Container Registry]](https://github.com/EstrellaXD/Auto_Bangumi/pkgs/container/auto_bangumi) 中最新版本相同\n\n\n### Git Workflow 一览\n\n> 图中 commit timeline 从左到右 --->\n\n```mermaid\n%%{init: {'theme': 'base', 'gitGraph': {'showCommitLabel': true}}}%%\n\ngitGraph:\n  checkout main\n  commit id: \".\"\n  branch 3.0-dev\n  commit id: \"feat 1\"\n  commit id: \"feat 2\"\n  commit id: \"feat 3\"\n\n  checkout main\n  merge 3.0-dev tag: \"3.0.9\"\n  commit id: \"..\"\n\n  branch 3.1-dev\n  commit id: \"feat 4\"\n\n  checkout 3.0-dev\n  commit id: \"PR merge (fix)\"\n  checkout main\n  merge 3.0-dev tag: \"3.0.10\"\n\n  checkout 3.1-dev\n  commit id: \"feat 5\"\n  commit id: \"feat 6\"\n\n  checkout main\n  merge 3.1-dev tag: \"3.1.0\"\n  commit id: \"...\"\n\n  branch 3.2-dev\n  commit id: \"feat 7\"\n  commit id: \"feat 8\"\n\n  checkout 3.1-dev\n  commit id: \"PR merge (fix) \"\n  checkout main\n  merge 3.1-dev tag: \"3.1.1\"\n\n  checkout 3.2-dev\n  commit id: \"PR merge (feat)\"\n```\n\n\n## Pull Request\n\n请确保你根据上文的 Git 分支管理 章节选择了正确的 PR 目标分支，\n> - 若「修复 Bug」，则 PR 到**当前发布版本**的 Minor 维护分支\n> - 若「添加新功能/重构」，则 PR **下一个版本** Minor 开发分支\n\n<br/>\n\n- 一个 PR 应该只对应一件事，而不应引入不相关的更改；\n\n  对于不同的事情可以拆分提多个 PR，这能帮助开发组每次 review 只专注一个问题。\n\n- 在提 PR 的标题与描述中，最好对修改内容做简短的说明，包括原因和意图，\n  \n  如果有相关的 issue 或 RFC，应该把它们链接到 PR 描述中，\n  \n  这将帮助开发组 code review 时能最快了解上下文。\n\n- 确保勾选了「允许维护者编辑」(`Allow edits from maintainers`) 选项。这使我们可以直接进行较小的编辑/重构并节省大量时间。\n\n- 请确保本地通过了「单元测试」和「代码风格 Lint」，这也会在 PR 的 GitHub CI 上检查\n  - 对于 bug fix 和新功能，通常开发组也会请求你添加对应改动的单元测试覆盖\n\n\n开发组会在有时间的最快阶段 Review 贡献者提的 PR 并讨论或批准合并(Approve Merge)。\n\n## 版本发布介绍\n\n版本发布目前由开发组通过手动合并「特定发版 PR」后自动触发打包与发布。\n\n通常 Bug 修复的 PR 合并后会很快发版，通常不到一周；\n\n而新功能的发版时间则会更长而且不定，你可以在我们的 [GitHub Project](https://github.com/EstrellaXD/Auto_Bangumi/projects?query=is%3Aopen) 看板中看到开发进度，一个版本规划的新功能都开发完备后就会发版。\n\n## 贡献文档\n\n如果要为文档做贡献，请注意以下几点：\n\n- 更新分支为 `docs-update`，并基于它做修改.\n- 请确保你的 PR 标题和描述中包含了你的修改的目的和意图。\n\n撰写文档请尽量使用规范的书面化用语，遵照 Markdown 语法，以及 [中文文案排版指北](https://github.com/sparanoid/chinese-copywriting-guidelines) 中的规范。\n\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.955078125,
          "content": "# syntax=docker/dockerfile:1\n\nFROM alpine:3.18\n\nENV LANG=\"C.UTF-8\" \\\n    TZ=Asia/Shanghai \\\n    PUID=1000 \\\n    PGID=1000 \\\n    UMASK=022\n\nWORKDIR /app\n\nCOPY backend/requirements.txt .\nRUN set -ex && \\\n    apk add --no-cache \\\n        bash \\\n        busybox-suid \\\n        python3 \\\n        py3-aiohttp \\\n        py3-bcrypt \\\n        py3-pip \\\n        su-exec \\\n        shadow \\\n        tini \\\n        openssl \\\n        tzdata && \\\n    python3 -m pip install --no-cache-dir --upgrade pip && \\\n    sed -i '/bcrypt/d' requirements.txt && \\\n    pip install --no-cache-dir -r requirements.txt && \\\n    # Add user\n    mkdir -p /home/ab && \\\n    addgroup -S ab -g 911 && \\\n    adduser -S ab -G ab -h /home/ab -s /sbin/nologin -u 911 && \\\n    # Clear\n    rm -rf \\\n        /root/.cache \\\n        /tmp/*\n\nCOPY --chmod=755 backend/src/. .\nCOPY --chmod=755 entrypoint.sh /entrypoint.sh\n\nENTRYPOINT [\"tini\", \"-g\", \"--\", \"/entrypoint.sh\"]\n\nEXPOSE 7892\nVOLUME [ \"/app/config\" , \"/app/data\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2022 Estrella Pan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.3984375,
          "content": "<p align=\"center\">\n    <img src=\"docs/image/icons/light-icon.svg#gh-light-mode-only\" width=50%/ alt=\"\">\n    <img src=\"docs/image/icons/dark-icon.svg#gh-dark-mode-only\" width=50%/ alt=\"\">\n</p>\n<p align=\"center\">\n    <img title=\"docker build version\" src=\"https://img.shields.io/docker/v/estrellaxd/auto_bangumi\" alt=\"\">\n    <img title=\"release date\" src=\"https://img.shields.io/github/release-date/estrellaxd/auto_bangumi\" alt=\"\">\n    <img title=\"docker pull\" src=\"https://img.shields.io/docker/pulls/estrellaxd/auto_bangumi\" alt=\"\">\n    <img title=\"python version\" src=\"https://img.shields.io/badge/python-3.11-blue\" alt=\"\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.autobangumi.org\">官方网站</a> | <a href=\"https://www.autobangumi.org/deploy/quick-start.html\">快速开始</a> | <a href=\"https://www.autobangumi.org/changelog/3.0.html\">更新日志</a> | <a href=\"https://t.me/autobangumi_update\">更新推送</a> | <a href=\"https://t.me/autobangumi\">TG 群组</a>\n</p>\n\n# 项目说明\n\n<p align=\"center\">\n    <img title=\"AutoBangumi\" src=\"docs/image/preview/window.png\" alt=\"\" width=75%>\n</p>\n\n本项目是基于 RSS 的全自动追番整理下载工具。只需要在 [Mikan Project][mikan] 等网站上订阅番剧，就可以全自动追番。\n并且整理完成的名称和目录可以直接被 [Plex][plex]、[Jellyfin][plex] 等媒体库软件识别，无需二次刮削。\n\n## AutoBangumi 功能说明\n\n- 简易单次配置就能持续使用\n- 无需介入的 `RSS` 解析器，解析番组信息并且自动生成下载规则。\n- 番剧文件整理:\n\n    ```\n    Bangumi\n    ├── bangumi_A_title\n    │   ├── Season 1\n    │   │   ├── A S01E01.mp4\n    │   │   ├── A S01E02.mp4\n    │   │   ├── A S01E03.mp4\n    │   │   └── A S01E04.mp4\n    │   └── Season 2\n    │       ├── A S02E01.mp4\n    │       ├── A S02E02.mp4\n    │       ├── A S02E03.mp4\n    │       └── A S02E04.mp4\n    ├── bangumi_B_title\n    │   └─── Season 1\n    ```\n\n- 全自动重命名，重命名后 99% 以上的番剧可以直接被媒体库软件直接刮削\n\n    ```\n  [Lilith-Raws] Kakkou no Iinazuke - 07 [Baha][WEB-DL][1080p][AVC AAC][CHT][MP4].mp4 \n  >>\n   Kakkou no Iinazuke S01E07.mp4\n  ```\n\n- 自定义重命名，可以根据上级文件夹对所有子文件重命名。\n- 季中追番可以补全当季遗漏的所有剧集\n- 高度可自定义的功能选项，可以针对不同媒体库软件微调\n- 支持多种 RSS 站点，支持聚合 RSS 的解析。\n- 无需维护完全无感使用\n- 内置 TDMB 解析器，可以直接生成完整的 TMDB 格式的文件以及番剧信息。\n\n## [Roadmap](https://github.com/users/EstrellaXD/projects/2)\n\n\n***计划开发的功能：***\n\n- Transmission 的支持。\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=EstrellaXD/Auto_Bangumi&type=Date)](https://star-history.com/#EstrellaXD/Auto_Bangumi)\n\n## 贡献\n\n欢迎提供 ISSUE 或者 PR, 贡献代码前建议阅读 [CONTRIBUTING.md](CONTRIBUTING.md)。\n\n贡献者名单请见：\n\n<a href=\"https://github.com/EstrellaXD/Auto_Bangumi/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=EstrellaXD/Auto_Bangumi\"></a>\n\n\n## Licence\n\n[MIT licence](https://github.com/EstrellaXD/Auto_Bangumi/blob/main/LICENSE)\n\n[mikan]: https://mikanani.me\n[plex]: https://plex.tv\n[jellyfin]: https://jellyfin.org\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "entrypoint.sh",
          "type": "blob",
          "size": 0.2705078125,
          "content": "#!/bin/bash\n# shellcheck shell=bash\n\numask ${UMASK}\n\nif [ -f /config/bangumi.json ]; then\n    mv /config/bangumi.json /app/data/bangumi.json\nfi\n\ngroupmod -o -g \"${PGID}\" ab\nusermod -o -u \"${PUID}\" ab\n\nchown ab:ab -R /app /home/ab\n\nexec su-exec \"${PUID}:${PGID}\" python3 main.py"
        },
        {
          "name": "pyrightconfig.json",
          "type": "blob",
          "size": 0.2568359375,
          "content": "{\n  \"pythonPath\": \"/opt/homebrew/Caskroom/miniforge/base/envs/auto_bangumi/bin/python\",\n  \"root\": \"backend/src\",\n  \"venvPath\": \"/opt/homebrew/Caskroom/miniforge/base/envs\",\n  \"venv\": \"auto_bangumi\",\n  \"typeCheckingMode\": \"basic\",\n  \"reportMissingImports\": true\n}\n"
        },
        {
          "name": "webui",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}