{
  "metadata": {
    "timestamp": 1736561024964,
    "page": 790,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "qilingframework/qiling",
      "stars": 5238,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3525390625,
          "content": "# IDE left over\n.DS_Store\n.vscode\n.idea\n*.pyc\n*.cache\n*.cache2\n.*.swp\n*.raw\n.venv\n\n# cache and misc\nqiling.egg-info/\n__pycache__/\n*.py[cod]\nbuild\ndist\n\n# test and logs\ntests/mac_test_elf.sh\njexamples/\nlogs/\nlog/\ntest_qlog/\nlog_test/\nqlog/\nqlogs/\ntest_syscall_*.txt\n*.no.py\n.gitkeep\ntest.file\n*.file\n*.qlog\n*.d\n*.o\ncore\n*.perf\ntests/output.txt\ntests/testtest_*\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1044921875,
          "content": "[submodule \"examples/rootfs\"]\n\tpath = examples/rootfs\n\turl = https://github.com/qilingframework/rootfs.git\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.5703125,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 1.43359375,
          "content": "### This file credits all the contributors of the Qiling Framework project.\n\n\n#### Founder\n\n- LAU kaijern (xwings) <kj_at_qiling_io>\n\n\n#### Advisor\n\n- NGUYEN Anh Quynh <aquynh_at_gmail_com>\n\n\n#### Core Developers Crew\n\n- Earl MARCUS (klks84) <klks84_at_gmail_com>\n- WU chenxu (kabeor) <kabeor_at_qiling_io>\n- KONG ziqiao (lazymio) <mio_at_lazym_io>\n- YU zheng (dataisland) <dataisland_at_outlook_com>\n- Eli Cohen Nehemia (elicn) <elichn_at_gmail_com>\n- Li Hong Jhe (ucgJhe) <ucg.jhe_at_gamil_com>\n\n\n#### CI, Website，Documentations, Logo & Swags\n\n- FOO Kevin (chfl4gs) <chfl4gs_at_qiling_io>\n- SU muchen (miraisuu) <suu_at_qiling_io>\n\n\n#### Key Contributors (in no particular order)\n\n- 0ssigeno\n- liba2k\n- assafcarlsbad\n- ucgJhe\n- jhumble\n- Mark Jansen (learn-more)\n- cq674350529\n- bkerler (viperbjk)\n- bet4it\n\n\n#### Contributors (in no particular order)\n\n- WanderingGlitch\n- Nguyen Hong Quang (quangnh89)\n- re-fox\n- t14g0p\n- Hcamael\n- hugsy\n- danielhenrymantilla\n- iamyeh\n- alfink\n- bambu\n- madprogrammer\n- danielmoos\n- sigeryang\n- nullableVoidPtr\n\n\n#### Legacy Core Developers\n\n- DING tianze (D1iv3)\n- SUN bowen (w1tcher)\n- CHEN huitao (null)\n- YU tong (sp1ke)\n\n\n#### Demigod team (https://groundx.io/demigod)\n\n- NGUYEN Anh Quynh\n- NGUYEN Hong Quang\n- DO Minh Tuan\n\n\n#### Alpha testers (in no particular order, named by github id)\n\n- klks\n- ekso\n- bannsec\n- ChrisTheCoolHut\n- domenukk\n- droberson\n- hugsy\n- Masrepus\n- phdphuc\n- sashs\n- knownsec\n- hwiosec\n- iamyeh\n\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 14.845703125,
          "content": "This file details the changelog of Qiling Framework.\n\n------------------------------------\n[Version 1.4.6]: August 4th, 2023\n\n## What's Changed\n* Fix ELF argv encoding by @elicn in https://github.com/qilingframework/qiling/pull/1303\n* Qdb improvements by @ucgJhe in https://github.com/qilingframework/qiling/pull/1311\n* added a history tracker to get coverage information about the execution of the binary by @anotherdish in https://github.com/qilingframework/qiling/pull/1313\n* remove tab and replace with 4 spaces by @xwings in https://github.com/qilingframework/qiling/pull/1320\n* Fix __CreateFile implmentation to include access mask and creation disposition  by @kbsec in https://github.com/qilingframework/qiling/pull/1309\n* Add interactive pipe to simulate pwntools `interactive` function by @anotherdish in https://github.com/qilingframework/qiling/pull/1307\n* fixed get_ins_exclude_lib not handling multiple shared objects properly by @anotherdish in https://github.com/qilingframework/qiling/pull/1317\n* Fix improper signaling of emulation termination in gdb single step by @elicn in https://github.com/qilingframework/qiling/pull/1322\n* Delete legacy object before reloading custom_script by @DiamondHunters in https://github.com/qilingframework/qiling/pull/1327\n* fix #1325 by @DiamondHunters in https://github.com/qilingframework/qiling/pull/1326\n* Fix struct packing logic associated with calls to `getdents64` by @Z1pburg3r in https://github.com/qilingframework/qiling/pull/1334\n* Improve afl_fuzz wrapper by @gnbon in https://github.com/qilingframework/qiling/pull/1330\n* Periodic maintenance PR by @elicn in https://github.com/qilingframework/qiling/pull/1336\n* Added qltui in setup.py by @river-li in https://github.com/qilingframework/qiling/pull/1354\n* feat(os): add posix message queue syscalls by @chinggg in https://github.com/qilingframework/qiling/pull/1363\n* Improved handling of export table for invalid export address and removed GandCrab workaround in GetProcAddress by @clairelevin in https://github.com/qilingframework/qiling/pull/1358\n* Fix  bug: qdb  load address error by @ltlly in https://github.com/qilingframework/qiling/pull/1364\n* Periodic maintenance PR by @elicn in https://github.com/qilingframework/qiling/pull/1355\n* update return register accordingly for all arch by @ucgJhe in https://github.com/qilingframework/qiling/pull/1367\n* Getting ready for 1.4.6 by @xwings in https://github.com/qilingframework/qiling/pull/1368\n\n## New Contributors\n* @anotherdish made their first contribution in https://github.com/qilingframework/qiling/pull/1313\n* @kbsec made their first contribution in https://github.com/qilingframework/qiling/pull/1309\n* @DiamondHunters made their first contribution in https://github.com/qilingframework/qiling/pull/1327\n* @Z1pburg3r made their first contribution in https://github.com/qilingframework/qiling/pull/1334\n* @gnbon made their first contribution in https://github.com/qilingframework/qiling/pull/1330\n* @river-li made their first contribution in https://github.com/qilingframework/qiling/pull/1354\n* @clairelevin made their first contribution in https://github.com/qilingframework/qiling/pull/1358\n* @ltlly made their first contribution in https://github.com/qilingframework/qiling/pull/1364\n\n**Full Changelog**: https://github.com/qilingframework/qiling/compare/1.4.5...1.4.6\n\n------------------------------------\n[Version 1.4.5]: December 31st, 2022\n\nNew features:\n- Qdb with PE (#1295)\n\nImprovements:\n- Add pstate in const_arm64.py (#1236)\n- Implement ql_syscall_sched_yield (#1237)\n- Periodic quality PR (#1238)\n- Speed up MCU interrupt handler (#1240)\n- Minor update for setup.py, mcu test and windows registry (#1246)\n- Optimize qltui (#1247)\n- Optimize evm dependency package version manage (#1248)\n- Fix getrlimit related syscall (aka tenda fix) (#1249)\n- Add new ci for arm firmware (#1250)\n- More detailed tenda CI test and cleanup elf multithrad http test (#1251)\n- Fix MIPS relocs (#1252)\n- Newly compiled picohttpd for armeb and new test script (#1254)\n- Update armeb test binary and testing docker (#1255)\n- Update rootfs (#1256)\n- Qdb bug fix and improvement (#1257)\n- Improve handling of gdb 42000 magic pid (#1259)\n- Fix mcu issue in qdb and show flags in uppercase (#1263)\n- Update setup.py (#1267)\n- Handle Cortex M as a specific arch (#1271)\n- Fix some error in syscall fcntl and getsockopt (#1272)\n- Periodic maintenance PR (#1274)\n- Fix gdb attach on ARM thumb mode (#1285)\n- Qdb: add command show_args (#1289)\n- Periodic maintenance PR (#1293)\n\nContributors:\n- richor1042\n- vhertz\n- elicn\n- kabeor\n- xwings\n- ucgJhe\n- aquynh\n- owl129\n\n------------------------------------\n[Version 1.4.4]: September 24th, 2022\n\nNew features:\n- Add r2 extension (#1172)\n- Introduce procfs to Linux OS (#1174)\n- Add a tracer for IDAPro's Tenet plugin (#1205)\n\nImprovements:\n- Collect a few additional DLLs for x8664 (#1167)\n- Use global cwd in thread (#1170)\n- Fix QlLinuxThreadManagement.threads to be updated appropriately (#1180)\n- Fix Unix socket subsystem (#1181)\n- Maintenance PR for security and code quality (#1182 #1195)\n- Enable android 32bit test (#1184)\n- Fix wrong platform_system for unicornafl (#1185)\n- Fix arm thumb mode shellcode emulation (#1187)\n- Pump unicorn version to 2.0.0 (#1189)\n- Procfs improve & pwndbg compatiblity (#1190)\n- Fix example script issues (#1193 #1194)\n- Introduce a human-friendly disassembler (#1196)\n- Fix gdb step/continue handling (#1200)\n- Fix README.md (#1203)\n- Fix typo of default ip 127.0.0.1 (#1205)\n- Temporarily mask Python versions that are not supported by the EVM module (#1208)\n- Windows Maintenance PR (#1210)\n- Improvements around POSIX sockets (#1216)\n- Add x86_64 debug support for Qdb (#1218)\n- Renew code for picohttpd (#1221)\n- Fix missing retaddr_on_stack in Qdb for arm (#1225)\n- Qdb improvments: Mark, Jump and modify register value in qdb (#1226)\n- Allow user to build config from dictionary other than disk file (#1227)\n- fix(ida): replace __getattribute__ with __getattr__ (#1231)\n\nContributors:\n- jasperla\n- bet4it\n- chinggg\n- elicn\n- vhertz\n- cgfandia-tii\n- wtdcode\n- ucgJhe\n- aquynh\n- kabeor\n- oscardagrach\n- hamarituc\n- EtchProject\n- HackingFrogWithSunglasses\n- xwings\n\n------------------------------------\n[Version 1.4.3]: June 1st, 2022\n\nNew features:\n- Introduce PowerPC architecture support (#1140)\n\nImprovements:\n- Fix fuzzing for tendaac15 (#1096)\n- Update unicorn version to 2.0-rc6 (#1100)\n- Implemented a few more Windows msvcrt functions (#1102)\n- Minor PE Loader fix (#1104)\n- Minor quality changes (#1106)\n- Fix cacheflush syscall typo (#1115)\n- Improvements and fixes for Windows and PE (#1118)\n- Add vm_context to EVM hooks (#1119)\n- Load interpreter segments with correct perms and vaddr (#1120)\n- Fix mistakes in fuzz_x8664_linux binary (#1121)\n- Add EVM ABI helpers, fix EVM DBG stack view (#1123)\n- Fix regression caused by missing exception handling when opening socket (#1124)\n- CI improvement (#1128 #1134)\n- Add macho load command 'LC_LOAD_WEAK_DYLIB' support (#1133)\n- Fix breakage of non-Windows binary emulation on Windows host (#1143)\n- Remove misused region bound check of unmap_all (#1144)\n- Change deprecated interfaces of IDA (#1145)\n- Use importlib to retrieve package version (#1146)\n- New and improved gdbserver (#1148)\n- Rewrite package data reading (#1150)\n- Misc improvements (#1154)\n- Fix memory exhaustion problem caused by the logger (#1161)\n\nContributors:\n- wtdcode\n- aquynh\n- elicn\n- xwings\n- cq674350529\n- TheZ3ro\n- bet4it\n- chinggg\n- kabeor\n- chfl4gs\n- profiles\n- OlfillasOdikno\n- nmantan\n- machinewu\n- nullableVoidPtr\n- Phat3\n\n\n------------------------------------\n[Version 1.4.2]: Feb 13th, 2022\n\nNew features:\n- Add stm32f103 support (#1087)\n- Add Arduino Due (SAM3X8E) Support (#1090)\n\nImprovements:\n- ARM exception handler improvements (#1056)\n- UEFI improvements (#1061)\n- Qdb improvements (#1058)\n- Update rich api in evm dbgcui (#1062)\n- Add security coockies back into PE loader for kernel driver (#1063)\n- Fix ql_open_flag_mapping for Linux binary emulation on Windows (#1064)\n- Minor changes and fixes to the tracing module (#1065)\n- Fix unicornafl for linux_x8664 fuzzing example (#1068)\n- Fuzzing improvements (#1075)\n- Add fix and example for openat path traversion (#1076)\n- Fix _CreateFileA params issue (#1079)\n\nContributors:\n- nmantani\n- hardik05\n- cla7aye15I4nd\n- ucgJhe\n- elicn\n- wtdcode\n- kabeor\n- xwings\n\n\n------------------------------------\n[Version 1.4.1]: Dec 29th, 2021\n\nNew features:\n- Introduced riscv, both 32 and 64 (#980)\n- Added U-boot (#1000)\n- Abstract calls to native functions (#1013)\n\nImprovements:\n- Minor improvements to memory module (#1012)\n- Refactored core hooks (#966)\n- update ql.os.posix.const_mapping with more os/arch match (#973)\n- More update in MCU modules (#971)\n- Fix getpeername and getsockname syscalls (#986)\n- Qdb improvements (#999)\n- QNX improvements (#1054)\n\nContributors:\n- cq674350529\n- ucgJhe\n- cla7aye15I4nd\n- elicn\n- xwings\n\n\n------------------------------------\n[Version 1.4.0]: Oct 20th, 2021\n\n- Added MCU Engine\n- Bug fix for qdb\n- Bug fix for debugger\n- Bug fix for ql.mem\n- Bump to Unicorn 2\n\n\n------------------------------------\n[Version 1.3.0]: Sept 25th, 2021\n\n- Added QNX\n- Aded Dynamically executed QNX\n- Added more Posix syscall\n- Bugfix: GDB server on MIPS binary\n- Major refactor of Windows DLL\n- Add Win32 16bit compatibility file api\n- Fixed ql.mem.search logic\n- ql.arch refactor\n- Added EVM engine\n\n\n------------------------------------\n[Version 1.2.4]: June 15th, 2021\n\n- Added custom engine extension\n- Added more Posix syscall\n- Refactor: Posix syscall\n- Refactor: Memory management\n- Refactor: Heap management\n- Cleanup and getting ready for engine module\n\n\n------------------------------------\n[Version 1.2.3]: March 30th, 2021\n\n- Improved PR #689, Android syscall and test fix\n- GDB speed optimization\n- Fixed return value for uid/gid related syscall\n- Resolved multilevel symbolic links\n- Demigod set.api implementation\n- Added support for arguments inside IDA plugin\n- Major refactor, see commit 4aa8e59e04d5a8a5520e4e1e2595ecc78a80beba\n- Clean and remove rootfs\n- ql.filter now accepts a regular expression\n- consolidate output into verbose\n\n\n------------------------------------\n[Version 1.2.2]: February 8th, 2021\n\n- Fix _acmdln and _wcmdln handling\n- More UEFI refactor\n- Refactor common OS space\n- Bring sality test to work again\n- Clean up more test case\n- First stage multithread rewrite done\n- Updated Qiling(shellcode=) to Qiling(code=), still keeping Qiling(shellcode=) for legacy purpose\n- Added support for SMM_RUNTIME_SERVICES_TABLE\n- Fixed regression in code coverage collection\n- Added generic ql.mem.read_ptr helper function\n- merged UEFI, windows, linux and macos print_function\n- merged UEFI, windows, linux and macos fncc\n- make MacOS uses more Qiling API\n\n\n------------------------------------\n[Version 1.2.1]: January 1st, 2021\n\n- Added support for custom envs variables inside IDA plugin\n- Demigod: Fixed lkm mapping and added support for MIPS32EL\n- Demigod: Added support for Linux x86 32bit\n- Added support for binaries that return from their entrypoint (PE / ELF)\n- Configure Qiling with 'stop_on_stackpointer' or 'stop_on_exit_trap'\n- Add basic Windows driver tests / example\n- UEFI refactor\n\n\n------------------------------------\n[Version 1.2]: November 16th, 2020\n\n- Demigod finally arrived, more information about [Demigod](https://groundx.io/demigod/)\n- Linux: Implement futex bitset && Check library initialization\n- Linux: vfork and fork syscall mappings\n- execve() ql.argv and ql.env fix\n- De-flattern with IDA plugin now supports ARM && ARM64 with experimental IDA mircocode API.\n- Snapshot mechanism allows saving and restoring of OS and Loader information.\n- Welcome Lazymio and Kabeor to the team\n- Improve register handling (uppercase/lowercase) and add LR register support to arm64\n- Fix ELF Memory mapping issues\n- Fixed directory traversal bug\n\n\n------------------------------------\n[Version 1.1.3]: September 30th, 2020\n\n- Added Doogie example and implement more interrupts\n- Added ollvm de-flattern support for IDA plugin\n- Fixed the popup menu doesn't show when the IDA plugin is put into plugins directory\n- Added Json report extension\n- Fix register mapping\n- ql_syscall_writeev: Use ql.dprint instead of checking debug level\n- Added support for fcntl64 F_SETFL and non-blocking sockets \n- drcov_exact: coverage collection at instruction granularity \n- Added UDP support\n\n\n------------------------------------\n[Version 1.1.2]: September 6th, 2020\n\n- Qiling Debugger now comes with reverse debugging\n- Added qltool into pypi packages\n- Added more Windows API\n- Add mapper support for standalone disks.\n- More BIOS/DOS interrupts support shipped with fully emulated Petya as a mbr analysis example.\n\n\n------------------------------------\n[Version 1.1.1]: August 23th, 2020\n\n- Fixed Windows \"import resource\" issue\n- Added ql.save and ql.restore aka Qiling's Snapshot\n- Added ql.os.fd.save() and ql.os.fd.restore() to save file descriptor\n- Added IDA Plugin\n- Test, patch and make sure arm_thumb can work on its own\n- Added Qiling Debugger - Currently only works with MIPS\n- Added experimental 8086 and DOS support.\n- Fixed path transformation on Windows when running Linux.\n- IDA Plugin able to instrument code now\n- Refactor ql.fs_mapper (now ql.os.fs_mapper)\n\n\n------------------------------------\n[Version 1.1]: July 24th, 2020\n\n- More refactors and bug fixes\n- Adding DLL images for PE coverage tracing\n- Added hook_mem_invalid\n- More UEFI API\n\n\n------------------------------------\n[Version 1.1-rc1]: July 17th, 2020\n\n- More refactors and bug fixes\n- More detailed debug output\n- Fix MIPS_EB overflow issue\n- Introduce heap sanitizer\n\n\n------------------------------------\n[Version 1.1-alpha2]: June 26th, 2020\n\n- More refactors and bug fixes\n- Added Key Developers section in CREDITS.TXT\n- Golang compiled binary support\n- custom ql.fs_mapper\n- fixed x86 and arm multithread\n- moved all posix syscall mapping to complete syscall table\n- Supports more Linux syscalls\n- Supports more Windows APIs\n- OnEnter, OnExit for syscall, windows API and Linux LIB C functions\n\n\n------------------------------------\n[Version 1.1-alpha1]: May 26th, 2020\n\n- More refactor and bug fix\n- Support UEFI\n- Added more memory, register related API\n- Support output filtering\n- Support more Linux syscalls\n- Support more Windows APIs\n- Moved more system variable to ql.profile\n- Support shellcode debugging\n- Minor bug fix for gdbserver\n- Welcome KLKS to the team\n\n\n-------------------------------\n[Version 1.0]: April 26th, 2020\n\n- Windows anti anti-debugger, tested with Al-Khaser\n- Support ARM64 Android binary\n\n\n-----------------------------------\n[Version 1.0-rc1]: April 12nd, 2020\n\n- Support debugger: GDB, IDAPro, Radare\n- Support OS profile to customize API output (Windows)\n- Support more Linux syscalls\n- Support more Windows APIs\n- Support MacOS dyld\n\n\n---------------------------------------\n[Version 1.0 beta]: November 14th, 2019\n\n- First public released\n\n\n--------------------------------------------\n[Version 1.0 close alpha]: October 9th, 2019\n\n- Closed alpha test\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.6220703125,
          "content": "FROM python:3.8-slim AS builder\n\nLABEL maintainer=\"Kevin Foo <chfl4gs@qiling.io>\"\n\nENV DEBIAN_FRONTEND=noninteractive\nENV AM_I_IN_A_DOCKER_CONTAINER Yes\n\nRUN apt-get update \\\n  && apt-get -y upgrade \\\n  && apt-get install -y --no-install-recommends cmake build-essential gcc git\n\nCOPY . /qiling\n\nRUN cd /qiling \\\n  && pip wheel . -w wheels\n\nFROM python:3.8-slim AS base\n\nCOPY --from=builder /qiling /qiling\n\nWORKDIR /qiling\n\nRUN apt-get update \\\n  && apt-get install -y --no-install-recommends unzip apt-utils \\\n  && rm -rf /var/lib/apt/lists/* \\\n  && pip3 install --no-deps wheels/*.whl \\\n  && rm -rf wheels\n\nENV HOME /qiling\n\nCMD bash\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.134765625,
          "content": "[![Documentation Status](https://readthedocs.org/projects/qilingframework/badge/?version=latest)](https://docs.qiling.io)\n[![Downloads](https://pepy.tech/badge/qiling)](https://pepy.tech/project/qiling)\n[![Chat on Telegram](https://img.shields.io/badge/Chat%20on-Telegram-brightgreen.svg)](https://t.me/qilingframework)\n\n---\n\n<p align=\"center\">\n<img width=\"150\" height=\"150\" src=\"https://raw.githubusercontent.com/qilingframework/qiling/master/docs/qiling2_logo_small.png\">\n</p>\n\n[Qiling's usecase, blog and related work](https://github.com/qilingframework/qiling/issues/134)\n\nQiling is an advanced binary emulation framework, with the following features:\n\n- Emulate multi-platforms: Windows, MacOS, Linux, Android, BSD, UEFI, DOS, MBR, Ethereum Virtual Machine\n- Emulate multi-architectures: 8086, X86, X86_64, ARM, ARM64, MIPS, RISCV, PowerPC\n- Support multiple file formats: PE, MachO, ELF, COM, MBR\n- Support Windows Driver (.sys), Linux Kernel Module (.ko) & MacOS Kernel (.kext) via [Demigod](https://groundx.io/demigod/)\n- Emulates & sandbox code in an isolated environment\n- Provides a fully configurable sandbox\n- Provides in-depth memory, register, OS level and filesystem level API\n- Fine-grain instrumentation: allows hooks at various levels (instruction/basic-block/memory-access/exception/syscall/IO/etc)\n- Provides virtual machine level API such as save and restore current execution state\n- Supports cross architecture and platform debugging capabilities\n- Built-in debugger with reverse debugging capability\n- Allows dynamic hotpatch on-the-fly running code, including the loaded library\n- True framework in Python, making it easy to build customized security analysis tools on top\n\nQiling also made its way to various international conferences.\n\n2022:\n- [Black Hat, EU](https://www.blackhat.com/eu-22/arsenal/schedule/#reversing-mcu-with-firmware-emulation-29553)\n- [Black Hat, MEA](https://blackhatmea.com/node/724)\n\n2021:\n- [Black Hat, USA](https://www.blackhat.com/us-21/arsenal/schedule/index.html#bringing-the-x-complete-re-experience-to-smart-contract-24119)\n- [Hack In The Box, Amsterdam](https://conference.hitb.org/hitbsecconf2021ams/sessions/when-qiling-framework-meets-symbolic-execution/)\n- [Black Hat, Asia](https://www.blackhat.com/asia-21/arsenal/schedule/index.html#qiling-smart-analysis-for-smart-contract-22643)\n\n2020:\n- [Black Hat, Europe](https://www.blackhat.com/eu-20/arsenal/schedule/index.html#qiling-framework-deep-dive-into-obfuscated-binary-analysis-21781)\n- [Black Hat, USA](https://www.blackhat.com/us-20/arsenal/schedule/index.html#qiling-framework-from-dark-to-dawn-----enlightening-the-analysis-of-the-most-mysterious-iot-firmware--21062)\n- [Black Hat, USA (Demigod)](https://www.blackhat.com/us-20/briefings/schedule/#demigod-the-art-of-emulating-kernel-rootkits-20009)\n- [Black Hat, Asia](https://www.blackhat.com/asia-20/arsenal/schedule/index.html#qiling-lightweight-advanced-binary-analyzer-19245)\n- [Hack In The Box, Lockdown 001](https://conference.hitb.org/lockdown-livestream/)\n- [Hack In The Box, Lockdown 002](https://conference.hitb.org/hitb-lockdown002/virtual-labs/virtual-lab-qiling-framework-learn-how-to-build-a-fuzzer-based-on-a-1day-bug/)\n- [Hack In The Box, Cyberweek](https://cyberweek.ae/2020/lab-qiling-framework/)\n- [Nullcon](https://nullcon.net/website/goa-2020/speakers/kaijern-lau.php)\n    \n2019:\n\n- [Defcon, USA](https://www.defcon.org/html/defcon-27/dc-27-demolabs.html#QiLing)\n- [Hitcon](https://hitcon.org/2019/CMT/agenda)\n- [Zeronights](https://zeronights.ru/report-en/qiling-io-advanced-binary-emulation-framework/)\n\n\nQiling is backed by [Unicorn engine](http://www.unicorn-engine.org).\n\nVisit our website https://www.qiling.io for more information.\n\n---\n#### License\n\nThis project is released and distributed under [free software license GPLv2](https://github.com/qilingframework/qiling/blob/master/COPYING) and later version.\n\n---\n\n#### Qiling vs other Emulators\n\nThere are many open source emulators, but two projects closest to Qiling are [Unicorn](http://www.unicorn-engine.org) & [Qemu usermode](https://qemu.org). This section explains the main differences of Qiling against them.\n\n##### Qiling vs Unicorn engine\n\nBuilt on top of Unicorn, but Qiling & Unicorn are two different animals.\n\n- Unicorn is just a CPU emulator, so it focuses on emulating CPU instructions, that can understand emulator memory. Beyond that, Unicorn is not aware of higher level concepts, such as dynamic libraries, system calls, I/O handling or executable formats like PE, MachO or ELF. As a result, Unicorn can only emulate raw machine instructions, without Operating System (OS) context\n- Qiling is designed as a higher level framework, that leverages Unicorn to emulate CPU instructions, but can understand OS: it has executable format loaders (for PE, MachO & ELF at the moment), dynamic linkers (so we can load & relocate shared libraries), syscall & IO handlers. For this reason, Qiling can run executable binary without requiring its native OS\n\n##### Qiling vs Qemu usermode\n\nQemu usermode does similar thing to our emulator, that is to emulate whole executable binaries in cross-architecture way. However, Qiling offers some important differences against Qemu usermode.\n\n- Qiling is a true analysis framework, that allows you to build your own dynamic analysis tools on top (in friendly Python language). Meanwhile, Qemu is just a tool, not a framework\n- Qiling can perform dynamic instrumentation, and can even hotpatch code at runtime. Qemu does not do either\n- Not only working cross-architecture, Qiling is also cross-platform, so for example you can run Linux ELF file on top of Windows. In contrast, Qemu usermode only run binary of the same OS, such as Linux ELF on Linux, due to the way it forwards syscall from emulated code to native OS\n- Qiling supports more platforms, including Windows, MacOS, Linux & BSD. Qemu usermode can only handle Linux & BSD\n\n---\n\n#### Installation\nPlease see [setup guide](https://docs.qiling.io/en/latest/install/) file for how to install Qiling Framework.\n\n---\n\n#### Examples\n\n- The example below shows how to use Qiling framework in the most striaghtforward way to emulate a Windows executable.\n\n```python\nfrom qiling import Qiling\n\nif __name__ == \"__main__\":\n    # initialize Qiling instance, specifying the executable to emulate and the emulated system root.\n    # note that the current working directory is assumed to be Qiling home\n    ql = Qiling([r'examples/rootfs/x86_windows/bin/x86_hello.exe'], r'examples/rootfs/x86_windows')\n\n    # start emulation\n    ql.run()\n```\n\n- The following example shows how a Windows crackme may be patched dynamically to make it always display the \"Congratulation\" dialog.\n\n```python\nfrom qiling import Qiling\n\ndef force_call_dialog_func(ql: Qiling):\n    # get DialogFunc address from current stack frame\n    lpDialogFunc = ql.stack_read(-8)\n\n    # setup stack memory for DialogFunc\n    ql.stack_push(0)\n    ql.stack_push(1001)     # IDS_APPNAME\n    ql.stack_push(0x111)    # WM_COMMAND\n    ql.stack_push(0)\n\n    # push return address\n    ql.stack_push(0x0401018)\n\n    # resume emulation from DialogFunc address\n    ql.arch.regs.eip = lpDialogFunc\n\n\nif __name__ == \"__main__\":\n    # initialize Qiling instance\n    ql = Qiling([r'rootfs/x86_windows/bin/Easy_CrackMe.exe'], r'rootfs/x86_windows')\n\n    # NOP out some code\n    ql.patch(0x004010B5, b'\\x90\\x90')\n    ql.patch(0x004010CD, b'\\x90\\x90')\n    ql.patch(0x0040110B, b'\\x90\\x90')\n    ql.patch(0x00401112, b'\\x90\\x90')\n\n    # hook at an address with a callback\n    ql.hook_address(force_call_dialog_func, 0x00401016)\n    ql.run()\n```\n\nThe below Youtube video shows how the above example works.\n\n#### Emulating ARM router firmware on Ubuntu X64 machine\n\n- Qiling Framework hot-patch and emulates ARM router's /usr/bin/httpd on a X86_64Bit Ubuntu\n\n[![qiling Tutorial: Emulating and Fuzz ARM router firmware](https://github.com/qilingframework/theme.qiling.io/blob/master/source/img/fuzzer.jpg?raw=true)](https://www.youtube.com/watch?v=e3_T3KLh2NU \" Demo #3 Emulating and Fuzz ARM router firmware\")\n\n#### Qiling's IDAPro Plugin: Instrument and Decrypt Mirai's Secret\n\n- This video demonstrate how Qiling's IDAPro plugin able to make IDApro run with Qiling instrumentation engine\n\n[![](http://img.youtube.com/vi/ZWMWTq2WTXk/0.jpg)](http://www.youtube.com/watch?v=ZWMWTq2WTXk \"Qiling's IDAPro Plugin: Instrument and Decrypt Mirai's Secret\")\n\n#### GDBserver with IDAPro demo\n\n- Solving a simple CTF challenge with Qiling Framework and IDAPro\n\n[![Solving a simple CTF challenge with Qiling Framework and IDAPro](https://i.ytimg.com/vi/SPjVAt2FkKA/0.jpg)](https://www.youtube.com/watch?v=SPjVAt2FkKA \"Video DEMO 2\")\n\n\n#### Emulating MBR\n\n- Qiling Framework emulates MBR\n\n[![qiling DEMO: Emulating MBR](https://github.com/qilingframework/theme.qiling.io/blob/master/source/img/mbr.png?raw=true)](https://github.com/qilingframework/theme.qiling.io/blob/master/source/img/mbr.png?raw=true \"Demo #4 Emulating UEFI\")\n\n\n\n---\n\n#### Qltool\n\nQiling also provides a friendly tool named `qltool` to quickly emulate shellcode & executable binaries.\n\nWith qltool, easy execution can be performed:\n\n\nWith shellcode:\n\n```\n$ ./qltool code --os linux --arch arm --format hex -f examples/shellcodes/linarm32_tcp_reverse_shell.hex\n```\n\nWith binary file:\n\n```\n$ ./qltool run -f examples/rootfs/x8664_linux/bin/x8664_hello --rootfs  examples/rootfs/x8664_linux/\n```\n\nWith binary and GDB debugger enable:\n\n```\n$ ./qltool run -f examples/rootfs/x8664_linux/bin/x8664_hello --gdb 127.0.0.1:9999 --rootfs examples/rootfs/x8664_linux\n```\n\nWith code coverage collection (UEFI only for now):\n\n```\n$ ./qltool run -f examples/rootfs/x8664_efi/bin/TcgPlatformSetupPolicy --rootfs examples/rootfs/x8664_efi --coverage-format drcov --coverage-file TcgPlatformSetupPolicy.cov\n```\n\nWith json output (Windows mainly):\n\n```\n$ ./qltool run -f examples/rootfs/x86_windows/bin/x86_hello.exe --rootfs  examples/rootfs/x86_windows/ --console False --json\n```\n---\n\n\n#### Contact\n\nGet the latest info from our website https://www.qiling.io\n\nContact us at email info@qiling.io, or via Twitter [@qiling_io](https://twitter.com/qiling_io) or [Weibo](https://www.weibo.com/sgniwx)\n\n---\n\n#### Core developers, Key Contributors and etc\n\nPlease refer to [CREDITS.md](https://github.com/qilingframework/qiling/blob/dev/CREDITS.md)\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.1025390625,
          "content": "Features request and TODO please refer to issue 333 https://github.com/qilingframework/qiling/issues/333\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "qiling",
          "type": "tree",
          "content": null
        },
        {
          "name": "qltool",
          "type": "blob",
          "size": 11.4853515625,
          "content": "#!/usr/bin/env python3\n#\n# Cross Platform and Multi Architecture Advanced Binary Emulation Framework\n#\n\nimport argparse\nimport os\nimport sys\nimport ast\nimport pickle\n\nfrom pprint import pprint\nfrom typing import TYPE_CHECKING, Mapping, Type\n\nfrom unicorn import __version__ as uc_ver\nfrom qiling import __version__ as ql_ver\n\nfrom qiling import Qiling\nfrom qiling.arch import utils as arch_utils\nfrom qiling.debugger.qdb import QlQdb\nfrom qiling.const import QL_VERBOSE, QL_ENDIAN, os_map, arch_map, verbose_map\nfrom qiling.extensions.coverage import utils as cov_utils\nfrom qiling.extensions import report\n\n\nif TYPE_CHECKING:\n    from enum import Enum\n\n\n# read code from file\ndef read_file(fname: str):\n    with open(fname, \"rb\") as f:\n        content = f.read()\n\n    return content\n\n\nclass __arg_env(argparse.Action):\n    def __call__(self, parser, namespace, values: str, option_string):\n        if os.path.exists(values):\n            with open(values, 'rb') as f:\n                env = pickle.load(f)\n        else:\n            env = ast.literal_eval(values)\n\n        setattr(namespace, self.dest, env or {})\n\n\ndef __make_enum_arg(enum_rmap: Mapping[str, 'Enum'], aliases: Mapping[str, str] = {}) -> Type[argparse.Action]:\n    class __enum_arg(argparse.Action):\n        def __call__(self, parser, namespace, values: str, option_string):\n            values = values.casefold()\n\n            if values in aliases:\n                values = aliases[values]\n\n            setattr(namespace, self.dest, enum_rmap[values])\n\n    return __enum_arg\n\n\n__arg_archtype = __make_enum_arg(arch_map, {'x86_64': 'x8664', 'riscv32': 'riscv'})\n__arg_ostype = __make_enum_arg(os_map, {'darwin': 'macos'})\n__arg_verbose = __make_enum_arg(verbose_map)\n\n\ndef handle_code(options: argparse.Namespace):\n    archendian = {\n        'little': QL_ENDIAN.EL,\n        'big'   : QL_ENDIAN.EB\n    }[options.endian]\n\n    if options.format == 'hex':\n        if options.input is not None:\n            print(\"Load HEX from ARGV\")\n            code = str(options.input).strip(\"\\\\\\\\x\").split(\"x\")\n            code = \"\".join(code).strip()\n            code = bytes.fromhex(code)\n        elif options.filename is not None:\n            print(\"Load HEX from FILE\")\n            code = str(read_file(options.filename)).strip('b\\'').strip('\\\\n')\n            code = code.strip('x').split(\"\\\\\\\\x\")\n            code = \"\".join(code).strip()\n            code = bytes.fromhex(code)\n        else:\n            print(\"ERROR: File not found\")\n            exit(1)\n\n    elif options.format == 'asm':\n        print(\"Load ASM from FILE\")\n        assembly = read_file(options.filename)\n\n        assembler = arch_utils.assembler(options.arch, archendian, options.thumb)\n        code, _ = assembler.asm(assembly)\n        code = bytes(code)\n\n    elif options.format == 'bin':\n        print(\"Load BIN from FILE\")\n        if options.filename is not None:\n            code = read_file(options.filename)\n        else:\n            print(\"ERROR: File not found\")\n            exit(1)\n\n    ql = Qiling(\n        rootfs=options.rootfs,\n        env=options.env,\n        code=code,\n        ostype=options.os,\n        archtype=options.arch,\n        verbose=options.verbose,\n        profile=options.profile,\n        filter=options.filter,\n        endian=archendian,\n        thumb=options.thumb,\n    )\n\n    return ql\n\n\ndef handle_run(options: argparse.Namespace):\n    effective_argv = []\n\n    # with argv\n    if options.filename is not None and options.run_args == []:\n        effective_argv = [options.filename] + options.args\n\n    # Without argv\n    elif options.filename is None and options.args == [] and options.run_args != []:\n        effective_argv = options.run_args\n\n    else:\n        print(\"ERROR: Command error!\")\n\n    ql = Qiling(\n        argv=effective_argv,\n        rootfs=options.rootfs,\n        env=options.env,\n        verbose=options.verbose,\n        profile=options.profile,\n        console=options.console,\n        log_file=options.log_file,\n        log_plain=options.log_plain,\n        multithread=options.multithread,\n        filter=options.filter,\n        libcache=options.libcache\n    )\n\n    # attach Qdb at entry point\n    if options.qdb is True:\n        QlQdb(ql, rr=options.rr).run()\n        exit()\n\n    return ql\n\n\ndef handle_examples(parser: argparse.ArgumentParser):\n    prog = os.path.basename(__file__)\n\n    __ql_examples = f\"\"\"Examples:\n\n    With code:\n        {prog} code --os linux --arch arm --format hex -f examples/shellcodes/linarm32_tcp_reverse_shell.hex\n        {prog} code --os linux --arch x86 --format asm -f examples/shellcodes/lin32_execve.asm\n\n    With binary file:\n        {prog} run -f examples/rootfs/x8664_linux/bin/x8664_hello --rootfs examples/rootfs/x8664_linux\n        {prog} run -f examples/rootfs/mips32el_linux/bin/mips32el_hello --rootfs examples/rootfs/mips32el_linux\n\n    With binary file and Qdb:\n        {prog} run -f examples/rootfs/mips32el_linux/bin/mips32el_hello --rootfs examples/rootfs/mips32el_linux --qdb\n        {prog} run -f examples/rootfs/mips32el_linux/bin/mips32el_hello --rootfs examples/rootfs/mips32el_linux --qdb --rr\n\n    With binary file and gdbserver:\n        {prog} run -f examples/rootfs/x8664_linux/bin/x8664_hello --gdb 127.0.0.1:9999 --rootfs examples/rootfs/x8664_linux\n\n    With binary file and additional argv:\n        {prog} run -f examples/rootfs/x8664_linux/bin/x8664_args --rootfs examples/rootfs/x8664_linux --args test1 test2 test3\n\n    With binary file and various output format:\n        {prog} run -f examples/rootfs/mips32el_linux/bin/mips32el_hello --rootfs examples/rootfs/mips32el_linux --verbose disasm\n        {prog} run -f examples/rootfs/mips32el_linux/bin/mips32el_hello --rootfs examples/rootfs/mips32el_linux --filter ^open\n\n    With UEFI file:\n        {prog} run -f examples/rootfs/x8664_efi/bin/TcgPlatformSetupPolicy --rootfs examples/rootfs/x8664_efi --env examples/rootfs/x8664_efi/rom2_nvar.pickel\n\n    With binary file and json output:\n        {prog} run -f examples/rootfs/x86_windows/bin/x86_hello.exe --rootfs examples/rootfs/x86_windows --no-console --json\n\n\"\"\"\n\n    parser.exit(0, __ql_examples)\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--version', action='version', version=f'qltool for Qiling {ql_ver}, using Unicorn {uc_ver}')\n\n    commands = parser.add_subparsers(title='sub commands', description='select execution mode', dest='subcommand', required=True)\n\n    # set \"run\" subcommand options\n    run_parser = commands.add_parser('run', help='run a program')\n    run_parser.add_argument('-f', '--filename', default=None, metavar=\"FILE\", help=\"filename\")\n    run_parser.add_argument('--rootfs', required=True, help='emulated rootfs')\n    run_parser.add_argument('--args', default=[], nargs=argparse.REMAINDER, dest=\"args\", help=\"args\")\n    run_parser.add_argument('run_args', default=[], nargs=argparse.REMAINDER)\n\n    # set \"code\" subcommand options\n    code_parser = commands.add_parser('code', help='execute a shellcode')\n    code_parser.add_argument('-f', '--filename', metavar=\"FILE\", help=\"filename\")\n    code_parser.add_argument('-i', '--input', metavar=\"INPUT\", dest=\"input\", help='input hex value')\n    code_parser.add_argument('--arch', required=True, choices=arch_map, action=__arg_archtype)\n    code_parser.add_argument('--thumb', action='store_true', default=False, help='specify thumb mode for ARM')\n    code_parser.add_argument('--endian', choices=('little', 'big'), default='little', help='specify endianess for bi-endian archs')\n    code_parser.add_argument('--os', required=True, choices=os_map, action=__arg_ostype)\n    code_parser.add_argument('--rootfs', default='.', help='emulated root filesystem, that is where all libraries reside')\n    code_parser.add_argument('--format', choices=('asm', 'hex', 'bin'), default='bin', help='input file format')\n\n    # set \"examples\" subcommand\n    expl_parser = commands.add_parser('examples', help='show examples and exit', add_help=False)\n\n    # set \"qltui\" subcommand\n    qltui_parser = commands.add_parser('qltui', help='show qiling Terminal User Interface', add_help=False)\n\n    qltui_enabled = False\n    comm_parser = run_parser\n\n    if len(sys.argv) > 1 and sys.argv[1] == 'code':\n        comm_parser = code_parser\n\n    # set common options\n    comm_parser.add_argument('-v', '--verbose', choices=verbose_map, default=QL_VERBOSE.DEFAULT, action=__arg_verbose, help='set verbosity level')\n    comm_parser.add_argument('--env', metavar=\"FILE\", action=__arg_env, default={}, help=\"pickle file containing an environment dictionary\")\n    comm_parser.add_argument('-g', '--gdb', nargs='?', metavar='SERVER:PORT', const='gdb', help='enable gdb server')\n    comm_parser.add_argument('--qdb', action='store_true', help='attach Qdb at entry point, it\\'s MIPS, ARM(THUMB) supported only for now')\n    comm_parser.add_argument('--rr', action='store_true', help='switch on record and replay feature in qdb, only works with --qdb')\n    comm_parser.add_argument('--profile', help=\"define a customized profile\")\n    comm_parser.add_argument('--no-console', action='store_false', dest='console', help='do not emit output to console')\n    comm_parser.add_argument('-e', '--filter', metavar='REGEXP', default=None, help=\"apply a filtering regexp on log output\")\n    comm_parser.add_argument('--log-file', help=\"write log to a file\")\n    comm_parser.add_argument('--log-plain', action='store_true', help=\"do not use colors in log output\")\n    comm_parser.add_argument('--root', action='store_true', help='enable sudo required mode')\n    comm_parser.add_argument('--debug-stop', action='store_true', help='stop running on error; requires verbose to be set to either \"debug\" or \"dump\"')\n    comm_parser.add_argument('-m', '--multithread', action='store_true', help='run in multithread mode')\n    comm_parser.add_argument('--timeout', type=int, default=0, help='set emulation timeout')\n    comm_parser.add_argument('-c', '--coverage-file', default=None, help='code coverage file name')\n    comm_parser.add_argument('--coverage-format', default='drcov', choices=cov_utils.factory.formats, help='code coverage file format')\n    comm_parser.add_argument('--json', action='store_true', help='print a json report of the emulation')\n    comm_parser.add_argument('--libcache', action='store_true', help='enable dll caching for windows')\n    options = parser.parse_args()\n\n    if options.subcommand == 'examples':\n        handle_examples(parser)\n\n    if options.subcommand == 'qltui':\n        import qltui\n        options = qltui.get_data()\n        qltui_enabled = True\n\n    # ql file setup\n    if options.subcommand == 'run':\n        ql = handle_run(options)\n\n    # ql code setup\n    if options.subcommand == 'code':\n        ql = handle_code(options)\n\n    # ql execute additional options\n    if options.gdb:\n        argval = options.gdb\n\n        if argval != 'gdb':\n            argval = f'gdb:{argval}'\n\n        ql.debugger = argval\n\n    if options.debug_stop:\n        if options.verbose not in (QL_VERBOSE.DEBUG, QL_VERBOSE.DUMP):\n            parser.error('the debug_stop option requires verbose to be set to either \"debug\" or \"dump\"')\n\n        ql.debug_stop = True\n\n    if options.root:\n        ql.root = True\n\n    # ql run\n    with cov_utils.collect_coverage(ql, options.coverage_format, options.coverage_file):\n        if qltui_enabled:\n            hook_dictionary = qltui.hook(ql)\n        ql.run(timeout=options.timeout)\n\n    if options.json:\n        report = report.generate_report(ql)\n        if qltui_enabled:\n            report[\"syscalls\"] = qltui.transform_syscalls(ql.os.stats.syscalls)\n            qltui.show_report(ql, report, hook_dictionary)\n        else:\n            pprint(report)\n\n    exit(ql.os.exit_code)\n"
        },
        {
          "name": "qltui.py",
          "type": "blob",
          "size": 18.3984375,
          "content": "import os\nimport ast\nimport pickle\nimport re\nimport six\nimport argparse\nimport json\n\nfrom pyfx import PyfxApp\nfrom pprint import pprint\nfrom datetime import datetime\n\nimport questionary\nfrom questionary import Validator, ValidationError\ntry:\n    from termcolor import colored\nexcept ImportError:\n    colored = None\n\nfrom qiling import Qiling\nfrom qiling.const import os_map, arch_map, verbose_map\nfrom qiling.extensions.coverage import utils as cov_utils\n\nmotd = \"\"\"\n    ██████     ███  ████   ███                     \n  ███░░░░███  ░░░  ░░███  ░░░                      \n ███    ░░███ ████  ░███  ████  ████████    ███████\n░███     ░███░░███  ░███ ░░███ ░░███░░███  ███░░███\n░███   ██░███ ░███  ░███  ░███  ░███ ░███ ░███ ░███\n░░███ ░░████  ░███  ░███  ░███  ░███ ░███ ░███ ░███\n ░░░██████░██ █████ █████ █████ ████ █████░░███████\n   ░░░░░░ ░░ ░░░░░ ░░░░░ ░░░░░ ░░░░ ░░░░░  ░░░░░███\n                                           ███ ░███\n                                          ░░██████ \n                                           ░░░░░░\n\"\"\"\n\nERROR_COLOR = \"red\"\n\nHEADING_COLOR = \"green\"\n\nOUTPUT_COLOR = \"blue\"\n\nTITLE_COLOR = \"blue\"\n\nprog = os.path.basename(__file__)\n\nHEX_REGEX = r'^(0[xX])[a-fA-F0-9]+$'\n\n\nclass Callback_Functions():\n    \"\"\"\n    Callback Functions for Hook Operation\n    \"\"\"\n\n    @staticmethod\n    def read_mem(ql: Qiling, *args):\n        user_data = args[-1]\n        buff = ql.mem.read(user_data[\"address\"], user_data[\"bytes_size\"])\n        ql.log.info(f\"Hook was triggered at -> {user_data['address']}\")\n        ql.log.info(buff)\n\n    @staticmethod\n    def read_reg(ql: Qiling, *args):\n        user_data = args[-1]\n        buff = ql.reg.read(user_data[\"register_name\"])\n        ql.log.info(f\"Hook was triggered at -> {user_data['register_name']}\")\n        ql.log.info(buff)\n\n    @staticmethod\n    def write_mem(ql: Qiling, *args):\n        user_data = args[-1]\n        buff = ql.mem.write(user_data[\"address\"], user_data[\"value\"])\n        ql.log.info(f\"Hook was triggered at -> {user_data['address']}\")\n        ql.log.info(buff)\n\n    @staticmethod\n    def write_reg(ql: Qiling, *args):\n        user_data = args[-1]\n        buff = ql.reg.write(user_data[\"register_name\"], user_data[\"value\"])\n        ql.log.info(f\"Hook was triggered at -> {user_data['register_name']}\")\n        ql.log.info(buff)\n\n    @staticmethod\n    def emu_start(ql: Qiling, *args):\n        user_data = args[-1]\n        ql.emu_start(begin=user_data[\"start\"], end=user_data[\"end\"])\n\n    @staticmethod\n    def emu_stop(ql: Qiling, *args):\n        ql.log.info('killer switch found, stopping')\n        ql.emu_stop()\n\n    @staticmethod\n    def save(ql: Qiling, *args):\n        ql.save()\n\ndef env_arg(value):\n    \"\"\"\n    Function to read env parameter\n    \"\"\"\n    if value == \"{}\":\n        return {}\n    else:\n        if os.path.exists(value):\n            with open(value, 'rb') as f:\n                env = pickle.load(f)\n        else:\n            env = ast.literal_eval(value)\n        return env\n\n\ndef verbose_arg(value):\n    \"\"\"\n    Function to map Verbose\n    \"\"\"\n    return verbose_map[value]\n\n\ndef read_file(fname: str):\n    \"\"\"\n    Function to read code from file\n    \"\"\"\n    with open(fname, \"rb\") as f:\n        content = f.read()\n\n    return content\n\nif colored:\n    def log(string, color):\n        \"\"\"\n        Function to beautify terminal output\n        \"\"\"\n        six.print_(colored(string, color))\nelse:\n    def log(string, color):\n        \"\"\"\n        Function to beautify terminal output\n        \"\"\"\n        six.print_(string)\n\n\nclass IntValidator(Validator):\n    \"\"\"\n    Integer validator\n    \"\"\"\n    def validate(self, value):\n        try:\n            int(value.text)\n            return True\n        except:\n            raise ValidationError(\n                message=\"Integer required\",\n                cursor_position=len(value.text))\n\n\nclass HexValidator(Validator):\n    \"\"\"\n    Hex validator\n    \"\"\"\n    def validate(self, value):\n        if re.match(HEX_REGEX, value.text):\n            return True\n        else:\n            raise ValidationError(\n                message=\"Address required\",\n                cursor_position=len(value.text))\n\n\nclass IntHexValidator(Validator):\n    \"\"\"\n    Integer/Hex validator\n    \"\"\"\n    def validate(self, value):\n        if re.match(HEX_REGEX, str(value.text)):\n            return True\n        else:\n            try:\n                int(value.text)\n                return True\n            except:\n                raise ValidationError(\n                    message=\"Integer or Hex required\",\n                    cursor_position=len(value.text))\n\nclass DirectoryPathValidator(Validator):\n    \"\"\"\n    Required Directory Path validator\n    \"\"\"\n    def validate(self, value):\n        if len(value.text):\n            if os.path.isdir(value.text):\n                return True\n            else:\n                raise ValidationError(\n                    message=\"Directory not found\",\n                    cursor_position=len(value.text))\n        else:\n            return True\n\n\nclass RequiredDirectoryPathValidator(Validator):\n    \"\"\"\n    Directory Path validator\n    \"\"\"\n    def validate(self, value):\n        if len(value.text):\n            if os.path.isdir(value.text):\n                return True\n            else:\n                raise ValidationError(\n                    message=\"Directory not found\",\n                    cursor_position=len(value.text))\n        else:\n            raise ValidationError(\n                message=\"You can't leave this blank\",\n                cursor_position=len(value.text))\n\n\nclass FilePathValidator(Validator):\n    \"\"\"\n    File Path validator\n    \"\"\"\n    def validate(self, value):\n        if len(value.text):\n            if os.path.isfile(value.text):\n                return True\n            else:\n                raise ValidationError(\n                    message=\"File not found\",\n                    cursor_position=len(value.text))\n        else:\n            return True\n\n\nclass ENVFilePathValidator(Validator):\n    \"\"\"\n    File Path validator for env parameter\n    \"\"\"\n    def validate(self, value):\n        if value.text == \"{}\":\n            return True\n        if len(value.text):\n            if os.path.isfile(value.text):\n                return True\n            else:\n                raise ValidationError(\n                    message=\"File not found\",\n                    cursor_position=len(value.text))\n        else:\n            return True\n\n\ndef ask_option():\n    \"\"\"\n    Ask for operation(run/code)\n    \"\"\"\n    answer = questionary.select(\n     \"Select an Option:\",\n     choices=['Run', 'Code']).ask()\n\n    return answer.lower()\n\n\ndef ask_run_options():\n    \"\"\"\n    Ask arguments for run\n    \"\"\"\n    filename = questionary.path(\"filename:\", validate=FilePathValidator).ask()\n    \n    rootfs = questionary.path(\"rootfs:\", only_directories=True,\n        validate=RequiredDirectoryPathValidator).ask()\n    \n    args = questionary.text(\"args:\").ask()\n    args = args.split()\n    \n    run_args = questionary.text(\"run_args:\").ask()\n    run_args = run_args.split()\n\n    return {\"filename\": filename, \"rootfs\": rootfs, \"args\": args,\n            \"run_args\": run_args}\n\n\ndef ask_code_options():\n    \"\"\"\n    Ask arguments for code\n    \"\"\"\n    filename = questionary.path(\"filename:\", validate=FilePathValidator).ask()\n    \n    input_ = questionary.text(\"input:\").ask()\n    if not input_:\n        input_ = None\n    \n    format_ = questionary.select(\n     \"format:\",\n     choices=['bin', 'asm', 'hex']).ask()\n    \n    arch = questionary.select(\n     \"arch:\",\n     choices=arch_map).ask()\n    \n    endian = questionary.select(\n     \"endian:\",\n     choices=['little', 'big']).ask()\n    \n    os = questionary.select(\n     \"os:\",\n     choices=os_map).ask()\n    \n    rootfs = questionary.path(\"rootfs:\", only_directories=True,\n        validate=RequiredDirectoryPathValidator, default=\".\").ask()\n    \n    thumb = questionary.confirm(\"thumb:\",\n        default=False, auto_enter=True).ask()\n    \n    return {\"filename\": filename, \"input\": input_, \"format\": format_,\n            \"arch\": arch, \"endian\": endian, \"os\": os, \"rootfs\": rootfs,\n            \"thumb\": thumb}\n\n\ndef ask_additional_options():\n    \"\"\"\n    Ask additional options for run/code\n    \"\"\"\n    options = {}\n\n    verbose = questionary.select(\n     \"verbose:\",\n     choices=list(verbose_map.keys()),\n     default=\"default\").ask()\n    verbose = verbose_arg(verbose)\n\n    env = questionary.path(\"env:\", default=\"{}\", validate=ENVFilePathValidator).ask()\n    env = env_arg(env)\n\n    debug = questionary.confirm(\"debug:\",\n        default=False, auto_enter=True).ask()\n    gdb = None\n    qdb, rr = False, False\n    if debug:\n        gdb = questionary.text(\"\\tgdb:\").ask()\n\n        qdb = questionary.confirm(\"\\tqdb:\",\n            default=False, auto_enter=True).ask()\n\n        rr = questionary.confirm(\"\\trr:\",\n            default=False, auto_enter=True).ask()\n\n    profile = questionary.text(\"profile:\").ask()\n    if not profile:\n        profile = None\n\n    console = questionary.confirm(\"console:\",\n        default=True, auto_enter=True).ask()\n\n    filter_ = questionary.text(\"filter:\").ask()\n    if not filter_:\n        filter_ = None\n\n    log_file = questionary.path(\"log-file:\", validate=FilePathValidator).ask()\n    if not log_file:\n        log_file = None\n    \n    log_plain = questionary.confirm(\"log-plain:\",\n        default=False, auto_enter=True).ask()\n    \n    root = questionary.confirm(\"root:\",\n        default=False, auto_enter=True).ask()\n    \n    debug_stop = questionary.confirm(\"debug-stop:\",\n        default=False, auto_enter=True).ask()\n    \n    multithread = questionary.confirm(\"multithread:\",\n        default=False, auto_enter=True).ask()\n    \n    timeout = int(questionary.text(\"profile:\", default=\"0\", validate=IntValidator).ask())\n\n    coverage = questionary.confirm(\"coverage:\",\n        default=False, auto_enter=True).ask()\n    coverage_file = None\n    coverage_format = \"drcov\"\n    if coverage:\n        coverage_file = questionary.path(\"\\tcoverage-file:\", validate=FilePathValidator).ask()\n\n        coverage_format = questionary.select(\n        \"\\tcoverage-format:\",\n        choices=list(cov_utils.factory.formats),\n        default=\"drcov\").ask()\n    \n    json_ = questionary.confirm(\"json:\",\n        default=False, auto_enter=True).ask()\n    \n    libcache = questionary.confirm(\"libcache:\",\n        default=False, auto_enter=True).ask()\n\n    options = {\"verbose\": verbose, \"env\": env, \"gdb\": gdb, \"qdb\": qdb, \"rr\": rr, \"profile\": profile, \"console\": console,\n            \"filter\": filter_, \"log_file\": log_file,\n            \"log_plain\": log_plain, \"root\": root, \"debug_stop\": debug_stop,\n            \"multithread\": multithread, \"timeout\": timeout,\n            \"coverage_file\": coverage_file, \"coverage_format\": coverage_format,\n            \"json\": json_, \"libcache\": libcache}\n\n    return options\n    \n\ndef get_data():\n    \"\"\"\n    Main Qltui function\n    \"\"\"\n    print(motd)\n    log(\"Welcome to Qiling\", HEADING_COLOR)\n    log(\"Cross Platform and Multi Architecture Advanced Binary Emulation Framework\", HEADING_COLOR)\n\n    command = ask_option()\n\n    if command == 'run':\n        log(\"Select Run Options\", OUTPUT_COLOR)\n        command_options = ask_run_options()\n\n        log(\"Select Additional Options\", OUTPUT_COLOR)\n        additional_options = ask_additional_options()\n\n    elif command == 'code':\n        log(\"Select Code Options\", OUTPUT_COLOR)\n        command_options = ask_code_options()\n\n        log(\"Select Additional Options\", OUTPUT_COLOR)\n        additional_options = ask_additional_options()\n\n    else:\n        log(\"Error\", ERROR_COLOR)\n\n    command_options.update(additional_options)\n    options = command_options\n    options['subcommand'] = command\n\n    namespace = argparse.Namespace(**options)\n\n    return namespace\n\n\ndef ask_report():\n    \"\"\"\n    Ask for the format of report\n    \"\"\"\n    answer = questionary.select(\n     \"Select an Option:\",\n     choices=['Report', 'Interactive Report', 'Save to Json', 'Quit']).ask()\n\n    return answer.lower()\n\n\ndef show_report(ql: Qiling, report, hook_dictionary):\n    \"\"\"\n    Ask if user wants to see the report\n    \"\"\"\n    log(\"Report\", HEADING_COLOR)\n\n    os_map_reverse = dict(zip(os_map.values(), os_map.keys()))\n    arch_map_reverse = dict(zip(arch_map.values(), arch_map.keys()))\n\n    os_name = os_map_reverse[ql.os.type]\n    arch_name = arch_map_reverse[ql.arch.type]\n\n    if hook_dictionary:\n        for key in ['hook_target_address', 'address']:\n            if key in hook_dictionary:\n                hook_dictionary[key] = hex(hook_dictionary[key])\n        report[\"hook\"] = hook_dictionary\n\n    while True:\n        command = ask_report()\n\n        if command == 'report':\n            pprint(report)\n        elif command == 'interactive report':\n            PyfxApp(data=report).run()\n        elif command == 'save to json':\n            time = datetime.now().strftime(\"%Y_%m_%d_%H-%M-%S\")\n            report_name = f\"report_{ql.targetname.replace('.', '_')}_{os_name}_{arch_name}_{time}.json\"\n            with open(report_name, \"w\") as json_file:\n               json_file.write(json.dumps(report))\n               print(f\"The report was saved in your current directory as {report_name}\")\n        elif command == 'quit':\n            break\n\n\ndef want_to_hook():\n    \"\"\"\n    Ask if user wants to hook\n    \"\"\"\n    answer = questionary.confirm(\"Want to Hook:\",\n        default=False, auto_enter=True).ask()\n\n    return answer\n\n\ndef ask_hook_type():\n    \"\"\"\n    Ask for the type of hook\n    \"\"\"\n    answer = questionary.select(\n     \"Select an Option:\",\n     choices=['hook_address', 'hook_code', 'hook_block', 'hook_intno',\n              'hook_mem_unmapped', 'hook_mem_read_invalid',\n              'hook_mem_write_invalid', 'hook_mem_fetch_invalid', 'hook_mem_invalid',\n              'hook_mem_read', 'hook_mem_write', 'hook_mem_fetch']).ask()\n\n    return answer.lower()\n\n\ndef ask_hook_operation():\n    \"\"\"\n    Ask for the hook operation\n    \"\"\"\n    answer = questionary.select(\n     \"Select an Option:\",\n     choices=['read', 'write', 'emu_start', 'emu_stop', 'save']).ask()\n\n    return answer.lower()\n\n\ndef get_bytes_size():\n    \"\"\"\n    Ask for bytes size\n    \"\"\"\n    answer = questionary.text(\"bytes_size:\", validate=IntValidator).ask()\n\n    if re.match(HEX_REGEX, str(answer)):\n        return int(answer, 16)\n\n    return int(answer)\n\n\ndef ask_value():\n    \"\"\"\n    Ask for value\n    \"\"\"\n    answer = questionary.text(\"value:\").ask()\n\n    return bytes(answer, 'utf-8')\n\n\ndef ask_where():\n    \"\"\"\n    Ask what to Hook\n    \"\"\"\n    answer = questionary.select(\n     \"Select an Option:\",\n     choices=['Memory', 'Register']).ask()\n\n    return answer.lower()[:3]\n\n\ndef ask_start_end():\n    \"\"\"\n    Ask for start and end points for emulator start\n    \"\"\"\n    start = questionary.text(\"address_start:\").ask()\n    end = questionary.text(\"address_end:\", default=\"0x0\").ask()\n\n    return {\"start\": int(start, 16), \"end\": int(end, 16)}\n\n\ndef ask_address():\n    \"\"\"\n    Ask for address to hook\n    \"\"\"\n    address = questionary.text(\"address:\", validate=HexValidator).ask()\n\n    return int(address, 16)\n\n\ndef ask_hook_address():\n    \"\"\"\n    Ask for address to hook\n    \"\"\"\n    address = questionary.text(\"Hook Traget Address:\", validate=HexValidator).ask()\n\n    return int(address, 16)\n\n\ndef ask_register_name():\n    \"\"\"\n    Ask register name\n    \"\"\"\n    answer = questionary.text(\"register_name:\").ask()\n\n    return answer\n\n\ndef hook(ql: Qiling):\n    \"\"\"\n    Hook Function\n    \"\"\"\n\n    log(\"Hook\", HEADING_COLOR)\n\n    hook_dictionary = {}\n\n    do_hook = want_to_hook()\n\n    if do_hook:\n        hook_type = ask_hook_type()\n        hook_dictionary[\"hook_type\"] = hook_type\n\n        operation = ask_hook_operation()\n        hook_dictionary[\"operation\"] = operation\n\n        args = []\n        user_data = {}\n\n        if hook_type == \"hook_address\":\n            hook_target_address = ask_hook_address()\n            args.append(hook_target_address)\n            hook_dictionary[\"hook_target_address\"] = hook_target_address\n\n        if operation in ['read', 'write']:\n            where = ask_where()\n            hook_dictionary[\"storage\"] = where\n            if where == 'mem':\n                address = ask_address()\n                user_data[\"address\"] = address\n                hook_dictionary[\"address\"] = address\n                if operation == 'read':\n                    bytes_size = get_bytes_size()\n                    user_data[\"bytes_size\"] = bytes_size\n                    hook_dictionary[\"bytes_size\"] = bytes_size\n                    operation = 'read_mem'\n                else:\n                    value = ask_value()\n                    user_data[\"value\"] = value\n                    hook_dictionary[\"value\"] = value\n                    operation = 'write_mem'\n            else:\n                register_name = ask_register_name()\n                user_data[\"register_name\"] = register_name\n                hook_dictionary[\"register_name\"] = register_name\n                if operation == 'read':\n                    operation = 'read_reg'\n                else:\n                    value = ask_value()\n                    user_data[\"value\"] = value\n                    hook_dictionary[\"value\"] = value\n                    operation = 'write_reg'\n\n        if operation == 'emu_start':\n            start_end = ask_start_end()\n            user_data[\"start\"] = start_end[\"start\"]\n            user_data[\"end\"] = start_end[\"end\"]\n            hook_dictionary[\"start\"] = start\n            hook_dictionary[\"end\"] = end\n\n        if user_data:\n            hook_dictionary[\"user_data\"] = user_data\n\n        getattr(ql, hook_type)(getattr(Callback_Functions, operation), *args, user_data=user_data)\n\n    return hook_dictionary\n\n\ndef transform_syscalls(syscalls, keys=[\"address\"], func=lambda x: hex(x)):\n    for i in syscalls:\n        try:\n            if isinstance(i, list) or isinstance(i, dict):\n                transform_syscalls(i, keys, func)\n            elif isinstance(syscalls[i], list) or isinstance(syscalls[i], dict):\n                transform_syscalls(syscalls[i], keys, func)\n\n            if i in keys and isinstance(syscalls[i], int):\n                syscalls[i] = func(syscalls[i])\n        except:\n            pass\n\n    return syscalls\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.7890625,
          "content": "#!/usr/bin/env python3\n#\n# Python setup for Qiling framework\n\nfrom setuptools import setup, find_packages\n\n# NOTE: use \"-dev\" for dev branch\nVERSION = \"1.4.7\" + \"-dev\"\n#VERSION = \"1.4.6\"\n\nrequirements = [\n    \"capstone>=4.0.1\",\n    \"unicorn>=2.0.1\",\n    \"pefile>=2022.5.30\",\n    \"python-registry>=1.3.1\",\n    \"keystone-engine>=0.9.2\",\n    \"pyelftools>=0.28\",\n    \"gevent>=20.9.0\",\n    \"multiprocess>=0.70.12.2\",\n    \"windows-curses>=2.1.0;platform_system=='Windows'\",\n    \"pyyaml>=6.0\",\n    \"python-fx\",\n    \"questionary\",\n    \"termcolor\",\n]\n\nextras = {\n    \"evm\": [\n        \"blake2b-py>=0.1.2\",\n        \"cached-property>=1.5.2;python_version<'3.8'\",\n        \"typing-extensions>=3.7.4.3;python_version<'3.8'\",\n        \"eth-keys>=0.2.1\",\n        \"eth-typing>=2.2.0\",\n        \"eth-utils>=1.9.4\",\n        \"eth_abi>=2.1.1\",\n        \"lru-dict>=1.1.6\",\n        \"py-ecc>=1.4.7\",\n        \"rlp>=2\",\n        \"trie==2.0.0-alpha.5\",\n        \"eth-hash[pycryptodome]\",\n        \"numpy\",\n        \"rich\",\n        \"cmd2\"\n    ],\n    \"fuzz\" : [\n        \"unicornafl>=2.0.0;platform_system!='Windows'\",\n        \"fuzzercorn>=0.0.1;platform_system=='Linux'\"\n    ],\n    \"RE\": [\n       \"r2libr>=5.7.4\",\n    ]\n}\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as ld:\n    long_description = ld.read()\n\nsetup(\n    name='qiling',\n    version=VERSION,\n\n    description='Qiling is an advanced binary emulation framework that cross-platform-architecture',\n    url='http://qiling.io',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    maintainer='KaiJern Lau (xwings)',\n    maintainer_email='info@qiling.io',\n\n    license='GPLv2',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        # How mature is this project? Common values are\n        #   3 - Alpha\n        #   5 - Production/Stable\n        #'Development Status :: 5 - Production/Stable',\n        'Development Status :: 3 - Alpha',\n\n        # Indicate who your project is intended for\n        'Intended Audience :: Developers',\n        'Topic :: Software Development :: Build Tools',\n\n        # Pick your license as you wish (should match \"license\" above)\n        'License :: OSI Approved :: GNU General Public License v2 (GPLv2)',\n\n        # Specify the Python versions you support here. In particular, ensure\n        # that you indicate whether you support Python 2, Python 3 or both.\n        'Programming Language :: Python :: 3',\n    ],\n\n    keywords='qiling binary emulator framework malware analysis UEFI IoT',\n\n    packages=find_packages(),\n    scripts=['qltool', 'qltui.py'],\n    package_data={\n        'qiling': ['profiles/*.ql'],\n        'qiling.debugger.gdb': ['xml/*/*'],\n        'qiling.os.uefi': ['guids.csv'],\n        'qiling.arch.evm.analysis': ['signatures.json']\n    },\n    install_requires=requirements,\n    extras_require=extras,\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}