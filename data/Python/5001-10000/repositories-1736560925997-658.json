{
  "metadata": {
    "timestamp": 1736560925997,
    "page": 658,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "espressif/esptool",
      "stars": 5690,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.4658203125,
          "content": "# Refactoring\n4875e8906fdedeb7ecb2f94aa40877c418df3b70\n63debb0facdc50b52c7759a01d773f6ebb25bc81\naee798dbe46640f708fe2297b94ff30c11152fca\ne5f5d9de3b3ecdc096ca14150c4bedd9817b709a\ne17d996bb0faf58d3fe4c77e415246ffb3687976\n513898db2ac7a1990dc94aa6f49cda3165c442bf\n07678b581003da453ec8bafed5993fb32862bbbb\nb57f69bd13222b1753446a0f7c17386eda1dc2c9\n\n# Formating with Black\n45f1da954eeab4897fb852894fae0c1b901b3926\n\n# Refactoring documentation\n6282f98dbfca58add4992c259c0aac3c3ec64d3f\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.109375,
          "content": ".pypirc\n*.pyc\n*~\nGPATH\nGRTAGS\nGTAGS\nesptool.egg-info\n.eggs\nbuild\ndist\nlocal.mk\n\n.envrc\nreport.xml\n\ndocs/_build/\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 17.8828125,
          "content": "# Gitlab CI config\n#\n# Note: When updating, please also update test_esptool.yml GH Actions workflow file\nstages:\n  - pre-check\n  - test\n  - report\n  - build_docs\n  - deploy_docs\n  - deploy_development_package\n\nworkflow:\n  rules:\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == \"push\"'\n      when: never\n    - if: '$CI_COMMIT_BRANCH'\n\ninclude:\n    - project: espressif/shared-ci-dangerjs\n      ref: master\n      file: danger.yaml\nrun-danger-mr-linter:\n    stage: pre-check\n    tags:\n      - dangerjs\n    variables:\n      ENABLE_CHECK_UPDATED_CHANGELOG: 'false'\n\n# cache the pip download directory in all jobs\nvariables:\n  PIP_CACHE_DIR: \"$CI_PROJECT_DIR/.cache/pip\"\n  PIP_EXTRA_INDEX_URL: \"https://dl.espressif.com/pypi\"\n\ncache:\n  paths:\n    - \"$CI_PROJECT_DIR/.cache/pip\"\n\n.test_template: &test_template\n  stage: test\n  image: python:3.7-bullseye\n  tags:\n    - host_test\n  dependencies: []\n  before_script:\n    - pip install --upgrade pip\n    - pip install -e .[dev] --prefer-binary\n\nversion_check:\n  <<: *test_template\n  rules:\n    - if: '$CI_COMMIT_TAG != null'\n  script:\n    - VERSION=$(esptool.py version | head -n 1)\n    - |\n      if [[ \"$VERSION\" != *\"$CI_COMMIT_TAG\" ]]\n      then\n        echo \"Version number and git tag do not match!\"\n        exit 1\n      fi\n\n.host_tests_template: &host_tests_template\n  <<: *test_template\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  artifacts:\n    when: always\n    paths:\n      - \"**/.coverage*\"\n      - \".coverage*\"\n    expire_in: 1 week\n    reports:\n      junit: test/report.xml\n\ncheck_uf2_ids:\n  <<: *host_tests_template\n  allow_failure: true\n  variables:\n    COVERAGE_PROCESS_START: \"${CI_PROJECT_DIR}/test/.covconf\"\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n  script:\n    - coverage run -m pytest ${CI_PROJECT_DIR}/test/test_uf2_ids.py\n\nhost_tests:\n  <<: *host_tests_template\n  variables:\n    PYTHONPATH: \"$PYTHONPATH:${CI_PROJECT_DIR}/test\"\n    COVERAGE_PROCESS_START: \"${CI_PROJECT_DIR}/test/.covconf\"\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_imagegen.py\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_espsecure.py\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_merge_bin.py\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_image_info.py\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_modules.py\n    # some .coverage files in sub-directories are not collected on some runners, move them firs\n    - find . -mindepth 2 -type f -name \".coverage*\" -print -exec mv --backup=numbered {} . \\;\n\nhost_tests_espefuse:\n  <<: *host_tests_template\n  variables:\n    PYTHONPATH: \"$PYTHONPATH:${CI_PROJECT_DIR}/test\"\n    COVERAGE_PROCESS_START: \"${CI_PROJECT_DIR}/test/.covconf\"\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n  parallel:\n    matrix:\n      - TARGET:\n        - esp32\n        - esp32c2\n        - esp32c3\n        - esp32c5\n        - esp32c5beta3\n        - esp32c6\n        - esp32c61\n        - esp32h2\n        - esp32h2beta1\n        - esp32p4\n        - esp32s2\n        - esp32s3\n        - esp32s3beta2\n        - esp32h21\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_espefuse.py --chip ${TARGET}\n    # some .coverage files in sub-directories are not collected on some runners, move them first\n    - find . -mindepth 2 -type f -name \".coverage*\" -print -exec mv --backup=numbered {} . \\;\n\nhost_tests_latest_python:\n  <<: *host_tests_template\n  image: python:3.13-bullseye\n  variables:\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n  script:\n    -  pytest ${CI_PROJECT_DIR}/test/test_imagegen.py\n    -  pytest ${CI_PROJECT_DIR}/test/test_espsecure.py\n    -  pytest ${CI_PROJECT_DIR}/test/test_merge_bin.py\n    -  pytest ${CI_PROJECT_DIR}/test/test_image_info.py\n    -  pytest ${CI_PROJECT_DIR}/test/test_modules.py\n    -  pytest ${CI_PROJECT_DIR}/test/test_espefuse.py --chip esp32\n\n# A new job \"host_test_hsm\" is created for the test \"test_espsecure_hsm.py\" which runs an ubuntu image,\n# because python-pkcs11 (v0.7.0) package is compiled using GLIBC_2.34 but docker image python:3.7-bullseye\n# support versions only upto GLIBC_2.31.\nhost_tests_hsm:\n  <<: *host_tests_template\n  image: ubuntu:latest\n  variables:\n    COVERAGE_PROCESS_START: \"${CI_PROJECT_DIR}/test/.covconf\"\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n  before_script:\n    - apt-get update\n    - apt-get install -y python3 python3-pip python3-venv softhsm2\n    - ./ci/setup_softhsm2.sh || exit 1\n    - python3 -m venv esptoolenv\n    - source esptoolenv/bin/activate\n    - pip3 install -e .[dev,hsm] --prefer-binary\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_espsecure_hsm.py\n\nrun_pre_commit_hooks:\n  stage: test\n  image: python:3.7-bullseye\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  tags:\n    - host_test\n  script:\n    - pip install -e .[dev] --prefer-binary\n    - pre-commit run --all-files\n\n.run_esptool: &run_esptool |\n  esptool.py --help\n  espefuse.py --help\n  espsecure.py --help\n  python esptool.py --help\n  python espefuse.py --help\n  python espsecure.py --help\n  python -m esptool --help\n  python -m espefuse --help\n  python -m espsecure --help\n\n# Check all the scripts can run when installed, collect coverage\ncheck_install_coverage:\n  <<: *test_template\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  artifacts:\n    when: always\n    paths:\n      - \"**/.coverage*\"\n      - \".coverage*\"\n    expire_in: 1 week\n  script:\n    - coverage run --parallel-mode setup.py install\n    - coverage run --parallel-mode esptool.py --help\n    - coverage run --parallel-mode espefuse.py --help\n    - coverage run --parallel-mode espsecure.py --help\n    - *run_esptool\n\n# Check all the scripts can run when installed\ncheck_install:\n  <<: *test_template\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  before_script:\n    - pip install .\n  script:\n    - *run_esptool\n\n# Check all the scripts can run when installed in editable mode\ncheck_install_editable:\n  <<: *test_template\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  before_script:\n    - pip install -e .\n  script:\n    - *run_esptool\n\n# Check all the scripts can run when installed in Python user install directory\ncheck_install_system:\n  <<: *test_template\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  before_script:\n    - pip install --user .\n  script:\n    - python esptool.py --help\n    - python espefuse.py --help\n    - python espsecure.py --help\n    - python -m esptool --help\n    - python -m espefuse --help\n    - python -m espsecure --help\n\n# Check all the scripts can run when installed in virtual environment\ncheck_install_venv:\n  <<: *test_template\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  before_script:\n    - python -m venv test_env\n    - source test_env/bin/activate\n    - python -m pip install .\n  script:\n    - *run_esptool\n\ncheck_stub_build:\n  <<: *test_template\n  script:\n    - ./ci/download_flasher_stubs.py\n    - git diff --exit-code\n\n.target_esptool_test:\n  stage: test\n  image: python:3.7-bullseye\n  variables:\n    PYTHONPATH: \"$PYTHONPATH:${CI_PROJECT_DIR}/test\"\n    COVERAGE_PROCESS_START: \"${CI_PROJECT_DIR}/test/.covconf\"\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n  before_script:\n    - pip install -e .[dev] --prefer-binary\n    # libffi (needed for espsecure) version keeps changing in python docker images. Add a symlink to the installed version on Raspberry Pi\n    - if [ $(uname -m) = \"armv7l\" ]; then ln -sfn /usr/lib/arm-linux-gnueabihf/libffi.so.7.1.0 /usr/lib/arm-linux-gnueabihf/libffi.so.6; fi\n  artifacts:\n    reports:\n      junit: test/report.xml\n    when: always\n    paths:\n      - test/*.out\n      - \"**/.coverage*\"\n      - \".coverage*\"\n    expire_in: 1 week\n\n# ESP8266\ntarget_esp8266:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp8266_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP8266 --chip esp8266 --baud 115200\n\n# ESP32\ntarget_esp32:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32 --chip esp32 --baud 115200\n\n# ESP32S2\ntarget_esp32s2:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s2_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S2 --chip esp32s2 --baud 115200\n\ntarget_esp32s2_usbcdc:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s2_cdc_target\n  variables:\n    ESPTOOL_TEST_USB_OTG: \"1\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S2_USBCDC --chip esp32s2 --baud 115200\n\n# ESP32C3\ntarget_esp32c3:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c3_target\n  variables:\n    ESPTOOL_TEST_SPI_CONN: \"6,2,7,4,10\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C3 --chip esp32c3 --baud 115200\n\ntarget_esp32c3_jtag_serial:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c3_jtag_serial_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C3_JTAG_SERIAL --preload-port /dev/serial_ports/ESP32C3_PRELOAD --chip esp32c3 --baud 115200\n\n# ESP32S3\ntarget_esp32s3:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s3_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S3 --chip esp32s3 --baud 115200\n\ntarget_esp32s3_32MB_octal:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s3_32MB_octal_target\n  variables:\n    ESPTOOL_TEST_FLASH_SIZE: \"32\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S3_32MB --chip esp32s3 --baud 115200\n\ntarget_esp32s3_32MB_quad:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s3_32MB_quad_target\n  variables:\n    ESPTOOL_TEST_FLASH_SIZE: \"32\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S3_32MB --chip esp32s3 --baud 115200\n\ntarget_esp32s3_usbcdc:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s3_cdc_target\n  variables:\n    ESPTOOL_TEST_USB_OTG: \"1\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S3_USBCDC --chip esp32s3 --baud 115200\n\ntarget_esp32s3_jtag_serial:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s3_jtag_serial_target\n  variables:\n    ESPTOOL_TEST_SPI_CONN: \"12,13,11,9,10\"\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32S3_JTAG_SERIAL --preload-port /dev/serial_ports/ESP32S3_PRELOAD --chip esp32s3 --baud 115200\n\ntarget_esp32s3_sdm:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32s3_sdm_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool_sdm.py --port /dev/serial_ports/ESP32S3_SDM --chip esp32s3 --baud 115200\n\n# ESP32C2\ntarget_esp32c2_40mhz:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c2_40mhz_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C2_40MHZ --chip esp32c2 --baud 115200\n\ntarget_esp32c2_26mhz:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c2_26mhz_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C2_26MHZ --chip esp32c2 --baud 115200\n\n# ESP32C6\ntarget_esp32c6:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c6_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C6 --chip esp32c6 --baud 115200\n\ntarget_esp32c6_jtag_serial:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c6_jtag_serial_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C6_JTAG_SERIAL --preload-port /dev/serial_ports/ESP32C6_PRELOAD --chip esp32c6 --baud 115200\n\n# ESP32H2\ntarget_esp32h2:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32h2_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32H2 --chip esp32h2 --baud 115200\n\ntarget_esp32h2_jtag_serial:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32h2_jtag_serial_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32H2_JTAG_SERIAL --preload-port /dev/serial_ports/ESP32H2_PRELOAD --chip esp32h2 --baud 115200\n\n# ESP32P4\ntarget_esp32p4:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32p4_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32P4 --chip esp32p4 --baud 115200\n\n# ESP32C5\ntarget_esp32c5:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c5_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C5 --chip esp32c5 --baud 115200\n\n# ESP32C61\ntarget_esp32c61:\n  extends: .target_esptool_test\n  tags:\n    - esptool_esp32c61_target\n  script:\n    - coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port /dev/serial_ports/ESP32C61 --chip esp32c61 --baud 115200\n\n.windows_test:\n  stage: test\n  variables:\n    PYTEST_ADDOPTS: \"-sv --junitxml=test/report.xml --color=yes\"\n    PYTHONPATH: \"$PYTHONPATH:${CI_PROJECT_DIR}/test\"\n    COVERAGE_PROCESS_START: \"${CI_PROJECT_DIR}/test/.covconf\"\n  rules:\n    - if: $CI_PIPELINE_SOURCE != \"schedule\"\n  before_script:\n    - pip install -e .[dev] --prefer-binary\n  artifacts:\n    reports:\n      junit: test/report.xml\n    when: always\n    paths:\n      - test/*.out\n      - \"**/.coverage*\"\n      - \".coverage*\"\n    expire_in: 1 week\n  tags:\n    - windows-target\n\nhost_tests_windows:\n  extends: .windows_test\n  script:\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_espefuse.py\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_espsecure.py\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_imagegen.py\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_image_info.py\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_modules.py\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_merge_bin.py\n\ntarget_tests_windows:\n  extends: .windows_test\n  script:\n    - python -m coverage run --parallel-mode -m pytest ${CI_PROJECT_DIR}/test/test_esptool.py --port COM4 --chip esp32 --baud 115200 -m quick_test\n\ncombine_reports:\n  stage: report\n  image: python:3.7-bullseye\n  tags:\n    - host_test\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: cobertura_report.xml\n    when: always\n    paths:\n      - \".coverage*\"\n      - cobertura_report.xml\n      - ./html_report/\n    expire_in: 1 week\n  coverage: '/(?i)total.*? (100(?:\\.0+)?\\%|[1-9]?\\d(?:\\.\\d+)?\\%)$/'\n  variables:\n    LC_ALL: C.UTF-8\n    COVERAGE_RCFILE: \"${CI_PROJECT_DIR}/test/.covconf\"\n  before_script:\n    - pip install -e .[dev] --prefer-binary\n  script:\n    # all .coverage files in sub-directories are moved to the parent dir first\n    - find . -mindepth 2 -type f -name \".coverage*\" -print -exec mv --backup=numbered {} . \\;\n    - coverage combine\n    - coverage report --precision=2\n    - coverage html -d html_report --precision=2\n    - coverage xml -o cobertura_report.xml\n\nbuild_docs:\n  stage: build_docs\n  image: python:3.7-bullseye\n  tags:\n    - build_docs\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      when: never\n    - changes:\n      - \"docs/**/*\"\n      - \"CONTRIBUTING.rst\"\n  needs: []\n  artifacts:\n    when: always\n    paths:\n      - docs/_build/*/*/*.txt\n      - docs/_build/*/*/html/*\n    expire_in: 4 days\n  script:\n    - cd docs\n    - pip install -r requirements.txt --prefer-binary\n    - build-docs -l en -t {esp8266,esp32,esp32s2,esp32c3,esp32s3,esp32c2,esp32c6,esp32h2,esp32p4,esp32c5,esp32c61}\n\n.deploy_docs_template:\n  stage: deploy_docs\n  image: python:3.7-bullseye\n  tags:\n    - deploy\n  needs:\n    - build_docs\n  script:\n    - source ${CI_PROJECT_DIR}/docs/utils.sh\n    - add_doc_server_ssh_keys $DOCS_DEPLOY_PRIVATEKEY $DOCS_DEPLOY_SERVER $DOCS_DEPLOY_SERVER_USER\n    - export GIT_VER=$(git describe --always)\n    - pip install -r ${CI_PROJECT_DIR}/docs/requirements.txt --prefer-binary\n    - deploy-docs\n\ndeploy_docs_preview:\n  extends:\n    - .deploy_docs_template\n  rules:\n    - if: $CI_COMMIT_REF_NAME == \"master\" || $CI_PIPELINE_SOURCE == \"schedule\"\n      when: never\n    - changes:\n      - \"docs/**/*\"\n      - \"CONTRIBUTING.rst\"\n  variables:\n    TYPE: \"preview\"\n    DOCS_BUILD_DIR: \"${CI_PROJECT_DIR}/docs/_build/\"\n    DOCS_DEPLOY_PRIVATEKEY: \"$DOCS_PREVIEW_DEPLOY_KEY\"\n    DOCS_DEPLOY_SERVER: \"$DOCS_PREVIEW_SERVER\"\n    DOCS_DEPLOY_SERVER_USER: \"$DOCS_PREVIEW_SERVER_USER\"\n    DOCS_DEPLOY_PATH: \"$DOCS_PREVIEW_PATH\"\n    DOCS_DEPLOY_URL_BASE: \"$DOCS_PREVIEW_URL_BASE\"\n\ndeploy_docs_production:\n  extends:\n    - .deploy_docs_template\n  rules:\n    - if: $CI_COMMIT_REF_NAME == \"master\" && $CI_PIPELINE_SOURCE != \"schedule\"\n      changes:\n      - \"docs/**/*\"\n      - \"CONTRIBUTING.rst\"\n  variables:\n    TYPE: \"production\"\n    DOCS_BUILD_DIR: \"${CI_PROJECT_DIR}/docs/_build/\"\n    DOCS_DEPLOY_PRIVATEKEY: \"$DOCS_PROD_DEPLOY_KEY\"\n    DOCS_DEPLOY_SERVER: \"$DOCS_PROD_SERVER\"\n    DOCS_DEPLOY_SERVER_USER: \"$DOCS_PROD_SERVER_USER\"\n    DOCS_DEPLOY_PATH: \"$DOCS_PROD_PATH\"\n    DOCS_DEPLOY_URL_BASE: \"https://docs.espressif.com/projects/esptool\"\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.2041015625,
          "content": "repos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.1.14\n    hooks:\n      - id: ruff # Runs ruff linter (replaces flake8)\n        args: [--fix, --exit-non-zero-on-fix] # --fix for fixing errors\n      - id: ruff-format\n  - repo: https://github.com/sphinx-contrib/sphinx-lint\n    rev: v0.6.8\n    hooks:\n      - id: sphinx-lint\n        name: Lint RST files in docs folder using Sphinx Lint\n        files: ^((docs/en)/.*\\.(rst|inc))|CONTRIBUTING.rst$\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.4.1  # the last version running on py3.7\n    hooks:\n      - id: mypy\n        additional_dependencies: ['types-PyYAML<=6.0.12.12']\n        # ignore wrapper scripts because of name colision with efuse/__init__.py etc.\n        exclude: test/|docs/|espefuse.py|espsecure.py|esptool.py|esp_rfc2217_server.py\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.2.5\n    hooks:\n    - id: codespell\n      additional_dependencies:\n        - tomli\n  - repo: https://github.com/espressif/conventional-precommit-linter\n    rev: v1.9.0\n    hooks:\n      - id: conventional-precommit-linter\n        stages: [commit-msg]\ndefault_stages: [commit]\ndefault_install_hook_types: [pre-commit, commit-msg]\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.421875,
          "content": "## v4.8.1 (2024-09-25)\n\n### Bug Fixes\n\n- **esp32c2**: Add esp32c2 eco4 rom magic value\n- **packaging**: Correctly exclude the unwanted sub/modules\n\n## v4.8.0 (2024-09-18)\n\n### New Features\n\n- **espefuse**: Supports wafer efuse versions for esp32c61\n- **esptool**: add new command SFDP read\n- **esptool**: Add option to retry connection in a loop\n- **efuse**: Updates efuse table for esp32c5\n- **efuse**: Updates efuse table for esp32p4\n- **esp32c61**: Added stub flasher support\n- **cli**: add autocompletions\n- **esptool**: allow picking UART by VID/PID/Name\n- **esp32c5**: Add USB-serial/JTAG stub support\n- **esp32c5**: Add UART stub support\n- **esptool**: Print key_purpose name for get_security_info cmd\n- **espefuse**: Adds support extend efuse table by user CSV file\n- **espefuse**: Adds efuse dump formats: separated(default) and united(new)\n- **espefuse**: Adds incompatible eFuse settings check for S3\n- **reset**: Apply reconnections to the whole reset sequence, not line transitions\n- **reset**: Automatically reconnect if port disconnects during reset\n- **esp32-p4**: Add ECO1 magic number\n- **espsecure**: Add support for secure boot v2 using ECDSA-P384 signatures\n- **write_flash**: retry flashing if chip disconnects\n- **espefuse**: Allow filtering efuses based on command line arguments\n- **esploader**: Enable context manager for esp instances\n- **espefuse**: Added check for correctness of written data\n- **espefuse**: Improves help for burn_efuse cmd\n- **esp32s3**: clear boot control register on hard reset\n- **esp32-p4**: add spi-connection restriction to ROM class\n- add UF2 IDs for ESP32-C5 and ESP32-C61\n- **espefuse**: Updates efuses for C5 and C61\n- **esp32c61**: add c61 basic flash support (no_stub)\n- **esp32c5**: skipped the stub check for esp32c5 mp\n- **esp32c5**: base support of esp32c5 mp (no stub)\n- Added warning when secure boot enabled\n- **cmds/write_flash**: Recalculated SHA digest for image binary\n- print flash voltage in flash_id command\n- **esptool**: Adds wafer and pkg versions\n- **espefuse**: Update adc_info commands for all chips\n- **espefuse**: Adds new efuses for esp32p4\n- **espefuse**: Allow the espefuse.py to work when coding scheme == 3\n- **err_defs**: Add ROM bootloader flash error definitions\n- Use ruff instead of flake8 and black both in pre-commit and CI\n- **esp32p4**: Enable USB-serial/JTAG in flasher stub\n- **espefuse**: Postpone some efuses to burn them at the very end\n- add advisory port locking\n- **espefuse**: check_error --recover chip even if there are num_errors\n- **espefuse**: Adds new efuses for esp32c6 and esp32h2\n- **esp32c5**: add target esp32c5 beta3\n\n### Bug Fixes\n\n- **esptool**: Fix esp32c61 flash frequency config\n- **esptool**: Fix incorrect chip version for esp32c5\n- **write_flash**: Verify if files will fit against the real flash size when possible\n- **remote_ports**: Disable reset sequence when a socket is used\n- **bitstring**: Restricted bitstring dependency to fix 32-bit compatibility\n- **esp32_d0wdr2_v3**: Print correct chip name\n- pass error message to exception in OTG mode\n- **bin_image**: add check for ELF file segment when saving RAM segments\n- **docs**: Add a note about entering manual bootloader mode\n- **esp32c5**: Fix MAC reading for esptool\n- Erase non-aligned bytes with --no-stub\n- **esp32-c5**: Use a longer reset delay with usb-serial/jtag to stabilize boot-up\n- **espefuse**: Use stub class if stub flasher is running\n- Do not append SHA256 when `--ram-only-header`\n- **elf2image**: add ELF flags to merge condition\n- ram_only_header: pad flash segment to next boundary\n- sort segments if ram_only_header is used\n- **espefuse**: Fix efuse base addr for esp32c5 MP\n- fix type annotation to comply with mypy\n- **espefuse**: Fix burn_key for ECDSA_KEY, it can read pem file\n- **secure_download_mode**: Disable secure boot detection and print more info\n- **esptool**: clear boot control register on ESP32-S3\n- **intelhex**: catch unicode decode errors when converting hex to binary\n- ROM doesn't attach in-package flash chips\n- close file gracefully in espsecure\n- Fixed glitches on RTS line when no_reset option on Windows\n- **merge_bin**: treat files starting with colon as raw files\n- Index image segments from 0 instead of 1\n- **read_flash**: add flash size arg to enable reading past 2MB without stub\n- **read_flash**: flush transmit buffer less often to inrease throughput\n- **esptool**: Proper alignment for SoCs with offset load\n- ignore resetting on unsupported ports\n- **esptool**: Remove the shebang from uf2_writer.py\n\n### Code Refactoring\n\n- Migrated esp_rfc2217_server into standalone subpackage\n- **test/esptool**: Updated tests according to SHA recomputation for binary\n- **style**: Comply with black>=24.0.0\n\n## v4.7.0 (2023-12-13)\n\n### New Features\n\n- **test_esptool**: Added test for embedded and detected flash size match\n- **spi_connection**: Support --spi-connection on all chips\n- **espefuse**: Support XTS_AES_256_KEY key_purpose for ESP32P4\n- **xip_psram**: support xip psram feature on esp32p4\n- add support for intel hex format\n- **esp32p4**: Stub flasher support\n- **elf2image**: add ram-only-header argument\n- **rfc2217_server**: Add hard reset sequence\n- **espefuse**: Adds efuse ADC calibration data for ESP32H2\n- **espefuse**: Update the way to complete the operation\n- add support for get_security_info on esp32c3 ECO7\n- **loader**: Added hints for some serial port issues when rising port error\n- Add support for Python 3.12\n- **esp32c3**: Support ECO6 and ECO7 magic numbers\n- **merge_bin**: add support for uf2 format\n- **esp32-s3**: Support >16MB quad flash chips\n- **efuse**: Update key purpose table and tests\n- **efuse**: ESP32P4 adds ecdsa_key support\n- **espefuse**: Add support for esp32p4 chip\n- **esptool**: added target to esp32p4\n- **espsecure**: Allow prompting for HSM PIN in read_hsm_config\n- **esptool**: Add new packages for ESP32C3 and flash efuses\n- **esptool**: Add tests for get_chip_features\n- **esptool**: Add PICO package for ESP32S3 and flash/psram efuses\n- **get_security_info**: Improved the output format and added more details\n\n### Bug Fixes\n\n- **esp32c2**: Added get_flash_cap and get_flash_vendor\n- **testloadram**: Windows assertion error\n- fixed exit() to be used from right module\n- **esp32c2**: Recommend using higher baud rate if connection fails\n- **test_esptool**: Fixed connection issue on Windows\n- **esptool**: Rephrase the --ram-only-header command message\n- **load_ram**: check for overlaps in bss section\n- **tests/intelhex**: make sure file is closed on Windows\n- **spi_connection**: Unattach previously attached SPI flash\n- **espefuse**: Fix ECDSA_FORCE_USE_HARDWARE_K for ECDSA key (esp32h2)\n- **loader**: Could not open serial port message adjusted\n- **flasher_stub**: fix usb-serial-jtag enabled non-related intr source\n- **bin_image**: Check only ELF sections when searching for .flash.appdesc\n- **danger-github**: Fir Danger GitHub token permission\n- Fix redirection of STDOUT\n- **autodetection**: Remove the ESP32-S2 ROM class from get_security_info autodetection\n- assert in esp32 exclusive workaround\n- **elf2image**: fix text/rodata mapping overlap issue on uni-idrom bus chips\n- **dangerGH**: Update token permissions - allow Danger to add comments to PR\n- **expand file args**: Correctly print the expanded command\n- **esp32-c2**: Enable flashing in secure download mode\n\n### Code Refactoring\n\n- **stub_flasher**: Cleanup, make adding new targets easier\n\n## v4.6.2 (2023-06-12)\n\n### Bug Fixes\n\n- **CH9102F**: Suggest to install new serial drivers if writing to RAM fails\n- **compressed upload**: Accept short data blocks with only Adler-32 bytes\n\n## v4.6.1 (2023-06-01)\n\n### Bug Fixes\n\n- **ESP32-S3**: Correct RTC WDT registers to fix resets during flashing\n\n## v4.6 (2023-05-29)\n\n### New Features\n\n- **esptool**: add option to dump whole flash based on detected size\n\n### Bug Fixes\n\n- inconsistent usage of dirs separator\n- USB-JTAG-Serial PID detection error\n- Set flash parameters even with --flash_size keep\n- **ESP32-C6**: Fix get_pkg_version and get_{major,minor}_chip_version\n\n## v4.5.1 (2023-02-28)\n\n### Bug Fixes\n\n- **ESP32-S3**: Temporarily disable increasing CPU freq\n- Unknown chip (ID or magic number) error\n- **ESP32-S3**: Lower CPU freq to improve flasher stub stability\n- **rfc2217_server**: Use new reset sequences\n\n## v4.5 (2023-02-10)\n\n### New Features\n\n- **stub**: Add ESP32-S3 octal flash support\n- **esp32h2**: Enable USB-JTAG/Serial mode in the stub flasher\n- **bootloader reset**: Allow custom reset strategy setting with a config file\n- Allow configuration with a config file\n- **bootloader reset**: Tighter transitions on Unix systems\n- **ci**: Publish development releases with custom pipeline\n- **esp32c6 stub**: Increase CPU frequency and write/read speeds over USB-JTAG/Serial\n- **esp32c6 stub**: Enable USB-JTAG/Serial\n- **flash_id**: Print the flash type if available for the chip\n\n### Bug Fixes\n\n- **cmds**: Make clear that flash type is from eFuse and not detection\n- **load config file**: Sort unknown config options\n- **esp32c6**: Workaround for bad MSPI frequency in HS mode\n- **flasher_stub**: Correct boundaries for SPIWrite4B and SPIRead4B\n- **secure download mode**: Reconnect if ROM refuses to respond\n- **secure download mode**: Fix SDM detection on S2/S3\n- **ci**: Merge two \"ci\" directories and build_tools into one\n- **ci**: The development release job should not run by default\n- **setup**: Use latest reedsolo package which can be installed with Python3.10 and Cython\n- **write_flash**: Fix `--erase-all` option\n- **espefuse**: Close serial port even when espefuse fails\n- **espefuse**: Fix compatibility with Bitstring>=4\n\n### Code Refactoring\n\n- Comply with black 23.1 style\n- Optimize unnecessary chip interrogations\n- **connection attempt**: Decouple reset sequence settings\n\n## v4.4 (2022-11-21)\n\n### New Features\n\n- **flasher_stub**: Increase CPU frequency and write/read speeds over native USB (USB-OTG)\n- **flasher_stub**: Increase CPU frequency and write/read speeds over USB-JTAG/Serial\n- Readable error message for serial-related issues\n- Detect Guru Meditation errors\n\n### Bug Fixes\n\n- Add workaround for breaking changes of bitstring==4\n- close unused ports while get_default_connected_device\n\n## v4.3 (2022-09-14)\n\n### New Features\n\n- **image_info**: Print application information if possible\n- Add Macronix flash memory density definitions\n- **write_flash**: Prevent flashing incompatible images\n- Recover from serial errors when flashing\n- Add stub flasher error messages definitions\n- **image_info**: Image type autodetection\n\n### Code Refactoring\n\n- **elf2image**: Simplify bootloader image selection\n"
        },
        {
          "name": "CONTRIBUTING.rst",
          "type": "blob",
          "size": 9.16796875,
          "content": "Contributions Guide\n===================\n\nWe welcome contributions to the ``esptool.py`` project!\n\nHow to Contribute\n-----------------\n\nContributions to ``esptool.py`` - fixing bugs, adding features, adding documentation - are welcome. We accept contributions via `Github Pull Requests <https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests>`_.\n\n.. _development-setup:\n\nDevelopment Setup\n-----------------\n\nDevelopment mode allows you to run the latest development version from the `esptool.py repository on GitHub <https://github.com/espressif/esptool>`_.\n\n.. code-block:: sh\n\n   $ git clone https://github.com/espressif/esptool.git\n   $ cd esptool\n   $ pip install --user -e .\n\nThis will install ``esptool.py``’s dependencies and create some executable script wrappers in the user’s ``bin`` directory. The wrappers will run the scripts found in the git working directory directly, so any time the working directory contents change it will pick up the new versions.\n\nIt’s also possible to run the scripts directly from the working directory with this Development Mode installation.\n\nTo also install additional tools needed for actually developing and testing ``esptool.py``, run this command to install a development copy of ``esptool.py`` *plus* packages useful for development:\n\n::\n\n   $ pip install --user -e \".[dev]\"\n\n(This command uses the “extras” feature of setuptools.)\n\nReporting Issues\n----------------\n\nPlease report bugs in ``esptool.py`` if you find them. However, before reporting a bug please check through the following:\n\n*  `Troubleshooting Guide <https://docs.espressif.com/projects/esptool/en/latest/troubleshooting.html>`_ - common problems and known issues.\n\n*  `Existing Open Issues <https://github.com/espressif/esptool/issues>`_ - someone might have already encountered this.\n\nIf you don’t find anything, please `open a new issue <https://github.com/espressif/esptool/issues/new/choose>`_.\n\nSending Feature Requests\n------------------------\n\nFeel free to post feature requests. It’s helpful if you can explain exactly why the feature would be useful.\n\nThere are usually some outstanding feature requests in the `existing issues list <https://github.com/espressif/esptool/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement>`_, feel free to add comments to them.\n\nBefore Contributing\n-------------------\n\nBefore sending us a Pull Request, please consider this list of points:\n\n* Have you tried running ``esptool.py`` test suite locally?\n\n* Is the code adequately commented for people to understand how it is structured?\n\n* Is there documentation or examples that go with code contributions?\n\n* Are comments and documentation written in clear English, with no spelling or grammar errors?\n\n* If the contribution contains multiple commits, are they grouped together into logical changes (one major change per pull request)? Are any commits with names like \"fixed typo\" `squashed into previous commits <https://eli.thegreenplace.net/2014/02/19/squashing-github-pull-requests-into-a-single-commit/>`_?\n\n* If you're unsure about any of these points, please open the Pull Request anyhow and then ask us for feedback.\n\nCode Style & Static Analysis\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease follow these coding standards when writing code for ``esptool.py``:\n\nPre-commit checks\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n`pre-commit <https://pre-commit.com/>`_ is a framework for managing pre-commit hooks. These hooks help to identify simple issues before committing code for review.\n\nTo use the tool, first install ``pre-commit``. Then enable the ``pre-commit`` and ``commit-msg`` git hooks:\n\n::\n\n   $ python -m pip install pre-commit\n   $ pre-commit install -t pre-commit -t commit-msg\n\nOn the first commit ``pre-commit`` will install the hooks, subsequent checks will be significantly faster. If an error is found an appropriate error message will be displayed. Review the changes and re-stage for commit if you are happy with them.\n\nConventional Commits\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n``esptool.py`` complies with the `Conventional Commits standard <https://www.conventionalcommits.org/en/v1.0.0/#specification>`_. Every commit message is checked with `Conventional Precommit Linter <https://github.com/espressif/conventional-precommit-linter>`_, ensuring it adheres to the standard.\n\n\nRuff\n\"\"\"\"\n\n``esptool.py`` is `PEP8 <https://peps.python.org/pep-0008/>`_ compliant and enforces this style guide. For compliance checking, we use `ruff <https://docs.astral.sh/ruff/>`_.\n``Ruff`` also auto-format files in the same style as previously used ``black``.\n\n\n``Ruff`` and ``Conventional Precommit Linter`` tools will be automatically run by ``pre-commit`` if that is configured. To check your code manually before submitting, run ``python -m ruff`` (this tool is installed as part of the development requirements shown at the beginning of this document).\n\nWhen you submit a Pull Request, the GitHub Actions automated build system will run automated checks using these tools.\n\nShinx-lint\n\"\"\"\"\"\"\"\"\"\"\n\nThe documentation is checked for stylistic and formal issues by ``sphinx-lint``.\n\n\nCodespell check\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThis repository utilizes an automatic `spell checker <https://github.com/codespell-project/codespell>`_ integrated into the pre-commit process. If any spelling issues are detected, the recommended corrections will be applied automatically to the file, ready for commit.\nIn the event of false positives, you can adjust the configuration in the `.codespell.rc`. To exclude files from the spell check, utilize the `skip` keyword followed by comma-separated paths to the files (wildcards are supported). Additionally, to exclude specific words from the spell check, employ the `ignore-words-list` keyword followed by comma-separated words to be skipped.\n\n\nAutomated Integration Tests\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe test directory contains a `pytest <https://docs.pytest.org/>`_ integration suite with some integration tests for ``esptool.py``, ``espefuse.py``, and ``espsecure.py``.\n\nIt is necessary to have ``esptool.py`` installed (see `Development Setup`_) in your environment in order to run these tests.\n\nThe following tests run automatically by GitHub Actions for each Pull Request. You can run them locally to check for regressions in the respective functionality:\n\n*  ``test_imagegen.py`` tests the ``elf2image`` command\n*  ``test_image_info.py`` tests the ``image_info`` command\n*  ``test_mergebin.py`` tests the ``merge_bin`` command\n*  ``test_modules.py`` tests the modules used by ``esptool.py`` for regressions\n*  ``test_espsecure.py`` tests ``espsecure.py`` functionality\n*  ``test_espsecure_hsm.py`` tests support of external HSM signing in ``espsecure.py``. These tests require additional prerequisites, see ``SoftHSM2 setup`` in the `tests workflow definition <https://github.com/espressif/esptool/blob/master/.github/workflows/test_esptool.yml>`_ for more information.\n\nThe following tests are not run automatically by GitHub Actions, because they need real connected hardware. Therefore, they need to be run locally in a command line:\n\n*  ``test_esptool.py`` contains integration tests for ``esptool.py`` and needs to be run against real Espressif hardware with the following format:\n\n   ``pytest test_esptool.py --port <serial port> --chip <name of chip> --baud <baud rate>``\n\n   For example, to run all tests on an ESP32 board connected to /dev/ttyUSB0, at 230400bps:\n\n   ``pytest test_esptool.py --port /dev/ttyUSB0 --chip esp32 --baud 230400``\n\n   Or to run the TestFlashing suite only (using the pytest ``-k`` option to select tests based on their name) on an ESP8266 board connected to /dev/ttyUSB2, at 460800bps:\n\n   ``pytest test_esptool.py --port /dev/ttyUSB2 --chip esp8266 --baud 460800 -k TestFlashing``\n\n   .. note::\n\n      Some tests might fail at higher baud rates on some hardware.\n\n*  ``test_esptool_sdm.py`` contains integration tests for ``esptool.py`` with chips in secure download mode. It needs to be run against real Espressif hardware (with active SDM). The command line format is the same as for ``test_esptool.py``.\n\nThe following tests are not run automatically by GitHub Actions, but can be run locally in a command line:\n\n*  ``test_espefuse.py`` tests ``espefuse.py`` functionality. To run it:\n\n   ``pytest test_espefuse.py --chip <name of chip>``\n\n   These test use the ``--virt`` virtual mode of ``espefuse.py`` to safely test the functionality without a connection to a chip and without the possibility of affecting the actual eFuses in a real hardware.\n\n   .. warning::\n\n      Do not attempt to run these tests on real hardware! You risk damaging or destroying the ESP chip!\n\nThe whole test suite (without the tests needing an actual hardware or installation of additional prerequisites) can be easily run with the following command in the esptool root folder: ``pytest -m host_test``\n\n\nPull Request Process\n--------------------\n\n.. note::\n\n   If you are developing the stub flasher and plan to send a pull request, please use the latest toolchains available.\n\nAfter you open the Pull Request, there will probably be some discussion in the comments field of the request itself.\n\nOnce the Pull Request is ready to merge, it will first be merged into our internal git system for in-house automated testing.\n\nIf this process passes, it will be merged onto the public github repository, hooray!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.31640625,
          "content": "include README.md\ninclude LICENSE\ninclude esptool/targets/stub_flasher/1/*\ninclude esptool/targets/stub_flasher/2/*\ninclude espefuse/efuse_defs/*.yaml\n# sdist includes test/test*.py by default, but esptool.py tests\n# are so far only intended to run from the git repo itself\nprune test\nprune .github\nprune docs\nexclude .git*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3388671875,
          "content": "# esptool.py\n\nA Python-based, open-source, platform-independent utility to communicate with the ROM bootloader in Espressif chips.\n\n[![Test esptool](https://github.com/espressif/esptool/actions/workflows/test_esptool.yml/badge.svg?branch=master)](https://github.com/espressif/esptool/actions/workflows/test_esptool.yml) [![Build esptool](https://github.com/espressif/esptool/actions/workflows/build_esptool.yml/badge.svg?branch=master)](https://github.com/espressif/esptool/actions/workflows/build_esptool.yml)\n\n## Documentation\n\nVisit the [documentation](https://docs.espressif.com/projects/esptool/) or run `esptool.py -h`.\n\n## Contribute\n\nIf you're interested in contributing to esptool.py, please check the [contributions guide](https://docs.espressif.com/projects/esptool/en/latest/contributing.html).\n\n## About\n\nesptool.py was initially created by Fredrik Ahlberg (@[themadinventor](https://github.com/themadinventor/)), and later maintained by Angus Gratton (@[projectgus](https://github.com/projectgus/)). It is now supported by Espressif Systems. It has also received improvements from many members of the community.\n\n## License\n\nThis document and the attached source code are released as Free Software under GNU General Public License Version 2 or later. See the accompanying [LICENSE file](https://github.com/espressif/esptool/blob/master/LICENSE) for a copy.\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "esp_rfc2217_server.py",
          "type": "blob",
          "size": 1.998046875,
          "content": "#!/usr/bin/env python\n#\n# SPDX-FileCopyrightText: 2014-2024 Fredrik Ahlberg, Angus Gratton,\n# Espressif Systems (Shanghai) CO LTD, other contributors as noted.\n#\n# SPDX-License-Identifier: BSD-3-Clause\n\n# This executable script is a thin wrapper around the main functionality\n# in the esp_rfc2217_server Python package\n\n# When updating this script, please also update esptool.py, espefuse.py and espsecure.py\n\n###################################################################################\n# Redirect data from a TCP/IP connection to a serial port and vice versa using RFC 2217.\n#\n# This is a modified version of rfc2217_server.py provided by the pyserial package\n# (pythonhosted.org/pyserial/examples.html#single-port-tcp-ip-serial-bridge-rfc-2217).\n# It uses a custom PortManager to properly apply the RTS & DTR signals\n# for resetting ESP chips.\n#\n# Run the following command on the server side to make\n# connection between /dev/ttyUSB1 and TCP port 4000:\n#\n#   python esp_rfc2217_server.py -p 4000 /dev/ttyUSB1\n#\n# Esptool can connect to the ESP device through that server as it is\n# demonstrated in the following example:\n#\n#   esptool.py --port rfc2217://localhost:4000?ign_set_control flash_id\n#\n\nimport contextlib\nimport os\nimport sys\n\nif os.name != \"nt\":\n    # Linux/macOS: remove current script directory to avoid importing this file\n    # as a module; we want to import the installed esp_rfc2217_server module instead\n    with contextlib.suppress(ValueError):\n        executable_dir = os.path.dirname(sys.executable)\n        sys.path = [\n            path\n            for path in sys.path\n            if not path.endswith((\"/bin\", \"/sbin\")) and path != executable_dir\n        ]\n\n    # Linux/macOS: delete imported module entry to force Python to load\n    # the module from scratch; this enables importing esp_rfc2217_server module in\n    # other Python scripts\n    with contextlib.suppress(KeyError):\n        del sys.modules[\"esp_rfc2217_server\"]\n\nimport esp_rfc2217_server\n\nif __name__ == \"__main__\":\n    esp_rfc2217_server.main()\n"
        },
        {
          "name": "esp_rfc2217_server",
          "type": "tree",
          "content": null
        },
        {
          "name": "espefuse.py",
          "type": "blob",
          "size": 1.15234375,
          "content": "#!/usr/bin/env python\n#\n# SPDX-FileCopyrightText: 2014-2022 Fredrik Ahlberg, Angus Gratton,\n# Espressif Systems (Shanghai) CO LTD, other contributors as noted.\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# This executable script is a thin wrapper around the main functionality\n# in the espefuse Python package\n\n# When updating this script, please also update esptool.py and espsecure.py\n\nimport contextlib\nimport os\nimport sys\n\nif os.name != \"nt\":\n    # Linux/macOS: remove current script directory to avoid importing this file\n    # as a module; we want to import the installed espefuse module instead\n    with contextlib.suppress(ValueError):\n        executable_dir = os.path.dirname(sys.executable)\n        sys.path = [\n            path\n            for path in sys.path\n            if not path.endswith((\"/bin\", \"/sbin\")) and path != executable_dir\n        ]\n\n    # Linux/macOS: delete imported module entry to force Python to load\n    # the module from scratch; this enables importing espefuse module in\n    # other Python scripts\n    with contextlib.suppress(KeyError):\n        del sys.modules[\"espefuse\"]\n\nimport espefuse\n\nif __name__ == \"__main__\":\n    espefuse._main()\n"
        },
        {
          "name": "espefuse",
          "type": "tree",
          "content": null
        },
        {
          "name": "espsecure.py",
          "type": "blob",
          "size": 1.1572265625,
          "content": "#!/usr/bin/env python\n#\n# SPDX-FileCopyrightText: 2014-2022 Fredrik Ahlberg, Angus Gratton,\n# Espressif Systems (Shanghai) CO LTD, other contributors as noted.\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# This executable script is a thin wrapper around the main functionality\n# in the espsecure Python package\n\n# When updating this script, please also update esptool.py and espefuse.py\n\nimport contextlib\nimport os\nimport sys\n\nif os.name != \"nt\":\n    # Linux/macOS: remove current script directory to avoid importing this file\n    # as a module; we want to import the installed espsecure module instead\n    with contextlib.suppress(ValueError):\n        executable_dir = os.path.dirname(sys.executable)\n        sys.path = [\n            path\n            for path in sys.path\n            if not path.endswith((\"/bin\", \"/sbin\")) and path != executable_dir\n        ]\n\n    # Linux/macOS: delete imported module entry to force Python to load\n    # the module from scratch; this enables importing espsecure module in\n    # other Python scripts\n    with contextlib.suppress(KeyError):\n        del sys.modules[\"espsecure\"]\n\nimport espsecure\n\nif __name__ == \"__main__\":\n    espsecure._main()\n"
        },
        {
          "name": "espsecure",
          "type": "tree",
          "content": null
        },
        {
          "name": "esptool.py",
          "type": "blob",
          "size": 1.1474609375,
          "content": "#!/usr/bin/env python\n#\n# SPDX-FileCopyrightText: 2014-2022 Fredrik Ahlberg, Angus Gratton,\n# Espressif Systems (Shanghai) CO LTD, other contributors as noted.\n#\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# This executable script is a thin wrapper around the main functionality\n# in the esptool Python package\n\n# When updating this script, please also update espefuse.py and espsecure.py\n\nimport contextlib\nimport os\nimport sys\n\nif os.name != \"nt\":\n    # Linux/macOS: remove current script directory to avoid importing this file\n    # as a module; we want to import the installed esptool module instead\n    with contextlib.suppress(ValueError):\n        executable_dir = os.path.dirname(sys.executable)\n        sys.path = [\n            path\n            for path in sys.path\n            if not path.endswith((\"/bin\", \"/sbin\")) and path != executable_dir\n        ]\n\n    # Linux/macOS: delete imported module entry to force Python to load\n    # the module from scratch; this enables importing esptool module in\n    # other Python scripts\n    with contextlib.suppress(KeyError):\n        del sys.modules[\"esptool\"]\n\nimport esptool\n\nif __name__ == \"__main__\":\n    esptool._main()\n"
        },
        {
          "name": "esptool",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.5234375,
          "content": "[build-system]\n    requires = [\"setuptools>=64\"]\n    build-backend = \"setuptools.build_meta\"\n\n[project]\n    name = \"esptool\"\n    authors = [\n        {name = \"Fredrik Ahlberg (themadinventor)\"},\n        {name = \"Angus Gratton (projectgus)\"},\n        {name = \"Espressif Systems\"}\n    ]\n    readme = {file = \"README.md\", content-type = \"text/markdown\"}\n    license = {text = \"GPLv2+\"}\n    description = \"A serial utility to communicate & flash code to Espressif chips.\"\n    classifiers = [\n        \"Development Status :: 5 - Production/Stable\",\n        \"Intended Audience :: Developers\",\n        \"Natural Language :: English\",\n        \"Operating System :: POSIX\",\n        \"Operating System :: Microsoft :: Windows\",\n        \"Operating System :: MacOS :: MacOS X\",\n        \"Topic :: Software Development :: Embedded Systems\",\n        \"Environment :: Console\",\n        \"License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)\",\n        \"Programming Language :: Python :: 3.7\",\n        \"Programming Language :: Python :: 3.8\",\n        \"Programming Language :: Python :: 3.9\",\n        \"Programming Language :: Python :: 3.10\",\n        \"Programming Language :: Python :: 3.11\",\n        \"Programming Language :: Python :: 3.12\",\n        \"Programming Language :: Python :: 3.13\",\n    ]\n    requires-python = \">=3.7\"\n    dynamic = [\"version\", \"scripts\"]\n\n    dependencies = [\n        \"bitstring>=3.1.6,!=4.2.0\",\n        \"cryptography>=2.1.4\",\n        \"ecdsa>=0.16.0\",\n        \"pyserial>=3.3\",\n        \"reedsolo>=1.5.3,<1.8\",\n        \"PyYAML>=5.1\",\n        \"intelhex\",\n        'argcomplete>=3; sys_platform != \"win32\"',\n    ]\n\n[project.urls]\n    Homepage = \"https://github.com/espressif/esptool/\"\n    Documentation = \"https://docs.espressif.com/projects/esptool/\"\n    Source = \"https://github.com/espressif/esptool/\"\n    Tracker = \"https://github.com/espressif/esptool/issues/\"\n    Changelog = \"https://github.com/espressif/esptool/blob/master/CHANGELOG.md\"\n\n[project.optional-dependencies]\n    dev = [\n        \"pyelftools\",\n        \"coverage~=6.0\",\n        \"pre-commit\",\n        \"pytest\",\n        \"pytest-rerunfailures\",\n        \"requests\",\n        \"commitizen\",\n    ]\n    hsm = [\"python-pkcs11\"]\n\n[tool.setuptools]\n    include-package-data = true\n\n[tool.setuptools.package-data]\n    \"*\" = [\"esptool/targets/stub_flasher/1/*\", \"esptool/targets/stub_flasher/2/*\"]\n\n[tool.setuptools.packages]\n    find = {exclude = [\"ci*\", \"test*\", \"docs*\"]}\n\n[tool.setuptools.dynamic]\n    version = {attr = \"esptool.__init__.__version__\"}\n\n[tool.commitizen]\n    version = \"4.8.1\"\n    update_changelog_on_bump = true\n    tag_format = \"v$version\"\n    changelog_start_rev = \"v4.2.1\"\n    changelog_merge_prerelease = true\n    annotated_tag = true\n    bump_message = \"change: Update version to $new_version\"\n    version_files = [\n        \"esptool/__init__.py:__version__\"\n    ]\n    change_type_order = [\n        \"BREAKING CHANGE\",\n        \"New Features\",\n        \"Bug Fixes\",\n        \"Code Refactoring\",\n        \"Performance Improvements\"\n    ]\n\n[tool.commitizen.change_type_map]\n    feat = \"New Features\"\n    fix = \"Bug Fixes\"\n    refactor = \"Code Refactoring\"\n    perf = \"Performance Improvements\"\n\n[tool.codespell]\n    skip = '*.bin,*test/images/efuse/*,*docs/en/espefuse/inc/*'\n    ignore-words-list = 'bloc,ser,dout,exten'\n    write-changes = false\n\n[tool.mypy]\n    disallow_incomplete_defs = false # Disallows defining functions with incomplete type annotations\n    disallow_untyped_defs    = false # Disallows defining functions without type annotations or with incomplete type annotations\n    ignore_missing_imports   = true  # Suppress error messages about imports that cannot be resolved\n    python_version           = \"3.7\" # Specifies the Python version used to parse and check the target program\n    warn_no_return           = true  # Shows errors for missing return statements on some execution paths\n    warn_return_any          = true  # Shows a warning when returning a value with type Any from a function declared with a non- Any return type\n\n[tool.ruff]\n    # https://docs.astral.sh/ruff/settings/\n    # Exclude a variety of commonly ignored directories.\n    exclude = [\n        \".eggs\",\n        \".git\",\n        \"__pycache__\"\n    ]\n\n    line-length = 88\n\n    select = ['E', 'F', 'W']\n    ignore = [\"E203\"]\n\n    target-version = \"py37\"\n\n[tool.ruff.lint]\n    # Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.\n    # Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or\n    # McCabe complexity (`C901`) by default.\n    select = [\"E4\", \"E7\", \"E9\", \"F\"]\n    ignore = []\n\n    # Allow fix for all enabled rules (when `--fix`) is provided.\n    fixable = [\"ALL\"]\n    unfixable = []\n\n    # Allow unused variables when underscore-prefixed.\n    dummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[tool.ruff.lint.per-file-ignores]\n    # tests often manipulate sys.path before importing the main tools, so ignore import order violations\n    \"test/*.py\" = [\"E402\"]\n\n    # multiple spaces after ',' and long lines - used for visual layout of eFuse data\n    \"espefuse/efuse/*/mem_definition.py\" =  [\"E241\", \"E501\"]\n    \"espefuse/efuse/*/operations.py\" =   [\"E241\", \"E501\", \"F401\"]\n    \"espefuse/efuse/*/fields.py\" =   [\"E241\", \"E501\"]\n\n    # ignore long lines - used for RS encoding pairs\n    \"test/test_modules.py\" = [\"E501\"]\n\n    # don't check for unused imports in __init__.py files\n    \"__init__.py\" = [\"F401\"]\n\n    # allow definition from star imports in docs config\n    \"docs/conf_common.py\" =  [\"F405\"]\n\n[tool.ruff.format]\n    quote-style = \"double\"\n    indent-style = \"space\"\n    docstring-code-format = true\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.529296875,
          "content": "import os\nfrom setuptools import setup\n\nif os.name != \"nt\":\n    scripts = [\"esptool.py\", \"espefuse.py\", \"espsecure.py\", \"esp_rfc2217_server.py\"]\n    entry_points = {}\nelse:\n    scripts = []\n    entry_points = {\n        \"console_scripts\": [\n            \"esptool.py=esptool.__init__:_main\",\n            \"espsecure.py=espsecure.__init__:_main\",\n            \"espefuse.py=espefuse.__init__:_main\",\n            \"esp_rfc2217_server.py=esp_rfc2217_server.__init__:main\",\n        ],\n    }\n\nsetup(\n    scripts=scripts,\n    entry_points=entry_points,\n)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}