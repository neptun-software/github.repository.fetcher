{
  "metadata": {
    "timestamp": 1736560886825,
    "page": 609,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chainer/chainer",
      "stars": 5897,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.1845703125,
          "content": "[run]\ninclude = chainer/*, examples/*\n\n# Exclude auto-generated source files.\nomit =\n    chainer/links/caffe/protobuf3/caffe_pb2.py\n\n[report]\nexclude_lines =\n    if __name__ == .__main__.:\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3056640625,
          "content": "*~\n*.egg/\n*.pyc\n*.pyo\n*.cpp\n*.so\n*.dylib\nbuild\n\\#*\\#\n.\\#*\n_build_info.py\n.coverage\n.eggs/\n_readthedocs_build\n/TAGS\n/tags\nchainer.egg-info/\ndist/\nhtmlcov/\n.idea/\n.cache/\n.mypy_cache/\n.pytest_cache/\ndocs/my.model\ndocs/my.state\ndocs/my_mnist.model\ndocs/mnist_result\ndocs/*.png\n/docs/source/**/reference/**/generated\n"
        },
        {
          "name": ".mergify.yml",
          "type": "blob",
          "size": 1.40625,
          "content": "pull_request_rules:\n  - name: Auto merge\n    conditions:\n      - \"#changes-requested-reviews-by=0\"\n      - label=st:test-and-merge\n      - status-success=Jenkins\n      - status-success=continuous-integration/travis-ci/pr\n      - status-success=pfn-public-ci/chainer.py27and35.cpu\n      - status-success=pfn-public-ci/chainer.py27and35.gpu\n      - status-success=pfn-public-ci/chainer.py37.cpu\n      - status-success=pfn-public-ci/chainer.py37.gpu\n      - status-success=pfn-public-ci/chainer.py2.cv\n      - status-success=pfn-public-ci/chainer.py2.cv.examples\n      - status-success=pfn-public-ci/chainer.py2.cv.gpu\n      - status-success=pfn-public-ci/chainer.py3.cv\n      - status-success=pfn-public-ci/chainer.py3.cv.examples\n      - status-success=pfn-public-ci/chainer.py3.cv.gpu\n      - status-success=pfn-public-ci/chainermn.cpu\n      - status-success=pfn-public-ci/chainermn.gpu\n      - status-success=pfn-public-ci/onnxchainer.py35.cpu\n      - status-success=pfn-public-ci/onnxchainer.py36.cpu\n      - status-success=pfn-public-ci/onnxchainer.py36.cpu.onnx14\n      - status-success=pfn-public-ci/onnxchainer.py37.cpu\n      - status-success=pfn-public-ci/onnxchainer.py37.cpu.onnx15\n      - status-success=pfn-public-ci/onnxchainer.py37.gpu\n      - status-success=pfn-public-ci/onnxchainer.win.py37.gpu\n    actions:\n      merge:\n        method: merge\n        strict: false  # strict mode and manually-triggered CIs do not get along\n"
        },
        {
          "name": ".pfnci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.1484375,
          "content": "language: python\n\ncache:\n  - pip\n  - ccache\n\nmatrix:\n  include:\n    - name: \"Python Static Check\"\n      dist: xenial\n      python: \"3.5\"\n      env:\n      - CHAINER_TRAVIS_TEST=\"python-static-check\"\n      if: type in (pull_request)\n\n    - name: \"C++ Static Check\"\n      language: python\n      dist: xenial\n      python: \"3.5\"\n      env:\n      - CHAINER_TRAVIS_TEST=\"c-static-check\"\n      if: type in (pull_request)\n\n    - name: \"Ubuntu16.04 Py35 | chainer, chainermn, chainerx, docs\"\n      dist: xenial\n      python: \"3.5\"\n      env:\n      - CHAINER_TRAVIS_TEST=\"chainer\"\n      - MATRIX_EVAL=\"CC=gcc-5 && CXX=g++-5\"\n      - GOROOT=$HOME/go\n      if: type in (pull_request)\n\n    - name: \"Examples\"\n      language: python\n      dist: xenial\n      python: \"3.5\"\n      env:\n      - CHAINER_TRAVIS_TEST=\"examples\"\n      - GOROOT=$HOME/go\n\nbefore_install:\n  - bash scripts/ci/travis/run-tests.sh before_install\n\ninstall:\n  - travis_wait bash scripts/ci/travis/run-tests.sh install\n\nscript:\n  - bash scripts/ci/travis/run-tests.sh script\n\naddons:\n  apt:\n    update: true\n    packages:\n      - moreutils  # for ts\n  homebrew:\n    update: true\n    packages:\n      - moreutils  # for ts\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3046875,
          "content": "# Chainer Code of Conduct\n\nChainer follows the [NumFOCUS Code of Conduct][homepage] available at https://numfocus.org/code-of-conduct.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at chainer@preferred.jp. \n\n[homepage]: https://numfocus.org/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0908203125,
          "content": "Copyright (c) 2015 Preferred Infrastructure, Inc.\nCopyright (c) 2015 Preferred Networks, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.2548828125,
          "content": "include README.md\ninclude LICENSE\n\ngraft chainerx\ninclude chainerx_build_helper.py\ninclude chainerx_cc/README.md\ninclude chainerx_cc/LICENSE.txt\ninclude chainerx_cc/CMakeLists.txt\ngraft chainerx_cc/chainerx\ngraft chainerx_cc/third_party\ngraft chainerx_cc/cmake\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.2109375,
          "content": "***Notice: As [announced](https://chainer.org/announcement/2019/12/05/released-v7.html), Chainer is under the maintenance phase and further development will be limited to bug-fixes and maintenance only.***\n\n----\n\n<div align=\"center\"><img src=\"https://raw.githubusercontent.com/chainer/chainer/master/docs/image/chainer_red_h.png\" width=\"400\"/></div>\n\n# Chainer: A deep learning framework\n\n[![pypi](https://img.shields.io/pypi/v/chainer.svg)](https://pypi.python.org/pypi/chainer)\n[![GitHub license](https://img.shields.io/github/license/chainer/chainer.svg)](https://github.com/chainer/chainer)\n[![travis](https://img.shields.io/travis/chainer/chainer/master.svg)](https://travis-ci.org/chainer/chainer)\n[![coveralls](https://img.shields.io/coveralls/chainer/chainer.svg)](https://coveralls.io/github/chainer/chainer)\n[![Read the Docs](https://readthedocs.org/projects/chainer/badge/?version=stable)](https://docs.chainer.org/en/stable/?badge=stable)\n[![Optuna](https://img.shields.io/badge/Optuna-integrated-blue)](https://optuna.org)\n\n[**Website**](https://chainer.org/)\n| [**Docs**](https://docs.chainer.org/en/stable/)\n| [**Install Guide**](https://docs.chainer.org/en/stable/install.html)\n| **Tutorials** ([ja](https://tutorials.chainer.org/ja/))\n| **Examples** ([Official](examples), [External](https://github.com/chainer-community/awesome-chainer))\n| [**Concepts**](https://docs.chainer.org/en/stable/guides/)\n| [**ChainerX**](#chainerx)\n\n**Forum** ([en](https://groups.google.com/forum/#!forum/chainer), [ja](https://groups.google.com/forum/#!forum/chainer-jp))\n| **Slack invitation** ([en](https://bit.ly/go-chainer-slack), [ja](https://bit.ly/go-chainer-jp-slack))\n| **Twitter** ([en](https://twitter.com/CuPy_Team), [ja](https://twitter.com/ChainerJP))\n\n*Chainer* is a Python-based deep learning framework aiming at flexibility.\nIt provides automatic differentiation APIs based on the **define-by-run** approach (a.k.a. dynamic computational graphs) as well as object-oriented high-level APIs to build and train neural networks.\nIt also supports CUDA/cuDNN using [CuPy](https://github.com/cupy/cupy) for high performance training and inference.\nFor more details about Chainer, see the documents and resources listed above and join the community in Forum, Slack, and Twitter.\n\n## Installation\n\n*For more details, see the [installation guide](https://docs.chainer.org/en/stable/install.html).*\n\nTo install Chainer, use `pip`.\n\n```sh\n$ pip install chainer\n```\n\nTo enable CUDA support, [CuPy](https://github.com/cupy/cupy) is required.\nRefer to the [CuPy installation guide](https://docs-cupy.chainer.org/en/stable/install.html).\n\n\n## Docker image\n\nWe are providing the official Docker image.\nThis image supports [nvidia-docker](https://github.com/NVIDIA/nvidia-docker).\nLogin to the environment with the following command, and run the Python interpreter to use Chainer with CUDA and cuDNN support.\n\n```\n$ nvidia-docker run -it chainer/chainer /bin/bash\n```\n\n\n## Contribution\n\nSee the [contribution guide](https://docs.chainer.org/en/stable/contribution.html).\n\n\n## ChainerX\n\nSee the [ChainerX documentation](https://docs.chainer.org/en/stable/chainerx/index.html).\n\n\n## License\n\nMIT License (see `LICENSE` file).\n\n\n## More information\n\n- [Release notes](https://github.com/chainer/chainer/releases)\n\n## References\n\nTokui, Seiya, et al. \"Chainer: A Deep Learning Framework for Accelerating the Research Cycle.\" *Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining*. ACM, 2019.\n[URL](https://dl.acm.org/citation.cfm?id=3330756) [BibTex](chainer2019_bibtex.txt)\n\nTokui, S., Oono, K., Hido, S. and Clayton, J.,\nChainer: a Next-Generation Open Source Framework for Deep Learning,\n*Proceedings of Workshop on Machine Learning Systems(LearningSys) in\nThe Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS)*, (2015)\n[URL](http://learningsys.org/papers/LearningSys_2015_paper_33.pdf), [BibTex](chainer_bibtex.txt)\n\nAkiba, T., Fukuda, K. and Suzuki, S.,\nChainerMN: Scalable Distributed Deep Learning Framework,\n*Proceedings of Workshop on ML Systems in\nThe Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)*, (2017)\n[URL](http://learningsys.org/nips17/assets/papers/paper_25.pdf), [BibTex](chainermn_bibtex.txt)\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.7841796875,
          "content": "environment:\n  global:\n    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the\n    # /E:ON and /V:ON options are not enabled in the batch script intepreter\n    # See: https://stackoverflow.com/a/13751649/163740\n    CMD_IN_ENV: \"cmd /E:ON /V:ON /C .\\\\appveyor\\\\run_with_env.cmd\"\n\n  matrix:\n\n    # Pre-installed Python versions, which Appveyor may upgrade to\n    # a later point release.\n    # See: https://www.appveyor.com/docs/installed-software#python\n\n    - PYTHON: \"C:\\\\Miniconda35\"\n      PYTHON_VERSION: \"3.5.x\"\n      PYTHON_ARCH: \"32\"\n\n    - PYTHON: \"C:\\\\Miniconda35-x64\"\n      PYTHON_VERSION: \"3.5.x\"\n      PYTHON_ARCH: \"64\"\n\ninstall:\n  - ECHO \"Filesystem root:\"\n  - ps: \"ls \\\"C:/\\\"\"\n\n  - ECHO \"Installed SDKs:\"\n  - ps: \"ls \\\"C:/Program Files/Microsoft SDKs/Windows\\\"\"\n\n  # Install Python (from the official .msi of https://www.python.org) and pip when\n  # not already installed.\n  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\\install.ps1 }\n\n  # Prepend newly installed Python to the PATH of this build (this cannot be\n  # done from inside the powershell script as it would require to restart\n  # the parent CMD process).\n  - \"SET PATH=%PYTHON%;%PYTHON%\\\\Scripts;%PATH%\"\n\n  # Check that we have the expected version and architecture for Python\n  - \"python --version\"\n  - \"python -c \\\"import struct; print(struct.calcsize('P') * 8)\\\"\"\n\n  - \"conda install -y -q setuptools\"\n  - \"conda install -y -q h5py\"\n\nbuild_script:\n  # Build the compiled extension\n  - \"%CMD_IN_ENV% python setup.py build install -vvvv\"\n\ntest_script:\n  # Run the project tests\n  - \"%CMD_IN_ENV% pip install -U -e .[appveyor]\"\n  # Avoid interuption confirmation of cmd.exe\n  - \"echo python -m pytest -rfEX --timeout=60 -m \\\"not gpu and not cudnn and not ideep and not slow\\\" tests/chainer_tests > tmp.bat\"\n  - \"call tmp.bat < nul\"\n"
        },
        {
          "name": "appveyor",
          "type": "tree",
          "content": null
        },
        {
          "name": "chainer",
          "type": "tree",
          "content": null
        },
        {
          "name": "chainer2019_bibtex.txt",
          "type": "blob",
          "size": 0.4765625,
          "content": "@inproceedings{tokui2019chainer,\n  title={Chainer: A Deep Learning Framework for Accelerating the Research Cycle},\n  author={Tokui, Seiya and Okuta, Ryosuke and Akiba, Takuya and Niitani, Yusuke and Ogawa, Toru and Saito, Shunta and Suzuki, Shuji and Uenishi, Kota and Vogel, Brian and Yamazaki Vincent, Hiroyuki},\n  booktitle={Proceedings of the 25th ACM SIGKDD International Conference on Knowledge Discovery \\& Data Mining},\n  pages={2002--2011},\n  year={2019},\n  organization={ACM}\n}\n"
        },
        {
          "name": "chainer_bibtex.txt",
          "type": "blob",
          "size": 0.4794921875,
          "content": "@inproceedings{chainer_learningsys2015,\n  author       = \"Tokui, Seiya and Oono, Kenta and Hido, Shohei and Clayton, Justin\",\n  title        = \"Chainer: a Next-Generation Open Source Framework for Deep Learning\",\n  booktitle    = \"Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Twenty-ninth Annual Conference on Neural Information Processing Systems (NIPS)\",\n  year         = \"2015\",\n  url          = \"http://learningsys.org/papers/LearningSys_2015_paper_33.pdf\"\n}\n"
        },
        {
          "name": "chainermn",
          "type": "tree",
          "content": null
        },
        {
          "name": "chainermn_bibtex.txt",
          "type": "blob",
          "size": 0.380859375,
          "content": "@inproceedings{chainermn_mlsys2017,\nauthor = {Akiba, Takuya and Fukuda, Keisuke and Suzuki, Shuji},\ntitle = {{ChainerMN: Scalable Distributed Deep Learning Framework}},\nbooktitle = {Proceedings of Workshop on ML Systems in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS)},\nyear = {2017}\nurl = {http://learningsys.org/nips17/assets/papers/paper_25.pdf},\n}\n"
        },
        {
          "name": "chainerx",
          "type": "tree",
          "content": null
        },
        {
          "name": "chainerx_build_helper.py",
          "type": "blob",
          "size": 4.46875,
          "content": "# This script is based on pybind11's example script. See the original via the\n# following URL: https://github.com/pybind/cmake_example/blob/master/setup.py\n\nimport distutils\nimport os\nimport platform\nimport re\nimport subprocess\nimport sys\n\nimport setuptools\nfrom setuptools.command import build_ext\n\n\ndef emit_build_info(build_chainerx):\n    dirname = os.path.dirname(__file__)\n    filename = os.path.join(dirname, 'chainerx/_build_info.py')\n    with open(filename, mode='w') as f:\n        f.write('build_chainerx = {}\\n'.format(build_chainerx))\n\n\nclass CMakeExtension(setuptools.Extension):\n\n    def __init__(self, name, build_targets, sourcedir=''):\n        setuptools.Extension.__init__(self, name, sources=[])\n        self.sourcedir = os.path.abspath(sourcedir)\n        self.build_targets = build_targets\n\n\nclass CMakeBuild(build_ext.build_ext):\n\n    def run(self):\n        try:\n            out = subprocess.check_output(['cmake', '--version'])\n        except OSError:\n            raise RuntimeError('CMake must be installed to build ChainerX')\n\n        cmake_version = distutils.version.LooseVersion(\n            re.search(r'version\\s*([\\d.]+)', out.decode()).group(1))\n        if cmake_version < '3.1.0':\n            raise RuntimeError('CMake >= 3.1.0 is required to build ChainerX')\n\n        generator = os.getenv('CHAINERX_CMAKE_GENERATOR', '').lower()\n        if generator not in ['', 'ninja']:\n            raise RuntimeError(\"Generator %s is not supported.\" % generator)\n        self.use_ninja = generator == 'ninja'\n\n        for ext in self.extensions:\n            self.build_extension(ext)\n\n    def build_extension(self, ext):\n        # Decide the build type: release/debug\n        build_type = os.getenv('CHAINERX_BUILD_TYPE', None)\n        if build_type is not None:\n            # Use environment variable\n            pass\n        elif self.debug:\n            # Being built with `python setup.py build --debug`\n            build_type = 'Debug'\n        elif os.getenv('READTHEDOCS', None) == 'True':\n            # on ReadTheDocs\n            build_type = 'Debug'\n        else:\n            # default\n            build_type = 'Release'\n\n        extdir = os.path.abspath(\n            os.path.dirname(self.get_ext_fullpath(ext.name)))\n        cmake_args = ['-GNinja'] if self.use_ninja else []\n        cmake_args += [\n            '-DCHAINERX_BUILD_PYTHON=1',\n            '-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=' + extdir,\n            '-DPYTHON_EXECUTABLE=' + sys.executable,\n            '-DCHAINERX_BUILD_TEST=OFF',\n            '-DCMAKE_BUILD_TYPE=' + build_type,\n        ]\n\n        build_args = ['--config', build_type]\n\n        if platform.system() == 'Windows':\n            cmake_args += [\n                '-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}'.format(\n                    build_type.upper(), extdir)]\n\n            if not self.use_ninja:\n                if sys.maxsize > 2**32:\n                    cmake_args += ['-A', 'x64']\n                build_args += ['--', '/m']\n        else:\n            build_args += ['--']\n            build_args += ext.build_targets\n\n        env = os.environ.copy()\n        env['CXXFLAGS'] = '{} -DVERSION_INFO=\\\\\"{}\\\\\"'.format(\n            env.get('CXXFLAGS', ''), self.distribution.get_version())\n        if not os.path.exists(self.build_temp):\n            os.makedirs(self.build_temp)\n        subprocess.check_call(\n            ['cmake', ext.sourcedir] + cmake_args, cwd=self.build_temp,\n            env=env)\n        subprocess.check_call(\n            ['cmake', '--build', '.'] + build_args, cwd=self.build_temp)\n\n\ndef config_setup_kwargs(setup_kwargs, build_chainerx):\n\n    # TODO(imanishi): Call this function with setuptools.\n    emit_build_info(build_chainerx)\n\n    if not build_chainerx:\n        # `chainerx` package needs to be able to be imported even if ChainerX\n        # is unavailable.\n        setup_kwargs['packages'] += ['chainerx']\n        return\n\n    if sys.version_info < (3, 5):\n        raise RuntimeError(\n            'ChainerX is only available for Python 3.5 or later.')\n    setup_kwargs['packages'] += [\n        'chainerx',\n        'chainerx._docs',\n        'chainerx.creation',\n        'chainerx.manipulation',\n        'chainerx.math',\n        'chainerx.random',\n        'chainerx.testing',\n    ]\n    setup_kwargs['package_data'] = {\n        'chainerx': ['py.typed', '*.pyi'],\n    }\n\n    setup_kwargs.update(dict(\n        cmdclass={'build_ext': CMakeBuild},\n        ext_modules=[CMakeExtension(\n            name='chainerx._core',\n            build_targets=['_core.so'],\n            sourcedir='chainerx_cc')],\n    ))\n"
        },
        {
          "name": "chainerx_cc",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.27734375,
          "content": "comment: false\n\ncoverage:\n  status:\n    # Disable coverage measurement for overall codebase.\n    project: off\n    # Enable coverage measurement for diff introduced in the pull-request,\n    # but do not mark \"X\" on commit status for now.\n    patch:\n      default:\n        target: '0%'\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "onnx_chainer",
          "type": "tree",
          "content": null
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.1640625,
          "content": "name: chainer\ntype: sphinx\nbase: docs/source\nrequirements_file: docs/requirements.txt\nconda:\n  file: docs/rtd_conda.yml\npython:\n  version: 3.7\n  setup_py_install: true\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 3.876953125,
          "content": "[flake8]\nexclude = .eggs,*.egg,build,caffe_pb2.py,caffe_pb3.py,docs,.git\n# TODO(niboshi): Fix violating code and remove E241 and E226\nignore = E741,W503,W504,E241,E226\n\n[pep8]\nexclude = .eggs,*.egg,build,caffe_pb2.py,caffe_pb3.py,docs,.git\n\n[tool:pytest]\nfilterwarnings =\n    error\n    # TODO(kataoka): ImportWarning, which is ignored by default, may be useful\n    # to find root causes of errors, but usually not important enough to stop\n    # testcases immediately and to hide other warnings and errors. Remove the\n    # entry below after other tests are fixed.\n    default::ImportWarning\n    # TODO(niboshi): Remove the entry below after solving #8062.\n    ignore:Some of grads are ignored by chainer\\.backward\\.:RuntimeWarning\n    # Ref. https://github.com/numpy/numpy/issues/11788\n    ignore:numpy\\.ufunc size changed, may indicate binary incompatibility:RuntimeWarning\n    ignore:numpy\\.dtype size changed, may indicate binary incompatibility:RuntimeWarning\n    ignore:ChainerX core binary is built in debug mode:UserWarning\n    ignore:Accelerate has been detected as a NumPy backend library:UserWarning:chainer[.*]\n    ignore::chainer.warnings.PerformanceWarning\n    ignore::chainer.backends.cuda._PerformanceWarning\n    ignore::FutureWarning:chainer\\.utils\\.experimental\n    # NumPy<1.11\n    ignore:in the future np\\.array_split will retain the shape of arrays with a zero size:FutureWarning:numpy\\.lib\\.shape_base\n    # importing old SciPy is warned because it tries to\n    # import nose via numpy.testing\n    ignore::DeprecationWarning:scipy\\._lib\\._numpy_compat\n    # importing stats from old SciPy is warned because it tries to\n    # import numpy.testing.decorators\n    ignore::DeprecationWarning:scipy\\.stats\\.morestats\n    # Theano 0.8 causes DeprecationWarnings. It is fixed in 0.9.\n    ignore::DeprecationWarning:theano\\.configparser\n    # Theano 1.0.2 passes a deprecated argument to distutils during\n    # importing ``theano.gof`` module.\n    # Without this configuration, the DeprecationWarning would be\n    # treated as an exception, and therefore the import would fail,\n    # causing AttributeError in the subsequent uses of\n    # ``theano.gof``. (#4810)\n    ignore::DeprecationWarning:theano\\.gof\\.cmodule\n    # ``collections.MutableSequence`` in protobuf is warned by\n    # Python 3.7.\n    ignore:Using or importing the ABCs from 'collections':DeprecationWarning:google\\.protobuf\n    # Importing abcs from ``collections`` in h5py is warned by\n    # Python 3.7.\n    ignore::DeprecationWarning:h5py\\._hl\\.base\n    # `` collections.Iterable`` in onnx helper is warned by\n    # Python 3.7.\n    ignore:Using or importing the ABCs from 'collections':DeprecationWarning:onnx\\.helper\n    # NumPy 1.20 deprecation for builtin alises\n    ignore:.* is a deprecated alias for the builtin:DeprecationWarning:onnx\n    # CuPy v8\n    ignore::DeprecationWarning:cupy\ntestpaths = tests docs\npython_files = test_*.py\npython_classes = Test\npython_functions = test\nminversion = 2.9\naddopts = --doctest-modules --doctest-glob='*.rst'\nmarkers =\n    chainerx: Tests to use ChainerX\n    cudnn: Tests to use cuDNN\n    gpu: Tests to run on GPU\n    ideep: Tests to use IDeep\n    theano: Tests to use Theano\n    multi_gpu: Tests to uses multi GPUs\n    slow: Tests thats takes time\n    parametrize_device: Parametrize ChainerX devices\n    parametrize_device_name: Parametrize ChainerX device names\n\n[mypy]\n\n[mypy-filelock.*]\nignore_missing_imports = True\n\n[mypy-pytest.*]\nignore_missing_imports = True\n\n[mypy-numpy.*]\nignore_missing_imports = True\n\n[mypy-cupy.*]\nignore_missing_imports = True\n\n[mypy-cupyx.*]\nignore_missing_imports = True\n\n[mypy-ideep4py.*]\nignore_missing_imports = True\n\n[mypy-theano.*]\nignore_missing_imports = True\n\n[mypy-google.protobuf.*]\nignore_missing_imports = True\n\n[mypy-h5py.*]\nignore_missing_imports = True\n\n[mypy-scipy.*]\nignore_missing_imports = True\n\n[mypy-matplotlib.*]\nignore_missing_imports = True\n\n[mypy-PIL.*]\nignore_missing_imports = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 6.3251953125,
          "content": "#!/usr/bin/env python\n\nimport os\nimport pkg_resources\nimport sys\n\nfrom setuptools import setup\n\nimport chainerx_build_helper\n\n\nif sys.version_info[:3] == (3, 5, 0):\n    if not int(os.getenv('CHAINER_PYTHON_350_FORCE', '0')):\n        msg = \"\"\"\nChainer does not work with Python 3.5.0.\n\nWe strongly recommend to use another version of Python.\nIf you want to use Chainer with Python 3.5.0 at your own risk,\nset CHAINER_PYTHON_350_FORCE environment variable to 1.\"\"\"\n        print(msg)\n        sys.exit(1)\n\n\nrequirements = {\n    'install': [\n        'setuptools',\n        'typing_extensions',\n        'filelock',\n        'numpy>=1.9.0',\n        'protobuf>=3.0.0',\n        'six>=1.9.0',\n    ],\n    'stylecheck': [\n        'autopep8>=1.4.1,<1.5',\n        'flake8>=3.7,<3.8',\n        'pycodestyle>=2.5,<2.6',\n    ],\n    'test': [\n        'pytest<4.2.0',  # 4.2.0 is slow collecting tests and times out on CI.\n        'attrs<19.2.0',  # pytest 4.1.1 does not run with attrs==19.2.0\n        'mock',\n    ],\n    'doctest': [\n        'sphinx==1.8.2',\n        'matplotlib',\n        'theano',\n    ],\n    'docs': [\n        'sphinx==1.8.2',\n        'sphinx_rtd_theme',\n        'onnx<1.7.0',\n        'packaging',\n    ],\n    'appveyor': [\n        '-r test',\n        # pytest-timeout>=1.3.0 requires pytest>=3.6.\n        # TODO(niboshi): Consider upgrading pytest to >=3.6\n        'pytest-timeout<1.3.0',\n    ],\n    'jenkins': [\n        '-r test',\n        # pytest-timeout>=1.3.0 requires pytest>=3.6.\n        # TODO(niboshi): Consider upgrading pytest to >=3.6\n        'pytest-timeout<1.3.0',\n        'pytest-cov<2.10',  # pytest-cov 2.10 requires pytest>=4.6\n        'nose',\n        'coveralls',\n        'codecov',\n        'coverage<5',  # Otherwise, Python must be built with sqlite\n    ],\n}\n\n\ndef reduce_requirements(key):\n    # Resolve recursive requirements notation (-r)\n    reqs = requirements[key]\n    resolved_reqs = []\n    for req in reqs:\n        if req.startswith('-r'):\n            depend_key = req[2:].lstrip()\n            reduce_requirements(depend_key)\n            resolved_reqs += requirements[depend_key]\n        else:\n            resolved_reqs.append(req)\n    requirements[key] = resolved_reqs\n\n\nfor k in requirements.keys():\n    reduce_requirements(k)\n\n\nextras_require = {k: v for k, v in requirements.items() if k != 'install'}\nsetup_requires = []\ninstall_requires = requirements['install']\ntests_require = requirements['test']\n\n\ndef find_any_distribution(pkgs):\n    for pkg in pkgs:\n        try:\n            return pkg_resources.get_distribution(pkg)\n        except pkg_resources.DistributionNotFound:\n            pass\n    return None\n\n\nfor pkg_name in ('ChainerMN', 'ONNX-Chainer'):\n    distribution_name = pkg_name.lower().replace('-', '_')\n    found_error = find_any_distribution([distribution_name])\n    if found_error is not None:\n        msg = \"\"\"\nWe detected that {name} is installed in your environment.\n{name} has been integrated to Chainer and no separate installation\nis necessary. Please uninstall the old {name} in advance.\n\"\"\"\n        print(msg.format(name=pkg_name))\n        exit(1)\n\nhere = os.path.abspath(os.path.dirname(__file__))\n# Get __version__ variable\nexec(open(os.path.join(here, 'chainer', '_version.py')).read())\n\n\nsetup_kwargs = dict(\n    name='chainer',\n    version=__version__,  # NOQA\n    description='A flexible framework of neural networks',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    author='Seiya Tokui',\n    author_email='tokui@preferred.jp',\n    url='https://chainer.org/',\n    license='MIT License',\n    packages=['chainer',\n              'chainer.backends',\n              'chainer.dataset',\n              'chainer.dataset.tabular',\n              'chainer.datasets',\n              'chainer.distributions',\n              'chainer.exporters',\n              'chainer.functions',\n              'chainer.functions.activation',\n              'chainer.functions.array',\n              'chainer.functions.connection',\n              'chainer.functions.evaluation',\n              'chainer.functions.loss',\n              'chainer.functions.math',\n              'chainer.functions.noise',\n              'chainer.functions.normalization',\n              'chainer.functions.pooling',\n              'chainer.functions.rnn',\n              'chainer.functions.theano',\n              'chainer.functions.util',\n              'chainer.function_hooks',\n              'chainer.iterators',\n              'chainer.initializers',\n              'chainer.links',\n              'chainer.links.activation',\n              'chainer.links.caffe',\n              'chainer.links.caffe.protobuf3',\n              'chainer.links.connection',\n              'chainer.links.loss',\n              'chainer.links.model',\n              'chainer.links.model.vision',\n              'chainer.links.normalization',\n              'chainer.links.rnn',\n              'chainer.links.theano',\n              'chainer.link_hooks',\n              'chainer.graph_optimizations',\n              'chainer.optimizers',\n              'chainer.optimizer_hooks',\n              'chainer.serializers',\n              'chainer.testing',\n              'chainer.training',\n              'chainer.training.extensions',\n              'chainer.training.triggers',\n              'chainer.training.updaters',\n              'chainer.utils',\n              'chainermn',\n              'chainermn.communicators',\n              'chainermn.datasets',\n              'chainermn.extensions',\n              'chainermn.functions',\n              'chainermn.iterators',\n              'chainermn.links',\n              'chainermn.testing',\n              'onnx_chainer',\n              'onnx_chainer.functions',\n              'onnx_chainer.testing'],\n    package_data={\n        'chainer': ['py.typed'],\n    },\n    zip_safe=False,\n    setup_requires=setup_requires,\n    install_requires=install_requires,\n    tests_require=tests_require,\n    extras_require=extras_require,\n    python_requires='>=3.5.0',\n)\n\n\nbuild_chainerx = 0 != int(os.getenv('CHAINER_BUILD_CHAINERX', '0'))\nif (os.getenv('READTHEDOCS', None) == 'True'\n        and os.getenv('READTHEDOCS_PROJECT', None) == 'chainer'):\n    # ChainerX must be built in order to build the docs (on Read the Docs).\n    build_chainerx = True\n\n    # Try to prevent Read the Docs build timeouts.\n    os.environ['MAKEFLAGS'] = '-j2'\n\n\nchainerx_build_helper.config_setup_kwargs(setup_kwargs, build_chainerx)\n\n\nsetup(**setup_kwargs)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}