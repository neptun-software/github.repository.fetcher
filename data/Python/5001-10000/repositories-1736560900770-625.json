{
  "metadata": {
    "timestamp": 1736560900770,
    "page": 625,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pallets-eco/flask-admin",
      "stars": 5829,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2275390625,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\nmax_line_length = 88\n\n[*.{css,html,js,json,jsx,scss,ts,tsx,yaml,yml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2890625,
          "content": "*.swp\n*.swo\n*.pyc\n*.*~\n*.rdb\n*.egg-info\npyenv\n#*#\nbuild\nsource/_static*\nsource/_templates*\nflask_admin/tests/tmp\ndist/*\nmake.bat\nvenv\n.venv\n*.sublime-*\n.coverage\n__pycache__\nexamples/sqla-inline/static\nexamples/file/files\nexamples/forms/files\n.DS_Store\n.idea/\n*.sqlite\nenv\n*.egg\n.eggs\n.tox/\n.env\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.4716796875,
          "content": "ci:\n  autoupdate_schedule: monthly\nrepos:\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.4.7\n    hooks:\n      - id: ruff\n      - id: ruff-format\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.6.0\n    hooks:\n      - id: check-merge-conflict\n      - id: debug-statements\n      - id: fix-byte-order-marker\n      - id: trailing-whitespace\n        exclude: ^flask_admin/static/\n      - id: end-of-file-fixer\n        exclude: ^flask_admin/static/\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.208984375,
          "content": "version: 2\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: '3.11'\npython:\n  install:\n    - requirements: requirements/docs.txt\n    - method: pip\n      path: .[all]\nsphinx:\n  builder: dirhtml\n  fail_on_warning: true\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.783203125,
          "content": "Flask-Admin is maintained by Serge S. Koval and various contributors:\n\nDevelopment Lead\n````````````````\n\n- Serge S. Koval <serge.koval+github@gmail.com>\n\nPatches and Suggestions\n```````````````````````\n\n- Paul Brown <paul90brown@gmail.com>\n- Petrus Janse van Rensburg <petrus.jvrensburg@gmail.com>\n- Priit Laes <plaes@plaes.org>\n- Sean Lynch\n- Andy Wilson <wilson.andrew.j+github@gmail.com>\n- Mikhail Krivushin <krivushinme@gmail.com>\n- Dmitry Medvinsky <dmedvinsky@gmail.com>\n- Salem Harrache <salem@harrache.info>\n- F. Gabriel Gosselin\n- Leonardinius <leonids.maslovs@galeoconsulting.com>\n- Peter Ward <peteraward@gmail.com>\n- Artem Serga <artem@serga.name>\n- Koblaid\n- Julian Gonggrijp (UUDigitalHumanitieslab)\n- Arthur de Paula Bressan (ArthurPBressan)\n\n.. and more. If I missed you, let me know.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5029296875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2014, Serge S. Koval and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4580078125,
          "content": "Copyright 2011 Pallets Community Ecosystem\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n1.  Redistributions of source code must retain the above copyright notice, this\n    list of conditions and the following disclaimer.\n2.  Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n3.  Neither the name of the copyright holder nor the names of its contributors\n    may be used to endorse or promote products derived from this software\n    without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.228515625,
          "content": "include LICENSE\ninclude README.md\nrecursive-include flask_admin/static *\nrecursive-include flask_admin/templates *\nrecursive-include flask_admin/translations *\nrecursive-include flask_admin/tests *\nrecursive-exclude flask_admin *.pyc\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.4560546875,
          "content": "# Makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line.\nSPHINXOPTS    =\nSPHINXBUILD   = sphinx-build\nPAPER         =\nBUILDDIR      = build\n\n# Internal variables.\nPAPEROPT_a4     = -D latex_paper_size=a4\nPAPEROPT_letter = -D latex_paper_size=letter\nALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) doc\n# the i18n builder cannot share the environment and doctrees with the others\nI18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) doc\n\n.PHONY: help clean html dirhtml singlehtml pickle json htmlhelp qthelp devhelp epub latex latexpdf text man changes linkcheck doctest gettext\n\nhelp:\n\t@echo \"Please use \\`make <target>' where <target> is one of\"\n\t@echo \"  html       to make standalone HTML files\"\n\t@echo \"  dirhtml    to make HTML files named index.html in directories\"\n\t@echo \"  singlehtml to make a single large HTML file\"\n\t@echo \"  pickle     to make pickle files\"\n\t@echo \"  json       to make JSON files\"\n\t@echo \"  htmlhelp   to make HTML files and a HTML help project\"\n\t@echo \"  qthelp     to make HTML files and a qthelp project\"\n\t@echo \"  devhelp    to make HTML files and a Devhelp project\"\n\t@echo \"  epub       to make an epub\"\n\t@echo \"  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter\"\n\t@echo \"  latexpdf   to make LaTeX files and run them through pdflatex\"\n\t@echo \"  text       to make text files\"\n\t@echo \"  man        to make manual pages\"\n\t@echo \"  texinfo    to make Texinfo files\"\n\t@echo \"  info       to make Texinfo files and run them through makeinfo\"\n\t@echo \"  gettext    to make PO message catalogs\"\n\t@echo \"  changes    to make an overview of all changed/added/deprecated items\"\n\t@echo \"  linkcheck  to check all external links for integrity\"\n\t@echo \"  doctest    to run all doctests embedded in the documentation (if enabled)\"\n\nclean:\n\t-rm -rf $(BUILDDIR)/*\n\nhtml:\n\t$(SPHINXBUILD) -b html $(ALLSPHINXOPTS) $(BUILDDIR)/html\n\t@echo\n\t@echo \"Build finished. The HTML pages are in $(BUILDDIR)/html.\"\n\ndirhtml:\n\t$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) $(BUILDDIR)/dirhtml\n\t@echo\n\t@echo \"Build finished. The HTML pages are in $(BUILDDIR)/dirhtml.\"\n\nsinglehtml:\n\t$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) $(BUILDDIR)/singlehtml\n\t@echo\n\t@echo \"Build finished. The HTML page is in $(BUILDDIR)/singlehtml.\"\n\npickle:\n\t$(SPHINXBUILD) -b pickle $(ALLSPHINXOPTS) $(BUILDDIR)/pickle\n\t@echo\n\t@echo \"Build finished; now you can process the pickle files.\"\n\njson:\n\t$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) $(BUILDDIR)/json\n\t@echo\n\t@echo \"Build finished; now you can process the JSON files.\"\n\nhtmlhelp:\n\t$(SPHINXBUILD) -b htmlhelp $(ALLSPHINXOPTS) $(BUILDDIR)/htmlhelp\n\t@echo\n\t@echo \"Build finished; now you can run HTML Help Workshop with the\" \\\n\t      \".hhp project file in $(BUILDDIR)/htmlhelp.\"\n\nqthelp:\n\t$(SPHINXBUILD) -b qthelp $(ALLSPHINXOPTS) $(BUILDDIR)/qthelp\n\t@echo\n\t@echo \"Build finished; now you can run \"qcollectiongenerator\" with the\" \\\n\t      \".qhcp project file in $(BUILDDIR)/qthelp, like this:\"\n\t@echo \"# qcollectiongenerator $(BUILDDIR)/qthelp/flask-admin.qhcp\"\n\t@echo \"To view the help file:\"\n\t@echo \"# assistant -collectionFile $(BUILDDIR)/qthelp/flask-admin.qhc\"\n\ndevhelp:\n\t$(SPHINXBUILD) -b devhelp $(ALLSPHINXOPTS) $(BUILDDIR)/devhelp\n\t@echo\n\t@echo \"Build finished.\"\n\t@echo \"To view the help file:\"\n\t@echo \"# mkdir -p $$HOME/.local/share/devhelp/flask-admin\"\n\t@echo \"# ln -s $(BUILDDIR)/devhelp $$HOME/.local/share/devhelp/flask-admin\"\n\t@echo \"# devhelp\"\n\nepub:\n\t$(SPHINXBUILD) -b epub $(ALLSPHINXOPTS) $(BUILDDIR)/epub\n\t@echo\n\t@echo \"Build finished. The epub file is in $(BUILDDIR)/epub.\"\n\nlatex:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo\n\t@echo \"Build finished; the LaTeX files are in $(BUILDDIR)/latex.\"\n\t@echo \"Run \\`make' in that directory to run these through (pdf)latex\" \\\n\t      \"(use \\`make latexpdf' here to do that automatically).\"\n\nlatexpdf:\n\t$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) $(BUILDDIR)/latex\n\t@echo \"Running LaTeX files through pdflatex...\"\n\t$(MAKE) -C $(BUILDDIR)/latex all-pdf\n\t@echo \"pdflatex finished; the PDF files are in $(BUILDDIR)/latex.\"\n\ntext:\n\t$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) $(BUILDDIR)/text\n\t@echo\n\t@echo \"Build finished. The text files are in $(BUILDDIR)/text.\"\n\nman:\n\t$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) $(BUILDDIR)/man\n\t@echo\n\t@echo \"Build finished. The manual pages are in $(BUILDDIR)/man.\"\n\ntexinfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo\n\t@echo \"Build finished. The Texinfo files are in $(BUILDDIR)/texinfo.\"\n\t@echo \"Run \\`make' in that directory to run these through makeinfo\" \\\n\t      \"(use \\`make info' here to do that automatically).\"\n\ninfo:\n\t$(SPHINXBUILD) -b texinfo $(ALLSPHINXOPTS) $(BUILDDIR)/texinfo\n\t@echo \"Running Texinfo files through makeinfo...\"\n\tmake -C $(BUILDDIR)/texinfo info\n\t@echo \"makeinfo finished; the Info files are in $(BUILDDIR)/texinfo.\"\n\ngettext:\n\t$(SPHINXBUILD) -b gettext $(I18NSPHINXOPTS) $(BUILDDIR)/locale\n\t@echo\n\t@echo \"Build finished. The message catalogs are in $(BUILDDIR)/locale.\"\n\nchanges:\n\t$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) $(BUILDDIR)/changes\n\t@echo\n\t@echo \"The overview file is in $(BUILDDIR)/changes.\"\n\nlinkcheck:\n\t$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) $(BUILDDIR)/linkcheck\n\t@echo\n\t@echo \"Link check complete; look for any errors in the above output \" \\\n\t      \"or in $(BUILDDIR)/linkcheck/output.txt.\"\n\ndoctest:\n\t$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) $(BUILDDIR)/doctest\n\t@echo \"Testing of doctests in the sources finished, look at the \" \\\n\t      \"results in $(BUILDDIR)/doctest/output.txt.\"\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.37109375,
          "content": "Flask-Admin includes some bundled software to ease installation.\n\nSelect2\n=======\n\nDistributed under `APLv2 <https://www.apache.org/licenses/LICENSE-2.0>`_.\n\nBootstrap\n=================\n\nv3.1.0 and subsequent versions distributed under `MIT <https://opensource.org/license/MIT>`_.\nVersions prior to v3.1.0 distributed under `APLv2 <https://www.apache.org/licenses/LICENSE-2.0>`_.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.06640625,
          "content": "# Flask-Admin\n\nFlask-Admin is now part of Pallets-Eco, an open source organization managed by the\nPallets team to facilitate community maintenance of Flask extensions. Please update\nyour references to `https://github.com/pallets-eco/flask-admin.git`.\n\n[![image](https://d322cqt584bo4o.cloudfront.net/flask-admin/localized.svg)](https://crowdin.com/project/flask-admin) [![image](https://github.com/pallets-eco/flask-admin/actions/workflows/tests.yaml/badge.svg?branch=master)](https://github.com/pallets-eco/flask-admin/actions/workflows/test.yaml)\n\n## Pallets Community Ecosystem\n\n> [!IMPORTANT]\\\n> This project is part of the Pallets Community Ecosystem. Pallets is the open\n> source organization that maintains Flask; Pallets-Eco enables community\n> maintenance of related projects. If you are interested in helping maintain\n> this project, please reach out on [the Pallets Discord server][discord].\n\n[discord]: https://discord.gg/pallets\n\n## Introduction\n\nFlask-Admin is a batteries-included, simple-to-use\n[Flask](https://flask.palletsprojects.com/) extension that lets you add admin\ninterfaces to Flask applications. It is inspired by the *django-admin*\npackage, but implemented in such a way that the developer has total\ncontrol over the look, feel, functionality and user experience of the resulting\napplication.\n\nOut-of-the-box, Flask-Admin plays nicely with various ORM\\'s, including\n\n-   [SQLAlchemy](https://www.sqlalchemy.org/)\n-   [pymongo](https://pymongo.readthedocs.io/)\n-   and [Peewee](https://github.com/coleifer/peewee).\n\nIt also boasts a simple file management interface and a [Redis\nclient](https://redis.io/) console.\n\nThe biggest feature of Flask-Admin is its flexibility. It aims to provide a\nset of simple tools that can be used to build admin interfaces of\nany complexity. To start off, you can create a very simple\napplication in no time, with auto-generated CRUD-views for each of your\nmodels. Then you can further customize those views and forms as\nthe need arises.\n\nFlask-Admin is an active project, well-tested and production-ready.\n\n## Examples\n\nSeveral usage examples are included in the */examples* folder. Please\nadd your own, or improve on the existing examples, and submit a\n*pull-request*.\n\nTo run the examples in your local environment:\n1. Clone the repository:\n\n    ```bash\n    git clone https://github.com/pallets-eco/flask-admin.git\n    cd flask-admin\n    ```\n2. Create and activate a virtual environment:\n\n    ```bash\n    # Windows:\n    python -m venv .venv\n    .venv\\Scripts\\activate\n\n    # Linux:\n    python3 -m venv .venv\n    source .venv/bin/activate\n    ```\n\n3. Navigate into the SQLAlchemy example folder:\n\n    ```bash\n    cd examples/sqla\n    ```\n\n4. Install requirements:\n\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n5. Run the application:\n\n    ```bash\n    python app.py\n    ```\n\n6. Check the Flask app running on <http://localhost:5000>.\n\n## Documentation\n\nFlask-Admin is extensively documented, you can find all of the\ndocumentation at <https://flask-admin.readthedocs.io/en/latest/>.\n\nThe docs are auto-generated from the *.rst* files in the */doc* folder.\nIf you come across any errors or if you think of anything else that\nshould be included, feel free to make the changes and submit a *pull-request*.\n\nTo build the docs in your local environment, from the project directory:\n\n    tox -e docs-html\n\n## Installation\n\nTo install Flask-Admin, simply:\n\n    pip install flask-admin\n\nOr alternatively, you can download the repository and install manually\nby doing:\n\n    git clone https://github.com/pallets-eco/flask-admin.git\n    cd flask-admin\n    pip install .\n\n## Tests\n\nTests are run with *pytest*. If you are not familiar with this package, you can find out more on [their website](https://pytest.org/).\n\nTo run the tests, from the project directory, simply run:\n\n    pip install --use-pep517 -r requirements/dev.txt\n    pytest\n\nYou should see output similar to:\n\n    .............................................\n    ----------------------------------------------------------------------\n    Ran 102 tests in 13.132s\n\n    OK\n\n**NOTE!** For all the tests to pass successfully, you\\'ll need Postgres (with\nthe postgis and hstore extension) & MongoDB to be running locally. You'll\nalso need *libgeos* available.\n\nFor Postgres:\n```bash\npsql postgres\n> CREATE DATABASE flask_admin_test;\n> # Connect to database \"flask_admin_test\":\n> \\c flask_admin_test;\n> CREATE EXTENSION postgis;\n> CREATE EXTENSION hstore;\n```\nIf you\\'re using Homebrew on MacOS, you might need this:\n\n```bash\n# Install postgis and geos\nbrew install postgis\nbrew install geos\n\n# Set up a PostgreSQL user\ncreateuser -s postgresql\nbrew services restart postgresql\n```\n\nYou can also run the tests on multiple environments using *tox*.\n\n## 3rd Party Stuff\n\nFlask-Admin is built with the help of\n[Bootstrap](https://getbootstrap.com/),\n[Select2](https://github.com/ivaynberg/select2) and\n[Bootswatch](https://bootswatch.com/).\n\nIf you want to localize your application, install the\n[Flask-Babel](https://pypi.python.org/pypi/Flask-Babel) package.\n\nYou can help improve Flask-Admin\\'s translations through Crowdin:\n<https://crowdin.com/project/flask-admin>\n"
        },
        {
          "name": "admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "babel",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flask_admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects.rst",
          "type": "blob",
          "size": 0.30859375,
          "content": "Notable projects using Flask-Admin\n----------------------------------\n\n * `Inventory Checkin <https://github.com/cbess/inventory-checkin>`_\n * `Parliamentary Monitoring Group (South Africa) <https://pmg.org.za/>`_\n\nIf you have open source project that uses Flask-Admin, send me a link and I will add it to the list.\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 5.3271484375,
          "content": "[project]\nname = \"Flask-Admin\"\nversion = \"2.0.0a3\"\ndescription = \"Simple and extensible admin interface framework for Flask\"\nreadme = \"README.md\"\nlicense = { file = \"LICENSE.txt\" }\nauthor = [{ name = \"Flask-Admin team\" }]\nmaintainers = [{ name = \"Pallets Ecosystem\", email = \"contact@palletsprojects.com\" }]\nclassifiers = [\n    'Development Status :: 4 - Beta',\n    'Environment :: Web Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: BSD License',\n    'Operating System :: OS Independent',\n    'Programming Language :: Python',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12',\n]\nrequires-python = \">=3.9\"\ndependencies = [\n    \"flask>=2.0\",\n    \"jinja2>=3.0\",\n    \"markupsafe>=2.0\",\n    \"werkzeug>=2.0\",\n    \"wtforms>=2.3\",\n]\n\n[project.optional-dependencies]\nsqlalchemy = [\n    \"flask-sqlalchemy>=3\",\n    \"sqlalchemy>=1.4\",\n]\nsqlalchemy-with-utils = [\n    \"Flask-Admin[sqlalchemy]\",\n    \"sqlalchemy_utils>=0.38.0\",\n    \"sqlalchemy-citext>=1.8.0\",\n    \"colour>=0.1.5\",\n    \"email_validator>=2\",\n    \"arrow>=0.13.0\",\n]\ngeoalchemy = [\n    \"Flask-Admin[sqlalchemy]\",\n    \"geoalchemy2>=0.14.0\",\n    \"shapely>=2\",\n]\npymongo = [\"pymongo>=3.7.0\"]\npeewee = [\n    \"peewee>=3.14.0\",\n    \"wtf-peewee>=3.0.4\"\n]\ns3 = [\"boto3>=1.33\"]\nazure-blob-storage = [\"azure-storage-blob<=3\"]  # TODO: update to v12+\nimages = [\"pillow>=10.0.0\"]\nexport = [\"tablib>=3.0.0\"]\nrediscli = [\"redis>=4.0.0\"]\ntranslation = [\"flask-babel>=3.0.1\"]\nall = [\n    \"Flask-Admin[sqlalchemy]\",\n    \"Flask-Admin[sqlalchemy-with-utils]\",\n    \"Flask-Admin[geoalchemy]\",\n    \"Flask-Admin[pymongo]\",\n    \"Flask-Admin[peewee]\",\n    \"Flask-Admin[s3]\",\n    \"Flask-Admin[azure-blob-storage]\",\n    \"Flask-Admin[images]\",\n    \"Flask-Admin[export]\",\n    \"Flask-Admin[rediscli]\",\n    \"Flask-Admin[translation]\",\n]\n\n[project.urls]\nDocumentation = \"https://flask-admin.readthedocs.io\"\nChanges = \"https://github.com/pallets-eco/flask-admin/releases/\"\nSource = \"https://github.com/pallets-eco/flask-admin/\"\nChat = \"https://discord.gg/pallets\"\n\n[build-system]\nrequires = [\"flit_core<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[tool.flit.module]\nname = \"flask_admin\"\n\n[tool.pytest.ini_options]\ntestpaths = [\"flask_admin/tests\"]\nmarkers = [\n    \"flask_babel: requires Flask-Babel to be installed\"\n]\nfilterwarnings = [\n    \"error\",\n    # TODO: remove the ignored deprecation warning when support for WTForms 3 has been added.\n    \"ignore:Flags should be stored in dicts and not in tuples. The next version of WTForms will abandon support for flags in tuples.:DeprecationWarning\",\n\n    # Werkzeug is responsible for the below deprecation warning; remove when they have updated their code.\n    \"default:ast\\\\.Str is deprecated and will be removed in Python 3\\\\.14:DeprecationWarning\",\n    \"default:Attribute s is deprecated and will be removed in Python 3\\\\.14:DeprecationWarning\",\n\n    # Flask is responsible for the below deprecation warning; remove when they have updated their code.\n    \"default:'pkgutil\\\\.get_loader' is deprecated and slated for removal in Python 3\\\\.14:DeprecationWarning\",\n    \"default:'pkgutil\\\\.find_loader' is deprecated and slated for removal in Python 3\\\\.14:DeprecationWarning\",\n\n    \"default:datetime\\\\.datetime\\\\.utcnow\\\\(\\\\) is deprecated and scheduled for removal in a future version:DeprecationWarning\",\n\n    # `flask.testing` accesses this attribute; remove when they have updated their code.\n    \"default:The '__version__' attribute is deprecated and will be removed in Werkzeug 3\\\\.1\\\\.:DeprecationWarning\",\n]\n\n[tool.coverage.run]\nbranch = true\nsource = [\"flask_admin\", \"tests\"]\n\n[tool.coverage.paths]\nsource = [\"flask_admin\", \"*/site-packages\"]\n\n[tool.mypy]\npython_version = \"3.9\"\nfiles = [\"flask_admin\"]\nshow_error_codes = true\npretty = true\nstrict = true\n\n# Strongly recommend enabling this one as soon as you can\ncheck_untyped_defs = false\n\n# These shouldn't be too much additional work, but may be tricky to\n# get passing if you use a lot of untyped libraries\ndisallow_subclassing_any = false\ndisallow_untyped_decorators = false\ndisallow_any_generics = false\n\n# These next few are various gradations of forcing use of type annotations\ndisallow_untyped_calls = false\ndisallow_incomplete_defs = false\ndisallow_untyped_defs = false\n\n# This one isn't too hard to get passing, but return on investment is lower\nno_implicit_reexport = false\n\n# This one can be tricky to get passing if you use a lot of untyped libraries\nwarn_return_any = false\n\n[[tool.mypy.overrides]]\nmodule = [\n    \"arrow\",\n    \"azure.*\",\n    \"bson.*\",\n    \"citext\",\n    \"colour\",\n    \"flask_babel\",\n    \"flask_wtf\",\n    \"gridfs\",\n    \"marker\",\n    \"playhouse.*\",\n    \"pymongo\",\n    \"sqlalchemy.*\",\n    \"sqlalchemy_utils\",\n    \"tablib\",\n    \"wtforms.*\",\n    \"wtfpeewee.*\",\n]\nignore_missing_imports = true\n\n[tool.pyright]\npythonVersion = \"3.9\"\ninclude = [\"flask_admin\", \"tests\"]\ntypeCheckingMode = \"basic\"\n\n[tool.ruff]\nsrc = [\"flask_admin\"]\nfix = true\nshow-fixes = true\noutput-format = \"full\"\n\n[tool.ruff.lint]\nselect = [\n    \"B\",  # flake8-bugbear\n    \"E\",  # pycodestyle error\n    \"F\",  # pyflakes\n    \"I\",  # isort\n    \"UP\",  # pyupgrade\n    \"W\",  # pycodestyle warning\n]\nignore-init-module-imports = true\n\n[tool.ruff.lint.isort]\nforce-single-line = true\norder-by-type = false\n"
        },
        {
          "name": "requirements-skip",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 2.2529296875,
          "content": "[tox]\nminversion = 4.0\nenvlist =\n    py3{9,10,11,12}\n    py3{9,12}-sqlalchemy1\n    py312-noflaskbabel  # only tested against latest of all configurations, sans flask-babel\n    py39-min\n    style\n    typing\n    docs\nskip_missing_interpreters = true\n\n[testenv]\npackage = wheel\nwheel_build_env = .pkg\nextras = all\nconstrain_package_deps = true\nuse_frozen_constraints = true\n# TODO: Remove SQLALCHEMY_SILENCE_UBER_WARNING when Flask-Admin is compatible with SQLAlchemy>=2.0.0\nsetenv =\n    SQLALCHEMY_SILENCE_UBER_WARNING = 1\n    AZURE_STORAGE_CONNECTION_STRING = DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;\ndeps =\n    sqlalchemy1: sqlalchemy<2\n    -r requirements/tests.txt\ncommands_pre =\n    noflaskbabel: pip uninstall -y flask-babel\ncommands =\n    pip freeze\n    pytest -v --tb=short --basetemp={envtmpdir} flask_admin/tests {posargs}\n\n[testenv:py39-min]\ndeps = -r requirements-skip/tests-min.txt\ncommands =\n    pip freeze\n    pytest -v --tb=short --basetemp={envtmpdir} flask_admin/tests -W 'default::DeprecationWarning' {posargs}\n\n[testenv:style]\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit run --all-files\n\n[testenv:typing]\ndeps = -r requirements/typing.txt\ncommands =\n    mypy --python-version 3.9\n    mypy --python-version 3.12\n\n[testenv:docs]\ndeps = -r requirements/docs.txt\n# commands = sphinx-build -E -W -b dirhtml doc doc/_build/dirhtml\n# TODO: Switch to the above command when docs have been migrated to use the Pallets theme.\ncommands = sphinx-build -b html -d build/doctrees doc build/html\n\n[testenv:update-pre_commit]\nlabels = update\ndeps = pre-commit\nskip_install = true\ncommands = pre-commit autoupdate -j4\n\n[testenv:update-requirements]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements\ncommands =\n    pip-compile build.in -q {posargs:-U}\n    pip-compile docs.in -q {posargs:-U}\n    pip-compile tests.in -q {posargs:-U}\n    pip-compile typing.in -q {posargs:-U}\n    pip-compile dev.in -q {posargs:-U}\n\n[testenv:update-requirements_skip]\nlabels = update\ndeps = pip-tools\nskip_install = true\nchange_dir = requirements-skip\ncommands =\n    pip-compile tests-min.in -q {posargs:-U}\n"
        }
      ]
    }
  ]
}