{
  "metadata": {
    "timestamp": 1736560720039,
    "page": 390,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "patroni/patroni",
      "stars": 6989,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6806640625,
          "content": "*.py[cod]\n\n# vi(m) swap files:\n*.sw?\n\n# C extensions\n*.so\n\n# Packages\n.cache/\n*.egg\n*.eggs\n*.egg-info\ndist\nbuild\neggs\nparts\nbin\nvar\nsdist\ndevelop-eggs\n.installed.cfg\nlib\nlib64\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage*\n.tox\nnosetests.xml\ncoverage.xml\nhtmlcov\njunit.xml\nfeatures/output*\ndummy\nresult.json\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\npgpass\nscm-source.json\n\n# Sphinx-generated documentation\ndocs/_build/\ndocs/build/\ndocs/source/_static/\ndocs/source/_templates/\ndocs/modules/\ndocs/pdf/\n\n# Pycharm IDE\n.idea/\n\n#VSCode IDE\n.vscode/\n\n# Virtual environment\nvenv*/\n\n# Default test data directory\ndata/\n\n# macOS\n**/.DS_Store\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.490234375,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n\nformats:\n  - epub\n  - pdf\n  - htmlzip\n\npython:\n  install:\n    - requirements: requirements.docs.txt\n    - requirements: requirements.txt\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.046875,
          "content": "# global owners\n*        @CyberDem0n @hughcapet\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 8.0361328125,
          "content": "## This Dockerfile is meant to aid in the building and debugging patroni whilst developing on your local machine\n## It has all the necessary components to play/debug with a single node appliance, running etcd\nARG PG_MAJOR=16\nARG COMPRESS=false\nARG PGHOME=/home/postgres\nARG PGDATA=$PGHOME/data\nARG LC_ALL=C.UTF-8\nARG LANG=C.UTF-8\n\nFROM postgres:$PG_MAJOR as builder\n\nARG PGHOME\nARG PGDATA\nARG LC_ALL\nARG LANG\n\nENV ETCDVERSION=3.3.13 CONFDVERSION=0.16.0\n\nRUN set -ex \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && echo 'APT::Install-Recommends \"0\";\\nAPT::Install-Suggests \"0\";' > /etc/apt/apt.conf.d/01norecommend \\\n    && apt-get update -y \\\n    # postgres:10 is based on debian, which has the patroni package. We will install all required dependencies\n    && apt-cache depends patroni | sed -n -e 's/.*Depends: \\(python3-.\\+\\)$/\\1/p' \\\n            | grep -Ev '^python3-(sphinx|etcd|consul|kazoo|kubernetes)' \\\n            | xargs apt-get install -y vim curl less jq locales haproxy sudo \\\n                            python3-etcd python3-kazoo python3-pip busybox \\\n                            net-tools iputils-ping dumb-init --fix-missing \\\n\\\n    # Cleanup all locales but en_US.UTF-8\n    && find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \\\n    && find /usr/share/i18n/locales/ -type f ! -name en_US ! -name en_GB ! -name i18n* ! -name iso14651_t1 ! -name iso14651_t1_common ! -name 'translit_*' -delete \\\n    && echo 'en_US.UTF-8 UTF-8' > /usr/share/i18n/SUPPORTED \\\n\\\n    # Make sure we have a en_US.UTF-8 locale available\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n\\\n    # haproxy dummy config\n    && echo 'global\\n        stats socket /run/haproxy/admin.sock mode 660 level admin' > /etc/haproxy/haproxy.cfg \\\n\\\n    # vim config\n    && echo 'syntax on\\nfiletype plugin indent on\\nset mouse-=a\\nautocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab' > /etc/vim/vimrc.local \\\n\\\n    # Prepare postgres/patroni/haproxy environment\n    && mkdir -p \"$PGHOME/.config/patroni\" /patroni /run/haproxy \\\n    && ln -s ../../postgres0.yml \"$PGHOME/.config/patroni/patronictl.yaml\" \\\n    && ln -s /patronictl.py /usr/local/bin/patronictl \\\n    && sed -i \"s|/var/lib/postgresql.*|$PGHOME:/bin/bash|\" /etc/passwd \\\n    && chown -R postgres:postgres /var/log \\\n\\\n    # Download etcd\n    && curl -sL \"https://github.com/coreos/etcd/releases/download/v$ETCDVERSION/etcd-v$ETCDVERSION-linux-$(dpkg --print-architecture).tar.gz\" \\\n            | tar xz -C /usr/local/bin --strip=1 --wildcards --no-anchored etcd etcdctl \\\n\\\n    && if [ $(dpkg --print-architecture) = 'arm64' ]; then \\\n        # Build confd\n        apt-get install -y git make \\\n        && curl -sL https://go.dev/dl/go1.20.4.linux-arm64.tar.gz | tar xz -C /usr/local go \\\n        && export GOROOT=/usr/local/go && export PATH=$PATH:$GOROOT/bin \\\n        && git clone --recurse-submodules https://github.com/kelseyhightower/confd.git \\\n        && make -C confd \\\n        && cp confd/bin/confd /usr/local/bin/confd \\\n        && rm -rf /confd /usr/local/go; \\\n    else \\\n        # Download confd\n        curl -sL \"https://github.com/kelseyhightower/confd/releases/download/v$CONFDVERSION/confd-$CONFDVERSION-linux-$(dpkg --print-architecture)\" \\\n            > /usr/local/bin/confd && chmod +x /usr/local/bin/confd; \\\n    fi \\\n\\\n    # Clean up all useless packages and some files\n    && apt-get purge -y --allow-remove-essential python3-pip gzip bzip2 util-linux e2fsprogs \\\n                libmagic1 bsdmainutils login ncurses-bin libmagic-mgc e2fslibs bsdutils \\\n                exim4-config gnupg-agent dirmngr \\\n                git make \\\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/* \\\n        /root/.cache \\\n        /var/cache/debconf/* \\\n        /etc/rc?.d \\\n        /etc/systemd \\\n        /docker-entrypoint* \\\n        /sbin/pam* \\\n        /sbin/swap* \\\n        /sbin/unix* \\\n        /usr/local/bin/gosu \\\n        /usr/sbin/[acgipr]* \\\n        /usr/sbin/*user* \\\n        /usr/share/doc* \\\n        /usr/share/man \\\n        /usr/share/info \\\n        /usr/share/i18n/locales/translit_hangul \\\n        /usr/share/locale/?? \\\n        /usr/share/locale/??_?? \\\n        /usr/share/postgresql/*/man \\\n        /usr/share/postgresql-common/pg_wrapper \\\n        /usr/share/vim/vim*/doc \\\n        /usr/share/vim/vim*/lang \\\n        /usr/share/vim/vim*/tutor \\\n#        /var/lib/dpkg/info/* \\\n    && find /usr/bin -xtype l -delete \\\n    && find /var/log -type f -exec truncate --size 0 {} \\; \\\n    && find /usr/lib/python3/dist-packages -name '*test*' | xargs rm -fr \\\n    && find /lib/$(uname -m)-linux-gnu/security -type f ! -name pam_env.so ! -name pam_permit.so ! -name pam_unix.so -delete\n\n# perform compression if it is necessary\nARG COMPRESS\nRUN if [ \"$COMPRESS\" = \"true\" ]; then \\\n        set -ex \\\n        # Allow certain sudo commands from postgres\n        && echo 'postgres ALL=(ALL) NOPASSWD: /bin/tar xpJf /a.tar.xz -C /, /bin/rm /a.tar.xz, /bin/ln -snf dash /bin/sh' >> /etc/sudoers \\\n        && ln -snf busybox /bin/sh \\\n        && arch=$(uname -m) \\\n        && darch=$(uname -m | sed 's/_/-/') \\\n        && files=\"/bin/sh /usr/bin/sudo /usr/lib/sudo/sudoers.so /lib/$arch-linux-gnu/security/pam_*.so\" \\\n        && libs=\"$(ldd $files | awk '{print $3;}' | grep '^/' | sort -u) /lib/ld-linux-$darch.so.* /lib/$arch-linux-gnu/ld-linux-$darch.so.* /lib/$arch-linux-gnu/libnsl.so.* /lib/$arch-linux-gnu/libnss_compat.so.* /lib/$arch-linux-gnu/libnss_files.so.*\" \\\n        && (echo /var/run $files $libs | tr ' ' '\\n' && realpath $files $libs) | sort -u | sed 's/^\\///' > /exclude \\\n        && find /etc/alternatives -xtype l -delete \\\n        && save_dirs=\"usr lib var bin sbin etc/ssl etc/init.d etc/alternatives etc/apt\" \\\n        && XZ_OPT=-e9v tar -X /exclude -cpJf a.tar.xz $save_dirs \\\n        # we call \"cat /exclude\" to avoid including files from the $save_dirs that are also among\n        # the exceptions listed in the /exclude, as \"uniq -u\" eliminates all non-unique lines.\n        # By calling \"cat /exclude\" a second time we guarantee that there will be at least two lines\n        # for each exception and therefore they will be excluded from the output passed to 'rm'.\n        && /bin/busybox sh -c \"(find $save_dirs -not -type d && cat /exclude /exclude && echo exclude) | sort | uniq -u | xargs /bin/busybox rm\" \\\n        && /bin/busybox --install -s \\\n        && /bin/busybox sh -c \"find $save_dirs -type d -depth -exec rmdir -p {} \\; 2> /dev/null\"; \\\n    else \\\n        /bin/busybox --install -s; \\\n    fi\n\nFROM scratch\nCOPY --from=builder / /\n\nLABEL maintainer=\"Alexander Kukushkin <akukushkin@microsoft.com>\"\n\nARG PG_MAJOR\nARG COMPRESS\nARG PGHOME\nARG PGDATA\nARG LC_ALL\nARG LANG\n\nARG PGBIN=/usr/lib/postgresql/$PG_MAJOR/bin\n\nENV LC_ALL=$LC_ALL LANG=$LANG EDITOR=/usr/bin/editor\nENV PGDATA=$PGDATA PATH=$PATH:$PGBIN\nENV ETCDCTL_API=3\n\nCOPY patroni /patroni/\nCOPY extras/confd/conf.d/haproxy.toml /etc/confd/conf.d/\nCOPY extras/confd/templates/haproxy.tmpl /etc/confd/templates/\nCOPY patroni*.py docker/entrypoint.sh /\nCOPY postgres?.yml $PGHOME/\n\nWORKDIR $PGHOME\n\nRUN sed -i 's/env python/&3/' /patroni*.py \\\n    # \"fix\" patroni configs\n    && sed -i 's/^  listen: 127.0.0.1/  listen: 0.0.0.0/' postgres?.yml \\\n    && sed -i \"s|^\\(  data_dir: \\).*|\\1$PGDATA|\" postgres?.yml \\\n    && sed -i \"s|^#\\(  bin_dir: \\).*|\\1$PGBIN|\" postgres?.yml \\\n    && sed -i 's/^  - encoding: UTF8/  - locale: en_US.UTF-8\\n&/' postgres?.yml \\\n    && sed -i 's/^\\(scope\\|name\\|etcd\\|  host\\|  authentication\\|  connect_address\\|  parameters\\):/#&/' postgres?.yml \\\n    && sed -i 's/^    \\(replication\\|superuser\\|rewind\\|unix_socket_directories\\|\\(\\(  \\)\\{0,1\\}\\(username\\|password\\)\\)\\):/#&/' postgres?.yml \\\n    && sed -i 's/^      parameters:/&\\n        max_connections: 100/'  postgres?.yml \\\n    && sed -i 's/^      pg_hba:/&\\n      - local all all trust/' postgres?.yml \\\n    && sed -i 's/^\\(.*\\) \\(.*\\) md5/\\1 all md5/' postgres?.yml \\\n    && if [ \"$COMPRESS\" = \"true\" ]; then chmod u+s /usr/bin/sudo; fi \\\n    && chmod +s /bin/ping \\\n    && chown -R postgres:postgres \"$PGHOME\" /run /etc/haproxy\n\nUSER postgres\n\nENTRYPOINT [\"/bin/sh\", \"/entrypoint.sh\"]\n"
        },
        {
          "name": "Dockerfile.citus",
          "type": "blob",
          "size": 10.5634765625,
          "content": "## This Dockerfile is meant to aid in the building and debugging patroni whilst developing on your local machine\n## It has all the necessary components to play/debug with a single node appliance, running etcd\nARG PG_MAJOR=16\nARG COMPRESS=false\nARG PGHOME=/home/postgres\nARG PGDATA=$PGHOME/data\nARG LC_ALL=C.UTF-8\nARG LANG=C.UTF-8\n\nFROM postgres:$PG_MAJOR as builder\n\nARG PGHOME\nARG PGDATA\nARG LC_ALL\nARG LANG\n\nENV ETCDVERSION=3.3.13 CONFDVERSION=0.16.0\n\nRUN set -ex \\\n    && export DEBIAN_FRONTEND=noninteractive \\\n    && echo 'APT::Install-Recommends \"0\";\\nAPT::Install-Suggests \"0\";' > /etc/apt/apt.conf.d/01norecommend \\\n    && apt-get update -y \\\n    # postgres:PG_MAJOR is based on debian, which has the patroni package. We will install all required dependencies\n    && apt-cache depends patroni | sed -n -e 's/.*Depends: \\(python3-.\\+\\)$/\\1/p' \\\n            | grep -Ev '^python3-(sphinx|etcd|consul|kazoo|kubernetes)' \\\n            | xargs apt-get install -y vim curl less jq locales haproxy sudo \\\n                            python3-etcd python3-kazoo python3-pip busybox \\\n                            net-tools iputils-ping lsb-release dumb-init --fix-missing \\\n    && if [ $(dpkg --print-architecture) = 'arm64' ]; then \\\n        apt-get install -y postgresql-server-dev-$PG_MAJOR \\\n                           git gcc make autoconf \\\n                           libc6-dev flex libcurl4-gnutls-dev \\\n                           libicu-dev libkrb5-dev liblz4-dev \\\n                           libpam0g-dev libreadline-dev libselinux1-dev\\\n                           libssl-dev libxslt1-dev libzstd-dev uuid-dev \\\n        && git clone -b \"main\" https://github.com/citusdata/citus.git \\\n        && MAKEFLAGS=\"-j $(grep -c ^processor /proc/cpuinfo)\" \\\n        && cd citus && ./configure && make install && cd ../ && rm -rf /citus; \\\n    else \\\n        echo \"deb [signed-by=/etc/apt/trusted.gpg.d/citusdata_community.gpg] https://packagecloud.io/citusdata/community/debian/ $(lsb_release -cs) main\" > /etc/apt/sources.list.d/citusdata_community.list \\\n        && curl -sL https://packagecloud.io/citusdata/community/gpgkey | gpg --dearmor > /etc/apt/trusted.gpg.d/citusdata_community.gpg \\\n        && apt-get update -y \\\n        && apt-get -y install postgresql-$PG_MAJOR-citus-12.1; \\\n    fi \\\n\\\n    # Cleanup all locales but en_US.UTF-8\n    && find /usr/share/i18n/charmaps/ -type f ! -name UTF-8.gz -delete \\\n    && find /usr/share/i18n/locales/ -type f ! -name en_US ! -name en_GB ! -name i18n* ! -name iso14651_t1 ! -name iso14651_t1_common ! -name 'translit_*' -delete \\\n    && echo 'en_US.UTF-8 UTF-8' > /usr/share/i18n/SUPPORTED \\\n\\\n    # Make sure we have a en_US.UTF-8 locale available\n    && localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 \\\n\\\n    # haproxy dummy config\n    && echo 'global\\n        stats socket /run/haproxy/admin.sock mode 660 level admin' > /etc/haproxy/haproxy.cfg \\\n\\\n    # vim config\n    && echo 'syntax on\\nfiletype plugin indent on\\nset mouse-=a\\nautocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab' > /etc/vim/vimrc.local \\\n\\\n    # Prepare postgres/patroni/haproxy environment\n    && mkdir -p $PGHOME/.config/patroni /patroni /run/haproxy \\\n    && ln -s ../../postgres0.yml $PGHOME/.config/patroni/patronictl.yaml \\\n    && ln -s /patronictl.py /usr/local/bin/patronictl \\\n    && sed -i \"s|/var/lib/postgresql.*|$PGHOME:/bin/bash|\" /etc/passwd \\\n    && chown -R postgres:postgres /var/log \\\n\\\n    # Download etcd\n    && curl -sL https://github.com/coreos/etcd/releases/download/v${ETCDVERSION}/etcd-v${ETCDVERSION}-linux-$(dpkg --print-architecture).tar.gz \\\n            | tar xz -C /usr/local/bin --strip=1 --wildcards --no-anchored etcd etcdctl \\\n\\\n    && if [ $(dpkg --print-architecture) = 'arm64' ]; then \\\n        # Build confd\n        curl -sL https://go.dev/dl/go1.20.4.linux-arm64.tar.gz | tar xz -C /usr/local go \\\n        && export GOROOT=/usr/local/go && export PATH=$PATH:$GOROOT/bin \\\n        && git clone --recurse-submodules https://github.com/kelseyhightower/confd.git \\\n        && make -C confd \\\n        && cp confd/bin/confd /usr/local/bin/confd \\\n        && rm -rf /confd /usr/local/go; \\\n    else \\\n        # Download confd\n        curl -sL \"https://github.com/kelseyhightower/confd/releases/download/v$CONFDVERSION/confd-$CONFDVERSION-linux-$(dpkg --print-architecture)\" \\\n            > /usr/local/bin/confd && chmod +x /usr/local/bin/confd; \\\n    fi \\\n    # Prepare client cert for HAProxy\n    && cat /etc/ssl/private/ssl-cert-snakeoil.key  /etc/ssl/certs/ssl-cert-snakeoil.pem > /etc/ssl/private/ssl-cert-snakeoil.crt \\\n\\\n    # Clean up all useless packages and some files\n    && apt-get purge -y --allow-remove-essential python3-pip gzip bzip2 util-linux e2fsprogs \\\n                libmagic1 bsdmainutils login ncurses-bin libmagic-mgc e2fslibs bsdutils \\\n                exim4-config gnupg-agent dirmngr \\\n                postgresql-server-dev-$PG_MAJOR git gcc make autoconf \\\n                libc6-dev flex libicu-dev libkrb5-dev liblz4-dev \\\n                libpam0g-dev libreadline-dev libselinux1-dev libssl-dev libxslt1-dev libzstd-dev uuid-dev \\\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/* \\\n        /root/.cache \\\n        /var/cache/debconf/* \\\n        /etc/rc?.d \\\n        /etc/systemd \\\n        /docker-entrypoint* \\\n        /sbin/pam* \\\n        /sbin/swap* \\\n        /sbin/unix* \\\n        /usr/local/bin/gosu \\\n        /usr/sbin/[acgipr]* \\\n        /usr/sbin/*user* \\\n        /usr/share/doc* \\\n        /usr/share/man \\\n        /usr/share/info \\\n        /usr/share/i18n/locales/translit_hangul \\\n        /usr/share/locale/?? \\\n        /usr/share/locale/??_?? \\\n        /usr/share/postgresql/*/man \\\n        /usr/share/postgresql-common/pg_wrapper \\\n        /usr/share/vim/vim*/doc \\\n        /usr/share/vim/vim*/lang \\\n        /usr/share/vim/vim*/tutor \\\n#        /var/lib/dpkg/info/* \\\n    && find /usr/bin -xtype l -delete \\\n    && find /var/log -type f -exec truncate --size 0 {} \\; \\\n    && find /usr/lib/python3/dist-packages -name '*test*' | xargs rm -fr \\\n    && find /lib/$(uname -m)-linux-gnu/security -type f ! -name pam_env.so ! -name pam_permit.so ! -name pam_unix.so -delete\n\n# perform compression if it is necessary\nARG COMPRESS\nRUN if [ \"$COMPRESS\" = \"true\" ]; then \\\n        set -ex \\\n        # Allow certain sudo commands from postgres\n        && echo 'postgres ALL=(ALL) NOPASSWD: /bin/tar xpJf /a.tar.xz -C /, /bin/rm /a.tar.xz, /bin/ln -snf dash /bin/sh' >> /etc/sudoers \\\n        && ln -snf busybox /bin/sh \\\n        && arch=$(uname -m) \\\n        && darch=$(uname -m | sed 's/_/-/') \\\n        && files=\"/bin/sh /usr/bin/sudo /usr/lib/sudo/sudoers.so /lib/$arch-linux-gnu/security/pam_*.so\" \\\n        && libs=\"$(ldd $files | awk '{print $3;}' | grep '^/' | sort -u) /lib/ld-linux-$darch.so.* /lib/$arch-linux-gnu/ld-linux-$darch.so.* /lib/$arch-linux-gnu/libnsl.so.* /lib/$arch-linux-gnu/libnss_compat.so.* /lib/$arch-linux-gnu/libnss_files.so.*\" \\\n        && (echo /var/run $files $libs | tr ' ' '\\n' && realpath $files $libs) | sort -u | sed 's/^\\///' > /exclude \\\n        && find /etc/alternatives -xtype l -delete \\\n        && save_dirs=\"usr lib var bin sbin etc/ssl etc/init.d etc/alternatives etc/apt\" \\\n        && XZ_OPT=-e9v tar -X /exclude -cpJf a.tar.xz $save_dirs \\\n        # we call \"cat /exclude\" to avoid including files from the $save_dirs that are also among\n        # the exceptions listed in the /exclude, as \"uniq -u\" eliminates all non-unique lines.\n        # By calling \"cat /exclude\" a second time we guarantee that there will be at least two lines\n        # for each exception and therefore they will be excluded from the output passed to 'rm'.\n        && /bin/busybox sh -c \"(find $save_dirs -not -type d && cat /exclude /exclude && echo exclude) | sort | uniq -u | xargs /bin/busybox rm\" \\\n        && /bin/busybox --install -s \\\n        && /bin/busybox sh -c \"find $save_dirs -type d -depth -exec rmdir -p {} \\; 2> /dev/null\"; \\\n    else \\\n        /bin/busybox --install -s; \\\n    fi\n\nFROM scratch\nCOPY --from=builder / /\n\nLABEL maintainer=\"Alexander Kukushkin <akukushkin@microsoft.com>\"\n\nARG PG_MAJOR\nARG COMPRESS\nARG PGHOME\nARG PGDATA\nARG LC_ALL\nARG LANG\n\nARG PGBIN=/usr/lib/postgresql/$PG_MAJOR/bin\n\nENV LC_ALL=$LC_ALL LANG=$LANG EDITOR=/usr/bin/editor\nENV PGDATA=$PGDATA PATH=$PATH:$PGBIN\nENV ETCDCTL_API=3\n\nCOPY patroni /patroni/\nCOPY extras/confd/conf.d/haproxy.toml /etc/confd/conf.d/\nCOPY extras/confd/templates/haproxy-citus.tmpl /etc/confd/templates/haproxy.tmpl\nCOPY patroni*.py docker/entrypoint.sh /\nCOPY postgres?.yml $PGHOME/\n\nWORKDIR $PGHOME\n\nRUN sed -i 's/env python/&3/' /patroni*.py \\\n    # \"fix\" patroni configs\n    && sed -i 's/^  listen: 127.0.0.1/  listen: 0.0.0.0/' postgres?.yml \\\n    && sed -i \"s|^\\(  data_dir: \\).*|\\1$PGDATA|\" postgres?.yml \\\n    && sed -i \"s|^#\\(  bin_dir: \\).*|\\1$PGBIN|\" postgres?.yml \\\n    && sed -i 's/^  - encoding: UTF8/  - locale: en_US.UTF-8\\n&/' postgres?.yml \\\n    && sed -i 's/^scope:/log:\\n  loggers:\\n    patroni.postgresql.mpp.citus: DEBUG\\n#&/' postgres?.yml \\\n    && sed -i 's/^\\(name\\|etcd\\|  host\\|  authentication\\|  connect_address\\|  parameters\\):/#&/' postgres?.yml \\\n    && sed -i 's/^    \\(replication\\|superuser\\|rewind\\|unix_socket_directories\\|\\(\\(  \\)\\{0,1\\}\\(username\\|password\\)\\)\\):/#&/' postgres?.yml \\\n    && sed -i 's/^postgresql:/&\\n  basebackup:\\n    checkpoint: fast/' postgres?.yml \\\n    && sed -i 's|^      parameters:|&\\n        max_connections: 100\\n        shared_buffers: 16MB\\n        ssl: \"on\"\\n        ssl_ca_file: /etc/ssl/certs/ssl-cert-snakeoil.pem\\n        ssl_cert_file: /etc/ssl/certs/ssl-cert-snakeoil.pem\\n        ssl_key_file: /etc/ssl/private/ssl-cert-snakeoil.key\\n        citus.node_conninfo: \"sslrootcert=/etc/ssl/certs/ssl-cert-snakeoil.pem sslkey=/etc/ssl/private/ssl-cert-snakeoil.key sslcert=/etc/ssl/certs/ssl-cert-snakeoil.pem sslmode=verify-ca\"|'  postgres?.yml \\\n    && sed -i 's/^      pg_hba:/&\\n      - local all all trust/' postgres?.yml \\\n    && sed -i 's/^\\(.*\\) \\(.*\\) \\(.*\\) \\(.*\\) \\(.*\\) md5.*$/\\1 hostssl \\3 \\4 all md5 clientcert=verify-ca/' postgres?.yml \\\n    && sed -i 's/^#\\(ctl\\|  certfile\\|  keyfile\\)/\\1/' postgres?.yml \\\n    && sed -i 's|^#  cafile: .*$|  verify_client: required\\n  cafile: /etc/ssl/certs/ssl-cert-snakeoil.pem|' postgres?.yml \\\n    && sed -i 's|^#  cacert: .*$|  cacert: /etc/ssl/certs/ssl-cert-snakeoil.pem|' postgres?.yml \\\n    && sed -i 's/^#  insecure: .*/  insecure: on/' postgres?.yml \\\n    # client cert for HAProxy to access Patroni REST API\n    && if [ \"$COMPRESS\" = \"true\" ]; then chmod u+s /usr/bin/sudo; fi \\\n    && chmod +s /bin/ping \\\n    && chown -R postgres:postgres $PGHOME /run /etc/haproxy\n\nUSER postgres\n\nENTRYPOINT [\"/bin/sh\", \"/entrypoint.sh\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.08203125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2024 Compose, Zalando SE, Patroni Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.087890625,
          "content": "Alexander Kukushkin <akukushkin@microsoft.com>\nPolina Bungina <polina.bungina@zalando.de>\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.0654296875,
          "content": "include requirements*\ninclude *.rst\nrecursive-include patroni *.py\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 8.4150390625,
          "content": "|Tests Status| |Coverage Status|\n\nPatroni: A Template for PostgreSQL HA with ZooKeeper, etcd or Consul\n--------------------------------------------------------------------\n\nYou can find a version of this documentation that is searchable and also easier to navigate at `patroni.readthedocs.io <https://patroni.readthedocs.io>`__.\n\n\nThere are many ways to run high availability with PostgreSQL; for a list, see the `PostgreSQL Documentation <https://wiki.postgresql.org/wiki/Replication,_Clustering,_and_Connection_Pooling>`__.\n\nPatroni is a template for high availability (HA) PostgreSQL solutions using Python. For maximum accessibility, Patroni supports a variety of distributed configuration stores like `ZooKeeper <https://zookeeper.apache.org/>`__, `etcd <https://github.com/coreos/etcd>`__, `Consul <https://github.com/hashicorp/consul>`__ or `Kubernetes <https://kubernetes.io>`__. Database engineers, DBAs, DevOps engineers, and SREs who are looking to quickly deploy HA PostgreSQL in datacenters - or anywhere else - will hopefully find it useful.\n\nWe call Patroni a \"template\" because it is far from being a one-size-fits-all or plug-and-play replication system. It will have its own caveats. Use wisely.\n\nCurrently supported PostgreSQL versions: 9.3 to 17.\n\n**Note to Citus users**: Starting from 3.0 Patroni nicely integrates with the `Citus <https://github.com/citusdata/citus>`__ database extension to Postgres. Please check the `Citus support page <https://github.com/patroni/patroni/blob/master/docs/citus.rst>`__ in the Patroni documentation for more info about how to use Patroni high availability together with a Citus distributed cluster.\n\n**Note to Kubernetes users**: Patroni can run natively on top of Kubernetes. Take a look at the `Kubernetes <https://github.com/patroni/patroni/blob/master/docs/kubernetes.rst>`__ chapter of the Patroni documentation.\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n=================\nHow Patroni Works\n=================\n\nPatroni (formerly known as Zalando's Patroni) originated as a fork of `Governor <https://github.com/compose/governor>`__, the project from Compose. It includes plenty of new features.\n\nFor additional background info, see:\n\n* `Elephants on Automatic: HA Clustered PostgreSQL with Helm <https://www.youtube.com/watch?v=CftcVhFMGSY>`_, talk by Josh Berkus and Oleksii Kliukin at KubeCon Berlin 2017\n* `PostgreSQL HA with Kubernetes and Patroni <https://www.youtube.com/watch?v=iruaCgeG7qs>`__, talk by Josh Berkus at KubeCon 2016 (video)\n* `Feb. 2016 Zalando Tech blog post <https://engineering.zalando.com/posts/2016/02/zalandos-patroni-a-template-for-high-availability-postgresql.html>`__\n\n==================\nDevelopment Status\n==================\n\nPatroni is in active development and accepts contributions. See our `Contributing <https://github.com/patroni/patroni/blob/master/docs/contributing_guidelines.rst>`__ section below for more details.\n\nWe report new releases information `here <https://github.com/patroni/patroni/releases>`__.\n\n=========\nCommunity\n=========\n\nThere are two places to connect with the Patroni community: `on github <https://github.com/patroni/patroni>`__, via Issues and PRs, and on channel `#patroni <https://postgresteam.slack.com/archives/C9XPYG92A>`__ in the `PostgreSQL Slack <https://pgtreats.info/slack-invite>`__.  If you're using Patroni, or just interested, please join us.\n\n===================================\nTechnical Requirements/Installation\n===================================\n\n**Pre-requirements for Mac OS**\n\nTo install requirements on a Mac, run the following:\n\n::\n\n    brew install postgresql etcd haproxy libyaml python\n\n**Psycopg**\n\nStarting from `psycopg2-2.8 <http://initd.org/psycopg/articles/2019/04/04/psycopg-28-released/>`__ the binary version of psycopg2 will no longer be installed by default. Installing it from the source code requires C compiler and postgres+python dev packages.\nSince in the python world it is not possible to specify dependency as ``psycopg2 OR psycopg2-binary`` you will have to decide how to install it.\n\nThere are a few options available:\n\n1. Use the package manager from your distro\n\n::\n\n    sudo apt-get install python3-psycopg2  # install psycopg2 module on Debian/Ubuntu\n    sudo yum install python3-psycopg2      # install psycopg2 on RedHat/Fedora/CentOS\n\n2. Specify one of `psycopg`, `psycopg2`, or `psycopg2-binary` in the list of dependencies when installing Patroni with pip (see below).\n\n\n**General installation for pip**\n\nPatroni can be installed with pip:\n\n::\n\n    pip install patroni[dependencies]\n\nwhere dependencies can be either empty, or consist of one or more of the following:\n\netcd or etcd3\n    `python-etcd` module in order to use Etcd as DCS\nconsul\n    `py-consul` module in order to use Consul as DCS\nzookeeper\n    `kazoo` module in order to use Zookeeper as DCS\nexhibitor\n    `kazoo` module in order to use Exhibitor as DCS (same dependencies as for Zookeeper)\nkubernetes\n    `kubernetes` module in order to use Kubernetes as DCS in Patroni\nraft\n    `pysyncobj` module in order to use python Raft implementation as DCS\naws\n    `boto3` in order to use AWS callbacks\nall\n    all of the above (except psycopg family)\npsycopg3\n    `psycopg[binary]>=3.0.0` module\npsycopg2\n    `psycopg2>=2.5.4` module\npsycopg2-binary\n    `psycopg2-binary` module\n\nFor example, the command in order to install Patroni together with psycopg3, dependencies for Etcd as a DCS, and AWS callbacks is:\n\n::\n\n    pip install patroni[psycopg3,etcd3,aws]\n\nNote that external tools to call in the replica creation or custom bootstrap scripts (i.e. WAL-E) should be installed independently of Patroni.\n\n=======================\nRunning and Configuring\n=======================\n\nTo get started, do the following from different terminals:\n::\n\n    > etcd --data-dir=data/etcd --enable-v2=true\n    > ./patroni.py postgres0.yml\n    > ./patroni.py postgres1.yml\n\nYou will then see a high-availability cluster start up. Test different settings in the YAML files to see how the cluster's behavior changes. Kill some of the components to see how the system behaves.\n\nAdd more ``postgres*.yml`` files to create an even larger cluster.\n\nPatroni provides an `HAProxy <http://www.haproxy.org/>`__ configuration, which will give your application a single endpoint for connecting to the cluster's leader. To configure,\nrun:\n\n::\n\n    > haproxy -f haproxy.cfg\n\n::\n\n    > psql --host 127.0.0.1 --port 5000 postgres\n\n==================\nYAML Configuration\n==================\n\nGo `here <https://github.com/patroni/patroni/blob/master/docs/dynamic_configuration.rst>`__ for comprehensive information about settings for etcd, consul, and ZooKeeper. And for an example, see `postgres0.yml <https://github.com/patroni/patroni/blob/master/postgres0.yml>`__.\n\n=========================\nEnvironment Configuration\n=========================\n\nGo `here <https://github.com/patroni/patroni/blob/master/docs/ENVIRONMENT.rst>`__ for comprehensive information about configuring(overriding) settings via environment variables.\n\n===================\nReplication Choices\n===================\n\nPatroni uses Postgres' streaming replication, which is asynchronous by default. Patroni's asynchronous replication configuration allows for ``maximum_lag_on_failover`` settings. This setting ensures failover will not occur if a follower is more than a certain number of bytes behind the leader. This setting should be increased or decreased based on business requirements. It's also possible to use synchronous replication for better durability guarantees. See `replication modes documentation <https://github.com/patroni/patroni/blob/master/docs/replication_modes.rst>`__ for details.\n\n======================================\nApplications Should Not Use Superusers\n======================================\n\nWhen connecting from an application, always use a non-superuser. Patroni requires access to the database to function properly. By using a superuser from an application, you can potentially use the entire connection pool, including the connections reserved for superusers, with the ``superuser_reserved_connections`` setting. If Patroni cannot access the Primary because the connection pool is full, behavior will be undesirable.\n\n.. |Tests Status| image:: https://github.com/patroni/patroni/actions/workflows/tests.yaml/badge.svg\n   :target: https://github.com/patroni/patroni/actions/workflows/tests.yaml?query=branch%3Amaster\n.. |Coverage Status| image:: https://coveralls.io/repos/patroni/patroni/badge.svg?branch=master\n   :target: https://coveralls.io/github/patroni/patroni?branch=master\n"
        },
        {
          "name": "docker-compose-citus.yml",
          "type": "blob",
          "size": 4.359375,
          "content": "# docker compose file for running a Citus cluster\n# with 3-node etcd v3 cluster as the DCS and one haproxy node.\n# The Citus cluster has a coordinator (3 nodes)\n# and two worker clusters (2 nodes).\n#\n# Before starting it up you need to build the docker image:\n# $ docker build -f Dockerfile.citus -t patroni-citus .\n# The cluster could be started as:\n# $ docker-compose -f docker-compose-citus.yml up -d\n# You can read more about it in the:\n# https://github.com/patroni/patroni/blob/master/docker/README.md#citus-cluster\nversion: \"2\"\n\nnetworks:\n    demo:\n\nservices:\n    etcd1: &etcd\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        environment:\n            ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380\n            ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379\n            ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380\n            ETCD_INITIAL_CLUSTER_STATE: new\n            ETCD_INITIAL_CLUSTER_TOKEN: tutorial\n            ETCD_UNSUPPORTED_ARCH: arm64\n        container_name: demo-etcd1\n        hostname: etcd1\n        command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380\n\n    etcd2:\n        <<: *etcd\n        container_name: demo-etcd2\n        hostname: etcd2\n        command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380\n\n    etcd3:\n        <<: *etcd\n        container_name: demo-etcd3\n        hostname: etcd3\n        command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380\n\n    haproxy:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: haproxy\n        container_name: demo-haproxy\n        ports:\n            - \"5000:5000\"  # Access to the coorinator primary\n            - \"5001:5001\"  # Load-balancing across workers primaries\n        command: haproxy\n        environment: &haproxy_env\n            ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379\n            PATRONI_ETCD3_HOSTS: \"'etcd1:2379','etcd2:2379','etcd3:2379'\"\n            PATRONI_SCOPE: demo\n            PATRONI_CITUS_GROUP: 0\n            PATRONI_CITUS_DATABASE: citus\n            PGSSLMODE: verify-ca\n            PGSSLKEY: /etc/ssl/private/ssl-cert-snakeoil.key\n            PGSSLCERT: /etc/ssl/certs/ssl-cert-snakeoil.pem\n            PGSSLROOTCERT: /etc/ssl/certs/ssl-cert-snakeoil.pem\n\n    coord1:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: coord1\n        container_name: demo-coord1\n        environment: &coord_env\n            <<: *haproxy_env\n            PATRONI_NAME: coord1\n            PATRONI_CITUS_GROUP: 0\n\n    coord2:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: coord2\n        container_name: demo-coord2\n        environment:\n            <<: *coord_env\n            PATRONI_NAME: coord2\n\n    coord3:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: coord3\n        container_name: demo-coord3\n        environment:\n            <<: *coord_env\n            PATRONI_NAME: coord3\n\n\n    work1-1:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: work1-1\n        container_name: demo-work1-1\n        environment: &work1_env\n            <<: *haproxy_env\n            PATRONI_NAME: work1-1\n            PATRONI_CITUS_GROUP: 1\n\n    work1-2:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: work1-2\n        container_name: demo-work1-2\n        environment:\n            <<: *work1_env\n            PATRONI_NAME: work1-2\n\n\n    work2-1:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: work2-1\n        container_name: demo-work2-1\n        environment: &work2_env\n            <<: *haproxy_env\n            PATRONI_NAME: work2-1\n            PATRONI_CITUS_GROUP: 2\n\n    work2-2:\n        image: ${PATRONI_TEST_IMAGE:-patroni-citus}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: work2-2\n        container_name: demo-work2-2\n        environment:\n            <<: *work2_env\n            PATRONI_NAME: work2-2\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.6298828125,
          "content": "# docker compose file for running a 3-node PostgreSQL cluster\n# with 3-node etcd cluster as the DCS and one haproxy node\n#\n# requires a patroni image build from the Dockerfile:\n# $ docker build -t patroni .\n# The cluster could be started as:\n# $ docker-compose up -d\n# You can read more about it in the:\n# https://github.com/patroni/patroni/blob/master/docker/README.md\nversion: \"2\"\n\nnetworks:\n    demo:\n\nservices:\n    etcd1: &etcd\n        image: ${PATRONI_TEST_IMAGE:-patroni}\n        networks: [ demo ]\n        environment:\n            ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380\n            ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379\n            ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380\n            ETCD_INITIAL_CLUSTER_STATE: new\n            ETCD_INITIAL_CLUSTER_TOKEN: tutorial\n            ETCD_UNSUPPORTED_ARCH: arm64\n        container_name: demo-etcd1\n        hostname: etcd1\n        command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380\n\n    etcd2:\n        <<: *etcd\n        container_name: demo-etcd2\n        hostname: etcd2\n        command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380\n\n    etcd3:\n        <<: *etcd\n        container_name: demo-etcd3\n        hostname: etcd3\n        command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380\n\n    haproxy:\n        image: ${PATRONI_TEST_IMAGE:-patroni}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: haproxy\n        container_name: demo-haproxy\n        ports:\n            - \"5000:5000\"\n            - \"5001:5001\"\n        command: haproxy\n        environment: &haproxy_env\n            ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379\n            PATRONI_ETCD3_HOSTS: \"'etcd1:2379','etcd2:2379','etcd3:2379'\"\n            PATRONI_SCOPE: demo\n\n    patroni1:\n        image: ${PATRONI_TEST_IMAGE:-patroni}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: patroni1\n        container_name: demo-patroni1\n        environment:\n            <<: *haproxy_env\n            PATRONI_NAME: patroni1\n\n    patroni2:\n        image: ${PATRONI_TEST_IMAGE:-patroni}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: patroni2\n        container_name: demo-patroni2\n        environment:\n            <<: *haproxy_env\n            PATRONI_NAME: patroni2\n\n    patroni3:\n        image: ${PATRONI_TEST_IMAGE:-patroni}\n        networks: [ demo ]\n        env_file: docker/patroni.env\n        hostname: patroni3\n        container_name: demo-patroni3\n        environment:\n            <<: *haproxy_env\n            PATRONI_NAME: patroni3\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "features",
          "type": "tree",
          "content": null
        },
        {
          "name": "haproxy.cfg",
          "type": "blob",
          "size": 0.546875,
          "content": "global\n    maxconn 100\n\ndefaults\n    log global\n    mode tcp\n    retries 2\n    timeout client 30m\n    timeout connect 4s\n    timeout server 30m\n    timeout check 5s\n\nlisten stats\n    mode http\n    bind *:7000\n    stats enable\n    stats uri /\n\nlisten batman\n    bind *:5000\n    option httpchk\n    http-check expect status 200\n    default-server inter 3s fall 3 rise 2 on-marked-down shutdown-sessions\n    server postgresql_127.0.0.1_5432 127.0.0.1:5432 maxconn 100 check port 8008\n    server postgresql_127.0.0.1_5433 127.0.0.1:5433 maxconn 100 check port 8009\n"
        },
        {
          "name": "kubernetes",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkbinary.sh",
          "type": "blob",
          "size": 0.091796875,
          "content": "#!/bin/sh\nset -e\n\npip install --ignore-installed pyinstaller\npyinstaller --clean patroni.spec\n"
        },
        {
          "name": "patroni.py",
          "type": "blob",
          "size": 0.09375,
          "content": "#!/usr/bin/env python\nfrom patroni.__main__ import main\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "patroni.spec",
          "type": "blob",
          "size": 1.0478515625,
          "content": "# -*- mode: python -*-\n\nblock_cipher = None\n\n\ndef hiddenimports():\n    import sys\n    sys.path.insert(0, '.')\n    try:\n        import patroni.dcs\n        return patroni.dcs.dcs_modules() + ['http.server']\n    finally:\n        sys.path.pop(0)\n\n\ndef resources():\n    import os\n    res_dir = 'patroni/postgresql/available_parameters/'\n    exts = set(f.split('.')[-1] for f in os.listdir(res_dir))\n    return [(res_dir + '*.' + e, res_dir) for e in exts if e.lower() in {'yml', 'yaml'}]\n\n\na = Analysis(['patroni/__main__.py'],\n             pathex=[],\n             binaries=None,\n             datas=resources(),\n             hiddenimports=hiddenimports(),\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher)\n\npyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)\n\nexe = EXE(pyz,\n    a.scripts,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    name='patroni',\n    debug=False,\n    strip=False,\n    upx=True,\n    console=True)\n"
        },
        {
          "name": "patroni",
          "type": "tree",
          "content": null
        },
        {
          "name": "patroni_raft_controller.py",
          "type": "blob",
          "size": 0.1005859375,
          "content": "#!/usr/bin/env python\nfrom patroni.raft_controller import main\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "patronictl.py",
          "type": "blob",
          "size": 0.08984375,
          "content": "#!/usr/bin/env python\nfrom patroni.ctl import ctl\n\nif __name__ == '__main__':\n    ctl(None)\n"
        },
        {
          "name": "postgres0.yml",
          "type": "blob",
          "size": 4.44140625,
          "content": "scope: batman\n#namespace: /service/\nname: postgresql0\n\nrestapi:\n  listen: 127.0.0.1:8008\n  connect_address: 127.0.0.1:8008\n#  cafile: /etc/ssl/certs/ssl-cacert-snakeoil.pem\n#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem\n#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key\n#  authentication:\n#    username: username\n#    password: password\n\n#ctl:\n#  insecure: false # Allow connections to Patroni REST API without verifying certificates\n#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem\n#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key\n#  cacert: /etc/ssl/certs/ssl-cacert-snakeoil.pem\n\n#citus:\n#  database: citus\n#  group: 0  # coordinator\n\netcd:\n  #Provide host to do the initial discovery of the cluster topology:\n  host: 127.0.0.1:2379\n  #Or use \"hosts\" to provide multiple endpoints\n  #Could be a comma separated string:\n  #hosts: host1:port1,host2:port2\n  #or an actual yaml list:\n  #hosts:\n  #- host1:port1\n  #- host2:port2\n  #Once discovery is complete Patroni will use the list of advertised clientURLs\n  #It is possible to change this behavior through by setting:\n  #use_proxies: true\n\n#raft:\n#  data_dir: .\n#  self_addr: 127.0.0.1:2222\n#  partner_addrs:\n#  - 127.0.0.1:2223\n#  - 127.0.0.1:2224\n\n# The bootstrap configuration. Works only when the cluster is not yet initialized.\n# If the cluster is already initialized, all changes in the `bootstrap` section are ignored!\nbootstrap:\n  # This section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster\n  # and all other cluster members will use it as a `global configuration`.\n  # WARNING! If you want to change any of the parameters that were set up\n  # via `bootstrap.dcs` section, please use `patronictl edit-config`!\n  dcs:\n    ttl: 30\n    loop_wait: 10\n    retry_timeout: 10\n    maximum_lag_on_failover: 1048576\n#    primary_start_timeout: 300\n#    synchronous_mode: false\n    #standby_cluster:\n      #host: 127.0.0.1\n      #port: 1111\n      #primary_slot_name: patroni\n    postgresql:\n      use_pg_rewind: true\n      pg_hba:\n      # For kerberos gss based connectivity (discard @.*$)\n      #- host replication replicator 127.0.0.1/32 gss include_realm=0\n      #- host all all 0.0.0.0/0 gss include_realm=0\n      - host replication replicator 127.0.0.1/32 md5\n      - host all all 0.0.0.0/0 md5\n      #  - hostssl all all 0.0.0.0/0 md5\n#      use_slots: true\n      parameters:\n#        wal_level: hot_standby\n#        hot_standby: \"on\"\n#        max_connections: 100\n#        max_worker_processes: 8\n#        wal_keep_segments: 8\n#        max_wal_senders: 10\n#        max_replication_slots: 10\n#        max_prepared_transactions: 0\n#        max_locks_per_transaction: 64\n#        wal_log_hints: \"on\"\n#        track_commit_timestamp: \"off\"\n#        archive_mode: \"on\"\n#        archive_timeout: 1800s\n#        archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f\n#      recovery_conf:\n#        restore_command: cp ../wal_archive/%f %p\n\n  # some desired options for 'initdb'\n  initdb:  # Note: It needs to be a list (some options need values, others are switches)\n  - encoding: UTF8\n  - data-checksums\n\n  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)\n# post_init: /usr/local/bin/setup_cluster.sh\n\npostgresql:\n  listen: 127.0.0.1:5432\n  connect_address: 127.0.0.1:5432\n\n#  proxy_address: 127.0.0.1:5433  # The address of connection pool (e.g., pgbouncer) running next to Patroni/Postgres. Only for service discovery.\n  data_dir: data/postgresql0\n#  bin_dir:\n#  config_dir:\n  pgpass: /tmp/pgpass0\n  authentication:\n    replication:\n      username: replicator\n      password: rep-pass\n    superuser:\n      username: postgres\n      password: patroni\n    rewind:  # Has no effect on postgres 10 and lower\n      username: rewind_user\n      password: rewind_password\n  # Server side kerberos spn\n#  krbsrvname: postgres\n  parameters:\n    # Fully qualified kerberos ticket file for the running user\n    # same as KRB5CCNAME used by the GSS\n#   krb_server_keyfile: /var/spool/keytabs/postgres\n    unix_socket_directories: '..'  # parent directory of data_dir\n  # Additional fencing script executed after acquiring the leader lock but before promoting the replica\n  #pre_promote: /path/to/pre_promote.sh\n\n#watchdog:\n#  mode: automatic # Allowed values: off, automatic, required\n#  device: /dev/watchdog\n#  safety_margin: 5\n\ntags:\n    # failover_priority: 1\n    # sync_priority: 1\n    noloadbalance: false\n    clonefrom: false\n    nostream: false\n"
        },
        {
          "name": "postgres1.yml",
          "type": "blob",
          "size": 4.3046875,
          "content": "scope: batman\n#namespace: /service/\nname: postgresql1\n\nrestapi:\n  listen: 127.0.0.1:8009\n  connect_address: 127.0.0.1:8009\n#  cafile: /etc/ssl/certs/ssl-cacert-snakeoil.pem\n#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem\n#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key\n#  authentication:\n#    username: username\n#    password: password\n\n#ctl:\n#  insecure: false # Allow connections to Patroni REST API without verifying certificates\n#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem\n#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key\n#  cacert: /etc/ssl/certs/ssl-cacert-snakeoil.pem\n\n#citus:\n#  database: citus\n#  group: 1  # worker\n\netcd:\n  #Provide host to do the initial discovery of the cluster topology:\n  host: 127.0.0.1:2379\n  #Or use \"hosts\" to provide multiple endpoints\n  #Could be a comma separated string:\n  #hosts: host1:port1,host2:port2\n  #or an actual yaml list:\n  #hosts:\n  #- host1:port1\n  #- host2:port2\n  #Once discovery is complete Patroni will use the list of advertised clientURLs\n  #It is possible to change this behavior through by setting:\n  #use_proxies: true\n\n#raft:\n#  data_dir: .\n#  self_addr: 127.0.0.1:2223\n#  partner_addrs:\n#  - 127.0.0.1:2222\n#  - 127.0.0.1:2224\n\n# The bootstrap configuration. Works only when the cluster is not yet initialized.\n# If the cluster is already initialized, all changes in the `bootstrap` section are ignored!\nbootstrap:\n  # This section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster\n  # and all other cluster members will use it as a `global configuration`.\n  # WARNING! If you want to change any of the parameters that were set up\n  # via `bootstrap.dcs` section, please use `patronictl edit-config`!\n  dcs:\n    ttl: 30\n    loop_wait: 10\n    retry_timeout: 10\n    maximum_lag_on_failover: 1048576\n    postgresql:\n      use_pg_rewind: true\n      pg_hba:\n      # For kerberos gss based connectivity (discard @.*$)\n      #- host replication replicator 127.0.0.1/32 gss include_realm=0\n      #- host all all 0.0.0.0/0 gss include_realm=0\n      - host replication replicator 127.0.0.1/32 md5\n      - host all all 0.0.0.0/0 md5\n      #  - hostssl all all 0.0.0.0/0 md5\n#      use_slots: true\n      parameters:\n#        wal_level: hot_standby\n#        hot_standby: \"on\"\n#        max_connections: 100\n#        max_worker_processes: 8\n#        wal_keep_segments: 8\n#        max_wal_senders: 10\n#        max_replication_slots: 10\n#        max_prepared_transactions: 0\n#        max_locks_per_transaction: 64\n#        wal_log_hints: \"on\"\n#        track_commit_timestamp: \"off\"\n#        archive_mode: \"on\"\n#        archive_timeout: 1800s\n#        archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f\n#      recovery_conf:\n#        restore_command: cp ../wal_archive/%f %p\n\n  # some desired options for 'initdb'\n  initdb:  # Note: It needs to be a list (some options need values, others are switches)\n  - encoding: UTF8\n  - data-checksums\n\n  # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)\n# post_init: /usr/local/bin/setup_cluster.sh\n\npostgresql:\n  listen: 127.0.0.1:5433\n  connect_address: 127.0.0.1:5433\n#  proxy_address: 127.0.0.1:5434  # The address of connection pool (e.g., pgbouncer) running next to Patroni/Postgres. Only for service discovery.\n  data_dir: data/postgresql1\n#  bin_dir:\n#  config_dir:\n  pgpass: /tmp/pgpass1\n  authentication:\n    replication:\n      username: replicator\n      password: rep-pass\n    superuser:\n      username: postgres\n      password: patroni\n    rewind:  # Has no effect on postgres 10 and lower\n      username: rewind_user\n      password: rewind_password\n  # Server side kerberos spn\n#  krbsrvname: postgres\n  parameters:\n    # Fully qualified kerberos ticket file for the running user\n    # same as KRB5CCNAME used by the GSS\n#    krb_server_keyfile: /var/spool/keytabs/postgres\n    unix_socket_directories: '..'  # parent directory of data_dir\n  basebackup:\n      - verbose\n      - max-rate: 100M\n#      - waldir: /pg-wal-mount/external-waldir # only needed in case pg_wal is symlinked outside of data_dir\n  # Additional fencing script executed after acquiring the leader lock but before promoting the replica\n  #pre_promote: /path/to/pre_promote.sh\n\ntags:\n    # failover_priority: 1\n    # sync_priority: 1\n    noloadbalance: false\n    clonefrom: false\n"
        },
        {
          "name": "postgres2.yml",
          "type": "blob",
          "size": 3.8740234375,
          "content": "scope: batman\n#namespace: /service/\nname: postgresql2\n\nrestapi:\n  listen: 127.0.0.1:8010\n  connect_address: 127.0.0.1:8010\n#  cafile: /etc/ssl/certs/ssl-cacert-snakeoil.pem\n#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem\n#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key\n  authentication:\n    username: username\n    password: password\n\n#ctl:\n#  insecure: false # Allow connections to Patroni REST API without verifying certificates\n#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem\n#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key\n#  cacert: /etc/ssl/certs/ssl-cacert-snakeoil.pem\n\n#citus:\n#  database: citus\n#  group: 1  # worker\n\netcd:\n  #Provide host to do the initial discovery of the cluster topology:\n  host: 127.0.0.1:2379\n  #Or use \"hosts\" to provide multiple endpoints\n  #Could be a comma separated string:\n  #hosts: host1:port1,host2:port2\n  #or an actual yaml list:\n  #hosts:\n  #- host1:port1\n  #- host2:port2\n  #Once discovery is complete Patroni will use the list of advertised clientURLs\n  #It is possible to change this behavior through by setting:\n  #use_proxies: true\n\n#raft:\n#  data_dir: .\n#  self_addr: 127.0.0.1:2224\n#  partner_addrs:\n#  - 127.0.0.1:2222\n#  - 127.0.0.1:2223\n\n# The bootstrap configuration. Works only when the cluster is not yet initialized.\n# If the cluster is already initialized, all changes in the `bootstrap` section are ignored!\nbootstrap:\n  # This section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster\n  # and all other cluster members will use it as a `global configuration`.\n  # WARNING! If you want to change any of the parameters that were set up\n  # via `bootstrap.dcs` section, please use `patronictl edit-config`!\n  dcs:\n    ttl: 30\n    loop_wait: 10\n    retry_timeout: 10\n    maximum_lag_on_failover: 1048576\n    postgresql:\n      use_pg_rewind: true\n      pg_hba:\n      # For kerberos gss based connectivity (discard @.*$)\n      #- host replication replicator 127.0.0.1/32 gss include_realm=0\n      #- host all all 0.0.0.0/0 gss include_realm=0\n      - host replication replicator 127.0.0.1/32 md5\n      - host all all 0.0.0.0/0 md5\n      #  - hostssl all all 0.0.0.0/0 md5\n#      use_slots: true\n      parameters:\n#        wal_level: hot_standby\n#        hot_standby: \"on\"\n#        max_connections: 100\n#        max_worker_processes: 8\n#        wal_keep_segments: 8\n#        max_wal_senders: 10\n#        max_replication_slots: 10\n#        max_prepared_transactions: 0\n#        max_locks_per_transaction: 64\n#        wal_log_hints: \"on\"\n#        track_commit_timestamp: \"off\"\n#        archive_mode: \"on\"\n#        archive_timeout: 1800s\n#        archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f\n#      recovery_conf:\n#        restore_command: cp ../wal_archive/%f %p\n\n  # some desired options for 'initdb'\n  initdb:  # Note: It needs to be a list (some options need values, others are switches)\n  - encoding: UTF8\n  - data-checksums\n\npostgresql:\n  listen: 127.0.0.1:5434\n  connect_address: 127.0.0.1:5434\n#  proxy_address: 127.0.0.1:5435  # The address of connection pool (e.g., pgbouncer) running next to Patroni/Postgres. Only for service discovery.\n  data_dir: data/postgresql2\n#  bin_dir:\n#  config_dir:\n  pgpass: /tmp/pgpass2\n  authentication:\n    replication:\n      username: replicator\n      password: rep-pass\n    superuser:\n      username: postgres\n      password: patroni\n    rewind:  # Has no effect on postgres 10 and lower\n      username: rewind_user\n      password: rewind_password\n  # Server side kerberos spn\n#  krbsrvname: postgres\n  parameters:\n    # Fully qualified kerberos ticket file for the running user\n    # same as KRB5CCNAME used by the GSS\n#    krb_server_keyfile: /var/spool/keytabs/postgres\n    unix_socket_directories: '..'  # parent directory of data_dir\ntags:\n    # failover_priority: 1\n    # sync_priority: 1\n    noloadbalance: false\n    clonefrom: false\n#    replicatefrom: postgresql1\n"
        },
        {
          "name": "pyrightconfig.json",
          "type": "blob",
          "size": 0.3212890625,
          "content": "{\n  \"include\": [\n    \"patroni\"\n  ],\n\n  \"exclude\": [\n    \"**/__pycache__\"\n  ],\n\n  \"ignore\": [\n  ],\n\n  \"defineConstant\": {\n    \"DEBUG\": true\n  },\n\n  \"stubPath\": \"typings/\",\n\n  \"reportMissingImports\": true,\n  \"reportMissingTypeStubs\": false,\n\n  \"pythonVersion\": \"3.12\",\n  \"pythonPlatform\": \"All\",\n\n  \"typeCheckingMode\": \"strict\"\n\n}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.830078125,
          "content": "#!/bin/bash\n\n# Release process:\n# 1. Open a PR that updates release notes, Patroni version and pyright version in the tests workflow.\n# 2. Resolve possible typing issues.\n# 3. Merge the PR.\n# 4. Run release.sh\n# 5. After the new tag is pushed, the .github/workflows/release.yaml will run tests and upload the new package to test.pypi.org\n# 6. Once the release is created, the .github/workflows/release.yaml will run tests and upload the new package to pypi.org\n\n## Bail out on any non-zero exitcode from the called processes\nset -xe\n\nif python3 --version &> /dev/null; then\n    alias python=python3\n    shopt -s expand_aliases\nfi\n\npython --version\ngit --version\n\nversion=$(python -c 'from patroni.version import __version__; print(__version__)')\n\npython setup.py clean\npython setup.py test\npython setup.py flake8\n\ngit tag \"v$version\"\ngit push --tags\n"
        },
        {
          "name": "requirements.dev.txt",
          "type": "blob",
          "size": 0.12109375,
          "content": "psycopg2-binary==2.9.9; sys_platform == \"darwin\"\npsycopg2-binary\nbehave\ncoverage\nflake8>=3.0.0\npytest-cov\npytest\nsetuptools\n"
        },
        {
          "name": "requirements.docs.txt",
          "type": "blob",
          "size": 0.1533203125,
          "content": "sphinx>=4\nsphinx_rtd_theme>1\nsphinxcontrib-apidoc\nsphinx-github-style<1.0.3\npsycopg[binary]\npsycopg2-binary==2.9.9; sys_platform == \"darwin\"\npsycopg2-binary\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.2373046875,
          "content": "urllib3>=1.19.1,!=1.21\nboto3\nPyYAML\nkazoo>=1.3.1\npython-etcd>=0.4.3,<0.5\npy-consul>=1.1.1\nclick>=4.1\nprettytable>=0.7\npython-dateutil\npysyncobj>=0.3.8\ncryptography>=1.4\npsutil>=2.0.0\nydiff>=1.2.0,<1.5,!=1.4.0,!=1.4.1\npython-json-logger>=2.0.2\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 7.244140625,
          "content": "#!/usr/bin/env python\n\n\"\"\"\n    Setup file for patroni\n\"\"\"\n\nimport glob\nimport inspect\nimport logging\nimport os\nimport sys\n\nfrom setuptools import Command, find_packages, setup\n\n__location__ = os.path.join(os.getcwd(), os.path.dirname(inspect.getfile(inspect.currentframe())))\n\nNAME = 'patroni'\nMAIN_PACKAGE = NAME\nDESCRIPTION = 'PostgreSQL High-Available orchestrator and CLI'\nLICENSE = 'The MIT License'\nURL = 'https://github.com/patroni/patroni'\nAUTHOR = 'Alexander Kukushkin, Polina Bungina'\nAUTHOR_EMAIL = 'akukushkin@microsoft.com, polina.bungina@zalando.de'\nKEYWORDS = 'etcd governor patroni postgresql postgres ha haproxy confd' +\\\n    ' zookeeper exhibitor consul streaming replication kubernetes k8s'\n\nEXTRAS_REQUIRE = {'aws': ['boto3'], 'etcd': ['python-etcd'], 'etcd3': ['python-etcd'],\n                  'consul': ['py-consul'], 'exhibitor': ['kazoo'], 'zookeeper': ['kazoo'],\n                  'kubernetes': [], 'raft': ['pysyncobj', 'cryptography'], 'jsonlogger': ['python-json-logger']}\n\n# Add here all kinds of additional classifiers as defined under\n# https://pypi.python.org/pypi?%3Aaction=list_classifiers\nCLASSIFIERS = [\n    'Development Status :: 5 - Production/Stable',\n    'Environment :: Console',\n    'Intended Audience :: Developers',\n    'Intended Audience :: System Administrators',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: MacOS',\n    'Operating System :: POSIX :: Linux',\n    'Operating System :: POSIX :: BSD :: FreeBSD',\n    'Operating System :: Microsoft :: Windows',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.6',\n    'Programming Language :: Python :: 3.7',\n    'Programming Language :: Python :: 3.8',\n    'Programming Language :: Python :: 3.9',\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12',\n    'Programming Language :: Python :: Implementation :: CPython',\n]\n\nCONSOLE_SCRIPTS = ['patroni = patroni.__main__:main',\n                   'patronictl = patroni.ctl:ctl',\n                   'patroni_raft_controller = patroni.raft_controller:main',\n                   \"patroni_wale_restore = patroni.scripts.wale_restore:main\",\n                   \"patroni_aws = patroni.scripts.aws:main\",\n                   \"patroni_barman = patroni.scripts.barman.cli:main\"]\n\n\nclass _Command(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n\nclass _Lint(_Command):\n\n    def package_modules(self):\n        package_dirs = self.distribution.package_dir or {}\n        for package in self.distribution.packages or []:\n            if package in package_dirs:\n                yield package_dirs[package]\n            elif '' in package_dirs:\n                yield os.path.join(package_dirs[''], package)\n            else:\n                yield package\n\n    def package_directories(self):\n        for module in self.package_modules():\n            yield module.replace('.', os.path.sep)\n\n    def aux_directories(self):\n        for dir_name in ('tests', 'features'):\n            yield dir_name\n            for root, dirs, files in os.walk(dir_name):\n                for name in dirs:\n                    yield os.path.join(root, name)\n\n    def dirs_to_check(self):\n        yield from self.package_directories()\n        yield from self.aux_directories()\n\n    def files_to_check(self):\n        for path in self.dirs_to_check():\n            for python_file in glob.iglob(os.path.join(path, '*.py')):\n                yield python_file\n\n        for filename in self.distribution.py_modules or []:\n            yield f'{filename}.py'\n\n        yield 'setup.py'\n\n\nclass Flake8(_Lint):\n\n    def run(self):\n        from flake8.main.cli import main\n\n        logging.getLogger().setLevel(logging.ERROR)\n        raise SystemExit(main(list(self.files_to_check())))\n\n\nclass ISort(_Lint):\n\n    def run(self):\n        from isort import api\n\n        wrong_sorted_files = False\n        for python_file in self.files_to_check():\n            try:\n                if not api.check_file(python_file, settings_path=__location__, show_diff=True):\n                    wrong_sorted_files = True\n            except OSError as error:\n                logging.warning('Unable to parse file %s due to %r', python_file, error)\n                wrong_sorted_files = True\n        if wrong_sorted_files:\n            sys.exit(1)\n\n\nclass PyTest(_Command):\n\n    def run(self):\n        try:\n            import pytest\n        except Exception:\n            raise RuntimeError('py.test is not installed, run: pip install pytest')\n\n        logging.getLogger().setLevel(logging.WARNING)\n\n        args = ['--verbose', 'tests', '--doctest-modules', MAIN_PACKAGE] +\\\n            ['-s' if logging.getLogger().getEffectiveLevel() < logging.WARNING else '--capture=fd'] +\\\n            ['--cov', MAIN_PACKAGE, '--cov-report', 'term-missing', '--cov-report', 'xml']\n\n        errno = pytest.main(args=args)\n        sys.exit(errno)\n\n\ndef read(fname):\n    with open(os.path.join(__location__, fname), encoding='utf-8') as fd:\n        return fd.read()\n\n\ndef get_versions():\n    old_modules = sys.modules.copy()\n    try:\n        from patroni import MIN_PSYCOPG2, MIN_PSYCOPG3\n        from patroni.version import __version__\n        return __version__, MIN_PSYCOPG2, MIN_PSYCOPG3\n    finally:\n        sys.modules.clear()\n        sys.modules.update(old_modules)\n\n\ndef main():\n    logging.basicConfig(format='%(message)s', level=os.getenv('LOGLEVEL', logging.WARNING))\n\n    install_requires = []\n    for r in read('requirements.txt').split('\\n'):\n        r = r.strip()\n        if r == '':\n            continue\n        extra = False\n        for e, deps in EXTRAS_REQUIRE.items():\n            for i, v in enumerate(deps):\n                if r.startswith(v):\n                    deps[i] = r\n                    EXTRAS_REQUIRE[e] = deps\n                    extra = True\n        if not extra:\n            install_requires.append(r)\n\n    # Just for convenience, if someone wants to install dependencies for all extras\n    EXTRAS_REQUIRE['all'] = list({e for extras in EXTRAS_REQUIRE.values() for e in extras})\n\n    patroni_version, min_psycopg2, min_psycopg3 = get_versions()\n\n    # Make it possible to specify psycopg dependency as extra\n    for name, version in {'psycopg[binary]': min_psycopg3, 'psycopg2': min_psycopg2, 'psycopg2-binary': None}.items():\n        EXTRAS_REQUIRE[name] = [name + ('>=' + '.'.join(map(str, version)) if version else '')]\n    EXTRAS_REQUIRE['psycopg3'] = EXTRAS_REQUIRE.pop('psycopg[binary]')\n\n    setup(\n        name=NAME,\n        version=patroni_version,\n        url=URL,\n        author=AUTHOR,\n        author_email=AUTHOR_EMAIL,\n        description=DESCRIPTION,\n        license=LICENSE,\n        keywords=KEYWORDS,\n        long_description=read('README.rst'),\n        classifiers=CLASSIFIERS,\n        packages=find_packages(exclude=['tests', 'tests.*']),\n        package_data={MAIN_PACKAGE: [\n            \"postgresql/available_parameters/*.yml\",\n            \"postgresql/available_parameters/*.yaml\",\n        ]},\n        install_requires=install_requires,\n        extras_require=EXTRAS_REQUIRE,\n        cmdclass={'test': PyTest, 'flake8': Flake8, 'isort': ISort},\n        entry_points={'console_scripts': CONSOLE_SCRIPTS},\n    )\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 6.107421875,
          "content": "[common]\npython_matrix = {36,37,38,39,310,311}\npostgres_matrix =\n    pg11: PG_MAJOR = 11\n    pg12: PG_MAJOR = 12\n    pg13: PG_MAJOR = 13\n    pg14: PG_MAJOR = 14\n    pg15: PG_MAJOR = 15\n    pg16: PG_MAJOR = 16\npsycopg_deps =\n    py{37,38,39,310,311}-{lin,win}: psycopg[binary]\n    mac: psycopg2-binary\n    py36: psycopg2-binary\nplatforms =\n    lin: linux\n    mac: darwin\n    win: win32\n\n[tox]\nmin_version = 4.0\nrequires =\n    tox>4\nenv_list =\n    dep\n    lint\n    py{[common]python_matrix}-test-{lin,mac,win}\n    docs\nskipsdist = True\ntoxworkdir = {env:TOX_WORK_DIR:.tox}\nskip_missing_interpreters = True\n\n[testenv]\nsetenv =\n    PYTHONDONTWRITEBYTECODE = 1\n    mac: OPEN_CMD = {env:OPEN_CMD:open}\n    lin: OPEN_CMD = {env:OPEN_CMD:xdg-open}\npassenv =\n    BROWSER\n    DISPLAY\n\n[testenv:lint]\ndescription = Lint code with flake8\ncommands = flake8 {posargs:patroni tests setup.py}\ndeps =\n    flake8\n\n[testenv:py{36,37,38,39,310,311}-test-{lin,win,mac}]\ndescription = Run unit tests with pytest\nlabels =\n    test\ncommands_pre =\n    - {tty:rm -f \"{toxworkdir}{/}cov_report_{env_name}_html{/}index.html\":true}\n    - {tty:rm -f \"{toxworkdir}{/}pytest_report_{env_name}.html\":true}\ncommands =\n    pytest \\\n    -p no:cacheprovider \\\n    --verbose \\\n    --doctest-modules \\\n    --capture=fd \\\n    --cov=patroni \\\n    --cov-report=term-missing \\\n    --cov-append \\\n    {tty::--cov-report=\"xml\\:{toxworkdir}{/}cov_report.{env_name}.xml\"} \\\n    {tty:--cov-report=\"html\\:{toxworkdir}{/}cov_report_{env_name}_html\":} \\\n    {tty:--html=\"{toxworkdir}{/}pytest_report_{env_name}.html\":} \\\n    {posargs:tests patroni}\ncommands_post =\n    - {tty:{env:OPEN_CMD} \"{toxworkdir}{/}cov_report_{env_name}_html{/}index.html\":true}\n    - {tty:{env:OPEN_CMD} \"{toxworkdir}{/}pytest_report_{env_name}.html\":true}\ndeps =\n    -r requirements.txt\n    pytest\n    pytest-cov\n    pytest-html\n    {[common]psycopg_deps}\nplatform =\n    {[common]platforms}\nallowlist_externals =\n    rm\n    true\n    {env:OPEN_CMD}\n\n[testenv:dep]\ndescription = Check package dependency problems\ncommands = pipdeptree -w fail\ndeps =\n    -r requirements.txt\n    pipdeptree\n    {[common]psycopg_deps}\n\n[testenv:py{37,38,39,310,311}-type-{lin,mac,win}]\ndescription = Run static type checking with pyright\nlabels =\n    type\ndeps =\n    -r requirements.txt\n    pyright\n    psycopg2-binary\n    psycopg[binary]\ncommands = pyright --venv-path {toxworkdir}{/}{envname} {posargs:patroni}\nplatform =\n    {[common]platforms}\n\n[testenv:black]\ndescription = Reformat code with black\ndeps = black\ncommands = black {posargs:patroni tests}\n\n[testenv:pg{12,13,14,15,16}-docker-build]\ndescription = Build docker containers needed for testing\nlabels =\n    behave\n    docker-build\nsetenv =\n    {[common]postgres_matrix}\n    DOCKER_BUILDKIT = 1\npassenv =\n    BASE_IMAGE\ncommands =\n    docker build . \\\n        --tag patroni-dev:{env:PG_MAJOR} \\\n        --build-arg PG_MAJOR \\\n        --build-arg BASE_IMAGE={env:BASE_IMAGE:postgres} \\\n        --file features/Dockerfile\nallowlist_externals = docker\n\n[testenv:pg{12,13,14,15,16}-docker-behave-{etcd,etcd3}-{lin,mac}]\ndescription = Run behaviour tests in patroni-dev docker container\nsetenv =\n    etcd: DCS=etcd\n    etcd3: DCS=etcd3\n    {[common]postgres_matrix}\n    CONTAINER_NAME = tox-{env_name}-{env:PYTHONHASHSEED}\nlabels =\n    behave\ndepends =\n    pg{11,12,13,14,15,16}-docker-build\n\n# There's a bug which affects calling multiple envs on the command line\n# This should be a valid command: tox -e 'py{36,37,38,39,310,311}-behave-{env:DCS}-lin'\n# Replaced with workaround, see https://github.com/tox-dev/tox/issues/2850\ncommands =\n    docker run \\\n        --volume {tox_root}:/src \\\n        --env DCS={env:DCS} \\\n        --hostname {env:CONTAINER_NAME} \\\n        --name {env:CONTAINER_NAME} \\\n        --rm \\\n        --tty \\\n        {env:PATRONI_DEV_IMAGE:patroni-dev:{env:PG_MAJOR}} \\\n        tox run -x 'tox.env_list=py{[common]python_matrix}-behave-{env:DCS}-lin' \\\n        -- {posargs}\n\nallowlist_externals =\n    docker\n    find\nplatform =\n    lin: linux\n;    win: win32\n    mac: darwin\n\n[testenv:py{36,38,39,310,311}-behave-{etcd,etcd3}-{lin,win,mac}]\ndescription = Run behaviour tests (locally with tox)\ndeps =\n    -r requirements.txt\n    behave\n    coverage\n    {[common]psycopg_deps}\nsetenv =\n    etcd: DCS = {env:DCS:etcd}\n    etcd3: DCS = {env:DCS:etcd3}\npassenv =\n    ETCD_UNSUPPORTED_ARCH\ncommands =\n    python3 -m behave --format json --format plain --outfile result.json {posargs}\n    mv result.json features/output\nallowlist_externals =\n    mv\nplatform =\n    {[common]platforms}\n\n[testenv:epub-{lin,mac,win}]\ndescription = Build Sphinx documentation in epub format\nlabels:\n    docs\ndeps =\n    -r requirements.docs.txt\n    -r requirements.txt\ncommands =\n    python -m sphinx -T -b epub -d _build/doctrees -D language=en . epub\nallowlist_externals =\n    true\n    {env:OPEN_CMD}\nplatform =\n    {[common]platforms}\nchange_dir = docs\n\n[testenv:docs-{lin,mac,win}]\ndescription = Build Sphinx documentation in HTML format\nlabels:\n    docs\ndeps =\n    -r requirements.docs.txt\n    -r requirements.txt\ncommands =\n    sphinx-build \\\n    -d \"{envtmpdir}{/}doctree\" docs \"{toxworkdir}{/}docs_out\" \\\n    --color -b html \\\n    -T -E -W --keep-going \\\n    {posargs}\ncommands_post =\n    - {tty:{env:OPEN_CMD} \"{toxworkdir}{/}docs_out{/}index.html\":true:}\nallowlist_externals =\n    true\n    {env:OPEN_CMD}\nplatform =\n    {[common]platforms}\n\n[testenv:pdf-{lin,mac,win}]\ndescription = Build Sphinx documentation in PDF format\nlabels:\n    docs\ndeps =\n    -r requirements.docs.txt\n    -r requirements.txt\ncommands =\n    python -m sphinx -T -E -b latex -d _build/doctrees -D language=en . pdf\n    - latexmk -r pdf/latexmkrc -cd -C pdf/Patroni.tex\n    latexmk -r pdf/latexmkrc -cd -pdf -f -dvi- -ps- -jobname=Patroni -interaction=nonstopmode pdf/Patroni.tex\n\ncommands_post =\n    - {tty:{env:OPEN_CMD} \"pdf{/}Patroni.pdf\":true:}\nallowlist_externals =\n    true\n    latexmk\n    {env:OPEN_CMD}\nplatform =\n    {[common]platforms}\nchange_dir = docs\n\n[flake8]\nmax-line-length = 120\nignore = D401,W503\n\n[isort]\nline_length = 120\nmulti_line_output = 2\nbalanced_wrapping = true\ncombine_as_imports = true\nforce_alphabetical_sort_within_sections = true\nlines_between_types = 1\nknown_third_party = consul\n"
        },
        {
          "name": "typings",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}