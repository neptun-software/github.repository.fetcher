{
  "metadata": {
    "timestamp": 1736561068587,
    "page": 858,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lark-parser/lark",
      "stars": 5028,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": "*.pyc\n*.pyo\n/.tox\n/lark.egg-info/**\n/lark_parser.egg-info/**\ntags\n.vscode\n.idea\n.ropeproject\n.cache\n.mypy_cache\n/dist\n/build\ndocs/_build\ndocs/examples\ndocs/sg_execution_times.rst\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.119140625,
          "content": "[submodule \"tests/test_nearley/nearley\"]\n\tpath = tests/test_nearley/nearley\n\turl = https://github.com/Hardmath123/nearley\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.828125,
          "content": "# To use:\n#\n#     pre-commit run -a\n#\n# Or:\n#\n#     pre-commit install  # (runs every time you commit in git)\n#\n# To update this file:\n#\n#     pre-commit autoupdate\n#\n# See https://github.com/pre-commit/pre-commit\n\nrepos:\n# Standard hooks\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: \"v4.4.0\"\n  hooks:\n    - id: check-added-large-files\n    - id: check-case-conflict\n    - id: check-merge-conflict\n    - id: check-symlinks\n    - id: check-toml\n    - id: check-yaml\n    - id: debug-statements\n    - id: end-of-file-fixer\n      exclude: '(^tests/.*\\.lark|\\.svg)$'\n    - id: mixed-line-ending\n    - id: requirements-txt-fixer\n    - id: trailing-whitespace\n      exclude: '(^tests/.*\\.lark|\\.svg)$'\n\n- repo: https://github.com/codespell-project/codespell\n  rev: v2.2.2\n  hooks:\n    - id: codespell\n      args: [\"-L\", \"nd,iif,ot,datas\"]\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.48046875,
          "content": "v1.0\r\n\r\n- `maybe_placeholders` is now True by default\r\n\r\n- Renamed TraditionalLexer to BasicLexer, and 'standard' lexer option to 'basic'\r\n\r\n- Default priority is now 0, for both terminals and rules (used to be 1 for terminals)\r\n\r\n- Discard mechanism is now done by returning Discard, instead of raising it as an exception.\r\n\r\n- `use_accepts` in `UnexpectedInput.match_examples()` is now True by default\r\n\r\n- `v_args(meta=True)` now gives meta as the first argument. i.e. `(meta, children)`\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0302734375,
          "content": "Copyright Â© 2017 Erez Shinan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1689453125,
          "content": "include README.md LICENSE docs/* examples/*.py examples/*.png examples/*.lark tests/*.py tests/*.lark tests/grammars/* tests/test_nearley/*.py tests/test_nearley/grammars/*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.158203125,
          "content": "# Lark - a parsing toolkit for Python\n\nLark is a parsing toolkit for Python, built with a focus on ergonomics, performance and modularity.\n\nLark can parse all context-free languages. To put it simply, it means that it is capable of parsing almost any programming language out there, and to some degree most natural languages too.\n\n**Who is it for?**\n\n   - **Beginners**: Lark is very friendly for experimentation. It can parse any grammar you throw at it, no matter how complicated or ambiguous, and do so efficiently. It also constructs an annotated parse-tree for you, using only the grammar and an input, and it gives you convenient and flexible tools to process that parse-tree.\n\n   - **Experts**: Lark implements both Earley(SPPF) and LALR(1), and several different lexers, so you can trade-off power and speed, according to your requirements. It also provides a variety of sophisticated features and utilities.\n\n**What can it do?**\n\n - Parse all context-free grammars, and handle any ambiguity gracefully\n - Build an annotated parse-tree automagically, no construction code required.\n - Provide first-rate performance in terms of both Big-O complexity and measured run-time (considering that this is Python ;)\n - Run on every Python interpreter (it's pure-python)\n - Generate a stand-alone parser (for LALR(1) grammars)\n\nAnd many more features. Read ahead and find out!\n\nMost importantly, Lark will save you time and prevent you from getting parsing headaches.\n\n### Quick links\n\n- [Documentation @readthedocs](https://lark-parser.readthedocs.io/)\n- [Cheatsheet (PDF)](/docs/_static/lark_cheatsheet.pdf)\n- [Online IDE](https://lark-parser.org/ide)\n- [Tutorial](/docs/json_tutorial.md) for writing a JSON parser.\n- Blog post: [How to write a DSL with Lark](http://blog.erezsh.com/how-to-write-a-dsl-in-python-with-lark/)\n- [Gitter chat](https://gitter.im/lark-parser/Lobby)\n\n### Install Lark\n\n    $ pip install lark --upgrade\n\nLark has no dependencies.\n\n[![Tests](https://github.com/lark-parser/lark/actions/workflows/tests.yml/badge.svg)](https://github.com/lark-parser/lark/actions/workflows/tests.yml)\n\n### Syntax Highlighting\n\nLark provides syntax highlighting for its grammar files (\\*.lark):\n\n- [Sublime Text & TextMate](https://github.com/lark-parser/lark_syntax)\n- [vscode](https://github.com/lark-parser/vscode-lark)\n- [Intellij & PyCharm](https://github.com/lark-parser/intellij-syntax-highlighting)\n- [Vim](https://github.com/lark-parser/vim-lark-syntax)\n- [Atom](https://github.com/Alhadis/language-grammars)\n\n### Clones\n\nThese are implementations of Lark in other languages. They accept Lark grammars, and provide similar utilities.\n\n- [Lerche (Julia)](https://github.com/jamesrhester/Lerche.jl) - an unofficial clone, written entirely in Julia.\n- [Lark.js (Javascript)](https://github.com/lark-parser/lark.js) - a port of the stand-alone LALR(1) parser generator to Javascsript.\n\n### Hello World\n\nHere is a little program to parse \"Hello, World!\" (Or any other similar phrase):\n\n```python\nfrom lark import Lark\n\nl = Lark('''start: WORD \",\" WORD \"!\"\n\n            %import common.WORD   // imports from terminal library\n            %ignore \" \"           // Disregard spaces in text\n         ''')\n\nprint( l.parse(\"Hello, World!\") )\n```\n\nAnd the output is:\n\n```python\nTree(start, [Token(WORD, 'Hello'), Token(WORD, 'World')])\n```\n\nNotice punctuation doesn't appear in the resulting tree. It's automatically filtered away by Lark.\n\n### Fruit flies like bananas\n\nLark is great at handling ambiguity. Here is the result of parsing the phrase \"fruit flies like bananas\":\n\n![fruitflies.png](examples/fruitflies.png)\n\n[Read the code here](https://github.com/lark-parser/lark/tree/master/examples/fruitflies.py), and see [more examples here](https://lark-parser.readthedocs.io/en/latest/examples/index.html).\n\n\n## List of main features\n\n - Builds a parse-tree (AST) automagically, based on the structure of the grammar\n - **Earley** parser\n    - Can parse all context-free grammars\n    - Full support for ambiguous grammars\n - **LALR(1)** parser\n    - Fast and light, competitive with PLY\n    - Can generate a stand-alone parser ([read more](docs/tools.md#stand-alone-parser))\n - **EBNF** grammar\n - **Unicode** fully supported\n - Automatic line & column tracking\n - Interactive parser for advanced parsing flows and debugging\n - Grammar composition - Import terminals and rules from other grammars\n - Standard library of terminals (strings, numbers, names, etc.)\n - Import grammars from Nearley.js ([read more](/docs/tools.md#importing-grammars-from-nearleyjs))\n - Extensive test suite [![codecov](https://codecov.io/gh/lark-parser/lark/branch/master/graph/badge.svg?token=lPxgVhCVPK)](https://codecov.io/gh/lark-parser/lark)\n - Type annotations (MyPy support)\n - And much more!\n\nSee the full list of [features here](https://lark-parser.readthedocs.io/en/latest/features.html)\n\n\n### Comparison to other libraries\n\n#### Performance comparison\n\nLark is fast and light (lower is better)\n\n![Run-time Comparison](docs/_static/comparison_runtime.png)\n\n![Memory Usage Comparison](docs/_static/comparison_memory.png)\n\n\nCheck out the [JSON tutorial](/docs/json_tutorial.md#conclusion) for more details on how the comparison was made.\n\nFor thorough 3rd-party benchmarks, checkout the [Python Parsing Benchmarks](https://github.com/goodmami/python-parsing-benchmarks) repo.\n\n#### Feature comparison\n\n| Library | Algorithm | Grammar | Builds tree? | Supports ambiguity? | Can handle every CFG? | Line/Column tracking | Generates Stand-alone\n|:--------|:----------|:----|:--------|:------------|:------------|:----------|:----------\n| **Lark** | Earley/LALR(1) | EBNF | Yes! | Yes! | Yes! | Yes! | Yes! (LALR only) |\n| [PLY](http://www.dabeaz.com/ply/) | LALR(1) | BNF | No | No | No | No | No |\n| [PyParsing](https://github.com/pyparsing/pyparsing) | PEG | Combinators | No | No | No\\* | No | No |\n| [Parsley](https://pypi.python.org/pypi/Parsley) | PEG | EBNF | No | No | No\\* | No | No |\n| [Parsimonious](https://github.com/erikrose/parsimonious) | PEG | EBNF | Yes | No | No\\* | No | No |\n| [ANTLR](https://github.com/antlr/antlr4) | LL(*) | EBNF | Yes | No | Yes? | Yes | No |\n\n\n(\\* *PEGs cannot handle non-deterministic grammars. Also, according to Wikipedia, it remains unanswered whether PEGs can really parse all deterministic CFGs*)\n\n\n### Projects using Lark\n\n - [Poetry](https://github.com/python-poetry/poetry-core) - A utility for dependency management and packaging\n - [Vyper](https://github.com/vyperlang/vyper) - Pythonic Smart Contract Language for the EVM\n - [PyQuil](https://github.com/rigetti/pyquil) - Python library for quantum programming using Quil\n - [Preql](https://github.com/erezsh/preql) - An interpreted relational query language that compiles to SQL\n - [Hypothesis](https://github.com/HypothesisWorks/hypothesis) - Library for property-based testing\n - [mappyfile](https://github.com/geographika/mappyfile) - a MapFile parser for working with MapServer configuration\n - [tartiflette](https://github.com/dailymotion/tartiflette) - GraphQL server by Dailymotion\n - [synapse](https://github.com/vertexproject/synapse) - an intelligence analysis platform\n - [Datacube-core](https://github.com/opendatacube/datacube-core) - Open Data Cube analyses continental scale Earth Observation data through time\n - [SPFlow](https://github.com/SPFlow/SPFlow) - Library for Sum-Product Networks\n - [Torchani](https://github.com/aiqm/torchani) - Accurate Neural Network Potential on PyTorch\n - [Command-Block-Assembly](https://github.com/simon816/Command-Block-Assembly) - An assembly language, and C compiler, for Minecraft commands\n - [EQL](https://github.com/endgameinc/eql) - Event Query Language\n - [Fabric-SDK-Py](https://github.com/hyperledger/fabric-sdk-py) - Hyperledger fabric SDK with Python 3.x\n - [required](https://github.com/shezadkhan137/required) - multi-field validation using docstrings\n - [miniwdl](https://github.com/chanzuckerberg/miniwdl) - A static analysis toolkit for the Workflow Description Language\n - [pytreeview](https://gitlab.com/parmenti/pytreeview) - a lightweight tree-based grammar explorer\n - [harmalysis](https://github.com/napulen/harmalysis) - A language for harmonic analysis and music theory\n - [gersemi](https://github.com/BlankSpruce/gersemi) - A CMake code formatter\n - [MistQL](https://github.com/evinism/mistql) - A query language for JSON-like structures\n - [Outlines](https://github.com/outlines-dev/outlines) - Structured generation with Large Language Models\n\n[Full list](https://github.com/lark-parser/lark/network/dependents?package_id=UGFja2FnZS01MjI1OTE0NQ%3D%3D)\n\n## License\n\nLark uses the [MIT license](LICENSE).\n\n(The standalone tool is under MPL2)\n\n## Contributors\n\nLark accepts pull-requests. See [How to develop Lark](/docs/how_to_develop.md)\n\nBig thanks to everyone who contributed so far:\n\n  <img src=\"https://contributors-img.web.app/image?repo=lark-parser/lark\" />\n<a href=\"https://github.com/lark-parser/lark/graphs/contributors\">\n</a>\n\n## Sponsor\n\nIf you like Lark, and want to see us grow, please consider [sponsoring us!](https://github.com/sponsors/lark-parser)\n\n## Contact the author\n\nQuestions about code are best asked on [gitter](https://gitter.im/lark-parser/Lobby) or in the issues.\n\nFor anything else, I can be reached by email at erezshin at gmail com.\n\n -- [Erez](https://github.com/erezsh)\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lark",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 2.6904296875,
          "content": "[build-system]\nrequires = [\"setuptools>=61.2.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"lark\"\nauthors = [{name = \"Erez Shinan\", email = \"erezshin@gmail.com\"}]\nlicense = {text = \"MIT\"}\ndescription = \"a modern parsing library\"\nkeywords = [\"Earley\", \"LALR\", \"parser\", \"parsing\", \"ast\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"Programming Language :: Python :: 3\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\",\n    \"Topic :: Text Processing :: General\",\n    \"Topic :: Text Processing :: Linguistic\",\n    \"License :: OSI Approved :: MIT License\",\n]\nrequires-python = \">=3.8\"\ndependencies = []\ndynamic = [\"version\"]\n\n[project.readme]\ntext = \"\"\"\nLark is a modern general-purpose parsing library for Python.\nWith Lark, you can parse any context-free grammar, efficiently, with very little code.\nMain Features:\n- Builds a parse-tree (AST) automagically, based on the structure of the grammar\n- Earley parser\n- Can parse all context-free grammars\n- Full support for ambiguous grammars\n- LALR(1) parser\n- Fast and light, competitive with PLY\n- Can generate a stand-alone parser\n- CYK parser, for highly ambiguous grammars\n- EBNF grammar\n- Unicode fully supported\n- Automatic line & column tracking\n- Standard library of terminals (strings, numbers, names, etc.)\n- Import grammars from Nearley.js\n- Extensive test suite\n- And much more!\nSince version 1.2, only Python versions 3.8 and up are supported.\"\"\"\ncontent-type = \"text/markdown\"\n\n[project.urls]\nHomepage = \"https://github.com/lark-parser/lark\"\nDownload = \"https://github.com/lark-parser/lark/tarball/master\"\n\n[project.entry-points.pyinstaller40]\nhook-dirs = \"lark.__pyinstaller:get_hook_dirs\"\n\n[project.optional-dependencies]\nregex = [\"regex\"]\nnearley = [\"js2py\"]\natomic_cache = [\"atomicwrites\"]\ninteregular = [\"interegular>=0.3.1,<0.4.0\"]\n\n[tool.setuptools]\npackages = [\n    \"lark\",\n    \"lark.parsers\",\n    \"lark.tools\",\n    \"lark.grammars\",\n    \"lark.__pyinstaller\",\n]\ninclude-package-data = true\n\n[tool.setuptools.package-data]\n\"*\" = [\"*.lark\"]\nlark = [\"py.typed\"]\n\n[tool.setuptools.dynamic]\nversion = {attr = \"lark.__version__\"}\n\n[tool.mypy]\nfiles = \"lark\"\npython_version = \"3.8\"\nshow_error_codes = true\nenable_error_code = [\"ignore-without-code\", \"unused-ignore\"]\nexclude = [\n  \"^lark/__pyinstaller\",\n]\n\n# You can disable imports or control per-module/file settings here\n[[tool.mypy.overrides]]\nmodule = [ \"js2py\" ]\nignore_missing_imports = true\n\n[tool.coverage.report]\nexclude_lines = [\n    \"pragma: no cover\",\n    \"if TYPE_CHECKING:\"\n]\n[tool.pyright]\ninclude = [\"lark\"]\n\n[tool.pytest.ini_options]\nminversion = 6.0\naddopts = \"-ra -q\"\ntestpaths =[\n    \"tests\"\n]\npython_files = \"__main__.py\"\n"
        },
        {
          "name": "readthedocs.yml",
          "type": "blob",
          "size": 0.251953125,
          "content": "version: 2\n\nformats: all\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.7\"\n\npython:\n   # version: 3.7\n   install:\n      - requirements: docs/requirements.txt\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n"
        },
        {
          "name": "test-requirements.txt",
          "type": "blob",
          "size": 0.04296875,
          "content": "interegular>=0.3.1,<0.4.0\nJs2Py==0.68\nregex\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.8271484375,
          "content": "[tox]\nenvlist = lint, type, py38, py39, py310, py311, py312, py313, pypy3\nskip_missing_interpreters = true\n\n[testenv]\nwhitelist_externals = git\ndeps =\n    -rtest-requirements.txt\npassenv =\n    TERM\n\n# to always force recreation and avoid unexpected side effects\nrecreate = True\n\n# Require since the commands use `git`\nallowlist_externals = git\n\ncommands =\n    git submodule sync -q\n    git submodule update --init\n    python -m tests {posargs}\n\n[testenv:type]\ndescription = run type check on code base\nskip_install = true\nrecreate = false\ndeps =\n    mypy==1.10\n    interegular>=0.3.1,<0.4.0\n    types-atomicwrites\n    types-regex\n    rich<=13.4.1\ncommands =\n    mypy\n\n\n[testenv:lint]\ndescription = run linters on code base\nskip_install = true\nrecreate = false\ndeps =\n    pre-commit\ncommands =\n    pre-commit run --all-files --show-diff-on-failure\n"
        }
      ]
    }
  ]
}