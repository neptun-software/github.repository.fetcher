{
  "metadata": {
    "timestamp": 1736560446383,
    "page": 23,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/promptflow",
      "stars": 9759,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cspell.json",
          "type": "blob",
          "size": 4.4814453125,
          "content": "{\n  \"version\": \"0.2\",\n  \"language\": \"en\",\n  \"languageId\": \"python\",\n  \"dictionaries\": [\n    \"powershell\",\n    \"python\",\n    \"go\",\n    \"css\",\n    \"html\",\n    \"bash\",\n    \"npm\",\n    \"softwareTerms\",\n    \"en_us\",\n    \"en-gb\"\n  ],\n  \"ignorePaths\": [\n    \"**/*.js\",\n    \"**/*.mjs\",\n    \"**/*.css\",\n    \"**/*.pyc\",\n    \"**/*.log\",\n    \"**/*.jsonl\",\n    \"**/*.xml\",\n    \"**/*.txt\",\n    \".gitignore\",\n    \"examples/README.md\",\n    \"examples/flex-flows/README.md\",\n    \"examples/prompty/README.md\",\n    \"scripts/docs/_build/**\",\n    \"scripts/readme/**\",\n    \"src/promptflow-azure/promptflow/azure/_restclient/flow/**\",\n    \"src/promptflow-azure/promptflow/azure/_restclient/swagger.json\",\n    \"src/promptflow-azure/promptflow/azure/_models/**\",\n    \"src/promptflow-azure/tests/**\",\n    \"src/promptflow-core/promptflow/core/_connection_provider/_models/**\",\n    \"src/promptflow/tests/**\",\n    \"src/promptflow-devkit/tests/**\",\n    \"src/promptflow-azure/tests/**\",\n    \"src/promptflow-recording/**\",\n    \"src/promptflow-tools/tests/**\",\n    \"src/promptflow-devkit/promptflow/_sdk/_service/static/trace/index.html\",\n    \"src/promptflow-devkit/promptflow/_sdk/_service/static/chat-window/index.html\",\n    \"**/flow.dag.yaml\",\n    \"**/pyproject.toml\",\n    \"**/setup.py\",\n    \"scripts/installer/curl_install_pypi/**\",\n    \"scripts/installer/windows/**\",\n    \".github/workflows/**\",\n    \".github/actions/**\",\n    \".github/pipelines/**\",\n    \".github/CODEOWNERS\",\n    \"src/promptflow-evals/tests/**\",\n    \"benchmark/promptflow-serve/result-archive/**\"\n  ],\n  \"words\": [\n    \"amlignore\",\n    \"aoai\",\n    \"Apim\",\n    \"astext\",\n    \"attribited\",\n    \"azureai\",\n    \"azurecr\",\n    \"azureml\",\n    \"azuremlsdktestpypi\",\n    \"Bhavik\",\n    \"centralus\",\n    \"chatml\",\n    \"cref\",\n    \"e2etest\",\n    \"e2etests\",\n    \"eastus\",\n    \"Entra\",\n    \"env\",\n    \"faiss\",\n    \"geval\",\n    \"hnsw\",\n    \"junit\",\n    \"KHTML\",\n    \"Likert\",\n    \"llmlingua\",\n    \"logit\",\n    \"logprobs\",\n    \"meid\",\n    \"mgmt\",\n    \"MistralAI\",\n    \"mldesigner\",\n    \"mlflow\",\n    \"msal\",\n    \"msrest\",\n    \"myconn\",\n    \"numlines\",\n    \"nunit\",\n    \"openai\",\n    \"pfazure\",\n    \"pfbytes\",\n    \"pfcli\",\n    \"pfutil\",\n    \"Policheck\",\n    \"pydata\",\n    \"Qdrant\",\n    \"rediraffe\",\n    \"retriable\",\n    \"ROBOCOPY\",\n    \"serp\",\n    \"Summ\",\n    \"tablefmt\",\n    \"undoc\",\n    \"UNLCK\",\n    \"upia\",\n    \"uvicorn\",\n    \"vectordb\",\n    \"vnet\",\n    \"Weaviate\",\n    \"westus\",\n    \"wsid\",\n    \"Xpia\"\n  ],\n  \"ignoreWords\": [\n    \"openmpi\",\n    \"ipynb\",\n    \"xdist\",\n    \"pydash\",\n    \"tqdm\",\n    \"rtype\",\n    \"epocs\",\n    \"fout\",\n    \"funcs\",\n    \"todos\",\n    \"fstring\",\n    \"creds\",\n    \"zipp\",\n    \"gmtime\",\n    \"pyjwt\",\n    \"nbconvert\",\n    \"nbformat\",\n    \"pypandoc\",\n    \"dotenv\",\n    \"miniconda\",\n    \"datas\",\n    \"tcgetpgrp\",\n    \"yamls\",\n    \"fmt\",\n    \"serpapi\",\n    \"genutils\",\n    \"metadatas\",\n    \"tiktoken\",\n    \"bfnrt\",\n    \"orelse\",\n    \"thead\",\n    \"sympy\",\n    \"ghactions\",\n    \"esac\",\n    \"MSRC\",\n    \"pycln\",\n    \"strictyaml\",\n    \"psutil\",\n    \"getch\",\n    \"tcgetattr\",\n    \"TCSADRAIN\",\n    \"stringio\",\n    \"jsonify\",\n    \"werkzeug\",\n    \"continuumio\",\n    \"pydantic\",\n    \"iterrows\",\n    \"dtype\",\n    \"fillna\",\n    \"nlines\",\n    \"aggr\",\n    \"tcsetattr\",\n    \"pysqlite\",\n    \"AADSTS700082\",\n    \"Pyinstaller\",\n    \"runsvdir\",\n    \"runsv\",\n    \"levelno\",\n    \"LANCZOS\",\n    \"Mobius\",\n    \"ruamel\",\n    \"gunicorn\",\n    \"pkill\",\n    \"pgrep\",\n    \"Hwfoxydrg\",\n    \"llms\",\n    \"vcrpy\",\n    \"uionly\",\n    \"llmops\",\n    \"Abhishek\",\n    \"restx\",\n    \"httpx\",\n    \"tiiuae\",\n    \"nohup\",\n    \"metagenai\",\n    \"WBITS\",\n    \"laddr\",\n    \"nrows\",\n    \"Dumpable\",\n    \"XCLASS\",\n    \"otel\",\n    \"OTLP\",\n    \"spawnv\",\n    \"arxiv\",\n    \"autogen\",\n    \"spawnve\",\n    \"addrs\",\n    \"pycache\",\n    \"pywin\",\n    \"STARTF\",\n    \"mltable\",\n    \"prompty\",\n    \"Prompty\",\n    \"setenv\",\n    \"cscript\",\n    \"nologo\",\n    \"wscript\",\n    \"raisvc\",\n    \"evals\",\n    \"setenv\",\n    \"pypdf\",\n    \"redoc\",\n    \"starlette\",\n    \"mlindex\",\n    \"redef\",\n    \"rcts\",\n    \"Chunker\",\n    \"mpnet\",\n    \"wargs\",\n    \"dcid\",\n    \"aiohttp\",\n    \"endofprompt\",\n    \"tkey\",\n    \"tparam\",\n    \"ncols\",\n    \"piezo\",\n    \"Piezo\",\n    \"cmpop\",\n    \"finalizer\",\n    \"finalizers\",\n    \"amlbi\",\n    \"cmpop\",\n    \"omap\",\n    \"Machinal\",\n    \"azureopenaimodelconfiguration\",\n    \"openaimodelconfiguration\",\n    \"usecwd\",\n    \"upia\",\n    \"xpia\",\n    \"locustio\",\n    \"euap\",\n    \"Rerank\",\n    \"rerank\",\n    \"reranker\",\n    \"rcfile\",\n    \"pylintrc\",\n    \"gleu\",\n    \"Gleu\",\n    \"GLEU\",\n    \"fmeasure\",\n    \"punkt\",\n    \"BYOI\"\n  ],\n  \"flagWords\": [\n    \"Prompt Flow\"\n  ],\n  \"allowCompoundWords\": true\n}\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.65234375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\ncov.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\ntest-results.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\nscripts/docs/_build/\nscripts/docs/jupyter_execute/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# Vscode\n.vscode/\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n\n# ignore\n!flow.tools.json\n**/.promptflow/*\n.runs\nconnection.json\n.env\n.azureml\n# dummy custom tool package example\nhello-world-proj/**\n# gen test data config\nexamples/gen_test_data/config.yml\n# secrets\n**/connections.json\n\n**/bash_script.sh\n**/bash_script_pytest.sh\n\n.index\n.pdfs\nconfig.json\n\n# chat-with-pdf's prebuilt index\n!.pdfs/\n!.index/\n\n# Poetry\npoetry.lock\n# promptflow subpackages __init__\nsrc/promptflow-*/promptflow/__init__.py\n\n# Eclipse project files\n**/.project\n**/.pydevproject\n**/.settings\n\n# benchmark results\nbenchmark/promptflow-serve/test_runner/locust-results/"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.1318359375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\n\nexclude: '(^docs/)|flows|scripts|src/promptflow-azure/promptflow/azure/_restclient/|src/promptflow-core/promptflow/core/_connection_provider/_models/|src/promptflow-azure/promptflow/azure/_models/|src/promptflow/tests/test_configs|src/promptflow-tools|src/promptflow-devkit/promptflow/_sdk/_service/static'\n\nrepos:\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v3.2.0\n      hooks:\n          - id: trailing-whitespace\n          - id: end-of-file-fixer\n          - id: check-yaml\n          - id: check-json\n          - id: check-merge-conflict\n    - repo: https://github.com/psf/black\n      rev: 22.3.0 # Replace by any tag/version: https://github.com/psf/black/tags\n      hooks:\n          - id: black\n            language_version: python3 # Should be a command that runs python3.6+\n            args:\n                - \"--line-length=120\"\n    - repo: https://github.com/pre-commit/pre-commit-hooks\n      rev: v2.3.0\n      hooks:\n          - id: flake8\n    # Temporary disable this since it gets stuck when updating env\n    - repo: https://github.com/streetsidesoftware/cspell-cli\n      rev: v7.3.0\n      hooks:\n      - id: cspell\n        args: ['--config', '.cspell.json', \"--no-must-find-files\"]\n    - repo: https://github.com/hadialqattan/pycln\n      rev: v2.1.2 # Possible releases: https://github.com/hadialqattan/pycln/tags\n      hooks:\n          - id: pycln\n            name: \"Clean unused python imports\"\n            args: [--config=setup.cfg]\n    - repo: https://github.com/pycqa/isort\n      rev: 5.12.0\n      hooks:\n        - id: isort\n          # stages: [commit]\n          name: isort-python\n          # Use black profile for isort to avoid conflicts\n          # see https://github.com/PyCQA/isort/issues/1518\n          args: [\"--profile\", \"black\", --line-length=120]\n    # Commented out for now since it's not working locally but works on CI\n    # - repo: https://github.com/pylint-dev/pylint\n    #   rev: v3.0.3\n    #   hooks:\n    #     - id: pylint\n    #       name: pylint\n    #       args: [ --rcfile=pylintrc, --output-format=parseable ]\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.43359375,
          "content": "# Microsoft Open Source Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\n\nResources:\n\n- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)\n- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\n- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.5107421875,
          "content": "# Contributing to Prompt Flow\nYou can contribute to prompt flow with issues and pull requests (PRs). Simply\nfiling issues for problems you encounter is a great way to contribute. Contributing\ncode is greatly appreciated.\n\n## Reporting Issues\n\nWe always welcome bug reports, API proposals and overall feedback. Here are a few\ntips on how you can make reporting your issue as effective as possible.\n\n### Where to Report\n\nNew issues can be reported in our [list of issues](https://github.com/microsoft/promptflow/issues).\n\nBefore filing a new issue, please search the list of issues to make sure it does\nnot already exist.\n\nIf you do find an existing issue for what you wanted to report, please include\nyour own feedback in the discussion. Do consider upvoting (👍 reaction) the original\npost, as this helps us prioritize popular issues in our backlog.\n\n### Writing a Good Bug Report\n\nGood bug reports make it easier for maintainers to verify and root cause the\nunderlying problem.\nThe better a bug report, the faster the problem will be resolved. Ideally, a bug\nreport should contain the following information:\n\n- A high-level description of the problem.\n- A _minimal reproduction_, i.e. the smallest size of code/configuration required\n  to reproduce the wrong behavior.\n- A description of the _expected behavior_, contrasted with the _actual behavior_ observed.\n- Information on the environment: OS/distribution, CPU architecture, SDK version, etc.\n- Additional information, e.g. Is it a regression from previous versions? Are there\n  any known workarounds?\n\n## Contributing Changes\n\nProject maintainers will merge accepted code changes from contributors.\n\n### DOs and DON'Ts\n\nDO's:\n\n- **DO** follow the standard coding conventions: [Python](https://pypi.org/project/black/)\n- **DO** give priority to the current style of the project or file you're changing\n  if it diverges from the general guidelines.\n- **DO** include tests when adding new features. When fixing bugs, start with\n  adding a test that highlights how the current behavior is broken.\n- **DO** add proper docstring for functions and classes following [API Documentation Guidelines](./docs/dev/documentation_guidelines.md).\n- **DO** keep the discussions focused. When a new or related topic comes up\n  it's often better to create new issue than to side track the discussion.\n- **DO** clearly state on an issue that you are going to take on implementing it.\n- **DO** blog and tweet (or whatever) about your contributions, frequently!\n\nDON'Ts:\n\n- **DON'T** surprise us with big pull requests. Instead, file an issue and start\n  a discussion so we can agree on a direction before you invest a large amount of time.\n- **DON'T** commit code that you didn't write. If you find code that you think is a good\n  fit to add to prompt flow, file an issue and start a discussion before proceeding.\n- **DON'T** submit PRs that alter licensing related files or headers. If you believe\n  there's a problem with them, file an issue and we'll be happy to discuss it.\n- **DON'T** make new APIs without filing an issue and discussing with us first.\n\n### Breaking Changes\n\nContributions must maintain API signature and behavioral compatibility. Contributions\nthat include breaking changes will be rejected. Please file an issue to discuss\nyour idea or change if you believe that a breaking change is warranted.\n\n### Suggested Workflow\n\nWe use and recommend the following workflow:\n\n1. Create an issue for your work, or reuse an existing issue on the same topic.\n   - Get agreement from the team and the community that your proposed change is\n     a good one.\n   - Clearly state that you are going to take on implementing it, if that's the case.\n     You can request that the issue be assigned to you. Note: The issue filer and\n     the implementer don't have to be the same person.\n2. Create a personal fork of the repository on GitHub (if you don't already have one).\n3. In your fork, create a branch off of main (`git checkout -b my_branch`).\n   - Name the branch so that it clearly communicates your intentions, such as\n     \"issue-123\" or \"githubhandle-issue\".\n4. Make and commit your changes to your branch.\n5. Add new tests corresponding to your change, if applicable.\n6. Run the relevant scripts in [the section below](https://github.com/microsoft/promptflow/blob/main/CONTRIBUTING.md#dev-scripts) to ensure that your build is clean and all tests are passing.\n7. Create a PR against the repository's **main** branch.\n   - State in the description what issue or improvement your change is addressing.\n   - Link the PR to the issue in step 1.\n   - Verify that all the Continuous Integration checks are passing.\n8. Wait for feedback or approval of your changes from the code maintainers.\n   - If there is no response for a few days, you can create a new issue to raise awareness.\n     Promptflow team has triage process toward issues without assignee,\n     then you can directly contact the issue owner to follow up (e.g. loop related internal reviewer).\n9. When area owners have signed off, and all checks are green, your PR will be merged.\n\n### Development scripts\n\nThe scripts below are used to build, test, and lint within the project.\n\n- see [doc/dev/dev_setup.md](https://github.com/microsoft/promptflow/blob/main/docs/dev/dev_setup.md).\n\n\n### PR - CI Process\n\nThe continuous integration (CI) system will automatically perform the required\nbuilds and run tests (including the ones you are expected to run) for PRs. Builds\nand test runs must be clean.\n\nIf the CI build fails for any reason, the PR issue will be updated with a link\nthat can be used to determine the cause of the failure.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1142578125,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.6669921875,
          "content": "# Prompt flow\n\n[![Python package](https://img.shields.io/pypi/v/promptflow)](https://pypi.org/project/promptflow/)\n[![Python](https://img.shields.io/pypi/pyversions/promptflow.svg?maxAge=2592000)](https://pypi.python.org/pypi/promptflow/)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/promptflow)](https://pypi.org/project/promptflow/)\n[![CLI](https://img.shields.io/badge/CLI-reference-blue)](https://microsoft.github.io/promptflow/reference/pf-command-reference.html)\n[![vsc extension](https://img.shields.io/visual-studio-marketplace/i/prompt-flow.prompt-flow?logo=Visual%20Studio&label=Extension%20)](https://marketplace.visualstudio.com/items?itemName=prompt-flow.prompt-flow)\n\n[![Doc](https://img.shields.io/badge/Doc-online-green)](https://microsoft.github.io/promptflow/index.html)\n[![Issue](https://img.shields.io/github/issues/microsoft/promptflow)](https://github.com/microsoft/promptflow/issues/new/choose)\n[![Discussions](https://img.shields.io/github/discussions/microsoft/promptflow)](https://github.com/microsoft/promptflow/issues/new/choose)\n[![CONTRIBUTING](https://img.shields.io/badge/Contributing-8A2BE2)](https://github.com/microsoft/promptflow/blob/main/CONTRIBUTING.md)\n[![License: MIT](https://img.shields.io/github/license/microsoft/promptflow)](https://github.com/microsoft/promptflow/blob/main/LICENSE)\n\n> Welcome to join us to make prompt flow better by\n> participating [discussions](https://github.com/microsoft/promptflow/discussions),\n> opening [issues](https://github.com/microsoft/promptflow/issues/new/choose),\n> submitting [PRs](https://github.com/microsoft/promptflow/pulls).\n\n**Prompt flow** is a suite of development tools designed to streamline the end-to-end development cycle of LLM-based AI applications, from ideation, prototyping, testing, evaluation to production deployment and monitoring. It makes prompt engineering much easier and enables you to build LLM apps with production quality.\n\nWith prompt flow, you will be able to:\n\n- **Create and iteratively develop flow**\n    - Create executable [flows](https://microsoft.github.io/promptflow/concepts/concept-flows.html) that link LLMs, prompts, Python code and other [tools](https://microsoft.github.io/promptflow/concepts/concept-tools.html) together.\n    - Debug and iterate your flows, especially [tracing interaction with LLMs](https://microsoft.github.io/promptflow/how-to-guides/tracing/index.html) with ease.\n- **Evaluate flow quality and performance**\n    - Evaluate your flow's quality and performance with larger datasets.\n    - Integrate the testing and evaluation into your CI/CD system to ensure quality of your flow.\n- **Streamlined development cycle for production**\n    - Deploy your flow to the serving platform you choose or integrate into your app's code base easily.\n    - (Optional but highly recommended) Collaborate with your team by leveraging the cloud version of [Prompt flow in Azure AI](https://learn.microsoft.com/en-us/azure/machine-learning/prompt-flow/overview-what-is-prompt-flow?view=azureml-api-2).\n\n------\n\n## Installation\n\nTo get started quickly, you can use a pre-built development environment. **Click the button below** to open the repo in GitHub Codespaces, and then continue the readme!\n\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/microsoft/promptflow?quickstart=1)\n\nIf you want to get started in your local environment, first install the packages:\n\nEnsure you have a python environment, `python>=3.9, <=3.11` is recommended.\n\n```sh\npip install promptflow promptflow-tools\n```\n\n## Quick Start ⚡\n\n**Create a chatbot with prompt flow**\n\nRun the command to initiate a prompt flow from a chat template, it creates folder named `my_chatbot` and generates required files within it:\n\n```sh\npf flow init --flow ./my_chatbot --type chat\n```\n\n**Setup a connection for your API key**\n\nFor OpenAI key, establish a connection by running the command, using the `openai.yaml` file in the `my_chatbot` folder, which stores your OpenAI key (override keys and name with --set to avoid yaml file changes):\n\n```sh\npf connection create --file ./my_chatbot/openai.yaml --set api_key=<your_api_key> --name open_ai_connection\n```\n\nFor Azure OpenAI key, establish the connection by running the command, using the `azure_openai.yaml` file:\n\n```sh\npf connection create --file ./my_chatbot/azure_openai.yaml --set api_key=<your_api_key> api_base=<your_api_base> --name open_ai_connection\n```\n\n**Chat with your flow**\n\nIn the `my_chatbot` folder, there's a `flow.dag.yaml` file that outlines the flow, including inputs/outputs, nodes,  connection, and the LLM model, etc\n\n> Note that in the `chat` node, we're using a connection named `open_ai_connection` (specified in `connection` field) and the `gpt-35-turbo` model (specified in `deployment_name` field). The deployment_name filed is to specify the OpenAI model, or the Azure OpenAI deployment resource.\n\nInteract with your chatbot by running: (press `Ctrl + C` to end the session)\n\n```sh\npf flow test --flow ./my_chatbot --interactive\n```\n\n**Core value: ensuring \"High Quality” from prototype to production**\n\nExplore our [**15-minute tutorial**](examples/tutorials/flow-fine-tuning-evaluation/promptflow-quality-improvement.md) that guides you through prompt tuning ➡ batch testing ➡ evaluation, all designed to ensure high quality ready for production.\n\nNext Step! Continue with the **Tutorial**  👇 section to delve deeper into prompt flow.\n\n## Tutorial 🏃‍♂️\n\nPrompt flow is a tool designed to **build high quality LLM apps**, the development process in prompt flow follows these steps: develop a flow, improve the flow quality, deploy the flow to production.\n\n### Develop your own LLM apps\n\n#### VS Code Extension\n\nWe also offer a VS Code extension (a flow designer) for an interactive flow development experience with UI.\n\n<img src=\"docs/media/readme/vsc.png\" alt=\"vsc\" width=\"1000\"/>\n\nYou can install it from the <a href=\"https://marketplace.visualstudio.com/items?itemName=prompt-flow.prompt-flow\">visualstudio marketplace</a>.\n\n#### Deep delve into flow development\n\n[Getting started with prompt flow](./docs/how-to-guides/quick-start.md): A step by step guidance to invoke your first flow run.\n\n### Learn from use cases\n\n[Tutorial: Chat with PDF](https://github.com/microsoft/promptflow/blob/main/examples/tutorials/e2e-development/chat-with-pdf.md): An end-to-end tutorial on how to build a high quality chat application with prompt flow, including flow development and evaluation with metrics.\n> More examples can be found [here](https://microsoft.github.io/promptflow/tutorials/index.html#samples). We welcome contributions of new use cases!\n\n### Setup for contributors\n\nIf you're interested in contributing, please start with our dev setup guide: [dev_setup.md](./docs/dev/dev_setup.md).\n\nNext Step! Continue with the **Contributing**  👇 section to contribute to prompt flow.\n\n## Contributing\n\nThis project welcomes contributions and suggestions.  Most contributions require you to agree to a\nContributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us\nthe rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.\n\nWhen you submit a pull request, a CLA bot will automatically determine whether you need to provide\na CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions\nprovided by the bot. You will only need to do this once across all repos using our CLA.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or\ncontact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Trademarks\n\nThis project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft\ntrademarks or logos is subject to and must follow\n[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).\nUse of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.\nAny use of third-party trademarks or logos are subject to those third-party's policies.\n\n## Code of Conduct\n\nThis project has adopted the\n[Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).\nFor more information see the\n[Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)\nor contact [opencode@microsoft.com](mailto:opencode@microsoft.com)\nwith any additional questions or comments.\n\n## Data Collection\n\nThe software may collect information about you and your use of the software and\nsend it to Microsoft if configured to enable telemetry.\nMicrosoft may use this information to provide services and improve our products and services.\nYou may turn on the telemetry as described in the repository.\nThere are also some features in the software that may enable you and Microsoft\nto collect data from users of your applications. If you use these features, you\nmust comply with applicable law, including providing appropriate notices to\nusers of your applications together with a copy of Microsoft's privacy\nstatement. Our privacy statement is located at\nhttps://go.microsoft.com/fwlink/?LinkID=824704. You can learn more about data\ncollection and use in the help documentation and our privacy statement. Your\nuse of the software operates as your consent to these practices.\n\n### Telemetry Configuration\n\nTelemetry collection is on by default.\n\nTo opt out, please run `pf config set telemetry.enabled=false` to turn it off.\n\n## License\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the [MIT](LICENSE) license.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.69140625,
          "content": "<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n"
        },
        {
          "name": "SUPPORT.md",
          "type": "blob",
          "size": 0.375,
          "content": "# Support\r\n\r\n## How to file issues and get help\r\n\r\nThis project uses GitHub Issues to track bugs and feature requests. Please search the existing\r\nissues before filing new issues to avoid duplicates.  For new issues, file your bug or\r\nfeature request as a new Issue.\r\n\r\n## Microsoft Support Policy\r\n\r\nSupport for this **PROJECT or PRODUCT** is limited to the resources listed above.\r\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pylintrc",
          "type": "blob",
          "size": 2.2841796875,
          "content": "[MASTER]\npy-version=3.9\nignore-patterns=test_*,conftest,setup,.*_utils\\.py\nignore-paths=src\\promptflow-evals\\tests,src\\promptflow-evals\\samples,promptflow\\evals\\evaluate\\_telemetry,promptflow\\evals\\evaluate\\_batch_run_client\\code_client.py,promptflow\\evals\\evaluate\\_batch_run_client\\proxy_client.py,src/promptflow-devkit/tests/sdk_pfs_test/utils.py\nreports=no\n\n[MESSAGES CONTROL]\n# For all codes, run 'pylint --list-msgs' or go to 'https://pylint.pycqa.org/en/latest/technical_reference/features.html'\n# locally-disabled: Warning locally suppressed using disable-msg\n# cyclic-import: because of https://github.com/PyCQA/pylint/issues/850\n# too-many-arguments: Due to the nature of the CLI many commands have large arguments set which reflect in large arguments set in corresponding methods.\n# Let's black deal with bad-continuation\n\n# Added disables from super-with-arguments\ndisable=useless-object-inheritance,missing-timeout,logging-fstring-interpolation,locally-disabled,fixme,cyclic-import,unnecessary-lambda-assignment,too-many-arguments,invalid-name,duplicate-code,too-few-public-methods,consider-using-f-string,super-with-arguments,redefined-builtin,import-outside-toplevel,unnecessary-dunder-call,unnecessary-ellipsis,protected-access,missing-module-docstring\n\n[FORMAT]\nmax-line-length=120\n\n[VARIABLES]\n# Tells whether we should check for unused import in __init__ files.\ninit-import=yes\n\n[DESIGN]\n# Maximum number of locals for function / method body\nmax-locals=25\n# Maximum number of branch for function / method body\nmax-branches=20\n# Maximum number of instance attributes for class\nmax-attributes=10\n# Maximum number of ancestors\nmax-parents=15\n\n[SIMILARITIES]\nmin-similarity-lines=10\n\n[BASIC]\n# Naming hints based on PEP 8 (https://www.python.org/dev/peps/pep-0008/#naming-conventions).\n# Consider these guidelines and not hard rules. Read PEP 8 for more details.\n\n# The invalid-name checker must be **enabled** for these hints to be used.\ninclude-naming-hint=yes\n\nmodule-naming-style=snake_case\nconst-naming-style=UPPER_CASE\nclass-naming-style=PascalCase\nclass-attribute-naming-style=snake_case\nattr-naming-style=snake_case\nmethod-naming-style=snake_case\nfunction-naming-style=snake_case\nargument-naming-style=snake_case\nvariable-naming-style=snake_case\ninlinevar-naming-style=snake_case\n\n[TYPECHECK]\ngenerated-members=js.*\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.23828125,
          "content": "[flake8]\nextend-ignore = E203, E266, W503, F403, F821\nmax-line-length = 120\nenable-extensions = E123,E133,E241,E242,E704,W505\nexclude =\n    .git\n    .tox\n    .eggs\n    __pycache__\n    tests/fixtures/*\n    docs/*\n    venv,.pytest_cache\n    build\n    src/promptflow-azure/promptflow/azure/_restclient\n    src/promptflow-azure/promptflow/azure/_models\n    src/promptflow-core/promptflow/core/_connection_provider/_models\n    src/promptflow/tests/test_configs/*\nimport-order-style = google\n\n[mypy]\nignore_missing_imports = True\ndisallow_untyped_defs = True\n\n[mypy-pytest,pytest_mock]\nignore_missing_imports = True\n\n[tool:pycln]\nquiet = True\n\n[black]\nline_length = 120\n\n[pycln]\nsilence = True\n\n[isort]\n# we use check for make fmt*\nprofile = \"black\"\n# no need to fmt ignored\nskip_gitignore = true\n# needs to be the same as in black\nline_length = 120\nuse_parentheses = true\ninclude_trailing_comma = true\nhonor_noqa = true\nensure_newline_before_comments = true\nskip_glob = [\n        docs/**,\n        pipelines/**,\n        pytest/**,\n        samples/**,\n    ]\nknown_third_party = azure,mock,numpy,pandas,pydash,pytest,pytest_mock,requests,setuptools,six,sklearn,tqdm,urllib3,utilities,utils,yaml,jsonschema,strictyaml,jwt,pathspec,isodate,docker\nknown_first_party = promptflow\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}