{
  "metadata": {
    "timestamp": 1736560897517,
    "page": 620,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "davidhalter/jedi",
      "stars": 5849,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.3056640625,
          "content": "[run]\nomit =\n    jedi/_compatibility.py\n    jedi/inference/compiled/subprocess/__main__.py\n    jedi/__main__.py\n    # For now this is not being used.\n\n[report]\n# Regexes for lines to exclude from consideration\nexclude_lines =\n    # Don't complain about missing debug-only code:\n    def __repr__\n    debug.warning\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1748046875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.py]\nindent_size = 4\n\n[*.md]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.3115234375,
          "content": "# all end-of-lines are normalized to LF when written to the repository\n# https://git-scm.com/docs/gitattributes#_text\n* text=auto\n\n# force all text files on the working dir to have LF line endings\n# https://git-scm.com/docs/gitattributes#_eol\n* text eol=lf\n\n# PNGs are not text and should not be normalized\n*.png -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1630859375,
          "content": "*~\n*.sw?\n*.pyc\n.ropeproject\n.coveralls.yml\n.coverage\n.idea\n/build/\n/docs/_build/\n/dist/\njedi.egg-info/\nrecord.json\n/.cache/\n/.pytest_cache\n/.mypy_cache\n/venv/\n.nvimrc\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.251953125,
          "content": "[submodule \"jedi/third_party/typeshed\"]\n\tpath = jedi/third_party/typeshed\n\turl = https://github.com/davidhalter/typeshed.git\n[submodule \"jedi/third_party/django-stubs\"]\n\tpath = jedi/third_party/django-stubs\n\turl = https://github.com/davidhalter/django-stubs\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.212890625,
          "content": "version: 2\n\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n\nsubmodules:\n  include: all\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.11\"\n  apt_packages:\n    - graphviz\n"
        },
        {
          "name": "AUTHORS.txt",
          "type": "blob",
          "size": 2.5986328125,
          "content": "Main Authors\n------------\n\n- David Halter (@davidhalter) <davidhalter88@gmail.com>\n- Takafumi Arakaki (@tkf) <aka.tkf@gmail.com>\n\nCode Contributors\n-----------------\n\n- Danilo Bargen (@dbrgn) <mail@dbrgn.ch>\n- Laurens Van Houtven (@lvh) <_@lvh.cc>\n- Aldo Stracquadanio (@Astrac) <aldo.strac@gmail.com>\n- Jean-Louis Fuchs (@ganwell) <ganwell@fangorn.ch>\n- tek (@tek)\n- Yasha Borevich (@jjay) <j.borevich@gmail.com>\n- Aaron Griffin <aaronmgriffin@gmail.com>\n- andviro (@andviro)\n- Mike Gilbert (@floppym) <floppym@gentoo.org>\n- Aaron Meurer (@asmeurer) <asmeurer@gmail.com>\n- Lubos Trilety <ltrilety@redhat.com>\n- Akinori Hattori (@hattya) <hattya@gmail.com>\n- srusskih (@srusskih)\n- Steven Silvester (@blink1073)\n- Colin Duquesnoy (@ColinDuquesnoy) <colin.duquesnoy@gmail.com>\n- Jorgen Schaefer (@jorgenschaefer) <contact@jorgenschaefer.de>\n- Fredrik Bergroth (@fbergroth)\n- Mathias Fußenegger (@mfussenegger)\n- Syohei Yoshida (@syohex) <syohex@gmail.com>\n- ppalucky (@ppalucky)\n- immerrr (@immerrr) immerrr@gmail.com\n- Albertas Agejevas (@alga)\n- Savor d'Isavano (@KenetJervet) <newelevenken@163.com>\n- Phillip Berndt (@phillipberndt) <phillip.berndt@gmail.com>\n- Ian Lee (@IanLee1521) <IanLee1521@gmail.com>\n- Farkhad Khatamov (@hatamov) <comsgn@gmail.com>\n- Kevin Kelley (@kelleyk) <kelleyk@kelleyk.net>\n- Sid Shanker (@squidarth) <sid.p.shanker@gmail.com>\n- Reinoud Elhorst (@reinhrst)\n- Guido van Rossum (@gvanrossum) <guido@python.org>\n- Dmytro Sadovnychyi (@sadovnychyi) <jedi@dmit.ro>\n- Cristi Burcă (@scribu)\n- bstaint (@bstaint)\n- Mathias Rav (@Mortal) <rav@cs.au.dk>\n- Daniel Fiterman (@dfit99) <fitermandaniel2@gmail.com>\n- Simon Ruggier (@sruggier)\n- Élie Gouzien (@ElieGouzien)\n- Robin Roth (@robinro)\n- Malte Plath (@langsamer)\n- Anton Zub (@zabulazza)\n- Maksim Novikov (@m-novikov) <mnovikov.work@gmail.com>\n- Tobias Rzepka (@TobiasRzepka)\n- micbou (@micbou)\n- Dima Gerasimov (@karlicoss) <karlicoss@gmail.com>\n- Max Woerner Chase (@mwchase) <max.chase@gmail.com>\n- Johannes Maria Frank (@jmfrank63) <jmfrank63@gmail.com>\n- Shane Steinert-Threlkeld (@shanest) <ssshanest@gmail.com>\n- Tim Gates (@timgates42) <tim.gates@iress.com>\n- Lior Goldberg (@goldberglior)\n- Ryan Clary (@mrclary)\n- Max Mäusezahl (@mmaeusezahl) <maxmaeusezahl@googlemail.com>\n- Vladislav Serebrennikov (@endilll)\n- Andrii Kolomoiets (@muffinmad)\n- Leo Ryu (@Leo-Ryu)\n- Joseph Birkner (@josephbirkner)\n- Márcio Mazza (@marciomazza)\n- Martin Vielsmaier (@moser) <martin@vielsmaier.net>\n- TingJia Wu (@WutingjiaX) <wutingjia@bytedance.com>\n- Nguyễn Hồng Quân <ng.hong.quan@gmail.com>\n\nAnd a few more \"anonymous\" contributors.\n\nNote: (@user) means a github user name.\n"
        },
        {
          "name": "CHANGELOG.rst",
          "type": "blob",
          "size": 11.212890625,
          "content": ".. :changelog:\n\nChangelog\n---------\n\nUnreleased\n++++++++++\n\n0.19.2 (2024-11-10)\n+++++++++++++++++++\n\n- Python 3.13 support\n\n0.19.1 (2023-10-02)\n+++++++++++++++++++\n\n- Python 3.12 support (Thanks Peter!)\n\n0.19.0 (2023-07-29)\n+++++++++++++++++++\n\n- Python 3.11 support\n- Massive improvements in performance for ``Interpreter`` (e.g. IPython) users.\n  This especially affects ``pandas`` users with large datasets.\n- Add ``jedi.settings.allow_unsafe_interpreter_executions`` to make it easier\n  for IPython users to avoid unsafe executions.\n\n0.18.2 (2022-11-21)\n+++++++++++++++++++\n\n- Added dataclass-equivalent for attrs.define\n- Find fixtures from Pytest entrypoints; Examples of pytest plugins installed\n  like this are pytest-django, pytest-sugar and Faker.\n- Fixed Project.search, when a venv was involved, which is why for example\n  `:Pyimport django.db` did not work in some cases in jedi-vim.\n- And many smaller bugfixes\n\n0.18.1 (2021-11-17)\n+++++++++++++++++++\n\n- Implict namespaces are now a separate types in ``Name().type``\n- Python 3.10 support\n- Mostly bugfixes\n\n0.18.0 (2020-12-25)\n+++++++++++++++++++\n\n- Dropped Python 2 and Python 3.5\n- Using ``pathlib.Path()`` as an output instead of ``str`` in most places:\n  - ``Project.path``\n  - ``Script.path``\n  - ``Definition.module_path``\n  - ``Refactoring.get_renames``\n  - ``Refactoring.get_changed_files``\n- Functions with ``@property`` now return ``property`` instead of ``function``\n  in ``Name().type``\n- Started using annotations\n- Better support for the walrus operator\n- Project attributes are now read accessible\n- Removed all deprecations\n\nThis is likely going to be the last minor release before 1.0.\n\n0.17.2 (2020-07-17)\n+++++++++++++++++++\n\n- Added an option to pass environment variables to ``Environment``\n- ``Project(...).path`` exists now\n- Support for Python 3.9\n- A few bugfixes\n\nThis will be the last release that supports Python 2 and Python 3.5.\n``0.18.0`` will be Python 3.6+.\n\n0.17.1 (2020-06-20)\n+++++++++++++++++++\n\n- Django ``Model`` meta class support\n- Django Manager support (completion on Managers/QuerySets)\n- Added Django Stubs to Jedi, thanks to all contributors of the\n  `Django Stubs <https://github.com/typeddjango/django-stubs>`_ project\n- Added ``SyntaxError.get_message``\n- Python 3.9 support\n- Bugfixes (mostly towards Generics)\n\n0.17.0 (2020-04-14)\n+++++++++++++++++++\n\n- Added ``Project`` support. This allows a user to specify which folders Jedi\n  should work with.\n- Added support for Refactoring. The following refactorings have been\n  implemented: ``Script.rename``, ``Script.inline``,\n  ``Script.extract_variable`` and ``Script.extract_function``.\n- Added ``Script.get_syntax_errors`` to display syntax errors in the current\n  script.\n- Added code search capabilities both for individual files and projects. The\n  new functions are ``Project.search``, ``Project.complete_search``,\n  ``Script.search`` and ``Script.complete_search``.\n- Added ``Script.help`` to make it easier to display a help window to people.\n  Now returns pydoc information as well for Python keywords/operators.  This\n  means that on the class keyword it will now return the docstring of Python's\n  builtin function ``help('class')``.\n- The API documentation is now way more readable and complete. Check it out\n  under https://jedi.readthedocs.io. A lot of it has been rewritten.\n- Removed Python 3.4 support\n- Many bugfixes\n\nThis is likely going to be the last minor version that supports Python 2 and\nPython3.5. Bugfixes will be provided in 0.17.1+. The next minor/major version\nwill probably be Jedi 1.0.0.\n\n0.16.0 (2020-01-26)\n+++++++++++++++++++\n\n- **Added** ``Script.get_context`` to get information where you currently are.\n- Completions/type inference of **Pytest fixtures**.\n- Tensorflow, Numpy and Pandas completions should now be about **4-10x faster**\n  after the first time they are used.\n- Dict key completions are working now. e.g. ``d = {1000: 3}; d[10`` will\n  expand to ``1000``.\n- Completion for \"proxies\" works now. These are classes that have a\n  ``__getattr__(self, name)`` method that does a ``return getattr(x, name)``.\n  after loading them initially.\n- Goto on a function/attribute in a class now goes to the definition in its\n  super class.\n- Big **Script API Changes**:\n    - The line and column parameters of ``jedi.Script`` are now deprecated\n    - ``completions`` deprecated, use ``complete`` instead\n    - ``goto_assignments`` deprecated, use ``goto`` instead\n    - ``goto_definitions`` deprecated, use ``infer`` instead\n    - ``call_signatures`` deprecated, use ``get_signatures`` instead\n    - ``usages`` deprecated, use ``get_references`` instead\n    - ``jedi.names`` deprecated, use ``jedi.Script(...).get_names()``\n- ``BaseName.goto_assignments`` renamed to ``BaseName.goto``\n- Add follow_imports to ``Name.goto``. Now its signature matches\n  ``Script.goto``.\n- **Python 2 support deprecated**. For this release it is best effort. Python 2\n  has reached the end of its life and now it's just about a smooth transition.\n  Bugs for Python 2 will not be fixed anymore and a third of the tests are\n  already skipped.\n- Removed ``settings.no_completion_duplicates``. It wasn't tested and nobody\n  was probably using it anyway.\n- Removed ``settings.use_filesystem_cache`` and\n  ``settings.additional_dynamic_modules``, they have no usage anymore. Pretty\n  much nobody was probably using them.\n\n0.15.2 (2019-12-20)\n+++++++++++++++++++\n\n- Signatures are now detected a lot better\n- Add fuzzy completions with ``Script(...).completions(fuzzy=True)``\n- Files bigger than one MB (about 20kLOC) get cropped to avoid getting\n  stuck completely.\n- Many small Bugfixes\n- A big refactoring around contexts/values\n\n0.15.1 (2019-08-13)\n+++++++++++++++++++\n\n- Small bugfix and removal of a print statement\n\n0.15.0 (2019-08-11)\n+++++++++++++++++++\n\n- Added file path completions, there's a **new** ``Completion.type`` now:\n  ``path``. Example: ``'/ho`` -> ``'/home/``\n- ``*args``/``**kwargs`` resolving. If possible Jedi replaces the parameters\n  with the actual alternatives.\n- Better support for enums/dataclasses\n- When using Interpreter, properties are now executed, since a lot of people\n  have complained about this. Discussion in #1299, #1347.\n\nNew APIs:\n\n- ``Name.get_signatures() -> List[Signature]``. Signatures are similar to\n  ``CallSignature``. ``Name.params`` is therefore deprecated.\n- ``Signature.to_string()`` to format signatures.\n- ``Signature.params -> List[ParamName]``, ParamName has the\n  following additional attributes ``infer_default()``, ``infer_annotation()``,\n  ``to_string()``, and ``kind``.\n- ``Name.execute() -> List[Name]``, makes it possible to infer\n  return values of functions.\n\n\n0.14.1 (2019-07-13)\n+++++++++++++++++++\n\n- CallSignature.index should now be working a lot better\n- A couple of smaller bugfixes\n\n0.14.0 (2019-06-20)\n+++++++++++++++++++\n\n- Added ``goto_*(prefer_stubs=True)`` as well as ``goto_*(prefer_stubs=True)``\n- Stubs are used now for type inference\n- Typeshed is used for better type inference\n- Reworked Name.full_name, should have more correct return values\n\n0.13.3 (2019-02-24)\n+++++++++++++++++++\n\n- Fixed an issue with embedded Python, see https://github.com/davidhalter/jedi-vim/issues/870\n\n0.13.2 (2018-12-15)\n+++++++++++++++++++\n\n- Fixed a bug that led to Jedi spawning a lot of subprocesses.\n\n0.13.1 (2018-10-02)\n+++++++++++++++++++\n\n- Bugfixes, because tensorflow completions were still slow.\n\n0.13.0 (2018-10-02)\n+++++++++++++++++++\n\n- A small release. Some bug fixes.\n- Remove Python 3.3 support. Python 3.3 support has been dropped by the Python\n  foundation.\n- Default environments are now using the same Python version as the Python\n  process. In 0.12.x, we used to load the latest Python version on the system.\n- Added ``include_builtins`` as a parameter to usages.\n- ``goto_assignments`` has a new ``follow_builtin_imports`` parameter that\n  changes the previous behavior slightly.\n\n0.12.1 (2018-06-30)\n+++++++++++++++++++\n\n- This release forces you to upgrade parso. If you don't, nothing will work\n  anymore. Otherwise changes should be limited to bug fixes. Unfortunately Jedi\n  still uses a few internals of parso that make it hard to keep compatibility\n  over multiple releases. Parso >=0.3.0 is going to be needed.\n\n0.12.0 (2018-04-15)\n+++++++++++++++++++\n\n- Virtualenv/Environment support\n- F-String Completion/Goto Support\n- Cannot crash with segfaults anymore\n- Cleaned up import logic\n- Understand async/await and autocomplete it (including async generators)\n- Better namespace completions\n- Passing tests for Windows (including CI for Windows)\n- Remove Python 2.6 support\n\n0.11.1 (2017-12-14)\n+++++++++++++++++++\n\n- Parso update - the caching layer was broken\n- Better usages - a lot of internal code was ripped out and improved.\n\n0.11.0 (2017-09-20)\n+++++++++++++++++++\n\n- Split Jedi's parser into a separate project called ``parso``.\n- Avoiding side effects in REPL completion.\n- Numpy docstring support should be much better.\n- Moved the `settings.*recursion*` away, they are no longer usable.\n\n0.10.2 (2017-04-05)\n+++++++++++++++++++\n\n- Python Packaging sucks. Some files were not included in 0.10.1.\n\n0.10.1 (2017-04-05)\n+++++++++++++++++++\n\n- Fixed a few very annoying bugs.\n- Prepared the parser to be factored out of Jedi.\n\n0.10.0 (2017-02-03)\n+++++++++++++++++++\n\n- Actual semantic completions for the complete Python syntax.\n- Basic type inference for ``yield from`` PEP 380.\n- PEP 484 support (most of the important features of it). Thanks Claude! (@reinhrst)\n- Added ``get_line_code`` to ``Name`` and ``Completion`` objects.\n- Completely rewritten the type inference engine.\n- A new and better parser for (fast) parsing diffs of Python code.\n\n0.9.0 (2015-04-10)\n++++++++++++++++++\n\n- The import logic has been rewritten to look more like Python's. There is now\n  an ``InferState.modules`` import cache, which resembles ``sys.modules``.\n- Integrated the parser of 2to3. This will make refactoring possible. It will\n  also be possible to check for error messages (like compiling an AST would give)\n  in the future.\n- With the new parser, the type inference also completely changed. It's now\n  simpler and more readable.\n- Completely rewritten REPL completion.\n- Added ``jedi.names``, a command to do static analysis. Thanks to that\n  sourcegraph guys for sponsoring this!\n- Alpha version of the linter.\n\n\n0.8.1 (2014-07-23)\n+++++++++++++++++++\n\n- Bugfix release, the last release forgot to include files that improve\n  autocompletion for builtin libraries. Fixed.\n\n0.8.0 (2014-05-05)\n+++++++++++++++++++\n\n- Memory Consumption for compiled modules (e.g. builtins, sys) has been reduced\n  drastically. Loading times are down as well (it takes basically as long as an\n  import).\n- REPL completion is starting to become usable.\n- Various small API changes. Generally this release focuses on stability and\n  refactoring of internal APIs.\n- Introducing operator precedence, which makes calculating correct Array\n  indices and ``__getattr__`` strings possible.\n\n0.7.0 (2013-08-09)\n++++++++++++++++++\n\n- Switched from LGPL to MIT license.\n- Added an Interpreter class to the API to make autocompletion in REPL\n  possible.\n- Added autocompletion support for namespace packages.\n- Add sith.py, a new random testing method.\n\n0.6.0 (2013-05-14)\n++++++++++++++++++\n\n- Much faster parser with builtin part caching.\n- A test suite, thanks @tkf.\n\n0.5 versions (2012)\n+++++++++++++++++++\n\n- Initial development.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2939453125,
          "content": "Pull Requests are great.\n\n 1. Fork the Repo on github.\n 2. If you are adding functionality or fixing a bug, please add a test!\n 3. Add your name to AUTHORS.txt\n 4. Push to your fork and submit a pull request.\n\n**Try to use the PEP8 style guide** (and it's ok to have a line length of 100 characters).\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.2119140625,
          "content": "All contributions towards Jedi are MIT licensed.\n\n-------------------------------------------------------------------------------\nThe MIT License (MIT)\n\nCopyright (c) <2013> <David Halter and others, see AUTHORS.txt>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.396484375,
          "content": "include README.rst\ninclude CHANGELOG.rst\ninclude LICENSE.txt\ninclude AUTHORS.txt\ninclude .coveragerc\ninclude sith.py\ninclude conftest.py\ninclude pytest.ini\nrecursive-include jedi/third_party *.pyi\ninclude jedi/third_party/typeshed/LICENSE\ninclude jedi/third_party/django-stubs/LICENSE.txt\ninclude jedi/third_party/typeshed/README\nrecursive-include test *\nrecursive-include docs *\nrecursive-exclude * *.pyc\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 8.1015625,
          "content": "####################################################################################\nJedi - an awesome autocompletion, static analysis and refactoring library for Python\n####################################################################################\n\n.. image:: http://isitmaintained.com/badge/open/davidhalter/jedi.svg\n    :target: https://github.com/davidhalter/jedi/issues\n    :alt: The percentage of open issues and pull requests\n\n.. image:: http://isitmaintained.com/badge/resolution/davidhalter/jedi.svg\n    :target: https://github.com/davidhalter/jedi/issues\n    :alt: The resolution time is the median time an issue or pull request stays open.\n\n.. image:: https://github.com/davidhalter/jedi/workflows/ci/badge.svg?branch=master\n    :target: https://github.com/davidhalter/jedi/actions\n    :alt: Tests\n\n.. image:: https://pepy.tech/badge/jedi\n    :target: https://pepy.tech/project/jedi\n    :alt: PyPI Downloads\n\n\nJedi is a static analysis tool for Python that is typically used in\nIDEs/editors plugins. Jedi has a focus on autocompletion and goto\nfunctionality. Other features include refactoring, code search and finding\nreferences.\n\nJedi has a simple API to work with. There is a reference implementation as a\n`VIM-Plugin <https://github.com/davidhalter/jedi-vim>`_. Autocompletion in your\nREPL is also possible, IPython uses it natively and for the CPython REPL you\ncan install it. Jedi is well tested and bugs should be rare.\n\nJedi can currently be used with the following editors/projects:\n\n- Vim (jedi-vim_, YouCompleteMe_, deoplete-jedi_, completor.vim_)\n- `Visual Studio Code`_ (via `Python Extension <https://marketplace.visualstudio.com/items?itemName=ms-python.python>`_)\n- Emacs (Jedi.el_, company-mode_, elpy_, anaconda-mode_, ycmd_)\n- Sublime Text (SublimeJEDI_ [ST2 + ST3], anaconda_ [only ST3])\n- TextMate_ (Not sure if it's actually working)\n- Kate_ version 4.13+ supports it natively, you have to enable it, though.  [`see\n  <https://projects.kde.org/projects/kde/applications/kate/repository/show?rev=KDE%2F4.13>`_]\n- Atom_ (autocomplete-python-jedi_)\n- `GNOME Builder`_ (with support for GObject Introspection)\n- Gedit (gedi_)\n- wdb_ - Web Debugger\n- `Eric IDE`_\n- `IPython 6.0.0+ <https://ipython.readthedocs.io/en/stable/whatsnew/version6.html>`_\n- `xonsh shell <https://xon.sh/contents.html>`_ has `jedi extension <https://xon.sh/xontribs.html#jedi>`_\n\nand many more!\n\nThere are a few language servers that use Jedi:\n\n- `jedi-language-server <https://github.com/pappasam/jedi-language-server>`_\n- `python-language-server <https://github.com/palantir/python-language-server>`_ (currently unmaintained)\n- `python-lsp-server <https://github.com/python-lsp/python-lsp-server>`_ (fork from python-language-server)\n- `anakin-language-server <https://github.com/muffinmad/anakin-language-server>`_\n\nHere are some pictures taken from jedi-vim_:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_complete.png\n\nCompletion for almost anything:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_function.png\n\nDocumentation:\n\n.. image:: https://github.com/davidhalter/jedi/raw/master/docs/_screenshots/screenshot_pydoc.png\n\n\nGet the latest version from `github <https://github.com/davidhalter/jedi>`_\n(master branch should always be kind of stable/working).\n\nDocs are available at `https://jedi.readthedocs.org/en/latest/\n<https://jedi.readthedocs.org/en/latest/>`_. Pull requests with enhancements\nand/or fixes are awesome and most welcome. Jedi uses `semantic versioning\n<https://semver.org/>`_.\n\nIf you want to stay **up-to-date** with releases, please **subscribe** to this\nmailing list: https://groups.google.com/g/jedi-announce. To subscribe you can\nsimply send an empty email to ``jedi-announce+subscribe@googlegroups.com``.\n\nIssues & Questions\n==================\n\nYou can file issues and questions in the `issue tracker\n<https://github.com/davidhalter/jedi/>`. Alternatively you can also ask on\n`Stack Overflow <https://stackoverflow.com/questions/tagged/python-jedi>`_ with\nthe label ``python-jedi``.\n\nInstallation\n============\n\n`Check out the docs <https://jedi.readthedocs.org/en/latest/docs/installation.html>`_.\n\nFeatures and Limitations\n========================\n\nJedi's features are listed here:\n`Features <https://jedi.readthedocs.org/en/latest/docs/features.html>`_.\n\nYou can run Jedi on Python 3.6+ but it should also\nunderstand code that is older than those versions. Additionally you should be\nable to use `Virtualenvs <https://jedi.readthedocs.org/en/latest/docs/api.html#environments>`_\nvery well.\n\nTips on how to use Jedi efficiently can be found `here\n<https://jedi.readthedocs.org/en/latest/docs/features.html#recipes>`_.\n\nAPI\n---\n\nYou can find a comprehensive documentation for the\n`API here <https://jedi.readthedocs.org/en/latest/docs/api.html>`_.\n\nAutocompletion / Goto / Documentation\n-------------------------------------\n\nThere are the following commands:\n\n- ``jedi.Script.goto``\n- ``jedi.Script.infer``\n- ``jedi.Script.help``\n- ``jedi.Script.complete``\n- ``jedi.Script.get_references``\n- ``jedi.Script.get_signatures``\n- ``jedi.Script.get_context``\n\nThe returned objects are very powerful and are really all you might need.\n\nAutocompletion in your REPL (IPython, etc.)\n-------------------------------------------\n\nJedi is a dependency of IPython. Autocompletion in IPython with Jedi is\ntherefore possible without additional configuration.\n\nHere is an `example video <https://vimeo.com/122332037>`_ how REPL completion\ncan look like.\nFor the ``python`` shell you can enable tab completion in a `REPL\n<https://jedi.readthedocs.org/en/latest/docs/usage.html#tab-completion-in-the-python-shell>`_.\n\nStatic Analysis\n---------------\n\nFor a lot of forms of static analysis, you can try to use\n``jedi.Script(...).get_names``. It will return a list of names that you can\nthen filter and work with. There is also a way to list the syntax errors in a\nfile: ``jedi.Script.get_syntax_errors``.\n\n\nRefactoring\n-----------\n\nJedi supports the following refactorings:\n\n- ``jedi.Script.inline``\n- ``jedi.Script.rename``\n- ``jedi.Script.extract_function``\n- ``jedi.Script.extract_variable``\n\nCode Search\n-----------\n\nThere is support for module search with ``jedi.Script.search``, and project\nsearch for ``jedi.Project.search``. The way to search is either by providing a\nname like ``foo`` or by using dotted syntax like ``foo.bar``. Additionally you\ncan provide the API type like ``class foo.bar.Bar``. There are also the\nfunctions ``jedi.Script.complete_search`` and ``jedi.Project.complete_search``.\n\nDevelopment\n===========\n\nThere's a pretty good and extensive `development documentation\n<https://jedi.readthedocs.org/en/latest/docs/development.html>`_.\n\nTesting\n=======\n\nThe test suite uses ``pytest``::\n\n    pip install pytest\n\nIf you want to test only a specific Python version (e.g. Python 3.8), it is as\neasy as::\n\n    python3.8 -m pytest\n\nFor more detailed information visit the `testing documentation\n<https://jedi.readthedocs.org/en/latest/docs/testing.html>`_.\n\nAcknowledgements\n================\n\nThanks a lot to all the\n`contributors <https://jedi.readthedocs.org/en/latest/docs/acknowledgements.html>`_!\n\n\n.. _jedi-vim: https://github.com/davidhalter/jedi-vim\n.. _youcompleteme: https://github.com/ycm-core/YouCompleteMe\n.. _deoplete-jedi: https://github.com/zchee/deoplete-jedi\n.. _completor.vim: https://github.com/maralla/completor.vim\n.. _Jedi.el: https://github.com/tkf/emacs-jedi\n.. _company-mode: https://github.com/syohex/emacs-company-jedi\n.. _elpy: https://github.com/jorgenschaefer/elpy\n.. _anaconda-mode: https://github.com/proofit404/anaconda-mode\n.. _ycmd: https://github.com/abingham/emacs-ycmd\n.. _sublimejedi: https://github.com/srusskih/SublimeJEDI\n.. _anaconda: https://github.com/DamnWidget/anaconda\n.. _wdb: https://github.com/Kozea/wdb\n.. _TextMate: https://github.com/lawrenceakka/python-jedi.tmbundle\n.. _Kate: https://kate-editor.org\n.. _Atom: https://atom.io/\n.. _autocomplete-python-jedi: https://atom.io/packages/autocomplete-python-jedi\n.. _GNOME Builder: https://wiki.gnome.org/Apps/Builder\n.. _Visual Studio Code: https://code.visualstudio.com/\n.. _gedi: https://github.com/isamert/gedi\n.. _Eric IDE: https://eric-ide.python-projects.org\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.384765625,
          "content": "# Security Policy\n\nIf security issues arise, we will try to fix those as soon as possible.\n\nDue to Jedi's nature, Security Issues will probably be extremely rare, but we will of course treat them seriously.\n\n## Reporting Security Problems\n\nIf you need to report a security vulnerability, please send an email to davidhalter88@gmail.com. Typically, I will respond in the next few business days.\n"
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 5.1650390625,
          "content": "import tempfile\nimport shutil\nimport os\nimport sys\nfrom functools import partial\n\nimport pytest\n\nimport jedi\nfrom jedi.api.environment import get_system_environment, InterpreterEnvironment\nfrom test.helpers import test_dir\n\ncollect_ignore = [\n    'setup.py',\n    'jedi/__main__.py',\n    'jedi/inference/compiled/subprocess/__main__.py',\n    'build/',\n    'test/examples',\n    'sith.py',\n]\n\n\n# The following hooks (pytest_configure, pytest_unconfigure) are used\n# to modify `jedi.settings.cache_directory` because `clean_jedi_cache`\n# has no effect during doctests.  Without these hooks, doctests uses\n# user's cache (e.g., ~/.cache/jedi/).  We should remove this\n# workaround once the problem is fixed in pytest.\n#\n# See:\n# - https://github.com/davidhalter/jedi/pull/168\n# - https://bitbucket.org/hpk42/pytest/issue/275/\n\njedi_cache_directory_orig = None\njedi_cache_directory_temp = None\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\"--jedi-debug\", \"-D\", action='store_true',\n                     help=\"Enables Jedi's debug output.\")\n\n    parser.addoption(\"--warning-is-error\", action='store_true',\n                     help=\"Warnings are treated as errors.\")\n\n    parser.addoption(\"--env\", action='store',\n                     help=\"Execute the tests in that environment (e.g. 39 for python3.9).\")\n    parser.addoption(\"--interpreter-env\", \"-I\", action='store_true',\n                     help=\"Don't use subprocesses to guarantee having safe \"\n                          \"code execution. Useful for debugging.\")\n\n\ndef pytest_configure(config):\n    global jedi_cache_directory_orig, jedi_cache_directory_temp\n    jedi_cache_directory_orig = jedi.settings.cache_directory\n    jedi_cache_directory_temp = tempfile.mkdtemp(prefix='jedi-test-')\n    jedi.settings.cache_directory = jedi_cache_directory_temp\n\n    if config.option.jedi_debug:\n        jedi.set_debug_function()\n\n    if config.option.warning_is_error:\n        import warnings\n        warnings.simplefilter(\"error\")\n\n\ndef pytest_unconfigure(config):\n    global jedi_cache_directory_orig, jedi_cache_directory_temp\n    jedi.settings.cache_directory = jedi_cache_directory_orig\n    shutil.rmtree(jedi_cache_directory_temp)\n\n\n@pytest.fixture(scope='session')\ndef clean_jedi_cache(request):\n    \"\"\"\n    Set `jedi.settings.cache_directory` to a temporary directory during test.\n\n    Note that you can't use built-in `tmpdir` and `monkeypatch`\n    fixture here because their scope is 'function', which is not used\n    in 'session' scope fixture.\n\n    This fixture is activated in ../pytest.ini.\n    \"\"\"\n    from jedi import settings\n    old = settings.cache_directory\n    tmp = tempfile.mkdtemp(prefix='jedi-test-')\n    settings.cache_directory = tmp\n\n    @request.addfinalizer\n    def restore():\n        settings.cache_directory = old\n        shutil.rmtree(tmp)\n\n\n@pytest.fixture(scope='session')\ndef environment(request):\n    version = request.config.option.env\n    if version is None:\n        v = str(sys.version_info[0]) + str(sys.version_info[1])\n        version = os.environ.get('JEDI_TEST_ENVIRONMENT', v)\n\n    if request.config.option.interpreter_env or version == 'interpreter':\n        return InterpreterEnvironment()\n\n    if '.' not in version:\n        version = version[0] + '.' + version[1:]\n    return get_system_environment(version)\n\n\n@pytest.fixture(scope='session')\ndef Script(environment):\n    return partial(jedi.Script, environment=environment)\n\n\n@pytest.fixture(scope='session')\ndef ScriptWithProject(Script):\n    project = jedi.Project(test_dir)\n    return partial(jedi.Script, project=project)\n\n\n@pytest.fixture(scope='session')\ndef get_names(Script):\n    return lambda code, **kwargs: Script(code).get_names(**kwargs)\n\n\n@pytest.fixture(scope='session', params=['goto', 'infer'])\ndef goto_or_infer(request, Script):\n    return lambda code, *args, **kwargs: getattr(Script(code), request.param)(*args, **kwargs)\n\n\n@pytest.fixture(scope='session', params=['goto', 'help'])\ndef goto_or_help(request, Script):\n    return lambda code, *args, **kwargs: getattr(Script(code), request.param)(*args, **kwargs)\n\n\n@pytest.fixture(scope='session', params=['goto', 'help', 'infer'])\ndef goto_or_help_or_infer(request, Script):\n    def do(code, *args, **kwargs):\n        return getattr(Script(code), request.param)(*args, **kwargs)\n\n    do.type = request.param\n    return do\n\n\n@pytest.fixture(scope='session', params=['goto', 'complete', 'help'])\ndef goto_or_complete(request, Script):\n    return lambda code, *args, **kwargs: getattr(Script(code), request.param)(*args, **kwargs)\n\n\n@pytest.fixture(scope='session')\ndef has_django(environment):\n    script = jedi.Script('import django', environment=environment)\n    return bool(script.infer())\n\n\n@pytest.fixture(scope='session')\ndef jedi_path():\n    return os.path.dirname(__file__)\n\n\n@pytest.fixture()\ndef skip_pre_python38(environment):\n    if environment.version_info < (3, 8):\n        # This if is just needed to avoid that tests ever skip way more than\n        # they should for all Python versions.\n        pytest.skip()\n\n\n@pytest.fixture()\ndef skip_pre_python37(environment):\n    if environment.version_info < (3, 7):\n        # This if is just needed to avoid that tests ever skip way more than\n        # they should for all Python versions.\n        pytest.skip()\n"
        },
        {
          "name": "deploy-master.sh",
          "type": "blob",
          "size": 1.2333984375,
          "content": "#!/usr/bin/env bash\n# The script creates a separate folder in build/ and creates tags there, pushes\n# them and then uploads the package to PyPI.\n\nset -eu -o pipefail\n\nBASE_DIR=$(dirname $(readlink -f \"$0\"))\ncd $BASE_DIR\n\ngit fetch --tags\n\nPROJECT_NAME=jedi\nBRANCH=master\nBUILD_FOLDER=build\n\n[ -d $BUILD_FOLDER ] || mkdir $BUILD_FOLDER\n# Remove the previous deployment first.\n# Checkout the right branch\ncd $BUILD_FOLDER\nrm -rf $PROJECT_NAME\ngit clone .. $PROJECT_NAME\ncd $PROJECT_NAME\ngit checkout $BRANCH\ngit submodule update --init\n\n# Test first.\npytest\n\n# Create tag\ntag=v$(python3 -c \"import $PROJECT_NAME; print($PROJECT_NAME.__version__)\")\n\nmaster_ref=$(git show-ref -s heads/$BRANCH)\ntag_ref=$(git show-ref -s $tag || true)\nif [[ $tag_ref ]]; then\n    if [[ $tag_ref != $master_ref ]]; then\n        echo 'Cannot tag something that has already been tagged with another commit.'\n        exit 1\n    fi\nelse\n    git tag -a $tag\n    git push --tags\nfi\n\n# Package and upload to PyPI\n#rm -rf dist/ - Not needed anymore, because the folder is never reused.\necho `pwd`\npython3 setup.py sdist bdist_wheel\n# Maybe do a pip install twine before.\ntwine upload dist/*\n\ncd $BASE_DIR\n# The tags have been pushed to this repo. Push the tags to github, now.\ngit push --tags\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "jedi",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.40234375,
          "content": "[pytest]\naddopts = --doctest-modules\n\n# Ignore broken files in blackbox test directories\nnorecursedirs = .* jedi/third_party scripts docs\n    test/completion test/refactor test/static_analysis test/examples\n\n# Activate `clean_jedi_cache` fixture for all tests.  This should be\n# fine as long as we are using `clean_jedi_cache` as a session scoped\n# fixture.\nusefixtures = clean_jedi_cache\n\ntestpaths = jedi test\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.6728515625,
          "content": "[bdist_wheel]\nuniversal=1\n\n[flake8]\nmax-line-length = 100\nignore =\n  # do not use bare 'except'\n  E722,\n  # don't know why this was ever even an option, 1+1 should be possible.\n  E226,\n  # Sometimes `type() is` makes sense and is better than isinstance. Code\n  # review is there to find the times when it doesn't make sense.\n  E721,\n  # Line break before binary operator\n  W503,\n  # Single letter loop variables are often fine\n  E741,\nper-file-ignores =\n  # Ignore apparently unused imports in files where we're (implicitly)\n  # re-exporting them.\n  jedi/__init__.py:F401\n  jedi/inference/compiled/__init__.py:F401\n  jedi/inference/value/__init__.py:F401\nexclude =\n  .tox/*\n  jedi/third_party/*\n  test/completion/*\n  test/examples/*\n  test/refactor/*\n  test/static_analysis/*\n\n[pycodestyle]\nmax-line-length = 100\n\n\n[mypy]\n# Exclude our copies of external stubs\nexclude = ^jedi/third_party\n\nshow_error_codes = true\nenable_error_code = ignore-without-code\n\n# Ensure generics are explicit about what they are (e.g: `List[str]` rather than\n# just `List`)\ndisallow_any_generics = True\n\ndisallow_subclassing_any = True\n\n# Avoid creating future gotchas emerging from bad typing\nwarn_redundant_casts = True\nwarn_unused_ignores = True\nwarn_return_any = True\nwarn_unused_configs = True\n\nwarn_unreachable = True\n\n# Require values to be explicitly re-exported; this makes things easier for\n# Flake8 too and avoids accidentally importing thing from the \"wrong\" place\n# (which helps avoid circular imports)\nimplicit_reexport = False\n\nstrict_equality = True\n\n[mypy-jedi,jedi.inference.compiled,jedi.inference.value,parso]\n# Various __init__.py files which contain re-exports we want to implicitly make.\nimplicit_reexport = True\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.9755859375,
          "content": "#!/usr/bin/env python\n\nfrom setuptools import setup, find_packages\nfrom setuptools.depends import get_module_constant\n\nimport os\n\n__AUTHOR__ = 'David Halter'\n__AUTHOR_EMAIL__ = 'davidhalter88@gmail.com'\n\n# Get the version from within jedi. It's defined in exactly one place now.\nversion = get_module_constant(\"jedi\", \"__version__\")\n\nreadme = open('README.rst').read() + '\\n\\n' + open('CHANGELOG.rst').read()\n\nassert os.path.isfile(\"jedi/third_party/typeshed/LICENSE\"), \\\n    \"Please download the typeshed submodule first (Hint: git submodule update --init)\"\nassert os.path.isfile(\"jedi/third_party/django-stubs/LICENSE.txt\"), \\\n    \"Please download the django-stubs submodule first (Hint: git submodule update --init)\"\n\nsetup(name='jedi',\n      version=version,\n      description='An autocompletion tool for Python that can be used for text editors.',\n      author=__AUTHOR__,\n      author_email=__AUTHOR_EMAIL__,\n      include_package_data=True,\n      maintainer=__AUTHOR__,\n      maintainer_email=__AUTHOR_EMAIL__,\n      url='https://github.com/davidhalter/jedi',\n      project_urls={\n          \"Documentation\": 'https://jedi.readthedocs.io/en/latest/',\n      },\n      license='MIT',\n      keywords='python completion refactoring vim',\n      long_description=readme,\n      packages=find_packages(exclude=['test', 'test.*']),\n      python_requires='>=3.6',\n      # Python 3.13 grammars are added to parso in 0.8.4\n      install_requires=['parso>=0.8.4,<0.9.0'],\n      extras_require={\n          'testing': [\n              'pytest<9.0.0',\n              # docopt for sith doctests\n              'docopt',\n              # coloroma for colored debug output\n              'colorama',\n              'Django',\n              'attrs',\n          ],\n          'qa': [\n              # latest version supporting Python 3.6\n              'flake8==5.0.4',\n              # latest version supporting Python 3.6\n              'mypy==0.971',\n              # Arbitrary pins, latest at the time of pinning\n              'types-setuptools==67.2.0.1',\n          ],\n          'docs': [\n              # Just pin all of these.\n              'Jinja2==2.11.3',\n              'MarkupSafe==1.1.1',\n              'Pygments==2.8.1',\n              'alabaster==0.7.12',\n              'babel==2.9.1',\n              'chardet==4.0.0',\n              'commonmark==0.8.1',\n              'docutils==0.17.1',\n              'future==0.18.2',\n              'idna==2.10',\n              'imagesize==1.2.0',\n              'mock==1.0.1',\n              'packaging==20.9',\n              'pyparsing==2.4.7',\n              'pytz==2021.1',\n              'readthedocs-sphinx-ext==2.1.4',\n              'recommonmark==0.5.0',\n              'requests==2.25.1',\n              'six==1.15.0',\n              'snowballstemmer==2.1.0',\n              'sphinx==1.8.5',\n              'sphinx-rtd-theme==0.4.3',\n              'sphinxcontrib-serializinghtml==1.1.4',\n              'sphinxcontrib-websupport==1.2.4',\n              'urllib3==1.26.4',\n          ],\n      },\n      package_data={'jedi': ['*.pyi', 'third_party/typeshed/LICENSE',\n                             'third_party/typeshed/README']},\n      platforms=['any'],\n      classifiers=[\n          'Development Status :: 4 - Beta',\n          'Environment :: Plugins',\n          'Intended Audience :: Developers',\n          'License :: OSI Approved :: MIT License',\n          'Operating System :: OS Independent',\n          'Programming Language :: Python :: 3',\n          'Programming Language :: Python :: 3.6',\n          'Programming Language :: Python :: 3.7',\n          'Programming Language :: Python :: 3.8',\n          'Programming Language :: Python :: 3.9',\n          'Programming Language :: Python :: 3.10',\n          'Programming Language :: Python :: 3.11',\n          'Programming Language :: Python :: 3.12',\n          'Programming Language :: Python :: 3.13',\n          'Topic :: Software Development :: Libraries :: Python Modules',\n          'Topic :: Text Editors :: Integrated Development Environments (IDE)',\n          'Topic :: Utilities',\n      ],\n      )\n"
        },
        {
          "name": "sith.py",
          "type": "blob",
          "size": 7.1640625,
          "content": "#!/usr/bin/env python\n\n\"\"\"\nSith attacks (and helps debugging) Jedi.\n\nRandomly search Python files and run Jedi on it.  Exception and used\narguments are recorded to ``./record.json`` (specified by --record)::\n\n    ./sith.py random /path/to/sourcecode\n\nRedo recorded exception::\n\n    ./sith.py redo\n\nShow recorded exception::\n\n    ./sith.py show\n\nRun a specific operation\n\n    ./sith.py run <operation> </path/to/source/file.py> <line> <col>\n\nWhere operation is one of complete, goto, infer, get_references or get_signatures.\n\nNote: Line numbers start at 1; columns start at 0 (this is consistent with\nmany text editors, including Emacs).\n\nUsage:\n  sith.py [--pdb|--ipdb|--pudb] [-d] [-n=<nr>] [-f] [--record=<file>] random [-s] [<path>]\n  sith.py [--pdb|--ipdb|--pudb] [-d] [-f] [--record=<file>] redo\n  sith.py [--pdb|--ipdb|--pudb] [-d] [-f] run <operation> <path> <line> <column>\n  sith.py show [--record=<file>]\n  sith.py -h | --help\n\nOptions:\n  -h --help             Show this screen.\n  --record=<file>       Exceptions are recorded in here [default: record.json].\n  -f, --fs-cache        By default, file system cache is off for reproducibility.\n  -n, --maxtries=<nr>   Maximum of random tries [default: 100]\n  -d, --debug           Jedi print debugging when an error is raised.\n  -s                    Shows the path/line numbers of every completion before it starts.\n  --pdb                 Launch pdb when error is raised.\n  --ipdb                Launch ipdb when error is raised.\n  --pudb                Launch pudb when error is raised.\n\"\"\"\n\nfrom docopt import docopt  # type: ignore[import]\n\nimport json\nimport os\nimport random\nimport sys\nimport traceback\n\nimport jedi\n\n\nclass SourceFinder(object):\n    _files = None\n\n    @staticmethod\n    def fetch(file_path):\n        if not os.path.isdir(file_path):\n            yield file_path\n            return\n        for root, dirnames, filenames in os.walk(file_path):\n            for name in filenames:\n                if name.endswith('.py'):\n                    yield os.path.join(root, name)\n\n    @classmethod\n    def files(cls, file_path):\n        if cls._files is None:\n            cls._files = list(cls.fetch(file_path))\n        return cls._files\n\n\nclass TestCase(object):\n    def __init__(self, operation, path, line, column, traceback=None):\n        if operation not in self.operations:\n            raise ValueError(\"%s is not a valid operation\" % operation)\n\n        # Set other attributes\n        self.operation = operation\n        self.path = path\n        self.line = line\n        self.column = column\n        self.traceback = traceback\n\n    @classmethod\n    def from_cache(cls, record):\n        with open(record) as f:\n            args = json.load(f)\n        return cls(*args)\n\n    # Changing this? Also update the module docstring above.\n    operations = ['complete', 'goto', 'infer', 'get_references', 'get_signatures']\n\n    @classmethod\n    def generate(cls, file_path):\n        operation = random.choice(cls.operations)\n\n        path = random.choice(SourceFinder.files(file_path))\n        with open(path) as f:\n            source = f.read()\n            lines = source.splitlines()\n\n        if not lines:\n            lines = ['']\n        line = random.randint(1, len(lines))\n        line_string = lines[line - 1]\n        line_len = len(line_string)\n        if line_string.endswith('\\r\\n'):\n            line_len -= 1\n        if line_string.endswith('\\n'):\n            line_len -= 1\n        column = random.randint(0, line_len)\n        return cls(operation, path, line, column)\n\n    def run(self, debugger, record=None, print_result=False):\n        try:\n            with open(self.path) as f:\n                self.script = jedi.Script(f.read(), path=self.path)\n            kwargs = {}\n            if self.operation == 'goto':\n                kwargs['follow_imports'] = random.choice([False, True])\n\n            self.objects = getattr(self.script, self.operation)(self.line, self.column, **kwargs)\n            if print_result:\n                print(\"{path}: Line {line} column {column}\".format(**self.__dict__))\n                self.show_location(self.line, self.column)\n                self.show_operation()\n        except Exception:\n            self.traceback = traceback.format_exc()\n            if record is not None:\n                call_args = (self.operation, self.path, self.line, self.column, self.traceback)\n                with open(record, 'w') as f:\n                    json.dump(call_args, f)\n            self.show_errors()\n            if debugger:\n                einfo = sys.exc_info()\n                pdb = __import__(debugger)\n                if debugger == 'pudb':\n                    pdb.post_mortem(einfo[2], einfo[0], einfo[1])\n                else:\n                    pdb.post_mortem(einfo[2])\n            exit(1)\n\n    def show_location(self, lineno, column, show=3):\n        # Three lines ought to be enough\n        lower = lineno - show if lineno - show > 0 else 0\n        prefix = '  |'\n        for i, line in enumerate(self.script._code.split('\\n')[lower:lineno]):\n            print(prefix, lower + i + 1, line)\n        print(prefix, ' ' * (column + len(str(lineno))), '^')\n\n    def show_operation(self):\n        print(\"%s:\\n\" % self.operation.capitalize())\n        if self.operation == 'complete':\n            self.show_completions()\n        else:\n            self.show_definitions()\n\n    def show_completions(self):\n        for completion in self.objects:\n            print(completion.name)\n\n    def show_definitions(self):\n        for completion in self.objects:\n            print(completion.full_name)\n            if completion.module_path is None:\n                continue\n            if os.path.abspath(completion.module_path) == os.path.abspath(self.path):\n                self.show_location(completion.line, completion.column)\n\n    def show_errors(self):\n        sys.stderr.write(self.traceback)\n        print((\"Error with running Script(...).{operation}() with\\n\"\n               \"\\tpath:   {path}\\n\"\n               \"\\tline:   {line}\\n\"\n               \"\\tcolumn: {column}\").format(**self.__dict__))\n\n\ndef main(arguments):\n    debugger = 'pdb' if arguments['--pdb'] else \\\n               'ipdb' if arguments['--ipdb'] else \\\n               'pudb' if arguments['--pudb'] else None\n    record = arguments['--record']\n\n    jedi.settings.use_filesystem_cache = arguments['--fs-cache']\n    if arguments['--debug']:\n        jedi.set_debug_function()\n\n    if arguments['redo'] or arguments['show']:\n        t = TestCase.from_cache(record)\n        if arguments['show']:\n            t.show_errors()\n        else:\n            t.run(debugger)\n    elif arguments['run']:\n        TestCase(\n            arguments['<operation>'], arguments['<path>'],\n            int(arguments['<line>']), int(arguments['<column>'])\n        ).run(debugger, print_result=True)\n    else:\n        for _ in range(int(arguments['--maxtries'])):\n            t = TestCase.generate(arguments['<path>'] or '.')\n            if arguments['-s']:\n                print('%s %s %s %s ' % (t.operation, t.path, t.line, t.column))\n                sys.stdout.flush()\n            else:\n                print('.', end='')\n            t.run(debugger, record)\n\n            sys.stdout.flush()\n        print()\n\n\nif __name__ == '__main__':\n    arguments = docopt(__doc__)\n    main(arguments)\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}