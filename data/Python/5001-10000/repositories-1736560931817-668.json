{
  "metadata": {
    "timestamp": 1736560931817,
    "page": 668,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vibora-io/vibora",
      "stars": 5661,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitbook.yaml",
          "type": "blob",
          "size": 0.1083984375,
          "content": "root: /docs\nstructure:\n  readme: started.md\n  summary: summary.md\nredirects:\n  previous/page: redirects/page.md"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2177734375,
          "content": ".idea/\n*.so\n*.c\n!vendor/http-parser-2.8.1/*.c\nbuild/\n__pycache__\n__compiled__\n__cache__\ndist\nvibora.egg-info\n.venv\n\n# Elastic Beanstalk Files\n.elasticbeanstalk/*\n!.elasticbeanstalk/*.cfg.yml\n!.elasticbeanstalk/*.global.yml\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "MIT License\n\nCopyright (c) 2018-present Frank Vieira\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.064453125,
          "content": "global-include *.txt *.rst *.pyx *.pxd *.c *.h\nrecursive-include *"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6044921875,
          "content": "> **Warning: This project is being completely re-written. If you're curious about the progress, reach me on Slack.**\n\n<p align=\"center\">\n  <a href=\"https://vibora.io\"><img src=\"https://raw.githubusercontent.com/vibora-io/vibora/master/docs/logo.png\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://circleci.com/gh/vibora-io/vibora\"><img src=\"https://circleci.com/gh/vibora-io/vibora.svg?style=shield\"></a>\n  <a href=\"https://github.com/vibora-io/vibora/blob/master/LICENSE\"><img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"></a>\n  <a href=\"https://pypi.org/project/vibora/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/vibora.svg\"></a>\n  <a href=\"https://github.com/ambv/black\"><img alt=\"Code style: black\" src=\"https://img.shields.io/badge/code%20style-black-000000.svg\"></a>\n  <a target=\"_blank\" href=\"https://join.slack.com/t/vibora-io/shared_invite/enQtNDAxMTQ4NDc5NDYzLTA2YTdmNmM0YmY4ZTY0Y2JjZjc0ODgwMmJjY2I0MmVkODFiYzc4YjM0NGMyOTkxMjZlNTliZDU1ZmFhYWZmNjU\"><img alt=\"Join Slack\" src=\"https://img.shields.io/badge/join-slack-E02462.svg\"></a>\n</p>\n\n-----------------------------------------------------------\n> [Vibora](https://vibora.io) is a **fast, asynchronous and elegant** Python 3.6+ http client/server framework. (Alpha stage)\n\n> Before you ask, Vibora means Viper in Portuguese :)\n\n\nServer Features\n---------------\n* Performance (https://github.com/vibora-io/benchmarks).\n* Schemas Engine.\n* Nested Blueprints / Domain Based Routes / Components\n* Connection Reaper / Self-Healing Workers\n* Sessions Engine\n* Streaming\n* Websockets\n* Caching tools\n* Async Template Engine (hot-reloading, deep inheritance)\n* Complete flow customization\n* Static Files (Smart Cache, Range, LastModified, ETags)\n* Testing Framework\n* Type hints, type hints, type hints everywhere.\n\n\nClient Features\n---------------\n* Streaming MultipartForms (Inspired by: https://github.com/requests/requests/issues/1584)\n* Rate Limiting / Retries mechanisms\n* Websockets\n* Keep-Alive & Connection Pooling\n* Sessions with cookies persistence\n* Basic/digest Authentication\n* Transparent Content Decoding\n\nServer Example\n--------------\n```python\nfrom vibora import Vibora, Request\nfrom vibora.responses import JsonResponse\n\napp = Vibora()\n\n\n@app.route('/')\nasync def home(request: Request):\n    return JsonResponse({'hello': 'world'})\n\n\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0', port=8000)\n```\n\nClient Example\n--------------\n\n```python\nimport asyncio\nfrom vibora import client\n\n\nasync def hello_world():\n    response = await client.get('https://google.com/')\n    print(f'Content: {response.content}')\n    print(f'Status code: {response.status_code}')\n\n\nif __name__ == '__main__':\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(hello_world())\n```\n\nDocumentation\n-------------\n[Check it out at Vibora docs website](https://docs.vibora.io).\n\nPerformance (Infamous Hello World benchmark)\n-----------\n| Frameworks    | Requests/Sec  | Version  |\n| ------------- |:-------------:|:--------:|\n| Tornado       | 14,197         | 5.0.2   |\n| Django        | 22,823         | 2.0.6   |\n| Flask         | 37,487         | 1.0.2   |\n| Aiohttp       | 61,252         | 3.3.2   |\n| Sanic         | 119,764        | 0.7.0   |\n| Vibora        | 368,456        | 0.0.6   |\n> More benchmarks and info at https://github.com/vibora-io/benchmarks\n----\nGoals\n-----\n* **Be the fastest Python http client/server framework.**.\n* Windows / Linux / MacOS.\n* Enjoyable and up to date development features/trends.\n\nComing Soon\n-----------\n* Auto Reloading\n* HTTP2 Support\n* Brotli support (Server/Client)\n* Cython compiled templates.\n* Cython compiled user-routes.\n"
        },
        {
          "name": "build.py",
          "type": "blob",
          "size": 1.173828125,
          "content": "import os\nimport sys\nimport subprocess\n\nproject_path = os.path.join(os.path.dirname(__file__), 'vibora')\n\n# Seeking for files pending compilation.\npending_compilation = set()\nfor root, dirs, files in os.walk(project_path):\n    for file in files:\n        if file.endswith('.pyx'):\n            pending_compilation.add(os.path.join(root, file))\n        elif file.endswith('.py'):\n            if (file[:-3] + '.pxd') in files:\n                pending_compilation.add(os.path.join(root, file))\n        elif file.endswith(('.so', '.c', '.html')):\n            os.remove(os.path.join(root, file))\n\n# Calling Cython to compile our extensions.\ncython = os.path.join(os.path.dirname(sys.executable), 'cython')\nprocess = subprocess.run([cython] + list(pending_compilation) + ['--fast-fail'])\nif process.returncode != 0:\n    raise SystemExit(f'Failed to compile .pyx files to C.')\n\n# Building native extensions.\nprocess = subprocess.run(\n    [\n        sys.executable,\n        os.path.join(os.path.dirname(project_path), 'setup.py'),\n        'build_ext',\n        '--inplace'\n    ]\n)\nif process.returncode != 0:\n    raise SystemExit(f'Failed to build native modules.')\n\nprint('Build process completed successfully.')\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "cython==0.28.3"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2861328125,
          "content": "[metadata]\ndescription-file = README.md\n\n[bdist_wheel]\n# This flag says that the code is written to work on both Python 2 and Python\n# 3. If at all possible, it is good practice to do this. If you cannot, you\n# will need to generate wheels for each Python version that you support.\nuniversal=0"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.7685546875,
          "content": "import re\nimport pathlib\nfrom setuptools import setup, Extension, find_packages\n\n# Loading version\nhere = pathlib.Path(__file__).parent\ntxt = (here / 'vibora' / '__version__.py').read_text()\nversion = re.findall(r\"^__version__ = '([^']+)'\\r?$\", txt, re.M)[0]\n\n\nsetup(\n    name=\"vibora\",\n    version=version,\n    description='Fast, asynchronous and efficient Python web framework',\n    author='Frank Vieira',\n    author_email='frank@frankvieira.com.br',\n    url='https://vibora.io',\n    license='MIT',\n    python_requires='>=3.6',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 4 - Alpha',\n        'Environment :: Web Environment',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 3.6'\n    ],\n    extras_require={\n        'dev': ['flake8', 'pytest', 'tox'],\n        'fast': ['ujson==1.35', 'uvloop==0.10.2']\n    },\n    ext_modules=[\n        Extension(\n            \"vibora.parsers.parser\",\n            [\n                \"vibora/parsers/parser.c\",\n                \"vendor/http-parser-2.8.1/http_parser.c\",\n            ],\n            extra_compile_args=['-O3'],\n            include_dirs=['.', '/git/vibora/vibora']\n        ),\n        Extension(\n            \"vibora.parsers.response\",\n            [\n                \"vibora/parsers/response.c\",\n                \"vendor/http-parser-2.8.1/http_parser.c\"\n            ],\n            extra_compile_args=['-O3'],\n            include_dirs=['.', '/git/vibora/vibora']\n        ),\n        Extension(\n            \"vibora.router.router\",\n            [\"vibora/router/router.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.responses.responses\",\n            [\"vibora/responses/responses.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.protocol.cprotocol\",\n            [\"vibora/protocol/cprotocol.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.protocol.cwebsocket\",\n            [\"vibora/protocol/cwebsocket.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.request.request\",\n            [\"vibora/request/request.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.cache.cache\",\n            [\"vibora/cache/cache.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.headers.headers\",\n            [\"vibora/headers/headers.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.schemas.extensions.fields\",\n            [\"vibora/schemas/extensions/fields.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.', 'vibora/schemas']\n        ),\n        Extension(\n            \"vibora.schemas.extensions.schemas\",\n            [\"vibora/schemas/extensions/schemas.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.', 'vibora/schemas']\n        ),\n        Extension(\n            \"vibora.schemas.extensions.validator\",\n            [\"vibora/schemas/extensions/validator.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.', 'vibora/schemas']\n        ),\n        Extension(\n            \"vibora.components.components\",\n            [\"vibora/components/components.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        ),\n        Extension(\n            \"vibora.multipart.parser\",\n            [\"vibora/multipart/parser.c\"],\n            extra_compile_args=['-O3'],\n            include_dirs=['.']\n        )\n    ],\n    packages=find_packages()\n)\n"
        },
        {
          "name": "test.py",
          "type": "blob",
          "size": 0.412109375,
          "content": "import os\nfrom unittest import TestLoader, TextTestRunner\n\n\nif __name__ == '__main__':\n    loader = TestLoader()\n    tests_dir = os.path.join(os.path.dirname(__file__), 'tests')\n    tests = loader.discover(tests_dir, pattern='*.py')\n    runner = TextTestRunner()\n    result = runner.run(tests)\n    if result.failures or result.errors:\n        raise SystemExit(f'{len(result.failures) + len(result.errors)} tests failed.')\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "vibora",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}