{
  "metadata": {
    "timestamp": 1736561059636,
    "page": 844,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SublimeCodeIntel/SublimeCodeIntel",
      "stars": 5059,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": ".DS_Store\n.no-sublime-package\n\n.git\n.hg\n.svn\n\n*.pyc\n*.pyo\n*.o\n\n*.egg-info\nbuild\ndist\n"
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 5.1953125,
          "content": "Change Log\n----------\n\nList of releases and changes, with the latest at the top:\n\n\nv3.0.0 (unreleased, beta):\n\n-   Uses CodeIntel as an OOP command and package. Needs to install\n    CodeIntel with pip: pip install --upgrade --pre CodeIntel\n\nv2.2.0 (2015-03-26):\n\n-   Fixed issue with tabs and autocomplete\n\nv2.1.9 (2015-03-21):\n\n-   Fixed issue with codeintel\\_enabled()\n\nv2.1.8 (2015-03-18):\n\n-   Fixed issue with is\\_enabled()\n-   Do not autocomplete on ENTER\n\nv2.1.7 (2015-01-26):\n\n-   Fixed triggering issues with autocompletion and stop chars.\n-   ST2 improvements. Still might show \"slow plugin\" (just ignore,\n    project\\_file\\_name is being emulated from ST3, which is \"slow\")\n-   Cleanups\n\nv2.1.6 (2015-01-23):\n\n-   Optimizations.\n-   Compatibility issues with ST2.\n-   Stop characters fixed.\n\nv2.1.5 (2015-01-22):\n\n-   Cleanups.\n-   Autocomplete also triggered after space (for import&lt;space&gt;\n    autocompletions).\n-   Tooltip and snippets for functions re-added.\n\nv2.1.4 (2015-01-21):\n\n-   Improved compatibility with ST2\n-   PHP magic-methods tweaks ported from wizza-smile's fork.\n\nv2.1.3 (2015-01-20):\n\n-   Features and enhancements from wizza-smile's fork.\n-   PHP completions within function brackets.\n\nv2.1.2 (2015-01-16):\n\n-   Fixed issue with ordereddict in ST3 (Python 3).\n-   Fixed issue with unrevised languages.\n-   Perl compatibility improved/fixed.\n\nv2.1.1 (2015-01-14):\n\n-   Currently, this version features all the new great enhancements by\n    [wizza-smile](https://github.com/wizza-smile) which he is currently\n    working on, in his own fork of SublimeCodeIntel: SublimeCodeIntel3\n    at <https://github.com/wizza-smile/SublimeCodeIntel3>\n-   Sublime Text 2 compatibility fixed.\n-   Fix the \"codeintel\\_scan\\_exclude\\_dir\" setting (it was doing\n    nothing at all so far!).\n\nv2.1.0 (2015-01-13):\n\n-   New settings concept. Settings can now be defined in\n    \\*.sublime-project file.\n-   Define the directory, where your projects codeintel database should\n    reside (new setting \"codeintel\\_database\\_dir\").\n-   Sublime style word completions from buffer (new setting\n    \"codeintel\\_word\\_completions\" possible values: \"buffer\", \"all\" or\n    \"none\").\n-   Completions are now showing user-defined snippets.\n-   PHP local variables support.\n-   PHP static variables support.\n-   PHP completions from HTML embedded blocks.\n-   Improved speed for PHP completions dramatically by fixing the number\n    of import libs.\n\nv2.0.6 (2013-09-21):\n\n-   Tooltips can use Popups, Output Panel or Status Bar (\"popup\",\n    \"panel\", \"status\" respectively, in the settings)\n-   Resolved issues with XML and other languages.\n-   Improved speed by using cache for some things (added\n    zope.cachedescriptors)\n\nv2.0.5 (18-09-2013):\n\n-   Resolved issues with ST2 in Mac OS X and Windows\n-   Fixed a few problems with Ruby and HTML parsers in ST3\n\nv2.0.4 (16-09-2013):\n\n-   First non-pre-release for ST3\n\nv2.0.3 (14-09-2013):\n\n-   Libraries built for compatibility with more systems.\n\nv2.0.2 (12-09-2013):\n\n-   Initial Sublime Text 3 support!\n-   OpenKomodo codebase updated to r13636\n-   Snippets insertion delayed a bit.\n-   Tooltips are removed when line changes.\n-   Improved autocomplete in HTML.\n\nv2.0.1 (19-07-2013):\n\n-   Removed some Linux dependencies to GLIBC\\_2.4.\n-   Sublime Text 2 built-in auto complete no longer disabled by default\n    (use \"sublime\\_auto\\_complete\": false setting instad).\n\nv2.0 (11-07-2013):\n\n-   SublimeCodeIntel's openkomodo codeintel engine updated. The new\n    codeintel is faster and more reliable.\n-   Sources have their own repositories at\n    <http://github.com/SublimeCodeIntel>\n-   Disables Sublime Text 2's auto\\_complete by default (new\n    `sublime_auto_complete` setting)\n-   JavaScript and PHP: Do not include all files and directories from\n    the project base directory while scanning.\n-   JavaScript: Maximum directory depth is set to 2 (add explicit paths\n    using javascriptExtraPaths).\n-   PHP: Maximum directory depth is set to 5 (add explicit paths using\n    phpExtraPaths).\n-   Snippets for functions inserted during autocomplete.\n-   Binary files for Linux, Windows and Mac OS X updated.\n-   Shortcuts for jump to definition have changed.\n-   PHP and UDL languages bugs fixed.\n-   Stability improved (Should no longer use 100% CPU all the time.)\n\nv1.4 (05-07-2013):\n\n-   Added improved Package Control support and updated old versions.\n-   Started transition to v2.0\n\nv1.3 (20-12-2011):\n\n-   This build should fix many of the problems seen in Linux systems.\n-   Libraries for Linux rebuilt with libpcre statically (libpcre bundled\n    for Linux builds).\n-   `calltip()` is now thread safe (which caused some strange behavior\n    in Linux where Sublime Text 2 ended up being unresponsive).\n\nv1.2 (18-12-2011):\n\n-   Added palette commands to disable/enable the plugin in many ways.\n-   Added `codeintel_live_disabled_languages` and fixed `codeintel_live`\n    to disable SublimeCodeIntel live autocomplete mode.\n-   Support for new completion settings in Sublime Text 2 Build 2148.\n-   JavaScript support improved (it's now much nicer with the CPU).\n-   CSS files support much improved (thanks to Jon's new features in\n    autocomplete).\n-   Smarter language detection and fallbacks.\n-   Improved autocomplete triggering, should now respond better.\n"
        },
        {
          "name": "Context.sublime-menu",
          "type": "blob",
          "size": 0.1787109375,
          "content": "[\n    {\"caption\": \"Jump to Symbol Definition\", \"command\": \"codeintel_go_to_definition\"},\n    {\"caption\": \"Back from Symbol Definition\", \"command\": \"codeintel_back_from_definition\"}\n]\n"
        },
        {
          "name": "Default (Linux).sublime-keymap",
          "type": "blob",
          "size": 0.40234375,
          "content": "[\n\t{ \"keys\": [ \"shift+ctrl+space\" ], \"command\": \"codeintel_auto_complete\" },\n\t{ \"keys\": [ \"super+alt+ctrl+up\" ], \"command\": \"codeintel_go_to_definition\" },\n\t{ \"keys\": [ \"super+alt+ctrl+left\" ], \"command\": \"codeintel_back_from_definition\" },\n\t{ \"keys\": [ \"<character>\" ], \"command\": \"codeintel_complete_commit\", \"context\": [ { \"key\": \"auto_complete_visible\" }, { \"key\": \"setting.codeintel_complete_commit\" } ] }\n]"
        },
        {
          "name": "Default (Linux).sublime-mousemap",
          "type": "blob",
          "size": 0.123046875,
          "content": "[\n\t{ \"button\": \"button1\", \"modifiers\": [\"super\"], \"command\": \"codeintel_go_to_definition\", \"press_command\": \"drag_select\" }\n]\n"
        },
        {
          "name": "Default (OSX).sublime-keymap",
          "type": "blob",
          "size": 0.412109375,
          "content": "[\n\t{ \"keys\": [ \"shift+ctrl+space\" ], \"command\": \"codeintel_auto_complete\" },\n\t{ \"keys\": [ \"super+alt+ctrl+up\" ], \"command\": \"codeintel_go_to_definition\" },\n\t{ \"keys\": [ \"super+alt+ctrl+left\" ], \"command\": \"codeintel_back_from_definition\" },\n\t{ \"keys\": [ \"<character>\" ], \"command\": \"codeintel_complete_commit\", \"context\": [ { \"key\": \"auto_complete_visible\" }, { \"key\": \"codeintel.setting.codeintel_complete_commit\" } ] }\n]"
        },
        {
          "name": "Default (OSX).sublime-mousemap",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[\n\t{ \"button\": \"button1\", \"modifiers\": [\"ctrl\"], \"command\": \"codeintel_go_to_definition\", \"press_command\": \"drag_select\" }\n]\n"
        },
        {
          "name": "Default (Windows).sublime-keymap",
          "type": "blob",
          "size": 0.40234375,
          "content": "[\n\t{ \"keys\": [ \"shift+ctrl+space\" ], \"command\": \"codeintel_auto_complete\" },\n\t{ \"keys\": [ \"super+alt+ctrl+up\" ], \"command\": \"codeintel_go_to_definition\" },\n\t{ \"keys\": [ \"super+alt+ctrl+left\" ], \"command\": \"codeintel_back_from_definition\" },\n\t{ \"keys\": [ \"<character>\" ], \"command\": \"codeintel_complete_commit\", \"context\": [ { \"key\": \"auto_complete_visible\" }, { \"key\": \"setting.codeintel_complete_commit\" } ] }\n]"
        },
        {
          "name": "Default (Windows).sublime-mousemap",
          "type": "blob",
          "size": 0.12109375,
          "content": "[\n\t{ \"button\": \"button1\", \"modifiers\": [\"alt\"], \"command\": \"codeintel_go_to_definition\", \"press_command\": \"drag_select\" }\n]\n"
        },
        {
          "name": "Default.sublime-commands",
          "type": "blob",
          "size": 4.3076171875,
          "content": "[\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Settings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/SublimeCodeIntel.sublime-settings\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Settings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/SublimeCodeIntel.sublime-settings\"\n        }\n    },\n\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Key Bindings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/Default (OSX).sublime-keymap\",\n            \"platform\": \"OSX\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Key Bindings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/Default (OSX).sublime-keymap\",\n            \"platform\": \"OSX\"\n        }\n    },\n\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Key Bindings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/Default (Linux).sublime-keymap\",\n            \"platform\": \"Linux\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Key Bindings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/Default (Linux).sublime-keymap\",\n            \"platform\": \"Linux\"\n        }\n    },\n\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Key Bindings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/Default (Windows).sublime-keymap\",\n            \"platform\": \"Windows\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Key Bindings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/Default (Windows).sublime-keymap\",\n            \"platform\": \"Windows\"\n        }\n    },\n\n\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Mouse Bindings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/Default (OSX).sublime-mousemap\",\n            \"platform\": \"OSX\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Mouse Bindings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/Default (OSX).sublime-mousemap\",\n            \"platform\": \"OSX\"\n        }\n    },\n\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Mouse Bindings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/Default (Linux).sublime-mousemap\",\n            \"platform\": \"Linux\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Mouse Bindings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/Default (Linux).sublime-mousemap\",\n            \"platform\": \"Linux\"\n        }\n    },\n\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Mouse Bindings – Default\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/SublimeCodeIntel/Default (Windows).sublime-mousemap\",\n            \"platform\": \"Windows\"\n        }\n    },\n    {\n        \"caption\": \"Preferences: SublimeCodeIntel Mouse Bindings – User\",\n        \"command\": \"open_file\", \"args\":\n        {\n            \"file\": \"${packages}/User/Default (Windows).sublime-mousemap\",\n            \"platform\": \"Windows\"\n        }\n    },\n\n    {\n        \"caption\": \"SublimeCodeIntel: Enable Code Intelligence\",\n        \"command\": \"codeintel_toggle_setting\", \"args\":\n        {\n            \"setting\": \"@disable\",\n            \"value\": null\n        }\n    },\n    {\n        \"caption\": \"SublimeCodeIntel: Disable Code Intelligence\",\n        \"command\": \"codeintel_toggle_setting\", \"args\":\n        {\n            \"setting\": \"@disable\",\n            \"value\": true\n        }\n    },\n    {\n        \"caption\": \"SublimeCodeIntel: Enable Debug Mode\",\n        \"command\": \"codeintel_toggle_setting\", \"args\":\n        {\n            \"setting\": \"debug\",\n            \"value\": true\n        }\n    },\n    {\n        \"caption\": \"SublimeCodeIntel: Disable Debug Mode\",\n        \"command\": \"codeintel_toggle_setting\", \"args\":\n        {\n            \"setting\": \"debug\",\n            \"value\": false\n        }\n    },\n]"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 30.1455078125,
          "content": "                          MOZILLA PUBLIC LICENSE\n                                Version 1.1\n\n                              ---------------\n\n1. Definitions.\n\n     1.0.1. \"Commercial Use\" means distribution or otherwise making the\n     Covered Code available to a third party.\n\n     1.1. \"Contributor\" means each entity that creates or contributes to\n     the creation of Modifications.\n\n     1.2. \"Contributor Version\" means the combination of the Original\n     Code, prior Modifications used by a Contributor, and the Modifications\n     made by that particular Contributor.\n\n     1.3. \"Covered Code\" means the Original Code or Modifications or the\n     combination of the Original Code and Modifications, in each case\n     including portions thereof.\n\n     1.4. \"Electronic Distribution Mechanism\" means a mechanism generally\n     accepted in the software development community for the electronic\n     transfer of data.\n\n     1.5. \"Executable\" means Covered Code in any form other than Source\n     Code.\n\n     1.6. \"Initial Developer\" means the individual or entity identified\n     as the Initial Developer in the Source Code notice required by Exhibit\n     A.\n\n     1.7. \"Larger Work\" means a work which combines Covered Code or\n     portions thereof with code not governed by the terms of this License.\n\n     1.8. \"License\" means this document.\n\n     1.8.1. \"Licensable\" means having the right to grant, to the maximum\n     extent possible, whether at the time of the initial grant or\n     subsequently acquired, any and all of the rights conveyed herein.\n\n     1.9. \"Modifications\" means any addition to or deletion from the\n     substance or structure of either the Original Code or any previous\n     Modifications. When Covered Code is released as a series of files, a\n     Modification is:\n          A. Any addition to or deletion from the contents of a file\n          containing Original Code or previous Modifications.\n\n          B. Any new file that contains any part of the Original Code or\n          previous Modifications.\n\n     1.10. \"Original Code\" means Source Code of computer software code\n     which is described in the Source Code notice required by Exhibit A as\n     Original Code, and which, at the time of its release under this\n     License is not already Covered Code governed by this License.\n\n     1.10.1. \"Patent Claims\" means any patent claim(s), now owned or\n     hereafter acquired, including without limitation,  method, process,\n     and apparatus claims, in any patent Licensable by grantor.\n\n     1.11. \"Source Code\" means the preferred form of the Covered Code for\n     making modifications to it, including all modules it contains, plus\n     any associated interface definition files, scripts used to control\n     compilation and installation of an Executable, or source code\n     differential comparisons against either the Original Code or another\n     well known, available Covered Code of the Contributor's choice. The\n     Source Code can be in a compressed or archival form, provided the\n     appropriate decompression or de-archiving software is widely available\n     for no charge.\n\n     1.12. \"You\" (or \"Your\")  means an individual or a legal entity\n     exercising rights under, and complying with all of the terms of, this\n     License or a future version of this License issued under Section 6.1.\n     For legal entities, \"You\" includes any entity which controls, is\n     controlled by, or is under common control with You. For purposes of\n     this definition, \"control\" means (a) the power, direct or indirect,\n     to cause the direction or management of such entity, whether by\n     contract or otherwise, or (b) ownership of more than fifty percent\n     (50%) of the outstanding shares or beneficial ownership of such\n     entity.\n\n2. Source Code License.\n\n     2.1. The Initial Developer Grant.\n     The Initial Developer hereby grants You a world-wide, royalty-free,\n     non-exclusive license, subject to third party intellectual property\n     claims:\n          (a)  under intellectual property rights (other than patent or\n          trademark) Licensable by Initial Developer to use, reproduce,\n          modify, display, perform, sublicense and distribute the Original\n          Code (or portions thereof) with or without Modifications, and/or\n          as part of a Larger Work; and\n\n          (b) under Patents Claims infringed by the making, using or\n          selling of Original Code, to make, have made, use, practice,\n          sell, and offer for sale, and/or otherwise dispose of the\n          Original Code (or portions thereof).\n\n          (c) the licenses granted in this Section 2.1(a) and (b) are\n          effective on the date Initial Developer first distributes\n          Original Code under the terms of this License.\n\n          (d) Notwithstanding Section 2.1(b) above, no patent license is\n          granted: 1) for code that You delete from the Original Code; 2)\n          separate from the Original Code;  or 3) for infringements caused\n          by: i) the modification of the Original Code or ii) the\n          combination of the Original Code with other software or devices.\n\n     2.2. Contributor Grant.\n     Subject to third party intellectual property claims, each Contributor\n     hereby grants You a world-wide, royalty-free, non-exclusive license\n\n          (a)  under intellectual property rights (other than patent or\n          trademark) Licensable by Contributor, to use, reproduce, modify,\n          display, perform, sublicense and distribute the Modifications\n          created by such Contributor (or portions thereof) either on an\n          unmodified basis, with other Modifications, as Covered Code\n          and/or as part of a Larger Work; and\n\n          (b) under Patent Claims infringed by the making, using, or\n          selling of  Modifications made by that Contributor either alone\n          and/or in combination with its Contributor Version (or portions\n          of such combination), to make, use, sell, offer for sale, have\n          made, and/or otherwise dispose of: 1) Modifications made by that\n          Contributor (or portions thereof); and 2) the combination of\n          Modifications made by that Contributor with its Contributor\n          Version (or portions of such combination).\n\n          (c) the licenses granted in Sections 2.2(a) and 2.2(b) are\n          effective on the date Contributor first makes Commercial Use of\n          the Covered Code.\n\n          (d)    Notwithstanding Section 2.2(b) above, no patent license is\n          granted: 1) for any code that Contributor has deleted from the\n          Contributor Version; 2)  separate from the Contributor Version;\n          3)  for infringements caused by: i) third party modifications of\n          Contributor Version or ii)  the combination of Modifications made\n          by that Contributor with other software  (except as part of the\n          Contributor Version) or other devices; or 4) under Patent Claims\n          infringed by Covered Code in the absence of Modifications made by\n          that Contributor.\n\n3. Distribution Obligations.\n\n     3.1. Application of License.\n     The Modifications which You create or to which You contribute are\n     governed by the terms of this License, including without limitation\n     Section 2.2. The Source Code version of Covered Code may be\n     distributed only under the terms of this License or a future version\n     of this License released under Section 6.1, and You must include a\n     copy of this License with every copy of the Source Code You\n     distribute. You may not offer or impose any terms on any Source Code\n     version that alters or restricts the applicable version of this\n     License or the recipients' rights hereunder. However, You may include\n     an additional document offering the additional rights described in\n     Section 3.5.\n\n     3.2. Availability of Source Code.\n     Any Modification which You create or to which You contribute must be\n     made available in Source Code form under the terms of this License\n     either on the same media as an Executable version or via an accepted\n     Electronic Distribution Mechanism to anyone to whom you made an\n     Executable version available; and if made available via Electronic\n     Distribution Mechanism, must remain available for at least twelve (12)\n     months after the date it initially became available, or at least six\n     (6) months after a subsequent version of that particular Modification\n     has been made available to such recipients. You are responsible for\n     ensuring that the Source Code version remains available even if the\n     Electronic Distribution Mechanism is maintained by a third party.\n\n     3.3. Description of Modifications.\n     You must cause all Covered Code to which You contribute to contain a\n     file documenting the changes You made to create that Covered Code and\n     the date of any change. You must include a prominent statement that\n     the Modification is derived, directly or indirectly, from Original\n     Code provided by the Initial Developer and including the name of the\n     Initial Developer in (a) the Source Code, and (b) in any notice in an\n     Executable version or related documentation in which You describe the\n     origin or ownership of the Covered Code.\n\n     3.4. Intellectual Property Matters\n          (a) Third Party Claims.\n          If Contributor has knowledge that a license under a third party's\n          intellectual property rights is required to exercise the rights\n          granted by such Contributor under Sections 2.1 or 2.2,\n          Contributor must include a text file with the Source Code\n          distribution titled \"LEGAL\" which describes the claim and the\n          party making the claim in sufficient detail that a recipient will\n          know whom to contact. If Contributor obtains such knowledge after\n          the Modification is made available as described in Section 3.2,\n          Contributor shall promptly modify the LEGAL file in all copies\n          Contributor makes available thereafter and shall take other steps\n          (such as notifying appropriate mailing lists or newsgroups)\n          reasonably calculated to inform those who received the Covered\n          Code that new knowledge has been obtained.\n\n          (b) Contributor APIs.\n          If Contributor's Modifications include an application programming\n          interface and Contributor has knowledge of patent licenses which\n          are reasonably necessary to implement that API, Contributor must\n          also include this information in the LEGAL file.\n\n               (c)    Representations.\n          Contributor represents that, except as disclosed pursuant to\n          Section 3.4(a) above, Contributor believes that Contributor's\n          Modifications are Contributor's original creation(s) and/or\n          Contributor has sufficient rights to grant the rights conveyed by\n          this License.\n\n     3.5. Required Notices.\n     You must duplicate the notice in Exhibit A in each file of the Source\n     Code.  If it is not possible to put such notice in a particular Source\n     Code file due to its structure, then You must include such notice in a\n     location (such as a relevant directory) where a user would be likely\n     to look for such a notice.  If You created one or more Modification(s)\n     You may add your name as a Contributor to the notice described in\n     Exhibit A.  You must also duplicate this License in any documentation\n     for the Source Code where You describe recipients' rights or ownership\n     rights relating to Covered Code.  You may choose to offer, and to\n     charge a fee for, warranty, support, indemnity or liability\n     obligations to one or more recipients of Covered Code. However, You\n     may do so only on Your own behalf, and not on behalf of the Initial\n     Developer or any Contributor. You must make it absolutely clear than\n     any such warranty, support, indemnity or liability obligation is\n     offered by You alone, and You hereby agree to indemnify the Initial\n     Developer and every Contributor for any liability incurred by the\n     Initial Developer or such Contributor as a result of warranty,\n     support, indemnity or liability terms You offer.\n\n     3.6. Distribution of Executable Versions.\n     You may distribute Covered Code in Executable form only if the\n     requirements of Section 3.1-3.5 have been met for that Covered Code,\n     and if You include a notice stating that the Source Code version of\n     the Covered Code is available under the terms of this License,\n     including a description of how and where You have fulfilled the\n     obligations of Section 3.2. The notice must be conspicuously included\n     in any notice in an Executable version, related documentation or\n     collateral in which You describe recipients' rights relating to the\n     Covered Code. You may distribute the Executable version of Covered\n     Code or ownership rights under a license of Your choice, which may\n     contain terms different from this License, provided that You are in\n     compliance with the terms of this License and that the license for the\n     Executable version does not attempt to limit or alter the recipient's\n     rights in the Source Code version from the rights set forth in this\n     License. If You distribute the Executable version under a different\n     license You must make it absolutely clear that any terms which differ\n     from this License are offered by You alone, not by the Initial\n     Developer or any Contributor. You hereby agree to indemnify the\n     Initial Developer and every Contributor for any liability incurred by\n     the Initial Developer or such Contributor as a result of any such\n     terms You offer.\n\n     3.7. Larger Works.\n     You may create a Larger Work by combining Covered Code with other code\n     not governed by the terms of this License and distribute the Larger\n     Work as a single product. In such a case, You must make sure the\n     requirements of this License are fulfilled for the Covered Code.\n\n4. Inability to Comply Due to Statute or Regulation.\n\n     If it is impossible for You to comply with any of the terms of this\n     License with respect to some or all of the Covered Code due to\n     statute, judicial order, or regulation then You must: (a) comply with\n     the terms of this License to the maximum extent possible; and (b)\n     describe the limitations and the code they affect. Such description\n     must be included in the LEGAL file described in Section 3.4 and must\n     be included with all distributions of the Source Code. Except to the\n     extent prohibited by statute or regulation, such description must be\n     sufficiently detailed for a recipient of ordinary skill to be able to\n     understand it.\n\n5. Application of this License.\n\n     This License applies to code to which the Initial Developer has\n     attached the notice in Exhibit A and to related Covered Code.\n\n6. Versions of the License.\n\n     6.1. New Versions.\n     Netscape Communications Corporation (\"Netscape\") may publish revised\n     and/or new versions of the License from time to time. Each version\n     will be given a distinguishing version number.\n\n     6.2. Effect of New Versions.\n     Once Covered Code has been published under a particular version of the\n     License, You may always continue to use it under the terms of that\n     version. You may also choose to use such Covered Code under the terms\n     of any subsequent version of the License published by Netscape. No one\n     other than Netscape has the right to modify the terms applicable to\n     Covered Code created under this License.\n\n     6.3. Derivative Works.\n     If You create or use a modified version of this License (which you may\n     only do in order to apply it to code which is not already Covered Code\n     governed by this License), You must (a) rename Your license so that\n     the phrases \"Mozilla\", \"MOZILLAPL\", \"MOZPL\", \"Netscape\",\n     \"MPL\", \"NPL\" or any confusingly similar phrase do not appear in your\n     license (except to note that your license differs from this License)\n     and (b) otherwise make it clear that Your version of the license\n     contains terms which differ from the Mozilla Public License and\n     Netscape Public License. (Filling in the name of the Initial\n     Developer, Original Code or Contributor in the notice described in\n     Exhibit A shall not of themselves be deemed to be modifications of\n     this License.)\n\n7. DISCLAIMER OF WARRANTY.\n\n     COVERED CODE IS PROVIDED UNDER THIS LICENSE ON AN \"AS IS\" BASIS,\n     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,\n     WITHOUT LIMITATION, WARRANTIES THAT THE COVERED CODE IS FREE OF\n     DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING.\n     THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED CODE\n     IS WITH YOU. SHOULD ANY COVERED CODE PROVE DEFECTIVE IN ANY RESPECT,\n     YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE\n     COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER\n     OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF\n     ANY COVERED CODE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.\n\n8. TERMINATION.\n\n     8.1.  This License and the rights granted hereunder will terminate\n     automatically if You fail to comply with terms herein and fail to cure\n     such breach within 30 days of becoming aware of the breach. All\n     sublicenses to the Covered Code which are properly granted shall\n     survive any termination of this License. Provisions which, by their\n     nature, must remain in effect beyond the termination of this License\n     shall survive.\n\n     8.2.  If You initiate litigation by asserting a patent infringement\n     claim (excluding declatory judgment actions) against Initial Developer\n     or a Contributor (the Initial Developer or Contributor against whom\n     You file such action is referred to as \"Participant\")  alleging that:\n\n     (a)  such Participant's Contributor Version directly or indirectly\n     infringes any patent, then any and all rights granted by such\n     Participant to You under Sections 2.1 and/or 2.2 of this License\n     shall, upon 60 days notice from Participant terminate prospectively,\n     unless if within 60 days after receipt of notice You either: (i)\n     agree in writing to pay Participant a mutually agreeable reasonable\n     royalty for Your past and future use of Modifications made by such\n     Participant, or (ii) withdraw Your litigation claim with respect to\n     the Contributor Version against such Participant.  If within 60 days\n     of notice, a reasonable royalty and payment arrangement are not\n     mutually agreed upon in writing by the parties or the litigation claim\n     is not withdrawn, the rights granted by Participant to You under\n     Sections 2.1 and/or 2.2 automatically terminate at the expiration of\n     the 60 day notice period specified above.\n\n     (b)  any software, hardware, or device, other than such Participant's\n     Contributor Version, directly or indirectly infringes any patent, then\n     any rights granted to You by such Participant under Sections 2.1(b)\n     and 2.2(b) are revoked effective as of the date You first made, used,\n     sold, distributed, or had made, Modifications made by that\n     Participant.\n\n     8.3.  If You assert a patent infringement claim against Participant\n     alleging that such Participant's Contributor Version directly or\n     indirectly infringes any patent where such claim is resolved (such as\n     by license or settlement) prior to the initiation of patent\n     infringement litigation, then the reasonable value of the licenses\n     granted by such Participant under Sections 2.1 or 2.2 shall be taken\n     into account in determining the amount or value of any payment or\n     license.\n\n     8.4.  In the event of termination under Sections 8.1 or 8.2 above,\n     all end user license agreements (excluding distributors and resellers)\n     which have been validly granted by You or any distributor hereunder\n     prior to termination shall survive termination.\n\n9. LIMITATION OF LIABILITY.\n\n     UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT\n     (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL\n     DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED CODE,\n     OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR\n     ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY\n     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL,\n     WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER\n     COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN\n     INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF\n     LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY\n     RESULTING FROM SUCH PARTY'S NEGLIGENCE TO THE EXTENT APPLICABLE LAW\n     PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE\n     EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO\n     THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.\n\n10. U.S. GOVERNMENT END USERS.\n\n     The Covered Code is a \"commercial item,\" as that term is defined in\n     48 C.F.R. 2.101 (Oct. 1995), consisting of \"commercial computer\n     software\" and \"commercial computer software documentation,\" as such\n     terms are used in 48 C.F.R. 12.212 (Sept. 1995). Consistent with 48\n     C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995),\n     all U.S. Government End Users acquire Covered Code with only those\n     rights set forth herein.\n\n11. MISCELLANEOUS.\n\n     This License represents the complete agreement concerning subject\n     matter hereof. If any provision of this License is held to be\n     unenforceable, such provision shall be reformed only to the extent\n     necessary to make it enforceable. This License shall be governed by\n     California law provisions (except to the extent applicable law, if\n     any, provides otherwise), excluding its conflict-of-law provisions.\n     With respect to disputes in which at least one party is a citizen of,\n     or an entity chartered or registered to do business in the United\n     States of America, any litigation relating to this License shall be\n     subject to the jurisdiction of the Federal Courts of the Northern\n     District of California, with venue lying in Santa Clara County,\n     California, with the losing party responsible for costs, including\n     without limitation, court costs and reasonable attorneys' fees and\n     expenses. The application of the United Nations Convention on\n     Contracts for the International Sale of Goods is expressly excluded.\n     Any law or regulation which provides that the language of a contract\n     shall be construed against the drafter shall not apply to this\n     License.\n\n12. RESPONSIBILITY FOR CLAIMS.\n\n     As between Initial Developer and the Contributors, each party is\n     responsible for claims and damages arising, directly or indirectly,\n     out of its utilization of rights under this License and You agree to\n     work with Initial Developer and Contributors to distribute such\n     responsibility on an equitable basis. Nothing herein is intended or\n     shall be deemed to constitute any admission of liability.\n\n13. MULTIPLE-LICENSED CODE.\n\n     Initial Developer may designate portions of the Covered Code as\n     \"Multiple-Licensed\".  \"Multiple-Licensed\" means that the Initial\n     Developer permits you to utilize portions of the Covered Code under\n     Your choice of the NPL or the alternative licenses, if any, specified\n     by the Initial Developer in the file described in Exhibit A.\n\nEXHIBIT A -Mozilla Public License.\n\n     ``The contents of this file are subject to the Mozilla Public License\n     Version 1.1 (the \"License\"); you may not use this file except in\n     compliance with the License. You may obtain a copy of the License at\n     http://www.mozilla.org/MPL/\n\n     Software distributed under the License is distributed on an \"AS IS\"\n     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n     License for the specific language governing rights and limitations\n     under the License.\n\n     The Original Code is ______________________________________.\n\n     The Initial Developer of the Original Code is ________________________.\n     Portions created by ______________________ are Copyright (C) ______\n     _______________________. All Rights Reserved.\n\n     Contributor(s): ______________________________________.\n\n     Alternatively, the contents of this file may be used under the terms\n     of the _____ license (the  \"[___] License\"), in which case the\n     provisions of [______] License are applicable instead of those\n     above.  If you wish to allow use of your version of this file only\n     under the terms of the [____] License and not to allow others to use\n     your version of this file under the MPL, indicate your decision by\n     deleting  the provisions above and replace  them with the notice and\n     other provisions required by the [___] License.  If you do not delete\n     the provisions above, a recipient may use your version of this file\n     under either the MPL or the [___] License.\"\n\n     [NOTE: The text of this Exhibit A may differ slightly from the text of\n     the notices in the Source Code files of the Original Code. You should\n     use the text of this Exhibit A rather than the text found in the\n     Original Code Source Code for Your Modifications.]\n\n     ----------------------------------------------------------------------\n\n     AMENDMENTS\n\n     The Netscape Public License Version 1.1 (\"NPL\") consists of the\n     Mozilla Public License Version 1.1 with the following Amendments,\n     including Exhibit A-Netscape Public License.  Files identified with\n     \"Exhibit A-Netscape Public License\" are governed by the Netscape\n     Public License Version 1.1.\n\n     Additional Terms applicable to the Netscape Public License.\n          I. Effect.\n          These additional terms described in this Netscape Public\n          License -- Amendments shall apply to the Mozilla Communicator\n          client code and to all Covered Code under this License.\n\n          II. \"Netscape's Branded Code\" means Covered Code that Netscape\n          distributes and/or permits others to distribute under one or more\n          trademark(s) which are controlled by Netscape but which are not\n          licensed for use under this License.\n\n          III. Netscape and logo.\n          This License does not grant any rights to use the trademarks\n          \"Netscape\", the \"Netscape N and horizon\" logo or the \"Netscape\n          lighthouse\" logo, \"Netcenter\", \"Gecko\", \"Java\" or \"JavaScript\",\n          \"Smart Browsing\" even if such marks are included in the Original\n          Code or Modifications.\n\n          IV. Inability to Comply Due to Contractual Obligation.\n          Prior to licensing the Original Code under this License, Netscape\n          has licensed third party code for use in Netscape's Branded Code.\n          To the extent that Netscape is limited contractually from making\n          such third party code available under this License, Netscape may\n          choose to reintegrate such code into Covered Code without being\n          required to distribute such code in Source Code form, even if\n          such code would otherwise be considered \"Modifications\" under\n          this License.\n\n          V. Use of Modifications and Covered Code by Initial Developer.\n               V.1. In General.\n               The obligations of Section 3 apply to Netscape, except to\n               the extent specified in this Amendment, Section V.2 and V.3.\n\n               V.2. Other Products.\n               Netscape may include Covered Code in products other than the\n               Netscape's Branded Code which are released by Netscape\n               during the two (2) years following the release date of the\n               Original Code, without such additional products becoming\n               subject to the terms of this License, and may license such\n               additional products on different terms from those contained\n               in this License.\n\n               V.3. Alternative Licensing.\n               Netscape may license the Source Code of Netscape's Branded\n               Code, including Modifications incorporated therein, without\n               such Netscape Branded Code becoming subject to the terms of\n               this License, and may license such Netscape Branded Code on\n               different terms from those contained in this License.\n\n          VI. Litigation.\n          Notwithstanding the limitations of Section 11 above, the\n          provisions regarding litigation in Section 11(a), (b) and (c) of\n          the License shall apply to all disputes relating to this License.\n\n     EXHIBIT A-Netscape Public License.\n\n          \"The contents of this file are subject to the Netscape Public\n          License Version 1.1 (the \"License\"); you may not use this file\n          except in compliance with the License. You may obtain a copy of\n          the License at http://www.mozilla.org/NPL/\n\n          Software distributed under the License is distributed on an \"AS\n          IS\" basis, WITHOUT WARRANTY OF ANY KIND, either express or\n          implied. See the License for the specific language governing\n          rights and limitations under the License.\n\n          The Original Code is Mozilla Communicator client code, released\n          March 31, 1998.\n\n          The Initial Developer of the Original Code is Netscape\n          Communications Corporation. Portions created by Netscape are\n          Copyright (C) 1998-1999 Netscape Communications Corporation. All\n          Rights Reserved.\n\n          Contributor(s): ______________________________________.\n\n          Alternatively, the contents of this file may be used under the\n          terms of the _____ license (the \"[___] License\"), in which case\n          the provisions of [______] License are applicable  instead of\n          those above.  If you wish to allow use of your version of this\n          file only under the terms of the [____] License and not to allow\n          others to use your version of this file under the NPL, indicate\n          your decision by deleting  the provisions above and replace  them\n          with the notice and other provisions required by the [___]\n          License.  If you do not delete the provisions above, a recipient\n          may use your version of this file under either the NPL or the\n          [___] License.\"\n"
        },
        {
          "name": "Main.sublime-menu",
          "type": "blob",
          "size": 1.2451171875,
          "content": "[\n    {\n        \"caption\": \"Preferences\",\n        \"children\": [\n            {\n                \"caption\": \"Package Settings\",\n                \"children\": [\n                    {\n                        \"caption\": \"SublimeCodeIntel\",\n                        \"children\": [\n                            {\n                                \"args\": {\n                                    \"file\": \"${packages}/SublimeCodeIntel/SublimeCodeIntel.sublime-settings\"\n                                },\n                                \"caption\": \"Settings \\u2013 Default\",\n                                \"command\": \"open_file\"\n                            },\n                            {\n                                \"args\": {\n                                    \"file\": \"${packages}/User/SublimeCodeIntel.sublime-settings\"\n                                },\n                                \"caption\": \"Settings \\u2013 User\",\n                                \"command\": \"open_file\"\n                            }\n                        ],\n                        \"id\": \"sublimecodeintel\"\n                    }\n                ],\n                \"id\": \"package-settings\",\n                \"mnemonic\": \"P\"\n            }\n        ],\n        \"id\": \"preferences\",\n        \"mnemonic\": \"n\"\n    }\n]\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.8291015625,
          "content": "SublimeCodeIntel\n================\n\nThis Code Intelligence plugin for [Sublime Text](https://www.sublimetext.com)\nprovides an interface to [CodeIntel](http://pypi.python.org/pypi/CodeIntel).\nCodeIntel is a code intelligence engine that was ported from\n[Open Komodo Editor](http://www.openkomodo.com) to a stand-alone Python package.\n\nCodeIntel supports all the languages Komodo Editor supports for Code Intelligence\n(CIX, CodeIntel2) and a few others:\n\n> ActionScript, Django, Docker, EJS, epMojo, HTML, KomodoSnippet,\n> LaravelBlade, Mason, Mustache, MXML, PHP, R, reStructuredText, RHTML,\n> Smarty, TracWiki, TemplateToolkit, Twig, XBL, XML, XSLT, XUL, Python,\n> Python3, Ruby, Perl, Go, ECMAScript, JavaScript, Node.js, CSS, SCSS, Sass,\n> Less, HTML5, Tcl, C/C++, Objective-C.\n\nThe plugin provides the following features:\n\n-   Jump to Symbol Definition - Jump to the file and line of the\n    definition of a symbol.\n-   Imports autocomplete - Shows autocomplete with the available\n    modules/symbols in real-time.\n-   Function Call tooltips - Displays information in the status bar\n    about the working function.\n\nThe package should work on all three platforms (MacOS X, Windows, and Linux).\n\n[![Click here to lend your support to CodeIntel/SublimeCodeIntel and make a donation!](https://www.paypalobjects.com/en_GB/i/btn/btn_donate_LG.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=VVX4Q9H3924LE)\n\nCodeIntel Installation\n----------------------\n\nBefore installing `SublimeCodeIntel`, you must ensure that `CodeIntel` is installed\non your system. To install `CodeIntel`, do the following:\n\n1. Install [Python](http://python.org) and [pip](http://www.pip-installer.org/en/latest/installing.html) (Python 3 requires pip3).\n\n1. Install `CodeIntel` by typing the following in a terminal:\n   ```\n   # For Python 2\n   [sudo] pip install --upgrade --pre CodeIntel\n\n   # For Python 3\n   [sudo] pip3 install --upgrade --pre CodeIntel\n   ```\n\n**Note:** `SublimeCodeIntel` requires `CodeIntel` 2.0 or later.\n\nPlugin Installation\n-------------------\n\n**With the Package Control plugin:** The easiest way to install\n`SublimeCodeIntel` is through Package Control, which can be found at\nthis site: <http://wbond.net/sublime_packages/package_control>\n\nOnce you install Package Control, restart Sublime Text and bring up the\nCommand Palette (`Command+Shift+P` on OS X, `Control+Shift+P` on\nLinux/Windows). Select \"Package Control: Install Package\", wait while\nPackage Control fetches the latest package list, then select\nSublimeCodeIntel when the list appears. The advantage of using this\nmethod is that Package Control will automatically keep SublimeCodeIntel\nup to date with the latest version.\n\n\\*\\*Without <Git:**> Download the latest source from\n[GitHub](http://github.com/SublimeCodeIntel/SublimeCodeIntel) and copy\nthe whole directory into the Packages directory.\n\n\\*\\*With <Git:**> Clone the repository in your Sublime Text Packages\ndirectory, located somewhere in user's \"Home\" directory:\n\n    git clone git://github.com/SublimeCodeIntel/SublimeCodeIntel.git\n\nThe \"Packages\" packages directory is located differently on different\nplatforms. To access the directory use:\n\n-   OS X:\n\n        Sublime Text -> Preferences -> Browse Packages...\n\n-   Linux:\n\n        Preferences -> Browse Packages...\n\n-   Windows:\n\n        Preferences -> Browse Packages...\n\nUsing\n-----\n\n-   Start typing code, as usual, autocomplete will pop up whenever it's\n    available. SublimeCodeIntel will also allow you to jump around\n    symbol definitions even across files with just a click ..and back.\n\n    For Mac OS X:\n\n    -   Jump to definition = `Control+Click`\n    -   Jump to definition = `Control+Command+Alt+Up`\n    -   Go back = `Control+Command+Alt+Left`\n    -   Manual Code Intelligence = `Control+Shift+space`\n\n    For Linux:\n\n    -   Jump to definition = `Super+Click`\n    -   Jump to definition = `Control+Super+Alt+Up`\n    -   Go back = `Control+Super+Alt+Left`\n    -   Manual Code Intelligence = `Control+Shift+space`\n\n    For Windows:\n\n    -   Jump to definition = `Alt+Click`\n    -   Jump to definition = `Control+Windows+Alt+Up`\n    -   Go back = `Control+Windows+Alt+Left`\n    -   Manual Code Intelligence = `Control+Shift+space`\n\nDon't despair! The first time you use it it needs to build some indexes\nand it can take more than a few seconds.\n\nIt just works!\n\nConfiguring\n-----------\n\nFor adding additional library paths (Django and extra libs paths for\nPython or extra paths to look for .js files for JavaScript for example),\neither add those paths as folders to your Sublime Text project or\nmodify SublimeCodeIntel User settings. User settings can be configured\nin the User File Settings:\n\nDo NOT edit the default SublimeCodeIntel settings. Your changes will be\nlost when SublimeCodeIntel is updated. ALWAYS edit the user\nSublimeCodeIntel settings by selecting \"Preferences-&gt;Package\nSettings-&gt;SublimeCodeIntel-&gt;Settings - User\". Note that individual\nsettings you include in your user settings will **completely** replace\nthe corresponding default setting, so you must provide that setting in\nits entirety.\n\nAvailable settings:\n\n-   A list of disabled languages can be set using\n    \"disabled\\_languages\". Ex.\n    `\"disabled_languages\": ['css']`\n-   Live autocomplete can be disabled by setting \"live\" to\n    false.\n-   Information for more settings is available in the\n    `SublimeCodeIntel.sublime-settings` file in the package.\n\nTroubleshooting\n---------------\n\nIf you are having problems or SublimeCodeIntel seems\nslow/unresponsive/non-working, there are some things you should try:\n\n1.  Make sure the SublimeCodeIntel is not being treated as an ignored\n    package.\n2.  Regenerate indexing database.\n3.  Open a new issue.\n\n### Ignored package?\n\nTo make sure Sublime Text didn't add SublimeCodeIntel to the list of\nignored packages (this happens some times when packages are being\ninstalled/upgraded):\n\n-   Select the `Preferences/Settings - Default` menu item\n-   Find the `ignored_packages` setting and remove SublimeCodeIntel from\n    the list.\n\n### Regenerate index\n\nTo force re-indexation of the code intelligence database you need to\nfollow these steps:\n\n-   Close Sublime Text\n-   Open a terminal or navigate through your directories to find the\n    directory `~/.codeintel` that contains `codeintel.log`, `VERSION`\n    and the directory `db`. In Windows, this should be at\n    `%userprofile%\\.codeintel`.\n-   Delete the whole directory `~/.codeintel` and all of its content.\n    Particularly, if you want to delete only the indexes, the code intelligence database indexes are located inside `~/.codeintel/db`.\n-   Start Sublime Text\n-   Try doing some code intelligence with the files in your project and\n    enjoy a clean re-indexing! (Remember that the database is being\n    regenerated with this procedure, so you'll see it takes some time to\n    autocomplete the first few times, you'll have to wait a bit for\n    things to be fast again)\n\n### Opening an issue\n\nIf the problems persist after trying the above solutions, open a new\nissue in <https://github.com/SublimeCodeIntel/SublimeCodeIntel/issues/>\n\nWhen opening new issues, please check no other issues exist which report\nthe same problem and provide all the messages from the Sublime Text\nconsole (the console is accessed via the `ctrl+`\\` shortcut or the\n`View > Show Console` menu) and the `~/.codeintel/codeintel.log` file\n(`%userprofile%\\.codeintel\\codeintel.log` in Windows) as well as\nmentioning the Sublime Text version, the platform you are using and the\nlanguages you are using the code intelligence on.\n\n\nWhat's New\n----------\n\nv3.0.0 (unreleased, beta):\n\n-   Uses CodeIntel as an OOP command and package. Needs to install\n    CodeIntel with pip: `pip install --upgrade --pre CodeIntel`\n\nv2.2.0 (2015-03-26):\n\n-   Fixed issue with tabs and autocomplete\n\n\nLicense\n-------\n\nThe plugin is based on code from the Open Komodo Editor and has an MPL license.\n\nPorted from Open Komodo by German M. Bravo (Kronuz).\n"
        },
        {
          "name": "SublimeCodeIntel.py",
          "type": "blob",
          "size": 29.880859375,
          "content": "# -*- coding: utf-8 -*-\n# ***** BEGIN LICENSE BLOCK *****\n# Version: MPL 1.1/GPL 2.0/LGPL 2.1\n#\n# The contents of this file are subject to the Mozilla Public License\n# Version 1.1 (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\"\n# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n# License for the specific language governing rights and limitations\n# under the License.\n#\n# The Original Code is SublimeCodeIntel code by German M. Bravo (Kronuz).\n#\n# Contributor(s):\n#   ActiveState Software Inc\n#\n# Portions created by ActiveState Software Inc are Copyright (C) 2000-2007\n# ActiveState Software Inc. All Rights Reserved.\n#\n\"\"\"\nCodeIntel is a plugin intended to display \"code intelligence\" information.\nThe plugin is based in code from the Open Komodo Editor and has a MPL license.\nPort by German M. Bravo (Kronuz). 2011-2017\n\n\"\"\"\nfrom __future__ import absolute_import, unicode_literals, print_function\n\nNAME = \"SublimeCodeIntel\"\nVERSION = \"3.0.0-rc.1\"\n\nimport os\nimport re\nimport logging\nimport textwrap\nimport threading\nfrom collections import deque\n\nimport sublime\nimport sublime_plugin\n\nfrom .libs.codeintel import CodeIntel, CodeIntelBuffer, logger as codeintel_logger, logger_level as codeintel_logger_level\nfrom .settings import Settings, SettingTogglerCommandMixin\n\nlogger_name = 'CodeIntel'\nlogger_level = logging.WARNING  # WARNING\n\nlogger = logging.getLogger(logger_name)\nlogger.setLevel(logger_level)\nif logger.root.handlers:\n    logger.root.handlers[0].setFormatter(logging.Formatter(\"%(name)s: %(levelname)s: %(message)s\"))\n\n\nEXTRA_PATHS_MAP = {\n    'ECMAScript': 'ecmascriptExtraPaths',\n    'JavaScript': 'javascriptExtraPaths',\n    'Node.js': 'nodejsExtraPaths',\n    'Perl': 'perlExtraPaths',\n    'PHP': 'phpExtraPaths',\n    'Python3': 'python3ExtraPaths',\n    'Python': 'pythonExtraPaths',\n    'Ruby': 'rubyExtraPaths',\n    'C++': 'cppExtraPaths',\n}\n\nEXCLUDE_PATHS_MAP = {\n    'ECMAScript': 'ecmascriptExcludePaths',\n    'JavaScript': 'javascriptExcludePaths',\n    'Node.js': 'nodejsExcludePaths',\n    'Perl': 'perlExcludePaths',\n    'PHP': 'phpExcludePaths',\n    'Python3': 'python3ExcludePaths',\n    'Python': 'pythonExcludePaths',\n    'Ruby': 'rubyExcludePaths',\n    'C++': 'cppExcludePaths',\n}\n\n\nclass CodeintelHandler(object):\n    HISTORY_SIZE = 64\n    MAX_FILESIZE = 1 * 1024 * 1024   # 1MB\n    jump_history_by_window = {}  # map of window id -> deque([], HISTORY_SIZE)\n\n    status_msg = {}\n    status_lineno = {}\n    status_lock = threading.Lock()\n\n    def __init__(self, *args, **kwargs):\n        self.log = logging.getLogger(logger_name + '.' + self.__class__.__name__)\n        super(CodeintelHandler, self).__init__(*args, **kwargs)\n        ci.add_observer(self)\n\n    @property\n    def window(self):\n        if hasattr(self, '_window'):\n            return self._window\n        window = sublime.active_window()\n        if window:\n            return window\n\n    @window.setter\n    def window(self, value):\n        self._window = value\n\n    @property\n    def view(self):\n        if hasattr(self, '_view'):\n            return self._view\n        window = self.window\n        if window:\n            view = window.active_view()\n            if view:\n                return view\n\n    @view.setter\n    def view(self, value):\n        self._view = value\n\n    def set_status(self, ltype, msg=None, timeout=None, delay=0, lid='SublimeCodeIntel', logger_obj=None):\n        view = self.view\n        if not view:\n            return\n\n        if timeout is None:\n            timeout = {'critical': 3000, 'error': 3000, 'warning': 5000, 'info': 10000, 'debug': 10000,\n                       'event': 10000}.get(ltype, 3000)\n\n        if msg is None:\n            msg, ltype = ltype, 'info'\n        if isinstance(msg, tuple):\n            try:\n                msg = msg[0] % msg[1:]\n            except:\n                msg = repr(msg)\n        msg = msg.strip()\n\n        CodeintelHandler.status_lock.acquire()\n        try:\n            CodeintelHandler.status_msg.setdefault(lid, [None, None, 0])\n            if msg == CodeintelHandler.status_msg[lid][1]:\n                return\n            CodeintelHandler.status_msg[lid][2] += 1\n            order = CodeintelHandler.status_msg[lid][2]\n        finally:\n            CodeintelHandler.status_lock.release()\n\n        def _set_status():\n            is_warning = 'warning' in lid\n            if not is_warning:\n                view_sel = view.sel()\n                lineno = view.rowcol(view_sel[0].end())[0] if view_sel else 0\n            CodeintelHandler.status_lock.acquire()\n            try:\n                current_type, current_msg, current_order = CodeintelHandler.status_msg.get(lid, [None, None, 0])\n                if msg != current_msg and order == current_order:\n                    _logger_obj = getattr(logger, ltype, None) if logger_obj is None else logger_obj\n                    if _logger_obj:\n                        _logger_obj(msg)\n                    if ltype != 'debug':\n                        view.set_status(lid, \"%s %s: %s\" % (lid, ltype.capitalize(), msg.rstrip('.')))\n                        CodeintelHandler.status_msg[lid] = [ltype, msg, order]\n                    if not is_warning:\n                        CodeintelHandler.status_lineno[lid] = lineno\n            finally:\n                CodeintelHandler.status_lock.release()\n\n        def _erase_status():\n            CodeintelHandler.status_lock.acquire()\n            try:\n                if msg == CodeintelHandler.status_msg.get(lid, [None, None, 0])[1]:\n                    view.erase_status(lid)\n                    CodeintelHandler.status_msg[lid][1] = None\n                    if lid in CodeintelHandler.status_lineno:\n                        del CodeintelHandler.status_lineno[lid]\n            finally:\n                CodeintelHandler.status_lock.release()\n\n        if msg:\n            sublime.set_timeout(_set_status, delay or 0)\n            sublime.set_timeout(_erase_status, timeout)\n        else:\n            sublime.set_timeout(_erase_status, delay or 0)\n\n    def pos2bytes(self, content, pos):\n        return len(content[:pos].encode('utf-8'))\n\n    def guess_language(self, view, path):\n        language = os.path.splitext(os.path.basename(view.settings().get('syntax')))[0]\n        lang = settings.get('syntax_map', {}).get(language, language)\n        logger.info(\"Language guessed: %s (for %s)\", lang, language)\n        if lang in settings.get('disabled_languages', []):\n            return\n        if settings.get('@disable', False, lang=lang):\n            return\n        return lang\n\n    def buf_from_view(self, view):\n        if not view:\n            return\n\n        view_sel = view.sel()\n        if not view_sel:\n            return\n\n        file_name = view.file_name()\n        path = file_name if file_name else \"<Unsaved>\"\n\n        lang = self.guess_language(view, path)\n        if not lang or lang not in ci.languages:\n            logger.debug(\"buf_from_view: %r, %r? no: language unavailable in: [%s]\", path, lang, \", \".join(ci.languages))\n            return\n\n        if not settings.get('live', False, lang=lang):\n            logger.debug(\"buf_from_view: %r, %r? no: live disabled\", path, lang)\n            return\n\n        view_size = view.size()\n        if view.size() > self.MAX_FILESIZE:\n            logger.warn(\"File %r has size greater than 1MB (%d)\", path, view_size)\n            return\n\n        logger.debug(\"buf_from_view: %r, %r? yes\", path, lang)\n\n        vid = view.id()\n        try:\n            buf = ci.buffers[vid]\n        except KeyError:\n            logger.debug(\"creating new %s document %s\", lang, path)\n            buf = CodeIntelBuffer(ci, vid=vid)\n            ci.buffers[vid] = buf\n\n        sel = view_sel[0]\n        original_pos = sel.end()\n        lpos = view.line(sel).begin()\n\n        text_in_current_line = view.substr(sublime.Region(lpos, original_pos + 1))\n        text = view.substr(sublime.Region(0, view_size))\n\n        # Get encoded content and current position\n        pos = self.pos2bytes(text, original_pos)\n\n        buf.lang = lang\n        buf.path = path\n        buf.text = text\n        buf.pos = pos\n        buf.text_in_current_line = text_in_current_line\n        buf.original_pos = original_pos\n\n        prefs = settings.get_prefs(lang)\n\n        if settings.get('scan_files_in_project', lang=lang):\n            window = sublime.active_window()\n            extra_paths_name = EXTRA_PATHS_MAP.get(lang)\n            extra_paths = prefs.get(extra_paths_name, '').split(os.pathsep)\n            exclude_paths_name = EXCLUDE_PATHS_MAP.get(lang)\n            exclude_paths = prefs.get(exclude_paths_name, '').split(os.pathsep)\n            for f in window.folders():\n                f = os.path.normcase(os.path.normpath(os.path.expanduser(f))).rstrip(os.sep)\n                if f not in exclude_paths and f not in extra_paths:\n                    extra_paths.append(f)\n            if extra_paths:\n                prefs[extra_paths_name] = os.pathsep.join(extra_paths)\n\n        buf.prefs = prefs\n\n        return buf\n\n    def format_completions_by_language(self, cplns, lang, text_in_current_line, type):\n        function = None if 'import ' in text_in_current_line else 'function'\n\n        def get_desc(c):\n            return c[2] if len(c) > 2 else c[1]\n\n        def get_name(c):\n            name = c[1]\n            name = name.replace(\"$\", \"\\\\$\")\n            if c[0] == function:\n                name += \"($0)\"\n            return name\n\n        def get_type(c):\n            return c[0].title()\n\n        if lang == 'PHP' and type != 'object-members':\n            def get_name(c):\n                name = c[1]\n                if c[0] == 'variable':\n                    name = \"$\" + name\n                name = name.replace(\"$\", \"\\\\$\")\n                if c[0] == function:\n                    name += \"($0)\"\n                return name\n\n        if lang == 'ECMAScript':\n            def get_name(c):\n                name = c[1]\n                name = name.replace(\"$\", \"\\\\$\")\n                if c[0] == 'attribute':\n                    name += \"=$0 \"\n                elif c[0] == function:\n                    name += \"($0)\"\n                return name\n\n        def sorter(c):\n            return {\n                'import': '_',\n                'attribute': '__',\n                'variable': '__',\n                'function': '___',\n            }.get(c[0].lower(), c[0]), c[1]\n\n        return [('%s\\t〔%s〕' % (get_desc(c), get_type(c)), get_name(c)) for c in sorted(cplns, key=sorter)]\n\n    # Handlers follow\n\n    def on_document_scanned(self, buf):\n        \"\"\"Handler callback for scan_document\"\"\"\n\n    def on_get_calltip_range(self, buf, start, end):\n        pass\n\n    def on_trg_from_pos(self, buf, context, trg):\n        if context == 'trg_from_pos':\n            buf.async_eval_at_trg(self, trg)\n        elif context == 'defn_trg_from_pos':\n            buf.async_eval_at_trg(self, trg)\n\n    def set_status_message(self, buf, message, highlight=None):\n        def _set_status_message():\n            self.set_status(message)\n        sublime.set_timeout(_set_status_message, 0)\n\n    def set_call_tip_info(self, buf, calltip, explicit, trg):\n        def _set_call_tip_info():\n            view = self.view\n            if not view:\n                return\n            vid = view.id()\n            if vid != buf.vid:\n                return\n\n            # TODO: This snippets are created and work for Python language def functions.\n            # i.e. in the form: name(arg1, arg2, arg3)\n            # Other languages might need different treatment.\n\n            # Figure out how many arguments are there already:\n            text_in_current_line = buf.text_in_current_line[:-1]  # Remove next char after cursor\n            arguments = text_in_current_line.rpartition('(')[2].replace(' ', '').strip() or 0\n            if arguments:\n                initial_separator = ''\n                if arguments[-1] == ',':\n                    arguments = arguments[:-1]\n                else:\n                    initial_separator += ','\n                if not text_in_current_line.endswith(' '):\n                    initial_separator += ' '\n                arguments = arguments.count(',') + 1 if arguments else 0\n\n            # Insert parameters as snippet:\n            snippet = None\n            tip_info = calltip.split('\\n')\n            tip0 = tip_info[0]\n            m = re.search(r'^(.*\\()([^\\[\\(\\)]*)(.*)$', tip0)\n            if m:\n                params = [p.strip() for p in m.group(2).split(',')]\n                if params:\n                    n = 1\n                    tip0 = []\n                    snippet = []\n                    for i, p in enumerate(params):\n                        if p:\n                            var, sep, default = p.partition('=')\n                            var = var.strip()\n                            tvar = var\n                            if sep:\n                                tvar = \"%s<i>=%s</i>\" % (tvar, default)\n                            # if i == arguments:\n                            #     tvar = \"<b>%s</b>\" % tvar\n                            tip0.append(tvar)\n                            if i >= arguments:\n                                if ' ' in var:\n                                    var = var.split(' ')[1]\n                                if var[0] == '$':\n                                    var = var[1:]\n                                snippet.append('${%s:%s}' % (n, var))\n                                n += 1\n                    tip0 = \"<h1>%s%s%s</h1>\" % (m.group(1), ', '.join(tip0), m.group(3))\n                    snippet = ', '.join(snippet)\n                    if arguments and snippet:\n                        snippet = initial_separator + snippet\n            css = (\n                \"html {background-color: #232628; color: #999999;}\" +\n                \"body {font-size: 10px; }\" +\n                \"b {color: #6699cc; }\" +\n                \"a {color: #99cc99; }\" +\n                \"h1 {color: #cccccc; font-weight: normal; font-size: 11px; }\"\n            )\n\n            # Wrap lines that are too long:\n            wrapper = textwrap.TextWrapper(width=100, break_on_hyphens=False, break_long_words=False)\n            measured_tips = [tip0]\n            for t in tip_info[1:]:\n                measured_tips.extend(wrapper.wrap(t))\n\n            if hasattr(view, 'show_popup'):\n                def insert_snippet(href):\n                    view.run_command('insert_snippet', {'contents': snippet})\n                    view.hide_popup()\n\n                view.show_popup('<style>%s</style>%s<br><br><a href=\"insert\">insert</a>' % (css, \"<br>\".join(measured_tips)), location=-1, max_width=700, on_navigate=insert_snippet)\n\n            else:\n                # Insert tooltip snippet\n                padding = '   '\n                snippets = [((padding if i > 0 else '') + l + (padding if i > 0 else ''), snippet or '${0}') for i, l in enumerate(measured_tips)]\n\n                buf.cplns = snippets or None\n                if buf.cplns:\n                    view.run_command('auto_complete', {\n                        'disable_auto_insert': True,\n                        'api_completions_only': True,\n                        'next_completion_if_showing': False,\n                        'auto_complete_commit_on_tab': True,\n                    })\n        sublime.set_timeout(_set_call_tip_info, 0)\n\n    def set_auto_complete_info(self, buf, cplns, trg):\n        def _set_auto_complete_info():\n            view = self.view\n            if not view:\n                return\n            vid = view.id()\n            if vid != buf.vid:\n                return\n\n            _cplns = self.format_completions_by_language(cplns, buf.lang, buf.text_in_current_line, trg.get('type'))\n\n            buf.cplns = _cplns or None\n            if buf.cplns:\n                view.run_command('auto_complete', {\n                    'disable_auto_insert': True,\n                    'api_completions_only': True,\n                    'next_completion_if_showing': False,\n                    'auto_complete_commit_on_tab': True,\n                })\n        sublime.set_timeout(_set_auto_complete_info, 0)\n\n    def set_definitions_info(self, buf, defns, trg):\n        def _set_definitions_info():\n            view = self.view\n\n            view_sel = view.sel()\n            if not view_sel:\n                return\n\n            file_name = view.file_name()\n            path = file_name if file_name else \"<Unsaved>\"\n\n            defn = defns[0]\n            row, col = defn['line'], 1\n            path = defn['path']\n            if not path:\n                msg = \"Cannot jump to definition!\"\n                logger.debug(msg)\n                return\n\n            jump_location = \"%s:%s:%s\" % (path, row, col)\n            msg = \"Jumping to: %s\" % jump_location\n            logger.debug(msg)\n\n            window = sublime.active_window()\n            wid = window.id()\n            if wid not in CodeintelHandler.jump_history_by_window:\n                CodeintelHandler.jump_history_by_window[wid] = deque([], CodeintelHandler.HISTORY_SIZE)\n            jump_history = CodeintelHandler.jump_history_by_window[wid]\n\n            # Save current position so we can return to it\n            row, col = view.rowcol(view_sel[0].begin())\n            current_location = \"%s:%d:%d\" % (file_name, row + 1, col + 1)\n            jump_history.append(current_location)\n\n            window.open_file(jump_location, sublime.ENCODED_POSITION)\n            window.open_file(jump_location, sublime.ENCODED_POSITION)\n        sublime.set_timeout(_set_definitions_info, 0)\n\n    def done(self):\n        pass\n\n\nclass SublimeCodeIntel(CodeintelHandler, sublime_plugin.EventListener):\n    def observer(self, topic, data):\n        def _get_and_log_message(response):\n            message = response.get('message')\n            if message:\n                stack = response.get('stack')\n                if stack:\n                    logger.error(message.rstrip() + \"\\n\" + stack)\n            return message\n\n        def _observer():\n            if topic == 'status_message':\n                ltype = 'info'\n            elif topic == 'error_message':\n                ltype = 'error'\n            elif 'codeintel_buffer_scanned':\n                return\n            else:\n                return\n            logger_obj = None\n            if data.get('type') == 'logging':\n                # logger_name = data.get('name')\n                level = data.get('level')\n                if level >= logging.CRITICAL:\n                    logger_obj = logger.critical\n                    ltype = 'critical'\n                elif level >= logging.ERROR:\n                    logger_obj = logger.error\n                    ltype = 'error'\n                elif level >= logging.WARNING:\n                    logger_obj = logger.warn\n                    ltype = 'warning'\n                elif level >= logging.INFO:\n                    logger_obj = logger.info\n                    ltype = 'info'\n                elif level >= logging.DEBUG:\n                    logger_obj = logger.debug\n                    ltype = 'debug'\n            progress = data.get('progress') or data.get('completed')\n            if progress is not None:\n                total = data.get('total', 100)\n                if not total:\n                    progress = None\n                elif total == 100:\n                    progress = (\"%0.1f\" % progress).rstrip('.0') + \"%\"\n                else:\n                    progress = \"%s/%s\" % (progress, total)\n            message = _get_and_log_message(data)\n            if progress and message:\n                message = \"%s - %s\" % (progress, message)\n            elif progress:\n                message = progress\n            elif not message:\n                return\n            self.set_status(ltype, message, lid='SublimeCodeIntel Notification', logger_obj=logger_obj)\n        sublime.set_timeout(_observer, 0)\n\n    def on_pre_save(self, view):\n        if view.is_dirty():\n            buf = self.buf_from_view(view)\n            if buf:\n                buf.scan_document(self, True)\n\n    def on_close(self, view):\n        vid = view.id()\n        ci.buffers.pop(vid, None)\n\n    def on_modified(self, view):\n        view_sel = view.sel()\n        if not view_sel:\n            return\n\n        if settings.get('@disable', False) or not settings.get('live', False):\n            return\n\n        sel = view_sel[0]\n        pos = sel.end()\n        current_char = view.substr(sublime.Region(pos - 1, pos))\n\n        if not current_char or current_char in ('\\n', '\\t'):\n            return\n\n        command_history = getattr(view, 'command_history', None)\n        if command_history:\n            redo_command = command_history(1)\n            previous_command = view.command_history(0)\n            before_previous_command = view.command_history(-1)\n        else:\n            redo_command = previous_command = before_previous_command = None\n\n        # print('on_modified', \"%r\\n\\tcommand_history: %r\\n\\tredo_command: %r\\n\\tprevious_command: %r\\n\\tbefore_previous_command: %r\" % (current_char, bool(command_history), redo_command, previous_command, before_previous_command))\n        if not command_history or redo_command[1] is None and (\n            previous_command[0] == 'insert' and previous_command[1]['characters'][-1] not in ('\\n', '\\t') or\n            previous_command[0] in ('insert_completion', 'paste', 'codeintel_complete_commit') or\n            previous_command[0] == 'insert_snippet' and previous_command[1]['contents'] in (\n                '(${0:$SELECTION})', '[${0:$SELECTION}]', '{${0:$SELECTION}}', '`${0:$SELECTION}`', '\"${0:$SELECTION}\"', \"'${0:$SELECTION}'\",\n                '($0)', '[$0]', '{$0}', '`$0`', '\"$0\"', \"'$0'\",\n            ) or\n            before_previous_command[0] in ('insert', 'paste') and (\n                previous_command[0] == 'commit_completion' or\n                previous_command[0] == 'insert_completion' or\n                previous_command[0] == 'insert_best_completion'\n            )\n        ):\n            buf = self.buf_from_view(view)\n            # print('on_modified.triggering', bool(buf))\n            if buf:\n                buf.trg_from_pos(self, True)\n\n    def on_selection_modified(self, view):\n        pass\n\n    def on_query_completions(self, view, prefix, locations):\n        buf = self.buf_from_view(view)\n        if buf:\n            cplns, buf.cplns = getattr(buf, 'cplns', None), None\n            return cplns\n\n    def on_query_context(self, view, key, operator, operand, match_all):\n        if key.startswith(\"codeintel.setting.\"):\n            setting_name = key[len(\"codeintel.setting.\"):]\n            value = settings.get(setting_name)\n            if operator == sublime.OP_NOT_EQUAL:\n                return value != operand\n            elif operator == sublime.OP_EQUAL:\n                return value == operand\n\n\nclass CodeintelAutoCompleteCommand(CodeintelHandler, sublime_plugin.TextCommand):\n    def run(self, edit, block=False):\n        view = self.view\n\n        buf = self.buf_from_view(view)\n\n        if buf:\n            buf.trg_from_pos(self, True)\n\n\nclass CodeintelGoToDefinitionCommand(CodeintelHandler, sublime_plugin.TextCommand):\n    def run(self, edit, block=False):\n        view = self.view\n\n        buf = self.buf_from_view(view)\n\n        if buf:\n            buf.defn_trg_from_pos(self)\n\n\nclass CodeintelBackFromDefinitionCommand(sublime_plugin.TextCommand):\n    def run(self, edit, block=False):\n        window = sublime.active_window()\n        wid = window.id()\n        if wid in CodeintelHandler.jump_history_by_window:\n            jump_history = CodeintelHandler.jump_history_by_window[wid]\n\n            if len(jump_history) > 0:\n                previous_location = jump_history.pop()\n                window = sublime.active_window()\n                window.open_file(previous_location, sublime.ENCODED_POSITION)\n\n\nclass CodeintelCompleteCommitCommand(CodeintelHandler, sublime_plugin.TextCommand):\n    def run(self, edit, character):\n        view = self.view\n\n        buf = self.buf_from_view(view)\n        if buf:\n            cpln_fillup_chars = buf.cpln_fillup_chars\n            cpln_stop_chars = buf.cpln_stop_chars\n        else:\n            cpln_fillup_chars = \"\"\n            cpln_stop_chars = \"~`!@#$%^&*()-=+{}[]|\\\\;:'\\\",.<>?/ \"\n\n        # Fillup characters commit autocomplete\n        if settings.get(buf.lang, 'complete_commit_fillup') and character in cpln_fillup_chars:\n            view.window().run_command('commit_completion')\n            if character not in (\"(\", \"=\"):\n                view.run_command('insert', {'characters': character})\n\n        # Stop characters hide autocomplete window\n        elif character in cpln_stop_chars:\n            view.run_command('hide_auto_complete')\n            view.run_command('insert', {'characters': character})\n\n        else:\n            view.run_command('insert', {'characters': character})\n\n\n################################################################################\n# Initialize settings and main objects only once\n\nclass CodeintelSettings(Settings):\n    nested_settings = ('syntax_map', 'language_settings')\n\n    def get(self, setting, default=None, lang=None):\n        \"\"\"Return a plugin setting, defaulting to default if not found.\"\"\"\n        language_settings = self.settings.get('language_settings', {}).get(lang)\n        if language_settings and setting in language_settings:\n            return language_settings[setting]\n        return super(CodeintelSettings, self).get(setting, default)\n\n    def on_update(self):\n        \"\"\"\n        The previous settings are compared with the new settings; depending\n        on what changed, engine will either be reconfigured or restarted.\n\n        \"\"\"\n        need_deactivate = False\n\n        for setting in ('@disable', 'command', 'oop_mode', 'log_levels'):\n            if (\n                setting in self.changeset or\n                self.previous_settings and self.previous_settings.get(setting) != self.settings.get(setting)\n            ):\n                self.changeset.discard(setting)\n                need_deactivate = True\n\n        if (\n            'debug' in self.changeset or\n            self.previous_settings.get('debug', False) != self.settings.get('debug', False)\n        ):\n            self.changeset.discard('debug')\n\n            if self.settings.get('debug'):\n                logger.setLevel(logging.DEBUG)\n                codeintel_logger.setLevel(logging.DEBUG)\n            else:\n                logger.setLevel(logger_level)\n                codeintel_logger.setLevel(codeintel_logger_level)\n\n        if need_deactivate:\n            ci.deactivate()\n\n        if not self.settings.get('@disable'):\n            env = dict(os.environ)\n            env.update(self.settings.get('env', {}))\n\n            prefs = self.get_prefs()\n\n            if ci.enabled:\n                ci.mgr.set_global_environment(\n                    env=env,\n                    prefs=prefs,\n                )\n            else:\n                command = self.settings.get('command')\n                oop_mode = self.settings.get('oop_mode')\n                log_levels = self.settings.get('log_levels')\n                ci.activate(\n                    reset_db_as_necessary=False,\n                    codeintel_command=command,\n                    oop_mode=oop_mode,\n                    log_levels=log_levels,\n                    env=env,\n                    prefs=prefs,\n                )\n\n    def get_prefs(self, lang=None):\n        prefs = {\n            'codeintel_max_recursive_dir_depth': self.settings.get('max_recursive_dir_depth'),\n            'codeintel_scan_files_in_project': self.settings.get('scan_files_in_project'),\n            'codeintel_selected_catalogs': self.settings.get('selected_catalogs'),\n        }\n\n        disabled_languages = set(self.settings.get('disabled_languages', []))\n\n        scan_extra_paths = set(self.settings.get('scan_extra_paths', []))\n        if scan_extra_paths:\n            scan_extra_paths = set(os.path.normcase(os.path.normpath(os.path.expanduser(e))).rstrip(os.sep) for e in scan_extra_paths)\n\n        scan_exclude_paths = set(self.settings.get('scan_exclude_paths', []))\n        if scan_exclude_paths:\n            scan_exclude_paths = set(os.path.normcase(os.path.normpath(os.path.expanduser(e))).rstrip(os.sep) for e in scan_exclude_paths)\n\n        language_settings = self.settings.get('language_settings', {})\n        for l, s in language_settings.items():\n            if lang is not None and l != lang:\n                continue\n\n            if l in disabled_languages or s.get('@disable'):\n                continue\n\n            for k, v in s.items():\n                if k not in self.settings:\n                    prefs[k] = v\n\n            extra_paths_name = EXTRA_PATHS_MAP.get(l)\n            language_scan_extra_paths = set(s.get('scan_extra_paths', [])) | set(s.get(extra_paths_name, []))\n            if language_scan_extra_paths:\n                language_scan_extra_paths = [os.path.normcase(os.path.normpath(os.path.expanduser(e))).rstrip(os.sep) for e in scan_extra_paths | language_scan_extra_paths]\n            if extra_paths_name:\n                prefs[extra_paths_name] = os.pathsep.join(language_scan_extra_paths)\n\n            exclude_paths_name = EXCLUDE_PATHS_MAP.get(l)\n            language_scan_exclude_paths = set(s.get('scan_exclude_paths', [])) | set(s.get(exclude_paths_name, []))\n            if language_scan_exclude_paths:\n                language_scan_exclude_paths = [os.path.normcase(os.path.normpath(os.path.expanduser(e))).rstrip(os.sep) for e in scan_exclude_paths | language_scan_exclude_paths]\n            if exclude_paths_name:\n                prefs[exclude_paths_name] = os.pathsep.join(language_scan_exclude_paths)\n\n        return prefs\n\n\nif 'settings' not in globals():\n    settings = CodeintelSettings(NAME)\n\n    class CodeintelToggleSettingCommand(SettingTogglerCommandMixin, sublime_plugin.WindowCommand):\n        settings = settings\n\n    ci = CodeIntel(lambda fn: sublime.set_timeout(fn, 0))\n\n\n################################################################################\n\ndef plugin_loaded():\n    settings.load()\n\n\n# ST3 features a plugin_loaded hook which is called when ST's API is ready.\n#\n# We must therefore call our init callback manually on ST2. It must be the last\n# thing in this plugin (thanks, beloved contributors!).\nif int(sublime.version()) < 3000:\n    plugin_loaded()\n"
        },
        {
          "name": "SublimeCodeIntel.sublime-settings",
          "type": "blob",
          "size": 5.4228515625,
          "content": "/*\n    SublimeCodeIntel default settings\n*/\n{\n    \"default\": {\n        /*\n            debug - Enbles/disables debug mode.\n        */\n        \"debug\": false,\n\n        /*\n            live - Enbles/disables live codeintel autocomplete.\n        */\n        \"live\": true,\n\n        /*\n        Maps syntax names to languages. This allows variations on a syntax\n        (for example \"Python (Django)\") to be used. The key is\n        the base filename of the .tmLanguage syntax files, and the value\n        is the syntax it maps to.\n        */\n        \"syntax_map\": {\n            \"C\": \"C++\",\n            \"C++11\": \"C++\",\n            \"Objective-C\": \"C++\",\n            \"Objective-C++\": \"C++\",\n            \"Python Django\": \"Python\",\n            \"PythonImproved\": \"Python\",\n            \"HTML (Django)\": \"Django\",\n            \"JavaScript\": \"ECMAScript\",\n            \"JavaScript (Babel)\": \"ECMAScript\",\n            \"Node.js\": \"ECMAScript\",\n            \"JSX\": \"ECMAScript\"\n        },\n\n        /*\n            disabled_languages - List of codeintel disabled languages.\n        */\n        \"disabled_languages\": [],\n\n        /*\n            command - Executable for OOP codeintel command.\n        */\n        \"command\": \"codeintel\",\n\n        /*\n            oop_mode - OOP mode.\n        */\n        \"oop_mode\": \"pipe\",\n\n        /*\n            log_levels - Set the logging levels for the OOP loggers\n            This can be DEBUG, INFO, WARNING or ERROR; WARNGING is recommended,\n            other settings might have an impact in the perfocmance.\n        */\n\n        \"log_levels\" : [\"WARNING\"],\n\n        /*\n            complete_commit - Makes auto complete close autocomplete\n            window with certain characters.\n        */\n        \"complete_commit\": true,\n\n        /*\n            complete_commit_fillup - Makes codeintel fillup characters\n            when possible (inserting the selected item in the autocomplete). This\n            setting requires complete_commit.\n        */\n        \"complete_commit_fillup\": false,\n\n        /*\n            selected_catalogs - API Catalogs.\n            SublimeCodeIntel uses API catalogs to provide autocomplete and calltips\n            for 3rd-party libraries.\n\n            NOTE: Add only the libraries that you use in your code. Adding all API\n                catalogs for a particular language can lead to confusing results.\n\n            Available catalogs:\n                PyWin32 (Python3) (for Python3: Python Extensions for Windows)\n                PyWin32 (for Python: Python Extensions for Windows)\n                Rails (for Ruby: Rails version 1.1.6)\n                jQuery (for JavaScript: jQuery JavaScript library - version 1.9.1)\n                Prototype (for JavaScript: JavaScript framework for web development)\n                dojo (for JavaScript: Dojo Toolkit API - version 1.5.0)\n                Ext_30 (for JavaScript: Ext JavaScript framework - version 3.0)\n                HTML5 (for JavaScript: HTML5 (Canvas, Web Messaging, Microdata))\n                MochiKit (for JavaScript: A lightweight JavaScript library - v1.4.2)\n                Mozilla Toolkit (for JavaScript: Mozilla Toolkit API - version 1.8)\n                XBL (for JavaScript: XBL JavaScript support - version 1.0)\n                YUI (for JavaScript: Yahoo! User Interface Library - v2.8.1)\n                Drupal (for PHP: A full-featured PHP content management/discussion engine -- v5.1)\n                PECL (for PHP: A collection of PHP Extensions)\n        */\n        \"selected_catalogs\": [],\n\n        /*\n            scan_files_in_project - Include all files and directories from\n            the project base directory and in the Sublime Text project.\n        */\n        \"scan_files_in_project\": true,\n\n        /*\n            max_recursive_dir_depth - Maximum recursion to use, when applicable.\n        */\n        \"max_recursive_dir_depth\": 10,\n\n        /*\n            scan_extra_paths - Extra directories to include during the scan,\n            additional to the ones configured by default.\n        */\n        \"scan_extra_paths\": [],\n\n        /*\n            scan_exclude_paths - Directories to exclude from the scan.\n        */\n        \"scan_exclude_paths\": [\"/build/\", \"/min/\"],\n\n        /*\n            env - Additional environment variables to use.\n        */\n        \"env\": {},\n\n        /*\n            Defines a configuration for each language. Each language can include any\n            of the available settings listed above, plus any others passed to CodeIntel.\n        */\n        \"language_settings\": {\n            \"Python\": {\n                \"python\": \"\"\n            },\n            \"Python3\": {\n                \"python3\": \"\"\n            },\n            \"Ruby\": {\n                \"ruby\": \"\"\n            },\n            \"Perl\": {\n                \"perl\": \"\"\n            },\n            \"Go\": {\n                \"golangDefaultLocation\": \"\",\n                \"gocodeDefaultLocation\": \"\",\n                \"godefDefaultLocation\": \"\"\n            },\n            \"HTML\": {\n                \"defaultHTMLDecl\": \"-//W3C//DTD HTML 5//EN\"\n            },\n            \"HTML5\": {\n                \"defaultHTML5Decl\": \"-//W3C//DTD HTML 5//EN\"\n            },\n            \"JavaScript\": {\n            },\n            \"Node.js\": {\n                \"nodejsDefaultInterpreter\": \"\"\n            },\n            \"ECMAScript\": {\n            },\n            \"PHP\": {\n                \"php\": \"\",\n                \"phpConfigFile\": \"\"\n            },\n            \"C++\": {\n                \"cppFlags\": [\"-I/usr/local/include\", \"-L/usr/local/lib\"]\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "ecmascript-from.sublime-snippet",
          "type": "blob",
          "size": 0.1904296875,
          "content": "<snippet>\n\t<content><![CDATA[\nimport {${2}} from '${1}';\n]]></content>\n\t<scope>source.js</scope>\n\t<tabTrigger>from</tabTrigger>\n\t<description>import {...} from 'module';</description>\n</snippet>\n"
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "messages.json",
          "type": "blob",
          "size": 0.0703125,
          "content": "{\n    \"2.2.0\": \"messages/2.2.0.txt\",\n    \"3.0.0\": \"messages/3.0.0.txt\"\n}"
        },
        {
          "name": "messages",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings.py",
          "type": "blob",
          "size": 6.8095703125,
          "content": "from __future__ import absolute_import, unicode_literals, print_function\n\nimport os\nimport json\nfrom copy import deepcopy\nfrom collections import defaultdict\n\nimport sublime\nimport sublime_plugin\n\n\nclass Settings(object):\n    \"\"\"This class provides global access to and management of plugin settings.\"\"\"\n    nested_settings = ()\n\n    def __init__(self, name):\n        \"\"\"Initialize a new instance.\"\"\"\n        self.name = name\n        self.settings = {}\n        self.previous_settings = {}\n        self.changeset = set()\n        self.plugin_settings = None\n        self.edits = defaultdict(list)\n\n    def load(self, force=False):\n        \"\"\"Load the plugin settings.\"\"\"\n        if force or not self.settings:\n            self.observe()\n            self.on_change()\n\n    def has_setting(self, setting):\n        \"\"\"Return whether the given setting exists.\"\"\"\n        return setting in self.settings\n\n    def get(self, setting, default=None):\n        \"\"\"Return a plugin setting, defaulting to default if not found.\"\"\"\n        return self.settings.get(setting, default)\n\n    def set(self, setting, value, changed=False):\n        \"\"\"\n        Set a plugin setting to the given value.\n\n        Clients of this module should always call this method to set a value\n        instead of doing settings['foo'] = 'bar'.\n\n        If the caller knows for certain that the value has changed,\n        they should pass changed=True.\n\n        \"\"\"\n        self.copy()\n        self.settings[setting] = value\n\n        if changed:\n            self.changeset.add(setting)\n\n    def pop(self, setting, default=None):\n        \"\"\"\n        Remove a given setting and return default if it is not in self.settings.\n\n        Clients of this module should always call this method to pop a value\n        instead of doing settings.pop('foo').\n\n        \"\"\"\n        self.copy()\n        return self.settings.pop(setting, default)\n\n    def copy(self):\n        \"\"\"Save a copy of the plugin settings.\"\"\"\n        self.previous_settings = deepcopy(self.settings)\n\n    def observe(self, observer=None):\n        \"\"\"Observer changes to the plugin settings.\"\"\"\n        self.plugin_settings = sublime.load_settings('{}.sublime-settings'.format(self.name))\n        self.plugin_settings.clear_on_change(self.name)\n        self.plugin_settings.add_on_change(self.name, observer or self.on_change)\n\n    def merge_user_settings(self, settings):\n        \"\"\"\n        Return the default settings merged with the user's settings.\n        If there are any nested settings, those get merged as well.\n\n        \"\"\"\n\n        default = settings.get('default', {})\n        user = settings.get('user', {})\n\n        if user:\n            for setting_name in self.nested_settings:\n                default_setting = default.pop(setting_name, {})\n                user_setting = user.get(setting_name, {})\n\n                for name, data in user_setting.items():\n                    if name in default_setting and isinstance(default_setting[name], dict):\n                        default_setting[name].update(data)\n                    else:\n                        default_setting[name] = data\n                default[setting_name] = default_setting\n                user.pop(setting_name, None)\n            default.update(user)\n\n        return default\n\n    def on_change(self):\n        \"\"\"Update state when the user settings change.\"\"\"\n\n        settings = self.merge_user_settings(self.plugin_settings)\n        self.settings.clear()\n        self.settings.update(settings)\n\n        self.on_update()\n\n        self.changeset.clear()\n        self.copy()\n\n    def on_update(self):\n        \"\"\"To be implemented by the user, when needed.\"\"\"\n        pass\n\n    def save(self, view=None):\n        \"\"\"\n        Regenerate and save the user settings.\n\n        User settings are updated and merged with the default settings and if\n        the user settings are currently being edited, the view is also updated.\n\n        \"\"\"\n        self.load()\n\n        # Fill in default settings\n        settings = self.settings\n\n        settings_filename = '{}.sublime-settings'.format(self.name)\n        user_settings_path = os.path.join(sublime.packages_path(), 'User', settings_filename)\n        settings_views = []\n\n        if view is None:\n            # See if any open views are the user prefs\n            for window in sublime.windows():\n                for view in window.views():\n                    if view.file_name() == user_settings_path:\n                        settings_views.append(view)\n        else:\n            settings_views = [view]\n\n        if settings_views:\n            def replace(edit):\n                if not view.is_dirty():\n                    j = json.dumps({'user': settings}, indent=4, sort_keys=True)\n                    j = j.replace(' \\n', '\\n')\n                    view.replace(edit, sublime.Region(0, view.size()), j)\n\n            for view in settings_views:\n                self.edits[view.id()].append(replace)\n                view.run_command('settings_view_editor', self)\n                view.run_command('save')\n        else:\n            user_settings = sublime.load_settings(settings_filename)\n            user_settings.set('user', settings)\n            sublime.save_settings(settings_filename)\n\n    def edit(self, vid, edit):\n        \"\"\"Perform an operation on a view with the given edit object.\"\"\"\n        callbacks = self.edits.pop(vid, [])\n\n        for c in callbacks:\n            c(edit)\n\n\nclass SettingsViewEditorCommand(sublime_plugin.TextCommand):\n    \"\"\"A plugin command used to generate an edit object for a view.\"\"\"\n\n    def run(self, edit, settings):\n        \"\"\"Run the command.\"\"\"\n        settings.edit(self.view.id(), edit)\n\n\nclass SettingTogglerCommandMixin(object):\n    \"\"\"Command that toggles a setting.\"\"\"\n\n    settings = None\n\n    def is_visible(self, **args):\n        \"\"\"Return True if the opposite of the setting is True.\"\"\"\n        if args.get('checked', False):\n            return True\n\n        if self.settings.has_setting(args['setting']):\n            setting = self.settings.get(args['setting'], None)\n            return setting is not None and setting is not args['value']\n        else:\n            return args['value'] is not None\n\n    def is_checked(self, **args):\n        \"\"\"Return True if the setting should be checked.\"\"\"\n        if args.get('checked', False):\n            setting = self.settings.get(args['setting'], False)\n            return setting is True\n        else:\n            return False\n\n    def run(self, **args):\n        \"\"\"Toggle the setting if value is boolean, or remove it if None.\"\"\"\n\n        if 'value' in args:\n            if args['value'] is None:\n                self.settings.pop(args['setting'])\n            else:\n                self.settings.set(args['setting'], args['value'], changed=True)\n        else:\n            setting = self.settings.get(args['setting'], False)\n            self.settings.set(args['setting'], not setting, changed=True)\n\n        self.settings.save()\n"
        }
      ]
    }
  ]
}