{
  "metadata": {
    "timestamp": 1736560633046,
    "page": 266,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "angr/angr",
      "stars": 7692,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.4736328125,
          "content": "# Black + pre-commit\n97f7d7f31dfa87d1a427d9acb3fd93be9764a075 # Improve pre-commit\n346b2d883deb97ccf1953a107ad6cb6c01c89370 # Black\n9d6edacbbc5c23f6fc10b27f1dd6b6e8cd43a567 # Type comments -> annotations\n2e627c88fc89e52984229b08c3f1ebc023dfcc2d # pyupgrade\n2d8158c6e7db52a426db8fd883160f417b683805 # Whitespace\n74e8f34cebf66f9efc27f8c4aa6968f2dd456852 # prefer builtins\n1961c860f3be91cbec9b8153f5a3f5be23a4658c # Black 2023\n9368fc12e9af6a6a1ad97481fd29889d07ad809a # unittest adoption\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": "*.pyc\n*.o\n*.so\n*.a\n.gdb_history\n*.i64\n*.idb\n*.id0\n*.id1\n*.id2\n*.nam\n*.til\n*.swp\n*.dll\n*.obj\n*.lib\n*.exp\n*.pdb\n*.ilk\nangr/tests/*.png\nscreenlog.0\nangr/tests/screenlog.0\nangr/screenlog.0\n.idea\n*.egg-info\n/build\n/tags\nMANIFEST\ndist\n.eggs\n.vscode/\n*.db\n*.dylib\ndocs/_build\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 2.087890625,
          "content": "repos:\n\n#\n# Fail fast\n#\n\n-   repo: https://github.com/abravalheri/validate-pyproject\n    rev: v0.23\n    hooks:\n    - id: validate-pyproject\n      fail_fast: true\n\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    # General\n    -   id: check-merge-conflict\n        fail_fast: true\n    -   id: check-case-conflict\n        fail_fast: true\n    -   id: destroyed-symlinks\n        fail_fast: true\n    -   id: check-symlinks\n        fail_fast: true\n    -   id: check-added-large-files\n        fail_fast: true\n    # Syntax\n    -   id: check-toml\n        fail_fast: true\n    -   id: check-json\n        fail_fast: true\n    -   id: check-yaml\n        fail_fast: true\n\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: check-ast\n        fail_fast: true\n\n#\n# Modifiers\n#\n\n-   repo: https://github.com/asottile/setup-cfg-fmt\n    rev: v2.7.0\n    hooks:\n    -   id: setup-cfg-fmt\n        args: [\"--include-version-classifiers\"]\n\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: mixed-line-ending\n    -   id: trailing-whitespace\n\n-   repo: https://github.com/dannysepler/rm_unneeded_f_str\n    rev: v0.2.0\n    hooks:\n    -   id: rm-unneeded-f-str\n\n-   repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n    -   id: pyupgrade\n        args: [--py310-plus]\n\n-   repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n    - id: ruff\n      args: [--fix, --exit-non-zero-on-fix]\n\n# Last modifier: Coding Standard\n-   repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n    -   id: black\n\n#\n# Static Checks\n#\n\n-   repo: https://github.com/pre-commit/pygrep-hooks\n    rev: v1.10.0\n    hooks:\n    # Python\n    -   id: python-use-type-annotations\n    -   id: python-no-log-warn\n    # Documentation\n    -   id: rst-backticks\n    -   id: rst-directive-colons\n    -   id: rst-inline-touching-normal\n\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n    -   id: debug-statements\n    -   id: check-builtin-literals\n    -   id: check-docstring-first\n\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.6435546875,
          "content": "# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\nformats: [pdf]\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.10\"\n  jobs:\n    post_create_environment:\n      - pip install -U pip \"setuptools>=59\" wheel \"unicorn==2.0.1.post1\"\n      - pip install git+https://github.com/angr/archinfo.git\n      - pip install git+https://github.com/angr/pyvex.git\n      - pip install git+https://github.com/angr/cle.git\n      - pip install git+https://github.com/angr/claripy.git\n      - pip install git+https://github.com/angr/ailment.git\n      - pip install --no-build-isolation .[angrdb,docs,pcode]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2958984375,
          "content": "Copyright (c) 2015, The Regents of the University of California\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1044921875,
          "content": "include LICENSE\ninclude README.md\nrecursive-include native *.c *.cpp *.h *.hpp *.def Makefile Makefile-win\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.5419921875,
          "content": "# angr\n\n[![Latest Release](https://img.shields.io/pypi/v/angr.svg)](https://pypi.python.org/pypi/angr/)\n[![Python Version](https://img.shields.io/pypi/pyversions/angr)](https://pypi.python.org/pypi/angr/)\n[![PyPI Statistics](https://img.shields.io/pypi/dm/angr.svg)](https://pypistats.org/packages/angr)\n[![License](https://img.shields.io/github/license/angr/angr.svg)](https://github.com/angr/angr/blob/master/LICENSE)\n\nangr is a platform-agnostic binary analysis framework.\nIt is brought to you by [the Computer Security Lab at UC Santa Barbara](https://seclab.cs.ucsb.edu), [SEFCOM at Arizona State University](https://sefcom.asu.edu), their associated CTF team, [Shellphish](https://shellphish.net), the open source community, and **[@rhelmot](https://github.com/rhelmot)**.\n\n## Project Links\nHomepage: https://angr.io\n\nProject repository: https://github.com/angr/angr\n\nDocumentation: https://docs.angr.io\n\nAPI Documentation: https://api.angr.io/en/latest/\n\n## What is angr?\n\nangr is a suite of Python 3 libraries that let you load a binary and do a lot of cool things to it:\n\n- Disassembly and intermediate-representation lifting\n- Program instrumentation\n- Symbolic execution\n- Control-flow analysis\n- Data-dependency analysis\n- Value-set analysis (VSA)\n- Decompilation\n\nThe most common angr operation is loading a binary: `p = angr.Project('/bin/bash')` If you do this in an enhanced REPL like IPython, you can use tab-autocomplete to browse the [top-level-accessible methods](https://docs.angr.io/docs/toplevel) and their docstrings.\n\nThe short version of \"how to install angr\" is `mkvirtualenv --python=$(which python3) angr && python -m pip install angr`.\n\n## Example\n\nangr does a lot of binary analysis stuff.\nTo get you started, here's a simple example of using symbolic execution to get a flag in a CTF challenge.\n\n```python\nimport angr\n\nproject = angr.Project(\"angr-doc/examples/defcamp_r100/r100\", auto_load_libs=False)\n\n@project.hook(0x400844)\ndef print_flag(state):\n    print(\"FLAG SHOULD BE:\", state.posix.dumps(0))\n    project.terminate_execution()\n\nproject.execute()\n```\n\n# Quick Start\n\n- [Install Instructions](https://docs.angr.io/introductory-errata/install)\n- Documentation as [HTML](https://docs.angr.io/) and sources in the angr [Github repository](https://github.com/angr/angr/tree/master/docs)\n- Dive right in: [top-level-accessible methods](https://docs.angr.io/core-concepts/toplevel)\n- [Examples using angr to solve CTF challenges](https://docs.angr.io/examples).\n- [API Reference](https://angr.io/api-doc/)\n- [awesome-angr repo](https://github.com/degrigis/awesome-angr)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.6328125,
          "content": "Security\n========\n\nangr is meant to be able to function as fully secure environment for analyzing code of any kind in its default configuration.\nAs a result, we take sandbox escapes - opportunities for guest code to manipulate the host environment without the analysis author explicitly allowing it - very seriously.\nIf you read all the documentation, you should be able to deploy angr to analyze untrusted code without worrying about it.\n\nIf you find a sandbox escape bug of any sort by this definition, please let us know through a private channel.\nYou can contact the core developers through their emails at audrey@rhelmot.io and fishw@asu.edu.\n"
        },
        {
          "name": "angr",
          "type": "tree",
          "content": null
        },
        {
          "name": "corpus_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "native",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.0458984375,
          "content": "[build-system]\nrequires = [\"setuptools>=59\", \"wheel\", \"pyvex==9.2.137.dev0\", \"unicorn==2.0.1.post1\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[tool.black]\nline-length = 120\ntarget-version = ['py310']\nforce-exclude = '''\n/(\n  angr\\/protos\n| angr\\/procedures\\/definitions\n)/\n'''\n\n[tool.ruff]\nline-length = 120\nexclude = [\n\t\"*_pb2.py\", # Autogenerated protobuf files\n]\n\n[tool.ruff.lint]\nextend-select = [\n\t\"B\",\n\t\"C4\",\n\t\"FURB\",\n\t\"I002\",\n\t\"PIE\",\n\t\"RET\",\n\t\"RSE\",\n\t\"RUF\",\n\t\"SIM\",\n\t\"TID252\",\n\t\"UP\",\n]\nextend-ignore = [\n\t\"B011\", # Asserts\n\t\"E402\", # Bottom imports\n\t\"E741\", # Variable names\n\t\"RUF012\", # FIXME: Annotate class variables\n]\n\n[tool.ruff.lint.per-file-ignores]\n\"angr/misc/bug_report.py\" = [\n\t\"F821\", # name not found\n]\n\"angr/procedures/definitions/*\" = [ # TODO: Move to exclude\n\t\"F601\", # TODO: BUG! This hides bugs! See: https://github.com/angr/angr/issues/3685\n\t\"E501\", # No line length check\n\t\"F401\",\n]\n\"angr/state_plugins/solver.py\" = [\n\t\"E501\", # Long docstrings with examples\n ]\n\n[tool.ruff.lint.isort]\nrequired-imports = [\"from __future__ import annotations\"]\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 1.693359375,
          "content": "[metadata]\nname = angr\nversion = attr: angr.__version__\ndescription = A multi-architecture binary analysis toolkit, with the ability to perform dynamic symbolic execution and various static analyses on binaries\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/angr/angr\nlicense = BSD-2-Clause\nlicense_files = LICENSE\nclassifiers =\n    License :: OSI Approved :: BSD License\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3 :: Only\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n    Programming Language :: Python :: 3.12\n    Programming Language :: Python :: 3.13\n\n[options]\npackages = find:\ninstall_requires =\n    CppHeaderParser\n    GitPython\n    ailment==9.2.137.dev0\n    archinfo==9.2.137.dev0\n    cachetools\n    capstone==5.0.3\n    cffi>=1.14.0\n    claripy==9.2.137.dev0\n    cle==9.2.137.dev0\n    itanium-demangler\n    mulpyplexer\n    nampa\n    networkx!=2.8.1,>=2.0\n    protobuf>=5.28.2\n    psutil\n    pycparser>=2.18\n    pyformlang\n    pyvex==9.2.137.dev0\n    rich>=13.1.0\n    sortedcontainers\n    sympy\n    unicorn==2.0.1.post1\n    unique-log-filter\n    colorama;platform_system=='Windows'\npython_requires = >=3.10\ninclude_package_data = True\n\n[options.packages.find]\nexclude = tests*\n\n[options.entry_points]\nconsole_scripts =\n    angr = angr.__main__:main\n\n[options.extras_require]\nAngrDB =\n    sqlalchemy\ndocs =\n    furo\n    myst-parser\n    sphinx\n    sphinx-autodoc-typehints\npcode =\n    pypcode~=3.0\ntelemetry =\n    opentelemetry-api\ntesting =\n    keystone-engine\n    pypcode~=3.0\n    pytest\n    pytest-split\n    pytest-xdist\n    sqlalchemy\n\n[options.package_data]\nangr =\n    py.typed\n    lib/*\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 3.576171875,
          "content": "# pylint: disable=missing-class-docstring\nfrom __future__ import annotations\nimport glob\nimport importlib.resources\nimport os\nimport platform\nimport shutil\nimport subprocess\nimport sys\nfrom distutils.command.build import build as st_build\nfrom distutils.util import get_platform\n\nfrom setuptools import Command, setup\nfrom setuptools.command.develop import develop as st_develop\nfrom setuptools.errors import LibError\n\nif sys.platform == \"darwin\":\n    library_file = \"angr_native.dylib\"\nelif sys.platform in (\"win32\", \"cygwin\"):\n    library_file = \"angr_native.dll\"\nelse:\n    library_file = \"angr_native.so\"\n\n\ndef _build_native():\n    try:\n        importlib.import_module(\"pyvex\")\n    except ImportError as e:\n        raise LibError(\"You must install pyvex before building angr\") from e\n\n    try:\n        importlib.import_module(\"unicorn\")\n    except ImportError as e:\n        raise LibError(\"You must install unicorn before building angr\") from e\n\n    env = os.environ.copy()\n    env_data = (\n        (\"UNICORN_INCLUDE_PATH\", \"unicorn\", \"include\"),\n        (\"UNICORN_LIB_PATH\", \"unicorn\", \"lib\"),\n        (\"UNICORN_LIB_FILE\", \"unicorn\", \"lib\\\\unicorn.lib\"),\n        (\"PYVEX_INCLUDE_PATH\", \"pyvex\", \"include\"),\n        (\"PYVEX_LIB_PATH\", \"pyvex\", \"lib\"),\n        (\"PYVEX_LIB_FILE\", \"pyvex\", \"lib\\\\pyvex.lib\"),\n    )\n    for var, pkg, fnm in env_data:\n        base = importlib.resources.files(pkg)\n        for child in fnm.split(\"\\\\\"):\n            base = base.joinpath(child)\n        env[var] = str(base)\n\n    if sys.platform == \"win32\":\n        cmd = [\"nmake\", \"/f\", \"Makefile-win\"]\n    elif shutil.which(\"gmake\") is not None:\n        cmd = [\"gmake\"]\n    else:\n        cmd = [\"make\"]\n    try:\n        subprocess.run(cmd, cwd=\"native\", env=env, check=True)\n    except FileNotFoundError as err:\n        raise LibError(\"Couldn't find \" + cmd[0] + \" in PATH\") from err\n    except subprocess.CalledProcessError as err:\n        raise LibError(\"Error while building angr_native: \" + str(err)) from err\n\n    shutil.rmtree(\"angr/lib\", ignore_errors=True)\n    os.mkdir(\"angr/lib\")\n    shutil.copy(os.path.join(\"native\", library_file), \"angr/lib\")\n\n\ndef _clean_native():\n    oglob = glob.glob(\"native/*.o\")\n    oglob += glob.glob(\"native/*.obj\")\n    oglob += glob.glob(\"native/*.so\")\n    oglob += glob.glob(\"native/*.dll\")\n    oglob += glob.glob(\"native/*.dylib\")\n    for fname in oglob:\n        os.unlink(fname)\n\n\nclass build(st_build):\n    def run(self, *args):\n        self.execute(_build_native, (), msg=\"Building angr_native\")\n        super().run(*args)\n\n\nclass clean_native(Command):\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        self.execute(_clean_native, (), msg=\"Cleaning angr_native\")\n\n\nclass develop(st_develop):\n    def run(self):\n        self.run_command(\"build\")\n        super().run()\n\n\ncmdclass = {\n    \"build\": build,\n    \"clean_native\": clean_native,\n    \"develop\": develop,\n}\n\n\ntry:\n    from setuptools.command.editable_wheel import editable_wheel as st_editable_wheel\n\n    class editable_wheel(st_editable_wheel):\n        def run(self):\n            self.run_command(\"build\")\n            super().run()\n\n    cmdclass[\"editable_wheel\"] = editable_wheel\nexcept ModuleNotFoundError:\n    pass\n\n\nif \"bdist_wheel\" in sys.argv and \"--plat-name\" not in sys.argv:\n    sys.argv.append(\"--plat-name\")\n    name = get_platform()\n    if \"linux\" in name:\n        sys.argv.append(\"manylinux2014_\" + platform.machine())\n    else:\n        # https://www.python.org/dev/peps/pep-0425/\n        sys.argv.append(name.replace(\".\", \"_\").replace(\"-\", \"_\"))\n\nsetup(cmdclass=cmdclass)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}