{
  "metadata": {
    "timestamp": 1736560547461,
    "page": 156,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lazyprogrammer/machine_learning_examples",
      "stars": 8454,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0634765625,
          "content": "*.DS_Store\n*.pyc\nlarge_files\nlarge_files/*\nnlp_class2/chunking/*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.005859375,
          "content": "machine_learning_examples\n=========================\n\nA collection of machine learning examples and tutorials.\n\nFind associated tutorials at https://lazyprogrammer.me\n\nFind associated courses at https://deeplearningcourses.com\n\nPlease note that not all code from all courses will be found in this repository. Some newer code examples (e.g. most of Tensorflow 2.0) were done in Google Colab. Therefore, you should check the instructions given in the lectures for the course you are taking.\n\n\nHow to I find the code for a particular course?\n===============================================\n\nThe code for each course is separated by folder. You can determine which folder corresponds with which course by watching the \"Where to get the code\" lecture inside the course (usually Lecture 2 or 3).\n\nRemember: one folder = one course.\n\n\nWhy you should not fork this repo\n=================================\n\nI've noticed that many people have out-of-date forks. Thus, I recommend not forking this repository if you take one of my courses. I am constantly updating my courses, and your fork will soon become out-of-date. You should clone the repository instead to make it easy to get updates (i.e. just \"git pull\" randomly and frequently).\n\n\nWhere is the code for your latest courses?\n==========================================\n\nBeginning with Tensorflow 2, I started to use Google Colab. For those courses, unless otherwise noted, the code will be on Google Colab. Links to the notebooks are provided in the course. See the lecture \"Where to get the code\" for further details.\n\n\nVIP Course Links\n===================\n\n**Data Science: Transformers for Natural Language Processing**\n\nhttps://deeplearningcourses.com/c/data-science-transformers-nlp\n\n\n**Machine Learning: Natural Language Processing in Python (V2)**\n\nhttps://deeplearningcourses.com/c/natural-language-processing-in-python\n\n\n**Time Series Analysis, Forecasting, and Machine Learning**\n\nhttps://deeplearningcourses.com/c/time-series-analysis\n\n\n**Financial Engineering and Artificial Intelligence in Python**\n\nhttps://deeplearningcourses.com/c/ai-finance\n\n\n**PyTorch: Deep Learning and Artificial Intelligence**\n\nhttps://deeplearningcourses.com/c/pytorch-deep-learning\n\n\n**Tensorflow 2.0: Deep Learning and Artificial Intelligence** (VIP Version)\n\nhttps://deeplearningcourses.com/c/deep-learning-tensorflow-2\n\n\n**Math 0-1: Linear Algebra for Data Science & Machine Learning**\n\nhttps://deeplearningcourses.com/c/linear-algebra-data-science\n\n**Math 0-1: Probability for Data Science & Machine Learning**\n\nhttps://deeplearningcourses.com/c/probability-data-science-machine-learning\n\n\nDeep Learning Courses Exclusives\n================================\n\nData Science: Bayesian Linear Regression in Python\nhttps://deeplearningcourses.com/c/bayesian-linear-regression-in-python\n\nData Science: Bayesian Classification in Python\nhttps://deeplearningcourses.com/c/bayesian-classification-in-python\n\nClassical Statistical Inference and A/B Testing in Python\nhttps://deeplearningcourses.com/c/statistical-inference-in-python\n\nLinear Programming for Linear Regression in Python\nhttps://deeplearningcourses.com/c/linear-programming-python\n\nMATLAB for Students, Engineers, and Professionals in STEM\nhttps://deeplearningcourses.com/c/matlab\n\n\n\nOther Course Links\n==================\n\nGenerative AI: ChatGPT & OpenAI LLMs in Python\nhttps://deeplearningcourses.com/c/genai-openai-chatgpt\n\nMath 0-1: Matrix Calculus for Data Science & Machine Learning\nhttps://deeplearningcourses.com/c/matrix-calculus-machine-learning\n\nMachine Learning: Modern Computer Vision & Generative AI\nhttps://deeplearningcourses.com/c/computer-vision-kerascv\n\nDeepFakes & Voice Cloning: Machine Learning The Easy Way\nhttps://deeplearningcourses.com/c/deepfakes-voice-cloning\n\nFinancial Analysis: Build a ChatGPT Pairs Trading Bot\nhttps://deeplearningcourses.com/c/chatgpt-pairs-trading\n\nMath 0-1: Calculus for Data Science & Machine Learning\nhttps://deeplearningcourses.com/c/calculus-data-science\n\nData Science & Machine Learning: Naive Bayes in Python\nhttps://deeplearningcourses.com/c/data-science-machine-learning-naive-bayes-in-python\n\nCutting-Edge AI: Deep Reinforcement Learning in Python\nhttps://deeplearningcourses.com/c/cutting-edge-artificial-intelligence\n\nRecommender Systems and Deep Learning in Python\nhttps://deeplearningcourses.com/c/recommender-systems\n\nMachine Learning and AI: Support Vector Machines in Python\nhttps://deeplearningcourses.com/c/support-vector-machines-in-python\n\nDeep Learning: Advanced Computer Vision\nhttps://deeplearningcourses.com/c/advanced-computer-vision\n\nDeep Learning: Advanced NLP and RNNs\nhttps://deeplearningcourses.com/c/deep-learning-advanced-nlp\n\nDeep Learning: GANs and Variational Autoencoders\nhttps://deeplearningcourses.com/c/deep-learning-gans-and-variational-autoencoders\n\nAdvanced AI: Deep Reinforcement Learning in Python\nhttps://deeplearningcourses.com/c/deep-reinforcement-learning-in-python\n\nArtificial Intelligence: Reinforcement Learning in Python\nhttps://deeplearningcourses.com/c/artificial-intelligence-reinforcement-learning-in-python\n\nNatural Language Processing with Deep Learning in Python\nhttps://deeplearningcourses.com/c/natural-language-processing-with-deep-learning-in-python\n\nDeep Learning: Recurrent Neural Networks in Python\nhttps://deeplearningcourses.com/c/deep-learning-recurrent-neural-networks-in-python\n\nUnsupervised Machine Learning: Hidden Markov Models in Python\nhttps://deeplearningcourses.com/c/unsupervised-machine-learning-hidden-markov-models-in-python\n\nDeep Learning Prerequisites: The Numpy Stack in Python\nhttps://deeplearningcourses.com/c/deep-learning-prerequisites-the-numpy-stack-in-python\n\nDeep Learning Prerequisites: Linear Regression in Python\nhttps://deeplearningcourses.com/c/data-science-linear-regression-in-python\n\nDeep Learning Prerequisites: Logistic Regression in Python\nhttps://deeplearningcourses.com/c/data-science-logistic-regression-in-python\n\nData Science: Deep Learning and Neural Networks in Python\nhttps://deeplearningcourses.com/c/data-science-deep-learning-in-python\n\nCluster Analysis and Unsupervised Machine Learning in Python\nhttps://deeplearningcourses.com/c/cluster-analysis-unsupervised-machine-learning-python\n\nData Science: Supervised Machine Learning in Python\nhttps://deeplearningcourses.com/c/data-science-supervised-machine-learning-in-python\n\nBayesian Machine Learning in Python: A/B Testing\nhttps://deeplearningcourses.com/c/bayesian-machine-learning-in-python-ab-testing\n\nData Science: Natural Language Processing in Python\nhttps://deeplearningcourses.com/c/data-science-natural-language-processing-in-python\n\nModern Deep Learning in Python\nhttps://deeplearningcourses.com/c/data-science-deep-learning-in-theano-tensorflow\n\nEnsemble Machine Learning in Python: Random Forest and AdaBoost\nhttps://deeplearningcourses.com/c/machine-learning-in-python-random-forest-adaboost\n\nDeep Learning: Convolutional Neural Networks in Python\nhttps://deeplearningcourses.com/c/deep-learning-convolutional-neural-networks-theano-tensorflow\n\nUnsupervised Deep Learning in Python\nhttps://deeplearningcourses.com/c/unsupervised-deep-learning-in-python\n"
        },
        {
          "name": "ab_testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "airline",
          "type": "tree",
          "content": null
        },
        {
          "name": "ann_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "ann_class2",
          "type": "tree",
          "content": null
        },
        {
          "name": "ann_logistic_extra",
          "type": "tree",
          "content": null
        },
        {
          "name": "bayesian_ml",
          "type": "tree",
          "content": null
        },
        {
          "name": "best_fit_line.py",
          "type": "blob",
          "size": 1.07421875,
          "content": "from pulp import *\n\n### remove variable b because it is unconstrained\n### it's just a linear combination of the others\n### you can get the result:\n# status: Optimal\n# values:\n#     a: 20000.0\n#     b: -10000.0\n#     c: 0.0\n#     z: 10000.0\n### or any other multiple thereof\n### ax + by - c = 0\n### is the same as y = (-a/b)x + (c/b)\n\n\nprob = LpProblem(\"best_fit_line\", LpMinimize)\nz = LpVariable('z',0)\na = LpVariable('a',0)\n# b = LpVariable('b')\nc = LpVariable('c',0)\n\n# objective function\nprob += z\n\npoints = [\n    (1,3),\n    (2,5),\n    (3,7),\n    (5,11),\n    (7,14),\n    (8,15),\n    (10,19),\n]\n\nprob += (a != 0)\nfor x,y in points:\n    prob += (a*x - y - c <= z)\n    prob += (a*x - y - c >= -z)\n\nstatus = prob.solve(GLPK(msg = 0))\nprint \"status:\", LpStatus[status]\nprint \"values:\"\nprint \"\\ta:\", value(a)\n# print \"\\tb:\", value(b)\nprint \"\\tc:\", value(c)\nprint \"\\tz:\", value(z)\n\n\n# extra part to plot everything\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = np.array(points)\nplt.scatter(data[:,0], data[:,1])\nx = np.linspace(0, 11, 100)\ny = value(a)*x - value(c)\nplt.plot(x, y)\nplt.show()\n"
        },
        {
          "name": "calculus",
          "type": "tree",
          "content": null
        },
        {
          "name": "chatgpt_trading",
          "type": "tree",
          "content": null
        },
        {
          "name": "cnn_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "cnn_class2",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_csv",
          "type": "tree",
          "content": null
        },
        {
          "name": "financial_engineering",
          "type": "tree",
          "content": null
        },
        {
          "name": "hmm_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "keras_examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "kerascv",
          "type": "tree",
          "content": null
        },
        {
          "name": "linear_algebra",
          "type": "tree",
          "content": null
        },
        {
          "name": "linear_regression_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "logistic_regression_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "matrix_calculus",
          "type": "tree",
          "content": null
        },
        {
          "name": "mnist_csv",
          "type": "tree",
          "content": null
        },
        {
          "name": "naive_bayes",
          "type": "tree",
          "content": null
        },
        {
          "name": "nlp_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "nlp_class2",
          "type": "tree",
          "content": null
        },
        {
          "name": "nlp_class3",
          "type": "tree",
          "content": null
        },
        {
          "name": "nlp_v2",
          "type": "tree",
          "content": null
        },
        {
          "name": "numpy_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "openai",
          "type": "tree",
          "content": null
        },
        {
          "name": "probability",
          "type": "tree",
          "content": null
        },
        {
          "name": "prophet",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytorch",
          "type": "tree",
          "content": null
        },
        {
          "name": "recommenders",
          "type": "tree",
          "content": null
        },
        {
          "name": "rl",
          "type": "tree",
          "content": null
        },
        {
          "name": "rl2",
          "type": "tree",
          "content": null
        },
        {
          "name": "rl3",
          "type": "tree",
          "content": null
        },
        {
          "name": "rnn_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "stats",
          "type": "tree",
          "content": null
        },
        {
          "name": "supervised_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "supervised_class2",
          "type": "tree",
          "content": null
        },
        {
          "name": "svm_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "tensorflow",
          "type": "tree",
          "content": null
        },
        {
          "name": "tf2.0",
          "type": "tree",
          "content": null
        },
        {
          "name": "timeseries",
          "type": "tree",
          "content": null
        },
        {
          "name": "transformers",
          "type": "tree",
          "content": null
        },
        {
          "name": "unsupervised_class",
          "type": "tree",
          "content": null
        },
        {
          "name": "unsupervised_class2",
          "type": "tree",
          "content": null
        },
        {
          "name": "unsupervised_class3",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}