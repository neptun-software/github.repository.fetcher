{
  "metadata": {
    "timestamp": 1736560690090,
    "page": 345,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tkipf/gcn",
      "stars": 7198,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0869140625,
          "content": "# Custom\n*.idea\n*.png\n*.pdf\ntmp/\n*.txt\n!requirements.txt\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n\n*.pickle\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "The MIT License\n\nCopyright (c) 2016 Thomas Kipf\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0419921875,
          "content": "# Graph Convolutional Networks\n\nThis is a TensorFlow implementation of Graph Convolutional Networks for the task of (semi-supervised) classification of nodes in a graph, as described in our paper:\n \nThomas N. Kipf, Max Welling, [Semi-Supervised Classification with Graph Convolutional Networks](http://arxiv.org/abs/1609.02907) (ICLR 2017)\n\nFor a high-level explanation, have a look at our blog post:\n\nThomas Kipf, [Graph Convolutional Networks](http://tkipf.github.io/graph-convolutional-networks/) (2016)\n\n## Installation\n\n```bash\npython setup.py install\n```\n\n## Requirements\n* tensorflow (>0.12)\n* networkx\n\n## Run the demo\n\n```bash\ncd gcn\npython train.py\n```\n\n## Data\n\nIn order to use your own data, you have to provide \n* an N by N adjacency matrix (N is the number of nodes), \n* an N by D feature matrix (D is the number of features per node), and\n* an N by E binary label matrix (E is the number of classes).\n\nHave a look at the `load_data()` function in `utils.py` for an example.\n\nIn this example, we load citation network data (Cora, Citeseer or Pubmed). The original datasets can be found here: http://www.cs.umd.edu/~sen/lbc-proj/LBC.html. In our version (see `data` folder) we use dataset splits provided by https://github.com/kimiyoung/planetoid (Zhilin Yang, William W. Cohen, Ruslan Salakhutdinov, [Revisiting Semi-Supervised Learning with Graph Embeddings](https://arxiv.org/abs/1603.08861), ICML 2016). \n\nYou can specify a dataset as follows:\n\n```bash\npython train.py --dataset citeseer\n```\n\n(or by editing `train.py`)\n\n## Models\n\nYou can choose between the following models: \n* `gcn`: Graph convolutional network (Thomas N. Kipf, Max Welling, [Semi-Supervised Classification with Graph Convolutional Networks](http://arxiv.org/abs/1609.02907), 2016)\n* `gcn_cheby`: Chebyshev polynomial version of graph convolutional network as described in (MichaÃ«l Defferrard, Xavier Bresson, Pierre Vandergheynst, [Convolutional Neural Networks on Graphs with Fast Localized Spectral Filtering](https://arxiv.org/abs/1606.09375), NIPS 2016)\n* `dense`: Basic multi-layer perceptron that supports sparse inputs\n\n## Graph classification\n\nOur framework also supports batch-wise classification of multiple graph instances (of potentially different size) with an adjacency matrix each. It is best to concatenate respective feature matrices and build a (sparse) block-diagonal matrix where each block corresponds to the adjacency matrix of one graph instance. For pooling (in case of graph-level outputs as opposed to node-level outputs) it is best to specify a simple pooling matrix that collects features from their respective graph instances, as illustrated below:\n\n![graph_classification](https://user-images.githubusercontent.com/7347296/34198790-eb5bec96-e56b-11e7-90d5-157800e042de.png)\n\n\n## Cite\n\nPlease cite our paper if you use this code in your own work:\n\n```\n@inproceedings{kipf2017semi,\n  title={Semi-Supervised Classification with Graph Convolutional Networks},\n  author={Kipf, Thomas N. and Welling, Max},\n  booktitle={International Conference on Learning Representations (ICLR)},\n  year={2017}\n}\n```\n"
        },
        {
          "name": "gcn",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0771484375,
          "content": "networkx==2.2\nscipy==1.1.0\nsetuptools==40.6.3\nnumpy==1.15.4\ntensorflow==1.15.4\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.6103515625,
          "content": "from setuptools import setup\nfrom setuptools import find_packages\n\nsetup(name='gcn',\n      version='1.0',\n      description='Graph Convolutional Networks in Tensorflow',\n      author='Thomas Kipf',\n      author_email='thomas.kipf@gmail.com',\n      url='https://tkipf.github.io',\n      download_url='https://github.com/tkipf/gcn',\n      license='MIT',\n      install_requires=['numpy>=1.15.4',\n                        'tensorflow>=1.15.2,<2.0',\n                        'networkx>=2.2',\n                        'scipy>=1.1.0'\n                        ],\n      package_data={'gcn': ['README.md']},\n      packages=find_packages())\n"
        }
      ]
    }
  ]
}