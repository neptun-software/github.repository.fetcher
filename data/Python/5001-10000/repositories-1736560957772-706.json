{
  "metadata": {
    "timestamp": 1736560957772,
    "page": 706,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facundoolano/software-papers",
      "stars": 5507,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": ".DS_Store\nvenv\n"
        },
        {
          "name": ".tool-versions",
          "type": "blob",
          "size": 0.013671875,
          "content": "python 3.9.18\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2022 Facundo Olano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 47.6416015625,
          "content": "# Papers for Software Engineers [![workflow](https://github.com/facundoolano/software-papers/actions/workflows/tests.yml/badge.svg)](https://github.com/facundoolano/software-papers/actions/workflows/tests.yml)\n\nA curated list of papers that may be of interest to Software Engineering students or professionals.\nSee the [sources](#sources) and [selection criteria](#selection-criteria) below.\n\n<br/>\n\n<details open>\n<summary>List of papers by topic</summary>\n<br/>\n\n1. **Von Neumann's First Computer Program. [Knuth (1970)](https://dl.acm.org/doi/pdf/10.1145/356580.356581).**\n    \\\n    <sub>Computer History; Early Programming</sub>\n    * The Education of a Computer. [Hopper (1952)](https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf).\n    * Recursive Programming. [Dijkstra (1960)](https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf).\n    * Programming Considered as a Human Activity. [Dijkstra (1965)](https://www.cs.utexas.edu/~EWD/transcriptions/EWD01xx/EWD117.html).\n    * Goto Statement Considered Harmful. [Dijkstra (1968)](https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf).\n    * Program development by stepwise refinement. [Wirth (1971)](https://dl.acm.org/doi/pdf/10.1145/362575.362577).\n    * The Humble Programmer. [Dijkstra (1972)](http://rkka21.ru/docs/turing-award/ed1972e.pdf).\n    * Computer Programming as an Art. [Knuth (1974)](http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf).\n    * The paradigms of programming. [Floyd (1979)](https://dl.acm.org/doi/pdf/10.1145/1283920.1283934).\n    * Literate Programming. [Knuth (1984)](http://www.literateprogramming.com/knuthweb.pdf).\n\n1. **Computing Machinery and Intelligence. [Turing (1950)](https://www.csee.umbc.edu/courses/471/papers/turing.pdf).**\n    \\\n    <sub>Early Artificial Intelligence</sub>\n    * Some Moral and Technical Consequences of Automation. [Wiener (1960)](https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf).\n    * Steps towards Artificial Intelligence. [Minsky (1960)](http://worrydream.com/refs/Minsky%20-%20Steps%20Toward%20Artificial%20Intelligence.pdf).\n    * ELIZA—a computer program for the study of natural language communication between man and machine. [Weizenbaum (1966)](http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf).\n    * A Theory of the Learnable. [Valiant (1984)](https://people.mpi-inf.mpg.de/~mehlhorn/SeminarEvolvability/ValiantLearnable.pdf).\n\n1. **A Method for the Construction of Minimum-Redundancy Codes. [Huffman (1952)](http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf).**\n    \\\n    <sub>Information Theory</sub>\n    * A Universal Algorithm for Sequential Data Compression. [Ziv, Lempel (1977)](https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf).\n    * Fifty Years of Shannon Theory. [Verdú (1998)](https://monoskop.org/images/7/78/Verdu_Sergio_1998_Fifty_Years_of_Shannon_Theory.pdf).\n\n1. **Engineering a Sort Function. [Bentley, McIlroy (1993)](https://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf).**\n    \\\n    <sub>Data Structures; Algorithms</sub>\n    * On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem. [Kruskal (1956)](https://www.ams.org/proc/1956-007-01/S0002-9939-1956-0078686-7/S0002-9939-1956-0078686-7.pdf).\n    * A Note on Two Problems in Connexion with Graphs. [Dijkstra (1959)](https://jmvidal.cse.sc.edu/library/dijkstra59a.pdf).\n    * Quicksort. [Hoare (1962)](https://dl.acm.org/doi/pdf/10.5555/63445.C1104357).\n    * Space/Time Trade-offs in Hash Coding with Allowable Errors. [Bloom (1970)](https://dl.acm.org/doi/pdf/10.1145/362686.362692).\n    * The Ubiquitous B-Tree. [Comer (1979)](http://carlosproal.com/ir/papers/p121-comer.pdf).\n    * Programming pearls: Algorithm design techniques. [Bentley (1984)](https://dl.acm.org/doi/pdf/10.1145/358234.381162).\n    * Programming pearls: The back of the envelope. [Bentley (1984)](https://dl.acm.org/doi/pdf/10.1145/357994.381168).\n    * Making data structures persistent. [Driscoll et al (1986)](https://dl.acm.org/doi/pdf/10.1145/12130.12142).\n\n1. **A Design Methodology for Reliable Software Systems. [Liskov (1972)](https://dl.acm.org/doi/pdf/10.1145/1479992.1480018).**\n    \\\n    <sub>Software Design</sub>\n    * On the Criteria To Be Used in Decomposing Systems into Modules. [Parnas (1971)](https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf).\n    * Information Distribution Aspects of Design Methodology. [Parnas (1972)](https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF).\n    * Programming with Abstract Data Types. [Liskov, Zilles (1974)](https://dl.acm.org/doi/pdf/10.1145/942572.807045).\n    * Designing Software for Ease of Extension and Contraction. [Parnas (1979)](https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf).\n    * Programming as Theory Building. [Naur (1985)](https://pages.cs.wisc.edu/~remzi/Naur.pdf).\n    * Towards a Theory of Conceptual Design for Software. [Jackson (2015)](https://groups.csail.mit.edu/sdg/pubs/2015/concept-essay.pdf).\n\n1. **Programming Paradigms for Dummies: What Every Programmer Should Know. [Van Roy (2012)](https://webperso.info.ucl.ac.be/~pvr/VanRoyChapter.pdf).**\n    \\\n    <sub>Programming Paradigms</sub>\n    * Recursive Functions of Symbolic Expressions and Their Computation by Machine. [McCarthy (1960)](http://jmc.stanford.edu/articles/recursive/recursive.pdf).\n    * The Semantics of Predicate Logic as a Programming Language. [Van Emden, Kowalski (1976)](https://dl.acm.org/doi/pdf/10.1145/321978.321991).\n    * The Smalltalk-76 Programming System Design and Implementation. [Ingalls (1978)](https://dl.acm.org/doi/pdf/10.1145/512760.512762).\n    * A Theory of Type Polymorphism in Programming. [Milner (1978)](https://homepages.inf.ed.ac.uk/wadler/papers/papers-we-love/milner-type-polymorphism.pdf).\n    * Can Programming Be Liberated from the von Neumann Style? [Backus (1978)](https://dl.acm.org/doi/pdf/10.1145/359576.359579).\n    * The Semantic Elegance of Applicative Languages. [Turner (1981)](http://nsl.com/misc/sasl/paraffins-turner.pdf).\n    * On understanding types, data abstraction, and polymorphism. [Cardelli, Wegner (1985)](https://dl.acm.org/doi/pdf/10.1145/6041.6042).\n    * Why Functional Programming Matters. [Hughes (1990)](https://www.cs.utexas.edu/~shmat/courses/cs345/whyfp.pdf).\n    * SELF: The Power of Simplicity. [Ungar, Smith (1991)](https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps).\n    * The essence of functional programming. [Wadler (1992)](https://dl.acm.org/doi/pdf/10.1145/143165.143169).\n    * QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs. [Claessen, Hughes (2000)](https://dl.acm.org/doi/pdf/10.1145/351240.351266).\n    * Church's Thesis and Functional Programming. [Turner (2006)](https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet).\n\n1. **An Incremental Approach to Compiler Construction. [Ghuloum (2006)](http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf).**\n    \\\n    <sub>Language Design; Compilers</sub>\n    * The Next 700 Programming Languages. [Landin (1966)](https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf).\n    * Programming pearls: little languages. [Bentley (1986)](https://dl.acm.org/doi/pdf/10.1145/6424.315691).\n    * The Essence of Compiling with Continuations. [Flanagan et al (1993)](https://dl.acm.org/doi/pdf/10.1145/173262.155113).\n    * A Brief History of Just-In-Time. [Aycock (2003)](https://user.it.uu.se/~kostis/Teaching/KT2-04/jit_survey.pdf).\n    * LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. [Lattner, Adve (2004)](https://llvm.org/pubs/2004-01-30-CGO-LLVM.pdf).\n    * A Unified Theory of Garbage Collection. [Bacon, Cheng, Rajan (2004)](https://courses.cs.washington.edu/courses/cse590p/05au/p50-bacon.pdf).\n    * A Nanopass Framework for Compiler Education. [Sarkar, Waddell, Dybvig (2005)](https://legacy.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf).\n    * Bringing the Web up to Speed with WebAssembly. [Haas (2017)](https://dl.acm.org/doi/pdf/10.1145/3062341.3062363).\n\n1. **No Silver Bullet: Essence and Accidents of Software Engineering. [Brooks (1987)](http://worrydream.com/refs/Brooks-NoSilverBullet.pdf).**\n    \\\n    <sub>Software Engineering; Project Management</sub>\n    * How do committees invent? [Conway (1968)](https://www.melconway.com/Home/pdf/committees.pdf).\n    * Managing the Development of Large Software Systems. [Royce (1970)](https://www.praxisframework.org/files/royce1970.pdf).\n    * The Mythical Man Month. [Brooks (1975)](https://www.cs.virginia.edu/~evans/greatworks/mythical.pdf).\n    * On Building Systems That Will Fail. [Corbató (1991)](https://dl.acm.org/doi/pdf/10.1145/114669.114686).\n    * Software Aging. [Parnas (1994)](https://dl.acm.org/doi/pdf/10.5555/257734.257788).\n    * Laws of Software Evolution Revisited. [Lehman (1997)](https://www.rose-hulman.edu/Class/csse/csse490/cs490-const-and-evol/LawsOfSoftwareEvolutionRevisited.pdf).\n    * The Cathedral and the Bazaar. [Raymond (1998)](http://users.ece.utexas.edu/~perry/education/382v-s08/papers/raymond.pdf).\n    * Out of the Tar Pit. [Moseley, Marks (2006)](http://curtclifton.net/papers/MoseleyMarks06a.pdf).\n\n1. **Communicating sequential processes. [Hoare (1978)](https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf).**\n    \\\n    <sub>Concurrency</sub>\n    * Solution Of a Problem in Concurrent Program Control. [Dijkstra (1965)](https://dl.acm.org/doi/pdf/10.1145/365559.365617).\n    * Monitors: An operating system structuring concept. [Hoare (1974)](https://dl.acm.org/doi/pdf/10.1145/355620.361161).\n    * On the Duality of Operating System Structures. [Lauer, Needham (1978)](https://dl.acm.org/doi/pdf/10.1145/850657.850658).\n    * Software Transactional Memory. [Shavit, Touitou (1997)](https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf).\n\n1. **The UNIX Time- Sharing System. [Ritchie, Thompson (1974)](https://dsf.berkeley.edu/cs262/unix.pdf).**\n    \\\n    <sub>Operating Systems</sub>\n    * An Experimental Time-Sharing System. [Corbató, Merwin Daggett, Daley (1962)](http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/).\n    * The Structure of the \\\"THE\\\"-Multiprogramming System. [Dijkstra (1968)](https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf).\n    * The nucleus of a multiprogramming system. [Hansen (1970)](http://www.brinch-hansen.net/papers/1970a.pdf).\n    * Reflections on Trusting Trust. [Thompson (1984)](https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf).\n    * The Design and Implementation of a Log-Structured File System. [Rosenblum, Ousterhout (1991)](https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf).\n\n1. **A Relational Model of Data for Large Shared Data Banks. [Codd (1970)](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf).**\n    \\\n    <sub>Databases</sub>\n    * Granularity of Locks and Degrees of Consistency in a Shared Data Base. [Gray et al (1975)](https://www.cs.cmu.edu/~natassa/courses/15-721/papers/GrayLocks.pdf).\n    * Access Path Selection in a Relational Database Management System. [Selinger et al (1979)](https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf).\n    * The Transaction Concept: Virtues and Limitations. [Gray (1981)](https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf).\n    * The design of POSTGRES. [Stonebraker, Rowe (1986)](https://dl.acm.org/doi/pdf/10.1145/16856.16888).\n    * Rules of Thumb in Data Engineering. [Gray, Shenay (1999)](http://research.microsoft.com/en-us/um/people/gray/papers/ms_tr_99_100_rules_of_thumb_in_data_engineering.pdf).\n\n1. **A Protocol for Packet Network Intercommunication. [Cerf, Kahn (1974)](https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf).**\n    \\\n    <sub>Networking</sub>\n    * Ethernet: Distributed packet switching for local computer networks. [Metcalfe, Boggs (1978)](https://dl.acm.org/doi/pdf/10.1145/360248.360253).\n    * End-To-End Arguments in System Design. [Saltzer, Reed, Clark (1984)](https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf).\n    * An algorithm for distributed computation of a Spanning Tree in an Extended LAN. [Perlman (1985)](https://dl.acm.org/doi/pdf/10.1145/319056.319004).\n    * The Design Philosophy of the DARPA Internet Protocols. [Clark (1988)](http://ccr.sigcomm.org/archive/1995/jan95/ccr-9501-clark.pdf).\n    * TOR: The second generation onion router. [Dingledine et al (2004)](https://svn-archive.torproject.org/svn/projects/design-paper/tor-design.pdf).\n    * Why the Internet only just works. [Handley (2006)](http://www0.cs.ucl.ac.uk/staff/m.handley/papers/only-just-works.pdf).\n    * The Network is Reliable. [Bailis,  Kingsbury (2014)](https://queue.acm.org/detail.cfm?id=2655736).\n\n1. **New Directions in Cryptography. [Diffie, Hellman (1976)](https://ee.stanford.edu/~hellman/publications/24.pdf).**\n    \\\n    <sub>Cryptography</sub>\n    * A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. [Rivest, Shamir, Adleman (1978)](https://dl.acm.org/doi/pdf/10.1145/359340.359342).\n    * How To Share A Secret. [Shamir (1979)](https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf).\n    * A Digital Signature Based on a Conventional Encryption Function. [Merkle (1987)](https://people.eecs.berkeley.edu/~raluca/cs261-f15/readings/merkle.pdf).\n    * The Salsa20 family of stream ciphers. [Bernstein (2007)](https://cr.yp.to/snuffle/salsafamily-20071225.pdf).\n\n1. **Time, Clocks, and the Ordering of Events in a Distributed System. [Lamport (1978)](https://lamport.azurewebsites.net/pubs/time-clocks.pdf).**\n    \\\n    <sub>Distributed Systems</sub>\n    * Self-stabilizing systems in spite of distributed control. [Dijkstra (1974)](https://dl.acm.org/doi/pdf/10.1145/361179.361202).\n    * The Byzantine Generals Problem. [Lamport, Shostak, Pease (1982)](https://lamport.azurewebsites.net/pubs/byz.pdf).\n    * Impossibility of Distributed Consensus With One Faulty Process. [Fisher, Lynch, Patterson (1985)](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf).\n    * Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial. [Schneider (1990)](https://www.cs.cornell.edu/fbs/publications/SMSurvey.pdf).\n    * Practical Byzantine Fault Tolerance. [Castro, Liskov (1999)](https://pmg.csail.mit.edu/papers/osdi99.pdf).\n    * Paxos made simple. [Lamport (2001)](https://lamport.azurewebsites.net/pubs/paxos-simple.pdf).\n    * Paxos made live - An Engineering Perspective. [Chandra, Griesemer, Redstone (2007)](https://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/papers/paper2-1.pdf).\n    * In Search of an Understandable Consensus Algorithm. [Ongaro, Ousterhout (2014)](https://raft.github.io/raft.pdf).\n\n1. **Designing for Usability: Key Principles and What Designers Think. [Gould, Lewis (1985)](https://dl.acm.org/doi/pdf/10.1145/3166.3170).**\n    \\\n    <sub>Human-Computer Interaction; User Interfaces</sub>\n    * As We May Think. [Bush (1945)](https://web.mit.edu/STS.035/www/PDFs/think.pdf).\n    * Man-Computer symbiosis. [Licklider (1958)](http://worrydream.com/refs/Licklider%20-%20Man-Computer%20Symbiosis.pdf).\n    * Some Thoughts About the Social Implications of Accessible Computing. [David, Fano (1965)](https://dl.acm.org/doi/pdf/10.1145/1463891.1463917).\n    * Tutorials for the First-Time Computer User. [Al-Awar, Chapanis, Ford (1981)](https://drive.google.com/file/d/1zA4LkSHoanjjhOVCwYzrkdkdzgPbKWJ9/view?usp=sharing).\n    * The star user interface: an overview. [Smith, Irby, Kimball (1982)](https://www.tech-insider.org/star/research/acrobat/8206.pdf).\n    * Design Principles for Human-Computer Interfaces. [Norman (1983)](https://dl.acm.org/doi/pdf/10.1145/800045.801571).\n    * Human-Computer Interaction: Psychology as a Science of Design. [Carroll (1997)](https://home.cs.colorado.edu/~martin/Csci6402/Papers/carroll97.pdf).\n\n1. **The anatomy of a large-scale hypertextual Web search engine. [Brin, Page (1998)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/334.pdf).**\n    \\\n    <sub>Information Retrieval; World-Wide Web</sub>\n    * A Statistical Interpretation of Term Specificity in Retrieval. [Spärck Jones (1972)](http://openlib.org/home/krichel/courses/lis618/readings/spaerk-jones72.pdf).\n    * World-Wide Web: Information Universe. [Berners-Lee et al (1992)](https://www.w3.org/History/1992/ENRAP/Article_9202.pdf).\n    * The PageRank Citation Ranking: Bringing Order to the Web. [Page, Brin, Motwani (1998)](https://www.cis.upenn.edu/~mkearns/teaching/NetworkedLife/pagerank.pdf).\n\n1. **Dynamo, Amazon’s Highly Available Key-value store. [DeCandia et al (2007)](https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf).**\n    \\\n    <sub>Internet Scale Data Systems</sub>\n    * The Google File System. [Ghemawat, Gobioff, Leung (2003)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/035fc972c796d33122033a0614bc94cff1527999.pdf).\n    * MapReduce: Simplified Data Processing on Large Clusters. [Dean, Ghemawat (2004)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/16cb30b4b92fd4989b8619a61752a2387c6dd474.pdf).\n    * Bigtable: A Distributed Storage System for Structured Data. [Chang et al (2006)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/68a74a85e1662fe02ff3967497f31fda7f32225c.pdf).\n    * ZooKeeper: wait-free coordination for internet scale systems. [Hunt et al (2010)](https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf).\n    * The Hadoop Distributed File System. [Shvachko et al (2010)](https://cse.buffalo.edu/~okennedy/courses/papers/hdfs.pdf).\n    * Kafka: a Distributed Messaging System for Log Processing. [Kreps, Narkhede, Rao (2011)](http://notes.stephenholiday.com/Kafka.pdf).\n    * CAP Twelve Years Later: How the \"Rules\" Have Changed. [Brewer (2012)](https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf).\n    * Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases. [Verbitski et al (2017)](https://pages.cs.wisc.edu/~yxy/cs764-f20/papers/aurora-sigmod-17.pdf).\n\n1. **On Designing and Deploying Internet Scale Services. [Hamilton (2007)](https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf).**\n    \\\n    <sub>Operations; Reliability; Fault-tolerance</sub>\n    * Ironies of Automation. [Bainbridge (1983)](https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf).\n    * Why do computers stop and what can be done about it? [Gray (1985)](https://jimgray.azurewebsites.net/papers/TandemTR85.7_WhyDoComputersStop.pdf).\n    * Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. [Patterson et al (2002)](http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf).\n    * Crash-Only Software. [Candea, Fox (2003)](https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf).\n    * Building on Quicksand. [Helland, Campbell (2009)](https://arxiv.org/ftp/arxiv/papers/0909/0909.1788.pdf).\n\n1. **Thinking Methodically about Performance. [Gregg (2012)](https://queue.acm.org/detail.cfm?id=2413037).**\n    \\\n    <sub>Performance</sub>\n    * Performance Anti-Patterns. [Smaalders (2006)](https://queue.acm.org/detail.cfm?id=1117403).\n    * Thinking Clearly about Performance. [Millsap (2010)](https://queue.acm.org/detail.cfm?id=1854041).\n\n1. **Bitcoin, A peer-to-peer electronic cash system. [Nakamoto (2008)](https://bitcoin.org/bitcoin.pdf).**\n    \\\n    <sub>Decentralized Distributed Systems; Peer-to-peer systems</sub>\n    * Operational transformation in real-time group editors: issues, algorithms, and achievements. [Sun, Ellis (1998)](https://dl.acm.org/doi/pdf/10.1145/289444.289469).\n    * Kademlia: A Peer-to-Peer Information System Based on the XOR Metric. [Maymounkov, Mazières (2002)](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf).\n    * Incentives Build Robustness in BitTorrent. [Cohen (2003)](https://www.bittorrent.org/bittorrentecon.pdf).\n    * Conflict-free Replicated Data Types. [Shapiro et al (2011)](https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf).\n    * IPFS - Content Addressed, Versioned, P2P File System. [Benet (2014)](https://raw.githubusercontent.com/ipfs/papers/master/ipfs-cap2pfs/ipfs-p2p-file-system.pdf).\n    * Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. [Buterin (2014)](https://ethereum.org/content/whitepaper/whitepaper-pdf/Ethereum_Whitepaper_-_Buterin_2014.pdf).\n    * Local-First Software: You Own Your Data, in spite of the Cloud. [Kleppmann et al (2019)](https://www.inkandswitch.com/local-first/static/local-first.pdf).\n\n1. **A Few Useful Things to Know About Machine Learning. [Domingos (2012)](https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf).**\n    \\\n    <sub>Machine Learning</sub>\n    * Statistical Modeling: The Two Cultures. [Breiman (2001)](https://projecteuclid.org/journalArticle/Download?urlId=10.1214%2Fss%2F1009213726).\n    * The Unreasonable Effectiveness of Data. [Halevy, Norvig, Pereira (2009)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/35179.pdf).\n    * ImageNet Classification with Deep Convolutional Neural Networks. [Krizhevsky, Sutskever, Hinton (2012)](https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf).\n    * Playing Atari with Deep Reinforcement Learning. [Mnih et al (2013)](https://arxiv.org/pdf/1312.5602.pdf).\n    * Generative Adversarial Nets. [Goodfellow et al (2014)](https://proceedings.neurips.cc/paper_files/paper/2014/file/5ca3e9b122f61f8f06494c97b1afccf3-Paper.pdf).\n    * Deep Learning. [LeCun, Bengio, Hinton (2015)](https://www.cs.toronto.edu/~hinton/absps/NatureDeepReview.pdf).\n    * Attention Is All You Need. [Vaswani et al (2017)](https://arxiv.org/pdf/1706.03762.pdf).\n\n\n\n</details>\n\n<br/>\n\n<details>\n<summary>Top-level papers only</summary>\n<br/>\n\n1. **Von Neumann's First Computer Program. [Knuth (1970)](https://dl.acm.org/doi/pdf/10.1145/356580.356581).**\n1. **Computing Machinery and Intelligence. [Turing (1950)](https://www.csee.umbc.edu/courses/471/papers/turing.pdf).**\n1. **A Method for the Construction of Minimum-Redundancy Codes. [Huffman (1952)](http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf).**\n1. **Engineering a Sort Function. [Bentley, McIlroy (1993)](https://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf).**\n1. **A Design Methodology for Reliable Software Systems. [Liskov (1972)](https://dl.acm.org/doi/pdf/10.1145/1479992.1480018).**\n1. **Programming Paradigms for Dummies: What Every Programmer Should Know. [Van Roy (2012)](https://webperso.info.ucl.ac.be/~pvr/VanRoyChapter.pdf).**\n1. **An Incremental Approach to Compiler Construction. [Ghuloum (2006)](http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf).**\n1. **No Silver Bullet: Essence and Accidents of Software Engineering. [Brooks (1987)](http://worrydream.com/refs/Brooks-NoSilverBullet.pdf).**\n1. **Communicating sequential processes. [Hoare (1978)](https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf).**\n1. **The UNIX Time- Sharing System. [Ritchie, Thompson (1974)](https://dsf.berkeley.edu/cs262/unix.pdf).**\n1. **A Relational Model of Data for Large Shared Data Banks. [Codd (1970)](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf).**\n1. **A Protocol for Packet Network Intercommunication. [Cerf, Kahn (1974)](https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf).**\n1. **New Directions in Cryptography. [Diffie, Hellman (1976)](https://ee.stanford.edu/~hellman/publications/24.pdf).**\n1. **Time, Clocks, and the Ordering of Events in a Distributed System. [Lamport (1978)](https://lamport.azurewebsites.net/pubs/time-clocks.pdf).**\n1. **Designing for Usability: Key Principles and What Designers Think. [Gould, Lewis (1985)](https://dl.acm.org/doi/pdf/10.1145/3166.3170).**\n1. **The anatomy of a large-scale hypertextual Web search engine. [Brin, Page (1998)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/334.pdf).**\n1. **Dynamo, Amazon’s Highly Available Key-value store. [DeCandia et al (2007)](https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf).**\n1. **On Designing and Deploying Internet Scale Services. [Hamilton (2007)](https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf).**\n1. **Thinking Methodically about Performance. [Gregg (2012)](https://queue.acm.org/detail.cfm?id=2413037).**\n1. **Bitcoin, A peer-to-peer electronic cash system. [Nakamoto (2008)](https://bitcoin.org/bitcoin.pdf).**\n1. **A Few Useful Things to Know About Machine Learning. [Domingos (2012)](https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf).**\n\n\n</details>\n\n<br/>\n\n<details>\n<summary>All papers in chronological order </summary>\n<br/>\n\n1. As We May Think. [Bush (1945)](https://web.mit.edu/STS.035/www/PDFs/think.pdf).\n1. **Computing Machinery and Intelligence. [Turing (1950)](https://www.csee.umbc.edu/courses/471/papers/turing.pdf).**\n1. The Education of a Computer. [Hopper (1952)](https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf).\n1. **A Method for the Construction of Minimum-Redundancy Codes. [Huffman (1952)](http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf).**\n1. On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem. [Kruskal (1956)](https://www.ams.org/proc/1956-007-01/S0002-9939-1956-0078686-7/S0002-9939-1956-0078686-7.pdf).\n1. Man-Computer symbiosis. [Licklider (1958)](http://worrydream.com/refs/Licklider%20-%20Man-Computer%20Symbiosis.pdf).\n1. A Note on Two Problems in Connexion with Graphs. [Dijkstra (1959)](https://jmvidal.cse.sc.edu/library/dijkstra59a.pdf).\n1. Recursive Programming. [Dijkstra (1960)](https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf).\n1. Some Moral and Technical Consequences of Automation. [Wiener (1960)](https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf).\n1. Steps towards Artificial Intelligence. [Minsky (1960)](http://worrydream.com/refs/Minsky%20-%20Steps%20Toward%20Artificial%20Intelligence.pdf).\n1. Recursive Functions of Symbolic Expressions and Their Computation by Machine. [McCarthy (1960)](http://jmc.stanford.edu/articles/recursive/recursive.pdf).\n1. Quicksort. [Hoare (1962)](https://dl.acm.org/doi/pdf/10.5555/63445.C1104357).\n1. An Experimental Time-Sharing System. [Corbató, Merwin Daggett, Daley (1962)](http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/).\n1. Programming Considered as a Human Activity. [Dijkstra (1965)](https://www.cs.utexas.edu/~EWD/transcriptions/EWD01xx/EWD117.html).\n1. Solution Of a Problem in Concurrent Program Control. [Dijkstra (1965)](https://dl.acm.org/doi/pdf/10.1145/365559.365617).\n1. Some Thoughts About the Social Implications of Accessible Computing. [David, Fano (1965)](https://dl.acm.org/doi/pdf/10.1145/1463891.1463917).\n1. ELIZA—a computer program for the study of natural language communication between man and machine. [Weizenbaum (1966)](http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf).\n1. The Next 700 Programming Languages. [Landin (1966)](https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf).\n1. Goto Statement Considered Harmful. [Dijkstra (1968)](https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf).\n1. How do committees invent? [Conway (1968)](https://www.melconway.com/Home/pdf/committees.pdf).\n1. The Structure of the \\\"THE\\\"-Multiprogramming System. [Dijkstra (1968)](https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf).\n1. **Von Neumann's First Computer Program. [Knuth (1970)](https://dl.acm.org/doi/pdf/10.1145/356580.356581).**\n1. Space/Time Trade-offs in Hash Coding with Allowable Errors. [Bloom (1970)](https://dl.acm.org/doi/pdf/10.1145/362686.362692).\n1. Managing the Development of Large Software Systems. [Royce (1970)](https://www.praxisframework.org/files/royce1970.pdf).\n1. The nucleus of a multiprogramming system. [Hansen (1970)](http://www.brinch-hansen.net/papers/1970a.pdf).\n1. **A Relational Model of Data for Large Shared Data Banks. [Codd (1970)](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf).**\n1. Program development by stepwise refinement. [Wirth (1971)](https://dl.acm.org/doi/pdf/10.1145/362575.362577).\n1. On the Criteria To Be Used in Decomposing Systems into Modules. [Parnas (1971)](https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf).\n1. The Humble Programmer. [Dijkstra (1972)](http://rkka21.ru/docs/turing-award/ed1972e.pdf).\n1. **A Design Methodology for Reliable Software Systems. [Liskov (1972)](https://dl.acm.org/doi/pdf/10.1145/1479992.1480018).**\n1. Information Distribution Aspects of Design Methodology. [Parnas (1972)](https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF).\n1. A Statistical Interpretation of Term Specificity in Retrieval. [Spärck Jones (1972)](http://openlib.org/home/krichel/courses/lis618/readings/spaerk-jones72.pdf).\n1. Computer Programming as an Art. [Knuth (1974)](http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf).\n1. Programming with Abstract Data Types. [Liskov, Zilles (1974)](https://dl.acm.org/doi/pdf/10.1145/942572.807045).\n1. Monitors: An operating system structuring concept. [Hoare (1974)](https://dl.acm.org/doi/pdf/10.1145/355620.361161).\n1. **The UNIX Time- Sharing System. [Ritchie, Thompson (1974)](https://dsf.berkeley.edu/cs262/unix.pdf).**\n1. **A Protocol for Packet Network Intercommunication. [Cerf, Kahn (1974)](https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf).**\n1. Self-stabilizing systems in spite of distributed control. [Dijkstra (1974)](https://dl.acm.org/doi/pdf/10.1145/361179.361202).\n1. The Mythical Man Month. [Brooks (1975)](https://www.cs.virginia.edu/~evans/greatworks/mythical.pdf).\n1. Granularity of Locks and Degrees of Consistency in a Shared Data Base. [Gray et al (1975)](https://www.cs.cmu.edu/~natassa/courses/15-721/papers/GrayLocks.pdf).\n1. The Semantics of Predicate Logic as a Programming Language. [Van Emden, Kowalski (1976)](https://dl.acm.org/doi/pdf/10.1145/321978.321991).\n1. **New Directions in Cryptography. [Diffie, Hellman (1976)](https://ee.stanford.edu/~hellman/publications/24.pdf).**\n1. A Universal Algorithm for Sequential Data Compression. [Ziv, Lempel (1977)](https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf).\n1. The Smalltalk-76 Programming System Design and Implementation. [Ingalls (1978)](https://dl.acm.org/doi/pdf/10.1145/512760.512762).\n1. A Theory of Type Polymorphism in Programming. [Milner (1978)](https://homepages.inf.ed.ac.uk/wadler/papers/papers-we-love/milner-type-polymorphism.pdf).\n1. Can Programming Be Liberated from the von Neumann Style? [Backus (1978)](https://dl.acm.org/doi/pdf/10.1145/359576.359579).\n1. **Communicating sequential processes. [Hoare (1978)](https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf).**\n1. On the Duality of Operating System Structures. [Lauer, Needham (1978)](https://dl.acm.org/doi/pdf/10.1145/850657.850658).\n1. Ethernet: Distributed packet switching for local computer networks. [Metcalfe, Boggs (1978)](https://dl.acm.org/doi/pdf/10.1145/360248.360253).\n1. A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. [Rivest, Shamir, Adleman (1978)](https://dl.acm.org/doi/pdf/10.1145/359340.359342).\n1. **Time, Clocks, and the Ordering of Events in a Distributed System. [Lamport (1978)](https://lamport.azurewebsites.net/pubs/time-clocks.pdf).**\n1. The paradigms of programming. [Floyd (1979)](https://dl.acm.org/doi/pdf/10.1145/1283920.1283934).\n1. The Ubiquitous B-Tree. [Comer (1979)](http://carlosproal.com/ir/papers/p121-comer.pdf).\n1. Designing Software for Ease of Extension and Contraction. [Parnas (1979)](https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf).\n1. Access Path Selection in a Relational Database Management System. [Selinger et al (1979)](https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf).\n1. How To Share A Secret. [Shamir (1979)](https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf).\n1. The Semantic Elegance of Applicative Languages. [Turner (1981)](http://nsl.com/misc/sasl/paraffins-turner.pdf).\n1. The Transaction Concept: Virtues and Limitations. [Gray (1981)](https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf).\n1. Tutorials for the First-Time Computer User. [Al-Awar, Chapanis, Ford (1981)](https://drive.google.com/file/d/1zA4LkSHoanjjhOVCwYzrkdkdzgPbKWJ9/view?usp=sharing).\n1. The Byzantine Generals Problem. [Lamport, Shostak, Pease (1982)](https://lamport.azurewebsites.net/pubs/byz.pdf).\n1. The star user interface: an overview. [Smith, Irby, Kimball (1982)](https://www.tech-insider.org/star/research/acrobat/8206.pdf).\n1. Design Principles for Human-Computer Interfaces. [Norman (1983)](https://dl.acm.org/doi/pdf/10.1145/800045.801571).\n1. Ironies of Automation. [Bainbridge (1983)](https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf).\n1. Literate Programming. [Knuth (1984)](http://www.literateprogramming.com/knuthweb.pdf).\n1. A Theory of the Learnable. [Valiant (1984)](https://people.mpi-inf.mpg.de/~mehlhorn/SeminarEvolvability/ValiantLearnable.pdf).\n1. Programming pearls: Algorithm design techniques. [Bentley (1984)](https://dl.acm.org/doi/pdf/10.1145/358234.381162).\n1. Programming pearls: The back of the envelope. [Bentley (1984)](https://dl.acm.org/doi/pdf/10.1145/357994.381168).\n1. Reflections on Trusting Trust. [Thompson (1984)](https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf).\n1. End-To-End Arguments in System Design. [Saltzer, Reed, Clark (1984)](https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf).\n1. Programming as Theory Building. [Naur (1985)](https://pages.cs.wisc.edu/~remzi/Naur.pdf).\n1. On understanding types, data abstraction, and polymorphism. [Cardelli, Wegner (1985)](https://dl.acm.org/doi/pdf/10.1145/6041.6042).\n1. An algorithm for distributed computation of a Spanning Tree in an Extended LAN. [Perlman (1985)](https://dl.acm.org/doi/pdf/10.1145/319056.319004).\n1. Impossibility of Distributed Consensus With One Faulty Process. [Fisher, Lynch, Patterson (1985)](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf).\n1. **Designing for Usability: Key Principles and What Designers Think. [Gould, Lewis (1985)](https://dl.acm.org/doi/pdf/10.1145/3166.3170).**\n1. Why do computers stop and what can be done about it? [Gray (1985)](https://jimgray.azurewebsites.net/papers/TandemTR85.7_WhyDoComputersStop.pdf).\n1. Making data structures persistent. [Driscoll et al (1986)](https://dl.acm.org/doi/pdf/10.1145/12130.12142).\n1. Programming pearls: little languages. [Bentley (1986)](https://dl.acm.org/doi/pdf/10.1145/6424.315691).\n1. The design of POSTGRES. [Stonebraker, Rowe (1986)](https://dl.acm.org/doi/pdf/10.1145/16856.16888).\n1. **No Silver Bullet: Essence and Accidents of Software Engineering. [Brooks (1987)](http://worrydream.com/refs/Brooks-NoSilverBullet.pdf).**\n1. A Digital Signature Based on a Conventional Encryption Function. [Merkle (1987)](https://people.eecs.berkeley.edu/~raluca/cs261-f15/readings/merkle.pdf).\n1. The Design Philosophy of the DARPA Internet Protocols. [Clark (1988)](http://ccr.sigcomm.org/archive/1995/jan95/ccr-9501-clark.pdf).\n1. Why Functional Programming Matters. [Hughes (1990)](https://www.cs.utexas.edu/~shmat/courses/cs345/whyfp.pdf).\n1. Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial. [Schneider (1990)](https://www.cs.cornell.edu/fbs/publications/SMSurvey.pdf).\n1. SELF: The Power of Simplicity. [Ungar, Smith (1991)](https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps).\n1. On Building Systems That Will Fail. [Corbató (1991)](https://dl.acm.org/doi/pdf/10.1145/114669.114686).\n1. The Design and Implementation of a Log-Structured File System. [Rosenblum, Ousterhout (1991)](https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf).\n1. The essence of functional programming. [Wadler (1992)](https://dl.acm.org/doi/pdf/10.1145/143165.143169).\n1. World-Wide Web: Information Universe. [Berners-Lee et al (1992)](https://www.w3.org/History/1992/ENRAP/Article_9202.pdf).\n1. **Engineering a Sort Function. [Bentley, McIlroy (1993)](https://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf).**\n1. The Essence of Compiling with Continuations. [Flanagan et al (1993)](https://dl.acm.org/doi/pdf/10.1145/173262.155113).\n1. Software Aging. [Parnas (1994)](https://dl.acm.org/doi/pdf/10.5555/257734.257788).\n1. Laws of Software Evolution Revisited. [Lehman (1997)](https://www.rose-hulman.edu/Class/csse/csse490/cs490-const-and-evol/LawsOfSoftwareEvolutionRevisited.pdf).\n1. Software Transactional Memory. [Shavit, Touitou (1997)](https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf).\n1. Human-Computer Interaction: Psychology as a Science of Design. [Carroll (1997)](https://home.cs.colorado.edu/~martin/Csci6402/Papers/carroll97.pdf).\n1. Fifty Years of Shannon Theory. [Verdú (1998)](https://monoskop.org/images/7/78/Verdu_Sergio_1998_Fifty_Years_of_Shannon_Theory.pdf).\n1. The Cathedral and the Bazaar. [Raymond (1998)](http://users.ece.utexas.edu/~perry/education/382v-s08/papers/raymond.pdf).\n1. **The anatomy of a large-scale hypertextual Web search engine. [Brin, Page (1998)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/334.pdf).**\n1. The PageRank Citation Ranking: Bringing Order to the Web. [Page, Brin, Motwani (1998)](https://www.cis.upenn.edu/~mkearns/teaching/NetworkedLife/pagerank.pdf).\n1. Operational transformation in real-time group editors: issues, algorithms, and achievements. [Sun, Ellis (1998)](https://dl.acm.org/doi/pdf/10.1145/289444.289469).\n1. Rules of Thumb in Data Engineering. [Gray, Shenay (1999)](http://research.microsoft.com/en-us/um/people/gray/papers/ms_tr_99_100_rules_of_thumb_in_data_engineering.pdf).\n1. Practical Byzantine Fault Tolerance. [Castro, Liskov (1999)](https://pmg.csail.mit.edu/papers/osdi99.pdf).\n1. QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs. [Claessen, Hughes (2000)](https://dl.acm.org/doi/pdf/10.1145/351240.351266).\n1. Paxos made simple. [Lamport (2001)](https://lamport.azurewebsites.net/pubs/paxos-simple.pdf).\n1. Statistical Modeling: The Two Cultures. [Breiman (2001)](https://projecteuclid.org/journalArticle/Download?urlId=10.1214%2Fss%2F1009213726).\n1. Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. [Patterson et al (2002)](http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf).\n1. Kademlia: A Peer-to-Peer Information System Based on the XOR Metric. [Maymounkov, Mazières (2002)](https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf).\n1. A Brief History of Just-In-Time. [Aycock (2003)](https://user.it.uu.se/~kostis/Teaching/KT2-04/jit_survey.pdf).\n1. The Google File System. [Ghemawat, Gobioff, Leung (2003)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/035fc972c796d33122033a0614bc94cff1527999.pdf).\n1. Crash-Only Software. [Candea, Fox (2003)](https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf).\n1. Incentives Build Robustness in BitTorrent. [Cohen (2003)](https://www.bittorrent.org/bittorrentecon.pdf).\n1. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. [Lattner, Adve (2004)](https://llvm.org/pubs/2004-01-30-CGO-LLVM.pdf).\n1. A Unified Theory of Garbage Collection. [Bacon, Cheng, Rajan (2004)](https://courses.cs.washington.edu/courses/cse590p/05au/p50-bacon.pdf).\n1. TOR: The second generation onion router. [Dingledine et al (2004)](https://svn-archive.torproject.org/svn/projects/design-paper/tor-design.pdf).\n1. MapReduce: Simplified Data Processing on Large Clusters. [Dean, Ghemawat (2004)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/16cb30b4b92fd4989b8619a61752a2387c6dd474.pdf).\n1. A Nanopass Framework for Compiler Education. [Sarkar, Waddell, Dybvig (2005)](https://legacy.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf).\n1. Church's Thesis and Functional Programming. [Turner (2006)](https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet).\n1. **An Incremental Approach to Compiler Construction. [Ghuloum (2006)](http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf).**\n1. Out of the Tar Pit. [Moseley, Marks (2006)](http://curtclifton.net/papers/MoseleyMarks06a.pdf).\n1. Why the Internet only just works. [Handley (2006)](http://www0.cs.ucl.ac.uk/staff/m.handley/papers/only-just-works.pdf).\n1. Bigtable: A Distributed Storage System for Structured Data. [Chang et al (2006)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/68a74a85e1662fe02ff3967497f31fda7f32225c.pdf).\n1. Performance Anti-Patterns. [Smaalders (2006)](https://queue.acm.org/detail.cfm?id=1117403).\n1. The Salsa20 family of stream ciphers. [Bernstein (2007)](https://cr.yp.to/snuffle/salsafamily-20071225.pdf).\n1. Paxos made live - An Engineering Perspective. [Chandra, Griesemer, Redstone (2007)](https://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/papers/paper2-1.pdf).\n1. **Dynamo, Amazon’s Highly Available Key-value store. [DeCandia et al (2007)](https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf).**\n1. **On Designing and Deploying Internet Scale Services. [Hamilton (2007)](https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf).**\n1. **Bitcoin, A peer-to-peer electronic cash system. [Nakamoto (2008)](https://bitcoin.org/bitcoin.pdf).**\n1. Building on Quicksand. [Helland, Campbell (2009)](https://arxiv.org/ftp/arxiv/papers/0909/0909.1788.pdf).\n1. The Unreasonable Effectiveness of Data. [Halevy, Norvig, Pereira (2009)](https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/35179.pdf).\n1. ZooKeeper: wait-free coordination for internet scale systems. [Hunt et al (2010)](https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf).\n1. The Hadoop Distributed File System. [Shvachko et al (2010)](https://cse.buffalo.edu/~okennedy/courses/papers/hdfs.pdf).\n1. Thinking Clearly about Performance. [Millsap (2010)](https://queue.acm.org/detail.cfm?id=1854041).\n1. Kafka: a Distributed Messaging System for Log Processing. [Kreps, Narkhede, Rao (2011)](http://notes.stephenholiday.com/Kafka.pdf).\n1. Conflict-free Replicated Data Types. [Shapiro et al (2011)](https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf).\n1. **Programming Paradigms for Dummies: What Every Programmer Should Know. [Van Roy (2012)](https://webperso.info.ucl.ac.be/~pvr/VanRoyChapter.pdf).**\n1. CAP Twelve Years Later: How the \"Rules\" Have Changed. [Brewer (2012)](https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf).\n1. **Thinking Methodically about Performance. [Gregg (2012)](https://queue.acm.org/detail.cfm?id=2413037).**\n1. **A Few Useful Things to Know About Machine Learning. [Domingos (2012)](https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf).**\n1. ImageNet Classification with Deep Convolutional Neural Networks. [Krizhevsky, Sutskever, Hinton (2012)](https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf).\n1. Playing Atari with Deep Reinforcement Learning. [Mnih et al (2013)](https://arxiv.org/pdf/1312.5602.pdf).\n1. The Network is Reliable. [Bailis,  Kingsbury (2014)](https://queue.acm.org/detail.cfm?id=2655736).\n1. In Search of an Understandable Consensus Algorithm. [Ongaro, Ousterhout (2014)](https://raft.github.io/raft.pdf).\n1. IPFS - Content Addressed, Versioned, P2P File System. [Benet (2014)](https://raw.githubusercontent.com/ipfs/papers/master/ipfs-cap2pfs/ipfs-p2p-file-system.pdf).\n1. Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform. [Buterin (2014)](https://ethereum.org/content/whitepaper/whitepaper-pdf/Ethereum_Whitepaper_-_Buterin_2014.pdf).\n1. Generative Adversarial Nets. [Goodfellow et al (2014)](https://proceedings.neurips.cc/paper_files/paper/2014/file/5ca3e9b122f61f8f06494c97b1afccf3-Paper.pdf).\n1. Towards a Theory of Conceptual Design for Software. [Jackson (2015)](https://groups.csail.mit.edu/sdg/pubs/2015/concept-essay.pdf).\n1. Deep Learning. [LeCun, Bengio, Hinton (2015)](https://www.cs.toronto.edu/~hinton/absps/NatureDeepReview.pdf).\n1. Bringing the Web up to Speed with WebAssembly. [Haas (2017)](https://dl.acm.org/doi/pdf/10.1145/3062341.3062363).\n1. Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases. [Verbitski et al (2017)](https://pages.cs.wisc.edu/~yxy/cs764-f20/papers/aurora-sigmod-17.pdf).\n1. Attention Is All You Need. [Vaswani et al (2017)](https://arxiv.org/pdf/1706.03762.pdf).\n1. Local-First Software: You Own Your Data, in spite of the Cloud. [Kleppmann et al (2019)](https://www.inkandswitch.com/local-first/static/local-first.pdf).\n\n\n</details>\n\n## Sources\nThis list was inspired by (and draws from) several books and paper collections:\n\n* [Papers We Love](https://paperswelove.org/)\n* [Ideas That Created the Future](https://mitpress.mit.edu/books/ideas-created-future)\n* [The Innovators](https://www.simonandschuster.com/books/The-Innovators/Walter-Isaacson/9781476708706)\n* [The morning paper](https://blog.acolyer.org/)\n* [Distributed systems for fun and profit](http://book.mixu.net/distsys/index.html)\n* [Readings in Database Systems (the Red Book)](http://www.redbook.io/)\n* [Fermat's Library](https://fermatslibrary.com/journal_club)\n* [Classics in Human-Computer Interaction](https://medium.com/@aschugart/classics-in-hci-research-papers-critical-to-the-field-of-human-computer-interaction-1344039334a5)\n* [Awesome Compilers](https://github.com/aalhour/awesome-compilers#papers)\n* [Distributed Consensus Reading List](https://heidihoward.github.io/distributed-consensus-reading-list/)\n* [The Decade of Deep Learning](https://bmk.sh/2019/12/31/The-Decade-of-Deep-Learning/)\n\n## Meta reads\n\nA few interesting resources about reading papers from Papers We Love and elsewhere:\n\n- [Should I read papers?](https://michaelrbernste.in/2014/10/21/should-i-read-papers.html)\n- [How to Read an Academic Article](https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/)\n- How to Read a Paper. [Keshav (2007)](http://ccr.sigcomm.org/online/files/p83-keshavA.pdf).\n- Efficient Reading of Papers in Science and Technology. [Hanson (1999)](https://www.cs.columbia.edu/~hgs/netbib/efficientReading.pdf).\n- On ICSE’s “Most Influential Papers”. [Parnas (1995)](https://dl.acm.org/doi/pdf/10.1145/219308.219312).\n\n## Selection criteria\n\n1. The list should stay short. Let's say no more than 30 papers.\n   - The idea is not to include every interesting paper that I come across but rather to keep a representative list that's possible to read from start to finish with a similar level of effort as reading a technical book from cover to cover.\n   - I tried to include one paper per each major topic and author. Since in the process I found a lot of noteworthy alternatives, related or follow-up papers and I wanted to keep track of those as well, I included them as sublist items.\n2. The papers shouldn't be too long. For the same reasons as the previous item, I try to avoid papers longer than 20 or 30 pages.\n3. They should be self-contained and readable enough to be approachable by the casual technical reader.\n4. They should be freely available online.\n5. Although historical relevance was taken into account, I omitted seminal papers in the cases where I found them hard to approach, when the main subject of the paper wasn't the thing that made them influential, etc.\n   - Examples of this are classic works by Von Neumann, Turing and Shannon.\n   - That being said, where possible I preferred the original paper on each subject over modern updates or survey papers.\n6. I tended to prefer topics that I can relate to my professional practice, typically papers originated in the industry\nor about innovations that later saw wide adoption.\n   - Similarly, I tended to skip more theoretical papers, those focusing on mathematical foundations for Computer Science, electronic aspects of hardware, etc.\n7. I sorted the list by a mix of relatedness of topics and a vague chronological relevance, such that it makes sense to read it in the suggested order. For example, historical and seminal topics go first, contemporary internet-era developments last, networking precedes distributed systems, etc.\n   \n\n"
        },
        {
          "name": "README.md.template",
          "type": "blob",
          "size": 4.177734375,
          "content": "# Papers for Software Engineers [![workflow](https://github.com/facundoolano/software-papers/actions/workflows/tests.yml/badge.svg)](https://github.com/facundoolano/software-papers/actions/workflows/tests.yml)\n\nA curated list of papers that may be of interest to Software Engineering students or professionals.\nSee the [sources](#sources) and [selection criteria](#selection-criteria) below.\n\n<br/>\n\n<details open>\n<summary>List of papers by topic</summary>\n<br/>\n\n{{ PAPERS_FULL }}\n\n</details>\n\n<br/>\n\n<details>\n<summary>Top-level papers only</summary>\n<br/>\n\n{{ PAPERS_TOC }}\n\n</details>\n\n<br/>\n\n<details>\n<summary>All papers in chronological order </summary>\n<br/>\n\n{{ PAPERS_SORTED }}\n\n</details>\n\n## Sources\nThis list was inspired by (and draws from) several books and paper collections:\n\n* [Papers We Love](https://paperswelove.org/)\n* [Ideas That Created the Future](https://mitpress.mit.edu/books/ideas-created-future)\n* [The Innovators](https://www.simonandschuster.com/books/The-Innovators/Walter-Isaacson/9781476708706)\n* [The morning paper](https://blog.acolyer.org/)\n* [Distributed systems for fun and profit](http://book.mixu.net/distsys/index.html)\n* [Readings in Database Systems (the Red Book)](http://www.redbook.io/)\n* [Fermat's Library](https://fermatslibrary.com/journal_club)\n* [Classics in Human-Computer Interaction](https://medium.com/@aschugart/classics-in-hci-research-papers-critical-to-the-field-of-human-computer-interaction-1344039334a5)\n* [Awesome Compilers](https://github.com/aalhour/awesome-compilers#papers)\n* [Distributed Consensus Reading List](https://heidihoward.github.io/distributed-consensus-reading-list/)\n* [The Decade of Deep Learning](https://bmk.sh/2019/12/31/The-Decade-of-Deep-Learning/)\n\n## Meta reads\n\nA few interesting resources about reading papers from Papers We Love and elsewhere:\n\n- [Should I read papers?](https://michaelrbernste.in/2014/10/21/should-i-read-papers.html)\n- [How to Read an Academic Article](https://organizationsandmarkets.com/2010/08/31/how-to-read-an-academic-article/)\n- How to Read a Paper. [Keshav (2007)](http://ccr.sigcomm.org/online/files/p83-keshavA.pdf).\n- Efficient Reading of Papers in Science and Technology. [Hanson (1999)](https://www.cs.columbia.edu/~hgs/netbib/efficientReading.pdf).\n- On ICSE’s “Most Influential Papers”. [Parnas (1995)](https://dl.acm.org/doi/pdf/10.1145/219308.219312).\n\n## Selection criteria\n\n1. The list should stay short. Let's say no more than 30 papers.\n   - The idea is not to include every interesting paper that I come across but rather to keep a representative list that's possible to read from start to finish with a similar level of effort as reading a technical book from cover to cover.\n   - I tried to include one paper per each major topic and author. Since in the process I found a lot of noteworthy alternatives, related or follow-up papers and I wanted to keep track of those as well, I included them as sublist items.\n2. The papers shouldn't be too long. For the same reasons as the previous item, I try to avoid papers longer than 20 or 30 pages.\n3. They should be self-contained and readable enough to be approachable by the casual technical reader.\n4. They should be freely available online.\n5. Although historical relevance was taken into account, I omitted seminal papers in the cases where I found them hard to approach, when the main subject of the paper wasn't the thing that made them influential, etc.\n   - Examples of this are classic works by Von Neumann, Turing and Shannon.\n   - That being said, where possible I preferred the original paper on each subject over modern updates or survey papers.\n6. I tended to prefer topics that I can relate to my professional practice, typically papers originated in the industry\nor about innovations that later saw wide adoption.\n   - Similarly, I tended to skip more theoretical papers, those focusing on mathematical foundations for Computer Science, electronic aspects of hardware, etc.\n7. I sorted the list by a mix of relatedness of topics and a vague chronological relevance, such that it makes sense to read it in the suggested order. For example, historical and seminal topics go first, contemporary internet-era developments last, networking precedes distributed systems, etc.\n   \n"
        },
        {
          "name": "check_links.py",
          "type": "blob",
          "size": 1.3955078125,
          "content": "#!/usr/bin/env python3\n# checks that all links in the paper yaml are reachable\n# requires pip install pyyaml requests\n\n\nimport requests\nimport urllib3\nimport yaml\n\n# the parnas1972 paper is throwing cert errors and I can't find another link for it.\n# so requesting with verify=False and disabling warnings for now\nurllib3.disable_warnings()\n\n\nHEADERS = {'User-Agent': 'My User Agent 1.0'}\n\nwith open('papers.yml') as file_:\n    papers = yaml.safe_load(file_)\n\nfor paper in papers:\n    papers += paper.get('related', [])\n\n\nexit_code = 0\nfor paper in papers:\n    ref = paper['author'].replace(',', '').split(' ')[0] + str(paper['year'])\n    print(f'{ref}...', end='', flush=True)\n\n    if '.acm.org/' in paper['link']:\n        # the acm library (which has the majority of the paper links)\n        # is now denying requests without javascript enabled\n        # I'm skipping them since it's better to assume they work and check the rest\n        # than removing this script or trying to find alternative sources for all the papers\n        print('skipping ACM')\n        continue\n\n    response = requests.head(paper['link'], headers=HEADERS, verify=False)\n    if response.status_code == 405:\n        response = requests.get(paper['link'], headers=HEADERS, verify=False)\n    if response.ok:\n        print('ok')\n    else:\n        exit_code = 1\n        print(' ERROR')\n        print(f'    failed fetching {paper[\"link\"]}')\n\nexit(exit_code)\n"
        },
        {
          "name": "gen_readme.py",
          "type": "blob",
          "size": 1.94140625,
          "content": "#!/usr/bin/env python3\n# usage:\n# ./gen_readme.py > README.md\n#\n# requires pip install pyyaml\n\nimport yaml\n\n\ndef load_papers():\n    def markdown(paper, bold=False):\n        entry = f'{paper[\"title\"]}. [{paper[\"author\"]} ({paper[\"year\"]})]({paper[\"link\"]}).'\n        if bold:\n            entry = f'**{entry}**'\n\n        entry += '\\n'\n\n        # if the title ends with ? don't append a period\n        return entry.replace('?.', '?')\n\n    with open('papers.yml') as file_:\n        papers = yaml.safe_load(file_)\n\n    for paper in papers:\n        paper['markdown'] = markdown(paper, bold=True)\n        for related in paper.setdefault('related', []):\n            related['markdown'] = markdown(related, bold=False)\n\n        paper['related'].sort(key=lambda p: p['year'])\n\n    return papers\n\n\ndef render_readme(papers):\n    with open('README.md.template') as template:\n        readme = template.read()\n\n    # Full nested list\n    papers_full = ''\n    for paper in papers:\n        papers_full += '1. ' + paper['markdown']\n        papers_full += '    \\\\\\n'\n        topics = '; '.join(paper['topics'])\n        papers_full += f\"    <sub>{topics}</sub>\\n\"\n        for related in paper['related']:\n            papers_full += '    * ' + related['markdown']\n        papers_full += '\\n'\n    readme = readme.replace('{{ PAPERS_FULL }}', papers_full)\n\n    # top-level only\n    papers_top = ''\n    for paper in papers:\n        papers_top += '1. ' + paper['markdown']\n    readme = readme.replace('{{ PAPERS_TOC }}', papers_top)\n\n    # chronological flat list\n    all_papers = []\n    for paper in papers:\n        all_papers.append(paper)\n        all_papers += paper['related']\n\n    papers_sorted = ''\n    for paper in sorted(all_papers, key=lambda p: p['year']):\n        papers_sorted += '1. ' + paper['markdown']\n    readme = readme.replace('{{ PAPERS_SORTED }}', papers_sorted)\n\n    return readme\n\n\nif __name__ == '__main__':\n    papers = load_papers()\n    output = render_readme(papers)\n    print(output)\n"
        },
        {
          "name": "papers.yml",
          "type": "blob",
          "size": 26.4453125,
          "content": "- title: Von Neumann's First Computer Program\n  author: Knuth\n  year: 1970\n  link: https://dl.acm.org/doi/pdf/10.1145/356580.356581\n  topics: [Computer History, Early Programming]\n  related:\n    - title: The Education of a Computer\n      author: Hopper\n      year: 1952\n      link: https://people.cs.umass.edu/~emery/classes/cmpsci691st/readings/PL/p243-hopper.pdf\n    - title: Programming Considered as a Human Activity\n      author: Dijkstra\n      year: 1965\n      link: https://www.cs.utexas.edu/~EWD/transcriptions/EWD01xx/EWD117.html\n    - title: Goto Statement Considered Harmful\n      author: Dijkstra\n      year: 1968\n      link: https://homepages.cwi.nl/~storm/teaching/reader/Dijkstra68.pdf\n    - title: Recursive Programming\n      author: Dijkstra\n      year: 1960\n      link: https://www.ics.uci.edu/~jajones/INF102-S18/readings/07_dijkstra.pdf\n    - title: Program development by stepwise refinement\n      author: Wirth\n      year: 1971\n      link: https://dl.acm.org/doi/pdf/10.1145/362575.362577\n    - title: The paradigms of programming\n      author: Floyd\n      year: 1979\n      link: https://dl.acm.org/doi/pdf/10.1145/1283920.1283934\n    - title: Computer Programming as an Art\n      author: Knuth\n      year: 1974\n      link: http://www.cs.bilkent.edu.tr/~canf/knuth1974.pdf\n    - title: Literate Programming\n      author: Knuth\n      year: 1984\n      link: http://www.literateprogramming.com/knuthweb.pdf\n    - title: The Humble Programmer\n      author: Dijkstra\n      year: 1972\n      link: http://rkka21.ru/docs/turing-award/ed1972e.pdf\n\n- title: Computing Machinery and Intelligence\n  author: Turing\n  year: 1950\n  link: https://www.csee.umbc.edu/courses/471/papers/turing.pdf\n  topics: [Early Artificial Intelligence]\n  related:\n    - title: ELIZA—a computer program for the study of natural language communication between man and machine\n      author: Weizenbaum\n      year: 1966\n      link: http://web.stanford.edu/class/cs124/p36-weizenabaum.pdf\n    - title: Some Moral and Technical Consequences of Automation\n      author: Wiener\n      year: 1960\n      link: https://nissenbaum.tech.cornell.edu/papers/Wiener.pdf\n    - title: Steps towards Artificial Intelligence\n      author: Minsky\n      year: 1960\n      link: http://worrydream.com/refs/Minsky%20-%20Steps%20Toward%20Artificial%20Intelligence.pdf\n    - title: A Theory of the Learnable\n      author: Valiant\n      year: 1984\n      link: https://people.mpi-inf.mpg.de/~mehlhorn/SeminarEvolvability/ValiantLearnable.pdf\n\n- title: A Method for the Construction of Minimum-Redundancy Codes\n  author: Huffman\n  year: 1952\n  link: http://compression.ru/download/articles/huff/huffman_1952_minimum-redundancy-codes.pdf\n  topics: [Information Theory]\n  related:\n    - title: Fifty Years of Shannon Theory\n      author: Verdú\n      year: 1998\n      link: https://monoskop.org/images/7/78/Verdu_Sergio_1998_Fifty_Years_of_Shannon_Theory.pdf\n    - title: A Universal Algorithm for Sequential Data Compression\n      author: Ziv, Lempel\n      year: 1977\n      link: https://courses.cs.duke.edu/spring03/cps296.5/papers/ziv_lempel_1977_universal_algorithm.pdf\n\n- title: Engineering a Sort Function\n  author: Bentley, McIlroy\n  year: 1993\n  link: https://cs.fit.edu/~pkc/classes/writing/samples/bentley93engineering.pdf\n  topics: [Data Structures, Algorithms]\n  related:\n    - title: Quicksort\n      author: Hoare\n      year: 1962\n      link: https://dl.acm.org/doi/pdf/10.5555/63445.C1104357\n    - title: \"Programming pearls: Algorithm design techniques\"\n      author: Bentley\n      year: 1984\n      link: https://dl.acm.org/doi/pdf/10.1145/358234.381162\n    - title: \"Programming pearls: The back of the envelope\"\n      author: Bentley\n      year: 1984\n      link: https://dl.acm.org/doi/pdf/10.1145/357994.381168\n    - title: On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem\n      author: Kruskal\n      year: 1956\n      link: https://www.ams.org/proc/1956-007-01/S0002-9939-1956-0078686-7/S0002-9939-1956-0078686-7.pdf\n    - title: A Note on Two Problems in Connexion with Graphs\n      author: Dijkstra\n      year: 1959\n      link: https://jmvidal.cse.sc.edu/library/dijkstra59a.pdf\n    - title: The Ubiquitous B-Tree\n      author: Comer\n      year: 1979\n      link: http://carlosproal.com/ir/papers/p121-comer.pdf\n    - title: Space/Time Trade-offs in Hash Coding with Allowable Errors\n      author: Bloom\n      year: 1970\n      link: https://dl.acm.org/doi/pdf/10.1145/362686.362692\n    - title: Making data structures persistent\n      author: Driscoll et al\n      year: 1986\n      link: https://dl.acm.org/doi/pdf/10.1145/12130.12142\n\n- title: A Design Methodology for Reliable Software Systems\n  author: Liskov\n  year: 1972\n  link: https://dl.acm.org/doi/pdf/10.1145/1479992.1480018\n  topics: [Software Design]\n  related:\n    - title: On the Criteria To Be Used in Decomposing Systems into Modules\n      author: Parnas\n      year: 1971\n      link: https://www.win.tue.nl/~wstomv/edu/2ip30/references/criteria_for_modularization.pdf\n    - title: Information Distribution Aspects of Design Methodology\n      author: Parnas\n      year: 1972\n      link: https://cseweb.ucsd.edu/~wgg/CSE218/Parnas-IFIP71-information-distribution.PDF\n    - title: Designing Software for Ease of Extension and Contraction\n      author: Parnas\n      year: 1979\n      link: https://courses.cs.washington.edu/courses/cse503/08wi/parnas-1979.pdf\n    - title: Programming as Theory Building\n      author: Naur\n      year: 1985\n      link: https://pages.cs.wisc.edu/~remzi/Naur.pdf\n    - title: Towards a Theory of Conceptual Design for Software\n      author: Jackson\n      year: 2015\n      link: https://groups.csail.mit.edu/sdg/pubs/2015/concept-essay.pdf\n    - title: Programming with Abstract Data Types\n      author: Liskov, Zilles\n      year: 1974\n      link: https://dl.acm.org/doi/pdf/10.1145/942572.807045\n\n- title: \"Programming Paradigms for Dummies: What Every Programmer Should Know\"\n  author: Van Roy\n  year: 2012\n  link: https://webperso.info.ucl.ac.be/~pvr/VanRoyChapter.pdf\n  topics: [Programming Paradigms]\n  related:\n    - title: On understanding types, data abstraction, and polymorphism\n      author: Cardelli, Wegner\n      year: 1985\n      link: https://dl.acm.org/doi/pdf/10.1145/6041.6042\n    - title: \"SELF: The Power of Simplicity\"\n      author: Ungar, Smith\n      year: 1991\n      link: https://people.eecs.berkeley.edu/~fateman/264/papers/selfpower.ps\n    - title: The Smalltalk-76 Programming System Design and Implementation\n      author: Ingalls\n      year: 1978\n      link: https://dl.acm.org/doi/pdf/10.1145/512760.512762\n    - title: A Theory of Type Polymorphism in Programming\n      author: Milner\n      year: 1978\n      link: https://homepages.inf.ed.ac.uk/wadler/papers/papers-we-love/milner-type-polymorphism.pdf\n    - title: Why Functional Programming Matters\n      author: Hughes\n      year: 1990\n      link: https://www.cs.utexas.edu/~shmat/courses/cs345/whyfp.pdf\n    - title: Can Programming Be Liberated from the von Neumann Style?\n      author: Backus\n      year: 1978\n      link: https://dl.acm.org/doi/pdf/10.1145/359576.359579\n    - title: The Semantic Elegance of Applicative Languages\n      author: Turner\n      year: 1981\n      link: http://nsl.com/misc/sasl/paraffins-turner.pdf\n    - title: Recursive Functions of Symbolic Expressions and Their Computation by Machine\n      author: McCarthy\n      year: 1960\n      link: http://jmc.stanford.edu/articles/recursive/recursive.pdf\n    - title: \"QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs\"\n      author: Claessen, Hughes\n      year: 2000\n      link: https://dl.acm.org/doi/pdf/10.1145/351240.351266\n    - title: The essence of functional programming\n      author: Wadler\n      year: 1992\n      link: https://dl.acm.org/doi/pdf/10.1145/143165.143169\n    - title: Church's Thesis and Functional Programming\n      author: Turner\n      year: 2006\n      link: https://kar.kent.ac.uk/88944/1/ctfp.pdf_nocoversheet\n    - title: The Semantics of Predicate Logic as a Programming Language\n      author: Van Emden, Kowalski\n      year: 1976\n      link: https://dl.acm.org/doi/pdf/10.1145/321978.321991\n\n- title: An Incremental Approach to Compiler Construction\n  author: Ghuloum\n  year: 2006\n  link: http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf\n  topics: [Language Design, Compilers]\n  related:\n    - title: \"Programming pearls: little languages\"\n      author: Bentley\n      year: 1986\n      link: https://dl.acm.org/doi/pdf/10.1145/6424.315691\n    - title: A Nanopass Framework for Compiler Education\n      author: Sarkar, Waddell, Dybvig\n      year: 2005\n      link: https://legacy.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf\n    - title: \"LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation\"\n      author: Lattner, Adve\n      year: 2004\n      link: https://llvm.org/pubs/2004-01-30-CGO-LLVM.pdf\n    - title: Bringing the Web up to Speed with WebAssembly\n      year: 2017\n      author: Haas\n      link: https://dl.acm.org/doi/pdf/10.1145/3062341.3062363\n    - title: A Brief History of Just-In-Time\n      author: Aycock\n      year: 2003\n      link: https://user.it.uu.se/~kostis/Teaching/KT2-04/jit_survey.pdf\n    - title: The Essence of Compiling with Continuations\n      author: Flanagan et al\n      year: 1993\n      link: https://dl.acm.org/doi/pdf/10.1145/173262.155113\n    - title: The Next 700 Programming Languages\n      author: Landin\n      year: 1966\n      link: https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf\n    - title: A Unified Theory of Garbage Collection\n      author: Bacon, Cheng, Rajan\n      year: 2004\n      link: https://courses.cs.washington.edu/courses/cse590p/05au/p50-bacon.pdf\n\n- title: \"No Silver Bullet: Essence and Accidents of Software Engineering\"\n  author: Brooks\n  year: 1987\n  link: http://worrydream.com/refs/Brooks-NoSilverBullet.pdf\n  topics: [Software Engineering, Project Management]\n  related:\n    - title: The Mythical Man Month\n      author: Brooks\n      year: 1975\n      link: https://www.cs.virginia.edu/~evans/greatworks/mythical.pdf\n    - title: How do committees invent?\n      author: Conway\n      year: 1968\n      link: https://www.melconway.com/Home/pdf/committees.pdf\n    - title: Managing the Development of Large Software Systems\n      author: Royce\n      year: 1970\n      link: https://www.praxisframework.org/files/royce1970.pdf\n    - title: The Cathedral and the Bazaar\n      author: Raymond\n      year: 1998\n      link: http://users.ece.utexas.edu/~perry/education/382v-s08/papers/raymond.pdf\n    - title: On Building Systems That Will Fail\n      author: Corbató\n      year: 1991\n      link: https://dl.acm.org/doi/pdf/10.1145/114669.114686\n    - title: Out of the Tar Pit\n      author: Moseley, Marks\n      year: 2006\n      link: http://curtclifton.net/papers/MoseleyMarks06a.pdf\n    - title: Software Aging\n      author: Parnas\n      year: 1994\n      link: https://dl.acm.org/doi/pdf/10.5555/257734.257788\n    - title: Laws of Software Evolution Revisited\n      author: Lehman\n      year: 1997\n      link: https://www.rose-hulman.edu/Class/csse/csse490/cs490-const-and-evol/LawsOfSoftwareEvolutionRevisited.pdf\n\n- title: Communicating sequential processes\n  author: Hoare\n  year: 1978\n  link: https://www.cs.cmu.edu/~crary/819-f09/Hoare78.pdf\n  topics: [Concurrency]\n  related:\n    - title: Solution Of a Problem in Concurrent Program Control\n      author: Dijkstra\n      year: 1965\n      link: https://dl.acm.org/doi/pdf/10.1145/365559.365617\n    - title: On the Duality of Operating System Structures\n      author: Lauer, Needham\n      year: 1978\n      link: https://dl.acm.org/doi/pdf/10.1145/850657.850658\n    - title: \"Monitors: An operating system structuring concept\"\n      author: Hoare\n      year: 1974\n      link: https://dl.acm.org/doi/pdf/10.1145/355620.361161\n    - title: Software Transactional Memory\n      author: Shavit, Touitou\n      year: 1997\n      link: https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou.pdf\n\n- title: The UNIX Time- Sharing System\n  author: Ritchie, Thompson\n  year: 1974\n  link: https://dsf.berkeley.edu/cs262/unix.pdf\n  topics: [Operating Systems]\n  related:\n    - title: The Structure of the \\\"THE\\\"-Multiprogramming System\n      author: Dijkstra\n      year: 1968\n      link: https://www.eecs.ucf.edu/~eurip/papers/dijkstra-the68.pdf\n    - title: The nucleus of a multiprogramming system\n      author: Hansen\n      year: 1970\n      link: http://www.brinch-hansen.net/papers/1970a.pdf\n    - title: An Experimental Time-Sharing System\n      author: Corbató, Merwin Daggett, Daley\n      year: 1962\n      link: http://larch-www.lcs.mit.edu:8001/~corbato/sjcc62/\n    - title: Reflections on Trusting Trust\n      author: Thompson\n      year: 1984\n      link: https://www.cs.cmu.edu/~rdriley/487/papers/Thompson_1984_ReflectionsonTrustingTrust.pdf\n    - title: The Design and Implementation of a Log-Structured File System\n      author: Rosenblum, Ousterhout\n      year: 1991\n      link: https://people.eecs.berkeley.edu/~brewer/cs262/LFS.pdf\n\n- title: A Relational Model of Data for Large Shared Data Banks\n  author: Codd\n  year: 1970\n  link: https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf\n  topics: [Databases]\n  related:\n    - title: Access Path Selection in a Relational Database Management System\n      author: Selinger et al\n      year: 1979\n      link: https://courses.cs.duke.edu/compsci516/cps216/spring03/papers/selinger-etal-1979.pdf\n    - title: Granularity of Locks and Degrees of Consistency in a Shared Data Base\n      author: Gray et al\n      year: 1975\n      link: https://www.cs.cmu.edu/~natassa/courses/15-721/papers/GrayLocks.pdf\n    - title: \"The Transaction Concept: Virtues and Limitations\"\n      author: Gray\n      year: 1981\n      link: https://jimgray.azurewebsites.net/papers/theTransactionConcept.pdf\n    - title: The design of POSTGRES\n      author: Stonebraker, Rowe\n      year: 1986\n      link: https://dl.acm.org/doi/pdf/10.1145/16856.16888\n    - title: Rules of Thumb in Data Engineering\n      author: Gray, Shenay\n      year: 1999\n      link: http://research.microsoft.com/en-us/um/people/gray/papers/ms_tr_99_100_rules_of_thumb_in_data_engineering.pdf\n\n- title: A Protocol for Packet Network Intercommunication\n  author: Cerf, Kahn\n  year: 1974\n  link: https://www.cs.princeton.edu/courses/archive/fall06/cos561/papers/cerf74.pdf\n  topics: [Networking]\n  related:\n    - title: The Design Philosophy of the DARPA Internet Protocols\n      author: Clark\n      year: 1988\n      link: http://ccr.sigcomm.org/archive/1995/jan95/ccr-9501-clark.pdf\n    - title: \"Ethernet: Distributed packet switching for local computer networks\"\n      author: Metcalfe, Boggs\n      year: 1978\n      link: https://dl.acm.org/doi/pdf/10.1145/360248.360253\n    - title: End-To-End Arguments in System Design\n      author: Saltzer, Reed, Clark\n      year: 1984\n      link: https://groups.csail.mit.edu/ana/Publications/PubPDFs/End-to-End%20Arguments%20in%20System%20Design.pdf\n    - title: An algorithm for distributed computation of a Spanning Tree in an Extended LAN\n      author: Perlman\n      year: 1985\n      link: https://dl.acm.org/doi/pdf/10.1145/319056.319004\n    - title: \"TOR: The second generation onion router\"\n      author: Dingledine et al\n      year: 2004\n      link: https://svn-archive.torproject.org/svn/projects/design-paper/tor-design.pdf\n    - title: Why the Internet only just works\n      author: Handley\n      year: 2006\n      link: http://www0.cs.ucl.ac.uk/staff/m.handley/papers/only-just-works.pdf\n    - title: The Network is Reliable\n      author: Bailis,  Kingsbury\n      year: 2014\n      link: https://queue.acm.org/detail.cfm?id=2655736\n\n- title: New Directions in Cryptography\n  author: Diffie, Hellman\n  year: 1976\n  link: https://ee.stanford.edu/~hellman/publications/24.pdf\n  topics: [Cryptography]\n  related:\n    - title: A Method for Obtaining Digital Signatures and Public-Key Cryptosystems\n      author: Rivest, Shamir, Adleman\n      year: 1978\n      link: https://dl.acm.org/doi/pdf/10.1145/359340.359342\n    - title: How To Share A Secret\n      author: Shamir\n      year: 1979\n      link: https://web.mit.edu/6.857/OldStuff/Fall03/ref/Shamir-HowToShareASecret.pdf\n    - title: A Digital Signature Based on a Conventional Encryption Function\n      author: Merkle\n      year: 1987\n      link: https://people.eecs.berkeley.edu/~raluca/cs261-f15/readings/merkle.pdf\n    - title: The Salsa20 family of stream ciphers\n      author: Bernstein\n      year: 2007\n      link: https://cr.yp.to/snuffle/salsafamily-20071225.pdf\n\n- title: Time, Clocks, and the Ordering of Events in a Distributed System\n  author: Lamport\n  year: 1978\n  link: https://lamport.azurewebsites.net/pubs/time-clocks.pdf\n  topics: [Distributed Systems]\n  related:\n    - title: The Byzantine Generals Problem\n      author: Lamport, Shostak, Pease\n      year: 1982\n      link: https://lamport.azurewebsites.net/pubs/byz.pdf\n    - title: Impossibility of Distributed Consensus With One Faulty Process\n      author: Fisher, Lynch, Patterson\n      year: 1985\n      link: https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf\n    - title: Self-stabilizing systems in spite of distributed control\n      author: Dijkstra\n      year: 1974\n      link: https://dl.acm.org/doi/pdf/10.1145/361179.361202\n    - title: Paxos made simple\n      author: Lamport\n      year: 2001\n      link: https://lamport.azurewebsites.net/pubs/paxos-simple.pdf\n    - title: \"Paxos made live - An Engineering Perspective\"\n      author: Chandra, Griesemer, Redstone\n      year: 2007\n      link: https://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/papers/paper2-1.pdf\n    - title: In Search of an Understandable Consensus Algorithm\n      author: Ongaro, Ousterhout\n      year: 2014\n      link: https://raft.github.io/raft.pdf\n    - title: \"Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial\"\n      author: Schneider\n      year: 1990\n      link: https://www.cs.cornell.edu/fbs/publications/SMSurvey.pdf\n    - title: Practical Byzantine Fault Tolerance\n      author: Castro, Liskov\n      year: 1999\n      link: https://pmg.csail.mit.edu/papers/osdi99.pdf\n\n- title: \"Designing for Usability: Key Principles and What Designers Think\"\n  author: Gould, Lewis\n  year: 1985\n  link: https://dl.acm.org/doi/pdf/10.1145/3166.3170\n  topics: [Human-Computer Interaction, User Interfaces]\n  related:\n    - title: As We May Think\n      author: Bush\n      year: 1945\n      link: https://web.mit.edu/STS.035/www/PDFs/think.pdf\n    - title: Man-Computer symbiosis\n      author: Licklider\n      year: 1958\n      link: http://worrydream.com/refs/Licklider%20-%20Man-Computer%20Symbiosis.pdf\n    - title: Some Thoughts About the Social Implications of Accessible Computing\n      author: David, Fano\n      year: 1965\n      link: https://dl.acm.org/doi/pdf/10.1145/1463891.1463917\n    - title: Tutorials for the First-Time Computer User\n      author: Al-Awar, Chapanis, Ford\n      year: 1981\n      link: https://drive.google.com/file/d/1zA4LkSHoanjjhOVCwYzrkdkdzgPbKWJ9/view?usp=sharing\n    - title: \"The star user interface: an overview\"\n      author: Smith, Irby, Kimball\n      year: 1982\n      link: https://www.tech-insider.org/star/research/acrobat/8206.pdf\n    - title: Design Principles for Human-Computer Interfaces\n      author: Norman\n      year: 1983\n      link: https://dl.acm.org/doi/pdf/10.1145/800045.801571\n    - title: \"Human-Computer Interaction: Psychology as a Science of Design\"\n      author: Carroll\n      year: 1997\n      link: https://home.cs.colorado.edu/~martin/Csci6402/Papers/carroll97.pdf\n\n- title: The anatomy of a large-scale hypertextual Web search engine\n  author: Brin, Page\n  year: 1998\n  link: https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/334.pdf\n  topics: [Information Retrieval, World-Wide Web]\n  related:\n    - title: A Statistical Interpretation of Term Specificity in Retrieval\n      author: Spärck Jones\n      year: 1972\n      link: http://openlib.org/home/krichel/courses/lis618/readings/spaerk-jones72.pdf\n    - title: \"The PageRank Citation Ranking: Bringing Order to the Web\"\n      author: Page, Brin, Motwani\n      year: 1998\n      link: https://www.cis.upenn.edu/~mkearns/teaching/NetworkedLife/pagerank.pdf\n    - title: \"World-Wide Web: Information Universe\"\n      author: Berners-Lee et al\n      year: 1992\n      link: https://www.w3.org/History/1992/ENRAP/Article_9202.pdf\n\n- title: Dynamo, Amazon’s Highly Available Key-value store\n  author: DeCandia et al\n  year: 2007\n  link: https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\n  topics: [Internet Scale Data Systems]\n  related:\n    - title: The Google File System\n      author: Ghemawat, Gobioff, Leung\n      year: 2003\n      link: https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/035fc972c796d33122033a0614bc94cff1527999.pdf\n    - title: \"MapReduce: Simplified Data Processing on Large Clusters\"\n      author: Dean, Ghemawat\n      year: 2004\n      link: https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/16cb30b4b92fd4989b8619a61752a2387c6dd474.pdf\n    - title: \"Bigtable: A Distributed Storage System for Structured Data\"\n      author: Chang et al\n      year: 2006\n      link: https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/68a74a85e1662fe02ff3967497f31fda7f32225c.pdf\n    - title: 'CAP Twelve Years Later: How the \"Rules\" Have Changed'\n      author: Brewer\n      year: 2012\n      link: https://sites.cs.ucsb.edu/~rich/class/cs293b-cloud/papers/brewer-cap.pdf\n    - title: \"Kafka: a Distributed Messaging System for Log Processing\"\n      author: Kreps, Narkhede, Rao\n      year: 2011\n      link: http://notes.stephenholiday.com/Kafka.pdf\n    - title: \"ZooKeeper: wait-free coordination for internet scale systems\"\n      author: Hunt et al\n      year: 2010\n      link: https://www.usenix.org/legacy/event/atc10/tech/full_papers/Hunt.pdf\n    - title: The Hadoop Distributed File System\n      author: Shvachko et al\n      year: 2010\n      link: https://cse.buffalo.edu/~okennedy/courses/papers/hdfs.pdf\n    - title: \"Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases\"\n      author: Verbitski et al\n      year: 2017\n      link: https://pages.cs.wisc.edu/~yxy/cs764-f20/papers/aurora-sigmod-17.pdf\n\n- title: On Designing and Deploying Internet Scale Services\n  author: Hamilton\n  year: 2007\n  link: https://s3.amazonaws.com/systemsandpapers/papers/hamilton.pdf\n  topics: [Operations, Reliability, Fault-tolerance]\n  related:\n    - title: Ironies of Automation\n      author: Bainbridge\n      year: 1983\n      link: https://ckrybus.com/static/papers/Bainbridge_1983_Automatica.pdf\n    - title: Why do computers stop and what can be done about it?\n      author: Gray\n      year: 1985\n      link: https://jimgray.azurewebsites.net/papers/TandemTR85.7_WhyDoComputersStop.pdf\n    - title: \"Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies\"\n      author: Patterson et al\n      year: 2002\n      link: http://www2.eecs.berkeley.edu/Pubs/TechRpts/2002/CSD-02-1175.pdf\n    - title: Crash-Only Software\n      author: Candea, Fox\n      year: 2003\n      link: https://research.cs.wisc.edu/areas/os/ReadingGroup/os-old/Papers/HotOSIX/Candea-CrashOnlySoftware.pdf\n    - title: Building on Quicksand\n      author: Helland, Campbell\n      year: 2009\n      link: https://arxiv.org/ftp/arxiv/papers/0909/0909.1788.pdf\n\n- title: \"Thinking Methodically about Performance\"\n  author: Gregg\n  year: 2012\n  link: https://queue.acm.org/detail.cfm?id=2413037\n  topics: [Performance]\n  related:\n    - title: Thinking Clearly about Performance\n      author: Millsap\n      year: 2010\n      link: https://queue.acm.org/detail.cfm?id=1854041\n    - title: Performance Anti-Patterns\n      author: Smaalders\n      year: 2006\n      link: https://queue.acm.org/detail.cfm?id=1117403\n\n- title: Bitcoin, A peer-to-peer electronic cash system\n  author: Nakamoto\n  year: 2008\n  link: https://bitcoin.org/bitcoin.pdf\n  topics: [Decentralized Distributed Systems, Peer-to-peer systems]\n  related:\n    - title: \"Operational transformation in real-time group editors: issues, algorithms, and achievements\"\n      author: Sun, Ellis\n      year: 1998\n      link: https://dl.acm.org/doi/pdf/10.1145/289444.289469\n    - title: Conflict-free Replicated Data Types\n      author: Shapiro et al\n      year: 2011\n      link: https://pages.lip6.fr/Marc.Shapiro/papers/RR-7687.pdf\n    - title: \"Incentives Build Robustness in BitTorrent\"\n      author: Cohen\n      link: https://www.bittorrent.org/bittorrentecon.pdf\n      year: 2003\n    - title: \"IPFS - Content Addressed, Versioned, P2P File System\"\n      year: 2014\n      author: Benet\n      link: https://raw.githubusercontent.com/ipfs/papers/master/ipfs-cap2pfs/ipfs-p2p-file-system.pdf\n    - title: \"Kademlia: A Peer-to-Peer Information System Based on the XOR Metric\"\n      link: https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf\n      year: 2002\n      author: Maymounkov, Mazières\n    - title: \"Local-First Software: You Own Your Data, in spite of the Cloud\"\n      year: 2019\n      author: Kleppmann et al\n      link: https://www.inkandswitch.com/local-first/static/local-first.pdf\n    - title: \"Ethereum: A Next-Generation Smart Contract and Decentralized Application Platform\"\n      author: Buterin\n      year: 2014\n      link: https://ethereum.org/content/whitepaper/whitepaper-pdf/Ethereum_Whitepaper_-_Buterin_2014.pdf\n\n- title: A Few Useful Things to Know About Machine Learning\n  author: Domingos\n  year: 2012\n  link: https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf\n  topics: [Machine Learning]\n  related:\n    - title: Deep Learning\n      author: LeCun, Bengio, Hinton\n      year: 2015\n      link: https://www.cs.toronto.edu/~hinton/absps/NatureDeepReview.pdf\n    - title: \"Statistical Modeling: The Two Cultures\"\n      author: Breiman\n      year: 2001\n      # link: http://www2.math.uu.se/~thulin/mm/breiman.pdf\n      link: https://projecteuclid.org/journalArticle/Download?urlId=10.1214%2Fss%2F1009213726\n    - title: The Unreasonable Effectiveness of Data\n      author: Halevy, Norvig, Pereira\n      year: 2009\n      link: https://storage.googleapis.com/gweb-research2023-media/pubtools/pdf/35179.pdf\n    - title: Attention Is All You Need\n      author: Vaswani et al\n      year: 2017\n      link: https://arxiv.org/pdf/1706.03762.pdf\n    - title: Generative Adversarial Nets\n      author: Goodfellow et al\n      year: 2014\n      link: https://proceedings.neurips.cc/paper_files/paper/2014/file/5ca3e9b122f61f8f06494c97b1afccf3-Paper.pdf\n    - title: ImageNet Classification with Deep Convolutional Neural Networks\n      author: Krizhevsky, Sutskever, Hinton\n      year: 2012\n      link: https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf\n    - title: Playing Atari with Deep Reinforcement Learning\n      author: Mnih et al\n      year: 2013\n      link: https://arxiv.org/pdf/1312.5602.pdf\n"
        }
      ]
    }
  ]
}