{
  "metadata": {
    "timestamp": 1736560639531,
    "page": 274,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spesmilo/electrum",
      "stars": 7651,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 11.1494140625,
          "content": "task:\n  container:\n    image: $ELECTRUM_IMAGE\n    cpu: 1\n    memory: 2G\n  matrix:\n    - name: \"unittests: Tox Python $ELECTRUM_PYTHON_VERSION\"\n      env:\n        ELECTRUM_IMAGE: python:$ELECTRUM_PYTHON_VERSION\n        TOXENV: py3\n        ELECTRUM_PYTHON_NAME: python3\n      matrix:\n       - env:\n           ELECTRUM_PYTHON_VERSION: 3.9\n       - env:\n           ELECTRUM_PYTHON_VERSION: 3.10\n       - env:\n           ELECTRUM_PYTHON_VERSION: 3.11\n       - env:\n           ELECTRUM_PYTHON_VERSION: 3.12\n       - env:\n           ELECTRUM_PYTHON_VERSION: 3.13\n       - name: \"unittests: Tox Python 3 debug mode\"\n         env:\n           ELECTRUM_PYTHON_VERSION: 3.11\n           # enable additional checks:\n           PYTHONASYNCIODEBUG: \"1\"\n           PYTHONDEVMODE: \"1\"\n  pip_cache:\n    folder: ~/.cache/pip\n    fingerprint_script: echo $ELECTRUM_IMAGE && cat $ELECTRUM_REQUIREMENTS_CI && cat $ELECTRUM_REQUIREMENTS\n  version_script:\n    - $ELECTRUM_PYTHON_NAME --version\n  tag_script:\n    - git tag\n  install_script:\n    - apt-get update\n    # qml test reqs:\n    - apt-get -y install libgl1 libegl1 libxkbcommon0 libdbus-1-3\n    - pip install -r $ELECTRUM_REQUIREMENTS_CI\n  libsecp_build_cache:\n    folder: contrib/_saved_secp256k1_build\n    fingerprint_script: sha256sum ./contrib/make_libsecp256k1.sh\n    populate_script:\n      - apt-get -y install automake libtool\n      - ./contrib/make_libsecp256k1.sh\n      - mkdir contrib/_saved_secp256k1_build\n      - cp electrum/libsecp256k1.so.* contrib/_saved_secp256k1_build/\n  tox_script:\n    - export PYTHONASYNCIODEBUG\n    - export PYTHONDEVMODE\n    - export ELECTRUM_ECC_DONT_COMPILE=1\n    - tox\n  coveralls_script:\n    - if [ ! -z \"$COVERALLS_REPO_TOKEN\" ] ; then coveralls ; fi\n  env:\n    LD_LIBRARY_PATH: contrib/_saved_secp256k1_build/\n    ELECTRUM_REQUIREMENTS_CI: contrib/requirements/requirements-ci.txt\n    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements.txt\n    # following CI_* env vars are set up for coveralls\n    CI_NAME: \"CirrusCI\"\n    CI_BUILD_NUMBER: $CIRRUS_BUILD_ID\n    CI_JOB_ID: $CIRRUS_TASK_ID\n    CI_BUILD_URL: \"https://cirrus-ci.com/task/$CIRRUS_TASK_ID\"\n    CI_BRANCH: $CIRRUS_BRANCH\n    CI_PULL_REQUEST: $CIRRUS_PR\n    # in addition, COVERALLS_REPO_TOKEN is set as an \"override\" in https://cirrus-ci.com/settings/...\n  depends_on:\n    - \"linter: Flake8 Mandatory\"\n\ntask:\n  name: \"locale: upload to crowdin\"\n  container:\n    image: $ELECTRUM_IMAGE\n    cpu: 1\n    memory: 1G\n  pip_cache:\n    folder: ~/.cache/pip\n    fingerprint_script: echo Locale && echo $ELECTRUM_IMAGE && cat $ELECTRUM_REQUIREMENTS_CI\n  install_script:\n    - apt-get update\n    - apt-get -y install gettext qttools5-dev-tools\n    - pip install -r $ELECTRUM_REQUIREMENTS_CI\n    - pip install requests\n  locale_script:\n    - contrib/push_locale\n  env:\n    ELECTRUM_IMAGE: python:3.9\n    ELECTRUM_REQUIREMENTS_CI: contrib/requirements/requirements-ci.txt\n    # in addition, crowdin_api_key is set as an \"override\" in https://cirrus-ci.com/settings/...\n  depends_on:\n    - \"unittests: Tox Python 3.9\"\n  only_if: $CIRRUS_BRANCH == 'master'\n\ntask:\n  name: \"Regtest functional tests\"\n  compute_engine_instance:\n    image_project: cirrus-images\n    image: family/docker-builder\n    platform: linux\n    cpu: 1\n    memory: 1G\n  pip_cache:\n    folder: ~/.cache/pip\n    fingerprint_script: echo Regtest && echo docker_builder && cat $ELECTRUM_REQUIREMENTS\n  bitcoind_cache:\n    folder: /tmp/bitcoind\n    populate_script: mkdir -p /tmp/bitcoind\n  install_script:\n    - apt-get update\n    - apt-get -y install curl jq bc\n    # install electrum\n    - export ELECTRUM_ECC_DONT_COMPILE=1  # we build manually to make caching it easier\n    - pip3 install .[tests]\n    # install e-x some commits after 1.16.0 tag\n    - pip3 install git+https://github.com/spesmilo/electrumx.git@4e66804dc0d668cd6bd4602b547e2f5b2e227e97\n    - \"BITCOIND_VERSION=$(curl https://bitcoincore.org/en/download/ | grep -E -i --only-matching 'Latest version: [0-9\\\\.]+' | grep -E --only-matching '[0-9\\\\.]+')\"\n    - BITCOIND_FILENAME=bitcoin-$BITCOIND_VERSION-x86_64-linux-gnu.tar.gz\n    - BITCOIND_PATH=/tmp/bitcoind/$BITCOIND_FILENAME\n    - BITCOIND_URL=https://bitcoincore.org/bin/bitcoin-core-$BITCOIND_VERSION/$BITCOIND_FILENAME\n    - tar -xaf $BITCOIND_PATH || (rm -f /tmp/bitcoind/* && curl --output $BITCOIND_PATH $BITCOIND_URL && tar -xaf $BITCOIND_PATH)\n    - cp -a bitcoin-$BITCOIND_VERSION/* /usr/\n  libsecp_build_cache:\n    folder: contrib/_saved_secp256k1_build\n    fingerprint_script: sha256sum ./contrib/make_libsecp256k1.sh\n    populate_script:\n      - apt-get -y install automake libtool\n      - ./contrib/make_libsecp256k1.sh\n      - mkdir contrib/_saved_secp256k1_build\n      - cp electrum/libsecp256k1.so.* contrib/_saved_secp256k1_build/\n  bitcoind_service_background_script:\n    - tests/regtest/run_bitcoind.sh\n  electrumx_service_background_script:\n    - tests/regtest/run_electrumx.sh\n  regtest_script:\n    - sleep 10s\n    - python3 -m unittest tests/regtest.py\n  env:\n    LD_LIBRARY_PATH: contrib/_saved_secp256k1_build/\n    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements.txt\n    # ElectrumX exits with an error without this:\n    ALLOW_ROOT: 1\n  depends_on:\n    - \"linter: Flake8 Mandatory\"\n\ntask:\n  container:\n    image: $ELECTRUM_IMAGE\n    cpu: 1\n    memory: 1G\n  pip_cache:\n    folder: ~/.cache/pip\n    fingerprint_script: echo Flake8 && echo $ELECTRUM_IMAGE && cat $ELECTRUM_REQUIREMENTS\n  install_script:\n    - pip install \"flake8==7.0.0\" \"flake8-bugbear==24.1.16\"\n  flake8_script:\n    - flake8 . --count --select=\"$ELECTRUM_LINTERS\" --ignore=\"$ELECTRUM_LINTERS_IGNORE\" --show-source --statistics --exclude \"*_pb2.py,electrum/_vendor/\"\n  env:\n    ELECTRUM_IMAGE: python:3.9\n    ELECTRUM_REQUIREMENTS: contrib/requirements/requirements.txt\n  matrix:\n    - name: \"linter: Flake8 Mandatory\"\n      env:\n        # list of error codes:\n        # - https://flake8.pycqa.org/en/latest/user/error-codes.html\n        # - https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes\n        # - https://github.com/PyCQA/flake8-bugbear/tree/8c0e7eb04217494d48d0ab093bf5b31db0921989#list-of-warnings\n        ELECTRUM_LINTERS: E9,E101,E129,E273,E274,E703,E71,E722,F63,F7,F82,W191,W29,B\n        ELECTRUM_LINTERS_IGNORE: B007,B009,B010,B019,B036\n    - name: \"linter: Flake8 Non-Mandatory\"\n      env:\n        ELECTRUM_LINTERS: E,F,W,C90,B\n        ELECTRUM_LINTERS_IGNORE: \"\"\n      allow_failures: true\n\n\n# Cron jobs configured in https://cirrus-ci.com/settings/...\n# - job \"nightly\" on branch \"master\" at \"0 30 2 * * ?\"  (every day at 02:30Z)\ntask:\n  name: \"build: Windows\"\n  matrix:\n    - trigger_type: manual\n      only_if: $CIRRUS_CRON == \"\"\n    - trigger_type: automatic\n      only_if: $CIRRUS_CRON == \"nightly\"\n  container:\n    dockerfile: contrib/build-wine/Dockerfile\n    cpu: 1\n    memory: 3G\n  pip_cache:\n    folders:\n      - contrib/build-wine/.cache/win*/wine_pip_cache\n    fingerprint_script:\n      - echo $CIRRUS_TASK_NAME\n      - git ls-files -s contrib/deterministic-build/*.txt\n      - git ls-files -s contrib/build-wine/\n  build2_cache:\n    folders:\n      - contrib/build-wine/.cache/win*/build\n    fingerprint_script:\n      - echo $CIRRUS_TASK_NAME\n      - cat contrib/make_libsecp256k1.sh | sha256sum\n      - cat contrib/make_libusb.sh | sha256sum\n      - cat contrib/make_zbar.sh | sha256sum\n      - git ls-files -s contrib/build-wine/\n  build_script:\n    - cd contrib/build-wine\n    - ./make_win.sh\n  binaries_artifacts:\n    path: \"contrib/build-wine/dist/*\"\n  env:\n    CIRRUS_WORKING_DIR: /opt/wine64/drive_c/electrum\n    CIRRUS_DOCKER_CONTEXT: contrib/build-wine\n  depends_on:\n    - \"unittests: Tox Python 3.9\"\n\ntask:\n  name: \"build: Android (QML $APK_ARCH)\"\n  matrix:\n    - trigger_type: manual\n      only_if: $CIRRUS_CRON == \"\"\n    - trigger_type: automatic\n      only_if: $CIRRUS_CRON == \"nightly\"\n  timeout_in: 90m\n  container:\n    dockerfile: contrib/android/Dockerfile\n    cpu: 8\n    memory: 24G\n  env:\n    APK_ARCH: arm64-v8a\n  packages_tld_folder_cache:\n    folder: packages\n    fingerprint_script:\n      - echo $CIRRUS_TASK_NAME && cat contrib/deterministic-build/requirements.txt && cat contrib/make_packages.sh\n      - git ls-files -s contrib/android/\n  p4a_cache:\n    folders:\n      - \".buildozer/android/platform/build-$APK_ARCH/packages\"\n      - \".buildozer/android/platform/build-$APK_ARCH/build\"\n    fingerprint_script:\n      # note: should *at least* depend on Dockerfile and p4a_recipes/, but contrib/android/ is simplest\n      - git ls-files -s contrib/android/\n      - echo \"qml $APK_ARCH\"\n  build_script:\n    - ./contrib/android/make_apk.sh qml \"$APK_ARCH\" debug\n  binaries_artifacts:\n    path: \"dist/*\"\n  depends_on:\n    - \"unittests: Tox Python 3.9\"\n\n## mac build disabled, as Cirrus CI no longer supports Intel-based mac builds\n#task:\n#  name: \"build: macOS\"\n#  macos_instance:\n#    image: catalina-xcode-11.3.1\n#  env:\n#    TARGET_OS: macOS\n#  pip_cache:\n#    folder: ~/Library/Caches/pip\n#    fingerprint_script:\n#      - echo $CIRRUS_TASK_NAME\n#      - git ls-files -s contrib/deterministic-build/*.txt\n#      - git ls-files -s contrib/osx/\n#  build2_cache:\n#    folder: contrib/osx/.cache\n#    fingerprint_script:\n#      - echo $CIRRUS_TASK_NAME\n#      - cat contrib/make_libsecp256k1.sh | shasum -a 256\n#      - cat contrib/make_libusb.sh | shasum -a 256\n#      - cat contrib/make_zbar.sh | shasum -a 256\n#      - git ls-files -s contrib/osx/\n#  install_script:\n#    - git fetch --all --tags\n#  build_script:\n#    - ./contrib/osx/make_osx.sh\n#  sum_script:\n#    - ls -lah dist\n#    - shasum -a 256 dist/*.dmg\n#  binaries_artifacts:\n#    path: \"dist/*\"\n\ntask:\n  name: \"build: AppImage\"\n  matrix:\n    - trigger_type: manual\n      only_if: $CIRRUS_CRON == \"\"\n    - trigger_type: automatic\n      only_if: $CIRRUS_CRON == \"nightly\"\n  container:\n    dockerfile: contrib/build-linux/appimage/Dockerfile\n    cpu: 2\n    memory: 2G\n  pip_cache:\n    folder: contrib/build-linux/appimage/.cache/pip_cache\n    fingerprint_script:\n      - echo $CIRRUS_TASK_NAME\n      - git ls-files -s contrib/deterministic-build/*.txt\n      - git ls-files -s contrib/build-linux/appimage/\n  build2_cache:\n    folder: contrib/build-linux/appimage/.cache/appimage\n    fingerprint_script:\n      - echo $CIRRUS_TASK_NAME\n      - cat contrib/make_libsecp256k1.sh | sha256sum\n      - git ls-files -s contrib/build-linux/appimage/\n  build_script:\n    - ./contrib/build-linux/appimage/make_appimage.sh\n  binaries_artifacts:\n    path: \"dist/*\"\n  env:\n    CIRRUS_DOCKER_CONTEXT: contrib/build-linux/appimage\n  depends_on:\n    - \"unittests: Tox Python 3.9\"\n\ntask:\n  container:\n    dockerfile: contrib/build-linux/sdist/Dockerfile\n    cpu: 1\n    memory: 1G\n  pip_cache:\n    folder: ~/.cache/pip\n    fingerprint_script:\n      - echo $CIRRUS_TASK_NAME\n      - git ls-files -s contrib/deterministic-build/*.txt\n      - git ls-files -s contrib/build-linux/sdist/\n  build_script:\n    - ./contrib/build-linux/sdist/make_sdist.sh\n  binaries_artifacts:\n    path: \"dist/*\"\n  matrix:\n    - name: \"build: tarball\"\n    - name: \"build: source-only tarball\"\n      env:\n        OMIT_UNCLEAN_FILES: 1\n  depends_on:\n    - \"unittests: Tox Python 3.9\"\n\ntask:\n  name: \"check submodules\"\n  container:\n    image: python:3.9\n    cpu: 1\n    memory: 1G\n  fetch_script:\n    - git fetch --all --tags\n  check_script:\n    - ./contrib/deterministic-build/check_submodules.sh\n  only_if: $CIRRUS_TAG != ''\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".gitignore"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2333984375,
          "content": "# see https://EditorConfig.org\n\nroot = true\n\n[*]\nindent_style = space\ntrim_trailing_whitespace = true\nend_of_line = lf\ncharset = utf-8\n\n[*.py]\nindent_size = 4\ninsert_final_newline = true\n\n[*.sh]\nindent_size = 4\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.306640625,
          "content": "# Auto detect text files and perform end-of-line normalization (to LF)\n*        text=auto\n\n# These Windows files should have CRLF line endings in checkout\n*.bat    text eol=crlf\n*.ps1    text eol=crlf\n\n# Never perform LF normalization on these files\n*.ico    binary\n*.jar    binary\n*.png    binary\n*.zip    binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7841796875,
          "content": ".git/\n####-*.patch\n**/*.pyc\n*.swp\nbuild/\ndist/\n*.egg/\nElectrum.egg-info/\nelectrum/locale/\n.devlocaltmp/\n*_trial_temp\npackages\nenv/\n.buildozer\n.buildozer_*/\nbin/\n/app.fil\n.idea\n.mypy_cache\n.vscode\nelectrum_data\n.DS_Store\ncontrib/trigger_website\ncontrib/trigger_binaries\n\n# tests/tox\n.tox/\n.cache/\n.coverage\n.pytest_cache\n\n# build workspaces\ncontrib/build-wine/tmp/\ncontrib/build-wine/build/\ncontrib/build-wine/.cache/\ncontrib/build-wine/dist/\ncontrib/build-wine/signed/\ncontrib/build-linux/appimage/build/\ncontrib/build-linux/appimage/.cache/\ncontrib/osx/.cache/\ncontrib/osx/build-venv/\ncontrib/android/android_debug.keystore\ncontrib/secp256k1/\ncontrib/zbar/\ncontrib/libusb/\ncontrib/.venv_make_packages/\n\n# shared objects\nelectrum/*.so\nelectrum/*.so.*\nelectrum/*.dll\nelectrum/*.dylib\ncontrib/osx/*.dylib\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2734375,
          "content": "[submodule \"contrib/deterministic-build/electrum-locale\"]\n\tpath = contrib/deterministic-build/electrum-locale\n\turl = https://github.com/spesmilo/electrum-locale\n[submodule \"electrum/www\"]\n\tpath = electrum/plugins/payserver/www\n\turl = https://github.com/spesmilo/electrum-http.git\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.541015625,
          "content": "ThomasV - Creator and maintainer.\nAnimazing / Tachikoma - Styled the new GUI. Mac version.\nAzelphur - GUI stuff.\nCoblee - Alternate coin support and py2app support.\nDeafboy - Ubuntu packages.\nSoren Stoutner - Debian packages and some Qt GUI layout.\nEagleTM - Bugfixes.\nErebusBat - Mac distribution.\nGenjix - Porting pro-mode functionality to lite-gui and worked on server\nSlush - Work on the server. Designed the original Stratum spec.\nJulian Toash (Tuxavant) - Various fixes to the client.\nrdymac - Website and translations.\nkyuupichan - Miscellaneous.\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 1.1083984375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2011-2024 The Electrum developers\nCopyright (c) 2011-2024 Thomas Voegtlin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.8173828125,
          "content": "include LICENCE RELEASE-NOTES AUTHORS\ninclude README.md\ninclude electrum.desktop\ninclude *.py\ninclude run_electrum\ninclude org.electrum.electrum.metainfo.xml\nrecursive-include packages *.py\nrecursive-include packages cacert.pem\n\ninclude contrib/requirements/requirements*.txt\ninclude contrib/deterministic-build/requirements*.txt\ninclude contrib/*.sh\n\ngraft electrum\ngraft tests\ngraft contrib/udev\n\nexclude electrum/*.so\nexclude electrum/*.so.0\nexclude electrum/*.dll\nexclude electrum/*.dylib\n\nglobal-exclude __pycache__\nglobal-exclude *.py[co~]\nglobal-exclude *.py.orig\nglobal-exclude *.py.rej\nglobal-exclude .git\n\n# Maybe we should exclude the compiled locale files? see https://askubuntu.com/a/144139\n# We include both source (.po) and compiled (.mo) locale files atm (if present).\n# exclude electrum/locale/*/LC_MESSAGES/electrum.mo\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.484375,
          "content": "# Electrum - Lightweight Bitcoin client\n\n```\nLicence: MIT Licence\nAuthor: Thomas Voegtlin\nLanguage: Python (>= 3.8)\nHomepage: https://electrum.org/\n```\n\n[![Build Status](https://api.cirrus-ci.com/github/spesmilo/electrum.svg?branch=master)](https://cirrus-ci.com/github/spesmilo/electrum)\n[![Test coverage statistics](https://coveralls.io/repos/github/spesmilo/electrum/badge.svg?branch=master)](https://coveralls.io/github/spesmilo/electrum?branch=master)\n[![Help translate Electrum online](https://d322cqt584bo4o.cloudfront.net/electrum/localized.svg)](https://crowdin.com/project/electrum)\n\n\n## Getting started\n\n_(If you've come here looking to simply run Electrum,\n[you may download it here](https://electrum.org/#download).)_\n\nElectrum itself is pure Python, and so are most of the required dependencies,\nbut not everything. The following sections describe how to run from source, but here\nis a TL;DR:\n\n```\n$ sudo apt-get install libsecp256k1-dev\n$ ELECTRUM_ECC_DONT_COMPILE=1 python3 -m pip install --user \".[gui,crypto]\"\n```\n\n### Not pure-python dependencies\n\n#### Qt GUI\n\nIf you want to use the Qt interface, install the Qt dependencies:\n```\n$ sudo apt-get install python3-pyqt6\n```\n\n#### libsecp256k1\n\nFor elliptic curve operations,\n[libsecp256k1](https://github.com/bitcoin-core/secp256k1)\nis a required dependency.\n\nIf you \"pip install\" Electrum, by default libsecp will get compiled locally,\nas part of the `electrum-ecc` dependency. This can be opted-out of,\nby setting the `ELECTRUM_ECC_DONT_COMPILE=1` environment variable.\nFor the compilation to work, besides a C compiler, you need at least:\n```\n$ sudo apt-get install automake libtool\n```\nIf you opt out of the compilation, you need to provide libsecp in another way, e.g.:\n```\n$ sudo apt-get install libsecp256k1-dev\n```\n\n#### cryptography\n\nDue to the need for fast symmetric ciphers,\n[cryptography](https://github.com/pyca/cryptography) is required.\nInstall from your package manager (or from pip):\n```\n$ sudo apt-get install python3-cryptography\n```\n\n#### hardware-wallet support\n\nIf you would like hardware wallet support,\n[see this](https://github.com/spesmilo/electrum-docs/blob/master/hardware-linux.rst).\n\n\n### Running from tar.gz\n\nIf you downloaded the official package (tar.gz), you can run\nElectrum from its root directory without installing it on your\nsystem; all the pure python dependencies are included in the 'packages'\ndirectory. To run Electrum from its root directory, just do:\n```\n$ ./run_electrum\n```\n\nYou can also install Electrum on your system, by running this command:\n```\n$ sudo apt-get install python3-setuptools python3-pip\n$ python3 -m pip install --user .\n```\n\nThis will download and install the Python dependencies used by\nElectrum instead of using the 'packages' directory.\nIt will also place an executable named `electrum` in `~/.local/bin`,\nso make sure that is on your `PATH` variable.\n\n\n### Development version (git clone)\n\n_(For OS-specific instructions, see [here for Windows](contrib/build-wine/README_windows.md),\nand [for macOS](contrib/osx/README_macos.md))_\n\nCheck out the code from GitHub:\n```\n$ git clone https://github.com/spesmilo/electrum.git\n$ cd electrum\n$ git submodule update --init\n```\n\nRun install (this should install dependencies):\n```\n$ python3 -m pip install --user -e .\n```\n\nCreate translations (optional):\n```\n$ sudo apt-get install python3-requests gettext qttools5-dev-tools\n$ ./contrib/pull_locale\n```\n\nFinally, to start Electrum:\n```\n$ ./run_electrum\n```\n\n### Run tests\n\nRun unit tests with `pytest`:\n```\n$ pytest tests -v\n```\n\nTo run a single file, specify it directly like this:\n```\n$ pytest tests/test_bitcoin.py -v\n```\n\n## Creating Binaries\n\n- [Linux (tarball)](contrib/build-linux/sdist/README.md)\n- [Linux (AppImage)](contrib/build-linux/appimage/README.md)\n- [macOS](contrib/osx/README.md)\n- [Windows](contrib/build-wine/README.md)\n- [Android](contrib/android/Readme.md)\n\n\n## Contributing\n\nAny help testing the software, reporting or fixing bugs, reviewing pull requests\nand recent changes, writing tests, or helping with outstanding issues is very welcome.\nImplementing new features, or improving/refactoring the codebase, is of course\nalso welcome, but to avoid wasted effort, especially for larger changes,\nwe encourage discussing these on the issue tracker or IRC first.\n\nBesides [GitHub](https://github.com/spesmilo/electrum),\nmost communication about Electrum development happens on IRC, in the\n`#electrum` channel on Libera Chat. The easiest way to participate on IRC is\nwith the web client, [web.libera.chat](https://web.libera.chat/#electrum).\n"
        },
        {
          "name": "RELEASE-NOTES",
          "type": "blob",
          "size": 96.466796875,
          "content": "# Release 4.5.8 (Oct 23, 2024)\n * Qt Desktop GUI:\n   - fix: regression: bump_fee and dscancel dialogs erroring (#9273)\n\n\n# Release 4.5.7 (Oct 21, 2024)\n * General:\n   - new: add new historical exchange rate providers: Bitfinex and Bitstamp\n   - fix: wizard regression: 2fa wallet setup erroring (#9253)\n   - fix: python 3.13 compat: could not connect to some self-signed electrum\n     servers with weird TLS certs. As workaround, set pre-3.13 behaviour (#9258)\n * Lightning:\n   - fix: send update_fee right away after channel_reestablish (3a465593)\n     This fixes a race that can result in a force-closure if we try sending\n     a payment very soon after reestablishing the channel.\n * Qt Desktop GUI:\n   - fix: show fee warnings also in the transaction dialog (c4fe2796)\n\n\n# Release 4.5.6 (Oct 16, 2024)\n * General:\n   - new: add support for testnet4 (#9197)\n   - fix: wizard: allow passphrase for some '2fa' seeds (#9088)\n   - fix: trustedcoin wallet wizard continuation if file has keystore-only encryption (#9237)\n   - fix: trustedcoin: sanitize error messages coming from 2fa server\n   - fix: new wizard did not set keystore password if storage was not encrypted (#9147)\n   - changed: set stricter UNIX permissions for log files (fa8595b1)\n * QML GUI (Android):\n   - new: show seed passphrase in WalletDetails (#9204)\n   - new: set max screen brightness when displaying QR codes (79c08536)\n   - fix: crash due to ConcurrentModificationException (450b9a0)\n   - fix: issue deactivating PIN when no wallet loaded (#8366)\n   - fix: only allow Channel Backup import on Lightning-enabled wallets (8d9bcda)\n * Qt Desktop GUI:\n   - fix: scanning multi (privkeys, addresses) from QR (4dc64e4)\n * Hardware wallets:\n   - ColdCard: new: export multisig wallet to coldcard over USB (#7682)\n   - Trezor:\n     - new: add support for new device \"Safe 5\" (#9171)\n     - update: fix compat with and bump pinned library to 0.13.9 (#9141)\n   - Ledger:\n     - new: add support for new device \"Flex\" (#9179)\n     - update: bump pinned library to 0.3.0, raise max lib to <0.4 (719292f8)\n   - Jade: update: bump library to 1.0.31 (9a84bb32)\n * CLI/RPC:\n   - changed: require wallet password for lnpay and similar commands (#9236)\n     (This is in addition to the wallet needing to be loaded,\n     and requiring read access to the config file)\n * Builds/binaries:\n   - changed: include unit tests in tarballs (#9207)\n   - android:\n     - changed: set target_sdk_version to 34 (2917fde5)\n     - update: bump python version (3.8->3.10) (08127a60)\n     - work towards F-Droid inclusion:\n       - reproducible apks: strip file path prefix from .pyc files (6ebdbf04)\n       - add fastlane metadata for f-droid (#9211)\n       - change versionCode calculation (#9221)\n       - build.gradle: set android.dependenciesInfo.includeInApk=false (af18df10)\n       - contrib/release_www.sh: put android versionCode in \"version\" file (#9233)\n\n\n# Release 4.5.5 (May 30, 2024)\n * General:\n   - fix: timeout error shadowed by aiorpcx cancellation bug (#8954)\n   - changed: Fiat exchange rates: do not overwrite the locally saved historical\n     data. Instead, merge old and new data (a2fb70d6). This also ~fixes the\n     CoinGecko historical API by only asking for the last 365 days.\n   - update: support latest revision of SLIP-39 mnemonic spec (to restore) (#9059)\n * Lightning:\n   - new: unify max fee bounds for payments, make it configurable (#9041)\n   - changed: trampoline fees: instead of hardcoded list, use\n     exponential search, capped by configurable budget (#9033)\n   - fix: opening new channels with peer that has .onion address (#9002)\n * Dependencies:\n   - remove bitstring (#9020)\n * QML GUI (Android):\n   - new: add tx options to ConfirmTxDialog, RbfBumpFeeDialog (#8909)\n   - various UI fixes (#9018, 472a65eb)\n * Qt Desktop GUI:\n   - fix: save notes whenever modified (#8951)\n   - fix: offline 2fa wallet creation failing in some cases (#9037)\n   - various UI fixes (#8962, #8874, #9012, 1047200a, #9058)\n * Hardware wallets:\n   - Bitbox02: fix: call pairing dialog when necessary (#8971)\n   - Jade: update: bump library to 1.0.29 (#9007)\n * Binaries:\n   - new: add AppArmor profiles for tarball and AppImage (#9003)\n\n\n# Release 4.5.4 (March 14, 2024)\n * General:\n    - fix: failing WalletDB upgrade(58) in 4.5.3 (#8913), for wallets with\n      partial txs saved into the history as local txs\n * Lightning:\n   - changed: use longer final_cltv_delta for client-normal-swap, to\n     give more time for user to come back online while doing the swap (#8940)\n   - changed: create trampoline onions even when directly paying\n     a trampoline forwarder node (777c2ffb)\n * Hardware wallets:\n   - Trezor:\n     - fix: allow adding SLIP-19 ownership proofs to complete inputs (#8910)\n * Plugins:\n   - fix: a race in swapserver when handling server-normal-swaps (#8825)\n\n\n# Release 4.5.3 (February 23, 2024)\n * General:\n   - changed: label tx sizes as \"vbytes\", and feerates as \"sat/vbyte\" (#8864)\n   - fix: wizard regression not able to use HWW as cosigner for new wallets (643fbec)\n   - fix: onchain invoice paid detection broken if jsonpatch enabled (#8842)\n   - fix: program not starting because of bad \"proxy\" config value (#8837)\n   - fix: wizard: don't log sensitive values: replace blacklist with whitelist (638fdf11)\n * Qt Desktop GUI:\n   - new: basic \"add server as bookmark\" functionality (#8865)\n   - fix: potential race condition in wizard page construction (c78a90a)\n   - fix: don't use lightning invoice when user specifies MAX amount (#8900)\n   - various UI fixes (#8874, 2882c4b, #8889, 66af6e6)\n * QML GUI (Android):\n   - fix potential concurrency issue loading wallet (#8355)\n   - fix: wizard: fails to restore from 2fa seed: KeyError: 'x1' (#8861)\n   - various UI fixes (50a53aa, 0a6b2d5, #8782, 6738e1e, c0b8927, 016e500, #8898)\n * Hardware wallets:\n   - Trezor:\n     - new: support SLIP-19 ownership proofs, for trezor-based Standard_Wallets (#8871)\n     - fix: regression in sign_transaction for trezor one for multisig (#8813)\n * CLI/RPC:\n   - changed: nicer error messages and error-passing (#8888)\n * Lightning:\n   - fix: timing issue in lnpeer.reestablish_channel, for replaying unacked updates (79d88dcb)\n\n\n# Release 4.5.2 (January 20, 2024)\n * Qt Desktop GUI:\n   - fix crash during startup/wizard-open (#8833)\n\n\n# Release 4.5.1 (January 19, 2024)\n * Lightning:\n   - fix: MPP regression when using gossip that made paying small invoices fail (95c55c542)\n   - fix: better handle dataloss (#8814)\n     - allow manually requesting force-close in WE_ARE_TOXIC state\n     - fix some timing issues\n * General:\n   - localization: never translate CLI/RPC (0e5a1380)\n   - localization: simplify how default language is chosen (0e5a1380)\n * QML GUI (Android):\n   - bump min required android version from android 5.0 to 6.0 (#8761)\n     (older versions have not been working in practice since at least 4.4.0)\n   - properly refresh history if addresses are deleted from imported wallets (#8782)\n   - fix crash when LNURLp is scanned/pasted (#8822)\n   - fix crash for new wallets having cosigner using hww #8808)\n   - fix crash in finalizer when txid is undefined (#8807)\n   - various UI fixes (291f0ce, 3d9996a, ec81f00)\n * Qt Desktop GUI:\n   - also support unfinished wallets when opened through File>Open (#8809)\n   - fix handler for OpenFileEventFilter (6a28ef5)\n\n\n# Release 4.5.0 (January 12, 2024)\n * General:\n   - remove SSL options from config (012ce1c)\n   - make number of logfiles to keep configurable (5e8b14f)\n   - refactored SimpleConfig and added ConfigVars (#8454)\n   - incremental writes of wallet file (#8493)\n   - add warnings and prompt users when signing txs with non-default sighashes (#8687)\n   - refactored bip21/bolt11/lnurl/etc-handling into PaymentIdentifiers (#8462)\n   - add option to merge duplicate outputs (#8474)\n   - fix: consider bip21 URIs as invalid if they contain unknown req-* param (#8781)\n * Lightning:\n   - fix BOLT-04 \"MUST set `short_channel_id` to the `short_channel_id` used by the incoming onion\" (ca93af2)\n   - add support for hold invoices (1acf426)\n   - add support for bundled payments (c4eb7d8)\n   - various MPP improvements (#7987, ..)\n   - support large channels (40f2087)\n   - new flow for normal submarine swaps (fd10ae3)\n     - the client now uses hold invoices, just like the server\n     - the client waits until HTLCs are received before going on-chain\n     - the user may cancel the swaps during that waiting time\n   - don't create invoice with duplicate route hints (a3997f8)\n   - don't set channel OPEN before channel_ready has been both sent and received (#8641)\n   - if trampoline is enabled, do not add non-trampoline nodes to invoices (120faa4)\n * QML GUI (Android):\n   - port to Qt6 (#8545)\n   - fix regression for lnurl-pay (#8585)\n   - fix invoice amount bounds check (#8582)\n   - fix places where text was rendered off-screen for certain translations (#8611)\n   - fix lnworker undefined when node alias requested (#8635)\n   - fix BIP39 cosigner script type must be same as primary (8cd95f1)\n   - fix: never use current fiat exchange rate for old historical amounts (#8788)\n   - better handle android back-gesture (#8464)\n   - new: show private key in address details (016b5eb)\n   - new: show tx inputs in TxDetails and other dialogs (#8772)\n   - new: label sync plugin toggle (b6863b4)\n   - fix: properly suggest paying BOLT11 invoice onchain if insufficient balance (0a80460)\n   - new: message sign & verify (e5e1e46)\n   - new: allow never expiring payment requests (#8631)\n   - new: add coins/UTXOs to addresses list, add filters (cf91d2e)\n   - new: delete addresses from imported wallet (#8675)\n   - new: add support for lightning address and openalias (03dd38b)\n   - new: add setting to allow screenshots everywhere (0dae1733)\n   - simplify welcome page for first-start network settings (#8737)\n   - various UI fixes (b846eab, #8634, 9ed5f7b, 941f425, b20a4b9, af61b9d, 0fb47c8, 2995bc8, ..)\n * Qt Desktop GUI:\n   - port wizard to new implementation\n   - fix fiat balance sorting in address list window (#8469, #8478)\n   - remove thousands separator when copying numbers to clipboard (#8479)\n   - new: option to use extra trampoline for legacy payments (b2053c6)\n   - new: send change to lightning option for on-chain payments (649ce97)\n   - new: notes tab for saving text in the (encrypted) wallet file (d691aa07)\n   - simplify welcome page for first-start network settings (#8737)\n   - various UI fixes (#8587, #6526, ..)\n * Hardware wallets:\n   - Trezor: allow multiple change outputs (#3920)\n   - Trezor: support external pre-signed inputs (#8324)\n   - Bitbox02: update to 6.2.0 (#8459)\n * Plugins:\n   - new: swapserver plugin (#8489)\n * Builds/binaries:\n   - update bundled zbar, for security fixes (#8805)\n\n\n# Release 4.4.6 (August 18, 2023) (security update)\n * Lightning:\n   - security fix: multiple lightning-related security issues have\n     been fixed. See disclosures:\n     - https://github.com/spesmilo/electrum/security/advisories/GHSA-9gpc-prj9-89x7\n     - https://github.com/spesmilo/electrum/security/advisories/GHSA-8r85-vp7r-hjxf\n   - fix: cannot sweep from channel after local-force-close, if using\n     imported channel backup (#8536). Fixing this required adding a\n     new field (local_payment_pubkey) to the channel backup\n     import/export format and bumping its version number\n     (v0->v1). Both v0 and v1 can be imported, and we only export v1\n     backups. When you force close a channel, the GUI will prompt you\n     to save a backup. In that case, you must export the backup using\n     the updated Electrum, and not rely on a backup made with an older\n     release of Electrum.  Note that if you request a force close from\n     the remote node or co-op close, you do not need to save a channel\n     backup.\n   - fix: we would sometimes attempt sending MPP even if not supported\n     by the invoice (2cf6173c)\n * QML GUI:\n   - fix lnurl-pay when config.BTC_AMOUNTS_ADD_THOUSANDS_SEP is True\n     (5b4df759)\n * Hardware wallets:\n   - Trezor: support longer than 9 character PIN codes (#8526)\n   - Jade: support more custom-built DIY Jade devices (#8546)\n * Builds/binaries:\n   - include AppStream metainfo.xml in tarballs (#8501)\n * fix: exceptions in some callbacks got lost and not logged (3e6580b9)\n\n\n# Release 4.4.5 (June 20, 2023)\n * Hardware wallets:\n   - jade: fix regression in sign_transaction (#8463)\n * Lightning:\n   - fix \"rebalance_channels\" function (#8468)\n * enforce that we run with python asserts enabled,\n   regardless of platform (d1c88108)\n\n\n# Release 4.4.4 (May 31, 2023)\n * QML GUI:\n   - fix creating multisig wallets involving BIP39 seeds (#8432)\n   - fix \"cannot scroll to open a lightning channel\" (#8446)\n   - wizard: \"confirm seed\" screen to normalize whitespaces (#8442)\n   - fix assert on address details screen (#8420)\n * Qt GUI:\n   - better handle some expected errors in SwapDialog (#8430)\n * libsecp256k1: bump bundled version to 0.3.2 (10574bb1)\n\n\n# Release 4.4.3 (May 11, 2023)\n * Intentionally break multisig wallets that have heterogeneous master\n   keys. Versions 4.4.0 to 4.4.2 of Electrum for Android did not check\n   that master keys used the same script type. This may have resulted\n   in the creation of multisig wallets that cannot be spent from\n   with any existing version of Electrum. It is not sure whether any\n   users are affected by this; if there are any, we will publish\n   instructions on how to spend those coins (#8417, #8418).\n * Qt GUI:\n   - handle expected errors in DSCancelDialog (#8390)\n   - persist addresses tab toolbar \"show/hide\" state (b40a608b)\n * QML GUI:\n   - implement bip39 account detection (0e0c7980)\n   - add share toolbutton for outputs in TxDetails (#8410)\n * Hardware wallets:\n   - Ledger:\n     - fix old bitcoin app support (<2.1): \"no sig for ...\" (#8365)\n     - bump req ledger-bitcoin (0.2.0+), adapt to API change (30204991)\n * Lightning:\n   - limit max feature bit we accept to 10_000 (#8403)\n   - do not disconnect on \"warning\" messages (6fade55d)\n * fix wallet.get_tx_parents for chain of unconf txs (#8391)\n * locale: translate more strings when using \"default\" lang (a0c43573)\n * wallet: persist frozen state of addresses to disk right away (#8389)\n\n\n# Release 4.4.2 (May 4, 2023)\n * Qt GUI:\n   - fix undefined var check in swap_dialog (#8341)\n   - really fix \"recursion depth exceeded\" for utxo privacy analysis (#8315)\n * QML GUI:\n   - fix signing txs for 2fa wallets (#8368)\n   - fix for wallets with encrypted-keystore but unencrypted-storage (#8374)\n   - properly delete wizard components after use (#8357)\n   - avoid entering loadWallet if daemon is already busy loading (#8355)\n   - no auto capitalization on import and master key text fields (5600375d)\n   - remove Qt virtual keyboard and add Seedkeyboard for seed entry (#8371, #8352)\n   - add runtime toggling of android SECURE_FLAG, to allow screenshots (#8351)\n   - restrict cases where server is shown \"lagging\" (53d61c01)\n * fix hardened char \"h\" vs \"'\" needed for some hw wallets (#8364, 499f5153)\n * fix digitalbitbox(1) support (22b8c4e3)\n * fix wrong type for \"history_rates\" config option (#8367)\n * fix issues with wallet.get_tx_parents (a1bfea61, 56fa8325)\n\n\n# Release 4.4.1 (April 27, 2023)\n * Qt GUI:\n   - fix sweeping (#8340)\n   - fix send tab input_qr_from_camera (#8342)\n   - fix crash reporter showing if send fails on typical errors (#8312)\n   - bumpfee: disallow targeting an abs fee. only allow feerate (#8318)\n * QML GUI:\n   - fix offline-signing or co-signing pre-segwit txs (#8319)\n   - add option to show onchain address in ReceiveDetailsDialog (#8331)\n   - fix strings unique to QML did not get localized/translated (#8323)\n   - allow paying bip21 uri onchain that has both onchain and bolt11\n     if we cannot pay on LN (#8334, 312e50e9)\n   - virtual keyboard: make buttons somewhat larger (75e65c5c)\n   - fix(?) Android crash with some OS-accessibility settings (#8344)\n   - fix channelopener.connectStr qr scan popping under (#8335)\n   - fix restoring from old mpk (watchonly for \"old\" seeds) (#8356)\n * libsecp256k1: add runtime support for 0.3.x, bump bundled to 0.3.1\n * forbid paying to \"http:\" lnurls (enforce https or .onion) (1b5c7d46)\n * fix wallet.bump_fee \"decrease payment\" erroring on too high target\n   fee rate (#8316)\n * fix performance regressions in tx logic (ee521545, 910832c1)\n * fix \"recursion depth exceeded\" for utxo privacy analysis (#8315)\n\n\n# Release 4.4.0 (April 18, 2023)\n\n * New Android app, using QML instead of Kivy\n   - Using Qt 5.15.7, PyQt 5.15.9\n   - This release still on python3.8\n   - Feature parity with Kivy\n   - Android Back button used throughout, for cancel/close/back\n   - Note: two topbar menus; tap wallet name for wallet menu, tap\n     network orb for application menu\n   - Note: long-press Receive/Send for list of payment requests/invoices\n * Qt GUI improvements\n   - New onchain transaction creation flow, with configurable preview\n   - Various options have been moved to toolbars, where their effect\n     can be more directly observed.\n * Privacy features:\n    - lightning: support for option scid_alias.\n    - Qt GUI: UTXO privacy analysis: this dialog displays all the\n      wallet transactions that are either parent of a UTXO, or can be\n      related to it through address reuse (Note that in the case of\n      address reuse, it does not display children transactions.)\n    - Coins tab: New menu that lets users easily spend a selection\n      of UTXOs into a new channel, or into a submarine swap (Qt GUI).\n * Internal:\n    - Lightning invoices are regenerated every time routing hints are\n      deprecated due to liquidity changes.\n    - Script descriptors are used internally to sign transactions.\n\n\n# Release 4.3.4 - Copyright is Dubious (January 26, 2023)\n * Lightning:\n   - make sending trampoline payments more reliable (5251e7f8)\n   - use different trampoline feature bits than eclair (#8141)\n * invoice-handling: fix get_request_by_addr incorrectly mapping\n   addresses to request ids when an address was reused (#8113)\n * fix a deadlock in wallet.py (52e2da3a)\n * CLI: detect if daemon is already running (c7e2125f)\n * add an AppStream metainfo.xml file for Linux packagers (#8149)\n * payserver plugin:\n   -replaced vendored qrcode lib\n   -added tabs for on-chain and lightning invoices\n   -revamped html and javascript\n\n\n# Release 4.3.3 - (January 3, 2023)\n * Lightning:\n   - fix handling failed HTLCs in gossip-based routing (#7995)\n   - fix LN cooperative-chan-close to witness v1 addr (#8012)\n * PSBTs:\n   - never put ypub/zpub in psbts, only plain xpubs (#8036)\n   - for witness v0 txins, put both UTXO and WIT_UTXO in psbt (#8039)\n * Hardware wallets:\n   - Trezor: optimize signing speed by not serializing tx (#8058)\n   - Ledger:\n     - modify plugin to support new bitcoin app v2.1.0 (#8041),\n     - added a deprecation warning when using Ledger HW.1 devices.\n       Ledger itself stopped supporting HW.1 some years ago, and it is\n       becoming a maintenance burden for us to keep supporting it.\n       Please migrate away from these devices. Support will be removed\n       in a future release.\n * Binaries:\n   - tighten build system to only use source pkgs in more places\n     (#7999, #8000)\n   - Windows:\n     - use debian makensis instead of upstream windows exe (#8057)\n     - stop using debian sid, build missing dep instead (98d29cba)\n   - AppImage: fix failing to run on certain systems (#8011)\n * commands:\n   - getinfo() to show if running in testnet mode (#8044)\n   - add a \"convert_currency\" command (for fiat FX rate) (#8091)\n * Qt wizard: fix QR code not shown during 2fa wallet creation (#8071)\n * rework Tor-socks-proxy detection to reduce Tor-log-spam (#7317)\n * Android: add setting to enable debug logs (#7409)\n * fix payserver (merchant) js for electrum 4.3 invoice api (0fc90e07)\n * bip21: more robust handling of URIs that include a \"lightning\" key\n   (ac1d53f0, 2fd762c3, #8047)\n\n\n# Release 4.3.2 - (September 26, 2022)\n * When creating new requests, reuse addresses of expired requests\n   (fixes #7927).\n * Index requests by ID instead of receiving address. This affects the\n   following commands: get_request, get_invoice, list_requests,\n   list_invoices, delete_request, delete_invoice\n * Trampoline routing: remember routes that have failed. Try other\n   routes instead of systematically raising tampoline fees.\n * Fix sweep to_local output from channel backup (#7959)\n * Harden build script for macOS binary: avoid using\n   precompiled wheels from PyPI for most packages (#7918)\n * The Windows/AppImage/Android binaries are now built on debian using\n   the snapshot.debian.org archive instead of ubuntu. This should help\n   with historical reproducibility. (#7926)\n\n# Release 4.3.1 - (August 17, 2022)\n * build: we now also distribute a \"source-only\"\n   Linux-packager-friendly tarball (d0de44a7, #7594), in addition\n   to the current \"normal\" tarball. The \"source-only\" tarball excludes\n   compiled locale files, generated protobuf files, and does not\n   vendor our runtime python dependencies (the packages/ folder).\n * fix os.chmod when running in tmpfs on Linux (#7681)\n * (Qt GUI) some improvements for high-DPI monitors (38881129)\n * bring kivy request dialog more in-line with Qt (#7929)\n * rm support of \"legacy\" (without static_remotekey) LN channels.\n   Opening these channels were never supported in a release version,\n   only during development prior to the first lightning-capable\n   release. Wallets with such channels will have to close them.\n   (1f403d1c, 7b8e257e)\n * Qt: fix duplication of some OS notifications on onchain txs (#7943)\n * fix multiple recent regressions:\n    - handle NotEnoughFunds when trying to pay LN invoice (#7920)\n    - handle NotEnoughFunds when trying to open LN channel (#7921)\n    - labels of payment requests were not propagated to\n      history/addresses (#7919)\n    - better default labels of outgoing txs (#7942)\n    - kivy: dust-valued requests could not be created for LN (#7928)\n    - when closing LN channels, future (timelocked) txs were not\n      shown in history (#7930)\n    - kivy: fix deleting \"local\" tx from history (#7933)\n    - kivy: fix paying amountless LN invoice (#7935)\n    - Qt: better handle unparseable URIs (#7941)\n\n\n# Release 4.3.0 - (August 5, 2022)\n\n * This version introduces a set of UI modifications that simplify the\n   use of Lightning. The idea is to abstract payments from the payment\n   layer, and to suggest solutions when a lightning payment is hindered\n   by liquidity issues.\n    - Invoice unification: on-chain and lightning invoices have been\n      merged into a unique type of invoice, and the GUI has a single\n      'create request' button. Unified invoices contain both a\n      lightning invoice and an onchain fallback address.\n    - The receive tab of the GUI can display, for each payment\n      request, a lightning invoice, a BIP21 URI, or an onchain\n      address. If the request is paid off-chain, the associated\n      on-chain address will be recycled in subsequent requests.\n    - The receive tab displays whether a payment can be received using\n      Lightning, given the current channel liquidity. If a payment\n      cannot be received, but may be received after a channel\n      rebalance or a submarine swap, the GUI will propose such an\n      operation.\n    - Similarly, if channels do not have enough liquidity to pay a\n      lightning invoice, the GUI will suggest available alternatives:\n      rebalance existing channels, open a new channel, perform a\n      submarine swap, or pay to the provided onchain fallback address.\n    - A single balance is shown in the GUI. A pie chart reflects how\n      that balance is distributed (on-chain, lightning, unconfirmed,\n      frozen, etc).\n    - The semantics of the wallet balance has been modified: only\n      incoming transactions are considered in the 'unconfirmed' part\n      of the balance. Indeed, if an outgoing transaction does not get\n      mined, that is not going to decrease the wallet balance. Thus,\n      change outputs of outgoing transactions are not subtracted from\n      the confirmed balance. (Before this change, the arithmetic\n      values of both incoming and outgoing transactions were added to\n      the unconfirmed balance, and could potentially cancel\n      each other.)\n\n * In addition, the following new features are worth noting:\n    - support for the Blockstream Jade hardware wallet (#7633)\n    - support for LNURL-pay (LUD-06) (#7839)\n    - updated trampoline feature bit in invoices (#7801)\n    - the claim transactions of reverse swaps are not broadcast until\n      the parent transaction is confirmed. This can be overridden by\n      manually broadcasting the local transaction.\n    - the fee of submarine swap transactions can be bumped (#7724)\n    - better error handling for trampoline payments, which should\n      improve payment success rate (#7844)\n    - channel backups are removed automatically when the corresponding\n      channel is redeemed (#7513)\n\n\n# Release 4.2.2 - (May 27, 2022)\n * Lightning:\n   - watching onchain outputs: significant perf. improvements (#7781)\n   - enforce relative order of some msgs during chan reestablishment,\n     lack of which can lead to unwanted force-closures (#7830)\n   - fix: in case of a force-close containing incoming HTLCs, we were\n     redeeming all HTLCs that we know the preimage for. This might\n     publish the preimage of an incomplete MPP. (1a5ef554, e74e9d8e)\n * Hardware wallets:\n   - smarter pairing during sign_transaction (238619f1)\n   - keepkey: fix pairing with device using a workaround (#7779)\n * fix AppImage failing to run on certain systems (#7784)\n * fix \"Automated BIP39 recovery\" not scanning change paths (#7804)\n * bypass network proxy for localhost electrum server (#3126)\n * security fix: remove support of \"file://\" URIs from BIP70 payment\n   requests, which could be used to trigger \"open()\" on arbitrary files\n   (see https://github.com/spesmilo/electrum/security/advisories/GHSA-4fh4-hx35-r355)\n\n\n# Release 4.2.1 - (March 26, 2022)\n * Binaries:\n   - Windows: we are dropping support for Windows 7. (#7728)\n     Version 4.2.0 already unintentionally broke compatibility with\n     Win7 and there is no easy way to restore and maintain support.\n     Existing users can keep using version 4.1.5 for now, but should\n     consider upgrading or changing their OS.\n     Win8.1 still works but only Win10 is regularly tested.\n   - bump bundled Python version (win, mac, appimage) to 3.9.11,\n     (android) to 3.8.13 (1bb7ef92, #7721)\n     (note these include a fix to an openssl DOS-vector CVE-2022-0778)\n   - windows: bump pyinstaller to 4.10 and wine to 7.0 (#7721)\n * Kivy GUI:\n   - fix \"Child Pays For Parent\" not working on Android (#7723)\n   - revert to defaulting the UI language to English (25fee6a6)\n * Qt GUI:\n   - macOS: fix opening \"Preferences\" segfaulting for some (#7725)\n   - more resilient startup: better error-handling and fallback (#7447)\n * Library:\n   - fix LN error/warning message-handling, and fix regression that\n     errors during channel-open were not properly shown in GUI (a92dede4)\n   - during LN chan open, do not backup wallet automatically (#7733)\n   - Imported wallets: fix delete_address rm-ing too many txs (#7587)\n   - fix potential deadlock in wallet.py (d3476b6b)\n * Hardware wallets:\n   - ledger: add progress indicator to sign_transaction (#7516)\n * fix the \"--portable\" flag for AppImage, and for pip installs (#7732)\n\n\n# Release 4.2.0 - (March 16, 2022)\n * The minimum python version was increased to 3.8 (#7661)\n * Lightning:\n   - redesigned MPP splitting algorithm (#7202)\n   - trampoline: implement multi-trampoline MPP (#7623)\n   - implement option_shutdown_anysegwit, and allow dust limits\n     below 546 sat (#7542)\n   - implement option_channel_type (#7636)\n   - implement modern closing negotiation (#7586, #7680)\n * improve support for \"lightning:\" URIs on all platforms (#7301)\n * Qt GUI:\n   - add setting \"show amounts with msat precision\" (5891e039)\n   - add setting \"add thousand separators to bitcoin amounts\" (#7427)\n * CLI/RPC:\n   - implement Unix sockets and make them the default (#7545, #7566)\n   - add \"bumpfee\" command (#7438)\n * Kivy GUI:\n   - show network setup on first start before wallet creation (#7464)\n   - add \"Child Pays For Parent\" option (#7487)\n   - improved locale handling (22bb52d5, 7cb11ced, 4293d6ec)\n * Hardware wallets:\n   - trezor: bump trezorlib to 0.13 (#7590)\n   - bitbox02: bump bitbox02 to 6.0, support send-to-taproot (#7693)\n   - ledger: support \"Ledger Nano S Plus\" (#7692)\n * Library:\n   - added support for sighash types beside \"ALL\" (#7453)\n   - signmessage: also accept Trezor-type sigs for segwit addrs (#7668)\n   - network: make request timeout configurable (#7696)\n   - paytomany (onchain txout batching) now allows multiple max(\"!\")\n     amounts with specified weights (#7492)\n * Binary builds\n   - AppImage: changed base image from ubuntu 16.04 to 18.04 (5d0aa63a)\n * migrated from Travis CI to Cirrus CI (#7431)\n * Lots of other minor bugfixes and usability improvements.\n\n\n# Release 4.1.5 - (July 19, 2021)\n * Builds/binaries:\n   - macOS: the .dmg binary should now be reproducible\n * Kivy/Android: fix paying bip70 invoices (regression) (90579ccf)\n * fix: payment requests not saved if process is killed (6a049d99)\n * Lightning: improve payment success when using trampoline (3a7f5373)\n * add support for signet test network (#7282)\n * Qt GUI:\n   - allow restoring from SLIP39 seeds (#6917)\n   - rework QR code scanning on Windows and macOS (#7365)\n   - support smaller window sizes, decrease minimums (#7385)\n * GUIs: add \"funded or unused\" filter option to Addresses tab (#5823)\n\n\n# Release 4.1.4 - (June 17, 2021)\n * Kivy/Android: fix a regression where a non-LN wallet\n   could not open the settings (c49d6995)\n * CLI/RPC: fix \"close_wallet\" command (#7348)\n\n\n# Release 4.1.3 - (June 16, 2021)\n * Builds/binaries:\n   - Android: the binaries (APKs) should now be reproducible (#7263)\n   - AppImage: fix some startup issues by including libxcb deps (#7198)\n * Lightning:\n   - smarter LN pathfinding (if trampoline is disabled):\n     - estimate liquidity in channels using previous attempts (#7152)\n     - consider inflight HTLCs and try to route around them (#7292)\n   - bugfix: add more safety checks to avoid \"batch RBF\" feature\n     merging LN funding txs (#7298)\n   - remove HTLC value upper limit of ~42 mBTC (#7328)\n   - Kivy GUI: implement freezing LN channels (11bb39ee)\n * imported wallets: when enabling the \"Use change addresses\" option,\n   change will now be sent to a random unused imported address. (#7330)\n   As before, by default, change is sent back to the \"from address\".\n * seed generation: make sure newly created electrum seeds don't have\n   correct bip39 checksum by chance (#6001)\n * other minor fixes\n\n\n# Release 4.1.2 - (April 8, 2021)\n * Qt GUI:\n    - fix some crashes when exiting (#6889)\n    - make sure pressing Ctrl-C always quits (c41cd4ae)\n * Kivy GUI (Android):\n    - fix bug with scrollbar, again (#7155)\n    - 2fa wallets: fix making transactions (#7190)\n    - implement freezing addresses (#7178)\n * Android: use more modern application launcher/icon (#7187)\n\n\n# Release 4.1.1 - (April 2, 2021)\n * fix Qt crash with the swap dialog\n * fix Kivy bug with scrollbar (#7155)\n * fix localization issues (#7158 #4621)\n * fix python crash with swaps (#7160)\n * other minor fixes\n\n\n# Release 4.1.0 - Kangaroo (March 30, 2021)\n\nThis version is our second major release with support for the\nLightning Network. While our initial Lightning release was mostly\nabout implementing the protocol, this release brings features that are\nspecifically aimed at keeping Electrum lightweight and trustless,\nwhile avoiding single points of failure. Most of the features listed\nbelow are user-visible.\n * The wallet creation wizard no longer asks for a seed type, and\n   creates segwit wallets with bech32 addresses. Older seed types can\n   still be created with the command line.\n * Paid invoices (both incoming and outgoing) are automatically\n   removed from the send/receive lists of the GUI (one confirmation is\n   needed for onchain invoices). Once removed from the list, invoice\n   details can still be accessed from the transaction history. In Qt,\n   invoice lists have been renamed to 'Sending queue' and 'Receiving\n   queue'.\n * Lightning:\n    - recoverable channels (see below)\n    - trampoline payments (see below)\n    - support multi-part-payment\n    - support upfront-shutdown-script\n * Recoverable channels (option):\n   - Recovery data is added to the channel funding transaction using\n     an OP_RETURN. This makes it possible to recover a static backup\n     of the channel from the wallet seed. Please note that static\n     backups only allow users to request a force-close of the channel\n     with the remote node, so that funds not locked in HTLCs can be\n     recovered. This assumes that the remote node is still online, did\n     not lose its data, and accepts to force close the channel.\n   - This option is only available for standard wallets with an\n     Electrum seed. It is not available for hardware wallets, because\n     it requires a deterministic derivation of the nodeID. It is also\n     not available in watching-only wallets, for the same reason. If a\n     wallet can have recoverable channels but has an old nodeID, users\n     who want to use that feature need to close all their existing\n     channels, and to restore their wallet from seed.\n   - Channel recovery data uses 20 bytes (16 bytes of the remote\n     NodeID plus 4 magic bytes) and is encrypted so that only the\n     wallet that owns it can decrypt it. However, blockchain analysis\n     will be able to tell that the transaction was probably created by\n     Electrum.\n   - If the 'use recoverable channels' option is enabled, other nodes\n     cannot open a channel to Electrum.\n   - If a channel is force-closed, the information in the on-chain\n     backup is not sufficient to retrieve the funds in the to_local\n     output, in case the wallet is lost in a boating accident before\n     expiration of the CSV delay. For that reason, an additional\n     backup is presented to the user if they force-close a channel.\n * Trampoline routing (option): Trampoline is a solution that allows\n   light clients to delegate path-finding on the Lightning Network, so\n   that they do not have to download the entire network\n   graph. Trampoline routing was originally proposed by Bastien\n   Teinturier and is used in the Phoenix wallet. Here is how\n   Trampoline works in Electrum:\n   - Trampoline is enabled by default, in order to prevent unwanted\n     download of the network gossip. If trampoline is disabled, the\n     gossip will be downloaded, regardless of the existence of\n     channels.\n   - Because there is no discovery mechanism for trampoline nodes, the\n     list of available trampolines is hardcoded in the client (it will\n     remain so until support for trampoline routing is announced in\n     gossip). 3 trampoline nodes are currently available on mainnet:\n     ACINQ, Electrum and Hodlister.\n   - If Trampoline is enabled:\n      - payments use trampoline routing.\n      - gossip is disabled.\n      - the wallet can only open channels with trampoline nodes.\n      - pre-existing channels with non-trampoline nodes are frozen for\n        sending.\n   - There are two types of trampoline payments: legacy and trampoline\n     end-to-end. Legacy payments are possible with any receiver, but\n     they offer less privacy than end-to-end trampoline\n     payments. Electrum decides whether to perform legacy or\n     end-to-end based on the features in the invoice:\n       - OPTION_TRAMPOLINE_ROUTING_OPT (bit 25) for Electrum\n       - OPTION_TRAMPOLINE_ROUTING_OPT_ECLAIR (bit 51) for Eclair/Phoenix\n   - When performing a legacy payment, Electrum will add a second\n     trampoline node to the route in order to protect the privacy of\n     the payer and payee. It will fall back to a single trampoline if\n     the two-trampoline strategy has failed for all trampolines.\n     (Note: two-trampoline payments are currently not possible if the\n     first trampoline is the ACINQ node, and is disabled for that\n     node.)\n   - Similar to Phoenix, the fee and CLTV delay are found by\n     trial-and-error. If there is a second trampoline in the route, we\n     use the same fee/CLTV for both. This trial-and-error is\n     temporary; the final specification should add fee information in\n     the failure messages, so that we will be able to better fine-tune\n     trampoline fees.\n * Qt: The increase fee dialog now has advanced options, and offers\n   the choice between different RBF strategies.\n * Watchtowers: The 'use_local_watchtower' feature is deprecated, and\n   it has been removed from the Qt GUI. The 'use_remote_watchtower'\n   setting has been renamed to 'use_watchtower'.\n * Password unification (Android only): When the Android app is\n   started, the entered password is checked against all wallets in\n   the directory. If the test passes:\n    - all wallets are encrypted\n    - new wallets will use the unified password\n    - password updates are performed on all wallets\n   Whether the password is unified can be seen in the GUI: In the\n   'Settings' dialog, the description for the password setting is\n   'Change password for this wallet' if the password is not unified,\n   and becomes 'Change password' if password is unified.\n * Submarine swaps are now available on kivy/android.\n * Android PIN reset: If the password is unified, the PIN can be reset\n   by providing the password.\n * Android: on-chain fees have been removed from the settings\n   dialog. Instead, the fee slider is shown to the user every time an\n   on-chain transaction will be performed (sending a payment, opening\n   a channel, initiating a submarine swap)\n * BIP-0350: use bech32m for witness version 1+ addresses (4315fa43).\n   We have supported sending to any witness version since Electrum\n   3.0, using BIP-0173 (bech32) addresses. BIP-0350 makes a breaking\n   change in address encoding, and recommends using a new encoding\n   (bech32m) for sending to witness version 1 and later.\n * Block explorer: allow setting a custom URL in Qt GUI (#6965)\n\n\n# Release 4.0.9 - (Dec 18, 2020)\n * fixes a regression introduced in 4.0.8, that prevents from\n   paying BIP70 invoices (#6859)\n * reflect frozen channels and disconnected peers in the displayed\n   'can send/can receive' amounts.\n\n# Release 4.0.8 - (Dec 17, 2020)\n * fix decoding BIP21 URIs with uppercase schema (d40bedb2)\n * psbt: put full derivation paths into PSBT by default (c8155129)\n * invoices: allow address-reuse (#6609, #6852)\n * A few other minor bugfixes.\n\n# Release 4.0.7 - (Dec 9, 2020)\n * kivy: fix open channel with 'max' amount\n * kivy: fix regression introduced in last release (a9fc440)\n * other minor GUI fixes\n * Dependencies: as part of adapting to new dnspython (#6828),\n   - python-ecdsa is no longer needed at all,\n   - cryptography is now required (min 2.6), the user can no\n     longer choose between cryptography and pycryptodomex\n\n# Release 4.0.6 - (Dec 4, 2020)\n * Fix 'Max' button issue for submarine swaps button (#6770)\n * Fix 'Max' button in kivy (#6169)\n * Various fixes for Kivy/Android install wizard\n * More robust account keypath for BitBox02 (#6766)\n\n# Release 4.0.5 - (Nov 18, 2020)\n * Fix .dmg binary hanging on recently released macOS 11 Big Sur (#6461)\n * Lightning:\n   - bugfix: during LN channel opening, if the client crashed at the\n     wrong moment, the channel might not get fully persisted to disk,\n     and would need manual console-tinkering to recover (#6656)\n   - Lightning is enabled by default. Electrum will not connect to\n     the Lightning Network until the user opens a channel. (#6639)\n   - smarter node recommendation (to open channels with) (#6705)\n * user interface: some minor changes that aim to improve usability\n * Ledger:\n   - fix enumerating devices with new bitcoin app (1.5.1) (b78cbcff)\n   - fix compat with HW.1 (200f547a)\n * A few other minor bugfixes.\n\n# Release 4.0.4 - (Oct 15, 2020)\n * PSBT: fix regression in 4.0.3 where UTXO data was not included in\n   QR codes (#6600)\n * new feature: \"Cancel tx\" (#6641). The Qt/kivy GUI allows cancelling\n   an unconfirmed RBF tx by double-spending its inputs to self.\n * Windows binary:\n   - fix some issues with QR scanning by building zbar ourselves (#6593)\n   - when using setup exe, also install a debug binary (#6603)\n * Ledger: fix \"The derivation path is unusual\" warnings (#6512)\n   (needs Bitcoin app 1.4.8+ installed on device)\n * A few other minor bugfixes and usability improvements.\n\n# Release 4.0.3 - (Sep 11, 2020)\n * PSBT: restore compatibility with Bitcoin Core following CVE-2020-14199:\n   we now allow a PSBT input to have both UTXO and WITNESS_UTXO (#6429).\n   (PSBTs created since 4.0.1 already contained UTXO for segwit inputs)\n * Hardware wallets:\n   - bitbox02: better multisig UX: implement get_soft_device_id (#6386)\n   - coldcard: fix \"show address\" for multisig (#6517)\n   - all: run all device communication on a dedicated thread (#6561).\n     This should resolve some threading issues.\n * new feature: \"Automated BIP39 recovery\" (#6219, #6155)\n   When restoring from a BIP39 seed, add option to scan many known\n   derivation paths for history, and show them to user to choose from.\n * show derivation path of keystores in Qt GUI Wallet>Information (#4700)\n * fix \"signtransaction\" RPC command (#6502)\n * Dependencies: pyaes is no longer needed (#6563)\n * The tar.gz source dist now bundles make_libsecp256k1.sh, to help\n   users getting libsecp256k1 (#6323).\n * A few other minor bugfixes and usability improvements.\n\n# Release 4.0.2 - (July 8, 2020)\n - rm old corrupted non-bip70 invoices (#6345)\n - other minor fixes\n\n# Release 4.0.1 - (July 3, 2020)\n * Lightning Network support (experimental)\n   - Our implementation of Lightning relies on Electrum servers to\n     query channel states. Since servers can lie about the state of a\n     channel, users should either use a server that they trust, or\n     setup a private watchtower (see below). A watchtower is also\n     recommended for lightning wallets that remain offline for\n     extended periods of time (the default CSV 'to_self_delay' is 1\n     week). Please note that Electrum Personal Server (EPS) cannot be\n     used with lightning wallets, because channels funding addresses\n     are arbitrary.\n   - Lightning funds cannot be restored from seed. Instead, users need\n     to create static backups of their channels. Static backups cannot\n     be used to perform lightning transactions, they can only be used\n     to trigger a remote-force-close of a channel.\n   - Lightning-enabled wallet files must not be copied. Instead, a\n     backup of the wallet can be created from the Qt menu, and it will\n     contain static backups of all its channels. Backups can also be\n     exported for each channel (e.g. via QR code), and imported in\n     another wallet. Since backups are encrypted with a key derived\n     from the wallet's xpub, they can only be imported into another\n     instance of the same wallet, or a watch-only version of it. The\n     force-close is not triggered automatically when the backup is\n     imported; imported backups can live inside a wallet file.\n   - Lightning can be enabled in the GUI (Wallet>Information) or from\n     the CLI (init_lightning). Lightning is currently restricted to HD\n     p2wpkh wallets (including watch-only and hardware wallets). The\n     Qt GUI, CLI/RPC, and the kivy GUI (Android) all have LN support,\n     with feature-richness in that order.\n   - LN protocol details: dataloss_protect and static_remotekey are\n     required; varonion and payment_secret are implemented, MPP not yet.\n     Channels are not announced ('private'), forwarding is disabled.\n     We do not serve gossip queries, only consume them.\n   - Submarine swaps: the GUI integrates a service that offers\n     atomically exchanging on-chain and lightning bitcoins for a fee.\n     Electrum Technologies runs a central server for this, powered by\n     the Boltz backend.\n   - Watchtowers: Electrum can run a local watchtower (GUI setting),\n     or it can connect to a remote watchtower. A watchtower contains\n     pre-signed transactions and does not need your private keys. A\n     local watchtower will watch your channels whenever an Electrum\n     instance is running, without needing access to your wallet file.\n     An Electrum daemon can be configured to be used as a remote\n     watchtower by setting 'watchtower_address', 'watchtower_user' and\n     'watchtower_password'.\n * Partially Signed Bitcoin Transactions (PSBT, BIP-174) are supported\n   (#5721). The previous Electrum partial transaction format is no\n   longer supported, i.e. this is an incompatible change. Users should\n   make sure that all instances of Electrum they use to co-sign or\n   offline sign, are updated together.\n * Hardware wallets: several fixes in general; notable changes:\n   - The BitBox02 is now supported (#5993)\n   - Multisig support for Coldcard (#5440)\n   - Compatibility with latest Trezor fw (#6064, #6198, #5692)\n * Dependencies (see README for install instructions):\n   - libsecp256k1 is now required (previously optional). python-ecdsa\n     remains a dependency but it is now only used for DNSSEC.\n   - Added: either one of pycryptodomex or cryptography is now required,\n     mainly due to LN (previously pycryptodomex was optional, for fast AES)\n   - Removed: jsonrpclib-pelix, the JSON-RPC library used for CLI/daemon\n * Qt GUI: several changes, notably:\n   - Separation between output selection and transaction finalization.\n   - Coin selection moved to the Coins tab, and it affects all txns,\n     e.g. RBF fee-bumping, LN channel opens, submarine swaps.\n   - Editable tx preview dialog that allows e.g. changing the locktime,\n     toggling RBF, and manual coinjoins.\n * HTTP PayServer: The configuration of a bitcoin-accepting website\n   using Electrum has been simplified and requires fewer steps (see\n   documentation). The Payserver supports BIP70 and Lightning payments.\n * Android:\n   - We now build two APKs, one for ARMv7 and one for ARMv8\n   - The kivy GUI now supports importing BIP39 seeds\n   - Each wallet on kivy now can have a separate generic password,\n     using which the wallet files are encrypted. An optional PIN,\n     shared among all wallets, can be added to get prompted for spends.\n * The API of several CLI/RPC commands have changed, and several new\n   commands have been introduced (mainly for LN).\n * Distributables:\n   - The .tar.gz source dist is now built reproducibly.\n     Relatedly, we no longer distribute a .zip sdist.\n   - The MacOS binary now conforms to macOS 10.15; it is notarized\n     by Apple. This required bumping the min macOS version to 10.13.\n     Startup times should now be faster on 10.15. (#6128, #6225)\n * Transactions:\n   - we now grind low R for ECDSA signatures to match bitcoind (#5820)\n * Lots and lots of other minor bugfixes and improvements.\n\n\n# Release 3.3.8 - (July 11, 2019)\n\n * fix some bugs with recent bump fee (RBF) improvements (#5483, #5502)\n * fix #5491: watch-only wallets could not bump fee in some cases\n * appimage: URLs could not be opened on some desktop environments (#5425)\n * faster tx signing for segwit inputs for really large txns (#5494)\n * A few other minor bugfixes and usability improvements.\n\n\n# Release 3.3.7 - (July 3, 2019)\n\n * The AppImage Linux x86_64 binary and the Windows setup.exe\n   (so now all Windows binaries) are now built reproducibly.\n * Bump fee (RBF) improvements:\n   Implemented a new fee-bump strategy that can add new inputs,\n   so now any tx can be fee-bumped (d0a4366). The old strategy\n   was to decrease the value of outputs (starting with change).\n   We will now try the new strategy first, and only use the old\n   as a fallback (needed e.g. when spending \"Max\").\n * CoinChooser improvements:\n   - more likely to construct txs without change (when possible)\n   - less likely to construct txs with really small change (e864fa5)\n   - will now only spend negative effective value coins when\n     beneficial for privacy (cb69aa8)\n * fix long-standing bug that broke wallets with >65k addresses (#5366)\n * Windows binaries: we now build the PyInstaller boot loader ourselves,\n   as this seems to reduce anti-virus false positives (1d0f679)\n * Android: (fix) BIP70 payment requests could not be paid (#5376)\n * Android: allow copy-pasting partial transactions from/to clipboard\n * Fix a performance regression for large wallets (c6a54f0)\n * Qt: fix some high DPI issues related to text fields (37809be)\n * Trezor:\n   - allow bypassing \"too old firmware\" error (#5391)\n   - use only the Bridge to scan devices if it is available (#5420)\n * hw wallets: (known issue) on Win10-1903, some hw devices\n   (that also have U2F functionality) can only be detected with\n   Administrator privileges. (see #5420 and #5437)\n   A workaround is to run as Admin, or for Trezor to install the Bridge.\n * Several other minor bugfixes and usability improvements.\n\n\n# Release 3.3.6 - (May 16, 2019)\n\n * qt: fix crash during 2FA wallet creation (#5334)\n * fix synchronizer not to keep resubscribing to addresses of\n   already closed wallets (e415c0d9)\n * fix removing addresses/keys from imported wallets (#4481)\n * kivy: fix crash when aborting 2FA wallet creation (#5333)\n * kivy: fix rare crash when changing exchange rate settings (#5329)\n * A few other minor bugfixes and usability improvements.\n\n\n# Release 3.3.5 - (May 9, 2019)\n\n * The logging system has been overhauled (#5296).\n   Logs can now also optionally be written to disk, disabled by default.\n * Fix a bug in synchronizer (#5122) where client could get stuck.\n   Also, show the progress of history sync in the GUI. (#5319)\n * fix Revealer in Windows and MacOS binaries (#5027)\n * fiat rate providers:\n   - added CoinGecko.com and CoinCap.io\n   - BitcoinAverage now only provides historical exchange rates for\n     paying customers. Changed default provider to CoinGecko.com (#5188)\n * hardware wallets:\n   - Ledger: Nano X is now recognized (#5140)\n   - KeepKey:\n     - device was not getting detected using Windows binary (#5165)\n     - support firmware 6.0.0+ (#5205)\n   - Trezor: implemented \"seedless\" mode (#5118)\n * Coin Control in Qt: implemented freezing individual UTXOs\n   in addition to freezing addresses (#5152)\n * TrustedCoin (2FA wallets):\n   - better error messages (#5184)\n   - longer signing timeout (#5221)\n * Kivy:\n   - fix bug with local transactions (#5156)\n   - allow selecting fiat rate providers without historical data (#5162)\n * fix CPFP: the fees already paid by the parent were not included in\n   the calculation, so it always overestimated (#5244)\n * Testnet: there is now a warning when the client is started in\n   testnet mode as there were a number of reports of users getting\n   scammed through social engineering (#5295)\n * CoinChooser: performance of creating transactions has been improved\n   significantly for large wallets. (d56917f4)\n * Importing/sweeping WIF keys: stricter checks (#4638, #5290)\n * Electrum protocol: the client's \"user agent\" has been changed from\n   \"3.3.5\" to \"electrum/3.3.5\". Other libraries connecting to servers\n   can consider not \"spoofing\" to be Electrum. (#5246)\n * Several other minor bugfixes and usability improvements.\n\n\n# Release 3.3.4 - (February 13, 2019)\n\n * AppImage: we now also distribute self-contained binaries for x86_64\n   Linux in the form of an AppImage (#5042). The Python interpreter,\n   PyQt5, libsecp256k1, PyCryptodomex, zbar, hidapi/libusb (including\n   hardware wallet libraries) are all bundled. Note that users of\n   hw wallets still need to set udev rules themselves.\n * hw wallets: fix a regression during transaction signing that prompts\n   the user too many times for confirmations (commit 2729909)\n * transactions now set nVersion to 2, to mimic Bitcoin Core\n * fix Qt bug that made all hw wallets unusable on Windows 8.1 (#4960)\n * fix bugs in wallet creation wizard that resulted in corrupted\n   wallets being created in rare cases (#5082, #5057)\n * fix compatibility with Qt 5.12 (#5109)\n\n\n# Release 3.3.3 - (January 25, 2019)\n\n * Do not expose users to server error messages (#4968)\n * Notify users of new releases. Release announcements must be signed,\n   and they are verified byElectrum using a hardcoded Bitcoin address.\n * Hardware wallet fixes (#4991, #4993, #5006)\n * Display only QR code in QRcode Window\n * Fixed code signing on MacOS\n * Randomise locktime of transactions\n\n\n# Release 3.3.2 - (December 21, 2018)\n\n * Fix Qt history export bug\n * Improve network timeouts\n * Prepend server transaction_broadcast error messages with\n   explanatory message. Render error messages as plain text.\n\n\n# Release 3.3.1 - (December 20, 2018)\n\n * Qt: Fix invoices tab crash (#4941)\n * Android: Minor GUI improvements\n\n\n# Release 3.3.0 - Hodler's Edition (December 19, 2018)\n\n * The network layer has been rewritten using asyncio and aiorpcx.\n   In addition to easier maintenance, this makes the client\n   more robust against misbehaving servers.\n * The minimum python version was increased to 3.6\n * The blockchain headers and fork handling logic has been generalized.\n   Clients by default now follow chain based on most work, not length.\n * New wallet creation defaults to native segwit (bech32).\n * Segwit 2FA: TrustedCoin now supports native segwit p2wsh\n   two-factor wallets.\n * RBF batching (opt-in): If the wallet has an unconfirmed RBF\n   transaction, new payments will be added to that transaction,\n   instead of creating new transactions.\n * MacOS: support QR code scanner in binaries.\n * Android APK:\n   - build using Google NDK instead of Crystax NDK\n   - target API 28\n   - do not use external storage (previously for block headers)\n * hardware wallets:\n   - Coldcard now supports spending from p2wpkh-p2sh,\n     fixed p2pkh signing for fw 1.1.0\n   - Archos Safe-T mini: fix #4726 signing issue\n   - KeepKey: full segwit support\n   - Trezor: refactoring and compat with python-trezor 0.11\n   - Digital BitBox: support firmware v5.0.0\n * fix bitcoin URI handling when app already running (#4796)\n * Qt listings rewritten:\n   the History tab now uses QAbstractItemModel, the other tabs use\n   QStandardItemModel. Performance should be better for large wallets.\n * Several other minor bugfixes and usability improvements.\n\n\n# Release 3.2.4 - (December 30, 2018)\n\n * backport anti-phishing measures from master\n\n\n# Release 3.2.3 - (September 3, 2018)\n\n * hardware wallet: the Safe-T mini from Archos is now supported.\n * hardware wallet: the Coldcard from Coinkite is now supported.\n * BIP39 seeds: if a seed extension (aka passphrase) contained\n   multiple consecutive whitespaces or leading/trailing whitespaces\n   then the derived addresses were not following spec. This has been\n   fixed, and affected should move their coins. The wizard will show a\n   warning in this case. (#4566)\n * Revealer: the PRNG used has been changed (#4649)\n * fix Linux distributables: 'typing' was not bundled, needed for python 3.4\n * fix #4626: fix spending from segwit multisig wallets involving a Trezor\n   cosigner when using a custom derivation path\n * fix #4491: on Android, if user had set \"uBTC\" as base unit, app crashed\n * fix #4497: on Android, paying bip70 invoices from cold start did not work\n * Several other minor bugfixes and usability improvements.\n\n\n# Release 3.2.2 - (July 2nd, 2018)\n\n * Fix DNS resolution on Windows\n * Fix websocket bug in daemon\n\n\n# Release 3.2.1 - (July 1st, 2018)\n\n * fix Windows binaries: due to build process changes, the locale files\n   were not included; the language could not be changed from English\n * fix Linux distributables: wordlists were not included (#4475)\n\n\n# Release 3.2.0 - Satoshi's Vision (June 30, 2018)\n\n * If present, libsecp256k1 is used to speed up elliptic curve\n   operations. The library is bundled in the Windows, MacOS, and\n   Android binaries. On Linux, it needs to be installed separately.\n * Two-factor authentication is available on Android. Note that this\n   will only provide additional security if one time passwords are\n   generated on a separate device.\n * Semi-automated crash reporting is implemented for Android.\n * Transactions that are dropped from the mempool are kept in the\n   wallet as 'local', and can be rebroadcast. Previously these\n   transactions were deleted from the wallet.\n * The scriptSig and witness part of transaction inputs are no longer\n   parsed, unless actually needed. The wallet will no longer display\n   'from' addresses corresponding to transaction inputs, except for\n   its own inputs.\n * The partial transaction format has been incompatibly changed. This\n   was needed as for partial transactions the scriptSig/witness has to\n   be parsed, but for signed transactions we did not want to do the\n   parsing.  Users should make sure that all instances of Electrum\n   they use to co-sign or offline sign, are updated together.\n * Signing of partial transactions created with online imported\n   addresses wallets now supports significantly more\n   setups. Previously only online p2pkh address + offline WIF was\n   supported.  Now the following setups are all supported:\n   - online {p2pkh, p2wpkh-p2sh, p2wpkh} address + offline WIF,\n   - online {p2pkh, p2wpkh-p2sh, p2wpkh} address + offline seed/xprv,\n   - online {p2sh, p2wsh-p2sh, p2wsh}-multisig address + offline seeds/xprvs\n     (potentially distributed among several different machines)\n   Note that for the online address + offline HD secret case, you need\n   the offline wallet to recognize the address (i.e. within gap\n   limit).  Having an xpub on the online machine is still the\n   recommended setup, as this allows the online machine to generate\n   new addresses on demand.\n * Segwit multisig for bip39 and hardware wallets is now enabled.\n   (both p2wsh-p2sh and native p2wsh)\n * Ledger: offline signing for segwit inputs (#3302) This has already\n   worked for Trezor and Digital Bitbox. Offline segwit signing can be\n   combined with online imported addresses wallets.\n * Added Revealer plugin. ( https://revealer.cc ) Revealer is a seed\n   phrase back-up solution. It allows you to create a cold, analog,\n   multi-factor backup of your wallet seeds, or of any arbitrary\n   secret. The Revealer utilizes a transparent plastic visual one time\n   pad.\n * Fractional fee rates: the Qt GUI now displays fee rates with 0.1\n   sat/byte precision, and also allows this same resolution in the\n   Send tab.\n * Hardware wallets: a \"show address\" button is now displayed in the\n   Receive tab of the Qt GUI. (#4316)\n * Trezor One: implemented advanced/matrix recovery (#4329)\n * Qt/Kivy: added \"sat\" as optional base unit.\n * Kivy GUI: significant performance improvements when displaying\n   history and address list of large wallets; and transaction dialog\n   of large transactions.\n * Windows: use dnspython to resolve dns instead of socket.getaddrinfo\n   (#4422)\n * Importing minikeys: use uncompressed pubkey instead of compressed\n   (#4384)\n * SPV proofs: check inner nodes not to be valid transactions (#4436)\n * Qt GUI: there is now an optional \"dark\" theme (#4461)\n * Several other minor bugfixes and usability improvements.\n\n\n# Release 3.1.3 - (April 16, 2018)\n\n * Qt GUI: seed word auto-complete during restore\n * Android: fix some crashes\n * performance improvements (wallet, and Qt GUI)\n * hardware wallets: show debug message during device scan\n * Digital Bitbox: enabled BIP84 (p2wpkh) wallet creation\n * add regtest support (via --regtest flag)\n * other minor bugfixes and usability improvements\n\n# Release 3.1.2 - (March 28, 2018)\n\n * Kivy/android: request PIN on startup\n * Improve OSX build process\n * Fix various bugs with hardware wallets\n * Other minor bugfixes\n\n# Release 3.1.1 - (March 12, 2018)\n\n * fix #4031: Trezor T support\n * partial fix #4060: proxy and hardware wallet can't be used together\n * fix #4039: can't set address labels\n * fix crash related to coinbase transactions\n * MacOS: use internal graphics card\n * fix openalias related crashes\n * speed-up capital gains calculations\n * hw wallet encryption: re-prompt for passphrase if incorrect\n * other minor fixes.\n\n\n\n# Release 3.1.0 - (March 5, 2018)\n\n * Memory-pool based fee estimation. Dynamic fees can target a desired\n   depth in the memory pool. This feature is optional, and ETA-based\n   estimates from Bitcoin Core are still available. Note that miners\n   could exploit this feature, if they conspired and filled the memory\n   pool with expensive transactions that never get mined. However,\n   since the Electrum client already trusts an Electrum server with\n   fee estimates, activating this feature does not introduce any new\n   vulnerability. In addition, the client uses a hard threshold to\n   protect itself from servers sending excessive fee estimates. In\n   practice, ETA-based estimates have resulted in sticky fees, and\n   caused many users to overpay for transactions. Advanced users tend\n   to visit (and trust) websites that display memory-pool data in\n   order to set their fees.\n * Capital gains: For each outgoing transaction, the difference\n   between the acquisition and liquidation prices of outgoing coins is\n   displayed in the wallet history. By default, historical exchange\n   rates are used to compute acquisition and liquidation prices. These\n   values can also be entered manually, in order to match the actual\n   price realized by the user. The order of liquidation of coins is\n   the natural order defined by the blockchain; this results in\n   capital gain values that are invariant to changes in the set of\n   addresses that are in the wallet. Any other ordering strategy (such\n   as FIFO, LIFO) would result in capital gain values that depend on\n   the presence of other addresses in the wallet.\n * Local transactions: Transactions can be saved in the wallet without\n   being broadcast. The inputs of local transactions are considered as\n   spent, and their change outputs can be re-used in subsequent\n   transactions. This can be combined with cold storage, in order to\n   create several transactions before broadcasting them. Outgoing\n   transactions that have been removed from the memory pool are also\n   saved in the wallet, and can be broadcast again.\n * Checkpoints: The initial download of a headers file was replaced\n   with hardcoded checkpoints. The wallet uses one checkpoint per\n   retargeting period. The headers for a retargeting period are\n   downloaded only if transactions need to be verified in this period.\n * The 'privacy' and 'priority' coin selection policies have been\n   merged into one. Previously, the 'privacy' policy has been unusable\n   because it was was not prioritizing confirmed coins. The new policy\n   is similar to 'privacy', except that it de-prioritizes addresses\n   that have unconfirmed coins.\n * The 'Send' tab of the Qt GUI displays how transaction fees are\n   computed from transaction size.\n * The wallet history can be filtered by time interval.\n * Replace-by-fee is enabled by default. Note that this might cause\n   some issues with wallets that do not display RBF transactions until\n   they are confirmed.\n * Watching-only wallets and hardware wallets can be encrypted.\n * Semi-automated crash reporting\n * The SSL checkbox option was removed from the GUI.\n * The Trezor T hardware wallet is now supported.\n * BIP84: native segwit p2wpkh scripts for bip39 seeds and hardware\n   wallets can now be created when specifying a BIP84 derivation\n   path. This is usable with Trezor and Ledger.\n * Windows: the binaries now include ZBar, and QR code scanning should work.\n * The Wallet Import Format (WIF) for private keys that was extended in 3.0\n   is changed. Keys in the previous format can be imported, compatibility\n   is maintained. Newly exported keys will be serialized as\n   \"script_type:original_wif_format_key\".\n * BIP32 master keys for testnet once again have different version bytes than\n   on mainnet. For the mainnet prefixes {x,y,Y,z,Z}|{pub,prv}, the\n   corresponding testnet prefixes are   {t,u,U,v,V}|{pub,prv}.\n   More details and exact version bytes are specified at:\n   https://github.com/spesmilo/electrum-docs/blob/master/xpub_version_bytes.rst\n   Note that due to this change, testnet wallet files created with previous\n   versions of Electrum must be considered broken, and they need to be\n   recreated from seed words.\n * A new version of the Electrum protocol is required by the client\n   (version 1.2). Servers using older versions of the protocol will\n   not be displayed in the GUI.\n\n\n# Release 3.0.6 :\n  * Fix transaction parsing bug #3788\n\n# Release 3.0.5 : (Security update)\n\nThis is a follow-up to the 3.0.4 release, which did not completely fix\nissue #3374. Users should upgrade to 3.0.5.\n\n * The JSONRPC interface is password protected\n * JSONRPC commands are disabled if the GUI is running, except 'ping',\n   which is used to determine if a GUI is already running\n\n\n# Release 3.0.4 : (Security update)\n\n * Fix a vulnerability caused by Cross-Origin Resource Sharing (CORS)\n   in the JSONRPC interface. Previous versions of Electrum are\n   vulnerable to port scanning and deanonimization attacks from\n   malicious websites. Wallets that are not password-protected are\n   vulnerable to theft.\n * Bundle QR scanner with Android app\n * Minor bug fixes\n\n# Release 3.0.3\n  * Qt GUI: sweeping now uses the Send tab, allowing fees to be set\n  * Windows: if using the installer binary, there is now a separate shortcut\n    for \"Electrum Testnet\"\n  * Digital Bitbox: added support for p2sh-segwit\n  * OS notifications for incoming transactions\n  * better transaction size estimation:\n    - fees for segwit txns were somewhat underestimated (#3347)\n    - some multisig txns were underestimated\n    - handle uncompressed pubkeys\n  * fix #3321: testnet for Windows binaries\n  * fix #3264: Ledger/dbb signing on some platforms\n  * fix #3407: KeepKey sending to p2sh output\n  * other minor fixes and usability improvements\n\n# Release 3.0.2\n  * Android: replace requests tab with address tab, with access to\n    private keys\n  * sweeping minikeys: search for both compressed and uncompressed\n    pubkeys\n  * fix wizard crash when attempting to reset Google Authenticator\n  * fix #3248: fix Ledger+segwit signing\n  * fix #3262: fix SSL payment request signing\n  * other minor fixes.\n\n# Release 3.0.1\n  * minor bug and usability fixes\n\n# Release 3.0 - Uncanny Valley (November 1st, 2017)\n\n  * The project was migrated to Python3 and Qt5. Python2 is no longer\n    supported. If you cloned the source repository, you will need to\n    run \"python3 setup.py install\" in order to install the new\n    dependencies.\n\n  * Segwit support:\n\n    - Native segwit scripts are supported using a new type of\n      seed. The version number for segwit seeds is 0x100. The install\n      wizard will not create segwit seeds by default; users must\n      opt-in with the segwit option.\n\n    - Native segwit scripts are represented using bech32 addresses,\n      following BIP173. Please note that BIP173 is still in draft\n      status, and that other wallets/websites may not support\n      it. Thus, you should keep a non-segwit wallet in order to be\n      able to receive bitcoins during the transition period. If BIP173\n      ends up being rejected or substantially modified, your wallet\n      may have to be restored from seed. This will not affect funds\n      sent to bech32 addresses, and it will not affect the capacity of\n      Electrum to spend these funds.\n\n    - Segwit scripts embedded in p2sh are supported with hardware\n      wallets or bip39 seeds. To create a segwit-in-p2sh wallet,\n      trezor/ledger users will need to enter a BIP49 derivation path.\n\n    - The BIP32 master keys of segwit wallets are serialized using new\n      version numbers. The new version numbers encode the script type,\n      and they result in the following prefixes:\n\n         * xpub/xprv : p2pkh or p2sh\n         * ypub/yprv : p2wpkh-in-p2sh\n         * Ypub/Yprv : p2wsh-in-p2sh\n         * zpub/zprv : p2wpkh\n         * Zpub/Zprv : p2wsh\n\n      These values are identical for mainnet and testnet; tpub/tprv\n      prefixes are no longer used in testnet wallets.\n\n    - The Wallet Import Format (WIF) is similarly extended for segwit\n      scripts. After a base58-encoded key is decoded to binary, its\n      first byte encodes the script type:\n\n         * 128 + 0: p2pkh\n         * 128 + 1: p2wpkh\n         * 128 + 2: p2wpkh-in-p2sh\n         * 128 + 5: p2sh\n         * 128 + 6: p2wsh\n         * 128 + 7: p2wsh-in-p2sh\n\n      The distinction between p2sh and p2pkh in private key means that\n      it is not possible to import a p2sh private key and associate it\n      to a p2pkh address.\n\n  * A new version of the Electrum protocol is required by the client\n    (version 1.1). Servers using older versions of the protocol will\n    not be displayed in the GUI.\n\n  * By default, transactions are time-locked to the height of the\n    current block. Other values of locktime may be passed using the\n    command line.\n\n\n# Release 2.9.4 (security update)\n  * Backport security fixes from 3.0.5 after vulnerability was\n    discovered in JSONRPC interface.\n\n# Release 2.9.3\n  * fix configuration file issue #2719\n  * fix ledger signing of non-RBF transactions\n  * disable 'spend confirmed only' option by default\n\n# Release 2.9.2\n  * force headers download if headers file is corrupted\n  * add websocket to windows builds\n\n# Release 2.9.1\n  * fix initial headers download\n  * validate contacts on import\n  * command-line option for locktime\n\n# Release 2.9 - Independence (July 27th, 2017)\n  * Multiple Chain Validation: Electrum will download and validate\n    block headers sent by servers that may follow different branches\n    of a fork in the Bitcoin blockchain. Instead of a linear sequence,\n    block headers are organized in a tree structure. Branching points\n    are located efficiently using binary search. The purpose of MCV is\n    to detect and handle blockchain forks that are invisible to the\n    classical SPV model.\n  * The desired branch of a blockchain fork can be selected using the\n    network dialog. Branches are identified by the hash and height of\n    the diverging block. Coin splitting is possible using RBF\n    transaction (a tutorial will be added).\n  * Multibit support: If the user enters a BIP39 seed (or uses a\n    hardware wallet), the full derivation path is configurable in the\n    install wizard.\n  * Option to send only confirmed coins\n  * Qt GUI:\n    - Network dialog uses tabs and gets updated by network events.\n    - The gui tabs use icons\n  * Kivy GUI:\n    - separation between network dialog and wallet settings dialog.\n    - option for manual server entry\n    - proxy configuration\n  * Daemon: The wallet password can be passed as parameter to the\n    JSONRPC API.\n  * Various other bugfixes and improvements.\n\n\n# Release 2.8.3\n  * Fix crash on reading older wallet formats.\n  * TrustedCoin: remove pay-per-tx option\n\n# Release 2.8.2\n  * show paid invoices in history tab\n  * improve CPFP dialog\n  * fixes for trezor, keepkey\n  * other minor bugfixes\n\n# Release 2.8.1\n  * fix Digital Bitbox plugin\n  * fix daemon jsonrpc\n  * fix trustedcoin wallet creation\n  * other minor bugfixes\n\n# Release 2.8.0 (March 9, 2017)\n  * Wallet file encryption using ECIES: A keypair is derived from the\n    wallet password. Once the wallet is decrypted, only the public key\n    is retained in memory, in order to save the encrypted file.\n  * The daemon requires wallets to be explicitly loaded before\n    commands can use them. Wallets can be loaded using: 'electrum\n    daemon load_wallet [-w path]'. This command will require a\n    password if the wallet is encrypted.\n  * Invoices and contacts are stored in the wallet file and are no\n    longer shared between wallets. Previously created invoices and\n    contacts files may be imported from the menu.\n  * Fees improvements:\n    - Dynamic fees are enabled by default.\n    - Child Pays For Parent (CPFP) dialog in the GUI.\n    - RBF is automatically proposed for low fee transactions.\n  * Support for Segregated Witness (testnet only).\n  * Support for Digital Bitbox hardware wallet.\n  * The GUI shows a blue icon when connected using a proxy.\n\n# Release 2.7.18\n  * enforce https on exchange rate APIs\n  * use hardcoded list of exchanges\n  * move 'Freeze' menu to Coins (utxo) tab\n  * various bugfixes\n\n# Release 2.7.17\n  * fix a few minor regressions in the Qt GUI\n\n# Release 2.7.16\n  * add Testnet support (fix #541)\n  * allow daemon to be launched in the foreground (fix #1873)\n  * Qt: use separate tabs for addresses and UTXOs\n  * Qt: update fee slider with a network callback\n  * Ledger: new ui and mobile 2fa validation (neocogent)\n\n# Release 2.7.15\n  * Use fee slider for both static and dynamic fees.\n  * Add fee slider to RBF dialog (fix #2083).\n  * Simplify fee preferences.\n  * Critical: Fix password update issue (#2097). This bug prevents\n    password updates in multisig and 2FA wallets. It may also cause\n    wallet corruption if the wallet contains several master private\n    keys (such as 2FA wallets that have been restored from\n    seed). Affected wallets will need to be restored again.\n\n# Release 2.7.14\n  * Merge exchange_rate plugin with main code\n  * Faster synchronization and transaction creation\n  * Fix bugs #2096, #2016\n\n# Release 2.7.13\n  * fix message signing with imported keys\n  * add size to transaction details window\n  * move plot plugin to main code\n  * minor bugfixes\n\n# Release 2.7.12\n  various bugfixes\n\n# Release 2.7.11\n  * fix offline signing (issue #195)\n  * fix android crashes caused by threads\n\n# Release 2.7.10\n  * various fixes for hardware wallets\n  * improve fee bumping\n  * separate sign and broadcast buttons in Qt tx dialog\n  * allow spaces in private keys\n\n# Release 2.7.9\n  * Fix a bug with the ordering of pubkeys in recent multisig wallets.\n    Affected wallets will regenerate their public keys when opened for\n    the first time. This bug does not affect address generation.\n  * Fix hardware wallet issues #1975, #1976\n\n# Release 2.7.8\n  * Fix a bug with fee bumping\n  * Fix crash when parsing request (issue #1969)\n\n# Release 2.7.7\n  * Fix utf8 encoding bug with old wallet seeds (issue #1967)\n  * Fix delete request from menu (issue #1968)\n\n# Release 2.7.6\n * Fixes a critical bug with imported private keys (issue #1966). Keys\n   imported in Electrum 2.7.x were not encrypted, even if the wallet\n   had a password. If you imported private keys using Electrum 2.7.x,\n   you will need to import those keys again. If you imported keys in\n   2.6 and converted with 2.7.x, you don't need to do anything, but\n   you still need to upgrade in order to be able to spend.\n * Wizard: Hide seed options in a popup dialog.\n\n# Release 2.7.5\n * Add number of confirmations to request status. (issue #1757)\n * In the GUI, refer to passphrase as 'seed extension'.\n * Fix bug with utf8 encoded passphrases.\n * Kivy wizard: add a dialog for seed options.\n * Kivy wizard: add current word to suggestions, because some users\n   don't see the space key.\n\n# Release 2.7.4\n * Fix private key import in wizard\n * Fix Ledger display (issue #1961)\n * Fix old watching-only wallets (issue #1959)\n * Fix Android compatibility (issue #1947)\n\n# Release 2.7.3\n * fix Trezor and Keepkey support in Windows builds\n * fix sweep private key dialog\n * minor fixes: #1958, #1959\n\n# Release 2.7.2\n * fix bug in password update (issue #1954)\n * fix fee slider (issue #1953)\n\n# Release 2.7.1\n * fix wizard crash with old seeds\n * fix issue #1948: fee slider\n\n# Release 2.7.0 (Oct 2 2016)\n\n * The wallet file format has been upgraded. This upgrade is not\n   backward compatible, which means that a wallet upgraded to the 2.7\n   format will not be readable by earlier versions of\n   Electrum. Multiple accounts inside the same wallet are not\n   supported in the new format; the Qt GUI will propose to split any\n   wallet that has several accounts. Make sure that you have saved\n   your seed phrase before you upgrade Electrum.\n * This version introduces a separation between wallets types and\n   keystores types. 'Wallet type' defines the type of Bitcoin contract\n   used in the wallet, while 'keystore type' refers to the method used\n   to store private keys. Therefore, so-called 'hardware wallets' will\n   be referred to as 'hardware keystores'.\n * Hardware keystores:\n   - The Ledger Nano S is supported.\n   - Hardware keystores can be used as cosigners in multi-signature\n     wallets.\n   - Multiple hardware cosigners can be used in the same multisig\n     wallet. One icon per keystore is displayed in the satus bar. Each\n     connected device will co-sign the transaction.\n * Replace-By-Fee: RBF transactions are supported in both Qt and\n   Android. A warning is displayed in the history for transactions\n   that are replaceable, have unconfirmed parents, or that have very\n   low fees.\n * Dynamic fees: Dynamic fees are enabled by default. A slider allows\n   the user to select the expected confirmation time of their\n   transaction. The expected confirmation times of incoming\n   transactions is also displayed in the history.\n * The install wizards of Qt and Kivy have been unified.\n * Qt GUI (Desktop):\n   - A fee slider is visible in the in send tab\n   - The Address tab is hidden by default, can be shown with Ctrl-A\n   - UTXOs are displayed in the Address tab\n * Kivy GUI (Android):\n   - The GUI displays the complete transaction history.\n   - Multisig wallets are supported.\n   - Wallets can be created and deleted in the GUI.\n * Seed phrases can be extended with a user-chosen passphrase. The\n   length of seed phrases is standardized to 12 words, using 132 bits\n   of entropy (including 2FA seeds). In the wizard, the type of the\n   seed is displayed in the seed input dialog.\n * TrustedCoin users can request a reset of their Google Authenticator\n   account, if they still have their seed.\n\n\n# Release 2.6.4 (bugfixes)\n * fix coinchooser bug (#1703)\n * fix daemon JSONRPC (#1731)\n * fix command-line broadcast (#1728)\n * QT: add colors to labels\n\n# Release 2.6.3 (bugfixes)\n * fix command line parsing of transactions\n * fix signtransaction --privkey (#1715)\n\n# Release 2.6.2 (bugfixes)\n * fix Trustedcoin restore from seed (bug #1704)\n * small improvements to kivy GUI\n\n# Release 2.6.1 (bugfixes)\n * fix broadcast command (bug #1688)\n * fix tx dialog (bug #1690)\n * kivy: support old-type seed phrases in wizard\n\n# Release 2.6\n * The source code is relicensed under the MIT Licence\n * First official release of the Kivy GUI, with android APK\n * The old 'android' and 'gtk' GUIs are deprecated\n * Separation between plugins and GUIs\n * The command line uses jsonrpc to communicate with the daemon\n * New command: 'notify <address> <url>'\n * Alternative coin selection policy, designed to help preserve user\n   privacy. Enable it by setting the Coin Selection preference to\n   Privacy.\n * The install wizard has been rewritten and improved\n * Support minikeys as used in Casascius coins for private key import\n   and sweeping\n * Much improved support for TREZOR and KeepKey devices:\n   - full device information display\n   - initialize a new or wiped device in 4 ways:\n     1) device generates a new wallet\n     2) you enter a seed\n     3) you enter a BIP39 mnemonic to generate the seed\n     4) you enter a master private key\n   - KeepKey secure seed recovery (KeepKey only)\n   - change / set / disable PIN\n   - set homescreen (TREZOR only)\n   - set a session timeout.  Once a session has timed out, further use\n     of the device requires your PIN and passhphrase to be re-entered\n   - enable / disable passphrases\n   - device wipe\n   - multiple device support\n\n# Release 2.5.4\n * increase MIN_RELAY_TX_FEE to avoid dust transactions\n\n# Release 2.5.3 (bugfixes)\n * installwizard: do not allow direct copy-paste of the seed\n * installwizard: fix bug #1531 (starting offline)\n\n# Release 2.5.2 (bugfixes)\n * fix bug #1513 (client tries to broadcast transaction while not connected)\n * fix synchronization bug (#1520)\n * fix command line bug (#1494)\n * fixes for exchange rate plugin\n\n# Release 2.5.1 (bugfixes)\n * signatures in transactions were still using the old class\n * make sure that setup.py uses python2\n * fix wizard crash with trustedcoin plugin\n * fix socket infinite loop\n * fix history bug #1479\n\n# Release 2.5\n * Low-S values are used in signatures (BIP 62).\n * The Kivy GUI has been merged into master.\n * The Qt GUI supports multiple windows in the same process. When a\n   new Electrum instance is started, it checks for an already running\n   Electrum process, and connects to it.\n * The network layer uses select(), so all server communication is\n   handled by a single thread. Moreover, the synchronizer, verifier,\n   and exchange rate plugin now run as separate jobs within the\n   networking thread instead of as their own threads.\n * Plugins are revamped, particularly the exchange rate plugin.\n\n# Release 2.4.4\n * Fix bug with TrustedCoin plugin\n\n# Release 2.4.3\n * Support for KeepKey hardware wallet\n * Simplified Chinese wordlist\n * Minor bugfixes and GUI tweaks\n\n# Release 2.4.2\n * Command line can read arguments from stdin (pipe)\n * Speedup fee computation for large transactions\n * Various bugfixes\n\n# Release 2.4.1\n * Use ssl.PROTOCOL_TLSv1\n * Fix DNSSEC issues with ECDSA signatures\n * Replace TLSLite dependency with minimal RSA implementation\n * Dynamic Fees: using estimatefee value returned by server\n * Various GUI improvements\n\n# Release 2.4\n * Payment to DNS names storing a Bitcoin addresses (OpenAlias) is\n   supported directly, without activating a plugin. The verification\n   uses DNSSEC.\n * The DNSSEC verification code was rewritten. The previous code,\n   which was part of the OpenAlias plugin, is vulnerable and should\n   not be trusted (Electrum 2.0 to 2.3).\n * Payment requests can be signed using Bitcoin addresses stored\n   in DNS (OpenAlias). The identity of the requestor is verified using\n   DNSSEC.\n * Payment requests signed with OpenAlias keys can be shared as\n   bitcoin: URIs, if they are simple (a single address-type\n   output). The BIP21 URI scheme is extended with 'name', 'sig',\n   'time', 'exp'.\n * Arbitrary m-of-n multisig wallets are supported (n<=15).\n * Multisig transactions can be signed with TREZOR. When you create\n   the multisig wallet, just enter the xpub of your existing TREZOR\n   wallet.\n * Transaction fees set manually in the GUI are retained, including\n   when the user uses the '!' shortcut.\n * New 'email' plugin, that enables sending and receiving payment\n   requests by email.\n * The daemon supports Websocket notifications of payments.\n\n# Release 2.3.3\n * fix proxy settings (issue #1309)\n * improvements to the transaction dialog:\n    - request password after showing transaction\n    - show change addresses in yellow color\n\n# Release 2.3.2\n * minor bugfixes\n * updated ledger plugin\n * sort inputs/outputs lexicographically (BIP-LI01)\n\n# Release 2.3.1\n * patch a bug with payment requests\n\n# Release 2.3\n * Improved logic for the network layer.\n * More efficient coin selection. Spend oldest coins first, and\n   minimize the number of transaction inputs.\n * Plugins are loaded independently of the GUI. As a result, Openalias,\n   TrustedCoin and TREZOR wallets can be used with the command\n   line. Example: 'electrum payto <openalias> <amount>'\n * The command line has been refactored:\n  - Arguments are parsed with argparse.\n  - The inline help includes a description of options.\n  - Some commands have been renamed. Notably, 'mktx' and 'payto' have\n    been merged into a single command, with a --broadcast option.\n   Type 'electrum --help' for a complete overview.\n * The command line accepts the '!' syntax to send the maximum\n   amount available. It can be combined with the '--from' option.\n   Example: 'payto <destination> ! --from <from_address>'\n * The command line also accepts a '?' shortcut for private keys\n   arguments, that triggers a prompt.\n * Payment requests can be managed with the command line, using the\n   following commands: 'addrequest', 'rmrequest', 'listrequests'.\n   Payment requests can be signed with a SSL certificate, and published\n   as bip70 files in a public web directory. To see the relevant\n   configuration variables, type 'electrum addrequest --help'\n * Commands can be called with jsonrpc, using the 'jsonrpc' gui. The\n   jsonrpc interface may be called by php.\n\n# Release 2.2\n * Show amounts (thousands separators and decimal point)\n   according to locale in GUI\n * Show unmatured coins in balance\n * Fix exchange rates plugin\n * Network layer: refactoring and fixes\n\n# Release 2.1.1\n * patch a bug that prevents new wallet creation.\n * fix connection issue on osx binaries\n\n# Release 2.1\n * Faster startup, thanks to the following optimizations:\n   1. Transaction input/outputs are cached in the wallet file\n   2. Fast X509 certificate parser, not using pyasn1 anymore.\n   3. The Label Sync plugin only requests modified labels.\n * The 'Invoices' and 'Send' tabs have been merged.\n * Contacts are stored in a separate file, shared between wallets.\n * A Search Box is available in the GUI (Ctrl-S)\n * Payment requests have an expiration date and can be exported to\n   BIP70 files.\n * file: scheme support in BIP72 URIs: \"bitcoin:?r=file:///...\"\n * Own addresses are shown in green in the Transaction dialog.\n * Address History dialog.\n * The OpenAlias plugin was improved.\n * Various bug fixes and GUI improvements.\n * A new LabelSync backend is being used an import of the old\n   database was made but since the release came later it's\n   recommended that you do a full push when you upgrade.\n\n# Release 2.0.4 - Minor GUI improvements\n * The password dialog will ask for password again if the user enters\n   a wrong password\n * The Master Public Key dialog displays which keys belong to the\n   wallet, and which are cosigners\n * The transaction dialog will ask to save unsaved transaction\n   received from cosigner pool, when user clicks on 'Close'\n * The multisig restore dialog accepts xprv keys.\n * The network daemon must be started explicitly before using commands\n   that require a connection\n   Example:\n     electrum daemon start\n     electrum getaddressunspent <addr>\n     electrum daemon status\n     electrum daemon stop\n   If a daemon is running, the GUI will use it.\n\n# Release 2.0.3 - bugfixes and minor GUI improvements\n * Do not use daemon threads (fix #960)\n * Add a zoom button to receive tab\n * Add exchange rate conversion to receive tab\n * Use Tor's default port number in default proxy config\n\n# Release 2.0.2 - bugfixes\n * Fix transaction sweep (#1066)\n * Fix thread timing bug (#1054)\n\n# Release 2.0.1 - bugfixes\n * Fix critical bug in TREZOR address derivation: passphrases were not\n   NFKD normalized. TREZOR users who created a wallet protected by a\n   passphrase containing utf-8 characters with diacritics are\n   affected. These users will have to open their wallet with version\n   2.0 and to move their funds to a new wallet.\n * Use a file socket for the daemon (fixes network dialog issues)\n * Fix crash caused by QR scanner icon when zbar not installed.\n * Fix CosignerPool plugin\n * Label Sync plugin: Fix label sharing between multisig wallets\n\n\n# Release 2.0\n\n * Before you upgrade, make sure you have saved your wallet seed on\n   paper.\n\n * Documentation is now hosted on a wiki: http://electrum.orain.org\n\n * New seed derivation method (not compatible with BIP39). The seed\n   phrase includes a version number, that refers to the wallet\n   structure. The version number also serves as a checksum, and it\n   will prevent the import of seeds from incompatible wallets. Old\n   Electrum seeds are still supported.\n\n * New address derivation (BIP32). Standard wallets are single account\n   and use a gap limit of 20.\n\n * Support for Multisig wallets using parallel BIP32 derivations and\n   P2SH addresses (\"2 of 2\", \"2 of 3\").\n\n * Compact serialization format for unsigned or partially signed\n   transactions, that includes the BIP32 master public key and\n   derivation needed to sign inputs. Serialized transactions can be\n   sent to cosigners or to cold storage using QR codes (using Andreas\n   Schildbach's base 43 idea).\n\n * Support for BIP70 payment requests:\n   - Verification of the chain of signatures uses tlslite.\n   - In the GUI, payment requests are shown in the 'Invoices' tab.\n\n * Support for hardware wallets: TREZOR (SatoshiLabs) and Btchip (Ledger).\n\n * Two-factor authentication service by TrustedCoin. This service uses\n   \"2 of 3\" multisig wallets and Google Authenticator. Note that\n   wallets protected by this service can be deterministically restored\n   from seed, without Trustedcoin's server.\n\n * Cosigner Pool plugin: encrypted communication channel for multisig\n   wallets, to send and receive partially signed transactions.\n\n * Audio Modem plugin: send and receive transactions by sound.\n\n * OpenAlias plugin: send bitcoins to aliases verified using DNSSEC.\n\n * New 'Receive' tab in the GUI:\n   - create and manage payment requests, with QR Codes\n   - the former 'Receive' tab was renamed to 'Addresses'\n   - the former Point of Sale plugin is replaced by a resizable\n     window that pops up if you click on the QR code\n\n * The 'Send' tab in the Qt GUI supports transactions with multiple\n   outputs, and raw hexadecimal scripts.\n\n * The GUI can connect to the Electrum daemon: \"electrum -d\" will\n   start the daemon if it is not already running, and the GUI will\n   connect to it. The daemon can serve several clients. It times out\n   if no client uses if for more than 5 minutes.\n\n * The install wizard can be used to import addresses or private\n   keys. A watching-only wallet is created by entering a list of\n   addresses in the wizard dialog.\n\n * New file format: Wallets files are saved as JSON. Note that new\n   wallet files cannot be read by older versions of Electrum. Old\n   wallet files will be converted to the new format; this operation\n   may take some time, because public keys will be derived for each\n   address of your wallet.\n\n * The client accepts servers with a CA-signed SSL certificate.\n\n * ECIES encrypt/decrypt methods, available in the GUI and using\n   the command line:\n      encrypt <pubkey> <message>\n      decrypt <pubkey> <message>\n\n * The Android GUI has received various updates and it is much more\n   stable. Another script was added to Android, called Authenticator,\n   that works completely offline: it reads an unsigned transaction\n   shown as QR code, signs it and shows the result as a QR code.\n\n\n# Release 1.9.8\n\n* Electrum servers were upgraded to version 0.9. The new server stores\n  a Patrica tree of all UTXOs, an idea proposed by Alan Reiner in the\n  bitcointalk forum. This property allows the client to directly\n  request the balance of any address. The new commands are:\n     1. getaddressbalance <address>\n     2. getaddressunspent <address>\n     3. getutxoaddress <txid> <pos>\n\n* Command-line commands that require a connection to the network spawn\n  a daemon, that remains connected and handles subsequent\n  commands. The daemon terminates itself if it remains unused for more\n  than one minute. The purpose of this is to make scripting more\n  efficient. For example, a bash script using many electrum commands\n  will open only one connection.\n\n# Release 1.9.7\n* Fix for offline signing\n* Various bugfixes\n* GUI usability improvements\n* Coinbase Buyback plugin\n\n# Release 1.9.6\n* During wallet creation, do not write seed to disk until it is encrypted.\n* Confirmation dialog if the transaction fee is higher than 1mBTC.\n* bugfixes\n\n# Release 1.9.5\n\n* Coin control: select addresses to send from\n* Put addresses that have been used in a minimized section (Qt GUI)\n* Allow non ascii chars in passwords\n\n\n# Release 1.9.4\nbugfixes: offline transactions\n\n# Release 1.9.3\nbugfixes: connection problems, transactions staying unverified\n\n# Release 1.9.2\n* fix a syntax error\n\n# Release 1.9.1\n* fix regression with --offline mode\n* fix regression with --portable mode: use a dedicated directory\n\n# Release 1.9\n\n* The client connects to multiple servers in order to retrieve block headers and find the longest chain\n* SSL certificate validation (to prevent MITM)\n* Deterministic signatures (RFC 6979)\n* Menu to create/restore/open wallets\n* Create transactions with multiple outputs from CSV (comma separated values)\n* New text gui: stdio\n* Plugins are no longer tied to the qt GUI, they can reach all GUIs\n* Proxy bugs have been fixed\n\n\n# Release 1.8.1\n\n* Notification option when receiving new transactions\n* Confirm dialogue before sending large amounts\n* Alternative datafile location for non-windows systems\n* Fix offline wallet creation\n* Remove enforced tx fee\n* Tray icon improvements\n* Various bugfixes\n\n\n# Release 1.8\n\n* Menubar in classic gui\n* Updated the QR Code plugin to enable offline/online wallets to transmit unsigned/signed transactions via QR code.\n* Fixed bug where never-confirmed transactions prevented further spending\n\n\n# Release 1.7.4\n\n* Increase default fee\n* fix create and restore in command line\n* fix verify message in the gui\n\n\n# Release 1.7.3:\n\n* Classic GUI can display amounts in mBTC\n* Account selector in the classic GUI\n* Changed the way the portable flag uses without supplying a -w argument\n* Classic GUI asks users to enter their seed on wallet creation\n\n\n# Release 1.7.2:\n\n* Transactions that are in the same block are displayed in chronological order in the history.\n* The client computes transaction priority and rejects zero-fee transactions that need a fee.\n* The default fee was lowered to 200 uBTC per kb.\n* Due to an internal format change, your history may be pruned when\n  you open your wallet for the first time after upgrading to 1.7.2. If\n  this is the case, please visit a full server to restore your full\n  history. You will only need to do that once.\n\n\n# Release 1.7.1:  bugfixes.\n\n\n# Release 1.7\n\n* The Classic GUI can be extended with plugins. Developers who want to\nadd new features or third-party services to Electrum are invited to\nwrite plugins. Some previously existing and non-essential features of\nElectrum (point-of-sale mode, qrcode scanner) were removed from the\ncore and are now available as plugins.\n\n* The wallet waits for 2 confirmations before creating new\naddresses. This makes recovery from seed more robust. Note that it\nmight create unwanted gaps if you use Electrum 1.7 together with older\nversions of Electrum.\n\n* An interactive Python console replaces the 'Wall' tab. The provided\npython environment gives users access to the wallet and gui. Most\nelectrum commands are available as python function in the\nconsole. Custom scripts an be loaded with a \"run(filename)\"\ncommand. Tab-completions are available.\n\n* The location of the Electrum folder in Windows changed from\nLOCALAPPDATA to APPDATA. Discussion on this topic can be found here:\nhttps://bitcointalk.org/index.php?topic=144575.0\n\n* Private keys can be exported from within the classic GUI:\n  For a single address, use the address menu (right-click).\n  To export the keys of your entire wallet, use the settings dialog (import/export tab).\n\n* It is possible to create, sign and redeem multisig transaction using the\ncommand line interface.  This is made possible by the following new commands:\n    dumpprivkey, listunspent, createmultisig, createrawtransaction, decoderawtransaction, signrawtransaction\nThe syntax of these commands is similar to their bitcoind counterpart.\nFor an example, see Gavin's tutorial: https://gist.github.com/gavinandresen/3966071\n\n* Offline wallets now work in a way similar to Armory:\n  1. user creates an unsigned transaction using the online (watching-only) wallet.\n  2. unsigned transaction is copied to the offline computer, and signed by the offline wallet.\n  3. signed transaction is copied to the online computer, broadcasted by the online client.\n  4. All these steps can be done via the command line interface or the classic GUI.\n\n* Many command line commands have been renamed in order to make the syntax consistent with bitcoind.\n\n# Release 1.6.2\n\n== Classic GUI\n* Added new version notification\n\n# Release 1.6.1 (11-01-2013)\n\n== Core\n* It is now possible to restore a wallet from MPK (this will create a watching-only wallet)\n* A switch button allows to easily switch between Lite and Classic GUI.\n\n== Classic GUI\n* Seed and MPK help dialogs were rewritten\n* Point of Sale: requested amounts can be expressed in other currencies and are converted to bitcoin.\n\n== Lite GUI\n* The receiving button was removed in favor of a menu item to keep it consistent with the history toggle.\n\n# Release 1.6.0 (07-01-2013)\n\n== Core\n* (Feature) Add support for importing, signing and verifiying compressed keys\n* (Feature) Auto reconnect to random server on disconnect\n* (Feature) Ultimate fallback to HTTP port 80 if TCP doesn't work on any server\n* (Bug) Under rare circumstances changing password with incorrect password could damage wallet\n\n== Lite GUI\n* (Chore) Use blockchain.info for exchange rate data\n* (Feature) added currency conversion for BRL, CNY, RUB\n* (Feature) Saraha theme\n* (Feature) csv import/export for transactions including labels\n\n== Classic GUI\n* (Chore) pruning servers now called \"p\", full servers \"f\" to avoid confusion with terms\n* (Feature) Debits in history shown in red\n* (Feature) csv import/export for transactions including labels\n\n# Release 1.5.8 (02-01-2013)\n\n== Core\n* (Bug) Fix pending address balance on received coins for pruning servers\n* (Bug) Fix history command line option to show output again (regression by SPV)\n* (Chore) Add timeout to blockchain headers file download by HTTP\n* (Feature) new option: -L, --language: default language used in GUI.\n\n== Lite GUI\n* (Bug) Sending to auto-completed contacts works again\n* (Chore) Added version number to title bar\n\n== Classic GUI\n* (Feature) Language selector in options.\n\n# Release 1.5.7 (18-12-2012)\n\n== Core\n* The blockchain headers file is no longer included in the packages, it is downloaded on startup.\n* New command line option: -P or --portable, for portable wallets. With this flag, all preferences are saved to the wallet file, and the blockchain headers file is in the same directory as the wallet\n\n== Lite GUI\n* (Feature) Added the ability to export your transactions to a CSV file.\n* (Feature) Added a label dialog after sending a transaction.\n* (Feature) Reworked receiving addresses; instead of a random selection from one of your receiving addresses a new widget will show listing unused addresses.\n* (Chore)   Removed server selection. With all the new server options a simple menu item does not suffice anymore.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.978515625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nTo report security issues, send an email to the addresses listed below.\n(Not for support. Support requests will be *ignored*.)\n\nPlease send any report to *all* emails listed here.\n\nThe following GPG keys may be used to communicate sensitive information.\n\n\n| Name        | Email                                  | GPG fingerprint                                   |\n|-------------|----------------------------------------|---------------------------------------------------|\n| ThomasV     | thomasv [AT] electrum [DOT] org        | 6694 D8DE 7BE8 EE56 31BE D950 2BD5 824B 7F94 70E6 |\n| SomberNight | somber.night [AT] protonmail [DOT] com | 4AD6 4339 DFA0 5E20 B3F6 AD51 E7B7 48CD AF5E 5ED9 |\n\n\n#### Where to find GPG keys\n\nYou can import a key by running the following command with that\nindividual’s fingerprint: `gpg --recv-keys \"<fingerprint>\"`\n\nThese public keys can also be found in the Electrum git repository,\nin the top-level `pubkeys` folder.\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "electrum-env",
          "type": "blob",
          "size": 1.1962890625,
          "content": "#!/usr/bin/env bash\n#\n# This script creates a virtualenv named 'env' and installs all\n# python dependencies before activating the env and running Electrum.\n# If 'env' already exists, it is activated and Electrum is started\n# without any installations. Additionally, the PYTHONPATH environment\n# variable is set so that system packages such as e.g. apt installed\n# PyQt will also be visible.\n#\n# By default, only pure python dependencies are installed.\n# If you would like more extras to be installed, do e.g.:\n# $ source ./env/bin/activate\n# $ pip install -e '.[crypto,gui,hardware]'\n# $ deactivate\n\nset -e\n\nPYTHON_VER=\"$(python3 -c 'import sys; print(sys.version[:3])')\"\n\ncd $(dirname $0)\nif [ -e ./env/bin/activate ]; then\n    source ./env/bin/activate\n    # FIXME what if this is an old directory and our requirements\n    #       changed in the meantime? should run \"pip install -e . --upgrade\"\nelse\n    python3 -m venv env\n    source ./env/bin/activate\n    pip install -e .\nfi\n\nexport PYTHONPATH=\"$PYTHONPATH:\"\\\n\"/usr/local/lib/python${PYTHON_VER}/site-packages:\"\\\n\"/usr/local/lib/python${PYTHON_VER}/dist-packages:\"\\\n\"/usr/lib/python3/dist-packages:\"\\\n\"/usr/lib/python${PYTHON_VER}/site-packages:\"\n\n\n./run_electrum \"$@\"\n"
        },
        {
          "name": "electrum.desktop",
          "type": "blob",
          "size": 0.6708984375,
          "content": "# If you want Electrum to appear in a Linux app launcher (\"start menu\"), install this by doing:\n# sudo desktop-file-install electrum.desktop\n# Note: This assumes $HOME/.local/bin is in your $PATH\n\n[Desktop Entry]\nComment=Lightweight Bitcoin Client\nExec=electrum %u\nGenericName[en_US]=Bitcoin Wallet\nGenericName=Bitcoin Wallet\nIcon=electrum\nName[en_US]=Electrum Bitcoin Wallet\nName=Electrum Bitcoin Wallet\nCategories=Finance;Network;\nStartupNotify=true\nStartupWMClass=electrum\nTerminal=false\nType=Application\nMimeType=x-scheme-handler/bitcoin;x-scheme-handler/lightning;\nActions=Testnet;\nKeywords=crypto;currency;BTC\n\n[Desktop Action Testnet]\nExec=electrum --testnet %u\nName=Testnet mode\n"
        },
        {
          "name": "electrum",
          "type": "tree",
          "content": null
        },
        {
          "name": "fastlane",
          "type": "tree",
          "content": null
        },
        {
          "name": "org.electrum.electrum.metainfo.xml",
          "type": "blob",
          "size": 1.1142578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  Copyright 2023-2024 Soren Stoutner <soren@debian.org>.\n\n  This file can be validated using `appstreamcli validate org.electrum.electrum.metainfo.xml`.\n\n  Distributed under the MIT software license, see the accompanying file LICENCE or http://www.opensource.org/licenses/mit-license.php.\n-->\n\n<component type=\"desktop-application\">\n  <id>org.electrum.electrum</id>\n\n  <name>Electrum</name>\n  <summary>Bitcoin Wallet</summary>\n\n  <metadata_license>MIT</metadata_license>\n  <project_license>MIT</project_license>\n\n  <description>\n    <p>\n      Electrum is a lightweight Bitcoin wallet focused on speed, with low resource usage and simplifying Bitcoin.\n      Startup times are instant because it operates in conjunction with high-performance servers that handle the most complicated parts of the Bitcoin system.\n    </p>\n  </description>\n\n  <url type=\"homepage\">https://www.electrum.org/</url>\n  <developer id=\"org.electrum\">\n      <name>The Electrum developers</name>\n  </developer>\n\n  <launchable type=\"desktop-id\">electrum.desktop</launchable>\n\n  <content_rating type=\"oars-1.1\" />\n</component>\n"
        },
        {
          "name": "pubkeys",
          "type": "tree",
          "content": null
        },
        {
          "name": "run_electrum",
          "type": "blob",
          "size": 22.267578125,
          "content": "#!/usr/bin/env python3\n# -*- mode: python -*-\n#\n# Electrum - lightweight Bitcoin client\n# Copyright (C) 2011 thomasv@gitorious\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation files\n# (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\nimport os\nimport sys\n\n\nMIN_PYTHON_VERSION = \"3.8.0\"  # FIXME duplicated from setup.py\n_min_python_version_tuple = tuple(map(int, (MIN_PYTHON_VERSION.split(\".\"))))\n\n\nif sys.version_info[:3] < _min_python_version_tuple:\n    sys.exit(\"Error: Electrum requires Python version >= %s...\" % MIN_PYTHON_VERSION)\n\n\nimport warnings\nimport asyncio\nfrom typing import TYPE_CHECKING, Optional\n\n\nscript_dir = os.path.dirname(os.path.realpath(__file__))\nis_pyinstaller = getattr(sys, 'frozen', False)\nis_android = 'ANDROID_DATA' in os.environ\nis_appimage = 'APPIMAGE' in os.environ\nis_binary_distributable = is_pyinstaller or is_android or is_appimage\n# is_local: unpacked tar.gz but not pip installed, or git clone\nis_local = (not is_binary_distributable\n            and os.path.exists(os.path.join(script_dir, \"electrum.desktop\")))\nis_git_clone = is_local and os.path.exists(os.path.join(script_dir, \".git\"))\n\nif is_git_clone:\n    # developers should probably see all deprecation warnings unless explicitly overruled\n    if not any(['DeprecationWarning' in x for x in sys.warnoptions]):\n        warnings.simplefilter('default', DeprecationWarning)\n\nif is_local or is_android:\n    sys.path.insert(0, os.path.join(script_dir, 'packages'))\n\nif is_pyinstaller:\n    # Keep an open file handle for the binary that started us. On Windows, this\n    # prevents users from moving or renaming the exe file while running (doing which\n    # causes ImportErrors and other runtime failures). (see #4072)\n    _file = open(sys.executable, 'rb')\n\n\ndef check_imports():\n    # pure-python dependencies need to be imported here for pyinstaller\n    try:\n        import dns\n        import certifi\n        import qrcode\n        import google.protobuf\n        import aiorpcx\n    except ImportError as e:\n        sys.exit(f\"Error: {str(e)}. Try 'sudo python3 -m pip install <module-name>'\")\n    if not ((0, 22, 0) <= aiorpcx._version < (0, 24)):\n        raise RuntimeError(f'aiorpcX version {aiorpcx._version} does not match required: 0.22.0<=ver<0.24')\n    # the following imports are for pyinstaller\n    from google.protobuf import descriptor\n    from google.protobuf import message\n    from google.protobuf import reflection\n    from google.protobuf import descriptor_pb2\n    # make sure that certificates are here\n    assert os.path.exists(certifi.where())\n\n\nif not is_android:\n    check_imports()\n\n\nsys._ELECTRUM_RUNNING_VIA_RUNELECTRUM = True  # used by logging.py\n\nfrom electrum.logging import get_logger, configure_logging  # import logging submodule first\nfrom electrum import util\nfrom electrum.payment_identifier import PaymentIdentifier\nfrom electrum import constants\nfrom electrum import SimpleConfig\nfrom electrum.wallet_db import WalletDB\nfrom electrum.wallet import Wallet\nfrom electrum.storage import WalletStorage\nfrom electrum.util import print_msg, print_stderr, json_encode, json_decode, UserCancelled\nfrom electrum.util import InvalidPassword\nfrom electrum.commands import get_parser, known_commands, Commands, config_variables\nfrom electrum import daemon\nfrom electrum import keystore\nfrom electrum.util import create_and_start_event_loop, UserFacingException, JsonRPCError\nfrom electrum.i18n import set_language\n\nif TYPE_CHECKING:\n    import threading\n\n    from electrum.plugin import Plugins\n\n_logger = get_logger(__name__)\n\n\n# get password routine\ndef prompt_password(prompt: str, *, confirm: bool = True) -> Optional[str]:\n    import getpass\n    password = getpass.getpass(prompt, stream=None)\n    if password and confirm:\n        password2 = getpass.getpass(\"Confirm: \")\n        if password != password2:\n            sys.exit(\"Error: Passwords do not match.\")\n    if not password:\n        password = None\n    return password\n\n\ndef init_cmdline(config_options, wallet_path, *, rpcserver: bool, config: 'SimpleConfig'):\n    cmdname = config.get('cmd')\n    cmd = known_commands[cmdname]\n\n    if cmdname in ['payto', 'paytomany'] and config.get('unsigned'):\n        cmd.requires_password = False\n\n    if cmdname in ['payto', 'paytomany'] and config.get('broadcast'):\n        cmd.requires_network = True\n\n    # instantiate wallet for command-line\n    storage = WalletStorage(wallet_path)\n\n    if cmd.requires_wallet and not storage.file_exists():\n        print_msg(\"Error: Wallet file not found.\")\n        print_msg(\"Type 'electrum create' to create a new wallet, or provide a path to a wallet with the -w option\")\n        sys_exit(1)\n\n    # important warning\n    if cmd.name in ['getprivatekeys']:\n        print_stderr(\"WARNING: ALL your private keys are secret.\")\n        print_stderr(\"Exposing a single private key can compromise your entire wallet!\")\n        print_stderr(\"In particular, DO NOT use 'redeem private key' services proposed by third parties.\")\n\n    # commands needing password\n    if ((cmd.requires_wallet and storage.is_encrypted() and not rpcserver)\n            or (cmdname == 'load_wallet' and storage.is_encrypted())\n            or (cmdname in ['password', 'unlock'])\n            or (cmd.requires_password and not rpcserver)):\n        if storage.is_encrypted_with_hw_device():\n            # this case is handled later in the control flow\n            password = None\n        elif config.get('password') is not None:\n            password = config.get('password')\n            if password == '':\n                password = None\n        else:\n            password = prompt_password('Password:', confirm=False)\n    else:\n        password = None\n\n    config_options['password'] = config_options.get('password') or password\n\n    if cmd.name == 'password' and 'new_password' not in config_options:\n        new_password = prompt_password('New password:')\n        config_options['new_password'] = new_password\n\n\ndef get_connected_hw_devices(plugins: 'Plugins'):\n    supported_plugins = plugins.get_hardware_support()\n    # scan devices\n    devices = []\n    devmgr = plugins.device_manager\n    for splugin in supported_plugins:\n        name, plugin = splugin.name, splugin.plugin\n        if not plugin:\n            e = splugin.exception\n            _logger.error(f\"{name}: error during plugin init: {repr(e)}\")\n            continue\n        try:\n            u = devmgr.list_pairable_device_infos(handler=None, plugin=plugin)\n        except Exception as e:\n            _logger.error(f'error getting device infos for {name}: {repr(e)}')\n            continue\n        devices += list(map(lambda x: (name, x), u))\n    return devices\n\n\ndef get_password_for_hw_device_encrypted_storage(plugins: 'Plugins') -> str:\n    devices = get_connected_hw_devices(plugins)\n    if len(devices) == 0:\n        print_msg(\"Error: No connected hw device found. Cannot decrypt this wallet.\")\n        sys.exit(1)\n    elif len(devices) > 1:\n        print_msg(\"Warning: multiple hardware devices detected. \"\n                  \"The first one will be used to decrypt the wallet.\")\n    # FIXME we use the \"first\" device, in case of multiple ones\n    name, device_info = devices[0]\n    devmgr = plugins.device_manager\n    try:\n        client = devmgr.client_by_id(device_info.device.id_)\n        client.handler = client.plugin.create_handler(None)\n        return client.get_password_for_storage_encryption()\n    except UserCancelled:\n        sys.exit(0)\n\n\nasync def run_offline_command(config, config_options, plugins: 'Plugins'):\n    cmdname = config.get('cmd')\n    cmd = known_commands[cmdname]\n    password = config_options.get('password')\n    if 'wallet_path' in cmd.options and config_options.get('wallet_path') is None:\n        config_options['wallet_path'] = config.get_wallet_path()\n    if cmd.requires_wallet:\n        storage = WalletStorage(config.get_wallet_path())\n        if storage.is_encrypted():\n            if storage.is_encrypted_with_hw_device():\n                password = get_password_for_hw_device_encrypted_storage(plugins)\n                config_options['password'] = password\n            storage.decrypt(password)\n        db = WalletDB(storage.read(), storage=storage, upgrade=True)\n        wallet = Wallet(db, config=config)\n        config_options['wallet'] = wallet\n    else:\n        wallet = None\n    # check password\n    if cmd.requires_password and wallet.has_password():\n        try:\n            wallet.check_password(password)\n        except InvalidPassword:\n            print_msg(\"Error: This password does not decode this wallet.\")\n            sys.exit(1)\n    if cmd.requires_network:\n        print_msg(\"Warning: running command offline\")\n    # arguments passed to function\n    args = [config.get(x) for x in cmd.params]\n    # decode json arguments\n    if cmdname not in ('setconfig',):\n        args = list(map(json_decode, args))\n    # options\n    kwargs = {}\n    for x in cmd.options:\n        kwargs[x] = (config_options.get(x) if x in ['wallet_path', 'wallet', 'password', 'new_password'] else config.get(x))\n    cmd_runner = Commands(config=config)\n    func = getattr(cmd_runner, cmd.name)\n    result = await func(*args, **kwargs)\n    # save wallet\n    if wallet:\n        wallet.save_db()\n    return result\n\n\ndef init_plugins(config, gui_name):\n    from electrum.plugin import Plugins\n    return Plugins(config, gui_name)\n\n\nloop = None  # type: Optional[asyncio.AbstractEventLoop]\nstop_loop = None  # type: Optional[asyncio.Future]\nloop_thread = None  # type: Optional[threading.Thread]\n\ndef sys_exit(i):\n    # stop event loop and exit\n    if loop:\n        loop.call_soon_threadsafe(stop_loop.set_result, 1)\n        loop_thread.join(timeout=1)\n    sys.exit(i)\n\n\ndef main():\n    global loop, stop_loop, loop_thread\n    # The hook will only be used in the Qt GUI right now\n    util.setup_thread_excepthook()\n    # on macOS, delete Process Serial Number arg generated for apps launched in Finder\n    sys.argv = list(filter(lambda x: not x.startswith('-psn'), sys.argv))\n\n    # old 'help' syntax\n    if len(sys.argv) > 1 and sys.argv[1] == 'help':\n        sys.argv.remove('help')\n        sys.argv.append('-h')\n\n    # old '-v' syntax\n    # Due to this workaround that keeps old -v working,\n    # more advanced usages of -v need to use '-v='.\n    # e.g. -v=debug,network=warning,interface=error\n    try:\n        i = sys.argv.index('-v')\n    except ValueError:\n        pass\n    else:\n        sys.argv[i] = '-v*'\n\n    # read arguments from stdin pipe and prompt\n    for i, arg in enumerate(sys.argv):\n        if arg == '-':\n            if not sys.stdin.isatty():\n                sys.argv[i] = sys.stdin.read()\n                break\n            else:\n                raise Exception('Cannot get argument from stdin')\n        elif arg == '?':\n            sys.argv[i] = input(\"Enter argument:\")\n        elif arg == ':':\n            sys.argv[i] = prompt_password('Enter argument (will not echo):', confirm=False)\n\n    # parse command line\n    parser = get_parser()\n    args = parser.parse_args()\n\n    # config is an object passed to the various constructors (wallet, interface, gui)\n    if is_android:\n        import importlib.util\n        config_options = {\n            'verbosity': '*' if util.is_android_debug_apk() else '',\n            'cmd': 'gui',\n            SimpleConfig.GUI_NAME.key(): 'qml',\n            SimpleConfig.WALLET_USE_SINGLE_PASSWORD.key(): True,\n            SimpleConfig.SWAPSERVER_URL: 'https://swaps.electrum.org/api',\n        }\n        if util.get_android_package_name() == \"org.electrum.testnet.electrum\":\n            # ~hack for easier testnet builds. pkgname subject to change.\n            config_options['testnet'] = True\n    else:\n        config_options = args.__dict__\n        f = lambda key: config_options[key] is not None and key not in config_variables.get(args.cmd, {}).keys()\n        config_options = {key: config_options[key] for key in filter(f, config_options.keys())}\n        if config_options.get(SimpleConfig.NETWORK_SERVER.key()):\n            config_options[SimpleConfig.NETWORK_AUTO_CONNECT.key()] = False\n\n    config_options['cwd'] = cwd = os.getcwd()\n\n    # fixme: this can probably be achieved with a runtime hook (pyinstaller)\n    if is_pyinstaller and os.path.exists(os.path.join(sys._MEIPASS, 'is_portable')):\n        config_options['portable'] = True\n\n    if config_options.get('portable'):\n        if is_local:\n            # running from git clone or local source: put datadir next to main script\n            datadir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'electrum_data')\n        else:\n            # Running a binary or installed source. The most generic but still reasonable thing\n            # is to use the current working directory. (see #7732)\n            # note: The main script is often unpacked to a temporary directory from a bundled executable,\n            #       and we don't want to put the datadir inside a temp dir.\n            # note: Re the portable .exe on Windows, when the user double-clicks it, CWD gets set\n            #       to the parent dir, i.e. we will put the datadir next to the exe.\n            datadir = os.path.join(os.path.realpath(cwd), 'electrum_data')\n        config_options['electrum_path'] = datadir\n\n    if not config_options.get('verbosity'):\n        warnings.simplefilter('ignore', DeprecationWarning)\n\n    config = SimpleConfig(config_options)\n    cmdname = config.get('cmd')\n\n    # set language as early as possible\n    # Note: we are already too late for strings that are declared in the global scope\n    #       of an already imported module. However, the GUI and the plugins at least have\n    #       not been imported yet. (see #4621)\n    # Note: it is ok to call set_language() again later, but note that any call only applies\n    #       to not-yet-evaluated strings.\n    # Note: the CLI is intentionally always non-localized.\n    # Note: Some unit tests might rely on the default non-localized strings.\n    if cmdname == 'gui':\n        gui_name = config.GUI_NAME\n        lang = config.LOCALIZATION_LANGUAGE\n        if not lang:\n            try:\n                from electrum.gui.default_lang import get_default_language\n                lang = get_default_language(gui_name=gui_name)\n                _logger.info(f\"get_default_language: detected default as {lang=!r}\")\n            except ImportError as e:\n                _logger.info(f\"get_default_language: failed. got exc={e!r}\")\n        set_language(lang)\n\n    if config.get('testnet'):\n        constants.BitcoinTestnet.set_as_network()\n    elif config.get('testnet4'):\n        constants.BitcoinTestnet4.set_as_network()\n    elif config.get('regtest'):\n        constants.BitcoinRegtest.set_as_network()\n    elif config.get('simnet'):\n        constants.BitcoinSimnet.set_as_network()\n    elif config.get('signet'):\n        constants.BitcoinSignet.set_as_network()\n\n    # check if we received a valid payment identifier\n    uri = config_options.get('url')\n    if uri and not PaymentIdentifier(None, uri).is_valid():\n        print_stderr('unknown command:', uri)\n        sys.exit(1)\n\n    if cmdname == 'daemon' and config.get(\"detach\"):\n        # detect lockfile.\n        # This is not as good as get_file_descriptor, but that would require the asyncio loop\n        lockfile = daemon.get_lockfile(config)\n        if os.path.exists(lockfile):\n            print_stderr(\"Daemon already running (lockfile detected).\")\n            print_stderr(\"Run 'electrum stop' to stop the daemon.\")\n            sys.exit(1)\n        # Initialise rpc credentials to random if not set yet. This would normally be done\n        # later anyway, but we need to avoid the two sides of the fork setting conflicting random creds.\n        daemon.get_rpc_credentials(config)  # inits creds as side-effect\n        # fork before creating the asyncio event loop\n        try:\n            pid = os.fork()\n        except AttributeError as e:\n            print_stderr(f\"Error: {e!r}\")\n            print_stderr(\"Running daemon in detached mode (-d) is not supported on this platform.\")\n            print_stderr(\"Try running the daemon in the foreground (without -d).\")\n            sys.exit(1)\n        if pid:\n            print_stderr(\"starting daemon (PID %d)\" % pid)\n            loop, stop_loop, loop_thread = create_and_start_event_loop()\n            ready = daemon.wait_until_daemon_becomes_ready(config=config, timeout=5)\n            if ready:\n                sys_exit(0)\n            else:\n                print_stderr(\"timed out waiting for daemon to get ready\")\n                sys_exit(1)\n        else:\n            # redirect standard file descriptors\n            sys.stdout.flush()\n            sys.stderr.flush()\n            si = open(os.devnull, 'r')\n            so = open(os.devnull, 'w')\n            se = open(os.devnull, 'w')\n            os.dup2(si.fileno(), sys.stdin.fileno())\n            os.dup2(so.fileno(), sys.stdout.fileno())\n            os.dup2(se.fileno(), sys.stderr.fileno())\n\n    loop, stop_loop, loop_thread = create_and_start_event_loop()\n\n    try:\n        handle_cmd(\n            cmdname=cmdname,\n            config=config,\n            config_options=config_options,\n        )\n    except Exception:\n        _logger.exception(\"\")\n        sys_exit(1)\n\n\ndef handle_cmd(*, cmdname: str, config: 'SimpleConfig', config_options: dict):\n    if cmdname == 'gui':\n        configure_logging(config)\n        fd = daemon.get_file_descriptor(config)\n        if fd is not None:\n            d = daemon.Daemon(config, fd, start_network=False)\n            try:\n                d.run_gui()\n            except BaseException as e:\n                _logger.exception('daemon.run_gui errored')\n                sys_exit(1)\n            else:\n                sys_exit(0)\n        else:\n            try:\n                result = daemon.request(config, 'gui', (config_options,))\n            except JsonRPCError as e:\n                if e.code == JsonRPCError.Codes.USERFACING:\n                    print_stderr(e.message)\n                elif e.code == JsonRPCError.Codes.INTERNAL:\n                    print_stderr(\"(inside daemon): \" + e.data[\"traceback\"])\n                    print_stderr(e.message)\n                else:\n                    raise Exception(f\"unknown error code {e.code}\")\n                sys_exit(1)\n\n    elif cmdname == 'daemon':\n\n        configure_logging(config)\n        fd = daemon.get_file_descriptor(config)\n        if fd is not None:\n            # run daemon\n            d = daemon.Daemon(config, fd)\n            d.run_daemon()\n            sys_exit(0)\n        else:\n            # FIXME this message is lost in detached mode (parent process already exited after forking)\n            print_msg(\"Daemon already running\")\n            sys_exit(1)\n    else:\n        # command line\n        configure_logging(config, log_to_file=False)  # don't spam logfiles for each client-side RPC, but support \"-v\"\n        cmd = known_commands[cmdname]\n        wallet_path = config.get_wallet_path()\n        if not config.NETWORK_OFFLINE:\n            init_cmdline(config_options, wallet_path, rpcserver=True, config=config)\n            timeout = config.CLI_TIMEOUT\n            try:\n                result = daemon.request(config, 'run_cmdline', (config_options,), timeout)\n            except daemon.DaemonNotRunning:\n                print_msg(\"Daemon not running; try 'electrum daemon -d'\")\n                if not cmd.requires_network:\n                    print_msg(\"To run this command without a daemon, use --offline\")\n                if cmd.name == \"stop\":  # remove lockfile if it exists, as daemon looks dead\n                    lockfile = daemon.get_lockfile(config)\n                    if os.path.exists(lockfile):\n                        print_msg(\"Found lingering lockfile for daemon. Removing.\")\n                        daemon.remove_lockfile(lockfile)\n                sys_exit(1)\n            except JsonRPCError as e:\n                if e.code == JsonRPCError.Codes.USERFACING:\n                    print_stderr(e.message)\n                elif e.code == JsonRPCError.Codes.INTERNAL:\n                    print_stderr(\"(inside daemon): \" + e.data[\"traceback\"])\n                    print_stderr(e.message)\n                else:\n                    raise Exception(f\"unknown error code {e.code}\")\n                sys_exit(1)\n            except Exception as e:\n                _logger.exception(\"error running command (with daemon)\")\n                sys_exit(1)\n        else:\n            if cmd.requires_network:\n                print_msg(\"This command cannot be run offline\")\n                sys_exit(1)\n            lockfile = daemon.get_lockfile(config)\n            if os.path.exists(lockfile):\n                print_stderr(\"Daemon already running (lockfile detected)\")\n                print_stderr(\"Run 'electrum stop' to stop the daemon.\")\n                print_stderr(\"Run this command without --offline to interact with the daemon\")\n                sys_exit(1)\n            init_cmdline(config_options, wallet_path, rpcserver=False, config=config)\n            plugins = init_plugins(config, 'cmdline')\n            coro = run_offline_command(config, config_options, plugins)\n            fut = asyncio.run_coroutine_threadsafe(coro, loop)\n            try:\n                try:\n                    result = fut.result()\n                finally:\n                    plugins.stop()\n                    plugins.stopped_event.wait(1)\n            except UserFacingException as e:\n                print_stderr(str(e))\n                sys_exit(1)\n            except Exception as e:\n                _logger.exception(\"error running command (without daemon)\")\n                sys_exit(1)\n    # print result\n    if isinstance(result, str):\n        print_msg(result)\n    elif result is not None:\n        print_msg(json_encode(result))\n    sys_exit(0)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.2802734375,
          "content": "[easy_install]\n# We don't want setuptools sneakily installing dependencies, invisible to pip.\n# see https://pip.pypa.io/en/stable/reference/pip_install/#controlling-setup-requires\n# see https://github.com/pypa/setuptools/issues/1916#issuecomment-743350566\nindex_url = ''\nfind_links = ''\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.9404296875,
          "content": "#!/usr/bin/env python3\n\n# python setup.py sdist --format=zip,gztar\n\nimport os\nimport sys\nimport platform\nimport importlib.util\nimport argparse\nimport subprocess\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.install import install\n\nMIN_PYTHON_VERSION = \"3.8.0\"\n_min_python_version_tuple = tuple(map(int, (MIN_PYTHON_VERSION.split(\".\"))))\n\n\nif sys.version_info[:3] < _min_python_version_tuple:\n    sys.exit(\"Error: Electrum requires Python version >= %s...\" % MIN_PYTHON_VERSION)\n\nwith open('contrib/requirements/requirements.txt') as f:\n    requirements = f.read().splitlines()\n\nwith open('contrib/requirements/requirements-hw.txt') as f:\n    requirements_hw = f.read().splitlines()\n\n# load version.py; needlessly complicated alternative to \"imp.load_source\":\nversion_spec = importlib.util.spec_from_file_location('version', 'electrum/version.py')\nversion_module = version = importlib.util.module_from_spec(version_spec)\nversion_spec.loader.exec_module(version_module)\n\ndata_files = []\n\nif platform.system() in ['Linux', 'FreeBSD', 'DragonFly']:\n    # note: we can't use absolute paths here. see #7787\n    data_files += [\n        (os.path.join('share', 'applications'),               ['electrum.desktop']),\n        (os.path.join('share', 'pixmaps'),                    ['electrum/gui/icons/electrum.png']),\n        (os.path.join('share', 'icons/hicolor/128x128/apps'), ['electrum/gui/icons/electrum.png']),\n    ]\n\nextras_require = {\n    'hardware': requirements_hw,\n    'gui': ['pyqt6'],\n    'crypto': ['cryptography>=2.6'],\n    'tests': ['pycryptodomex>=3.7', 'cryptography>=2.6', 'pyaes>=0.1a1'],\n    'qml_gui': ['pyqt6', 'Pillow>=8.4.0']\n}\n# 'full' extra that tries to grab everything an enduser would need (except for libsecp256k1...)\nextras_require['full'] = [pkg for sublist in\n                          (extras_require['hardware'], extras_require['gui'], extras_require['crypto'])\n                          for pkg in sublist]\n# legacy. keep 'fast' extra working\nextras_require['fast'] = extras_require['crypto']\n\n\nsetup(\n    name=\"Electrum\",\n    version=version.ELECTRUM_VERSION,\n    python_requires='>={}'.format(MIN_PYTHON_VERSION),\n    install_requires=requirements,\n    extras_require=extras_require,\n    packages=(['electrum',]\n              + [('electrum.'+pkg) for pkg in\n                 find_packages('electrum', exclude=[\"tests\"])]),\n    package_dir={\n        'electrum': 'electrum'\n    },\n    # Note: MANIFEST.in lists what gets included in the tar.gz, and the\n    # package_data kwarg lists what gets put in site-packages when pip installing the tar.gz.\n    # By specifying include_package_data=True, MANIFEST.in becomes responsible for both.\n    include_package_data=True,\n    scripts=['electrum/electrum'],\n    data_files=data_files,\n    description=\"Lightweight Bitcoin Wallet\",\n    author=\"Thomas Voegtlin\",\n    author_email=\"thomasv@electrum.org\",\n    license=\"MIT Licence\",\n    url=\"https://electrum.org\",\n    long_description=\"\"\"Lightweight Bitcoin Wallet\"\"\",\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.2861328125,
          "content": "[tox]\n\n[testenv]\ndeps=\n    pytest\n    coverage\npassenv=\n    PYTHONASYNCIODEBUG\n    PYTHONDEVMODE\ncommands=\n    coverage run --source=electrum \\\n        '--omit=electrum/gui/*,electrum/plugins/*,electrum/scripts/*' \\\n        -m pytest tests -v\n    coverage report\nextras=\n    tests\n    qml_gui\n"
        }
      ]
    }
  ]
}