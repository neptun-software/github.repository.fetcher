{
  "metadata": {
    "timestamp": 1736560738561,
    "page": 416,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SerpentAI/SerpentAI",
      "stars": 6810,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.173828125,
          "content": ".idea\n.vscode\n\n__pycache__/\n*.py[cod]\n\n.venv\n\n.ipynb_checkpoints/\n.pytest_cache/\n\n.python-version\n\nplugins/\ntools\n\n*.egg-info\n\nbuild/\ndist/\nkey.priv\nkey.pub\nnode.pid\npoetry.lock\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.0625,
          "content": "## 2018.1.2\n\n* FEATURE - analytics client is now automatically initialized and in scope for a game agent\n* FIX - analytics WAMP component now uses the analytics topic config key to determine redis key\n* FIX - Locking Tensorflow to appropriate version on Windows\n\n## 2018.1.1\n\n* FIX - use interpolation order 0 in frame transformation pipeline resize\n* FIX - use offshoot selection kwarg when discovering to avoid running code of all plugins\n* FIX - sprite identifier needs to reject sprites that don't have the same shape as query sprite when using constellation of pixels\n* FIX - mild attempt to shutdown frame grabber process on game agent exception\n\n## 2018.1.0\n\nExiting Beta! Changed the versioning scheme to YEAR.QUARTER.RELEASE\n\n* IMPROVEMENT - easier framework installation; only the core gets installed with `serpent setup`; other modules with more involved installation steps can be set up later as needed!\n* IMPROVEMENT - added a `serpent update` command; headache-free framework updates\n* IMPROVEMENT - added a `serpent modules` command to check the installation status of optional modules\n* MAJOR FEATURE - cross-platform gameplay recording with ̀`serpent record`; capture keyboard/mouse inputs alongside frame buffers who are optionally put through a reward function; data is neatly packed in a single HDF5 file when done;\n* FEATURE - a \"force\" kwarg can now be passed to input controller methods to ignore the game focus requirement\n* FEATURE - context frame captures can now be scoped to game plugins' screen regions\n* FEATURE - GameFrame objects now have a timestamp representing the capture time with microsecond precision\n* FEATURE - GameFrame objects can now hold frame bytes (for PNG data) instead of a frame array\n* FEATURE - FrameGrabber get_frames doesn't require shape and dtype information anymore\n* FEATURE - added a mechanism to register custom reward functions in a GameAgent\n* TWEAK - no longer halving width & height in context frame capture; frame transformation pipeline should be used instead\n* TWEAK - files generated from any frame capture operation are now named with the timestamp instead of a random UUID4\n* FIX - CNNInceptionV3Classifier can now also handle uint8 dtypes\n* INTERNAL - reshape metadata and timestamp are now encoded alongside frame bytes; saving a ton of reshape preperation logic\n* INTERNAL - added 'PNG' operator in frame transformation pipelines\n* INTERNAL / REFACTOR - better OS abstractions to control platform-specific snippets\n* NOTEBOOK - added a Jupyter Notebook to demonstrate common operations with the input recording HDF5 files\n\n## 0.1.12b1\n\n* FIX - inceptionv3 context classifier is now using the newer normalize function instead of the old scale_range one\n* REFACTOR / FIX - added a mechanism to handle scancodes for extended keys in NativeWin32 input controller. Fixes arrow keys on Windows :)\n* FIX - added a dtype kwarg to FrameGrabber get_frames. necessary when using 'FLOAT' pipeline operator\n\n## 0.1.11b1\n\n* FEATURE - added 'FLOAT' operator in frame transformation pipelines (needed for DQN)\n* FEATURE - added 'SSIM' mode to sprite identifier\n* FIX - sprite identifier score thresholds now work consistently with all offered modes\n* FIX - resolved an issue with sprite identifier constellation of pixels mode and sprites with alpha channel\n* FIX - added macOS command key to KeyboardKey enum and added a mapping for PyAutoGUI input controller backend\n* FIX - linux window controller will now only consider visible windows when attempting to find game windows\n* FEATURE - better range normalization in serpent.cv: ability to pass in target domain\n\n## 0.1.10b1\n\n* FEATURE - added frame transformation pipelines\n* FIX - DQN and DDQN fixes and Windows compatibility tweaks\n\n## 0.1.9b1\n\n* FIX - emptied out __init__.py for serpent.input_controllers (AKA win32api trying to import on Linux)\n\n## 0.1.8b1\n\n* MAJOR CHANGE - added a KeyboardKey enum containing all valid keys that can be pressed on a standard keyboard; all InputController methods that accept keys now require KeyboardKey items\n* FEATURE - added a fully-compliant native Windows input controller that uses the SendInput DLL function\n* FEATURE - added 'move', 'click_down' & 'click_up' to the InputController protocol; implemented them in PYAUTOGUI & NATIVE_WIN32\n* FEATURE - context classifier validation during training can now be skipped\n* FEATURE - context classifier model checkpoints can now be autosaved\n* FEATURE - locate() from the SpriteLocator can now use screen regions\n* FIX - prevented an empty list to get to a min() call in locate_string\n\n## 0.1.7b1\n\n* FIX - macOS frame reshape error should be resolved; Including the top bar as part of the capture until someone can a programmatic way to get the inner window size.\n* FEATURE - added a Web Browser GameLauncher for people who want to tackle web games\n* FIX - Added a default static seed to the the training of the context classifier dataset split operation\n\n## 0.1.6b1\n\n* REFACTOR - InputController now pivots on a backend to allow extension; PyAutoGUI extracted to a backend (default)\n* FIX - no CUDA initialization unless it's actually needed\n* FEATURE - new `serpent window_name` command to assist in finding the proper kwargs[\"window_name\"] for Game plugins\n* FIX - stopped initializing a VisualDebugger instance on every new GameFrameBuffer. Huge performance gain in frame consumption rate.\n\n## 0.1.5b1\n\n* FIX - DarwinWindowController is_window_focused should use process title and not name\n\n## 0.1.4b1\n\n* FIX - initial applescript to find focused windows was fine but macOS users need to use process name and not the window name\n\n## 0.1.3b1\n\n* FEATURE - added resize_window to all WindowController classes\n* TWEAK - Base Game Agent GameFrameLimiter FPS to 30\n\n## 0.1.2b1\n\n* FEATURE - retina display detection and handling on macOS\n* FIX - most mouse events were missing the window geometry offsets\n* FIX - replaced the applescript used to determine the focused window so the visible title bar name can be used in all cases\n\n## 0.1.1b1\n\n* FIX - conda not found on Windows serpent setup\n* FIX - version locked Cython to version 0.26.1 because Kivy doesn't build on 0.27\n\n## 0.1.0b1\n\n* Initial Beta Release"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7568359375,
          "content": "# Contributing to Serpent.AI\n\nWhile the very warm and unexpected reception from the community is appreciated, Serpent.AI will, for the foreseeable future, remain a personal project of [@nbrochu](https://github.com/nbrochu). It is a labor of love with a vision and as such, the adopted stance on external contributions will be stiffer than usual.\n\nAs a general principle, the following statement will hold true:\n\n### Any unsolicited pull request will be automatically closed\n\nThis being said, there *are* ways of contributing to the project:\n\n## Contributing to the Community Wiki\n\nWhile still moderated, the wiki is currently open to anyone with a GitHub account. Feel free to add tips, gotchas or even entirely new articles. Translation efforts are also extremely appreciated.\n\n## Reporting Issues\n\nFound a bug? Something misbehaving? Reporting issues is a great and accessible way to improve the project for everyone.\n\n## Fixing Issues\n\nPull requests for outstanding issues clearly labeled with *BUG* will be accepted.\n\n## Performance Improvements\n\nPull requests demonstrating and including a significantly faster way of doing something Serpent.AI currently does will be accepted.\n\n## Feature Requests\n\nGot a feature idea? Start a GitHub issue describing your idea. A *SUGGESTION* label will be applied to it. The issue will be used for discussion. Accepted feature ideas will be labeled as *PLANNED FEATURE*\n\n## Help Wanted\n\nIssues can be tagged with a special *HELP WANTED* label. This is a call to anyone in the community to participate. Pull requests addressing those will be accepted.\n\n*If you disapprove of the above contribution policy, keep in mind that the code is totally open with a very permissive license. You are absolutely free to start your own fork, even under a different name.*\n"
        },
        {
          "name": "ISSUE_TEMPLATE.md",
          "type": "blob",
          "size": 0.37890625,
          "content": "Please do not post installation issues here. An entire community is available to help over at [http://discuss.serpent.ai](http://discuss.serpent.ai).\n\n* **Operating System:** Linux / Windows / macOS\n* **Serpent.AI Version:** (e.g. 0.1.12b1)\n* **Game:** (link to Steam page or Game)\n* **Backend:** GPU/CPU\n\n### Expected result\n\n### Encountered result\n\n### Steps to reproduce\n\n1. \n2. \n3. \n\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.046875,
          "content": "MIT License\n\nCopyright (c) 2017-2020 Serpent.AI\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.130859375,
          "content": "![](https://s3.ca-central-1.amazonaws.com/serpent-ai-assets/SerpentFBCover.png)\n\n# Serpent.AI - Game Agent Framework (Python)\n\n[![](https://img.shields.io/badge/project-website-brightgreen.svg?colorB=1bcc6f&longCache=true)](http://serpent.ai)\n[![](https://img.shields.io/badge/project-blog-brightgreen.svg?colorB=1bcc6f&longCache=true)](http://blog.serpent.ai)\n[![](https://img.shields.io/badge/project-wiki-brightgreen.svg?colorB=1bcc6f&longCache=true)](https://github.com/SerpentAI/SerpentAI/wiki)    \n[![](https://img.shields.io/badge/pypi-v2018.1.2-brightgreen.svg?colorB=007ec6&longCache=true)]()\n[![](https://img.shields.io/badge/python-3.6-brightgreen.svg?colorB=007ec6&longCache=true)]()\n[![](https://img.shields.io/badge/license-MIT-brightgreen.svg?colorB=007ec6&longCache=true)]()  \n[![](https://img.shields.io/badge/twitter-@Serpent__AI-brightgreen.svg?colorB=1da1f2&longCache=true)](https://twitter.com/Serpent_AI)\n\n## Update: Revival (May 2020)\n\nDevelopment work has resumed on the framework with the aim of bringing it into 2020: Python 3.8+, Less Dependencies, Ease of Use (Installer, GUI) and much more! Still open-source with a permissive license and looking into a Steam distribution for non-technical users. 🐍\n\n## ~~Warning: End of life (November 2018)~~\n\nSerpent.AI is a simple yet powerful, novel framework to assist developers in the creation of game agents. Turn ANY video game you own  into a sandbox environment ripe for experimentation, all with familiar Python code. The framework's _raison d'être_ is first and foremost to provide a valuable tool for Machine Learning & AI research. It also turns out to be ridiculously fun to use as a hobbyist (and dangerously addictive; a fair warning)!\n\nThe framework features a large assortment of supporting modules that provide solutions to commonly encountered scenarios when using video games as environments  as well as CLI tools to accelerate development. It provides some useful conventions but is absolutely NOT opiniated about what you put in your agents: Want to use the latest, cutting-edge deep reinforcement learning algorithm? ALLOWED. Want to use computer vision techniques, image processing and trigonometry? ALLOWED. Want to randomly press the Left or Right buttons? _sigh_ ALLOWED. To top it all off, Serpent.AI was designed to be entirely plugin-based (for both game support and game agents) so your experiments are actually portable and distributable to your peers and random strangers on the Internet.\n\nSerpent.AI supports Linux, Windows ~~& macOS~~.\n\n_The next version of the framework will officially stop supporting macOS. Apple's aversion to Nvidia in their products means no recent macOS machine can run CUDA, an essential piece of technology for Serpent.AI's real-time training. Other decisions like preventing 32-bit applications from running in Catalina and deprecating OpenGL do not help make a case to support the OS._ \n\n![](https://s3.ca-central-1.amazonaws.com/serpent-ai-assets/demo_isaac.gif)\n\n_Experiment: Game agent learning to defeat Monstro (The Binding of Isaac: Afterbirth+)_\n\n## Background\n\nThe project was born out of admiration for / frustration with [OpenAI Universe](https://github.com/openai/universe). The idea is perfect, let's be honest, but some implementation details leave a lot to be desired. From these, the core tennets of the framework were established:\n\n1. Thou shall run natively. Thou shalt not use Docker containers or VNC servers.\n2. Thou shall allow a user to bring their own games. Thou shalt not wait for licensing deals and special game APIs.\n3. Thou shall encourage diverse and creative approaches. Thou shalt not only enable AI flavors of the month.\n\n_Want to know more about how Serpent.AI came to be? Read [The Story Behind Serpent.AI](http://blog.serpent.ai/the-story-behind-serpent-ai/) on the blog!_\n\n## Documentation\n\nGuides, tutorials and videos are being produced and added to the [GitHub Wiki](https://github.com/SerpentAI/SerpentAI/wiki). It currently is the official source of documentation.\n\n![](https://s3.ca-central-1.amazonaws.com/serpent-ai-assets/demo_ymbab.gif)\n\n_Experiment: Game agent learning to match tiles (You Must Build a Boat)_\n\n_Business Contact: info@serpent.ai_\n"
        },
        {
          "name": "cli.py",
          "type": "blob",
          "size": 10.64453125,
          "content": "import warnings\n\nwarnings.filterwarnings(\"ignore\")  # Silence warnings in CLI\n\nimport os\nimport pathlib\nimport shutil\nimport subprocess\n\n# Some imports are inline in CLI commands to keep initialization times low\n\nimport click\n\nfrom serpent.utilities import (\n    clear_terminal,\n    display_serpent_logo,\n    is_windows,\n    is_linux,\n)\n\n\n# On Windows, disable the Fortran CTRL-C handler that gets installed with SciPy\nif is_windows:\n    os.environ[\"FOR_DISABLE_CONSOLE_CTRL_HANDLER\"] = \"T\"\n\nVERSION = \"2020.2.1\"\n\n\n@click.command(help=\"Perform Serpent.AI setup\")\ndef setup():\n    clear_terminal()\n    display_serpent_logo()\n\n    print(\"\")\n    print(\"Serpent.AI Setup\")\n    print(\"\")\n\n    data_path = _get_data_path()\n    source_path = pathlib.Path(__file__).parent\n\n    if data_path.exists():\n        confirm = input(\n            \"\"\"It appears this machine has already been set up to use Serpent.AI.\nDo you want to continue and remove all previous data? \n(One of: 'YES', 'NO') \"\"\"\n        )\n\n        if confirm.lower() != \"yes\":\n            return\n\n        print(\"\")\n        print(\"Removing previous data...\")\n        print(\"\")\n\n        shutil.rmtree(data_path, ignore_errors=True)\n\n    print(\"Creating Serpent.AI data directory...\")\n    data_path.mkdir()\n\n    print(\"Populating Serpent.AI data directory...\")\n\n    data_path.joinpath(\"plugins/games\").mkdir(parents=True, exist_ok=True)\n    data_path.joinpath(\"plugins/game_agents\").mkdir(parents=True, exist_ok=True)\n    data_path.joinpath(\"plugins/rl_agents\").mkdir(parents=True, exist_ok=True)\n\n    data_path.joinpath(\"game_agents\").mkdir()\n\n    # TODO: Also copy bundled official plugins once we have them\n\n    shutil.copy(\n        source_path.joinpath(\"serpent/config/config.json\"),\n        data_path.joinpath(\"config.json\"),\n    )\n\n    print(\"\")\n    print(\"Serpent.AI Setup Complete!\")\n\n\n@click.command(help=\"Update Serpent.AI to the latest version\")\ndef update():\n    import shlex\n\n    clear_terminal()\n    display_serpent_logo()\n    print(\"\")\n\n    print(\"Updating Serpent.AI to the latest version...\")\n    print(\"\")\n\n    subprocess.call(shlex.split(\"pip install --upgrade SerpentAI\"))\n\n    # TODO: Handle files that were created with the setup commands\n    #       and have likely been modified by the user. This is probably\n    #       not an easy task.\n\n    print(\"\")\n    print(\"Update Successful!\")\n\n\n@click.command(help=\"Launch the Serpent.AI GUI\")\ndef gui():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Download additional tools and modules\")\n@click.argument(\"module\")\ndef download(module):\n    valid_modules = (\"tesseract\",)\n\n    if module not in valid_modules:\n        print(f\"'{module}' is not a valid download module...\")\n        return\n\n    if module == \"tesseract\":\n        if is_windows():\n            print(f\"Downloading module 'tesseract' to tools directory...\")\n            _download_module(\n                \"https://github.com/SerpentAI/SerpentAI/releases/download/optional/tesseract_4.00.00a_win_amd64.zip\",\n                pathlib.Path(\"tools/tesseract.zip\"),\n            )\n        elif is_linux():\n            print(\n                \"Downloading module 'tesseract' not supported on Linux. Please install Tesseract with your package manager.\"\n            )\n\n\n@click.command(help=\"Download and install a plugin from GitHub\")\ndef download_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Open the plugin directory\")\ndef show_plugins():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"List all installed plugins\")\ndef plugins():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"List the installed game plugins\")\ndef games():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"List the installed game agent plugins\")\ndef game_agents():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"List the installed reinforcement learning agent plugins\")\ndef rl_agents():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Display instructions from a game plugin\")\ndef game_instructions():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Launch a game\")\ndef launch():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Train a game agent\")\ndef train():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Play a game using a game agent\")\ndef play():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"Record inputs while playing a game\")\ndef record():\n    # TODO: Implement\n    pass\n\n\n# SDK\n# These commands are aimed at developers wanting to create plugins for Serpent.AI\n@click.command(help=\"SDK - Perform Serpent.AI SDK setup in the current directory\")\ndef sdk_setup():\n    import serpent.ocr\n\n    clear_terminal()\n    display_serpent_logo()\n\n    print(\"\")\n    print(\"Serpent.AI SDK Setup\")\n    print(\"\")\n\n    # First, check for required 3rd-party tools\n    print(\"Checking for required 3rd-party tools...\")\n\n    have_tesseract = serpent.ocr.is_tesseract_available()\n\n    print(f\"Tesseract: {'FOUND' if have_tesseract else 'NOT FOUND'}\")\n    print(\"\")\n\n    if not have_tesseract:\n        print(\"No Tesseract executable could be found... Setup cannot continue.\")\n        print(\"\")\n\n        if is_windows():\n            print(\n                \"For an easy installation of Tesseract, run 'serpent download tesseract\"\n            )\n\n    # Has setup already been performed?\n    if pathlib.Path(\".serpent-sdk\").is_file():\n        confirm = input(\n            \"\"\"The current directory has already been set up to use the Serpent.AI SDK.\nDo you want to continue and potentially overwrite important files? \n(One of: 'YES', 'NO') \"\"\"\n        )\n\n        if confirm.lower() != \"yes\":\n            return\n\n    current_path = pathlib.Path.cwd()\n    source_path = pathlib.Path(__file__).parent\n\n    # Config\n    config_path = pathlib.Path(\"config_sdk.json\")\n\n    if config_path.is_file():\n        config_path.unlink()\n\n    shutil.copy(source_path.joinpath(\"serpent/config/config_sdk.json\"), config_path)\n\n    # Plugins\n    plugins_path = current_path.joinpath(\"plugins\")\n\n    if plugins_path.is_dir():\n        shutil.rmtree(plugins_path, ignore_errors=True)\n\n    current_path.joinpath(\"plugins/games\").mkdir(parents=True, exist_ok=True)\n    current_path.joinpath(\"plugins/game_agents\").mkdir(parents=True, exist_ok=True)\n    current_path.joinpath(\"plugins/rl_agents\").mkdir(parents=True, exist_ok=True)\n\n    # Datasets\n    datasets_path = current_path.joinpath(\"datasets\")\n\n    if datasets_path.is_dir():\n        shutil.rmtree(datasets_path, ignore_errors=True)\n\n    current_path.joinpath(\"datasets/frames\").mkdir(parents=True, exist_ok=True)\n    current_path.joinpath(\"datasets/recordings\").mkdir(parents=True, exist_ok=True)\n\n    # Dot File\n    open(\".serpent-sdk\", \"w\").close()\n\n    print(\"\")\n    print(\"Serpent.AI SDK Setup Complete!\")\n\n\n@click.command(help=\"SDK - Find the window name of a game\")\ndef sdk_window_name():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - CUDA test for Serpent.AI\")\ndef sdk_test_cuda():\n    import torch\n\n    # TODO: Try to also detect incompatible hardware. This likely just detects if CUDA\n    #       is bundled with the installed PyTorch version\n    if torch.cuda.is_available():\n        print(\"Success! CUDA can be used by Serpent.AI\")\n    else:\n        print(\"Failure! CUDA cannot be used by Serpent.AI\")\n\n\n@click.command(help=\"SDK - Test Serpent.AI input capture\")\ndef sdk_test_input_capture():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Capture game frames\")\ndef sdk_capture():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Generate skeleton for a game plugin\")\ndef sdk_generate_game_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Generate skeleton for a game agent plugin\")\ndef sdk_generate_game_agent_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Generate skeleton for a RL agent plugin\")\ndef sdk_generate_rl_agent_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Package game plugin to .spg file\")\ndef sdk_package_game_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Package game agent plugin to .spga file\")\ndef sdk_package_game_agent_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Package RL agent plugin to .sprla file\")\ndef sdk_package_rl_agent_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Install a plugin on the system\")\ndef sdk_install_plugin():\n    # TODO: Implement\n    pass\n\n\n@click.command(help=\"SDK - Uninstall a plugin from the system\")\ndef sdk_uninstall_plugin():\n    # TODO: Implement\n    pass\n\n\ndef _download_module(url, file_path):\n    import requests\n    import tqdm\n\n    path = file_path.parent\n    path.mkdir(parents=True, exist_ok=True)\n\n    r = requests.get(url, stream=True)\n\n    with open(file_path, \"wb\") as f:\n        progress = tqdm.tqdm(\n            unit=\"B\",\n            unit_scale=True,\n            unit_divisor=1024,\n            total=int(r.headers[\"Content-Length\"]),\n        )\n\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:\n                progress.update(len(chunk))\n                f.write(chunk)\n\n        progress.close()\n\n    if str(file_path.as_posix()).endswith(\".zip\"):\n        import zipfile\n\n        with zipfile.ZipFile(file_path, \"r\") as z:\n            z.extractall(path)\n\n        file_path.unlink()\n\n    print(\"Download complete!\")\n\n\ndef _get_data_path():\n    if is_windows():\n        data_path = pathlib.Path(os.getenv(\"APPDATA\")).joinpath(\"Serpent.AI\")\n    elif is_linux():\n        data_path = pathlib.Path(os.getenv(\"HOME\")).joinpath(\".serpent\")\n\n    return data_path.absolute()\n\n\n@click.group(invoke_without_command=True)\n@click.option(\"--version\", help=\"Shows Serpent.AI version\", is_flag=True)\n@click.option(\"--help\", help=\"Shows Serpent.AI CLI commands\", is_flag=True)\n@click.pass_context\ndef cli(context, version, help):\n    if version:\n        print(VERSION)\n        return\n\n    if context.invoked_subcommand is None:\n        print(context.get_help())\n        return\n\n\n# General\ncli.add_command(setup)\ncli.add_command(update)\ncli.add_command(gui)\ncli.add_command(download)\ncli.add_command(show_plugins)\ncli.add_command(plugins)\ncli.add_command(games)\ncli.add_command(game_agents)\ncli.add_command(rl_agents)\ncli.add_command(game_instructions)\ncli.add_command(launch)\ncli.add_command(train)\ncli.add_command(play)\ncli.add_command(record)\n\n# SDK\ncli.add_command(sdk_setup)\ncli.add_command(sdk_window_name)\ncli.add_command(sdk_test_cuda)\ncli.add_command(sdk_test_input_capture)\ncli.add_command(sdk_capture)\ncli.add_command(sdk_generate_game_plugin)\ncli.add_command(sdk_generate_game_agent_plugin)\ncli.add_command(sdk_generate_rl_agent_plugin)\ncli.add_command(sdk_package_game_plugin)\ncli.add_command(sdk_package_game_agent_plugin)\ncli.add_command(sdk_package_rl_agent_plugin)\ncli.add_command(sdk_install_plugin)\ncli.add_command(sdk_uninstall_plugin)\n\n\nif __name__ == \"__main__\":\n    cli()\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "dashboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 4.783203125,
          "content": "[tool.poetry]\nname = \"SerpentAI\"\nversion = \"2020.2.1\"\ndescription = \"Game Agent Development Kit. Helping you create AIs / Bots that learn to play any game you own!\"\nreadme = \"README.md\"\nauthors = [\"Nicholas Brochu <nicholas@serpent.ai>\"]\nlicense = \"MIT\"\nhomepage = \"https://serpent.ai\"\nrepository = \"https://github.com/SerpentAI/SerpentAI\"\ndocumentation = \"https://github.com/SerpentAI/SerpentAI/wiki\"\nkeywords = [\"AI\", \"Artificial Intelligence\", \"Machine Learning\", \"Reinforcement Learning\", \"Games\"]\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Environment :: GPU :: NVIDIA CUDA\",\n    \"Intended Audience :: Developers\",\n    \"Intended Audience :: Science/Research\",\n    \"Natural Language :: English\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: Unix\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Topic :: Software Development :: Libraries :: Application Frameworks\",\n    \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    \"Topic :: Games/Entertainment\"\n]\npackages = [\n    {include = \"serpent\"},\n]\ninclude = [\n    \"serpent/dashboard/cefbrowser/cefbrowser.kv\",\n    \"serpent/templates/SerpentGameAgentPlugin/plugin.py\",\n    \"serpent/templates/SerpentGameAgentPlugin/__init__.py\",\n    \"serpent/templates/SerpentGameAgentPlugin/.gitignore\",\n    \"serpent/templates/SerpentGameAgentPlugin/.gitattributes\",\n    \"serpent/templates/SerpentGameAgentPlugin/files/serpent_game_agent.py\",\n    \"serpent/templates/SerpentGameAgentPlugin/files/__init__.py\",\n    \"serpent/templates/SerpentGameAgentPlugin/files/ml_models/.gitkeep\",\n    \"serpent/templates/SerpentGameAgentPlugin/files/helpers/.gitkeep\",\n    \"serpent/templates/SerpentGamePlugin/plugin.py\",\n    \"serpent/templates/SerpentGamePlugin/__init__.py\",\n    \"serpent/templates/SerpentGamePlugin/.gitignore\",\n    \"serpent/templates/SerpentGamePlugin/files/serpent_game.py\",\n    \"serpent/templates/SerpentGamePlugin/files/__init__.py\",\n    \"serpent/templates/SerpentGamePlugin/files/data/sprites/.gitkeep\",\n    \"serpent/templates/SerpentGamePlugin/files/api/api.py\",\n    \"serpent/templates/SerpentGamePlugin/files/api/__init__.py\",\n    \"serpent/config/config.yml\",\n    \"serpent/config/config.plugins.yml\",\n    \"serpent/offshoot.manifest.json\",\n    \"serpent/offshoot.yml\",\n    \"serpent/crossbar.json\",\n    \"dashboard/database.sqlite\",\n    \"dashboard/serpent.png\",\n    \"vendor/Twisted-20.3.0-cp38-cp38-win_amd64.whl\",  # Temporary until Crossbar removal...\n    \"vendor/lmdb-0.98-cp38-cp38-win_amd64.whl\",  # Temporary until Crossbar removal...\n    \"vendor/setproctitle-1.1.10-cp38-cp38-win_amd64.whl\"  # Temporary until Crossbar removal...\n]\n\n[tool.poetry.dependencies]\npython = \">=3.8\"\n\n# Scientific Computing\nnumpy = \"~1.18\"\nscipy = \"~1.4\"\nscikit-image = \"~0.17.1\"\nscikit-learn = \"~0.22\"\nh5py = \"~2.10\"\n\n## PyTorch (with CUDA 10.1 to accomodate Tensorflow)\n## Cool Stuff: If PyTorch is imported first, importing Tensorflow will detect CUDA + cuDNN bundled with PyTorch\ntorch = [\n    { url = \"https://download.pytorch.org/whl/cu101/torch-1.5.0%2Bcu101-cp38-cp38-win_amd64.whl\", markers = \"sys_platform == 'win32'\" },\n    { url = \"https://download.pytorch.org/whl/cu101/torch-1.5.0%2Bcu101-cp38-cp38-linux_x86_64.whl\", markers = \"sys_platform == 'linux'\" },\n]\ntorchvision = [\n    { url = \"https://download.pytorch.org/whl/cu101/torchvision-0.6.0%2Bcu101-cp38-cp38-win_amd64.whl\", markers = \"sys_platform == 'win32'\" },\n    { url = \"https://download.pytorch.org/whl/cu101/torchvision-0.6.0%2Bcu101-cp38-cp38-linux_x86_64.whl\", markers = \"sys_platform == 'linux'\" },\n]\n## Tensorflow\nprotobuf = \"3.11.3\"  # To resolve dependency issue...\ntensorflow = \"~2.2\"\n\n# CLI\nclick = \"~7.1\"\ntqdm = \"~4.46.0\"\n\n# Screen Capture\nmss = \"~5.0\"\n\n# Window Control\npywin32 = { version = \"227\", markers = \"sys_platform == 'win32'\"}\npython-xlib = { version = \">=0.27\", markers = \"sys_platform == 'linux'\"}\n\n# Input\npyautogui = \"~0.9.50\"\nsneakysnek = \"~0.1.1\"\n\n# OCR\npytesseract = \"~0.3\"\npython-levenshtein-wheels = \"~0.13.1\"\n\n# Dashboard\ncefpython3 = \"~66.0\"\npony = \"~0.7.13\"\n\n# To Be Deprecated\noffshoot = \"~0.1.6\"\nCython = \"~0.29.14\"\nTwisted = { path = \"vendor/Twisted-20.3.0-cp38-cp38-win_amd64.whl\", markers = \"sys_platform == 'win32'\"}  # No 3.8 wheel in PyPI\nlmdb = { path = \"vendor/lmdb-0.98-cp38-cp38-win_amd64.whl\", markers = \"sys_platform == 'win32'\"}  # No 3.8 wheel in PyPI\nsetproctitle = { path = \"vendor/setproctitle-1.1.10-cp38-cp38-win_amd64.whl\", markers = \"sys_platform == 'win32'\"}  # No 3.8 wheel in PyPI\nautobahn = \"18.12.1\"\ncrossbar = \"18.12.1\"\nredis = \"~3.4\"\naioredis = \"~1.3\"\nkivy = \"2.0.0rc2\"\n\n[tool.poetry.dev-dependencies]\npytest = \"~5.4\"\nipython = \"~7.14\"\nnotebook = \"~6.0\"\n\n[tool.poetry.scripts]\nserpent = \"cli:cli\"\n\n[build-system]\nrequires = [\"poetry>=0.12\"]\nbuild-backend = \"poetry.masonry.api\""
        },
        {
          "name": "serpent",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}