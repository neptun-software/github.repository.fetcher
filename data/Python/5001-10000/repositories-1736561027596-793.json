{
  "metadata": {
    "timestamp": 1736561027596,
    "page": 793,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mosaicml/composer",
      "stars": 5227,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.0859375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\npip-wheel-metadata/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\ndocs/path/\ndocs/source/_build/\ndocs/source/api_reference/\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n.python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# Virtual Env\nvenv/\n\n# WandB\nwandb/\n\n# Neptune\n.neptune/\n\n# Spacemacs\n._#*\n.#*\n.vscode/\n\n# Vim\n*.swp\n\n# README backups\nREADME.md.bkp\n\n# OS X\n.DS_Store\n\n# Sphinx\napi_reference/\n\n# Node (for pyright)\nnode_modules/\npackage.json\npackage-lock.json\n\n# pycharm\n.idea/\n\n# composer\ndata/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 3.3642578125,
          "content": "default_language_version:\n  python: python3\nrepos:\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # Ruff version.\n  rev: v0.2.2\n  hooks:\n  - id: ruff\n    args: [--fix, --exit-non-zero-on-fix]\n- repo: https://github.com/google/yapf\n  rev: v0.32.0\n  hooks:\n  - id: yapf\n    name: yapf\n    description: \"A formatter for Python files.\"\n    entry: yapf\n    args: [-i, -vv, -p]  # inplace\n    language: python\n    types: [python]\n    additional_dependencies:\n    - \"toml\"\n- repo: https://github.com/pycqa/isort\n  hooks:\n  - id: isort\n  rev: 5.12.0\n# -   repo: https://github.com/pycqa/pylint\n#     hooks:\n#         - id: pylint\n#           entry: pylint\n#           args: ['composer', 'examples', 'tests']\n#           language: python\n#           types: [python]\n#           require_serial: true\n#     rev: v2.12.2\n- repo: https://github.com/PyCQA/pydocstyle\n  hooks:\n  - id: pydocstyle\n    name: pydocstyle\n    entry: pydocstyle\n    language: python\n    types: [python]\n    exclude: \"(?:tests|.ci|composer\\/algorithms|composer\\/datasets|composer\\/models)\\/.*|composer\\/trainer\\/activation_checkpointing.py\"\n    additional_dependencies:\n    - \"toml\"\n  rev: 6.1.1\n- repo: https://github.com/adrienverge/yamllint.git\n  rev: v1.28.0\n  hooks:\n  - id: yamllint\n    name: yamllint\n    description: This hook runs yamllint.\n    entry: yamllint\n    language: python\n    types: [file, yaml]\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.1.0\n  hooks:\n  - id: check-added-large-files\n  - id: check-ast\n  - id: check-builtin-literals\n  - id: check-case-conflict\n  - id: check-docstring-first\n  - id: check-executables-have-shebangs\n  - id: check-json\n  - id: check-shebang-scripts-are-executable\n  - id: pretty-format-json\n    args:\n    - --autofix\n    - --no-sort-keys\n    - --indent=1\n    - --no-ensure-ascii\n  - id: check-merge-conflict\n  - id: check-symlinks\n  - id: check-toml\n  - id: check-vcs-permalinks\n  - id: check-xml\n  - id: check-yaml\n  - id: debug-statements\n  - id: destroyed-symlinks\n  - id: double-quote-string-fixer\n  - id: end-of-file-fixer\n  - id: fix-byte-order-marker\n  - id: mixed-line-ending\n  - id: trailing-whitespace\n- repo: https://github.com/Lucas-C/pre-commit-hooks\n  rev: v1.5.4\n  hooks:\n  - id: insert-license\n    args:\n    - --license-filepath\n    - .pre-commit/FILE_HEADER\n    - --comment-style\n    - \"#\"\n    - --allow-past-years\n    types: [python]\n    exclude: \"composer\\/trainer\\/activation_checkpointing.py\"\n\n- repo: https://github.com/kynan/nbstripout\n  rev: 0.5.0\n  hooks:\n  - id: nbstripout\n    types:\n    - \"jupyter\"\n    args:\n    # Strip all the metadata that vscode or colab may add to a notebook\n    - --strip-empty-cells\n    - --extra-keys\n    - >\n      metadata.colab metadata.interpreter metadata.accelerator\n      metadata.kernelspec metadata.language_info.version\n      cell.metadata.heading_collapsed metadata.name metadata.nbconvert_exporter\n      metadata.version metadata.vscode\n- repo: local\n  hooks:\n  - id: pyright\n    name: pyright\n    entry: pyright\n    language: node\n    types: [python]\n    pass_filenames: false\n    args: [--warnings]\n    additional_dependencies: [\"pyright@1.1.310\"]\n- repo: https://github.com/trufflesecurity/trufflehog.git\n  rev: v3.40.0\n  hooks:\n  - id: trufflehog\n    name: secret scan\n    entry: trufflehog filesystem ./\n    args:\n    - --only-verified\n    - --fail\n    - --exclude-paths=./.github/secrets/exclude.yaml\n\nexclude: .ci\\/release_tests\\/.*\n"
        },
        {
          "name": ".pre-commit",
          "type": "tree",
          "content": null
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.5,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Specify build system and tool dependencies\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.10\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  builder: html\n  configuration: docs/source/conf.py\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n  install:\n  - method: pip\n    path: .[all]\n"
        },
        {
          "name": ".yamllint.yaml",
          "type": "blob",
          "size": 0.7958984375,
          "content": "yaml-files:\n- \"*.yaml\"\n- \"*.yml\"\n- .yamllint\n\nignore: |\n  wandb\n  docker/build_matrix.yaml\n\nrules:\n  braces:\n    forbid: non-empty\n  brackets:\n    forbid: false\n  colons: enable\n  commas: enable\n  comments: enable\n  comments-indentation: enable\n  document-end:\n    present: false\n  document-start:\n    present: false\n  empty-lines: enable\n  empty-values: disable\n  hyphens: enable\n  indentation:\n    spaces: 2\n    indent-sequences: false\n    check-multi-line-strings: false\n  key-duplicates: enable\n  key-ordering: disable\n  line-length:\n    max: 120\n    allow-non-breakable-words: true\n    allow-non-breakable-inline-mappings: true\n  new-line-at-end-of-file: enable\n  new-lines: enable\n  octal-values: enable\n  quoted-strings:\n    quote-type: double\n    required: false\n  trailing-spaces: enable\n  truthy: disable\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.4423828125,
          "content": "# Community Guidelines\n\nThis repository is governed by MosaicML's community guidelines and code of conduct.\nFor more details, including information on how to report issues affecting the community, please read the\n[MosaicML Community Guidelines](https://docs.google.com/document/d/1h8S9x9bCTsA_H8ourZJy3SQVWy-6z7i28TP5rcZt8RI/edit) and the [MosaicML Code of Conduct](https://docs.google.com/document/d/1aCaMLO65qfMaqP3uDYiUsTauMvBrSKd7qgeYqz458Ew/edit).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.291015625,
          "content": "# Contributing to Composer\n\nThanks for considering contributing to Composer!\n\nIssues tagged with [good first issue](https://github.com/mosaicml/composer/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) are great options to start contributing.\n\nIf you have questions, join us on [Slack](https://join.slack.com/t/mosaicml-community/shared_invite/zt-w0tiddn9-WGTlRpfjcO9J5jyrMub1dg) -- we'll be happy to help you!\n\nWe welcome contributions for bug fixes, new efficient methods you'd like to contribute to the community, or new models and datasets!\n\n## New Algorithms\n\nHave a new algorithm you'd like to contribute to the library as part of your research? We welcome any PRs, and recommend filing an issue with the proposed method or reaching out on Slack first!\n\n## Prerequisites\n\nTo set up the development environment in your local box, run the commands below.\n\n1\\. Install the dependencies needed for testing and linting the code:\n\n<!--pytest.mark.skip-->\n```bash\npip install -e '.[all]'\n```\n\n2\\. Configure [pre-commit](https://pre-commit.com/), which automatically formats code before\neach commit:\n\n<!--pytest.mark.skip-->\n```bash\npre-commit install\n```\n\n## Submitting a Contribution\n\nTo submit a contribution:\n\n1\\. Fork a copy of the [Composer](https://github.com/mosaicml/composer) library to your own account.\n\n2\\. Clone your fork locally and add the mosaicml repo as a remote repository:\n\n<!--pytest.mark.skip-->\n```bash\ngit clone git@github.com:<github_id>/composer.git\ncd composer\ngit remote add upstream https://github.com/mosaicml/composer.git\n```\n\n3\\. Create a branch and make your proposed changes.\n\n<!--pytest.mark.skip-->\n```bash\ngit checkout -b cool-new-feature\n```\n\n4\\. When you are ready, submit a pull request into the composer repository! If merged, we'll reach out to send you some free swag :)\n\n## Pull request (PR) guidelines\n\nWe have some rough guidelines that will make your PR easier to review and more likely to get smoothly merged. Please don't let uncertainty or difficulty with any of these things stop you from opening a PR! We are happy to help you through them :)\n* Self-contained title and description. Please include a concise title and clear PR description. The title should allow someone to understand what the PR changes or does at a glance. The description should allow someone to understand the contents of the PR _without_ looking at the code.\n* If the PR affects output that is displayed to a user of Composer (e.g. console logging or experiment tracker reporting), please include screenshots showing what the new output looks like. UX is important!\n* Include tests. If you are fixing a bug, please add a test that would've caught the bug. If you are adding a new feature, please add unit tests that test the various components of the feature, and also a test that tests the full functionality of the feature.\n* Please consider whether your changes affect the example notebooks or large parts of the code base, and run the daily tests locally if so (`pytest -m 'daily and not remote and not gpu and not vision and not doctest'`)\n* `pre-commit` should help you handle formatting and type checking, but please do make sure you have it installed as described [above](#prerequisites).\n\n## Configuring README Code Snippets\n\nComposer uses [pytest-codeblocks](https://github.com/nschloe/pytest-codeblocks) to test all example code snippets. The pytest-codeblocks repository explains how to annotate code snippets, which supports most `pytest` configurations. For example, if a test requires model training, the GPU mark (`<!--pytest.mark.skip-->`) should be applied.\n\n## Running Tests\n\nTo test your changes locally, run:\n\n* `make test`  # run CPU tests\n* `make test-gpu`  # run GPU tests\n* `cd docs && make doctest`  # run doctests\n\nSome of our checks test distributed training as well. To test these, run:\n\n* `make test-dist WORLD_SIZE=2`  # run 2-cpu distributed tests\n* `make test-dist-gpu WORLD_SIZE=2`  # run 2-gpu distributed tests\n\nThese tests run with the `composer` launcher. We also support `WORLD_SIZE=1`, which would run the tests with the `composer` launcher on a single device.\n\nSee the [Makefile](/Makefile) for more information.\n\nIf you want to run pre-commit hooks manually, which check for code formatting and type annotations, run `pre-commit run --all-files`\n\n### Docker\nTo run the tests in the provided docker containers:\n\n* `docker pull mosaicml/composer` (or an alternative image like `mosaicml/composer:latest_cpu`)\n* `docker run --rm -v ./:/composer --user $(id -u):$(id -g) -it mosaicml/composer`\n* from inside the container\n    * `cd /composer`\n    * `pip install -e .`\n    * `pytest <args>` or `make <args>` to run the desired tests\n\n### Checking documentation\n\nIf your changes affects the documentation, please get a chance to build the docs locally and view it to verify if the changes\nare what you wanted.\n\n<!--pytest.mark.skip-->\n```bash\ncd docs\npip install -e '.[docs]'\nmake clean && make html\nmake host   # open the output link in a browser.\n```\n\n\n## Code Style & Typing\n\nSee the [Composer Style Guide](/STYLE_GUIDE.md) for guidelines on how to structure and format your code.\n\nComposer aims to annotate all functions with type annotations (introduced in\n[PEP 526](https://www.python.org/dev/peps/pep-0526/)). Don't worry if you are not a Python typing expert;\nput in the pull request, and we'll help you with getting the code into shape.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 10.517578125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2022 MosaicML Composer authors\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.052734375,
          "content": "global-exclude **/__pycache__/**\nglobal-exclude *.pyc\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9150390625,
          "content": "# several pytest settings\nWORLD_SIZE ?= 1  # world size for launcher tests\nMASTER_PORT ?= 26000 # port for distributed tests\nPYTHON ?= python3  # Python command\nPYTEST ?= pytest  # Pytest command\nPYRIGHT ?= pyright  # Pyright command. Pyright must be installed seperately -- e.g. `node install -g pyright`\nEXTRA_ARGS ?=  # extra arguments for pytest\nEXTRA_LAUNCHER_ARGS ?= # extra arguments for the composer cli launcher\n\ntest:\n\tLOCAL_WORLD_SIZE=1 $(PYTHON) -m $(PYTEST) $(EXTRA_ARGS)\n\ntest-gpu:\n\tLOCAL_WORLD_SIZE=1 $(PYTHON) -m $(PYTEST) -m gpu $(EXTRA_ARGS)\n\n# runs tests with the launcher\ntest-dist:\n\t$(PYTHON) -m composer.cli.launcher -n $(WORLD_SIZE) --master_port $(MASTER_PORT) $(EXTRA_LAUNCHER_ARGS) -m $(PYTEST) $(EXTRA_ARGS)\n\ntest-dist-gpu:\n\t$(PYTHON) -m composer.cli.launcher -n $(WORLD_SIZE) --master_port $(MASTER_PORT) $(EXTRA_LAUNCHER_ARGS) -m $(PYTEST) -m gpu $(EXTRA_ARGS)\n\n.PHONY: test test-gpu test-dist test-dist-gpu\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.22265625,
          "content": "<br />\n<p align=\"center\">\n    <a href=\"https://github.com/mosaicml/composer#gh-light-mode-only\" class=\"only-light\">\n      <img src=\"./docs/source/_static/logo-light-mode.png\" width=\"50%\"/>\n    </a>\n    <!-- SETUPTOOLS_LONG_DESCRIPTION_HIDE_BEGIN -->\n    <a href=\"https://github.com/mosaicml/composer#gh-dark-mode-only\" class=\"only-dark\">\n      <img src=\"./docs/source/_static/logo-dark-mode.png\" width=\"50%\"/>\n    </a>\n    <!-- SETUPTOOLS_LONG_DESCRIPTION_HIDE_END -->\n</p>\n\n<h2><p align=\"center\">Supercharge your Model Training</p></h2>\n<h3><p align=\"center\">Deep Learning Framework for Training at Scale</p></h3>\n\n<h4><p align='center'>\n<a href=\"https://www.mosaicml.com\">[Website]</a>\n- <a href=\"https://docs.mosaicml.com/projects/composer/en/stable/getting_started/installation.html\">[Getting Started]</a>\n- <a href=\"https://docs.mosaicml.com/projects/composer/\">[Docs]</a>\n- <a href=\"https://www.databricks.com/company/careers/open-positions?department=Mosaic%20AI&location=all\">[We're Hiring!]</a>\n</p></h4>\n\n<p align=\"center\">\n    <a href=\"https://pypi.org/project/mosaicml/\">\n        <img alt=\"PyPi Version\" src=\"https://img.shields.io/pypi/pyversions/mosaicml\">\n    </a>\n    <a href=\"https://pypi.org/project/mosaicml/\">\n        <img alt=\"PyPi Package Version\" src=\"https://img.shields.io/pypi/v/mosaicml\">\n    </a>\n    <a href=\"https://pepy.tech/project/mosaicml/\">\n        <img alt=\"PyPi Downloads\" src=\"https://static.pepy.tech/personalized-badge/mosaicml?period=month&units=international_system&left_color=grey&right_color=blue&left_text=Downloads/month\">\n    </a>\n    <a href=\"https://docs.mosaicml.com/projects/composer/en/stable/\">\n        <img alt=\"Documentation\" src=\"https://readthedocs.org/projects/composer/badge/?version=stable\">\n    </a>\n    <a href=\"https://dub.sh/mcomm\">\n        <img alt=\"Chat @ Slack\" src=\"https://img.shields.io/badge/slack-chat-2eb67d.svg?logo=slack\">\n    </a>\n    <a href=\"https://github.com/mosaicml/composer/blob/dev/LICENSE\">\n        <img alt=\"License\" src=\"https://img.shields.io/badge/License-Apache%202.0-green.svg?logo=slack\">\n    </a>\n</p>\n<br />\n\n# **👋 Welcome**\n\nComposer is an open-source deep learning training library by [MosaicML](https://www.mosaicml.com/). Built on top of PyTorch, the Composer library makes it easier to implement distributed training workflows on large-scale clusters.\n\nWe built Composer to be **optimized for scalability and usability**, integrating best practices for efficient, multi-node training. By abstracting away low-level complexities like parallelism techniques, distributed data loading, and memory optimization, you can focus on training modern ML models and running experiments without slowing down.\n\nWe recommend using Composer to speedup your experimentation workflow if you’re training neural networks of any size, including:\n\n- Large Language Models (LLMs)\n- Diffusion models\n- Embedding models (e.g. BERT)\n- Transformer-based models\n- Convolutional Neural Networks (CNNs)\n\nComposer is heavily used by the MosaicML research team to train state-of-the-art models like MPT, and we open-sourced this library to enable the ML community to do the same. This framework is used by organizations in both the tech industry and the academic sphere and is continually updated with new features, bug fixes, and stability improvements for production workloads.\n\n# **🔑 Key Features**\n![Composer is to give you better workflows with the ability to maximize scale and customizability.](docs/source/_static/images/key_features.png)\n\nWe designed Composer from the ground up for modern deep learning workloads. Gone are the days of AlexNet and ResNet, when state-of-the-art models could be trained on a couple of desktop GPUs. Today, developing the latest and greatest deep learning models often requires cluster-scale hardware — but with Composer’s help, you’ll hardly notice the difference.\n\nThe heart of Composer is our Trainer abstraction: a highly optimized PyTorch training loop designed to allow both you and your model to iterate faster. Our trainer has simple ways for you to configure your parallelization scheme, data loaders, metrics, loggers, and more.\n\n## Scalability\n\nWhether you’re training on 1 GPU or 512 GPUs, 50MB or 10TB of data - Composer is built to keep your workflow simple.\n\n- [**FSDP**](https://docs.mosaicml.com/projects/composer/en/stable/notes/distributed_training.html#fullyshardeddataparallel-fsdp): For large models that are too large to fit on GPUs, Composer has integrated PyTorch [FullyShardedDataParallelism](https://docs.mosaicml.com/projects/composer/en/stable/notes/distributed_training.html#fullyshardeddataparallel-fsdp) into our trainer and made it simple to efficiently parallelize custom models. We’ve found FSDP is competitive performance-wise with much more complex parallelism strategies. Alternatively, Composer also supports standard PyTorch distributed data parallelism (DDP) execution.\n- [**Elastic sharded checkpointing**](https://docs.mosaicml.com/projects/composer/en/stable/notes/distributed_training.html#saving-and-loading-sharded-checkpoints-with-fsdp): Save on eight GPUs, resume on sixteen. Composer supports elastic sharded checkpointing, so you never have to worry if your sharded saved state is compatible with your new hardware setup.\n- **Data streaming:** Working with large datasets? Download datasets from cloud blob storage on the fly by integrating with MosaicML [StreamingDataset](https://github.com/mosaicml/streaming) during model training.\n\n## Customizability\n\nOther high-level deep learning trainers provide simplicity at the cost of rigidity. When you want to add your own features, their abstractions get in your way. Composer, on the other hand, provides simple ways for you to customize our Trainer to your needs.\n\n![Composer’s training loop has a series of events that occur at each stage in the training process.](docs/source/_static/images/traning_loop.png)\n\n***Fig. 1:** Composer’s training loop has a series of events that occur at each stage in the training process. Callbacks are functions that users write to run at specific events. For example, our [Learning Rate Monitor Callback](https://docs.mosaicml.com/projects/composer/en/stable/api_reference/generated/composer.callbacks.LRMonitor.html#composer.callbacks.LRMonitor) logs the learning rate at every BATCH_END event.*\n\n- [**Callbacks**](https://docs.mosaicml.com/projects/composer/en/stable/trainer/callbacks.html): Composer’s callback system allows you to insert custom logic at any point in the training loop. We’ve written callbacks to monitor memory usage, log and visualize images, and estimate your model’s remaining training time, to name a few. This feature is popular among researchers who want to implement and experiment with custom training techniques.\n- [**Speedup algorithms**](https://docs.mosaicml.com/projects/composer/en/stable/examples/custom_speedup_methods.html): We draw from the latest research to create a collection of algorithmic speedups. Stack these speedups into MosaicML recipes to boost your training speeds. Our team has open-sourced the optimal combinations of speedups for different types of models.\n    - **8x speedup: Stable Diffusion**\n        - $200k original SD2 cost —> $50k ([Blog](https://www.mosaicml.com/blog/diffusion))\n    - **7x speedup: ResNet-50 on ImageNet**\n        - 3h33m —> 25m on 8xA100 ([Blog](https://www.mosaicml.com/blog/mosaic-resnet))\n    - **8.8x speedup: BERT-Base Pretraining**\n        - 10h —> 1.13h on 8xA100 ([Blog](https://www.mosaicml.com/blog/mosaicbert))\n    - **5.4x speedup: DeepLab v3 on ADE20K**\n        - 3h30m —> 39m on 8xA100 ([Blog](https://www.mosaicml.com/blog/behind-the-scenes))\n\n## Better workflows\n\nComposer is built to automate away low-level pain points and headaches so you can focus on the important (and fun) parts of deep learning and iterate faster.\n\n- [**Auto-resumption**](https://docs.mosaicml.com/projects/composer/en/stable/notes/resumption.html): Failed training run? Have no fear — just re-run your code, and Composer will automatically resume from your latest saved checkpoint.\n- [**CUDA OOM Prevention**](https://docs.mosaicml.com/projects/composer/en/stable/examples/auto_microbatching.html): Say goodbye to out-of-memory errors. Set your microbatch size to “auto”, and Composer will automatically select the biggest one that fits on your GPUs.\n- **[Time Abstractions](https://docs.mosaicml.com/projects/composer/en/latest/trainer/time.html):** Ever messed up your conversion between update steps, epochs, samples, and tokens? Specify your training duration with custom units (epochs, batches, samples, and tokens) in your training loop with our `Time` class.\n\n## Integrations\n\nIntegrate with the tools you know and love for experiment tracking and data streaming.\n\n- **Cloud integrations**: Our Checkpointing and logging features have first-class support for remote storage and loading from Cloud bucket (OCI, GCP, AWS S3).\n- **********Experiment tracking:********** Weights and Biases, MLFlow, CometML, and neptune.ai — the choice is yours, easily log your data to your favorite platform.\n\n# **🚀 Getting Started**\n\n## **📍**Prerequisites\n\nComposer is designed for users who are comfortable with Python and have basic familiarity with deep learning fundamentals and PyTorch.\n\n**********************************************Software requirements:**********************************************  A recent version of PyTorch.\n\n**********************************************Hardware requirements:**********************************************  System with CUDA-compatible GPUs (AMD + RoCM coming soon!). Composer can run on CPUs, but for full benefits, we recommend using it on hardware accelerators.\n\n## **💾 Installation**\n\nComposer can be installed with `pip`:\n\n<!--pytest.mark.skip-->\n```bash\npip install mosaicml\n```\n\nTo simplify the environment setup for Composer, we also provide a set of [pre-built Docker images](https://docs.mosaicml.com/projects/composer/en/stable/getting_started/installation.html#docker). We *highly recommend* you use our Docker images.\n\n## **🏁 Quick Start**\n\nHere is a code snippet demonstrating our Trainer on the MNIST dataset.\n\n<!--pytest.mark.filterwarnings(r'ignore:Some targets have less than 1 total probability:UserWarning')-->\n<!--pytest.mark.filterwarnings('ignore:Cannot split tensor of length .* into batches of size 128.*:UserWarning')-->\n```python\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader\n\nfrom composer import Trainer\nfrom composer.models import ComposerClassifier\nfrom composer.algorithms import LabelSmoothing, CutMix, ChannelsLast\n\nclass Model(nn.Module):\n    \"\"\"Toy convolutional neural network architecture in pytorch for MNIST.\"\"\"\n\n    def __init__(self, num_classes: int = 10):\n        super().__init__()\n\n        self.num_classes = num_classes\n\n        self.conv1 = nn.Conv2d(1, 16, (3, 3), padding=0)\n        self.conv2 = nn.Conv2d(16, 32, (3, 3), padding=0)\n        self.bn = nn.BatchNorm2d(32)\n        self.fc1 = nn.Linear(32 * 16, 32)\n        self.fc2 = nn.Linear(32, num_classes)\n\n    def forward(self, x):\n        out = self.conv1(x)\n        out = F.relu(out)\n        out = self.conv2(out)\n        out = self.bn(out)\n        out = F.relu(out)\n        out = F.adaptive_avg_pool2d(out, (4, 4))\n        out = torch.flatten(out, 1, -1)\n        out = self.fc1(out)\n        out = F.relu(out)\n        return self.fc2(out)\n\ntransform = transforms.Compose([transforms.ToTensor()])\ndataset = datasets.MNIST(\"data\", train=True, download=True, transform=transform)\ntrain_dataloader = DataLoader(dataset, batch_size=128)\n\ntrainer = Trainer(\n    model=ComposerClassifier(module=Model(), num_classes=10),\n    train_dataloader=train_dataloader,\n    max_duration=\"2ep\",\n    algorithms=[\n        LabelSmoothing(smoothing=0.1),\n        CutMix(alpha=1.0),\n        ChannelsLast(),\n    ],\n)\ntrainer.fit()\n```\n\nNext, check out our [Getting Started Colab](https://colab.research.google.com/github/mosaicml/composer/blob/9f594876f957c912758e540598ac9f47a468c39d/examples/getting_started.ipynb) for a walk-through of Composer’s main features. In this tutorial, we will cover the basics of the Composer Trainer:\n\n- Dataloader\n- Trainer\n- Optimizer and Scheduler\n- Logging\n- Training a baseline model\n- Speeding up training\n\n## **📚 Learn more**\n\nOnce you’ve completed the Quick Start, you can go through the below tutorials or our [documentation](https://docs.mosaicml.com/projects/composer/en/stable/) to further familiarize yourself with Composer.\n\nIf you have any questions, please feel free to reach out to us on our [Community Slack](https://dub.sh/mcomm)!\n\nHere are some resources actively maintained by the Composer community to help you get started:\n<table>\n<thead>\n  <tr>\n      <th><b>Resource</b></th>\n      <th><b>Details</b></th>\n  </tr>\n</thead>\n<tbody>\n    <tr>\n    <td><a href=\"https://colab.research.google.com/github/mosaicml/composer/blob/dev/examples/finetune_huggingface.ipynb\" target=\"_blank\" rel=\"noopener noreferrer\">Training BERTs with Composer and 🤗 </a></td>\n    <td>A Colab Notebook showing how to train BERT models with Composer and 🤗!</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://github.com/mosaicml/llm-foundry/blob/main/TUTORIAL.md\" target=\"_blank\" rel=\"noopener noreferrer\">Pretraining and Finetuning an LLM Tutorial</a></td>\n    <td>A tutorial from MosaicML’s LLM Foundry, using MosaicML Composer, StreamingDataset, and MCLI on training and evaluating LLMs.</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://docs.mosaicml.com/projects/composer/en/stable/examples/migrate_from_ptl.html\" target=\"_blank\" rel=\"noopener noreferrer\">Migrating from PyTorch Lightning</a></td>\n    <td>A tutorial is to illustrating a path from working in PyTorch Lightning to working in Composer.</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://docs.mosaicml.com/projects/composer/en/stable/examples/finetune_huggingface.html\" target=\"_blank\" rel=\"noopener noreferrer\">Finetuning and Pretraining HuggingFace Models</a></td>\n    <td>Want to use Hugging Face models with Composer? No problem. Here, we’ll walk through using Composer to fine-tune a pretrained Hugging Face BERT model.</td>\n  </tr>\n  <tr>\n    <td><a href=\"https://colab.research.google.com/github/mosaicml/composer/blob/dev/examples/custom_speedup_methods.ipynb\" target=\"_blank\" rel=\"noopener noreferrer\">Building Speedup Methods</a></td>\n    <td>A Colab Notebook showing how to build new training modifications on top of Composer</td>\n  </tr>\n\n</tbody>\n</table>\n\n# 🛠️ For Best Results, Use within the Databricks & MosaicML Ecosystem\n\nComposer can be used on its own, but for the smoothest experience we recommend using it in combination with other components of the MosaicML ecosystem:\n\n![We recommend that you train models with Composer, MosaicML StreamingDatasets, and Mosaic AI training.](docs/source/_static/images/ecosystem.png)\n\n- [**Mosaic AI training**](https://www.databricks.com/product/machine-learning/mosaic-ai-training) (MCLI)- Our proprietary Command Line Interface (CLI) and Python SDK for orchestrating, scaling, and monitoring the GPU nodes and container images executing training and deployment. Used by our customers for training their own Generative AI models.\n    - **To get started, [reach out here](https://www.databricks.com/company/contact) and check out our [Training](https://www.databricks.com/product/machine-learning/mosaic-ai-training) product pages**\n- [**MosaicML LLM Foundry**](https://github.com/mosaicml/llm-foundry) - This open source repository contains code for training, finetuning, evaluating, and preparing LLMs for inference with [Composer](https://github.com/mosaicml/composer). Designed to be easy to use, efficient and flexible, this codebase is designed to enable rapid experimentation with the latest techniques.\n- [**MosaicML StreamingDataset**](https://github.com/mosaicml/streaming) - Open-source library for fast, accurate streaming from cloud storage.\n- [**MosaicML Diffusion**](https://github.com/mosaicml/diffusion) - Open-source code to train your own Stable Diffusion model on your own data.  Learn more via our blogs: ([Results](https://www.mosaicml.com/blog/stable-diffusion-2) , [Speedup Details](https://www.mosaicml.com/blog/diffusion))\n\n# **🏆 Project Showcase**\n\nHere are some projects and experiments that used Composer. Got something to add? Share in our [Community Slack](https://dub.sh/mcomm)!\n\n- [**MPT Foundation Series:**](https://www.mosaicml.com/mpt) Commercially usable open source LLMs, optimized for fast training and inference and trained with Composer.\n    - [MPT-7B Blog](https://www.mosaicml.com/blog/mpt-7b)\n    - [MPT-7B-8k Blog](https://www.mosaicml.com/blog/long-context-mpt-7b-8k)\n    - [MPT-30B Blog](https://www.mosaicml.com/blog/mpt-30b)\n- [**Mosaic Diffusion Models**](https://www.mosaicml.com/blog/training-stable-diffusion-from-scratch-costs-160k): see how we trained a stable diffusion model from scratch for <$50k\n- [**replit-code-v1-3b**](https://huggingface.co/replit/replit-code-v1-3b): A 2.7B Causal Language Model focused on **Code Completion,** trained by Replit on Mosaic AI training in 10 days.\n- **BabyLLM:** the first LLM to support both Arabic and English. This 7B model was trained by MetaDialog on the world’s largest Arabic/English dataset to improve customer support workflows ([Blog](https://blogs.nvidia.com/blog/2023/08/31/generative-ai-startups-africa-middle-east/))\n- [**BioMedLM**](https://www.mosaicml.com/blog/introducing-pubmed-gpt): a domain-specific LLM for Bio Medicine built by MosaicML and [Stanford CRFM](https://crfm.stanford.edu/)\n\n# 💫 Contributors\n\nComposer is part of the broader Machine Learning community, and we welcome any contributions, pull requests, or issues!\n\nTo start contributing, see our [Contributing](https://github.com/mosaicml/composer/blob/dev/CONTRIBUTING.md) page.\n\nP.S.: [We're hiring](https://www.databricks.com/company/careers/open-positions?department=Mosaic%20AI&location=all)!\n\n# ❓FAQ\n\n- **What is the best tech stack you recommend when training large models?**\n    - We recommend that users combine components of the MosaicML ecosystem for the smoothest experience:\n        - Composer\n        - [StreamingDataset](https://github.com/mosaicml/streaming)\n        - [MCLI](https://www.databricks.com/product/machine-learning/mosaic-ai-training) (Databricks Mosaic AI Training)\n- **How can I get community support for using Composer?**\n    - You can join our [Community Slack](https://dub.sh/mcomm)!\n- **How does Composer compare to other trainers like NeMo Megatron and PyTorch Lightning?**\n    - We built Composer to be optimized for both simplicity and efficiency. Community users have shared that they enjoy Composer for its capabilities and ease of use compared to alternative libraries.\n- **How do I use Composer to train graph neural networks (GNNs), or Generative Adversarial Networks (GANs), or models for reinforcement learning (RL)?**\n    - We recommend you use alternative libraries for if you want to train these types of models - a lot of assumptions we made when designing Composer are suboptimal for GNNs, RL, and GANs\n- **How can I speed up HuggingFace downloads?\n    - You can use hf transfer (`pip install hf-transfer`) and set the environment variable `HF_HUB_ENABLE_HF_TRANSFER=1`\n\n# ✍️ Citation\n```\n@misc{mosaicml2022composer,\n    author = {The Mosaic ML Team},\n    title = {composer},\n    year = {2021},\n    howpublished = {\\url{https://github.com/mosaicml/composer/}},\n}\n```\n"
        },
        {
          "name": "STYLE_GUIDE.md",
          "type": "blob",
          "size": 15.9580078125,
          "content": "# 1. Style and Conventions\n\n## 1.1 Style Guide\n\nComposer generally follows Google's\n[Python Style Guide](https://google.github.io/styleguide/pyguide.html) for how to format and structure code.\n\n## 1.2. Pre-Commit Hooks\n\nComposer uses [Pre Commit](https://pre-commit.com/) to enforce style checks. To configure, run\n```\npip install '.[dev]'  # if not already installed\npre-commit install\n```\n\nThe pre-commit hooks will now be run before each commit. You can also run the hooks manually via:\n\n```\npre-commit run  # run all hooks on changed files\npre-commit run --all-files  # or, run all hooks on all files\n```\n\n\n\n## 1.3. Code Formatting\n\nComposer uses the [yapf](https://github.com/google/yapf) formatter for general formatting\n[isort](https://github.com/PyCQA/isort) to sort imports. These checks run through pre-commit\n(see section 2.2). These checks can also be run manually via:\n\n```\npre-commit run yapf --all-files  # for yapf\npre-commit run isort --all-files  # for isort\n```\n\nThe configuration is stored in [pyproject.toml](pyproject.toml).\n\n\n## 1.4. Code Structure\n\nAs a general rule of thumb,\n\n-   Don't: Default to using inheritance for code reuse\n\n    Do: prefer [composition over inheritance](https://en.wikipedia.org/wiki/Composition_over_inheritance)\n-   Don't: strive to implement all logic using classes\n\n    Do: strive to implement logic as pure functions when possible, and classes when there is good reason\n-   Don't: Have a function accept falsy values that would then result in a no-op.\n\n    Example of the anti-pattern:\n\n    ```python\n    from typing import Optional\n\n    def configure_parallelism(parallelism_config: Optional[dict]):\n        if parallelism_config is None:\n            # Don't do this check in the callee, which results in a no-op\n            return\n        ...\n    ```\n\n    Do: Require the caller, instead of the callee, check for and handle falsy values. It's ok to accept falsy values\n    for individual arguments of a caller function, so long as the entire function would not be a no-op.\n\n    Example:\n    ```python\n    from typing import Optional\n\n    def configure_parallelism(parallelism_config: dict):\n        ...\n\n    def trainer(paralellism_config: Optional[dict]):\n        if paralellism_config is not None:\n            # Do this check in the caller function\n            configure_paralellism(paralellism_config)\n        ...\n    ```\n\n# 2. Type Annotations and Typechecking\n\nComposer aims to annotate all functions with type annotations (introduced in\n[PEP 526](https://www.python.org/dev/peps/pep-0526/)). Type annotations help statically catch `TypeError` and\n`AttributeError` bugs, in addition to other benefits, as outlined in the PEP.\n\nFor documentation on typing annotations, see:\n* [PEP 483](https://peps.python.org/pep-0483/) for a simplified introducation\n* [PEP 484](https://peps.python.org/pep-0484/) for the full specification\n* [Python docs for `typing`](https://docs.python.org/3/library/typing.html) for the API reference\n\nComposer uses [pyright](https://github.com/microsoft/pyright)\nto validate type annotations. PyRight is automatically run as part of the pre-commit hooks, but you can also\nrun PyRight specifically via:\n\n```\npre-commit run pyright --all-files\n```\n\nThe pyright configuration is stored in [pyproject.toml](pyproject.toml).\n\n\n## 2.1 Debugging\n\nHere are some suggestions to deal with pyright errors:\n\n1. Suppose a variable could be one of multiple types, like the following:\n\n    ```python\n    from typing import Union\n\n    def foo(x: Union[int, None]):\n        return x + 5  # type error -- None + 5 is not allowed!\n    ```\n\n    PyRight will complain since `None + 5` is not a valid operation.\n    Instead, add a check to ensure that `x is not None`:\n\n    ```python\n    from typing import Union\n\n    def foo(x: Union[int, None]):\n        if x is None:\n            raise TypeError(\"x must be an integer, not None!\")\n        return x + 5  # valid\n    ```\n\n    Assert statements also work. However, assert statements should not be used for data validation\n    (see the assert statement section below).\n    ```python\n    from typing import Union\n\n    def foo(x: Union[int, None]):\n        assert x is not None, \"x should never be None\"\n        return x + 5  # valid\n    ```\n\n1. For variables where it is impossible for pyright to infer the correct type, use\n[cast](https://docs.python.org/3/library/typing.html#typing.cast).\n1. As a last resort, add a `# type: ignore` comment to the line where pyright emits an error.\nImmediately following this statement, paste in the error emitted by pyright,\nso other contributors will know why this error was silenced.\n\n\n# 3. Public APIs\nA public API, generally speaking, can be invoked by a user without a leading underscore in any portion of the path.\nThe following are examples of public APIs:\n\n* Standalone functions in public modules (e.g. `composer.utils.dist.get_world_size`)\n* Classes in public modules (e.g. `composer.trainer.trainer.Trainer`)\n* Public methods in public classes (e.g. `composer.trainer.trainer.Trainer.fit`)\n* Public modules (e.g. `composer.trainer.trainer`)\n\nThe following rules apply to public APIs:\n1. All public APIs must have a docstring (see the Documentation section below)\n1. All parameters must have type annotations.\n1. To minimize user imports, parameters should should use native PyTorch or Python types whenever possible.\n\n    It is acceptable to use a union of types, so long as one of the options is a primitive. For example, in the\n    constructor for `composer.trainer.trainer.Trainer`, the `device` parameter is annotated like the following:\n\n    ```python\n    from typing import Optional, Union\n\n    from composer.devices import Device\n\n    class Trainer:\n        def __init__(\n            self,\n            device: Union[str, Device],\n        ):\n            if isinstance(device, str):\n                device = Device(device)\n            ...\n    ```\n\n    This signature allows a user to pass a string for a device,\n    rather than having to import our custom device class.\n\n    Parameters that are for power users (such as `load_object_store`) in the Trainer are exempt from this rule.\n    These parameters can require custom imports.\n\n1. Parameters that could take a sequence of elements should also allow `None` or a singleton.\n    This simplifies the user API by not having to construct a list (or tuple) to hold a single element\n    (or no element). For example, use `Optional[Union[torch.Tensor, Sequence[torch.Tensor]]`.\n\n    The `composer.utils.ensure_tuple` helper method can convert a singleton, list, or tuple into a tuple.\n    For example\n\n    ```python\n    from torch import Tensor\n    from typing import Optional, Sequence, Union\n    from composer.utils import ensure_tuple\n\n    def foo(x: Optional[Union[Tensor, Sequence[Tensor]]]) -> tuple[Tensor, ...]:\n        return ensure_tuple(x)  # ensures that the result is always a (potentially empty) tuple of tensors\n    ```\n\n\n# 4. Use of `assert`\n\n`assert` should be used only in test cases and for verifying invariants (likely required for type checking),\nnot for data validation. As asserts can be disabled in python by using the `-O` flag\n(e.g. `python -O path/to/script.py`), they are not guaranteed to run. For data validation, instead use a style like\nthe following:\n\n<!--pytest.mark.xfail-->\n<!--\n```python\nparameter = None\n```\n-->\n<!--pytest-codeblocks:cont-->\n```python\nif parameter is None:\n    raise ValueError(\"parameter must be specified and cannot be None\")\n```\n\n\n# 5. Imports and `__init__.py`\n\nAll imports in composer should be absolute -- that is, they do not begin with a period.\n\n## 5.1 External Dependencies\n1.  All external dependencies must be specified in both [setup.py](setup.py) for pip and [meta.yaml](meta.yaml)\n    for Anaconda.\n\n1.  If a dependency is not core to Composer (e.g. it is for a model, dataset, algorithm, or some callbacks):\n    1.  It must be specified in a entry of the `extra_deps` dictionary of [setup.py](setup.py).\n        This dictionary groups dependencies that can be conditionally installed. An entry named `foo`\n        can be installed with `pip install 'mosaicml[foo]'`. For example, running `pip install 'mosaicml[system_metrics_monitor]'`\n        will install everything in `install_requires`, along with `pynvml`.\n    1.  It must also be specified in the `run_constrained` and the `test.requires` section.\n    1.  The import must be conditionally imported in the code. For example:\n\n        <!--pytest-codeblocks:importorskip(monai)-->\n        <!--pytest-codeblocks:importorskip(scikit-learn)-->\n        ```python\n        from composer import Callback\n        from composer.utils import MissingConditionalImportError\n\n        class SystemMetricsMonitor(Callback)\n            try:\n                import pynvml\n            except ImportError as e:\n                raise MissingConditionalImportError(extra_deps_group=\"system_metrics_monitor\",\n                                                    conda_package=\"pynvml\",\n                                                    conda_channel=\"conda-forge\",) from e\n        ```\n\n        This style allows users to perform minimal install of Composer without triggering `ImportError`s if\n        an optional dependency is missing.\n\n        If the corresponding package is not published on Anaconda, then set the ``conda_package`` to the pip package\n        name, and set ``conda_channel`` to ``None``.\n\n\n    1.  If the dependency is core to Composer, add the dependency to the `install_requires` section of\n        [setup.py](./setup.py) and the `requirements.run` section of [meta.yaml](./meta.yaml).\n\n## 5.2 Use of `__all__`\n\nAll public modules must define `__all__` to be the list of members that should be re-exported.\nThe variable is necessary to 1) limit what `from XXX import *` imports, and 2) ensure that the documentation only\nincludes exported members, not unrelated re-imports.\n\nFor example, from [composer/callbacks/memory_monitor.py](composer/callbacks/memory_monitor.py)\n\n```python\n\"\"\"Log memory usage during training.\"\"\"\nimport logging\nfrom typing import Union\n\nimport torch.cuda\n\nfrom composer.core import State\nfrom composer.loggers import Logger\nfrom composer.core.callback import Callback\n\nlog = logging.getLogger(__name__)\n\n__all__ = [\"MemoryMonitor\"]  # export only the MemoryMonitor, not other imports like `Logger`, `State`, or `Callback`\n\n\nclass MemoryMonitor(Callback):\n    ...\n```\n\n\n## 5.3 `__init__.py`\n\nAll public classes and functions should be added to the module's `__init__.py`.\n\n<!--pytest.mark.skip-->\n```python\nfrom composer.path.to.module.file import MyClass as MyClass\nfrom composer.path.to.module.file import my_func as my_func\n```\n\nIf a file only contains public functions, then the following is also acceptable:\n\n<!--pytest.mark.skip-->\n```python\nfrom composer.path.to.module import my_file as my_file\n```\n\n\n# 6. Documentation\n\n## 6.1 Docstrings\n\nComposer uses [Google Style Docstrings](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html).\nAll public APIs require documentation.\n\n### 6.1.1 What to include in Docstrings?\n\nDocstrings, at a minimum, should include a summary of what the function or class does, along with the arguments it takes. See [below](#612-formatting-docstrings) for how to format docstrings. The [Google Style Guide](https://google.github.io/styleguide/pyguide.html) also includes some guidelines on how to write docstrings.\n\n### 6.1.2 Formatting Docstrings\n\nThe following guidelines apply to documentation.\n1.  Each function that needs a docstring must have its input arguments, return statement (if not None), and any custom\n    exceptions annotated.\n1.  The arguments for the `__init__` signature of classes should be documented under the class-level docstring. There\n    should not be any `__init__`-level docstring.\n1.  Each argument annotation should include the type. If the argument has a default value, the type annotation should\n    specify \"optional\", and the docstring should say the default value. Some examples:\n\n    ```python\n    from typing import Optional, Union\n\n    def foo(bar: int):\n        \"\"\"Foo.\n\n        Args:\n            bar (int): Required bar.\n        \"\"\"\n        ...\n\n    def foo2(bar: int = 42):\n        \"\"\"Foo2.\n\n        Args:\n            bar (int, optional): The first Argument. Default: ``42``.\n        \"\"\"\n        ...\n\n    def foo3(bar: Optional[int] = None):\n        \"\"\"Foo3.\n\n        Args:\n            bar (int, optional): The first Argument. Default: ``None``.\n        \"\"\"\n        ...\n\n    def foo4(bar: Union[int, str] = 42):\n        \"\"\"Foo4.\n\n        Args:\n            bar (int | str, optional): The first Argument. Default: ``42``.\n        \"\"\"\n        ...\n\n    def foo5(bar: int) -> int:\n        \"\"\"Foo5.\n\n        Args:\n            bar (int): Required bar.\n\n        Returns:\n            int: Description of return statement.\n        \"\"\"\n        ...\n\n    def foo6(bar: int) -> tuple[int, str]:\n        \"\"\"Foo6.\n\n        Args:\n            bar (int): Required bar.\n\n        Returns:\n            a (int): Returned value.\n            b (str): Returned value.\n        \"\"\"\n        ...\n    ```\n\n### 6.1.3 Building and Viewing Docs Locally\n\nAssuming you already have a development install of Composer (see these [instructions](CONTRIBUTING.md#prerequisites)), here’s how to build and previous the docs locally.\n\n**️️ ⚠ Warning:** Jenkins treats all sphinx warnings as errors, so they must be addressed before a PR can be merged. Building docs locally can help debug any warnings showing up on Jenkins!\n\nIn one terminal, run:\n\n<!--pytest.mark.skip-->\n```bash\nsource path/to/composer_venv/bin/activate  # activate your composer virtual env\ncd composer/docs  # cd to the docs folder insde your composer clone\nmake clean\nmake html\n```\n\nIn a second terminal, run:\n\n<!--pytest.mark.skip-->\n```bash\ncd composer/docs\npython3 -m http.server --directory _build/html/\n```\n\nThen, navigate to [http://localhost:8000](http://localhost:8000) in your browser.\n\n## 6.2 Doctests\n\nMost docstrings should also include a `.. doctest` or `.. testcode` example to clearly illustrate how one would interact with the class or function. As part of the CI/CD process, all `.. doctest` blocks are executed to ensure the example in the documentation actually works.\n\n### 6.2.1 Writing Doctests\n\nSee the [Sphinx Doctest Extension](https://www.sphinx-doc.org/en/master/usage/extensions/doctest.html) for all of the available directives. Do not use `.. code-block::` for Python examples, as they are untested.\n\nAny test fixtures for doctests should go in [docs/source/doctest_fixtures.py](docs/source/doctest_fixtures.py) or in a `.. testsetup::` block.\n\nFor example:\n```python\nimport torch\nfrom typing import Optional\n\ndef my_function(x: Optional[torch.Tensor]) -> torch.Tensor:\n    \"\"\"blah function\n\n    Args:\n        input (torch.Tensor): Your guess.\n\n    Returns:\n        torch.Tensor: How good your input is.\n\n    Raises:\n        ValueError: If your input is negative.\n\n    Example:\n        .. testsetup::\n\n            # optional setup section, not shown in docs\n            import torch\n            x = torch.randn(42)\n\n\n        .. testcode::\n\n            # shown in docs; runs after testsetup\n            my_function(x)\n    \"\"\"\n    ...\n```\n\nAll doctests load the [docs/source/doctest_fixtures.py](docs/source/doctest_fixtures.py) file *before* tests run. If there are any variables that would be helpful have defined for all tests, feel free to add them into this file. However, if a variable is more specific to an individual doctest, then it would be best to include it in a `.. testsetup::` block, as not to pollute the global fixture namespace. (Unlike pytest fixtures, all doctest fixtures are given to every doctest; they cannot be specifically requested)\n\n### 6.2.2 Running Doctests Locally\n\nAssuming you already have a development install of Composer (see these [instructions](CONTRIBUTING.md#prerequisites)), here’s how to run the doctests.\n\n<!--pytest.mark.skip-->\n```bash\nsource path/to/composer_venv/bin/activate  # activate your composer virtual env\ncd composer/docs  # cd to the docs folder insde your composer clone\nmake clean\nmake html  # the html build must be completed first to ensure all doctests are identified\nmake doctest 2>/dev/null # For more verbosity, do not direct stderr to /dev/null\n```\n"
        },
        {
          "name": "composer",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 36.3662109375,
          "content": "# build requirements\n[build-system]\nrequires = [\"setuptools < 68.0.0\"]\nbuild-backend = \"setuptools.build_meta\"\n\n# iSort\n[tool.isort]\nmulti_line_output = 0\nline_length = 120\nskip = [ \"env\", \"wandb\", \"runs\", \"build\", \"node_modules\" ]\nknown_third_party = [\"wandb\"]\ninclude_trailing_comma = true\nsplit_on_trailing_comma = true\n\n[tool.ruff.lint]\nselect = [\n    \"C4\",\n    # TODO port pydocstyle\n    # \"D\", # pydocstyle\n    \"LOG\",\n    \"PERF\",\n    \"PLE\",\n    \"COM812\",\n    \"UP006\",\n    \"F401\",\n]\nextend-safe-fixes = [\n    \"UP006\",\n]\nignore = [\n    \"C408\",\n    \"PERF2\",\n    \"PERF4\",\n]\n\n[tool.ruff]\ntarget-version = \"py39\"\nexclude = [\n    \"build/**\",\n    \"docs/**\",\n    \"node_modules/**\",\n]\n\n# Pyright\n[tool.pyright]\ninclude = [\n    \"composer/**\",\n    \"tests/**\",\n    \"examples/**\",\n]\nexclude = [\n    \"build/**\",\n    \"node_modules/**\",\n    'composer/trainer/mosaic_fsdp_utils.py'\n]\n# Disable checks for missing imports, as a conditional install of composer will not include them\n# Any incorrect imports will be discovered through test cases\nreportMissingImports=\"none\"\n# Sometimes for code validation or readability we want redundant isinstance checks.\nreportUnnecessaryIsInstance = \"none\"\nreportMissingTypeStubs = \"none\"\n# forward() and initailize_object() have incompatible method overrides\nreportIncompatibleMethodOverride = \"none\"\nreportIncompatibleVariableOverride = \"error\"\nreportUnusedImport = \"error\"\nreportUnusedClass = \"error\"\nreportUnusedFunction = \"error\"\nreportUnusedVariable = \"error\"\nreportDuplicateImport = \"error\"\nreportWildcardImportFromLibrary = \"error\"\nreportUntypedFunctionDecorator = \"error\"\n# Pyright sometimes marks public imports as private\nreportPrivateImportUsage = \"none\"\nreportUndefinedVariable = \"error\"\nstrictParameterNoneValue = true\nreportPropertyTypeMismatch = \"error\"\nreportUntypedNamedTuple = \"error\"\nreportUnnecessaryCast = \"error\"\nreportInvalidTypeVarUse = \"error\"\nreportOverlappingOverload = \"error\"\nreportUninitializedInstanceVariable = \"error\"\nreportInvalidStringEscapeSequence = \"error\"\nreportMissingParameterType = \"none\"  # TODO: make this an error. Many tests are missing parameter types.\nreportCallInDefaultInitializer = \"error\"\nreportUnnecessaryComparison = \"error\"\nreportSelfClsParameterName = \"error\"\n# Need to ensure all implict string concatinations are wrapped with an extra set of paranethesis.\nreportImplicitStringConcatenation = \"none\"  # TODO: make this an error.\nreportInvalidStubStatement = \"error\"\nreportIncompleteStub = \"error\"\nreportUnsupportedDunderAll = \"error\"\nreportUnusedCoroutine = \"error\"\n\n# Pytest\n[tool.pytest.ini_options]\n# By default, do not run gpu, vision, docs, notebook, or daily tests\naddopts = \"--codeblocks --strict-markers -m 'not gpu and not doctest and not daily and not remote' --color=yes\"\n\nmarkers = [\n    # Tests that require a world_size of two should be annotated with `@pytest.mark.world_size(2)`.\n    # If not specified, the test will be assumed to have a world-size of one, which is\n    # equivalent to `@pytest.mark.world_size(1)`\n    \"world_size(val)\",\n    # Tests that require a gpu should be annotated with `@pytest.mark.gpu`\n    \"gpu\",\n    # Tests which are run as part of the documentation build\n    \"doctest\",\n    # Should be run during daily regression\n    \"daily\",\n    # Whether the test will be reading data from a remote source, and may require credentials\n    \"remote\",\n]\nfilterwarnings = [\n    \"error\",  # Mark all warnings as errors\n\n    # Treat the warnings that python usually would ignore as warnings, not errors.\n    \"default::DeprecationWarning\",\n    'default::PendingDeprecationWarning',\n    'default::ImportWarning',\n    'ignore::ResourceWarning',  # Ignore these -- they are from errors like CPU OOMs\n\n    # Ignore the following warnings\n    'ignore:Deterministic mode is activated:UserWarning',  # All tests run with deterministic mode\n    'ignore:SubsetNumBatchesWarning',  # SubsetNumBatches is used extensively in testing\n    # ignore lambda warnings\n    'ignore:Running code eval locally may be insecure.*:UserWarning', # All tests run w/o lambdas at the moment\n    # allow training metrics\n    'ignore:Computing model evaluation metrics during training doubles the number of forward passes:UserWarning',\n    'ignore:No optimizer was specified.:UserWarning',  # OK to not specify an optimizer in the tests\n    # Ignore a bug in the pytorch dataloader\n    '''ignore:Exception ignored in. <function _MultiProcessingDataLoaderIter.__del__:pytest.PytestUnraisableExceptionWarning''',\n    # Ignore torchvision complaining about no c libraries (happens in the conda build)\n    'ignore:Failed to load image Python extension:UserWarning',\n    # Ignore a deprecation warning in the conda build\n    'ignore:distutils Version classes are deprecated:DeprecationWarning',\n    # Ignore a UserWarning from TorchMetrics about potentially large memory usage when batch sizes are extremely large\n    'ignore:Metric `SpearmanCorrcoef` will save all targets and predictions in the buffer:UserWarning:torchmetrics',\n    # Ignore a private function warnings for torch distributed collectives\n    'ignore:torch.distributed._all_gather_base is a private function and will be deprecated.*:UserWarning',\n    'ignore:torch.distributed._reduce_scatter_base is a private function and will be deprecated.*:UserWarning',\n    # Ignore tensorboard deprecation warnings\n    'ignore:Call to deprecated create function Descriptor().*:DeprecationWarning:tensorboard',\n    'ignore:Call to deprecated create function EnumDescriptor().*:DeprecationWarning:tensorboard',\n    'ignore:Call to deprecated create function EnumValueDescriptor().*:DeprecationWarning:tensorboard',\n    'ignore:Call to deprecated create function FieldDescriptor().*:DeprecationWarning:tensorboard',\n    'ignore:Call to deprecated create function FileDescriptor().*:DeprecationWarning:tensorboard',\n    # Ignore TracerWarnings for operations potentially unsupported by model tracing\n    'ignore:.*might cause the trace to be incorrect.*:Warning',\n    'ignore:save_weights_only=True only saves weights for now, but will changed to also save metadata.*:UserWarning',\n    # Ignore has_cuda is deprecated warning please use torch.backends.cuda.is_build\n    '''ignore:'has_cuda' is deprecated, please use 'torch.backends.cuda.is_built():UserWarning''',\n    # Ignore has_cudnn is deprecated warning please use torch.backends.cudnn.is_available\n    '''ignore:'has_cudnn' is deprecated, please use 'torch.backends.cudnn.is_available():UserWarning''',\n    # Ignore has_mps is deprecated warning please use torch.backends.mps.is_built\n    '''ignore:'has_mps' is deprecated, please use 'torch.backends.mps.is_built():UserWarning''',\n    # Ignore has_mkldnn is deprecated warning please use torch.backends.mkldnn.is_available\n    '''ignore:'has_mkldnn' is deprecated, please use 'torch.backends.mkldnn.is_available():UserWarning''',\n    # Ignore torch distributed deprecated warnings\n    '''ignore:torch.distributed.reduce_op is deprecated, please use torch.distributed.ReduceOp instead:UserWarning''',\n    # Ignore torch sharded tensor deprecated warnings\n    '''ignore:Please use DTensor instead and we are deprecating ShardedTensor.:UserWarning''',\n    # Ignore torch pytree deprecated warnings\n    '''ignore:torch.utils._pytree._register_pytree_node is deprecated.*:UserWarning''',\n    # Ignore save_state_dict / load_state_dict deprecation warnings\n    '''ignore:'.*_state_dict' is deprecated and will be removed in future versions.*:UserWarning''',\n    # Ignore mlflow warnings about transformers versions,\n    '''ignore:The 'transformers' MLflow Models integration.*:UserWarning''',\n    # Ignore the flash v3 warnings from transformer engine\n    '''ignore:To use flash-attn v3*:UserWarning''',\n    # Ignore our own deprecation warnings\n    '''ignore::composer.utils.warnings.VersionedDeprecationWarning''',\n    # Ignore deprecation warning for torch.load\n    '''ignore:You are using `torch.load` with `weights_only=False`.*:FutureWarning''',\n    # PyTorch uses their own deprecated function\n    '''ignore:.*FSDP.state_dict_type.*:FutureWarning''',\n    # Ignore PyTorch NO_SHARD deprecation\n    '''ignore:.*The `NO_SHARD` sharding strategy is deprecated.*:FutureWarning''',\n    # Some unit tests use ShardedTensor, though by default we use DTensor\n    '''ignore:.*Please use DTensor instead and we are deprecating.*:FutureWarning''',\n    # Ignore Torch load_state_dict warnings, it's used by torch internal, not composer\n    '''ignore:.*`load_state_dict` is deprecated and *:FutureWarning''',\n    # Ignore NeptuneLogger warnings\n    '''ignore:.*NVML Shared Library Not Found. GPU usage metrics may not be reported.*''',\n    # Ignore HuggingFace future warnings\n    '''ignore:.*`clean_up_tokenization_spaces` was not set.*:FutureWarning''',\n]\n\n# Coverage\n[tool.coverage.run]\nparallel = true\nbranch = true\nrelative_files = true\nconcurrency = [\"thread\"]\ninclude = [\n    \"composer/*\"\n]\n\n# Yapf\n[tool.yapf]\n# Align closing bracket with visual indentation.\nalign_closing_bracket_with_visual_indent = false\n\n# Allow dictionary keys to exist on multiple lines. For example:\n#\n#   x = {\n#       ('this is the first element of a tuple',\n#        'this is the second element of a tuple'):\n#            value,\n#   }\nallow_multiline_dictionary_keys = false\n\n# Allow lambdas to be formatted on more than one line.\nallow_multiline_lambdas = false\n\n# Allow splitting before a default / named assignment in an argument list.\nallow_split_before_default_or_named_assigns = true\n\n# Allow splits before the dictionary value.\nallow_split_before_dict_value = true\n\n#   Let spacing indicate operator precedence. For example:\n#\n#     a = 1 * 2 + 3 / 4\n#     b = 1 / 2 - 3 * 4\n#     c = (1 + 2) * (3 - 4)\n#     d = (1 - 2) / (3 + 4)\n#     e = 1 * 2 - 3\n#     f = 1 + 2 + 3 + 4\n#\n# will be formatted as follows to indicate precedence:\n#\n#     a = 1*2 + 3/4\n#     b = 1/2 - 3*4\n#     c = (1+2) * (3-4)\n#     d = (1-2) / (3+4)\n#     e = 1*2 - 3\n#     f = 1 + 2 + 3 + 4\n#\narithmetic_precedence_indication = false\n\n# Number of blank lines surrounding top-level function and class\n# definitions.\nblank_lines_around_top_level_definition = 2\n\n# Insert a blank line before a class-level docstring.\nblank_line_before_class_docstring = false\n\n# Insert a blank line before a module docstring.\nblank_line_before_module_docstring = true\n\n# Insert a blank line before a 'def' or 'class' immediately nested\n# within another 'def' or 'class'. For example:\n#\n#   class Foo:\n#                      # <------ this blank line\n#     def method():\n#       ...\nblank_line_before_nested_class_or_def = true\n\n# Do not split consecutive brackets. Only relevant when\n# dedent_closing_brackets is set. For example:\n#\n#    call_func_that_takes_a_dict(\n#        {\n#            'key1': 'value1',\n#            'key2': 'value2',\n#        }\n#    )\n#\n# would reformat to:\n#\n#    call_func_that_takes_a_dict({\n#        'key1': 'value1',\n#        'key2': 'value2',\n#    })\ncoalesce_brackets = true\n\n# The column limit.\ncolumn_limit = 120\n\n# The style for continuation alignment. Possible values are:\n#\n# - SPACE: Use spaces for continuation alignment. This is default behavior.\n# - FIXED: Use fixed number (CONTINUATION_INDENT_WIDTH) of columns\n#   (ie: CONTINUATION_INDENT_WIDTH/INDENT_WIDTH tabs or\n#   CONTINUATION_INDENT_WIDTH spaces) for continuation alignment.\n# - VALIGN-RIGHT: Vertically align continuation lines to multiple of\n#   INDENT_WIDTH columns. Slightly right (one tab or a few spaces) if\n#   cannot vertically align continuation lines with indent characters.\ncontinuation_align_style = 'SPACE'\n\n# Indent width used for line continuations.\ncontinuation_indent_width = 4\n\n# Put closing brackets on a separate line, dedented, if the bracketed\n# expression can't fit in a single line. Applies to all kinds of brackets,\n# including function definitions and calls. For example:\n#\n#   config = {\n#       'key1': 'value1',\n#       'key2': 'value2',\n#   }        # <--- this bracket is dedented and on a separate line\n#\n#   time_series = self.remote_client.query_entity_counters(\n#       entity='dev3246.region1',\n#       key='dns.query_latency_tcp',\n#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n#       start_ts=now()-timedelta(days=3),\n#       end_ts=now(),\n#   )        # <--- this bracket is dedented and on a separate line\ndedent_closing_brackets = true\n\n# Disable the heuristic which places each list element on a separate line\n# if the list is comma-terminated.\ndisable_ending_comma_heuristic = false\n\n# Place each dictionary entry onto its own line.\neach_dict_entry_on_separate_line = true\n\n# Require multiline dictionary even if it would normally fit on one line.\n# For example:\n#\n#   config = {\n#       'key1': 'value1'\n#   }\nforce_multiline_dict = false\n\n# The regex for an i18n comment. The presence of this comment stops\n# reformatting of that line, because the comments are required to be\n# next to the string they translate.\ni18n_comment = '#\\..*'\n\n# The i18n function call names. The presence of this function stops\n# reformattting on that line, because the string it has cannot be moved\n# away from the i18n comment.\ni18n_function_call = 'N_, _'\n\n# Indent blank lines.\nindent_blank_lines = false\n\n# Put closing brackets on a separate line, indented, if the bracketed\n# expression can't fit in a single line. Applies to all kinds of brackets,\n# including function definitions and calls. For example:\n#\n#   config = {\n#       'key1': 'value1',\n#       'key2': 'value2',\n#       }        # <--- this bracket is indented and on a separate line\n#\n#   time_series = self.remote_client.query_entity_counters(\n#       entity='dev3246.region1',\n#       key='dns.query_latency_tcp',\n#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),\n#       start_ts=now()-timedelta(days=3),\n#       end_ts=now(),\n#       )        # <--- this bracket is indented and on a separate line\nindent_closing_brackets = false\n\n# Indent the dictionary value if it cannot fit on the same line as the\n# dictionary key. For example:\n#\n#   config = {\n#       'key1':\n#           'value1',\n#       'key2': value1 +\n#               value2,\n#   }\nindent_dictionary_value = true\n\n# The number of columns to use for indentation.\nindent_width = 4\n\n# Join short lines into one line. E.g., single line 'if' statements.\njoin_multiple_lines = false\n\n# Do not include spaces around selected binary operators. For example:\n#\n#   1 + 2 * 3 - 4 / 5\n#\n# will be formatted as follows when configured with \"*,/\":\n#\n#   1 + 2*3 - 4/5\nno_spaces_around_selected_binary_operators = ''\n\n# Use spaces around default or named assigns.\nspaces_around_default_or_named_assign = false\n\n# Adds a space after the opening '{' and before the ending '}' dict delimiters.\n#\n#   {1: 2}\n#\n# will be formatted as:\n#\n#   { 1: 2 }\nspaces_around_dict_delimiters = false\n\n# Adds a space after the opening '[' and before the ending ']' list delimiters.\n#\n#   [1, 2]\n#\n# will be formatted as:\n#\n#   [ 1, 2 ]\nspaces_around_list_delimiters = false\n\n# Use spaces around the power operator.\nspaces_around_power_operator = false\n\n# Use spaces around the subscript / slice operator.  For example:\n#\n#   my_list[1 : 10 : 2]\nspaces_around_subscript_colon = false\n\n# Adds a space after the opening '(' and before the ending ')' tuple delimiters.\n#\n#   (1, 2, 3)\n#\n# will be formatted as:\n#\n#   ( 1, 2, 3 )\nspaces_around_tuple_delimiters = false\n\n# The number of spaces required before a trailing comment.\n# This can be a single value (representing the number of spaces\n# before each trailing comment) or list of values (representing\n# alignment column values; trailing comments within a block will\n# be aligned to the first column value that is greater than the maximum\n# line length within the block). For example:\n#\n# With spaces_before_comment=5:\n#\n#   1 + 1 # Adding values\n#\n# will be formatted as:\n#\n#   1 + 1     # Adding values <-- 5 spaces between the end of the statement and comment\n#\n# With spaces_before_comment = '15, 20:'\n#\n#   1 + 1 # Adding values\n#   two + two # More adding\n#\n#   longer_statement # This is a longer statement\n#   short # This is a shorter statement\n#\n#   a_very_long_statement_that_extends_beyond_the_final_column # Comment\n#   short # This is a shorter statement\n#\n# will be formatted as:\n#\n#   1 + 1          # Adding values <-- end of line comments in block aligned to col 15\n#   two + two      # More adding\n#\n#   longer_statement    # This is a longer statement <-- end of line comments in block aligned to col 20\n#   short               # This is a shorter statement\n#\n#   a_very_long_statement_that_extends_beyond_the_final_column  # Comment <-- the end of line comments are aligned based on the line length\n#   short                                                       # This is a shorter statement\n#\nspaces_before_comment = 2\n\n# Insert a space between the ending comma and closing bracket of a list,\n# etc.\nspace_between_ending_comma_and_closing_bracket = false\n\n# Use spaces inside brackets, braces, and parentheses.  For example:\n#\n#   method_call( 1 )\n#   my_dict[ 3 ][ 1 ][ get_index( *args, **kwargs ) ]\n#   my_set = { 1, 2, 3 }\nspace_inside_brackets = false\n\n# Split before arguments\nsplit_all_comma_separated_values = false\n\n# Split before arguments, but do not split all subexpressions recursively\n# (unless needed).\nsplit_all_top_level_comma_separated_values = false\n\n# Split before arguments if the argument list is terminated by a\n# comma.\nsplit_arguments_when_comma_terminated = true\n\n# Set to True to prefer splitting before '+', '-', '*', '/', '//', or '@'\n# rather than after.\nsplit_before_arithmetic_operator = false\n\n# Set to True to prefer splitting before '&', '|' or '^' rather than\n# after.\nsplit_before_bitwise_operator = false\n\n# Split before the closing bracket if a list or dict literal doesn't fit on\n# a single line.\nsplit_before_closing_bracket = true\n\n# Split before a dictionary or set generator (comp_for). For example, note\n# the split before the 'for':\n#\n#   foo = {\n#       variable: 'Hello world, have a nice day!'\n#       for variable in bar if variable != 42\n#   }\nsplit_before_dict_set_generator = false\n\n# Split before the '.' if we need to split a longer expression:\n#\n#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))\n#\n# would reformat to something like:\n#\n#   foo = ('This is a really long string: {}, {}, {}, {}'\n#          .format(a, b, c, d))\nsplit_before_dot = false\n\n# Split after the opening paren which surrounds an expression if it doesn't\n# fit on a single line.\nsplit_before_expression_after_opening_paren = false\n\n# If an argument / parameter list is going to be split, then split before\n# the first argument.\nsplit_before_first_argument = false\n\n# Set to True to prefer splitting before 'and' or 'or' rather than\n# after.\nsplit_before_logical_operator = false\n\n# Split named assignments onto individual lines.\nsplit_before_named_assigns = true\n\n# Set to True to split list comprehensions and generators that have\n# non-trivial expressions and multiple clauses before each of these\n# clauses. For example:\n#\n#   result = [\n#       a_long_var + 100 for a_long_var in xrange(1000)\n#       if a_long_var % 10]\n#\n# would reformat to something like:\n#\n#   result = [\n#       a_long_var + 100\n#       for a_long_var in xrange(1000)\n#       if a_long_var % 10]\nsplit_complex_comprehension = true\n\n# The penalty for splitting right after the opening bracket.\nsplit_penalty_after_opening_bracket = 300\n\n# The penalty for splitting the line after a unary operator.\nsplit_penalty_after_unary_operator = 10000\n\n# The penalty of splitting the line around the '+', '-', '*', '/', '//',\n# ``%``, and '@' operators.\nsplit_penalty_arithmetic_operator = 300\n\n# The penalty for splitting right before an if expression.\nsplit_penalty_before_if_expr = 0\n\n# The penalty of splitting the line around the '&', '|', and '^'\n# operators.\nsplit_penalty_bitwise_operator = 300\n\n# The penalty for splitting a list comprehension or generator\n# expression.\nsplit_penalty_comprehension = 2100\n\n# The penalty for characters over the column limit.\nsplit_penalty_excess_character = 7000\n\n# The penalty incurred by adding a line split to the unwrapped line. The\n# more line splits added the higher the penalty.\nsplit_penalty_for_added_line_split = 20\n\n# The penalty of splitting a list of \"import as\" names. For example:\n#\n#   from a_very_long_or_indented_module_name_yada_yad import (long_argument_1,\n#                                                             long_argument_2,\n#                                                             long_argument_3)\n#\n# would reformat to something like:\n#\n#   from a_very_long_or_indented_module_name_yada_yad import (\n#       long_argument_1, long_argument_2, long_argument_3)\nsplit_penalty_import_names = 0\n\n# The penalty of splitting the line around the 'and' and 'or'\n# operators.\nsplit_penalty_logical_operator = 300\n\n# Use the Tab character for indentation.\nuse_tabs = false\n\n# Ignore directories\n[tool.yapfignore]\nignore_patterns = [\n    \"runs/**/*.py\",\n    \"wandb/**/*.py\",\n    \"build/**/*.py\",\n]\n\n[tool.pylint.MASTER]\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code.\nextension-pkg-allow-list=\"\"\n\n# A comma-separated list of package or module names from where C extensions may\n# be loaded. Extensions are loading into the active Python interpreter and may\n# run arbitrary code. (This is an alternative name to extension-pkg-allow-list\n# for backward compatibility.)\nextension-pkg-whitelist=\"\"\n\n# Return non-zero exit code if any of these messages/categories are detected,\n# even if score is above --fail-under value. Syntax same as enable. Messages\n# specified are enabled, while categories only check already-enabled messages.\nfail-on=\"\"\n\n# Specify a score threshold to be exceeded before program exits with error.\n# fail-under=10.0\n\n# Files or directories to be skipped. They should be base names, not paths.\nignore=\"CVS\"\n\n# Add files or directories matching the regex patterns to the ignore-list. The\n# regex matches against paths and can be in Posix or Windows format.\nignore-paths=\"\"\n\n# Files or directories matching the regex patterns are skipped. The regex\n# matches against base names, not paths.\nignore-patterns=\"\"\n\n# Python code to execute, usually for sys.path manipulation such as\n# pygtk.require().\ninit-hook=\"\"\n\n# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the\n# number of processors available to use.\njobs=4\n\n# Control the amount of potential inferred values when inferring a single\n# object. This can help the performance when dealing with large functions or\n# complex, nested conditions.\nlimit-inference-results=100\n\n# List of plugins (as comma separated values of python module names) to load,\n# usually to register additional checkers.\n# load-plugins=\n\n# Pickle collected data for later comparisons.\n# persistent=yes\n\n# Minimum Python version to use for version dependent checks. Will default to\n# the version used to run pylint.\npy-version=3.9\n\n# When enabled, pylint would attempt to guess common misconfiguration and emit\n# user-friendly hints instead of false-positive error messages.\nsuggestion-mode=\"yes\"\n\n# Allow loading of arbitrary C extensions. Extensions are imported into the\n# active Python interpreter and may run arbitrary code.\nunsafe-load-any-extension=\"no\"\n\n\n[tool.pylint.'MESSAGES CONTROL']\n\n# Only show warnings with the listed confidence levels. Leave empty to show\n# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.\nconfidence=\"\"\n\n# Disable the message, report, category or checker with the given id(s). You\n# can either give multiple identifiers separated by comma (,) or put this\n# option multiple times (only on the command line, not in the configuration\n# file where it should appear only once). You can also use \"--disable=all\" to\n# disable everything first and then reenable specific checks. For example, if\n# you want to run only the similarities checker, you can use \"--disable=all\n# --enable=similarities\". If you want to run only the classes checker, but have\n# no Warning level messages displayed, use \"--disable=all --enable=classes\n# --disable=W\".\ndisable=\"\"\"raw-checker-failed,\n        bad-inline-option,\n        locally-disabled,\n        file-ignored,\n        suppressed-message,\n        useless-suppression,\n        deprecated-pragma,\n        similarities,\n        typecheck,\n        design,\n        missing-module-docstring,\n        wrong-import-position,\n        use-symbolic-message-instead,\n        arguments-differ,\n        import-outside-toplevel,\n        too-many-nested-block,\n        signature-differs,\n        useless-import-alias\"\"\"\n\n# Enable the message, report, category or checker with the given id(s). You can\n# either give multiple identifier separated by comma (,) or put this option\n# multiple time (only on the command line, not in the configuration file where\n# it should appear only once). See also the \"--disable\" option for examples.\nenable=\"c-extension-no-member\"\n\n\n[tool.pylint.'REPORTS']\n\n# Python expression which should return a score less than or equal to 10. You\n# have access to the variables 'error', 'warning', 'refactor', and 'convention'\n# which contain the number of messages in each category, as well as 'statement'\n# which is the total number of statements analyzed. This score is used by the\n# global evaluation report (RP0004).\n# evaluation=\"10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\"\n\n# Template used to display messages. This is a python new-style format string\n# used to format the message information. See doc for all details.\n#msg-template=\n\n# Set the output format. Available formats are text, parseable, colorized, json\n# and msvs (visual studio). You can also give a reporter class, e.g.\n# mypackage.mymodule.MyReporterClass.\noutput-format=\"colorized\"\n\n# Tells whether to display a full report or only the messages.\nreports=\"no\"\n\n# Activate the evaluation score.\nscore=\"no\"\n\n\n[tool.pylint.REFACTORING]\n\n# Maximum number of nested blocks for function / method body\nmax-nested-blocks=10\n\n# Complete name of functions that never returns. When checking for\n# inconsistent-return-statements if a never returning function is called then\n# it will be considered as an explicit return statement and no message will be\n# printed.\nnever-returning-functions=\"sys.exit,argparse.parse_error\"\n\n\n[tool.pylint.STRING]\n\n# This flag controls whether inconsistent-quotes generates a warning when the\n# character used as a quote delimiter is used inconsistently within a module.\ncheck-quote-consistency=\"no\"\n\n# This flag controls whether the implicit-str-concat should generate a warning\n# on implicit string concatenation in sequences defined over several lines.\ncheck-str-concat-over-line-jumps=\"no\"\n\n\n[tool.pylint.LOGGING]\n\n# The type of string formatting that logging methods do. `old` means using %\n# formatting, `new` is for `{}` formatting.\nlogging-format-style=\"old\"\n\n# Logging modules to check that the string format arguments are in logging\n# function parameter format.\nlogging-modules=\"logging\"\n\n\n[tool.pylint.VARIABLES]\n\n# List of additional names supposed to be defined in builtins. Remember that\n# you should avoid defining new builtins when possible.\nadditional-builtins=\"\"\n\n# Tells whether unused global variables should be treated as a violation.\nallow-global-unused-variables=\"yes\"\n\n# List of names allowed to shadow builtins\nallowed-redefined-builtins=\"\"\n\n# List of strings which can identify a callback function by name. A callback\n# name must start or end with one of those strings.\ncallbacks=\"cb_,_cb\"\n\n# A regular expression matching the name of dummy variables (i.e. expected to\n# not be used).\ndummy-variables-rgx=\"_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_\"\n\n# Argument names that match this expression will be ignored. Default to name\n# with leading underscore.\nignored-argument-names=\"_.*|^ignored_|^unused_\"\n\n# Tells whether we should check for unused import in __init__ files.\ninit-import=\"no\"\n\n# List of qualified module names which can have objects that can redefine\n# builtins.\nredefining-builtins-modules=\"six.moves,past.builtins,future.builtins,builtins,io\"\n\n\n[tool.pylint.MISCELLANEOUS]\n\n# List of note tags to take in consideration, separated by a comma.\nnotes=\"\"\n\n# Regular expression of note tags to take in consideration.\n#notes-rgx=\n\n\n[tool.pylint.SPELLING]\n\n# Limits count of emitted suggestions for spelling mistakes.\nmax-spelling-suggestions=4\n\n# Spelling dictionary name. Available dictionaries: none. To make it work,\n# install the 'python-enchant' package.\nspelling-dict=\"\"\n\n# List of comma separated words that should be considered directives if they\n# appear and the beginning of a comment and should not be checked.\nspelling-ignore-comment-directives=\"fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:,pyright:,type:\"\n\n# List of comma separated words that should not be checked.\nspelling-ignore-words=\"\"\n\n# A path to a file that contains the private dictionary; one word per line.\nspelling-private-dict-file=\"\"\n\n# Tells whether to store unknown words to the private dictionary (see the\n# --spelling-private-dict-file option) instead of raising a message.\nspelling-store-unknown-words=\"no\"\n\n\n[tool.pylint.BASIC]\n\n# Naming style matching correct argument names.\nargument-naming-style=\"snake_case\"\n\n# Regular expression matching correct argument names. Overrides argument-\n# naming-style.\n#argument-rgx=\n\n# Naming style matching correct attribute names.\nattr-naming-style=\"snake_case\"\n\n# Regular expression matching correct attribute names. Overrides attr-naming-\n# style.\n#attr-rgx=\n\n# Bad variable names which should always be refused, separated by a comma.\nbad-names=\"\"\n\n# Bad variable names regexes, separated by a comma. If names match any regex,\n# they will always be refused\nbad-names-rgxs=\"\"\n\n# Naming style matching correct class attribute names.\nclass-attribute-naming-style=\"any\"\n\n# Regular expression matching correct class attribute names. Overrides class-\n# attribute-naming-style.\n#class-attribute-rgx=\n\n# Naming style matching correct class constant names.\nclass-const-naming-style=\"UPPER_CASE\"\n\n# Regular expression matching correct class constant names. Overrides class-\n# const-naming-style.\n#class-const-rgx=\n\n# Naming style matching correct class names.\nclass-naming-style=\"PascalCase\"\n\n# Regular expression matching correct class names. Overrides class-naming-\n# style.\n#class-rgx=\n\n# Naming style matching correct constant names.\nconst-naming-style=\"UPPER_CASE\"\n\n# Regular expression matching correct constant names. Overrides const-naming-\n# style.\n#const-rgx=\n\n# Minimum line length for functions/classes that require docstrings, shorter\n# ones are exempt.\ndocstring-min-length=-1\n\n# Naming style matching correct function names.\nfunction-naming-style=\"snake_case\"\n\n# Regular expression matching correct function names. Overrides function-\n# naming-style.\n#function-rgx=\n\n# Good variable names which should always be accepted, separated by a comma.\ngood-names=\"\"\n\n# Good variable names regexes, separated by a comma. If names match any regex,\n# they will always be accepted\ngood-names-rgxs=\"^[_a-z][_a-z0-9]*$\"\n\n# Include a hint for the correct naming format with invalid-name.\ninclude-naming-hint=\"no\"\n\n# Naming style matching correct inline iteration names.\ninlinevar-naming-style=\"any\"\n\n# Regular expression matching correct inline iteration names. Overrides\n# inlinevar-naming-style.\n#inlinevar-rgx=\n\n# Naming style matching correct method names.\nmethod-naming-style=\"snake_case\"\n\n# Regular expression matching correct method names. Overrides method-naming-\n# style.\n#method-rgx=\n\n# Naming style matching correct module names.\nmodule-naming-style=\"snake_case\"\n\n# Regular expression matching correct module names. Overrides module-naming-\n# style.\n#module-rgx=\n\n# Colon-delimited sets of names that determine each other's naming style when\n# the name regexes allow several styles.\nname-group=\"\"\n\n# Regular expression which should only match function or class names that do\n# not require a docstring.\nno-docstring-rgx=\"^_\"\n\n# List of decorators that produce properties, such as abc.abstractproperty. Add\n# to this list to register other decorators that produce valid properties.\n# These decorators are taken in consideration only for invalid-name.\nproperty-classes=\"abc.abstractproperty\"\n\n# Naming style matching correct variable names.\nvariable-naming-style=\"snake_case\"\n\n# Regular expression matching correct variable names. Overrides variable-\n# naming-style.\n#variable-rgx=\n\n\n[tool.pylint.SIMILARITIES]\n\n# Comments are removed from the similarity computation\nignore-comments=\"yes\"\n\n# Docstrings are removed from the similarity computation\nignore-docstrings=\"yes\"\n\n# Imports are removed from the similarity computation\nignore-imports=\"no\"\n\n# Signatures are removed from the similarity computation\nignore-signatures=\"no\"\n\n# Minimum lines number of a similarity.\nmin-similarity-lines=4\n\n\n[tool.pylint.FORMAT]\n\n# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.\nexpected-line-ending-format=\"\"\n\n# Regexp for a line that is allowed to be longer than the limit.\nignore-long-lines=\"^\\\\s*(# )?<?https?:\\\\/\\\\/\\\\S+>?$\"\n\n# Number of spaces of indent required inside a hanging or continued line.\nindent-after-paren=4\n\n# String used as indentation unit. This is usually \"    \" (4 spaces) or \"\\t\" (1\n# tab).\nindent-string='    '\n\n# Maximum number of characters on a single line.\nmax-line-length=120\n\n# Maximum number of lines in a module.\n# max-module-lines=1000\n\n# Allow the body of a class to be on the same line as the declaration if body\n# contains single statement.\nsingle-line-class-stmt=\"no\"\n\n# Allow the body of an if to be on the same line as the test if there is no\n# else.\nsingle-line-if-stmt=\"no\"\n\n\n[tool.pylint.IMPORTS]\n\n# List of modules that can be imported at any level, not just the top level\n# one.\nallow-any-import-level=\"\"\n\n# Allow wildcard imports from modules that define __all__.\nallow-wildcard-with-all=\"no\"\n\n# Analyse import fallback blocks. This can be used to support both Python 2 and\n# 3 compatible code, which means that the block might have code that exists\n# only in one or another interpreter, leading to false positives when analysed.\nanalyse-fallback-blocks=\"no\"\n\n# Deprecated modules which should not be used, separated by a comma.\ndeprecated-modules=\"\"\n\n# Output a graph (.gv or any supported image format) of external dependencies\n# to the given file (report RP0402 must not be disabled).\next-import-graph=\"\"\n\n# Output a graph (.gv or any supported image format) of all (i.e. internal and\n# external) dependencies to the given file (report RP0402 must not be\n# disabled).\nimport-graph=\"\"\n\n# Output a graph (.gv or any supported image format) of internal dependencies\n# to the given file (report RP0402 must not be disabled).\nint-import-graph=\"\"\n\n# Force import order to recognize a module as part of the standard\n# compatibility libraries.\nknown-standard-library=\"\"\n\n# Force import order to recognize a module as part of a third party library.\nknown-third-party=\"enchant\"\n\n# Couples of modules and preferred modules, separated by a comma.\npreferred-modules=\"\"\n\n\n[tool.pylint.CLASSES]\n\n# Warn about protected attribute access inside special methods\ncheck-protected-access-in-special-methods=\"no\"\n\n# List of method names used to declare (i.e. assign) instance attributes.\ndefining-attr-methods=\"__init__,__new__,setUp,__post_init__\"\n\n# List of member names, which should be excluded from the protected access\n# warning.\nexclude-protected=\"_asdict,_fields,_replace,_source,_make\"\n\n# List of valid names for the first argument in a class method.\nvalid-classmethod-first-arg=\"cls\"\n\n# List of valid names for the first argument in a metaclass class method.\nvalid-metaclass-classmethod-first-arg=\"cls\"\n\n\n[tool.pylint.DESIGN]\n\n# List of regular expressions of class ancestor names to ignore when counting\n# public methods (see R0903)\nexclude-too-few-public-methods=\"\"\n\n# List of qualified class names to ignore when counting class parents (see\n# R0901)\nignored-parents=\"\"\n\n# Maximum number of arguments for function / method.\nmax-args=5\n\n# Maximum number of attributes for a class (see R0902).\nmax-attributes=7\n\n# Maximum number of boolean expressions in an if statement (see R0916).\nmax-bool-expr=5\n\n# Maximum number of branch for function / method body.\nmax-branches=12\n\n# Maximum number of locals for function / method body.\nmax-locals=15\n\n# Maximum number of parents for a class (see R0901).\nmax-parents=7\n\n# Maximum number of public methods for a class (see R0904).\nmax-public-methods=20\n\n# Maximum number of return / yield for function / method body.\nmax-returns=6\n\n# Maximum number of statements in function / method body.\nmax-statements=50\n\n# Minimum number of public methods for a class (see R0903).\nmin-public-methods=2\n\n\n[tool.pylint.EXCEPTIONS]\n\n# Exceptions that will emit a warning when being caught. Defaults to\n# \"BaseException, Exception\".\novergeneral-exceptions=\"BaseException,Exception\"\n\n[tool.pydocstyle]\nconvention=\"google\"\nadd_ignore=\"D102,D105,D107,D401\"\nadd_select=\"D400,D404\"\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 8.0908203125,
          "content": "# Copyright 2022 MosaicML Composer authors\n# SPDX-License-Identifier: Apache-2.0\n\n\"\"\"Composer package setup.\"\"\"\n\nimport os\nimport site\nimport sys\nimport textwrap\n\nimport setuptools\nfrom setuptools import setup\nfrom setuptools.command.develop import develop as develop_orig\n\n# Read the composer version\n# Cannot import from `composer.__version__` since that will not be available when building or installing the package\nwith open(os.path.join(os.path.dirname(__file__), 'composer', '_version.py')) as f:\n    version_globals = {}\n    version_locals = {}\n    exec(f.read(), version_globals, version_locals)\n    composer_version = version_locals['__version__']\n\n_IS_ROOT = os.getuid() == 0\n_IS_USER = '--user' in sys.argv[1:]\n_IS_VIRTUALENV = 'VIRTUAL_ENV' in os.environ\n\n\n# From https://stackoverflow.com/questions/51292333/how-to-tell-from-setup-py-if-the-module-is-being-installed-in-editable-mode\nclass develop(develop_orig):\n    \"\"\"Override the ``develop`` class to error if attempting an editable install as root.\"\"\"\n\n    def run(self):\n        if _IS_ROOT and (not _IS_VIRTUALENV) and (not _IS_USER):\n            raise RuntimeError(\n                textwrap.dedent(\n                    \"\"\"\\\n                    When installing in editable mode as root outside of a virtual environment,\n                    please specify `--user`. Editable installs as the root user outside of a virtual environment\n                    do not work without the `--user` flag. Please instead run something like: `pip install --user -e .`\"\"\",\n                ),\n            )\n        super().run()\n\n\n# From https://github.com/pypa/pip/issues/7953#issuecomment-645133255\nsite.ENABLE_USER_SITE = _IS_USER\n\n\ndef package_files(prefix: str, directory: str, extension: str):\n    \"\"\"Get all the files to package.\"\"\"\n    # from https://stackoverflow.com/a/36693250\n    paths = []\n    for (path, _, filenames) in os.walk(os.path.join(prefix, directory)):\n        for filename in filenames:\n            if filename.endswith(extension):\n                paths.append(os.path.relpath(os.path.join(path, filename), prefix))\n    return paths\n\n\nwith open('README.md', 'r', encoding='utf-8') as fh:\n    long_description = fh.read()\n\n# Hide the content between <!-- SETUPTOOLS_LONG_DESCRIPTION_HIDE_BEGIN --> and\n# <!-- SETUPTOOLS_LONG_DESCRIPTION_HIDE_END --> tags in the README\nwhile True:\n    start_tag = '<!-- SETUPTOOLS_LONG_DESCRIPTION_HIDE_BEGIN -->'\n    end_tag = '<!-- SETUPTOOLS_LONG_DESCRIPTION_HIDE_END -->'\n    start = long_description.find(start_tag)\n    end = long_description.find(end_tag)\n    if start == -1:\n        assert end == -1, 'there should be a balanced number of start and ends'\n        break\n    else:\n        assert end != -1, 'there should be a balanced number of start and ends'\n        long_description = long_description[:start] + \\\n            long_description[end + len(end_tag):]\n\ninstall_requires = [\n    'pyyaml>=6.0,<7',\n    'tqdm>=4.62.3,<5',\n    'torchmetrics>=1.0,<1.6.1',\n    'torch_optimizer>=0.3.0,<0.4',\n    'torchvision>=0.18.0,<0.20.2',\n    'torch>=2.3.0,<2.5.2',\n    'requests>=2.26.0,<3',\n    'numpy>=1.21.5,<2.2.0',\n    'psutil>=5.8.0,<7',\n    'coolname>=1.1.0,<3',\n    'tabulate==0.9.0',  # for auto-generating tables\n    'py-cpuinfo>=8.0.0,<10',\n    'packaging>=21.3.0,<24.3',\n    'importlib-metadata>=5.0.0,<9',\n    'mosaicml-cli>=0.5.25,<0.7',\n    'pillow>=10.3.0,<12',\n]\nextra_deps = {}\n\nextra_deps['base'] = []\n\nextra_deps['dev'] = [\n    # Imports for docs builds and running tests\n    # Pinning versions strictly to avoid random test failures.\n    # Should manually update dependency versions occassionally.\n    'custom_inherit==2.4.1',\n    'junitparser==3.1.2',\n    'coverage[toml]==7.6.8',\n    'fasteners==0.18',  # object store tests require fasteners\n    'pytest==7.4.4',\n    'ipython==8.11.0',\n    'ipykernel==6.29.5',\n    'jupyter==1.1.1',\n    'yamllint==1.35.1',\n    'recommonmark==0.7.1',\n    'sphinx==4.4.0',\n    'pre-commit>=3.4.0,<5',\n    # embedding md in rst require docutils>=0.17. See\n    # https://myst-parser.readthedocs.io/en/latest/sphinx/use.html?highlight=parser#include-markdown-files-into-an-rst-file\n    'docutils==0.17.1',\n    'sphinx_markdown_tables==0.0.17',\n    'sphinx-argparse==0.4.0',\n    'sphinxcontrib.katex==0.9.10',\n    'sphinxcontrib-applehelp==1.0.0',\n    'sphinxcontrib-devhelp==1.0.0',\n    'sphinxcontrib-htmlhelp==2.0.0',\n    'sphinxcontrib-serializinghtml==1.1.5',\n    'sphinxcontrib-qthelp==1.0.0',\n    'sphinxext.opengraph==0.9.1',\n    'sphinxemoji==0.2.0',\n    'furo==2022.9.29',\n    'sphinx-copybutton==0.5.2',\n    'testbook==0.4.2',\n    'myst-parser==0.16.1',\n    'sphinx_panels==0.6.0',\n    'sphinxcontrib-images==0.9.4',\n    'pytest_codeblocks==0.17.0',\n    'traitlets==5.14.3',\n    'nbsphinx==0.9.1',\n    'pandoc==2.4',\n    'pypandoc==1.14',\n    'GitPython==3.1.43',\n    'moto[s3]>=5.0.1,<6',\n    'mock-ssh-server==0.9.1',\n    'cryptography==44.0.0',\n    'pytest-httpserver>=1.0.4,<1.1',\n    'setuptools<=59.5.0',\n    'scikit-learn>=1.2.0,<1.6',\n]\n\nextra_deps['system_metrics_monitor'] = {\n    'pynvml>=11.5.0,<12',\n}\n\nextra_deps['slack'] = {\n    'slack_sdk>=3.19.5,<4',\n}\n\nextra_deps['wandb'] = [\n    'wandb>=0.13.2,<0.19',\n]\n\nextra_deps['comet_ml'] = [\n    'comet_ml>=3.31.12,<4.0.0',\n]\n\nextra_deps['neptune'] = [\n    'neptune>=1.6.2,<2.0.0',\n]\n\nextra_deps['tensorboard'] = [\n    'tensorboard>=2.9.1,<3.0.0',\n]\n\nextra_deps['coco'] = [\n    'pycocotools>=2.0.4,<3',\n]\n\nextra_deps['nlp'] = [\n    'transformers>=4.11,!=4.34.0,<4.46',\n    'datasets>=2.4,<4',\n    'huggingface-hub>=0.21.2,<0.27',\n]\n\nextra_deps['peft'] = [\n    'peft>=0.10.0,<0.14',\n]\n\nextra_deps['sentencepiece'] = [\n    'protobuf<5.30',\n    'sentencepiece==0.2.0',\n]\n\nextra_deps['mlperf'] = [\n    # TODO: use pip when available: https://github.com/mlcommons/logging/issues/218\n    # \"mlperf_logging @ git+https://github.com/mlperf/logging.git\",\n    'py-cpuinfo>=8.0.0,<10',\n]\n\nextra_deps['streaming'] = [\n    'mosaicml-streaming<1.0',\n    'boto3>=1.21.45,<2',\n    'paramiko>=3.4.0,<4',\n]\n\nextra_deps['libcloud'] = [\n    'apache-libcloud>=3.3.1,<4',\n]\n\nextra_deps['oci'] = [\n    'oci>=2.88.2,<3.0.0',\n]\n\nextra_deps['gcs'] = [\n    'google-cloud-storage>=2.0.0,<3.0',\n]\n\nextra_deps['onnx'] = [\n    'onnx>=1.12.0,<2',\n    'onnxruntime>=1.12.1,<2',\n]\n\nextra_deps['mlflow'] = [\n    'mlflow>=2.14.1,<3.0',\n    'databricks-sdk==0.38.0',\n    'pynvml>=11.5.0,<12',\n]\n\nextra_deps['pandas'] = ['pandas>=2.0.0,<3.0']\n\nextra_deps['databricks'] = ['databricks-sdk==0.38.0']\n\nextra_deps['all'] = {dep for deps in extra_deps.values() for dep in deps}\n\ncomposer_data_files = ['py.typed']\ncomposer_data_files += package_files('composer', 'yamls', '.yaml')\ncomposer_data_files += package_files('composer', 'algorithms', '.json')\n\npackage_name = os.environ.get('COMPOSER_PACKAGE_NAME', 'mosaicml')\n\nif package_name != 'mosaicml':\n    print(f'`Building composer as `{package_name}`)', file=sys.stderr)\n\nsetup(\n    name=package_name,\n    version=composer_version,\n    author='MosaicML',\n    author_email='team@mosaicml.com',\n    description=(\n        'Composer is a PyTorch library that enables you to train ' +\n        'neural networks faster, at lower cost, and to higher accuracy.'\n    ),\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/mosaicml/composer',\n    include_package_data=True,\n    package_data={\n        'composer': composer_data_files,\n    },\n    packages=setuptools.find_packages(exclude=['docker*', 'examples*', 'scripts*', 'tests*']),\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n    ],\n    install_requires=install_requires,\n    entry_points={\n        'console_scripts': [\n            'composer = composer.cli.launcher:main',\n            'composer_collect_env = composer.utils.collect_env:main',\n            'composer_validate_remote_path = composer.utils.file_helpers:validate_remote_path',\n        ],\n    },\n    extras_require=extra_deps,\n    dependency_links=['https://developer.download.nvidia.com/compute/redist'],\n    python_requires='>=3.9',\n    ext_package='composer',\n    cmdclass={'develop': develop},\n)\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}