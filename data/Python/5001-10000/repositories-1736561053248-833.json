{
  "metadata": {
    "timestamp": 1736561053248,
    "page": 833,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spotipy-dev/spotipy",
      "stars": 5091,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55859375,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbin/\nbuild/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n\n# Spotipy tokens\n.cache\n\n.*\narchive"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.2919921875,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\nversion: 2\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\nsphinx:\n  configuration: docs/conf.py\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.1650390625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\nAdd your changes below.\n\n### Added\n\n### Fixed\n\n### Removed\n\n## [2.25.0] - 2025-03-01\n\n### Added\n- Added unit tests for queue functions\n- Added detailed function docstrings to 'util.py', including descriptions and special sections that lists arguments, returns, and raises.\n- Updated order of instructions for Python and pip package manager installation in TUTORIAL.md\n- Updated TUTORIAL.md instructions to match current layout of Spotify Developer Dashboard\n- Added test_artist_id, test_artist_url, and test_artists_mixed_ids to non_user_endpoints test.py\n- Added rate/request limit to FAQ\n- Added custom `urllib3.Retry` class for printing a warning when a rate/request limit is reached.\n- Added `personalized_playlist.py`, `track_recommendations.py`, and `audio_features_analysis.py` to `/examples`.\n- Discord badge in README\n- Added `SpotifyBaseException` and moved all exceptions to `exceptions.py`\n- Marked the following methods as deprecated:\n  - artist_related_artists\n  - recommendations\n  - audio_features\n  - audio_analysis\n  - featured_playlists\n  - category_playlists\n- Added FAQ entry for inaccessible playlists\n\n### Fixed\n- Audiobook integration tests\n- Edited docstrings for certain functions in client.py for functions that are no longer in use and have been replaced.\n- `current_user_unfollow_playlist()` now supports playlist IDs, URLs, and URIs rather than previously where it only supported playlist IDs.\n\n### Removed\n- `mock` no longer listed as a test dependency. Only built-in `unittest.mock` is actually used.\n\n## [2.24.0] - 2024-05-30\n\n### Added\n- Added `MemcacheCacheHandler`, a cache handler that stores the token info using pymemcache.\n- Added support for audiobook endpoints: `get_audiobook`, `get_audiobooks`, and `get_audiobook_chapters`.\n- Added integration tests for audiobook endpoints.\n- Added `update` field to `current_user_follow_playlist`.\n\n### Changed\n- Fixed error obfuscation when Spotify class is being inherited and an error is raised in the Child's `__init__`\n- Replaced `artist_albums(album_type=...)` with `artist_albums(include_groups=...)` due to an API change.\n- Updated `_regex_spotify_url` to ignore `/intl-<countrycode>` in Spotify links\n- Improved README, docs and examples\n\n### Fixed\n- Readthedocs build\n- Split `test_current_user_save_and_usave_tracks` unit test\n\n### Removed\n- Drop support for EOL Python 3.7\n\n## [2.23.0] - 2023-04-07\n\n### Added\n- Added optional `encoder_cls` argument to `CacheFileHandler`, which overwrite default encoder for token before writing to disk\n- Integration tests for searching multiple types in multiple markets (non-user endpoints)\n- Publish to PyPI action\n\n### Fixed\n- Fixed the regex for matching playlist URIs with the format spotify:user:USERNAME:playlist:PLAYLISTID.\n- `search_markets` now factors the counts of all types in the `total`  rather than just the first type ([#534](https://github.com/spotipy-dev/spotipy/issues/534))\n\n## [2.22.1] - 2023-01-23\n\n### Added\n\n- Add alternative module installation instruction to README\n- Added Comment to README - Getting Started for user to add URI to app in Spotify Developer Dashboard. \n- Added playlist_add_tracks.py to example folder\n\n### Changed\n\n- Modified docstring for playlist_add_items() to accept \"only URIs or URLs\",\n  with intended deprecation for IDs in v3\n\n### Fixed\n\n- Path traversal vulnerability that may lead to type confusion in URI handling code\n- Update contributing.md\n\n## [2.22.0] - 2022-12-10\n\n### Added\n\n- Integration tests via GHA (non-user endpoints)\n- Unit tests for new releases, passing limit parameter with minimum and maximum values of 1 and 50\n- Unit tests for categories, omitting country code to test global releases\n- Added `CODE_OF_CONDUCT.md`\n\n### Fixed\n\n- Incorrect `category_id` input for test_category\n- Assertion value for `test_categories_limit_low` and `test_categories_limit_high`\n- Pin GitHub Actions Runner to Ubuntu 20 for Py27\n- Fixed potential error where `found` variable in `test_artist_related_artists` is undefined if for loop never evaluates to true\n- Fixed false positive test `test_new_releases` which looks up the wrong property of the JSON response object and always evaluates to true\n\n## [2.21.0] - 2022-09-26\n\n### Added\n\n- Added `market` parameter to `album` and `albums` to address ([#753](https://github.com/plamere/spotipy/issues/753)\n- Added `show_featured_artists.py` to `/examples`.\n- Expanded contribution and license sections of the documentation.\n- Added `FlaskSessionCacheHandler`, a cache handler that stores the token info in a flask session.\n- Added Python 3.10 in GitHub Actions\n\n### Fixed\n\n- Updated the documentation to specify ISO-639-1 language codes.\n- Fix `AttributeError` for `text` attribute of the `Response` object\n- Require redis v3 if python2.7 (fixes readthedocs)\n\n## [2.20.0] - 2022-06-18\n\n### Added\n\n- Added `RedisCacheHandler`, a cache handler that stores the token info in Redis.\n- Changed URI handling in `client.Spotify._get_id()` to remove queries if provided by error.\n- Added a new parameter to `RedisCacheHandler` to allow custom keys (instead of the default `token_info` key)\n- Simplify check for existing token in `RedisCacheHandler`\n\n### Changed\n\n- Removed Python 3.5 and added Python 3.9 in GitHub Action\n\n## [2.19.0] - 2021-08-12\n\n### Added\n\n- Added `MemoryCacheHandler`, a cache handler that simply stores the token info in memory as an instance attribute of this class.\n- If a network request returns an error status code but the response body cannot be decoded into JSON, then fall back on decoding the body into a string.\n- Added `DjangoSessionCacheHandler`, a cache handler that stores the token in the session framework provided by Django. Web apps using spotipy with Django can directly use this for cache handling.\n\n### Fixed\n\n- Fixed a bug in `CacheFileHandler.__init__`: The documentation says that the username will be retrieved from the environment, but it wasn't.\n- Fixed a bug in the initializers for the auth managers that produced a spurious warning message if you provide a cache handler, and you set a value for the \"SPOTIPY_CLIENT_USERNAME\" environment variable.\n- Use generated MIT license and fix license type in `pip show`\n\n## [2.18.0] - 2021-04-13\n\n### Added\n\n- Enabled using both short and long IDs for playlist_change_details\n- Added a cache handler to `SpotifyClientCredentials`\n- Added the following endpoints\n    - `Spotify.current_user_saved_episodes`\n    - `Spotify.current_user_saved_episodes_add`\n    - `Spotify.current_user_saved_episodes_delete`\n    - `Spotify.current_user_saved_episodes_contains`\n    - `Spotify.available_markets`\n\n### Changed\n\n- Add support for a list of scopes rather than just a comma separated string of scopes\n\n### Fixed\n\n- Fixed the bugs in `SpotifyOAuth.refresh_access_token` and `SpotifyPKCE.refresh_access_token` which raised the incorrect exception upon receiving an error response from the server. This addresses #645.\n- Fixed a bug in `RequestHandler.do_GET` in which the non-existent `state` attribute of `SpotifyOauthError` is accessed. This bug occurs when the user clicks \"cancel\" in the permissions dialog that opens in the browser.\n- Cleaned up the documentation for `SpotifyClientCredentials.__init__`, `SpotifyOAuth.__init__`, and `SpotifyPKCE.__init__`.\n\n## [2.17.1] - 2021-02-28\n\n### Fixed\n\n- `allowed_methods` requires urllib3>=1.26.0\n\n## [2.17.0] - 2021-02-28\n\n### Changed\n\n- moved os.remove(session_cache_path()) inside try block to avoid TypeError on app.py example file\n- A warning will no longer be emitted when the cache file does not exist at the specified path\n- The docs for the `auth` parameter of `Spotify.init` use the term \"access token\" instead of \"authorization token\"\n- Changed docs for `search` to mention that you can provide multiple types to search for\n- The query parameters of requests are now logged\n- Deprecate specifying `cache_path` or `username` directly to `SpotifyOAuth`, `SpotifyPKCE`, and `SpotifyImplicitGrant` constructors, instead directing users to use the `CacheFileHandler` cache handler\n- Removed requirement for examples/app.py to specify port multiple times (only SPOTIPY_REDIRECT_URI needs to contain the port)\n\n### Added\n\n- Added log messages for when the access and refresh tokens are retrieved and when they are refreshed\n- Support `market` optional parameter in `track`\n- Added CacheHandler abstraction to allow users to cache tokens in any way they see fit\n\n### Fixed\n\n- Fixed Spotify.user_playlist_reorder_tracks calling Spotify.playlist_reorder_tracks with an incorrect parameter order\n- Fixed deprecated Urllib3 `Retry(method_whitelist=...)` in favor of `Retry(allowed_methods=...)`\n\n## [2.16.1] - 2020-10-24\n\n### Fixed\n\n- playlist_tracks example code no longer prints extra characters on final loop iteration\n- SpotifyException now thrown when a request fails & has no response ([#571](https://github.com/plamere/spotipy/issues/571), [#581](https://github.com/plamere/spotipy/issues/581))\n- Added scope, `playlist-read-private`, to examples that access user playlists using the spotipy api: current_user_playlists() ([#591](https://github.com/plamere/spotipy/issues/591))\n- Enable retries for POST, DELETE, PUT ([#577](https://github.com/plamere/spotipy/issues/577))\n\n### Changed\n\n- both inline and starting import lists are sorted using `isort` module\n- changed Max Retries exception code from 599 to 429\n\n## [2.16.0] - 2020-09-16\n\n### Added\n\n- `open_browser` can be passed to the constructors of `SpotifyOAuth` and `SpotifyPKCE` to make it easier to authorize in browserless environments\n\n## [2.15.0] - 2020-09-08\n\n### Added\n\n- `SpotifyPKCE.parse_auth_response_url`, mirroring that method in\n    `SpotifyOAuth`\n\n### Changed\n\n- Specifying a cache_path or username is now optional\n\n### Fixed\n\n- Using `SpotifyPKCE.get_authorization_url` will now generate a code\n    challenge if needed\n\n## [2.14.0] - 2020-08-29\n\n### Added\n\n- (experimental) Support to search multiple/all markets at once.\n- Support to test whether the current user is following certain\n    users or artists\n- Proper replacements for all deprecated playlist endpoints\n    (See https://developer.spotify.com/community/news/2018/06/12/changes-to-playlist-uris/ and below)\n- Allow for OAuth 2.0 authorization by instructing the user to open the URL in a browser instead of opening the browser.\n- Reason for 403 error in SpotifyException\n- Support for the PKCE Auth Flow\n- Support to advertise different language to Spotify\n- Added 'collaborative' parameter to user_playlist_create method.\n- Enforce CHANGELOG update on PR\n- Adds `additional_types` parameter to retrieve currently playing podcast episode\n- Support to get info about a single category\n\n### Deprecated\n\n- `user_playlist_change_details` in favor of `playlist_change_details`\n- `user_playlist_unfollow` in favor of `current_user_unfollow_playlist`\n- `user_playlist_add_tracks` in favor of `playlist_add_items`\n- `user_playlist_replace_tracks` in favor of `playlist_replace_items`\n- `user_playlist_reorder_tracks` in favor of `playlist_reorder_items`\n- `user_playlist_remove_all_occurrences_of_tracks` in favor of\n    `playlist_remove_all_occurrences_of_items`\n- `user_playlist_remove_specific_occurrences_of_tracks` in favor of\n    `playlist_remove_specific_occurrences_of_items`\n- `user_playlist_follow_playlist` in favor of\n    `current_user_follow_playlist`\n- `user_playlist_is_following` in favor of `playlist_is_following`\n- `playlist_tracks` in favor of `playlist_items`\n\n### Fixed\n\n- fixed issue where episode URIs were being converted to track URIs in playlist calls\n\n## [2.13.0] - 2020-06-25\n\n### Added\n\n- Added `SpotifyImplicitGrant` as an auth manager option. It provides\n    user authentication without a client secret but sacrifices the ability\n    to refresh the token without user input. (However, read the class\n    docstring for security advisory.)\n- Added built-in verification of the `state` query parameter\n- Added two new attributes: error and error_description to `SpotifyOauthError` exception class to show\n    authorization/authentication web api errors details.\n- Added `SpotifyStateError` subclass of `SpotifyOauthError`\n- Allow extending `SpotifyClientCredentials` and `SpotifyOAuth`\n- Added the market parameter to `album_tracks`\n\n### Deprecated\n\n- Deprecated `util.prompt_for_user_token` in favor of `spotipy.Spotify(auth_manager=SpotifyOAuth())`\n\n## [2.12.0] - 2020-04-26\n\n### Added\n\n- Added a method to update the auth token.\n\n### Fixed\n\n- Logging regression due to the addition of `logging.basicConfig()` which was unneeded.\n\n## [2.11.2] - 2020-04-19\n\n### Changed\n\n- Updated the documentation to give more details on the authorization process and reflect\n    2020 Spotify Application jargon and practices.\n\n- The local webserver is only started for localhost redirect_uri which specify a port,\n    i.e. it is started for `http://localhost:8080` or `http://127.0.0.1:8080`, not for `http://localhost`.\n\n### Fixed\n\n- Issue where using `http://localhost` as redirect_uri would cause the authorization process to hang.\n\n## [2.11.1] - 2020-04-11\n\n### Fixed\n\n- Fixed miscellaneous issues with parsing of callback URL\n\n## [2.11.0] - 2020-04-11\n\n### Added\n\n- Support for shows/podcasts and episodes\n- Added CONTRIBUTING.md\n\n### Changed\n\n- Client retry logic has changed as it now uses urllib3's `Retry` in conjunction with requests `Session`\n- The session is customizable as it allows for:\n    - status_forcelist\n    - retries\n    - status_retries\n    - backoff_factor\n- Spin up a local webserver to autofill authentication URL\n- Use session in SpotifyAuthBase\n- Logging used instead of print statements\n\n### Fixed\n\n- Close session when Spotipy object is unloaded\n- Propagate refresh token error\n\n## [2.10.0] - 2020-03-18\n\n### Added\n\n- Support for `add_to_queue`\n    - **Parameters:**\n        - track uri, id, or url\n        - device id. If None, then the active device is used.\n- Add CHANGELOG and LICENSE to released package\n\n## [2.9.0] - 2020-02-15\n\n### Added\n\n- Support `position_ms` optional parameter in `start_playback`\n- Add `requests_timeout` parameter to authentication methods\n- Make cache optional in `get_access_token`\n\n## [2.8.0] - 2020-02-12\n\n### Added\n\n- Support for `playlist_cover_image`\n- Support `after` and `before` parameter in `current_user_recently_played`\n- CI for unit tests\n- Automatic `token` refresh\n- `auth_manager` and `oauth_manager` optional parameters added to `Spotify`'s init.\n- Optional `username` parameter to be passed to `SpotifyOAuth`, to infer a `cache_path` automatically\n- Optional `as_dict` parameter to control `SpotifyOAuth`'s `get_access_token` output type. However, this is going to be deprecated in the future, and the method will always return a token string\n- Optional `show_dialog` parameter to be passed to `SpotifyOAuth`\n\n### Changed\n\n- Both `SpotifyClientCredentials` and `SpotifyOAuth` inherit from a common `SpotifyAuthBase` which handles common parameters and logics.\n\n## [2.7.1] - 2020-01-20\n\n### Changed\n\n- PyPi release mistake without pulling last merge first\n\n## [2.7.0] - 2020-01-20\n\n### Added\n\n- Support for `playlist_tracks`\n- Support for `playlist_upload_cover_image`\n\n### Changed\n\n- `user_playlist_tracks` doesn't require a user anymore (accepts `None`)\n\n### Deprecated\n\n- Deprecated `user_playlist` and `user_playlist_tracks`\n\n## [2.6.3] - 2020-01-16\n\n### Fixed\n\n- Fixed broken doc in 2.6.2\n\n## [2.6.2] - 2020-01-16\n\n### Fixed\n\n- Fixed broken examples in README, examples and doc\n\n### Changed\n\n- Allow session keepalive\n- Bump requests to 2.20.0\n\n## [2.6.1] - 2020-01-13\n\n### Fixed\n\n- Fixed inconsistent behaviour with some API methods when\n    a full HTTP URL is passed.\n- Fixed invalid calls to logging warn method\n\n### Removed\n\n- `mock` no longer needed for install. Only used in `tox`.\n\n## [2.6.0] - 2020-01-12\n\n### Added\n\n- Support for `playlist` to get a playlist without specifying a user\n- Support for `current_user_saved_albums_delete`\n- Support for `current_user_saved_albums_contains`\n- Support for `user_unfollow_artists`\n- Support for `user_unfollow_users`\n- Lint with flake8 using GitHub action\n\n### Changed\n\n- Fix typos in doc\n- Start following [SemVer](https://semver.org) properly\n\n### Changed\n\n- Made instructions in the CONTRIBUTING.md file more clear such that it is easier to onboard and there are no conflicts with TUTORIAL.md\n## [2.5.0] - 2020-01-11\n\nAdded follow and player endpoints\n\n## [2.4.4] - 2017-01-04\n\nPython 3 fix\n\n## [2.4.3] - 2017-01-02\n\nFixed proxy issue in standard auth flow\n\n## [2.4.2] - 2017-01-02\n\nSupport getting audio features for a single track\n\n## [2.4.1] - 2017-01-02\n\nIncorporated proxy support\n\n## [2.4.0] - 2016-12-31\n\nIncorporated a number of PRs\n\n## [2.3.8] - 2016-03-31\n\nAdded recs, audio features, user top lists\n\n## [2.3.7] - 2015-08-10\n\nAdded current_user_followed_artists\n\n## [2.3.6] - 2015-06-03\n\nSupport for offset/limit with album_tracks API\n\n## [2.3.5] - 2015-04-28\n\nFixed bug in auto retry logic\n\n## [2.3.3] - 2015-04-01\n\nAdded client credential flow\n\n## [2.3.2] - 2015-03-31\n\nAdded auto retry logic\n\n## [2.3.0] - 2015-01-05\n\nAdded session support added by akx.\n\n## [2.2.0] - 2014-11-15\n\nAdded support for user_playlist_tracks\n\n## [2.1.0] - 2014-10-25\n\nAdded support for new_releases and featured_playlists\n\n## [2.0.2] - 2014-08-25\n\nMoved to spotipy at pypi\n\n## [1.2.0] - 2014-08-22\n\nUpgraded APIs and docs to make it be a real library\n\n## [1.310.0] - 2014-08-20\n\nAdded playlist replace and remove methods. Added auth tests. Improved API docs\n\n## [1.301.0] - 2014-08-19\n\nUpgraded version number to take precedence over previously botched release (sigh)\n\n## [1.50.0] - 2014-08-14\n\nRefactored util out of examples and into the main package\n\n## [1.49.0] - 2014-07-23\n\nSupport for \"Your Music\" tracks (add, delete, get), with examples\n\n## [1.45.0] - 2014-07-07\n\nSupport for related artists' endpoint. Don't use cache auth codes when scope changes\n\n## [1.44.0] - 2014-07-03\n\nAdded show tracks.py example\n\n## [1.43.0] - 2014-06-27\n\nFixed JSON handling issue\n\n## [1.42.0] - 2014-06-19\n\nRemoved dependency on simplejson\n\n## [1.40.0] - 2014-06-12\n\nInitial public release.\n\n## [1.4.2] - 2014-06-21\n\nAdded support for retrieving starred playlists\n\n## [1.1.0] - 2014-06-17\n\nUpdates to match released API\n\n## [1.1.0] - 2014-05-18\n\nRepackaged for saner imports\n\n## [1.0.0] - 2017-04-05\n\nInitial release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.9423828125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nHere at Spotipy, we would like to promote an environment which is open and \nwelcoming to all. As contributors and maintainers we want to guarantee an \nexperience which is free of harassment for everyone. By everyone, we mean everyone, \nregardless of: age, body size, disability, ethnicity, sex characteristics, gender \nidentity and expression, level of experience, education, socio-economic status, \nnationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nHere are some examples of conduct which we believe is conducive to and contributes \nto a positive environment:\n\n* Use of welcoming and inclusive language\n* Giving due respect to differing viewpoints and experiences\n* Being accepting of constructive criticism\n* Being focused on what is best for the community\n* Displaying empathy towards other members of the community\n\nHere are some examples of conduct which we believe are unacceptable:\n\n* Using sexualized language/imagery or giving other community members unwelcome \n  sexual attention\n* Making insulting/derogatory comments to other community members, or making \n  personal/political attacks against other community members\n* Trolling\n* Harassing other members publicly or privately\n* Doxxing other community members (leaking private information without first getting consent)\n* Any other behavior which would be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nAs project maintainers, we are responsible for clearly laying out standards for proper \nconduct. We are also responsible for taking the appropriate actions if and when a \ncommunity member does not act with proper conduct. An example of appropriate action \nis removing/editing/rejecting comments/commits/code/wiki edits/issues or other \ncontributions made by such an offender. If a community members continues to act in a \nway contrary to the Code of Conduct, it is our responsibility to ban them (temporarily \nor permanently). \n\n## Scope\n\nCommunity members are expected to adhere to the Code of Conduct within all project spaces, \nas well as in all public spaces when representing the Spotipy community.\n\n## Enforcement\nPlease report instances of abusive, harassing, or otherwise unacceptable behavior to us. \nAll complaints will be investigated and reviewed by the project team and will result in \nan appropriate response. The project team is obligated to maintain confidentiality with \nregard to the reporter of an incident.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may \nface temporary or permanent repercussions as determined by other members of the project’s \nleadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at \nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html. For answers to \ncommon questions about this code of conduct, see https://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8095703125,
          "content": "## Contributing\n\nIf you would like to contribute to spotipy follow these steps:\n\n### Export the needed environment variables\n\n```bash\n# Linux or Mac\nexport SPOTIPY_CLIENT_ID=client_id_here\nexport SPOTIPY_CLIENT_SECRET=client_secret_here\nexport SPOTIPY_CLIENT_USERNAME=client_username_here # This is actually an id not spotify display name and can be found [here](https://www.spotify.com/us/account/overview/)\nexport SPOTIPY_REDIRECT_URI=http://localhost:8080 # Make url is set in app you created to get your ID and SECRET\n\n# Windows\n$env:SPOTIPY_CLIENT_ID=\"client_id_here\"\n$env:SPOTIPY_CLIENT_SECRET=\"client_secret_here\"\n$env:SPOTIPY_CLIENT_USERNAME=\"client_username_here\" \n$env:SPOTIPY_REDIRECT_URI=\"http://localhost:8080\" \n```\n\n### Create virtual environment, install dependencies, run tests:\n\n```bash\n$ virtualenv --python=python3 env\n$ source env/bin/activate\n(env) $ pip install -e . \n(env) $ python -m unittest discover -v tests\n```\n\n### Lint\n\nTo automatically fix the code style:\n\n    pip install autopep8\n    autopep8 --in-place --aggressive --recursive .\n\nTo verify the code style:\n\n    pip install flake8\n    flake8 .\n\nTo make sure if the import lists are stored correctly:\n\n    pip install isort\n    isort . -c -v\n\n### Changelog\n\nDon't forget to add a short description of your change in the [CHANGELOG](CHANGELOG.md)\n\n### Publishing (by maintainer)\n\n - Bump version in setup.py\n - Bump and date changelog\n - Add to changelog:\n\n       ## Unreleased\n       Add your changes below.\n\n       ### Added\n\n       ### Fixed\n\n       ### Removed\n\n - Commit changes\n - Push tag to trigger PyPI build & release workflow\n - Create github release https://github.com/plamere/spotipy/releases with the changelog content\n   for the version and a short name that describes the main addition\n - Verify doc uses latest https://readthedocs.org/projects/spotipy/\n "
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 3.326171875,
          "content": "## Frequently Asked Questions\n\n### Is there a way to get this field?\n\nspotipy can only return fields documented on the Spotify web API https://developer.spotify.com/documentation/web-api/reference/\n\n### How to use spotipy in an API?\n\nCheck out [this example Flask app](examples/app.py)\n\n### How can I store tokens in a database rather than on the filesystem?\n\nSee https://spotipy.readthedocs.io/en/latest/#customized-token-caching\n\n### Incorrect user\n\nError:\n\n - You get `You cannot create a playlist for another user`\n - You get `You cannot remove tracks from a playlist you don't own`\n\nSolution:\n\n - Verify that you are signed in with the correct account on https://spotify.com\n - Remove your current token: `rm .cache-{userid}`\n - Request a new token by adding `show_dialog=True` to `spotipy.Spotify(auth_manager=SpotifyOAuth(show_dialog=True))`\n - Check that `spotipy.me()` shows the correct user id\n\n### Why do I get 401 Unauthorized?\n\nError:\n\n    spotipy.exceptions.SpotifyException: http status: 401, code:-1 - https://api.spotify.com/v1/\n    Unauthorized.\n\nSolution:\n\n - You are likely missing a scope when requesting the endpoint, check\nhttps://developer.spotify.com/documentation/web-api/concepts/scopes/\n\n### Search doesn't find some tracks\n\nProblem: you can see a track on the Spotify app but searching for it using the API doesn't find it.\n \nSolution: by default `search(\"abba\")` works in the US market.\nTo search for in your current country, the [country indicator](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)\nmust be specified: `search(\"abba\", market=\"DE\")`.\n\n### How do I obtain authorization in a headless/browserless environment?\n\nIf you cannot open a browser, set `open_browser=False` when instantiating SpotifyOAuth or SpotifyPKCE. You will be\nprompted to open the authorization URI manually.  \n\nSee the [headless auth example](examples/headless.py).\n\n### My application is not responding\n\nThis is still speculation, but it seems that Spotify has two limits. A rate limit and a request limit. \n\n- The rate limit prevents a script from requesting too much from the API in a short period of time.\n- The request limit limits how many requests you can make in a 24 hour window.\nThe limits appear to be endpoint-specific, so each endpoint has its own limits.\n\nIf your application stops responding, it's likely that you've reached the request limit.\nThere's nothing Spotipy can do to prevent this, but you can follow Spotify's [Rate Limits](https://developer.spotify.com/documentation/web-api/concepts/rate-limits) guide to learn how rate limiting works and what you can do to avoid ever hitting a limit.\n\n#### *Why* is the application not responding?\nSpotipy (or more precisely `urllib3`) has a backoff-retry strategy built in, which is waiting until the rate limit is gone.\nIf you want to receive an error instead, then you can pass `retries=0` to `Spotify` like this:\n```python\nsp = spotipy.Spotify(\n    retries=0,\n    ...\n)\n```\nThe error raised is a `spotipy.exceptions.SpotifyException`\n\n### I get a 404 when trying to access a Spotify-owned playlist\n\nSpotify has begun restricting access to algorithmic and Spotify-owned editorial playlists.\nOnly applications with an existing extended mode will still have access to these playlists.\nRead more about this change here: [Introducing some changes to our Web API](https://developer.spotify.com/blog/2024-11-27-changes-to-the-web-api)\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2021 Paul Lamere\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.046875,
          "content": "include *.txt *.md\nrecursive-include docs *.txt\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0341796875,
          "content": "# Spotipy\n\n##### Spotipy is a lightweight Python library for the [Spotify Web API](https://developer.spotify.com/documentation/web-api). With Spotipy you get full access to all of the music data provided by the Spotify platform.\n\n![Integration tests](https://github.com/spotipy-dev/spotipy/actions/workflows/integration_tests.yml/badge.svg?branch=master) [![Documentation Status](https://readthedocs.org/projects/spotipy/badge/?version=master)](https://spotipy.readthedocs.io/en/latest/?badge=master) [![Discord server](https://img.shields.io/discord/1244611850700849183?style=flat&logo=discord&logoColor=7289DA&color=7289DA)](https://discord.gg/HP6xcPsTPJ)\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Reporting Issues](#reporting-issues)\n- [Contributing](#contributing)\n\n## Features\n\nSpotipy supports all of the features of the Spotify Web API including access to all end points, and support for user authorization. For details on the capabilities you are encouraged to review the [Spotify Web API](https://developer.spotify.com/web-api/) documentation.\n\n## Installation\n\n```bash\npip install spotipy\n```\n\nalternatively, for Windows users \n\n```bash\npy -m pip install spotipy\n```\n\nor upgrade\n\n```bash\npip install spotipy --upgrade\n```\n\n## Quick Start\n\nA full set of examples can be found in the [online documentation](http://spotipy.readthedocs.org/) and in the [Spotipy examples directory](https://github.com/plamere/spotipy/tree/master/examples).\n\nTo get started, [install spotipy](#installation), create a new account or log in on https://developers.spotify.com/. Go to the [dashboard](https://developer.spotify.com/dashboard), create an app and add your new ID and SECRET (ID and SECRET can be found on an app setting) to your environment ([step-by-step video](https://www.youtube.com/watch?v=kaBVN8uP358)):\n\n### Example without user authentication\n\n```python\nimport spotipy\nfrom spotipy.oauth2 import SpotifyClientCredentials\n\nsp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(client_id=\"YOUR_APP_CLIENT_ID\",\n                                                           client_secret=\"YOUR_APP_CLIENT_SECRET\"))\n\nresults = sp.search(q='weezer', limit=20)\nfor idx, track in enumerate(results['tracks']['items']):\n    print(idx, track['name'])\n```\nExpected result:\n```\n0 Island In The Sun\n1 Say It Ain't So\n2 Buddy Holly\n.\n.\n.\n18 Troublemaker\n19 Feels Like Summer\n```\n\n\n### Example with user authentication\n\nA redirect URI must be added to your application at [My Dashboard](https://developer.spotify.com/dashboard/applications) to access user authenticated features.\n\n```python\nimport spotipy\nfrom spotipy.oauth2 import SpotifyOAuth\n\nsp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=\"YOUR_APP_CLIENT_ID\",\n                                               client_secret=\"YOUR_APP_CLIENT_SECRET\",\n                                               redirect_uri=\"YOUR_APP_REDIRECT_URI\",\n                                               scope=\"user-library-read\"))\n\nresults = sp.current_user_saved_tracks()\nfor idx, item in enumerate(results['items']):\n    track = item['track']\n    print(idx, track['artists'][0]['name'], \" – \", track['name'])\n```\nExpected result will be the list of music that you liked. For example if you liked Red and Sunflower, the result will be:\n```\n0 Post Malone  –  Sunflower - Spider-Man: Into the Spider-Verse\n1 Taylor Swift  –  Red\n```\n\n\n## Reporting Issues\n\nFor common questions please check our [FAQ](FAQ.md).\n\nYou can ask questions about Spotipy on\n[Stack Overflow](http://stackoverflow.com/questions/ask).\nDon’t forget to add the *Spotipy* tag, and any other relevant tags as well, before posting.\n\nIf you have suggestions, bugs or other issues specific to this library,\nfile them [here](https://github.com/plamere/spotipy/issues).\nOr just send a pull request.\n\n## Contributing\n\nIf you are a developer with Python experience, and you would like to contribute to Spotipy, please be sure to follow the guidelines listed on documentation page\n\n> #### [Visit the guideline](https://spotipy.readthedocs.io/en/#contribute)\n"
        },
        {
          "name": "TUTORIAL.md",
          "type": "blob",
          "size": 6.837890625,
          "content": "# Spotipy Tutorial for Beginners\nHello and welcome to the Spotipy Tutorial for Beginners. If you have limited experience coding in Python and have never used Spotipy or the Spotify API before, you've come to the right place. This tutorial will walk you through all the steps necessary to set up Spotipy and use it to accomplish a simple task.\n\n## Prerequisites\nIn order to complete this tutorial successfully, there are a few things that you should already have installed:\n\n**1. python3**\n\nSpotipy is written in Python, so you'll need to have the latest version of Python installed in order to use Spotipy. Check if you already have Python installed with the Terminal command: python --version\nIf you see a version number, Python is already installed. If not, you can download it here: https://www.python.org/downloads/\n\n**2. pip package manager** \n\nYou can check to see if you have pip installed by opening up Terminal and typing the following command: pip --version\nIf you see a version number, pip is installed, and you're ready to proceed. If not, instructions for downloading the latest version of pip can be found here: https://pip.pypa.io/en/stable/cli/pip_download/\n\nA. After ensuring that pip is installed, run the following command in Terminal to install Spotipy: pip install spotipy --upgrade\n\n**3. Experience with Basic Linux Commands**\n\nThis tutorial will be easiest if you have some knowledge of how to use Linux commands to create and navigate folders and files on your computer. If you're not sure how to create, edit and delete files and directories from Terminal, learn about basic Linux commands [here](https://ubuntu.com/tutorials/command-line-for-beginners#1-overview) before continuing.\n\nOnce those three setup items are taken care of, you're ready to start learning how to use Spotipy!\n\n## Step 1. Creating a Spotify Account\nSpotipy relies on the Spotify API. In order to use the Spotify API, you'll need to create a Spotify developer account.\n\nA. Visit the [Spotify developer portal](https://developer.spotify.com/dashboard/). If you already have a Spotify account, click \"Log in\" and enter your username and password. Otherwise, click \"Sign up\" and follow the steps to create an account. After you've signed in or signed up, begin by clicking on your profile name at the top right of your screen and then click “Dashboard” to go to Spotify’s Developer Dashboard.\n\nB. Check the box \"Accept the Spotify Developer Terms of Service\" and then click \"Accept the terms\". On the next page, verify your email address if you haven't already. Click the \"Create an App\" button. Enter any name and description you'd like for your new app. Next, add \"http://localhost:1234\" (or any other port number of your choosing) to the \"Redirect URI\" secction. Check the box \"I understand and agree with Spotify's Developer Terms of Service and Design Guidelines\" and then click the \"Save\" button.\n\nC. Click on \"Settings\". Underneath \"Client ID\", you'll see a \"View Client Secret\" link. Click the link to reveal your Client secret and copy both your Client secret and your Client ID somewhere so that you can access them later.\n\n## Step 2. Installation and Setup\n\nA. Create a folder somewhere on your computer where you'd like to store the code for your Spotipy app. You can create a folder in terminal with this command:  ```mkdir folder_name```\n\nB. In your new folder, create a Python file named main.py. You can create the file directly from Terminal using a built in text editor like Vim, which comes preinstalled on Linux operating systems. To create the file with Vim, ensure that you are in your new directory, then run: vim main.py\n\nC. In that folder, create a Python file named main.py. You can create the file directly from Terminal using a built in text editor like Vim, which comes preinstalled on Linux operating systems. To create the file with Vim, ensure that you are in your new directory, then run: vim main.py\n\nD. Paste the following code into your main.py file:\n```\nimport spotipy\nfrom spotipy.oauth2 import SpotifyOAuth\n\nsp = spotipy.Spotify(auth_manager=SpotifyOAuth(client_id=\"YOUR_APP_CLIENT_ID\",\n                                               client_secret=\"YOUR_APP_CLIENT_SECRET\",\n                                               redirect_uri=\"YOUR_APP_REDIRECT_URI\",\n                                               scope=\"user-library-read\"))\n```\nD. Replace YOUR_APP_CLIENT_ID and YOUR_APP_CLIENT_SECRET with the values you copied and saved in step 1D. Replace YOUR_APP_REDIRECT_URI with the URI you set in step 1B.\n\n## Step 3. Start Using Spotipy\n\nAfter completing steps 1 and 2, your app is fully configured and ready to fetch data from the Spotify API. All that's left is to tell the API what data we're looking for, and we do that by adding some additional code to main.py. The code that follows is just an example - once you get it working, you should feel free to modify it in order to get different results.\n\nFor now, let's assume that we want to print the names of all the albums on Spotify by Taylor Swift:\n\nA. First, we need to find Taylor Swift's Spotify URI (Uniform Resource Indicator). Every entity (artist, album, song, etc.) has a URI that can identify it. To find Taylor's URI, navigate to [her page on Spotify](https://open.spotify.com/artist/06HL4z0CvFAxyc27GXpf02) and look at the URI in your browser. Everything there that follows the last backslash in the URL path is Taylor's URI, in this case: 06HL4z0CvFAxyc27GXpf02\n\nB. Add the URI as a variable in main.py. Notice the prefix added the URI:\n```\ntaylor_uri = 'spotify:artist:06HL4z0CvFAxyc27GXpf02'\n```\nC. Add the following code that will get all of Taylor's album names from Spotify and iterate through them to print them all to standard output.\n```\nresults = sp.artist_albums(taylor_uri, album_type='album')\nalbums = results['items']\nwhile results['next']:\n    results = sp.next(results)\n    albums.extend(results['items'])\n\nfor album in albums:\n    print(album['name'])\n```\n\nD. Close main.py and return to the directory that contains main.py. You can then run your app by entering the following command: python main.py\n\nE. You may see a window open in your browser asking you to authorize the application. Do so - you will only have to do this once.\n\nF. Return to your terminal - you should see all of Taylor's albums printed out there.\n\n## Troubleshooting Tips\nA. Command not found running the application \"zsh: command not found: python\"\n\nCheck which Python version that you have by running the command:\n```python --version ``` or ```python3 --version```.\n\nIn most cases, the recent Python version is Python 3. You may need to update Python. Once you have updated Python to the most recent version, run the command:\n``` python3 main.py```\n\nB. Encountering package error:\n\nIf you are seeing an error \"ModuleNotFoundError: No module named 'spotipy'\", this means you have not installed the package.\nRun the command:\n```\npip install spotipy\n```\nAfter the package is installed, run the app again.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.826171875,
          "content": "from setuptools import setup\n\nwith open(\"README.md\") as f:\n    long_description = f.read()\n\nmemcache_cache_reqs = [\n    'pymemcache>=3.5.2'\n]\n\nextra_reqs = {\n    'memcache': memcache_cache_reqs\n}\n\nsetup(\n    name='spotipy',\n    version='2.25.0',\n    description='A light weight Python library for the Spotify Web API',\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"@plamere\",\n    author_email=\"paul@echonest.com\",\n    url='https://spotipy.readthedocs.org/',\n    project_urls={\n        'Source': 'https://github.com/plamere/spotipy',\n    },\n    python_requires='>3.8',\n    install_requires=[\n        \"redis>=3.5.3\",  # TODO: Move to extras_require in v3\n        \"requests>=2.25.0\",\n        \"urllib3>=1.26.0\"\n    ],\n    extras_require=extra_reqs,\n    license='MIT',\n    packages=['spotipy'])\n"
        },
        {
          "name": "spotipy",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 0.185546875,
          "content": "[tox]\nenvlist = py3{8,9,10,11,12}\n[testenv]\ndeps=\n    requests\ncommands=python -m unittest discover -v tests\n[flake8]\nmax-line-length = 99\nexclude=\n    .git,\n    dist,\n    docs,\n    examples"
        }
      ]
    }
  ]
}