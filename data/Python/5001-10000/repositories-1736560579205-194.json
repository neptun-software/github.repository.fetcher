{
  "metadata": {
    "timestamp": 1736560579205,
    "page": 194,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fishaudio/Bert-VITS2",
      "stars": 8163,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.296875,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n.DS_Store\n/models\n/logs\n\nfilelists/*\n!/filelists/esd.list\ndata/*\n/*.yml\n!/default_config.yml\n/Web/\n/emotional/*/*.bin\n/slm/*/*.bin\n/bert/*/*.bin\n/bert/*/*.h5\n/bert/*/*.model\n/bert/*/*.safetensors\n/bert/*/*.msgpack\nasr_transcript.py\nextract_list.py\ndataset\n/Data\nModel\nraw/\nlogs/\nData/*\n/onnx\n/.vs\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.5400390625,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v5.0.0\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.8.6\n    hooks:\n      - id: ruff\n        args: [ --fix ]\n\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n\n  - repo: https://github.com/codespell-project/codespell\n    rev: v2.3.0\n    hooks:\n      - id: codespell\n        files: ^.*\\.(py|md|rst|yml)$\n        args: [-L=fro]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 33.7138671875,
          "content": "                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n<https://www.gnu.org/licenses/>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9130859375,
          "content": "<div align=\"center\">\n\n<img alt=\"LOGO\" src=\"https://avatars.githubusercontent.com/u/122017386\" width=\"256\" height=\"256\" />\n\n# Bert-VITS2\n\nVITS2 Backbone with multilingual bert\n\nFor quick guide, please refer to `webui_preprocess.py`.\n\n简易教程请参见 `webui_preprocess.py`。\n\n## 【项目推介】\n# FishAudio下的全新自回归TTS [Fish-Speech](https://github.com/fishaudio/fish-speech)现已可用，效果为目前开源SOTA水准，且在持续维护，推荐使用该项目作为BV2/GSV的替代。本项目短期内不再进行维护。\n## Demo Video: https://www.bilibili.com/video/BV18E421371Q\n## Tech slides Video: https://www.bilibili.com/video/BV1zJ4m1K7cj\n## 请注意，本项目核心思路来源于[anyvoiceai/MassTTS](https://github.com/anyvoiceai/MassTTS) 一个非常好的tts项目\n## MassTTS的演示demo为[ai版峰哥锐评峰哥本人,并找回了在金三角失落的腰子](https://www.bilibili.com/video/BV1w24y1c7z9)\n\n[//]: # (## 本项目与[PlayVoice/vits_chinese]&#40;https://github.com/PlayVoice/vits_chinese&#41; 没有任何关系)\n\n[//]: # ()\n[//]: # (本仓库来源于之前朋友分享了ai峰哥的视频，本人被其中的效果惊艳，在自己尝试MassTTS以后发现fs在音质方面与vits有一定差距，并且training的pipeline比vits更复杂，因此按照其思路将bert)\n\n## 成熟的旅行者/开拓者/舰长/博士/sensei/猎魔人/喵喵露/V应当参阅代码自己学习如何训练。\n\n### 严禁将此项目用于一切违反《中华人民共和国宪法》，《中华人民共和国刑法》，《中华人民共和国治安管理处罚法》和《中华人民共和国民法典》之用途。\n### 严禁用于任何政治相关用途。\n#### Video:https://www.bilibili.com/video/BV1hp4y1K78E\n#### Demo:https://www.bilibili.com/video/BV1TF411k78w\n## References\n+ [anyvoiceai/MassTTS](https://github.com/anyvoiceai/MassTTS)\n+ [jaywalnut310/vits](https://github.com/jaywalnut310/vits)\n+ [p0p4k/vits2_pytorch](https://github.com/p0p4k/vits2_pytorch)\n+ [svc-develop-team/so-vits-svc](https://github.com/svc-develop-team/so-vits-svc)\n+ [PaddlePaddle/PaddleSpeech](https://github.com/PaddlePaddle/PaddleSpeech)\n+ [emotional-vits](https://github.com/innnky/emotional-vits)\n+ [fish-speech](https://github.com/fishaudio/fish-speech)\n+ [Bert-VITS2-UI](https://github.com/jiangyuxiaoxiao/Bert-VITS2-UI)\n## 感谢所有贡献者作出的努力\n<a href=\"https://github.com/fishaudio/Bert-VITS2/graphs/contributors\" target=\"_blank\">\n  <img src=\"https://contrib.rocks/image?repo=fishaudio/Bert-VITS2\"/>\n</a>\n\n[//]: # (# 本项目所有代码引用均已写明，bert部分代码思路来源于[AI峰哥]&#40;https://www.bilibili.com/video/BV1w24y1c7z9&#41;，与[vits_chinese]&#40;https://github.com/PlayVoice/vits_chinese&#41;无任何关系。欢迎各位查阅代码。同时，我们也对该开发者的[碰瓷，乃至开盒开发者的行为]&#40;https://www.bilibili.com/read/cv27101514/&#41;表示强烈谴责。)\n"
        },
        {
          "name": "attentions.py",
          "type": "blob",
          "size": 15.958984375,
          "content": "import math\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport commons\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass LayerNorm(nn.Module):\n    def __init__(self, channels, eps=1e-5):\n        super().__init__()\n        self.channels = channels\n        self.eps = eps\n\n        self.gamma = nn.Parameter(torch.ones(channels))\n        self.beta = nn.Parameter(torch.zeros(channels))\n\n    def forward(self, x):\n        x = x.transpose(1, -1)\n        x = F.layer_norm(x, (self.channels,), self.gamma, self.beta, self.eps)\n        return x.transpose(1, -1)\n\n\n@torch.jit.script\ndef fused_add_tanh_sigmoid_multiply(input_a, input_b, n_channels):\n    n_channels_int = n_channels[0]\n    in_act = input_a + input_b\n    t_act = torch.tanh(in_act[:, :n_channels_int, :])\n    s_act = torch.sigmoid(in_act[:, n_channels_int:, :])\n    acts = t_act * s_act\n    return acts\n\n\nclass Encoder(nn.Module):\n    def __init__(\n        self,\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size=1,\n        p_dropout=0.0,\n        window_size=4,\n        isflow=True,\n        **kwargs\n    ):\n        super().__init__()\n        self.hidden_channels = hidden_channels\n        self.filter_channels = filter_channels\n        self.n_heads = n_heads\n        self.n_layers = n_layers\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.window_size = window_size\n        # if isflow:\n        #  cond_layer = torch.nn.Conv1d(256, 2*hidden_channels*n_layers, 1)\n        #  self.cond_pre = torch.nn.Conv1d(hidden_channels, 2*hidden_channels, 1)\n        #  self.cond_layer = weight_norm(cond_layer, name='weight')\n        #  self.gin_channels = 256\n        self.cond_layer_idx = self.n_layers\n        if \"gin_channels\" in kwargs:\n            self.gin_channels = kwargs[\"gin_channels\"]\n            if self.gin_channels != 0:\n                self.spk_emb_linear = nn.Linear(self.gin_channels, self.hidden_channels)\n                # vits2 says 3rd block, so idx is 2 by default\n                self.cond_layer_idx = (\n                    kwargs[\"cond_layer_idx\"] if \"cond_layer_idx\" in kwargs else 2\n                )\n                logging.debug(self.gin_channels, self.cond_layer_idx)\n                assert (\n                    self.cond_layer_idx < self.n_layers\n                ), \"cond_layer_idx should be less than n_layers\"\n        self.drop = nn.Dropout(p_dropout)\n        self.attn_layers = nn.ModuleList()\n        self.norm_layers_1 = nn.ModuleList()\n        self.ffn_layers = nn.ModuleList()\n        self.norm_layers_2 = nn.ModuleList()\n        for i in range(self.n_layers):\n            self.attn_layers.append(\n                MultiHeadAttention(\n                    hidden_channels,\n                    hidden_channels,\n                    n_heads,\n                    p_dropout=p_dropout,\n                    window_size=window_size,\n                )\n            )\n            self.norm_layers_1.append(LayerNorm(hidden_channels))\n            self.ffn_layers.append(\n                FFN(\n                    hidden_channels,\n                    hidden_channels,\n                    filter_channels,\n                    kernel_size,\n                    p_dropout=p_dropout,\n                )\n            )\n            self.norm_layers_2.append(LayerNorm(hidden_channels))\n\n    def forward(self, x, x_mask, g=None):\n        attn_mask = x_mask.unsqueeze(2) * x_mask.unsqueeze(-1)\n        x = x * x_mask\n        for i in range(self.n_layers):\n            if i == self.cond_layer_idx and g is not None:\n                g = self.spk_emb_linear(g.transpose(1, 2))\n                g = g.transpose(1, 2)\n                x = x + g\n                x = x * x_mask\n            y = self.attn_layers[i](x, x, attn_mask)\n            y = self.drop(y)\n            x = self.norm_layers_1[i](x + y)\n\n            y = self.ffn_layers[i](x, x_mask)\n            y = self.drop(y)\n            x = self.norm_layers_2[i](x + y)\n        x = x * x_mask\n        return x\n\n\nclass Decoder(nn.Module):\n    def __init__(\n        self,\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size=1,\n        p_dropout=0.0,\n        proximal_bias=False,\n        proximal_init=True,\n        **kwargs\n    ):\n        super().__init__()\n        self.hidden_channels = hidden_channels\n        self.filter_channels = filter_channels\n        self.n_heads = n_heads\n        self.n_layers = n_layers\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.proximal_bias = proximal_bias\n        self.proximal_init = proximal_init\n\n        self.drop = nn.Dropout(p_dropout)\n        self.self_attn_layers = nn.ModuleList()\n        self.norm_layers_0 = nn.ModuleList()\n        self.encdec_attn_layers = nn.ModuleList()\n        self.norm_layers_1 = nn.ModuleList()\n        self.ffn_layers = nn.ModuleList()\n        self.norm_layers_2 = nn.ModuleList()\n        for i in range(self.n_layers):\n            self.self_attn_layers.append(\n                MultiHeadAttention(\n                    hidden_channels,\n                    hidden_channels,\n                    n_heads,\n                    p_dropout=p_dropout,\n                    proximal_bias=proximal_bias,\n                    proximal_init=proximal_init,\n                )\n            )\n            self.norm_layers_0.append(LayerNorm(hidden_channels))\n            self.encdec_attn_layers.append(\n                MultiHeadAttention(\n                    hidden_channels, hidden_channels, n_heads, p_dropout=p_dropout\n                )\n            )\n            self.norm_layers_1.append(LayerNorm(hidden_channels))\n            self.ffn_layers.append(\n                FFN(\n                    hidden_channels,\n                    hidden_channels,\n                    filter_channels,\n                    kernel_size,\n                    p_dropout=p_dropout,\n                    causal=True,\n                )\n            )\n            self.norm_layers_2.append(LayerNorm(hidden_channels))\n\n    def forward(self, x, x_mask, h, h_mask):\n        \"\"\"\n        x: decoder input\n        h: encoder output\n        \"\"\"\n        self_attn_mask = commons.subsequent_mask(x_mask.size(2)).to(\n            device=x.device, dtype=x.dtype\n        )\n        encdec_attn_mask = h_mask.unsqueeze(2) * x_mask.unsqueeze(-1)\n        x = x * x_mask\n        for i in range(self.n_layers):\n            y = self.self_attn_layers[i](x, x, self_attn_mask)\n            y = self.drop(y)\n            x = self.norm_layers_0[i](x + y)\n\n            y = self.encdec_attn_layers[i](x, h, encdec_attn_mask)\n            y = self.drop(y)\n            x = self.norm_layers_1[i](x + y)\n\n            y = self.ffn_layers[i](x, x_mask)\n            y = self.drop(y)\n            x = self.norm_layers_2[i](x + y)\n        x = x * x_mask\n        return x\n\n\nclass MultiHeadAttention(nn.Module):\n    def __init__(\n        self,\n        channels,\n        out_channels,\n        n_heads,\n        p_dropout=0.0,\n        window_size=None,\n        heads_share=True,\n        block_length=None,\n        proximal_bias=False,\n        proximal_init=False,\n    ):\n        super().__init__()\n        assert channels % n_heads == 0\n\n        self.channels = channels\n        self.out_channels = out_channels\n        self.n_heads = n_heads\n        self.p_dropout = p_dropout\n        self.window_size = window_size\n        self.heads_share = heads_share\n        self.block_length = block_length\n        self.proximal_bias = proximal_bias\n        self.proximal_init = proximal_init\n        self.attn = None\n\n        self.k_channels = channels // n_heads\n        self.conv_q = nn.Conv1d(channels, channels, 1)\n        self.conv_k = nn.Conv1d(channels, channels, 1)\n        self.conv_v = nn.Conv1d(channels, channels, 1)\n        self.conv_o = nn.Conv1d(channels, out_channels, 1)\n        self.drop = nn.Dropout(p_dropout)\n\n        if window_size is not None:\n            n_heads_rel = 1 if heads_share else n_heads\n            rel_stddev = self.k_channels**-0.5\n            self.emb_rel_k = nn.Parameter(\n                torch.randn(n_heads_rel, window_size * 2 + 1, self.k_channels)\n                * rel_stddev\n            )\n            self.emb_rel_v = nn.Parameter(\n                torch.randn(n_heads_rel, window_size * 2 + 1, self.k_channels)\n                * rel_stddev\n            )\n\n        nn.init.xavier_uniform_(self.conv_q.weight)\n        nn.init.xavier_uniform_(self.conv_k.weight)\n        nn.init.xavier_uniform_(self.conv_v.weight)\n        if proximal_init:\n            with torch.no_grad():\n                self.conv_k.weight.copy_(self.conv_q.weight)\n                self.conv_k.bias.copy_(self.conv_q.bias)\n\n    def forward(self, x, c, attn_mask=None):\n        q = self.conv_q(x)\n        k = self.conv_k(c)\n        v = self.conv_v(c)\n\n        x, self.attn = self.attention(q, k, v, mask=attn_mask)\n\n        x = self.conv_o(x)\n        return x\n\n    def attention(self, query, key, value, mask=None):\n        # reshape [b, d, t] -> [b, n_h, t, d_k]\n        b, d, t_s, t_t = (*key.size(), query.size(2))\n        query = query.view(b, self.n_heads, self.k_channels, t_t).transpose(2, 3)\n        key = key.view(b, self.n_heads, self.k_channels, t_s).transpose(2, 3)\n        value = value.view(b, self.n_heads, self.k_channels, t_s).transpose(2, 3)\n\n        scores = torch.matmul(query / math.sqrt(self.k_channels), key.transpose(-2, -1))\n        if self.window_size is not None:\n            assert (\n                t_s == t_t\n            ), \"Relative attention is only available for self-attention.\"\n            key_relative_embeddings = self._get_relative_embeddings(self.emb_rel_k, t_s)\n            rel_logits = self._matmul_with_relative_keys(\n                query / math.sqrt(self.k_channels), key_relative_embeddings\n            )\n            scores_local = self._relative_position_to_absolute_position(rel_logits)\n            scores = scores + scores_local\n        if self.proximal_bias:\n            assert t_s == t_t, \"Proximal bias is only available for self-attention.\"\n            scores = scores + self._attention_bias_proximal(t_s).to(\n                device=scores.device, dtype=scores.dtype\n            )\n        if mask is not None:\n            scores = scores.masked_fill(mask == 0, -1e4)\n            if self.block_length is not None:\n                assert (\n                    t_s == t_t\n                ), \"Local attention is only available for self-attention.\"\n                block_mask = (\n                    torch.ones_like(scores)\n                    .triu(-self.block_length)\n                    .tril(self.block_length)\n                )\n                scores = scores.masked_fill(block_mask == 0, -1e4)\n        p_attn = F.softmax(scores, dim=-1)  # [b, n_h, t_t, t_s]\n        p_attn = self.drop(p_attn)\n        output = torch.matmul(p_attn, value)\n        if self.window_size is not None:\n            relative_weights = self._absolute_position_to_relative_position(p_attn)\n            value_relative_embeddings = self._get_relative_embeddings(\n                self.emb_rel_v, t_s\n            )\n            output = output + self._matmul_with_relative_values(\n                relative_weights, value_relative_embeddings\n            )\n        output = (\n            output.transpose(2, 3).contiguous().view(b, d, t_t)\n        )  # [b, n_h, t_t, d_k] -> [b, d, t_t]\n        return output, p_attn\n\n    def _matmul_with_relative_values(self, x, y):\n        \"\"\"\n        x: [b, h, l, m]\n        y: [h or 1, m, d]\n        ret: [b, h, l, d]\n        \"\"\"\n        ret = torch.matmul(x, y.unsqueeze(0))\n        return ret\n\n    def _matmul_with_relative_keys(self, x, y):\n        \"\"\"\n        x: [b, h, l, d]\n        y: [h or 1, m, d]\n        ret: [b, h, l, m]\n        \"\"\"\n        ret = torch.matmul(x, y.unsqueeze(0).transpose(-2, -1))\n        return ret\n\n    def _get_relative_embeddings(self, relative_embeddings, length):\n        2 * self.window_size + 1\n        # Pad first before slice to avoid using cond ops.\n        pad_length = max(length - (self.window_size + 1), 0)\n        slice_start_position = max((self.window_size + 1) - length, 0)\n        slice_end_position = slice_start_position + 2 * length - 1\n        if pad_length > 0:\n            padded_relative_embeddings = F.pad(\n                relative_embeddings,\n                commons.convert_pad_shape([[0, 0], [pad_length, pad_length], [0, 0]]),\n            )\n        else:\n            padded_relative_embeddings = relative_embeddings\n        used_relative_embeddings = padded_relative_embeddings[\n            :, slice_start_position:slice_end_position\n        ]\n        return used_relative_embeddings\n\n    def _relative_position_to_absolute_position(self, x):\n        \"\"\"\n        x: [b, h, l, 2*l-1]\n        ret: [b, h, l, l]\n        \"\"\"\n        batch, heads, length, _ = x.size()\n        # Concat columns of pad to shift from relative to absolute indexing.\n        x = F.pad(x, commons.convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, 1]]))\n\n        # Concat extra elements so to add up to shape (len+1, 2*len-1).\n        x_flat = x.view([batch, heads, length * 2 * length])\n        x_flat = F.pad(\n            x_flat, commons.convert_pad_shape([[0, 0], [0, 0], [0, length - 1]])\n        )\n\n        # Reshape and slice out the padded elements.\n        x_final = x_flat.view([batch, heads, length + 1, 2 * length - 1])[\n            :, :, :length, length - 1 :\n        ]\n        return x_final\n\n    def _absolute_position_to_relative_position(self, x):\n        \"\"\"\n        x: [b, h, l, l]\n        ret: [b, h, l, 2*l-1]\n        \"\"\"\n        batch, heads, length, _ = x.size()\n        # pad along column\n        x = F.pad(\n            x, commons.convert_pad_shape([[0, 0], [0, 0], [0, 0], [0, length - 1]])\n        )\n        x_flat = x.view([batch, heads, length**2 + length * (length - 1)])\n        # add 0's in the beginning that will skew the elements after reshape\n        x_flat = F.pad(x_flat, commons.convert_pad_shape([[0, 0], [0, 0], [length, 0]]))\n        x_final = x_flat.view([batch, heads, length, 2 * length])[:, :, :, 1:]\n        return x_final\n\n    def _attention_bias_proximal(self, length):\n        \"\"\"Bias for self-attention to encourage attention to close positions.\n        Args:\n          length: an integer scalar.\n        Returns:\n          a Tensor with shape [1, 1, length, length]\n        \"\"\"\n        r = torch.arange(length, dtype=torch.float32)\n        diff = torch.unsqueeze(r, 0) - torch.unsqueeze(r, 1)\n        return torch.unsqueeze(torch.unsqueeze(-torch.log1p(torch.abs(diff)), 0), 0)\n\n\nclass FFN(nn.Module):\n    def __init__(\n        self,\n        in_channels,\n        out_channels,\n        filter_channels,\n        kernel_size,\n        p_dropout=0.0,\n        activation=None,\n        causal=False,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.filter_channels = filter_channels\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.activation = activation\n        self.causal = causal\n\n        if causal:\n            self.padding = self._causal_padding\n        else:\n            self.padding = self._same_padding\n\n        self.conv_1 = nn.Conv1d(in_channels, filter_channels, kernel_size)\n        self.conv_2 = nn.Conv1d(filter_channels, out_channels, kernel_size)\n        self.drop = nn.Dropout(p_dropout)\n\n    def forward(self, x, x_mask):\n        x = self.conv_1(self.padding(x * x_mask))\n        if self.activation == \"gelu\":\n            x = x * torch.sigmoid(1.702 * x)\n        else:\n            x = torch.relu(x)\n        x = self.drop(x)\n        x = self.conv_2(self.padding(x * x_mask))\n        return x * x_mask\n\n    def _causal_padding(self, x):\n        if self.kernel_size == 1:\n            return x\n        pad_l = self.kernel_size - 1\n        pad_r = 0\n        padding = [[0, 0], [0, 0], [pad_l, pad_r]]\n        x = F.pad(x, commons.convert_pad_shape(padding))\n        return x\n\n    def _same_padding(self, x):\n        if self.kernel_size == 1:\n            return x\n        pad_l = (self.kernel_size - 1) // 2\n        pad_r = self.kernel_size // 2\n        padding = [[0, 0], [0, 0], [pad_l, pad_r]]\n        x = F.pad(x, commons.convert_pad_shape(padding))\n        return x\n"
        },
        {
          "name": "bert",
          "type": "tree",
          "content": null
        },
        {
          "name": "bert_gen.py",
          "type": "blob",
          "size": 2.740234375,
          "content": "import torch\nfrom multiprocessing import Pool\nimport commons\nimport utils\nfrom tqdm import tqdm\nfrom text import check_bert_models, cleaned_text_to_sequence, get_bert\nimport argparse\nimport torch.multiprocessing as mp\nfrom config import config\n\n\ndef process_line(x):\n    line, add_blank = x\n    device = config.bert_gen_config.device\n    if config.bert_gen_config.use_multi_device:\n        rank = mp.current_process()._identity\n        rank = rank[0] if len(rank) > 0 else 0\n        if torch.cuda.is_available():\n            gpu_id = rank % torch.cuda.device_count()\n            device = torch.device(f\"cuda:{gpu_id}\")\n        else:\n            device = torch.device(\"cpu\")\n    wav_path, _, language_str, text, phones, tone, word2ph = line.strip().split(\"|\")\n    phone = phones.split(\" \")\n    tone = [int(i) for i in tone.split(\" \")]\n    word2ph = [int(i) for i in word2ph.split(\" \")]\n    word2ph = [i for i in word2ph]\n    phone, tone, language = cleaned_text_to_sequence(phone, tone, language_str)\n\n    if add_blank:\n        phone = commons.intersperse(phone, 0)\n        tone = commons.intersperse(tone, 0)\n        language = commons.intersperse(language, 0)\n        for i in range(len(word2ph)):\n            word2ph[i] = word2ph[i] * 2\n        word2ph[0] += 1\n\n    bert_path = wav_path.replace(\".WAV\", \".wav\").replace(\".wav\", \".bert.pt\")\n\n    try:\n        bert = torch.load(bert_path)\n        assert bert.shape[0] == 2048\n    except Exception:\n        bert = get_bert(text, word2ph, language_str, device)\n        assert bert.shape[-1] == len(phone)\n        torch.save(bert, bert_path)\n\n\npreprocess_text_config = config.preprocess_text_config\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-c\", \"--config\", type=str, default=config.bert_gen_config.config_path\n    )\n    parser.add_argument(\n        \"--num_processes\", type=int, default=config.bert_gen_config.num_processes\n    )\n    args, _ = parser.parse_known_args()\n    config_path = args.config\n    hps = utils.get_hparams_from_file(config_path)\n    check_bert_models()\n    lines = []\n    with open(hps.data.training_files, encoding=\"utf-8\") as f:\n        lines.extend(f.readlines())\n\n    with open(hps.data.validation_files, encoding=\"utf-8\") as f:\n        lines.extend(f.readlines())\n    add_blank = [hps.data.add_blank] * len(lines)\n\n    if len(lines) != 0:\n        num_processes = args.num_processes\n        with Pool(processes=num_processes) as pool:\n            for _ in tqdm(\n                pool.imap_unordered(process_line, zip(lines, add_blank)),\n                total=len(lines),\n            ):\n                # 这里是缩进的代码块，表示循环体\n                pass  # 使用pass语句作为占位符\n\n    print(f\"bert生成完毕!, 共有{len(lines)}个bert.pt生成!\")\n"
        },
        {
          "name": "commons.py",
          "type": "blob",
          "size": 4.8291015625,
          "content": "import math\nimport torch\nfrom torch.nn import functional as F\n\n\ndef init_weights(m, mean=0.0, std=0.01):\n    classname = m.__class__.__name__\n    if classname.find(\"Conv\") != -1:\n        m.weight.data.normal_(mean, std)\n\n\ndef get_padding(kernel_size, dilation=1):\n    return int((kernel_size * dilation - dilation) / 2)\n\n\ndef convert_pad_shape(pad_shape):\n    layer = pad_shape[::-1]\n    pad_shape = [item for sublist in layer for item in sublist]\n    return pad_shape\n\n\ndef intersperse(lst, item):\n    result = [item] * (len(lst) * 2 + 1)\n    result[1::2] = lst\n    return result\n\n\ndef kl_divergence(m_p, logs_p, m_q, logs_q):\n    \"\"\"KL(P||Q)\"\"\"\n    kl = (logs_q - logs_p) - 0.5\n    kl += (\n        0.5 * (torch.exp(2.0 * logs_p) + ((m_p - m_q) ** 2)) * torch.exp(-2.0 * logs_q)\n    )\n    return kl\n\n\ndef rand_gumbel(shape):\n    \"\"\"Sample from the Gumbel distribution, protect from overflows.\"\"\"\n    uniform_samples = torch.rand(shape) * 0.99998 + 0.00001\n    return -torch.log(-torch.log(uniform_samples))\n\n\ndef rand_gumbel_like(x):\n    g = rand_gumbel(x.size()).to(dtype=x.dtype, device=x.device)\n    return g\n\n\ndef slice_segments(x, ids_str, segment_size=4):\n    gather_indices = ids_str.view(x.size(0), 1, 1).repeat(\n        1, x.size(1), 1\n    ) + torch.arange(segment_size, device=x.device)\n    return torch.gather(x, 2, gather_indices)\n\n\ndef rand_slice_segments(x, x_lengths=None, segment_size=4):\n    b, d, t = x.size()\n    if x_lengths is None:\n        x_lengths = t\n    ids_str_max = torch.clamp(x_lengths - segment_size + 1, min=0)\n    ids_str = (torch.rand([b], device=x.device) * ids_str_max).to(dtype=torch.long)\n    ret = slice_segments(x, ids_str, segment_size)\n    return ret, ids_str\n\n\ndef get_timing_signal_1d(length, channels, min_timescale=1.0, max_timescale=1.0e4):\n    position = torch.arange(length, dtype=torch.float)\n    num_timescales = channels // 2\n    log_timescale_increment = math.log(float(max_timescale) / float(min_timescale)) / (\n        num_timescales - 1\n    )\n    inv_timescales = min_timescale * torch.exp(\n        torch.arange(num_timescales, dtype=torch.float) * -log_timescale_increment\n    )\n    scaled_time = position.unsqueeze(0) * inv_timescales.unsqueeze(1)\n    signal = torch.cat([torch.sin(scaled_time), torch.cos(scaled_time)], 0)\n    signal = F.pad(signal, [0, 0, 0, channels % 2])\n    signal = signal.view(1, channels, length)\n    return signal\n\n\ndef add_timing_signal_1d(x, min_timescale=1.0, max_timescale=1.0e4):\n    b, channels, length = x.size()\n    signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale)\n    return x + signal.to(dtype=x.dtype, device=x.device)\n\n\ndef cat_timing_signal_1d(x, min_timescale=1.0, max_timescale=1.0e4, axis=1):\n    b, channels, length = x.size()\n    signal = get_timing_signal_1d(length, channels, min_timescale, max_timescale)\n    return torch.cat([x, signal.to(dtype=x.dtype, device=x.device)], axis)\n\n\ndef subsequent_mask(length):\n    mask = torch.tril(torch.ones(length, length)).unsqueeze(0).unsqueeze(0)\n    return mask\n\n\n@torch.jit.script\ndef fused_add_tanh_sigmoid_multiply(input_a, input_b, n_channels):\n    n_channels_int = n_channels[0]\n    in_act = input_a + input_b\n    t_act = torch.tanh(in_act[:, :n_channels_int, :])\n    s_act = torch.sigmoid(in_act[:, n_channels_int:, :])\n    acts = t_act * s_act\n    return acts\n\n\ndef convert_pad_shape(pad_shape):\n    layer = pad_shape[::-1]\n    pad_shape = [item for sublist in layer for item in sublist]\n    return pad_shape\n\n\ndef shift_1d(x):\n    x = F.pad(x, convert_pad_shape([[0, 0], [0, 0], [1, 0]]))[:, :, :-1]\n    return x\n\n\ndef sequence_mask(length, max_length=None):\n    if max_length is None:\n        max_length = length.max()\n    x = torch.arange(max_length, dtype=length.dtype, device=length.device)\n    return x.unsqueeze(0) < length.unsqueeze(1)\n\n\ndef generate_path(duration, mask):\n    \"\"\"\n    duration: [b, 1, t_x]\n    mask: [b, 1, t_y, t_x]\n    \"\"\"\n\n    b, _, t_y, t_x = mask.shape\n    cum_duration = torch.cumsum(duration, -1)\n\n    cum_duration_flat = cum_duration.view(b * t_x)\n    path = sequence_mask(cum_duration_flat, t_y).to(mask.dtype)\n    path = path.view(b, t_x, t_y)\n    path = path - F.pad(path, convert_pad_shape([[0, 0], [1, 0], [0, 0]]))[:, :-1]\n    path = path.unsqueeze(1).transpose(2, 3) * mask\n    return path\n\n\ndef clip_grad_value_(parameters, clip_value, norm_type=2):\n    if isinstance(parameters, torch.Tensor):\n        parameters = [parameters]\n    parameters = list(filter(lambda p: p.grad is not None, parameters))\n    norm_type = float(norm_type)\n    if clip_value is not None:\n        clip_value = float(clip_value)\n\n    total_norm = 0\n    for p in parameters:\n        param_norm = p.grad.data.norm(norm_type)\n        total_norm += param_norm.item() ** norm_type\n        if clip_value is not None:\n            p.grad.data.clamp_(min=-clip_value, max=clip_value)\n    total_norm = total_norm ** (1.0 / norm_type)\n    return total_norm\n"
        },
        {
          "name": "compress_model.py",
          "type": "blob",
          "size": 2.3603515625,
          "content": "from collections import OrderedDict\nfrom text.symbols import symbols\nimport torch\n\nfrom tools.log import logger\nimport utils\nfrom models import SynthesizerTrn\nimport os\n\n\ndef copyStateDict(state_dict):\n    if list(state_dict.keys())[0].startswith(\"module\"):\n        start_idx = 1\n    else:\n        start_idx = 0\n    new_state_dict = OrderedDict()\n    for k, v in state_dict.items():\n        name = \",\".join(k.split(\".\")[start_idx:])\n        new_state_dict[name] = v\n    return new_state_dict\n\n\ndef removeOptimizer(config: str, input_model: str, ishalf: bool, output_model: str):\n    hps = utils.get_hparams_from_file(config)\n\n    net_g = SynthesizerTrn(\n        len(symbols),\n        hps.data.filter_length // 2 + 1,\n        hps.train.segment_size // hps.data.hop_length,\n        n_speakers=hps.data.n_speakers,\n        **hps.model,\n    )\n\n    optim_g = torch.optim.AdamW(\n        net_g.parameters(),\n        hps.train.learning_rate,\n        betas=hps.train.betas,\n        eps=hps.train.eps,\n    )\n\n    state_dict_g = torch.load(input_model, map_location=\"cpu\")\n    new_dict_g = copyStateDict(state_dict_g)\n    keys = []\n    for k, v in new_dict_g[\"model\"].items():\n        if \"enc_q\" in k:\n            continue  # noqa: E701\n        keys.append(k)\n\n    new_dict_g = (\n        {k: new_dict_g[\"model\"][k].half() for k in keys}\n        if ishalf\n        else {k: new_dict_g[\"model\"][k] for k in keys}\n    )\n\n    torch.save(\n        {\n            \"model\": new_dict_g,\n            \"iteration\": 0,\n            \"optimizer\": optim_g.state_dict(),\n            \"learning_rate\": 0.0001,\n        },\n        output_model,\n    )\n\n\nif __name__ == \"__main__\":\n    import argparse\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-c\", \"--config\", type=str, default=\"configs/config.json\")\n    parser.add_argument(\"-i\", \"--input\", type=str)\n    parser.add_argument(\"-o\", \"--output\", type=str, default=None)\n    parser.add_argument(\n        \"-hf\", \"--half\", action=\"store_true\", default=False, help=\"Save as FP16\"\n    )\n\n    args = parser.parse_args()\n\n    output = args.output\n\n    if output is None:\n        import os.path\n\n        filename, ext = os.path.splitext(args.input)\n        half = \"_half\" if args.half else \"\"\n        output = filename + \"_release\" + half + ext\n\n    removeOptimizer(args.config, args.input, args.half, output)\n    logger.info(f\"压缩模型成功, 输出模型: {os.path.abspath(output)}\")\n"
        },
        {
          "name": "config.py",
          "type": "blob",
          "size": 9.041015625,
          "content": "\"\"\"\r\n@Desc: 全局配置文件读取\r\n\"\"\"\r\n\r\nimport argparse\r\nimport yaml\r\nfrom typing import Dict, List\r\nimport os\r\nimport shutil\r\nimport sys\r\n\r\n\r\nclass Resample_config:\r\n    \"\"\"重采样配置\"\"\"\r\n\r\n    def __init__(self, in_dir: str, out_dir: str, sampling_rate: int = 44100):\r\n        self.sampling_rate: int = sampling_rate  # 目标采样率\r\n        self.in_dir: str = in_dir  # 待处理音频目录路径\r\n        self.out_dir: str = out_dir  # 重采样输出路径\r\n\r\n    @classmethod\r\n    def from_dict(cls, dataset_path: str, data: Dict[str, any]):\r\n        \"\"\"从字典中生成实例\"\"\"\r\n\r\n        # 不检查路径是否有效，此逻辑在resample.py中处理\r\n        data[\"in_dir\"] = os.path.join(dataset_path, data[\"in_dir\"])\r\n        data[\"out_dir\"] = os.path.join(dataset_path, data[\"out_dir\"])\r\n\r\n        return cls(**data)\r\n\r\n\r\nclass Preprocess_text_config:\r\n    \"\"\"数据预处理配置\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        transcription_path: str,\r\n        cleaned_path: str,\r\n        train_path: str,\r\n        val_path: str,\r\n        config_path: str,\r\n        val_per_lang: int = 5,\r\n        max_val_total: int = 10000,\r\n        clean: bool = True,\r\n    ):\r\n        self.transcription_path: str = (\r\n            transcription_path  # 原始文本文件路径，文本格式应为{wav_path}|{speaker_name}|{language}|{text}。\r\n        )\r\n        self.cleaned_path: str = (\r\n            cleaned_path  # 数据清洗后文本路径，可以不填。不填则将在原始文本目录生成\r\n        )\r\n        self.train_path: str = (\r\n            train_path  # 训练集路径，可以不填。不填则将在原始文本目录生成\r\n        )\r\n        self.val_path: str = (\r\n            val_path  # 验证集路径，可以不填。不填则将在原始文本目录生成\r\n        )\r\n        self.config_path: str = config_path  # 配置文件路径\r\n        self.val_per_lang: int = val_per_lang  # 每个speaker的验证集条数\r\n        self.max_val_total: int = (\r\n            max_val_total  # 验证集最大条数，多于的会被截断并放到训练集中\r\n        )\r\n        self.clean: bool = clean  # 是否进行数据清洗\r\n\r\n    @classmethod\r\n    def from_dict(cls, dataset_path: str, data: Dict[str, any]):\r\n        \"\"\"从字典中生成实例\"\"\"\r\n\r\n        data[\"transcription_path\"] = os.path.join(\r\n            dataset_path, data[\"transcription_path\"]\r\n        )\r\n        if data[\"cleaned_path\"] == \"\" or data[\"cleaned_path\"] is None:\r\n            data[\"cleaned_path\"] = None\r\n        else:\r\n            data[\"cleaned_path\"] = os.path.join(dataset_path, data[\"cleaned_path\"])\r\n        data[\"train_path\"] = os.path.join(dataset_path, data[\"train_path\"])\r\n        data[\"val_path\"] = os.path.join(dataset_path, data[\"val_path\"])\r\n        data[\"config_path\"] = os.path.join(dataset_path, data[\"config_path\"])\r\n\r\n        return cls(**data)\r\n\r\n\r\nclass Bert_gen_config:\r\n    \"\"\"bert_gen 配置\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        config_path: str,\r\n        num_processes: int = 2,\r\n        device: str = \"cuda\",\r\n        use_multi_device: bool = False,\r\n    ):\r\n        self.config_path = config_path\r\n        self.num_processes = num_processes\r\n        self.device = device\r\n        self.use_multi_device = use_multi_device\r\n\r\n    @classmethod\r\n    def from_dict(cls, dataset_path: str, data: Dict[str, any]):\r\n        data[\"config_path\"] = os.path.join(dataset_path, data[\"config_path\"])\r\n\r\n        return cls(**data)\r\n\r\n\r\nclass Emo_gen_config:\r\n    \"\"\"emo_gen 配置\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        config_path: str,\r\n        num_processes: int = 2,\r\n        device: str = \"cuda\",\r\n        use_multi_device: bool = False,\r\n    ):\r\n        self.config_path = config_path\r\n        self.num_processes = num_processes\r\n        self.device = device\r\n        self.use_multi_device = use_multi_device\r\n\r\n    @classmethod\r\n    def from_dict(cls, dataset_path: str, data: Dict[str, any]):\r\n        data[\"config_path\"] = os.path.join(dataset_path, data[\"config_path\"])\r\n\r\n        return cls(**data)\r\n\r\n\r\nclass Train_ms_config:\r\n    \"\"\"训练配置\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        config_path: str,\r\n        env: Dict[str, any],\r\n        base: Dict[str, any],\r\n        model: str,\r\n        num_workers: int,\r\n        spec_cache: bool,\r\n        keep_ckpts: int,\r\n    ):\r\n        self.env = env  # 需要加载的环境变量\r\n        self.base = base  # 底模配置\r\n        self.model = (\r\n            model  # 训练模型存储目录，该路径为相对于dataset_path的路径，而非项目根目录\r\n        )\r\n        self.config_path = config_path  # 配置文件路径\r\n        self.num_workers = num_workers  # worker数量\r\n        self.spec_cache = spec_cache  # 是否启用spec缓存\r\n        self.keep_ckpts = keep_ckpts  # ckpt数量\r\n\r\n    @classmethod\r\n    def from_dict(cls, dataset_path: str, data: Dict[str, any]):\r\n        # data[\"model\"] = os.path.join(dataset_path, data[\"model\"])\r\n        data[\"config_path\"] = os.path.join(dataset_path, data[\"config_path\"])\r\n\r\n        return cls(**data)\r\n\r\n\r\nclass Webui_config:\r\n    \"\"\"webui 配置\"\"\"\r\n\r\n    def __init__(\r\n        self,\r\n        device: str,\r\n        model: str,\r\n        config_path: str,\r\n        language_identification_library: str,\r\n        port: int = 7860,\r\n        share: bool = False,\r\n        debug: bool = False,\r\n    ):\r\n        self.device: str = device\r\n        self.model: str = model  # 端口号\r\n        self.config_path: str = config_path  # 是否公开部署，对外网开放\r\n        self.port: int = port  # 是否开启debug模式\r\n        self.share: bool = share  # 模型路径\r\n        self.debug: bool = debug  # 配置文件路径\r\n        self.language_identification_library: str = (\r\n            language_identification_library  # 语种识别库\r\n        )\r\n\r\n    @classmethod\r\n    def from_dict(cls, dataset_path: str, data: Dict[str, any]):\r\n        data[\"config_path\"] = os.path.join(dataset_path, data[\"config_path\"])\r\n        data[\"model\"] = os.path.join(dataset_path, data[\"model\"])\r\n        return cls(**data)\r\n\r\n\r\nclass Server_config:\r\n    def __init__(\r\n        self, models: List[Dict[str, any]], port: int = 5000, device: str = \"cuda\"\r\n    ):\r\n        self.models: List[Dict[str, any]] = models  # 需要加载的所有模型的配置\r\n        self.port: int = port  # 端口号\r\n        self.device: str = device  # 模型默认使用设备\r\n\r\n    @classmethod\r\n    def from_dict(cls, data: Dict[str, any]):\r\n        return cls(**data)\r\n\r\n\r\nclass Translate_config:\r\n    \"\"\"翻译api配置\"\"\"\r\n\r\n    def __init__(self, app_key: str, secret_key: str):\r\n        self.app_key = app_key\r\n        self.secret_key = secret_key\r\n\r\n    @classmethod\r\n    def from_dict(cls, data: Dict[str, any]):\r\n        return cls(**data)\r\n\r\n\r\nclass Config:\r\n    def __init__(self, config_path: str):\r\n        if not os.path.isfile(config_path) and os.path.isfile(\"default_config.yml\"):\r\n            shutil.copy(src=\"default_config.yml\", dst=config_path)\r\n            print(\r\n                f\"已根据默认配置文件default_config.yml生成配置文件{config_path}。请按该配置文件的说明进行配置后重新运行。\"\r\n            )\r\n            print(\"如无特殊需求，请勿修改default_config.yml或备份该文件。\")\r\n            sys.exit(0)\r\n        with open(file=config_path, mode=\"r\", encoding=\"utf-8\") as file:\r\n            yaml_config: Dict[str, any] = yaml.safe_load(file.read())\r\n            dataset_path: str = yaml_config[\"dataset_path\"]\r\n            openi_token: str = yaml_config[\"openi_token\"]\r\n            self.dataset_path: str = dataset_path\r\n            self.mirror: str = yaml_config[\"mirror\"]\r\n            self.openi_token: str = openi_token\r\n            self.resample_config: Resample_config = Resample_config.from_dict(\r\n                dataset_path, yaml_config[\"resample\"]\r\n            )\r\n            self.preprocess_text_config: Preprocess_text_config = (\r\n                Preprocess_text_config.from_dict(\r\n                    dataset_path, yaml_config[\"preprocess_text\"]\r\n                )\r\n            )\r\n            self.bert_gen_config: Bert_gen_config = Bert_gen_config.from_dict(\r\n                dataset_path, yaml_config[\"bert_gen\"]\r\n            )\r\n            self.emo_gen_config: Emo_gen_config = Emo_gen_config.from_dict(\r\n                dataset_path, yaml_config[\"emo_gen\"]\r\n            )\r\n            self.train_ms_config: Train_ms_config = Train_ms_config.from_dict(\r\n                dataset_path, yaml_config[\"train_ms\"]\r\n            )\r\n            self.webui_config: Webui_config = Webui_config.from_dict(\r\n                dataset_path, yaml_config[\"webui\"]\r\n            )\r\n            self.server_config: Server_config = Server_config.from_dict(\r\n                yaml_config[\"server\"]\r\n            )\r\n            self.translate_config: Translate_config = Translate_config.from_dict(\r\n                yaml_config[\"translate\"]\r\n            )\r\n\r\n\r\nparser = argparse.ArgumentParser()\r\n# 为避免与以前的config.json起冲突，将其更名如下\r\nparser.add_argument(\"-y\", \"--yml_config\", type=str, default=\"config.yml\")\r\nargs, _ = parser.parse_known_args()\r\nconfig = Config(args.yml_config)\r\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "data_utils.py",
          "type": "blob",
          "size": 14.037109375,
          "content": "import os\nimport random\nimport torch\nimport torch.utils.data\nfrom tqdm import tqdm\nfrom tools.log import logger\nimport commons\nfrom mel_processing import spectrogram_torch, mel_spectrogram_torch\nfrom utils import load_wav_to_torch, load_filepaths_and_text\nfrom text import cleaned_text_to_sequence\nfrom config import config\n\n\"\"\"Multi speaker version\"\"\"\n\n\nclass TextAudioSpeakerLoader(torch.utils.data.Dataset):\n    \"\"\"\n    1) loads audio, speaker_id, text pairs\n    2) normalizes text and converts them to sequences of integers\n    3) computes spectrograms from audio files.\n    \"\"\"\n\n    def __init__(self, audiopaths_sid_text, hparams):\n        self.audiopaths_sid_text = load_filepaths_and_text(audiopaths_sid_text)\n        self.max_wav_value = hparams.max_wav_value\n        self.sampling_rate = hparams.sampling_rate\n        self.filter_length = hparams.filter_length\n        self.hop_length = hparams.hop_length\n        self.win_length = hparams.win_length\n        self.sampling_rate = hparams.sampling_rate\n        self.spk_map = hparams.spk2id\n        self.hparams = hparams\n\n        self.use_mel_spec_posterior = getattr(\n            hparams, \"use_mel_posterior_encoder\", False\n        )\n        if self.use_mel_spec_posterior:\n            self.n_mel_channels = getattr(hparams, \"n_mel_channels\", 80)\n\n        self.cleaned_text = getattr(hparams, \"cleaned_text\", False)\n\n        self.add_blank = hparams.add_blank\n        self.min_text_len = getattr(hparams, \"min_text_len\", 1)\n        self.max_text_len = getattr(hparams, \"max_text_len\", 384)\n\n        random.seed(1234)\n        random.shuffle(self.audiopaths_sid_text)\n        self._filter()\n\n    def _filter(self):\n        \"\"\"\n        Filter text & store spec lengths\n        \"\"\"\n        # Store spectrogram lengths for Bucketing\n        # wav_length ~= file_size / (wav_channels * Bytes per dim) = file_size / (1 * 2)\n        # spec_length = wav_length // hop_length\n\n        audiopaths_sid_text_new = []\n        lengths = []\n        skipped = 0\n        logger.info(\"Init dataset...\")\n        for _id, spk, language, text, phones, tone, word2ph in tqdm(\n            self.audiopaths_sid_text\n        ):\n            audiopath = f\"{_id}\"\n            if self.min_text_len <= len(phones) and len(phones) <= self.max_text_len:\n                phones = phones.split(\" \")\n                tone = [int(i) for i in tone.split(\" \")]\n                word2ph = [int(i) for i in word2ph.split(\" \")]\n                audiopaths_sid_text_new.append(\n                    [audiopath, spk, language, text, phones, tone, word2ph]\n                )\n                lengths.append(os.path.getsize(audiopath) // (2 * self.hop_length))\n            else:\n                skipped += 1\n        logger.info(\n            \"skipped: \"\n            + str(skipped)\n            + \", total: \"\n            + str(len(self.audiopaths_sid_text))\n        )\n        self.audiopaths_sid_text = audiopaths_sid_text_new\n        self.lengths = lengths\n\n    def get_audio_text_speaker_pair(self, audiopath_sid_text):\n        # separate filename, speaker_id and text\n        audiopath, sid, language, text, phones, tone, word2ph = audiopath_sid_text\n\n        bert, ja_bert, en_bert, phones, tone, language = self.get_text(\n            text, word2ph, phones, tone, language, audiopath\n        )\n\n        spec, wav = self.get_audio(audiopath)\n        sid = torch.LongTensor([int(self.spk_map[sid])])\n\n        return (phones, spec, wav, sid, tone, language, bert, ja_bert, en_bert)\n\n    def get_audio(self, filename):\n        audio, sampling_rate = load_wav_to_torch(filename)\n        if sampling_rate != self.sampling_rate:\n            raise ValueError(\n                \"{} {} SR doesn't match target {} SR\".format(\n                    filename, sampling_rate, self.sampling_rate\n                )\n            )\n        audio_norm = audio / self.max_wav_value\n        audio_norm = audio_norm.unsqueeze(0)\n        spec_filename = filename.replace(\".wav\", \".spec.pt\")\n        if self.use_mel_spec_posterior:\n            spec_filename = spec_filename.replace(\".spec.pt\", \".mel.pt\")\n        try:\n            spec = torch.load(spec_filename)\n        except:\n            if self.use_mel_spec_posterior:\n                spec = mel_spectrogram_torch(\n                    audio_norm,\n                    self.filter_length,\n                    self.n_mel_channels,\n                    self.sampling_rate,\n                    self.hop_length,\n                    self.win_length,\n                    self.hparams.mel_fmin,\n                    self.hparams.mel_fmax,\n                    center=False,\n                )\n            else:\n                spec = spectrogram_torch(\n                    audio_norm,\n                    self.filter_length,\n                    self.sampling_rate,\n                    self.hop_length,\n                    self.win_length,\n                    center=False,\n                )\n            spec = torch.squeeze(spec, 0)\n            if config.train_ms_config.spec_cache:\n                torch.save(spec, spec_filename)\n        return spec, audio_norm\n\n    def get_text(self, text, word2ph, phone, tone, language_str, wav_path):\n        phone, tone, language = cleaned_text_to_sequence(phone, tone, language_str)\n        if self.add_blank:\n            phone = commons.intersperse(phone, 0)\n            tone = commons.intersperse(tone, 0)\n            language = commons.intersperse(language, 0)\n            for i in range(len(word2ph)):\n                word2ph[i] = word2ph[i] * 2\n            word2ph[0] += 1\n        bert_path = wav_path.replace(\".wav\", \".bert.pt\")\n        try:\n            bert_ori = torch.load(bert_path)\n            assert bert_ori.shape[-1] == len(phone)\n        except Exception as e:\n            logger.warning(\"Bert load Failed\")\n            logger.warning(e)\n\n        if language_str == \"ZH\":\n            bert = bert_ori\n            ja_bert = torch.randn(1024, len(phone))\n            en_bert = torch.randn(1024, len(phone))\n        elif language_str == \"JP\":\n            bert = torch.randn(1024, len(phone))\n            ja_bert = bert_ori\n            en_bert = torch.randn(1024, len(phone))\n        elif language_str == \"EN\":\n            bert = torch.randn(1024, len(phone))\n            ja_bert = torch.randn(1024, len(phone))\n            en_bert = bert_ori\n        phone = torch.LongTensor(phone)\n        tone = torch.LongTensor(tone)\n        language = torch.LongTensor(language)\n        return bert, ja_bert, en_bert, phone, tone, language\n\n    def get_sid(self, sid):\n        sid = torch.LongTensor([int(sid)])\n        return sid\n\n    def __getitem__(self, index):\n        return self.get_audio_text_speaker_pair(self.audiopaths_sid_text[index])\n\n    def __len__(self):\n        return len(self.audiopaths_sid_text)\n\n\nclass TextAudioSpeakerCollate:\n    \"\"\"Zero-pads model inputs and targets\"\"\"\n\n    def __init__(self, return_ids=False):\n        self.return_ids = return_ids\n\n    def __call__(self, batch):\n        \"\"\"Collate's training batch from normalized text, audio and speaker identities\n        PARAMS\n        ------\n        batch: [text_normalized, spec_normalized, wav_normalized, sid]\n        \"\"\"\n        # Right zero-pad all one-hot text sequences to max input length\n        _, ids_sorted_decreasing = torch.sort(\n            torch.LongTensor([x[1].size(1) for x in batch]), dim=0, descending=True\n        )\n\n        max_text_len = max([len(x[0]) for x in batch])\n        max_spec_len = max([x[1].size(1) for x in batch])\n        max_wav_len = max([x[2].size(1) for x in batch])\n\n        text_lengths = torch.LongTensor(len(batch))\n        spec_lengths = torch.LongTensor(len(batch))\n        wav_lengths = torch.LongTensor(len(batch))\n        sid = torch.LongTensor(len(batch))\n\n        text_padded = torch.LongTensor(len(batch), max_text_len)\n        tone_padded = torch.LongTensor(len(batch), max_text_len)\n        language_padded = torch.LongTensor(len(batch), max_text_len)\n        bert_padded = torch.FloatTensor(len(batch), 1024, max_text_len)\n        ja_bert_padded = torch.FloatTensor(len(batch), 1024, max_text_len)\n        en_bert_padded = torch.FloatTensor(len(batch), 1024, max_text_len)\n\n        spec_padded = torch.FloatTensor(len(batch), batch[0][1].size(0), max_spec_len)\n        wav_padded = torch.FloatTensor(len(batch), 1, max_wav_len)\n        text_padded.zero_()\n        tone_padded.zero_()\n        language_padded.zero_()\n        spec_padded.zero_()\n        wav_padded.zero_()\n        bert_padded.zero_()\n        ja_bert_padded.zero_()\n        en_bert_padded.zero_()\n\n        for i in range(len(ids_sorted_decreasing)):\n            row = batch[ids_sorted_decreasing[i]]\n\n            text = row[0]\n            text_padded[i, : text.size(0)] = text\n            text_lengths[i] = text.size(0)\n\n            spec = row[1]\n            spec_padded[i, :, : spec.size(1)] = spec\n            spec_lengths[i] = spec.size(1)\n\n            wav = row[2]\n            wav_padded[i, :, : wav.size(1)] = wav\n            wav_lengths[i] = wav.size(1)\n\n            sid[i] = row[3]\n\n            tone = row[4]\n            tone_padded[i, : tone.size(0)] = tone\n\n            language = row[5]\n            language_padded[i, : language.size(0)] = language\n\n            bert = row[6]\n            bert_padded[i, :, : bert.size(1)] = bert\n\n            ja_bert = row[7]\n            ja_bert_padded[i, :, : ja_bert.size(1)] = ja_bert\n\n            en_bert = row[8]\n            en_bert_padded[i, :, : en_bert.size(1)] = en_bert\n\n        return (\n            text_padded,\n            text_lengths,\n            spec_padded,\n            spec_lengths,\n            wav_padded,\n            wav_lengths,\n            sid,\n            tone_padded,\n            language_padded,\n            bert_padded,\n            ja_bert_padded,\n            en_bert_padded,\n        )\n\n\nclass DistributedBucketSampler(torch.utils.data.distributed.DistributedSampler):\n    \"\"\"\n    Maintain similar input lengths in a batch.\n    Length groups are specified by boundaries.\n    Ex) boundaries = [b1, b2, b3] -> any batch is included either {x | b1 < length(x) <=b2} or {x | b2 < length(x) <= b3}.\n\n    It removes samples which are not included in the boundaries.\n    Ex) boundaries = [b1, b2, b3] -> any x s.t. length(x) <= b1 or length(x) > b3 are discarded.\n    \"\"\"\n\n    def __init__(\n        self,\n        dataset,\n        batch_size,\n        boundaries,\n        num_replicas=None,\n        rank=None,\n        shuffle=True,\n    ):\n        super().__init__(dataset, num_replicas=num_replicas, rank=rank, shuffle=shuffle)\n        self.lengths = dataset.lengths\n        self.batch_size = batch_size\n        self.boundaries = boundaries\n\n        self.buckets, self.num_samples_per_bucket = self._create_buckets()\n        self.total_size = sum(self.num_samples_per_bucket)\n        self.num_samples = self.total_size // self.num_replicas\n\n    def _create_buckets(self):\n        buckets = [[] for _ in range(len(self.boundaries) - 1)]\n        for i in range(len(self.lengths)):\n            length = self.lengths[i]\n            idx_bucket = self._bisect(length)\n            if idx_bucket != -1:\n                buckets[idx_bucket].append(i)\n\n        try:\n            for i in range(len(buckets) - 1, 0, -1):\n                if len(buckets[i]) == 0:\n                    buckets.pop(i)\n                    self.boundaries.pop(i + 1)\n            assert all(len(bucket) > 0 for bucket in buckets)\n        # When one bucket is not traversed\n        except Exception as e:\n            print(\"Bucket warning \", e)\n            for i in range(len(buckets) - 1, -1, -1):\n                if len(buckets[i]) == 0:\n                    buckets.pop(i)\n                    self.boundaries.pop(i + 1)\n\n        num_samples_per_bucket = []\n        for i in range(len(buckets)):\n            len_bucket = len(buckets[i])\n            total_batch_size = self.num_replicas * self.batch_size\n            rem = (\n                total_batch_size - (len_bucket % total_batch_size)\n            ) % total_batch_size\n            num_samples_per_bucket.append(len_bucket + rem)\n        return buckets, num_samples_per_bucket\n\n    def __iter__(self):\n        # deterministically shuffle based on epoch\n        g = torch.Generator()\n        g.manual_seed(self.epoch)\n\n        indices = []\n        if self.shuffle:\n            for bucket in self.buckets:\n                indices.append(torch.randperm(len(bucket), generator=g).tolist())\n        else:\n            for bucket in self.buckets:\n                indices.append(list(range(len(bucket))))\n\n        batches = []\n        for i in range(len(self.buckets)):\n            bucket = self.buckets[i]\n            len_bucket = len(bucket)\n            if len_bucket == 0:\n                continue\n            ids_bucket = indices[i]\n            num_samples_bucket = self.num_samples_per_bucket[i]\n\n            # add extra samples to make it evenly divisible\n            rem = num_samples_bucket - len_bucket\n            ids_bucket = (\n                ids_bucket\n                + ids_bucket * (rem // len_bucket)\n                + ids_bucket[: (rem % len_bucket)]\n            )\n\n            # subsample\n            ids_bucket = ids_bucket[self.rank :: self.num_replicas]\n\n            # batching\n            for j in range(len(ids_bucket) // self.batch_size):\n                batch = [\n                    bucket[idx]\n                    for idx in ids_bucket[\n                        j * self.batch_size : (j + 1) * self.batch_size\n                    ]\n                ]\n                batches.append(batch)\n\n        if self.shuffle:\n            batch_ids = torch.randperm(len(batches), generator=g).tolist()\n            batches = [batches[i] for i in batch_ids]\n        self.batches = batches\n\n        assert len(self.batches) * self.batch_size == self.num_samples\n        return iter(self.batches)\n\n    def _bisect(self, x, lo=0, hi=None):\n        if hi is None:\n            hi = len(self.boundaries) - 1\n\n        if hi > lo:\n            mid = (hi + lo) // 2\n            if self.boundaries[mid] < x and x <= self.boundaries[mid + 1]:\n                return mid\n            elif x <= self.boundaries[mid]:\n                return self._bisect(x, lo, mid)\n            else:\n                return self._bisect(x, mid + 1, hi)\n        else:\n            return -1\n\n    def __len__(self):\n        return self.num_samples // self.batch_size\n"
        },
        {
          "name": "default_config.yml",
          "type": "blob",
          "size": 6.0205078125,
          "content": "# 全局配置\r\n# 对于希望在同一时间使用多个配置文件的情况，例如两个GPU同时跑两个训练集：通过环境变量指定配置文件，不指定则默认为./config.yml\r\n\r\n# 拟提供通用路径配置，统一存放数据，避免数据放得很乱\r\n# 每个数据集与其对应的模型存放至统一路径下，后续所有的路径配置均为相对于datasetPath的路径\r\n# 不填或者填空则路径为相对于项目根目录的路径\r\ndataset_path: \"Data/\"\r\n\r\n# 模型镜像源，默认huggingface，使用openi镜像源需指定openi_token\r\nmirror: \"\"\r\nopeni_token: \"\"  # openi token\r\n\r\n# resample 音频重采样配置\r\n# 注意， “:” 后需要加空格\r\nresample:\r\n  # 目标重采样率\r\n  sampling_rate: 44100\r\n  # 音频文件输入路径，重采样会将该路径下所有.wav音频文件重采样\r\n  # 请填入相对于datasetPath的相对路径\r\n  in_dir: \"audios/raw\" # 相对于根目录的路径为 /datasetPath/in_dir\r\n  # 音频文件重采样后输出路径\r\n  out_dir: \"audios/wavs\"\r\n\r\n\r\n# preprocess_text 数据集预处理相关配置\r\n# 注意， “:” 后需要加空格\r\npreprocess_text:\r\n  # 原始文本文件路径，文本格式应为{wav_path}|{speaker_name}|{language}|{text}。\r\n  transcription_path: \"filelists/你的数据集文本.list\"\r\n  # 数据清洗后文本路径，可以不填。不填则将在原始文本目录生成\r\n  cleaned_path: \"\"\r\n  # 训练集路径\r\n  train_path: \"filelists/train.list\"\r\n  # 验证集路径\r\n  val_path: \"filelists/val.list\"\r\n  # 配置文件路径\r\n  config_path: \"config.json\"\r\n  # 每个语言的验证集条数\r\n  val_per_lang: 4\r\n  # 验证集最大条数，多于的会被截断并放到训练集中\r\n  max_val_total: 12\r\n  # 是否进行数据清洗\r\n  clean: true\r\n\r\n\r\n# bert_gen 相关配置\r\n# 注意， “:” 后需要加空格\r\nbert_gen:\r\n  # 训练数据集配置文件路径\r\n  config_path: \"config.json\"\r\n  # 并行数\r\n  num_processes: 4\r\n  # 使用设备：可选项 \"cuda\" 显卡推理，\"cpu\" cpu推理\r\n  # 该选项同时决定了get_bert_feature的默认设备\r\n  device: \"cuda\"\r\n  # 使用多卡推理\r\n  use_multi_device: false\r\n\r\n# emo_gen 相关配置\r\n# 注意， “:” 后需要加空格\r\nemo_gen:\r\n  # 训练数据集配置文件路径\r\n  config_path: \"config.json\"\r\n  # 并行数\r\n  num_processes: 4\r\n  # 使用设备：可选项 \"cuda\" 显卡推理，\"cpu\" cpu推理\r\n  device: \"cuda\"\r\n  # 使用多卡推理\r\n  use_multi_device: false\r\n\r\n# train 训练配置\r\n# 注意， “:” 后需要加空格\r\ntrain_ms:\r\n  env:\r\n    MASTER_ADDR: \"localhost\"\r\n    MASTER_PORT: 10086\r\n    WORLD_SIZE: 1\r\n    LOCAL_RANK: 0\r\n    RANK: 0\r\n    # 可以填写任意名的环境变量\r\n    # THE_ENV_VAR_YOU_NEED_TO_USE: \"1234567\"\r\n  # 底模设置\r\n  base:\r\n    use_base_model: false\r\n    repo_id: \"Stardust_minus/Bert-VITS2\"\r\n    model_image: \"Bert-VITS2_2.3底模\" # openi网页的模型名\r\n  # 训练模型存储目录：与旧版本的区别，原先数据集是存放在logs/model_name下的，现在改为统一存放在Data/你的数据集/models下\r\n  model: \"models\"\r\n  # 配置文件路径\r\n  config_path: \"configs/config.json\"\r\n  # 训练使用的worker，不建议超过CPU核心数\r\n  num_workers: 16\r\n  # 关闭此项可以节约接近70%的磁盘空间，但是可能导致实际训练速度变慢和更高的CPU使用率。\r\n  spec_cache: False\r\n  # 保存的检查点数量，多于此数目的权重会被删除来节省空间。\r\n  keep_ckpts: 8\r\n\r\n\r\n# webui webui配置\r\n# 注意， “:” 后需要加空格\r\nwebui:\r\n  # 推理设备\r\n  device: \"cuda\"\r\n  # 模型路径\r\n  model: \"models/G_8000.pth\"\r\n  # 配置文件路径\r\n  config_path: \"configs/config.json\"\r\n  # 端口号\r\n  port: 7860\r\n  # 是否公开部署，对外网开放\r\n  share: false\r\n  # 是否开启debug模式\r\n  debug: false\r\n  # 语种识别库，可选langid, fastlid\r\n  language_identification_library: \"langid\"\r\n\r\n\r\n# server-fastapi配置\r\n# 注意， “:” 后需要加空格\r\n# 注意，本配置下的所有配置均为相对于根目录的路径\r\nserver:\r\n  # 端口号\r\n  port: 5000\r\n  # 模型默认使用设备：但是当前并没有实现这个配置。\r\n  device: \"cuda\"\r\n  # 需要加载的所有模型的配置，可以填多个模型，也可以不填模型，等网页成功后手动加载模型\r\n  # 不加载模型的配置格式：删除默认给的两个模型配置，给models赋值 [ ]，也就是空列表。参考模型2的speakers 即 models: [ ]\r\n  # 注意，所有模型都必须正确配置model与config的路径，空路径会导致加载错误。\r\n  # 也可以不填模型，等网页加载成功后手动填写models。\r\n  models:\r\n    - # 模型的路径\r\n      model: \"\"\r\n      # 模型config.json的路径\r\n      config: \"\"\r\n      # 模型使用设备，若填写则会覆盖默认配置\r\n      device: \"cuda\"\r\n      # 模型默认使用的语言\r\n      language: \"ZH\"\r\n      # 模型人物默认参数\r\n      # 不必填写所有人物，不填的使用默认值\r\n      # 暂时不用填写，当前尚未实现按人区分配置\r\n      speakers:\r\n        - speaker: \"科比\"\r\n          sdp_ratio: 0.2\r\n          noise_scale: 0.6\r\n          noise_scale_w: 0.8\r\n          length_scale: 1\r\n        - speaker: \"五条悟\"\r\n          sdp_ratio: 0.3\r\n          noise_scale: 0.7\r\n          noise_scale_w: 0.8\r\n          length_scale: 0.5\r\n        - speaker: \"安倍晋三\"\r\n          sdp_ratio: 0.2\r\n          noise_scale: 0.6\r\n          noise_scale_w: 0.8\r\n          length_scale: 1.2\r\n    - # 模型的路径\r\n      model: \"\"\r\n      # 模型config.json的路径\r\n      config: \"\"\r\n      # 模型使用设备，若填写则会覆盖默认配置\r\n      device: \"cpu\"\r\n      # 模型默认使用的语言\r\n      language: \"JP\"\r\n      # 模型人物默认参数\r\n      # 不必填写所有人物，不填的使用默认值\r\n      speakers: [ ] # 也可以不填\r\n\r\n# 百度翻译开放平台 api配置\r\n# api接入文档 https://api.fanyi.baidu.com/doc/21\r\n# 请不要在github等网站公开分享你的app id 与 key\r\ntranslate:\r\n  # 你的APPID\r\n  \"app_key\": \"\"\r\n  # 你的密钥\r\n  \"secret_key\": \"\"\r\n"
        },
        {
          "name": "emotional",
          "type": "tree",
          "content": null
        },
        {
          "name": "export_onnx.py",
          "type": "blob",
          "size": 0.4912109375,
          "content": "from onnx_modules import export_onnx\r\nimport os\r\n\r\nif __name__ == \"__main__\":\r\n    export_path = \"BertVits2.2PT\"\r\n    model_path = \"model\\\\G_0.pth\"\r\n    config_path = \"model\\\\config.json\"\r\n    novq = False\r\n    dev = False\r\n    Extra = \"chinese\"  # japanese or chinese\r\n    if not os.path.exists(\"onnx\"):\r\n        os.makedirs(\"onnx\")\r\n    if not os.path.exists(f\"onnx/{export_path}\"):\r\n        os.makedirs(f\"onnx/{export_path}\")\r\n    export_onnx(export_path, model_path, config_path, novq, dev, Extra)\r\n"
        },
        {
          "name": "filelists",
          "type": "tree",
          "content": null
        },
        {
          "name": "for_deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "hiyoriUI.py",
          "type": "blob",
          "size": 29.94921875,
          "content": "\"\"\"\napi服务，网页后端 多版本多模型 fastapi实现\n原 server_fastapi\n\"\"\"\n\nimport logging\nimport gc\nimport random\nimport librosa\nimport gradio\nimport numpy as np\nimport utils\nfrom fastapi import FastAPI, Query, Request, File, UploadFile, Form\nfrom fastapi.responses import Response, FileResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom io import BytesIO\nfrom scipy.io import wavfile\nimport uvicorn\nimport torch\nimport webbrowser\nimport psutil\nimport GPUtil\nfrom typing import Dict, Optional, List, Set, Union, Tuple\nimport os\nfrom tools.log import logger\nfrom urllib.parse import unquote\n\nfrom infer import infer, get_net_g, latest_version\nimport tools.translate as trans\nfrom tools.sentence import split_by_language\nfrom re_matching import cut_sent\n\n\nfrom config import config\n\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\n\n\nclass Model:\n    \"\"\"模型封装类\"\"\"\n\n    def __init__(self, config_path: str, model_path: str, device: str, language: str):\n        self.config_path: str = os.path.normpath(config_path)\n        self.model_path: str = os.path.normpath(model_path)\n        self.device: str = device\n        self.language: str = language\n        self.hps = utils.get_hparams_from_file(config_path)\n        self.spk2id: Dict[str, int] = self.hps.data.spk2id  # spk - id 映射字典\n        self.id2spk: Dict[int, str] = dict()  # id - spk 映射字典\n        for speaker, speaker_id in self.hps.data.spk2id.items():\n            self.id2spk[speaker_id] = speaker\n        self.version: str = (\n            self.hps.version if hasattr(self.hps, \"version\") else latest_version\n        )\n        self.net_g = get_net_g(\n            model_path=model_path,\n            version=self.version,\n            device=device,\n            hps=self.hps,\n        )\n\n    def to_dict(self) -> Dict[str, any]:\n        return {\n            \"config_path\": self.config_path,\n            \"model_path\": self.model_path,\n            \"device\": self.device,\n            \"language\": self.language,\n            \"spk2id\": self.spk2id,\n            \"id2spk\": self.id2spk,\n            \"version\": self.version,\n        }\n\n\nclass Models:\n    def __init__(self):\n        self.models: Dict[int, Model] = dict()\n        self.num = 0\n        # spkInfo[角色名][模型id] = 角色id\n        self.spk_info: Dict[str, Dict[int, int]] = dict()\n        self.path2ids: Dict[str, Set[int]] = dict()  # 路径指向的model的id\n\n    def init_model(\n        self, config_path: str, model_path: str, device: str, language: str\n    ) -> int:\n        \"\"\"\n        初始化并添加一个模型\n\n        :param config_path: 模型config.json路径\n        :param model_path: 模型路径\n        :param device: 模型推理使用设备\n        :param language: 模型推理默认语言\n        \"\"\"\n        # 若文件不存在则不进行加载\n        if not os.path.isfile(model_path):\n            if model_path != \"\":\n                logger.warning(f\"模型文件{model_path} 不存在，不进行初始化\")\n            return self.num\n        if not os.path.isfile(config_path):\n            if config_path != \"\":\n                logger.warning(f\"配置文件{config_path} 不存在，不进行初始化\")\n            return self.num\n\n        # 若路径中的模型已存在，则不添加模型，若不存在，则进行初始化。\n        model_path = os.path.realpath(model_path)\n        if model_path not in self.path2ids.keys():\n            self.path2ids[model_path] = {self.num}\n            self.models[self.num] = Model(\n                config_path=config_path,\n                model_path=model_path,\n                device=device,\n                language=language,\n            )\n            logger.success(\n                f\"添加模型{model_path}，使用配置文件{os.path.realpath(config_path)}\"\n            )\n        else:\n            # 获取一个指向id\n            m_id = next(iter(self.path2ids[model_path]))\n            self.models[self.num] = self.models[m_id]\n            self.path2ids[model_path].add(self.num)\n            logger.success(\"模型已存在，添加模型引用。\")\n        # 添加角色信息\n        for speaker, speaker_id in self.models[self.num].spk2id.items():\n            if speaker not in self.spk_info.keys():\n                self.spk_info[speaker] = {self.num: speaker_id}\n            else:\n                self.spk_info[speaker][self.num] = speaker_id\n        # 修改计数\n        self.num += 1\n        return self.num - 1\n\n    def del_model(self, index: int) -> Optional[int]:\n        \"\"\"删除对应序号的模型，若不存在则返回None\"\"\"\n        if index not in self.models.keys():\n            return None\n        # 删除角色信息\n        for speaker, speaker_id in self.models[index].spk2id.items():\n            self.spk_info[speaker].pop(index)\n            if len(self.spk_info[speaker]) == 0:\n                # 若对应角色的所有模型都被删除，则清除该角色信息\n                self.spk_info.pop(speaker)\n        # 删除路径信息\n        model_path = os.path.realpath(self.models[index].model_path)\n        self.path2ids[model_path].remove(index)\n        if len(self.path2ids[model_path]) == 0:\n            self.path2ids.pop(model_path)\n            logger.success(f\"删除模型{model_path}, id = {index}\")\n        else:\n            logger.success(f\"删除模型引用{model_path}, id = {index}\")\n        # 删除模型\n        self.models.pop(index)\n        gc.collect()\n        if torch.cuda.is_available():\n            torch.cuda.empty_cache()\n        return index\n\n    def get_models(self):\n        \"\"\"获取所有模型\"\"\"\n        return self.models\n\n\nif __name__ == \"__main__\":\n    app = FastAPI()\n    app.logger = logger\n    # 挂载静态文件\n    logger.info(\"开始挂载网页页面\")\n    StaticDir: str = \"./Web\"\n    if not os.path.isdir(StaticDir):\n        logger.warning(\n            \"缺少网页资源，无法开启网页页面，如有需要请在 https://github.com/jiangyuxiaoxiao/Bert-VITS2-UI 或者Bert-VITS对应版本的release页面下载\"\n        )\n    else:\n        dirs = [fir.name for fir in os.scandir(StaticDir) if fir.is_dir()]\n        files = [fir.name for fir in os.scandir(StaticDir) if fir.is_dir()]\n        for dirName in dirs:\n            app.mount(\n                f\"/{dirName}\",\n                StaticFiles(directory=f\"./{StaticDir}/{dirName}\"),\n                name=dirName,\n            )\n    loaded_models = Models()\n    # 加载模型\n    logger.info(\"开始加载模型\")\n    models_info = config.server_config.models\n    for model_info in models_info:\n        loaded_models.init_model(\n            config_path=model_info[\"config\"],\n            model_path=model_info[\"model\"],\n            device=model_info[\"device\"],\n            language=model_info[\"language\"],\n        )\n\n    @app.get(\"/\")\n    async def index():\n        return FileResponse(\"./Web/index.html\")\n\n    async def _voice(\n        text: str,\n        model_id: int,\n        speaker_name: str,\n        speaker_id: int,\n        sdp_ratio: float,\n        noise: float,\n        noisew: float,\n        length: float,\n        language: str,\n        auto_translate: bool,\n        auto_split: bool,\n        emotion: Optional[Union[int, str]] = None,\n        reference_audio=None,\n        style_text: Optional[str] = None,\n        style_weight: float = 0.7,\n    ) -> Union[Response, Dict[str, any]]:\n        \"\"\"TTS实现函数\"\"\"\n\n        # 检查\n        # 检查模型是否存在\n        if model_id not in loaded_models.models.keys():\n            logger.error(f\"/voice 请求错误：模型model_id={model_id}未加载\")\n            return {\"status\": 10, \"detail\": f\"模型model_id={model_id}未加载\"}\n        # 检查是否提供speaker\n        if speaker_name is None and speaker_id is None:\n            logger.error(\"/voice 请求错误：推理请求未提供speaker_name或speaker_id\")\n            return {\"status\": 11, \"detail\": \"请提供speaker_name或speaker_id\"}\n        elif speaker_name is None:\n            # 检查speaker_id是否存在\n            if speaker_id not in loaded_models.models[model_id].id2spk.keys():\n                logger.error(f\"/voice 请求错误：角色speaker_id={speaker_id}不存在\")\n                return {\"status\": 12, \"detail\": f\"角色speaker_id={speaker_id}不存在\"}\n            speaker_name = loaded_models.models[model_id].id2spk[speaker_id]\n        # 检查speaker_name是否存在\n        if speaker_name not in loaded_models.models[model_id].spk2id.keys():\n            logger.error(f\"/voice 请求错误：角色speaker_name={speaker_name}不存在\")\n            return {\"status\": 13, \"detail\": f\"角色speaker_name={speaker_name}不存在\"}\n        # 未传入则使用默认语言\n        if language is None:\n            language = loaded_models.models[model_id].language\n        # 翻译会破坏mix结构，auto也会变得无意义。不要在这两个模式下使用\n        if auto_translate:\n            if language == \"auto\" or language == \"mix\":\n                logger.error(\n                    f\"/voice 请求错误：请勿同时使用language = {language}与auto_translate模式\"\n                )\n                return {\n                    \"status\": 20,\n                    \"detail\": f\"请勿同时使用language = {language}与auto_translate模式\",\n                }\n            text = trans.translate(Sentence=text, to_Language=language.lower())\n        if reference_audio is not None:\n            ref_audio = BytesIO(await reference_audio.read())\n            # 2.2 适配\n            if loaded_models.models[model_id].version == \"2.2\":\n                ref_audio, _ = librosa.load(ref_audio, 48000)\n        else:\n            ref_audio = reference_audio\n\n        # 改动：增加使用 || 对文本进行主动切分\n        # 切分优先级： || → auto/mix → auto_split\n        text2 = text.replace(\"\\n\", \"\").lstrip()\n        texts: List[str] = text2.split(\"||\")\n\n        # 对于mix和auto的说明：出于版本兼容性的考虑，暂时无法使用multilang的方式进行推理\n        if language == \"MIX\":\n            text_language_speakers: List[Tuple[str, str, str]] = []\n            for _text in texts:\n                speaker_pieces = _text.split(\"[\")  # 按说话人分割多块\n                for speaker_piece in speaker_pieces:\n                    if speaker_piece == \"\":\n                        continue\n                    speaker_piece2 = speaker_piece.split(\"]\")\n                    if len(speaker_piece2) != 2:\n                        return {\n                            \"status\": 21,\n                            \"detail\": \"MIX语法错误\",\n                        }\n                    speaker = speaker_piece2[0].strip()\n                    lang_pieces = speaker_piece2[1].split(\"<\")\n                    for lang_piece in lang_pieces:\n                        if lang_piece == \"\":\n                            continue\n                        lang_piece2 = lang_piece.split(\">\")\n                        if len(lang_piece2) != 2:\n                            return {\n                                \"status\": 21,\n                                \"detail\": \"MIX语法错误\",\n                            }\n                        lang = lang_piece2[0].strip()\n                        if lang.upper() not in [\"ZH\", \"EN\", \"JP\"]:\n                            return {\n                                \"status\": 21,\n                                \"detail\": \"MIX语法错误\",\n                            }\n                        t = lang_piece2[1]\n                        text_language_speakers.append((t, lang.upper(), speaker))\n\n        elif language == \"AUTO\":\n            text_language_speakers: List[Tuple[str, str, str]] = [\n                (final_text, language.upper().replace(\"JA\", \"JP\"), speaker_name)\n                for sub_list in [\n                    split_by_language(_text, target_languages=[\"zh\", \"ja\", \"en\"])\n                    for _text in texts\n                    if _text != \"\"\n                ]\n                for final_text, language in sub_list\n                if final_text != \"\"\n            ]\n        else:\n            text_language_speakers: List[Tuple[str, str, str]] = [\n                (_text, language, speaker_name) for _text in texts if _text != \"\"\n            ]\n\n        if auto_split:\n            text_language_speakers: List[Tuple[str, str, str]] = [\n                (final_text, lang, speaker)\n                for _text, lang, speaker in text_language_speakers\n                for final_text in cut_sent(_text)\n            ]\n\n        audios = []\n        with torch.no_grad():\n            for _text, lang, speaker in text_language_speakers:\n                audios.append(\n                    infer(\n                        text=_text,\n                        sdp_ratio=sdp_ratio,\n                        noise_scale=noise,\n                        noise_scale_w=noisew,\n                        length_scale=length,\n                        sid=speaker,\n                        language=lang,\n                        hps=loaded_models.models[model_id].hps,\n                        net_g=loaded_models.models[model_id].net_g,\n                        device=loaded_models.models[model_id].device,\n                        emotion=emotion,\n                        reference_audio=ref_audio,\n                        style_text=style_text,\n                        style_weight=style_weight,\n                    )\n                )\n                # audios.append(np.zeros(int(44100 * 0.2)))\n            # audios.pop()\n            audio = np.concatenate(audios)\n            audio = gradio.processing_utils.convert_to_16_bit_wav(audio)\n        with BytesIO() as wavContent:\n            wavfile.write(\n                wavContent, loaded_models.models[model_id].hps.data.sampling_rate, audio\n            )\n            response = Response(content=wavContent.getvalue(), media_type=\"audio/wav\")\n            return response\n\n    @app.post(\"/voice\")\n    async def voice(\n        request: Request,  # fastapi自动注入\n        text: str = Form(...),\n        model_id: int = Query(..., description=\"模型ID\"),  # 模型序号\n        speaker_name: str = Query(\n            None, description=\"说话人名\"\n        ),  # speaker_name与 speaker_id二者选其一\n        speaker_id: int = Query(None, description=\"说话人id，与speaker_name二选一\"),\n        sdp_ratio: float = Query(0.2, description=\"SDP/DP混合比\"),\n        noise: float = Query(0.2, description=\"感情\"),\n        noisew: float = Query(0.9, description=\"音素长度\"),\n        length: float = Query(1, description=\"语速\"),\n        language: str = Query(None, description=\"语言\"),  # 若不指定使用语言则使用默认值\n        auto_translate: bool = Query(False, description=\"自动翻译\"),\n        auto_split: bool = Query(False, description=\"自动切分\"),\n        emotion: Optional[Union[int, str]] = Query(None, description=\"emo\"),\n        reference_audio: UploadFile = File(None),\n        style_text: Optional[str] = Form(None, description=\"风格文本\"),\n        style_weight: float = Query(0.7, description=\"风格权重\"),\n    ):\n        \"\"\"语音接口，若需要上传参考音频请仅使用post请求\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/voice  { unquote(str(request.query_params) )} text={text}\"\n        )\n        return await _voice(\n            text=text,\n            model_id=model_id,\n            speaker_name=speaker_name,\n            speaker_id=speaker_id,\n            sdp_ratio=sdp_ratio,\n            noise=noise,\n            noisew=noisew,\n            length=length,\n            language=language,\n            auto_translate=auto_translate,\n            auto_split=auto_split,\n            emotion=emotion,\n            reference_audio=reference_audio,\n            style_text=style_text,\n            style_weight=style_weight,\n        )\n\n    @app.get(\"/voice\")\n    async def voice(\n        request: Request,  # fastapi自动注入\n        text: str = Query(..., description=\"输入文字\"),\n        model_id: int = Query(..., description=\"模型ID\"),  # 模型序号\n        speaker_name: str = Query(\n            None, description=\"说话人名\"\n        ),  # speaker_name与 speaker_id二者选其一\n        speaker_id: int = Query(None, description=\"说话人id，与speaker_name二选一\"),\n        sdp_ratio: float = Query(0.2, description=\"SDP/DP混合比\"),\n        noise: float = Query(0.2, description=\"感情\"),\n        noisew: float = Query(0.9, description=\"音素长度\"),\n        length: float = Query(1, description=\"语速\"),\n        language: str = Query(None, description=\"语言\"),  # 若不指定使用语言则使用默认值\n        auto_translate: bool = Query(False, description=\"自动翻译\"),\n        auto_split: bool = Query(False, description=\"自动切分\"),\n        emotion: Optional[Union[int, str]] = Query(None, description=\"emo\"),\n        style_text: Optional[str] = Query(None, description=\"风格文本\"),\n        style_weight: float = Query(0.7, description=\"风格权重\"),\n    ):\n        \"\"\"语音接口，不建议使用\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/voice  { unquote(str(request.query_params) )}\"\n        )\n        return await _voice(\n            text=text,\n            model_id=model_id,\n            speaker_name=speaker_name,\n            speaker_id=speaker_id,\n            sdp_ratio=sdp_ratio,\n            noise=noise,\n            noisew=noisew,\n            length=length,\n            language=language,\n            auto_translate=auto_translate,\n            auto_split=auto_split,\n            emotion=emotion,\n            style_text=style_text,\n            style_weight=style_weight,\n        )\n\n    @app.get(\"/models/info\")\n    def get_loaded_models_info(request: Request):\n        \"\"\"获取已加载模型信息\"\"\"\n\n        result: Dict[str, Dict] = dict()\n        for key, model in loaded_models.models.items():\n            result[str(key)] = model.to_dict()\n        return result\n\n    @app.get(\"/models/delete\")\n    def delete_model(\n        request: Request, model_id: int = Query(..., description=\"删除模型id\")\n    ):\n        \"\"\"删除指定模型\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/models/delete  { unquote(str(request.query_params) )}\"\n        )\n        result = loaded_models.del_model(model_id)\n        if result is None:\n            logger.error(f\"/models/delete 模型删除错误：模型{model_id}不存在，删除失败\")\n            return {\"status\": 14, \"detail\": f\"模型{model_id}不存在，删除失败\"}\n\n        return {\"status\": 0, \"detail\": \"删除成功\"}\n\n    @app.get(\"/models/add\")\n    def add_model(\n        request: Request,\n        model_path: str = Query(..., description=\"添加模型路径\"),\n        config_path: str = Query(\n            None,\n            description=\"添加模型配置文件路径，不填则使用./config.json或../config.json\",\n        ),\n        device: str = Query(\"cuda\", description=\"推理使用设备\"),\n        language: str = Query(\"ZH\", description=\"模型默认语言\"),\n    ):\n        \"\"\"添加指定模型：允许重复添加相同路径模型，且不重复占用内存\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/models/add  { unquote(str(request.query_params) )}\"\n        )\n        if config_path is None:\n            model_dir = os.path.dirname(model_path)\n            if os.path.isfile(os.path.join(model_dir, \"config.json\")):\n                config_path = os.path.join(model_dir, \"config.json\")\n            elif os.path.isfile(os.path.join(model_dir, \"../config.json\")):\n                config_path = os.path.join(model_dir, \"../config.json\")\n            else:\n                logger.error(\n                    \"/models/add 模型添加失败：未在模型所在目录以及上级目录找到config.json文件\"\n                )\n                return {\n                    \"status\": 15,\n                    \"detail\": \"查询未传入配置文件路径，同时默认路径./与../中不存在配置文件config.json。\",\n                }\n        try:\n            model_id = loaded_models.init_model(\n                config_path=config_path,\n                model_path=model_path,\n                device=device,\n                language=language,\n            )\n        except Exception:\n            logging.exception(\"模型加载出错\")\n            return {\n                \"status\": 16,\n                \"detail\": \"模型加载出错，详细查看日志\",\n            }\n        return {\n            \"status\": 0,\n            \"detail\": \"模型添加成功\",\n            \"Data\": {\n                \"model_id\": model_id,\n                \"model_info\": loaded_models.models[model_id].to_dict(),\n            },\n        }\n\n    def _get_all_models(root_dir: str = \"Data\", only_unloaded: bool = False):\n        \"\"\"从root_dir搜索获取所有可用模型\"\"\"\n        result: Dict[str, List[str]] = dict()\n        files = os.listdir(root_dir) + [\".\"]\n        for file in files:\n            if os.path.isdir(os.path.join(root_dir, file)):\n                sub_dir = os.path.join(root_dir, file)\n                # 搜索 \"sub_dir\" 、 \"sub_dir/models\" 两个路径\n                result[file] = list()\n                sub_files = os.listdir(sub_dir)\n                model_files = []\n                for sub_file in sub_files:\n                    relpath = os.path.realpath(os.path.join(sub_dir, sub_file))\n                    if only_unloaded and relpath in loaded_models.path2ids.keys():\n                        continue\n                    if sub_file.endswith(\".pth\") and sub_file.startswith(\"G_\"):\n                        if os.path.isfile(relpath):\n                            model_files.append(sub_file)\n                # 对模型文件按步数排序\n                model_files = sorted(\n                    model_files,\n                    key=lambda pth: (\n                        int(pth.lstrip(\"G_\").rstrip(\".pth\"))\n                        if pth.lstrip(\"G_\").rstrip(\".pth\").isdigit()\n                        else 10**10\n                    ),\n                )\n                result[file] = model_files\n                models_dir = os.path.join(sub_dir, \"models\")\n                model_files = []\n                if os.path.isdir(models_dir):\n                    sub_files = os.listdir(models_dir)\n                    for sub_file in sub_files:\n                        relpath = os.path.realpath(os.path.join(models_dir, sub_file))\n                        if only_unloaded and relpath in loaded_models.path2ids.keys():\n                            continue\n                        if sub_file.endswith(\".pth\") and sub_file.startswith(\"G_\"):\n                            if os.path.isfile(os.path.join(models_dir, sub_file)):\n                                model_files.append(f\"models/{sub_file}\")\n                    # 对模型文件按步数排序\n                    model_files = sorted(\n                        model_files,\n                        key=lambda pth: (\n                            int(pth.lstrip(\"models/G_\").rstrip(\".pth\"))\n                            if pth.lstrip(\"models/G_\").rstrip(\".pth\").isdigit()\n                            else 10**10\n                        ),\n                    )\n                    result[file] += model_files\n                if len(result[file]) == 0:\n                    result.pop(file)\n\n        return result\n\n    @app.get(\"/models/get_unloaded\")\n    def get_unloaded_models_info(\n        request: Request, root_dir: str = Query(\"Data\", description=\"搜索根目录\")\n    ):\n        \"\"\"获取未加载模型\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/models/get_unloaded  { unquote(str(request.query_params) )}\"\n        )\n        return _get_all_models(root_dir, only_unloaded=True)\n\n    @app.get(\"/models/get_local\")\n    def get_local_models_info(\n        request: Request, root_dir: str = Query(\"Data\", description=\"搜索根目录\")\n    ):\n        \"\"\"获取全部本地模型\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/models/get_local  { unquote(str(request.query_params) )}\"\n        )\n        return _get_all_models(root_dir, only_unloaded=False)\n\n    @app.get(\"/status\")\n    def get_status():\n        \"\"\"获取电脑运行状态\"\"\"\n        cpu_percent = psutil.cpu_percent(interval=1)\n        memory_info = psutil.virtual_memory()\n        memory_total = memory_info.total\n        memory_available = memory_info.available\n        memory_used = memory_info.used\n        memory_percent = memory_info.percent\n        gpuInfo = []\n        devices = [\"cpu\"]\n        for i in range(torch.cuda.device_count()):\n            devices.append(f\"cuda:{i}\")\n        gpus = GPUtil.getGPUs()\n        for gpu in gpus:\n            gpuInfo.append(\n                {\n                    \"gpu_id\": gpu.id,\n                    \"gpu_load\": gpu.load,\n                    \"gpu_memory\": {\n                        \"total\": gpu.memoryTotal,\n                        \"used\": gpu.memoryUsed,\n                        \"free\": gpu.memoryFree,\n                    },\n                }\n            )\n        return {\n            \"devices\": devices,\n            \"cpu_percent\": cpu_percent,\n            \"memory_total\": memory_total,\n            \"memory_available\": memory_available,\n            \"memory_used\": memory_used,\n            \"memory_percent\": memory_percent,\n            \"gpu\": gpuInfo,\n        }\n\n    @app.get(\"/tools/translate\")\n    def translate(\n        request: Request,\n        texts: str = Query(..., description=\"待翻译文本\"),\n        to_language: str = Query(..., description=\"翻译目标语言\"),\n    ):\n        \"\"\"翻译\"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/tools/translate  { unquote(str(request.query_params) )}\"\n        )\n        return {\"texts\": trans.translate(Sentence=texts, to_Language=to_language)}\n\n    all_examples: Dict[str, Dict[str, List]] = dict()  # 存放示例\n\n    @app.get(\"/tools/random_example\")\n    def random_example(\n        request: Request,\n        language: str = Query(None, description=\"指定语言，未指定则随机返回\"),\n        root_dir: str = Query(\"Data\", description=\"搜索根目录\"),\n    ):\n        \"\"\"\n        获取一个随机音频+文本，用于对比，音频会从本地目录随机选择。\n        \"\"\"\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/tools/random_example  { unquote(str(request.query_params) )}\"\n        )\n        global all_examples\n        # 数据初始化\n        if root_dir not in all_examples.keys():\n            all_examples[root_dir] = {\"ZH\": [], \"JP\": [], \"EN\": []}\n\n            examples = all_examples[root_dir]\n\n            # 从项目Data目录中搜索train/val.list\n            for root, directories, _files in os.walk(root_dir):\n                for file in _files:\n                    if file in [\"train.list\", \"val.list\"]:\n                        with open(\n                            os.path.join(root, file), mode=\"r\", encoding=\"utf-8\"\n                        ) as f:\n                            lines = f.readlines()\n                            for line in lines:\n                                data = line.split(\"|\")\n                                if len(data) != 7:\n                                    continue\n                                # 音频存在 且语言为ZH/EN/JP\n                                if os.path.isfile(data[0]) and data[2] in [\n                                    \"ZH\",\n                                    \"JP\",\n                                    \"EN\",\n                                ]:\n                                    examples[data[2]].append(\n                                        {\n                                            \"text\": data[3],\n                                            \"audio\": data[0],\n                                            \"speaker\": data[1],\n                                        }\n                                    )\n\n        examples = all_examples[root_dir]\n        if language is None:\n            if len(examples[\"ZH\"]) + len(examples[\"JP\"]) + len(examples[\"EN\"]) == 0:\n                return {\"status\": 17, \"detail\": \"没有加载任何示例数据\"}\n            else:\n                # 随机选一个\n                rand_num = random.randint(\n                    0,\n                    len(examples[\"ZH\"]) + len(examples[\"JP\"]) + len(examples[\"EN\"]) - 1,\n                )\n                # ZH\n                if rand_num < len(examples[\"ZH\"]):\n                    return {\"status\": 0, \"Data\": examples[\"ZH\"][rand_num]}\n                # JP\n                if rand_num < len(examples[\"ZH\"]) + len(examples[\"JP\"]):\n                    return {\n                        \"status\": 0,\n                        \"Data\": examples[\"JP\"][rand_num - len(examples[\"ZH\"])],\n                    }\n                # EN\n                return {\n                    \"status\": 0,\n                    \"Data\": examples[\"EN\"][\n                        rand_num - len(examples[\"ZH\"]) - len(examples[\"JP\"])\n                    ],\n                }\n\n        else:\n            if len(examples[language]) == 0:\n                return {\"status\": 17, \"detail\": f\"没有加载任何{language}数据\"}\n            return {\n                \"status\": 0,\n                \"Data\": examples[language][\n                    random.randint(0, len(examples[language]) - 1)\n                ],\n            }\n\n    @app.get(\"/tools/get_audio\")\n    def get_audio(request: Request, path: str = Query(..., description=\"本地音频路径\")):\n        logger.info(\n            f\"{request.client.host}:{request.client.port}/tools/get_audio  { unquote(str(request.query_params) )}\"\n        )\n        if not os.path.isfile(path):\n            logger.error(f\"/tools/get_audio 获取音频错误：指定音频{path}不存在\")\n            return {\"status\": 18, \"detail\": \"指定音频不存在\"}\n        if not path.lower().endswith(\".wav\"):\n            logger.error(f\"/tools/get_audio 获取音频错误：音频{path}非wav文件\")\n            return {\"status\": 19, \"detail\": \"非wav格式文件\"}\n        return FileResponse(path=path)\n\n    logger.warning(\"本地服务，请勿将服务端口暴露于外网\")\n    logger.info(f\"api文档地址 http://127.0.0.1:{config.server_config.port}/docs\")\n    if os.path.isdir(StaticDir):\n        webbrowser.open(f\"http://127.0.0.1:{config.server_config.port}\")\n    uvicorn.run(\n        app, port=config.server_config.port, host=\"0.0.0.0\", log_level=\"warning\"\n    )\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "infer.py",
          "type": "blob",
          "size": 13.6328125,
          "content": "\"\"\"\r\n版本管理、兼容推理及模型加载实现。\r\n版本说明：\r\n    1. 版本号与github的release版本号对应，使用哪个release版本训练的模型即对应其版本号\r\n    2. 请在模型的config.json中显示声明版本号，添加一个字段\"version\" : \"你的版本号\"\r\n特殊版本说明：\r\n    1.1.1-fix： 1.1.1版本训练的模型，但是在推理时使用dev的日语修复\r\n    2.3：当前版本\r\n\"\"\"\r\n\r\nimport torch\r\nimport commons\r\nfrom text import cleaned_text_to_sequence, get_bert\r\n\r\n# from clap_wrapper import get_clap_audio_feature, get_clap_text_feature\r\nfrom typing import Union\r\nfrom text.cleaner import clean_text\r\nimport utils\r\n\r\nfrom models import SynthesizerTrn\r\nfrom text.symbols import symbols\r\n\r\nfrom oldVersion.V220.models import SynthesizerTrn as V220SynthesizerTrn\r\nfrom oldVersion.V220.text import symbols as V220symbols\r\nfrom oldVersion.V210.models import SynthesizerTrn as V210SynthesizerTrn\r\nfrom oldVersion.V210.text import symbols as V210symbols\r\nfrom oldVersion.V200.models import SynthesizerTrn as V200SynthesizerTrn\r\nfrom oldVersion.V200.text import symbols as V200symbols\r\nfrom oldVersion.V111.models import SynthesizerTrn as V111SynthesizerTrn\r\nfrom oldVersion.V111.text import symbols as V111symbols\r\nfrom oldVersion.V110.models import SynthesizerTrn as V110SynthesizerTrn\r\nfrom oldVersion.V110.text import symbols as V110symbols\r\nfrom oldVersion.V101.models import SynthesizerTrn as V101SynthesizerTrn\r\nfrom oldVersion.V101.text import symbols as V101symbols\r\n\r\nfrom oldVersion import V111, V110, V101, V200, V210, V220\r\n\r\n# 当前版本信息\r\nlatest_version = \"2.3\"\r\n\r\n# 版本兼容\r\nSynthesizerTrnMap = {\r\n    \"2.2\": V220SynthesizerTrn,\r\n    \"2.1\": V210SynthesizerTrn,\r\n    \"2.0.2-fix\": V200SynthesizerTrn,\r\n    \"2.0.1\": V200SynthesizerTrn,\r\n    \"2.0\": V200SynthesizerTrn,\r\n    \"1.1.1-fix\": V111SynthesizerTrn,\r\n    \"1.1.1\": V111SynthesizerTrn,\r\n    \"1.1\": V110SynthesizerTrn,\r\n    \"1.1.0\": V110SynthesizerTrn,\r\n    \"1.0.1\": V101SynthesizerTrn,\r\n    \"1.0\": V101SynthesizerTrn,\r\n    \"1.0.0\": V101SynthesizerTrn,\r\n}\r\n\r\nsymbolsMap = {\r\n    \"2.2\": V220symbols,\r\n    \"2.1\": V210symbols,\r\n    \"2.0.2-fix\": V200symbols,\r\n    \"2.0.1\": V200symbols,\r\n    \"2.0\": V200symbols,\r\n    \"1.1.1-fix\": V111symbols,\r\n    \"1.1.1\": V111symbols,\r\n    \"1.1\": V110symbols,\r\n    \"1.1.0\": V110symbols,\r\n    \"1.0.1\": V101symbols,\r\n    \"1.0\": V101symbols,\r\n    \"1.0.0\": V101symbols,\r\n}\r\n\r\n\r\n# def get_emo_(reference_audio, emotion, sid):\r\n#     emo = (\r\n#         torch.from_numpy(get_emo(reference_audio))\r\n#         if reference_audio and emotion == -1\r\n#         else torch.FloatTensor(\r\n#             np.load(f\"emo_clustering/{sid}/cluster_center_{emotion}.npy\")\r\n#         )\r\n#     )\r\n#     return emo\r\n\r\n\r\ndef get_net_g(model_path: str, version: str, device: str, hps):\r\n    if version != latest_version:\r\n        net_g = SynthesizerTrnMap[version](\r\n            len(symbolsMap[version]),\r\n            hps.data.filter_length // 2 + 1,\r\n            hps.train.segment_size // hps.data.hop_length,\r\n            n_speakers=hps.data.n_speakers,\r\n            **hps.model,\r\n        ).to(device)\r\n    else:\r\n        # 当前版本模型 net_g\r\n        net_g = SynthesizerTrn(\r\n            len(symbols),\r\n            hps.data.filter_length // 2 + 1,\r\n            hps.train.segment_size // hps.data.hop_length,\r\n            n_speakers=hps.data.n_speakers,\r\n            **hps.model,\r\n        ).to(device)\r\n    _ = net_g.eval()\r\n    _ = utils.load_checkpoint(model_path, net_g, None, skip_optimizer=True)\r\n    return net_g\r\n\r\n\r\ndef get_text(text, language_str, hps, device, style_text=None, style_weight=0.7):\r\n    style_text = None if style_text == \"\" else style_text\r\n    # 在此处实现当前版本的get_text\r\n    norm_text, phone, tone, word2ph = clean_text(text, language_str)\r\n    phone, tone, language = cleaned_text_to_sequence(phone, tone, language_str)\r\n\r\n    if hps.data.add_blank:\r\n        phone = commons.intersperse(phone, 0)\r\n        tone = commons.intersperse(tone, 0)\r\n        language = commons.intersperse(language, 0)\r\n        for i in range(len(word2ph)):\r\n            word2ph[i] = word2ph[i] * 2\r\n        word2ph[0] += 1\r\n    bert_ori = get_bert(\r\n        norm_text, word2ph, language_str, device, style_text, style_weight\r\n    )\r\n    del word2ph\r\n    assert bert_ori.shape[-1] == len(phone), phone\r\n\r\n    if language_str == \"ZH\":\r\n        bert = bert_ori\r\n        ja_bert = torch.randn(1024, len(phone))\r\n        en_bert = torch.randn(1024, len(phone))\r\n    elif language_str == \"JP\":\r\n        bert = torch.randn(1024, len(phone))\r\n        ja_bert = bert_ori\r\n        en_bert = torch.randn(1024, len(phone))\r\n    elif language_str == \"EN\":\r\n        bert = torch.randn(1024, len(phone))\r\n        ja_bert = torch.randn(1024, len(phone))\r\n        en_bert = bert_ori\r\n    else:\r\n        raise ValueError(\"language_str should be ZH, JP or EN\")\r\n\r\n    assert bert.shape[-1] == len(\r\n        phone\r\n    ), f\"Bert seq len {bert.shape[-1]} != {len(phone)}\"\r\n\r\n    phone = torch.LongTensor(phone)\r\n    tone = torch.LongTensor(tone)\r\n    language = torch.LongTensor(language)\r\n    return bert, ja_bert, en_bert, phone, tone, language\r\n\r\n\r\ndef infer(\r\n    text,\r\n    emotion: Union[int, str],\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    sid,\r\n    language,\r\n    hps,\r\n    net_g,\r\n    device,\r\n    reference_audio=None,\r\n    skip_start=False,\r\n    skip_end=False,\r\n    style_text=None,\r\n    style_weight=0.7,\r\n):\r\n    # 2.2版本参数位置变了\r\n    inferMap_V4 = {\r\n        \"2.2\": V220.infer,\r\n    }\r\n    # 2.1 参数新增 emotion reference_audio skip_start skip_end\r\n    inferMap_V3 = {\r\n        \"2.1\": V210.infer,\r\n    }\r\n    # 支持中日英三语版本\r\n    inferMap_V2 = {\r\n        \"2.0.2-fix\": V200.infer,\r\n        \"2.0.1\": V200.infer,\r\n        \"2.0\": V200.infer,\r\n        \"1.1.1-fix\": V111.infer_fix,\r\n        \"1.1.1\": V111.infer,\r\n        \"1.1\": V110.infer,\r\n        \"1.1.0\": V110.infer,\r\n    }\r\n    # 仅支持中文版本\r\n    # 在测试中，并未发现两个版本的模型不能互相通用\r\n    inferMap_V1 = {\r\n        \"1.0.1\": V101.infer,\r\n        \"1.0\": V101.infer,\r\n        \"1.0.0\": V101.infer,\r\n    }\r\n    version = hps.version if hasattr(hps, \"version\") else latest_version\r\n    # 非当前版本，根据版本号选择合适的infer\r\n    if version != latest_version:\r\n        if version in inferMap_V4.keys():\r\n            return inferMap_V4[version](\r\n                text,\r\n                emotion,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                sid,\r\n                language,\r\n                hps,\r\n                net_g,\r\n                device,\r\n                reference_audio,\r\n                skip_start,\r\n                skip_end,\r\n                style_text,\r\n                style_weight,\r\n            )\r\n        if version in inferMap_V3.keys():\r\n            return inferMap_V3[version](\r\n                text,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                sid,\r\n                language,\r\n                hps,\r\n                net_g,\r\n                device,\r\n                reference_audio,\r\n                emotion,\r\n                skip_start,\r\n                skip_end,\r\n                style_text,\r\n                style_weight,\r\n            )\r\n        if version in inferMap_V2.keys():\r\n            return inferMap_V2[version](\r\n                text,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                sid,\r\n                language,\r\n                hps,\r\n                net_g,\r\n                device,\r\n            )\r\n        if version in inferMap_V1.keys():\r\n            return inferMap_V1[version](\r\n                text,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                sid,\r\n                hps,\r\n                net_g,\r\n                device,\r\n            )\r\n    # 在此处实现当前版本的推理\r\n    # emo = get_emo_(reference_audio, emotion, sid)\r\n    # if isinstance(reference_audio, np.ndarray):\r\n    #     emo = get_clap_audio_feature(reference_audio, device)\r\n    # else:\r\n    #     emo = get_clap_text_feature(emotion, device)\r\n    # emo = torch.squeeze(emo, dim=1)\r\n\r\n    bert, ja_bert, en_bert, phones, tones, lang_ids = get_text(\r\n        text,\r\n        language,\r\n        hps,\r\n        device,\r\n        style_text=style_text,\r\n        style_weight=style_weight,\r\n    )\r\n    if skip_start:\r\n        phones = phones[3:]\r\n        tones = tones[3:]\r\n        lang_ids = lang_ids[3:]\r\n        bert = bert[:, 3:]\r\n        ja_bert = ja_bert[:, 3:]\r\n        en_bert = en_bert[:, 3:]\r\n    if skip_end:\r\n        phones = phones[:-2]\r\n        tones = tones[:-2]\r\n        lang_ids = lang_ids[:-2]\r\n        bert = bert[:, :-2]\r\n        ja_bert = ja_bert[:, :-2]\r\n        en_bert = en_bert[:, :-2]\r\n    with torch.no_grad():\r\n        x_tst = phones.to(device).unsqueeze(0)\r\n        tones = tones.to(device).unsqueeze(0)\r\n        lang_ids = lang_ids.to(device).unsqueeze(0)\r\n        bert = bert.to(device).unsqueeze(0)\r\n        ja_bert = ja_bert.to(device).unsqueeze(0)\r\n        en_bert = en_bert.to(device).unsqueeze(0)\r\n        x_tst_lengths = torch.LongTensor([phones.size(0)]).to(device)\r\n        # emo = emo.to(device).unsqueeze(0)\r\n        del phones\r\n        speakers = torch.LongTensor([hps.data.spk2id[sid]]).to(device)\r\n        audio = (\r\n            net_g.infer(\r\n                x_tst,\r\n                x_tst_lengths,\r\n                speakers,\r\n                tones,\r\n                lang_ids,\r\n                bert,\r\n                ja_bert,\r\n                en_bert,\r\n                sdp_ratio=sdp_ratio,\r\n                noise_scale=noise_scale,\r\n                noise_scale_w=noise_scale_w,\r\n                length_scale=length_scale,\r\n            )[0][0, 0]\r\n            .data.cpu()\r\n            .float()\r\n            .numpy()\r\n        )\r\n        del (\r\n            x_tst,\r\n            tones,\r\n            lang_ids,\r\n            bert,\r\n            x_tst_lengths,\r\n            speakers,\r\n            ja_bert,\r\n            en_bert,\r\n        )  # , emo\r\n        if torch.cuda.is_available():\r\n            torch.cuda.empty_cache()\r\n        return audio\r\n\r\n\r\ndef infer_multilang(\r\n    text,\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    sid,\r\n    language,\r\n    hps,\r\n    net_g,\r\n    device,\r\n    reference_audio=None,\r\n    emotion=None,\r\n    skip_start=False,\r\n    skip_end=False,\r\n):\r\n    bert, ja_bert, en_bert, phones, tones, lang_ids = [], [], [], [], [], []\r\n    # emo = get_emo_(reference_audio, emotion, sid)\r\n    # if isinstance(reference_audio, np.ndarray):\r\n    #     emo = get_clap_audio_feature(reference_audio, device)\r\n    # else:\r\n    #     emo = get_clap_text_feature(emotion, device)\r\n    # emo = torch.squeeze(emo, dim=1)\r\n    for idx, (txt, lang) in enumerate(zip(text, language)):\r\n        _skip_start = (idx != 0) or (skip_start and idx == 0)\r\n        _skip_end = (idx != len(language) - 1) or skip_end\r\n        (\r\n            temp_bert,\r\n            temp_ja_bert,\r\n            temp_en_bert,\r\n            temp_phones,\r\n            temp_tones,\r\n            temp_lang_ids,\r\n        ) = get_text(txt, lang, hps, device)\r\n        if _skip_start:\r\n            temp_bert = temp_bert[:, 3:]\r\n            temp_ja_bert = temp_ja_bert[:, 3:]\r\n            temp_en_bert = temp_en_bert[:, 3:]\r\n            temp_phones = temp_phones[3:]\r\n            temp_tones = temp_tones[3:]\r\n            temp_lang_ids = temp_lang_ids[3:]\r\n        if _skip_end:\r\n            temp_bert = temp_bert[:, :-2]\r\n            temp_ja_bert = temp_ja_bert[:, :-2]\r\n            temp_en_bert = temp_en_bert[:, :-2]\r\n            temp_phones = temp_phones[:-2]\r\n            temp_tones = temp_tones[:-2]\r\n            temp_lang_ids = temp_lang_ids[:-2]\r\n        bert.append(temp_bert)\r\n        ja_bert.append(temp_ja_bert)\r\n        en_bert.append(temp_en_bert)\r\n        phones.append(temp_phones)\r\n        tones.append(temp_tones)\r\n        lang_ids.append(temp_lang_ids)\r\n    bert = torch.concatenate(bert, dim=1)\r\n    ja_bert = torch.concatenate(ja_bert, dim=1)\r\n    en_bert = torch.concatenate(en_bert, dim=1)\r\n    phones = torch.concatenate(phones, dim=0)\r\n    tones = torch.concatenate(tones, dim=0)\r\n    lang_ids = torch.concatenate(lang_ids, dim=0)\r\n    with torch.no_grad():\r\n        x_tst = phones.to(device).unsqueeze(0)\r\n        tones = tones.to(device).unsqueeze(0)\r\n        lang_ids = lang_ids.to(device).unsqueeze(0)\r\n        bert = bert.to(device).unsqueeze(0)\r\n        ja_bert = ja_bert.to(device).unsqueeze(0)\r\n        en_bert = en_bert.to(device).unsqueeze(0)\r\n        # emo = emo.to(device).unsqueeze(0)\r\n        x_tst_lengths = torch.LongTensor([phones.size(0)]).to(device)\r\n        del phones\r\n        speakers = torch.LongTensor([hps.data.spk2id[sid]]).to(device)\r\n        audio = (\r\n            net_g.infer(\r\n                x_tst,\r\n                x_tst_lengths,\r\n                speakers,\r\n                tones,\r\n                lang_ids,\r\n                bert,\r\n                ja_bert,\r\n                en_bert,\r\n                sdp_ratio=sdp_ratio,\r\n                noise_scale=noise_scale,\r\n                noise_scale_w=noise_scale_w,\r\n                length_scale=length_scale,\r\n            )[0][0, 0]\r\n            .data.cpu()\r\n            .float()\r\n            .numpy()\r\n        )\r\n        del (\r\n            x_tst,\r\n            tones,\r\n            lang_ids,\r\n            bert,\r\n            x_tst_lengths,\r\n            speakers,\r\n            ja_bert,\r\n            en_bert,\r\n        )  # , emo\r\n        if torch.cuda.is_available():\r\n            torch.cuda.empty_cache()\r\n        return audio\r\n"
        },
        {
          "name": "losses.py",
          "type": "blob",
          "size": 4.3681640625,
          "content": "import torch\nimport torchaudio\nfrom transformers import AutoModel\n\n\ndef feature_loss(fmap_r, fmap_g):\n    loss = 0\n    for dr, dg in zip(fmap_r, fmap_g):\n        for rl, gl in zip(dr, dg):\n            rl = rl.float().detach()\n            gl = gl.float()\n            loss += torch.mean(torch.abs(rl - gl))\n\n    return loss * 2\n\n\ndef discriminator_loss(disc_real_outputs, disc_generated_outputs):\n    loss = 0\n    r_losses = []\n    g_losses = []\n    for dr, dg in zip(disc_real_outputs, disc_generated_outputs):\n        dr = dr.float()\n        dg = dg.float()\n        r_loss = torch.mean((1 - dr) ** 2)\n        g_loss = torch.mean(dg**2)\n        loss += r_loss + g_loss\n        r_losses.append(r_loss.item())\n        g_losses.append(g_loss.item())\n\n    return loss, r_losses, g_losses\n\n\ndef generator_loss(disc_outputs):\n    loss = 0\n    gen_losses = []\n    for dg in disc_outputs:\n        dg = dg.float()\n        l = torch.mean((1 - dg) ** 2)\n        gen_losses.append(l)\n        loss += l\n\n    return loss, gen_losses\n\n\ndef kl_loss(z_p, logs_q, m_p, logs_p, z_mask):\n    \"\"\"\n    z_p, logs_q: [b, h, t_t]\n    m_p, logs_p: [b, h, t_t]\n    \"\"\"\n    z_p = z_p.float()\n    logs_q = logs_q.float()\n    m_p = m_p.float()\n    logs_p = logs_p.float()\n    z_mask = z_mask.float()\n\n    kl = logs_p - logs_q - 0.5\n    kl += 0.5 * ((z_p - m_p) ** 2) * torch.exp(-2.0 * logs_p)\n    kl = torch.sum(kl * z_mask)\n    l = kl / torch.sum(z_mask)\n    return l\n\n\nclass WavLMLoss(torch.nn.Module):\n    def __init__(self, model, wd, model_sr, slm_sr=16000):\n        super(WavLMLoss, self).__init__()\n        self.wavlm = AutoModel.from_pretrained(model)\n        self.wd = wd\n        self.resample = torchaudio.transforms.Resample(model_sr, slm_sr)\n        self.wavlm.eval()\n        for param in self.wavlm.parameters():\n            param.requires_grad = False\n\n    def forward(self, wav, y_rec):\n        with torch.no_grad():\n            wav_16 = self.resample(wav)\n            wav_embeddings = self.wavlm(\n                input_values=wav_16, output_hidden_states=True\n            ).hidden_states\n        y_rec_16 = self.resample(y_rec)\n        y_rec_embeddings = self.wavlm(\n            input_values=y_rec_16.squeeze(), output_hidden_states=True\n        ).hidden_states\n\n        floss = 0\n        for er, eg in zip(wav_embeddings, y_rec_embeddings):\n            floss += torch.mean(torch.abs(er - eg))\n\n        return floss.mean()\n\n    def generator(self, y_rec):\n        y_rec_16 = self.resample(y_rec)\n        y_rec_embeddings = self.wavlm(\n            input_values=y_rec_16, output_hidden_states=True\n        ).hidden_states\n        y_rec_embeddings = (\n            torch.stack(y_rec_embeddings, dim=1)\n            .transpose(-1, -2)\n            .flatten(start_dim=1, end_dim=2)\n        )\n        y_df_hat_g = self.wd(y_rec_embeddings)\n        loss_gen = torch.mean((1 - y_df_hat_g) ** 2)\n\n        return loss_gen\n\n    def discriminator(self, wav, y_rec):\n        with torch.no_grad():\n            wav_16 = self.resample(wav)\n            wav_embeddings = self.wavlm(\n                input_values=wav_16, output_hidden_states=True\n            ).hidden_states\n            y_rec_16 = self.resample(y_rec)\n            y_rec_embeddings = self.wavlm(\n                input_values=y_rec_16, output_hidden_states=True\n            ).hidden_states\n\n            y_embeddings = (\n                torch.stack(wav_embeddings, dim=1)\n                .transpose(-1, -2)\n                .flatten(start_dim=1, end_dim=2)\n            )\n            y_rec_embeddings = (\n                torch.stack(y_rec_embeddings, dim=1)\n                .transpose(-1, -2)\n                .flatten(start_dim=1, end_dim=2)\n            )\n\n        y_d_rs = self.wd(y_embeddings)\n        y_d_gs = self.wd(y_rec_embeddings)\n\n        y_df_hat_r, y_df_hat_g = y_d_rs, y_d_gs\n\n        r_loss = torch.mean((1 - y_df_hat_r) ** 2)\n        g_loss = torch.mean((y_df_hat_g) ** 2)\n\n        loss_disc_f = r_loss + g_loss\n\n        return loss_disc_f.mean()\n\n    def discriminator_forward(self, wav):\n        with torch.no_grad():\n            wav_16 = self.resample(wav)\n            wav_embeddings = self.wavlm(\n                input_values=wav_16, output_hidden_states=True\n            ).hidden_states\n            y_embeddings = (\n                torch.stack(wav_embeddings, dim=1)\n                .transpose(-1, -2)\n                .flatten(start_dim=1, end_dim=2)\n            )\n\n        y_d_rs = self.wd(y_embeddings)\n\n        return y_d_rs\n"
        },
        {
          "name": "mel_processing.py",
          "type": "blob",
          "size": 3.9208984375,
          "content": "import torch\nimport torch.utils.data\nfrom librosa.filters import mel as librosa_mel_fn\nimport warnings\n\n# warnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.filterwarnings(action=\"ignore\")\nMAX_WAV_VALUE = 32768.0\n\n\ndef dynamic_range_compression_torch(x, C=1, clip_val=1e-5):\n    \"\"\"\n    PARAMS\n    ------\n    C: compression factor\n    \"\"\"\n    return torch.log(torch.clamp(x, min=clip_val) * C)\n\n\ndef dynamic_range_decompression_torch(x, C=1):\n    \"\"\"\n    PARAMS\n    ------\n    C: compression factor used to compress\n    \"\"\"\n    return torch.exp(x) / C\n\n\ndef spectral_normalize_torch(magnitudes):\n    output = dynamic_range_compression_torch(magnitudes)\n    return output\n\n\ndef spectral_de_normalize_torch(magnitudes):\n    output = dynamic_range_decompression_torch(magnitudes)\n    return output\n\n\nmel_basis = {}\nhann_window = {}\n\n\ndef spectrogram_torch(y, n_fft, sampling_rate, hop_size, win_size, center=False):\n    if torch.min(y) < -1.0:\n        print(\"min value is \", torch.min(y))\n    if torch.max(y) > 1.0:\n        print(\"max value is \", torch.max(y))\n\n    global hann_window\n    dtype_device = str(y.dtype) + \"_\" + str(y.device)\n    wnsize_dtype_device = str(win_size) + \"_\" + dtype_device\n    if wnsize_dtype_device not in hann_window:\n        hann_window[wnsize_dtype_device] = torch.hann_window(win_size).to(\n            dtype=y.dtype, device=y.device\n        )\n\n    y = torch.nn.functional.pad(\n        y.unsqueeze(1),\n        (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)),\n        mode=\"reflect\",\n    )\n    y = y.squeeze(1)\n\n    spec = torch.stft(\n        y,\n        n_fft,\n        hop_length=hop_size,\n        win_length=win_size,\n        window=hann_window[wnsize_dtype_device],\n        center=center,\n        pad_mode=\"reflect\",\n        normalized=False,\n        onesided=True,\n        return_complex=False,\n    )\n\n    spec = torch.sqrt(spec.pow(2).sum(-1) + 1e-6)\n    return spec\n\n\ndef spec_to_mel_torch(spec, n_fft, num_mels, sampling_rate, fmin, fmax):\n    global mel_basis\n    dtype_device = str(spec.dtype) + \"_\" + str(spec.device)\n    fmax_dtype_device = str(fmax) + \"_\" + dtype_device\n    if fmax_dtype_device not in mel_basis:\n        mel = librosa_mel_fn(sampling_rate, n_fft, num_mels, fmin, fmax)\n        mel_basis[fmax_dtype_device] = torch.from_numpy(mel).to(\n            dtype=spec.dtype, device=spec.device\n        )\n    spec = torch.matmul(mel_basis[fmax_dtype_device], spec)\n    spec = spectral_normalize_torch(spec)\n    return spec\n\n\ndef mel_spectrogram_torch(\n    y, n_fft, num_mels, sampling_rate, hop_size, win_size, fmin, fmax, center=False\n):\n    if torch.min(y) < -1.0:\n        print(\"min value is \", torch.min(y))\n    if torch.max(y) > 1.0:\n        print(\"max value is \", torch.max(y))\n\n    global mel_basis, hann_window\n    dtype_device = str(y.dtype) + \"_\" + str(y.device)\n    fmax_dtype_device = str(fmax) + \"_\" + dtype_device\n    wnsize_dtype_device = str(win_size) + \"_\" + dtype_device\n    if fmax_dtype_device not in mel_basis:\n        mel = librosa_mel_fn(sampling_rate, n_fft, num_mels, fmin, fmax)\n        mel_basis[fmax_dtype_device] = torch.from_numpy(mel).to(\n            dtype=y.dtype, device=y.device\n        )\n    if wnsize_dtype_device not in hann_window:\n        hann_window[wnsize_dtype_device] = torch.hann_window(win_size).to(\n            dtype=y.dtype, device=y.device\n        )\n\n    y = torch.nn.functional.pad(\n        y.unsqueeze(1),\n        (int((n_fft - hop_size) / 2), int((n_fft - hop_size) / 2)),\n        mode=\"reflect\",\n    )\n    y = y.squeeze(1)\n\n    spec = torch.stft(\n        y,\n        n_fft,\n        hop_length=hop_size,\n        win_length=win_size,\n        window=hann_window[wnsize_dtype_device],\n        center=center,\n        pad_mode=\"reflect\",\n        normalized=False,\n        onesided=True,\n        return_complex=False,\n    )\n\n    spec = torch.sqrt(spec.pow(2).sum(-1) + 1e-6)\n\n    spec = torch.matmul(mel_basis[fmax_dtype_device], spec)\n    spec = spectral_normalize_torch(spec)\n\n    return spec\n"
        },
        {
          "name": "models.py",
          "type": "blob",
          "size": 34.1181640625,
          "content": "import math\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nimport commons\nimport modules\nimport attentions\nimport monotonic_align\n\nfrom torch.nn import Conv1d, ConvTranspose1d, Conv2d\nfrom torch.nn.utils import weight_norm, remove_weight_norm, spectral_norm\n\nfrom commons import init_weights, get_padding\nfrom text import symbols, num_tones, num_languages\n\n\nclass DurationDiscriminator(nn.Module):  # vits2\n    def __init__(\n        self, in_channels, filter_channels, kernel_size, p_dropout, gin_channels=0\n    ):\n        super().__init__()\n\n        self.in_channels = in_channels\n        self.filter_channels = filter_channels\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.gin_channels = gin_channels\n\n        self.drop = nn.Dropout(p_dropout)\n        self.conv_1 = nn.Conv1d(\n            in_channels, filter_channels, kernel_size, padding=kernel_size // 2\n        )\n        self.norm_1 = modules.LayerNorm(filter_channels)\n        self.conv_2 = nn.Conv1d(\n            filter_channels, filter_channels, kernel_size, padding=kernel_size // 2\n        )\n        self.norm_2 = modules.LayerNorm(filter_channels)\n        self.dur_proj = nn.Conv1d(1, filter_channels, 1)\n\n        self.LSTM = nn.LSTM(\n            2 * filter_channels, filter_channels, batch_first=True, bidirectional=True\n        )\n\n        if gin_channels != 0:\n            self.cond = nn.Conv1d(gin_channels, in_channels, 1)\n\n        self.output_layer = nn.Sequential(\n            nn.Linear(2 * filter_channels, 1), nn.Sigmoid()\n        )\n\n    def forward_probability(self, x, dur):\n        dur = self.dur_proj(dur)\n        x = torch.cat([x, dur], dim=1)\n        x = x.transpose(1, 2)\n        x, _ = self.LSTM(x)\n        output_prob = self.output_layer(x)\n        return output_prob\n\n    def forward(self, x, x_mask, dur_r, dur_hat, g=None):\n        x = torch.detach(x)\n        if g is not None:\n            g = torch.detach(g)\n            x = x + self.cond(g)\n        x = self.conv_1(x * x_mask)\n        x = torch.relu(x)\n        x = self.norm_1(x)\n        x = self.drop(x)\n        x = self.conv_2(x * x_mask)\n        x = torch.relu(x)\n        x = self.norm_2(x)\n        x = self.drop(x)\n\n        output_probs = []\n        for dur in [dur_r, dur_hat]:\n            output_prob = self.forward_probability(x, dur)\n            output_probs.append(output_prob)\n\n        return output_probs\n\n\nclass TransformerCouplingBlock(nn.Module):\n    def __init__(\n        self,\n        channels,\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size,\n        p_dropout,\n        n_flows=4,\n        gin_channels=0,\n        share_parameter=False,\n    ):\n        super().__init__()\n        self.channels = channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.n_flows = n_flows\n        self.gin_channels = gin_channels\n\n        self.flows = nn.ModuleList()\n\n        self.wn = (\n            attentions.FFT(\n                hidden_channels,\n                filter_channels,\n                n_heads,\n                n_layers,\n                kernel_size,\n                p_dropout,\n                isflow=True,\n                gin_channels=self.gin_channels,\n            )\n            if share_parameter\n            else None\n        )\n\n        for i in range(n_flows):\n            self.flows.append(\n                modules.TransformerCouplingLayer(\n                    channels,\n                    hidden_channels,\n                    kernel_size,\n                    n_layers,\n                    n_heads,\n                    p_dropout,\n                    filter_channels,\n                    mean_only=True,\n                    wn_sharing_parameter=self.wn,\n                    gin_channels=self.gin_channels,\n                )\n            )\n            self.flows.append(modules.Flip())\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        if not reverse:\n            for flow in self.flows:\n                x, _ = flow(x, x_mask, g=g, reverse=reverse)\n        else:\n            for flow in reversed(self.flows):\n                x = flow(x, x_mask, g=g, reverse=reverse)\n        return x\n\n\nclass StochasticDurationPredictor(nn.Module):\n    def __init__(\n        self,\n        in_channels,\n        filter_channels,\n        kernel_size,\n        p_dropout,\n        n_flows=4,\n        gin_channels=0,\n    ):\n        super().__init__()\n        filter_channels = in_channels  # it needs to be removed from future version.\n        self.in_channels = in_channels\n        self.filter_channels = filter_channels\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.n_flows = n_flows\n        self.gin_channels = gin_channels\n\n        self.log_flow = modules.Log()\n        self.flows = nn.ModuleList()\n        self.flows.append(modules.ElementwiseAffine(2))\n        for i in range(n_flows):\n            self.flows.append(\n                modules.ConvFlow(2, filter_channels, kernel_size, n_layers=3)\n            )\n            self.flows.append(modules.Flip())\n\n        self.post_pre = nn.Conv1d(1, filter_channels, 1)\n        self.post_proj = nn.Conv1d(filter_channels, filter_channels, 1)\n        self.post_convs = modules.DDSConv(\n            filter_channels, kernel_size, n_layers=3, p_dropout=p_dropout\n        )\n        self.post_flows = nn.ModuleList()\n        self.post_flows.append(modules.ElementwiseAffine(2))\n        for i in range(4):\n            self.post_flows.append(\n                modules.ConvFlow(2, filter_channels, kernel_size, n_layers=3)\n            )\n            self.post_flows.append(modules.Flip())\n\n        self.pre = nn.Conv1d(in_channels, filter_channels, 1)\n        self.proj = nn.Conv1d(filter_channels, filter_channels, 1)\n        self.convs = modules.DDSConv(\n            filter_channels, kernel_size, n_layers=3, p_dropout=p_dropout\n        )\n        if gin_channels != 0:\n            self.cond = nn.Conv1d(gin_channels, filter_channels, 1)\n\n    def forward(self, x, x_mask, w=None, g=None, reverse=False, noise_scale=1.0):\n        x = torch.detach(x)\n        x = self.pre(x)\n        if g is not None:\n            g = torch.detach(g)\n            x = x + self.cond(g)\n        x = self.convs(x, x_mask)\n        x = self.proj(x) * x_mask\n\n        if not reverse:\n            flows = self.flows\n            assert w is not None\n\n            logdet_tot_q = 0\n            h_w = self.post_pre(w)\n            h_w = self.post_convs(h_w, x_mask)\n            h_w = self.post_proj(h_w) * x_mask\n            e_q = (\n                torch.randn(w.size(0), 2, w.size(2)).to(device=x.device, dtype=x.dtype)\n                * x_mask\n            )\n            z_q = e_q\n            for flow in self.post_flows:\n                z_q, logdet_q = flow(z_q, x_mask, g=(x + h_w))\n                logdet_tot_q += logdet_q\n            z_u, z1 = torch.split(z_q, [1, 1], 1)\n            u = torch.sigmoid(z_u) * x_mask\n            z0 = (w - u) * x_mask\n            logdet_tot_q += torch.sum(\n                (F.logsigmoid(z_u) + F.logsigmoid(-z_u)) * x_mask, [1, 2]\n            )\n            logq = (\n                torch.sum(-0.5 * (math.log(2 * math.pi) + (e_q**2)) * x_mask, [1, 2])\n                - logdet_tot_q\n            )\n\n            logdet_tot = 0\n            z0, logdet = self.log_flow(z0, x_mask)\n            logdet_tot += logdet\n            z = torch.cat([z0, z1], 1)\n            for flow in flows:\n                z, logdet = flow(z, x_mask, g=x, reverse=reverse)\n                logdet_tot = logdet_tot + logdet\n            nll = (\n                torch.sum(0.5 * (math.log(2 * math.pi) + (z**2)) * x_mask, [1, 2])\n                - logdet_tot\n            )\n            return nll + logq  # [b]\n        else:\n            flows = list(reversed(self.flows))\n            flows = flows[:-2] + [flows[-1]]  # remove a useless vflow\n            z = (\n                torch.randn(x.size(0), 2, x.size(2)).to(device=x.device, dtype=x.dtype)\n                * noise_scale\n            )\n            for flow in flows:\n                z = flow(z, x_mask, g=x, reverse=reverse)\n            z0, z1 = torch.split(z, [1, 1], 1)\n            logw = z0\n            return logw\n\n\nclass DurationPredictor(nn.Module):\n    def __init__(\n        self, in_channels, filter_channels, kernel_size, p_dropout, gin_channels=0\n    ):\n        super().__init__()\n\n        self.in_channels = in_channels\n        self.filter_channels = filter_channels\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.gin_channels = gin_channels\n\n        self.drop = nn.Dropout(p_dropout)\n        self.conv_1 = nn.Conv1d(\n            in_channels, filter_channels, kernel_size, padding=kernel_size // 2\n        )\n        self.norm_1 = modules.LayerNorm(filter_channels)\n        self.conv_2 = nn.Conv1d(\n            filter_channels, filter_channels, kernel_size, padding=kernel_size // 2\n        )\n        self.norm_2 = modules.LayerNorm(filter_channels)\n        self.proj = nn.Conv1d(filter_channels, 1, 1)\n\n        if gin_channels != 0:\n            self.cond = nn.Conv1d(gin_channels, in_channels, 1)\n\n    def forward(self, x, x_mask, g=None):\n        x = torch.detach(x)\n        if g is not None:\n            g = torch.detach(g)\n            x = x + self.cond(g)\n        x = self.conv_1(x * x_mask)\n        x = torch.relu(x)\n        x = self.norm_1(x)\n        x = self.drop(x)\n        x = self.conv_2(x * x_mask)\n        x = torch.relu(x)\n        x = self.norm_2(x)\n        x = self.drop(x)\n        x = self.proj(x * x_mask)\n        return x * x_mask\n\n\nclass Bottleneck(nn.Sequential):\n    def __init__(self, in_dim, hidden_dim):\n        c_fc1 = nn.Linear(in_dim, hidden_dim, bias=False)\n        c_fc2 = nn.Linear(in_dim, hidden_dim, bias=False)\n        super().__init__(*[c_fc1, c_fc2])\n\n\nclass Block(nn.Module):\n    def __init__(self, in_dim, hidden_dim) -> None:\n        super().__init__()\n        self.norm = nn.LayerNorm(in_dim)\n        self.mlp = MLP(in_dim, hidden_dim)\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        x = x + self.mlp(self.norm(x))\n        return x\n\n\nclass MLP(nn.Module):\n    def __init__(self, in_dim, hidden_dim):\n        super().__init__()\n        self.c_fc1 = nn.Linear(in_dim, hidden_dim, bias=False)\n        self.c_fc2 = nn.Linear(in_dim, hidden_dim, bias=False)\n        self.c_proj = nn.Linear(hidden_dim, in_dim, bias=False)\n\n    def forward(self, x: torch.Tensor):\n        x = F.silu(self.c_fc1(x)) * self.c_fc2(x)\n        x = self.c_proj(x)\n        return x\n\n\nclass TextEncoder(nn.Module):\n    def __init__(\n        self,\n        n_vocab,\n        out_channels,\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size,\n        p_dropout,\n        gin_channels=0,\n    ):\n        super().__init__()\n        self.n_vocab = n_vocab\n        self.out_channels = out_channels\n        self.hidden_channels = hidden_channels\n        self.filter_channels = filter_channels\n        self.n_heads = n_heads\n        self.n_layers = n_layers\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.gin_channels = gin_channels\n        self.emb = nn.Embedding(len(symbols), hidden_channels)\n        nn.init.normal_(self.emb.weight, 0.0, hidden_channels**-0.5)\n        self.tone_emb = nn.Embedding(num_tones, hidden_channels)\n        nn.init.normal_(self.tone_emb.weight, 0.0, hidden_channels**-0.5)\n        self.language_emb = nn.Embedding(num_languages, hidden_channels)\n        nn.init.normal_(self.language_emb.weight, 0.0, hidden_channels**-0.5)\n        self.bert_proj = nn.Conv1d(1024, hidden_channels, 1)\n        self.ja_bert_proj = nn.Conv1d(1024, hidden_channels, 1)\n        self.en_bert_proj = nn.Conv1d(1024, hidden_channels, 1)\n\n        self.encoder = attentions.Encoder(\n            hidden_channels,\n            filter_channels,\n            n_heads,\n            n_layers,\n            kernel_size,\n            p_dropout,\n            gin_channels=self.gin_channels,\n        )\n        self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n\n    def forward(self, x, x_lengths, tone, language, bert, ja_bert, en_bert, g=None):\n        bert_emb = self.bert_proj(bert).transpose(1, 2)\n        ja_bert_emb = self.ja_bert_proj(ja_bert).transpose(1, 2)\n        en_bert_emb = self.en_bert_proj(en_bert).transpose(1, 2)\n        x = (\n            self.emb(x)\n            + self.tone_emb(tone)\n            + self.language_emb(language)\n            + bert_emb\n            + ja_bert_emb\n            + en_bert_emb\n        ) * math.sqrt(\n            self.hidden_channels\n        )  # [b, t, h]\n        x = torch.transpose(x, 1, -1)  # [b, h, t]\n        x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(\n            x.dtype\n        )\n\n        x = self.encoder(x * x_mask, x_mask, g=g)\n        stats = self.proj(x) * x_mask\n\n        m, logs = torch.split(stats, self.out_channels, dim=1)\n        return x, m, logs, x_mask\n\n\nclass ResidualCouplingBlock(nn.Module):\n    def __init__(\n        self,\n        channels,\n        hidden_channels,\n        kernel_size,\n        dilation_rate,\n        n_layers,\n        n_flows=4,\n        gin_channels=0,\n    ):\n        super().__init__()\n        self.channels = channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.dilation_rate = dilation_rate\n        self.n_layers = n_layers\n        self.n_flows = n_flows\n        self.gin_channels = gin_channels\n\n        self.flows = nn.ModuleList()\n        for i in range(n_flows):\n            self.flows.append(\n                modules.ResidualCouplingLayer(\n                    channels,\n                    hidden_channels,\n                    kernel_size,\n                    dilation_rate,\n                    n_layers,\n                    gin_channels=gin_channels,\n                    mean_only=True,\n                )\n            )\n            self.flows.append(modules.Flip())\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        if not reverse:\n            for flow in self.flows:\n                x, _ = flow(x, x_mask, g=g, reverse=reverse)\n        else:\n            for flow in reversed(self.flows):\n                x = flow(x, x_mask, g=g, reverse=reverse)\n        return x\n\n\nclass PosteriorEncoder(nn.Module):\n    def __init__(\n        self,\n        in_channels,\n        out_channels,\n        hidden_channels,\n        kernel_size,\n        dilation_rate,\n        n_layers,\n        gin_channels=0,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n        self.out_channels = out_channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.dilation_rate = dilation_rate\n        self.n_layers = n_layers\n        self.gin_channels = gin_channels\n\n        self.pre = nn.Conv1d(in_channels, hidden_channels, 1)\n        self.enc = modules.WN(\n            hidden_channels,\n            kernel_size,\n            dilation_rate,\n            n_layers,\n            gin_channels=gin_channels,\n        )\n        self.proj = nn.Conv1d(hidden_channels, out_channels * 2, 1)\n\n    def forward(self, x, x_lengths, g=None):\n        x_mask = torch.unsqueeze(commons.sequence_mask(x_lengths, x.size(2)), 1).to(\n            x.dtype\n        )\n        x = self.pre(x) * x_mask\n        x = self.enc(x, x_mask, g=g)\n        stats = self.proj(x) * x_mask\n        m, logs = torch.split(stats, self.out_channels, dim=1)\n        z = (m + torch.randn_like(m) * torch.exp(logs)) * x_mask\n        return z, m, logs, x_mask\n\n\nclass Generator(torch.nn.Module):\n    def __init__(\n        self,\n        initial_channel,\n        resblock,\n        resblock_kernel_sizes,\n        resblock_dilation_sizes,\n        upsample_rates,\n        upsample_initial_channel,\n        upsample_kernel_sizes,\n        gin_channels=0,\n    ):\n        super(Generator, self).__init__()\n        self.num_kernels = len(resblock_kernel_sizes)\n        self.num_upsamples = len(upsample_rates)\n        self.conv_pre = Conv1d(\n            initial_channel, upsample_initial_channel, 7, 1, padding=3\n        )\n        resblock = modules.ResBlock1 if resblock == \"1\" else modules.ResBlock2\n\n        self.ups = nn.ModuleList()\n        for i, (u, k) in enumerate(zip(upsample_rates, upsample_kernel_sizes)):\n            self.ups.append(\n                weight_norm(\n                    ConvTranspose1d(\n                        upsample_initial_channel // (2**i),\n                        upsample_initial_channel // (2 ** (i + 1)),\n                        k,\n                        u,\n                        padding=(k - u) // 2,\n                    )\n                )\n            )\n\n        self.resblocks = nn.ModuleList()\n        for i in range(len(self.ups)):\n            ch = upsample_initial_channel // (2 ** (i + 1))\n            for j, (k, d) in enumerate(\n                zip(resblock_kernel_sizes, resblock_dilation_sizes)\n            ):\n                self.resblocks.append(resblock(ch, k, d))\n\n        self.conv_post = Conv1d(ch, 1, 7, 1, padding=3, bias=False)\n        self.ups.apply(init_weights)\n\n        if gin_channels != 0:\n            self.cond = nn.Conv1d(gin_channels, upsample_initial_channel, 1)\n\n    def forward(self, x, g=None):\n        x = self.conv_pre(x)\n        if g is not None:\n            x = x + self.cond(g)\n\n        for i in range(self.num_upsamples):\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            x = self.ups[i](x)\n            xs = None\n            for j in range(self.num_kernels):\n                if xs is None:\n                    xs = self.resblocks[i * self.num_kernels + j](x)\n                else:\n                    xs += self.resblocks[i * self.num_kernels + j](x)\n            x = xs / self.num_kernels\n        x = F.leaky_relu(x)\n        x = self.conv_post(x)\n        x = torch.tanh(x)\n\n        return x\n\n    def remove_weight_norm(self):\n        print(\"Removing weight norm...\")\n        for layer in self.ups:\n            remove_weight_norm(layer)\n        for layer in self.resblocks:\n            layer.remove_weight_norm()\n\n\nclass DiscriminatorP(torch.nn.Module):\n    def __init__(self, period, kernel_size=5, stride=3, use_spectral_norm=False):\n        super(DiscriminatorP, self).__init__()\n        self.period = period\n        self.use_spectral_norm = use_spectral_norm\n        norm_f = weight_norm if use_spectral_norm is False else spectral_norm\n        self.convs = nn.ModuleList(\n            [\n                norm_f(\n                    Conv2d(\n                        1,\n                        32,\n                        (kernel_size, 1),\n                        (stride, 1),\n                        padding=(get_padding(kernel_size, 1), 0),\n                    )\n                ),\n                norm_f(\n                    Conv2d(\n                        32,\n                        128,\n                        (kernel_size, 1),\n                        (stride, 1),\n                        padding=(get_padding(kernel_size, 1), 0),\n                    )\n                ),\n                norm_f(\n                    Conv2d(\n                        128,\n                        512,\n                        (kernel_size, 1),\n                        (stride, 1),\n                        padding=(get_padding(kernel_size, 1), 0),\n                    )\n                ),\n                norm_f(\n                    Conv2d(\n                        512,\n                        1024,\n                        (kernel_size, 1),\n                        (stride, 1),\n                        padding=(get_padding(kernel_size, 1), 0),\n                    )\n                ),\n                norm_f(\n                    Conv2d(\n                        1024,\n                        1024,\n                        (kernel_size, 1),\n                        1,\n                        padding=(get_padding(kernel_size, 1), 0),\n                    )\n                ),\n            ]\n        )\n        self.conv_post = norm_f(Conv2d(1024, 1, (3, 1), 1, padding=(1, 0)))\n\n    def forward(self, x):\n        fmap = []\n\n        # 1d to 2d\n        b, c, t = x.shape\n        if t % self.period != 0:  # pad first\n            n_pad = self.period - (t % self.period)\n            x = F.pad(x, (0, n_pad), \"reflect\")\n            t = t + n_pad\n        x = x.view(b, c, t // self.period, self.period)\n\n        for layer in self.convs:\n            x = layer(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass DiscriminatorS(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(DiscriminatorS, self).__init__()\n        norm_f = weight_norm if use_spectral_norm is False else spectral_norm\n        self.convs = nn.ModuleList(\n            [\n                norm_f(Conv1d(1, 16, 15, 1, padding=7)),\n                norm_f(Conv1d(16, 64, 41, 4, groups=4, padding=20)),\n                norm_f(Conv1d(64, 256, 41, 4, groups=16, padding=20)),\n                norm_f(Conv1d(256, 1024, 41, 4, groups=64, padding=20)),\n                norm_f(Conv1d(1024, 1024, 41, 4, groups=256, padding=20)),\n                norm_f(Conv1d(1024, 1024, 5, 1, padding=2)),\n            ]\n        )\n        self.conv_post = norm_f(Conv1d(1024, 1, 3, 1, padding=1))\n\n    def forward(self, x):\n        fmap = []\n\n        for layer in self.convs:\n            x = layer(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        fmap.append(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x, fmap\n\n\nclass MultiPeriodDiscriminator(torch.nn.Module):\n    def __init__(self, use_spectral_norm=False):\n        super(MultiPeriodDiscriminator, self).__init__()\n        periods = [2, 3, 5, 7, 11]\n\n        discs = [DiscriminatorS(use_spectral_norm=use_spectral_norm)]\n        discs = discs + [\n            DiscriminatorP(i, use_spectral_norm=use_spectral_norm) for i in periods\n        ]\n        self.discriminators = nn.ModuleList(discs)\n\n    def forward(self, y, y_hat):\n        y_d_rs = []\n        y_d_gs = []\n        fmap_rs = []\n        fmap_gs = []\n        for i, d in enumerate(self.discriminators):\n            y_d_r, fmap_r = d(y)\n            y_d_g, fmap_g = d(y_hat)\n            y_d_rs.append(y_d_r)\n            y_d_gs.append(y_d_g)\n            fmap_rs.append(fmap_r)\n            fmap_gs.append(fmap_g)\n\n        return y_d_rs, y_d_gs, fmap_rs, fmap_gs\n\n\nclass WavLMDiscriminator(nn.Module):\n    \"\"\"docstring for Discriminator.\"\"\"\n\n    def __init__(\n        self, slm_hidden=768, slm_layers=13, initial_channel=64, use_spectral_norm=False\n    ):\n        super(WavLMDiscriminator, self).__init__()\n        norm_f = weight_norm if use_spectral_norm == False else spectral_norm\n        self.pre = norm_f(\n            Conv1d(slm_hidden * slm_layers, initial_channel, 1, 1, padding=0)\n        )\n\n        self.convs = nn.ModuleList(\n            [\n                norm_f(\n                    nn.Conv1d(\n                        initial_channel, initial_channel * 2, kernel_size=5, padding=2\n                    )\n                ),\n                norm_f(\n                    nn.Conv1d(\n                        initial_channel * 2,\n                        initial_channel * 4,\n                        kernel_size=5,\n                        padding=2,\n                    )\n                ),\n                norm_f(\n                    nn.Conv1d(initial_channel * 4, initial_channel * 4, 5, 1, padding=2)\n                ),\n            ]\n        )\n\n        self.conv_post = norm_f(Conv1d(initial_channel * 4, 1, 3, 1, padding=1))\n\n    def forward(self, x):\n        x = self.pre(x)\n\n        fmap = []\n        for l in self.convs:\n            x = l(x)\n            x = F.leaky_relu(x, modules.LRELU_SLOPE)\n            fmap.append(x)\n        x = self.conv_post(x)\n        x = torch.flatten(x, 1, -1)\n\n        return x\n\n\nclass ReferenceEncoder(nn.Module):\n    \"\"\"\n    inputs --- [N, Ty/r, n_mels*r]  mels\n    outputs --- [N, ref_enc_gru_size]\n    \"\"\"\n\n    def __init__(self, spec_channels, gin_channels=0):\n        super().__init__()\n        self.spec_channels = spec_channels\n        ref_enc_filters = [32, 32, 64, 64, 128, 128]\n        K = len(ref_enc_filters)\n        filters = [1] + ref_enc_filters\n        convs = [\n            weight_norm(\n                nn.Conv2d(\n                    in_channels=filters[i],\n                    out_channels=filters[i + 1],\n                    kernel_size=(3, 3),\n                    stride=(2, 2),\n                    padding=(1, 1),\n                )\n            )\n            for i in range(K)\n        ]\n        self.convs = nn.ModuleList(convs)\n        # self.wns = nn.ModuleList([weight_norm(num_features=ref_enc_filters[i]) for i in range(K)]) # noqa: E501\n\n        out_channels = self.calculate_channels(spec_channels, 3, 2, 1, K)\n        self.gru = nn.GRU(\n            input_size=ref_enc_filters[-1] * out_channels,\n            hidden_size=256 // 2,\n            batch_first=True,\n        )\n        self.proj = nn.Linear(128, gin_channels)\n\n    def forward(self, inputs, mask=None):\n        N = inputs.size(0)\n        out = inputs.view(N, 1, -1, self.spec_channels)  # [N, 1, Ty, n_freqs]\n        for conv in self.convs:\n            out = conv(out)\n            # out = wn(out)\n            out = F.relu(out)  # [N, 128, Ty//2^K, n_mels//2^K]\n\n        out = out.transpose(1, 2)  # [N, Ty//2^K, 128, n_mels//2^K]\n        T = out.size(1)\n        N = out.size(0)\n        out = out.contiguous().view(N, T, -1)  # [N, Ty//2^K, 128*n_mels//2^K]\n\n        self.gru.flatten_parameters()\n        memory, out = self.gru(out)  # out --- [1, N, 128]\n\n        return self.proj(out.squeeze(0))\n\n    def calculate_channels(self, L, kernel_size, stride, pad, n_convs):\n        for i in range(n_convs):\n            L = (L - kernel_size + 2 * pad) // stride + 1\n        return L\n\n\nclass SynthesizerTrn(nn.Module):\n    \"\"\"\n    Synthesizer for Training\n    \"\"\"\n\n    def __init__(\n        self,\n        n_vocab,\n        spec_channels,\n        segment_size,\n        inter_channels,\n        hidden_channels,\n        filter_channels,\n        n_heads,\n        n_layers,\n        kernel_size,\n        p_dropout,\n        resblock,\n        resblock_kernel_sizes,\n        resblock_dilation_sizes,\n        upsample_rates,\n        upsample_initial_channel,\n        upsample_kernel_sizes,\n        n_speakers=256,\n        gin_channels=256,\n        use_sdp=True,\n        n_flow_layer=4,\n        n_layers_trans_flow=4,\n        flow_share_parameter=False,\n        use_transformer_flow=True,\n        **kwargs\n    ):\n        super().__init__()\n        self.n_vocab = n_vocab\n        self.spec_channels = spec_channels\n        self.inter_channels = inter_channels\n        self.hidden_channels = hidden_channels\n        self.filter_channels = filter_channels\n        self.n_heads = n_heads\n        self.n_layers = n_layers\n        self.kernel_size = kernel_size\n        self.p_dropout = p_dropout\n        self.resblock = resblock\n        self.resblock_kernel_sizes = resblock_kernel_sizes\n        self.resblock_dilation_sizes = resblock_dilation_sizes\n        self.upsample_rates = upsample_rates\n        self.upsample_initial_channel = upsample_initial_channel\n        self.upsample_kernel_sizes = upsample_kernel_sizes\n        self.segment_size = segment_size\n        self.n_speakers = n_speakers\n        self.gin_channels = gin_channels\n        self.n_layers_trans_flow = n_layers_trans_flow\n        self.use_spk_conditioned_encoder = kwargs.get(\n            \"use_spk_conditioned_encoder\", True\n        )\n        self.use_sdp = use_sdp\n        self.use_noise_scaled_mas = kwargs.get(\"use_noise_scaled_mas\", False)\n        self.mas_noise_scale_initial = kwargs.get(\"mas_noise_scale_initial\", 0.01)\n        self.noise_scale_delta = kwargs.get(\"noise_scale_delta\", 2e-6)\n        self.current_mas_noise_scale = self.mas_noise_scale_initial\n        if self.use_spk_conditioned_encoder and gin_channels > 0:\n            self.enc_gin_channels = gin_channels\n        self.enc_p = TextEncoder(\n            n_vocab,\n            inter_channels,\n            hidden_channels,\n            filter_channels,\n            n_heads,\n            n_layers,\n            kernel_size,\n            p_dropout,\n            gin_channels=self.enc_gin_channels,\n        )\n        self.dec = Generator(\n            inter_channels,\n            resblock,\n            resblock_kernel_sizes,\n            resblock_dilation_sizes,\n            upsample_rates,\n            upsample_initial_channel,\n            upsample_kernel_sizes,\n            gin_channels=gin_channels,\n        )\n        self.enc_q = PosteriorEncoder(\n            spec_channels,\n            inter_channels,\n            hidden_channels,\n            5,\n            1,\n            16,\n            gin_channels=gin_channels,\n        )\n        if use_transformer_flow:\n            self.flow = TransformerCouplingBlock(\n                inter_channels,\n                hidden_channels,\n                filter_channels,\n                n_heads,\n                n_layers_trans_flow,\n                5,\n                p_dropout,\n                n_flow_layer,\n                gin_channels=gin_channels,\n                share_parameter=flow_share_parameter,\n            )\n        else:\n            self.flow = ResidualCouplingBlock(\n                inter_channels,\n                hidden_channels,\n                5,\n                1,\n                n_flow_layer,\n                gin_channels=gin_channels,\n            )\n        self.sdp = StochasticDurationPredictor(\n            hidden_channels, 192, 3, 0.5, 4, gin_channels=gin_channels\n        )\n        self.dp = DurationPredictor(\n            hidden_channels, 256, 3, 0.5, gin_channels=gin_channels\n        )\n\n        if n_speakers >= 1:\n            self.emb_g = nn.Embedding(n_speakers, gin_channels)\n        else:\n            self.ref_enc = ReferenceEncoder(spec_channels, gin_channels)\n\n    def forward(\n        self,\n        x,\n        x_lengths,\n        y,\n        y_lengths,\n        sid,\n        tone,\n        language,\n        bert,\n        ja_bert,\n        en_bert,\n    ):\n        if self.n_speakers > 0:\n            g = self.emb_g(sid).unsqueeze(-1)  # [b, h, 1]\n        else:\n            g = self.ref_enc(y.transpose(1, 2)).unsqueeze(-1)\n        x, m_p, logs_p, x_mask = self.enc_p(\n            x, x_lengths, tone, language, bert, ja_bert, en_bert, g=g\n        )\n        z, m_q, logs_q, y_mask = self.enc_q(y, y_lengths, g=g)\n        z_p = self.flow(z, y_mask, g=g)\n\n        with torch.no_grad():\n            # negative cross-entropy\n            s_p_sq_r = torch.exp(-2 * logs_p)  # [b, d, t]\n            neg_cent1 = torch.sum(\n                -0.5 * math.log(2 * math.pi) - logs_p, [1], keepdim=True\n            )  # [b, 1, t_s]\n            neg_cent2 = torch.matmul(\n                -0.5 * (z_p**2).transpose(1, 2), s_p_sq_r\n            )  # [b, t_t, d] x [b, d, t_s] = [b, t_t, t_s]\n            neg_cent3 = torch.matmul(\n                z_p.transpose(1, 2), (m_p * s_p_sq_r)\n            )  # [b, t_t, d] x [b, d, t_s] = [b, t_t, t_s]\n            neg_cent4 = torch.sum(\n                -0.5 * (m_p**2) * s_p_sq_r, [1], keepdim=True\n            )  # [b, 1, t_s]\n            neg_cent = neg_cent1 + neg_cent2 + neg_cent3 + neg_cent4\n            if self.use_noise_scaled_mas:\n                epsilon = (\n                    torch.std(neg_cent)\n                    * torch.randn_like(neg_cent)\n                    * self.current_mas_noise_scale\n                )\n                neg_cent = neg_cent + epsilon\n\n            attn_mask = torch.unsqueeze(x_mask, 2) * torch.unsqueeze(y_mask, -1)\n            attn = (\n                monotonic_align.maximum_path(neg_cent, attn_mask.squeeze(1))\n                .unsqueeze(1)\n                .detach()\n            )\n\n        w = attn.sum(2)\n\n        l_length_sdp = self.sdp(x, x_mask, w, g=g)\n        l_length_sdp = l_length_sdp / torch.sum(x_mask)\n\n        logw_ = torch.log(w + 1e-6) * x_mask\n        logw = self.dp(x, x_mask, g=g)\n        logw_sdp = self.sdp(x, x_mask, g=g, reverse=True, noise_scale=1.0)\n        l_length_dp = torch.sum((logw - logw_) ** 2, [1, 2]) / torch.sum(\n            x_mask\n        )  # for averaging\n        l_length_sdp += torch.sum((logw_sdp - logw_) ** 2, [1, 2]) / torch.sum(x_mask)\n\n        l_length = l_length_dp + l_length_sdp\n\n        # expand prior\n        m_p = torch.matmul(attn.squeeze(1), m_p.transpose(1, 2)).transpose(1, 2)\n        logs_p = torch.matmul(attn.squeeze(1), logs_p.transpose(1, 2)).transpose(1, 2)\n\n        z_slice, ids_slice = commons.rand_slice_segments(\n            z, y_lengths, self.segment_size\n        )\n        o = self.dec(z_slice, g=g)\n        return (\n            o,\n            l_length,\n            attn,\n            ids_slice,\n            x_mask,\n            y_mask,\n            (z, z_p, m_p, logs_p, m_q, logs_q),\n            (x, logw, logw_, logw_sdp),\n            g,\n        )\n\n    def infer(\n        self,\n        x,\n        x_lengths,\n        sid,\n        tone,\n        language,\n        bert,\n        ja_bert,\n        en_bert,\n        noise_scale=0.667,\n        length_scale=1,\n        noise_scale_w=0.8,\n        max_len=None,\n        sdp_ratio=0,\n        y=None,\n    ):\n        # x, m_p, logs_p, x_mask = self.enc_p(x, x_lengths, tone, language, bert)\n        # g = self.gst(y)\n        if self.n_speakers > 0:\n            g = self.emb_g(sid).unsqueeze(-1)  # [b, h, 1]\n        else:\n            g = self.ref_enc(y.transpose(1, 2)).unsqueeze(-1)\n        x, m_p, logs_p, x_mask = self.enc_p(\n            x, x_lengths, tone, language, bert, ja_bert, en_bert, g=g\n        )\n        logw = self.sdp(x, x_mask, g=g, reverse=True, noise_scale=noise_scale_w) * (\n            sdp_ratio\n        ) + self.dp(x, x_mask, g=g) * (1 - sdp_ratio)\n        w = torch.exp(logw) * x_mask * length_scale\n        w_ceil = torch.ceil(w)\n        y_lengths = torch.clamp_min(torch.sum(w_ceil, [1, 2]), 1).long()\n        y_mask = torch.unsqueeze(commons.sequence_mask(y_lengths, None), 1).to(\n            x_mask.dtype\n        )\n        attn_mask = torch.unsqueeze(x_mask, 2) * torch.unsqueeze(y_mask, -1)\n        attn = commons.generate_path(w_ceil, attn_mask)\n\n        m_p = torch.matmul(attn.squeeze(1), m_p.transpose(1, 2)).transpose(\n            1, 2\n        )  # [b, t', t], [b, t, d] -> [b, d, t']\n        logs_p = torch.matmul(attn.squeeze(1), logs_p.transpose(1, 2)).transpose(\n            1, 2\n        )  # [b, t', t], [b, t, d] -> [b, d, t']\n\n        z_p = m_p + torch.randn_like(m_p) * torch.exp(logs_p) * noise_scale\n        z = self.flow(z_p, y_mask, g=g, reverse=True)\n        o = self.dec((z * y_mask)[:, :, :max_len], g=g)\n        return o, attn, y_mask, (z, z_p, m_p, logs_p)\n"
        },
        {
          "name": "modules.py",
          "type": "blob",
          "size": 18.0126953125,
          "content": "import math\nimport torch\nfrom torch import nn\nfrom torch.nn import functional as F\n\nfrom torch.nn import Conv1d\nfrom torch.nn.utils import weight_norm, remove_weight_norm\n\nimport commons\nfrom commons import init_weights, get_padding\nfrom transforms import piecewise_rational_quadratic_transform\nfrom attentions import Encoder\n\nLRELU_SLOPE = 0.1\n\n\nclass LayerNorm(nn.Module):\n    def __init__(self, channels, eps=1e-5):\n        super().__init__()\n        self.channels = channels\n        self.eps = eps\n\n        self.gamma = nn.Parameter(torch.ones(channels))\n        self.beta = nn.Parameter(torch.zeros(channels))\n\n    def forward(self, x):\n        x = x.transpose(1, -1)\n        x = F.layer_norm(x, (self.channels,), self.gamma, self.beta, self.eps)\n        return x.transpose(1, -1)\n\n\nclass ConvReluNorm(nn.Module):\n    def __init__(\n        self,\n        in_channels,\n        hidden_channels,\n        out_channels,\n        kernel_size,\n        n_layers,\n        p_dropout,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n        self.hidden_channels = hidden_channels\n        self.out_channels = out_channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.p_dropout = p_dropout\n        assert n_layers > 1, \"Number of layers should be larger than 0.\"\n\n        self.conv_layers = nn.ModuleList()\n        self.norm_layers = nn.ModuleList()\n        self.conv_layers.append(\n            nn.Conv1d(\n                in_channels, hidden_channels, kernel_size, padding=kernel_size // 2\n            )\n        )\n        self.norm_layers.append(LayerNorm(hidden_channels))\n        self.relu_drop = nn.Sequential(nn.ReLU(), nn.Dropout(p_dropout))\n        for _ in range(n_layers - 1):\n            self.conv_layers.append(\n                nn.Conv1d(\n                    hidden_channels,\n                    hidden_channels,\n                    kernel_size,\n                    padding=kernel_size // 2,\n                )\n            )\n            self.norm_layers.append(LayerNorm(hidden_channels))\n        self.proj = nn.Conv1d(hidden_channels, out_channels, 1)\n        self.proj.weight.data.zero_()\n        self.proj.bias.data.zero_()\n\n    def forward(self, x, x_mask):\n        x_org = x\n        for i in range(self.n_layers):\n            x = self.conv_layers[i](x * x_mask)\n            x = self.norm_layers[i](x)\n            x = self.relu_drop(x)\n        x = x_org + self.proj(x)\n        return x * x_mask\n\n\nclass DDSConv(nn.Module):\n    \"\"\"\n    Dilated and Depth-Separable Convolution\n    \"\"\"\n\n    def __init__(self, channels, kernel_size, n_layers, p_dropout=0.0):\n        super().__init__()\n        self.channels = channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.p_dropout = p_dropout\n\n        self.drop = nn.Dropout(p_dropout)\n        self.convs_sep = nn.ModuleList()\n        self.convs_1x1 = nn.ModuleList()\n        self.norms_1 = nn.ModuleList()\n        self.norms_2 = nn.ModuleList()\n        for i in range(n_layers):\n            dilation = kernel_size**i\n            padding = (kernel_size * dilation - dilation) // 2\n            self.convs_sep.append(\n                nn.Conv1d(\n                    channels,\n                    channels,\n                    kernel_size,\n                    groups=channels,\n                    dilation=dilation,\n                    padding=padding,\n                )\n            )\n            self.convs_1x1.append(nn.Conv1d(channels, channels, 1))\n            self.norms_1.append(LayerNorm(channels))\n            self.norms_2.append(LayerNorm(channels))\n\n    def forward(self, x, x_mask, g=None):\n        if g is not None:\n            x = x + g\n        for i in range(self.n_layers):\n            y = self.convs_sep[i](x * x_mask)\n            y = self.norms_1[i](y)\n            y = F.gelu(y)\n            y = self.convs_1x1[i](y)\n            y = self.norms_2[i](y)\n            y = F.gelu(y)\n            y = self.drop(y)\n            x = x + y\n        return x * x_mask\n\n\nclass WN(torch.nn.Module):\n    def __init__(\n        self,\n        hidden_channels,\n        kernel_size,\n        dilation_rate,\n        n_layers,\n        gin_channels=0,\n        p_dropout=0,\n    ):\n        super(WN, self).__init__()\n        assert kernel_size % 2 == 1\n        self.hidden_channels = hidden_channels\n        self.kernel_size = (kernel_size,)\n        self.dilation_rate = dilation_rate\n        self.n_layers = n_layers\n        self.gin_channels = gin_channels\n        self.p_dropout = p_dropout\n\n        self.in_layers = torch.nn.ModuleList()\n        self.res_skip_layers = torch.nn.ModuleList()\n        self.drop = nn.Dropout(p_dropout)\n\n        if gin_channels != 0:\n            cond_layer = torch.nn.Conv1d(\n                gin_channels, 2 * hidden_channels * n_layers, 1\n            )\n            self.cond_layer = torch.nn.utils.weight_norm(cond_layer, name=\"weight\")\n\n        for i in range(n_layers):\n            dilation = dilation_rate**i\n            padding = int((kernel_size * dilation - dilation) / 2)\n            in_layer = torch.nn.Conv1d(\n                hidden_channels,\n                2 * hidden_channels,\n                kernel_size,\n                dilation=dilation,\n                padding=padding,\n            )\n            in_layer = torch.nn.utils.weight_norm(in_layer, name=\"weight\")\n            self.in_layers.append(in_layer)\n\n            # last one is not necessary\n            if i < n_layers - 1:\n                res_skip_channels = 2 * hidden_channels\n            else:\n                res_skip_channels = hidden_channels\n\n            res_skip_layer = torch.nn.Conv1d(hidden_channels, res_skip_channels, 1)\n            res_skip_layer = torch.nn.utils.weight_norm(res_skip_layer, name=\"weight\")\n            self.res_skip_layers.append(res_skip_layer)\n\n    def forward(self, x, x_mask, g=None, **kwargs):\n        output = torch.zeros_like(x)\n        n_channels_tensor = torch.IntTensor([self.hidden_channels])\n\n        if g is not None:\n            g = self.cond_layer(g)\n\n        for i in range(self.n_layers):\n            x_in = self.in_layers[i](x)\n            if g is not None:\n                cond_offset = i * 2 * self.hidden_channels\n                g_l = g[:, cond_offset : cond_offset + 2 * self.hidden_channels, :]\n            else:\n                g_l = torch.zeros_like(x_in)\n\n            acts = commons.fused_add_tanh_sigmoid_multiply(x_in, g_l, n_channels_tensor)\n            acts = self.drop(acts)\n\n            res_skip_acts = self.res_skip_layers[i](acts)\n            if i < self.n_layers - 1:\n                res_acts = res_skip_acts[:, : self.hidden_channels, :]\n                x = (x + res_acts) * x_mask\n                output = output + res_skip_acts[:, self.hidden_channels :, :]\n            else:\n                output = output + res_skip_acts\n        return output * x_mask\n\n    def remove_weight_norm(self):\n        if self.gin_channels != 0:\n            torch.nn.utils.remove_weight_norm(self.cond_layer)\n        for l in self.in_layers:\n            torch.nn.utils.remove_weight_norm(l)\n        for l in self.res_skip_layers:\n            torch.nn.utils.remove_weight_norm(l)\n\n\nclass ResBlock1(torch.nn.Module):\n    def __init__(self, channels, kernel_size=3, dilation=(1, 3, 5)):\n        super(ResBlock1, self).__init__()\n        self.convs1 = nn.ModuleList(\n            [\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=dilation[0],\n                        padding=get_padding(kernel_size, dilation[0]),\n                    )\n                ),\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=dilation[1],\n                        padding=get_padding(kernel_size, dilation[1]),\n                    )\n                ),\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=dilation[2],\n                        padding=get_padding(kernel_size, dilation[2]),\n                    )\n                ),\n            ]\n        )\n        self.convs1.apply(init_weights)\n\n        self.convs2 = nn.ModuleList(\n            [\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=1,\n                        padding=get_padding(kernel_size, 1),\n                    )\n                ),\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=1,\n                        padding=get_padding(kernel_size, 1),\n                    )\n                ),\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=1,\n                        padding=get_padding(kernel_size, 1),\n                    )\n                ),\n            ]\n        )\n        self.convs2.apply(init_weights)\n\n    def forward(self, x, x_mask=None):\n        for c1, c2 in zip(self.convs1, self.convs2):\n            xt = F.leaky_relu(x, LRELU_SLOPE)\n            if x_mask is not None:\n                xt = xt * x_mask\n            xt = c1(xt)\n            xt = F.leaky_relu(xt, LRELU_SLOPE)\n            if x_mask is not None:\n                xt = xt * x_mask\n            xt = c2(xt)\n            x = xt + x\n        if x_mask is not None:\n            x = x * x_mask\n        return x\n\n    def remove_weight_norm(self):\n        for l in self.convs1:\n            remove_weight_norm(l)\n        for l in self.convs2:\n            remove_weight_norm(l)\n\n\nclass ResBlock2(torch.nn.Module):\n    def __init__(self, channels, kernel_size=3, dilation=(1, 3)):\n        super(ResBlock2, self).__init__()\n        self.convs = nn.ModuleList(\n            [\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=dilation[0],\n                        padding=get_padding(kernel_size, dilation[0]),\n                    )\n                ),\n                weight_norm(\n                    Conv1d(\n                        channels,\n                        channels,\n                        kernel_size,\n                        1,\n                        dilation=dilation[1],\n                        padding=get_padding(kernel_size, dilation[1]),\n                    )\n                ),\n            ]\n        )\n        self.convs.apply(init_weights)\n\n    def forward(self, x, x_mask=None):\n        for c in self.convs:\n            xt = F.leaky_relu(x, LRELU_SLOPE)\n            if x_mask is not None:\n                xt = xt * x_mask\n            xt = c(xt)\n            x = xt + x\n        if x_mask is not None:\n            x = x * x_mask\n        return x\n\n    def remove_weight_norm(self):\n        for l in self.convs:\n            remove_weight_norm(l)\n\n\nclass Log(nn.Module):\n    def forward(self, x, x_mask, reverse=False, **kwargs):\n        if not reverse:\n            y = torch.log(torch.clamp_min(x, 1e-5)) * x_mask\n            logdet = torch.sum(-y, [1, 2])\n            return y, logdet\n        else:\n            x = torch.exp(x) * x_mask\n            return x\n\n\nclass Flip(nn.Module):\n    def forward(self, x, *args, reverse=False, **kwargs):\n        x = torch.flip(x, [1])\n        if not reverse:\n            logdet = torch.zeros(x.size(0)).to(dtype=x.dtype, device=x.device)\n            return x, logdet\n        else:\n            return x\n\n\nclass ElementwiseAffine(nn.Module):\n    def __init__(self, channels):\n        super().__init__()\n        self.channels = channels\n        self.m = nn.Parameter(torch.zeros(channels, 1))\n        self.logs = nn.Parameter(torch.zeros(channels, 1))\n\n    def forward(self, x, x_mask, reverse=False, **kwargs):\n        if not reverse:\n            y = self.m + torch.exp(self.logs) * x\n            y = y * x_mask\n            logdet = torch.sum(self.logs * x_mask, [1, 2])\n            return y, logdet\n        else:\n            x = (x - self.m) * torch.exp(-self.logs) * x_mask\n            return x\n\n\nclass ResidualCouplingLayer(nn.Module):\n    def __init__(\n        self,\n        channels,\n        hidden_channels,\n        kernel_size,\n        dilation_rate,\n        n_layers,\n        p_dropout=0,\n        gin_channels=0,\n        mean_only=False,\n    ):\n        assert channels % 2 == 0, \"channels should be divisible by 2\"\n        super().__init__()\n        self.channels = channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.dilation_rate = dilation_rate\n        self.n_layers = n_layers\n        self.half_channels = channels // 2\n        self.mean_only = mean_only\n\n        self.pre = nn.Conv1d(self.half_channels, hidden_channels, 1)\n        self.enc = WN(\n            hidden_channels,\n            kernel_size,\n            dilation_rate,\n            n_layers,\n            p_dropout=p_dropout,\n            gin_channels=gin_channels,\n        )\n        self.post = nn.Conv1d(hidden_channels, self.half_channels * (2 - mean_only), 1)\n        self.post.weight.data.zero_()\n        self.post.bias.data.zero_()\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        x0, x1 = torch.split(x, [self.half_channels] * 2, 1)\n        h = self.pre(x0) * x_mask\n        h = self.enc(h, x_mask, g=g)\n        stats = self.post(h) * x_mask\n        if not self.mean_only:\n            m, logs = torch.split(stats, [self.half_channels] * 2, 1)\n        else:\n            m = stats\n            logs = torch.zeros_like(m)\n\n        if not reverse:\n            x1 = m + x1 * torch.exp(logs) * x_mask\n            x = torch.cat([x0, x1], 1)\n            logdet = torch.sum(logs, [1, 2])\n            return x, logdet\n        else:\n            x1 = (x1 - m) * torch.exp(-logs) * x_mask\n            x = torch.cat([x0, x1], 1)\n            return x\n\n\nclass ConvFlow(nn.Module):\n    def __init__(\n        self,\n        in_channels,\n        filter_channels,\n        kernel_size,\n        n_layers,\n        num_bins=10,\n        tail_bound=5.0,\n    ):\n        super().__init__()\n        self.in_channels = in_channels\n        self.filter_channels = filter_channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.num_bins = num_bins\n        self.tail_bound = tail_bound\n        self.half_channels = in_channels // 2\n\n        self.pre = nn.Conv1d(self.half_channels, filter_channels, 1)\n        self.convs = DDSConv(filter_channels, kernel_size, n_layers, p_dropout=0.0)\n        self.proj = nn.Conv1d(\n            filter_channels, self.half_channels * (num_bins * 3 - 1), 1\n        )\n        self.proj.weight.data.zero_()\n        self.proj.bias.data.zero_()\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        x0, x1 = torch.split(x, [self.half_channels] * 2, 1)\n        h = self.pre(x0)\n        h = self.convs(h, x_mask, g=g)\n        h = self.proj(h) * x_mask\n\n        b, c, t = x0.shape\n        h = h.reshape(b, c, -1, t).permute(0, 1, 3, 2)  # [b, cx?, t] -> [b, c, t, ?]\n\n        unnormalized_widths = h[..., : self.num_bins] / math.sqrt(self.filter_channels)\n        unnormalized_heights = h[..., self.num_bins : 2 * self.num_bins] / math.sqrt(\n            self.filter_channels\n        )\n        unnormalized_derivatives = h[..., 2 * self.num_bins :]\n\n        x1, logabsdet = piecewise_rational_quadratic_transform(\n            x1,\n            unnormalized_widths,\n            unnormalized_heights,\n            unnormalized_derivatives,\n            inverse=reverse,\n            tails=\"linear\",\n            tail_bound=self.tail_bound,\n        )\n\n        x = torch.cat([x0, x1], 1) * x_mask\n        logdet = torch.sum(logabsdet * x_mask, [1, 2])\n        if not reverse:\n            return x, logdet\n        else:\n            return x\n\n\nclass TransformerCouplingLayer(nn.Module):\n    def __init__(\n        self,\n        channels,\n        hidden_channels,\n        kernel_size,\n        n_layers,\n        n_heads,\n        p_dropout=0,\n        filter_channels=0,\n        mean_only=False,\n        wn_sharing_parameter=None,\n        gin_channels=0,\n    ):\n        assert channels % 2 == 0, \"channels should be divisible by 2\"\n        super().__init__()\n        self.channels = channels\n        self.hidden_channels = hidden_channels\n        self.kernel_size = kernel_size\n        self.n_layers = n_layers\n        self.half_channels = channels // 2\n        self.mean_only = mean_only\n\n        self.pre = nn.Conv1d(self.half_channels, hidden_channels, 1)\n        self.enc = (\n            Encoder(\n                hidden_channels,\n                filter_channels,\n                n_heads,\n                n_layers,\n                kernel_size,\n                p_dropout,\n                isflow=True,\n                gin_channels=gin_channels,\n            )\n            if wn_sharing_parameter is None\n            else wn_sharing_parameter\n        )\n        self.post = nn.Conv1d(hidden_channels, self.half_channels * (2 - mean_only), 1)\n        self.post.weight.data.zero_()\n        self.post.bias.data.zero_()\n\n    def forward(self, x, x_mask, g=None, reverse=False):\n        x0, x1 = torch.split(x, [self.half_channels] * 2, 1)\n        h = self.pre(x0) * x_mask\n        h = self.enc(h, x_mask, g=g)\n        stats = self.post(h) * x_mask\n        if not self.mean_only:\n            m, logs = torch.split(stats, [self.half_channels] * 2, 1)\n        else:\n            m = stats\n            logs = torch.zeros_like(m)\n\n        if not reverse:\n            x1 = m + x1 * torch.exp(logs) * x_mask\n            x = torch.cat([x0, x1], 1)\n            logdet = torch.sum(logs, [1, 2])\n            return x, logdet\n        else:\n            x1 = (x1 - m) * torch.exp(-logs) * x_mask\n            x = torch.cat([x0, x1], 1)\n            return x\n"
        },
        {
          "name": "monotonic_align",
          "type": "tree",
          "content": null
        },
        {
          "name": "oldVersion",
          "type": "tree",
          "content": null
        },
        {
          "name": "onnx_infer.py",
          "type": "blob",
          "size": 1.2890625,
          "content": "﻿from onnx_modules.V220_OnnxInference import OnnxInferenceSession\nimport numpy as np\n\nSession = OnnxInferenceSession(\n    {\n        \"enc\": \"onnx/BertVits2.2PT/BertVits2.2PT_enc_p.onnx\",\n        \"emb_g\": \"onnx/BertVits2.2PT/BertVits2.2PT_emb.onnx\",\n        \"dp\": \"onnx/BertVits2.2PT/BertVits2.2PT_dp.onnx\",\n        \"sdp\": \"onnx/BertVits2.2PT/BertVits2.2PT_sdp.onnx\",\n        \"flow\": \"onnx/BertVits2.2PT/BertVits2.2PT_flow.onnx\",\n        \"dec\": \"onnx/BertVits2.2PT/BertVits2.2PT_dec.onnx\",\n    },\n    Providers=[\"CPUExecutionProvider\"],\n)\n\n# 这里的输入和原版是一样的，只需要在原版预处理结果出来之后加上.numpy()即可\nx = np.array(\n    [\n        0,\n        97,\n        0,\n        8,\n        0,\n        78,\n        0,\n        8,\n        0,\n        76,\n        0,\n        37,\n        0,\n        40,\n        0,\n        97,\n        0,\n        8,\n        0,\n        23,\n        0,\n        8,\n        0,\n        74,\n        0,\n        26,\n        0,\n        104,\n        0,\n    ]\n)\ntone = np.zeros_like(x)\nlanguage = np.zeros_like(x)\nsid = np.array([0])\nbert = np.random.randn(x.shape[0], 1024)\nja_bert = np.random.randn(x.shape[0], 1024)\nen_bert = np.random.randn(x.shape[0], 1024)\nemo = np.random.randn(512, 1)\n\naudio = Session(x, tone, language, bert, ja_bert, en_bert, emo, sid)\n\nprint(audio)\n"
        },
        {
          "name": "onnx_modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "preprocess_text.py",
          "type": "blob",
          "size": 5.09765625,
          "content": "import json\nfrom collections import defaultdict\nfrom random import shuffle\nfrom typing import Optional\nimport os\n\nfrom tqdm import tqdm\nimport click\nfrom text.cleaner import clean_text\nfrom config import config\nfrom infer import latest_version\n\npreprocess_text_config = config.preprocess_text_config\n\n\n@click.command()\n@click.option(\n    \"--transcription-path\",\n    default=preprocess_text_config.transcription_path,\n    type=click.Path(exists=True, file_okay=True, dir_okay=False),\n)\n@click.option(\"--cleaned-path\", default=preprocess_text_config.cleaned_path)\n@click.option(\"--train-path\", default=preprocess_text_config.train_path)\n@click.option(\"--val-path\", default=preprocess_text_config.val_path)\n@click.option(\n    \"--config-path\",\n    default=preprocess_text_config.config_path,\n    type=click.Path(exists=True, file_okay=True, dir_okay=False),\n)\n@click.option(\"--val-per-lang\", default=preprocess_text_config.val_per_lang)\n@click.option(\"--max-val-total\", default=preprocess_text_config.max_val_total)\n@click.option(\"--clean/--no-clean\", default=preprocess_text_config.clean)\n@click.option(\"-y\", \"--yml_config\")\ndef preprocess(\n    transcription_path: str,\n    cleaned_path: Optional[str],\n    train_path: str,\n    val_path: str,\n    config_path: str,\n    val_per_lang: int,\n    max_val_total: int,\n    clean: bool,\n    yml_config: str,  # 这个不要删\n):\n    if cleaned_path == \"\" or cleaned_path is None:\n        cleaned_path = transcription_path + \".cleaned\"\n\n    if clean:\n        with open(cleaned_path, \"w\", encoding=\"utf-8\") as out_file:\n            with open(transcription_path, \"r\", encoding=\"utf-8\") as trans_file:\n                lines = trans_file.readlines()\n                # print(lines, ' ', len(lines))\n                if len(lines) != 0:\n                    for line in tqdm(lines):\n                        try:\n                            utt, spk, language, text = line.strip().split(\"|\")\n                            norm_text, phones, tones, word2ph = clean_text(\n                                text, language\n                            )\n                            out_file.write(\n                                \"{}|{}|{}|{}|{}|{}|{}\\n\".format(\n                                    utt,\n                                    spk,\n                                    language,\n                                    norm_text,\n                                    \" \".join(phones),\n                                    \" \".join([str(i) for i in tones]),\n                                    \" \".join([str(i) for i in word2ph]),\n                                )\n                            )\n                        except Exception as e:\n                            print(line)\n                            print(f\"生成训练集和验证集时发生错误！, 详细信息:\\n{e}\")\n\n    transcription_path = cleaned_path\n    spk_utt_map = defaultdict(list)\n    spk_id_map = {}\n    current_sid = 0\n\n    with open(transcription_path, \"r\", encoding=\"utf-8\") as f:\n        audioPaths = set()\n        countSame = 0\n        countNotFound = 0\n        for line in f.readlines():\n            utt, spk, language, text, phones, tones, word2ph = line.strip().split(\"|\")\n            if utt in audioPaths:\n                # 过滤数据集错误：相同的音频匹配多个文本，导致后续bert出问题\n                print(f\"重复音频文本：{line}\")\n                countSame += 1\n                continue\n            if not os.path.isfile(utt):\n                # 过滤数据集错误：不存在对应音频\n                print(f\"没有找到对应的音频：{utt}\")\n                countNotFound += 1\n                continue\n            audioPaths.add(utt)\n            spk_utt_map[language].append(line)\n            if spk not in spk_id_map.keys():\n                spk_id_map[spk] = current_sid\n                current_sid += 1\n        print(f\"总重复音频数：{countSame}，总未找到的音频数:{countNotFound}\")\n\n    train_list = []\n    val_list = []\n\n    for spk, utts in spk_utt_map.items():\n        shuffle(utts)\n        val_list += utts[:val_per_lang]\n        train_list += utts[val_per_lang:]\n\n    shuffle(val_list)\n    if len(val_list) > max_val_total:\n        train_list += val_list[max_val_total:]\n        val_list = val_list[:max_val_total]\n\n    with open(train_path, \"w\", encoding=\"utf-8\") as f:\n        for line in train_list:\n            f.write(line)\n\n    with open(val_path, \"w\", encoding=\"utf-8\") as f:\n        for line in val_list:\n            f.write(line)\n\n    json_config = json.load(open(config_path, encoding=\"utf-8\"))\n    json_config[\"data\"][\"spk2id\"] = spk_id_map\n    json_config[\"data\"][\"n_speakers\"] = len(spk_id_map)\n    # 新增写入：写入训练版本、数据集路径\n    json_config[\"version\"] = latest_version\n    json_config[\"data\"][\"training_files\"] = os.path.normpath(train_path).replace(\n        \"\\\\\", \"/\"\n    )\n    json_config[\"data\"][\"validation_files\"] = os.path.normpath(val_path).replace(\n        \"\\\\\", \"/\"\n    )\n    with open(config_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(json_config, f, indent=2, ensure_ascii=False)\n    print(\"训练集和验证集生成完成！\")\n\n\nif __name__ == \"__main__\":\n    preprocess()\n"
        },
        {
          "name": "re_matching.py",
          "type": "blob",
          "size": 2.75390625,
          "content": "import re\n\n\ndef extract_language_and_text_updated(speaker, dialogue):\n    # 使用正则表达式匹配<语言>标签和其后的文本\n    pattern_language_text = r\"<(\\S+?)>([^<]+)\"\n    matches = re.findall(pattern_language_text, dialogue, re.DOTALL)\n    speaker = speaker[1:-1]\n    # 清理文本：去除两边的空白字符\n    matches_cleaned = [(lang.upper(), text.strip()) for lang, text in matches]\n    matches_cleaned.append(speaker)\n    return matches_cleaned\n\n\ndef validate_text(input_text):\n    # 验证说话人的正则表达式\n    pattern_speaker = r\"(\\[\\S+?\\])((?:\\s*<\\S+?>[^<\\[\\]]+?)+)\"\n\n    # 使用re.DOTALL标志使.匹配包括换行符在内的所有字符\n    matches = re.findall(pattern_speaker, input_text, re.DOTALL)\n\n    # 对每个匹配到的说话人内容进行进一步验证\n    for _, dialogue in matches:\n        language_text_matches = extract_language_and_text_updated(_, dialogue)\n        if not language_text_matches:\n            return (\n                False,\n                \"Error: Invalid format detected in dialogue content. Please check your input.\",\n            )\n\n    # 如果输入的文本中没有找到任何匹配项\n    if not matches:\n        return (\n            False,\n            \"Error: No valid speaker format detected. Please check your input.\",\n        )\n\n    return True, \"Input is valid.\"\n\n\ndef text_matching(text: str) -> list:\n    speaker_pattern = r\"(\\[\\S+?\\])(.+?)(?=\\[\\S+?\\]|$)\"\n    matches = re.findall(speaker_pattern, text, re.DOTALL)\n    result = []\n    for speaker, dialogue in matches:\n        result.append(extract_language_and_text_updated(speaker, dialogue))\n    return result\n\n\ndef cut_para(text):\n    splitted_para = re.split(\"[\\n]\", text)  # 按段分\n    splitted_para = [\n        sentence.strip() for sentence in splitted_para if sentence.strip()\n    ]  # 删除空字符串\n    return splitted_para\n\n\ndef cut_sent(para):\n    para = re.sub(\"([。！;？\\?])([^”’])\", r\"\\1\\n\\2\", para)  # 单字符断句符\n    para = re.sub(\"(\\.{6})([^”’])\", r\"\\1\\n\\2\", para)  # 英文省略号\n    para = re.sub(\"(\\…{2})([^”’])\", r\"\\1\\n\\2\", para)  # 中文省略号\n    para = re.sub(\"([。！？\\?][”’])([^，。！？\\?])\", r\"\\1\\n\\2\", para)\n    para = para.rstrip()  # 段尾如果有多余的\\n就去掉它\n    return para.split(\"\\n\")\n\n\nif __name__ == \"__main__\":\n    text = \"\"\"\n    [说话人1]\n    [说话人2]<zh>你好吗？<jp>元気ですか？<jp>こんにちは，世界。<zh>你好吗？\n    [说话人3]<zh>谢谢。<jp>どういたしまして。\n    \"\"\"\n    text_matching(text)\n    # 测试函数\n    test_text = \"\"\"\n    [说话人1]<zh>你好，こんにちは！<jp>こんにちは，世界。\n    [说话人2]<zh>你好吗？\n    \"\"\"\n    text_matching(test_text)\n    res = validate_text(test_text)\n    print(res)\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.3662109375,
          "content": "librosa==0.9.2\nmatplotlib\nnumpy\nnumba\nphonemizer\nscipy\ntensorboard\nUnidecode\namfm_decompy\njieba\ntransformers\npypinyin\ncn2an\ngradio==3.50.2\nav\nmecab-python3\nloguru\nunidic-lite\ncmudict\nfugashi\nnum2words\nPyYAML\nrequests\npyopenjtalk-prebuilt\njaconv\npsutil\nGPUtil\nvector_quantize_pytorch\ng2p_en\nsentencepiece\npykakasi\nlangid\nWeTextProcessing>=0.1.10; platform_system != \"Windows\"\n"
        },
        {
          "name": "resample.py",
          "type": "blob",
          "size": 1.955078125,
          "content": "import os\nimport argparse\nimport librosa\nfrom multiprocessing import Pool, cpu_count\n\nimport soundfile\nfrom tqdm import tqdm\n\nfrom config import config\n\n\ndef process(item):\n    spkdir, wav_name, args = item\n    wav_path = os.path.join(args.in_dir, spkdir, wav_name)\n    if os.path.exists(wav_path) and wav_path.lower().endswith(\".wav\"):\n        wav, sr = librosa.load(wav_path, sr=args.sr)\n        soundfile.write(os.path.join(args.out_dir, spkdir, wav_name), wav, sr)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--sr\",\n        type=int,\n        default=config.resample_config.sampling_rate,\n        help=\"sampling rate\",\n    )\n    parser.add_argument(\n        \"--in_dir\",\n        type=str,\n        default=config.resample_config.in_dir,\n        help=\"path to source dir\",\n    )\n    parser.add_argument(\n        \"--out_dir\",\n        type=str,\n        default=config.resample_config.out_dir,\n        help=\"path to target dir\",\n    )\n    parser.add_argument(\n        \"--processes\",\n        type=int,\n        default=0,\n        help=\"cpu_processes\",\n    )\n    args, _ = parser.parse_known_args()\n    # autodl 无卡模式会识别出46个cpu\n    if args.processes == 0:\n        processes = cpu_count() - 2 if cpu_count() > 4 else 1\n    else:\n        processes = args.processes\n    pool = Pool(processes=processes)\n\n    tasks = []\n\n    for dirpath, _, filenames in os.walk(args.in_dir):\n        # 子级目录\n        spk_dir = os.path.relpath(dirpath, args.in_dir)\n        spk_dir_out = os.path.join(args.out_dir, spk_dir)\n        if not os.path.isdir(spk_dir_out):\n            os.makedirs(spk_dir_out, exist_ok=True)\n        for filename in filenames:\n            if filename.lower().endswith(\".wav\"):\n                twople = (spk_dir, filename, args)\n                tasks.append(twople)\n\n    for _ in tqdm(\n        pool.imap_unordered(process, tasks),\n    ):\n        pass\n\n    pool.close()\n    pool.join()\n\n    print(\"音频重采样完毕!\")\n"
        },
        {
          "name": "resample_legacy.py",
          "type": "blob",
          "size": 1.759765625,
          "content": "import os\nimport argparse\nimport librosa\nfrom multiprocessing import Pool, cpu_count\n\nimport soundfile\nfrom tqdm import tqdm\n\nfrom config import config\n\n\ndef process(item):\n    wav_name, args = item\n    wav_path = os.path.join(args.in_dir, wav_name)\n    if os.path.exists(wav_path) and wav_path.lower().endswith(\".wav\"):\n        wav, sr = librosa.load(wav_path, sr=args.sr)\n        soundfile.write(os.path.join(args.out_dir, wav_name), wav, sr)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--sr\",\n        type=int,\n        default=config.resample_config.sampling_rate,\n        help=\"sampling rate\",\n    )\n    parser.add_argument(\n        \"--in_dir\",\n        type=str,\n        default=config.resample_config.in_dir,\n        help=\"path to source dir\",\n    )\n    parser.add_argument(\n        \"--out_dir\",\n        type=str,\n        default=config.resample_config.out_dir,\n        help=\"path to target dir\",\n    )\n    parser.add_argument(\n        \"--processes\",\n        type=int,\n        default=0,\n        help=\"cpu_processes\",\n    )\n    args, _ = parser.parse_known_args()\n    # autodl 无卡模式会识别出46个cpu\n    if args.processes == 0:\n        processes = cpu_count() - 2 if cpu_count() > 4 else 1\n    else:\n        processes = args.processes\n    pool = Pool(processes=processes)\n\n    tasks = []\n\n    for dirpath, _, filenames in os.walk(args.in_dir):\n        if not os.path.isdir(args.out_dir):\n            os.makedirs(args.out_dir, exist_ok=True)\n        for filename in filenames:\n            if filename.lower().endswith(\".wav\"):\n                tasks.append((filename, args))\n\n    for _ in tqdm(\n        pool.imap_unordered(process, tasks),\n    ):\n        pass\n\n    pool.close()\n    pool.join()\n\n    print(\"音频重采样完毕!\")\n"
        },
        {
          "name": "run_MnodesAndMgpus.sh",
          "type": "blob",
          "size": 1.0576171875,
          "content": "#多机多卡训练\n\n#--nnodes=1:3 表示 使用一到三台机器 弹性分配资源\n#--nnodes=<最小节点数>:<最大节点数>\n#--nproc_per_node=每台机器上可用的GPU数\n#--rdzv_endpoint=主节点（最先启动的）ip:端口号\n#其他不需要变\n\n#注意： 此版本的分布式训练是基于数据并行的，多机多卡相当于开更大的batchsize，此时epoch迭代速度会增加,\n#但由于 该版本的代码中 保存模型是按照global step来计算的，所以会出现的效果就是 ： 保存模型的时间不会有明显加速，\n#但每次保存模型时epoch都比之前迭代了更多次,也就是 “更少的步数，实现更好的效果”\n\n#*************************\n# torchrun \\\n#     --nnodes=1:3\\\n#     --nproc_per_node=2\\\n#     --rdzv_id=1\\\n#     --rdzv_backend=c10d\\\n#     --rdzv_endpoint=\"inspur1:8880\"\\\n#     train_ms.py\n#****************************\n\n#多卡训练\n#nproc_per_node = 机器上可用的GPU数\n\n#*************************\ntorchrun \\\n    --nnodes=1\\\n    --nproc_per_node=2\\\n    train_ms.py\n#*************************\n"
        },
        {
          "name": "slm",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec_gen.py",
          "type": "blob",
          "size": 2.6826171875,
          "content": "import torch\nfrom tqdm import tqdm\nfrom multiprocessing import Pool\nfrom mel_processing import spectrogram_torch, mel_spectrogram_torch\nfrom utils import load_wav_to_torch\n\n\nclass AudioProcessor:\n    def __init__(\n        self,\n        max_wav_value,\n        use_mel_spec_posterior,\n        filter_length,\n        n_mel_channels,\n        sampling_rate,\n        hop_length,\n        win_length,\n        mel_fmin,\n        mel_fmax,\n    ):\n        self.max_wav_value = max_wav_value\n        self.use_mel_spec_posterior = use_mel_spec_posterior\n        self.filter_length = filter_length\n        self.n_mel_channels = n_mel_channels\n        self.sampling_rate = sampling_rate\n        self.hop_length = hop_length\n        self.win_length = win_length\n        self.mel_fmin = mel_fmin\n        self.mel_fmax = mel_fmax\n\n    def process_audio(self, filename):\n        audio, sampling_rate = load_wav_to_torch(filename)\n        audio_norm = audio / self.max_wav_value\n        audio_norm = audio_norm.unsqueeze(0)\n        spec_filename = filename.replace(\".wav\", \".spec.pt\")\n        if self.use_mel_spec_posterior:\n            spec_filename = spec_filename.replace(\".spec.pt\", \".mel.pt\")\n        try:\n            spec = torch.load(spec_filename)\n        except:\n            if self.use_mel_spec_posterior:\n                spec = mel_spectrogram_torch(\n                    audio_norm,\n                    self.filter_length,\n                    self.n_mel_channels,\n                    self.sampling_rate,\n                    self.hop_length,\n                    self.win_length,\n                    self.mel_fmin,\n                    self.mel_fmax,\n                    center=False,\n                )\n            else:\n                spec = spectrogram_torch(\n                    audio_norm,\n                    self.filter_length,\n                    self.sampling_rate,\n                    self.hop_length,\n                    self.win_length,\n                    center=False,\n                )\n            spec = torch.squeeze(spec, 0)\n            torch.save(spec, spec_filename)\n        return spec, audio_norm\n\n\n# 使用示例\nprocessor = AudioProcessor(\n    max_wav_value=32768.0,\n    use_mel_spec_posterior=False,\n    filter_length=2048,\n    n_mel_channels=128,\n    sampling_rate=44100,\n    hop_length=512,\n    win_length=2048,\n    mel_fmin=0.0,\n    mel_fmax=\"null\",\n)\n\nwith open(\"filelists/train.list\", \"r\") as f:\n    filepaths = [line.split(\"|\")[0] for line in f]  # 取每一行的第一部分作为audiopath\n\n# 使用多进程处理\nwith Pool(processes=32) as pool:  # 使用4个进程\n    with tqdm(total=len(filepaths)) as pbar:\n        for i, _ in enumerate(pool.imap_unordered(processor.process_audio, filepaths)):\n            pbar.update()\n"
        },
        {
          "name": "text",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "train_ms.py",
          "type": "blob",
          "size": 30.0556640625,
          "content": "# flake8: noqa: E402\r\nimport platform\r\nimport os\r\nimport torch\r\nfrom torch.nn import functional as F\r\nfrom torch.utils.data import DataLoader\r\nfrom torch.utils.tensorboard import SummaryWriter\r\nimport torch.distributed as dist\r\nfrom torch.nn.parallel import DistributedDataParallel as DDP\r\nfrom torch.cuda.amp import autocast, GradScaler\r\nfrom tqdm import tqdm\r\nimport logging\r\nfrom config import config\r\nimport argparse\r\nimport datetime\r\n\r\nlogging.getLogger(\"numba\").setLevel(logging.WARNING)\r\nimport commons\r\nimport utils\r\nfrom data_utils import (\r\n    TextAudioSpeakerLoader,\r\n    TextAudioSpeakerCollate,\r\n    DistributedBucketSampler,\r\n)\r\nfrom models import (\r\n    SynthesizerTrn,\r\n    MultiPeriodDiscriminator,\r\n    DurationDiscriminator,\r\n    WavLMDiscriminator,\r\n)\r\nfrom losses import (\r\n    generator_loss,\r\n    discriminator_loss,\r\n    feature_loss,\r\n    kl_loss,\r\n    WavLMLoss,\r\n)\r\nfrom mel_processing import mel_spectrogram_torch, spec_to_mel_torch\r\nfrom text.symbols import symbols\r\n\r\ntorch.backends.cuda.matmul.allow_tf32 = True\r\ntorch.backends.cudnn.allow_tf32 = (\r\n    True  # If encountered training problem,please try to disable TF32.\r\n)\r\ntorch.set_float32_matmul_precision(\"medium\")\r\ntorch.backends.cuda.sdp_kernel(\"flash\")\r\ntorch.backends.cuda.enable_flash_sdp(True)\r\ntorch.backends.cuda.enable_mem_efficient_sdp(\r\n    True\r\n)  # Not available if torch version is lower than 2.0\r\nglobal_step = 0\r\n\r\n\r\ndef run():\r\n    # 环境变量解析\r\n    envs = config.train_ms_config.env\r\n    for env_name, env_value in envs.items():\r\n        if env_name not in os.environ.keys():\r\n            print(\"加载config中的配置{}\".format(str(env_value)))\r\n            os.environ[env_name] = str(env_value)\r\n    print(\r\n        \"加载环境变量 \\nMASTER_ADDR: {},\\nMASTER_PORT: {},\\nWORLD_SIZE: {},\\nRANK: {},\\nLOCAL_RANK: {}\".format(\r\n            os.environ[\"MASTER_ADDR\"],\r\n            os.environ[\"MASTER_PORT\"],\r\n            os.environ[\"WORLD_SIZE\"],\r\n            os.environ[\"RANK\"],\r\n            os.environ[\"LOCAL_RANK\"],\r\n        )\r\n    )\r\n\r\n    backend = \"nccl\"\r\n    if platform.system() == \"Windows\":\r\n        backend = \"gloo\"  # If Windows,switch to gloo backend.\r\n    dist.init_process_group(\r\n        backend=backend,\r\n        init_method=\"env://\",\r\n        timeout=datetime.timedelta(seconds=300),\r\n    )  # Use torchrun instead of mp.spawn\r\n    rank = dist.get_rank()\r\n    local_rank = int(os.environ[\"LOCAL_RANK\"])\r\n    n_gpus = dist.get_world_size()\r\n\r\n    # 命令行/config.yml配置解析\r\n    # hps = utils.get_hparams()\r\n    parser = argparse.ArgumentParser()\r\n    # 非必要不建议使用命令行配置，请使用config.yml文件\r\n    parser.add_argument(\r\n        \"-c\",\r\n        \"--config\",\r\n        type=str,\r\n        default=config.train_ms_config.config_path,\r\n        help=\"JSON file for configuration\",\r\n    )\r\n\r\n    parser.add_argument(\r\n        \"-m\",\r\n        \"--model\",\r\n        type=str,\r\n        help=\"数据集文件夹路径，请注意，数据不再默认放在/logs文件夹下。如果需要用命令行配置，请声明相对于根目录的路径\",\r\n        default=config.dataset_path,\r\n    )\r\n    args, _ = parser.parse_known_args()\r\n    model_dir = os.path.join(args.model, config.train_ms_config.model)\r\n    if not os.path.exists(model_dir):\r\n        os.makedirs(model_dir, exist_ok=True)\r\n    hps = utils.get_hparams_from_file(args.config)\r\n    hps.model_dir = model_dir\r\n    # 比较路径是否相同\r\n    if os.path.realpath(args.config) != os.path.realpath(\r\n        config.train_ms_config.config_path\r\n    ):\r\n        with open(args.config, \"r\", encoding=\"utf-8\") as f:\r\n            data = f.read()\r\n        with open(config.train_ms_config.config_path, \"w\", encoding=\"utf-8\") as f:\r\n            f.write(data)\r\n\r\n    torch.manual_seed(hps.train.seed)\r\n    torch.cuda.set_device(local_rank)\r\n\r\n    global global_step\r\n    if rank == 0:\r\n        logger = utils.get_logger(hps.model_dir)\r\n        logger.info(hps)\r\n        utils.check_git_hash(hps.model_dir)\r\n        writer = SummaryWriter(log_dir=hps.model_dir)\r\n        writer_eval = SummaryWriter(log_dir=os.path.join(hps.model_dir, \"eval\"))\r\n    train_dataset = TextAudioSpeakerLoader(hps.data.training_files, hps.data)\r\n    train_sampler = DistributedBucketSampler(\r\n        train_dataset,\r\n        hps.train.batch_size,\r\n        [32, 300, 400, 500, 600, 700, 800, 900, 1000],\r\n        num_replicas=n_gpus,\r\n        rank=rank,\r\n        shuffle=True,\r\n    )\r\n    collate_fn = TextAudioSpeakerCollate()\r\n    train_loader = DataLoader(\r\n        train_dataset,\r\n        num_workers=min(config.train_ms_config.num_workers, os.cpu_count() - 1),\r\n        shuffle=False,\r\n        pin_memory=True,\r\n        collate_fn=collate_fn,\r\n        batch_sampler=train_sampler,\r\n        persistent_workers=True,\r\n        prefetch_factor=4,\r\n    )  # DataLoader config could be adjusted.\r\n    if rank == 0:\r\n        eval_dataset = TextAudioSpeakerLoader(hps.data.validation_files, hps.data)\r\n        eval_loader = DataLoader(\r\n            eval_dataset,\r\n            num_workers=0,\r\n            shuffle=False,\r\n            batch_size=1,\r\n            pin_memory=True,\r\n            drop_last=False,\r\n            collate_fn=collate_fn,\r\n        )\r\n    if (\r\n        \"use_noise_scaled_mas\" in hps.model.keys()\r\n        and hps.model.use_noise_scaled_mas is True\r\n    ):\r\n        print(\"Using noise scaled MAS for VITS2\")\r\n        mas_noise_scale_initial = 0.01\r\n        noise_scale_delta = 2e-6\r\n    else:\r\n        print(\"Using normal MAS for VITS1\")\r\n        mas_noise_scale_initial = 0.0\r\n        noise_scale_delta = 0.0\r\n    if (\r\n        \"use_duration_discriminator\" in hps.model.keys()\r\n        and hps.model.use_duration_discriminator is True\r\n    ):\r\n        print(\"Using duration discriminator for VITS2\")\r\n        net_dur_disc = DurationDiscriminator(\r\n            hps.model.hidden_channels,\r\n            hps.model.hidden_channels,\r\n            3,\r\n            0.1,\r\n            gin_channels=hps.model.gin_channels if hps.data.n_speakers != 0 else 0,\r\n        ).cuda(local_rank)\r\n    else:\r\n        net_dur_disc = None\r\n    if (\r\n        \"use_spk_conditioned_encoder\" in hps.model.keys()\r\n        and hps.model.use_spk_conditioned_encoder is True\r\n    ):\r\n        if hps.data.n_speakers == 0:\r\n            raise ValueError(\r\n                \"n_speakers must be > 0 when using spk conditioned encoder to train multi-speaker model\"\r\n            )\r\n    else:\r\n        print(\"Using normal encoder for VITS1\")\r\n\r\n    net_g = SynthesizerTrn(\r\n        len(symbols),\r\n        hps.data.filter_length // 2 + 1,\r\n        hps.train.segment_size // hps.data.hop_length,\r\n        n_speakers=hps.data.n_speakers,\r\n        mas_noise_scale_initial=mas_noise_scale_initial,\r\n        noise_scale_delta=noise_scale_delta,\r\n        **hps.model,\r\n    ).cuda(local_rank)\r\n\r\n    if getattr(hps.train, \"freeze_ZH_bert\", False):\r\n        print(\"Freezing ZH bert encoder !!!\")\r\n        for param in net_g.enc_p.bert_proj.parameters():\r\n            param.requires_grad = False\r\n\r\n    if getattr(hps.train, \"freeze_EN_bert\", False):\r\n        print(\"Freezing EN bert encoder !!!\")\r\n        for param in net_g.enc_p.en_bert_proj.parameters():\r\n            param.requires_grad = False\r\n\r\n    if getattr(hps.train, \"freeze_JP_bert\", False):\r\n        print(\"Freezing JP bert encoder !!!\")\r\n        for param in net_g.enc_p.ja_bert_proj.parameters():\r\n            param.requires_grad = False\r\n\r\n    net_d = MultiPeriodDiscriminator(hps.model.use_spectral_norm).cuda(local_rank)\r\n    net_wd = WavLMDiscriminator(\r\n        hps.model.slm.hidden, hps.model.slm.nlayers, hps.model.slm.initial_channel\r\n    ).cuda(local_rank)\r\n    optim_g = torch.optim.AdamW(\r\n        filter(lambda p: p.requires_grad, net_g.parameters()),\r\n        hps.train.learning_rate,\r\n        betas=hps.train.betas,\r\n        eps=hps.train.eps,\r\n    )\r\n    optim_d = torch.optim.AdamW(\r\n        net_d.parameters(),\r\n        hps.train.learning_rate,\r\n        betas=hps.train.betas,\r\n        eps=hps.train.eps,\r\n    )\r\n    optim_wd = torch.optim.AdamW(\r\n        net_wd.parameters(),\r\n        hps.train.learning_rate,\r\n        betas=hps.train.betas,\r\n        eps=hps.train.eps,\r\n    )\r\n    if net_dur_disc is not None:\r\n        optim_dur_disc = torch.optim.AdamW(\r\n            net_dur_disc.parameters(),\r\n            hps.train.learning_rate,\r\n            betas=hps.train.betas,\r\n            eps=hps.train.eps,\r\n        )\r\n    else:\r\n        optim_dur_disc = None\r\n    net_g = DDP(net_g, device_ids=[local_rank], bucket_cap_mb=512)\r\n    net_d = DDP(net_d, device_ids=[local_rank], bucket_cap_mb=512)\r\n    net_wd = DDP(net_wd, device_ids=[local_rank], bucket_cap_mb=512)\r\n    if net_dur_disc is not None:\r\n        net_dur_disc = DDP(\r\n            net_dur_disc,\r\n            device_ids=[local_rank],\r\n            bucket_cap_mb=512,\r\n        )\r\n\r\n    # 下载底模\r\n    if config.train_ms_config.base[\"use_base_model\"]:\r\n        utils.download_checkpoint(\r\n            hps.model_dir,\r\n            config.train_ms_config.base,\r\n            token=config.openi_token,\r\n            mirror=config.mirror,\r\n        )\r\n    dur_resume_lr = hps.train.learning_rate\r\n    wd_resume_lr = hps.train.learning_rate\r\n    if net_dur_disc is not None:\r\n        try:\r\n            _, _, dur_resume_lr, epoch_str = utils.load_checkpoint(\r\n                utils.latest_checkpoint_path(hps.model_dir, \"DUR_*.pth\"),\r\n                net_dur_disc,\r\n                optim_dur_disc,\r\n                skip_optimizer=(\r\n                    hps.train.skip_optimizer if \"skip_optimizer\" in hps.train else True\r\n                ),\r\n            )\r\n            if not optim_dur_disc.param_groups[0].get(\"initial_lr\"):\r\n                optim_dur_disc.param_groups[0][\"initial_lr\"] = dur_resume_lr\r\n        except:\r\n            print(\"Initialize dur_disc\")\r\n\r\n    try:\r\n        _, optim_g, g_resume_lr, epoch_str = utils.load_checkpoint(\r\n            utils.latest_checkpoint_path(hps.model_dir, \"G_*.pth\"),\r\n            net_g,\r\n            optim_g,\r\n            skip_optimizer=(\r\n                hps.train.skip_optimizer if \"skip_optimizer\" in hps.train else True\r\n            ),\r\n        )\r\n        _, optim_d, d_resume_lr, epoch_str = utils.load_checkpoint(\r\n            utils.latest_checkpoint_path(hps.model_dir, \"D_*.pth\"),\r\n            net_d,\r\n            optim_d,\r\n            skip_optimizer=(\r\n                hps.train.skip_optimizer if \"skip_optimizer\" in hps.train else True\r\n            ),\r\n        )\r\n        if not optim_g.param_groups[0].get(\"initial_lr\"):\r\n            optim_g.param_groups[0][\"initial_lr\"] = g_resume_lr\r\n        if not optim_d.param_groups[0].get(\"initial_lr\"):\r\n            optim_d.param_groups[0][\"initial_lr\"] = d_resume_lr\r\n\r\n        epoch_str = max(epoch_str, 1)\r\n        # global_step = (epoch_str - 1) * len(train_loader)\r\n        global_step = int(\r\n            utils.get_steps(utils.latest_checkpoint_path(hps.model_dir, \"G_*.pth\"))\r\n        )\r\n        print(\r\n            f\"******************检测到模型存在，epoch为 {epoch_str}，gloabl step为 {global_step}*********************\"\r\n        )\r\n    except Exception as e:\r\n        print(e)\r\n        epoch_str = 1\r\n        global_step = 0\r\n\r\n    try:\r\n        _, optim_wd, wd_resume_lr, epoch_str = utils.load_checkpoint(\r\n            utils.latest_checkpoint_path(hps.model_dir, \"WD_*.pth\"),\r\n            net_wd,\r\n            optim_wd,\r\n            skip_optimizer=(\r\n                hps.train.skip_optimizer if \"skip_optimizer\" in hps.train else True\r\n            ),\r\n        )\r\n        if not optim_wd.param_groups[0].get(\"initial_lr\"):\r\n            optim_wd.param_groups[0][\"initial_lr\"] = wd_resume_lr\r\n    except Exception as e:\r\n        print(e)\r\n\r\n    scheduler_g = torch.optim.lr_scheduler.ExponentialLR(\r\n        optim_g, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2\r\n    )\r\n    scheduler_d = torch.optim.lr_scheduler.ExponentialLR(\r\n        optim_d, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2\r\n    )\r\n    scheduler_wd = torch.optim.lr_scheduler.ExponentialLR(\r\n        optim_wd, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2\r\n    )\r\n    if net_dur_disc is not None:\r\n        scheduler_dur_disc = torch.optim.lr_scheduler.ExponentialLR(\r\n            optim_dur_disc, gamma=hps.train.lr_decay, last_epoch=epoch_str - 2\r\n        )\r\n    else:\r\n        scheduler_dur_disc = None\r\n    scaler = GradScaler(enabled=hps.train.bf16_run)\r\n\r\n    wl = WavLMLoss(\r\n        hps.model.slm.model,\r\n        net_wd,\r\n        hps.data.sampling_rate,\r\n        hps.model.slm.sr,\r\n    ).to(local_rank)\r\n\r\n    for epoch in range(epoch_str, hps.train.epochs + 1):\r\n        if rank == 0:\r\n            train_and_evaluate(\r\n                rank,\r\n                local_rank,\r\n                epoch,\r\n                hps,\r\n                [net_g, net_d, net_dur_disc, net_wd, wl],\r\n                [optim_g, optim_d, optim_dur_disc, optim_wd],\r\n                [scheduler_g, scheduler_d, scheduler_dur_disc, scheduler_wd],\r\n                scaler,\r\n                [train_loader, eval_loader],\r\n                logger,\r\n                [writer, writer_eval],\r\n            )\r\n        else:\r\n            train_and_evaluate(\r\n                rank,\r\n                local_rank,\r\n                epoch,\r\n                hps,\r\n                [net_g, net_d, net_dur_disc, net_wd, wl],\r\n                [optim_g, optim_d, optim_dur_disc, optim_wd],\r\n                [scheduler_g, scheduler_d, scheduler_dur_disc, scheduler_wd],\r\n                scaler,\r\n                [train_loader, None],\r\n                None,\r\n                None,\r\n            )\r\n        scheduler_g.step()\r\n        scheduler_d.step()\r\n        scheduler_wd.step()\r\n        if net_dur_disc is not None:\r\n            scheduler_dur_disc.step()\r\n\r\n\r\ndef train_and_evaluate(\r\n    rank,\r\n    local_rank,\r\n    epoch,\r\n    hps,\r\n    nets,\r\n    optims,\r\n    schedulers,\r\n    scaler,\r\n    loaders,\r\n    logger,\r\n    writers,\r\n):\r\n    net_g, net_d, net_dur_disc, net_wd, wl = nets\r\n    optim_g, optim_d, optim_dur_disc, optim_wd = optims\r\n    scheduler_g, scheduler_d, scheduler_dur_disc, scheduler_wd = schedulers\r\n    train_loader, eval_loader = loaders\r\n    if writers is not None:\r\n        writer, writer_eval = writers\r\n\r\n    train_loader.batch_sampler.set_epoch(epoch)\r\n    global global_step\r\n\r\n    net_g.train()\r\n    net_d.train()\r\n    net_wd.train()\r\n    if net_dur_disc is not None:\r\n        net_dur_disc.train()\r\n    for batch_idx, (\r\n        x,\r\n        x_lengths,\r\n        spec,\r\n        spec_lengths,\r\n        y,\r\n        y_lengths,\r\n        speakers,\r\n        tone,\r\n        language,\r\n        bert,\r\n        ja_bert,\r\n        en_bert,\r\n    ) in enumerate(tqdm(train_loader)):\r\n        if net_g.module.use_noise_scaled_mas:\r\n            current_mas_noise_scale = (\r\n                net_g.module.mas_noise_scale_initial\r\n                - net_g.module.noise_scale_delta * global_step\r\n            )\r\n            net_g.module.current_mas_noise_scale = max(current_mas_noise_scale, 0.0)\r\n        x, x_lengths = x.cuda(local_rank, non_blocking=True), x_lengths.cuda(\r\n            local_rank, non_blocking=True\r\n        )\r\n        spec, spec_lengths = spec.cuda(\r\n            local_rank, non_blocking=True\r\n        ), spec_lengths.cuda(local_rank, non_blocking=True)\r\n        y, y_lengths = y.cuda(local_rank, non_blocking=True), y_lengths.cuda(\r\n            local_rank, non_blocking=True\r\n        )\r\n        speakers = speakers.cuda(local_rank, non_blocking=True)\r\n        tone = tone.cuda(local_rank, non_blocking=True)\r\n        language = language.cuda(local_rank, non_blocking=True)\r\n        bert = bert.cuda(local_rank, non_blocking=True)\r\n        ja_bert = ja_bert.cuda(local_rank, non_blocking=True)\r\n        en_bert = en_bert.cuda(local_rank, non_blocking=True)\r\n\r\n        with autocast(enabled=hps.train.bf16_run, dtype=torch.bfloat16):\r\n            (\r\n                y_hat,\r\n                l_length,\r\n                attn,\r\n                ids_slice,\r\n                x_mask,\r\n                z_mask,\r\n                (z, z_p, m_p, logs_p, m_q, logs_q),\r\n                (hidden_x, logw, logw_, logw_sdp),\r\n                g,\r\n            ) = net_g(\r\n                x,\r\n                x_lengths,\r\n                spec,\r\n                spec_lengths,\r\n                speakers,\r\n                tone,\r\n                language,\r\n                bert,\r\n                ja_bert,\r\n                en_bert,\r\n            )\r\n            mel = spec_to_mel_torch(\r\n                spec,\r\n                hps.data.filter_length,\r\n                hps.data.n_mel_channels,\r\n                hps.data.sampling_rate,\r\n                hps.data.mel_fmin,\r\n                hps.data.mel_fmax,\r\n            )\r\n            y_mel = commons.slice_segments(\r\n                mel, ids_slice, hps.train.segment_size // hps.data.hop_length\r\n            )\r\n            y_hat_mel = mel_spectrogram_torch(\r\n                y_hat.squeeze(1).float(),\r\n                hps.data.filter_length,\r\n                hps.data.n_mel_channels,\r\n                hps.data.sampling_rate,\r\n                hps.data.hop_length,\r\n                hps.data.win_length,\r\n                hps.data.mel_fmin,\r\n                hps.data.mel_fmax,\r\n            )\r\n\r\n            y = commons.slice_segments(\r\n                y, ids_slice * hps.data.hop_length, hps.train.segment_size\r\n            )  # slice\r\n\r\n            # Discriminator\r\n            y_d_hat_r, y_d_hat_g, _, _ = net_d(y, y_hat.detach())\r\n            with autocast(enabled=hps.train.bf16_run, dtype=torch.bfloat16):\r\n                loss_disc, losses_disc_r, losses_disc_g = discriminator_loss(\r\n                    y_d_hat_r, y_d_hat_g\r\n                )\r\n                loss_disc_all = loss_disc\r\n            if net_dur_disc is not None:\r\n                y_dur_hat_r, y_dur_hat_g = net_dur_disc(\r\n                    hidden_x.detach(),\r\n                    x_mask.detach(),\r\n                    logw_.detach(),\r\n                    logw.detach(),\r\n                    g.detach(),\r\n                )\r\n                y_dur_hat_r_sdp, y_dur_hat_g_sdp = net_dur_disc(\r\n                    hidden_x.detach(),\r\n                    x_mask.detach(),\r\n                    logw_.detach(),\r\n                    logw_sdp.detach(),\r\n                    g.detach(),\r\n                )\r\n                y_dur_hat_r = y_dur_hat_r + y_dur_hat_r_sdp\r\n                y_dur_hat_g = y_dur_hat_g + y_dur_hat_g_sdp\r\n                with autocast(enabled=hps.train.bf16_run, dtype=torch.bfloat16):\r\n                    # TODO: I think need to mean using the mask, but for now, just mean all\r\n                    (\r\n                        loss_dur_disc,\r\n                        losses_dur_disc_r,\r\n                        losses_dur_disc_g,\r\n                    ) = discriminator_loss(y_dur_hat_r, y_dur_hat_g)\r\n                    loss_dur_disc_all = loss_dur_disc\r\n                optim_dur_disc.zero_grad()\r\n                scaler.scale(loss_dur_disc_all).backward()\r\n                scaler.unscale_(optim_dur_disc)\r\n                # torch.nn.utils.clip_grad_norm_(\r\n                #     parameters=net_dur_disc.parameters(), max_norm=100\r\n                # )\r\n                grad_norm_dur = commons.clip_grad_value_(\r\n                    net_dur_disc.parameters(), None\r\n                )\r\n                scaler.step(optim_dur_disc)\r\n\r\n        optim_d.zero_grad()\r\n        scaler.scale(loss_disc_all).backward()\r\n        scaler.unscale_(optim_d)\r\n        if getattr(hps.train, \"bf16_run\", False):\r\n            torch.nn.utils.clip_grad_norm_(parameters=net_d.parameters(), max_norm=200)\r\n        grad_norm_d = commons.clip_grad_value_(net_d.parameters(), None)\r\n        scaler.step(optim_d)\r\n\r\n        with autocast(enabled=hps.train.bf16_run, dtype=torch.bfloat16):\r\n            loss_slm = wl.discriminator(\r\n                y.detach().squeeze(), y_hat.detach().squeeze()\r\n            ).mean()\r\n\r\n        optim_wd.zero_grad()\r\n        scaler.scale(loss_slm).backward()\r\n        scaler.unscale_(optim_wd)\r\n        # torch.nn.utils.clip_grad_norm_(parameters=net_wd.parameters(), max_norm=200)\r\n        grad_norm_wd = commons.clip_grad_value_(net_wd.parameters(), None)\r\n        scaler.step(optim_wd)\r\n\r\n        with autocast(enabled=hps.train.bf16_run, dtype=torch.bfloat16):\r\n            # Generator\r\n            y_d_hat_r, y_d_hat_g, fmap_r, fmap_g = net_d(y, y_hat)\r\n            if net_dur_disc is not None:\r\n                _, y_dur_hat_g = net_dur_disc(hidden_x, x_mask, logw_, logw, g)\r\n                _, y_dur_hat_g_sdp = net_dur_disc(hidden_x, x_mask, logw_, logw_sdp, g)\r\n                y_dur_hat_g = y_dur_hat_g + y_dur_hat_g_sdp\r\n            with autocast(enabled=hps.train.bf16_run, dtype=torch.bfloat16):\r\n                loss_dur = torch.sum(l_length.float())\r\n                loss_mel = F.l1_loss(y_mel, y_hat_mel) * hps.train.c_mel\r\n                loss_kl = kl_loss(z_p, logs_q, m_p, logs_p, z_mask) * hps.train.c_kl\r\n\r\n                loss_fm = feature_loss(fmap_r, fmap_g)\r\n                loss_gen, losses_gen = generator_loss(y_d_hat_g)\r\n\r\n                loss_lm = wl(y.detach().squeeze(), y_hat.squeeze()).mean()\r\n                loss_lm_gen = wl.generator(y_hat.squeeze())\r\n\r\n                loss_gen_all = (\r\n                    loss_gen\r\n                    + loss_fm\r\n                    + loss_mel\r\n                    + loss_dur\r\n                    + loss_kl\r\n                    + loss_lm\r\n                    + loss_lm_gen\r\n                )\r\n                if net_dur_disc is not None:\r\n                    loss_dur_gen, losses_dur_gen = generator_loss(y_dur_hat_g)\r\n                    loss_gen_all += loss_dur_gen\r\n        optim_g.zero_grad()\r\n        scaler.scale(loss_gen_all).backward()\r\n        scaler.unscale_(optim_g)\r\n        if getattr(hps.train, \"bf16_run\", False):\r\n            torch.nn.utils.clip_grad_norm_(parameters=net_g.parameters(), max_norm=500)\r\n        grad_norm_g = commons.clip_grad_value_(net_g.parameters(), None)\r\n        scaler.step(optim_g)\r\n        scaler.update()\r\n\r\n        if rank == 0:\r\n            if global_step % hps.train.log_interval == 0:\r\n                lr = optim_g.param_groups[0][\"lr\"]\r\n                losses = [loss_disc, loss_gen, loss_fm, loss_mel, loss_dur, loss_kl]\r\n                logger.info(\r\n                    \"Train Epoch: {} [{:.0f}%]\".format(\r\n                        epoch, 100.0 * batch_idx / len(train_loader)\r\n                    )\r\n                )\r\n                logger.info([x.item() for x in losses] + [global_step, lr])\r\n\r\n                scalar_dict = {\r\n                    \"loss/g/total\": loss_gen_all,\r\n                    \"loss/d/total\": loss_disc_all,\r\n                    \"loss/wd/total\": loss_slm,\r\n                    \"learning_rate\": lr,\r\n                    \"grad_norm_d\": grad_norm_d,\r\n                    \"grad_norm_g\": grad_norm_g,\r\n                    \"grad_norm_dur\": grad_norm_dur,\r\n                    \"grad_norm_wd\": grad_norm_wd,\r\n                }\r\n                scalar_dict.update(\r\n                    {\r\n                        \"loss/g/fm\": loss_fm,\r\n                        \"loss/g/mel\": loss_mel,\r\n                        \"loss/g/dur\": loss_dur,\r\n                        \"loss/g/kl\": loss_kl,\r\n                        \"loss/g/lm\": loss_lm,\r\n                        \"loss/g/lm_gen\": loss_lm_gen,\r\n                    }\r\n                )\r\n                scalar_dict.update(\r\n                    {\"loss/g/{}\".format(i): v for i, v in enumerate(losses_gen)}\r\n                )\r\n                scalar_dict.update(\r\n                    {\"loss/d_r/{}\".format(i): v for i, v in enumerate(losses_disc_r)}\r\n                )\r\n                scalar_dict.update(\r\n                    {\"loss/d_g/{}\".format(i): v for i, v in enumerate(losses_disc_g)}\r\n                )\r\n\r\n                if net_dur_disc is not None:\r\n                    scalar_dict.update({\"loss/dur_disc/total\": loss_dur_disc_all})\r\n\r\n                    scalar_dict.update(\r\n                        {\r\n                            \"loss/dur_disc_g/{}\".format(i): v\r\n                            for i, v in enumerate(losses_dur_disc_g)\r\n                        }\r\n                    )\r\n                    scalar_dict.update(\r\n                        {\r\n                            \"loss/dur_disc_r/{}\".format(i): v\r\n                            for i, v in enumerate(losses_dur_disc_r)\r\n                        }\r\n                    )\r\n\r\n                    scalar_dict.update({\"loss/g/dur_gen\": loss_dur_gen})\r\n                    scalar_dict.update(\r\n                        {\r\n                            \"loss/g/dur_gen_{}\".format(i): v\r\n                            for i, v in enumerate(losses_dur_gen)\r\n                        }\r\n                    )\r\n\r\n                image_dict = {\r\n                    \"slice/mel_org\": utils.plot_spectrogram_to_numpy(\r\n                        y_mel[0].data.cpu().numpy()\r\n                    ),\r\n                    \"slice/mel_gen\": utils.plot_spectrogram_to_numpy(\r\n                        y_hat_mel[0].data.cpu().numpy()\r\n                    ),\r\n                    \"all/mel\": utils.plot_spectrogram_to_numpy(\r\n                        mel[0].data.cpu().numpy()\r\n                    ),\r\n                    \"all/attn\": utils.plot_alignment_to_numpy(\r\n                        attn[0, 0].data.cpu().numpy()\r\n                    ),\r\n                }\r\n                utils.summarize(\r\n                    writer=writer,\r\n                    global_step=global_step,\r\n                    images=image_dict,\r\n                    scalars=scalar_dict,\r\n                )\r\n\r\n            if global_step % hps.train.eval_interval == 0:\r\n                evaluate(hps, net_g, eval_loader, writer_eval)\r\n                utils.save_checkpoint(\r\n                    net_g,\r\n                    optim_g,\r\n                    hps.train.learning_rate,\r\n                    epoch,\r\n                    os.path.join(hps.model_dir, \"G_{}.pth\".format(global_step)),\r\n                )\r\n                utils.save_checkpoint(\r\n                    net_d,\r\n                    optim_d,\r\n                    hps.train.learning_rate,\r\n                    epoch,\r\n                    os.path.join(hps.model_dir, \"D_{}.pth\".format(global_step)),\r\n                )\r\n                utils.save_checkpoint(\r\n                    net_wd,\r\n                    optim_wd,\r\n                    hps.train.learning_rate,\r\n                    epoch,\r\n                    os.path.join(hps.model_dir, \"WD_{}.pth\".format(global_step)),\r\n                )\r\n                if net_dur_disc is not None:\r\n                    utils.save_checkpoint(\r\n                        net_dur_disc,\r\n                        optim_dur_disc,\r\n                        hps.train.learning_rate,\r\n                        epoch,\r\n                        os.path.join(hps.model_dir, \"DUR_{}.pth\".format(global_step)),\r\n                    )\r\n                keep_ckpts = config.train_ms_config.keep_ckpts\r\n                if keep_ckpts > 0:\r\n                    utils.clean_checkpoints(\r\n                        path_to_models=hps.model_dir,\r\n                        n_ckpts_to_keep=keep_ckpts,\r\n                        sort_by_time=True,\r\n                    )\r\n\r\n        global_step += 1\r\n\r\n    # gc.collect()\r\n    # torch.cuda.empty_cache()\r\n    if rank == 0:\r\n        logger.info(\"====> Epoch: {}\".format(epoch))\r\n\r\n\r\ndef evaluate(hps, generator, eval_loader, writer_eval):\r\n    generator.eval()\r\n    image_dict = {}\r\n    audio_dict = {}\r\n    print(\"Evaluating ...\")\r\n    with torch.no_grad():\r\n        for batch_idx, (\r\n            x,\r\n            x_lengths,\r\n            spec,\r\n            spec_lengths,\r\n            y,\r\n            y_lengths,\r\n            speakers,\r\n            tone,\r\n            language,\r\n            bert,\r\n            ja_bert,\r\n            en_bert,\r\n        ) in enumerate(eval_loader):\r\n            x, x_lengths = x.cuda(), x_lengths.cuda()\r\n            spec, spec_lengths = spec.cuda(), spec_lengths.cuda()\r\n            y, y_lengths = y.cuda(), y_lengths.cuda()\r\n            speakers = speakers.cuda()\r\n            bert = bert.cuda()\r\n            ja_bert = ja_bert.cuda()\r\n            en_bert = en_bert.cuda()\r\n            tone = tone.cuda()\r\n            language = language.cuda()\r\n            for use_sdp in [True, False]:\r\n                y_hat, attn, mask, *_ = generator.module.infer(\r\n                    x,\r\n                    x_lengths,\r\n                    speakers,\r\n                    tone,\r\n                    language,\r\n                    bert,\r\n                    ja_bert,\r\n                    en_bert,\r\n                    y=spec,\r\n                    max_len=1000,\r\n                    sdp_ratio=0.0 if not use_sdp else 1.0,\r\n                )\r\n                y_hat_lengths = mask.sum([1, 2]).long() * hps.data.hop_length\r\n\r\n                mel = spec_to_mel_torch(\r\n                    spec,\r\n                    hps.data.filter_length,\r\n                    hps.data.n_mel_channels,\r\n                    hps.data.sampling_rate,\r\n                    hps.data.mel_fmin,\r\n                    hps.data.mel_fmax,\r\n                )\r\n                y_hat_mel = mel_spectrogram_torch(\r\n                    y_hat.squeeze(1).float(),\r\n                    hps.data.filter_length,\r\n                    hps.data.n_mel_channels,\r\n                    hps.data.sampling_rate,\r\n                    hps.data.hop_length,\r\n                    hps.data.win_length,\r\n                    hps.data.mel_fmin,\r\n                    hps.data.mel_fmax,\r\n                )\r\n                image_dict.update(\r\n                    {\r\n                        f\"gen/mel_{batch_idx}\": utils.plot_spectrogram_to_numpy(\r\n                            y_hat_mel[0].cpu().numpy()\r\n                        )\r\n                    }\r\n                )\r\n                audio_dict.update(\r\n                    {\r\n                        f\"gen/audio_{batch_idx}_{use_sdp}\": y_hat[\r\n                            0, :, : y_hat_lengths[0]\r\n                        ]\r\n                    }\r\n                )\r\n                image_dict.update(\r\n                    {\r\n                        f\"gt/mel_{batch_idx}\": utils.plot_spectrogram_to_numpy(\r\n                            mel[0].cpu().numpy()\r\n                        )\r\n                    }\r\n                )\r\n                audio_dict.update({f\"gt/audio_{batch_idx}\": y[0, :, : y_lengths[0]]})\r\n\r\n    utils.summarize(\r\n        writer=writer_eval,\r\n        global_step=global_step,\r\n        images=image_dict,\r\n        audios=audio_dict,\r\n        audio_sampling_rate=hps.data.sampling_rate,\r\n    )\r\n    generator.train()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    run()\r\n"
        },
        {
          "name": "transforms.py",
          "type": "blob",
          "size": 7.0830078125,
          "content": "import torch\nfrom torch.nn import functional as F\n\nimport numpy as np\n\n\nDEFAULT_MIN_BIN_WIDTH = 1e-3\nDEFAULT_MIN_BIN_HEIGHT = 1e-3\nDEFAULT_MIN_DERIVATIVE = 1e-3\n\n\ndef piecewise_rational_quadratic_transform(\n    inputs,\n    unnormalized_widths,\n    unnormalized_heights,\n    unnormalized_derivatives,\n    inverse=False,\n    tails=None,\n    tail_bound=1.0,\n    min_bin_width=DEFAULT_MIN_BIN_WIDTH,\n    min_bin_height=DEFAULT_MIN_BIN_HEIGHT,\n    min_derivative=DEFAULT_MIN_DERIVATIVE,\n):\n    if tails is None:\n        spline_fn = rational_quadratic_spline\n        spline_kwargs = {}\n    else:\n        spline_fn = unconstrained_rational_quadratic_spline\n        spline_kwargs = {\"tails\": tails, \"tail_bound\": tail_bound}\n\n    outputs, logabsdet = spline_fn(\n        inputs=inputs,\n        unnormalized_widths=unnormalized_widths,\n        unnormalized_heights=unnormalized_heights,\n        unnormalized_derivatives=unnormalized_derivatives,\n        inverse=inverse,\n        min_bin_width=min_bin_width,\n        min_bin_height=min_bin_height,\n        min_derivative=min_derivative,\n        **spline_kwargs\n    )\n    return outputs, logabsdet\n\n\ndef searchsorted(bin_locations, inputs, eps=1e-6):\n    bin_locations[..., -1] += eps\n    return torch.sum(inputs[..., None] >= bin_locations, dim=-1) - 1\n\n\ndef unconstrained_rational_quadratic_spline(\n    inputs,\n    unnormalized_widths,\n    unnormalized_heights,\n    unnormalized_derivatives,\n    inverse=False,\n    tails=\"linear\",\n    tail_bound=1.0,\n    min_bin_width=DEFAULT_MIN_BIN_WIDTH,\n    min_bin_height=DEFAULT_MIN_BIN_HEIGHT,\n    min_derivative=DEFAULT_MIN_DERIVATIVE,\n):\n    inside_interval_mask = (inputs >= -tail_bound) & (inputs <= tail_bound)\n    outside_interval_mask = ~inside_interval_mask\n\n    outputs = torch.zeros_like(inputs)\n    logabsdet = torch.zeros_like(inputs)\n\n    if tails == \"linear\":\n        unnormalized_derivatives = F.pad(unnormalized_derivatives, pad=(1, 1))\n        constant = np.log(np.exp(1 - min_derivative) - 1)\n        unnormalized_derivatives[..., 0] = constant\n        unnormalized_derivatives[..., -1] = constant\n\n        outputs[outside_interval_mask] = inputs[outside_interval_mask]\n        logabsdet[outside_interval_mask] = 0\n    else:\n        raise RuntimeError(\"{} tails are not implemented.\".format(tails))\n\n    (\n        outputs[inside_interval_mask],\n        logabsdet[inside_interval_mask],\n    ) = rational_quadratic_spline(\n        inputs=inputs[inside_interval_mask],\n        unnormalized_widths=unnormalized_widths[inside_interval_mask, :],\n        unnormalized_heights=unnormalized_heights[inside_interval_mask, :],\n        unnormalized_derivatives=unnormalized_derivatives[inside_interval_mask, :],\n        inverse=inverse,\n        left=-tail_bound,\n        right=tail_bound,\n        bottom=-tail_bound,\n        top=tail_bound,\n        min_bin_width=min_bin_width,\n        min_bin_height=min_bin_height,\n        min_derivative=min_derivative,\n    )\n\n    return outputs, logabsdet\n\n\ndef rational_quadratic_spline(\n    inputs,\n    unnormalized_widths,\n    unnormalized_heights,\n    unnormalized_derivatives,\n    inverse=False,\n    left=0.0,\n    right=1.0,\n    bottom=0.0,\n    top=1.0,\n    min_bin_width=DEFAULT_MIN_BIN_WIDTH,\n    min_bin_height=DEFAULT_MIN_BIN_HEIGHT,\n    min_derivative=DEFAULT_MIN_DERIVATIVE,\n):\n    if torch.min(inputs) < left or torch.max(inputs) > right:\n        raise ValueError(\"Input to a transform is not within its domain\")\n\n    num_bins = unnormalized_widths.shape[-1]\n\n    if min_bin_width * num_bins > 1.0:\n        raise ValueError(\"Minimal bin width too large for the number of bins\")\n    if min_bin_height * num_bins > 1.0:\n        raise ValueError(\"Minimal bin height too large for the number of bins\")\n\n    widths = F.softmax(unnormalized_widths, dim=-1)\n    widths = min_bin_width + (1 - min_bin_width * num_bins) * widths\n    cumwidths = torch.cumsum(widths, dim=-1)\n    cumwidths = F.pad(cumwidths, pad=(1, 0), mode=\"constant\", value=0.0)\n    cumwidths = (right - left) * cumwidths + left\n    cumwidths[..., 0] = left\n    cumwidths[..., -1] = right\n    widths = cumwidths[..., 1:] - cumwidths[..., :-1]\n\n    derivatives = min_derivative + F.softplus(unnormalized_derivatives)\n\n    heights = F.softmax(unnormalized_heights, dim=-1)\n    heights = min_bin_height + (1 - min_bin_height * num_bins) * heights\n    cumheights = torch.cumsum(heights, dim=-1)\n    cumheights = F.pad(cumheights, pad=(1, 0), mode=\"constant\", value=0.0)\n    cumheights = (top - bottom) * cumheights + bottom\n    cumheights[..., 0] = bottom\n    cumheights[..., -1] = top\n    heights = cumheights[..., 1:] - cumheights[..., :-1]\n\n    if inverse:\n        bin_idx = searchsorted(cumheights, inputs)[..., None]\n    else:\n        bin_idx = searchsorted(cumwidths, inputs)[..., None]\n\n    input_cumwidths = cumwidths.gather(-1, bin_idx)[..., 0]\n    input_bin_widths = widths.gather(-1, bin_idx)[..., 0]\n\n    input_cumheights = cumheights.gather(-1, bin_idx)[..., 0]\n    delta = heights / widths\n    input_delta = delta.gather(-1, bin_idx)[..., 0]\n\n    input_derivatives = derivatives.gather(-1, bin_idx)[..., 0]\n    input_derivatives_plus_one = derivatives[..., 1:].gather(-1, bin_idx)[..., 0]\n\n    input_heights = heights.gather(-1, bin_idx)[..., 0]\n\n    if inverse:\n        a = (inputs - input_cumheights) * (\n            input_derivatives + input_derivatives_plus_one - 2 * input_delta\n        ) + input_heights * (input_delta - input_derivatives)\n        b = input_heights * input_derivatives - (inputs - input_cumheights) * (\n            input_derivatives + input_derivatives_plus_one - 2 * input_delta\n        )\n        c = -input_delta * (inputs - input_cumheights)\n\n        discriminant = b.pow(2) - 4 * a * c\n        assert (discriminant >= 0).all()\n\n        root = (2 * c) / (-b - torch.sqrt(discriminant))\n        outputs = root * input_bin_widths + input_cumwidths\n\n        theta_one_minus_theta = root * (1 - root)\n        denominator = input_delta + (\n            (input_derivatives + input_derivatives_plus_one - 2 * input_delta)\n            * theta_one_minus_theta\n        )\n        derivative_numerator = input_delta.pow(2) * (\n            input_derivatives_plus_one * root.pow(2)\n            + 2 * input_delta * theta_one_minus_theta\n            + input_derivatives * (1 - root).pow(2)\n        )\n        logabsdet = torch.log(derivative_numerator) - 2 * torch.log(denominator)\n\n        return outputs, -logabsdet\n    else:\n        theta = (inputs - input_cumwidths) / input_bin_widths\n        theta_one_minus_theta = theta * (1 - theta)\n\n        numerator = input_heights * (\n            input_delta * theta.pow(2) + input_derivatives * theta_one_minus_theta\n        )\n        denominator = input_delta + (\n            (input_derivatives + input_derivatives_plus_one - 2 * input_delta)\n            * theta_one_minus_theta\n        )\n        outputs = input_cumheights + numerator / denominator\n\n        derivative_numerator = input_delta.pow(2) * (\n            input_derivatives_plus_one * theta.pow(2)\n            + 2 * input_delta * theta_one_minus_theta\n            + input_derivatives * (1 - theta).pow(2)\n        )\n        logabsdet = torch.log(derivative_numerator) - 2 * torch.log(denominator)\n\n        return outputs, logabsdet\n"
        },
        {
          "name": "update_status.py",
          "type": "blob",
          "size": 3.01953125,
          "content": "import os\r\nimport gradio as gr\r\n\r\nlang_dict = {\"EN(英文)\": \"_en\", \"ZH(中文)\": \"_zh\", \"JP(日语)\": \"_jp\"}\r\n\r\n\r\ndef raw_dir_convert_to_path(target_dir: str, lang):\r\n    res = target_dir.rstrip(\"/\").rstrip(\"\\\\\")\r\n    if (not target_dir.startswith(\"raw\")) and (not target_dir.startswith(\"./raw\")):\r\n        res = os.path.join(\"./raw\", res)\r\n    if (\r\n        (not res.endswith(\"_zh\"))\r\n        and (not res.endswith(\"_jp\"))\r\n        and (not res.endswith(\"_en\"))\r\n    ):\r\n        res += lang_dict[lang]\r\n    return res\r\n\r\n\r\ndef update_g_files():\r\n    g_files = []\r\n    cnt = 0\r\n    for root, dirs, files in os.walk(os.path.abspath(\"./logs\")):\r\n        for file in files:\r\n            if file.startswith(\"G_\") and file.endswith(\".pth\"):\r\n                g_files.append(os.path.join(root, file))\r\n                cnt += 1\r\n    print(g_files)\r\n    return f\"更新模型列表完成, 共找到{cnt}个模型\", gr.Dropdown.update(choices=g_files)\r\n\r\n\r\ndef update_c_files():\r\n    c_files = []\r\n    cnt = 0\r\n    for root, dirs, files in os.walk(os.path.abspath(\"./logs\")):\r\n        for file in files:\r\n            if file.startswith(\"config.json\"):\r\n                c_files.append(os.path.join(root, file))\r\n                cnt += 1\r\n    print(c_files)\r\n    return f\"更新模型列表完成, 共找到{cnt}个配置文件\", gr.Dropdown.update(\r\n        choices=c_files\r\n    )\r\n\r\n\r\ndef update_model_folders():\r\n    subdirs = []\r\n    cnt = 0\r\n    for root, dirs, files in os.walk(os.path.abspath(\"./logs\")):\r\n        for dir_name in dirs:\r\n            if os.path.basename(dir_name) != \"eval\":\r\n                subdirs.append(os.path.join(root, dir_name))\r\n                cnt += 1\r\n    print(subdirs)\r\n    return f\"更新模型文件夹列表完成, 共找到{cnt}个文件夹\", gr.Dropdown.update(\r\n        choices=subdirs\r\n    )\r\n\r\n\r\ndef update_wav_lab_pairs():\r\n    wav_count = tot_count = 0\r\n    for root, _, files in os.walk(\"./raw\"):\r\n        for file in files:\r\n            # print(file)\r\n            file_path = os.path.join(root, file)\r\n            if file.lower().endswith(\".wav\"):\r\n                lab_file = os.path.splitext(file_path)[0] + \".lab\"\r\n                if os.path.exists(lab_file):\r\n                    wav_count += 1\r\n                tot_count += 1\r\n    return f\"{wav_count} / {tot_count}\"\r\n\r\n\r\ndef update_raw_folders():\r\n    subdirs = []\r\n    cnt = 0\r\n    script_path = os.path.dirname(os.path.abspath(__file__))  # 获取当前脚本的绝对路径\r\n    raw_path = os.path.join(script_path, \"raw\")\r\n    print(raw_path)\r\n    os.makedirs(raw_path, exist_ok=True)\r\n    for root, dirs, files in os.walk(raw_path):\r\n        for dir_name in dirs:\r\n            relative_path = os.path.relpath(\r\n                os.path.join(root, dir_name), script_path\r\n            )  # 获取相对路径\r\n            subdirs.append(relative_path)\r\n            cnt += 1\r\n    print(subdirs)\r\n    return (\r\n        f\"更新raw音频文件夹列表完成, 共找到{cnt}个文件夹\",\r\n        gr.Dropdown.update(choices=subdirs),\r\n        gr.Textbox.update(value=update_wav_lab_pairs()),\r\n    )\r\n"
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 13.3447265625,
          "content": "import os\nimport glob\nimport argparse\nimport logging\nimport json\nimport shutil\nimport subprocess\nimport numpy as np\nfrom huggingface_hub import hf_hub_download\nfrom scipy.io.wavfile import read\nimport torch\nimport re\n\nMATPLOTLIB_FLAG = False\n\nlogger = logging.getLogger(__name__)\n\n\ndef download_emo_models(mirror, repo_id, model_name):\n    if mirror == \"openi\":\n        import openi\n\n        openi.model.download_model(\n            \"Stardust_minus/Bert-VITS2\",\n            repo_id.split(\"/\")[-1],\n            \"./emotional\",\n        )\n    else:\n        hf_hub_download(\n            repo_id,\n            \"pytorch_model.bin\",\n            local_dir=model_name,\n            local_dir_use_symlinks=False,\n        )\n\n\ndef download_checkpoint(\n    dir_path, repo_config, token=None, regex=\"G_*.pth\", mirror=\"openi\"\n):\n    repo_id = repo_config[\"repo_id\"]\n    f_list = glob.glob(os.path.join(dir_path, regex))\n    if f_list:\n        print(\"Use existed model, skip downloading.\")\n        return\n    if mirror.lower() == \"openi\":\n        import openi\n\n        kwargs = {\"token\": token} if token else {}\n        openi.login(**kwargs)\n\n        model_image = repo_config[\"model_image\"]\n        openi.model.download_model(repo_id, model_image, dir_path)\n\n        fs = glob.glob(os.path.join(dir_path, model_image, \"*.pth\"))\n        for file in fs:\n            shutil.move(file, dir_path)\n        shutil.rmtree(os.path.join(dir_path, model_image))\n    else:\n        for file in [\"DUR_0.pth\", \"D_0.pth\", \"G_0.pth\"]:\n            hf_hub_download(\n                repo_id, file, local_dir=dir_path, local_dir_use_symlinks=False\n            )\n\n\ndef load_checkpoint(checkpoint_path, model, optimizer=None, skip_optimizer=False):\n    assert os.path.isfile(checkpoint_path)\n    checkpoint_dict = torch.load(checkpoint_path, map_location=\"cpu\")\n    iteration = checkpoint_dict[\"iteration\"]\n    learning_rate = checkpoint_dict[\"learning_rate\"]\n    if (\n        optimizer is not None\n        and not skip_optimizer\n        and checkpoint_dict[\"optimizer\"] is not None\n    ):\n        optimizer.load_state_dict(checkpoint_dict[\"optimizer\"])\n    elif optimizer is None and not skip_optimizer:\n        # else:      Disable this line if Infer and resume checkpoint,then enable the line upper\n        new_opt_dict = optimizer.state_dict()\n        new_opt_dict_params = new_opt_dict[\"param_groups\"][0][\"params\"]\n        new_opt_dict[\"param_groups\"] = checkpoint_dict[\"optimizer\"][\"param_groups\"]\n        new_opt_dict[\"param_groups\"][0][\"params\"] = new_opt_dict_params\n        optimizer.load_state_dict(new_opt_dict)\n\n    saved_state_dict = checkpoint_dict[\"model\"]\n    if hasattr(model, \"module\"):\n        state_dict = model.module.state_dict()\n    else:\n        state_dict = model.state_dict()\n\n    new_state_dict = {}\n    for k, v in state_dict.items():\n        try:\n            # assert \"emb_g\" not in k\n            new_state_dict[k] = saved_state_dict[k]\n            assert saved_state_dict[k].shape == v.shape, (\n                saved_state_dict[k].shape,\n                v.shape,\n            )\n        except:\n            # For upgrading from the old version\n            if \"ja_bert_proj\" in k:\n                v = torch.zeros_like(v)\n                logger.warn(\n                    f\"Seems you are using the old version of the model, the {k} is automatically set to zero for backward compatibility\"\n                )\n            else:\n                logger.error(f\"{k} is not in the checkpoint\")\n\n            new_state_dict[k] = v\n\n    if hasattr(model, \"module\"):\n        model.module.load_state_dict(new_state_dict, strict=False)\n    else:\n        model.load_state_dict(new_state_dict, strict=False)\n\n    logger.info(\n        \"Loaded checkpoint '{}' (iteration {})\".format(checkpoint_path, iteration)\n    )\n\n    return model, optimizer, learning_rate, iteration\n\n\ndef save_checkpoint(model, optimizer, learning_rate, iteration, checkpoint_path):\n    logger.info(\n        \"Saving model and optimizer state at iteration {} to {}\".format(\n            iteration, checkpoint_path\n        )\n    )\n    if hasattr(model, \"module\"):\n        state_dict = model.module.state_dict()\n    else:\n        state_dict = model.state_dict()\n    torch.save(\n        {\n            \"model\": state_dict,\n            \"iteration\": iteration,\n            \"optimizer\": optimizer.state_dict(),\n            \"learning_rate\": learning_rate,\n        },\n        checkpoint_path,\n    )\n\n\ndef summarize(\n    writer,\n    global_step,\n    scalars={},\n    histograms={},\n    images={},\n    audios={},\n    audio_sampling_rate=22050,\n):\n    for k, v in scalars.items():\n        writer.add_scalar(k, v, global_step)\n    for k, v in histograms.items():\n        writer.add_histogram(k, v, global_step)\n    for k, v in images.items():\n        writer.add_image(k, v, global_step, dataformats=\"HWC\")\n    for k, v in audios.items():\n        writer.add_audio(k, v, global_step, audio_sampling_rate)\n\n\ndef latest_checkpoint_path(dir_path, regex=\"G_*.pth\"):\n    f_list = glob.glob(os.path.join(dir_path, regex))\n    f_list.sort(key=lambda f: int(\"\".join(filter(str.isdigit, f))))\n    x = f_list[-1]\n    return x\n\n\ndef plot_spectrogram_to_numpy(spectrogram):\n    global MATPLOTLIB_FLAG\n    if not MATPLOTLIB_FLAG:\n        import matplotlib\n\n        matplotlib.use(\"Agg\")\n        MATPLOTLIB_FLAG = True\n        mpl_logger = logging.getLogger(\"matplotlib\")\n        mpl_logger.setLevel(logging.WARNING)\n    import matplotlib.pylab as plt\n    import numpy as np\n\n    fig, ax = plt.subplots(figsize=(10, 2))\n    im = ax.imshow(spectrogram, aspect=\"auto\", origin=\"lower\", interpolation=\"none\")\n    plt.colorbar(im, ax=ax)\n    plt.xlabel(\"Frames\")\n    plt.ylabel(\"Channels\")\n    plt.tight_layout()\n\n    fig.canvas.draw()\n    data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep=\"\")\n    data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data\n\n\ndef plot_alignment_to_numpy(alignment, info=None):\n    global MATPLOTLIB_FLAG\n    if not MATPLOTLIB_FLAG:\n        import matplotlib\n\n        matplotlib.use(\"Agg\")\n        MATPLOTLIB_FLAG = True\n        mpl_logger = logging.getLogger(\"matplotlib\")\n        mpl_logger.setLevel(logging.WARNING)\n    import matplotlib.pylab as plt\n    import numpy as np\n\n    fig, ax = plt.subplots(figsize=(6, 4))\n    im = ax.imshow(\n        alignment.transpose(), aspect=\"auto\", origin=\"lower\", interpolation=\"none\"\n    )\n    fig.colorbar(im, ax=ax)\n    xlabel = \"Decoder timestep\"\n    if info is not None:\n        xlabel += \"\\n\\n\" + info\n    plt.xlabel(xlabel)\n    plt.ylabel(\"Encoder timestep\")\n    plt.tight_layout()\n\n    fig.canvas.draw()\n    data = np.fromstring(fig.canvas.tostring_rgb(), dtype=np.uint8, sep=\"\")\n    data = data.reshape(fig.canvas.get_width_height()[::-1] + (3,))\n    plt.close()\n    return data\n\n\ndef load_wav_to_torch(full_path):\n    sampling_rate, data = read(full_path)\n    return torch.FloatTensor(data.astype(np.float32)), sampling_rate\n\n\ndef load_filepaths_and_text(filename, split=\"|\"):\n    with open(filename, encoding=\"utf-8\") as f:\n        filepaths_and_text = [line.strip().split(split) for line in f]\n    return filepaths_and_text\n\n\ndef get_hparams(init=True):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-c\",\n        \"--config\",\n        type=str,\n        default=\"./configs/base.json\",\n        help=\"JSON file for configuration\",\n    )\n    parser.add_argument(\"-m\", \"--model\", type=str, required=True, help=\"Model name\")\n\n    args = parser.parse_args()\n    model_dir = os.path.join(\"./logs\", args.model)\n\n    if not os.path.exists(model_dir):\n        os.makedirs(model_dir)\n\n    config_path = args.config\n    config_save_path = os.path.join(model_dir, \"config.json\")\n    if init:\n        with open(config_path, \"r\", encoding=\"utf-8\") as f:\n            data = f.read()\n        with open(config_save_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(data)\n    else:\n        with open(config_save_path, \"r\", vencoding=\"utf-8\") as f:\n            data = f.read()\n    config = json.loads(data)\n    hparams = HParams(**config)\n    hparams.model_dir = model_dir\n    return hparams\n\n\ndef clean_checkpoints(path_to_models=\"logs/44k/\", n_ckpts_to_keep=2, sort_by_time=True):\n    \"\"\"Freeing up space by deleting saved ckpts\n\n    Arguments:\n    path_to_models    --  Path to the model directory\n    n_ckpts_to_keep   --  Number of ckpts to keep, excluding G_0.pth and D_0.pth\n    sort_by_time      --  True -> chronologically delete ckpts\n                          False -> lexicographically delete ckpts\n    \"\"\"\n    import re\n\n    ckpts_files = [\n        f\n        for f in os.listdir(path_to_models)\n        if os.path.isfile(os.path.join(path_to_models, f))\n    ]\n\n    def name_key(_f):\n        return int(re.compile(\"._(\\\\d+)\\\\.pth\").match(_f).group(1))\n\n    def time_key(_f):\n        return os.path.getmtime(os.path.join(path_to_models, _f))\n\n    sort_key = time_key if sort_by_time else name_key\n\n    def x_sorted(_x):\n        return sorted(\n            [f for f in ckpts_files if f.startswith(_x) and not f.endswith(\"_0.pth\")],\n            key=sort_key,\n        )\n\n    to_del = [\n        os.path.join(path_to_models, fn)\n        for fn in (\n            x_sorted(\"G\")[:-n_ckpts_to_keep]\n            + x_sorted(\"D\")[:-n_ckpts_to_keep]\n            + x_sorted(\"WD\")[:-n_ckpts_to_keep]\n        )\n    ]\n\n    def del_info(fn):\n        return logger.info(f\".. Free up space by deleting ckpt {fn}\")\n\n    def del_routine(x):\n        return [os.remove(x), del_info(x)]\n\n    [del_routine(fn) for fn in to_del]\n\n\ndef get_hparams_from_dir(model_dir):\n    config_save_path = os.path.join(model_dir, \"config.json\")\n    with open(config_save_path, \"r\", encoding=\"utf-8\") as f:\n        data = f.read()\n    config = json.loads(data)\n\n    hparams = HParams(**config)\n    hparams.model_dir = model_dir\n    return hparams\n\n\ndef get_hparams_from_file(config_path):\n    # print(\"config_path: \", config_path)\n    with open(config_path, \"r\", encoding=\"utf-8\") as f:\n        data = f.read()\n    config = json.loads(data)\n\n    hparams = HParams(**config)\n    return hparams\n\n\ndef check_git_hash(model_dir):\n    source_dir = os.path.dirname(os.path.realpath(__file__))\n    if not os.path.exists(os.path.join(source_dir, \".git\")):\n        logger.warn(\n            \"{} is not a git repository, therefore hash value comparison will be ignored.\".format(\n                source_dir\n            )\n        )\n        return\n\n    cur_hash = subprocess.getoutput(\"git rev-parse HEAD\")\n\n    path = os.path.join(model_dir, \"githash\")\n    if os.path.exists(path):\n        saved_hash = open(path).read()\n        if saved_hash != cur_hash:\n            logger.warn(\n                \"git hash values are different. {}(saved) != {}(current)\".format(\n                    saved_hash[:8], cur_hash[:8]\n                )\n            )\n    else:\n        open(path, \"w\").write(cur_hash)\n\n\ndef get_logger(model_dir, filename=\"train.log\"):\n    global logger\n    logger = logging.getLogger(os.path.basename(model_dir))\n    logger.setLevel(logging.DEBUG)\n\n    formatter = logging.Formatter(\"%(asctime)s\\t%(name)s\\t%(levelname)s\\t%(message)s\")\n    if not os.path.exists(model_dir):\n        os.makedirs(model_dir)\n    h = logging.FileHandler(os.path.join(model_dir, filename))\n    h.setLevel(logging.DEBUG)\n    h.setFormatter(formatter)\n    logger.addHandler(h)\n    return logger\n\n\nclass HParams:\n    def __init__(self, **kwargs):\n        for k, v in kwargs.items():\n            if type(v) == dict:\n                v = HParams(**v)\n            self[k] = v\n\n    def keys(self):\n        return self.__dict__.keys()\n\n    def items(self):\n        return self.__dict__.items()\n\n    def values(self):\n        return self.__dict__.values()\n\n    def __len__(self):\n        return len(self.__dict__)\n\n    def __getitem__(self, key):\n        return getattr(self, key)\n\n    def __setitem__(self, key, value):\n        return setattr(self, key, value)\n\n    def __contains__(self, key):\n        return key in self.__dict__\n\n    def __repr__(self):\n        return self.__dict__.__repr__()\n\n\ndef load_model(model_path, config_path):\n    hps = get_hparams_from_file(config_path)\n    net = SynthesizerTrn(\n        # len(symbols),\n        108,\n        hps.data.filter_length // 2 + 1,\n        hps.train.segment_size // hps.data.hop_length,\n        n_speakers=hps.data.n_speakers,\n        **hps.model,\n    ).to(\"cpu\")\n    _ = net.eval()\n    _ = load_checkpoint(model_path, net, None, skip_optimizer=True)\n    return net\n\n\ndef mix_model(\n    network1, network2, output_path, voice_ratio=(0.5, 0.5), tone_ratio=(0.5, 0.5)\n):\n    if hasattr(network1, \"module\"):\n        state_dict1 = network1.module.state_dict()\n        state_dict2 = network2.module.state_dict()\n    else:\n        state_dict1 = network1.state_dict()\n        state_dict2 = network2.state_dict()\n    for k in state_dict1.keys():\n        if k not in state_dict2.keys():\n            continue\n        if \"enc_p\" in k:\n            state_dict1[k] = (\n                state_dict1[k].clone() * tone_ratio[0]\n                + state_dict2[k].clone() * tone_ratio[1]\n            )\n        else:\n            state_dict1[k] = (\n                state_dict1[k].clone() * voice_ratio[0]\n                + state_dict2[k].clone() * voice_ratio[1]\n            )\n    for k in state_dict2.keys():\n        if k not in state_dict1.keys():\n            state_dict1[k] = state_dict2[k].clone()\n    torch.save(\n        {\"model\": state_dict1, \"iteration\": 0, \"optimizer\": None, \"learning_rate\": 0},\n        output_path,\n    )\n\n\ndef get_steps(model_path):\n    matches = re.findall(r\"\\d+\", model_path)\n    return matches[-1] if matches else None\n"
        },
        {
          "name": "webui.py",
          "type": "blob",
          "size": 18.447265625,
          "content": "# flake8: noqa: E402\r\nimport gc\r\nimport os\r\nimport logging\r\nimport re_matching\r\nfrom tools.sentence import split_by_language\r\n\r\nlogging.getLogger(\"numba\").setLevel(logging.WARNING)\r\nlogging.getLogger(\"markdown_it\").setLevel(logging.WARNING)\r\nlogging.getLogger(\"urllib3\").setLevel(logging.WARNING)\r\nlogging.getLogger(\"matplotlib\").setLevel(logging.WARNING)\r\n\r\nlogging.basicConfig(\r\n    level=logging.INFO, format=\"| %(name)s | %(levelname)s | %(message)s\"\r\n)\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nimport torch\r\nimport utils\r\nfrom infer import infer, latest_version, get_net_g, infer_multilang\r\nimport gradio as gr\r\nimport webbrowser\r\nimport numpy as np\r\nfrom config import config\r\nfrom tools.translate import translate\r\nimport librosa\r\n\r\nnet_g = None\r\n\r\ndevice = config.webui_config.device\r\nif device == \"mps\":\r\n    os.environ[\"PYTORCH_ENABLE_MPS_FALLBACK\"] = \"1\"\r\n\r\n\r\ndef free_up_memory():\r\n    # Prior inference run might have large variables not cleaned up due to exception during the run.\r\n    # Free up as much memory as possible to allow this run to be successful.\r\n    gc.collect()\r\n    if torch.cuda.is_available():\r\n        torch.cuda.empty_cache()\r\n\r\n\r\ndef generate_audio(\r\n    slices,\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    speaker,\r\n    language,\r\n    reference_audio,\r\n    emotion,\r\n    style_text,\r\n    style_weight,\r\n    skip_start=False,\r\n    skip_end=False,\r\n):\r\n    audio_list = []\r\n    # silence = np.zeros(hps.data.sampling_rate // 2, dtype=np.int16)\r\n\r\n    free_up_memory()\r\n\r\n    with torch.no_grad():\r\n        for idx, piece in enumerate(slices):\r\n            skip_start = idx != 0\r\n            skip_end = idx != len(slices) - 1\r\n            audio = infer(\r\n                piece,\r\n                reference_audio=reference_audio,\r\n                emotion=emotion,\r\n                sdp_ratio=sdp_ratio,\r\n                noise_scale=noise_scale,\r\n                noise_scale_w=noise_scale_w,\r\n                length_scale=length_scale,\r\n                sid=speaker,\r\n                language=language,\r\n                hps=hps,\r\n                net_g=net_g,\r\n                device=device,\r\n                skip_start=skip_start,\r\n                skip_end=skip_end,\r\n                style_text=style_text,\r\n                style_weight=style_weight,\r\n            )\r\n            audio16bit = gr.processing_utils.convert_to_16_bit_wav(audio)\r\n            audio_list.append(audio16bit)\r\n    return audio_list\r\n\r\n\r\ndef generate_audio_multilang(\r\n    slices,\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    speaker,\r\n    language,\r\n    reference_audio,\r\n    emotion,\r\n    skip_start=False,\r\n    skip_end=False,\r\n):\r\n    audio_list = []\r\n    # silence = np.zeros(hps.data.sampling_rate // 2, dtype=np.int16)\r\n\r\n    free_up_memory()\r\n\r\n    with torch.no_grad():\r\n        for idx, piece in enumerate(slices):\r\n            skip_start = idx != 0\r\n            skip_end = idx != len(slices) - 1\r\n            audio = infer_multilang(\r\n                piece,\r\n                reference_audio=reference_audio,\r\n                emotion=emotion,\r\n                sdp_ratio=sdp_ratio,\r\n                noise_scale=noise_scale,\r\n                noise_scale_w=noise_scale_w,\r\n                length_scale=length_scale,\r\n                sid=speaker,\r\n                language=language[idx],\r\n                hps=hps,\r\n                net_g=net_g,\r\n                device=device,\r\n                skip_start=skip_start,\r\n                skip_end=skip_end,\r\n            )\r\n            audio16bit = gr.processing_utils.convert_to_16_bit_wav(audio)\r\n            audio_list.append(audio16bit)\r\n    return audio_list\r\n\r\n\r\ndef tts_split(\r\n    text: str,\r\n    speaker,\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    language,\r\n    cut_by_sent,\r\n    interval_between_para,\r\n    interval_between_sent,\r\n    reference_audio,\r\n    emotion,\r\n    style_text,\r\n    style_weight,\r\n):\r\n    while text.find(\"\\n\\n\") != -1:\r\n        text = text.replace(\"\\n\\n\", \"\\n\")\r\n    text = text.replace(\"|\", \"\")\r\n    para_list = re_matching.cut_para(text)\r\n    para_list = [p for p in para_list if p != \"\"]\r\n    audio_list = []\r\n    for p in para_list:\r\n        if not cut_by_sent:\r\n            audio_list += process_text(\r\n                p,\r\n                speaker,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                language,\r\n                reference_audio,\r\n                emotion,\r\n                style_text,\r\n                style_weight,\r\n            )\r\n            silence = np.zeros((int)(44100 * interval_between_para), dtype=np.int16)\r\n            audio_list.append(silence)\r\n        else:\r\n            audio_list_sent = []\r\n            sent_list = re_matching.cut_sent(p)\r\n            sent_list = [s for s in sent_list if s != \"\"]\r\n            for s in sent_list:\r\n                audio_list_sent += process_text(\r\n                    s,\r\n                    speaker,\r\n                    sdp_ratio,\r\n                    noise_scale,\r\n                    noise_scale_w,\r\n                    length_scale,\r\n                    language,\r\n                    reference_audio,\r\n                    emotion,\r\n                    style_text,\r\n                    style_weight,\r\n                )\r\n                silence = np.zeros((int)(44100 * interval_between_sent))\r\n                audio_list_sent.append(silence)\r\n            if (interval_between_para - interval_between_sent) > 0:\r\n                silence = np.zeros(\r\n                    (int)(44100 * (interval_between_para - interval_between_sent))\r\n                )\r\n                audio_list_sent.append(silence)\r\n            audio16bit = gr.processing_utils.convert_to_16_bit_wav(\r\n                np.concatenate(audio_list_sent)\r\n            )  # 对完整句子做音量归一\r\n            audio_list.append(audio16bit)\r\n    audio_concat = np.concatenate(audio_list)\r\n    return (\"Success\", (hps.data.sampling_rate, audio_concat))\r\n\r\n\r\ndef process_mix(slice):\r\n    _speaker = slice.pop()\r\n    _text, _lang = [], []\r\n    for lang, content in slice:\r\n        content = content.split(\"|\")\r\n        content = [part for part in content if part != \"\"]\r\n        if len(content) == 0:\r\n            continue\r\n        if len(_text) == 0:\r\n            _text = [[part] for part in content]\r\n            _lang = [[lang] for part in content]\r\n        else:\r\n            _text[-1].append(content[0])\r\n            _lang[-1].append(lang)\r\n            if len(content) > 1:\r\n                _text += [[part] for part in content[1:]]\r\n                _lang += [[lang] for part in content[1:]]\r\n    return _text, _lang, _speaker\r\n\r\n\r\ndef process_auto(text):\r\n    _text, _lang = [], []\r\n    for slice in text.split(\"|\"):\r\n        if slice == \"\":\r\n            continue\r\n        temp_text, temp_lang = [], []\r\n        sentences_list = split_by_language(slice, target_languages=[\"zh\", \"ja\", \"en\"])\r\n        for sentence, lang in sentences_list:\r\n            if sentence == \"\":\r\n                continue\r\n            temp_text.append(sentence)\r\n            if lang == \"ja\":\r\n                lang = \"jp\"\r\n            temp_lang.append(lang.upper())\r\n        _text.append(temp_text)\r\n        _lang.append(temp_lang)\r\n    return _text, _lang\r\n\r\n\r\ndef process_text(\r\n    text: str,\r\n    speaker,\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    language,\r\n    reference_audio,\r\n    emotion,\r\n    style_text=None,\r\n    style_weight=0,\r\n):\r\n    audio_list = []\r\n    if language == \"mix\":\r\n        bool_valid, str_valid = re_matching.validate_text(text)\r\n        if not bool_valid:\r\n            return str_valid, (\r\n                hps.data.sampling_rate,\r\n                np.concatenate([np.zeros(hps.data.sampling_rate // 2)]),\r\n            )\r\n        for slice in re_matching.text_matching(text):\r\n            _text, _lang, _speaker = process_mix(slice)\r\n            if _speaker is None:\r\n                continue\r\n            print(f\"Text: {_text}\\nLang: {_lang}\")\r\n            audio_list.extend(\r\n                generate_audio_multilang(\r\n                    _text,\r\n                    sdp_ratio,\r\n                    noise_scale,\r\n                    noise_scale_w,\r\n                    length_scale,\r\n                    _speaker,\r\n                    _lang,\r\n                    reference_audio,\r\n                    emotion,\r\n                )\r\n            )\r\n    elif language.lower() == \"auto\":\r\n        _text, _lang = process_auto(text)\r\n        print(f\"Text: {_text}\\nLang: {_lang}\")\r\n        audio_list.extend(\r\n            generate_audio_multilang(\r\n                _text,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                speaker,\r\n                _lang,\r\n                reference_audio,\r\n                emotion,\r\n            )\r\n        )\r\n    else:\r\n        audio_list.extend(\r\n            generate_audio(\r\n                text.split(\"|\"),\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                speaker,\r\n                language,\r\n                reference_audio,\r\n                emotion,\r\n                style_text,\r\n                style_weight,\r\n            )\r\n        )\r\n    return audio_list\r\n\r\n\r\ndef tts_fn(\r\n    text: str,\r\n    speaker,\r\n    sdp_ratio,\r\n    noise_scale,\r\n    noise_scale_w,\r\n    length_scale,\r\n    language,\r\n    reference_audio,\r\n    emotion,\r\n    prompt_mode,\r\n    style_text=None,\r\n    style_weight=0,\r\n):\r\n    if style_text == \"\":\r\n        style_text = None\r\n    if prompt_mode == \"Audio prompt\":\r\n        if reference_audio == None:\r\n            return (\"Invalid audio prompt\", None)\r\n        else:\r\n            reference_audio = load_audio(reference_audio)[1]\r\n    else:\r\n        reference_audio = None\r\n\r\n    audio_list = process_text(\r\n        text,\r\n        speaker,\r\n        sdp_ratio,\r\n        noise_scale,\r\n        noise_scale_w,\r\n        length_scale,\r\n        language,\r\n        reference_audio,\r\n        emotion,\r\n        style_text,\r\n        style_weight,\r\n    )\r\n\r\n    audio_concat = np.concatenate(audio_list)\r\n    return \"Success\", (hps.data.sampling_rate, audio_concat)\r\n\r\n\r\ndef format_utils(text, speaker):\r\n    _text, _lang = process_auto(text)\r\n    res = f\"[{speaker}]\"\r\n    for lang_s, content_s in zip(_lang, _text):\r\n        for lang, content in zip(lang_s, content_s):\r\n            res += f\"<{lang.lower()}>{content}\"\r\n        res += \"|\"\r\n    return \"mix\", res[:-1]\r\n\r\n\r\ndef load_audio(path):\r\n    audio, sr = librosa.load(path, 48000)\r\n    # audio = librosa.resample(audio, 44100, 48000)\r\n    return sr, audio\r\n\r\n\r\ndef gr_util(item):\r\n    if item == \"Text prompt\":\r\n        return {\"visible\": True, \"__type__\": \"update\"}, {\r\n            \"visible\": False,\r\n            \"__type__\": \"update\",\r\n        }\r\n    else:\r\n        return {\"visible\": False, \"__type__\": \"update\"}, {\r\n            \"visible\": True,\r\n            \"__type__\": \"update\",\r\n        }\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    if config.webui_config.debug:\r\n        logger.info(\"Enable DEBUG-LEVEL log\")\r\n        logging.basicConfig(level=logging.DEBUG)\r\n    hps = utils.get_hparams_from_file(config.webui_config.config_path)\r\n    # 若config.json中未指定版本则默认为最新版本\r\n    version = hps.version if hasattr(hps, \"version\") else latest_version\r\n    net_g = get_net_g(\r\n        model_path=config.webui_config.model, version=version, device=device, hps=hps\r\n    )\r\n    speaker_ids = hps.data.spk2id\r\n    speakers = list(speaker_ids.keys())\r\n    languages = [\"ZH\", \"JP\", \"EN\", \"mix\", \"auto\"]\r\n    with gr.Blocks() as app:\r\n        with gr.Row():\r\n            with gr.Column():\r\n                text = gr.TextArea(\r\n                    label=\"输入文本内容\",\r\n                    placeholder=\"\"\"\r\n                    如果你选择语言为\\'mix\\'，必须按照格式输入，否则报错:\r\n                        格式举例(zh是中文，jp是日语，不区分大小写；说话人举例:gongzi):\r\n                         [说话人1]<zh>你好，こんにちは！ <jp>こんにちは，世界。\r\n                         [说话人2]<zh>你好吗？<jp>元気ですか？\r\n                         [说话人3]<zh>谢谢。<jp>どういたしまして。\r\n                         ...\r\n                    另外，所有的语言选项都可以用'|'分割长段实现分句生成。\r\n                    \"\"\",\r\n                )\r\n                trans = gr.Button(\"中翻日\", variant=\"primary\")\r\n                slicer = gr.Button(\"快速切分\", variant=\"primary\")\r\n                formatter = gr.Button(\"检测语言，并整理为 MIX 格式\", variant=\"primary\")\r\n                speaker = gr.Dropdown(\r\n                    choices=speakers, value=speakers[0], label=\"Speaker\"\r\n                )\r\n                _ = gr.Markdown(\r\n                    value=\"提示模式（Prompt mode）：可选文字提示或音频提示，用于生成文字或音频指定风格的声音。\\n\",\r\n                    visible=False,\r\n                )\r\n                prompt_mode = gr.Radio(\r\n                    [\"Text prompt\", \"Audio prompt\"],\r\n                    label=\"Prompt Mode\",\r\n                    value=\"Text prompt\",\r\n                    visible=False,\r\n                )\r\n                text_prompt = gr.Textbox(\r\n                    label=\"Text prompt\",\r\n                    placeholder=\"用文字描述生成风格。如：Happy\",\r\n                    value=\"Happy\",\r\n                    visible=False,\r\n                )\r\n                audio_prompt = gr.Audio(\r\n                    label=\"Audio prompt\", type=\"filepath\", visible=False\r\n                )\r\n                sdp_ratio = gr.Slider(\r\n                    minimum=0, maximum=1, value=0.5, step=0.1, label=\"SDP Ratio\"\r\n                )\r\n                noise_scale = gr.Slider(\r\n                    minimum=0.1, maximum=2, value=0.6, step=0.1, label=\"Noise\"\r\n                )\r\n                noise_scale_w = gr.Slider(\r\n                    minimum=0.1, maximum=2, value=0.9, step=0.1, label=\"Noise_W\"\r\n                )\r\n                length_scale = gr.Slider(\r\n                    minimum=0.1, maximum=2, value=1.0, step=0.1, label=\"Length\"\r\n                )\r\n                language = gr.Dropdown(\r\n                    choices=languages, value=languages[0], label=\"Language\"\r\n                )\r\n                btn = gr.Button(\"生成音频！\", variant=\"primary\")\r\n            with gr.Column():\r\n                with gr.Accordion(\"融合文本语义\", open=False):\r\n                    gr.Markdown(\r\n                        value=\"使用辅助文本的语意来辅助生成对话（语言保持与主文本相同）\\n\\n\"\r\n                        \"**注意**：不要使用**指令式文本**（如：开心），要使用**带有强烈情感的文本**（如：我好快乐！！！）\\n\\n\"\r\n                        \"效果较不明确，留空即为不使用该功能\"\r\n                    )\r\n                    style_text = gr.Textbox(label=\"辅助文本\")\r\n                    style_weight = gr.Slider(\r\n                        minimum=0,\r\n                        maximum=1,\r\n                        value=0.7,\r\n                        step=0.1,\r\n                        label=\"Weight\",\r\n                        info=\"主文本和辅助文本的bert混合比率，0表示仅主文本，1表示仅辅助文本\",\r\n                    )\r\n                with gr.Row():\r\n                    with gr.Column():\r\n                        interval_between_sent = gr.Slider(\r\n                            minimum=0,\r\n                            maximum=5,\r\n                            value=0.2,\r\n                            step=0.1,\r\n                            label=\"句间停顿(秒)，勾选按句切分才生效\",\r\n                        )\r\n                        interval_between_para = gr.Slider(\r\n                            minimum=0,\r\n                            maximum=10,\r\n                            value=1,\r\n                            step=0.1,\r\n                            label=\"段间停顿(秒)，需要大于句间停顿才有效\",\r\n                        )\r\n                        opt_cut_by_sent = gr.Checkbox(\r\n                            label=\"按句切分    在按段落切分的基础上再按句子切分文本\"\r\n                        )\r\n                        slicer = gr.Button(\"切分生成\", variant=\"primary\")\r\n                text_output = gr.Textbox(label=\"状态信息\")\r\n                audio_output = gr.Audio(label=\"输出音频\")\r\n                # explain_image = gr.Image(\r\n                #     label=\"参数解释信息\",\r\n                #     show_label=True,\r\n                #     show_share_button=False,\r\n                #     show_download_button=False,\r\n                #     value=os.path.abspath(\"./img/参数说明.png\"),\r\n                # )\r\n        btn.click(\r\n            tts_fn,\r\n            inputs=[\r\n                text,\r\n                speaker,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                language,\r\n                audio_prompt,\r\n                text_prompt,\r\n                prompt_mode,\r\n                style_text,\r\n                style_weight,\r\n            ],\r\n            outputs=[text_output, audio_output],\r\n        )\r\n\r\n        trans.click(\r\n            translate,\r\n            inputs=[text],\r\n            outputs=[text],\r\n        )\r\n        slicer.click(\r\n            tts_split,\r\n            inputs=[\r\n                text,\r\n                speaker,\r\n                sdp_ratio,\r\n                noise_scale,\r\n                noise_scale_w,\r\n                length_scale,\r\n                language,\r\n                opt_cut_by_sent,\r\n                interval_between_para,\r\n                interval_between_sent,\r\n                audio_prompt,\r\n                text_prompt,\r\n                style_text,\r\n                style_weight,\r\n            ],\r\n            outputs=[text_output, audio_output],\r\n        )\r\n\r\n        prompt_mode.change(\r\n            lambda x: gr_util(x),\r\n            inputs=[prompt_mode],\r\n            outputs=[text_prompt, audio_prompt],\r\n        )\r\n\r\n        audio_prompt.upload(\r\n            lambda x: load_audio(x),\r\n            inputs=[audio_prompt],\r\n            outputs=[audio_prompt],\r\n        )\r\n\r\n        formatter.click(\r\n            format_utils,\r\n            inputs=[text, speaker],\r\n            outputs=[language, text],\r\n        )\r\n\r\n    print(\"推理页面已开启!\")\r\n    webbrowser.open(f\"http://127.0.0.1:{config.webui_config.port}\")\r\n    app.launch(share=config.webui_config.share, server_port=config.webui_config.port)\r\n"
        },
        {
          "name": "webui_preprocess.py",
          "type": "blob",
          "size": 7.759765625,
          "content": "import gradio as gr\nimport webbrowser\nimport os\nimport json\nimport subprocess\nimport shutil\n\n\ndef get_path(data_dir):\n    start_path = os.path.join(\"./data\", data_dir)\n    lbl_path = os.path.join(start_path, \"esd.list\")\n    train_path = os.path.join(start_path, \"train.list\")\n    val_path = os.path.join(start_path, \"val.list\")\n    config_path = os.path.join(start_path, \"configs\", \"config.json\")\n    return start_path, lbl_path, train_path, val_path, config_path\n\n\ndef generate_config(data_dir, batch_size):\n    assert data_dir != \"\", \"数据集名称不能为空\"\n    start_path, _, train_path, val_path, config_path = get_path(data_dir)\n    if os.path.isfile(config_path):\n        config = json.load(open(config_path, \"r\", encoding=\"utf-8\"))\n    else:\n        config = json.load(open(\"configs/config.json\", \"r\", encoding=\"utf-8\"))\n    config[\"data\"][\"training_files\"] = train_path\n    config[\"data\"][\"validation_files\"] = val_path\n    config[\"train\"][\"batch_size\"] = batch_size\n    out_path = os.path.join(start_path, \"configs\")\n    if not os.path.isdir(out_path):\n        os.mkdir(out_path)\n    model_path = os.path.join(start_path, \"models\")\n    if not os.path.isdir(model_path):\n        os.mkdir(model_path)\n    with open(config_path, \"w\", encoding=\"utf-8\") as f:\n        json.dump(config, f, indent=4)\n    if not os.path.exists(\"config.yml\"):\n        shutil.copy(src=\"default_config.yml\", dst=\"config.yml\")\n    return \"配置文件生成完成\"\n\n\ndef resample(data_dir):\n    assert data_dir != \"\", \"数据集名称不能为空\"\n    start_path, _, _, _, config_path = get_path(data_dir)\n    in_dir = os.path.join(start_path, \"raw\")\n    out_dir = os.path.join(start_path, \"wavs\")\n    subprocess.run(\n        [\n            \"python\",\n            \"resample_legacy.py\",\n            \"--sr\",\n            \"44100\",\n            \"--in_dir\",\n            f\"{in_dir}\",\n            \"--out_dir\",\n            f\"{out_dir}\",\n        ]\n    )\n    return \"音频文件预处理完成\"\n\n\ndef preprocess_text(data_dir):\n    assert data_dir != \"\", \"数据集名称不能为空\"\n    start_path, lbl_path, train_path, val_path, config_path = get_path(data_dir)\n    lines = open(lbl_path, \"r\", encoding=\"utf-8\").readlines()\n    with open(lbl_path, \"w\", encoding=\"utf-8\") as f:\n        for line in lines:\n            path, spk, language, text = line.strip().split(\"|\")\n            path = os.path.join(start_path, \"wavs\", os.path.basename(path)).replace(\n                \"\\\\\", \"/\"\n            )\n            f.writelines(f\"{path}|{spk}|{language}|{text}\\n\")\n    subprocess.run(\n        [\n            \"python\",\n            \"preprocess_text.py\",\n            \"--transcription-path\",\n            f\"{lbl_path}\",\n            \"--train-path\",\n            f\"{train_path}\",\n            \"--val-path\",\n            f\"{val_path}\",\n            \"--config-path\",\n            f\"{config_path}\",\n        ]\n    )\n    return \"标签文件预处理完成\"\n\n\ndef bert_gen(data_dir):\n    assert data_dir != \"\", \"数据集名称不能为空\"\n    _, _, _, _, config_path = get_path(data_dir)\n    subprocess.run([\"python\", \"bert_gen.py\", \"--config\", f\"{config_path}\"])\n    return \"BERT 特征文件生成完成\"\n\n\nif __name__ == \"__main__\":\n    with gr.Blocks() as app:\n        with gr.Row():\n            with gr.Column():\n                _ = gr.Markdown(\n                    value=\"# Bert-VITS2 数据预处理\\n\"\n                    \"## 预先准备：\\n\"\n                    \"下载 BERT 和 WavLM 模型：\\n\"\n                    \"- [中文 RoBERTa](https://huggingface.co/hfl/chinese-roberta-wwm-ext-large)\\n\"\n                    \"- [日文 DeBERTa](https://huggingface.co/ku-nlp/deberta-v2-large-japanese-char-wwm)\\n\"\n                    \"- [英文 DeBERTa](https://huggingface.co/microsoft/deberta-v3-large)\\n\"\n                    \"- [WavLM](https://huggingface.co/microsoft/wavlm-base-plus)\\n\"\n                    \"\\n\"\n                    \"将 BERT 模型放置到 `bert` 文件夹下，WavLM 模型放置到 `slm` 文件夹下，覆盖同名文件夹。\\n\"\n                    \"\\n\"\n                    \"数据准备：\\n\"\n                    \"将数据放置在 data 文件夹下，按照如下结构组织：\\n\"\n                    \"\\n\"\n                    \"```\\n\"\n                    \"├── data\\n\"\n                    \"│   ├── {你的数据集名称}\\n\"\n                    \"│   │   ├── esd.list\\n\"\n                    \"│   │   ├── raw\\n\"\n                    \"│   │   │   ├── ****.wav\\n\"\n                    \"│   │   │   ├── ****.wav\\n\"\n                    \"│   │   │   ├── ...\\n\"\n                    \"```\\n\"\n                    \"\\n\"\n                    \"其中，`raw` 文件夹下保存所有的音频文件，`esd.list` 文件为标签文本，格式为\\n\"\n                    \"\\n\"\n                    \"```\\n\"\n                    \"****.wav|{说话人名}|{语言 ID}|{标签文本}\\n\"\n                    \"```\\n\"\n                    \"\\n\"\n                    \"例如：\\n\"\n                    \"```\\n\"\n                    \"vo_ABDLQ001_1_paimon_02.wav|派蒙|ZH|没什么没什么，只是平时他总是站在这里，有点奇怪而已。\\n\"\n                    \"noa_501_0001.wav|NOA|JP|そうだね、油断しないのはとても大事なことだと思う\\n\"\n                    \"Albedo_vo_ABDLQ002_4_albedo_01.wav|Albedo|EN|Who are you? Why did you alarm them?\\n\"\n                    \"...\\n\"\n                    \"```\\n\"\n                )\n                data_dir = gr.Textbox(\n                    label=\"数据集名称\",\n                    placeholder=\"你放置在 data 文件夹下的数据集所在文件夹的名称，如 data/genshin 则填 genshin\",\n                )\n                info = gr.Textbox(label=\"状态信息\")\n                _ = gr.Markdown(value=\"## 第一步：生成配置文件\")\n                with gr.Row():\n                    batch_size = gr.Slider(\n                        label=\"批大小（Batch size）：24 GB 显存可用 12\",\n                        value=8,\n                        minimum=1,\n                        maximum=64,\n                        step=1,\n                    )\n                    generate_config_btn = gr.Button(value=\"执行\", variant=\"primary\")\n                _ = gr.Markdown(value=\"## 第二步：预处理音频文件\")\n                resample_btn = gr.Button(value=\"执行\", variant=\"primary\")\n                _ = gr.Markdown(value=\"## 第三步：预处理标签文件\")\n                preprocess_text_btn = gr.Button(value=\"执行\", variant=\"primary\")\n                _ = gr.Markdown(value=\"## 第四步：生成 BERT 特征文件\")\n                bert_gen_btn = gr.Button(value=\"执行\", variant=\"primary\")\n                _ = gr.Markdown(\n                    value=\"## 训练模型及部署：\\n\"\n                    \"修改根目录下的 `config.yml` 中 `dataset_path` 一项为 `data/{你的数据集名称}`\\n\"\n                    \"- 训练：将[预训练模型文件](https://openi.pcl.ac.cn/Stardust_minus/Bert-VITS2/modelmanage/show_model)（`D_0.pth`、`DUR_0.pth`、`WD_0.pth` 和 `G_0.pth`）放到 `data/{你的数据集名称}/models` 文件夹下，执行 `torchrun --nproc_per_node=1 train_ms.py` 命令（多卡运行可参考 `run_MnodesAndMgpus.sh` 中的命令。\\n\"\n                    \"- 部署：修改根目录下的 `config.yml` 中 `webui` 下 `model` 一项为 `models/{权重文件名}.pth` （如 G_10000.pth），然后执行 `python webui.py`\"\n                )\n\n        generate_config_btn.click(\n            generate_config, inputs=[data_dir, batch_size], outputs=[info]\n        )\n        resample_btn.click(resample, inputs=[data_dir], outputs=[info])\n        preprocess_text_btn.click(preprocess_text, inputs=[data_dir], outputs=[info])\n        bert_gen_btn.click(bert_gen, inputs=[data_dir], outputs=[info])\n\n    webbrowser.open(\"http://127.0.0.1:7860\")\n    app.launch(share=False, server_port=7860)\n"
        }
      ]
    }
  ]
}