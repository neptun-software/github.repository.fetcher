{
  "metadata": {
    "timestamp": 1736560662039,
    "page": 302,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lllyasviel/Omost",
      "stars": 7464,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.078125,
          "content": "hf_download/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 41.2255859375,
          "content": "# Omost\n\nOmost is a project to convert LLM's coding capability to image generation (or more accurately, image composing) capability. \n\nThe name `Omost` (pronunciation: almost) has two meanings: 1) everytime after you use Omost, your image is almost there; 2) the `O` mean \"omni\" (multi-modal) and `most` means we want to get the most out of it.\n\nOmost provides LLMs models that will write codes to compose image visual contents with Omost's virtual `Canvas` agent. This `Canvas` can be rendered by specific implementations of image generators to actually generate images.\n\nCurrently, we provide 3 pretrained LLM models based on variations of Llama3 and Phi3 (see also the model notes at the end of this page).\n\nAll models are trained with mixed data of (1) ground-truth annotations of several datasets including Open-Images, (2) extracted data by automatically annotating images, (3) reinforcement from DPO (Direct Preference Optimization, \"whether the codes can be compiled by python 3.10 or not\" as a direct preference), and (4) a small amount of tuning data from OpenAI GPT4o's multi-modal capability.\n\n# Get Started\n\nYou can just use the [official HuggingFace space](https://huggingface.co/spaces/lllyasviel/Omost).\n\nOr, you can use the below deployment (requires 8GB Nvidia VRAM):\n\n    git clone https://github.com/lllyasviel/Omost.git\n    cd Omost\n    conda create -n omost python=3.10\n    conda activate omost\n    pip install torch torchvision --index-url https://download.pytorch.org/whl/cu121\n    pip install -r requirements.txt\n    python gradio_app.py\n\n(Note that quant LLM requires `bitsandbytes` - some 9XX or 10XX or 20XX GPUs may have trouble in running it. If that happens, just use our official huggingface space.)\n\n# Screenshots\n\n(All with random seed 12345)\n\na ragged man wearing a tattered jacket in the nineteenth century：\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/6acc5eac-87e4-428b-a209-1d4b947c590c)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/c60dadfc-6e82-4582-9561-8389260714c0)\n\nthe greatest escape after the apocalypse, the hope of all humanity：\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/997d41ab-ea52-4036-898b-47c8b863acf4)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/c6653558-bfd8-40d9-95fb-c5ec1b68c289)\n\njurassic dinosaur battle：\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/7efe0b56-9da2-4967-bbb0-ed3cf4eddd23)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/f4b39798-488d-429c-bf96-27a7da6f91f7)\n\nthe supreme ruler with endless magic on a gothic throne, with undead armies kneeling:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/336b7f94-0f8e-425a-b541-6e8cd5642a2e)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/9de68d20-0c01-4cee-b656-04d59cbdc695)\n\na funny cartoon batman fights joker:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/dc751ded-f0f7-4312-8cd2-2a3aced15a60)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/f3e6e8e8-2e08-4e5e-a109-a8054461e71f)\n\n# Example Transcripts (with Conversational Editing)\n\n*(Below is a raw transcript from default model, with random seed 123456)*\n\n*(If the GitHub's code block rendering is causing troubles to reading long lines, click [here](https://raw.githubusercontent.com/lllyasviel/Omost/main/README.md) to read raw texts.)*\n\n### User\n\ngenerate an image of the fierce battle of warriors and the dragon\n\n### Assistant\n\n```python\n# Initialize the canvas\ncanvas = Canvas()\n\n# Set a global description for the canvas\ncanvas.set_global_description(\n    description='A fierce battle between warriors and a dragon.',\n    detailed_descriptions=[\n        'In this intense scene, a group of fierce warriors is engaged in an epic battle with a mighty dragon.',\n        'The warriors, clad in armor and wielding swords and shields, are positioned on the left side of the image.',\n        'Their expressions are determined and focused, reflecting their resolve to defeat the dragon.',\n        'The dragon, with its massive wings spread wide and its fiery breath illuminating the scene, dominates the center of the image.',\n        'Its scales glisten with a metallic sheen, and its eyes burn with a fierce intensity.',\n        'The background is a dark, stormy sky with flashes of lightning, adding to the drama and tension of the battle.',\n        'The ground is littered with debris and the remnants of previous battles, enhancing the sense of a long and brutal conflict.',\n        'The overall atmosphere is one of chaos and intensity, with the warriors and the dragon locked in a fierce struggle for survival.',\n    ],\n    tags='battle, warriors, dragon, fierce, armor, swords, shields, determined, focused, epic, intense, metallic, glistening, fiery breath, stormy sky, lightning, debris, conflict, struggle, survival, chaos, tension, drama, wings, scales, eyes, burning, illuminated',\n    HTML_web_color_name='darkslategray',\n)\n\n# Add a group of fierce warriors.\ncanvas.add_local_description(\n    location='on the left',\n    offset='no offset',\n    area='a large horizontal area',\n    distance_to_viewer=5.0,\n    description='A group of fierce warriors.',\n    detailed_descriptions=[\n        'The warriors, clad in gleaming armor, are positioned on the left side of the image.',\n        'They are armed with swords, shields, and spears, ready for battle.',\n        'Their faces are set with determination and focus, reflecting their resolve to defeat the dragon.',\n        'Some warriors are in mid-action, swinging their swords or shields, while others stand ready to strike.',\n        'The armor they wear is intricately designed, with symbols and patterns that signify their rank and bravery.',\n        'The ground beneath them is uneven and littered with debris, adding to the sense of a chaotic and intense battle.',\n    ],\n    tags='warriors, armor, swords, shields, spears, determined, focused, mid-action, intricate design, symbols, patterns, rank, bravery, uneven ground, debris, chaotic, intense, battle',\n    atmosphere='Determined and focused, ready for the fierce battle.',\n    style='Highly detailed and dynamic, capturing the intensity of the warriors.',\n    quality_meta='High resolution with intricate details and dynamic poses.',\n    HTML_web_color_name='darkgoldenrod',\n)\n\n# Add a mighty dragon.\ncanvas.add_local_description(\n    location='in the center',\n    offset='no offset',\n    area='a large square area',\n    distance_to_viewer=7.0,\n    description='A mighty dragon.',\n    detailed_descriptions=[\n        'The dragon is a massive creature, dominating the center of the image with its wide-spread wings and fiery breath.',\n        'Its scales glisten with a metallic sheen, reflecting the light from its fiery breath.',\n        \"The dragon's eyes burn with a fierce intensity, and its teeth are sharp and menacing.\",\n        'The wings of the dragon are powerful and spread wide, casting shadows over the battlefield.',\n        'The dragon’s body is muscular and covered in protective scales, with a long, sinewy tail that adds to its formidable appearance.',\n        'The fiery breath of the dragon illuminates the scene, casting a reddish glow over the warriors and the battlefield.',\n    ],\n    tags='dragon, massive, wings, fiery breath, glistening scales, metallic sheen, fierce eyes, sharp teeth, powerful wings, shadows, battlefield, muscular body, protective scales, sinewy tail, formidable, reddish glow, illumination',\n    atmosphere='Intense and menacing, with a powerful presence.',\n    style='Epic and dramatic, emphasizing the grandeur and danger of the dragon.',\n    quality_meta='High resolution with dramatic lighting and detailed textures.',\n    HTML_web_color_name='firebrick',\n)\n\n# Add a stormy sky with flashes of lightning.\ncanvas.add_local_description(\n    location='on the top',\n    offset='no offset',\n    area='a large horizontal area',\n    distance_to_viewer=10.0,\n    description='A stormy sky with flashes of lightning.',\n    detailed_descriptions=[\n        'The background of the image is a dark, stormy sky filled with swirling clouds and flashes of lightning.',\n        'The sky is turbulent, with clouds dark and foreboding, adding to the dramatic tension of the battle.',\n        'The lightning flashes illuminate the scene, casting sharp, brief lights over the warriors and the dragon.',\n        'The stormy sky creates a sense of chaos and unpredictability, heightening the intensity of the battle below.',\n        'The overall atmosphere is one of impending doom and relentless conflict, with the storm mirroring the fierce struggle between the warriors and the dragon.',\n    ],\n    tags='stormy sky, dark clouds, lightning, turbulent, foreboding, dramatic tension, illumination, chaos, unpredictability, intensity, impending doom, relentless conflict, battle, warriors, dragon, swirling clouds, sharp lights, brief lights',\n    atmosphere='Chaotic and intense, mirroring the fierce battle below.',\n    style='Dramatic and turbulent, emphasizing the conflict and tension.',\n    quality_meta='High resolution with dynamic lighting and detailed cloud textures.',\n    HTML_web_color_name='midnightblue',\n)\n\n# Add a debris-covered battlefield.\ncanvas.add_local_description(\n    location='on the bottom',\n    offset='no offset',\n    area='a large horizontal area',\n    distance_to_viewer=5.0,\n    description='A debris-covered battlefield.',\n    detailed_descriptions=[\n        'The ground of the battlefield is littered with debris, remnants of previous battles.',\n        'Broken weapons, shattered shields, and scattered armor pieces are strewn across the battlefield.',\n        'The terrain is uneven, with patches of mud and dirt, adding to the sense of a long and brutal conflict.',\n        'The debris-covered battlefield enhances the chaotic and intense atmosphere of the scene, reflecting the ferocity and duration of the battle.',\n        'The overall appearance is one of destruction and turmoil, with the remnants of previous battles serving as a grim reminder of the ongoing struggle.',\n    ],\n    tags='battlefield, debris, broken weapons, shattered shields, scattered armor, uneven terrain, mud, dirt, brutal conflict, chaos, intensity, destruction, turmoil, previous battles, ongoing struggle, remnants, ferocity, duration',\n    atmosphere='Chaotic and intense, reflecting the ferocity of the battle.',\n    style='Detailed and realistic, emphasizing the destruction and chaos.',\n    quality_meta='High resolution with detailed textures and realistic debris.',\n    HTML_web_color_name='darkolivegreen',\n)\n```\n\n### User\n\nchange the dragon to a dinosaur\n\n### Assistant\n\n```python\n# Initialize the canvas\ncanvas = Canvas()\n\n# Set a global description for the canvas\ncanvas.set_global_description(\n    description='A fierce battle between warriors and a dinosaur.',\n    detailed_descriptions=[\n        'In this intense scene, a group of fierce warriors is engaged in an epic battle with a mighty dinosaur.',\n        'The warriors, clad in armor and wielding swords and shields, are positioned on the left side of the image.',\n        'Their expressions are determined and focused, reflecting their resolve to defeat the dinosaur.',\n        'The dinosaur, with its massive body and powerful legs, dominates the center of the image.',\n        'Its scales glisten with a metallic sheen, and its eyes burn with a fierce intensity.',\n        'The background is a dark, stormy sky with flashes of lightning, adding to the drama and tension of the battle.',\n        'The ground is littered with debris and the remnants of previous battles, enhancing the sense of a long and brutal conflict.',\n        'The overall atmosphere is one of chaos and intensity, with the warriors and the dinosaur locked in a fierce struggle for survival.',\n    ],\n    tags='battle, warriors, dinosaur, fierce, armor, swords, shields, determined, focused, epic, intense, metallic, glistening, stormy sky, lightning, debris, conflict, struggle, survival, chaos, tension, drama, powerful legs, scales, eyes, burning, illuminated',\n    HTML_web_color_name='darkslategray',\n)\n\n# Add a group of fierce warriors.\ncanvas.add_local_description(\n    location='on the left',\n    offset='no offset',\n    area='a large horizontal area',\n    distance_to_viewer=5.0,\n    description='A group of fierce warriors.',\n    detailed_descriptions=[\n        'The warriors, clad in gleaming armor, are positioned on the left side of the image.',\n        'They are armed with swords, shields, and spears, ready for battle.',\n        'Their faces are set with determination and focus, reflecting their resolve to defeat the dinosaur.',\n        'Some warriors are in mid-action, swinging their swords or shields, while others stand ready to strike.',\n        'The armor they wear is intricately designed, with symbols and patterns that signify their rank and bravery.',\n        'The ground beneath them is uneven and littered with debris, adding to the sense of a chaotic and intense battle.',\n    ],\n    tags='warriors, armor, swords, shields, spears, determined, focused, mid-action, intricate design, symbols, patterns, rank, bravery, uneven ground, debris, chaotic, intense, battle',\n    atmosphere='Determined and focused, ready for the fierce battle.',\n    style='Highly detailed and dynamic, capturing the intensity of the warriors.',\n    quality_meta='High resolution with intricate details and dynamic poses.',\n    HTML_web_color_name='darkgoldenrod',\n)\n\n# Add a mighty dinosaur.\ncanvas.add_local_description(\n    location='in the center',\n    offset='no offset',\n    area='a large square area',\n    distance_to_viewer=7.0,\n    description='A mighty dinosaur.',\n    detailed_descriptions=[\n        'The dinosaur is a massive creature, dominating the center of the image with its powerful legs and fierce roar.',\n        'Its scales glisten with a metallic sheen, reflecting the light from the stormy sky.',\n        \"The dinosaur's eyes burn with a fierce intensity, and its teeth are sharp and menacing.\",\n        'The powerful legs of the dinosaur are muscular and add to its formidable appearance.',\n        'The ground shakes beneath its feet, enhancing the sense of a long and brutal conflict.',\n        'The overall appearance is one of destruction and turmoil, with the dinosaur adding to the chaotic atmosphere.',\n    ],\n    tags='dinosaur, massive, powerful legs, fierce roar, glistening scales, metallic sheen, fierce eyes, sharp teeth, muscular legs, formidable, ground shaking, destruction, turmoil, chaos, battle',\n    atmosphere='Intense and menacing, with a powerful presence.',\n    style='Epic and dramatic, emphasizing the grandeur and danger of the dinosaur.',\n    quality_meta='High resolution with dramatic lighting and detailed textures.',\n    HTML_web_color_name='firebrick',\n)\n\n# Add a stormy sky with flashes of lightning.\ncanvas.add_local_description(\n    location='on the top',\n    offset='no offset',\n    area='a large horizontal area',\n    distance_to_viewer=10.0,\n    description='A stormy sky with flashes of lightning.',\n    detailed_descriptions=[\n        'The background of the image is a dark, stormy sky filled with swirling clouds and flashes of lightning.',\n        'The sky is turbulent, with clouds dark and foreboding, adding to the dramatic tension of the battle.',\n        'The lightning flashes illuminate the scene, casting sharp, brief lights over the warriors and the dinosaur.',\n        'The stormy sky creates a sense of chaos and unpredictability, heightening the intensity of the battle below.',\n        'The overall atmosphere is one of impending doom and relentless conflict, with the storm mirroring the fierce struggle between the warriors and the dinosaur.',\n    ],\n    tags='stormy sky, dark clouds, lightning, turbulent, foreboding, dramatic tension, illumination, chaos, unpredictability, intensity, impending doom, relentless conflict, battle, warriors, dinosaur, swirling clouds, sharp lights, brief lights',\n    atmosphere='Chaotic and intense, mirroring the fierce battle below.',\n    style='Dramatic and turbulent, emphasizing the conflict and tension.',\n    quality_meta='High resolution with dynamic lighting and detailed cloud textures.',\n    HTML_web_color_name='midnightblue',\n)\n\n# Add a debris-covered battlefield.\ncanvas.add_local_description(\n    location='on the bottom',\n    offset='no offset',\n    area='a large horizontal area',\n    distance_to_viewer=5.0,\n    description='A debris-covered battlefield.',\n    detailed_descriptions=[\n        'The ground of the battlefield is littered with debris, remnants of previous battles.',\n        'Broken weapons, shattered shields, and scattered armor pieces are strewn across the battlefield.',\n        'The terrain is uneven, with patches of mud and dirt, adding to the sense of a long and brutal conflict.',\n        'The debris-covered battlefield enhances the chaotic and intense atmosphere of the scene, reflecting the ferocity and duration of the battle.',\n        'The overall appearance is one of destruction and turmoil, with the remnants of previous battles serving as a grim reminder of the ongoing struggle.',\n    ],\n    tags='battlefield, debris, broken weapons, shattered shields, scattered armor, uneven terrain, mud, dirt, brutal conflict, chaos, intensity, destruction, turmoil, previous battles, ongoing struggle, remnants, ferocity, duration',\n    atmosphere='Chaotic and intense, reflecting the ferocity of the battle.',\n    style='Detailed and realistic, emphasizing the destruction and chaos.',\n    quality_meta='High resolution with detailed textures and realistic debris.',\n    HTML_web_color_name='darkolivegreen',\n)\n```\n\n(User can click the render button to actually render the image from any of those `Canvas` instances.)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/c8d56f4c-f3e3-4338-8ffc-d9b14445fb54)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/23d8b0fb-b504-442f-a449-48a7bf613bb4)\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/39434e27-aaf9-441f-a76a-3850ff480c5f)\n\n# Symbols\n\nAll Omost LLMs are trained to obey the following symbols\n\n```python\nclass Canvas:\n    def set_global_description(\n            self, \n            description: str, \n            detailed_descriptions: list[str], \n            tags: str, \n            HTML_web_color_name: str\n    ):\n        pass\n\n    def add_local_description(\n            self, \n            location: str, \n            offset: str, \n            area: str, \n            distance_to_viewer: float, \n            description: str, \n            detailed_descriptions: list[str], \n            tags: str, \n            atmosphere: str, \n            style: str, \n            quality_meta: str, \n            HTML_web_color_name: str\n    ):\n        assert location in [\n            \"in the center\", \n            \"on the left\", \n            \"on the right\", \n            \"on the top\", \n            \"on the bottom\", \n            \"on the top-left\", \n            \"on the top-right\", \n            \"on the bottom-left\", \n            \"on the bottom-right\"\n        ]\n        assert offset in [\n            \"no offset\", \n            \"slightly to the left\", \n            \"slightly to the right\", \n            \"slightly to the upper\", \n            \"slightly to the lower\", \n            \"slightly to the upper-left\", \n            \"slightly to the upper-right\", \n            \"slightly to the lower-left\", \n            \"slightly to the lower-right\"\n        ]\n        assert area in [\n            \"a small square area\", \n            \"a small vertical area\", \n            \"a small horizontal area\", \n            \"a medium-sized square area\", \n            \"a medium-sized vertical area\", \n            \"a medium-sized horizontal area\", \n            \"a large square area\", \n            \"a large vertical area\", \n            \"a large horizontal area\"\n        ]\n        assert distance_to_viewer > 0\n        pass\n```\n\nDuring training, the above symbols are associated with specific concepts and use cases related to image generation.\n\nThe design is to make those codes easy to learn for LLMs, but also easy to handle for diffusion models.\n\nLets breakdown each part:\n\n## Function: Canvas.set_global_description and Canvas.add_local_description\n\nThey set descriptions to images. The meanings of the parameters are same for them, with `add_local_description` having more fields than `set_global_description`.\n\nThe `set_global_description` annotate entire image, while `add_local_description` annotates a part of image.\n\n## Parameter: description and detailed_descriptions\n\nLet us introduce a concept called \"sub-prompt\". If a prompt is less than 75 tokens, and is self-supported to describe a thing without relying on other prompts, we call it a \"sub-prompt\".\n\nThe `description` is a sub-prompt, and the `detailed_descriptions` is a list of sub-prompts.\n\nNote that each sub-prompt is strictly less than 75 tokens (and typically less than 40 tokens), you can safely encode them with any clip without worrying the truncation position affecting the semantics.\n\nThe design of sub-prompt also allows more satisfying text encoding based on greedy merge. For example, if you have \n\n    sub-prompt A: 25 tokens\n    sub-prompt B: 35 tokens\n    sub-prompt C: 5 tokens\n    sub-prompt D: 60 tokens\n    sub-prompt E: 15 tokens\n    sub-prompt F: 25 tokens\n\nand since every sub-prompt is promised to be self-supported to describe a thing independently, we can use greedy method to merge them to bags like\n\n    bag 1 {A, B, C} : 65 tokens\n    bag 2 {D} : 60 tokens\n    bag 1 {E, F} : 40 tokens\n\nwhere each bag is less than 75 tokens and can be encoded by any clip in one pass (and then concat them). \n\nEncoding texts in this way will make sure that text-encoder will never make semantic truncation mistakes. \n\nOne may ask - if all sub-prompts are less than 75 tokens with independent semantics, why not just encode them without merge and then concat? This is mainly because we want the text embedding to be more coherent. For example, lets say sub-prompt A is \"a man\" while sub-prompt B is \"handsome, professional\", then merging them before encoding will give you a more mixed text embedding concept with coherent features of a handsome professional man. \n\nAll Omost LLMs are trained to give strictly well-defined sub-prompts. You can make use of these definitions to design lossless text encoding methods.\n\n### Parameter: location, offset, area\n\nThe three parameters defines a bounding box. Note that they must obey\n\n```python\nassert location in [\n    \"in the center\", \n    \"on the left\", \n    \"on the right\", \n    \"on the top\", \n    \"on the bottom\", \n    \"on the top-left\", \n    \"on the top-right\", \n    \"on the bottom-left\", \n    \"on the bottom-right\"\n]\nassert offset in [\n    \"no offset\", \n    \"slightly to the left\", \n    \"slightly to the right\", \n    \"slightly to the upper\", \n    \"slightly to the lower\", \n    \"slightly to the upper-left\", \n    \"slightly to the upper-right\", \n    \"slightly to the lower-left\", \n    \"slightly to the lower-right\"\n]\nassert area in [\n    \"a small square area\", \n    \"a small vertical area\", \n    \"a small horizontal area\", \n    \"a medium-sized square area\", \n    \"a medium-sized vertical area\", \n    \"a medium-sized horizontal area\", \n    \"a large square area\", \n    \"a large vertical area\", \n    \"a large horizontal area\"\n]\n```\n\nFirst we divide a canvas into 3*3=9 locations:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/5d39cf93-c229-4c83-ae82-3eeeae2fabea)\n\nThen we further divide each location to 3\\*3 offsets, resulting in 9\\*9=81 positions:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/b744d787-11f3-4aeb-9d3a-aeba7a41b433)\n\nUsing these positions as centers, we further define 9 types of bounding boxes:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/0e484b73-680f-486b-8b61-4373c9eec9a0)\n\nWe can see that this method allows 9\\*9\\*9=729 different bounding boxes, covering almost all common possible locations of an object in the image.\n\nOne may argue that why this is necessary - why not just let the LLMs to learn pixel index or x, y coordinates - and should that be much more accurate? Below is several of my notes:\n\n1. I have tried several representations, including pixel index like {x=32, y=16, w=58, h=99}, or margin pixels like {left=32, right=15, top=27, bottom=33}, or percentage pixel index like {x=0.124, y=0.65, w=0.335, h=0.251}, or percentage margin like {left=0.251, right=0.154, top=0.254, bottom=0.441}. The result is that opensource LLMs are really not very good at learning these representations even for Llama3 (perhaps GPT4o can learn it). Sometimes it works sometimes it gives completely random numbers. Note that our problem is very different from MLLM. The vision-LLM usually have image embedding as inputs and in that case estimating numeric position is like a look-up table problem and can somewhat be learned, but our case is where the LLM need to generate every composition from scratch without help of any image embedding to look-up.\n2. But the natural language like \"on the right\", \"slightly to the top-right\", \"a small vertical area\" etc, works very well. The model converges very fast and the learning is stable. It aligns to the pretrained knowledge of LLMs very well.\n3. I have also tried adding some special tokens to represent spatial locations and also train the embedding layers. But that model is very difficult to train and debug. Also, the token-embedding-based method needs many hyperparameter tuning everytime we change the LLM - for example when changing from Llama3 to Phi, if we use the token-embedding method, we need to design training parameters again.\n4. The number 9\\*9\\*9=729 is not really a small number from the perspective of bounding box proposals. This can also be called ROI (region of interest) and some old semantic segmentation tech uses (RPN) Region Proposal Network to produce a similar number (<1000) of regions.\n5. Most region-guided diffusion methods are coarse-level methods (like multi-diffusion and attention couple and gligen), and they do not need pixel-perfect regions.\n6. These are very personal results from me - if you are working on some similar multi-modal LLM research, using pixel indices is completely okay, worth trying, and probably other training methods can also achieve a robust system.\n\n### Parameter: distance_to_viewer and HTML_web_color_name\n\nThe `distance_to_viewer` can be viewed as relative depth. Note that this value's absolute number is not reliable at all (because opensource LLMs are not very good at producing image-space numbers) and it should only be used in sorting elements into background-to-foreground layers.\n\nYou can always use `distance_to_viewer` to sort all local elements before rendering them using a diffusion model. The global description can be always viewed as the most far away background layer.\n\nThe `HTML_web_color_name` is one of these:\n\n```python\npossible_HTML_web_color_names = {  # r, g, b\n    'aliceblue': (240, 248, 255), 'antiquewhite': (250, 235, 215), 'aqua': (0, 255, 255),\n    'aquamarine': (127, 255, 212), 'azure': (240, 255, 255), 'beige': (245, 245, 220),\n    'bisque': (255, 228, 196), 'black': (0, 0, 0), 'blanchedalmond': (255, 235, 205), 'blue': (0, 0, 255),\n    'blueviolet': (138, 43, 226), 'brown': (165, 42, 42), 'burlywood': (222, 184, 135),\n    'cadetblue': (95, 158, 160), 'chartreuse': (127, 255, 0), 'chocolate': (210, 105, 30),\n    'coral': (255, 127, 80), 'cornflowerblue': (100, 149, 237), 'cornsilk': (255, 248, 220),\n    'crimson': (220, 20, 60), 'cyan': (0, 255, 255), 'darkblue': (0, 0, 139), 'darkcyan': (0, 139, 139),\n    'darkgoldenrod': (184, 134, 11), 'darkgray': (169, 169, 169), 'darkgrey': (169, 169, 169),\n    'darkgreen': (0, 100, 0), 'darkkhaki': (189, 183, 107), 'darkmagenta': (139, 0, 139),\n    'darkolivegreen': (85, 107, 47), 'darkorange': (255, 140, 0), 'darkorchid': (153, 50, 204),\n    'darkred': (139, 0, 0), 'darksalmon': (233, 150, 122), 'darkseagreen': (143, 188, 143),\n    'darkslateblue': (72, 61, 139), 'darkslategray': (47, 79, 79), 'darkslategrey': (47, 79, 79),\n    'darkturquoise': (0, 206, 209), 'darkviolet': (148, 0, 211), 'deeppink': (255, 20, 147),\n    'deepskyblue': (0, 191, 255), 'dimgray': (105, 105, 105), 'dimgrey': (105, 105, 105),\n    'dodgerblue': (30, 144, 255), 'firebrick': (178, 34, 34), 'floralwhite': (255, 250, 240),\n    'forestgreen': (34, 139, 34), 'fuchsia': (255, 0, 255), 'gainsboro': (220, 220, 220),\n    'ghostwhite': (248, 248, 255), 'gold': (255, 215, 0), 'goldenrod': (218, 165, 32),\n    'gray': (128, 128, 128), 'grey': (128, 128, 128), 'green': (0, 128, 0), 'greenyellow': (173, 255, 47),\n    'honeydew': (240, 255, 240), 'hotpink': (255, 105, 180), 'indianred': (205, 92, 92),\n    'indigo': (75, 0, 130), 'ivory': (255, 255, 240), 'khaki': (240, 230, 140), 'lavender': (230, 230, 250),\n    'lavenderblush': (255, 240, 245), 'lawngreen': (124, 252, 0), 'lemonchiffon': (255, 250, 205),\n    'lightblue': (173, 216, 230), 'lightcoral': (240, 128, 128), 'lightcyan': (224, 255, 255),\n    'lightgoldenrodyellow': (250, 250, 210), 'lightgray': (211, 211, 211), 'lightgrey': (211, 211, 211),\n    'lightgreen': (144, 238, 144), 'lightpink': (255, 182, 193), 'lightsalmon': (255, 160, 122),\n    'lightseagreen': (32, 178, 170), 'lightskyblue': (135, 206, 250), 'lightslategray': (119, 136, 153),\n    'lightslategrey': (119, 136, 153), 'lightsteelblue': (176, 196, 222), 'lightyellow': (255, 255, 224),\n    'lime': (0, 255, 0), 'limegreen': (50, 205, 50), 'linen': (250, 240, 230), 'magenta': (255, 0, 255),\n    'maroon': (128, 0, 0), 'mediumaquamarine': (102, 205, 170), 'mediumblue': (0, 0, 205),\n    'mediumorchid': (186, 85, 211), 'mediumpurple': (147, 112, 219), 'mediumseagreen': (60, 179, 113),\n    'mediumslateblue': (123, 104, 238), 'mediumspringgreen': (0, 250, 154),\n    'mediumturquoise': (72, 209, 204), 'mediumvioletred': (199, 21, 133), 'midnightblue': (25, 25, 112),\n    'mintcream': (245, 255, 250), 'mistyrose': (255, 228, 225), 'moccasin': (255, 228, 181),\n    'navajowhite': (255, 222, 173), 'navy': (0, 0, 128), 'navyblue': (0, 0, 128),\n    'oldlace': (253, 245, 230), 'olive': (128, 128, 0), 'olivedrab': (107, 142, 35),\n    'orange': (255, 165, 0), 'orangered': (255, 69, 0), 'orchid': (218, 112, 214),\n    'palegoldenrod': (238, 232, 170), 'palegreen': (152, 251, 152), 'paleturquoise': (175, 238, 238),\n    'palevioletred': (219, 112, 147), 'papayawhip': (255, 239, 213), 'peachpuff': (255, 218, 185),\n    'peru': (205, 133, 63), 'pink': (255, 192, 203), 'plum': (221, 160, 221), 'powderblue': (176, 224, 230),\n    'purple': (128, 0, 128), 'rebeccapurple': (102, 51, 153), 'red': (255, 0, 0),\n    'rosybrown': (188, 143, 143), 'royalblue': (65, 105, 225), 'saddlebrown': (139, 69, 19),\n    'salmon': (250, 128, 114), 'sandybrown': (244, 164, 96), 'seagreen': (46, 139, 87),\n    'seashell': (255, 245, 238), 'sienna': (160, 82, 45), 'silver': (192, 192, 192),\n    'skyblue': (135, 206, 235), 'slateblue': (106, 90, 205), 'slategray': (112, 128, 144),\n    'slategrey': (112, 128, 144), 'snow': (255, 250, 250), 'springgreen': (0, 255, 127),\n    'steelblue': (70, 130, 180), 'tan': (210, 180, 140), 'teal': (0, 128, 128), 'thistle': (216, 191, 216),\n    'tomato': (255, 99, 71), 'turquoise': (64, 224, 208), 'violet': (238, 130, 238),\n    'wheat': (245, 222, 179), 'white': (255, 255, 255), 'whitesmoke': (245, 245, 245),\n    'yellow': (255, 255, 0), 'yellowgreen': (154, 205, 50)\n}\n```\n\nBy combining `distance_to_viewer` and `HTML_web_color_name`, you can draw a very coarse image of the composition. For example, if the LLM works well, \"a green bottle in front of a red bottle on a wood table in a dark room\" should make it possible for you to compute an image like:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/ab501872-bbcc-4fd4-8ab4-6fecd1a44d4d)\n\nYou can use this image as an initial latent and use denoise strength like 0.95 to 0.99 to generate the image.\n\nOr if you do not like this and still prefer to let diffusion models to generate from zero-mean (even when you know that most diffusion models have tsnr problems), you can ignore this image and or just use this image as a debugger.\n\nBesides, the layer sorting can also be useful in some very special attention formulation - we will discuss this later.\n\n# Parameter: tags and atmosphere and style and quality_meta\n\nThe `tags` is designed as a possible replacement for the `description` since many diffusion models prefer tags. If used with anime models, one may hard code some logics to replace all \"girl\" to \"1girl\". If used with Pony then probably always hard code adding \"score_9, score_8 ...\" to this.\n\nThe `atmosphere` and `style` and `quality_meta` are some experimental parameters without very specific use cases. Current we can just treat them as sub-prompts and involve them in the greedy merge of sub-prompt bags. This in my experiments will improve the atmosphere and quality a bit.\n\n# A Baseline Renderer\n\nIn this repo, we provide a baseline render for Omost LLMs based on attention manipulation.\n\n### Regional Prompter\n\nAs of 2024, if we want to achieve a region guided diffusion system, some possible options are:\n\n1. multi-diffusion / mixture-of-diffusers: these method run UNet on different locations, and then merge the estimated epsilon or x0 using weights or masks for different regions.\n2. attention decomposition: lets say attention is like `y=softmax(q@k)@v`, then one can achieve attention decomposition like `y=mask_A * softmax(q@k_A)@v_A + mask_B * softmax(q@k_B)@v_B` where mask_A, k_A, v_A are masks, k, v for region A; mask_B, k_B, v_B are masks, k, v for region B. This method usually yields image quality a bit better than (1) and some people call it Attention Couple or Region Prompter Attention Mode. But this method has a consideration: the mask only makes regional attention numerically possible, but it does not force the UNet to really attend its activations in those regions. That is to say, the attention is indeed masked, but there is no promise that the attention softmax will really be activated in the masked area, and there is also no promise that the attention softmax will never be activated outside the masked area.\n3. attention score manipulation: this is a more advanced method compared to (2). It directly manipulates the attention scores to make sure that the activations in mask each area are encouraged and those outside the masks are discouraged. The formulation is like `y=softmax(modify(q@k))@v` where `modify()` is a complicated non-linear function with many normalizations and tricks to change the score's distributions. This method goes beyond a simple masked attention to really make sure that those layers get wanted activations. A typical example is [Dense Diffusion](https://github.com/naver-ai/DenseDiffusion).\n4. gradient optimization: since the attention can tell us where each part is corresponding to what prompts, we can split prompts into segments and then get attention activations to each prompt segment. Then we compare those activations with external masks to compute a loss function, and back propagate the gradients. Those methods are usually very high quality but VRAM hungry and very slow. Typical methods are [BoxDiff](https://github.com/showlab/BoxDiff) and [Attend-and-Excite](https://github.com/yuval-alaluf/Attend-and-Excite).\n5. Use external control models like gligen and [InstanceDiffusion](https://github.com/frank-xwang/InstanceDiffusion). Those methods give the highest benchmark performance on region following but will also introduce some style offset to the base model since they are trained parameters. Also, those methods need to convert prompts to vectors and usually do not support prompts of arbitary length (but one can use them together with other attention methods to achieve arbitrary length).\n6. Some more possible layer options like layerdiffuse and [mulan](https://mulan-dataset.github.io/).\n\nIn this repo I wrote a baseline formulation based on (3). I consider this parameter-free formulation as a very standard baseline implementation that will almost introduce zero style offsets or quality degradation. In the future we may consider training some parametrized methods for Omost.\n\nLets consider an extremely simplified image with only 2\\*2=4 pixels:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/00f97ad6-202b-4a39-9091-da6d76b0aacb)\n\nThen we have three prompts \"two cats\", \"a black cat\", \"a white cat\", and we have their masks:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/f9f5e87c-5f82-41fe-8a49-580d3eb6f2be)\n\nThen we can draw this attention score table:\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/a77936b3-050e-4894-9252-476713144f6c)\n\nwhere the upper arrow mean that we want to encourage the activation, while the lower arrow means we want to get rid of those activation.\n\nThis manipulation directly modify attention scores and compute all prompts conditions in one single SDP attention pass. (See also the codes for more details.)\n\n### Prompt Prefix Tree\n\nIn this repo, I also included another trick that I find out to improve prompt understanding a lot. Lets call it a Prompt Prefix Tree. The motivation is that, since now that all our prompts are sub-prompts that can be merged arbitrarily (recall that all sub-prompts are strictly less than 75 tokens and typically less than 40 tokens, describe independent concepts, and can be arbitrarily merged as common prompts for clip to encode), finding a better method to merge those sub-prompts may improve the results and prompt interpretation.\n\nFor example below is a tree structure of global/local overall/detailed descriptions.\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/2b3a895f-9bb5-4da8-9d5d-989bac9c1a7e)\n\nThe idea is that, since all sub-prompts can be merged arbitrarily, we can use the paths in this tree graph as prompts.\n\nFor example the below path will give a prompt \"A cat and a dog. The cat on sofa.\"\n\n![image](https://github.com/lllyasviel/Omost/assets/19834515/902ec939-65be-4232-912b-d1bc6f5da44f)\n\nNote that we can use this together with greedy subprompt bag merging when a path exceed 75 tokens. And, if a path has remaining place to contain more subprompts, the greedy subprompt bag merging will also take care of it. And again, since all sub prompts describe independent concepts, the greedy subprompt bag merging never makes semantic truncation mistakes. So satisfying!\n\n# Model Notes\n\nCurrently, we provide 3 models (you can get them by adding the prefix `https://huggingface.co/lllyasviel/` to the below names):\n\n    omost-llama-3-8b\n    omost-dolphin-2.9-llama3-8b\n    omost-phi-3-mini-128k\n\nAnd their quant versions:\n\n    omost-llama-3-8b-4bits\n    omost-dolphin-2.9-llama3-8b-4bits\n    omost-phi-3-mini-128k-8bits\n\nSome notes:\n\n1. The recommended quant for `omost-llama-3-8b` is 4bits, and for `omost-phi-3-mini-128k` (3.8B) is 8 bits. They all fit in 8GB VRAM without offloads. The performance degradation caused by quant is very minimal and I personally never observed any evidences of degradation. However, quant `omost-phi-3-mini-128k` into 4 bits is not recommended since I noticed some obvious performance degradation. The 4bit inference of `omost-phi-3-mini-128k` should be viewed as a last method in extreme cases when you really do not have more capable GPUs.\n2. My user study shows that `omost-llama-3-8b-4bits` > `omost-dolphin-2.9-llama3-8b-4bits` > `omost-phi-3-mini-128k-8bits`. So in most cases one should just use `omost-llama-3-8b-4bits`.\n3. The `omost-llama-3-8b` and `omost-phi-3-mini-128k` are trained with filtered safe data without NSFW or inappropriate contents. See (4) if you need a different option.\n4. The `omost-dolphin-2.9-llama3-8b` is trained with all data WITHOUT any filtering. You must apply your own safety alignment methods if you expose any service of `omost-dolphin-2.9-llama3-8b` to public.\n5. Note that the filtering in (3) is not because of any policy - the reason is that I noticed slight instability in training gradients in those models since they are pretrained with instruct following regulated by safety alignment, causing the performance to degrade a bit. But the instruct following of `omost-dolphin-2.9-llama3-8b` is pretrained with community efforts and do not have this problem.\n6. The 128k context length of `omost-phi-3-mini-128k` cannot be trusted. The performance of it will degrade a lot after the tokens reach about 8k. One should just view it as a model with about 8k content length.\n7. A model of 8k context length can do about 5 to 6 rounds of conversational editing. If you are about to run out of token lengths, use the UI to modify your message and respond again (this can be done with infinite times).\n8. All models are fully trained with our H100 clusters at precision fp16 without any tricks like quant or Q-LoRA etc. The optimizer is Adam without any tricks.\n9. You must also follow the licenses of Llama-3 and Phi-3.\n10. You can request us to train on other LLMs if reasonable and necessary.\n\n# Cite\n\n    @Misc{omost,\n      author = {Omost Team},\n      title  = {Omost GitHub Page},\n      year   = {2024},\n    }\n\n# Related Work\n\nAlso read ...\n\n[DOCCI: Descriptions of Connected and Contrasting Images](https://google.github.io/docci/)\n\n[(RPG-DiffusionMaster) Mastering Text-to-Image Diffusion: Recaptioning, Planning, and Generating with Multimodal LLMs](https://github.com/YangLing0818/RPG-DiffusionMaster)\n\n[Ranni: Taming Text-to-Image Diffusion for Accurate Instruction Following](https://arxiv.org/abs/2311.17002)\n\n[LLM-grounded Diffusion: Enhancing Prompt Understanding of Text-to-Image Diffusion Models with Large Language Models](https://arxiv.org/abs/2305.13655) and [Self-correcting LLM-controlled Diffusion Models](https://arxiv.org/abs/2311.16090)\n\n[MultiDiffusion: Fusing Diffusion Paths for Controlled Image Generation](https://multidiffusion.github.io/)\n\n[sd-webui-regional-prompter](https://github.com/hako-mikan/sd-webui-regional-prompter)\n\n(please open issue or email me if you want to add more links here)\n\n\n"
        },
        {
          "name": "chat_interface.py",
          "type": "blob",
          "size": 23.4501953125,
          "content": "\"\"\"\nThis file defines a useful high-level abstraction to build Gradio chatbots: ChatInterface.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport inspect\nfrom typing import AsyncGenerator, Callable, Literal, Union, cast\n\nimport anyio\nfrom gradio_client.documentation import document\n\nfrom gradio.blocks import Blocks\nfrom gradio.components import (\n    Button,\n    Chatbot,\n    Component,\n    Markdown,\n    MultimodalTextbox,\n    State,\n    Textbox,\n    get_component_instance,\n    Dataset,\n)\nfrom gradio.events import Dependency, on\nfrom gradio.helpers import special_args\nfrom gradio.layouts import Accordion, Group, Row\nfrom gradio.routes import Request\nfrom gradio.themes import ThemeClass as Theme\nfrom gradio.utils import SyncToAsyncIterator, async_iteration, async_lambda\n\n\n@document()\nclass ChatInterface(Blocks):\n    \"\"\"\n    ChatInterface is Gradio's high-level abstraction for creating chatbot UIs, and allows you to create\n    a web-based demo around a chatbot model in a few lines of code. Only one parameter is required: fn, which\n    takes a function that governs the response of the chatbot based on the user input and chat history. Additional\n    parameters can be used to control the appearance and behavior of the demo.\n\n    Example:\n        import gradio as gr\n\n        def echo(message, history):\n            return message\n\n        demo = gr.ChatInterface(fn=echo, examples=[\"hello\", \"hola\", \"merhaba\"], title=\"Echo Bot\")\n        demo.launch()\n    Demos: chatinterface_multimodal, chatinterface_random_response, chatinterface_streaming_echo\n    Guides: creating-a-chatbot-fast, sharing-your-app\n    \"\"\"\n\n    def __init__(\n        self,\n        fn: Callable,\n        post_fn: Callable,\n        pre_fn: Callable,\n        chatbot: Chatbot,\n        *,\n        post_fn_kwargs: dict = None,\n        pre_fn_kwargs: dict = None,\n        multimodal: bool = False,\n        textbox: Textbox | MultimodalTextbox | None = None,\n        additional_inputs: str | Component | list[str | Component] | None = None,\n        additional_inputs_accordion_name: str | None = None,\n        additional_inputs_accordion: str | Accordion | None = None,\n        examples: Dataset = None,\n        title: str | None = None,\n        description: str | None = None,\n        theme: Theme | str | None = None,\n        css: str | None = None,\n        js: str | None = None,\n        head: str | None = None,\n        analytics_enabled: bool | None = None,\n        submit_btn: str | None | Button = \"Submit\",\n        stop_btn: str | None | Button = \"Stop\",\n        retry_btn: str | None | Button = \"🔄  Retry\",\n        undo_btn: str | None | Button = \"↩️ Undo\",\n        clear_btn: str | None | Button = \"🗑️  Clear\",\n        autofocus: bool = True,\n        concurrency_limit: int | None | Literal[\"default\"] = \"default\",\n        fill_height: bool = True,\n        delete_cache: tuple[int, int] | None = None,\n    ):\n        super().__init__(\n            analytics_enabled=analytics_enabled,\n            mode=\"chat_interface\",\n            css=css,\n            title=title or \"Gradio\",\n            theme=theme,\n            js=js,\n            head=head,\n            fill_height=fill_height,\n            delete_cache=delete_cache,\n        )\n\n        if post_fn_kwargs is None:\n            post_fn_kwargs = []\n\n        self.post_fn = post_fn\n        self.post_fn_kwargs = post_fn_kwargs\n\n        self.pre_fn = pre_fn\n        self.pre_fn_kwargs = pre_fn_kwargs\n\n        self.interrupter = State(None)\n\n        self.multimodal = multimodal\n        self.concurrency_limit = concurrency_limit\n        self.fn = fn\n        self.is_async = inspect.iscoroutinefunction(\n            self.fn\n        ) or inspect.isasyncgenfunction(self.fn)\n        self.is_generator = inspect.isgeneratorfunction(\n            self.fn\n        ) or inspect.isasyncgenfunction(self.fn)\n\n        if additional_inputs:\n            if not isinstance(additional_inputs, list):\n                additional_inputs = [additional_inputs]\n            self.additional_inputs = [\n                get_component_instance(i)\n                for i in additional_inputs  # type: ignore\n            ]\n        else:\n            self.additional_inputs = []\n        if additional_inputs_accordion_name is not None:\n            print(\n                \"The `additional_inputs_accordion_name` parameter is deprecated and will be removed in a future version of Gradio. Use the `additional_inputs_accordion` parameter instead.\"\n            )\n            self.additional_inputs_accordion_params = {\n                \"label\": additional_inputs_accordion_name\n            }\n        if additional_inputs_accordion is None:\n            self.additional_inputs_accordion_params = {\n                \"label\": \"Additional Inputs\",\n                \"open\": False,\n            }\n        elif isinstance(additional_inputs_accordion, str):\n            self.additional_inputs_accordion_params = {\n                \"label\": additional_inputs_accordion\n            }\n        elif isinstance(additional_inputs_accordion, Accordion):\n            self.additional_inputs_accordion_params = (\n                additional_inputs_accordion.recover_kwargs(\n                    additional_inputs_accordion.get_config()\n                )\n            )\n        else:\n            raise ValueError(\n                f\"The `additional_inputs_accordion` parameter must be a string or gr.Accordion, not {type(additional_inputs_accordion)}\"\n            )\n\n        with self:\n            if title:\n                Markdown(\n                    f\"<h1 style='text-align: center; margin-bottom: 1rem'>{self.title}</h1>\"\n                )\n            if description:\n                Markdown(description)\n\n            self.chatbot = chatbot.render()\n\n            self.buttons = [retry_btn, undo_btn, clear_btn]\n\n            with Group():\n                with Row():\n                    if textbox:\n                        if self.multimodal:\n                            submit_btn = None\n                        else:\n                            textbox.container = False\n                        textbox.show_label = False\n                        textbox_ = textbox.render()\n                        if not isinstance(textbox_, (Textbox, MultimodalTextbox)):\n                            raise TypeError(\n                                f\"Expected a gr.Textbox or gr.MultimodalTextbox component, but got {type(textbox_)}\"\n                            )\n                        self.textbox = textbox_\n                    elif self.multimodal:\n                        submit_btn = None\n                        self.textbox = MultimodalTextbox(\n                            show_label=False,\n                            label=\"Message\",\n                            placeholder=\"Type a message...\",\n                            scale=7,\n                            autofocus=autofocus,\n                        )\n                    else:\n                        self.textbox = Textbox(\n                            container=False,\n                            show_label=False,\n                            label=\"Message\",\n                            placeholder=\"Type a message...\",\n                            scale=7,\n                            autofocus=autofocus,\n                        )\n                    if submit_btn is not None and not multimodal:\n                        if isinstance(submit_btn, Button):\n                            submit_btn.render()\n                        elif isinstance(submit_btn, str):\n                            submit_btn = Button(\n                                submit_btn,\n                                variant=\"primary\",\n                                scale=1,\n                                min_width=150,\n                            )\n                        else:\n                            raise ValueError(\n                                f\"The submit_btn parameter must be a gr.Button, string, or None, not {type(submit_btn)}\"\n                            )\n                    if stop_btn is not None:\n                        if isinstance(stop_btn, Button):\n                            stop_btn.visible = False\n                            stop_btn.render()\n                        elif isinstance(stop_btn, str):\n                            stop_btn = Button(\n                                stop_btn,\n                                variant=\"stop\",\n                                visible=False,\n                                scale=1,\n                                min_width=150,\n                            )\n                        else:\n                            raise ValueError(\n                                f\"The stop_btn parameter must be a gr.Button, string, or None, not {type(stop_btn)}\"\n                            )\n                    self.buttons.extend([submit_btn, stop_btn])  # type: ignore\n\n                self.fake_api_btn = Button(\"Fake API\", visible=False)\n                self.fake_response_textbox = Textbox(label=\"Response\", visible=False)\n                (\n                    self.retry_btn,\n                    self.undo_btn,\n                    self.clear_btn,\n                    self.submit_btn,\n                    self.stop_btn,\n                ) = self.buttons\n\n            any_unrendered_inputs = any(\n                not inp.is_rendered for inp in self.additional_inputs\n            )\n            if self.additional_inputs and any_unrendered_inputs:\n                with Accordion(**self.additional_inputs_accordion_params):  # type: ignore\n                    for input_component in self.additional_inputs:\n                        if not input_component.is_rendered:\n                            input_component.render()\n\n            self.saved_input = State()\n            self.chatbot_state = (\n                State(self.chatbot.value) if self.chatbot.value else State([])\n            )\n\n            self._setup_events()\n            self._setup_api()\n\n        if examples:\n            examples.click(lambda x: x[0], inputs=[examples], outputs=self.textbox, show_progress=False, queue=False)\n\n    def _setup_events(self) -> None:\n        submit_fn = self._stream_fn if self.is_generator else self._submit_fn\n        submit_triggers = (\n            [self.textbox.submit, self.submit_btn.click]\n            if self.submit_btn\n            else [self.textbox.submit]\n        )\n        submit_event = (\n            on(\n                submit_triggers,\n                self._clear_and_save_textbox,\n                [self.textbox],\n                [self.textbox, self.saved_input],\n                show_api=False,\n                queue=False,\n            )\n            .then(\n                self.pre_fn,\n                **self.pre_fn_kwargs,\n                show_api=False,\n                queue=False,\n            )\n            .then(\n                self._display_input,\n                [self.saved_input, self.chatbot_state],\n                [self.chatbot, self.chatbot_state],\n                show_api=False,\n                queue=False,\n            )\n            .then(\n                submit_fn,\n                [self.saved_input, self.chatbot_state] + self.additional_inputs,\n                [self.chatbot, self.chatbot_state, self.interrupter],\n                show_api=False,\n                concurrency_limit=cast(\n                    Union[int, Literal[\"default\"], None], self.concurrency_limit\n                ),\n            ).then(\n                self.post_fn,\n                **self.post_fn_kwargs,\n                show_api=False,\n                concurrency_limit=cast(\n                    Union[int, Literal[\"default\"], None], self.concurrency_limit\n                ),\n            )\n        )\n        self._setup_stop_events(submit_triggers, submit_event)\n\n        if self.retry_btn:\n            retry_event = (\n                self.retry_btn.click(\n                    self._delete_prev_fn,\n                    [self.saved_input, self.chatbot_state],\n                    [self.chatbot, self.saved_input, self.chatbot_state],\n                    show_api=False,\n                    queue=False,\n                )\n                .then(\n                    self.pre_fn,\n                    **self.pre_fn_kwargs,\n                    show_api=False,\n                    queue=False,\n                )\n                .then(\n                    self._display_input,\n                    [self.saved_input, self.chatbot_state],\n                    [self.chatbot, self.chatbot_state],\n                    show_api=False,\n                    queue=False,\n                )\n                .then(\n                    submit_fn,\n                    [self.saved_input, self.chatbot_state] + self.additional_inputs,\n                    [self.chatbot, self.chatbot_state],\n                    show_api=False,\n                    concurrency_limit=cast(\n                        Union[int, Literal[\"default\"], None], self.concurrency_limit\n                    ),\n                ).then(\n                self.post_fn,\n                **self.post_fn_kwargs,\n                show_api=False,\n                concurrency_limit=cast(\n                    Union[int, Literal[\"default\"], None], self.concurrency_limit\n                ),\n            )\n            )\n            self._setup_stop_events([self.retry_btn.click], retry_event)\n\n        if self.undo_btn:\n            self.undo_btn.click(\n                self._delete_prev_fn,\n                [self.saved_input, self.chatbot_state],\n                [self.chatbot, self.saved_input, self.chatbot_state],\n                show_api=False,\n                queue=False,\n            ).then(\n                self.pre_fn,\n                **self.pre_fn_kwargs,\n                show_api=False,\n                queue=False,\n            ).then(\n                async_lambda(lambda x: x),\n                [self.saved_input],\n                [self.textbox],\n                show_api=False,\n                queue=False,\n            ).then(\n                self.post_fn,\n                **self.post_fn_kwargs,\n                show_api=False,\n                concurrency_limit=cast(\n                    Union[int, Literal[\"default\"], None], self.concurrency_limit\n                ),\n            )\n\n        if self.clear_btn:\n            self.clear_btn.click(\n                async_lambda(lambda: ([], [], None)),\n                None,\n                [self.chatbot, self.chatbot_state, self.saved_input],\n                queue=False,\n                show_api=False,\n            ).then(\n                self.pre_fn,\n                **self.pre_fn_kwargs,\n                show_api=False,\n                queue=False,\n            ).then(\n                self.post_fn,\n                **self.post_fn_kwargs,\n                show_api=False,\n                concurrency_limit=cast(\n                    Union[int, Literal[\"default\"], None], self.concurrency_limit\n                ),\n            )\n\n    def _setup_stop_events(\n        self, event_triggers: list[Callable], event_to_cancel: Dependency\n    ) -> None:\n        def perform_interrupt(ipc):\n            if ipc is not None:\n                ipc()\n            return\n\n        if self.stop_btn and self.is_generator:\n            if self.submit_btn:\n                for event_trigger in event_triggers:\n                    event_trigger(\n                        async_lambda(\n                            lambda: (\n                                Button(visible=False),\n                                Button(visible=True),\n                            )\n                        ),\n                        None,\n                        [self.submit_btn, self.stop_btn],\n                        show_api=False,\n                        queue=False,\n                    )\n                event_to_cancel.then(\n                    async_lambda(lambda: (Button(visible=True), Button(visible=False))),\n                    None,\n                    [self.submit_btn, self.stop_btn],\n                    show_api=False,\n                    queue=False,\n                )\n            else:\n                for event_trigger in event_triggers:\n                    event_trigger(\n                        async_lambda(lambda: Button(visible=True)),\n                        None,\n                        [self.stop_btn],\n                        show_api=False,\n                        queue=False,\n                    )\n                event_to_cancel.then(\n                    async_lambda(lambda: Button(visible=False)),\n                    None,\n                    [self.stop_btn],\n                    show_api=False,\n                    queue=False,\n                )\n            self.stop_btn.click(\n                fn=perform_interrupt,\n                inputs=[self.interrupter],\n                cancels=event_to_cancel,\n                show_api=False,\n            )\n\n    def _setup_api(self) -> None:\n        api_fn = self._api_stream_fn if self.is_generator else self._api_submit_fn\n\n        self.fake_api_btn.click(\n            api_fn,\n            [self.textbox, self.chatbot_state] + self.additional_inputs,\n            [self.textbox, self.chatbot_state],\n            api_name=\"chat\",\n            concurrency_limit=cast(\n                Union[int, Literal[\"default\"], None], self.concurrency_limit\n            ),\n        )\n\n    def _clear_and_save_textbox(self, message: str) -> tuple[str | dict, str]:\n        if self.multimodal:\n            return {\"text\": \"\", \"files\": []}, message\n        else:\n            return \"\", message\n\n    def _append_multimodal_history(\n        self,\n        message: dict[str, list],\n        response: str | None,\n        history: list[list[str | tuple | None]],\n    ):\n        for x in message[\"files\"]:\n            history.append([(x,), None])\n        if message[\"text\"] is None or not isinstance(message[\"text\"], str):\n            return\n        elif message[\"text\"] == \"\" and message[\"files\"] != []:\n            history.append([None, response])\n        else:\n            history.append([message[\"text\"], response])\n\n    async def _display_input(\n        self, message: str | dict[str, list], history: list[list[str | tuple | None]]\n    ) -> tuple[list[list[str | tuple | None]], list[list[str | tuple | None]]]:\n        if self.multimodal and isinstance(message, dict):\n            self._append_multimodal_history(message, None, history)\n        elif isinstance(message, str):\n            history.append([message, None])\n        return history, history\n\n    async def _submit_fn(\n        self,\n        message: str | dict[str, list],\n        history_with_input: list[list[str | tuple | None]],\n        request: Request,\n        *args,\n    ) -> tuple[list[list[str | tuple | None]], list[list[str | tuple | None]]]:\n        if self.multimodal and isinstance(message, dict):\n            remove_input = (\n                len(message[\"files\"]) + 1\n                if message[\"text\"] is not None\n                else len(message[\"files\"])\n            )\n            history = history_with_input[:-remove_input]\n        else:\n            history = history_with_input[:-1]\n        inputs, _, _ = special_args(\n            self.fn, inputs=[message, history, *args], request=request\n        )\n\n        if self.is_async:\n            response = await self.fn(*inputs)\n        else:\n            response = await anyio.to_thread.run_sync(\n                self.fn, *inputs, limiter=self.limiter\n            )\n\n        if self.multimodal and isinstance(message, dict):\n            self._append_multimodal_history(message, response, history)\n        elif isinstance(message, str):\n            history.append([message, response])\n        return history, history\n\n    async def _stream_fn(\n        self,\n        message: str | dict[str, list],\n        history_with_input: list[list[str | tuple | None]],\n        request: Request,\n        *args,\n    ) -> AsyncGenerator:\n        if self.multimodal and isinstance(message, dict):\n            remove_input = (\n                len(message[\"files\"]) + 1\n                if message[\"text\"] is not None\n                else len(message[\"files\"])\n            )\n            history = history_with_input[:-remove_input]\n        else:\n            history = history_with_input[:-1]\n        inputs, _, _ = special_args(\n            self.fn, inputs=[message, history, *args], request=request\n        )\n\n        if self.is_async:\n            generator = self.fn(*inputs)\n        else:\n            generator = await anyio.to_thread.run_sync(\n                self.fn, *inputs, limiter=self.limiter\n            )\n            generator = SyncToAsyncIterator(generator, self.limiter)\n        try:\n            first_response, first_interrupter = await async_iteration(generator)\n            if self.multimodal and isinstance(message, dict):\n                for x in message[\"files\"]:\n                    history.append([(x,), None])\n                update = history + [[message[\"text\"], first_response]]\n                yield update, update\n            else:\n                update = history + [[message, first_response]]\n                yield update, update, first_interrupter\n        except StopIteration:\n            if self.multimodal and isinstance(message, dict):\n                self._append_multimodal_history(message, None, history)\n                yield history, history\n            else:\n                update = history + [[message, None]]\n                yield update, update, first_interrupter\n        async for response, interrupter in generator:\n            if self.multimodal and isinstance(message, dict):\n                update = history + [[message[\"text\"], response]]\n                yield update, update\n            else:\n                update = history + [[message, response]]\n                yield update, update, interrupter\n\n    async def _api_submit_fn(\n        self, message: str, history: list[list[str | None]], request: Request, *args\n    ) -> tuple[str, list[list[str | None]]]:\n        inputs, _, _ = special_args(\n            self.fn, inputs=[message, history, *args], request=request\n        )\n\n        if self.is_async:\n            response = await self.fn(*inputs)\n        else:\n            response = await anyio.to_thread.run_sync(\n                self.fn, *inputs, limiter=self.limiter\n            )\n        history.append([message, response])\n        return response, history\n\n    async def _api_stream_fn(\n        self, message: str, history: list[list[str | None]], request: Request, *args\n    ) -> AsyncGenerator:\n        inputs, _, _ = special_args(\n            self.fn, inputs=[message, history, *args], request=request\n        )\n\n        if self.is_async:\n            generator = self.fn(*inputs)\n        else:\n            generator = await anyio.to_thread.run_sync(\n                self.fn, *inputs, limiter=self.limiter\n            )\n            generator = SyncToAsyncIterator(generator, self.limiter)\n        try:\n            first_response = await async_iteration(generator)\n            yield first_response, history + [[message, first_response]]\n        except StopIteration:\n            yield None, history + [[message, None]]\n        async for response in generator:\n            yield response, history + [[message, response]]\n\n    async def _delete_prev_fn(\n        self,\n        message: str | dict[str, list],\n        history: list[list[str | tuple | None]],\n    ) -> tuple[\n        list[list[str | tuple | None]],\n        str | dict[str, list],\n        list[list[str | tuple | None]],\n    ]:\n        if self.multimodal and isinstance(message, dict):\n            remove_input = (\n                len(message[\"files\"]) + 1\n                if message[\"text\"] is not None\n                else len(message[\"files\"])\n            )\n            history = history[:-remove_input]\n        else:\n            while history:\n                deleted_a, deleted_b = history[-1]\n                history = history[:-1]\n                if isinstance(deleted_a, str) and isinstance(deleted_b, str):\n                    break\n        return history, message or \"\", history\n"
        },
        {
          "name": "gradio_app.py",
          "type": "blob",
          "size": 14.4443359375,
          "content": "import os\n\nos.environ['HF_HOME'] = os.path.join(os.path.dirname(__file__), 'hf_download')\nHF_TOKEN = None\n\nimport lib_omost.memory_management as memory_management\nimport uuid\n\nimport torch\nimport numpy as np\nimport gradio as gr\nimport tempfile\n\ngradio_temp_dir = os.path.join(tempfile.gettempdir(), 'gradio')\nos.makedirs(gradio_temp_dir, exist_ok=True)\n\nfrom threading import Thread\n\n# Phi3 Hijack\nfrom transformers.models.phi3.modeling_phi3 import Phi3PreTrainedModel\n\nPhi3PreTrainedModel._supports_sdpa = True\n\nfrom PIL import Image\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, TextIteratorStreamer\nfrom diffusers import AutoencoderKL, UNet2DConditionModel\nfrom diffusers.models.attention_processor import AttnProcessor2_0\nfrom transformers import CLIPTextModel, CLIPTokenizer\nfrom lib_omost.pipeline import StableDiffusionXLOmostPipeline\nfrom chat_interface import ChatInterface\nfrom transformers.generation.stopping_criteria import StoppingCriteriaList\n\nimport lib_omost.canvas as omost_canvas\n\n\n# SDXL\n\nsdxl_name = 'SG161222/RealVisXL_V4.0'\n# sdxl_name = 'stabilityai/stable-diffusion-xl-base-1.0'\n\ntokenizer = CLIPTokenizer.from_pretrained(\n    sdxl_name, subfolder=\"tokenizer\")\ntokenizer_2 = CLIPTokenizer.from_pretrained(\n    sdxl_name, subfolder=\"tokenizer_2\")\ntext_encoder = CLIPTextModel.from_pretrained(\n    sdxl_name, subfolder=\"text_encoder\", torch_dtype=torch.float16, variant=\"fp16\")\ntext_encoder_2 = CLIPTextModel.from_pretrained(\n    sdxl_name, subfolder=\"text_encoder_2\", torch_dtype=torch.float16, variant=\"fp16\")\nvae = AutoencoderKL.from_pretrained(\n    sdxl_name, subfolder=\"vae\", torch_dtype=torch.bfloat16, variant=\"fp16\")  # bfloat16 vae\nunet = UNet2DConditionModel.from_pretrained(\n    sdxl_name, subfolder=\"unet\", torch_dtype=torch.float16, variant=\"fp16\")\n\nunet.set_attn_processor(AttnProcessor2_0())\nvae.set_attn_processor(AttnProcessor2_0())\n\npipeline = StableDiffusionXLOmostPipeline(\n    vae=vae,\n    text_encoder=text_encoder,\n    tokenizer=tokenizer,\n    text_encoder_2=text_encoder_2,\n    tokenizer_2=tokenizer_2,\n    unet=unet,\n    scheduler=None,  # We completely give up diffusers sampling system and use A1111's method\n)\n\nmemory_management.unload_all_models([text_encoder, text_encoder_2, vae, unet])\n\n# LLM\n\n# llm_name = 'lllyasviel/omost-phi-3-mini-128k-8bits'\nllm_name = 'lllyasviel/omost-llama-3-8b-4bits'\n# llm_name = 'lllyasviel/omost-dolphin-2.9-llama3-8b-4bits'\n\nllm_model = AutoModelForCausalLM.from_pretrained(\n    llm_name,\n    torch_dtype=torch.bfloat16,  # This is computation type, not load/memory type. The loading quant type is baked in config.\n    token=HF_TOKEN,\n    device_map=\"auto\"  # This will load model to gpu with an offload system\n)\n\nllm_tokenizer = AutoTokenizer.from_pretrained(\n    llm_name,\n    token=HF_TOKEN\n)\n\nmemory_management.unload_all_models(llm_model)\n\n\n@torch.inference_mode()\ndef pytorch2numpy(imgs):\n    results = []\n    for x in imgs:\n        y = x.movedim(0, -1)\n        y = y * 127.5 + 127.5\n        y = y.detach().float().cpu().numpy().clip(0, 255).astype(np.uint8)\n        results.append(y)\n    return results\n\n\n@torch.inference_mode()\ndef numpy2pytorch(imgs):\n    h = torch.from_numpy(np.stack(imgs, axis=0)).float() / 127.5 - 1.0\n    h = h.movedim(-1, 1)\n    return h\n\n\ndef resize_without_crop(image, target_width, target_height):\n    pil_image = Image.fromarray(image)\n    resized_image = pil_image.resize((target_width, target_height), Image.LANCZOS)\n    return np.array(resized_image)\n\n\n@torch.inference_mode()\ndef chat_fn(message: str, history: list, seed:int, temperature: float, top_p: float, max_new_tokens: int) -> str:\n    np.random.seed(int(seed))\n    torch.manual_seed(int(seed))\n\n    conversation = [{\"role\": \"system\", \"content\": omost_canvas.system_prompt}]\n\n    for user, assistant in history:\n        if isinstance(user, str) and isinstance(assistant, str):\n            if len(user) > 0 and len(assistant) > 0:\n                conversation.extend([{\"role\": \"user\", \"content\": user}, {\"role\": \"assistant\", \"content\": assistant}])\n\n    conversation.append({\"role\": \"user\", \"content\": message})\n\n    memory_management.load_models_to_gpu(llm_model)\n\n    input_ids = llm_tokenizer.apply_chat_template(\n        conversation, return_tensors=\"pt\", add_generation_prompt=True).to(llm_model.device)\n\n    streamer = TextIteratorStreamer(llm_tokenizer, timeout=10.0, skip_prompt=True, skip_special_tokens=True)\n\n    def interactive_stopping_criteria(*args, **kwargs) -> bool:\n        if getattr(streamer, 'user_interrupted', False):\n            print('User stopped generation')\n            return True\n        else:\n            return False\n\n    stopping_criteria = StoppingCriteriaList([interactive_stopping_criteria])\n\n    def interrupter():\n        streamer.user_interrupted = True\n        return\n\n    generate_kwargs = dict(\n        input_ids=input_ids,\n        streamer=streamer,\n        stopping_criteria=stopping_criteria,\n        max_new_tokens=max_new_tokens,\n        do_sample=True,\n        temperature=temperature,\n        top_p=top_p,\n    )\n\n    if temperature == 0:\n        generate_kwargs['do_sample'] = False\n\n    Thread(target=llm_model.generate, kwargs=generate_kwargs).start()\n\n    outputs = []\n    for text in streamer:\n        outputs.append(text)\n        # print(outputs)\n        yield \"\".join(outputs), interrupter\n\n    return\n\n\n@torch.inference_mode()\ndef post_chat(history):\n    canvas_outputs = None\n\n    try:\n        if history:\n            history = [(user, assistant) for user, assistant in history if isinstance(user, str) and isinstance(assistant, str)]\n            last_assistant = history[-1][1] if len(history) > 0 else None\n            canvas = omost_canvas.Canvas.from_bot_response(last_assistant)\n            canvas_outputs = canvas.process()\n    except Exception as e:\n        print('Last assistant response is not valid canvas:', e)\n\n    return canvas_outputs, gr.update(visible=canvas_outputs is not None), gr.update(interactive=len(history) > 0)\n\n\n@torch.inference_mode()\ndef diffusion_fn(chatbot, canvas_outputs, num_samples, seed, image_width, image_height,\n                 highres_scale, steps, cfg, highres_steps, highres_denoise, negative_prompt):\n\n    use_initial_latent = False\n    eps = 0.05\n\n    image_width, image_height = int(image_width // 64) * 64, int(image_height // 64) * 64\n\n    rng = torch.Generator(device=memory_management.gpu).manual_seed(seed)\n\n    memory_management.load_models_to_gpu([text_encoder, text_encoder_2])\n\n    positive_cond, positive_pooler, negative_cond, negative_pooler = pipeline.all_conds_from_canvas(canvas_outputs, negative_prompt)\n\n    if use_initial_latent:\n        memory_management.load_models_to_gpu([vae])\n        initial_latent = torch.from_numpy(canvas_outputs['initial_latent'])[None].movedim(-1, 1) / 127.5 - 1.0\n        initial_latent_blur = 40\n        initial_latent = torch.nn.functional.avg_pool2d(\n            torch.nn.functional.pad(initial_latent, (initial_latent_blur,) * 4, mode='reflect'),\n            kernel_size=(initial_latent_blur * 2 + 1,) * 2, stride=(1, 1))\n        initial_latent = torch.nn.functional.interpolate(initial_latent, (image_height, image_width))\n        initial_latent = initial_latent.to(dtype=vae.dtype, device=vae.device)\n        initial_latent = vae.encode(initial_latent).latent_dist.mode() * vae.config.scaling_factor\n    else:\n        initial_latent = torch.zeros(size=(num_samples, 4, image_height // 8, image_width // 8), dtype=torch.float32)\n\n    memory_management.load_models_to_gpu([unet])\n\n    initial_latent = initial_latent.to(dtype=unet.dtype, device=unet.device)\n\n    latents = pipeline(\n        initial_latent=initial_latent,\n        strength=1.0,\n        num_inference_steps=int(steps),\n        batch_size=num_samples,\n        prompt_embeds=positive_cond,\n        negative_prompt_embeds=negative_cond,\n        pooled_prompt_embeds=positive_pooler,\n        negative_pooled_prompt_embeds=negative_pooler,\n        generator=rng,\n        guidance_scale=float(cfg),\n    ).images\n\n    memory_management.load_models_to_gpu([vae])\n    latents = latents.to(dtype=vae.dtype, device=vae.device) / vae.config.scaling_factor\n    pixels = vae.decode(latents).sample\n    B, C, H, W = pixels.shape\n    pixels = pytorch2numpy(pixels)\n\n    if highres_scale > 1.0 + eps:\n        pixels = [\n            resize_without_crop(\n                image=p,\n                target_width=int(round(W * highres_scale / 64.0) * 64),\n                target_height=int(round(H * highres_scale / 64.0) * 64)\n            ) for p in pixels\n        ]\n\n        pixels = numpy2pytorch(pixels).to(device=vae.device, dtype=vae.dtype)\n        latents = vae.encode(pixels).latent_dist.mode() * vae.config.scaling_factor\n\n        memory_management.load_models_to_gpu([unet])\n        latents = latents.to(device=unet.device, dtype=unet.dtype)\n\n        latents = pipeline(\n            initial_latent=latents,\n            strength=highres_denoise,\n            num_inference_steps=highres_steps,\n            batch_size=num_samples,\n            prompt_embeds=positive_cond,\n            negative_prompt_embeds=negative_cond,\n            pooled_prompt_embeds=positive_pooler,\n            negative_pooled_prompt_embeds=negative_pooler,\n            generator=rng,\n            guidance_scale=float(cfg),\n        ).images\n\n        memory_management.load_models_to_gpu([vae])\n        latents = latents.to(dtype=vae.dtype, device=vae.device) / vae.config.scaling_factor\n        pixels = vae.decode(latents).sample\n        pixels = pytorch2numpy(pixels)\n\n    for i in range(len(pixels)):\n        unique_hex = uuid.uuid4().hex\n        image_path = os.path.join(gradio_temp_dir, f\"{unique_hex}_{i}.png\")\n        image = Image.fromarray(pixels[i])\n        image.save(image_path)\n        chatbot = chatbot + [(None, (image_path, 'image'))]\n\n    return chatbot\n\n\ncss = '''\ncode {white-space: pre-wrap !important;}\n.gradio-container {max-width: none !important;}\n.outer_parent {flex: 1;}\n.inner_parent {flex: 1;}\nfooter {display: none !important; visibility: hidden !important;}\n.translucent {display: none !important; visibility: hidden !important;}\n'''\n\nfrom gradio.themes.utils import colors\n\nwith gr.Blocks(\n        fill_height=True, css=css,\n        theme=gr.themes.Default(primary_hue=colors.blue, secondary_hue=colors.cyan, neutral_hue=colors.gray)\n) as demo:\n    with gr.Row(elem_classes='outer_parent'):\n        with gr.Column(scale=25):\n            with gr.Row():\n                clear_btn = gr.Button(\"➕ New Chat\", variant=\"secondary\", size=\"sm\", min_width=60)\n                retry_btn = gr.Button(\"Retry\", variant=\"secondary\", size=\"sm\", min_width=60, visible=False)\n                undo_btn = gr.Button(\"✏️️ Edit Last Input\", variant=\"secondary\", size=\"sm\", min_width=60, interactive=False)\n\n            seed = gr.Number(label=\"Random Seed\", value=12345, precision=0)\n\n            with gr.Accordion(open=True, label='Language Model'):\n                with gr.Group():\n                    with gr.Row():\n                        temperature = gr.Slider(\n                            minimum=0.0,\n                            maximum=2.0,\n                            step=0.01,\n                            value=0.6,\n                            label=\"Temperature\")\n                        top_p = gr.Slider(\n                            minimum=0.0,\n                            maximum=1.0,\n                            step=0.01,\n                            value=0.9,\n                            label=\"Top P\")\n                    max_new_tokens = gr.Slider(\n                        minimum=128,\n                        maximum=4096,\n                        step=1,\n                        value=4096,\n                        label=\"Max New Tokens\")\n            with gr.Accordion(open=True, label='Image Diffusion Model'):\n                with gr.Group():\n                    with gr.Row():\n                        image_width = gr.Slider(label=\"Image Width\", minimum=256, maximum=2048, value=896, step=64)\n                        image_height = gr.Slider(label=\"Image Height\", minimum=256, maximum=2048, value=1152, step=64)\n\n                    with gr.Row():\n                        num_samples = gr.Slider(label=\"Image Number\", minimum=1, maximum=12, value=1, step=1)\n                        steps = gr.Slider(label=\"Sampling Steps\", minimum=1, maximum=100, value=25, step=1)\n\n            with gr.Accordion(open=False, label='Advanced'):\n                cfg = gr.Slider(label=\"CFG Scale\", minimum=1.0, maximum=32.0, value=5.0, step=0.01)\n                highres_scale = gr.Slider(label=\"HR-fix Scale (\\\"1\\\" is disabled)\", minimum=1.0, maximum=2.0, value=1.0, step=0.01)\n                highres_steps = gr.Slider(label=\"Highres Fix Steps\", minimum=1, maximum=100, value=20, step=1)\n                highres_denoise = gr.Slider(label=\"Highres Fix Denoise\", minimum=0.1, maximum=1.0, value=0.4, step=0.01)\n                n_prompt = gr.Textbox(label=\"Negative Prompt\", value='lowres, bad anatomy, bad hands, cropped, worst quality')\n\n            render_button = gr.Button(\"Render the Image!\", size='lg', variant=\"primary\", visible=False)\n\n            examples = gr.Dataset(\n                samples=[\n                    ['generate an image of the fierce battle of warriors and a dragon'],\n                    ['change the dragon to a dinosaur']\n                ],\n                components=[gr.Textbox(visible=False)],\n                label='Quick Prompts'\n            )\n        with gr.Column(scale=75, elem_classes='inner_parent'):\n            canvas_state = gr.State(None)\n            chatbot = gr.Chatbot(label='Omost', scale=1, show_copy_button=True, layout=\"panel\", render=False)\n            chatInterface = ChatInterface(\n                fn=chat_fn,\n                post_fn=post_chat,\n                post_fn_kwargs=dict(inputs=[chatbot], outputs=[canvas_state, render_button, undo_btn]),\n                pre_fn=lambda: gr.update(visible=False),\n                pre_fn_kwargs=dict(outputs=[render_button]),\n                chatbot=chatbot,\n                retry_btn=retry_btn,\n                undo_btn=undo_btn,\n                clear_btn=clear_btn,\n                additional_inputs=[seed, temperature, top_p, max_new_tokens],\n                examples=examples\n            )\n\n    render_button.click(\n        fn=diffusion_fn, inputs=[\n            chatInterface.chatbot, canvas_state,\n            num_samples, seed, image_width, image_height, highres_scale,\n            steps, cfg, highres_steps, highres_denoise, n_prompt\n        ], outputs=[chatInterface.chatbot]).then(\n        fn=lambda x: x, inputs=[\n            chatInterface.chatbot\n        ], outputs=[chatInterface.chatbot_state])\n\nif __name__ == \"__main__\":\n    demo.queue().launch(inbrowser=True, server_name='0.0.0.0')\n"
        },
        {
          "name": "lib_omost",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1689453125,
          "content": "diffusers==0.28.0\ntransformers==4.41.1\ngradio==4.31.5\nbitsandbytes==0.43.1\naccelerate==0.30.1\nprotobuf==3.20\nopencv-python\ntensorboardX\nsafetensors\npillow\neinops\ntorch\npeft\n"
        }
      ]
    }
  ]
}