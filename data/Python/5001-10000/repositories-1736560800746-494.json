{
  "metadata": {
    "timestamp": 1736560800746,
    "page": 494,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ijl/orjson",
      "stars": 6442,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.130859375,
          "content": "include/pyo3/pyo3-build-config/**/* linguist-vendored\ninclude/pyo3/pyo3-ffi/**/* linguist-vendored\ninclude/yyjson/* linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.123046875,
          "content": "*.patch\n/.benchmarks\n/.coverage\n/.mypy_cache\n/.pytest_cache\n/.venv*\n/build\n/include/cargo\n/perf.*\n/target\n/vendor\n__pycache__\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.0546875,
          "content": "# Changelog\n\n\n## 3.10.14\n\n### Changed\n\n- Specify build system dependency on `maturin>=1,<2` again.\n- Allocate memory using `PyMem_Malloc()` and similar APIs for integration\nwith pymalloc, mimalloc, and tracemalloc.\n- Source distribution does not ship compressed test documents and relevant\ntests skip if fixtures are not present.\n- Build now depends on Rust 1.82 or later instead of 1.72.\n\n\n## 3.10.13\n\n### Changed\n\n- Fix compatibility with maturin introducing a breaking change in 1.8.0 and\nspecify a fixed version of maturin. Projects relying on any previous version\nbeing buildable from source by end users (via PEP 517) must upgrade to at\nleast this version.\n\n\n## 3.10.12\n\n### Changed\n\n- Publish PyPI manylinux i686 wheels.\n- Publish PyPI musllinux i686 and arm7l wheels.\n- Publish PyPI macOS wheels for Python 3.10 or later built on macOS 15.\n- Publish PyPI Windows wheels using trusted publishing.\n\n\n## 3.10.11\n\n### Changed\n\n- Improve performance of UUIDs.\n- Publish PyPI wheels with trusted publishing and PEP 740 attestations.\n- Include text of licenses for vendored dependencies.\n\n\n## 3.10.10\n\n### Fixed\n\n- Fix `int` serialization on `s390x`. This was introduced in 3.10.8.\n\n### Changed\n\n- Publish aarch64 manylinux_2_17 wheel for 3.13 to PyPI.\n\n\n## 3.10.9\n\n### Fixed\n\n- Fix `int` serialization on 32-bit Python 3.8, 3.9, 3.10. This was\nintroduced in 3.10.8.\n\n\n## 3.10.8\n\n### Changed\n\n- `int` serialization no longer chains `OverflowError` to the\nthe `__cause__` attribute of `orjson.JSONEncodeError` when range exceeded.\n- Compatibility with CPython 3.14 alpha 1.\n- Improve performance.\n\n\n## 3.10.7 - 2024-08-08\n\n### Changed\n\n- Improve performance of stable Rust amd64 builds.\n\n\n## 3.10.6 - 2024-07-02\n\n### Changed\n\n- Improve performance.\n\n\n## 3.10.5 - 2024-06-13\n\n### Changed\n\n- Improve performance.\n\n\n## 3.10.4 - 2024-06-10\n\n### Changed\n\n- Improve performance.\n\n\n## 3.10.3 - 2024-05-03\n\n### Changed\n\n- `manylinux` amd64 builds include runtime-detected AVX-512 `str`\nimplementation.\n- Tests now compatible with numpy v2.\n\n\n## 3.10.2 - 2024-05-01\n\n### Fixed\n\n- Fix crash serializing `str` introduced in 3.10.1.\n\n### Changed\n\n- Improve performance.\n- Drop support for arm7.\n\n\n## 3.10.1 - 2024-04-15\n\n### Fixed\n\n- Serializing `numpy.ndarray` with non-native endianness raises\n`orjson.JSONEncodeError`.\n\n### Changed\n\n- Improve performance of serializing.\n\n\n## 3.10.0 - 2024-03-27\n\n### Changed\n\n- Support serializing `numpy.float16` (`numpy.half`).\n- sdist uses metadata 2.3 instead of 2.1.\n- Improve Windows PyPI builds.\n\n\n## 3.9.15 - 2024-02-23\n\n### Fixed\n\n- Implement recursion limit of 1024 on `orjson.loads()`.\n- Use byte-exact read on `str` formatting SIMD path to avoid crash.\n\n\n## 3.9.14 - 2024-02-14\n\n### Fixed\n\n- Fix crash serializing `str` introduced in 3.9.11.\n\n### Changed\n\n- Build now depends on Rust 1.72 or later.\n\n\n## 3.9.13 - 2024-02-03\n\n### Fixed\n\n- Serialization `str` escape uses only 128-bit SIMD.\n- Fix compatibility with CPython 3.13 alpha 3.\n\n### Changed\n\n- Publish `musllinux_1_2` instead of `musllinux_1_1` wheels.\n- Serialization uses small integer optimization in CPython 3.12 or later.\n\n\n## 3.9.12 - 2024-01-18\n\n### Changed\n\n- Update benchmarks in README.\n\n### Fixed\n\n- Minimal `musllinux_1_1` build due to sporadic CI failure.\n\n\n## 3.9.11 - 2024-01-18\n\n### Changed\n\n- Improve performance of serializing. `str` is significantly faster. Documents\nusing `dict`, `list`, and `tuple` are somewhat faster.\n\n\n## 3.9.10 - 2023-10-26\n\n### Fixed\n\n- Fix debug assert failure on 3.12 `--profile=dev` build.\n\n\n## 3.9.9 - 2023-10-12\n\n### Changed\n\n- `orjson` module metadata explicitly marks subinterpreters as not supported.\n\n\n## 3.9.8 - 2023-10-10\n\n### Changed\n\n- Improve performance.\n- Drop support for Python 3.7.\n\n\n## 3.9.7 - 2023-09-08\n\n### Fixed\n\n- Fix crash in `orjson.loads()` due to non-reentrant handling of persistent\nbuffer. This was introduced in 3.9.3.\n- Handle some FFI removals in CPython 3.13.\n\n\n## 3.9.6 - 2023-09-07\n\n### Fixed\n\n- Fix numpy reference leak on unsupported array dtype.\n- Fix numpy.datetime64 reference handling.\n\n### Changed\n\n- Minor performance improvements.\n\n\n## 3.9.5 - 2023-08-16\n\n### Fixed\n\n- Remove futex from module import and initialization path.\n\n\n## 3.9.4 - 2023-08-07\n\n### Fixed\n\n- Fix hash builder using default values.\n- Fix non-release builds of orjson copying large deserialization buffer\nfrom stack to heap. This was introduced in 3.9.3.\n\n\n## 3.9.3 - 2023-08-06\n\n### Fixed\n\n- Fix compatibility with CPython 3.12.\n\n### Changed\n\n- Support i686/x86 32-bit Python installs on Windows.\n\n\n## 3.9.2 - 2023-07-07\n\n### Fixed\n\n- Fix the `__cause__` exception on `orjson.JSONEncodeError` possibly being\ndenormalized, i.e., of type `str` instead of `Exception`.\n\n\n## 3.9.1 - 2023-06-09\n\n### Fixed\n\n- Fix memory leak on chained tracebacks of exceptions raised in `default`. This\nwas introduced in 3.8.12.\n\n\n## 3.9.0 - 2023-06-01\n\n### Added\n\n- `orjson.Fragment` includes already-serialized JSON in a document.\n\n\n## 3.8.14 - 2023-05-25\n\n### Changed\n\n- PyPI `manylinux` wheels are compiled for `x86-64` instead of `x86-64-v2`.\n\n\n## 3.8.13 - 2023-05-23\n\n### Changed\n\n- Source distribution contains all source code required for an offline build.\n- PyPI macOS wheels use a `MACOSX_DEPLOYMENT_TARGET` of 10.15 instead of 11.\n- Build uses maturin v1.\n\n\n## 3.8.12 - 2023-05-07\n\n### Changed\n\n- Exceptions raised in `default` are now chained as the `__cause__` attribute\non `orjson.JSONEncodeError`.\n\n\n## 3.8.11 - 2023-04-27\n\n### Changed\n\n- `orjson.loads()` on an empty document has a specific error message.\n- PyPI `manylinux_2_28_x86_64` wheels are compiled for `x86-64-v2`.\n- PyPI macOS wheels are only `universal2` and compiled for\n`x86-64-v2` and `apple-m1`.\n\n\n## 3.8.10 - 2023-04-09\n\n### Fixed\n\n- Fix compatibility with CPython 3.12.0a7.\n- Fix compatibility with big-endian architectures.\n- Fix crash in serialization.\n\n### Changed\n\n- Publish musllinux 3.11 wheels.\n- Publish s390x wheels.\n\n\n## 3.8.9 - 2023-03-28\n\n### Fixed\n\n- Fix parallel initialization of orjson.\n\n\n## 3.8.8 - 2023-03-20\n\n### Changed\n\n- Publish ppc64le wheels.\n\n\n## 3.8.7 - 2023-02-28\n\n### Fixed\n\n- Use serialization backend introduced in 3.8.4 only on well-tested\nplatforms such as glibc, macOS by default.\n\n\n## 3.8.6 - 2023-02-09\n\n### Fixed\n\n- Fix crash serializing when using musl libc.\n\n### Changed\n\n- Make `python-dateutil` optional in tests.\n- Handle failure to load system timezones in tests.\n\n\n## 3.8.5 - 2023-01-10\n\n### Fixed\n\n- Fix `orjson.dumps()` invalid output on Windows.\n\n\n## 3.8.4 - 2023-01-04\n\n### Changed\n\n- Improve performance.\n\n\n## 3.8.3 - 2022-12-02\n\n### Fixed\n\n- `orjson.dumps()` accepts `option=None` per `Optional[int]` type.\n\n\n## 3.8.2 - 2022-11-20\n\n### Fixed\n\n- Fix tests on 32-bit for `numpy.intp` and `numpy.uintp`.\n\n### Changed\n\n- Build now depends on rustc 1.60 or later.\n- Support building with maturin 0.13 or 0.14.\n\n\n## 3.8.1 - 2022-10-25\n\n### Changed\n\n- Build maintenance for Python 3.11.\n\n\n## 3.8.0 - 2022-08-27\n\n### Changed\n\n- Support serializing `numpy.int16` and `numpy.uint16`.\n\n\n## 3.7.12 - 2022-08-14\n\n### Fixed\n\n- Fix datetime regression tests for tzinfo 2022b.\n\n### Changed\n\n- Improve performance.\n\n\n## 3.7.11 - 2022-07-31\n\n### Fixed\n\n- Revert `dict` iterator implementation introduced in 3.7.9.\n\n\n## 3.7.10 - 2022-07-30\n\n### Fixed\n\n- Fix serializing `dict` with deleted final item. This was introduced in 3.7.9.\n\n\n## 3.7.9 - 2022-07-29\n\n### Changed\n\n- Improve performance of serializing.\n- Improve performance of serializing pretty-printed (`orjson.OPT_INDENT_2`)\nto be much nearer to compact.\n- Improve performance of deserializing `str` input.\n- orjson now requires Rust 1.57 instead of 1.54 to build.\n\n\n## 3.7.8 - 2022-07-19\n\n### Changed\n\n- Build makes best effort instead of requiring \"--features\".\n- Build using maturin 0.13.\n\n\n## 3.7.7 - 2022-07-06\n\n### Changed\n\n- Support Python 3.11.\n\n\n## 3.7.6 - 2022-07-03\n\n### Changed\n\n- Handle unicode changes in CPython 3.12.\n- Build PyPI macOS wheels on 10.15 instead of 12 for compatibility.\n\n\n## 3.7.5 - 2022-06-28\n\n### Fixed\n\n- Fix issue serializing dicts that had keys popped and replaced. This was\nintroduced in 3.7.4.\n\n\n## 3.7.4 - 2022-06-28\n\n### Changed\n\n- Improve performance.\n\n### Fixed\n\n- Fix deallocation of `orjson.JSONDecodeError`.\n\n\n## 3.7.3 - 2022-06-23\n\n\n## Changed\n\n- Improve build.\n- Publish aarch64 musllinux wheels.\n\n\n## 3.7.2 - 2022-06-07\n\n\n## Changed\n\n- Improve deserialization performance.\n\n\n## 3.7.1 - 2022-06-03\n\n### Fixed\n\n- Type stubs for `orjson.JSONDecodeError` now inherit from\n`json.JSONDecodeError` instead of `ValueError`\n- Null-terminate the internal buffer of `orjson.dumps()` output.\n\n\n## 3.7.0 - 2022-06-03\n\n### Changed\n\n- Improve deserialization performance significantly through the use of a new\nbackend. PyPI wheels for manylinux_2_28 and macOS have it enabled. Packagers\nare advised to see the README.\n\n\n## 3.6.9 - 2022-06-01\n\n### Changed\n\n- Improve serialization and deserialization performance.\n\n\n## 3.6.8 - 2022-04-15\n\n### Fixed\n\n- Fix serialization of `numpy.datetime64(\"NaT\")` to raise on an\nunsupported type.\n\n\n## 3.6.7 - 2022-02-14\n\n### Changed\n\n- Improve performance of deserializing almost-empty documents.\n- Publish arm7l `manylinux_2_17` wheels to PyPI.\n- Publish amd4 `musllinux_1_1` wheels to PyPI.\n\n### Fixed\n\n- Fix build requiring `python` on `PATH`.\n\n\n## 3.6.6 - 2022-01-21\n\n### Changed\n\n- Improve performance of serializing `datetime.datetime` using `tzinfo` that\nare `zoneinfo.ZoneInfo`.\n\n### Fixed\n\n- Fix invalid indexing in line and column number reporting in\n`JSONDecodeError`.\n- Fix `orjson.OPT_STRICT_INTEGER` not raising an error on\nvalues exceeding a 64-bit integer maximum.\n\n\n## 3.6.5 - 2021-12-05\n\n### Fixed\n\n- Fix build on macOS aarch64 CPython 3.10.\n- Fix build issue on 32-bit.\n\n\n## 3.6.4 - 2021-10-01\n\n### Fixed\n\n- Fix serialization of `dataclass` inheriting from `abc.ABC` and\nusing `__slots__`.\n- Decrement refcount for numpy `PyArrayInterface`.\n- Fix build on recent versions of Rust nightly.\n\n\n## 3.6.3 - 2021-08-20\n\n### Fixed\n\n- Fix build on aarch64 using the Rust stable channel.\n\n\n## 3.6.2 - 2021-08-17\n\n### Changed\n\n- `orjson` now compiles on Rust stable 1.54.0 or above. Use of some SIMD\nusage is now disabled by default and packagers are advised to add\n`--cargo-extra-args=\"--features=unstable-simd\"` to the `maturin build` command\n if they continue to use nightly.\n- `orjson` built with `--features=unstable-simd` adds UTF-8 validation\nimplementations that use AVX2 or SSE4.2.\n- Drop support for Python 3.6.\n\n\n## 3.6.1 - 2021-08-04\n\n### Changed\n\n- `orjson` now includes a `pyi` type stubs file.\n- Publish manylinux_2_24 wheels instead of manylinux2014.\n\n### Fixed\n\n- Fix compilation on latest Rust nightly.\n\n\n## 3.6.0 - 2021-07-08\n\n### Added\n\n- `orjson.dumps()` serializes `numpy.datetime64` instances as RFC 3339\nstrings.\n\n\n## 3.5.4 - 2021-06-30\n\n### Fixed\n\n- Fix memory leak serializing `datetime.datetime` with `tzinfo`.\n- Fix wrong error message when serializing an unsupported numpy type\nwithout default specified.\n\n### Changed\n\n- Publish python3.10 and python3.9 manylinux_2_24 wheels.\n\n\n## 3.5.3 - 2021-06-01\n\n### Fixed\n\n- `orjson.JSONDecodeError` now has `pos`, `lineno`, and `colno`.\n- Fix build on recent versions of Rust nightly.\n\n\n## 3.5.2 - 2021-04-15\n\n### Changed\n\n- Improve serialization and deserialization performance.\n- `orjson.dumps()` serializes individual `numpy.bool_` objects.\n\n\n## 3.5.1 - 2021-03-06\n\n### Changed\n\n- Publish `universal2` wheels for macOS supporting Apple Silicon (aarch64).\n\n\n## 3.5.0 - 2021-02-24\n\n### Added\n\n- `orjson.loads()` supports reading from `memoryview` objects.\n\n### Fixed\n\n- `datetime.datetime` and `datetime.date` zero pad years less than 1000 to\nfour digits.\n- sdist pins maturin 0.9.0 to avoid breaks in later 0.9.x.\n\n### Changed\n\n- `orjson.dumps()` when given a non-C contiguous `numpy.ndarray` has\nan error message suggesting to use `default`.\n\n\n## 3.4.8 - 2021-02-04\n\n### Fixed\n\n- aarch64 manylinux2014 wheels are now compatible with glibc 2.17.\n\n### Changed\n\n- Fix build warnings on ppcle64.\n\n\n## 3.4.7 - 2021-01-19\n\n### Changed\n\n- Use vectorcall APIs for method calls on python3.9 and above.\n- Publish python3.10 wheels for Linux on amd64 and aarch64.\n\n\n## 3.4.6 - 2020-12-07\n\n### Fixed\n\n- Fix compatibility with debug builds of CPython.\n\n\n## 3.4.5 - 2020-12-02\n\n### Fixed\n\n- Fix deserializing long strings on processors without AVX2.\n\n\n## 3.4.4 - 2020-11-25\n\n### Changed\n\n- `orjson.dumps()` serializes integers up to a 64-bit unsigned integer's\nmaximum. It was previously the maximum of a 64-bit signed integer.\n\n\n## 3.4.3 - 2020-10-30\n\n### Fixed\n\n- Fix regression in parsing similar `dict` keys.\n\n\n## 3.4.2 - 2020-10-29\n\n### Changed\n\n- Improve deserialization performance.\n- Publish Windows python3.9 wheel.\n- Disable unsupported SIMD features on non-x86, non-ARM targets\n\n\n## 3.4.1 - 2020-10-20\n\n### Fixed\n\n- Fix `orjson.dumps.__module__` and `orjson.loads.__module__` not being the\n`str` \"orjson\".\n\n### Changed\n\n- Publish macos python3.9 wheel.\n- More packaging documentation.\n\n\n## 3.4.0 - 2020-09-25\n\n### Added\n\n- Serialize `numpy.uint8` and `numpy.int8` instances.\n\n### Fixed\n\n- Fix serializing `numpy.empty()` instances.\n\n### Changed\n\n- No longer publish `manylinux1` wheels due to tooling dropping support.\n\n\n## 3.3.1 - 2020-08-17\n\n### Fixed\n\n- Fix failure to deserialize some latin1 strings on some platforms. This\nwas introduced in 3.2.0.\n- Fix annotation of optional parameters on `orjson.dumps()` for `help()`.\n\n### Changed\n\n- Publish `manylinux2014` wheels for amd64 in addition to `manylinux1`.\n\n\n## 3.3.0 - 2020-07-24\n\n### Added\n\n- `orjson.dumps()` now serializes individual numpy floats and integers, e.g.,\n`numpy.float64(1.0)`.\n- `orjson.OPT_PASSTHROUGH_DATACLASS` causes `orjson.dumps()` to pass\n`dataclasses.dataclass` instances to `default`.\n\n\n## 3.2.2 - 2020-07-13\n\n### Fixed\n\n- Fix serializing `dataclasses.dataclass` that have no attributes.\n\n### Changed\n\n- Improve deserialization performance of `str`.\n\n\n## 3.2.1 - 2020-07-03\n\n### Fixed\n\n- Fix `orjson.dumps(..., **{})` raising `TypeError` on python3.6.\n\n\n## 3.2.0 - 2020-06-30\n\n### Added\n\n- `orjson.OPT_APPEND_NEWLINE` appends a newline to output.\n\n### Changed\n\n- Improve deserialization performance of `str`.\n\n\n## 3.1.2 - 2020-06-23\n\n### Fixed\n\n- Fix serializing zero-dimension `numpy.ndarray`.\n\n\n## 3.1.1 - 2020-06-20\n\n### Fixed\n\n- Fix repeated serialization of `str` that are ASCII-only and have a legacy\n(non-compact) layout.\n\n\n## 3.1.0 - 2020-06-08\n\n### Added\n\n- `orjson.OPT_PASSTHROUGH_SUBCLASS` causes `orjson.dumps()` to pass\nsubclasses of builtin types to `default` so the caller can customize the\noutput.\n- `orjson.OPT_PASSTHROUGH_DATETIME` causes `orjson.dumps()` to pass\n`datetime` objects to `default` so the caller can customize the\noutput.\n\n\n## 3.0.2 - 2020-05-27\n\n### Changed\n\n- `orjson.dumps()` does not serialize `dataclasses.dataclass` attributes\nthat begin with a leading underscore, e.g., `_attr`. This is because of the\nPython idiom that a leading underscores marks an attribute as \"private.\"\n- `orjson.dumps()` does not serialize `dataclasses.dataclass` attributes that\nare `InitVar` or `ClassVar` whether using `__slots__` or not.\n\n\n## 3.0.1 - 2020-05-19\n\n### Fixed\n\n- `orjson.dumps()` raises an exception if the object to be serialized\nis not given as a positional argument. `orjson.dumps({})` is intended and ok\nwhile `orjson.dumps(obj={})` is an error. This makes it consistent with the\ndocumentation, `help()` annotation, and type annotation.\n- Fix orphan reference in exception creation that leaks memory until the\ngarbage collector runs.\n\n### Changed\n\n- Improve serialization performance marginally by using the fastcall/vectorcall\ncalling convention on python3.7 and above.\n- Reduce build time.\n\n\n## 3.0.0 - 2020-05-01\n\n### Added\n\n- `orjson.dumps()` serializes subclasses of `str`, `int`, `list`, and `dict`.\n\n### Changed\n\n- `orjson.dumps()` serializes `dataclasses.dataclass` and `uuid.UUID`\ninstances by default. The options `OPT_SERIALIZE_DATACLASS` and\n`OPT_SERIALIZE_UUID` can still be specified but have no effect.\n\n\n## 2.6.8 - 2020-04-30\n\n### Changed\n\n- The source distribution vendors a forked dependency.\n\n\n## 2.6.7 - 2020-04-30\n\n### Fixed\n\n- Fix integer overflows in debug builds.\n\n### Changed\n\n- The source distribution sets the recommended RUSTFLAGS in `.cargo/config`.\n\n\n## 2.6.6 - 2020-04-24\n\n### Fixed\n\n- Import `numpy` only on first use of `OPT_SERIALIZE_NUMPY` to reduce\ninterpreter start time when not used.\n- Reduce build time by half.\n\n\n## 2.6.5 - 2020-04-08\n\n### Fixed\n\n- Fix deserialization raising `JSONDecodeError` on some valid negative\nfloats with large exponents.\n\n\n## 2.6.4 - 2020-04-08\n\n### Changed\n\n- Improve deserialization performance of floats by about 40%.\n\n\n## 2.6.3 - 2020-04-01\n\n### Changed\n\n- Serialize `enum.Enum` objects.\n- Minor performance improvements.\n\n\n## 2.6.2 - 2020-03-27\n\n### Changed\n\n- Publish python3.9 `manylinux2014` wheel instead of `manylinux1` for `x86_64`.\n- Publish python3.9 `manylinux2014` wheel for `aarch64`.\n\n### Fixed\n\n- Fix compilation failure on 32-bit.\n\n\n## 2.6.1 - 2020-03-19\n\n### Changed\n\n- Serialization is 10-20% faster and uses about 50% less memory by writing\ndirectly to the returned `bytes` object.\n\n\n## 2.6.0 - 2020-03-10\n\n### Added\n\n- `orjson.dumps()` pretty prints with an indentation of two spaces if\n`option=orjson.OPT_INDENT_2` is specified.\n\n\n## 2.5.2 - 2020-03-07\n\n### Changed\n\n- Publish `manylinux2014` wheels for `aarch64`.\n- numpy support now includes `numpy.uint32` and `numpy.uint64`.\n\n\n## 2.5.1 - 2020-02-24\n\n### Changed\n\n- `manylinux1` wheels for 3.6, 3.7, and 3.8 are now compliant with the spec by\nnot depending on glibc 2.18.\n\n\n## 2.5.0 - 2020-02-19\n\n### Added\n\n- `orjson.dumps()` serializes `dict` keys of type other than `str` if\n`option=orjson.OPT_NON_STR_KEYS` is specified.\n\n\n## 2.4.0 - 2020-02-14\n\n### Added\n\n- `orjson.dumps()` serializes `numpy.ndarray` instances if\n`option=orjson.OPT_SERIALIZE_NUMPY` is specified.\n\n### Fixed\n\n- Fix `dataclasses.dataclass` attributes that are `dict` to be effected by\n`orjson.OPT_SORT_KEYS`.\n\n\n## 2.3.0 - 2020-02-12\n\n### Added\n\n- `orjson.dumps()` serializes `dict` instances sorted by keys, equivalent to\n`sort_keys` in other implementations, if `option=orjson.OPT_SORT_KEYS` is\nspecified.\n\n### Changed\n\n- `dataclasses.dataclass` instances without `__slots__` now serialize faster.\n\n### Fixed\n\n- Fix documentation on `default`, in particular documenting the need to raise\nan exception if the type cannot be handled.\n\n\n## 2.2.2 - 2020-02-10\n\n### Changed\n\n- Performance improvements to serializing a list containing elements of the\nsame type.\n\n\n## 2.2.1 - 2020-02-04\n\n### Fixed\n\n- `orjson.loads()` rejects floats that do not have a digit following\nthe decimal, e.g., `-2.`, `2.e-3`.\n\n### Changed\n\n- Build Linux, macOS, and Windows wheels on more recent distributions.\n\n\n## 2.2.0 - 2020-01-22\n\n### Added\n\n- `orjson.dumps()` serializes `uuid.UUID` instances if\n`option=orjson.OPT_SERIALIZE_UUID` is specified.\n\n### Changed\n\n- Minor performance improvements.\n- Publish Python 3.9 wheel for Linux.\n\n\n## 2.1.4 - 2020-01-08\n\n### Fixed\n\n- Specify a text signature for `orjson.loads()`.\n\n### Changed\n\n- Improve documentation.\n\n\n## 2.1.3 - 2019-11-12\n\n### Changed\n\n- Publish Python 3.8 wheels for macOS and Windows.\n\n\n## 2.1.2 - 2019-11-07\n\n### Changed\n\n- The recursion limit of `default` on `orjson.dumps()` has been increased from\n5 to 254.\n\n\n## 2.1.1 - 2019-10-29\n\n### Changed\n\n- Publish `manylinux1` wheels instead of `manylinux2010`.\n\n\n## 2.1.0 - 2019-10-24\n\n### Added\n\n- `orjson.dumps()` serializes `dataclasses.dataclass` instances if\n`option=orjson.OPT_SERIALIZE_DATACLASS` is specified.\n- `orjson.dumps()` accepts `orjson.OPT_UTC_Z` to serialize UTC as \"Z\" instead\nof \"+00:00\".\n- `orjson.dumps()` accepts `orjson.OPT_OMIT_MICROSECONDS` to not serialize\nthe `microseconds` attribute of `datetime.datetime` and `datetime.time`\ninstances.\n- `orjson.loads()` accepts `bytearray`.\n\n### Changed\n\n- Drop support for Python 3.5.\n- Publish `manylinux2010` wheels instead of `manylinux1`.\n\n\n## 2.0.11 - 2019-10-01\n\n### Changed\n\n- Publish Python 3.8 wheel for Linux.\n\n\n## 2.0.10 - 2019-09-25\n\n### Changed\n\n- Performance improvements and lower memory usage in deserialization\nby creating only one `str` object for repeated map keys.\n\n\n## 2.0.9 - 2019-09-22\n\n### Changed\n\n- Minor performance improvements.\n\n### Fixed\n\n- Fix inaccurate zero padding in serialization of microseconds on\n`datetime.time` objects.\n\n\n## 2.0.8 - 2019-09-18\n\n### Fixed\n\n- Fix inaccurate zero padding in serialization of microseconds on\n`datetime.datetime` objects.\n\n\n## 2.0.7 - 2019-08-29\n\n### Changed\n\n- Publish PEP 517 source distribution.\n\n### Fixed\n\n- `orjson.dumps()` raises `JSONEncodeError` on circular references.\n\n\n## 2.0.6 - 2019-05-11\n\n### Changed\n\n- Performance improvements.\n\n\n## 2.0.5 - 2019-04-19\n\n### Fixed\n\n- Fix inaccuracy in deserializing some `float` values, e.g.,\n31.245270191439438 was parsed to 31.24527019143944. Serialization was\nunaffected.\n\n\n## 2.0.4 - 2019-04-02\n\n### Changed\n\n- `orjson.dumps()` now serializes `datetime.datetime` objects without a\n`tzinfo` rather than raising `JSONEncodeError`.\n\n\n## 2.0.3 - 2019-03-23\n\n### Changed\n\n- `orjson.loads()` uses SSE2 to validate `bytes` input.\n\n\n## 2.0.2 - 2019-03-12\n\n### Changed\n\n- Support Python 3.5.\n\n\n## 2.0.1 - 2019-02-05\n\n### Changed\n\n- Publish Windows wheel.\n\n\n## 2.0.0 - 2019-01-28\n\n### Added\n\n- `orjson.dumps()` accepts a `default` callable to serialize arbitrary\ntypes.\n- `orjson.dumps()` accepts `datetime.datetime`, `datetime.date`,\nand `datetime.time`. Each is serialized to an RFC 3339 string.\n- `orjson.dumps(..., option=orjson.OPT_NAIVE_UTC)` allows serializing\n`datetime.datetime` objects that do not have a timezone set as UTC.\n- `orjson.dumps(..., option=orjson.OPT_STRICT_INTEGER)` available to\nraise an error on integer values outside the 53-bit range of all JSON\nimplementations.\n\n### Changed\n\n- `orjson.dumps()` no longer accepts `bytes`.\n\n\n## 1.3.1 - 2019-01-03\n\n### Fixed\n\n- Handle invalid UTF-8 in str.\n\n\n## 1.3.0 - 2019-01-02\n\n### Changed\n\n- Performance improvements of 15-25% on serialization, 10% on deserialization.\n\n\n## 1.2.1 - 2018-12-31\n\n### Fixed\n\n- Fix memory leak in deserializing dict.\n\n\n## 1.2.0 - 2018-12-16\n\n### Changed\n\n- Performance improvements.\n\n\n## 1.1.0 - 2018-12-04\n\n### Changed\n\n- Performance improvements.\n\n### Fixed\n\n- Dict key can only be str.\n\n\n## 1.0.1 - 2018-11-26\n\n### Fixed\n\n- pyo3 bugfix update.\n\n\n## 1.0.0 - 2018-11-23\n\n### Added\n\n- `orjson.dumps()` function.\n- `orjson.loads()` function.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.1875,
          "content": "orjson is stable. Contributions will be reviewed only if they are well\ndocumented, tested to the same standard as the rest of the library, not\na breaking change, and important to other users.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 8.0888671875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"associative-cache\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b993cd767a2bc7307dd87622311ca22c44329cc7a21366206bfa0896827b2bad\"\n\n[[package]]\nname = \"bytecount\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ce89b21cab1437276d2650d57e971f9d548a2d9037cc231abdc0562b97498ce\"\n\n[[package]]\nname = \"castaway\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0abae9be0aaf9ea96a3b1b8b1b55c602ca751eba1b1500220cea4ecbafe7c0d5\"\ndependencies = [\n \"rustversion\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd9de9f2205d5ef3fd67e685b0df337994ddd4495e2a28d185500d0e1edfea47\"\ndependencies = [\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"compact_str\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b79c4069c6cad78e2e0cdfcbd26275770669fb39fd308a752dc110e83b9af32\"\ndependencies = [\n \"castaway\",\n \"cfg-if\",\n \"itoa\",\n \"rustversion\",\n \"ryu\",\n \"serde\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75030f3c4f45dafd7586dd6780965a8c7e8e285a5ecb86713e63a79c5b2766f3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\n\n[[package]]\nname = \"half\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888\"\ndependencies = [\n \"cfg-if\",\n \"crunchy\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"itoap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9028f49264629065d057f340a86acb84867925865f73bbf8d47b4d149a7e88b8\"\n\n[[package]]\nname = \"jiff\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed0ce60560149333a8e41ca7dc78799c47c5fd435e2bc18faf6a054382eec037\"\ndependencies = [\n \"portable-atomic\",\n \"portable-atomic-util\",\n \"serde\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"orjson\"\nversion = \"3.10.14\"\ndependencies = [\n \"associative-cache\",\n \"bytecount\",\n \"cc\",\n \"compact_str\",\n \"encoding_rs\",\n \"half\",\n \"itoa\",\n \"itoap\",\n \"jiff\",\n \"once_cell\",\n \"pyo3-build-config\",\n \"pyo3-ffi\",\n \"ryu\",\n \"serde\",\n \"serde_json\",\n \"simdutf8\",\n \"smallvec\",\n \"unwinding\",\n \"uuid\",\n \"version_check\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"280dc24453071f1b63954171985a0b0d30058d287960968b9b2aca264c8d4ee6\"\n\n[[package]]\nname = \"portable-atomic-util\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8a2f0d8d040d7848a709caf78912debcc3f33ee4b3cac47d73d1e1069e83507\"\ndependencies = [\n \"portable-atomic\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"pyo3-build-config\"\nversion = \"0.23.3\"\ndependencies = [\n \"once_cell\",\n \"target-lexicon\",\n]\n\n[[package]]\nname = \"pyo3-ffi\"\nversion = \"0.23.3\"\ndependencies = [\n \"libc\",\n \"pyo3-build-config\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7c45b9784283f1b2e7fb61b42047c2fd678ef0960d4f6f1eba131594cc369d4\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.135\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"simdutf8\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3a9fe34e3e7a50316060351f37187a3f546bce95496156754b601a5fa71b76e\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46f71c0377baf4ef1cc3e3402ded576dccc315800fbc62dfc7fe04b009773b4a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc12939a1c9b9d391e0b7135f72fd30508b73450753e28341fed159317582a77\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unwinding\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51f06a05848f650946acef3bf525fe96612226b61f74ae23ffa4e98bfbb8ab3c\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"uuid\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8c5f0a0af699448548ad1a2fbf920fb4bee257eae39953ba95cb84891a0446a\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdd20c5420375476fbd4394763288da7eb0cc0b8c11deed431a91562af7335d3\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.0791015625,
          "content": "[package]\nname = \"orjson\"\nversion = \"3.10.14\"\nauthors = [\"ijl <ijl@mailbox.org>\"]\ndescription = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"\nedition = \"2021\"\nresolver = \"2\"\nrust-version = \"1.82\"\nlicense = \"Apache-2.0 OR MIT\"\nrepository = \"https://github.com/ijl/orjson\"\nhomepage = \"https://github.com/ijl/orjson\"\nreadme = \"README.md\"\nkeywords = [\"fast\", \"json\", \"dataclass\", \"dataclasses\", \"datetime\", \"rfc\", \"8259\", \"3339\"]\ninclude = [\n    \"Cargo.toml\",\n    \"CHANGELOG.md\",\n    \"include/pyo3\",\n    \"include/yyjson\",\n    \"LICENSE-APACHE\",\n    \"LICENSE-MIT\",\n    \"pyproject.toml\",\n    \"README.md\",\n    \"src\",\n    \"test/*.py\",\n    \"test/requirements.txt\",\n]\n\n[lib]\nname = \"orjson\"\ncrate-type = [\"cdylib\"]\n\n[features]\ndefault = []\n\n# Use SIMD intrinsics. This requires Rust on the nightly channel.\nunstable-simd = []\n\n# Include runtime-detected functions that use AVX512VL. Requires unstable-simd and amd64.\navx512 = []\n\n# Avoid bundling libgcc on musl.\nunwind = [\"unwinding\"]\n\n# Build yyjson as a backend and panic if it fails. The default is to attempt\n# to build and on failure fall back to another backend.\nyyjson = []\n\n# Features detected by build.rs. Do not specify.\ninline_int = []\nintrinsics = []\noptimize = []\n\n[dependencies]\nassociative-cache = { version = \"2\", default-features = false }\nbytecount = { version = \"^0.6.7\", default-features = false, features = [\"runtime-dispatch-simd\"] }\ncompact_str = { version = \"0.8\", default-features = false, features = [\"serde\"] }\nencoding_rs = { version = \"0.8\", default-features = false }\nhalf = { version = \"2\", default-features = false, features = [\"std\"] }\nitoa = { version = \"1\", default-features = false }\nitoap = { version = \"1\", default-features = false, features = [\"std\", \"simd\"] }\njiff = { version = \"^0.1\", default-features = false, features = [\"alloc\"] }\nonce_cell = { version = \"1\", default-features = false, features = [\"alloc\", \"race\"] }\npyo3-ffi = { path = \"include/pyo3/pyo3-ffi\", default-features = false, features = [\"extension-module\"]}\nryu = { version = \"1\", default-features = false }\nserde = { version = \"1\", default-features = false }\nserde_json = { version = \"1\", default-features = false, features = [\"std\", \"float_roundtrip\"] }\nsimdutf8 = { version = \"0.1\", default-features = false, features = [\"std\", \"public_imp\", \"aarch64_neon\"] }\nsmallvec = { version = \"^1.11\", default-features = false, features = [\"union\", \"write\"] }\nunwinding = { version = \"^0.2.4\", default-features = false, features = [\"unwinder\"], optional = true }\nuuid = { version = \"1\", default-features = false }\nxxhash-rust = { version = \"^0.8\", default-features = false, features = [\"xxh3\"] }\n\n[build-dependencies]\ncc = { version = \"=1.2.1\" } # aarch64-linux-musl link errors\npyo3-build-config = { path = \"include/pyo3/pyo3-build-config\" }\nversion_check = { version = \"0.9\" }\n\n[profile.dev]\ncodegen-units = 1\ndebug = 2\ndebug-assertions = true\nincremental = false\nlto = \"off\"\nopt-level = 3\noverflow-checks = true\n\n[profile.release]\ncodegen-units = 1\ndebug = false\nincremental = false\nlto = \"thin\"\nopt-level = 3\npanic = \"abort\"\n\n[profile.release.build-override]\nopt-level = 0\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5927734375,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 39.2861328125,
          "content": "# orjson\n\norjson is a fast, correct JSON library for Python. It\n[benchmarks](https://github.com/ijl/orjson?tab=readme-ov-file#performance) as the fastest Python\nlibrary for JSON and is more correct than the standard json library or other\nthird-party libraries. It serializes\n[dataclass](https://github.com/ijl/orjson?tab=readme-ov-file#dataclass),\n[datetime](https://github.com/ijl/orjson?tab=readme-ov-file#datetime),\n[numpy](https://github.com/ijl/orjson?tab=readme-ov-file#numpy), and\n[UUID](https://github.com/ijl/orjson?tab=readme-ov-file#uuid) instances natively.\n\n[orjson.dumps()](https://github.com/ijl/orjson?tab=readme-ov-file#serialize) is\nsomething like 10x as fast as `json`, serializes\ncommon types and subtypes, has a `default` parameter for the caller to specify\nhow to serialize arbitrary types, and has a number of flags controlling output.\n\n[orjson.loads()](https://github.com/ijl/orjson?tab=readme-ov-file#deserialize)\nis something like 2x as fast as `json`, and is strictly compliant with UTF-8 and\nRFC 8259 (\"The JavaScript Object Notation (JSON) Data Interchange Format\").\n\nReading from and writing to files, line-delimited JSON files, and so on is\nnot provided by the library.\n\norjson supports CPython 3.8, 3.9, 3.10, 3.11, 3.12, 3.13, and 3.14.\n\nIt distributes amd64/x86_64, i686/x86, aarch64/armv8, arm7, POWER/ppc64le,\nand s390x wheels for Linux, amd64 and aarch64 wheels for macOS, and amd64\nand i686/x86 wheels for Windows.\n\norjson does not and will not support PyPy, embedded Python builds for\nAndroid/iOS, or PEP 554 subinterpreters.\n\nReleases follow semantic versioning and serializing a new object type\nwithout an opt-in flag is considered a breaking change.\n\norjson is licensed under both the Apache 2.0 and MIT licenses. The\nrepository and issue tracker is\n[github.com/ijl/orjson](https://github.com/ijl/orjson), and patches may be\nsubmitted there. There is a\n[CHANGELOG](https://github.com/ijl/orjson/blob/master/CHANGELOG.md)\navailable in the repository.\n\n1. [Usage](https://github.com/ijl/orjson?tab=readme-ov-file#usage)\n    1. [Install](https://github.com/ijl/orjson?tab=readme-ov-file#install)\n    2. [Quickstart](https://github.com/ijl/orjson?tab=readme-ov-file#quickstart)\n    3. [Migrating](https://github.com/ijl/orjson?tab=readme-ov-file#migrating)\n    4. [Serialize](https://github.com/ijl/orjson?tab=readme-ov-file#serialize)\n        1. [default](https://github.com/ijl/orjson?tab=readme-ov-file#default)\n        2. [option](https://github.com/ijl/orjson?tab=readme-ov-file#option)\n        3. [Fragment](https://github.com/ijl/orjson?tab=readme-ov-file#fragment)\n    5. [Deserialize](https://github.com/ijl/orjson?tab=readme-ov-file#deserialize)\n2. [Types](https://github.com/ijl/orjson?tab=readme-ov-file#types)\n    1. [dataclass](https://github.com/ijl/orjson?tab=readme-ov-file#dataclass)\n    2. [datetime](https://github.com/ijl/orjson?tab=readme-ov-file#datetime)\n    3. [enum](https://github.com/ijl/orjson?tab=readme-ov-file#enum)\n    4. [float](https://github.com/ijl/orjson?tab=readme-ov-file#float)\n    5. [int](https://github.com/ijl/orjson?tab=readme-ov-file#int)\n    6. [numpy](https://github.com/ijl/orjson?tab=readme-ov-file#numpy)\n    7. [str](https://github.com/ijl/orjson?tab=readme-ov-file#str)\n    8. [uuid](https://github.com/ijl/orjson?tab=readme-ov-file#uuid)\n3. [Testing](https://github.com/ijl/orjson?tab=readme-ov-file#testing)\n4. [Performance](https://github.com/ijl/orjson?tab=readme-ov-file#performance)\n    1. [Latency](https://github.com/ijl/orjson?tab=readme-ov-file#latency)\n    2. [Reproducing](https://github.com/ijl/orjson?tab=readme-ov-file#reproducing)\n5. [Questions](https://github.com/ijl/orjson?tab=readme-ov-file#questions)\n6. [Packaging](https://github.com/ijl/orjson?tab=readme-ov-file#packaging)\n7. [License](https://github.com/ijl/orjson?tab=readme-ov-file#license)\n\n## Usage\n\n### Install\n\nTo install a wheel from PyPI, install the `orjson` package.\n\nIn `requirements.in` or `requirements.txt` format, specify:\n\n```txt\norjson >= 3.10,<4\n```\n\nIn `pyproject.toml` format, specify:\n\n```toml\norjson = \"^3.10\"\n```\n\nTo build a wheel, see [packaging](https://github.com/ijl/orjson?tab=readme-ov-file#packaging).\n\n### Quickstart\n\nThis is an example of serializing, with options specified, and deserializing:\n\n```python\n>>> import orjson, datetime, numpy\n>>> data = {\n    \"type\": \"job\",\n    \"created_at\": datetime.datetime(1970, 1, 1),\n    \"status\": \"🆗\",\n    \"payload\": numpy.array([[1, 2], [3, 4]]),\n}\n>>> orjson.dumps(data, option=orjson.OPT_NAIVE_UTC | orjson.OPT_SERIALIZE_NUMPY)\nb'{\"type\":\"job\",\"created_at\":\"1970-01-01T00:00:00+00:00\",\"status\":\"\\xf0\\x9f\\x86\\x97\",\"payload\":[[1,2],[3,4]]}'\n>>> orjson.loads(_)\n{'type': 'job', 'created_at': '1970-01-01T00:00:00+00:00', 'status': '🆗', 'payload': [[1, 2], [3, 4]]}\n```\n\n### Migrating\n\norjson version 3 serializes more types than version 2. Subclasses of `str`,\n`int`, `dict`, and `list` are now serialized. This is faster and more similar\nto the standard library. It can be disabled with\n`orjson.OPT_PASSTHROUGH_SUBCLASS`.`dataclasses.dataclass` instances\nare now serialized by default and cannot be customized in a\n`default` function unless `option=orjson.OPT_PASSTHROUGH_DATACLASS` is\nspecified. `uuid.UUID` instances are serialized by default.\nFor any type that is now serialized,\nimplementations in a `default` function and options enabling them can be\nremoved but do not need to be. There was no change in deserialization.\n\nTo migrate from the standard library, the largest difference is that\n`orjson.dumps` returns `bytes` and `json.dumps` returns a `str`.\n\nUsers with `dict` objects using non-`str` keys should specify `option=orjson.OPT_NON_STR_KEYS`.\n\n`sort_keys` is replaced by `option=orjson.OPT_SORT_KEYS`.\n\n`indent` is replaced by `option=orjson.OPT_INDENT_2` and other levels of indentation are not\nsupported.\n\n`ensure_ascii` is probably not relevant today and UTF-8 characters cannot be\nescaped to ASCII.\n\n### Serialize\n\n```python\ndef dumps(\n    __obj: Any,\n    default: Optional[Callable[[Any], Any]] = ...,\n    option: Optional[int] = ...,\n) -> bytes: ...\n```\n\n`dumps()` serializes Python objects to JSON.\n\nIt natively serializes\n`str`, `dict`, `list`, `tuple`, `int`, `float`, `bool`, `None`,\n`dataclasses.dataclass`, `typing.TypedDict`, `datetime.datetime`,\n`datetime.date`, `datetime.time`, `uuid.UUID`, `numpy.ndarray`, and\n`orjson.Fragment` instances. It supports arbitrary types through `default`. It\nserializes subclasses of `str`, `int`, `dict`, `list`,\n`dataclasses.dataclass`, and `enum.Enum`. It does not serialize subclasses\nof `tuple` to avoid serializing `namedtuple` objects as arrays. To avoid\nserializing subclasses, specify the option `orjson.OPT_PASSTHROUGH_SUBCLASS`.\n\nThe output is a `bytes` object containing UTF-8.\n\nThe global interpreter lock (GIL) is held for the duration of the call.\n\nIt raises `JSONEncodeError` on an unsupported type. This exception message\ndescribes the invalid object with the error message\n`Type is not JSON serializable: ...`. To fix this, specify\n[default](https://github.com/ijl/orjson?tab=readme-ov-file#default).\n\nIt raises `JSONEncodeError` on a `str` that contains invalid UTF-8.\n\nIt raises `JSONEncodeError` on an integer that exceeds 64 bits by default or,\nwith `OPT_STRICT_INTEGER`, 53 bits.\n\nIt raises `JSONEncodeError` if a `dict` has a key of a type other than `str`,\nunless `OPT_NON_STR_KEYS` is specified.\n\nIt raises `JSONEncodeError` if the output of `default` recurses to handling by\n`default` more than 254 levels deep.\n\nIt raises `JSONEncodeError` on circular references.\n\nIt raises `JSONEncodeError`  if a `tzinfo` on a datetime object is\nunsupported.\n\n`JSONEncodeError` is a subclass of `TypeError`. This is for compatibility\nwith the standard library.\n\nIf the failure was caused by an exception in `default` then\n`JSONEncodeError` chains the original exception as `__cause__`.\n\n#### default\n\nTo serialize a subclass or arbitrary types, specify `default` as a\ncallable that returns a supported type. `default` may be a function,\nlambda, or callable class instance. To specify that a type was not\nhandled by `default`, raise an exception such as `TypeError`.\n\n```python\n>>> import orjson, decimal\n>>>\ndef default(obj):\n    if isinstance(obj, decimal.Decimal):\n        return str(obj)\n    raise TypeError\n\n>>> orjson.dumps(decimal.Decimal(\"0.0842389659712649442845\"))\nJSONEncodeError: Type is not JSON serializable: decimal.Decimal\n>>> orjson.dumps(decimal.Decimal(\"0.0842389659712649442845\"), default=default)\nb'\"0.0842389659712649442845\"'\n>>> orjson.dumps({1, 2}, default=default)\norjson.JSONEncodeError: Type is not JSON serializable: set\n```\n\nThe `default` callable may return an object that itself\nmust be handled by `default` up to 254 times before an exception\nis raised.\n\nIt is important that `default` raise an exception if a type cannot be handled.\nPython otherwise implicitly returns `None`, which appears to the caller\nlike a legitimate value and is serialized:\n\n```python\n>>> import orjson, json\n>>>\ndef default(obj):\n    if isinstance(obj, decimal.Decimal):\n        return str(obj)\n\n>>> orjson.dumps({\"set\":{1, 2}}, default=default)\nb'{\"set\":null}'\n>>> json.dumps({\"set\":{1, 2}}, default=default)\n'{\"set\":null}'\n```\n\n#### option\n\nTo modify how data is serialized, specify `option`. Each `option` is an integer\nconstant in `orjson`. To specify multiple options, mask them together, e.g.,\n`option=orjson.OPT_STRICT_INTEGER | orjson.OPT_NAIVE_UTC`.\n\n##### OPT_APPEND_NEWLINE\n\nAppend `\\n` to the output. This is a convenience and optimization for the\npattern of `dumps(...) + \"\\n\"`. `bytes` objects are immutable and this\npattern copies the original contents.\n\n```python\n>>> import orjson\n>>> orjson.dumps([])\nb\"[]\"\n>>> orjson.dumps([], option=orjson.OPT_APPEND_NEWLINE)\nb\"[]\\n\"\n```\n\n##### OPT_INDENT_2\n\nPretty-print output with an indent of two spaces. This is equivalent to\n`indent=2` in the standard library. Pretty printing is slower and the output\nlarger. orjson is the fastest compared library at pretty printing and has\nmuch less of a slowdown to pretty print than the standard library does. This\noption is compatible with all other options.\n\n```python\n>>> import orjson\n>>> orjson.dumps({\"a\": \"b\", \"c\": {\"d\": True}, \"e\": [1, 2]})\nb'{\"a\":\"b\",\"c\":{\"d\":true},\"e\":[1,2]}'\n>>> orjson.dumps(\n    {\"a\": \"b\", \"c\": {\"d\": True}, \"e\": [1, 2]},\n    option=orjson.OPT_INDENT_2\n)\nb'{\\n  \"a\": \"b\",\\n  \"c\": {\\n    \"d\": true\\n  },\\n  \"e\": [\\n    1,\\n    2\\n  ]\\n}'\n```\n\nIf displayed, the indentation and linebreaks appear like this:\n\n```json\n{\n  \"a\": \"b\",\n  \"c\": {\n    \"d\": true\n  },\n  \"e\": [\n    1,\n    2\n  ]\n}\n```\n\nThis measures serializing the github.json fixture as compact (52KiB) or\npretty (64KiB):\n\n| Library   |   compact (ms) |   pretty (ms) |   vs. orjson |\n|-----------|----------------|---------------|--------------|\n| orjson    |           0.01 |          0.02 |            1 |\n| json      |           0.13 |          0.54 |           34 |\n\nThis measures serializing the citm_catalog.json fixture, more of a worst\ncase due to the amount of nesting and newlines, as compact (489KiB) or\npretty (1.1MiB):\n\n| Library   |   compact (ms) |   pretty (ms) |   vs. orjson |\n|-----------|----------------|---------------|--------------|\n| orjson    |           0.25 |          0.45 |          1   |\n| json      |           3.01 |         24.42 |         54.4 |\n\nThis can be reproduced using the `pyindent` script.\n\n##### OPT_NAIVE_UTC\n\nSerialize `datetime.datetime` objects without a `tzinfo` as UTC. This\nhas no effect on `datetime.datetime` objects that have `tzinfo` set.\n\n```python\n>>> import orjson, datetime\n>>> orjson.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0),\n    )\nb'\"1970-01-01T00:00:00\"'\n>>> orjson.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0),\n        option=orjson.OPT_NAIVE_UTC,\n    )\nb'\"1970-01-01T00:00:00+00:00\"'\n```\n\n##### OPT_NON_STR_KEYS\n\nSerialize `dict` keys of type other than `str`. This allows `dict` keys\nto be one of `str`, `int`, `float`, `bool`, `None`, `datetime.datetime`,\n`datetime.date`, `datetime.time`, `enum.Enum`, and `uuid.UUID`. For comparison,\nthe standard library serializes `str`, `int`, `float`, `bool` or `None` by\ndefault. orjson benchmarks as being faster at serializing non-`str` keys\nthan other libraries. This option is slower for `str` keys than the default.\n\n```python\n>>> import orjson, datetime, uuid\n>>> orjson.dumps(\n        {uuid.UUID(\"7202d115-7ff3-4c81-a7c1-2a1f067b1ece\"): [1, 2, 3]},\n        option=orjson.OPT_NON_STR_KEYS,\n    )\nb'{\"7202d115-7ff3-4c81-a7c1-2a1f067b1ece\":[1,2,3]}'\n>>> orjson.dumps(\n        {datetime.datetime(1970, 1, 1, 0, 0, 0): [1, 2, 3]},\n        option=orjson.OPT_NON_STR_KEYS | orjson.OPT_NAIVE_UTC,\n    )\nb'{\"1970-01-01T00:00:00+00:00\":[1,2,3]}'\n```\n\nThese types are generally serialized how they would be as\nvalues, e.g., `datetime.datetime` is still an RFC 3339 string and respects\noptions affecting it. The exception is that `int` serialization does not\nrespect `OPT_STRICT_INTEGER`.\n\nThis option has the risk of creating duplicate keys. This is because non-`str`\nobjects may serialize to the same `str` as an existing key, e.g.,\n`{\"1\": true, 1: false}`. The last key to be inserted to the `dict` will be\nserialized last and a JSON deserializer will presumably take the last\noccurrence of a key (in the above, `false`). The first value will be lost.\n\nThis option is compatible with `orjson.OPT_SORT_KEYS`. If sorting is used,\nnote the sort is unstable and will be unpredictable for duplicate keys.\n\n```python\n>>> import orjson, datetime\n>>> orjson.dumps(\n    {\"other\": 1, datetime.date(1970, 1, 5): 2, datetime.date(1970, 1, 3): 3},\n    option=orjson.OPT_NON_STR_KEYS | orjson.OPT_SORT_KEYS\n)\nb'{\"1970-01-03\":3,\"1970-01-05\":2,\"other\":1}'\n```\n\nThis measures serializing 589KiB of JSON comprising a `list` of 100 `dict`\nin which each `dict` has both 365 randomly-sorted `int` keys representing epoch\ntimestamps as well as one `str` key and the value for each key is a\nsingle integer. In \"str keys\", the keys were converted to `str` before\nserialization, and orjson still specifes `option=orjson.OPT_NON_STR_KEYS`\n(which is always somewhat slower).\n\n| Library   |   str keys (ms) |   int keys (ms) | int keys sorted (ms)   |\n|-----------|-----------------|-----------------|------------------------|\n| orjson    |            0.5  |            0.93 | 2.08                   |\n| json      |            2.72 |            3.59 |                        |\n\njson is blank because it\nraises `TypeError` on attempting to sort before converting all keys to `str`.\nThis can be reproduced using the `pynonstr` script.\n\n##### OPT_OMIT_MICROSECONDS\n\nDo not serialize the `microsecond` field on `datetime.datetime` and\n`datetime.time` instances.\n\n```python\n>>> import orjson, datetime\n>>> orjson.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),\n    )\nb'\"1970-01-01T00:00:00.000001\"'\n>>> orjson.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, 1),\n        option=orjson.OPT_OMIT_MICROSECONDS,\n    )\nb'\"1970-01-01T00:00:00\"'\n```\n\n##### OPT_PASSTHROUGH_DATACLASS\n\nPassthrough `dataclasses.dataclass` instances to `default`. This allows\ncustomizing their output but is much slower.\n\n\n```python\n>>> import orjson, dataclasses\n>>>\n@dataclasses.dataclass\nclass User:\n    id: str\n    name: str\n    password: str\n\ndef default(obj):\n    if isinstance(obj, User):\n        return {\"id\": obj.id, \"name\": obj.name}\n    raise TypeError\n\n>>> orjson.dumps(User(\"3b1\", \"asd\", \"zxc\"))\nb'{\"id\":\"3b1\",\"name\":\"asd\",\"password\":\"zxc\"}'\n>>> orjson.dumps(User(\"3b1\", \"asd\", \"zxc\"), option=orjson.OPT_PASSTHROUGH_DATACLASS)\nTypeError: Type is not JSON serializable: User\n>>> orjson.dumps(\n        User(\"3b1\", \"asd\", \"zxc\"),\n        option=orjson.OPT_PASSTHROUGH_DATACLASS,\n        default=default,\n    )\nb'{\"id\":\"3b1\",\"name\":\"asd\"}'\n```\n\n##### OPT_PASSTHROUGH_DATETIME\n\nPassthrough `datetime.datetime`, `datetime.date`, and `datetime.time` instances\nto `default`. This allows serializing datetimes to a custom format, e.g.,\nHTTP dates:\n\n```python\n>>> import orjson, datetime\n>>>\ndef default(obj):\n    if isinstance(obj, datetime.datetime):\n        return obj.strftime(\"%a, %d %b %Y %H:%M:%S GMT\")\n    raise TypeError\n\n>>> orjson.dumps({\"created_at\": datetime.datetime(1970, 1, 1)})\nb'{\"created_at\":\"1970-01-01T00:00:00\"}'\n>>> orjson.dumps({\"created_at\": datetime.datetime(1970, 1, 1)}, option=orjson.OPT_PASSTHROUGH_DATETIME)\nTypeError: Type is not JSON serializable: datetime.datetime\n>>> orjson.dumps(\n        {\"created_at\": datetime.datetime(1970, 1, 1)},\n        option=orjson.OPT_PASSTHROUGH_DATETIME,\n        default=default,\n    )\nb'{\"created_at\":\"Thu, 01 Jan 1970 00:00:00 GMT\"}'\n```\n\nThis does not affect datetimes in `dict` keys if using OPT_NON_STR_KEYS.\n\n##### OPT_PASSTHROUGH_SUBCLASS\n\nPassthrough subclasses of builtin types to `default`.\n\n```python\n>>> import orjson\n>>>\nclass Secret(str):\n    pass\n\ndef default(obj):\n    if isinstance(obj, Secret):\n        return \"******\"\n    raise TypeError\n\n>>> orjson.dumps(Secret(\"zxc\"))\nb'\"zxc\"'\n>>> orjson.dumps(Secret(\"zxc\"), option=orjson.OPT_PASSTHROUGH_SUBCLASS)\nTypeError: Type is not JSON serializable: Secret\n>>> orjson.dumps(Secret(\"zxc\"), option=orjson.OPT_PASSTHROUGH_SUBCLASS, default=default)\nb'\"******\"'\n```\n\nThis does not affect serializing subclasses as `dict` keys if using\nOPT_NON_STR_KEYS.\n\n##### OPT_SERIALIZE_DATACLASS\n\nThis is deprecated and has no effect in version 3. In version 2 this was\nrequired to serialize  `dataclasses.dataclass` instances. For more, see\n[dataclass](https://github.com/ijl/orjson?tab=readme-ov-file#dataclass).\n\n##### OPT_SERIALIZE_NUMPY\n\nSerialize `numpy.ndarray` instances. For more, see\n[numpy](https://github.com/ijl/orjson?tab=readme-ov-file#numpy).\n\n##### OPT_SERIALIZE_UUID\n\nThis is deprecated and has no effect in version 3. In version 2 this was\nrequired to serialize `uuid.UUID` instances. For more, see\n[UUID](https://github.com/ijl/orjson?tab=readme-ov-file#UUID).\n\n##### OPT_SORT_KEYS\n\nSerialize `dict` keys in sorted order. The default is to serialize in an\nunspecified order. This is equivalent to `sort_keys=True` in the standard\nlibrary.\n\nThis can be used to ensure the order is deterministic for hashing or tests.\nIt has a substantial performance penalty and is not recommended in general.\n\n```python\n>>> import orjson\n>>> orjson.dumps({\"b\": 1, \"c\": 2, \"a\": 3})\nb'{\"b\":1,\"c\":2,\"a\":3}'\n>>> orjson.dumps({\"b\": 1, \"c\": 2, \"a\": 3}, option=orjson.OPT_SORT_KEYS)\nb'{\"a\":3,\"b\":1,\"c\":2}'\n```\n\nThis measures serializing the twitter.json fixture unsorted and sorted:\n\n| Library   |   unsorted (ms) |   sorted (ms) |   vs. orjson |\n|-----------|-----------------|---------------|--------------|\n| orjson    |            0.11 |          0.3  |          1   |\n| json      |            1.36 |          1.93 |          6.4 |\n\nThe benchmark can be reproduced using the `pysort` script.\n\nThe sorting is not collation/locale-aware:\n\n```python\n>>> import orjson\n>>> orjson.dumps({\"a\": 1, \"ä\": 2, \"A\": 3}, option=orjson.OPT_SORT_KEYS)\nb'{\"A\":3,\"a\":1,\"\\xc3\\xa4\":2}'\n```\n\nThis is the same sorting behavior as the standard library.\n\n`dataclass` also serialize as maps but this has no effect on them.\n\n##### OPT_STRICT_INTEGER\n\nEnforce 53-bit limit on integers. The limit is otherwise 64 bits, the same as\nthe Python standard library. For more, see [int](https://github.com/ijl/orjson?tab=readme-ov-file#int).\n\n##### OPT_UTC_Z\n\nSerialize a UTC timezone on `datetime.datetime` instances as `Z` instead\nof `+00:00`.\n\n```python\n>>> import orjson, datetime, zoneinfo\n>>> orjson.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(\"UTC\")),\n    )\nb'\"1970-01-01T00:00:00+00:00\"'\n>>> orjson.dumps(\n        datetime.datetime(1970, 1, 1, 0, 0, 0, tzinfo=zoneinfo.ZoneInfo(\"UTC\")),\n        option=orjson.OPT_UTC_Z\n    )\nb'\"1970-01-01T00:00:00Z\"'\n```\n\n#### Fragment\n\n`orjson.Fragment` includes already-serialized JSON in a document. This is an\nefficient way to include JSON blobs from a cache, JSONB field, or separately\nserialized object without first deserializing to Python objects via `loads()`.\n\n```python\n>>> import orjson\n>>> orjson.dumps({\"key\": \"zxc\", \"data\": orjson.Fragment(b'{\"a\": \"b\", \"c\": 1}')})\nb'{\"key\":\"zxc\",\"data\":{\"a\": \"b\", \"c\": 1}}'\n```\n\nIt does no reformatting: `orjson.OPT_INDENT_2` will not affect a\ncompact blob nor will a pretty-printed JSON blob be rewritten as compact.\n\nThe input must be `bytes` or `str` and given as a positional argument.\n\nThis raises `orjson.JSONEncodeError` if a `str` is given and the input is\nnot valid UTF-8. It otherwise does no validation and it is possible to\nwrite invalid JSON. This does not escape characters. The implementation is\ntested to not crash if given invalid strings or invalid JSON.\n\n### Deserialize\n\n```python\ndef loads(__obj: Union[bytes, bytearray, memoryview, str]) -> Any: ...\n```\n\n`loads()` deserializes JSON to Python objects. It deserializes to `dict`,\n`list`, `int`, `float`, `str`, `bool`, and `None` objects.\n\n`bytes`, `bytearray`, `memoryview`, and `str` input are accepted. If the input\nexists as a `memoryview`, `bytearray`, or `bytes` object, it is recommended to\npass these directly rather than creating an unnecessary `str` object. That is,\n`orjson.loads(b\"{}\")` instead of `orjson.loads(b\"{}\".decode(\"utf-8\"))`. This\nhas lower memory usage and lower latency.\n\nThe input must be valid UTF-8.\n\norjson maintains a cache of map keys for the duration of the process. This\ncauses a net reduction in memory usage by avoiding duplicate strings. The\nkeys must be at most 64 bytes to be cached and 2048 entries are stored.\n\nThe global interpreter lock (GIL) is held for the duration of the call.\n\nIt raises `JSONDecodeError` if given an invalid type or invalid\nJSON. This includes if the input contains `NaN`, `Infinity`, or `-Infinity`,\nwhich the standard library allows, but is not valid JSON.\n\nIt raises `JSONDecodeError` if a combination of array or object recurses\n1024 levels deep.\n\n`JSONDecodeError` is a subclass of `json.JSONDecodeError` and `ValueError`.\nThis is for compatibility with the standard library.\n\n## Types\n\n### dataclass\n\norjson serializes instances of `dataclasses.dataclass` natively. It serializes\ninstances 40-50x as fast as other libraries and avoids a severe slowdown seen\nin other libraries compared to serializing `dict`.\n\nIt is supported to pass all variants of dataclasses, including dataclasses\nusing `__slots__`, frozen dataclasses, those with optional or default\nattributes, and subclasses. There is a performance benefit to not\nusing `__slots__`.\n\n| Library   |   dict (ms) |   dataclass (ms) |   vs. orjson |\n|-----------|-------------|------------------|--------------|\n| orjson    |        0.43 |             0.95 |            1 |\n| json      |        5.81 |            38.32 |           40 |\n\nThis measures serializing 555KiB of JSON, orjson natively and other libraries\nusing `default` to serialize the output of `dataclasses.asdict()`. This can be\nreproduced using the `pydataclass` script.\n\nDataclasses are serialized as maps, with every attribute serialized and in\nthe order given on class definition:\n\n```python\n>>> import dataclasses, orjson, typing\n\n@dataclasses.dataclass\nclass Member:\n    id: int\n    active: bool = dataclasses.field(default=False)\n\n@dataclasses.dataclass\nclass Object:\n    id: int\n    name: str\n    members: typing.List[Member]\n\n>>> orjson.dumps(Object(1, \"a\", [Member(1, True), Member(2)]))\nb'{\"id\":1,\"name\":\"a\",\"members\":[{\"id\":1,\"active\":true},{\"id\":2,\"active\":false}]}'\n```\n\n### datetime\n\norjson serializes `datetime.datetime` objects to\n[RFC 3339](https://tools.ietf.org/html/rfc3339) format,\ne.g., \"1970-01-01T00:00:00+00:00\". This is a subset of ISO 8601 and is\ncompatible with `isoformat()` in the standard library.\n\n```python\n>>> import orjson, datetime, zoneinfo\n>>> orjson.dumps(\n    datetime.datetime(2018, 12, 1, 2, 3, 4, 9, tzinfo=zoneinfo.ZoneInfo(\"Australia/Adelaide\"))\n)\nb'\"2018-12-01T02:03:04.000009+10:30\"'\n>>> orjson.dumps(\n    datetime.datetime(2100, 9, 1, 21, 55, 2).replace(tzinfo=zoneinfo.ZoneInfo(\"UTC\"))\n)\nb'\"2100-09-01T21:55:02+00:00\"'\n>>> orjson.dumps(\n    datetime.datetime(2100, 9, 1, 21, 55, 2)\n)\nb'\"2100-09-01T21:55:02\"'\n```\n\n`datetime.datetime` supports instances with a `tzinfo` that is `None`,\n`datetime.timezone.utc`, a timezone instance from the python3.9+ `zoneinfo`\nmodule, or a timezone instance from the third-party `pendulum`, `pytz`, or\n`dateutil`/`arrow` libraries.\n\nIt is fastest to use the standard library's `zoneinfo.ZoneInfo` for timezones.\n\n`datetime.time` objects must not have a `tzinfo`.\n\n```python\n>>> import orjson, datetime\n>>> orjson.dumps(datetime.time(12, 0, 15, 290))\nb'\"12:00:15.000290\"'\n```\n\n`datetime.date` objects will always serialize.\n\n```python\n>>> import orjson, datetime\n>>> orjson.dumps(datetime.date(1900, 1, 2))\nb'\"1900-01-02\"'\n```\n\nErrors with `tzinfo` result in `JSONEncodeError` being raised.\n\nTo disable serialization of `datetime` objects specify the option\n`orjson.OPT_PASSTHROUGH_DATETIME`.\n\nTo use \"Z\" suffix instead of \"+00:00\" to indicate UTC (\"Zulu\") time, use the option\n`orjson.OPT_UTC_Z`.\n\nTo assume datetimes without timezone are UTC, use the option `orjson.OPT_NAIVE_UTC`.\n\n### enum\n\norjson serializes enums natively. Options apply to their values.\n\n```python\n>>> import enum, datetime, orjson\n>>>\nclass DatetimeEnum(enum.Enum):\n    EPOCH = datetime.datetime(1970, 1, 1, 0, 0, 0)\n>>> orjson.dumps(DatetimeEnum.EPOCH)\nb'\"1970-01-01T00:00:00\"'\n>>> orjson.dumps(DatetimeEnum.EPOCH, option=orjson.OPT_NAIVE_UTC)\nb'\"1970-01-01T00:00:00+00:00\"'\n```\n\nEnums with members that are not supported types can be serialized using\n`default`:\n\n```python\n>>> import enum, orjson\n>>>\nclass Custom:\n    def __init__(self, val):\n        self.val = val\n\ndef default(obj):\n    if isinstance(obj, Custom):\n        return obj.val\n    raise TypeError\n\nclass CustomEnum(enum.Enum):\n    ONE = Custom(1)\n\n>>> orjson.dumps(CustomEnum.ONE, default=default)\nb'1'\n```\n\n### float\n\norjson serializes and deserializes double precision floats with no loss of\nprecision and consistent rounding.\n\n`orjson.dumps()` serializes Nan, Infinity, and -Infinity, which are not\ncompliant JSON, as `null`:\n\n```python\n>>> import orjson, json\n>>> orjson.dumps([float(\"NaN\"), float(\"Infinity\"), float(\"-Infinity\")])\nb'[null,null,null]'\n>>> json.dumps([float(\"NaN\"), float(\"Infinity\"), float(\"-Infinity\")])\n'[NaN, Infinity, -Infinity]'\n```\n\n### int\n\norjson serializes and deserializes 64-bit integers by default. The range\nsupported is a signed 64-bit integer's minimum (-9223372036854775807) to\nan unsigned 64-bit integer's maximum (18446744073709551615). This\nis widely compatible, but there are implementations\nthat only support 53-bits for integers, e.g.,\nweb browsers. For those implementations, `dumps()` can be configured to\nraise a `JSONEncodeError` on values exceeding the 53-bit range.\n\n```python\n>>> import orjson\n>>> orjson.dumps(9007199254740992)\nb'9007199254740992'\n>>> orjson.dumps(9007199254740992, option=orjson.OPT_STRICT_INTEGER)\nJSONEncodeError: Integer exceeds 53-bit range\n>>> orjson.dumps(-9007199254740992, option=orjson.OPT_STRICT_INTEGER)\nJSONEncodeError: Integer exceeds 53-bit range\n```\n\n### numpy\n\norjson natively serializes `numpy.ndarray` and individual\n`numpy.float64`, `numpy.float32`, `numpy.float16` (`numpy.half`),\n`numpy.int64`, `numpy.int32`, `numpy.int16`, `numpy.int8`,\n`numpy.uint64`, `numpy.uint32`, `numpy.uint16`, `numpy.uint8`,\n`numpy.uintp`, `numpy.intp`, `numpy.datetime64`, and `numpy.bool`\ninstances.\n\norjson is compatible with both numpy v1 and v2.\n\norjson is faster than all compared libraries at serializing\nnumpy instances. Serializing numpy data requires specifying\n`option=orjson.OPT_SERIALIZE_NUMPY`.\n\n```python\n>>> import orjson, numpy\n>>> orjson.dumps(\n        numpy.array([[1, 2, 3], [4, 5, 6]]),\n        option=orjson.OPT_SERIALIZE_NUMPY,\n)\nb'[[1,2,3],[4,5,6]]'\n```\n\nThe array must be a contiguous C array (`C_CONTIGUOUS`) and one of the\nsupported datatypes.\n\nNote a difference between serializing `numpy.float32` using `ndarray.tolist()`\nor `orjson.dumps(..., option=orjson.OPT_SERIALIZE_NUMPY)`: `tolist()` converts\nto a `double` before serializing and orjson's native path does not. This\ncan result in different rounding.\n\n`numpy.datetime64` instances are serialized as RFC 3339 strings and\ndatetime options affect them.\n\n```python\n>>> import orjson, numpy\n>>> orjson.dumps(\n        numpy.datetime64(\"2021-01-01T00:00:00.172\"),\n        option=orjson.OPT_SERIALIZE_NUMPY,\n)\nb'\"2021-01-01T00:00:00.172000\"'\n>>> orjson.dumps(\n        numpy.datetime64(\"2021-01-01T00:00:00.172\"),\n        option=(\n            orjson.OPT_SERIALIZE_NUMPY |\n            orjson.OPT_NAIVE_UTC |\n            orjson.OPT_OMIT_MICROSECONDS\n        ),\n)\nb'\"2021-01-01T00:00:00+00:00\"'\n```\n\nIf an array is not a contiguous C array, contains an unsupported datatype,\nor contains a `numpy.datetime64` using an unsupported representation\n(e.g., picoseconds), orjson falls through to `default`. In `default`,\n`obj.tolist()` can be specified.\n\nIf an array is not in the native endianness, e.g., an array of big-endian values\non a little-endian system, `orjson.JSONEncodeError`  is raised.\n\nIf an array is malformed, `orjson.JSONEncodeError` is raised.\n\nThis measures serializing 92MiB of JSON from an `numpy.ndarray` with\ndimensions of `(50000, 100)` and `numpy.float64` values:\n\n| Library   | Latency (ms)   |   RSS diff (MiB) |   vs. orjson |\n|-----------|----------------|------------------|--------------|\n| orjson    | 105            |              105 |          1   |\n| json      | 1,481          |              295 |         14.2 |\n\nThis measures serializing 100MiB of JSON from an `numpy.ndarray` with\ndimensions of `(100000, 100)` and `numpy.int32` values:\n\n| Library   |   Latency (ms) |   RSS diff (MiB) |   vs. orjson |\n|-----------|----------------|------------------|--------------|\n| orjson    |             68 |              119 |          1   |\n| json      |            684 |              501 |         10.1 |\n\nThis measures serializing 105MiB of JSON from an `numpy.ndarray` with\ndimensions of `(100000, 200)` and `numpy.bool` values:\n\n| Library   |   Latency (ms) |   RSS diff (MiB) |   vs. orjson |\n|-----------|----------------|------------------|--------------|\n| orjson    |             50 |              125 |          1   |\n| json      |            573 |              398 |         11.5 |\n\nIn these benchmarks, orjson serializes natively and `json` serializes\n`ndarray.tolist()` via `default`. The RSS column measures peak memory\nusage during serialization. This can be reproduced using the `pynumpy` script.\n\norjson does not have an installation or compilation dependency on numpy. The\nimplementation is independent, reading `numpy.ndarray` using\n`PyArrayInterface`.\n\n### str\n\norjson is strict about UTF-8 conformance. This is stricter than the standard\nlibrary's json module, which will serialize and deserialize UTF-16 surrogates,\ne.g., \"\\ud800\", that are invalid UTF-8.\n\nIf `orjson.dumps()` is given a `str` that does not contain valid UTF-8,\n`orjson.JSONEncodeError` is raised. If `loads()` receives invalid UTF-8,\n`orjson.JSONDecodeError` is raised.\n\n```python\n>>> import orjson, json\n>>> orjson.dumps('\\ud800')\nJSONEncodeError: str is not valid UTF-8: surrogates not allowed\n>>> json.dumps('\\ud800')\n'\"\\\\ud800\"'\n>>> orjson.loads('\"\\\\ud800\"')\nJSONDecodeError: unexpected end of hex escape at line 1 column 8: line 1 column 1 (char 0)\n>>> json.loads('\"\\\\ud800\"')\n'\\ud800'\n```\n\nTo make a best effort at deserializing bad input, first decode `bytes` using\nthe `replace` or `lossy` argument for `errors`:\n\n```python\n>>> import orjson\n>>> orjson.loads(b'\"\\xed\\xa0\\x80\"')\nJSONDecodeError: str is not valid UTF-8: surrogates not allowed\n>>> orjson.loads(b'\"\\xed\\xa0\\x80\"'.decode(\"utf-8\", \"replace\"))\n'���'\n```\n\n### uuid\n\norjson serializes `uuid.UUID` instances to\n[RFC 4122](https://tools.ietf.org/html/rfc4122) format, e.g.,\n\"f81d4fae-7dec-11d0-a765-00a0c91e6bf6\".\n\n``` python\n>>> import orjson, uuid\n>>> orjson.dumps(uuid.uuid5(uuid.NAMESPACE_DNS, \"python.org\"))\nb'\"886313e1-3b8a-5372-9b90-0c9aee199e5d\"'\n```\n\n## Testing\n\nThe library has comprehensive tests. There are tests against fixtures in the\n[JSONTestSuite](https://github.com/nst/JSONTestSuite) and\n[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark)\nrepositories. It is tested to not crash against the\n[Big List of Naughty Strings](https://github.com/minimaxir/big-list-of-naughty-strings).\nIt is tested to not leak memory. It is tested to not crash\nagainst and not accept invalid UTF-8. There are integration tests\nexercising the library's use in web servers (gunicorn using multiprocess/forked\nworkers) and when\nmultithreaded. It also uses some tests from the ultrajson library.\n\norjson is the most correct of the compared libraries. This graph shows how each\nlibrary handles a combined 342 JSON fixtures from the\n[JSONTestSuite](https://github.com/nst/JSONTestSuite) and\n[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark) tests:\n\n| Library    |   Invalid JSON documents not rejected |   Valid JSON documents not deserialized |\n|------------|---------------------------------------|-----------------------------------------|\n| orjson     |                                     0 |                                       0 |\n| json       |                                    17 |                                       0 |\n\nThis shows that all libraries deserialize valid JSON but only orjson\ncorrectly rejects the given invalid JSON fixtures. Errors are largely due to\naccepting invalid strings and numbers.\n\nThe graph above can be reproduced using the `pycorrectness` script.\n\n## Performance\n\nSerialization and deserialization performance of orjson is consistently better\nthan the standard library's `json`. The graphs below illustrate a few commonly\nused documents.\n\n### Latency\n\n![Serialization](doc/serialization.png)\n\n![Deserialization](doc/deserialization.png)\n\n#### twitter.json serialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                             0.1 |                    8453 |                  1   |\n| json      |                             1.3 |                     765 |                 11.1 |\n\n#### twitter.json deserialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                             0.5 |                    1889 |                  1   |\n| json      |                             2.2 |                     453 |                  4.2 |\n\n#### github.json serialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                            0.01 |                  103693 |                  1   |\n| json      |                            0.13 |                    7648 |                 13.6 |\n\n#### github.json deserialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                            0.04 |                   23264 |                  1   |\n| json      |                            0.1  |                   10430 |                  2.2 |\n\n#### citm_catalog.json serialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                             0.3 |                    3975 |                  1   |\n| json      |                             3   |                     338 |                 11.8 |\n\n#### citm_catalog.json deserialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                             1.3 |                     781 |                  1   |\n| json      |                             4   |                     250 |                  3.1 |\n\n#### canada.json serialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                             2.5 |                     399 |                  1   |\n| json      |                            29.8 |                      33 |                 11.9 |\n\n#### canada.json deserialization\n\n| Library   |   Median latency (milliseconds) |   Operations per second |   Relative (latency) |\n|-----------|---------------------------------|-------------------------|----------------------|\n| orjson    |                               3 |                     333 |                    1 |\n| json      |                              18 |                      55 |                    6 |\n\n### Reproducing\n\nThe above was measured using Python 3.11.10 in a Fedora 42 container on an\nx86-64-v4 machine using the\n`orjson-3.10.11-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl`\nartifact on PyPI. The latency results can be reproduced using the `pybench` script.\n\n## Questions\n\n### Why can't I install it from PyPI?\n\nProbably `pip` needs to be upgraded to version 20.3 or later to support\nthe latest manylinux_x_y or universal2 wheel formats.\n\n### \"Cargo, the Rust package manager, is not installed or is not on PATH.\"\n\nThis happens when there are no binary wheels (like manylinux) for your\nplatform on PyPI. You can install [Rust](https://www.rust-lang.org/) through\n`rustup` or a package manager and then it will compile.\n\n### Will it deserialize to dataclasses, UUIDs, decimals, etc or support object_hook?\n\nNo. This requires a schema specifying what types are expected and how to\nhandle errors etc. This is addressed by data validation libraries a\nlevel above this.\n\n### Will it serialize to `str`?\n\nNo. `bytes` is the correct type for a serialized blob.\n\n### Will it support NDJSON or JSONL?\n\nNo. [orjsonl](https://github.com/umarbutler/orjsonl) may be appropriate.\n\n### Will it support JSON5 or RJSON?\n\nNo, it supports RFC 8259.\n\n## Packaging\n\nTo package orjson requires at least [Rust](https://www.rust-lang.org/) 1.82\nand the [maturin](https://github.com/PyO3/maturin) build tool. The recommended\nbuild command is:\n\n```sh\nmaturin build --release --strip\n```\n\nIt benefits from also having a C build environment to compile a faster\ndeserialization backend. See this project's `manylinux_2_28` builds for an\nexample using clang and LTO.\n\nThe project's own CI tests against `nightly-2025-01-07` and stable 1.72. It\nis prudent to pin the nightly version because that channel can introduce\nbreaking changes. There is a significant performance benefit to using\nnightly.\n\norjson is tested for amd64, aarch64, and i686 on Linux and cross-compiles for\narm7, ppc64le, and s390x. It is tested for either aarch64 or amd64 on macOS and\ncross-compiles for the other, depending on version. For Windows it is\ntested on amd64 and i686.\n\nThere are no runtime dependencies other than libc.\n\nThe source distribution on PyPI contains all dependencies' source and can be\nbuilt without network access. The file can be downloaded from\n`https://files.pythonhosted.org/packages/source/o/orjson/orjson-${version}.tar.gz`.\n\norjson's tests are included in the source distribution on PyPI. The\nrequirements to run the tests are specified in `test/requirements.txt`. The\ntests should be run as part of the build. It can be run with\n`pytest -q test`.\n\n## License\n\norjson was written by ijl <<ijl@mailbox.org>>, copyright 2018 - 2025, available\nto you under either the Apache 2 license or MIT license at your choice.\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 3.34765625,
          "content": "// SPDX-License-Identifier: (Apache-2.0 OR MIT)\n\nuse std::env;\n\nfn main() {\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    println!(\"cargo:rerun-if-changed=include/yyjson/*\");\n    println!(\"cargo:rerun-if-env-changed=CC\");\n    println!(\"cargo:rerun-if-env-changed=CFLAGS\");\n    println!(\"cargo:rerun-if-env-changed=LDFLAGS\");\n    println!(\"cargo:rerun-if-env-changed=ORJSON_DISABLE_AVX512\");\n    println!(\"cargo:rerun-if-env-changed=ORJSON_DISABLE_SIMD\");\n    println!(\"cargo:rerun-if-env-changed=ORJSON_DISABLE_YYJSON\");\n    println!(\"cargo:rerun-if-env-changed=RUSTFLAGS\");\n    println!(\"cargo:rustc-check-cfg=cfg(intrinsics)\");\n    println!(\"cargo:rustc-check-cfg=cfg(optimize)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_10)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_11)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_12)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_13)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_14)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_8)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_3_9)\");\n    println!(\"cargo:rustc-check-cfg=cfg(Py_GIL_DISABLED)\");\n\n    let python_config = pyo3_build_config::get();\n    for cfg in python_config.build_script_outputs() {\n        println!(\"{cfg}\");\n    }\n\n    if let Some(true) = version_check::supports_feature(\"core_intrinsics\") {\n        println!(\"cargo:rustc-cfg=feature=\\\"intrinsics\\\"\");\n    }\n\n    if let Some(true) = version_check::supports_feature(\"optimize_attribute\") {\n        println!(\"cargo:rustc-cfg=feature=\\\"optimize\\\"\");\n    }\n\n    #[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n    if env::var(\"ORJSON_DISABLE_SIMD\").is_err() {\n        // auto build unstable SIMD on nightly\n        if let Some(true) = version_check::supports_feature(\"portable_simd\") {\n            println!(\"cargo:rustc-cfg=feature=\\\"unstable-simd\\\"\");\n        }\n        // auto build AVX512 on x86-64-v4 or supporting native targets\n        #[cfg(all(target_arch = \"x86_64\", target_feature = \"avx512vl\"))]\n        if let Some(true) = version_check::supports_feature(\"stdarch_x86_avx512\") {\n            if env::var(\"ORJSON_DISABLE_AVX512\").is_err() {\n                println!(\"cargo:rustc-cfg=feature=\\\"avx512\\\"\");\n            }\n        }\n    }\n\n    #[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n    if matches!(python_config.pointer_width, Some(64)) {\n        println!(\"cargo:rustc-cfg=feature=\\\"inline_int\\\"\");\n    }\n\n    if env::var(\"ORJSON_DISABLE_YYJSON\").is_ok() {\n        if env::var(\"CARGO_FEATURE_YYJSON\").is_ok() {\n            panic!(\"ORJSON_DISABLE_YYJSON and --features=yyjson both enabled.\")\n        }\n    } else {\n        match cc::Build::new()\n            .file(\"include/yyjson/yyjson.c\")\n            .include(\"include/yyjson\")\n            .define(\"YYJSON_DISABLE_NON_STANDARD\", \"1\")\n            .define(\"YYJSON_DISABLE_UTF8_VALIDATION\", \"1\")\n            .define(\"YYJSON_DISABLE_UTILS\", \"1\")\n            .define(\"YYJSON_DISABLE_WRITER\", \"1\")\n            .try_compile(\"yyjson\")\n        {\n            Ok(_) => {\n                println!(\"cargo:rustc-cfg=feature=\\\"yyjson\\\"\");\n            }\n            Err(_) => {\n                if env::var(\"CARGO_FEATURE_YYJSON\").is_ok() {\n                    panic!(\n                        \"yyjson was enabled but the build failed. To build with a different backend do not specify the feature.\"\n                    )\n                }\n            }\n        }\n    }\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 1.85546875,
          "content": "[project]\nname = \"orjson\"\nversion = \"3.10.14\"\nrepository = \"https://github.com/ijl/orjson\"\nrequires-python = \">=3.8\"\nclassifiers = [\n    \"Development Status :: 5 - Production/Stable\",\n    \"Intended Audience :: Developers\",\n    \"License :: OSI Approved :: Apache Software License\",\n    \"License :: OSI Approved :: MIT License\",\n    \"Operating System :: MacOS\",\n    \"Operating System :: Microsoft :: Windows\",\n    \"Operating System :: POSIX :: Linux\",\n    \"Programming Language :: Python :: 3\",\n    \"Programming Language :: Python :: 3.8\",\n    \"Programming Language :: Python :: 3.9\",\n    \"Programming Language :: Python :: 3.10\",\n    \"Programming Language :: Python :: 3.11\",\n    \"Programming Language :: Python :: 3.12\",\n    \"Programming Language :: Python :: 3.13\",\n    \"Programming Language :: Python :: 3.14\",\n    \"Programming Language :: Python :: Implementation :: CPython\",\n    \"Programming Language :: Python\",\n    \"Programming Language :: Rust\",\n    \"Typing :: Typed\",\n]\n\n[project.urls]\nDocumentation = \"https://github.com/ijl/orjson\"\nChangelog = \"https://github.com/ijl/orjson/blob/master/CHANGELOG.md\"\n\n[build-system]\nbuild-backend = \"maturin\"\nrequires = [\"maturin>=1,<2\"]\n\n[tool.maturin]\npython-source = \"pysrc\"\ninclude = [\n    { format = \"sdist\", path = \".cargo/*\" },\n    { format = \"sdist\", path = \"build.rs\" },\n    { format = \"sdist\", path = \"Cargo.lock\" },\n    { format = \"sdist\", path = \"include/cargo/**/*\" },\n    { format = \"sdist\", path = \"include/pyo3/**/*\" },\n    { format = \"sdist\", path = \"include/yyjson/**/*\" },\n]\n\n[tool.ruff]\nline-length = 88\ntarget-version = \"py38\"\n\n[tool.ruff.lint]\nselect = [\n    \"I\",\n]\nignore = [\n    \"E501\", # line too long\n    \"F601\", # Dictionary key literal ... repeated\n]\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"orjson\"]\n\n[tool.mypy]\npython_version = \"3.8\"\n\n[[tool.mypy.overrides]]\nmodule = [\"dateutil\", \"pytz\"]\nignore_missing_imports = true\n"
        },
        {
          "name": "pysrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.1201171875,
          "content": "-r bench/requirements.txt\n-r integration/requirements.txt\n-r test/requirements.txt\nmaturin>=1,<2\nmypy==1.13.0\nruff>=0.8,<9\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}