{
  "metadata": {
    "timestamp": 1736560623860,
    "page": 255,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jazzband/pip-tools",
      "stars": 7808,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bandit",
          "type": "blob",
          "size": 0.056640625,
          "content": "[bandit]\nexclude: tests,.tox,.eggs,.venv,.git\nskips: B101\n"
        },
        {
          "name": ".coveragerc",
          "type": "blob",
          "size": 0.111328125,
          "content": "[run]\nplugins = covdefaults\nomit =\n    piptools/_compat/*\n\n[report]\ninclude = piptools/*, tests/*\nfail_under = 99\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.361328125,
          "content": "[flake8]\nmax-line-length = 100\n# E203 conflicts with PEP8; see https://github.com/psf/black#slices\nextend-ignore = E203\n\n# flake8-pytest-style\n# PT001:\npytest-fixture-no-parentheses = true\n# PT006:\npytest-parametrize-names-type = tuple\n# PT007:\npytest-parametrize-values-type = tuple\npytest-parametrize-values-row-type = tuple\n# PT023:\npytest-mark-no-parentheses = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.27734375,
          "content": "# Ignore cram test output\n*.t.err\n\n# Python cruft\n*.pyc\n\n# Virtualenvs\n.envrc\n.direnv\n.venv\nvenv/\n\n# Testing\n.pytest_cache/\n.tox\nhtmlcov\n\n# Build output\nbuild\ndist\n*.egg-info\n.coverage\n.coverage.*\ncoverage.xml\n.cache\n\n# IDE\n.idea\n\n# Test files\nrequirements.in\nrequirements.txt\n.eggs/\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.3583984375,
          "content": "repos:\n  - repo: https://github.com/psf/black\n    rev: 24.10.0\n    hooks:\n      - id: black\n        args: [--target-version=py38]\n  - repo: https://github.com/PyCQA/isort\n    rev: 5.13.2\n    hooks:\n      - id: isort\n  - repo: https://github.com/asottile/pyupgrade\n    rev: v3.19.1\n    hooks:\n      - id: pyupgrade\n        args: [--py38-plus]\n  - repo: https://github.com/PyCQA/flake8\n    rev: 7.1.1\n    hooks:\n      - id: flake8\n        additional_dependencies:\n          - flake8-pytest-style\n  - repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.14.0\n    hooks:\n      - id: mypy\n        # Avoid error: Duplicate module named 'setup'\n        # https://github.com/python/mypy/issues/4008\n        # Keep exclude in sync with mypy own excludes\n        exclude: ^tests/test_data/\n        additional_dependencies:\n          - click==8.0.1\n          - pep517==0.10.0\n          - toml==0.10.2\n          - pip==20.3.4\n          - build==1.0.0\n          - pyproject_hooks==1.0.0\n          - pytest==7.4.2\n        language_version: python3.9\n  - repo: https://github.com/PyCQA/bandit\n    rev: 1.8.0\n    hooks:\n      - id: bandit\n        args: [--ini, .bandit]\n        exclude: ^tests/\n  - repo: https://github.com/pre-commit/mirrors-prettier\n    rev: v4.0.0-alpha.8\n    hooks:\n      - id: prettier\n        additional_dependencies:\n          - \"prettier\"\n          - \"prettier-plugin-toml\"\n"
        },
        {
          "name": ".pre-commit-hooks.yaml",
          "type": "blob",
          "size": 0.1826171875,
          "content": "- id: pip-compile\n  name: pip-compile\n  description: Automatically compile requirements.\n  entry: pip-compile\n  language: python\n  files: ^requirements\\.(in|txt)$\n  pass_filenames: false\n"
        },
        {
          "name": ".prettierrc.yaml",
          "type": "blob",
          "size": 0.0869140625,
          "content": "printWidth: 88\noverrides:\n  - files: \"CHANGELOG.md\"\n    options:\n      proseWrap: always\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.451171875,
          "content": "# https://docs.readthedocs.io/en/stable/config-file/v2.html\n\nversion: 2\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  builder: dirhtml\n  configuration: docs/conf.py\n  fail_on_warning: true\n\nformats:\n  - pdf\n  - htmlzip\n\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: >-\n      3.11\n  jobs:\n    post_checkout:\n      - git fetch --unshallow || true\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n    - method: pip\n      path: .\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 45.359375,
          "content": "## v7.4.1\n\n05 Mar 2024\n\nBug Fixes:\n\n- Skip constraint path check ([#2038](https://github.com/jazzband/pip-tools/pull/2038)).\n  Thanks @honnix\n- Fix collecting deps for all extras in multiple input packages\n  ([#1981](https://github.com/jazzband/pip-tools/pull/1981)). Thanks @dragly\n\n## v7.4.0\n\n16 Feb 2024\n\nFeatures:\n\n- Allow force-enabling or force-disabling colorized output\n  ([#2041](https://github.com/jazzband/pip-tools/pull/2041)). Thanks @aneeshusa\n- Add support for command-specific configuration sections\n  ([#1966](https://github.com/jazzband/pip-tools/pull/1966)). Thanks @chrysle\n- Add options for including build dependencies in compiled output\n  ([#1681](https://github.com/jazzband/pip-tools/pull/1681)). Thanks @apljungquist\n\nBug Fixes:\n\n- Fix for `src-files` not being used when specified in a config file\n  ([#2015](https://github.com/jazzband/pip-tools/pull/2015)). Thanks @csalerno-asml\n- Fix ignorance of inverted CLI options in config for `pip-sync`\n  ([#1989](https://github.com/jazzband/pip-tools/pull/1989)). Thanks @chrysle\n- Filter out origin ireqs for extra requirements before writing output annotations\n  ([#2011](https://github.com/jazzband/pip-tools/pull/2011)). Thanks @chrysle\n- Make BacktrackingResolver ignore extras when dropping existing constraints\n  ([#1984](https://github.com/jazzband/pip-tools/pull/1984)). Thanks @chludwig-haufe\n- Display `pyproject.toml`'s metatada parsing errors in verbose mode\n  ([#1979](https://github.com/jazzband/pip-tools/pull/1979)). Thanks @szobov\n\nOther Changes:\n\n- Add mention of pip-compile-multi in Other useful tools README section\n  ([#1986](https://github.com/jazzband/pip-tools/pull/1986)). Thanks @peterdemin\n\n## v7.3.0\n\n09 Aug 2023\n\nFeatures:\n\n- Add `--no-strip-extras` and warn about strip extras by default\n  ([#1954](https://github.com/jazzband/pip-tools/pull/1954)). Thanks @ryanhiebert\n\nBug Fixes:\n\n- Fix revealed default config in header if requirements in subfolder\n  ([#1904](https://github.com/jazzband/pip-tools/pull/1904)). Thanks @atugushev\n- Direct references show extra requirements in .txt files\n  ([#1582](https://github.com/jazzband/pip-tools/pull/1582)). Thanks @FlorentJeannot\n\nOther Changes:\n\n- Document how to run under `pipx run`\n  ([#1951](https://github.com/jazzband/pip-tools/pull/1951)). Thanks @brettcannon\n- Document that the backtracking resolver is the current default\n  ([#1948](https://github.com/jazzband/pip-tools/pull/1948)). Thanks @jeffwidman\n\n## v7.2.0\n\n02 Aug 2023\n\nFeatures:\n\n- Add `-c/--constraint` option to `pip-compile`\n  ([#1936](https://github.com/jazzband/pip-tools/pull/1936)). Thanks @atugushev\n\nBug Fixes:\n\n- Allow options in config from both `pip-compile` and `pip-sync`\n  ([#1933](https://github.com/jazzband/pip-tools/pull/1933)). Thanks @atugushev\n- Fix rejection of negating CLI boolean flags in config\n  ([#1913](https://github.com/jazzband/pip-tools/pull/1913)). Thanks @chrysle\n\nOther Changes:\n\n- Add Command Line Reference section to docs\n  ([#1934](https://github.com/jazzband/pip-tools/pull/1934)). Thanks @atugushev\n\n## v7.1.0\n\n18 Jul 2023\n\nFeatures:\n\n- Validate parsed config against CLI options\n  ([#1910](https://github.com/jazzband/pip-tools/pull/1910)). Thanks @atugushev\n\nBug Fixes:\n\n- Fix a bug where pip-sync would unexpectedly uninstall some packages\n  ([#1919](https://github.com/jazzband/pip-tools/pull/1919)). Thanks @atugushev\n\n## v7.0.0\n\n14 Jul 2023\n\nBackwards Incompatible Changes:\n\n- Default to `--resolver=backtracking`\n  ([#1897](https://github.com/jazzband/pip-tools/pull/1897)). Thanks @atugushev\n- Drop support for Python 3.7\n  ([#1879](https://github.com/jazzband/pip-tools/pull/1879)). Thanks @chrysle\n\nFeatures:\n\n- Add support for `pip==23.2` where refactored out `DEV_PKGS`\n  ([#1906](https://github.com/jazzband/pip-tools/pull/1906)). Thanks @atugushev\n- Add `--no-config` option ([#1896](https://github.com/jazzband/pip-tools/pull/1896)).\n  Thanks @atugushev\n\nBug Fixes:\n\n- Sync direct references with hashes\n  ([#1885](https://github.com/jazzband/pip-tools/pull/1885)). Thanks @siddharthab\n- Fix missing `via`s when more than two input files are used\n  ([#1890](https://github.com/jazzband/pip-tools/pull/1890)). Thanks @lpulley\n\n## v6.14.0\n\n28 Jun 2023\n\nFeatures:\n\n- Support config defaults using `.pip-tools.toml` or `pyproject.toml`\n  ([#1863](https://github.com/jazzband/pip-tools/pull/1863)). Thanks @j00bar\n- Log a warning if the user specifies `-P` and the output file is present but empty\n  ([#1822](https://github.com/jazzband/pip-tools/pull/1822)). Thanks @davidmreed\n- Improve warning for `pip-compile` if no `--allow-unsafe` was passed\n  ([#1867](https://github.com/jazzband/pip-tools/pull/1867)). Thanks @chrysle\n\nOther Changes:\n\n- Correct in README `pre-commit` hook to run off `requirements.in`\n  ([#1847](https://github.com/jazzband/pip-tools/pull/1847)). Thanks @atugushev\n- Add pyprojects.toml example for using setuptools\n  ([#1851](https://github.com/jazzband/pip-tools/pull/1851)). Thanks @shatakshiiii\n\n## v6.13.0\n\n07 Apr 2023\n\nFeatures:\n\n- Add support for self-referential extras\n  ([#1791](https://github.com/jazzband/pip-tools/pull/1791)). Thanks @q0w\n- Add support for `pip==23.1` where removed `FormatControl` in `WheelCache`\n  ([#1834](https://github.com/jazzband/pip-tools/pull/1834)). Thanks @atugushev\n- Add support for `pip==23.1` where refactored requirement options\n  ([#1832](https://github.com/jazzband/pip-tools/pull/1832)). Thanks @atugushev\n- Add support for `pip==23.1` where deprecated `--install-option` has been removed\n  ([#1828](https://github.com/jazzband/pip-tools/pull/1828)). Thanks @atugushev\n\nBug Fixes:\n\n- Pass `--cache-dir` to `--pip-args` for backtracking resolver\n  ([#1827](https://github.com/jazzband/pip-tools/pull/1827)). Thanks @q0w\n\nOther Changes:\n\n- Update examples in README ([#1835](https://github.com/jazzband/pip-tools/pull/1835)).\n  Thanks @lucaswerkmeister\n\n## v6.12.3\n\n01 Mar 2023\n\nBug Fixes:\n\n- Remove extras from user-supplied constraints in backtracking resolver\n  ([#1808](https://github.com/jazzband/pip-tools/pull/1808)). Thanks @thomdixon\n- Fix for sync error when the ireqs being merged have no names\n  ([#1802](https://github.com/jazzband/pip-tools/pull/1802)). Thanks @richafrank\n\n## v6.12.2\n\n25 Dec 2022\n\nBug Fixes:\n\n- Raise error if input and output filenames are matched\n  ([#1787](https://github.com/jazzband/pip-tools/pull/1787)). Thanks @atugushev\n- Add `pyproject.toml` as default input file format\n  ([#1780](https://github.com/jazzband/pip-tools/pull/1780)). Thanks @berislavlopac\n- Fix a regression with unsafe packages for `--allow-unsafe`\n  ([#1788](https://github.com/jazzband/pip-tools/pull/1788)). Thanks @q0w\n\n## v6.12.1\n\n16 Dec 2022\n\nBug Fixes:\n\n- Set explicitly packages for setuptools\n  ([#1782](https://github.com/jazzband/pip-tools/pull/1782)). Thanks @q0w\n\n## v6.12.0\n\n13 Dec 2022\n\nFeatures:\n\n- Add `--no-index` flag to `pip-compile`\n  ([#1745](https://github.com/jazzband/pip-tools/pull/1745)). Thanks @atugushev\n\nBug Fixes:\n\n- Treat `--upgrade-packages` PKGSPECs as constraints (not just minimums), consistently\n  ([#1578](https://github.com/jazzband/pip-tools/pull/1578)). Thanks @AndydeCleyre\n- Filter out the user provided unsafe packages\n  ([#1766](https://github.com/jazzband/pip-tools/pull/1766)). Thanks @q0w\n- Adopt PEP-621 for packaging\n  ([#1763](https://github.com/jazzband/pip-tools/pull/1763)). Thanks @ssbarnea\n\n## v6.11.0\n\n30 Nov 2022\n\nFeatures:\n\n- Add `pyproject.toml` file ([#1643](https://github.com/jazzband/pip-tools/pull/1643)).\n  Thanks @otherJL0\n- Support build isolation using `setuptools/pyproject.toml` requirement files\n  ([#1727](https://github.com/jazzband/pip-tools/pull/1727)). Thanks @atugushev\n\nBug Fixes:\n\n- Improve punctuation/grammar with `pip-compile` header\n  ([#1547](https://github.com/jazzband/pip-tools/pull/1547)). Thanks @blueyed\n- Generate hashes for all available candidates\n  ([#1723](https://github.com/jazzband/pip-tools/pull/1723)). Thanks @neykov\n\nOther Changes:\n\n- Bump click minimum version to `>= 8`\n  ([#1733](https://github.com/jazzband/pip-tools/pull/1733)). Thanks @atugushev\n- Bump pip minimum version to `>= 22.2`\n  ([#1729](https://github.com/jazzband/pip-tools/pull/1729)). Thanks @atugushev\n\n## v6.10.0\n\n13 Nov 2022\n\nFeatures:\n\n- Deprecate `pip-compile --resolver=legacy`\n  ([#1724](https://github.com/jazzband/pip-tools/pull/1724)). Thanks @atugushev\n- Prompt user to use the backtracking resolver on errors\n  ([#1719](https://github.com/jazzband/pip-tools/pull/1719)). Thanks @maxfenv\n- Add support for Python 3.11 final\n  ([#1708](https://github.com/jazzband/pip-tools/pull/1708)). Thanks @hugovk\n- Add `--newline=[LF|CRLF|native|preserve]` option to `pip-compile`\n  ([#1652](https://github.com/jazzband/pip-tools/pull/1652)). Thanks @AndydeCleyre\n\nBug Fixes:\n\n- Fix inconsistent handling of constraints comments with backtracking resolver\n  ([#1713](https://github.com/jazzband/pip-tools/pull/1713)). Thanks @mkniewallner\n- Fix some encoding warnings in Python 3.10 (PEP 597)\n  ([#1614](https://github.com/jazzband/pip-tools/pull/1614)). Thanks @GalaxySnail\n\nOther Changes:\n\n- Update pip-tools version in the README's pre-commit examples\n  ([#1701](https://github.com/jazzband/pip-tools/pull/1701)). Thanks @Kludex\n- Document use of the backtracking resolver\n  ([#1718](https://github.com/jazzband/pip-tools/pull/1718)). Thanks @maxfenv\n- Use HTTPS in a readme link ([#1716](https://github.com/jazzband/pip-tools/pull/1716)).\n  Thanks @Arhell\n\n## v6.9.0\n\n05 Oct 2022\n\nFeatures:\n\n- Add `--all-extras` flag to `pip-compile`\n  ([#1630](https://github.com/jazzband/pip-tools/pull/1630)). Thanks @apljungquist\n- Support Exclude Package with custom unsafe packages\n  ([#1509](https://github.com/jazzband/pip-tools/pull/1509)). Thanks @hmc-cs-mdrissi\n\nBug Fixes:\n\n- Fix compile cached vcs packages\n  ([#1649](https://github.com/jazzband/pip-tools/pull/1649)). Thanks @atugushev\n- Include `py.typed` in wheel file\n  ([#1648](https://github.com/jazzband/pip-tools/pull/1648)). Thanks @FlorentJeannot\n\nOther Changes:\n\n- Add pyproject.toml & modern packaging to introduction.\n  ([#1668](https://github.com/jazzband/pip-tools/pull/1668)). Thanks @hynek\n\n## v6.8.0\n\n30 Jun 2022\n\nFeatures:\n\n- Add support for pip's 2020 dependency resolver. Use\n  `pip-compile --resolver backtracking` to enable new resolver\n  ([#1539](https://github.com/jazzband/pip-tools/pull/1539)). Thanks @atugushev\n\n## v6.7.0\n\n27 Jun 2022\n\nFeatures:\n\n- Support for the `importlib.metadata` metadata implementation\n  ([#1632](https://github.com/jazzband/pip-tools/pull/1632)). Thanks @richafrank\n\nBug Fixes:\n\n- Instantiate a new accumulator `InstallRequirement` for `combine_install_requirements`\n  output ([#1519](https://github.com/jazzband/pip-tools/pull/1519)). Thanks @richafrank\n\nOther Changes:\n\n- Replace direct usage of the `pep517` module with the `build` module, for loading\n  project metadata ([#1629](https://github.com/jazzband/pip-tools/pull/1629)). Thanks\n  @AndydeCleyre\n\n## v6.6.2\n\n23 May 2022\n\nBug Fixes:\n\n- Update `PyPIRepository::resolve_reqs()` for pip>=22.1.1\n  ([#1624](https://github.com/jazzband/pip-tools/pull/1624)). Thanks @m000\n\n## v6.6.1\n\n13 May 2022\n\nBug Fixes:\n\n- Fix support for pip>=22.1 ([#1618](https://github.com/jazzband/pip-tools/pull/1618)).\n  Thanks @wizpig64\n\n## v6.6.0\n\n06 Apr 2022\n\nFeatures:\n\n- Add support for pip>=22.1 ([#1607](https://github.com/jazzband/pip-tools/pull/1607)).\n  Thanks @atugushev\n\nBug Fixes:\n\n- Ensure `pip-compile --dry-run --quiet` still shows what would be done, while omitting\n  the dry run message ([#1592](https://github.com/jazzband/pip-tools/pull/1592)). Thanks\n  @AndydeCleyre\n- Fix `--generate-hashes` when hashes are computed from files\n  ([#1540](https://github.com/jazzband/pip-tools/pull/1540)). Thanks @RazerM\n\n## v6.5.1\n\n08 Feb 2022\n\nBug Fixes:\n\n- Ensure canonicalized requirement names are used as keys, to prevent unnecessary\n  reinstallations during sync\n  ([#1572](https://github.com/jazzband/pip-tools/pull/1572)). Thanks @AndydeCleyre\n\n## v6.5.0\n\n04 Feb 2022\n\nFeatures:\n\n- Add support for pip>=22.0, drop support for Python 3.6\n  ([#1567](https://github.com/jazzband/pip-tools/pull/1567)). Thanks @di\n- Test on Python 3.11 ([#1527](https://github.com/jazzband/pip-tools/pull/1527)). Thanks\n  @hugovk\n\nOther Changes:\n\n- Minor doc edits ([#1445](https://github.com/jazzband/pip-tools/pull/1445)). Thanks\n  @ssiano\n\n## v6.4.0\n\n12 Oct 2021\n\nFeatures:\n\n- Add support for `pip>=21.3`\n  ([#1501](https://github.com/jazzband/pip-tools/pull/1501)). Thanks @atugushev\n- Add support for Python 3.10\n  ([#1497](https://github.com/jazzband/pip-tools/pull/1497)). Thanks @joshuadavidthomas\n\nOther Changes:\n\n- Bump pip minimum version to `>= 21.2`\n  ([#1500](https://github.com/jazzband/pip-tools/pull/1500)). Thanks @atugushev\n\n## v6.3.1\n\n08 Oct 2021\n\nBug Fixes:\n\n- Ensure `pip-tools` unions dependencies of multiple declarations of a package with\n  different extras ([#1486](https://github.com/jazzband/pip-tools/pull/1486)). Thanks\n  @richafrank\n- Allow comma-separated arguments for `--extra`\n  ([#1493](https://github.com/jazzband/pip-tools/pull/1493)). Thanks @AndydeCleyre\n- Improve clarity of help text for options supporting multiple\n  ([#1492](https://github.com/jazzband/pip-tools/pull/1492)). Thanks @AndydeCleyre\n\n## v6.3.0\n\n21 Sep 2021\n\nFeatures:\n\n- Enable single-line annotations with `pip-compile --annotation-style=line`\n  ([#1477](https://github.com/jazzband/pip-tools/pull/1477)). Thanks @AndydeCleyre\n- Generate PEP 440 direct reference whenever possible\n  ([#1455](https://github.com/jazzband/pip-tools/pull/1455)). Thanks @FlorentJeannot\n- PEP 440 Direct Reference support\n  ([#1392](https://github.com/jazzband/pip-tools/pull/1392)). Thanks @FlorentJeannot\n\nBug Fixes:\n\n- Change log level of hash message\n  ([#1460](https://github.com/jazzband/pip-tools/pull/1460)). Thanks @plannigan\n- Allow passing `--no-upgrade` option\n  ([#1438](https://github.com/jazzband/pip-tools/pull/1438)). Thanks @ssbarnea\n\n## v6.2.0\n\n22 Jun 2021\n\nFeatures:\n\n- Add `--emit-options/--no-emit-options` flags to `pip-compile`\n  ([#1123](https://github.com/jazzband/pip-tools/pull/1123)). Thanks @atugushev\n- Add `--python-executable` option for `pip-sync`\n  ([#1333](https://github.com/jazzband/pip-tools/pull/1333)). Thanks @MaratFM\n- Log which python version was used during compile\n  ([#828](https://github.com/jazzband/pip-tools/pull/828)). Thanks @graingert\n\nBug Fixes:\n\n- Fix `pip-compile` package ordering\n  ([#1419](https://github.com/jazzband/pip-tools/pull/1419)). Thanks @adamsol\n- Add `--strip-extras` option to `pip-compile` for producing constraint compatible\n  output ([#1404](https://github.com/jazzband/pip-tools/pull/1404)). Thanks @ssbarnea\n- Fix `click` v7 `version_option` compatibility\n  ([#1410](https://github.com/jazzband/pip-tools/pull/1410)). Thanks @FuegoFro\n- Pass `package_name` explicitly in `click.version_option` decorators for compatibility\n  with `click>=8.0` ([#1400](https://github.com/jazzband/pip-tools/pull/1400)). Thanks\n  @nicoa\n\nOther Changes:\n\n- Document updating requirements with `pre-commit` hooks\n  ([#1387](https://github.com/jazzband/pip-tools/pull/1387)). Thanks @microcat49\n- Add `setuptools` and `wheel` dependencies to the `setup.cfg`\n  ([#889](https://github.com/jazzband/pip-tools/pull/889)). Thanks @jayvdb\n- Improve instructions for new contributors\n  ([#1394](https://github.com/jazzband/pip-tools/pull/1394)). Thanks @FlorentJeannot\n- Better explain role of existing `requirements.txt`\n  ([#1369](https://github.com/jazzband/pip-tools/pull/1369)). Thanks @mikepqr\n\n## v6.1.0\n\n14 Apr 2021\n\nFeatures:\n\n- Add support for `pyproject.toml` or `setup.cfg` as input dependency file (PEP-517) for\n  `pip-compile` ([#1356](https://github.com/jazzband/pip-tools/pull/1356)). Thanks\n  @orsinium\n- Add `pip-compile --extra` option to specify `extras_require` dependencies\n  ([#1363](https://github.com/jazzband/pip-tools/pull/1363)). Thanks @orsinium\n\nBug Fixes:\n\n- Restore ability to set compile cache with env var `PIP_TOOLS_CACHE_DIR`\n  ([#1368](https://github.com/jazzband/pip-tools/pull/1368)). Thanks @AndydeCleyre\n\n## v6.0.1\n\n15 Mar 2021\n\nBug Fixes:\n\n- Fixed a bug with undeclared dependency on `importlib-metadata` at Python 3.6\n  ([#1353](https://github.com/jazzband/pip-tools/pull/1353)). Thanks @atugushev\n\nDependencies:\n\n- Add `pep517` dependency ([#1353](https://github.com/jazzband/pip-tools/pull/1353)).\n  Thanks @atugushev\n\n## v6.0.0\n\n12 Mar 2021\n\nBackwards Incompatible Changes:\n\n- Remove support for EOL Python 3.5 and 2.7\n  ([#1243](https://github.com/jazzband/pip-tools/pull/1243)). Thanks @jdufresne\n- Remove deprecated `--index/--no-index` option from `pip-compile`\n  ([#1234](https://github.com/jazzband/pip-tools/pull/1234)). Thanks @jdufresne\n\nFeatures:\n\n- Use `pep517` to parse dependencies metadata from `setup.py`\n  ([#1311](https://github.com/jazzband/pip-tools/pull/1311)). Thanks @astrojuanlu\n\nBug Fixes:\n\n- Fix a bug where `pip-compile` with `setup.py` would not include dependencies with\n  environment markers ([#1311](https://github.com/jazzband/pip-tools/pull/1311)). Thanks\n  @astrojuanlu\n- Prefer `===` over `==` when generating `requirements.txt` if a dependency was pinned\n  with `===` ([#1323](https://github.com/jazzband/pip-tools/pull/1323)). Thanks\n  @IceTDrinker\n- Fix a bug where `pip-compile` with `setup.py` in nested folder would generate\n  `setup.txt` output file ([#1324](https://github.com/jazzband/pip-tools/pull/1324)).\n  Thanks @peymanslh\n- Write out default index when it is provided as `--extra-index-url`\n  ([#1325](https://github.com/jazzband/pip-tools/pull/1325)). Thanks @fahrradflucht\n\nDependencies:\n\n- Bump `pip` minimum version to `>= 20.3`\n  ([#1340](https://github.com/jazzband/pip-tools/pull/1340)). Thanks @atugushev\n\n## v5.5.0\n\n31 Dec 2020\n\nFeatures:\n\n- Add Python 3.9 support ([1222](https://github.com/jazzband/pip-tools/pull/1222)).\n  Thanks @jdufresne\n- Improve formatting of long \"via\" annotations\n  ([1237](https://github.com/jazzband/pip-tools/pull/1237)). Thanks @jdufresne\n- Add `--verbose` and `--quiet` options to `pip-sync`\n  ([1241](https://github.com/jazzband/pip-tools/pull/1241)). Thanks @jdufresne\n- Add `--no-allow-unsafe` option to `pip-compile`\n  ([1265](https://github.com/jazzband/pip-tools/pull/1265)). Thanks @jdufresne\n\nBug Fixes:\n\n- Restore `PIP_EXISTS_ACTION` environment variable to its previous state when resolve\n  dependencies in `pip-compile`\n  ([1255](https://github.com/jazzband/pip-tools/pull/1255)). Thanks @jdufresne\n\nDependencies:\n\n- Remove `six` dependency in favor `pip`'s vendored `six`\n  ([1240](https://github.com/jazzband/pip-tools/pull/1240)). Thanks @jdufresne\n\nImproved Documentation:\n\n- Add `pip-requirements.el` (for Emacs) to useful tools to `README`\n  ([#1244](https://github.com/jazzband/pip-tools/pull/1244)). Thanks @jdufresne\n- Add supported Python versions to `README`\n  ([#1246](https://github.com/jazzband/pip-tools/pull/1246)). Thanks @jdufresne\n\n## v5.4.0\n\n21 Nov 2020\n\nFeatures:\n\n- Add `pip>=20.3` support ([1216](https://github.com/jazzband/pip-tools/pull/1216)).\n  Thanks @atugushev and @AndydeCleyre\n- Exclude `--no-reuse-hashes` option from «command to run» header\n  ([1197](https://github.com/jazzband/pip-tools/pull/1197)). Thanks @graingert\n\nDependencies:\n\n- Bump `pip` minimum version to `>= 20.1`\n  ([1191](https://github.com/jazzband/pip-tools/pull/1191)). Thanks @atugushev and\n  @AndydeCleyre\n\n## v5.3.1\n\n31 Jul 2020\n\nBug Fixes:\n\n- Fix `pip-20.2` compatibility issue that caused `pip-tools` to sometime fail to\n  stabilize in a constant number of rounds\n  ([1194](https://github.com/jazzband/pip-tools/pull/1194)). Thanks @vphilippon\n\n## v5.3.0\n\n26 Jul 2020\n\nFeatures:\n\n- Add `-h` alias for `--help` option to `pip-sync` and `pip-compile`\n  ([1163](https://github.com/jazzband/pip-tools/pull/1163)). Thanks @jan25\n- Add `pip>=20.2` support ([1168](https://github.com/jazzband/pip-tools/pull/1168)).\n  Thanks @atugushev\n- `pip-sync` now exists with code `1` on `--dry-run`\n  ([1172](https://github.com/jazzband/pip-tools/pull/1172)). Thanks @francisbrito\n- `pip-compile` now doesn't resolve constraints from `-c constraints.txt`that are not\n  (yet) requirements ([1175](https://github.com/jazzband/pip-tools/pull/1175)). Thanks\n  @clslgrnc\n- Add `--reuse-hashes/--no-reuse-hashes` options to `pip-compile`\n  ([1177](https://github.com/jazzband/pip-tools/pull/1177)). Thanks @graingert\n\n## v5.2.1\n\n09 Jun 2020\n\nBug Fixes:\n\n- Fix a bug where `pip-compile` would lose some dependencies on update a\n  `requirements.txt` ([1159](https://github.com/jazzband/pip-tools/pull/1159)). Thanks\n  @richafrank\n\n## v5.2.0\n\n27 May 2020\n\nFeatures:\n\n- Show basename of URLs when `pip-compile` generates hashes in a verbose mode\n  ([1113](https://github.com/jazzband/pip-tools/pull/1113)). Thanks @atugushev\n- Add `--emit-index-url/--no-emit-index-url` options to `pip-compile`\n  ([1130](https://github.com/jazzband/pip-tools/pull/1130)). Thanks @atugushev\n\nBug Fixes:\n\n- Fix a bug where `pip-compile` would ignore some of package versions when\n  `PIP_PREFER_BINARY` is set on\n  ([1119](https://github.com/jazzband/pip-tools/pull/1119)). Thanks @atugushev\n- Fix leaked URLs with credentials in the debug output of `pip-compile`.\n  ([1146](https://github.com/jazzband/pip-tools/pull/1146)). Thanks @atugushev\n- Fix a bug where URL requirements would have name collisions\n  ([1149](https://github.com/jazzband/pip-tools/pull/1149)). Thanks @geokala\n\nDeprecations:\n\n- Deprecate `--index/--no-index` in favor of `--emit-index-url/--no-emit-index-url`\n  options in `pip-compile` ([1130](https://github.com/jazzband/pip-tools/pull/1130)).\n  Thanks @atugushev\n\nOther Changes:\n\n- Switch to `setuptools` declarative syntax through `setup.cfg`\n  ([1141](https://github.com/jazzband/pip-tools/pull/1141)). Thanks @jdufresne\n\n## v5.1.2\n\n05 May 2020\n\nBug Fixes:\n\n- Fix grouping of editables and non-editables requirements\n  ([1132](https://github.com/jazzband/pip-tools/pull/1132)). Thanks @richafrank\n\n## v5.1.1\n\n01 May 2020\n\nBug Fixes:\n\n- Fix a bug where `pip-compile` would generate hashes for `*.egg` files\n  ([#1122](https://github.com/jazzband/pip-tools/pull/1122)). Thanks @atugushev\n\n## v5.1.0\n\n27 Apr 2020\n\nFeatures:\n\n- Show progress bar when downloading packages in `pip-compile` verbose mode\n  ([#949](https://github.com/jazzband/pip-tools/pull/949)). Thanks @atugushev\n- `pip-compile` now gets hashes from `PyPI` JSON API (if available) which significantly\n  increases the speed of hashes generation\n  ([#1109](https://github.com/jazzband/pip-tools/pull/1109)). Thanks @atugushev\n\n## v5.0.0\n\n16 Apr 2020\n\nBackwards Incompatible Changes:\n\n- `pip-tools` now requires `pip>=20.0` (previously `8.1.x` - `20.0.x`). Windows users,\n  make sure to use `python -m pip install pip-tools` to avoid issues with `pip`\n  self-update from now on ([#1055](https://github.com/jazzband/pip-tools/pull/1055)).\n  Thanks @atugushev\n- `--build-isolation` option now set on by default for `pip-compile`\n  ([#1060](https://github.com/jazzband/pip-tools/pull/1060)). Thanks @hramezani\n\nFeatures:\n\n- Exclude requirements with non-matching markers from `pip-sync`\n  ([#927](https://github.com/jazzband/pip-tools/pull/927)). Thanks @AndydeCleyre\n- Add `pre-commit` hook for `pip-compile`\n  ([#976](https://github.com/jazzband/pip-tools/pull/976)). Thanks @atugushev\n- `pip-compile` and `pip-sync` now pass anything provided to the new `--pip-args` option\n  on to `pip` ([#1080](https://github.com/jazzband/pip-tools/pull/1080)). Thanks\n  @AndydeCleyre\n- `pip-compile` output headers are now more accurate when `--` is used to escape\n  filenames ([#1080](https://github.com/jazzband/pip-tools/pull/1080)). Thanks\n  @AndydeCleyre\n- Add `pip>=20.1` support ([#1088](https://github.com/jazzband/pip-tools/pull/1088)).\n  Thanks @atugushev\n\nBug Fixes:\n\n- Fix a bug where editables that are both direct requirements and constraints wouldn't\n  appear in `pip-compile` output\n  ([#1093](https://github.com/jazzband/pip-tools/pull/1093)). Thanks @richafrank\n- `pip-compile` now sorts format controls (`--no-binary/--only-binary`) to ensure\n  consistent results ([#1098](https://github.com/jazzband/pip-tools/pull/1098)). Thanks\n  @richafrank\n\nImproved Documentation:\n\n- Add cross-environment usage documentation to `README`\n  ([#651](https://github.com/jazzband/pip-tools/pull/651)). Thanks @vphilippon\n- Add versions compatibility table to `README`\n  ([#1106](https://github.com/jazzband/pip-tools/pull/1106)). Thanks @atugushev\n\n## v4.5.1\n\n26 Feb 2020\n\nBug Fixes:\n\n- Strip line number annotations such as \"(line XX)\" from file requirements, to prevent\n  diff noise when modifying input requirement files\n  ([#1075](https://github.com/jazzband/pip-tools/pull/1075)). Thanks @adamchainz\n\nImproved Documentation:\n\n- Updated `README` example outputs for primary requirement annotations\n  ([#1072](https://github.com/jazzband/pip-tools/pull/1072)). Thanks @richafrank\n\n## v4.5.0\n\n20 Feb 2020\n\nFeatures:\n\n- Primary requirements and VCS dependencies are now get annotated with any source `.in`\n  files and reverse dependencies\n  ([#1058](https://github.com/jazzband/pip-tools/pull/1058)). Thanks @AndydeCleyre\n\nBug Fixes:\n\n- Always use normalized path for cache directory as it is required in newer versions of\n  `pip` ([#1062](https://github.com/jazzband/pip-tools/pull/1062)). Thanks @kammala\n\nImproved Documentation:\n\n- Replace outdated link in the `README` with rationale for pinning\n  ([#1053](https://github.com/jazzband/pip-tools/pull/1053)). Thanks @m-aciek\n\n## v4.4.1\n\n31 Jan 2020\n\nBug Fixes:\n\n- Fix a bug where `pip-compile` would keep outdated options from `requirements.txt`\n  ([#1029](https://github.com/jazzband/pip-tools/pull/1029)). Thanks @atugushev\n- Fix the `No handlers could be found for logger \"pip.*\"` error by configuring the\n  builtin logging module ([#1035](https://github.com/jazzband/pip-tools/pull/1035)).\n  Thanks @vphilippon\n- Fix a bug where dependencies of relevant constraints may be missing from output file\n  ([#1037](https://github.com/jazzband/pip-tools/pull/1037)). Thanks @jeevb\n- Upgrade the minimal version of `click` from `6.0` to `7.0` version in `setup.py`\n  ([#1039](https://github.com/jazzband/pip-tools/pull/1039)). Thanks @hramezani\n- Ensure that depcache considers the python implementation such that (for example)\n  `cpython3.6` does not poison the results of `pypy3.6`\n  ([#1050](https://github.com/jazzband/pip-tools/pull/1050)). Thanks @asottile\n\nImproved Documentation:\n\n- Make the `README` more imperative about installing into a project's virtual\n  environment to avoid confusion\n  ([#1023](https://github.com/jazzband/pip-tools/pull/1023)). Thanks @tekumara\n- Add a note to the `README` about how to install requirements on different stages to\n  [Workflow for layered requirements](https://pip-tools.rtfd.io/en/latest/#workflow-for-layered-requirements)\n  section ([#1044](https://github.com/jazzband/pip-tools/pull/1044)). Thanks @hramezani\n\n## v4.4.0\n\n21 Jan 2020\n\nFeatures:\n\n- Add `--cache-dir` option to `pip-compile`\n  ([#1022](https://github.com/jazzband/pip-tools/pull/1022)). Thanks @richafrank\n- Add `pip>=20.0` support ([#1024](https://github.com/jazzband/pip-tools/pull/1024)).\n  Thanks @atugushev\n\nBug Fixes:\n\n- Fix a bug where `pip-compile --upgrade-package` would upgrade those passed packages\n  not already required according to the `*.in` and `*.txt` files\n  ([#1031](https://github.com/jazzband/pip-tools/pull/1031)). Thanks @AndydeCleyre\n\n## v4.3.0\n\n25 Nov 2019\n\nFeatures:\n\n- Add Python 3.8 support ([#956](https://github.com/jazzband/pip-tools/pull/956)).\n  Thanks @hramezani\n- Unpin commented out unsafe packages in `requirements.txt`\n  ([#975](https://github.com/jazzband/pip-tools/pull/975)). Thanks @atugushev\n\nBug Fixes:\n\n- Fix `pip-compile` doesn't copy `--trusted-host` from `requirements.in` to\n  `requirements.txt` ([#964](https://github.com/jazzband/pip-tools/pull/964)). Thanks\n  @atugushev\n- Add compatibility with `pip>=20.0`\n  ([#953](https://github.com/jazzband/pip-tools/pull/953) and\n  [#978](https://github.com/jazzband/pip-tools/pull/978)). Thanks @atugushev\n- Fix a bug where the resolver wouldn't clean up the ephemeral wheel cache\n  ([#968](https://github.com/jazzband/pip-tools/pull/968)). Thanks @atugushev\n\nImproved Documentation:\n\n- Add a note to `README` about `requirements.txt` file, which would possibly interfere\n  if you're compiling from scratch\n  ([#959](https://github.com/jazzband/pip-tools/pull/959)). Thanks @hramezani\n\n## v4.2.0\n\n12 Oct 2019\n\nFeatures:\n\n- Add `--ask` option to `pip-sync`\n  ([#913](https://github.com/jazzband/pip-tools/pull/913)). Thanks @georgek\n\nBug Fixes:\n\n- Add compatibility with `pip>=19.3`\n  ([#864](https://github.com/jazzband/pip-tools/pull/864),\n  [#904](https://github.com/jazzband/pip-tools/pull/904),\n  [#910](https://github.com/jazzband/pip-tools/pull/910),\n  [#912](https://github.com/jazzband/pip-tools/pull/912) and\n  [#915](https://github.com/jazzband/pip-tools/pull/915)). Thanks @atugushev\n- Ensure `pip-compile --no-header <blank requirements.in>` creates/overwrites\n  `requirements.txt` ([#909](https://github.com/jazzband/pip-tools/pull/909)). Thanks\n  @AndydeCleyre\n- Fix `pip-compile --upgrade-package` removes «via» annotation\n  ([#931](https://github.com/jazzband/pip-tools/pull/931)). Thanks @hramezani\n\nImproved Documentation:\n\n- Add info to `README` about layered requirements files and `-c` flag\n  ([#905](https://github.com/jazzband/pip-tools/pull/905)). Thanks @jamescooke\n\n## v4.1.0\n\n26 Aug 2019\n\nFeatures:\n\n- Add `--no-emit-find-links` option to `pip-compile`\n  ([#873](https://github.com/jazzband/pip-tools/pull/873)). Thanks @jacobtolar\n\nBug Fixes:\n\n- Prevent `--dry-run` log message from being printed with `--quiet` option in\n  `pip-compile` ([#861](https://github.com/jazzband/pip-tools/pull/861)). Thanks\n  @ddormer\n- Fix resolution of requirements from Git URLs without `-e`\n  ([#879](https://github.com/jazzband/pip-tools/pull/879)). Thanks @andersk\n\n## v4.0.0\n\n25 Jul 2019\n\nBackwards Incompatible Changes:\n\n- Drop support for EOL Python 3.4\n  ([#803](https://github.com/jazzband/pip-tools/pull/803)). Thanks @auvipy\n\nBug Fixes:\n\n- Fix `pip>=19.2` compatibility\n  ([#857](https://github.com/jazzband/pip-tools/pull/857)). Thanks @atugushev\n\n## v3.9.0\n\n17 Jul 2019\n\nFeatures:\n\n- Print provenance information when `pip-compile` fails\n  ([#837](https://github.com/jazzband/pip-tools/pull/837)). Thanks @jakevdp\n\nBug Fixes:\n\n- Output all logging to stderr instead of stdout\n  ([#834](https://github.com/jazzband/pip-tools/pull/834)). Thanks @georgek\n- Fix output file update with `--dry-run` option in `pip-compile`\n  ([#842](https://github.com/jazzband/pip-tools/pull/842)). Thanks @shipmints and\n  @atugushev\n\n## v3.8.0\n\n06 Jun 2019\n\nFeatures:\n\n- Options `--upgrade` and `--upgrade-package` are no longer mutually exclusive\n  ([#831](https://github.com/jazzband/pip-tools/pull/831)). Thanks @adamchainz\n\nBug Fixes:\n\n- Fix `--generate-hashes` with bare VCS URLs\n  ([#812](https://github.com/jazzband/pip-tools/pull/812)). Thanks @jcushman\n- Fix issues with `UnicodeError` when installing `pip-tools` from source in some systems\n  ([#816](https://github.com/jazzband/pip-tools/pull/816)). Thanks @AbdealiJK\n- Respect `--pre` option in the input file\n  ([#822](https://github.com/jazzband/pip-tools/pull/822)). Thanks @atugushev\n- Option `--upgrade-package` now works even if the output file does not exist\n  ([#831](https://github.com/jazzband/pip-tools/pull/831)). Thanks @adamchainz\n\n## v3.7.0\n\n09 May 2019\n\nFeatures:\n\n- Show progressbar on generation hashes in `pip-compile` verbose mode\n  ([#743](https://github.com/jazzband/pip-tools/pull/743)). Thanks @atugushev\n- Add options `--cert` and `--client-cert` to `pip-sync`\n  ([#798](https://github.com/jazzband/pip-tools/pull/798)). Thanks @atugushev\n- Add support for `--find-links` in `pip-compile` output\n  ([#793](https://github.com/jazzband/pip-tools/pull/793)). Thanks @estan and @atugushev\n- Normalize «command to run» in `pip-compile` headers\n  ([#800](https://github.com/jazzband/pip-tools/pull/800)). Thanks @atugushev\n- Support URLs as packages ([#807](https://github.com/jazzband/pip-tools/pull/807)).\n  Thanks @jcushman, @nim65s and @toejough\n\nBug Fixes:\n\n- Fix replacing password to asterisks in `pip-compile`\n  ([#808](https://github.com/jazzband/pip-tools/pull/808)). Thanks @atugushev\n\n## v3.6.1\n\n24 Apr 2019\n\nBug Fixes:\n\n- Fix `pip>=19.1` compatibility\n  ([#795](https://github.com/jazzband/pip-tools/pull/795)). Thanks @atugushev\n\n## v3.6.0\n\n03 Apr 2019\n\nFeatures:\n\n- Show less output on `pip-sync` with `--quiet` option\n  ([#765](https://github.com/jazzband/pip-tools/pull/765)). Thanks @atugushev\n- Support the flag `--trusted-host` in `pip-sync`\n  ([#777](https://github.com/jazzband/pip-tools/pull/777)). Thanks @firebirdberlin\n\n## v3.5.0\n\n13 Mar 2019\n\nFeatures:\n\n- Show default index url provided by `pip`\n  ([#735](https://github.com/jazzband/pip-tools/pull/735)). Thanks @atugushev\n- Add an option to allow enabling/disabling build isolation\n  ([#758](https://github.com/jazzband/pip-tools/pull/758)). Thanks @atugushev\n\nBug Fixes:\n\n- Fix the output file for `pip-compile` with an explicit `setup.py` as source file\n  ([#731](https://github.com/jazzband/pip-tools/pull/731)). Thanks @atugushev\n- Fix order issue with generated lock file when `hashes` and `markers` are used together\n  ([#763](https://github.com/jazzband/pip-tools/pull/763)). Thanks @milind-shakya-sp\n\n## v3.4.0\n\n19 Feb 2019\n\nFeatures:\n\n- Add option `--quiet` to `pip-compile`\n  ([#720](https://github.com/jazzband/pip-tools/pull/720)). Thanks @bendikro\n- Emit the original command to the `pip-compile`'s header\n  ([#733](https://github.com/jazzband/pip-tools/pull/733)). Thanks @atugushev\n\nBug Fixes:\n\n- Fix `pip-sync` to use pip script depending on a python version\n  ([#737](https://github.com/jazzband/pip-tools/pull/737)). Thanks @atugushev\n\n## v3.3.2\n\n26 Jan 2019\n\nBug Fixes:\n\n- Fix `pip-sync` with a temporary requirement file on Windows\n  ([#723](https://github.com/jazzband/pip-tools/pull/723)). Thanks @atugushev\n- Fix `pip-sync` to prevent uninstall of stdlib and dev packages\n  ([#718](https://github.com/jazzband/pip-tools/pull/718)). Thanks @atugushev\n\n## v3.3.1\n\n24 Jan 2019\n\n- Re-release of 3.3.0 after fixing the deployment pipeline\n  ([#716](https://github.com/jazzband/pip-tools/issues/716)). Thanks @atugushev\n\n## v3.3.0\n\n23 Jan 2019\n\n(Unreleased - Deployment pipeline issue, see 3.3.1)\n\nFeatures:\n\n- Added support of `pip` 19.0 ([#715](https://github.com/jazzband/pip-tools/pull/715)).\n  Thanks @atugushev\n- Add `--allow-unsafe` to update instructions in the generated `requirements.txt`\n  ([#708](https://github.com/jazzband/pip-tools/pull/708)). Thanks @richafrank\n\nBug Fixes:\n\n- Fix `pip-sync` to check hashes\n  ([#706](https://github.com/jazzband/pip-tools/pull/706)). Thanks @atugushev\n\n## v3.2.0\n\n18 Dec 2018\n\nFeatures:\n\n- Apply version constraints specified with package upgrade option\n  (`-P, --upgrade-package`) ([#694](https://github.com/jazzband/pip-tools/pull/694)).\n  Thanks @richafrank\n\n## v3.1.0\n\n05 Oct 2018\n\nFeatures:\n\n- Added support of `pip` 18.1 ([#689](https://github.com/jazzband/pip-tools/pull/689)).\n  Thanks @vphilippon\n\n## v3.0.0\n\n24 Sep 2018\n\nMajor changes:\n\n- Update `pip-tools` for native `pip` 8, 9, 10 and 18 compatibility, un-vendoring `pip`\n  to use the user-installed `pip`\n  ([#657](https://github.com/jazzband/pip-tools/pull/657) and\n  [#672](https://github.com/jazzband/pip-tools/pull/672)). Thanks to @techalchemy,\n  @suutari, @tysonclugg and @vphilippon for contributing on this.\n\nFeatures:\n\n- Removed the dependency on the external library `first`\n  ([#676](https://github.com/jazzband/pip-tools/pull/676)). Thanks @jdufresne\n\n## v2.0.2\n\n28 Apr 2018\n\nBug Fixes:\n\n- Added clearer error reporting when skipping pre-releases\n  ([#655](https://github.com/jazzband/pip-tools/pull/655)). Thanks @WoLpH\n\n## v2.0.1\n\n15 Apr 2018\n\nBug Fixes:\n\n- Added missing package data from vendored pip, such as missing cacert.pem file. Thanks\n  @vphilippon\n\n## v2.0.0\n\n15 Apr 2018\n\nMajor changes:\n\n- Vendored `pip` 9.0.3 to keep compatibility for users with `pip` 10.0.0\n  ([#644](https://github.com/jazzband/pip-tools/pull/644)). Thanks @vphilippon\n\nFeatures:\n\n- Improved the speed of pip-compile --generate-hashes by caching the hashes from an\n  existing output file ([#641](https://github.com/jazzband/pip-tools/pull/641)). Thanks\n  @justicz\n- Added a `pip-sync --user` option to restrict attention to user-local directory\n  ([#642](https://github.com/jazzband/pip-tools/pull/642)). Thanks @jbergknoff-10e\n- Removed the hard dependency on setuptools\n  ([#645](https://github.com/jazzband/pip-tools/pull/645)). Thanks @vphilippon\n\nBug fixes:\n\n- The pip environment markers on top-level requirements in the source file\n  (requirements.in) are now properly handled and will only be processed in the right\n  environment ([#647](https://github.com/jazzband/pip-tools/pull/647)). Thanks\n  @JoergRittinger\n\n## v1.11.0\n\n30 Nov 2017\n\nFeatures:\n\n- Allow editable packages in requirements.in with `pip-compile --generate-hashes`\n  ([#524](https://github.com/jazzband/pip-tools/pull/524)). Thanks @jdufresne\n- Allow for CA bundles with `pip-compile --cert`\n  ([#612](https://github.com/jazzband/pip-tools/pull/612)). Thanks @khwilson\n- Improved `pip-compile` duration with large locally available editable requirement by\n  skipping a copy to the cache ([#583](https://github.com/jazzband/pip-tools/pull/583)).\n  Thanks @costypetrisor\n- Slightly improved the `NoCandidateFound` error message on potential causes\n  ([#614](https://github.com/jazzband/pip-tools/pull/614)). Thanks @vphilippon\n\nBug Fixes:\n\n- Add `-markerlib` to the list of `PACKAGES_TO_IGNORE` of `pip-sync`\n  ([#613](https://github.com/jazzband/pip-tools/pull/613)).\n\n## v1.10.2\n\n22 Nov 2017\n\nBug Fixes:\n\n- Fixed bug causing dependencies from invalid wheels for the current platform to be\n  included ([#571](https://github.com/jazzband/pip-tools/pull/571)).\n- `pip-sync` will respect environment markers in the requirements.txt\n  ([600](https://github.com/jazzband/pip-tools/pull/600)). Thanks @hazmat345\n- Converted the ReadMe to have a nice description rendering on PyPI. Thanks @bittner\n\n## v1.10.1\n\n27 Sep 2017\n\nBug Fixes:\n\n- Fixed bug breaking `pip-sync` on Python 3, raising\n  `TypeError: '<' not supported between instances of 'InstallRequirement' and 'InstallRequirement'`\n  ([#570](https://github.com/jazzband/pip-tools/pull/570)).\n\n## v1.10.0\n\n27 Sep 2017\n\nFeatures:\n\n- `--generate-hashes` now generates hashes for all wheels, not only wheels for the\n  currently running platform ([#520](https://github.com/jazzband/pip-tools/pull/520)).\n  Thanks @jdufresne\n- Added a `-q`/`--quiet` argument to the pip-sync command to reduce log output.\n\nBug Fixes:\n\n- Fixed bug where unsafe packages would get pinned in generated requirements files when\n  `--allow-unsafe` was not set.\n  ([#517](https://github.com/jazzband/pip-tools/pull/517)). Thanks @dschaller\n- Fixed bug where editable PyPI dependencies would have a `download_dir` and be exposed\n  to `git-checkout-index`, (thus losing their VCS directory) and\n  `python setup.py egg_info` fails.\n  ([#385](https://github.com/jazzband/pip-tools/pull/385#) and\n  [#538](https://github.com/jazzband/pip-tools/pull/538)). Thanks @blueyed and @dfee\n- Fixed bug where some primary dependencies were annotated with \"via\" info comments.\n  ([#542](https://github.com/jazzband/pip-tools/pull/542)). Thanks @quantus\n- Fixed bug where pkg-resources would be removed by pip-sync in Ubuntu.\n  ([#555](https://github.com/jazzband/pip-tools/pull/555)). Thanks @cemsbr\n- Fixed bug where the resolver would sometime not stabilize on requirements specifying\n  extras. ([#566](https://github.com/jazzband/pip-tools/pull/566)). Thanks @vphilippon\n- Fixed an unicode encoding error when distribution package contains non-ASCII file\n  names ([#567](https://github.com/jazzband/pip-tools/pull/567)). Thanks @suutari\n- Fixed package hashing doing unnecessary unpacking\n  ([#557](https://github.com/jazzband/pip-tools/pull/557)). Thanks @suutari-ai\n\n## v1.9.0\n\n12 Apr 2017\n\nFeatures:\n\n- Added ability to read requirements from `setup.py` instead of just `requirements.in`\n  ([#418](https://github.com/jazzband/pip-tools/pull/418)). Thanks to @tysonclugg and\n  @majuscule.\n- Added a `--max-rounds` argument to the pip-compile command to allow for solving large\n  requirement sets ([#472](https://github.com/jazzband/pip-tools/pull/472)). Thanks\n  @derek-miller.\n- Exclude unsafe packages' dependencies when `--allow-unsafe` is not in use\n  ([#441](https://github.com/jazzband/pip-tools/pull/441)). Thanks @jdufresne.\n- Exclude irrelevant pip constraints\n  ([#471](https://github.com/jazzband/pip-tools/pull/471)). Thanks @derek-miller.\n- Allow control over emitting trusted-host to the compiled requirements.\n  ([#448](https://github.com/jazzband/pip-tools/pull/448)). Thanks @tonyseek.\n- Allow running as a Python module\n  (#[461](https://github.com/jazzband/pip-tools/pull/461)). Thanks @AndreLouisCaron.\n- Preserve environment markers in generated requirements.txt.\n  ([#460](https://github.com/jazzband/pip-tools/pull/460)). Thanks @barrywhart.\n\nBug Fixes:\n\n- Fixed the --upgrade-package option to respect the given package list to update\n  ([#491](https://github.com/jazzband/pip-tools/pull/491)).\n- Fixed the default output file name when the source file has no extension\n  ([#488](https://github.com/jazzband/pip-tools/pull/488)). Thanks @vphilippon\n- Fixed crash on editable requirements introduced in 1.8.2.\n- Fixed duplicated --trusted-host, --extra-index-url and --index-url in the generated\n  requirements.\n\n## v1.8.2\n\n28 Mar 2017\n\n- Regression fix: editable reqs were losing their dependencies after first round\n  ([#476](https://github.com/jazzband/pip-tools/pull/476)) Thanks @mattlong\n- Remove duplicate index urls in generated requirements.txt\n  ([#468](https://github.com/jazzband/pip-tools/pull/468)) Thanks @majuscule\n\n## v1.8.1\n\n22 Mar 2017\n\n- Recalculate secondary dependencies between rounds (#378)\n- Calculated dependencies could be left with wrong candidates when toplevel requirements\n  happen to be also pinned in sub-dependencies (#450)\n- Fix duplicate entries that could happen in generated requirements.txt (#427)\n- Gracefully report invalid pip version (#457)\n- Fix capitalization in the generated requirements.txt, packages will always be\n  lowercased (#452)\n\n## v1.8.0\n\n17 Nov 2016\n\n- Adds support for upgrading individual packages with a new option `--upgrade-package`.\n  To upgrade a _specific_ package to the latest or a specific version use\n  `--upgrade-package <pkg>`. To upgrade all packages, you can still use\n  `pip-compile --upgrade`. (#409)\n- Adds support for pinning dependencies even further by including the hashes found on\n  PyPI at compilation time, which will be re-checked when dependencies are installed at\n  installation time. This adds protection against packages that are tampered with.\n  (#383)\n- Improve support for extras, like `hypothesis[django]`\n- Drop support for pip < 8\n\n## v1.7.1\n\n20 Oct 2016\n\n- Add `--allow-unsafe` option (#377)\n\n## v1.7.0\n\n06 Jul 2016\n\n- Add compatibility with pip >= 8.1.2 (#374) Thanks so much, @jmbowman!\n\n## v1.6.5\n\n11 May 2016\n\n- Add warning that pip >= 8.1.2 is not supported until 1.7.x is out\n\n## v1.6.4\n\n03 May 2016\n\n- Incorporate fix for atomic file saving behaviour on the Windows platform (see #351)\n\n## v1.6.3\n\n02 May 2016\n\n- PyPI won't let me upload 1.6.2\n\n## v1.6.2\n\n02 May 2016\n\n- Respect pip configuration from pip.{ini,conf}\n- Fixes for atomic-saving of output files on Windows (see #351)\n\n## v1.6.1\n\n06 Apr 2016\n\nMinor changes:\n\n- pip-sync now supports being invoked from within and outside an activated virtualenv\n  (see #317)\n- pip-compile: support -U as a shorthand for --upgrade\n- pip-compile: support pip's --no-binary and --binary-only flags\n\nFixes:\n\n- Change header format of output files to mention all input files\n\n## v1.6\n\n05 Feb 2016\n\nMajor change:\n\n- pip-compile will by default try to fulfill package specs by looking at a previously\n  compiled output file first, before checking PyPI. This means pip-compile will only\n  update the requirements.txt when it absolutely has to. To get the old behaviour\n  (picking the latest version of all packages from PyPI), use the new `--upgrade`\n  option.\n\nMinor changes:\n\n- Bugfix where pip-compile would lose \"via\" info when on pip 8 (see #313)\n- Ensure cache dir exists (see #315)\n\n## v1.5\n\n23 Jan 2016\n\n- Add support for pip >= 8\n- Drop support for pip < 7\n- Fix bug where `pip-sync` fails to uninstall packages if you're using the `--no-index`\n  (or other) flags\n\n## v1.4.5\n\n20 Jan 2016\n\n- Add `--no-index` flag to `pip-compile` to avoid emitting `--index-url` into the output\n  (useful if you have configured a different index in your global ~/.pip/pip.conf, for\n  example)\n- Fix: ignore stdlib backport packages, like `argparse`, when listing which packages\n  will be installed/uninstalled (#286)\n- Fix pip-sync failed uninstalling packages when using `--find-links` (#298)\n- Explicitly error when pip-tools is used with pip 8.0+ (for now)\n\n## v1.4.4\n\n11 Jan 2016\n\n- Fix: unintended change in behaviour where packages installed by `pip-sync` could\n  accidentally get upgraded under certain conditions, even though the requirements.txt\n  would dictate otherwise (see #290)\n\n## v1.4.3\n\n06 Jan 2016\n\n- Fix: add `--index-url` and `--extra-index-url` options to `pip-sync`\n- Fix: always install using `--upgrade` flag when running `pip-sync`\n\n## v1.4.2\n\n13 Dec 2015\n\n- Fix bug where umask was ignored when writing requirement files (#268)\n\n## v1.4.1\n\n13 Dec 2015\n\n- Fix bug where successive invocations of pip-sync with editables kept\n  uninstalling/installing them (fixes #270)\n\n## v1.4.0\n\n13 Dec 2015\n\n- Add command line option -f / --find-links\n- Add command line option --no-index\n- Add command line alias -n (for --dry-run)\n- Fix a unicode issue\n\n## v1.3.0\n\n08 Dec 2015\n\n- Support multiple requirement files to pip-compile\n- Support requirements from stdin for pip-compile\n- Support --output-file option on pip-compile, to redirect output to a file (or stdout)\n\n## v1.2.0\n\n30 Nov 2015\n\n- Add CHANGELOG :)\n- Support pip-sync'ing editable requirements\n- Support extras properly (i.e. package[foo] syntax)\n\n(Anything before 1.2.0 was not recorded.)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.3193359375,
          "content": "# Code of Conduct\n\nAs contributors and maintainers of the Jazzband projects, and in the interest of\nfostering an open and welcoming community, we pledge to respect all people who\ncontribute through reporting issues, posting feature requests, updating documentation,\nsubmitting pull requests or patches, and other activities.\n\nWe are committed to making participation in the Jazzband a harassment-free experience\nfor everyone, regardless of the level of experience, gender, gender identity and\nexpression, sexual orientation, disability, personal appearance, body size, race,\nethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery\n- Personal attacks\n- Trolling or insulting/derogatory comments\n- Public or private harassment\n- Publishing other's private information, such as physical or electronic addresses,\n  without explicit permission\n- Other unethical or unprofessional conduct\n\nThe Jazzband roadies have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are not\naligned to this Code of Conduct, or to ban temporarily or permanently any contributor\nfor other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, the roadies commit themselves to fairly and\nconsistently applying these principles to every aspect of managing the jazzband\nprojects. Roadies who do not follow or enforce the Code of Conduct may be permanently\nremoved from the Jazzband roadies.\n\nThis code of conduct applies both within project spaces and in public spaces when an\nindividual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by\ncontacting the roadies at `roadies@jazzband.co`. All complaints will be reviewed and\ninvestigated and will result in a response that is deemed necessary and appropriate to\nthe circumstances. Roadies are obligated to maintain confidentiality with regard to the\nreporter of an incident.\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version\n1.3.0, available at [https://contributor-covenant.org/version/1/3/0/][version]\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/3/0/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.7509765625,
          "content": "[![Jazzband](https://jazzband.co/static/img/jazzband.svg)](https://jazzband.co/)\n\nThis is a [Jazzband](https://jazzband.co/) project. By contributing you agree\nto abide by the [Contributor Code of Conduct](https://jazzband.co/about/conduct)\nand follow the [guidelines](https://jazzband.co/about/guidelines).\n\n## Project Contribution Guidelines\n\nHere are a few additional or emphasized guidelines to follow when contributing to `pip-tools`:\n\n- If you need to have a virtualenv outside of `tox`, it is possible to reuse its configuration to provision it with [tox devenv](<https://tox.wiki/en/latest/cli_interface.html#tox-devenv-(d)>).\n- Always provide tests for your changes and run `tox -p all` to make sure they are passing the checks locally.\n- Give a clear one-line description in the PR (that the maintainers can add to [CHANGELOG] afterwards).\n- Wait for the review of at least one other contributor before merging (even if you're a Jazzband member).\n- Before merging, assign the PR to a milestone for a version to help with the release process.\n\nThe only exception to those guidelines is for trivial changes, such as\ndocumentation corrections or contributions that do not change pip-tools itself.\n\nContributions following these guidelines are always welcomed, encouraged and appreciated.\n\n## Project Release Process\n\nJazzband aims to give full access to all members, including performing releases, as described in the\n[Jazzband Releases documentation](https://jazzband.co/about/releases).\n\nTo help keeping track of the releases and their changes, here's the current release process:\n\n- Check to see if any recently merged PRs are missing from the milestone of the version about to be released.\n- Create a branch for the release. _Ex: release-3.4.0_.\n- Update the [CHANGELOG] with the version, date and add the text from [drafter release](https://github.com/jazzband/pip-tools/releases).\n- Push the branch to your fork and create a pull request.\n- Merge the pull request after the changes being approved.\n- Make sure that the tests/CI still pass.\n- Once ready, go to [releases](https://github.com/jazzband/pip-tools/releases) page and publish the latest draft release. This will push a tag on the HEAD of the main branch, trigger the CI pipeline and\n  deploy a pip-tools release in the **Jazzband private package index** upon success.\n- The pip-tools \"lead\" project members will receive an email notification to review the release and\n  deploy it to the public PyPI if all is correct.\n- Once the release to the public PyPI is confirmed, close the milestone.\n\nPlease be mindful of other before and when performing a release, and use this access responsibly.\n\nDo not hesitate to ask questions if you have any before performing a release.\n\n[changelog]: https://github.com/jazzband/pip-tools/blob/main/CHANGELOG.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.486328125,
          "content": "BSD 3-Clause License\n\nCopyright (c). All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    1. Redistributions of source code must retain the above copyright notice,\n       this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n       notice, this list of conditions and the following disclaimer in the\n       documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of pip-tools nor the names of its contributors may be\n       used to endorse or promote products derived from this software without\n       specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.271484375,
          "content": "[![jazzband-image]][jazzband]\n[![pypi][pypi-image]][pypi]\n[![pyversions][pyversions-image]][pyversions]\n[![pre-commit][pre-commit-image]][pre-commit]\n[![buildstatus-gha][buildstatus-gha-image]][buildstatus-gha]\n[![codecov][codecov-image]][codecov]\n[![Matrix Room Badge]][Matrix Room]\n[![Matrix Space Badge]][Matrix Space]\n[![discord-chat-image]][discord-chat]\n\n# pip-tools = pip-compile + pip-sync\n\nA set of command line tools to help you keep your `pip`-based packages fresh,\neven when you've pinned them. You do pin them, right? (In building your Python application and its dependencies for production, you want to make sure that your builds are predictable and deterministic.)\n\n[![pip-tools overview for phase II][pip-tools-overview]][pip-tools-overview]\n\n## Installation\n\nSimilar to `pip`, `pip-tools` must be installed in each of your project's\n[virtual environments](https://packaging.python.org/tutorials/installing-packages/#creating-virtual-environments):\n\n```console\n$ source /path/to/venv/bin/activate\n(venv) $ python -m pip install pip-tools\n```\n\n**Note**: all of the remaining example commands assume you've activated your\nproject's virtual environment.\n\n## Example usage for `pip-compile`\n\nThe `pip-compile` command lets you compile a `requirements.txt` file from\nyour dependencies, specified in either `pyproject.toml`, `setup.cfg`,\n`setup.py`, or `requirements.in`.\n\nRun it with `pip-compile` or `python -m piptools compile` (or\n`pipx run --spec pip-tools pip-compile` if `pipx` was installed with the\nappropriate Python version). If you use multiple Python versions, you can also\nrun `py -X.Y -m piptools compile` on Windows and `pythonX.Y -m piptools compile`\non other systems.\n\n`pip-compile` should be run from the same virtual environment as your\nproject so conditional dependencies that require a specific Python version,\nor other environment markers, resolve relative to your project's\nenvironment.\n\n**Note**: If `pip-compile` finds an existing `requirements.txt` file that\nfulfils the dependencies then no changes will be made, even if updates are\navailable. To compile from scratch, first delete the existing\n`requirements.txt` file, or see\n[Updating requirements](#updating-requirements)\nfor alternative approaches.\n\n### Requirements from `pyproject.toml`\n\nThe `pyproject.toml` file is the\n[latest standard](https://peps.python.org/pep-0621/) for configuring\npackages and applications, and is recommended for new projects. `pip-compile`\nsupports both installing your `project.dependencies` as well as your\n`project.optional-dependencies`. Thanks to the fact that this is an\nofficial standard, you can use `pip-compile` to pin the dependencies\nin projects that use modern standards-adhering packaging tools like\n[Setuptools](https://setuptools.pypa.io), [Hatch](https://hatch.pypa.io/)\nor [flit](https://flit.pypa.io/).\n\nSuppose you have a 'foobar' Python application that is packaged using `Setuptools`,\nand you want to pin it for production. You can declare the project metadata as:\n\n```toml\n[build-system]\nrequires = [\"setuptools\", \"setuptools-scm\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nrequires-python = \">=3.9\"\nname = \"foobar\"\ndynamic = [\"dependencies\", \"optional-dependencies\"]\n\n[tool.setuptools.dynamic]\ndependencies = { file = [\"requirements.in\"] }\noptional-dependencies.test = { file = [\"requirements-test.txt\"] }\n\n```\n\nIf you have a Django application that is packaged using `Hatch`, and you\nwant to pin it for production. You also want to pin your development tools\nin a separate pin file. You declare `django` as a dependency and create an\noptional dependency `dev` that includes `pytest`:\n\n```toml\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-cool-django-app\"\nversion = \"42\"\ndependencies = [\"django\"]\n\n[project.optional-dependencies]\ndev = [\"pytest\"]\n```\n\nYou can produce your pin files as easily as:\n\n```console\n$ pip-compile -o requirements.txt pyproject.toml\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile --output-file=requirements.txt pyproject.toml\n#\nasgiref==3.6.0\n    # via django\ndjango==4.1.7\n    # via my-cool-django-app (pyproject.toml)\nsqlparse==0.4.3\n    # via django\n\n$ pip-compile --extra dev -o dev-requirements.txt pyproject.toml\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile --extra=dev --output-file=dev-requirements.txt pyproject.toml\n#\nasgiref==3.6.0\n    # via django\nattrs==22.2.0\n    # via pytest\ndjango==4.1.7\n    # via my-cool-django-app (pyproject.toml)\nexceptiongroup==1.1.1\n    # via pytest\niniconfig==2.0.0\n    # via pytest\npackaging==23.0\n    # via pytest\npluggy==1.0.0\n    # via pytest\npytest==7.2.2\n    # via my-cool-django-app (pyproject.toml)\nsqlparse==0.4.3\n    # via django\ntomli==2.0.1\n    # via pytest\n```\n\nThis is great for both pinning your applications, but also to keep the CI\nof your open-source Python package stable.\n\n### Requirements from `setup.py` and `setup.cfg`\n\n`pip-compile` has also full support for `setup.py`- and\n`setup.cfg`-based projects that use `setuptools`.\n\nJust define your dependencies and extras as usual and run\n`pip-compile` as above.\n\n### Requirements from `requirements.in`\n\nYou can also use plain text files for your requirements (e.g. if you don't\nwant your application to be a package). To use a `requirements.in` file to\ndeclare the Django dependency:\n\n```\n# requirements.in\ndjango\n```\n\nNow, run `pip-compile requirements.in`:\n\n```console\n$ pip-compile requirements.in\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile requirements.in\n#\nasgiref==3.6.0\n    # via django\ndjango==4.1.7\n    # via -r requirements.in\nsqlparse==0.4.3\n    # via django\n```\n\nAnd it will produce your `requirements.txt`, with all the Django dependencies\n(and all underlying dependencies) pinned.\n\n(updating-requirements)=\n\n### Updating requirements\n\n`pip-compile` generates a `requirements.txt` file using the latest versions\nthat fulfil the dependencies you specify in the supported files.\n\nIf `pip-compile` finds an existing `requirements.txt` file that fulfils the\ndependencies then no changes will be made, even if updates are available.\n\nTo force `pip-compile` to update all packages in an existing\n`requirements.txt`, run `pip-compile --upgrade`.\n\nTo update a specific package to the latest or a specific version use the\n`--upgrade-package` or `-P` flag:\n\n```console\n# only update the django package\n$ pip-compile --upgrade-package django\n\n# update both the django and requests packages\n$ pip-compile --upgrade-package django --upgrade-package requests\n\n# update the django package to the latest, and requests to v2.0.0\n$ pip-compile --upgrade-package django --upgrade-package requests==2.0.0\n```\n\nYou can combine `--upgrade` and `--upgrade-package` in one command, to\nprovide constraints on the allowed upgrades. For example to upgrade all\npackages whilst constraining requests to the latest version less than 3.0:\n\n```console\n$ pip-compile --upgrade --upgrade-package 'requests<3.0'\n```\n\n### Using hashes\n\nIf you would like to use _Hash-Checking Mode_ available in `pip` since\nversion 8.0, `pip-compile` offers `--generate-hashes` flag:\n\n```console\n$ pip-compile --generate-hashes requirements.in\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile --generate-hashes requirements.in\n#\nasgiref==3.6.0 \\\n    --hash=sha256:71e68008da809b957b7ee4b43dbccff33d1b23519fb8344e33f049897077afac \\\n    --hash=sha256:9567dfe7bd8d3c8c892227827c41cce860b368104c3431da67a0c5a65a949506\n    # via django\ndjango==4.1.7 \\\n    --hash=sha256:44f714b81c5f190d9d2ddad01a532fe502fa01c4cb8faf1d081f4264ed15dcd8 \\\n    --hash=sha256:f2f431e75adc40039ace496ad3b9f17227022e8b11566f4b363da44c7e44761e\n    # via -r requirements.in\nsqlparse==0.4.3 \\\n    --hash=sha256:0323c0ec29cd52bceabc1b4d9d579e311f3e4961b98d174201d5622a23b85e34 \\\n    --hash=sha256:69ca804846bb114d2ec380e4360a8a340db83f0ccf3afceeb1404df028f57268\n    # via django\n```\n\n### Output File\n\nTo output the pinned requirements in a filename other than\n`requirements.txt`, use `--output-file`. This might be useful for compiling\nmultiple files, for example with different constraints on django to test a\nlibrary with both versions using [tox](https://tox.readthedocs.io/en/latest/):\n\n```console\n$ pip-compile --upgrade-package 'django<1.0' --output-file requirements-django0x.txt\n$ pip-compile --upgrade-package 'django<2.0' --output-file requirements-django1x.txt\n```\n\nOr to output to standard output, use `--output-file=-`:\n\n```console\n$ pip-compile --output-file=- > requirements.txt\n$ pip-compile - --output-file=- < requirements.in > requirements.txt\n```\n\n### Forwarding options to `pip`\n\nAny valid `pip` flags or arguments may be passed on with `pip-compile`'s\n`--pip-args` option, e.g.\n\n```console\n$ pip-compile requirements.in --pip-args \"--retries 10 --timeout 30\"\n```\n\n### Configuration\n\nYou can define project-level defaults for `pip-compile` and `pip-sync` by\nwriting them to a configuration file in the same directory as your requirements\ninput files (or the current working directory if piping input from stdin).\nBy default, both `pip-compile` and `pip-sync` will look first\nfor a `.pip-tools.toml` file and then in your `pyproject.toml`. You can\nalso specify an alternate TOML configuration file with the `--config` option.\n\nIt is possible to specify configuration values both globally and command-specific.\nFor example, to by default generate `pip` hashes in the resulting\nrequirements file output, you can specify in a configuration file:\n\n```toml\n[tool.pip-tools]\ngenerate-hashes = true\n```\n\nOptions to `pip-compile` and `pip-sync` that may be used more than once\nmust be defined as lists in a configuration file, even if they only have one\nvalue.\n\n`pip-tools` supports default values for [all valid command-line flags](/cli/index.md)\nof its subcommands. Configuration keys may contain underscores instead of dashes,\nso the above could also be specified in this format:\n\n```toml\n[tool.pip-tools]\ngenerate_hashes = true\n```\n\nConfiguration defaults specific to `pip-compile` and `pip-sync` can be put beneath\nseparate sections. For example, to by default perform a dry-run with `pip-compile`:\n\n```toml\n[tool.pip-tools.compile] # \"sync\" for pip-sync\ndry-run = true\n```\n\nThis does not affect the `pip-sync` command, which also has a `--dry-run` option.\nNote that local settings take preference over the global ones of the same name,\nwhenever both are declared, thus this would also make `pip-compile` generate hashes,\nbut discard the global dry-run setting:\n\n```toml\n[tool.pip-tools]\ngenerate-hashes = true\ndry-run = true\n\n[tool.pip-tools.compile]\ndry-run = false\n```\n\nYou might be wrapping the `pip-compile` command in another script. To avoid\nconfusing consumers of your custom script you can override the update command\ngenerated at the top of requirements files by setting the\n`CUSTOM_COMPILE_COMMAND` environment variable.\n\n```console\n$ CUSTOM_COMPILE_COMMAND=\"./pipcompilewrapper\" pip-compile requirements.in\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    ./pipcompilewrapper\n#\nasgiref==3.6.0\n    # via django\ndjango==4.1.7\n    # via -r requirements.in\nsqlparse==0.4.3\n    # via django\n```\n\n### Workflow for layered requirements\n\nIf you have different environments that you need to install different but\ncompatible packages for, then you can create layered requirements files and use\none layer to constrain the other.\n\nFor example, if you have a Django project where you want the newest `2.1`\nrelease in production and when developing you want to use the Django debug\ntoolbar, then you can create two `*.in` files, one for each layer:\n\n```\n# requirements.in\ndjango<2.2\n```\n\nAt the top of the development requirements `dev-requirements.in` you use `-c\nrequirements.txt` to constrain the dev requirements to packages already\nselected for production in `requirements.txt`.\n\n```\n# dev-requirements.in\n-c requirements.txt\ndjango-debug-toolbar<2.2\n```\n\nFirst, compile `requirements.txt` as usual:\n\n```\n$ pip-compile\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile\n#\ndjango==2.1.15\n    # via -r requirements.in\npytz==2023.3\n    # via django\n```\n\nNow compile the dev requirements and the `requirements.txt` file is used as\na constraint:\n\n```console\n$ pip-compile dev-requirements.in\n#\n# This file is autogenerated by pip-compile with Python 3.10\n# by the following command:\n#\n#    pip-compile dev-requirements.in\n#\ndjango==2.1.15\n    # via\n    #   -c requirements.txt\n    #   django-debug-toolbar\ndjango-debug-toolbar==2.1\n    # via -r dev-requirements.in\npytz==2023.3\n    # via\n    #   -c requirements.txt\n    #   django\nsqlparse==0.4.3\n    # via django-debug-toolbar\n```\n\nAs you can see above, even though a `2.2` release of Django is available, the\ndev requirements only include a `2.1` version of Django because they were\nconstrained. Now both compiled requirements files can be installed safely in\nthe dev environment.\n\nTo install requirements in production stage use:\n\n```console\n$ pip-sync\n```\n\nYou can install requirements in development stage by:\n\n```console\n$ pip-sync requirements.txt dev-requirements.txt\n```\n\n### Version control integration\n\nYou might use `pip-compile` as a hook for the [pre-commit](https://github.com/pre-commit/pre-commit).\nSee [pre-commit docs](https://pre-commit.com/) for instructions.\nSample `.pre-commit-config.yaml`:\n\n```yaml\nrepos:\n  - repo: https://github.com/jazzband/pip-tools\n    rev: 7.4.1\n    hooks:\n      - id: pip-compile\n```\n\nYou might want to customize `pip-compile` args by configuring `args` and/or `files`, for example:\n\n```yaml\nrepos:\n  - repo: https://github.com/jazzband/pip-tools\n    rev: 7.4.1\n    hooks:\n      - id: pip-compile\n        files: ^requirements/production\\.(in|txt)$\n        args: [--index-url=https://example.com, requirements/production.in]\n```\n\nIf you have multiple requirement files make sure you create a hook for each file.\n\n```yaml\nrepos:\n  - repo: https://github.com/jazzband/pip-tools\n    rev: 7.4.1\n    hooks:\n      - id: pip-compile\n        name: pip-compile setup.py\n        files: ^(setup\\.py|requirements\\.txt)$\n      - id: pip-compile\n        name: pip-compile requirements-dev.in\n        args: [requirements-dev.in]\n        files: ^requirements-dev\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements-lint.in\n        args: [requirements-lint.in]\n        files: ^requirements-lint\\.(in|txt)$\n      - id: pip-compile\n        name: pip-compile requirements.in\n        args: [requirements.in]\n        files: ^requirements\\.(in|txt)$\n```\n\n### Example usage for `pip-sync`\n\nNow that you have a `requirements.txt`, you can use `pip-sync` to update\nyour virtual environment to reflect exactly what's in there. This will\ninstall/upgrade/uninstall everything necessary to match the\n`requirements.txt` contents.\n\nRun it with `pip-sync` or `python -m piptools sync`. If you use multiple\nPython versions, you can also run `py -X.Y -m piptools sync` on Windows and\n`pythonX.Y -m piptools sync` on other systems.\n\n`pip-sync` must be installed into and run from the same virtual\nenvironment as your project to identify which packages to install\nor upgrade.\n\n**Be careful**: `pip-sync` is meant to be used only with a\n`requirements.txt` generated by `pip-compile`.\n\n```console\n$ pip-sync\nUninstalling flake8-2.4.1:\n    Successfully uninstalled flake8-2.4.1\nCollecting click==4.1\n    Downloading click-4.1-py2.py3-none-any.whl (62kB)\n    100% |................................| 65kB 1.8MB/s\n    Found existing installation: click 4.0\n    Uninstalling click-4.0:\n        Successfully uninstalled click-4.0\nSuccessfully installed click-4.1\n```\n\nTo sync multiple `*.txt` dependency lists, just pass them in via command\nline arguments, e.g.\n\n```console\n$ pip-sync dev-requirements.txt requirements.txt\n```\n\nPassing in empty arguments would cause it to default to `requirements.txt`.\n\nAny valid `pip install` flags or arguments may be passed with `pip-sync`'s\n`--pip-args` option, e.g.\n\n```console\n$ pip-sync requirements.txt --pip-args \"--no-cache-dir --no-deps\"\n```\n\n**Note**: `pip-sync` will not upgrade or uninstall packaging tools like\n`setuptools`, `pip`, or `pip-tools` itself. Use `python -m pip install --upgrade`\nto upgrade those packages.\n\n### Should I commit `requirements.in` and `requirements.txt` to source control?\n\nGenerally, yes. If you want a reproducible environment installation available from your source control,\nthen yes, you should commit both `requirements.in` and `requirements.txt` to source control.\n\nNote that if you are deploying on multiple Python environments (read the section below),\nthen you must commit a separate output file for each Python environment.\nWe suggest to use the `{env}-requirements.txt` format\n(ex: `win32-py3.7-requirements.txt`, `macos-py3.10-requirements.txt`, etc.).\n\n### Cross-environment usage of `requirements.in`/`requirements.txt` and `pip-compile`\n\nThe dependencies of a package can change depending on the Python environment in which it\nis installed. Here, we define a Python environment as the combination of Operating\nSystem, Python version (3.7, 3.8, etc.), and Python implementation (CPython, PyPy,\netc.). For an exact definition, refer to the possible combinations of [PEP 508\nenvironment markers][environment-markers].\n\nAs the resulting `requirements.txt` can differ for each environment, users must\nexecute `pip-compile` **on each Python environment separately** to generate a\n`requirements.txt` valid for each said environment. The same `requirements.in` can\nbe used as the source file for all environments, using\n[PEP 508 environment markers][environment-markers] as\nneeded, the same way it would be done for regular `pip` cross-environment usage.\n\nIf the generated `requirements.txt` remains exactly the same for all Python\nenvironments, then it can be used across Python environments safely. **But** users\nshould be careful as any package update can introduce environment-dependent\ndependencies, making any newly generated `requirements.txt` environment-dependent too.\nAs a general rule, it's advised that users should still always execute `pip-compile`\non each targeted Python environment to avoid issues.\n\n### Maximizing reproducibility\n\n`pip-tools` is a great tool to improve the reproducibility of builds.\nBut there are a few things to keep in mind.\n\n- `pip-compile` will produce different results in different environments as described in the previous section.\n- `pip` must be used with the `PIP_CONSTRAINT` environment variable to lock dependencies in build environments as documented in [#8439](https://github.com/pypa/pip/issues/8439).\n- Dependencies come from many sources.\n\nContinuing the `pyproject.toml` example from earlier, creating a single lock file could be done like:\n\n```console\n$ pip-compile --all-build-deps --all-extras --output-file=constraints.txt --strip-extras pyproject.toml\n#\n# This file is autogenerated by pip-compile with Python 3.9\n# by the following command:\n#\n#    pip-compile --all-build-deps --all-extras --output-file=constraints.txt --strip-extras pyproject.toml\n#\nasgiref==3.5.2\n    # via django\nattrs==22.1.0\n    # via pytest\nbackports-zoneinfo==0.2.1\n    # via django\ndjango==4.1\n    # via my-cool-django-app (pyproject.toml)\neditables==0.3\n    # via hatchling\nhatchling==1.11.1\n    # via my-cool-django-app (pyproject.toml::build-system.requires)\niniconfig==1.1.1\n    # via pytest\npackaging==21.3\n    # via\n    #   hatchling\n    #   pytest\npathspec==0.10.2\n    # via hatchling\npluggy==1.0.0\n    # via\n    #   hatchling\n    #   pytest\npy==1.11.0\n    # via pytest\npyparsing==3.0.9\n    # via packaging\npytest==7.1.2\n    # via my-cool-django-app (pyproject.toml)\nsqlparse==0.4.2\n    # via django\ntomli==2.0.1\n    # via\n    #   hatchling\n    #   pytest\n```\n\nSome build backends may also request build dependencies dynamically using the `get_requires_for_build_` hooks described in [PEP 517] and [PEP 660].\nThis will be indicated in the output with one of the following suffixes:\n\n- `(pyproject.toml::build-system.backend::editable)`\n- `(pyproject.toml::build-system.backend::sdist)`\n- `(pyproject.toml::build-system.backend::wheel)`\n\n### Other useful tools\n\n- [pip-compile-multi](https://pip-compile-multi.readthedocs.io/en/latest/) - pip-compile command wrapper for multiple cross-referencing requirements files.\n- [pipdeptree](https://github.com/tox-dev/pipdeptree) to print the dependency tree of the installed packages.\n- `requirements.in`/`requirements.txt` syntax highlighting:\n\n  - [requirements.txt.vim](https://github.com/raimon49/requirements.txt.vim) for Vim.\n  - [Python extension for VS Code](https://marketplace.visualstudio.com/items?itemName=ms-python.python) for VS Code.\n  - [pip-requirements.el](https://github.com/Wilfred/pip-requirements.el) for Emacs.\n\n### Deprecations\n\nThis section lists `pip-tools` features that are currently deprecated.\n\n- In the next major release, the `--allow-unsafe` behavior will be enabled by\n  default (https://github.com/jazzband/pip-tools/issues/989).\n  Use `--no-allow-unsafe` to keep the old behavior. It is recommended\n  to pass `--allow-unsafe` now to adapt to the upcoming change.\n- The legacy resolver is deprecated and will be removed in future versions.\n  The new default is `--resolver=backtracking`.\n- In the next major release, the `--strip-extras` behavior will be enabled by\n  default (https://github.com/jazzband/pip-tools/issues/1613).\n  Use `--no-strip-extras` to keep the old behavior.\n\n### A Note on Resolvers\n\nYou can choose from either default backtracking resolver or the deprecated legacy resolver.\n\nThe legacy resolver will occasionally fail to resolve dependencies. The\nbacktracking resolver is more robust, but can take longer to run in general.\n\nYou can continue using the legacy resolver with `--resolver=legacy` although\nnote that it is deprecated and will be removed in a future release.\n\n[jazzband]: https://jazzband.co/\n[jazzband-image]: https://jazzband.co/static/img/badge.svg\n[pypi]: https://pypi.org/project/pip-tools/\n[pypi-image]: https://img.shields.io/pypi/v/pip-tools.svg\n[pyversions]: https://pypi.org/project/pip-tools/\n[pyversions-image]: https://img.shields.io/pypi/pyversions/pip-tools.svg\n[pre-commit]: https://results.pre-commit.ci/latest/github/jazzband/pip-tools/main\n[pre-commit-image]: https://results.pre-commit.ci/badge/github/jazzband/pip-tools/main.svg\n[buildstatus-gha]: https://github.com/jazzband/pip-tools/actions?query=workflow%3ACI\n[buildstatus-gha-image]: https://github.com/jazzband/pip-tools/workflows/CI/badge.svg\n[codecov]: https://codecov.io/gh/jazzband/pip-tools\n[codecov-image]: https://codecov.io/gh/jazzband/pip-tools/branch/main/graph/badge.svg\n[Matrix Room Badge]: https://img.shields.io/matrix/pip-tools:matrix.org?label=Discuss%20on%20Matrix%20at%20%23pip-tools%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\n[Matrix Room]: https://matrix.to/#/%23pip-tools:matrix.org\n[Matrix Space Badge]: https://img.shields.io/matrix/jazzband:matrix.org?label=Discuss%20on%20Matrix%20at%20%23jazzband%3Amatrix.org&logo=matrix&server_fqdn=matrix.org&style=flat\n[Matrix Space]: https://matrix.to/#/%23jazzband:matrix.org\n[pip-tools-overview]: https://github.com/jazzband/pip-tools/raw/main/img/pip-tools-overview.svg\n[environment-markers]: https://peps.python.org/pep-0508/#environment-markers\n[PEP 517]: https://peps.python.org/pep-0517/\n[PEP 660]: https://peps.python.org/pep-0660/\n[discord-chat]: https://discord.gg/pypa\n[discord-chat-image]: https://img.shields.io/discord/803025117553754132?label=Discord%20chat%20%23pip-tools&style=flat-square\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "comment: false # avoid spamming reviews\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "piptools",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.560546875,
          "content": "[build-system]\nrequires = [\"setuptools>=63\", \"setuptools_scm[toml]>=7\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\n# https://peps.python.org/pep-0621/#readme\nrequires-python = \">=3.8\"\ndynamic = [\"version\"]\nname = \"pip-tools\"\ndescription = \"pip-tools keeps your pinned dependencies fresh.\"\nreadme = \"README.md\"\nauthors = [{ \"name\" = \"Vincent Driessen\", \"email\" = \"me@nvie.com\" }]\nlicense = { text = \"BSD\" }\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Environment :: Console\",\n  \"Intended Audience :: Developers\",\n  \"Intended Audience :: System Administrators\",\n  \"License :: OSI Approved :: BSD License\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Python :: 3\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: Implementation :: CPython\",\n  \"Programming Language :: Python :: Implementation :: PyPy\",\n  \"Programming Language :: Python\",\n  \"Topic :: Software Development :: Quality Assurance\",\n  \"Topic :: Software Development :: Testing\",\n  \"Topic :: System :: Systems Administration\",\n  \"Topic :: Utilities\",\n  \"Typing :: Typed\",\n]\nkeywords = [\"pip\", \"requirements\", \"packaging\"]\ndependencies = [\n  # direct dependencies\n  \"build >= 1.0.0\",\n  \"click >= 8\",\n  \"pip >= 22.2\",\n  \"pyproject_hooks\",\n  \"tomli; python_version < '3.11'\",\n  # indirect dependencies\n  \"setuptools\", # typically needed when pip-tools invokes setup.py\n  \"wheel\", # pip plugin needed by pip-tools\n\n]\n\n[project.urls]\nhomepage = \"https://github.com/jazzband/pip-tools/\"\ndocumentation = \"https://pip-tools.readthedocs.io/en/latest/\"\nrepository = \"https://github.com/jazzband/pip-tools\"\nchangelog = \"https://github.com/jazzband/pip-tools/releases\"\n\n[project.optional-dependencies]\ntesting = [\n  \"pytest >= 7.2.0\",\n  \"pytest-rerunfailures\",\n  \"pytest-xdist\",\n  \"tomli-w\",\n  # build deps for tests\n  \"flit_core >=2,<4\",\n  \"poetry_core>=1.0.0\",\n]\ncoverage = [\"covdefaults\", \"pytest-cov\"]\n\n[project.scripts]\npip-compile = \"piptools.scripts.compile:cli\"\npip-sync = \"piptools.scripts.sync:cli\"\n\n[tool.isort]\nprofile = \"black\"\nadd_imports = \"from __future__ import annotations\"\n\n[tool.mypy]\ndisallow_untyped_defs = true\ndisallow_any_generics = true\ndisallow_incomplete_defs = true\ndisallow_subclassing_any = true\ndisallow_untyped_calls = true\ndisallow_untyped_decorators = true\nignore_missing_imports = true\nno_implicit_optional = true\nno_implicit_reexport = true\nstrict_equality = true\nwarn_redundant_casts = true\nwarn_return_any = true\nwarn_unused_configs = true\nwarn_unused_ignores = true\n# Avoid error: Duplicate module named 'setup'\n# https://github.com/python/mypy/issues/4008\nexclude = \"^tests/test_data/\"\n\n[[tool.mypy.overrides]]\nmodule = [\"tests.*\"]\ndisallow_untyped_defs = false\ndisallow_incomplete_defs = false\n\n[tool.pytest.ini_options]\naddopts = [\n  # `pytest-xdist`:\n  \"--numprocesses=auto\",\n\n  # The `worksteal` distribution method is useful if the run times of different tests vary greatly,\n  # as it ensures more efficient resource usage, improving the performance of testing.\n  \"--dist=worksteal\",\n\n  # Show 20 slowest invocations:\n  \"--durations=20\",\n]\nnorecursedirs = \".* build dist venv test_data piptools/_compat/*\"\ntestpaths = \"tests piptools\"\nfilterwarnings = [\"always\"]\nmarkers = [\"network: mark tests that require internet access\"]\n\n[tool.setuptools.packages.find]\n# needed only because we did not adopt src layout yet\ninclude = [\"piptools*\"]\n\n[tool.setuptools_scm]\nlocal_scheme = \"dirty-tag\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tox.ini",
          "type": "blob",
          "size": 4.20703125,
          "content": "[tox]\nenvlist =\n    # NOTE: keep this in sync with the env list in .github/workflows/ci.yml.\n    py{38,39,310,311,312,py3}-pip{supported,lowest,latest,main}-coverage\n    pip{supported,lowest,latest,main}-coverage\n    pip{supported,lowest,latest,main}\n    checkqa\n    readme\nskip_missing_interpreters = True\n\n[testenv]\ndescription = run the tests with pytest\nextras =\n    testing\n    coverage: coverage\ndeps =\n    pipsupported: pip==24.2\n    piplowest: pip==22.2.*\n    piplatest: pip\n    pipmain: https://github.com/pypa/pip/archive/main.zip\nsetenv =\n    coverage: PYTEST_ADDOPTS=--strict-markers --doctest-modules --cov --cov-report=term-missing --cov-report=xml {env:PYTEST_ADDOPTS:}\ncommands_pre =\n    piplatest: python -m pip install -U pip\n    pip --version\ncommands = pytest {posargs}\npassenv =\n    CI\n    FORCE_COLOR\n    GITHUB_ACTIONS\n    MYPY_FORCE_COLOR\n    PRE_COMMIT_COLOR\n    PY_COLORS\npip_pre=True\n\n[testenv:checkqa]\ndescription = format the code base and check its quality\nskip_install = True\ndeps = pre-commit\ncommands_pre =\ncommands = pre-commit run --all-files --show-diff-on-failure\n\n[testenv:readme]\ndescription = check whether the long description will render correctly on PyPI\ndeps =\n    build\n    twine\ncommands_pre =\ncommands =\n    python -m build --outdir {envtmpdir} --sdist {toxinidir}\n    twine check --strict {envtmpdir}{/}*\nskip_install = true\n\n[testenv:pip-compile-docs]\ndescription = compile requirements for the documentation\nchangedir = {[testenv:build-docs]changedir}\ncommands_pre =\ncommands = python -m piptools compile --strip-extras --allow-unsafe --quiet requirements.in {posargs}\n\n[testenv:build-docs]\ndescription = build the documentation\ndeps =\n  -r{toxinidir}/docs/requirements.txt\n  # FIXME: re-enable the \"-r\" + \"-c\" paradigm once the pip bug is fixed.\n  # Ref: https://github.com/pypa/pip/issues/9243\n  # -r{toxinidir}/docs/requirements.in\n  # -c{toxinidir}/docs/requirements.txt\ncommands_pre =\ncommands =\n  # Retrieve possibly missing commits:\n  -git fetch --unshallow\n  -git fetch --tags\n\n  # Build the html docs with Sphinx:\n  {envpython} -m sphinx \\\n    -j auto \\\n    -b html \\\n    {tty:--color} \\\n    -a \\\n    -n -W --keep-going \\\n    -d \"{temp_dir}/.doctrees\" \\\n    . \\\n    \"{envdir}/docs_out\"\n\n  # Print out the output docs dir and a way to serve html:\n  -{envpython} -c\\\n  'import pathlib;\\\n  docs_dir = pathlib.Path(r\"{envdir}\") / \"docs_out\";\\\n  index_file = docs_dir / \"index.html\";\\\n  print(\"\\n\" + \"=\" * 120 +\\\n  f\"\\n\\nDocumentation available under:\\n\\n\\\n  \\tfile://\\{index_file\\}\\n\\nTo serve docs, use\\n\\n\\\n  \\t$ python3 -m http.server --directory \\\n  \\N\\{QUOTATION MARK\\}\\{docs_dir\\}\\N\\{QUOTATION MARK\\} 0\\n\\n\" +\\\n  \"=\" * 120)'\nchangedir = {toxinidir}/docs\nisolated_build = true\npassenv =\n  SSH_AUTH_SOCK\nskip_install = false\nallowlist_externals =\n  git\n\n\n[testenv:preview-docs]\ndescription = preview the docs\ndeps =\n  sphinx-autobuild\n  {[testenv:build-docs]deps}\ncommands_pre =\ncommands =\n  # Retrieve possibly missing commits:\n  -git fetch --unshallow\n  -git fetch --tags\n\n  # Build the html docs with sphinx-autobuild:\n  {envpython} -m sphinx_autobuild \\\n    -j auto \\\n    -b html \\\n    -n \\\n    -W \\\n    -d \"{temp_dir}/.doctrees\" \\\n    . \\\n    --watch ../README.md \\\n    --watch ../CHANGELOG.md \\\n    \"{envdir}/docs_out\"\n\nchangedir = {[testenv:build-docs]changedir}\nisolated_build = {[testenv:build-docs]isolated_build}\npassenv = {[testenv:build-docs]passenv}\nskip_install = {[testenv:build-docs]skip_install}\nallowlist_externals = {[testenv:build-docs]allowlist_externals}\n\n\n[testenv:linkcheck-docs]\ndescription = check links in the documentation\ndeps =\n  -r{toxinidir}/docs/requirements.txt\n  # FIXME: re-enable the \"-r\" + \"-c\" paradigm once the pip bug is fixed.\n  # Ref: https://github.com/pypa/pip/issues/9243\n  # -r{toxinidir}/docs/requirements.in\n  # -c{toxinidir}/docs/requirements.txt\ncommands_pre =\ncommands =\n  # Retrieve possibly missing commits:\n  -git fetch --unshallow\n  -git fetch --tags\n\n  # Build the html docs with Sphinx:\n  {envpython} -m sphinx \\\n    -j auto \\\n    -b linkcheck \\\n    {tty:--color} \\\n    -a \\\n    -n -W --keep-going \\\n    -d \"{temp_dir}/.doctrees\" \\\n    . \\\n    \"{envdir}/docs_out\"\nchangedir = {toxinidir}/docs\nisolated_build = true\npassenv =\n  SSH_AUTH_SOCK\nskip_install = false\nallowlist_externals =\n  git\n"
        }
      ]
    }
  ]
}