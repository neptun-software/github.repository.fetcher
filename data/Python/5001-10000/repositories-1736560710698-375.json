{
  "metadata": {
    "timestamp": 1736560710698,
    "page": 375,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jessevig/bertviz",
      "stars": 7062,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "/venv/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.12890625,
          "content": "include bertviz/head_view.js\ninclude bertviz/model_view.js\ninclude bertviz/neuron_view.js\ninclude bertviz/transformers_neuron_view/*"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.4423828125,
          "content": "<h1 align=\"center\">\n    BertViz\n</h1>\n<h3 align=\"center\">\n Visualize Attention in NLP Models\n</h3>\n<h3 align=\"center\">\n    <a href=\"#-quick-tour\">Quick Tour</a> &bull;\n    <a href=\"#%EF%B8%8F-getting-started\">Getting Started</a> &bull;\n    <a href=\"https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing\">Colab Tutorial</a> &bull;\n    <a href=\"#-paper\">Paper</a>\n</h3>\n\nBertViz is an interactive tool for visualizing attention in [Transformer](https://jalammar.github.io/illustrated-transformer/) language models such as BERT, GPT2, or T5. It can be run inside a Jupyter or Colab\n notebook through a simple Python API that supports most [Huggingface models](https://huggingface.co/models). BertViz extends the\n   [Tensor2Tensor visualization tool](https://github.com/tensorflow/tensor2tensor/tree/master/tensor2tensor/visualization)\n    by [Llion Jones](https://medium.com/@llionj), providing multiple views that each offer a unique lens into the attention mechanism.\n\nGet updates for this and related projects on [Twitter\n![Twitter logo](images/twitter.svg)](https://twitter.com/jesse_vig).\n\n## 🚀 Quick Tour\n\n### Head View\nThe *head view* visualizes attention for one or more attention heads in the same \n layer. It is based on the excellent [Tensor2Tensor visualization tool](https://github.com/tensorflow/tensor2tensor/tree/master/tensor2tensor/visualization) by [Llion Jones](https://medium.com/@llionj). \n\n🕹 Try out the head view in the [<b><u>Interactive Colab Tutorial</u></b>](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) (all visualizations pre-loaded).\n<p>\n    <img src=\"https://raw.githubusercontent.com/jessevig/bertviz/master/images/head-view.gif\" width=\"425\"/>\n</p>\n\n\n### Model View \n\nThe *model view* shows a bird's-eye view of attention across all layers and heads.\n\n🕹 Try out the model view in the [<b><u>Interactive Colab Tutorial</u></b>](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) (all visualizations pre-loaded).\n\n![model view](images/model-view-noscroll.gif)\n\n### Neuron View \nThe *neuron view* visualizes individual neurons in the query and key vectors and shows how they are used to compute attention.\n\n🕹 Try out the neuron view in the [<b><u>Interactive Colab Tutorial</u></b>](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) (all visualizations pre-loaded).\n\n\n![neuron view](images/neuron-view-dark.gif)\n\n## ⚡️ Getting Started\n\n### Running BertViz in a Jupyter Notebook\n\nFrom the command line:\n\n```bash\npip install bertviz\n```\nYou must also have Jupyter Notebook and ipywidgets installed:\n\n```bash\npip install jupyterlab\npip install ipywidgets\n```\n(If you run into any issues installing Jupyter or ipywidgets, consult the documentation [here](https://jupyter.org/install) and [here](https://ipywidgets.readthedocs.io/en/stable/user_install.html).)\n\nTo create a new Jupyter notebook, simply run:\n\n```bash\njupyter notebook\n```\n\nThen click `New` and select `Python 3 (ipykernel)` if prompted.\n\n\n### Running BertViz in Colab\n\nTo run in [Colab](https://colab.research.google.com/), simply add the following cell at the beginning of your Colab notebook:\n\n```\n!pip install bertviz\n```\n\n### Sample code\nRun the following code to load the `xtremedistil-l12-h384-uncased` model and display it in the model view: \n\n```python\nfrom transformers import AutoTokenizer, AutoModel, utils\nfrom bertviz import model_view\nutils.logging.set_verbosity_error()  # Suppress standard warnings\n\nmodel_name = \"microsoft/xtremedistil-l12-h384-uncased\"  # Find popular HuggingFace models here: https://huggingface.co/models\ninput_text = \"The cat sat on the mat\"  \nmodel = AutoModel.from_pretrained(model_name, output_attentions=True)  # Configure model to return attention values\ntokenizer = AutoTokenizer.from_pretrained(model_name)\ninputs = tokenizer.encode(input_text, return_tensors='pt')  # Tokenize input text\noutputs = model(inputs)  # Run model\nattention = outputs[-1]  # Retrieve attention from model outputs\ntokens = tokenizer.convert_ids_to_tokens(inputs[0])  # Convert input ids to token strings\nmodel_view(attention, tokens)  # Display model view\n```\n\nThe visualization may take a few seconds to load. Feel free to experiment with different input texts and\n [models](https://huggingface.co/models). \nSee [Documentation](#-documentation) for additional use cases and examples, e.g., encoder-decoder models.\n\n#### Running sample notebooks\n\nYou may also run any of the sample [notebooks](notebooks/) included with BertViz:\n\n```bash\ngit clone --depth 1 git@github.com:jessevig/bertviz.git\ncd bertviz/notebooks\njupyter notebook\n```\n## 🕹 Interactive Tutorial\n\nCheck out the [<b><u>Interactive Colab Tutorial</u></b>](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing) \nto learn more about BertViz and try out the tool. <b>Note</b>: all visualizations are pre-loaded, so there is no need to execute any cells.\n\n[![Tutorial](images/tutorial-screenshots.jpg)](https://colab.research.google.com/drive/1hXIQ77A4TYS4y3UthWF-Ci7V7vVUoxmQ?usp=sharing)\n\n\n## 📖 Documentation\n\n### Table of contents\n\n- [Self-attention models (BERT, GPT-2, etc.)](#self-attention-models-bert-gpt-2-etc)\n  * [Head and Model Views](#head-and-model-views)\n  * [Neuron View](#neuron-view-1)\n- [Encoder-decoder models (BART, T5, etc.)](#encoder-decoder-models-bart-t5-etc)\n- [Installing from source](#installing-from-source)\n- [Additional options](#additional-options)\n  * [Dark / light mode](#dark--light-mode)\n  * [Filtering layers](#filtering-layers)\n  * [Setting default layer/head(s)](#setting-default-layerheads)\n  * [Visualizing sentence pairs](#visualizing-sentence-pairs)\n  * [Obtain HTML representations](#obtain-HTML-representations)\n  * [Non-Huggingface models](#non-huggingface-models)\n - [Limitations](#%EF%B8%8F-limitations)\n\n### Self-attention models (BERT, GPT-2, etc.)\n\n#### Head and Model Views\nFirst load a Huggingface model, either a pre-trained model as shown below, or your own fine-tuned model.\n Be sure to set `output_attentions=True`.\n```python\nfrom transformers import AutoTokenizer, AutoModel, utils\nutils.logging.set_verbosity_error()  # Suppress standard warnings\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = AutoModel.from_pretrained(\"bert-base-uncased\", output_attentions=True)\n```\n\nThen prepare inputs and compute attention:\n\n```python\ninputs = tokenizer.encode(\"The cat sat on the mat\", return_tensors='pt')\noutputs = model(inputs)\nattention = outputs[-1]  # Output includes attention weights when output_attentions=True\ntokens = tokenizer.convert_ids_to_tokens(inputs[0]) \n```\n\nFinally, display the attention weights using the [`head_view`](bertviz/head_view.py) or [`model_view`](bertviz/model_view.py)\n functions:\n\n```python\nfrom bertviz import head_view\nhead_view(attention, tokens)\n```\n\n<b>Examples</b>: DistilBERT ([Model View Notebook](notebooks/model_view_distilbert.ipynb), [Head View Notebook](notebooks/head_view_distilbert.ipynb))\n\nFor full API, please refer to the source code for the [head view](bertviz/head_view.py) or [model view](bertviz/model_view.py).\n\n\n#### Neuron View\n\nThe neuron view is invoked differently than the head view or model view, due to requiring access to the model's\nquery/key vectors, which are not returned through the Huggingface API. It is currently limited to custom versions of BERT, GPT-2, and\nRoBERTa included with BertViz.\n\n```python\n# Import specialized versions of models (that return query/key vectors)\nfrom bertviz.transformers_neuron_view import BertModel, BertTokenizer\nfrom bertviz.neuron_view import show\n\nmodel_type = 'bert'\nmodel_version = 'bert-base-uncased'\ndo_lower_case = True\nsentence_a = \"The cat sat on the mat\"\nsentence_b = \"The cat lay on the rug\"\nmodel = BertModel.from_pretrained(model_version, output_attentions=True)\ntokenizer = BertTokenizer.from_pretrained(model_version, do_lower_case=do_lower_case)\nshow(model, model_type, tokenizer, sentence_a, sentence_b, layer=2, head=0)\n```\n\n<b>Examples</b>:\nBERT ([Notebook](notebooks/neuron_view_bert.ipynb),\n[Colab](https://colab.research.google.com/drive/1m37iotFeubMrp9qIf9yscXEL1zhxTN2b)) •\nGPT-2 ([Notebook](notebooks/neuron_view_gpt2.ipynb),\n[Colab](https://colab.research.google.com/drive/1s8XCCyxsKvNRWNzjWi5Nl8ZAYZ5YkLm_)) •\nRoBERTa\n([Notebook](notebooks/neuron_view_roberta.ipynb))  \n\nFor full API, please refer to the [source](bertviz/neuron_view.py).\n\n### Encoder-decoder models (BART, T5, etc.)\n\nThe head view and model view both support encoder-decoder models.\n\nFirst, load an encoder-decoder model:\n\n```python\nfrom transformers import AutoTokenizer, AutoModel\n\ntokenizer = AutoTokenizer.from_pretrained(\"Helsinki-NLP/opus-mt-en-de\")\nmodel = AutoModel.from_pretrained(\"Helsinki-NLP/opus-mt-en-de\", output_attentions=True)\n```\n\nThen prepare the inputs and compute attention:\n```python\nencoder_input_ids = tokenizer(\"She sees the small elephant.\", return_tensors=\"pt\", add_special_tokens=True).input_ids\nwith tokenizer.as_target_tokenizer():\n    decoder_input_ids = tokenizer(\"Sie sieht den kleinen Elefanten.\", return_tensors=\"pt\", add_special_tokens=True).input_ids\n\noutputs = model(input_ids=encoder_input_ids, decoder_input_ids=decoder_input_ids)\n\nencoder_text = tokenizer.convert_ids_to_tokens(encoder_input_ids[0])\ndecoder_text = tokenizer.convert_ids_to_tokens(decoder_input_ids[0])\n```\n\nFinally, display the visualization using either [`head_view`](bertviz/head_view.py) or [`model_view`](bertviz/model_view.py).\n```python\nfrom bertviz import model_view\nmodel_view(\n    encoder_attention=outputs.encoder_attentions,\n    decoder_attention=outputs.decoder_attentions,\n    cross_attention=outputs.cross_attentions,\n    encoder_tokens= encoder_text,\n    decoder_tokens = decoder_text\n)\n```\n\nYou may select `Encoder`, `Decoder`, or `Cross` attention from the drop-down in the upper left corner of the visualization.\n\n<b>Examples</b>: MarianMT ([Notebook](notebooks/model_view_encoder_decoder.ipynb)) • BART ([Notebook](notebooks/model_view_bart.ipynb))\n\nFor full API, please refer to the source code for the [head view](bertviz/head_view.py) or [model view](bertviz/model_view.py).\n\n### Installing from source\n```bash\ngit clone https://github.com/jessevig/bertviz.git\ncd bertviz\npython setup.py develop\n```\n\n### Additional options\n\n#### Dark / light mode\n\nThe model view and neuron view support dark (default) and light modes. You may set the mode using\nthe `display_mode` parameter:\n```python\nmodel_view(attention, tokens, display_mode=\"light\")\n```\n\n\n#### Filtering layers\n\nTo improve the responsiveness of the tool when visualizing larger models or inputs, you may set the `include_layers`\n parameter to restrict the visualization to a subset of layers (zero-indexed). This option is available in the head view and model\nview.\n\n**Example:** Render model view with only layers 5 and 6 displayed\n```python\nmodel_view(attention, tokens, include_layers=[5, 6])\n```\n\nFor the model view, you may also restrict the visualization to a subset of attention heads (zero-indexed) by setting the \n`include_heads` parameter. \n\n\n#### Setting default layer/head(s)\n\nIn the head view, you may choose a specific `layer` and collection of `heads` as the default selection when the\n visualization first renders. Note: this is different from the `include_heads`/`include_layers` parameter (above), which \n removes layers and heads from the visualization completely.\n\n**Example:** Render head view with layer 2 and heads 3 and 5 pre-selected\n```python\nhead_view(attention, tokens, layer=2, heads=[3,5])\n```\n\nYou may also pre-select a specific `layer` and single `head` for the neuron view. \n\n#### Visualizing sentence pairs\n\nSome models, e.g. BERT, accept a pair of sentences as input. BertViz optionally supports a drop-down menu that allows \nuser to filter attention based on which sentence the tokens are in, e.g. only show attention between tokens in first\n sentence and tokens in second sentence.\n \n \n##### Head and model views\nTo enable this feature when invoking the [`head_view`](bertviz/head_view.py) or [`model_view`](bertviz/model_view.py) functions, set\n the `sentence_b_start` parameter to the start index of the second sentence. Note that the method for computing this\n index will depend on the model.\n \nExample (BERT):\n\n```python\nfrom bertviz import head_view\nfrom transformers import AutoTokenizer, AutoModel, utils\nutils.logging.set_verbosity_error()  # Suppress standard warnings\n\n# NOTE: This code is model-specific\nmodel_version = 'bert-base-uncased'\nmodel = AutoModel.from_pretrained(model_version, output_attentions=True)\ntokenizer = AutoTokenizer.from_pretrained(model_version)\nsentence_a = \"the rabbit quickly hopped\"\nsentence_b = \"The turtle slowly crawled\"\ninputs = tokenizer.encode_plus(sentence_a, sentence_b, return_tensors='pt')\ninput_ids = inputs['input_ids']\ntoken_type_ids = inputs['token_type_ids'] # token type id is 0 for Sentence A and 1 for Sentence B\nattention = model(input_ids, token_type_ids=token_type_ids)[-1]\nsentence_b_start = token_type_ids[0].tolist().index(1) # Sentence B starts at first index of token type id 1\ntoken_ids = input_ids[0].tolist() # Batch index 0\ntokens = tokenizer.convert_ids_to_tokens(token_ids)    \nhead_view(attention, tokens, sentence_b_start)\n``` \n\n\n##### Neuron view\n\nTo enable this option in the neuron view, simply set the `sentence_a` and `sentence_b` parameters in [`neuron_view.show()`](bertviz/neuron_view.py).\n\n#### Obtain HTML representations\n\nSupport to retrieve the generated HTML representations has been added to head_view, model_view and neuron_view.\n\nSetting the 'html_action' parameter to 'return' will make the function call return a single HTML Python object that can be further processed. Remember you can access the HTML source using the data attribute of a Python HTML object.\n\nThe default behavior for 'html_action' is 'view', which will display the visualization but won't return the HTML object.\n\nThis functionality is useful if you need to:\n- Save the representation as an independent HTML file that can be accessed via web browser\n- Use custom display methods as the ones needed in Databricks to visualize HTML objects\n\nExample (head and model views):\n\n```python\nfrom transformers import AutoTokenizer, AutoModel, utils\nfrom bertviz import head_view\n\nutils.logging.set_verbosity_error()  # Suppress standard warnings\ntokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = AutoModel.from_pretrained(\"bert-base-uncased\", output_attentions=True)\n\ninputs = tokenizer.encode(\"The cat sat on the mat\", return_tensors='pt')\noutputs = model(inputs)\nattention = outputs[-1]  # Output includes attention weights when output_attentions=True\ntokens = tokenizer.convert_ids_to_tokens(inputs[0]) \n\nhtml_head_view = head_view(attention, tokens, html_action='return')\n\nwith open(\"PATH_TO_YOUR_FILE/head_view.html\", 'w') as file:\n    file.write(html_head_view.data)\n\n```\n\nExample (neuron view):\n\n```python\n# Import specialized versions of models (that return query/key vectors)\nfrom bertviz.transformers_neuron_view import BertModel, BertTokenizer\nfrom bertviz.neuron_view import show\n\nmodel_type = 'bert'\nmodel_version = 'bert-base-uncased'\ndo_lower_case = True\nsentence_a = \"The cat sat on the mat\"\nsentence_b = \"The cat lay on the rug\"\nmodel = BertModel.from_pretrained(model_version, output_attentions=True)\ntokenizer = BertTokenizer.from_pretrained(model_version, do_lower_case=do_lower_case)\nhtml_neuron_view = show(model, model_type, tokenizer, sentence_a, sentence_b, layer=2, head=0, html_action='return')\n\nwith open(\"PATH_TO_YOUR_FILE/neuron_view.html\", 'w') as file:\n    file.write(html_neuron_view.data)\n```\n\n#### Non-Huggingface models\n\nThe head view and model view may be used to\n visualize self-attention for any standard Transformer model,\nas long as the attention weights are available and follow the format specified in [`head_view`](bertviz/head_view.py) and\n [`model_view`](bertviz/model_view.py) (which is the format \nreturned from Huggingface models). In some case, Tensorflow checkpoints may be loaded as Huggingface models as described\n in the\n [Huggingface docs](https://huggingface.co/transformers/). \n \n \n### ⚠️ Limitations\n\n#### Tool\n* This tool is designed for shorter inputs and may run slowly if the input text is very long and/or the model is very large.\n To mitigate this, you may wish to filter the layers displayed by setting the **`include_layers`** parameter, as described [above](#filtering-layers).\n* When running on Colab, some of the visualizations will fail (runtime disconnection) when the input text is long.  To mitigate this, you may wish to filter the layers displayed by setting the **`include_layers`** parameter, as described [above](#filtering-layers).\n* The *neuron view* only supports the custom BERT, GPT-2, and RoBERTa models included with the tool. This view needs access to the query and key vectors, \nwhich required modifying the model code (see `transformers_neuron_view` directory), which has only been done for these three models.\n\n\n#### Attention as \"explanation\"?\n* Visualizing attention weights illuminates one type of architecture within the model but does not\nnecessarily provide a direct *explanation* for predictions [[1](https://arxiv.org/pdf/1909.11218.pdf), [2](https://arxiv.org/abs/1902.10186), [3](https://arxiv.org/pdf/1908.04626.pdf)].\n* If you wish to understand how the input text influences output predictions more directly, consider [saliency methods](https://arxiv.org/pdf/2010.05607.pdf) provided \nby tools such as the [Language Interpretability Toolkit](https://github.com/PAIR-code/lit) or [Ecco](https://github.com/jalammar/ecco).\n\n\n## 🔬 Paper\n\n[<b>A Multiscale Visualization of Attention in the Transformer Model</b>](https://www.aclweb.org/anthology/P19-3007.pdf) (ACL System Demonstrations 2019).\n\n\n### Citation\n```bibtex\n@inproceedings{vig-2019-multiscale,\n    title = \"A Multiscale Visualization of Attention in the Transformer Model\",\n    author = \"Vig, Jesse\",\n    booktitle = \"Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics: System Demonstrations\",\n    month = jul,\n    year = \"2019\",\n    address = \"Florence, Italy\",\n    publisher = \"Association for Computational Linguistics\",\n    url = \"https://www.aclweb.org/anthology/P19-3007\",\n    doi = \"10.18653/v1/P19-3007\",\n    pages = \"37--42\",\n}\n```\n## Authors\n[Jesse Vig](https://twitter.com/jesse_vig)\n\n## 🙏 Acknowledgments\nWe are grateful to the authors of the following projects, which are incorporated into this repo:\n* https://github.com/tensorflow/tensor2tensor\n* https://github.com/huggingface/pytorch-pretrained-BERT\n\n## License\n\nThis project is licensed under the Apache 2.0 License - see the [LICENSE](LICENSE) file for details\n"
        },
        {
          "name": "bertviz",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "notebooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 0.689453125,
          "content": "import pathlib\nfrom setuptools import setup\n\n# The directory containing this file\nHERE = pathlib.Path(__file__).parent\n\n# The text of the README file\nREADME = (HERE / \"README.md\").read_text()\n\n# This call to setup() does all the work\nsetup(\n    name=\"bertviz\",\n    version=\"1.4.0\",\n    description=\"Attention visualization tool for NLP Transformer models.\",\n    long_description=README,\n    long_description_content_type=\"text/markdown\",\n    url=\"https://github.com/jessevig/bertviz\",\n    author=\"Jesse Vig\",\n    license=\"Apache 2.0\",\n    packages=[\"bertviz\"],\n    include_package_data=True,\n    install_requires=[\"transformers>=2.0\", \"torch>=1.0\", \"tqdm\", \"boto3\", \"requests\", \"regex\", \"sentencepiece\"],\n)"
        }
      ]
    }
  ]
}